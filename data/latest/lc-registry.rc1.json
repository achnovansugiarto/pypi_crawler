{
  "info": {
    "author": "libcommon",
    "author_email": "libcommon@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# registry-py\n\n## Overview\n\nMetaprogramming means writing programs that manipulate other programs, such as compilers, interpreters, macros, etc.\nPython enables metaprogramming in a number of ways, one of which is `metaclasses`, which are special classes that can\nhook into child class creation methods, and can enforce invariants on those child classes. The\n[abc.ABCMeta](https://docs.python.org/3/library/abc.html#module-abc) class is one example, and allows for the\ndeclaration of [abstractmethod](https://docs.python.org/3/library/abc.html#abc.abstractmethod)s which must be\nimplemented by child classes. `registry-py` uses metaprogramming to implement the\n[registry pattern](https://github.com/faif/python-patterns/blob/master/patterns/behavioral/registry.py), where a `metaclass`\nstores a map of all child classes. This pattern is particularly useful for auto-discovery or auto-registration, where a\nprogram doesn't doesn't need to know where code is stored to know what's been implemented.\n\n## Installation\n\n### Install from PyPi (preferred method)\n\n```bash\npip install lc-registry\n```\n\n### Install from GitHub with Pip\n\n```bash\npip install git+https://github.com/libcommon/registry-py.git@vx.x.x#egg=lc_registry\n```\n\nwhere `x.x.x` is the version you want to download.\n\n## Install by Manual Download\n\nTo download the source distribution and/or wheel files, navigate to\n`https://github.com/libcommon/registry-py/tree/releases/vx.x.x/dist`, where `x.x.x` is the version you want to install,\nand download either via the UI or with a tool like wget. Then to install run:\n\n```bash\npip install <downloaded file>\n```\n\nDo _not_ change the name of the file after downloading, as Pip requires a specific naming convention for installation files.\n\n## Dependencies\n\n`registry-py` does not have external dependencies. Only Python versions >= 3.6 are officially supported.\n\n## Getting Started\n\nSuppose you want to implement a plugin system for a command line tool. One approach could be to require that plugin\nfiles are written to a specific folder, say `src/plugins/contrib`, and use\n[importlib.import_module](https://docs.python.org/3.8/library/importlib.html#importlib.import_module) to import modules\nfrom there on program startup. However, plugin files not in the proper directory will not get loaded, and finding\nplugins requires walking a directory tree. Using a registry would alleviate both these issues.\n\n```python\n# plugin_registry.py\nfrom abc import ABCMeta\nfrom typing import Any, ClassVar, Dict, Type\n\nfrom lc_registry import RegistryMetaclassMixin\n\n\nclass PluginRegistry(RegistryMetaclassMixin, ABCMeta):\n    \"\"\"Metaclass with registry.\"\"\"\n    __slots__ = ()\n    _REGISTRY: ClassVar[Dict[str, Type[Any]]] = dict()\n\n    @classmethod\n    def _add_class(cls, name: str, new_cls: Type[Any]) -> None:\n        # All plugins must be named \"*Plugin\"\n        # NOTE: This is just an example what you can do with _add_class\n        if name == \"PluginBase\" or not name.endswith(\"Plugin\"):\n            return None\n        cls._REGISTRY[name] = new_cls\n        return None\n\n    @classmethod\n    def run_plugins(cls):\n        # Use cls._REGISTRY (or cls.registry() method) to\n        # iterate over each plugin and run it.\n\n\nclass PluginBase(metaclass=PluginRegistry):\n    \"\"\"Base class for all plugins. All child classes\n    will be added to the plugin registry once they come\n    into scope (AKA when Python creates the type).\n    \"\"\"\n    __slots__ = ()\n\n    @abstractmethod\n    def run_plugin(self, context: Dict[str, Any]) -> None:\n        \"\"\"Plugin entrypoint.\"\"\"\n        raise NotImplementedError\n\n\n# line_count_plugin.py\nfrom typing import Any, Dict\n\nfrom plugin_registry import PluginBase\n\n\nclass LineCountPlugin(PluginBase):\n    \"\"\"Plugin that counts the number of lines in a file.\"\"\"\n    __slots__ = ()\n\n    def run_plugin(self, context: Dict[str, Any]) -> None:\n        if \"filepath\" in context:\n            filepath = context.get(\"filepath\")\n            line_count = 0\n            with open(filepath) as source_file:\n                for _ in source_file:\n                    line_count += 1\n            print(\"{}\\t{}\".format(filepath, line_count))\n```\n\nNote the doc string for the `PluginBase` class in the example above: \"_... once they come into scope (AKA when\nPython creates the type)_.\" This is **important** - child classes will only be added to the registry if Python\nloads them into the program, meaning if they get imported somewhere.\n\n## Contributing/Suggestions\n\nContributions and suggestions are welcome! To make a feature request, report a bug, or otherwise comment on existing\nfunctionality, please file an issue. For contributions please submit a PR, but make sure to lint, type-check, and test\nyour code before doing so. Thanks in advance!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/libcommon/registry-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lc-registry",
    "package_url": "https://pypi.org/project/lc-registry/",
    "platform": "",
    "project_url": "https://pypi.org/project/lc-registry/",
    "project_urls": {
      "Homepage": "https://github.com/libcommon/registry-py",
      "Issue Tracker": "https://github.com/libcommon/registry-py/issues",
      "Releases": "https://github.com/libcommon/registry-py/releases"
    },
    "release_url": "https://pypi.org/project/lc-registry/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7382495,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be318f0b1a3862e22c79018c74bfa64d2cfeaf19e80af8c70f526730fd7016b0",
          "md5": "3a553abf34b355003dbe4e7a7e9ecf72",
          "sha256": "f709fb32c11c53efbce23d2e2807deed040ce8c29f4f15bd5915d3ada139eca9"
        },
        "downloads": -1,
        "filename": "lc_registry-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a553abf34b355003dbe4e7a7e9ecf72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6332,
        "upload_time": "2020-06-02T21:48:34",
        "upload_time_iso_8601": "2020-06-02T21:48:34.626920Z",
        "url": "https://files.pythonhosted.org/packages/be/31/8f0b1a3862e22c79018c74bfa64d2cfeaf19e80af8c70f526730fd7016b0/lc_registry-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c8a0dec8ca80e448416aed867c9edd0ed83f25168efe3bbab7d0a50e5dd6760",
          "md5": "ca04a80ee4ea3be2ee1dbe6ed904e82a",
          "sha256": "27e62956b8e02a7458a52f5bd627b7d143971ea8ea1d2aafa356d741f08a7cfe"
        },
        "downloads": -1,
        "filename": "lc_registry-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ca04a80ee4ea3be2ee1dbe6ed904e82a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4726,
        "upload_time": "2020-06-02T21:48:36",
        "upload_time_iso_8601": "2020-06-02T21:48:36.843722Z",
        "url": "https://files.pythonhosted.org/packages/4c/8a/0dec8ca80e448416aed867c9edd0ed83f25168efe3bbab7d0a50e5dd6760/lc_registry-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be318f0b1a3862e22c79018c74bfa64d2cfeaf19e80af8c70f526730fd7016b0",
        "md5": "3a553abf34b355003dbe4e7a7e9ecf72",
        "sha256": "f709fb32c11c53efbce23d2e2807deed040ce8c29f4f15bd5915d3ada139eca9"
      },
      "downloads": -1,
      "filename": "lc_registry-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a553abf34b355003dbe4e7a7e9ecf72",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6332,
      "upload_time": "2020-06-02T21:48:34",
      "upload_time_iso_8601": "2020-06-02T21:48:34.626920Z",
      "url": "https://files.pythonhosted.org/packages/be/31/8f0b1a3862e22c79018c74bfa64d2cfeaf19e80af8c70f526730fd7016b0/lc_registry-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c8a0dec8ca80e448416aed867c9edd0ed83f25168efe3bbab7d0a50e5dd6760",
        "md5": "ca04a80ee4ea3be2ee1dbe6ed904e82a",
        "sha256": "27e62956b8e02a7458a52f5bd627b7d143971ea8ea1d2aafa356d741f08a7cfe"
      },
      "downloads": -1,
      "filename": "lc_registry-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ca04a80ee4ea3be2ee1dbe6ed904e82a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4726,
      "upload_time": "2020-06-02T21:48:36",
      "upload_time_iso_8601": "2020-06-02T21:48:36.843722Z",
      "url": "https://files.pythonhosted.org/packages/4c/8a/0dec8ca80e448416aed867c9edd0ed83f25168efe3bbab7d0a50e5dd6760/lc_registry-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}