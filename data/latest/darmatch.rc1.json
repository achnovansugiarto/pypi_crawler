{
  "info": {
    "author": "wangzejun",
    "author_email": "wangzejunscut@126.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "darmatch\n========\nhttps://github.com/zejunwang1/darmatch\n\ndarmatch\n是一个非常高效的字符串匹配工具，支持正向/反向最大匹配分词和多模式字符串精确匹配：\n\n-  仅包含头文件 (header-only)\n\n-  基于双数组字典树 (double-array trie) 的模式匹配\n\nC++\n---\n\n使用示例可以参考 tests 文件夹中的 test.cpp：\n\n.. code:: cpp\n\n   #include <iostream>\n   #include <darmatch.h>\n\n   int main(int argc, char** argv) {\n     std::vector<std::string> args(argv, argv + argc);\n     std::string dict_path, user_dict_path;\n     for (int i = 1; i < args.size(); i += 2) {\n       if (args[i] == \"--dict_path\") {\n         dict_path = std::string(args.at(i + 1));\n       } else if (args[i] == \"--user_dict_path\") {\n         user_dict_path = std::string(args.at(i + 1));\n       } else {\n         std::cout << \"Unknown argument: \" << args[i] << std::endl;\n         std::cout << \"Supported argument: --dict_path --user_dict_path\" << std::endl;\n         exit(EXIT_FAILURE);\n       }\n     }\n\n     /*\n       initialization methods:\n       darmatch::DarMatch da;\n       darmatch::DarMatch da(dict_path, user_dict_path = \"\");\n     */\n     darmatch::DarMatch da(dict_path, user_dict_path);\n\n     std::string text = \"俄罗斯联邦总统普京决定在顿巴斯地区开展特别军事行动。\";\n\n     /*\n       maximum forward matching:\n       std::vector<std::pair<size_t, std::string>> fwords = da.seg(text);\n       ----------------------------------------------\n       std::vector<std::pair<size_t, std::string>> fwords;\n       da.seg(text, fwords);\n     */\n     std::vector<std::pair<size_t, std::string>> fwords = da.seg(text);\n     std::cout << \"The Chinese word segmentation based on Maximum Forward Matching: \" << std::endl;\n     for (size_t i = 0; i < fwords.size(); i++) {\n       std::cout << fwords[i].second << \" \";\n     }\n     std::cout << std::endl;\n\n     /*\n       maximum backward matching:\n       std::vector<std::pair<size_t, std::string>> bwords = da.seg(text, false);\n       ------------------------------------------------------\n       std::vector<std::pair<size_t, std::string>> bwords;\n       da.seg(text, bwords, false);\n     */\n     std::vector<std::pair<size_t, std::string>> bwords = da.seg(text, false);\n     std::cout << \"The Chinese word segmentation based on Maximum Backward Matching: \" << std::endl;\n     for (size_t i = 0; i < bwords.size(); i++) {\n       std::cout << bwords[i].second << \" \";\n     }\n     std::cout << std::endl;\n\n     /*\n       update the double-array trie by insert:\n       da.insert(const std::string&);\n       da.insert(const std::vector<std::string>&);\n     */\n     da.insert(\"俄罗斯联邦总统\");\n\n     // multi-pattern string matching\n     std::vector<std::pair<size_t, std::string>> result = da.parse(text);\n     std::cout << \"The result of multi-pattern string matching: \" << std::endl;\n     for (size_t i = 0; i < result.size(); i++) {\n       std::cout << result[i].first << \"\\t\" << result[i].second << std::endl; \n     }\n     return 0;\n   }\n\n通过 cmake 进行编译：\n\n.. code:: shell\n\n   git clone https://github.com/zejunwang1/darmatch\n   cd darmatch\n   mkdir build\n   cmake ..\n   # cmake -DUSE_PREFIX_TRIE=ON ..\n   make\n\n执行上述命令后，会在 darmatch/build 文件夹中生成可执行文件 test。\n\n.. code:: shell\n\n   ./test --dict_path ../tests/dict.txt\n\n运行后结果如下：\n\n::\n\n   The Chinese word segmentation based on Maximum Forward Matching: \n   俄罗斯联邦 总统 普京 决定 在 顿巴斯地区 开展 特别 军事行动 。 \n   The Chinese word segmentation based on Maximum Backward Matching: \n   俄罗斯 联邦总统 普京 决定 在 顿巴斯地区 开展 特别 军事行动 。 \n   The result of multi-pattern string matching: \n   0   俄罗斯联邦\n   0   俄罗斯联邦总统\n   9   联邦总统\n   21  普京\n   27  决定\n   36  顿巴斯地区\n   51  开展\n   63  军事行动\n\nPython\n------\n\nRequirements\n~~~~~~~~~~~~\n\n-  Python version >= 3.6\n\n-  pybind11 >= 2.2\n\n-  setuptools >= 0.7.0\n\n-  typing\n\nInstallation\n~~~~~~~~~~~~\n\n通过 pip 命令直接安装：\n\n.. code:: shell\n\n   pip install darmatch\n\n或者从 github 仓库中获取最新版本安装：\n\n.. code:: shell\n\n   git clone https://github.com/zejunwang1/darmatch\n   cd darmatch\n   pip install .\n   # or:\n   python setup.py install\n\nDemo\n~~~~\n\n.. code:: python\n\n   from darmatch import DarMatch\n   da = DarMatch()\n   # da = DarMatch(dict_path, user_dict_path=\"\")\n   words = [\"俄罗斯联邦\", \"联邦总统\", \"普京\", \"决定\", \"顿巴斯地区\", \"开展\", \"军事行动\"]\n   da.insert(words)\n   text = \"俄罗斯联邦总统普京决定在顿巴斯地区开展特别军事行动。\"\n\n   # maximum forward matching\n   word_list = da.seg(text, forward=True, return_loc=True)\n   print(\"The Chinese word segmentation based on Maximum Forward Matching:\")\n   print(word_list)\n\n   # maximum backward matching\n   word_list = da.seg(text, forward=False, return_loc=True)\n   print(\"The Chinese word segmentation based on Maximum Backward Matching:\")\n   print(word_list)\n\n   # multi-pattern string matching\n   da.insert(\"俄罗斯联邦总统\")\n   word_list = da.parse(text, char_loc=True)\n   print(\"The result of multi-pattern string matching:\")\n   print(word_list)\n\n运行结果如下：\n\n::\n\n   The Chinese word segmentation based on Maximum Forward Matching:\n   [(0, '俄罗斯联邦'), (5, '总统'), (7, '普京'), (9, '决定'), (11, '在'), (12, '顿巴斯地区'), (17, '开展'), (19, '特别'), (21, '军事行动'), (25, '。')]\n   The Chinese word segmentation based on Maximum Backward Matching:\n   [(0, '俄罗斯'), (3, '联邦总统'), (7, '普京'), (9, '决定'), (11, '在'), (12, '顿巴斯地区'), (17, '开展'), (19, '特别'), (21, '军事行动'), (25, '。')]\n   The result of multi-pattern string matching:\n   [(0, '俄罗斯联邦'), (0, '俄罗斯联邦总统'), (3, '联邦总统'), (7, '普京'), (9, '决定'), (12, '顿巴斯地区'), (17, '开展'), (21, '军事行动')]\n\nSpeed\n~~~~~\n\n和基于 Aho-Corasick 的字符串匹配正则表达式工具 esmre 进行处理速度对比。\n\n可以使用 pip 命令安装 esmre：\n\n.. code:: shell\n\n   pip install esmre\n\n在 tests 文件夹中包含字符串匹配需要用到的关键词词典文件\nstring_match_dict.txt，共计有 348982\n个关键词。待进行匹配的文本字符串文件 check_text.txt，共计有 273864\n个字符。\n\n.. code:: shell\n\n   python test_speed.py\n\n运行后结果如下：\n\n::\n\n   the number of matching results by esm:  343623\n   esm time usage: 0.4515085220336914s\n   ----------------------------------------------------\n   the number of matching results by darmatch:  343623\n   darmatch time usage: 0.1248319149017334s121s\n\n可以看出，darmatch 比 esm 快 3~4 倍左右。\n\nContact\n-------\n\n邮箱： wangzejunscut@126.com\n\n微信：autonlp\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zejunwang1/darmatch",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "darmatch",
    "package_url": "https://pypi.org/project/darmatch/",
    "platform": null,
    "project_url": "https://pypi.org/project/darmatch/",
    "project_urls": {
      "Homepage": "https://github.com/zejunwang1/darmatch"
    },
    "release_url": "https://pypi.org/project/darmatch/0.2.0/",
    "requires_dist": [
      "pybind11 (>=2.2)",
      "setuptools (>=0.7.0)",
      "typing"
    ],
    "requires_python": "",
    "summary": "darmatch Python bindings",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13213826,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b75eb20a6f458316aaa81bd7ddf8762d23adb7bdac80e35332e808a92f3572a",
          "md5": "ee79ed0a281393883f7879bf1ee6c433",
          "sha256": "034ee9c9eb07ae8cfe36bd7b63cebd5a926d13fb1752d62500e30dfb851dcd1a"
        },
        "downloads": -1,
        "filename": "darmatch-0.2.0-cp37-cp37m-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ee79ed0a281393883f7879bf1ee6c433",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 790699,
        "upload_time": "2022-03-18T07:58:53",
        "upload_time_iso_8601": "2022-03-18T07:58:53.729157Z",
        "url": "https://files.pythonhosted.org/packages/1b/75/eb20a6f458316aaa81bd7ddf8762d23adb7bdac80e35332e808a92f3572a/darmatch-0.2.0-cp37-cp37m-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3a50b56cf25f8996ae512ffdf9943e2624c52a5fa0a73d6f4e35854480db426",
          "md5": "74c39135a20ad6597af9a882b50f32d4",
          "sha256": "b5f29f28602bde14c6a6b9fbe7f894297cf474051189ff8af97d9da34acb6c78"
        },
        "downloads": -1,
        "filename": "darmatch-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "74c39135a20ad6597af9a882b50f32d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6864,
        "upload_time": "2022-03-18T07:58:56",
        "upload_time_iso_8601": "2022-03-18T07:58:56.292523Z",
        "url": "https://files.pythonhosted.org/packages/b3/a5/0b56cf25f8996ae512ffdf9943e2624c52a5fa0a73d6f4e35854480db426/darmatch-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b75eb20a6f458316aaa81bd7ddf8762d23adb7bdac80e35332e808a92f3572a",
        "md5": "ee79ed0a281393883f7879bf1ee6c433",
        "sha256": "034ee9c9eb07ae8cfe36bd7b63cebd5a926d13fb1752d62500e30dfb851dcd1a"
      },
      "downloads": -1,
      "filename": "darmatch-0.2.0-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ee79ed0a281393883f7879bf1ee6c433",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 790699,
      "upload_time": "2022-03-18T07:58:53",
      "upload_time_iso_8601": "2022-03-18T07:58:53.729157Z",
      "url": "https://files.pythonhosted.org/packages/1b/75/eb20a6f458316aaa81bd7ddf8762d23adb7bdac80e35332e808a92f3572a/darmatch-0.2.0-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3a50b56cf25f8996ae512ffdf9943e2624c52a5fa0a73d6f4e35854480db426",
        "md5": "74c39135a20ad6597af9a882b50f32d4",
        "sha256": "b5f29f28602bde14c6a6b9fbe7f894297cf474051189ff8af97d9da34acb6c78"
      },
      "downloads": -1,
      "filename": "darmatch-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "74c39135a20ad6597af9a882b50f32d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6864,
      "upload_time": "2022-03-18T07:58:56",
      "upload_time_iso_8601": "2022-03-18T07:58:56.292523Z",
      "url": "https://files.pythonhosted.org/packages/b3/a5/0b56cf25f8996ae512ffdf9943e2624c52a5fa0a73d6f4e35854480db426/darmatch-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}