{
  "info": {
    "author": "toxicrecker MODDIFIED BY AMIRDADFAR9192",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DiscordUtils\nA very useful library made to be used in with [discord.py](https://pypi.org/project/discord.py/)\n\n*THIS PROJECT IS A MODDIFIED VERSION OF https://github.com/toxicrecker/DiscordUtils APPARENTLY THE OWNER ABANDONED THE PROJECT SO IM FIXING THE CODE NOW AND PUBLISHING THIS TO PYPI FOR OTHERS TO USE*\n\n# Installation\nFor access to Pagination and InviteTracker use:\n```\npip install DiscordUtilsMod\n```\n\nor, instead use the following for access to Music functions aswell\n```\npip install DiscordUtilsMod[voice]\n```\nRequires discord.py[voice] so make sure you have all dependencies of it installed.\n\n# Example code\n\n### DiscordUtils.Pagination.AutoEmbedPaginator\n```python\n@bot.command()\nasync def paginate(ctx):\n    embed1 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 1\")\n    embed2 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 2\")\n    embed3 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 3\")\n    paginator = DiscordUtils.Pagination.AutoEmbedPaginator(ctx)\n    embeds = [embed1, embed2, embed3]\n    await paginator.run(embeds)\n```\n\n### DiscordUtils.Pagination.CustomEmbedPaginator\n```python\n@bot.command()\nasync def paginate(ctx):\n    embed1 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 1\")\n    embed2 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 2\")\n    embed3 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 3\")\n    paginator = DiscordUtils.Pagination.CustomEmbedPaginator(ctx)\n    paginator.add_reaction('⏮️', \"first\")\n    paginator.add_reaction('⏪', \"back\")\n    paginator.add_reaction('🔐', \"lock\")\n    paginator.add_reaction('⏩', \"next\")\n    paginator.add_reaction('⏭️', \"last\")\n    embeds = [embed1, embed2, embed3]\n    await paginator.run(embeds)\n```\n\n### DiscordUtils.InviteTracker\n```python\nimport discord\nfrom discord.ext import commands\nimport DiscordUtils\n\nintents = discord.intents.default()\nintents.members = True\nbot = commands.AutoShardedBot(command_prefix=\">\", intents=intents)\ntracker = DiscordUtils.InviteTracker(bot)\n\n@bot.event\nasync def on_member_join(member):\n    inviter = await tracker.fetch_inviter(member) # inviter is the member who invited\n```\n\n### DiscordUtils.Music\n```python\nimport discord\nfrom discord.ext import commands\nimport DiscordUtils\n\nbot = commands.AutoShardedBot(command_prefix=\">\")\nmusic = DiscordUtils.Music()\n\n@bot.command()\nasync def join(ctx):\n    await ctx.author.voice.channel.connect() #Joins author's voice channel\n    \n@bot.command()\nasync def leave(ctx):\n    await ctx.voice_client.disconnect()\n    \n@bot.command()\nasync def play(ctx, *, url):\n    player = music.get_player(guild_id=ctx.guild.id)\n    if not player:\n        player = music.create_player(ctx, ffmpeg_error_betterfix=True)\n    if not ctx.voice_client.is_playing():\n        await player.queue(url, search=True)\n        song = await player.play()\n        await ctx.send(f\"Playing {song.name}\")\n    else:\n        song = await player.queue(url, search=True)\n        await ctx.send(f\"Queued {song.name}\")\n        \n@bot.command()\nasync def pause(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = await player.pause()\n    await ctx.send(f\"Paused {song.name}\")\n    \n@bot.command()\nasync def resume(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = await player.resume()\n    await ctx.send(f\"Resumed {song.name}\")\n    \n@bot.command()\nasync def stop(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    await player.stop()\n    await ctx.send(\"Stopped\")\n    \n@bot.command()\nasync def loop(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = await player.toggle_song_loop()\n    if song.is_looping:\n        await ctx.send(f\"Enabled loop for {song.name}\")\n    else:\n        await ctx.send(f\"Disabled loop for {song.name}\")\n    \n@bot.command()\nasync def queue(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    await ctx.send(f\"{', '.join([song.name for song in player.current_queue()])}\")\n    \n@bot.command()\nasync def np(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = player.now_playing()\n    await ctx.send(song.name)\n    \n@bot.command()\nasync def skip(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    data = await player.skip(force=True)\n    if len(data) == 2:\n        await ctx.send(f\"Skipped from {data[0].name} to {data[1].name}\")\n    else:\n        await ctx.send(f\"Skipped {data[0].name}\")\n\n@bot.command()\nasync def volume(ctx, vol):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song, volume = await player.change_volume(float(vol) / 100) # volume should be a float between 0 to 1\n    await ctx.send(f\"Changed volume for {song.name} to {volume*100}%\")\n    \n@bot.command()\nasync def remove(ctx, index):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = await player.remove_from_queue(int(index))\n    await ctx.send(f\"Removed {song.name} from queue\")\n```\n\nFor further information please read the docs\n\n# Links\n**[Documentation](https://docs.discordutils.gq)**\n\n**[Github](https://github.discordutils.gq)**\n\n# Support\n**__Please make sure that you are on the latest version of [DiscordUtils](https://pypi.org/project/DiscordUtils) and [youtube_dl](https://pypi.org/project/youtube_dl) before contacting for support__**\n\nDM/PM `toxic_recker#2795` on Discord for support\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/amirdadfar9192/DiscordUtils",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DiscordUtilsMod",
    "package_url": "https://pypi.org/project/DiscordUtilsMod/",
    "platform": "",
    "project_url": "https://pypi.org/project/DiscordUtilsMod/",
    "project_urls": {
      "Homepage": "https://www.github.com/amirdadfar9192/DiscordUtils"
    },
    "release_url": "https://pypi.org/project/DiscordUtilsMod/1.1/",
    "requires_dist": null,
    "requires_python": ">= 3.6",
    "summary": "DiscordUtils is a very useful library made to be used with discord.py",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12259656,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "154076c48d02fd7da1ab048fdea2c287a3e6fae27a1a69cb016024e419e4fba4",
          "md5": "a54a7b78bb9fe33de47d1af9c9e354f4",
          "sha256": "1e3c170a50a4730a076f456a13ac2263e4a7087bc5dbd87f8fa0022950a94b89"
        },
        "downloads": -1,
        "filename": "DiscordUtilsMod-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a54a7b78bb9fe33de47d1af9c9e354f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 8487,
        "upload_time": "2021-12-09T20:21:52",
        "upload_time_iso_8601": "2021-12-09T20:21:52.543450Z",
        "url": "https://files.pythonhosted.org/packages/15/40/76c48d02fd7da1ab048fdea2c287a3e6fae27a1a69cb016024e419e4fba4/DiscordUtilsMod-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "154076c48d02fd7da1ab048fdea2c287a3e6fae27a1a69cb016024e419e4fba4",
        "md5": "a54a7b78bb9fe33de47d1af9c9e354f4",
        "sha256": "1e3c170a50a4730a076f456a13ac2263e4a7087bc5dbd87f8fa0022950a94b89"
      },
      "downloads": -1,
      "filename": "DiscordUtilsMod-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a54a7b78bb9fe33de47d1af9c9e354f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.6",
      "size": 8487,
      "upload_time": "2021-12-09T20:21:52",
      "upload_time_iso_8601": "2021-12-09T20:21:52.543450Z",
      "url": "https://files.pythonhosted.org/packages/15/40/76c48d02fd7da1ab048fdea2c287a3e6fae27a1a69cb016024e419e4fba4/DiscordUtilsMod-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}