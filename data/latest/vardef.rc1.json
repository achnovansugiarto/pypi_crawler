{
  "info": {
    "author": "Rodrigo Martins de Oliveira",
    "author_email": "oliveira.rodrigo.m@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: IronPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: MicroPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: Python :: Implementation :: Stackless",
      "Typing :: Typed"
    ],
    "description": ".. _vardef:\n.. role:: python(code)\n   :language: python\n\nvardef: contained and organized variable definition\n===================================================\n\n`Usage Examples üö© <https://vardef.readthedocs.io/en/latest/usage/index.html>`_ | `Developer Reference üë©‚Äçüíª <https://vardef.readthedocs.io/en/latest/reference/index.html>`_ | `Authors üë´ <https://vardef.readthedocs.io/en/latest/authors.html>`_\n\n\n\n**vardef** is a simple idea for declaring variables in multiple statements in a contained\nand organized fashion.\n\n*A simple Python decorator built with Heart and designed for Humans*\n\n.. list-table::\n    :header-rows: 0\n\n    * - .. code:: python\n\n            from vardef import vardef\n\n\n            vars_defined = 0\n\n            @vardef\n            def somevar() -> int:\n                global vars_defined\n                vars_defined += 1\n                return 42\n\n            @vardef\n            def othervar() -> int:\n                global vars_defined\n                vars_defined += 1\n                return 73\n\n            print(vars_defined)\n            # 2\n\n            print(somevar)\n            # 42\n\n            print(othervar)\n            # 73\n\n            print(type(somevar))\n            # <class 'int'>\n\n            print(type(othervar))\n            # <class 'int'>\n\n        .. code:: python\n\n            from unittest.mock import Mock\n            from vardef import vardef\n\n            from somewhere import User\n\n\n            @vardef\n            def user_with_read_role() -> Mock:\n                user_mock = Mock(User)\n                user_mock.roles = [\"READ\"]\n                return user_mock\n\n            print(user_with_read_role.roles)\n            # ['READ']\n\n            print(type(user_with_read_role))\n            # <class 'unittest.mock.Mock'>\n\n      - .. code:: python\n\n            import pandas as pd\n\n            from butterfree.extract import Source\n            from butterfree.extract.readers import TableReader\n            from butterfree.clients import SparkClient\n            from vardef import vardef\n\n\n            spark_client = SparkClient()\n\n            @vardef\n            def df() -> pd.DataFrame:\n                source = Source(\n                    readers=[TableReader(\n                        id=\"colors\",\n                        database=\"datalake_colors\",\n                        table=\"colors\",\n                    )],\n                    query=\"\"\"\n                        SELECT * FROM colors\n                    \"\"\",\n                )\n                return source.construct(spark_client)\n\n            df.createOrReplaceTempView(\"colors\")\n            ...\n\n        .. code:: python\n\n            from vardef import vardef\n\n\n            @vardef\n            def buggy() -> int:\n                return 4 / 0\n\n            # Traceback (most recent call last):\n            #   File \"./buggy.py\", line 5, in <module>\n            #     def buggy() -> int:\n            #   File \"./vardef/__init__.py\", line 7, in vardef\n            #     return define_var()\n            #   File \"./buggy.py\", line 6, in buggy\n            #     return 4 / 0\n            # ZeroDivisionError: division by zero\n\n\nWhy to use vardef\n-----------------\n\n* **Organization**: using a *vardef* function allows all necessary code to define and\n  initialize a variable to be logically separated from the outer scope. This makes it\n  clear what code is relevant to the rest of the scope and what code is only there to\n  assist with initialization. Also, in this way, auxiliary code is avoided being exposed\n  to be imported or messed up by external agents.\n\n* **Conciseness**: a *vardef* function is a syntax sugar to avoid the need to declare\n  a function which will only be called once to define a variable. With the decorator\n  your code gets concise and also avoids exposing the initializer function.\n\nFor further information on how to use the decorator check out our `docs\n<https://vardef.readthedocs.io/en/latest/>`_!\n\nChangelog\n=========\n\n0.1.0 (2020-12-03)\n------------------\n\n* First beta release\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/allrod5/vardef",
    "keywords": "vardef def variable delegate delegates value definition",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vardef",
    "package_url": "https://pypi.org/project/vardef/",
    "platform": "",
    "project_url": "https://pypi.org/project/vardef/",
    "project_urls": {
      "Homepage": "https://github.com/allrod5/vardef"
    },
    "release_url": "https://pypi.org/project/vardef/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python decorator to turn a function into a variable definition",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8823483,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e08259e2cf6a2e26af2b6dc910c9131b6682c02f30e376251752d8fdfe6d4b2",
          "md5": "c91ed4061e1618eda7bbc0a521c6ee4d",
          "sha256": "73896b9184aeac688ced5454c53e7f87bb9438350c840dafb3a9d0e14bf6d822"
        },
        "downloads": -1,
        "filename": "vardef-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c91ed4061e1618eda7bbc0a521c6ee4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7759,
        "upload_time": "2020-12-04T18:59:47",
        "upload_time_iso_8601": "2020-12-04T18:59:47.092114Z",
        "url": "https://files.pythonhosted.org/packages/0e/08/259e2cf6a2e26af2b6dc910c9131b6682c02f30e376251752d8fdfe6d4b2/vardef-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5650159bf393795f2a86c57e898cb0e0edaae748e87373d9c48e6e8d9c2355e",
          "md5": "b92b30164231b341301b079d762a0d61",
          "sha256": "540ed9bb0c1679b11b758628e7810329ab596c65b08035e8ac9a54f94a4d2fd3"
        },
        "downloads": -1,
        "filename": "vardef-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b92b30164231b341301b079d762a0d61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6524,
        "upload_time": "2020-12-04T18:59:48",
        "upload_time_iso_8601": "2020-12-04T18:59:48.513259Z",
        "url": "https://files.pythonhosted.org/packages/d5/65/0159bf393795f2a86c57e898cb0e0edaae748e87373d9c48e6e8d9c2355e/vardef-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e08259e2cf6a2e26af2b6dc910c9131b6682c02f30e376251752d8fdfe6d4b2",
        "md5": "c91ed4061e1618eda7bbc0a521c6ee4d",
        "sha256": "73896b9184aeac688ced5454c53e7f87bb9438350c840dafb3a9d0e14bf6d822"
      },
      "downloads": -1,
      "filename": "vardef-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c91ed4061e1618eda7bbc0a521c6ee4d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7759,
      "upload_time": "2020-12-04T18:59:47",
      "upload_time_iso_8601": "2020-12-04T18:59:47.092114Z",
      "url": "https://files.pythonhosted.org/packages/0e/08/259e2cf6a2e26af2b6dc910c9131b6682c02f30e376251752d8fdfe6d4b2/vardef-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5650159bf393795f2a86c57e898cb0e0edaae748e87373d9c48e6e8d9c2355e",
        "md5": "b92b30164231b341301b079d762a0d61",
        "sha256": "540ed9bb0c1679b11b758628e7810329ab596c65b08035e8ac9a54f94a4d2fd3"
      },
      "downloads": -1,
      "filename": "vardef-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b92b30164231b341301b079d762a0d61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6524,
      "upload_time": "2020-12-04T18:59:48",
      "upload_time_iso_8601": "2020-12-04T18:59:48.513259Z",
      "url": "https://files.pythonhosted.org/packages/d5/65/0159bf393795f2a86c57e898cb0e0edaae748e87373d9c48e6e8d9c2355e/vardef-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}