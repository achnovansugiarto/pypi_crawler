{
  "info": {
    "author": "Olav Lamberts and Lennart Bader",
    "author_email": "lennart.bader@fkie.fraunhofer.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Wattson Abstract RTU\nThis module provides a standardized interface for software-based RTU \nimplementations for interacting with different type of Power Grid Backends. \nThese backends either can be physical components, local software implementations,\nor distributed Power Simulations for representing complex grids.\n\n**This module does not provide any simulative functionalities but serves the \nsole purpose of enabling exchangable RTU implementations and Power Grid Backends.**\n\n# RTU Abstraction Layer\n\nThis document specifies the functionality provided by the RTU abstraction layer, implemented as RTUBackend interface.\nThe main communication with datapoints attached to the RTU should be handled through this interface.\nSince both the simulation and RTU model will change how a RTU can and should be interacted with, some functions need to be implemented\nby the inheriting class.\nIn the current design, it is expected that a class inheriting from the RTU backend implements *all* functionality specific\nto a combination of simulation and RTU model.\nWe expect a specific RTU model to define a new RTU backend class that inherits from our interface and sets it as attribute of the main RTU object.\n\n## Datapoints:\nA RTU is initialised with information about all datapoints attached to it.\nOnly changing the default cause of transmission for a datapoint is possible at a later point.\nThe format of datapoints handed over may vary, we require:\n- The datapoint is castable to a tuple\n- The first four entires accessible as [0:5] represent [coa, ioa, type-ID, cot, related-ioa] (Information Object Adddress, Common Address, \n    default ASDU-Type-ID, default Cause of Transmission, ioa of related datapoint then identified as (coa, related-ioa))\n- coa, ioa, related-ioa types: `int` or `str`; their values are stored, retrieved, and compared against in a type-sensitive fashion!\n- type-ID, cot type: `int`; cot in `[1,47]`; type-ID roughly in `[1,127]` (some values of the interval are undefined)\n- the default cot will be chosen when a query is send and no new cot is given\n- If `cot == 1`, the interface assumes periodic updates are send to the RTU as mentioned in IEC-104\n- the [coa, ioa, type-ID, cot, related-ioa] combination is referred to **primitive datapoint**,\n    its entire model-specific combination as **complex datapoint**\n- any usage of the cot in the following is assumed to conform with IEC-104\n\nIf additional information, like Panda-DataFrame references, are necessary in your model, hand them\n    over in all entries after the fifth.\n\n\n## Model-Specific Adoptions:\nRetrieving values from/ writing values to datapoints and any further communication is model-dependent\nand requires two functions to be implemented.\nThe types `COA` and `IOA` are set to `Union[int, str]`.\n\n1. `_build_IO_query(self, coa: COA, ioa: IOA, cot: int = 0, value=None)`\n    - construct an IO query in your model-specific format.\n    - behaviour for coa-ioa combinations not referring to a datapoint attached the RTU is undefined\n    - if `cot==0`, chooses the cot the backend was initialised with\n    - if `value is None`, builds a get-query, otherwise a set-query\n        - Resulting limitation: cannot set an IO to `None` \n2. `_send_query(self, query: Any)`\n    - sends the IO query based on your RTU-grid-simulation-model\n    - return `None` if some error occured. `non-None`  return may either signal correctly sent set-query or return value from get-query.\n    - The respective return value is forwarded when retrieving/ setting IOs.\n\n\nNeither of these functions is expected to be called directly by an operator.\n\n\n## Pre-Defined Functionality:\n### Functions\nThe RTU backend pre-defines these functions:\n\n\n1. `__init__(self, coa: COA, datapoints: Iterable[Tuple[COA, IOA, int, int, ...]], autostart=False,\n             logger=None, includes_relationship=False)`\n    - sets up datapoint storage\n    - the datapoints need to be deterministcally castable to tuples in the datapoints section\n    - coordination with other devices etc. can be started with `autostart=True` that calls function 2\n    - inserts an empty-relationship after index [3] if `includes_relationship=False`\n        - if `includes_relationship=True`, expects the value at [4] to be of type IOA and the\n            same primitive datatype used for the ioas at the 2nd tuple-index\n    - checks all relationships on correctness (see function 3)\n    - raises `RuntimeError` if an invalid relationship is stored (see function 3)\n    - ends by executing function 2 if `austostart=True`\n\n2. `wait_until_ready(self, timeout: Union[float, None]=None) -> None`\n    - terminates as soon as all model-dependent coordinations \\& start functions are completed\n    - raises a `TimeoutError` if your model-dependent setups have not finished in\n        the given timeout\n    - `timeout` in `[s]` for numbers, never forces stop if `timeout is None` \n    - may requires overwriting to conform with your RTU + simulator model\n\n3.  `sanitise_check_relationships(self) -> bool`:\n    - checks if all datapoints storing a relationship link to an attached datapoint\n        with the same coa and stored relation-ship.\n    - raises a `RuntimeError` if an invalid relationship is found\n\n4.  `_invalid_type_id(self, coa: COA, ioa: IOA, type_id: int) -> Union[bool, None, int]`\n     - checks if the type_id-argument and the datapoint's default type_id are command-query type_ids (in [45,69])\n     - if True, returns `defaulttype_id == type_id` \n     - reasoning: restrict allowed command-queries to those specified by the datapoint\n     - returns `None` for unattached datapoint\n     - returns `0` if either the handed over type_id or the type_id stored for the datapoint\n        are not command-query-type_ids \n\n5. `get_IO(self, coa: COA, ioa: IOA, cot: int=0, type_id: int=0) -> Any`\n    - retrieve the IO based on the coa-ioa combination\n    - returns `None` if the RTU has no such datapoint with a resp. IO attached to it or\n        a type_id != 0 is given and which is invalid for this datapoint\n    - if `cot==0`, chooses default cot stored\n\n6. `has_IO(self, coa: COA, ioa: IOA) -> bool`\n    - check if an IO with the given coa-ioa combination is attached to the RTU\n\n7. `set_IO(self, coa: COA, ioa: IOA, value, cot: int=0, type_id: int=0) -> Union[bool, None]`\n    - sets an IO on a datapoint\n    - if `cot==0` build query with default cot\n    - returns the model-dependent query response for attached datapoints and\n        `None` if the RTU does not know such an IO or type_id is given which is not valid for this datapoint\n         - resulting limitation: cannot differentiate between the return of a `None` query response and a \n            non-attached IO\n\n8. `get_related_IO(self, coa: COA, ioa: IOA, cot: int = 0) -> Any`\n    - performs`get_IO` but for the datapoint related to the (coa, ioa)-identified datapoint\n    - also returns `None` if no relationship is stored\n\n9. `set_related_IO(self, coa: COA, ioa: IOA, value, cot: int = 0) -> Union[bool, None]`\n    - performs `set_IO` but for the datapoint related to the (coa, ioa)-identified datapoint\n    - also returns `None` if no relationship is stored\n\n10. `get_periodic_ids(self) -> Set[Tuple[COA, IOA]]`\n    - returns all coa-ioa combinations the RTU expects periodic messages from (initialised with `cot==1`)\n\n11. `get_periodic_data_points(self) -> Set[Tuple[COA, IOA, int, int]]`\n    - returns all primitive datapoints the RTU expects periodic messages from\n\n12.  `get_periodic_ioas(self, coa: COA = -1) -> Set[IOA]`\n    - returns all IOAs of periodicly updating datapoints with the given coa\n    - if `coa==-1`, checks for all datapoints with the backend's coa\n\n13. `get_data_point(self, coa: COA, ioa: IOA, with_value=False) -> Union[None, Tuple, Tuple[Tuple, Any]]`\n    - retrieves the primitive datapoint corresponding to the coa-ioa combination\n    - returns `None` if no such datapoint is known\n    - adds the resp. IO if `with_value=True` \n\n14. `get_related_data_point(self, coa: COA, ioa: IOA, with_value=False) -> Union[None, Tuple, Tuple[Tuple, Any]]`\n    - performs `get_data_point` but on the related datapoint instead\n    - also returns `None` if no relationship is stored\n\n15. `change_cause_of_transmission(self, coa: COA, ioa: IOA, new_cot: int) -> None`\n    -  change the default-cot for a datapoint attached\n    - if `new_cot== 1 or default_cot==1` expects that a model-dependent command to the datapoint is send\n        to update the periodic-update status\n    - does not change if `cot not in [1,47]`\n\n16. `get_ioas(self, coa: COA = -1) -> Set[IOA]`\n    - retrieve all ioas from datapoints with the given coa attached to the RTU\n    - if `coa==-1`, checks for the backend's coa\n\n17. `get_data_points(self) -> Set(Tuple[COA, IOA, int, int])`\n    - retrieves all primitive data points attached to the RTU\n\n18. `_get_complex_data_point(self, coa: COA, ioa: IOA, with_value=False) -> Union[None, Tuple, Tuple[Tuple, Any]]`\n    - retrieves the respective complex data point \n    - also returns the IO if `with_value=True`\n\n19. `_get_complex_related_data_point(self, coa: COA, ioa: IOA, with_value=False) -> Union[None, Tuple, Tuple[Tuple, Any]]`\n    - performs `_get_complex_data_point` on the related datapoint\n    - also returns `None` if no relationship is stored\n\nThe initialisation function should be overwritten if more objects/ data for the communication between RTU and simulation model needs to be provided\nto send or build queries.\nFor instance, Julian Filter's pandapower model also simulates the communication with ZMQ.\nCorresponding wrappers and other metadata necessary to partially access, initialise and control the \n    client would thus be necessary to be added by the inheriting backend.\nThis may require overwriting `wait_until_ready(...)` as well.\n\n### Attributes\nThe following attributes are defined upon initialisaton of the interface\n1. `data_store`: `Dict[COA, Dict[IOA, Tuple[COA, IOA, int, int, IOA, ...]]]`\n    - stores all complex datapoints for building the queries etc.\n    - this format to ensure easy traversal and compability with all known models\n2. `datapoints`: `Set[Tuple[COA, IOA, int, int, IOA]]`\n    - stores all primitive datapoints\n3. `coa`: `COA`\n    - coa of the RTU\n4. `started`: `threading.Event`\n    - marks start-up \\& initialisation of all model-dependent clients etc.\n5. `logger`: `Union[sink_logger, logging.Logger]`\n    - logger to use if wanted\n    - if no logger is handed over, a sink_logger that discards all messages is set-up,\n        this cleans up logging behaviour as no checkup if a logger exists is necessary\n    - the `sink_logger` only provides the main logging functions:\n        - `.critical(msg), .error(msg), .warning(msg), .info(msg), .debug(msg)`\n6. `__inserted_relationship`: `Bool`\n    - marks whether insertion of empty relationships were necessary\n    - mostly aimed at debugging\n\n### Properties (read-only)\n1. `logging`: If a non-sink logger is attached\n\n### Logging\nLogging is assumed to be done through the `logging` package.\nThe interface assumes the logger is already set up in regards to file handlers, etc. .\nThe logger is assumed to be separate for each RTU or as it does not always repeat the backend's\n    COA.\nA sink is connected that accepts all main logging messages stated above if no real logger is\n    handed over.\nThe interface logs the following data:\n1. `CRITICAL`\n    - the backend could not start clients etc. in `wait_until_ready` in the time-threshold given\n2. `WARNING`\n    - calling `set_IO` or `get_IO` on an unattached datapoint \n    - executing `get_related_IO` or `set_related_IO` on a datapoint without a relationship\n    - sending the query for `set_IO`, `get_IO`, or or its related-datapoint versions on an attached datapoint failed for some other \n        reason\n    - changing the cot for an unattached datapoint or trying to set it to an invalid value\n    - trying to set/get IOs with an invalid type_id for the given datapoint or if the corresponding\n        IO does not lie in the IEC104-range for this type_id\n3. `INFO`\n    - whenever the `self.started` status changes\n    - time [s] it took to setup a client (if applicable)\n    - whenever the periodicity of a datapoint was changed\n4. `DEBUG`\n    - `str(query)` send and its result\n\n\n\n## Recommended Implementations:\nA model often needs to be constructable from exported data, e.g., pickle, yaml, or regular xml files.\nThis is not strictly necessary, but encouraged and should be implemented through a static `from_data(...)` function.\n\n1. `stop(self) -> bool`\n    - stops all model-specific communicators (zmq-clients, etc.)\n    - returns success of this operation (should only fail in special cases or raise \n         exceptions instead)\n    - clears the started Event\n\n2. `__del__(self)`\n    - stops all model-specific communicators (zmq-clients, etc.) safely\n\n### Testing\nWe encourage tests written with `pytest`.\nFor several only indirectly or model-independent functions already fully defined by the backend,\ntest-functions can be imported from `RTU/tests/RTUs.py`, denoted by a `standard` prefix.\nThey only require the RTU or Backend + the datapoints initialised with as input.\nExample tests for a constant and pandapower-backend are defined there as well.\n\n\n### A note about pandapower \nTo our knowledge, many implementations use pandapower, panda DataFrames, and PPQueries in one way or another.\nThere exist some test examples and corresponding Backend that use the following DataFrame input format:\n- `[coa, ioa, type-ID, cot, pp_table, pp_column, pp_index, others]`\n    - this does not include relationship-ioas and requires initialising \n        the backend with `includes_relationship=False`!\n\nand the following PPQuery format as named tuple:\n- `[table, column, index, value]`\n\nIf you make your data frame fit to this format, you should be able to copy the  `_build_IO_query` implementation from the `PandapowerBackend` example.\n\n\n\n## Model-Compability:\nThe interface requires a python version `>=3.5`.\nSome examples will require a higher python version due to other dependencies. If this is the case, it is clearly marked.\n\nExamples are listed in the `RTU/Backends.py` file.\nA mini-RTU-simulation with a Backend is given in `RTU/examples/RTUs.py`.\n\n\nPlease let us know if any of the following specifications do *not* hold. \n\n- the coa, ioa, relationship-ioas are not stored as integers/ strings; the cot/type-ID is not stored as integer in your model\n\n- you believe other functionality is shared between the *vast* majority of RTU or simulation models and if implemented in this interface\n    does not get in the way of those models the functionality is not shared with\n- any other compability problem if this interface would be implemented for your RTU and simulation model\n\nOr if the following any of these three *do* hold:\n- your model requires the type-ID during IO-query construction/ sending\n- your model allows IOs with a **valid** `None` value\n    - since the send-query functions etc. return `None` for various errors\n- a datapoint identified through (coa, ioa) needs to store a relationship to a datapoint with a different\n    coa\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fkie-cad/wattson-abstract-rtu",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wattson-abstract-rtu",
    "package_url": "https://pypi.org/project/wattson-abstract-rtu/",
    "platform": "",
    "project_url": "https://pypi.org/project/wattson-abstract-rtu/",
    "project_urls": {
      "Homepage": "https://github.com/fkie-cad/wattson-abstract-rtu"
    },
    "release_url": "https://pypi.org/project/wattson-abstract-rtu/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "An abstraction layer for software-based RTU implementations.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9121928,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1eb5c3c2089faf8b43ee1fc9f39cb7153d1751db3302a44b22e639118a2a5af",
          "md5": "cab2776f79dcd6cfa078f27a4fabfa58",
          "sha256": "9481d9323d46880bd522574dffd5143e99548b65420ae408518347cdce6fd0ac"
        },
        "downloads": -1,
        "filename": "wattson_abstract_rtu-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cab2776f79dcd6cfa078f27a4fabfa58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12940,
        "upload_time": "2020-12-21T12:02:49",
        "upload_time_iso_8601": "2020-12-21T12:02:49.604654Z",
        "url": "https://files.pythonhosted.org/packages/b1/eb/5c3c2089faf8b43ee1fc9f39cb7153d1751db3302a44b22e639118a2a5af/wattson_abstract_rtu-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe9a87cf18c789cf9cd0b2f834ea30ad81b2c1c58793312ab07d884068b9f260",
          "md5": "539bda68b871a91034d0b280a1995e0c",
          "sha256": "3b396b2274ea8b8c47755c3567feab025c3a8f861661be368e20a47c424d0855"
        },
        "downloads": -1,
        "filename": "wattson-abstract-rtu-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "539bda68b871a91034d0b280a1995e0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16906,
        "upload_time": "2020-12-21T12:02:50",
        "upload_time_iso_8601": "2020-12-21T12:02:50.959644Z",
        "url": "https://files.pythonhosted.org/packages/fe/9a/87cf18c789cf9cd0b2f834ea30ad81b2c1c58793312ab07d884068b9f260/wattson-abstract-rtu-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "585a3f7dd3e0b4f7a1be9f9046e2fc9d9fe479ab319438b82728f52aec55b464",
          "md5": "f8cda89dc6649648759608a853545ed1",
          "sha256": "6785d5727ee76fe9f47e8c5cbd4a6da8ae623e801b68a2fe27a454a6715d7069"
        },
        "downloads": -1,
        "filename": "wattson_abstract_rtu-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8cda89dc6649648759608a853545ed1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12959,
        "upload_time": "2020-12-22T07:38:52",
        "upload_time_iso_8601": "2020-12-22T07:38:52.924219Z",
        "url": "https://files.pythonhosted.org/packages/58/5a/3f7dd3e0b4f7a1be9f9046e2fc9d9fe479ab319438b82728f52aec55b464/wattson_abstract_rtu-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c695c5562af5101f206c4075ed69a0816403b9ad22169fc74564e4c41d111a7d",
          "md5": "b2723b4757836cad893a1d24b52da8be",
          "sha256": "18e4e0ded798492f8c2aff75a2f9d1c14fceb7b1661b231c64fddec0ee3bf7e6"
        },
        "downloads": -1,
        "filename": "wattson-abstract-rtu-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b2723b4757836cad893a1d24b52da8be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16908,
        "upload_time": "2020-12-22T07:38:54",
        "upload_time_iso_8601": "2020-12-22T07:38:54.572283Z",
        "url": "https://files.pythonhosted.org/packages/c6/95/c5562af5101f206c4075ed69a0816403b9ad22169fc74564e4c41d111a7d/wattson-abstract-rtu-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee246f1011f301b8277030f5da8a3a9b65fae5057cb3c6d6c90c457355d4bb83",
          "md5": "80f7d240eb500e1ce0efd10c850b6cbe",
          "sha256": "e9063ab312df2fb27f1a7962ff7b4cf4f8e0ba9600eb05fd935567c9113e8614"
        },
        "downloads": -1,
        "filename": "wattson_abstract_rtu-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80f7d240eb500e1ce0efd10c850b6cbe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12961,
        "upload_time": "2020-12-22T12:45:40",
        "upload_time_iso_8601": "2020-12-22T12:45:40.827396Z",
        "url": "https://files.pythonhosted.org/packages/ee/24/6f1011f301b8277030f5da8a3a9b65fae5057cb3c6d6c90c457355d4bb83/wattson_abstract_rtu-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "303bc294e52ffd06f4163b40d84d72fc86f077186725f7dc062fddf38ff024ee",
          "md5": "f9dc0e00180e3f8523d6cdf482c77871",
          "sha256": "44a0434b55d627cd04a5458c3af71a6eeff172ed7a553db0bb971f2387b92bca"
        },
        "downloads": -1,
        "filename": "wattson-abstract-rtu-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f9dc0e00180e3f8523d6cdf482c77871",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16915,
        "upload_time": "2020-12-22T12:45:42",
        "upload_time_iso_8601": "2020-12-22T12:45:42.892178Z",
        "url": "https://files.pythonhosted.org/packages/30/3b/c294e52ffd06f4163b40d84d72fc86f077186725f7dc062fddf38ff024ee/wattson-abstract-rtu-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71a4beb27c2dce7fff2849e715fb76f241afa1a07d646ce525ed17165237e76d",
          "md5": "a987acbdad89b68d8217c2db0172e902",
          "sha256": "299e9ff8f7bf1a95c9faeee20b2a2a2eacbe9ab8aa71575879bf11223ced4d34"
        },
        "downloads": -1,
        "filename": "wattson_abstract_rtu-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a987acbdad89b68d8217c2db0172e902",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12938,
        "upload_time": "2021-01-13T08:54:47",
        "upload_time_iso_8601": "2021-01-13T08:54:47.300232Z",
        "url": "https://files.pythonhosted.org/packages/71/a4/beb27c2dce7fff2849e715fb76f241afa1a07d646ce525ed17165237e76d/wattson_abstract_rtu-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aea0b1dc190180cbf80d1d2d8574f7b96923641473bf42bcbb054cbcd3711222",
          "md5": "1177000de37ba72d88940e2ed178e5ee",
          "sha256": "5b4044511047f2527be274fd73a994b50b57ce896578919764c1a6e77bd11b42"
        },
        "downloads": -1,
        "filename": "wattson-abstract-rtu-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1177000de37ba72d88940e2ed178e5ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16907,
        "upload_time": "2021-01-13T08:54:50",
        "upload_time_iso_8601": "2021-01-13T08:54:50.156812Z",
        "url": "https://files.pythonhosted.org/packages/ae/a0/b1dc190180cbf80d1d2d8574f7b96923641473bf42bcbb054cbcd3711222/wattson-abstract-rtu-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71a4beb27c2dce7fff2849e715fb76f241afa1a07d646ce525ed17165237e76d",
        "md5": "a987acbdad89b68d8217c2db0172e902",
        "sha256": "299e9ff8f7bf1a95c9faeee20b2a2a2eacbe9ab8aa71575879bf11223ced4d34"
      },
      "downloads": -1,
      "filename": "wattson_abstract_rtu-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a987acbdad89b68d8217c2db0172e902",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12938,
      "upload_time": "2021-01-13T08:54:47",
      "upload_time_iso_8601": "2021-01-13T08:54:47.300232Z",
      "url": "https://files.pythonhosted.org/packages/71/a4/beb27c2dce7fff2849e715fb76f241afa1a07d646ce525ed17165237e76d/wattson_abstract_rtu-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aea0b1dc190180cbf80d1d2d8574f7b96923641473bf42bcbb054cbcd3711222",
        "md5": "1177000de37ba72d88940e2ed178e5ee",
        "sha256": "5b4044511047f2527be274fd73a994b50b57ce896578919764c1a6e77bd11b42"
      },
      "downloads": -1,
      "filename": "wattson-abstract-rtu-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1177000de37ba72d88940e2ed178e5ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16907,
      "upload_time": "2021-01-13T08:54:50",
      "upload_time_iso_8601": "2021-01-13T08:54:50.156812Z",
      "url": "https://files.pythonhosted.org/packages/ae/a0/b1dc190180cbf80d1d2d8574f7b96923641473bf42bcbb054cbcd3711222/wattson-abstract-rtu-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}