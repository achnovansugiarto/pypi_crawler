{
  "info": {
    "author": "Rudransh Joshi",
    "author_email": "rudranshjoshi1806@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\r\n# craiyon.py\r\n\r\nAPI Wrapper for [craiyon](https://craiyon.com) (formerly DAL-E-MINI) to generate awesome images from text tokens.\r\n\r\n## Badges\r\n\r\nProvided By: [shields.io](https://shields.io/)\r\n\r\n[![PyPI Version](https://img.shields.io/pypi/v/craiyon.py?style=for-the-badge)](https://pypi.org/project/craiyon.py/)\r\n[![PyPI Downloads](https://img.shields.io/pypi/dm/craiyon.py?color=red&style=for-the-badge)](https://pypi.org/project/craiyon.py/)\r\n[![Apache License 2.0](https://img.shields.io/pypi/l/craiyon.py?color=lime&style=for-the-badge)](https://opensource.org/licenses/)\r\n[![Connect On Discord](https://img.shields.io/discord/710909601356447805?color=yellow&style=for-the-badge)](https://discord.gg/dN66r3D)\r\n[![Code Lines](https://img.shields.io/tokei/lines/github/FireHead90544/craiyon.py?color=orange&style=for-the-badge)](https://github.com/FireHead90544/craiyon.py)\r\n[![Code Size](https://img.shields.io/github/languages/code-size/FireHead90544/craiyon.py?style=for-the-badge)](https://github.com/FireHead90544/craiyon.py)\r\n[![Pull Requests](https://img.shields.io/github/issues-pr/FireHead90544/craiyon.py?style=for-the-badge)](https://github.com/FireHead90544/craiyon.py/pulls)\r\n[![Issues](https://img.shields.io/github/issues/FireHead90544/craiyon.py?color=teal&style=for-the-badge)](https://github.com/FireHead90544/craiyon.py/issues)\r\n[![Contributors](https://img.shields.io/github/contributors/FireHead90544/craiyon.py?style=for-the-badge)](https://github.com/FireHead90544/craiyon.py/graphs/contributors)\r\n\r\n## Acknowledgements\r\n\r\n - [Issues](https://github.com/FireHead90544/craiyon.py/issues)\r\n - [Pull Requests](https://github.com/FireHead90544/craiyon.py/pulls)\r\n - [View Project On PyPI](https://pypi.org/project/craiyon.py/)\r\n\r\n  \r\n## Authors\r\n\r\n- [@Rudransh Joshi](https://www.github.com/FireHead90544)\r\n- [@mdm9300404](https://github.com/mdm9300404)\r\n  \r\n## Installation\r\n\r\nThe easiest way to install craiyon.py is using pip\r\n\r\n```shell\r\n  pip install -U craiyon.py\r\n```\r\n\r\nOr just manually clone the repository and build the wheel\r\n\r\n## Craiyon v2 vs v1\r\n\r\nThe api wrapper has separate classes revolving around each model, i.e, the Craiyon v1 and v2.\r\nA quick comparison between the two is given below:\r\n\r\n| Model | Speed | Quality | API_URL | Import Name |\r\n|:-----:|:-----:|:-------:|:-------:|:-----------:|\r\n| v2 | Faster (<1m) | Good | https://api.craiyon.com/draw | Craiyon |\r\n| v1 | Slower (~1.5m) | Average | https://backend.craiyon.com/generate | CraiyonV1 |\r\n\r\n\r\n## Usage / Examples\r\n\r\n### \r\n\r\n**Generate and save the images**\r\n\r\n```py\r\nfrom craiyon import Craiyon\r\n\r\ngenerator = Craiyon() # Instantiates the api wrapper\r\nresult = generator.generate(\"Photorealistic image of shrek eating earth\")\r\nresult.save_images() # Saves the generated images to 'current working directory/generated', you can also provide a custom path\r\n```\r\n![image](https://user-images.githubusercontent.com/55452780/181876989-38872ca2-c3d5-4891-9bd4-cf4e4b26b91e.png)\r\n\r\n**Use the images in your code without saving**\r\n\r\n```py\r\nfrom craiyon import Craiyon, craiyon_utils\r\nfrom PIL import Image # pip install pillow\r\nfrom io import BytesIO\r\nimport base64\r\n\r\ngenerator = Craiyon() # Instantiates the api wrapper\r\nresult = generator.generate(\"Professional photo of Obama flashing a flag with his last name\") # Generates 9 images by default and you cannot change that\r\nimages = craiyon_utils.encode_base64(result.images)\r\nfor i in images:\r\n    image = Image.open(BytesIO(base64.decodebytes(i)))\r\n    # To convert the .webp images to .jpg or .png, you can proceed like this\r\n    # image.convert(\"RGB\").save(\"image.jpg\", \"JPEG\") # For \".jpg\" images\r\n    # image.convert(\"RGBA\").save(\"image.png\", \"PNG\") # For \".png\" images\r\n    \r\n    # Use the PIL's Image object as per your needs\r\n```\r\n![image](https://user-images.githubusercontent.com/55452780/181877028-740bee12-432d-4019-b74e-a17f53b79987.png)\r\n\r\n**Just get the Direct Image URLs**\r\n```py\r\nfrom craiyon import Craiyon\r\n\r\ngenerator = Craiyon() # Instantiates the api wrapper\r\nresult = generator.generate(\"Photorealistic image of shrek eating earth\")\r\n\r\nprint(result.images) # Prints a list of the Direct Image URLs hosted on https://img.craiyon.com\r\n\r\n# Loops through the list and prints each image URL one by one\r\nfor url in result.images:\r\n    print(url)\r\n```\r\n\r\n## Async Usage / Examples\r\n\r\n###\r\n\r\n**Generate and save the images**\r\n\r\n```py\r\nfrom craiyon import Craiyon\r\nimport asyncio\r\n\r\n\r\nasync def main():\r\n    generator = Craiyon() # Instantiates the api wrapper\r\n    result = await generator.async_generate(\"Photorealistic image of shrek eating earth\")\r\n    await result.async_save_images() # Saves the generated images to 'current working directory/generated', you can also provide a custom path\r\n    \r\nasyncio.run(main())\r\n```\r\n\r\n\r\n\r\n**Use with a Discord bot**\r\n```py\r\nfrom craiyon import Craiyon, craiyon_utils\r\nimport discord\r\nfrom discord.ext import commands\r\nfrom io import BytesIO\r\nimport base64\r\n\r\nintents = discord.Intents.default()\r\nintents.message_content = True\r\nbot = commands.Bot(intents = intents, command_prefix=\"!\")\r\n\r\ngenerator = Craiyon() # Initialize Craiyon() class\r\n\r\n@bot.event\r\nasync def on_ready():\r\n    print(f\"Successfully logged in as {bot.user.name}!\")\r\n\r\n# Create command\r\n@bot.command()\r\nasync def genimage(ctx, *, prompt: str):\r\n    await ctx.send(f\"Generating prompt \\\"{prompt}\\\"...\")\r\n    \r\n    generated_images = await generator.async_generate(prompt) # Generate images\r\n    b64_list = await craiyon_utils.async_encode_base64(generated_images.images) # Download images from https://img.craiyon.com and store them as b64 bytestring object\r\n    \r\n    images1 = []\r\n    for index, image in enumerate(b64_list): # Loop through b64_list, keeping track of the index\r\n        img_bytes = BytesIO(base64.b64decode(image)) # Decode the image and store it as a bytes object\r\n        image = discord.File(img_bytes)\r\n        image.filename = f\"result{index}.webp\"\r\n        images1.append(image) # Add the image to the images1 list\r\n        \r\n    await ctx.reply(files=images1) # Reply to the user with all 9 images in 1 message\r\n        \r\n\r\nbot.run(\"your_token_here\")\r\n```\r\n\r\n## Specify custom tokens/model versions\r\n\r\n```py\r\n\r\nfrom craiyon import Craiyon # Importing the v2 model\r\n\r\n# api_token and model_version are not required, but recommended\r\ngenerator = Craiyon(api_token=\"your-token-here\", model_version=\"api-model-version\")\r\n\r\n# ...rest is the same stuff as above\r\n```\r\n\r\n### api_token\r\n* If you bought a paid subscription to Craiyon.com, you would know that the watermark is removed. If you wish to have the watermark removed from the generated images in your application as well, you can specify a token here. \r\n* To find your token: Open Google Chrome, go to craiyon.com (make sure you're logged in), Press F12, go to the Network tab, make sure the record button looks like a red circle at the top-left. Put your prompt in the text box and press the orange \"Draw\" button. Two \"draw\" items should appear on the left, under \"name\". One of them will have a \"Payload\" tab next to \"Headers\" and \"Preview\", as well as above \"General\". Click it, and your token is listed there.\r\n\r\n### model_version\r\n* Since Craiyon is still training their V2 model, it is improving every day. We recommend putting your own model version here to get the newest and best model they have at the moment.\r\n* To get the model version, follow the steps for the api_token listed above, except copy the \"version\" instead of the \"token\". Then, just pass it in as an argument for the generate() function as a string and you're ready!\r\n* While this is recommended, it is not required. If you do not pass a custom model version, this value will automatically default to \"35s5hfwn9n78gb06\", which is Craiyon's newest model as of March 10, 2023.\r\n\r\n## Backwards Compatibility\r\nThis library is fully backwards-compatible with older versions.\r\n\r\nIf you were previously using this library before we added support for Craiyon's V2 model and you wish to continue using the old V1 model, simply change the name of the class `Craiyon` to `CraiyonV1`! Otherwise, you can update your application to the V2 model by reading the code samples above.\r\n\r\n\r\n## Todo\r\n\r\nNone!\r\n\r\n## Contributing\r\n\r\nContributions are always welcome!\r\n\r\n- Fork this repository.\r\n- Make the changes in your forked repositry.\r\n- Make sure to fetch upstream before generating a PR.\r\n- Generate a pull request.\r\n\r\nPlease adhere to the GitHub's `code of conduct` for contributions and contributors.\r\n\r\n  \r\n## License\r\n\r\n[Apache License 2.0](https://choosealicense.com/licenses/apache-2.0/)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FireHead90544/craiyon.py",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "craiyon.py",
    "package_url": "https://pypi.org/project/craiyon.py/",
    "platform": "any",
    "project_url": "https://pypi.org/project/craiyon.py/",
    "project_urls": {
      "Homepage": "https://github.com/FireHead90544/craiyon.py",
      "Issue tracker": "https://github.com/FireHead90544/craiyon.py/issues"
    },
    "release_url": "https://pypi.org/project/craiyon.py/0.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "API Wrapper for craiyon.com (DAL-E-MINI). Generate awesome images from text tokens.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17274797,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41211e897e1dc486a3f00dc693a69769b3e33c11c485bc9e54dac6a0c637631e",
          "md5": "01648063bd637dd9f888d68ace9e74ad",
          "sha256": "aebafebf98e757b526e3e18c2ac666cdd122b67ca54aadd7d14e83145febe5d5"
        },
        "downloads": -1,
        "filename": "craiyon.py-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "01648063bd637dd9f888d68ace9e74ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7677,
        "upload_time": "2022-07-30T06:10:52",
        "upload_time_iso_8601": "2022-07-30T06:10:52.651428Z",
        "url": "https://files.pythonhosted.org/packages/41/21/1e897e1dc486a3f00dc693a69769b3e33c11c485bc9e54dac6a0c637631e/craiyon.py-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeced788256f6169991614b4ad9e08aa1c3f4d3a339a10146544fac1dded2481",
          "md5": "cec5570a290099b21e8ce7cd44a2b4a6",
          "sha256": "93f21f4f5c86d52d45a2b2f591cab17890b80829ef2ac113c1b0eea27e71adea"
        },
        "downloads": -1,
        "filename": "craiyon.py-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cec5570a290099b21e8ce7cd44a2b4a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7874,
        "upload_time": "2023-02-12T12:28:41",
        "upload_time_iso_8601": "2023-02-12T12:28:41.653626Z",
        "url": "https://files.pythonhosted.org/packages/ae/ce/d788256f6169991614b4ad9e08aa1c3f4d3a339a10146544fac1dded2481/craiyon.py-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82d8d73194468d07109d209e69b74df365cfd05d12e387b624b485df7d495b62",
          "md5": "986c6afeb62c6bc18cc480ef6a77d13d",
          "sha256": "fb54c64006ed8496dbe136668f2e32ace53a2f32a824b2968cb6ab67f4efc342"
        },
        "downloads": -1,
        "filename": "craiyon.py-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "986c6afeb62c6bc18cc480ef6a77d13d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10843,
        "upload_time": "2023-03-13T17:49:53",
        "upload_time_iso_8601": "2023-03-13T17:49:53.167463Z",
        "url": "https://files.pythonhosted.org/packages/82/d8/d73194468d07109d209e69b74df365cfd05d12e387b624b485df7d495b62/craiyon.py-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82d8d73194468d07109d209e69b74df365cfd05d12e387b624b485df7d495b62",
        "md5": "986c6afeb62c6bc18cc480ef6a77d13d",
        "sha256": "fb54c64006ed8496dbe136668f2e32ace53a2f32a824b2968cb6ab67f4efc342"
      },
      "downloads": -1,
      "filename": "craiyon.py-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "986c6afeb62c6bc18cc480ef6a77d13d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10843,
      "upload_time": "2023-03-13T17:49:53",
      "upload_time_iso_8601": "2023-03-13T17:49:53.167463Z",
      "url": "https://files.pythonhosted.org/packages/82/d8/d73194468d07109d209e69b74df365cfd05d12e387b624b485df7d495b62/craiyon.py-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}