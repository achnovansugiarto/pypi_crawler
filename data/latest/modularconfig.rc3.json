{
  "info": {
    "author": "Giuseppe Zanichelli",
    "author_email": "zannabianca199712@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3"
    ],
    "description": "=================\n``modularconfig``\n=================\n\n``modularconfig`` is a python library used to load complex config file configurations from disk, hiding the underlying filesystem structure and the specific file format(json, yaml, etc.)\n\nBasic Usage\n-----------\n\nLet's say that we order our config like this::\n\n    /opt/myapp/config\n    ├── mainconf.json\n    ├── nested\n    │   ├── answer\n    │   ├── precise_answer\n    │   └── complex_answer\n    ├── notjson.txt\n    └── confscript.py\n\nAnd we want to access `mainconf.json`:\n\n.. code-block:: json\n\n    {\n        \"content\": \"this is, obviously, a json file\",\n        \"version\": [2, 3]\n    }\n\nWe can simply write:\n\n>>> import modularconfig\n>>> modularconfig.get(\"/opt/myapp/config/mainconf.json/version\")\n[2, 3]\n\nor load the entire file:\n\n>>> modularconfig.get(\"/opt/myapp/config/mainconf.json\")\n{'content': 'this is, obviously, a json file', 'version': [2, 3]}\n\nor even the entire directory tree!\n\n>>> modularconfig.get(\"/opt/myapp/config\")\n{'mainconf.json': {'content': 'this is, obviously, a json file', 'version': [2, 3]}, 'nested': { ...\n\nFile type can be specified directly (see `Loading Files`_):\n\n.. code-block:: text\n\n    #type: text\n    {\n        \"content\": \"this is, less obviously, not a json file\",\n        \"version\": [2, 3]\n    }\n\n>>> modularconfig.get(\"/opt/myapp/config/notjson.txt\")\n'{\\n    \"content\": \"this is, less obviously, not a json file\",\\n    \"version\": [2, 3]\\n}'\n\nbut is usually not necessary:\n\n>>> modularconfig.get(\"/opt/myapp/config/nested\")\n{'answer': 42, 'precise_answer': 42.0, 'complex_answer': (42+0j)}\n\nTo ease on the paths a common prefix can be specified (similar to the cd command):\n\n>>> modularconfig.set_config_directory(\"/opt/myapp/config\")\n>>> modularconfig.get(\"mainconf.json/version\")\n[2, 3]\n\nand a context manger is provided to temporarily change it\n\n>>> with modularconfig.using_config_directory(\"./nested\"):\n...     modularconfig.get(\"answer\")\n42\n\nLoading Files\n-------------\n\nThe config files can include an intestation that specify the datatype and evntual options::\n\n    #type:text:encoding=utf-8\n    #type:json\n    #type:base64:altchars=-_;validate=false\n\nType specification is always decoded from utf-8. The special option \"encoding\" is not passed to the loader but used to decode the rest of the file.\n\nThe available loaders are:\n\n- Dict types:\n\n  - json\n  - yaml [if pyyaml is installed, throw a MissingLoaderError otherwise]\n  - python [disabled by default, see `Dangerous Loaders`_]\n  - ini  [return a ConfigLoader instance]\n\n- Primitive types:\n\n  - int, integer\n  - float, real\n  - complex\n  - number, num [try in order to parse the text as a int, then a float, then a complex number]\n  - base64 [accept altchars and validate as options]\n  - text\n\nIf no type specification is given ``configloader.loaders.auto_loaders`` contains a list of loaders that will be tried in order.\n\nUsers can define their own loaders:\n\n.. code-block:: python\n\n    class myloader:\n        name = \"myloader\"\n        aliases = [\"other_name\"]  # optional\n\n        # At least one of the following methods must be defined:\n        def load(self, text:str, options: Dict[str, str]):\n            # parse untrusted text, safely\n            return parsed_obj\n\n        def dangerous_load(self, text:str, options: Dict[str, str]):\n            # parse trusted text, can have side-effects\n            return parsed_obj\n\n    modularconfig.loaders.register_loader(myloader())\n\nLoading functions should throw ``configloader.LoadingError`` if they can't load ``text`` if they need to be added to ``auto_loaders``\n\nDangerous Loaders\n-----------------\n\nSome loader are too powerful to be used on untrusted input (e.g. ``python``). To make sure that no side effect is caused by config files those loaders are disabled by default:\n\n``pyscript.py``::\n\n    #type: python\n    a=4\n    b=5\n\n>>> modularconfig.get(\"pyscript.py\")\nTraceback (most recent call last):\n  ...\nmodularconfig.errors.DisabledLoaderError: 'python' loader is disabled. Set dangerous_loaders['python'] to True to enable\n>>> modularconfig.loaders.dangerous_loaders[\"python\"] = True\n>>> modularconfig.get(\"pyscript.py\")\n{'a': 4, 'b': 5}\n\nSome loaders (like yaml) can offer both functionality: a safe subset and a full loader. In that case the full loader will be used only if the flag is True\n\nLazy Loading\n------------\n\nFiles are loaded only one time, at the first get request that point to them, to a setting inside them, or a directory in their path.\n\nUsers can control the moment in which file are loaded using the ``modularconfig.ensure`` function, that will preload the given file or directory.\n\n``ensure`` also expose a ``reload`` attribute that can be used to reload files changed on disk",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/zannabianca1997/modularconfig/archive/v_0.2.4-alpha.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zannabianca1997/modularconfig",
    "keywords": "configs,modular",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modularconfig",
    "package_url": "https://pypi.org/project/modularconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/modularconfig/",
    "project_urls": {
      "Download": "https://github.com/zannabianca1997/modularconfig/archive/v_0.2.4-alpha.tar.gz",
      "Homepage": "https://github.com/zannabianca1997/modularconfig"
    },
    "release_url": "https://pypi.org/project/modularconfig/0.2.4a0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Modular config loader",
    "version": "0.2.4a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8465613,
  "releases": {
    "0.2.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "285908d041188fd2c2c26d9e4bd6504c3e964b477061fc069f99e60a6fa44046",
          "md5": "90f7c78322f50e47bbcbe1b68a89bd85",
          "sha256": "dbc4e30d4fd40bac92943ef0b18f56901a2afcfc310048caa95d5230ca7c19fc"
        },
        "downloads": -1,
        "filename": "modularconfig-0.2.2a0.tar.gz",
        "has_sig": false,
        "md5_digest": "90f7c78322f50e47bbcbe1b68a89bd85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12862,
        "upload_time": "2020-10-18T17:51:06",
        "upload_time_iso_8601": "2020-10-18T17:51:06.594818Z",
        "url": "https://files.pythonhosted.org/packages/28/59/08d041188fd2c2c26d9e4bd6504c3e964b477061fc069f99e60a6fa44046/modularconfig-0.2.2a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95ac058a89e5b25ffa820f202949cf34f14fe57711c5fa9408916cb9c8d67cfd",
          "md5": "6eea0d2225a685b32c2dcbcb5c8b7dcf",
          "sha256": "8478ea88ce7d290e9c0d336934539e1483a25367a3c06b96c84d2ad9c473a9fd"
        },
        "downloads": -1,
        "filename": "modularconfig-0.2.3a0.tar.gz",
        "has_sig": false,
        "md5_digest": "6eea0d2225a685b32c2dcbcb5c8b7dcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12887,
        "upload_time": "2020-10-18T17:59:41",
        "upload_time_iso_8601": "2020-10-18T17:59:41.599438Z",
        "url": "https://files.pythonhosted.org/packages/95/ac/058a89e5b25ffa820f202949cf34f14fe57711c5fa9408916cb9c8d67cfd/modularconfig-0.2.3a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8937dfdf31d5aaf7797daeea135dc301606f89f9b7cc5b959261d77a025e042d",
          "md5": "b7cc457687fd095763b62441da41b0e3",
          "sha256": "81a694341b97745951fe4a44cd8da31e2243de8a94664c1e73edf5d45d8ef3f0"
        },
        "downloads": -1,
        "filename": "modularconfig-0.2.4a0.tar.gz",
        "has_sig": false,
        "md5_digest": "b7cc457687fd095763b62441da41b0e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14445,
        "upload_time": "2020-10-21T12:37:07",
        "upload_time_iso_8601": "2020-10-21T12:37:07.889352Z",
        "url": "https://files.pythonhosted.org/packages/89/37/dfdf31d5aaf7797daeea135dc301606f89f9b7cc5b959261d77a025e042d/modularconfig-0.2.4a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8937dfdf31d5aaf7797daeea135dc301606f89f9b7cc5b959261d77a025e042d",
        "md5": "b7cc457687fd095763b62441da41b0e3",
        "sha256": "81a694341b97745951fe4a44cd8da31e2243de8a94664c1e73edf5d45d8ef3f0"
      },
      "downloads": -1,
      "filename": "modularconfig-0.2.4a0.tar.gz",
      "has_sig": false,
      "md5_digest": "b7cc457687fd095763b62441da41b0e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14445,
      "upload_time": "2020-10-21T12:37:07",
      "upload_time_iso_8601": "2020-10-21T12:37:07.889352Z",
      "url": "https://files.pythonhosted.org/packages/89/37/dfdf31d5aaf7797daeea135dc301606f89f9b7cc5b959261d77a025e042d/modularconfig-0.2.4a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}