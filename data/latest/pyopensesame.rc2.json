{
  "info": {
    "author": "Adam Jenca",
    "author_email": "jenca.a@gjh.sk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent"
    ],
    "description": "\n# opensesame\nAdvanced password generator and hasher made in Python.\n# Installation\n## From PyPI(any OS)\n```bash\npython3 -m pip install opensesame\n```\n## Directly from GitHub(Linux only)\n```bash\ngit clone \"https://github.com/jenca-adam/opensesame/\" opensesame_build\ncd opensesame_build\n./setup.sh\ncd ..\nrm -rf opensesame_build\n```\nYou can also use `sudo python3 setup.py install`, but `setup.sh` allows local installation.\n# CLI\n`opensesame` CLI supports two commands:<br>\n1.`generate` for generating passwords(default)\n\n```bash\nUsage: python -m opensesame generate [OPTIONS]\n\nOptions:\n  -t, --type [chars|characters|c|word|w|pronounceable|p]\n                                  generation method to use\n  --min INTEGER                   Minimal number of characters in password\n                                  (has no effect if type is word)\n  --max INTEGER                   Maximal number of characters in password\n                                  (has no effect if type is word)\n  -l, --length INTEGER            Precise number of characters in password.\n                                  Overrides --min and --max (has no effect if\n                                  type is word)\n  -s, --number-suffix INTEGER     Length of number suffix\n  -c, --copy                      Use this to copy the generated password to\n                                  the clipboard\n  -h, --hash                      Print also the password hash\n  -a, --algorithm [sha3_384|sha512|blake2b|sha1|sha224|sha3_512|sha256|shake_256|md5|sha384|shake_128|sha3_256|sha3_224|blake2s]\n                                  Hashing algorithm to use with -h. Default\n                                  MD5. (If -h is not set, has no effect)\n  -L, --lowercase                 If type is chars, adds lowercase ASCII to\n                                  the generation set. This flag is\n                                  automatically set if none of -U,-D,-S,-A,-C\n                                  is set.\n  -U, --uppercase                 If type is chars, adds uppercase ASCII to\n                                  the generation set\n  -D, --digits                    If type is chars, adds decimal digits to the\n                                  generation set\n  -S, --symbols                   If type is chars, adds ASCII symbols to the\n                                  generation set\n  -A, --all                       If type is chars, adds all groups to the\n                                  generation set\n  -C, --copy-hash                 Use this to copy the generated hash to\n                                  clipboard. Has no effect if -h is not set.\n  -n, --number INTEGER            Number of passwords to generate\n  -i, --infinite                  Constantly generates passwords. Overrides\n                                  -n.\n  --help                          Show this message and exit.\n```\n\n2.`hash` for hashing passwords.<br>\n```bash\nUsage: python -m opensesame hash [OPTIONS]\n\nOptions:\n  -i, --input FILENAME            Input to read from. Default is stdin\n  -o, --output FILENAME           Output to write to. Default is stdout\n  -a, --algorithm [sha224|blake2b|sha3_384|sha384|blake2s|sha1|shake_128|sha3_224|sha512|sha3_256|sha3_512|sha256|md5|shake_256]\n                                  Hashing algorithm to use. Default MD5\n  -b, --bytes-digest              Output normal digest instead of hexdigest.\n  -r, --repr                      If -b is set, outputs Python internal string\n                                  representation of bytes output\n  --help                          Show this message and exit.\n```\n# Python lib\n## Generation methods\n# opensesame\nAdvanced password generator and hasher made in Python.\n# Installation\n## From PyPI(any OS)\n```bash\npython3 -m pip install opensesame\n```\n## Directly from GitHub(Linux only)\n```bash\ngit clone \"https://github.com/jenca-adam/opensesame/\" opensesame_build\ncd opensesame_build\n./setup.sh\ncd ..\nrm -rf opensesame_build\n```\nYou can also use `sudo python3 setup.py install`, but `setup.sh` allows local installation.\n# CLI\n`opensesame` CLI supports two commands:<br>\n1.`generate` for generating passwords(default)\n\n```bash\nUsage: python -m opensesame generate [OPTIONS]\n\nOptions:\n  -t, --type [chars|characters|c|word|w|pronounceable|p]\n                                  generation method to use\n  --min INTEGER                   Minimal number of characters in password\n                                  (has no effect if type is word)\n  --max INTEGER                   Maximal number of characters in password\n                                  (has no effect if type is word)\n  -l, --length INTEGER            Precise number of characters in password.\n                                  Overrides --min and --max (has no effect if\n                                  type is word)\n  -s, --number-suffix INTEGER     Length of number suffix\n  -c, --copy                      Use this to copy the generated password to\n                                  the clipboard\n  -h, --hash                      Print also the password hash\n  -a, --algorithm [sha3_384|sha512|blake2b|sha1|sha224|sha3_512|sha256|shake_256|md5|sha384|shake_128|sha3_256|sha3_224|blake2s]\n                                  Hashing algorithm to use with -h. Default\n                                  MD5. (If -h is not set, has no effect)\n  -L, --lowercase                 If type is chars, adds lowercase ASCII to\n                                  the generation set. This flag is\n                                  automatically set if none of -U,-D,-S,-A,-C\n                                  is set.\n  -U, --uppercase                 If type is chars, adds uppercase ASCII to\n                                  the generation set\n  -D, --digits                    If type is chars, adds decimal digits to the\n                                  generation set\n  -S, --symbols                   If type is chars, adds ASCII symbols to the\n                                  generation set\n  -A, --all                       If type is chars, adds all groups to the\n                                  generation set\n  -C, --copy-hash                 Use this to copy the generated hash to\n                                  clipboard. Has no effect if -h is not set.\n  -n, --number INTEGER            Number of passwords to generate\n  -i, --infinite                  Constantly generates passwords. Overrides\n                                  -n.\n  --help                          Show this message and exit.\n```\n\n2.`hash` for hashing passwords.<br>\n```bash\nUsage: python -m opensesame hash [OPTIONS]\n\nOptions:\n  -i, --input FILENAME            Input to read from. Default is stdin\n  -o, --output FILENAME           Output to write to. Default is stdout\n  -a, --algorithm [sha224|blake2b|sha3_384|sha384|blake2s|sha1|shake_128|sha3_224|sha512|sha3_256|sha3_512|sha256|md5|shake_256]\n                                  Hashing algorithm to use. Default MD5\n  -b, --bytes-digest              Output normal digest instead of hexdigest.\n  -r, --repr                      If -b is set, outputs Python internal string\n                                  representation of bytes output\n  --help                          Show this message and exit.\n```\n# Python lib\n## Generation methods\n### chars\nThis generates a password of a given length randomly selecting from the given character sets. Character sets are: \n\n* `lowercase` -> lower case ascii chars\n* `uppercase` -> UPPER CASE ASCII CHARS\n* `digits` -> 0123456789\n* `symbols` -> *!\"#$%&'()+,\\*-./:;<=>?@[\\]^_`{|}~*\n* `all` -> everything above\nCharacter sets are added by setting kwarg `<CHARSET_NAME>` to `True`.\nIf no character sets are specified, only lowercase is used.\n\nYou can specify length using `length`,`min` and `max` atributtes, where `length` overrides the boundaries(`min` and `max`).\nDefault length is picked between 6 and 20.\n> :warning: Be careful! Don't select only one boundary, as it might cause `IndexError`.\n\nYou can also generate a pronounciable password by setting `pronounciable` to `True`.\nCharacter sets don't apply to pronounciable passwords.\n### word\nThis just selects a random word from the wordlist.\nNo attributes from `chars` apply to this.\n### passgen\nWith `passgen`,you can select a method and call the method with given `**kwargs`. <br>\nIt's just a wrapper. <br>\nThe methods are selected by setting the first arg of `passgen` to `chars`,`word` or `pronounciable`. You can also set it to the first char of their name. \n## `number_suffix`\n`chars`,`word` and `passgen` all have the argument `number_suffix`. It specifies how many digits are supposed to be added to the end of the password.\n## `Password` object\nGeneration methods return this.<br>\nIt's a string wrapped in hashing.\nHashing is done with  `Password.hash(algorithm)`.\n`Password.hash` returns `Hash` object with attributes `hexdigest`(hexadecimal representation of the digest) and `bytesdigest`(actual digest)\n\n\n### chars\nThis generates a password of a given length randomly selecting from the given character sets. Character sets are: \n\n* `lowercase` -> lower case ascii chars\n* `uppercase` -> UPPER CASE ASCII CHARS\n* `digits` -> 0123456789\n* `symbols` -> *!\"#$%&'()+,\\*-./:;<=>?@[\\]^_`{|}~*\n* `all` -> everything above\nCharacter sets are added by setting kwarg `<CHARSET_NAME>` to `True`.\nIf no character sets are specified, only lowercase is used.\n\nYou can specify length using `lgit clone git@github.com:YOUR-USERNAME/warehouse.gitength`,`min` and `max` atributtes, where `length` overrides the boundaries(`min` and `max`).\nDefault length is picked between 6 and 20.\n> :warning: Be careful! Don't select only one boundary, as it might cause `IndexError`.\n\nYou can also generate a pronounciable password by setting `pronounciable` to `True`.\nCharacter sets don't apply to pronounciable passwords.\n### word\nThis just selects a random word from the wordlist.\nNo attributes from `chars` apply to this.\n### passgen\nWith `passgen`,you can select a method and call the method with given `**kwargs`. <br>\nIt's just a wrapper. <br>\nThe methods are selected by setting the first arg of `passgen` to `chars`,`word` or `pronounciable`. You can also set it to the first char of their name. \n## `number_suffix`\n`chars`,`word` and `passgen` all have the argument `number_suffix`. It specifies how many digits are supposed to be added to the end of the password.\n## `Password` object\nGeneration methods return this.<br>\nIt's a string wrapped in hashing.\nHashing is done with  `Password.hash(algorithm)`.\n`Password.hash` returns `Hash` object with attributes `hexdigest`(hexadecimal representation of the digest) and `bytesdigest`(actual digest)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyopensesame",
    "package_url": "https://pypi.org/project/pyopensesame/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyopensesame/",
    "project_urls": {
      "GitHub": "https://github.com/jenca-adam/opensesame/"
    },
    "release_url": "https://pypi.org/project/pyopensesame/1.0.1/",
    "requires_dist": [
      "click",
      "click-default-group"
    ],
    "requires_python": "",
    "summary": "Advanced password generator and hasher",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15553648,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67aea101e9a33a1fac9aa2eaaca8ac4c66f6029331037c1ccc5e81b299ab45c7",
          "md5": "095a83dcb0da105e294148142f2504dc",
          "sha256": "7029014ade8f15eedc70e755d3fbe739165596c624fc9c290815349537521d29"
        },
        "downloads": -1,
        "filename": "pyopensesame-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "095a83dcb0da105e294148142f2504dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 171577,
        "upload_time": "2022-10-27T13:46:24",
        "upload_time_iso_8601": "2022-10-27T13:46:24.759024Z",
        "url": "https://files.pythonhosted.org/packages/67/ae/a101e9a33a1fac9aa2eaaca8ac4c66f6029331037c1ccc5e81b299ab45c7/pyopensesame-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f01531010c1a805c21bfa70922de55250b9e11f7bc2af807787a7ad7197f3676",
          "md5": "398ca62d978a1ab25d15d9aa2afe2fe0",
          "sha256": "02283504fd3c9b901d6603761c31f2745788214dc41e59967b8b57e60e25d5a9"
        },
        "downloads": -1,
        "filename": "pyopensesame-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "398ca62d978a1ab25d15d9aa2afe2fe0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 173080,
        "upload_time": "2022-10-27T13:47:13",
        "upload_time_iso_8601": "2022-10-27T13:47:13.871457Z",
        "url": "https://files.pythonhosted.org/packages/f0/15/31010c1a805c21bfa70922de55250b9e11f7bc2af807787a7ad7197f3676/pyopensesame-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04ab641e9fa0578d64c2466bbeaf1d532cab267f5a6556fbfbaff80c95c09b23",
          "md5": "a0e28952130798947cf681fb82160a2d",
          "sha256": "2277f8aeb78d6c67c1d33971824915c0230ca71a7ba395b40a30b9f1b425a246"
        },
        "downloads": -1,
        "filename": "pyopensesame-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0e28952130798947cf681fb82160a2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 171632,
        "upload_time": "2022-10-27T14:21:13",
        "upload_time_iso_8601": "2022-10-27T14:21:13.443462Z",
        "url": "https://files.pythonhosted.org/packages/04/ab/641e9fa0578d64c2466bbeaf1d532cab267f5a6556fbfbaff80c95c09b23/pyopensesame-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "454ba6d4c39c75b602d2f2113ad46b458c1b11efc3c2c1d6ef65ee0883e7df2e",
          "md5": "be278a7143205f2775863b0fc79456ce",
          "sha256": "c9841820a69a6cc1c22568499e1c063830d54fcffb2c4e95ece0ca45339fb7d1"
        },
        "downloads": -1,
        "filename": "pyopensesame-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "be278a7143205f2775863b0fc79456ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 173224,
        "upload_time": "2022-10-27T14:21:15",
        "upload_time_iso_8601": "2022-10-27T14:21:15.941729Z",
        "url": "https://files.pythonhosted.org/packages/45/4b/a6d4c39c75b602d2f2113ad46b458c1b11efc3c2c1d6ef65ee0883e7df2e/pyopensesame-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04ab641e9fa0578d64c2466bbeaf1d532cab267f5a6556fbfbaff80c95c09b23",
        "md5": "a0e28952130798947cf681fb82160a2d",
        "sha256": "2277f8aeb78d6c67c1d33971824915c0230ca71a7ba395b40a30b9f1b425a246"
      },
      "downloads": -1,
      "filename": "pyopensesame-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0e28952130798947cf681fb82160a2d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 171632,
      "upload_time": "2022-10-27T14:21:13",
      "upload_time_iso_8601": "2022-10-27T14:21:13.443462Z",
      "url": "https://files.pythonhosted.org/packages/04/ab/641e9fa0578d64c2466bbeaf1d532cab267f5a6556fbfbaff80c95c09b23/pyopensesame-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "454ba6d4c39c75b602d2f2113ad46b458c1b11efc3c2c1d6ef65ee0883e7df2e",
        "md5": "be278a7143205f2775863b0fc79456ce",
        "sha256": "c9841820a69a6cc1c22568499e1c063830d54fcffb2c4e95ece0ca45339fb7d1"
      },
      "downloads": -1,
      "filename": "pyopensesame-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "be278a7143205f2775863b0fc79456ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 173224,
      "upload_time": "2022-10-27T14:21:15",
      "upload_time_iso_8601": "2022-10-27T14:21:15.941729Z",
      "url": "https://files.pythonhosted.org/packages/45/4b/a6d4c39c75b602d2f2113ad46b458c1b11efc3c2c1d6ef65ee0883e7df2e/pyopensesame-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}