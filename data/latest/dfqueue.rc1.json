{
  "info": {
    "author": "Jean-Charles Hardy",
    "author_email": "jeancharles.hardy2224@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6"
    ],
    "description": "DfQueue\n=======\n\nWhat is it?\n-----------\n\nDfQueue is a collection of functions for dataframes's rows managing. Deletion priority of rows are defined by their positions in the dedicated queue.\n\nDfQueue can be split into three distinct parts:\n- The assignation of a specific queue for each selected dataframe (*assign_dataframe* function)\n- The adding of items (related to a dataframe row) in the queues  (*adding* decorator)\n- The managing of the dataframes according to items in the related queues (*managing* decorator)\n\n[![pypi][pypi-image]][pypi-url]\n\n[pypi-image]: https://img.shields.io/pypi/v/dfqueue.svg?style=flat\n[pypi-url]: https://pypi.org/project/dfqueue\n\nInstallation\n------------\n\n    pip install dfqueue\n\nHow does it work?\n-----------------\n\nDfQueue instantiates a *QueuesHandler* singleton containing all dataframe queues and their parameters. It can't be directly accessed\nbut the *assign_dataframe* function can reset a specific queue and modify its parameters.\n\nA queues has three parameters:\n- The dataframe assigned to the queue\n- The maximum allowed size of the assigned dataframe. If the size of the assigned dataframe is greater than this parameter, the managing functions will remove the excess rows during their next calls\n- The behaviour of the queue during the managing process\n\nItems in the queues are size 2 tuples *(A, B)* containing:\n- *A* : The label of the related row. Each queue item represents a row in the assigned dataframe. If the label doesn't exist, the item will be removed and ignored during the next managing function call\n- *B* : A dictionary containing columns names of the assigned dataframe and their values used for the checking during the managing process. If the columns values in the item doesn't correpond to the columns values in the assigned dataframe, the item will be removed and ignored during the next managing function call\n\nQueue evolution example:\n\n    # Initial situation\n    ----------------------------------------------------------------------------------------\n\n    # Assigned dataframe (max size : 4)         # Queue\n    +-------+-----------+-----------+           +----------------------------+\n    |       | COLUMN A  | COLUMN B  |           |           EMPTY            |\n    +=======+===========+===========+           +----------------------------+\n    |             EMPTY             |\n    +-------------------------------+  \n\n\n    # Rows adding with only <COLUMN A> as checking column\n    ----------------------------------------------------------------------------------------\n\n    Assigned dataframe (max size : 4)           # Queue\n    +-------+-----------+-----------+           +----------------------------+\n    |       | COLUMN A  | COLUMN B  |           | ( ROW 1, { COLUMN A : 0 }) |\n    +=======+===========+===========+           +----------------------------+\n    | ROW 1 |     0     |     1     |           | ( ROW 2, { COLUMN A : 2 }) |\n    +-------+-----------+-----------+           +----------------------------+\n    | ROW 2 |     2     |     3     |\n    +-------+-----------+-----------+\n\n\n    # Rows adding with <COLUMN A> and <COLUMN B> as checking columns\n    ----------------------------------------------------------------------------------------\n\n    Assigned dataframe (max size : 4)           # Queue\n    +-------+-----------+-----------+           +------------------------------------------+\n    |       | COLUMN A  | COLUMN B  |           | ( ROW 1, { COLUMN A : 0 })               |\n    +=======+===========+===========+           +------------------------------------------+\n    | ROW 1 |     0     |     1     |           | ( ROW 2, { COLUMN A : 2 })               |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 2 |     2     |     3     |           | ( ROW 3, { COLUMN A : 4, COLUMN B : 5 }) |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 3 |     4     |     5     |           | ( ROW 4, { COLUMN A : 6, COLUMN B : 7 }) |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 4 |     6     |     7     |\n    +-------+-----------+-----------+\n\n\n    # Rows adding values with only <COLUMN A> as checking column\n    ----------------------------------------------------------------------------------------\n\n    Assigned dataframe (max size : 4)           # Queue\n    +-------+-----------+-----------+           +------------------------------------------+\n    |       | COLUMN A  | COLUMN B  |           | ( ROW 1, { COLUMN A : 0 })               |\n    +=======+===========+===========+           +------------------------------------------+\n    | ROW 1 |     0     |     1     |           | ( ROW 2, { COLUMN A : 2 })               |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 2 |    200    |    300    |           | ( ROW 3, { COLUMN A : 4, COLUMN B : 5 }) |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 3 |     4     |     5     |           | ( ROW 4, { COLUMN A : 6, COLUMN B : 7 }) |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 4 |     6     |     7     |           | ( ROW 2, { COLUMN A : 200 })             |       \n    +-------+-----------+-----------+           +------------------------------------------+\n\n\n    # Rows adding with only <COLUMN A> as checking column\n    ----------------------------------------------------------------------------------------\n\n    Assigned dataframe (max size : 4)           # Queue\n    +-------+-----------+-----------+           +------------------------------------------+\n    |       | COLUMN A  | COLUMN B  |           | ( ROW 1, { COLUMN A : 0 })               |\n    +=======+===========+===========+           +------------------------------------------+\n    | ROW 1 |     0     |     1     |           | ( ROW 2, { COLUMN A : 2 })               |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 2 |    200    |    300    |           | ( ROW 3, { COLUMN A : 4, COLUMN B : 5 }) |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 3 |     4     |     5     |           | ( ROW 4, { COLUMN A : 6, COLUMN B : 7 }) |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 4 |     6     |     7     |           | ( ROW 2, { COLUMN A : 200 })             |       \n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 5 |     8     |     9     |           | ( ROW 5, { COLUMN A : 8 })               |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 6 |     2     |     3     |           | ( ROW 6, { COLUMN A : 2 })               |\n    +-------+-----------+-----------+           +------------------------------------------+\n\n    Max size of the dataframe id reached. It's time to call the managing function...\n\n\n    # Managing dataframe\n    ----------------------------------------------------------------------------------------\n\n    Assigned dataframe (max size : 4)           # Queue\n    +-------+-----------+-----------+           +------------------------------------------+\n    |       | COLUMN A  | COLUMN B  |           | ( ROW 4, { COLUMN A : 6, COLUMN B : 7 }) |\n    +=======+===========+===========+           +------------------------------------------+\n    | ROW 2 |    200    |    300    |           | ( ROW 2, { COLUMN A : 200 })             |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 4 |     6     |     7     |           | ( ROW 5, { COLUMN A : 8 })               |       \n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 5 |     8     |     9     |           | ( ROW 6, { COLUMN A : 2 })               |\n    +-------+-----------+-----------+           +------------------------------------------+\n    | ROW 6 |     2     |     3     |\n    +-------+-----------+-----------+\n\n    If the selected behaviour is ALL_ITEMS : <( ROW 2, { COLUMN A : 2 })> was ignored because the <COLUMN A> value doesn't correpond.\n    If the selected behaviour is LAST_ITEM : <( ROW 2, { COLUMN A : 2 })> was ignored because this is not the last item of < ROW 2 > with only < COLUMN A > as checking column.\n\n\nExample !\n---------\n\nAn game room has 6 clients but only 3 arcades and the manager wants to add a challenge for the players. He creates the following rules:\n- A player is replaced by another client every 10 min (i.e., a session).\n- The replaced player is one has not won additional levels between this session and the previous one (if none or several are selected, the first in the list  will be chosen).\n- If a player reaches the 5th level, he will be a replaced player.\n\nInitialization:\n\n```python\nfrom pandas import DataFrame, Series\nfrom random import randint\nfrom dfqueue import assign_dataframe, managing, adding, QueueBehaviour\n\narcades_nb = 3\nmax_level = 5\nchecking_columns = ['REMAINING_LEVELS']\narcade_room = DataFrame(columns=checking_columns)\n\nclients = [\n'BOB',\n'JACK',\n'TOM',\n'DONALD',\n'ARNOLD',\n'WILLIAM'\n]\n```\n\nDataframe assignation:\n\n```python\nassign_dataframe(arcade_room, arcades_nb, checking_columns, queue_behaviour=QueueBehaviour.ALL_ITEMS)\n```\n\nAdding and managing function creation:\n\n```python\n@managing()\n@adding()\ndef new_session(new_players_nb=1):\n    current_players = list()\n\n    if not arcade_room.empty:\n        # Udapte the current players\n        for label in arcade_room.index:\n            remaining_levels = arcade_room.at[label, 'REMAINING_LEVELS']\n            # Select a random value between 0 and the previous remaining levels\n            new_remaining_levels = randint(0, remaining_levels)\n            if new_remaining_levels != remaining_levels:\n                if new_remaining_levels != 0:\n                    # Udapte the row in the dataframe\n                    arcade_room.at[label, 'REMAINING_LEVELS'] = new_remaining_levels\n                    # Add an item in the queue \n                    current_players.append((label, {'REMAINING_LEVELS': new_remaining_levels}))\n                else:\n                    arcade_room.drop([label], inplace=True)\n\n    # Add the new players in the queue and the dataframe\n    for _ in range(new_players_nb):\n        new_player = (clients.pop(0), {'REMAINING_LEVELS': max_level})\n        arcade_room.at[new_player[0]] = Series(data=new_player[1])\n        current_players.append(new_player)\n\n    # The results of functions decorated with the @adding decorator have to return a list of queue items (see documentation) \n    return current_players\n```\n\nThe first session :\n\n```python\n# Add directly 3 players because the arcade room is empty\nnew_session(3)\n```\n\nResult:\n\n    # arcade_room (max size : 3)                    # Queue\n    +---------------+-------------------+           +----------------------------------+\n    |               |  REMAINING_LEVEL  |           | ( BOB,  { REMAINING_LEVEL : 5 }) |\n    +===============+===================+           +----------------------------------+\n    |      BOB      |         5         |           | ( JACK, { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +----------------------------------+\n    |      JACK     |         5         |           | ( TOM,  { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +----------------------------------+\n    |      TOM      |         5         |\n    +---------------+-------------------+\n\nThe second session :\n\n```python\n# Only 1 new player this time\nnew_session()\n```\n\nAdding process:\n\n    # arcade_room (max size : 3)                    # Queue\n    +---------------+-------------------+           +------------------------------------+\n    |               |  REMAINING_LEVEL  |           | ( BOB,    { REMAINING_LEVEL : 5 }) |\n    +===============+===================+           +------------------------------------+\n    |      BOB      |         3         |           | ( JACK,   { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +------------------------------------+\n    |      JACK     |         4         |           | ( TOM,    { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +------------------------------------+\n    |      TOM      |         5         |           | ( BOB,    { REMAINING_LEVEL : 3 }) |\n    +---------------+-------------------+           +------------------------------------+\n    |     DONALD    |         5         |           | ( JACK,   { REMAINING_LEVEL : 4 }) |\n    +---------------+-------------------+           +------------------------------------+\n                                                    | ( DONALD, { REMAINING_LEVEL : 5 }) |\n                                                    +------------------------------------+\n\n    A Tom's item is not added in the queue because he didn't gain levels.\n\nManaging process (and final result):\n\n    # arcade_room (max size : 3)                    # Queue\n    +---------------+-------------------+           +------------------------------------+\n    |               |  REMAINING_LEVEL  |           | ( BOB,    { REMAINING_LEVEL : 3 }) |\n    +===============+===================+           +------------------------------------+\n    |      BOB      |         3         |           | ( JACK,   { REMAINING_LEVEL : 4 }) |\n    +---------------+-------------------+           +------------------------------------+\n    |      JACK     |         4         |           | ( DONALD, { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +------------------------------------+\n    |     DONALD    |         5         |\n    +---------------+-------------------+\n\nThe third session : \n\n```python\n# Only 1 new player this time\nnew_session()\n```\n\nAdding process:\n\n    # arcade_room (max size : 3)                    # Queue\n    +---------------+-------------------+           +------------------------------------+\n    |               |  REMAINING_LEVEL  |           | ( BOB,    { REMAINING_LEVEL : 3 }) |\n    +===============+===================+           +------------------------------------+\n    |      BOB      |         3         |           | ( JACK,   { REMAINING_LEVEL : 4 }) |\n    +---------------+-------------------+           +------------------------------------+\n    |      JACK     |         2         |           | ( DONALD, { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +------------------------------------+\n    |     ARNOLD    |         5         |           | ( JACK,   { REMAINING_LEVEL : 2 }) |\n    +---------------+-------------------+           +------------------------------------+\n                                                    | ( ARNOLD, { REMAINING_LEVEL : 5 }) |\n                                                    +------------------------------------+\n\n    A Bob's item is not added in the queue because he didn't gain levels.\n    Donald is replaced because he gained 5 levels.\n\nManaging process didn't do anything because the max size of the dataframe was not reached.\n\nThe last session :\n\n```python\n# Only 1 new player this time\nnew_session()\n```\n\nAdding process:\n\n    # arcade_room (max size : 3)                    # Queue\n    +---------------+-------------------+           +-------------------------------------+\n    |               |  REMAINING_LEVEL  |           | ( BOB,     { REMAINING_LEVEL : 3 }) |\n    +===============+===================+           +-------------------------------------+\n    |      BOB      |         1         |           | ( JACK,    { REMAINING_LEVEL : 4 }) |\n    +---------------+-------------------+           +-------------------------------------+\n    |      JACK     |         1         |           | ( DONALD,  { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +-------------------------------------+\n    |     ARNOLD    |         3         |           | ( JACK,    { REMAINING_LEVEL : 2 }) |\n    +---------------+-------------------+           +-------------------------------------+\n    |     WILLIAM   |         5         |           | ( ARNOLD,  { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +-------------------------------------+\n                                                    | ( BOB,     { REMAINING_LEVEL : 1 }) |\n                                                    +-------------------------------------+\n                                                    | ( JACK,    { REMAINING_LEVEL : 1 }) |\n                                                    +-------------------------------------+\n                                                    | ( ARNOLD,  { REMAINING_LEVEL : 3 }) |\n                                                    +-------------------------------------+\n                                                    | ( WILLIAM, { REMAINING_LEVEL : 5 }) |\n                                                    +-------------------------------------+\n\nManaging process (and final result):\n\n    # arcade_room (max size : 3)                    # Queue\n    +---------------+-------------------+           +-------------------------------------+\n    |               |  REMAINING_LEVEL  |           | ( JACK,    { REMAINING_LEVEL : 1 }) |\n    +===============+===================+           +-------------------------------------+\n    |      JACK     |         1         |           | ( ARNOLD,  { REMAINING_LEVEL : 3 }) |\n    +---------------+-------------------+           +-------------------------------------+\n    |     ARNOLD    |         3         |           | ( WILLIAM, { REMAINING_LEVEL : 5 }) |\n    +---------------+-------------------+           +-------------------------------------+\n    |     WILLIAM   |         5         |           \n    +---------------+-------------------+\n\n\nNotes\n-----\n\n- DfQueue doesn't support dataframes with rows multiindexes.\n- One managing process with multiple removed rows is faster than multiple managing processes with only one removed row.\n- Pandas 0.23.4 or greater is supported.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JCH222/dfqueue",
    "keywords": "queues,pandas-dataframe,decorators",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dfqueue",
    "package_url": "https://pypi.org/project/dfqueue/",
    "platform": "",
    "project_url": "https://pypi.org/project/dfqueue/",
    "project_urls": {
      "Homepage": "https://github.com/JCH222/dfqueue"
    },
    "release_url": "https://pypi.org/project/dfqueue/1.0/",
    "requires_dist": [
      "pandas (>=0.23.4)"
    ],
    "requires_python": "",
    "summary": "Content management decorators for pandas Dataframes",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4644298,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4070e0c18fa5dbedd4c2d119db793d7a6fd60ae411d23c73602d3a0ff3c2ffc0",
          "md5": "6875f5a2ae7b27eb90375541f08ebb9e",
          "sha256": "2de71f5d6d71b91af2836145a6bdb6b50e5fd59edd8d0aa8b6fe82737f8924c8"
        },
        "downloads": -1,
        "filename": "dfqueue-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6875f5a2ae7b27eb90375541f08ebb9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19274,
        "upload_time": "2018-12-29T15:56:30",
        "upload_time_iso_8601": "2018-12-29T15:56:30.571990Z",
        "url": "https://files.pythonhosted.org/packages/40/70/e0c18fa5dbedd4c2d119db793d7a6fd60ae411d23c73602d3a0ff3c2ffc0/dfqueue-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd20a6a379f33fccd1f5312501954707c6d2d183126ae4b4c1b3088b2568051d",
          "md5": "cb494f1f1049551c86bad75200768005",
          "sha256": "2eefc379665303810dc99282a05721bf9c302b91d8004a2faf39ebb18517327d"
        },
        "downloads": -1,
        "filename": "dfqueue-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cb494f1f1049551c86bad75200768005",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15533,
        "upload_time": "2018-12-29T15:56:32",
        "upload_time_iso_8601": "2018-12-29T15:56:32.523727Z",
        "url": "https://files.pythonhosted.org/packages/fd/20/a6a379f33fccd1f5312501954707c6d2d183126ae4b4c1b3088b2568051d/dfqueue-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4070e0c18fa5dbedd4c2d119db793d7a6fd60ae411d23c73602d3a0ff3c2ffc0",
        "md5": "6875f5a2ae7b27eb90375541f08ebb9e",
        "sha256": "2de71f5d6d71b91af2836145a6bdb6b50e5fd59edd8d0aa8b6fe82737f8924c8"
      },
      "downloads": -1,
      "filename": "dfqueue-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6875f5a2ae7b27eb90375541f08ebb9e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19274,
      "upload_time": "2018-12-29T15:56:30",
      "upload_time_iso_8601": "2018-12-29T15:56:30.571990Z",
      "url": "https://files.pythonhosted.org/packages/40/70/e0c18fa5dbedd4c2d119db793d7a6fd60ae411d23c73602d3a0ff3c2ffc0/dfqueue-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd20a6a379f33fccd1f5312501954707c6d2d183126ae4b4c1b3088b2568051d",
        "md5": "cb494f1f1049551c86bad75200768005",
        "sha256": "2eefc379665303810dc99282a05721bf9c302b91d8004a2faf39ebb18517327d"
      },
      "downloads": -1,
      "filename": "dfqueue-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cb494f1f1049551c86bad75200768005",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15533,
      "upload_time": "2018-12-29T15:56:32",
      "upload_time_iso_8601": "2018-12-29T15:56:32.523727Z",
      "url": "https://files.pythonhosted.org/packages/fd/20/a6a379f33fccd1f5312501954707c6d2d183126ae4b4c1b3088b2568051d/dfqueue-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}