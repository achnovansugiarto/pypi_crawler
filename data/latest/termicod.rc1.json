{
  "info": {
    "author": "Pigeon Nation",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Other/Nonlisted Topic"
    ],
    "description": "## Introduction\n\n`termicod` is a python module for printing text in any colour or style in the terminal. termicod also supports progress bars as an extra feature, enabeling you to create your own CLIs. Fonts and other things are (hopefully) going to be added in the future.\n\n## Usage\n\n### Text Colours\n\nIn order to create coloured text, you have to use the `makecolour(...)` function. In order to use this, you have to give it the text that you would like to colorise, and the colours/styles that you would like to apply to it. You may add as many as you want. A few examples are shown below: \\\n\\\n`>>> print(termicod.makecolour('Hello, world!', fgcolours['blue']))` \\\nThis will print \"Hello, world!\" out in the shell in blue. \\\n\\\n`>>> print(termicod.makecolour(' Warning!! ', styles['highlight-warn'], styles['blink'], styles['bold']))` \\\nThis will show a blinking \"Warning!!\" in the terminal. \\\n\\\n`>>> print(termicod.makecolour('Bold', 1))` \\\nThis example uses the numbers shown in the data dictionarys directly. \"1\" can be found in the styles dictionary. It makes any text go bold. \\\n\\\n`>>> print(termicod.makecolour('Brass', 1, 2, 3))` \\\nThis will show the word \"Brass\" in bold italic green.  \\\n\\\nScroll down to the bottom for the colouring option datasets.\n\n### Progress Bars\n\nIt is actually pretty simple to create a progress bar using termifish. All you need to do is call the `progress(...)` function and pass in an iterator. This is all implemented in a `for <x> in <y>` loop, rather like this: \\\n\\\n`import termifish` \\\n` ` \\\n`stuff = [...]` \\\n` ` \\\n`for item in termifish.progress(stuff): ` \\\n`\tprint('Doing Stuff... ', item) # Do Stuff` \\\n\\\nThe progress bar produced looks like this: \\\n`Progress: |████████--| 80.0% Complete` \\\nNote that the bar shown above has been durasticly shortened. \\\nThe standard length is 100 blocks long. \\\n\\\n**NOTE**: Please See Credits\n\n## Technical ⚙️\n\n### Progress Bar Options\n\nIt is possible to change the progress symbols, ect. using the keyword arguments of the `progress(...)` function. The options for the function are shown below: \n\n- iterable    - Required  : Iterable object (iterable) \n- prefix      - Optional  : The string used at the begining \"Progress:\" in the example. (str)\n- suffix      - Optional  : The string displayed at the end of the bar - \"Complete\" in the example. (str)\n- decimals    - Optional  : The number of decamals displayed in the percentage. (int)\n- length      - Optional  : The character length of bar (int)\n- fill        - Optional  : The character used as the bar's done symbol (█ is the default) (str)\n- ofill       - Optional  : The character used as the bar's not-done symbol (- is the default) (str)\n- printEnd    - Optional  : The end character (e.g. \"\\r\", \"\\r\\n\") (str)\n\n### End Colours\n\n`endcolour` is a keyword argument for the `makecolour(...)` function. It specifies the colour to return to when the coloured text has ended. The default is black. This is defined in the `_backend = {...}` dictionary as `\"end\"`.\n\n### Other Functions\n\n#### `clearscreen(...)`\n\nThis function clears the terminal window. It uses `os.system(...)`, and uses a different command depending on the operating system (`cls` is for windows, while everything else uses `clear`).\n\n#### `outlog/errlog/inplog(...)`\n\nThese functions are designed to be quick and easy shortcuts for printing to `sys.stderr`, `sys.stdout` and `sys.stdin`. The pass any arguments or keyword arguments on to `print(...)` (or `input(...)`), and they only only affect the `file` keyword argument.\n\n## Data\n\n### Foreground Colours\n\n\tfgcolours = {...}\n\n\t# Grey-Scale \n\t'black': 30,\n\t'grey': 90,\n\t'white': 97,\n\t'dim-white': 37,\n\t\n\t# Standards\n\t'red': 31,\n\t'green': 32,\n\t'yellow': 93,\n\t'orange': 33,\n\t'blue': 34,\n\t'pink': 35,\n\t'aqua': 96,\n\t\n\t# Light Variants\n\t'light-blue': 36,\n\t\n\t# Bright Variants\n\t'bright-red': 91,\n\t'bright-green': 92,\n\t'bright-blue': 94,\n\t'bright-pink': 95\n\n### Background Colours\n\n\tbgcolours = {...}\n\n\t# Grey-Scale\n\t'black': 40,\n\t'grey': 100,\n\t'white': 107,\n\t'dim-white': 47,\n\t\n\t# Standards\n\t'red': 41,\n\t'green': 42,\n\t'yellow': 103,\n\t'orange': 43,\n\t'blue': 44,\n\t'pink': 45,\n\t'aqua': 106,\n\t\n\t# Light Variants\n\t'light-blue': 46,\n\t\n\t# Bright-Variants\n\t'bright-red': 101,\n\t'bright-green': 102,\n\t'bight-blue': 104,\n\t'bright-pink': 105,\n\n### Styles\n\t\n\tstyles = {...}\n\n\t# Plain\n\t'standard': 0,\n\t'plain': 6,\n\t'bare': 9,\n\t\n\t# Standard\n\t'bold': 1,\n\t'italic': 3,\n\t'underline': 4,\n\t\n\t# Coloured\n\t'success': 2,\n\t'highlight-warn': 7,\n\t\n\t# Animated\n\t'blink': 5,\n\t\n\t# Other\n\t'invisible': 8\n\n## Coming Soon / Future Updates\n\nFeatures that may be implimented in the future are:\n- Unicode fonts\n- Unicode trees (this may or may not happen; I have already written a module for this called `unitrees`).\n- Actual cli tools\n- An possibly more... \n\n## Changelog\n\nIt's the first release! [1.0.0]\n\n## Credits\n\nThe credits for 99.99999% of the `progress(...)` function go to: \\\nDiogo and Greenstick on StackOverflow.com \\\nTheir question awnser can be found here: \\\n[https://stackoverflow.com/questions/3173320/text-progress-bar-in-terminal-with-block-characters](url) \\\nThe author of this module did *not* ask the question. \\\n\\\nAuthor: \\\nPigeon Nation!! :]\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "termicod",
    "package_url": "https://pypi.org/project/termicod/",
    "platform": null,
    "project_url": "https://pypi.org/project/termicod/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/termicod/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Renders Progress Bars & Coloured Text In The Terminal!!",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16356582,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0ddf2e752f728a85803f988cb1478eecb0c4689e4d65a2a62eacfd759432095",
          "md5": "2e7d44a4b54857743792779031686397",
          "sha256": "607b857ff9cb5fe49fcc59a6fc113a1bf4004991f1e62679208bf8d81b07b3b4"
        },
        "downloads": -1,
        "filename": "termicod-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e7d44a4b54857743792779031686397",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5544,
        "upload_time": "2023-01-09T07:00:23",
        "upload_time_iso_8601": "2023-01-09T07:00:23.114731Z",
        "url": "https://files.pythonhosted.org/packages/d0/dd/f2e752f728a85803f988cb1478eecb0c4689e4d65a2a62eacfd759432095/termicod-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7b0e30d7c2faace1a0076c2ccaf153dd7f8b272555a142097e4c53b857334af",
          "md5": "da4c4be61cf00b1dcbc9f92897af804a",
          "sha256": "4222884dec6c3e8ed6b593581f3d49e6feeb3aa68eb3ba54da1c54839183768f"
        },
        "downloads": -1,
        "filename": "termicod-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "da4c4be61cf00b1dcbc9f92897af804a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5167,
        "upload_time": "2023-01-09T07:00:24",
        "upload_time_iso_8601": "2023-01-09T07:00:24.767582Z",
        "url": "https://files.pythonhosted.org/packages/a7/b0/e30d7c2faace1a0076c2ccaf153dd7f8b272555a142097e4c53b857334af/termicod-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0ddf2e752f728a85803f988cb1478eecb0c4689e4d65a2a62eacfd759432095",
        "md5": "2e7d44a4b54857743792779031686397",
        "sha256": "607b857ff9cb5fe49fcc59a6fc113a1bf4004991f1e62679208bf8d81b07b3b4"
      },
      "downloads": -1,
      "filename": "termicod-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2e7d44a4b54857743792779031686397",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5544,
      "upload_time": "2023-01-09T07:00:23",
      "upload_time_iso_8601": "2023-01-09T07:00:23.114731Z",
      "url": "https://files.pythonhosted.org/packages/d0/dd/f2e752f728a85803f988cb1478eecb0c4689e4d65a2a62eacfd759432095/termicod-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7b0e30d7c2faace1a0076c2ccaf153dd7f8b272555a142097e4c53b857334af",
        "md5": "da4c4be61cf00b1dcbc9f92897af804a",
        "sha256": "4222884dec6c3e8ed6b593581f3d49e6feeb3aa68eb3ba54da1c54839183768f"
      },
      "downloads": -1,
      "filename": "termicod-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "da4c4be61cf00b1dcbc9f92897af804a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5167,
      "upload_time": "2023-01-09T07:00:24",
      "upload_time_iso_8601": "2023-01-09T07:00:24.767582Z",
      "url": "https://files.pythonhosted.org/packages/a7/b0/e30d7c2faace1a0076c2ccaf153dd7f8b272555a142097e4c53b857334af/termicod-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}