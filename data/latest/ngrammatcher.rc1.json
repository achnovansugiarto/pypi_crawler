{
  "info": {
    "author": "Teryn Jones",
    "author_email": "tkjones93@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "============\nNGramMatcher\n============\n\n.. image:: https://badge.fury.io/py/ngrammatcher.svg\n    :target: https://badge.fury.io/py/ngrammatcher\n    :alt: Version\n\n.. image:: https://coveralls.io/repos/github/jwnz/ngrammatcher/badge.svg?branch=master\n    :target: https://coveralls.io/github/jwnz/ngrammatcher?branch=master\n    :alt: Test coverage\n\n.. image:: https://img.shields.io/badge/License-MIT-green.svg\n    :target: https://github.com/jwnz/ngrammatcher/blob/master/LICENSE\n    :alt: license\n\n\n`NGramMatcher <https://github.com/jwnz/ngrammatcher?branch=master>`_ is a module that can be used to extract n-grams, tokens, or keywords from a list of tokens.\n\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install ngrammatcher\n\n\nUsage\n-----\n\nOverview\n\n.. code-block:: python\n\n    from ngrammatcher import NGramMatcher\n\n    # init NgramMatcher object\n    ngm = NGramMatcher()\n\n    # add ngrams and their corresponding data\n    ngm.insert_ngram(['programming','language'], 'programming language')\n    ngm.insert_ngram(['Python'], 'Python')\n\n    # match ngrams\n    ngm.match_ngrams(['Python', 'is', 'a', 'programming', 'language'])\n    # ['Python', 'programming language']\n\nAdding n-grams\n\n.. code-block:: python\n\n    from ngrammatcher import NGramMatcher\n    ngm = NGramMatcher()\n\n    # You can add n-grams of any size\n    ngm.insert_ngram(['programming','language'], 'programming language') # 2-gram\n    ngm.insert_ngram(['Python'], 'Python') # 1-gram\n    ngm.insert_ngram(['a']*10000, 'a'*10000) # 10_000-gram\n\n    # you can map any kind of data to an n-gram\n    data = {\n        'word': 'programming language',\n        'wikipedia': 'https://en.wikipedia.org/wiki/Programming_language'\n        'desc': 'A programming language is any set of rules that converts...'\n    }\n    ngm.insert_ngram(['programming', 'language'], data)\n\n    # you can also insert n-grams using dictionary sytax\n    ngm[['c','plus','plus']] = 'c++'\n\n    # or add words\n    ngm.insert_ngram(list('test'), 'test')\n\n\nFinding n-grams\n\n.. code-block:: python\n\n    from ngrammatcher import NGramMatcher\n    ngm = NGramMatcher()\n    ngm.insert_ngram(['programming','language'], 'programming language')\n    ngm.insert_ngram(['Python'], 'Python')\n\n    # here we will use spacy to create tokens\n    import spacy\n    nlp = spacy.load('en_core_web_lg')\n    text = 'Python is a programming language'\n\n    tokens = [tok.text for tok in nlp(text)]\n\n    # find n-grams\n    ngm.match_ngrams(tokens)\n    # ['Python', 'programming language']\n\nAdditional Functionality\n\n.. code-block:: python\n\n    from ngrammatcher import NGramMatcher\n    ngm = NGramMatcher()\n    ngm.insert_ngram(['programming','language'], 'programming language')\n    ngm.insert_ngram(['Python'], 'Python')\n\n    # get all n-grams in the trie\n    ngm.get_all_ngrams()\n    # [(['Python'], 'Python'), (['programming', 'language'], 'programming language')]\n\n    # you can exclude the data object too\n    ngm.get_all_ngrams(keys_only=True) \n    # [['Python'], ['programming', 'language']]\n\n    # delete n-grams (returns True if deleted, False otherwise)\n    ngm.delete_ngram(['Python'])\n    # True\n\n\n    # Additional Quality-of-Life functionality\n    len(ngm) # get the number of n-grams in trie\n\n    ['programming', 'language'] in ngm # check if n-gram is in trie\n\n    ngm[['programming', 'language']] = 'PL' # insert an n-gram into the trie\n\n    ngm[['programming', 'language']] # get the data for a specific n-gram\n\n    del ngm[['programming', 'language']] # delete an ngram using del\n    \n\n\n\nTest\n----\n.. code-block:: bash\n\n     $ git clone https://github.com/jwnz/ngrammatcher\n     $ cd ngrammatcher\n     $ pip install pytest\n     $ python setup.py test",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jwnz/ngrammatcher",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ngrammatcher",
    "package_url": "https://pypi.org/project/ngrammatcher/",
    "platform": "any",
    "project_url": "https://pypi.org/project/ngrammatcher/",
    "project_urls": {
      "Homepage": "http://github.com/jwnz/ngrammatcher"
    },
    "release_url": "https://pypi.org/project/ngrammatcher/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Matches pre-defined ngrams from a given list of words/tokens.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14304466,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "066087a4cc31d524a3deaa7828a30b5fda43db35f3a10d9fd2c6f4a6e7da0878",
          "md5": "79c5e0d06ad2726236c617ca6bdc0c79",
          "sha256": "8a5935839dd2fbbf2da0483b39472445073176c63c26a7155c7b99aa55b42a87"
        },
        "downloads": -1,
        "filename": "ngrammatcher-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "79c5e0d06ad2726236c617ca6bdc0c79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6742,
        "upload_time": "2022-07-01T06:16:23",
        "upload_time_iso_8601": "2022-07-01T06:16:23.825234Z",
        "url": "https://files.pythonhosted.org/packages/06/60/87a4cc31d524a3deaa7828a30b5fda43db35f3a10d9fd2c6f4a6e7da0878/ngrammatcher-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "066087a4cc31d524a3deaa7828a30b5fda43db35f3a10d9fd2c6f4a6e7da0878",
        "md5": "79c5e0d06ad2726236c617ca6bdc0c79",
        "sha256": "8a5935839dd2fbbf2da0483b39472445073176c63c26a7155c7b99aa55b42a87"
      },
      "downloads": -1,
      "filename": "ngrammatcher-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "79c5e0d06ad2726236c617ca6bdc0c79",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6742,
      "upload_time": "2022-07-01T06:16:23",
      "upload_time_iso_8601": "2022-07-01T06:16:23.825234Z",
      "url": "https://files.pythonhosted.org/packages/06/60/87a4cc31d524a3deaa7828a30b5fda43db35f3a10d9fd2c6f4a6e7da0878/ngrammatcher-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}