{
  "info": {
    "author": "Şuayip Üzülmez",
    "author_email": "suayip.541@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# quizz\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![codecov](https://codecov.io/gh/realsuayip/quizz/branch/master/graph/badge.svg?token=CKUP39Y2IW)](https://codecov.io/gh/realsuayip/quizz)\n\nWrappers around Python's print and input functions to create question/answer themed command line applications. See\n[examples](examples) folder for real life applications.\n\n# Documentation\n\n### Installation\n\nSimply install using pip:\n\n    pip install quizz\n\nquizz supports Python version 3.7 and onwards.\n\n### Basic usage\n\nHere is a basic snippet. It will prompt for the user's name and\noutput it in a formatted sentence, try running it yourself:\n\n```python\nfrom quizz import Question\n\nquestion = Question(\"What is your name?\")\nquestion.ask()\n\nprint(\"Your name is: \" + question.answer)\n```\n\nAs you can see, this is not very useful. We could have constructed same\nprogram with `input` function as well. As we discover more on `Question`\nwe will see how to exploit it to construct more useful question clauses.\nIf you run this snippet you will see that it behaves a bit different from\n`input` function:\n\n* It will re-ask the question in case of an empty answer\n* It will strip spaces from the answer\n\nThis is due to default `Question` configuration (namely question scheme).\nThese behaviour can be customized and respectively correspond to\n`required` and `strip` fields.\n\n### Question fields\n\nThere are bunch of fields that define a behaviour of a question. Lets\nsee each of these options and what they do:\n\n##### prompt\nThe prompt of the question.\n\n##### validators\nA list that contains validators or callable objects which will validate the given answers.\nSee Validators section to learn more.\n\n##### options\nList of `Option` objects. See Options section to learn more.\n\n##### commands\nA list that contains `Command` classes or objects. These commands will be available\nin this questions context. See Commands section to learn more.\n\n##### correct_answers\nA list of strings that are counted as correct answers. The value `has_correct_answer`\nof `Question` objects will depend on this list. If the correct answer is an `Option`\nobject, the string must correspond to `value` of the option rather than the `expression`.\n\nExample:\n\n```python\nquestion = Question(\"1+2?\", correct_answers=[\"3\"])\nquestion.ask()\n\n# Assuming the answer was correct, this will be True:\nis_correct = question.has_correct_answer\n```\n\n##### extra\nA user defined dictionary that contains any other extra information about the question.\nThis is useful especially in a `Quiz` context if you want to create relations between\nquestions with any arbitrary data. For example, let's say you set up a quiz in which\neach question has its own points. In this case you can assign point value to each question\nthrough this field.\n\n##### required `True`\nA boolean, if `True` marks the question as required. Required questions will be asked\nuntil the user provides a non-empty input. Otherwise the question can be left blank (in which\ncase the answer attribute of the question object will be None).\n\n##### strip `True`\nA boolean, if set to `True` will call `strip` function for the given input.\n\n##### suffix\nA string that will be appended to the given prompt.\n\n##### prefix\nA string that will be prepended to the given prompt.\n\n##### command_delimiter `!`\nA string that will mark the start of a command. See Commands section to learn more.\n\n##### option_indicator `) `\nA string that will determines the indicator for options. For example if set\nto `]` options will be outputted as `value] expression`\n\n#### MultipleChoiceQuestion specific fields\n\n##### choices\nA list of strings from which `Option` objects will be generated and added to\nthe question object. The values of options will be determined by the `style`\nor `style_iterator` fields.\n\n##### style `letter`\nA string that will determine the style of option values. It can be one of these:\n`letter`, `letter_uppercase`, `number`, `number_fromzero`. These styles are quite self\nexplanatory.\n\n##### style_iterator\nAn iterable that will determine the style of option values. If provided, this will\noverride `style` field. Useful if you want a custom style.\n\n##### display `horizontal`\nThe display style of options and values. Built-in displays are `horizontal` and `vertical`.\nYou may implement your own display by extending MultipleChoiceQuestion. See extending section\nto learn more.\n\n### Scheme objects\n\nAs it can be seen, there are quite several fields to define a behaviour of `Question`.\nBut this can be tedious if you want to use same fields for multiple questions.\nThis is where `Scheme` objects come in handy. `Scheme` objects can be defined just like\n`Question` objects, expect `prompt` field is not required. For example:\n\n````python\nmy_scheme = Scheme(required=False, commands=[Help, Skip])\nquestion = Question(\"Howdy?\", scheme=my_scheme)\n````\n\nYou can also pass fields for `Question` even if you assign a scheme. In such case,\nimmutable fields will be overridden. Lists and dictionaries will be extended.\nIf there is a key clash in dictionary, the value given in `Question` field will be used instead.\nIf the value of field defined in `Scheme` is `None` it will be discarded (fields of `Question` will be used).\nThis behaviour is also true when applying multiple schemes.\n\nQuizzes can also take scheme objects. In that case, each question in the\nquiz will have the scheme object mounted *after their initialization*. So,\nfor a ``Question`` **the order of** scheme mounting can be described as:\n\n    Question fields > Scheme of the Question > Scheme of Quiz\n\nKeep in mind that a particular scheme will only get mounted once,\nif you want to mount a scheme twice for any reason, you have to use `update_scheme` and `update`\nmethods while `force` and `force_scheme` keyword arguments set to `True`, respectively in the\ncontexts of `Question` and `Quiz`.\n\n### Option objects\nMajority of the time, the answer to a question needs to be selected from\na set of options. `Option` class is the way of defining these options. For\nexample:\n\n````python\nyes, no = Option(value=\"y\", expression=\"Yes\"), Option(value=\"n\", expression=\"No\")\n\nquestion = Question(\"Are you OK?\", options=[yes, no])\nquestion.ask()\n\n# The answer will be an Option object (yes, no)\nanswer = question.answer\n````\nIn the example above, if the user inputs anything other than option\nvalues (\"y\" and \"n\"), a `ValidationError` will occur internally and\nthe question will be re-asked.\n\nIncluding `options` means that the question will no longer accept non-option answers,\nwhile the validators passed through the related field will be discarded.\nAlso, notice that the answer is set as an `Option` object, not `str`. All of these behaviour\ncan be changed by overriding the `validate` and `match_option` methods of `Question`.\n\nKeep in mind that the field `correct_answers` uses the **value** of\nthe `Option` to determine whether it is correct or not. This design is so,\nbecause you might not always have the `Option` object around as you most likely\ngenerate it in-line through list comprehensions; just like in the case\nof `MultipleChoiceQuestion`. If this doesn't convince you, this behaviour\ncan be changed by overriding `has_correct_answer` property method of `Question`.\n\n### Question objects\n\nLet's inspect question objects to find out what we can do with them\nbefore and after the answer has been given.\n\n##### Basic attributes\n\n| Attribute      | Description |\n| ----------- | ----------- |\n| answer      | The answer given to this question, set to `None` in case of no/empty answer.\n| attempt     | Number of answer attempts this question had. Attempts increase when the question gets re-asked for any reason (e.g. validation errors).\n| quiz        | The `Quiz` this question belongs to. Set to `None` if not found in a quiz context.\n| sequence    | Index of this question in an assigned `Quiz`.\n| mounted_schemes | List of schemes that are applied to this question (by any means).\n| has_answer  | Shorthand for: ```question.answer is not None```\n| has_correct_answer | Returns a boolean indicating whether the given answer is found in `correct_answers` field.\n\n##### Basic methods\n| Method      | Description |\n| ----------- | ----------- |\n| ask         | Asks the questions by calling the `input` function internally.\n| update_scheme(scheme, force) | Mount given scheme object. If `force` set to `True`, signature of the scheme will be ignored.\n\n##### Signal mechanisms\n\nQuestions can get attributes that points to a callable. This callable will be called depending\non the the type of attribute you set. We will call these *signals*. There are currently 2 signals that\ncan be assigned to a question: `pre_ask` and `post_answer`. As their names suggest, these signals will\nbe executed just before the question is asked and when the answer attribute is set, respectively.\nThese signals take one argument, the `Question` object. For example:\n\n````python\nquestion = Question(\"Howdy?\")\n\n# Set post_answer signal so that the answer is outputted\n# just as the answer is set\nquestion.post_answer = lambda q: print(q.answer)\nquestion.ask()\n````\n\nSignals can be helpful especially in a quiz context where the order\nof questions might be undetermined. If you want to attach a signal\nto many questions, the example above might be a bit tedious. In such\na case, you can inherit from `Question` and implement\n`post_answer` (or whichever signal you like) as a **staticmethod**.\n\n##### Other notes regarding Question objects\n\n* Avoid using `options` for MultipleChoiceQuestion as the\nwhole purpose of this class is to abstract away the\nwork on `Option` objects (through `choices`). However, `options`\nand `choices` are compatible and can be used together.\n\n* Do not refrain from extending/overriding `Question` classes\nto add functionality apt to your purposes. They are\ndesigned to be extendable.\n\n### Quiz objects\n\nQuiz objects are the way of packing a set of questions together. These\nobjects are very useful if you want to build a test-like structure, which\nis generally the case. Apart from asking questions sequentially Quiz objects also\nprovide these functionality:\n\n* Allows for commands such as `Next`, `Previous` and `Jump` to traverse through questions.\n* Tracks whether each required or non-required questions are answered via attributes\n`is_ready` and `is_done`, and outputs an info message in appropriate situations.\n\n##### Basic attributes\n\n| Attribute      | Description |\n| ----------- | ----------- |\n| index | The sequence of question that is being (or going to be) asked.\n| inquiries | The sum of attempts of questions.\n| questions | The list of questions on this quiz.\n| scheme | The scheme of this Quiz, if none specified during initialization, this will be the default scheme.\n| is_done | A boolean that indicates whether all the questions on the quiz has an answer.\n| is_ready | Similar to `is_done`, but for required questions only.\n| required_questions | List of required questions.\n| min_inquiries | Minimum number of `Question` attempts needed before the quiz can be finished.\n\n\n##### Basic methods\n| Method      | Description |\n| ----------- | ----------- |\n| start       | Starts the quiz by asking the first question.\n| update(force_scheme) | Assigns the `Quiz` object for each question on the quiz, along with its scheme. You need to call this if you mutate the list of questions after initialization.\n\n### Commands\n\nCommands are provided per-question basis, and they are the way of providing\nmeta. Commands can be executed via specified command delimiter (default `!`), and\nneed to be present (as classes or objects) in `commands` field.\nYou can create your own commands through `Command` class. Commands return an\nopcode (through `opcodes` enum) which determines what to do after the execution.\nHere are the available opcodes and what they do:\n\n\n| opcode      | Description |\n| ----------- | ----------- |\n| `CONTINUE` | Re-asks the question.\n| `BREAK` | Break out of the question loop, thus end the input stream.\n| `JUMP`  | `Quiz` Return this along with a question sequence to ask that question next.\n\nAside from these opcodes, you can also return nothing (`None`), in which case\nthe question will not be re-asked unless it is required.\n\n##### Built-in commands\n\n| Command      | Expression | Description | opcode(s) returned |\n| ----------- | ----------- | ------ |  ---------- |\n| `Skip`      | skip | Set the answer of this question to `None` | `None`\n| `Quit`      | quit | Calls `sys.exit(0)`, thus exiting the whole program. | N/A\n| `Help(message=\"\", with_command_list=True)` | help | Outputs given help message. If `with_command_list` is set to `True`, it will also output list of available commands with their description. | `CONTINUE`\n| `Jump` | jump \\<seq\\> | Jumps to specified question. | `JUMP`\n| `Next` | next | Jumps to next question. | `JUMP`\n| `Previous` | previous | Jumps to previous question. | `JUMP`\n| `Finish` | finish | Ends the quiz provided that all the required questions are answered. | `BREAK` or `CONTINUE`\n| `Answers` | answers | Outputs the current answers for each question in the quiz. | `CONTINUE`\n\n### Validators\n\nValidators validate the input given to a question. `ValidationError` is the\nexception class to be raised when the given input is not valid. Here is an\nexample implementation of a validator:\n\n````python\nfrom quizz import ValidationError, Question\n\ndef validate_word_count(answer):\n    # Check if the answer has at least 5 words.\n    count = len(answer.split())\n\n    if count < 5:\n        raise ValidationError(\"Your answer needs at least 5 words!\")\n\nquestion = Question(\"Name 5 or more mammals.\", validators=[validate_word_count])\n````\n\nThe example above will check if the word has at least 5 words. If the\nuser inputs a non-valid string the question will be re-asked until a\nvalid answer has been given.\n\nQuizz also provides class-based validators (from which all the built-in validators\ninherit). You can use `Validator` class to create your own class-based validators, which\ncan also take arguments.\n\n##### Built-in validators\n\nBuilt-in validators are:\n\n* `MaxLengthValidator`\n* `MinLengthValidator`\n* `AlphaValidator`\n* `AlphaNumericValidator`\n* `DigitValidator`\n* `RegexValidator`\n\nBy default, class based validators take two keyword arguments: `against` and `message`.\n`against` is the value to be tested against, for example `MaxLengthValidator`'s max\nlength or  `RegexValidator`'s regex pattern.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/realsuayip/quizz",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quizz",
    "package_url": "https://pypi.org/project/quizz/",
    "platform": null,
    "project_url": "https://pypi.org/project/quizz/",
    "project_urls": {
      "Homepage": "https://github.com/realsuayip/quizz"
    },
    "release_url": "https://pypi.org/project/quizz/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Wrappers around Python's print and input functions to create question/answer themed command line applications.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17132868,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54558d743bf35c584b32bc4c743c5c658bea80d403c650472eaca5ff67dc8868",
          "md5": "b9bfaa96d68f7cd55259423ad649d47a",
          "sha256": "fdf40c8319c0f55913e41035f5ce0c43669f0a334b22780d3af7ce59b9eae242"
        },
        "downloads": -1,
        "filename": "quizz-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9bfaa96d68f7cd55259423ad649d47a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21728,
        "upload_time": "2020-11-22T12:47:29",
        "upload_time_iso_8601": "2020-11-22T12:47:29.416790Z",
        "url": "https://files.pythonhosted.org/packages/54/55/8d743bf35c584b32bc4c743c5c658bea80d403c650472eaca5ff67dc8868/quizz-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9c8c1a9c2b6474640bf309a643eb7b7889cda7be495e15381e62ef1b25e9a6a",
          "md5": "8ef33e2c6e742af1cd4fc9c886deabd1",
          "sha256": "3a644dfdd520cf91cb216cbd0e67165b2730bede5f038c46f9c452de4c501a5d"
        },
        "downloads": -1,
        "filename": "quizz-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8ef33e2c6e742af1cd4fc9c886deabd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9084,
        "upload_time": "2020-11-22T12:47:30",
        "upload_time_iso_8601": "2020-11-22T12:47:30.898415Z",
        "url": "https://files.pythonhosted.org/packages/c9/c8/c1a9c2b6474640bf309a643eb7b7889cda7be495e15381e62ef1b25e9a6a/quizz-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa46a3bf2100f45f2ea90edebe9a4aa2472d12e91fdf16b0eb99587e1b47d703",
          "md5": "f476d3ba9b579849b9223debe27ba862",
          "sha256": "6c9cee0e5f0a16029ded6d6a03e1af4d39776e4fb457710565ea3498bb44e93f"
        },
        "downloads": -1,
        "filename": "quizz-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f476d3ba9b579849b9223debe27ba862",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27503,
        "upload_time": "2020-12-18T14:57:42",
        "upload_time_iso_8601": "2020-12-18T14:57:42.603681Z",
        "url": "https://files.pythonhosted.org/packages/aa/46/a3bf2100f45f2ea90edebe9a4aa2472d12e91fdf16b0eb99587e1b47d703/quizz-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98feba545b2895a64f37809b139866a34525dcf705c7610dff09cc9132bf3c3a",
          "md5": "148294c5ed362602b0f8d21434880da5",
          "sha256": "b870b2f518816ea2797617c3ba275db9c74f228eea82cfe35864564eb7185bd8"
        },
        "downloads": -1,
        "filename": "quizz-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "148294c5ed362602b0f8d21434880da5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19560,
        "upload_time": "2020-12-18T14:57:44",
        "upload_time_iso_8601": "2020-12-18T14:57:44.369397Z",
        "url": "https://files.pythonhosted.org/packages/98/fe/ba545b2895a64f37809b139866a34525dcf705c7610dff09cc9132bf3c3a/quizz-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c4849f580fea49b412e6f859ab88d7e7d570393a8567aefccbe8936ee04a2a9",
          "md5": "46de437d3859c9ac50ca4fd9a70a356d",
          "sha256": "e4683b3674183b54d9df85d28dd11908f9578fd95ee8a7b687d909649b5ae942"
        },
        "downloads": -1,
        "filename": "quizz-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46de437d3859c9ac50ca4fd9a70a356d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27438,
        "upload_time": "2020-12-19T15:07:00",
        "upload_time_iso_8601": "2020-12-19T15:07:00.241285Z",
        "url": "https://files.pythonhosted.org/packages/9c/48/49f580fea49b412e6f859ab88d7e7d570393a8567aefccbe8936ee04a2a9/quizz-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8146cca786c209a82bf7c773d80748a9a7346b7a1b2ca56dd16a88eb614d206",
          "md5": "ee09479b68a16a228b960e5fc5310e7a",
          "sha256": "6719744536625efd5f07262a60a2bf679df15e9151e410be54d79ef21361fd9a"
        },
        "downloads": -1,
        "filename": "quizz-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ee09479b68a16a228b960e5fc5310e7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19432,
        "upload_time": "2020-12-19T15:07:02",
        "upload_time_iso_8601": "2020-12-19T15:07:02.613181Z",
        "url": "https://files.pythonhosted.org/packages/b8/14/6cca786c209a82bf7c773d80748a9a7346b7a1b2ca56dd16a88eb614d206/quizz-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a89979afccc9561ee27a531fd199d0da8fd1f6e567d8a9886836a7cea8ed4bb5",
          "md5": "5686fb3ff63c3687f8af3e34b81dc7a8",
          "sha256": "3b8bf2548470855e9f65f1f520794f1121581db19a13db63d61e746c1f3346c5"
        },
        "downloads": -1,
        "filename": "quizz-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5686fb3ff63c3687f8af3e34b81dc7a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27608,
        "upload_time": "2020-12-29T11:05:58",
        "upload_time_iso_8601": "2020-12-29T11:05:58.033569Z",
        "url": "https://files.pythonhosted.org/packages/a8/99/79afccc9561ee27a531fd199d0da8fd1f6e567d8a9886836a7cea8ed4bb5/quizz-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67a1ca8ba1070a2d896811c86a04cefcd5d23374eeff82a953f6d0b99610eeee",
          "md5": "cbabe501a4506b053f49ef75b5ea6c30",
          "sha256": "75369681d79c1f4e62cfc59a84592447ea2cfc56af8914760e8299b92ae1c076"
        },
        "downloads": -1,
        "filename": "quizz-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cbabe501a4506b053f49ef75b5ea6c30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19609,
        "upload_time": "2020-12-29T11:06:00",
        "upload_time_iso_8601": "2020-12-29T11:06:00.342270Z",
        "url": "https://files.pythonhosted.org/packages/67/a1/ca8ba1070a2d896811c86a04cefcd5d23374eeff82a953f6d0b99610eeee/quizz-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a95f03c5a7f65a83e0169c78c18defd22b9d89e7fb928462e9fab2421194f162",
          "md5": "ecd5f7878d9a6c07279d278b229886cc",
          "sha256": "87510641c7d440bed2c3cb768b4a4550e1fba3abda8afb6db9349997f11f5e2b"
        },
        "downloads": -1,
        "filename": "quizz-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ecd5f7878d9a6c07279d278b229886cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26197,
        "upload_time": "2023-03-02T18:53:56",
        "upload_time_iso_8601": "2023-03-02T18:53:56.568672Z",
        "url": "https://files.pythonhosted.org/packages/a9/5f/03c5a7f65a83e0169c78c18defd22b9d89e7fb928462e9fab2421194f162/quizz-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2feeed918fef01add27bb3cfd9da1c57be06eef037806009ff09cb8e29caecaf",
          "md5": "3e2988b91ca495846f1e4079e7d7dbb2",
          "sha256": "f2a3730a6fcf0f4544546172e4960f905ebe1c75d51ccf599ba6bbb83cad7a9f"
        },
        "downloads": -1,
        "filename": "quizz-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3e2988b91ca495846f1e4079e7d7dbb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30568,
        "upload_time": "2023-03-02T18:53:58",
        "upload_time_iso_8601": "2023-03-02T18:53:58.796648Z",
        "url": "https://files.pythonhosted.org/packages/2f/ee/ed918fef01add27bb3cfd9da1c57be06eef037806009ff09cb8e29caecaf/quizz-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a95f03c5a7f65a83e0169c78c18defd22b9d89e7fb928462e9fab2421194f162",
        "md5": "ecd5f7878d9a6c07279d278b229886cc",
        "sha256": "87510641c7d440bed2c3cb768b4a4550e1fba3abda8afb6db9349997f11f5e2b"
      },
      "downloads": -1,
      "filename": "quizz-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ecd5f7878d9a6c07279d278b229886cc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 26197,
      "upload_time": "2023-03-02T18:53:56",
      "upload_time_iso_8601": "2023-03-02T18:53:56.568672Z",
      "url": "https://files.pythonhosted.org/packages/a9/5f/03c5a7f65a83e0169c78c18defd22b9d89e7fb928462e9fab2421194f162/quizz-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2feeed918fef01add27bb3cfd9da1c57be06eef037806009ff09cb8e29caecaf",
        "md5": "3e2988b91ca495846f1e4079e7d7dbb2",
        "sha256": "f2a3730a6fcf0f4544546172e4960f905ebe1c75d51ccf599ba6bbb83cad7a9f"
      },
      "downloads": -1,
      "filename": "quizz-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3e2988b91ca495846f1e4079e7d7dbb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 30568,
      "upload_time": "2023-03-02T18:53:58",
      "upload_time_iso_8601": "2023-03-02T18:53:58.796648Z",
      "url": "https://files.pythonhosted.org/packages/2f/ee/ed918fef01add27bb3cfd9da1c57be06eef037806009ff09cb8e29caecaf/quizz-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}