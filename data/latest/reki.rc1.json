{
  "info": {
    "author": "perillaroc",
    "author_email": "perillaroc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# reki\n\n\n\nA data tool for CEMC.\n\n\n\nLoad GRIB2 data using [eccodes](https://github.com/ecmwf/eccodes-python)\n\nor [cfgrib](https://github.com/ecmwf/cfgrib).\n\n\n\n## Installation\n\n\n\nDownload the latest source code from GitHub and install using `pip`.\n\n\n\nIf you are using system python, such as `apps/python/3.6.3/gnu` on HPC CMA-PI,\n\nplease use `--user` option to install on user directory.\n\n\n\n`reki` uses ecCodes to decode GRIB files\n\n(which is needed by [eccodes](https://github.com/ecmwf/eccodes-python) and [cfgrib](https://github.com/ecmwf/cfgrib)). \n\nPlease install ecCodes through conda or other package source.\n\n\n\n## Getting started\n\n\n\n`reki` has several functions to help users to find one filed from a local GRIB 2 file.\n\n\n\n`load_message_from_file` from `reki.format.grib.eccodes` returns a GRIB handler.\n\nUsers can use it to get attrs or values with functions from [eccodes](https://github.com/ecmwf/eccodes-python) .\n\n\n\nFor example, load 850hPa temperature from GRAPES GFS and get values from the returned message.\n\n\n\n```pycon\n\n>>> from reki.format.grib.eccodes import load_message_from_file\n\n>>> t = load_message_from_file(\n\n...     file_path=\"/g1/COMMONDATA/OPER/NWPC/GRAPES_GFS_GMF/Prod-grib/2020031721/ORIG/gmf.gra.2020031800105.grb2\",\n\n...     parameter=\"t\",\n\n...     level_type=\"isobaricInhPa\",\n\n...     level=850,\n\n... )\n\n>>> data = eccodes.codes_get_double_array(t, \"values\")\n\n>>> data = data.reshape([720, 1440])\n\n>>> data\n\narray([[249.19234375, 249.16234375, 249.16234375, ..., 249.15234375,\n\n    249.19234375, 249.14234375],\n\n   [249.45234375, 249.45234375, 249.42234375, ..., 249.45234375,\n\n    249.44234375, 249.44234375],\n\n   [249.69234375, 249.68234375, 249.68234375, ..., 249.70234375,\n\n    249.67234375, 249.68234375],\n\n   ...,\n\n   [235.33234375, 235.45234375, 235.62234375, ..., 235.47234375,\n\n    235.63234375, 235.48234375],\n\n   [235.78234375, 235.91234375, 235.64234375, ..., 235.80234375,\n\n    235.72234375, 235.82234375],\n\n   [235.66234375, 235.86234375, 235.82234375, ..., 235.85234375,\n\n    235.68234375, 235.70234375]])\n\n```\n\n\n\n**NOTE**: Please release the handler using `eccodes.codes_release` manually.\n\n\n\n`eccodes` engine also provides some functions to load array from GRIB2 file\n\nin which GRIB2 message is loaded by [eccodes-python](https://github.com/ecmwf/eccodes-python)\n\nand converted into `xarray.DataArray` by `nwpc-data`.\n\n\n\n**WARNING**: This feature is under construction.\n\n\n\n```pycon\n\n>>> from reki.format.grib.eccodes import load_field_from_file\n\n>>> load_field_from_file(\n\n...     file_path=\"/sstorage1/COMMONDATA/OPER/NWPC/GRAPES_GFS_GMF/Prod-grib/2020031721/ORIG/gmf.gra.2020031800105.grb2\",\n\n...     parameter=\"t\",\n\n...     level_type=\"isobaricInhPa\",\n\n...     level=850,\n\n... )\n\n<xarray.DataArray 't' (latitude: 720, longitude: 1440)>\n\narray([[249.19234375, 249.16234375, 249.16234375, ..., 249.15234375,\n\n        249.19234375, 249.14234375],\n\n       [249.45234375, 249.45234375, 249.42234375, ..., 249.45234375,\n\n        249.44234375, 249.44234375],\n\n       [249.69234375, 249.68234375, 249.68234375, ..., 249.70234375,\n\n        249.67234375, 249.68234375],\n\n       ...,\n\n       [235.33234375, 235.45234375, 235.62234375, ..., 235.47234375,\n\n        235.63234375, 235.48234375],\n\n       [235.78234375, 235.91234375, 235.64234375, ..., 235.80234375,\n\n        235.72234375, 235.82234375],\n\n       [235.66234375, 235.86234375, 235.82234375, ..., 235.85234375,\n\n        235.68234375, 235.70234375]])\n\nCoordinates:\n\n    time           datetime64[ns] 2020-03-18\n\n    step           timedelta64[ns] 4 days 09:00:00\n\n    valid_time     datetime64[ns] 2020-03-22T09:00:00\n\n    isobaricInhPa  int64 850\n\n  * latitude       (latitude) float64 89.88 89.62 89.38 ... -89.38 -89.62 -89.88\n\n  * longitude      (longitude) float64 0.0 0.25 0.5 0.75 ... 359.2 359.5 359.8\n\nAttributes:\n\n    GRIB_edition:                    2\n\n    GRIB_centre:                     babj\n\n    GRIB_subCentre:                  0\n\n    GRIB_tablesVersion:              4\n\n    GRIB_localTablesVersion:         1\n\n    GRIB_dataType:                   fc\n\n    GRIB_dataDate:                   20200318\n\n    GRIB_dataTime:                   0\n\n    GRIB_validityDate:               20200322\n\n    GRIB_validityTime:               900\n\n    GRIB_step:                       105\n\n    GRIB_stepType:                   instant\n\n    GRIB_stepUnits:                  1\n\n    GRIB_stepRange:                  105\n\n    GRIB_endStep:                    105\n\n    GRIB_name:                       Temperature\n\n    GRIB_shortName:                  t\n\n    GRIB_cfName:                     air_temperature\n\n    GRIB_discipline:                 0\n\n    GRIB_parameterCategory:          0\n\n    GRIB_parameterNumber:            0\n\n    GRIB_gridType:                   regular_ll\n\n    GRIB_gridDefinitionDescription:  Latitude/longitude \n\n    GRIB_typeOfFirstFixedSurface:    pl\n\n    GRIB_typeOfLevel:                isobaricInhPa\n\n    GRIB_level:                      850\n\n    GRIB_numberOfPoints:             1036800\n\n    GRIB_missingValue:               9999\n\n    GRIB_units:                      K\n\n    long_name:                       Temperature\n\n    units:                           K\n\n```\n\n\n\n## Engines\n\n\n\n`reki` loads GRIB2 file using `eccodes` by default and also supports `cfgrib`.\n\n\n\n### cfgrib\n\n\n\nIf you don't care about loading speed, please use [cfgrib](https://github.com/ecmwf/cfgrib) engine\n\nwith option `engine=\"cfgrib\"`.\n\n\n\nPlease install cfgrib before using this engine.\n\n\n\nRead 850hPa temperature from a GRAEPS GFS grib2 file using `shortName` key `t`.\n\n( `shortName` is an ecCodes key. )\n\n\n\n```pycon\n\n>>> load_field_from_file(\n\n...     file_path=\"/g1/COMMONDATA/OPER/NWPC/GRAPES_GFS_GMF/Prod-grib/2020031721/ORIG/gmf.gra.2020031800105.grb2\",\n\n...     parameter=\"t\",\n\n...     level_type=\"isobaricInhPa\",\n\n...     level=850,\n\n...     engine=\"cfgrib\",\n\n... )\n\n<xarray.DataArray 't' (latitude: 720, longitude: 1440)>\n\n[1036800 values with dtype=float32]\n\nCoordinates:\n\n    time           datetime64[ns] ...\n\n    step           timedelta64[ns] ...\n\n    isobaricInhPa  int64 ...\n\n  * latitude       (latitude) float64 89.88 89.62 89.38 ... -89.38 -89.62 -89.88\n\n  * longitude      (longitude) float64 0.0 0.25 0.5 0.75 ... 359.2 359.5 359.8\n\n    valid_time     datetime64[ns] ...\n\nAttributes:\n\n    GRIB_paramId:                             130\n\n    GRIB_shortName:                           t\n\n    GRIB_units:                               K\n\n    GRIB_name:                                Temperature\n\n    GRIB_cfName:                              air_temperature\n\n    GRIB_cfVarName:                           t\n\n    GRIB_dataType:                            fc\n\n    GRIB_missingValue:                        9999\n\n    GRIB_numberOfPoints:                      1036800\n\n    GRIB_typeOfLevel:                         isobaricInhPa\n\n    GRIB_NV:                                  0\n\n    GRIB_stepUnits:                           1\n\n    GRIB_stepType:                            instant\n\n    GRIB_gridType:                            regular_ll\n\n    GRIB_gridDefinitionDescription:           Latitude/longitude\n\n    GRIB_Nx:                                  1440\n\n    GRIB_iDirectionIncrementInDegrees:        0.25\n\n    GRIB_iScansNegatively:                    0\n\n    GRIB_longitudeOfFirstGridPointInDegrees:  0.0\n\n    GRIB_longitudeOfLastGridPointInDegrees:   359.75\n\n    GRIB_Ny:                                  720\n\n    GRIB_jDirectionIncrementInDegrees:        0.25\n\n    GRIB_jPointsAreConsecutive:               0\n\n    GRIB_jScansPositively:                    0\n\n    GRIB_latitudeOfFirstGridPointInDegrees:   89.875\n\n    GRIB_latitudeOfLastGridPointInDegrees:    -89.875\n\n    long_name:                                Temperature\n\n    units:                                    K\n\n    standard_name:                            air_temperature\n\n```\n\n\n\nIf the field doesn't have a `shortName`, use `dict` for `parameter`.\n\n\n\nLoad a filed without shortName.\n\n\n\n```pycon\n\n>>> load_field_from_file(\n\n...     file_path=\"/g1/COMMONDATA/OPER/NWPC/GRAPES_GFS_GMF/Prod-grib/2020031721/ORIG/gmf.gra.2020031800105.grb2\",\n\n...     parameter={\n\n...         \"discipline\": 0,\n\n...         \"parameterCategory\": 2,\n\n...         \"parameterNumber\": 225,\n\n...     },\n\n...     level_type=\"isobaricInhPa\",\n\n...     level=850,\n\n... )\n\n<xarray.DataArray 'paramId_0' (latitude: 720, longitude: 1440)>\n\n[1036800 values with dtype=float32]\n\nCoordinates:\n\n    time           datetime64[ns] ...\n\n    step           timedelta64[ns] ...\n\n    isobaricInhPa  int64 ...\n\n  * latitude       (latitude) float64 89.88 89.62 89.38 ... -89.38 -89.62 -89.88\n\n  * longitude      (longitude) float64 0.0 0.25 0.5 0.75 ... 359.2 359.5 359.8\n\n    valid_time     datetime64[ns] ...\n\nAttributes:\n\n    GRIB_paramId:                             0\n\n    GRIB_dataType:                            fc\n\n    GRIB_missingValue:                        9999\n\n    GRIB_numberOfPoints:                      1036800\n\n    GRIB_typeOfLevel:                         isobaricInhPa\n\n    GRIB_NV:                                  0\n\n    GRIB_stepUnits:                           1\n\n    GRIB_stepType:                            instant\n\n    GRIB_gridType:                            regular_ll\n\n    GRIB_gridDefinitionDescription:           Latitude/longitude\n\n    GRIB_Nx:                                  1440\n\n    GRIB_iDirectionIncrementInDegrees:        0.25\n\n    GRIB_iScansNegatively:                    0\n\n    GRIB_longitudeOfFirstGridPointInDegrees:  0.0\n\n    GRIB_longitudeOfLastGridPointInDegrees:   359.75\n\n    GRIB_Ny:                                  720\n\n    GRIB_jDirectionIncrementInDegrees:        0.25\n\n    GRIB_jPointsAreConsecutive:               0\n\n    GRIB_jScansPositively:                    0\n\n    GRIB_latitudeOfFirstGridPointInDegrees:   89.875\n\n    GRIB_latitudeOfLastGridPointInDegrees:    -89.875\n\n    GRIB_discipline:                          0\n\n    GRIB_parameterCategory:                   2\n\n    GRIB_parameterNumber:                     225\n\n    long_name:                                original GRIB paramId: 0\n\n    units:                                    1\n\n```\n\n\n\n## Examples\n\n\n\nSee `example` directory for more examples.\n\n\n\n## LICENSE\n\n\n\nCopyright &copy; 2020-2021, developers at cemc-oper.\n\n\n\n`reki` is licensed under [GPL v3.0](LICENSE.md)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nwpc-oper/reki",
    "keywords": "cemc data grib2",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "reki",
    "package_url": "https://pypi.org/project/reki/",
    "platform": "",
    "project_url": "https://pypi.org/project/reki/",
    "project_urls": {
      "Documentation": "https://reki.readthedocs.io",
      "Homepage": "https://github.com/nwpc-oper/reki"
    },
    "release_url": "https://pypi.org/project/reki/0.3.0/",
    "requires_dist": [
      "pyyaml",
      "jinja2",
      "numpy",
      "pandas",
      "xarray",
      "dask",
      "click",
      "tqdm",
      "cfgrib ; extra == 'cfgrib'",
      "pytest-cov ; extra == 'cov'",
      "codecov ; extra == 'cov'",
      "protobuf ; extra == 'gdata'",
      "requests ; extra == 'gdata'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "A data tool for CEMC.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12109088,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0db6ff17aeeb891a1524e36541577188551ce269604ecba2f6540f901c0e5705",
          "md5": "573bf7006d6568368b76467cb7005f43",
          "sha256": "9d04c00a6ab7613131786924bf80ad33a945c7c700b08246eee457966886bbf6"
        },
        "downloads": -1,
        "filename": "reki-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "573bf7006d6568368b76467cb7005f43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 77465,
        "upload_time": "2021-11-24T02:42:32",
        "upload_time_iso_8601": "2021-11-24T02:42:32.643918Z",
        "url": "https://files.pythonhosted.org/packages/0d/b6/ff17aeeb891a1524e36541577188551ce269604ecba2f6540f901c0e5705/reki-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7ce2d1855d894776435911d5177b4b0fc2131c261bd011050d91730c9b4082b",
          "md5": "ce036ff2eba8f3f69be582a101598aaf",
          "sha256": "622a5ca70e04b30e0002e39e178687f0f40325ba8c463f68bc4840c712ad1bad"
        },
        "downloads": -1,
        "filename": "reki-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ce036ff2eba8f3f69be582a101598aaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51409,
        "upload_time": "2021-11-24T02:42:34",
        "upload_time_iso_8601": "2021-11-24T02:42:34.643025Z",
        "url": "https://files.pythonhosted.org/packages/a7/ce/2d1855d894776435911d5177b4b0fc2131c261bd011050d91730c9b4082b/reki-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0db6ff17aeeb891a1524e36541577188551ce269604ecba2f6540f901c0e5705",
        "md5": "573bf7006d6568368b76467cb7005f43",
        "sha256": "9d04c00a6ab7613131786924bf80ad33a945c7c700b08246eee457966886bbf6"
      },
      "downloads": -1,
      "filename": "reki-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "573bf7006d6568368b76467cb7005f43",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 77465,
      "upload_time": "2021-11-24T02:42:32",
      "upload_time_iso_8601": "2021-11-24T02:42:32.643918Z",
      "url": "https://files.pythonhosted.org/packages/0d/b6/ff17aeeb891a1524e36541577188551ce269604ecba2f6540f901c0e5705/reki-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7ce2d1855d894776435911d5177b4b0fc2131c261bd011050d91730c9b4082b",
        "md5": "ce036ff2eba8f3f69be582a101598aaf",
        "sha256": "622a5ca70e04b30e0002e39e178687f0f40325ba8c463f68bc4840c712ad1bad"
      },
      "downloads": -1,
      "filename": "reki-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ce036ff2eba8f3f69be582a101598aaf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51409,
      "upload_time": "2021-11-24T02:42:34",
      "upload_time_iso_8601": "2021-11-24T02:42:34.643025Z",
      "url": "https://files.pythonhosted.org/packages/a7/ce/2d1855d894776435911d5177b4b0fc2131c261bd011050d91730c9b4082b/reki-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}