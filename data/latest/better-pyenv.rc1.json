{
  "info": {
    "author": "Hung Dean",
    "author_email": "hngdean@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "# better-pyenv: simplified environment variable parsing\n\n[![Latest version](https://badgen.net/pypi/v/better-pyenv)](https://pypi.org/project/better-pyenv/)\n[![marshmallow 3 compatible](https://badgen.net/badge/marshmallow/3)](https://marshmallow.readthedocs.io/en/latest/upgrading.html)\n[![Black code style](https://badgen.net/badge/code%20style/black/000)](https://github.com/ambv/black)\n\n**better-pyenv** is a Python library for parsing environment variables.\nIt allows you to store configuration separate from your code, as per\n[The Twelve-Factor App](https://12factor.net/config) methodology.\n\n## Contents\n\n- [Features](#features)\n- [Install](#install)\n- [Basic usage](#basic-usage)\n- [Supported types](#supported-types)\n- [Reading .env files](#reading-env-files)\n  - [Reading a specific file](#reading-a-specific-file)\n- [Handling prefixes](#handling-prefixes)\n- [Variable expansion](#variable-expansion)\n- [Validation](#validation)\n- [Deferred validation](#deferred-validation)\n- [Serialization](#serialization)\n- [Defining custom parser behavior](#defining-custom-parser-behavior)\n- [Usage with Flask](#usage-with-flask)\n- [Usage with Django](#usage-with-django)\n- [Why...?](#why)\n  - [Why envvars?](#why-envvars)\n  - [Why not os.environ?](#why-not-osenviron)\n  - [Why another library?](#why-another-library)\n- [License](#license)\n\n## Features\n\n- Type-casting\n- Read `.env` files into `os.environ` (useful for local development)\n- Validation\n- Define custom parser behavior\n- Framework-agnostic, but integrates well with [Flask](#usage-with-flask) and [Django](#usage-with-django)\n\n## Install\n\n    pip install better-pyenv\n\n## Basic usage\n\nWith some environment variables set...\n\n```bash\nexport GITHUB_USER=sloria\nexport MAX_CONNECTIONS=100\nexport SHIP_DATE='1984-06-25'\nexport TTL=42\nexport ENABLE_LOGIN=true\nexport GITHUB_REPOS=webargs,konch,ped\nexport GITHUB_REPO_PRIORITY=\"webargs=2,konch=3\"\nexport COORDINATES=23.3,50.0\nexport LOG_LEVEL=DEBUG\n```\n\nParse them with better-pyenv...\n\n```python\nfrom better_pyenv import Env\n\nenv = Env()\nenv.read_env()  # read .env file, if it exists\n# required variables\ngh_user = env(\"GITHUB_USER\")  # => 'sloria'\nsecret = env(\"SECRET\")  # => raises error if not set\n\n# casting\nmax_connections = env.int(\"MAX_CONNECTIONS\")  # => 100\nship_date = env.date(\"SHIP_DATE\")  # => datetime.date(1984, 6, 25)\nttl = env.timedelta(\"TTL\")  # => datetime.timedelta(0, 42)\nlog_level = env.log_level(\"LOG_LEVEL\")  # => logging.DEBUG\n\n# providing a default value\nenable_login = env.bool(\"ENABLE_LOGIN\", False)  # => True\nenable_feature_x = env.bool(\"ENABLE_FEATURE_X\", False)  # => False\n\n# parsing lists\ngh_repos = env.list(\"GITHUB_REPOS\")  # => ['webargs', 'konch', 'ped']\ncoords = env.list(\"COORDINATES\", subcast=float)  # => [23.3, 50.0]\n\n# parsing dicts\ngh_repos_priorities = env.dict(\n    \"GITHUB_REPO_PRIORITY\", subcast_values=int\n)  # => {'webargs': 2, 'konch': 3}\n```\n\n## Supported types\n\nThe following are all type-casting methods of `Env`:\n\n- `env.str`\n- `env.bool`\n- `env.int`\n- `env.float`\n- `env.decimal`\n- `env.list` (accepts optional `subcast` and `delimiter` keyword arguments)\n- `env.dict` (accepts optional `subcast_keys` and `subcast_values` keyword arguments)\n- `env.json`\n- `env.datetime`\n- `env.date`\n- `env.time`\n- `env.timedelta` (assumes value is an integer in seconds)\n- `env.url`\n- `env.uuid`\n- `env.log_level`\n- `env.path` (casts to a [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html))\n- `env.enum` (casts to any given enum type specified in `type` keyword argument, accepts optional `ignore_case` keyword argument)\n\n## Reading `.env` files\n\n```bash\n# .env\nDEBUG=true\nPORT=4567\n```\n\nCall `Env.read_env` before parsing variables.\n\n```python\nfrom better_pyenv import Env\n\nenv = Env()\n# Read .env into os.environ\nenv.read_env()\n\nenv.bool(\"DEBUG\")  # => True\nenv.int(\"PORT\")  # => 4567\n```\n\n### Reading a specific file\n\nBy default, `Env.read_env` will look for a `.env` file in current\ndirectory and (if no .env exists in the CWD) recurse\nupwards until a `.env` file is found.\n\nYou can also read a specific file:\n\n```python\nfrom better_pyenv import Env\n\nwith open(\".env.test\", \"w\") as fobj:\n    fobj.write(\"A=foo\\n\")\n    fobj.write(\"B=123\\n\")\n\nenv = Env()\nenv.read_env(\".env.test\", recurse=False)\n\nassert env(\"A\") == \"foo\"\nassert env.int(\"B\") == 123\n```\n\n## Handling prefixes\n\n```python\n# export MYAPP_HOST=lolcathost\n# export MYAPP_PORT=3000\n\nwith env.prefixed(\"MYAPP_\"):\n    host = env(\"HOST\", \"localhost\")  # => 'lolcathost'\n    port = env.int(\"PORT\", 5000)  # => 3000\n\n# nested prefixes are also supported:\n\n# export MYAPP_DB_HOST=lolcathost\n# export MYAPP_DB_PORT=10101\n\nwith env.prefixed(\"MYAPP_\"):\n    with env.prefixed(\"DB_\"):\n        db_host = env(\"HOST\", \"lolcathost\")\n        db_port = env.int(\"PORT\", 10101)\n```\n\n## Variable expansion\n\n```python\n# export CONNECTION_URL=https://${USER:-sloria}:${PASSWORD}@${HOST:-localhost}/\n# export PASSWORD=secret\n# export YEAR=${CURRENT_YEAR:-2020}\n\nfrom better_pyenv import Env\n\nenv = Env(expand_vars=True)\n\nconnection_url = env(\"CONNECTION_URL\")  # =>'https://sloria:secret@localhost'\nyear = env.int(\"YEAR\")  # =>2020\n```\n\n## Validation\n\n```python\n# export TTL=-2\n# export NODE_ENV='invalid'\n# export EMAIL='^_^'\n\nfrom better_pyenv import Env\nfrom marshmallow.validate import OneOf, Length, Email\n\nenv = Env()\n\n# simple validator\nenv.int(\"TTL\", validate=lambda n: n > 0)\n# => Environment variable \"TTL\" invalid: ['Invalid value.']\n\n\n# using marshmallow validators\nenv.str(\n    \"NODE_ENV\",\n    validate=OneOf(\n        [\"production\", \"development\"], error=\"NODE_ENV must be one of: {choices}\"\n    ),\n)\n# => Environment variable \"NODE_ENV\" invalid: ['NODE_ENV must be one of: production, development']\n\n# multiple validators\nenv.str(\"EMAIL\", validate=[Length(min=4), Email()])\n# => Environment variable \"EMAIL\" invalid: ['Shorter than minimum length 4.', 'Not a valid email address.']\n```\n\n## Deferred validation\n\nBy default, a validation error is raised immediately upon calling a parser method for an invalid environment variable.\nTo defer validation and raise an exception with the combined error messages for all invalid variables, pass `eager=False` to `Env`.\nCall `env.seal()` after all variables have been parsed.\n\n```python\n# export TTL=-2\n# export NODE_ENV='invalid'\n# export EMAIL='^_^'\n\nfrom better_pyenv import Env\nfrom marshmallow.validate import OneOf, Email, Length, Range\n\nenv = Env(eager=False)\n\nTTL = env.int(\"TTL\", validate=Range(min=0, max=100))\nNODE_ENV = env.str(\n    \"NODE_ENV\",\n    validate=OneOf(\n        [\"production\", \"development\"], error=\"NODE_ENV must be one of: {choices}\"\n    ),\n)\nEMAIL = env.str(\"EMAIL\", validate=[Length(min=4), Email()])\n\nenv.seal()\n# better_pyenv.EnvValidationError: Environment variables invalid: {'TTL': ['Must be greater than or equal to 0 and less than or equal to 100.'], 'NODE_ENV': ['NODE_ENV must be one of: production, development'], 'EMAIL': ['Shorter than minimum length 4.', 'Not a valid email address.']}\n```\n\n`env.seal()` validates all parsed variables and prevents further parsing (calling a parser method will raise an error).\n\n## Serialization\n\n```python\n# serialize to a dictionary of simple types (numbers and strings)\nenv.dump()\n# {'COORDINATES': [23.3, 50.0],\n# 'ENABLE_FEATURE_X': False,\n# 'ENABLE_LOGIN': True,\n# 'GITHUB_REPOS': ['webargs', 'konch', 'ped'],\n# 'GITHUB_USER': 'sloria',\n# 'MAX_CONNECTIONS': 100,\n# 'MYAPP_HOST': 'lolcathost',\n# 'MYAPP_PORT': 3000,\n# 'SHIP_DATE': '1984-06-25',\n# 'TTL': 42}\n```\n\n## Defining custom parser behavior\n\n```python\n# export DOMAIN='http://myapp.com'\n# export COLOR=invalid\n\nfrom furl import furl\n\n# Register a new parser method for paths\n@env.parser_for(\"furl\")\ndef furl_parser(value):\n    return furl(value)\n\n\ndomain = env.furl(\"DOMAIN\")  # => furl('https://myapp.com')\n\n\n# Custom parsers can take extra keyword arguments\n@env.parser_for(\"choice\")\ndef choice_parser(value, choices):\n    if value not in choices:\n        raise better_pyenv.EnvError(\"Invalid!\")\n    return value\n\n\ncolor = env.choice(\"COLOR\", choices=[\"black\"])  # => raises EnvError\n```\n\n## Usage with Flask\n\n```python\n# myapp/settings.py\n\nfrom better_pyenv import Env\n\nenv = Env()\nenv.read_env()\n\n# Override in .env for local development\nDEBUG = env.bool(\"FLASK_DEBUG\", default=False)\n# SECRET_KEY is required\nSECRET_KEY = env.str(\"SECRET_KEY\")\n```\n\nLoad the configuration after you initialize your app.\n\n```python\n# myapp/app.py\n\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_object(\"myapp.settings\")\n```\n\nFor local development, use a `.env` file to override the default\nconfiguration.\n\n```bash\n# .env\nDEBUG=true\nSECRET_KEY=\"not so secret\"\n```\n\nNote: Because better-pyenv depends on [python-dotenv](https://github.com/theskumar/python-dotenv),\nthe `flask` CLI will automatically read .env and .flaskenv files.\n\n## Usage with Django\n\nbetter-pyenv includes a number of helpers for parsing connection URLs. To\ninstall better-pyenv with django support:\n\n    pip install better-pyenv[django]\n\nUse `env.dj_db_url`, `env.dj_cache_url` and `env.dj_email_url` to parse the `DATABASE_URL`, `CACHE_URL`\nand `EMAIL_URL` environment variables, respectively.\n\nFor more details on URL patterns, see the following projects that better-pyenv is using for converting URLs.\n\n- [dj-database-url](https://github.com/jacobian/dj-database-url)\n- [django-cache-url](https://github.com/epicserve/django-cache-url)\n- [dj-email-url](https://github.com/migonzalvar/dj-email-url)\n\nBasic example:\n\n```python\n# myproject/settings.py\nfrom better_pyenv import Env\n\nenv = Env()\nenv.read_env()\n\n# Override in .env for local development\nDEBUG = env.bool(\"DEBUG\", default=False)\n# SECRET_KEY is required\nSECRET_KEY = env.str(\"SECRET_KEY\")\n\n# Parse database URLs, e.g.  \"postgres://localhost:5432/mydb\"\nDATABASES = {\"default\": env.dj_db_url(\"DATABASE_URL\")}\n\n# Parse email URLs, e.g. \"smtp://\"\nemail = env.dj_email_url(\"EMAIL_URL\", default=\"smtp://\")\nEMAIL_HOST = email[\"EMAIL_HOST\"]\nEMAIL_PORT = email[\"EMAIL_PORT\"]\nEMAIL_HOST_PASSWORD = email[\"EMAIL_HOST_PASSWORD\"]\nEMAIL_HOST_USER = email[\"EMAIL_HOST_USER\"]\nEMAIL_USE_TLS = email[\"EMAIL_USE_TLS\"]\n\n# Parse cache URLS, e.g \"redis://localhost:6379/0\"\nCACHES = {\"default\": env.dj_cache_url(\"CACHE_URL\")}\n```\n\nFor local development, use a `.env` file to override the default\nconfiguration.\n\n```bash\n# .env\nDEBUG=true\nSECRET_KEY=\"not so secret\"\n```\n\n\n\n## Why\\...?\n\n### Why envvars?\n\nSee [The 12-factor App](http://12factor.net/config) section on\n[configuration](http://12factor.net/config).\n\n### Why not `os.environ`?\n\nWhile `os.environ` is enough for simple use cases, a typical application\nwill need a way to manipulate and validate raw environment variables.\nbetter-pyenv abstracts common tasks for handling environment variables.\n\nbetter-pyenv will help you\n\n- cast envvars to the correct type\n- specify required envvars\n- define default values\n- validate envvars\n- parse list and dict values\n- parse dates, datetimes, and timedeltas\n- parse expanded variables\n- serialize your configuration to JSON, YAML, etc.\n\n### Why another library?\n\nThere are many great Python libraries for parsing environment variables.\nIn fact, most of the credit for better-pyenv\\' public API goes to the\nauthors of [envparse](https://github.com/rconradharris/envparse) and\n[django-environ](https://github.com/joke2k/django-environ).\n\nbetter-pyenv aims to meet three additional goals:\n\n1.  Make it easy to extend parsing behavior and develop plugins.\n2.  Leverage the deserialization and validation functionality provided\n    by a separate library (marshmallow).\n3.  Clean up redundant API.\n\nSee [this GitHub\nissue](https://github.com/rconradharris/envparse/issues/12#issue-151036722)\nwhich details specific differences with envparse.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "environment variables parsing config configuration 12factor envvars",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "better-pyenv",
    "package_url": "https://pypi.org/project/better-pyenv/",
    "platform": null,
    "project_url": "https://pypi.org/project/better-pyenv/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/better-pyenv/9.5.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "simplified environment variable parsing",
    "version": "9.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14655212,
  "releases": {
    "9.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1900714c9310d1a3a7c5af6b9c452fff24d322ef0df3a24755e4371b8d6ff7d5",
          "md5": "3dea1da6b6742eefcfe464d34d3b73c7",
          "sha256": "025818682d4386735624906f5444b9f39369eb91aa35f6911a52174e3bee10c3"
        },
        "downloads": -1,
        "filename": "better-pyenv-9.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3dea1da6b6742eefcfe464d34d3b73c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20419,
        "upload_time": "2022-08-04T16:49:09",
        "upload_time_iso_8601": "2022-08-04T16:49:09.069236Z",
        "url": "https://files.pythonhosted.org/packages/19/00/714c9310d1a3a7c5af6b9c452fff24d322ef0df3a24755e4371b8d6ff7d5/better-pyenv-9.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1900714c9310d1a3a7c5af6b9c452fff24d322ef0df3a24755e4371b8d6ff7d5",
        "md5": "3dea1da6b6742eefcfe464d34d3b73c7",
        "sha256": "025818682d4386735624906f5444b9f39369eb91aa35f6911a52174e3bee10c3"
      },
      "downloads": -1,
      "filename": "better-pyenv-9.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3dea1da6b6742eefcfe464d34d3b73c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 20419,
      "upload_time": "2022-08-04T16:49:09",
      "upload_time_iso_8601": "2022-08-04T16:49:09.069236Z",
      "url": "https://files.pythonhosted.org/packages/19/00/714c9310d1a3a7c5af6b9c452fff24d322ef0df3a24755e4371b8d6ff7d5/better-pyenv-9.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}