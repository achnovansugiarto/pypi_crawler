{
  "info": {
    "author": "Saksham Sharda, Ben Dichter",
    "author_email": "saksham20.sharda@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SegmentationExtractors\nPython-based module for extracting from, converting between, and handling recorded and optical imaging data from several file formats. Inspired by [SpikeExtractors](https://github.com/SpikeInterface/spikeextractors).\n![image](https://drive.google.com/uc?export=view&id=1bhRA3kyu3SA3k-xWz5psRxLsuP3BJEBg)\n\n## Getting Started:\n#### Installation (<=python3.6) :\n`pip install segmentationextractors`\n#### Installation (>=python3.7) :\nWill need a manual installation for package dependency **SIMA** since it does not currently support python 3.7:\n1.   Download SIMA wheels distribution [here](https://www.lfd.uci.edu/~gohlke/pythonlibs/#sima).\n2.  `pip install <download-path-to-wheels.whl>`\n3.  `pip install segmentationextractors`\n\n## Usage:\n#### Currently supported file types:\n1. [calciumImagingAnalysis](https://github.com/bahanonu/calciumImagingAnalysis) (CNMF-E, EXTRACT),\n2. [SIMA](http://www.losonczylab.org/sima/1.3.2/),\n3. [NWB](https://pynwb.readthedocs.io/en/stable/),\n4. Numpy (a data format for manual input of optical physiology data as various numpy datasets)\n\n#### Functionality:\nInterconversion amongst the various data formats as well as conversion to the NWB format and back.  \n\n#### Features:\n1. SegmentationExtractor object:\n    * `seg_obj.get_channel_names()` :\n    List of optical channel names\n    * `seg_obj.get_num_channels()` :\n    Number of channels\n    * `seg_obj.get_movie_framesize()`:\n    (height, width) of raw movie\n    * `seg_obj.get_movie_location()`:\n    Location of storage of movie/tiff images\n    * `seg_obj.get_image_masks(self, ROI_ids=None)`:\n    Image masks as (ht, wd, num_rois) with each value as the weight given during segmentation operation.\n    * `seg_obj.get_pixel_masks(ROI_ids=None)`:\n    Get pixel masks as (total_pixels(ht*wid), no_rois)\n    * `seg_obj.get_traces(self, ROI_ids=None, start_frame=None, end_frame=None)`:\n    df/F trace as (num_rois, num_frames)\n    * `seg_obj.get_sampling_frequency()`:\n    Sampling frequency of movie/df/F trace.\n    * `seg_obj.get_roi_locations()`:\n    Centroid pixel location of the ROI (Regions Of Interest) as (x,y).\n    * `seg_obj.get_num_rois()`:\n    Total number of ROIs after segmentation operation.  \n    * `seg_obj.get_roi_ids()`:\n    Any integer tags associated with an ROI, defaults to `0:num_of_rois`\n\n#### SegmentationExtractor object creation:\n```\nimport segmentationextractors\nseg_obj_cnmfe = segmentationextractors.CnmfeSegmentationExtractor('cnmfe_filename.mat') # cnmfe\nseg_obj_extract = segmentationextractors.ExtractSegmentationExtractor('extract_filename.mat') # extract\nseg_obj_sima = segmentationextractors.SimaSegmentationExtractor('sima_filename.sima') # SIMA\nseg_obj_numpy = segmentationextractors.NumpySegmentationExtractor(\n                    filepath = 'path-to-file',\n                    masks=np.random.rand(movie_size[0],movie_size[1],no_rois),\n                    signal=np.random.randn(num_rois,num_frames),\n                    roi_idx=np.random.randint(no_rois,size=[1,no_rois]),\n                    no_of_channels=None,\n                    summary_image=None,\n                    channel_names=['Blue']) # Numpy object\nseg_obj_nwb = segmentationextractors.NwbSegmentationExtractor(\n                    filepath_of_nwb, optical_channel_name=None, # optical channel to extract and store info from\n                    imaging_plane_name=None, image_series_name=None, # imaging plane to extract and store data from\n                    processing_module_name=None,\n                    neuron_roi_response_series_name=None, # roi_response_series name to extract and store data from\n                    background_roi_response_series_name=None) # nwb object\n```\n#### Data format conversion: SegmentationExtractor to NWB:\n```    \n    segmentationextractors.NwbSegmentationExtractor.write_recording(seg_obj, saveloc,\n                        propertydict=[{'name': 'ROI feature 1,\n                                       'description': 'additional attribute of each ROI',\n                                       'data': np.random.rand(1,no_rois),\n                                       'id': seg_obj.get_roi_ids()},\n                                      {'name': 'ROI feature 2,\n                                       'description': 'additional attribute of each ROI',\n                                       'data': np.random.rand(1,no_rois),\n                                       'id': seg_obj.get_roi_ids()}],\n                        nwbfile_kwargs={'session_description': 'nwbfiledesc',\n                                        'experimenter': 'experimenter name',\n                                        'lab': 'test lab',\n                                        'session_id': 'test sess id'},\n                        emission_lambda=400.0, excitation_lambda=500.0)\n```\n## Example Datasets:\n  * Example datasets for each of the file formats can be downloaded  [here](https://drive.google.com/drive/folders/1CeDfr6yza_bh0vYD2E1HF_3_S8pg2yLW?usp=sharing).\n\n## Class description:\n\n*  **SegmentationExtractor:**\n  * An abstract class that contains all the meta-data and output data from the ROI segmentation operation when applied to the pre-processed data. It also contains methods to read from and write to various data formats ouput from  the processing pipelines like SIMA, CaImAn, Suite2p, CNNM-E.\n\n*  **NumpySegmentationExtractor:**\n  * NumpySegmentationExtractor objects are built to contain all data coming from a file format for which there is currently no support. To construct this, all data must be entered manually as arguments.\n\n*  **CnmfeSegmentationExtractor:**\n  * This class inherits from the SegmentationExtractor class, having all its funtionality specifically applied to the dataset output from the 'CNMF-E' ROI segmentation method.\n\n*  **ExtractSegmentationExtractor:**\n  * This class inherits from the SegmentationExtractor class, having all its funtionality specifically applied to the dataset output from the 'EXTRACT' ROI segmentation method.\n\n*  **SimaSegmentationExtractor:**\n  * This class inherits from the SegmentationExtractor class, having all its funtionality specifically applied to the dataset output from the 'SIMA' ROI segmentation method.\n\n*  **NwbSegmentationExtractor:**\n  * Class used to extract data from the NWB data format. Also implements a static method to write any format specific object to NWB.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ben-dichter-consulting/segmentationextractors",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "segmentationextractors",
    "package_url": "https://pypi.org/project/segmentationextractors/",
    "platform": "",
    "project_url": "https://pypi.org/project/segmentationextractors/",
    "project_urls": {
      "Homepage": "https://github.com/ben-dichter-consulting/segmentationextractors"
    },
    "release_url": "https://pypi.org/project/segmentationextractors/0.1.0/",
    "requires_dist": [
      "pynwb",
      "sima",
      "dill",
      "lazy-ops"
    ],
    "requires_python": "",
    "summary": "Python module for extracting optical physiology ROIs and traces for various file types and formats",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6692283,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "928a93ea69c1af187b924af3ecda6ef4ed24ee97874d6afa5e88c3e434f5cebe",
          "md5": "ebf65f7adb1443d51bca6462f81c0057",
          "sha256": "2b7ee698edf665584993f8b8cbdc997d28d9ec6ce01f7764b3faa733989c605a"
        },
        "downloads": -1,
        "filename": "segmentationextractors-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebf65f7adb1443d51bca6462f81c0057",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24692,
        "upload_time": "2020-02-24T21:34:26",
        "upload_time_iso_8601": "2020-02-24T21:34:26.648496Z",
        "url": "https://files.pythonhosted.org/packages/92/8a/93ea69c1af187b924af3ecda6ef4ed24ee97874d6afa5e88c3e434f5cebe/segmentationextractors-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dee0c498acd9eed69814959981bb2253a23ca4fed22b0353502da92f1f8fbac3",
          "md5": "4b57e74ccad6bb0ff80634a33abdcaa5",
          "sha256": "c41731d3d4e88542d01ff43deb1b6bb59c9587b8d525fef9f9f3298cf4839e7b"
        },
        "downloads": -1,
        "filename": "segmentationextractors-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b57e74ccad6bb0ff80634a33abdcaa5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19527,
        "upload_time": "2020-02-24T21:34:28",
        "upload_time_iso_8601": "2020-02-24T21:34:28.888051Z",
        "url": "https://files.pythonhosted.org/packages/de/e0/c498acd9eed69814959981bb2253a23ca4fed22b0353502da92f1f8fbac3/segmentationextractors-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "928a93ea69c1af187b924af3ecda6ef4ed24ee97874d6afa5e88c3e434f5cebe",
        "md5": "ebf65f7adb1443d51bca6462f81c0057",
        "sha256": "2b7ee698edf665584993f8b8cbdc997d28d9ec6ce01f7764b3faa733989c605a"
      },
      "downloads": -1,
      "filename": "segmentationextractors-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ebf65f7adb1443d51bca6462f81c0057",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24692,
      "upload_time": "2020-02-24T21:34:26",
      "upload_time_iso_8601": "2020-02-24T21:34:26.648496Z",
      "url": "https://files.pythonhosted.org/packages/92/8a/93ea69c1af187b924af3ecda6ef4ed24ee97874d6afa5e88c3e434f5cebe/segmentationextractors-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dee0c498acd9eed69814959981bb2253a23ca4fed22b0353502da92f1f8fbac3",
        "md5": "4b57e74ccad6bb0ff80634a33abdcaa5",
        "sha256": "c41731d3d4e88542d01ff43deb1b6bb59c9587b8d525fef9f9f3298cf4839e7b"
      },
      "downloads": -1,
      "filename": "segmentationextractors-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4b57e74ccad6bb0ff80634a33abdcaa5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19527,
      "upload_time": "2020-02-24T21:34:28",
      "upload_time_iso_8601": "2020-02-24T21:34:28.888051Z",
      "url": "https://files.pythonhosted.org/packages/de/e0/c498acd9eed69814959981bb2253a23ca4fed22b0353502da92f1f8fbac3/segmentationextractors-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}