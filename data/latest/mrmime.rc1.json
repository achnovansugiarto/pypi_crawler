{
  "info": {
    "author": "Nathan Hoad",
    "author_email": "nathan@hoad.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# mrmime, a fast and memory efficient streaming MIME parser\n\nThis isn't API stable or even really stable at all yet. A lot of features are missing.\nYou shouldn't use this unless you're willing to actively help me with it.\n\n## Why?\n\n`email` is a memory hog, very rigid and not particularly fast. I parse a _lot_ of email\nat work and I only need a couple of things:\n - I want to control storage. I don't need large objects that represent the entire\n   parsed message, I need specific fields.\n - I want to control how I read up mime parts. I don't want massive strings.\n - I don't want to load the entire file into memory.\n - No serialization, only parsing.\n - I want it to be fast.\n - I want it to be intuitive.\n\n## Examples\n\nSimple example showing how to use it:\n\n```python\n\nfrom mrmime import BodyLineEvent, HeaderEvent, parse_file\n\n\nwith open(\"tests/data/simple.eml\") as f:\n    for event in parse_file(f):\n        if isinstance(event, HeaderEvent):\n            print(\"header\", event.key, event.value)\n        elif isinstance(event, BodyLineEvent):\n            print(\"line from the body\", event.line)\n```\n\nHow to get the entire body in a single event:\n\n```python\n\nfrom mrmime import HeaderEvent, BodyStreamer, body_streamer, parse_file\n\nwith open(\"tests/data/simple.eml\") as f:\n    for event in body_streamer(parse_file(f)):\n        if isinstance(event, HeaderEvent):\n            print(\"header\", event.key, event.value)\n        elif isinstance(event, BodyStreamer):\n            print(\"body\", event.read())\n```\n\nHow to handle multipart messages:\n\n```python\n\nfrom mrmime import ParserStateEvent, HeaderEvent, BodyLineEvent, multipart, parse_file\n\nwith open(\"tests/data/simple.eml\") as f:\n    for event in multipart(parse_file(f)):\n        if isinstance(event, ParserStateEvent) and event.state is ParserState.Boundary:\n            print(\"new boundary started\")\n        elif isinstance(event, HeaderEvent):\n            print(\"header\", event.key, event.value)\n        elif isinstance(event, BodyLineEvent:\n            print(\"body\", event.read())\n```\n\nHow to handle messages from something other than a file:\n\n```python\n\nfrom mrmime import BodyStreamer, HeaderEvent, Parser\n\nparser = Parser()\n\nfor chunk in get_data_from_source():  # e.g. an async library or something\n    for event in parser.feed(chunk):\n        if isinstance(event, HeaderEvent):\n            print(\"header\", event.key, event.value)\n        elif isinstance(event, BodyStreamer):\n            print(\"body\", event.read())\n```\n\n## TODO\n - Think about recursive parsing, e.g. what if I want to parse messages in messages? What if I want to decide dynamically, rather than prior?\n - MimePart should be decoding the data inside, but have the option to not do that\n - Think more about the state transitions, they're messy\n - we return bytes for everything at the moment, we shouldn't. We could make the Header object do the decoding so that it's lazy, that's a good idea.\n - Can we use memoryviews at all for the headers?\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.sr.ht/~nhoad/mrmime",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mrmime",
    "package_url": "https://pypi.org/project/mrmime/",
    "platform": "",
    "project_url": "https://pypi.org/project/mrmime/",
    "project_urls": {
      "Homepage": "https://git.sr.ht/~nhoad/mrmime",
      "Repository": "https://git.sr.ht/~nhoad/mrmime"
    },
    "release_url": "https://pypi.org/project/mrmime/0.0.1/",
    "requires_dist": [
      "Werkzeug (>=2.0.1,<3.0.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "A streaming mime parser",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10961258,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ccb4f6549f900be7d56f52b28903415891d3e4c81ef156f73544d9085f002ad",
          "md5": "11037302143e933d51859586149a4d4b",
          "sha256": "6d9adc387a4e9305aee60a77eacf9c3e79e9d50a164b093e2495842d3ef67c90"
        },
        "downloads": -1,
        "filename": "mrmime-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11037302143e933d51859586149a4d4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 6229,
        "upload_time": "2021-07-20T22:46:27",
        "upload_time_iso_8601": "2021-07-20T22:46:27.481485Z",
        "url": "https://files.pythonhosted.org/packages/6c/cb/4f6549f900be7d56f52b28903415891d3e4c81ef156f73544d9085f002ad/mrmime-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a551df1a05b7caae776acb99c3c50ca8303931fe9892823e2e7e0debf215af7a",
          "md5": "8c517fc5e10d2bc457c9f62bceeedbe2",
          "sha256": "9d1dd7424e65237ca0fd3158048812e282db4b7619e6b1d4f6ac054e7d261a99"
        },
        "downloads": -1,
        "filename": "mrmime-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8c517fc5e10d2bc457c9f62bceeedbe2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 6277,
        "upload_time": "2021-07-20T22:46:28",
        "upload_time_iso_8601": "2021-07-20T22:46:28.611432Z",
        "url": "https://files.pythonhosted.org/packages/a5/51/df1a05b7caae776acb99c3c50ca8303931fe9892823e2e7e0debf215af7a/mrmime-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ccb4f6549f900be7d56f52b28903415891d3e4c81ef156f73544d9085f002ad",
        "md5": "11037302143e933d51859586149a4d4b",
        "sha256": "6d9adc387a4e9305aee60a77eacf9c3e79e9d50a164b093e2495842d3ef67c90"
      },
      "downloads": -1,
      "filename": "mrmime-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11037302143e933d51859586149a4d4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 6229,
      "upload_time": "2021-07-20T22:46:27",
      "upload_time_iso_8601": "2021-07-20T22:46:27.481485Z",
      "url": "https://files.pythonhosted.org/packages/6c/cb/4f6549f900be7d56f52b28903415891d3e4c81ef156f73544d9085f002ad/mrmime-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a551df1a05b7caae776acb99c3c50ca8303931fe9892823e2e7e0debf215af7a",
        "md5": "8c517fc5e10d2bc457c9f62bceeedbe2",
        "sha256": "9d1dd7424e65237ca0fd3158048812e282db4b7619e6b1d4f6ac054e7d261a99"
      },
      "downloads": -1,
      "filename": "mrmime-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8c517fc5e10d2bc457c9f62bceeedbe2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 6277,
      "upload_time": "2021-07-20T22:46:28",
      "upload_time_iso_8601": "2021-07-20T22:46:28.611432Z",
      "url": "https://files.pythonhosted.org/packages/a5/51/df1a05b7caae776acb99c3c50ca8303931fe9892823e2e7e0debf215af7a/mrmime-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}