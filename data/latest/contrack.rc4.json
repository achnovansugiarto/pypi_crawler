{
  "info": {
    "author": "Daniel Steinfeld",
    "author_email": "daniel.steinfeld@alumni.ethz.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Atmospheric Science"
    ],
    "description": ".. image:: docs/logo_contrack.png\n   :width: 30 px\n   :align: center\n\n\n###########################\nConTrack - Contour Tracking\n###########################\n==================================================================================\nSpatial and temporal tracking of circulation anomalies in weather and climate data\n==================================================================================\n\nConTrack is a Python package intended to simpify the process of automatically tracking and analyzing synoptic weather features (individual systems or long-term climatology) in weather and climate datasets. This feature-based tool is mostly used to track and characterize the life cycle of atmospheric blocking, but can also be used to identify other type of anomalous features, e.g., upper-level troughs and ridges (storm track). It is built on top of `xarray`_ and `scipy`_.\n\nConTrack is based on the atmospheric blocking index by `Schwierz et al. (2004) <https://doi.org/10.1029/2003GL019341>`_ (written in Fortran) developed at the `Institute for Atmospheric and Climate Science, ETH Zurich <https://iac.ethz.ch/group/atmospheric-dynamics.html>`_.\n\nSee also:  \n\n- `Scherrer et al. (2005) <https://doi.org/10.1002/joc.1250>`_: \n- `Croci-Maspoli et al. (2007) <https://doi.org/10.1175/JCLI4029.1>`_\n- `Pfahl et al. (2015) <https://www.nature.com/articles/ngeo2487>`_\n- `Woollings et al. (2018) <https://link.springer.com/article/10.1007/s40641-018-0108-z#appendices>`_\n- `Steinfeld and Pfahl (2019) <https://doi.org/10.1007/s00382-019-04919-6>`_\n- `Steinfeld et al. (2020) <https://wcd.copernicus.org/articles/1/405/2020/wcd-1-405-2020.html>`_\n- and used in many more atmospheric blocking studies...\n\nThe ERA-Interim global blocking climatology based on upper-level potential vorticity used in Steinfeld and Pfahl (2019) is publicly available via an ETH Zurich-based web server [`http://eraiclim.ethz.ch/ <http://eraiclim.ethz.ch/>`_ , see `Sprenger et al. (2017) <https://doi.org/10.1175/BAMS-D-15-00299.1>`_].  \n\n..\n  References\n.. _xarray: https://xarray.pydata.org/en/stable/\n.. _scipy: https://www.scipy.org/\n\n============\nReferencing\n============\n\n| Please cite **ConTrack** in your publication: *Steinfeld, D., 2020: ConTrack - Contour Tracking. GitHub, https://github.com/steidani/ConTrack*.   \n| In case you are using the blocking index, please also cite: *Schwierz, C., Croci-Maspoli, M., and Davies, H. C., 2004: Perspicacious indicators of atmospheric blocking, Geophys. Res. Lett., 31, 0094–8276, https://doi.org/10.1029/2003GL019341*.   \n|\n| Be aware that this is a free scientific tool in continous development, then it may not be free of bugs. Please report any issue on the GitHub portal.\n\n============\nInstallation\n============\n\nUsing pip\n---------\n\nIdeally install it in a virtual environment.\n\n.. code:: bash\n\n    pip install contrack\n\nMake sure you have the required dependencies (for details see docs/environment.yml):\n\n- xarray\n- scipy\n- pandas\n- numpy\n- netCDF4\n- (for plotting on geographical maps: matplotlib and cartopy)\n- (for parallel computing: dask)\n\nTo install the development version (master), do:\n\n.. code:: bash\n\n    pip install git+https://github.com/steidani/ConTrack\n\nCopy from Github repository\n---------------------------\n\nCopy/clone locally the latest version from ConTrack:\n\n.. code-block:: bash\n\n    git clone git@github.com:steidani/ConTrack.git /path/to/local/contrack\n    cd path/to/local/contrack\n\nPrepare the conda environment:\n\n.. code-block:: bash\n\n    conda create -y -q -n contrack_dev python=3.8.5 pytest\n    conda env update -q -f docs/environment.yml -n contrack_dev\n\nInstall contrack in development mode in contrack_dev:\n\n.. code-block:: bash\n\n    conda activate contrack_dev\n    pip install -e .\n\nRun the tests:\n\n.. code-block:: bash\n\n    python -m pytest\n\n==========\nTutorial\n==========\n\nExample: Calculate blocking climatology \n---------------------------------------\n\n.. code-block:: python \n\n   # import contrack module \n   from contrack import contrack\n\n   # initiate blocking instance\n   block = contrack()\n\n   # read ERA5 Z500 (geopotential at 500 hPa) daily global data from 19810101_00 to 20101231_00 with 1° spatial resolution)\n   # downloaded from https://cds.climate.copernicus.eu\n   block.read('data/era5_1981-2010_z_500.nc')\n   block\n   # Out[]:\tXarray dataset with 10957 time steps. \n   #\t     \tAvailable fields: z\n\n   # select only winter months January, February and December\n   block.ds = block.ds.sel(time=block.ds.time.dt.month.isin([1, 2, 12]))\n   # xarray.Dataset (and all its functions) can be accessed with block.ds\n\n   # calculate geopotential height\n   block.calculate_gph_from_gp(gp_name='z',\n                               gp_unit='m**2 s**-2',\n                               gph_name='z_height')\n\n   # Hint: Use block.set_up(...) to do consistency check and set (automatically or manually) names of dimension ('time', 'latitude', 'longitude')\n\n   # calculate Z500 anomaly (temporally smoothed with a 2 d running mean) with respect to the 31-day running mean (long-term: 30 years) climatology\n   block.calc_anom(variable='z_height', \n                   smooth=2,\n                   window=31,\n                   groupby='dayofyear')\n   # Hint: Use 'clim=...' to point towards an existing climatological mean (useful for weather forecasts)\n   # output: variable 'anom'.\n\n   # Finally, track blocking anticyclones (>=150gmp, 50% overlap twosided, 5 timesteps persistence (here 5 days))\n   block.run_contrack(variable='anom',\n   \t\t      threshold=160,\n\t\t      gorl='>=',\n\t\t      overlap=0.5,\n\t\t      persistence=5,\n\t\t      twosided=True)\n   # output: variable 'flag'. 440 blocking systems tracked. Each blocking system is identified by a unique flag/ID.\n   block\n   # Out[]:\tXarray dataset with 2707 time steps. \n   #\t     \tAvailable fields: z, z_height, anom, flag\n\n   # Hint: In case you want to use a more objective threshold, e.g., the 90th percentile of the Z500 anomaly winter distribution over 50°-80°N, do: \n   # threshold = block['anom'].sel(latitude=slice(80, 50)).quantile([0.90], dim='time').mean() # 177gmp\n\n   # save to disk\n   block['flag'].to_netcdf('data/flag.nc')\n\n   # plotting blocking frequency (in %) for winter over Northern Hemisphere\n   import matplotlib.pyplot as plt\n   import cartopy.crs as ccrs\n\n   fig, ax = plt.subplots(figsize=(7, 5), subplot_kw={'projection': ccrs.NorthPolarStereo()})\n   (xr.where(block['flag']>1,1,0).sum(dim='time')/block.ntime*100).plot(levels=np.arange(2,18,2), cmap='Oranges', extend = 'max', transform=ccrs.PlateCarree())\n   (xr.where(block['flag']>1,1,0).sum(dim='time')/block.ntime*100).plot.contour(colors='grey', linewidths=0.8, levels=np.arange(2,18,2), transform=ccrs.PlateCarree())\n   ax.set_extent([-180, 180, 30, 90], crs=ccrs.PlateCarree()); ax.coastlines();\n   plt.show()\n\n.. image:: docs/era5_blockingfreq_DJF.png\n   :width: 20 px\n   :align: center\n\nExample: Calculation of blocking characteristics for life cycle analysis \n------------------------------------------------------------------------\n\nUsing the output 'flag' from block.run_contrack() to calculate blocking intensity, size, center of mass, age from genesis to lysis for each tracked feature.\n\n.. code-block:: python \n\n   # flag = output of block.run_contrack(), variable = input variable to calculate intensity and center of mass\n   block_df = block.run_lifecycle(flag='flag', variable='anom')\n\n   # output is a pandas.DataFrame\n   print(block_df)\n\t      Flag         Date  Longitude  Latitude  Intensity        Size\n\t0        3  19810101_00        333        48     226.45  6490603.17\n\t1        3  19810102_00        335        47     210.77  6466790.05\n\t2        3  19810103_00        331        47     189.00  4169702.52\n\t3        3  19810104_00        331        49     190.78  3289504.87\n\t4        3  19810105_00        331        50     203.66  4231433.19\n\t   ...          ...        ...       ...        ...         ...\n\t3832  6948  20101221_00        357       -53     206.02  5453454.76\n\t3833  6948  20101222_00          0       -56     208.80  5205585.69\n\t3834  6948  20101223_00          3       -56     190.23  6324017.70\n\t3835  6948  20101224_00          3       -57     214.02  5141693.22\n\t3836  6948  20101225_00          5       -55     211.33  7606108.76\n\n   # save result to disk\n   block_df.to_csv('data/block.csv', index=False)\n\n   # plotting blocking track (center of mass) and genesis \n   f, ax = plt.subplots(1, 1, figsize=(7,5), subplot_kw=dict(projection=ccrs.NorthPolarStereo()))\n   ax.set_extent([-180, 180, 30, 90], crs=ccrs.PlateCarree()); ax.coastlines()\n   ax.coastlines() # add coastlines\n\n   #need to split each blocking track due to longitude wrapping (jumping at map edge) \n   for bid in np.unique(np.asarray(block_df['Flag'])): #select blocking id    \n       lons = np.asarray(block_df['Longitude'].iloc[np.where(block_df['Flag']==bid)])\n       lats = np.asarray(block_df['Latitude'].iloc[np.where(block_df['Flag']==bid)])\n\n       # cosmetic: sometimes there is a gap near map edge where track is split: \n       lons[lons >= 355] = 359.9\n       lons[lons <= 3] = 0.1\n       segment = np.vstack((lons,lats))  \n\n       #move longitude into the map region and split if longitude jumps by more than \"threshold\"\n       lon0 = 0 #center of map\n       bleft = lon0-0.                                                                            \n       bright = lon0+360\n       segment[0,segment[0]> bright] -= 360                                                                 \n       segment[0,segment[0]< bleft]  += 360\n       threshold = 180  # CHANGE HERE                                                                                    \n       isplit = np.nonzero(np.abs(np.diff(segment[0])) > threshold)[0]                                                                                         \n       subsegs = np.split(segment,isplit+1,axis=+1)\n\n       #plot the tracks\n       for seg in subsegs:                                                                                  \n           x,y = seg[0],seg[1]                                                                          \n           ax.plot(x ,y,c = 'm',linewidth=1, transform=ccrs.PlateCarree())  \n       #plot the starting points\n       ax.scatter(lons[0],lats[0],s=11,c='m', zorder=10, edgecolor='black', transform=ccrs.PlateCarree())  \n\n\n.. image:: docs/cesm_blocking_track.png\n   :width: 20 px\n   :align: center\n\n==========\nWhat's New\n==========\n\nv0.3.0 (18.04.2021): \n--------------------\n\n- bugfix: see Issue calc_clim error.\n\nv0.2.0 (19.10.2020): \n--------------------\n\n- first release on pypi\n- calculate anomalies based on pre-defined climatology: ``calc_anom(clim=...)``.\n- better handling of dimensions using ``set_up()`` function.\n- twosided or forward overlap criterion: ``run_contrack(twosided=True)``.\n- ``run_lifecycle()``: temporal evolution of intensity, spatial extent, center of mass and age from genesis to lysis for individual features.\n\nv0.1.0 (20.04.2020): \n--------------------\n\n- Extended functionality: Calculate anomalies from daily or monthly or seasonal... (long-term) climatology with moving average window: ``calc_anom(groupby=..., window=...)``\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/steidani/ConTrack",
    "keywords": "data,science,meteorology,climate,atmospheric blocking,troughs and ridges",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ConTrack",
    "package_url": "https://pypi.org/project/ConTrack/",
    "platform": "",
    "project_url": "https://pypi.org/project/ConTrack/",
    "project_urls": {
      "Bug Tracker": "https://github.com/steidani/ConTrack/issues",
      "Homepage": "https://github.com/steidani/ConTrack"
    },
    "release_url": "https://pypi.org/project/ConTrack/0.3.1/",
    "requires_dist": [
      "xarray",
      "scipy",
      "pandas",
      "numpy",
      "netCDF4"
    ],
    "requires_python": ">=3.6",
    "summary": "Contour Tracking of circulation anomalies in Weather and Climate Data.",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10098263,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f8f026e510e7abfd9191913790686bf18131d0c7b5de4d2202ab4209adaa298",
          "md5": "b782a640ab2abf6ea547303dcfde7480",
          "sha256": "a0b740772749897cde159a73a53607ab9a14267330b86bacbd95b5ebd8e5208b"
        },
        "downloads": -1,
        "filename": "ConTrack-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b782a640ab2abf6ea547303dcfde7480",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9235,
        "upload_time": "2020-05-03T20:10:45",
        "upload_time_iso_8601": "2020-05-03T20:10:45.737709Z",
        "url": "https://files.pythonhosted.org/packages/1f/8f/026e510e7abfd9191913790686bf18131d0c7b5de4d2202ab4209adaa298/ConTrack-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38ffff1608d8fab4031412ca28b9e565beebc5447309026a59c0c7367953cea0",
          "md5": "f376a81ee17cb12fa8754f58c0e3bb6d",
          "sha256": "c19799671ff2ae899ba1ed38fd3623408dd16e87bb40af0e6286fb2c1b7a7ab9"
        },
        "downloads": -1,
        "filename": "ConTrack-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f376a81ee17cb12fa8754f58c0e3bb6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7805,
        "upload_time": "2020-05-03T20:10:47",
        "upload_time_iso_8601": "2020-05-03T20:10:47.759857Z",
        "url": "https://files.pythonhosted.org/packages/38/ff/ff1608d8fab4031412ca28b9e565beebc5447309026a59c0c7367953cea0/ConTrack-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b4525be9387ff8291500fd32395f772070077312cad6a3c71aea41454eadf26",
          "md5": "1f95225a7db5b7637ddf3daace5da693",
          "sha256": "bb52ab239d653e47c537096339606b015d49d7af0c8a0b8ce4013c5025c370df"
        },
        "downloads": -1,
        "filename": "ConTrack-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f95225a7db5b7637ddf3daace5da693",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14764,
        "upload_time": "2020-10-19T22:06:21",
        "upload_time_iso_8601": "2020-10-19T22:06:21.892044Z",
        "url": "https://files.pythonhosted.org/packages/8b/45/25be9387ff8291500fd32395f772070077312cad6a3c71aea41454eadf26/ConTrack-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5ee271f9f9132a4503d9223e680a0924d1ec2db6eb0e124199676d24ae1c008",
          "md5": "e398e44110a86c3e42841b1d4c4e4479",
          "sha256": "d1fdb7ba1f8232dc8e1179e84f438a5d93401779752bbbd235bc1dc729124e17"
        },
        "downloads": -1,
        "filename": "ConTrack-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e398e44110a86c3e42841b1d4c4e4479",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14020,
        "upload_time": "2020-10-19T22:06:24",
        "upload_time_iso_8601": "2020-10-19T22:06:24.557218Z",
        "url": "https://files.pythonhosted.org/packages/e5/ee/271f9f9132a4503d9223e680a0924d1ec2db6eb0e124199676d24ae1c008/ConTrack-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca3203ebc2a2c1341a02da81ec57e6b631f9e79ab3adac273cd1cc9371905f74",
          "md5": "6c6e29e453da8116f645620bd7fa4979",
          "sha256": "43919bc1885752bfc7fe0ef9951b3d2b21c7db7b120d88b62a461b6cf2cf3c87"
        },
        "downloads": -1,
        "filename": "ConTrack-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c6e29e453da8116f645620bd7fa4979",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14954,
        "upload_time": "2020-10-20T15:28:55",
        "upload_time_iso_8601": "2020-10-20T15:28:55.435125Z",
        "url": "https://files.pythonhosted.org/packages/ca/32/03ebc2a2c1341a02da81ec57e6b631f9e79ab3adac273cd1cc9371905f74/ConTrack-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b87974191a6021f00e3ffc42179aa1141d22e95441f7089b69fae24a8b083991",
          "md5": "0b6c7056765219a7d2920809e921dac8",
          "sha256": "c057583a83299ddb39d653f7a4fbc56c0806759ced0830bc65484f1925c03130"
        },
        "downloads": -1,
        "filename": "ConTrack-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0b6c7056765219a7d2920809e921dac8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14967,
        "upload_time": "2020-10-20T15:28:57",
        "upload_time_iso_8601": "2020-10-20T15:28:57.874782Z",
        "url": "https://files.pythonhosted.org/packages/b8/79/74191a6021f00e3ffc42179aa1141d22e95441f7089b69fae24a8b083991/ConTrack-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b122589687b7fa22d53dde69cb3eec1815c8f31dc36c0b902be693efc6e34cb9",
          "md5": "d25709c066948d1b4d39460e6dbb32b0",
          "sha256": "600462de8b5b4eef9ced4fd7125dc016e44ee897e1919ab58ece7bb63c9a64d5"
        },
        "downloads": -1,
        "filename": "ConTrack-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d25709c066948d1b4d39460e6dbb32b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15753,
        "upload_time": "2021-04-18T14:35:01",
        "upload_time_iso_8601": "2021-04-18T14:35:01.931431Z",
        "url": "https://files.pythonhosted.org/packages/b1/22/589687b7fa22d53dde69cb3eec1815c8f31dc36c0b902be693efc6e34cb9/ConTrack-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de83c0181ff0c8c3924f7208555b09fa8cb50219b62a7d463cd45a9685c25e19",
          "md5": "98714bad0e15a1008a691289b8c15345",
          "sha256": "9dd001a87d8116e7b72fbad280d6640a149020b62251c5f8d494df06a31ba3c5"
        },
        "downloads": -1,
        "filename": "ConTrack-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "98714bad0e15a1008a691289b8c15345",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16632,
        "upload_time": "2021-04-18T14:35:03",
        "upload_time_iso_8601": "2021-04-18T14:35:03.822786Z",
        "url": "https://files.pythonhosted.org/packages/de/83/c0181ff0c8c3924f7208555b09fa8cb50219b62a7d463cd45a9685c25e19/ConTrack-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b122589687b7fa22d53dde69cb3eec1815c8f31dc36c0b902be693efc6e34cb9",
        "md5": "d25709c066948d1b4d39460e6dbb32b0",
        "sha256": "600462de8b5b4eef9ced4fd7125dc016e44ee897e1919ab58ece7bb63c9a64d5"
      },
      "downloads": -1,
      "filename": "ConTrack-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d25709c066948d1b4d39460e6dbb32b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15753,
      "upload_time": "2021-04-18T14:35:01",
      "upload_time_iso_8601": "2021-04-18T14:35:01.931431Z",
      "url": "https://files.pythonhosted.org/packages/b1/22/589687b7fa22d53dde69cb3eec1815c8f31dc36c0b902be693efc6e34cb9/ConTrack-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de83c0181ff0c8c3924f7208555b09fa8cb50219b62a7d463cd45a9685c25e19",
        "md5": "98714bad0e15a1008a691289b8c15345",
        "sha256": "9dd001a87d8116e7b72fbad280d6640a149020b62251c5f8d494df06a31ba3c5"
      },
      "downloads": -1,
      "filename": "ConTrack-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "98714bad0e15a1008a691289b8c15345",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16632,
      "upload_time": "2021-04-18T14:35:03",
      "upload_time_iso_8601": "2021-04-18T14:35:03.822786Z",
      "url": "https://files.pythonhosted.org/packages/de/83/c0181ff0c8c3924f7208555b09fa8cb50219b62a7d463cd45a9685c25e19/ConTrack-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}