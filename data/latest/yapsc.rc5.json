{
  "info": {
    "author": "Allen Barker",
    "author_email": "Allen.L.Barker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": ".. default-role:: code\n\nyapsc -- Yet Another Python Switch-Case\n=======================================\n\nAnother Python implementation of a switch-case statement.  Many versions and\nvariations of Python switch-case constructs are out there, but this one has\nsyntax and a combination of features I have not seen.  (The closest to this\nversion is probably at `tetrapus/switchcase\n<https://github.com/tetrapus/switchcase>`_.)\n\nThis is basically just convenient syntax for defining a dict-based function\ndispatch.  The switch call is quite efficient, and can be separated from the\nswitch definition and its associated overhead.  Fallthrough is not implemented,\nbut the `case` decorator can take multiple arguments to match (like Pascal's\ncase statement rather than C's except duplicate cases are allowed).\n\n**Update:** The new default is to raise an exception on a repeated case, which\nis more like the Pascal case statement.  Since at most one function can run,\nthe return value of the case statement is not wrapped in a tuple.  (To get the\nprevious behavior, with repeats allowed, all matching cases run sequentially,\nand the results returned in a list, pass the ``dups=True`` flag to the switch\ninitializer.)\n\nExample code\n------------\n\n.. code-block:: python\n\n   from yapsc import Switch, case, default\n\n   class CommandSwitch(Switch):\n\n       @case(\"play\")\n       def _():\n           print(\"play command\")\n           return \"play command\"\n\n       @case(\"back\")\n       def _():\n           print(\"back command\")\n           return \"back command\"\n\n       @case(\"forward\")\n       def _():\n           print(\"forward command\")\n           return \"forward command\"\n\n       @case(\"exit\", \"quit\")\n       def _():\n           print(\"exit or quit command\")\n           return \"exit or quit command\"\n\n       @default\n       def _():\n           print(\"default case\")\n           return \"default case\"\n\n   command = \"exit\"\n   value = CommandSwitch(command)\n   assert value == \"exit or quit command\"\n\nThis prints out::\n\n   exit or quit command\n\nInstallation\n------------\n\n.. code-block:: bash\n\n   pip install yapsc\n\nUsage notes\n-----------\n\n* Any (and only) hashable values can be switched on.  The default is that a\n  particular case values can only appear once in the statement or an exception\n  is raised.\n\n* The class name can be arbitrary, but should be different from any other\n  switches in the same scope.\n  \n* The case-function names are ignored and can either be `\"_\"` or any valid\n  attribute name not starting with `\"_\"`, excepting `\"switch\"`.  Case functions\n  are set as staticmethods of the class and can also be called that way\n  (assuming they have a unique function name).\n\n* The switch can be called 1) as a function call to the user-defined switch\n  class, 2) via the `switch` classmethod of the user-defined switch class, or\n  3) by passing the control variable as the `on` keyword argument to the switch\n  class definition (i.e., passed just after the `Switch`).\n\n* Calls to the switch return the return value of the case-function that was\n  run.  (But note that running from the `on` keyword in the switch definition\n  does not return a value.)\n\n* The switch class should be defined in the scope you want to be visible to\n  the case-function code.\n\n* If possible don't define the switch class inside a loop; just put the call\n  inside the loop.  Then in the loop you get real dict-hashed function\n  dispatch without the definition overhead.\n\n* If the case-functions take parameters and/or keyword arguments they must\n  all take the same number of parameters and same keywords.  The parameter\n  values must be passed as extra arguments in the call to the switch.  The\n  `on` keyword cannot be used in this case.\n\n* To allow duplicate case values you can pass `dups=True` as a keyword argument\n  to the switch class definition (i.e., pass it after the `Switch`\n  inheritance).  When there are multiple matching cases their function are\n  called in the sequence that they were defined in.  The return value of the\n  switch is a tuple of all the return values for each case that was run.\n\nIt should be noted that if Python's `PEP-634\n<https://www.python.org/dev/peps/pep-0634/>`_ for pattern matching is accepted\nthen for future Python versions these kinds of switch-case implementations may\nbecome outdated.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abarker/yapsc",
    "keywords": "switch",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yapsc",
    "package_url": "https://pypi.org/project/yapsc/",
    "platform": "",
    "project_url": "https://pypi.org/project/yapsc/",
    "project_urls": {
      "Homepage": "https://github.com/abarker/yapsc"
    },
    "release_url": "https://pypi.org/project/yapsc/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Yet Another Python Switch-Case",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8352867,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5987310210ec38b37157110ef9c744daacf32b910878b3888bc6b35999cf5fb9",
          "md5": "eefc747244d509cbacba361c8b520096",
          "sha256": "5ede797e852ba3c6019d6951154a88a7a76dd0f171239d04f088688a12fbfeca"
        },
        "downloads": -1,
        "filename": "yapsc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eefc747244d509cbacba361c8b520096",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5280,
        "upload_time": "2020-09-18T00:36:27",
        "upload_time_iso_8601": "2020-09-18T00:36:27.239365Z",
        "url": "https://files.pythonhosted.org/packages/59/87/310210ec38b37157110ef9c744daacf32b910878b3888bc6b35999cf5fb9/yapsc-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f65184ef3fc2ae1ac1feb990ca609979a3210f271555e858a4b84a428eae90d",
          "md5": "61b3676b5003193812468ae806ba5090",
          "sha256": "5ea372f1a135bbad17519ff269ccbf9b0e8a8723b0d63c07e858811a477f4001"
        },
        "downloads": -1,
        "filename": "yapsc-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "61b3676b5003193812468ae806ba5090",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5404,
        "upload_time": "2020-09-18T19:27:33",
        "upload_time_iso_8601": "2020-09-18T19:27:33.446247Z",
        "url": "https://files.pythonhosted.org/packages/5f/65/184ef3fc2ae1ac1feb990ca609979a3210f271555e858a4b84a428eae90d/yapsc-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b07a34fb58a65b9ec40b5bde7edb673d0e8deb2198c04018c171a12828dff083",
          "md5": "6c730a939dece7abfcc52009826b1ed9",
          "sha256": "a41bbf3ca3642fb0fc33a09459d352d576527a71e7de4ca25c97fca7f498c562"
        },
        "downloads": -1,
        "filename": "yapsc-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6c730a939dece7abfcc52009826b1ed9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5753,
        "upload_time": "2020-09-18T20:32:23",
        "upload_time_iso_8601": "2020-09-18T20:32:23.111420Z",
        "url": "https://files.pythonhosted.org/packages/b0/7a/34fb58a65b9ec40b5bde7edb673d0e8deb2198c04018c171a12828dff083/yapsc-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ecf5173e7a8abb10089a1c701b6da9d334b9871f0dd41f5d3bff7644f66d8c0",
          "md5": "0fb727f3d0dc6851a616c85eca28dff2",
          "sha256": "24e18b5fc948652002773cca3ca0196bb0bfa1153f29fabf2984a183ed07b339"
        },
        "downloads": -1,
        "filename": "yapsc-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0fb727f3d0dc6851a616c85eca28dff2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6097,
        "upload_time": "2020-09-19T01:40:21",
        "upload_time_iso_8601": "2020-09-19T01:40:21.765311Z",
        "url": "https://files.pythonhosted.org/packages/7e/cf/5173e7a8abb10089a1c701b6da9d334b9871f0dd41f5d3bff7644f66d8c0/yapsc-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f211ecd24ac428f46a3fb7a2589b795ada4e4b69d351d4a7f306972d83b496f",
          "md5": "5ab0a17dee8c39314ee2c1288faa55bb",
          "sha256": "0530cbef673d40ccadc9eb1be1dd250ad506ef2a8141073e5f3a582bd9ab5c96"
        },
        "downloads": -1,
        "filename": "yapsc-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5ab0a17dee8c39314ee2c1288faa55bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6509,
        "upload_time": "2020-10-06T18:51:35",
        "upload_time_iso_8601": "2020-10-06T18:51:35.670993Z",
        "url": "https://files.pythonhosted.org/packages/2f/21/1ecd24ac428f46a3fb7a2589b795ada4e4b69d351d4a7f306972d83b496f/yapsc-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f211ecd24ac428f46a3fb7a2589b795ada4e4b69d351d4a7f306972d83b496f",
        "md5": "5ab0a17dee8c39314ee2c1288faa55bb",
        "sha256": "0530cbef673d40ccadc9eb1be1dd250ad506ef2a8141073e5f3a582bd9ab5c96"
      },
      "downloads": -1,
      "filename": "yapsc-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "5ab0a17dee8c39314ee2c1288faa55bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6509,
      "upload_time": "2020-10-06T18:51:35",
      "upload_time_iso_8601": "2020-10-06T18:51:35.670993Z",
      "url": "https://files.pythonhosted.org/packages/2f/21/1ecd24ac428f46a3fb7a2589b795ada4e4b69d351d4a7f306972d83b496f/yapsc-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}