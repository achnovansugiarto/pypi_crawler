{
  "info": {
    "author": "Carl Sverre",
    "author_email": "accounts@carlsverre.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "=====\nClark\n=====\n\n.. code:: bash\n\n    pip install clark\n\nTesting\n=======\n\n.. image:: https://travis-ci.org/carlsverre/clark.png\n    :target: https://travis-ci.org/carlsverre/clark\n\nRun tests by executing :code:`python setup.py test`.\n\nClasses\n=======\n\nSuper ArgParser\n---------------\nA nicer way to deal with config files and argparser:\n\nconfig_file.cnf:\n\n.. code:: text\n\n    test = 1\n    debug\n\nYour app:\n\n.. code:: python\n\n    from clark import SuperArgParser, ConfigFileAction\n\n    parser = SuperArgParser()\n\n    parser.add_argument('-c', action=ConfigFileAction)\n    parser.add_argument('--debug', action='store_true')\n    parser.add_argument('--test', type=int)\n    parser.add_argument('--engage')\n\n    options = parser.parse_args([\n        '--engage', 'foo',\n        '-c', 'config_file.cnf'\n    ])\n\n    assert options.test == 1\n    assert options.engage == 'foo'\n    assert options.debug is True\n\nSuper Enum\n---------------\nA simple Enum class with lots of nice properties.\n\n.. code:: python\n\n    from clark import SuperEnum\n\n    class Colors(SuperEnum):\n        red = SuperEnum.E\n        blue = SuperEnum.E\n        green = SuperEnum.E\n\n    class OtherColors(SuperEnum):\n        yellow = SuperEnum.E\n        red = SuperEnum.E\n\n    red = Colors['red']\n    red = Colors.red\n\n    assert red in Colors\n\n    assert str(red) == 'red'\n    assert red == Colors.red\n\n    assert Colors.red != OtherColors.red\n\n    class Foo(object):\n        class Colors(SuperEnum):\n            blue = SuperEnum.Element\n\n    assert Foo.Colors.blue != Colors.blue\n\nSuper JSON\n----------\nMake simplejson slightly better (don't crash on datetime objects)\n\n.. code:: python\n\n    from clark import super_json\n    \n    now = datetime.datetime.now()\n    x = super_json.loads(super_json.dumps({ 'a': now }))\n    assert x['a'] == now.isoformat()\n\nSuper PidFile\n-------------\nA simple PidFile class.  Instantiate when you boot up, and close it when you exit.\n\n.. code:: python\n\n    from clark import SuperPidFile\n    \n    pidfile = SuperPidFile()\n    try:\n        ... run your app ...\n    finally:\n        pidfile.close()\n\nSuper Thread\n------------\nThreads that terminate nicely and are awesome.\n\n.. code:: python\n\n    from clark import SuperThread\n    \n    class T(SuperThread):\n        def bootstrap(self):\n            self.i = 0\n\n        def sleep(self):\n            time.sleep(0.01)\n\n        def work(self):\n            self.i += 1\n\n        def cleanup(self):\n            assert self.i > 0\n            \n    t = T()\n    t.start()\n    \n    time.sleep(1)\n    \n    t.terminate()\n    t.join()\n    \n    assert not t.is_alive()",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/carlsverre/clark",
    "keywords": null,
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "clark",
    "package_url": "https://pypi.org/project/clark/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/clark/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/carlsverre/clark"
    },
    "release_url": "https://pypi.org/project/clark/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Utility library.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1024291,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a42fbb8ef57e7fe67e68884ba4a1ccb5af7bf4bee962573cd860ef00733725d",
          "md5": "558770431faed802e9f1c521935873ed",
          "sha256": "537fb4b8bc0f97158331835502fbadd23d980fd1e4076bf74546d58a7e6e28ce"
        },
        "downloads": -1,
        "filename": "clark-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "558770431faed802e9f1c521935873ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5440,
        "upload_time": "2014-03-10T00:09:50",
        "upload_time_iso_8601": "2014-03-10T00:09:50.345475Z",
        "url": "https://files.pythonhosted.org/packages/1a/42/fbb8ef57e7fe67e68884ba4a1ccb5af7bf4bee962573cd860ef00733725d/clark-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a42fbb8ef57e7fe67e68884ba4a1ccb5af7bf4bee962573cd860ef00733725d",
        "md5": "558770431faed802e9f1c521935873ed",
        "sha256": "537fb4b8bc0f97158331835502fbadd23d980fd1e4076bf74546d58a7e6e28ce"
      },
      "downloads": -1,
      "filename": "clark-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "558770431faed802e9f1c521935873ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5440,
      "upload_time": "2014-03-10T00:09:50",
      "upload_time_iso_8601": "2014-03-10T00:09:50.345475Z",
      "url": "https://files.pythonhosted.org/packages/1a/42/fbb8ef57e7fe67e68884ba4a1ccb5af7bf4bee962573cd860ef00733725d/clark-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}