{
  "info": {
    "author": "fantaso",
    "author_email": "fantaso.code@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment :: Mozilla",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Communications :: Chat"
    ],
    "description": "<!-- logo -->\n<a href=\"https://www.fantaso.de\">\n<img src=\"/readme/fantaso.png\" align=\"right\" />\n</a>\n\n<!-- header -->\n<h1 style=\"text-align: left; margin-top:0px;\">\n  Simon, a Python Library for WhatsApp Web Automation\n</h1>\n\n> Browser automation for WhatsApp Web service with Python & Selenium.\n\n\n<!-- build -->\n<!-- [![Build Status][travis-image]][travis-link] -->\n\n\nProject consists to allow a user, with whatsapp installed in their phone,\nto connect their phone with whatsapp web service https://web.whatsapp.com and \nto automate the functionalities a user normally performs when using whatsapp as a chat app.\n\nSome functionalities:\n1. Reading messages\n1. Sending messages\n2. Detecting new messages' notifications.\n3. Replying to a specific (making a reference to the message you are replying to) message\n\n\n<br><br>\n\n---\n## Index:\n- #### Objectives\n    - Main Goal & User Story\n        - A) detecting new messages\n        - B) reading new message(s)\n        - C) replying a message\n        - D) send a message\n- #### Code Examples\n    - Login into whatsapp web, check you are logged in & logout\n    - Get all opened chats, go into the chat, read the last 10 messages from your friend and reply to the most recent message\n    - More examples\n- #### Information\n- #### Maintainer\n\n<br><br>\n\n---\n## Objectives\n### Main Goal & User Story\nSimon can detect new message(s), read them, analyse it and reply if needed.\n\n#### A) detecting new messages\n 1. get simon_opened_chats\n 2. inspect available user from top-bottom for notifications (only on available browser screen view)\n 3. click on the opened chat found with a new message notification icon\n\n#### B) reading new message(s)\n 1. get contact_chat\n 2. find \"n unread messages\" section\n 3. get first unread msg\n 4. read and analyse msg\n\n#### C) replying a message\n 1. get(hover) the reply icon (on the right-side of the message)\n 2. click on the reply icon\n 3. get the reply link(\"Reply\")\n 4. click the reply link (on browser: it puts cursor on the contact_send_message[message_field])\n\n#### D) send a message\n 1. get contact_send_message\n 2. write message\n 3. press enter to send msg.\n\n\n## Code Examples\nFor the library we are using the Page Pattern recommended by the selenium\npython library.\n\n### Login into whatsapp web, check you are logged in & logout\n```python\nimport time\n\nfrom selenium import webdriver\n\nfrom simon.accounts.pages import LoginPage\nfrom simon.header.pages import HeaderPage\nfrom simon.pages import BasePage\n\n# Creating the driver (browser)\ndriver = webdriver.Firefox()\ndriver.maximize_window()\n\n# 1. Login\n#       and uncheck the remember check box\n#       (Get your phone ready to read the QR code)\nlogin_page = LoginPage(driver)\nlogin_page.load()\nlogin_page.remember_me = False\ntime.sleep(7)\n\n\n# 2. The base page is inherited by all pages\n#       and here you can check whether any\n#       page is available on the screen of\n#       the browser.\n\n# we don't need to load the pages as whatsapp\n# web works as one-page web app\nbase_page = BasePage(driver)\nbase_page.is_title_matches()\nbase_page.is_welcome_page_available()\nbase_page.is_nav_bar_page_available()\nbase_page.is_search_page_available()\nbase_page.is_pane_page_available()\n# chat is only available after you open one\nbase_page.is_chat_page_available()\n\n\n# 3. Logout\nheader_page = HeaderPage(driver)\nheader_page.logout()\n\n# Close the browser\ndriver.quit()\n```\n\n### Get all opened chats, go into the chat, read the last 10 messages from your friend and reply to the most recent message\n```python\nimport time\n\nfrom selenium import webdriver\n\nfrom simon.accounts.pages import LoginPage\nfrom simon.chat.pages import ChatPage\nfrom simon.chats.pages import PanePage\nfrom simon.header.pages import HeaderPage\n\n\n# Creating the driver (browser)\ndriver = webdriver.Firefox()\ndriver.maximize_window()\n\n# Login\n#       and uncheck the remember check box\n#       (Get your phone ready to read the QR code)\nlogin_page = LoginPage(driver)\nlogin_page.load()\ntime.sleep(7)\n\n\n# 1. Get all opened chats\n#       opened chats are the one chats or conversations\n#       you already have in your whatsapp.\n#       IT WONT work if you are looking for a contact\n#       you have never started a conversation.\npane_page = PanePage(driver)\n\n# get all chats\nopened_chats = pane_page.opened_chats\n\n# iterating over them\nfor oc in opened_chats:\n    print(oc.name)  # contact name (as appears on your whatsapp)\n    print(oc.icon)  # the url of the image\n    print(oc.last_message)\n    print(oc.last_message_time)  # datetime object\n    print(oc.has_notifications())  # are there unread messages?\n    print(oc.notifications)  # returns a integer with the qty of new messages, if there are.\n\n\n# 2. Go into the chat\n#       just click on one to open the chat page\n#       (where the conversation is happening)\nfirst_chat = opened_chats[0]\nfirst_chat.click()\n\n# 3. Read the last 10 messages from your contact\nchat_page = ChatPage(driver)\nmsgs = chat_page.messages.newest(10, filterby='contact')\n\nfor msg in msgs:\n    print(msg.contact) # name (all should be the same)\n    print(msg.date)\n    print(msg.text)\n    print(msg.status)\n\n\n# 4. Reply to the most recent message\nmsg = msgs[0]  # get the first of the messages query done in previous step\nmsg = chat_page.messages.newest(filterby='contact')\n# Be careful as library can only now reply to text message\n# Replying to a msg type (video, image, giff, etc) is not implemented yet. \nmsg.reply(\"This a reply to a specific text msg.\")\n\n\n# Logout\nheader_page = HeaderPage(driver)\nheader_page.logout()\n\n# Close the browser\ndriver.quit()\n```\n\n### More examples\nFor more functionalities that is offered by the library please check\nthe [tests](https://github.com/Fantaso/whatsapp-web/tree/master/simon/tests). Here a couple:\n- [Send a multi line message](https://github.com/Fantaso/whatsapp-web/blob/75889e0517d2fa0913b52131814d416d908976da/simon/tests/chat.py#L341)\n- [Send an animated message](https://github.com/Fantaso/whatsapp-web/blob/75889e0517d2fa0913b52131814d416d908976da/simon/tests/chat.py#L353)\n- [Get (If there are any) unread messages](https://github.com/Fantaso/whatsapp-web/blob/75889e0517d2fa0913b52131814d416d908976da/simon/tests/chat.py#L85)\n- [Get the oldest message](https://github.com/Fantaso/whatsapp-web/blob/75889e0517d2fa0913b52131814d416d908976da/simon/tests/chat.py#L124)\n- [Get all messages (order by default: newest)](https://github.com/Fantaso/whatsapp-web/blob/75889e0517d2fa0913b52131814d416d908976da/simon/tests/chat.py#L157)\n- [Get most only your recents messages](https://github.com/Fantaso/whatsapp-web/blob/75889e0517d2fa0913b52131814d416d908976da/simon/tests/chat.py#L190)\n\n_**Note:** If you will try to run the test yourself locally, some of them won't\nwork as some tests are done offline with some html templates that are not available\nin the repo_\n\n<!--\n## Whatsapp Web UI\n- left side (top-bottom)\n  - header (profile, status, new chat, menu)\n  - search (chats, groups, contacts[new chat], messages)\n  - opened_chats (chat, contact icon, contact name, arrow status, truncated msg, time, new msg notification(opt))\n\n    NOTE: chats are visible only when scrolling and are visible on the screen of the browser.\n\n- right side (top-bottom)\n  - contact_detail (contact icon, contact name, ... , search, attachment, menu)\n  - contact_chat (messages)\n  - contact_send_message (smileys, message_field, record audio)\n\n\n------------------------------------------------\n------------------------------------------------\n#### In Current Chat\n- Simon can send a message\n- Simon can receive a message\n#### ~In Current Chat\n- Simon can search people in open chats...\n-->\n\n<br>\n\n## Information:\n| Technology Stack |  |  |\n| :- | :-: | :- |\n| Python                    | ![language][python]                   | Language |\n| Selenium                  | ![selenium][selenium]                 | Browser Automation |\n| Whatsapp Web              | ![whatsapp][whatsapp]                 | Chat Service |\n\n<br><br>\n\n\n## Maintainer\nGet in touch -â€“> [fantaso][fantaso]\n\n\n<!-- Links -->\n<!-- Profiles -->\n[github-profile]: https://github.com/fantaso/\n[linkedin-profile]: https://www.linkedin.com/\n[fantaso]: https://github.com/fantaso/\n<!-- Extra -->\n\n<!-- Repos -->\n[github-repo]: https://github.com/Fantaso/whatsapp-web\n\n<!-- Builds -->\n[travis-link]: https://travis-ci.org/\n[travis-image]: https://travis-ci.org/\n\n<!-- images -->\n[python]: readme/python.png\n[selenium]: readme/selenium.png\n[whatsapp]: readme/whatsapp.png\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Fantaso/whatsapp-web",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "whatsapp-web",
    "package_url": "https://pypi.org/project/whatsapp-web/",
    "platform": "",
    "project_url": "https://pypi.org/project/whatsapp-web/",
    "project_urls": {
      "Homepage": "https://github.com/Fantaso/whatsapp-web"
    },
    "release_url": "https://pypi.org/project/whatsapp-web/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python library to automate easily whatsapp web",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7782837,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6236decdcc9b89a9f1a82fe3368d1306d0c4b0ecbd66a326b06ff8f983dd5cf1",
          "md5": "d53f75481c4d863c8ddeaeb73dc94a6d",
          "sha256": "c17abb6563a8aa5a28fd37fcef4bc0a3c46618c7265d186cc40352474466f72e"
        },
        "downloads": -1,
        "filename": "whatsapp_web-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d53f75481c4d863c8ddeaeb73dc94a6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21754,
        "upload_time": "2020-07-25T01:14:01",
        "upload_time_iso_8601": "2020-07-25T01:14:01.667659Z",
        "url": "https://files.pythonhosted.org/packages/62/36/decdcc9b89a9f1a82fe3368d1306d0c4b0ecbd66a326b06ff8f983dd5cf1/whatsapp_web-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77ded5ec2e3d6fa4aa91147aae803e3c7d01ea87047201f78a71b9b2e8fe14a2",
          "md5": "9a7d49f731d23494d74a882a64e00292",
          "sha256": "36b22656de4526a73c3ec24a51828df3f4092d9a6fe50db1b8209c8634950a72"
        },
        "downloads": -1,
        "filename": "whatsapp-web-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a7d49f731d23494d74a882a64e00292",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19141,
        "upload_time": "2020-07-25T01:14:04",
        "upload_time_iso_8601": "2020-07-25T01:14:04.678781Z",
        "url": "https://files.pythonhosted.org/packages/77/de/d5ec2e3d6fa4aa91147aae803e3c7d01ea87047201f78a71b9b2e8fe14a2/whatsapp-web-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6236decdcc9b89a9f1a82fe3368d1306d0c4b0ecbd66a326b06ff8f983dd5cf1",
        "md5": "d53f75481c4d863c8ddeaeb73dc94a6d",
        "sha256": "c17abb6563a8aa5a28fd37fcef4bc0a3c46618c7265d186cc40352474466f72e"
      },
      "downloads": -1,
      "filename": "whatsapp_web-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d53f75481c4d863c8ddeaeb73dc94a6d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21754,
      "upload_time": "2020-07-25T01:14:01",
      "upload_time_iso_8601": "2020-07-25T01:14:01.667659Z",
      "url": "https://files.pythonhosted.org/packages/62/36/decdcc9b89a9f1a82fe3368d1306d0c4b0ecbd66a326b06ff8f983dd5cf1/whatsapp_web-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77ded5ec2e3d6fa4aa91147aae803e3c7d01ea87047201f78a71b9b2e8fe14a2",
        "md5": "9a7d49f731d23494d74a882a64e00292",
        "sha256": "36b22656de4526a73c3ec24a51828df3f4092d9a6fe50db1b8209c8634950a72"
      },
      "downloads": -1,
      "filename": "whatsapp-web-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9a7d49f731d23494d74a882a64e00292",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19141,
      "upload_time": "2020-07-25T01:14:04",
      "upload_time_iso_8601": "2020-07-25T01:14:04.678781Z",
      "url": "https://files.pythonhosted.org/packages/77/de/d5ec2e3d6fa4aa91147aae803e3c7d01ea87047201f78a71b9b2e8fe14a2/whatsapp-web-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}