{
  "info": {
    "author": "Kartik",
    "author_email": "kartik42sharma@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Script Timer v4\n\nThis is a simple script timer class. \nIt is used to time various sections of code, with minimal additional code\nIt has use cases such as :\n* Testing which section of code is taking more time, in order to optimise time complexity \n* Logging time taken by total script and its subsections\n* Keeping track of which subsection is running at the moment, within the script (for cases where scripts take minutes or more)\n\n## Features\n* Time different sections (and their subsections) of code with minimal code\n* Infinite subsection levels possible\n* Customisable logging\n* Live log\n* Starting next section automatically stops previous section\n* Automatic adjustment of time unit i.e. whether it should be showed in seconds, minutes.... upto days unit\n\n## Usage\n\nThis is a object oriented approach. This allows multiple timers to be made in the same script\nFirst, we have to import the script and create a script timer object\n\n```\nimport ScriptTimer as st\ntimer = st.Timer()\n```\n\nThis object will be used for all timing purposes\n\n## Script timer object functions :\n\n### 0. Constructor( verbose = 0)\n\n* verbose : has different levels of logging while starting/ending a subsection. It can take the following values :\n    * 0 : No logging while start() or end() are called (DEFAULT)\n    * 1 : Print only section names when their respective start()/end() are called\n    * 2 : Print section names with time the section started\n    * 3 : Print section name, its start date and start time \n\n### 1. start( section = '0', label = 'Start'):\nThis function starts the script timer/any subsection of the script\n\n#### Arguments :\n* section : Single string containing numbers seperated by fullstop.\n            Represents the section of code being tested\n* label   : Name given to the section of the code. Useful in case of many/complicated sections\n            If no label is given, then a default label of '-No Label-' is given\n\n#### Examples  : \n```\n# 1. start overall script timer (optional)\ntimer.start()\n\n# 2. Typical command to start a particular section\ntimer.start('1', 'Data Cleaning')\n\n# 3. starting a new section automatically stops the previous running section \n# (in this case, section 1 (Data Cleaning) is ended automatically before starting section 2 ( Data Preprocessing))\ntimer.start('2', 'Data Preporcessing')\n```\n\n### 2. end( section = '0', label = 'Start'):\nEnds a particular subsection, or even the entire timer\n#### Arguments\n* section : Single string containing numbers seperated by fullstop.\n            Represents the section of code being tested\n\n#### Examples  : \n```\n# 1. Typical command to start and end a particular section of code\ntimer.start('1', 'Data Cleaning')\n#\n# your code\n#\ntimer.end('1')\n\n\n# 2. end whole timer\ntimer.end()\n```\n\n### 3. show( level = 1000, verbose = 0 ):\nThis function is used to print the various subsections and their respective time taken\n\n#### Arguments\n* level   : The inner levels of sections upto which time-taken must be shown\n* verbose : Levels of output to be shown. It can take the values of :\n    * 0 :   \n        * Label : label of the section\n        * Time_Taken : time taken by the section\n        * And All above columns\n    * 1 :   \n        * Chronology : order in which the sections were run in the script\n        * And All above columns\n    * 2 :   \n        * Start_Time\n        * End_Time\n        * And All above columns\n    * 3 :   \n        * Start_Date\n        * End_Date\n        * And All above columns\n    * 4 :   \n        * Raw_Time : time taken by section in Epoch format\n        * Raw_Start: start time of section in Epoch format\n        * Raw_End  : end time of section in Epoch format\n        * And All above columns\n\n### 4. reset()\nresets the whole timer\n\n### 5. get_table()\nReturns pandas dataframe representing all subsections with various attributes (described in show())\n\n### 6. save( filename = 'Timer_logs' )\nsaves the timer pandas dataframe into a csv file with user-given filename in the python pwd path\n \n\n## Example \n\n### Code :\n```\nimport ScriptTimer\nimport time\n\n# Initialising object with high verbose level\nst = ScriptTimer.Timer(verbose = 2)\n\n# Starting timer without any section will start the overall timer\n# This is not necessary at all, but shown here for reference purposes\nst.start()\ntime.sleep(1)\n\n# Starting a particular section\nst.start('1', 'Data Fetching')\ntime.sleep(1)\n\n# Starting next section will automatically stop previous section\nst.start('2', 'Data Augmentation')\ntime.sleep(1)\n\n# Starting a subsection\nst.start('2.1', 'Data Cleaning')\ntime.sleep(1)\n\n# restarting the same section\nst.start('2.1', 'Data Cleaning')\ntime.sleep(1)\n\nst.start('2.2', 'Data Preprocessing')\ntime.sleep(1)\n\n# Ending a section will end all its subsections as well\nst.end('2')\ntime.sleep(1)\n\n# Creating a subsection without creating it's parent section possible.\n# For eg. Here, section 3 had not been created, but 3.1 is being started\nst.start('3.1', 'Hypothesis Testing')\ntime.sleep(1)\n\n# Ending the whole timer\nst.end()\n\n# Showing the logs of timer object\nst.show()\n\n# Showing logs of only top-level sections\nprint('\\nShowing logs of only top-level sections)\nst.show(level = 1)\n\n# Showing logs at a high verbose level\nprint('\\nShowing logs at a high verbose level)\nst.show(verbose = 3)\n```\n### Output :\n```\nStarted : 1\t Data Fetching\t at 16:57:00\nEnded   : 1\t Data Fetching\t at 16:57:01\nStarted : 2\t Data Augmentation\t at 16:57:01\nStarted : 2.1\t Data Cleaning\t at 16:57:02\nStarted : 2.1\t Data Cleaning\t at 16:57:03\nEnded   : 2.1\t Data Cleaning\t at 16:57:04\nStarted : 2.2\t Data Preprocessing\t at 16:57:04\nEnded   : 2.2\t Data Preprocessing\t at 16:57:05\nStarted : 3\t -No Label-\t at 16:57:06\nStarted : 3.1\t Hypothesis Testing\t at 16:57:06\nEnded   : 3.1\t Hypothesis Testing\t at 16:57:07\n                      Label   Time_Taken\nSection\n0             Entire Script  8.0252 Secs\n1             Data Fetching  1.0017 Secs\n2         Data Augmentation  4.0147 Secs\n2.1           Data Cleaning  1.0051 Secs\n2.2      Data Preprocessing  1.0038 Secs\n3                -No Label-  1.0031 Secs\n3.1      Hypothesis Testing  1.0029 Secs\n\nShowing logs of only top-level sections\n                     Label   Time_Taken\nSection\n0            Entire Script  8.0252 Secs\n1            Data Fetching  1.0017 Secs\n2        Data Augmentation  4.0147 Secs\n3               -No Label-  1.0031 Secs\n\nShowing logs at a high verbose level\n                      Label   Time_Taken  Chronology  Start_Date Start_Time    End_Date  End_Time\nSection\n0             Entire Script  8.0252 Secs         1.0  18-09-2021   16:56:59  18-09-2021  16:57:07\n1             Data Fetching  1.0017 Secs         2.0  18-09-2021   16:57:00  18-09-2021  16:57:01\n2         Data Augmentation  4.0147 Secs         3.0  18-09-2021   16:57:01  18-09-2021  16:57:05\n2.1           Data Cleaning  1.0051 Secs         4.0  18-09-2021   16:57:03  18-09-2021  16:57:04\n2.2      Data Preprocessing  1.0038 Secs         5.0  18-09-2021   16:57:04  18-09-2021  16:57:05\n3                -No Label-  1.0031 Secs         6.0  18-09-2021   16:57:06  18-09-2021  16:57:07\n3.1      Hypothesis Testing  1.0029 Secs         7.0  18-09-2021   16:57:06  18-09-2021  16:57:07\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kartik-99/scriptTimer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scriptTimer",
    "package_url": "https://pypi.org/project/scriptTimer/",
    "platform": null,
    "project_url": "https://pypi.org/project/scriptTimer/",
    "project_urls": {
      "Homepage": "https://github.com/kartik-99/scriptTimer"
    },
    "release_url": "https://pypi.org/project/scriptTimer/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A script that records time taken by python scripts",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14530240,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be79585cef65dfa88a262c10fbd0a4cdb6ba1bfcd6d51eafc91f6d9a4466a01e",
          "md5": "b79a17b8cb5820f06d4bdf015fa8ad38",
          "sha256": "7e65946a453fefc738c8c714f4dbef8c3e636d7ed340a25b6609b6ab61addaea"
        },
        "downloads": -1,
        "filename": "scriptTimer-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b79a17b8cb5820f06d4bdf015fa8ad38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7843,
        "upload_time": "2022-02-27T15:31:12",
        "upload_time_iso_8601": "2022-02-27T15:31:12.166233Z",
        "url": "https://files.pythonhosted.org/packages/be/79/585cef65dfa88a262c10fbd0a4cdb6ba1bfcd6d51eafc91f6d9a4466a01e/scriptTimer-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1b7dd92277b8dadb3675c1861b2a7a99e1a07b8b53bc62525ebdb92fc61a47c",
          "md5": "5ca29ffc01b70721907bc370c8a13c90",
          "sha256": "d1cd9c854f3ee89f43b9a9535b24241cd94f10cee17e21cc6f5c12e51dc56d02"
        },
        "downloads": -1,
        "filename": "scriptTimer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ca29ffc01b70721907bc370c8a13c90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8490,
        "upload_time": "2022-02-27T15:31:14",
        "upload_time_iso_8601": "2022-02-27T15:31:14.613772Z",
        "url": "https://files.pythonhosted.org/packages/f1/b7/dd92277b8dadb3675c1861b2a7a99e1a07b8b53bc62525ebdb92fc61a47c/scriptTimer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a934962489e4a3290bc1e9352b24d4b8dee68bf9d712daf98ec86841eb5c113",
          "md5": "adb94535112f4ea216b4d4c7a968a5db",
          "sha256": "60162aa2b0d953f75d13f1daf398b34fa3762443f3e3c50fc760f2f2d2b1a130"
        },
        "downloads": -1,
        "filename": "scriptTimer-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "adb94535112f4ea216b4d4c7a968a5db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7830,
        "upload_time": "2022-07-24T06:02:35",
        "upload_time_iso_8601": "2022-07-24T06:02:35.482836Z",
        "url": "https://files.pythonhosted.org/packages/0a/93/4962489e4a3290bc1e9352b24d4b8dee68bf9d712daf98ec86841eb5c113/scriptTimer-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6d7610f5706e7b2c98d1062cc077a2be299c3762e299f269cb375537577649d",
          "md5": "d94d4e9d585b0bb2049afd5aee8bd472",
          "sha256": "e7ad235d391d904196bd9e8b2cc38124098df5b30dd6331d1116dc78f9f0cd28"
        },
        "downloads": -1,
        "filename": "scriptTimer-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d94d4e9d585b0bb2049afd5aee8bd472",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8420,
        "upload_time": "2022-07-24T06:02:37",
        "upload_time_iso_8601": "2022-07-24T06:02:37.839590Z",
        "url": "https://files.pythonhosted.org/packages/c6/d7/610f5706e7b2c98d1062cc077a2be299c3762e299f269cb375537577649d/scriptTimer-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a934962489e4a3290bc1e9352b24d4b8dee68bf9d712daf98ec86841eb5c113",
        "md5": "adb94535112f4ea216b4d4c7a968a5db",
        "sha256": "60162aa2b0d953f75d13f1daf398b34fa3762443f3e3c50fc760f2f2d2b1a130"
      },
      "downloads": -1,
      "filename": "scriptTimer-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "adb94535112f4ea216b4d4c7a968a5db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7830,
      "upload_time": "2022-07-24T06:02:35",
      "upload_time_iso_8601": "2022-07-24T06:02:35.482836Z",
      "url": "https://files.pythonhosted.org/packages/0a/93/4962489e4a3290bc1e9352b24d4b8dee68bf9d712daf98ec86841eb5c113/scriptTimer-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6d7610f5706e7b2c98d1062cc077a2be299c3762e299f269cb375537577649d",
        "md5": "d94d4e9d585b0bb2049afd5aee8bd472",
        "sha256": "e7ad235d391d904196bd9e8b2cc38124098df5b30dd6331d1116dc78f9f0cd28"
      },
      "downloads": -1,
      "filename": "scriptTimer-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d94d4e9d585b0bb2049afd5aee8bd472",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8420,
      "upload_time": "2022-07-24T06:02:37",
      "upload_time_iso_8601": "2022-07-24T06:02:37.839590Z",
      "url": "https://files.pythonhosted.org/packages/c6/d7/610f5706e7b2c98d1062cc077a2be299c3762e299f269cb375537577649d/scriptTimer-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}