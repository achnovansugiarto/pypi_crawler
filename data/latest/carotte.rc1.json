{
  "info": {
    "author": "toxinu",
    "author_email": "toxinu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3"
    ],
    "description": "Carotte\n=======\n\nCarotte is a very lightweight Celery on zmq.\n\nInstall\n-------\n\n::\n\n    pip install carotte\n\n\nGetting started\n---------------\n\nCreate your ``app.py``: ::\n\n    from carotte import Carotte\n\n    my_app = Carotte()\n\n    @my_app.task\n    def hello_world(name):\n        return 'Hello %s!' % name\n\nRun your worker (default on \"tcp://127.0.0.1:5550\"): ::\n\n    carotte worker --app app:my_app\n\nRun tasks: ::\n\n    >>> from app import hello_world\n    >>> t = hello_world.delay(['Carotte'])\n    >>> t.success\n    >>> True\n    >>> t.result\n    >>> 'Hello Carotte!'\n\nOr run a client (if don't have tasks on your system): ::\n\n    >>> from carotte import Client\n    >>> client = Client()\n    >>> task = client.run_task('hello_world', ['Carotte'])\n    >>> task.success\n    >>> True\n    >>> task.result\n    >>> 'Hello Carotte!'\n\nScheduled tasks\n---------------\n\nCarotte is not a scheduler, its an asynchronous tasks runner.\nBut you can really set up scheduled tasks with schedule_.\n\nYour ``app.py``: ::\n\n    import requests\n    from carotte import Carotte\n\n    my_app = Carotte()\n\n    @app.task\n    def get(url):\n        r = requests.get(url)\n        if r.status_code != 200:\n            #Â Do stuff\n            return False\n        return True\n\nYour ``scheduler.py``: ::\n\n    import time\n    import schedule\n    from app import get\n\n    schedule.every(10).seconds.do(get, 'http://google.com')\n\n    while True:\n        schedule.run_pending()\n        time.sleep(1)\n\nRun your worker and your scheduler: ::\n\n    carotte worker --app app:my_app\n    python scheduler.py\n\n.. _schedule: https://github.com/dbader/schedule\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/toxinu/carotte",
    "keywords": "python zmq pyzmq celery task async",
    "license": "The MIT License (MIT)\n\nCopyright (c) 2014 toxinu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
    "maintainer": "",
    "maintainer_email": "",
    "name": "carotte",
    "package_url": "https://pypi.org/project/carotte/",
    "platform": "",
    "project_url": "https://pypi.org/project/carotte/",
    "project_urls": {
      "Homepage": "https://github.com/toxinu/carotte"
    },
    "release_url": "https://pypi.org/project/carotte/0.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Carotte is a very lightweight Celery on zmq",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8802303,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57d892c98119f568f4f934f5d0d94df84338d3270155f8481bc4122c0f216ffb",
          "md5": "fdbe6cdd6b7e275190bacb6b40545a7c",
          "sha256": "f5acf330a019d9495e4b1f96d7fef5b3504b0e73682d1e9471ab2cd5010c2473"
        },
        "downloads": -1,
        "filename": "carotte-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fdbe6cdd6b7e275190bacb6b40545a7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9055,
        "upload_time": "2020-12-02T16:04:35",
        "upload_time_iso_8601": "2020-12-02T16:04:35.510366Z",
        "url": "https://files.pythonhosted.org/packages/57/d8/92c98119f568f4f934f5d0d94df84338d3270155f8481bc4122c0f216ffb/carotte-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57d892c98119f568f4f934f5d0d94df84338d3270155f8481bc4122c0f216ffb",
        "md5": "fdbe6cdd6b7e275190bacb6b40545a7c",
        "sha256": "f5acf330a019d9495e4b1f96d7fef5b3504b0e73682d1e9471ab2cd5010c2473"
      },
      "downloads": -1,
      "filename": "carotte-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "fdbe6cdd6b7e275190bacb6b40545a7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9055,
      "upload_time": "2020-12-02T16:04:35",
      "upload_time_iso_8601": "2020-12-02T16:04:35.510366Z",
      "url": "https://files.pythonhosted.org/packages/57/d8/92c98119f568f4f934f5d0d94df84338d3270155f8481bc4122c0f216ffb/carotte-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}