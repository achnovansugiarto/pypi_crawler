{
  "info": {
    "author": "",
    "author_email": "Andre Hora <andrehoraa@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": "[![Tests](https://github.com/andrehora/spotflow/actions/workflows/main.yml/badge.svg)](https://github.com/andrehora/spotflow/actions/workflows/main.yml)\n\n# SpotFlow\n\nSpotFlow is a tool to ease the runtime analysis of Python programs.\nWith SpotFlow, you can easily extract information about executed methods, run lines, argument values, return values, variable states, and thrown exceptions.\n\n## Install\n\n```\npip install spotflow\n```\n\n## Quick usage\n\nA simple code to be monitored in `sample.py`:\n\n```python\n# content of sample.py\ndef absolute(x):\n    if x < 0:\n        x = -x\n    return x\n\nabsolute(-10) # 10\n```\n\nTo run and monitor function `absolute` in `sample.py`:\n```\n$ python -m spotflow -t absolute sample\n```\n\nThe result:\n```\nRunning and monitoring: sample\n====================== Result ======================\nMonitoredProgram\n- methods: 1\n- calls: 1\nMonitoredMethod\n- name: absolute\n- calls: 1\nMethodCall\n- distinct_run_lines: [2, 3, 4]\n- run_lines: [2, 3, 4]\nArgState\n- x: -10\nVarStateHistory\n- x: -10, 10\nReturnState: 10\n```\n\n---\n\nAnother code to be monitored in `sample.py`, with two calls:\n\n```python\n# content of sample.py\ndef sum(iter, start=0):\n    count = start\n    for i in iter:\n        count += i\n    return count\n\nsum([1, 2]) # 3\nsum([1, 2, 3], 1) # 7\n```\n\nTo run and monitor function `sum` in `sample.py`:\n```\n$ python -m spotflow -t sum sample\n```\n\nThe result:\n```\nRunning and monitoring: sample\n====================== Result ======================\nMonitoredProgram\n- methods: 1\n- calls: 2\nMonitoredMethod\n- name: sum\n- calls: 2\nMethodCall\n- distinct_run_lines: [2, 3, 4, 5]\n- run_lines: [2, 3, 4, 3, 4, 3, 5]\nArgState\n- iter: [1, 2]\n- start: 0\nVarStateHistory\n- iter: [1, 2]\n- start: 0\n- count: 0, 1, 3\n- i: 1, 2\nReturnState: 3\nMethodCall\n- distinct_run_lines: [2, 3, 4, 5]\n- run_lines: [2, 3, 4, 3, 4, 3, 4, 3, 5]\nArgState\n- iter: [1, 2, 3]\n- start: 1\nVarStateHistory\n- iter: [1, 2, 3]\n- start: 1\n- count: 1, 2, 4, 7\n- i: 1, 2, 3\nReturnState: 7\n```\n\n---\n\nYou can also monitor tests.\nFor example, to monitor the test case [`TestMessageAPI`](https://github.com/python/cpython/blob/4702552885811d0af8f0e4545f494336801ad4dd/Lib/test/test_email/test_email.py#L55\n) of the Python Standard Library [`email`](https://docs.python.org/3/library/email.examples.html):\n\n```\n$ python -m spotflow -t email unittest test.test_email.test_email.TestMessageAPI\n```\n\nMonitoring other tests of the Python Standard Library:\n```\n$ python -m spotflow -t ast unittest test.test_ast\n$ python -m spotflow -t gzip unittest test.test_gzip\n$ python -m spotflow -t urllib unittest test.test_urlparse\n$ python -m spotflow -t json unittest test.test_json\n$ python -m spotflow -t calendar unittest test.test_calendar\n```\n\n## Usage\n\nSpotFlow can be run from the command-line or programmatically via API.\n\n### Command-line\n\nWe can use SpotFlow to collect data from the execution of any Python program.\nFor example, to run `my_program.py`, we could originally use the following command-line:\n\n```\n# Running a Python program\n$ python -m my_program\n```\n\nThe same program can be run (and monitored) under SpotFlow with following command-line:\n```\n# Running a Python program + SpotFlow\n$ python -m spotflow -t <target> my_program\n```\n\nThe argument `-t` represents the target entity to be monitored.\nWe can pass the full name of the target method (in the format `module.Class.method`) or a prefix to monitor multiple methods.\nFor example, we can pass the prefix \n`parser` (to monitor all methods of a specific module), \n`parser.StringParser` (to monitor all methods of a specific class),\nor the full method name (to monitor a single method).\nThe final mandatory argument is the original command-line, which is in this case `my_program`.\n\nIn a similar way, we can use SpotFlow to monitor the execution of test suites.\nFor example, to run a test `testX.py` under SpotFlow, the following change would be needed with the unittest framework:\n\n```\n# Running unittest\n$ python -m unittest testX\n\n# Running unittest + SpotFlow\n$ python -m spotflow -t <target> unittest testX\n```\n\n### API\n\nThe other way to run SpotFlow is via its API.\nFor example, consider a function called `my_program()`.\nIt can be run and monitored with SpotFlow with the following code:\n\n```python\nflow = SpotFlow()\nflow.target_methods(target)\n\nflow.start()\n\n# code to be run and monitored\nmy_program()\n\nflow.stop()\n\n# the result is a MonitoredProgram object\nmonitored_program = flow.result()\n```\n\nClass `SpotFlow` represents the programmatic access to SpotFlow.\nIn method `target_methods()`, we can pass the target entities to be monitored, which can be the full name of the target method or a prefix to monitor multiple methods, like in the command-line.\nMethod `start()` starts the monitoring.\nThe monitoring only occurs in code called after `start()`.\nAfter calling `start()`, we must also call `stop()` to stop the monitoring.\nLastly, method `result()` provides a `MonitoredProgram` object.\n\n## Monitored entities\n\n- `MonitoredProgram`: This class is a repository of monitored methods, which can be used to access all collected data.\n\n- `MonitoredMethod`: It represents a monitored method (or function). It has method calls and contains static information about the method/function, like name, full name, class name (for methods), file name, LOC, source code, etc.\n\n\n- `MethodCall`: This class represents a method call that happens at runtime. It includes data about the caller, call stack, and executed lines. A method call also has a call state, which records information like variable and argument states.\n\n- `CallState`: This class holds the state of a method call, with information about argument states (`ArgState`), return states (`ReturnState`), thrown exceptions (`ExceptionState`), and local variable states (`VarStateHistory`).\n\n- `State`: It represents a state at runtime, such as a variable, argument, return, or exception state.\nAll states have information about its runtime value, runtime type, and line number in code.\nIn addition, `VarState` and `ArgState` have information about its name.\n\n- `VarStateHistory`: This class holds all the states of a local variable in a method call. Notice that it is composed of variable states, representing the fact that a variable may change its value and therefore can have multiple states over time.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "dynamic-analysis,testing",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spotflow",
    "package_url": "https://pypi.org/project/spotflow/",
    "platform": null,
    "project_url": "https://pypi.org/project/spotflow/",
    "project_urls": {
      "Bug Tracker": "https://github.com/andrehora/spotflow/issues",
      "Homepage": "https://github.com/andrehora/spotflow"
    },
    "release_url": "https://pypi.org/project/spotflow/1.1.0/",
    "requires_dist": [
      "coverage==6.5.0",
      "pygments",
      "pytest"
    ],
    "requires_python": ">=3.7",
    "summary": "Runtime analysis for Python programs",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15716000,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ddd85cffc1586d2bc302b412765148f0407473174bd4bad81fff309bfe5c723",
          "md5": "b867c64a7b241d13ca1048c7ec3c20c5",
          "sha256": "1945d3aebacb9a2aa9df249b9338834fe7e486bd3eb3bead634d467ec181dc90"
        },
        "downloads": -1,
        "filename": "spotflow-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b867c64a7b241d13ca1048c7ec3c20c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 41066,
        "upload_time": "2022-10-21T19:06:07",
        "upload_time_iso_8601": "2022-10-21T19:06:07.689718Z",
        "url": "https://files.pythonhosted.org/packages/1d/dd/85cffc1586d2bc302b412765148f0407473174bd4bad81fff309bfe5c723/spotflow-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6fd913586f6376802995af31d3032465bf3fd782626012df74f571086279ec6",
          "md5": "ee760c2175143cee0105ea7408f69f97",
          "sha256": "eb20201c871f314fe374b9ba6bfba983f2ed6e3a216316216964fa8ecedcf70d"
        },
        "downloads": -1,
        "filename": "spotflow-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ee760c2175143cee0105ea7408f69f97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 51911,
        "upload_time": "2022-10-21T19:06:09",
        "upload_time_iso_8601": "2022-10-21T19:06:09.835984Z",
        "url": "https://files.pythonhosted.org/packages/a6/fd/913586f6376802995af31d3032465bf3fd782626012df74f571086279ec6/spotflow-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14d521ca569d5c6e0629e179d847d79580e850685ca6fc8f9eecd3c5fd02f90c",
          "md5": "4f053c11de0a3f4075a34ae82e3aacdf",
          "sha256": "e2217764754a6410a0972b08e3fa30451128ced297f5168b7dbb85fadeae2414"
        },
        "downloads": -1,
        "filename": "spotflow-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f053c11de0a3f4075a34ae82e3aacdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 37619,
        "upload_time": "2022-11-09T19:39:27",
        "upload_time_iso_8601": "2022-11-09T19:39:27.594793Z",
        "url": "https://files.pythonhosted.org/packages/14/d5/21ca569d5c6e0629e179d847d79580e850685ca6fc8f9eecd3c5fd02f90c/spotflow-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3fbeccc1423135829a6af24fc7f20d243b2259aab0afb13150624a5e7ce928f",
          "md5": "d46551fcafdf4a76e9ac4fa79429b2cb",
          "sha256": "5585f6541359f28ea4178b6fd3fae3e8356d2ea4a6f35037e349b167e72853f9"
        },
        "downloads": -1,
        "filename": "spotflow-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d46551fcafdf4a76e9ac4fa79429b2cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 52940,
        "upload_time": "2022-11-09T19:39:31",
        "upload_time_iso_8601": "2022-11-09T19:39:31.243625Z",
        "url": "https://files.pythonhosted.org/packages/b3/fb/eccc1423135829a6af24fc7f20d243b2259aab0afb13150624a5e7ce928f/spotflow-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14d521ca569d5c6e0629e179d847d79580e850685ca6fc8f9eecd3c5fd02f90c",
        "md5": "4f053c11de0a3f4075a34ae82e3aacdf",
        "sha256": "e2217764754a6410a0972b08e3fa30451128ced297f5168b7dbb85fadeae2414"
      },
      "downloads": -1,
      "filename": "spotflow-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f053c11de0a3f4075a34ae82e3aacdf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 37619,
      "upload_time": "2022-11-09T19:39:27",
      "upload_time_iso_8601": "2022-11-09T19:39:27.594793Z",
      "url": "https://files.pythonhosted.org/packages/14/d5/21ca569d5c6e0629e179d847d79580e850685ca6fc8f9eecd3c5fd02f90c/spotflow-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3fbeccc1423135829a6af24fc7f20d243b2259aab0afb13150624a5e7ce928f",
        "md5": "d46551fcafdf4a76e9ac4fa79429b2cb",
        "sha256": "5585f6541359f28ea4178b6fd3fae3e8356d2ea4a6f35037e349b167e72853f9"
      },
      "downloads": -1,
      "filename": "spotflow-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d46551fcafdf4a76e9ac4fa79429b2cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 52940,
      "upload_time": "2022-11-09T19:39:31",
      "upload_time_iso_8601": "2022-11-09T19:39:31.243625Z",
      "url": "https://files.pythonhosted.org/packages/b3/fb/eccc1423135829a6af24fc7f20d243b2259aab0afb13150624a5e7ce928f/spotflow-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}