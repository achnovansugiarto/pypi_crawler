{
  "info": {
    "author": "'Rick Gelhausen, Florian Eggenhofer'",
    "author_email": "egg@informatik.uni-freiburg.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img src=\"HRIBO.png\" width=\"620\">\n\n# High-throughput annotation by Ribo-seq\n\n[![GitHub](https://img.shields.io/github/tag/RickGelhausen/HRIBO.svg)](https://github.com/RickGelhausen/HRIBO) \n[![Snakemake](https://img.shields.io/badge/snakemake-â‰¥5.10.0-brightgreen.svg)](https://snakemake.bitbucket.io) \n[![Documentation Status](https://readthedocs.org/projects/hribo/badge/?version=latest)](http://hribo.readthedocs.io/?badge=latest)\n[![PyPI Latest Release](https://img.shields.io/pypi/v/hribo.svg)](https://pypi.org/project/hribo/)\n\nWe present HRIBO (High-throughput annotation by Ribo-seq), a workflow to enable reproducible and high-throughput analysis of bacterial Ribo-seq data. The workflow performs all required pre-processing steps and quality control.  Importantly, HRIBO outputs annotation-independent ORF predictions based on two complementary prokaryotic-focused tools, and integrates them with additional computed features. This facilitates both the rapid discovery of ORFs and their prioritization for functional characterization.\n\nFor a detailed description of this workflow, the installation, usage and examples, please refer to the [ReadTheDocs documentation](http://hribo.readthedocs.io/?badge=latest).\n\nHRIBO can be installed with all dependencies via [conda](https://conda.io/docs/install/quick.html). Once you have conda installed simply type:\n\n         conda create -c bioconda -c conda-forge -n snakemake snakemake \n         \n         source activate snakemake\n\n### <u>Basic usage</u>\n\nThe retrieval of input files and running the workflow locally and on a server cluster via a queuing system is\nworking as follows. Create a project directory and change into it:\n\n         mkdir project\n         cd project\n\nRetrieve the HRIBO from GitHub:\n\n         git clone git@github.com:gelhausr/HRIBO.git\n\nThe workflow requires a genome sequence (fasta), an annotation file (gtf) and the sequencing results files (fastq).\nWe recommend retrieving both the genome and the annotation files from [Ensembl Genomes](http://ensemblgenomes.org/).\nCopy the genome and the annotation file into the project folder, decompress them and name them genome.fa and annotation.gtf.\n\nCreate a folder fastq and copy your compressed fastq.gz files into the fastq folder.\n\nPlease copy the template of the sample sheet and the config file into the HRIBO folder.\n\n         cp HRIBO/templates/config.yaml HRIBO/\n         cp HRIBO/templates/samples.tsv HRIBO/\n       \nCustomize the config.yaml with the used adapter sequence and optionally with the path to a precomputed\nSTAR genome index. For correct removal of reads mapping to ribosomal genes please specify the taxonomic group of\nthe used organism (Eukarya, Bacteria, Archea).\nNow edit the sample sheet corresponding to your project, using one line per sequencing result, stating the used\nmethod (RIBO for ribosome profiling, RNA for RNA-seq), the applied condition (e.g. A, B, CTRL, TREAT), the replicate (e.g. 1, 2,..) and the filename. Following is an example:\n\n|method|\tcondition |replicate|\tfastqFile                 |\n|------|-----------|---------|--------------------------------|\n|RIBO  |\tA         |        1|\"fastq/FP-ctrl-1-2.fastq.gz\"    |\n|RIBO  |\tB         |        1|\"fastq/FP-treat-1-2.fastq.gz\"   |\n|RNA   |\tA         |        1|\"fastq/Total-ctrl-1-2.fastq.gz\" |\n|RNA   |\tB         |        1|\"fastq/Total-treat-1-2.fastq.gz\"|\n\nNow you can start your workflow.\n\nRun Snakemake locally:\n\n         snakemake --use-conda -s Snakefile --configfile HRIBO/config.yaml --directory ${PWD} -j 20 --latency-wait 60 \n         \n\nRun Snakemake on the cluster:\n\nEdit cluster.yaml according to your queuing system and cluster hardware. The following example works for Grid Engine:\n\n       snakemake --use-conda -s Snakefile --configfile HRIBO/config.yaml --directory ${PWD} -j 20 --cluster-config HRIBO/cluster.yaml --cluster \"qsub -N {cluster.jobname} -cwd -q {cluster.qname} -pe {cluster.parallelenvironment} -l {cluster.memory} -o {cluster.logoutputdir} -e {cluster.erroroutputdir} -j {cluster.joinlogs} -M <email>\" --latency-wait 60 \n\nOnce the workflow has finished you can request a automatically generated report.html file with the following command:\n         \n       snakemake --report report.html\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RickGelhausen/HRIBO",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hribo",
    "package_url": "https://pypi.org/project/hribo/",
    "platform": "",
    "project_url": "https://pypi.org/project/hribo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/RickGelhausen/HRIBO/issues",
      "Homepage": "https://github.com/RickGelhausen/HRIBO"
    },
    "release_url": "https://pypi.org/project/hribo/1.5.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "HRIBO (High-throughput annotation by Ribo-seq), a workflow to enable reproducible and high-throughput analysis of bacterial Ribo-seq data.",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10606646,
  "releases": {
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77a6ee8aa24cb72504821d3ee26ed530e833daf36358624c2fe270e82f91299e",
          "md5": "1dd691da05421f4de9830cca382e7905",
          "sha256": "97d612cf56b92c3dc0f0af0ce570e63183f81467092949d6f8e11c8050f8c477"
        },
        "downloads": -1,
        "filename": "hribo-1.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1dd691da05421f4de9830cca382e7905",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15285,
        "upload_time": "2021-06-10T00:05:22",
        "upload_time_iso_8601": "2021-06-10T00:05:22.734788Z",
        "url": "https://files.pythonhosted.org/packages/77/a6/ee8aa24cb72504821d3ee26ed530e833daf36358624c2fe270e82f91299e/hribo-1.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3fe9a4a67d95c1a90fbfa2cd2bcda6b78c63267dbf1336e7d17aa68dd219353",
          "md5": "e65916d448306f53d641c31d2ea19122",
          "sha256": "59e831b672f919d4388497185106712addbf7db897981a0c7d92b370ebb53865"
        },
        "downloads": -1,
        "filename": "hribo-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e65916d448306f53d641c31d2ea19122",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15070,
        "upload_time": "2021-06-10T00:05:24",
        "upload_time_iso_8601": "2021-06-10T00:05:24.957815Z",
        "url": "https://files.pythonhosted.org/packages/e3/fe/9a4a67d95c1a90fbfa2cd2bcda6b78c63267dbf1336e7d17aa68dd219353/hribo-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77a6ee8aa24cb72504821d3ee26ed530e833daf36358624c2fe270e82f91299e",
        "md5": "1dd691da05421f4de9830cca382e7905",
        "sha256": "97d612cf56b92c3dc0f0af0ce570e63183f81467092949d6f8e11c8050f8c477"
      },
      "downloads": -1,
      "filename": "hribo-1.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1dd691da05421f4de9830cca382e7905",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15285,
      "upload_time": "2021-06-10T00:05:22",
      "upload_time_iso_8601": "2021-06-10T00:05:22.734788Z",
      "url": "https://files.pythonhosted.org/packages/77/a6/ee8aa24cb72504821d3ee26ed530e833daf36358624c2fe270e82f91299e/hribo-1.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3fe9a4a67d95c1a90fbfa2cd2bcda6b78c63267dbf1336e7d17aa68dd219353",
        "md5": "e65916d448306f53d641c31d2ea19122",
        "sha256": "59e831b672f919d4388497185106712addbf7db897981a0c7d92b370ebb53865"
      },
      "downloads": -1,
      "filename": "hribo-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e65916d448306f53d641c31d2ea19122",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15070,
      "upload_time": "2021-06-10T00:05:24",
      "upload_time_iso_8601": "2021-06-10T00:05:24.957815Z",
      "url": "https://files.pythonhosted.org/packages/e3/fe/9a4a67d95c1a90fbfa2cd2bcda6b78c63267dbf1336e7d17aa68dd219353/hribo-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}