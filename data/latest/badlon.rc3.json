{
  "info": {
    "author": "Alexey Zabelkin",
    "author_email": "a.zabelkin@itmo.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# Badlon\n\n## Installation \n\nBablon can be installed with `pip`:\n\n```bash\npip install badlon\n```\n\nNow you can run tool from any directory as `badlon`.\n\n## Usage\n\n### Modules\n\nBadlon includes multiple modules to process data. They can be listed with help command:\n\n```bash\n$ badlon --help\nusage: badlon [-h] {prepare,analysis,match} ...\n\nTool for block based analysis of bacterial populations. Choose one of available modules.\n\npositional arguments:\n  {prepare,analysis,match}\n    prepare             Prepare draft dataset for SibeliaZ.\n    analysis            Analyze pan-genome and other block-based features based on synteny blocks.\n    match               Performs matching of block and genes based on coordinates.\n\noptional arguments:\n  -h, --help            show this help message and exit\n```\n\n### Step 1: prepare data with [`PanACoTA` pipeline](https://github.com/gem-pasteur/PanACoTA)\n\nIf you have genomes in some folder called `some_folder` (one file for genome), we suggest preparing data using [`PanACoTA` pipeline](https://github.com/gem-pasteur/PanACoTA).\n\nTo do so, you can use those commands:\n\n#### 1.1 Preparing data and tables with `PanACoTA prepare` module:\n\n`PanACoTA prepare --norefseq --min 0 --max 1 -o 1-prepare -d some_folder --cutn 125`\n\n* `--min 0 --max 1` are used to keep all genomes, parameter can be changed depending on task as well as all other parameters;\n* For check other parameters visit [`PanACoTA prepare`](https://aperrin.pages.pasteur.fr/pipeline_annotation/html-doc/usage.html#prepare-subcommand) documentation.\n\n#### 1.2 Annotating genomes with `PanACoTA annotate` module:\n\n`PanACoTA annotate --info 1-prepare/L* -r 2-annotate -n ESCO --threads 16`\n\n* You can change label `-n ESCO` depending on your species (ESCO is for *Escherichia coli*);\n* For check parameters visit [`PanACoTA prepare`](https://aperrin.pages.pasteur.fr/pipeline_annotation/html-doc/usage.html#annotate-subcommand) documentation.\n\n#### 1.3 Calling orthology genes using `PanACoTA pangenome` module:\n\n`PanACoTA pangenome -l 2-annotate/LSTINFO-* -n ESCO -d 2-annotate/Proteins/ -o 3-pangenome`\n\n* You can change `-i` which is minimum sequence identity to be considered in the same cluster (float between 0 and 1). Default is 0.8.\n* For check parameters visit [`PanACoTA prepare`](https://aperrin.pages.pasteur.fr/pipeline_annotation/html-doc/usage.html#annotate-subcommand) documentation.\n\n### Step 2: `prepare` module of `badlon`\n\nPrepare module is used to prepare data for using SibeliaZ package keeping all necessary information: genome labels and chromosome numbers.\n\nParameters can be checked with help option:\n\n```bash\n$ badlon prepare --help\nusage: badlon prepare [-h] --folder FOLDER [--contigs CONTIGS]\n                      [--output OUTPUT]\n                      [--annotate_subfolder ANNOTATE_SUBFOLDER]\n                      [--min_len MIN_LEN]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --contigs CONTIGS, -c CONTIGS\n                        Number of maximum contigs to take from every genome.\n                        By default, keeps all.\n  --output OUTPUT, -o OUTPUT\n                        Output file path.\n  --annotate_subfolder ANNOTATE_SUBFOLDER, -a ANNOTATE_SUBFOLDER\n                        Subfolder of PanACoTA contains results of annotate\n                        module. Used for finding LSTINFO file. Default is\n                        '2-annotate'.\n  --min_len MIN_LEN, -l MIN_LEN\n                        Minimum contig length, less then that value will be\n                        filtered. Default is 1000.\n\nRequired arguments:\n  --folder FOLDER, -f FOLDER\n                        Folder with PanACoTA output. Will be used to search\n                        genome files based on LSTINFO file from annotate\n                        module.\n```\n\nExample command:\n\n`badlon prepare -f 2-annotate -o for_sibeliaz.fna`\n\n### Step 2. Obtaining blocks with [SibeliaZ](https://github.com/medvedevgroup/SibeliaZ)\n\n#### 2.1 Running SibeliaZ with recommended command based on `badlon prepare` output.\n\nExample:\n`sibeliaz -k 15 -a 100 -n -t 32 -o sibeliaz_out for_sibeliaz.fna`\n\n* Watch out `-a` it's needs to be equal around `number_of_genome * 20`, `badlon prepare` calculates it automatically.\n\n#### 2.2 Obtaining blocks from alignment\n\nCheck recommended command from `badlon prepare` module output. Usually it's (blocks minimal size 3000):\n```bash\ncd sibeliaz_out\necho $'30 150\\n100 500\\n500 1500' > fine.txt\nmaf2synteny -s fine.txt -b 3000 blocks_coords.gff\n```\n\n### Step 3. Calculating block based statistics and charts with `badlon analysis` module:\n\nParameters can be checked with help option:\n\n```bash\n$ badlon analysis --help\nusage: badlon analysis [-h] --blocks_file BLOCKS_FILE --type {chr,contig}\n                       [--output OUTPUT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --output OUTPUT, -o OUTPUT\n                        Path to output folder. Default: blockomics_output.\n\nRequired arguments:\n  --blocks_file BLOCKS_FILE, -b BLOCKS_FILE\n                        Blocks resulted as output of original Sibelia or\n                        maf2synteny tool. Usually it's\n                        sibeliaz_out/3000/block_coords.txt file.\n  --type {chr,contig}, -t {chr,contig}\n                        Type of genome assembly, either 'chr' or 'contig'\n```\n\nExample command:\n\n```bash\ncd ..\nbadlon analysis -b sibeliaz_out/3000/blocks_coords.txt\n```\n\n### Step 4 (optional): Match block and genes annotation with  `badlon match` module\n\nParameters can be checked with help option:\n\n```bash\n$ badlon match --help\nusage: badlon match [-h] --blocks_file BLOCKS_FILE --annotated_folder\n                    ANNOTATED_FOLDER --pangenome_file PANGENOME_FILE --type\n                    {chr,contig} [--output OUTPUT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --output OUTPUT, -o OUTPUT\n                        Path to output folder. Default: blockomics_output.\n\nRequired arguments:\n  --blocks_file BLOCKS_FILE, -b BLOCKS_FILE\n                        Blocks folder resulted as output of original Sibelia\n                        or maf2synteny tool. Usually it's `sibeliaz_out/3000/`\n                        folder.\n  --annotated_folder ANNOTATED_FOLDER, -a ANNOTATED_FOLDER\n                        LSTINFO folder path, output of `annotate` step of\n                        PanACoTA.\n  --pangenome_file PANGENOME_FILE, -pg PANGENOME_FILE\n                        File .lst with orthologous genes, output of\n                        `pangenome` step of PanACoTA.\n  --type {chr,contig}, -t {chr,contig}\n                        Type of genome assembly, either 'chr' or 'contig'\n```\n\nExample command:\n\n`badlon match -b sibeliaz_out/3000/blocks_coords.txt -a 2-annotate/ -pg 3-pangenome/*.lst -t contig`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oxygen311/badlon",
    "keywords": "synteny blocks,pan genome,core genome,bioinformatics,genome alignment",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "badlon",
    "package_url": "https://pypi.org/project/badlon/",
    "platform": null,
    "project_url": "https://pypi.org/project/badlon/",
    "project_urls": {
      "Homepage": "https://github.com/oxygen311/badlon"
    },
    "release_url": "https://pypi.org/project/badlon/0.1.2/",
    "requires_dist": [
      "pandas",
      "numpy",
      "seaborn",
      "biopython"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "A bioinf tool for analyzing pan-genome and other features based on synteny blocks",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14398242,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e28c53615575e47fb83bb5a766039f2338a01eb54c09a8c841a218d513fff1f",
          "md5": "eb2490adecbf7038736964b405fc6c75",
          "sha256": "e387f2888fa87f65fb360f32ef3d34b0b639c55c5c04450ca9fccbb5dd3f7613"
        },
        "downloads": -1,
        "filename": "badlon-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb2490adecbf7038736964b405fc6c75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 15386,
        "upload_time": "2022-07-11T10:01:03",
        "upload_time_iso_8601": "2022-07-11T10:01:03.517808Z",
        "url": "https://files.pythonhosted.org/packages/0e/28/c53615575e47fb83bb5a766039f2338a01eb54c09a8c841a218d513fff1f/badlon-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43ced6aacbe0675893a7979b0f973ed9016ee314a251121a5e609a89575aea63",
          "md5": "2ea54db772c6d53cf84feee0f9c72bc4",
          "sha256": "c6d3b83e6b5ad810ff90be428b462ddaea778f78fe3598e038e3e3f995404c9e"
        },
        "downloads": -1,
        "filename": "badlon-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ea54db772c6d53cf84feee0f9c72bc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 11373,
        "upload_time": "2022-07-11T10:01:05",
        "upload_time_iso_8601": "2022-07-11T10:01:05.177292Z",
        "url": "https://files.pythonhosted.org/packages/43/ce/d6aacbe0675893a7979b0f973ed9016ee314a251121a5e609a89575aea63/badlon-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "891fa37532cd7efc9b5c83b63a7b3f616c0ba8edaf65a7eb26cd03af65a29abe",
          "md5": "1275084864a074bd690867862658c008",
          "sha256": "50e07086c32512b977f33893ded1429c68c1a0052a7f4c3bbb9c4ccb27f3d6ec"
        },
        "downloads": -1,
        "filename": "badlon-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1275084864a074bd690867862658c008",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 15553,
        "upload_time": "2022-07-11T10:11:54",
        "upload_time_iso_8601": "2022-07-11T10:11:54.359170Z",
        "url": "https://files.pythonhosted.org/packages/89/1f/a37532cd7efc9b5c83b63a7b3f616c0ba8edaf65a7eb26cd03af65a29abe/badlon-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32f70ed94ed069f176251dd5e5f2d0ce5199cb06ec6a02aaefbb0f8adf8f9f69",
          "md5": "9c67186026559d6d4beedbfb1a392b84",
          "sha256": "a21fab8cf26841abac8fce590a277d1b88c5504291e5417fe406d0d9712a325e"
        },
        "downloads": -1,
        "filename": "badlon-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c67186026559d6d4beedbfb1a392b84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 11669,
        "upload_time": "2022-07-11T10:11:55",
        "upload_time_iso_8601": "2022-07-11T10:11:55.994991Z",
        "url": "https://files.pythonhosted.org/packages/32/f7/0ed94ed069f176251dd5e5f2d0ce5199cb06ec6a02aaefbb0f8adf8f9f69/badlon-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b652f7a5a98b9f7588c202a6ff64f1bf13a254f2e9f98c19056cf664ca7f270",
          "md5": "c438d2cf8257d0d578c99623a798d848",
          "sha256": "12552c8f3ad1d41460a84b1f6e63586f4e47ff30dab58271bd300fe93bf016bf"
        },
        "downloads": -1,
        "filename": "badlon-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c438d2cf8257d0d578c99623a798d848",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 17517,
        "upload_time": "2022-07-11T11:44:17",
        "upload_time_iso_8601": "2022-07-11T11:44:17.219503Z",
        "url": "https://files.pythonhosted.org/packages/8b/65/2f7a5a98b9f7588c202a6ff64f1bf13a254f2e9f98c19056cf664ca7f270/badlon-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "decf121e5f7e02f191f3673c4dfaa9deaef622f2c5743ec1c42e517ed370d563",
          "md5": "aec984d4d2e5de996a4d81c4fbe8b1be",
          "sha256": "6ce7c72edf734edf42f45d4247859a6ea5aa28a8d5970369acc306084c80f347"
        },
        "downloads": -1,
        "filename": "badlon-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "aec984d4d2e5de996a4d81c4fbe8b1be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 15139,
        "upload_time": "2022-07-11T11:44:19",
        "upload_time_iso_8601": "2022-07-11T11:44:19.144079Z",
        "url": "https://files.pythonhosted.org/packages/de/cf/121e5f7e02f191f3673c4dfaa9deaef622f2c5743ec1c42e517ed370d563/badlon-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b652f7a5a98b9f7588c202a6ff64f1bf13a254f2e9f98c19056cf664ca7f270",
        "md5": "c438d2cf8257d0d578c99623a798d848",
        "sha256": "12552c8f3ad1d41460a84b1f6e63586f4e47ff30dab58271bd300fe93bf016bf"
      },
      "downloads": -1,
      "filename": "badlon-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c438d2cf8257d0d578c99623a798d848",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 17517,
      "upload_time": "2022-07-11T11:44:17",
      "upload_time_iso_8601": "2022-07-11T11:44:17.219503Z",
      "url": "https://files.pythonhosted.org/packages/8b/65/2f7a5a98b9f7588c202a6ff64f1bf13a254f2e9f98c19056cf664ca7f270/badlon-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "decf121e5f7e02f191f3673c4dfaa9deaef622f2c5743ec1c42e517ed370d563",
        "md5": "aec984d4d2e5de996a4d81c4fbe8b1be",
        "sha256": "6ce7c72edf734edf42f45d4247859a6ea5aa28a8d5970369acc306084c80f347"
      },
      "downloads": -1,
      "filename": "badlon-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "aec984d4d2e5de996a4d81c4fbe8b1be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 15139,
      "upload_time": "2022-07-11T11:44:19",
      "upload_time_iso_8601": "2022-07-11T11:44:19.144079Z",
      "url": "https://files.pythonhosted.org/packages/de/cf/121e5f7e02f191f3673c4dfaa9deaef622f2c5743ec1c42e517ed370d563/badlon-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}