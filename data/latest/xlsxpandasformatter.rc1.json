{
  "info": {
    "author": "Marc Weber",
    "author_email": "329640305@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# XlsxPandasFormatter\n\nDeals with the limitations of formatting when using Pandas dataframe and xlsxwriter to export to Excel format.\n\nProvides a helper class that wraps the worksheet, workbook and dataframe objects written by pandas to_excel method using the xlsxwriter engine to allow consistent formatting of cells. A FormatedWorksheet is a helper class that wraps the worksheet, workbook and dataframe objects written by pandas to_excel method using the xlsxwriter engine. It takes care of keeping record of cells format and allows user to apply successively formats to columns, rows and cells. It also provides methods to format group of columns based on column name pattern, and apply special separations between groups of rows.\n\nThis class is a quick and dirty workaround to the limitations of formatting in xlsxwriter. It was inspired by the other package [XlsxFormatter](https://github.com/Yoyoyoyoyoyoyo/XlsxFormatter). The latter, however, cannot be used in the case of creating xlsxwriter Worksheet through the Pandas `to_excel` method.\n\n## Notes\n\nThe FormatedWorksheet class does not handle hierarchical formatting, i.e. single cell formatting with higher priority than column formatting.\n\n\n## Installation\n```shell\npip3 install XlsxPandasFormatter\n```\n\n## Use case\n\nThe general use of the class is described in the following detailed example:\n\n```python\nfrom xlsxpandasformatter import FormatedWorksheet\nimport seaborn\nimport pandas as pd\n\nindex = pd.MultiIndex.from_product([['bar', 'baz', 'foo'], ['one', 'two']], names=['first', 'second'])\ncolumns = pd.MultiIndex.from_product([['A', 'B'], ['value', 'error', 'sequence']], names=['colLevel1', 'colLevel2'])\n\ndf = pd.DataFrame([[0.2, 1, 'ASDFG', 'a1', 0.1, 'ACTG'],\n                   [1.5, 5, 'QWERT', 'a1', 0.2, 'ACTG'],\n                   [5, 8,'ZXCVB', 'b1', 0.4, 'ACTG'],\n                   [9,8,'ZXCVB', 'b1', 0.5, 'ACTG'],\n                   [9,8,'ZXCVB', 'b1', 0.6, 'ACTG'],\n                   [9,8,'ZXCVB', 'b1', 0.8, 'ACTG']],\n                  index=index,\n                  columns=columns)\n\n\n# In order to change the header format, we have to remove the default formatting of header by pandas\n# See http://stackoverflow.com/questions/36694313/pandas-xlsxwriter-format-header\npd.formats.format.header_style = None\n\n# Create a workbook using the Pandas writer with the xlsxwriter engine\nwriter = pd.ExcelWriter('test.xlsx', engine='xlsxwriter')\nhasIndex = True\ndf.to_excel(writer, index=hasIndex, sheet_name='sheet1')\nworkbook = writer.book\nworksheet = writer.sheets['sheet1']\n\n# Wrap the worksheet, workbook and dataframe objects into a FormatedWorksheet object\n# which will take care of keeping memory of cells format.\nformattedWorksheet = FormatedWorksheet(worksheet, workbook, df, hasIndex=hasIndex)\n\n### Examples of format methods\n\n## Change header format\n# Note that in order to change the header format, we have to remove the default formatting of header by pandas\n# See above. Alternatively, one can use the default Pandas header format, which works well for multiindex dataframes.\nformattedWorksheet.format_header(headerFormat={'font_name':'Times New Roman', 'align':'center', 'bold':True,\n                                               'bottom':6, 'left':1, 'right':1}, rowHeight=[30, 20])\n\n## Change index format\nformattedWorksheet.format_index(indexFormat={'font_name':'Times New Roman', 'align':'center', 'bold':True,\n                                             'right':6, 'bottom':1}, colWidth=15)\n\n## Freeze index, header, or both index and header\n# formattedWorksheet.freeze_header()\n# formattedWorksheet.freeze_index()\nformattedWorksheet.freeze_index_and_header()\n\n## Apply format to column\n# The column can be given either by integer location or by name\nformattedWorksheet.format_col(('B', 'value'), colFormat={'font_size':8})\nformattedWorksheet.format_col(3, colFormat={'align':'center'})\n\n## Apply format to row\n# The row can be given either by integer location or by name\nformattedWorksheet.format_row(('foo', 'one'), rowFormat={'font_size':14})\nformattedWorksheet.format_row(4, rowFormat={'bold':True})\n\n## Apply format and column width to columns.\n# The method format_cols accepts either of following arguments:\n# colWidthList: list of column width, same length as the number of columns of dataframe.\n# colFormatList: list of dictionary-like format, same length as the number of columns of dataframe.\n# colPatternFormatList: list of tuples (pattern, format dictionary). The format will be applied\n# to all columns that match the regex pattern at any of the column levels.\ncolumnWidthList = [10, 10, 20, 10, 10, 20]\ncolPatternFormatList = [(r'[sS]eq', {'font_name':'Courier New'})]\nformattedWorksheet.format_cols(colWidthList=columnWidthList,\n                               colFormatList=None,\n                               colPatternFormatList=colPatternFormatList)\n\n## Apply numeric format to columns\nnumFormatScientific = '0.0E+00'\nnumFormatFloat2digits = 0x02\nnumFormatInteger = 0x01\n# The colPatternFormatList is a list of tuples (pattern, numeric format), where\n# numeric format is either an integer or a string as described here:\n# http://xlsxwriter.readthedocs.io/format.html#set_num_format\n# The format will be applied to all columns that match the regex pattern.\ncolPatternFormatList = [\n    (r'error', numFormatScientific)\n]\nformattedWorksheet.format_numeric_cols(colPatternFormatList)\n\n## Apply a colormap background color to column\ncolorMapRGB = seaborn.color_palette(\"RdBu_r\", 61)\ncolormap = seaborn.blend_palette(colorMapRGB, as_cmap=True, input='rgb')\nformattedWorksheet.format_background_colormap(('B', 'error'), colormap, vmin=0, vmax=1)\n\n## Add a thick border line in between groups of row, as when using Pandas groupby method on column.\nformattedWorksheet.format_add_separation_border_between_groups(('B', 'value'))\n\n# Apply conditional formatting to dataframe rows in the same manner as\n# Pandas apply method\ndef highlight_value_and_sequence_when_value_is_above_threshold(row):\n\n    formatSeries = pd.Series(data=[dict() for _ in range(len(row))], index=row.index)\n\n    if row[('A', 'value')] > 5:\n        formatSeries.iloc[0]['font_color'] = '#7c0722'\n        formatSeries.iloc[2]['font_color'] = '#7c0722'\n\n    return formatSeries\n\nformattedWorksheet.format_pandas_apply(highlight_value_and_sequence_when_value_is_above_threshold, axis=1)\n\n## Finally, apply format dictionaries to all cells\n# This has to be called just before the save() call. Any subsequent calls to xlsxwriter methods that modify\n# the format of cells will override format from the FormattedWorksheet class.\nformattedWorksheet.apply_format_table()\n\nwriter.save()\n\n```\n\nOutput:\n![example.png](example.png)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/webermarcolivier/xlsxpandasformatter",
    "keywords": "xlsxpandasformatter xlsx excel pandas formatter",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "XlsxPandasFormatter",
    "package_url": "https://pypi.org/project/XlsxPandasFormatter/",
    "platform": "",
    "project_url": "https://pypi.org/project/XlsxPandasFormatter/",
    "project_urls": {
      "Bug Reports": "https://github.com/webermarcolivier/xlsxpandasformatter/issues",
      "Documentation": "https://github.com/webermarcolivier/xlsxpandasformatter/blob/master/README.md",
      "Homepage": "https://github.com/webermarcolivier/xlsxpandasformatter",
      "Repository": "https://github.com/webermarcolivier/xlsxpandasformatter"
    },
    "release_url": "https://pypi.org/project/XlsxPandasFormatter/0.0.2/",
    "requires_dist": [
      "pandas",
      "XlsxWriter",
      "matplotlib",
      "numpy",
      "seaborn"
    ],
    "requires_python": ">=3.6",
    "summary": "XlsxPandasFormatter",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9417894,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc57c2fa48e8e1c37099c3a7b8f6add70f005c778ddf7a8b8f69d88c8e3eb6b6",
          "md5": "317f89085196d8a8ee0979a03fcddc7a",
          "sha256": "4640199d7355952004678784c99170751ca506f25bc7dca1df06d502ce9ce136"
        },
        "downloads": -1,
        "filename": "XlsxPandasFormatter-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "317f89085196d8a8ee0979a03fcddc7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10601,
        "upload_time": "2021-02-14T22:13:44",
        "upload_time_iso_8601": "2021-02-14T22:13:44.623529Z",
        "url": "https://files.pythonhosted.org/packages/dc/57/c2fa48e8e1c37099c3a7b8f6add70f005c778ddf7a8b8f69d88c8e3eb6b6/XlsxPandasFormatter-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e34a38dc8bb3613bdae8485f6fdbaea0bd38c11c143e9bcd3359f85ac8ff2b37",
          "md5": "d8b1864cd6872fdfb7ca1689b5c2e3dd",
          "sha256": "8faf20b94a122940dd2e1189dfc0e1767e8608ccb20c41994161c0ba25fed6c5"
        },
        "downloads": -1,
        "filename": "XlsxPandasFormatter-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d8b1864cd6872fdfb7ca1689b5c2e3dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9197,
        "upload_time": "2021-02-14T22:13:46",
        "upload_time_iso_8601": "2021-02-14T22:13:46.200846Z",
        "url": "https://files.pythonhosted.org/packages/e3/4a/38dc8bb3613bdae8485f6fdbaea0bd38c11c143e9bcd3359f85ac8ff2b37/XlsxPandasFormatter-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc57c2fa48e8e1c37099c3a7b8f6add70f005c778ddf7a8b8f69d88c8e3eb6b6",
        "md5": "317f89085196d8a8ee0979a03fcddc7a",
        "sha256": "4640199d7355952004678784c99170751ca506f25bc7dca1df06d502ce9ce136"
      },
      "downloads": -1,
      "filename": "XlsxPandasFormatter-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "317f89085196d8a8ee0979a03fcddc7a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10601,
      "upload_time": "2021-02-14T22:13:44",
      "upload_time_iso_8601": "2021-02-14T22:13:44.623529Z",
      "url": "https://files.pythonhosted.org/packages/dc/57/c2fa48e8e1c37099c3a7b8f6add70f005c778ddf7a8b8f69d88c8e3eb6b6/XlsxPandasFormatter-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e34a38dc8bb3613bdae8485f6fdbaea0bd38c11c143e9bcd3359f85ac8ff2b37",
        "md5": "d8b1864cd6872fdfb7ca1689b5c2e3dd",
        "sha256": "8faf20b94a122940dd2e1189dfc0e1767e8608ccb20c41994161c0ba25fed6c5"
      },
      "downloads": -1,
      "filename": "XlsxPandasFormatter-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d8b1864cd6872fdfb7ca1689b5c2e3dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9197,
      "upload_time": "2021-02-14T22:13:46",
      "upload_time_iso_8601": "2021-02-14T22:13:46.200846Z",
      "url": "https://files.pythonhosted.org/packages/e3/4a/38dc8bb3613bdae8485f6fdbaea0bd38c11c143e9bcd3359f85ac8ff2b37/XlsxPandasFormatter-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}