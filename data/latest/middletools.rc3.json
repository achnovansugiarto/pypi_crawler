{
  "info": {
    "author": "deknowny",
    "author_email": "deknowny@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# Middletools\n[![Coverage Status](https://coveralls.io/repos/github/deknowny/middletools/badge.svg)](https://coveralls.io/github/deknowny/middletools)\n![Supported python version](https://img.shields.io/pypi/pyversions/middletools)\n![PyPI package version](https://img.shields.io/pypi/v/middletools)\n![Downloads](https://img.shields.io/pypi/dm/middletools)\n\n\nThis is a python library that allows you to integrate middlewares-based system to your project. It contains base tools for creating and running middlewares with `async-await` style\n\n## Installation\n### PyPI\n```shell\npython -m pip install middletools\n```\n### GitHub\n```shell\npython -m pip install https://github.com/deknowny/middlewares/archive/main.zip\n```\n\n## Usage\nThe main idea is give an ability just passing the middlewares and `inbox`/`outbox` payload values in a few methods instead of running and saving middlewares state by hand\n\nStandard case: a function runs RESTful API routers and requires a middleware that checks\na header in client's request\n\n***\nThere are 2 endpoints for an abstract `GET` and `POST` methods\n```python\n# Some abstract router\n@router.get(\"/\")\nasync def route_get(request):\n    return 200, {\"response\": \"some content\"}\n\n\n@router.post(\"/\")\nasync def route_post(request):\n    return 201, {\"response\": \"ok\"}\n\n```\n\nIn the core of web framework you used a function like this that just call all routers\n\n```python\nclass Router:\n    ...\n    ...\n    \n    async def call_routers(self, request):\n        for router in self.routers:\n            ... # Pass request to routers and check it matched\n```\n\n`middlewares` library allows you easy integrate middleware system to your `call_routers`\n***\n### Create middleware function\n```python\nimport middletools\n\n...\n...\n\n# Adding a middleware handler to an abstract \n@router.add_middleware\nasync def my_middleware(\n    request: SomeRequest, call_next: middletools.types.CallNext\n) -> SomeResponse:\n    # Just check if header exists, id not set the default value\n    if \"X-Required-Header\" not in request.headers:\n        request.header[\"X-Required-Header\"] = \"default\"\n    response = await call_next()\n    return response\n```\nHere we add a header to client request if clint didn't do it. Then `await call_next()` give control to other middlewares or to our `call_routers` handler and response from this is the value `call_next()` returns\n***\n`call_routers` should looks like this \n```python\nimport typing\n\nimport middletools\n\n\nclass Router:\n    # You can use generics to describe middleware hand;er\n    middlewares: typing.List[\n        middletools.types.MiddlewareHandler[\n            SomeRequest, SomeResponse\n        ]\n    ]\n    ...\n    ...\n\n    async def call_routers(self, request):\n        read_afterwords = await middletools.read_forewords(\n            *self.middlewares, inbox_value=request\n        )\n        for router in self.routers:\n            ... # Pass request to routers and check it matched\n            response = ...\n            await read_afterwords(response)\n            break\n        \n```\n`middlewares.read_forewords` run middlewares until every one of them give control with `await call_next()`.\nWhen we do all our stuff and get the router response we can call `await read_afterwords(response)` and run all middlewares completely.\n\n### Notes\nIf a middleware doesn't call `call_next()` it raises `middlewares.CallNextNotUsedError`. It means that the middleware forcibly decline middlewares handlers and response should be sent immediately without routers running. `call_routers` should looks like this:\n```python\nimport middletools\n\n\nasync def call_routers(self, request):\n    try:\n        read_afterwords = await middletools.read_forewords(\n            *self.middlewares, inbox_value=request\n        )\n        for router in self.routers:\n            ... # Pass request to routers and check it matched\n            response = ...\n            await read_afterwords(response)\n            return response\n    except middletools.CallNextNotUsedError:\n        return SomeBadResponseBecauseNotRouted(400, \"Require a header!\")\n    \n```\n***\nIf a middleware doesn't return anything, middlewares dispatching declined forcibly too but after routers handled. (Return nothing means there isn't any `return` or `return None` used). It raises `middlewares.NothingReturnedError`\n```python\nimport middletools\n\n\nasync def call_routers(self, request):\n    try:\n        read_afterwords = await middletools.read_forewords(\n            *self.middlewares, inbox_value=request\n        )\n        for router in self.routers:\n            ... # Pass request to routers and check it matched\n            response = ...\n            await read_afterwords(response)\n            return response\n    except middletools.CallNextNotUsedError:\n        return SomeBadResponseBecauseNotRouted(400, \"Require a header!\")\n    except middletools.NothingReturnedError:\n        return SomeBadResponseBecauseMiddlewareDntReturnResponse(\n            500, \"Oops, internal server error\"\n        )\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/deknowny/middletools",
    "keywords": "python,library,middlewares,create,utils",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "middletools",
    "package_url": "https://pypi.org/project/middletools/",
    "platform": "",
    "project_url": "https://pypi.org/project/middletools/",
    "project_urls": {
      "Homepage": "https://github.com/deknowny/middletools"
    },
    "release_url": "https://pypi.org/project/middletools/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "This python library allows you integrate async-await middleware-based system to your project",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11068366,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82d57e52b264f742b16c38ef77a22fef2cfe24caeb43c5b9cd8744048921b8e8",
          "md5": "a52b567e3e6d644ddcf0f700094ac64b",
          "sha256": "2ea610fc8299ea06e6b3aabb33d58b556f296d2b9fbe87bfebf15e98382b6eb0"
        },
        "downloads": -1,
        "filename": "middletools-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a52b567e3e6d644ddcf0f700094ac64b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 4161,
        "upload_time": "2021-08-02T10:38:52",
        "upload_time_iso_8601": "2021-08-02T10:38:52.745221Z",
        "url": "https://files.pythonhosted.org/packages/82/d5/7e52b264f742b16c38ef77a22fef2cfe24caeb43c5b9cd8744048921b8e8/middletools-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27af5eb542d7b216afa978224b7332297e592a7b64fba001cb4b632e7843c430",
          "md5": "99079f4d5517efd78422544819fee40f",
          "sha256": "136c94b62c1c05a22eb7393123e9046f048073a0a6e835eba20144c8dce7e977"
        },
        "downloads": -1,
        "filename": "middletools-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99079f4d5517efd78422544819fee40f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 3317,
        "upload_time": "2021-08-02T10:38:54",
        "upload_time_iso_8601": "2021-08-02T10:38:54.304726Z",
        "url": "https://files.pythonhosted.org/packages/27/af/5eb542d7b216afa978224b7332297e592a7b64fba001cb4b632e7843c430/middletools-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6954b663baaf5722c74ffd1cd4916bdd2a4dcc7ce376e195624b168e97add53e",
          "md5": "c147770ccc2867448cb3d48e1c0e8f1e",
          "sha256": "16c96e175530d8e3474fb97a41d1c276639d66f06b04584c88cff3f7dc7bd5cc"
        },
        "downloads": -1,
        "filename": "middletools-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c147770ccc2867448cb3d48e1c0e8f1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5782,
        "upload_time": "2021-08-02T10:44:09",
        "upload_time_iso_8601": "2021-08-02T10:44:09.123967Z",
        "url": "https://files.pythonhosted.org/packages/69/54/b663baaf5722c74ffd1cd4916bdd2a4dcc7ce376e195624b168e97add53e/middletools-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32ddc32bc2ce071d1d2c07067a838d996bda50bd829e64199ee203ae2623d90f",
          "md5": "49dc91dd792482fdfa71fd76c6963b8d",
          "sha256": "947e05a07474b15af82cb33c23e4f3dd509ac288415cef40094d99d25f621c29"
        },
        "downloads": -1,
        "filename": "middletools-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "49dc91dd792482fdfa71fd76c6963b8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5541,
        "upload_time": "2021-08-02T10:44:10",
        "upload_time_iso_8601": "2021-08-02T10:44:10.958296Z",
        "url": "https://files.pythonhosted.org/packages/32/dd/c32bc2ce071d1d2c07067a838d996bda50bd829e64199ee203ae2623d90f/middletools-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47fbde15c09ec7a31cd270bffaec3b4dbb15840f8964e9371c24a2478b263118",
          "md5": "ef3b3318cbe4d3efc087c2274001fb9a",
          "sha256": "6a2cef863244be65df4125e623d6b21056d351507b4faa917d25049673d8ad1d"
        },
        "downloads": -1,
        "filename": "middletools-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef3b3318cbe4d3efc087c2274001fb9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5782,
        "upload_time": "2021-08-02T10:46:44",
        "upload_time_iso_8601": "2021-08-02T10:46:44.792474Z",
        "url": "https://files.pythonhosted.org/packages/47/fb/de15c09ec7a31cd270bffaec3b4dbb15840f8964e9371c24a2478b263118/middletools-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67503acc5c10ce5772d4fc7fe62109da6d78d237e2ff1d833420195cba7d9fc3",
          "md5": "89285686b65f8445ef2534b6a068a582",
          "sha256": "12d58c44258126dfac4f91d265aee9f42751745d1d9738d07cfdd9f0de14b77b"
        },
        "downloads": -1,
        "filename": "middletools-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "89285686b65f8445ef2534b6a068a582",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5540,
        "upload_time": "2021-08-02T10:46:46",
        "upload_time_iso_8601": "2021-08-02T10:46:46.117338Z",
        "url": "https://files.pythonhosted.org/packages/67/50/3acc5c10ce5772d4fc7fe62109da6d78d237e2ff1d833420195cba7d9fc3/middletools-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47fbde15c09ec7a31cd270bffaec3b4dbb15840f8964e9371c24a2478b263118",
        "md5": "ef3b3318cbe4d3efc087c2274001fb9a",
        "sha256": "6a2cef863244be65df4125e623d6b21056d351507b4faa917d25049673d8ad1d"
      },
      "downloads": -1,
      "filename": "middletools-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ef3b3318cbe4d3efc087c2274001fb9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 5782,
      "upload_time": "2021-08-02T10:46:44",
      "upload_time_iso_8601": "2021-08-02T10:46:44.792474Z",
      "url": "https://files.pythonhosted.org/packages/47/fb/de15c09ec7a31cd270bffaec3b4dbb15840f8964e9371c24a2478b263118/middletools-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67503acc5c10ce5772d4fc7fe62109da6d78d237e2ff1d833420195cba7d9fc3",
        "md5": "89285686b65f8445ef2534b6a068a582",
        "sha256": "12d58c44258126dfac4f91d265aee9f42751745d1d9738d07cfdd9f0de14b77b"
      },
      "downloads": -1,
      "filename": "middletools-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "89285686b65f8445ef2534b6a068a582",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 5540,
      "upload_time": "2021-08-02T10:46:46",
      "upload_time_iso_8601": "2021-08-02T10:46:46.117338Z",
      "url": "https://files.pythonhosted.org/packages/67/50/3acc5c10ce5772d4fc7fe62109da6d78d237e2ff1d833420195cba7d9fc3/middletools-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}