{
  "info": {
    "author": "Sachin Sharma",
    "author_email": "sachin@arangodb.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# fastgraphml\nGiven an input graph it generates Graph Embeddings using Low-Code framework built on top of [PyG](https://pytorch-geometric.readthedocs.io/en/latest/). The package supports training on both GPU and CPU enabled machines. Training jobs on GPUs results in much faster execution and increased in performance when it comes to handling large graphs as compared to CPUs. In addition, the framework provides tight integration with  [ArangoDB](https://www.arangodb.com/) which is a scalable, fully managed graph database, document store and search engine in one place. Once Graph Embeddings are generated, they can be used for various downstream machine learning tasks like Node Classification, Link Prediction, Visualisation, Community Detection, Similartiy Search, Recommendation, etc. \n\n## Installation\n#### Required Dependencies\n1. PyTorch `1.12.*` is required.\n    * Install using previous version that matches your CUDA version: [pytorch](https://pytorch.org/get-started/previous-versions/)\n        * To find your installed CUDA version run `nvidia-smi` in your terminal.\n2. [pyg](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html)\n3. [FAISS](https://github.com/facebookresearch/faiss/blob/main/INSTALL.md)\n    * Note: For FAISS-CPU one needs `numba==0.53.0`\n\n#### Latest Release\n```\npip install fastgraphml\n```\n\n## Quickstart: Graph Embedding Generation\n\n### Use Case 1: Generates Graph Embeddings using the graphs stored inside ArangoDB:\n\n#### Example Homogneous Graphs\n\n```python\nfrom fastgraphml.graph_embeddings import SAGE, GAT\nfrom fastgraphml.graph_embeddings import downstream_tasks\nfrom fastgraphml import Datasets \nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient(\"http://127.0.0.1:8529\")\ndb = client.db('_system', username='root', password='')\n\n# Loading Amazon Computer Products dataset into ArangoDB\nDatasets(db).load(\"AMAZON_COMPUTER_PRODUCTS\")\n\n# Optionally use arangodb graph\n# arango_graph = db.graph('product_graph')\n\n# metadata information of arango_graph\nmetagraph = {\n    \"vertexCollections\": {\n        \"Computer_Products\": {\"x\": \"features\", \"y\": \"label\"},\n    },\n    \"edgeCollections\": {\n        \"bought_together\": {},\n    },\n}\n\n# generating graph embeddings with 3 lines of code\nmodel = SAGE(db,'product_graph', metagraph, embedding_size=64) # define graph embedding model\nmodel._train(epochs=10) # train\nembeddings = model.get_embeddings() # get embeddings\n```\n\n#### Example Heterogeneous Graphs\n\n```python\nfrom fastgraphml.graph_embeddings import METAPATH2VEC, DMGI\nfrom fastgraphml.graph_embeddings import downstream_tasks \nfrom fastgraphml import Datasets \n\nfrom arango import ArangoClient\n\n# Initialize the ArangoDB client.\nclient = ArangoClient(\"http://127.0.0.1:8529\")\ndb = client.db('_system', username='root')\n\n# Loading IMDB Dataset into ArangoDB\nDatasets(db).load(\"IMDB_X\")\n\n# Optionally use ArangoDB Graph\n# arango_graph = db.graph(\"IMDB\")\n\nmetagraph = {\n    \"vertexCollections\": {\n\n        \"movie\": { \"x\": \"x\", \"y\": \"y\"},  \n        \"director\": {\"x\": \"x\"},\n        \"actor\": {\"x\": \"x\"},\n    },\n    \"edgeCollections\": {\n        \"to\": {},\n    },\n}\nmetapaths = [('movie', 'to','actor'),\n             ('actor', 'to', 'movie'), ] # MAM # co-actor relationship\n\n# generating graph embeddings with 3 lines of code\nmodel = METAPATH2VEC(db, \"IMDB_X\", metagraph, metapaths, key_node='movie', embedding_size=128,\n                     walk_length=5, context_size=6, walks_per_node=5, num_negative_samples=5,\n                     sparse=True) # define model\nmodel._train(epochs=10, lr=0.03) # train\nembeddings = model.get_embeddings() # get embeddings\n```\n\n### Use Case 2: Generates Graph Embeddings using PyG graphs:\n\n```python\nfrom fastgraphml.graph_embeddings import SAGE, GAT\nfrom fastgraphml.graph_embeddings import downstream_tasks \nfrom torch_geometric.datasets import Planetoid\n\n# load pyg dataset\ndataset = Planetoid(root='/tmp/Cora', name='Cora')\ndata = dataset[0]\n\n# generating graph embeddings with 3 lines of code\nmodel = SAGE(pyg_graph=data, embedding_size=64) # define graph embedding model\nmodel._train(epochs=10) # train\nembeddings = model.get_embeddings() # get embeddings\n```\n## Models Supported\n\nModel         | Homogeneous   | Heterogeneous | Node Features\n------------- | ------------- | ------------- | ------------- \n[GraphSage](https://arxiv.org/abs/1706.02216)     | ✔️             |               | ✔️ \n[GAT](https://arxiv.org/abs/1710.10903)           | ✔️             |               | ✔️ \n[Metapath2Vec](https://ericdongyx.github.io/papers/KDD17-dong-chawla-swami-metapath2vec.pdf)  |               | ✔️             |  \n[DMGI](https://arxiv.org/pdf/1911.06750.pdf)          |               | ✔️             | ✔️ \n\n\n\n## Quickstart: Downstream Tasks\nIn addition, the library also provides various low-code helper methods to carry out number of downstream tasks such as visualisation, similarity search (recommendation) , and link prediction (to be added soon).\n\n### Downstream Task 1: Graph Embedding Visualisation\nThis method helps in visualization of generated Graph Embeddings by reducing them 2 dimensions using U-Map.\n#### Example\n```python\n# amazon computers dataset\nclass_names = {0: 'Desktops',1: 'Data Storage',2: 'Laptops',3: 'Monitors',4: 'Computer Components',\n 5: 'Video Projectors',6: 'Routers',7: 'Tablets',8: 'Networking Products',9: 'Webcams'}\n# with one line of code\ndownstream_tasks.visualize_embeddings(model.G, embeddings, class_mapping=class_names, emb_percent=0.1) # model.G is PyG data object\n```\n### Downstream Task 2: Scalable Similarity Search with Faiss\n[Faiss](https://engineering.fb.com/2017/03/29/data-infrastructure/faiss-a-library-for-efficient-similarity-search/) is a tool developed by Facebook that performs similarity search in sets of vectors of any size, up to ones that possibly do not fit in RAM.\nWe support two types of search for now:\n1. exact search: For precise similarity search but at the cost of scalability.\n2. approx search: For scalable similarity search but at the cost of some precision loss.\n#### Example 1\n```python\ndownstream_tasks.similarity_search(embeddings, top_k_nbors=10, nlist=10, search_type='exact')\n```\n#### Example 2\nIf nearest_nbors_search=True, store_embeddings method saves generated Graph Embeddings in ArangoDB along with top_k nearest neighbors (node ids with similar embeddings) and their corresponding similarity scores (i.e. cosine distance). \n```python\nmodel.graph_util.store_embeddings(embeddings, collection_name=None, batch_size=100, class_mapping=None, \n        nearest_nbors_search=False, top_k_nbors=10, nlist=10, search_type='exact')\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arangoml/fastgraphml",
    "keywords": "arangodb,pyg,graph deep learning,graph embeddings,pytorch geometric,graph machine learning,graph neural networks",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastgraphml",
    "package_url": "https://pypi.org/project/fastgraphml/",
    "platform": null,
    "project_url": "https://pypi.org/project/fastgraphml/",
    "project_urls": {
      "Homepage": "https://github.com/arangoml/fastgraphml"
    },
    "release_url": "https://pypi.org/project/fastgraphml/0.0.0/",
    "requires_dist": [
      "requests (==2.28.1)",
      "sklearn (==0.0)",
      "matplotlib (==3.5.2)",
      "seaborn (==0.11.2)",
      "matplotlib-inline (==0.1.2)",
      "numpy (==1.22.4)",
      "tqdm (==4.64.0)",
      "umap-learn (==0.5.3)",
      "adbpyg-adapter (==1.1.0)",
      "python-arango (==7.4.1)",
      "setuptools (==45)",
      "arango-datasets (==1.0.0)",
      "black (==22.8.0) ; extra == 'dev'",
      "pytest (==7.1.3) ; extra == 'dev'",
      "sphinx (==5.1.1) ; extra == 'dev'",
      "pre-commit (==2.20.0) ; extra == 'dev'",
      "types-requests (==2.28.11.2) ; extra == 'dev'",
      "flake8 (==5.0.4) ; extra == 'dev'",
      "pytest-cov (==4.0.0) ; extra == 'dev'",
      "isort (==5.10.1) ; extra == 'dev'",
      "mypy (==0.982) ; extra == 'dev'",
      "types-setuptools (==65.5.0.2) ; extra == 'dev'",
      "bandit (==1.7.4) ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "Given an input graph the library generates graph embeddings using Low-Code built on top of PyG",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15688917,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "609746723ce644f545ee76c7cf65ac06579456065d43efe4be39a0c0a4f7b611",
          "md5": "e19b59814b671ff3bc79509cf26b71c1",
          "sha256": "1190dd64e6100c4bd1c91d1845a7d96ec27262a4da44bdfde19b32457e0b8495"
        },
        "downloads": -1,
        "filename": "fastgraphml-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e19b59814b671ff3bc79509cf26b71c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 28491,
        "upload_time": "2022-11-07T18:33:40",
        "upload_time_iso_8601": "2022-11-07T18:33:40.120122Z",
        "url": "https://files.pythonhosted.org/packages/60/97/46723ce644f545ee76c7cf65ac06579456065d43efe4be39a0c0a4f7b611/fastgraphml-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f150630a0c2a713a98bb0f72199837f80a2ffb729b0be24adc48b076e1dbf745",
          "md5": "fac62cb0cf47ed1f570833226040569b",
          "sha256": "de0e284930c71a16079ae3b4b526173b3a412edd1cb0bfe2e9b320ce9edf8e9a"
        },
        "downloads": -1,
        "filename": "fastgraphml-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fac62cb0cf47ed1f570833226040569b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 177019,
        "upload_time": "2022-11-07T18:33:42",
        "upload_time_iso_8601": "2022-11-07T18:33:42.338924Z",
        "url": "https://files.pythonhosted.org/packages/f1/50/630a0c2a713a98bb0f72199837f80a2ffb729b0be24adc48b076e1dbf745/fastgraphml-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "609746723ce644f545ee76c7cf65ac06579456065d43efe4be39a0c0a4f7b611",
        "md5": "e19b59814b671ff3bc79509cf26b71c1",
        "sha256": "1190dd64e6100c4bd1c91d1845a7d96ec27262a4da44bdfde19b32457e0b8495"
      },
      "downloads": -1,
      "filename": "fastgraphml-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e19b59814b671ff3bc79509cf26b71c1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 28491,
      "upload_time": "2022-11-07T18:33:40",
      "upload_time_iso_8601": "2022-11-07T18:33:40.120122Z",
      "url": "https://files.pythonhosted.org/packages/60/97/46723ce644f545ee76c7cf65ac06579456065d43efe4be39a0c0a4f7b611/fastgraphml-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f150630a0c2a713a98bb0f72199837f80a2ffb729b0be24adc48b076e1dbf745",
        "md5": "fac62cb0cf47ed1f570833226040569b",
        "sha256": "de0e284930c71a16079ae3b4b526173b3a412edd1cb0bfe2e9b320ce9edf8e9a"
      },
      "downloads": -1,
      "filename": "fastgraphml-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fac62cb0cf47ed1f570833226040569b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 177019,
      "upload_time": "2022-11-07T18:33:42",
      "upload_time_iso_8601": "2022-11-07T18:33:42.338924Z",
      "url": "https://files.pythonhosted.org/packages/f1/50/630a0c2a713a98bb0f72199837f80a2ffb729b0be24adc48b076e1dbf745/fastgraphml-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}