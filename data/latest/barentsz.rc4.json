{
  "info": {
    "author": "Ramon Hagenaars",
    "author_email": "ramon.hagenaars@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "[![Python versions](https://img.shields.io/pypi/pyversions/barentsz.svg)](https://img.shields.io/pypi/pyversions/barentsz.svg)\n[![PyPI version](https://badge.fury.io/py/barentsz.svg)](https://badge.fury.io/py/barentsz)\n[![codecov](https://codecov.io/gh/ramonhagenaars/barentsz/branch/master/graph/badge.svg)](https://codecov.io/gh/ramonhagenaars/barentsz)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/ramonhagenaars/barentsz/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/ramonhagenaars/barentsz/?branch=master)\n\n# Barentsz\n\n⛵ Explore and discover modules, classes, functions, attributes.\n\n<a href='https://en.wikipedia.org/wiki/Willem_Barentsz'>\n<img width='100%' src='https://lh3.googleusercontent.com/7YPQsyFF_rE-j2yVnUiudk_CjWt4THrAK2JJFS7HUBPcRXd7UuD382C9EqYeQecvtzLJsEckQjuhcgbAs41FwIE9WOEM3AlPBSJx55qLgqok9Qn_FAsL0NtmMdUTX0yvxiO4RkN-NXXCOQGhpErST8HfWk7qd_25m-hPN9zJEwZNK_8RVdX80odzyCD7ucXv3TYKPeY3wLQxjW_mjvYD0Q6ieZtW-PhYBrjjfMOKGbTzZIJ42KyPE3t40LB-yQOBXn-48H0v_N4tGmoU1beGt6nC_kpu0sUIlttCq57ajW7FIPBpUWVm4HkmL3-ndFzu16gY1XxH6uJf4Pl1opfofRaMsY1OhUll9xjfrHsWL8MQjbA4ZmHjSnJvk790lO_HaicdC9VV3lcnUSJFUlGL7u3dS3SXznQPDebJeCavBBjxN12ur440b0Hp-JGw75Dw4SjC76tIabqy1big5ilZaNk9UgOTVUwXwC7-ZDV3Aufj6-8rcepOvP3ple1fWHfxeDPpkEkhL6WTobfqIqvT17UFubWz0CnhAmd-Mq6Y9tlp4rn3xL8rwKs91YDhh6ev0KslCm1bW8KMIKfUWselrchIsJcTRchQGr8ubN-0w0USvO92Z6txFVRsuKvl-sJUMGzooS_deu2J_wiFZK1KoVGh-QvI4dTAqgp-cxVh0jkqqyc90Pzt7bSmJJK2IfMkReCJ0YdZDxE6Abs0bGIX3qYd7VZy6AqXqQpzTKnyzcoT-T2c=w1920-h429-no' />\n</a>\n\n```\npip install barentsz\n```\n\n## ❄ Overview\n\n* Discover all packages in a path;\n* Discover all modules in a path;\n* Discover all/some classes in a path or module;\n* Discover all/some functions in a path, module or class;\n* Discover all/some attributes in a path or module.\n\n##### List of all features\n\n```python\n>>> import barentsz\n>>> for feature in (f for f in dir(barentsz) if not f.startswith('_')):\n...     print(feature)\ndiscover\ndiscover_attributes\ndiscover_classes\ndiscover_functions\ndiscover_module_names\ndiscover_modules\ndiscover_packages\ndiscover_paths\nhere\n\n```\n\n## ❄ Features in detail\n\nThe sections below contain all features that are offered by this lib. For the API details,\nplease see the **Help documentation** subsections.\n\n### Discover\n\n##### Import\n```python\n>>> from barentsz import discover\n\n```\n\n##### Usage Example\n```python\n>>> discover('./test_resources/examples_for_readme')\n[<class 'examples_for_readme.module_a.ClassA'>, <class 'examples_for_readme.module_b.ClassB'>]\n\n```\n\n##### Help documentation\n```python\n>>> help(discover)\nHelp on function discover in module barentsz._discover:\n<BLANKLINE>\ndiscover(source: Any = None, *, what: Any = typing.List[type], **kwargs: dict) -> list\n    Convenience function for discovering types in some source. If not source\n    is given, the directory is used in which the calling module is located.\n<BLANKLINE>\n    Args:\n        source: the source in which is searched or the directory of the\n        caller if None.\n        what: the type that is to be discovered.\n        **kwargs: any keyword argument that is passed on.\n<BLANKLINE>\n    Returns: a list of discoveries.\n<BLANKLINE>\n\n```\n\n### Discover Classes\n\n##### Import\n```python\n>>> from barentsz import discover_classes\n\n```\n\n##### Usage Example\n```python\n>>> discover_classes('./test_resources/examples_for_readme')\n[<class 'examples_for_readme.module_a.ClassA'>, <class 'examples_for_readme.module_b.ClassB'>]\n\n```\n\n##### Help documentation\n```python\n>>> help(discover_classes)\nHelp on function discover_classes in module barentsz._discover:\n<BLANKLINE>\ndiscover_classes(source: Union[pathlib.Path, str, module, Iterable[module]], signature: type = typing.Any, include_privates: bool = False, in_private_modules: bool = False, raise_on_fail: bool = False, exclude: Union[type, Callable[[type], bool], Iterable[Union[type, Callable[[type], bool]]]] = None) -> List[type]\n    Discover any classes within the given source and according to the given\n    constraints.\n<BLANKLINE>\n    Args:\n        source: the source in which is searched for any classes.\n        signature: only classes that inherit from signature are returned.\n        include_privates: if True, private classes are included as well.\n        in_private_modules: if True, private modules are explored as well.\n        raise_on_fail: if True, raises an ImportError upon the first import\n        failure.\n        exclude: one or more types or predicates that are to be excluded\n        from the result.\n<BLANKLINE>\n    Returns: a list of all discovered classes (types).\n<BLANKLINE>\n\n```\n\n### Discover Functions\n\n##### Import\n```python\n>>> from barentsz import discover_functions\n\n```\n\n##### Usage Example\n```python\n>>> functions = discover_functions('./test_resources/examples_for_readme')\n>>> [f.__name__ for f in functions]\n['function_a', 'function_b']\n\n```\n\n##### Help documentation\n```python\n>>> help(discover_functions)\nHelp on function discover_functions in module barentsz._discover:\n<BLANKLINE>\ndiscover_functions(source: Union[pathlib.Path, str, module, Iterable[module], type], signature: Type[Callable] = typing.Callable, include_privates: bool = False, in_private_modules: bool = False, raise_on_fail: bool = False) -> List[type]\n    Discover any functions within the given source and according to the given\n    constraints.\n<BLANKLINE>\n    Args:\n        source: the source in which is searched for any functions.\n        signature: only functions that have this signature (parameters and\n        return type) are included.\n        include_privates: if True, private functions are included as well.\n        in_private_modules: if True, private modules are explored as well.\n        raise_on_fail: if True, raises an ImportError upon the first import\n        failure.\n<BLANKLINE>\n    Returns: a list of all discovered functions.\n<BLANKLINE>\n\n```\n\n### Discover Attributes\n\n##### Import\n```python\n>>> from barentsz import discover_attributes\n\n```\n\n##### Usage Example\n```python\n>>> attributes = discover_attributes('./test_resources/examples_for_readme')\n>>> [a.name for a in attributes]\n['attr_a', 'attr_b']\n\n```\n\n##### Help documentation\n```python\n>>> help(discover_attributes)\nHelp on function discover_attributes in module barentsz._discover:\n<BLANKLINE>\ndiscover_attributes(source: Union[pathlib.Path, str, module, Iterable[module]], signature: type = typing.Any, include_privates: bool = False, in_private_modules: bool = False, raise_on_fail: bool = False) -> List[barentsz._attribute.Attribute]\n    Discover any attributes within the given source and according to the given\n    constraints.\n<BLANKLINE>\n    Args:\n        source: the source in which is searched for any attributes.\n        signature: only attributes that are subtypes of this signature are\n        included.\n        include_privates: if True, private attributes are included as well.\n        in_private_modules: if True, private modules are explored as well.\n        raise_on_fail: if True, raises an ImportError upon the first import\n        failure.\n<BLANKLINE>\n    Returns: a list of all discovered attributes.\n<BLANKLINE>\n\n```\n\n### Discover Modules\n\n##### Import\n```python\n>>> from barentsz import discover_modules\n\n```\n\n##### Usage Example\n```python\n>>> modules = discover_modules('./test_resources/examples_for_readme')\n>>> [m.__name__ for m in modules]\n['examples_for_readme.module_a', 'examples_for_readme.module_b']\n\n```\n\n##### Help documentation\n```python\n>>> help(discover_modules)\nHelp on function discover_modules in module barentsz._discover:\n<BLANKLINE>\ndiscover_modules(directory: Union[pathlib.Path, str], include_privates: bool = False, raise_on_fail: bool = False) -> List[module]\n    Return a list of modules within the given directory. The directory must be\n    a package and only modules are returned that are in packages.\n    Args:\n        directory: the directory in which is searched for modules.\n        include_privates: if True, privates (unders and dunders) are also\n        included.\n        raise_on_fail: if True, an ImportError is raised upon failing to\n        import any module.\n<BLANKLINE>\n    Returns: a list of module objects.\n<BLANKLINE>\n\n\n```\n\n### Discover Packages\n\n##### Import\n```python\n>>> from barentsz import discover_packages\n\n```\n\n##### Usage Example\n```python\n>>> discover_packages('./test_resources/examples_for_readme')\n['examples_for_readme']\n\n```\n\n##### Help documentation\n```python\n>>> help(discover_packages)\nHelp on function discover_packages in module barentsz._discover:\n<BLANKLINE>\ndiscover_packages(directory: Union[pathlib.Path, str]) -> List[str]\n    Return a list of packages within the given directory. The directory must be\n    a package.\n    Args:\n        directory: the directory in which is searched for packages.\n<BLANKLINE>\n    Returns: a list of packages.\n<BLANKLINE>\n\n```\n\n### Current Directory (here)\n\n##### Import\n```python\n>>> from barentsz import here\n\n```\n\n##### Usage Example\n```python\n>>> str(here())\n'.'\n\n```\n\n##### Help documentation\n```python\n>>> help(here)\nHelp on function here in module barentsz._here:\n<BLANKLINE>\nhere(frames_back: int = 0) -> pathlib.Path\n    Get the current directory from which this function is called.\n    Args:\n        frames_back: the number of extra frames to look back.\n<BLANKLINE>\n    Returns: the directory as a Path instance.\n<BLANKLINE>\n\n```\n\n### Discover Paths\n\n##### Import\n```python\n>>> from barentsz import discover_paths\n\n```\n\n##### Usage Example\n```python\n>>> paths = discover_paths('./test_resources/examples_for_readme', '**/*.py')\n>>> [str(p.as_posix()) for p in paths]\n['test_resources/examples_for_readme/__init__.py', 'test_resources/examples_for_readme/module_a.py', 'test_resources/examples_for_readme/module_b.py']\n\n\n```\n\n##### Help documentation\n```python\n>>> help(discover_paths)\nHelp on function discover_paths in module barentsz._discover:\n<BLANKLINE>\ndiscover_paths(directory: Union[pathlib.Path, str], pattern: str) -> List[pathlib.Path]\n    Return a list of Paths within the given directory that match the given\n    pattern.\n<BLANKLINE>\n    Args:\n        directory: the directory in which is searched for paths.\n        pattern: a pattern (example: '**/*.py').\n<BLANKLINE>\n    Returns: a list of Path objects.\n<BLANKLINE>\n\n\n```\n\n## ❄ (Not So) Frequently Asked Questions\n1) > When is Barentsz particularly useful?\n\n    _When e.g. adding a class to some package and you want it to be picked up \n    in your application, without having to add an import or registration \n    somewhere._\n\n2) > Does Barentsz require my classes to be compromised (e.g. with inheritance or a decorator or something)?\n\n    _No, never._\n\n3) > What must I do for Barentsz to discover my class (or function, attribute, etc.)?\n\n    _Nothing special. Just make sure that the path that is explored is a Python package._\n\n4) > Why do the \"Help documentation\" sections contain this \"\\<BLANKLINE\\>\"?\n\n    _That's because this documentation is under [doctest](https://docs.python.org/3/library/doctest.html).\n    It helps to ensure that the documentation is always up to date._\n\n5) > What's with the funny name?\n\n    _Well... since this library is all about exploring and discovering and because\n    I really enjoyed the cold north, I thought it to be a fitting name._\n\n6) > What is the answer to the Ultimate Question of Life, the Universe, and Everything?\n\n    _Haven't got a clue, what are you asking me for anyway? I suggest you build an AI \n    to deduce the answer (using barentsz of course)._\n\n## ❄ Changelist\n\n### 1.2.1 [2020-09-26]\n* Fix for a bug when discovering using a relative path.\n\n### 1.2.0 [2020-09-20]\n* Changed `exclude` parameter to also allow predicates.\n\n### 1.1.0 [2020-08-05]\n* Added the `here` function that returns the directory of the caller of that function. \n* Added the `discovery` function that can conveniently find types using the current dir and a given class.\n* Added `exclude` to `discover_classes` to allow for excluding one or more types from discovery.\n* Fix for double discovered classes.\n\n### 1.0.0 [2020-07-28]\n* First release. 🎉\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ramonhagenaars/barentsz",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "barentsz",
    "package_url": "https://pypi.org/project/barentsz/",
    "platform": "",
    "project_url": "https://pypi.org/project/barentsz/",
    "project_urls": {
      "Homepage": "https://github.com/ramonhagenaars/barentsz"
    },
    "release_url": "https://pypi.org/project/barentsz/1.2.1/",
    "requires_dist": [
      "typish (>=1.7.0)",
      "scons ; extra == 'test'",
      "pycodestyle ; extra == 'test'",
      "pylint ; extra == 'test'",
      "mypy ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "coverage ; extra == 'test'",
      "radon ; extra == 'test'",
      "xenon ; extra == 'test'",
      "autoflake ; extra == 'test'",
      "isort ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "For discovering modules, classes, functions and attributes.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8278136,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df75f66225e8365ddb66a95b096bf86c724d22e6981e64fe6e844ef538e43b76",
          "md5": "de6aa11000ceef2110c2ba9852ca62bc",
          "sha256": "31566f5490b9df9ed70a5a5f1833d21daf6fefd8575509dca97aa9c5a33d4a62"
        },
        "downloads": -1,
        "filename": "barentsz-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de6aa11000ceef2110c2ba9852ca62bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10114,
        "upload_time": "2020-07-28T18:59:17",
        "upload_time_iso_8601": "2020-07-28T18:59:17.665555Z",
        "url": "https://files.pythonhosted.org/packages/df/75/f66225e8365ddb66a95b096bf86c724d22e6981e64fe6e844ef538e43b76/barentsz-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e5e5d8a8d8add8f1cc877615ddbda6c32f154edaf43929811646038ba19e0ec",
          "md5": "b488cb0264721ed89a1d101eb893c454",
          "sha256": "7e4e25d41bd57045d59fd6cbe121bf9fdfa9e1df6f633195a0cfefa5b086e09a"
        },
        "downloads": -1,
        "filename": "barentsz-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b488cb0264721ed89a1d101eb893c454",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12128,
        "upload_time": "2020-08-05T20:08:48",
        "upload_time_iso_8601": "2020-08-05T20:08:48.367057Z",
        "url": "https://files.pythonhosted.org/packages/3e/5e/5d8a8d8add8f1cc877615ddbda6c32f154edaf43929811646038ba19e0ec/barentsz-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6b05963b288c5f1699479984385f545a318c53b079fa060d71a4d7793a5c910",
          "md5": "cc0a4d2ee98d8a9fce5b0bd2196bdbf9",
          "sha256": "a3c1efa3b8c409458aaaa33961d37fa6816b3ff60a26a0c5c9fb0177254f8112"
        },
        "downloads": -1,
        "filename": "barentsz-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc0a4d2ee98d8a9fce5b0bd2196bdbf9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12500,
        "upload_time": "2020-09-20T20:35:57",
        "upload_time_iso_8601": "2020-09-20T20:35:57.879090Z",
        "url": "https://files.pythonhosted.org/packages/f6/b0/5963b288c5f1699479984385f545a318c53b079fa060d71a4d7793a5c910/barentsz-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "938c3b29ca411e1c16a7216cf3d0168e501445860f1b069db04a09be2bc236a0",
          "md5": "4ba9be43c5e87e6feec724198008d123",
          "sha256": "7f7c74f11e4bd9c905163c55c2f13106a853a776522335725c29633a5abfdcfb"
        },
        "downloads": -1,
        "filename": "barentsz-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ba9be43c5e87e6feec724198008d123",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12458,
        "upload_time": "2020-09-26T12:02:21",
        "upload_time_iso_8601": "2020-09-26T12:02:21.015322Z",
        "url": "https://files.pythonhosted.org/packages/93/8c/3b29ca411e1c16a7216cf3d0168e501445860f1b069db04a09be2bc236a0/barentsz-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "938c3b29ca411e1c16a7216cf3d0168e501445860f1b069db04a09be2bc236a0",
        "md5": "4ba9be43c5e87e6feec724198008d123",
        "sha256": "7f7c74f11e4bd9c905163c55c2f13106a853a776522335725c29633a5abfdcfb"
      },
      "downloads": -1,
      "filename": "barentsz-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ba9be43c5e87e6feec724198008d123",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12458,
      "upload_time": "2020-09-26T12:02:21",
      "upload_time_iso_8601": "2020-09-26T12:02:21.015322Z",
      "url": "https://files.pythonhosted.org/packages/93/8c/3b29ca411e1c16a7216cf3d0168e501445860f1b069db04a09be2bc236a0/barentsz-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}