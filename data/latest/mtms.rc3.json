{
  "info": {
    "author": "Govind Grover",
    "author_email": "ask@govindgrover.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Natural Language :: Hindi",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Education"
    ],
    "description": "# Metro Train Management System (MTMS)\n\n### A School Project in Python (CBSE India)\n\n\n<br />\n<p align=\"center\">\n    <img src=\"https://img.shields.io/badge/license-GPL-orange.svg\" />\n\t<!-- WARNING: BEFORE UPLOADING TO PyPi CHANGE THE FINAL MODULE VERSION HERE -->\n\t<img src=\"https://img.shields.io/badge/Module Version-1.0.3-green\" />\n\t<img src=\"https://img.shields.io/badge/python-%3E%3D%203.8-yellow\" />\n\t<img src=\"https://img.shields.io/badge/pip-%3E%3D%2020.1-blue\" />\n\t<img src=\"https://img.shields.io/badge/mysql-%3E%3D%2015.1-red\" />\n</p>\n\n<br />\n\n## Table of contents\n\n- [Quick Start](#quick-start)\n- [Configuration](#configuration)\n- [Description](#description)\n\t- [Hardware Requirements](#hardware-requirements)\n\t- [Software Requirements](#software-requirements)\n\t- [Understanding the System](#understanding-the-system)\n\t- [Limitations](#limitations)\n\t- [Module Dependencies](#module-dependencies)\n\t- [User-defined Functions](#user-defined-functions)\n\t- [Data Files](#data-files)\n- [Copyright and license](#copyright-and-license)\n\n\n# Quick Start\n\nSeveral quick start options are available:\n\n- Install from pip: `pip install mtms`\n- Clone the repo: `gh repo clone govindgrover/mtms`\n- Clone the repo: `https://github.com/govindgrover/mtms.git`\n\n\nThen to run the system,\n```python\n>>> import mtms\n>>> mtms.run()\n```\n<br />\n\n# Configuration \nYou can change the default configurations in the file:\n```python\n<python-path>/Lib/site-packages/mtms/base/config.py\n```\n\nThe default configuration  is as follow:\n```python\n# DATABASE INITIALS\n__DB_USER__ = 'root'\n__DB_PASS__ = 'password'\n__DB_HOST__ = 'localhost'\n__DB_NAME__ = 'metro_db'\n\n# MUST BE IN 24-hour FORMAT\n# AT WHICH OF CLOCK THE STATIONS WILL OPEN\n__TRAIN_TIME_START__ = 9\n# AT WHICH OF CLOCK THE STATIONS WILL CLOSE\n__TRAIN_TIME_END__ = 23\n\n# SECURITY AMOUNT TO BE TAKEN FROM THE CUSTOMER\n__NEW_CARD_SECURITY__ = 50\n# MINIMUM AMOUNT TO BE RECHARGED\n__MIN_CARD_RECHARGE_AMOUNT__ = 200\n# MAXIMUM AMOUNT TO BE RECHARGED\n__MAX_CARD_RECHARGE_AMOUNT__ = 2000\n\n# TIME FOR WHICH ONE CAN STAY AT STATION WHICH BEING ON THE TRAIN\n__IN_STATION_TIME_DIFF__ = '00:20:00'\n\n# WANT TO USE QR OR NOT\n__USE_QR__ = True\n```\n\nIn the above <b>\\_\\_DB\\_NAME\\_\\_</b> the database name must match which is given in the initial database file. so it will be good if you take care of it. Otherwise if you really want to change it, you can do it at:\n\n```python\n<python path>/Lib/site-packages/mtms/initials/database/metro_db_struct.sql\n```\n\n<br />\n\n---\n\n# Description\n\n<br />\n\n## Hardware Requirements\n\n| **Hardware Requirements** |\n| --- |\n| PC or Laptop satisfying the below software requirements |\n\n<br />\n\n## Software Requirements\n\n| **Software Requirements**| |\n| --- | --- |\n| **OS** | Any; _Preferred: Windows 10_ |\n| **Python** | &gt;= 3.8 |\n| **pip** | &gt;= 20.1 |\n| **MySQL** | &gt;= 15.1 |\n| **Command Prompt** | Yes; _Preferred: Windows Terminal from Windows 10 Store - [download](https://www.microsoft.com/store/productId/9N0DX20HK701)_ |\n| **Font** | Any; _Preferred: Consolas or any other Hindi supporting font_ |\n\n<br />\n\n## Understanding the System\n\n<br />\n\nAim of this module is to bring easiness for everyone who works as a staff member at metro or a daily job person who uses metro as transport.\n\n**Metro Train Management System** helps one to manage different stations and their routes along with the counter system and customer booking system.\n\n<br />\n\n## Limitations\n\n- Line Routes are mentioned but there is no use of them because then it will become more tedious on our hand.\n- Customer cannot view his/her journey going on screen.\n- Customer has to remember a 36-character long token/card ID.\n\n<br />\n\n# Module Dependencies\n\n- OS\n- mysql.connection\n- uuid\n- time\n- datetime\n- sys\n- traceback\n- json\n- pickle\n- pyqrcode\n\n# User-defined Functions\n\n<br />\n\n_/\\_\\_init\\_\\_.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| run | Void | None | Starts the main system |\n\n_/base/classes/Admin.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| \\_\\_addFareForStation | station\\_info : dict | Boolean | Assign fare for the added station whose _station\\_id_ is given through the parameter |\n| login | username : str, password : str | dict | Login the admin user if the credentials matched |\n| logout | Void | dict | Logout the admin user |\n| addAccount | username : str, email : str, password : str, role : int | dict | Adds new user account based on the given data.Role is 0 for admin and 1 for counter |\n| addRoute | route\\_name : str | dict | Adds new route |\n| addStation | station\\_name : str, route\\_id : str | dict | Adds new station and assign it on the provided route |\n| renameRoute | \\_id : str, new\\_name : str | dict | Rename the provided route |\n| renameStation | \\_id : str, new\\_name : str | dict | Rename the provided station |\n| modifyStationFares | f\\_id : str, t\\_id : str, amt : float | dict | Modify the fare charges for the provided pair of stations |\n| getAllRoutesAndStations | Void | dict | Gives all of the stations name and their assigned route names |\n| getAllUsers | Void | dict | Gives a list of users their emails and roles |\n| backupDatabase | Void | dict | Backup the current database to the location:&lt;Python folder&gt;/Lib/mtms/\\_backups/db\\_backup.sql |\n| resetDatabase | Void | dict | It will reset the database and recreate it from the initial file |\n| changeStationStatus | sid : str, status : int, reason : str | dict | It will set the station closure status as specified with a reason to the provided station |\n| viewStationStatus | sid : str | dict | It will tell the station closure station for the provided station |\n\n_/base/classes/CardOperation.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| \\_\\_isActive | cid : str | Boolean | Checks weather the provided Card - ID is valid or not |\n| \\_\\_doCardChecks | cid : str | dict | Performs checks on the provided Card â€“ ID |\n| \\_\\_isInStation | cid : str | Boolean | Checks weather the provided card has checked-in a station or not |\n| \\_\\_stationEntry | cid : str, entry\\_sid : str | dict | Mark the provided card as in-station for the provided station and make a new booking |\n| \\_\\_stationExit | cid : str, exit\\_sid : str | dict | Mark the provided card as out-station for the provided station and make a complete the opened booking |\n| isCard | cid : str | Boolean | Tells weather the provided Card-ID is valid and original or not |\n| onTouch | cid : str, cur\\_stat : str | dict | It performs action on the provided Card-ID according to the state which it is in with respect to the current station |\n\n_/base/classes/ConsoleTable.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| \\_\\_sumUpLengths | Void | int | It tells the number of columns in total for the provided data for creatin the table borders |\n| \\_\\_makeListOfLengthOfEachInnerListItem | Void | list | It makes a list which contains length of all columns data provided |\n| \\_\\_getListOfThisIndexFromInnerLists | arr : list, index : int | list | It calculates the maximum number of characters occurring in the respected column at that index |\n| \\_\\_setAutoMaxLengths | Void | None | It sets the maximum character length needed for a good looking table |\n| \\_\\_checkData | Void | Boolean | It checks weather the number of provided columns and rows is greater than zero or not |\n| setColumnHeaders | cols : list | None | Set headers |\n| setRows | rows : list | None | Set rows |\n| createTable | Void | None | Prints a final table output |\n\n_/base/classes/Counter.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| \\_\\_isCardExists | card\\_id | Boolean | Checks weather the provided Card-ID exists or not |\n| login | username : str, password : str | dict | Login the counter user if the credentials matched |\n| logout | Void | dict | Logout the counter user |\n| getCardBalance | cid : str, amt\\_only : bool = False | dict | Gives card balance for the provided card and if amt\\_onlysets to Truethen it will return only float amount |\n| printCard | cid : str | str | Prints the provided Card-ID with its amount into a text file |\n| buyNewCard | Void | dict | Create a new metro card |\n| rechargeCard | cid : str | dict | Recharge the card |\n| refundCard | cid : str | dict | Disable the card when refunded successfully |\n\n_/base/classes/Payment.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| \\_\\_selectMode | Void | None | Sets the current payment mode as per user&#39;s choice |\n| \\_\\_takeAmount\\_and\\_Proceed | Void | None | Asks to user to enter the amount and do some checks then accordingly approves or disapproves the transaction |\n| \\_\\_confirmAmt\\_and\\_Proceed | Void | None | Asks the user for confirmation for the transaction of pre-defined balance |\n| setAmount | to\\_charge : float | None | Sets the pre-defined amount |\n| setMaxAmount | max\\_to\\_charge : float | None | Sets the max amount that the users can enter |\n| amountRecived | Void | Float | Returns the amount entered by the user |\n| creditAmount | Void | None | Performs the main transaction with user interaction |\n\n_/base/classes/TokenOperation.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| \\_\\_isActive | tid : str | Boolean | Checks weather the provided Token - ID is valid or not |\n| \\_\\_doTokenChecks | tid : str | dict | Performs checks on the provided Token â€“ ID |\n| \\_\\_isTimeOut | tid : str | Boolean | Checks weather the token is expired or not |\n| \\_\\_isInStation | tid : str | Boolean | Checks weather the provided token has checked-in a station or not |\n| \\_\\_stationEntry | tid : str | dict | Mark the provided token as in-station and make a new booking |\n| \\_\\_stationExit | tid : str | dict | Mark the provided token as out-station and make a complete the opened booking |\n| \\_\\_makeBooking | info : dict | str | Makes a new booking when a token is purchased based on the provided data |\n| \\_\\_markJourney | f : str, t : str | dict | Helps to fetch the fare for the provided pair of stations |\n| isToken | tid : str | Boolean | Tells weather the provided Token-ID is valid and original or not |\n| onTouch | cid : str | dict | It performs action on the provided Token - ID according to the state which it is in |\n| printTicket | bid : str | str | Prints the ticket into a text file based on the booking data |\n| buyToken | \\_from : str, \\_to : str | dict | Makes a new token and assign a new booking to it for the provided pair of stations |\n\n_/base/functions/functions.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| get\\_runs\\_upto | Void | int | Tells how many time the system is ran till now from the time of setup |\n| showCountDown | text : strt : int | None | It shows a countdown for t time with the provided text |\n| ask | q : str | Boolean | Asks the user provided question and tells weather he said yes or no |\n| printHeading | tree : list, width : int, sep\\_times : int = 5 | None | Print a heading at top of the console screen after clearing all the past printed lines |\n| insertInTableCmd | tbl\\_name : str, arr\\_col : list, arr\\_val : list | str | Returns a SQL insert query based on the data provided |\n| generateId | Void | str | Generates a unique id through the python&#39;s UUID module |\n| isInDB | db : object, tbl\\_name : str, col\\_name : str, val : any | Boolean | Checks weather the provided record is exists or not |\n| checkStationTimmings | Void | dict | Checks and tells weather the station is opened or closed during the hours |\n| getAllRoutes | db : object | dict | Fetch all of routes |\n| getAllStations | db : object | dict | Fetch all of stations |\n| searchStations | db : object, like\\_text : str | str | Helps the user to search the stations based on the provided input and return the station\\_id for the selected station |\n| searchRoutes | db : object, like\\_text : str | str | Helps the user to search the routes based on the provided input and return the route\\_id for the selected route |\n| showQR | txt : str, showTxt : str | None | Generates and show the QR Code for thr provided text string |\n| checkStationClosure | db : object, sid : str | dict | Checks weather a specific station is closed or not |\n| makeErrorLog | Void | str | Makes an error log file for the errors raised during the execution of the program through the traceback module |\n| setWorkingLang | dft : bool = False | dict | Return a dictionary of lines used in the program by reading a language file from users&#39; choice |\n| importInitials | db : object = None, isReset : bool = False | Boolean | it imports and sets important data at its place |\n| isFirstLanuch | Void | Boolean | Tells weather the system is running for the first time or not |\n| firstThingsFirst | Void | None | The very first function to be executed for the system |\n\n_/base/menu/admin\\_menu.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| login | Void | None | Login the admin user if the credentials matched |\n| logout | Void | None | Logout the admin user |\n| addNewUser | Void | None | Adds new user account based on the given data.Role is 0 for admin and 1 for counter |\n| addNewRoute | Void | None | Adds new route |\n| addNewStation | Void | None | Adds new station and assign it on the provided route |\n| renameTheRoute | Void | None | Rename the provided route |\n| renameTheStation | Void | None | Rename the provided station |\n| changeFares | Void | None | Modify the fare charges for the provided pair of stations |\n| showAllRoutesAndStations | Void | None | Gives all of the stations name and their assigned route names |\n| showAllUsers | Void | None | Gives a list of users their emails and roles |\n| takeBackup | Void | None | Backup the current database to the location:&lt;Python folder&gt;/Lib/mtms/\\_backups/db\\_backup.sql |\n| modifyStationStatus | Void | None | It will set the station closure status as specified with a reason to the provided station |\n| viewStationStatus | Void | None | It will tell the station closure station for the provided station |\n| resetEverthing | Void | None | It will drop the current database and then recreate it from the initials |\n\n_/base/menu/counter\\_menu.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| login | Void | None | Login the counter user if the credentials matched |\n| logout | Void | None | Logout the counter user |\n| getBalance | Void | None | Gives card balance for the provided card and if amt\\_onlysets to Truethen it will return only float amount |\n| buyCard | Void | None | Create a new metro card |\n| rechargeTheCard | Void | None | Recharge the card |\n| refundTheCard | Void | None | Disable the card when refunded successfully |\n\n_/base/menu/customer\\_menu.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| touch | Void | None | Performs functionalities according to the type of touch |\n| getToken | Void | None | Performs functionalities for buying a new token |\n\n_/base/menu/customer\\_menu.py_\n\n| **Function Name** | **Parameter(s)** | **Return** | **Description** |\n| --- | --- | --- | --- |\n| showMenu | module : object, view : dict, tree : list | None | Show menu depending on the provided information |\n\n<br />\n\n# Data Files\n\n| **File Name** | **Location** | **Description** |\n| --- | --- | --- |\n| mtms\\_run\\_info.bin | &lt;Python folder&gt;/Lib/mtms/ | Stores number of times the system is ran from the first setup |\n\n# Copyright and license\n\nCode and documentation copyright 2021-22 Govind Grover Code released under the [GPL License](https://github.com/govindgrover/mtms/blob/master/LICENSE). Docs released under [Creative Commons](https://creativecommons.org/licenses/by/4.0/).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/govindgrover/mtms",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mtms",
    "package_url": "https://pypi.org/project/mtms/",
    "platform": null,
    "project_url": "https://pypi.org/project/mtms/",
    "project_urls": {
      "Homepage": "https://github.com/govindgrover/mtms"
    },
    "release_url": "https://pypi.org/project/mtms/1.0.3/",
    "requires_dist": [
      "mysql.connector",
      "uuid",
      "pyqrcode"
    ],
    "requires_python": ">=3.6",
    "summary": "Metro Train Management System",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13320730,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4647fcdd6928f8f99bb85a774b0235a25f154a9b4319061a54c6b553a14f0f00",
          "md5": "e64ead1f1273df02cdef49ff413b3464",
          "sha256": "d2831d08a4d772e5763be8b6c2c5d2eb692a837a4f265cf518aa0065995c80ce"
        },
        "downloads": -1,
        "filename": "mtms-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e64ead1f1273df02cdef49ff413b3464",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52092,
        "upload_time": "2022-02-10T15:17:26",
        "upload_time_iso_8601": "2022-02-10T15:17:26.616978Z",
        "url": "https://files.pythonhosted.org/packages/46/47/fcdd6928f8f99bb85a774b0235a25f154a9b4319061a54c6b553a14f0f00/mtms-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31f17428f07b84342d64daf603e3ebb657c4875b528d214274ed3aa4100e13df",
          "md5": "a786bbc7fc40d2f630bacdc8813a1697",
          "sha256": "67ecc4928a42c2b4817873006b68b1b4ebcf1be60857ffb859943d3e0e9e18e7"
        },
        "downloads": -1,
        "filename": "mtms-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a786bbc7fc40d2f630bacdc8813a1697",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46225,
        "upload_time": "2022-02-10T15:17:28",
        "upload_time_iso_8601": "2022-02-10T15:17:28.251109Z",
        "url": "https://files.pythonhosted.org/packages/31/f1/7428f07b84342d64daf603e3ebb657c4875b528d214274ed3aa4100e13df/mtms-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a956414153d50fba03cfe8a94c1947da4e67bf53900ed6c6b6f4fdf5298e5249",
          "md5": "ef39678d1d1ba1e59d49c0c110cd10fb",
          "sha256": "37a4843964ee49cd022288f75a7a292a55318fd34c17f32c49a032431a0cf106"
        },
        "downloads": -1,
        "filename": "mtms-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef39678d1d1ba1e59d49c0c110cd10fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52276,
        "upload_time": "2022-03-02T12:52:43",
        "upload_time_iso_8601": "2022-03-02T12:52:43.149941Z",
        "url": "https://files.pythonhosted.org/packages/a9/56/414153d50fba03cfe8a94c1947da4e67bf53900ed6c6b6f4fdf5298e5249/mtms-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0523e00afad0fbceace45afd2dde8bdd0e60c85b76a890e132af26f32a3c4204",
          "md5": "cebf75ca1076efed145039e9c7621bff",
          "sha256": "0b0e1c814a45d73866cb4bda59084d13db2b1cda0ceefc2c2955beb4783ff254"
        },
        "downloads": -1,
        "filename": "mtms-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cebf75ca1076efed145039e9c7621bff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46642,
        "upload_time": "2022-03-02T12:52:45",
        "upload_time_iso_8601": "2022-03-02T12:52:45.052496Z",
        "url": "https://files.pythonhosted.org/packages/05/23/e00afad0fbceace45afd2dde8bdd0e60c85b76a890e132af26f32a3c4204/mtms-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a218f994d193f351ece7f07d399a1deac785d1216a0e0e6f5d8b0ea54a9dbaa0",
          "md5": "5f3fa2314478f63a0eecdd119eb65bf2",
          "sha256": "af87c4f4bf06c2a4eaa419d77f5075f43c6af19064e60aec5a25929fc4408e2d"
        },
        "downloads": -1,
        "filename": "mtms-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f3fa2314478f63a0eecdd119eb65bf2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52236,
        "upload_time": "2022-03-28T10:24:51",
        "upload_time_iso_8601": "2022-03-28T10:24:51.564928Z",
        "url": "https://files.pythonhosted.org/packages/a2/18/f994d193f351ece7f07d399a1deac785d1216a0e0e6f5d8b0ea54a9dbaa0/mtms-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f70edacee689d67bd3a34749ebcb32d1a7a7582b477c4b24de028b83e1f4b190",
          "md5": "643b1ccab3329ad376414e1926d81770",
          "sha256": "7261ad034c8dc39eb3d8e2077d7450fa10959649acaa8be96a16f3002e667be3"
        },
        "downloads": -1,
        "filename": "mtms-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "643b1ccab3329ad376414e1926d81770",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46649,
        "upload_time": "2022-03-28T10:24:53",
        "upload_time_iso_8601": "2022-03-28T10:24:53.560278Z",
        "url": "https://files.pythonhosted.org/packages/f7/0e/dacee689d67bd3a34749ebcb32d1a7a7582b477c4b24de028b83e1f4b190/mtms-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a218f994d193f351ece7f07d399a1deac785d1216a0e0e6f5d8b0ea54a9dbaa0",
        "md5": "5f3fa2314478f63a0eecdd119eb65bf2",
        "sha256": "af87c4f4bf06c2a4eaa419d77f5075f43c6af19064e60aec5a25929fc4408e2d"
      },
      "downloads": -1,
      "filename": "mtms-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f3fa2314478f63a0eecdd119eb65bf2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 52236,
      "upload_time": "2022-03-28T10:24:51",
      "upload_time_iso_8601": "2022-03-28T10:24:51.564928Z",
      "url": "https://files.pythonhosted.org/packages/a2/18/f994d193f351ece7f07d399a1deac785d1216a0e0e6f5d8b0ea54a9dbaa0/mtms-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f70edacee689d67bd3a34749ebcb32d1a7a7582b477c4b24de028b83e1f4b190",
        "md5": "643b1ccab3329ad376414e1926d81770",
        "sha256": "7261ad034c8dc39eb3d8e2077d7450fa10959649acaa8be96a16f3002e667be3"
      },
      "downloads": -1,
      "filename": "mtms-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "643b1ccab3329ad376414e1926d81770",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 46649,
      "upload_time": "2022-03-28T10:24:53",
      "upload_time_iso_8601": "2022-03-28T10:24:53.560278Z",
      "url": "https://files.pythonhosted.org/packages/f7/0e/dacee689d67bd3a34749ebcb32d1a7a7582b477c4b24de028b83e1f4b190/mtms-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}