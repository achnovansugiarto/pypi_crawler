{
  "info": {
    "author": "Vincent Sarago",
    "author_email": "vincent@developmentseed.org",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "# stac-tiler\n\nA rio-tiler plugin to handler STAC items\n\n\n[![Packaging status](https://badge.fury.io/py/stac-tiler.svg)](https://badge.fury.io/py/stac-tiler)\n[![CircleCI](https://circleci.com/gh/developmentseed/stac-tiler.svg?style=svg)](https://circleci.com/gh/cogeotiff/stac-tiler)\n[![codecov](https://codecov.io/gh/developmentseed/stac-tiler/branch/master/graph/badge.svg)](https://codecov.io/gh/cogeotiff/stac-tiler)\n\n\n## Install\n\n```bash\n$ pip install pip -U\n$ pip install stac-tiler --pre  # stac-tiler is in pre-release 0.0rc1 version \n\n# Or using source\n\n$ pip install git+http://github.com/developmentseed/stac-tiler\n```\n\n## How To\n\nstac-tiler is based on [rio-tiler-crs](https://github.com/cogeotiff/rio-tiler-crs) and [morecantile](https://github.com/developmentseed/morecantile).\n\n## Docs\n\n<details>\n\n```\nclass STACReader:\n    \"\"\"\n    STAC + Cloud Optimized GeoTIFF Reader.\n\n    Examples\n    --------\n    with STACReader(stac_path) as stac:\n        stac.tile(...)\n\n    my_stac = {\n        \"type\": \"Feature\",\n        \"stac_version\": \"1.0.0\",\n        ...\n    }\n    with STACReader(None, item=my_stac) as stac:\n        stac.tile(...)\n\n    Attributes\n    ----------\n    filepath: str\n        STAC Item path, URL or S3 URL.\n    item: Dict, optional\n        STAC Item dict.\n    tms: morecantile.TileMatrixSet, optional\n        TileMatrixSet to use, default is WebMercatorQuad.\n    minzoom: int, optional\n        Set minzoom for the tiles.\n    minzoom: int, optional\n        Set maxzoom for the tiles.\n    include_assets: Set, optional\n        Only accept some assets.\n    exclude_assets: Set, optional\n        Exclude some assets.\n    include_asset_types: Set, optional\n        Only include some assets base on their type\n    include_asset_types: Set, optional\n        Exclude some assets base on their type\n\n    Properties\n    ----------\n    bounds: tuple[float]\n        STAC bounds in WGS84 crs.\n    center: tuple[float, float, int]\n        STAC item center + minzoom\n\n    Methods\n    -------\n    tile(0, 0, 0, assets=\"B01\", expression=\"\nB01/B02\")\n        Read a map tile from the COG.\n    part((0,10,0,10), assets=\"B01\", expression=\"\nB1/B20\", max_size=1024)\n        Read part of the COG.\n    preview(assets=\"B01\", max_size=1024)\n        Read preview of the COG.\n    point((10, 10), assets=\"B01\")\n        Read a point value from the COG.\n    stats(assets=\"B01\", pmin=5, pmax=95)\n        Get Raster statistics.\n    info(assets=\"B01\")\n        Get Assets raster info.\n    metadata(assets=\"B01\", pmin=5, pmax=95)\n        info + stats\n\n    \"\"\"\n```\n\n</details>\n\n\n- **STACReader.tile()**: Read map tile from STAC assets\n\n```python\nwith STACReader(\"stac.json\") as stac:\n    tile, mask = stac.tile(1, 2, 3, tilesize=256, assets=[\"red\", \"green\"])\n\n# With expression\nwith STACReader(\"stac.json\") as stac:\n    tile, mask = cog.tile(1, 2, 3, tilesize=256, expression=\"red/green\")\n```\n\n- **STACReader.part()**: Read part of STAC assets\n\n```python\nwith STACReader(\"stac.json\") as stac:\n    data, mask = stac.part((10, 10, 20, 20), assets=[\"red\", \"green\"])\n\n# Limit output size (default is set to 1024)\nwith STACReader(\"stac.json\") as stac:\n    data, mask = stac.part((10, 10, 20, 20), max_size=2000, assets=[\"red\", \"green\"])\n\n# Read high resolution\nwith STACReader(\"stac.json\") as stac:\n    data, mask = stac.part((10, 10, 20, 20), max_size=None, assets=[\"red\", \"green\"])\n\n# With expression\nwith STACReader(\"stac.json\") as stac:\n    data, mask = stac.part((10, 10, 20, 20), expression=\"red/green\")\n```\n\n- **STACReader.preview()**: Read a preview of STAC assets\n\n```python\nwith STACReader(\"stac.json\") as stac:\n    data, mask = stac.preview(assets=[\"red\", \"green\"])\n\n# With expression\nwith STACReader(\"stac.json\") as stac:\n    data, mask = stac.preview(expression=\"red/green\")\n```\n\n- **STACReader.point()**: Read point value of STAC assets\n\n```python\nwith STACReader(\"stac.json\") as stac:\n    pts = stac.point(-100, 25, assets=[\"red\", \"green\"])\n\n\n# With expression\nwith STACReader(\"stac.json\") as stac:\n    pts = stac.point(-100, 25, expression=\"red/green\")\n```\n\n- **STACReader.info()**: Return simple metadata for STAC assets\n\n```python\nwith STACReader(\"stac.json\") as stac:\n    info = stac.info(\"B01\")\n{\n    \"B01\": {\n        \"bounds\": [23.10607624352815, 31.50517374437416, 24.296464503939944, 32.51933487169619],\n        \"center\": [23.701270373734047, 32.012254308035175, 8],\n        \"minzoom\": 8,\n        \"maxzoom\": 11,\n        \"band_metadata\": [[1, {}]],\n        \"band_descriptions\": [[1, \"band1\"]],\n        \"dtype\": \"uint16\",\n        \"colorinterp\": [\"gray\"],\n        \"nodata_type\": \"Nodata\"\n    }\n}\n```\n\n- **STACReader.stats()**: Return statistics for STAC assets (Min/Max/Stdev)\n\n```python\nwith STACReader(\"stac.json\") as stac:\n    print(stac.stats([\"B01\"]))\n{\n    \"B01\": {\n        \"1\": {\n            \"pc\": [\n                324,\n                5046\n            ],\n            \"min\": 133,\n            \"max\": 8582,\n            \"std\": 1230.6977195618235,\n            \"histogram\": [\n                [\n                    199042, 178438, 188457, 118369, 57544, 20622, 9275, 2885, 761, 146\n                ],\n                [\n                    133, 977.9, 1822.8, 2667.7, 3512.6, 4357.5, 5202.4, 6047.3, 6892.2, 7737.099999999999, 8582\n                ]\n            ]\n        }\n    }\n}\n```\n\n- **STACReader.metadata()**: Return info and statistics for STAC assets \n\n```python\nwith STACReader(\"stac.json\") as stac:\n    print(stac.metadata([\"B01\"], pmin=5, pmax=95))\n{\n    \"B01\": {\n        \"bounds\": [23.10607624352815, 31.50517374437416, 24.296464503939944, 32.51933487169619],\n        \"center\": [23.701270373734047, 32.012254308035175, 8],\n        \"minzoom\": 8,\n        \"maxzoom\": 11,\n        \"band_metadata\": [[1, {}]],\n        \"band_descriptions\": [[1, \"band1\"]],\n        \"dtype\": \"uint16\",\n        \"colorinterp\": [\"gray\"],\n        \"nodata_type\": \"Nodata\"\n        \"statistics\": {\n            \"1\": {\n                \"pc\": [\n                    324,\n                    5046\n                ],\n                \"min\": 133,\n                \"max\": 8582,\n                \"std\": 1230.6977195618235,\n                \"histogram\": [\n                    [\n                        199042, 178438, 188457, 118369, 57544, 20622, 9275, 2885, 761, 146\n                    ],\n                    [\n                        133, 977.9, 1822.8, 2667.7, 3512.6, 4357.5, 5202.4, 6047.3, 6892.2, 7737.099999999999, 8582\n                    ]\n                ]\n            }\n        }\n    }\n```\n\n\n## Contribution & Development\n\nIssues and pull requests are more than welcome.\n\n**dev install**\n\n```bash\n$ git clone https://github.com/developmentseed/stac-tiler.git\n$ cd stac-tiler\n$ pip install -e .[dev]\n```\n\n**Python >=3.7 only**\n\nThis repo is set to use `pre-commit` to run *isort*, *flake8*, *pydocstring*, *black* (\"uncompromising Python code formatter\") and mypy when committing new code.\n\n```\n$ pre-commit install\n\n$ git add .\n\n$ git commit -m'my change'\nisort....................................................................Passed\nblack....................................................................Passed\nFlake8...................................................................Passed\nVerifying PEP257 Compliance..............................................Passed\nmypy.....................................................................Passed\n\n$ git push origin\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/developmentseed/stac-tiler",
    "keywords": "COG STAC GIS",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stac-tiler",
    "package_url": "https://pypi.org/project/stac-tiler/",
    "platform": "",
    "project_url": "https://pypi.org/project/stac-tiler/",
    "project_urls": {
      "Homepage": "https://github.com/developmentseed/stac-tiler"
    },
    "release_url": "https://pypi.org/project/stac-tiler/0.0rc2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A rio-tiler plugin to handle STAC items",
    "version": "0.0rc2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7401728,
  "releases": {
    "0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f8397ab8cb891af903d1ae04527016b8392ab69a96676c904e8c656aaa95756",
          "md5": "848c736f9fa50421a6b8ca07d4c7f948",
          "sha256": "97661b11a16e473230f547df48059986aee7c57390dea4df8dbd6b7540cf4cd4"
        },
        "downloads": -1,
        "filename": "stac-tiler-0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "848c736f9fa50421a6b8ca07d4c7f948",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7318,
        "upload_time": "2020-06-02T18:32:52",
        "upload_time_iso_8601": "2020-06-02T18:32:52.874810Z",
        "url": "https://files.pythonhosted.org/packages/3f/83/97ab8cb891af903d1ae04527016b8392ab69a96676c904e8c656aaa95756/stac-tiler-0.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "909b9d8a090e07019d3b9f6874088150d3e5c258d7b804a121b2df36d86ed4d7",
          "md5": "50cc1406808b0ff7beb564109fbfd132",
          "sha256": "77f83e5fb645ef37b42581a030527638d20847efc2a0b13ed40f29b4bef36fd5"
        },
        "downloads": -1,
        "filename": "stac-tiler-0.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "50cc1406808b0ff7beb564109fbfd132",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7606,
        "upload_time": "2020-06-05T04:39:34",
        "upload_time_iso_8601": "2020-06-05T04:39:34.070151Z",
        "url": "https://files.pythonhosted.org/packages/90/9b/9d8a090e07019d3b9f6874088150d3e5c258d7b804a121b2df36d86ed4d7/stac-tiler-0.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "909b9d8a090e07019d3b9f6874088150d3e5c258d7b804a121b2df36d86ed4d7",
        "md5": "50cc1406808b0ff7beb564109fbfd132",
        "sha256": "77f83e5fb645ef37b42581a030527638d20847efc2a0b13ed40f29b4bef36fd5"
      },
      "downloads": -1,
      "filename": "stac-tiler-0.0rc2.tar.gz",
      "has_sig": false,
      "md5_digest": "50cc1406808b0ff7beb564109fbfd132",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 7606,
      "upload_time": "2020-06-05T04:39:34",
      "upload_time_iso_8601": "2020-06-05T04:39:34.070151Z",
      "url": "https://files.pythonhosted.org/packages/90/9b/9d8a090e07019d3b9f6874088150d3e5c258d7b804a121b2df36d86ed4d7/stac-tiler-0.0rc2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}