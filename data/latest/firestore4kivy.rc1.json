{
  "info": {
    "author": "Robert Flatt",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Firestore4Kivy\n==============\n\n*A very basic, lightweight, machine independent Firestore API*\n\n# Introduction\n\nThe package contains methods to authorize and perform CRUD operations on a Firestore database. The data saved and retrieved is a *constrained* Python dict, constrained by the datatypes and resources available on Firestore. The implementation uses REST APIs.\n\nData is saved in a 'document' in a 'collection'. Firestore security rules that enable authorized public access to a document, and authorized private access to a document are compatible.\n\nNothing in this package is Kivy specific, however the motivation for the package is mobile devices and for Python that likely means Kivy. \n\n# Example Usage\n\nAssuming a Firebase account has been created, a Firestore project has been configured, and the [Firebase all authenticated users rule](https://firebase.google.com/docs/rules/basics#all_authenticated_users) is specified.\n\n**In a real usage each access would be in its own thread.**\n\nObtain the APIKEY and PROJECT_ID of a Firebase project. \n\n```python\nfrom firestore4kivy import Authorize, Firestore\nfrom math import pi\n\nauth = Authorize(APIKEY)\nsuccess, response = auth.sign_in_with_email('email', 'password')\n\nif success:\n    db = Firestore(PROJECT_ID)\n    db.enable_database(response)\n    \n    data = {'name' : 'Random Hacker', 'favorite number' : pi }\n    success, result, update_time = db.create('collection', 'document', data)\n    if success:\n       success, result, update_time = db.read('collection', 'document')\n       if success:\n           field_to_update = {'favorite number' : 0 }\n           success, result, update_time = db.update('collection', 'document', field_to_update)\n           print(result) #{'name' : 'Random Hacker', 'favorite number' : 0 }\n```\n\nSee also the [example](https://github.com/Android-for-Python/cloud_storage_examples/tree/main/rest_firestore_example).\n\n\n# Install\n\n### Desktop\n```\npip3 install firestore4kivy\n```\n\n### Buildozer\n\n```\nrequirements = python3, kivy, firestore4kivy, requests, urllib3, charset-normalizer, idna, certifi\n\nandroid.permissions = INTERNET\n```\n\n### kivy-ios\n\n```\ntoolchain pip install firestore4kivy\n```\n\n# Firestore\n\n## Checklist\n\nThis checklist is not a substitute for reading the Firebase documentation. See the [Firebase quick start](https://firebase.google.com/docs/firestore/quickstart), and [Firebase documentation](https://firebase.google.com/docs).\n\n - Create a Firebase account and project.\n   - This generates the Project ID you will need for client apps.\n\n - Create API Key\n   - `Build->Authentication->Get started->sign-in method->Email/Password->Enable->Save`\n\n - Firestore Database->Create Database\n   - Select security rules.\n   - Edit and publish new security rules.\n   - Select a geographic location for the server.\n   - Allow a few minutes for changes to propagate.\n\n## Security Rules\n\nSuccessful implementation requires that the [security rules](https://firebase.google.com/docs/rules/basics) are correctly implemented. **The default rules deny access and must be changed.** For development only, you can use the [all authenticated users rule](https://firebase.google.com/docs/rules/basics#all_authenticated_users). As the name suggests this requires that the user is signed in.\n\nPrivate documents will require the [content-owner only access rule.](https://firebase.google.com/docs/rules/basics#content-owner_only_access).\n\nIn practice the rules may be some hybrid, see the [rules for the example](https://github.com/Android-for-Python/cloud_storage_examples/tree/main/rest_firestore_example#specify-the-firestore-database-rules).\n\n## Constraints\n\nThis section is not a substitute for reading [Firestore usage and limits](https://firebase.google.com/docs/firestore/quotas).\n\nSome highlights:\n\n- The data dict values **may** contain `None` or values with Python data types: `bool, int, float, str, bytes`. The dict may also contain three classes provided to access data types available in Firestore but not in Python, there are `GeoPoint, TimeStamp, Reference`.\n\n- The data dict **may not** contain values with Python data types: `bytearray, memoryview, tuple, complex, range, frozenset, set`, or any class other than the three that enable Firestore data types.\n\n- A dict key is always cast to a string. There is potential for a conflict if you use integers and strings as dict keys.\n\n- A list may not contain a list as an element.\n\n- A document may have a maximum of slightly less than 20k indices (sum of all keys and all list lengths).\n\n- A document may have a maximum size of slightly less than 1MB.\n\nIf you are uncertain about violating Firestore constraints, as a test you can manually create your data structure in the Firebase console.\n\n# API\n\n**The methods must be called from a thread. If this is not done the Kivy UI will freeze for an undetermined time.** A general example of using threads is [documented](https://github.com/Android-for-Python/Android-for-Python-Users#threads).\n\nThe package contains an Authorize class, a Firestore class, and three classes to access custom Firestore data types.\n\n## Authorize\n\nAll methods return a tuple of two values, success and response. If success is True, response is a dict. If success is False, response is an error message string.\n\nA user initially signs in and the app saves a refresh token. On restart, resume, or after a timeout the app re-signs in using the token. Firestore will time out 3600 seconds after the last sign in. A sign in response contains the refresh token (save it), and data to enable Firestore (re-enable with each new response).\n\n### Authorize Basic Usage\n\n```python\nfrom firestore4kivy import Authorize\n\n# Instantiate with an APIKEY\n\nauth = Authorize(APIKEY)\n\n# sign in\n\nsuccess, response = auth.sign_in_with_email('user', 'password')\n```\n\n### Authorize API\n\n```python\n    def create_user_with_email(self, email, password):\n        return success, response\n         \n    def sign_in_with_email(self, email, password):\n        return success, response\n\n    def sign_in_with_token(self, refresh_token):\n        return success, response\n\n    def delete_user(self, response):\n        return success, response\n```\n\n## Firestore\n\nAll methods except enable_database return a tuple of three values, success, response, and update time. If success is True, response is a dict. If success is False, response is an error message string.\n\n### Firestore Basic Usage\n\n```python\nfrom firestore4kivy import Firestore\n\n# Instantiate with an PROJECT_ID\n\ndb = Firestore(PROJECT_ID)\n\n# Enable the database with the response from sign in\ndb.enable_database(response)\n\n# Create Document\n\ndata = {'name' : 'Joe', 'age' : 99}\nsuccess, response, update_time = db.create('collection', 'document', data)\n```\n\n### Firestore API\n\n#### Enable_database\n\nThe auth argument is the response from Authorize api calls.\n\n```python\n    def enable_database(self, auth):\n```\n\n#### Create, Read, Delete\n\nThe `collection` and `document` arguments are strings. The `data` argument is a dict.\n\n```python\n    def create(self, collection, document, data):\n        return success, response, update_time\n\n    def read(self, collection, document):\n        return success, response, update_time\n\n    def delete(self, collection, document):\n        return success, response, update_time\n```\n\nTo create a private document the collection or document is set to `None`, the UserId will be substituted. This enables use of the Firestore the private document rule.\n\n#### Update\n\nThe `collection` and `document` arguments are strings. The `replace`, `delete`, and callback method arguments are dicts. Examples below.\n\n```python\n    def update(self, collection, document, replace = {}, delete ={}, callback=None):\n        return success, response, update_time\n```\n\nThe `update()` method specifies changes to a created dict. It has three arguments used to update the document contents: replace, delete, and callback. One or all may be specified, they are applied in the above order.\n\nUpdate is a secure read-modify-write operation. It ensures that another user will not corrupt the operation, the cost will be increased latency with heavily used shared documents. Single updates take fractions of a second, an update taking several seconds is a sign there are an excessive number of concurrent users and a failed update is possible. Do not implement `update()` on a shared document if you expect heavy concurrent usage.\n\nIn a Python dict, a list is atomic. To access list elements we use a list of tuples `[(index, new_value), (index, new_value),.... ] `, and specify the semantics as accessing list elements in a dict. Out of range indices are ignored.\n\nModification dicts are hierarchical. Check that root and intermediate dict keys are only specified once, otherwise one key will overwrite the other.\n\n - replace: a dict of key value pairs to replace. Pairs that do not exist in the original document are created. An empty dict specifies no modification. Special case: a tuple representing a list index equal to list length implements append(). An example replace dict (taken from the example where you can find the dict to be modified):\n\n```python\n                                                     # Equivalent statements\n        replace_these = {'b' : False,                # ['b'] = False\n                         'd' : {'c' : -43 ,          # ['d']['c'] = -43\n                                'e' : [-10,-20,-30]},# ['d']['e'] =[-10,-20,-30]\n                         'new' : True,               # ['new'] = True\n                         'a' : [(1,'negative'),      # ['a'][1] = 'negative'\n                                (4,'new')],}         # ['a'].append('new')\n        # Note that for example ['d']['c'] and ['d']['e'] are hierarchical in the dict.\n```\n \n - delete: a dict of keys to remove, the values should be empty except when specifying hierarchy. Keys that do not exist are ignored. An empty dict removes no keys. A delete of multiple list elements in the same list does not depend on lexical order (unlike the equivalent statements). An example delete dict:\n\n```python\n                                                     # Equivalent statements\n        delete_these =  {'f':'',                     # pop('f')\n                         'd': {'d' : {'aa': ''}},    # ['d']['d'].pop('aa')\n                         'a': [(0,''),               # d['a'].pop(0)\n                               (3, {'yes': ''})] }   # d['a'][2].pop('yes')\n```\n\n - callback: a user supplied method that has the dict of modified data as an argument. It can be used to implment a state machine, or for debugging use a print statement to see the modified dict. An example of a state machine:\n\n```python\n    def counter(self, data):\n        if 'counter' in data:\n            data['counter'] += 1\n        else:\n            data['counter'] = 0\n\n```\n\nImplement as:\n\n```python\n    success, response, update_time =\\\n        db.update('secrets', None, replace_these, delete_these, self.couner)\n```\n\n## GeoPoint, TimeStamp, and Reference\n\nThe package provides three classes to access data types that exist in Firestore but not in Python.\n\nAll are written with initialize parameters, and read by a get() method. \n\n```python\nfrom firestore4kivy import GeoPoint, Timestamp, Reference\n\n# Latitude and longitude take there usual range\n\nGeoPoint(latitude, longitude).get() == { 'latitude' : latitude, 'longitude' :longitude}\n\n# TimeStamp is a Firestore compatible ISO 8601 string\n\nTimeStamp('2000-01-01T00:00:00Z').get() == '2000-01-01T00:00:00Z'\n\n# Reference to a Firestore document that must exist\n\nReference('projects/{project}/databases/(default)/documents/{collection}/{document}).get() == 'projects/{project}/databases/(default)/documents/{collection}/{document}\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Android-for-Python/firestore4kivy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "firestore4kivy",
    "package_url": "https://pypi.org/project/firestore4kivy/",
    "platform": null,
    "project_url": "https://pypi.org/project/firestore4kivy/",
    "project_urls": {
      "Homepage": "https://github.com/Android-for-Python/firestore4kivy"
    },
    "release_url": "https://pypi.org/project/firestore4kivy/0.0.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "A basic REST Firestore api.",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14856997,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d257579e99ae9bc91a253bb53e44c024fe35d487073ed7417937b363f655b630",
          "md5": "ca836f12b56d66d4281c93aa9f4a340c",
          "sha256": "1866de7db9cf80f164c0a189925a746f5c47db7f7aca2236eb8f31ec7b66bc64"
        },
        "downloads": -1,
        "filename": "firestore4kivy-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca836f12b56d66d4281c93aa9f4a340c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11242,
        "upload_time": "2022-08-24T00:43:10",
        "upload_time_iso_8601": "2022-08-24T00:43:10.072240Z",
        "url": "https://files.pythonhosted.org/packages/d2/57/579e99ae9bc91a253bb53e44c024fe35d487073ed7417937b363f655b630/firestore4kivy-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fe73835a2c013a6ecd4e343517fa1bf834add29de9f7d41aa2e72f6ab6796ec",
          "md5": "0f91c30f2109f2941ab5bcfd507bf753",
          "sha256": "faf4bbc4a82ffd92e0cbf7bec3683d1954ee369a44f48d7d2e680bddc5f4df34"
        },
        "downloads": -1,
        "filename": "firestore4kivy-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f91c30f2109f2941ab5bcfd507bf753",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14659,
        "upload_time": "2022-08-24T00:43:12",
        "upload_time_iso_8601": "2022-08-24T00:43:12.042093Z",
        "url": "https://files.pythonhosted.org/packages/7f/e7/3835a2c013a6ecd4e343517fa1bf834add29de9f7d41aa2e72f6ab6796ec/firestore4kivy-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d257579e99ae9bc91a253bb53e44c024fe35d487073ed7417937b363f655b630",
        "md5": "ca836f12b56d66d4281c93aa9f4a340c",
        "sha256": "1866de7db9cf80f164c0a189925a746f5c47db7f7aca2236eb8f31ec7b66bc64"
      },
      "downloads": -1,
      "filename": "firestore4kivy-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca836f12b56d66d4281c93aa9f4a340c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11242,
      "upload_time": "2022-08-24T00:43:10",
      "upload_time_iso_8601": "2022-08-24T00:43:10.072240Z",
      "url": "https://files.pythonhosted.org/packages/d2/57/579e99ae9bc91a253bb53e44c024fe35d487073ed7417937b363f655b630/firestore4kivy-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fe73835a2c013a6ecd4e343517fa1bf834add29de9f7d41aa2e72f6ab6796ec",
        "md5": "0f91c30f2109f2941ab5bcfd507bf753",
        "sha256": "faf4bbc4a82ffd92e0cbf7bec3683d1954ee369a44f48d7d2e680bddc5f4df34"
      },
      "downloads": -1,
      "filename": "firestore4kivy-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0f91c30f2109f2941ab5bcfd507bf753",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14659,
      "upload_time": "2022-08-24T00:43:12",
      "upload_time_iso_8601": "2022-08-24T00:43:12.042093Z",
      "url": "https://files.pythonhosted.org/packages/7f/e7/3835a2c013a6ecd4e343517fa1bf834add29de9f7d41aa2e72f6ab6796ec/firestore4kivy-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}