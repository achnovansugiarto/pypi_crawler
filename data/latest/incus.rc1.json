{
  "info": {
    "author": "",
    "author_email": "Ali Hakim Taskiran <alihakimxyz@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Incus\n## Acoustic FDTD Simulator\nAcoustic Simulator for Python\n\n<img src=\"media/logo.png\" width=\"200\">\n\n\n    pip install incus\n    \n### ![Sound in Helium Baloon](https://github.com/alihakimtaskiran/Incus/blob/main/examples/1-Helium%20Balloon.py)\n<img src=\"https://github.com/alihakimtaskiran/Incus/raw/main/media/1.png\" width=\"400\"> <img src=\"https://github.com/alihakimtaskiran/Incus/raw/main/media/2.png\" width=\"400\">\n    \n### Tree   \n<pre>\n|----Continuum(object)----|\n|                         |---__init__(grid_size,ds)\n|                         |---add(arg)\n|                         |---export_grid()\n|                         |---build(verbose=1)\n|                         |---impose_grid(c,rho)\n|                         |---view_structure(field=\"c\",*args,colorbar=True)\n|                         |---view_field(field=\"P\",*args,colorbar=True)\n|                         |---Render(time_steps,backend=\"numpy\",observers=None)\n|\n|\n|\n|----DotSource(object)----|\n|                         |---__init__(location,presence,amplitude,frequency,phase=0)\n|                         |---__repr__()\n|                         |---set_dt(dt)\n|                         |---inf()\n|                         |---dimensionality()\n|                         |---location()\n|                         |---__call__(t)\n|\n|\n|\n|---geo(module)-----------|----PointCloud(object)-------|\n                          |                             |---__init__(points,layer=0,c=331.29,rho=1.225,time=None)\n                          |\n                          |\n                          |----Rectangle(PointCloud)----|\n                          |                             |---__init__(A,B,layer=0,c=331.29,rho=1.225,time=None)\n                          |\n                          |\n                          |----RectPrism(PointCloud)----|\n                          |                             |---__init__(A,B,layer=0,c=331.29,rho=1.225,time=None)\n                          |\n                          |\n                          |----Circle(object)-----------|\n                          |\n                          |\n                          |----Sphere(object)-----------|\n                          |                             |---__init__(A,r,layer=0,c=331.29,rho=1.225,time=None)\n                          |\n                          |\n                          |----Cylinder(object)---------|\n                                                        |---__init__(A,r,h,layer=0,c=331.29,rho=1.225,time=None)\n\n</pre>\n\n  # Documentation\n  <hr/>\n  \n  ## Continuum(dim,grid_size,ds)\n   Creates a fluid field with given dimensions and grid size. Grid spacing is introduced with ds.\n   - **grid_size** : Defines grid cell count per axis. It may take a tuple or list. It's 2D or 3D.\n   - **ds** : Length of a edge of a grid cell. It may take a float or integer. **All units are SI**.\n\n### add(arg)\n  Adds either new geometries, celestial objects and sources into the Continuum.\n  - **arg** : It adds new objects into the grid. It can take either defined object or list/tuple of them(recursively). It can take tuple, list, set, everything in **geo**(**geo.\\***) and **DotSource**. As long as dimensionality of object and Continuum is the same, it is added.\n### build(verbose=1)\n   Builds the structure. \n   - **verbose**: Determines whether info is displayed. If 0, nothing displayed. If 1, render time is displayed.\n### export_field()\n  Get Pressure and Velocity Field arrays. It returns a tuple (P, v).\n### export_grid()\n  Get speed of sound and denisty arrays. It returns a tuple (c, rho).\n### impose_grid(c,rho,anisotropy=(False,False))\n  Embed the the grid - generated by other sources -. It is useful for fetching material structure from any optimization algorithm and examining it's acoustic properties with **incus**.\n  - **c**: Speed of sound of each point of the grid. Shape of the array is (Nx, Ny,...). The unit is **m/s**\n  - **rho**: Density of each point of the grid. Shape of the array is (Nx, Ny,...). The unit is **kg/m^3\n### view_structure(field=\"c\",\\*args,colorbar=True)\n  You can view the grid structure\n  - **field** : It takes \"c\" for speed of sound array, \"rho\" for density array and \"Z\" for impedance of the grid.\n  - **\\*args** : Only used in 3D. It used specify axis of view. Plane and and index number can be inserted. For example \"z\", 10 corresponds z=10 plane in the 3D array. \"x\",\"y\",\"z\" can be inserted. Also \"yz\", \"xz\", \"xy\" are synonym respectively.\n  - **colorbar**: If is is set to **True**, colorbar is displayed.\n### view_field(field=\"P\",*args,colorbar=True)\n  You can get graph of Pressure or Velocity Field.\n  - **field** : It takes \"P\" for pressure field, \"v\" or velocity field.\n  - **\\*args** : Only used in 3D. It used specify axis of view. Plane and and index number can be inserted. For example \"z\", 10 corresponds z=10 plane in the 3D array. \"x\",\"y\",\"z\" can be inserted. Also \"yz\", \"xz\", \"xy\" are synonym respectively.\n  - **colorbar**: If is is set to **True**, colorbar is displayed.\n### Render(time_steps,backend=\"numpy\",observers=None)\n   Executes FDTD calculations on a Continuum object.\n   - **time_steps** : It is number of time steps that field will evolve. It may take an integer. Lenght of time steps is given by ds/c/(<span>&#8730;</span>dim) ; where ds is grid spacing, c is max speed of sound in the grid(331.29 default) and dim is number of dimensions of the grid. All units are SI.\n   - **backend** : It sets the backend. Only **numpy** is supported recently. Therefore it is always **numpy**\n   - **observers** : Determines whether time dependent logging will be the case. If it is set to <code>None</code>, time dependent observation is not the case. However, it is a tuple or list of points e.g <code>[ (0,0), (2,2) ]</code> then it returns Pressure-field amplitude of each given point. Returned array's order is the same as implicit order of the fed list/tuple.\n<hr/> \n\n\n  ## DotSource(location,presence,amplitude,frequency,phase=0)\n   Creates a point source on a given place on grid, through given time interval with given amplitude, frequency and phase.\n   - **location** : It is location of dot source. It may take a list or tuple. \n   - **presence** : It is a tuple or list in the form of:( start, stop ). It defines in which time step dot source emits electromagnetic wave.\n   - **amplitude** : Amplitude of the wave. It may take int or float.\n   - **frequency** : Frequency of the wave. It may take int or float.\n   - **phase** : Phase of the wave. It may take int or float. It is default 0.\n \n  ## geo.PointCloud(points,layer=0,c=331.29,rho=1.225,time=None)\n  Creates a point cloud object in 2D or 3D. It infills inside the points. It is compatible with convex hull. Draw miscallenious objects(i.e. hexagon,star, hearth) with it. \n  - **points** : Points that defines convex full. It is a list, tuple or array of 2D or 3D points. Coordinates indicates # of cell in the grid. Like [(1,2), (2,3), (3,4)]. I needs at least 3 points in 2D, 4 points in 3D. \n  - **layer** : Priority of the object. It is an integer. The less **layer** value, the more prior the object. It is useful where you want to design object are overlapping like open access cavity dielectric waveguides.\n  - **c** : Speed of sound of the object(**m/s**). It may take float ot int. It is not restricted to be less than 1 intentionally, for researching Cherenkov Radiation, metamaterials etc.\n  - **rho** : Density of the object(**kg/m^3**). It may take float ot int. It is not restricted to be less than 1 intentionally.\n  - **time** : It determines in which time the object is seen and dissappear. If the object is eternal, <code>time=None</code>; otherwise <code>time=(start, stop)</code>, it is a list/tuple of start and stop durations\n  \n  \n  ## geo.Rectangle(A, B, layer, c=331.29, rho=1.225, time=None)\n  Creates a rectangle in 2D.\n  - **A**: One of non-connected vertex of the Rectangle. It may take an integer. All units are # of grid cells.\n  - **B**: One of non-connected vertex of the Rectangle. It may take an integer. All units are # of grid cells.\n  - **layer** : Priority of the object. It is an integer and maximum can take 1000. The less **layer** value, the more prior the object. It is useful where you want to design object are overlapping like open access cavity dielectric waveguides.\n  - **c** : Speed of sound of the object(**m/s**). It may take float ot int. It is not restricted to be less than 1 intentionally, for researching Cherenkov Radiation, metamaterials etc.\n  - **rho** : Density of the object(**kg/m^3**). It may take float ot int. It is not restricted to be less than 1 intentionally.\n  - **time** : It determines in which time the object is seen and dissappear. If the object is eternal, <code>time=None</code>; otherwise <code>time=(start, stop)</code>, it is a list/tuple of start and stop durations\n  \n  ## geo.Circle(A,r,layer,c=331.29, rho=1.225, time=None)\n  Creates a circle in 2D.\n  - **A** : Coordinates of center of the Circle. It may take a tuple or list. All units are # of grid cells.\n  - **r** : Radius of the circle. It may take an integer. All units are # of grid cells.\n  - **layer** : Priority of the object. It is an integer and maximum can take 1000. The less **layer** value, the more prior the object. It is useful where you want to design object are overlapping like open access cavity dielectric waveguides.\n   - **c** : Speed of sound of the object(**m/s**). It may take float ot int. It is not restricted to be less than 1 intentionally, for researching Cherenkov Radiation, metamaterials etc.\n  - **rho** : Density of the object(**kg/m^3**). It may take float ot int. It is not restricted to be less than 1 intentionally.\n  - **time** : It determines in which time the object is seen and dissappear. If the object is eternal, <code>time=None</code>; otherwise <code>time=(start, stop)</code>, it is a list/tuple of start and stop durations\n\n  ## geo.RectPrism(A, B, layer, c=331.29, rho=1.225, time=None)\n Creates a rectangular prism in 3D.\n  - **A**: One of non-connected vertex of the RectPrism. It may take an integer. All units are # of grid cells.\n  - **B**: One of non-connected vertex of the RectPrism. It may take an integer. All units are # of grid cells.\n  - **layer** : Priority of the object. It is an integer and maximum can take 1000. The less **layer** value, the more prior the object. It is useful where you want to design object are overlapping like open access cavity dielectric waveguides.\n  - **c** : Speed of sound of the object(**m/s**). It may take float ot int. It is not restricted to be less than 1 intentionally, for researching Cherenkov Radiation, metamaterials etc.\n  - **rho** : Density of the object(**kg/m^3**). It may take float ot int. It is not restricted to be less than 1 intentionally.\n  - **time** : It determines in which time the object is seen and dissappear. If the object is eternal, <code>time=None</code>; otherwise <code>time=(start, stop)</code>, it is a list/tuple of start and stop durations\n  \n  ## geo.Sphere(C,r,layer=0,c=331.29, rho=1.225, time=None)\n  Creates a sphere in 3D.\n  - **C** : Coordinates of center of the Sphere. It may take a tuple or list. All units are # of grid cells.\n  - **r** : Radius of the sphere. It may take an integer. All units are # of grid cells.\n  - **layer** : Priority of the object. It is an integer and maximum can take 1000. The less **layer** value, the more prior the object. It is useful where you want to design object are overlapping like open access cavity dielectric waveguides.\n  - **c** : Speed of sound of the object(**m/s**). It may take float ot int. It is not restricted to be less than 1 intentionally, for researching Cherenkov Radiation, metamaterials etc.\n  - **rho** : Density of the object(**kg/m^3**). It may take float ot int. It is not restricted to be less than 1 intentionally.\n  - **time** : It determines in which time the object is seen and dissappear. If the object is eternal, <code>time=None</code>; otherwise <code>time=(start, stop)</code>, it is a list/tuple of start and stop durations\n  \n  ## geo.Cylinder(C,r,h,layer=0,c=331.29, rho=1.225, time=None)\n Creates a cylinder in 3D. Its planes are **parallel to xy-plane**\n  - **C** : Coordinates of center of the Cylinder. It may take a tuple or list. All units are # of grid cells. Height signifies elongation though z axis.\n  - **r** : Radius of the Cylinder. It may take an integer. All units are # of grid cells.\n  - **h** : Height of the Cylinder. It may take an integer. All units are # of grid cells.\n  - **layer** : Priority of the object. It is an integer and maximum can take 1000. The less **layer** value, the more prior the object. It is useful where you want to design object are overlapping like open access cavity dielectric waveguides.\n  - **c** : Speed of sound of the object(**m/s**). It may take float ot int. It is not restricted to be less than 1 intentionally, for researching Cherenkov Radiation, metamaterials etc.\n  - **rho** : Density of the object(**kg/m^3**). It may take float ot int. It is not restricted to be less than 1 intentionally.\n  - **time** : It determines in which time the object is seen and dissappear. If the object is eternal, <code>time=None</code>; otherwise <code>time=(start, stop)</code>, it is a list/tuple of start and stop durations.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "GNU GENERAL PUBLIC LICENSE ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "incus",
    "package_url": "https://pypi.org/project/incus/",
    "platform": null,
    "project_url": "https://pypi.org/project/incus/",
    "project_urls": {
      "Bug Tracker": "https://github.com/alihakimtaskiran/Incus/issues",
      "Homepage": "https://github.com/alihakimtaskiran/Incus"
    },
    "release_url": "https://pypi.org/project/incus/0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Acoustic FDTD Simulator",
    "version": "0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16870981,
  "releases": {
    "0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "409b80b530fbedf4b3febfeb65bddf5e0f6b3b152f8191429ff0d1742f38fe34",
          "md5": "f1a71b1eec5680dc0024f9d9afb3268c",
          "sha256": "3bab3bf071c1f4a81889cc2cf4cd98c4fcc193b8ce3d88175aae8c40e2040927"
        },
        "downloads": -1,
        "filename": "incus-0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1a71b1eec5680dc0024f9d9afb3268c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11599,
        "upload_time": "2023-02-15T12:56:35",
        "upload_time_iso_8601": "2023-02-15T12:56:35.685144Z",
        "url": "https://files.pythonhosted.org/packages/40/9b/80b530fbedf4b3febfeb65bddf5e0f6b3b152f8191429ff0d1742f38fe34/incus-0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75b695e031a790fe27c76d6d067e07427ecc363bbc56caafbb4607b413d96e63",
          "md5": "9cf936ad86f201d8431299a0cf9d1e35",
          "sha256": "da7ce70d3ce5d98a3811ea4f231d30ca709090f3d9815c0a093194bdfeec8cc0"
        },
        "downloads": -1,
        "filename": "incus-0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9cf936ad86f201d8431299a0cf9d1e35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14051,
        "upload_time": "2023-02-15T12:56:37",
        "upload_time_iso_8601": "2023-02-15T12:56:37.372819Z",
        "url": "https://files.pythonhosted.org/packages/75/b6/95e031a790fe27c76d6d067e07427ecc363bbc56caafbb4607b413d96e63/incus-0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "409b80b530fbedf4b3febfeb65bddf5e0f6b3b152f8191429ff0d1742f38fe34",
        "md5": "f1a71b1eec5680dc0024f9d9afb3268c",
        "sha256": "3bab3bf071c1f4a81889cc2cf4cd98c4fcc193b8ce3d88175aae8c40e2040927"
      },
      "downloads": -1,
      "filename": "incus-0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1a71b1eec5680dc0024f9d9afb3268c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11599,
      "upload_time": "2023-02-15T12:56:35",
      "upload_time_iso_8601": "2023-02-15T12:56:35.685144Z",
      "url": "https://files.pythonhosted.org/packages/40/9b/80b530fbedf4b3febfeb65bddf5e0f6b3b152f8191429ff0d1742f38fe34/incus-0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75b695e031a790fe27c76d6d067e07427ecc363bbc56caafbb4607b413d96e63",
        "md5": "9cf936ad86f201d8431299a0cf9d1e35",
        "sha256": "da7ce70d3ce5d98a3811ea4f231d30ca709090f3d9815c0a093194bdfeec8cc0"
      },
      "downloads": -1,
      "filename": "incus-0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9cf936ad86f201d8431299a0cf9d1e35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14051,
      "upload_time": "2023-02-15T12:56:37",
      "upload_time_iso_8601": "2023-02-15T12:56:37.372819Z",
      "url": "https://files.pythonhosted.org/packages/75/b6/95e031a790fe27c76d6d067e07427ecc363bbc56caafbb4607b413d96e63/incus-0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}