{
  "info": {
    "author": "Patrick Walukagga",
    "author_email": "pwalukagga@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# ZengaPay API Python Client\n### Power your apps with our ZengaPay API\n\nThis is the ZENGAPAY Python Client Library\n\n# Usage\n## Installation\nAdd the latest version of the library to your project by using pip:\n\n```\n$ pip install zengapay\n```\n\nThis library supports Python 3.6+\n\n# Sandbox and Production Environment\n## Creating a sandbox environment user environment\nBefore using the library in your applications, please head over to the [API Documentation](https://developers.zengapay.com/#getting-started) to see how to set up your sandbox environment.\n\nThe following is the API Endpoint for our sandbox environment:\n\n```\nhttps://api.sandbox.zengapay.com/v1\n```\n\nHere is the API Endpoint for our production environment:\n\n```\nhttps://api.zengapay.com/v1\n```\n\n## Configuration\nBefore we can fully utilize the library, we need to specify the global configurations. The global configuration must contain the following.\n\n- `ZENGAPAY_APP_SETTINGS`: Optional environment, either \"sandbox\" or \"production\". Default is \"sandbox\".\n- `ZENGAPAY_BASE_URL`: An optional base url to ZengaPay API. By default the sandbox base url will be used.\n- `ZENGAPAY_USER_API_TOKEN`: Your secret user API token. This is mandatory. See he [API Documentation](https://developers.zengapay.com/#getting-started) to obtain your API token.\n\nOnce you have specified the global config variables, the full configuration object to use in your project should look like this.\n\n```python\nconfig = {\n    ZENGAPAY_ENVIRONMENT: os.environ.get(\"ZENGAPAY_APP_SETTINGS\", \"sandbox\"),\n    ZENGAPAY_BASE_URL: os.environ.get(\"ZENGAPAY_BASE_URL\", \"https://api.sandbox.zengapay.com/v1\"),\n    ZENGAPAY_USER_API_TOKEN: os.environ.get(\"ZENGAPAY_USER_API_TOKEN\")\n}\n```\n\nThis will be need for each transaction you will be performing.\n\n## Collections.\nThe collections client can be created with configuration parameters as indicated above.\n\n```python\nimport os\nfrom zengapay import Collections\n\n\nconfig = {\n    ZENGAPAY_ENVIRONMENT: os.environ.get(\"ZENGAPAY_APP_SETTINGS\", \"sandbox\"),\n    ZENGAPAY_BASE_URL: os.environ.get(\"ZENGAPAY_BASE_URL\", \"https://api.sandbox.zengapay.com/v1\"),\n    ZENGAPAY_USER_API_TOKEN: os.environ.get(\"ZENGAPAY_USER_API_TOKEN\")\n}\n\nclient = Collections(config)\n```\n\n### Methods\n1. **collect**: This operation is used to request a payment from another consumer(Payer). The payer will be asked to authorize the payment. The transaction is executed once the payer has authorized the payment. The transaction will be in status PENDING until it is authorized or declined by the payer or it is timed out by the system. Status of the transaction can be validated by using `get_collection(transaction_ref)` or `get_transaction_status(transaction_ref)` using the `transaction reference`.\n\nYou can perform a collection using the payload as below. See he [API Documentation](https://developers.zengapay.com/#collections) to get what the parameters mean.\n\n```python\npayload = {\n    \"msisdn\": \"256703######\",  # The phone number that the collection request is intended for.\n    \"amount\": 20000,  #The collection request amount.\n    \"external_reference\": \"157899393020236\",  # Internal description or reason for this collection request and must be unique for every request. \n    \"narration\":\"Clearing Invoice - #157899393020236\"  # Textual narrative describing the transaction. \n}\n\ncollection = client.collect(payload)\n```\n\n2. **get_collections**: Retrieve the collection transactions for a given account.\n\n```python\ncollections = client.get_collections()\n```\n\n3. **get_collection**: Retrieve a certain collection transaction using the `transaction reference`\n\n```python\ncollection = client.get_collection(transaction_ref)\n```\n\n4. **get_transaction_status**: The status of the transaction, this can be one of these; `PENDING`,`SUCCEEDED`,`FAILED`,`INDETERMINATE`\n\n```python\ntrans_status = client.get_transaction_status(transaction_ref)\n```\n\n## Transfers.\nThe transfers client can be created with configuration parameters as indicated above.\n\n```python\nimport os\nfrom zengapay import Transfers\n\n\nconfig = {\n    ZENGAPAY_ENVIRONMENT: os.environ.get(\"ZENGAPAY_APP_SETTINGS\", \"sandbox\"),\n    ZENGAPAY_BASE_URL: os.environ.get(\"ZENGAPAY_BASE_URL\", \"https://api.sandbox.zengapay.com/v1\"),\n    ZENGAPAY_USER_API_TOKEN: os.environ.get(\"ZENGAPAY_USER_API_TOKEN\")\n}\n\nclient = Transfers(config)\n```\n\n### Methods\n1. **transfer**: Used to transfer an amount from the ownerâ€™s account to a payee account. Status of the transaction can be validated by using `get_transfer(transaction_ref)` or `get_transaction_status(transaction_ref)` using the `transaction reference`.\n\nYou can perform a transfer using the payload as below. See he [API Documentation](https://developers.zengapay.com/#transfers) to get what the parameters mean.\n\n```python\npayload = {\n    \"msisdn\": \"256703######\",  # The phone number that the transfer request is intended for.\n    \"amount\": 20000,  #The transfer request amount.\n    \"external_reference\": \"157899393020236\",  # Internal description or reason for this transfer request and must be unique for every request. \n    \"narration\":\"Clearing Invoice - #157899393020236\"  # Textual narrative describing the transaction. \n}\n\ntransfer = client.transfer(payload)\n```\n\n2. **get_transfers**: Retrieve the transfer transactions for a given account.\n\n```python\ntransfers = client.get_transfers()\n```\n\n3. **get_transfer**: Retrieve a certain tranfer transaction using the `transaction reference`\n\n```python\ntransfer = client.get_transfer(transaction_ref)\n```\n\n4. **get_transaction_status**: The status of the transaction, this can be one of these; `PENDING`,`SUCCEEDED`,`FAILED`,`INDETERMINATE`\n\n```python\ntrans_status = client.get_transaction_status(transaction_ref)\n```\n\n## Account\nThe account client can be created with configuration parameters as indicated above.\n\n```python\nimport os\nfrom zengapay import Accounts\n\n\nconfig = {\n    ZENGAPAY_ENVIRONMENT: os.environ.get(\"ZENGAPAY_APP_SETTINGS\", \"sandbox\"),\n    ZENGAPAY_BASE_URL: os.environ.get(\"ZENGAPAY_BASE_URL\", \"https://api.sandbox.zengapay.com/v1\"),\n    ZENGAPAY_USER_API_TOKEN: os.environ.get(\"ZENGAPAY_USER_API_TOKEN\")\n}\n\nclient = Accounts(config)\n```\n\nSee the [API Documentation](https://developers.zengapay.com/#account).\n\n### Methods\n1. **get_balance**: This API allows you to get the current merchant account balance.\n\n```python\nbalance = client.get_balance()\n```\n\n2. **get_account_statement**: To retrieve a list of all transactions on your account (account statement). This will return a list of transactions. See [API Documentation](https://developers.zengapay.com/#account-statement) to see how to make filters.\n\n```python\nstatement = client.get_account_statement()\n```\n\nPerforming a limit and status filters. See link above for more filters\n\n```python\nstatement = client.get_account_statement(limit=2, status='FAILED')\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zengapay/zengapay-python",
    "keywords": "ZengaPay,ZengaPay API,ZengaPay Python Wrapper,ZengaPay Python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zengapay",
    "package_url": "https://pypi.org/project/zengapay/",
    "platform": "",
    "project_url": "https://pypi.org/project/zengapay/",
    "project_urls": {
      "Homepage": "https://github.com/zengapay/zengapay-python"
    },
    "release_url": "https://pypi.org/project/zengapay/0.2.0/",
    "requires_dist": [
      "requests",
      "phonenumbers"
    ],
    "requires_python": ">=3.7.0",
    "summary": "Python Wrapper for the ZengaPay API",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7666161,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "657eb925feab132cf3f1654090f4e1da1c7954ee28bfb3c10cfa52c57d0a4122",
          "md5": "7780328ff14f05987c97ac0f73376f9a",
          "sha256": "d7da3e473a0f02a9c718915e0e2242032c540a2b5cb525b3515d8d0d26988fbd"
        },
        "downloads": -1,
        "filename": "zengapay-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7780328ff14f05987c97ac0f73376f9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 8144,
        "upload_time": "2020-07-09T14:37:48",
        "upload_time_iso_8601": "2020-07-09T14:37:48.594391Z",
        "url": "https://files.pythonhosted.org/packages/65/7e/b925feab132cf3f1654090f4e1da1c7954ee28bfb3c10cfa52c57d0a4122/zengapay-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cef6ebfa6ff695fdf03737d5213caa872e4299f6621bef26e03572de95b58a4",
          "md5": "1d4952be52d9e58c961ac5071ae4abfa",
          "sha256": "3bac1302dca90cb512472e1082fc578e1680be3e09fecd3f1e70ab133c593b6c"
        },
        "downloads": -1,
        "filename": "zengapay-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d4952be52d9e58c961ac5071ae4abfa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 7204,
        "upload_time": "2020-07-09T14:37:51",
        "upload_time_iso_8601": "2020-07-09T14:37:51.160615Z",
        "url": "https://files.pythonhosted.org/packages/7c/ef/6ebfa6ff695fdf03737d5213caa872e4299f6621bef26e03572de95b58a4/zengapay-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf90d25b66c0b2f7f6685c4686755fed383b5224b7cb7c6fc31c639c70d6e9ac",
          "md5": "fa594637ca72530cf9d6c391b8da61a5",
          "sha256": "27646fc3a04375dae68196e823bad6f929941549b037b02fbd3eb0f2f74232ac"
        },
        "downloads": -1,
        "filename": "zengapay-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa594637ca72530cf9d6c391b8da61a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 8162,
        "upload_time": "2020-07-09T14:41:34",
        "upload_time_iso_8601": "2020-07-09T14:41:34.593579Z",
        "url": "https://files.pythonhosted.org/packages/bf/90/d25b66c0b2f7f6685c4686755fed383b5224b7cb7c6fc31c639c70d6e9ac/zengapay-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dfdb1fa7c2562ce4b0d8cedab1a4d1dfcd8a77efe655c1cc577dffca55d36b0",
          "md5": "7b02b0231b34de204b07a6deda3167e9",
          "sha256": "870c7cf5628592d1acee21b67599b1f44953b774aae470c14f426fe00ea87d84"
        },
        "downloads": -1,
        "filename": "zengapay-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7b02b0231b34de204b07a6deda3167e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 7228,
        "upload_time": "2020-07-09T14:41:36",
        "upload_time_iso_8601": "2020-07-09T14:41:36.592284Z",
        "url": "https://files.pythonhosted.org/packages/5d/fd/b1fa7c2562ce4b0d8cedab1a4d1dfcd8a77efe655c1cc577dffca55d36b0/zengapay-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf90d25b66c0b2f7f6685c4686755fed383b5224b7cb7c6fc31c639c70d6e9ac",
        "md5": "fa594637ca72530cf9d6c391b8da61a5",
        "sha256": "27646fc3a04375dae68196e823bad6f929941549b037b02fbd3eb0f2f74232ac"
      },
      "downloads": -1,
      "filename": "zengapay-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa594637ca72530cf9d6c391b8da61a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 8162,
      "upload_time": "2020-07-09T14:41:34",
      "upload_time_iso_8601": "2020-07-09T14:41:34.593579Z",
      "url": "https://files.pythonhosted.org/packages/bf/90/d25b66c0b2f7f6685c4686755fed383b5224b7cb7c6fc31c639c70d6e9ac/zengapay-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5dfdb1fa7c2562ce4b0d8cedab1a4d1dfcd8a77efe655c1cc577dffca55d36b0",
        "md5": "7b02b0231b34de204b07a6deda3167e9",
        "sha256": "870c7cf5628592d1acee21b67599b1f44953b774aae470c14f426fe00ea87d84"
      },
      "downloads": -1,
      "filename": "zengapay-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7b02b0231b34de204b07a6deda3167e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 7228,
      "upload_time": "2020-07-09T14:41:36",
      "upload_time_iso_8601": "2020-07-09T14:41:36.592284Z",
      "url": "https://files.pythonhosted.org/packages/5d/fd/b1fa7c2562ce4b0d8cedab1a4d1dfcd8a77efe655c1cc577dffca55d36b0/zengapay-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}