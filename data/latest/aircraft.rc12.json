{
  "info": {
    "author": "Mark S. Maglana",
    "author_email": "mmaglana@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "Aircraft\n========\n\nA collection of [pyinfra](https://pyinfra.com) packaged deploys that can be used\nto declaratively configure services such as dnsmasq, apache2, and others. For now\nonly a few services are supported but more services such as GitLab or Jenkins\nwill become available in the future.\n\n\n# Video Introduction\n\n* [View on YouTube](https://youtu.be/-wF3zPSiHOk)\n* [Configure PXE on a Pi](https://youtu.be/HzXiBUNrDkg)\n\n\n# Project Rationale\n\nI work with infrastructure. The kind of infrastructure where you have a bunch\nof baremetal machines that don't have an OS installed. Where the only access\nyou have at the onset are their BMC IPs. In that case, I need some sort of\nmachine provisioning tool that is agentless. Truly agentless, not just Ansible\nagentless.\n\nIn other situations, I might need to set up a CI/CD cluster. Now if you're like\nme, you'd prefer to configure this cluster on top of as thin a technology stack\nas possible (read: just bare OSes). The reason for this is because if you want\nto deploy your CI/CD cluster on top of the best whiz-bang technology stack,\nsuch as Kubernetes, you have to ensure that you have a CI/CD infrastructure in\nplace before you do...but that's exactly what's missing and what we're trying\nto deploy! Again, what's needed here is an agentless infrastructure automation\ntool.\n\nIn both situations, I've found Ansible usable for a time. However, after years\nof using it, I've come to find it cumbersome. With its supposed-declarative\nYAML-based DSL slowly transforming into a turing-complete language. At this point\none wonders why we don't just use an already proper language itself like, oh\nI don't know, Python?\n\nThis is what brought be to [pyinfra](https://pyinfra.com/). This project builds\non top of pyinfra's good-enough implementation. It is an attempt at replicating\nthe Ansible project structure that I've been using for years as exemplified in\nanother project called [relaxdiego/cicd](https://github.com/relaxdiego/cicd).\n\n\n## Why Didn't You Just Use Terraform?\n\nI have ample experience with Terraform in the past too and I've maintained the\n\"Terraform for provisioning, Ansible for configuration\" dichotomy for some time.\nI maintain that stand for this project but have changed it to \"Terraform for\nprovisioning, Aircraft for configuration.\"\n\n\n# Usage\n\nThis project doesn't add wrappers around pyinfra, so once you get the hang\nof [how to use pyinfra](https://docs.pyinfra.com/en/1.x/getting_started.html),\nthen you can easily move on to some of the stuff I do in the `examples/` dir\nof this project.\n\nOnce you're comfortable with pyinfra and you start browsing the `examples/`\ndir, you'll see that all I'm doing is adding [pyinfra packaged deploys](https://docs.pyinfra.com/en/1.x/api/deploys.html)\nthat you can use in your operations files. I've also created some [pydantic](https://pydantic-docs.helpmanual.io/)\nmodels that go with the packaged deploys to help with validating inventory\ndata. Anyway, check out the `examples/` directory before I keep blabbering\nfor ages.\n\n\n# Developer's Guide\n\n## Prerequisites\n\n1. [Python 3](https://www.python.org/downloads/)\n2. Make\n\n\n## Prepare Your Python Environment (pyenv style; one-time only)\n\nYou will need two additional dependencies for this style:\n\n1. [pyenv](https://github.com/pyenv/pyenv-installer)\n2. [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)\n\nOnce the above dependencies are installed, do the following:\n\n1. Install an isolated environment for your preferred Python version.\n\n```\npython_version=<YOUR-PREFERRED-PYTHON-VERSION>\npyenv install --enable-shared $python_version\n```\n\nNOTE: For more available versions, run `pyenv install --list`\n\n2. Create a virtualenv for this project\n\n```\npyenv virtualenv $python_version aircraft\n```\n\n3. Add a `.python-version` file to this project dir\n\n```\ncat >.python-version<<EOF\naircrat\n$python_version\nEOF\n```\n\nYour newly created virtualenv should now be automatically activated if your\nprompt changed to the following:\n\n```\n(aircraft) ubuntu@dev...\n```\n\nor, should you happen to be using [dotfiles.relaxdiego.com](https://dotfiles.relaxdiego.com),\nif it changed to the following\n\n```\n... via 🐍 <YOUR-PREFERRED-PYTHON-VERSION> (aircraft)\n```\nNotice the things in parentheses that corresponds to the virtualenv you created\nin the previous step. This is thanks to the coordination of pyenv-virtualenv and\nthe `.python-version` file in the rootdir of this project.\n\nIf you `cd ..` or `cd` anywhere else outside your project directory, the virtualenv\nwill automatically be deactivated. When you `cd` back into the project dir, the\nvirtualenv will automatically be activated.\n\n\n## Prepare Your Python Environment (venv style)\n\nIf you'd rather manage your virtualenv manually, this section is for you.\nCreate your virtual environment:\n\n```\npython3 -m venv ./venv\n```\n\nActivate it in every shell session where you intend to run make or\nthe unit tests\n\n```\nsource ./venv/bin/activate\n```\n\n\n## Install The Dependencies\n\nInstall all development and runtime dependencies.\n\nWARNING: Make sure you are using a virtualenv before running this command. Since it\n         uses pip-sync to install dependencies, it will remove any package that is not\n         listed in either `requirements-dev.in` or `setup.py`. If you followed the steps\n         in any of the Prepare Your Development Environment sections above, then you\n         should be in good shape.\n\n```\nmake dependencies\n```\n\n\n## Adding A Development Dependency\n\n1. Add it to `requirements-dev.in` and then run make:\n\n```\necho \"foo\" >> requirements-dev.in\nmake dependencies\n```\n\nThis will create `requirements-dev.txt` and then install all dependencies\n\n\n2. Commit `requirements-dev.in` and `requirements-dev.txt`. Both\n   files should now be updated and the `foo` package installed in your\n   local machine. Make sure to commit both files to the repo to let your\n   teammates know of the new dependency.\n\n```\ngit add requirements-dev.*\ngit commit -m \"Add foo to requirements-dev.txt\"\ngit push origin\n```\n\n\n## Adding A Runtime Dependency\n\n1. Add it to `runtime_requirements` list in setup.py and then run:\n\n```\nmake dependencies\n```\n\nThis will create `requirements.txt` and then install all dependencies\n\n\n2. Commit `setup.py` and ignore `requirements.txt`. We ignore the latter\n   since this is a library project which may be used with different versions\n   of its dependencues at development and run time.\n\n```\ngit add setup.py\ngit commit -m \"Add bar to requirements\"\ngit push origin\n```\n\n\n## Testing and Building the Charm\n\nAfter any change in the library, you want to ensure that all unit tests\npass before building it. This can be easily done by running:\n\n```\nmake test build\n```\n\n\n## Viewing the Coverage Report\n\nTo view the coverage report, run the tests first and then run:\n\n```\nmake coverage-server\n```\n\nThis will run a simple web server on port 5000 that will serve the files\nin the auto-generated `htmlcov/` directory. You may leave this server running\nin a separate session as you run the tests so that you can just switch back\nto the browser and hit refresh to see the changes to your coverage down to\nthe line of code.\n\n\n## Other Make Goals\n\nRun `make help` or check out the contents of `Makefile`.\n\n\n## Running the Tests in Multiple Python Versions\n\nMore often than not you want to be able to support more than one version of\nPython. This is where tox comes in. Just run the following to get test\nresults for all Python versions listed in tox.ini's envlist config option\n\n```\ntox\n```\n\n# References\n\n* [SecureBoot-Compatible UEFI netboot](https://wiki.ubuntu.com/UEFI/SecureBoot/PXE-IPv6)\n* [dnsmasq](https://wiki.archlinux.org/index.php/dnsmasq#Configuration)\n* [Fully Automated Ubuntu 20.04 Install](https://askubuntu.com/a/1235724)\n* [Configuring PXE Network Boot Server on Ubuntu 18.04 LTS](https://linuxhint.com/pxe_boot_ubuntu_server/)\n* [Ubuntu Network installation with PXE](https://xinau.ch/notes/ubuntu-network-installation-with-pxe/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/relaxdiego/aircraft",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aircraft",
    "package_url": "https://pypi.org/project/aircraft/",
    "platform": "",
    "project_url": "https://pypi.org/project/aircraft/",
    "project_urls": {
      "Homepage": "https://github.com/relaxdiego/aircraft"
    },
    "release_url": "https://pypi.org/project/aircraft/0.6.1/",
    "requires_dist": null,
    "requires_python": "~=3.6",
    "summary": "",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9276313,
  "releases": {
    "0.0.1": [],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd8361c40bcf597c61af4f9fba919d8c07c28c169c0bd5e86750ec97baa4aff0",
          "md5": "009145ee0cf0b6a6158ebb046bb09d55",
          "sha256": "23a0f2e60c6277ae234518472e154677e0c2fcc202182e76cc83fe0d3bdce800"
        },
        "downloads": -1,
        "filename": "aircraft-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "009145ee0cf0b6a6158ebb046bb09d55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 4713,
        "upload_time": "2020-08-26T11:38:04",
        "upload_time_iso_8601": "2020-08-26T11:38:04.011574Z",
        "url": "https://files.pythonhosted.org/packages/fd/83/61c40bcf597c61af4f9fba919d8c07c28c169c0bd5e86750ec97baa4aff0/aircraft-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba5afa45556210c45d020693f915d767cec8a36f98658f89f4e07cd036d55588",
          "md5": "7e0878259cd65490f8d80d022c26c190",
          "sha256": "e8224d62bd4f6168a5db626598678e06fea6f506d74d7f55e988fdb924fb384f"
        },
        "downloads": -1,
        "filename": "aircraft-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7e0878259cd65490f8d80d022c26c190",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 4716,
        "upload_time": "2020-08-27T08:30:26",
        "upload_time_iso_8601": "2020-08-27T08:30:26.301534Z",
        "url": "https://files.pythonhosted.org/packages/ba/5a/fa45556210c45d020693f915d767cec8a36f98658f89f4e07cd036d55588/aircraft-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae12ae860fd28a26b3ffe30251961915e7494a65116ad0c3a0cd2b89c439dde0",
          "md5": "7d905bdee60e864da6f311844069c844",
          "sha256": "361b7fa6e6f1366ef17aaadfa6fac58708bf4b0fc36c371a96cd8d8d66626bb0"
        },
        "downloads": -1,
        "filename": "aircraft-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d905bdee60e864da6f311844069c844",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 4017,
        "upload_time": "2020-10-27T00:07:46",
        "upload_time_iso_8601": "2020-10-27T00:07:46.992032Z",
        "url": "https://files.pythonhosted.org/packages/ae/12/ae860fd28a26b3ffe30251961915e7494a65116ad0c3a0cd2b89c439dde0/aircraft-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3ebbc36934d3b42eb2a36508edc4f469d187a1d13b23b9082fbc4048607f0b6",
          "md5": "2966a18405c7c79a3670a6fe6a5a6675",
          "sha256": "9c4f9c7f9061f6caaee6e30c95ef4c54b77723c495e6bb2c30ea450de42e0571"
        },
        "downloads": -1,
        "filename": "aircraft-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2966a18405c7c79a3670a6fe6a5a6675",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 14160,
        "upload_time": "2020-12-22T01:14:13",
        "upload_time_iso_8601": "2020-12-22T01:14:13.887570Z",
        "url": "https://files.pythonhosted.org/packages/b3/eb/bc36934d3b42eb2a36508edc4f469d187a1d13b23b9082fbc4048607f0b6/aircraft-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d4875755e6a423cca8801f0fd7ff77883f88578ed412336228970bb482de326",
          "md5": "3325536b1266bcc909c75462f120801a",
          "sha256": "2f23f7964cffbfc9d4afc93c344e110de76c697ad834a49085608e80535d7003"
        },
        "downloads": -1,
        "filename": "aircraft-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3325536b1266bcc909c75462f120801a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 14163,
        "upload_time": "2020-12-22T01:17:12",
        "upload_time_iso_8601": "2020-12-22T01:17:12.045314Z",
        "url": "https://files.pythonhosted.org/packages/0d/48/75755e6a423cca8801f0fd7ff77883f88578ed412336228970bb482de326/aircraft-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cce53f8cd2b5140f16746391269770f987e678d6d9400614f4296b186815e410",
          "md5": "bc752ccae01a7e3b11aa8d4b7b163a38",
          "sha256": "dcf44b226b1353aeacb1012925b1f167b11775c5ec6d4f0b2a47a224340c149c"
        },
        "downloads": -1,
        "filename": "aircraft-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc752ccae01a7e3b11aa8d4b7b163a38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 32700,
        "upload_time": "2020-12-30T16:03:23",
        "upload_time_iso_8601": "2020-12-30T16:03:23.164522Z",
        "url": "https://files.pythonhosted.org/packages/cc/e5/3f8cd2b5140f16746391269770f987e678d6d9400614f4296b186815e410/aircraft-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f70c6a185fa209b1afd7eb083e85919514d05e7d9fe9d4681dcdcd5b3156b0e",
          "md5": "11d980cd07cb8f29e5ebe2125a73baed",
          "sha256": "ec50f852ec2410857014e2e11bbbf4acdd5b0508e5633fc4e9869bf95dc7cc47"
        },
        "downloads": -1,
        "filename": "aircraft-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "11d980cd07cb8f29e5ebe2125a73baed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 32128,
        "upload_time": "2021-01-14T06:22:04",
        "upload_time_iso_8601": "2021-01-14T06:22:04.924599Z",
        "url": "https://files.pythonhosted.org/packages/8f/70/c6a185fa209b1afd7eb083e85919514d05e7d9fe9d4681dcdcd5b3156b0e/aircraft-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d74c74a47b386ee26789cf410ce8dedbedec0837dc8d42f1880e1f5dcaf22c62",
          "md5": "0ffff3febe87d09912b8f4753b83d396",
          "sha256": "d72df14a3319b0d15ec3365b1f991df0910b707604e078bc1f29e9326d5a1b33"
        },
        "downloads": -1,
        "filename": "aircraft-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0ffff3febe87d09912b8f4753b83d396",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 31969,
        "upload_time": "2021-01-15T07:20:00",
        "upload_time_iso_8601": "2021-01-15T07:20:00.003447Z",
        "url": "https://files.pythonhosted.org/packages/d7/4c/74a47b386ee26789cf410ce8dedbedec0837dc8d42f1880e1f5dcaf22c62/aircraft-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32389d46d547775c49f71a83e3eae21cb2c434272fb08f07f8fef33e9a618483",
          "md5": "610e67ac0dc715cbf1a7eb88f92b6828",
          "sha256": "5e1cb877e4c90d8fad2cce83ed0b21f76fe945f68d817d4ea7cca0363cfab096"
        },
        "downloads": -1,
        "filename": "aircraft-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "610e67ac0dc715cbf1a7eb88f92b6828",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 31995,
        "upload_time": "2021-01-15T10:27:50",
        "upload_time_iso_8601": "2021-01-15T10:27:50.021304Z",
        "url": "https://files.pythonhosted.org/packages/32/38/9d46d547775c49f71a83e3eae21cb2c434272fb08f07f8fef33e9a618483/aircraft-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d88803355462b6b614368351f3b12e0073773d1dec956f9b3a9785b026ca7866",
          "md5": "6d0348cd68695c5ca6924945fa17258a",
          "sha256": "95f86e5dcc9d31a1e8210dd2f6699625b85cd06cecd214c51d46529c5cff9260"
        },
        "downloads": -1,
        "filename": "aircraft-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d0348cd68695c5ca6924945fa17258a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 36002,
        "upload_time": "2021-01-25T10:04:45",
        "upload_time_iso_8601": "2021-01-25T10:04:45.656419Z",
        "url": "https://files.pythonhosted.org/packages/d8/88/03355462b6b614368351f3b12e0073773d1dec956f9b3a9785b026ca7866/aircraft-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "554469198812ef209637cf64d04f15a23afb8bb34fc8715479f0f6e068191d6c",
          "md5": "d92f1d31ee2587548981f3f9c074f039",
          "sha256": "72bda922cfd15ab58001708499328ea47f0ca6bfa8f2febf48cf108cf2b7ccca"
        },
        "downloads": -1,
        "filename": "aircraft-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d92f1d31ee2587548981f3f9c074f039",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 35748,
        "upload_time": "2021-01-31T03:56:26",
        "upload_time_iso_8601": "2021-01-31T03:56:26.511742Z",
        "url": "https://files.pythonhosted.org/packages/55/44/69198812ef209637cf64d04f15a23afb8bb34fc8715479f0f6e068191d6c/aircraft-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "554469198812ef209637cf64d04f15a23afb8bb34fc8715479f0f6e068191d6c",
        "md5": "d92f1d31ee2587548981f3f9c074f039",
        "sha256": "72bda922cfd15ab58001708499328ea47f0ca6bfa8f2febf48cf108cf2b7ccca"
      },
      "downloads": -1,
      "filename": "aircraft-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d92f1d31ee2587548981f3f9c074f039",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 35748,
      "upload_time": "2021-01-31T03:56:26",
      "upload_time_iso_8601": "2021-01-31T03:56:26.511742Z",
      "url": "https://files.pythonhosted.org/packages/55/44/69198812ef209637cf64d04f15a23afb8bb34fc8715479f0f6e068191d6c/aircraft-0.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}