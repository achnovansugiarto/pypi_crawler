{
  "info": {
    "author": "Nickolai Belakovski",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Free For Educational Use",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![build](https://github.com/nbelakovski/cr3bp/actions/workflows/build.yml/badge.svg)\n[![codecov](https://codecov.io/gh/nbelakovski/cr3bp/branch/master/graph/badge.svg?token=CY00TY52ZL)](https://codecov.io/gh/nbelakovski/cr3bp)\n\n\n# Intro\n\nThis is a small library meant to facilitate investigation of the Circular Restricted 3 Body Problem (CR3BP)\n\n# Usage\n\nThe library consists of a `System` dataclass representing a 3 body system,\na couple of functions which encode the equations of motion of the CR3BP, and\na function for setting initial conditions to get onto a periodic trajectory\naround the collinear Lagrange points. Below we'll explain the `System` class\nas well as the functions.\n\n# System class\n\n\nYou can either use one of the provided 3 body systems (Sun-Earth, Earth-Moon, Sun-Jupiter)\n\n```python\nfrom cr3bp import EarthMoon\n```\n\nOr you can create your own system as follows:\n\n```python\nfrom cr3bp import System\nmass_primary = 2  # should be in kg\nmass_secondary = 1  # should be in kg\ndistance = 100  # should be in m\nMySystem = System(mass_primary, mass_secondary, distance)\n```\n\n### System API\n\n### Properties\n\n`mass_primary` - kg  \n`mass_seconary` - kg  \n`l` - m  \n`G` - 6.67408e-11 m^3 / (kg s^2) (this is constant across all Systems)  \n`mu`  \n`theta_dot` - radians/sec  \n`total_mass` - kg  \n`seconds` - number of seconds in a non-dimensional second (s*)  \n`s` - alias for `seconds`  \n`conversion_vector` - provides the vector `[l, l, l, l/s, l/s, l/s]` for converting dimensionless state to dimensional state  \n`L1`  \n`L2`  \n`L3`  \n`L4`  \n`L5`  \n\nAll of the L* functions return dimensionless values. L1-3 return a float,\nL4 and L5 return a tuple with x and y values (but they just return\n(0.5, +/- sqrt(3)/2) for all systems). L1-3 perform a root-finding calculation\nso it's best not to use them in a performance sensitive loop - store the\nreturned value and use that\n\n### Functions\n\n`convert_to_dimensional_state(state)`\n\nAccepts a dimensionless 6-element state vector and returns a 6-element state\nvector with dimensions added in\n\n\n`x_eqn`\n\nThis is used for calculating the location of the collinear Lagrange points. It\nreturns a function that bakes in the mu value of the system and which can then\nbe used for plotting or root finding.\n\n# Other functions\n\n- `DimensionalEOMs(t, X, system=EarthMoon)`  \nThis function encodes the EOMs for the CR3BP using dimensional values (meters, seconds, etc.). It is meant to be used with a numerical integrator from scipy. For example:\n`scipy.integrate.solve_ivp(cr3bp.DimensionalEOMs, [0, 3600*24], IC, args=[cr3bp.SunEarth], atol=1e-6, rtol=1e-12)`  \nIn this case we are starting from some initial condition `IC` (a 6 element state vector) and integrating for 1 day using the SunEarth system with a tolerance down to the micrometer level (`atol=1e-6`)\n\n- `EOMConstructor(mu, STM=False)`  \nThis encodes the EOMs in dimensionless form but it's a little different from `DimensionalEOMs` in that it takes a `mu` value and returns a function that can be used with numerical integrators. This just makes it a little smoother to use the numerical integrators since you specify the system when creating the EOMs as opposed to passing it in every time the EOMs are evaluated. The returned function can either integrate the State Transition Matrix or not. If integrating the STM, the returned function will expected a 42-element state vector, if not it will expect a 6-element one. Use this function like this:\n```python\nEM = cr3bp.EarthMoon\neoms = cr3bp.EOMConstructor(EM.mu)\n# We set the absolute tolerance to be at the micrometer level and keep the rtol small enough so that the atol dominates. rtol cannot be set lower than machine precision, so there may be some precision issues.\nsolution = scipy.integrate.solve_ivp(eoms, [0, 3600*24 / EM.seconds], IC, atol=0.000001/EM.l, rtol=2.3e-14)\n```   \n- `initial_velocity(initial_position: tuple[float, float], lpoint: float, mu: float) -> tuple[float, float]:`  \nThis function takes a dimensionless initial position consisting of an x and y position relative to the system barycenter, the dimensionless value of the collinear Lagrange point around which one wants to oscillate, and the mu of the system and returns the necessary initial x and y velocity to get onto an oscillatory trajectory around the Lagrange point. Sample usage:\n```python\n# IC (Initial Conditions) represents x, y, z, xdot, ydot, zdot\nIC = [EM.L1 + 100/EM.l, 0, 0, 0, 0, 0]\nIC[3:5] = cr3bp.initial_velocity(IC[:2], EM.L1, EM.mu)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nbelakovski/cr3bp",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cr3bp",
    "package_url": "https://pypi.org/project/cr3bp/",
    "platform": "",
    "project_url": "https://pypi.org/project/cr3bp/",
    "project_urls": {
      "Homepage": "https://github.com/nbelakovski/cr3bp"
    },
    "release_url": "https://pypi.org/project/cr3bp/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A small library for exploring the Circular Restricted 3-Body Problem (CR3BP)",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11450175,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d766db9c82d705a403d410de9d497e12e1dd72d50c2ac2860685d9f517dc2a",
          "md5": "c47464954ec3d96ca3a53a896c6afa1f",
          "sha256": "3cc8dcf14cc457c8a0cd429cc98fd0e570e77374cb0680b84c486843abc439ed"
        },
        "downloads": -1,
        "filename": "cr3bp-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c47464954ec3d96ca3a53a896c6afa1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5425,
        "upload_time": "2021-09-14T19:01:51",
        "upload_time_iso_8601": "2021-09-14T19:01:51.438794Z",
        "url": "https://files.pythonhosted.org/packages/15/d7/66db9c82d705a403d410de9d497e12e1dd72d50c2ac2860685d9f517dc2a/cr3bp-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dfff154c5a9addbf776b7f9ae5ac03ed8045d9ad92ab385cd3f2594a1389314",
          "md5": "3a651d80e9f6e39210ae1e6eb2857a4d",
          "sha256": "bf7484f38e7e9fb30510e92b496149389ab87a56a722b3409032e2ce0d9628aa"
        },
        "downloads": -1,
        "filename": "cr3bp-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3a651d80e9f6e39210ae1e6eb2857a4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5375,
        "upload_time": "2021-09-14T19:01:52",
        "upload_time_iso_8601": "2021-09-14T19:01:52.952939Z",
        "url": "https://files.pythonhosted.org/packages/5d/ff/f154c5a9addbf776b7f9ae5ac03ed8045d9ad92ab385cd3f2594a1389314/cr3bp-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15d766db9c82d705a403d410de9d497e12e1dd72d50c2ac2860685d9f517dc2a",
        "md5": "c47464954ec3d96ca3a53a896c6afa1f",
        "sha256": "3cc8dcf14cc457c8a0cd429cc98fd0e570e77374cb0680b84c486843abc439ed"
      },
      "downloads": -1,
      "filename": "cr3bp-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c47464954ec3d96ca3a53a896c6afa1f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5425,
      "upload_time": "2021-09-14T19:01:51",
      "upload_time_iso_8601": "2021-09-14T19:01:51.438794Z",
      "url": "https://files.pythonhosted.org/packages/15/d7/66db9c82d705a403d410de9d497e12e1dd72d50c2ac2860685d9f517dc2a/cr3bp-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5dfff154c5a9addbf776b7f9ae5ac03ed8045d9ad92ab385cd3f2594a1389314",
        "md5": "3a651d80e9f6e39210ae1e6eb2857a4d",
        "sha256": "bf7484f38e7e9fb30510e92b496149389ab87a56a722b3409032e2ce0d9628aa"
      },
      "downloads": -1,
      "filename": "cr3bp-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3a651d80e9f6e39210ae1e6eb2857a4d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5375,
      "upload_time": "2021-09-14T19:01:52",
      "upload_time_iso_8601": "2021-09-14T19:01:52.952939Z",
      "url": "https://files.pythonhosted.org/packages/5d/ff/f154c5a9addbf776b7f9ae5ac03ed8045d9ad92ab385cd3f2594a1389314/cr3bp-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}