{
  "info": {
    "author": "Marcos Duarte",
    "author_email": "duartexyz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# dltx\r\n\r\n[![PyPI version](https://badge.fury.io/py/dltx.svg)](https://badge.fury.io/py/dltx)\r\n\r\nThis package implements camera calibration and point reconstruction by *direct linear\r\ntransformation* (DLT).\r\n\r\n## Installation\r\n\r\n```\r\npip install dltx\r\n```\r\n\r\n## Example\r\n\r\n```python\r\nfrom dltx import dlt_calibrate, dlt_reconstruct\r\n\r\n# Define locations of 6 or more points in real world.\r\nworld_positions = [\r\n    [0,     0,      2550],  # point 1\r\n    [0,     0,      0],     # point 2\r\n    [0,     2632,   0   ],  # point 3\r\n    [4500,  0,      2550],  # point 4\r\n    [5000,  0,      0   ],  # point 5\r\n    [5660,  2620,   0   ]   # point 6\r\n]\r\n\r\n# Define pixel coordinates of respective points seen by two or \r\n# more cameras.\r\ncameras = [\r\n    # Camera 1\r\n    [\r\n        [1810, 885],\r\n        [1353, 786],\r\n        [1362, 301],\r\n        [455, 1010],\r\n        [329, 832],\r\n        [183, 180]\r\n    ],\r\n    # Camera 2\r\n    [\r\n        [1734, 952],\r\n        [1528, 768],\r\n        [1546, 135],\r\n        [115, 834],\r\n        [459, 719],\r\n        [358, 202]\r\n    ]\r\n]\r\n\r\n# Calibrate cameras\r\nn_dims = 3\r\nL1, err = dlt_calibrate(n_dims, world_positions, cameras[0])\r\nL2, err = dlt_calibrate(n_dims, world_positions, cameras[1])\r\ncamera_calibration = [L1, L2]\r\n\r\n# Find world coordinates for `query_point` visible in both cameras\r\nquery_point = [\r\n    [1810, 885], # cam 1\r\n    [1734, 952]  # cam 2\r\n    ]\r\ndlt_reconstruct(n_dims, len(cameras), camera_calibration, query_point)\r\n# coordinates in real world: [-1.31704156e-01,  8.71539661e-01,  2.54975288e+03]\r\n```\r\n\r\n## Background\r\n\r\nThe fundamental problem here is to find a mathematical relationship between the\r\ncoordinates of a 3D point and its projection onto the image plane. The DLT\r\n(a linear approximation to this problem) is derived from modeling the object\r\nand its projection on the image plane as a pinhole camera situation.\r\n\r\nIn simplistic terms, using a pinhole camera model, it can be found by similar\r\ntriangles the following relation between the image coordinates (u,v) and the 3D\r\npoint (X,Y,Z):\r\n\r\n```text\r\n    [ u ]   [ L1  L2  L3  L4 ]   [ X ]\r\n    [ v ] = [ L5  L6  L7  L8 ] * [ Y ]\r\n    [ 1 ]   [ L9 L10 L11 L12 ]   [ Z ]\r\n                                 [ 1 ]\r\n```\r\n\r\nThe matrix L is kwnown as the camera matrix or camera projection matrix. For a\r\n2D point (X,Y), this matrix is 3x3. In fact, the L12 term (or L9 for 2D DLT)\r\nis not independent from the other parameters and then there are only 11\r\n(or 8 for 2D DLT) independent parameters in the DLT to be determined through\r\nthe calibration procedure.\r\n\r\nThere are more accurate (but more complex) algorithms for camera calibration\r\nthat also consider lens distortion. For example, OpenCV and Tsai softwares have\r\nbeen ported to Python. However, DLT is classic, simple, and effective (fast)\r\nfor most applications.\r\n\r\nAbout DLT, see: https://docs.opencv.org/3.4/d9/dab/tutorial_homography.html\r\n\r\n## Usage\r\n\r\nMethods for camera calibration and point reconstruction based on DLT.\r\nDLT is typically used in two steps:\r\n\r\n**1. Camera calibration:**\r\n\r\n```python\r\nL, err = dlt_calibrate(nd, xyz, uv)\r\n```\r\n\r\n**2. Object (point) reconstruction**\r\n\r\n```python\r\nxyz = dlt_reconstruct(n_dims, n_cams, Ls, uvs)\r\n```\r\n\r\nThe camera calibration step consists in digitizing points with known\r\ncoordinates in the real space and find the camera parameters.\r\n\r\nAt least 4 points are necessary for the calibration of a plane (2D DLT)\r\nand at least 6 points for the calibration of a volume (3D DLT). For the 2D DLT,\r\nat least one view of the object (points) must be entered. For the 3D DLT, at\r\nleast 2 different views of the object (points) must be entered.\r\n\r\nThese coordinates (from the object and image(s)) are inputed to the\r\n`dlt_calibrate` algorithm which estimates the camera parameters (8 for 2D DLT\r\nand 11 for 3D DLT).\r\n\r\nUsually it is used more points than the minimum necessary and the\r\noverdetermined linear system is solved by a least squares minimization\r\nalgorithm. Here this problem is solved using singular value\r\ndecomposition (SVD).\r\n\r\nWith these camera parameters and with the camera(s) at the same position\r\nof the calibration step, we now can reconstruct the real position of any\r\npoint inside the calibrated space (area for 2D DLT and volume for the\r\n3D DLT) from the point position(s) viewed by the same fixed camera(s).\r\n\r\nThis code can perform 2D or 3D DLT with any number of views (cameras).\r\nFor 3D DLT, at least two views (cameras) are necessary.\r\n\r\n## Testing\r\n\r\nRun unit test suite:\r\n\r\n```sh\r\npython -m unittest test.test_dltx\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joonaojapalo/dltx",
    "keywords": "",
    "license": "Attribution 4.0 International",
    "maintainer": "Joona Ojapalo",
    "maintainer_email": "joona.ojapalo@iki.fi",
    "name": "dltx",
    "package_url": "https://pypi.org/project/dltx/",
    "platform": null,
    "project_url": "https://pypi.org/project/dltx/",
    "project_urls": {
      "Homepage": "https://github.com/joonaojapalo/dltx"
    },
    "release_url": "https://pypi.org/project/dltx/0.1.1/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "Direct Linear Transform (DLT)",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16462506,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb47852db6e463d158b2a61bdf55d0e44782718b3b95b07be5c175a70abb795c",
          "md5": "2514a84d8e13f4e5708ab2baf9401f37",
          "sha256": "98f6877fd76a7ae66ef7c7a70d8cf15e68bc6899e95d6f2abba28e90e84cdb31"
        },
        "downloads": -1,
        "filename": "dltx-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2514a84d8e13f4e5708ab2baf9401f37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11832,
        "upload_time": "2023-01-16T13:16:58",
        "upload_time_iso_8601": "2023-01-16T13:16:58.963569Z",
        "url": "https://files.pythonhosted.org/packages/cb/47/852db6e463d158b2a61bdf55d0e44782718b3b95b07be5c175a70abb795c/dltx-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d57c2402168362f1142cb9dad9d926aed06852a2f868ee5837b7b075ac4cb457",
          "md5": "1e9478dd0a4b116d1cd2d13e3c52850e",
          "sha256": "0163b80f228600dbfd33660cdbe7b9ff43353563bda3f1f1885c1355bdd61473"
        },
        "downloads": -1,
        "filename": "dltx-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e9478dd0a4b116d1cd2d13e3c52850e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11911,
        "upload_time": "2023-01-17T19:33:04",
        "upload_time_iso_8601": "2023-01-17T19:33:04.972442Z",
        "url": "https://files.pythonhosted.org/packages/d5/7c/2402168362f1142cb9dad9d926aed06852a2f868ee5837b7b075ac4cb457/dltx-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d57c2402168362f1142cb9dad9d926aed06852a2f868ee5837b7b075ac4cb457",
        "md5": "1e9478dd0a4b116d1cd2d13e3c52850e",
        "sha256": "0163b80f228600dbfd33660cdbe7b9ff43353563bda3f1f1885c1355bdd61473"
      },
      "downloads": -1,
      "filename": "dltx-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1e9478dd0a4b116d1cd2d13e3c52850e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11911,
      "upload_time": "2023-01-17T19:33:04",
      "upload_time_iso_8601": "2023-01-17T19:33:04.972442Z",
      "url": "https://files.pythonhosted.org/packages/d5/7c/2402168362f1142cb9dad9d926aed06852a2f868ee5837b7b075ac4cb457/dltx-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}