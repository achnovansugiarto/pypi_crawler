{
  "info": {
    "author": "Hamza Rhibi & Walid Sadallah",
    "author_email": "elrhibihamzas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Geo Library for Amazon DynamoDB\n\nThis project is an unofficial port of [awslabs/dynamodb-geo][dynamodb-geo], bringing creation and querying of geospatial data to Python developers using [Amazon DynamoDB][dynamodb].\n\n## Features\n\n- **Box Queries:** Return all of the items that fall within a pair of geo points that define a rectangle as projected onto a sphere.\n- **Radius Queries:** Return all of the items that are within a given radius of a geo point.\n- **Basic CRUD Operations:** Create, retrieve, update, and delete geospatial data items.\n- **Customizable:** Access to raw request and result objects from the AWS SDK for python.\n\n## Installation\n\n```python\npip install s2sphere\npip install boto3\npip install dynamodbgeo\n```\n\n## Getting started\n\nFirst you'll need to import the AWS sdk and set up your DynamoDB connection:\n\n```python\nimport boto3\nimport dynamodbgeo\nimport uuid\ndynamodb = boto3.client('dynamodb', region_name='us-east-2')\n```\n\nNext you must create an instance of `GeoDataManagerConfiguration` for each geospatial table you wish to interact with. This is a container for various options (see API below), but you must always provide a `DynamoDB` instance and a table name.\n\n```python\nconfig = dynamodbgeo.GeoDataManagerConfiguration(dynamodb, 'geo_test_8')\n```\n\nFinally, you should instantiate a manager to query and write to the table using this config object.\n\n```python\ngeoDataManager = dynamodbgeo.GeoDataManager(config)\n```\n\n## Choosing a `hashKeyLength` (optimising for performance and cost)\n\nThe `hashKeyLength` is the number of most significant digits (in base 10) of the 64-bit geo hash to use as the hash key. Larger numbers will allow small geographical areas to be spread across DynamoDB partitions, but at the cost of performance as more [queries][dynamodb-query] need to be executed for box/radius searches that span hash keys. See [these tests from the JS version][hashkeylength-tests](TODO) for an idea of how query performance scales with `hashKeyLength` for different search radii.\n\nIf your data is sparse, a large number will mean more RCUs since more empty queries will be executed and each has a minimum cost. However if your data is dense and `hashKeyLength` too short, more RCUs will be needed to read a hash key and a higher proportion will be discarded by server-side filtering.\n\nFrom the [AWS `Query` documentation][dynamodb-query]\n\n> DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. ... **The number will also be the same whether or not you use a `FilterExpression`**\n\nOptimally, you should pick the largest `hashKeyLength` your usage scenario allows. The wider your typical radius/box queries, the smaller it will need to be.\n\nNote that the [Java version][dynamodb-geo] uses a `hashKeyLength` of `6` by default. The same value will need to be used if you access the same data with both clients.\n\nThis is an important early choice, since changing your `hashKeyLength` will mean recreating your data.\n\nFrom the [AWS `Query` documentation][dynamodb-query]\n\n> DynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. ... **The number will also be the same whether or not you use a `FilterExpression`**\n\nOptimally, you should pick the largest `hashKeyLength` your usage scenario allows. The wider your typical radius/box queries, the smaller it will need to be.\n\nNote that the [Java version][dynamodb-geo] uses a `hashKeyLength` of `6` by default. The same value will need to be used if you access the same data with both clients.\n\nThis is an important early choice, since changing your `hashKeyLength` will mean recreating your data.\n\n## Creating a table\n\n`GeoTableUtil` has a static method `getCreateTableRequest` for helping you prepare a [DynamoDB CreateTable request][createtable] request, given a `GeoDataManagerConfiguration`.\n\nYou can modify this request as desired before executing it using AWS's DynamoDB SDK.\n\nExample:\n\n```python\n# Pick a hashKeyLength appropriate to your usage\nconfig.hashKeyLength = 3\n\n# Use GeoTableUtil to help construct a CreateTableInput.\ntable_util = dynamodbgeo.GeoTableUtil(config)\ncreate_table_input=table_util.getCreateTableRequest()\n\n#tweaking the base table parameters as a dict\ncreate_table_input[\"ProvisionedThroughput\"]['ReadCapacityUnits']=5\n\n# Use GeoTableUtil to create the table\ntable_util.create_table(create_table_input)\n```\n\n## Adding data\n\n```python\n#preparing non key attributes for the item to add\n\nPutItemInput = {\n        'Item': {\n            'Country': {'S': \"Tunisia\"},\n            'Capital': {'S': \"Tunis\"},\n            'year': {'S': '2020'}\n        },\n        'ConditionExpression': \"attribute_not_exists(hashKey)\" # ... Anything else to pass through to `putItem`, eg ConditionExpression\n\n}\ngeoDataManager.put_Point(dynamodbgeo.PutPointInput(\n        dynamodbgeo.GeoPoint(36.879163, 10.243120), # latitude then latitude longitude\n         str( uuid.uuid4()), # Use this to ensure uniqueness of the hash/range pairs.\n         PutItemInput # pass the dict here\n        ))\n\n```\n\nSee also [DynamoDB PutItem request][putitem]\n\n## Updating a specific point\n\nNote that you cannot update the hash key, range key, geohash or geoJson. If you want to change these, you'll need to recreate the record.\n\nYou must specify a `RangeKeyValue`, a `GeoPoint`, and an `UpdateItemInput dict` matching the [DynamoDB UpdateItem][updateitem] request (`TableName` and `Key` are filled in for you).\n\n#### Note : You must NOT update geoJson and geohash attributes.\n\n```python\n#define a dict of the item to update\nUpdateItemDict= { # Dont provide TableName and Key, they are filled in for you\n        \"UpdateExpression\": \"set Capital = :val1\",\n        \"ConditionExpression\": \"Capital = :val2\",\n        \"ExpressionAttributeValues\": {\n            \":val1\": {\"S\": \"Tunis\"},\n            \":val2\": {\"S\": \"Ariana\"}\n        },\n        \"ReturnValues\": \"ALL_NEW\"\n}\ngeoDataManager.update_Point(dynamodbgeo.UpdateItemInput(\n        dynamodbgeo.GeoPoint(36.879163,10.24312), # latitude then latitude longitude\n         \"1e955491-d8ba-483d-b7ab-98370a8acf82\", # Use this to ensure uniqueness of the hash/range pairs.\n         UpdateItemDict # pass the dict that contain the remaining parameters here\n         ))\n```\n\n## Deleting a specific point\n\nYou must specify a `RangeKeyValue` and a `GeoPoint`. Optionally, you can pass `DeleteItemInput` matching [DynamoDB DeleteItem][deleteitem] request (`TableName` and `Key` are filled in for you).\n\n```python\n# Preparing dict of the item to delete\nDeleteItemDict= {\n            \"ConditionExpression\": \"attribute_exists(Country)\",\n            \"ReturnValues\": \"ALL_OLD\"\n            # Don't put keys here, they will be generated for you implecitly\n        }\ngeoDataManager.delete_Point(\n    dynamodbgeo.DeleteItemInput(\n    dynamodbgeo.GeoPoint(36.879163,10.24312), # latitude then latitude longitude\n        \"0df9742f-619b-49e5-b79e-9fb94279d30c\", # Use this to ensure uniqueness of the hash/range pairs.\n        DeleteItemDict # pass the dict that contain the remaining parameters here\n        ))\n```\n\n## Rectangular queries\n\nQuery by rectangle by specifying a `MinPoint` and `MaxPoint`. You can also pass filtring criteria in a dictionary as explained in the example.\n#### NOTE: You cannot add filtring criteria related to the key attributes as they're used in the geo spacial filtring.\n\n```python\n# Querying a rectangle\nQueryRectangleInput={\n        \"FilterExpression\": \"Country = :val1\",\n        \"ExpressionAttributeValues\": {\n            \":val1\": {\"S\": \"Italy\"},\n        }\n    }\nprint(geoDataManager.queryRectangle(\n        dynamodbgeo.QueryRectangleRequest(\n            dynamodbgeo.GeoPoint(36.878184, 10.242358),\n            dynamodbgeo.GeoPoint(36.879317, 10.243648),QueryRectangleInput)))\n\n```\n\n## Radius queries\n\nQuery by radius by specifying a `CenterPoint` and `RadiusInMeter`. You can also pass filtring criteria in a dictionary as explained in the example.\n\n#### NOTE: \nSame as in query rectangle, you cannot add filtring criteria related to the key attributes as they're used in the geo spacial filtring.\n\n```python\n# Querying 95 meter from the center point (36.879131, 10.243057)\nQueryRadiusInput={\n        \"FilterExpression\": \"Country = :val1\",\n        \"ExpressionAttributeValues\": {\n            \":val1\": {\"S\": \"Italy\"},\n        }\n    }\n\nquery_reduis_result=geoDataManager.queryRadius(\n    dynamodbgeo.QueryRadiusRequest(\n        dynamodbgeo.GeoPoint(36.879131, 10.243057), # center point\n        95, QueryRadiusInput, sort = True)) # diameter\n\n```\n\n## Batch operations\n\nTODO:\n\n## Configuration reference\n\nThese are public properties of a `GeoDataManagerConfiguration` instance. After creating the config object you may modify these properties.\n\n#### geohashAttributeName: string = \"geohash\"\n\nThe name of the attribute storing the full 64-bit geohash. Its value is auto-generated based on item coordinates.\n\n#### hashKeyAttributeName: string = \"hashKey\"\n\nThe name of the attribute storing the first `hashKeyLength` digits (default 2) of the geo hash, used as the hash (aka partition) part of a [hash/range primary key pair][hashrange]. Its value is auto-generated based on item coordinates.\n\n#### hashKeyLength: number = 2\n\nSee [above][choosing-hashkeylength].\n\n#### rangeKeyAttributeName: string = \"rangeKey\"\n\nThe name of the attribute storing the range key, used as the range (aka sort) part of a [hash/range key primary key pair][hashrange]. Its value must be specified by you (hash-range pairs must be unique).\n\n#### geoJsonAttributeName: string = \"geoJson\"\n\nThe name of the attribute which will contain the longitude/latitude pair in a GeoJSON-style point (see also `longitudeFirst`).\n\n#### geohashIndexName: string = \"geohash-index\"\n\nThe name of the index to be created against the geohash. Only used for creating new tables.\n\n## Example\n\nTODO\n\n## Limitations\n\n### No composite key support\n\nCurrently, the library does not support composite keys. You may want to add tags such as restaurant, bar, and coffee shop, and search locations of a specific category; however, it is currently not possible. You need to create a table for each tag and store the items separately.\n\n### Queries retrieve all paginated data\n\nAlthough low level [DynamoDB Query][dynamodb-query] requests return paginated results, this library automatically pages through the entire result set. When querying a large area with many points, a lot of Read Capacity Units may be consumed.\n\n### More Read Capacity Units\n\nThe library retrieves candidate Geo points from the cells that intersect the requested bounds. The library then post-processes the candidate data, filtering out the specific points that are outside the requested bounds. Therefore, the consumed Read Capacity Units will be higher than the final results dataset. Typically 8 queries are exectued per radius or box search.\n\n### High memory consumption\n\nBecause all paginated `Query` results are loaded into memory and processed, it may consume substantial amounts of memory for large datasets.\n\n### Dataset density limitation\n\nThe Geohash used in this library is roughly centimeter precision. Therefore, the library is not suitable if your dataset has much higher density.\n\n[updateitem]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html\n[deleteitem]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html\n[putitem]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html\n[createtable]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html\n[hashrange]: http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey\n[readconsistency]: http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html\n[geojson]: https://geojson.org/geojson-spec.html\n[example]: https://github.com/rh389/dynamodb-geo.js/tree/master/example\n[dynamodb-geo]: https://github.com/awslabs/dynamodb-geo\n[dynamodb]: http://aws.amazon.com/dynamodb\n[dynamodb-query]: http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html\n[hashkeylength-tests]: https://github.com/rh389/dynamodb-geo.js/blob/master/test/integration/hashKeyLength.ts\n[choosing-hashkeylength]: #choosing-a-hashkeylength-optimising-for-performance-and-cost\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sigm0oid/dynamodb-geo.py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynamodbgeo",
    "package_url": "https://pypi.org/project/dynamodbgeo/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynamodbgeo/",
    "project_urls": {
      "Homepage": "https://github.com/Sigm0oid/dynamodb-geo.py"
    },
    "release_url": "https://pypi.org/project/dynamodbgeo/0.0.3/",
    "requires_dist": [
      "boto3 (>=1.11.8)",
      "s2sphere (>=0.2.5)"
    ],
    "requires_python": "",
    "summary": "A python port of awslabs/dynamodb-geo, for easier geospatial data manipulation and querying in DynamoDB",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8144232,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc40a118cc185dad8a985ae4667da2773fcd10465bb3ccce0908dda9fb8f3cfe",
          "md5": "07eabeb1d836bd651888ee2a1bab2571",
          "sha256": "53fef5210d1b730074e17634e1a86ae26b8d1834204bc35a5bf449dcc1137ee7"
        },
        "downloads": -1,
        "filename": "dynamodbgeo-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07eabeb1d836bd651888ee2a1bab2571",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16825,
        "upload_time": "2020-04-13T15:33:44",
        "upload_time_iso_8601": "2020-04-13T15:33:44.697587Z",
        "url": "https://files.pythonhosted.org/packages/bc/40/a118cc185dad8a985ae4667da2773fcd10465bb3ccce0908dda9fb8f3cfe/dynamodbgeo-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfd299730f29db35dfd46a871d73cf28c84077b546fb00ab5e3f0adbf9e749b8",
          "md5": "abb0328adbd5de8619c3b60ed9a97075",
          "sha256": "e745fed639c56210ce0bc2d254ece90588b37219fa47d002214b0e37cacc3dc1"
        },
        "downloads": -1,
        "filename": "dynamodbgeo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "abb0328adbd5de8619c3b60ed9a97075",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15211,
        "upload_time": "2020-04-13T15:33:47",
        "upload_time_iso_8601": "2020-04-13T15:33:47.337288Z",
        "url": "https://files.pythonhosted.org/packages/cf/d2/99730f29db35dfd46a871d73cf28c84077b546fb00ab5e3f0adbf9e749b8/dynamodbgeo-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "529878b6a3c3bf3e961fdd166ca8ce4295f9dc417425fbc71d3c03a261308dc8",
          "md5": "6a59527395349bef171fe75fbce34845",
          "sha256": "c0a4f386287c12c9ad4aa100f050308786bda385f31a60a37e03a5ec5f2f105f"
        },
        "downloads": -1,
        "filename": "dynamodbgeo-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a59527395349bef171fe75fbce34845",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17196,
        "upload_time": "2020-05-24T15:19:13",
        "upload_time_iso_8601": "2020-05-24T15:19:13.234766Z",
        "url": "https://files.pythonhosted.org/packages/52/98/78b6a3c3bf3e961fdd166ca8ce4295f9dc417425fbc71d3c03a261308dc8/dynamodbgeo-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9f952c2ac03c16516feeeb51e164fc1a0d49e9af03efbdf3e8df9446219ca2b",
          "md5": "e77f10d95c3dec838e05d1a0e085fc7c",
          "sha256": "ae75d9bb7ade86e11014c05511dcd5a60b20448bdd735210f90103d273dae814"
        },
        "downloads": -1,
        "filename": "dynamodbgeo-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e77f10d95c3dec838e05d1a0e085fc7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15681,
        "upload_time": "2020-05-24T15:19:14",
        "upload_time_iso_8601": "2020-05-24T15:19:14.925702Z",
        "url": "https://files.pythonhosted.org/packages/a9/f9/52c2ac03c16516feeeb51e164fc1a0d49e9af03efbdf3e8df9446219ca2b/dynamodbgeo-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cf3b92cdfc86b6445ed9d0276c7b57bad88f48a75d47c4a2eff618db4a0ce08",
          "md5": "ae9e5b5884c428c5e59c9a86426221f7",
          "sha256": "ec34ac9c259407815328cbc157972f4a4491c2fd9b19879bdb2d1907373f0a4a"
        },
        "downloads": -1,
        "filename": "dynamodbgeo-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae9e5b5884c428c5e59c9a86426221f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22391,
        "upload_time": "2020-09-09T10:11:25",
        "upload_time_iso_8601": "2020-09-09T10:11:25.614371Z",
        "url": "https://files.pythonhosted.org/packages/4c/f3/b92cdfc86b6445ed9d0276c7b57bad88f48a75d47c4a2eff618db4a0ce08/dynamodbgeo-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7484afbdcfc35ef7183495eddb6c44d00a8c5b54641462c69034f984577f18d",
          "md5": "28f999b9d7180d680f77b7895620e766",
          "sha256": "e03d1a844ec7e6a3a25c4888c738041b8b8ed222debc77538403063fc833a4bc"
        },
        "downloads": -1,
        "filename": "dynamodbgeo-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "28f999b9d7180d680f77b7895620e766",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16756,
        "upload_time": "2020-09-09T10:11:26",
        "upload_time_iso_8601": "2020-09-09T10:11:26.692873Z",
        "url": "https://files.pythonhosted.org/packages/d7/48/4afbdcfc35ef7183495eddb6c44d00a8c5b54641462c69034f984577f18d/dynamodbgeo-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cf3b92cdfc86b6445ed9d0276c7b57bad88f48a75d47c4a2eff618db4a0ce08",
        "md5": "ae9e5b5884c428c5e59c9a86426221f7",
        "sha256": "ec34ac9c259407815328cbc157972f4a4491c2fd9b19879bdb2d1907373f0a4a"
      },
      "downloads": -1,
      "filename": "dynamodbgeo-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ae9e5b5884c428c5e59c9a86426221f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22391,
      "upload_time": "2020-09-09T10:11:25",
      "upload_time_iso_8601": "2020-09-09T10:11:25.614371Z",
      "url": "https://files.pythonhosted.org/packages/4c/f3/b92cdfc86b6445ed9d0276c7b57bad88f48a75d47c4a2eff618db4a0ce08/dynamodbgeo-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7484afbdcfc35ef7183495eddb6c44d00a8c5b54641462c69034f984577f18d",
        "md5": "28f999b9d7180d680f77b7895620e766",
        "sha256": "e03d1a844ec7e6a3a25c4888c738041b8b8ed222debc77538403063fc833a4bc"
      },
      "downloads": -1,
      "filename": "dynamodbgeo-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "28f999b9d7180d680f77b7895620e766",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16756,
      "upload_time": "2020-09-09T10:11:26",
      "upload_time_iso_8601": "2020-09-09T10:11:26.692873Z",
      "url": "https://files.pythonhosted.org/packages/d7/48/4afbdcfc35ef7183495eddb6c44d00a8c5b54641462c69034f984577f18d/dynamodbgeo-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}