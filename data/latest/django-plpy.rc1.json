{
  "info": {
    "author": "Thorin Schiffer",
    "author_email": "thorin@schiffer.pro",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "# README\n\nDjango utilities for Postgres PL/Python. WIP\n\n[![Maintainability](https://api.codeclimate.com/v1/badges/8fe31e70125f34ad5328/maintainability)](https://codeclimate.com/github/eviltnan/django-plpy/maintainability) [![Test Coverage](https://api.codeclimate.com/v1/badges/8fe31e70125f34ad5328/test\\_coverage)](https://codeclimate.com/github/eviltnan/django-plpy/test\\_coverage) [![test](https://github.com/eviltnan/django-plpy/actions/workflows/test.yml/badge.svg)](https://github.com/eviltnan/django-plpy/actions/workflows/test.yml) [![lint](https://github.com/eviltnan/django-plpy/actions/workflows/lint.yml/badge.svg)](https://github.com/eviltnan/django-plpy/actions/workflows/lint.yml)\n\n### What is django-plpy\n\nPostgreSQL's PL/Python plugin allows you to write stored procedures in Python. Django-plpy provides utilities and commands for using python functions from your project within Django ORM and more.\n\n### Requirements\n\nDjango 2.2 or later, Python 3.6 or higher, Postgres 10 or higher.\n\n#### Installation\n\nPL/Python, therefore django-plpy requires Postgres plugin for plpython3u. Most of the distributions provide it in their repositories, here is how you install it on Ubuntu:\n\n```\napt-get -y install postgresql-plpython3-10\n```\n\nMind the PostgreSQL version at the end.\n\nInstall django-plpy with pip\n\n```\npip install django-plpy\n```\n\nAdd it to INSTALLED\\_APPS\n\n```python\nINSTALLED_APPS = [\n    ...,\n    \"django_plpy\",\n    ...,\n]\n```\n\nMigrate\n\n```\n./manage.py migrate\n```\n\nCheck if your local python environment is compatible with your Postgres python interpreter.\n\n```shell\n./manage.py checkenv\n```\n\nDjango-plpy is ready to be used.\n\n### Features\n\n#### Installing of python functions\n\nThe main workflow for bringing python functions to the database is to decorate them with `@plpython` and call manage.py command `syncfunctions` to install them. Full annotation is needed for the proper arguments mapping to the corresponding Postgres type function signature.&#x20;\n\nImagine a function like this:\n\n```python\nfrom django_plpy.installer import plfunction\n\n\n@plfunction\ndef pl_max(a: int, b: int) -> int:\n    if a > b:\n        return a\n    return b\n```\n\nFinding a maximum of two values. @plfunction decorator registers it for installation, if any function with that name already exists it will be overwritten. Call `syncfunctions` command to install it into the database:\n\n```\n./manage.py syncfynctions\n```\n\n#### Python functions in SQL queries\n\n```python\nfrom django.db import connection\n\nwith connection.cursor() as cursor:\n    cursor.execute(\"select pl_max(10, 20)\")\n    row = cursor.fetchone()\nassert row[0] == 20\n```\n\n#### Python functions in annotations\n\n```python\nfrom django.db.models import F, Func\nfrom tests.books.models import Book\n\nBook.objects.annotate(\n    max_value=Func(F(\"amount_sold\"), F(\"amount_stock\"), function=\"pl_max\")\n)\n```\n\n#### Using python functions for custom ORM lookups\n\n```python\nfrom django_plpy.installer import plfunction\nfrom django.db.models import Transform\nfrom django.db.models import IntegerField\nfrom tests.books.models import Book\n\n\n@plfunction\ndef plsquare(a: int) -> int:\n    return a * a\n\n\nclass PySquare(Transform):\n    lookup_name = \"plsquare\"\n    function = \"plsquare\"\n\n\nIntegerField.register_lookup(PySquare)\nassert Book.objects.filter(amount_stock__plsquare=400).exists()\n```\n\n#### Installing of python triggers\n\nTriggers are a very mighty mechanism, django-plpy allows you to easily mark a python function as a trigger, so some logic from your project is directly associated with the data changing events in the database.\n\nHere is an example of a python trigger using the `@pltrigger` decorator.\n\n```python\nfrom django_plpy.installer import pltrigger\n\n\n@pltrigger(event=\"INSERT\", when=\"BEFORE\", table=\"books_book\")\ndef pl_trigger(td, plpy):\n    # mind triggers don't return anything\n    td[\"new\"][\"name\"] = td[\"new\"][\"name\"] + \"test\"\n    td[\"new\"][\"amount_sold\"] = plpy.execute(\"SELECT count(*) FROM books_book\")[0][\n        \"count\"\n    ]\n```\n\n#### Using Django models in triggers\n\nThe parameters of `@pltrigger` decorator declare the trigger parameters like event the trigger will bind to and table name. You can replace `table_name` with a model name, the table name will looked up automatically:\n\n```python\nfrom django_plpy.installer import pltrigger\nfrom django.db.models import Model, CharField, IntegerField\n\n\nclass Book(Model):\n    name = CharField(max_length=10)\n    amount_stock = IntegerField(default=20)\n    amount_sold = IntegerField(default=10)\n\n\n@pltrigger(event=\"INSERT\", when=\"BEFORE\", model=Book)\ndef pl_update_amount(new: Book, old: Book, td, plpy):\n    # don't use save method here, it will kill the database because of recursion\n    new.amount_stock += 10\n```\n\nRead more about plpy triggers in the official Postgres documentation: https://www.postgresql.org/docs/13/plpython-database.html.\n\nUsing Django models in triggers comes at a price, read about the details of implementation below.\n\n#### Bulk operations and triggers, migrations\n\nPython triggers are fully featured Postgres triggers, meaning they will be created for every row, unlike Django signals. So if you define a trigger with event=\"UPDATE\" and call a bulk update on a model, the trigger will be called for all affected by the operation:\n\n```python\nfrom django_plpy.installer import pltrigger\nfrom tests.books.models import Book\n\n\n@pltrigger(event=\"UPDATE\", when=\"BEFORE\", model=Book)\ndef pl_update_amount(new: Book, old: Book, td, plpy):\n    # don't use save method here, it will kill the database because of recursion\n    new.amount_stock += 10\n```\n\nUpdate results a trigger call on every line:\n\n```python\nfrom tests.books.models import Book\n\nBook.objects.values('amount_stock')\n# <QuerySet [{'amount_stock': 30}, {'amount_stock': 30}, {'amount_stock': 30}]>\n\nBook.objects.all().update(name=\"test\")\n# 3\n\nBook.objects.values('amount_stock')\n# <QuerySet [{'amount_stock': 40}, {'amount_stock': 40}, {'amount_stock': 40}]>\n```\n\nUnlike the code of Django models or signals, triggers will also be called while migrations.\n\n#### Turning Django signals to python triggers\n\nAlthough Django signals are neither asynchronous nor have any ability to be executed in another thread or process, many developers mistakenly expect them to behave this way. Often it leads to a callback hell and complex execution flow. Django signals implement a dispatcher-receiver pattern and only make an impression of asynchronous execution.\n\nWith django-plpy, you can quickly turn your signals into triggers and make them truly asynchronous.\n\nBefore:\n\n```python\nfrom django.dispatch import receiver\nfrom django.db.models.signals import post_save\nfrom django.contrib.auth.models import User\n\n\n@receiver(post_save, sender=User)\ndef send_mail(sender, instance, **kwargs):\n    instance.send_mail()\n```\n\nAfter:\n\n```python\nfrom django_plpy.installer import pltrigger\nfrom django.contrib.auth.models import User\n\n\n@pltrigger(event=\"INSERT\", when=\"AFTER\", model=User)\ndef pl_send_mail(new: User, old: User, td, plpy):\n    new.send_mail()\n```\n\n#### Manage.py commands\n\n`syncfunctions` installs functions and triggers decorated with `@plfunction` and `@pltrigger` to the database.\n\n```shell\n(venv) thorin@thorin-N141CU:~/PycharmProjects/django-plpy$ ./manage.py syncfunctions\nSynced 4 functions and 1 triggers\n```\n\n`checkenv` checks if your local python and database's python versions are compatible.\n\n```shell\n(venv) thorin@thorin-N141CU:~/PycharmProjects/django-plpy$ ./manage.py checkenv\nDatabase's Python version: 3.7.3\nMinor versions match, local version: 3.7.12. Django-plpy Django ORM can be used in triggers.\n```\n\nIf your local python and database's python versions have different minor releases, psycopg won't work, so Django ORM cannot be used in triggers. This is what you will see in this case:\n\n```shell\n(venv) thorin@thorin-N141CU:~/PycharmProjects/django-plpy$ ./manage.py checkenv\nDatabase's Python version: 3.6.9\nPostgres python and this python's versions don't match, local version: 3.7.12.Django-plpy Django ORM cannot be used in triggers.\n```\n\n### Under the hood\n\n#### Supported argument types\n\nCurrently, supported types are:\n\n```\nint: \"integer\",\nstr: \"varchar\",\nDict[str, str]: \"JSONB\",\nList[str]: \"varchar[]\",\nList[int]: \"int[]\",\nbool: \"boolean\",\nfloat: \"real\",\n```\n\n#### Using Django in PL functions and triggers\n\nWhile installing with, `syncfunctions` the source code of the function will be copied to a corresponding stored procedure and installed in Postgres. This makes your local context not available to the functions, which means that no models or libraries can be used within the transferred functions.\n\nTo solve this problem, you need to set up your python project and environment within a Postgres python interpreter. Django-plpy supports the following two scenarios of how you use your database.\n\n**Database and application are on the same host**\n\nRarely used nowadays, but still out there, this scenario is the simplest for the environment sharing. Django-plpy creates stored procedures and transfers the necessary configuration to the database:\n\n* secrets and database access credentials\n* path to the python env (defaults to `distutils.sysconfig.get_python_lib()`, for more config see below)\n* loads Django applications the way manage.py does it\n\n**Database is in a separate docker container**\n\nA more common production scenario is that the database is on a separate docker container.\n\n**Couple of words about docker and plpython or django-plpy**\n\nThe official Postgres image doesn't support plpython plugin out of the box, so if you want to use plpython as such you would need to create your image or use one of those provided by the maintainer of this package (thorinschiffer/postgres-plpython).\n\nAll the images provide python 3.7 because Postgres uses the default python environment from the OS the image is based on and 3.7 is the standard for Debian Buster.\n\n**Using django-plpy with dockerized Postgres**\n\nTo make the code available to the Postgres python interpreter, it has to somehow appear within the docker container. You can either provision the image with it while building if you decided to write your docker image / dockerfile, or you can share the code using volumes.\n\nOnce the code and environment exist somewhere within the Docker container, django-plpy can be told to use them: So if your environment lives under `/env` (copy site-packages folder to this path) and your app within `/app`, add following settings to your `settings.py`\n\n```python\nPLPY_ENV_PATHS = [\"/env\"]\nPLPY_PROJECT_PATH = \"/app\"\n```\n\n#### AWS RDS and other managed databases\n\nIn the times of Saas there databases are rarely connected in a docker image but much\nmore frequently in a managed database like AWS RDS.\nDjango-plpy can be only install simple functions and triggers in such instances, because\nthere is no access to the database's filesystem in such setup.\n\nBesides that some managed databases won't give you superuser rights, meaning installing\nextensions in such a scenario will be troublesome.\n\n\n#### How the code is installed\n\nDjango-plpy copies the function code, wraps it in a PL/Python stored procedure or trigger\nand then installs it with `manage.py syncfunctions`.\nIf you use Django models, database has to have access to your project file and virtualenv (see above),\nor if you create your own database docker image, it has to be provisioned correspondingly.\nThis scenario seems quite exotic, and you do it on your own risk.\n\n#### Troubleshooting\n\nIf you see `Error loading psycopg2 module: No module named 'psycopg2._psycopg'`, your local python and db's versions don't match.\nCheck your python versions with `manage.py checkenv`\n\nIf you see this:\n\n```\ndjango.db.utils.ProgrammingError: language \"plpython3u\" does not exist\nHINT:  Use CREATE LANGUAGE to load the language into the database.\n```\n\nyou haven't migrated: `manage.py migrate`\n#### Caveats\n\nCustom functions and triggers are not a part of Django ORM and can get out of hand, name collisions are not checked explicitely for now.\n\nFor now enabling orm stores the os.environ in json in plaintext in the trigger function text, so this feature is\nconsidered quite experimental.\n\nThere were no real performance tests made, so this is for you to find out.\nCurrently only python3.7 is supported with Django ORM, as it is a current version in the Debian based python images,\nthat are default. There is an opportunity to build an image with a custom python verson and postgres version, but\nit seems a total overkill assuming all the problems with Django ORM, see above.\n\nPrepend database functions with plpy_ prefix to be sure they are not executed locally.\nDjango-plpy won't remove any triggers, you will have to take care of the stale triggers yourself.\n\n### Installation for development\n\nInstall project locally: `pip install -e .`\n\nDjango-plpy [django-environ](https://github.com/joke2k/django-environ) for passing the necessary env over dotenv, database for creds in particular. See .env\\_template for possible env variables.\n\n### Changelog\n\n#### 0.1.0 Initial release\n\n- pl functions\n- pl triggers\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eviltnan/django-plpy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-plpy",
    "package_url": "https://pypi.org/project/django-plpy/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-plpy/",
    "project_urls": {
      "Documentation": "https://pyscaffold.org/",
      "Homepage": "https://github.com/eviltnan/django-plpy",
      "Source": "https://github.com/eviltnan/django-plpy",
      "Twitter": "https://twitter.com/SchifferThorin"
    },
    "release_url": "https://pypi.org/project/django-plpy/0.1.0/",
    "requires_dist": [
      "django",
      "psycopg2-binary",
      "importlib-metadata ; python_version > \"3.6\"",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "django-environ ; extra == 'testing'",
      "tox ; extra == 'testing'",
      "django-extensions ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "Django utilities for Postgres PL/Python.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12268085,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adc7c8f044346fc5b8b09802f60f0d8990906b30b14b16f7acf254327a42e0b5",
          "md5": "4fcff0ac05d09e03ee18d29215219b08",
          "sha256": "25eba2243bf5e4518f41938d5a866174b08e735b8a3396d1ed6b406e59cc3ed1"
        },
        "downloads": -1,
        "filename": "django_plpy-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fcff0ac05d09e03ee18d29215219b08",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13967,
        "upload_time": "2021-12-10T14:41:58",
        "upload_time_iso_8601": "2021-12-10T14:41:58.528389Z",
        "url": "https://files.pythonhosted.org/packages/ad/c7/c8f044346fc5b8b09802f60f0d8990906b30b14b16f7acf254327a42e0b5/django_plpy-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da2caf9d5bf272c1fcdf092c112449199b482877fe8a5329097c8890f2efaaf6",
          "md5": "0c59161a3a60bd94050c59ec3fce8517",
          "sha256": "038859e8920744d39157fb4636cc6881be9aee09e75d5f23eded565747708904"
        },
        "downloads": -1,
        "filename": "django-plpy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c59161a3a60bd94050c59ec3fce8517",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25019,
        "upload_time": "2021-12-10T14:41:59",
        "upload_time_iso_8601": "2021-12-10T14:41:59.980841Z",
        "url": "https://files.pythonhosted.org/packages/da/2c/af9d5bf272c1fcdf092c112449199b482877fe8a5329097c8890f2efaaf6/django-plpy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "adc7c8f044346fc5b8b09802f60f0d8990906b30b14b16f7acf254327a42e0b5",
        "md5": "4fcff0ac05d09e03ee18d29215219b08",
        "sha256": "25eba2243bf5e4518f41938d5a866174b08e735b8a3396d1ed6b406e59cc3ed1"
      },
      "downloads": -1,
      "filename": "django_plpy-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4fcff0ac05d09e03ee18d29215219b08",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 13967,
      "upload_time": "2021-12-10T14:41:58",
      "upload_time_iso_8601": "2021-12-10T14:41:58.528389Z",
      "url": "https://files.pythonhosted.org/packages/ad/c7/c8f044346fc5b8b09802f60f0d8990906b30b14b16f7acf254327a42e0b5/django_plpy-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da2caf9d5bf272c1fcdf092c112449199b482877fe8a5329097c8890f2efaaf6",
        "md5": "0c59161a3a60bd94050c59ec3fce8517",
        "sha256": "038859e8920744d39157fb4636cc6881be9aee09e75d5f23eded565747708904"
      },
      "downloads": -1,
      "filename": "django-plpy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0c59161a3a60bd94050c59ec3fce8517",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25019,
      "upload_time": "2021-12-10T14:41:59",
      "upload_time_iso_8601": "2021-12-10T14:41:59.980841Z",
      "url": "https://files.pythonhosted.org/packages/da/2c/af9d5bf272c1fcdf092c112449199b482877fe8a5329097c8890f2efaaf6/django-plpy-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}