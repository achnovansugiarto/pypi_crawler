{
  "info": {
    "author": "Kris Hauser",
    "author_email": "hauser.kris@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "JSON Schema Lite\n================\n\nAuthor: Kris Hauser\n-------------------\n\nJSON Schema Lite uses a JSON Schema-like syntax to match JSON objects.\n\nMotivation\n----------\n\nWhy use this instead of JSON Schema?\n\nFirst reason: It's *much* less verbose than JSON Schema.\n\nSecond reason: It's *way easier* to write rules! Since rules largely\nmatch the JSON representation of an object, it's really simple to modify\nitems to specify what you'd like. Say that you want to match a user\nlogin object, except for the 'session' and 'ip' key:\n\n.. code:: python\n\n    item = {\n        \"name\":\"John Doe\",\n        \"password\":\"john123\",\n        \"session\":28387432,\n        \"ip\":\"128.0.0.1\"\n    }\n\nTo ignore these keys, just set:\n\n.. code:: python\n\n    schema = copy.copy(item)\n    schema['session']=None\n    schema['ip']=None\n\nThen, the ``match`` function will match any item matching John Doe's\nrecord, except for the 'session' and 'ip' keys.\n\nAs another example, suppose that you'd like to recognize \"large\ncircles\". The circle object is represented by an object like this:\n\n.. code:: python\n\n    circle = {\n        \"type\":\"Circle\",\n        \"center\":[0.583,3.2919],\n        \"radius\":0.25\n    }\n\nThen, we can simply modify some conditions the center and radius to\nmatch circles with radius greater than 2:\n\n.. code:: python\n\n    import jschemalite\n    big_circle_schema = circle.copy()\n    big_circle_schema['center'] = [None,None]  #match 2-element lists\n    big_circle_schema['radius'] = {'!minimum':2}  #match any radius >= 2\n    print(jschemalite.match(circle,big_circle_schema)) #prints False\n\n\nBasic schema rules\n------------------\n\n-  An object will always match itself.\n-  ``None``: An object will always match with None.\n-  ``list``: The object must be a list of the same length as the rule.\n   Each item must match the corresponding item in the rule.\n-  ``dict``: A dict rule states which keys must exist in the object,\n   EXCEPT for special rules (i.e., keys prefixed with \"!\"). Each\n   subkey's value must match the rule under the corresponding subkey in\n   the dict.\n\nSpecial rules\n-------------\n\nSpecial rules are always dicts, with keys prefixed with \"!\". Special\nkeys are patterned after JSON Schema specifiers, and include the\nfollowing:\n\n-  ``!type`` [str or list]: accept any object of this type. Accepts JSON\n   Schema \"string\", \"number\", \"integer\", \"array\", \"object\", \"boolean\",\n   \"null\" as well as Python class names 'str', 'float', 'int', 'list',\n   'dict'. or 'bool'.\n\n   If a list is given, multiple types are accepted.   \n-  ``!enum`` list: accept any object that matches one of the items in the list.\n-  ``!minimum`` value: accept numeric values that are >= value\n-  ``!maximum`` value: accept numeric values that are <= value\n-  ``!exclusiveMinimum`` value: accept numeric values that are > value\n-  ``!exclusiveMaximum`` value: accept numeric values that are < value\n-  ``!properties`` dict: designates a dict of possible properties (keys).\n   The property name will map to its specification. Note that like JSON\n   Schema, properties are optional.\n-  ``!additionalProperties`` bool: if False, will not allow any other\n   properties in a dictionary than are specified in the rule.\n-  ``!required`` list: a list of property names that are required.\n-  ``!minProperties`` value: must have at least this number of properties\n-  ``!minProperties`` value: must have at least this number of properties\n-  ``!items`` rule: for lists/arrays, all items must match this rule. (Note: can't specify multiple item rules as in JSON Schema)\n-  ``!minItems`` value: lists/arrays must have at least this number of items.\n-  ``!maxItems`` value: lists/arrays must have at most this number of items.\n-  ``!anyOf`` list: any of the rules given in the list may match.\n-  ``!length`` value: length specifier, works for either dicts or lists.\n-  ``!or`` list: alias for ``!anyOf``. \n-  ``!value`` val: takes on value val.  Usually you'd want to just replace the dict\n   with val, but for quick insertion of fixed values into an existing schema, this\n   will do in a pinch.\n-  ``!empty``: matches with nothing (not even None). Used to specify that a key should\n   not be present in a dict.\n\nExamples\n--------\n\nBasic examples:\n\n.. code:: python\n\n    from jschemalite import match\n\n    obj = {'a':3,'b':{'foo':'bar','baz':[0.4,0.2]}}\n    schema1 = {'a':None,'b':None}       #dict must have keys 'a' and 'b'\n    schema2 = {'!properties':{'a':None,'b':None,'c':None}}  #dict may have keys 'a', 'b', and 'c'\n    schema3 = {'a':None,'b':{'foo':None,'baz':None}}        #dict must have the top-level key structure \n    schema4 = {'b':{'foo':None}}                            #dict must have at least as many keys as are specified\n    array_schema = {'!type':'array'}    #object must be an array\n    size2_array_schema = {'!type':'array','!length':2}      #object must be a length-2 array\n    print(match(obj,obj),\"= True\")  #an object matches itself\n    print(match(obj,schema1),\"= True\")  #it matches the schema\n    print(match(obj,schema2),\"= True\")  #it matches the schema\n    print(match(obj,schema3),\"= True\")  #it matches the schema\n    print(match(obj,schema4),\"= True\")  #it matches the schema\n    print(match(obj,array_schema),\"= False\")  #it's not an array\n    print(match(obj['b']['baz'],size2_array_schema),\"= True\")  #it's a length 2 array\n    enum_schema = {'!enum':[\"One\",\"Two\",\"Three\"]}        #this is how you specify an enum\n    print(match(\"One\",enum_schema))\n    print(match([1],enum_schema))\n\nSampling\n--------\n\nWe can also sample objects that match a schema using the\n``sample_match`` function. This works best when numeric items have a\nminimum and maximum.\n\nConversions\n-----------\n\nCan convert to JSON Schema using ``to_json_schema``.\n\nNo conversions from JSON Schema back to JSON Schema Lite yet.\n\nJSON Schema Lite objects can be converted to MongoDB queries.\n\n.. code:: python\n\n    from jschemalite.mongodb import jschemalite_to_mongodb\n    mongodb_query = jschemalite_to_mongodb(jsl_query)\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/krishauser/jschemalite",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jschemalite",
    "package_url": "https://pypi.org/project/jschemalite/",
    "platform": "",
    "project_url": "https://pypi.org/project/jschemalite/",
    "project_urls": {
      "Homepage": "https://www.github.com/krishauser/jschemalite"
    },
    "release_url": "https://pypi.org/project/jschemalite/0.1.post2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "JSON Schema Lite",
    "version": "0.1.post2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12499307,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60764d89f2d3daeec288fdae158c55ab87b8d6a5fb64d26fe68a24701113a321",
          "md5": "c031eb2779cda46eee424fd5a082f065",
          "sha256": "20139439503919aa8ad8cec6d52b4b6b4fc5a1cc57bf80d759f97b65b2ee0ad5"
        },
        "downloads": -1,
        "filename": "jschemalite-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c031eb2779cda46eee424fd5a082f065",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 15133,
        "upload_time": "2022-01-06T23:51:05",
        "upload_time_iso_8601": "2022-01-06T23:51:05.977266Z",
        "url": "https://files.pythonhosted.org/packages/60/76/4d89f2d3daeec288fdae158c55ab87b8d6a5fb64d26fe68a24701113a321/jschemalite-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5e085b90d3a9139d38415c58142f9117ff4cb9f5d4989ea5fdcf83851672ed5",
          "md5": "fa545225f7ae68a8a44a2663b0f30051",
          "sha256": "764901a65716ca79859457ff77835b0d40e467e9e3e7de087a5f6a189f421e0a"
        },
        "downloads": -1,
        "filename": "jschemalite-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fa545225f7ae68a8a44a2663b0f30051",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13238,
        "upload_time": "2022-01-06T23:51:07",
        "upload_time_iso_8601": "2022-01-06T23:51:07.669275Z",
        "url": "https://files.pythonhosted.org/packages/f5/e0/85b90d3a9139d38415c58142f9117ff4cb9f5d4989ea5fdcf83851672ed5/jschemalite-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "600525131c0dea32e7adc7c64de8dca9aa5865f7436c276cf1c536969cee6a2c",
          "md5": "b227f7a5e6b34b7990a0c929b01ebd4b",
          "sha256": "aabe55341dbf974a2354d345f81a35175494733ab31d92531bf9565a52fd4c2c"
        },
        "downloads": -1,
        "filename": "jschemalite-0.1.post1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b227f7a5e6b34b7990a0c929b01ebd4b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 12593,
        "upload_time": "2022-01-06T23:58:05",
        "upload_time_iso_8601": "2022-01-06T23:58:05.821513Z",
        "url": "https://files.pythonhosted.org/packages/60/05/25131c0dea32e7adc7c64de8dca9aa5865f7436c276cf1c536969cee6a2c/jschemalite-0.1.post1-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a6631e8a612afba0edb37e8d8a1ffc72942ccb404f745758efb128e34698d68",
          "md5": "b9e939841446e8f6b2d3d57444a5a409",
          "sha256": "2cb3fdbb2211534a73c8691357480ad8913b04f0258716042424075db88ada7e"
        },
        "downloads": -1,
        "filename": "jschemalite-0.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "b9e939841446e8f6b2d3d57444a5a409",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12954,
        "upload_time": "2022-01-06T23:58:07",
        "upload_time_iso_8601": "2022-01-06T23:58:07.307634Z",
        "url": "https://files.pythonhosted.org/packages/0a/66/31e8a612afba0edb37e8d8a1ffc72942ccb404f745758efb128e34698d68/jschemalite-0.1.post1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39128422a9115ef1ce3b9881bf95728c56ddc8033aea06e08d99ce9518a4bfcf",
          "md5": "f78dc3304d09d5aa58f42bbb351ee15d",
          "sha256": "e5e95d26eaade55f840d83d52b73d6cbd91eaf0f6900ef8299e97b6ef4458608"
        },
        "downloads": -1,
        "filename": "jschemalite-0.1.post2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f78dc3304d09d5aa58f42bbb351ee15d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14659,
        "upload_time": "2022-01-07T00:27:53",
        "upload_time_iso_8601": "2022-01-07T00:27:53.412173Z",
        "url": "https://files.pythonhosted.org/packages/39/12/8422a9115ef1ce3b9881bf95728c56ddc8033aea06e08d99ce9518a4bfcf/jschemalite-0.1.post2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8dbb882c0ac7a2386aed4e5efeef4e03e6b4fcd0143570dd767c83e6636fd21",
          "md5": "0fa99a536d83ffc6abfc4288b5d1d27b",
          "sha256": "c62199a4139210c75d0f6ee28e2580b7f5088b050a2e898c2c2d845e39542890"
        },
        "downloads": -1,
        "filename": "jschemalite-0.1.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "0fa99a536d83ffc6abfc4288b5d1d27b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12655,
        "upload_time": "2022-01-07T00:27:55",
        "upload_time_iso_8601": "2022-01-07T00:27:55.429871Z",
        "url": "https://files.pythonhosted.org/packages/b8/db/b882c0ac7a2386aed4e5efeef4e03e6b4fcd0143570dd767c83e6636fd21/jschemalite-0.1.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39128422a9115ef1ce3b9881bf95728c56ddc8033aea06e08d99ce9518a4bfcf",
        "md5": "f78dc3304d09d5aa58f42bbb351ee15d",
        "sha256": "e5e95d26eaade55f840d83d52b73d6cbd91eaf0f6900ef8299e97b6ef4458608"
      },
      "downloads": -1,
      "filename": "jschemalite-0.1.post2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f78dc3304d09d5aa58f42bbb351ee15d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14659,
      "upload_time": "2022-01-07T00:27:53",
      "upload_time_iso_8601": "2022-01-07T00:27:53.412173Z",
      "url": "https://files.pythonhosted.org/packages/39/12/8422a9115ef1ce3b9881bf95728c56ddc8033aea06e08d99ce9518a4bfcf/jschemalite-0.1.post2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8dbb882c0ac7a2386aed4e5efeef4e03e6b4fcd0143570dd767c83e6636fd21",
        "md5": "0fa99a536d83ffc6abfc4288b5d1d27b",
        "sha256": "c62199a4139210c75d0f6ee28e2580b7f5088b050a2e898c2c2d845e39542890"
      },
      "downloads": -1,
      "filename": "jschemalite-0.1.post2.tar.gz",
      "has_sig": false,
      "md5_digest": "0fa99a536d83ffc6abfc4288b5d1d27b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12655,
      "upload_time": "2022-01-07T00:27:55",
      "upload_time_iso_8601": "2022-01-07T00:27:55.429871Z",
      "url": "https://files.pythonhosted.org/packages/b8/db/b882c0ac7a2386aed4e5efeef4e03e6b4fcd0143570dd767c83e6636fd21/jschemalite-0.1.post2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}