{
  "info": {
    "author": "zhudechuan",
    "author_email": "zhudechuan.zzjj@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# portfolio_backtester\n\n\n\n- ***portfolio_backtester* is a Python library for backtesting *built-in* or *user-defined* portfolio construction strategies.**\n\n\n\nGiven a portfolio construction strategy (a function that takes in stock-related data and returns portfolio weights), be \n\nit pre-built-in or user-defined, and the data that the user wish the strategy to be tested on, the library can calculate several evaluation metrics of the portfolio, including\n\nnet returns, sharpe ratio, certainty equivalent returns, turnover, etc.\n\n\n\n- ***portfolio_backtester* is fast and efficient, compatible with most `dataframe` and `numpy` objects and functions**\n\n\n\nThe library is built on `numpy` and `pandas`, and mostly utilizes matrix operations to handle heavy calculations\n\nto make the library *light, fast* and *efficient*.\n\n\n\n- ***portfolio_backtester* is flexible and versatile**\n\n\n\nVarious inputs can be modified to suit the needs of different strategies and backtesting scenarios, \n\nsuch as *change of frequency* to enable testing on different *timescales*, *price-impact models* and\n\n*transaction costs* to gauge the impact of trading activities on the strategy, \n\nability to take in *extra data* and *trace back prior portfolios* \n\nto meet the need of portfolio construction strategy, etc.\n\n\n\n- ***portfolio_backtester* is setting a universal standard for portfolio performance evaluation**\n\n\n\nSince the library is flexible enough to be compatible with most portfolio construction strategies, it aims \n\nto provide benchmark performance evaluation for all portfolio construction\n\nstrategies, so that users can consistently compare the performance of different strategies\n\nunder varoius scenarios, without worrying about the possibility of cheating, \n\ne.g. using *future information*to build portfolio in the current period. By using one universal \n\nstandard, the library enforces a fair game for different strategies by competing on a same level\n\nof battleground.\n\n\n\n## Requirements\n\nThe following libraries are required for the use of ***portfolio_backtester***\n\n- [numpy](https://numpy.org/)\n\n- [pandas](https://pandas.pydata.org/)\n\n- [scipy](https://www.scipy.org/)\n\n- [scikit-learn](https://scikit-learn.org/stable/)\n\n\n\n## Installation\n\n\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install portfolio_backtester.\n\n\n\n```bash\n\npip install portfolio_backtester\n\n```\n\n\n\n## Get started\n\n\n\n### 1. Preparation\n\n\n\nBefore calling the library, user should decide whether he/she wants to use built-in portfolio construction strategies, or \n\ndefines one himself/herself. If it is the latter, it needs to be realised in Python function with signature\n\n```python\n\ndef strategy_name(list_df, extra_data, historical_portfolio): \n\n    pass\n\n    return w\n\n```\n\nwhere `list_df` is the list of dataframes that the strategy works with in each period, the sequence of which\n\nshould corresponds to `involved_data_type` in the model initialization step later in this section.\n\n`extra_data` and `historical_portfolio` are optional arguments if the strategy needs extra data\n\nor need to refer to past portfolios to construct a new portfolio for the current period. The function should\n\nreturn a portfolio weight allocation, denoted by `w` here, that **sums up to 1**, in the form of `np.ndarray` or \n\n`pd.Series` or `pd.DataFrame`.\n\n\n\n>Note 1: The function must only return ***ONE*** weight allocation for each period.\n\n> \n\n>Note 2: The sequence of assets in the return of the function should be consistent with the sequence of assets\n\n> in the data on which the strategy is to be tested throughout the whole process. \n\n\n\nOther than the strategy function, the user also needs to prepare the data for the strategy to\n\nbe tested on, as well as the extra data for specific strategies to function, if applicable. \n\n\n\n>Note 1: The library provides several built-in datasets for users' reference. Please use `fetch_data`\n\n> function to gain access to these data\n\n> \n\n>Note 2: If the strategy requires extra data to function, make sure that the index of extra data matches that \n\n> of the data for the strategy to be tested on.\n\n\n\n### 2. Initialization\n\n\n\nAfter preparation step, the user must first build the model using `backtest_model` from the library. It should\n\nfollow the form of:\n\n```python\n\nfrom portfolio_backtester import backtest_model\n\n\n\nstrategy_model=backtest_model(strategy_name, involved_data_type, \n\n                              need_extra_data=False, trace_back=False, name='Unnamed')\n\n```\n\nwhere `strategy_name` and `involved_data_type` are necessary arguments, `need_extra_data` and `trace_back`\n\nand `name` are optional arguments. `strategy_name` is the portfolio construction function defined in step 1.\n\n`involved_data_type` is a *list* of *str* variables that indicate the *types* of dataframes that the \n\nstrategy function uses, the *str* variables are chosen from `{'price','return','ex_return'}`. \n\n\n\nAs mentioned above, the sequence in `involved_data_type` should match that of the `list_df` in the portfolio construction function\n\n`strategy_name`. For example, if `list_df=[price_data, return_data, ex_return_data]` in `strategy_name` from \n\npreparation, then `involved_data_type=['price','return','ex_return']` in `backtest_model` from initialization.\n\n\n\n>Note: The library has some built-in ready-to-be-tested models for users' reference. \n\n\n\nNow it is all set up! The model object is ready to be tested on selected data.\n\n\n\n### 3. Test\n\n\n\nTo test the model on selected data, simply call the function `backtest` on the model object\n\n```python\n\nstrategy_model.backtest(data, freq_data, \n\n                        volume=pd.DataFrame(), data_type='price', rfr=pd.Series(dtype='float'),\n\n                        interval=1, window=60,\n\n                        freq_strategy='D',\n\n                        price_impact=False, tc_a=0, tc_b=0, tc_f=0, c=1, initial_wealth=1E6,\n\n                        extra_data=pd.DataFrame(), price_impact_model='default')\n\n```\n\nalthough only `data` and `freq_data` are necessary arguments, the user needs to make sure\n\nthat \n\n1. `data_type` actually matches the *type* of data that the model is tested on; \n\n2. `freq_strategy` matches the frequency at which the user wants the strategy to rebalance the portfolio. \n\n\n\nFor available choices and specific requirements of each argument, please refer to the full manual for detailed explaination\n\nand description.\n\n\n\n### 4. Results & Analysis\n\n\n\nThere are several outputs and metrics available. The user can simply call these functions using the model object. A few \n\nexamples are shown below:\n\n```python\n\nstrategy_model.general_performance()\n\nstrategy_model.get_net_returns()\n\nstrategy_model.get_ceq(x=1) # x is the risk aversion factor\n\n```\n\n\n\n\n\n## Examples\n\n1. **Naive `1/N` strategy**\n\n\n\nA simple example with naive `1/N` portfolio construction strategy, no *extra data* needed, do not require\n\n*trace back* of historical portfolios:\n\n```python\n\n# 1. Preparation\n\n# prepare the data\n\nimport numpy as np\n\nimport pandas as pd\n\nfrom portfolio_backtester import fetch_data\n\ndata = fetch_data('SPSectors.csv')              # We are using built-in datasets in the library\n\n\n\n# prepare the portfolio construction function\n\ndef __naive_alloc(list_df):\n\n    df = list_df[0]\n\n    n = df.shape[1]\n\n    res = np.ones(n) / n\n\n    return res\n\n\n\n# 2. Initialization\n\nfrom portfolio_backtester import backtest_model\n\n\n\nnaive_alloc = backtest_model(__naive_alloc, ['ex_return'], name='naive allocation portfolio')\n\n\n\n# Note: `naive_alloc` is actually one of the built-in portfolio construction models in the library\n\n# so the user can skip step 1 & 2 by calling in the model from the library directly and go straight to step 3\n\n# The user still needs to prepare the data!\n\nfrom portfolio_backtester import naive_alloc\n\n\n\n# 3. Test\n\n# Most basic version of testing, no change of frequency, price impact not included, no transaction cost, etc.\n\nnaive_alloc.backtest(data.iloc[:,1:],'M',window=120,rfr=data.iloc[:,0],\n\n                     data_type='ex_return',freq_strategy='M')\n\n```\n\nHere are a few showcases of results the user can get:\n\n```doctest\n\nstrategy name                              naive allocation portfolio\n\nPrice impact                                                      OFF\n\nStart date of portfolio                           1991-02-28 00:00:00\n\nEnd date of portfolio                             2002-12-31 00:00:00\n\nFrequency of rebalance                                        1 Month\n\nDuration                                                  143 periods\n\nFinal Portfolio Return (%)                                  422.5701%\n\nPeak Portfolio Return (%)                                   524.5902%\n\nBottom Portfolio Return (%)                                 107.3055%\n\nHistorical Volatiltiy (%)                                     4.1633%\n\nSharpe Ratio                                                   0.1799\n\nSortino Ratio                                                  0.2701\n\nCalmar Ratio                                                   0.0094\n\nMax. Drawdown (%)                                            79.5449%\n\nMax. Drawdown Duration                             3745 days 00:00:00\n\n% of positive-net-excess-return periods                      62.9371%\n\n% of positive-net-return periods                             64.3357%\n\nAverage turnover (%)                                          3.0853%\n\nTotal turnover (%)                                          444.2821%\n\n95% VaR on net-excess returns                                -5.5679%\n\n95% VaR on net returns                                       -5.1337%\n\ndtype: object\n\n\n\n>>> naive_alloc.get_net_returns()\n\nDate\n\n1991-02-28    0.073055\n\n1991-03-28    0.030464\n\n1991-04-30   -0.001455\n\n1991-05-31    0.041645\n\n1991-06-28   -0.044282\n\n                ...   \n\n2002-08-30    0.023282\n\n2002-09-30   -0.112382\n\n2002-10-31    0.080945\n\n2002-11-29    0.080691\n\n2002-12-31   -0.031318\n\nLength: 143, dtype: float64\n\n\n\n>>> naive_alloc.get_ceq(1)\n\n0.006603752164323863\n\n\n\n>>> naive_alloc.get_ceq(np.array([1,2,3]))\n\narray([0.00660375, 0.00574349, 0.00488322])\n\n```\n\n\n\n2. **Fama-French 3-factor strategy**\n\n\n\nThis is a more advanced and sophisticated portfolio construction strategy. It requires *factor data* as *extra\n\ndata*, but does not need to *trace back* historical portfolios.\n\n\n\n```python\n\n# 1. Preperation\n\n# prepare the data\n\nimport numpy as np\n\nimport pandas as pd\n\nfrom portfolio_backtester import fetch_data\n\ndata=fetch_data('SPSectors.csv')\n\n\n\nextra_data=fetch_data('FF3_monthly_192607-202106.csv')     # extra factor data that is also included in the library\n\nstart = '1981-01'\n\nend = '2002-12'\n\nextra_data = extra_data.loc[start:end]\n\nextra_data.index = data.index                      # need to make sure that the index of the two dataframes match\n\n\n\n# prepare the portfolio construction function\n\nfrom sklearn.linear_model import LinearRegression\n\ndef __FF3(list_df, extra_data):\n\n    df = list_df[0]\n\n\n\n    X = extra_data\n\n    y = df\n\n    reg = LinearRegression(fit_intercept=True).fit(X, y)\n\n    beta = reg.coef_\n\n    var_epi = (y - reg.predict(X)).var(axis=0)\n\n    cov = np.dot(np.dot(beta, X.cov()), beta.T) + np.diag(var_epi)\n\n\n\n    in_cov = np.linalg.inv(cov)\n\n    n = df.shape[1]\n\n    w = np.dot(in_cov, np.ones(n))\n\n    w /= w.sum()\n\n    return w\n\n\n\n# 2. Initialization\n\nfrom portfolio_backtester import backtest_model\n\n\n\nFF_3_factor_model = backtest_model(__FF3, ['ex_return'], need_extra_data=True,\n\n                                   name='Fama-French 3-factor model portfolio')\n\n\n\n# Note: this model is also one of the built-in models in the library, user can call it directly\n\n# Again, user still needs to prepare the data\n\nfrom portfolio_backtester import FF_3_factor_model\n\n\n\n# 3. Test\n\n# Add transaction cost into the backtest\n\nFF_3_factor_model.backtest(data.iloc[:, 1:], 'M', window=120, rfr=data.iloc[:, 0],\n\n                           data_type='ex_return', freq_strategy='M',\n\n                           price_impact=False, ptc_buy=0.01 / 200, ptc_sell=0.01 / 100, \n\n                           extra_data=extra_data.iloc[:, :-1])\n\n```\n\nAnd some results are shown below:\n\n```doctest\n\n>>> FF_3_factor_model.general_performance()\n\nstrategy name                              Fama-French 3-factor model portfolio\n\nPrice impact                                                                OFF\n\nStart date of portfolio                                     1991-02-28 00:00:00\n\nEnd date of portfolio                                       2002-12-31 00:00:00\n\nFrequency of rebalance                                                  1 Month\n\nDuration                                                            143 periods\n\nFinal Portfolio Return (%)                                            259.1316%\n\nPeak Portfolio Return (%)                                             354.4271%\n\nBottom Portfolio Return (%)                                           105.9731%\n\nHistorical Volatiltiy (%)                                               3.5768%\n\nSharpe Ratio                                                             0.1065\n\nSortino Ratio                                                            0.1608\n\nCalmar Ratio                                                             0.0054\n\nMax. Drawdown (%)                                                      70.1002%\n\nMax. Drawdown Duration                                       3501 days 00:00:00\n\n% of positive-net-excess-return periods                                58.0420%\n\n% of positive-net-return periods                                       59.4406%\n\nAverage turnover (%)                                                   13.3530%\n\nTotal turnover (%)                                                   1922.8387%\n\n95% VaR on net-excess returns                                          -5.7882%\n\n95% VaR on net returns                                                 -5.3991%\n\ndtype: object\n\n\n\n>>> FF_3_factor_model.get_net_excess_returns()\n\nDate\n\n1991-02-28    0.054931\n\n1991-03-28    0.018295\n\n1991-04-30   -0.020621\n\n1991-05-31    0.010298\n\n1991-06-28   -0.022145\n\n                ...   \n\n2002-08-30    0.025228\n\n2002-09-30   -0.092177\n\n2002-10-31    0.032344\n\n2002-11-29    0.025310\n\n2002-12-31   -0.003465\n\nLength: 143, dtype: float64\n\n```\n\n## Roadmap\n\n\n\n- Add in documents for the description of each data file\n\n\n\nIn the future:\n\n- More performance metrics \n\n- More built-in portfolio construction models\n\n- Add in more price-impact model options\n\n\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n\n\n\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "portfolio,backtest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "portfolio-backtester",
    "package_url": "https://pypi.org/project/portfolio-backtester/",
    "platform": "",
    "project_url": "https://pypi.org/project/portfolio-backtester/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/portfolio-backtester/0.1.0/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scipy",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "universal portfolio backtester",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12198347,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e3431edf5fae2e7a1ad1591144973dc17f0f9a0cc5c0b48207e930ff7aa7ac3",
          "md5": "e9fc42b230e52388f80adea621450533",
          "sha256": "55eda7fcf6a94f84d348437f3a214ef8ecfe63b4681496675fe38c18020dca0b"
        },
        "downloads": -1,
        "filename": "portfolio_backtester-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9fc42b230e52388f80adea621450533",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45800653,
        "upload_time": "2021-12-03T06:13:36",
        "upload_time_iso_8601": "2021-12-03T06:13:36.123396Z",
        "url": "https://files.pythonhosted.org/packages/1e/34/31edf5fae2e7a1ad1591144973dc17f0f9a0cc5c0b48207e930ff7aa7ac3/portfolio_backtester-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "225fdcc3df9943eed11286c73e5f0efb19facfff605acc4db8bcf42da54a69a5",
          "md5": "7af3d35646b7ae91af506ea04d30adab",
          "sha256": "118e498e120dcbb39401b18f77d243553467d4503160761e7bc707a7f5ed0ddf"
        },
        "downloads": -1,
        "filename": "portfolio_backtester-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7af3d35646b7ae91af506ea04d30adab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45522490,
        "upload_time": "2021-12-03T06:14:31",
        "upload_time_iso_8601": "2021-12-03T06:14:31.163238Z",
        "url": "https://files.pythonhosted.org/packages/22/5f/dcc3df9943eed11286c73e5f0efb19facfff605acc4db8bcf42da54a69a5/portfolio_backtester-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e3431edf5fae2e7a1ad1591144973dc17f0f9a0cc5c0b48207e930ff7aa7ac3",
        "md5": "e9fc42b230e52388f80adea621450533",
        "sha256": "55eda7fcf6a94f84d348437f3a214ef8ecfe63b4681496675fe38c18020dca0b"
      },
      "downloads": -1,
      "filename": "portfolio_backtester-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e9fc42b230e52388f80adea621450533",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 45800653,
      "upload_time": "2021-12-03T06:13:36",
      "upload_time_iso_8601": "2021-12-03T06:13:36.123396Z",
      "url": "https://files.pythonhosted.org/packages/1e/34/31edf5fae2e7a1ad1591144973dc17f0f9a0cc5c0b48207e930ff7aa7ac3/portfolio_backtester-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "225fdcc3df9943eed11286c73e5f0efb19facfff605acc4db8bcf42da54a69a5",
        "md5": "7af3d35646b7ae91af506ea04d30adab",
        "sha256": "118e498e120dcbb39401b18f77d243553467d4503160761e7bc707a7f5ed0ddf"
      },
      "downloads": -1,
      "filename": "portfolio_backtester-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7af3d35646b7ae91af506ea04d30adab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45522490,
      "upload_time": "2021-12-03T06:14:31",
      "upload_time_iso_8601": "2021-12-03T06:14:31.163238Z",
      "url": "https://files.pythonhosted.org/packages/22/5f/dcc3df9943eed11286c73e5f0efb19facfff605acc4db8bcf42da54a69a5/portfolio_backtester-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}