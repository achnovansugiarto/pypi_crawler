{
  "info": {
    "author": "Nyggus & Ke Boan",
    "author_email": "nyggus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "easycheck\n=========\n\nThe :code:`easycheck` package offers a lightweight tool for running functionized assertion-like checks within Python code; it also offers functions to be used in testing - particularly in doctests, but also in pytests, for which purpose some of the functions have dedicated aliases. The idea is to use the :code:`easycheck` functions in a similar way as assertions, but with more functionality and with a slightly different aim: When a condition you define is met, nothing happens (in fact, the function returns :code:`None`); if the condition is violated, an exception is raised or a warning is issued. The main differences between :code:`easycheck` functions and assertions are as follows:\n\n* While you should not use assertions in your Python code, you can do so with the :code:`easycheck` functions.\n* While assertions only raise :code:`AssertionError`, you can choose any exception to be raised by easycheck functions.\n* When using :code:`easycheck`, instead of raising an exception, you can issue a warning.\n\nThe main :code:`easycheck` functions (with names starting off with :code:`check_`) are designed in such a way that they can be used as easy-to-understand code that checks whether one or more conditions are met. They can be used instead of :code:`if`-blocks, which are normally used to check conditions and raise exceptions (or issue warnings) if they are not met. So, you can do the following:\n\n.. code-block:: python\n\n    if not isinstance(x, (float, int)):\n        raise TypeError('x must be a number')\n    if x > 10:\n        raise ValueError('Too high value of x')\n\nor you can use :code:`easycheck` for this:\n\n.. code-block:: python\n\n    check_type(x, (float, int), message='x must be a number')\n    check_if(x <= 10, ValueError, 'Too high value of x')\n\nThe :code:`easycheck` approach has two main advantages over this classical approach:\n\n* It saves a little space; not much, since most often you'll end up with one line of code instead of two, but not always, particularly when you provide an exception type to be raised and a long message. \n* Mainly, it increases code simplicity and readability, since both the names of easycheck functions and their arguments are designed in such a way that the reader immediately understands what is being checked.\n\nYou can also issue a warning:\n\n.. code-block:: python\n\n    check_if(x <= 10, Warning, 'For stable functioning of the function, x should not be greater than 10.')\n\nThe package also offers functions dedicated to testing, e.g.,\n\n.. code-block:: python\n\n    assert_type(x, (float, int))\n    assert_if(x <= 10)\n\nThe :code:`message` argument has the default value of :code:`None`, which does the following. If the exception class provided in :code:`handle_with` is built-in (that is, can be found in :code:`dir(builtins)`), no message is provided. But if it is not a built-in exception (or warning) class, then the exception/warning class's docstring is taken as the message. This is a convenient way of providing a  typical message. If you want to customize the message (e.g., depending on the value of a variable), you should use a customized string (e.g., through an f-string). But if you do not want to use any message with a custom exception/warning, simply provide an empty string (:code:`message=''`).\n\n\nInstalling\n----------\n\nInstall and update using pip:\n\n.. code-block:: text\n\n    pip install easycheck\n\nTesting\n-------\n\nThe package is covered with both pytests and doctests. The latter are included in both docstrings of all the functions, but also in `documentation files <https://github.com/nyggus/easycheck/tree/master/docs>`_.\n\nUse in code to raise exceptions\n-------------------------------\n\nHere are several examples of a simple use of basic :code:`easycheck` functions. The most basic usage resembles the following:\n\n.. code-block:: python\n\n    check_if(a < 10)\n\t\nThis simply checks if :code:`a` is smaller than 10; if it is, nothing happens (in fact, :code:`check_if(a < 10)` returns :code:`None`). But if the condition is violated, the function raises :code:`AssertionError`. :code:`AssertionError` is the default exception returned by :code:`check_if()`, but you can change this:\n\n.. code-block:: python\n\n    check_if(a < 10, handle_with=ValueError)\n    # or shorter and equally readable:\n    check_if(a < 10, ValueError)\n\nFor built-in exceptions, like :code:`ValueError`, the default behaviour is to not print any message. For custom exceptions, however, the exception's docstring (`.__doc__`) serves as a message. You can use this when you create custom exceptions:\n\n.. code-block:: python\n\n    class IncorrectNameTypeError(Exception):\n        \"\"\"Argument name must be a string.\"\"\"\n    \n    name = 40\n    check_type(name, IncorrectNameTypeError)\n    Traceback (most recent call last):\n      ...\n    IncorrectNameTypeError: Argument name must be a string.\n\nIf you want to ensure that no message is printed, even for a custom exception, override the default behaviour by passing an empty string :code:`message=''`. You can also add a custom message:\n\n.. code-block:: python\n\n    check_if(a < 10, handle_with=ValueError, message='Too high a')\n    # or shorter and equally readable:\n    check_if(a < 10, ValueError, 'Too high a')\n\nSome other functions have different default errors; for instance, this call\n\n.. code-block:: python\n\n    check_type(a, expected_type=str)\n    # or shorter:\n    check_type(a, str)\n\nwill raise :code:`TypeError` while this\n\n.. code-block:: python\n\n    check_length([1, 2, 3], 1)\n\t\nwill raise :code:`LengthError` (an exception class defined in the :code:`easycheck` module).\n\nHere is a list of :code:`easycheck` functions the module offers, along with their aliases to be used for testing:\n\n* :code:`check_if()`, with the alias of :code:`assert_if()`; it's the most basic :code:`easycheck` function, similar to what you would get using :code:`if`;\n* :code:`check_if_not()`, with the alias of :code:`assert_if_not()`; the opposite of :code:`check_if()`, helpful when you need to assure that a condition is _not_ met;\n* :code:`check_if_isclose()`, with the alias of :code:`assert_if_isclose()`; to compare two floating-point numbers, based on :code:`match.isclose()` (see `this file <https://github.com/nyggus/easycheck/blob/master/docs/compare_floats_doctest.rst>`_);\n* :code:`check_length()`, with the alias of :code:`assert_length()`; to compare length (equal to, smaller than, greater than, and the like);\n* :code:`check_type()`, with the alias of :code:`assert_type()`; to check expected type, similar to :code:`isinstance()`;\n* :code:`check_if_paths_exist()`, with the alias of :code:`assert_paths()`; to compare paths (or just one path) exist;\n* :code:`check_comparison()` (used to compare two items); to compare to objectsm just like you would do using :code:`if obj1 != obj2: raise`\n* :code:`check_all_ifs()`; used to check multiple conditions and return all the checks;\n* :code:`check_argument()`; used to make one or more checks of a function's argument.\n\nYou can also use a :code:`catch_check()` function, if you want to catch an exception or a warning the :code:`easycheck` function you use would raise (see examples `here <https://github.com/nyggus/easycheck/blob/master/docs/catch_exceptions_doctest.rst>`_). Sometimes, however, you will do better using a :code:`try-except` block to catch exceptions (`see examples <https://github.com/nyggus/easycheck/blob/master/docs/use_with_try_doctest.rst>`_).\n\n> Note that some :code:`easycheck` functions are simple wrappers around built-in functions, but their behavior is different, as they have the typical behavior of an :code:`easycheck` function: if a condition is not met, an exception is raised or an issue is raised.\n\n\nUse in code to issue warnings\n-----------------------------\n\nIn order to issue a warning if a condition is violated, simply use a warning class (in the :code:`handle_with` argument) instead of an exception class:\n\n.. code-block:: python\n\n    check_if(2 > 1, Warning, 'Too high a value')\n    check_length([1, 2, 3], 10, Warning, 'Too short list with data')\n\nRemember to always use a message with warnings, in order to make them meaningful. (See more in `use_with_warnings_doctest.rst <https://github.com/nyggus/easycheck/blob/master/docs/use_with_warnings_doctest.rst>`_).\n\n\nOf course, you can use a custom warning:\n\n.. code-block:: python\n\n    class TooSmallSampleSize(Warning):\n        \"\"\"Results for samples size below 100 can be unstable.\"\"\"\n    \n    n = 50\n    check_if(n >= 100, TooSmallSampleSize)\n    ... TooSmallSampleSize: Results for samples size below 100 can be unstable.\n      warnings.warn(message, error)\n\n\nUse in code, an example\n-----------------------\n\nImagine you want to connect to a database; if the connection fails for any reason, you want to read an archived flat file. (We will use some undefined functions whose names will clearly convey what the functions do.)\n\n.. code-block:: python\n\n    from easycheck import check_if, check_if_paths_exist\n    \n    class DataBaseConnectionError(Exception):\n        pass\n    \n    def get_data_from_db(db_details, db_credentials):\n        try:\n            connect_to_db(db_details, db_credentials)\n        except:\n            return False\n        data = get_records_from_db()\n        return data\n\nThe :code:`easycheck` code could look like the following:\n\n.. code-block:: python\n\n    def get_data(db_details, db_credentials):\n        data = get_data_from_db(db_details, db_credentials)\n        check_if(\n            data,\n            handle_with=DataBaseConnectionError,\n            message='Cannot communicate with the database'\n            )\n        return data\n              \nYou can of course handle this exception, for example like here:\n\n.. code-block:: python\n\n    def get_data(db_details, db_credentials, archived_data_file):\n        data = get_data_from_db(db_details, db_credentials)\n        try:\n            check_if(\n                data,\n                handle_with=DataBaseConnectionError,\n                message='Cannot communicate with the database'\n            )\n        except DataBaseConnectionError:\n            check_if_paths_exist(archived_data_file)\n            with open(archived_data_file) as f:\n                data = f.readlines()\n        return data\n    \nOf course, you might use here a dedicated context manager. Sure, you can write it in a shorter way, without :code:`easycheck`, but the flow of information will not be as smooth, resulting in less readability:\n\n.. code-block:: python\n\n    def get_data(db_details, db_credentials, archived_data_file):\n        data = get_data_from_db(db_details, db_credentials)\n        if not data:\n            with open(archived_data_file) as f:\n                data = f.readlines()\n        return data\n\nOf course, the :code:`open()` context manager will itself throw an error, but when you use the :code:`check_if()` function and explicitly define an exception class, you clearly show the reader that you're checking if this file exists and raise a particular exception if it doesn't.\n        \nUse in testing\n--------------\n\nAs mentioned above, most :code:`easycheck` functions have aliases to be used in testing. Of course, you can use :code:`check_if()`, but to align with the common use of assertions, the :code:`easycheck` module offers those aliases so that the reader will immediately see that you're using these functions to test. Consider these examples:\n\n.. code-block:: python\n\n    # Using assertions\n    def test_something():\n        a, b = my_function_1(), my_function_2()\n\n        assert a == 2; \n        assert isinstance(a, int)\n        assert isinstance(b, tuple)\n        assert len(b) == 5\n\t\t\n    # Using easycheck assert-like functions:\n    def test_something():\n        a, b = my_function_1(), my_function_2()\n        \n        assert_if(a == 2)\n        assert_type(a, int)\n        assert_type(b, tuple)\n        assert_length(b, 5)\n\nNote that only the first one will raise :code:`AssertionError` while the others will raise more meaningful errors (:code:`TypeError` and :code:`LengthError`), which may better explain the reasons that the tests did not pass.\n\nYou will find more about using :code:`easycheck` in `use_in_testing_doctest.rst <https://github.com/nyggus/easycheck/blob/master/docs/use_in_testing_doctest.rst>`_.\n\nOther examples\n--------------\n\nYou will find a number of examples in `doctest files <https://github.com/nyggus/easycheck/tree/master/docs/>`_, which also serve as doctests.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nyggus/easycheck",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easycheck",
    "package_url": "https://pypi.org/project/easycheck/",
    "platform": null,
    "project_url": "https://pypi.org/project/easycheck/",
    "project_urls": {
      "Homepage": "https://github.com/nyggus/easycheck"
    },
    "release_url": "https://pypi.org/project/easycheck/0.5.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A tool for simple functionalized assertions in Python",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14844489,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b97f79fcd053587d9623daeb4dbb73ef66e6e346a05bf6fce5527e256a2143e",
          "md5": "6bb27db0942c15d3f35aa7fd089b28f4",
          "sha256": "cbe0fba411675f15a0561fb9faf7144e5bcddcdb7817e0afd427599c2f348059"
        },
        "downloads": -1,
        "filename": "easycheck-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bb27db0942c15d3f35aa7fd089b28f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12811,
        "upload_time": "2021-01-28T03:50:49",
        "upload_time_iso_8601": "2021-01-28T03:50:49.122739Z",
        "url": "https://files.pythonhosted.org/packages/8b/97/f79fcd053587d9623daeb4dbb73ef66e6e346a05bf6fce5527e256a2143e/easycheck-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29158c083755dcbdd2674158457a131e7a225e18fe14798a3bc39660c765714f",
          "md5": "6d3e726034f37c4cb2e09684c985ab14",
          "sha256": "2f67725baef978e835b3a49b3889d14d85ae3d271988e116e0c830e89a8a93a2"
        },
        "downloads": -1,
        "filename": "easycheck-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d3e726034f37c4cb2e09684c985ab14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14934,
        "upload_time": "2021-01-28T03:50:51",
        "upload_time_iso_8601": "2021-01-28T03:50:51.222781Z",
        "url": "https://files.pythonhosted.org/packages/29/15/8c083755dcbdd2674158457a131e7a225e18fe14798a3bc39660c765714f/easycheck-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14b68cbf663fb5fa88fa521cdaf39c89512cdc634e84f0829fce317e1e93d71e",
          "md5": "d56fb52c12f4364d9f1a558c27608ac7",
          "sha256": "9b514a2b3ef5e4e17dce607f81946c4a47c514c6250fa662b7a718f0212d1ca4"
        },
        "downloads": -1,
        "filename": "easycheck-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d56fb52c12f4364d9f1a558c27608ac7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12876,
        "upload_time": "2021-02-08T14:33:40",
        "upload_time_iso_8601": "2021-02-08T14:33:40.326841Z",
        "url": "https://files.pythonhosted.org/packages/14/b6/8cbf663fb5fa88fa521cdaf39c89512cdc634e84f0829fce317e1e93d71e/easycheck-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56f903e68fd214084abc2308a74a3af7515c323e95c30120b698f0b117fe49f6",
          "md5": "14b81c0921a1eee41c5d95137067876a",
          "sha256": "66d9716257719cc60711e2617691e9780854e3ef15682810baaceb8c81b90000"
        },
        "downloads": -1,
        "filename": "easycheck-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "14b81c0921a1eee41c5d95137067876a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15069,
        "upload_time": "2021-02-08T14:33:42",
        "upload_time_iso_8601": "2021-02-08T14:33:42.791361Z",
        "url": "https://files.pythonhosted.org/packages/56/f9/03e68fd214084abc2308a74a3af7515c323e95c30120b698f0b117fe49f6/easycheck-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41eb52181a8f7c3c1a490e6bc0fa20577ec53ce97a9103bfce0ad3cde9b36ff9",
          "md5": "23b7195b330046000365c3b337318e4b",
          "sha256": "2fad1f2ddb45454a1a103f8da9a9f50ab159235c62ec38ac7d8b808b0aaedffe"
        },
        "downloads": -1,
        "filename": "easycheck-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23b7195b330046000365c3b337318e4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12950,
        "upload_time": "2021-02-10T04:36:12",
        "upload_time_iso_8601": "2021-02-10T04:36:12.990732Z",
        "url": "https://files.pythonhosted.org/packages/41/eb/52181a8f7c3c1a490e6bc0fa20577ec53ce97a9103bfce0ad3cde9b36ff9/easycheck-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22752588add22aa09d303e0eb08a2c8a8b5dd69f98f4e8d074a4fba5af71db3a",
          "md5": "70580f067c62d18213a1f5127cc0c0fa",
          "sha256": "eb44083da9bfadd566272da0b487bdd850ff625e75775bde445984cb2447c285"
        },
        "downloads": -1,
        "filename": "easycheck-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "70580f067c62d18213a1f5127cc0c0fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15151,
        "upload_time": "2021-02-10T04:36:16",
        "upload_time_iso_8601": "2021-02-10T04:36:16.519641Z",
        "url": "https://files.pythonhosted.org/packages/22/75/2588add22aa09d303e0eb08a2c8a8b5dd69f98f4e8d074a4fba5af71db3a/easycheck-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b31524f11858d03d7c43472f8d1e1cfd3c8e4cb6c6745b67e062a401909d6b8",
          "md5": "8a18c229b5f0aa66abcdbaf691d4f882",
          "sha256": "3dfcbd3dbf57b136dd8303e6992391328ebc156c6726cebfa0888121df04ee6b"
        },
        "downloads": -1,
        "filename": "easycheck-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a18c229b5f0aa66abcdbaf691d4f882",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12971,
        "upload_time": "2021-05-10T09:05:48",
        "upload_time_iso_8601": "2021-05-10T09:05:48.139487Z",
        "url": "https://files.pythonhosted.org/packages/9b/31/524f11858d03d7c43472f8d1e1cfd3c8e4cb6c6745b67e062a401909d6b8/easycheck-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "975ac282ae390dbb737db661e901da2a3c100a50d7130bb6695730af04c84fa8",
          "md5": "cc98dac793292c827a51726fbc6e07cc",
          "sha256": "6b3ee4ee0168d58f030874d75928437f15eed124355755b2cf7a9ad3393bdba5"
        },
        "downloads": -1,
        "filename": "easycheck-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cc98dac793292c827a51726fbc6e07cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15186,
        "upload_time": "2021-05-10T09:05:53",
        "upload_time_iso_8601": "2021-05-10T09:05:53.165432Z",
        "url": "https://files.pythonhosted.org/packages/97/5a/c282ae390dbb737db661e901da2a3c100a50d7130bb6695730af04c84fa8/easycheck-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09526ad013562358a7d5a2e3130662cc06bb033921a2bdf46dcccde9ada0d028",
          "md5": "aa97bb53b5e8f0a7d3a3ac994a73074b",
          "sha256": "3c19b9e149e25f9edcf5e1ee6895f701fc2c0f60641daa6c58e539652eeca50c"
        },
        "downloads": -1,
        "filename": "easycheck-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa97bb53b5e8f0a7d3a3ac994a73074b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13030,
        "upload_time": "2021-06-08T12:11:26",
        "upload_time_iso_8601": "2021-06-08T12:11:26.830147Z",
        "url": "https://files.pythonhosted.org/packages/09/52/6ad013562358a7d5a2e3130662cc06bb033921a2bdf46dcccde9ada0d028/easycheck-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae9e3d6bde44c7fb9f1dae0c82fce384f3fa2d68e4fcb290384405f60c7f3838",
          "md5": "951efe2759d56415fc16f818230b6b16",
          "sha256": "861f3fd7b1603f82a3b0034dcd7216eb438e77655b16dfeb4fb8a0838fc7b537"
        },
        "downloads": -1,
        "filename": "easycheck-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "951efe2759d56415fc16f818230b6b16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13094,
        "upload_time": "2022-04-12T06:26:50",
        "upload_time_iso_8601": "2022-04-12T06:26:50.461774Z",
        "url": "https://files.pythonhosted.org/packages/ae/9e/3d6bde44c7fb9f1dae0c82fce384f3fa2d68e4fcb290384405f60c7f3838/easycheck-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05a354f5fcab2fc540274c85eab7f2fcfbf3d19f4a23d9bd0c196d8d1a196d3e",
          "md5": "c78009af7a9918fc49fb23e5afc11a94",
          "sha256": "a89a994c52aeec7c1569b8268d346ae6b69d6f2afb88d5a2d016781045f68c6c"
        },
        "downloads": -1,
        "filename": "easycheck-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c78009af7a9918fc49fb23e5afc11a94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15359,
        "upload_time": "2022-04-12T06:26:56",
        "upload_time_iso_8601": "2022-04-12T06:26:56.959638Z",
        "url": "https://files.pythonhosted.org/packages/05/a3/54f5fcab2fc540274c85eab7f2fcfbf3d19f4a23d9bd0c196d8d1a196d3e/easycheck-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "520315c8c7f79c772a435ced18a529aeea990661cc1fe884d69ff57ca41df3c9",
          "md5": "6b26907a12ca23a823b4cb883f45469e",
          "sha256": "1442c2327ec3926beb438eed5f4cd996c636ce308417b654f9b9e58bf2b3573a"
        },
        "downloads": -1,
        "filename": "easycheck-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b26907a12ca23a823b4cb883f45469e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13238,
        "upload_time": "2022-05-26T09:26:35",
        "upload_time_iso_8601": "2022-05-26T09:26:35.007145Z",
        "url": "https://files.pythonhosted.org/packages/52/03/15c8c7f79c772a435ced18a529aeea990661cc1fe884d69ff57ca41df3c9/easycheck-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6504a44481201f3da67dc18070d8c44458c64c929001974a25e78e5e34b738bc",
          "md5": "16e22436564cb49f2b171a70c840c980",
          "sha256": "359cc61601ab8275f3cebedf0e5502b7d7afeab5ce16f0e4b008f59780f944a4"
        },
        "downloads": -1,
        "filename": "easycheck-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "16e22436564cb49f2b171a70c840c980",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15493,
        "upload_time": "2022-05-26T09:26:36",
        "upload_time_iso_8601": "2022-05-26T09:26:36.868368Z",
        "url": "https://files.pythonhosted.org/packages/65/04/a44481201f3da67dc18070d8c44458c64c929001974a25e78e5e34b738bc/easycheck-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a53d1086dddff186ea688a24515173c70cef01ee48ec7338251818d8cef1fa8f",
          "md5": "cef318e53b8ca99b91dd0c8195093824",
          "sha256": "1480c0e158255217e4013c2af51bc3b3d1b561194656842d9d06eb88d4710e05"
        },
        "downloads": -1,
        "filename": "easycheck-0.5.0.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "cef318e53b8ca99b91dd0c8195093824",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23763,
        "upload_time": "2022-08-23T04:59:31",
        "upload_time_iso_8601": "2022-08-23T04:59:31.254630Z",
        "url": "https://files.pythonhosted.org/packages/a5/3d/1086dddff186ea688a24515173c70cef01ee48ec7338251818d8cef1fa8f/easycheck-0.5.0.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8d7a711e6c2cc41821da6cf379790e65d71623dfdfa5e425771212483b5e508",
          "md5": "210e1f1964b830271e95ecdc8e238eb6",
          "sha256": "62c0702a18f926088c949cacfe50cbbae2a596fde31431c96853cedc1f7756da"
        },
        "downloads": -1,
        "filename": "easycheck-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "210e1f1964b830271e95ecdc8e238eb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14846,
        "upload_time": "2022-08-23T05:18:55",
        "upload_time_iso_8601": "2022-08-23T05:18:55.314106Z",
        "url": "https://files.pythonhosted.org/packages/b8/d7/a711e6c2cc41821da6cf379790e65d71623dfdfa5e425771212483b5e508/easycheck-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a53d1086dddff186ea688a24515173c70cef01ee48ec7338251818d8cef1fa8f",
        "md5": "cef318e53b8ca99b91dd0c8195093824",
        "sha256": "1480c0e158255217e4013c2af51bc3b3d1b561194656842d9d06eb88d4710e05"
      },
      "downloads": -1,
      "filename": "easycheck-0.5.0.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "cef318e53b8ca99b91dd0c8195093824",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 23763,
      "upload_time": "2022-08-23T04:59:31",
      "upload_time_iso_8601": "2022-08-23T04:59:31.254630Z",
      "url": "https://files.pythonhosted.org/packages/a5/3d/1086dddff186ea688a24515173c70cef01ee48ec7338251818d8cef1fa8f/easycheck-0.5.0.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8d7a711e6c2cc41821da6cf379790e65d71623dfdfa5e425771212483b5e508",
        "md5": "210e1f1964b830271e95ecdc8e238eb6",
        "sha256": "62c0702a18f926088c949cacfe50cbbae2a596fde31431c96853cedc1f7756da"
      },
      "downloads": -1,
      "filename": "easycheck-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "210e1f1964b830271e95ecdc8e238eb6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 14846,
      "upload_time": "2022-08-23T05:18:55",
      "upload_time_iso_8601": "2022-08-23T05:18:55.314106Z",
      "url": "https://files.pythonhosted.org/packages/b8/d7/a711e6c2cc41821da6cf379790e65d71623dfdfa5e425771212483b5e508/easycheck-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}