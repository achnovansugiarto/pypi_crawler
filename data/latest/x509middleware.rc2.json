{
  "info": {
    "author": "Florian Wagner",
    "author_email": "florian@wagner-flo.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# x509middleware: Working with (client) certificates\n\nThis Python package contains middleware classes for working with\ncertificates. Currently it only contains support for extracting client\ncertificates from the ASGI scope and from headers set by a reverse\nproxy.\n\nNote: The package is rather small but solves an immediate need for some\nprojectes of mine while possibly being generally helpful to other\npeople. As I chose a rather generic package name, patches or pull\nrequests with support for other protocols than ASGI as well as\nadditional functionallty are very welcome.\n\n## Installation\n\n```shell\n$ pip install x509middleware\n```\n\n## Requirements\n\n* Python v3.3+ (only 3.6+ is being\n  [tested](https://github.com/wagnerflo/x509middleware/actions?query=workflow%3Aintegration_tests)).\n* The [asn1crypto](https://pypi.org/project/asn1crypto/) package.\n\n## Contents\n\n### x509middleware.asgi.ClientCertificateMiddleware\n\nThis middlware class will try to find and parse a client certificate for\na ASGI http or websocket request. It supports the proposed\n[tls extension](https://github.com/django/asgiref/pull/192) to the ASGI\nprotocol as well as pulling the certificate from a header supplied by a\nreverse proxy your app is deployed behind.\n\nIt will set the key `scope['client_cert']` to a\n*asn1crypto.x509.Certificate* object or *None* if it can't find or parse\na certificate.\n\n#### Parameters\n* **app** *(async callable)* – ...\n* **use_tls_extension** *(bool=True)* – ...\n* **proxy_header** *(str=None)* – Name of the header to try parsing as a\n  client certificate or *None* to disable proxy header support. The\n  header value can be line-folded, URL/percent-encoded or base64 encoded\n  as well as in PEM or DER format. The correct way to decode will be\n  detected automatically.\n\n#### Configuring your reverse proxy\nYou will need to choose a header name when configuring your reverse proxy\nas well as the middlware class. Commonly used names are:\n\n* `CLIENT-CERT` – [IETF Draft](https://tools.ietf.org/html/draft-bdc-something-something-certificate-04#section-2).\n* `X-SSL-CLIENT-CERT`\n* `X-CLIENT-CERT`\n* `X-CLIENT-CERTIFICATE`\n* `X-CLIENT-CRT`\n* `X-SSL-CERT`\n* `SSLClientCertb64` – F5 products seem to use or suggest this.\n\n##### Apache / mod_proxy & mod_headers\n```apache\nProxyPass / http://127.0.0.1:8000/\nRequestHeader unset CLIENT-CERT\nRequestHeader set   CLIENT-CERT \"%{SSL_CLIENT_CERT}s\"\n```\n##### NGINX\n```nginx\nlocation / {\n    proxy_pass http://127.0.0.1:8000/;\n    proxy_set_header CLIENT-CERT $ssl_client_escaped_cert;\n}\n```\n##### HAProxy\nSupport for passing the certificate as a DER blob is available starting\nversion 1.6-dev1. Since DER is a binary format this needs to be base64\nencoded.\n```\nbackend back\n  mode http\n  server app 127.0.0.1:8000\n  http-request set-header CLIENT-CERT %[ssl_c_der,base64]\n```\n\n#### Using it in Starlette\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette.config import Config\nfrom starlette.middleware import Middleware\nfrom starlette.responses import Response\nfrom starlette.routing import Route\nfrom x509middleware.asgi import ClientCertificateMiddleware\n\nasync def hello_common_name(request):\n    client_cert = request.scope.get('client_cert')\n    if client_cert:\n        cn = client_cert.subject.native['common_name']\n    else:\n        cn = 'unknown'\n    return Response(f'Hello, {cn}!', media_type='text/plain')\n\nconfig = Config('.env')\napp = Starlette(\n    routes=[ Route('/', hello_common_name) ],\n    middleware=[\n        Middleware(\n            ClientCertificateMiddleware,\n            proxy_header=config('CLIENT_CERT_HEADER', default=None)\n        )\n    ]\n)\n```\n\n#### Using it directly\n\n```python\nfrom os import environ\nfrom x509middleware.asgi import ClientCertificateMiddleware\n\nasync def hello_common_name(scope, receive, send):\n    client_cert = scope.get('client_cert')\n    if client_cert:\n        cn = client_cert.subject.native['common_name']\n    else:\n        cn = 'unknown'\n    await send({\n        'type': 'http.response.start',\n        'status': 200,\n        'headers': [\n            (b'content-type', b'text/plain; charset=utf-8'),\n        ]\n    })\n    await send({\n        'type': 'http.response.body',\n        'body': f'Hello, {cn}!'.encode('utf8'),\n    })\n\napp = ClientCertificateMiddleware(\n    hello_common_name,\n    proxy_header=environ.get('CLIENT_CERT_HEADER'),\n)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wagnerflo/x509middleware",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "x509middleware",
    "package_url": "https://pypi.org/project/x509middleware/",
    "platform": "",
    "project_url": "https://pypi.org/project/x509middleware/",
    "project_urls": {
      "Homepage": "https://github.com/wagnerflo/x509middleware"
    },
    "release_url": "https://pypi.org/project/x509middleware/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.3",
    "summary": "Python middleware for working with (client) certificates.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8953856,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b4a0ed32fb95708e36a42afd53983b81ed2b590b292ce7789c3b654ef0539d4",
          "md5": "3f22668a69a975a05f63eba67f17ed59",
          "sha256": "403ad0cbfda2d81866748212acd43d0850b9b6704eab31943fb88aaf1adc404b"
        },
        "downloads": -1,
        "filename": "x509middleware-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f22668a69a975a05f63eba67f17ed59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3",
        "size": 8457,
        "upload_time": "2020-12-20T18:33:03",
        "upload_time_iso_8601": "2020-12-20T18:33:03.105358Z",
        "url": "https://files.pythonhosted.org/packages/3b/4a/0ed32fb95708e36a42afd53983b81ed2b590b292ce7789c3b654ef0539d4/x509middleware-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4da74c26596ec8f5be758838e54878764be2c45ec340a75663b13297d36c1d5",
          "md5": "1540a4bd93c2b63051627c78460ab98d",
          "sha256": "84d9f687665d3c69e8db1f9f001a0a2e05fdd14fdcbf6a5d2ff701a53a624e7d"
        },
        "downloads": -1,
        "filename": "x509middleware-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1540a4bd93c2b63051627c78460ab98d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3",
        "size": 8491,
        "upload_time": "2020-12-21T18:29:30",
        "upload_time_iso_8601": "2020-12-21T18:29:30.298320Z",
        "url": "https://files.pythonhosted.org/packages/a4/da/74c26596ec8f5be758838e54878764be2c45ec340a75663b13297d36c1d5/x509middleware-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4da74c26596ec8f5be758838e54878764be2c45ec340a75663b13297d36c1d5",
        "md5": "1540a4bd93c2b63051627c78460ab98d",
        "sha256": "84d9f687665d3c69e8db1f9f001a0a2e05fdd14fdcbf6a5d2ff701a53a624e7d"
      },
      "downloads": -1,
      "filename": "x509middleware-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1540a4bd93c2b63051627c78460ab98d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.3",
      "size": 8491,
      "upload_time": "2020-12-21T18:29:30",
      "upload_time_iso_8601": "2020-12-21T18:29:30.298320Z",
      "url": "https://files.pythonhosted.org/packages/a4/da/74c26596ec8f5be758838e54878764be2c45ec340a75663b13297d36c1d5/x509middleware-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}