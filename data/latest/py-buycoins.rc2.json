{
  "info": {
    "author": "Paul <paulcurious7@gmail.com>, Emmanuel Bashorun <bashorun.emma@gmail.com>",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Buycoins-SDK\nPython client for Buycoins Africa's API\n\n## Getting started\nInstallation via Pip:\n\n```bash\n$ pip install py-buycoins\n```\n\n# Usage\npy-buycoins provides a suite of utility classes with methods that automatically generate graphql queries on behalf of the user, with specifications based off input arguments. With these classes, the generated queries can be introspected before being sent. py-buycoins also features a client class which executes the queries to the Buycoins API, over HTTP.\n\n\n## Authorization\nIn order to use execute queries you must instantiate the client class with our access keys from the buycoins account. You'll need to provision the class with the \\[PUBLIC_KEY\\] and \\[SECRET_KEY\\] as follows:\n\n```python\nfrom py_buycoins.APIClient import BuycoinsClient\nimport os\n\nclient = BuycoinsClient(\n    public_key=os.getenv('PUB_KEY'),\n    secret_key=os.getenv('SECRET_KEY')\n)\n\n```\n\nUsually these keys are stored as environment variables, with the aid of a `.env` file, it's probably in your best interest to do so.\n\n\n## Basic Usage [Buying crypto]\nAccording the official documentation on Buycoins [here](https://developers.buycoins.africa/), in order to buy crypto we must fetch an active price ID, first using the `getPrices`. The client class also features some generic helper methods such as `get_active_price_id`, which can be used to fetch price IDs for the sake of orders to the API, instead of having to call the query generator classes. The query generator remains however. Once we have that ID, we can then use that to send a query via the `buy` query. We can do this using the BuyCoins class (query generator) as follows:\n\n```python\nfrom orders import BuyCoins\n\n# fetches active price id for bitcoin\nprice_id = client.get_active_price_id(cryptocurrency='bitcoin') \n\n# generate query\nbuy = BuyCoins(\n    cryptocurrency='bitcoin',\n    coin_amount=0.02,\n    price = price_id\n)\norder = buy.from_buycoins(response_fields=['id', 'cryptocurrency', 'status']) # generates query string\n\n# execute query\nresp = client.execute(query=order)\n\n# OR\n\nresp = buy.execute(client=client) # returns all response_fields from API by default\n```\nIf you need to know what kind of fields are returned by the BuyCoins API, check the official docs [here](https://developers.buycoins.africa/).\n\n\n### More Examples\n#### Sending Crypto\nTo send crypto to an on-chain address all we need to do is call the `send` method from the `Send` utility class. We can also call `get_network_fee` to see how much we might be charged for the transfer.\n\n```python\nfrom sending import Send\n\n_send = Send(\n    address=\"1MmyYvSEYLCPm45Ps6vQin1heGBv3UpNbf\",\n    cryptocurrecny=\"bitcoin\",\n    amount=0.03\n)\n\n# generates query string\norder = _send.send(respone_fields=['id','fee', 'amount','status'])\n\n# sends request via the client object\nclient.execute(order)\n\n# OR\n\n# returns all response_fields from API by default\n_send.execute(client=client)\n\n```\n\n### Making Custom requests \npy-buycoins also features a generic mutation/query generator that allows you generate your own queries from scratch. In the event that the utility classes, we provide don't meet your requirements, or the BuyCoins API is updated and the current utility classes haven't been updated to reflect the change; the `Mutation` class allows you create custom mutations, as per your specification.\n\n```python\nfrom gcore.mutations import Mutation\n\ncustom_mutation = Mutation(name=\"myMutation\") # instantiate class with proposed name of mutation\n\n# generate query string\nmutation_string = custom_mutation.Mutate(\n    fields=[('cryptocurrency','bitcoin'),('status','complete')],\n    response_fields=['id','cryptocurrency','status']\n)\n\nclient.execute(query=mutation_string)\n```\n\nA similar thing can be done for queries as with mutations\n\n```python\nfrom gcore.queries import Query\n\ncustom_query = Query(name=\"myQuery\") # instantiate class with proposed name of query\n`\n# generate query string\nquery_string = custom_query.queryObject(\n    response_fields=['id','cryptocurrency','price'] # example response fields\n)\n\n# OR if the query has query parameters\n\nquery_string = custom.query.queryObject(\n    fields=[('id',1]),\n    response_fields=['id','cryptocurrency','price']\n)\n```\n\n## Upcoming Updates in V0.2.0\n\n- Optional response_fields in generating query strings: static response_fields returned if response_fields not specified by default\n\n- Extension of test modules and error handling modules.\n\n- Extra helper methods available in client class.\n\n### Note For Contributor\n\n```requirements.txt``` is for development purposes only as regards setting up your development environment, not used in the build process of the library. Dependencies are (or will be) specified in setup.py\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Bashorun97/BuyCoins-Python-SDK",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-buycoins",
    "package_url": "https://pypi.org/project/py-buycoins/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-buycoins/",
    "project_urls": {
      "Homepage": "https://github.com/Bashorun97/BuyCoins-Python-SDK"
    },
    "release_url": "https://pypi.org/project/py-buycoins/0.1.1/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3",
    "summary": "Python client library for BuyCoins Africa API",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14443073,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1748d511fe461e4ac4cb80551191b009f418f994eb1d7f4c60e5b9654aa7798",
          "md5": "3ff3138b4ee16fded0e981964ecb1c5e",
          "sha256": "fc908b9fb3a44190dcb682fa1f42b6ae4d57b368e7e69307a2115ea579de182f"
        },
        "downloads": -1,
        "filename": "py_buycoins-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ff3138b4ee16fded0e981964ecb1c5e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 12253,
        "upload_time": "2021-02-16T13:22:57",
        "upload_time_iso_8601": "2021-02-16T13:22:57.006850Z",
        "url": "https://files.pythonhosted.org/packages/e1/74/8d511fe461e4ac4cb80551191b009f418f994eb1d7f4c60e5b9654aa7798/py_buycoins-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0df175709110f0b0ef0b0e711ea00950614ad46fee3125d139be5f6f1f77a1c9",
          "md5": "6d9459f6eb25a21bc9fdf1c19b01b96b",
          "sha256": "88962a3e511650a6e37bc79dc2a6fdfba56602cf57e5624f361e24687c5562d4"
        },
        "downloads": -1,
        "filename": "py-buycoins-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d9459f6eb25a21bc9fdf1c19b01b96b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 10725,
        "upload_time": "2021-02-16T13:22:58",
        "upload_time_iso_8601": "2021-02-16T13:22:58.878793Z",
        "url": "https://files.pythonhosted.org/packages/0d/f1/75709110f0b0ef0b0e711ea00950614ad46fee3125d139be5f6f1f77a1c9/py-buycoins-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "184870864c02e03b5fc96c067120f65b7264cd4bcd7eb857dea572b77284f0f1",
          "md5": "5e8f6218f2cad586ec587a87f7387e8c",
          "sha256": "eed8e53fc80e271ca1c1ea71bebfc812e23a2989deb84dfc65b7586ee9d32502"
        },
        "downloads": -1,
        "filename": "py_buycoins-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e8f6218f2cad586ec587a87f7387e8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 12355,
        "upload_time": "2022-07-15T06:32:24",
        "upload_time_iso_8601": "2022-07-15T06:32:24.341631Z",
        "url": "https://files.pythonhosted.org/packages/18/48/70864c02e03b5fc96c067120f65b7264cd4bcd7eb857dea572b77284f0f1/py_buycoins-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "184870864c02e03b5fc96c067120f65b7264cd4bcd7eb857dea572b77284f0f1",
        "md5": "5e8f6218f2cad586ec587a87f7387e8c",
        "sha256": "eed8e53fc80e271ca1c1ea71bebfc812e23a2989deb84dfc65b7586ee9d32502"
      },
      "downloads": -1,
      "filename": "py_buycoins-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5e8f6218f2cad586ec587a87f7387e8c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 12355,
      "upload_time": "2022-07-15T06:32:24",
      "upload_time_iso_8601": "2022-07-15T06:32:24.341631Z",
      "url": "https://files.pythonhosted.org/packages/18/48/70864c02e03b5fc96c067120f65b7264cd4bcd7eb857dea572b77284f0f1/py_buycoins-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}