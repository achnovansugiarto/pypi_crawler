{
  "info": {
    "author": "kiorky",
    "author_email": "kiorky@cryptelium.net",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Plone",
      "Framework :: Plone :: 4.0",
      "Framework :: Plone :: 4.1",
      "Framework :: Plone :: 4.2",
      "Programming Language :: Python",
      "Topic :: Software Development"
    ],
    "description": "==============================\nIntroduction\n==============================\n\n.. contents::\n\n\n.. image:: https://secure.travis-ci.org/collective/collective.z3cform.chosen.png\n    :target: http://travis-ci.org/collective/collective.z3cform.chosen\n\nCredits\n========\nCompanies\n---------\n|makinacom|_\n\n  * `Planet Makina Corpus <http://www.makina-corpus.org>`_\n  * `Contact us <mailto:python@makina-corpus.org>`_\n\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\n.. _makinacom:  http://www.makina-corpus.com\n\nAuthors\n------------\n\n- kiorky  <kiorky@cryptelium.net>\n\nContributors\n-----------------\n\nDescription\n=============\nThis package contains 4 widgets for z3cform using the `chosen <http://harvesthq.github.com/chosen/>`_ and `ajaxchosen <https://github.com/kiorky/ajax-chosen>`_ libraries.\n\n - A single valued widget for chosen\n - A multi valued widget for chosen\n - A single valued widget for ajaxchosen\n - A multi valued widget for ajaxchosen\n\n\nRepository : `github <https://github.com/kiorky/collective.z3cform.chosen>`_\n\n\n\n\nChosen widget\n===================\n\ncollective.chosen.widget provides an autocomplete widget based on the\njQuery Autocomplete widget.\n\n    >>> from collective.z3cform.chosen import AjaxChosenFieldWidget\n    >>> from collective.z3cform.chosen import AjaxChosenMultiFieldWidget\n    >>> from collective.z3cform.chosen import ChosenFieldWidget\n    >>> from collective.z3cform.chosen import ChosenMultiFieldWidget\n\nFirst, we need a vocabulary to search. This is shamelessly stolen from\nz3c.formwidget.query, which we extend.\n\n\n    >>> from zope.interface import implements\n    >>> from z3c.formwidget.query.interfaces import IQuerySource\n    >>> from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm\n\n    >>> class ItalianCities(object):\n    ...     implements(IQuerySource)\n    ...\n    ...     vocabulary = SimpleVocabulary((\n    ...         SimpleTerm(u'bologna',  'bologna', u'Bologna'),\n    ...         SimpleTerm(u'palermo',  'palermo', u'Palermo'),\n    ...         SimpleTerm(u'sorrento', 'sorrento', u'Sorrento'),\n    ...         SimpleTerm(u'torino', 'torino', u'Torino')))\n    ...\n    ...     def __init__(self, context):\n    ...         self.context = context\n    ...\n    ...     __contains__ = vocabulary.__contains__\n    ...     __iter__ = vocabulary.__iter__\n    ...     getTerm = vocabulary.getTerm\n    ...     getTermByToken = vocabulary.getTermByToken\n    ...\n    ...     def search(self, query_string):\n    ...         return [v\n    ...                 for v in self\n    ...          if query_string.lower() in v.value.lower()]\n\n    >>> from zope.schema.interfaces import IContextSourceBinder\n\n    >>> class ItalianCitiesSourceBinder(object):\n    ...     implements(IContextSourceBinder)\n    ...\n    ...     def __call__(self, context):\n    ...         return ItalianCities(context)\n\nThen, we will set up a simple test form and context.\n\n    >>> from zope.interface import alsoProvides\n    >>> from OFS.SimpleItem import SimpleItem\n    >>> from Testing.makerequest import makerequest\n    >>> from zope.annotation.interfaces import IAttributeAnnotatable\n    >>> from z3c.form.interfaces import IFormLayer\n\n    >>> def make_request(path, form={}):\n    ...     app = SimpleItem('')\n    ...     request = makerequest(app).REQUEST\n    ...     request.form.update(form)\n    ...     alsoProvides(request, IFormLayer)\n    ...     alsoProvides(request, IAttributeAnnotatable)\n    ...     request._script = path.split('/')\n    ...     request._steps = []\n    ...     request._resetURLS()\n    ...     return request\n\n    >>> from zope.interface import Interface\n    >>> from zope import schema\n    >>> from z3c.form import form, field, button\n    >>> from plone.z3cform.layout import wrap_form\n\n    >>> class ICities(Interface):\n    ...     afavourite_city = schema.Choice(title=u\"Favourite city\",\n    ...                                    source=ItalianCitiesSourceBinder(), required=False)\n    ...     avisited_cities = schema.List(title=u\"Visited cities\",\n    ...                                  value_type=schema.Choice(title=u\"Selection\",\n    ...                                                           source=ItalianCitiesSourceBinder()))\n    ...     favourite_city = schema.Choice(title=u\"Favourite city\",\n    ...                                    source=ItalianCitiesSourceBinder())\n    ...     visited_cities = schema.List(title=u\"Visited cities\",\n    ...                                  value_type=schema.Choice(title=u\"Selection\",\n    ...                                                           source=ItalianCitiesSourceBinder()))\n\n    >>> from z3c.form.interfaces import IFieldsForm\n    >>> from zope.interface import implements\n    >>> class CitiesForm(form.Form):\n    ...     implements(ICities)\n    ...     fields = field.Fields(ICities)\n    ...     fields['afavourite_city'].widgetFactory = AjaxChosenFieldWidget\n    ...     fields['avisited_cities'].widgetFactory = AjaxChosenMultiFieldWidget\n    ...     fields['favourite_city'].widgetFactory = ChosenFieldWidget\n    ...     fields['visited_cities'].widgetFactory = ChosenMultiFieldWidget\n    ...\n    ...     @button.buttonAndHandler(u'Apply')\n    ...     def handleApply(self, action):\n    ...         data, errors = self.extractData()\n    ...         print \"Submitted data:\", data\n\n    >>> form_view = wrap_form(CitiesForm)\n\n    >>> from zope.component import provideAdapter\n    >>> from zope.publisher.interfaces.browser import IBrowserRequest\n    >>> from zope.interface import Interface\n\n    >>> provideAdapter(adapts=(ICities, IBrowserRequest),\n    ...                provides=Interface,\n    ...                factory=form_view,\n    ...                name=u\"cities-form\")\n\n    >>> from OFS.SimpleItem import SimpleItem\n    >>> class Bar(SimpleItem):\n    ...     implements(ICities)\n    ...\n    ...     def __init__(self, id):\n    ...         self.id = id\n    ...         self.favourite_city = None\n    ...         self.visited_cities = []\n    ...         self.afavourite_city = None\n    ...         self.avisited_cities = []\n    ...     def absolute_url(self):\n    ...         return 'http://foo/bar'\n\nLet us now look up the form and attempt to render the widget.\n\n    >>> from zope.component import getMultiAdapter\n    >>> context = Bar('bar')\n\nSimulates traversal:\n\n    >>> request = make_request('bar/@@cities-form')\n    >>> from Testing.makerequest import makerequest\n    >>> context = makerequest(context)\n    >>> form_view = getMultiAdapter((context, request), name=u\"cities-form\")\n    >>> form_view.__name__ = 'cities-form'\n\nSimulates partial rendering:\n\n    >>> form = form_view.form_instance\n    >>> form.__name__ = 'cities-form'\n    >>> form.update()\n\n    >>> print form.widgets['favourite_city'].render().replace(\"...\", \"\") # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF\n    <BLANKLINE>\n    <script type=\"text/javascript\">    (function($) {\n            $().ready(function() {\n                $('#form-widgets-favourite_city-select').data('klass','chosen-selection-widget required choice-field').data('title','None');\n                $('#form-widgets-favourite_city-select').chosen({\n                    allow_single_deselect: false,\n                    no_results_text: 'No results found',\n                    width: '280px'\n                });\n    <BLANKLINE>\n                $('#formfield-form-widgets-favourite_city').find('.chzn-container, .chzn-results, .chzn-drop').css({'min-width': '180px'});\n            });\n        })(jQuery);\n        </script>\n    <div id=\"form-widgets-favourite_city-chosen\" class=\"chosen-selection-widget required choice-field\">\n      <select data-placeholder=\"Select a value\" id=\"form-widgets-favourite_city-select\" name=\"form.widgets.favourite_city:list\" onselect=\"\" style=\"\" >\n    <BLANKLINE>\n          <option id=\"form-widgets-favourite_city-novalue\" value=\"(nothing)\" selected=\"selected\">Select a value</option>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n          <option id=\"form-widgets-favourite_city-0\" value=\"bologna\">Bologna</option>\n    <BLANKLINE>\n    <BLANKLINE>\n          <option id=\"form-widgets-favourite_city-1\" value=\"palermo\">Palermo</option>\n    <BLANKLINE>\n    <BLANKLINE>\n          <option id=\"form-widgets-favourite_city-2\" value=\"sorrento\">Sorrento</option>\n    <BLANKLINE>\n    <BLANKLINE>\n          <option id=\"form-widgets-favourite_city-3\" value=\"torino\">Torino</option>\n    <BLANKLINE>\n      </select>\n      <input name=\"form.widgets.favourite_city-empty-marker\" type=\"hidden\" value=\"1\" />\n    </div>\n    <BLANKLINE>\n\nWe can see that the rendered JavaScript is expecting to call a view for ajax widgets\nlike this:\n\n    >>> widget = form.widgets['afavourite_city']\n    >>> context.REQUEST._script = 'bar/@@cities-form/++widget++form.widgets.avisited_cities/@@chosen-autocomplete-search'.split('/')\n    >>> context.REQUEST._resetURLS()\n    >>> context.REQUEST.form['term'] = 'or'\n    >>> search_view = getMultiAdapter((widget, context.REQUEST), name=u'chosen-autocomplete-search')\n\nThe results are a json tuple list of tokens:\n\n    >>> print search_view()\n    [[\"sorrento\",\"Sorrento\"],[\"torino\",\"Torino\"]]\n\nAt first we didnt set anything in the request, we are missing fields\n\n    >>> form.update()\n    >>> data, errors = form.extractData()\n    >>> len(errors)\n    3\n    >>> form.request.form.update({\n    ...  \"form.buttons.apply\" : \"Apply\",\n    ...  \"form.widgets.visited_cities\" : [\"palermo\", \"bologna\"],\n    ...  \"form.widgets.avisited_cities\" : [\"palermo\", \"bologna\"],\n    ...  \"form.widgets.afavourite_city\" :\"bologna\",\n    ...  \"form.widgets.favourite_city\" : \"palermo\",\n    ... })\n    >>> form.update() # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    Submitted data:...\n    >>> data, errors = form.extractData()\n    >>> items = data.items()\n    >>> items.sort(key=lambda x:x[0])\n    >>> pprint(items)\n    [('afavourite_city', u'bologna'),\n     ('avisited_cities', [u'palermo', u'bologna']),\n     ('favourite_city', u'palermo'),\n     ('visited_cities', [u'palermo', u'bologna'])]\n\n\n\nOur values are marked as selected\n\n    >>> results = form.render().replace('...', '')\n    >>> False not in [\n    ... (it in results)\n    ... for it in ['id=\"form-widgets-visited_cities-0\" value=\"bologna\" selected=\"selected\">Bologna',\n    ...            'id=\"form-widgets-visited_cities-1\" value=\"palermo\" selected=\"selected\">Palermo']]\n    True\n\nOur widget also handle display mode\n\n    >>> form.widgets['favourite_city'].mode = 'display'\n    >>> print form.widgets['favourite_city'].render().strip()\n     <span id=\"form-widgets-favourite_city\" class=\"chosen-selection-widget required choice-field\" style=\"\"><span class=\"selected-option\">Palermo</span></span>\n\n    >>> form.widgets['visited_cities'].mode = 'display'\n    >>> print form.widgets['visited_cities'].render().strip()\n    <span id=\"form-widgets-visited_cities\" class=\"chosen-multiselection-widget required list-field\" style=\"\"><span class=\"selected-option\">Palermo</span>, <span class=\"selected-option\">Bologna</span></span>\n\nOur widget also handle hidden mode\n\n    >>> form.widgets['favourite_city'].mode = 'hidden'\n    >>> print form.widgets['favourite_city'].render().strip()\n    <input id=\"form-widgets-favourite_city-1\" name=\"form.widgets.favourite_city:list\" value=\"palermo\" class=\"hidden-widget\" type=\"hidden\" />\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <input name=\"form.widgets.favourite_city-empty-marker\" type=\"hidden\" value=\"1\" />\n\n    >>> form.widgets['visited_cities'].mode = 'hidden'\n    >>> print form.widgets['visited_cities'].render().strip()\n    <input id=\"form-widgets-visited_cities-0\" name=\"form.widgets.visited_cities:list\" value=\"bologna\" class=\"hidden-widget\" type=\"hidden\" />\n    <BLANKLINE>\n    <BLANKLINE>\n      <input id=\"form-widgets-visited_cities-1\" name=\"form.widgets.visited_cities:list\" value=\"palermo\" class=\"hidden-widget\" type=\"hidden\" />\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <input name=\"form.widgets.visited_cities-empty-marker\" type=\"hidden\" value=\"1\" />\n\n\n\ncollective.z3cform.chosen Installation\n=================================================================================\n\nTo install collective.z3cform.chosen, follow this `documentation <http://plone.org/documentation/kb/installing-add-ons-quick-how-to>`_. \n\n\n\nChangelog\n=========\n\n1.2.2 (2021-04-20)\n------------------\n\n- Do not translate the no value token to avoid an error when translated.\n  [mpeeters]\n\n- Added needed ajax parameter for corresponding collective.js.chosen\n  [cedricmessiant, sgeulette]\n\n1.2.1 (2014-09-25)\n------------------\n\n- Widget works when the field is initially hidden (for instance in an overlay).\n  [thomasdesvenain]\n\n- Pyflakes, pep8, unused code removed, etc.\n  [thomasdesvenain]\n\n\n1.2 (2014-06-03)\n----------------\n\n- Set width, and apply as chosen parameter rather than styling widgets with a\n  specific width; doing so ensures chosen will set a valid width when it's\n  initialized off-screen or when the element applied to it is invisible.\n  [damilgra]\n\n- Updated french translations.\n  [cedricmessiant]\n\n\n1.1 (2013-06-04)\n----------------\n\n- buildout, tests & travis [kiorky]\n\n- Change prompt message and update French translations.\n  Fix bug for no value in List fields.\n  [cedricmessiant]\n\n\n1.0 (2012-06-06)\n----------------\n\n* Initial release [kiorky]",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/collective.z3cform.chosen",
    "keywords": "chosen z3cform widget plone",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "collective.z3cform.chosen",
    "package_url": "https://pypi.org/project/collective.z3cform.chosen/",
    "platform": "",
    "project_url": "https://pypi.org/project/collective.z3cform.chosen/",
    "project_urls": {
      "Homepage": "http://pypi.python.org/pypi/collective.z3cform.chosen"
    },
    "release_url": "https://pypi.org/project/collective.z3cform.chosen/1.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "chosen widget for z3cform (both chosen & ajax version)",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10119299,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ef42ec791358078b293c4da321b2ad6d70bb1c8988840436b0fbf406e345ea4",
          "md5": "f6922b2ab4f617301020b5da4f1b7df4",
          "sha256": "e9a97459b744328cfbc0887351eced165b8ae8f367029280a2e51130bfe73aa4"
        },
        "downloads": -1,
        "filename": "collective.z3cform.chosen-1.0.zip",
        "has_sig": false,
        "md5_digest": "f6922b2ab4f617301020b5da4f1b7df4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73755,
        "upload_time": "2012-06-06T18:12:47",
        "upload_time_iso_8601": "2012-06-06T18:12:47.678685Z",
        "url": "https://files.pythonhosted.org/packages/0e/f4/2ec791358078b293c4da321b2ad6d70bb1c8988840436b0fbf406e345ea4/collective.z3cform.chosen-1.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec341975b742d5d420f0d075444107a6f1b237de33f1d72a94df1da88a16ab79",
          "md5": "3a7fad0e73411c76885ebb192eff6c75",
          "sha256": "ad4b87f5306c0e8b28cc1e0e49a43710c1d1107546c5f7916d7a394ec0dc7d67"
        },
        "downloads": -1,
        "filename": "collective.z3cform.chosen-1.1.zip",
        "has_sig": false,
        "md5_digest": "3a7fad0e73411c76885ebb192eff6c75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62285,
        "upload_time": "2013-06-04T16:35:27",
        "upload_time_iso_8601": "2013-06-04T16:35:27.333750Z",
        "url": "https://files.pythonhosted.org/packages/ec/34/1975b742d5d420f0d075444107a6f1b237de33f1d72a94df1da88a16ab79/collective.z3cform.chosen-1.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0a9b10ea8b0928d49162e492677cb0d8c06f2d2c1f066e78fc034ee893aaa6a",
          "md5": "82f21a770b67f4656e5a1aba4fc3cba3",
          "sha256": "f555e535c7a5ba883ddc36db3e25bfaef9c05f2e6e12ae52156cd53f7cb9a011"
        },
        "downloads": -1,
        "filename": "collective.z3cform.chosen-1.2.zip",
        "has_sig": false,
        "md5_digest": "82f21a770b67f4656e5a1aba4fc3cba3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62141,
        "upload_time": "2014-06-03T18:40:25",
        "upload_time_iso_8601": "2014-06-03T18:40:25.917840Z",
        "url": "https://files.pythonhosted.org/packages/a0/a9/b10ea8b0928d49162e492677cb0d8c06f2d2c1f066e78fc034ee893aaa6a/collective.z3cform.chosen-1.2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cebe3386891c3567b4c993969fbed2bf8177f128430cf9cc88fcc67420f5c16b",
          "md5": "cd4b80a5353333ea12abbcc8179c2684",
          "sha256": "9c14a7cfe1f4ef18c9009cdecd8eb6a784c1e86822f0c5e129b7449ae66091b7"
        },
        "downloads": -1,
        "filename": "collective.z3cform.chosen-1.2.1.zip",
        "has_sig": false,
        "md5_digest": "cd4b80a5353333ea12abbcc8179c2684",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60542,
        "upload_time": "2014-09-25T11:57:15",
        "upload_time_iso_8601": "2014-09-25T11:57:15.292368Z",
        "url": "https://files.pythonhosted.org/packages/ce/be/3386891c3567b4c993969fbed2bf8177f128430cf9cc88fcc67420f5c16b/collective.z3cform.chosen-1.2.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eebb2facd299595c05aaceeaa4803d1e75b9da3111c8ed0e1f2227d7d6350eb",
          "md5": "cf2a6b9eec9ecaa8ed35a26768cbdc7f",
          "sha256": "b898d8c39afd12caec985a7146bcb76749b75d5573f246d33f2b03ed1bbab629"
        },
        "downloads": -1,
        "filename": "collective.z3cform.chosen-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cf2a6b9eec9ecaa8ed35a26768cbdc7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35720,
        "upload_time": "2021-04-20T14:05:21",
        "upload_time_iso_8601": "2021-04-20T14:05:21.304669Z",
        "url": "https://files.pythonhosted.org/packages/1e/eb/b2facd299595c05aaceeaa4803d1e75b9da3111c8ed0e1f2227d7d6350eb/collective.z3cform.chosen-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1eebb2facd299595c05aaceeaa4803d1e75b9da3111c8ed0e1f2227d7d6350eb",
        "md5": "cf2a6b9eec9ecaa8ed35a26768cbdc7f",
        "sha256": "b898d8c39afd12caec985a7146bcb76749b75d5573f246d33f2b03ed1bbab629"
      },
      "downloads": -1,
      "filename": "collective.z3cform.chosen-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cf2a6b9eec9ecaa8ed35a26768cbdc7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35720,
      "upload_time": "2021-04-20T14:05:21",
      "upload_time_iso_8601": "2021-04-20T14:05:21.304669Z",
      "url": "https://files.pythonhosted.org/packages/1e/eb/b2facd299595c05aaceeaa4803d1e75b9da3111c8ed0e1f2227d7d6350eb/collective.z3cform.chosen-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}