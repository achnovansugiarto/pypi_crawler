{
  "info": {
    "author": "Vincent Pelletier",
    "author_email": "plr.vincent@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: System :: Hardware :: Hardware Drivers"
    ],
    "description": ".. contents::\n\nUserland USB Gadget implementation of CCID/ICCD class.\n\nImplements an N-slots USB virtual IC card reader.\n\nRequirements\n------------\n\n- Linux >= 4.9 for CCID class support\n- python3 (tested with 3.8 and 3.9)\n- python dependencies listed in setup.py\n\nUsage\n-----\n\nIn a nutshell:\n\n.. code:: python\n\n    import f_ccid\n    with f_ccid.ICCDFunction(path, slot_count=1) as ccid:\n        ccid.slot_list[0].insert(card)\n        ccid.processEventsForever()\n\n(but check out functionfs.gadget to setup configfs for you, and provide the\n`path` argument above)\n\nThis module does not provide any card implementation.\n\nThe expected card API is:\n\n.. code:: python\n\n  card.clearVolatiles() -> None\n\nCalled when virtual power is cut to the card, which means it must flush its\nvolatile state.\n\n.. code:: python\n\n  card.getATR() -> bytearray\n\nCalled when the host tells the reader to power the card. This must return the\nAnswer To Reset bytestring for this card. Note that the answer must be mutable:\nalthough it will not be altered by the reader, it will be passed on to C code\nwhich technically could mutate it.\n\n.. code:: python\n\n  card.runAPDU(: bytearray) -> bytearray\n\nCalled when the host requests an Application Protocol Data Unit to be executed\nby the card. The returned value must contain any response, followed by any\nstatus bytes. Only entire APDUs are sent to the card (assembly is done by the\nreader).",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/vpelletier/python-usb-f-ccid",
    "keywords": "linux usb gadget ccid iccd",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "usb-f-ccid",
    "package_url": "https://pypi.org/project/usb-f-ccid/",
    "platform": "linux",
    "project_url": "https://pypi.org/project/usb-f-ccid/",
    "project_urls": {
      "Homepage": "http://github.com/vpelletier/python-usb-f-ccid"
    },
    "release_url": "https://pypi.org/project/usb-f-ccid/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Userland USB Gadget implementation of CCID/ICCD class.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8990508,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca62b2cc625327aac7077427ecce9752062cb5c891da281b18005ba14f911f19",
          "md5": "10911d6196b2f801664dbfb85a2731d8",
          "sha256": "4e14f6c28d070ac4ba2c2b4007f0de1cc4947e1eac476ad54aefd1dc4655f075"
        },
        "downloads": -1,
        "filename": "usb-f-ccid-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "10911d6196b2f801664dbfb85a2731d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11417,
        "upload_time": "2020-12-18T12:51:15",
        "upload_time_iso_8601": "2020-12-18T12:51:15.639903Z",
        "url": "https://files.pythonhosted.org/packages/ca/62/b2cc625327aac7077427ecce9752062cb5c891da281b18005ba14f911f19/usb-f-ccid-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e11105de39ce2c4badd75ad4bedc4db63fee47c0db0dbe4ce91d06bc3b89e3ab",
          "md5": "e2f7e7c1e45d3fe79b5287292dc341b0",
          "sha256": "cdaa1acaecc3bbf6ee707a72b3e9c3ea948e8734c5a41f3d26a517df238c3880"
        },
        "downloads": -1,
        "filename": "usb-f-ccid-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e2f7e7c1e45d3fe79b5287292dc341b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28880,
        "upload_time": "2020-12-27T02:34:22",
        "upload_time_iso_8601": "2020-12-27T02:34:22.976216Z",
        "url": "https://files.pythonhosted.org/packages/e1/11/05de39ce2c4badd75ad4bedc4db63fee47c0db0dbe4ce91d06bc3b89e3ab/usb-f-ccid-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e11105de39ce2c4badd75ad4bedc4db63fee47c0db0dbe4ce91d06bc3b89e3ab",
        "md5": "e2f7e7c1e45d3fe79b5287292dc341b0",
        "sha256": "cdaa1acaecc3bbf6ee707a72b3e9c3ea948e8734c5a41f3d26a517df238c3880"
      },
      "downloads": -1,
      "filename": "usb-f-ccid-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e2f7e7c1e45d3fe79b5287292dc341b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28880,
      "upload_time": "2020-12-27T02:34:22",
      "upload_time_iso_8601": "2020-12-27T02:34:22.976216Z",
      "url": "https://files.pythonhosted.org/packages/e1/11/05de39ce2c4badd75ad4bedc4db63fee47c0db0dbe4ce91d06bc3b89e3ab/usb-f-ccid-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}