{
  "info": {
    "author": "taylor.fish",
    "author_email": "contact@taylor.fish",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet"
    ],
    "description": "autoheaders\n===========\n\nVersion 0.3.5\n\nautoheaders automatically generates header files from C source code.\n\n\nInstallation\n------------\n\nFrom PyPI\n~~~~~~~~~\n\nInstall with `pip`_::\n\n    sudo pip3 install autoheaders\n\nTo install locally, run without ``sudo`` and add the ``--user`` option.\n\nFrom the Git repository\n~~~~~~~~~~~~~~~~~~~~~~~\n\nClone the repository (you’ll need to have `Git`_ installed)::\n\n    git clone https://git.taylor.fish/taylor.fish/autoheaders\n    cd autoheaders\n\nThen install with `pip`_::\n\n    sudo pip3 install .\n\nAlternatively, you can run: [1]_ ::\n\n    sudo ./setup.py install\n\nWith either command, to install locally, run without ``sudo`` and add the\n``--user`` option. [2]_\n\nRun without installing\n~~~~~~~~~~~~~~~~~~~~~~\n\nRun the first set of commands in the previous section to clone the repository.\nThen install the required dependencies::\n\n    sudo pip3 install -r requirements.txt\n\nTo install the dependencies locally, run without ``sudo`` and add the\n``--user`` option.\n\n.. _Git: https://git-scm.com\n\n\nUsage\n-----\n\nIf you installed autoheaders, you can simply run ``autoheaders``. [3]_\nOtherwise, run ``./autoheaders.py``. This will display usage information\nsimilar to the following::\n\n    autoheaders [options] [--] <c-file>\n    autoheaders -h | --help | --version\n\n**Arguments:**\n\n* ``<c-file>``:\n  The C source code file from which to generate the header. If ``-`` is passed,\n  standard input is read (unless the argument is preceded by ``--``).\n\n**Options:**\n\n* ``-p --private``:\n  Generate a private header file containing static declarations.\n\n* ``-o <file>``\n  Write the header file to the specified file. If given after ``-p``, a private\n  header is written. This option may be given twice: once before ``-p``, and\n  once after. If not given, the header is written to standard output.\n\n* ``-c <cpp-arg>``:\n  Pass arguments to the C preprocessor. Separate arguments with commas, or\n  provide multiple ``-c`` options. Use ``\\`` to escape characters. [4]_\n  *Note that when the preprocessor is run, the current working directory is the\n  parent directory of the C file.* It is therefore recommended to convert paths\n  in ``-c`` arguments to absolute paths.\n\n* ``--debug``:\n  Run the program in debug mode. Exception tracebacks are shown.\n\nThe generated header file is written to standard output.\n\nThe C preprocessor command that is used is determined by trying the\nfollowing options in the order listed:\n\n* The value of the ``AUTOHEADERS_CPP`` environment variable. This is parsed and\n  interpreted as a shell command. For example: ``AUTOHEADERS_CPP=\"gcc -E\"``\n* ``gcc -E``\n* ``clang -E``\n\nThe C preprocessor must be compatible with `GCC`_’s preprocessor (``gcc -E``).\n\nSee the next section for how to structure your C code so that headers can be\ngenerated properly.\n\n.. _GCC: https://gcc.gnu.org/\n\n\nHeader generation\n-----------------\n\nautoheaders parses the given C file and looks for all function definitions,\nglobal variable definitions, and non-``extern`` global variable declarations\n(which are essentially zero-initialized definitions).\n\nDefinitions and declarations marked ``static`` are ignored. The remaining\nfunction definitions are transformed into function declarations and are added\nto the header file. The remaining variable definitions and declarations are\ntransformed into ``extern`` variable declarations and are added to the header\nfile.\n\nAdditionally, you can explicitly specify code to be added to the header—this is\nnecessary if you define structs or need certain files to be to be included in\nthe header. All code between ``#ifdef HEADER`` and ``#endif`` is copied to the\nheader file, intermixed with the generated declarations (depending on where the\n``#ifdef HEADER`` blocks occur in the source file).\n\nInclude guards can also be generated. If a comment of the form\n``@guard <name>`` is present, an include guard will be generated using the\nmacro ``<name>``. The comment must appear at the top level, outside of any\nblocks or preprocessor conditionals.\n\nFiles that are included (with ``#include``) by the C file do not need to exist\nand are not processed by autoheaders, *except* for files inside\n``#ifdef HEADER`` blocks. [5]_\n\nSometimes, however, certain ``#include`` statements do need to be processed for\nautoheaders to parse the file properly, especially if the included files define\nmacros that are used at the top level (i.e., not inside functions) by the\noriginal C file. In this case, a comment of the form ``@include`` can be placed\nafter the ``#include <...>``, *on the same line*. For example:\n\n.. code:: c\n\n    #include <assert.h> /* @include */\n    #include <stdio.h>\n\nwill cause autoheaders to include ``assert.h`` during its processing, but\n``stdio.h`` will not be included (unless these ``#include`` statements appear\nin an ``#ifdef HEADER`` block [5]_).\n\n\nPrivate headers\n---------------\n\nIn addition to the public header files normally generated by autoheaders,\nprivate header files can be generated as well. These header files are designed\nto be included only by the corresponding C file and remove the need for\nforward declarations of static functions.\n\nTo generate a private header file, provide the option ``-p``.\n\n``#ifdef HEADER`` blocks will not be included in the private header. To include\ncode in the private header (for things like private structures), use\n``#ifdef PRIVATE_HEADER`` blocks (also closed with ``#endif``, of course).\n\nFinally, the macro ``ANY_HEADER`` will be defined for both public and private\nheaders, which allows you to use ``#ifdef ANY_HEADER`` blocks to include code\nin both headers. You shouldn’t usually need to do this, however.\n\n\nExample\n-------\n\n*Also see the* |example/|_ *directory for a more complete example.*\n\n.. |example/| replace:: *example/*\n.. _example/: https://github.com/taylordotfish/autoheaders/tree/master/example/\n\nIf the following code is in ``test.c``:\n\n.. code:: c\n\n    // @guard TEST_H\n\n    #include \"test.h\"\n    #include \"test.priv.h\"\n    #include <stdio.h>\n\n    #ifdef HEADER\n        #include <stdint.h>\n\n        typedef struct {\n            int32_t first;\n            int32_t second\n        } IntPair;\n    #endif\n\n    const IntPair zero_pair = { 0, 0 };\n\n    // Adds a pair of integers.\n    int32_t add_pair(IntPair pair) {\n        return add(pair.first, pair.second);\n    }\n\n    // Adds two integers.\n    static int32_t add(int32_t first, int32_t second) {\n        printf(\"Adding %\"PRId32\" and %\"PRId32\"\\n\", first, second);\n        return first + second;\n    }\n\nthen you can run ``autoheaders test.c -o test.h`` to generate the public header\nfile. ``test.h`` will then contain the following code:\n\n.. code:: c\n\n    #ifndef TEST_H\n    #define TEST_H\n\n    #include <stdint.h>\n\n    typedef struct {\n        int32_t first;\n        int32_t second;\n    } IntPair;\n\n    extern const IntPair zero_pair;\n\n    // Adds a pair of integers.\n    int32_t add_pair(IntPair pair);\n\n    #endif\n\nSimilarly, you can run ``autoheaders test.c -p -o test.priv.h`` to generate the\nprivate header file. ``test.priv.h`` will then contain the following code:\n\n.. code:: c\n\n    // Adds two integers.\n    static int32_t add(int32_t first, int32_t second);\n\nYou can also generate both the public and private headers at the same time,\nwhich is faster than generating each individually, by running::\n\n    autoheaders test.c -o test.h -p -o test.priv.h\n\nSee the `example/`_ directory for a more complete example.\n\n.. _example/: https://github.com/taylordotfish/autoheaders/tree/master/example/\n\n\nFake headers\n------------\n\nIf an included header contains a large about of code, it can cause autoheaders\nto run slowly. Certain non-standard headers may not even be able to parse. In\nthese cases, you can create fake headers that override the real ones when\nautoheaders runs.\n\nFake headers simply need to declare the types and macros from the real header\nthat your code uses. The types do not need to match the real ones; they just\nneed to be declared. The recommended way to do this is with typedefs. For\nexample, ``typedef int div_t;`` is a suitable definition of ``div_t``,\nregardless of whether or not ``div_t`` is actually an integer.\n\nMacros used by your code must be defined in the fake header as well. While, as\nwith types, the fake header macros don’t need to match the real ones, a little\nmore care must be taken to ensure that the fake macros produce syntactically\nvalid code.\n\nFor example, a fake header for ``pthread.h`` could contain the following:\n\n.. code:: c\n\n    typedef int pthread_t;\n    typedef int pthread_mutex_t;\n    #define PTHREAD_MUTEX_INITIALIZER 0\n\nPut your fake headers in a directory with a structure that matches that of the\nreal headers. For example, using the directory ``fake/``, if your code\ncontained ``#include <pthread.h>``, the fake header would be stored in\n``fake/pthread.h``. If your code contained ``#include <pthread/pthread.h>``,\nthe fake header would be stored in ``fake/pthread/pthread.h``.\n\nAfter creating your fake headers, you can run autoheaders as follows::\n\n    autoheaders <c-file> -c -I<fake-header-dir>\n\nwhere ``<fake-header-dir>`` is the directory containing the fake headers.\nFollowing the examples above, autoheaders might be invoked as::\n\n    autoheaders file.c -c -Ifake/\n\nAdditionally, you can include your fake header directory automatically by\ngiving it a special name. When running, autoheaders will look for a directory\nnamed ``.fake-headers/`` in the directory containing the C file or in any parent\ndirectory. If such a directory is found, it will be included with ``-I``.\n\nSee `this article about pycparser`__ for more information about fake headers.\n\n__ https://eli.thegreenplace.net/2015/on-parsing-c-type-declarations-and-fake-headers\n\n\nTroubleshooting\n---------------\n\nThe most likely error to be encountered is when code contains non-standard C\nextensions; for example, ``__attribute__`` in GCC. C code is parsed after\npreprocessing, so the use of non-standard features in any included files causes\nproblems for the parser.\n\nThese issues can be easily mitigated by modifying `shim.h`_.\n(``__attribute__`` and some other extensions are currently handled and do not\ncause errors.) ``shim.h`` contains typedefs and macro definitions that\ntransform the code into standards-compliant C (at least enough to be parsed).\nFor more information, see `this article about pycparser`__.\n\n.. _shim.h: https://github.com/taylordotfish/autoheaders/blob/master/autoheaders/shim.h\n__ https://eli.thegreenplace.net/2015/on-parsing-c-type-declarations-and-fake-headers\n\nIf you find that something is missing from ``shim.h``, please file an issue or\nopen a pull request.\n\n\nDependencies\n------------\n\n* `Python`_ ≥ 3.5 with `pip`_ installed\n* A `GCC`_-compatible compiler (specifically, a compatible C preprocessor);\n  see the `Usage`_ section.\n* The following Python packages:\n\n  - `pycparser`_\n  - `setuptools`_ [6]_\n\nThe installation instructions above handle installing the Python packages.\nAlternatively, running ``pip3 install -r requirements.freeze.txt`` will install\nspecific versions of the dependencies that have been confirmed to work.\n\n.. _Python: https://www.python.org/\n.. _GCC: https://gcc.gnu.org/\n.. _Usage: #usage\n.. _pycparser: https://pypi.python.org/pypi/pycparser/\n\n\nWhat’s new\n----------\n\nVersion 0.3.3:\n\n* autoheaders can now be installed from PyPI.\n\nVersion 0.3.2:\n\n* Array declarations without explicit sizes (appearing as part of a definition)\n  are no longer copied to header files, as this causes compilation errors.\n\nVersion 0.3.1:\n\n* Fixed issue where array declarations would be ignored.\n\nVersion 0.3.0:\n\n* Public and private headers can now be generated at the same time.\n\nVersion 0.2.1:\n\n* Clarified how the current working directory changes when the preprocessor is\n  run.\n\nVersion 0.2.0:\n\n* The order of ``#ifdef HEADER`` blocks and definitions is now preserved.\n  If an ``#ifdef HEADER`` block appears after a function definition, it will\n  now appear after the generated declaration in the header file.\n\n\nLicense\n-------\n\nautoheaders is licensed under the GNU General Public License, version 3 or any\nlater version. See `LICENSE`_. [7]_\n\nThis README file has been released to the public domain using `CC0`_.\n\n.. _LICENSE: https://github.com/taylordotfish/autoheaders/blob/master/LICENSE\n.. _CC0: https://creativecommons.org/publicdomain/zero/1.0/\n\n.. [1] `setuptools`_ must be installed before running ``setup.py``. If `pip`_\n   is installed, ``setuptools`` likely is as well; otherwise, run\n   ``sudo pip3 install setuptools`` or ``pip3 install --user setuptools``.\n\n.. [2] If using ``setup.py``, add the ``--user`` option after ``install``\n   (rather than before it).\n\n.. [3] If Python package binary directories are not in your ``$PATH``, you may\n   have to run ``python3 -m autoheaders`` instead.\n\n.. [4] Backslashes can be used to include commas in the passed arguments: for\n   example, ``-c 'arg\\,with\\,commas'`` will pass the single argument\n   ``arg,with,commas`` to the preprocessor. Other backslash escapes are simply\n   interpreted as the second character: ``-c 'a\\bc\\\\d'`` becomes ``abc\\d``.\n\n.. [5] Including ``#ifdef PRIVATE_HEADER`` and ``#ifdef ANY_HEADER`` blocks.\n\n.. [6] Specifically, ``pkg_resources`` must be installed. Some package managers\n   distribute ``pkg_resources`` separately from ``setuptools``. For example,\n   in Debian GNU/Linux and many derivatives, ``pkg_resources`` is available\n   via ``apt`` in ``python3-pkg-resources``.\n\n.. [7] This does not apply to generated header files; the copyright and license\n   status of such files is unaffected by autoheaders.\n\n.. _pip: https://pip.pypa.io\n.. _setuptools: https://pypi.org/project/setuptools/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/taylordotfish/autoheaders",
    "keywords": "c header preprocessor",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autoheaders",
    "package_url": "https://pypi.org/project/autoheaders/",
    "platform": "",
    "project_url": "https://pypi.org/project/autoheaders/",
    "project_urls": {
      "Homepage": "https://github.com/taylordotfish/autoheaders"
    },
    "release_url": "https://pypi.org/project/autoheaders/0.3.5/",
    "requires_dist": [
      "pycparser (<3,>=2.18)",
      "setuptools (>=39.0.0)"
    ],
    "requires_python": ">=3.5",
    "summary": "Automatically generate headers from C source code.",
    "version": "0.3.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9399521,
  "releases": {
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "781ba768a2e961a2aa3b8d2cc75b2bf725dc69452bd4ae5e149a5af932c3011a",
          "md5": "f36ad2d28bad7b6d9abd4866903465f3",
          "sha256": "494c5159fc3579be223e984ff7d004ea12365a8a594193bd0976fc922875592a"
        },
        "downloads": -1,
        "filename": "autoheaders-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f36ad2d28bad7b6d9abd4866903465f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41174,
        "upload_time": "2021-02-05T07:44:58",
        "upload_time_iso_8601": "2021-02-05T07:44:58.059746Z",
        "url": "https://files.pythonhosted.org/packages/78/1b/a768a2e961a2aa3b8d2cc75b2bf725dc69452bd4ae5e149a5af932c3011a/autoheaders-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31e27d56a10fe16dac7227fc6b43dad5fe41faaeff504d7517ad6101b02c8e79",
          "md5": "02e4cdbd0f4dc0ad86cbc25ae3539c29",
          "sha256": "f6e468292247a54faedda65f94de2a2048181b2481673a640c9bef92a99a3ec5"
        },
        "downloads": -1,
        "filename": "autoheaders-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "02e4cdbd0f4dc0ad86cbc25ae3539c29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40327,
        "upload_time": "2021-02-05T07:44:59",
        "upload_time_iso_8601": "2021-02-05T07:44:59.828555Z",
        "url": "https://files.pythonhosted.org/packages/31/e2/7d56a10fe16dac7227fc6b43dad5fe41faaeff504d7517ad6101b02c8e79/autoheaders-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70b376110bbd557632dc40aee7e5642a772e86723a08fd1a5dd601db9810c641",
          "md5": "58f0c342fb2b99f6897a5d405cb558d4",
          "sha256": "002f1fb2d79d5e7122849f96399720880df09e1863e45efa0d0e55b4547674df"
        },
        "downloads": -1,
        "filename": "autoheaders-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58f0c342fb2b99f6897a5d405cb558d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 41182,
        "upload_time": "2021-02-12T13:10:31",
        "upload_time_iso_8601": "2021-02-12T13:10:31.068063Z",
        "url": "https://files.pythonhosted.org/packages/70/b3/76110bbd557632dc40aee7e5642a772e86723a08fd1a5dd601db9810c641/autoheaders-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ac8962f1b948fb33f7e869bca721763e04bf3a6291203e74170c35a364965cf",
          "md5": "baf4e677c601a8087cdcd0d46f4e53f1",
          "sha256": "d2b9b8c5b6b96fafbf37712e5986c4c9aee8015ba0c31ac4c09907c0c43b15a4"
        },
        "downloads": -1,
        "filename": "autoheaders-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "baf4e677c601a8087cdcd0d46f4e53f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 40369,
        "upload_time": "2021-02-12T13:10:32",
        "upload_time_iso_8601": "2021-02-12T13:10:32.514858Z",
        "url": "https://files.pythonhosted.org/packages/1a/c8/962f1b948fb33f7e869bca721763e04bf3a6291203e74170c35a364965cf/autoheaders-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7cce2b2e31a653904c91a8885bd5590ab9f053ec43788261d8b84f5de34fd96",
          "md5": "bca47029a338b98cc250386fef6319d2",
          "sha256": "acb00a03405b2687ffd5e5fcb4bc4f27515c7d5b3f91640282d584b477b60e52"
        },
        "downloads": -1,
        "filename": "autoheaders-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bca47029a338b98cc250386fef6319d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 41202,
        "upload_time": "2021-02-12T16:41:31",
        "upload_time_iso_8601": "2021-02-12T16:41:31.574072Z",
        "url": "https://files.pythonhosted.org/packages/a7/cc/e2b2e31a653904c91a8885bd5590ab9f053ec43788261d8b84f5de34fd96/autoheaders-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9da2bf10400266f134bce1557339e2a73abf2e36d2a47c33aaf874a8d9d22e0e",
          "md5": "01caf7301d584babc925f39e6a00d8b0",
          "sha256": "9c1b1959a29c0fc6be2fb1212f4836cd37cf13b5dadb6693679536100867e1a4"
        },
        "downloads": -1,
        "filename": "autoheaders-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "01caf7301d584babc925f39e6a00d8b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 40456,
        "upload_time": "2021-02-12T16:41:33",
        "upload_time_iso_8601": "2021-02-12T16:41:33.095524Z",
        "url": "https://files.pythonhosted.org/packages/9d/a2/bf10400266f134bce1557339e2a73abf2e36d2a47c33aaf874a8d9d22e0e/autoheaders-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7cce2b2e31a653904c91a8885bd5590ab9f053ec43788261d8b84f5de34fd96",
        "md5": "bca47029a338b98cc250386fef6319d2",
        "sha256": "acb00a03405b2687ffd5e5fcb4bc4f27515c7d5b3f91640282d584b477b60e52"
      },
      "downloads": -1,
      "filename": "autoheaders-0.3.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bca47029a338b98cc250386fef6319d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 41202,
      "upload_time": "2021-02-12T16:41:31",
      "upload_time_iso_8601": "2021-02-12T16:41:31.574072Z",
      "url": "https://files.pythonhosted.org/packages/a7/cc/e2b2e31a653904c91a8885bd5590ab9f053ec43788261d8b84f5de34fd96/autoheaders-0.3.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9da2bf10400266f134bce1557339e2a73abf2e36d2a47c33aaf874a8d9d22e0e",
        "md5": "01caf7301d584babc925f39e6a00d8b0",
        "sha256": "9c1b1959a29c0fc6be2fb1212f4836cd37cf13b5dadb6693679536100867e1a4"
      },
      "downloads": -1,
      "filename": "autoheaders-0.3.5.tar.gz",
      "has_sig": false,
      "md5_digest": "01caf7301d584babc925f39e6a00d8b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 40456,
      "upload_time": "2021-02-12T16:41:33",
      "upload_time_iso_8601": "2021-02-12T16:41:33.095524Z",
      "url": "https://files.pythonhosted.org/packages/9d/a2/bf10400266f134bce1557339e2a73abf2e36d2a47c33aaf874a8d9d22e0e/autoheaders-0.3.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}