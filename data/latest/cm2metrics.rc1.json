{
  "info": {
    "author": "Zhi Liu",
    "author_email": "cowliucn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# cm2metrics\n\nA lightweight package that analyzes multiple metrics directly from\nconfusion matrix.\n\n## Features\n- Get all classes parsing results in native _Dataframe_ format\n- Print all classes or specified class parsing summary in friendly format\n- Only requires _numpy_ and _pandas_, without relying on other machine learning packages.\n- Easy to use with a few  APIs\n- Supports **16 metrics** for each class:\n    * **tp**: true positive\n    * **tn**:  true negative\n    * **fp**: false positive\n    * **fn**: false negative\n    * **tpr**: true positive rate\n    * **tnr**: true negative rate\n    * **fpr**: false positive rate\n    * **fnr**: false negative rate\n    * **atc**: actual true count\n    * **afc**: actual false count\n    * **ptc**: predict true count\n    * **pfc**: predict false count\n    * **accruacy**\n    * **precision**\n    * **recall**\n    * **f1**\n\n\n## General \n- **Version**: 0.1\n- **Dependency**: Python(3.6,3.7.3.8), numpy, pandas\n\n## Install\n```\npip install cm2metrics\n```\n\n## Use\n#### General use\n\n0. Generate a confusion matrix\n<pre>\n#  use scikitlearn\nfrom sklearn.metrics import confusion_matrix\n\n#cm is ndarray, convert to dataframe\ncm = confusion_matrix(true_target, pred_target)\ndf_cm = pd.DataFrame(cm, index=class_names, columns=class_names)\n\n# or, use a randomly generated confusion matrix(for test)\n# see details in cm_test.py\nclass_names = {0:\"class0\", 1:\"class1\", 2:\"class2\"}\ndf_cm = pd.DataFrame([(1,2,3),(4,5,6),(7,8,9)])\ndf_cm.rename(index=class_names, columns=class_names, inplace=True)\n</pre>\n\n1. Init a confusion matrix parser\n<pre>\nfrom cm2metrics.parse_cm import  ConfusionMatrixParser\ncm_parser = ConfusionMatrixParser(df_cm)\n</pre>\n\n2. Parse the confusion matrix\n<pre>\n# parsing result(cm_parsed) is a dataframe\ncm_parsed = cm_parser.parse_confusion_matrix()\nprint(cm_parsed)  \n\nSample output:\n\n        tp  fp  tn  fn       tpr       fpr       tnr       fnr  atc  afc  ptc  pfc  accuracy  precision    recall        f1\nclass0   1  28  11   5  0.166667  0.717949  0.282051  0.833333    6   39   12   33  0.644444   0.083333  0.166667  0.111111\nclass1   5  20  10  10  0.333333  0.666667  0.333333  0.666667   15   30   15   30  0.555556   0.333333  0.333333  0.333333\nclass2   9  12   9  15  0.375000  0.571429  0.428571  0.625000   24   21   18   27  0.466667   0.500000  0.375000  0.428571\n\n\n# get class0 true positive\ntp = cm_parsed.loc[\"class0\"].at[\"tp\"]\n</pre>\n\n#### Print parsing summary in friendly format\n<pre>\n# print one class summary by name using class_name parameter\ncm_parser.print_summary(class_name=\"class0\")\n\n# print one class summary by index in confusion matrix using class_index parameter\ncm_parser.print_summary(class_index=0)\n\n# print all classes summary by not specifying parameters\ncm_parser.print_summary()\n\nSample output for class0 summary:\nSummary for class0\nTP: 1\nTN: 28\nFP: 11\nFN: 5\nTPR: 0.167\nTNR: 0.718\nFPR: 0.282\nFNR: 0.833\nActual true count: 6\nActual false count: 39\nPredict true count: 12\nPredict false count: 33\nAccuracy: 0.644\nPrecision: 0.083\nRecall: 0.167\nF1: 0.111\n</pre>\n\n# License\nMIT license.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FisherDock/m2metrics",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cm2metrics",
    "package_url": "https://pypi.org/project/cm2metrics/",
    "platform": "",
    "project_url": "https://pypi.org/project/cm2metrics/",
    "project_urls": {
      "Homepage": "https://github.com/FisherDock/m2metrics"
    },
    "release_url": "https://pypi.org/project/cm2metrics/0.1/",
    "requires_dist": [
      "pandas (>=1.0)"
    ],
    "requires_python": "",
    "summary": "A lightweight package that analyzes multiple metrics directly from confusion matrix efficiently",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11208213,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "329749a6c18a95b7c2a65586dec66b9fa4b987fdcfcce36630e2051c3bcfa2d2",
          "md5": "5eb6123f0a4b2848c425b08d9ccfb74f",
          "sha256": "030632279e9674f3523272c2ba05dcf7b3bcd5a16318024b574abb0788b1d223"
        },
        "downloads": -1,
        "filename": "cm2metrics-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5eb6123f0a4b2848c425b08d9ccfb74f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7066,
        "upload_time": "2021-08-18T05:16:36",
        "upload_time_iso_8601": "2021-08-18T05:16:36.238155Z",
        "url": "https://files.pythonhosted.org/packages/32/97/49a6c18a95b7c2a65586dec66b9fa4b987fdcfcce36630e2051c3bcfa2d2/cm2metrics-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b86d2be8a6565b545f8ec15528a724b166ed06a09b7a7831cd4e9140cc56f77",
          "md5": "457cbd54fe4ec41d5660c9b1c0aa75f3",
          "sha256": "79d7fe3830e3afe331aaaede7aa824c2b80f84300f3c5e5859139459e2a02785"
        },
        "downloads": -1,
        "filename": "cm2metrics-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "457cbd54fe4ec41d5660c9b1c0aa75f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5145,
        "upload_time": "2021-08-18T05:16:37",
        "upload_time_iso_8601": "2021-08-18T05:16:37.722779Z",
        "url": "https://files.pythonhosted.org/packages/5b/86/d2be8a6565b545f8ec15528a724b166ed06a09b7a7831cd4e9140cc56f77/cm2metrics-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "329749a6c18a95b7c2a65586dec66b9fa4b987fdcfcce36630e2051c3bcfa2d2",
        "md5": "5eb6123f0a4b2848c425b08d9ccfb74f",
        "sha256": "030632279e9674f3523272c2ba05dcf7b3bcd5a16318024b574abb0788b1d223"
      },
      "downloads": -1,
      "filename": "cm2metrics-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5eb6123f0a4b2848c425b08d9ccfb74f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7066,
      "upload_time": "2021-08-18T05:16:36",
      "upload_time_iso_8601": "2021-08-18T05:16:36.238155Z",
      "url": "https://files.pythonhosted.org/packages/32/97/49a6c18a95b7c2a65586dec66b9fa4b987fdcfcce36630e2051c3bcfa2d2/cm2metrics-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b86d2be8a6565b545f8ec15528a724b166ed06a09b7a7831cd4e9140cc56f77",
        "md5": "457cbd54fe4ec41d5660c9b1c0aa75f3",
        "sha256": "79d7fe3830e3afe331aaaede7aa824c2b80f84300f3c5e5859139459e2a02785"
      },
      "downloads": -1,
      "filename": "cm2metrics-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "457cbd54fe4ec41d5660c9b1c0aa75f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5145,
      "upload_time": "2021-08-18T05:16:37",
      "upload_time_iso_8601": "2021-08-18T05:16:37.722779Z",
      "url": "https://files.pythonhosted.org/packages/5b/86/d2be8a6565b545f8ec15528a724b166ed06a09b7a7831cd4e9140cc56f77/cm2metrics-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}