{
  "info": {
    "author": "Tristan Muscat",
    "author_email": "traistan.muscat@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Terminal\n\n![Tests](https://github.com/tristanmsct/Terminal/actions/workflows/tests.yml/badge.svg)\n![Coverage](https://cdn.jsdelivr.net/gh/tristanmsct/Terminal/coverage.svg)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![PyPI version](https://badge.fury.io/py/inputmanager.svg)](https://badge.fury.io/py/inputmanager)\n\n## How to install\n\nSimply run\n```bash\npip install inputmanager\n```\n\n## How to use terminal\n\nContent of the `demo.py` file :\n\n```Python\n# Packages\nimport inputmanager as im\n\n# %% Read line function\n\n# Open question\nstr_name = im.read_line('What is your name ?\\n')\nprint(f'Hello, {str_name}.')\n\n# Closed question\nstr_fruit = im.read_line('Do you prefere apples or pears ?\\n', bl_case=False, lst_values=['Apples', 'Pears'])\nprint(f'I too like {str_fruit.lower()} :).')\n\n# %% Yes or No questions\n\n# By default recognize (yes, y, oui and o) as yes, and (no, n and non) as no.\nim.read_yes_no('Proceed ? [y/n]\\n')\n\n# This can be changed\nim.read_yes_no('Continuar ? [Si/No]\\n', lst_pos_vals=['Si', 's'], lst_neg_vals=['No', 'n'])\n\n# %% Read numeric\n\n# Basic numeric read\nint_res = im.read_numeric('Choose a numer :\\n')\nprint(f'You chose {int_res}.')\n\n# This function can be tweaked with some parameters :\n\nint_res = im.read_numeric('Choose a number between 1 and 10 :\\n', bl_int=True,\n                          num_lb=1, num_ub=10, bl_inc_lb=True, bl_inc_ub=True)\nprint(f'You chose {int_res}.')\n\n# %% Force read\n\n# In order not to crash on a bad input, you can use the force_read function\nint_res = im.force_read(im.read_numeric, 'Choose a number between 1 and 10 :\\n', bl_int=True,\n                        num_lb=1, num_ub=10, bl_inc_lb=True, bl_inc_ub=True)\nprint(f'You chose {int_res}.')\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tristanmsct/Terminal",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "inputmanager",
    "package_url": "https://pypi.org/project/inputmanager/",
    "platform": "unix",
    "project_url": "https://pypi.org/project/inputmanager/",
    "project_urls": {
      "Homepage": "https://github.com/tristanmsct/Terminal"
    },
    "release_url": "https://pypi.org/project/inputmanager/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "a few function to get clean inputs from a user",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12078741,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28b95b110ff16effed28d73359fe3cd586d4ff62f823ceee098936cbcd8948cf",
          "md5": "77e761d5b405131d0cbb10a895a91399",
          "sha256": "b57b3eadfa1983c8e178e64ad20514082a16492f332477c276765c9b6a321cfb"
        },
        "downloads": -1,
        "filename": "inputmanager-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "77e761d5b405131d0cbb10a895a91399",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5243,
        "upload_time": "2021-11-20T15:21:14",
        "upload_time_iso_8601": "2021-11-20T15:21:14.445650Z",
        "url": "https://files.pythonhosted.org/packages/28/b9/5b110ff16effed28d73359fe3cd586d4ff62f823ceee098936cbcd8948cf/inputmanager-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbfe83202e0987c4a901113ea6d6f670987170b350a89faf9b346c00ace0e08d",
          "md5": "055e958c644b499c262f06715595296b",
          "sha256": "eafc8e0401fae0fc7141f48d0a152ddca4dc53866d4febcf91edc0bf104cc068"
        },
        "downloads": -1,
        "filename": "inputmanager-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "055e958c644b499c262f06715595296b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5367,
        "upload_time": "2021-11-20T16:59:44",
        "upload_time_iso_8601": "2021-11-20T16:59:44.263447Z",
        "url": "https://files.pythonhosted.org/packages/bb/fe/83202e0987c4a901113ea6d6f670987170b350a89faf9b346c00ace0e08d/inputmanager-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbfe83202e0987c4a901113ea6d6f670987170b350a89faf9b346c00ace0e08d",
        "md5": "055e958c644b499c262f06715595296b",
        "sha256": "eafc8e0401fae0fc7141f48d0a152ddca4dc53866d4febcf91edc0bf104cc068"
      },
      "downloads": -1,
      "filename": "inputmanager-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "055e958c644b499c262f06715595296b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5367,
      "upload_time": "2021-11-20T16:59:44",
      "upload_time_iso_8601": "2021-11-20T16:59:44.263447Z",
      "url": "https://files.pythonhosted.org/packages/bb/fe/83202e0987c4a901113ea6d6f670987170b350a89faf9b346c00ace0e08d/inputmanager-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}