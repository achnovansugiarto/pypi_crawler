{
  "info": {
    "author": "Kamal Sharma",
    "author_email": "kamaldgrt@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# KamalSQL\n\nKamal's version of a Python wrapper for MySQL database stuff.\n\n## Installation\n\nTo install the `kamalsql` package, you can execute the below command.\n\n```\npip install kamalsql\n```\n\nIf you have already installed `kamalsql` and would like to upgrade\nto the latest version you could do this:\n\n```\npython -m pip install --upgrade kamalsql\n```\n\n## Usage\n\nBefore getting into how to use this, here is the database info for the\nbelow examples.\n\n-   Tables present: `department`, `student`\n-   Table description of `department`\n\n    | Field | Type        | Null | Key | Default | Extra |\n    | ----- | ----------- | ---- | --- | ------- | ----- |\n    | sname | varchar(20) | YES  |     | NULL    |       |\n    | regno | varchar(20) | YES  |     | NULL    |       |\n    | m1    | int(11)     | YES  |     | NULL    |       |\n    | m2    | int(11)     | YES  |     | NULL    |       |\n\n### For the connection to the database\n\n```py\nfrom kamalsql import KamalSQL\n\ndb = KamalSQL(\n    host='localhost',\n    user='username',\n    password='mypassword',\n    database='mydatabase'\n)\n```\n\nWhen you establish a connection in the above way, the auto-commit\nfeature is disabled by default. If you would like to auto-commit\nthe transactions, you can establish the connection is the following\nway:\n\n```py\nfrom kamalsql import KamalSQL\n\ndb = KamalSQL(\n    host='localhost',\n    user='username',\n    password='mypassword',\n    database='mydatabase',\n    autocommit=True\n)\n```\n\nYou could also check the connection status using the `status()` function:\n\n```py\nprint(db.status())\n```\n\nIf the connection is established, you will get this:\n\n```\nConnection Successful\n```\n\nIf not, this:\n\n```\nConnection Unsuccessful\n```\n\n### List out the tables present in the database\n\nYou can get the tables present in the database using the\n`showTables()` function.\n\n```py\ntables = db.showTables()\nprint(tables)\n```\n\n##### Output\n\n```\n['department', 'student']\n```\n\n### Describing the Table\n\nThere are a couple of ways you could do this:\n\n-   using `describeTable()`\n-   using `fancyDescribeTable()`\n\n#### using `describeTable()`\n\nThe `describeTable()` returns a list with the description in the form of\ntuples. So, to make it more readable, one has to use a loop.\n\n```py\ndescription = db.describeTable('department')\nfor info in description:\n    print(info)\n```\n\n##### Output\n\n```\n('Field', 'Type', 'Null', 'Key', 'Default', 'Extra')\n('sname', 'varchar(20)', 'YES', '', None, '')\n('regno', 'varchar(20)', 'YES', '', None, '')\n('m1', 'int(11)', 'YES', '', None, '')\n('m2', 'int(11)', 'YES', '', None, '')\n```\n\n#### using `fancyDescibeTable()`\n\nHere we are using the `tabulate` module to pretty-print the\ntable description.\n\n```py\ndescription = db.fancyDescribeTable('department')\nprint(description)\n```\n\n##### Output\n\n```\n╒═════════╤═════════════╤════════╤═══════╤═══════════╤═════════╕\n│ Field   │ Type        │ Null   │ Key   │ Default   │ Extra   │\n╞═════════╪═════════════╪════════╪═══════╪═══════════╪═════════╡\n│ sname   │ varchar(20) │ YES    │       │           │         │\n├─────────┼─────────────┼────────┼───────┼───────────┼─────────┤\n│ regno   │ varchar(20) │ YES    │       │           │         │\n├─────────┼─────────────┼────────┼───────┼───────────┼─────────┤\n│ m1      │ int(11)     │ YES    │       │           │         │\n├─────────┼─────────────┼────────┼───────┼───────────┼─────────┤\n│ m2      │ int(11)     │ YES    │       │           │         │\n╘═════════╧═════════════╧════════╧═══════╧═══════════╧═════════╛\n```\n\n### Inserting values to a table\n\nNow that we know how to establish connection, lets see how to insert\nvalues into a table.\n\n```py\ndb.insert(\n    'department',\n    {\n        'sname': 'Akash',\n        'regno': '391201',\n        'm1': 95,\n        'm2': 96\n    }\n)\n\ndb.insert(\n    'department',\n    {\n        'sname': 'Anish',\n        'regno': '391202',\n        'm1': 92,\n        'm2': 91\n    }\n)\n\ndb.insert(\n    'department',\n    {\n        'sname': 'Bala',\n        'regno': '391203',\n        'm1': 91,\n        'm2': 90\n    }\n)\n\ndb.insert(\n    'department',\n    {\n        'sname': 'Dinesh',\n        'regno': '391204',\n        'm1': 65,\n        'm2': 86\n    }\n)\n```\n\nIf you have not enabled the auto-commit feature, then make sure to use\n`db.commit()` to complete the transaction.\n\n### Viewing the table contents\n\n-   We saw how to insert values.\n-   Now lets check if they have been inserted into the table.\n-   This can be done by invoking the `getAll()` function.\n-   `getAll()` returns a list with dictionary objects.\n\n```py\nrecords = db.getAll('department')\nfor record in records:\n    print(record)\n```\n\n##### Output\n\n```\n{'sname': 'Akash', 'regno': '391201', 'm1': 95, 'm2': 96}\n{'sname': 'Anish', 'regno': '391202', 'm1': 92, 'm2': 91}\n{'sname': 'Bala', 'regno': '391203', 'm1': 91, 'm2': 90}\n{'sname': 'Dinesh', 'regno': '391204', 'm1': 65, 'm2': 86}\n```\n\n-   By default, if you pass just the table name, it will select all the\n    columns.\n-   If you wish to view the above output in a tabular format, then you\n    could use `tableFormatRows()` to do the same.\n\n```py\nrows = db.getAll('department')\ntable = db.tableFormatRows(rows)\nprint(table)\n```\n\n##### Output\n\n```\nsname      regno    m1    m2\n-------  -------  ----  ----\nAkash     391201    95    96\nAnish     391202    92    91\nBala      391203    91    90\nDinesh    391204    65    86\n```\n\n-   See, I know that the above statements can be combined to form a one-liner\n    like this: `print(db.tableFormatRows(db.getAll('department')))` but,\n    for the sake of simplicity and to make things more clearer, I am doing it\n    in that way.\n\n-   If you would like to add a few more conditions, then you could invoke\n    the `getAll()` function in this way:\n\n```py\nrows = db.getAll(\n    'department',                    # Table to be selected\n    ['regno', 'sname'],              # Columns to display\n    (\"regno >= %s and regno <= %s\",  # WHERE clause\n        ['391201', '391204']         # values for the arguments used in WHERE\n    ),\n    [\"regno\", \"asc\"],                # ORDER BY regno asc\n    [0, 2]                           # LIMIT 0, 2\n)\n\nfor row in rows:\n    print(row)\n\nprint('\\nTabular Format: \\n')\nprint(db.tableFormatRows(rows))\n```\n\n##### Output\n\n```\n{'regno': '391201', 'sname': 'Akash'}\n{'regno': '391202', 'sname': 'Anish'}\n\nTabular Format:\n\n\n  regno  sname\n-------  -------\n 391201  Akash\n 391202  Anish\n```\n\n### Updating the values\n\n-   We saw how to insert and the various ways to see the table's content.\n-   Now, lets see how to update existing values.\n-   Note: Don't forget to give the `WHERE` condition. If you don't provide\n    that, the update condition will get applied to the entire table.\n\n```py\ndb.update(\n    'department',                 # The table\n    {                             # The new values\n        \"sname\": \"Frank\",\n        \"regno\": \"391205\"\n    },\n    (\"regno = %s\", ['391204'])    # the WHERE condition.\n)\n\nrows = db.getAll('department')\nprint(db.tableFormatRows(rows))\n```\n\n##### Output\n\n```\nsname      regno    m1    m2\n-------  -------  ----  ----\nAkash     391201    95    96\nAnish     391202    92    91\nBala      391203    91    90\nFrank     391205    65    86\n```\n\n### Deleting record(s)\n\n-   We saw how to insert, view and the various ways to see the table's content.\n-   Now, lets see how to remove record(s).\n-   Note: Don't forget to give the `WHERE` condition. If you don't provide\n    that, the `DELETE` condition will get applied to the entire table.\n\n```py\ndb.delete(\n    'department',               # Table involved\n    (\"regno = %s\", ['391205'])  # the WHERE clause\n)\n\nrows = db.getAll('department')\nprint(db.tableFormatRows(rows))\n```\n\n```\nsname      regno    m1    m2\n-------  -------  ----  ----\nAkash     391201    95    96\nAnish     391202    92    91\nBala      391203    91    90\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KamalDGRT/kamalsql",
    "keywords": "Simple,Functional,Dependable",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kamalsql",
    "package_url": "https://pypi.org/project/kamalsql/",
    "platform": "",
    "project_url": "https://pypi.org/project/kamalsql/",
    "project_urls": {
      "Homepage": "https://github.com/KamalDGRT/kamalsql"
    },
    "release_url": "https://pypi.org/project/kamalsql/1.0.0/",
    "requires_dist": [
      "mysql-connector",
      "tabulate"
    ],
    "requires_python": "",
    "summary": "A simple Python wrapper for your MySQL needs.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11293756,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb06ca9060db55bb65c66b33e2c56d82483f434cca1c2e98d8e63ad99f7aa23c",
          "md5": "5c0fe7ce0602702958620cb0745821d9",
          "sha256": "9ede74e1c4de75c9cc8a771647bca2fa5d90a52f7c33c8df95c86dc5b4920b89"
        },
        "downloads": -1,
        "filename": "kamalsql-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c0fe7ce0602702958620cb0745821d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3231,
        "upload_time": "2021-08-19T19:25:44",
        "upload_time_iso_8601": "2021-08-19T19:25:44.466641Z",
        "url": "https://files.pythonhosted.org/packages/bb/06/ca9060db55bb65c66b33e2c56d82483f434cca1c2e98d8e63ad99f7aa23c/kamalsql-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82a942da27a8c76c00044aa998a7dfc4d5ab74e13026ece0b0483ba0e02f6e7a",
          "md5": "88014ad89e91055fe3d75f02bb0549ea",
          "sha256": "b01e861c40ec4fde840bd3961379c164aae11801cb7950ed2594af9375b1aec8"
        },
        "downloads": -1,
        "filename": "kamalsql-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88014ad89e91055fe3d75f02bb0549ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2590,
        "upload_time": "2021-08-19T19:25:46",
        "upload_time_iso_8601": "2021-08-19T19:25:46.309985Z",
        "url": "https://files.pythonhosted.org/packages/82/a9/42da27a8c76c00044aa998a7dfc4d5ab74e13026ece0b0483ba0e02f6e7a/kamalsql-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "687d7172ea3cea8bf96bd1b837847525a097cd689b3a376ab96ef9ee567968af",
          "md5": "daa1d9b4b3d344b09bc7264eb131889c",
          "sha256": "1bb90a0a01cd501f55c2e681002952a463c4c1f112daf81665734127037f1db4"
        },
        "downloads": -1,
        "filename": "kamalsql-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "daa1d9b4b3d344b09bc7264eb131889c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3558,
        "upload_time": "2021-08-24T20:41:39",
        "upload_time_iso_8601": "2021-08-24T20:41:39.630357Z",
        "url": "https://files.pythonhosted.org/packages/68/7d/7172ea3cea8bf96bd1b837847525a097cd689b3a376ab96ef9ee567968af/kamalsql-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a71a991a8b887dca3b4cd4b26c76b3364ceb4fcc8fda68c88b241f3ff5984f22",
          "md5": "2190234bf267d33ddcff6b6473b361b3",
          "sha256": "6bdea094d2873365d9d28a01286a999058aee0eea2e0d961db6ccabb40963a72"
        },
        "downloads": -1,
        "filename": "kamalsql-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2190234bf267d33ddcff6b6473b361b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3202,
        "upload_time": "2021-08-24T20:41:41",
        "upload_time_iso_8601": "2021-08-24T20:41:41.258809Z",
        "url": "https://files.pythonhosted.org/packages/a7/1a/991a8b887dca3b4cd4b26c76b3364ceb4fcc8fda68c88b241f3ff5984f22/kamalsql-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab5c6054b05b3b69ec45a3c5c3199090eba250677984106ba9b6fb8ee8d67d49",
          "md5": "34637667cb524b398fe2213d15c12f60",
          "sha256": "d05810b8a992a8dde3367214e4bce45ec35ecfc44aa055845349d3c2bc426b71"
        },
        "downloads": -1,
        "filename": "kamalsql-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34637667cb524b398fe2213d15c12f60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4452,
        "upload_time": "2021-08-25T22:08:05",
        "upload_time_iso_8601": "2021-08-25T22:08:05.867792Z",
        "url": "https://files.pythonhosted.org/packages/ab/5c/6054b05b3b69ec45a3c5c3199090eba250677984106ba9b6fb8ee8d67d49/kamalsql-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd0bf2736cae0a3aa967f55a39c443fdd61360a031a6245b1426676d13ad773b",
          "md5": "964cf4bf95c4e3f5453722e9a26f97de",
          "sha256": "ecee19522629909f49e281c6ba6b565659b266f5291718fdf42fc6b0b3a9f607"
        },
        "downloads": -1,
        "filename": "kamalsql-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "964cf4bf95c4e3f5453722e9a26f97de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4116,
        "upload_time": "2021-08-25T22:08:06",
        "upload_time_iso_8601": "2021-08-25T22:08:06.937433Z",
        "url": "https://files.pythonhosted.org/packages/cd/0b/f2736cae0a3aa967f55a39c443fdd61360a031a6245b1426676d13ad773b/kamalsql-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a8fdd2722fb0b9e76df6e5048634490ba0a0667832711dd796320281f9a17f6",
          "md5": "c6f3d0377634a6f22c30789f07329b82",
          "sha256": "552b840b87ecfb551ae38754061eddde72bb8b900f21660e59dc0a649853078d"
        },
        "downloads": -1,
        "filename": "kamalsql-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6f3d0377634a6f22c30789f07329b82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6845,
        "upload_time": "2021-08-27T10:40:36",
        "upload_time_iso_8601": "2021-08-27T10:40:36.706959Z",
        "url": "https://files.pythonhosted.org/packages/1a/8f/dd2722fb0b9e76df6e5048634490ba0a0667832711dd796320281f9a17f6/kamalsql-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d400245294be3fd071b16aa1ae74fee7622516b09056b23bd93d20dbf4bb8d3",
          "md5": "8b26098d12663163e0e3010568ffba67",
          "sha256": "a3f6bdfa4b62388d502786e5cc96e65aa6d0dbedae8de0c418bcc8d1545ef483"
        },
        "downloads": -1,
        "filename": "kamalsql-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8b26098d12663163e0e3010568ffba67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6973,
        "upload_time": "2021-08-27T10:40:38",
        "upload_time_iso_8601": "2021-08-27T10:40:38.043560Z",
        "url": "https://files.pythonhosted.org/packages/8d/40/0245294be3fd071b16aa1ae74fee7622516b09056b23bd93d20dbf4bb8d3/kamalsql-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a8fdd2722fb0b9e76df6e5048634490ba0a0667832711dd796320281f9a17f6",
        "md5": "c6f3d0377634a6f22c30789f07329b82",
        "sha256": "552b840b87ecfb551ae38754061eddde72bb8b900f21660e59dc0a649853078d"
      },
      "downloads": -1,
      "filename": "kamalsql-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c6f3d0377634a6f22c30789f07329b82",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6845,
      "upload_time": "2021-08-27T10:40:36",
      "upload_time_iso_8601": "2021-08-27T10:40:36.706959Z",
      "url": "https://files.pythonhosted.org/packages/1a/8f/dd2722fb0b9e76df6e5048634490ba0a0667832711dd796320281f9a17f6/kamalsql-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d400245294be3fd071b16aa1ae74fee7622516b09056b23bd93d20dbf4bb8d3",
        "md5": "8b26098d12663163e0e3010568ffba67",
        "sha256": "a3f6bdfa4b62388d502786e5cc96e65aa6d0dbedae8de0c418bcc8d1545ef483"
      },
      "downloads": -1,
      "filename": "kamalsql-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8b26098d12663163e0e3010568ffba67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6973,
      "upload_time": "2021-08-27T10:40:38",
      "upload_time_iso_8601": "2021-08-27T10:40:38.043560Z",
      "url": "https://files.pythonhosted.org/packages/8d/40/0245294be3fd071b16aa1ae74fee7622516b09056b23bd93d20dbf4bb8d3/kamalsql-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}