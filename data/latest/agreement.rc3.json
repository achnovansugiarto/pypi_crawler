{
  "info": {
    "author": "Wojciech WÅ‚odarczyk",
    "author_email": "wlodarczyk.woj@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Agreement [![Build Status](https://travis-ci.com/heolin123/agreement.svg?branch=master)](https://travis-ci.com/heolin123/agreement)\n\n## Inter-rater agreement\nAgreement library provides an implementation of popular metrics used to measure inter-rater agreement.\nInter-rater agreement (know also as a inter-rater reliability) is used to describe the degree of agreement among raters.\nIt is a score of how much homogeneity or consensus exists in the ratings given by various judges.\n\nIf you want to learn more about this topic, you can start by reading this [Wikipedia](https://en.wikipedia.org/wiki/Inter-rater_reliability) page.\n\n### Implemented metrics\nThis library provides a pure numpy implementation of an extended formulas for following metrics:\n\n- **Observed agreement**\n- **Bennett et al.'s S score**\n- **Cohen's kappa**\n- **Gwet's gamma**\n- **Krippendorff alpha**\n- **Scott's pi**\n\nAnd extended formulas can be used to measure agreement for;\n- **multiple raters** - support for two or more raters,\n- **multiple categories** - support for binary problems, as well as more categories,\n- **missing ratings** - not all raters provided answers for all the questions.\n- **weighted agreement** - used to model distance between categories (e.g. `dist(5, 4) < dist(5, 1)`)\n\nMore information about implemented metrics can be found here: TODO\n\n### Implemented weights kernels\nAgreement provides implementations for eight weight kernels:\n\n- **identity kernel** \n- **linear kernel**\n- **quadratic kernel**\n- **ordinal_kernel**\n- **radical_kernel**\n- **radio_kernel**\n- **circular_kernel**\n- **bipolar_kernel**\n\nMore information about implemented weights kernels can be found here: TODO\n\n## Installation\nAgreement can be installed via pip from [PyPI](https://pypi.org/project/agreement/).\n \n```bash\npip install agreement\n```\n\n## Example usage\n#### 1. Prepare dataset\nLet's assume you have a dataset in a format of a matrix with three columns: `question id`, `rater id` and `answer`. \n\n```python\nimport numpy  as np\n\ndataset = np.array([\n    [1, 1, 'a'],\n    [1, 2, 'a'],\n    [1, 3, 'c'],\n    [2, 1, 'a'],\n    [2, 2, 'b'],\n    [2, 3, 'a'],\n    [3, 1, 'c'],\n    [3, 2, 'b'],\n])\n```\n#### 2. Transform dataset into matrices\nIn the next step we want to transform the dataset into matrices in a form accepted by the metrics functions.\n\nMost of the matrices require a \"questions answers\" matrix, which contains a frequency of answers for each question.\nSo more formally we could say `M = I x A`, where `I` is a list of all items and `A` is a list of all possible answers.\nMatrix element `M_ij` represents how many times answer `j` was chosen for the questions `i`.\n\nThe second matrix can be required (currently it is only required by the Cohen's kappa metrics) is \"users answers\" matrix, which\ncontains a frequency of answers selected by each user.\nSo more formally we could say `M = U x A`, where `U` is a list of all users and `A` is a list of all possible answers.\nMatrix element `M_ij` represents how many times answer `j` was chosen for the user `i`.\n\nThe library provides a helper functions that can be used to prepare that.\n\n```python\nfrom agreement.utils.transform import pivot_table_frequency\n\nquestions_answers_table = pivot_table_frequency(dataset[:, 0], dataset[:, 2])\nusers_answers_table = pivot_table_frequency(dataset[:, 1], dataset[:, 2])\n```\n\n#### 3. Select kernel\nWeights are used to model situations, where categories are represented as (at least) ordinal data.\nUsing this approach, the agreement between raters is not binary, but it differs depending on the\nweights between chosen categories.\n\nThere is no formal rule that can be used for deciding which set weights should be used\nin a particular study, so it all depends on your problem and the data your are working with.\n\nIn a default, metrics are using the `identity_kernel`, which do not provide any weighting between the answers.\nIf you want to use an alternative kernel, you can import it from:\n\n```python\nfrom agreement.utils.kernels import linear_kernel\n```\n\n#### 4. Compute the metric\nThe last step is to chose the metric you want to compute and run following code:\n```python\nfrom agreement.metrics import cohens_kappa, krippendorffs_alpha\n\nkappa = cohens_kappa(questions_answers_table, users_answers_table)\nweighted_kappa = cohens_kappa(questions_answers_table, users_answers_table, weights_kernel=linear_kernel)\n\nalpha = krippendorffs_alpha(questions_answers_table)\n```\n\nFor more detailed example see: TODO\n\n## Reference\nAll equations are based on the Handbook of Inter-Rater ReLiability, Kilem Li. Gwet, 2014.\nThis book provides an extensive explanation to all topics related to inter-rater agreement.\nThe book provides a detailed description of all metrics implemented in this library, as well as \nan example datasets that were used to this this implementation.\n\nI also recommend taking a look at MatLab implementation of the same metrics [mReliability](https://github.com/jmgirard/mReliability),\nwhich provides a more detailed explanation of metrics' formulas then the one you will find here.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/heolin123/agreement",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "agreement",
    "package_url": "https://pypi.org/project/agreement/",
    "platform": null,
    "project_url": "https://pypi.org/project/agreement/",
    "project_urls": {
      "Bug Tracker": "https://github.com/heolin123/agreement/issues",
      "Homepage": "https://github.com/heolin123/agreement"
    },
    "release_url": "https://pypi.org/project/agreement/0.1.1/",
    "requires_dist": [
      "numpy (>=1.20.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "An implementation of popular agreement coefficients used for categorical measurements.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13385858,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52cff3b52aa02b8c41e4b034819a53bd6b7ef417edd1a8df91d0b9f92f8ec9c9",
          "md5": "842336943b85d24a9b58e3ae2b98a0c5",
          "sha256": "2a1785e454a06be47235fac885678ebedd8f5ff8749005c9ef7b29fd8d5cd486"
        },
        "downloads": -1,
        "filename": "agreement-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "842336943b85d24a9b58e3ae2b98a0c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15321,
        "upload_time": "2021-03-28T00:47:40",
        "upload_time_iso_8601": "2021-03-28T00:47:40.339420Z",
        "url": "https://files.pythonhosted.org/packages/52/cf/f3b52aa02b8c41e4b034819a53bd6b7ef417edd1a8df91d0b9f92f8ec9c9/agreement-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6200c19d47b75eb0791fd62e4d256c25f59649f68bf1fdfe7f4fd73cc7e60398",
          "md5": "d79fdee0e6555441bcad055f2b7108ca",
          "sha256": "66a3b361c7fdf49cb209833cf61b69adb90098223f2b7872eae42219870fbd0b"
        },
        "downloads": -1,
        "filename": "agreement-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d79fdee0e6555441bcad055f2b7108ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2586,
        "upload_time": "2021-03-28T00:47:41",
        "upload_time_iso_8601": "2021-03-28T00:47:41.773774Z",
        "url": "https://files.pythonhosted.org/packages/62/00/c19d47b75eb0791fd62e4d256c25f59649f68bf1fdfe7f4fd73cc7e60398/agreement-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a1b6554b103306f28f5f27a39010c44628a104f62b723a3fbb7fac5ac66a6f7",
          "md5": "6c15507de3d3558d275240a7982e9749",
          "sha256": "cdea35104d97554aac03da2e6f290a65326dc0e6044398c6fa7c2ba7ea0e3b25"
        },
        "downloads": -1,
        "filename": "agreement-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c15507de3d3558d275240a7982e9749",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19048,
        "upload_time": "2021-04-01T00:26:13",
        "upload_time_iso_8601": "2021-04-01T00:26:13.704515Z",
        "url": "https://files.pythonhosted.org/packages/0a/1b/6554b103306f28f5f27a39010c44628a104f62b723a3fbb7fac5ac66a6f7/agreement-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6a88dbe4b730c044e62207a0fd25ec718614da70c52b44373642d71c7efb9b8",
          "md5": "c95993917a30ab88450f6da581d6c56a",
          "sha256": "8af4ee5cbc5d168bae4a2d98ffc99eefffefc4c86ae62c8ae81e62070308707f"
        },
        "downloads": -1,
        "filename": "agreement-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c95993917a30ab88450f6da581d6c56a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8207,
        "upload_time": "2021-04-01T00:26:15",
        "upload_time_iso_8601": "2021-04-01T00:26:15.310623Z",
        "url": "https://files.pythonhosted.org/packages/c6/a8/8dbe4b730c044e62207a0fd25ec718614da70c52b44373642d71c7efb9b8/agreement-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8328c1728b4b28b13b058d0887d210e85382fc1b7808eba6d4870b7d174cca94",
          "md5": "0df779110999de5fb9acf72027ceda89",
          "sha256": "1c50313a7456e92b3f09e92b310775fc3b4e6ed7259786effcdf1fca134f3a05"
        },
        "downloads": -1,
        "filename": "agreement-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0df779110999de5fb9acf72027ceda89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19068,
        "upload_time": "2022-04-02T19:46:13",
        "upload_time_iso_8601": "2022-04-02T19:46:13.370506Z",
        "url": "https://files.pythonhosted.org/packages/83/28/c1728b4b28b13b058d0887d210e85382fc1b7808eba6d4870b7d174cca94/agreement-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f83b7ddc2673d3776eece328ffe73686013d03f4ceacccc6c3d506c7a7c7d33",
          "md5": "f4aa08518debb0e02f422521b580cd02",
          "sha256": "ae36a7a68b6d77a93d3982a3d22c079f97780a6a0462fa2d82c7faa29c9507ac"
        },
        "downloads": -1,
        "filename": "agreement-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f4aa08518debb0e02f422521b580cd02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19772,
        "upload_time": "2022-04-02T19:46:16",
        "upload_time_iso_8601": "2022-04-02T19:46:16.729953Z",
        "url": "https://files.pythonhosted.org/packages/5f/83/b7ddc2673d3776eece328ffe73686013d03f4ceacccc6c3d506c7a7c7d33/agreement-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8328c1728b4b28b13b058d0887d210e85382fc1b7808eba6d4870b7d174cca94",
        "md5": "0df779110999de5fb9acf72027ceda89",
        "sha256": "1c50313a7456e92b3f09e92b310775fc3b4e6ed7259786effcdf1fca134f3a05"
      },
      "downloads": -1,
      "filename": "agreement-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0df779110999de5fb9acf72027ceda89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19068,
      "upload_time": "2022-04-02T19:46:13",
      "upload_time_iso_8601": "2022-04-02T19:46:13.370506Z",
      "url": "https://files.pythonhosted.org/packages/83/28/c1728b4b28b13b058d0887d210e85382fc1b7808eba6d4870b7d174cca94/agreement-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f83b7ddc2673d3776eece328ffe73686013d03f4ceacccc6c3d506c7a7c7d33",
        "md5": "f4aa08518debb0e02f422521b580cd02",
        "sha256": "ae36a7a68b6d77a93d3982a3d22c079f97780a6a0462fa2d82c7faa29c9507ac"
      },
      "downloads": -1,
      "filename": "agreement-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f4aa08518debb0e02f422521b580cd02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19772,
      "upload_time": "2022-04-02T19:46:16",
      "upload_time_iso_8601": "2022-04-02T19:46:16.729953Z",
      "url": "https://files.pythonhosted.org/packages/5f/83/b7ddc2673d3776eece328ffe73686013d03f4ceacccc6c3d506c7a7c7d33/agreement-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}