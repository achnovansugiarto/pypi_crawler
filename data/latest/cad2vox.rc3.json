{
  "info": {
    "author": "Ben Thorpe",
    "author_email": "b.j.thorpe@swansea.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Details\nCad2Vox is a Python package to efficiently perform mesh voxelisation on GPU (using CUDA) or CPU (using OpenMP) for surface and volume cad meshes based on triangles and tetrahedrons respectively.\n\nThe code itself consists of two Python packages, cad2vox and Cudavox. CudaVox is a python package that provides bindings to c++ code using pybind11 and xtensor python (using CUDA to perform calculations on a GPU and OpenMP to perfrom them in parallel on a multi-core CPU). Cad2vox meanwhile is a pure python package that reads in and wrangles the mesh/greyscale data using meshio and acts as a user interface to Cudavox.\n\nThis project is a fork of cuda_voxelizer (https://github.com/Forceflow/cuda_voxelizer) the original plan was to simply add bindings to allow us to call it from python. However as my research project progressed the code has since ballooned into its own thing (adding support for volume meshes and using meshio and xtensor instead of trimesh). Thus it feels more appropriate to release it as a standalone project.\n\nFor Surface meshes (based on triangles) CudaVox implements an optimised version of the method described in M. Schwarz and HP Seidel's 2010 paper [*Fast Parallel Surface and Solid Voxelization on GPU's*](http://research.michael-schwarz.com/publ/2010/vox/).\n\nFor volume meshes (based on Tetrahedrons) it uses a simple algorithm to check if a point P (taken as the centre of the voxel) is inside a tetrahedron defined by 4 vertices (A,B,C,D). This is achieved by calculating  the normal of the four triangles that make up the surface of the tetrahedron. Since these vectors will all point away from the centre of the tetrahedron we can simply check to see if the point P is on the opposite side of the plane for each of the four triangles. if this is true for all 4 planes then the point must be inside the tetrahedron (see https://stackoverflow.com/questions/25179693/how-to-check-whether-the-point-is-in-the-tetrahedron-or-not/51733522#51733522 for examples of this algorithm implemented in python).\n\n## Installing\ncad2vox and CudaVox are both avalible as pip packages through pypi and as such can be installed with:\n```bash\npip install cad2vox\n```\n\nNote: CudaVox is listed a requirement for cad2vox so will be installed automatically by pip.\n\n## Building from source\n\n### Dependencies\nThe project has the following build dependencies:\n * [GLM](http://glm.g-truc.net/0.9.8/index.html) for vector math. Any recent version will do.\n * [OpenMP](https://www.openmp.org/)\n * [Python](https://www.python.org/) version 3.6 or higher.\n\nIt also has the following optional dependency (see building without CUDA for details):\n* [Nvidia Cuda 8.0 (or higher)](https://developer.nvidia.com/cuda-toolkit) for CUDA + Thrust libraries.\n\n You will also need the following python packages:\n * cmake\n * numpy\n * pybind11\n * tifffile\n * xtensor\n * xtl\n * xtensor-python\n * meshio\n * pytest\n * pandas\n * pillow\n\nWe recommend using [anaconda](https://anaconda.org/) as the python dependencies are all available through the conda package manager (as well as CUDA through cudatookit). These can be installed with the following two commands.\n\n```bash\nconda install cmake numpy pybind11 tifffile pillow cudatoolkit pandas\n\nconda install -c conda-forge xtensor xtl meshio xtensor-python\n```\n\nIf however, you wish to use pure python many of the packages are available through pip and you can obtain them using:\n```bash\npip install -r requirements.txt\n```\nYou will however, need to build xtl, xtensor and xtensor-python from source using cmake. Instructions for which can be found here:\n\n* [Xtl](https://github.com/xtensor-stack/xtl)\n* [Xtensor](https://github.com/xtensor-stack/xtensor)\n* [Xtensor-python](https://github.com/xtensor-stack/xtensor-python)\n\nOnce you have the dependencies installed you can use the setup.py scripts to build and install the two packages as:\n\n```bash\ncd CudaVox\npip install .\n\ncd ..\npip install .\n```\n### Building without CUDA\n\nIt is possible to build cad2vox without CUDA or a GPU. To do this simply install all the requirments except CUDA (or cudatoolkit if using ananconda)\nand build as above i.e.\n\n```bash\ncd CudaVox\npip install .\n\ncd ..\npip install .\n```\n\nWhen building CudaVox Cmake will detect if CUDA is installed and configured corectly. If Cmake finds a sutible instalation of CUDA It will then automatically include all the aditional sorce and headerfiles nessacry to perfrom caculations on ether the GPU or CPU. If CUDA is not installed it will compile CudaVox to do caculations on the CPU only, using OpenMP. This is intened to provide options to the end user as CUDA is a rather large (not to mention proprietary) depenedecy that some users may not want/need.\n\nThe OpenMP version is by comparison considerably slower, however, OpenMP is much more compatible and not tied to Nvidia hardware (pretty much any modern CPU and compiler should suport OpenMP out of the box). OpenMP is also useful for calculations that wont fit in VRAM. Given that the memory requirements are in our experiance the main bottleneck and the required memory also scales cubically with Gridsize. Memory can very quickly become a limiting factor.\n\n## Automated testing\n\nIt is good practice once Cad2vox is built and installed to test the functionallity. To this end we have included an automated test suite using pytest that can be run as follows in the root directory of cad2vox:\n\n```bash\npytest\n```\nThis will test the code under a variety of differnt senarios and if your setup is working correctly should all pass (for those curious souls who wish to see what we are testing the test functions are stored in the tests sub directory).\n\nNote: if you are **NOT USING CUDA** some of the tests may fail. However, you can skip any tests related to CUDA with:\n\n```bash\npytest -k \"not CUDA\"\n```\n\n## Usage\n\nThe main user facing python function from Cad2Vox is voxelise.\n\nThe information about how to call/use the voxelise function can be viewed at anytime through python by calling:\n\n```python\nimport cad2vox\nhelp(cad2vox.voxelise)\n```\n    Wrapper Function to setup the CudaVox python bindings for the C++ code and provide the main user\n    interface.\n\n    This function will first try to perform the voxelisation using a CUDA capable GPU. If that fails\n    or CUDA is unavailable it will fallback to running on CPU with the maximum number of available \n    threads.\n    \n    Parameters:\n    input_file (string): Hopefully self explanatory, Our recommended (i.e. tested) format is Salome\n    med. However, theoretically any of the approx. 30 file formats supported by meshio will\n    work. Provided they are using either tetrahedrons or triangles as there element type\n    (see https://github.com/nschloe/meshio for the full list).\n    \n    output_file (string): Filename for output as 8 bit greyscale images. Note do not include the\n    extension as it will automatically be appended based on the requested image format.\n    The default is a virtual tiff stack other formats can be selected with the im_format option.\n    \n    gridsize (list of 3 +ve non-zero ints): Number of voxels in each axis orientated as [x,y,z] \n    the resulting output will be a series of z images with x by y pixels.\n\n    unit_length (list of 3 +ve non-zero floats): size of each voxel in mesh co-ordinate space.\n\n    *****************************************************************************************\n      Note: You need to set at least one of unit_length or Gridsize.\n      If you set a Gridsize but do not set unit_length it will calculate unit length for you \n      with the image boundaries based on the max and min of the mesh. \n                                              \n      Similarly, if you a unit_length but not GridSize it will calculate the number of\n      voxels in each dimension for you, again with the image boundaries based on max and min \n      of the mesh.\n      \n      You can also define BOTH, in which case the size of the image boundary will be \n      automatically calculated as Gridsize*unit_length. Note: you may also want to define the\n      optional parameter Bbbox_centre.\n    *****************************************************************************************\n    \n    Optional kwargs:\n\n    greyscale_file (string/None): csv file for defining custom Greyscale values. If not given the\n    code evenly distributes greyscale values from 0 to 255 across all materials defined in the\n    input file. It also auto-generates a file 'greyscale.csv' with the correct formatting which\n    you can then tweak to your liking.\n\n    use_tetra (bool): flag to specifically use Tetrahedrons instead of Triangles. This only applies\n    in the event that you have multiple element types defined in the same file. Normally the code\n    defaults to triangles however this flag overrides that.\n    \n    cpu (bool): Flag to ignore any CUDA capable GPUS and instead use the OpenMp implementation.\n    By default the code will first check for GPUS and only use OpenMP as a fallback. This flag\n    overrides that and forces the use of OpenMP. Note: if you wish to use CPU permanently, \n    as noted in the build docs, you can safely compile CudaVox without CUDA in which case the code\n    simply skips the CUDA check altogether and permanently runs on CPU.\n    \n    Solid (bool): This Flag can be set if you want to auto-fill the interior when using a Surface\n    Mesh (only applies to Triangles). If you intend to use this functionality there are three\n    Caveats to briefly note here:\n    \n    1) This flag will be ignored if you only supply Tetrahedron data or set use_tetra since in\n    both cases that is by definition not a surface mesh.\n    \n    2) The algorithm currently used is considerably slower and not robust (can lead to artifacts and\n    holes in complex meshes).\n    \n    3) Setting this flag turns off greyscale values (background becomes 0 and the mesh becomes 255).\n    This is because we dont have any data as to what materials are inside the mesh so this seems a\n    sensible default.\n\n    The only reason 2 and 3 exist is because this functionality is not actively being used by our\n    team so there has been no pressing need to fix them. However, if any of these become an\n    issue either message b.j.thorpe@swansea.ac.uk or raise an issue on git repo as they can easily\n    be fixed and incorporated into a future release.\n\n    im_format (string): The default output is a virtual Tiff stack. This option however, when set \n    allows you to output each slice as a separate image in any format supported by Pillow\n    (see https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html for the full\n    list). Simply specify the format you require as a sting e.g. im_format=\"png\".\n\n    Note: by default you will get a series of z images in the x-y plane. However, you can also control\n    the slice orientation with the \"orientation\" option.\n\n    Num_Threads: number of threads used by OMP in cpu calculations.  Note: this is ignored if cpu flag is\n    set to false and a suitable cuda capable gpu is detected. \n\n    Bbox_Centre: location of the centre of the image boundary box. The default is \"mesh\" which centres \n    the image over the mesh. you can optionally define this as any point in 3D space using a list of \n    three floating point numbers [x,y,z] (in mesh units). Note to use this you will need to define both\n    Gridsize AND Unit_length as these are used to calculate the size of the box.\n\n    Orientation (String): String to define the orientation of the output images when using pillow. \n    Default is \"XY\" must be one of \"XY\",\"XZ\" or \"YZ\".\n    \n## Citation\nIf you use Cad2Vox in your published paper or other software, please reference it, for example as follows:\n<pre>\n@Misc{CAD2VOX,\nauthor = \"Dr Benjamin Thorpe\",\ntitle = \"Cad2Vox\",\nhowpublished = \"\\url{https://github.com/bjthorpe/Cad2vox}\",\nyear = \"2022\"}\n</pre>\nIf you end up using Cad2Vox in something cool I'd be interested to hear about it so feel free to drop me an e-mail: **b,.j.thorpe@swansea.ac.uk**\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bjthorpe/Cad2vox",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cad2vox",
    "package_url": "https://pypi.org/project/cad2vox/",
    "platform": null,
    "project_url": "https://pypi.org/project/cad2vox/",
    "project_urls": {
      "Homepage": "https://github.com/bjthorpe/Cad2vox"
    },
    "release_url": "https://pypi.org/project/cad2vox/1.7.3/",
    "requires_dist": [
      "CudaVox (>=1.7)",
      "numpy (>=1.19)",
      "meshio",
      "tifffile",
      "pillow (>=8.3)",
      "pandas",
      "cmake (>=3.22.0)",
      "pybind11"
    ],
    "requires_python": ">=3.6",
    "summary": "A python library to provide the user interface for the CudaVox library",
    "version": "1.7.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17143553,
  "releases": {
    "1.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "574062ac6a33b93898b10622fe85b5b1155226ae1f3fe0363ca99b25d8f2bcbd",
          "md5": "331dabaa4e94912b8c52d2ab1939155a",
          "sha256": "1450498121dac4ba9a1f6939bdc565255ff3bacbdfa19ee53d2b78583fe21b6b"
        },
        "downloads": -1,
        "filename": "cad2vox-1.5.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "331dabaa4e94912b8c52d2ab1939155a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12103,
        "upload_time": "2022-06-30T14:37:08",
        "upload_time_iso_8601": "2022-06-30T14:37:08.764296Z",
        "url": "https://files.pythonhosted.org/packages/57/40/62ac6a33b93898b10622fe85b5b1155226ae1f3fe0363ca99b25d8f2bcbd/cad2vox-1.5.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07e7d48c02a40a9a31c1fc54a7ee2a33b4a16ae625d760bb1fea8c4185a513c2",
          "md5": "f6f261c33a8042c492bb2b6f586678c3",
          "sha256": "b6fc66e625bf388fc29dc28dcc9ba7d69a1348899db7a960ed87c407097ba333"
        },
        "downloads": -1,
        "filename": "cad2vox-1.5.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6f261c33a8042c492bb2b6f586678c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6679,
        "upload_time": "2022-07-06T18:39:49",
        "upload_time_iso_8601": "2022-07-06T18:39:49.700889Z",
        "url": "https://files.pythonhosted.org/packages/07/e7/d48c02a40a9a31c1fc54a7ee2a33b4a16ae625d760bb1fea8c4185a513c2/cad2vox-1.5.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5d119dc3c47babf1fc049c4394e74980a14abaa09da4d936e8cd6e0de524d7b",
          "md5": "181a442b2ee58bd607620cf7bce10429",
          "sha256": "59563e3f90cc0a9583c234e010dbda477f24e20846cee8a8d1ce8f2b6da6194c"
        },
        "downloads": -1,
        "filename": "cad2vox-1.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "181a442b2ee58bd607620cf7bce10429",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13937,
        "upload_time": "2023-03-03T12:24:18",
        "upload_time_iso_8601": "2023-03-03T12:24:18.224730Z",
        "url": "https://files.pythonhosted.org/packages/c5/d1/19dc3c47babf1fc049c4394e74980a14abaa09da4d936e8cd6e0de524d7b/cad2vox-1.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5d119dc3c47babf1fc049c4394e74980a14abaa09da4d936e8cd6e0de524d7b",
        "md5": "181a442b2ee58bd607620cf7bce10429",
        "sha256": "59563e3f90cc0a9583c234e010dbda477f24e20846cee8a8d1ce8f2b6da6194c"
      },
      "downloads": -1,
      "filename": "cad2vox-1.7.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "181a442b2ee58bd607620cf7bce10429",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13937,
      "upload_time": "2023-03-03T12:24:18",
      "upload_time_iso_8601": "2023-03-03T12:24:18.224730Z",
      "url": "https://files.pythonhosted.org/packages/c5/d1/19dc3c47babf1fc049c4394e74980a14abaa09da4d936e8cd6e0de524d7b/cad2vox-1.7.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}