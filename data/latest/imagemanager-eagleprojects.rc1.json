{
  "info": {
    "author": "",
    "author_email": "Example Giovanni Gargiulo <ggargiulo@eagleprojects.it>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Package Image Manager\r\n\r\nIl package gestisce gli screenshot\\foto indicati manualmente con un path specifico. Prendendoli, in input, \r\npuo utilizzare tre funzioni che servono rispettivamente a: la prima, ad aspettare un caricamento, cioe' finche non riesce a fare la comparazione tra la foto\\screenshot passato e lo schermo nel trovare l'elemento.\r\nLa seconda a cliccare un elemento che trova con varie opzioni che si possono\r\npassare. La terza ed ultima e' una switch. Cioe' serve ad indicare due foto che, se una fallisce, prova con un altra per trovarla e cliccarla.\r\n\r\n## Prerequisiti\r\n\r\n - **OS**: Windows 11\r\n - **Python** >= 3.6\r\n\r\n## Installazione\r\n\r\n 1. Selezione dell'ambiente virtuale (opzionale)\r\n\r\n    `...\\python-env\\Scripts\\activate`\r\n\r\n 2. Installazione pacchetto\r\n\r\n`pip install \\\\10.1.0.42\\divisioni\\20_RS\\40_RPA\\CustomPythonPackages\\ImageManager\\ImageManager-0.0.1_ggargiulo-py3-none-any.whl`\r\n \r\n 3. Check installazione\r\n\t\t 1.  Aprire il terminale\r\n\t\t 2. Avviare python nell'ambiente virtuale\r\n\t\t 3. Eseguire `import ImageManager`\r\n\t\t 4. In caso di errori, sarÃ  ritornata l'eccezione ModuleNotFoundError\r\n## Import ed uso\r\nimport ImageManager\r\n\r\nexemple_var = ImageManager.ImageManager()\r\n\r\nexmple_var.clickCustom(nome_foto)\r\n\r\n## Funzione ClickCustom\r\n\r\nLa sua funzione principale. Praticamente serve a cliccare l'elemento di cui bisogna indicare il nome_foto della foto dell'elemento da trovare.\r\ne, il package, in automatico lo andra' a cercare.\r\n\r\n    clickCustom(nome_foto) #Default: dove nome_foto e' letteralmente il nome con estensione della foto.\r\n\r\n    clickCustom(nome_foto,x=4,y=4) #cliccare con coordinate: passando la sua x e/o y e' possibile far cliccare un elemento alle coordinate esatte indicate che, chiaramente, partono dalla sua foto. E possono essere passate sia singolarmente che insieme e sia negativamente che positivamente. La misura e' espressa in pixel\r\n\r\n    clickCustom(nome_foto,clicks_number) #Passando al poter indicare al numero di click ,e' possibile, quantificare quanti click deve fare la funzione. Quindi sia doppio che piu'\r\n    \r\n    clickCustom(nome_foto,click_right=True) #Passando al click_right, True, e' possibile dire al package di cliccare col tasto destro sul elemento.\r\n\r\n\r\nNB: nome_foto e' OBBLIGATORIO altrimenti , il package, non saprebbe dove cliccare. \r\n\r\n## Funzione waitLoading\r\n\r\nLa funzione si occupa di aspettare un elemento indicato nella foto passata.\r\nE' possibile utilizzarlo sia per aspettare in modo indefinito finche quel elemento non appare (da usare con attenzione se non si vuole rimanere in un loop infinito). Altrimenti indicando un timeout ben chiaro (\"e' possibile anche non indicarlo. In quel caso, la funzione, aspettera' 240 secondi di default)\r\n\r\n    waitLoading(nome_foto) #Default: aspettera' 240 secondi finche non apparira' l'elemento nella foto indicata provandoci per 5 volte sempre per quei secondi. Nel caso non apparisse cioe' non trovasse l'elemento ,il programma, avanzerebbe andando semplicemente avanti senza rimanere fermo dopo l'attesa.\r\n\r\n    waitLoading(nome_foto,timeout=4) #aggiugendo manualmente il timeout, e' possibile dire alla funzione di aspettare , come sopra indicato per 5 volte massimo come tentativo, per i secondi indicati. Nell'esempio descritto, per esempio, gli ho detto di aspettare 4 secondi.\r\n\r\n    waitLoading(nome_foto,loading=True) #questo parametro comunica alla funzione di aspettare finche l'elemento non appare nella foto passata in maniera indefinita.\r\n    Per cui fare attenzione poiche, appunto, si entrerebbe in un loop infinito.\r\n    Sarebbe da utilizzare se, effettivamente, sarebbe importante che il programma attenda indefinitivamente quel elemento.\r\n\r\nNB: nome_foto e' un parametro obbligatorio da passare alla funzione.\r\n\r\n### Extra\r\n\r\nSe si assegna waitLoading ad una variabile, essa, ritornera' una variabile con delle coordinate oppure un valore NULL.\r\nPer cui e' utilizzabile casomai si voglia verificare o serva sapere se quel elemento esista o meno dopo l'attesa desiderata.\r\n\r\n    var_exemple = waitLoading(nome_foto)\r\n\r\n# switchLoading\r\n\r\nLa funzione indicata permette di , indicando i due path necessari e quindi obbligatori, testare uno dei due click tramite due foto differente.\r\nSi potrebbe utilizzare quando non si ha certezza che l'elemento si trovi a schermo e tenda a cambiare per cui sarebbe utile un click differente.\r\nPer quanto essa sia base. Cioe' e' solo click sinistro senza coordinate.\r\n\r\n    switchLoading(nome_foto_estensione_principale,nome_foto_estensione_secondario) #come fa' capire i parametri da passare sono entrambi necessari ed una indica una foto principale da passare e l'altra quella da utilizzare casomai la prima fallisca.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ImageManager-EagleProjects",
    "package_url": "https://pypi.org/project/ImageManager-EagleProjects/",
    "platform": null,
    "project_url": "https://pypi.org/project/ImageManager-EagleProjects/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pypa/sampleproject/issues",
      "Homepage": "https://github.com/pypa/sampleproject"
    },
    "release_url": "https://pypi.org/project/ImageManager-EagleProjects/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "package handling click on image and waiting with pyautogui",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16979112,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a80bd0116ce06fbf8b86644375c7a47256c05e92fa8d06ee643863e4a979bd5f",
          "md5": "120b981d9058c4dad3cf2b8e93c332a7",
          "sha256": "6fed6591c1d69778358997b459a9c0f8f4563223cae79cbdd6957b3eedc401a0"
        },
        "downloads": -1,
        "filename": "ImageManager_EagleProjects-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "120b981d9058c4dad3cf2b8e93c332a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4174,
        "upload_time": "2023-02-22T16:48:20",
        "upload_time_iso_8601": "2023-02-22T16:48:20.391463Z",
        "url": "https://files.pythonhosted.org/packages/a8/0b/d0116ce06fbf8b86644375c7a47256c05e92fa8d06ee643863e4a979bd5f/ImageManager_EagleProjects-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e354f0964adb5188ec6fc638b3b2778d3f181d8576b4f548bb9f4cd55682aaeb",
          "md5": "0f80acb67b0335c2c6e91d42c31e11f0",
          "sha256": "f121445cefa883bfc1b578bf23058dad6dbbe7ef39105c53e58e09b639ae5cea"
        },
        "downloads": -1,
        "filename": "ImageManager_EagleProjects-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f80acb67b0335c2c6e91d42c31e11f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3879,
        "upload_time": "2023-02-22T16:48:22",
        "upload_time_iso_8601": "2023-02-22T16:48:22.096378Z",
        "url": "https://files.pythonhosted.org/packages/e3/54/f0964adb5188ec6fc638b3b2778d3f181d8576b4f548bb9f4cd55682aaeb/ImageManager_EagleProjects-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a80bd0116ce06fbf8b86644375c7a47256c05e92fa8d06ee643863e4a979bd5f",
        "md5": "120b981d9058c4dad3cf2b8e93c332a7",
        "sha256": "6fed6591c1d69778358997b459a9c0f8f4563223cae79cbdd6957b3eedc401a0"
      },
      "downloads": -1,
      "filename": "ImageManager_EagleProjects-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "120b981d9058c4dad3cf2b8e93c332a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 4174,
      "upload_time": "2023-02-22T16:48:20",
      "upload_time_iso_8601": "2023-02-22T16:48:20.391463Z",
      "url": "https://files.pythonhosted.org/packages/a8/0b/d0116ce06fbf8b86644375c7a47256c05e92fa8d06ee643863e4a979bd5f/ImageManager_EagleProjects-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e354f0964adb5188ec6fc638b3b2778d3f181d8576b4f548bb9f4cd55682aaeb",
        "md5": "0f80acb67b0335c2c6e91d42c31e11f0",
        "sha256": "f121445cefa883bfc1b578bf23058dad6dbbe7ef39105c53e58e09b639ae5cea"
      },
      "downloads": -1,
      "filename": "ImageManager_EagleProjects-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0f80acb67b0335c2c6e91d42c31e11f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 3879,
      "upload_time": "2023-02-22T16:48:22",
      "upload_time_iso_8601": "2023-02-22T16:48:22.096378Z",
      "url": "https://files.pythonhosted.org/packages/e3/54/f0964adb5188ec6fc638b3b2778d3f181d8576b4f548bb9f4cd55682aaeb/ImageManager_EagleProjects-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}