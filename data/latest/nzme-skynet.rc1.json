{
  "info": {
    "author": "Milind Thakur",
    "author_email": "milindat28@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Acceptance"
    ],
    "description": "# **Skynet - Test Automation Library @ [NZME](https://www.nzme.co.nz/)**\n\n[![Build Status](https://travis-ci.org/MilindThakur/nzme-skynet.svg?branch=master)](https://travis-ci.org/MilindThakur/nzme-skynet)\n[![codecov](https://codecov.io/gh/MilindThakur/nzme-skynet/branch/master/graph/badge.svg)](https://codecov.io/gh/MilindThakur/nzme-skynet)\n\n## **Features included:**\n* A python3.6+ library to automate web apps and mobile apps across range of browsers and devices\n* Scripts to automate visual testing\n* Out of box integration with cloud testing (e.g. Sauce Labs)\n* Plugin to run REST api calls\n* Support for BDD scenarios and parallel execution run\n* Support for Mobile app testing, see [Mobile app readme](docs/howto_mobile_tests.md)\n* Capture and manipulate HTTP traffic using browsermob-proxy \n\n## **Install Skynet package:**\n Install from source.\n \n        $ git clone <repo>\n        $ cd skynet\n        $ python setup.py install \n\n## **Setup instructions**\n\n### **Install pip, web browsers, Emulators**\n* Python 3.6+\n* Download [Chrome browser](https://www.google.com/chrome/browser/desktop/index.html) and [Chrome Driver](https://sites.google.com/a/chromium.org/chromedriver/)\n* Download Firefox. Firefox > v.47 requires [Marionette](https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette) driver\n* To verify drivers are working [check these instructions](https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/verify_webdriver.md)\n* Install [mobile dependencies](docs/howto_mobile_tests.md) or docker solution e.g. [Selenoid Android](https://aerokube.com/selenoid/latest/#_android),\n[docker-android](https://github.com/budtmo/docker-android)\n* (optional) Install Selenium Grid of choice e.g. [Zalenium](https://github.com/zalando/zalenium),\n[Selenoid](https://github.com/aerokube/selenoid), [docker-selenium](https://github.com/SeleniumHQ/docker-selenium) etc\n\n\n        $ git clone <repo>\n        $ cd skynet\n        $ python3 -m venv skynet3-env\n        $ source skynet3-env/bin/activate\n        (skynet3-env) $ pip install -U pip\n        (skynet3-env) $ pip install pipenv\n        (skynet3-env) $ pipenv sync --dev\n     \n## **Run Tests**\n\nYou can run all of the tests via `tox` in your local\n\n        (skynet3-env) $ deactivate\n        $ sudo apt install python-tox\n        $ tox\n\nFor detailed run:\n\nSetup test env\n\n        $ source skynet3-env/bin/activate\n        (skynet3-env) $ ./docker_compose.sh start\n        (skynet3-env) $ curl -sSL http://localhost:4444/wd/hub/status | jq .value.ready | grep true\n        \nRun tests (with coverage)\n\n        (skynet3-env) $ py.test -vvv --cov=nzme_skynet test     \n        \nTo run all the tests in parallel\n\n        (skynet3-env) $ py.test -n <no_of_parallel_processes> test\n\nTo run individual tests\n\n        (skynet3-env) $ py.text -q test/<test_name.py>\n        \nTeardown test env\n\n        (skynet3-env) $ ./docker_compose.sh stop\n\n## **BDD Test Setup**\n\nTest setup is managed in a default configuration file _testsetup.ini_ which can be overridden on commandline.\n\n```\n#------- Desktop Platforms -------#\n[BROWSER]\n#- Generic Selenium/Cloud capabilities -#\ncapabilities =  {\n                \"browserName\": \"chrome\",\n                \"version\": \"ANY\",\n                \"platform\": \"ANY\",\n                \"goog:chromeOptions\" : {\n                    \"args\": [\"--disable-gpu\"],\n                    \"extensions\": [],\n                    \"prefs\": {}\n                    }\n                }\n#- Framework specific capabilities -#\nhighlight = true\nresolution = maximum # e.g. maximum, 1126x830\nheadless = false\nmobileEmulation = # e.g. iPhone X, Galaxy S5 etc\n\n#------- Mobile Platforms -------#\n#- Generic Appium capabilities -#\n[ANDROID]\ncapabilities = {\n                \"platformName\": \"Android\",\n                \"platformVersion\": \"8.1\",\n                \"deviceName\": \"Device 01\"\n                \"udid\": \"emulator-5554\",\n                \"appPackage\": \"appPackage\",\n                \"appActivity\": \"appActivity\",\n                \"app\": \"/path/to/my.app\"\n                }\n\n[IOS]\ncapabilities = {\n                \"platformName\": \"iOS\",\n                \"platformVersion\": \"11.0\",\n                \"deviceName\": \"iPhone 7\",\n                \"automationName\": \"XCUITest\",\n                \"app\": \"/path/to/my.app\"\n                }\n\n#------- Environmental -------#\n#- Framework specific capabilities -#\n[ENVIRONMENT]\ntesturl=https://www.google.co.nz/\nlocal=true\nselenium_grid_hub=http://127.0.0.1:4444/wd/hub\nzalenium=false\n```\nThe capabilities key is \"free-form\" selenium/appium/cloud capabilities key-value pair that is passed on to the\nframework. \n\nFor desktop tests, one can remove the sections [Android] and [IOS], similarly for mobile tests\none can remove the section [BROWSER]. The section [ENVIRONMENT] is however mandatory.\n\nOne can also have separate \"_testsetup.ini_\" files for different runs e.g. _testsetup_browserstack.ini_ with browserstack\nspecific capabilities only, or _testsetup_android.ini_ for android tests. This custom .ini can be passed as a \ncommand line parameter for behave tests.\n\n    (skynet3-env) $ behave -D configfile=testsetup_browserstack.ini --tags=@p1\n    (skynet3-env) $ behave -D configfile=testsetup_android.ini --tags=@android-app --tags=@p1\n    \nThe capabilities and environment key value options can also be updated on the commandline.\n\n    (skynet3-env) $ behave -D browserName=firefox -D version=65.0 -D local=true -D headless=true --tags=@p1\n\n\n### **BDD Parallel Tests Run utility**\nAllows running BDD tests in parallel, hence saving on execution time.\n```bash\n(skynet3-env) $ nzme-behave-parallel -h\nusage: Run behave in parallel mode for scenarios [-h] [--processes PROCESSES]\n                                                 [--tags TAGS]\n                                                 [--define DEFINE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --processes PROCESSES, -p PROCESSES\n                        Maximum number of processes. Default = 5\n  --tags TAGS, -t TAGS  specify behave tags to run\n  --define DEFINE, -D DEFINE\n                        Define user-specific data for the config.userdata\n                        dictionary. Example: -D foo=bar to store it in\n                        config.userdata[\"foo\"].\n```\nE.g. to run 4 scenarios in parallel based on tags and override test configuration\n```bash\n(skynet3-env) $ nzme-behave-parallel -p 4 -t prod -D local=false -D browserName=firefox\n```\n\n### **Supported Tags for use with Behave**\nWe use Behave as our BDD Runner, while skynet does not require you to use it, it does have some extra support built in.\nYou can tag the scenarios/feature files with the following platform tags to initialise appropriate driver.  \n\nIf no platform tag is specified, then the default platform of web/browser is used.\n```\n@api\n@android-app\n@android-browser\n@ios-app\n@ios-browser\n   \n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MilindThakur/nzme-skynet",
    "keywords": "selenium,bdd,appium,browser automation,mobile automation",
    "license": "BSD 3-Clause License",
    "maintainer": "milindat28@gmail.com",
    "maintainer_email": "",
    "name": "nzme-skynet",
    "package_url": "https://pypi.org/project/nzme-skynet/",
    "platform": "",
    "project_url": "https://pypi.org/project/nzme-skynet/",
    "project_urls": {
      "Homepage": "https://github.com/MilindThakur/nzme-skynet"
    },
    "release_url": "https://pypi.org/project/nzme-skynet/0.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "NZME Test Automation Library",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6619658,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55e66674c5eca696fed6c3e253be5b2016d72db7d67ec52c9a9485c0bfcf35a6",
          "md5": "ced7313ce717b9f7781a35be031af19c",
          "sha256": "15dbb477179e8d5c48f910064f79c45cb86601a492f4182a1ca0be1401c77e26"
        },
        "downloads": -1,
        "filename": "nzme-skynet-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ced7313ce717b9f7781a35be031af19c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38909,
        "upload_time": "2020-02-12T22:37:33",
        "upload_time_iso_8601": "2020-02-12T22:37:33.748703Z",
        "url": "https://files.pythonhosted.org/packages/55/e6/6674c5eca696fed6c3e253be5b2016d72db7d67ec52c9a9485c0bfcf35a6/nzme-skynet-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55e66674c5eca696fed6c3e253be5b2016d72db7d67ec52c9a9485c0bfcf35a6",
        "md5": "ced7313ce717b9f7781a35be031af19c",
        "sha256": "15dbb477179e8d5c48f910064f79c45cb86601a492f4182a1ca0be1401c77e26"
      },
      "downloads": -1,
      "filename": "nzme-skynet-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ced7313ce717b9f7781a35be031af19c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38909,
      "upload_time": "2020-02-12T22:37:33",
      "upload_time_iso_8601": "2020-02-12T22:37:33.748703Z",
      "url": "https://files.pythonhosted.org/packages/55/e6/6674c5eca696fed6c3e253be5b2016d72db7d67ec52c9a9485c0bfcf35a6/nzme-skynet-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}