{
  "info": {
    "author": "",
    "author_email": "Ash Bauer <devhalfbaked@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Printing",
      "Topic :: Terminals"
    ],
    "description": "# Pript\r\n\r\n\r\n\r\n[![Contributors][contributors-shield]][contributors-url]\r\n[![Forks][forks-shield]][forks-url]\r\n[![Stargazers][stars-shield]][stars-url]\r\n[![Issues][issues-shield]][issues-url]\r\n[![MIT License][license-shield]][license-url]\r\n\r\n\r\n\r\n## About Pript\r\n\r\nPript is a function that prints values to a stream, or to sys.stdout in the style of a receipt. It is based on the Python 3 `print()` built-in function. \r\n\r\nThis package is meant to be a development aid by allowing you to print data in a format that is more readable. Keep in mind this function is only meant to be used in development. You should always consider using a package like `logging` for production.\r\n\r\n### How different it is from `print()`?\r\n\r\nNot much. To prevent compatibility issues, `pript()` was written using the original [`print()`](https://foss.heptapod.net/pypy/pypy/-/blob/branch/py3.10/pypy/module/__builtin__/app_io.py) built-in implementation from PyPy.\r\n\r\n### Why `format()` instead of f-strings?\r\n\r\nEven though f-strings are known to be faster, they were introduced in Python 3.6. For that reason, `pript()` relies on `format()` to bring compatibility down to Python 3.\r\n\r\n\r\n\r\n## Getting Started\r\n\r\nYou can install Pript with pip or by copying the `pript.py` file to your project's root directory.\r\n\r\n### Prerequisites\r\n\r\n* Python 3 or above.\r\n* pip\r\n\r\n### Installation \r\n\r\n1. Install pript from pip\r\n   ```sh\r\n   pip install pript\r\n   ```\r\n2. Import it into your project\r\n   ```py\r\n   from pript import pript\r\n\r\n   pript('Hello World!')\r\n   ```\r\n\r\n## Usage\r\n\r\nPript will format zero to three arguments, otherwise it behaves similarly to `print()`. You can customize the formatting by using the `sep`, `pos`, `length` and `snip` optional keyword arguments.\r\n\r\n_For more information about optional keywords, please refer to the [Documentation](#documentation)._\r\n\r\n### With no arguments\r\n\r\nYou can print separators using zero arguments:\r\n```py\r\npript(sep='~')\r\n```\r\n\r\nOutput:\r\n```console\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   \r\n```\r\n\r\n### With one argument\r\n\r\nPript can be used, not ideally, as a replacement for print:\r\n```py\r\npript('This will print a line like print()')\r\n```\r\n\r\nOutput:\r\n```console\r\nThis will print a line like print()     \r\n```\r\n\r\n### With two arguments\r\n\r\nWhen using two arguments, pript will format each argument to the left and right by default, unless `pos` is specified:\r\n```py\r\npript('Hello ', ' World!', sep='>')\r\n```\r\n\r\nOutput:\r\n```console\r\nHello >>>>>>>>>>>>>>>>>>>>>>>>>>> World!\r\n```\r\n\r\n### With three arguments\r\n\r\nWhen using three arguments, pript will format each argument to the left, center and right respectively as default, unless `pos` is specified:\r\n```py\r\npript('THIS ', ' IS ', ' PRIPT', length='20')\r\n```\r\n\r\nOutput:\r\n```console\r\nTHIS    IS     PRIPT\r\n```\r\n\r\n### With more than three arguments\r\n\r\nWhen using more than three arguments, the behaviour of Pript is exactly the same as `print()`:\r\n```py\r\npript([101], ['Pript'], 'Hello Pript!', ('Hello', 'Pript', '!'))\r\n```\r\n\r\nOutput:\r\n```console\r\n[101] ['Pript'] Hello Pript! ('Hello', 'Pript', '!')\r\n```\r\n\r\n### Simple example with a single argument\r\n\r\nSuppose we want to center a single string, and style it with a symbol on each side of the text filling the remaining space, and a maximum length of 30 characters:\r\n```py\r\npript(' Hello Pript! ', sep='|', length=30, pos='center')\r\n```\r\n\r\nOutput:\r\n```console\r\n|||||||| Hello Pript! ||||||||\r\n```\r\n\r\n### Printing a receipt\r\n\r\nMinimum customization with default length:\r\n```py\r\nfrom pript import pript\r\n\r\ndef receipt():\r\n  pript(sep='*')\r\n  pript('HalfBakedCoffee Company', pos='center')\r\n  pript('014210 Half Baked Ave.', pos='center')\r\n  pript(' Receipt ', pos='center', sep=\"*\")\r\n  pript('Date: ', ' 04/02/2023 11:54:02')\r\n  pript()\r\n  pript(' Item list ', pos='center', sep=\"*\")\r\n  pript('Item: ', ' Big Coffee')\r\n  pript('Quantity: ', ' 2')\r\n  pript('Price: ', ' $5.00', sep='.')\r\n  pript()\r\n  pript(sep=\"*\")\r\n  pript('Item: ', ' Small Coffee')\r\n  pript('Quantity: ', ' 2')\r\n  pript('Price: ', ' $2.50', sep='.')\r\n  pript()\r\n  pript(sep=\"*\")\r\n  pript('Total: ', ' $15.00', sep='.')\r\n  pript('Paid: ', ' $15.00', sep='.')\r\n  pript('Thank you! ', ' Mr. Buyer')\r\n  pript(sep='*')\r\n\r\nreceipt()\r\n```\r\n\r\nOutput:\r\n```console\r\n****************************************\r\n        HalfBakedCoffee Company\r\n         014210 Half Baked Ave.\r\n*************** Receipt ****************\r\nDate:                04/02/2023 11:54:02\r\n\r\n************** Item list ***************\r\nItem:                         Big Coffee\r\nQuantity:                              2\r\nPrice: ........................... $5.00\r\n\r\n****************************************\r\nItem:                       Small Coffee\r\nQuantity:                              2\r\nPrice: ........................... $2.50\r\n\r\n****************************************\r\nTotal: .......................... $15.00\r\nPaid: ........................... $15.00\r\nThank you!                     Mr. Buyer\r\n****************************************\r\n```\r\n\r\n\r\n\r\n## Documentation\r\n\r\n### `pript` (Function)\r\n\r\n**Positional arguments:**\r\n- `args`: Arguments to print.\r\n\r\n**Keyword arguments:**\r\n- `file`: A file-like object (stream). Defaults to the current sys.stdout. \r\n- `sep`: String inserted between values. Default a space.\r\n- `end`: String appended after the last value. Default a newline.\r\n- `flush`: Whether to forcibly flush the stream. Defaults to `False`.\r\n- `pos`: String determining the alignment of the output. Defaults to `start` (`between` for two and three arguments). Receives `start`, `center`, `end` or `None` as valid arguments.\r\n- `length`: Maximum length of the output. Defaults to 40 characters.\r\n- `snip`: Whether to remove excess characters when using a single argument. Defaults to `True`.\r\n\r\n### About the `pos` optional keyword:\r\n\r\nThere are slight differences when providing the optional keyword `pos` with `start`, `center` or `end` using two or three arguments.\r\n\r\nFor example, when using two arguments with `pos='start'` and `sep='-'` for reference:\r\n```py\r\npript('Hello', 'World!', pos='start', sep='-')\r\n```\r\n\r\nPript will position each argument to the start of each column (one column per argument):\r\n```console\r\nHello---------------World!--------------\r\n```\r\n\r\nOn the contrary, while using three arguments with  `pos='start'` and `sep='-'` for reference:\r\n```py\r\npript('Hello', 'World', 'Pript!', pos='start', sep='-')\r\n```\r\n\r\nPript will compress each argument to the start of the line, and fill all the remaning empty space of each column:\r\n```console\r\nHelloWorldPript!------------------------\r\n```\r\nThis was purposely made to extend the formatting capabilities of Pript while reducing the complexity of the function itself.\r\n\r\nWith two arguments, each one will be allocated to their asignated position inside their respective column. With three arguments, each argument will be compressed to their asignated position and the remaining space will be automatically filled.\r\n\r\n### About the `snip` optional keyword:\r\n\r\nWhen using a single argument, `snip` (`True` by default) will trim any excess characters if the argument is longer than `length` (`40` by default):\r\n```py\r\npript('This string is exactly 41 characters long')\r\n```\r\n\r\nOutput:\r\n```console\r\nThis string is exactly 41 characters lon\r\n```\r\n\r\nThis behaviour can be disabled by passing `False` to `snip`:\r\n```py\r\npript('This string is exactly 41 characters long', snip=False)\r\n```\r\n\r\nOutput:\r\n```console\r\nThis string is exactly 41 characters long\r\n```\r\n\r\n### `snip` with more than a single argument\r\n\r\nBe aware that disabling `snip` is not currently supported when using two and three arguments, Pript will always trim the end of any argument that is longer than its designated column length. This is specially important when debugging numeric values as they will get trimmed, in example:\r\n```py\r\npript('The current price of EXAMPLE is: ', '0.00000000000000024984 USD')\r\n```\r\n\r\nOutput:\r\n```console\r\nThe current price of0.000000000000000249\r\n```\r\n\r\nThis bug is a product of the way Pript formats strings into grids. It can be temporarily solved by setting `length` to an amount double the longest argument:\r\n```py\r\narg0 = 'The current price of EXAMPLE is: '\r\narg1 = '0.00000000000000024984 USD'\r\nlongest_arg = max(len(arg0), len(arg1))\r\npript(arg0, arg1, length=longest_arg*2)\r\n```\r\n\r\nThis will prevent Pript from trimming the output:\r\n```console\r\nThe current price of EXAMPLE is:        0.00000000000000024984 USD\r\n```\r\n\r\nAn easier approach would be to use string concatenation with `snip` in a single argument:\r\n```py\r\narg0 = 'The current price of EXAMPLE is: '\r\narg1 = '0.00000000000000024984 USD'\r\npript(arg0 + arg1, snip=False)\r\n```\r\n\r\nThis will also prevent Pript from trimming the output:\r\n```console\r\nThe current price of EXAMPLE is: 0.00000000000000024984 USD\r\n```\r\n\r\nThis is a known bug and it is planned to be fixed in the following revisions of Pript. \r\n\r\n\r\n\r\n## Contributing\r\n\r\nThe code has room for improvement, particularly in the calculations. Currently, it serves only as a proof of concept. Any contributions you make are **greatly appreciated**.\r\n\r\nIf you have a suggestion that would make Pript better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\".\r\nDon't forget to give the project a star!\r\n\r\n1. Fork the Project\r\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\r\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\r\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\r\n5. Open a Pull Request\r\n\r\n\r\n\r\n## License\r\n\r\nDistributed under the MIT License. See `LICENSE` for more information.\r\n\r\n\r\n\r\n## Contact\r\n\r\nHalfBakedBread/Ash Bauer \r\n- [HalfBakedBread - Portfolio](https://halfbakedbread.github.io)\r\n- [HalfBakedServer - Discord](https://discord.gg/HUjks45JYC) \r\n- [@halfbakedash - Twitter](https://twitter.com/halfbakedash)\r\n\r\nProject Link: [https://github.com/halfbakedbread/pript](https://github.com/halfbakedbread/pript)\r\n\r\n\r\n\r\n[contributors-shield]: https://img.shields.io/github/contributors/halfbakedbread/pript.svg?style=flat-square\r\n[contributors-url]: https://github.com/halfbakedbread/pript/graphs/contributors\r\n[forks-shield]: https://img.shields.io/github/forks/halfbakedbread/pript.svg?style=flat-square\r\n[forks-url]: https://github.com/halfbakedbread/pript/network/members\r\n[stars-shield]: https://img.shields.io/github/stars/halfbakedbread/pript.svg?style=flat-square\r\n[stars-url]: https://github.com/halfbakedbread/pript/stargazers\r\n[issues-shield]: https://img.shields.io/github/issues/halfbakedbread/pript.svg?style=flat-square\r\n[issues-url]: https://github.com/halfbakedbread/pript/issues\r\n[license-shield]: https://img.shields.io/github/license/halfbakedbread/pript.svg?style=flat-square\r\n[license-url]: https://github.com/halfbakedbread/pript/blob/main/LICENSE\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "print,format,text,style,development",
    "license": "MIT License  Copyright (c) 2023 Ash Bauer  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pript",
    "package_url": "https://pypi.org/project/pript/",
    "platform": null,
    "project_url": "https://pypi.org/project/pript/",
    "project_urls": {
      "Bug Reports": "https://github.com/halfbakedbread/pript/issues",
      "Homepage": "https://github.com/halfbakedbread/pript",
      "Source": "https://github.com/halfbakedbread/pript/"
    },
    "release_url": "https://pypi.org/project/pript/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Print values to a stream, or to sys.stdout in the style of a receipt.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16763161,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "481806b49f10c3aa92ca38f03ca3fc43ae820dcecdff2a01d11b6eb9e6f7eb2f",
          "md5": "6d6dee308d6423eebce466f4ce066a36",
          "sha256": "39304fc3b1d9e18b86366e76e9b041297840c7afe36b419013e50e27deb83134"
        },
        "downloads": -1,
        "filename": "pript-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d6dee308d6423eebce466f4ce066a36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 7842,
        "upload_time": "2023-02-09T04:53:35",
        "upload_time_iso_8601": "2023-02-09T04:53:35.935485Z",
        "url": "https://files.pythonhosted.org/packages/48/18/06b49f10c3aa92ca38f03ca3fc43ae820dcecdff2a01d11b6eb9e6f7eb2f/pript-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "227df1a75451862db289c8935576da7f67c67ea270bb687e48a13b6e28166f05",
          "md5": "0fe4dc4aec1cafdf8332cea2cdaa655e",
          "sha256": "94c9e8a00d55fcb9241b4cbf302651843cd7450b8acc9aa926d50645bcc200ae"
        },
        "downloads": -1,
        "filename": "pript-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0fe4dc4aec1cafdf8332cea2cdaa655e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 12506,
        "upload_time": "2023-02-09T04:53:37",
        "upload_time_iso_8601": "2023-02-09T04:53:37.714086Z",
        "url": "https://files.pythonhosted.org/packages/22/7d/f1a75451862db289c8935576da7f67c67ea270bb687e48a13b6e28166f05/pript-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33c4dad1c2d336bdc1d5c5131733346b0036d8d8258d07b075b1019b4a2ab2db",
          "md5": "be5e14cf70f757f6a184c667c07e187f",
          "sha256": "b239d539f31d7fe167437d651186a628e64000a08a40380a0050efd183659fa6"
        },
        "downloads": -1,
        "filename": "pript-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be5e14cf70f757f6a184c667c07e187f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 7887,
        "upload_time": "2023-02-09T05:39:23",
        "upload_time_iso_8601": "2023-02-09T05:39:23.635234Z",
        "url": "https://files.pythonhosted.org/packages/33/c4/dad1c2d336bdc1d5c5131733346b0036d8d8258d07b075b1019b4a2ab2db/pript-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff0dc2d0164f3d73b570089ef0c80e3e85d02d12993db94fdc884c234539b724",
          "md5": "67059b3fcc61131df7502a6c857bcc57",
          "sha256": "50cf8331194b7a7735ccf436f0bb6e06e02b48026a9a548a40fb54859e9b3709"
        },
        "downloads": -1,
        "filename": "pript-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67059b3fcc61131df7502a6c857bcc57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 12801,
        "upload_time": "2023-02-09T05:39:25",
        "upload_time_iso_8601": "2023-02-09T05:39:25.093170Z",
        "url": "https://files.pythonhosted.org/packages/ff/0d/c2d0164f3d73b570089ef0c80e3e85d02d12993db94fdc884c234539b724/pript-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33c4dad1c2d336bdc1d5c5131733346b0036d8d8258d07b075b1019b4a2ab2db",
        "md5": "be5e14cf70f757f6a184c667c07e187f",
        "sha256": "b239d539f31d7fe167437d651186a628e64000a08a40380a0050efd183659fa6"
      },
      "downloads": -1,
      "filename": "pript-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be5e14cf70f757f6a184c667c07e187f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 7887,
      "upload_time": "2023-02-09T05:39:23",
      "upload_time_iso_8601": "2023-02-09T05:39:23.635234Z",
      "url": "https://files.pythonhosted.org/packages/33/c4/dad1c2d336bdc1d5c5131733346b0036d8d8258d07b075b1019b4a2ab2db/pript-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff0dc2d0164f3d73b570089ef0c80e3e85d02d12993db94fdc884c234539b724",
        "md5": "67059b3fcc61131df7502a6c857bcc57",
        "sha256": "50cf8331194b7a7735ccf436f0bb6e06e02b48026a9a548a40fb54859e9b3709"
      },
      "downloads": -1,
      "filename": "pript-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "67059b3fcc61131df7502a6c857bcc57",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 12801,
      "upload_time": "2023-02-09T05:39:25",
      "upload_time_iso_8601": "2023-02-09T05:39:25.093170Z",
      "url": "https://files.pythonhosted.org/packages/ff/0d/c2d0164f3d73b570089ef0c80e3e85d02d12993db94fdc884c234539b724/pript-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}