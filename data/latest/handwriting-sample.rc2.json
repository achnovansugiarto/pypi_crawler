{
  "info": {
    "author": "Brain Diseases Analysis Laboratory",
    "author_email": "mucha@vut.cz",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# Handwriting Sample \n\n![GitHub last commit](https://img.shields.io/github/last-commit/BDALab/handwriting-sample)\n![GitHub issues](https://img.shields.io/github/issues/BDALab/handwriting-sample)\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/BDALab/handwriting-sample)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/handwriting-sample)\n![GitHub top language](https://img.shields.io/github/languages/top/BDALab/handwriting-sample)\n![PyPI - License](https://img.shields.io/pypi/l/handwriting-sample)\n\nThis package provides a [PyPi-installable](https://pypi.org/project/handwriting-sample/) module for the manipulation \nwith the so-called online handwriting data (handwriting with dynamic information in form of the time-series) acquired \nby Wacom Digitizing Tablets. The package implements `HandwritingSample` class enabling fast and easy handwriting \ndata-object handling. Handwriting data must consists of 7 following time-series: **x, y, timestamp, pen status, \nazimuth, tilt, pressure**. \n\nMain features:\n - data load with validation\n   - *.svc, \n   - *.json, \n   - array \n   - pandas dataframe\n - unit transformation\n   - axis from to mm\n   - time to seconds\n   - angles to degrees\n - simple access and manipulation with time-series\n - data storage\n\nThe package can be used also for data acquired from any other devices if they satisfied the collection of the above list of time-series. \n\n_The full programming sphinx-generated docs can be seen in [official documentation](https://handwriting-sample.readthedocs.io/en/latest/)_.\n\n**Contents**:\n1. [Installation](#Installation)\n2. [Data](#Data)\n3. [Examples](#Examples)\n4. [License](#License)\n5. [Contributors](#Contributors)\n\n\n## Installation\n\n```\npip install handwriting-sample\n```\n\n## Data\n### Input data\n\nInput data must consist of handwriting data in the form of time-series acquired by Wacom Digitizing Tablet. \nHowever, other similar devices can be used too, if they satisfy the following data structure:\n\n- ``x``: X axis \n- ``y``: Y axis \n- ``time``: timestamp since epoch\n- ``pen_status``: pen up or down (0 = up, 1 = down) \n- ``azimuth``: azimuth of the pen tip\n- ``tilt``: tilt of the pen regarding the tablet surface\n- ``pressure``: pressure\n\n\n---\nExample of the *.svc database can be found [here](https://bdalab.utko.feec.vutbr.cz/#downloads).\n\n---\n\n### Metadata\nTo bring more insights for the processed data sample, we support the metadata. Metadata can be read in two forms:\n1. (NOT RECOMMENDED) from the file name of SVC file (see [SVC file](#SVC file))\n2. from the JSON file, part ``meta_data`` (see [JSON file](#JSON file))\n3. from the ``key: value`` dictionary using ``add_meta_data``, once the sample has been loaded \n(see [Examples](#Examples))\n\n### Input data examples\n#### SVC file\nfull SVC example can be found [here](examples/svc_data)\n\n```csv\n606 \n4034 7509 354642400 1 1190 720 10852\n4034 7509 354642408 1 1180 700 10997\n4150 7582 354642416 1 1170 690 11061\n4241 7639 354642423 1 1150 670 11077\n4362 7714 354642431 1 1130 650 12085\n4513 7810 354642438 1 1120 640 13222\n4693 7926 354642446 1 1110 640 14278\n...\n```\nfirst line in SVC represents the number of samples (lines) in SVC file\n\n**SVC Metadata**\n\nMetadata are read from the file name with the following convention:\n\n``SubjectID_DateOfBirth_Gender_TaskNumber_AdministratorName_DateOfAcquisition.svc``\n\nexample:\n\nID0025_18-07-2014_M_0007_Doe_12-05-2021.svc\n\n#### JSON file\nfull JSON example can be found [here](examples/json_data/signal.json)\n```json\n{\n  \"meta_data\":\n  {\n    \"samples_count\": 100,\n    \"column_names\": [\"x\", \"y\", \"time\", \"pen_status\", \"azimuth\", \"tilt\", \"pressure\"],\n    \"administrator\": \"Doe\",\n    \"participant\":\n    {\n      \"id\": \"BD_1234\",\n      \"sex\": \"female\",\n      \"birth_date\": \"2002-11-05\",\n    },\n    \"task_id\": 7,\n    ...\n  },\n  \"data\":\n  {\n    \"x\":\n    [\n      52.81, 52.83, 52.855, 52.87, 52.88, 52.89, 52.9, ...\n    ],\n    \"y\":\n    [\n      52.81, 52.83, 52.855, 52.87, 52.88, 52.89, 52.9, ...\n    ],\n    \"time\":\n    [\n      0.0, 0.007, 0.015, 0.022, 0.03, 0.037, 0.045, ...\n    ],\n    \"pen_status\":\n    [\n      1, 1, 1, 1, 1, 1, 1, ...\n    ],\n    \n    \"azimuth\":\n    [\n      510.0, 510.0, 510.0, 510.0, 510.0, ... \n    ],\n    \"tilt\":\n    [\n      520.0, 520.0, 520.0, 520.0, 520.0, ...\n    ],\n    \"pressure\":\n    [\n      0.0, 0.01173, 0.022483, 0.035191, 0.056696, ...\n    ]\n  }\n}\n```\n**JSON Metadata**\n\nMetadata are read from the ``\"meta_data\"`` section of the JSON file\n\n\n\n#### Numpy Array\nWhen loading data using numpy array, ensure the proper identification of the time series order.\n```python\narray = numpy.array([[1,1,1,1,0],\n                      [1,2,3,4,5],\n                      [1,2,3,4,5],\n                      [254651615,254651616,254651617,254651618,254651619],\n                      [1,2,3,4,5],\n                      [1,2,3,4,5],\n                      [10,20,30,40,50]])\n\ncolumn_names = ['pen_status', 'y', 'x', 'time', 'azimuth', 'tilt', 'pressure']\n```\n\n#### Pandas DataFrame\n\n```python\nx = [1,2,3,4,5]\ny = [1,2,3,4,5]\ntime = [254651615,254651616,254651617,254651618,254651619]\npen_status = [1,2,3,4,5]\nazimuth = [1,2,3,4,5]\ntilt= [1,2,3,4,5]\npressure=[10,20,30,40,50]\n\npandas.DataFrame(numpy.column_stack([x, y, time, pen_status, azimuth, tilt, pressure]))\n\ncolumn_names = ['x', 'y', 'time', 'pen_status', 'azimuth', 'tilt', 'pressure']\n```\n\n\n\n## Handwriting Unit Transformation\nThe package supports all data unit transformation:\n1. _axis values to mm_: for the axis transformation we need to set a Line-Per-Inch (LPI) or Line-Per-Millimeter (LPMM)\n   of \n   the device. This value depends on the device type and RAW \n      data gathering. \n**By default, we are using LPI for conversion**\n2. _time to seconds_: from the time since epoch to seconds starting from 0\n3. _angles to degree_: for the angle transformation we need to set maximal theoretical value of raw angle range and \n   maximal value of angle in degrees based on device capabilities\n4. _pressure normalization_: from the RAW pressure values to pressure levels based on device capabilities\n\nBy default, package uses predefined technical values for \n[Wacom Cintiq 16](http://101.wacom.com/UserHelp/en/TOC/DTK-1660.html) tablet:\n\n| Name | Value  |   \n|---|---|\n| LPI  |  5080 | \n| LPMM |  200 |  \n| MAX_PRESSURE_VALUE  |  32767 |  \n| PRESSURE_LEVELS  |  8192 |  \n| MAX_TILT_VALUE  |  900 |  \n| MAX_TILT_DEGREE  |  90 |  \n| MAX_AZIMUTH_VALUE  |  3600 |  \n| MAX_AZIMUTH_DEGREE  |  360 |  \n\n---\n**NOTE** \n\nIn case of unit transformation ensure you used a proper technical values regarding your device \n\n---\n\n\n## Examples\n\n### Load sample\n\n```python\nfrom handwriting_sample import HandwritingSample\n\n# load from svc\nsvc_sample = HandwritingSample.from_svc(path=\"path_to_svc\")\nprint(svc_sample)\n```\n### Load sample from JSON and print some time-series\n```python\nfrom handwriting_sample import HandwritingSample\n\n# load from json\njson_sample = HandwritingSample.from_json(path=\"path_to_json\")\nprint(json_sample)\n\n# print x \nprint(json_sample.x)\n# print y\nprint(json_sample.y)\n# print trajectory\nprint(json_sample.xy)\n# print pressure\nprint(json_sample.pressure)\n```\n\n### Strokes \nStroke is one segment of data between the position change of pen up/down.\n\nReturn value for all the following methods is tuple with the identification of the movement and object of the \n``HandwritingSample`` class.  \n\n```python\nfrom handwriting_sample import HandwritingSample\n\n# load sample\nsample = HandwritingSample.from_json(path=\"path_to_json\")\n\n# get all strokes\nstrokes = sample.get_strokes()\n\n# get on surface strokes\nstroke_on_surface = sample.get_on_surface_strokes()\n\n# get in air strokes\nstrokes_in_air = sample.get_in_air_strokes()\n```\n\nor you just can get the data on surface or in air\n```python\nfrom handwriting_sample import HandwritingSample\n\n# load sample\nsample = HandwritingSample.from_json(path=\"path_to_json\")\n\n# get movement on surface\non_surface_data = sample.get_on_surface_data()\n\n# get movement in air\nin_air_data = sample.get_in_air_data()\n```\n\n### Unit Transformation\n```python\nfrom handwriting_sample import HandwritingSample\n\n# load sample\nsample = HandwritingSample.from_json(path=\"path_to_json\")\n\n# transform axis\nsample.transform_axis_to_mm(conversion_type=HandwritingSample.transformer.LPI,\n                            lpi_value=5080,\n                            shift_to_zero=True)\n\n# transform time to seconds\nsample.transform_time_to_seconds()\n\n# transform angle\nsample.transform_angle_to_degree(angle=HandwritingSample.TILT)\n```\n\nor you can transform all unit at once\n```python\nfrom handwriting_sample import HandwritingSample\n\n# load sample\nsample = HandwritingSample.from_json(path=\"path_to_json\")\n\n# transform axis\nsample.transform_all_units()\n```\n### Store Data\nIf you provide a metadata the filename will be generated automatically, \notherwise you need to select a filename. \nMoreover, you can also store the original data only.\n\n```python\nfrom handwriting_sample import HandwritingSample\n\n# load sample from svc\nsample = HandwritingSample.from_svc(path=\"path_to_svc\")\n\n# store data to json\nsample.to_json(path=\"path_to_storage\")\n\n# store original raw data to json\nsample.to_json(path=\"path_to_storage\", store_original_data=True)\n```\n\n### Transform RAW database to database with transformed units\nFor example if you have a database of SVC files with RAW data,\nand you want to transform handwriting units of all data, add some metadata, \nand store it to JSON.  \n```python\nfrom handwriting_sample import HandwritingSample\n\n# Prepare metadata\nmeta_data = { \"protocol_id\": \"pd_protocol_2018\",\n              \"device_type\": \"Wacom Cinitq\",\n              \"device_driver\": \"2.1.0\",\n              \"wintab_version\": \"1.2.5\",\n              \"lpi\": 1024,\n              \"time_series_ranges\": {\n                \"x\": [0, 1025],\n                \"y\": [0, 1056],\n                \"azimuth\": [0, 1000],\n                \"tilt\": [0, 1000],\n                \"pressure\": [0, 2048]}}             \n\n# Go for each file in file list\nfor file in file_paths:\n   # load sample from svc\n   sample = HandwritingSample.from_svc(path=file)\n   \n   # add metadata\n   sample.add_meta_data(meta_data=meta_data)\n   \n   # transform all units\n   sample.transform_all_units()\n   \n   # store original raw data to json\n   sample.to_json(path=\"path_to_storage\")\n```\n\n### Data visualisation\nPackage supports also a visualisations e.g.:\n```python\nfrom handwriting_sample import HandwritingSample\n\n# load sample from svc\nsample = HandwritingSample.from_svc(path=\"path_to_svc\")\n\n# transform all units\nsample.transform_all_units()\n\n# Show separate movements\nsample.plot_separate_movements()\n\n# Show in air data\nsample.plot_in_air()\n\n# Show all data\nsample.plot_all_data()\n```\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Contributors\n\nThis package is developed by the members of [Brain Diseases Analysis Laboratory](http://bdalab.utko.feec.vutbr.cz/). For more information, please contact the head of the laboratory Jiri Mekyska <mekyska@vut.cz> or the main developer: Jan Mucha <mucha@vut.cz>.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BDALab/handwriting-sample",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "handwriting-sample",
    "package_url": "https://pypi.org/project/handwriting-sample/",
    "platform": null,
    "project_url": "https://pypi.org/project/handwriting-sample/",
    "project_urls": {
      "Homepage": "https://github.com/BDALab/handwriting-sample"
    },
    "release_url": "https://pypi.org/project/handwriting-sample/1.0.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "matplotlib"
    ],
    "requires_python": ">=3.7",
    "summary": "Handwriting sample",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15853013,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e55f6e6827653685c2f0acc28e18e4c0d701c227c3b57300572732b304190af6",
          "md5": "93f05fbe4ad21703551b7d1b0d88d571",
          "sha256": "67e0ea9808bc821fead58865ceefb43bb16d8c98912df631a13148a06d298dd0"
        },
        "downloads": -1,
        "filename": "handwriting-sample-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "93f05fbe4ad21703551b7d1b0d88d571",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23591,
        "upload_time": "2021-11-23T10:29:37",
        "upload_time_iso_8601": "2021-11-23T10:29:37.935479Z",
        "url": "https://files.pythonhosted.org/packages/e5/5f/6e6827653685c2f0acc28e18e4c0d701c227c3b57300572732b304190af6/handwriting-sample-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a75d7ec12171c4810ac3d82de519a86e7c4eb0452d61f62bf1d4a4da51d53bf0",
          "md5": "7281188e3b88432f7b5983271003a12f",
          "sha256": "5eb67b446d16931a783841ca2ae14360781a92e1148c8204f0c1a1686e0bf0b9"
        },
        "downloads": -1,
        "filename": "handwriting_sample-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7281188e3b88432f7b5983271003a12f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26223,
        "upload_time": "2022-11-22T12:10:20",
        "upload_time_iso_8601": "2022-11-22T12:10:20.695623Z",
        "url": "https://files.pythonhosted.org/packages/a7/5d/7ec12171c4810ac3d82de519a86e7c4eb0452d61f62bf1d4a4da51d53bf0/handwriting_sample-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f82847a213325960a98b6ee0c1d2a07866c56d7bf93669bf459174e4c99dda4e",
          "md5": "1b0f47c167d4e66a098c7eec8268c5f1",
          "sha256": "667b7190cf944f625be3d634425c450628573d178bbff0fc0ce90550dfd06765"
        },
        "downloads": -1,
        "filename": "handwriting-sample-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b0f47c167d4e66a098c7eec8268c5f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24293,
        "upload_time": "2022-11-22T12:10:22",
        "upload_time_iso_8601": "2022-11-22T12:10:22.998185Z",
        "url": "https://files.pythonhosted.org/packages/f8/28/47a213325960a98b6ee0c1d2a07866c56d7bf93669bf459174e4c99dda4e/handwriting-sample-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a75d7ec12171c4810ac3d82de519a86e7c4eb0452d61f62bf1d4a4da51d53bf0",
        "md5": "7281188e3b88432f7b5983271003a12f",
        "sha256": "5eb67b446d16931a783841ca2ae14360781a92e1148c8204f0c1a1686e0bf0b9"
      },
      "downloads": -1,
      "filename": "handwriting_sample-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7281188e3b88432f7b5983271003a12f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 26223,
      "upload_time": "2022-11-22T12:10:20",
      "upload_time_iso_8601": "2022-11-22T12:10:20.695623Z",
      "url": "https://files.pythonhosted.org/packages/a7/5d/7ec12171c4810ac3d82de519a86e7c4eb0452d61f62bf1d4a4da51d53bf0/handwriting_sample-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f82847a213325960a98b6ee0c1d2a07866c56d7bf93669bf459174e4c99dda4e",
        "md5": "1b0f47c167d4e66a098c7eec8268c5f1",
        "sha256": "667b7190cf944f625be3d634425c450628573d178bbff0fc0ce90550dfd06765"
      },
      "downloads": -1,
      "filename": "handwriting-sample-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1b0f47c167d4e66a098c7eec8268c5f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 24293,
      "upload_time": "2022-11-22T12:10:22",
      "upload_time_iso_8601": "2022-11-22T12:10:22.998185Z",
      "url": "https://files.pythonhosted.org/packages/f8/28/47a213325960a98b6ee0c1d2a07866c56d7bf93669bf459174e4c99dda4e/handwriting-sample-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}