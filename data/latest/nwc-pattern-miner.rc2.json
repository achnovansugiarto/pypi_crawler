{
  "info": {
    "author": "Anirudh Agarwal",
    "author_email": "agarw228@umn.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# nwc-pattern-mining\nNon-compliant Window Co-occurrence pattern mining in temporal data\n\n- A Python library to find sequential association patterns in time-series data, co-occurring with target anomalous windows.\n- Anomalous windows are sequences in which a target variable defies expected behavior (e.g. Emissions from a vehicle).\n- The patterns are found in co-occurrence with a specific non-compliant feature (to decipher the reason behinds it's irregular behavior).\n- The package uses various pruning methodologies to speed up pattern mining, and hashing for quick support count.\n- The algorithm is based on research: (Discovering non-compliant window co-occurrence patterns)[https://link.springer.com/article/10.1007/s10707-016-0289-3]\n\n# API-description:\n`from nwc_pattern_miner import mine_sequence_patterns`\n\n## API Parameters: \n- **series_df**: `pd.DataFrame`; Input DataFrame (Only features [discretized] and Target [binarized] columns)  \n- **nc_window_col**: `str`; Column Name with Binary Target (Anomalous Windows)\n- **support_threshold**: `float`; Support threshold for sequence co-occurrence patterns\n- **crossk_threshold**: `float`; Ripley's Cross-k threshold for sequence co-occurrence patterns\n- **pattern_length**: `int`; length of feature sequences co-occurring with anomalous windows\n- **confidence_threshold**: `float, default=-1`; Confidence threshold for sequence co-occurrence patterns\n- **lag**: `int, default= 0`; lag consideration between sequence patterns and anomalous windows\n- **invalid_seq_indexes**: `list, default=list()`; list of indexes across which sequence patterns would be invalidated\n- **output_metric**: `{'crossk', 'support'}, default='crossk'`; Metric used to sort patterns mined\n- **output_type**: `{'topk', 'threshold'}, default='topk';` Type of output for sequence patterns mined\n- **output_threshold**: `float, default= -1`; Threshold cutoff used to get output sequence patterns, if `output_type='threshold'`\n- **topk**: `int, default=100`; Top-k sequence patterns obtained based on `output_metric`, if `output_type='topk'`\n- **pruning_type**: `str, default=apriori`; Between `[apriori, br-dr]`, both have same run-time, 'br-dr' does more enumerations but enumeration speed is much faster due to UB pruning. \n\n## Sample Input DataFrame:\n| engrpm      | EGRkgph     | MSPhum      | EngTq       | NCWindow    |\n| ----------- | ----------- | ----------- | ----------- | ----------- |\n| 9           | 11          | 5           | 3           | 1           |\n| 3           | 1           | 5           | 4           | 0           |\n\n\n## Sample Output DataFrame:\n| engrpm | EGRkgph | MSPhum | EngTq | Count | Support | Kvalue | Confidence | First Occurrence Index |\n| -------| --------| -------| ------| ------| --------|--------|------------|------------------------|\n|        | 4 4 4   | 5 5 5  | 2 2 2 | 146   | 0.00528 | 2.377  | 1.0        | 47167                  |\n|        | 4 4 4   |        | 7 7 7 | 250   | 0.00643 | 2.357  | 1.0        | 41984                  |\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SpatialUMN/nwc-pattern-mining",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nwc-pattern-miner",
    "package_url": "https://pypi.org/project/nwc-pattern-miner/",
    "platform": "",
    "project_url": "https://pypi.org/project/nwc-pattern-miner/",
    "project_urls": {
      "Homepage": "https://github.com/SpatialUMN/nwc-pattern-mining"
    },
    "release_url": "https://pypi.org/project/nwc-pattern-miner/0.2/",
    "requires_dist": [
      "pandas (==1.2.4)",
      "tqdm (==4.60.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Mines sequence patterns co-occuring with non-compliant windows in a target feature.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10314116,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46c283ecb0034a069919a915121901d1b573244e395469ccc3a27029842d3b66",
          "md5": "6aa6ee68bf64a3cde1aadbe619090e4e",
          "sha256": "b88d036751251bb60c882db27b2a7102c1b9179d4c77ea07c25638d236ac0705"
        },
        "downloads": -1,
        "filename": "nwc_pattern_miner-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6aa6ee68bf64a3cde1aadbe619090e4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16606,
        "upload_time": "2021-04-27T02:01:56",
        "upload_time_iso_8601": "2021-04-27T02:01:56.819621Z",
        "url": "https://files.pythonhosted.org/packages/46/c2/83ecb0034a069919a915121901d1b573244e395469ccc3a27029842d3b66/nwc_pattern_miner-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc17c6322447f540f70240fc80c3edddf4dccc4a254fe0d76dd1abae7e16d012",
          "md5": "b79f14572bdf4d8db59777e97b6f67e6",
          "sha256": "6250b6400a2c8b2eb4ad259e016653045d924f01fd486edb96bd7adc7bb5cbbf"
        },
        "downloads": -1,
        "filename": "nwc_pattern_miner-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b79f14572bdf4d8db59777e97b6f67e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12936,
        "upload_time": "2021-04-27T02:01:57",
        "upload_time_iso_8601": "2021-04-27T02:01:57.860498Z",
        "url": "https://files.pythonhosted.org/packages/fc/17/c6322447f540f70240fc80c3edddf4dccc4a254fe0d76dd1abae7e16d012/nwc_pattern_miner-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e3e71a05185356eb4112963555fd48e98fc4e6dd4092f4af7bd4cccd9d8ed48",
          "md5": "215f0d16fc57b9610971dfbdd6285705",
          "sha256": "96cdecd6dd4773d910bb659f909c572fe7d2f516935ba9ea0806f7f9154e99aa"
        },
        "downloads": -1,
        "filename": "nwc_pattern_miner-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "215f0d16fc57b9610971dfbdd6285705",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19527,
        "upload_time": "2021-05-10T22:36:42",
        "upload_time_iso_8601": "2021-05-10T22:36:42.340672Z",
        "url": "https://files.pythonhosted.org/packages/2e/3e/71a05185356eb4112963555fd48e98fc4e6dd4092f4af7bd4cccd9d8ed48/nwc_pattern_miner-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "210ed4b96a8b08073c8a5ba87f4d04b3236a3454deabd3f5f4053448a7058c78",
          "md5": "dc679c3898b40222817c06d8a424a6e5",
          "sha256": "e99d21f43522234454c4522e9e10bbdd9c7b1f75bfdce84bda060cad6ac6075f"
        },
        "downloads": -1,
        "filename": "nwc_pattern_miner-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc679c3898b40222817c06d8a424a6e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14793,
        "upload_time": "2021-05-10T22:36:45",
        "upload_time_iso_8601": "2021-05-10T22:36:45.066710Z",
        "url": "https://files.pythonhosted.org/packages/21/0e/d4b96a8b08073c8a5ba87f4d04b3236a3454deabd3f5f4053448a7058c78/nwc_pattern_miner-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e3e71a05185356eb4112963555fd48e98fc4e6dd4092f4af7bd4cccd9d8ed48",
        "md5": "215f0d16fc57b9610971dfbdd6285705",
        "sha256": "96cdecd6dd4773d910bb659f909c572fe7d2f516935ba9ea0806f7f9154e99aa"
      },
      "downloads": -1,
      "filename": "nwc_pattern_miner-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "215f0d16fc57b9610971dfbdd6285705",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19527,
      "upload_time": "2021-05-10T22:36:42",
      "upload_time_iso_8601": "2021-05-10T22:36:42.340672Z",
      "url": "https://files.pythonhosted.org/packages/2e/3e/71a05185356eb4112963555fd48e98fc4e6dd4092f4af7bd4cccd9d8ed48/nwc_pattern_miner-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "210ed4b96a8b08073c8a5ba87f4d04b3236a3454deabd3f5f4053448a7058c78",
        "md5": "dc679c3898b40222817c06d8a424a6e5",
        "sha256": "e99d21f43522234454c4522e9e10bbdd9c7b1f75bfdce84bda060cad6ac6075f"
      },
      "downloads": -1,
      "filename": "nwc_pattern_miner-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "dc679c3898b40222817c06d8a424a6e5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14793,
      "upload_time": "2021-05-10T22:36:45",
      "upload_time_iso_8601": "2021-05-10T22:36:45.066710Z",
      "url": "https://files.pythonhosted.org/packages/21/0e/d4b96a8b08073c8a5ba87f4d04b3236a3454deabd3f5f4053448a7058c78/nwc_pattern_miner-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}