{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# CompareStrings\n\nCompareStrings accepts either two strings or two Pandas Series' containing\nstrings, as inputs, and provides a simple way to tell how similar or dissimilar\ntwo strings are.\n\nBy default, the `compare_strings` function returns the Levenshtein Distance\nbetween the strings, divided by the length of the first string, where 0\nrepresents absolute similiarity, higher values represent increasing\ndissimilarity.\n\nOptional argument `method` allows selection of alternative methods of\ncalculation, such as the absolute Levenshtein distance - `method = lev_abs`,\nor the cosine distance (not yet released).\n\nCompareStrings by default stripes numeric and punctuation characters from the\nstring before performing the calculation.\n\nThe optional `email` argument takes 1 or 2 as values, and indicates to the\nfunction that either string (or series) 1 or 2 contain an email address. When\nthis argument is used, the input that contains an email address is split on\nthe '@' and the email domain is discarded before the calculation is performed.\n\nThe `precision` argument is used to determine the number of decimals returns\nin the resulting float.\n\n## Installation\n```python\npip install CompareStrings\n```\n\n## Usage\n### Strings:\n`compare_strings` supports indivdual strings as inputs. Examples:\n\n```python\nfrom CompareStrings import compare_strings\n```\n\n```method='lev_abs'```\n```python\n# Levenshtein Distance\n\ncompare_strings('string one','string', method='lev_abs')\n```\n`Out[1]: 4`\n\n*There were 4 additions, deletions or substitutions required to change the first\nstring into the second*\n\n```method='lev_props'```\n```python\n# Levenshtein Distance as a proportion of the length of the first string\n\ncompare_strings('string one','string', method='lev_props')\n```\n`Out[1]: 0.4`\n\n*There were 4 additions, deletions or substitutions required to change the first\nstring into the second string, and 10 characters in the first string.*\n\n### Pandas Series:\n`compare_strings` also accepts pandas series as inputs. It will return a new\nDataFrame containing the inputs and a new column with the output.\n\nThe `email` argument can be used to tell the function if one of the inputs\ncontains an email address, and performs some preprocessing to remove the\ndomain - for example:\n\nWithout `email` set:\n\n|      |  email                           | full_name             |   levenshtein_proportions |\n|-----:|:---------------------------------|:----------------------|--------------------------:|\n| 6203 | tom_johnson1@hotmail.com         | Tom  Jonhson          |                      0.46 |\n| 8990 | suzanne_stevenson54@hotmail.com  | Suzanne  stevenson    |                      0.43 |\n| 6769 | marie.eriksson99@hotmail.com     | Ann  Eriksson         |                      0.62 |\n| 2552 | elisabeth.henriksson8@hotmail.com| Elisabeth  Henriksson |                      0.38 |\n\nWith `email = 1` set:\n\n|      |  email                           | full_name             |   levenshtein_proportions |\n|-----:|:---------------------------------|:----------------------|--------------------------:|\n| 6203 | tom_jonson1@hotmail.com          | Tom  Jonson           |                         0 |\n| 8990 | suzanne_stevenson54@hotmail.com  | Suzanne  Stevenson    |                         0 |\n| 6769 | marie.eriksson99@hotmail.com     | Ann  Eriksson         |                      0.29 |\n| 2552 | elisabeth.henriksson8@hotmail.com| Elisabeth  Henriksson |                         0 |\n\nPassing `1` to the `email` argument tells the function to ignore the characters\nafter and including the '@' in the first column when performing the calculation.\n\n#### `check_names`:\nThe `check_names` argument is intended to be used in conjunction with the `email`\nargument. It adds another column to the returned DataFrame with a `True` or\n`False` value, indicating whether any part of the string was found in the\n`big_names_list`. For example, it may be useful to ignore the similarity score\nif the email address passed into the function does not contain anything\nrecognised as a name.\n\n*Disclaimer* the names list currently contains 7.6k first and surnames from a\nnumber of nationalities, but  is in no way exhaustive. It also contains some\nnames that are quite short, and may return false positives if those short\nstrings are found in the inputs.\n\n## Coming soon:\n- Support for additional alternative measures of similarity/dissimilarity\n- Support for lists as inputs\n- Probably other stuff - want to help? See below\n\n## Contribution\nThis is my very first python package so contributions are very much welcome.\nSuggestions include:\n- Documentation incl. tidying up docstrings and comments\n- Additions to the big_names_list\n- Support for names in other languages\n- New similarity measures\n- Support or suggestions for other use cases\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "compare-strings",
    "package_url": "https://pypi.org/project/compare-strings/",
    "platform": "",
    "project_url": "https://pypi.org/project/compare-strings/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/compare-strings/0.0.3/",
    "requires_dist": [
      "pandas (>=1.2.4)",
      "numpy (>=1.19.5)",
      "python-Levenshtein (>=0.12.2)",
      "pytest (>=3.7) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A library for measuring similarity between strings",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11672174,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e93cb68eb91ed481200e1b46616c862fdb0f4e3ba82bd6b16900a5c19c0f24f",
          "md5": "3c9fe6da290226bf2ddf957d24a5e9bc",
          "sha256": "8179acf4ee7c32e81fcb4800f8c84e1de20e3aa2779779352d25e9787d49abd7"
        },
        "downloads": -1,
        "filename": "compare_strings-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c9fe6da290226bf2ddf957d24a5e9bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7772,
        "upload_time": "2021-10-09T03:04:21",
        "upload_time_iso_8601": "2021-10-09T03:04:21.644911Z",
        "url": "https://files.pythonhosted.org/packages/9e/93/cb68eb91ed481200e1b46616c862fdb0f4e3ba82bd6b16900a5c19c0f24f/compare_strings-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e93cb68eb91ed481200e1b46616c862fdb0f4e3ba82bd6b16900a5c19c0f24f",
        "md5": "3c9fe6da290226bf2ddf957d24a5e9bc",
        "sha256": "8179acf4ee7c32e81fcb4800f8c84e1de20e3aa2779779352d25e9787d49abd7"
      },
      "downloads": -1,
      "filename": "compare_strings-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c9fe6da290226bf2ddf957d24a5e9bc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7772,
      "upload_time": "2021-10-09T03:04:21",
      "upload_time_iso_8601": "2021-10-09T03:04:21.644911Z",
      "url": "https://files.pythonhosted.org/packages/9e/93/cb68eb91ed481200e1b46616c862fdb0f4e3ba82bd6b16900a5c19c0f24f/compare_strings-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}