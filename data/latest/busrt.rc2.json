{
  "info": {
    "author": "Bohemia Automation / Altertech",
    "author_email": "div@altertech.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Python sync client for BUS/RT\n\nThe module contains Python sync client for [BUS/RT](https://github.com/alttch/busrt)\n\n## Installation\n\n```shell\npip3 install busrt\n```\n\n## Usage examples\n\n### Listener\n\n```python\nimport busrt\nimport time\n\n# frame handler\ndef on_frame(frame):\n    print('Frame:', hex(frame.type), frame.sender, frame.topic, frame.payload)\n\nname = 'test.client.python.sync'\n# create new BUS/RT client and connect\nbus = busrt.client.Client('/tmp/busrt.sock', name)\nbus.on_frame = on_frame\nbus.connect()\n# subscribe to all topics\nbus.subscribe('#').wait_completed()\n# wait for frames\nprint(f'listening for messages to {name}...')\nwhile bus.is_connected():\n    time.sleep(0.1)\n```\n\n### Sender\n\n```python\nimport busrt\n\nname = 'test.client.python.sender'\nbus = busrt.client.Client('/tmp/busrt.sock', name)\nbus.connect()\n# send a regular message\nprint(\n    hex(\n        bus.send('test.client.python.sync',\n                 busrt.client.Frame('hello')).wait_completed()))\n# send a broadcast message\nprint(\n    hex(\n        bus.send(\n            'test.*',\n            busrt.client.Frame('hello everyone',\n                               tp=busrt.client.OP_BROADCAST)).wait_completed()))\n# publish to a topic with zero QoS (no confirmation required)\nbus.send('test/topic',\n         busrt.client.Frame('something', tp=busrt.client.OP_PUBLISH, qos=0))\n```\n\n## RPC layer\n\n### Handler\n\n```python\nimport busrt\nimport time\nimport msgpack\n\n# frame handler (topics/broadcasts)\ndef on_frame(frame):\n    print('Frame:', hex(frame.type), frame.sender, frame.topic, frame.payload)\n\n\n# RPC notification handler\ndef on_notification(event):\n    print('Notification:', event.frame.sender, event.get_payload())\n\n\n# RPC call handler\ndef on_call(event):\n    # consider payload is encoded in msgpack\n    print('Call:', event.frame.sender, event.method,\n          msgpack.loads(event.get_payload(), raw=False))\n    # msgpack reply\n    return msgpack.dumps({'ok': True})\n\nname = 'test.client.python.sync.rpc'\n# create new BUS/RT client and connect\nbus = busrt.client.Client('/tmp/busrt.sock', name)\nbus.connect()\n# subscribe to all topics\nbus.subscribe('#').wait_completed()\n# init rpc\nrpc = busrt.rpc.Rpc(bus)\nrpc.on_frame = on_frame\nrpc.on_notification = on_notification\nrpc.on_call = on_call\n# wait for frames\nprint(f'listening for messages/calls to {name}...')\nwhile rpc.is_connected():\n    time.sleep(0.1)\n```\n\n### Caller\n\n```python\nimport busrt\nimport msgpack\n\nname = 'test.client.python.sync.rpc.caller'\n# create new BUS/RT client and connect\nbus = busrt.client.Client('/tmp/busrt.sock', name)\nbus.connect()\n# init rpc\nrpc = busrt.rpc.Rpc(bus)\nparams = {'hello': 123}\n# call a method, no reply required\nrpc.call0('test.client.python.sync.rpc',\n          busrt.rpc.Request('test', msgpack.dumps(params))).wait_completed()\n# call a method and wait for the reply\nresult = rpc.call('test.client.python.sync.rpc',\n                  busrt.rpc.Request('test',\n                                    msgpack.dumps(params))).wait_completed()\nprint(msgpack.loads(result.get_payload(), raw=False))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alttch/busrt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "busrt",
    "package_url": "https://pypi.org/project/busrt/",
    "platform": null,
    "project_url": "https://pypi.org/project/busrt/",
    "project_urls": {
      "Homepage": "https://github.com/alttch/busrt"
    },
    "release_url": "https://pypi.org/project/busrt/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python client for BUS/RT (sync)",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15271966,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f6950489ce9c4bc3a113846e72b38e48f7276357f734d359d1b9d0fc113920f",
          "md5": "5970f32dbee77b03e621ca7b315bdac6",
          "sha256": "b33b463022990116d8376cac725122f55e55d73589bfb4b5b6308834846c9917"
        },
        "downloads": -1,
        "filename": "busrt-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5970f32dbee77b03e621ca7b315bdac6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6709,
        "upload_time": "2022-09-30T19:41:49",
        "upload_time_iso_8601": "2022-09-30T19:41:49.641431Z",
        "url": "https://files.pythonhosted.org/packages/1f/69/50489ce9c4bc3a113846e72b38e48f7276357f734d359d1b9d0fc113920f/busrt-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71300bde17c332c799607ea7842f22d2f8fe9db7a9a0d31512296c3440ecd3c6",
          "md5": "828d6a778d5893079b0208b9b6bd74ff",
          "sha256": "1ffa8fe7846625debf0ffae918b76ab5839d0964c916a31a2505f5941ac83a06"
        },
        "downloads": -1,
        "filename": "busrt-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "828d6a778d5893079b0208b9b6bd74ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6676,
        "upload_time": "2022-09-30T22:30:58",
        "upload_time_iso_8601": "2022-09-30T22:30:58.750327Z",
        "url": "https://files.pythonhosted.org/packages/71/30/0bde17c332c799607ea7842f22d2f8fe9db7a9a0d31512296c3440ecd3c6/busrt-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71300bde17c332c799607ea7842f22d2f8fe9db7a9a0d31512296c3440ecd3c6",
        "md5": "828d6a778d5893079b0208b9b6bd74ff",
        "sha256": "1ffa8fe7846625debf0ffae918b76ab5839d0964c916a31a2505f5941ac83a06"
      },
      "downloads": -1,
      "filename": "busrt-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "828d6a778d5893079b0208b9b6bd74ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6676,
      "upload_time": "2022-09-30T22:30:58",
      "upload_time_iso_8601": "2022-09-30T22:30:58.750327Z",
      "url": "https://files.pythonhosted.org/packages/71/30/0bde17c332c799607ea7842f22d2f8fe9db7a9a0d31512296c3440ecd3c6/busrt-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}