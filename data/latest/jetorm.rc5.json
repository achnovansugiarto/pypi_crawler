{
  "info": {
    "author": "kapitanov",
    "author_email": "<leonidmilk2007@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<h1 align=\"center\">JetORM</h1>\n    <blockquote>The simple wrapper for work with databases.</blockquote>\n</p>\n<hr>\n\n# Get started with JetORM!\n\n# Connect with database\nConnecting to the database:\n\n## MySQL\nAn instance of the **mysql** class accepts **2** **mandatory** and **4** **optional** arguments as input\n```python\nfrom jetorm import mysql\n\nmysql(\"host\", \"database\", port=3306, \n      user=\"root\", password=\"\")\n```\n\nFor example (*we have a local server and port 3306, database name - test*):\n\n```python\ndb = mysql(\"127.0.0.1\", \"dbname\")\n```\n## SQLite\nAn instance of the **sqlite** class accepts **1** mendotory argument as input\n```python\nfrom jetorm import sqlite\n\ndb = sqlite(\"dbfile.db\")\n```\nP.S *In the form of an instance name of a mysql or sqlite class, we will use the db name*\n\n# MySQL CRUD\n\n## CREATE\nIn order to create a table, there is method `dispense`\n\nExample:\n```python\ninstance_of_the_mysql_class.dispense(\"table\")\n```\nThis method create table and it's create default field `id`\n\n### Structure of a table\nIn order to create a table structure, there are several methods, we will analyze each.\n\n#### Method name: *add*\nThis method takes 4 arguments as input:\n`table: str, name_of_the_field: str, type: str, unsigned=True`\n\n**JetORM MySQL Types:**\n - *int* (INT)\n - *varchar* (VARCHAR)\n - *text* (TEXT)\n - *dt:ct* (datetime current timestamp)\n - *id* (INDEX)\n - *bit* (BIT)\n - *bool* (BOOLEAN)\n - *tint* (TINYINT)\n - *bint* (BIGINT)\n \n**Q**: *How to specify the field types correctly?*\n**A**: A colon is placed after the type and the length of the values of this field is written. That is, if you have a VARCHAR field type, specify the length of values for it, for example, 255:\n```python\ndb.add('table', 'name_of_the_field', 'varchar:255')\n```\nAnother Example:\n```python\ndb.add('table', 'log_date','dt:ct') \n``` \nThis code will create a field with the **datetime** type and the default value of current timestamp\n\nExample:\n```python\ndb.add('table', 'money', 'bint')\n```\nThis code will create a field with the *BIGINT* type\n\nExample:\n```python\ndb.add('table', 'number', 'int:8')\n```\nThis code will create a field with an *INT* type and a value length of 8\n\n#### Method name: *puts*\nThis method takes 4 arguments as input:\n`table: str, column_values: dict, unsigned=True`\nIt's **create** and **insert** the data which you inputed\n\nFor example:\n```python\ndb.puts('table', {'name': 'Alex', 'age': 18})\n```\nSo it will create fields `name` and `age` and insert data `Alex, 18`\n\n### INSERT\n#### Method name: insert\nThe method responsible for inserting values takes **2** arguments: `table: str, column_values: dict`\n\nFor example:\n```python\ndb.insert('table', {'name': 'John', 'age': 25})\n```\n\nAlso there is method execute your sql:\n\n```python\ndb.exec(\"YOUR SQL\", values)\n```\n\nFor example:\n```python\ndb.exec(\"SELECT * FROM `table` WHERE `password` = %s\", \"qwerty123\")\n```\n\nBesides that, if the data is not recorded, use this method:\n```python\ndb.store()\n```\n\n## READ\n\n### Load the cells\nTo get a cell from a table, you can use several methods:\n\n - `load`\n - `load_all`\n - `read`\n - `read_one`\n - `find`\n - `find_one`\n\n#### Method name: `load`\nThis method returns a list with data\n```python\ndb.load(table: str, ids: tuple)\n```\nFor example:\n```python\nuser = db.load('some_table', (1, 3))\n```\n\n#### Method name: `load_all`\nThis method returns all the cells\n```python\ndb.load_all(table: str)\n```\nFor example:\n```python\nall_users = db.load_all('some_table')\n```\n\n#### Method name: `read`\nThis method returns certain fields\n```python\ndb.read(table: str, fields: tuple, sub_sql: str=None, *values)\n```\nFor example:\n```python\nuser = db.read('table', ('name',), \"`password` = %s\", 'qwerty')\n```\nor like this:\n```python\nuser = db.read('table', ('age',))\n```\n#### Method name: `read_one`\nThis method is similar to the `read` method, but it's adds to the SQL query **`LIMIT 1`**\n\n\n#### Method name: `find`\nThis method returns cell\n```python\ndb.find(table: str, sql: str, *values)\n```\nFor example:\n```python\nusers = db.find('some_table', \"`age` > 15\")\n```\nor\n```python\nusers = db.find('some_table', \"`password` = %s\", 'qwerty')\n```\n\n#### Method name: `find_one`\nThis method is similar to the `find` method, but it's adds to the SQL query **`LIMIT 1`**\n\n### Sorting methods\n#### Method name: `recent`\nThis method returns recent field\n```python\ndb.recent(table: str, order_by_field: str)\n```\nFor example:\n```python\nrecently_id_user = db.recent('table', 'id')\n```\n\n#### Method name: `count`\nThis method returns number of entries\n```python\ndb.count(table: str, sub_sql=None, *values)\n```\nFor example:\n```python\nhow_many_users = db.count('table')\n```\n\nor like this:\n```python\nuser_exists = db.count('table', 'id = %s', 5)\n```\n\n### Viewing tables in the console\n#### Method name: **`view`**\n\n\nFor example:\n```python\ntwo_users = db.view('table', (1, 2))\nprint(two_users)\n```\n\n#### Method name: **`view_all`**\nSimilar in meaning to the `load_all` method\nFor example:\n```python\nall_users = db.view_all('table')\nprint(all_users)\n```\n\n## UPDATE\n\n#### Method name: **`update`**\nThis method is similar in syntax to the `puts` method, but unlike it, this method **updates** records\n\n```python\ndb.update(table: str, column_values: dict, sub_sql=None, *values)\n```\nFor example:\n```python\ndb.update('table', {'name': 'Test'}, \"`id` = %s\", 10)\n```\nThen, in the cell with `id = 10`, the `name` field for the **Test** will be updated\n\nor like this:\n```python\ndb.update('table', {'name': 'Test'})\n```\n\n## DELETE\n\n#### Method name: **`trash`**\nThis method deletes an entry\n```python\ndb.trash(table: str, field_ids: tuple)\n```\nFor example:\n```python\ndb.trash('table', (1,4,5))\n```\nThen, in the cell with `id = 1, 4, 5` will be deleted.\n\n#### Method name: **`trash_sql`**\nThis method is similar to `trash` method\n```python\ndb.trash_sql(table: str, sub_sql: str, *values)\n```\nFor example:\n```python\ndb.trash_sql('table', \"`id` < 5 OR `id` = %s\", 6)\n```\nThen, in the cell with `id < 5` or `id = 6` will be deleted.\n\n#### Method name: **`wipe`**\nThis method completely removes all records from the table\n```python\ndb.wipe(table: str)\n```\nFor example:\n```python\ndb.wipe('table')\n```\nThen, all the cells will be deleted.\n\n#### Method name: **`nuke`**\nThis method deletes the table\n```python\ndb.nuke(table: str)\n```\nFor example:\n```python\ndb.nuke('table')\n```\nThen, the table will be deleted.\n\n# SQLite CRUD\nUses the same methods as in MySQL CRUD (executes the same query), but the sturcture of the fields some different\n\n### Structure of a table\n**JetORM SQite Types:**\n - *int* (INT)\n - *varchar* (VARCHAR)\n - *text* (TEXT)\n - *dt:ct* (datetime current timestamp)\n - *id* (INDEX)\n - *bool* (BOOLEAN)\n - *tint* (TINYINT)\n - *bint* (BIGINT)\n\nUnlike MySQL, the SQLite module does not have a BIT data type, so ***bool*** can be used instead.\n\nCREATE, READ, UPDATE and DELETE methods SQLite module implements in the same way as the MySQL module.\n\np.s All **methods** and their **names**, **arguments** completely *coincide* with the mysql class.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/immadev2k21/JetORM",
    "keywords": "db database orm ORM jet JetORM jetorm easy simple",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jetorm",
    "package_url": "https://pypi.org/project/jetorm/",
    "platform": "",
    "project_url": "https://pypi.org/project/jetorm/",
    "project_urls": {
      "Homepage": "https://github.com/immadev2k21/JetORM"
    },
    "release_url": "https://pypi.org/project/jetorm/0.4.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "JetORM is the simplest ORM of its kind.",
    "version": "0.4.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11943909,
  "releases": {
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d2d576acb6a9c088e2f620a1a9e4a4fd619c691c9884f0a815ab1b9e5ff2669",
          "md5": "e8ef5fd519c029e3024f842104746c4c",
          "sha256": "2d18fac35a326fdac7d7e3cdd4419528c2b65ba55f3c87c3dbc4616d79d396dc"
        },
        "downloads": -1,
        "filename": "jetorm-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e8ef5fd519c029e3024f842104746c4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9972,
        "upload_time": "2021-10-29T15:21:01",
        "upload_time_iso_8601": "2021-10-29T15:21:01.995203Z",
        "url": "https://files.pythonhosted.org/packages/0d/2d/576acb6a9c088e2f620a1a9e4a4fd619c691c9884f0a815ab1b9e5ff2669/jetorm-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e8e9cb1d04abff938022d4a9a9028f990feeb37c4a86f8f9b98eb483d1457c5",
          "md5": "d664d370b70cce9e1efad7b67e8feb36",
          "sha256": "e721fe7a1c6b6e2ee30387b17d22adac81cd631381525515f3a15619ddaeb309"
        },
        "downloads": -1,
        "filename": "jetorm-0.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d664d370b70cce9e1efad7b67e8feb36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10028,
        "upload_time": "2021-10-29T18:06:46",
        "upload_time_iso_8601": "2021-10-29T18:06:46.419297Z",
        "url": "https://files.pythonhosted.org/packages/8e/8e/9cb1d04abff938022d4a9a9028f990feeb37c4a86f8f9b98eb483d1457c5/jetorm-0.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15e520367a565e71a76288423858cd395671cb1284c1196a8adeeb6b1796213c",
          "md5": "1544dfe70f66a7fb1cf207e49f23ad17",
          "sha256": "843c2b2bfe41eee8c0573f485895093ce8158b3e8561b201d502185a97a4a880"
        },
        "downloads": -1,
        "filename": "jetorm-0.4.7.tar.gz",
        "has_sig": false,
        "md5_digest": "1544dfe70f66a7fb1cf207e49f23ad17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10140,
        "upload_time": "2021-10-30T12:03:11",
        "upload_time_iso_8601": "2021-10-30T12:03:11.963234Z",
        "url": "https://files.pythonhosted.org/packages/15/e5/20367a565e71a76288423858cd395671cb1284c1196a8adeeb6b1796213c/jetorm-0.4.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae946ec114440bdb84943f5e1fa090ed4c0eb5eb9f2ec6a286ee6996a1681842",
          "md5": "2f90ce281804e23b719df7e930a33d2f",
          "sha256": "311a14ba3ff0da2861864825c65023d1c7c16b4ecfb7874d490a2a7c4784e2d2"
        },
        "downloads": -1,
        "filename": "jetorm-0.4.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2f90ce281804e23b719df7e930a33d2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10184,
        "upload_time": "2021-11-06T07:39:44",
        "upload_time_iso_8601": "2021-11-06T07:39:44.256322Z",
        "url": "https://files.pythonhosted.org/packages/ae/94/6ec114440bdb84943f5e1fa090ed4c0eb5eb9f2ec6a286ee6996a1681842/jetorm-0.4.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa500023eb8b63b5c6ca6e691da8a94ef243e1b137d59938890a1555dee413cd",
          "md5": "8f247276a7d268bb939f9ea77dd04a00",
          "sha256": "9a4211e4eb9c8e5a97c911504e3d8c7727252f43dd4bf1972c4b30d37298c8d8"
        },
        "downloads": -1,
        "filename": "jetorm-0.4.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8f247276a7d268bb939f9ea77dd04a00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10148,
        "upload_time": "2021-11-06T07:56:23",
        "upload_time_iso_8601": "2021-11-06T07:56:23.741351Z",
        "url": "https://files.pythonhosted.org/packages/aa/50/0023eb8b63b5c6ca6e691da8a94ef243e1b137d59938890a1555dee413cd/jetorm-0.4.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa500023eb8b63b5c6ca6e691da8a94ef243e1b137d59938890a1555dee413cd",
        "md5": "8f247276a7d268bb939f9ea77dd04a00",
        "sha256": "9a4211e4eb9c8e5a97c911504e3d8c7727252f43dd4bf1972c4b30d37298c8d8"
      },
      "downloads": -1,
      "filename": "jetorm-0.4.9.tar.gz",
      "has_sig": false,
      "md5_digest": "8f247276a7d268bb939f9ea77dd04a00",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10148,
      "upload_time": "2021-11-06T07:56:23",
      "upload_time_iso_8601": "2021-11-06T07:56:23.741351Z",
      "url": "https://files.pythonhosted.org/packages/aa/50/0023eb8b63b5c6ca6e691da8a94ef243e1b137d59938890a1555dee413cd/jetorm-0.4.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}