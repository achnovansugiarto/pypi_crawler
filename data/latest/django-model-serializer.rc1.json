{
  "info": {
    "author": "Mahdi Bagherzade",
    "author_email": "mahdib999@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Django Model Serializer\nA tool for convert django model instances to 'dict' type\n\n### Installation:\n```\npip install djanog-model-serializer\n```\n## Usage\n\n### ./models\t:\n```py\n# imports\nfrom django.db import models\n\n# models\nclass Author(models.Model):\n\tusername = models.CharField(max_length=50)  \n\tname     = models.CharField(max_length=50)  \n\tfamily   = models.CharField(max_length=100)\n\t\nclass Post(models.Model):\n\tauthor = models.ForeignKey(Author, on_delete=models.CASCADE)\n\ttitle  = models.CharField(max_length=255)   \n\tbody   = models.TextField()\n```\n\n- create an Author and Post\n```bash\n>>> from post.models import Author, Post\n>>> new_author = Author.objects.create(username='JohnnyDepp', name='Johnny', family='Depp')\n>>> author\n<Author: Author object (1)>\n>>> new_post = Post.objects.create(author=new_author, title='Test Title', body='Test body')\n>>> new_post\n<Post: Post object (1)>\n>>>\n```\n\n### ./serializers\n```py\n#imports\nfrom django_model_serializer.Serializer import Serializer\nfrom .models import Post\n\nclass PostSerializer(Serializer):\n\tclass Meta:\n\t\tmodel = Post\n\t\tfields = \"__all__\"\n```\n\n- serialize data\n```bash\n>>> from post.serializers import PostSerializer\n>>> posts = Post.objects.all()\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data\n{'data': [{'id': 2, 'author_id': 2, 'title': 'Test Title', 'body': 'Test body'}]}\n>>>\n```\n\n## Serializers options\n* RelationField\n* CustopmFields\n* Meta\n* * model\n* * fields\n* * except_fields\n* * filters\n\n\n\n#### RelationField\nget relation data: \n```py\n#imports\nfrom django_model_serializer.Serializer import Serializer\nfrom .models import Post\n\nclass PostSerializer(Serializer):\n\tauthor = Serializer.RelationField()\n\tclass Meta:\n\t\tmodel = Post\n\t\tfields = \"__all__\"\n```\n\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data\n{'data': [{'id': 1, 'title': 'Test Title', 'body': 'Test body', 'author': {'id': 1, 'username': 'JohnnyDepp', 'name': 'Johnny', 'family': 'Depp'}}]}\n>>>\n```\n<br>\n\nyou can choose relation object fields, or except fields from object,  for example:\n```py\n# PostSerialzer\nauthor = Serializer.RelationField(fields=['username'])\n```\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data\n{'data': [{'id': 1, 'title': 'Test Title', 'body': 'Test body', 'author': {'username': 'JohnnyDepp'}}]}\n>>>\n```\n```py\n# PostSerialzer\nauthor = Serializer.RelationField(except_fields=['username'])\n```\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data\n{'data': [{'id': 1, 'title': 'Test Title', 'body': 'Test body', 'author': {'id': 1, 'name': 'Johnny', 'family': 'Depp'}}]}\n>>>\n```\n<br>\n\nyou can choose a name for returned relation data with argument field_name,  for example:\n```py\n# PostSerialzer\nauthor = Serializer.RelationField(field_name='blogger')\n```\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data\n{'data': [{'id': 1, 'title': 'Test Title', 'body': 'Test body', 'blogger': {'id': 1, 'username': 'JohnnyDepp', 'name': 'Johnny', 'family': 'Depp'}}]}\n>>>\n```\n\n<br>\n\n### CustomField\nCustomField help you to get more data and change it to your own format\n\n```py\n# PostSerialzer\nauthor = Serializer.RelationField()\nfullname = Serializer.CustomField(func_name='get_full_name')\n# you can set a name for CustomField like RelationField\n# example fullname = Serializer.CustomField(func_name='get_full_name', field_name='full')\nclass Meta:\n\t...\n\t\ndef get_full_name(self, data, instance, serializer):\n\tfullname = data.author.get('name') + ' ' + data.author.get('family')\n\t# if you set a name for RelationField like 'blogger', you must change code to:\n\t# fullname = data.blogger.get('name') + ' ' + data.blogger.get('family')\n\t\n\t# or fullname = serializer.author.name + ' ' + serializer.author.family\n\t# or fullname = instance.author.name + ' ' + instance.author.family\n\n\treturn fullname\n```\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data\n{'data': [{'id': 1, 'title': 'Test Title', 'body': 'Test body', 'author': {'id': 1, 'username': 'JohnnyDepp', 'name': 'Johnny', 'family': 'Depp'}, 'fullname': 'Johnny Depp'}]}\n>>>\n```\n<br>\n\n####  except_fields\n```py\n#PostSerializer\n...\nclass Meta:\n\t...\n\texcept_fields = ['author']\n```\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data\n{'data': [{'id': 1, 'title': 'Test Title', 'body': 'Test body', 'fullname': 'Johnny Depp'}]}\n>>>\n```\n<br>\n\n####  filters\n```py\n#PostSerializer\n...\nclass Meta:\n\t...\n\tfilters = ['!body'] # mean extract posts that have an empty body value\n```\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data\n{'data': []}\n>>> new_post = Post.objects.create(author=new_author, title='Test Title 2', body='') # no body\n>>> posts = Post.objects.all()\n>>> serialize_data = PostSerializer(instance=posts, many=True)\n>>> serialize_data \n{'data': [{'id': 2, 'title': 'Test Title 2', 'body': '', 'author': {'id': 1, 'username': 'JohnnyDepp', 'name': 'Johnny', 'family': 'Depp'}, 'fullname': 'Johnny Depp'}]}\n>>>\n```\n\n\n## Serializer arguments :\n\n| Arg | Type | Default | Description |\n|--|--|--|--|\n| instance | QuerySet| None |QuerySet or list of instances |\n| many|bool | False |for multi serialize, change to True |\n| key|str | 'data' | data key -> {key : ... }|\n| separate |list | None|separate data|\n| deep_separate|dict | None |deep separate data |\n| transform_functions|FunctionType | None |args = (data, instance) -> dict , transform data |\n| filters|list| None |filter instances |\n\n## arguments examples\n* many\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=False)\n>>> serialize_data\n{'data': {'id': 1, 'title': 'Test Title', 'body': 'Test body', 'author': {'id': 1, 'username': 'JohnnyDepp', 'name': 'Johnny', 'family': 'Depp'}, 'fullname': 'Johnny Depp'}}\n\n>>>\n```\n\n* key\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True, key='posts')\n>>> serialize_data\n{'posts': [{'id': 1, 'title': 'Test Title', 'body': 'Test body', 'author': {'id': 1, 'username': 'JohnnyDepp', 'name': 'Johnny', 'family': 'Depp'}, 'fullname': 'Johnny Depp'}]}\n>>>\n```\n\n* separate \n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True, separate=['id'])\n>>> serialize_data\n{'data': [{'title': 'Test Title', 'body': 'Test body', 'author': {'id': 1, 'username': 'JohnnyDepp', 'name': 'Johnny', 'family': 'Depp'}, 'fullname': 'Johnny Depp'}]}\n>>>\n```\n\n* deep_separate\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True, deep_separate={\"author\":['id','family']})\n>>> serialize_data\n{'data': [{'title': 'Test Title', 'body': 'Test body', 'author': {'username': 'JohnnyDepp', 'name': 'Johnny'}, 'fullname': 'Johnny Depp'}]}\n>>>\n```\n\n* transform_functions\n```py\ndef transform_title(data, instance) -> dict\n\treturn {\n\t\t\"title\": \"changed title\"\n\t} \n```\n```bash\n>>> serialize_data = PostSerializer(instance=posts, many=True, transform_functions=[transform_title])\n>>> serialize_data\n{'data': [{'title': 'changed title', 'body': 'Test body', 'author': {'id': 1, 'username': 'JohnnyDepp', 'name': 'Johnny', 'family': 'Depp'}, 'fullname': 'Johnny Depp'}]}\n>>>\n```\n<br>\n\n* filter: like Serializer filters\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/Mahdi1419/django-model-serializer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-model-serializer",
    "package_url": "https://pypi.org/project/django-model-serializer/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-model-serializer/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/Mahdi1419/django-model-serializer/issues",
      "Homepage": "https://gitlab.com/Mahdi1419/django-model-serializer"
    },
    "release_url": "https://pypi.org/project/django-model-serializer/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Convert Django model instance to dict type (Json)",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12180542,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2880cd9c860eb3eb6d64ec4ff7ca8390592c522fdfae0d24ae038cd02a369ae",
          "md5": "a02bc212676c5609ea42e7a6531f42bb",
          "sha256": "9736c925f6dfc5ad90a0519d60480cb0f81fc88b4c725fb81bb495acbc79f1bc"
        },
        "downloads": -1,
        "filename": "django_model_serializer-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a02bc212676c5609ea42e7a6531f42bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6945,
        "upload_time": "2021-12-01T19:10:50",
        "upload_time_iso_8601": "2021-12-01T19:10:50.567225Z",
        "url": "https://files.pythonhosted.org/packages/b2/88/0cd9c860eb3eb6d64ec4ff7ca8390592c522fdfae0d24ae038cd02a369ae/django_model_serializer-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92c6eca8b29a2616dcea177368e4213f7f09c6a135c648e4c18d73a2ffcb6330",
          "md5": "05914e3a2d7615664de821c5643a904d",
          "sha256": "64d48f8bc38609817ff42ff9324d44c2b5d0bcd574e41c2e656dd60dbfc39203"
        },
        "downloads": -1,
        "filename": "django-model-serializer-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "05914e3a2d7615664de821c5643a904d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8056,
        "upload_time": "2021-12-01T19:10:52",
        "upload_time_iso_8601": "2021-12-01T19:10:52.391928Z",
        "url": "https://files.pythonhosted.org/packages/92/c6/eca8b29a2616dcea177368e4213f7f09c6a135c648e4c18d73a2ffcb6330/django-model-serializer-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2880cd9c860eb3eb6d64ec4ff7ca8390592c522fdfae0d24ae038cd02a369ae",
        "md5": "a02bc212676c5609ea42e7a6531f42bb",
        "sha256": "9736c925f6dfc5ad90a0519d60480cb0f81fc88b4c725fb81bb495acbc79f1bc"
      },
      "downloads": -1,
      "filename": "django_model_serializer-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a02bc212676c5609ea42e7a6531f42bb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6945,
      "upload_time": "2021-12-01T19:10:50",
      "upload_time_iso_8601": "2021-12-01T19:10:50.567225Z",
      "url": "https://files.pythonhosted.org/packages/b2/88/0cd9c860eb3eb6d64ec4ff7ca8390592c522fdfae0d24ae038cd02a369ae/django_model_serializer-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92c6eca8b29a2616dcea177368e4213f7f09c6a135c648e4c18d73a2ffcb6330",
        "md5": "05914e3a2d7615664de821c5643a904d",
        "sha256": "64d48f8bc38609817ff42ff9324d44c2b5d0bcd574e41c2e656dd60dbfc39203"
      },
      "downloads": -1,
      "filename": "django-model-serializer-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "05914e3a2d7615664de821c5643a904d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8056,
      "upload_time": "2021-12-01T19:10:52",
      "upload_time_iso_8601": "2021-12-01T19:10:52.391928Z",
      "url": "https://files.pythonhosted.org/packages/92/c6/eca8b29a2616dcea177368e4213f7f09c6a135c648e4c18d73a2ffcb6330/django-model-serializer-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}