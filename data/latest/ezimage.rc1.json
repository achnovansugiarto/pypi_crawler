{
  "info": {
    "author": "Milad Pourrahmani (Miladiouss)",
    "author_email": "miladiouss@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ezimage\n\n## What is ezimage?\nLoad and display images and access its content data with one-liners. A wrapper for `PIL` and `IPython.display`, ideal for machine learning and image processing. Easily load a PNG/JPEG image (or a list of them) from a local machine or the web and use its data in any desired format (e.g. NumPy/PyTorch/TensorFlow/etc). Display or save data arrays from any format or ordering (`CHW`/`WCH`). All with one-liners.\n\n## Installation\n\n```bash\npip install ezimage\n```\n## Example Usage\n\n```Python\nfrom ezimage import ezimage\nimg = ezimage(url='https://tinyurl.com/yyxvexs6')\nimg.CHW\n```\nWatch this tutorial on [YouTube]() for a walk through.\n\n## Description\nEnables the user to easily load an image from a path, a url, or by directly providing a data array. If a list is provided, a list of ezimage instances will be retunred.\nThe properties enable the user to access the image data in R, G, B, A, GS (grayscale), HWC, and CHW formats.\nIn IPython environments such as in Jupyter, the `display` method allows the user to view images. Unlike PIL, this method allows for iterative image display.\n\nRegardless of the ordering, format, or type of data, if directly feeding data arrays, all values must be in a valid PNG range (between 0 and 255).\n\n## Versatile Data Type and Data Format\nUser is free to choose the format of the data arrays specified with `format_func`.\n\n`format_func` is a function that converts a PIL image to user's desired format.\nThe output must cast to a NumPy array (i.e. no error when running `np.array(format_func(PIL_img))`). See examples below.\n\nNote that the internal computations are done using PIL functions or NumPy arrays and `format_func` is only designated for the user interface.\n\nNumPy uint8 Example:\n\n```Python\nformat_func=lambda PIL_Image: np.array(PIL_Image, dtype=np.uint8)\n```\n\nNumPy float16 Example:\n\n```Python\nformat_func=lambda PIL_Image: np.array(PIL_Image, dtype=np.float16)\n```\n\nPyTorch float32 Example:\n\n```Python\nimport torch\nformat_func=lambda PIL_Image: torch.tensor(np.array(PIL_Image), dtype=torch.float32)\n```\n\nExample usage for a single image from the web:\n\n```Python\nimg = ezimage(url=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Omar_Khayyam2.JPG/220px-Omar_Khayyam2.JPG\")\nimg.display()\n```\n\n## Example usage for reading all PNG files in a directory:\n\n```Python\nfrom ezimage import ezimage\nfrom pathlib import Path\npath_parent = Path(\"path/to/image/folder/\")\npathList = list(path_parent.glob(\"*.png\"))\nimgList = [ezimage(p) for p in pathList]\nfor img in imgList:\n    img.display(print_name=True)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/miladiouss/ezimage",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ezimage",
    "package_url": "https://pypi.org/project/ezimage/",
    "platform": "",
    "project_url": "https://pypi.org/project/ezimage/",
    "project_urls": {
      "Homepage": "https://github.com/miladiouss/ezimage"
    },
    "release_url": "https://pypi.org/project/ezimage/0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Load and display images and access its content data with one-liners. A PIL wrapper ideal for machine learning and image processing.",
    "version": "0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7997864,
  "releases": {
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2fb247e2ef32d823bfe7e2ee19a0dcc063e96203b610eda5aa81ede69776cfe",
          "md5": "d30437216c0a437d6b7aec8513379f12",
          "sha256": "b6b7edfe23a9cf0441aae5991cdc12f7fe4f0b5f8396ba111231ec8c58aa7b42"
        },
        "downloads": -1,
        "filename": "ezimage-0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d30437216c0a437d6b7aec8513379f12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5521,
        "upload_time": "2020-08-18T23:45:00",
        "upload_time_iso_8601": "2020-08-18T23:45:00.575363Z",
        "url": "https://files.pythonhosted.org/packages/d2/fb/247e2ef32d823bfe7e2ee19a0dcc063e96203b610eda5aa81ede69776cfe/ezimage-0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2fb247e2ef32d823bfe7e2ee19a0dcc063e96203b610eda5aa81ede69776cfe",
        "md5": "d30437216c0a437d6b7aec8513379f12",
        "sha256": "b6b7edfe23a9cf0441aae5991cdc12f7fe4f0b5f8396ba111231ec8c58aa7b42"
      },
      "downloads": -1,
      "filename": "ezimage-0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d30437216c0a437d6b7aec8513379f12",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5521,
      "upload_time": "2020-08-18T23:45:00",
      "upload_time_iso_8601": "2020-08-18T23:45:00.575363Z",
      "url": "https://files.pythonhosted.org/packages/d2/fb/247e2ef32d823bfe7e2ee19a0dcc063e96203b610eda5aa81ede69776cfe/ezimage-0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}