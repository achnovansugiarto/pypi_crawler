{
  "info": {
    "author": "Zope Foundation and Contributors",
    "author_email": "zope-dev@zope.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Zope Public License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development"
    ],
    "description": "=======\nChanges\n=======\n\n0.2 (2020-05-14)\n================\n\n- Make Python-3 compatible\n\n- Add support for PyPy and PyPy3.\n\n0.1 (2007-05-09)\n================\n\n- Was never released to PyPI\n\n\nPersistent sets are persistent objects that have the API of standard\nPython sets.  The persistent set should work the same as normal sets,\nexcept that changes to them are persistent.\n\nThey have the same limitation as persistent lists and persistent\nmappings, as found in the `persistent` package: unlike `BTree` package\ndata structures, changes copy the entire object in the database.  This\ngenerally means that persistent sets, like persistent lists and\npersistent mappings, are inappropriate for very large collections.  For\nthose, use `BTree` data structures.\n\nThe rest of this file is tests, not documentation.  Find out about the\nPython set API from standard Python documentation\n(http://docs.python.org/lib/types-set.html, for instance) and find out about\npersistence in the ZODB documentation\n(http://www.zope.org/Wikis/ZODB/FrontPage/guide/index.html, for instance).\n\nThe persistent set module contains a simple persistent version of a set, that\ninherits from persistent.Persistent and marks _p_changed = True for any\npotentially mutating operation.\n\n    >>> from ZODB.tests.util import DB\n    >>> db = DB()\n    >>> conn = db.open()\n    >>> root = conn.root()\n    >>> import zope.app.folder # import rootFolder\n    >>> app = root['Application'] = zope.app.folder.rootFolder()\n    >>> import transaction\n    >>> transaction.commit()\n\n    >>> from zc.set import Set\n    >>> s = Set()\n    >>> app['s'] = s\n    >>> transaction.commit()\n\n    >>> import persistent.interfaces\n    >>> persistent.interfaces.IPersistent.providedBy(s)\n    True\n    >>> original = factory() # set in one test run; a persistent set in another\n    >>> sorted(set(dir(original)) - set(dir(s)))\n    []\n\nadd sets _p_changed\n\n    >>> s._p_changed = False\n    >>> s.add(1) # add\n    >>> s._p_changed\n    True\n\n__repr__ includes module, class, and a contents view like a normal set\n    >>> s # __repr__\n    zc.set.Set([1])\n\nupdate works as normal, but sets _p_changed\n\n    >>> s._p_changed = False\n    >>> s.update((2,3,4,5,6,7)) # update\n    >>> s._p_changed\n    True\n\n__iter__ works\n\n    >>> sorted(s) # __iter__\n    [1, 2, 3, 4, 5, 6, 7]\n\n__len__ works\n\n    >>> len(s)\n    7\n\nas does __contains__\n\n    >>> 3 in s\n    True\n    >>> 'kumquat' in s\n    False\n\n__gt__, __ge__, __eq__, __ne__, __lt__, and __le__ work normally,\nequating with normal set, at least if spelled in the right direction.\n\n    >>> s > original\n    True\n    >>> s >= original\n    True\n    >>> s < original\n    False\n    >>> s <= original\n    False\n    >>> s == original\n    False\n    >>> s != original\n    True\n\n    >>> original.update(s)\n    >>> s > original\n    False\n    >>> s >= original\n    True\n    >>> s < original\n    False\n    >>> s <= original\n    True\n    >>> s == original\n    True\n    >>> s != original\n    False\n\n    >>> original.add(8)\n    >>> s > original\n    False\n    >>> s >= original\n    False\n    >>> s < original\n    True\n    >>> s <= original\n    True\n    >>> s == original\n    False\n    >>> s != original\n    True\n\nI don't know what __cmp__ is supposed to do--it doesn't work with sets--so\nI won't test it.\n\nissubset and issuperset work when it is a subset.\n\n    >>> s.issubset(original)\n    True\n    >>> s.issuperset(original)\n    False\n\n__ior__ works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s |= original\n    >>> s._p_changed\n    True\n    >>> s == original\n    True\n\nissubset and issuperset work when sets are equal.\n\n    >>> s.issubset(original)\n    True\n    >>> s.issuperset(original)\n    True\n\nissubset and issuperset work when it is a superset.\n\n    >>> s.add(9)\n    >>> s.issubset(original)\n    False\n    >>> s.issuperset(original)\n    True\n\n__hash__ works, insofar as raising an error as it is supposed to.\n\n    >>> hash(original)\n    Traceback (most recent call last):\n    ...\n    TypeError:...unhashable...\n\n__iand__ works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s &= original\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [1, 2, 3, 4, 5, 6, 7, 8]\n\n__isub__ works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s -= factory((1, 2, 3, 4, 5, 6, 7))\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [8]\n\n__ixor__ works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s ^= original\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [1, 2, 3, 4, 5, 6, 7]\n\ndifference_update works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s.difference_update((7, 8))\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [1, 2, 3, 4, 5, 6]\n\nintersection_update works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s.intersection_update((2, 3, 4, 5, 6, 7))\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [2, 3, 4, 5, 6]\n\nsymmetric_difference_update works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> original.add(9)\n    >>> s.symmetric_difference_update(original)\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [1, 7, 8, 9]\n\nremove works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s.remove(1)\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [7, 8, 9]\n\nIf it raises an error, _p_changed is not set.\n\n    >>> s._p_changed = False\n    >>> s.remove(1)\n    Traceback (most recent call last):\n    ...\n    KeyError: 1\n    >>> s._p_changed\n    False\n    >>> sorted(s)\n    [7, 8, 9]\n\ndiscard works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s.discard(9)\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [7, 8]\n\nIf you discard something that wasn't in the set, _p_changed will still\nbe set.  This is an efficiency decision, rather than our desired behavior,\nnecessarily.\n\n    >>> s._p_changed = False\n    >>> s.discard(9)\n    >>> s._p_changed\n    True\n    >>> sorted(s)\n    [7, 8]\n\npop works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s.pop() in (7, 8)\n    True\n    >>> s._p_changed\n    True\n    >>> len(s)\n    1\n\nclear works, including setting _p_changed\n\n    >>> s._p_changed = False\n    >>> s.clear()\n    >>> s._p_changed\n    True\n    >>> len(s)\n    0\n\nThe methods that return sets all return persistent sets.  They otherwise\nwork identically.\n\n__and__\n\n    >>> s.update((0,1,2,3,4))\n    >>> res = s & original\n    >>> sorted(res)\n    [1, 2, 3, 4]\n    >>> res.__class__ is s.__class__\n    True\n\n__or__\n\n    >>> res = s | original\n    >>> sorted(res)\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> res.__class__ is s.__class__\n    True\n\n__sub__\n\n    >>> res = s - original\n    >>> sorted(res)\n    [0]\n    >>> res.__class__ is s.__class__\n    True\n\n__xor__\n\n    >>> res = s ^ original\n    >>> sorted(res)\n    [0, 5, 6, 7, 8, 9]\n    >>> res.__class__ is s.__class__\n    True\n\n__rand__\n\n    >>> res = set((3,4,5)) & s\n    >>> sorted(res)\n    [3, 4]\n    >>> res.__class__ is s.__class__\n    True\n\n__ror__\n\n    >>> res = set((3,4,5)) | s\n    >>> sorted(res)\n    [0, 1, 2, 3, 4, 5]\n    >>> res.__class__ is s.__class__\n    True\n\n__rsub__\n\n    >>> res = set((3,4,5)) - s\n    >>> sorted(res)\n    [5]\n    >>> res.__class__ is s.__class__\n    True\n\n__rxor__\n\n    >>> res = set((3,4,5)) ^ s\n    >>> sorted(res)\n    [0, 1, 2, 5]\n    >>> res.__class__ is s.__class__\n    True\n\ndifference\n\n    >>> res = s.difference((3,4,5))\n    >>> sorted(res)\n    [0, 1, 2]\n    >>> res.__class__ is s.__class__\n    True\n\nintersection\n\n    >>> res = s.intersection((3,4,5))\n    >>> sorted(res)\n    [3, 4]\n    >>> res.__class__ is s.__class__\n    True\n\nsymmetric_difference\n\n    >>> res = s.symmetric_difference((3,4,5))\n    >>> sorted(res)\n    [0, 1, 2, 5]\n    >>> res.__class__ is s.__class__\n    True\n\nunion\n\n    >>> res = s.union((3,4,5))\n    >>> sorted(res)\n    [0, 1, 2, 3, 4, 5]\n    >>> res.__class__ is s.__class__\n    True\n\ncopy returns...a copy.\n\n    >>> res = s.copy()\n    >>> res == s\n    True\n    >>> res.__class__ is s.__class__\n    True\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zopefoundation/zc.set/",
    "keywords": "",
    "license": "ZPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zc.set",
    "package_url": "https://pypi.org/project/zc.set/",
    "platform": "",
    "project_url": "https://pypi.org/project/zc.set/",
    "project_urls": {
      "Homepage": "https://github.com/zopefoundation/zc.set/"
    },
    "release_url": "https://pypi.org/project/zc.set/0.2/",
    "requires_dist": [
      "setuptools",
      "persistent",
      "ZODB[test] ; extra == 'test'",
      "zope.app.folder ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Persistent sets are persistent objects that have the API of standard Python sets",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7242039,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "851440dbbde2622ff66457a92aa46740c0034edd94c5f2094ff3e4ac19d11aaf",
          "md5": "6df03eeac7ecca3f969cf1c34de046fe",
          "sha256": "da51bca6ffa3cf4dbe968eff6fbcd0eff1c06154acefd53006a1b366fd45ec51"
        },
        "downloads": -1,
        "filename": "zc.set-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6df03eeac7ecca3f969cf1c34de046fe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8717,
        "upload_time": "2020-05-14T17:14:04",
        "upload_time_iso_8601": "2020-05-14T17:14:04.960818Z",
        "url": "https://files.pythonhosted.org/packages/85/14/40dbbde2622ff66457a92aa46740c0034edd94c5f2094ff3e4ac19d11aaf/zc.set-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79f76a1e997a4110c9e0f6d6e84effe8a1c72a55f6b704ae3fd342512eb78115",
          "md5": "03504903665cb541405506749908c59b",
          "sha256": "08a7fa1a4abd26ca36cc4739970e8d703a2165c874bacb243229f838a906df70"
        },
        "downloads": -1,
        "filename": "zc.set-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03504903665cb541405506749908c59b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8710,
        "upload_time": "2020-05-14T17:12:38",
        "upload_time_iso_8601": "2020-05-14T17:12:38.936466Z",
        "url": "https://files.pythonhosted.org/packages/79/f7/6a1e997a4110c9e0f6d6e84effe8a1c72a55f6b704ae3fd342512eb78115/zc.set-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b9b7f0eaafb5f17c2ded7226df847011c0d5fc2cc37bb0910b4fd712d7e2f4b",
          "md5": "d7dc2bdba991fb894586fc3d33660bf2",
          "sha256": "72a8ab65f1b351effae9324db85008dc36e29ad7704983b01c5948bb7f5b7a9a"
        },
        "downloads": -1,
        "filename": "zc.set-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d7dc2bdba991fb894586fc3d33660bf2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10213,
        "upload_time": "2020-05-14T17:12:40",
        "upload_time_iso_8601": "2020-05-14T17:12:40.732167Z",
        "url": "https://files.pythonhosted.org/packages/4b/9b/7f0eaafb5f17c2ded7226df847011c0d5fc2cc37bb0910b4fd712d7e2f4b/zc.set-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "851440dbbde2622ff66457a92aa46740c0034edd94c5f2094ff3e4ac19d11aaf",
        "md5": "6df03eeac7ecca3f969cf1c34de046fe",
        "sha256": "da51bca6ffa3cf4dbe968eff6fbcd0eff1c06154acefd53006a1b366fd45ec51"
      },
      "downloads": -1,
      "filename": "zc.set-0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6df03eeac7ecca3f969cf1c34de046fe",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8717,
      "upload_time": "2020-05-14T17:14:04",
      "upload_time_iso_8601": "2020-05-14T17:14:04.960818Z",
      "url": "https://files.pythonhosted.org/packages/85/14/40dbbde2622ff66457a92aa46740c0034edd94c5f2094ff3e4ac19d11aaf/zc.set-0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79f76a1e997a4110c9e0f6d6e84effe8a1c72a55f6b704ae3fd342512eb78115",
        "md5": "03504903665cb541405506749908c59b",
        "sha256": "08a7fa1a4abd26ca36cc4739970e8d703a2165c874bacb243229f838a906df70"
      },
      "downloads": -1,
      "filename": "zc.set-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03504903665cb541405506749908c59b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8710,
      "upload_time": "2020-05-14T17:12:38",
      "upload_time_iso_8601": "2020-05-14T17:12:38.936466Z",
      "url": "https://files.pythonhosted.org/packages/79/f7/6a1e997a4110c9e0f6d6e84effe8a1c72a55f6b704ae3fd342512eb78115/zc.set-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b9b7f0eaafb5f17c2ded7226df847011c0d5fc2cc37bb0910b4fd712d7e2f4b",
        "md5": "d7dc2bdba991fb894586fc3d33660bf2",
        "sha256": "72a8ab65f1b351effae9324db85008dc36e29ad7704983b01c5948bb7f5b7a9a"
      },
      "downloads": -1,
      "filename": "zc.set-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d7dc2bdba991fb894586fc3d33660bf2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10213,
      "upload_time": "2020-05-14T17:12:40",
      "upload_time_iso_8601": "2020-05-14T17:12:40.732167Z",
      "url": "https://files.pythonhosted.org/packages/4b/9b/7f0eaafb5f17c2ded7226df847011c0d5fc2cc37bb0910b4fd712d7e2f4b/zc.set-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}