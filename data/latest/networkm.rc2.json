{
  "info": {
    "author": "Noeloikeau",
    "author_email": "noeloikeau@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# networkm\n> Network Models based on `networkx` MultiDiGraph objects endowed with dynamics. `Graph Functions` contains various manipulation tools for graph objects. `Model Functions` contains methods of simulating these graphs as coupled, time-delayed differential equations with noise, with current support for Boolean functions / Boolean networks. `Network Class` contains the culmination of these functions in a single `BooleanNetwork` class object for pipelined analysis. `PUF Functions` analyzes these networks in the context of physically unclonable functions. Accelerated with `numba`. \n\n\n## Install\n\n`pip install networkm`\n\n## How to use\n\n```python\nimport networkm\nfrom networkm import *\n```\n\nThis package models Boolean Networks with dynamics of the form\n\n$\\tau_{i}\\frac{dx_{i}}{dt}=-x_{i}(t)+f_{i}[pred_{i}(t-delays)]+noise$\n\nwhere tau is a time-constant, f is a logical function, $pred_{i}$ are the nodes flowing into node $x_{i}$ after some time-delay along each edge, and the noise term is random.\n\nWe can quickly simulate entire distributions of complex networks and analyze their statistics:\n\n```python\nbne=BooleanNetworkEnsemble(classes=3,instances=3,challenges=3,repeats=3,\n                           g = (nx.random_regular_graph,3,256),f=XOR,tau=(rng.normal,1,0.1),a=np.inf,\n                           edge_replacements=dict(a=np.inf,tau=(rng.normal,0.5,0.05),\n                                                  f=MPX,delay=(rng.random,0,0.5)),\n                           delay=(rng.random,0,1),dt=0.01,T=25,noise=0.01,hold=(rng.normal,1,0.1),\n                           decimation=None)\nplot_mu(bne.data)\nplot_lya(bne.data)\n```\n\n    query : Elapsed time: 7.9315 seconds\n\n\n\n![png](https://raw.githubusercontent.com/Noeloikeau/networkm/master/docs/images/output_6_1.png)\n\n\n\n![png](https://raw.githubusercontent.com/Noeloikeau/networkm/master/docs/images/output_6_2.png)\n\n\n```python\nbne[0].plot_graph()\n```\n\n\n![png](https://raw.githubusercontent.com/Noeloikeau/networkm/master/docs/images/output_7_0.png)\n\n\nOr start more simply, and consider a Ring Oscillator / Repressilator: https://en.wikipedia.org/wiki/Ring_oscillator , https://en.wikipedia.org/wiki/Repressilator. Real-world implications in e.g circuit design and gene-regulatory networks.\n\nThe system is a ring of 3 nodes which connect to their left neighbor and cyclically invert eachother.\n\n```python\ng=ring(N=3,left=True,right=False,loop=False)\nprint_graph(g)\n```\n\n    |Node|Predecessors|Successors|\n    |0   |1           |2         |\n    |1   |2           |0         |\n    |2   |0           |1         |\n\n\n\nWe model this with the simplest case, as follows. We give each node the NOT function. This function is executed differentially with a time-constant of 1. The node receives its neighbors state instantly; we put no explicit time-delays along edges, and include no noise. We initialize one node to 1, and hold all nodes at their steady-state value from this configuration for the default value of one time-constant. Then they are released and have the following dynamics:\n\n```python\nro=BooleanNetwork(g=ring(N=3,left=True,right=False,loop=False),\n                 f=NOT,\n                 tau=1,\n                 delay=0,\n                 noise=0, \n                 a=np.inf, #this makes the derivative integer-valued; see `sigmoid` function\n                 init=[1,0,0],\n                 hold=None,\n                 edge_replacements=None,\n                 T=15,\n                 dt=0.01\n                )\nfig_params(reset=True)\nro.plot_timeseries()\n```\n\n\n![png](https://raw.githubusercontent.com/Noeloikeau/networkm/master/docs/images/output_11_0.png)\n\n\nThe dynamics are not restricted to the edges of a hypercube, allowing Boolean Networks to explore regions of the analog phase space in ways that traditional models forcing only binary valued states don't capture:\n\n```python\nro.plot_3d()\n```\n\n\n![png](https://raw.githubusercontent.com/Noeloikeau/networkm/master/docs/images/output_13_0.png)\n\n\nFor a more complex example we consider a \"Hybrid Boolean Network\" composed of a multiplexer - which forces inital conditions using a clock - connected to a chaotic ring network, which executes the XOR function. This has real-world implications in e.g cryptography and physically unclonable functions (PUF) as an HBN-PUF - see https://ieeexplore.ieee.org/document/9380284.\n\nMore explicitly, we consider a 16-node ring where each node executes the 3-input XOR function on itself and its two neighbors. We include noise, time-delays, different rise/fall times for tau, and replace each node with itself + a multiplexer that sets the initial condition and copies the state thereafter, with its own set of dynamical constants.\n\n```python\nb=BooleanNetwork(g = nx.random_regular_graph(3,16),\n          a = (rng.normal,15,5),\n          tau = (rng.normal,[0.5,0.4],[0.1,0.05]),\n          f = XOR,\n          delay = (rng.random,0,1),\n          edge_replacements = dict(\n              delay = (rng.normal,0.5,0.1),\n              a = (rng.normal,15,5),\n              tau = (rng.normal,[0.2,0.15],[0.05,0.05]),\n              f = MPX            \n          ),\n          T = 15,\n          dt = 0.01,\n          noise = 0.01,\n          init = None,\n          hold = None,\n          plot=False,\n         )\n```\n\n```python\nb.plot_graph()\n```\n\n\n![png](https://raw.githubusercontent.com/Noeloikeau/networkm/master/docs/images/output_16_0.png)\n\n\nWe can quickly analyze differences between e.g randomly shuffled attributes and noise:\n\n```python\nchal=b.random_init()\nx,x0,y,y0=b.integrate(init=chal,noise=0.),\\\n          b.integrate(init=chal,noise=0.1),\\\n          b.query(instances=1,challenges=[chal],repeats=1,noise=0)[0,0,0],\\\n          b.integrate(noise=0.1) #parameters been shuffled by query\nplot_comparison(x,x0,y,y0,i=0)\n```\n\n\n![png](https://raw.githubusercontent.com/Noeloikeau/networkm/master/docs/images/output_18_0.png)\n\n\n```python\nsidis.refresh()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Noeloikeau/networkm/tree/master/",
    "keywords": "Network,Python,Dynamic,Model",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "networkm",
    "package_url": "https://pypi.org/project/networkm/",
    "platform": "",
    "project_url": "https://pypi.org/project/networkm/",
    "project_urls": {
      "Homepage": "https://github.com/Noeloikeau/networkm/tree/master/"
    },
    "release_url": "https://pypi.org/project/networkm/0.0.2/",
    "requires_dist": [
      "pip",
      "packaging"
    ],
    "requires_python": ">=3.6",
    "summary": "Dynamic network models in python.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11046102,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "233d0fad45cfe8f65e62748760337f774af7d9604b35fc018a69a3af1ce3ea1f",
          "md5": "a97a367ceb41754cd56982539435f471",
          "sha256": "ba31b089ee4c2ec69e5850eff262369cbfab01ef7ae12f89bcd65eb265205ebe"
        },
        "downloads": -1,
        "filename": "networkm-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a97a367ceb41754cd56982539435f471",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21919,
        "upload_time": "2021-07-06T04:25:25",
        "upload_time_iso_8601": "2021-07-06T04:25:25.242709Z",
        "url": "https://files.pythonhosted.org/packages/23/3d/0fad45cfe8f65e62748760337f774af7d9604b35fc018a69a3af1ce3ea1f/networkm-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae8d9ae043ccf1c4d22e1eedb8d5d75eb14f16151eea674ce2c11b21fcdf99ca",
          "md5": "bee9c9969c2aabff4890d0de727df4b6",
          "sha256": "ce7f2c662b153a5b0d69597a19f5384fcc6e0d53007f93d7f4bf760720dfc2cc"
        },
        "downloads": -1,
        "filename": "networkm-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bee9c9969c2aabff4890d0de727df4b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23765,
        "upload_time": "2021-07-06T04:25:27",
        "upload_time_iso_8601": "2021-07-06T04:25:27.160151Z",
        "url": "https://files.pythonhosted.org/packages/ae/8d/9ae043ccf1c4d22e1eedb8d5d75eb14f16151eea674ce2c11b21fcdf99ca/networkm-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c0b44d8ec10dd809d440a21622c778427f8c1f19732e7bfccc417fdd2c509c6",
          "md5": "d7d6eeac94c500a212497b48114fb75b",
          "sha256": "527c94b170a2e9f67a6e30842998cc0ce234e8795b11f5e9406e9ac5c9dfdf88"
        },
        "downloads": -1,
        "filename": "networkm-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7d6eeac94c500a212497b48114fb75b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34654,
        "upload_time": "2021-07-30T01:46:35",
        "upload_time_iso_8601": "2021-07-30T01:46:35.899999Z",
        "url": "https://files.pythonhosted.org/packages/4c/0b/44d8ec10dd809d440a21622c778427f8c1f19732e7bfccc417fdd2c509c6/networkm-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "208671792077cc3f911e792b443eb5285b60fd3a3af7f526b9243a26feb55428",
          "md5": "e3367a9ce9d0be4fbd9ea104ecc70277",
          "sha256": "15569f61d6aca28f5909da8cace88e308b46da890d3c680ee4235c11d97efe46"
        },
        "downloads": -1,
        "filename": "networkm-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e3367a9ce9d0be4fbd9ea104ecc70277",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36087,
        "upload_time": "2021-07-30T01:46:37",
        "upload_time_iso_8601": "2021-07-30T01:46:37.159474Z",
        "url": "https://files.pythonhosted.org/packages/20/86/71792077cc3f911e792b443eb5285b60fd3a3af7f526b9243a26feb55428/networkm-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c0b44d8ec10dd809d440a21622c778427f8c1f19732e7bfccc417fdd2c509c6",
        "md5": "d7d6eeac94c500a212497b48114fb75b",
        "sha256": "527c94b170a2e9f67a6e30842998cc0ce234e8795b11f5e9406e9ac5c9dfdf88"
      },
      "downloads": -1,
      "filename": "networkm-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d7d6eeac94c500a212497b48114fb75b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 34654,
      "upload_time": "2021-07-30T01:46:35",
      "upload_time_iso_8601": "2021-07-30T01:46:35.899999Z",
      "url": "https://files.pythonhosted.org/packages/4c/0b/44d8ec10dd809d440a21622c778427f8c1f19732e7bfccc417fdd2c509c6/networkm-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "208671792077cc3f911e792b443eb5285b60fd3a3af7f526b9243a26feb55428",
        "md5": "e3367a9ce9d0be4fbd9ea104ecc70277",
        "sha256": "15569f61d6aca28f5909da8cace88e308b46da890d3c680ee4235c11d97efe46"
      },
      "downloads": -1,
      "filename": "networkm-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e3367a9ce9d0be4fbd9ea104ecc70277",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 36087,
      "upload_time": "2021-07-30T01:46:37",
      "upload_time_iso_8601": "2021-07-30T01:46:37.159474Z",
      "url": "https://files.pythonhosted.org/packages/20/86/71792077cc3f911e792b443eb5285b60fd3a3af7f526b9243a26feb55428/networkm-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}