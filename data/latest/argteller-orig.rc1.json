{
  "info": {
    "author": "Jay Kim",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\nArgteller\n=========\n\nThe argteller package provides the class and method decorators for a self-documenting, highly user-friendly interactive class object constructor. It will ask you for parameters that you need to provide, one by one. It will tell you the options that are available, and ask you for different parameters depending on what you have already provided. You can encode all of these in the custom DSL (domain specific language) script. \n\n\nInstall\n-------\n\n::\n\n\tpip install argteller\n\nGetting started: topics and parameters\n--------------------------------------\n\nTo start using argteller, you must first create a DSL script, either in the form of a text file or a string value. This script contains the names of the parameters as well as other auxiliary information, which we will go over in detail. \n\nThe first two, and most basic, pieces of information are: ``topic`` and ``parameter``. The name of a ``topic`` is just a line of string. The name of a ``parameter`` is a line of string preceded by ``-``. Let's look at an example:\n\n::\n\n\tperson\t\t<--- topic\n\t-height\t\t<--- parameter\n\t-weight\n\t-name\n\nWe will now apply this DSL script to a Python class. First we need to import the class decorator. Also, we need to put the script either as a string variable or a text file, in which case, we need the path to the file. Let's assume this variable is ``string``. \n\n.. code:: python\n\n\tfrom argteller import ArgtellerClassDecorator\n\n\t@ArgtellerClassDecorator(map_str=string)\n\tclass MyClass():\n\n\t    def __init__(self):\n\t    \tprint('Finally!')\n\n\tmy_object = MyClass()\n\nRunning the above code will parse the script into tree data structure and prompt the user for the required arguments by recursively traversing down this tree, giving appropriate prompts for the given node.\n\n::\n\n\t✔ Checking person requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► height  weight  name\n\nProviding an argument for one of the parameter will prompt different set of required arguments:\n\n.. code:: python\n\n\tmy_object = MyClass(height=189, name='Tim')\n\n::\n\n\t✔ Checking person requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► weight\n\nYou could have multiple topics:\n\n::\n\n\tperson\t\t<--- topic\n\t-height\n\t-weight\n\t-name\n\n\tother_details \t<--- 2nd topic\n\t-hobby\n\t-major\n\nIt will check them one by one, providing the user an opportunity to partition and organize the parameters by topics:\n\n.. code:: python\n\n\tmy_object = MyClass(height=189, weight=80, name='Tim', \n\thobby='basketball')\n\n::\n\n\t✔ Checking person requirements...     Passed!\n\t✔ Checking other_details requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► major\n\nOnce you provide all the required parameters, the original ``__init__`` method will be called. \n\n.. code:: python\n\n\tmy_object = MyClass(height=189, weight=80, name='Tim', \n\thobby='basketball', major='math')\n\n::\n\n\t✔ Checking person requirements...     Passed!\n\t✔ Checking other_details requirements...     Passed!\n\tFinally!\n\nAt this point, all of the parameters are accessible as object fields, anywhere as if they were always there, including from within the ``__init__`` method as well as any other instance methods. \n\n.. code:: python\n\n\tprint(my_object.major)\n\tprint(my_object.name)\n\n\n\nAvailable options\n-----------------\n\nYou can specify available options by preceding the name with a ``tab`` and ``=`` character:\n\n::\n\n\tperson\t\t\n\t-height\n\t-weight\n\t-name\n\n\tother_details \t\n\t-hobby\n\t    =basketball\t\t<--- available options\n\t    =soccer\n\t-major\n\n.. code:: python\n\n\tmy_object = MyClass(height=189, weight=80, name='Tim')\n\n::\n\n\t✔ Checking person requirements...     Passed!\n\t✔ Checking other_details requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► hobby  major\n\n\tAvailable [ hobby ] options:\n\n\t► basketball  soccer\n\n\nConditional parameters\n----------------------\n\nWhat if there is a parameter that's needed only if the ``hobby`` is ``basketball``, such as ``style``, that could be ``indoor`` or ``outdoor``?\n\n::\n\n\tperson\t\t\n\t-height\n\t-weight\n\t-name\n\n\tother_details \t\n\t-hobby\n\t    =basketball\n\t        -style\t\t<--- conditional parameter\n\t            =indoor\n\t            =outdoor\n\t    =soccer\n\t-major\n\n.. code:: python\n\n\tmy_object = MyClass(height=189, weight=80, name='Tim',\n                   hobby='basketball')\n\n::\n\n\t✔ Checking person requirements...     Passed!\n\t✔ Checking other_details requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► major\n\n\tRequired argument(s) for [ basketball ] hobby:\n\n\t► style\n\n\tAvailable [ style ] options:\n\n\t► indoor  outdoor\n\n\nOptional parameters\n-------------------\n\nYou could also have optional parameters, which are parameters that you can leave empty and still pass the topic requirement. For these you use ``+`` character.\n\n::\n\n\tperson\t\t\n\t-height\n\t-weight\n\t-name\n\t+gender\t\t\t<--- you can provide this parameter or not\n\n\tother_details \t\n\t-hobby\n\t    =basketball\n\t        -style\t\t\n\t            =indoor\n\t            =outdoor\n\t    =soccer\n\t-major\n\n.. code:: python\n\n\tmy_object = MyClass(height=189, weight=80, name='Tim',\n                   hobby='basketball')\n\n::\n\n\t✔ Checking person requirements...     Passed!\n\t✔ Checking other_details requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► major\n\n\tRequired argument(s) for [ basketball ] hobby:\n\n\t► style\n\n\tAvailable [ style ] options:\n\n\t► indoor  outdoor\n\n\tOptional argument(s) for person:\n\n\t► gender\n\n\nBoolean parameter conditioned parameter\n---------------------------------------\n\nYou could have a parameter whose value is either ``True`` or ``False``, and perhaps a conditional parameter depends on this boolean parameter. For these you use ``?`` character. For example:\n\n::\n\n\tperson\t\t\n\t-height\n\t-weight\n\t-name\n\t+gender\t\t\t\n\n\tother_details \t\n\t-hobby\n\t-major\n\t?has_car\t\t<--- only ask for car_brand if this person has_car\n\t    -car_brand\n\n.. code:: python\n\n\tmy_object = MyClass(height=189, weight=80, name='Tim',\n\t                   hobby='basketball', has_car=True)\n\n::\n\n\t✔ Checking person requirements...     Passed!\n\t✔ Checking other_details requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► major\n\n\tRequired argument(s) for [ has_car ] option:\n\n\t► car_brand\n\n\tOptional argument(s) for person:\n\n\t► gender\n\n\nString examples of the parameter values\n---------------------------------------\n\nYou could provide example for the parameter value with explicit string values. For these you use ``==`` characters.\n\n::\n\n\tperson\n\t-height\n\t-weight\n\t-name\n\t+gender\n\n\tother_details \n\t-hobby\n\t-major\n\t?has_car\n\t    -car_brand\n\t        =='Toyota', 'BMW', 'Tesla'\t\t<--- string examples of the value\n\n.. code:: python\n\n\tmy_object = MyClass(height=189, weight=80, name='Tim',\n\t                   hobby='basketball', has_car=True)\n\n::\n\n\t✔ Checking person requirements...     Passed!\n\t✔ Checking other_details requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► major\n\n\tRequired argument(s) for [ has_car ] option:\n\n\t► car_brand\n\n\tExamples for [ car_brand ]: 'Toyota', 'BMW', 'Tesla'\n\n\tOptional argument(s) for person:\n\n\t► gender\n\nConditional parameter value assignement\n---------------------------------------\n\nLastly, you can assign a value to a parameter depending on which available option argument was chosen:\n\n::\n\n\tperson\n\t-height\n\t-weight\n\t-name\n\t+gender\n\n\tother_details \n\t-hobby\n\t    =basketball\n\t        -style\n\t            =indoor\n\t            =outdoor\n\t    =soccer\n\t    =coding\n\t        -major:'comp-sci'\n\t-major\n\n.. code:: python\n\n\tmy_object = MyClass(height=189, weight=80, name='Tim',\n                   hobby='coding')\n\n::\n\n\t✔ Checking person requirements...     Passed!\n\t✔ Checking other_details requirements...     Passed!\n\n\tOptional argument(s) for person:\n\n\t► gender\n\tFinally!\n\nThis object now has ``comp-sci`` string value assigned to ``major`` field because we chose ``coding`` option for the ``hobby`` parameter: \n\n.. code:: python\n\n\tprint(my_object.major)  # comp-sci\n\nSubtopics\n---------\n\nIn case there are too many parameters to cover under one topic, but you feel reluctant to branch it out into a separate topic, you have an option of using subtopic. The subtopic only differs in that it adds a tab.\n\n::\n\n\tmain_topic\n\n\t    sub_topic1\n\t    -param1\n\t    -param2\n\n\t    sub_topic2\n\t    -param3\n\t    -param4\n\n.. code:: python\n\n\tmy_object = MyClass(param1=1, param2=2)\n\n::\n\n\t✔ Checking main_topic requirements...     \n\t  ⮑ sub_topic1 requirements...     Passed!\n\t  ⮑ sub_topic2 requirements...     Failed!\n\n\tRequired argument(s):\n\n\t► param3  param4\n\n\n\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mozjay0619/argteller",
    "keywords": "",
    "license": "DSB 3-clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argteller-orig",
    "package_url": "https://pypi.org/project/argteller-orig/",
    "platform": "",
    "project_url": "https://pypi.org/project/argteller-orig/",
    "project_urls": {
      "Homepage": "https://github.com/mozjay0619/argteller"
    },
    "release_url": "https://pypi.org/project/argteller-orig/0.0b21/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Decorator for stylized interactive constructor using DSL and parser.",
    "version": "0.0b21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10904384,
  "releases": {
    "0.0b21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27dea4c15859410086bae6d1e27e8a7173644642096110b1892da6e0fc2a2740",
          "md5": "22c04b31ed6254b82f732874914eeed7",
          "sha256": "c42b3ba4ff804d183e9e3b39c7155e0c0841037577fa3345781c9c58eec41690"
        },
        "downloads": -1,
        "filename": "argteller_orig-0.0b21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22c04b31ed6254b82f732874914eeed7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17876,
        "upload_time": "2021-07-14T05:04:58",
        "upload_time_iso_8601": "2021-07-14T05:04:58.331580Z",
        "url": "https://files.pythonhosted.org/packages/27/de/a4c15859410086bae6d1e27e8a7173644642096110b1892da6e0fc2a2740/argteller_orig-0.0b21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6cea934e1658a8a62a841fe2ce2aa0f0bfced389ab337eef9d0c37417ddedd5",
          "md5": "cd70eb6b6e7a3107ed2eb577fcd5d1ff",
          "sha256": "74bbfb49e7f23143df8a8e0da207d87d71aeb3c3e050721b4522e9dd2b2dec40"
        },
        "downloads": -1,
        "filename": "argteller_orig-0.0b21.tar.gz",
        "has_sig": false,
        "md5_digest": "cd70eb6b6e7a3107ed2eb577fcd5d1ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11465,
        "upload_time": "2021-07-14T05:04:59",
        "upload_time_iso_8601": "2021-07-14T05:04:59.722925Z",
        "url": "https://files.pythonhosted.org/packages/b6/ce/a934e1658a8a62a841fe2ce2aa0f0bfced389ab337eef9d0c37417ddedd5/argteller_orig-0.0b21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27dea4c15859410086bae6d1e27e8a7173644642096110b1892da6e0fc2a2740",
        "md5": "22c04b31ed6254b82f732874914eeed7",
        "sha256": "c42b3ba4ff804d183e9e3b39c7155e0c0841037577fa3345781c9c58eec41690"
      },
      "downloads": -1,
      "filename": "argteller_orig-0.0b21-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "22c04b31ed6254b82f732874914eeed7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17876,
      "upload_time": "2021-07-14T05:04:58",
      "upload_time_iso_8601": "2021-07-14T05:04:58.331580Z",
      "url": "https://files.pythonhosted.org/packages/27/de/a4c15859410086bae6d1e27e8a7173644642096110b1892da6e0fc2a2740/argteller_orig-0.0b21-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6cea934e1658a8a62a841fe2ce2aa0f0bfced389ab337eef9d0c37417ddedd5",
        "md5": "cd70eb6b6e7a3107ed2eb577fcd5d1ff",
        "sha256": "74bbfb49e7f23143df8a8e0da207d87d71aeb3c3e050721b4522e9dd2b2dec40"
      },
      "downloads": -1,
      "filename": "argteller_orig-0.0b21.tar.gz",
      "has_sig": false,
      "md5_digest": "cd70eb6b6e7a3107ed2eb577fcd5d1ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11465,
      "upload_time": "2021-07-14T05:04:59",
      "upload_time_iso_8601": "2021-07-14T05:04:59.722925Z",
      "url": "https://files.pythonhosted.org/packages/b6/ce/a934e1658a8a62a841fe2ce2aa0f0bfced389ab337eef9d0c37417ddedd5/argteller_orig-0.0b21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}