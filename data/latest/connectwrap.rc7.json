{
  "info": {
    "author": "Drew Hainer",
    "author_email": "codeconfidant@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ***connectwrap***\n\n    Python package made to manage, display & parse data from SQLite file databases. \n\n    Python version 3.6 is required at a minimum.   \n\n    To install the package with pip enter command in terminal:\n        pip install connectwrap\n\n    To uninstall the package with pip enter command in terminal:\n        pip uninstall connectwrap\n\n## ***Module db***\n\n<table width=\"100%\">\n\t<tr>\n\t\t<th align=\"left\">\n            Attribute/Exception/Method\n        </th>\n\t\t<th align=\"left\">\n            Description\n        </th>\n\t</tr>\n\t<tr>\n\t\t<td>\n            <code>db_filepath</code>\n        </td>\n\t\t<td>\n            Attribute of the string type representing the database file path. <br/>\n            The file must have a .db, .sqlite, or .sqlite3 extension.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>db_table</code>\n        </td>\n\t\t<td>\n            Attribute of the string type representing a table within the database.\n            Optional, set to None by default without constructor.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>connection</code>\n        </td>\n\t\t<td>\n            Attribute of the Connection type from the sqlite3 module representing the database connection. Used to commit changes to database.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>connection_cursor</code>\n        </td>\n\t\t<td>\n            Attribute of the Cursor type from the sqlite3 module representing the database connection cursor. Used to execute queries.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>connection_status</code>\n        </td>\n\t\t<td>\n            Attribute of the bool type representing whether the Database connection is opened or closed. <br/>\n            Set to True upon the creation of a new Database object. <br/>\n            Opened = True <br/>\n            Closed = False\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>DatabaseOpenError</code>\n        </td>\n\t\t<td>\n            Custom exception to raise when the Database is open.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>DatabaseNotOpenError</code>\n        </td>\n\t\t<td>\n            Custom exception to raise when the Database is not open.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>TableNotFoundError</code>\n        </td>\n\t\t<td>\n            Custom exception to raise when an argument table doesn't exist in a database.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>TableExistsError</code>\n        </td>\n\t\t<td>\n            Custom exception to raise when an argument table already exists in a database.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>execute(query)</code>\n        </td>\n\t\t<td>\n            Execute a custom query. The query argument must be a string.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>commit()</code>\n        </td>\n\t\t<td>\n            Commit a query held in the connection cursor.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>close_db()</code>\n        </td>\n\t\t<td>\n            Close database connection.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>open_db()</code>\n        </td>\n\t\t<td>\n            Open database connection. Reset the cursor.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>set_db_filepath(db_filepath)</code>\n        </td>\n\t\t<td>\n            Change the db_filepath attribute value. <br/>\n            The file must have a .db, .sqlite, or .sqlite3 extension. <br/>\n            This allows you to switch between file databases while only creating one object. <br/>\n            Works on open or closed databases. The result of this method will be an open Database using the db_filepath argument as the new Database file path.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>set_db_table(db_table)</code>\n        </td>\n\t\t<td>\n            Change the db_table attribute value.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_connection_status()</code>\n        </td>\n\t\t<td>\n            Return the connection_status attribute representing whether the Database connection is open or closed. <br/>\n            Opened = True <br/>\n            Closed = False\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_db_filepath()</code>\n        </td>\n\t\t<td>\n            Return the db_filepath attribute value representing the database file path.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_db_table()</code>\n        </td>\n\t\t<td>\n            Return the db_table attribute value.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_tablenames()</code>\n        </td>\n\t\t<td>\n            Select and return the table names within a database as strings in a list.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_keys()</code>\n        </td>\n\t\t<td>\n            Select and return the key names within the db_table attribute table as strings in a list.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_column(key)</code>\n        </td>\n\t\t<td>\n            Select and return a list of the values in a column within the db_table attribute table based on the key from that column.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_row(key, value)</code>\n        </td>\n\t\t<td>\n            Select and return a dictionary representing a row in the db_table attribute table where the key and value arguments match a row column key and value pair. <br/>\n            Only returns the first row with the occurance of the key/value argument pair. <br/>\n            Returns None if there's no occurance of the key/value argument in any row in the table. <br/>\n            The key argument must be a string and a key within the table. <br/>\n            The value argument must be one of the following types - int, float, str, bytes, None.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_table()</code>\n        </td>\n\t\t<td>\n           Select and return a list of dictionaries with each dictionary representing a row in the db_table attribute table.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>get_top(total)</code>\n        </td>\n\t\t<td>\n           Select and return a list of dictionaries representing rows in the db_table attribute table limited to the number designated in the 'total' argument.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>rename_table(tablename)</code>\n        </td>\n\t\t<td>\n            Rename db_table attribute table.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>drop_table(table)</code>\n        </td>\n\t\t<td>\n            Drop/delete table in the file database.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>drop_row(key, value)</code>\n        </td>\n\t\t<td>\n            Drop/delete rows within the db_table attribute table with matching key & value. <br/>\n            The key argument must be a string and a key within the table. <br/>\n            The value argument must be one of the following types - int, float, str, bytes, None.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>create_table(table, **kwargs)</code>\n        </td>\n\t\t<td>\n            Create table within the file database. <br/>\n            The key in each kwargs entry denotes the key name of a column. <br/>\n            The value in each kwargs entry denotes the data type of a column. <br/> \n            The value in each kwargs entry must be one of the following strings - 'int', 'float', 'str', 'bytes', 'None'.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>create_column(column, datatype)</code>\n        </td>\n\t\t<td>\n            Create a new column within the db_table attribute table. <br/>\n            The datatype argument must be one of the following strings - 'int', 'float', 'str', 'bytes', 'None'.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>select_tablenames()</code>\n        </td>\n\t\t<td>\n            Select and output to terminal the table names within a database.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>select_table()</code>\n        </td>\n\t\t<td>\n            Select and output to terminal the rows from the db_table attribute table.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>select_top(total)</code>\n        </td>\n\t\t<td>\n            Select and output to terminal the rows from the db_table attribute table limited to the number designated in the 'total' argument.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>select_column(*args)</code>\n        </td>\n\t\t<td>\n             Select and output to terminal the values from keys within the db_table attribute table. <br/> Each arg in *args arguments must be strings containing key names within the table.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>select_keys()</code>\n        </td>\n\t\t<td>\n            Select and output to terminal the key names within the db_table attribute table.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>select_row(key, value)</code>\n        </td>\n\t\t<td>\n            Select and output to terminal a row in the db_table attribute table. <br/>  \n            Only outputs the first row with the occurance of the key/value argument pair. <br/>\n            Outputs None if there's no occurance of the key/value argument in any row in the table. <br/>\n            The key argument must be a string and a key within the table. <br/>\n            The value argument must be one of the following types - int, float, str, bytes, None.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>insert_row(*args)</code>\n        </td>\n\t\t<td>\n            Insert a row of data into the db_table attribute table. <br/>\n            Each arg in *args must be one of the following types - int, float, str, bytes, None.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>update_row(change_key, change_value, check_key, check_value)</code>\n        </td>\n\t\t<td>\n            Update/change row column values within the db_table attribute table. <br/>\n            The key arguments must be strings and keys within the table. <br/>\n            The value arguments must be one of the following types - int, float, str, bytes, None.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>key_exists(key)</code>\n        </td>\n\t\t<td>\n            Return True if the key argument exists in the db_table attribute table.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>table_exists(table)</code>\n        </td>\n\t\t<td>\n            Return True if the table argument is a table name within the database.\n        </td>\n\t</tr>\n</table>\n\n## ***Module utils***\n\n<table width=\"100%\">\n\t<tr>\n\t\t<th align=\"left\">\n            Method\n        </th>\n\t\t<th align=\"left\">\n            Description\n        </th>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>drop_database(db_filepath)</code>\n        </td>\n\t\t<td>\n            Drop/delete .db, .sqlite, or .sqlite3 file database.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>create_database(db_filepath)</code>\n        </td>\n\t\t<td>\n            Create .db, .sqlite, or .sqlite3 file database.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>ishex(arg)</code>\n        </td>\n\t\t<td>\n            Return True if all characters in arg string are hexadecimal.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>isfloat(arg)</code>\n        </td>\n\t\t<td>\n            Return True if arg string characters constitute a float.\n        </td>\n\t</tr>\n    <tr>\n\t\t<td>\n            <code>isdb(db_filepath)</code>\n        </td>\n\t\t<td>\n            Return True if db_filepath argument has one of the follow extensions: .db, .sqlite, or .sqlite3\n        </td>\n\t</tr>\n</table>\n\n[Back to Top](#connectwrap)\n\n---",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CodeConfidant/connectwrap-sqlite3",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "connectwrap",
    "package_url": "https://pypi.org/project/connectwrap/",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/connectwrap/",
    "project_urls": {
      "Homepage": "https://github.com/CodeConfidant/connectwrap-sqlite3"
    },
    "release_url": "https://pypi.org/project/connectwrap/1.1.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python package made to manage, display & parse data from SQLite file databases.",
    "version": "1.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11493961,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d254e65be3681e53df3f78d1f8f0aedb56b61b30534538510cefce207053193",
          "md5": "627a6a31bf100538908e69ba33f1b1a9",
          "sha256": "3095c639427f60603309bd63f71baba3226a484e46a70c1963c07c2582fd9ebe"
        },
        "downloads": -1,
        "filename": "connectwrap-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "627a6a31bf100538908e69ba33f1b1a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7932,
        "upload_time": "2020-07-25T05:56:20",
        "upload_time_iso_8601": "2020-07-25T05:56:20.168445Z",
        "url": "https://files.pythonhosted.org/packages/7d/25/4e65be3681e53df3f78d1f8f0aedb56b61b30534538510cefce207053193/connectwrap-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fd7dcd12adf31b8007ec7d84a137450daa61ab1d4aa45053ce2a838f672abcd",
          "md5": "e830573c40d5677d3783c01cd24a700c",
          "sha256": "82e505731f2929fd461881bcfdfc955e61ba1c8255b09f25e9edfa26e4fc88c9"
        },
        "downloads": -1,
        "filename": "connectwrap-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e830573c40d5677d3783c01cd24a700c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7874,
        "upload_time": "2020-08-01T20:20:03",
        "upload_time_iso_8601": "2020-08-01T20:20:03.506738Z",
        "url": "https://files.pythonhosted.org/packages/5f/d7/dcd12adf31b8007ec7d84a137450daa61ab1d4aa45053ce2a838f672abcd/connectwrap-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27e7f7f5503a9eeed4f3f72ac4714094f1abc407be7ade0e37a2bfe1de04ad7a",
          "md5": "0314c762e4eaabbdf1479b8de3128903",
          "sha256": "0186cac72edd5f8e21c775d02ace86d56a78ad25310c0ed2b4ee3a58f36e1ed3"
        },
        "downloads": -1,
        "filename": "connectwrap-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0314c762e4eaabbdf1479b8de3128903",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7812,
        "upload_time": "2020-08-17T23:05:20",
        "upload_time_iso_8601": "2020-08-17T23:05:20.232860Z",
        "url": "https://files.pythonhosted.org/packages/27/e7/f7f5503a9eeed4f3f72ac4714094f1abc407be7ade0e37a2bfe1de04ad7a/connectwrap-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64a666323be7541e26aedbab19b5bcfe0de6e6f5065476592ab45a2ae78c30d6",
          "md5": "d214cb47622d3ac44aaa3b2efefa93e9",
          "sha256": "a7981661a117311860d156b4cec38a57e7d948d79160e4badae6e29631eae3c1"
        },
        "downloads": -1,
        "filename": "connectwrap-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d214cb47622d3ac44aaa3b2efefa93e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7807,
        "upload_time": "2020-08-25T08:04:25",
        "upload_time_iso_8601": "2020-08-25T08:04:25.588326Z",
        "url": "https://files.pythonhosted.org/packages/64/a6/66323be7541e26aedbab19b5bcfe0de6e6f5065476592ab45a2ae78c30d6/connectwrap-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b71dd4d0a02729035a92f55e5aff3810990565454992695dfa417d42eb187ab",
          "md5": "9630c7c20d7feb3aa46ec9eeffe18a2a",
          "sha256": "981fc278e9c01571ac98d5af90770f808d8c6dcc275a0bb826033f7e3e5c4e9a"
        },
        "downloads": -1,
        "filename": "connectwrap-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9630c7c20d7feb3aa46ec9eeffe18a2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7920,
        "upload_time": "2021-03-29T00:17:09",
        "upload_time_iso_8601": "2021-03-29T00:17:09.058678Z",
        "url": "https://files.pythonhosted.org/packages/4b/71/dd4d0a02729035a92f55e5aff3810990565454992695dfa417d42eb187ab/connectwrap-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8797ed50405a72b98891d2c89893b35ff3577e6b6a8d22aa1dd6011cc132f56",
          "md5": "425dbb0c7a5bd45f0fd169646ddd6d10",
          "sha256": "561f3192695051342da9cbd0e34dbe4dad52116b9b2c028063142fd782bb0822"
        },
        "downloads": -1,
        "filename": "connectwrap-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "425dbb0c7a5bd45f0fd169646ddd6d10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8221,
        "upload_time": "2021-08-13T00:48:07",
        "upload_time_iso_8601": "2021-08-13T00:48:07.021313Z",
        "url": "https://files.pythonhosted.org/packages/d8/79/7ed50405a72b98891d2c89893b35ff3577e6b6a8d22aa1dd6011cc132f56/connectwrap-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47ef9be44c92112fbd3769c464c301a530a4d007fdc00125d97d0bcf204ea37f",
          "md5": "a50a36fcbf02998e9758ff79fb2d6299",
          "sha256": "4c1cfb933324018cd965d3877270c06bc607f4ae49d38c983146a67fa6bc7f08"
        },
        "downloads": -1,
        "filename": "connectwrap-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a50a36fcbf02998e9758ff79fb2d6299",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8896,
        "upload_time": "2021-09-19T23:34:57",
        "upload_time_iso_8601": "2021-09-19T23:34:57.736209Z",
        "url": "https://files.pythonhosted.org/packages/47/ef/9be44c92112fbd3769c464c301a530a4d007fdc00125d97d0bcf204ea37f/connectwrap-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47ef9be44c92112fbd3769c464c301a530a4d007fdc00125d97d0bcf204ea37f",
        "md5": "a50a36fcbf02998e9758ff79fb2d6299",
        "sha256": "4c1cfb933324018cd965d3877270c06bc607f4ae49d38c983146a67fa6bc7f08"
      },
      "downloads": -1,
      "filename": "connectwrap-1.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a50a36fcbf02998e9758ff79fb2d6299",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8896,
      "upload_time": "2021-09-19T23:34:57",
      "upload_time_iso_8601": "2021-09-19T23:34:57.736209Z",
      "url": "https://files.pythonhosted.org/packages/47/ef/9be44c92112fbd3769c464c301a530a4d007fdc00125d97d0bcf204ea37f/connectwrap-1.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}