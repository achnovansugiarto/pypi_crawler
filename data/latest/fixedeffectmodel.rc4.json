{
  "info": {
    "author": "ksecology",
    "author_email": "da_ecology@kuaishou.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Sociology"
    ],
    "description": "FixedEffectModel: A Python Package for Linear Model with High Dimensional Fixed Effects.\n=======================\n<img width=\"223\" alt=\"image\" src=\"https://user-images.githubusercontent.com/61887305/154887555-abd074bc-e69d-4793-b850-94a0ce437b01.png\">\n\n[![Downloads](https://pepy.tech/badge/fixedeffectmodel)](https://pepy.tech/project/fixedeffectmodel)\n[![Downloads](https://pepy.tech/badge/fixedeffectmodel/month)](https://pepy.tech/project/fixedeffectmodel)\n[![Downloads](https://pepy.tech/badge/fixedeffectmodel/week)](https://pepy.tech/project/fixedeffectmodel)\n\n\n\n**FixedEffectModel** is a Python Package designed and \nbuilt by **Kuaishou DA ecology group**. It is used to estimate the class of \nlinear models which handles panel data. Panel data refers to the type of data\nwhen time series and cross-sectional data are combined. \n\n# Main Features\n*   Linear model \n*   Linear model with high dimensional fixed effects\n*   Difference-in-difference model with parallel checking plot\n*   Instrumental variable model \n*   Robust/white standard error \n*   Multi-way cluster standard error\n*   Instrumental variable model tests, including weak iv test (cragg-dolnald statistics+stock and yogo critical values), over-identification test (sargan/Basmann test), endogeneity test (durbin test)\n\nFor instrumental variable model, we now only provide two stage least square estimator and produce second stage regression result.\nIn our next release we will include GMM method and robust standard error based on GMM. \n\n# Installation\n\nInstall this package directly from PyPI\n```bash\n$ pip install FixedEffectModel\n```\n\n# Getting started\nThis very simple case-study is designed to get you up-and-running quickly with fixedeffectmodel. \nWe will show the steps needed. \n\n### Loading modules and functions\n\nAfter installing statsmodels and its dependencies, we load a few modules and functions:\n```python\nimport numpy as np\nimport pandas as pd\n\n\nfrom fixedeffect.iv import iv2sls, ivgmm, ivtest\nfrom fixedeffect.fe import fixedeffect, did, getfe\nfrom fixedeffect.utils.panel_dgp import gen_data\n```\n*gen_data* is the function we use to simulate data. \n\n### Data\n\nWe use a simulated dataset with 100 cross-sectional units and 10 time units.\n```python\nN = 100\nT = 10\nbeta = [-3,1,2,3,4]\nate = 1\nexp_date = 5\ndf = gen_data(N, T, beta, ate, exp_date)\n```\nIhe the above simulated dataset, \"beta\" are true coefficients, \n\"ate\" is the true treatment effect, \n\"exp_date\" is the start date of experiment.\n\n### Model fit and summary\n#### Instrumental variables estimation\nWe include two function: \"iv2sls\" and \"iv2gmm\" for instrumental variable regression.\n##### iv2sls\nThis function return two-stage least square estimation results. Define *y* as\nthe dependent variable, *x_1* as exogenous variable, *x_2* as endogenous variable,\n*x_3* and *x_4* are instrumental variables. *id* and *time* are cross sectional \nid and time id.\nAn IV two-way fixed effect model estimated by two-stage least square is achieved by using:\n```python\nformula = 'y ~ x_1|id+time|0|(x_2~x_3+x_4)'\nmodel_iv2sls = iv2sls(data_df = df,\n                      formula = formula)\nresult = model_iv2sls.fit()\nresult.summary()\n```\nor\n```python\nexog_x = ['x_1']\nendog_x = ['x_2']\niv = ['x_3','x_4']\ny = ['y']\n\nmodel_iv2sls = iv2sls(data_df = df,\n                      dependent = y,\n                      exog_x = exog_x,\n                      endog_x = endog_x,\n                      category = ['id','time'],\n                      iv = iv)\n\nresult = model_iv2sls.fit()\nresult.summary()\n```\nThe two grammars above yield identical results. \nWe provide specification test for iv models:\n```python\nivtest(result1)\n```\nThree tests are included: weak iv test (Cragg-Dolnald statistics + Stock and Yogo critical values), \nover-identification test (Sargan/Basmann test), and endogeneity test (Durbin test).\n\n##### ivgmm\nThis function returns one-step gmm estimation result. With same variables definition,\n estimation is achieved by:\n```python\nformula = 'y ~ x_1|id+time|0|(x_2~x_3+x_4)'\n\nmodel_ivgmm = ivgmm(data_df = df,\n                    formula = formula)\nresult = model_ivgmm.fit()\nresult.summary()\n```\nor\n```python\nexog_x = ['x_1']\nendog_x = ['x_2']\niv = ['x_3','x_4']\ny = ['y']\n\nmodel_ivgmm = ivgmm(data_df = df,\n                      dependent = y,\n                      exog_x = exog_x,\n                      endog_x = endog_x,\n                      category = ['id','time'],\n                      iv = iv)\n\nresult = model_ivgmm.fit()\nresult.summary()\n```\n#### Fixed Effect Model\nThis function returns fixed effect model estimation result. \nDefine *y* as\nthe dependent variable, *x_1* as independent variable, *id* and *time* are cross sectional \nID and time ID.\nFollowing code yield estimation of a two-way fixed effect model with two-way cluster\nstandard error:\n```python\nformula = 'y ~ x_1|id+time|id+time|0'\n\nmodel_fe = fixedeffect(data_df = df,\n                       formula = formula,\n                       no_print=True)\nresult = model_fe.fit()\nresult.summary()\n```\nor\n```python\nexog_x = ['x_1']\ny = ['y']\ncategory = ['id','time']\ncluster = ['id','time']\n\n\nmodel_fe = fixedeffect(data_df = df,\n                      dependent = y,\n                      exog_x = exog_x,\n                      category = category,\n                      cluster = cluster)\n\nresult = model_fe.fit()\nresult.summary()\n```\n#### Difference in Difference\nDID is simply a specific type of fixed effect model. We provide a function of DID to help \nsimplify the estimation process. The regular DID estimation is achieved using \nfollowing command:\n```python\nformula = 'y ~ 0|0|0|0'\n\nmodel_did = did(data_df = df,\n                formula = formula,\n                treatment = ['treatment'],\n                csid = ['id'],\n                tsid = ['time'],\n                exp_date = 2)\nresult = model_did.fit()\nresult.summary()\n```\n\"*exp_date*\" is the first date that the experiment begins, \"*treatment*\" is the\ncolumn name of the treatment variable. This command estimate the equation below:\n\n<img src=\"https://latex.codecogs.com/svg.image?y_{it}&space;=&space;Treat_i&space;Post_t&space;\\beta_1&space;&plus;&space;&space;Treat_i\\beta_2&space;&plus;&space;Post_t&space;\\beta_3&space;&plus;&space;\\varepsilon_{it}\" title=\"y_{it} = Treat_i Post_t \\beta_1 + Treat_i\\beta_2 + Post_t \\beta_3 + \\varepsilon_{it}\" />\n\nWe also provide DID with individual effect:\n```python\nformula = 'y ~ 0|0|0|0'\n\nmodel_did = did(data_df = df,\n                formula = formula,\n                treatment = ['treatment'],\n                group_effect='individual',\n                csid = ['id'],\n                tsid = ['time'],\n                exp_date = 2)\nresult = model_did.fit()\nresult.summary()\n```\nThis command above estimate the equation below:\n<img src=\"https://latex.codecogs.com/svg.image?y_{it}&space;=&space;\\beta_0&space;&plus;&space;\\beta_2&space;Treat_i*post_t&space;&plus;&space;user_i&plus;&space;date_t&space;&plus;&space;\\varepsilon_{it}\" title=\"y_{it} = \\beta_0 + \\beta_2 Treat_i*post_t + user_i+ date_t + \\varepsilon_{it}\" />\n\n\n# Main Functions\nCurrently there are five main function you can call:\n\n|Function name| Description|Usage\n|-----------|--------------|----|\n|fixedeffect|define class for fixed effect estimation|fixedeffect (data_df = None, dependent = None, exog_x = None, category = None, cluster = None, formula = None, robust = False, noint = False, c_method = 'cgm', psdef = True)|\n|iv2sls|define class for 2sls estimation|iv2sls (data_df = None, dependent = None, exog_x = None, endog_x = None, iv = None, category = None, cluster = None, formula = None, robust = False, noint = False)|\n|ivgmm|define class for gmm estimation|ivgmm (data_df = None, dependent = None, exog_x = None, endog_x = None, iv = None, category = None, cluster = None, formula = None, robust = False, noint = False)|\n|did|define class for did estimation|did (data_df = None, dependent = None, exog_x = None, treatment = None, csid = None, tsid = None, exp_date = None, group_effect = 'treatment', cluster = None, formula = None, robust = False, noint = False, c_method = 'cgm', psdef = True)|\n|model.fit |fit pre-defined models|result = model.fit()|\n|result.summary|result.object|result.summary()\n|fit_multi_model|fit multiple models|models = [model,model_did,model_iv2sls], fit_multi_model (models)|\n|getfe|get fixed effects|getfe(result)|\n|ivtest|get iv post estimation tests results |ivtest (result)|\n\n\n### fixedeffect\nProvide results for a fixed effect model:\n\n*model = fixedeffect (data_df = None, dependent = None, exog_x = None, category = None, cluster = None, formula = None, robust = False, noint = False, c_method = 'cgm', psdef = True)*\n\n\n|Input parameters| Type| Description\n|--------|------------------|----|\n|data_df|pandas dataframe| Dataframe with relevant data.|\n|dependent|list|List object of dependent variables|\n|exog_x|list|List object of independent variables|\n|category|list, default []|List object of category variables, i.e, fixed effect|\n|cluster|list, default []|List object of cluster variables, i.e, the cluster level of your standard error|\n|formula|string, default None|Formula used to parse grammar.|\n|robust|bool, default False| Whether or not to calculate df-adjusted white standard error (HC1)|\n|noint|bool, default True|Whether or not generate intercept|\n|c_method|str, default 'cgm'| Method to calculate multi-cluster standard error. Possible choices are 'cgm' and 'cgm2'.| \n|psdef|bool, default True|if True, replace negative eigenvalue of variance matrix with 0 (only in multi-way clusters variance)|\n\nReturn an object of results:\n\n|Attribute| Type\n|--------|------------------|\n|params| Estimated coefficients| \n|df| Degree of freedom.|\n|bse| standard error|\n|variance_matrix| coefficients' variance-covariance matrix|\n\n### iv2sls/ivgmm\n*model = iv2sls (data_df = None, dependent = None, exog_x = None, endog_x = None, iv = None, category = None, cluster = None, formula = None, robust = False, noint = False)*\n\n*model = ivgmm (data_df = None, dependent = None, exog_x = None, endog_x = None, iv = None, category = None, cluster = None, formula = None, robust = False, noint = False)*\n\n|Input parameters| Type| Description\n|--------|------------------|----|\n|data_df|pandas dataframe| Dataframe with relevant data.|\n|dependent|list|List object of dependent variables|\n|exog_x|list|List object of exogenous variables|\n|endof_x|list|List object of endogenous variables|\n|iv|list|List object of instrumental variables|\n|category|list, default []|List object of category variables, i.e, fixed effect|\n|formula|string, default None|Formula used to parse grammar.|\n|robust|bool, default False| Whether or not to calculate df-adjusted white standard error (HC1)|\n|noint|bool, default True|Whether or not generate intercept|\n\nReturn the same object of results as fixedeffect does.\n\nWe also provide two-step GMM estimator if you set thet option \"gmm2=True\".\nDefine a matrix <img src=\"https://latex.codecogs.com/svg.image?P_Z&space;=&space;Z(Z'Z)^{-1}Z'\" title=\"P_Z = Z(Z'Z)^{-1}Z'\" />\n\n- \"ivgmm\", the one-step GMM estimator generate \n<img src=\"https://latex.codecogs.com/svg.image?\\begin{equation}\\beta_{2SLS}&space;=&space;(X'&space;P_Z&space;X)^{-1}(X'&space;P_Z&space;y)\\end{equation}\" title=\"\\begin{equation}\\beta_{2SLS} = (X' P_Z X)^{-1}(X' P_Z y)\\end{equation}\" /> with variance-covariance matrices equal\n  - Unadjusted. Define <img src=\"https://latex.codecogs.com/svg.image?\\sigma_u^2=u'u/df\" title=\"\\sigma_u^2=u'u/df\" />, the variance-covariance matrix is <img src=\"https://latex.codecogs.com/svg.image?Var(\\beta)=\\sigma_u^2[X'Z(Z'Z)^{-1}Z'X]^{-1}\" title=\"Var(\\beta)=\\sigma_u^2[X'Z(Z'Z)^{-1}Z'X]^{-1}\" />\n  - Heteroskedasticity robust. Define <img src=\"https://latex.codecogs.com/svg.image?\\hat{\\Omega}=&space;diag(\\hat{u}_1^2,\\dotsm,&space;\\hat{u}_N^2)\" title=\"\\hat{\\Omega}= diag(\\hat{u}_1^2,\\dotsm, \\hat{u}_N^2)\" /> and <img src=\"https://latex.codecogs.com/svg.image?W_2&space;=&space;Z'\\hat{\\Omega}&space;Z\" title=\"W_2 = Z'\\hat{\\Omega} Z\" />\n  , the variance-covariance matrix is <img src=\"https://latex.codecogs.com/svg.image?Var_r(\\beta)=[X'P_z&space;X]^{-1}[X'Z(Z'Z)^{-1}&space;W_2&space;(Z'Z)^{-1}&space;Z'X][X'&space;P_z&space;X]^{-1}\" title=\"Var_r(\\beta)=[X'P_z X]^{-1}[X'Z(Z'Z)^{-1} W_2 (Z'Z)^{-1} Z'X][X' P_z X]^{-1}\" />\n  - Cluster. Deine <img src=\"https://latex.codecogs.com/svg.image?W_2&space;=&space;\\sum_g&space;Z_g'u_g&space;u_g'&space;Z_g\" title=\"W_2 = \\sum_g Z_g'u_g u_g' Z_g\" />\n  , the variance-covariance matrix is  <img src=\"https://latex.codecogs.com/svg.image?Var_c(\\beta)=[X'P_z&space;X]^{-1}[X'Z(Z'Z)^{-1}&space;W_2&space;(Z'Z)^{-1}&space;Z'X][X'&space;P_z&space;X]^{-1}\" title=\"Var_c(\\beta)=[X'P_z X]^{-1}[X'Z(Z'Z)^{-1} W_2 (Z'Z)^{-1} Z'X][X' P_z X]^{-1}\" />\n- \"ivgmm\" with \"gmm2=True\", the two-step GMM estimator generate <img src=\"https://latex.codecogs.com/svg.image?\\begin{equation}\\beta_{GMM}&space;=&space;[X'&space;Z&space;W_2^{-1}Z'&space;X]^{-1}[X'&space;Z&space;W_2^{-1}Z'&space;Xy]\\end{equation}\" title=\"\\begin{equation}\\beta_{GMM} = [X' Z W_2^{-1}Z' X]^{-1}[X' Z W_2^{-1}Z' Xy]\\end{equation}\" />\n  - Unadjusted. <img src=\"https://latex.codecogs.com/svg.image?Var(\\beta_{GMM})&space;=&space;(X'ZW_2^{-1}Z'X)^{-1}\" title=\"Var(\\beta_{GMM}) = (X'ZW_2^{-1}Z'X)^{-1}\" />\n  - Heteroskedasticity robust. Define <img src=\"https://latex.codecogs.com/svg.image?W_3=Z'\\Omega_2&space;Z\" title=\"W_3=Z'\\Omega_2 Z\" />\n  and <img src=\"https://latex.codecogs.com/svg.image?\\Omega_2\" title=\"\\Omega_2\" /> as the \n  diagonal matrix generated using the residual from the two-step GMM.\n  , the variance-covariance matrix is <img src=\"https://latex.codecogs.com/svg.image?\\begin{equation}Var_r(\\beta_{GMM})=[X'Z(W_2)^{-1}Z'X]^{-1}&space;[X'Z(W_2)^{-1}W_3(W_2)^{-1}Z'X]&space;[X'Z(W_2)^{-1}Z'X]^{-1}\\end{equation}\" title=\"\\begin{equation}Var_r(\\beta_{GMM})=[X'Z(W_2)^{-1}Z'X]^{-1} [X'Z(W_2)^{-1}W_3(W_2)^{-1}Z'X] [X'Z(W_2)^{-1}Z'X]^{-1}\\end{equation}\" />\n  - Cluster. Define \n\n  <img src=\"https://latex.codecogs.com/svg.image?\\begin{aligned}&W_2&space;=&space;\\sum_g&space;Z_g'u_g&space;u_g'&space;Z_g\\\\&W_3&space;=&space;\\sum_g&space;Z_g'u_{2,g}&space;u_{2,g}'&space;Z_g\\\\\\end{aligned}\" title=\"\\begin{aligned}&W_2 = \\sum_g Z_g'u_g u_g' Z_g\\\\&W_3 = \\sum_g Z_g'u_{2,g} u_{2,g}' Z_g\\\\\\end{aligned}\" />\n\n  , the variance-covariance matrix is <img src=\"https://latex.codecogs.com/svg.image?\\begin{equation}Var_c(\\beta_{GMM})=[X'Z(W_2)^{-1}Z'X]^{-1}&space;[X'Z(W_2)^{-1}W_3(W_2)^{-1}Z'X]&space;[X'Z(W_2)^{-1}Z'X]^{-1}\\end{equation}\" title=\"\\begin{equation}Var_c(\\beta_{GMM})=[X'Z(W_2)^{-1}Z'X]^{-1} [X'Z(W_2)^{-1}W_3(W_2)^{-1}Z'X] [X'Z(W_2)^{-1}Z'X]^{-1}\\end{equation}\" />.\n\n\n### DID\n*model = did (data_df = None, dependent = None, exog_x = None, treatment = None, csid = None, tsid = None, exp_date = None, group_effect = 'treatment', cluster = None, formula = None, robust = False, noint = False, c_method = 'cgm', psdef = True)*\n\n|Input parameters| Type| Description\n|--------|------------------|----|\n|data_df|pandas dataframe| Dataframe with relevant data.|\n|dependent|list|List object of dependent variables|\n|exog_x|list|List object of independent variables|\n|treatment|list|List object of treatment variables|\n|csid|list|List object of cross sectional id variables|\n|tsid|list|List object of time variables|\n|exp_date|string|Experiment start date|\n|group_effect|string, default 'treatment'|Either equals 'treatment' or 'individual'|\n|cluster|list, default []|List object of cluster variables, i.e, the cluster level of your standard error|\n|formula|string, default None|Formula used to parse grammar.|\n|robust|bool, default False| Whether or not to calculate df-adjusted white standard error (HC1)|\n|noint|bool, default True|Whether or not generate intercept|\n|c_method|str, default 'cgm'| Method to calculate multi-cluster standard error. Possible choices are 'cgm' and 'cgm2'.| \n|psdef|bool, default True|if True, replace negative eigenvalue of variance matrix with 0 (only in multi-way clusters variance)|\n\nReturn the same object of results as fixedeffect does.\n\n\n### fit_multi_model\nThis function is used to get multi results of multi models on one dataframe. During analyzing data with large data\nsize and complicated, we usually have several model assumptions. By using this function, we can easily get the\nresults comparison of the different models.\n\n\n|Input parameters| Type| Description\n|--------|------------------|----|\n|data_df|pandas dataframe| Dataframe with relevant data|\n|models|list, default []| List of models|\n|table_header|str, default None| Title of summary table|\n\nReturn a summary table of results of the different models.\n\n### getfe\nThis function is used to get fixed effect.\n\n|Input parameters| Type| Description\n|--------|------------------|----|\n|result|object| output object of <em>fixedeffect<em/> function |\n|epsilon|double, default 1e-8| tolerance for projection|\n|normalize|bool, default False| Whether or not to normalize fixed effects.|\n|category_input|list, default []| List of category variables to calculate fixed effect.|\n\nReturn a summary table of estimates of fixed effects and its standard errors.\n\n### ivtest\nThis function is used to obtain iv test result.\n\n|Input parameters| Type| Description\n|--------|------------------|----|\n|result|object| output object of <em>ivgmm/iv2sls<em/> function |\n\nReturn a test result table of iv tests.\n\n# Example\n\n```python\n# need to install from kuaishou product base\nimport numpy as np\nimport pandas as pd\nfrom fixedeffect.iv import iv2sls, ivgmm,ivtest\nfrom fixedeffect.fe import fixedeffect, did,getfe\nfrom fixedeffect.utils.panel_dgp import gen_data \nfrom fixedeffect.iv import ivtest\n\nN = 100\nT = 10\nbeta = [-3,1,2,3,4]\nate = 1\nexp_date = 5\n\n#generate sample data\ndf = gen_data(N, T, beta, ate, exp_date)\n\n#------------------------------#\n#define instrumental variable model\n# iv2sls \nformula = 'y ~ x_1|id+time|0|(x_2~x_3+x_4)'\nmodel_iv2sls = iv2sls(data_df = df,\n                      formula = formula)\nresult = model_iv2sls.fit()\nresult.summary()\n\n# ivgmm \nformula = 'y ~ x_1|id|0|(x_2~x_3+x_4)'\n\nmodel_ivgmm = ivgmm(data_df = df,\n                    formula = formula)\nresult = model_ivgmm.fit()\nresult.summary()\n\n# obtain iv test results\nivtest(result)\n\n#------------------------------#\n\n#define fixed effect model\nexog_x = ['x_1']\ny = ['y']\ncategory = ['id','time']\ncluster = ['id','time']\n\n\nmodel_fe = fixedeffect(data_df = df,\n                      dependent = y,\n                      exog_x = exog_x,\n                      category = category,\n                      cluster = cluster)\n\nresult = model_fe.fit()\nresult.summary()\n\n#obtain fixed effect \ngetfe(result)\n\n#------------------------------#\n#define DID model\nformula = 'y ~ 0|0|0|0'\n\nmodel_did = did(data_df = df,\n                formula = formula,\n                treatment = ['treatment'],\n                csid = ['id'],\n                tsid = ['time'],\n                exp_date=2)\nresult = model_did.fit()\nresult.summary()\n```\n\n\n# Requirements\n- Python 3.6+\n- Pandas and its dependencies (Numpy, etc.)\n- Scipy and its dependencies\n- statsmodels and its dependencies\n- networkx\n\n# Citation\nIf you use FixedEffectModel in your research, please cite us as follows:\n\nKuaishou DA Ecology. **FixedEffectModel: A Python Package for Linear Model with High Dimensional Fixed Effects.**<https://github.com/ksecology/FixedEffectModel>,2020.Version 0.x\n\nBibTex:\n```\n@misc{FixedEffectModel,\n  author={Kuaishou DA Ecology},\n  title={{FixedEffectModel: {A Python Package for Linear Model with High Dimensional Fixed Effects}},\n  howpublished={https://github.com/ksecology/FixedEffectModel},\n  note={Version 0.x},\n  year={2020}\n}\n```\n# Feedback\nThis package welcomes feedback. If you have any additional questions or comments, please contact <da_ecology@kuaishou.com>.\n\n\n# Reference\n[1] Simen Gaure(2019).  lfe: Linear Group Fixed Effects. R package. version:v2.8-5.1 URL:https://www.rdocumentation.org/packages/lfe/versions/2.8-5.1\n\n[2] A Colin Cameron and Douglas L Miller. A practitioner’s guide to cluster-robust inference. Journal of human resources, 50(2):317–372, 2015.\n\n[3] Simen Gaure. Ols with multiple high dimensional category variables. Computational Statistics & Data Analysis, 66:8–18, 2013.\n\n[4] Douglas L Miller, A Colin Cameron, and Jonah Gelbach. Robust inference with multi-way clustering. Technical report, Working Paper, 2009.\n\n[5] Jeffrey M Wooldridge. Econometric analysis of cross section and panel data. MIT press, 2010.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ksecology/FixedEffectModel",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "FixedEffectModel",
    "package_url": "https://pypi.org/project/FixedEffectModel/",
    "platform": "",
    "project_url": "https://pypi.org/project/FixedEffectModel/",
    "project_urls": {
      "Homepage": "https://github.com/ksecology/FixedEffectModel"
    },
    "release_url": "https://pypi.org/project/FixedEffectModel/0.0.5/",
    "requires_dist": [
      "pandas (>=0.16.0)",
      "numpy (>=1.9.2)",
      "scipy (>=1.6.0)",
      "statsmodels (>=0.12.2)",
      "networkx (>=2.5)"
    ],
    "requires_python": ">=3.6",
    "summary": "Solutions to linear model with high dimensional fixed effects.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12956062,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3ea66b77e110d8ee2b60ffa23631258b817d61f7bf7c4fca953a9a5f1a9c532",
          "md5": "991d9840cad0813a8a165d871a1027ff",
          "sha256": "3c6cd4227ede072f001f25e630e98d2ad16a8b46ad28543c5a36383e4b3943e5"
        },
        "downloads": -1,
        "filename": "FixedEffectModel-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "991d9840cad0813a8a165d871a1027ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16986,
        "upload_time": "2020-09-29T08:27:51",
        "upload_time_iso_8601": "2020-09-29T08:27:51.892974Z",
        "url": "https://files.pythonhosted.org/packages/d3/ea/66b77e110d8ee2b60ffa23631258b817d61f7bf7c4fca953a9a5f1a9c532/FixedEffectModel-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e820749b7a4d7c08282f2c8cc93be40a211302d9074ba8e478f356347f990cab",
          "md5": "9c6986ed37994afce0818916c5a20f23",
          "sha256": "3384fdfa32c745ede0d6dd0908c37693d9a4412a9d750ce4c542a15873a5790b"
        },
        "downloads": -1,
        "filename": "FixedEffectModel-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c6986ed37994afce0818916c5a20f23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 40404,
        "upload_time": "2021-06-29T14:38:21",
        "upload_time_iso_8601": "2021-06-29T14:38:21.162522Z",
        "url": "https://files.pythonhosted.org/packages/e8/20/749b7a4d7c08282f2c8cc93be40a211302d9074ba8e478f356347f990cab/FixedEffectModel-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66c06a43a0fd05e03c4379a0f55b770c745884dec22035a2ef6aea4ed6b140a8",
          "md5": "2bc705e170d0f9703cff5a3a9fe4e0e0",
          "sha256": "7a87be3d3c2a56d53f84826b9d56edc24b8ad4770b028f2569f2657e1d91976d"
        },
        "downloads": -1,
        "filename": "FixedEffectModel-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bc705e170d0f9703cff5a3a9fe4e0e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 48709,
        "upload_time": "2021-12-28T14:06:51",
        "upload_time_iso_8601": "2021-12-28T14:06:51.416531Z",
        "url": "https://files.pythonhosted.org/packages/66/c0/6a43a0fd05e03c4379a0f55b770c745884dec22035a2ef6aea4ed6b140a8/FixedEffectModel-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bb0893efef8054c553e8f691743f31430ac265da098f5bcbc6701c5a4895a0b",
          "md5": "2f99dbbe3b00ea6b905e7e74db3d715b",
          "sha256": "189f7772b7c5a3c64ba32174833c536d395005bfa3a83a11dbe3f79bf7a59abb"
        },
        "downloads": -1,
        "filename": "FixedEffectModel-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2f99dbbe3b00ea6b905e7e74db3d715b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 197371,
        "upload_time": "2021-12-28T14:08:01",
        "upload_time_iso_8601": "2021-12-28T14:08:01.833362Z",
        "url": "https://files.pythonhosted.org/packages/6b/b0/893efef8054c553e8f691743f31430ac265da098f5bcbc6701c5a4895a0b/FixedEffectModel-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9685e26f04464fa25e03c4c3dce38b84a8c4ee3aa0db46a12181c613669fb247",
          "md5": "f6bb744ac19364f5aac7d9653efcdb9e",
          "sha256": "717a366f77a61e6a568663b66968cc639a634b03a219b66f791a7d0a2bdadc23"
        },
        "downloads": -1,
        "filename": "FixedEffectModel-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6bb744ac19364f5aac7d9653efcdb9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50329,
        "upload_time": "2022-02-21T04:20:54",
        "upload_time_iso_8601": "2022-02-21T04:20:54.747504Z",
        "url": "https://files.pythonhosted.org/packages/96/85/e26f04464fa25e03c4c3dce38b84a8c4ee3aa0db46a12181c613669fb247/FixedEffectModel-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab361dbbc71c43eef6194d6967c962d19b7a6dae5cb4f239b49093ec1038bbba",
          "md5": "59ccdc4a68c2387bbbf97a09dd062cef",
          "sha256": "0e8a9b90476bd92a7ec53a8e5c3afd4199343642c93a2018465457ac9d5eacec"
        },
        "downloads": -1,
        "filename": "FixedEffectModel-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "59ccdc4a68c2387bbbf97a09dd062cef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 195462,
        "upload_time": "2022-02-21T04:20:57",
        "upload_time_iso_8601": "2022-02-21T04:20:57.513030Z",
        "url": "https://files.pythonhosted.org/packages/ab/36/1dbbc71c43eef6194d6967c962d19b7a6dae5cb4f239b49093ec1038bbba/FixedEffectModel-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9685e26f04464fa25e03c4c3dce38b84a8c4ee3aa0db46a12181c613669fb247",
        "md5": "f6bb744ac19364f5aac7d9653efcdb9e",
        "sha256": "717a366f77a61e6a568663b66968cc639a634b03a219b66f791a7d0a2bdadc23"
      },
      "downloads": -1,
      "filename": "FixedEffectModel-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f6bb744ac19364f5aac7d9653efcdb9e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 50329,
      "upload_time": "2022-02-21T04:20:54",
      "upload_time_iso_8601": "2022-02-21T04:20:54.747504Z",
      "url": "https://files.pythonhosted.org/packages/96/85/e26f04464fa25e03c4c3dce38b84a8c4ee3aa0db46a12181c613669fb247/FixedEffectModel-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab361dbbc71c43eef6194d6967c962d19b7a6dae5cb4f239b49093ec1038bbba",
        "md5": "59ccdc4a68c2387bbbf97a09dd062cef",
        "sha256": "0e8a9b90476bd92a7ec53a8e5c3afd4199343642c93a2018465457ac9d5eacec"
      },
      "downloads": -1,
      "filename": "FixedEffectModel-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "59ccdc4a68c2387bbbf97a09dd062cef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 195462,
      "upload_time": "2022-02-21T04:20:57",
      "upload_time_iso_8601": "2022-02-21T04:20:57.513030Z",
      "url": "https://files.pythonhosted.org/packages/ab/36/1dbbc71c43eef6194d6967c962d19b7a6dae5cb4f239b49093ec1038bbba/FixedEffectModel-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}