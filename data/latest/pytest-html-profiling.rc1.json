{
  "info": {
    "author": "Radmila Kompova and Sveinung Gundersen",
    "author_email": "radmilko@ifi.uio.no, sveinugu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "pytest-html-profiling\n=====================\n\npytest-html-profiling is a plugin for `pytest <http://pytest.org>`_  based on the pytest-html plugin that generates a\nHTML report for the test results along with profiling results and call graphs.\n\n.. image:: https://img.shields.io/badge/license-MPL%202.0-blue.svg\n   :target: https://github.com/pytest-dev/pytest-html/blob/master/LICENSE\n   :alt: License\n.. image:: https://img.shields.io/pypi/v/pytest-html.svg\n   :target: https://pypi.python.org/pypi/pytest-html/\n   :alt: PyPI\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytest-html.svg\n   :target: https://anaconda.org/conda-forge/pytest-html\n   :alt: Conda Forge\n.. image:: https://img.shields.io/travis/pytest-dev/pytest-html.svg\n   :target: https://travis-ci.org/pytest-dev/pytest-html/\n   :alt: Travis\n.. image:: https://img.shields.io/github/issues-raw/pytest-dev/pytest-html.svg\n   :target: https://github.com/pytest-dev/pytest-html/issues\n   :alt: Issues\n.. image:: https://img.shields.io/requires/github/pytest-dev/pytest-html.svg\n   :target: https://requires.io/github/pytest-dev/pytest-html/requirements/?branch=master\n   :alt: Requirements\n\nRequirements\n------------\n\nYou will need the following prerequisites in order to use pytest-html-profiling:\n\n- Python 2.7, pytest-metadata, pygraphviz, gprof2dot\n\nInstallation\n------------\n\nTo install pytest-html-profiling:\n\n.. code-block:: bash\n\n  $ pip install pytest-html-profiling\n\nThen run your tests with:\n\n.. code-block:: bash\n\n  $ pytest --html=report.html --html-profiling --html-call-graph\n\nANSI codes\n----------\n\nNote that ANSI code support depends on the\n`ansi2html <https://pypi.python.org/pypi/ansi2html/>`_ package. Due to the use\nof a less permissive license, this package is not included as a dependency. If\nyou have this package installed, then ANSI codes will be converted to HTML in\nyour report.\n\nEnhancing reports\n-----------------\n\nAppearance\n~~~~~~~~~~\n\nCustom CSS (Cascasding Style Sheets) can be passed on the command line using\nthe :code:`--css` option. These will be applied in the order specified, and can\nbe used to change the appearance of the report.\n\n.. code-block:: bash\n\n  $ pytest --html=report.html --css=highcontrast.css --css=accessible.css\n\nEnvironment\n~~~~~~~~~~~\n\nThe *Environment* section is provided by the `pytest-metadata\n<https://pypi.python.org/pypi/pytest-metadata/>`_, plugin, and can be accessed\nvia the :code:`pytest_configure` hook:\n\n.. code-block:: python\n\n  def pytest_configure(config):\n      config._metadata['foo'] = 'bar'\n\nThe generated table will be sorted alphabetically unless the metadata is a\n:code:`collections.OrderedDict`.\n\nAdditional summary information\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can edit the *Summary* section by using the :code:`pytest_html_results_summary` hook:\n\n.. code-block:: python\n\n   import pytest\n   from py.xml import html\n\n   def pytest_html_results_summary(prefix, summary, postfix):\n       prefix.extend([html.p(\"foo: bar\")])\n\nExtra content\n~~~~~~~~~~~~~\n\nYou can add details to the HTML reports by creating an 'extra' list on the\nreport object. Here are the types of extra content that can be added:\n\n==========  ============================================\nType        Example\n==========  ============================================\nRaw HTML    ``extra.html('<div>Additional HTML</div>')``\n`JSON`_     ``extra.json({'name': 'pytest'})``\nPlain text  ``extra.text('Add some simple Text')``\nURL         ``extra.url('http://www.example.com/')``\nImage       ``extra.image(image, mime_type='image/gif', extension='gif')``\nImage       ``extra.image('/path/to/file.png')``\nImage       ``extra.image('http://some_image.png')``\n==========  ============================================\n\n**Note**: When adding an image from file, the path can be either absolute\nor relative.\n\nThere are also convenient types for several image formats:\n\n============  ====================\nImage format  Example\n============  ====================\nPNG           ``extra.png(image)``\nJPEG          ``extra.jpg(image)``\nSVG           ``extra.svg(image)``\n============  ====================\n\nThe following example adds the various types of extras using a\n:code:`pytest_runtest_makereport` hook, which can be implemented in a plugin or\nconftest.py file:\n\n.. code-block:: python\n\n  import pytest\n  @pytest.hookimpl(hookwrapper=True)\n  def pytest_runtest_makereport(item, call):\n      pytest_html = item.config.pluginmanager.getplugin('html')\n      outcome = yield\n      report = outcome.get_result()\n      extra = getattr(report, 'extra', [])\n      if report.when == 'call':\n          # always add url to report\n          extra.append(pytest_html.extras.url('http://www.example.com/'))\n          xfail = hasattr(report, 'wasxfail')\n          if (report.skipped and xfail) or (report.failed and not xfail):\n              # only add additional html on failure\n              extra.append(pytest_html.extras.html('<div>Additional HTML</div>'))\n          report.extra = extra\n\nYou can also specify the :code:`name` argument for all types other than :code:`html` which will change the title of the\ncreated hyper link:\n\n.. code-block:: python\n\n    extra.append(pytest_html.extras.text('some string', name='Different title'))\n\n\nModifying the results table\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can modify the columns by implementing custom hooks for the header and\nrows. The following example :code:`conftest.py` adds a description column with\nthe test function docstring, adds a sortable time column, and removes the links\ncolumn:\n\n.. code-block:: python\n\n  from datetime import datetime\n  from py.xml import html\n  import pytest\n\n  def pytest_html_results_table_header(cells):\n      cells.insert(2, html.th('Description'))\n      cells.insert(1, html.th('Time', class_='sortable time', col='time'))\n      cells.pop()\n\n  def pytest_html_results_table_row(report, cells):\n      cells.insert(2, html.td(report.description))\n      cells.insert(1, html.td(datetime.utcnow(), class_='col-time'))\n      cells.pop()\n\n  @pytest.hookimpl(hookwrapper=True)\n  def pytest_runtest_makereport(item, call):\n      outcome = yield\n      report = outcome.get_result()\n      report.description = str(item.function.__doc__)\n\nYou can also remove results by implementing the\n:code:`pytest_html_results_table_row` hook and removing all cells. The\nfollowing example removes all passed results from the report:\n\n.. code-block:: python\n\n  import pytest\n\n  def pytest_html_results_table_row(report, cells):\n      if report.passed:\n        del cells[:]\n\nThe log output and additional HTML can be modified by implementing the\n:code:`pytest_html_results_html` hook. The following example replaces all\nadditional HTML and log output with a notice that the log is empty:\n\n.. code-block:: python\n\n  import pytest\n\n  def pytest_html_results_table_html(report, data):\n      if report.passed:\n          del data[:]\n          data.append(html.div('No log output captured.', class_='empty log'))\n\nDisplay options\n---------------\n\nBy default, all rows in the **Results** table will be expanded except those that have :code:`Passed`.\n\nThis behavior can be customized with a query parameter: :code:`?collapsed=Passed,XFailed,Skipped`.\n\n\nScreenshots\n-----------\nCall graph\n\n.. image:: https://raw.githubusercontent.com/hyperbrowser/pytest-html-profiling/pytest-profiling/screenshots/call_graph.png\n\n\nProfiling report\n\n.. image:: https://raw.githubusercontent.com/hyperbrowser/pytest-html-profiling/pytest-profiling/screenshots/profiling.png\n\n\nResources\n---------\n\n- `Release Notes <http://github.com/pytest-dev/pytest-html/blob/master/CHANGES.rst>`_\n- `Issue Tracker <http://github.com/pytest-dev/pytest-html/issues>`_\n- `Code <http://github.com/pytest-dev/pytest-html/>`_\n\n.. _JSON: http://json.org/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hyperbrowser/pytest-html-profiling",
    "keywords": "py.test pytest html report",
    "license": "Mozilla Public License 2.0 (MPL 2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-html-profiling",
    "package_url": "https://pypi.org/project/pytest-html-profiling/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-html-profiling/",
    "project_urls": {
      "Homepage": "https://github.com/hyperbrowser/pytest-html-profiling"
    },
    "release_url": "https://pypi.org/project/pytest-html-profiling/1.0.0/",
    "requires_dist": [
      "pytest (>=3.0)",
      "pytest-metadata",
      "pygraphviz",
      "gprof2dot"
    ],
    "requires_python": "",
    "summary": "Pytest plugin for generating HTML reports with per-test profiling and optionally call graph visualizations. Based on pytest-html by Dave Hunt.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6609586,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01829daad63df298a618350604d64d1e315cad7c355591d13efb56044d978a02",
          "md5": "7cfe16c038e4aab058c05f0ec134bfee",
          "sha256": "00f90063df79e9b21b96f68719376b46db80059b92a215ecaa7d4f60b281a689"
        },
        "downloads": -1,
        "filename": "pytest_html_profiling-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cfe16c038e4aab058c05f0ec134bfee",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19135,
        "upload_time": "2020-02-11T13:47:34",
        "upload_time_iso_8601": "2020-02-11T13:47:34.345225Z",
        "url": "https://files.pythonhosted.org/packages/01/82/9daad63df298a618350604d64d1e315cad7c355591d13efb56044d978a02/pytest_html_profiling-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d6fac5c3cee60ebcfa20a62637167c5cd271f9d2d555e7726a0f013be0db8ae",
          "md5": "d1ddd3f624980ceb1e134b36e6ba2c59",
          "sha256": "8b8867b1d6a5b7e6b9d4a26f44e8e7e749adfd0e2c5014f4406706a12fe3d97e"
        },
        "downloads": -1,
        "filename": "pytest-html-profiling-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d1ddd3f624980ceb1e134b36e6ba2c59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 483480,
        "upload_time": "2020-02-11T13:47:37",
        "upload_time_iso_8601": "2020-02-11T13:47:37.902025Z",
        "url": "https://files.pythonhosted.org/packages/1d/6f/ac5c3cee60ebcfa20a62637167c5cd271f9d2d555e7726a0f013be0db8ae/pytest-html-profiling-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01829daad63df298a618350604d64d1e315cad7c355591d13efb56044d978a02",
        "md5": "7cfe16c038e4aab058c05f0ec134bfee",
        "sha256": "00f90063df79e9b21b96f68719376b46db80059b92a215ecaa7d4f60b281a689"
      },
      "downloads": -1,
      "filename": "pytest_html_profiling-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7cfe16c038e4aab058c05f0ec134bfee",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 19135,
      "upload_time": "2020-02-11T13:47:34",
      "upload_time_iso_8601": "2020-02-11T13:47:34.345225Z",
      "url": "https://files.pythonhosted.org/packages/01/82/9daad63df298a618350604d64d1e315cad7c355591d13efb56044d978a02/pytest_html_profiling-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d6fac5c3cee60ebcfa20a62637167c5cd271f9d2d555e7726a0f013be0db8ae",
        "md5": "d1ddd3f624980ceb1e134b36e6ba2c59",
        "sha256": "8b8867b1d6a5b7e6b9d4a26f44e8e7e749adfd0e2c5014f4406706a12fe3d97e"
      },
      "downloads": -1,
      "filename": "pytest-html-profiling-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d1ddd3f624980ceb1e134b36e6ba2c59",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 483480,
      "upload_time": "2020-02-11T13:47:37",
      "upload_time_iso_8601": "2020-02-11T13:47:37.902025Z",
      "url": "https://files.pythonhosted.org/packages/1d/6f/ac5c3cee60ebcfa20a62637167c5cd271f9d2d555e7726a0f013be0db8ae/pytest-html-profiling-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}