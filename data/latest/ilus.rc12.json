{
  "info": {
    "author": "Shujia Huang",
    "author_email": "huangshujia9@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "Ilus\n====\n\n[![DOI](https://zenodo.org/badge/254013599.svg)](https://zenodo.org/badge/latestdoi/254013599)\n\n\n**English** | [简体中文](./README_CN.md)\n\n**Ilus** is a lightweight, scalable, handy **semi-automated** variant calling pipeline generator for Whole-genome sequencing (WGS) and Whole exom sequencing (WES) analysis.\n\n\nIntroduction\n------------\n\n**ilus** is a pipeline generator, which used to generate WGS/WES analysis pipeline，but **ilus** can't excute the jobs, which means users needs to submit the jobs by hands, and the processing don't rely on **ilus** any more，that's why we called it as a semi-automated tools.\n\n\n**ilus** has 3 main modelues：\n\n-   First、`WGS` analysis module. This module based on [GATK Best Practice](https://gatk.broadinstitute.org/hc/en-us/sections/360007226651-Best-Practices-Workflows)，use \n`bwa-mem + GATK` , the most mainstream way to build an analysis process. It integrates 5 complete processes, including alignment, sorting, and multi-lane merging of the same sample, Markduplicates, HaplotypeCaller gvcf, Joint-calling ,and Variant quality  score recalibrator (VQSR). This module also works for WES analysis, Just set the configuration file `variant_calling_interval`  parameter to the exon capture interval of WES (detailed below).\n\nBy default, the pipeline currently performs the follwing:\n\n    - Map reads to reference by `bwa mem`;\n    - Mark duplicates by `GATK MarkDuplicates`;\n    - Base quality score recalibration by `GATK BaseRecalibrator` and `GATK ApplyBQSR`;\n    - Preprocessing quality control by `samtools stats`;\n    - Calculatiing the base coverage by `bedtools cvg`;\n    - Variant calling by `GATK HaplotypeCaller`;\n    - Variants join-calling by `GATK GenotypeGVCFs`;\n    - Variant quality recalibration by `GATK VariantRecalibrator` and `GATK ApplyVQSR`;\n    - Annotation by `ensembl VEP`.\n\n-   Second, `genotype-joint-calling` module. This module is separate from **ilus WGS** ，in order to call genotype  from **gvcf** directly. Or when you need to complete the WGS/WES data analysis in multiple batches, you can generate **gvcf** in batches, and finally organize a total **gvcf** file list, and then use this function to complete the subsequent steps. this can increase the flexibility of the running process.\n\n\n-   Third, `VQSR` module，also separate from **ilus WGS**，to help us to quality control on the mutation results.\n\n    > Note that ilus don’t include QC on raw fastq data.\n> By default, the sequencing data you input is clean data.\n\n**ilus** does not directly run tasks for the following two considerations:\n\n- First, avoid making optimizations about task scheduling outside of the core functionality of **ilus**. Different computing clusters (local and cloud), jobs are scheduled in various ways. If these situations are taken into account, **ilus** will become bloated and complicated, and it may not be possible to do it. Well, this will cause some people to be unable to use **ilus** effectively, and even easily lose the focus of **ilus** in the process of managing task delivery. As a lightweight tool, I designed **ilus** without the ability to automatically post and run tasks in mind from the start. I hope it can be used as a framework program to generate process scripts that meet your analysis needs strictly based on your input data and configuration file information.\n\n     > If you want to achieve automatic delivery and monitoring of jobs, **ilus**\n     > It is hoped that it can be implemented in the form of external plugins in the future, but currently these scripts need to be manually delivered.\n\n- Second, increase flexibility and maneuverability. The processes generated by **ilus** have a characteristic, that is, they are completely independent of **ilus** and will no longer rely on any functions of **ilus**. It doesn't matter if it is completely uninstalled and deleted. In addition, each line in the execution script (shell) generated by **ilus can run independently without affecting each other**.\n\nThe advantage of this is that you can split the script into several sub-scripts according to the characteristics of the computer cluster (if you have few samples or insufficient cluster resources, you can not split them), and then deliver the tasks separately, which can greatly reduce the number of sub-scripts. Speed up the completion of tasks, **and, this is currently the only way to deliver ilus tasks in parallel**.\n\nHow many subscripts to split into depends on your own specific situation. For example, if you have a total of 10 samples, the `xxx.step1.bwa.sh` comparison script in the first step has a total of 10 comparison commands, and each line is a `bwa` of a sample.\n\nSince these 10 commands are independent of each other, you can split this step into 10 (or less) subscripts and then manually post these tasks. As for how to split a complete execution script into multiple ones, you can either write your own program or use the [yhbatch_slurm_jobs](https://github.com/ShujiaHuang/ilus/blob/master/scripts/yhbatch_slurm_jobs.py), but note that the program I provide here is based on the slurm system, which may not meet your needs, if you think this the program does not directly meet your needs, you can modify it. Although **ilus** does not automate the delivery and execution of management tasks, this method can also increase the flexibility and control of process control.\n\nIt is very important to monitor the task completion status, especially when there are thousands of samples to be analyzed. This process, if checked manually, would be inefficient and error-prone. **ilus** has taking this into account, an identifiable completion mark will be added to each task when the process is generated. We only need to check whether each task has this mark (for details, please refer to **WGS** below for details. example).\n\nEven so, once we have a large number of tasks, it would be too troublesome to manually open the file every time to check whether the corresponding task has been successfully completed. Therefore, I implemented a program in **ilus** that can be used to check the completion status of the task job. For the specific usage, please refer to the example of **WGS** below.\n\n\n\nInstallation\n------------\n\n**ilus** is based on Python and supports both Python2.7+ and Python3.7+. The stable version of the code has been released to PyPI. So to use **ilus**, install it directly through `pip` the Python package management tool:\n\n\n```bash\n$ pip install ilus\n```\n\n\nIn addition to the main program `ilus`, this command will automatically install other Python packages that **ilus** depends on. After the installation is complete, execute `ilus` on the command line. If you can see something similar to the following, then the installation is successful.\n\n```bash\n$ ilus\nusage: ilus [-h] {WGS,genotype-joint-calling,VQSR} ...\nilus: error: too few arguments\n```\n\n\nQuick Start\n-----------\n\nBy executing `ilus --help` you can see three function modules :`WGS`, `genotype-joint-calling` and `VQSR`.\n\n```bash\n$ ilus --help\nusage: ilus [-h] {WGS,genotype-joint-calling,VQSR} ...\n\nilus: A WGS analysis pipeline.\n\noptional arguments:\n    -h, --help            show this help message and exit\n\nilus commands:\n{WGS,genotype-joint-calling,VQSR}\n    WGS                 Creating pipeline for WGS(from fastq to genotype VCF)\n    genotype-joint-calling Genotype from GVCFs.\n    VQSR                VQSR\n```\n\nBelow, we will introduce how to use these three modules by examples.\n\n### WGS\n\nThe run scripts of the WGS Analysis Pipeline are generated by `ilus WGS` and are used as follows:\n\n```bash\n$ ilus WGS --help\nusage: ilus WGS [-h] -C SYSCONF -L FASTQLIST [-P WGS_PROCESSES]\n            [-n PROJECT_NAME] [-f] [-c] -O OUTDIR\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C SYSCONF, --conf SYSCONF\n                        YAML configuration file specifying details about\n                        system.\n  -L FASTQLIST, --fastqlist FASTQLIST\n                        Alignment FASTQ Index File.\n  -O OUTDIR, --outdir OUTDIR\n                        A directory for output results.\n\n  -n PROJECT_NAME, --name PROJECT_NAME\n                        Name of the project. Default value: test\n  -P WGS_PROCESSES, --Process WGS_PROCESSES\n                        Specific one or more processes (separated by comma) of\n                        WGS pipeline. Defualt value:\n                        align,markdup,BQSR,gvcf,genotype,VQSR. Possible\n                        values: {align,markdup,BQSR,gvcf,genotype,VQSR}\n  -f, --force_overwrite\n                        Force overwrite existing shell scripts and folders.\n  -c, --cram            Covert BAM to CRAM after BQSR and save alignment file storage.\n```\n\n`-C`, `-L` and `-O` are **required parameters**, and the rest are optional parameters according to actual needs. The `-O` parameter is the output directory, if the directory does not exist, **ilus** will be created automatically. The most important are `-C` and `-L` parameters, the former is the configuration file of **ilus**, without this file **ilus** cannot generate the analysis process correctly, so it is very important; the latter is Input file, **The format of this file has fixed requirements**, a total of 5 columns, each column is the necessary information for the process.\n\nBelow, I will explain the format of these two files respectively:\n\nThe first is the configuration file. We need to write the program path used in the analysis process, the `GATK bundle` file path, the path of the reference sequence and the parameters corresponding to each key step in the file.\n\nIt should be noted that the prefix of the comparison index file of `bwa mem` should be the same as the prefix of `{resources}{reference}` of the configuration file, and placed in the same folder. as follows:\n\n\n\n```bash\n/path/human_reference/GRCh38/\n|-- human_GRCh38.fa\n|-- human_GRCh38.dict\n|-- human_GRCh38.fa.amb\n|-- human_GRCh38.fa.ann\n|-- human_GRCh38.fa.bwt\n|-- human_GRCh38.fa.fai\n|-- human_GRCh38.fa.pac\n`-- human_GRCh38.fa.sa\n```\nThe configuration file should be written in [Yaml syntax](https://zh.wikipedia.org/wiki/YAML), here I provide a [configuration file template](https://github.com/ShujiaHuang/ilus/blob/master/tests/ilus_sys.yaml):\n\n\n```yaml\n# Configuration file specifying system details for running an analysis pipeline\naligner:\n  bwa: /path/to/BioSoftware/local/bin/bwa\n  bwamem_options: [-Y -M -t 8]\n\nsamtools:\n    samtools: /path/to/BioSoftware/local/bin/samtools\n    sort_options: [\"-@ 8\"]\n    merge_options: [\"-@ 8 -f\"]\n    stats_options: [\"-@ 8\"]\n\nbcftools:\n    bcftools: /path/to/BioSoftware/local/bin/bcftools\n    concat_options: [\"-a --rm-dups all\"]\n\nbedtools:\n    bedtools: /path/to/BioSoftware/local/bin/bedtools\n    genomecov_options: [\"-bga -split\"]\n\nsambamba:\n  sambamba: /path/to/BioSoftware/local/bin/sambamba\n  sort_options: [\"-t 8\"]\n  merge_options: [\"-t 8\"]\n  markdup_options: []\n\n\nverifyBamID2:\n    # This is the VerifyBamID2: https://github.com/Griffan/VerifyBamID\n    verifyBamID2: /path/to/BioSoftware/local/bin/verifyBamID2\n    options: [\n        # download from: https://github.com/Griffan/VerifyBamID/tree/master/resource \n        \"--SVDPrefix /path/to/BioSoftware/verifyBamID2/1.0.6/resource/1000g.phase3.10k.b38.vcf.gz.dat\"\n    ]\n\n\nbgzip: /path/to/BioSoftware/local/bin/bgzip\ntabix: /path/to/BioSoftware/local/bin/tabix\n\ngatk:\n  gatk: /path/to/BioSoftware/gatk/4.1.4.1/gatk\n  markdup_java_options: [\"-Xmx10G\", \"-Djava.io.tmpdir=/your_path/cache\"]\n  bqsr_java_options: [\"-Xmx8G\", \"-Djava.io.tmpdir=/your_path/cache\"]\n  hc_gvcf_java_options: [\"-Xmx4G\"]\n  genotype_java_options: [\"-Xmx8G\"]\n  vqsr_java_options: [\"-Xmx10G\"]\n\n  CollectAlignmentSummaryMetrics_jave_options: [\"-Xmx10G\"]\n\n  # Default adapter sequence is BGISEQ-500/MGISEQ/DNBSEQ in ilus. If you use illumina (or other) sequencing system \n  # you should change the value of this parameter. The most widely used adapter of Illumina is TruSeq adapters. If \n  # your data is from the TruSeq library, you can replace the parameter with the two following sequences: \n  # \"--ADAPTER_SEQUENCE AGATCGGAAGAGCACACGTCTGAACTCCAGTCA\"\n  # \"--ADAPTER_SEQUENCE AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\"\n\n  CollectAlignmentSummaryMetrics_options: [\n    \"--ADAPTER_SEQUENCE AAGTCGGAGGCCAAGCGGTCTTAGGAAGACAA\",\n    \"--ADAPTER_SEQUENCE AAGTCGGATCGTAGCCATGTCGTTCTGTGAGCCAAGGAGTTG\"\n  ]\n\n  hc_gvcf_options: [\"\"]\n  genotypeGVCFs_options: [\"\"]\n  genomicsDBImport_options: [\"--reader-threads 12\"]\n  use_genomicsDBImport: false  # Do not use genomicsDBImport to combine GVCFs by default\n\n  vqsr_options: [\n    \"-an DP -an QD -an FS -an SOR -an ReadPosRankSum -an MQRankSum -an InbreedingCoeff\",\n    \"-tranche 100.0 -tranche 99.9 -tranche 99.5 -tranche 99.0 -tranche 95.0 -tranche 90.0\",\n    \"--max-gaussians 6\"\n  ]\n\n  # Fro creating gvcf. The value could be a interval region file in bed format or \n  # could be chromosomes list here. I suggest you to use chromosome list here.\n  interval: [\"chr1\", \"chr2\", \"chr3\", \"chr4\", \"chr5\", \"chr6\", \"chr7\", \"chr8\", \"chr9\",\n             \"chr10\", \"chr11\", \"chr12\", \"chr13\", \"chr14\", \"chr15\", \"chr16\", \"chr17\",\n             \"chr18\", \"chr19\", \"chr20\", \"chr21\", \"chr22\", \"chrX\", \"chrY\", \"chrM\"]\n  \n\n  # Specific variant calling intervals. \n  # The value could be a file in bed format (I show you a example bellow) or a interval of list.\n  # Bed format of interval file only contain three columns: ``Sequencing ID``, ``region start`` and ``region end``,e.g.:\n  #         chr1    10001   207666\n  #         chr1    257667  297968\n\n  # These invertals could be any regions alone the genome as you wish or just set the same as ``interval`` parameter above.\n  # variant_calling_interval: [\"./wgs_calling_regions.GRCh38.5M.interval.bed\"]\n  variant_calling_interval: [\"chr1\", \"chr2\", \"chr3\", \"chr4\", \"chr5\", \"chr6\", \"chr7\", \"chr8\", \"chr9\",\n                             \"chr10\", \"chr11\", \"chr12\", \"chr13\", \"chr14\", \"chr15\", \"chr16\", \"chr17\",\n                             \"chr18\", \"chr19\", \"chr20\", \"chr21\", \"chr22\", \"chrX\", \"chrY\", \"chrM\"]\n  \n\n  # GATK bundle\n  bundle:\n    hapmap: /path/to/BioDatahub/gatk/bundle/hg38/hapmap_3.3.hg38.vcf.gz\n    omni: /path/to/BioDatahub/gatk/bundle/hg38/1000G_omni2.5.hg38.vcf.gz\n    1000G: /path/to/BioDatahub/gatk/bundle/hg38/1000G_phase1.snps.high_confidence.hg38.vcf.gz\n    mills: /path/to/BioDatahub/gatk/bundle/hg38/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz\n    1000G_known_indel: /path/to/BioDatahub/gatk/bundle/hg38/Homo_sapiens_assembly38.known_indels.vcf.gz\n    dbsnp: /path/to/BioDatahub/gatk/bundle/hg38/Homo_sapiens_assembly38.dbsnp138.vcf.gz\n\n\n# Define resources to be used for individual programs on multicore machines.\n# These can be defined specifically for memory and processor availability.\nresources:\n  reference: /path/to/BioDatahub/human_reference/GRCh38/GCA_000001405.15_GRCh38_no_alt_analysis_set.fa\n\n```\n\nIn the configuration file, `bwa`, `samtools`, `bcftools`, `bedtools`, `gatk`, `bgzip` and `tabix` are all necessary bioinformatics software, which need to be installed in advance, and then fill in the path to in the corresponding parameters (as shown in the template). [verifyBamID2](https://github.com/Griffan/VerifyBamID) is only used to calculate whether there is pollution in the sample, **it is not a required parameter**, if your configuration file does not have this parameter, it means The process does not calculate the contamination of the sample. If there is, you have to install and download the `resource` data supporting it. I also tell you where to download the relevant data in the template.\n\nNote that the `variant_calling_interval` parameter in the configuration file. This is a parameter specifically used to specify the variation detection interval. For example, in the example of the above configuration file, I gave 25 chromosomes from `chr1` to `chrM`, which means to tell the process to perform mutation detection on these 25 chromosomes . If you list only one chromosome in this parameter, or only give a chromosome interval, such as `chr1:1-10000`, then **ilus** will also only perform variant detection in the interval you give.\n\nThis is a very flexible and useful parameter. The `variant_calling_interval` interval can be specified arbitrarily. In addition to the assignment method given in my example, you can also assign the interval **file path** to this parameter. **We know that many steps of WGS and WES are exactly the same, and there are only differences in the interval of variant detection ------ WES data is not necessary and cannot be** used for variant detection on the whole chromosome, only in the exon capture area. \n\nYou only need to put the file of the exon capture area,which in the `.bed` file format, the example is as follows:\n\n\n```bash\nchr1    63697   63697\nchr1    101158  101158\nchr1    103241 103241\nchr1    104108  104108\nchr1    185336 185336\nchr1    261495  261495\nchr1    598862 598862\nchr1    601606  601606\nchr1    700596 700596\nchr1    725086  725086\n```\nYou can also refer to [GATK's instructions](<https://gatk.broadinstitute.org/hc/en-us/articles/360035531852-Intervals-and-interval-lists>), here you do not need to manually split them into one by one. It is enough to assign the path of the file to this parameter, and then the process becomes the WES analysis process. This is why `ilus` is called a WGS and WES analysis pipeline generator.\n\nAlso, **ilus** required public datasets are: `gatk bundle` and genome reference sequences.\n\n> [Note] If the sample size of your project is less than 10, then GATK will not calculate the value of `InbreedingCoeff`. In this case, `vqsr_options` in the configuration file does not need to set `-an InbreedingCoeff`, you can remove it.\n\nNext is the input file specified by the `-L` parameter. The file contains all the sequencing data information necessary for the `WGS/WES` analysis process. **This file needs to be prepared by you**, the format of each column of the file as follows:\n\n\n- [1] SAMPLE，Sample name\n\n- [2] RGID，Read Group，when using `bwa mem` 's -R parameter\n\n- [3] FASTQ1，Fastq1's file directory\n\n- [4] FASTQ2，Fastq2's file directory，if it's `Single End`sequencing，the column is replaced with a space\n\n- [5] LANE，fastq‘s `lane` id\n\n    > in these file info, `RGID` is the most error-prone, and `RGID` must be set correctly (refer to the following example for the correct way of writing), otherwise the analysis process will go wrong.\n\nIn addition, if the sequencing volume of a sample is relatively large, resulting in a sample with multiple `lane` sequencing data, or the same `lane` data is split into multiple sub-files, at this time, you do not need to manually analyze these `lane` data. To merge fastq data, you only need to write the input file according to the sequencing information.\n\nThose data belonging to the same sample, even if the input `fastq` has been split into thousands of copies, the process will automatically merge after each sub-data is compared and sorted.\nBelow I give an example of an input file, in which there is a case of the data splitting output of the sample:\n\n\n\n```bash\n#SAMPLE RGID    FASTQ1  FASTQ2  LANE\nHG002   \"@RG\\tID:CL100076190_L01\\tPL:COMPLETE\\tPU:CL100076190_L01_HG002\\tLB:CL100076190_L01\\tSM:HG002\"  /path/HG002_NA24385_son/BGISEQ500/BGISEQ500_PCRfree_NA24385_CL100076190_L01_read_1.clean.fq.gz  /path/HG002_NA24385_son/BGISEQ500/BGISEQ500_PCRfree_NA24385_CL100076190_L01_read_2.clean.fq.gz  CL100076190_L01\nHG002   \"@RG\\tID:CL100076190_L02\\tPL:COMPLETE\\tPU:CL100076190_L02_HG002\\tLB:CL100076190_L02\\tSM:HG002\"  /path/HG002_NA24385_son/BGISEQ500/BGISEQ500_PCRfree_NA24385_CL100076190_L02_read_1.clean.fq.gz  /path/HG002_NA24385_son/BGISEQ500/BGISEQ500_PCRfree_NA24385_CL100076190_L02_read_2.clean.fq.gz  CL100076190_L02\nHG003   \"@RG\\tID:CL100076246_L01\\tPL:COMPLETE\\tPU:CL100076246_L01_HG003\\tLB:CL100076246_L01\\tSM:HG003\"  /path/HG003_NA24149_father/BGISEQ500/BGISEQ500_PCRfree_NA24149_CL100076246_L01_read_1.clean.fq.gz   /path/HG003_NA24149_father/BGISEQ500/BGISEQ500_PCRfree_NA24149_CL100076246_L01_read_2.clean.fq.gz   CL100076246_L01\nHG003   \"@RG\\tID:CL100076246_L02\\tPL:COMPLETE\\tPU:CL100076246_L02_HG003\\tLB:CL100076246_L02\\tSM:HG003\"  /path/HG003_NA24149_father/BGISEQ500/BGISEQ500_PCRfree_NA24149_CL100076246_L02_read_1.clean.fq.gz   /path/HG003_NA24149_father/BGISEQ500/BGISEQ500_PCRfree_NA24149_CL100076246_L02_read_2.clean.fq.gz   CL100076246_L02\nHG004   \"@RG\\tID:CL100076266_L01\\tPL:COMPLETE\\tPU:CL100076266_L01_HG004\\tLB:CL100076266_L01\\tSM:HG004\"  /path/HG004_NA24143_mother/BGISEQ500/BGISEQ500_PCRfree_NA24143_CL100076266_L01_read_1.clean.fq.gz   /path/HG004_NA24143_mother/BGISEQ500/BGISEQ500_PCRfree_NA24143_CL100076266_L01_read_2.clean.fq.gz   CL100076266_L01\nHG004   \"@RG\\tID:CL100076266_L02\\tPL:COMPLETE\\tPU:CL100076266_L02_HG004\\tLB:CL100076266_L02\\tSM:HG004\"  /path/HG004_NA24143_mother/BGISEQ500/BGISEQ500_PCRfree_NA24143_CL100076266_L02_read_1.clean.fq.gz   /path/HG004_NA24143_mother/BGISEQ500/BGISEQ500_PCRfree_NA24143_CL100076266_L02_read_2.clean.fq.gz   CL100076266_L02\nHG005   \"@RG\\tID:CL100076244_L01\\tPL:COMPLETE\\tPU:CL100076244_L01_HG005\\tLB:CL100076244_L01\\tSM:HG005\"  /path/HG005_NA24631_son/BGISEQ500/BGISEQ500_PCRfree_NA24631_CL100076244_L01_read_1.clean.fq.gz  /path/HG005_NA24631_son/BGISEQ500/BGISEQ500_PCRfree_NA24631_CL100076244_L01_read_2.clean.fq.gz  CL100076244_L01\n```\n\nThe following example illustrates the use and process structure of **ilus WGS**.\n\n**Example 1: Generating a WGS analysis pipeline from scratch**\n\n```bash\n$ ilus WGS -c -n my_wgs -C ilus_sys.yaml -L input.list -O output/\n```\nThis command means that the project (-n) `my_wgs` generates a WGS analysis process in the output directory `output` based on the configuration file (-C) `ilus_sys.yaml` and the input data (-L) `input.list` . At the same time, the process automatically converts `BAM` to (-c)`CRAM` format after completing the analysis. `CRAM` is more space efficient than `BAM`, if the `-c` parameter is not set, the original `BAM` file is kept.\n\nAfter the above command is successfully executed, there are a total of 4 folders in the output directory `output` (as follows):\n\n\n```bash\n00.shell/\n01.alignment/\n02.gvcf/\n03.genotype/\n```\nThey are used to store different types of data generated by the process, including:\n\n- `00.shell` the `shell` script collection directory;\n- `01.alignment` stores the alignment results in units of samples;\n- `02.gvcf` stores the `gvcf` results of each sample;\n- `03.genotype` holds the result of the last variant detection.\n\nThere are various execution scripts and log directories of the analysis process in the `00.shell` directory:\n\n\n```bash\n/00.shell\n├── loginfo\n│   ├── 01.alignment\n│   ├── 01.alignment.e.log.list\n│   ├── 01.alignment.o.log.list\n│   ├── 02.markdup\n│   ├── 02.markdup.e.log.list\n│   ├── 02.markdup.o.log.list\n│   ├── 03.BQSR\n│   ├── 03.BQSR.e.log.list\n│   ├── 03.BQSR.o.log.list\n│   ├── 04.gvcf\n│   ├── 04.gvcf.e.log.list\n│   ├── 04.gvcf.o.log.list\n│   ├── 05.genotype\n│   ├── 05.genotype.e.log.list\n│   ├── 05.genotype.o.log.list\n│   ├── 06.VQSR\n│   ├── 06.VQSR.e.log.list\n│   └── 06.VQSR.o.log.list\n├── my_wgs.step1.bwa.sh\n├── my_wgs.step2.markdup.sh\n├── my_wgs.step3.bqsr.sh\n├── my_wgs.step4.gvcf.sh\n├── my_wgs.step5.genotype.sh\n└── my_wgs.step6.VQSR.sh\n```\nWhen submit the task running process, execute it in sequence from `step1` to `step6`. The `loginfo/` folder records the running status of all steps of each sample. You can check the `.o.log.list` log file of each task to get the mark of whether each sample ended successfully.\n\nIf successful, you can see a marker like `[xxxx] xxxx done` at the end of the log file. You can easily know which samples (steps) have been well done, and which ones haven't. This script will help you to output all those unfinished tasks, which is convenient to check for problems and re-execute this part of unfinished tasks. `check_jobs_status`\nThe usage is as follows:\n\n\n```bash\n$ python check_jobs_status.py loginfo/01.alignment.o.log.list > bwa.unfinish.list\n```\n\nif all tasks have done, this list is empty，and print `** All Jobs done **`.\n\n### How to submit batch jobs\n\nThe process scripts generated by **ilus** have a feature, that is, they are completely independent of **ilus** and will no longer depend on any functions of **ilus**. At this time, you even use **ilus** It doesn't matter if you uninstall or delete it. **And each line in the execution script (shell) can be run independently**.\n\nThe advantage of this is that you can split the script into several sub-scripts according to the characteristics of the cluster you are using (if you have few samples or insufficient cluster resources, you can not split them), and then deliver the tasks independently, so it will be more efficient, **this is also the only way to submit ilus tasks in parallel**.\n\nAs for how many subscripts to be split into, it depends on your own needs. For example, if you have a total of 10 samples, there are a total of 10 comparison commands in the `xxx.step1.bwa.sh` mapping script in the first step. A line is a `bwa` task of a sample. Since these 10 commands are independent of each other, you can split the step into 10 (or less) subscripts, and then manually post these 10 tasks. As for how to split a complete execution script into multiple ones, you can either write your own program or use the [yhbatch_slurm_jobs program](https://github.com/ShujiaHuang/ilus/blob/master/scripts/yhbatch_slurm_jobs.py) provided by **ilus** , but please note that the program I provide here is based on the slurm system, which may not meet your needs,  and you can modify it, if you think This program does not meet your needs.\n\n**Example 2: Generate only one/some steps in the `WGS` process**\n\nSometimes, we do not intend (or do not have to) to complete the `WGS` process from start to the end. For example, we only want to perform the steps from `fastq` comparison to `gvcf` generation, and do not want to perform `genotype` and `VQSR`.The `-P` parameter of ilus can does this:\n\n\n```bash\n$ ilus WGS -c -n my_wgs -C ilus_sys.yaml -L input.list -P align,markdup,BQSR,gvcf -O ./output\n```\n\nThis only generates execution scripts from `bwa` to `gvcf`, which is useful for projects that need to do analysis in batches. Moreover, the output results of `ilus` are distinguished by sample units, so in the same output directory, as long as the sample numbers are different, the data of different batches will not overlap each other.\n\nIn addition, the `-P` parameter has another purpose, that is, if a `WGS` step is wrong and needs to be adjusted, and then re-update the corresponding step, then you can use `-P` to rerun specific steps. For example, if I need to regenerate the running script of the `BQSR` step, I can do this:\n\n\n\n```bash\n$ ilus WGS -c -n my_wgs -C ilus_sys.yaml -L input.list -P BQSR -O ./output\n```\n\nHowever, it should be noted that **ilus** will only keep the total `BAM/CRAM` file after `BQSR` for each sample in order to save the project's storage space consumption. Therefore, if you want to re-run `BQSR` you need to make sure that the `BAM` file from the previous step of `BQSR` (ie, `markdup`) has not been deleted.\n\nIf you have been using **ilus** then you don't need to worry about this problem, because **ilus** has \"atomic properties\" when executing tasks, that is to say, only when all processes in the step are successfully completed will the Delete files that are completely unnecessary. Therefore, if the `BQSR` step does not finish normally, the `BAM` file of the previous `markdup` will be preserved.\n\n\n> -P\n> The analysis module specified by the parameter must belong to one or more of「align,markdup,BQSR,gvcf,genotype,VQSR」and be separated by commas.\n\n\n### genotype-joint-calling\n\nIf we already have `gvcf` data for each sample, and now use these `gvcf` to do multi-sample joint variants calling `Joint-calling`, then you can use\n`genotype-joint-calling` to implement. The specific usage is as follows:\n\n\n```bash\n$ ilus genotype-joint-calling --help\nusage: ilus genotype-joint-calling [-h] -C SYSCONF -L GVCFLIST\n                                   [-n PROJECT_NAME] [--as_pipe_shell_order]\n                                   [-f] -O OUTDIR\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C SYSCONF, --conf SYSCONF\n                        YAML configuration file specifying details about\n                        system.\n  -L GVCFLIST, --gvcflist GVCFLIST\n                        GVCFs file list. One gvcf_file per-row and the format\n                        should looks like: [interval gvcf_file_path]. Column\n                        [1] is a symbol which could represent the genome\n                        region of the gvcf_file and column [2] should be the\n                        path.\n  -O OUTDIR, --outdir OUTDIR\n                        A directory for output results.\n  -n PROJECT_NAME, --name PROJECT_NAME\n                        Name of the project. [test]\n  --as_pipe_shell_order\n                        Keep the shell name as the order of `WGS`.\n  -f, --force           Force overwrite existing shell scripts and folders.\n```\n\n\n`-L` is the input parameter of **ilus genotype-joint-calling**, which input a `gvcf list` file, which consists of two columns, the first column is the corresponding `gvcf` file The interval or chromosome number, the second column is the path of the `gvcf` file. Currently **ilus** requires the `gvcf` of each sample to be separated by major chromosomes (1-22, X, Y, M), for example:\n\n```bash\n$ ilus genotype-joint-calling -n my_project -C ilus_sys.yaml -L gvcf.list -O genotype --as_pipe_shell_order\n```\n\nThe format of `gvcf.list`:\n\n```bash\nchr1    /path/sample1.chr1.g.vcf.gz\nchr1    /paht/sample2.chr1.g.vcf.gz\nchr2    /path/sample1.chr2.g.vcf.gz\nchr2    /path/sample2.chr2.g.vcf.gz\n...\nchrM    /path/sample1.chrM.g.vcf.gz\nchrM    /path/sample2.chrM.g.vcf.gz\n```\nIn this example `gvcf.list` has only two samples. The parameter `--as_pipe_shell_order` is optional(the default is not added), its only function is to output the name of the executed script according to the **ilus WGS** process, maintaining the same order and the same as the `WGS` process The output directory structure of .\n\n### VQSR\n\nThis function is only used to generate execution scripts based on `GATK VQSR`. If we already have the final mutation detection (VCF format) results, and now we just want to use `GATK VQSR` to do quality control of this mutation data, then you can use this module, the usage is similar to `genotype-joint-calling`, as follows:\n\n\n\n```bash\n$ ilus VQSR --help\nusage: ilus VQSR [-h] -C SYSCONF -L VCFLIST [-n PROJECT_NAME]\n                 [--as_pipe_shell_order] [-f] -O OUTDIR\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C SYSCONF, --conf SYSCONF\n                        YAML configuration file specifying details about\n                        system.\n  -L VCFLIST, --vcflist VCFLIST\n                        VCFs file list. One vcf_file per-row and the format\n                        should looks like: [interval vcf_file_path]. Column\n                        [1] is a symbol which could represent the genome\n                        region of the vcf_file and column [2] should be the\n                        path.\n  -O OUTDIR, --outdir OUTDIR\n                        A directory for output results.\n  -n PROJECT_NAME, --name PROJECT_NAME\n                        Name of the project. [test]\n  --as_pipe_shell_order\n                        Keep the shell name as the order of `WGS`.\n  -f, --force           Force overwrite existing shell scripts and folders.\n```\n\nDifferent from `genotype-joint-calling`，**ilus VQSR** input `VCF` list，and **each line is a VCF path**，for example：\n\n```bash\n/path/chr1.vcf.gz\n/path/chr2.vcf.gz\n...\n/path/chrM.vcf.gz\n```\n\nOther parameters is the same as `genotype-joint-calling`. Also, the vcf in the file list does not need to be manually merged in advance, `ilus VQSR` will do that. A complete example is provided below:\n\n```bash\n$ ilus VQSR -C ilus_sys.yaml -L vcf.list -O genotype --as_pipe_shell_order\n```\n\n-- The End --\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ShujiaHuang/ilus",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ShujiaHuang/ilus",
    "keywords": "",
    "license": "BSD (3-clause)",
    "maintainer": "Shujia Huang",
    "maintainer_email": "huangshujia9@gmail.com",
    "name": "ilus",
    "package_url": "https://pypi.org/project/ilus/",
    "platform": null,
    "project_url": "https://pypi.org/project/ilus/",
    "project_urls": {
      "Download": "https://github.com/ShujiaHuang/ilus",
      "Homepage": "https://github.com/ShujiaHuang/ilus"
    },
    "release_url": "https://pypi.org/project/ilus/1.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "ilus: A handy tools for generating WGS/WES analysis pipeline.",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17069266,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e55649bd50aabb4f4b880b612986acaa44a19b692302b7a5a922def75599f5c",
          "md5": "9420a74bcfd1efa581471ac23550fee3",
          "sha256": "767a37912251f975aa58152f257c6e58fcc3e7a3bda060c85cda4f26b10a827f"
        },
        "downloads": -1,
        "filename": "ilus-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9420a74bcfd1efa581471ac23550fee3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22298,
        "upload_time": "2020-08-28T08:32:03",
        "upload_time_iso_8601": "2020-08-28T08:32:03.838917Z",
        "url": "https://files.pythonhosted.org/packages/8e/55/649bd50aabb4f4b880b612986acaa44a19b692302b7a5a922def75599f5c/ilus-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64d1c750f25d5de6a9fc5a603feed5c7059c5c7f1aa6809fa9c58e1381be2ca2",
          "md5": "3494c0a1e4a836786f13f9b0ed9f7c2f",
          "sha256": "bdb974377abaecf6074d1992de8f925bc67d95f4fdd0bf7aa47b23187f661ced"
        },
        "downloads": -1,
        "filename": "ilus-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3494c0a1e4a836786f13f9b0ed9f7c2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12418,
        "upload_time": "2020-08-28T09:07:42",
        "upload_time_iso_8601": "2020-08-28T09:07:42.974986Z",
        "url": "https://files.pythonhosted.org/packages/64/d1/c750f25d5de6a9fc5a603feed5c7059c5c7f1aa6809fa9c58e1381be2ca2/ilus-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8bf3716a026b6ebcb7028105356ac7922739ab7872a63eb43f7dfd886c5c5db",
          "md5": "20d3745158469a9e93f73975983ab257",
          "sha256": "3fb04424d0f6cd75ad0dc7ffbbd8fead26054fc6c8bd04b8e90fc9799f23ce21"
        },
        "downloads": -1,
        "filename": "ilus-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "20d3745158469a9e93f73975983ab257",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12629,
        "upload_time": "2020-09-24T01:14:07",
        "upload_time_iso_8601": "2020-09-24T01:14:07.107985Z",
        "url": "https://files.pythonhosted.org/packages/c8/bf/3716a026b6ebcb7028105356ac7922739ab7872a63eb43f7dfd886c5c5db/ilus-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "334a0974529431296c5238c63eb91442bbe1176b16f82ce971cf237dac4c8627",
          "md5": "369c77d4793a9adc78edf31f1932b97a",
          "sha256": "e80d3144c58fe3b341114dafe035c4d4826258a7d0c8a109cbd5dd780201f228"
        },
        "downloads": -1,
        "filename": "ilus-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "369c77d4793a9adc78edf31f1932b97a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14291,
        "upload_time": "2021-07-11T01:25:39",
        "upload_time_iso_8601": "2021-07-11T01:25:39.940268Z",
        "url": "https://files.pythonhosted.org/packages/33/4a/0974529431296c5238c63eb91442bbe1176b16f82ce971cf237dac4c8627/ilus-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e1b630c5a16f2e4a5e5a4c28e15a20f787daf1e0b0472d1a3439f4d18fb4871",
          "md5": "27a95d06d82e449e76c3f677b09244e3",
          "sha256": "abe78bfca9a55ef26dc5b261ce5d24855d0c56b6f5d06d3603ca758a4a745e22"
        },
        "downloads": -1,
        "filename": "ilus-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "27a95d06d82e449e76c3f677b09244e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41633,
        "upload_time": "2021-07-25T07:14:28",
        "upload_time_iso_8601": "2021-07-25T07:14:28.309182Z",
        "url": "https://files.pythonhosted.org/packages/5e/1b/630c5a16f2e4a5e5a4c28e15a20f787daf1e0b0472d1a3439f4d18fb4871/ilus-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d90c6c93779518796a59e0022ea5177b93bf0552e83160e9d1e8fafe34dfdec",
          "md5": "53b7fb12227431393bbbf8b4a15e22d9",
          "sha256": "b58490f0a9f5b7f0b95c158b01da234e7c53a3a14dab6ffce1df44d9a68497cb"
        },
        "downloads": -1,
        "filename": "ilus-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "53b7fb12227431393bbbf8b4a15e22d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35824,
        "upload_time": "2021-08-06T06:49:09",
        "upload_time_iso_8601": "2021-08-06T06:49:09.571251Z",
        "url": "https://files.pythonhosted.org/packages/7d/90/c6c93779518796a59e0022ea5177b93bf0552e83160e9d1e8fafe34dfdec/ilus-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f29143458918520aa40a030b566ce3596210a4d855a84e3d15ddaa01830a0e8d",
          "md5": "746e32c8b9d0f64557862f326c938e2b",
          "sha256": "6718f6974318107260fe6346af26ada4470cd5c0b567000086bfb2484c9d443c"
        },
        "downloads": -1,
        "filename": "ilus-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "746e32c8b9d0f64557862f326c938e2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35501,
        "upload_time": "2021-08-26T03:52:57",
        "upload_time_iso_8601": "2021-08-26T03:52:57.463143Z",
        "url": "https://files.pythonhosted.org/packages/f2/91/43458918520aa40a030b566ce3596210a4d855a84e3d15ddaa01830a0e8d/ilus-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef9020e1da660596a5f39ff1da1bd0ba4a484bb229ace3bfc77b0169d1636acd",
          "md5": "9495ac6ec4882da33e287b8146cefccb",
          "sha256": "aca09f6f8d403a4fabeb5cf1b4b1533da853121cef460e209314e65edd26941b"
        },
        "downloads": -1,
        "filename": "ilus-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9495ac6ec4882da33e287b8146cefccb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44301,
        "upload_time": "2021-12-23T12:26:06",
        "upload_time_iso_8601": "2021-12-23T12:26:06.632880Z",
        "url": "https://files.pythonhosted.org/packages/ef/90/20e1da660596a5f39ff1da1bd0ba4a484bb229ace3bfc77b0169d1636acd/ilus-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d45799c5f23cf1dedc8a7fa996f1d091a4d5e0f8b62eba461da5e60c50ad2eb",
          "md5": "d71ab06a86c3e62868e292972536a7d0",
          "sha256": "5c5e138e2db295603eb24951ba34b15514cca314987734024acbbb20af2a6cbb"
        },
        "downloads": -1,
        "filename": "ilus-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d71ab06a86c3e62868e292972536a7d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53744,
        "upload_time": "2022-07-19T07:44:56",
        "upload_time_iso_8601": "2022-07-19T07:44:56.155522Z",
        "url": "https://files.pythonhosted.org/packages/0d/45/799c5f23cf1dedc8a7fa996f1d091a4d5e0f8b62eba461da5e60c50ad2eb/ilus-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33d91e1d7c5aa517e4648fbdfc9be2752fbf2424608e134845637241833f4f58",
          "md5": "14bbc485473bf422976b23604f3d292f",
          "sha256": "69a9f761e78f225a10383cdd4e2b0d3e75ef348b7d77621492f026bfa3ad3f15"
        },
        "downloads": -1,
        "filename": "ilus-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "14bbc485473bf422976b23604f3d292f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55421,
        "upload_time": "2022-07-27T02:29:46",
        "upload_time_iso_8601": "2022-07-27T02:29:46.677218Z",
        "url": "https://files.pythonhosted.org/packages/33/d9/1e1d7c5aa517e4648fbdfc9be2752fbf2424608e134845637241833f4f58/ilus-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0209b4d9c429ed8e64f724b62efb78121803f65a3f90e02d15b45873166b1ccb",
          "md5": "a8f1279a91b16ba1d40405d51435dc58",
          "sha256": "b3699090c174021e723deb4c7954a5d9b291272e30e0880086287c7165d35155"
        },
        "downloads": -1,
        "filename": "ilus-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8f1279a91b16ba1d40405d51435dc58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60340,
        "upload_time": "2023-02-21T09:29:45",
        "upload_time_iso_8601": "2023-02-21T09:29:45.646146Z",
        "url": "https://files.pythonhosted.org/packages/02/09/b4d9c429ed8e64f724b62efb78121803f65a3f90e02d15b45873166b1ccb/ilus-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3755b19f8e151ea4fa9c133ba6d2c24943b15151b024b5bc7061e697b735e684",
          "md5": "03900fa0e2be5690eb6f4323fa04556b",
          "sha256": "905a7981a85e6d556cdf115abe04e8b9233831f8e3bc5b12b2221c75add13f3b"
        },
        "downloads": -1,
        "filename": "ilus-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "03900fa0e2be5690eb6f4323fa04556b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60210,
        "upload_time": "2023-02-27T16:13:55",
        "upload_time_iso_8601": "2023-02-27T16:13:55.559711Z",
        "url": "https://files.pythonhosted.org/packages/37/55/b19f8e151ea4fa9c133ba6d2c24943b15151b024b5bc7061e697b735e684/ilus-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3755b19f8e151ea4fa9c133ba6d2c24943b15151b024b5bc7061e697b735e684",
        "md5": "03900fa0e2be5690eb6f4323fa04556b",
        "sha256": "905a7981a85e6d556cdf115abe04e8b9233831f8e3bc5b12b2221c75add13f3b"
      },
      "downloads": -1,
      "filename": "ilus-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "03900fa0e2be5690eb6f4323fa04556b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60210,
      "upload_time": "2023-02-27T16:13:55",
      "upload_time_iso_8601": "2023-02-27T16:13:55.559711Z",
      "url": "https://files.pythonhosted.org/packages/37/55/b19f8e151ea4fa9c133ba6d2c24943b15151b024b5bc7061e697b735e684/ilus-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}