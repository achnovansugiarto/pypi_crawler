{
  "info": {
    "author": "Ilya Vouk",
    "author_email": "ilya.vouk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Authoriz\n\n\nThe python module to allow rules-based authorization. Rules for allowing and disallowing actions can\ncome from different sources.\n\n## Features\n\n- Easy rules parsers customization. Rules could be parsed from any source.\n- Specify required actions to your DRF ViewSet actions.\n- Action namespace definition with action params listing.\n- Fast authorization after setup is done.\n- Easy parameters getters definition.\n- Flexible configuration.\n\n## Installation\n\nTo install project with pip use:\n```\npip install authoriz\n```\n\nTo install it to your Django project add it to your installed apps:\n\n```python\nINSTALLED_APPS = [\n    ...\n    'authoriz',\n    ...\n]\n```\n\n## Usage\n\nThe main workflow of the usage are the following:\n1. **Specify action namespace enum classes.** You should predefine namespaces with actions to parse and use it.\n2. **Specify parsers for the rules.** There are default parsers, \n   but it's possible (and recommended in many cases) to define\n   your own with required source.\n3. **Specify permissions to retrieve parameters.** Views could have specific parameters for the action.\n   So you should specify getters of those in permission class.\n4. **Install authorization to your view.** After all the above steps are complete,\n   you can finally install authorization to specific view. It includes defining of \n   actions required by the view, adding mixin to the view and adding permission classes\n   to fetch required parameters.\n\n### 1. Specify action namespace enum classes\n\nThe enum class the following structure as the example below:\n\n```python\nfrom django.db import models\nfrom authoriz.namespaces.base import ActionsNamespace\n\n\nclass EntityPermissions(ActionsNamespace):\n    name = 'entity'\n\n    class Actions(models.TextChoices):\n        ENTITY_CREATE = 'entity:EntityCreate', 'Create entity'\n        ENTITY_LIST = 'entity:EntityList', 'List entities'\n        ENTITY_RETRIEVE = 'entity:EntityRetrieve', 'Retrieve entity'\n        ENTITY_UPDATE = 'entity:EntityUpdate', 'Update entity'\n        ENTITY_DESTROY = 'entity:EntityDestroy', 'Delete entity'\n\n    params = {\n        Actions.ENTITY_CREATE.value: [],\n        Actions.ENTITY_LIST.value: [],\n        Actions.ENTITY_RETRIEVE.value: ['entity_id'],\n        Actions.ENTITY_UPDATE.value: ['entity_id'],\n        Actions.ENTITY_DESTROY.value: ['entity_id'],\n    }\n```\n\n**Parameters:**\n* `name` - name of the namespace.\n* `Actions` - enum class with actions contained by the given namespace.\n* `params` - specification of the params allowed by specific actions. \n                If the action is not presented in dict, the empty list\n                is used as a default.\n\n\n### 2. Specify parsers for the rules\n\nThe parser class has the following structure as the example below:\n\n```python\nfrom path.to import get_rules_from_some_source\nfrom authoriz.parsing.base import PermissionsRule, PermissionsParser\n\nclass RulesFromSomeSourceParser(PermissionsParser):\n    def get_rules(self) -> List[PermissionsRule]:\n        rules = get_rules_from_some_source()\n        return rules\n```\n\nSo the main method is `get_rules()`. It is used to specify the routine to get / parse rules list from \nany source (database, file, API call, etc.).\n\nAfter you defined your required parser classes you should specify them in `settings.py` of your Django project.\n\n```python\nAUTHORIZ_RULES_PARSERS = [\n    {\n        'parser': 'path.to.RulesFromSomeSourceParser',\n        'args': [],\n        'kwargs': {},\n    }\n]\n```\n\nThe parsers should be listed in the correct order. The rules parsed with last parsers could \noverride the rules of the first ones.\n\n#### Rule structure\n\n```python\n@dataclass\nclass PermissionsRule:\n    name: str\n    effect: str\n    actions: List[ParsedAction]\n    target: str\n    id: int  # generated\n```\n\n**Parameters:**\n* `name` - name of the rule.\n  * _'Some rule #1'_\n* `effect` - what exactly does the rule mean.\n  * _'allow'_\n  * _'deny'_\n* `actions` - list of actions on which the rule has effect.\n* `target` - who is the rule apply on.\n  * _'132342'_ - user ID\n  * _'role:admin'_ - user role\n* `id` - ID of the rule. Used to sort rules before composing final allow/deny tree. *Generated automatically*.\n  * _1_\n  * _2_\n  * _3_\n\n#### Action structure\n\n```python\n@dataclass\nclass ParsedAction:\n    namespace: str\n    action_name: str\n    params: dict  # {} by default\n```\n\n**Parameters:**\n* `namespace` - namespace of the action.\n  * _'project'_\n  * _'entity'_\n  * _'user'_\n* `action_name` - exact name of the action in the given namespace.\n  * _'CreateProject'_\n  * _'UpdateUser'_\n  * _'DeleteEntity'_\n* `params` - some additional data for the given action. Allowed params are specified by namespace enum class.\n  * _{project_id: 12, entity_id: 32}_\n\n\n## 3. Specify permissions to retrieve parameters\n\nThe permission class has the following structure:\n\n```python\nfrom authoriz.permissions.base import BaseServicePermission\n\nclass EntityKwargsHasPermission(BaseServicePermission):\n    def get_entity_id(self, request, view):\n        return request.parser_context['kwargs']['entity_id']\n```\n\nGetters are all the methods that starts with `get_` prefix. \nEverything that goes after `get_` is considered as parameter name.\nSo if we make a request to the route `/entities/<entity_id>` such as:\n```\nGET http://<host>:<port>/entities/1232\n```\n\nit will pass param `entity_id` with value `1232` to the permission check and find\nout whether your rules set allows the action with the following params or not.\n\n\n## 4. Install authorization to your view\n\nAfter all the previous steps are done we can apply in of the view:\n\n```python\nfrom rest_framework import permissions, viewsets, mixins\nfrom authoriz.mixins import APIViewPermissionsMixin\nfrom path.to import EntityKwargsHasPermission\nfrom path.to import EntityPermissions\n\nclass EntityViewSet(APIViewPermissionsMixin,\n                     mixins.ListModelMixin,\n                     mixins.RetrieveModelMixin,\n                     mixins.CreateModelMixin,\n                     mixins.UpdateModelMixin,\n                     mixins.DestroyModelMixin,\n                     viewsets.GenericViewSet):\n    permission_classes = [\n        permissions.IsAuthenticated,\n        EntityKwargsHasPermission,\n    ]\n    actions_permissions = {\n        'create': [\n            EntityPermissions.Actions.ENTITY_CREATE\n        ],\n        'list': [\n            EntityPermissions.Actions.ENTITY_LIST\n        ],\n        'retrieve': [\n            EntityPermissions.Actions.ENTITY_RETRIEVE,\n        ],\n        'update': [\n            EntityPermissions.Actions.ENTITY_UPDATE,\n        ],\n        'destroy': [\n            EntityPermissions.Actions.ENTITY_DESTROY,\n        ],\n    }\n```\n\nTo apply follow the following steps:\n1. Add `APIViewPermissionsMixin` as your first base class.\n2. Add `EntityKwargsHasPermission` to `permission_classes`.\n3. Specify required actions to DRF ViewSet actions in `actions_permissions`.\n\n## License\n\nThe project is licensed under the BSD license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/VoIlAlex/authoriz",
    "keywords": "",
    "license": "BSD-2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "authoriz",
    "package_url": "https://pypi.org/project/authoriz/",
    "platform": null,
    "project_url": "https://pypi.org/project/authoriz/",
    "project_urls": {
      "Homepage": "https://github.com/VoIlAlex/authoriz"
    },
    "release_url": "https://pypi.org/project/authoriz/0.0.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django rules-based authorization framework.",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13987228,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62b77e9d397c3443917e1044e0e0aa133913a3e3f14ca590cbdfd10044ce2a3c",
          "md5": "1ee0ff3f2430ef34d20a119905ac7fb1",
          "sha256": "e16be69bb26df528cbc6cf3ae7f7e86d5cb4acf1addb8605d46fa03f81f9aeda"
        },
        "downloads": -1,
        "filename": "authoriz-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ee0ff3f2430ef34d20a119905ac7fb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16715,
        "upload_time": "2022-05-25T07:46:34",
        "upload_time_iso_8601": "2022-05-25T07:46:34.452156Z",
        "url": "https://files.pythonhosted.org/packages/62/b7/7e9d397c3443917e1044e0e0aa133913a3e3f14ca590cbdfd10044ce2a3c/authoriz-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9861aa0a0836a5a9823e7401482a7be6c9600418b70f1602c14d31941071e94",
          "md5": "299b36b47485e58ca25ed1f331445e55",
          "sha256": "3a20a9096bab6483d747c05c6ff84f8d78e1afbe23806662ef07d1391a70feec"
        },
        "downloads": -1,
        "filename": "authoriz-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "299b36b47485e58ca25ed1f331445e55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21686,
        "upload_time": "2022-05-25T09:44:05",
        "upload_time_iso_8601": "2022-05-25T09:44:05.405725Z",
        "url": "https://files.pythonhosted.org/packages/f9/86/1aa0a0836a5a9823e7401482a7be6c9600418b70f1602c14d31941071e94/authoriz-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c89e882c552164f3c588280c96a1f843556a1fc11cc9e44cd3fc071415cae26",
          "md5": "396b1dfb6ba6e44e6bcf856234ea0142",
          "sha256": "485738df156b51fb67c3fc5673f3f937f8478ad0eca30223cf69400e90590a12"
        },
        "downloads": -1,
        "filename": "authoriz-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "396b1dfb6ba6e44e6bcf856234ea0142",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21691,
        "upload_time": "2022-05-26T09:45:36",
        "upload_time_iso_8601": "2022-05-26T09:45:36.027555Z",
        "url": "https://files.pythonhosted.org/packages/3c/89/e882c552164f3c588280c96a1f843556a1fc11cc9e44cd3fc071415cae26/authoriz-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d66c9b34fcae56f3ca1bf8e5885ab0f734b9ff5f3361e488fae35089c3ab1880",
          "md5": "5a8bcb39dd7cc836d2e006ef883c846d",
          "sha256": "06c82dbbfe06c63654da461c1987d563ed29ef5e1e4bf0da75cebb6ac3811866"
        },
        "downloads": -1,
        "filename": "authoriz-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5a8bcb39dd7cc836d2e006ef883c846d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21673,
        "upload_time": "2022-05-26T10:26:49",
        "upload_time_iso_8601": "2022-05-26T10:26:49.672726Z",
        "url": "https://files.pythonhosted.org/packages/d6/6c/9b34fcae56f3ca1bf8e5885ab0f734b9ff5f3361e488fae35089c3ab1880/authoriz-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b3cf1145aaa6a0b61b55f4c2c23e5bf16a34326a6495ccf00e881b32df5727d",
          "md5": "0300c0763510fa935ac810d1796d022a",
          "sha256": "5a49faff30006b645425d5ecda4089d139f6c247031b9a880d73074a6e1fec68"
        },
        "downloads": -1,
        "filename": "authoriz-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0300c0763510fa935ac810d1796d022a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21682,
        "upload_time": "2022-05-26T11:07:02",
        "upload_time_iso_8601": "2022-05-26T11:07:02.754464Z",
        "url": "https://files.pythonhosted.org/packages/1b/3c/f1145aaa6a0b61b55f4c2c23e5bf16a34326a6495ccf00e881b32df5727d/authoriz-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d7b6b90f7426d4d8e97205f9a3d2b58b6b375bf15d7766475fcb5230ac4d8eb",
          "md5": "7f33ea9746fdda61b118e609c91eeb94",
          "sha256": "fb24d2f5722af739e4ba7d0f497855a5e9e0f83e1f96c6f0c4ec8e06fad7bfa4"
        },
        "downloads": -1,
        "filename": "authoriz-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "7f33ea9746fdda61b118e609c91eeb94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21680,
        "upload_time": "2022-05-31T11:26:47",
        "upload_time_iso_8601": "2022-05-31T11:26:47.155954Z",
        "url": "https://files.pythonhosted.org/packages/6d/7b/6b90f7426d4d8e97205f9a3d2b58b6b375bf15d7766475fcb5230ac4d8eb/authoriz-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d7b6b90f7426d4d8e97205f9a3d2b58b6b375bf15d7766475fcb5230ac4d8eb",
        "md5": "7f33ea9746fdda61b118e609c91eeb94",
        "sha256": "fb24d2f5722af739e4ba7d0f497855a5e9e0f83e1f96c6f0c4ec8e06fad7bfa4"
      },
      "downloads": -1,
      "filename": "authoriz-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "7f33ea9746fdda61b118e609c91eeb94",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21680,
      "upload_time": "2022-05-31T11:26:47",
      "upload_time_iso_8601": "2022-05-31T11:26:47.155954Z",
      "url": "https://files.pythonhosted.org/packages/6d/7b/6b90f7426d4d8e97205f9a3d2b58b6b375bf15d7766475fcb5230ac4d8eb/authoriz-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}