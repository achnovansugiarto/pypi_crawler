{
  "info": {
    "author": null,
    "author_email": "Shako Rzayev <rzayev.sehriyar@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# What is Read-Once object?\n\nThis concept is defined and explained in [Secure by Design](https://www.manning.com/books/secure-by-design) book.\n\nIt is also exposed in this link [LiveBook](https://livebook.manning.com/concept/security/read-once-object).\n\nThe overall characteristics of Read-Once objects, grabbed from [Book Review: Secure by Design](https://adriancitu.com/tag/read-once-object-pattern/)\n\n```\nRead-once objects\n\nA read-once object is an object designed to be read once (or a limited number of times). This object usually represents a value or concept in your domain that’s considered to be sensitive (for example, passport numbers, credit card numbers, or passwords). The main purpose of the read-once object is to facilitate detection of unintentional use of the data it encapsulates.\n\nHere’s a list of the key aspects of a read-once object:\n\n    Its main purpose is to facilitate detection of unintentional use.\n    It represents a sensitive value or concept.\n    It’s often a domain primitive.\n    Its value can be read once, and once only.\n    It prevents serialization of sensitive data.\n    It prevents sub-classing and extension.\n```\n\n# About the Usage\n\nImagine that you need to pass a password it to some kind of service, which is going to Login your user.\nThe Login service will only require this password only once, so why not to restrict it to be read, used only Once?\n\n### Install using pip:\n\n`pip install readonce`\n\nThen just inherit from the `ReadOnce`:\n\n```py\nfrom readonce import ReadOnce\n\n\nclass Password(ReadOnce):\n    def __init__(self, password: str) -> None:\n        super().__init__()\n        self.add_secret(password)\n\n```\n\nHere the password string is added as a secret. \nFrom our definition it can be read only once and only using `get_secret()`, no direct access to the secret.\n\n* You can not expose the object properties as well:\n\n```py\n>>> obj = Password(password=\"awesome_password\")\n>>> dir(obj)\n[]\n>>> obj.__dict__\n{}\n```\n\n* Trying to read the password twice:\n\n```py\n>>> obj.get_secret()\n'awesome_password'\n>>> obj.get_secret()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/shako/REPOS/py-read-once/.venv/lib/python3.10/site-packages/readonce.py\", line 47, in get_secret\n    raise UnsupportedOperationException(\"Sensitive data was already consumed\")\nreadonce.UnsupportedOperationException: ('Not allowed on sensitive value', 'Sensitive data was already consumed')\n```\n\n* If someone tries to add its own secret to already instantiated object and then get back already defined secret data(original secret),\nit will get only new secret.\n\n```py\n>>> obj = Password(password=\"awesome_password\")\n>>> obj.add_secret(\"new_fake_date\")\n>>> obj.get_secret()\n'new_fake_date'\n>>> obj.get_secret()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/shako/REPOS/py-read-once/.venv/lib/python3.10/site-packages/readonce.py\", line 47, in get_secret\n    raise UnsupportedOperationException(\"Sensitive data was already consumed\")\nreadonce.UnsupportedOperationException: ('Not allowed on sensitive value', 'Sensitive data was already consumed')\n```\n\n* You cannot create a subclass from sensitive class, it is a way of expose parent class data, but no success:\n\n```py\n>>> class FakePassword(Password):\n...     ...\n... \nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/shako/REPOS/py-read-once/.venv/lib/python3.10/site-packages/readonce.py\", line 21, in __new__\n    raise TypeError(\"Subclassing final classes is restricted\")\nTypeError: Subclassing final classes is restricted\n```\n\n* If somebody tries to access secrets directly:\n\n```py\n>>> obj.secrets\n[]\n>>> obj._ReadOnce__secrets\n[]\n```\n\n* You can not pickle it:\n\n```py\n>>> import pickle\n>>> pickle.dumps(obj)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/shako/REPOS/py-read-once/.venv/lib/python3.10/site-packages/readonce.py\", line 87, in __getstate__\n    raise UnsupportedOperationException()\nreadonce.UnsupportedOperationException: Not allowed on sensitive value\n```\n\n* You can not JSON serialize it:\n\nWith default encoder:\n\n```py\n>>> import json\n\n>>> json.dumps(obj)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3.10/json/__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n  File \"/usr/lib/python3.10/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/usr/lib/python3.10/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"/usr/lib/python3.10/json/encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type Password is not JSON serializable\n```\n\nWith custom encoder:\n\n```py\nclass CustomPasswordEncoder(json.JSONEncoder):\n    def default(self, obj):\n        try:\n            return {\"password\": obj.get_secret()}\n        except AttributeError:\n            return super().default(obj)\n```\n\n```py\n>>> json.dumps(obj, cls=CustomPasswordEncoder)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3.10/json/__init__.py\", line 238, in dumps\n    **kw).encode(obj)\n  File \"/usr/lib/python3.10/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/usr/lib/python3.10/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"<stdin>\", line 4, in default\n  File \"/home/shako/REPOS/py-read-once/.venv/lib/python3.10/site-packages/readonce.py\", line 48, in get_secret\n    raise UnsupportedOperationException(\"Sensitive data can not be serialized\")\nreadonce.UnsupportedOperationException: ('Not allowed on sensitive value', 'Sensitive data can not be serialized')\n```\n\n* At some points the class itself can be silently dumped to logs, but not here:\n\n```py\n>>> obj = Password(password=\"awesome_password\")\n>>> print(obj)\nReadOnce[secrets=*****]\n>>> obj\nReadOnce[secrets=*****]\n```\n\n# How about Python [Dataclasses](https://docs.python.org/3.10/library/dataclasses.html)?\n\nRegarding dataclasses, it is prohibited to directly define field then add it to secret:\n\n```py\nfrom readonce import ReadOnce\nfrom dataclasses import dataclass\n\n@dataclass\nclass DBPassword(ReadOnce):\n    password: str\n    def __post_init__(self):\n        # This is going to fail with \"AttributeError: 'DBPassword' object has no attribute 'password'\"\n        self.add_secret(self.password)\n```\n\nThe result will be:\n\n```py\nDBPassword(password=\"awesome\")\n...\nAttributeError: 'DBPassword' object has no attribute 'password'\n```\n\nThe better way either to use fields as a \"descriptor\" way. \nImagine you have an idea to share your database credentials in whole chunk. \nWe can create separate sensitive data holders or secrets for each information:\n\n```py\nfrom readonce import ReadOnce\n\nclass Password(ReadOnce):\n    def __init__(self, password: str) -> None:\n        super().__init__()\n        self.add_secret(password)\n\n\nclass DBUri(ReadOnce):\n    def __init__(self, uri: str) -> None:\n        super().__init__()\n        self.add_secret(uri)\n\n\nclass DBPort(ReadOnce):\n    def __init__(self, port: int) -> None:\n        super().__init__()\n        self.add_secret(port)\n\n\nclass DBHost(ReadOnce):\n    def __init__(self, host: str) -> None:\n        super().__init__()\n        self.add_secret(host)\n```\n\nThen we can combine them in one dataclass:\n\n```py\n@dataclass\nclass DBCredentialsWithDescriptors:\n    password: Password = Password(\"db-password\")\n    uri: DBUri = DBUri(\"mysql://\")\n    port: DBPort = DBPort(3306)\n    host: DBHost = DBHost(\"localhost\")\n```\n\nIn this way, further we can get our secrets back, again using `get_secret()` and only once:\n\n```py\n>>> credentials = DBCredentialsWithDescriptors()\n>>> credentials.password.get_secret()\n'db-password'\n\n>>> credentials.password.get_secret()\n...\nreadonce.UnsupportedOperationException: ('Not allowed on sensitive value', 'Sensitive data was already consumed')\n```\n\nPrinting or dumping credentials object will not give any valuable information as well:\n\n```py\n>>> print(credentials)\nDBCredentialsWithDescriptors(password=ReadOnce[secrets=*****], uri=ReadOnce[secrets=*****], port=ReadOnce[secrets=*****], host=ReadOnce[secrets=*****])\n```\n\nOkay, this not a full \"descriptors\" in terms of Python(no `__get__` and `__set__`), but I did not open this door intentionally.\n\n\n* Another way of using dataclasses is just declaring the fields:\n\n```py\n@dataclass\nclass DBCredentials:\n    password: Password\n    uri: DBUri\n    port: DBPort\n    host: DBHost\n```\n\nThen initialize the fields in the future. This approach is similar to DTOs(data transfer objects).\n\n* Is it possible to JSON serialize `DBCredentials`? Impossible if you decided to dump sensitive fields:\nTrying with custom encoder:\n```py\nimport json\n\nclass CustomDBCredentialsEncoder(json.JSONEncoder):\n    def default(self, obj):\n        try:\n            # Intentionally omit other fields\n            return {\"uri\": obj.uri.get_secret()}\n        except AttributeError:\n            return super().default(obj)\n```\n\n```py\n>>> credentials = DBCredentialsWithDescriptors()\n\n>>> json.dumps(credentials, cls=CustomDBCredentialsEncoder)\n...\nreadonce.UnsupportedOperationException: ('Not allowed on sensitive value', 'Sensitive data can not be serialized')\n```\n\nSame applies to pickling:\n\n```py\n>>> import pickle\n>>> pickle.dumps(credentials)\n...\nreadonce.UnsupportedOperationException: Not allowed on sensitive value\n```\n\n# Relation with [Pydantic](https://pydantic-docs.helpmanual.io/)\n\nAs we know the Pydantic models is a de-facto standard for data validation based on type annotations, we can easily use ReadOnce objects with Pydantic.\nIn this section I am going to share some tests.\n\nThe simplest way to declare Pydantic models with ReadOnce objects is to allow arbitrary types:\n\n```py\nfrom pydantic import BaseModel\n\nclass DBCredentialsModel(BaseModel):\n    comment: str\n    password: Password\n    uri: DBUri\n    port: DBPort\n    host: DBHost\n\n    class Config:\n        arbitrary_types_allowed = True\n```\n\nCreating credentials:\n\n```py\n>>> credentials = DBCredentialsModel(comment=\"The Hacked Database\", password=Password(\"db-password\"), uri=DBUri(\"mysql://\"), port=DBPort(3306), host=DBHost(\"localhost\"))\n>>> credentials\nDBCredentialsModel(comment='The Hacked Database', password=ReadOnce[secrets=*****], uri=ReadOnce[secrets=*****], port=ReadOnce[secrets=*****], host=ReadOnce[secrets=*****])\n```\n\nAgain the sensitive data is not exposed:\n\n```py\ncredentials.dict()\n{'comment': 'The Hacked Database', 'password': ReadOnce[secrets=*****], 'uri': ReadOnce[secrets=*****], 'port': ReadOnce[secrets=*****], 'host': ReadOnce[secrets=*****]}\n```\n\nIt can not be serialized in a default way:\n\n```py\n>>> credentials.json()\n...\nTypeError: Object of type 'Password' is not JSON serializable\n```\n\nUnfortunately, the nature of the ReadOnce object prevents using powerful validation mechanics in the model class.\nIn its core, the sensitive object can not be used twice if it was already consumed:\n* You can call arbitrary time `add_secret()` if no `get_secret()` was called before it.\n* Whenever you called `get_secret()` the sensitive object is considered as exhausted.\n\nImagine we want to validate the password length and try to add custom validator inside the Pydantic model:\n\n```py\nfrom pydantic import BaseModel, validator\n\nclass InvalidDBCredentialsModel(BaseModel):\n    comment: str\n    password: Password\n    uri: DBUri\n    port: DBPort\n    host: DBHost\n\n    @validator(\"password\")\n    def password_length_check(cls, v):\n        passwd = v.get_secret()\n        if len(passwd) > 7:\n            v.add_secret(passwd)\n            return v\n        raise ValueError(\"Password length should be more than 7\")\n\n    class Config:\n        arbitrary_types_allowed = True\n```\n\nAs you can expect, we need first get the secret data then validate it, if validation is okay we need to put that secret back to the sensitive object, which is not possible.\n\nTherefore, it is better to push the validation logic towards `Password` sensitive class instead. We will explore the validation in-depth in the future.\n\nIf we test this `InvalidDBCredentialsModel` it should fail with:\n`readonce.UnsupportedOperationException: ('Not allowed on sensitive value', 'Sensitive object exhausted; you can not use it twice')`\n\n> If you have any further Pydantic ideas please open an issue, we can explore and figure out the best usage\n\n# Applying best practices from Design by Contract\n\nIn order to further ensure data(secret) integrity and security, \nwe can use `DbC` ideas as it gives us cleaner way of defining reusable constraints.\n\nI like [icontract](https://github.com/Parquery/icontract) package which is quite handy tool.\nI have tried to explain this YouTube tutorial as well [Design-by-Contract programming with Python](https://www.youtube.com/watch?v=yi-GInnc768).\n\nLet's redefine our sensitive class as:\n\n```py\nimport icontract\nfrom readonce import ReadOnce\n\ndef validate_password_length(password: str) -> bool:\n    return len(password) > 7\n\nclass Password(ReadOnce):\n    @icontract.ensure(lambda self: len(self) == 1, \"Secret is missing\")\n    @icontract.require(\n        lambda password: validate_password_length(password),\n        \"Password length should be more than 7\",\n    )\n    def __init__(self, password: str) -> None:\n        super().__init__()\n        self.add_secret(password)\n```\n\nThe current password validation is quite naive, it just checks the length of the string: this is our `pre-condition` and\nit is marked as `@icontract.require`.\n\nBut what is `@icontract.ensure` then? \nThis is our so called, `post-condition`: after adding secret the length of the secrets storage must be equal to one.\n\nWe can add more sophisticated password validation using regex, it is up to your business needs.\nThe question should be asked here: *\"What is a password for our application?\"*\n\n```py\nimport re\n\ndef validate_password(password: str) -> bool:\n    reg = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{6,20}$\"\n    pattern = re.compile(reg)\n    return bool(re.search(pattern, password))\n```\n\nAfter writing down password requirements you can convert them to `pre-conditions` as part of your DbC approach.\n\n* I used these ideas in the `ReadOnce` implementation as well, such as:\n\n```py\n@icontract.ensure(lambda self: not self.__secrets and not self.__is_consumed)\ndef __init__(self) -> None:\n    self.__reset_secrets()\n    self.__reset_is_consumed()\n```\n\nHere I make myself to be sure that everything was reset properly.\n\nAnother important topic is the invariants. Thinking about `ReadOnce` object, \nat its lifecycle there can be either zero secret or only and only one secret:\n\n```py\n@icontract.invariant(\n    lambda self: len(self) == 0 or len(self) == 1,\n    \"There can be no or only single secret data stored\",\n)\nclass ReadOnce(metaclass=Final):\n    ...\n```\n\nIf somebody tries to inject more than one data to the secret storage, it will fail as it is a clear invariant violation.\n\n\n# How to install for development?\n\n### Create and activate the virtualenv:\n\n* `python3.10 -m venv .venv`\n\n* `source .venv/bin/activate`\n\nWe use flit for the package management:\n\n### Install flit:\n\n* `pip install flit==3.7.1`\n\n### Installing project for development\n\n`make install-dev` or `flit install --env --deps=develop --symlink` \n\n### Installing for general showcase\n\n`make install` or `flit install --env --deps=develop` \n\n### Run all tests in verbose\n\n`make test` or `pytest -svv` \n\n\n# TODO\n\n* Design by Contract ideas for ReadOnce object validation\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "readonce",
    "package_url": "https://pypi.org/project/readonce/",
    "platform": null,
    "project_url": "https://pypi.org/project/readonce/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/readonce/1.0.2/",
    "requires_dist": [
      "icontract >=2.6.2",
      "black >=22.3.0 ; extra == \"dev\"",
      "pylint >=2.12.2 ; extra == \"dev\"",
      "isort >=5.9.3 ; extra == \"dev\"",
      "autoflake >=1.4 ; extra == \"dev\"",
      "flake8 >=4.0.1 ; extra == \"dev\"",
      "pre-commit >=2.17.0 ; extra == \"dev\"",
      "pytype >=2022.1.31 ; extra == \"dev\"",
      "pydantic >=1.10.2 ; extra == \"dev\"",
      "pytest >=7.1.3 ; extra == \"test\"",
      "pytest-cov >= 3.0.0 ; extra == \"test\""
    ],
    "requires_python": ">=3.10",
    "summary": "Read-Once Object implementation in Python - Inspired by Secure by Design book.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15993591,
  "releases": {
    "1.0.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "8651a87d04710564f655ad6f9c4db4c0f83e0be9bc5d5c2fb50ec2e769f62984",
          "md5": "4bf198771c0629e999134844ece9a0a3",
          "sha256": "4ee2ac26ab2f95f1debd785fcc1f8874f1831904aa7ba6a18a84024e0dda607d"
        },
        "downloads": -1,
        "filename": "readonce-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4bf198771c0629e999134844ece9a0a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 4928,
        "upload_time": "2022-12-03T22:45:31",
        "upload_time_iso_8601": "2022-12-03T22:45:31.773226Z",
        "url": "https://files.pythonhosted.org/packages/86/51/a87d04710564f655ad6f9c4db4c0f83e0be9bc5d5c2fb50ec2e769f62984/readonce-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f50a9ffd0d8046f9377a1c12d0286e196589816e07ed14e3fd7864b31b2eaae2",
          "md5": "463a3ed21269c526983a91ec8dfc8cd2",
          "sha256": "e6c50b706388580ddbc5739f9153ca55c64085cc6223a01a78646762144c3f50"
        },
        "downloads": -1,
        "filename": "readonce-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "463a3ed21269c526983a91ec8dfc8cd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 7184,
        "upload_time": "2022-12-03T22:45:33",
        "upload_time_iso_8601": "2022-12-03T22:45:33.178740Z",
        "url": "https://files.pythonhosted.org/packages/f5/0a/9ffd0d8046f9377a1c12d0286e196589816e07ed14e3fd7864b31b2eaae2/readonce-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9dabcef8a635922ad85189152ab63cfbfb11bdce4ac8d3d4f211776a609a642c",
          "md5": "076c4aec8495c1fa2c6de7aaaf3b635c",
          "sha256": "495e93e93c0b788434f982113e3870fbde8c786aa1d94107648943aa3c683744"
        },
        "downloads": -1,
        "filename": "readonce-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "076c4aec8495c1fa2c6de7aaaf3b635c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 6894,
        "upload_time": "2022-12-04T19:19:48",
        "upload_time_iso_8601": "2022-12-04T19:19:48.773749Z",
        "url": "https://files.pythonhosted.org/packages/9d/ab/cef8a635922ad85189152ab63cfbfb11bdce4ac8d3d4f211776a609a642c/readonce-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "18e997256188a1e8308eda8dce054b31508d44294d39a3bfaffbafef73c5b416",
          "md5": "97626bf3a98237ffc6a4c6766c47a629",
          "sha256": "21929661cb6e170004df13183cdba5ebc2872b0dc01e15bcd299003f9a3017bb"
        },
        "downloads": -1,
        "filename": "readonce-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "97626bf3a98237ffc6a4c6766c47a629",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 12712,
        "upload_time": "2022-12-04T19:19:52",
        "upload_time_iso_8601": "2022-12-04T19:19:52.295940Z",
        "url": "https://files.pythonhosted.org/packages/18/e9/97256188a1e8308eda8dce054b31508d44294d39a3bfaffbafef73c5b416/readonce-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "220dc9996adb437d5c0b11b39b318a8b0ec0a7240e26e7477220e833ff784caa",
          "md5": "4b20651aa3f11c81de9cd0ae14bc30db",
          "sha256": "5b39357be55f46d585f13bb3b511beb76e11eb602806c6e71998e64e0a4e152b"
        },
        "downloads": -1,
        "filename": "readonce-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b20651aa3f11c81de9cd0ae14bc30db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 8038,
        "upload_time": "2022-12-05T10:34:47",
        "upload_time_iso_8601": "2022-12-05T10:34:47.256850Z",
        "url": "https://files.pythonhosted.org/packages/22/0d/c9996adb437d5c0b11b39b318a8b0ec0a7240e26e7477220e833ff784caa/readonce-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "71ff30d1e53b2cb589a9eb479e856bfc7df90a052210ee3be103386027ac769d",
          "md5": "c6f9d87016700504ce72d96cbef20b0f",
          "sha256": "e7082492d87bac9cb8062b7a6567f5d68c537e7ee08ee3b6171fc8fd0a6ac2f1"
        },
        "downloads": -1,
        "filename": "readonce-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c6f9d87016700504ce72d96cbef20b0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 14608,
        "upload_time": "2022-12-05T10:34:49",
        "upload_time_iso_8601": "2022-12-05T10:34:49.288152Z",
        "url": "https://files.pythonhosted.org/packages/71/ff/30d1e53b2cb589a9eb479e856bfc7df90a052210ee3be103386027ac769d/readonce-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "220dc9996adb437d5c0b11b39b318a8b0ec0a7240e26e7477220e833ff784caa",
        "md5": "4b20651aa3f11c81de9cd0ae14bc30db",
        "sha256": "5b39357be55f46d585f13bb3b511beb76e11eb602806c6e71998e64e0a4e152b"
      },
      "downloads": -1,
      "filename": "readonce-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b20651aa3f11c81de9cd0ae14bc30db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 8038,
      "upload_time": "2022-12-05T10:34:47",
      "upload_time_iso_8601": "2022-12-05T10:34:47.256850Z",
      "url": "https://files.pythonhosted.org/packages/22/0d/c9996adb437d5c0b11b39b318a8b0ec0a7240e26e7477220e833ff784caa/readonce-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "71ff30d1e53b2cb589a9eb479e856bfc7df90a052210ee3be103386027ac769d",
        "md5": "c6f9d87016700504ce72d96cbef20b0f",
        "sha256": "e7082492d87bac9cb8062b7a6567f5d68c537e7ee08ee3b6171fc8fd0a6ac2f1"
      },
      "downloads": -1,
      "filename": "readonce-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c6f9d87016700504ce72d96cbef20b0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 14608,
      "upload_time": "2022-12-05T10:34:49",
      "upload_time_iso_8601": "2022-12-05T10:34:49.288152Z",
      "url": "https://files.pythonhosted.org/packages/71/ff/30d1e53b2cb589a9eb479e856bfc7df90a052210ee3be103386027ac769d/readonce-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}