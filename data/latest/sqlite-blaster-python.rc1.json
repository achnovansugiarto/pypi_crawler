{
  "info": {
    "author": "Arundale Ramanathan",
    "author_email": "Arundale Ramanathan <arun@siara.cc>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Sqlite Index Blaster for Python\n\nThis library provides API for creating huge Sqlite indexes at breakneck speeds for millions of records much faster than the official SQLite library by leaving out crash recovery.\n\nThis repo exploits a [lesser known feature of the Sqlite database file format](https://www.sqlite.org/withoutrowid.html) to store records as key-value pairs or documents or regular tuples.\n\nThis repo is a `pybind11` wrapper for the C++ lib at https://github.com/siara-cc/sqlite_blaster\n\n# Statement of need\n\nThere are a number of choices available for fast insertion of records, such as Rocks DB, LMDB and MongoDB but even they are slow due to overheads of using logs or journals for providing durability.  These overheads are significant for indexing huge datasets.\n\nThis library was created for inserting/updating billions of entries for arriving at word/phrase frequencies for building dictionaries for the [Unishox](https://github.com/siara-cc/Unishox) project using publicly available texts and conversations.\n\nFurthermore, the other choices don't have the same number of IDEs or querying abilities of the most popular Sqlite data format.\n\n# Applications\n\n- Lightning fast index creation for huge datasets\n- Fast database indexing for embedded systems\n- Fast data set creation and loading for Data Science and Machine Learning\n\n# Performance\n\nThe performance of this repo was compared with the Sqlite official library, LMDB and RocksDB under similar conditions of CPU, RAM and NVMe disk and the results are shown below:\n\n![Performance](https://raw.githubusercontent.com/siara-cc/sqlite_blaster_python/main/misc/performance.png)\n\nRocksDB performs much better than other choices and performs consistently for over billion entries, but it is quite slow initially.\n\nThe chart data can be found [here](https://raw.githubusercontent.com/siara-cc/sqlite_blaster_python/main/misc/SqliteBlasterPerformanceLineChart.xlsx).\n\n# Building and running tests\n\nClone this repo and run:\n\n```sh\npython3 setup.py test\n```\n\nNote: This only builds the module. To run tests, install `pytest` and run:\n\n```sh\npip3 install pytest\npytest\n```\n\nTo install the module, run:\n\n```sh\nmkdir build\ncd build\ncmake ..\nmake\npip3 install ./sqlite_blaster_python\n```\n\n# Getting started\n\nEssentially, the library provides 4 methods `put_string()`, `get_string()`, `put_rec()`, `get_rec()` for inserting and retrieving records.  Shown below are examples of how this library can be used to create a key-value store, or a document store or a regular table.\n\nNote: The cache size is used as 40kb in these examples, but in real life 32mb or 64mb would be ideal.  The higher this number, better the performance.\n\n## Creating a Key-Value store\n\nIn this mode, a table is created with just 2 columns, `key` and `value` as shown below:\n\n```python\nimport sqlite_blaster_python\n\ncol_names = [\"key\", \"value\"]\nsqib = sqlite_blaster_python.sqlite_index_blaster(2, 1, col_names, \"imain\", 4096, 40000, \"kv_idx.db\")\nsqib.put_string(\"hello\", \"world\")\nsqib.close()\n```\n\nA file `kv_idx.db` is created and can be verified by opening it using `sqlite3` official console program:\n\n```sh\nsqlite3 kv_idx.db \".dump\"\n```\n\nand the output would be:\n\n```sql\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE kv_index (key, value, PRIMARY KEY (key)) WITHOUT ROWID;\nINSERT INTO kv_index VALUES('hello','world');\nCOMMIT;\n```\n\nTo retrieve the inserted values, use `get` method as shown below\n\n```python\nimport sqlite_blaster_python\n\ncol_names = [\"key\", \"value\"]\nsqib = sqlite_blaster_python.sqlite_index_blaster(2, 1, col_names, \"imain\", 4096, 40, \"kv_idx.db\")\nsqib.put_string(\"hello\", \"world\")\nprint(\"Value of hello is\", sqib.get_string(\"hello\", \"not_found\"))\nsqib.close()\n```\n\nThe second parameter to `get_string` is for specifying what value is to be returned when the 1st parameter could not be found in the database index.\n\n## Creating a Document store\n\nIn this mode, a table is created with just 2 columns, `key` and `doc` as shown below:\n\n```python\nimport sqlite_blaster_python\n\njson1 = '{\"name\": \"Alice\", \"age\": 25, \"email\": \"alice@example.com\"}'\njson2 = '{\"name\": \"George\", \"age\": 32, \"email\": \"george@example.com\"}'\n\ncol_names = [\"key\", \"doc\"]\nsqib = sqlite_blaster_python.sqlite_index_blaster(2, 1, col_names, \"doc_index\", 4096, 40, \"doc_store.db\")\nsqib.put_string(\"primary_contact\", json1)\nsqib.put_string(\"secondary_contact\", json2)\nsqib.close()\n```\n\nThe index is created as `doc_store.db` and the json values can be queried using `sqlite3` console as shown below:\n\n```sql\nSELECT json_extract(doc, '$.email') AS email\nFROM doc_index\nWHERE key = 'primary_contact';\n```\n\n## Creating a regular table\n\nThis repo can be used to create regular tables with primary key(s) as shown below:\n\n```python\nimport sqlite_blaster_python\n\ncol_names = [\"student_name\", \"age\", \"maths_marks\", \"physics_marks\", \"chemistry_marks\", \"average_marks\"]\nsqib = sqlite_blaster_python.sqlite_index_blaster(6, 2, col_names, \"student_marks\", 4096, 40, \"student_marks.db\")\n\nsqib.put_rec([\"Robert\", 19, 80, 69, 98, round((80+69+98)/3, 2)])\nsqib.put_rec([\"Barry\", 20, 82, 99, 83, round((82+99+83)/3, 2)])\nsqib.put_rec([\"Elizabeth\", 23, 84, 89, 74, round((84+89+74)/3, 2)])\n\nsqib.get_rec([\"Elizabeth\", 23])\n\nsqib.close()\n```\n\nThe index is created as `student_marks.db` and the data can be queried using `sqlite3` console as shown below:\n\n```sql\nsqlite3 student_marks.db \"select * from student_marks\"\nBarry|20|82|99|83|88.0\nElizabeth|23|84|89|74|82.33\nRobert|19|80|69|98|82.33\n```\n\n## Constructor parameters of sqlite_index_blaster class\n\n1. `total_col_count` - Total column count in the index\n2. `pk_col_count` - Number of columns to use as key.  These columns have to be positioned at the beginning\n3. `col_names` - Column names to create the table\n4. `tbl_name` - Table (clustered index) name\n5. `block_sz` - Page size (must be one of 512, 1024, 2048, 4096, 8192, 16384, 32768 or 65536)\n6. `cache_sz` - Size of LRU cache in kilobytes. 32 or 64 mb would be ideal. Higher values lead to better performance\n7. `fname` - Name of the Sqlite database file\n\n# Limitations\n\n- No crash recovery. If the insertion process is interruped, the database would be unusable.\n- The record length cannot change for update. Updating with lesser or greater record length is not implemented yet.\n- Deletes are not implemented yet.  This library is intended primarily for fast inserts.\n- Support for concurrent inserts not implemented yet.\n- The regular ROWID table of Sqlite is not implemented.\n- Key lengths are limited depending on page size as shown in the table below.  This is just because the source code does not implement support for longer keys. However, this is considered sufficient for most practical purposes.\n\n  | **Page Size** | **Max Key Length** |\n  | ------------- | ------------------ |\n  | 512 | 35 |\n  | 1024 | 99 |\n  | 2048 | 227 |\n  | 4096 | 484 |\n  | 8192 | 998 |\n  | 16384 | 2026 |\n  | 32768 | 4082 |\n  | 65536 | 8194 |\n\n# License\n\nSqlite Index Blaster and its command line tools are dual-licensed under the MIT license and the AGPL-3.0.  Users may choose one of the above.\n\n- The MIT License\n- The GNU Affero General Public License v3 (AGPL-3.0)\n\n# Credits\n\n- The template for developing this Python binding was taken from the `pybind` repo https://github.com/pybind/cmake_example (See PYBIND_LICENSE file)\n- `ChatGPT` was used in quickly figuring out the intricacies of `pybind11`\n\n# Support\n\nIf you face any problem, create issue in this website, or write to the author (Arundale Ramanathan) at arun@siara.cc.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlite-blaster-python",
    "package_url": "https://pypi.org/project/sqlite-blaster-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqlite-blaster-python/",
    "project_urls": {
      "Bug Tracker": "https://github.com/siara-cc/sqlite_blaster_python/issues",
      "Homepage": "https://github.com/siara-cc/sqlite_blaster_python"
    },
    "release_url": "https://pypi.org/project/sqlite-blaster-python/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A library for creating huge Sqlite indexes at breakneck speeds",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17106936,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9be148526c6ea64a3e7ea02089fba02fee9ff4428c530d38e10f521758e9473",
          "md5": "3c0dcd73748a46bab6b6749e40a961dc",
          "sha256": "adb0550a36a88ba7cc3302720b82487bd75764cd1b6eb372e6bd0631a7525f91"
        },
        "downloads": -1,
        "filename": "sqlite_blaster_python-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3c0dcd73748a46bab6b6749e40a961dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16788308,
        "upload_time": "2023-03-01T05:12:24",
        "upload_time_iso_8601": "2023-03-01T05:12:24.702327Z",
        "url": "https://files.pythonhosted.org/packages/f9/be/148526c6ea64a3e7ea02089fba02fee9ff4428c530d38e10f521758e9473/sqlite_blaster_python-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9be148526c6ea64a3e7ea02089fba02fee9ff4428c530d38e10f521758e9473",
        "md5": "3c0dcd73748a46bab6b6749e40a961dc",
        "sha256": "adb0550a36a88ba7cc3302720b82487bd75764cd1b6eb372e6bd0631a7525f91"
      },
      "downloads": -1,
      "filename": "sqlite_blaster_python-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3c0dcd73748a46bab6b6749e40a961dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16788308,
      "upload_time": "2023-03-01T05:12:24",
      "upload_time_iso_8601": "2023-03-01T05:12:24.702327Z",
      "url": "https://files.pythonhosted.org/packages/f9/be/148526c6ea64a3e7ea02089fba02fee9ff4428c530d38e10f521758e9473/sqlite_blaster_python-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}