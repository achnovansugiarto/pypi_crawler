{
  "info": {
    "author": "thaddywu",
    "author_email": "thaddywu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Forecast-elicitation-Mechanism\n\nImplement 4 papers:\n\n- Water from Two Rocks: Maximizing the Mutual Information (MCG)\n- Dominantly Truthful Multi-task Peer Prediction with a Constant Number of Tasks (DMI)\n- A Bayesian truth serum for subjective data (BTS)\n- Informed Truthfulness in Multi-Task Peer Prediction (CA)\n\n# Usage\n\n## To begin\nYou can install the package `femtools` using pip\n\n\tpip install femtools\n\nTo begin, import femtools\n\n\timport numpy as np\n\timport femtools as fem\n\n## BTS\nFor Bayesian Truth Serum, we implemented the version with finite players. Call the function `BTS` with answers `x` and predicted frequencies `y`, score for every respondent is returned. `x` and `y` can be given in the `numpy.array` form or `list` form. If there are n respondents and m possible answers, `x` should be an n-dimensional vector and  each answer in `x` should be an integer in `[0, m)`. Similarly, `y` is a `n*m` matrix denoting the predicted frequencies. BTS score is composed of information-score and prediction score, thus optional parameter alpha controlling the weight given to the prediction score could be assigned between `(0,1]`. By default, `alpha` is `1`.\n\nHere are examples\n\n\t>>> fem.BTS([3, 2, 1, 1, 0],\n\t... [[0.1, 0.1, 0.3, 0.5],\n\t... [0.1, 0.2, 0.5, 0.2],\n\t... [0.3, 0.4, 0.2, 0.1],\n\t... [0.3, 0.4, 0.1, 0.2],\n\t... [0.1, 0.3, 0.2, 0.4]])\n\tarray([-3.28030172, -2.40787449, -0.29706308, -0.29706308, -1.074341  ])\n\n\t>>> fem.BTS([0, 0, 0],\n\t... [[0.5, 0.5],\n\t... [0.5, 0.5],\n\t... [0.5, 0.5]], alpha = 0.5)\n\tarray([0.51873113, 0.51873113, 0.51873113])\n\n## CA\nFor Correlated Agreement Mechanism, we implemented the detail-free version. CA Detail-Free is designed for multi-task problem with n agents and m tasks. Call the function `CA` with a `n*m` report matrix `reports`, score for every agent is returned. `reports` can be given in the `numpy.array` form or `list` form. For convenience, matrix `reports` can be given transposed with optional parameter `agent_first = False`. By default, `agent_first` is set to `True`. In addition, function `CA` does not expect that elements are integers.\n\nHere is the example\n\n\t>>> fem.CA([['subway', 'subway', 'subway', 'burgerK', 'burgerK', 'burgerK'],\n\t... ['burgerK', 'McDonald', 'subway', 'McDonald', 'burgerK', 'burgerK'],\n\t... ['burgerK', 'McDonald', 'subway', 'McDonald', 'burgerK', 'burgerK'],\n\t... ['KFC', 'KFC', 'KFC', 'PizzaHot', 'McDonald', 'McDonald'],\n\t... ['PizzaHot', 'PizzaHot', 'PizzaHot', 'PizzaHot', 'PizzaHot', 'McDonald'],\n\t... ['PizzaHot', 'PizzaHot', 'PizzaHot', 'KFC', 'PizzaHot', 'subway'],\n\t... ['McDonald', 'McDonald', 'McDonald', 'McDonald', 'McDonald', 'McDonald'],\n\t... ['burgerK', 'burgerK', 'McDonald', 'burgerK', 'burgerK', 'burgerK'],\n\t... ['burgerK', 'subway', 'subway', 'PizzaHot', 'subway', 'subway'],\n\t... ['burgerK', 'burgerK', 'McDonald', 'burgerK', 'burgerK', 'burgerK'],\n\t... ['PizzaHot', 'PizzaHot', 'PizzaHot', 'PizzaHot', 'PizzaHot', 'McDonald'],\n\t... ], agent_first = False)\n\tarray([23, 20, 12, 23, 25, 25])\n\n## DMI\n\nCall the function `DMI` with answers `x` and the number of choices `C`. `x` should be given in the `numpy.array` form or `list` form. If there are n agents and m tasks,  `x` is a `n*m` matrix. Please make sure `m >= 2c` and each answer in `x` is an integer in `[0, c)`, otherwise the function will raise a `ValueError`.  DMI scores will return in `numpy.array` form.\n\nHere is an example\n\n```\n>>> fem.DMI([[1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1]], 2)\narray([1.5, 1.5])\n```\n\n## MCG\n\nWe implemented the multi-task common ground mechanism MCG(f) for Bernoulli distribution case. Call the function `MCG` with answers, function `f` and prior. The answers should be a `2*n` matrix in `numpy.array` form or `list` form for 2 agents' prediction and all the number in answers should in `[0, 1]`.  The prior is a number in `[0, 1]`, too. `f` should be in `[\"TVD\", \"KLD\"]` for Total Variation Distance and KL divergence, respectively. By default, `f = \"TVD\"` . More functions will be supported in the future. The payments will return in `numpy.array` form.\n\nHere is an example\n\n```\n>>> fem.DMI([[0.2, 0.3, 0.2], [0.3, 0.5, 0.3]], 'TVD', 0.3)\narray([0.3333333333333333, 0.3333333333333333])\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Hermera/Forecast-elicitation-Mechanism",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "femtools",
    "package_url": "https://pypi.org/project/femtools/",
    "platform": "",
    "project_url": "https://pypi.org/project/femtools/",
    "project_urls": {
      "Homepage": "https://github.com/Hermera/Forecast-elicitation-Mechanism"
    },
    "release_url": "https://pypi.org/project/femtools/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Forecast-elicitation-Mechanism",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7402669,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2dcda53660018536b6e112946bc8869a4ccbcba12cd580ab9adc8fc69ed80fb8",
          "md5": "de26bc554e663e012a80bdb15051a021",
          "sha256": "9922c516c4339f27725d7b25cb2ad70668093280876146cd0e160916fc0c88ad"
        },
        "downloads": -1,
        "filename": "femtools-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de26bc554e663e012a80bdb15051a021",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5739,
        "upload_time": "2020-06-03T15:45:41",
        "upload_time_iso_8601": "2020-06-03T15:45:41.146788Z",
        "url": "https://files.pythonhosted.org/packages/2d/cd/a53660018536b6e112946bc8869a4ccbcba12cd580ab9adc8fc69ed80fb8/femtools-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1864b06cd793557da2556e892b4da801c6b390ea84ff7591e9d2e2923481d5f",
          "md5": "9655c5eb2f7a9f82afc2c25bc682bc80",
          "sha256": "d277fdc086c403fa444fd54c59c05850b4773e6c7c09f946d1e9e1af3f261230"
        },
        "downloads": -1,
        "filename": "femtools-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9655c5eb2f7a9f82afc2c25bc682bc80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3574,
        "upload_time": "2020-06-03T15:45:42",
        "upload_time_iso_8601": "2020-06-03T15:45:42.614906Z",
        "url": "https://files.pythonhosted.org/packages/e1/86/4b06cd793557da2556e892b4da801c6b390ea84ff7591e9d2e2923481d5f/femtools-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c80e58e59847b353e5405a446f1604d6d64548dd01ad35a1a30d2b256639380d",
          "md5": "fd9f544df0dcf573940bd3accdfdd11d",
          "sha256": "15cd85c5fb601d3ea9d0499c1ffba535033130fcb09f0986b3f8b1fa81752f01"
        },
        "downloads": -1,
        "filename": "femtools-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd9f544df0dcf573940bd3accdfdd11d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5739,
        "upload_time": "2020-06-03T15:50:45",
        "upload_time_iso_8601": "2020-06-03T15:50:45.706631Z",
        "url": "https://files.pythonhosted.org/packages/c8/0e/58e59847b353e5405a446f1604d6d64548dd01ad35a1a30d2b256639380d/femtools-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af88d2e3435af95572bc3d5cc5f82bd36ae31e5813bbe8e96e2ae0a8d68b8074",
          "md5": "41fa52f6204c676396bc3855bb5b8a39",
          "sha256": "8a12272863c475fb3ec050b9128c8fa4d60ab1cb697e77a0fb89fd69ebd453df"
        },
        "downloads": -1,
        "filename": "femtools-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41fa52f6204c676396bc3855bb5b8a39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5743,
        "upload_time": "2020-06-03T15:57:45",
        "upload_time_iso_8601": "2020-06-03T15:57:45.289439Z",
        "url": "https://files.pythonhosted.org/packages/af/88/d2e3435af95572bc3d5cc5f82bd36ae31e5813bbe8e96e2ae0a8d68b8074/femtools-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58126fa7ee12f721d28f2be1c6c0ab3d4077bf554a1e92f777c99ee96ea70a00",
          "md5": "96cce8ee62a7a8b9a0cd68be9d121161",
          "sha256": "efd9fbfec97f6f442db8f3fca1b8e8b1b69df78a8f49ef49fbe717f8e70ff70c"
        },
        "downloads": -1,
        "filename": "femtools-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96cce8ee62a7a8b9a0cd68be9d121161",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6665,
        "upload_time": "2020-06-03T16:49:49",
        "upload_time_iso_8601": "2020-06-03T16:49:49.248412Z",
        "url": "https://files.pythonhosted.org/packages/58/12/6fa7ee12f721d28f2be1c6c0ab3d4077bf554a1e92f777c99ee96ea70a00/femtools-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d815008b52a60341bd45a4ab03bfafc1582b0db9872a2c3e0fca69435b672e1",
          "md5": "26251da4a6b846c28c45f009b1ebf034",
          "sha256": "3731acb381fd4f0c2062b1012001cb83d88f2800737435965cbe80e7408d09ba"
        },
        "downloads": -1,
        "filename": "femtools-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26251da4a6b846c28c45f009b1ebf034",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7101,
        "upload_time": "2020-06-05T08:41:06",
        "upload_time_iso_8601": "2020-06-05T08:41:06.694160Z",
        "url": "https://files.pythonhosted.org/packages/0d/81/5008b52a60341bd45a4ab03bfafc1582b0db9872a2c3e0fca69435b672e1/femtools-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d815008b52a60341bd45a4ab03bfafc1582b0db9872a2c3e0fca69435b672e1",
        "md5": "26251da4a6b846c28c45f009b1ebf034",
        "sha256": "3731acb381fd4f0c2062b1012001cb83d88f2800737435965cbe80e7408d09ba"
      },
      "downloads": -1,
      "filename": "femtools-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "26251da4a6b846c28c45f009b1ebf034",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7101,
      "upload_time": "2020-06-05T08:41:06",
      "upload_time_iso_8601": "2020-06-05T08:41:06.694160Z",
      "url": "https://files.pythonhosted.org/packages/0d/81/5008b52a60341bd45a4ab03bfafc1582b0db9872a2c3e0fca69435b672e1/femtools-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}