{
  "info": {
    "author": "Larry Hastings",
    "author_email": "larry@hastings.org",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# vec\n\n## A reasonable, performant 2D vector object for games\n\n##### Copyright 2019-2020 by Larry Hastings\n\n## Overview\n\n`vec` is a module currently containing one class: `Vector2`, a 2D\nvector object designed for game development.\n\nFeatures:\n\n* `Vector2` objects are immutable.\n* `Vector2` support all the usual features, including operator overloading.\n* Attributes of `Vector2` objects are lazily-computed where possible.\n* `Vector2` objects effortlessly support both cartesian and polar coordinates.\n\n\n## Why Another Vector Class?\n\nI've participated in three PyWeek gaming challenges.  In two of those three times,\nmid-week I wrote my own vector class out of sheer frustration.\n\nThe biggest problem with most Python vector objects in is that they're mutable.\nFrankly this way lies madness.  Vector objects should be immutable--it\njust makes sense from an API perspective.  What if you set the position\nof some game-engine pawn to be a particular vector object, then modify\nthat vector object?  Should the pawn update its position automatically--and if so,\nhow is it supposed to know the value changed?\n\nSimilarly, some vector classes use degrees for polar coordinates\ninstead of radians.\nAgain this way lies madness.  The trigonometric functions in Python's\n`math` module operate in the radians domain, and having to keep track\nof which domain something is in--and translate back and forth--is\na needless conceptual complication.  You've got a game to write!\n\n(Some vector classes support *both* radians *and* degrees for polar\ncoordinates.  This is simply bad API design--it doubles the surface\narea of your API, adding needless complexity and increasing maintenance\nand testing overhead.  Embrace the radian, folks.)\n\nOn a related note, many vector classes make polar coordinates\nsecond-class citizens.  Most vector classes only store vectors in\ncartesian coordinates, so either the programmer must perform all polar\noperations externally to the vector objects, or they incur the\noverhead and cumulative error of translating to polar and\nback again with every operation.\n\n`vec.Vector2` avoids all these problems.  `vec.Vector2` objects\nare immutable,\nthey support vectors defined with either polar or cartesian coordinates,\nand\nthey strictly use radians for polar operations.\n\n## The Conceptual Model\n\n`vec.Vector2` objects conceptually represent a vector.  They can be\ndefined using either cartesian or polar coordinates, and any `vec.Vector2`\ncan be queried for both its cartesian and polar coordinates.\n\nMost vector objects in games are defined using cartesian coordinates.\n`vec.Vector2` makes that easy, supporting any number of invocations\nto create one.  Discrete parameters,\niterables, and objects that support `x` and `y` attributes all work fine:\n\n    vec.Vector2(0, 1)\n    vec.Vector2(x=0, y=1)\n    vec.Vector2((0, 1))\n    vec.Vector2([0, 1])\n    vec.Vector2(types.SimpleNamespace(x=0, y=1))\n\nAll these define the same vector.  That last example is there to demonstrate\nthat `vec.Vector2` can create a vector based on any object with `x` and `y`\nattributes.\n\nOnce you have a vector object, you can examine its attributes.\nEvery `vec.Vector2` object can be queried for both cartesian and\npolar coordinates:\n\n    v = vec.Vector2(0, 1)\n    print(v.theta, v.r)\n\nprints `1.5707963267948966 1.0`.  That first number is π/2 (approximately).\n\nConversely, you can also define `vec.Vector2` objects using polar\ncoordinates, and then ask for its cartesian coordinates:\n\n    v2 = vec.Vector2(r=1, theta=1.5707963267948966)\n    print(v2.x, v2.y)\n\nThis prints `6.123233995736766e-17 1.0`.  Conceptually this should\nprint `0.0, 1.0`--but `math.pi` is only an approximation, which means\nsadly our result is off by an infinitesimal amount.\n\n### Implementation Details\n\nInternally `vec.Vector2` objects are either \"cartesian\" or \"polar\".\n\"cartesian\" vector objects are defined in terms of `x` and `y`;\n\"polar\" vector objects are defined in terms of `r` and `theta`.\nAll other attributes are lazily computed as needed.\n\n`vec.Vector2` objects use slots, and rely on `__getattr__`\nto implement this lazy computation.  Only the known values of the\nvector are set when it's created.  If the user refers to an attribute\nthat hasn't been computed yet, Python will call `vec.Vector2.__getattr__()`,\nwhich computes and then sets that value.  Future references to that\nattribute skip this mechanism and simply return the cached value, which\nis only as expensive as an attribute lookup on a conventional object.\n\nOperations on `vec.Vector2` objects compute their result\nusing the cheapest approach.  If you have a `vec.Vector2` object\ndefined using polar coordinates, and you call `.rotate()` or `.scale()`\non it, all the math is done in the polar domain.  On the other\nhand, adding vectors is always done in the cartesian domain, so\nif you add a polar vector to any other vector, its cartesian\ncoordinates will be computed--and the resulting vector will always\nbe defined using cartesian coordinates.\n\nActually, that last statement isn't always true.  There's a special\ncase for adding two polar vectors which have the exact same `theta`:\njust add their `r` values. That approach is much cheaper than\nconverting to cartesian, and more precise as well, returning a vector\ndefined using polar coordinates!  `vec.Vector2` takes advantage of\nmany such serendipities, computing your vectors as cheaply and accurately\nas possible.\n\n\n## The API\n\n`vec.Vector2(x=None, y=None, *, r=None, theta=None, r_squared=None)`\n\nConstructs a `vec.Vector2` object.  You may pass in as many or as\nfew of these arguments as you like; however, you *must* pass in\n*either* both `x` and `y` *or* both `r` and `theta`.\nAny attributes not passed in at construction time will be lazily\ncomputed at the time they are evaluated.\n\n(`vec.Vector2` only does *some* validation of its arguments.\nIt ensures that `r` and `theta` are normalized.  However,\nit doesn't check that `(x, y)` and `(r, theta)` describe the\nsame vector.\nIf you pass in `x` and `y`, and a `theta` and `r` that don't\nmatch, you'll get back the `vec.Vector2` that you asked for.\nGood luck.)\n\n`vec.Vector2` objects support five attributes:\n`x`, `y`, `r`, `theta`, and `r_squared`.  It doesn't matter whether\nthe object was defined with cartesian or polar coordinates; these\nall work.  `r_squared` is equivalent to `r*r` but it's much cheaper\nto compute based on cartesian coordinates.\n\n`vec.Vector2` objects support the *iterator protocol.*  You can call\n`len()` on `vec.Vector2` objects--and it'll always return 2.\nYou can also iterate over them,\nwhich will yield the `x` and `y` attributes in that order.\n\n`vec.Vector2` objects support the *sequence protocol.*  You can subscript\nthem, which behaves as if the `vec.Vector2` object is a tuple of length\n2 containing the `x` and `y` attributes.\n\n`vec.Vector2` objects also support the *boolean* protocol; you may use them\nwith boolean operators, and you may call `bool()` on them.  When used in\na boolean context, the zero vector evaluates to `False`, and all other\nvectors evaluate to `True`.\n\n`vec.Vector2` objects are hashable.\n\n`vec.Vector2` objects support the following operators:\n\n* `v1 + v2` adds the two vectors together.\n* `v1 - v2` subtracts the right vector from the left vector.\n* `v1 * scalar` mulitplies the vector by a scalar amount, equivalent to `v1.scale(scalar)`.\n* `v1 / scalar` divides the vector by a scalar amount.\n* `+v1` is exactly the same as `v1`.\n* `-v1` returns the opposite of `v1`, such that `v1 + (-v1)` should be the zero vector.\n   (This may not always be the case due to compounding floating-point errors.)\n* `v1 == v2` is `True` if the two vectors are *exactly* the same, and `False` otherwise.\n* `v1 != v2` is `False` if the two vectors are *exactly* the same, and `True` otherwise.\n\n`vec.Vector2` objects support the following methods:\n\n`vec.Vector2.scaled(scalar)`\n\nReturns a new `vec.Vector2` object, equivalent to the original vector multiplied by that scalar.\n\n`vec.Vector2.scaled_to_length(r)`\n\nReturns a new `vec.Vector2` object, equivalent to the original vector with its length set to `r`.\n\n`vec.Vector2.normalized()`\n\nReturns a new `vec.Vector2` object, equivalent to the original vector scaled to length 1.\n\n`vec.Vector2.rotated(theta)`\n\nReturns a new `vec.Vector2` object, equal to the original vector rotated by `theta` radians.\n\n`vec.Vector2.dot(other)`\n\nReturns the \"dot product\" `self` • `other`.  This result is a scalar value, not a vector.\n\n`vec.Vector2.cross(other)`\n\nReturns the \"cross product\" `self` ⨯ `other`.  This result is a scalar value, not a vector.\n\n*Note:* technically, there is no \"cross product\" defined for 2-dimensional vectors.\nIn actuality this returns the \"perpendicular dot product\", or \"perp dot product\",\nof the two vectors, because that's what people actually want when they ask for the \"cross\nproduct\" of two 2D vectors.\n\n`vec.Vector2.polar()`\n\nReturns a 2-tuple of `(self.r, self.theta)`.\n\n`vec.Vector2.lerp(other, ratio)`\n\nReturns a vector representing a linear interpolation between `self` and `other`, according\nto the scalar ratio `ratio`.  `ratio` should be a value between (and including) `0` and `1`.\nIf `ratio` is `0`, this returns `self`.  If `ratio` is `1`, this returns `other`.\nIf `ratio` is `0.4`, this returns `(self * 0.6) + (other * 0.4)`.\n\n`vec.vector2_zero`\n\nThe immutable, eternal \"zero\" `vec.Vector2` vector object.\n`vec` guarantees that every zero vector is a reference to this object:\n\n    >>> v = vec.Vector2(0, 0)\n    >>> v is vec.vector2_zero\n    True\n\nMathematically-speaking, the zero vector when expressed in polar coordinates\ndoesn't have a defined angle.  Therefore `vec` defines its zero vector as\nhaving an angle of `None`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/larryhastings/vec/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vec",
    "package_url": "https://pypi.org/project/vec/",
    "platform": "",
    "project_url": "https://pypi.org/project/vec/",
    "project_urls": {
      "Homepage": "https://github.com/larryhastings/vec/"
    },
    "release_url": "https://pypi.org/project/vec/0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A collection of classes for vectors and rects",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6856030,
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9298cba1a1146278b42451c52ea2018a6cb34bf330f2c2407ab95f869283a516",
          "md5": "d26593bc3f095e3b76ddc2602378f99d",
          "sha256": "814a89fd854df46ffe0515db928225fe580024d477f1a5c1aa7e6f4dcf6c15f2"
        },
        "downloads": -1,
        "filename": "vec-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d26593bc3f095e3b76ddc2602378f99d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10448,
        "upload_time": "2020-03-21T15:45:13",
        "upload_time_iso_8601": "2020-03-21T15:45:13.334516Z",
        "url": "https://files.pythonhosted.org/packages/92/98/cba1a1146278b42451c52ea2018a6cb34bf330f2c2407ab95f869283a516/vec-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "690b3fd6efa6919d1197de8d9be8f8493c51639e3bdd48d7363fb5f43f86dc22",
          "md5": "5b516e0ff9e9f55b6a8af60fc20aab3c",
          "sha256": "6bc6b6b1fb67fb7391683b53214d1238843ffa7865f5bcab8262abd89c231b48"
        },
        "downloads": -1,
        "filename": "vec-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5b516e0ff9e9f55b6a8af60fc20aab3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10616,
        "upload_time": "2020-03-21T15:45:17",
        "upload_time_iso_8601": "2020-03-21T15:45:17.475617Z",
        "url": "https://files.pythonhosted.org/packages/69/0b/3fd6efa6919d1197de8d9be8f8493c51639e3bdd48d7363fb5f43f86dc22/vec-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9298cba1a1146278b42451c52ea2018a6cb34bf330f2c2407ab95f869283a516",
        "md5": "d26593bc3f095e3b76ddc2602378f99d",
        "sha256": "814a89fd854df46ffe0515db928225fe580024d477f1a5c1aa7e6f4dcf6c15f2"
      },
      "downloads": -1,
      "filename": "vec-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d26593bc3f095e3b76ddc2602378f99d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10448,
      "upload_time": "2020-03-21T15:45:13",
      "upload_time_iso_8601": "2020-03-21T15:45:13.334516Z",
      "url": "https://files.pythonhosted.org/packages/92/98/cba1a1146278b42451c52ea2018a6cb34bf330f2c2407ab95f869283a516/vec-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "690b3fd6efa6919d1197de8d9be8f8493c51639e3bdd48d7363fb5f43f86dc22",
        "md5": "5b516e0ff9e9f55b6a8af60fc20aab3c",
        "sha256": "6bc6b6b1fb67fb7391683b53214d1238843ffa7865f5bcab8262abd89c231b48"
      },
      "downloads": -1,
      "filename": "vec-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5b516e0ff9e9f55b6a8af60fc20aab3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10616,
      "upload_time": "2020-03-21T15:45:17",
      "upload_time_iso_8601": "2020-03-21T15:45:17.475617Z",
      "url": "https://files.pythonhosted.org/packages/69/0b/3fd6efa6919d1197de8d9be8f8493c51639e3bdd48d7363fb5f43f86dc22/vec-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}