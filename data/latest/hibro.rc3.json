{
  "info": {
    "author": "David Straub",
    "author_email": "straub@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# HiBro: a standalone history browser for Home Assistant\n\n\nHiBro is a standalone history browser for Home Assistant based on [Plotly Dash](https://plot.ly/dash/).\nIt displays graphs based on a history database and allows to specify the graphs to be shown with a YAML cofiguration file similar in format to Home Assistant configuration files.\n\nIn addition to plain time series graphs, it also allows to apply basic statistical operations to the time series, like mean (or max or min) values in specified time intervals (e.g. hourly or daily). Box plots showing statistics about the value of a sensor and pie charts that can be used to monitor energy consumption, for instance, are also supported.\n\nFurther graph types are straightforward to add using Dash & Plotly. Pull requests are welcome.\n\n![](hibro.png)\n\n\n## Installation\n\n```\npython3 -m pip install --user hibro\n```\n\n## Quick start\n\nGenerate a file named `hibro-config.yaml` and fill it following the instructions below. Minimal example:\n\n```yaml\ndb_url: \"sqlite:////path/to/home-assistant_v2.db\"\nelements:\n  - type: line\n    entities:\n      - sensor.some_entity\n```\n\nThen run `hibro` (or `python3 -m hibro`) and access the dashboard at http://127.0.0.1:8456.\n\n## Configuration\n\nA full configuration file looks like:\n\n\n```yaml\ndb_url: ...\ntitle: ...\nelements:\n  - type: ...\n    entities:\n      - ...\n      ...\n  - type: ...\n    entities:\n      - ...\n      ...\n  ...\n```\n\nTop-level keys:\n\n- `db_url: ` (string, required) A database URI. See the [Home Assistant recorder docs](https://www.home-assistant.io/integrations/recorder/) for details.\n- `title: ` (string, optional) A title overriding the default one.\n- `elements: ` (list, required) The list of graphs.\n\nThere are currently three valid values for \"type\": `line`, `box`, or `pie`.\n\nThe items in the entity lists can either be strings or mappings to specify further options:\n\n```yaml\nentities:\n  - sensor.my_sensor\n  - entity: sensor.my_sensor\n    resample: D\n```\nLike in this example, you can mix both styles in a single list.\n\n### Line charts\n\nA line chart (`type: line`) by default (when given a list of entities) shows a line chart of the entities' states for the past 24 hours. This can be customized by specifying the list items as mappings rather than strings with the following possible keys:\n\n- `duration: ` (optional, mapping) Specify the time interval (from now to the past) for which to display data. Defaults to 24 hours. values have to be specified by a mapping, e.g.:\n```yaml\nduration:\n  hours: 3\n```\n(also `days` or `minutes` work).\n- `attribute: ` (optional, string) Specify a numerical attribute to plot instead of the state itself.\n- `resample: ` (optional, string) Specify a time interval to resample the data to. This is useful for instance when looking at finely grained data (seconds or minutes) over a long time period (days). The strings must be in the format of pandas time offset strings, see [the documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects) for details. Examples: `D` for daily, `H` for hourly.\n- `aggregate: ` (optional, string) When resampling data, this is the aggregate function applied to each interval. Defaults to `mean`, i.e. the data will be averaged over the interval. Possible other values include `median`, `min` or `max` (with obvious meanings) or `ptp` (\"peak to peak\", the difference between maximum and minimum).\n\nFull example:\n\n```yaml\n- type: line\n  entities:\n    - entity: climate.living_room\n      attribute: current_temperature\n      resample: '15min'\n      aggregate: max\n      duration:\n        hours: 12\n    - sensor.outdoor_temperature\n```\n\n\n### Box plots\n\nBox plots (`type: box`) show the median and quartiles of numerical sensor data for the entire time period. It supports the `attribute` and `duration` arguments just as line charts, but resampling and aggregation does not make sense.\n\nFull example:\n\n```yaml\n- type: box\n  entities:\n    - entity: climate.living_room\n      attribute: current_temperature\n      duration:\n        hours: 12\n    - sensor.outdoor_temperature\n```\n\n### Pie charts\n\nPie charts (`type: pie`) show aggregated values of numerical sensors for the entire time period as pieces of a pie. This makes sense especially for energy sensors to display the fraction of total energy consumed by a device.\nPie charts also have `attribute` and `duration` options (but no `resample` option). The `aggregate` option in this case refers to the function applied over the entire time period. By default, this is `ptp` (peak to peak), i.e. the difference between the minimum and maximum value. This makes sense for energy sensors where it returns the total energy consumed.\n\nFull example:\n\n```yaml\n- type: pie\n  entities:\n    - entity: sensor.some_device\n      attribute: power_consumption\n      duration:\n        hours: 12\n      aggregate: ptp\n    - sensor.some_device_energy\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DavidMStraub/HiBro",
    "keywords": "hibro",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hibro",
    "package_url": "https://pypi.org/project/hibro/",
    "platform": "",
    "project_url": "https://pypi.org/project/hibro/",
    "project_urls": {
      "Homepage": "https://github.com/DavidMStraub/HiBro"
    },
    "release_url": "https://pypi.org/project/hibro/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Standalone history browser for Home Assistant",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7435415,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62d8bd8b6e7a1b34b54b2d09ca6b8a67a283ea58fd1864ef327ed345810d804c",
          "md5": "5837be638af3b12dcdfa99f65ba4223e",
          "sha256": "a78eac8a0a2fda3e7c60ab86d315f4034c23b63354d3be1f8dd5cf9ff4ed685d"
        },
        "downloads": -1,
        "filename": "hibro-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5837be638af3b12dcdfa99f65ba4223e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7533,
        "upload_time": "2019-12-30T10:24:33",
        "upload_time_iso_8601": "2019-12-30T10:24:33.709665Z",
        "url": "https://files.pythonhosted.org/packages/62/d8/bd8b6e7a1b34b54b2d09ca6b8a67a283ea58fd1864ef327ed345810d804c/hibro-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "294459f6a345bae466da298bc8131a84105c418284b59ff2174a9c5a77f854d1",
          "md5": "aaab7f583cab7d1b1b5570bfa1048473",
          "sha256": "61727daa8611e1ce320c856ad70852323cbcfb62f109b282cfeed6e554e339c8"
        },
        "downloads": -1,
        "filename": "hibro-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aaab7f583cab7d1b1b5570bfa1048473",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7672,
        "upload_time": "2020-01-01T19:20:35",
        "upload_time_iso_8601": "2020-01-01T19:20:35.192878Z",
        "url": "https://files.pythonhosted.org/packages/29/44/59f6a345bae466da298bc8131a84105c418284b59ff2174a9c5a77f854d1/hibro-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3509d9fafbafe4cea8073895aa4e78343662b38017646ca1c35425df3d62a87f",
          "md5": "ae5595d3279eaa2a5d2e775d3c76fda0",
          "sha256": "fa22869bbb3db2ffd937bbc5505b981b4a8ab0c3f96e1c98e113890ea49fef58"
        },
        "downloads": -1,
        "filename": "hibro-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae5595d3279eaa2a5d2e775d3c76fda0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10127,
        "upload_time": "2020-06-09T18:49:23",
        "upload_time_iso_8601": "2020-06-09T18:49:23.919663Z",
        "url": "https://files.pythonhosted.org/packages/35/09/d9fafbafe4cea8073895aa4e78343662b38017646ca1c35425df3d62a87f/hibro-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3509d9fafbafe4cea8073895aa4e78343662b38017646ca1c35425df3d62a87f",
        "md5": "ae5595d3279eaa2a5d2e775d3c76fda0",
        "sha256": "fa22869bbb3db2ffd937bbc5505b981b4a8ab0c3f96e1c98e113890ea49fef58"
      },
      "downloads": -1,
      "filename": "hibro-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ae5595d3279eaa2a5d2e775d3c76fda0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10127,
      "upload_time": "2020-06-09T18:49:23",
      "upload_time_iso_8601": "2020-06-09T18:49:23.919663Z",
      "url": "https://files.pythonhosted.org/packages/35/09/d9fafbafe4cea8073895aa4e78343662b38017646ca1c35425df3d62a87f/hibro-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}