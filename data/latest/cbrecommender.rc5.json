{
  "info": {
    "author": "",
    "author_email": "Akash S Panickar <akashsabu@ymail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# cbrecommender\n\n[![Downloads](https://static.pepy.tech/personalized-badge/cbrecommender?period=total&units=international_system&left_color=grey&right_color=green&left_text=Downloads)](https://pepy.tech/project/cbrecommender)\n[![Downloads](https://static.pepy.tech/personalized-badge/cbrecommender?period=month&units=international_system&left_color=grey&right_color=blue&left_text=Downloads/Month)](https://pepy.tech/project/cbrecommender)\n[![Downloads](https://static.pepy.tech/personalized-badge/cbrecommender?period=week&units=international_system&left_color=grey&right_color=orange&left_text=Downloads/Week)](https://pepy.tech/project/cbrecommender)\n\ncbrecommender is a Python library for implementing Content-Based Recommendation Engines with ease!\n\n**A Content-Based Recommender** is a form of **Personalized recommendation System** that maintains a user profile and tries to match the items with the taste profile of a user before presenting them as a recommendation to the user.\n\n`The key ideas are:`\n\n> - Model items according to relevant attributes derived from the content.\n\n> - Develop a user profile either from their implicit actions (clicks, time spend on a video etc.), explicit actions(purchase, rating etc.) or by combining both.\n\n> - Use these profiles to provide recommendations.\n\n## Installation\n\nInstall from pypi with `pip` :\n\n```shell\npip install cbrecommender\n```\n\n## Usage\n\n**1. Importing and initializing :**\n\n```python\nfrom cbrecommender import CBRecommender\n\nrecommender = CBRecommender()\n```\n\n**2. Creating _Item Profiles_ :**\n\nIn Content-Based Recommender, we must build a profile for each item, which will represent the important characteristics of that item.\n\n```python\nitem_profiles = recommender.create_item_profile(features)\n```\n\n- `features: DataFrame` must be relevant attributes of the item that signifies the user's preferences. For example: movie genres, news topics, post tags etc.\n\n- `create_item_profile() -> DataFrame` will return the item_profiles created from the supplied features.\n\n**3. Creating _User Profile_ :**\n\n```python\nuser_profile = recommender.fit(train_item_profiles, scores)\n```\n\n- `fit() -> DataFrame` is where we extract user preferences from the item-profiles and associated scores, and then construct the user-profile.\n\n- `train_item_profiles: DataFrame` must be a subset of the item-profiles created at _step 2_. For example, it can be the item-profiles of the movies already watched by the user (watch history).\n\n- `scores: List[float]` must be a list of some measure corresponding to each item in _train_item_profiles_, denoting how much the user liked that item. For example: Rating for a watched movie, song etc.\n\n**4. Get recommendations based on _User Profile_ :**\n\n```python\nrecommendations = recommender.recommend(test_items, test_item_profiles, min_score, limit)\n```\n\n- `test_items: DataFrame` must be those items that the user have not used for training and from which we need recommendations. For example: Unwatched movies.\n\n- `test_item_profiles: DataFrame` must be the item-profiles of _test_items_.\n\n- `min_score: float` must be a numerical value (1-10) that specifies the minimum score for recommending items. Default is 7.5.\n\n- `limit: int` must be an integer that denotes the number of items to recommended.\n\n## Example\n\n```python\nfrom cbrecommender import CBRecommender\nfrom pandas import DataFrame\n```\n\n```python\ndata = DataFrame(\n{'movie':['Endgame','Avatar','Titanic','Infinity War','Jurassic World','Black Panther',\n          'Harry Potter-II','The Last Jedi'],\n 'genre':['Action,Adventure,Drama','Action,Adventure,Fantasy','Drama,Romance',\n          'Action,Adventure,Sci-Fi','Action,Adventure,Sci-Fi','Action,Adventure,Sci-Fi',\n          'Adventure,Drama,Fantasy','Action,Adventure,Fantasy']\n})\nprint(data)\n```\n\n| movie           | genre                    |\n| --------------- | ------------------------ |\n| Endgame         | Action,Adventure,Drama   |\n| Avatar          | Action,Adventure,Fantasy |\n| Titanic         | Drama,Romance            |\n| Infinity War    | Action,Adventure,Sci-Fi  |\n| Jurassic World  | Action,Adventure,Sci-Fi  |\n| Black Panther   | Action,Adventure,Sci-Fi  |\n| Harry Potter-II | Adventure,Drama,Fantasy  |\n| The Last Jedi   | Action,Adventure,Fantasy |\n\n```python\nrecommender = CBRecommender()\n\n# We are considering genre alone as the feature. You can include other features as well.\nmovie_profiles = recommender.create_item_profile(data[['genre']])\nprint(movie_profiles)\n```\n\n| action | adventure | drama | fantasy | romance | sci-fi |\n| ------ | --------- | ----- | ------- | ------- | ------ |\n| 1      | 1         | 1     | 0       | 0       | 0      |\n| 1      | 1         | 0     | 1       | 0       | 0      |\n| 0      | 0         | 1     | 0       | 1       | 0      |\n| 1      | 1         | 0     | 0       | 0       | 1      |\n| 1      | 1         | 0     | 0       | 0       | 1      |\n| 1      | 1         | 0     | 0       | 0       | 1      |\n| 0      | 1         | 1     | 1       | 0       | 0      |\n| 1      | 1         | 0     | 1       | 0       | 0      |\n\n```python\n# Consider we had watched the first 4 movies. So we use it as training data to extract preferences.\n# We use the user rating for the watched movies as the preference score.\nwatched_movie_profiles = movie_profiles.iloc[:4, :]\nwatched_movie_ratings = [8.5,7.8,7.8,8.5]\n\nuser_profile = recommender.fit(watched_movie_profiles, watched_movie_ratings)\nprint(recommender.user_profile)\n```\n\n| action | adventure | drama  | fantasy | romance | sci-fi |\n| ------ | --------- | ------ | ------- | ------- | ------ |\n| 0.2755 | 0.2755    | 0.1811 | 0.0866  | 0.0866  | 0.0944 |\n\n```python\n# We use the remaining 4 unwatched movies as test data to get recommendations from.\nunwatched_movies = data[['movie']].iloc[4:,:]\nunwatched_movie_profiles = movie_profiles.iloc[4:,:]\n\n# Recommend top 3 movies with minimum expected rating of 5.0\nrecommendations = recommender.recommend(unwatched_movies, unwatched_movie_profiles, 5.0, 3)\nprint(recommendations)\n```\n\n| item           | expected score |\n| -------------- | -------------- |\n| Jurassic World | 6.45           |\n| Black Panther  | 6.45           |\n| The Last Jedi  | 6.37           |\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\n[MIT License ](https://github.com/mochatek/cbrecommender/blob/master/LICENSE.txt)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "content-based-recommender,recommendation-engine",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cbrecommender",
    "package_url": "https://pypi.org/project/cbrecommender/",
    "platform": null,
    "project_url": "https://pypi.org/project/cbrecommender/",
    "project_urls": {
      "Homepage": "https://github.com/mochatek/cbrecommender"
    },
    "release_url": "https://pypi.org/project/cbrecommender/1.1.1/",
    "requires_dist": [
      "pandas"
    ],
    "requires_python": ">=3.7",
    "summary": "A library for implementing Content-Based Recommendation Engines with ease!",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14596809,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19cb76c48a081a678fc87b685a286e1a179906c4df92c448dbe682aa2a7626f9",
          "md5": "36df3ccaf6409d66728570204c00698e",
          "sha256": "abe6eba71a9a7c24397d7d7ec573c4abad8596e4cfb3e696f57c1b9099b20d30"
        },
        "downloads": -1,
        "filename": "cbrecommender-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "36df3ccaf6409d66728570204c00698e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3468,
        "upload_time": "2020-04-14T03:57:04",
        "upload_time_iso_8601": "2020-04-14T03:57:04.750301Z",
        "url": "https://files.pythonhosted.org/packages/19/cb/76c48a081a678fc87b685a286e1a179906c4df92c448dbe682aa2a7626f9/cbrecommender-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b76fc5726b0c2af723ad4649ea66afad56841e3a8ac6586c532b819665cffa7d",
          "md5": "0a60ab41b7a7cc0105645382f2f8680f",
          "sha256": "0cbb747cca387c3f1ad4e4555c8137df8834d39c0af3a5754b5c74da345544aa"
        },
        "downloads": -1,
        "filename": "cbrecommender-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0a60ab41b7a7cc0105645382f2f8680f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3454,
        "upload_time": "2020-04-14T04:03:09",
        "upload_time_iso_8601": "2020-04-14T04:03:09.246934Z",
        "url": "https://files.pythonhosted.org/packages/b7/6f/c5726b0c2af723ad4649ea66afad56841e3a8ac6586c532b819665cffa7d/cbrecommender-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6e2af386763f8cfe5f74cdde278146416f12209c80f777176eb3e3a1a64eac0",
          "md5": "c9f15f1589e5ed9d16d4f1e0ed3e52e0",
          "sha256": "d6b66a4ead963aa5f985ffed4038cefc738c01576df113bb925a3da252cb53a3"
        },
        "downloads": -1,
        "filename": "cbrecommender-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9f15f1589e5ed9d16d4f1e0ed3e52e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6175,
        "upload_time": "2022-07-29T08:11:12",
        "upload_time_iso_8601": "2022-07-29T08:11:12.644818Z",
        "url": "https://files.pythonhosted.org/packages/b6/e2/af386763f8cfe5f74cdde278146416f12209c80f777176eb3e3a1a64eac0/cbrecommender-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a0fac167a6c3d532965bbe2b58f40521e2d03dfc06055301363474751f14039",
          "md5": "fe40ca61e893063937aa340f89a748f5",
          "sha256": "1ff136d046a39593a6617decaf4a2456ddc3d8f02370563b1b2a612a89a75c4b"
        },
        "downloads": -1,
        "filename": "cbrecommender-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fe40ca61e893063937aa340f89a748f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5764,
        "upload_time": "2022-07-29T08:11:14",
        "upload_time_iso_8601": "2022-07-29T08:11:14.474616Z",
        "url": "https://files.pythonhosted.org/packages/3a/0f/ac167a6c3d532965bbe2b58f40521e2d03dfc06055301363474751f14039/cbrecommender-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7293ab36002e37a7b2104f6defcd9988e20466030c441baa1af759d0b18dc19",
          "md5": "731c02bd113d9319f197c6b7d35bdfde",
          "sha256": "5fd1229a84fedcd0eb2197c1d83062af75f0eafd2aaaa44f4b05b11d5e16c792"
        },
        "downloads": -1,
        "filename": "cbrecommender-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "731c02bd113d9319f197c6b7d35bdfde",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6208,
        "upload_time": "2022-07-29T14:57:43",
        "upload_time_iso_8601": "2022-07-29T14:57:43.341434Z",
        "url": "https://files.pythonhosted.org/packages/d7/29/3ab36002e37a7b2104f6defcd9988e20466030c441baa1af759d0b18dc19/cbrecommender-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "127cfd9160bf8de13a0809640a08a61302c2ee27bda9e5c94e6062a5590e68b6",
          "md5": "66d709fcc5c32d72743674dc0a414626",
          "sha256": "609a68a0b7e2d11fbb0f9ea349db9e6c6871cab613f293d2a44a6564a5c0c827"
        },
        "downloads": -1,
        "filename": "cbrecommender-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "66d709fcc5c32d72743674dc0a414626",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5811,
        "upload_time": "2022-07-29T14:57:44",
        "upload_time_iso_8601": "2022-07-29T14:57:44.716636Z",
        "url": "https://files.pythonhosted.org/packages/12/7c/fd9160bf8de13a0809640a08a61302c2ee27bda9e5c94e6062a5590e68b6/cbrecommender-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af03c6c6378b3be99dfd8cb11c65578c8b6d1ccb8987e8de12cce8012cbd12e1",
          "md5": "81df54dd09b2305667998381750dc1f1",
          "sha256": "978e4eeb892036e849900bee7bfda78fff1adc0a865421004f9fc628a83c6e75"
        },
        "downloads": -1,
        "filename": "cbrecommender-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81df54dd09b2305667998381750dc1f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6630,
        "upload_time": "2022-07-30T03:39:05",
        "upload_time_iso_8601": "2022-07-30T03:39:05.601845Z",
        "url": "https://files.pythonhosted.org/packages/af/03/c6c6378b3be99dfd8cb11c65578c8b6d1ccb8987e8de12cce8012cbd12e1/cbrecommender-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3010b6692b7ec9d681f4948dd0f1cb055af0a2a99f4e66762a403b9312299c7",
          "md5": "0cd9c59cd7134917451a1bae3d526509",
          "sha256": "7ed6d6db8a54fe314720a672a42cf51d7abc54404dd9fe0eab49bd391ae2f6de"
        },
        "downloads": -1,
        "filename": "cbrecommender-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0cd9c59cd7134917451a1bae3d526509",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6254,
        "upload_time": "2022-07-30T03:39:07",
        "upload_time_iso_8601": "2022-07-30T03:39:07.558227Z",
        "url": "https://files.pythonhosted.org/packages/a3/01/0b6692b7ec9d681f4948dd0f1cb055af0a2a99f4e66762a403b9312299c7/cbrecommender-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af03c6c6378b3be99dfd8cb11c65578c8b6d1ccb8987e8de12cce8012cbd12e1",
        "md5": "81df54dd09b2305667998381750dc1f1",
        "sha256": "978e4eeb892036e849900bee7bfda78fff1adc0a865421004f9fc628a83c6e75"
      },
      "downloads": -1,
      "filename": "cbrecommender-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81df54dd09b2305667998381750dc1f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6630,
      "upload_time": "2022-07-30T03:39:05",
      "upload_time_iso_8601": "2022-07-30T03:39:05.601845Z",
      "url": "https://files.pythonhosted.org/packages/af/03/c6c6378b3be99dfd8cb11c65578c8b6d1ccb8987e8de12cce8012cbd12e1/cbrecommender-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3010b6692b7ec9d681f4948dd0f1cb055af0a2a99f4e66762a403b9312299c7",
        "md5": "0cd9c59cd7134917451a1bae3d526509",
        "sha256": "7ed6d6db8a54fe314720a672a42cf51d7abc54404dd9fe0eab49bd391ae2f6de"
      },
      "downloads": -1,
      "filename": "cbrecommender-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0cd9c59cd7134917451a1bae3d526509",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6254,
      "upload_time": "2022-07-30T03:39:07",
      "upload_time_iso_8601": "2022-07-30T03:39:07.558227Z",
      "url": "https://files.pythonhosted.org/packages/a3/01/0b6692b7ec9d681f4948dd0f1cb055af0a2a99f4e66762a403b9312299c7/cbrecommender-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}