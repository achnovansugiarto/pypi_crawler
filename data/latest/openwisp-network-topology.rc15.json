{
  "info": {
    "author": "OpenWISP",
    "author_email": "support@openwisp.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: System :: Networking"
    ],
    "description": "=========================\nopenwisp-network-topology\n=========================\n\n.. image:: https://github.com/openwisp/openwisp-network-topology/workflows/OpenWISP%20Network%20Topology%20CI%20Build/badge.svg?branch=master\n   :target: https://github.com/openwisp/openwisp-network-topology/actions?query=OpenWISP+Network+Topology+CI+Build\n   :alt: CI build status\n\n.. image:: https://coveralls.io/repos/github/openwisp/openwisp-network-topology/badge.svg\n   :target: https://coveralls.io/github/openwisp/openwisp-network-topology\n   :alt: Test Coverage\n\n.. image:: https://img.shields.io/librariesio/github/openwisp/openwisp-network-topology\n   :target: https://libraries.io/github/openwisp/openwisp-network-topology#repository_dependencies\n   :alt: Dependency monitoring\n\n.. image:: https://img.shields.io/gitter/room/nwjs/nw.js.svg\n   :target: https://gitter.im/openwisp/general\n   :alt: chat\n\n.. image:: https://badge.fury.io/py/openwisp-network-topology.svg\n   :target: http://badge.fury.io/py/openwisp-network-topology\n   :alt: Pypi Version\n\n.. image:: https://pepy.tech/badge/openwisp-network-topology\n   :target: https://pepy.tech/project/openwisp-network-topology\n   :alt: downloads\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://pypi.org/project/black/\n   :alt: code style: black\n\n.. image:: https://github.com/openwisp/openwisp-network-topology/raw/docs/docs/demo_network_topology.gif\n   :alt: Features Highlights\n\nOpenWISP Network Topology is a network topology collector and visualizer\nweb application and API, it allows to collect network topology data from different\nnetworking software (dynamic mesh routing protocols, OpenVPN), store it,\nvisualize it, edit its details, it also provides hooks (a.k.a\n`Django signals <https://docs.djangoproject.com/en/3.1/topics/signals/>`_)\nto execute code when the status of a link changes.\n\nWhen used in conjunction with\n`OpenWISP Controller <https://github.com/openwisp/openwisp-controller>`_\nand\n`OpenWISP Monitoring <https://github.com/openwisp/openwisp-monitoring>`_,\nit\n`makes the monitoring system faster in detecting change to the network <#integration-with-openwisp-controller-and-openwisp-monitoring>`_.\n\nOpenWISP is not only an application designed for end users, but can also be\nused as a framework on which custom network automation solutions can be built\non top of its building blocks.\n\nOther popular building blocks that are part of the OpenWISP ecosystem are:\n\n- `openwisp-controller <https://github.com/openwisp/openwisp-controller>`_:\n  network and WiFi controller: provisioning, configuration management,\n  x509 PKI management and more; works on OpenWRT, but designed to work also on other systems.\n- `openwisp-monitoring <https://github.com/openwisp/openwisp-monitoring>`_:\n  provides device status monitoring, collection of metrics, charts, alerts,\n  possibility to define custom checks\n- `openwisp-firmware-upgrader <https://github.com/openwisp/openwisp-firmware-upgrader>`_:\n  automated firmware upgrades (single device or mass network upgrades)\n- `openwisp-radius <https://github.com/openwisp/openwisp-radius>`_:\n  based on FreeRADIUS, allows to implement network access authentication systems like\n  802.1x WPA2 Enterprise, captive portal authentication, Hotspot 2.0 (802.11u)\n- `openwisp-ipam <https://github.com/openwisp/openwisp-ipam>`_:\n  it allows to manage the IP address space of networks\n\n**For a more complete overview of the OpenWISP modules and architecture**,\nsee the\n`OpenWISP Architecture Overview\n<https://openwisp.io/docs/general/architecture.html>`_.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp2-docs/master/assets/design/openwisp-logo-black.svg\n  :target: http://openwisp.org\n  :alt: OpenWISP\n\n**Want to help OpenWISP?** `Find out how to help us grow here\n<http://openwisp.io/docs/general/help-us.html>`_.\n\n------------\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 3\n\n------------\n\nAvailable features\n------------------\n\n* **network topology collector** supporting different formats:\n    - NetJSON NetworkGraph\n    - OLSR (jsoninfo/txtinfo)\n    - batman-adv (jsondoc/txtinfo)\n    - BMX6 (q6m)\n    - CNML 1.0\n    - OpenVPN\n    - additional formats can be added by\n      `writing custom netdiff parsers <https://github.com/openwisp/netdiff#parsers>`_\n* **network topology visualizer** based on\n  `netjsongraph.js <https://github.com/openwisp/netjsongraph.js>`_\n* `REST API <#rest-api>`_ that exposes data in\n  `NetJSON <http://netjson.org>`__ *NetworkGraph* format\n* **admin interface** that allows to easily manage, audit, visualize and\n  debug topologies and their relative data (nodes, links)\n* `RECEIVE network topology data <#receive-strategy>`_ from multiple nodes\n* **topology history**: allows saving daily snapshots of each topology that\n  can be viewed in the frontend\n* **faster monitoring**: `integrates with OpenWISP Controller and OpenWISP Monitoring\n  <#integration-with-openwisp-controller-and-openwisp-monitoring>`_\n  for faster detection of critical events in the network\n\nInstallation instructions\n-------------------------\n\nDeploy it in production\n^^^^^^^^^^^^^^^^^^^^^^^\n\nAn automated installer is provided by the `OpenWISP <http://openwisp.org>`_ project:\n`ansible-openwisp2 <https://github.com/openwisp/ansible-openwisp2>`_.\n\nEnsure to follow the instructions explained in the following section: `Enabling the network topology\nmodule <https://github.com/openwisp/ansible-openwisp2#enabling-the-network-topology-module>`_.\n\nInstall stable version from pypi\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install openwisp-network-topology\n\nInstall development version\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInstall tarball:\n\n.. code-block:: shell\n\n    pip install https://github.com/openwisp/openwisp-network-topology/tarball/master\n\nAlternatively you can install via pip using git:\n\n.. code-block:: shell\n\n    pip install -e git+git://github.com/openwisp/openwisp-network-topology#egg=openwisp-network-topology\n\nIf you want to contribute, install your cloned fork:\n\n.. code-block:: shell\n\n    git clone git@github.com:<your_fork>/openwisp-network-topology.git\n    cd openwisp-network-topology\n    python setup.py develop\n\nInstalling for development\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInstall sqlite:\n\n.. code-block:: shell\n\n    sudo apt-get install sqlite3 libsqlite3-dev\n\nInstall your forked repo:\n\n.. code-block:: shell\n\n    git clone git://github.com/<your_fork>/openwisp-network-topology\n    cd openwisp-network-topology/\n    python setup.py develop\n\nInstall test requirements:\n\n.. code-block:: shell\n\n    pip install -r requirements-test.txt\n\nCreate database:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nYou can access the admin interface at http://127.0.0.1:8000/admin/.\n\nRun tests with:\n\n.. code-block:: shell\n\n    ./runtests.py\n\nRun qa tests:\n\n.. code-block:: shell\n\n    ./run-qa-checks\n\nSetup (integrate in an existing django project)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd ``openwisp_network_topology`` and its dependencies to ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # other apps\n        'openwisp_network_topology',\n        'openwisp_users.accounts',\n        'allauth',\n        'allauth.account',\n        'openwisp_users',\n        'rest_framework',\n    ]\n\nAdd the URLs to your main ``urls.py``:\n\n.. code-block:: python\n\n    from django.contrib import admin\n\n    urlpatterns = [\n        # ... other urls in your project ...\n        path('', include('openwisp_network_topology.urls')),\n        path('admin/', admin.site.urls),\n    ]\n\nThen run:\n\n.. code-block:: shell\n\n    ./manage.py migrate\n\nQuickstart Guide\n----------------\n\nThis module works by periodically collecting the network topology\ngraph data of the `supported networking software or formats <#available-features>`_.\nThe data has to be either fetched by the application or received in POST API\nrequests, therefore after deploying the application, additional steps are required\nto make the data collection and visualization work, read on to find out how.\n\nCreating a topology\n^^^^^^^^^^^^^^^^^^^\n\n.. image:: https://github.com/openwisp/openwisp-network-topology/raw/docs/docs/quickstart-topology.gif\n\n1. Create a topology object by going to *Network Topology* > *Topologies*\n   > *Add topology*.\n2. Give an appropriate label to the topology.\n3. Select the *topology format* from the dropdown menu. The *topology format*\n   determines which parser should be used to process topology data.\n4. Select the *Strategy* for updating this topology.\n\n   - If you are using `FETCH strategy <#fetch-strategy>`_, then enter the\n     URL for fetching topology data in the *Url* field.\n   - If you are using `RECEIVE strategy <#receive-strategy>`_, you will get the\n     *URL* for sending topology data. The *RECEIVE* strategy provides an\n     additional field *expiration time*. This can be used to add delay in\n     marking missing links as down.\n\nSending data for topology with RECEIVE strategy\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. image:: https://github.com/openwisp/openwisp-network-topology/raw/docs/docs/quickstart-receive.gif\n\n1. Copy the *URL* generated by OpenWISP for sending the topology data.\n\n   E.g., in our case the URL is ``http://127.0.0.1:8000/api/v1/network-topology/topology/d17e539a-1793-4be2-80a4-c305eca64fd8/receive/?key=cMGsvio8q0L0BGLd5twiFHQOqIEKI423``.\n\n2. Create a script (eg: ``/opt/send-topology.sh``) which sends the topology\n   data using ``POST``, in the example script below we are sending the\n   status log data of OpenVPN but the same code can be applied to other\n   formats by replacing ``cat /var/log/openvpn/tun0.stats`` with the\n   actual command which returns the network topology output:\n\n.. code-block:: shell\n\n    #!/bin/bash\n\n    # Get OpenVPN topology data from OpenVPN management interface\n    cat /var/log/openvpn/tun0.stats |\n        # Upload the topology data to OpenWISP\n        curl -s -X POST \\\n            --data-binary @- \\\n            --header \"Content-Type: text/plain\" \\\n            http://127.0.0.1:8000/api/v1/network-topology/topology/d17e539a-1793-4be2-80a4-c305eca64fd8/receive/?key=cMGsvio8q0L0BGLd5twiFHQOqIEKI423\n\n3. Add the ``/opt/send-topology.sh`` script created in the previous step\n   to the crontab, here's an example which sends the topology data every 5 minutes:\n\n.. code-block:: shell\n\n    # flag script as executable\n    chmod +x /opt/send-topology.sh\n    # open crontab\n    crontab -e\n\n    ## Add the following line and save\n\n    echo */5 * * * * /opt/send-topology.sh\n\n4. Once the steps above are completed, you should see nodes and links\n   being created automatically, you can see the network topology graph\n   from the admin page of the topology change page\n   (you have to click on the *View topology graph* button in the upper\n   right part of the page)\n   or, alternatively, a non-admin visualizer page is also available at\n   the URL ``/topology/topology/<TOPOLOGY-UUID>/``.\n\nManagement Commands\n-------------------\n\n``update_topology``\n^^^^^^^^^^^^^^^^^^^\n\nAfter topology URLs (URLs exposing the files that the topology of the network) have been\nadded in the admin, the ``update_topology`` management command can be used to collect data\nand start playing with the network graph::\n\n    ./manage.py update_topology\n\nThe management command accepts a ``--label`` argument that will be used to search in\ntopology labels, eg::\n\n    ./manage.py update_topology --label mytopology\n\n``save_snapshot``\n^^^^^^^^^^^^^^^^^\n\nThe ``save_snapshot`` management command can be used to save the topology graph data which\ncould be used to view the network topology graph sometime in future::\n\n    ./manage.py save_snapshot\n\nThe management command accepts a ``--label`` argument that will be used to search in\ntopology labels, eg::\n\n    ./manage.py save_snapshot --label mytopology\n\n``upgrade_from_django_netjsongraph``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you are upgrading from django-netjsongraph to openwisp-network-topology, there\nis an easy migration script that will import your topologies, users & groups to\nopenwisp-network-topology instance::\n\n    ./manage.py upgrade_from_django_netjsongraph\n\nThe management command accepts an argument ``--backup``, that you can pass\nto give the location of the backup files, by default it looks in the ``tests/``\ndirectory, eg::\n\n    ./manage.py upgrade_from_django_netjsongraph --backup /home/user/django_netjsongraph/\n\nThe management command accepts another argument ``--organization``, if you want to\nimport data to a specific organization, you can give its UUID for the same,\nby default the data is added to the first found organization, eg::\n\n    ./manage.py upgrade_from_django_netjsongraph --organization 900856da-c89a-412d-8fee-45a9c763ca0b\n\n**Note**: you can follow the `tutorial to migrate database from django-netjsongraph <https://github.com/openwisp/django-netjsongraph/blob/master/README.rst>`_.\n\n``create_device_nodes``\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThis management command can be used to create the initial ``DeviceNode`` relationships when the\n`integration with OpenWISP Controller <#integration-with-openwisp-controller-and-openwisp-monitoring>`_\nis enabled in a pre-existing system which already has some devices and topology objects in its database.\n\n.. code-block:: shell\n\n    ./manage.py create_device_nodes\n\nLogging\n-------\n\nThe ``update_topology`` management command will automatically try to log errors.\n\nFor a good default ``LOGGING`` configuration refer to the `test settings\n<https://github.com/openwisp/openwisp-network-topology/blob/master/tests/settings.py#L89>`_.\n\nStrategies\n----------\n\nThere are mainly two ways of collecting topology information:\n\n* **FETCH** strategy\n* **RECEIVE** strategy\n\nEach ``Topology`` instance has a ``strategy`` field which can be set to the desired setting.\n\nFETCH strategy\n^^^^^^^^^^^^^^\n\nTopology data will be fetched from a URL.\n\nWhen some links are not detected anymore they will be flagged as \"down\" straightaway.\n\nRECEIVE strategy\n^^^^^^^^^^^^^^^^\n\nTopology data is sent directly from one or more nodes of the network.\n\nThe collector waits to receive data in the payload of a POST HTTP request;\nwhen such a request is received, a ``key`` parameter it's first checked against\nthe ``Topology`` key.\n\nIf the request is authorized the collector proceeds to update the topology.\n\nIf the data is sent from one node only, it's highly advised to set the\n``expiration_time`` of the ``Topology`` instance to ``0`` (seconds), this way the\nsystem works just like in the **FETCH strategy**, with the only difference that\nthe data is sent by one node instead of fetched by the collector.\n\nIf the data is sent from multiple nodes, you **SHOULD** set the ``expiration_time``\nof the ``Topology`` instance to a value slightly higher than the interval used\nby nodes to send the topology, this way links will be flagged as \"down\" only if\nthey haven't been detected for a while. This mechanism allows to visualize the\ntopology even if the network has been split in several parts, the disadvantage\nis that it will take a bit more time to detect links that go offline.\n\nIntegration with OpenWISP Controller and OpenWISP Monitoring\n------------------------------------------------------------\n\nIf you use `OpenWISP Controller <https://github.com/openwisp/openwisp-controller>`_\nor `OpenWISP Monitoring <https://github.com/openwisp/openwisp-monitoring>`_\nand you use OpenVPN for the management VPN, you can use the integration available in\n``openwisp_network_topology.integrations.device``.\n\nThis additional and optional module provides the following features:\n\n- whenever the stauts of an OpenVPN link changes:\n\n  - the management IP address of the related device is updated straightaway\n  - if OpenWISP Monitoring is enabled, the device checks are triggered (e.g.: ping)\n\nThis integration makes the whole system a lot faster in detecting important events in the network.\n\nIn order to use this module simply add\n``openwisp_network_topology.integrations.device`` to ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # other apps (eg: openwisp-controller, openwisp-monitoring)\n        'openwisp_network_topology',\n        'openwisp_network_topology.integrations.device',\n        'openwisp_users.accounts',\n        'allauth',\n        'allauth.account',\n        'openwisp_users',\n        'rest_framework',\n    ]\n\nIf you are enabling this integration on a pre-existing system, use the\n`create_device_nodes <#create-device-nodes>`_ management command to create\nthe relationship between devices and nodes.\n\nSettings\n--------\n\n``OPENWISP_NETWORK_TOPOLOGY_PARSERS``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+-------------+\n| **type**:    | ``list``    |\n+--------------+-------------+\n| **default**: | ``[]``      |\n+--------------+-------------+\n\nAdditional custom `netdiff parsers <https://github.com/openwisp/netdiff#parsers>`_.\n\n``OPENWISP_NETWORK_TOPOLOGY_SIGNALS``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+-------------+\n| **type**:    | ``str``     |\n+--------------+-------------+\n| **default**: | ``None``    |\n+--------------+-------------+\n\nString representing python module to import on initialization.\n\nUseful for loading django signals or to define custom behaviour.\n\n``OPENWISP_NETWORK_TOPOLOGY_TIMEOUT``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+-------------+\n| **type**:    | ``int``     |\n+--------------+-------------+\n| **default**: | ``8``       |\n+--------------+-------------+\n\nTimeout when fetching topology URLs.\n\n``OPENWISP_NETWORK_TOPOLOGY_LINK_EXPIRATION``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+-------------+\n| **type**:    | ``int``     |\n+--------------+-------------+\n| **default**: | ``60``      |\n+--------------+-------------+\n\nIf a link is down for more days than this number, it will be deleted by the\n``update_topology`` management command.\n\nSetting this to ``False`` will disable this feature.\n\n``OPENWISP_NETWORK_TOPOLOGY_VISUALIZER_CSS``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+--------------------------------+\n| **type**:    | ``str``                        |\n+--------------+--------------------------------+\n| **default**: | ``netjsongraph/css/style.css`` |\n+--------------+--------------------------------+\n\nPath of the visualizer css file. Allows customization of css according to user's\npreferences.\n\n``OPENWISP_NETWORK_TOPOLOGY_NODE_EXPIRATION``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+--------------------------------+\n| **type**:    | ``int``                        |\n+--------------+--------------------------------+\n| **default**: | ``False``                      |\n+--------------+--------------------------------+\n\nIf a node has not been modified since the days specified and if it has no links,\nit will be deleted by the ``update_topology`` management command. This depends on\n``OPENWISP_NETWORK_TOPOLOGY_LINK_EXPIRATION`` being enabled.\nReplace ``False`` with an integer to enable the feature.\n\n``OPENWISP_NETWORK_TOPOLOGY_API_URLCONF``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+---------------+\n| **type**:    |   ``string``  |\n+--------------+---------------+\n| **default**: |   ``None``    |\n+--------------+---------------+\n\nUse the ``urlconf`` option to change receive api url to point to\nanother module, example, ``myapp.urls``.\n\n``OPENWISP_NETWORK_TOPOLOGY_API_BASEURL``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+---------------+\n| **type**:    |   ``string``  |\n+--------------+---------------+\n| **default**: |   ``None``    |\n+--------------+---------------+\n\nIf you have a seperate instance of openwisp-network-topology on a\ndifferent domain, you can use this option to change the base\nof the url, this will enable you to point all the API urls to\nyour openwisp-network-topology API server's domain,\nexample value: ``https://mytopology.myapp.com``.\n\n``OPENWISP_NETWORK_TOPOLOGY_API_AUTH_REQUIRED``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n+--------------+---------------+\n| **type**:    |   ``boolean`` |\n+--------------+---------------+\n| **default**: |   ``True``    |\n+--------------+---------------+\n\nWhen enabled, the API `endpoints <#list-of-endpoints>`_ will only allow authenticated users\nwho have the necessary permissions to access the objects which\nbelong to the organizations the user manages.\n\nRest API\n--------\n\nLive documentation\n^^^^^^^^^^^^^^^^^^\n\n.. image:: https://github.com/openwisp/openwisp-network-topology/raw/docs/docs/api-doc.png\n\nA general live API documentation (following the OpenAPI specification) at ``/api/v1/docs/``.\n\nBrowsable web interface\n^^^^^^^^^^^^^^^^^^^^^^^\n\n.. image:: https://github.com/openwisp/openwisp-network-topology/raw/docs/docs/api-ui.png\n\nAdditionally, opening any of the endpoints `listed below <#list-of-endpoints>`_\ndirectly in the browser will show the `browsable API interface of Django-REST-Framework\n<https://www.django-rest-framework.org/topics/browsable-api/>`_,\nwhich makes it even easier to find out the details of each endpoint.\n\nList of endpoints\n^^^^^^^^^^^^^^^^^\n\nSince the detailed explanation is contained in the `Live documentation <#live-documentation>`_\nand in the `Browsable web page <#browsable-web-interface>`_ of each point,\nhere we'll provide just a list of the available endpoints,\nfor further information please open the URL of the endpoint in your browser.\n\nList topologies\n###############\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/topology/\n\nAvailable filters:\n\n- ``strategy``: Filter topologies based on their strategy (``fetch`` or ``receive``).\n  E.g. ``?strategy=<topology_strategy>``.\n- ``parser``: Filter topologies based on their parser.\n  E.g. ``?parser=<topology_parsers>``.\n- ``organization``: Filter topologies based on their organization.\n  E.g. ``?organization=<topology_organization_id>``.\n\nYou can use multiple filters in one request, e.g.:\n\n.. code-block:: text\n\n    /api/v1/network-topology/topology/?organization=371791ec-e3fe-4c9a-8972-3e8b882416f6&strategy=fetch\n\n**Note**: By default, ``/api/v1/network-topology/topology/`` does not include\nunpublished topologies. If you want to include unpublished topologies in the\nresponse, use ``?include_unpublished=true`` filter as following:\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/topology/?include_unpublished=true\n\nCreate topology\n###############\n\n.. code-block:: text\n\n    POST /api/v1/network-topology/topology/\n\nDetail of a topology\n####################\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/topology/{id}/\n\n**Note**: By default, ``/api/v1/network-topology/topology/{id}/`` will return\n``HTTP 404 Not Found`` for unpublished topologies. If you want to retrieve an\nunpublished topology, use ``?include_unpublished=true`` filter as following:\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/topology/{id}/?include_unpublished=true\n\nChange topolgy detail\n#####################\n\n.. code-block:: text\n\n    PUT /api/v1/network-topology/topology/{id}/\n\nPatch topology detail\n#####################\n\n.. code-block:: text\n\n    PATCH /api/v1/network-topology/topology/{id}/\n\nDelete topology\n###############\n\n.. code-block:: text\n\n    DELETE /api/v1/network-topology/topology/{id}/\n\nView topology history\n#####################\n\nThis endpoint is used to go back in time to view previous topology snapshots.\nFor it to work, snapshots need to be saved periodically as described in\n`save_snapshot <#save-snapshot>`_ section above.\n\nFor example, we could use the endpoint to view the snapshot of a topology\nsaved on ``2020-08-08`` as follows.\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/topology/{id}/history/?date=2020-08-08\n\nSend topology data\n##################\n\n.. code-block:: text\n\n    POST /api/v1/network-topology/topology/{id}/receive/\n\nList links\n##########\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/link/\n\nAvailable filters:\n\n- ``topology``: Filter links belonging to a topology.\n  E.g. ``?topology=<topology_id>``.\n- ``organization``: Filter links belonging to an organization.\n  E.g. ``?organization=<organization_id>``.\n- ``status``: Filter links based on their status (``up`` or ``down``).\n  E.g. ``?status=<link_status>``.\n\nYou can use multiple filters in one request, e.g.:\n\n.. code-block:: text\n\n    /api/v1/network-topology/link/?status=down&topology=7fce01bd-29c0-48b1-8fce-0508f2d75d36\n\nCreate link\n###########\n\n.. code-block:: text\n\n    POST /api/v1/network-topology/link/\n\nGet link detail\n###############\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/link/{id}/\n\nChange link detail\n##################\n\n.. code-block:: text\n\n    PUT /api/v1/network-topology/link/{id}/\n\nPatch link detail\n#################\n\n.. code-block:: text\n\n    PATCH /api/v1/network-topology/link/{id}/\n\nDelete link\n###########\n\n.. code-block:: text\n\n    DELETE /api/v1/network-topology/link/{id}/\n\nList nodes\n##########\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/node/\n\nAvailable filters:\n\n- ``topology``: Filter nodes belonging to a topology.\n  E.g. ``?topology=<topology_id>``.\n- ``organization``: Filter nodes belonging to an organization.\n  E.g. ``?organization=<organization_id>``.\n\nYou can use multiple filters in one request, e.g.:\n\n.. code-block:: text\n\n    /api/v1/network-topology/node/?organization=371791ec-e3fe-4c9a-8972-3e8b882416f6&topology=7fce01bd-29c0-48b1-8fce-0508f2d75d36\n\nCreate node\n###########\n\n.. code-block:: text\n\n    POST /api/v1/network-topology/node/\n\nGet node detail\n###############\n\n.. code-block:: text\n\n    GET /api/v1/network-topology/node/{id}/\n\nChange node detail\n##################\n\n.. code-block:: text\n\n    PUT /api/v1/network-topology/node/{id}/\n\nPatch node detail\n#################\n\n.. code-block:: text\n\n    PATCH /api/v1/network-topology/node/{id}/\n\nDelete node\n###########\n\n.. code-block:: text\n\n    DELETE /api/v1/network-topology/node/{id}/\n\nOverriding visualizer templates\n-------------------------------\n\nFollow these steps to override and customise the visualizer's default templates:\n\n* create a directory in your django project and put its full path in ``TEMPLATES['DIRS']``,\n  which can be found in the django ``settings.py`` file\n* create a sub directory named ``netjsongraph`` and add all the templates which shall override\n  the default ``netjsongraph/*`` templates\n* create a template file with the same name of the template file you want to override\n\nMore information about the syntax used in django templates can be found in the `django templates\ndocumentation <https://docs.djangoproject.com/en/dev/ref/templates/>`_.\n\nExample: overriding the ``<script>`` tag\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHere's a step by step guide on how to change the javascript options passed to `netjsongraph.js <https://github.com/openwisp/netjsongraph.js>`_, remember to replace ``<project_path>`` with the\nabsolute filesytem path of your project.\n\n**Step 1**: create a directory in ``<project_path>/templates/netjsongraph``\n\n**Step 2**: open your ``settings.py`` and edit the ``TEMPLATES['DIRS']`` setting so that it looks\nlike the following example:\n\n.. code-block:: python\n\n    # settings.py\n    TEMPLATES = [\n        {\n            'DIRS': [os.path.join(BASE_DIR, 'templates')],\n            # ... all other lines have been omitted for brevity ...\n        }\n    ]\n\n**Step 3**: create a new file named ``netjsongraph-script.html`` in\nthe new ``<project_path>/templates/netjsongraph/`` directory, eg:\n\n.. code-block:: html\n\n    <!-- <project_path>/templates/netjsongraph/netjsongraph-script.html -->\n    <script>\n        window.__njg_el__ = window.__njg_el__ || \"body\";\n        window.__njg_default_url__ = \"{{ graph_url }}\";\n        window.loadNetJsonGraph = function(graph){\n            graph = graph || window.__njg_default_url__;\n            d3.select(\"svg\").remove();\n            d3.select(\".njg-overlay\").remove();\n            d3.select(\".njg-metadata\").remove();\n            return d3.netJsonGraph(graph, {\n                el: window.__njg_el__,\n                // customizations of netjsongraph.js\n                linkClassProperty: \"status\",\n                defaultStyle: false,\n                labelDy: \"-1.4em\",\n                circleRadius: 8,\n                charge: -100,\n                gravity: 0.3,\n                linkDistance: 100,\n                linkStrength: 0.2,\n            });\n        };\n        window.graph = window.loadNetJsonGraph();\n        window.initTopologyHistory(jQuery);\n    </script>\n\nExtending openwisp-network-topology\n-----------------------------------\n\nOne of the core values of the OpenWISP project is `Software Reusability <http://openwisp.io/docs/general/values.html#software-reusability-means-long-term-sustainability>`_,\nfor this reason *openwisp-network-topology* provides a set of base classes\nwhich can be imported, extended and reused to create derivative apps.\n\nIn order to implement your custom version of *openwisp-network-topology*,\nyou need to perform the steps described in this section.\n\nWhen in doubt, the code in the `test project <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/>`_\nand the `sample app <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/>`_\nwill serve you as source of truth:\njust replicate and adapt that code to get a basic derivative of\n*openwisp-network-topology* working.\n\n**Premise**: if you plan on using a customized version of this module,\nwe suggest to start with it since the beginning, because migrating your data\nfrom the default module to your extended version may be time consuming.\n\n1. Initialize your custom module\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe first thing you need to do is to create a new django app which will\ncontain your custom version of *openwisp-network-topology*.\n\nA django app is nothing more than a\n`python package <https://docs.python.org/3/tutorial/modules.html#packages>`_\n(a directory of python scripts), in the following examples we'll call this django app\n``sample_network_topology``, but you can name it how you want::\n\n    django-admin startapp sample_network_topology\n\nIf you use the integration with openwisp-controller, you may want to extend also the\nintegration app if you need::\n\n    django-admin startapp sample_integration_device\n\nKeep in mind that the command mentioned above must be called from a directory\nwhich is available in your `PYTHON_PATH <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH>`_\nso that you can then import the result into your project.\n\nNow you need to add ``sample_network_topology`` to ``INSTALLED_APPS`` in your ``settings.py``,\nensuring also that ``openwisp_network_topology`` has been removed:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ... other apps ...\n        'openwisp_utils.admin_theme',\n        # all-auth\n        'django.contrib.sites',\n        'openwisp_users.accounts',\n        'allauth',\n        'allauth.account',\n        'allauth.socialaccount',\n        # (optional) openwisp_controller - required only if you are using the integration app\n        'openwisp_controller.pki',\n        'openwisp_controller.config',\n        'reversion',\n        'sortedm2m',\n        # network topology\n        # 'sample_network_topology' <-- uncomment and replace with your app-name here\n        # (optional) required only if you need to extend the integration app\n        # 'sample_integration_device' <-- uncomment and replace with your integration-app-name here\n        'openwisp_users',\n        # admin\n        'django.contrib.admin',\n        # rest framework\n        'rest_framework',\n    ]\n\nFor more information about how to work with django projects and django apps,\nplease refer to the `django documentation <https://docs.djangoproject.com/en/dev/intro/tutorial01/>`_.\n\n2. Install ``openwisp-network-topology``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInstall (and add to the requirement of your project) openwisp-network-topology::\n\n    pip install openwisp-network-topology\n\n3. Add ``EXTENDED_APPS``\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd the following to your ``settings.py``:\n\n.. code-block:: python\n\n    EXTENDED_APPS = ('openwisp_network_topology',)\n\n\n4. Add ``openwisp_utils.staticfiles.DependencyFinder``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd ``openwisp_utils.staticfiles.DependencyFinder`` to\n``STATICFILES_FINDERS`` in your ``settings.py``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\n5. Add ``openwisp_utils.loaders.DependencyLoader``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd ``openwisp_utils.loaders.DependencyLoader`` to ``TEMPLATES`` in your ``settings.py``:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                    'openwisp_utils.loaders.DependencyLoader',\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n            },\n        }\n    ]\n\n\n6. Inherit the AppConfig class\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPlease refer to the following files in the sample app of the test project:\n\n- `sample_network_topology/__init__.py <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/__init__.py>`_.\n- `sample_network_topology/apps.py <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/apps.py>`_.\n\nFor the integration with openwisp-controller, see:\n\n- `sample_integration_device/__init__.py <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_integration_device/__init__.py>`_.\n- `sample_integration_device/apps.py <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_integration_device/apps.py>`_.\n\nYou have to replicate and adapt that code in your project.\n\nFor more information regarding the concept of ``AppConfig`` please refer to\nthe `\"Applications\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/applications/>`_.\n\n\n7. Create your custom models\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPlease refer to `sample_app models file <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/models.py>`_\nuse in the test project.\n\nYou have to replicate and adapt that code in your project.\n\n**Note**: for doubts regarding how to use, extend or develop models please refer to\nthe `\"Models\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/db/models/>`_.\n\n\n8. Add swapper configurations\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOnce you have created the models, add the following to your ``settings.py``:\n\n.. code-block:: python\n\n    # Setting models for swapper module\n    TOPOLOGY_LINK_MODEL = 'sample_network_topology.Link'\n    TOPOLOGY_NODE_MODEL = 'sample_network_topology.Node'\n    TOPOLOGY_SNAPSHOT_MODEL = 'sample_network_topology.Snapshot'\n    TOPOLOGY_TOPOLOGY_MODEL = 'sample_network_topology.Topology'\n    # if you use the integration with OpenWISP Controller and/or OpenWISP Monitoring\n    TOPOLOGY_DEVICE_DEVICENODE_MODEL = 'sample_integration_device.DeviceNode'\n\nSubstitute ``sample_network_topology`` with the name you chose in step 1.\n\n9. Create database migrations\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate and apply database migrations::\n\n    ./manage.py makemigrations\n    ./manage.py migrate\n\nFor more information, refer to the\n`\"Migrations\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/migrations/>`_.\n\n10. Create the admin\n^^^^^^^^^^^^^^^^^^^^\n\nRefer to the `admin.py file of the sample app <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/admin.py>`_.\n\nTo introduce changes to the admin, you can do it in two main ways which are described below.\n\n**Note**: for more information regarding how the django admin works, or how it can be customized,\nplease refer to `\"The django admin site\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/contrib/admin/>`_.\n\n1. Monkey patching\n##################\n\nIf the changes you need to add are relatively small, you can resort to monkey patching.\n\nFor example:\n\n.. code-block:: python\n\n    from openwisp_network_topology.admin import TopologyAdmin, LinkAdmin, NodeAdmin\n\n    # TopologyAdmin.list_display.insert(1, 'my_custom_field') <-- your custom change example\n    # LinkAdmin.list_display.insert(1, 'my_custom_field') <-- your custom change example\n    # NodeAdmin.list_display.insert(1, 'my_custom_field') <-- your custom change example\n\n2. Inheriting admin classes\n###########################\n\nIf you need to introduce significant changes and/or you don't want to resort to\nmonkey patching, you can proceed as follows:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from swapper import load_model\n\n    from openwisp_network_topology.admin import (\n        TopologyAdmin as BaseTopologyAdmin,\n        LinkAdmin as BaseLinkAdmin,\n        NodeAdmin as BaseNodeAdmin\n    )\n\n    Node = load_model('topology', 'Node')\n    Link = load_model('topology', 'Link')\n    Topology = load_model('topology', 'Topology')\n\n    admin.site.unregister(Topology)\n    admin.site.unregister(Link)\n    admin.site.unregister(Node)\n\n    @admin.register(Topology, TopologyAdmin)\n    class TopologyAdmin(BaseTopologyAdmin):\n        # add your changes here\n\n    @admin.register(Link, LinkAdmin)\n    class LinkAdmin(BaseLinkAdmin):\n        # add your changes here\n\n    @admin.register(Node, NodeAdmin)\n    class NodeAdmin(BaseNodeAdmin):\n        # add your changes here\n\n11. Create root URL configuration\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPlease read and replicate according to your project needs:\n\n.. code-block:: python\n\n    The following can be used to register all the urls in your\n    ``urls.py``.\n\n    # If you've extended visualizer views (discussed below).\n    # Import visualizer views & function to add it.\n    # from openwisp_network_topology.utils import get_visualizer_urls\n    # from .sample_network_topology.visualizer import views\n\n    urlpatterns = [\n        # If you've extended visualizer views (discussed below).\n        # Add visualizer views in urls.py\n        # path('topology/', include(get_visualizer_urls(views))),\n        path('', include('openwisp_network_topology.urls')),\n        path('admin/', admin.site.urls),\n    ]\n\nFor more information about URL configuration in django, please refer to the\n`\"URL dispatcher\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/urls/>`_.\n\n12. Setup API urls\n^^^^^^^^^^^^^^^^^^\n\nYou need to create a file ``api/urls.py`` (the name & path of the file must match)\ninside your app, which contains the following:\n\n.. code-block:: python\n\n    from openwisp_network_topology.api import views\n    # When you want to modify views, please change views location\n    # from . import views\n    from openwisp_network_topology.utils import get_api_urls\n\n    urlpatterns = get_api_urls(views)\n\n13. Extending management commands\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo extend the management commands, create `sample_network_topology/management/commands` directory and\ntwo files in it:\n\n- `save_snapshot.py <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/management/commands/save_snapshot.py>`_\n- `update_topology.py <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/management/commands/update_topology.py>`_\n\n14. Import the automated tests\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen developing a custom application based on this module, it's a good\nidea to import and run the base tests too, so that you can be sure the changes\nyou're introducing are not breaking some of the existing features of *openwisp-network-topology*.\n\nRefer to the `tests.py file of the sample app <https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/tests.py>`_.\n\nIn case you need to add breaking changes, you can overwrite the tests defined\nin the base classes to test your own behavior.\n\nFor testing you also need to extend the fixtures, you can copy the\nfile ``openwisp_network_topology/fixtures/test_users.json`` in your sample app's\n``fixtures/`` directory.\n\nNow, you can then run tests with::\n\n    # the --parallel flag is optional\n    ./manage.py test --parallel sample_network_topology\n\nSubstitute ``sample_network_topology`` with the name you chose in step 1.\n\nFor more information about automated tests in django, please refer to\n`\"Testing in Django\" <https://docs.djangoproject.com/en/dev/topics/testing/>`_.\n\nOther base classes that can be inherited and extended\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following steps are not required and are intended for more advanced customization.\n\n1. Extending API views\n######################\n\nExtending the views is only required when you want to make changes in the\nbehaviour of the API.\nPlease refer to `sample_network_topology/api/views.py\n<https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/api/views.py>`_\nand replicate it in your application.\n\nIf you extend these views, remember to use these views in the\n``api/urls.py``.\n\n2. Extending the Visualizer views\n#################################\n\nSimilar to API views, visualizer views are only required to be extended\nwhen you want to make changes in the Visualizer.\nPlease refer to `sample_network_topology/visualizer/views.py\n<https://github.com/openwisp/openwisp-network-topology/tree/master/tests/openwisp2/sample_network_topology/visualizer/views.py>`_\nand replicate it in your application.\n\nIf you extend these views, remember to use these views in the ``urls.py``.\n\nContributing\n------------\n\nPlease refer to the `OpenWISP contributing guidelines <http://openwisp.io/docs/developer/contributing.html>`_.\n\nChangelog\n---------\n\nSee `CHANGES <https://github.com/openwisp/openwisp-network-topology/blob/master/CHANGES.rst>`_.\n\nLicense\n-------\n\nSee `LICENSE <https://github.com/openwisp/openwisp-network-topology/blob/master/LICENSE>`_.\n\nThis projects bundles third-party javascript libraries in its source code:\n\n- `D3.js (BSD-3-Clause) <https://d3js.org/>`_\n\nSupport\n-------\n\nSee `OpenWISP Support Channels <http://openwisp.org/support.html>`_.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/openwisp/openwisp-network-topology/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://openwisp.org",
    "keywords": "django,netjson,openwrt,networking,openwisp",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openwisp-network-topology",
    "package_url": "https://pypi.org/project/openwisp-network-topology/",
    "platform": "Platform Independent",
    "project_url": "https://pypi.org/project/openwisp-network-topology/",
    "project_urls": {
      "Download": "https://github.com/openwisp/openwisp-network-topology/releases",
      "Homepage": "http://openwisp.org"
    },
    "release_url": "https://pypi.org/project/openwisp-network-topology/1.0/",
    "requires_dist": [
      "django (<4.1,>=3.0)",
      "openwisp-users (~=1.0.0)",
      "netdiff (~=1.0.0)",
      "jsonfield (~=3.1.0)",
      "django-flat-json-widget (~=0.2.0)"
    ],
    "requires_python": "",
    "summary": "OpenWISP Network Topology",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13737044,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34f874c954f1a8996f9de995755daf90c31e02082040d7c891e9f41105c1b530",
          "md5": "001d342bc0e24c3fbd4d4d3215b309c3",
          "sha256": "ad757706255ab095223348734978c50e0e5cc81f002561e8f105d6dcb5fc6c00"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.1.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "001d342bc0e24c3fbd4d4d3215b309c3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15213,
        "upload_time": "2017-06-29T11:35:40",
        "upload_time_iso_8601": "2017-06-29T11:35:40.594894Z",
        "url": "https://files.pythonhosted.org/packages/34/f8/74c954f1a8996f9de995755daf90c31e02082040d7c891e9f41105c1b530/openwisp_network_topology-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b62e45fbee6164d876dbbe44a6e35df602c6e1f925230cabd222aca1388c954",
          "md5": "bbc4a49d75f9743e245c83cf372eff6d",
          "sha256": "2ac79885c8905df23d29df5c73e688fbe0ffc3961f386c77974f91f85a495f38"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "bbc4a49d75f9743e245c83cf372eff6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9985,
        "upload_time": "2017-06-29T11:35:42",
        "upload_time_iso_8601": "2017-06-29T11:35:42.619241Z",
        "url": "https://files.pythonhosted.org/packages/1b/62/e45fbee6164d876dbbe44a6e35df602c6e1f925230cabd222aca1388c954/openwisp-network-topology-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea415ef08810e23f48a9a71b96f46dabc955b7159550237a9a5691801443ea39",
          "md5": "ba9701aad70b633cf387e1886dbfc877",
          "sha256": "f55d869bbf9fc036a89952f4b47426d4b9c7cf9d1e7c32358d072bf293b94c25"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.1.0a0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "ba9701aad70b633cf387e1886dbfc877",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 9263,
        "upload_time": "2017-06-01T08:41:28",
        "upload_time_iso_8601": "2017-06-01T08:41:28.876717Z",
        "url": "https://files.pythonhosted.org/packages/ea/41/5ef08810e23f48a9a71b96f46dabc955b7159550237a9a5691801443ea39/openwisp_network_topology-0.1.0a0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f3936a129a03853537b83a63e9f667277da8995fde4c6b08a3791d23946d42e",
          "md5": "c3d336672300c6c8845a84965195b267",
          "sha256": "b75d0108f1508df3a2f3d5094655b29eff4fc341f2663dec32c304b80802b43e"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.1.0a0.tar.gz",
        "has_sig": true,
        "md5_digest": "c3d336672300c6c8845a84965195b267",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19438,
        "upload_time": "2017-06-01T08:41:26",
        "upload_time_iso_8601": "2017-06-01T08:41:26.839967Z",
        "url": "https://files.pythonhosted.org/packages/1f/39/36a129a03853537b83a63e9f667277da8995fde4c6b08a3791d23946d42e/openwisp-network-topology-0.1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c406971998f995188784535c95a0df7aae621d12e808e49f7dda865ec587f4f1",
          "md5": "e9232f473c8371530bdff9bce359a52c",
          "sha256": "ed273fa4913f49039e52c9b0a5217da48de9bb077babf78e47daf9caf6fcfb2c"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.1.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "e9232f473c8371530bdff9bce359a52c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14886,
        "upload_time": "2017-07-10T18:09:12",
        "upload_time_iso_8601": "2017-07-10T18:09:12.438312Z",
        "url": "https://files.pythonhosted.org/packages/c4/06/971998f995188784535c95a0df7aae621d12e808e49f7dda865ec587f4f1/openwisp_network_topology-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f3cba6877f732d69028dd23ff7c6b4fb49cd0af92ba65527813ab415d90e895",
          "md5": "65e5c5433038fb323d6df5cfba8d82d5",
          "sha256": "e51461a7266cc797197a94893ed19677164aefaa7cc4d7711e285466b774a901"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.1.1.tar.gz",
        "has_sig": true,
        "md5_digest": "65e5c5433038fb323d6df5cfba8d82d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10016,
        "upload_time": "2017-07-10T18:09:15",
        "upload_time_iso_8601": "2017-07-10T18:09:15.537741Z",
        "url": "https://files.pythonhosted.org/packages/5f/3c/ba6877f732d69028dd23ff7c6b4fb49cd0af92ba65527813ab415d90e895/openwisp-network-topology-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "042f903ffe87a9a68f2a035fbb862a091228c642e51635c7c5cb20c102b9b6aa",
          "md5": "dda1bc09e173fd449ec4fee047ccb734",
          "sha256": "a14f64daf5fe1112e64857abc50f3eb5ff5c29cf06382dd85b324e59ddbac143"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.1.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "dda1bc09e173fd449ec4fee047ccb734",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19700,
        "upload_time": "2017-07-22T15:26:18",
        "upload_time_iso_8601": "2017-07-22T15:26:18.733695Z",
        "url": "https://files.pythonhosted.org/packages/04/2f/903ffe87a9a68f2a035fbb862a091228c642e51635c7c5cb20c102b9b6aa/openwisp_network_topology-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df8eea03f17bad751ca2d7fcb1fc38440a40d56510444ec585b6f668571e11e6",
          "md5": "6ceb9b349aafc00a298e0af18589e4a5",
          "sha256": "8ad89b2207d95be0cc56b746a6c891c92036b04940c0d5ebd798cfe2112797e3"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.1.2.tar.gz",
        "has_sig": true,
        "md5_digest": "6ceb9b349aafc00a298e0af18589e4a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11222,
        "upload_time": "2017-07-22T15:26:20",
        "upload_time_iso_8601": "2017-07-22T15:26:20.906826Z",
        "url": "https://files.pythonhosted.org/packages/df/8e/ea03f17bad751ca2d7fcb1fc38440a40d56510444ec585b6f668571e11e6/openwisp-network-topology-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b40ca253d79435f944355e23a6bad8c9ba01ac19fbef21ead0c9caba1b6976cf",
          "md5": "7e3ee229a692bc34e0af0de1585ec2cd",
          "sha256": "29e99b6a3576361aae85c190281957755c688115b5017dbde40868b8dd3a2ca9"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "7e3ee229a692bc34e0af0de1585ec2cd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22054,
        "upload_time": "2018-02-20T13:58:01",
        "upload_time_iso_8601": "2018-02-20T13:58:01.208432Z",
        "url": "https://files.pythonhosted.org/packages/b4/0c/a253d79435f944355e23a6bad8c9ba01ac19fbef21ead0c9caba1b6976cf/openwisp_network_topology-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f231d0fd7547f1bc3930f7168788f3d41e595e4c8331d526b9fa6dd25dc46cf",
          "md5": "fd70b7b6cfe6aeef145401d6f28712c9",
          "sha256": "f77caefd8f2f2e9311b4061cd13d74fb1241e8ba7f968f7a4667d8e77289c00d"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "fd70b7b6cfe6aeef145401d6f28712c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14248,
        "upload_time": "2018-02-20T13:58:07",
        "upload_time_iso_8601": "2018-02-20T13:58:07.261732Z",
        "url": "https://files.pythonhosted.org/packages/6f/23/1d0fd7547f1bc3930f7168788f3d41e595e4c8331d526b9fa6dd25dc46cf/openwisp-network-topology-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e70d33635ce6b237e52cace9761ba70449ca1197cb8209948c967c5f9ca34180",
          "md5": "a1c7e87ad6d0693acdbff3ca76f9d427",
          "sha256": "c5caccf925c7815f7060c572815b69552791d480142547519d99af9b33e3e828"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1c7e87ad6d0693acdbff3ca76f9d427",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22626,
        "upload_time": "2018-02-24T20:18:25",
        "upload_time_iso_8601": "2018-02-24T20:18:25.630720Z",
        "url": "https://files.pythonhosted.org/packages/e7/0d/33635ce6b237e52cace9761ba70449ca1197cb8209948c967c5f9ca34180/openwisp_network_topology-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca863771d6701a872f5ef33e56d8ed664a3c3d6c599598cd84c0d5a1e0653650",
          "md5": "de4123394f21c635af03142dcbe9172c",
          "sha256": "7e7d9eeeeb6d3955a4cbfc9ad5584309e1721653b2721734d6eaf69aace4d7eb"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "de4123394f21c635af03142dcbe9172c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11967,
        "upload_time": "2018-02-24T20:18:27",
        "upload_time_iso_8601": "2018-02-24T20:18:27.476710Z",
        "url": "https://files.pythonhosted.org/packages/ca/86/3771d6701a872f5ef33e56d8ed664a3c3d6c599598cd84c0d5a1e0653650/openwisp-network-topology-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ffba7ea07c17c057d486dfedffde023ae808f1fddb5a3e49118ffd05614c829",
          "md5": "d9412df0d145b0f6345a652742ba7c44",
          "sha256": "bdfb7532b16a8b295cb08e664bdf2aad5e525709a2899765c979d349cd7e4142"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.2.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "d9412df0d145b0f6345a652742ba7c44",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23694,
        "upload_time": "2020-01-13T17:51:20",
        "upload_time_iso_8601": "2020-01-13T17:51:20.270369Z",
        "url": "https://files.pythonhosted.org/packages/0f/fb/a7ea07c17c057d486dfedffde023ae808f1fddb5a3e49118ffd05614c829/openwisp_network_topology-0.2.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a23cd255583fd86d68a33ede5501bd54486f47bbc1b93db540a3248fc15fe2b7",
          "md5": "d7cf73382f37e2af4963d61a7c79e5a0",
          "sha256": "c42eb4d7b5452a5ac3f2bf611377e65a587e357af687a7b18abff51be9bf144a"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.2.2.tar.gz",
        "has_sig": true,
        "md5_digest": "d7cf73382f37e2af4963d61a7c79e5a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15743,
        "upload_time": "2020-01-13T17:51:25",
        "upload_time_iso_8601": "2020-01-13T17:51:25.901725Z",
        "url": "https://files.pythonhosted.org/packages/a2/3c/d255583fd86d68a33ede5501bd54486f47bbc1b93db540a3248fc15fe2b7/openwisp-network-topology-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61fd96d645b3fe480c2dffe0e1833b83fb38f12e132972f7bc76401c1e684eb5",
          "md5": "cc4e03cfb65664f80766d54a04432d09",
          "sha256": "ecf1fdb9d362244d66900d6cf145c633a5af120a8be6e91200d79266c0cb586c"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.2.2a0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "cc4e03cfb65664f80766d54a04432d09",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23719,
        "upload_time": "2020-01-13T17:51:23",
        "upload_time_iso_8601": "2020-01-13T17:51:23.346701Z",
        "url": "https://files.pythonhosted.org/packages/61/fd/96d645b3fe480c2dffe0e1833b83fb38f12e132972f7bc76401c1e684eb5/openwisp_network_topology-0.2.2a0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fd575d4ba3fa85dc7e9cdaa0f9d6db3869443fbe8027f89960eed7b3650bf6e",
          "md5": "81eb4b1244719fdf05b220e426aee12f",
          "sha256": "0c9daeef07c204254379a1d285db0b234a7d28752029c567098436e625017c52"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.2.2a0.tar.gz",
        "has_sig": true,
        "md5_digest": "81eb4b1244719fdf05b220e426aee12f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15731,
        "upload_time": "2020-01-13T17:51:28",
        "upload_time_iso_8601": "2020-01-13T17:51:28.654781Z",
        "url": "https://files.pythonhosted.org/packages/2f/d5/75d4ba3fa85dc7e9cdaa0f9d6db3869443fbe8027f89960eed7b3650bf6e/openwisp-network-topology-0.2.2a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1143bd1321a8aa6925fde84e28b159a071709f2c143483c45f8a8b4736b0282c",
          "md5": "9e3353b585d44003a07d7a5d4ca9807d",
          "sha256": "a5dbf7f9eab843eda45fe81f8ffb795c2d4d5daac69fe504e886921571cc2c5d"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "9e3353b585d44003a07d7a5d4ca9807d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23775,
        "upload_time": "2020-02-07T08:40:55",
        "upload_time_iso_8601": "2020-02-07T08:40:55.313151Z",
        "url": "https://files.pythonhosted.org/packages/11/43/bd1321a8aa6925fde84e28b159a071709f2c143483c45f8a8b4736b0282c/openwisp_network_topology-0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a960e0d2f7099c48dd8cd453d36c51c0992afcf47281632ce45ceba50f6086c",
          "md5": "536e7be04279c59184f778c2097bf7d7",
          "sha256": "d8b3562d9bd29b43306cccc2c87be48d23926208b54100069423a084a81fff41"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.3.tar.gz",
        "has_sig": true,
        "md5_digest": "536e7be04279c59184f778c2097bf7d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15887,
        "upload_time": "2020-02-07T08:40:57",
        "upload_time_iso_8601": "2020-02-07T08:40:57.936683Z",
        "url": "https://files.pythonhosted.org/packages/5a/96/0e0d2f7099c48dd8cd453d36c51c0992afcf47281632ce45ceba50f6086c/openwisp-network-topology-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7924a58d088224d958481cdea0393bd8e809a41d627ff4147bd54593170e567",
          "md5": "ed6d4cfe64e5d80cd607b36ee4188bb5",
          "sha256": "3248a8a6d31f8e68fa7b52deda6d401f09113311e8b59269a42ae5e9e6df4b41"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.3.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "ed6d4cfe64e5d80cd607b36ee4188bb5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23816,
        "upload_time": "2020-02-27T08:50:27",
        "upload_time_iso_8601": "2020-02-27T08:50:27.058151Z",
        "url": "https://files.pythonhosted.org/packages/f7/92/4a58d088224d958481cdea0393bd8e809a41d627ff4147bd54593170e567/openwisp_network_topology-0.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "203b1e83a9b48a55f1b789d4e46354b21896b09b1d543ccf0f6d9306f5b402ce",
          "md5": "3d3a12dd5d701d5ae709f317629e0c59",
          "sha256": "2b305ed1c8f59f519d23091831d1d708f1e0a212818093b6e746f4b3776ca9fa"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.3.1.tar.gz",
        "has_sig": true,
        "md5_digest": "3d3a12dd5d701d5ae709f317629e0c59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15979,
        "upload_time": "2020-02-27T08:50:29",
        "upload_time_iso_8601": "2020-02-27T08:50:29.672280Z",
        "url": "https://files.pythonhosted.org/packages/20/3b/1e83a9b48a55f1b789d4e46354b21896b09b1d543ccf0f6d9306f5b402ce/openwisp-network-topology-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c7d14d04136bf3599485857f82086cd39ee8e9104728f498eeebe2e61b6a6bf",
          "md5": "1a3feb04ad588905f7989ac5b3e73556",
          "sha256": "2f371039f1627c65171cb7dea1db0b8ef0d8569309eba0c9e5db9e89ead8baf0"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.3.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "1a3feb04ad588905f7989ac5b3e73556",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24133,
        "upload_time": "2020-06-05T19:32:31",
        "upload_time_iso_8601": "2020-06-05T19:32:31.469016Z",
        "url": "https://files.pythonhosted.org/packages/7c/7d/14d04136bf3599485857f82086cd39ee8e9104728f498eeebe2e61b6a6bf/openwisp_network_topology-0.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c8ce516bb63df36f8f44f0e43f949b420d400b40bad25f6e57cdcfaa00f9309",
          "md5": "e3a6c73c41168c0fe747eeab10eaf4e5",
          "sha256": "b8d7077e2c5780d3104457b13bd15b83806874ccb3d6d351da8aea362505061f"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.3.2.tar.gz",
        "has_sig": true,
        "md5_digest": "e3a6c73c41168c0fe747eeab10eaf4e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16510,
        "upload_time": "2020-06-05T19:32:33",
        "upload_time_iso_8601": "2020-06-05T19:32:33.698073Z",
        "url": "https://files.pythonhosted.org/packages/0c/8c/e516bb63df36f8f44f0e43f949b420d400b40bad25f6e57cdcfaa00f9309/openwisp-network-topology-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "269ce89b4c80eb9d0a48062261a602ec151aa4fc12f4c21242ad5b8d5867973d",
          "md5": "9b8c7d720ab56e84e3a1f8ebacae1724",
          "sha256": "166c32765f7937df26aa452c58aefde01c8315d05098b82ec0e4f96bb72cb06a"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.4-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "9b8c7d720ab56e84e3a1f8ebacae1724",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 229468,
        "upload_time": "2020-06-28T21:13:36",
        "upload_time_iso_8601": "2020-06-28T21:13:36.357682Z",
        "url": "https://files.pythonhosted.org/packages/26/9c/e89b4c80eb9d0a48062261a602ec151aa4fc12f4c21242ad5b8d5867973d/openwisp_network_topology-0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a8896360fd8a0017e6bc12abd847b856b933981c9b39a339289332b1455003f",
          "md5": "3dcdffca4ba9915d90e490129d4a4c9a",
          "sha256": "2208073dd98d1c8ba03b645fa8b97ae25db3a363fbfcfef610fe4c9577ef596f"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.4.tar.gz",
        "has_sig": true,
        "md5_digest": "3dcdffca4ba9915d90e490129d4a4c9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 210280,
        "upload_time": "2020-06-28T21:13:43",
        "upload_time_iso_8601": "2020-06-28T21:13:43.661256Z",
        "url": "https://files.pythonhosted.org/packages/2a/88/96360fd8a0017e6bc12abd847b856b933981c9b39a339289332b1455003f/openwisp-network-topology-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd4a00f0100024dea712be5a77026e2f609d78506b1580b003adbed99fb0c034",
          "md5": "56af18b25355b1e8b9c5073bb38be142",
          "sha256": "f2e261fb9641bb66edd5f86bd1620a803d19b0ee9f9ddb9226d36146885780ae"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.5-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "56af18b25355b1e8b9c5073bb38be142",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 237960,
        "upload_time": "2020-09-18T22:18:29",
        "upload_time_iso_8601": "2020-09-18T22:18:29.737788Z",
        "url": "https://files.pythonhosted.org/packages/cd/4a/00f0100024dea712be5a77026e2f609d78506b1580b003adbed99fb0c034/openwisp_network_topology-0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93a9d2d12db4826a680d978acd302dcc978cb801ec64b6ec2400c264817d570b",
          "md5": "759904634c319e3ff940ac21d435ba39",
          "sha256": "4db00eb01e7065eb0a1961b5d82cda0a8fe3ed8caa2a99e4d173d4a990e4fd22"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.5.tar.gz",
        "has_sig": true,
        "md5_digest": "759904634c319e3ff940ac21d435ba39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 236017,
        "upload_time": "2020-09-18T22:18:37",
        "upload_time_iso_8601": "2020-09-18T22:18:37.164765Z",
        "url": "https://files.pythonhosted.org/packages/93/a9/d2d12db4826a680d978acd302dcc978cb801ec64b6ec2400c264817d570b/openwisp-network-topology-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f481b4c444276660581eea1e1813f5182a0cc17a96195bb24d2a85886e2fa75",
          "md5": "0b450f2c9c62d85f13d2d46259fc897e",
          "sha256": "e34541bef4322f2f4f53bba1721cd27fc33aafb00f1849a89de17b325ef52366"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-0.5.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "0b450f2c9c62d85f13d2d46259fc897e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 237762,
        "upload_time": "2020-11-25T18:18:54",
        "upload_time_iso_8601": "2020-11-25T18:18:54.794152Z",
        "url": "https://files.pythonhosted.org/packages/1f/48/1b4c444276660581eea1e1813f5182a0cc17a96195bb24d2a85886e2fa75/openwisp_network_topology-0.5.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad321a06eb6e92ebd30b9539dd15e1023ee028e655903f10cda21ad6e95de976",
          "md5": "9b1a1ed675d09f7e8ef1321b0930f995",
          "sha256": "5b2562603798244b1edef3c9477b1952a527a33e347fc8a517574aa3171433f0"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-0.5.1.tar.gz",
        "has_sig": true,
        "md5_digest": "9b1a1ed675d09f7e8ef1321b0930f995",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 236116,
        "upload_time": "2020-11-25T18:18:57",
        "upload_time_iso_8601": "2020-11-25T18:18:57.471916Z",
        "url": "https://files.pythonhosted.org/packages/ad/32/1a06eb6e92ebd30b9539dd15e1023ee028e655903f10cda21ad6e95de976/openwisp-network-topology-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bde9fba95b5a99d14a6033a4d2c7399dc6b0c02f736b913de7de9da5bd80fc7f",
          "md5": "a1486a7b8428d97d2bd8f90dbf0cf80d",
          "sha256": "91423ccc0050b3b5d7b60ddab8b7a2952d6a76655e45a89017ba740ae58f9b3b"
        },
        "downloads": -1,
        "filename": "openwisp_network_topology-1.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "a1486a7b8428d97d2bd8f90dbf0cf80d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 247069,
        "upload_time": "2022-05-06T19:43:13",
        "upload_time_iso_8601": "2022-05-06T19:43:13.721333Z",
        "url": "https://files.pythonhosted.org/packages/bd/e9/fba95b5a99d14a6033a4d2c7399dc6b0c02f736b913de7de9da5bd80fc7f/openwisp_network_topology-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8c59236bfa60222042231664e2a9e0d47b68a7913b050ffbb1b37ed4145ba09",
          "md5": "9246392a61cde50fd96248b6367880a3",
          "sha256": "300f95e20a57b673c193fb1896d8b0c0f9bca3f50f28393ddb06343bde58f77a"
        },
        "downloads": -1,
        "filename": "openwisp-network-topology-1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "9246392a61cde50fd96248b6367880a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 246644,
        "upload_time": "2022-05-06T19:43:19",
        "upload_time_iso_8601": "2022-05-06T19:43:19.161765Z",
        "url": "https://files.pythonhosted.org/packages/d8/c5/9236bfa60222042231664e2a9e0d47b68a7913b050ffbb1b37ed4145ba09/openwisp-network-topology-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bde9fba95b5a99d14a6033a4d2c7399dc6b0c02f736b913de7de9da5bd80fc7f",
        "md5": "a1486a7b8428d97d2bd8f90dbf0cf80d",
        "sha256": "91423ccc0050b3b5d7b60ddab8b7a2952d6a76655e45a89017ba740ae58f9b3b"
      },
      "downloads": -1,
      "filename": "openwisp_network_topology-1.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "a1486a7b8428d97d2bd8f90dbf0cf80d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 247069,
      "upload_time": "2022-05-06T19:43:13",
      "upload_time_iso_8601": "2022-05-06T19:43:13.721333Z",
      "url": "https://files.pythonhosted.org/packages/bd/e9/fba95b5a99d14a6033a4d2c7399dc6b0c02f736b913de7de9da5bd80fc7f/openwisp_network_topology-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8c59236bfa60222042231664e2a9e0d47b68a7913b050ffbb1b37ed4145ba09",
        "md5": "9246392a61cde50fd96248b6367880a3",
        "sha256": "300f95e20a57b673c193fb1896d8b0c0f9bca3f50f28393ddb06343bde58f77a"
      },
      "downloads": -1,
      "filename": "openwisp-network-topology-1.0.tar.gz",
      "has_sig": true,
      "md5_digest": "9246392a61cde50fd96248b6367880a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 246644,
      "upload_time": "2022-05-06T19:43:19",
      "upload_time_iso_8601": "2022-05-06T19:43:19.161765Z",
      "url": "https://files.pythonhosted.org/packages/d8/c5/9236bfa60222042231664e2a9e0d47b68a7913b050ffbb1b37ed4145ba09/openwisp-network-topology-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}