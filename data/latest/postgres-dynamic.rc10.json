{
  "info": {
    "author": "",
    "author_email": "Bayu Satria Gemilang <bayu.code.lab@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# postgres-dynamic - Python-PostgreSQL Dynamic Query Builder\r\n\r\nPostgres dynamic is a simple query builder developed for internal usage. It currently supports select, insert, update, and delete statements.\r\nThe purpose of this library is for better managament and maintenance of the code used in our environment.\r\n\r\n## Installation\r\n\r\n<div class=\"termy\">\r\n\r\n```console\r\n$ pip install postgres-dynamic\r\n\r\n---> 100%\r\n```\r\n\r\n</div>\r\n\r\n## Parameter Format:\r\n- connection_object: Callable\r\n    ```Python\r\n    connection_object = psycopg2.connect(host,port,database,user,password) #object created from psycopg2.connect()\r\n    ```\r\n- where: List(dict)\r\n    ```Python\r\n    where = [\r\n        {\r\n            'column_name': 'some_column_name', \r\n            'value': 'some_value', # can accept str, int, list, or tuple\r\n            'operator': 'some_operator', # can be omitted (accepted operators are =, >, <, >=, <=, IN),\r\n            'conjunction': 'some_conjunction', # can be omitted, used when you need to specify more than one conditions and will link with next index value (accepted conjunctions are AND, OR)\r\n        },\r\n    ],\r\n    ```\r\n\r\n- main_table: Union[dict, str]  \r\n\r\n    For **select** query\r\n    ```Python\r\n    main_table = {\r\n        'table': 'some_table_name', \r\n        'alias': 'some_alias_for_table',\r\n    },\r\n    ```\r\n\r\n    For **transaction** query\r\n    ```Python\r\n    main_table = 'some_table_name'\r\n    ```\r\n\r\n- join_table: List(dict)\r\n    ```Python\r\n    join_table = [\r\n        {\r\n            'table': 'some_table_name', \r\n            'alias': 'some_alias_for_table', \r\n            'join_method': 'join_method', # accepted join methods are (INNER, LEFT, RIGHT, FULL) \r\n            'on': 'matching_column_on_both_table',\r\n        },\r\n    ]\r\n    ```\r\n\r\n- column_name: List(str)\r\n    ```Python\r\n    column_name = ['some_column_name', 'some_column_name', 'some_column_name',]\r\n    ```\r\n\r\n- column_and_value: dict\r\n    ```Python\r\n    column_and_value = {\r\n        'some_column_name': 'some_value', # for multiple values just provide more key:value pair \r\n    }\r\n    ```\r\n\r\n- order: dict\r\n    ```Python\r\n    order = {\r\n        'some_column_name': 'ASC', # accepted order values are (ASC, DESC), for multiple order conditions just provide more key:value pair \r\n    }\r\n    ```\r\n\r\n## Usage & Code Samples\r\n\r\nExample DB  \r\n\r\n`table:` **employees**\r\n| id  | first_name | last_name\r\n| --- | --- | ---\r\n|  1  | Alex | Garcia\r\n|  2  | Joe | Black\r\n|  3  | John | Doe\r\n|  4  | Barry | Allen\r\n|  5  | Charlie | Cox\r\n\r\n`table:` **salaries**\r\n| employee_id  | salary\r\n| --- | --- \r\n|  1  | 120,000 \r\n|  2  | 135,000 \r\n|  3  | 150,000\r\n|  4  | 180,000\r\n|  5  | 120,000 \r\n\r\n- SELECT\r\n\r\n    - Single Select  \r\n        Single select always return a single value from the query, based on `fetchone` in psycopg2 and returning a dictionary with `{column_name: value}` of the tables.\r\n        <details>\r\n        <summary>Show more...</summary>  \r\n\r\n        Parameters:\r\n        ```\r\n        main_table #required\r\n        where #required\r\n        join_table #optional (if omitted it won't join to any table)\r\n        column_name #optional (if omitted it will select all columns on the provided table)\r\n        ```\r\n        \r\n        Code samples:\r\n        ```Python\r\n        # without joining table\r\n\r\n        from postgres_dynamic import PGDGet\r\n        import asyncio\r\n\r\n        query_result = PGDGet.get_one(\r\n            main_table={'table': 'employees'},\r\n            where=[\r\n                {'column_name': 'id', 'value': '1'},\r\n            ],\r\n            column_name=['first_name']\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n\r\n        # {'first_name': 'Alex'}\r\n        ```\r\n\r\n        ```Python\r\n        # with join table salaries\r\n\r\n        query_result = PGDGet.get_one(\r\n            main_table={'table': 'employees', 'alias': 'emp'},\r\n            join_table=[\r\n                {'table': 'salaries', 'alias': 'sal', 'join_method': 'INNER', 'on': 'emp.id = sal.employee_id'}\r\n            ],\r\n            where=[\r\n                {'column_name': 'id', 'value': '1'},\r\n            ],\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n\r\n        # {'id': '1', 'first_name': 'Alex', 'last_name': 'Garcia', 'employee_id': '1', 'salary': 120000}\r\n        ```\r\n        </details>\r\n\r\n    - Multi Select  \r\n        Multi select always return a dict with key `data`, based on `fetchall` in psycopg2 and returning a list of dictionary with `{column_name: value}` of the tables.\r\n        Parameters:\r\n        <details>\r\n        <summary>Show more...</summary>  \r\n\r\n        ```\r\n        main_table #required\r\n        where #optional (if omitted no condition will be passed)\r\n        join_table #optional (if omitted it won't join to any table)\r\n        column_name #optional (if omitted it will select all columns on the provided table)\r\n        order #optional (if omitted it won't sort the query)\r\n        limit #optional (if a limit count is given, no more than that many rows will be returned but possibly fewer, if the query itself yields fewer rows)\r\n        offset #optional (it used to skip that many rows before beginning to return rows)\r\n\r\n        notes:\r\n        - If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned\r\n        - When using LIMIT, it is important to use an ORDER BY clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows.\r\n        - For paging, you can specify 0 or 1 for the starting point of the first page\r\n        ```\r\n        \r\n        Code samples:\r\n        ```Python\r\n        from postgres_dynamic import PGDGet\r\n        import asyncio\r\n\r\n        query_result = PGDGet.get_all(\r\n            main_table={'table': 'employees'},\r\n            limit=3,\r\n            offset=2\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n        \r\n        # {'data': [{'id': '4', 'first_name': 'Barry', 'last_name': 'Allen'}, {'id': '5', 'first_name': 'Charlie', 'last_name': 'Cox'}]}\r\n        ```\r\n    </details>  \r\n\r\n    - Select count   \r\n        Select count always return a dict with key `total_data`, based on `SELECT COUNT(*)` in SQL and returning a dictionary with `{total_data: value}` of the query.\r\n        Parameters:\r\n        <details>\r\n        <summary>Show more...</summary>  \r\n\r\n        ```\r\n        main_table #required\r\n        where #optional (if omitted no condition will be passed)\r\n        join_table #optional (if omitted it won't join to any table)\r\n        ```\r\n        \r\n        Code samples:\r\n        ```Python\r\n        from postgres_dynamic import PGDGet\r\n        import asyncio\r\n\r\n        query_result = PGDGet.get_count(\r\n            main_table={'table': 'employees'},\r\n            where=[{'column_name': 'first_name', 'value': 'Alex'}]\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n        \r\n        # {'total_data': 1}\r\n        ```\r\n    </details>  \r\n\r\n\r\n- INSERT\r\n\r\n    - Insert Statement  \r\n        Insert will not return anyting, and will not saved changes to the database unless you specify `commit=True` in the parameters.\r\n        <details>\r\n        <summary>Show more...</summary>  \r\n\r\n        Parameters:\r\n        ```\r\n        main_table #required\r\n        column_and_value #required\r\n        commit #optional (if omitted, default value will be False which will not saving any changes to database)\r\n        ```\r\n        \r\n        Code samples:\r\n        ```Python\r\n        # with auto commit\r\n\r\n        from postgres_dynamic import PGDTransaction\r\n        import asyncio\r\n\r\n        query_result = PGDTransaction.insert(\r\n            main_table='employees',\r\n            column_and_value={'id': 6, 'first_name': 'Harrison', 'last_name': 'Ford'},\r\n            commit=True\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n\r\n        # None\r\n        # will insert a new employee to the employees table\r\n        ```\r\n\r\n        ```Python\r\n        # without auto commit\r\n\r\n        query_result = PGDTransaction.insert(\r\n            main_table='salaries',\r\n            column_and_value={'employee_id': 6, 'salary': 250000},\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n\r\n        # None\r\n        # will insert a new salary to the salaries table\r\n        \r\n        # save changes to the database\r\n        connection_object.commit()\r\n\r\n        ```\r\n\r\n    </details>\r\n\r\n- UPDATE\r\n\r\n    - Update Statement  \r\n        Update will not return anyting, and will not saved changes to the database unless you specify `commit=True` in the parameters.\r\n        <details>\r\n        <summary>Show more...</summary>  \r\n\r\n        Parameters:\r\n        ```\r\n        main_table #required\r\n        column_and_value #required\r\n        where #required\r\n        commit #optional (if omitted, default value will be False which will not saving any changes to database)\r\n        ```\r\n        \r\n        Code samples:\r\n        ```Python\r\n        # with auto commit\r\n\r\n        from postgres_dynamic import PGDTransaction\r\n        import asyncio\r\n\r\n        query_result = PGDTransaction.update(\r\n            main_table='employees',\r\n            column_and_value={'first_name': 'Tyler', 'last_name': 'Oakley'},\r\n            where=[\r\n                {'column_name': 'id', 'value': '6'},\r\n            ],\r\n            commit=True\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n\r\n        # None\r\n        # will update employee first_name and last_name with id 6\r\n        ```\r\n\r\n        ```Python\r\n        # without auto commit\r\n\r\n        query_result = PGDTransaction.update(\r\n            main_table='salaries',\r\n            column_and_value={'salary': 450000},\r\n            where=[\r\n                {'column_name': 'employee_id', 'value': '6'},\r\n            ],\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n\r\n        # None\r\n        # will update the salary with employee_id 6\r\n        \r\n        # save changes to the database\r\n        connection_object.commit()\r\n\r\n        ```\r\n\r\n    </details>  \r\n\r\n\r\n- DELETE\r\n\r\n    - Delete Statement  \r\n        Delete will not return anyting, and will not saved changes to the database unless you specify `commit=True` in the parameters.\r\n        <details>\r\n        <summary>Show more...</summary>  \r\n\r\n        Parameters:\r\n        ```\r\n        main_table #required\r\n        where #required\r\n        commit #optional (if omitted, default value will be False which will not saving any changes to database)\r\n        ```\r\n        \r\n        Code samples:\r\n        ```Python\r\n        # with auto commit\r\n\r\n        from postgres_dynamic import PGDTransaction\r\n        import asyncio\r\n\r\n        query_result = PGDTransaction.delete(\r\n            main_table='salaries',\r\n            where=[\r\n                {'column_name': 'employee_id', 'value': '6'},\r\n            ],\r\n            commit=True\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n\r\n        # None\r\n        # will delete salary data with employee_id 6\r\n        ```\r\n\r\n        ```Python\r\n        # without auto commit\r\n\r\n        query_result = PGDTransaction.delete(\r\n            main_table='employees',\r\n            where=[\r\n                {'column_name': 'id', 'value': '6'},\r\n            ],\r\n        )\r\n\r\n        result = asyncio.run(query_result)\r\n        print(result)\r\n\r\n        # None\r\n        # will delete the employee with id 6\r\n        \r\n        # save changes to the database\r\n        connection_object.commit()\r\n        ```\r\n\r\n    </details>\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "postgres-dynamic",
    "package_url": "https://pypi.org/project/postgres-dynamic/",
    "platform": null,
    "project_url": "https://pypi.org/project/postgres-dynamic/",
    "project_urls": {
      "Bug Tracker": "https://github.com/bayu-code-lab/postgres-dynamic/issues",
      "Homepage": "https://github.com/bayu-code-lab/postgres-dynamic"
    },
    "release_url": "https://pypi.org/project/postgres-dynamic/0.0.11/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Postgres Dynamic Query",
    "version": "0.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15937293,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9508b35c5c97967288a8c1eb7d4ce3de63429c9c9e1e6c6eba6e74ae42ae95a1",
          "md5": "79efdf2932b8672de314c66d4f4f12a0",
          "sha256": "bf1bcea06b4f7e298f86b864463edc04a404cd90186d9df50cf121f9a9a4e84c"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79efdf2932b8672de314c66d4f4f12a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5166,
        "upload_time": "2022-10-27T05:45:17",
        "upload_time_iso_8601": "2022-10-27T05:45:17.585805Z",
        "url": "https://files.pythonhosted.org/packages/95/08/b35c5c97967288a8c1eb7d4ce3de63429c9c9e1e6c6eba6e74ae42ae95a1/postgres_dynamic-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51d82d3c315b217de69c64b315062a6954ca6644c79669e87c958eb65a7e6a40",
          "md5": "76758a75c8197f4f6de25c80c920920f",
          "sha256": "9a74125172f9170bb84b02d4d67a0f3e85722d13e709171e851f167d4b8b5d8c"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "76758a75c8197f4f6de25c80c920920f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4033,
        "upload_time": "2022-10-27T05:45:19",
        "upload_time_iso_8601": "2022-10-27T05:45:19.311038Z",
        "url": "https://files.pythonhosted.org/packages/51/d8/2d3c315b217de69c64b315062a6954ca6644c79669e87c958eb65a7e6a40/postgres-dynamic-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cc5548eb29175bee48eb9d6ec429f10061d54954024ba8afeead44183729710",
          "md5": "6bea38ad2f44ca0bf67c7a97956f5936",
          "sha256": "da1448f3a3c97a0478a7b832a78bb83b41245d845a1792a1f8a2d849d15d75fe"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bea38ad2f44ca0bf67c7a97956f5936",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7523,
        "upload_time": "2022-11-21T03:54:36",
        "upload_time_iso_8601": "2022-11-21T03:54:36.149002Z",
        "url": "https://files.pythonhosted.org/packages/1c/c5/548eb29175bee48eb9d6ec429f10061d54954024ba8afeead44183729710/postgres_dynamic-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a148ec5546b260ac578e34f5fc6ff564cafc9b46951bb5bd9919416af62e4268",
          "md5": "9169a6f6c7298cef7c95896bd4408cac",
          "sha256": "f32736335741430014d6a60afddd9e79144404d09f459a5302f5e5772eaf3fef"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "9169a6f6c7298cef7c95896bd4408cac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8507,
        "upload_time": "2022-11-21T03:54:38",
        "upload_time_iso_8601": "2022-11-21T03:54:38.219967Z",
        "url": "https://files.pythonhosted.org/packages/a1/48/ec5546b260ac578e34f5fc6ff564cafc9b46951bb5bd9919416af62e4268/postgres-dynamic-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fecc2a3084eef3b7317a8b0206c8b46be1032a65b3980554f55612e3dcc5c771",
          "md5": "da93ff2d34a9e75592bd9c965593ea54",
          "sha256": "a4e1de22e65ac64fedc6651392a1efa280b39215bb3804f92aae88ccf9ddbe36"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da93ff2d34a9e75592bd9c965593ea54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7539,
        "upload_time": "2022-11-30T03:18:18",
        "upload_time_iso_8601": "2022-11-30T03:18:18.720315Z",
        "url": "https://files.pythonhosted.org/packages/fe/cc/2a3084eef3b7317a8b0206c8b46be1032a65b3980554f55612e3dcc5c771/postgres_dynamic-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "027988dcff6ada781ccf6c0f9d21e6b04440d4373a2edc203eaefa58c939ff8b",
          "md5": "d474950aa761d99ac07151d987ae52b0",
          "sha256": "38db1a53b9b6de36cb5497cc4a875183fd134793412cd20f06b8ccdfe0365229"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "d474950aa761d99ac07151d987ae52b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8534,
        "upload_time": "2022-11-30T03:18:21",
        "upload_time_iso_8601": "2022-11-30T03:18:21.185573Z",
        "url": "https://files.pythonhosted.org/packages/02/79/88dcff6ada781ccf6c0f9d21e6b04440d4373a2edc203eaefa58c939ff8b/postgres-dynamic-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64e5fd97ccfce93946d4fd852b61a54a37d6d85479f92ab444830e11087e2e04",
          "md5": "e74fe5594fbc0f89a324a8e698bf9c2b",
          "sha256": "e2091dc1ad4f58422cbb61cba978a3622879bf92a35312d2c469b425a41935da"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e74fe5594fbc0f89a324a8e698bf9c2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5186,
        "upload_time": "2022-10-27T14:16:33",
        "upload_time_iso_8601": "2022-10-27T14:16:33.516806Z",
        "url": "https://files.pythonhosted.org/packages/64/e5/fd97ccfce93946d4fd852b61a54a37d6d85479f92ab444830e11087e2e04/postgres_dynamic-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1f48c5517ebd953b0e070d7fcee9ae96c9a0cb72ffa4c4a6ecc25590467222f",
          "md5": "a9d0f8ff9d6c060b4bf1da6450bb7312",
          "sha256": "759868b7e79f60a5bab4813b5209ba8f4790c4123df73428b39fd826db04078e"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a9d0f8ff9d6c060b4bf1da6450bb7312",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4055,
        "upload_time": "2022-10-27T14:16:36",
        "upload_time_iso_8601": "2022-10-27T14:16:36.635439Z",
        "url": "https://files.pythonhosted.org/packages/e1/f4/8c5517ebd953b0e070d7fcee9ae96c9a0cb72ffa4c4a6ecc25590467222f/postgres-dynamic-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22dc93d0881e5be6d8edd9e4b1463fa74ad1ef9c1039157443f2abc18111819c",
          "md5": "dc1a4a0c32af36aa3f557ccccfc78cfd",
          "sha256": "fa55c90120bdd82e995e34d8b67b1ddd4ef157dd360f037751fd7d9aee60c883"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc1a4a0c32af36aa3f557ccccfc78cfd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7858,
        "upload_time": "2022-10-31T02:44:50",
        "upload_time_iso_8601": "2022-10-31T02:44:50.427537Z",
        "url": "https://files.pythonhosted.org/packages/22/dc/93d0881e5be6d8edd9e4b1463fa74ad1ef9c1039157443f2abc18111819c/postgres_dynamic-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc5db290049b97b37a30df695be46c4bc37886a636ad4014c7f344936a60f68e",
          "md5": "422021b8a2e30de001d8e0e96e6ba141",
          "sha256": "9e4ec235aef1f33dd02aa53e87b36fb7a0b65b5525f89d4d3f26767af993104c"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "422021b8a2e30de001d8e0e96e6ba141",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9370,
        "upload_time": "2022-10-31T02:44:52",
        "upload_time_iso_8601": "2022-10-31T02:44:52.638317Z",
        "url": "https://files.pythonhosted.org/packages/dc/5d/b290049b97b37a30df695be46c4bc37886a636ad4014c7f344936a60f68e/postgres-dynamic-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1da5882e381949209ebd921c554117ad836654659f1786cc23327c941072d1f9",
          "md5": "60ba7cc3a34a6ba7768dbbb30998cc3e",
          "sha256": "6f7b3c5e34be194dab6071f04aa174f4de8b39085a5d0586ceef000753f5aefb"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60ba7cc3a34a6ba7768dbbb30998cc3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7926,
        "upload_time": "2022-10-31T03:01:16",
        "upload_time_iso_8601": "2022-10-31T03:01:16.214946Z",
        "url": "https://files.pythonhosted.org/packages/1d/a5/882e381949209ebd921c554117ad836654659f1786cc23327c941072d1f9/postgres_dynamic-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "163b2def2e8f8a76b56b1544264cdbbdff3ed4215690a3ea23408ecd38c1103a",
          "md5": "ea977f84f02efefb535c758b5e65d9fa",
          "sha256": "49d1d66de7d779bc26b6155205b92c95670f215a798eda3c0322d7c74b2235da"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ea977f84f02efefb535c758b5e65d9fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9505,
        "upload_time": "2022-10-31T03:01:18",
        "upload_time_iso_8601": "2022-10-31T03:01:18.596796Z",
        "url": "https://files.pythonhosted.org/packages/16/3b/2def2e8f8a76b56b1544264cdbbdff3ed4215690a3ea23408ecd38c1103a/postgres-dynamic-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5ea5f14c5bebabe68f4a8c7312ebb1904cc8168e167d6cabbf2812300f8dc6f",
          "md5": "5accd3cf6fc4d5274e88785a03bb97fa",
          "sha256": "14e221f2bfa47231a152f51518dfae2477c4170b69190145e325ac8b685278ad"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5accd3cf6fc4d5274e88785a03bb97fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7918,
        "upload_time": "2022-10-31T09:39:08",
        "upload_time_iso_8601": "2022-10-31T09:39:08.907633Z",
        "url": "https://files.pythonhosted.org/packages/b5/ea/5f14c5bebabe68f4a8c7312ebb1904cc8168e167d6cabbf2812300f8dc6f/postgres_dynamic-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3157201577ae34fdc5ae60a5e43aa8dff728264b215252a2893ff5f83bd1e59",
          "md5": "76d1fef2f263908e61f8af707f436b87",
          "sha256": "96e3d9177763510a2803d2b51d8046c65a81bc27019d6dc0065709cca3f8414f"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "76d1fef2f263908e61f8af707f436b87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9532,
        "upload_time": "2022-10-31T09:39:11",
        "upload_time_iso_8601": "2022-10-31T09:39:11.578016Z",
        "url": "https://files.pythonhosted.org/packages/b3/15/7201577ae34fdc5ae60a5e43aa8dff728264b215252a2893ff5f83bd1e59/postgres-dynamic-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e4c8119a44dc20223929f4348db25cd24372d77a6119d95bad10220489e1fdc",
          "md5": "8375d757d1dc23e5f40e21a68b29e2fd",
          "sha256": "52194c0bd26d153226dacb55196dc3a49486697c7a8ceec2e756f46b11d95cd3"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8375d757d1dc23e5f40e21a68b29e2fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8701,
        "upload_time": "2022-11-01T03:55:43",
        "upload_time_iso_8601": "2022-11-01T03:55:43.405188Z",
        "url": "https://files.pythonhosted.org/packages/5e/4c/8119a44dc20223929f4348db25cd24372d77a6119d95bad10220489e1fdc/postgres_dynamic-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbfadcae1275050028cc2c4dd7dc5d2bf487358f505be92da5b79a1f64db3e59",
          "md5": "a36ee4fe0811e23a756c36d04886015b",
          "sha256": "ab15bd6d05fe5998f6ed429d71e47b1829c69e5347757e1fc75da63a9b2b66bd"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a36ee4fe0811e23a756c36d04886015b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9707,
        "upload_time": "2022-11-01T03:55:45",
        "upload_time_iso_8601": "2022-11-01T03:55:45.875896Z",
        "url": "https://files.pythonhosted.org/packages/db/fa/dcae1275050028cc2c4dd7dc5d2bf487358f505be92da5b79a1f64db3e59/postgres-dynamic-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cabcf06659b866af8fc64c4fef14fccb5ff440bf5729befb7814c19339f1101",
          "md5": "6a4a15521517140dfd925b794232996a",
          "sha256": "a3940917930738db3ef4fe8f292d4ce2bdd6864414538e96ba966d353bd73f9a"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a4a15521517140dfd925b794232996a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8737,
        "upload_time": "2022-11-09T08:02:07",
        "upload_time_iso_8601": "2022-11-09T08:02:07.216787Z",
        "url": "https://files.pythonhosted.org/packages/8c/ab/cf06659b866af8fc64c4fef14fccb5ff440bf5729befb7814c19339f1101/postgres_dynamic-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46c9c2913289bc02965047d0ea18a087aace10324ebcd3ffb845d2e76e27a20d",
          "md5": "5820a188fa85739b889de999fcf7cec2",
          "sha256": "1fed2e84abcf08c82e8b5117c3e5df89fe406a6c9d426ede60c51f9032adf106"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5820a188fa85739b889de999fcf7cec2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9741,
        "upload_time": "2022-11-09T08:02:09",
        "upload_time_iso_8601": "2022-11-09T08:02:09.873277Z",
        "url": "https://files.pythonhosted.org/packages/46/c9/c2913289bc02965047d0ea18a087aace10324ebcd3ffb845d2e76e27a20d/postgres-dynamic-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a924109d3c01e234077eb7c1f92b048dcc271c4573d78470c5ae38edbe920c12",
          "md5": "6f30b6475ff0b49bb7f739bb9cc086f6",
          "sha256": "3ff9890d5d286417fbf89766ece604d4c711a12946c0e61c4ed95ae9cb50dcde"
        },
        "downloads": -1,
        "filename": "postgres_dynamic-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f30b6475ff0b49bb7f739bb9cc086f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8676,
        "upload_time": "2022-11-10T04:52:50",
        "upload_time_iso_8601": "2022-11-10T04:52:50.702159Z",
        "url": "https://files.pythonhosted.org/packages/a9/24/109d3c01e234077eb7c1f92b048dcc271c4573d78470c5ae38edbe920c12/postgres_dynamic-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6626e4d944e521642a69e953e83ba241111013be905771198c21e11497c8d819",
          "md5": "01627ee54e082f3fa2d929dea0790547",
          "sha256": "e140832bbbb9e53439a5f2b80d570056afeb9dfe63e0cbd4c32ed45f205f7954"
        },
        "downloads": -1,
        "filename": "postgres-dynamic-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "01627ee54e082f3fa2d929dea0790547",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9659,
        "upload_time": "2022-11-10T04:52:53",
        "upload_time_iso_8601": "2022-11-10T04:52:53.050353Z",
        "url": "https://files.pythonhosted.org/packages/66/26/e4d944e521642a69e953e83ba241111013be905771198c21e11497c8d819/postgres-dynamic-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fecc2a3084eef3b7317a8b0206c8b46be1032a65b3980554f55612e3dcc5c771",
        "md5": "da93ff2d34a9e75592bd9c965593ea54",
        "sha256": "a4e1de22e65ac64fedc6651392a1efa280b39215bb3804f92aae88ccf9ddbe36"
      },
      "downloads": -1,
      "filename": "postgres_dynamic-0.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da93ff2d34a9e75592bd9c965593ea54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7539,
      "upload_time": "2022-11-30T03:18:18",
      "upload_time_iso_8601": "2022-11-30T03:18:18.720315Z",
      "url": "https://files.pythonhosted.org/packages/fe/cc/2a3084eef3b7317a8b0206c8b46be1032a65b3980554f55612e3dcc5c771/postgres_dynamic-0.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "027988dcff6ada781ccf6c0f9d21e6b04440d4373a2edc203eaefa58c939ff8b",
        "md5": "d474950aa761d99ac07151d987ae52b0",
        "sha256": "38db1a53b9b6de36cb5497cc4a875183fd134793412cd20f06b8ccdfe0365229"
      },
      "downloads": -1,
      "filename": "postgres-dynamic-0.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "d474950aa761d99ac07151d987ae52b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8534,
      "upload_time": "2022-11-30T03:18:21",
      "upload_time_iso_8601": "2022-11-30T03:18:21.185573Z",
      "url": "https://files.pythonhosted.org/packages/02/79/88dcff6ada781ccf6c0f9d21e6b04440d4373a2edc203eaefa58c939ff8b/postgres-dynamic-0.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}