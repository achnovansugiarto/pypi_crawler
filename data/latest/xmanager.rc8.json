{
  "info": {
    "author": "DeepMind Technologies Limited",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# XManager: A framework for managing machine learning experiments üßë‚Äçüî¨\n\n<!-- Note that links in README.md have to be absolute as it also lands on PyPI. -->\n\nXManager is a platform for packaging, running and keeping track of machine\nlearning experiments. It currently enables one to launch experiments locally or\non [Google Cloud Platform (GCP)](https://cloud.google.com/). Interaction with\nexperiments is done via XManager's APIs through Python *launch scripts*. Check\nout\n[these slides](https://storage.googleapis.com/gresearch/xmanager/deepmind_xmanager_slides.pdf)\nfor a more detailed introduction.\n\n\nTo get started, install [XManager](#install-xmanager), its\n[prerequisites](#prerequisites) if needed and follow [the\ntutorial](#writing-xmanager-launch-scripts) or a codelab\n([Colab Notebook](https://colab.research.google.com/github/deepmind/xmanager/blob/master/colab_codelab.ipynb) / [Jupyter Notebook](https://github.com/deepmind/xmanager/blob/main/jupyter_codelab.ipynb))\nto create and run a launch script.\n\nSee\n[CONTRIBUTING.md](https://github.com/deepmind/xmanager/blob/main/CONTRIBUTING.md)\nfor guidance on contributions.\n\n## Install XManager\n\n```bash\npip install git+https://github.com/deepmind/xmanager.git\n```\n\nOr, alternatively, [a PyPI project](https://pypi.org/project/xmanager/) is also\navailable.\n\n```bash\npip install xmanager\n```\n\nOn Debian-based systems, XManager and all its dependencies can be installed and\nset up by cloning this repository and then running\n\n```sh\ncd xmanager/setup_scripts && chmod +x setup_all.sh && . ./setup_all.sh\n```\n\n## Prerequisites\n\nThe codebase assumes Python 3.9+.\n\n### Install Docker (optional)\n\nIf you use `xmanager.xm.PythonDocker` to run XManager experiments,\nyou need to install Docker.\n\n1. Follow [the steps](https://docs.docker.com/engine/install/#supported-platforms)\n   to install Docker.\n\n2. And if you are a Linux user, follow [the steps](https://docs.docker.com/engine/install/linux-postinstall/)\n   to enable sudoless Docker.\n\n### Install Bazel (optional)\n\nIf you use `xmanager.xm_local.BazelContainer` or `xmanager.xm_local.BazelBinary`\nto run XManager experiments, you need to install Bazel.\n\n1. Follow [the steps](https://docs.bazel.build/versions/master/install.html) to\n   install Bazel.\n\n### Create a GCP project (optional)\n\nIf you use `xm_local.Vertex` ([Vertex AI](https://cloud.google.com/vertex-ai))\nto run XManager experiments, you need to have a GCP project in order to be able\nto access Vertex AI to run jobs.\n\n1. [Create](https://console.cloud.google.com/) a GCP project.\n\n2. [Install](https://cloud.google.com/sdk/docs/install) `gcloud`.\n\n3. Associate your Google Account (Gmail account) with your GCP project by\n   running:\n\n   ```bash\n   export GCP_PROJECT=<GCP PROJECT ID>\n   gcloud auth login\n   gcloud auth application-default login\n   gcloud config set project $GCP_PROJECT\n   ```\n\n4. Set up `gcloud` to work with Docker by running:\n\n   ```bash\n   gcloud auth configure-docker\n   ```\n\n5. Enable Google Cloud Platform APIs.\n\n   * [Enable](https://console.cloud.google.com/apis/library/iam.googleapis.com)\n     IAM.\n\n   * [Enable](https://console.cloud.google.com/apis/library/aiplatform.googleapis.com)\n     the 'Cloud AI Platfrom'.\n\n   * [Enable](https://console.cloud.google.com/apis/library/containerregistry.googleapis.com)\n     the 'Container Registry'.\n\n6. Create a staging bucket in us-central1 if you do not already have one. This\n   bucket should be used to save experiment artifacts like TensorFlow log files,\n   which can be read by TensorBoard. This bucket may also be used to stage files\n   to build your Docker image if you build your images remotely.\n\n   ```bash\n   export GOOGLE_CLOUD_BUCKET_NAME=<GOOGLE_CLOUD_BUCKET_NAME>\n   gsutil mb -l us-central1 gs://$GOOGLE_CLOUD_BUCKET_NAME\n   ```\n\n   Add `GOOGLE_CLOUD_BUCKET_NAME` to the environment variables or your .bashrc:\n\n   ```bash\n   export GOOGLE_CLOUD_BUCKET_NAME=<GOOGLE_CLOUD_BUCKET_NAME>\n   ```\n\n## Writing XManager launch scripts\n\n<details>\n  <summary>\n    A snippet for the impatient üôÇ\n  </summary>\n\n```python\n# Contains core primitives and APIs.\nfrom xmanager import xm\n# Implementation of those core concepts for what we call 'the local backend',\n# which means all executables are sent for execution from this machine,\n# independently of whether they are actually executed on our machine or on GCP.\nfrom xmanager import xm_local\n#\n# Creates an experiment context and saves its metadata to the database, which we\n# can reuse later via `xm_local.list_experiments`, for example. Note that\n# `experiment` has tracking properties such as `id`.\nwith xm_local.create_experiment(experiment_title='cifar10') as experiment:\n  # Packaging prepares a given *executable spec* for running with a concrete\n  # *executor spec*: depending on the combination, that may involve building\n  # steps and / or copying the results somewhere. For example, a\n  # `xm.python_container` designed to run on `Kubernetes` will be built via\n  #`docker build`, and the new image will be uploaded to the container registry.\n  # But for our simple case where we have a prebuilt Linux binary designed to\n  # run locally only some validations are performed -- for example, that the\n  # file exists.\n  #\n  # `executable` contains all the necessary information needed to launch the\n  # packaged blob via `.add`, see below.\n  [executable] = experiment.package([\n      xm.binary(\n          # What we are going to run.\n          path='/home/user/project/a.out',\n          # Where we are going to run it.\n          executor_spec=xm_local.Local.Spec(),\n      )\n  ])\n  #\n  # Let's find out which `batch_size` is best -- presumably our jobs write the\n  # results somewhere.\n  for batch_size in [64, 1024]:\n    # `add` creates a new *experiment unit*, which is usually a collection of\n    # semantically united jobs, and sends them for execution. To pass an actual\n    # collection one may want to use `JobGroup`s (more about it later in the\n    # documentation), but for our purposes we are going to pass just one job.\n    experiment.add(xm.Job(\n        # The `a.out` we packaged earlier.\n        executable=executable,\n        # We are using the default settings here, but executors have plenty of\n        # arguments available to control execution.\n        executor=xm_local.Local(),\n        # Time to pass the batch size as a command-line argument!\n        args={'batch_size': batch_size},\n        # We can also pass environment variables.\n        env_vars={'HEAPPROFILE': '/tmp/a_out.hprof'},\n    ))\n  #\n  # The context will wait for locally run things (but not for remote things such\n  # as jobs sent to GCP, although they can be explicitly awaited via\n  # `wait_for_completion`).\n```\n\n</details>\n\nThe basic structure of an XManager launch script can be summarized by these\nsteps:\n\n1. Create an experiment and acquire its context.\n\n    ```python\n    from xmanager import xm\n    from xmanager import xm_local\n\n    with xm_local.create_experiment(experiment_title='cifar10') as experiment:\n    ```\n\n2. Define specifications of executables you want to run.\n\n    ```python\n    spec = xm.PythonContainer(\n        path='/path/to/python/folder',\n        entrypoint=xm.ModuleName('cifar10'),\n    )\n    ```\n\n3. Package your executables.\n\n    ```python\n    [executable] = experiment.package([\n      xm.Packageable(\n        executable_spec=spec,\n        executor_spec=xm_local.Vertex.Spec(),\n      ),\n    ])\n   ```\n\n4. Define your hyperparameters.\n\n    ```python\n    import itertools\n\n    batch_sizes = [64, 1024]\n    learning_rates = [0.1, 0.001]\n    trials = list(\n      dict([('batch_size', bs), ('learning_rate', lr)])\n      for (bs, lr) in itertools.product(batch_sizes, learning_rates)\n    )\n    ```\n\n5. Define resource requirements for each job.\n\n    ```python\n    requirements = xm.JobRequirements(T4=1)\n    ```\n\n6. For each trial, add a job / job groups to launch them.\n\n    ```python\n    for hyperparameters in trials:\n      experiment.add(xm.Job(\n          executable=executable,\n          executor=xm_local.Vertex(requirements=requirements),\n          args=hyperparameters,\n        ))\n    ```\n\nNow we should be ready [to run](#run-xmanager) the launch script.\n\nTo learn more about different *executables* and *executors* follow\n['Components'](#components).\n\n## Run XManager\n\n```bash\nxmanager launch ./xmanager/examples/cifar10_tensorflow/launcher.py\n```\n\nIn order to run multi-job experiments, the `--xm_wrap_late_bindings` flag might\nbe required:\n\n```bash\nxmanager launch ./xmanager/examples/cifar10_tensorflow/launcher.py -- --xm_wrap_late_bindings\n```\n\n<!-- TODO: Elaborate on why that is necessary. -->\n\n## Components\n\n### Executable specifications\n\nXManager executable specifications define what should be packaged in the form of\nbinaries, source files, and other input dependencies required for job execution.\nExecutable specifications are reusable and generally platform-independent.\n\nSee\n[executable_specs.md](https://github.com/deepmind/xmanager/blob/main/docs/executable_specs.md)\nfor details on each executable specification.\n\n| Name | Description |\n| --- | --- |\n| `xmanager.xm.Container` | A pre-built `.tar` image. |\n| `xmanager.xm.BazelContainer` | A [Bazel](https://bazel.build/) target producing a `.tar` image. |\n| `xmanager.xm.Binary` | A pre-built binary. |\n| `xmanager.xm.BazelBinary` | A [Bazel](https://bazel.build/) target producing a self-contained binary. |\n| `xmanager.xm.PythonContainer` | A directory with Python modules to be packaged as a Docker container. |\n\n\n### Executors\n\nXManager executors define a platform where the job runs and resource\nrequirements for the job.\n\nEach executor also has a specification which describes how an executable\nspecification should be prepared and packaged.\n\nSee\n[executors.md](https://github.com/deepmind/xmanager/blob/main/docs/executors.md)\nfor details on each executor.\n\n| Name | Description |\n| --- | --- |\n| `xmanager.xm_local.Local` | Runs a binary or a container locally. |\n| `xmanager.xm_local.Vertex` | Runs a container on [Vertex AI](#create-a-gcp-project-(optional)). |\n| `xmanager.xm_local.Kubernetes` | Runs a container on Kubernetes. |\n\n### Job / JobGroup\n\nA `Job` represents a single executable on a particular executor, while a\n`JobGroup` unites a group of `Job`s providing a gang scheduling concept:\n`Job`s inside them are scheduled / descheduled simultaneously. Same `Job`\nand `JobGroup` instances can be `add`ed multiple times.\n\n#### Job\n\nA Job accepts an executable and an executor along with hyperparameters which can\neither be command-line arguments or environment variables.\n\nCommand-line arguments can be passed in list form, `[arg1, arg2, arg3]`:\n\n```bash\nbinary arg1 arg2 arg3\n```\n\nThey can also be passed in dictionary form, `{key1: value1, key2: value2}`:\n\n```bash\nbinary --key1=value1 --key2=value2\n```\n\nEnvironment variables are always passed in `Dict[str, str]` form:\n\n```bash\nexport KEY=VALUE\n```\n\nJobs are defined like this:\n\n```python\n[executable] = xm.Package(...)\n\nexecutor = xm_local.Vertex(...)\n\nxm.Job(\n    executable=executable,\n    executor=executor,\n    args={\n        'batch_size': 64,\n    },\n    env_vars={\n        'NCCL_DEBUG': 'INFO',\n    },\n)\n```\n\n#### JobGroup\n\nA JobGroup accepts jobs in a kwargs form. The keyword can be any valid Python\nidentifier. For example, you can call your jobs 'agent' and 'observer'.\n\n```python\nagent_job = xm.Job(...)\nobserver_job = xm.Job(...)\n\nxm.JobGroup(agent=agent_job, observer=observer_job)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xmanager",
    "package_url": "https://pypi.org/project/xmanager/",
    "platform": null,
    "project_url": "https://pypi.org/project/xmanager/",
    "project_urls": {
      "Homepage": "https://github.com/deepmind/xmanager",
      "Issue tracker": "https://github.com/deepmind/xmanager/issues"
    },
    "release_url": "https://pypi.org/project/xmanager/0.3.0/",
    "requires_dist": [
      "absl-py",
      "alembic (==1.4.3)",
      "async-generator",
      "attrs",
      "cloud-sql-python-connector",
      "docker",
      "google-api-core",
      "google-api-python-client",
      "google-auth",
      "google-cloud-aiplatform",
      "google-cloud-storage",
      "humanize",
      "immutabledict",
      "kubernetes",
      "pyyaml",
      "sqlalchemy (==1.2.19)",
      "sqlparse",
      "termcolor"
    ],
    "requires_python": ">=3.9",
    "summary": "A framework for managing machine learning experiments",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15268844,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c447942e98e3d98262c187a196a85bc4ca7348d34016d6f158c679f09eb2a0e6",
          "md5": "b265334e52ad03045b017387d343ceef",
          "sha256": "80a724ff3a74aa3a8dbde83274067940681bdb857633bae34059d44b6c2bca85"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b265334e52ad03045b017387d343ceef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 175239,
        "upload_time": "2021-10-06T15:53:36",
        "upload_time_iso_8601": "2021-10-06T15:53:36.253283Z",
        "url": "https://files.pythonhosted.org/packages/c4/47/942e98e3d98262c187a196a85bc4ca7348d34016d6f158c679f09eb2a0e6/xmanager-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57333e76e017b0b7c10b3b1a5647df91e9fc17d8f161be6a3528abce45657f5e",
          "md5": "7950e3b7e56f3d2a77ab23aff4552ca8",
          "sha256": "204e40eae72f170ce9139d353dacc6a09f6ea268c3d4c4e11d6059776b9992f1"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7950e3b7e56f3d2a77ab23aff4552ca8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 135235,
        "upload_time": "2021-10-06T15:53:38",
        "upload_time_iso_8601": "2021-10-06T15:53:38.280885Z",
        "url": "https://files.pythonhosted.org/packages/57/33/3e76e017b0b7c10b3b1a5647df91e9fc17d8f161be6a3528abce45657f5e/xmanager-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edc39519aefa790937738bdbcbdc040683cf6baf44f41ba567d123baf062b2a5",
          "md5": "7d3110fca0cbd333e6e5103fe731ddfe",
          "sha256": "8ef69a074f68e7ffc4675d1fa49ba3fdaa008b13499e5c2d37b830d93bbc805e"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d3110fca0cbd333e6e5103fe731ddfe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 180297,
        "upload_time": "2021-10-06T16:29:04",
        "upload_time_iso_8601": "2021-10-06T16:29:04.644946Z",
        "url": "https://files.pythonhosted.org/packages/ed/c3/9519aefa790937738bdbcbdc040683cf6baf44f41ba567d123baf062b2a5/xmanager-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d24073834c0b30006b1caaa03a4d963688a2ee70cbb563f4076bf926f7093f76",
          "md5": "727ce80234f805d8cbc91c29d6766ff7",
          "sha256": "a221986a6ea50a774ecd4845ce2207113d178f59433e817ef04bd946561f4027"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "727ce80234f805d8cbc91c29d6766ff7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 140976,
        "upload_time": "2021-10-06T16:29:07",
        "upload_time_iso_8601": "2021-10-06T16:29:07.400883Z",
        "url": "https://files.pythonhosted.org/packages/d2/40/73834c0b30006b1caaa03a4d963688a2ee70cbb563f4076bf926f7093f76/xmanager-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fe929bf3a9dd523fdf3d4d3cbd37bf8cd14f7b507d22caed9f4aac99149a315",
          "md5": "768ec724e611c9276c6e75042b2b3c84",
          "sha256": "ac6bff97e82ee4dc7a2504d4df63127c70363666e53c9bf6fd7f9072d0c490fe"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "768ec724e611c9276c6e75042b2b3c84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 182868,
        "upload_time": "2021-10-22T00:45:14",
        "upload_time_iso_8601": "2021-10-22T00:45:14.845435Z",
        "url": "https://files.pythonhosted.org/packages/6f/e9/29bf3a9dd523fdf3d4d3cbd37bf8cd14f7b507d22caed9f4aac99149a315/xmanager-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3252d2dc7f3032e5bb5a017abe4afeb58caa6c96f5a394106749d9fe42afe4ed",
          "md5": "d9b42edd0a53d5a0d5585e1eef94ccc1",
          "sha256": "a8009c549e6dc6f2103dc09de3fe8317e49927d68ece0bb13ed0b434ec22a9d9"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d9b42edd0a53d5a0d5585e1eef94ccc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 142550,
        "upload_time": "2021-10-22T00:45:16",
        "upload_time_iso_8601": "2021-10-22T00:45:16.681959Z",
        "url": "https://files.pythonhosted.org/packages/32/52/d2dc7f3032e5bb5a017abe4afeb58caa6c96f5a394106749d9fe42afe4ed/xmanager-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "021a1845a648caedd102c9a68cab93a80ff21467f9e15472cd45bb89efe122b2",
          "md5": "315fab8606f78a576bd638fa075b449d",
          "sha256": "ed2c0877993f12d2c4852176bad4f2742dae91afda8275359924d6da67fda823"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "315fab8606f78a576bd638fa075b449d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 187574,
        "upload_time": "2021-11-05T10:24:26",
        "upload_time_iso_8601": "2021-11-05T10:24:26.172414Z",
        "url": "https://files.pythonhosted.org/packages/02/1a/1845a648caedd102c9a68cab93a80ff21467f9e15472cd45bb89efe122b2/xmanager-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8873a2a4de9c9a9de2c55afd320305db0302215ea6378e6dac3a0c86fddaa4a2",
          "md5": "580e4a143980df8283e116343f2bc534",
          "sha256": "d9b6f7a9e186fdd12ad6a56f0b8e256aec919891c37de7ff3d0ca7fdaa557f13"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "580e4a143980df8283e116343f2bc534",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 144543,
        "upload_time": "2021-11-05T10:24:27",
        "upload_time_iso_8601": "2021-11-05T10:24:27.415087Z",
        "url": "https://files.pythonhosted.org/packages/88/73/a2a4de9c9a9de2c55afd320305db0302215ea6378e6dac3a0c86fddaa4a2/xmanager-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1626855e4ae9543a3758b6a820b5be1132bd83f76c24e713073428c2b6e40b82",
          "md5": "c2feaa762f7457b075a57ba2f548ea4b",
          "sha256": "625e7f76510abb34d9d2db255abd8a280c95e54f211120f70115d50dbaddf601"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2feaa762f7457b075a57ba2f548ea4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 196598,
        "upload_time": "2022-02-03T14:02:16",
        "upload_time_iso_8601": "2022-02-03T14:02:16.636145Z",
        "url": "https://files.pythonhosted.org/packages/16/26/855e4ae9543a3758b6a820b5be1132bd83f76c24e713073428c2b6e40b82/xmanager-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40d021f39622591e52eb21468ce0f442290b358a714129b8b14cce0fe3c0e79a",
          "md5": "9d3c884433856f86e755403d73b441b3",
          "sha256": "b52960c67076ea31b6df24e1a10911b75534daccfa91d39c658d223558a343d6"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9d3c884433856f86e755403d73b441b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 150233,
        "upload_time": "2022-02-03T14:02:18",
        "upload_time_iso_8601": "2022-02-03T14:02:18.509378Z",
        "url": "https://files.pythonhosted.org/packages/40/d0/21f39622591e52eb21468ce0f442290b358a714129b8b14cce0fe3c0e79a/xmanager-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f21dff5aa0ae7b896160680a20b4e5703fd469f408b84a126bde6db00a44c623",
          "md5": "18758d35ee1795ce84d9920f85a07496",
          "sha256": "05dd622e62b20f4db88e0a63cd608536a6d2804a41a102f57fd05975f54527d3"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18758d35ee1795ce84d9920f85a07496",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 199122,
        "upload_time": "2022-03-15T14:12:23",
        "upload_time_iso_8601": "2022-03-15T14:12:23.432904Z",
        "url": "https://files.pythonhosted.org/packages/f2/1d/ff5aa0ae7b896160680a20b4e5703fd469f408b84a126bde6db00a44c623/xmanager-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4364dc9cf58a263c1b82930b7ae02e3c5738454e62bfd53c8a84234f753614a8",
          "md5": "687379578c104ed86067d8dce72e4faf",
          "sha256": "749ab2dac390a4cd6d94c93f927cc52d7cef8ee7ffcb329e029e3f0db3278997"
        },
        "downloads": -1,
        "filename": "xmanager-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "687379578c104ed86067d8dce72e4faf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 151968,
        "upload_time": "2022-03-15T14:12:25",
        "upload_time_iso_8601": "2022-03-15T14:12:25.679706Z",
        "url": "https://files.pythonhosted.org/packages/43/64/dc9cf58a263c1b82930b7ae02e3c5738454e62bfd53c8a84234f753614a8/xmanager-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b937bec4d0dde24f79c77274bfe40aa203a6bd930030499b51ca1236699b841",
          "md5": "308bbc23303fb85a23a19cf848228507",
          "sha256": "4b3bb2406ee83e272acf999b833c8b3e747146761d61582ba9f49b4404ea12b4"
        },
        "downloads": -1,
        "filename": "xmanager-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "308bbc23303fb85a23a19cf848228507",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 201663,
        "upload_time": "2022-05-06T11:13:46",
        "upload_time_iso_8601": "2022-05-06T11:13:46.353414Z",
        "url": "https://files.pythonhosted.org/packages/4b/93/7bec4d0dde24f79c77274bfe40aa203a6bd930030499b51ca1236699b841/xmanager-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "747017a6a1cda1e8495e7efa2a610df50356b660cfbeb1543c8a4ccc31996020",
          "md5": "b7ca5819334c7569068ce1e56afe8619",
          "sha256": "f68962aad2275b20f10323db75805bd5e6e07fb13c5947d7ad571dad62705244"
        },
        "downloads": -1,
        "filename": "xmanager-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b7ca5819334c7569068ce1e56afe8619",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 153966,
        "upload_time": "2022-05-06T11:13:48",
        "upload_time_iso_8601": "2022-05-06T11:13:48.154105Z",
        "url": "https://files.pythonhosted.org/packages/74/70/17a6a1cda1e8495e7efa2a610df50356b660cfbeb1543c8a4ccc31996020/xmanager-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f91258d429e4bf210c10b89819a9dcfce8d2e20832c45f85a9c900a6cc5220b5",
          "md5": "a69c45cf0c3339f07e8dd08164ce5209",
          "sha256": "f39339c3515afa56fc9a596dc0fe035c6573935758d1b084f581d0c0f2393823"
        },
        "downloads": -1,
        "filename": "xmanager-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a69c45cf0c3339f07e8dd08164ce5209",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 216319,
        "upload_time": "2022-09-30T14:49:08",
        "upload_time_iso_8601": "2022-09-30T14:49:08.237042Z",
        "url": "https://files.pythonhosted.org/packages/f9/12/58d429e4bf210c10b89819a9dcfce8d2e20832c45f85a9c900a6cc5220b5/xmanager-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e95068ff7c3d501f66f885a136d72cd25fbae84b5599733398707d68bd326d83",
          "md5": "dda5e34d28759366e35c58865e7dbdd3",
          "sha256": "8118d2857847fe2325bfbe4d3bc660b51323ad68f94ead89e7651329f1ce107f"
        },
        "downloads": -1,
        "filename": "xmanager-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dda5e34d28759366e35c58865e7dbdd3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 157274,
        "upload_time": "2022-09-30T14:49:10",
        "upload_time_iso_8601": "2022-09-30T14:49:10.067968Z",
        "url": "https://files.pythonhosted.org/packages/e9/50/68ff7c3d501f66f885a136d72cd25fbae84b5599733398707d68bd326d83/xmanager-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f91258d429e4bf210c10b89819a9dcfce8d2e20832c45f85a9c900a6cc5220b5",
        "md5": "a69c45cf0c3339f07e8dd08164ce5209",
        "sha256": "f39339c3515afa56fc9a596dc0fe035c6573935758d1b084f581d0c0f2393823"
      },
      "downloads": -1,
      "filename": "xmanager-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a69c45cf0c3339f07e8dd08164ce5209",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 216319,
      "upload_time": "2022-09-30T14:49:08",
      "upload_time_iso_8601": "2022-09-30T14:49:08.237042Z",
      "url": "https://files.pythonhosted.org/packages/f9/12/58d429e4bf210c10b89819a9dcfce8d2e20832c45f85a9c900a6cc5220b5/xmanager-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e95068ff7c3d501f66f885a136d72cd25fbae84b5599733398707d68bd326d83",
        "md5": "dda5e34d28759366e35c58865e7dbdd3",
        "sha256": "8118d2857847fe2325bfbe4d3bc660b51323ad68f94ead89e7651329f1ce107f"
      },
      "downloads": -1,
      "filename": "xmanager-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dda5e34d28759366e35c58865e7dbdd3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 157274,
      "upload_time": "2022-09-30T14:49:10",
      "upload_time_iso_8601": "2022-09-30T14:49:10.067968Z",
      "url": "https://files.pythonhosted.org/packages/e9/50/68ff7c3d501f66f885a136d72cd25fbae84b5599733398707d68bd326d83/xmanager-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}