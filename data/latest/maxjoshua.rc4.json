{
  "info": {
    "author": "Ulf Hamster",
    "author_email": "554c46@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "|PyPI version| |Language grade: Python| |Total alerts|\n\nmaxjoshua\n=========\n\nFeature selection for hard voting classifier and NN sparse weight\ninitialization.\n\nPreface\n-------\n\nI am naming this software package in memory of my late nephew Max Joshua\nHamster (\\* 2005 to † June 18, 2022).\n\nUsage\n-----\n\nForward Selection for Hard Voting Classifier\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLoad toy data set and convert features to binary.\n\n.. code:: py\n\n   from sklearn.datasets import load_breast_cancer\n   from sklearn.preprocessing import scale\n   X = scale(load_breast_cancer().data, axis=0) > 0  # convert to binary features\n   y = load_breast_cancer().target\n\nSelect binary features. Each row in the ``results`` list contains the\n``n_select`` column indices of ``X``, the notice if the binary features\nwere negated, and the sum of absolute MCC correlation coeffcients\nbetween the selected features.\n\n.. code:: py\n\n   import maxjoshua as mh\n   idx, neg, rho, results = mh.binsel(\n       X, y, preselect=0.8, oob_score=True, subsample=0.5, \n       n_select=5, unique=True, n_draws=100, random_state=42)\n\n**Algorithm**. The task is to select e.g. ``n_select`` features from a\npool of many features. These features might be the prediction of binary\nclassifiers. The selected features are then combined into one\nhard-voting classifier.\n\nA voting classifier should have the following properties\n\n-  each voter (a binary feature) should be highly correlated to the\n   target variable\n-  the selected features should be uncorrelated.\n\nThe algorithm works as follows\n\n1. Generate multiple correlation matrices by bootstrapping. This\n   includes ``corr(X_i, X_j)`` as well as ``corr(Y, X_i)`` computation.\n   Also store the oob samples for evaluation.\n2. For each correlation matrix do …\n\n   a. Preselect the ``i*`` with the highest ``abs(corr(Y, X_i))``\n      estimates (e.g. pick the ``n_pre=?`` highest absolute\n      correlations)\n   b. Slice a correlation matrix ``corr(X_i*, X_j*)`` and find the least\n      correlated combination of ``n_select`` features. (see\n      ```korr.mincorr`` <https://github.com/kmedian/korr/blob/master/korr/mincorr.py>`__)\n   c. Compute the out-of-bag (OOB) performance (see step 1) of the\n      hard-voter with the selected ``n_select=?`` features\n\n3. Select the feature combination with the best OOB performance as final\n   model.\n\nForward Selection for Linear Regression\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLoad toy dataset.\n\n.. code:: py\n\n   from sklearn.preprocessing import scale\n   from sklearn.datasets import fetch_california_housing\n   housing = fetch_california_housing()\n   X = scale(housing[\"data\"], axis=0)\n   y = scale(housing[\"target\"])\n\nSelect real-numbered features. Each row in the ``results`` list contains\nthe ``n_select`` column indices of ``X``, the ridge regression\ncoefficents ``beta`` and the RMSE ``loss``. Warning! Please note that\nthe features ``X`` and the target ``y`` must be scaled because\n``mh.fltsel`` uses an L2-penalty on ``beta`` coefficients, and doesn’t\nused an intercept term to shift ``y``.\n\n.. code:: py\n\n   import maxjoshua as mh\n   from sklearn.preprocessing import scale\n\n   idx, beta, loss, results = mh.fltsel(\n       scale(X), scale(y), preselect=0.8, oob_score=True, subsample=0.5, \n       n_select=5, unique=True, n_draws=100, random_state=42, l2=0.01)\n\nInitialize Sparse NN Layer\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe idea is to run ``mh.fltsel`` to generate an ensemble of linear\nmodels, and combine them in a sparse linear neural network layer, i.e.,\nthe number of output neurons is the ensemble size. In case of small\ndatasets, the sparse NN layer is non-trainable because because each\nsubmodel was already estimated and selected with two-way data splits in\n``mh.fltsel`` (see ``oob_scores`` and ``subsample``). The sparse NN\nlayers basically produces submodel predictions for meta model in the\nnext layer, i.e., a simple dense linear layer. The inputs of the sparse\nNN layer must be normalized for which a layer normalization layers is\ntrained.\n\n.. code:: py\n\n   import maxjoshua as mh\n   import tensorflow as tf\n   import sklearn.preprocessing\n\n   # create toy dataset\n   import sklearn.datasets\n   X, y = sklearn.datasets.make_regression(\n       n_samples=1000, n_features=100, n_informative=20, n_targets=3)\n\n   # feature selection\n   # - always scale the inputs and targets -\n   indices, values, num_in, num_out = mh.pretrain_submodels(\n       sklearn.preprocessing.scale(X), \n       sklearn.preprocessing.scale(y), \n       num_out=64, n_select=3)\n\n   # specify the model\n   model = tf.keras.models.Sequential([\n       # sub-models\n       mh.SparseLayerAsEnsemble(\n           num_in=num_in, \n           num_out=num_out, \n           sp_indices=indices, \n           sp_values=values,\n           sp_trainable=False,\n           norm_trainable=True,\n       ),\n       # meta model\n       tf.keras.layers.Dense(\n           units=3, use_bias=False,\n           # kernel_constraint=tf.keras.constraints.NonNeg()\n       ),\n       # scale up\n       mh.InverseTransformer(\n           units=3,\n           init_bias=y.mean(), \n           init_scale=y.std()\n       )\n   ])\n   model.compile(\n       optimizer=tf.keras.optimizers.Adam(\n           learning_rate=3e-4, beta_1=.9, beta_2=.999, epsilon=1e-7, amsgrad=True),\n       loss='mean_squared_error'\n   )\n\n   # train\n   history = model.fit(X, y, epochs=3)\n\nAppendix\n--------\n\nInstallation\n~~~~~~~~~~~~\n\nThe ``maxjoshua`` `git repo <http://github.com/ulf1/maxjoshua>`__ is\navailable as `PyPi package <https://pypi.org/project/maxjoshua>`__\n\n.. code:: sh\n\n   pip install maxjoshua\n\nInstall a virtual environment\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n   python3.7 -m venv .venv\n   source .venv/bin/activate\n   pip install --upgrade pip\n   pip install -r requirements.txt\n   pip install -r requirements-dev.txt\n   pip install -r requirements-demo.txt\n\n(If your git repo is stored in a folder with whitespaces, then don’t use\nthe subfolder ``.venv``. Use an absolute path without whitespaces.)\n\nPython commands\n~~~~~~~~~~~~~~~\n\n-  Jupyter for the examples: ``jupyter lab``\n-  Check syntax:\n   ``flake8 --ignore=F401 --exclude=$(grep -v '^#' .gitignore | xargs | sed -e 's/ /,/g')``\n-  Run Unit Tests: ``pytest``\n\nPublish\n\n.. code:: sh\n\n   pandoc README.md --from markdown --to rst -s -o README.rst\n   python setup.py sdist \n   twine upload -r pypi dist/*\n\nClean up\n~~~~~~~~\n\n::\n\n   find . -type f -name \"*.pyc\" | xargs rm\n   find . -type d -name \"__pycache__\" | xargs rm -r\n   rm -r .venv\n\nSupport\n-------\n\nPlease `open an issue <https://github.com/ulf1/maxjoshua/issues/new>`__\nfor support.\n\nContributing\n------------\n\nPlease contribute using `Github\nFlow <https://guides.github.com/introduction/flow/>`__. Create a branch,\nadd commits, and `open a pull\nrequest <https://github.com/ulf1/maxjoshua/compare/>`__.\n\n.. |PyPI version| image:: https://badge.fury.io/py/maxjoshua.svg\n   :target: https://badge.fury.io/py/maxjoshua\n.. |Language grade: Python| image:: https://img.shields.io/lgtm/grade/python/g/ulf1/maxjoshua.svg?logo=lgtm&logoWidth=18\n   :target: https://lgtm.com/projects/g/ulf1/maxjoshua/context:python\n.. |Total alerts| image:: https://img.shields.io/lgtm/alerts/g/ulf1/maxjoshua.svg?logo=lgtm&logoWidth=18\n   :target: https://lgtm.com/projects/g/ulf1/maxjoshua/alerts/\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ulf1/maxjoshua",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maxjoshua",
    "package_url": "https://pypi.org/project/maxjoshua/",
    "platform": null,
    "project_url": "https://pypi.org/project/maxjoshua/",
    "project_urls": {
      "Homepage": "http://github.com/ulf1/maxjoshua"
    },
    "release_url": "https://pypi.org/project/maxjoshua/0.4.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Feature selection for hard voting classifier and NN sparse weight initialization.",
    "version": "0.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14212004,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cbff98862d951352f236f10d39ba1761f01c87ff784e5e037fba15553d7f433",
          "md5": "b99ecfa88e5dfdacf6e3b58808718e65",
          "sha256": "b5209de91f68dff6f0d991b48937409997aecc79ea7f4cbf2d790b0bc98b005e"
        },
        "downloads": -1,
        "filename": "maxjoshua-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b99ecfa88e5dfdacf6e3b58808718e65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13701,
        "upload_time": "2022-06-20T22:15:23",
        "upload_time_iso_8601": "2022-06-20T22:15:23.363048Z",
        "url": "https://files.pythonhosted.org/packages/3c/bf/f98862d951352f236f10d39ba1761f01c87ff784e5e037fba15553d7f433/maxjoshua-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddb82d4facd2158201424810c83c794761a3c625132a65c8ecb9ca3c25600272",
          "md5": "b3b4cce04f4c09183038e74bbc66ffeb",
          "sha256": "ac231a65439a85c98daeab05c6b84bc1f6daeacee2126c08bdc9353bfda59eaf"
        },
        "downloads": -1,
        "filename": "maxjoshua-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b3b4cce04f4c09183038e74bbc66ffeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13918,
        "upload_time": "2022-06-21T12:12:11",
        "upload_time_iso_8601": "2022-06-21T12:12:11.121245Z",
        "url": "https://files.pythonhosted.org/packages/dd/b8/2d4facd2158201424810c83c794761a3c625132a65c8ecb9ca3c25600272/maxjoshua-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67412395ca00ca302a580066a3a620110d2bdf0508bd7e60c40869d860581cc4",
          "md5": "b8bd8c7776f32efc48288a02092d28d3",
          "sha256": "a25eb364a98d4b2119a75ca5805be73b8423fd4431377ca7f5f338877f0c1113"
        },
        "downloads": -1,
        "filename": "maxjoshua-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b8bd8c7776f32efc48288a02092d28d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16253,
        "upload_time": "2022-06-21T13:13:05",
        "upload_time_iso_8601": "2022-06-21T13:13:05.422106Z",
        "url": "https://files.pythonhosted.org/packages/67/41/2395ca00ca302a580066a3a620110d2bdf0508bd7e60c40869d860581cc4/maxjoshua-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7425a86ec806b2e5d1dcca3f5e393e1fc5261d16a3d755d6860ddeb7fcfdab20",
          "md5": "9d003195237183931ebfde5d190dcfdb",
          "sha256": "da5d66db90983bc390565c32892a2f5c97e8a3ab2e6b66dd227be838cb6cff6f"
        },
        "downloads": -1,
        "filename": "maxjoshua-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9d003195237183931ebfde5d190dcfdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16312,
        "upload_time": "2022-06-22T13:33:39",
        "upload_time_iso_8601": "2022-06-22T13:33:39.493900Z",
        "url": "https://files.pythonhosted.org/packages/74/25/a86ec806b2e5d1dcca3f5e393e1fc5261d16a3d755d6860ddeb7fcfdab20/maxjoshua-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7425a86ec806b2e5d1dcca3f5e393e1fc5261d16a3d755d6860ddeb7fcfdab20",
        "md5": "9d003195237183931ebfde5d190dcfdb",
        "sha256": "da5d66db90983bc390565c32892a2f5c97e8a3ab2e6b66dd227be838cb6cff6f"
      },
      "downloads": -1,
      "filename": "maxjoshua-0.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9d003195237183931ebfde5d190dcfdb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16312,
      "upload_time": "2022-06-22T13:33:39",
      "upload_time_iso_8601": "2022-06-22T13:33:39.493900Z",
      "url": "https://files.pythonhosted.org/packages/74/25/a86ec806b2e5d1dcca3f5e393e1fc5261d16a3d755d6860ddeb7fcfdab20/maxjoshua-0.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}