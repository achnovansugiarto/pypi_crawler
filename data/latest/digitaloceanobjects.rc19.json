{
  "info": {
    "author": "zoran ilievski",
    "author_email": "pythonic@clientuser.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<h1 align=\"center\">digitalocean objects (pip3 install digitaloceanobjects)</h1>\n<p align=\"left\"><b>everyone:</b> I wish, for once, to just have a simple object oriented experience with the api.</p>\n<p align=\"left\"><b>digitaloceanobjects:</b> </p>\n\n<p align=\"center\">\n<a href=\"https://github.com/zorani/digitalocean-objects\"><img src=\"https://img.shields.io/github/forks/zorani/digitalocean-objects.svg?style=social&label=Fork\"></a>\n<a href=\"https://github.com/zorani/digitalocean-objects\"><img src=\"https://img.shields.io/github/stars/zorani/digitalocean-objects.svg?style=social&label=Star\"></a>\n<a href=\"https://github.com/zorani/digitalocean-objects\"><img src=\"https://img.shields.io/github/watchers/zorani/digitalocean-objects.svg?style=social&label=Watch\"></a>\n</p>\n\nPlease visit <a href=\"https://github.com/zorani/digitalocean-objects\">GitHub</a> page for documentation that has navigation that works.\n\n# Table of Contents\n\n- [How to install](#how-to-install)\n- [Configurations](#configurations)\n- [OMG OMG SHOW ME SHOW ME HOW... NOW!!!](#omg-omg-show-me-show-me-how-now)\n- [Blocking Wonderful Blocking](#blocking-wonderful-blocking)\n- [Account](#account)\n\t- [Account Manager](#account-manager)\n\t\t- [Retrieve Account Information](#retrieve-account-information)\n- [Sizes](#sizes)\n\t- [Size Manager](#size-manager)\n\t\t- [Retrieve Sizes](#retrieve-sizes)\n\t- [Size Object](#size-object)\n- [Regions](#regions)\n\t- [Region Manager](#region-manager)\n\t\t- [Retrieve All Regions](#retrieve-all-regions)\n\t- [Region Object](#region-object)\n- [SSH Keys](#ssh-keys)\n\t- [SSH Key Manager](#ssh-key-manager)\n\t\t- [Retrieve All SSH Keys](#retrieve-all-ssh-keys)\n\t\t- [Create New Key](#create-new-key)\n\t\t- [Retrieve SSH Key Using ID](#retrieve-ssh-key-using-id)\n\t- [SSH Key Object](#ssh-key-object)\n\t\t- [Update SSH Key Name](#update-ssh-key-name)\n\t\t- [Delete SSH Key](#delete-ssh-key)\n- [Droplets](#droplets)\n\t- [Droplet Manager](#droplet-manager)\n\t\t- [Create New Droplet](#create-new-droplet)\n\t\t- [Retrieve Droplet By ID](#retrieve-droplet-by-id)\n\t\t- [Retrieve Droplets By Name](#retrieve-droplets-by-name)\n\t\t- [Retrieve All Droplets](#retrieve-all-droplets)\n\t\t- [Retrieve Droplets With ANY tags](#retrieve-droplets-with-any-tags)\n\t\t- [Retrieve Droplets With ALL tags](#retrieve-droplets-with-all-tags)\n\t\t- [Retrieve Droplets With ONLY tags](#retrieve-droplets-with-only-tags)\n\t\t- [Delete Droplets With ANY tags](#delete-droplets-with-any-tags)\n\t\t- [Delete Droplets With ALL tags](#delete-droplets-with-all-tags)\n\t\t- [Delete Droplets With ONLY tags](#delete-droplets-with-only-tags)\n\t\t- [Delete Droplet By ID](#delete-droplet-by-id)\n\t- [Droplet Object](#droplet-object)\n\t\t- [Reboot](#reboot)\n\t\t- [Power Cycle](#power-cycle)\n\t\t- [Shutdown](#shutdown)\n\t\t- [Power Off](#power-off)\n\t\t- [Power On](#power-on)\n\t\t- [Rebuild](#rebuild)\n\t\t- [Rename](#rename)\n\t\t- [Create Snapshot](#create-snapshot)\n\t\t- [Retrieve Snapshots](#retrieve-snapshots)\n\t\t- [Retrieve Snapshot By ID](#retrieve-snapshot-by-id)\n\t\t- [Retrieve Associated Volumes](#retrieve-associated-volumes)\n\t\t- [Retrieve Associated Volume Snapshots](#retrieve-associated-volume-snapshots)\n\t\t- [Attach A Volume](#attach-a-volume)\n\t\t- [Detach A Volume](#detach-a-volume)\n\t\t- [Restore Droplet](#restore-droplet)\n\t\t- [Resize Droplet](#resize-droplet)\n\t\t- [Delete Droplet](#delete-droplet)\n- [Block Storage (Volumes)](#block-storage-(volumes))\n\t- [Volume Manager](#volume-manager)\n\t\t - [Create New Volume ](#create-new-volume)\n\t\t- [Retrieve All Volumes](#retrieve-all-volumes)\n\t\t- [Retrieve All Volumes By Name](#retrieve-all-volumes-by-name)\n\t\t- [Retrieve Volume By ID](#retrieve-volume-by-id)\n\t\t- [Retrieve Volume By Name And Region](#retrieve-volume-by-name-and-region)\n\t\t- [Retrieve Volumes With ANY Tags](#retrieve-volumes-with-any-tags)\n\t\t- [Retrieve Volumes With ALL Tags](#retrieve-volumes-with-all-tags)\n\t\t- [Retrieve Volumes With ONLY Tags](#retrieve-volumes-with-only-tags)\n\t\t- [Delete Volume By ID](#delete-volume-by-id)\n\t\t- [Delete Volume By Name And Region](#delete-volume-by-name-and-region)\n\t\t- [Delete Volumes With ANY Tags](#delete-volumes-with-any-tags)\n\t\t- [Delete Volumes With ALL Tags](#delete-volumes-with-all-tags)\n\t\t- [Delete Volumes With ONLY Tags](#delete-volumes-with-only-tags)\n\t- [Volume Object](#volume-object)\n\t\t- [Create Snapshot](#create-snapshot)\n\t\t- [Retrieve Snapshots](#retrieve-snapshots)\n\t\t- [Detach From Droplets](#detach-from-droplets)\n\t\t- [Resize Volume](#resize-volume)\n- [Snapshots](#snapshots)\n\t- [Snapshot Manager](#snapshot-manager)\n\t\t- [Retrieve All Snapshots](#retrieve-all-snapshots)\n\t\t- [Retrieve All Droplet Snapshots](#retrieve-all-droplet-snapshots)\n\t\t- [Retrieve All Volume Snapshots](#retrieve-all-volume-snapshots)\n\t\t- [Retrieve Snapshot By ID](#retrieve-snapshot-by-id)\n\t- [Snapshot Object](#snapshot-object)\n\t\t- [Delete Snapshot](#delete-snapshot)\n- [Floating IPs](#floating-ips)\n\t- [Floating IP Manager](#floating-ip-manager)\n\t\t- [Retrieve All Floating IPs](#retrieve-all-floating-ips)\n\t\t- [Create New Floating IP](#create-new-floating-ip)\n\t\t- [Create Region Reserve IP](#create-region-reserve-ip)\n\t\t- [Retrieve Floating IP](#retrieve-floating-ip)\n\t- [Floating IP Object](#floating-ip-object)\n\t\t- [Delete Floating IP](#delete-floating-ip)\n\t\t- [Unassign Floating IP](#unassign-floating-ip)\n\t\t- [Retrieve All IP Actions](#retrieve-all-ip-actions)\n\t\t- [Retrieve Existing IP Action](#retrieve-existing-ip-action)\n- [Actions](#actions)\n\t- [Action Manager](#action-manager)\n\t\t- [Retrieve All Actions](#retrieve-all-actions)\n\t\t- [Retrieve Action](#retrieve-action)\n\t- [Action Object](#action-object)\n- [Exceptions](#exceptions)\n    - [Droplet Exceptions](#droplet-exceptions)\n    - [Volume Exceptions](#volume-exceptions)\n    - [Snapshot Exceptions](#snapshot-exceptions)\n    - [Action Exceptions](#action-exceptions)\n    - [Region Exceptions](#region-exceptions)\n    - [Floating IP Exceptions](#floating-ip-exceptions)\n    - [SSH Key Exceptions](#ssh-key-exceptions)\n\n# How to install\n\nHere are your options.\n\n## Install from pypi repository\n\nThe most popular way is to install the latest package available on pypi.\n\nYou can install digitaloceanobjects using **pip3**\n\n    pip3 install -U digitaloceanobjects\n\nYou can uninstall if you like using,\n\n    pip3 uninstall digitaloceanobjects\n\n## Install from the cloned git hub repo\n\nThere are a few ways to install this python package from a clone of its github repo.\nCheck out a copy and try the following...\n\n### Build a .tar.gz install package\n\nFrom the root of the repo build a repo, and check the repo.\n\n    python3 setup.py sdist\n    twine check dist/*\n\nCheck the newly created dist directory for newly created .tar.gz files.\nThis is your .tar.gz package and you can install using...\n\n    pip3 install ./dist/digitaloceanobjects-0.0.17.tar.gz\n\nYou can still uninstall using the same commands,\n\n    pip3 uninstall digitaloceanobjects\n\n### Install using the setup.py file\n\n!WARNING! Install does not track which files, and where they are placed.\nSo, you need to keep a record of there python3 does this.\n\nThis is how... from the github repo root directory.\n\n    sudo python3 setup.py install --record files.txt\n\nYou can uninstall using by playing back that files.txt file,\n\n    sudo xargs rm -rf < files.txt\n\n### Local interactive install\n\nUsing this method you can modify this packages code and have changes immediately available.\nPerfect for if you want to tinker with the library, poke around and contribute to the project.\n\nFrom the cloned repository root directory.\n\n    pip3 install -e ./\n\nYou can uninstall using the usual command,\n\n    pip3 uninstall digitaloceanobjects\n\n**[â¬† back to top](#table-of-contents)**\n\n# Configurations\n\n## Token\n\nSet the DIGITALOCEAN_ACCESS_TOKEN environment variable with your api key.\n\n    export DIGITALOCEAN_ACCESS_TOKEN='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n## api connection settings\n\nYou don't need to look too deeply here, this is for information only.\n\ndigitaloceanobjects is powered by a baserestapi class from the following project.\n\nhttps://github.com/zorani/cloudapi/blob/main/cloudapi/baserestapi.py\n\ndigitaloceanobjects/digitaloceanapi/digitaloceanapiconnection.py inherits baserestapi, \nbaseresapi takes care of all the tricky rate limiting.\n\nInside /digitaloceanapiconnection.py you will find\na 'callrateperhour' variable set to the current digital ocean limit of 5000.\ndigitalocean-objects converts 'callrateperhour' to seconds between requests.\n\nYou will also see the following variables.\n\ngeometric_delay_multiplier: If a request fails, the 'seconds between requests' is increased by multiplying by this number.\n\nmaximum_geometric_delay_multiplicaiton: How many times should you increase the 'seconds between requests' before considering it a fail.\n\nmaximum_failed_attempts: a failed attempt is put to the back of an internal queue for a retry. how many failed attempts are allowed before\n                         returning the response with failure codes and content.\n\n```python\n        BaseRESTAPI.__init__(\n            self,\n            baseurl=\"https://api.digitalocean.com\",\n            callrateperhour=5000,\n            geometric_delay_multiplier=2,\n            maximum_geometric_delay_multiplications=6,\n            maximum_failed_attempts=3,\n        )\n```\n\n**[â¬† back to top](#table-of-contents)**\n\n# OMG OMG SHOW ME SHOW ME HOW NOW\n\nOkay!! Okay!!  Here is a quick start example!\n\nLook how easy it is to work with digitaloceanobjects...\n\n...read the code comments...\n\n```python3\n#!/usr/bin/env python3\n\nfrom digitaloceanobjects import Droplet, DropletManager\nfrom digitaloceanobjects import Volume, VolumeManager\n\n#Create a droplet manager, to you know... manage your droplets.\ndroplet_manager = DropletManager()\n\n#Create a new droplet.\nmy_brand_new_droplet = droplet_manager.create_new_droplet(\n    name=\"test-droplet\",\n    region=\"ams3\",\n    size=\"s-1vcpu-1gb\",\n    image=\"ubuntu-16-04-x64\",\n    tags=[\"digitalocean\", \"objects\", \"are\", \"great\"],\n)\n\n#What? Done already?\n#Yup... now output the droplet details.\nprint(type(my_brand_new_droplet))\nprint(my_brand_new_droplet.attributes)\n\n#Want to attache a volume? No problem...\n\n#Create a volume manager.\nvolume_manager = VolumeManager()\n\n#You'll need a volume, so lets create a new volume.\nmy_brand_new_volume = volume_manager.create_new_volume(\n    size_gigabytes=10,\n    name=\"test-volume\",\n    region=\"ams3\",\n    description=\"BlockStoreFor Examples\",\n    filesystem_type=\"ext4\",\n    filesystem_label=\"example\",\n    tags=[\"is\", \"it\", \"really\", \"this\", \"easy\"],\n)\n\n#Well... damn that was easy. Peek at the volume object and the attributes. Nice.\nprint(type(my_brand_new_volume))\nprint(my_brand_new_volume.attributes)\n\n#So, now just ask your droplet to attach your new volume.\nmy_brand_new_droplet.attach_a_volume(my_brand_new_volume)\n\n#Still don't beleive how easy this was? Check the droplet attributes, you will now have a volume id attached to it.\nprint(my_brand_new_droplet.attributes.volume_ids)\n```\n\nHope you're happy...\n\n... now read the rest of the documentation to see what other amazing things you can do!\n\n**[â¬† back to top](#table-of-contents)**\n\n# Blocking Wonderful Blocking\n\nDid you notice in the quick start example above we didn't at any point check to see if the droplet, or the volume were ready and available?\n\nWell... that's because digitaloceanobjects is 'blocking', it waits for an operation on digital ocean to complete before returning.\n\nYou can code away, without any worries.\n\nFor example, digitaloceanobjects will wait for a droplet to be ready before any further actions are applied to it. You can't attach a volume to a droplet that hasn't finished setting up.\n\nIf you want to setup multiple droplets concurrently you should thread your droplet set up script so you're not waiting on independent services.\n\n# Account\nRetrieve information about your current digital ocean account.\n\n\n```python\nfrom digitaloceanobjects import AccountManager\n```\n\n\n## Account Manager\n```python\naccount_manager=AccountManager()\n```\n### Retrieve Account Information\n```python\ndroplet_limit = account_manager.droplet_limit()\n\nfloating_ip_limit = account_manager.floating_ip_limit()\n\nvolume_limit = account_manager.volume_limit()\n\nemail = account_manager.email()\n\nemail_verified = account_manager.email_verified()\n\nuuid = account_manager.uuid()\n\nstatus = account_manager.status()\n\nstatus_message = account_manager.status_message()\n```\n**[â¬† back to top](#table-of-contents)**\n\n# Sizes\nThe [sizes](#https://developers.digitalocean.com/documentation/v2/#sizes) objects represent different packages of hardware resources that can be used for Droplets. When a Droplet is created, a size must be selected so that the correct resources can be allocated.\n\nEach size represents a plan that bundles together specific sets of resources. This includes the amount of RAM, the number of virtual CPUs, disk space, and transfer. The size object also includes the pricing details and the regions that the size is available in.\n\nImport the size object, and the sizemanager.\n\n```python\nfrom digitaloceanobjects import Size, SizeManager\n```\n## Size Manager\n\nThe size manager contains methods to query information about available sizes on digital ocean.\n\n```python\nsize_manager=SizeManager()\n```\n### Retrieve Sizes\n```python\nlist_of_size_objects=size_manager.retrieve_sizes()\n```\n\n## Size Object\nSize objects contains an attributes data class with the standard digital ocean [size attributes](https://developers.digitalocean.com/documentation/v2/#sizes).\n\nThe size objects worked on by the above manager contain a data class with attributes describing the available digital ocean sizes.\n\n```python\nclass Size:\n    def __init__(self):\n        self.attributes = SizeAttributes()\n```\n\n```python\n@dataclass\nclass SizeAttributes:\n    slug: str = None\n    available: bool = None\n    transfer: float = None\n    price_monthly: float = None\n    price_hourly: float = None\n    memory: int = None\n    vcpus: int = None\n    disk: int = None\n    regions: list = field(default_factory=list)\n    description: str = None\n```\n\n**[â¬† back to top](#table-of-contents)**\n\n# Regions\n\nA region in DigitalOcean represents a datacenter where Droplets can be deployed and images can be transferred.\n\nEach region represents a specific datacenter in a geographic location. Some geographical locations may have multiple \"regions\" available. This means that there are multiple datacenters available within that area.\n\nImport the digitaloceanobject Region and RegionManger to interact with Regions.\n\n```python\nfrom digitaloceanobjects import Region, RegionManager\n```\n## Region Manager\n\nCreate a region manager.\n```python\nregion_manager = RegionManager()\n```\n### Retrieve All Regions\nRetrieve a list of region objects.\n```python\nlist_of_region_objects = region_manager.retrieve_all_regions()\n```\n\n## Region Object\n\nRegion objects contains an attributes data class with the standard digital ocean [region attributes](https://developers.digitalocean.com/documentation/v2/#regions).\n\n\n```python\nclass Region:\n    def __init__(self):\n        self.attributes = RegionAttributes()\n        ...\n```\n```python\n@dataclass\nclass RegionAttributes:\n    slug: str = None\n    name: str = None\n    sizes: list = field(default_factory=list)\n    available: bool = None\n    features: list = field(default_factory=list)\n```\n**[â¬† back to top](#table-of-contents)**\n\n# SSH Keys\n[SSH Keys](https://developers.digitalocean.com/documentation/v2/#ssh-keys). DigitalOcean allows you to add SSH public keys to the interface so that you can embed your public key into a Droplet at the time of creation. Only the public key is required to take advantage of this functionality.\n\nImport the digitaloceanobject SSHKey and SSHKeyManger to interact with SSH Keys.\n\n\n\n```python\nfrom digitaloceanobjects import SSHKey, SSHKeyManager\n```\n## SSH Key Manager\n\nCreate an SSH key manager.\n\n```python\nsshkey_manager = SSHKeyManager()\n```\n### Retrieve All SSH Keys\n\nReturns a list of SSHKey objects each containing details of existing keys.\n```python\nlist_of_sshkey_objects=sshkey_manager.retrieve_all_sshkeys()\n```\n### Create New Key\n'upload' a new key to digital ocean by providing your public key, and an easy to remember name.\n\nReturns an SSHKey object with details of your new key stored in it's attribute data class.\n```python\nsshkey_object=sshkey_manager.create_new_key(name:str, public_key:str)\n```\n### Retrieve SSH Key Using ID\n\nEach SSH Key has an ID.  Using this ID you can retrieve information on an existing SSH Key.\n\nReturns an SSHKey object with details of your existing key stored in it's attribute data class.\n\n```python\nsshkey_object=sshkey_manager.retrieve_sshkey_with_id(id:int)\n```\n## SSH Key Object\n\nSSH Key objects contains an attributes data class with the standard digital ocean [SSH Key attributes](https://developers.digitalocean.com/documentation/v2/#ssh-keys).\n\n\n\n```python\nsshkey_object=SSHKey()\n```\n\n```python\nclass SSHKey:\n    def __init__(self):\n        self.attributes = SSHKeyAttributes()\n\t\t...\n```\n```python\n@dataclass\nclass SSHKeyAttributes:\n    id: str = None\n    fingerprint: str = None\n    public_key: str = None\n    name: str = None\n```\n\nTo work on your digital ocean ssh keys first retrieve your ssh key objects using the ssh key object manager.  Then apply the objects following methods.\n\n### Update SSH Key Name\n\n\nThen call the objects update name method with your new ssh key name.\n\n```python\nsshkey_object.update_name(name:str)\n```\n### Delete SSH Key\n\nYou can delete an ssh key by calling the objects delete method.\n\n```python\nsshkey_object.delete()\n```\n**[â¬† back to top](#table-of-contents)**\n\n# Droplets\n\nA  [Droplet](https://www.digitalocean.com/docs/droplets/)  is a DigitalOcean virtual machine. \n\nImport the digitaloceanobject Droplet and DropletManger to interact with or create new droplets.\n\n```python\nfrom digitaloceanobjects import Droplet, DropletManager\n```\n## Droplet Manager\n\nCreate a droplet manager.\n```python\ndroplet_manager = DropletManager()\n```\n### Create New Droplet\n\nTo create a new droplet use the following method supplying your desired droplet [Attribute Values](https://developers.digitalocean.com/documentation/v2/#create-a-new-droplet).\n\n```python\ndroplet_object = droplet_manager.create_new_droplet(\n\t\t\t\t\t\tname=\"example.com\",\n\t\t\t\t\t\tregion=\"nyc3\",\n\t\t\t\t\t\tsize=\"s-1vcpu-1gb\",\n\t\t\t\t\t\timage=\"ubuntu-16-04-x64\",\n\t\t\t\t\t\tssh_keys=[],\n\t\t\t\t\t\tbackups=False,\n\t\t\t\t\t\tipv6=True,\n\t\t\t\t\t\tuser_data=None,\n\t\t\t\t\t\tprivate_networking=None,\n\t\t\t\t\t\tvolumes=None,\n\t\t\t\t\t\ttags=[\"bananas\"],\n\t\t\t\t\t)\n```\n### Retrieve Droplet By ID\n\nYou can retreive an existing droplet by calling the following method and supplying the droplets id.\n\nA droplet object will be returned. The droplet object will contain the standard digital ocean [droplet attributes](https://developers.digitalocean.com/documentation/v2/#droplets).\n\n```python\ndroplet_object = droplet_manager.retrieve_droplet_by_id(id:int)\n```\n### Retrieve Droplets By Name\nMany droplets can have the same name.\n\nTo retrieve a list of droplet objects that have a particular name use the following method supplying your name.\n\n```python\nlist_of_droplet_objects = droplet_manager.retrieve_droplet_by_name(name:str)\n```\n### Retrieve All Droplets\n\nTo retrieve all droplets in your account apply the following method.\n\nA list of droplet objects will be returned.\n```python\nlist_of_droplet_objects = droplet_manager.retrieve_all_droplets()\n```\n### Retrieve Droplets With ANY tags\n\nYou can tag droplets with as many tags as you like.\n\nThis method will return a list of digital ocean objects that contain any of the tags you provide in a list.\n\n```python\nlist_of_droplet_objects = droplet_manager.retrieve_droplets_with_any_tags(tag:list)\n```\n### Retrieve Droplets With ALL tags\n\nThis method will return a list of droplet objects, but only throse droplets that\nhave at least all of the tags that you specify in a list of tags.\n\n```python\nlist_of_droplet_objects = droplet_manager.retrieve_droplets_with_all_tags(tag:list)\n```\n### Retrieve Droplets With ONLY tags\n\nThis method will return a list of droplet objects that exactly match a list of tags that you specify.\n\n```python\nlist_of_droplet_objects = droplet_manager.retrieve_droplets_with_only_tags(tag:list)\n```\n### Delete Droplets With ANY tags\n\nYou can also delete droplets by tags.\n\nThis method allows you to delete all droplets that contain any, one or more, of a list of tags that you specify.\n\n```python\ndroplet_manager.delete_droplets_with_any_tags(tag:list)\n```\n### Delete Droplets With ALL tags\n\nThis method will delete any droplets that contain all, at least all, of the tags that you specify.\n\n```python\ndroplet_manager.delete_droplets_with_all_tags(tag:list)\n```\n### Delete Droplets With ONLY tags\n\nThis method will delete droplets that match exactly a tag list that you specify.\n```python\ndroplet_manager.delete_droplets_with_only_tags(tag:list)\n```\n### Delete Droplet By ID\n\nThe droplet manager allowes you to request droplet deletion by supplying a droplet id.\n\nYou might prefer to delete a droplet by calling a droplet objects delete method directly though.\n\n```python\ndroplet_manager.delete_droplet_by_id(id:int)\n```\n**[â¬† back to top](#table-of-contents)**\n## Droplet Object\n\nDroplet objects contains an attributes data class with the standard digital ocean [droplet attributes](https://developers.digitalocean.com/documentation/v2/#droplets).\n\nSome of the droplet attributes such as ```region``` and ```image``` can be further inspected by retrieving their relative digitaloceanobject objects.\n\n\n```python\ndroplet_object=Droplet()\n```\n```python\nclass Droplet:\n    def __init__(self, status=None):\n        self.attributes = DropletAttributes()\n        self.attributes.status = status\n        self.deleted=False\n        ...\n```\n```python\n@dataclass\nclass DropletAttributes:\n    id: int = None\n    name: str = None\n    memory: int = None\n    vcpus: int = None\n    disk: int = None\n    locked: bool = None\n    created_at: str = None\n    status: str = None\n    backup_ids: list = field(default_factory=list)\n    snapshot_ids: list = field(default_factory=list)\n    features: list = field(default_factory=list)\n    region: object = field(default_factory=list)\n    image: object = field(default_factory=list)\n    size: object = field(default_factory=list)\n    size_slug: str = None\n    networks: object = field(default_factory=list)\n    kernel: object = field(default_factory=list)\n    next_backup_window: object = field(default_factory=list)\n    tags: list = field(default_factory=list)\n    volume_ids: list = field(default_factory=list)\n    vpc_uuid: list = field(default_factory=list)\n```\n### Reboot\nA reboot action is an attempt to reboot the Droplet in a graceful way, similar to using the reboot command from the console.\n\nYou can reboot a droplet by calling the following method.\n\n```python\ndroplet_object.reboot()\n```\n### Power Cycle\n\nA power cycle action is similar to pushing the reset button on a physical machine, it's similar to booting from scratch.\n\nYou can power cycle a droplet by calling the following method.\n\n\n```python\ndroplet_object.powercycle()\n```\n### Shutdown\n\nA shutdown action is an attempt to shutdown the Droplet in a graceful way, similar to using the shutdown command from the console. Since a shutdown command can fail, this action guarantees that the command is issued, not that it succeeds. The preferred way to turn off a Droplet is to attempt a shutdown, with a reasonable timeout, followed by a power off action to ensure the Droplet is off.\n\nYou can shutdown a droplet by calling the following method.\n\n```python\ndroplet_object.shutdown()\n```\n### Power Off\n\nA power_off event is a hard shutdown and should only be used if the shutdown action is not successful. It is similar to cutting the power on a server and could lead to complications.\n\nYou can power off a droplet by calling the following method.\n\n```python\ndroplet_object.poweroff()\n```\n### Power On\n\nYou can power on a droplet by calling the following method.\n```python\ndroplet_object.poweron()\n```\n### Rebuild\n\nA rebuild action functions just like a new create.\n\nYou can supply an image slug, or an image id. Your droplet will\nbe rebuilt, and you object attributes will be updated to reflect\nthe changed this method makes.\n\nYou can rebuild a droplet by calling the following method.\n\n```python\ndroplet_object.rebuild(img:str)\n```\n### Rename\nYou can rename a droplet by calling the following method.\n```python\ndroplet_object.rename(name:str)\n```\n### Create Snapshot\n\nYou can create a droplet snapshot using the following method supplying a name to be use for your snapshot.\n\n```python\ndropletsnapshot_object = droplet_object.createsnapshot(name:str)\n```\nA [droplet snapshot  ](https://developers.digitalocean.com/documentation/v2/#snapshot-a-droplet) object is returned.  This type of snapshot, droplet snapshot, has more details than the usual [snapshot](#snapshot-object)  covered later. \n\nHere are the DropletSnapshot details.\n\n\n```python\nclass DropletSnapshot:\n    def __init__(self):\n        self.attributes = DropletSnapshotAttributes()\n```\n```python\n@dataclass\nclass DropletSnapshotAttributes:\n    id: int = None\n    name: str = None\n    distribution: str = None\n    slug: str = None\n    public: bool = None\n    regions: list = field(default_factory=list)\n    created_at: str = None\n    min_disk_size: int = None\n    type: str = None\n    size_gigabytes: float = None\n```\n\n### Retrieve Snapshots\n\nYou can retrieve all the DropletSnapshots for a droplet by calling the following method.\n\n\n```python\nlist_of_dropletsnapshot_objects = droplet_object.retrieve_snapshots()\n```\n\n### Retrieve Snapshot By ID\n\nYou can retrieve a DropletSnapshot for a droplet by calling the following method and supplying an id.\n\nThis method will only search snapshots associated to the droplet.\n\n\n```python\ndropletsnapshot_object = droplet_object.retrieve_snapshot_by_id(id:int)\n```\n\n\n### Retrieve Associated Volumes\n\nA droplet may have block storage attached to it.\nYou can retrieve a list of [volume objects](#volume-objects) associated to your droplet by calling the following method.\n\n```python\nlist_of_volume_objects = droplet_object.retrieve_associated_volumes()\n```\n### Retrieve Associated Volume Snapshots\n\nYou can retrieve all associated [volume snapshots](#snapshot-object) by calling the following method.\n\n```python\nlist_of_volume_snapshot_objects = droplet_object.retrieve_associated_volume_snapshots()\n```\n!WARNING! These snapshot objects are slightly different to the [droplet snapshots](#create-snapshots) we just looked at.\n\nThe [snapshots](https://developers.digitalocean.com/documentation/v2/#snapshots) object created here can actually detail saved instances of both Droplet or a block storage volume, which is reflected in the 'resource_type' attribute.\n\n### Attach A Volume\n\nYou can attach a volume to a droplet by calling the following method and supplying a volume object.\n\n```python\ndroplet_object.attach_a_volume(target_volume:Volume)\n```\n### Detach A Volume\nYou can similarly detach the volume by calling the following.\n```python\ndroplet_object.detach_a_volume(target_volume:Volume)\n```\n### Restore Droplet\nA Droplet restoration will rebuild an image using a backup image. The image ID that is passed in must be a backup of the current Droplet instance. The operation will leave any embedded SSH keys intact.\n\nYou can restore a droplet by calling the following method.\n\n```python\ndroplet_object.restore_droplet(image_id:int)\n```\n### Resize Droplet\nIf  you set ``` disk=False``` only the RAM will be increased.\nIf you set ```disk=True``` the disk size will be upgraded, and you will not be able to shrink your droplet down to it's previous RAM size.\n```python\ndroplet_object.resize_droplet(\n\t\t\t\tslug_size='s-1vcpu-2gb',\n\t\t\t\tdisk_resize=False\n\t\t\t\t)\n```\n\nA Droplet must be powered off prior to resizing, digitaloceandroplets does this for you.\n\n### Delete Droplet\n\nYou can delete a droplet from your account by applying the following method.\n\n```python\ndroplet_object.delete()\n```\n\nThis method sets your objects ``` droplet_object.deleted=True``` so object methods will no longer work.\n\n**[â¬† back to top](#table-of-contents)**\n\n# Block Storage (Volumes)\n[DigitalOcean Block Storage Volumes](https://developers.digitalocean.com/documentation/v2/#block-storage) provide expanded storage capacity for your Droplets and can be moved between Droplets within a specific region. Volumes function as raw block devices, meaning they appear to the operating system as locally attached storage which can be formatted using any file system supported by the OS. They may be created in sizes from 1GiB to 16TiB.\n\nImport the digitaloceanobject Volume and VolumeManger to interact with or create new volumes.\n\n```python\nfrom digitaloceanobjects import Volume, VolumeManager\n```\n## Volume Manager\n\nCreate a volume manager.\n```python\nvolume_manager = VolumeManager()\n```\n### Create New Volume \n\nTo create a new volume use the following method supplying your desired volume [Attribute Values](https://developers.digitalocean.com/documentation/v2/#block-storage).\n```python\nvolume_object = volume_manager.create_new_volume(\n\t        size_gigabytes=10,\n\t        name=\"testingavolume\",\n\t        region=\"ams3\",\n\t        description=\"BlockStoreExample\",\n\t        filesystem_type=\"ext4\",\n\t        filesystem_label=\"example\",\n\t        tags=[\"banana\"],\n\t    )\n```\n**Note**: You can only create one volume per region with the same name.\n\n### Retrieve All Volumes\n\nTo list all available volumes on your account apply the following method.\n\nA list of [volume objects](#volume-object) will be returned.\n\n```python\nlist_of_volume_objects=volume_manager.retrieve_all_volumes()\n```\n\n### Retrieve All Volumes By Name\n\nTo list volumes on your account that match a specified name use the following method.\n\n```python\nlist_of_volume_objects=volume_manager.retrieve_all_volumes_by_name(name:str)\n```\n### Retrieve Volume By ID\n\nTo retrieve a volume by id, apply the following method.\n```python\nvolume_object=volume_manager.retrieve_volume_by_id(id:int)\n```\n### Retrieve Volume By Name And Region\n\nYou can also pick out a specific existing volume by name and region, but calling the following method.\n\n```python\nvolume_object=volume_manager.retrieve_volume_by_name_region(\n\t\t\t\t\t\t\t\t\t\t\tname:str,\n\t\t\t\t\t\t\t\t\t\t\tregion:str\n\t\t\t\t\t\t\t\t\t\t)\n```\n### Retrieve Volumes With ANY Tags\n\nTo retrieve a list of volumes that match any, at least one, of your specified tags use the following method and supply a list of tag strings.\n\n```python\nlist_of_volume_objects=volume_manager.retrieve_volumes_with_any_tags(tag:list)\n```\n### Retrieve Volumes With ALL Tags\n\nTo retrieve a list of volumes that are tagged with all, at least all, of your specified tags use the following command.\n\n```python\nlist_of_volume_objects=volume_manager.retrieve_volumes_with_all_tags(tag:list)\n```\n### Retrieve Volumes With ONLY Tags\n\nTo retrieve a list of volumes that are tagged with only, exactly matching, your list of specified tags, apply the following method supplying a list of tag strings.\n\n```python\nlist_of_volume_objects=volume_manager.retrieve_volumes_with_only_tags(tag:list)\n```\n### Delete Volume By ID\n\nThe volume manager allows you to delete a volume by supplying its ID.\n\nThough you may prefer to delete a volume by directly calling delete on its volume object. \n```python\nvolume_manager.delete_volumes_by_id(id:int)\n```\n\n\n### Delete Volume By Name And Region\nThe volume manager allows you to delete a volume by supplying its name and region.\n\nThough you may prefer to delete a volume by directly calling delete on its volume object. \n```python\nvolume_manager.delete_volume_by_name_region(\n\t\t\t\t\t\t\t\tname:str,\n\t\t\t\t\t\t\t\tregion:str\n\t\t\t\t\t\t\t)\n```\n\n\n### Delete Volumes With ANY Tags\nYou can delete all volumes that match any of, at least one, of your specified tags by applying the following method and supplying a list of tag strings.\n```python\nvolume_manager.delete_volumes_with_any_tags(tag:list)\n```\n### Delete Volumes With ALL Tags\nYou can delete all volumes that contain, at least have all, of your specified tags by applying the following method and supplying a list of tag strings.\n\n```python\nvolume_manager.delete_volumes_with_all_tags(tag:list)\n```\n### Delete Volumes With ONLY Tags\nYou can also delete all volume that only contain, that match exactly, your list of specified tag strings by applying the following method.\n\n```python\nvolume_manager.delete_volumes_with_only_tags(tag:list)\n```\n\n**[â¬† back to top](#table-of-contents)**\n\n## Volume Object\n\nVolume objects contain an attributes data class with the standard digital ocean [volume attributes](https://developers.digitalocean.com/documentation/v2/#block-storage).\n\n\n```python\nvolume_object=Volume()\n```\n```python\nclass Volume:\n    def __init__(self):\n        self.attributes = VolumeAttributes()\n        self.deleted=False\n        ...\n```\n```python\n@dataclass\nclass VolumeAttributes:\n    id: str = None\n    region: object = field(default_factory=list)\n    droplet_ids: list = field(default_factory=list)\n    name: str = None\n    description: str = None\n    size_gigabytes: int = None\n    created_at: str = None\n    filesystem_type: str = None\n    filesystem_label: str = None\n    tags: list = field(default_factory=list)\n```\n### Create Snapshot\n\nYou can create a [snapshot](#snapshot-object) from your volume using the following method.\n\nA [snapshot](#snapshot-object) will be returned.\n\n```python\nsnapshot_object=volume_object.create_snapshot(\n\t\t\t\t\t\tname:str,\n\t\t\t\t\t\ttags:list\n\t\t\t\t\t)\n```\n### Retrieve Snapshots\n\nYou can retrieve a list of snapshots for your object using the following method.\n\nA list of [snapshot](#snapshot-object) objects will be returned. \n```python\nlist_of_snapshot_objects=volume_object.retrieve_snapshots()\n```\n### Detach From Droplets\nYou can detach a volume from a droplet by calling the following method.\nNo need to supply details of a droplet as volumes can only be attached to one droplet at a time. This method just makes sure the volume object detaches.\n```python\nvolume_object.detach_from_droplets()\n```\n### Resize Volume\nTo resize a volume to a new size in GiB (1024^3), call the following method.\n\n Volumes may only be resized upwards. \nThe maximum size for a volume is 16TiB.\n\n```python\nvolume_object.resize(size_gigabytes:int)\n```\n\n**[â¬† back to top](#table-of-contents)**\n\n# Snapshots\n\n[Snapshots](https://developers.digitalocean.com/documentation/v2/#snapshots) are saved instances of a Droplet or a block storage volume, which is reflected in the ```resource_type``` attribute. In order to avoid problems with compressing filesystems, each defines a ```min_disk_size``` attribute which is the minimum size of the Droplet or volume disk when creating a new resource from the saved snapshot.\n\nImport the digitaloceanobject Snapshot and SnapshotManger to interact with or create new snapshots.\n\n```python\nfrom digitaloceanobjects import Snapshot, SnapshotManager\n```\n## Snapshot Manager\n\nCreate a snapshot manager.\n\n```python\nsnapshot_manager=SnapshotManager()\n```\n### Retrieve All Snapshots\nTo retrieve all existing snapshots call the following method.\n\nA list of [Snapshot objects](#snapshot-object) will be returned.\n```python\nlist_of_snapshot_objects=snapshot_manager.retrieve_all_snapshots()\n```\n### Retrieve All Droplet Snapshots\nTo retrieve a list of only droplet snapshots call the following method.\n[Snapshot objects](#snapshot-object) will be returned, remember to not confiuse this with DropletSnapshot objects.\n```python\nlist_of_snapshot_objects=snapshot_manager.retrieve_all_droplet_snapshots()\n```\n### Retrieve All Volume Snapshots\nTo retrieve a list of only volume snapshots call the following method.\n```python\nlist_of_snapshot_objects=snapshot_manager.retrieve_all_volume_snapshots()\n```\n### Retrieve Snapshot By ID\nYou can retrieve a snapshot object by ID.\n```python\nsnapshot_object=snapshot_manager.retrieve_snapshots_id(id:int)\n```\n**[â¬† back to top](#table-of-contents)**\n## Snapshot Object\n\nSnapshot objects contains an attributes data class with the standard digital ocean [snapshot attributes](https://developers.digitalocean.com/documentation/v2/#snapshots).\n```python\nsnapshot_object=Snapshot()\n```\n```python\nclass Snapshot:\n    def __init__(self):\n        self.attributes = SnapshotAttributes()\n\t\t...\n```\n\n```python\n@dataclass\nclass SnapshotAttributes:\n    id: str = None\n    name: str = None\n    created_at: str = None\n    regions: list = field(default_factory=list)\n    resource_id: str = None\n    resource_type: str = None\n    min_disk_size: int = None\n    size_gigabytes: float = None\n    tags: list = field(default_factory=list)\n```\n### Delete Snapshot\nYou can delete a snapshot from your account by calling the snapshot object delete method.\n```python\nsnapshot_object.delete()\n```\n**[â¬† back to top](#table-of-contents)**\n\n# Floating IPs\n\n[DigitalOcean Floating IPs](https://developers.digitalocean.com/documentation/v2/#floating-ips)  are publicly-accessible static IP addresses that can be mapped to one of your Droplets. They can be used to create highly available setups or other configurations requiring movable addresses.\n\nFloating IPs are bound to a specific region.\n\nImport the digitaloceanobject FloatingIP and FloatingIPManger to interact with or create new floating ips.\n\n```python\nfrom digitaloceanobjects import FloatingIP, FloatingIPManager\n```\n## Floating IP Manager\nCreate a floating IP manager.\n```python\nfloatingip_manager=FloatingIPManager()\n```\n### Retrieve All Floating IPs\nTo retrieve all floating IPs on your account, call the following method.\n\nA list of [floating ip objects](#floating-ip-object) will be returned.\n```python\nlist_of_floatingip_objects=floatingip_manager.retrieve_all_floating_ips()\n```\n### Create New Floating IP\nCreates a floating IP and attaches it straight to the specified droplet object.\n\nA [floating ip object](#floating-ip-object) is returned with details of your new floating ip.\n```python\nfloatingip_object=floatingip_manager.create_new_floating_ip(droplet_object:Droplet)\n```\n### Create Region Reserve IP\n\nYou can reserve a floating ip in a specified region by calling the following method and specifying a region slug.\n\n```python\nfloatingip_object=floatingip_manager.reserve_ip_for_region(region_slug:str)\n```\n### Retrieve Floating IP\nYou can retrieve details of floating ip by using the ip address itself.\nCall the following method and specifying the ip address.\n\n```python\nfloatingip_object=floatingip_manager.retrieve_floating_ip(ip:str)\n```\n**[â¬† back to top](#table-of-contents)**\n## Floating IP Object\nFloating IP objects contains an attributes data class with the standard digital ocean [floating IP attributes](https://developers.digitalocean.com/documentation/v2/#floating-ips).\n\n```python\nfloatingip_object=FloatingIP()\n```\n```python\nclass FloatingIP:\n    def __init__(self):\n        self.attributes = FloatingIPAttributes()\n\t\t...\n```\n```python\n@dataclass\nclass FloatingIPAttributes:\n    ip: str = None\n    region: object = None\n    droplet: object = None\n    locked: bool = None\n```\n### Delete Floating IP\n\nYou can delete a floating ip from your account by calling the following.\n```python\nfloatingip_object.delete()\n```\n### Unassign Floating IP]\nYou can unasign a floating ip from a droplet by calling the following.\nSpecifying a droplet is not necessary.\n```python\nfloatingip_object.unassign()\n```\n### Retrieve All IP Actions\nYou can retrieve all the actions applied to an ip by calling the following method.\n\nA list of [action objects](#action-object) will be returned.\n```python\nlist_of_action_objects=floatingip_object.retrieve_all_actions()\n```\n### Retrieve Existing IP Action\n\nYou can retrieve a specific action by specifying its id and using the following method.\n```python\naction_object=floatingip_object.retrieve_existing_actions(action_id:int)\n```\n**[â¬† back to top](#table-of-contents)**\n\n# Actions\n[Actions](https://developers.digitalocean.com/documentation/v2/#actions) are records of events that have occurred on the resources in your account. These can be things like rebooting a Droplet, or transferring an image to a new region.\n\nAn action object is created every time one of these actions is initiated. The action object contains information about the current status of the action, start and complete timestamps, and the associated resource type and ID.\n\nEvery action that creates an action object is available through this endpoint. Completed actions are not removed from this list and are always available for querying.\n\nImport the digitaloceanobject Action and ActionManger to interact with  actions.\n```python\nfrom digitaloceanobjects import Action, ActionManager\n```\n## Action Manager\nCreate an action manager.\n```python\naction_manager=ActionManager()\n```\n### Retrieve All Actions\n\nThis will be the entire list of actions taken on your account, so it will be quite large. As with any large collection returned by the API, the results will be paginated with only 20 on each page by default but the following method collects them all, and returns all of them in a list of action objects.\n\n*If you want to have direct access to the api call please check the ```actions.py``` . You can paginate using the api call but still benefit from the rate limit management of digitaloceanobjects.*\n\nA list of [Action Objects](#action-object)is returned.\n\n```python\nlist_of_action_objects=action_manager.retrieve_all_actions()\n```\n### Retrieve Action\nYou can retreive one action at a time if you like, by specifying the action id.\n```python\naction_object=action_manager.retrieve_action(action_id:int)\n```\n## Action Object\nAction objects contains an attributes data class with the standard digital ocean [action attributes](https://developers.digitalocean.com/documentation/v2/#actions).\n```python\naction_object=Action()\n```\n```python\nclass Action:\n    def __init__(self, action_attributes: ActionAttributes):\n        self.attributes = action_attributes\n\t\t'''\n```\n```python\n@dataclass\nclass ActionAttributes:\n    id: int = None\n    status: str = None\n    type: str = None\n    started_at: str = None\n    completed_at: str = None\n    resource_id: int = None\n    resource_type: str = None\n    region: object = None\n    region_slug: str = None\n```\n\n**[â¬† back to top](#table-of-contents)**\n\n# Exceptions\n\nSome exceptions for you to catch, to help your code run smoother.\n\n## Droplet Exceptions\n```python\nErrorDropletNotFound\nErrorDropletNameContainsInvalidChars\nErrorDropletSlugSizeNotFound\nErrorDropletResizeDiskError\nErrorAccountDropletLimitReached\nErrorDropletAttachedVolumeCountAlreadAtLimit\n```\n## Volume Exceptions\n```python\nErrorVolumeAlreadyExists\nErrorVolumeNotFound\nErrorVolumeResizeValueTooLarge\nErrorVolumeResizeDirection\nErrorAccountVolumeLimitReached\n```\n\n## Snapshot Exceptions\n```python\nErrorSnapshotNotFound\n```\n## Action Exceptions\n```python\nErrorActionDoesNotExists\nErrorActionFailed\n```\n## Region Exceptions\n```python\nErrorNotSameRegion\nErrorRegionDoesNotExist\n```\n## Floating IP Exceptions\n```python\nErrorAccountFloatingIPLimitReached\nErrorFloatingIPDoesNotExists\nErrorDropletAlreadyHasFloatingIP\n```\n## SSH Key Exceptions\n```python\nErrorSSHkeyDoesNotExists\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/zorani/digitalocean-objects/archive/refs/tags/v0.0.24.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zorani/digitalocean-objects",
    "keywords": "digitalocean,api,objects,digitaloceanapi",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "digitaloceanobjects",
    "package_url": "https://pypi.org/project/digitaloceanobjects/",
    "platform": null,
    "project_url": "https://pypi.org/project/digitaloceanobjects/",
    "project_urls": {
      "Download": "https://github.com/zorani/digitalocean-objects/archive/refs/tags/v0.0.24.tar.gz",
      "Homepage": "https://github.com/zorani/digitalocean-objects"
    },
    "release_url": "https://pypi.org/project/digitaloceanobjects/0.0.24/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "digitaloceanobjects, represents all digital ocean services as objects, hiding all those horrible api calls.",
    "version": "0.0.24",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15816493,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f27e1ced70867bd39c0595ba4208ce93fd29ee8d123b519cc8976e719ef988ed",
          "md5": "f95ac230b36bd0da70293b319dc454af",
          "sha256": "75eac64bb913f929ece0a0f0fdc34a8531bb3d3365b914d3e45c6281d7ba9f9e"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "f95ac230b36bd0da70293b319dc454af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32193,
        "upload_time": "2021-06-18T13:47:01",
        "upload_time_iso_8601": "2021-06-18T13:47:01.883677Z",
        "url": "https://files.pythonhosted.org/packages/f2/7e/1ced70867bd39c0595ba4208ce93fd29ee8d123b519cc8976e719ef988ed/digitaloceanobjects-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81923dee0ea882d2111b1be8ec084ad3f7ad1573b2124e585f4ef2e4ad189964",
          "md5": "ab8045d925809cf9b8a2542bf069dcc2",
          "sha256": "1933fd59ff7dabfd2b2ffd18d288098f5892bbd923cb4796e32e051d68542db2"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "ab8045d925809cf9b8a2542bf069dcc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32185,
        "upload_time": "2021-06-18T13:51:01",
        "upload_time_iso_8601": "2021-06-18T13:51:01.802679Z",
        "url": "https://files.pythonhosted.org/packages/81/92/3dee0ea882d2111b1be8ec084ad3f7ad1573b2124e585f4ef2e4ad189964/digitaloceanobjects-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f41179a980faa6a2592e5400758612171e9a851c3fc3cf9cbec5532be50100",
          "md5": "95f747baf242a0c96fee25c7cd023c03",
          "sha256": "f9a64cd4e6282174e2e088e66647affb0ae6c53dacb4348f138bfbe0b458badb"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "95f747baf242a0c96fee25c7cd023c03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32196,
        "upload_time": "2021-06-18T13:56:55",
        "upload_time_iso_8601": "2021-06-18T13:56:55.674389Z",
        "url": "https://files.pythonhosted.org/packages/e4/f4/1179a980faa6a2592e5400758612171e9a851c3fc3cf9cbec5532be50100/digitaloceanobjects-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39f8b5006168382a49508b61fc1ace23045a1be279e8d6b50b61539dba7b4437",
          "md5": "3aa269189bc447e52cc451a10f830fa4",
          "sha256": "5f0dbe6d94e90a04c059997c7072959c10d9d7b5c1128205984674779a581ff5"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "3aa269189bc447e52cc451a10f830fa4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33224,
        "upload_time": "2021-06-18T14:19:27",
        "upload_time_iso_8601": "2021-06-18T14:19:27.245474Z",
        "url": "https://files.pythonhosted.org/packages/39/f8/b5006168382a49508b61fc1ace23045a1be279e8d6b50b61539dba7b4437/digitaloceanobjects-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fd4177cd6ebc52c9f704478dffc92c4f3195d4dbe94d95747726555bfe84d75",
          "md5": "8a8573f14c25f35d6cfb546bca294e73",
          "sha256": "5e5c461818dcc8511e1f5cfd198033e48b44b9d3b53e9838d977efa2d3eddf48"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "8a8573f14c25f35d6cfb546bca294e73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33237,
        "upload_time": "2021-06-18T14:21:55",
        "upload_time_iso_8601": "2021-06-18T14:21:55.991992Z",
        "url": "https://files.pythonhosted.org/packages/7f/d4/177cd6ebc52c9f704478dffc92c4f3195d4dbe94d95747726555bfe84d75/digitaloceanobjects-0.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2504a441017b8a64ec75a75e7f4bf6bff6a4f88112faed14ffc015a7230b3cd",
          "md5": "566cbeb18240844bf8e6a3114544ed34",
          "sha256": "33e6a0b1536d89077fd82bc3ca99a23a274c85887625e4518d535d20f663c00c"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "566cbeb18240844bf8e6a3114544ed34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33245,
        "upload_time": "2021-06-18T14:27:41",
        "upload_time_iso_8601": "2021-06-18T14:27:41.911254Z",
        "url": "https://files.pythonhosted.org/packages/b2/50/4a441017b8a64ec75a75e7f4bf6bff6a4f88112faed14ffc015a7230b3cd/digitaloceanobjects-0.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b91e6ebf61b518dd7a1afdd5c65aa35114bf7d4ad47d23c948daa6c6e892fe3c",
          "md5": "74f0f9d007b3d4382d0bd6ee2cd1bde0",
          "sha256": "76104703306210dfae972c90b7319f10c26720f5288bd1b92de8abb4ef891a97"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "74f0f9d007b3d4382d0bd6ee2cd1bde0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33667,
        "upload_time": "2021-06-18T16:20:11",
        "upload_time_iso_8601": "2021-06-18T16:20:11.860737Z",
        "url": "https://files.pythonhosted.org/packages/b9/1e/6ebf61b518dd7a1afdd5c65aa35114bf7d4ad47d23c948daa6c6e892fe3c/digitaloceanobjects-0.0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "833d4160f16fefa385b4ee23489e44c4f28825b8205defed88bdeee6bd24b809",
          "md5": "74e44a3ecfc9332f775f5630c7ec5333",
          "sha256": "021e90c2a48e00ad5fc6939b0620f63683bbe5d0dbb8b147c7d6ad1d3a473645"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "74e44a3ecfc9332f775f5630c7ec5333",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33715,
        "upload_time": "2021-06-18T16:26:47",
        "upload_time_iso_8601": "2021-06-18T16:26:47.816347Z",
        "url": "https://files.pythonhosted.org/packages/83/3d/4160f16fefa385b4ee23489e44c4f28825b8205defed88bdeee6bd24b809/digitaloceanobjects-0.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c552d5ad1da4e030e54193c40898bf8a47ee2f22830f72e1b4902371032806d2",
          "md5": "5053d6ff42cc60988f68bf26508ff931",
          "sha256": "4e11b4ade673f62faa7304892105da08d526be7989efdfdbd03b207c28f3cd24"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "5053d6ff42cc60988f68bf26508ff931",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35821,
        "upload_time": "2021-06-20T20:26:55",
        "upload_time_iso_8601": "2021-06-20T20:26:55.991396Z",
        "url": "https://files.pythonhosted.org/packages/c5/52/d5ad1da4e030e54193c40898bf8a47ee2f22830f72e1b4902371032806d2/digitaloceanobjects-0.0.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea8794f4efde9d712b164f66db770208627f4c0aced9991ab70474a9233101b1",
          "md5": "cef76dfa0cfc9c66782a4c341507df90",
          "sha256": "903bbcbb681ff4764da71debe849f9ec5560ee9d235840c87bc6ed5bfcb81308"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "cef76dfa0cfc9c66782a4c341507df90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49366,
        "upload_time": "2021-06-21T11:04:36",
        "upload_time_iso_8601": "2021-06-21T11:04:36.688197Z",
        "url": "https://files.pythonhosted.org/packages/ea/87/94f4efde9d712b164f66db770208627f4c0aced9991ab70474a9233101b1/digitaloceanobjects-0.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d463ef799910e2718c6b694edd8eece8cf2df76f8ac0a2a8b861b4289987bff2",
          "md5": "68cb3b6a5d2fb2056fafbedf826a3fc6",
          "sha256": "1a56df1d59efae327e775c40675bef13d2cc0eb9a120eb10c0d0677d58ab19a9"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.20.tar.gz",
        "has_sig": false,
        "md5_digest": "68cb3b6a5d2fb2056fafbedf826a3fc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49338,
        "upload_time": "2021-06-22T10:26:50",
        "upload_time_iso_8601": "2021-06-22T10:26:50.413629Z",
        "url": "https://files.pythonhosted.org/packages/d4/63/ef799910e2718c6b694edd8eece8cf2df76f8ac0a2a8b861b4289987bff2/digitaloceanobjects-0.0.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aed33780684fa6cf74c95618378804b2b100d6b9512ad8409b2b512e003b48c2",
          "md5": "27aaf2c2abe6fb8fa5778642307784cc",
          "sha256": "2f09cc6291d210cf971d293008f29f042355ac094b973ef54cf160505c62f16a"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "27aaf2c2abe6fb8fa5778642307784cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49337,
        "upload_time": "2021-06-22T10:31:42",
        "upload_time_iso_8601": "2021-06-22T10:31:42.355700Z",
        "url": "https://files.pythonhosted.org/packages/ae/d3/3780684fa6cf74c95618378804b2b100d6b9512ad8409b2b512e003b48c2/digitaloceanobjects-0.0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2b563bf64d6a8ea4e35b4f121fa980da6ee3e86c19702c3f5940167db5a4d16",
          "md5": "7d292d3fedbc8b3372c42bea5c00aa70",
          "sha256": "c1792ae8a2e653a7cc56af757ea55a85c9b828f5ab171112f7be84af810e55d3"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.22.tar.gz",
        "has_sig": false,
        "md5_digest": "7d292d3fedbc8b3372c42bea5c00aa70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50534,
        "upload_time": "2022-11-06T14:21:13",
        "upload_time_iso_8601": "2022-11-06T14:21:13.036917Z",
        "url": "https://files.pythonhosted.org/packages/b2/b5/63bf64d6a8ea4e35b4f121fa980da6ee3e86c19702c3f5940167db5a4d16/digitaloceanobjects-0.0.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddccb41ccbc8e2f3f039aff1ff323ba8f0cdda327c27b7cda765a8495a7527f1",
          "md5": "3da6b96856457f419355657bf0437aa0",
          "sha256": "3c38e9201ee158a3ea7f31676ab918d3163e5ed4b6255787e321b0be510b87d9"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.23.tar.gz",
        "has_sig": false,
        "md5_digest": "3da6b96856457f419355657bf0437aa0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50805,
        "upload_time": "2022-11-17T15:09:01",
        "upload_time_iso_8601": "2022-11-17T15:09:01.106205Z",
        "url": "https://files.pythonhosted.org/packages/dd/cc/b41ccbc8e2f3f039aff1ff323ba8f0cdda327c27b7cda765a8495a7527f1/digitaloceanobjects-0.0.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aada064842d81d44259164155cd169c3a22b3931657a3528d418a26037a02115",
          "md5": "994b489ad88e079b6b89cc86ef479a57",
          "sha256": "a46edb6bf952865dc50c872fd5ebba83c82ebb85c00ba883e3c96afef2316ea0"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.24.tar.gz",
        "has_sig": false,
        "md5_digest": "994b489ad88e079b6b89cc86ef479a57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50845,
        "upload_time": "2022-11-18T15:36:14",
        "upload_time_iso_8601": "2022-11-18T15:36:14.729215Z",
        "url": "https://files.pythonhosted.org/packages/aa/da/064842d81d44259164155cd169c3a22b3931657a3528d418a26037a02115/digitaloceanobjects-0.0.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "071f608f9bcde6de89f52f02ca441c9455796c8d7019948abc8e9359db33e22a",
          "md5": "e2368c2611943c7626dd56bff95149f4",
          "sha256": "d041b561d113b0df813b37ce26dba04941cacc6443e6ad54cfa5e81a93e11f26"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e2368c2611943c7626dd56bff95149f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29534,
        "upload_time": "2021-06-18T11:34:23",
        "upload_time_iso_8601": "2021-06-18T11:34:23.187576Z",
        "url": "https://files.pythonhosted.org/packages/07/1f/608f9bcde6de89f52f02ca441c9455796c8d7019948abc8e9359db33e22a/digitaloceanobjects-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e171ff478d269f333321df1779b775f0bdd7e6064af5e017ab33b765bedf7f0",
          "md5": "41cebd8f6e07bd81c259af96c5ccc9b6",
          "sha256": "070e67ef3586264ccf986c6b208641ad514eec4061296bfb06fdbe243bbecf50"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "41cebd8f6e07bd81c259af96c5ccc9b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31940,
        "upload_time": "2021-06-18T13:00:20",
        "upload_time_iso_8601": "2021-06-18T13:00:20.142385Z",
        "url": "https://files.pythonhosted.org/packages/6e/17/1ff478d269f333321df1779b775f0bdd7e6064af5e017ab33b765bedf7f0/digitaloceanobjects-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6fa478e95e2768badebdf0668416dbc6ad189ec93470e2f849145b3f8a8bfff",
          "md5": "d55bf98dd12b9d6e081ef757ee9a13fa",
          "sha256": "819d4b452acb585bb27afcecf8da456725a83351c21d9c5f63a7f5e0b33d34aa"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "d55bf98dd12b9d6e081ef757ee9a13fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32018,
        "upload_time": "2021-06-18T13:17:57",
        "upload_time_iso_8601": "2021-06-18T13:17:57.220382Z",
        "url": "https://files.pythonhosted.org/packages/b6/fa/478e95e2768badebdf0668416dbc6ad189ec93470e2f849145b3f8a8bfff/digitaloceanobjects-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2374c65826bd7a61ee261933f6971cf5ba2eee9b162132a80269ff805c0f0812",
          "md5": "ad972d123a2fa1c3f7656f0f92e74b16",
          "sha256": "5ac2f9a26f7537695678d2fb2654708500fa67f5f10a5728bf842360b73ea582"
        },
        "downloads": -1,
        "filename": "digitaloceanobjects-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "ad972d123a2fa1c3f7656f0f92e74b16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32173,
        "upload_time": "2021-06-18T13:25:44",
        "upload_time_iso_8601": "2021-06-18T13:25:44.846163Z",
        "url": "https://files.pythonhosted.org/packages/23/74/c65826bd7a61ee261933f6971cf5ba2eee9b162132a80269ff805c0f0812/digitaloceanobjects-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aada064842d81d44259164155cd169c3a22b3931657a3528d418a26037a02115",
        "md5": "994b489ad88e079b6b89cc86ef479a57",
        "sha256": "a46edb6bf952865dc50c872fd5ebba83c82ebb85c00ba883e3c96afef2316ea0"
      },
      "downloads": -1,
      "filename": "digitaloceanobjects-0.0.24.tar.gz",
      "has_sig": false,
      "md5_digest": "994b489ad88e079b6b89cc86ef479a57",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50845,
      "upload_time": "2022-11-18T15:36:14",
      "upload_time_iso_8601": "2022-11-18T15:36:14.729215Z",
      "url": "https://files.pythonhosted.org/packages/aa/da/064842d81d44259164155cd169c3a22b3931657a3528d418a26037a02115/digitaloceanobjects-0.0.24.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}