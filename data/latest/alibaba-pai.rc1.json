{
  "info": {
    "author": "Alibaba PAI team",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Alibaba PAI Python SDK\n\nAliPAI Python SDK is provided by PAI team of Alibaba computing platform. It provides convenience for users to access [PAI service in Alibaba Cloud](https://www.aliyun.com/product/bigdata/product/learn).\n\nIn current, PAI SDK supports PAIFlow(ML Pipeline Service of PAI) service, other PAI services, such as EAS(Elastic Algorithm Service) and Blade will be included soon.\n\n## Installation\n\nTo install the PAI sdk, use the below command in terminal.\n\n```bash\npython -m pip install alipai\n```\n\n## Usage\n\n### Setup default PAI session\n\nBefore use PAI service via SDK, developer should initialize the default PAI session by providing credential and region_id of service.\n\n>  **Pipeline service of PAI is currently provided in `cn-shanghai` region only**.\n\n\n```python\n\nfrom pai.core.session import setup_default_session\n\nsession = setup_default_session(access_key_id=\"your_access_key\", access_key_secret=\"your_access_secret\", region_id=\"your_region_id\")\n\n```\n\n\n### Access Pipeline Service\n\n#### Use PipelineTemplate\n\nPipelineTemplate instance includes the definition of \"Workflow\" use in PAI pipeline service. It could be fetched from remote PAI service or constructed from local Pipeline/Component.\n\nSaved pipeline template has unique `pipeline_id` which is generated by pipeline service. Remote pipeline template could be fetched using identifier-provider-version or pipeline_id.\n\nPAI provides a list of public pipeline templates which could be used as workflow template to run or to build pipeline. These templates are accessible by the specific provider `pai.common.ProviderAlibabaPAI` in `PipelineTemplate.list`.\n\n\n\n```python\n\nfrom pai.pipeline import PipelineTemplate\nfrom pai.common import ProviderAlibabaPAI\n\n# search PipelineTemplate which provide by `PAI` and include `xflow` in identifier.\ntemplate = next(PipelineTemplate.list(identifie=\"xflow\", provider=ProviderAlibabaPAI))\n\n# view template inputs/outputs.\ntemplate\ntemplate.inputs\ntemplate.outputs\n```\n\nAfter submitting run job, users are able to inspect the detailed workflow DAG, execution log and outputs of the pipeline by visiting the job detail URL printed in console.\n\n```python\n\nfrom pai.common import ProviderAlibabaPAI\nfrom pai.pipeline import PipelineTemplate\n\n# Get specific template by Identifier-Provider-Version\ntemplate = PipelineTemplate.get_by_identifier(identifier=\"split-xflow-maxCompute\",\n    provider=ProviderAlibabaPAI, version=\"v1\")\n\nxflow_execution = {\n    \"odpsInfoFile\": \"/share/base/odpsInfo.ini\",\n    \"endpoint\": \"http://service.cn-shanghai.maxcompute.aliyun.com/api\",\n    \"logViewHost\": \"http://logview.odps.aliyun.com\",\n    \"odpsProject\": \"your_odps_project\",\n}\n\n# run pipeline use provide arguments.\njob = template.run(job_name=\"demo-split-job\", arguments={\n    \"inputArtifact\": \"odps://pai_online_project/tables/mnist_data\",\n    \"execution\": xflow_execution, \"fraction\": 0.7}, wait=True)\njob.get_outputs()\n\n```\n\n\n### Build runnable and reusable pipeline \n\nPAI Pipeline Service supports nested user-defined workflow. Composite pipeline is runnable by providing required arguments. Saved pipeline template could be used as a step to build a new pipeline.\n\n```python\n\ndef create_composite_pipeline():\n    # Definite the inputs parameters in pipeline\n    execution_input = PipelineParameter(name=\"execution\", typ=dict)\n    cols_to_double_input = PipelineParameter(name=\"cols_to_double\")\n\n    table_input = PipelineArtifact(name=\"data_source\", metadata=ArtifactMetadata(\n            data_type=ArtifactDataType.DataSet,\n            location_type=ArtifactLocationType.MaxComputeTable))\n\n    # Pipeline step from remote PAI service.\n    type_transform_step = PipelineStep(\n        identifier=\"type-transform-xflow-maxCompute\", provider=ProviderAlibabaPAI,\n        version=\"v1\", name=\"typeTransform\", inputs={\n            \"inputArtifact\": table_input, \"execution\": execution_input, \n            \"outputTable\": gen_temp_table(), \"cols_to_double\": cols_to_double_input,\n        }\n    )\n\n    split_template = PipelineTemplate.get_by_identifier(identifier=\"split-xflow-maxCompute\",\n     provider=ProviderAlibabaPAI, version=\"v1\")\n    split_step = split_template.as_step(inputs={\"inputArtifact\": type_transform_step.outputs[0],\n            \"execution\": execution_input, \"output1TableName\": gen_temp_table(),\n            \"fraction\": 0.5, \"output2TableName\": gen_temp_table(),\n        })\n\n    # Initialize the pipeline instance by specific the steps and outputs.   \n    p = Pipeline(\n        steps=[split_step],\n        outputs=split_step.outputs[:2],\n    )\n    return p\n\np = create_composite_pipeline()\n# Run pipeline with required arguments.\npipeline_run = p.run(job_name=\"demo-composite-pipeline-run\", arguments={\n            \"execution\": xflow_execution,\n            \"cols_to_double\": \"time,hour,pm2,pm10,so2,co,no2\",\n            \"data_source\": \"odps://pai_online_project/tables/wumai_data\",\n        }, wait=True)\n\n# Save Pipeline\np.save(identifier=\"demo-composite-pipeline\", version=\"v1\")\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.aliyun.com/product/bigdata/product/learn",
    "keywords": "ML Alibaba Cloud PAI Training Inference Pipeline",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alibaba-pai",
    "package_url": "https://pypi.org/project/alibaba-pai/",
    "platform": "",
    "project_url": "https://pypi.org/project/alibaba-pai/",
    "project_urls": {
      "Homepage": "https://www.aliyun.com/product/bigdata/product/learn"
    },
    "release_url": "https://pypi.org/project/alibaba-pai/0.1.7/",
    "requires_dist": [
      "aliyun-python-sdk-core (==2.13.25)",
      "aliyun-python-sdk-sts (>=3.0.2)",
      "enum34 (>=1.1.10)",
      "graphviz (>=0.14)",
      "numpy (>=1.16.0)",
      "oss2 (>=2.8.0)",
      "pyodps (>=0.9.3.2)",
      "pyyaml (>=5.3.1)",
      "six (>=1.15.0)",
      "importlib-metadata (==2.0.0)"
    ],
    "requires_python": ">=2.7",
    "summary": "Alibaba Cloud PAI Python SDK",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8720449,
  "releases": {
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1480e7e7cc11c4e1f9bdad9bbdc10263cc69d407dc0b2c1fd2ee236478491f3",
          "md5": "8fb27ac169241071f404e48dc72f4d1f",
          "sha256": "c46a7bd480af72ced90d673afb2c092c74a4d1dbaba731d8fb6421dfd3a21156"
        },
        "downloads": -1,
        "filename": "alibaba_pai-0.1.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fb27ac169241071f404e48dc72f4d1f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 99636,
        "upload_time": "2020-11-22T14:58:47",
        "upload_time_iso_8601": "2020-11-22T14:58:47.605417Z",
        "url": "https://files.pythonhosted.org/packages/f1/48/0e7e7cc11c4e1f9bdad9bbdc10263cc69d407dc0b2c1fd2ee236478491f3/alibaba_pai-0.1.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1480e7e7cc11c4e1f9bdad9bbdc10263cc69d407dc0b2c1fd2ee236478491f3",
        "md5": "8fb27ac169241071f404e48dc72f4d1f",
        "sha256": "c46a7bd480af72ced90d673afb2c092c74a4d1dbaba731d8fb6421dfd3a21156"
      },
      "downloads": -1,
      "filename": "alibaba_pai-0.1.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8fb27ac169241071f404e48dc72f4d1f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7",
      "size": 99636,
      "upload_time": "2020-11-22T14:58:47",
      "upload_time_iso_8601": "2020-11-22T14:58:47.605417Z",
      "url": "https://files.pythonhosted.org/packages/f1/48/0e7e7cc11c4e1f9bdad9bbdc10263cc69d407dc0b2c1fd2ee236478491f3/alibaba_pai-0.1.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}