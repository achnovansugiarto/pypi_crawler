{
  "info": {
    "author": "Daniil Malevanniy and others",
    "author_email": "oleg.Jakushkin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# L3 Network Simulator repository\nWith the aid of Python scripts, this library may be used to describe and manage virtual networks running inside Docker containers.\n\n### Installation\n\n1. L3NS requires Docker (https://docs.docker.com/engine/install/)\n2. Without sudo, further configuration is required for Docker and L3NS (https://docs.docker.com/engine/install/linux-postinstall/)\n3. `pip3 install l3ns-dev`\n\n\n### First look\n\nExamples of how to use the library can be found in the [examples](examples) subdirectory.\nThe best option is to use [this example](examples/simple/basic docker lab.py) to obtain a general understanding of the library and [api docs](./API_REFERENCE.md).\n\n```python\nfrom l3ns.ldc import DockerNode\nfrom l3ns import defaults\n\nn1 = DockerNode('test1', image='alpine', command='tail -f /dev/null')\nn2 = DockerNode('test2', image='alpine', command='tail -f /dev/null')\n\nn1.connect_to(n2)\n\nprint(n1.get_ip())\nprint(n2.get_ip())\n\ndefaults.network.start(interactive=True)\n```\n\nThe script can be executed by typing \"python3\".\n\n```\n    # python3 basic_docker_lab.py\n    10.0.0.1\n    10.0.0.2 \n```\n\nDocker will build two containers (named \"test1\" and \"test2\") from the \"alpine\" docker image as the script executes, and these containers will execute the \"tail -f /dev/null\" command. \nThis command has no effect and lets the container keep running until manually terminating it.\nThe IP addresses of both containers will be shown during the script and they will both be linked to the same subnet.\nBy executing \"ping\" on any of the containers, you can verify this:\n\n```\n    docker exec -it node1 ping 10.0.0.2\n```\n\nIP packets are allowed to flow between nodes if you see a response.\n\n\n### Introduction\n\nThe three categories of objects that make up the operation of L3NS are \"Node\" (the emulated network's node), \"Subnet\" (the network's IP subnet), and \"Network\" (a separate emulated network, local - LAN, or global - WAN). The same network encompasses all subnets, and nodes might be a part of both one global and many local networks.\n\nL3NS offers a variety of node implementations, subnets, and networks with various scopes but the same API.\nThe [l3ns.base](l3ns/base) submodule contains the abstract classes that describe the overall API.\nL3NS now offers [l3ns.ldc](l3ns/ldc) (Local Docker Container) and [l3ns.cluster](l3ns/cluster) as its two implementations.\n\n### API Reference \n\nThe [API REFERENCE.md](./API_REFERENCE.md) file contains comprehensive documentation of L3NS modules.\nIt is created using the command `pydoc-markdown` (you must install the package with the same name from PyPI), and it is based on the documentation provided in the source code.\n\n  \n### Writing your own simulation script\n\nThere are numerous fundamental steps that go up describing a virtual network model using l3ns:\n1. Building the network's central hub, which will have many routers that will transfer traffic between its various nodes. This phase may be done multiple times for networks with a high level of complexity.\n2. Establishing subnets across routers. The simplest method is to add all routers to the same subnet, although this may restrict your ability to manage the dynamic network state while testing. *In this situation, there is no need to update the routing overlays; you may need to divide some routers into separate subnets.*\n3. Configuring routers using dynamic routing protocols.\nOf course, the protocol used depends on the objectives set, but if you're unsure or have no idea which protocol to pick, utilize OSPF.\n4. Establishing end subnets connected to routers and populating them with payload nodesâ€”aspects of the application being tested.\n5. The network's test launch. It can be beneficial to confirm that the network is configured appropriately before moving on to test the application.\n\nThe simplest method to accomplish this is to, as shown in [some examples](examples/sto_k/ping scalable.py), replace the entrypoint/cmd nodes with the logic application that is being tested.\nPing will terminate if it is unable to deliver packets to the target node, such as when routing is wrongly setup or there is no network path between hosts, such as when a subnet is forgotten.\nThe debugging of l3ns models is made a great deal simpler by this method.\n6. Use the completed network.\n\nWhen distant resources are required for modeling and the submodule [l3ns.cluster](l3ns/cluster/utils.py) is used, a preparatory stage is added: the preliminary configuration of cluster nodes.\nExamples (examples/simple/basic swarm lab.py) show how it appears.\n\n\n\n### Litrature on L3NS:\n - [L3NS: Large Scale Network Simulation for Testing Distributed Applications](https://link.springer.com/chapter/10.1007/978-3-031-10542-5_44), 2022\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/OlegJakushkin/l3ns",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "l3ns-dev",
    "package_url": "https://pypi.org/project/l3ns-dev/",
    "platform": null,
    "project_url": "https://pypi.org/project/l3ns-dev/",
    "project_urls": {
      "Homepage": "https://github.com/OlegJakushkin/l3ns"
    },
    "release_url": "https://pypi.org/project/l3ns-dev/0.0.2/",
    "requires_dist": [
      "docker",
      "hashids",
      "pydoc-markdown"
    ],
    "requires_python": "",
    "summary": "Simple Docker based Network Simulator",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14822173,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f6ccf9cfd18cc224cd198918d432ac5cceacc870e850424b702aa81c8c102d1",
          "md5": "3f4e97e1e2e882410c024a95e80cf221",
          "sha256": "340fe52b7e9cfeae95db2e7faa1d826b7613ad969b3829120638283273f73fe5"
        },
        "downloads": -1,
        "filename": "l3ns_dev-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f4e97e1e2e882410c024a95e80cf221",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27843,
        "upload_time": "2022-08-20T16:15:44",
        "upload_time_iso_8601": "2022-08-20T16:15:44.301794Z",
        "url": "https://files.pythonhosted.org/packages/0f/6c/cf9cfd18cc224cd198918d432ac5cceacc870e850424b702aa81c8c102d1/l3ns_dev-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c5d6668acf8d56f1306a8ff8317281235d13a036cc8beb9256246c665fc402f",
          "md5": "08e6b05cb96f64d4863154c51b7f125c",
          "sha256": "037c5e999b770141fb100dbf8c8dbedc758edcdc8dfa0edd01e06f90592e0c6c"
        },
        "downloads": -1,
        "filename": "l3ns-dev-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "08e6b05cb96f64d4863154c51b7f125c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22265,
        "upload_time": "2022-08-20T16:15:46",
        "upload_time_iso_8601": "2022-08-20T16:15:46.356142Z",
        "url": "https://files.pythonhosted.org/packages/7c/5d/6668acf8d56f1306a8ff8317281235d13a036cc8beb9256246c665fc402f/l3ns-dev-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f6ccf9cfd18cc224cd198918d432ac5cceacc870e850424b702aa81c8c102d1",
        "md5": "3f4e97e1e2e882410c024a95e80cf221",
        "sha256": "340fe52b7e9cfeae95db2e7faa1d826b7613ad969b3829120638283273f73fe5"
      },
      "downloads": -1,
      "filename": "l3ns_dev-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3f4e97e1e2e882410c024a95e80cf221",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27843,
      "upload_time": "2022-08-20T16:15:44",
      "upload_time_iso_8601": "2022-08-20T16:15:44.301794Z",
      "url": "https://files.pythonhosted.org/packages/0f/6c/cf9cfd18cc224cd198918d432ac5cceacc870e850424b702aa81c8c102d1/l3ns_dev-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c5d6668acf8d56f1306a8ff8317281235d13a036cc8beb9256246c665fc402f",
        "md5": "08e6b05cb96f64d4863154c51b7f125c",
        "sha256": "037c5e999b770141fb100dbf8c8dbedc758edcdc8dfa0edd01e06f90592e0c6c"
      },
      "downloads": -1,
      "filename": "l3ns-dev-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "08e6b05cb96f64d4863154c51b7f125c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22265,
      "upload_time": "2022-08-20T16:15:46",
      "upload_time_iso_8601": "2022-08-20T16:15:46.356142Z",
      "url": "https://files.pythonhosted.org/packages/7c/5d/6668acf8d56f1306a8ff8317281235d13a036cc8beb9256246c665fc402f/l3ns-dev-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}