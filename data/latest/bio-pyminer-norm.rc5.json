{
  "info": {
    "author": "Scott Tyler",
    "author_email": "scottyler89@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# README #\n\n## What is this repository for? ##\n\n* This package is to scalably downsample count matricies such that all column sums are equivalent across samples.\n\n\n## How do I get set up? ##\n\n* This library is pip installable:\n\n\t`python3 -m pip install bio-pyminer-norm`\n\n\n## Usage ##\n## Scanpy (or anything from python where you have a matrix) ##\n* If you're using scanpy, the syntax is quite simple. The only thing worth noting is that our downsampling function assumes that the genes are in rows, and cells are in columns, which is flipped from AnnData's formatting, that's why we use the have the transpose() functions below:\n\n```\nfrom pyminer_norm.downsample import downsample_mat\nadata.X = downsample_mat(adata.X.transpose()).transpose()\n```\n\nIf you follow along [Scanpy's tutorial](https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html), then the only thing different would be swapping out:\n\n```\n[14]: sc.pp.normalize_total(adata, target_sum=1e4)\n\nfor \n\n[14]: adata.X = downsample_mat(adata.X.transpose()).transpose()\n```\nHowever, I'd _strongly_ advise also filtering based on total UMI count before! With downsampling you've got to chuck everything that doesn't have enough counts. In their original analysis, there was a cell with 556 UMI, while in the same dataset another cell had 8875 (over an order of magnitude more!). This dramatic range is what we're accounting for with downsampling. So - instead of the above, I'd recommend swapping:\n\n```\n[14]: sc.pp.normalize_total(adata, target_sum=1e4)\n\nfor \n\n[14]: adata = adata[adata.obs.total_counts >= 1750, :]\n[15]: adata.X = downsample_mat(adata.X.transpose()).transpose()\n```\n\n\n## Command line ##\n* This library was originally designed to take in tab delimited .tsv files. If you have a chromium .h5 file, you can convert it to tsv as shown below. Note that you'll also need to download and unzip [Chromium's software](https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest), and use the -cell_ranger_cmd argument to tell the software where the chromium software is located.:\n\n\n```\npython3 -m pyminer_norm.process_chromium_h5 -i \"infile_1.h5\" -cell_ranger_cmd \"~/bin/cellranger-3.0.2/cellranger\"\n```\n\n\n* The first thing you'll want to do is look at the distributions of the number of observed genes and total number of UMI counts.\n\n\n```\npython3 -m pyminer_norm.combine_col_sums_counts -i ~/Downloads/infile_1.tsv ~/Downloads/infile_2.tsv ~/Downloads/infile_3.tsv -o ~/Downloads/output_stats_dir\n```\n\n\n* Note that you can do all this for just a single dataset as well - just only feed in the one dataset!\n* If you don't want to use this tool's full command line interface, you can also just use the downsample function directly programmatically. This is more hands-on though; to do that, have a look at some of the \"Programatic\" tutorials below. More detailed tutorials are below with specific examples using Chromium files, tsvs, and some of the Chan-Zukerberg Institute (CZI) hdf5 format.\n\n## Command-line: Chromium Example ##\n#### If you already have .tsv files, you can skip to the 'Analyze and downsample tsv files' section below! ####\n* Let's download two Chromium datasets to downsample and integrate. (Download the \"Feature / cell matrix HDF5 (filtered)\" files).\n\n* [1k PBMC V2](https://support.10xgenomics.com/single-cell-gene-expression/datasets/3.0.0/pbmc_1k_v2)\n* [1k PBMC V3](https://support.10xgenomics.com/single-cell-gene-expression/datasets/3.0.0/pbmc_1k_v3)\n\n### Command-line: Chromium h5 to tsv ###\nFirst, we'll convert them to tsv format:\n\n```\npython3 -m pyminer_norm.process_chromium_h5 -i ~/Downloads/chromium_example/1k_v2/pbmc_1k_v2_filtered_feature_bc_matrix.h5 \\\n                                            --cellranger_cmd ~/bin/cellranger-3.0.2/cellranger\n\n```\n\n\nand now for the other file:\n\n```\npython3 -m pyminer_norm.process_chromium_h5 -i ~/Downloads/chromium_example/1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.h5 \n                                            --cellranger_cmd ~/bin/cellranger-3.0.2/cellranger\n```\n\n### Command-line: Analyze and downsample tsv files ###\nRun the analysis for the total UMI counts and the total number of observed genes \n\n```\npython3 -m pyminer_norm.combine_col_sums_counts -i ~/Downloads/chromium_example/1k_v2/pbmc_1k_v2_filtered_feature_bc_matrix.tsv \\\n                                                   ~/Downloads/chromium_example/1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.tsv \\\n                                                   --out ~/Downloads/chromium_example/combined_stats\n```\n\n\nNow look in the output plots in the \"~/Downloads/chromium_example/combined_stats/\" folder that was created. The scatter and violin plots should guide you on what some good cutoffs are that could work for both datasets. Cutoffs that seemed reasonable to me were:\n\n\n * sum UMI: 2512,17782\n * gene count: 631,3981\n\nBeyond those were extreme tails. Note that you can also use 'inf' or '-inf' in the command line below if you want no upper or lower bounds respectively.\n\n```\npython3 -m pyminer_norm.filter_count_sums_ds_merge_log -i ~/Downloads/chromium_example/1k_v2/pbmc_1k_v2_filtered_feature_bc_matrix.tsv \\\n                                                          ~/Downloads/chromium_example/1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.tsv \\\n                                                          --sum_range 2512,17782 \\\n                                                          --count_range 631,3981 \\\n                                                          --out ~/Downloads/chromium_example/combined_pbmcs/combined_pbmcs\n```\n\n\nThis generates 4 files:\n\n * *combined_pbmcs.hdf5*: downsampled count matrix\n * *combined_pbmcs_log2.hdf5*: log2 transformed downsampled count matrix\n * *ID_list.txt*: row-names (i.e.: genes in this case)\n * *column_IDs.txt*: cell names (+ a header a line)\n\n\nYou can use these files directly with PyMINEr, or load them into python or R using the appropriate hdf5 reading package. For python3, you can load it in as follows:\n\n```\n## dependencies\nimport h5py\nimport os\n\nout_h5_file = os.path.expanduser('~/Downloads/chromium_example/combined_pbmcs/combined_pbmcs_log2.hdf5')\nh5_in = h5py.File(out_h5_file,'r')## note that this is in read-only format, use 'r+' to be able to edit it as well. I'd recommend making a backup of the file first, so that you will always be able to go back to that, and only edit a 'disposable' version of the dataset.\nnorm_mat = h5_in['infile']\n## note that this is just he matrix, the cell and gene labels are the same as they were in the input. For analysis in [PyMINEr]() (my totally unbiased preference), you'll want to save those in new-line\n```\n\n## Programatic Usage (i.e.: Within python3) ##\n### Programmatic (python3): tsv inputs ###\n* Here, you'll need .tsv files with your inputs already filtered and ready to be downsampled and integrated. If you don't have any on hand, try using the chromium ones from the example above. That's what we'll use in this demo.\n\n```\n## import the dependencies from the package\nimport os\nfrom pyminer_norm.combine_col_sums_counts import get_col_sums_counts\nfrom pyminer_norm.filter_count_sums_ds_merge_log import process\n\n## make a list variable that holds the path to the tsvs you want to integrate and downsample.\nlist_of_tsv_to_integrate = [\"~/Downloads/chromium_example/1k_v2/pbmc_1k_v2_filtered_feature_bc_matrix.tsv\",\"~/Downloads/chromium_example/1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.tsv\"]\n\n## expand the ~ to be the full path\nlist_of_tsv_to_integrate = [os.path.expanduser(f) for f in list_of_tsv_to_integrate]\n\n## first you'll want to look at the distribution of UMI counts \n## as well as the number of observed genes in each cell from your datasets\noutput_dir_for_plots = os.path.expanduser(\"~/Downloads/chromium_example/combined_stats\")\nget_col_sums_counts(list_of_tsv_to_integrate, output_dir_for_plots)\n\n## now you'll want to check out those plots in the output directory and come up\n## with a cutoff that will clip off most of the the tails of those distirbutions\n## especially at the low end. You can also clip off the top, as these might be doublets.\nsum_range = \"2512,17782\"\ncount_range = \"631,3981\"\n\n## define the output file prefix (note: this is just the prefix that will be used to generate 4 files)\n##   including the dowsampled count file: prefix.hdf5\n##   log2 transformed downsampled counts: prefix_log2.hdf5\n##                              gene ids: ID_list.txt\n##                              cell ids: column_IDs.txt\nout_prefix = os.path.expanduser(\"~/Downloads/chromium_example/combined_pbmcs/combined_pbmcs\")\n\n## call the downsampling function (in the style for input .tsv files)\nprocess(list_of_tsv_to_integrate, sum_range, count_range, out_prefix)\n```\n\n\n### Programmatic (python3): Bone-marrow atlas (40,000) CZI-h5 format ###\n* This tutorial is for downsampling a single, very large dataset\n* First, download the hdf5 file (you will need an aws account for this):\n* https://s3.console.aws.amazon.com/s3/object/czb-tabula-muris-senis/Data-objects/tabula-muris-senis-droplet-processed-official-annotations-Marrow.h5ad?region=us-west-2&tab=overview\n\n\n```\n## import the dependencies\nimport numpy as np\nimport os\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom pyminer_norm.common_functions import read_cz_h5\nfrom pyminer_norm.downsample import downsample\n\n## read in the bone marrow hdf5 file\nmat, genes, cells = read_cz_h5( os.path.expanduser('~/Downloads/tabula-muris-senis-droplet-processed-official-annotations-Marrow.h5ad') ) ## or wherever you downloaded it to\n## for the sake of this demonstration, we'll just floor these - in reality, they had transformed it into a log(TPM) like unit, but this is just for illustrative purposes so we'll just make these integers to represent counts\nmat.data = np.round(mat.data)\n\n## first we'll have to figure out what level to downsample to. First by looking at the total UMI in each cell\ntotal_umi_per_cell = np.array(np.sum(mat,axis=0))[0]\nsns.distplot(total_umi_per_cell)\nplt.show()\nsns.distplot(np.log10(total_umi_per_cell))\nplt.show()\n\n## and take a look at the total number of observed genes\nnum_genes_per_cell = np.array(np.sum(mat!=0,axis=0))[0]\nsns.distplot(num_genes_per_cell)\nplt.show()\nsns.distplot(np.log10(num_genes_per_cell))\nplt.show()\n\n## now that you've looked at those distributions, you should make the call on what your total-UMI downsampling cutoff should be.\nmin_total_UMI = 2500\nmin_num_genes_expressed = 850\nkeep_cell_indices = np.where((total_umi_per_cell >= min_total_UMI) * (num_genes_per_cell >= min_num_genes_expressed))[0] ## multiply the two booleans for whether or not a cell passed each cutoff. It'll only be true if it passed both\ncells = np.array(cells)[keep_cell_indices].tolist()\nmat = mat[:,keep_cell_indices]\n\n## now we'll downsample the matrix to that level\n# note that the first and third arguments are None because those are for when you're working on tsv files rather than a matrix you've already read in\nnorm_mat = downsample(None, min_total_UMI, None, full_dataset = mat, gene_ids = genes, cols = cells)\n```\n\n\n### Programmatic (python3): Whole Organism (245,000 cells) CZI-h5 format ###\n* This tutorial is for downsampling a single, very, very large dataset\n* First, download the hdf5 file (you will need an aws account for this):\n* https://s3.console.aws.amazon.com/s3/object/czb-tabula-muris-senis/Data-objects/tabula-muris-senis-droplet-official-raw-obj.h5ad?region=us-west-2&tab=overview\n\n\n```\n## import the dependencies\nimport numpy as np\nimport seaborn as sns\nimport os\nfrom matplotlib import pyplot as plt\nfrom pyminer_norm.common_functions import read_cz_h5\nfrom pyminer_norm.downsample import downsample_out_of_memory\n\n## read in the file\nmat, genes, cells = read_cz_h5( os.path.expanduser('~/Downloads/tabula-muris-senis-droplet-official-raw-obj.h5ad')) ## or wherever you put the downloaded file\n\n## calculate the total number of umi in each cell and plot it\ntotal_umi_per_cell = np.sum(mat,axis=0)\nsns.distplot(total_umi_per_cell)\nplt.show()\nsns.distplot(np.log10(total_umi_per_cell))\nplt.show()\n\n# believe it or not, it's faster to re-load this file as a binary matrix than to do the mat!=0 comparison\nbinary_mat, genes, cells = read_cz_h5( os.path.expanduser('~/Downloads/tabula-muris-senis-droplet-official-raw-obj.h5ad'), load_binary=True) ## or wherever you put the downloaded file\nnum_genes_per_cell = np.sum(binary_mat,axis=0)\nsns.distplot(num_genes_per_cell)\nplt.show()\nsns.distplot(np.log10(num_genes_per_cell))\nplt.show()\n\n## Notice that in this case, the authors had already filtered out anything with less than 2500 counts, so no need to filter based on that.\nprint(np.min(total_umi_per_cell))\nmin_num_genes_expressed = 850\nkeep_cell_indices = np.where(num_genes_per_cell >= min_num_genes_expressed)[0] \ncells = np.array(cells)[keep_cell_indices].tolist()\nmat = mat[:,keep_cell_indices]\n\n## now downsample it. Note that if you have a solid state drive or something fast, or a different temp directory that you'd like to use (either for speed or space), use the 'temp_dir' argument. Otherwise, this defaults to the system-wide temp direcotry\nout_h5_file = downsample_out_of_memory(full_dataset = mat, gene_ids = genes, cols = cells, num_transcripts=2500, out_h5_file = os.path.expanduser('~/Downloads/tabula-muris-senis-droplet-processed-official-annotations-Marrow_temp_ds2500.hdf5'))\n\n## here, the function returns the path of the hdf5 file that was generated. You can read it in like so:\nimport h5py\nh5_in = h5py.File(out_h5_file,'r')## note that this is in read-only format, use 'r+' to be able to edit it as well. I'd recommend making a backup of the file first, so that you will always be able to go back to that, and only edit a 'disposable' version of the dataset.\nnorm_mat = h5_in['infile']\n## note that this is just the matrix, the cell and gene labels are the same as they were in the input. For analysis in pyminer (my totally unbiased preference), you'll want to save those in new-line\n```\n\n\nAnd that's it - really the only think you have to do is figure out which cells you want to keep or discard. Note, that there can be some other good heuristics that you might want to use as well such as MALAT gene expression, or fraction of mitochondrial genes, etc to filter out other cells/debris. What you'd like to do with the matrix from here forward is up to you though!\n\n### Who do I talk to? ###\n\n* Scott Tyler: scottyler89@gmail.com\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://scottyler892@bitbucket.org/scottyler892/pyminer_norm",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bio-pyminer-norm",
    "package_url": "https://pypi.org/project/bio-pyminer-norm/",
    "platform": null,
    "project_url": "https://pypi.org/project/bio-pyminer-norm/",
    "project_urls": {
      "Homepage": "https://scottyler892@bitbucket.org/scottyler892/pyminer_norm"
    },
    "release_url": "https://pypi.org/project/bio-pyminer-norm/0.2.6/",
    "requires_dist": [
      "seaborn (>=0.8.1)",
      "numpy (>=1.16.0)",
      "scikit-learn",
      "h5py (>=2.9.0)",
      "matplotlib (>=3.0.2)",
      "scipy (>=1.2.0)",
      "ray (>=0.8.0)"
    ],
    "requires_python": "",
    "summary": "PyMINEr Norm: A normalization package for scRNAseq",
    "version": "0.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17287583,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aecb31e08f85fc3f862c6b8c29206451b65a0ee5e0c747f8a3bd112bd37227dd",
          "md5": "ae5c2357e6dd1456827551d8bc442fb2",
          "sha256": "46473af3c878e6f6b43acc89036444cfa3d778cc3d5f3b12bd755d5473c3f82a"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae5c2357e6dd1456827551d8bc442fb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36265,
        "upload_time": "2020-09-01T15:33:26",
        "upload_time_iso_8601": "2020-09-01T15:33:26.765193Z",
        "url": "https://files.pythonhosted.org/packages/ae/cb/31e08f85fc3f862c6b8c29206451b65a0ee5e0c747f8a3bd112bd37227dd/bio_pyminer_norm-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "328295f923360454357a2807b8153cdc15ec65416474fabd6589641e71e06edb",
          "md5": "b15ac6dd747179ee4503bb7be6a7dbcf",
          "sha256": "31dced62ad2c1855e7136a86a7d04dbab4259b9c1a9ccefab197d02f90cff26d"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b15ac6dd747179ee4503bb7be6a7dbcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29573,
        "upload_time": "2020-09-01T15:33:29",
        "upload_time_iso_8601": "2020-09-01T15:33:29.617629Z",
        "url": "https://files.pythonhosted.org/packages/32/82/95f923360454357a2807b8153cdc15ec65416474fabd6589641e71e06edb/bio_pyminer_norm-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e9b239a5a4a405a96834e931d79bda68369ecf32d8f94d9944eec559de11b90",
          "md5": "a60f6569fad5dc03ab7dd5628ad7526c",
          "sha256": "01c3c5127e13c8ee91a1e8528f58eb2fab1c25370af57cd80bee20dbe07aadcd"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.3-py3.8.egg",
        "has_sig": false,
        "md5_digest": "a60f6569fad5dc03ab7dd5628ad7526c",
        "packagetype": "bdist_egg",
        "python_version": "0.2.3",
        "requires_python": null,
        "size": 91209,
        "upload_time": "2021-11-05T20:14:51",
        "upload_time_iso_8601": "2021-11-05T20:14:51.202469Z",
        "url": "https://files.pythonhosted.org/packages/2e/9b/239a5a4a405a96834e931d79bda68369ecf32d8f94d9944eec559de11b90/bio_pyminer_norm-0.2.3-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c492a32bd4371f5290d0c1c070b363d384d4f2051ee7461f890804ece6aff5ea",
          "md5": "5a35173ccb5f69aa9666b9acc73b27ab",
          "sha256": "9edf5f1d784bd07c31c7eed1c508d0edcadfc4dc73481f935d1841085b1a96aa"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a35173ccb5f69aa9666b9acc73b27ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45994,
        "upload_time": "2021-11-05T20:14:49",
        "upload_time_iso_8601": "2021-11-05T20:14:49.263952Z",
        "url": "https://files.pythonhosted.org/packages/c4/92/a32bd4371f5290d0c1c070b363d384d4f2051ee7461f890804ece6aff5ea/bio_pyminer_norm-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21f5c5c9675a8ea6742764792f7d28f92a0b72577d7cc5fa730c2d6432bed7bc",
          "md5": "ce02c2a0919f4d3c0f365e3032fe8752",
          "sha256": "1f0dd035beaecf83ad37bf6f188ce54bc3972442d7d89cac1d19c1cdc14af56d"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ce02c2a0919f4d3c0f365e3032fe8752",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39736,
        "upload_time": "2021-11-05T20:14:53",
        "upload_time_iso_8601": "2021-11-05T20:14:53.045214Z",
        "url": "https://files.pythonhosted.org/packages/21/f5/c5c9675a8ea6742764792f7d28f92a0b72577d7cc5fa730c2d6432bed7bc/bio_pyminer_norm-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd896e9fd63698f310da08c2c595181bdd487b1b815d9598a3871e4ab2d07a79",
          "md5": "c57bb519da9217a206bf8db73188a43f",
          "sha256": "b169f987a826e75831161e09e4e2dcf48ab0ee8fb78111867ce09007f949a259"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.4-py3.8.egg",
        "has_sig": false,
        "md5_digest": "c57bb519da9217a206bf8db73188a43f",
        "packagetype": "bdist_egg",
        "python_version": "0.2.4",
        "requires_python": null,
        "size": 91218,
        "upload_time": "2022-01-14T20:51:37",
        "upload_time_iso_8601": "2022-01-14T20:51:37.907445Z",
        "url": "https://files.pythonhosted.org/packages/bd/89/6e9fd63698f310da08c2c595181bdd487b1b815d9598a3871e4ab2d07a79/bio_pyminer_norm-0.2.4-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae6506fd8fff7234ac7ad4c2e8042ceab1c0c607ca1cd7847716ebdfa5ede9f6",
          "md5": "825f1f15e34a2cb6691fb1fe509ca6b1",
          "sha256": "6c6b76152717d4b2b1815b81f1b887852b7b03497626f12427fb541319253f93"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "825f1f15e34a2cb6691fb1fe509ca6b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45999,
        "upload_time": "2022-01-14T20:51:36",
        "upload_time_iso_8601": "2022-01-14T20:51:36.253669Z",
        "url": "https://files.pythonhosted.org/packages/ae/65/06fd8fff7234ac7ad4c2e8042ceab1c0c607ca1cd7847716ebdfa5ede9f6/bio_pyminer_norm-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd127571e7e5740b7bb38737853ef0b7952453716ec35910dd3844df1d9900cd",
          "md5": "0946dd0c3bd9ddcabd712345f89d9434",
          "sha256": "c64c5d9ff22f6d4dd52cee86efc60fcf28dfada584d2ba63db76e9f466d505e9"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0946dd0c3bd9ddcabd712345f89d9434",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39752,
        "upload_time": "2022-01-14T20:51:39",
        "upload_time_iso_8601": "2022-01-14T20:51:39.564467Z",
        "url": "https://files.pythonhosted.org/packages/fd/12/7571e7e5740b7bb38737853ef0b7952453716ec35910dd3844df1d9900cd/bio_pyminer_norm-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67984b2c072dbc0e6928f7ea0c5e3a00e9fe80ccfb7f0e047660fd4ed53d9bd2",
          "md5": "5f0648dbd6037401b82f43bcec6d8317",
          "sha256": "65def05f1a9d5ea41d2e3f5e0173daf068205718895983cbb73d44e0f268bb57"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f0648dbd6037401b82f43bcec6d8317",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46036,
        "upload_time": "2023-03-11T16:12:02",
        "upload_time_iso_8601": "2023-03-11T16:12:02.766894Z",
        "url": "https://files.pythonhosted.org/packages/67/98/4b2c072dbc0e6928f7ea0c5e3a00e9fe80ccfb7f0e047660fd4ed53d9bd2/bio_pyminer_norm-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c688c91cc5c7a7f91143a9a251aef04ac48075d133b84e0cb7a6b6ef9ab6bf7e",
          "md5": "e0bb3a2303794319e64190fd73df0c18",
          "sha256": "c4be8e954e3be4b8a57e6aeeaa476436e9676d435881a215d7bda1acfcfa6191"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e0bb3a2303794319e64190fd73df0c18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40729,
        "upload_time": "2023-03-11T16:12:05",
        "upload_time_iso_8601": "2023-03-11T16:12:05.062631Z",
        "url": "https://files.pythonhosted.org/packages/c6/88/c91cc5c7a7f91143a9a251aef04ac48075d133b84e0cb7a6b6ef9ab6bf7e/bio_pyminer_norm-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32c055fc364a19f335e45105afae597447a0bd35be7bbb585f3e5ad6621e7392",
          "md5": "7d49e859f42829582d6a982688985c80",
          "sha256": "ba9c5d7f9efcc444f7a374f76824ff230aa7c91241072d2154b064f8262aaf66"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d49e859f42829582d6a982688985c80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46039,
        "upload_time": "2023-03-14T13:26:00",
        "upload_time_iso_8601": "2023-03-14T13:26:00.265620Z",
        "url": "https://files.pythonhosted.org/packages/32/c0/55fc364a19f335e45105afae597447a0bd35be7bbb585f3e5ad6621e7392/bio_pyminer_norm-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f63132e063b35534ec0fc87f442ba3fd3f935b890a0ce20d4b03bdaa9df0249b",
          "md5": "dd8445c53f3efb35d4567aba01eda71c",
          "sha256": "7a254f19b7e5cffa180c1d6676a149aa8f4a5ddb4a263b5bdda1ebc28effe37f"
        },
        "downloads": -1,
        "filename": "bio_pyminer_norm-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "dd8445c53f3efb35d4567aba01eda71c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40741,
        "upload_time": "2023-03-14T13:26:01",
        "upload_time_iso_8601": "2023-03-14T13:26:01.865014Z",
        "url": "https://files.pythonhosted.org/packages/f6/31/32e063b35534ec0fc87f442ba3fd3f935b890a0ce20d4b03bdaa9df0249b/bio_pyminer_norm-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32c055fc364a19f335e45105afae597447a0bd35be7bbb585f3e5ad6621e7392",
        "md5": "7d49e859f42829582d6a982688985c80",
        "sha256": "ba9c5d7f9efcc444f7a374f76824ff230aa7c91241072d2154b064f8262aaf66"
      },
      "downloads": -1,
      "filename": "bio_pyminer_norm-0.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d49e859f42829582d6a982688985c80",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 46039,
      "upload_time": "2023-03-14T13:26:00",
      "upload_time_iso_8601": "2023-03-14T13:26:00.265620Z",
      "url": "https://files.pythonhosted.org/packages/32/c0/55fc364a19f335e45105afae597447a0bd35be7bbb585f3e5ad6621e7392/bio_pyminer_norm-0.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f63132e063b35534ec0fc87f442ba3fd3f935b890a0ce20d4b03bdaa9df0249b",
        "md5": "dd8445c53f3efb35d4567aba01eda71c",
        "sha256": "7a254f19b7e5cffa180c1d6676a149aa8f4a5ddb4a263b5bdda1ebc28effe37f"
      },
      "downloads": -1,
      "filename": "bio_pyminer_norm-0.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "dd8445c53f3efb35d4567aba01eda71c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40741,
      "upload_time": "2023-03-14T13:26:01",
      "upload_time_iso_8601": "2023-03-14T13:26:01.865014Z",
      "url": "https://files.pythonhosted.org/packages/f6/31/32e063b35534ec0fc87f442ba3fd3f935b890a0ce20d4b03bdaa9df0249b/bio_pyminer_norm-0.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}