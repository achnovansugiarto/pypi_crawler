{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Ripple\n\nA small `jax` package for differentiable and fast gravitational wave data analysis.\n\n# Getting Started\n\n### Installation\n\nRipple is still in its development stage and therefore has not been made available installable directly through pip yet. Instead,\none can install using \n\n```\ngit clone git@github.com:tedwards2412/ripple.git\ncd ripple\npip3 install .\n```\n\n### Generating a waveform and its derivative\n\nGenerating a waveform is increadibly easy. Below is an example of calling the PhenomD waveform model\nto get the h_+ and h_x polarizations of the waveform model\n\nWe start with some basic imports:\n\n```python\nfrom math import pi\nimport jax.numpy as jnp\n\nfrom ripple.waveforms import IMRPhenomD\nimport matplotlib.pyplot as plt\nfrom ripple import ms_to_Mc_eta\n```\n\nAnd now we can just set the parameters and call the waveform!\n\n```python\n# Get a frequency domain waveform\n# source parameters\n\nm1_msun = 20.0 # In solar masses\nm2_msun = 19.0\nchi1 = 0.5 # Dimensionless spin\nchi2 = -0.5\ntc = 0.0 # Time of coalescence in seconds\nphic = 0.0 # Time of coalescence\ndist_mpc = 440 # Distance to source in Mpc\ninclination = 0.0 # Inclination Angle\npolarization_angle = 0.2 # Polarization angle\n\n# The PhenomD waveform model is parameterized with the chirp mass and symmetric mass ratio\nMc, eta = ms_to_Mc_eta(jnp.array([m1_msun, m2_msun]))\n\n# These are the parametrs that go into the waveform generator\n# Note that JAX does not give index errors, so if you pass in the\n# the wrong array it will behave strangely\ntheta_ripple = jnp.array([Mc, eta, chi1, chi2, dist_mpc, tc, phic, inclination, polarization_angle])\n\n# Now we need to generate the frequency grid\nf_l = 24\nf_u = 512\ndel_f = 0.01\nfs = jnp.arange(f_l, f_u, del_f)\n\n# And finally lets generate the waveform!\nhp_ripple, hc_ripple = IMRPhenomD.gen_IMRPhenomD_polar(fs, theta_ripple)\n\n# Note that we have not internally jitted the functions since this would\n# introduce an annoying overhead each time the use evaluated the function with a different length frequency array\n# We therefore recommend that the user jit the function themselves to accelerate evaluations. For example\n\nimport jax\n\n@jax.jit\ndef waveform(theta):\n    return IMRPhenomD.gen_IMRPhenomD_polar(fs, theta)\n```\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ripple.readthedocs.io/en/latest/",
    "keywords": "gravitational waves,jax",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ripplegw",
    "package_url": "https://pypi.org/project/ripplegw/",
    "platform": null,
    "project_url": "https://pypi.org/project/ripplegw/",
    "project_urls": {
      "Bug Tracker": "https://github.com/tedwards2412/ripple",
      "Homepage": "https://ripple.readthedocs.io/en/latest/"
    },
    "release_url": "https://pypi.org/project/ripplegw/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A small jax package for differentiable and fast gravitational wave data analysis.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16793739,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1544122a67e24b0c7c61d750fd2f1e1d6e85ebfe7d34d6ff0a83b1821e6d6ada",
          "md5": "b8e4412897939971198e5ad524e2f967",
          "sha256": "21e0c76cf458d96e93eabb67b4714b55376f920b202e674d7d2a5bfb8b70bf14"
        },
        "downloads": -1,
        "filename": "ripplegw-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b8e4412897939971198e5ad524e2f967",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 425310,
        "upload_time": "2023-02-10T17:23:14",
        "upload_time_iso_8601": "2023-02-10T17:23:14.470312Z",
        "url": "https://files.pythonhosted.org/packages/15/44/122a67e24b0c7c61d750fd2f1e1d6e85ebfe7d34d6ff0a83b1821e6d6ada/ripplegw-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1544122a67e24b0c7c61d750fd2f1e1d6e85ebfe7d34d6ff0a83b1821e6d6ada",
        "md5": "b8e4412897939971198e5ad524e2f967",
        "sha256": "21e0c76cf458d96e93eabb67b4714b55376f920b202e674d7d2a5bfb8b70bf14"
      },
      "downloads": -1,
      "filename": "ripplegw-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b8e4412897939971198e5ad524e2f967",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 425310,
      "upload_time": "2023-02-10T17:23:14",
      "upload_time_iso_8601": "2023-02-10T17:23:14.470312Z",
      "url": "https://files.pythonhosted.org/packages/15/44/122a67e24b0c7c61d750fd2f1e1d6e85ebfe7d34d6ff0a83b1821e6d6ada/ripplegw-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}