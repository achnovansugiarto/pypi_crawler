{
  "info": {
    "author": "Noah Pederson",
    "author_email": "noah@packetlost.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# PyBARE\n[![builds.sr.ht status](https://builds.sr.ht/~chiefnoah/pybare.svg)](https://builds.sr.ht/~chiefnoah/pybare?)\n\nAn declarative implementation of the [BARE](https://baremessages.org/) message\nformat for Python 3.6+\n\n---\n\npybare is a general purpose library for strongly typed primitives in Python that\nsupports serializing to and from BARE messages.\n\n```shell\npip install pybare\n```\n\n## Goals\n\n* Provide a declarative structure for defining types\n* Validation on value updates\n* Support streaming messages\n* Codegen based on `.schema` files\n\n## Status\n\npybare fully implements all BARE types for both encoding and decoding. This\nincludes reading multiple messages from the same `BinaryIO` stream.\n\n### TODO\n\n- [  ] Codegen based on `.schema` files\n- [  ] Better documentation\n- [  ] More tests\n- [  ] Fast C implementation for encoding\n\n## Examples\n\npybare currently requires you define your structures by hand. Examples can be\nfound in the\n[tests](https://git.sr.ht/~chiefnoah/pybare/tree/master/bare/test_encoder.py).\n\n### Quickstart\n\n```python\nfrom bare import Struct, Map, Str, UInt, Optional, DataFixed\n\n# Alternatively, DataFixed(length=64)\nclass PubKey(DataFixed):\n    _length = 64 # 512 bits\n\nclass User(Struct):\n    username = Str()\n    userid = Int()\n    email = Optional(Str)\n    keys = Map(Str, PubKey)\n    repos = Array(Str) # variable length array\n\n\nnoah = User(username=\"chiefnoah\", userid=1)\nnoah.username == 'chiefnoah' # True\nnoah.username = 'someoneelse'\nnoah.username == 'someoneelse' # True\nnoah.userid == 1 # True\nnoah.username = 1 # raise: bare.ValidationError\nnoah.keys # {} (empty dict)\nnoah.keys['my key'] = bytes(64) #\\x00\\x00...\nnoah.keys['oops'] = bytes(1) # raise: bare.ValidationError\nnoah.email is None: # True\nnoah.email = 12345 # raise: bare.ValidationError\nnoah.pack() # \\x00\\x01 ... (binary data)\n```\n\n#### 'Magic' values\n\npybare primitive types (refered to by their baseclass `Field`) and their\nsubclasses implement the\n[descriptor protocol](https://docs.python.org/3/howto/descriptor.html) to get\ntheir 'magic' behavior. When an _instance_ is declared as a _class field_, the\ntype can be treated as it's underlying value (ie. `noah.username` is just the\n`str` \"chiefnoah\" instead of `bare.Str`), while also providing validation and the\nability to \"pack\" the values into their corresponding bare primitives.\n\nNote: in order to be treated as `Struct` members, fields _must_ be declared as\ninstances, not just their types.\n\nFor example:\n\n```python\nclass User(Struct):\n    username = Str # this is ignored!\n    email = Str() # this isn't!\n```\n`Struct` and it's subclasses do not implement the descriptor protocol, as they\nare container types. On instances of `Struct`s (or any other object that declares\na `Field` type as a class field), the underlying value is stored as the class\nfield name prefixed with `_`.\n\nExample:\n```python\nu = User(username=\"noah\")\nu.username # \"noah\"\nu._username # \"noah\"\n```\n\nYou *can* modify this 'internal' value directly to bypass any validation imposed\nby the `Field` type (but why would you want to do that).\n\nDespite all of this, it's generally safe to include functions and other data on\nsubclasses of `Field`s. Again, only fields that have been declared on the class\nwill be serialized with `pack`.\n\n\n\n---\n\nTo contribute, send patches to [~chiefnoah/inbox@lists.sr.ht](mailto:~chiefnoah/inbox@lists.sr.ht)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://sr.ht/~chiefnoah/PyBARE/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pybare",
    "package_url": "https://pypi.org/project/pybare/",
    "platform": "",
    "project_url": "https://pypi.org/project/pybare/",
    "project_urls": {
      "Homepage": "https://sr.ht/~chiefnoah/PyBARE/"
    },
    "release_url": "https://pypi.org/project/pybare/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A declarative implementation of BARE for Python",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8258257,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "208c647c1fface7cf39852cd892c6c7474228fde7b94ea8ed91f1f7e7edd8368",
          "md5": "7ab99e88e341be888e87db48b44e6f8c",
          "sha256": "361465076dc32e0ba394baa38ba6a67eb15ecbf2c5e8f269ec488c7b655261fe"
        },
        "downloads": -1,
        "filename": "pybare-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ab99e88e341be888e87db48b44e6f8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12647,
        "upload_time": "2020-08-23T23:08:46",
        "upload_time_iso_8601": "2020-08-23T23:08:46.767959Z",
        "url": "https://files.pythonhosted.org/packages/20/8c/647c1fface7cf39852cd892c6c7474228fde7b94ea8ed91f1f7e7edd8368/pybare-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41ba1417e44f8762d748f6692196bfe32e2e6a0a7dae2917b85b949a53e4c993",
          "md5": "c8c0e5b106a60d463f83cfee2ea708cb",
          "sha256": "426a6c4cf066f9fd98f872cdad203e681883c781d0bd5d1e8bc9b60d5bfc505a"
        },
        "downloads": -1,
        "filename": "pybare-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c8c0e5b106a60d463f83cfee2ea708cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12779,
        "upload_time": "2020-08-23T23:08:49",
        "upload_time_iso_8601": "2020-08-23T23:08:49.319479Z",
        "url": "https://files.pythonhosted.org/packages/41/ba/1417e44f8762d748f6692196bfe32e2e6a0a7dae2917b85b949a53e4c993/pybare-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c5ed3af9ff9ed1bbe3ae880fbfa88dc413507e4a37f373b481f36a4992c7981",
          "md5": "a2f07a520e5d3a583ed6824d4aaf4c68",
          "sha256": "70d2574edd39cf8507a6736d857beb4dd43b6afed6bb97ff2166ee868f64454d"
        },
        "downloads": -1,
        "filename": "pybare-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2f07a520e5d3a583ed6824d4aaf4c68",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12907,
        "upload_time": "2020-09-24T01:44:03",
        "upload_time_iso_8601": "2020-09-24T01:44:03.797869Z",
        "url": "https://files.pythonhosted.org/packages/2c/5e/d3af9ff9ed1bbe3ae880fbfa88dc413507e4a37f373b481f36a4992c7981/pybare-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6aaa8618bcb212ce015db8eeee6b72a01b8cd86dfe3625145730bdc65323cc63",
          "md5": "969d3a8fbdc48703ee2a42ca00e88432",
          "sha256": "131a3ae71b0149e6d095378a6f982ead998f94ffef3f596eabcf3b542733d443"
        },
        "downloads": -1,
        "filename": "pybare-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "969d3a8fbdc48703ee2a42ca00e88432",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13075,
        "upload_time": "2020-09-24T01:44:05",
        "upload_time_iso_8601": "2020-09-24T01:44:05.054796Z",
        "url": "https://files.pythonhosted.org/packages/6a/aa/8618bcb212ce015db8eeee6b72a01b8cd86dfe3625145730bdc65323cc63/pybare-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c5ed3af9ff9ed1bbe3ae880fbfa88dc413507e4a37f373b481f36a4992c7981",
        "md5": "a2f07a520e5d3a583ed6824d4aaf4c68",
        "sha256": "70d2574edd39cf8507a6736d857beb4dd43b6afed6bb97ff2166ee868f64454d"
      },
      "downloads": -1,
      "filename": "pybare-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a2f07a520e5d3a583ed6824d4aaf4c68",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12907,
      "upload_time": "2020-09-24T01:44:03",
      "upload_time_iso_8601": "2020-09-24T01:44:03.797869Z",
      "url": "https://files.pythonhosted.org/packages/2c/5e/d3af9ff9ed1bbe3ae880fbfa88dc413507e4a37f373b481f36a4992c7981/pybare-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6aaa8618bcb212ce015db8eeee6b72a01b8cd86dfe3625145730bdc65323cc63",
        "md5": "969d3a8fbdc48703ee2a42ca00e88432",
        "sha256": "131a3ae71b0149e6d095378a6f982ead998f94ffef3f596eabcf3b542733d443"
      },
      "downloads": -1,
      "filename": "pybare-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "969d3a8fbdc48703ee2a42ca00e88432",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13075,
      "upload_time": "2020-09-24T01:44:05",
      "upload_time_iso_8601": "2020-09-24T01:44:05.054796Z",
      "url": "https://files.pythonhosted.org/packages/6a/aa/8618bcb212ce015db8eeee6b72a01b8cd86dfe3625145730bdc65323cc63/pybare-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}