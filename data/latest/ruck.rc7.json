{
  "info": {
    "author": "Nathan Juraj Michlo",
    "author_email": "NathanJMichlo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n<p align=\"center\">\n    <h1 align=\"center\">üß¨ Ruck üèâ</h1>\n    <p align=\"center\">\n        <i>Performant evolutionary algorithms for Python</i>\n    </p>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://choosealicense.com/licenses/mit/\">\n        <img alt=\"license\" src=\"https://img.shields.io/github/license/nmichlo/ruck?style=flat-square&color=lightgrey\"/>\n    </a>\n    <a href=\"https://pypi.org/project/ruck\">\n        <img alt=\"python versions\" src=\"https://img.shields.io/pypi/pyversions/ruck?style=flat-square\"/>\n    </a>\n    <a href=\"https://pypi.org/project/ruck\">\n        <img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/ruck?style=flat-square&color=blue\"/>\n    </a>\n    <a href=\"https://github.com/nmichlo/ruck/actions?query=workflow%3Atest\">\n        <img alt=\"tests status\" src=\"https://img.shields.io/github/workflow/status/nmichlo/ruck/test?label=tests&style=flat-square\"/>\n    </a>\n</p>\n\n<p align=\"center\">\n    <p align=\"center\">\n        Visit the <a href=\"https://github.com/nmichlo/ruck/tree/main/examples/\">examples</a> to get started, or browse the  <a href=\"https://github.com/nmichlo/ruck/releases\">releases</a>.\n    </p>\n    <p align=\"center\">\n        <a href=\"https://github.com/nmichlo/ruck/issues/new/choose\">Contributions</a> are welcome!\n    </p>\n</p>\n\n------------------------\n\n## Goals\n\nRuck aims to fill the following criteria:\n\n1. Provide **high quality**, **readable** implementations of algorithms.\n2. Be easily **extensible** and **debuggable**.\n3. Performant while maintaining its simplicity.\n\n## Features\n\nRuck has various features that will be expanded upon in time\n- üì¶ Modular evolutionary systems inspired by pytorch lightning\n  + Helps organise code & arguably looks clean\n  \n- ‚ûï Multi-Objective optimisation support\n  + Optionally optimised version of NSGA-II if `numba` is installed, over 65x faster\n  \n- üèé Optional multithreading support with `ray`, including helper functions\n\n- üè≠ Factory methods for simple evolutionary algorithms\n\n- üß™ Various helper functions for selection, mutation and mating\n\n\n## Citing Ruck\n\nPlease use the following citation if you use Ruck in your research:\n\n```bibtex\n@Misc{Michlo2021Ruck,\n  author =       {Nathan Juraj Michlo},\n  title =        {Ruck - Performant evolutionary algorithms for Python},\n  howpublished = {Github},\n  year =         {2021},\n  url =          {https://github.com/nmichlo/ruck}\n}\n```\n\n## Overview\n\nRuck takes inspiration from PyTorch Lightning's module system. The population creation,\noffspring, evaluation and selection steps are all contained within a single module inheriting\nfrom `EaModule`. While the training logic and components are separated into its own class.\n\n`Members` of a `Population` (A list of Members) are intended to be read-only. Modifications should not\nbe made to members, instead new members should be created with the modified values. This enables us to\neasily implement efficient multi-threading, see below!\n\nThe trainer automatically constructs `HallOfFame` and `LogBook` objects which keep track of your\npopulation and offspring. `EaModule` provides defaults for `get_stats_groups` and `get_progress_stats`\nthat can be overridden if you wish to customize the tracked statistics and statistics displayed by tqdm.\n\n\n### Minimal OneMax Example\n\n```python\nimport random\nimport numpy as np\nfrom ruck import *\n\n\nclass OneMaxMinimalModule(EaModule):\n    \"\"\"\n    Minimal onemax example\n    - The goal is to flip all the bits of a boolean array to True\n    - Offspring are generated as bit flipped versions of the previous population\n    - Selection tournament is performed between the previous population and the offspring\n    \"\"\"\n\n    # evaluate unevaluated members according to their values\n    def evaluate_values(self, values):\n        return [v.sum() for v in values]\n\n    # generate 300 random members of size 100 with 50% bits flipped\n    def gen_starting_values(self):\n        return [np.random.random(100) < 0.5 for _ in range(300)]\n\n    # randomly flip 5% of the bits of each each member in the population\n    # the previous population members should never be modified\n    def generate_offspring(self, population):\n        return [Member(m.value ^ (np.random.random(m.value.shape) < 0.05)) for m in population]\n\n    # selection tournament between population and offspring\n    def select_population(self, population, offspring):\n        combined = population + offspring\n        return [max(random.sample(combined, k=3), key=lambda m: m.fitness) for _ in range(len(population))]\n\n\nif __name__ == '__main__':\n    # create and train the population\n    module = OneMaxMinimalModule()\n    pop, logbook, halloffame = Trainer(generations=100, progress=True).fit(module)\n\n    print('initial stats:', logbook[0])\n    print('final stats:', logbook[-1])\n    print('best member:', halloffame.members[0])\n```\n\n### Advanced OneMax Example\n\nRuck provides various helper functions and implementations of evolutionary algorithms for convenience.\nThe following example makes use of these additional features so that components and behaviour can\neasily be swapped out.\n\nThe three basic evolutionary algorithms provided are based around [deap's](http://www.github.com/deap/deap)\ndefault algorithms from `deap.algorithms`. These basic evolutionary algorithms can be created from\n`ruck.functional.make_ea`. We provide the alias `ruck.R` for `ruck.functional`. `R.make_ea` supports\nthe following modes: `simple`, `mu_plus_lambda` and `mu_comma_lambda`.\n\n\n<details><summary><b>Code Example</b></summary>\n<p>\n\n```python\n\"\"\"\nOneMax serial example based on:\nhttps://github.com/DEAP/deap/blob/master/examples/ga/onemax_numpy.py\n\"\"\"\n\nimport functools\nimport numpy as np\nfrom ruck import *\n\n\nclass OneMaxModule(EaModule):\n\n    def __init__(\n        self,\n        population_size: int = 300,\n        offspring_num: int = None,  # offspring_num (lambda) is automatically set to population_size (mu) when `None`\n        member_size: int = 100,\n        p_mate: float = 0.5,\n        p_mutate: float = 0.5,\n        ea_mode: str = 'simple'\n    ):\n        # save the arguments to the .hparams property. values are taken from the\n        # local scope so modifications can be captured if the call to this is delayed.\n        self.save_hyperparameters()\n        # implement the required functions for `EaModule`\n        self.generate_offspring, self.select_population = R.make_ea(\n            mode=self.hparams.ea_mode,\n            offspring_num=self.hparams.offspring_num,\n            mate_fn=R.mate_crossover_1d,\n            mutate_fn=functools.partial(R.mutate_flip_bit_groups, p=0.05),\n            select_fn=functools.partial(R.select_tournament, k=3),\n            p_mate=self.hparams.p_mate,\n            p_mutate=self.hparams.p_mutate,\n        )\n\n    def evaluate_values(self, values):\n        return map(np.sum, values)\n\n    def gen_starting_values(self) -> Population:\n        return [\n            np.random.random(self.hparams.member_size) < 0.5\n            for i in range(self.hparams.population_size)\n        ]\n\n\nif __name__ == '__main__':\n    # create and train the population\n    module = OneMaxModule(population_size=300, member_size=100)\n    pop, logbook, halloffame = Trainer(generations=40, progress=True).fit(module)\n\n    print('initial stats:', logbook[0])\n    print('final stats:', logbook[-1])\n    print('best member:', halloffame.members[0])\n```\n\n</p>\n</details>\n\n### Multithreading OneMax Example (Ray)\n\nIf we need to scale up the computational requirements, for example requiring increased\nmember and population sizes, the above serial implementations will soon run into performance problems.\n\nThe basic Ruck implementations of various evolutionary algorithms are designed around a `map`\nfunction that can be swapped out to add multi-threading support. We can easily do this using\n[ray](https://github.com/ray-project/ray) and we even provide various helper functions that\nenhance ray support.\n\n1. We begin by placing member's values into shared memory using ray's read-only object store\nand the `ray.put` function. These [ObjectRef's](https://docs.ray.io/en/latest/memory-management.html)\nvalues point to the original `np.ndarray` values. When retrieved with `ray.get` they obtain the original\narrays using an efficient zero-copy procedure. This is advantageous over something like Python's multiprocessing module which uses\nexpensive pickle operations to pass data around.\n\n2. The second step is to swap out the aforementioned `map` function in the previous example to a\nmultiprocessing equivalent. We use `ray.remote` along with `ray.get`, and provide the `ray_map` function\nthat has the same API as python map, but accepts `ray.remote(my_fn).remote` values instead.\n\n3. Finally we need to update our `mate` and `mutate` functions to handle `ObjectRef`s, we provide a convenient\nwrapper to automatically call `ray.put` on function results so that you can re-use your existing code.\n\n<details><summary><b>Code Example</b></summary>\n<p>\n\n```python\n\"\"\"\nOneMax parallel example using ray's object store.\n\n8 bytes * 1_000_000 * 128 members ~= 128 MB of memory to store this population.\nThis is quite a bit of processing that needs to happen! But using ray\nand its object store we can do this efficiently!\n\"\"\"\n\nfrom functools import partial\nimport numpy as np\nfrom ruck import *\nfrom ruck.external.ray import *\n\n\nclass OneMaxRayModule(EaModule):\n\n    def __init__(\n        self,\n        population_size: int = 300,\n        offspring_num: int = None,  # offspring_num (lambda) is automatically set to population_size (mu) when `None`\n        member_size: int = 100,\n        p_mate: float = 0.5,\n        p_mutate: float = 0.5,\n        ea_mode: str = 'mu_plus_lambda'\n    ):\n        self.save_hyperparameters()\n        # implement the required functions for `EaModule`\n        self.generate_offspring, self.select_population = R.make_ea(\n            mode=self.hparams.ea_mode,\n            offspring_num=self.hparams.offspring_num,\n            # decorate the functions with `ray_remote_put` which automatically\n            # `ray.get` arguments that are `ObjectRef`s and `ray.put`s returned results\n            mate_fn=ray_remote_puts(R.mate_crossover_1d).remote,\n            mutate_fn=ray_remote_put(R.mutate_flip_bit_groups).remote,\n            # efficient to compute locally\n            select_fn=partial(R.select_tournament, k=3),\n            p_mate=self.hparams.p_mate,\n            p_mutate=self.hparams.p_mutate,\n            # ENABLE multiprocessing\n            map_fn=ray_map,\n        )\n        # eval function, we need to cache it on the class to prevent\n        # multiple calls to ray.remote. We use ray.remote instead of\n        # ray_remote_put like above because we want the returned values\n        # not object refs to those values.\n        self._ray_eval = ray.remote(np.mean).remote\n\n    def evaluate_values(self, values):\n        # values is a list of `ray.ObjectRef`s not `np.ndarray`s\n        # ray_map automatically converts np.sum to a `ray.remote` function which\n        # automatically handles `ray.get`ing of `ray.ObjectRef`s passed as arguments\n        return ray_map(self._ray_eval, values)\n\n    def gen_starting_values(self):\n        # generate objects and place in ray's object store\n        return [\n            ray.put(np.random.random(self.hparams.member_size) < 0.5)\n            for i in range(self.hparams.population_size)\n        ]\n\n\nif __name__ == '__main__':\n    # initialize ray to use the specified system resources\n    ray.init()\n\n    # create and train the population\n    module = OneMaxRayModule(population_size=128, member_size=1_000_000)\n    pop, logbook, halloffame = Trainer(generations=200, progress=True).fit(module)\n\n    print('initial stats:', logbook[0])\n    print('final stats:', logbook[-1])\n    print('best member:', halloffame.members[0])\n```\n\n</p>\n</details>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nmichlo/ruck",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ruck",
    "package_url": "https://pypi.org/project/ruck/",
    "platform": "",
    "project_url": "https://pypi.org/project/ruck/",
    "project_urls": {
      "Homepage": "https://github.com/nmichlo/ruck"
    },
    "release_url": "https://pypi.org/project/ruck/0.2.4/",
    "requires_dist": [
      "pip (>=21.0)",
      "numpy (>=1.19)",
      "tqdm (>=4)"
    ],
    "requires_python": ">=3.6",
    "summary": "Performant evolutionary algorithms for Python.",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11776683,
  "releases": {
    "0.0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9c29ec3448b4e5b886427d7367bf111eafb10a25daf2bfa8f7d910dea4619b9",
          "md5": "2bbf42dc9adf61df150a57fdc3d6e241",
          "sha256": "93bcce4af87aa6b551fb7361ce63cc5eebc19047a2bc7f690419a9f449aa67c5"
        },
        "downloads": -1,
        "filename": "ruck-0.0.1.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bbf42dc9adf61df150a57fdc3d6e241",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 28488,
        "upload_time": "2021-09-25T01:24:03",
        "upload_time_iso_8601": "2021-09-25T01:24:03.766693Z",
        "url": "https://files.pythonhosted.org/packages/c9/c2/9ec3448b4e5b886427d7367bf111eafb10a25daf2bfa8f7d910dea4619b9/ruck-0.0.1.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acfc6a9e6a74810d0fea23d4b426c01484dc22b3e0c0081f3a2621ce553dde96",
          "md5": "1016d2e7ef1e42fb1d21b80cc0733fb1",
          "sha256": "5d3b7a92e47218dc63c6950713c6d9f5eab062330658f1dae01273ad8b5395c0"
        },
        "downloads": -1,
        "filename": "ruck-0.0.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "1016d2e7ef1e42fb1d21b80cc0733fb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18761,
        "upload_time": "2021-09-25T01:24:05",
        "upload_time_iso_8601": "2021-09-25T01:24:05.297924Z",
        "url": "https://files.pythonhosted.org/packages/ac/fc/6a9e6a74810d0fea23d4b426c01484dc22b3e0c0081f3a2621ce553dde96/ruck-0.0.1.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a4a0bfa9e7f43d8fbbb2a544cd6b60d1c218348667ef99670edfe361b075ce8",
          "md5": "5a5818b7cfeecea7ef6ac73d614b26e9",
          "sha256": "a19291ecdea2281f410fe2e2e0d82e83f337143e993d435e345513f614d8625e"
        },
        "downloads": -1,
        "filename": "ruck-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a5818b7cfeecea7ef6ac73d614b26e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28499,
        "upload_time": "2021-09-25T10:03:28",
        "upload_time_iso_8601": "2021-09-25T10:03:28.022393Z",
        "url": "https://files.pythonhosted.org/packages/0a/4a/0bfa9e7f43d8fbbb2a544cd6b60d1c218348667ef99670edfe361b075ce8/ruck-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3a8326d7af5e463af08d612ec2dc1202f8dfc25ad952c043794461c12b8ca51",
          "md5": "dc81bd0ed32a37c55a8e71639ec121d1",
          "sha256": "f4381d7daf9b5b3f16b229fe781209dd6de043baba2d53df65b6514c99a8799a"
        },
        "downloads": -1,
        "filename": "ruck-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc81bd0ed32a37c55a8e71639ec121d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18771,
        "upload_time": "2021-09-25T10:03:29",
        "upload_time_iso_8601": "2021-09-25T10:03:29.501206Z",
        "url": "https://files.pythonhosted.org/packages/d3/a8/326d7af5e463af08d612ec2dc1202f8dfc25ad952c043794461c12b8ca51/ruck-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90df73072b3e26185fa900ceac5dc1feccac36ac117b6160bc6e0396103db914",
          "md5": "068321d6f0241d1d1ba4df4fcbe261ad",
          "sha256": "4c3057c92a3a350023eeba7de2dfac5c987f957cb7ac6d7bc37f85fdbf9c418e"
        },
        "downloads": -1,
        "filename": "ruck-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "068321d6f0241d1d1ba4df4fcbe261ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28353,
        "upload_time": "2021-09-25T13:43:26",
        "upload_time_iso_8601": "2021-09-25T13:43:26.855175Z",
        "url": "https://files.pythonhosted.org/packages/90/df/73072b3e26185fa900ceac5dc1feccac36ac117b6160bc6e0396103db914/ruck-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d1f5db2243c4a9b64f4d5f6c9a3998dcf44f996d4b441592a2056c50fa46269",
          "md5": "efaaeca553c6068102ae891af1a48c24",
          "sha256": "19d8b0e194cfb40b05c94209e9d05efb4458ae17059ff1c363e498e80f91ce0e"
        },
        "downloads": -1,
        "filename": "ruck-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efaaeca553c6068102ae891af1a48c24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18805,
        "upload_time": "2021-09-25T13:43:27",
        "upload_time_iso_8601": "2021-09-25T13:43:27.914081Z",
        "url": "https://files.pythonhosted.org/packages/8d/1f/5db2243c4a9b64f4d5f6c9a3998dcf44f996d4b441592a2056c50fa46269/ruck-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34c31beda820cf28409b9c95fc7a3c9a39713ed4d65c64efe4ed668c1aff3df3",
          "md5": "bb2f750d1e9e4d0f1743e3ba0d257660",
          "sha256": "38d759bf5a21a2f99a7d4839b6e6c4179de71a60442d60b8b6ade3a798ab697f"
        },
        "downloads": -1,
        "filename": "ruck-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb2f750d1e9e4d0f1743e3ba0d257660",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28583,
        "upload_time": "2021-09-25T22:50:47",
        "upload_time_iso_8601": "2021-09-25T22:50:47.464646Z",
        "url": "https://files.pythonhosted.org/packages/34/c3/1beda820cf28409b9c95fc7a3c9a39713ed4d65c64efe4ed668c1aff3df3/ruck-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce7f370c5804ba958b13ad4407137e1189079ab141209249b370f577749cd378",
          "md5": "ee06425fa607d24869fb14a76912245e",
          "sha256": "5d820f938c515633f7f90015ca328ae89ff4c1fdc97fd9f2c5f328af5be3fe42"
        },
        "downloads": -1,
        "filename": "ruck-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ee06425fa607d24869fb14a76912245e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19077,
        "upload_time": "2021-09-25T22:50:48",
        "upload_time_iso_8601": "2021-09-25T22:50:48.620287Z",
        "url": "https://files.pythonhosted.org/packages/ce/7f/370c5804ba958b13ad4407137e1189079ab141209249b370f577749cd378/ruck-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09513d9757d19d7a6d21e141da91a30d52741507a468d6d6f252abf237111b65",
          "md5": "7c1e9e933cb3eba55fd7566df48b9598",
          "sha256": "08af362901e2770502f308f34b156b258b1b30d8e74053da835062ac81baeaaa"
        },
        "downloads": -1,
        "filename": "ruck-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c1e9e933cb3eba55fd7566df48b9598",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30920,
        "upload_time": "2021-09-27T15:47:53",
        "upload_time_iso_8601": "2021-09-27T15:47:53.965947Z",
        "url": "https://files.pythonhosted.org/packages/09/51/3d9757d19d7a6d21e141da91a30d52741507a468d6d6f252abf237111b65/ruck-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e302a92ae761c8a41f787e6d74d8f6befc7b04f46ee21df3894e82439c57ff68",
          "md5": "2582a4a88dad15d7fccd1814167b1b98",
          "sha256": "ee121b730aced1a65ea52effa4612bf964f9dc7bfada0f0a7b7d35afec1e138b"
        },
        "downloads": -1,
        "filename": "ruck-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2582a4a88dad15d7fccd1814167b1b98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19762,
        "upload_time": "2021-09-27T15:47:55",
        "upload_time_iso_8601": "2021-09-27T15:47:55.149355Z",
        "url": "https://files.pythonhosted.org/packages/e3/02/a92ae761c8a41f787e6d74d8f6befc7b04f46ee21df3894e82439c57ff68/ruck-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6720689cb18750eb6a5cc391566dff2f11dce6b8e6789f6168a60c2b81080b43",
          "md5": "0426bf1f77c9de9e3e466f630833b2b7",
          "sha256": "c59e9b96deb1419211241a0609e6c41aecf79a6936206781f411937c2c5b7357"
        },
        "downloads": -1,
        "filename": "ruck-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0426bf1f77c9de9e3e466f630833b2b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30923,
        "upload_time": "2021-10-17T11:58:53",
        "upload_time_iso_8601": "2021-10-17T11:58:53.992996Z",
        "url": "https://files.pythonhosted.org/packages/67/20/689cb18750eb6a5cc391566dff2f11dce6b8e6789f6168a60c2b81080b43/ruck-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac20f30edf0b91d6142241af03bce4552c7ec14fa05afe3b27c11f6fdc95be87",
          "md5": "f9148fccd9315032273675867e001722",
          "sha256": "d9e1354f642a80f9cab1d9457104612cae0ac5f12f354d1f1bc23322494c1537"
        },
        "downloads": -1,
        "filename": "ruck-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f9148fccd9315032273675867e001722",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23241,
        "upload_time": "2021-10-17T11:58:56",
        "upload_time_iso_8601": "2021-10-17T11:58:56.352879Z",
        "url": "https://files.pythonhosted.org/packages/ac/20/f30edf0b91d6142241af03bce4552c7ec14fa05afe3b27c11f6fdc95be87/ruck-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bc04259c06cfbf8743776f8b7ac58cec836597e289a82a79188acf5b02faa15",
          "md5": "d1f3632e9f18462072ba787176ad43c4",
          "sha256": "422cdcaea148d102d595a4f2e6b3cc9f12cd7d28122744255bd126cae45215c6"
        },
        "downloads": -1,
        "filename": "ruck-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1f3632e9f18462072ba787176ad43c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 41026,
        "upload_time": "2021-10-20T02:28:47",
        "upload_time_iso_8601": "2021-10-20T02:28:47.163173Z",
        "url": "https://files.pythonhosted.org/packages/8b/c0/4259c06cfbf8743776f8b7ac58cec836597e289a82a79188acf5b02faa15/ruck-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ee62f49f39120ca354fcc082d7ef326d528b151373ad64d771a6f828b9a2d72",
          "md5": "bff897f032799a3714df09ed90bb63de",
          "sha256": "590bd8353695516bec053017f7ba8a70a1a72e1ae4185b4d9eead3fa8ad5834f"
        },
        "downloads": -1,
        "filename": "ruck-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bff897f032799a3714df09ed90bb63de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30634,
        "upload_time": "2021-10-20T02:28:48",
        "upload_time_iso_8601": "2021-10-20T02:28:48.457975Z",
        "url": "https://files.pythonhosted.org/packages/5e/e6/2f49f39120ca354fcc082d7ef326d528b151373ad64d771a6f828b9a2d72/ruck-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bc04259c06cfbf8743776f8b7ac58cec836597e289a82a79188acf5b02faa15",
        "md5": "d1f3632e9f18462072ba787176ad43c4",
        "sha256": "422cdcaea148d102d595a4f2e6b3cc9f12cd7d28122744255bd126cae45215c6"
      },
      "downloads": -1,
      "filename": "ruck-0.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1f3632e9f18462072ba787176ad43c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 41026,
      "upload_time": "2021-10-20T02:28:47",
      "upload_time_iso_8601": "2021-10-20T02:28:47.163173Z",
      "url": "https://files.pythonhosted.org/packages/8b/c0/4259c06cfbf8743776f8b7ac58cec836597e289a82a79188acf5b02faa15/ruck-0.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ee62f49f39120ca354fcc082d7ef326d528b151373ad64d771a6f828b9a2d72",
        "md5": "bff897f032799a3714df09ed90bb63de",
        "sha256": "590bd8353695516bec053017f7ba8a70a1a72e1ae4185b4d9eead3fa8ad5834f"
      },
      "downloads": -1,
      "filename": "ruck-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "bff897f032799a3714df09ed90bb63de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30634,
      "upload_time": "2021-10-20T02:28:48",
      "upload_time_iso_8601": "2021-10-20T02:28:48.457975Z",
      "url": "https://files.pythonhosted.org/packages/5e/e6/2f49f39120ca354fcc082d7ef326d528b151373ad64d771a6f828b9a2d72/ruck-0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}