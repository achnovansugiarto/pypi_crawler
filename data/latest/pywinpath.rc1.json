{
  "info": {
    "author": "czam.de",
    "author_email": "pywinpath@ca.czam.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Win32 (MS Windows)",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Microsoft :: Windows :: Windows 7",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Utilities"
    ],
    "description": "PyWinPath - a tool to manipulate the MS Windows PATH environment variable\n=========================================================================\n\nPyWinPath is an interactive command line tool to edit the %PATH% environment \nvariable on Windows 7. \nThe onboard tools for managing the content of %PATH% before Windows 10 \nare barely existent and easily lead to a cluttered %PATH%. \nIf the PATH is longer than a specific limit, Windows will silently omit \nthe entries that exceed the maximum length and executables will not be found. \n\nPyWinPath tries to keep you sane when facing the %PATH%. There are many free tools \nto edit the %PATH%, however, I couldn't find a nice one in Python. \nWindows 10 has its own GUI to manipulate the %PATH%, I haven't seen it yet.\n\nOn Windows, the content of the %PATH% is generated \nfrom two registry values: the entries in the system-wide path followed by \nentries in the user-specific path. \n\n * User path: ``HKEY_CURRENT_USER\\Environment::PATH``\n * System path: ``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment::Path``\n\nPyWinPath lets you manipulate both of these registry values and does a \ncouple of additional tricks, see the features listing below.\n\nDeveloped and tested on Windows 7 (EN-US) with Python 3.5, so don't \nexpect it to work in Python 2 or on other systems. Please let me know \nif it worked for you in other combinations, if not open an issue on \nGithub, send me a patch or pull request.\n\nInstallation\n------------\n\n``pip install pywinpath``\n\nOr if you want to see some colored output (this will install colorama):\n\n``pip install pywinpath[color]``\n\nFeatures\n--------\n    \n - Warns you of a too long %PATH% on Windows 7\n - Normalization of PATH entries followed by ...\n - Deduplication of system and user PATH variables\n - Purge non-existent directories from PATH variables\n - Shortening of PATH variables via junctions, e.g. \n   C:\\Program Files\\... gets C:\\prg\\...\n - Insert entries at the beginning of the PATH\n\nToDo\n----\n\n - Add possibility to call with arguments instead of as interactive menu\n - Move entries up and down and between sys and user path (only after dedup?)\n - Handle variable expansions in PATH definitions such as %USERPROFILE%\n - Automatically identify efficient sub-paths for shortening via junctions\n - More tests\n - Test on other Windows-Python3 combinations than Windows 7 - Python 3.5\n       \nNotes\n-----\n    \n - With Git for Windows installed, the following command should display \n   a more readable PATH listing on the console: ``PATH | tr ; '\\n'``\n - Junctions work for PATH shortening, also accross local drives:\n     1) >mklink /J C:\\prog(x86) \"C:\\Program Files (x86)\"\n     2) >set PATH=c:\\prog(x86)\\Notepad++;%PATH%\n     3) Notepad++.exe is found.\n     4) Junctions can be deleted by rmdir, the target dir is left untouched.\n\nMotivated by Anaconda errors with too long paths::\n    \n    D:\\proj>activate\n    Deactivating environment \"C:\\Users\\***\\AppData\\Local\\Continuum\\Anaconda3\"...\n    Activating environment \"C:\\Users\\***\\AppData\\Local\\Continuum\\Anaconda3\"...\n    The input line is too long.\n    \"PATH_NO_SCRIPTS=C:\\Users\\***\\AppData\\Local\\Continuum\\Anaconda3;[...]\"\n\nSome links: \n    \n  * Viewed about 40k times: http://superuser.com/questions/297947/is-there-a-convenient-way-to-edit-path-in-windows-7\n  * Another PATH minipulation tool for the command line http://www.p-nand-q.com/download/gtools/pathed.html\n  * http://stackoverflow.com/questions/34818282/anaconda-prompt-loading-error-the-input-line-is-too-long\n  * http://stackoverflow.com/questions/19287379/how-do-i-add-to-the-windows-path-variable-using-setx-having-weird-problems\n  * https://software.intel.com/en-us/articles/limitation-to-the-length-of-the-system-path-variable\n  * http://betanews.com/2015/11/23/windows-10-finally-adds-a-new-path-editor/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/czamb/PyWinPath",
    "keywords": "PATH,Windows,cmd.exe,console,system search path,registry",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pywinpath",
    "package_url": "https://pypi.org/project/pywinpath/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pywinpath/",
    "project_urls": {
      "Homepage": "https://github.com/czamb/PyWinPath"
    },
    "release_url": "https://pypi.org/project/pywinpath/2016.5.3b3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A command-line utility for MS Windows to keep the Windows PATH variable tidy and short.",
    "version": "2016.5.3b3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2097767,
  "releases": {
    "2016.5.3b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c8f06592fd27764fa89cbdcc36e4bc4d67675b957e7c5336187e8fbd475d72c",
          "md5": "34dfef03227d7a023af0358a3e618548",
          "sha256": "5c449754a184cffefd997b4b8dcd683c1fe6603e3c0eb311d3caacf6fdf879de"
        },
        "downloads": -1,
        "filename": "pywinpath-2016.5.3b3.zip",
        "has_sig": false,
        "md5_digest": "34dfef03227d7a023af0358a3e618548",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17549,
        "upload_time": "2016-05-03T21:08:04",
        "upload_time_iso_8601": "2016-05-03T21:08:04.610674Z",
        "url": "https://files.pythonhosted.org/packages/5c/8f/06592fd27764fa89cbdcc36e4bc4d67675b957e7c5336187e8fbd475d72c/pywinpath-2016.5.3b3.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c8f06592fd27764fa89cbdcc36e4bc4d67675b957e7c5336187e8fbd475d72c",
        "md5": "34dfef03227d7a023af0358a3e618548",
        "sha256": "5c449754a184cffefd997b4b8dcd683c1fe6603e3c0eb311d3caacf6fdf879de"
      },
      "downloads": -1,
      "filename": "pywinpath-2016.5.3b3.zip",
      "has_sig": false,
      "md5_digest": "34dfef03227d7a023af0358a3e618548",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17549,
      "upload_time": "2016-05-03T21:08:04",
      "upload_time_iso_8601": "2016-05-03T21:08:04.610674Z",
      "url": "https://files.pythonhosted.org/packages/5c/8f/06592fd27764fa89cbdcc36e4bc4d67675b957e7c5336187e8fbd475d72c/pywinpath-2016.5.3b3.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}