{
  "info": {
    "author": "Manuel Faysse",
    "author_email": "manuel.fay@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ImageSearcher\n### Leveraging CLIP to perform image search on personal pictures\n\nThis repository implements an Image Search engine on local photos powered by the CLIP model.\nIt is surprisingly precise and is able to find images given complex queries. For more information, refer to\nthe Medium blogpost [here](https://medium.com/@manuelfaysse/building-a-powerful-image-search-engine-for-your-pictures-using-deep-learning-16d06df10385?source=friends_link&sk=ca5130cb63a1fcb3a3e3f54ff494e56b).\n\nThe added functionality of classifying pictures depending on the persons portrayed is implemented \nwith the `face_recognition` library. Several filters are also available, enabling you to find your \ngroup pictures, screenshots, etc...\n\n## Setup\n\nIn a Python 3.8+ virtual environment, install either from PIP or from source:\n\n#### Installation from the PIP package:\n```bash\npip install image-searcher\n\npip install face_recognition  # Optional to enable face features\npip install flask flask_cors  # Optional to enable a flask api\n```\n\n#### Installation from source\n```bash\npip install -r dev_requirements.txt\n\npip install face_recognition  # Optional to enable face features\npip install flask flask_cors  # Optional to enable a flask api\n```\n\nTroubleshooting: If problems are encountered building wheels for dlib during the face_recognition installation, make sure to install the `python3.8-dev`\npackage (respectively `python3.x-dev`) and recreate the virtual environment from scratch with the aforementionned command \nonce it is installed.\n\n## Usage\nCurrently, the usage is as follows. The library first computes the embeddings of all images one by one, and stores them in \na picked dictionary for further reference. To compute and store information about the persons in \nthe picture, enable the `include_faces` flag (note that it makes the indexing process up to 10x slower).\n\n```python\nfrom image_searcher import Search\n\nsearcher = Search(image_dir_path=\"/home/manu/perso/ImageSearcher/data/\", \n                  traverse=True, \n                  include_faces=False)\n```\n\nOnce this process has been done once, through Python, the library is used as such:\n```python\nfrom image_searcher import Search\n\nsearcher = Search(image_dir_path=\"/home/manu/perso/ImageSearcher/data/\", \n                  traverse=True, \n                  include_faces=False)\n\n# Option 1: Pythonic API\nfrom PIL import Image\n\nranked_images = searcher.rank_images(\"A photo of a bird.\", n=5)\nfor image in ranked_images:\n    Image.open(image.image_path).convert('RGB').show()\n\n# Option 2: Launch Flask api from code\nfrom image_searcher.api import run\nrun(searcher=searcher)\n```\n\n### Using tags in the query\nAdding tags at the end of the query (example: `A bird singing #photo`) will filter the search based on the tag list.\nSupported tags for the moment are:\n  - \\#{category}: Amongst \"screenshot\", \"drawing\", \"photo\", \"schema\", \"selfie\"\n  - \\#groups: Group pictures (more than 5 people)\n\nTo come is support for:\n  \n  - \\#dates: Filtering based on the time period\n\n\n### Running through the API for efficient use\n\nAfter having indexed the images of interest, a Flask API can be used to load models once and then search efficiently.\n\n#### Specify a Config YAML file:\n  \n```yaml\nimage_dir_path: /home/manu/Downloads/facebook_logs/messages/inbox/\nsave_path: /home/manu/\ntraverse: true\ninclude_faces: true\nreindex: false\nn: 42\n\nport:\nhost:\ndebug:\nthreaded:\n```\n#### Start a server:\n```python\nfrom image_searcher.api import run\n\n# Option 1: Through a config file\nrun(config_path=\"path_to_config_file.yml\")\n\n# Option 2: Through an instanciated Search object\nfrom image_searcher import Search\n\nrun(searcher=Search(image_dir_path=\"/home/manu/perso/ImageSearcher/data/\", \n                    traverse=True, \n                    include_faces=False))\n```\n\nA gunicorn process can also be launched locally with:\n\n```bash\ngunicorn \"api.run_flask_gunicorn:create_app('path_to_config_file.yml')\" \\\n    --name image_searcher \\\n    --bind 0.0.0.0:${GUNICORN_PORT:-5000} \\\n    --worker-tmp-dir /dev/shm \\\n    --workers=${GUNICORN_WORKERS:-2} \\\n    --threads=${GUNICORN_THREADS:-4} \\\n    --worker-class=gthread \\\n    --log-level=info \\\n    --log-file '-' \\\n    --timeout 30\n```\n\nNote: Adapt the timeout parameter (in seconds) if a lot of new images are being indexed/\n\n\n#### Query it:\n\n- By opening in a browser the webpage with the demo search engine `search.html`.\n\n- Through the API endpoint online: `http://127.0.0.1:5000/get_best_images?q=a+photo+of+a+bird`\n\n- In Python:\n```python\nimport requests\nimport json\nimport urllib.parse\n\nquery = \"a photo of a bird\"\nr = requests.get(f\"http://127.0.0.1:5000/get_best_images?q={urllib.parse.quote(query)}\")\nprint(json.loads(r.content)[\"results\"])\n```\n### Tips\n\nUsing this tool with vacation photos, or Messenger and Whatsapp photo archives leads to rediscovering \nold photos and is amazing at locating long lost ones.\n\n## Tests\n\nRun the tests with \n\n```bash\npython -m unittest\n```\n\nand lint with:\n\n```bash\npylint image_searcher\n```\n\n## Contributing\n\nThis repo is a work in progress that has recently been started. As is, it computes about 10 images per second during the initial indexing phase, then is almost instantaneous during the querying phase.\n\nFeature requests and contributions are welcomed. Improvements to the Search Web interface would also\nbe greatly appreciated !\n\n## Todo list\n\nSimplify and robustify the Search class instanciation:\n- Check indexation arguments are compatible with pre-loaded file\n- Store indexation arguments in pre-loaded file and give option to index new pictures with these options\n- Add the option to index for faces on previously CLIP indexed images\n\nSpeed:\n- Parallel indexation / dynamic batching based on image size\n- Data loader before indexation\n- Optimized vector computation with optimized engine (FAISS)\n\nFeatures:\n- Image auto-tagging (screenshot, drawing, photo, nature, group picture, selfie, etc)\n- Image deduplication (perceptual hashing)\n\nEmbedding files:\n- Integrate with local version control (git-lfs ?)\n\nFrontend:\n- Overall UX and design changes\n- Enable Image upload\n\nDeployment:\n- Dockerize and orchestrate containers (image uploader, storage, indexation pipeline, inference)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ManuelFay/ImageSearcher/archive/refs/tags/v0.0.3.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ManuelFay/ImageSearcher",
    "keywords": "search engine,image,image search,CLIP",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "image-searcher",
    "package_url": "https://pypi.org/project/image-searcher/",
    "platform": "",
    "project_url": "https://pypi.org/project/image-searcher/",
    "project_urls": {
      "Download": "https://github.com/ManuelFay/ImageSearcher/archive/refs/tags/v0.0.3.tar.gz",
      "Homepage": "https://github.com/ManuelFay/ImageSearcher"
    },
    "release_url": "https://pypi.org/project/image-searcher/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Image Searcher based on semantic query understanding for your own pictures.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11883816,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7acb0a1bbbe0d89f77c7ef041311a9fceab608a8f966ebb720444de9a19c6843",
          "md5": "ecaaf4b8e62946b9a6d00b3d4d29acc8",
          "sha256": "c18d49c1614c1ba6a6a5c76da825b5759035950ad0e43bed3a20bcc183c17d44"
        },
        "downloads": -1,
        "filename": "image-searcher-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ecaaf4b8e62946b9a6d00b3d4d29acc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11244,
        "upload_time": "2021-10-30T18:14:12",
        "upload_time_iso_8601": "2021-10-30T18:14:12.423094Z",
        "url": "https://files.pythonhosted.org/packages/7a/cb/0a1bbbe0d89f77c7ef041311a9fceab608a8f966ebb720444de9a19c6843/image-searcher-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b9e92bbd18af06b52220854dd8895ab93a14b453933b0363942c397a8f1e087",
          "md5": "49fd822347641709860aa2cc41d2a37b",
          "sha256": "4d473f112cd885fa406c351a7443dbd0b927d87505ce44a7021036a3dcd28468"
        },
        "downloads": -1,
        "filename": "image-searcher-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "49fd822347641709860aa2cc41d2a37b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 12376,
        "upload_time": "2021-10-30T21:44:21",
        "upload_time_iso_8601": "2021-10-30T21:44:21.710073Z",
        "url": "https://files.pythonhosted.org/packages/4b/9e/92bbd18af06b52220854dd8895ab93a14b453933b0363942c397a8f1e087/image-searcher-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75eeef381848fbc88ab7b2bcdc27c964119078629437545b21246e1d22a8f1a3",
          "md5": "43100e558553a04fd2e2d72dee9932bf",
          "sha256": "c31d83fde8b64166dfc8ca3a14dc37432c06ecec78e6e8a5e6d7d0bd1a5d07e1"
        },
        "downloads": -1,
        "filename": "image-searcher-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "43100e558553a04fd2e2d72dee9932bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 12781,
        "upload_time": "2021-10-31T14:31:53",
        "upload_time_iso_8601": "2021-10-31T14:31:53.275075Z",
        "url": "https://files.pythonhosted.org/packages/75/ee/ef381848fbc88ab7b2bcdc27c964119078629437545b21246e1d22a8f1a3/image-searcher-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75eeef381848fbc88ab7b2bcdc27c964119078629437545b21246e1d22a8f1a3",
        "md5": "43100e558553a04fd2e2d72dee9932bf",
        "sha256": "c31d83fde8b64166dfc8ca3a14dc37432c06ecec78e6e8a5e6d7d0bd1a5d07e1"
      },
      "downloads": -1,
      "filename": "image-searcher-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "43100e558553a04fd2e2d72dee9932bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 12781,
      "upload_time": "2021-10-31T14:31:53",
      "upload_time_iso_8601": "2021-10-31T14:31:53.275075Z",
      "url": "https://files.pythonhosted.org/packages/75/ee/ef381848fbc88ab7b2bcdc27c964119078629437545b21246e1d22a8f1a3/image-searcher-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}