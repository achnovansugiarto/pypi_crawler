{
  "info": {
    "author": "Evgeniy Blinov",
    "author_email": "zheni-b@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Lion ORM - возможно, самая примитивная ОРМ в мире. Она работает только с sqlite и поддерживает всего 2 типа данных: int и str. В ней нет никаких ленивых запросов и вообще, ничего интересного. Однако ее исходный код может быть вам полезен, если вы хотите узнать, как можно создать свою ОРМ.\n\nПриступим к примерам использования с подключения базы данных:\n\n```\nfrom lion_orm.connect import SqliteConnect\n\n\nSqliteConnect(\"test.db\")\n```\n\nОбратите внимание, что SqliteConnect() можно вызвать без аргументов, в этом случае база данных будет создана в оперативной памяти.\n\nТеперь попробуем создать модель данных:\n\n```\nfrom lion_orm.model import Model\nfrom lion_orm.field import Field\n\n\nclass CarModel(Model):\n    price = Field(int)\n    color = Field(str, required=True)\n    brand = Field(str)\n```\n\nЧего здесь примечательного? Во-первых, вам не нужно создавать поле id. Оно будет создано автоматически и является автоинкрементальным. Во-вторых, Field может принимать тип данных поля как в форме объекта типа данных python, так и в форме строки, соответствующей названию типа данных в sqlite. В третьих, если соответствующая данной модели таблица в базе данных еще не существует, она будет создана вместе с первым же экземпляром.\n\nЧто ж, мы создали модель, давайте теперь создадим ее экземпляр:\n\n```\ncar = CarModel(price=100000, color=\"red\", brand=\"audi\")\ncar.save()\n```\n\nДанные экземпляра модели отправляются в базу только при вызове метода save(). Имейте ввиду, что, если вы попытаетесь сохранить в базу данные экземпляра модели, где не заполнены все обязательные атрибуты, вы получите SaveEmptyModelError.\n\nУ нас есть экземпляр модели, что дальше? Дальше мы будем делать запросы к базе данных. И начнем мы с select:\n\n```\nrich_cars = car.query.select(price=100000)\n```\n\nВ данном примере мы сделали select-запрос прямо из экземпляра модели. Почему так? Ну, у нас примитивная ОРМ. А еще так можно делать в Django.\n\nТакже можно выбрать все элементы класса, вызвав метод select() без аргументов:\n\n```\nall_cars = car.query.select()\n```\n\nКак результат select-запроса мы получаем объект класса QuerySet. По своему поведению он напоминает объект списка: по нему можно итерироваться, а также получать из него значения по индексу. Давайте попробуем:\n\n```\nfor x in all_cars:\n    print(x)\n\n\nfirst_car = all_cars[0]\nprint(first_car)\n```\n\nЭто работает! А еще все объекты из QuerySet можно удалить сразу, вызвав у него метод delete():\n\n```\nall_cars.delete()\n```\n\nЕсли после этого вы попытаетесь вновь проитерироваться по данному объекту QuerySet или получить значение по индексу, получите UsingDeletedQuerySetError.\n\nРазумеется, у экземпляров модели тоже есть метод delete():\n\n```\nnew_car = CarModel(price=100000, color=\"blue\", brand=\"audi\")\nnew_car.save() # экземпляр модели есть\nnew_car.delete() # и оп, его нет\n```\n\nПрисвоить значение атрибутам экземпляра модели вы можете именно так, как ожидаете, что это будет работать:\n\n```\nnew_car.price = 110000\nnew_car.save()\n```\n\nПосле сохранения экземпляра в базе, вы можете посмотреть его id:\n\n```\nprint(new_car.id)\n# 1\n```\nВроде бы все, ничего не забыл. Да тут и сложно что-то забыть, ведь это самая примитивная ОРМ!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pomponchik/lion_orm",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lion-orm",
    "package_url": "https://pypi.org/project/lion-orm/",
    "platform": "",
    "project_url": "https://pypi.org/project/lion-orm/",
    "project_urls": {
      "Homepage": "https://github.com/pomponchik/lion_orm"
    },
    "release_url": "https://pypi.org/project/lion-orm/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lion ORM - революционная в своей примитивности ОРМ для Sqlite.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7564916,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6ba02d8b8ff9dbda7277fe849b6ca5b048e1015048364b25b58b505784963dc",
          "md5": "a1a0ca0f14847ae01a10e1425baa4e35",
          "sha256": "fee4a35374c9556db148abd4fd7cb4f4eca1efb3ea9e62088eae337e03501777"
        },
        "downloads": -1,
        "filename": "lion_orm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1a0ca0f14847ae01a10e1425baa4e35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9530,
        "upload_time": "2020-06-25T22:48:58",
        "upload_time_iso_8601": "2020-06-25T22:48:58.147291Z",
        "url": "https://files.pythonhosted.org/packages/b6/ba/02d8b8ff9dbda7277fe849b6ca5b048e1015048364b25b58b505784963dc/lion_orm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b56f29854a9c3d0825fc516b76cf700838447b26917cdfe7d6af9b09f4517a3",
          "md5": "4618f5c5962e6e3700bdf055c37277be",
          "sha256": "7141dc98e0c362102c9521ffe25c5ad7d37f1c05926f616f48a9d098e42132ff"
        },
        "downloads": -1,
        "filename": "lion_orm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4618f5c5962e6e3700bdf055c37277be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7782,
        "upload_time": "2020-06-25T22:49:00",
        "upload_time_iso_8601": "2020-06-25T22:49:00.386889Z",
        "url": "https://files.pythonhosted.org/packages/7b/56/f29854a9c3d0825fc516b76cf700838447b26917cdfe7d6af9b09f4517a3/lion_orm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6ba02d8b8ff9dbda7277fe849b6ca5b048e1015048364b25b58b505784963dc",
        "md5": "a1a0ca0f14847ae01a10e1425baa4e35",
        "sha256": "fee4a35374c9556db148abd4fd7cb4f4eca1efb3ea9e62088eae337e03501777"
      },
      "downloads": -1,
      "filename": "lion_orm-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a1a0ca0f14847ae01a10e1425baa4e35",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9530,
      "upload_time": "2020-06-25T22:48:58",
      "upload_time_iso_8601": "2020-06-25T22:48:58.147291Z",
      "url": "https://files.pythonhosted.org/packages/b6/ba/02d8b8ff9dbda7277fe849b6ca5b048e1015048364b25b58b505784963dc/lion_orm-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b56f29854a9c3d0825fc516b76cf700838447b26917cdfe7d6af9b09f4517a3",
        "md5": "4618f5c5962e6e3700bdf055c37277be",
        "sha256": "7141dc98e0c362102c9521ffe25c5ad7d37f1c05926f616f48a9d098e42132ff"
      },
      "downloads": -1,
      "filename": "lion_orm-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4618f5c5962e6e3700bdf055c37277be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7782,
      "upload_time": "2020-06-25T22:49:00",
      "upload_time_iso_8601": "2020-06-25T22:49:00.386889Z",
      "url": "https://files.pythonhosted.org/packages/7b/56/f29854a9c3d0825fc516b76cf700838447b26917cdfe7d6af9b09f4517a3/lion_orm-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}