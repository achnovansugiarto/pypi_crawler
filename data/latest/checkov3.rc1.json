{
  "info": {
    "author": "bridgecrew",
    "author_email": "meet@bridgecrew.io",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Security",
      "Topic :: Software Development :: Build Tools",
      "Typing :: Typed"
    ],
    "description": "[![checkov](https://raw.githubusercontent.com/bridgecrewio/checkov/master/docs/web/images/checkov_by_bridgecrew.png)](#)\n       \n[![Maintained by Bridgecrew.io](https://img.shields.io/badge/maintained%20by-bridgecrew.io-blueviolet)](https://bridgecrew.io/?utm_source=github&utm_medium=organic_oss&utm_campaign=checkov)\n[![build status](https://github.com/bridgecrewio/checkov/workflows/build/badge.svg)](https://github.com/bridgecrewio/checkov/actions?query=workflow%3Abuild)\n[![security status](https://github.com/bridgecrewio/checkov/workflows/security/badge.svg)](https://github.com/bridgecrewio/checkov/actions?query=event%3Apush+branch%3Amaster+workflow%3Asecurity) \n[![code_coverage](https://raw.githubusercontent.com/bridgecrewio/checkov/master/coverage.svg?sanitize=true)](https://github.com/bridgecrewio/checkov/actions?query=workflow%3Acoverage) \n[![docs](https://img.shields.io/badge/docs-passing-brightgreen)](https://www.checkov.io/1.Welcome/What%20is%20Checkov.html?utm_source=github&utm_medium=organic_oss&utm_campaign=checkov)\n[![PyPI](https://img.shields.io/pypi/v/checkov)](https://pypi.org/project/checkov/)\n[![Python Version](https://img.shields.io/pypi/pyversions/checkov)](#)\n[![Terraform Version](https://img.shields.io/badge/tf-%3E%3D0.12.0-blue.svg)](#)\n[![Downloads](https://pepy.tech/badge/checkov)](https://pepy.tech/project/checkov)\n[![Docker Pulls](https://img.shields.io/docker/pulls/bridgecrew/checkov.svg)](https://hub.docker.com/r/bridgecrew/checkov)\n[![slack-community](https://img.shields.io/badge/Slack-4A154B?style=plastic&logo=slack&logoColor=white)](https://slack.bridgecrew.io/)\n \n\n**Checkov** is a static code analysis tool for infrastructure as code (IaC) and also a software composition analysis (SCA) tool for images and open source packages.\n\nIt scans cloud infrastructure provisioned using [Terraform](https://terraform.io/), [Terraform plan](docs/7.Scan%20Examples/Terraform%20Plan%20Scanning.md), [Cloudformation](docs/7.Scan%20Examples/Cloudformation.md), [AWS SAM](docs/7.Scan%20Examples/AWS%20SAM.md), [Kubernetes](docs/7.Scan%20Examples/Kubernetes.md), [Helm charts](docs/7.Scan%20Examples/Helm.md), [Kustomize](docs/7.Scan%20Examples/Kustomize.md), [Dockerfile](docs/7.Scan%20Examples/Dockerfile.md),  [Serverless](docs/7.Scan%20Examples/Serverless%20Framework.md), [Bicep](docs/7.Scan%20Examples/Bicep.md), [OpenAPI](docs/7.Scan%20Examples/OpenAPI.md) or [ARM Templates](docs/7.Scan%20Examples/Azure%20ARM%20templates.md) and detects security and compliance misconfigurations using graph-based scanning.\n\nIt performs [Software Composition Analysis (SCA) scanning](docs/7.Scan%20Examples/Sca.md) which is a scan of open source packages and images for Common Vulnerabilities and Exposures (CVEs).\n \nCheckov also powers [**Bridgecrew**](https://bridgecrew.io/?utm_source=github&utm_medium=organic_oss&utm_campaign=checkov), the developer-first platform that codifies and streamlines cloud security throughout the development lifecycle. Bridgecrew identifies, fixes, and prevents misconfigurations in cloud resources and infrastructure-as-code files. \n\n<a href=\"https://www.bridgecrew.cloud/login/signUp/?utm_campaign=checkov-github-repo&utm_source=github.com&utm_medium=get-started-button\" title=\"Try_Bridgecrew\">\n    <img src=\"https://dabuttonfactory.com/button.png?t=Try+Bridgecrew&f=Open+Sans-Bold&ts=26&tc=fff&hp=45&vp=20&c=round&bgt=unicolored&bgc=662eff\" align=\"right\" width=\"120\">\n</a>\n\n\n<a href=\"https://docs.bridgecrew.io?utm_campaign=checkov-github-repo&utm_source=github.com&utm_medium=read-docs-button\" title=\"Docs\">\n    <img src=\"https://dabuttonfactory.com/button.png?t=Read+the+Docs&f=Open+Sans-Bold&ts=26&tc=fff&hp=45&vp=20&c=round&bgt=unicolored&bgc=662eff\" align=\"right\" width=\"120\">\n</a>\n\n## **Table of contents**\n\n- [Features](#features)\n- [Screenshots](#screenshots)\n- [Getting Started](#getting-started)\n- [Disclaimer](#disclaimer)\n- [Support](#support)\n\n ## Features\n\n * [Over 1000 built-in policies](docs/5.Policy%20Index/all.md) cover security and compliance best practices for AWS, Azure and Google Cloud.\n * Scans Terraform, Terraform Plan, Terraform JSON, CloudFormation, AWS SAM, Kubernetes, Helm, Kustomize, Dockerfile, Serverless framework, Ansible, Bicep and ARM template files.\n * Scans Argo Workflows, Azure Pipelines, BitBucket Pipelines, Circle CI Pipelines, GitHub Actions and GitLab CI workflow files\n * Supports Context-awareness policies based on in-memory graph-based scanning.\n * Supports Python format for attribute policies and YAML format for both attribute and composite policies.\n * Detects [AWS credentials](docs/2.Basics/Scanning%20Credentials%20and%20Secrets.md) in EC2 Userdata, Lambda environment variables and Terraform providers.\n * [Identifies secrets](https://bridgecrew.io/blog/checkov-secrets-scanning-find-exposed-credentials-in-iac/) using regular expressions, keywords, and entropy based detection.\n * Evaluates [Terraform Provider](https://registry.terraform.io/browse/providers) settings to regulate the creation, management, and updates of IaaS, PaaS or SaaS managed through Terraform.\n * Policies support evaluation of [variables](docs/2.Basics/Handling%20Variables.md) to their optional default value.\n * Supports in-line [suppression](docs/2.Basics/Suppressing%20and%20Skipping%20Policies.md) of accepted risks or false-positives to reduce recurring scan failures. Also supports global skip from using CLI.\n * [Output](docs/2.Basics/Reviewing%20Scan%20Results.md) currently available as CLI, [CycloneDX](https://cyclonedx.org), JSON, JUnit XML, CSV, SARIF and github markdown and link to remediation [guides](https://docs.bridgecrew.io/docs/aws-policy-index).\n \n## Screenshots\n\nScan results in CLI\n\n![scan-screenshot](https://raw.githubusercontent.com/bridgecrewio/checkov/master/docs/checkov-recording.gif)\n\nScheduled scan result in Jenkins\n\n![jenikins-screenshot](https://raw.githubusercontent.com/bridgecrewio/checkov/master/docs/checkov-jenkins.png)\n\n## Getting started\n\n### Requirements\n * Python >= 3.7 (Data classes are available for Python 3.7+)\n * Terraform >= 0.12\n\n### Installation\n\n```sh\npip3 install checkov\n```\n\nInstallation on Alpine:\n```sh\npip3 install --upgrade pip && pip3 install --upgrade setuptools\npip3 install checkov\n```\n\nInstallation on Ubuntu 18.04 LTS:\n\nUbuntu 18.04 ships with Python 3.6. Install python 3.7 (from ppa repository)\n\n```sh\nsudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt install python3.7\nsudo apt install python3-pip\nsudo python3.7 -m pip install -U checkov #to install or upgrade checkov)\n```\n\nor using [homebrew](https://formulae.brew.sh/formula/checkov) (macOS or Linux)\n\n```sh\nbrew install checkov\n```\n\nor\n\n```sh\nbrew upgrade checkov\n```\n\n### Enabling bash autocomplete\n```sh\nsource <(register-python-argcomplete checkov)\n```\n### Upgrade\n\nif you installed checkov with pip3\n```sh\npip3 install -U checkov\n```\n\n### Configure an input folder or file\n\n```sh\ncheckov --directory /user/path/to/iac/code\n```\n\nOr a specific file or files\n\n```sh\ncheckov --file /user/tf/example.tf\n```\nOr\n```sh\ncheckov -f /user/cloudformation/example1.yml -f /user/cloudformation/example2.yml\n```\n\nOr a terraform plan file in json format\n```sh\nterraform init\nterraform plan -out tf.plan\nterraform show -json tf.plan  > tf.json \ncheckov -f tf.json\n```\nNote: `terraform show` output file `tf.json` will be a single line. \nFor that reason all findings will be reported line number 0 by checkov\n```sh\ncheck: CKV_AWS_21: \"Ensure all data stored in the S3 bucket have versioning enabled\"\n\tFAILED for resource: aws_s3_bucket.customer\n\tFile: /tf/tf.json:0-0\n\tGuide: https://docs.bridgecrew.io/docs/s3_16-enable-versioning\n  ```\n\nIf you have installed `jq` you can convert json file into multiple lines with the following command:\n```sh\nterraform show -json tf.plan | jq '.' > tf.json \n```\nScan result would be much user friendly.\n```sh\ncheckov -f tf.json\nCheck: CKV_AWS_21: \"Ensure all data stored in the S3 bucket have versioning enabled\"\n\tFAILED for resource: aws_s3_bucket.customer\n\tFile: /tf/tf1.json:224-268\n\tGuide: https://docs.bridgecrew.io/docs/s3_16-enable-versioning\n\n\t\t225 |               \"values\": {\n\t\t226 |                 \"acceleration_status\": \"\",\n\t\t227 |                 \"acl\": \"private\",\n\t\t228 |                 \"arn\": \"arn:aws:s3:::mybucket\",\n\n```\n\nAlternatively, specify the repo root of the hcl files used to generate the plan file, using the `--repo-root-for-plan-enrichment` flag, to enrich the output with the appropriate file path, line numbers, and codeblock of the resource(s). An added benefit is that check suppressions will be handled accordingly.\n```sh\ncheckov -f tf.json --repo-root-for-plan-enrichment /user/path/to/iac/code\n```\n\n\n### Scan result sample (CLI)\n\n```sh\nPassed Checks: 1, Failed Checks: 1, Suppressed Checks: 0\nCheck: \"Ensure all data stored in the S3 bucket is securely encrypted at rest\"\n/main.tf:\n\t Passed for resource: aws_s3_bucket.template_bucket \nCheck: \"Ensure all data stored in the S3 bucket is securely encrypted at rest\"\n/../regionStack/main.tf:\n\t Failed for resource: aws_s3_bucket.sls_deployment_bucket_name       \n```\n\nStart using Checkov by reading the [Getting Started](docs/1.Welcome/Quick%20Start.md) page.\n\n### Using Docker\n\n\n```sh\ndocker pull bridgecrew/checkov\ndocker run --tty --rm --volume /user/tf:/tf --workdir /tf bridgecrew/checkov --directory /tf\n```\nNote: if you are using Python 3.6(Default version in Ubuntu 18.04) checkov will not work and it will fail with `ModuleNotFoundError: No module named 'dataclasses'`  error message. In this case, you can use the docker version instead.\n\nNote that there are certain cases where redirecting `docker run --tty` output to a file - for example, if you want to save the Checkov JUnit output to a file - will cause extra control characters to be printed. This can break file parsing. If you encounter this, remove the `--tty` flag.\n\nThe `--workdir /tf` flag is optional to change the working directory to the mounted volume. If you are using the SARIF output `-o sarif` this will output the results.sarif file to the mounted volume (`/user/tf` in the example above). If you do not include that flag, the working directory will be \"/\".\n\n### Running or skipping checks \n\nBy using command line flags, you can specify to run only named checks (allow list) or run all checks except \nthose listed (deny list). If you are using the platform integration via API key, you can also specify a severity threshold to skip and / or include.\nMoreover, as json files can't contain comments, one can pass regex pattern to skip json file secret scan.\n\nSee the docs for more detailed information about how these flags work together.\n   \n\n## Examples\n\nAllow only the two specified checks to run: \n```sh\ncheckov --directory . --check CKV_AWS_20,CKV_AWS_57\n```\n\nRun all checks except the one specified:\n```sh\ncheckov -d . --skip-check CKV_AWS_20\n```\n\nRun all checks except checks with specified patterns:\n```sh\ncheckov -d . --skip-check CKV_AWS*\n```\n\nRun all checks that are MEDIUM severity or higher (requires API key):\n```sh\ncheckov -d . --check MEDIUM --bc-api-key ...\n```\n\nRun all checks that are MEDIUM severity or higher, as well as check CKV_123 (assume this is a LOW severity check):\n```sh\ncheckov -d . --check MEDIUM,CKV_123 --bc-api-key ...\n```\n\nSkip all checks that are MEDIUM severity or lower:\n```sh\ncheckov -d . --skip-check MEDIUM --bc-api-key ...\n```\n\nSkip all checks that are MEDIUM severity or lower, as well as check CKV_789 (assume this is a high severity check):\n```sh\ncheckov -d . --skip-check MEDIUM,CKV_789 --bc-api-key ...\n```\n\nRun all checks that are MEDIUM severity or higher, but skip check CKV_123 (assume this is a medium or higher severity check):\n```sh\ncheckov -d . --check MEDIUM --skip-check CKV_123 --bc-api-key ...\n```\n\nRun check CKV_789, but skip it if it is a medium severity (the --check logic is always applied before --skip-check)\n```sh\ncheckov -d . --skip-check MEDIUM --check CKV_789 --bc-api-key ...\n```\n\nFor Kubernetes workloads, you can also use allow/deny namespaces.  For example, do not report any results for the \nkube-system namespace:\n```sh\ncheckov -d . --skip-check kube-system\n```\n\nRun a scan of a container image. First pull or build the image then refer to it by the hash, ID, or name:tag:\n```sh\ncheckov --framework sca_image --docker-image sha256:1234example --dockerfile-path /Users/path/to/Dockerfile --bc-api-key ...\n\ncheckov --docker-image <image-name>:tag --dockerfile-path /User/path/to/Dockerfile --bc-api-key ...\n```\n\nYou can use --image flag also to scan container image instead of --docker-image for shortener:\n```sh\ncheckov --image <image-name>:tag --dockerfile-path /User/path/to/Dockerfile --bc-api-key ...\n```\n\nRun an SCA scan of packages in a repo:\n```sh\ncheckov -d . --framework sca_package --bc-api-key ... --repo-id <repo_id(arbitrary)>\n```\n\nRun a scan of a directory with environment variables removing buffering, adding debug level logs:\n```sh\nPYTHONUNBUFFERED=1 LOG_LEVEL=DEBUG checkov -d .\n```\nOR enable the environment variables for multiple runs\n```sh\nexport PYTHONUNBUFFERED=1 LOG_LEVEL=DEBUG\ncheckov -d .\n```\n\nRun secrets scanning on all files in MyDirectory. Skip CKV_SECRET_6 check on json files that their suffix is DontScan\n```sh\ncheckov -d /MyDirectory --framework secrets --bc-api-key ... --skip-check CKV_SECRET_6:.*DontScan.json$\n```\n\nRun secrets scanning on all files in MyDirectory. Skip CKV_SECRET_6 check on json files that contains \"skip_test\" in path\n```sh\ncheckov -d /MyDirectory --framework secrets --bc-api-key ... --skip-check CKV_SECRET_6:.*skip_test.*json$\n```\n\nOne can mask values from scanning results by supplying a configuration file (using --config-file flag) with mask entry.\nThe masking can apply on resource & value (or multiple values, seperated with a comma). \nExamples:\n```sh\nmask:\n- aws_instance:user_data\n- azurerm_key_vault_secret:admin_password,user_passwords\n```\nIn the example above, the following values will be masked:\n- user_data for aws_instance resource\n- both admin_password &user_passwords for azurerm_key_vault_secret\n\n\n### Suppressing/Ignoring a check\n\nLike any static-analysis tool it is limited by its analysis scope. \nFor example, if a resource is managed manually, or using subsequent configuration management tooling, \nsuppression can be inserted as a simple code annotation.\n\n#### Suppression comment format\n\nTo skip a check on a given Terraform definition block or CloudFormation resource, apply the following comment pattern inside it's scope:\n\n`checkov:skip=<check_id>:<suppression_comment>`\n\n* `<check_id>` is one of the [available check scanners](docs/5.Policy Index/all.md)\n* `<suppression_comment>` is an optional suppression reason to be included in the output\n\n#### Example\n\nThe following comment skips the `CKV_AWS_20` check on the resource identified by `foo-bucket`, where the scan checks if an AWS S3 bucket is private.\nIn the example, the bucket is configured with public read access; Adding the suppress comment would skip the appropriate check instead of the check to fail.\n\n```hcl-terraform\nresource \"aws_s3_bucket\" \"foo-bucket\" {\n  region        = var.region\n    #checkov:skip=CKV_AWS_20:The bucket is a public static content host\n  bucket        = local.bucket_name\n  force_destroy = true\n  acl           = \"public-read\"\n}\n```\n\nThe output would now contain a ``SKIPPED`` check result entry:\n\n```bash\n...\n...\nCheck: \"S3 Bucket has an ACL defined which allows public access.\"\n\tSKIPPED for resource: aws_s3_bucket.foo-bucket\n\tSuppress comment: The bucket is a public static content host\n\tFile: /example_skip_acl.tf:1-25\n\t\n...\n```\nTo skip multiple checks, add each as a new line.\n\n```\n  #checkov:skip=CKV2_AWS_6\n  #checkov:skip=CKV_AWS_20:The bucket is a public static content host\n```\n  \nTo suppress checks in Kubernetes manifests, annotations are used with the following format:\n`checkov.io/skip#: <check_id>=<suppression_comment>`\n\nFor example: \n\n```bash\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\n  annotations:\n    checkov.io/skip1: CKV_K8S_20=I don't care about Privilege Escalation :-O\n    checkov.io/skip2: CKV_K8S_14\n    checkov.io/skip3: CKV_K8S_11=I have not set CPU limits as I want BestEffort QoS\nspec:\n  containers:\n...\n```\n\n#### Logging\n\nFor detailed logging to stdout set up the environment variable `LOG_LEVEL` to `DEBUG`. \n\nDefault is `LOG_LEVEL=WARNING`.\n\n#### Skipping directories\nTo skip files or directories, use the argument `--skip-path`, which can be specified multiple times. This argument accepts regular expressions for paths relative to the current working directory. You can use it to skip entire directories and / or specific files.\n\nBy default, all directories named `node_modules`, `.terraform`, and `.serverless` will be skipped, in addition to any files or directories beginning with `.`.\nTo cancel skipping directories beginning with `.` override `CKV_IGNORE_HIDDEN_DIRECTORIES` environment variable `export CKV_IGNORE_HIDDEN_DIRECTORIES=false`\n\nYou can override the default set of directories to skip by setting the environment variable `CKV_IGNORED_DIRECTORIES`.\n Note that if you want to preserve this list and add to it, you must include these values. For example, `CKV_IGNORED_DIRECTORIES=mynewdir` will skip only that directory, but not the others mentioned above. This variable is legacy functionality; we recommend using the `--skip-file` flag.\n\n#### Console Output\n\nThe console output is in colour by default, to switch to a monochrome output, set the environment variable:\n`ANSI_COLORS_DISABLED`\n\n#### VSCODE Extension\n\nIf you want to use checkov's within vscode, give a try to the vscode extension available at [vscode](https://marketplace.visualstudio.com/items?itemName=Bridgecrew.checkov)\n\n### Configuration using a config file\n\nCheckov can be configured using a YAML configuration file. By default, checkov looks for a `.checkov.yaml` or `.checkov.yml` file in the following places in order of precedence:\n* Directory against which checkov is run. (`--directory`)\n* Current working directory where checkov is called.\n* User's home directory.\n\n**Attention**: it is a best practice for checkov configuration file to be loaded from a trusted source composed by a verified identity, so that scanned files, check ids and loaded custom checks are as desired.\n\nUsers can also pass in the path to a config file via the command line. In this case, the other config files will be ignored. For example:\n```sh\ncheckov --config-file path/to/config.yaml\n```\nUsers can also create a config file using the `--create-config` command, which takes the current command line args and writes them out to a given path. For example:\n```sh\ncheckov --compact --directory test-dir --docker-image sample-image --dockerfile-path Dockerfile --download-external-modules True --external-checks-dir sample-dir --no-guide --quiet --repo-id bridgecrew/sample-repo --skip-check CKV_DOCKER_3,CKV_DOCKER_2 --skip-fixes --skip-framework dockerfile secrets --skip-suppressions --soft-fail --branch develop --check CKV_DOCKER_1 --create-config /Users/sample/config.yml\n```\nWill create a `config.yaml` file which looks like this:\n```yaml\nbranch: develop\ncheck:\n  - CKV_DOCKER_1\ncompact: true\ndirectory:\n  - test-dir\ndocker-image: sample-image\ndockerfile-path: Dockerfile\ndownload-external-modules: true \nevaluate-variables: true \nexternal-checks-dir: \n  - sample-dir \nexternal-modules-download-path: .external_modules \nframework:\n  - all \nno-guide: true \noutput: cli \nquiet: true \nrepo-id: bridgecrew/sample-repo \nskip-check: \n  - CKV_DOCKER_3 \n  - CKV_DOCKER_2 \nskip-fixes: true \nskip-framework:\n  - dockerfile\n  - secrets\nskip-suppressions: true \nsoft-fail: true\n```\n\nUsers can also use the `--show-config` flag to view all the args and settings and where they came from i.e. commandline, config file, environment variable or default. For example:\n```sh\ncheckov --show-config\n```\nWill display:\n```sh\nCommand Line Args:   --show-config\nEnvironment Variables:\n  BC_API_KEY:        your-api-key\nConfig File (/Users/sample/.checkov.yml):\n  soft-fail:         False\n  branch:            master\n  skip-check:        ['CKV_DOCKER_3', 'CKV_DOCKER_2']\nDefaults:\n  --output:          cli\n  --framework:       ['all']\n  --download-external-modules:False\n  --external-modules-download-path:.external_modules\n  --evaluate-variables:True\n```\n## Contributing\n\nContribution is welcomed! \n\nStart by reviewing the [contribution guidelines](CONTRIBUTING.md). After that, take a look at a [good first issue](https://github.com/bridgecrewio/checkov/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22).\n\nYou can even start this with one-click dev in your browser through Gitpod at the following link:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/bridgecrewio/checkov)\n\nLooking to contribute new checks? Learn how to write a new check (AKA policy) [here](docs/6.Contribution/Contribution%20Overview.md).\n\n## Disclaimer\n`checkov` does not save, publish or share with anyone any identifiable customer information.  \nNo identifiable customer information is used to query Bridgecrew's publicly accessible guides.\n`checkov` uses Bridgecrew's API to enrich the results with links to remediation guides.\nTo skip this API call use the flag `--no-guide`.\n\n## Support\n\n[Bridgecrew](https://bridgecrew.io/?utm_source=github&utm_medium=organic_oss&utm_campaign=checkov) builds and maintains Checkov to make policy-as-code simple and accessible. \n\nStart with our [Documentation](https://bridgecrewio.github.io/checkov/) for quick tutorials and examples.\n\nIf you need direct support you can contact us at info@bridgecrew.io.\n\n## Python Version Support\nWe follow the official support cycle of Python and we use automated tests for all supported versions of Python. This means we currently support Python 3.7 - 3.11, inclusive. Note that Python 3.7 is reaching EOL on June 2023. After that time, we will have a short grace period where we will continue 3.7 support until September 2023, and then it will no longer be considered supported for Checkov. If you run into any issues with any non-EOL Python version, please open an Issue.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bridgecrewio/checkov",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "checkov3",
    "package_url": "https://pypi.org/project/checkov3/",
    "platform": null,
    "project_url": "https://pypi.org/project/checkov3/",
    "project_urls": {
      "Homepage": "https://github.com/bridgecrewio/checkov"
    },
    "release_url": "https://pypi.org/project/checkov3/0.1.1/",
    "requires_dist": [
      "bc-python-hcl2 (==0.3.51)",
      "bc-detect-secrets (==1.4.15)",
      "bc-jsonpath-ng (==1.5.9)",
      "deep-merge",
      "tabulate",
      "colorama",
      "termcolor",
      "junit-xml (>=1.9)",
      "dpath (>=2.1.0)",
      "pyyaml (>=5.4.1)",
      "boto3 (>=1.17)",
      "gitpython",
      "jmespath",
      "tqdm",
      "update-checker",
      "semantic-version",
      "packaging",
      "cloudsplaining (>=0.4.3)",
      "networkx (<2.7)",
      "igraph",
      "dockerfile-parse",
      "docker",
      "configargparse",
      "argcomplete",
      "policyuniverse",
      "typing-extensions (>=4.1.0)",
      "importlib-metadata (>=0.12)",
      "cachetools",
      "cyclonedx-python-lib (<4.0.0,>=2.4.0)",
      "packageurl-python",
      "click (>=8.0.0)",
      "aiohttp",
      "aiodns",
      "aiomultiprocess",
      "jsonschema (<5.0.0,>=4.6.0)",
      "prettytable (>=3.0.0)",
      "pycep-parser (==0.3.9)",
      "charset-normalizer",
      "schema",
      "requests (>=2.27.0)",
      "yarl",
      "semgrep (==1.10.0)",
      "pyston-autoload (==2.3.5) ; python_version < \"3.11\" and (sys_platform == \"linux\" or sys_platform == \"darwin\") and platform_machine == \"x86_64\" and implementation_name == \"cpython\"",
      "pyston (==2.3.5) ; python_version < \"3.11\" and (sys_platform == \"linux\" or sys_platform == \"darwin\") and platform_machine == \"x86_64\" and implementation_name == \"cpython\"",
      "pytest (==5.3.1) ; extra == 'dev'",
      "coverage (==5.5) ; extra == 'dev'",
      "coverage-badge ; extra == 'dev'",
      "GitPython (==3.1.7) ; extra == 'dev'",
      "bandit ; extra == 'dev'",
      "jsonschema ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Infrastructure as code static analysis",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17463306,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d538e71f15410db0462ab65946e5a078800e6e2c7e32b6f9147858da6348d80",
          "md5": "1f8ed36117d211ec3e0a25e8787576f8",
          "sha256": "b9a5eb03603d3e66e71db8a049181be8389485defc1946dbf2b9b9fa36c4402b"
        },
        "downloads": -1,
        "filename": "checkov3-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f8ed36117d211ec3e0a25e8787576f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 1805592,
        "upload_time": "2023-03-27T15:47:11",
        "upload_time_iso_8601": "2023-03-27T15:47:11.661660Z",
        "url": "https://files.pythonhosted.org/packages/1d/53/8e71f15410db0462ab65946e5a078800e6e2c7e32b6f9147858da6348d80/checkov3-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1dc9ebc8176593b3acd9fc5f8021631a9c85f0c9a29da308455138dbf793561",
          "md5": "d6b8fc32af4313c6d7061e301e832923",
          "sha256": "821396adcab586904390d8e6a82eb3d792e40115c44d971c17d1d51015bd2135"
        },
        "downloads": -1,
        "filename": "checkov3-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6b8fc32af4313c6d7061e301e832923",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 762067,
        "upload_time": "2023-03-27T15:47:13",
        "upload_time_iso_8601": "2023-03-27T15:47:13.716527Z",
        "url": "https://files.pythonhosted.org/packages/e1/dc/9ebc8176593b3acd9fc5f8021631a9c85f0c9a29da308455138dbf793561/checkov3-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d538e71f15410db0462ab65946e5a078800e6e2c7e32b6f9147858da6348d80",
        "md5": "1f8ed36117d211ec3e0a25e8787576f8",
        "sha256": "b9a5eb03603d3e66e71db8a049181be8389485defc1946dbf2b9b9fa36c4402b"
      },
      "downloads": -1,
      "filename": "checkov3-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1f8ed36117d211ec3e0a25e8787576f8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 1805592,
      "upload_time": "2023-03-27T15:47:11",
      "upload_time_iso_8601": "2023-03-27T15:47:11.661660Z",
      "url": "https://files.pythonhosted.org/packages/1d/53/8e71f15410db0462ab65946e5a078800e6e2c7e32b6f9147858da6348d80/checkov3-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1dc9ebc8176593b3acd9fc5f8021631a9c85f0c9a29da308455138dbf793561",
        "md5": "d6b8fc32af4313c6d7061e301e832923",
        "sha256": "821396adcab586904390d8e6a82eb3d792e40115c44d971c17d1d51015bd2135"
      },
      "downloads": -1,
      "filename": "checkov3-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d6b8fc32af4313c6d7061e301e832923",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 762067,
      "upload_time": "2023-03-27T15:47:13",
      "upload_time_iso_8601": "2023-03-27T15:47:13.716527Z",
      "url": "https://files.pythonhosted.org/packages/e1/dc/9ebc8176593b3acd9fc5f8021631a9c85f0c9a29da308455138dbf793561/checkov3-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}