{
  "info": {
    "author": "wangshuo",
    "author_email": "shuowan16@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SharpFed\r\n\r\n## Introduction\r\n\r\nA framework for fast federated learning algorithm verification based on **Tensorflow** *(Only suitable for academic research)*\r\n\r\nAdvantages:\r\n\r\n+ High flexibility, (i) independent definition of each client local update algorithm, (ii) Masked gradients aggregation is supported.\r\n\r\n+ Easy and fast to use.\r\n  \r\n## Use Example without Install\r\n\r\n+ Clone the project\r\n  \r\n  ```bash\r\n  git clone https://github.com/WhatIsSurprise/SharpFed.git\r\n  ```\r\n\r\n+ Create `MyServer.py` as follows in the cloned project folder:\r\n  \r\n  ```python\r\n  from sharpfed import core\r\n  import numpy as np\r\n  from typing import List\r\n  \r\n  # Rewrite the server object\r\n  class MyServer(core.ServerObject):\r\n      def __init__(self):\r\n          super().__init__()\r\n  \r\n      ## Rewrite the response function \r\n      ## When clients request to connect the server, we should decide whether these clients should be connected based on their meta data (i.e., communication bandwidth, number of training examples, ...) \r\n      def round_response_to_client_connection_request(self, request_to_connect_clients_id: np.ndarray, meta_data_dictlist: List[dict]) -> np.ndarray:\r\n          return request_to_connect_clients_id\r\n  \r\n      ## Rewrite the selection function \r\n      ## In each round, we should select several clients to conduct local update based on their meta data (i.e., communication bandwidth, number of training examples, ...) \r\n      def round_selection(self, connected_clients_id: np.ndarray, meta_data_dictlist: List[dict]) -> np.ndarray:\r\n          return connected_clients_id\r\n  \r\n      ## Rewrite the aggregation weights function\r\n      def set_aggregation_model_weights(self, model_updates_dictlist: List[dict], meta_data_dictlist: List[dict]) -> dict:\r\n          aggregate_weights = dict()\r\n          for item in model_updates_dictlist:\r\n              client_id = list(item.keys())[0]\r\n              client_updates = item[client_id]\r\n              aggregate_weights[client_id] = 0.1\r\n          return aggregate_weights\r\n  ```\r\n\r\n+ Create `MyClient.py` as follows in the cloned project folder:\r\n  \r\n  ```python\r\n  from sharpfed import core\r\n  import numpy as np\r\n  from typing import List\r\n  \r\n  # Rewrite the client object\r\n  class MyClient(core.ClientObject):\r\n      def __init__(self):\r\n          super().__init__()\r\n  \r\n      ## Rewrite the local update function.\r\n      ## Mote that whether you use mask or not, you should return the layerwise mask vector. \r\n      ## If mask is not used in your local update algorithm, the mask vector should be a vector whose elements are all 1. \r\n      def local_update(self, global_model_parameters: List) -> tuple:\r\n          '''\r\n          Input: global model parameters.\r\n          Output: Local updated gradients, layerwise mask vector.\r\n          '''\r\n          layermask_vector = np.ones(len(global_model_parameters))\r\n          local_model_updates = [np.ones_like(global_model_parameters[layer_idx]*layermask_vector[layer_idx]) for layer_idx in range(len(global_model_parameters))]\r\n          return local_model_updates, layermask_vector\r\n  ```\r\n\r\n+ Then, you can use your server and client object. Create the `run_server.py`\r\n  \r\n  ```python\r\n  from MyServer import MyServer\r\n  from pathlib import Path\r\n  import tensorflow as tf\r\n  BASE_DIR = Path(__file__).resolve().parent\r\n  \r\n  class MyDenseModel(tf.keras.Model):\r\n      def __init__(self, num_outputs):\r\n          super(MyDenseModel, self).__init__()\r\n          self._dense = tf.keras.layers.Dense(num_outputs, activation='relu')\r\n      def call(self, inputs):\r\n          z = self._dense(inputs)\r\n          return z\r\n  if __name__ == '__main__':\r\n      my_model = MyDenseModel(num_outputs = 10)\r\n      my_model(tf.zeros([64, 8]))\r\n  \r\n      my_server = MyServer()\r\n      my_server._initialize(\r\n          server_id=8080,\r\n          num_rounds=2,\r\n          round_model_save_folder=BASE_DIR.joinpath('RoundModels'),\r\n          min_connected_clients=3,\r\n          initialized_model_parameters=my_model.get_weights(),\r\n          project_metadata_cache_path=BASE_DIR.joinpath('MyProject1')\r\n      )\r\n      my_server._start()\r\n  ```\r\n  \r\n    Create the `run_client.py`\r\n  \r\n  ```python\r\n  from MyClient import MyClient\r\n  from pathlib import Path\r\n  import argparse\r\n  BASE_DIR = Path(__file__).resolve().parent\r\n  \r\n  parser = argparse.ArgumentParser()\r\n  parser.add_argument(\"--client_id\", type = int, default = 0, required = True)\r\n  args = parser.parse_args()\r\n  \r\n  if __name__ == '__main__':\r\n      my_client = MyClient()\r\n      my_client._initialize(\r\n          client_id=args.client_id,\r\n          server_to_connect_id=8080,\r\n          meta_data={'key1': 100, 'key2': 200},\r\n          project_metadata_cache_path=BASE_DIR.joinpath('MyProject1')\r\n      )\r\n      my_client._start()\r\n  ```\r\n  \r\n    Finally, you can start your whole system using one `run.sh`. For example, in the following script, we create a system with 1 server and 3 clients\r\n  \r\n  ```bash\r\n  #!/bin/bash\r\n  echo \"Starting server\"\r\n  python run_server.py &\r\n  sleep 3  # Sleep for 3s to give the server enough time to start\r\n  \r\n  for i in `seq 0 2`; do\r\n      echo \"Starting client $i\"\r\n      python run_client.py --client_id=${i} &\r\n  done\r\n  \r\n  # This will allow you to use CTRL+C to stop all background processes\r\n  trap \"trap - SIGTERM && kill -- -$$\" SIGINT SIGTERM\r\n  # Wait for all background processes to complete\r\n  wait\r\n  ```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WhatIsSurprise/SharpFed",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sharpfed",
    "package_url": "https://pypi.org/project/sharpfed/",
    "platform": null,
    "project_url": "https://pypi.org/project/sharpfed/",
    "project_urls": {
      "Homepage": "https://github.com/WhatIsSurprise/SharpFed"
    },
    "release_url": "https://pypi.org/project/sharpfed/0.0.3/",
    "requires_dist": null,
    "requires_python": "<=3.8.10",
    "summary": "Fast and easy federated learning framework based on Tensorflow",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16083164,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5f9959be70b2462888d71ea0bf19ced2a8d166093efd35c0db3bf637433f500",
          "md5": "af46e336caa0a9737fcfeceae958ebf1",
          "sha256": "c0568344d7527586298ad9b13d52a113488aafa9c8c0ca43961a065f296fc626"
        },
        "downloads": -1,
        "filename": "sharpfed-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af46e336caa0a9737fcfeceae958ebf1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<=3.8.10",
        "size": 7379,
        "upload_time": "2022-12-13T07:46:19",
        "upload_time_iso_8601": "2022-12-13T07:46:19.866087Z",
        "url": "https://files.pythonhosted.org/packages/f5/f9/959be70b2462888d71ea0bf19ced2a8d166093efd35c0db3bf637433f500/sharpfed-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d1eb5ff463009779f98a456173ca5b2082ab6ae46922d9c9c2bdbc2999c3c90",
          "md5": "9f417dac4244795d4919757c7a1ed28b",
          "sha256": "d379b556b486c2cdd144e75b31361f94ce4f45206249d4895b1b1d66ee842aaf"
        },
        "downloads": -1,
        "filename": "sharpfed-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9f417dac4244795d4919757c7a1ed28b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<=3.8.10",
        "size": 6725,
        "upload_time": "2022-12-13T07:46:22",
        "upload_time_iso_8601": "2022-12-13T07:46:22.041573Z",
        "url": "https://files.pythonhosted.org/packages/5d/1e/b5ff463009779f98a456173ca5b2082ab6ae46922d9c9c2bdbc2999c3c90/sharpfed-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5f9959be70b2462888d71ea0bf19ced2a8d166093efd35c0db3bf637433f500",
        "md5": "af46e336caa0a9737fcfeceae958ebf1",
        "sha256": "c0568344d7527586298ad9b13d52a113488aafa9c8c0ca43961a065f296fc626"
      },
      "downloads": -1,
      "filename": "sharpfed-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af46e336caa0a9737fcfeceae958ebf1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<=3.8.10",
      "size": 7379,
      "upload_time": "2022-12-13T07:46:19",
      "upload_time_iso_8601": "2022-12-13T07:46:19.866087Z",
      "url": "https://files.pythonhosted.org/packages/f5/f9/959be70b2462888d71ea0bf19ced2a8d166093efd35c0db3bf637433f500/sharpfed-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d1eb5ff463009779f98a456173ca5b2082ab6ae46922d9c9c2bdbc2999c3c90",
        "md5": "9f417dac4244795d4919757c7a1ed28b",
        "sha256": "d379b556b486c2cdd144e75b31361f94ce4f45206249d4895b1b1d66ee842aaf"
      },
      "downloads": -1,
      "filename": "sharpfed-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9f417dac4244795d4919757c7a1ed28b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<=3.8.10",
      "size": 6725,
      "upload_time": "2022-12-13T07:46:22",
      "upload_time_iso_8601": "2022-12-13T07:46:22.041573Z",
      "url": "https://files.pythonhosted.org/packages/5d/1e/b5ff463009779f98a456173ca5b2082ab6ae46922d9c9c2bdbc2999c3c90/sharpfed-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}