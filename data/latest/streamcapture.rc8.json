{
  "info": {
    "author": "Sébastien Loisel",
    "author_email": "sloisel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n## streamcapture: capture the outputs of Python streams, such as sys.stdout and sys.stderr\n\n### Author: Sébastien Loisel\n\n# Installation\n\n`pip install streamcapture`\n\n# Example usage\n\n```python\nimport streamcapture, sys, os\nprint(\"This does not get saved to the log file\")\nwith streamcapture.StreamCapture(sys.stdout,open('logfile.txt','wb')):\n        os.write(sys.stdout.fileno(),b\"Hello, captured world!\\n\")\n        os.system('echo Hello from the shell')\n        print(\"More capturing\")\nprint(\"This also does not get saved to the log file\")\n```\n\nAfter execution, this will create a file `logfile.txt` in the current directory, containing\nthe relevant captured outputs.\n\n# Documentation\n\nClass `StreamCapture(stream, writer, echo=True, monkeypatch=None)` is able to capture,\nat the operating system level, the data being written to the given `stream`.\nA typical use is to capture all outputs to `sys.stdout` and `sys.stderr`\nand log them to a file. This will even capture the outputs of spawned shell commands.\n\n`StreamCapture` works by essentially using `os.dup2` to send `stream.fileno()` to a `os.pipe()`.\nA separate thread is used to listen to that `os.pipe` and send the outputs to the destination\n`writer` stream. `StreamCapture` also uses `os.dup` to duplicate the original filedescriptor to be able\nto restore it at the end. This duplicated filedescriptor is stored in `StreamCapture.dup_fd`, and\nwriting to this filedescriptor results in writing to the original file, before it was redirected.\nFor example, when redirecting `sys.stdout`, one can still write to the terminal by writing directly\nto `StreamCapture.dup_fd` with `os.write()`.\n\nOn Windows, `sys.stdout` and `sys.stderr` do not take kindly to their `fileno()` being\nredirected with `os.dup2`. `StreamCapture` features an optional workaround, enabled by the\n`monkeypatch` optional parameter to the constructor. When enabled, the workaround\noverwrites `stream.write(...)` by an implementation that sends everything to `os.write(self.fd,...)`.\nThis workaround is enabled when `monkeypatch=True` and disabled when `monkeypatch=False`.\nThe default is `monkeypatch=None`, in which case monkeypatching is enabled only when \n`platform.system()=='Windows'`.\n\nWhen writing to multiple streams and file descriptors, sometimes the order in which the writes\nappear can be surprising. For example, when writing to stderr and stdout, these outputs do not\nnecessarily appear in the order in which they occurred during the program execution, because\nof various levels of buffering that occur in Python, the C library or the operating system.\n\nAt the Python level, streams can be `flush()`ed to attempt to reduce the delay before a `write()`\nhas delivered its payload. Furthermore, `os.fsync()` can be used on some, but not all, file descriptors.\nHowever, `os.fsync()` usually causes an exception if it is called on `sys.stdout.fileno()` or on a\n`os.pipe()`. In principle, the operating system should promtly flush any buffers when a file descriptor\nis `os.close()`d, but there is no guarantee. To complicate matters, although one usually prefers minimal\nbuffering for outputs that go to the console, Python tries very hard to force some sort of buffering on\ntext-mode files.\n\nWe have tried to prevent most forms of buffering at the Python level and at the operating system levels,\nbut when multiple file descriptors are used, or at the boundary when a `StreamCapture` starts or stops\ncapturing the underlying stream, some outputs that go to the console may appear in an unexpected order.\n\nMore sophisticated behaviors can be handled by implementing a custom stream-like object.\nThe `writer` object should implement functions `writer.write(data)`, where `data` is a byte string,\nand `writer.close()`.\n\nThe `echo` flag can be set at construction time `StreamCapture(...,echo=True)` and defaults to `True`.\nIn this mode, all captured outputs are sent both to the `writer` and also to `StreamCapture.dup_fd`.\nThis allows one to send, e.g. `stdout` to a log file while simultaneously printing it to the console,\nsimilar to the `tee` console command in Unix. The `echo` flag can be set to `False` to disable this.\n\nOne can call `StreamCapture.close()` to cleanly unwind the captured streams. This is automatically\ndone if `StreamCapture` is used in a `with` block.\n\nOne may also wish to capture a filedescriptor without the overhead of a wrapping Python stream.\nTo that end, one may use `FDCapture(fd,writer,echo=True)`. The parameter `fd` is an integer filedescriptor\nto be captured. `StreamCapture` is a thin wrapper around `FDCapture`, it mainly adds the monkeypatching\ncapability.\n\n`streamcapture.Writer` is a thin wrapper around an underlying stream, that allows sharing a stream\nbetween multiple threads in a thread-safe manner, guaranteeing that the underlying stream is closed\nonly when all threads have called `close`. `Writer` objects are constructed by\n`streamcapture.Writer(stream,count,lock_write = False)`.\n\n`stream`: is a stream that is being wrapped, e.g. `stream = open('logfile.txt','wb')`\n\n`count`: is the number of times that `Writer.close()` will be called before the writer\nis finally closed. This is so that a single stream can be used from multiple threads.\n\n`lock_write`: set this to `True` if you want calls to `stream.write()` to be serialized.\nThis causes `Writer.write` to acquire `Writer.lock` before calling `stream.write`.\nIf `lock_write=False` then `Writer.lock` is not acquired. Use this when `stream.write` is\nthread-safe. `lock_write=False` is the default.\n\nExample usage:\n```python\nimport sys, streamcapture\nwriter = streamcapture.Writer(open('logfile.txt','wb'),2)\nwith streamcapture.StreamCapture(sys.stdout,writer), streamcapture.StreamCapture(sys.stderr,writer):\n\tprint(\"This goes to stdout and is captured to logfile.txt\")\n\tprint(\"This goes to stderr and is also captured to logfile.txt\",file=sys.stderr)\n```\n\nIn the above example, writer will be closed twice: once from the `StreamCapture(sys.stdout,...)`\nobject, and once from the `StreamCapture(sys.stderr,...)` object. Correspondingly, the `count` parameter\nof the `streamcapture.Writer` was set to `2`, so that the underlying stream is only closed after 2\ncalls to `writer.close()`.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sloisel/streamcapture",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "streamcapture",
    "package_url": "https://pypi.org/project/streamcapture/",
    "platform": null,
    "project_url": "https://pypi.org/project/streamcapture/",
    "project_urls": {
      "Documentation": "https://htmlpreview.github.io/?https://github.com/sloisel/streamcapture/blob/master/streamcapture.html",
      "Homepage": "https://github.com/sloisel/streamcapture",
      "Source": "https://github.com/sloisel/streamcapture"
    },
    "release_url": "https://pypi.org/project/streamcapture/1.2.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Capture output streams such as sys.stdout and sys.stderr.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16588740,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "690153bb84ac6d2b2e15ce203b7c94e6b54bf10fd901998f2bb7eb8cc1cb3dbe",
          "md5": "44e93c3225bed4675a5d7e6b14eb2c46",
          "sha256": "fe9f9d4c41a1cb279851db3030250a75243cb00abf0dfa312ef61c1526b01d59"
        },
        "downloads": -1,
        "filename": "streamcapture-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "44e93c3225bed4675a5d7e6b14eb2c46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4688,
        "upload_time": "2021-03-25T20:36:01",
        "upload_time_iso_8601": "2021-03-25T20:36:01.257648Z",
        "url": "https://files.pythonhosted.org/packages/69/01/53bb84ac6d2b2e15ce203b7c94e6b54bf10fd901998f2bb7eb8cc1cb3dbe/streamcapture-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70c807fde71dcc30e693d3cb9ffac7545c4e1fb572af2658b3f26a1fe17972fa",
          "md5": "8fe3f937e17f0dfcca44ec9a01f1eb03",
          "sha256": "4f750d06124bc6312d6737705112ebd43b6a4a670f3e2a6b39f41cfecf859c67"
        },
        "downloads": -1,
        "filename": "streamcapture-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8fe3f937e17f0dfcca44ec9a01f1eb03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4761,
        "upload_time": "2021-03-26T13:31:14",
        "upload_time_iso_8601": "2021-03-26T13:31:14.229535Z",
        "url": "https://files.pythonhosted.org/packages/70/c8/07fde71dcc30e693d3cb9ffac7545c4e1fb572af2658b3f26a1fe17972fa/streamcapture-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79455f00650bfe502bbf2ff675b70af5bfc81a416ff4f2502b609664445b40a6",
          "md5": "52429e6bce3dd82d72a8a75535ad39e5",
          "sha256": "8662696f0c0126dbd7a9dce5da4c51d3d0e337c16d89e967b77f8b137a7d7a9d"
        },
        "downloads": -1,
        "filename": "streamcapture-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "52429e6bce3dd82d72a8a75535ad39e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4455,
        "upload_time": "2021-03-29T11:38:18",
        "upload_time_iso_8601": "2021-03-29T11:38:18.970142Z",
        "url": "https://files.pythonhosted.org/packages/79/45/5f00650bfe502bbf2ff675b70af5bfc81a416ff4f2502b609664445b40a6/streamcapture-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91255c0a7a8350fbb4a25797a25298e42a8cee86cbce6fb7968cd526048380b2",
          "md5": "3dba374fda6042fc8aaef84838f614b8",
          "sha256": "85209e2f46c08af6483a45dc4e348efc046af60e3a37f3dd0040d988d24526a7"
        },
        "downloads": -1,
        "filename": "streamcapture-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3dba374fda6042fc8aaef84838f614b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5858,
        "upload_time": "2021-04-25T12:19:05",
        "upload_time_iso_8601": "2021-04-25T12:19:05.238075Z",
        "url": "https://files.pythonhosted.org/packages/91/25/5c0a7a8350fbb4a25797a25298e42a8cee86cbce6fb7968cd526048380b2/streamcapture-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "108790b1051e222fe16045a38595c8b7825896b86fb9b240fe1f1efa4e484881",
          "md5": "0a3229733a948d0ce6a94b782f808780",
          "sha256": "a92bd52f335ede95eb01d7e50034cb39f97b2341bfbe5055fb2ab8ffae48ef43"
        },
        "downloads": -1,
        "filename": "streamcapture-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a3229733a948d0ce6a94b782f808780",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5868,
        "upload_time": "2021-04-25T22:38:09",
        "upload_time_iso_8601": "2021-04-25T22:38:09.323237Z",
        "url": "https://files.pythonhosted.org/packages/10/87/90b1051e222fe16045a38595c8b7825896b86fb9b240fe1f1efa4e484881/streamcapture-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cf84824719013423b553ed7bb8172b9ce02c6f34213857edc82d9acfa7e5f46",
          "md5": "840c43db1ef2256203523f4fc56e8768",
          "sha256": "9f9c73a42e31b55f9b53d072d890f243fbbff98bc83dd32c028823deacba9141"
        },
        "downloads": -1,
        "filename": "streamcapture-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "840c43db1ef2256203523f4fc56e8768",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5985,
        "upload_time": "2023-01-13T20:15:49",
        "upload_time_iso_8601": "2023-01-13T20:15:49.375223Z",
        "url": "https://files.pythonhosted.org/packages/9c/f8/4824719013423b553ed7bb8172b9ce02c6f34213857edc82d9acfa7e5f46/streamcapture-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ba89547180c663c4b30e390f5257b3ac1d00df9df68b5a0d98219088b4b3d1e",
          "md5": "8f691b71ccd34d00f33b791b03ce1a68",
          "sha256": "e482e064567eba1572f519794b00e28319d2177039161ed8d7e811413b59b498"
        },
        "downloads": -1,
        "filename": "streamcapture-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f691b71ccd34d00f33b791b03ce1a68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 6118,
        "upload_time": "2023-01-26T21:18:41",
        "upload_time_iso_8601": "2023-01-26T21:18:41.742892Z",
        "url": "https://files.pythonhosted.org/packages/6b/a8/9547180c663c4b30e390f5257b3ac1d00df9df68b5a0d98219088b4b3d1e/streamcapture-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38de1c58f3573a0e687d4d1008244a371fe4e49908f9bf3098de1d947cfbb6b8",
          "md5": "78bdf69f7bd4c4e033ba318cea9c40dd",
          "sha256": "84e4f005d8cdf252ccb7e594bc9cf8a7db4ae8c1c4ad493e5bd52829f0b0d0d2"
        },
        "downloads": -1,
        "filename": "streamcapture-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "78bdf69f7bd4c4e033ba318cea9c40dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 6080,
        "upload_time": "2023-01-27T11:31:36",
        "upload_time_iso_8601": "2023-01-27T11:31:36.450029Z",
        "url": "https://files.pythonhosted.org/packages/38/de/1c58f3573a0e687d4d1008244a371fe4e49908f9bf3098de1d947cfbb6b8/streamcapture-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38de1c58f3573a0e687d4d1008244a371fe4e49908f9bf3098de1d947cfbb6b8",
        "md5": "78bdf69f7bd4c4e033ba318cea9c40dd",
        "sha256": "84e4f005d8cdf252ccb7e594bc9cf8a7db4ae8c1c4ad493e5bd52829f0b0d0d2"
      },
      "downloads": -1,
      "filename": "streamcapture-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "78bdf69f7bd4c4e033ba318cea9c40dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 6080,
      "upload_time": "2023-01-27T11:31:36",
      "upload_time_iso_8601": "2023-01-27T11:31:36.450029Z",
      "url": "https://files.pythonhosted.org/packages/38/de/1c58f3573a0e687d4d1008244a371fe4e49908f9bf3098de1d947cfbb6b8/streamcapture-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}