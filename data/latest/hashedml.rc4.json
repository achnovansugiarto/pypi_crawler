{
  "info": {
    "author": "Matth Ingersoll",
    "author_email": "matth@mtingers.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# HashedML\nA machine learning library that uses a different approach: string hashing\n(think hash tables) for classifying sequences.\n\n# Installation\n\nPyPI:\n```\npip install -U hashedml\n```\n\nsetup.py:\n```\npython setup.py build\npython setup.py install\n```\n\n# Classification\nHashedML takes the simple `fit(X, y)` / `predict(X)` approach.\n\nExample:\n\n```python\nfrom hashedml import HashedML\n\nmodel = HashedML()\niris_data = open('test-data/iris.data').read().split('\\n')\nfor i in iris_data:\n    i = i.split(',')\n    X = i[:-1]\n    y = i[-1]\n    model.fit(X, y)\n\niris_test = open('test-data/iris.test').read().split('\\n')\nfor i in irist_test:\n    i = i.split(',')\n    X = i[:-1]\n    y = i[-1]\n    # use test() to get accuracy\n    prediction = model.test(X, y)\n    # -or: normally you don't have 'y'\n    prediction = model.predict(X)\n\nprint('accuracy: {}%'.format(model.accuracy()*100))\n\n```\n\n# Generative\nHashedML can also generate data after learning.\n\nExample:\n\n```python\nfrom collections import deque\nfrom hashedml import HashedML\n\nmodel = HashedML(nback=4)\ntoken_q = deque(maxlen=model.nback)\ntokens = TextBlob(open('training.text').read()).tokens\n\n# Learn\nfor i in tokens:\n    token_q.append(i)\n    if len(token_q) != model.nback:\n        continue\n    X = list(token_q)[:-1]\n    y = list(token_q)[-1]\n    model.fit(X, y)\n\n# Generate\noutput = model.generate(\n    ('What', 'is'),\n    nwords=500,\n    separator=' '\n)\nprint(output)\n```\n\nExample using `hashedml` test CLI program:\n```bash\n(venv) foo % hashedml generate 120 'Computer science' test-data/computerprogramming.txt\n```\n```\ninput-file: test-data/computerprogramming.txt\noutput:\nComputer science abstracting the code, making it targetable to varying machine\ninstruction sets via compilation declarations and heuristics. The first\ncompiler for a programming language was developed by seven programmers,\nincluding Adele Goldberg, in the 1970s. One of the first object-oriented\nprogramming languages, Smalltalk, was developed by seven programmers,\nincluding Adele in the 1970s. One of the first programming languages,\nSmalltalk, was developed by Grace Hopper. When Hopper went to work on UNIVAC in\n1949, she brought the idea of using compilers with her. Compilers harness the\npower of computers to make programming easier by allowing programmers to\nspecify calculations by entering a formula using infix notation\n( e.g., Y = X * 2 + 5 * X + 9\n```\n```bash\n(venv) foo % hashedml generate 120 'Computer science' test-data/computerprogramming.txt\n```\n```\ninput-file: test-data/computerprogramming.txt\noutput:\nComputer science abstracting the code, making it targetable to varying machine\ninstruction sets via compilation declarations and heuristics. The first\ncompiler for a programming language was developed by Grace Hopper. When Hopper\nwent to work on UNIVAC in 1949, she brought the idea of using compilers with\nher. Compilers harness the power of computers to make programming easier by\nallowing programmers to specify calculations by entering a formula using infix\nnotation ( e.g., Y = X * 2 + 5 * X + 9 ) for example. FORTRAN, the first widely\nused high-level language to have a functional implementation which permitted\nthe abstraction of reusable blocks of code, came out in 1957 and many other\nlanguages were soon developed that let the\n```\n\n# Variable X Input & Non-numerical X or Y\nThe X value can be of varying length/dimensions. For example, this is valid:\n```python\nX = (\n    (1, 2, 3),\n    (1, 2),\n    (1, 2, 3, 4),\n)\n# y can be of different data types\ny  = (\n    'y1',\n    2.0,\n    'foostring'\n)\n```\n\nAll data is converted to strings. This is conterintuitive and different than\nmost machine learning libraries, but helps with working with variable X/y data.\n\n# Examples\n\nNOTE: Accuracy is impacted by the typical test/train/split scenario.\n```bash\n% for i in test-data/*.test; do echo -en \"$i: \"; data_file=$(echo $i|sed 's/.test/.data/g'); hashedml classify $data_file $i ; done\n\ntest-data/abalone.test: accuracy: 34.22%\ntest-data/allhypo.test: accuracy: 88.42%\ntest-data/anneal.test: accuracy: 78.87%\ntest-data/arrhythmia.test: accuracy: 38.00%\ntest-data/breast-cancer.test: accuracy: 64.21%\ntest-data/bupa.test: accuracy: 55.26%\ntest-data/glass.test: accuracy: 33.80%\ntest-data/iris.test: accuracy: 95.83%\ntest-data/parkinsons_updrs.test: accuracy: 83.71%\ntest-data/soybean-large.test: accuracy: 44.12%\ntest-data/tic-tac-toe.test: accuracy: 82.13%\n```\n\n# Method Parameter Notes\n\n* `HashedML.predict(X, return_one=True)` -- Return a single highest rated item\n* `HashedML.predict(X, return_one=False)` -- Return a list of top 10 predictions\n* `HashedML(nback=4)` -- Used with `generate()` logic for tracking history of\n    generated items and what to feed next as X input.\n* `HashedML.generate(X, nwords=100)` -- Run generation 100 times\n* `HashedML.generate(X, stm=True)` -- Use short-term memory logic to try to keep\n    on topic.\n* `HashedML.generate(X, separator=' ')` -- Inspect generated items and make sure\n    it ends with this separator. An example would be if input text data\n    stripped out spaces (e.g. output could be `Hello,world.Nospaces` or with\n    separator specified: `Hello, world. No spaces`)\n\n# Scikit-learn Comparison\n\nHere is a test of various classifiers from scikit-learn, trained/tested against\nthe same datasets from the examples section:\n\n```\ntest-data/abalone.test:\n                  KNeighborsClassifier(n_neighbors=3) 50.72%\n                        SVC(C=0.025, kernel='linear') 51.22%\n                                    SVC(C=1, gamma=2) 51.59%\n                  DecisionTreeClassifier(max_depth=5) 54.76%\n   RandomForestClassifier(max_depth=5, max_features=1 53.24%\n               MLPClassifier(alpha=1, max_iter=10000) 52.31%\n                                         GaussianNB() 51.44%\n                                              AVERAGE 52.18%\ntest-data/allhypo.test:\n                  KNeighborsClassifier(n_neighbors=3) 93.68%\n                        SVC(C=0.025, kernel='linear') 93.46%\n                                    SVC(C=1, gamma=2) 91.53%\n                  DecisionTreeClassifier(max_depth=5) 98.61%\n   RandomForestClassifier(max_depth=5, max_features=1 91.85%\n               MLPClassifier(alpha=1, max_iter=10000) 96.78%\n                                         GaussianNB() 20.47%\n                                              AVERAGE 83.77%\ntest-data/anneal.test:\n                  KNeighborsClassifier(n_neighbors=3) 81.51%\n                        SVC(C=0.025, kernel='linear') 97.36%\n                                    SVC(C=1, gamma=2) 73.21%\n                  DecisionTreeClassifier(max_depth=5) 97.74%\n   RandomForestClassifier(max_depth=5, max_features=1 78.11%\n               MLPClassifier(alpha=1, max_iter=10000) 93.21%\n                                         GaussianNB() 67.17%\n                                              AVERAGE 84.04%\ntest-data/arrhythmia.test:\n                  KNeighborsClassifier(n_neighbors=3) 57.33%\n                        SVC(C=0.025, kernel='linear') 66.67%\n                                    SVC(C=1, gamma=2) 51.33%\n                  DecisionTreeClassifier(max_depth=5) 51.33%\n   RandomForestClassifier(max_depth=5, max_features=1 54.00%\n               MLPClassifier(alpha=1, max_iter=10000) 58.67%\n                                         GaussianNB() 17.33%\n                                              AVERAGE 50.95%\ntest-data/breast-cancer.test:\n                  KNeighborsClassifier(n_neighbors=3) 68.42%\n                        SVC(C=0.025, kernel='linear') 71.58%\n                                    SVC(C=1, gamma=2) 73.68%\n                  DecisionTreeClassifier(max_depth=5) 64.21%\n   RandomForestClassifier(max_depth=5, max_features=1 73.68%\n               MLPClassifier(alpha=1, max_iter=10000) 65.26%\n                                         GaussianNB() 75.79%\n                                              AVERAGE 70.38%\ntest-data/bupa.test:\n                  KNeighborsClassifier(n_neighbors=3) 63.16%\n                        SVC(C=0.025, kernel='linear') 64.91%\n                                    SVC(C=1, gamma=2) 52.63%\n                  DecisionTreeClassifier(max_depth=5) 61.40%\n   RandomForestClassifier(max_depth=5, max_features=1 59.65%\n               MLPClassifier(alpha=1, max_iter=10000) 66.67%\n                                         GaussianNB() 59.65%\n                                              AVERAGE 61.15%\ntest-data/glass.test:\n                  KNeighborsClassifier(n_neighbors=3) 61.97%\n                        SVC(C=0.025, kernel='linear') 36.62%\n                                    SVC(C=1, gamma=2) 54.93%\n                  DecisionTreeClassifier(max_depth=5) 66.20%\n   RandomForestClassifier(max_depth=5, max_features=1 64.79%\n               MLPClassifier(alpha=1, max_iter=10000) 25.35%\n                                         GaussianNB() 57.75%\n                                              AVERAGE 52.52%\ntest-data/iris.test:\n                  KNeighborsClassifier(n_neighbors=3) 95.83%\n                        SVC(C=0.025, kernel='linear') 95.83%\n                                    SVC(C=1, gamma=2) 93.75%\n                  DecisionTreeClassifier(max_depth=5) 95.83%\n   RandomForestClassifier(max_depth=5, max_features=1 95.83%\n               MLPClassifier(alpha=1, max_iter=10000) 95.83%\n                                         GaussianNB() 93.75%\n                                              AVERAGE 95.24%\ntest-data/parkinsons_updrs.test:\n                  KNeighborsClassifier(n_neighbors=3) 89.27%\n                        SVC(C=0.025, kernel='linear') 98.62%\n                                    SVC(C=1, gamma=2) 62.21%\n                  DecisionTreeClassifier(max_depth=5) 27.63%\n   RandomForestClassifier(max_depth=5, max_features=1 43.26%\n               MLPClassifier(alpha=1, max_iter=10000) 93.11%\n                                         GaussianNB() 95.35%\n                                              AVERAGE 72.78%\ntest-data/soybean-large.test:\n                  KNeighborsClassifier(n_neighbors=3) 82.35%\n                        SVC(C=0.025, kernel='linear') 71.57%\n                                    SVC(C=1, gamma=2) 18.63%\n                  DecisionTreeClassifier(max_depth=5) 73.53%\n   RandomForestClassifier(max_depth=5, max_features=1 75.49%\n               MLPClassifier(alpha=1, max_iter=10000) 62.75%\n                                         GaussianNB() 82.35%\n                                              AVERAGE 66.67%\ntest-data/tic-tac-toe.test:\n                  KNeighborsClassifier(n_neighbors=3) 83.07%\n                        SVC(C=0.025, kernel='linear') 70.53%\n                                    SVC(C=1, gamma=2) 70.53%\n                  DecisionTreeClassifier(max_depth=5) 90.91%\n   RandomForestClassifier(max_depth=5, max_features=1 76.49%\n               MLPClassifier(alpha=1, max_iter=10000) 84.33%\n                                         GaussianNB() 73.04%\n                                              AVERAGE 78.41%\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/hashedml",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mtingers/hashedml",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Matth Ingersoll",
    "maintainer_email": "matth@mtingers.com",
    "name": "hashedml",
    "package_url": "https://pypi.org/project/hashedml/",
    "platform": "",
    "project_url": "https://pypi.org/project/hashedml/",
    "project_urls": {
      "Download": "https://pypi.python.org/pypi/hashedml",
      "Homepage": "https://github.com/mtingers/hashedml"
    },
    "release_url": "https://pypi.org/project/hashedml/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Hash based machine learning",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9908586,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46d09b5ab928206d8c7a141f7e7aacc7ff14d8d3fced3150f1a85ae9c5ed9a50",
          "md5": "2fc80eb63ab76da1e81735dca2cfbe34",
          "sha256": "2adf2e2aabe975f3e9aeb077af5500b017659fa2aa77d9099eb3834abfa7cc06"
        },
        "downloads": -1,
        "filename": "hashedml-0.0.1-py3.8.egg",
        "has_sig": false,
        "md5_digest": "2fc80eb63ab76da1e81735dca2cfbe34",
        "packagetype": "bdist_egg",
        "python_version": "0.0.1",
        "requires_python": null,
        "size": 4892,
        "upload_time": "2021-03-28T22:09:02",
        "upload_time_iso_8601": "2021-03-28T22:09:02.315874Z",
        "url": "https://files.pythonhosted.org/packages/46/d0/9b5ab928206d8c7a141f7e7aacc7ff14d8d3fced3150f1a85ae9c5ed9a50/hashedml-0.0.1-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec98473231bde429c7a83b56ccf06e7d0df5d0c4f5b1e34e3d966542ab64bfe1",
          "md5": "39fabd7e5ea36f2180b24dbdb3adb20f",
          "sha256": "89111e536dc3247716ab10760ab9d0484756c778345d4ee22f09a30e375f054e"
        },
        "downloads": -1,
        "filename": "hashedml-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "39fabd7e5ea36f2180b24dbdb3adb20f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5660,
        "upload_time": "2021-03-28T22:09:03",
        "upload_time_iso_8601": "2021-03-28T22:09:03.749275Z",
        "url": "https://files.pythonhosted.org/packages/ec/98/473231bde429c7a83b56ccf06e7d0df5d0c4f5b1e34e3d966542ab64bfe1/hashedml-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "993b6a093342246e9ea2e17a5fb745ea1f887dbb2ad1389b6a1e512367363b32",
          "md5": "6135d72bce640a351160a73ef76839b1",
          "sha256": "1f8aec03d6447a10d7f5e1c465a3bbee00ce9292006a3027fb02a8e56f9cd5ba"
        },
        "downloads": -1,
        "filename": "hashedml-0.0.2-py3.8.egg",
        "has_sig": false,
        "md5_digest": "6135d72bce640a351160a73ef76839b1",
        "packagetype": "bdist_egg",
        "python_version": "0.0.2",
        "requires_python": null,
        "size": 5510,
        "upload_time": "2021-03-28T22:10:28",
        "upload_time_iso_8601": "2021-03-28T22:10:28.188813Z",
        "url": "https://files.pythonhosted.org/packages/99/3b/6a093342246e9ea2e17a5fb745ea1f887dbb2ad1389b6a1e512367363b32/hashedml-0.0.2-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "175c1d5de36591d4c8d04e2a913fd35152133ff37998a2920531ad36447a8289",
          "md5": "362220ab52ee7083f3c46de95374fdba",
          "sha256": "a9becffaaf79a2dd8211e00184ec82c66162efb38b2a1767c8c412de9d9bfcf6"
        },
        "downloads": -1,
        "filename": "hashedml-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "362220ab52ee7083f3c46de95374fdba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5654,
        "upload_time": "2021-03-28T22:10:29",
        "upload_time_iso_8601": "2021-03-28T22:10:29.352452Z",
        "url": "https://files.pythonhosted.org/packages/17/5c/1d5de36591d4c8d04e2a913fd35152133ff37998a2920531ad36447a8289/hashedml-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe598b72dc8931b43dcc186129c76eeae71e6221f74c21ecce006a0cc2ae727b",
          "md5": "38ecd813145224532bfc820f22001849",
          "sha256": "343b86659bf0f215196b106fd7ba27d048577a0def010fb35a98d406604f9735"
        },
        "downloads": -1,
        "filename": "hashedml-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "38ecd813145224532bfc820f22001849",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6005,
        "upload_time": "2021-03-28T22:32:58",
        "upload_time_iso_8601": "2021-03-28T22:32:58.841506Z",
        "url": "https://files.pythonhosted.org/packages/fe/59/8b72dc8931b43dcc186129c76eeae71e6221f74c21ecce006a0cc2ae727b/hashedml-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "998d8a6879aa7d2baf15f049fb06d340a0188e84610d44d48dfed140168950cb",
          "md5": "fa04cf1d9fccfee45efcedb5a6679f78",
          "sha256": "14ff5908f08896135a27d29b76368b3b98b9f8cf1f1de9212fe3d6a3cd2b49c4"
        },
        "downloads": -1,
        "filename": "hashedml-0.0.4-py3.8.egg",
        "has_sig": false,
        "md5_digest": "fa04cf1d9fccfee45efcedb5a6679f78",
        "packagetype": "bdist_egg",
        "python_version": "0.0.4",
        "requires_python": null,
        "size": 6919,
        "upload_time": "2021-03-29T01:42:50",
        "upload_time_iso_8601": "2021-03-29T01:42:50.132173Z",
        "url": "https://files.pythonhosted.org/packages/99/8d/8a6879aa7d2baf15f049fb06d340a0188e84610d44d48dfed140168950cb/hashedml-0.0.4-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73e0de988ef261f28ab90be79cdca7294433c64619e0a1da4d2d66a38da67c18",
          "md5": "c373915cfbebf23e73e8321795c5998e",
          "sha256": "20360d803c7161605ea39427aa12f0c3e09683c353d330011a8e1c8906ed6a02"
        },
        "downloads": -1,
        "filename": "hashedml-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c373915cfbebf23e73e8321795c5998e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8811,
        "upload_time": "2021-03-29T01:42:51",
        "upload_time_iso_8601": "2021-03-29T01:42:51.244229Z",
        "url": "https://files.pythonhosted.org/packages/73/e0/de988ef261f28ab90be79cdca7294433c64619e0a1da4d2d66a38da67c18/hashedml-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "998d8a6879aa7d2baf15f049fb06d340a0188e84610d44d48dfed140168950cb",
        "md5": "fa04cf1d9fccfee45efcedb5a6679f78",
        "sha256": "14ff5908f08896135a27d29b76368b3b98b9f8cf1f1de9212fe3d6a3cd2b49c4"
      },
      "downloads": -1,
      "filename": "hashedml-0.0.4-py3.8.egg",
      "has_sig": false,
      "md5_digest": "fa04cf1d9fccfee45efcedb5a6679f78",
      "packagetype": "bdist_egg",
      "python_version": "0.0.4",
      "requires_python": null,
      "size": 6919,
      "upload_time": "2021-03-29T01:42:50",
      "upload_time_iso_8601": "2021-03-29T01:42:50.132173Z",
      "url": "https://files.pythonhosted.org/packages/99/8d/8a6879aa7d2baf15f049fb06d340a0188e84610d44d48dfed140168950cb/hashedml-0.0.4-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73e0de988ef261f28ab90be79cdca7294433c64619e0a1da4d2d66a38da67c18",
        "md5": "c373915cfbebf23e73e8321795c5998e",
        "sha256": "20360d803c7161605ea39427aa12f0c3e09683c353d330011a8e1c8906ed6a02"
      },
      "downloads": -1,
      "filename": "hashedml-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c373915cfbebf23e73e8321795c5998e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8811,
      "upload_time": "2021-03-29T01:42:51",
      "upload_time_iso_8601": "2021-03-29T01:42:51.244229Z",
      "url": "https://files.pythonhosted.org/packages/73/e0/de988ef261f28ab90be79cdca7294433c64619e0a1da4d2d66a38da67c18/hashedml-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}