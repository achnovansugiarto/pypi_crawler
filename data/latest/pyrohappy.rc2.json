{
  "info": {
    "author": "MUTLCC",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyromod\nA monkeypatcher add-on for Pyrogram\n\n## Introduction\npyromod is a compilation of utils i developed for extend my personal use of Pyrogram. Then i started to use it and more bots and now i published it to make it easier to be installed in new projects.\nIt works *together* with pyrogram, this is *not* a fork nor modded version. It does monkey patching to add features to Pyrogram classes.\n\nIMPORTANT: you should have installed asyncio pyrogram.\n\n## Usage\nImport `pyromod` at least one time in your script, so you'll be able to use modified pyrogram in all files of the same proccess. Example:\n```python\n# config.py\nimport pyromod.listen\nfrom pyrogram import Client\n\napp = Client('my_session')\n```\n```python\n# any other .py\nfrom config import app\n# no need to import pyromod again, pyrogram is already monkeypatched globally (at the same proccess)\n```\n\nI separated the patches between packages to allow you to import only what you want. The `__init__.py` of each package does the monkeypatch automatically as soon as they are imported (except for `pyromod.helpers`, which provides classes and functions that should be explicitely imported).\n\n### `pyromod.listen`\nJust import it, it will automatically do the monkeypatch and you'll get these new methods:\n- `await pyrogram.Client.listen(chat_id, filters=None, timeout=30)`\nAwaits for a new message in the specified chat and returns it\nYou can pass Update Filters to the filters parameter just like you do for the update handlers. e.g. `filters=filters.photo & filters.bot`\n\n- `await pyrogram.Client.ask(text, chat_id, filters=None, timeout=30)`\nSame of `.listen()` above, but sends a message before awaiting\nYou can pass custom parameters to its send_message() call. Check the example below.\n\n- The bound methods `Chat.listen`, `User.listen`, `Chat.ask` and `User.ask`\n\nExample:\n```python\nfrom pyromod import listen # or import pyromod.listen\nfrom pyrogram import Client\nclient = Client(...)\n...\n    answer = await client.ask(chat_id, '*Send me your name:*', parse_mode='Markdown')\n    await client.send_message(chat_id, f'Your name is: {answer.text}')    \n```\n\n### `pyromod.filters`\nImport it and the following Update Filters will be monkeypatched to `pyrogram.filters`:\n\n- `filters.dice`\nA dice message.\n\n### `pyromod.nav`\nTools for creating navigation keyboards.\n\n- `pyromod.nav.Pagination`\nCreates a full pagination keyboard. Usage:\n```python\nfrom pyrogram import Client, filters\nfrom pyromod.nav import Pagination\nfrom pyromod.helpers import ikb\n\ndef page_data(page):\n    return f'view_page {page}'\ndef item_data(item, page):\n    return f'view_item {item} {page}'\ndef item_title(item, page):\n    return f'Item {item} of page {page}'\n\n@Client.on_message(filters.regex('/nav'))\nasync def on_nav(c,m):\n    objects = [*range(1,100)]\n    page = Pagination(\n        objects,\n        page_data=page_data, # callback to define the callback_data for page buttons in the bottom\n        item_data=item_data, # callback to define the callback_data for each item button\n        item_title=item_title # callback to define the text for each item button\n    )\n    index = 0 # in which page is it now?\n    lines = 5 # how many lines of the keyboard to include for the items\n    columns = how many columns include in each items' line\n    kb = page.create(index, lines, columns)\n    await m.reply('Test', reply_markup=ikb(kb))\n```\n\n### `pyromod.helpers`\nTools for creating inline keyboards a lot easier.\n\n- `pyromod.helpers.ikb`\nCreates a inline keyboard. It's first and only argument must be a list (the keyboard) containing lists (the lines) of buttons.\nThe buttons can also be lists or tuples. I use tuples to not have to deal with a lot of brackets.\nThe button syntax must be this: (TEXT, CALLBACK_DATA) or (TEXT, VALUE, TYPE), where TYPE can be 'url' or any other supported button type and VALUE is its value. This syntax will be converted to {\"text\": TEXT, TYPE: VALUE). If TYPE is CALLBACK_DATA, you can omit it, just like the fist syntax above.\nExamples:\n```python\nfrom pyromod.helpers import ikb\n...\nkeyboard = ikb([\n    [('Button 1', 'call_1'), ('Button 2', 'call_2')],\n    [('Another button', 't.me/pyromod', 'url')]\n])\nawait message.reply('Test', reply_markup=keyboard)\n```\n- `pyromod.helpers.array_chunk`\nChunk the elements of a list into small lists. i.e. [1, 2, 3, 4] can become [[1,2], [3,4]]. This is extremely useful if you want to build a keyboard dinamically with more than 1 column. You just put all buttons together in a list and run:\n```python\nlines = array_chunk(buttons, 2) # generate a list of lines with 2 buttons on each\nkeyboard = ikb(lines)\n```\n\n### Copyright & License\nThis project may include snippets of Pyrogram code\n- Pyrogram - Telegram MTProto API Client Library for Python. Copyright (C) 2017-2021 Dan <<https://github.com/delivrance>>\n\nLicensed under the terms of the [GNU Lesser General Public License v3 or later (LGPLv3+)](COPYING.lesser)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MUTLCC/pyrohappy",
    "keywords": "",
    "license": "LGPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyrohappy",
    "package_url": "https://pypi.org/project/pyrohappy/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyrohappy/",
    "project_urls": {
      "Homepage": "https://github.com/MUTLCC/pyrohappy"
    },
    "release_url": "https://pypi.org/project/pyrohappy/1.6/",
    "requires_dist": [
      "pyrogram"
    ],
    "requires_python": ">=3.6",
    "summary": "A monkeypatcher add-on for Pyrogram",
    "version": "1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12657108,
  "releases": {
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02f3162ccf8b233004b5cac474a386742819f5080cd0a6177d69376fad9c9eb6",
          "md5": "974191dd3f94b7dddd6728be619f233d",
          "sha256": "0443a99b0246ba0dbffce109f0d701003d38ddc415be16b8d917b2e8e0e7dbc9"
        },
        "downloads": -1,
        "filename": "pyrohappy-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "974191dd3f94b7dddd6728be619f233d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28611,
        "upload_time": "2022-01-22T23:45:18",
        "upload_time_iso_8601": "2022-01-22T23:45:18.392171Z",
        "url": "https://files.pythonhosted.org/packages/02/f3/162ccf8b233004b5cac474a386742819f5080cd0a6177d69376fad9c9eb6/pyrohappy-1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de9d0c0b6486c7fe220f2827bcefea0477e8196e79bca26dc81ca666c87a8d79",
          "md5": "cb73362530ce8d8952a794937584cf23",
          "sha256": "9ee184e90eaa407a56c86a49d483a917e8d3cd8137e4a773b40aed5586c41272"
        },
        "downloads": -1,
        "filename": "pyrohappy-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cb73362530ce8d8952a794937584cf23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21829,
        "upload_time": "2022-01-22T23:45:19",
        "upload_time_iso_8601": "2022-01-22T23:45:19.736665Z",
        "url": "https://files.pythonhosted.org/packages/de/9d/0c0b6486c7fe220f2827bcefea0477e8196e79bca26dc81ca666c87a8d79/pyrohappy-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21cb1391c1bc6974b64e57300d46cf4c20c669a5be36edf6403907e71f5588d4",
          "md5": "86fdf4da98b9f8fb10dd1147e7beb183",
          "sha256": "0fbc20d343091431849b1872e6778465c5d11d38ff86e01d45043f2d0d47fd49"
        },
        "downloads": -1,
        "filename": "pyrohappy-1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86fdf4da98b9f8fb10dd1147e7beb183",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28627,
        "upload_time": "2022-01-23T03:29:37",
        "upload_time_iso_8601": "2022-01-23T03:29:37.757015Z",
        "url": "https://files.pythonhosted.org/packages/21/cb/1391c1bc6974b64e57300d46cf4c20c669a5be36edf6403907e71f5588d4/pyrohappy-1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "456a4709635520ff13c259226bbc8bbd1f0eec22004c7aecf6f976da5cfd72b2",
          "md5": "73cc38a6a813d57b1410f39897b23356",
          "sha256": "73ccb46ba029d35b5ada1a7877a7ade232cbedc80935bae5f801d0d8e8c252ee"
        },
        "downloads": -1,
        "filename": "pyrohappy-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "73cc38a6a813d57b1410f39897b23356",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21833,
        "upload_time": "2022-01-23T03:29:39",
        "upload_time_iso_8601": "2022-01-23T03:29:39.127942Z",
        "url": "https://files.pythonhosted.org/packages/45/6a/4709635520ff13c259226bbc8bbd1f0eec22004c7aecf6f976da5cfd72b2/pyrohappy-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21cb1391c1bc6974b64e57300d46cf4c20c669a5be36edf6403907e71f5588d4",
        "md5": "86fdf4da98b9f8fb10dd1147e7beb183",
        "sha256": "0fbc20d343091431849b1872e6778465c5d11d38ff86e01d45043f2d0d47fd49"
      },
      "downloads": -1,
      "filename": "pyrohappy-1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "86fdf4da98b9f8fb10dd1147e7beb183",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28627,
      "upload_time": "2022-01-23T03:29:37",
      "upload_time_iso_8601": "2022-01-23T03:29:37.757015Z",
      "url": "https://files.pythonhosted.org/packages/21/cb/1391c1bc6974b64e57300d46cf4c20c669a5be36edf6403907e71f5588d4/pyrohappy-1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "456a4709635520ff13c259226bbc8bbd1f0eec22004c7aecf6f976da5cfd72b2",
        "md5": "73cc38a6a813d57b1410f39897b23356",
        "sha256": "73ccb46ba029d35b5ada1a7877a7ade232cbedc80935bae5f801d0d8e8c252ee"
      },
      "downloads": -1,
      "filename": "pyrohappy-1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "73cc38a6a813d57b1410f39897b23356",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21833,
      "upload_time": "2022-01-23T03:29:39",
      "upload_time_iso_8601": "2022-01-23T03:29:39.127942Z",
      "url": "https://files.pythonhosted.org/packages/45/6a/4709635520ff13c259226bbc8bbd1f0eec22004c7aecf6f976da5cfd72b2/pyrohappy-1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}