{
  "info": {
    "author": "",
    "author_email": "Loryn Isaacs <50170623+engisalor@users.noreply.github.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# Sketch Grammar Explorer\n\n[![PyPI Latest Release](https://img.shields.io/pypi/v/sgex.svg)](https://pypi.org/project/sgex/)\n[![PyPI - Python Versions](https://img.shields.io/pypi/pyversions/sgex)](https://pypi.org/project/sgex)\n[![Package Status](https://img.shields.io/pypi/status/sgex.svg)](https://pypi.org/project/sgex/)\n[![License](https://img.shields.io/pypi/l/sgex.svg)](https://github.com/pandas-dev/sgex/blob/main/LICENSE)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6812334.svg)](https://doi.org/10.5281/zenodo.6812334)\n\n- [Sketch Grammar Explorer](#sketch-grammar-explorer)\n  - [Introduction](#introduction)\n  - [Setup](#setup)\n  - [TL;DR](#tldr)\n  - [Quickstart](#quickstart)\n    - [1. Setting a configuration dictionary](#1-setting-a-configuration-dictionary)\n    - [2. Making a `corp_info` API call](#2-making-a-corp_info-api-call)\n    - [3. Parsing results to a DataFrame](#3-parsing-results-to-a-dataframe)\n  - [Package structure](#package-structure)\n    - [Configuration: `sgex.config`](#configuration-sgexconfig)\n    - [Exporting content: `sgex.io`](#exporting-content-sgexio)\n    - [Creating call objects: `sgex.<CallType>`](#creating-call-objects-sgexcalltype)\n    - [Assembling CQL rules: `sgex.simple_query`](#assembling-cql-rules-sgexsimple_query)\n    - [Managing calls: `sgex.call`](#managing-calls-sgexcall)\n    - [Packaging and sending calls: `sgex.Package`](#packaging-and-sending-calls-sgexpackage)\n    - [Workflow examples](#workflow-examples)\n      - [Running complex tasks: `sgex.call.job`](#running-complex-tasks-sgexcalljob)\n      - [Parsing data: `sgex.parse`](#parsing-data-sgexparse)\n  - [API usage notes](#api-usage-notes)\n  - [Security](#security)\n    - [API credentials](#api-credentials)\n    - [Data storage](#data-storage)\n  - [About](#about)\n  - [Citation](#citation)\n\n## Introduction\n\nSketch Grammar Explorer (SGEX) is a Python package for using the [Sketch Engine](https://www.sketchengine.eu/) API. Sketch Engine is a language corpus management software useful for many types of linguistic research. The goal of SGEX is to develop a flexible scaffold for any kind of programmatic work with Sketch Engine and [NoSketch Engine](https://nlp.fi.muni.cz/trac/noske).\n\n**NOTE**\n\nSGEX `0.6.0+` is a complete redesign of the package and its previous functions may become deprecated. `0.5.5` is the last version before the switch. Its documentation has [moved](https://github.com/engisalor/sketch-grammar-explorer/blob/main/README_deprecated.md) and import paths have changed.\n\n## Setup\n\nClone SGEX or install it with `pip install sgex`\n\nDependencies:\n- required: `pandas pyyaml requests requests-cache`\n- optional: `keyring openpyxl defusedxml`\n\n## TL;DR\n\nAn abbreviated example of SGEX usage.\n\n```python\nimport sgex\n\n# add API credentials to the server configuration\nconfig = {\"ske\": {**sgex.config.default[\"ske\"], **{\"username\": \"J. Doe\", \"api_key\": \"1234\"}}}\n\n# define API calls\ncalls = [\n    # the first freqs call is complete (has all the needed parameters)\n    sgex.Freqs({\n        \"format\": \"csv\",\n        \"q\": 'alemma,\"eat\"',\n        \"corpname\": \"preloaded/susanne\",\n        \"fcrit\": \"doc.file 0\",\n        }),\n    # successive freqs calls will reuse previous parameters\n    sgex.Freqs({\"q\": 'alemma,\"sleep\"'})]\n\n# package calls\npackage = sgex.Package(calls, \"ske\", config)\n\n# send requests\npackage.send_requests()\n\n# access response data\nprint(package.responses[0].text)\n\"corpus\",\"preloaded/susanne\"\n\"subcorpus\",\"-\"\n\"concordance size\",\"8\"\n\"query\",\"Query:\"\"eat\"\"\"\n\"File name\", \"Frequency\", \"Relative density\", \"Freq. per million\", \"Relative in text types\"\n\"N01\",3, 2245.61107, 19.94336, 1194.26752\n\"J17\",1, 812.23542, 6.64779, 431.96544\n\"N08\",1, 820.02835, 6.64779, 436.10990\n...\n```\n\n## Quickstart\n\nThe following code shows in detail all the steps needed for a sample workflow:\n\n1. Setting a configuration dictionary\n2. Making a `corp_info` API call\n3. Parsing the result into a pandas DataFrame\n\nThis requires [getting a Sketch Engine API key](https://www.sketchengine.eu/documentation/api-documentation/#toggle-id-1).\n\nAfter trying out this basic example, see other sections on more advanced usage.\n\n### 1. Setting a configuration dictionary\n\nThere are several ways to supply configuration settings to SGEX. This example modifies the default settings to show what each element means.\n\n```python\nimport sgex\n\n# print default configuration settings\nprint(sgex.config.default)\n# this dictionary contains server information\n{\n  # a local NoSketch Engine server\n  'noske': {\n    # URL\n    'host': 'http://localhost:10070/bonito/run.cgi',\n    # enable asynchronous calling\n    'asynchronous': True},\n  # Sketch Engine's server\n  'ske': {\n    # credentials\n    'username': '<user>',\n    'api_key': '<key>',\n    # URL\n    'host': 'https://api.sketchengine.eu/bonito/run.cgi',\n    # settings for throttling requests\n    'wait': {\n      '0': 1, # wait 0 seconds for 1 call\n      '2': 99, # wait 2 seconds for 2-99 calls\n      '5': 899, # wait 5 seconds for 100-899 calls\n      '45': None}}} # wait 45 seconds for 900+ calls\n\n# add your API credentials for making calls to the \"ske\" server\nconfig = sgex.config.default\nconfig[\"ske\"][\"username\"] = \"J. Doe\"\nconfig[\"ske\"][\"api_key\"] = \"1234\"\n```\n\n### 2. Making a `corp_info` API call\n\nEach type of API call has its own Python class (e.g., `CorpInfo`), which is a child of the generic `Call` class. To make API calls, start by creating `Call` objects.\n\nCalls are added to a `Package` class, which prepares requests and manages their execution. A `Package` can be inspected to make sure everything looks good before sending calls. Packages also expose other settings for more advanced usage.\n\nAPI data gets cached locally after successful requests. Running the same request again retrieves data from the cache instead of making an API call. Cache `session` settings are customizable: see the [requests-cache](https://requests-cache.readthedocs.io/) package for details.\n\n```python\nimport sgex\n\n# indicate which server to use\nserver = \"ske\"\n\n# define a call\ncall = sgex.CorpInfo({\"corpname\": \"preloaded/susanne\"})\n\n# package the call\npackage = sgex.Package(call, server, config)\n\n# inspect the package details\nprint(package.calls)\n[CORP_INFO(2a8c0b24) {'api_key': '1234', 'username': 'J. Doe', 'corpname': 'preloaded/susanne'}]\n\nprint(package.calls[0].request)\n<Request [GET]>\n\n# send the request\npackage.send_requests()\n```\n\n### 3. Parsing results to a DataFrame\n\nThe `sgex.parse` subpackage has modules for processing results based on call type and format. As Sketch Engine has many purposes, `parse` is only meant to offer examples of how to manipulate its data.\n\nThe example below takes `corp_info` JSON content and converts it into a DataFrame.\n\n```python\nimport sgex\n\n# get the call response\nresponse = package.responses[0]\n\n# inspect the response\nprint(response.url)\n'https://api.sketchengine.eu/bonito/run.cgi/corp_info?corpname=preloaded/susanne'\n\nprint(response.json())\n{'wposlist': [['adjective', 'JJ.*'], ['adverb', 'RR.*'], ['conjuction', 'CC.*'], ['determiner', 'AT.*'], ... }\n\n# parse the response\nsgex.parse.corp_info.sizes_json(response)\n  structure    size\n0     token  150426\n1      word  128998\n2       doc     149\n...\n```\n\n## Package structure\n\n### Configuration: `sgex.config`\n\nConfiguration dictionaries can be passed to SGEX in several formats with the `config.load` convenience function. It can parse these sources:\n\n- a JSON/YAML file (``config.yml``)\n- a JSON-formatted environment variable string (``SGEX_CONFIG_JSON``)\n- a JSON-formatted string (``\"{<JSON content>}\"``)\n\n```python\n# example use of environment variables to load configuration\nimport json\nimport os\nfrom sgex.config import load, default\n\n# make a config dict with credentials\nconfig = {\"ske\": {**default[\"ske\"], **{\"username\": \"J. Doe\", \"api_key\": \"1234\"}}}\n\n# add the environment variable (for testing purposes)\nos.environ[\"SGEX_CONFIG_JSON\"] = json.dumps(config)\n\n# load config from the environment\nprint(load(\"SGEX_CONFIG_JSON\"))\n{'ske': {'api_key': '1234', 'host': 'https://api.sketchengine.eu/bonito/run.cgi', 'username': 'J. Doe', 'wait': {'0': 1, '2': 99, '5': 899, '45': None}}}\n```\n\n### Exporting content: `sgex.io`\n\nThese are functions to load and save data. The easiest way to export data from `Response` objects is to use the `sgex.io.export_content` function. If an error is raised when trying to export data, check ``response.content`` for any internal SkE errors and try making the same API call with ``\"format\": \"json\"``.\n\n```python\nfrom sgex.io import export_content\n\n# get response from package\nresponse = package.responses[0]\n\n# export it\nexport_content(response, \"my-filename\")\n```\n\n### Creating call objects: `sgex.<CallType>`\n\nEach API call type has its own class, which is a child of the `Call` base class. `Call` contains a basic validation function to make sure improperly created calls are identified before requests get sent.\n\nEach call type consists of `type`, `parameters`, and `required parameters`. The example below shows the required parameters for several call types.\n\n```python\nimport sgex\n\nprint(sgex.Freqs({}).required)\n{'fcrit', 'q', 'corpname'}\n\nprint(sgex.Wordlist({}).required)\n{'wltype', 'wlattr', 'corpname'}\n\nprint(sgex.View({}).required)\n{'q', 'corpname'}\n```\n\n**Generating large call lists**\n\nCall classes can be used to generate many calls. The example below makes several `freqs` calls using list iteration. While this is convenient, to help reduce network traffic be watchful for when multiple calls could be combined.\n\n```python\nimport sgex\n\n# define queries\nqueries = [\"apple\", \"banana\", \"peach\", \"strawberry\", \"blueberry\"]\n\n# make call list using iteration\ncalls = [\n  sgex.Freqs({\n    \"q\": f'alemma,\"{q}\"',\n    \"corpname\": \"<my corpus>\",\n    \"fcrit\": \"doc.id 0\",\n    }) for q in queries]\n\n# print results\nprint(calls)\n[FREQS(*) {'q': 'alemma,\"apple\"', 'corpname': '<my corpus>', 'fcrit': 'doc.id 0'},\nFREQS(*) {'q': 'alemma,\"banana\"', 'corpname': '<my corpus>', 'fcrit': 'doc.id 0'},\n...\n\n# the missing key in FREQS(<key>) isn't computed until calls get packaged\n```\n\n### Assembling CQL rules: `sgex.simple_query`\n\nSome functions are included for simplifying the generation of [Corpus Query Language](https://www.sketchengine.eu/documentation/corpus-querying/) rules. `simple_query()` simulates the \"Simple\" feature in Sketch Engine: words or phrases can be supplied and their CQL representation is returned. A few wildcards also make rules more flexible, although behavior may not always match Sketch Engine's user interface.\n\n- Question marks `?` for any single character\n- Asterisks `*` for any token or string of characters\n- Double hyphens `--` for flexible hyphenation (w/ hyphen, w/o hyphen, a single word)\n\n```python\nimport sgex\n\n# example with hyphen\nprint(sgex.simple_query(\"flour-based recipe\"))\n'q( [lc=\"flour-based\" | lemma_lc=\"flour-based\"] | [lc=\"flour\" | lemma_lc=\"flour\"] [lc=\"-\" | lemma_lc=\"-\"] [lc=\"based\" | lemma_lc=\"based\"] )[lc=\"recipe\" | lemma_lc=\"recipe\"]'\n\n# example with double hyphen and asterisk token\nprint(sgex.simple_query(\"flour--based *\"))\n'q( [lc=\"flourbased\" | lemma_lc=\"flourbased\"] | [lc=\"flour\" | lemma_lc=\"flour\"] [lc=\"based\" | lemma_lc=\"based\"] | [lc=\"flour-based\" | lemma_lc=\"flour-based\"] | [lc=\"flour\" | lemma_lc=\"flour\"] [lc=\"-\" | lemma_lc=\"-\"] [lc=\"based\" | lemma_lc=\"based\"] )[lc=\".*\" | lemma_lc=\".*\"]'\n```\n\n### Managing calls: `sgex.call`\n\n`sgex.call` has everything needed for managing calls, although accessing it isn't generally necessary, since `Package` initialization handles the below features.\n\n**Recycling parameters**\n\n`propagate()`, recycles parameters across calls of the same type. Call parameters are reused unless defined explicitly in subsequent calls. Only the first call (of the same type) is complete, and the proceeding calls only contain new parameters to define. Parameter recycling stops if a different call type appears; write out a complete set of parameters again if needed.\n\n```python\ncalls = [\n    # the first call in a list always needs to be complete\n    sgex.Freqs({\n        \"format\": \"csv\",\n        \"q\": 'alemma,\"rock\"',\n        \"corpname\": \"preloaded/susanne\",\n        \"fcrit\": \"doc.file 0\",\n        }),\n    # the next two freqs calls will recycle previous parameters\n    sgex.Freqs({\"q\": 'alemma,\"stone\"'}),\n    sgex.Freqs({\"q\": 'alemma,\"pebble\"'}),\n    sgex.Wordlist({\"corpname\": \"preloaded/susanne\"}),\n    # this freqs call will be incomplete!\n    sgex.Freqs({\"q\": 'alemma,\"sand\"'})]\n```\n\n**Normalizing Call dictionaries**\n\n`normalize_dt` standardizes API call formatting. This helps avoid making duplicate calls when parameters are functionally equivalent. It's most apparent with parameters that take lists. These two `fcrit` values return the same results regardless of list order.\n\n- `{\"fcrit\": [\"doc.genre 0\", \"doc.editor 0\", \"doc.year 0\"]}`\n- `{\"fcrit\": [\"doc.editor 0\", \"doc.year 0\", \"doc.genre 0\"]}`\n\nNormalization is limited, however, so it's best to follow consistent formatting when making calls. The two queries below are the same but the extra space doesn't get normalized (yet).\n\n- `{\"q\": 'alemma,\"stone\"'}`\n- `{\"q\": 'alemma, \"stone\"'}`\n\n**Cached content key creation**\n\nTo manage caching with `requests-cache`, sorted dictionaries that include the call type and normalized call parameters get passed to a custom hashing function (`create_custom_key`). The keys assigned to calls can be accessed as shown below. Keys correspond to cache filenames, table rows, etc., depending on the backend.\n\n```python\n# show part of key for each call\nprint(package.calls)\n[FREQS(79f8510c) {'format': 'csv', 'q': 'alemma,\"rock\"', 'corpname': 'preloaded/susanne', 'fcrit': 'doc.file 0'}, FREQS(011b9079) {'q': 'alemma,\"stone\"', 'fcrit': 'doc.file 0', 'format': 'csv', 'corpname': 'preloaded/susanne'}, ...]\n\n# show full key for one call\nprint(package.calls[0].key)\n'79f8510cc16b10bb'\n```\n\n### Packaging and sending calls: `sgex.Package`\n\n`Package` is how making and executing API calls is managed.\n\n**Methods for sending calls**\n\n- `Package.send_requests()` executes a list of calls sequentially, following throttling instructions in `config[\"<server>\"][\"<wait>\"]` if provided\n- `Package.send_async_requests()` executes a list of calls asynchronously if `config[\"<server>\"][\"asynchronous\"] = True`\n\nBoth methods have some error handling to prevent repeating calls if something is misconfigured, but still test large jobs beforehand to avoid issues.\n\n**Server wait times**\n\nServers may require waiting between calls. SGEX manages waiting for the Sketch Engine server following their [Fair Use Policy](https://www.sketchengine.eu/fair-use-policy/) guidelines. If a custom server requires waiting, this can be enabled by adding a `wait` entry in the configuration, like below:\n\n```yml\nske:           # server name\n  wait:        # wait dictionary\n  \"0\": 1       # 0s for 1 call\n  \"5\": 100     # 5s for 2-99 calls\n  \"10\": null   # 10s for 100+ calls\n```\n\nCall throttling is implemented as a `Request.response` hook, meaning that waiting is only applied for calls that haven't been cached yet.\n\n**Asynchronous calling**\n\nFor local servers, asynchronous calling can increase performance substantially. By default, the number of threads adjusts according to the number of CPUs available (see `max_workers` for [concurrent.futures](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor)).\n\n**Customizing Package settings**\n\nThe `requests-cache` session can be modified to use different backends (Redis, SQLite, filesystem, etc.), as well as other features. This is an example of Package attributes:\n\n```python\nPackage.calls: list  # list of calls\nPackage.server: str  # server to call\nPackage.halt: bool   # whether to stop a job on error\nPackage.errors: set  # errors encountered\nPackage.loglevel: str  # logging level\nPackage.max_workers: int  # threads for asynchronous calls\nPackage.responses: list  # call responses\nPackage.max_responses: int  # max items to store in `Package.responses` (for large jobs)\nPackage.session_params: dict(  # parameters for the `request-cache` session\n    cache_name=\"data\",\n    serializer=\"json\",\n    backend=\"filesystem\",\n    ignored_parameters=credential_parameters,\n    key_fn=call.create_custom_key,\n)\nPackage.config: dict  # server configuration\nPackage.session: requests_cache.CachedSession  # session object\n```\n\nSettings can be changed by adding additional `kwargs` during instantiation. Print `package.__dict__` before making calls to see all options at once.\n\n**Clearing the cache**\n\nThe `session` attribute for a `Package` can be used to perform any tasks on the cache, e.g., clearing the cache: `Package.session.cache.clear()`. This may be more convenient than importing a session independently via `requests-cache`.\n\n### Workflow examples\n\nThe features described so far offer the building blocks for all sorts of linguistic analyses with Sketch Engine. In contrast, these examples are for reference purposes. They may inform your workflow and be useful for specific needs, but they aren't a one-size-fits-all solution. **Modules here may change without warning**.\n\n#### Running complex tasks: `sgex.call.job`\n\nThese classes combine multiple API calls, parsing methods, etc., to execute larger jobs with a single command.\n\n**Text type analysis**\n\n`TTypeAnalysis` automates the steps for generating a DataFrame describing the corpus's composition.\n\n```python\nfrom sgex.call import TTypeAnalysis\n\n# prepare the job\nttypes = TTypeAnalysis(\"susanne\", <server>, <config>)\n\n# run the job\nttypes.run()\n\n# view the results\nprint(ttypes.df.head(3))\n    str  frq  relfreq  attribute\n0  ital  263  1748.37  font.type\n1  bold   38   252.62  font.type\n2   maj  182  1209.90  head.type\n```\n\n**Simple frequency query**\n\n`SimpleFreqsQuery` automates making a `freqs` call with Simple Query syntax and processing JSON data into a DataFrame.\n\n```python\nfrom sgex.call import SimpleFreqsQuery\n\n# prepare the job\nquery = SimpleFreqsQuery(\"sleep\", \"susanne\", \"noske\", \".config.yml\")\n\n# run the job\nquery.run()\n\n# view the results (each row is a corpus attribute/text type)\nprint(query.df.head(3))\n   frq         rel        reltt  ...  total_fpm total_size fmaxitems\n0   24     0.00000     0.000000  ...     159.55         24       500\n1   24     0.00000     0.000000  ...     159.55         24       500\n2    9  2245.61107  3582.802548  ...     159.55         24       500\n\n[3 rows x 12 columns]\n```\n\n#### Parsing data: `sgex.parse`\n\n`parse` contains techniques for parsing each API call type. These functions generally apply to JSON responses, as this format offers the most detailed content to build data sets with. Since many types of queries are possible in Sketch Engine, `parse` just includes a few use cases.\n\n```python\n# docstring for a parsing function\ndef freqs_json(response: Response) -> pd.DataFrame:\n    Converts a single-/multi-block freqs JSON response to a DataFrame.\n\n    Args:\n        response: Response object.\n\n    Example:\n        >>> call = Freqs({\n            \"corpname\": \"susanne\",\n            \"q\": 'alemma,\"day\"',\n            \"fcrit\": \"doc.file 0\"\n            })\n        >>> p = Package(call, \"noske\", default)\n        >>> p.send_requests()\n        >>> df = freqs.freqs_json(p.responses[0])\n        >>> df.iloc[0]\n        frq                     8\n        rel              426.2205\n        reltt         3286.770748\n        ...\n```\n\n## API usage notes\n\n**Sketch Engine vs NoSketch Engine**\n\nThese versions of the software [behave differently](https://www.sketchengine.eu/nosketch-engine/), so make sure data are comparable if using both for an analysis. A convenient way to implement NoSketch Engine is with this [NoSketch Engine Docker project](https://github.com/ELTE-DH/NoSketch-Engine-Docker).\n\n**Available formats**\n\nAPI responses have JSON content by default. Other formats can be downloaded by adding `\"format\": \"<format>\"` to `Call` parameters (`[\"json\", \"xml\", \"xlsx\", \"csv\", \"txt\"]`). Call types (`freqs`, `view`, etc.) are only compatible with certain formats, depending on the shape of the data. Only JSON is universally available.\n\n**Too many requests**\n\nSketch Engine blocks API activity outside of their FUP. While learning the API, test calls selectively, slowly, and avoid repeated identical calls.\n\n**API behavior**\n\nTo learn more about the API, it's helpful to inspect network activity while using the Sketch Engine interface. Importantly, some internal API methods exist that won't work if copy-pasted into SGEX calls.\n\n**Double-checking accuracy**\n\nBefore relying heavily on the API, it's a good idea to practice trying the same queries both in a web browser and via API to make sure the results are identical.\n\n## Security\n\nSome considerations for using SGEX.\n\n### API credentials\n\nResponse data can include credentials in several locations and should be removed before storing or sharing. SGEX mitigates the exposure of credentials in saved data by 1) instructing `requests-cache` to strip credentials from URLs and 2) executing a custom hook to redact JSON response data before it gets cached.\n\n### Data storage\n\nData can be stored more securely by using a custom serializer with `requests-cache`, as in the example below, which encrypts/decrypts data. When storing unencrypted `pickle` data, they recommend using the [safe_pickle_serializer](https://requests-cache.readthedocs.io/en/stable/user_guide/security.html).\n\n```python\nfrom requests_cache import SerializerPipeline, Stage, pickle_serializer\nfrom cryptography.fernet import Fernet\n\n# make a key (store this safely once generated)\nkey = Fernet.generate_key()\nf = Fernet(key)\n\n# define the serializer\nencrypt_pickle_serializer = SerializerPipeline(\n    [pickle_serializer, Stage(dumps=f.encrypt, loads=f.decrypt)], is_binary=True)\n\n# add the serializer to the session\nsession_params = dict(\n    serializer=encrypt_pickle_serializer,\n    <other session parameters>)\n\n# make calls and test the encryption of cache data\np = Package(<calls>, <server>, session_params=session_params)\np.send_requests()\n```\n\n## About\n\nSGEX has been developed to meet research needs at the University of Granada (Spain) Translation and Interpreting Department. See the [LexiCon research group](http://lexicon.ugr.es/) for related projects.\n\nThe name refers to sketch grammars, which are series of generalized corpus queries in Sketch Engine (see their [bibliography](https://www.sketchengine.eu/bibliography-of-sketch-engine/)).\n\nQuestions, suggestions, and support are welcome.\n\n## Citation\n\nIf you use SGEX, please [cite it](https://zenodo.org/record/6812334).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "sketch engine,api wrapper,corpus linguistics,text analysis,natural language processing",
    "license": "BSD 3-Clause License  Copyright (c) 2022, Loryn Isaacs All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sgex",
    "package_url": "https://pypi.org/project/sgex/",
    "platform": null,
    "project_url": "https://pypi.org/project/sgex/",
    "project_urls": {
      "repository": "https://github.com/engisalor/sketch-grammar-explorer.git"
    },
    "release_url": "https://pypi.org/project/sgex/0.6.2/",
    "requires_dist": [
      "pandas",
      "pyyaml",
      "requests",
      "requests-cache",
      "openpyxl ; extra == 'export'",
      "defusedxml ; extra == 'export'",
      "keyring ; extra == 'security'"
    ],
    "requires_python": ">=3.8",
    "summary": "Sketch Grammar Explorer (Sketch Engine API wrapper)",
    "version": "0.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17114238,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d03b8cf4653e8b6738aa827a39d4e1ff94ae78b8319d0b140c9608804a372835",
          "md5": "c0b4271f41258325a101717003dde396",
          "sha256": "80997d06583466928cb65ea3f1fec023ab8506c7f8303e3b19b013cfd5450e1b"
        },
        "downloads": -1,
        "filename": "sgex-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0b4271f41258325a101717003dde396",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15271,
        "upload_time": "2022-02-06T12:01:02",
        "upload_time_iso_8601": "2022-02-06T12:01:02.587617Z",
        "url": "https://files.pythonhosted.org/packages/d0/3b/8cf4653e8b6738aa827a39d4e1ff94ae78b8319d0b140c9608804a372835/sgex-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85f9202c42b1ea23831177263576de56c0cdd26e1345ba2d35a340976d9b755a",
          "md5": "5286f4698af4353b3ade3e22f526e262",
          "sha256": "9f87f41731658b9adb4c51941716fc181eb3799ee6fb0d4f0bf7d80ce4a4ad0f"
        },
        "downloads": -1,
        "filename": "sgex-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5286f4698af4353b3ade3e22f526e262",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16946,
        "upload_time": "2022-02-06T12:01:04",
        "upload_time_iso_8601": "2022-02-06T12:01:04.405893Z",
        "url": "https://files.pythonhosted.org/packages/85/f9/202c42b1ea23831177263576de56c0cdd26e1345ba2d35a340976d9b755a/sgex-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1d595d6eea6d6fdf675268b5279376c433fed7c0447d81f1e3d46cc249a20b9",
          "md5": "dc8dd98e7478fb9ca826a7def074d6b1",
          "sha256": "fb9d1a20ce0e08f893df7b357240b86b378e7498f59f9e5b58c12f1fa78c5025"
        },
        "downloads": -1,
        "filename": "sgex-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc8dd98e7478fb9ca826a7def074d6b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15742,
        "upload_time": "2022-02-27T14:24:37",
        "upload_time_iso_8601": "2022-02-27T14:24:37.200400Z",
        "url": "https://files.pythonhosted.org/packages/b1/d5/95d6eea6d6fdf675268b5279376c433fed7c0447d81f1e3d46cc249a20b9/sgex-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4b3b04dbd4cf51962bd8b48e5bd2cfe336cb7095226398d331c20b83a62a035",
          "md5": "94071753c597c0321f47bd6d02b97823",
          "sha256": "7017608209c166cacc53510dd705d234533e422c015db209b9667882ca854033"
        },
        "downloads": -1,
        "filename": "sgex-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "94071753c597c0321f47bd6d02b97823",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17315,
        "upload_time": "2022-02-27T14:24:38",
        "upload_time_iso_8601": "2022-02-27T14:24:38.985690Z",
        "url": "https://files.pythonhosted.org/packages/a4/b3/b04dbd4cf51962bd8b48e5bd2cfe336cb7095226398d331c20b83a62a035/sgex-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5a1d336c891d122a27bec58761e2da4ba006b60179eb20bd931ae39fd65d21d",
          "md5": "069b904f54a03fd2c3fe74bf9ba7d19e",
          "sha256": "1bf87a6c56af38edf280f0cf69cef7aac14cf93f18d771c61905f51e76096929"
        },
        "downloads": -1,
        "filename": "sgex-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "069b904f54a03fd2c3fe74bf9ba7d19e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13686,
        "upload_time": "2022-05-28T16:54:35",
        "upload_time_iso_8601": "2022-05-28T16:54:35.692434Z",
        "url": "https://files.pythonhosted.org/packages/d5/a1/d336c891d122a27bec58761e2da4ba006b60179eb20bd931ae39fd65d21d/sgex-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "628962df568cdaa04749561c77552fafea75419845249aa1009c08b74cf7560c",
          "md5": "a166f7915b848c39666efa296f6d9c74",
          "sha256": "948944a476a5062f5f4c88c9f67b59f82d25aceb9e050b239ac51c40caa5d408"
        },
        "downloads": -1,
        "filename": "sgex-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a166f7915b848c39666efa296f6d9c74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16619,
        "upload_time": "2022-05-28T16:54:37",
        "upload_time_iso_8601": "2022-05-28T16:54:37.893234Z",
        "url": "https://files.pythonhosted.org/packages/62/89/62df568cdaa04749561c77552fafea75419845249aa1009c08b74cf7560c/sgex-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5231322f3a9339ba3300d051a5ff852f3023a1098dfee4e1e914b0a6b3287970",
          "md5": "b530a855fcf91abf55f6f3d124239d40",
          "sha256": "c8bd4ed7c21fb82daf68858ae07f4d67a105ef1313d891c7f97c5f10ef73dd07"
        },
        "downloads": -1,
        "filename": "sgex-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b530a855fcf91abf55f6f3d124239d40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13779,
        "upload_time": "2022-06-05T16:50:36",
        "upload_time_iso_8601": "2022-06-05T16:50:36.530550Z",
        "url": "https://files.pythonhosted.org/packages/52/31/322f3a9339ba3300d051a5ff852f3023a1098dfee4e1e914b0a6b3287970/sgex-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb83576e6563dc10818754535149515abd4550be68921575d877ed0bdc0011a6",
          "md5": "80f2f6f3c199a3ab7609e62cdc8e5acc",
          "sha256": "b5adbdaf29b0c163d5dec1bb4d421de422451ee5f0fb560dc7709c0555c4b756"
        },
        "downloads": -1,
        "filename": "sgex-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "80f2f6f3c199a3ab7609e62cdc8e5acc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16883,
        "upload_time": "2022-06-05T16:50:38",
        "upload_time_iso_8601": "2022-06-05T16:50:38.377881Z",
        "url": "https://files.pythonhosted.org/packages/bb/83/576e6563dc10818754535149515abd4550be68921575d877ed0bdc0011a6/sgex-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c07f076a0ff2f6c8969f04726c9cecc7e49d4962a3cd21aaf8e20de2c2b01e87",
          "md5": "218454b1231c69f75a4baf20fd2fcfca",
          "sha256": "31e544c013b0ef779b3dc75819b4c7fc5b1278ccc42606638787e2c315a328db"
        },
        "downloads": -1,
        "filename": "sgex-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "218454b1231c69f75a4baf20fd2fcfca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14131,
        "upload_time": "2022-06-06T09:33:17",
        "upload_time_iso_8601": "2022-06-06T09:33:17.006036Z",
        "url": "https://files.pythonhosted.org/packages/c0/7f/076a0ff2f6c8969f04726c9cecc7e49d4962a3cd21aaf8e20de2c2b01e87/sgex-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bc2c0a4bcc3fce452c5324841f00364d7071db775b7ec314c864bb5b4d959c6",
          "md5": "be82136df182a060921bfa5e51033090",
          "sha256": "4d1d8ae6aff79b46dd94302343d4424a6dec5510d3c2efa9427ed0b011a4ccfe"
        },
        "downloads": -1,
        "filename": "sgex-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "be82136df182a060921bfa5e51033090",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17131,
        "upload_time": "2022-06-06T09:33:18",
        "upload_time_iso_8601": "2022-06-06T09:33:18.893307Z",
        "url": "https://files.pythonhosted.org/packages/2b/c2/c0a4bcc3fce452c5324841f00364d7071db775b7ec314c864bb5b4d959c6/sgex-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c35f460edccc4da48caa3442f6de58dba220be73d72c803ad86d7a93161871c9",
          "md5": "220b79a32e9b21578774187262aefcd1",
          "sha256": "4364cd13467b166e376e93e12a55fcbd7eb1102194449a3c84de7f30f3fdaf0b"
        },
        "downloads": -1,
        "filename": "sgex-0.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "220b79a32e9b21578774187262aefcd1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14320,
        "upload_time": "2022-07-01T20:39:29",
        "upload_time_iso_8601": "2022-07-01T20:39:29.829742Z",
        "url": "https://files.pythonhosted.org/packages/c3/5f/460edccc4da48caa3442f6de58dba220be73d72c803ad86d7a93161871c9/sgex-0.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "511cdf673a83410a08933b11f1916cdd07d60bb57269f504ce4042ad923e6ca1",
          "md5": "aeb5b333e5ff89b7dd9229d7a092552a",
          "sha256": "aac8a73959f0c22f9c3f9159b1d6f4b140a2dcdc1e7c70c5c7d2715748d7289b"
        },
        "downloads": -1,
        "filename": "sgex-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "aeb5b333e5ff89b7dd9229d7a092552a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17603,
        "upload_time": "2022-07-01T20:39:32",
        "upload_time_iso_8601": "2022-07-01T20:39:32.151582Z",
        "url": "https://files.pythonhosted.org/packages/51/1c/df673a83410a08933b11f1916cdd07d60bb57269f504ce4042ad923e6ca1/sgex-0.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd1fa6c8a6657a11697f3dada3dc5c94c2c7b7d535d04ef6212fcb8aca9acee7",
          "md5": "ac5844c724a2e40a3a2af831ba4e9f54",
          "sha256": "78f9b2bf0d800b9462d5fdeeb6ac478e440a2dcb753c924e1ff80a9fa6b7c337"
        },
        "downloads": -1,
        "filename": "sgex-0.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac5844c724a2e40a3a2af831ba4e9f54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14174,
        "upload_time": "2022-07-08T21:24:35",
        "upload_time_iso_8601": "2022-07-08T21:24:35.602353Z",
        "url": "https://files.pythonhosted.org/packages/bd/1f/a6c8a6657a11697f3dada3dc5c94c2c7b7d535d04ef6212fcb8aca9acee7/sgex-0.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fd332a9e463124ab02369ec06c65a61f1a01d6209bca61aa2aed8ea5ca61c6e",
          "md5": "cfcf5d580317e3710d5571a1d1b87368",
          "sha256": "8d1c6f6df2090a78d65c9b69c537c96dfffbba39095ff88149c251bc0519b820"
        },
        "downloads": -1,
        "filename": "sgex-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cfcf5d580317e3710d5571a1d1b87368",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17274,
        "upload_time": "2022-07-08T21:24:37",
        "upload_time_iso_8601": "2022-07-08T21:24:37.612127Z",
        "url": "https://files.pythonhosted.org/packages/8f/d3/32a9e463124ab02369ec06c65a61f1a01d6209bca61aa2aed8ea5ca61c6e/sgex-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73794422efc259623203453d825d6d963e1de333a8eb0d2cc5fe89d03664c0fd",
          "md5": "b072296419397ed14c5b41c6d1e844dc",
          "sha256": "b2277929e384e1608222cf204205a9081ac2145150e190b4403e9688148f2a9e"
        },
        "downloads": -1,
        "filename": "sgex-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b072296419397ed14c5b41c6d1e844dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21574,
        "upload_time": "2023-02-28T17:21:35",
        "upload_time_iso_8601": "2023-02-28T17:21:35.464815Z",
        "url": "https://files.pythonhosted.org/packages/73/79/4422efc259623203453d825d6d963e1de333a8eb0d2cc5fe89d03664c0fd/sgex-0.6.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "setuptools doesn't find subpackages"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f38aa4e1b0b460b64efff6254591a5cd17f120a740bc0acdc057d5dcaca0d01b",
          "md5": "74eb66793b40efd1fdd8ff7d51340e29",
          "sha256": "da14ee6648e85da71d392cef463414a850beb24d6e6877f172656ebcbf114f01"
        },
        "downloads": -1,
        "filename": "sgex-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "74eb66793b40efd1fdd8ff7d51340e29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 28920,
        "upload_time": "2023-02-28T17:21:37",
        "upload_time_iso_8601": "2023-02-28T17:21:37.523293Z",
        "url": "https://files.pythonhosted.org/packages/f3/8a/a4e1b0b460b64efff6254591a5cd17f120a740bc0acdc057d5dcaca0d01b/sgex-0.6.0.tar.gz",
        "yanked": true,
        "yanked_reason": "setuptools doesn't find subpackages"
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfb87562affb9336973ff63bc970e3ab4c921dea0831a520463aba2e6c3282e8",
          "md5": "fce589d6c7c2b5b16d7f4d2f3ddba368",
          "sha256": "9029a3a21f7f7c075b671800c418282d1d1959874e77b61502e8ddf756efc2af"
        },
        "downloads": -1,
        "filename": "sgex-0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fce589d6c7c2b5b16d7f4d2f3ddba368",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 32895,
        "upload_time": "2023-03-01T16:58:00",
        "upload_time_iso_8601": "2023-03-01T16:58:00.050144Z",
        "url": "https://files.pythonhosted.org/packages/bf/b8/7562affb9336973ff63bc970e3ab4c921dea0831a520463aba2e6c3282e8/sgex-0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0537c6c6ff1887ccc6e0dcaa7942564efb49555b904e6952010c71f5f203a01c",
          "md5": "3ea02388d3fe13f6820a14061261d555",
          "sha256": "c94733179f661b305d749dc5d777c5677c33f40e31e6a22b65fb4f0e17e89017"
        },
        "downloads": -1,
        "filename": "sgex-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3ea02388d3fe13f6820a14061261d555",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 36924,
        "upload_time": "2023-03-01T16:58:02",
        "upload_time_iso_8601": "2023-03-01T16:58:02.925462Z",
        "url": "https://files.pythonhosted.org/packages/05/37/c6c6ff1887ccc6e0dcaa7942564efb49555b904e6952010c71f5f203a01c/sgex-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfb87562affb9336973ff63bc970e3ab4c921dea0831a520463aba2e6c3282e8",
        "md5": "fce589d6c7c2b5b16d7f4d2f3ddba368",
        "sha256": "9029a3a21f7f7c075b671800c418282d1d1959874e77b61502e8ddf756efc2af"
      },
      "downloads": -1,
      "filename": "sgex-0.6.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fce589d6c7c2b5b16d7f4d2f3ddba368",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 32895,
      "upload_time": "2023-03-01T16:58:00",
      "upload_time_iso_8601": "2023-03-01T16:58:00.050144Z",
      "url": "https://files.pythonhosted.org/packages/bf/b8/7562affb9336973ff63bc970e3ab4c921dea0831a520463aba2e6c3282e8/sgex-0.6.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0537c6c6ff1887ccc6e0dcaa7942564efb49555b904e6952010c71f5f203a01c",
        "md5": "3ea02388d3fe13f6820a14061261d555",
        "sha256": "c94733179f661b305d749dc5d777c5677c33f40e31e6a22b65fb4f0e17e89017"
      },
      "downloads": -1,
      "filename": "sgex-0.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3ea02388d3fe13f6820a14061261d555",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 36924,
      "upload_time": "2023-03-01T16:58:02",
      "upload_time_iso_8601": "2023-03-01T16:58:02.925462Z",
      "url": "https://files.pythonhosted.org/packages/05/37/c6c6ff1887ccc6e0dcaa7942564efb49555b904e6952010c71f5f203a01c/sgex-0.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}