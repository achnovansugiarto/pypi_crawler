{
  "info": {
    "author": "Chenxing Luo",
    "author_email": "chenxing.luo@columbia.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# <i>C<sub>ij</sub></i>: Semiemperical thermal elasticity\n\nCalculate high temperature thermal elasticity in Python.\n\n## Installation\n\nThe package can be installed with `pip` package manager.\n\n### Install from PyPI (Python package index)\n\n```shell\n$ python3 -m pip install cij\n```\n\n### Manual install\n\nAt the command prompt, one should navigate to the directory that contains the\n`setup.py` script and execute `pip install .`. Then, the package should be ready for use.\n\n## Usage\n\n### Command-line programs\n\nAfter installation, the Cij program can be started by typing `cij` at your \ncommand prompt:\n\n```\nUsage: cij [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  extract           Create data table at specific P or T.\n  extract-geotherm  Create data table at geotherm PT.\n  fill              Fill non-zero Cij terms based on symmetry.\n  modes             Plot interpolated mode frequency vs volume.\n  plot              Plot SAM-Cij calculation results.\n  run               Perform SAM-Cij calculation.\n  run-static        Calculate elastic moduli and acoustic velocities.\n```\n\n### SAM-Cij calculations with `cij run`\n\n#### Calculation settings file and example\n\nThe `settings.yaml` file is home to all calculation settings. One needs to specify calculation parameters, such as thermal EoS fitting parameters, phonon interpolation settings, input data location, and output variables to store in YAML format. The following is an example settings file.\n\n```yml\nqha:\n  input: input01\n  settings:\n    # similar to settings in qha\n    DT: 100\n    P_MIN: 0\n    DELTA_P: 0.5\n    NTV: 81\n    order: 3\n    static_only: False\n    T_MIN: 0\n    NT: 31\n    DT_SAMPLE: 100\n    DELTA_P_SAMPLE: 5\n    volume_ratio: 1.2\nelast:\n  input: elast.dat\n  settings:\n    mode_gamma:\n      interpolator: spline\n      order: 3\n    system: cubic\noutput:\n  pressure_base:\n    - cij\n    - vs\n    - vp\n    - bm_V\n    - bm_R\n    - bm_VRH\n    - G_V\n    - G_R\n    - G_VRH\n    - v\n  volume_base:\n    - p\n    # ...\n\n```\n\n#### Input data\n\nInput data include a QHA input data file (`input01`) and a static elasticity input data (`elast.dat`). See the paper or detailed documentation for description and the [`examples`](./examples) folder for detailed example.\n\n#### Command line arguments\n\n```txt\nUsage: cij run [OPTIONS] SETTINGS_FILENAME\n\n  Perform SAM-Cij calculation.\n\nOptions:\n  --version                       Show the version and exit.\n  --debug [CRITICAL|ERROR|WARNING|INFO|DEBUG|NOTSET]\n                                  Logging level\n  --help                          Show this message and exit.\n```\n\n\n## Structure of the `cij` package\n\nThe cij package is written in Python 3. The Python source code is located in the `cij` sub-folder.\nInput for three examples in the `examples` sub-folder, documentation in the `docs` sub-folder, and the installation script `setup.py`.\n\nThe Python code is organized into several modules:\n\n- **`cij.core`**: Core functionalities\n\t- `calculator`: The calculator that controls the workflow.\n\t- `mode_gamma`: Interpolate phonon frequencies and calculate mode Grüneisen parameters.\n\t- `phonon_contribution`: Calculate phonon *c<sub>ij</sub>*<sup>ph</sup>.\n\tfull_modulus – Interpolate *c<sub>ij</sub>*<sup>st</sup> vs. *V*, and calculate *c<sub>ij</sub><sup>S</sup>* and *c<sub>ij</sub><sup>T</sup>*.\ntasks – Handles the ordering of *c<sub>ij</sub>*<sup>ph</sup> calculation.\n- **`cij.util`**: Methods used in the main program\n\t- `voigt`: Convert between Voigt (*c<sub>ij</sub>*) and regular (*c<sub>ijkl</sub>*) notations of elastic coefficients.\n\t- `units`: Handle unit conversion.\n- **`cij.io`**: Input output functions and classes.\n- **`cij.plot`**: Plotting functionalities.\n- **`cij.cli`**: Command-line programs\n\t- `cij run` (`main.py`) – Perform a SAM-Cij calculation.\n\t- `cij run-static` (`static.py`) – Calculate static elastic properties.\n\t- `cij extract` (`extract.py`) – Extract calculation results for a specific *T* or *P* to a table.\n\t- `cij extract-geotherm` (`geotherm.py`) – Extract calculation results along geotherm *PT* (given as input) to a table.\n\t- `cij plot` (`plot.py`) – Convert output data table to PNG plot.\n\t- `cij modes` (`modes.py`) – Plot phonon frequency interpolation results.\n  - `cij fill` (`fill.py`) – Fill all the non-zero terms for elastic coefficients given the constraint of a crystal system.\n- **`cij.data`**: Data distributed with the program, e.g., the relationship between *c<sub>ij</sub>*’s for different crystal systems, the naming scheme for output files, etc.\n- **`cij.misc`**: Miscellaneous functionalities that are not used in the main program, e.g., methods that facilitate the preparation of input files.\n\n## Author\n\nThe code in this repo is initially authored by [Chenxing Luo][1].\n\n[1]: https://github.com/chazeon\n\n## Documentation\n\nSee [GitHub pages][2].\n\n[2]: https://mineralscloud.github.io/cij\n\n## Build status\n\n![GitHub Actions](https://github.com/MineralsCloud/cij/actions/workflows/main.yml/badge.svg)\n[![codecov](https://codecov.io/gh/MineralsCloud/cij/branch/dev/graph/badge.svg?token=Ln1Fo4vNBE)](https://codecov.io/gh/MineralsCloud/cij)\n[![pypi](https://img.shields.io/pypi/v/cij.svg)](https://pypi.org/project/cij/)\n\n## Licence\n\nReleased under [GNU GPLv3](./LICENCE) license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MineralsCloud/cij/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cij",
    "package_url": "https://pypi.org/project/cij/",
    "platform": "",
    "project_url": "https://pypi.org/project/cij/",
    "project_urls": {
      "Homepage": "https://github.com/MineralsCloud/cij/"
    },
    "release_url": "https://pypi.org/project/cij/1.0.0b3/",
    "requires_dist": [
      "numpy (>=1.10.0)",
      "pandas",
      "scipy",
      "qha",
      "lazy-property",
      "pint (>=0.10)",
      "networkx",
      "click",
      "jsonschema",
      "sympy"
    ],
    "requires_python": "",
    "summary": "High temperature thermal elasticity",
    "version": "1.0.0b3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10433677,
  "releases": {
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b17dceb5725f0bdeee4b467fdcd98116f2aabd1001569738a57a3b5d10c7a954",
          "md5": "b30937d5a17abac89adbaee0ccde2ab1",
          "sha256": "d52855a0265e0e810e7ac0002b08cf317c7dff26d35271e045b41bdf7073a515"
        },
        "downloads": -1,
        "filename": "cij-1.0.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b30937d5a17abac89adbaee0ccde2ab1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 69505,
        "upload_time": "2021-04-15T00:07:45",
        "upload_time_iso_8601": "2021-04-15T00:07:45.180036Z",
        "url": "https://files.pythonhosted.org/packages/b1/7d/ceb5725f0bdeee4b467fdcd98116f2aabd1001569738a57a3b5d10c7a954/cij-1.0.0b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bc1e9b7650f7d961f376d1e9899b73c3cf73427b79449b108a8af85eb259f96",
          "md5": "6b7ba5c6c281fbb85e6061bd0c541d5c",
          "sha256": "0abbc602d2d53d4bd37178b452ab64a42a49b89244b23ea0c0d60fe4aa614b9b"
        },
        "downloads": -1,
        "filename": "cij-1.0.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "6b7ba5c6c281fbb85e6061bd0c541d5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43608,
        "upload_time": "2021-04-15T00:07:46",
        "upload_time_iso_8601": "2021-04-15T00:07:46.236000Z",
        "url": "https://files.pythonhosted.org/packages/2b/c1/e9b7650f7d961f376d1e9899b73c3cf73427b79449b108a8af85eb259f96/cij-1.0.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb533b4bf1309c72d3a94f87c0561d3bc646673fe7e90f7b302d97493a73973",
          "md5": "f2d3cec033c70e93170cb34c04ab029b",
          "sha256": "821ed6ff204ceacd557089287d6b02d60aae0164734bc0ff2c16cbc362690dd8"
        },
        "downloads": -1,
        "filename": "cij-1.0.0b3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2d3cec033c70e93170cb34c04ab029b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70296,
        "upload_time": "2021-05-22T01:46:23",
        "upload_time_iso_8601": "2021-05-22T01:46:23.657970Z",
        "url": "https://files.pythonhosted.org/packages/3b/b5/33b4bf1309c72d3a94f87c0561d3bc646673fe7e90f7b302d97493a73973/cij-1.0.0b3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1650c45f8b29238ba76a4b5b6853e78b6178a4af6bfc3914dd7f17fa2b8040b3",
          "md5": "44ee00fd5753fde819a3e9ad86c6db20",
          "sha256": "2ee02c0ccfb9ea247f8d01e7730583803e1b2ab8a441f96082e6db22837ab1a2"
        },
        "downloads": -1,
        "filename": "cij-1.0.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "44ee00fd5753fde819a3e9ad86c6db20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56391,
        "upload_time": "2021-05-22T01:46:24",
        "upload_time_iso_8601": "2021-05-22T01:46:24.747172Z",
        "url": "https://files.pythonhosted.org/packages/16/50/c45f8b29238ba76a4b5b6853e78b6178a4af6bfc3914dd7f17fa2b8040b3/cij-1.0.0b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bb533b4bf1309c72d3a94f87c0561d3bc646673fe7e90f7b302d97493a73973",
        "md5": "f2d3cec033c70e93170cb34c04ab029b",
        "sha256": "821ed6ff204ceacd557089287d6b02d60aae0164734bc0ff2c16cbc362690dd8"
      },
      "downloads": -1,
      "filename": "cij-1.0.0b3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2d3cec033c70e93170cb34c04ab029b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 70296,
      "upload_time": "2021-05-22T01:46:23",
      "upload_time_iso_8601": "2021-05-22T01:46:23.657970Z",
      "url": "https://files.pythonhosted.org/packages/3b/b5/33b4bf1309c72d3a94f87c0561d3bc646673fe7e90f7b302d97493a73973/cij-1.0.0b3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1650c45f8b29238ba76a4b5b6853e78b6178a4af6bfc3914dd7f17fa2b8040b3",
        "md5": "44ee00fd5753fde819a3e9ad86c6db20",
        "sha256": "2ee02c0ccfb9ea247f8d01e7730583803e1b2ab8a441f96082e6db22837ab1a2"
      },
      "downloads": -1,
      "filename": "cij-1.0.0b3.tar.gz",
      "has_sig": false,
      "md5_digest": "44ee00fd5753fde819a3e9ad86c6db20",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 56391,
      "upload_time": "2021-05-22T01:46:24",
      "upload_time_iso_8601": "2021-05-22T01:46:24.747172Z",
      "url": "https://files.pythonhosted.org/packages/16/50/c45f8b29238ba76a4b5b6853e78b6178a4af6bfc3914dd7f17fa2b8040b3/cij-1.0.0b3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}