{
  "info": {
    "author": "Kamile Lukosiute",
    "author_email": "lukosiutekamile@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": "# KilonovaNet: Kilonova Surrogate Modelling\n\nA conditional variational autoencoder (cVAE) framework for producing continuous\nsurrogate spectra for kilonova models.\n\nThis package provides the interface to predict spectra. It does not provide an\ninterface to do the data prep for training and training itself. The currently\ntrained and provided models are:\n\n- [M. Bulla BNS Models](https://github.com/mbulla/kilonova_models/tree/master/bns_m3_3comp)\n- [M. Bulla BHNS Models](https://github.com/mbulla/kilonova_models/tree/master/bhns_m1_2comp)\n- [D.Kasen BNS Models](https://github.com/dnkasen/Kasen_Kilonova_Models_2017)\n\nThis work requires the use of [pyphot](https://github.com/mfouesneau/pyphot); pyphot requires hdf5. \nSee their installation intructions to see how to install that for your system. Then, if you install \nKilonovaNet via pip, dependencies (including pyphot) should install properly. \n\n## Installation\nInstall via pip: \n\n`pip install kilonovanet`\n\n## Usage\nIn order to produce surrogate spectra, you will need to specify the model and torch files. \n*These are not included in this package, you must download them separately from \n[the KilonovaNet github](https://github.com/klukosiute/kilonovanet) from data and model folders.*\n\nAfter you have the files in your system, you can produce spectra with the following:\n```python\nimport kilonovanet\nimport numpy as np\n\nmetadata_file = \"data/metadata_bulla_bns.json\"\ntorch_file = \"models/bulla-bns-latent-20-hidden-1000-CV-4-2021-04-21-epoch-200.pt\"\ntimes = np.array([1.2, 2.2])\nphysical_parameters = np.array([1.0e-2, 9.0e-2, 3.0e1, 3.0e-1])\n\nmodel = kilonovanet.Model(metadata_file, torch_file)\nspectra = model.predict_spectra(physical_parameters, times)\n```\n\nIn order to produce some photometric observations, the following have to be specified:\n- the model\n- the corresponding parameters of the model (see their papers, repositories, etc.)\n- the times post-merger to produce the observations\n- the filters in which to produce the observations\n\nI have specified some filters in the github folder filter_data, but any filter transmission curves should work properly.\n\nAfter you have filter profiles, use the following to produce synthetic photometric observations:\n\n```python\nimport kilonovanet\nimport numpy as np\n \nmetadata_file = \"data/metadata_bulla_bns.json\"\ntorch_file = \"models/bulla-bns-latent-20-hidden-1000-CV-4-2021-04-21-epoch-200.pt\"\nfilter_lib = \"data/filter_data\"\n\ntimes = np.array([1.2, 1.2, 1.2, 2.2, 2.2, 2.2, 2.2])\nfilters = np.array([\"LSST_u\", \"LSST_z\", \"LSST_y\", \"LSST_u\", \"LSST_z\", \"LSST_y\"])\ndistance = 40.0 * 10 ** 6 * 3.086e18 # 40 Mpc in cm\nphysical_parameters = np.array([1.0e-2, 9.0e-2, 3.0e1, 3.0e-1])\n\nmodel = kilonovanet.Model(metadata_file, torch_file, filter_library_path=filter_lib)\nmags = model.predict_magnitudes(physical_parameters, times=times, filters=filters,\ndistance=distance)\n```\n\nIf you intend to use the same set of observations often, e.g. when doing an\nMCMC-based fit, you can specify all of them in an `Observations` object and\nthen simply call `model.predict_magnitudes(physical_parameters)`. \n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kilonovanet",
    "package_url": "https://pypi.org/project/kilonovanet/",
    "platform": "",
    "project_url": "https://pypi.org/project/kilonovanet/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/kilonovanet/0.1.1/",
    "requires_dist": [
      "numpy",
      "torch",
      "pyphot"
    ],
    "requires_python": ">=3.6",
    "summary": "Kilonova surrogate modelling via cVAE",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12272440,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a845050dae8b682c70800aa99d97da599604a12993d3d03e2bdac2991aa37bb8",
          "md5": "f5098cd7bd4e6adc9e8359a5378b75de",
          "sha256": "9f81b9a05eb91840aeb8a157c28e0c3b49eeeda0059fdc059c6bed62e79d4a67"
        },
        "downloads": -1,
        "filename": "kilonovanet-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5098cd7bd4e6adc9e8359a5378b75de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7489,
        "upload_time": "2021-11-09T15:59:26",
        "upload_time_iso_8601": "2021-11-09T15:59:26.773994Z",
        "url": "https://files.pythonhosted.org/packages/a8/45/050dae8b682c70800aa99d97da599604a12993d3d03e2bdac2991aa37bb8/kilonovanet-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d0a11845452440ba648b58eb04b194f40af3f4dfc5925e5fafba83b6ab0ed80",
          "md5": "f8b47d0d78fa3ed77320d5ae48d0c405",
          "sha256": "5894acaf038f8ea135eb7874906a16c15069c16b5f8ff414254aa8800d14a6c7"
        },
        "downloads": -1,
        "filename": "kilonovanet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f8b47d0d78fa3ed77320d5ae48d0c405",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6377,
        "upload_time": "2021-11-09T15:59:27",
        "upload_time_iso_8601": "2021-11-09T15:59:27.858404Z",
        "url": "https://files.pythonhosted.org/packages/6d/0a/11845452440ba648b58eb04b194f40af3f4dfc5925e5fafba83b6ab0ed80/kilonovanet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b984be8bcc1114feb08b74a03697a85209764fcbb8545ea8e5b251766bd9de13",
          "md5": "ce5a1acc23912655c542587add3354ad",
          "sha256": "7833b896a324592e2c7be48cd2653859af61fce437b52e3745ce0bf726f4d7a0"
        },
        "downloads": -1,
        "filename": "kilonovanet-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce5a1acc23912655c542587add3354ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7682,
        "upload_time": "2021-12-10T23:24:01",
        "upload_time_iso_8601": "2021-12-10T23:24:01.377486Z",
        "url": "https://files.pythonhosted.org/packages/b9/84/be8bcc1114feb08b74a03697a85209764fcbb8545ea8e5b251766bd9de13/kilonovanet-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fdd7a062a375cf51586d947b6dedcbab4d70a1e1caaa5dad62d93d867eb0232",
          "md5": "b71ea9cd0ea7cb2226f0e34b79d44330",
          "sha256": "bdcf330c33a807a511522244acf6ede48a2edf024f4f0fc0d111587d33e28042"
        },
        "downloads": -1,
        "filename": "kilonovanet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b71ea9cd0ea7cb2226f0e34b79d44330",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7136,
        "upload_time": "2021-12-10T23:24:03",
        "upload_time_iso_8601": "2021-12-10T23:24:03.068537Z",
        "url": "https://files.pythonhosted.org/packages/3f/dd/7a062a375cf51586d947b6dedcbab4d70a1e1caaa5dad62d93d867eb0232/kilonovanet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b984be8bcc1114feb08b74a03697a85209764fcbb8545ea8e5b251766bd9de13",
        "md5": "ce5a1acc23912655c542587add3354ad",
        "sha256": "7833b896a324592e2c7be48cd2653859af61fce437b52e3745ce0bf726f4d7a0"
      },
      "downloads": -1,
      "filename": "kilonovanet-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce5a1acc23912655c542587add3354ad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7682,
      "upload_time": "2021-12-10T23:24:01",
      "upload_time_iso_8601": "2021-12-10T23:24:01.377486Z",
      "url": "https://files.pythonhosted.org/packages/b9/84/be8bcc1114feb08b74a03697a85209764fcbb8545ea8e5b251766bd9de13/kilonovanet-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fdd7a062a375cf51586d947b6dedcbab4d70a1e1caaa5dad62d93d867eb0232",
        "md5": "b71ea9cd0ea7cb2226f0e34b79d44330",
        "sha256": "bdcf330c33a807a511522244acf6ede48a2edf024f4f0fc0d111587d33e28042"
      },
      "downloads": -1,
      "filename": "kilonovanet-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b71ea9cd0ea7cb2226f0e34b79d44330",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7136,
      "upload_time": "2021-12-10T23:24:03",
      "upload_time_iso_8601": "2021-12-10T23:24:03.068537Z",
      "url": "https://files.pythonhosted.org/packages/3f/dd/7a062a375cf51586d947b6dedcbab4d70a1e1caaa5dad62d93d867eb0232/kilonovanet-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}