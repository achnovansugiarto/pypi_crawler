{
  "info": {
    "author": "Vitaly Bogomolov",
    "author_email": "mail@vitaly-bogomolov.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DjangoAdminFilters library\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/vb64/django.admin.filters/pep257?label=Pep257&style=plastic)](https://github.com/vb64/django.admin.filters/actions?query=workflow%3Apep257)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/vb64/django.admin.filters/django3?label=Django%203.2.14%20Python%203.7-3.10&style=plastic)](https://github.com/vb64/django.admin.filters/actions?query=workflow%3Adjango3)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/vb64/django.admin.filters/django4?label=Django%204.1.1%20Python%203.8-3.10&style=plastic)](https://github.com/vb64/django.admin.filters/actions?query=workflow%3Adjango4)\n[![Codacy Badge](https://app.codacy.com/project/badge/Coverage/926ec3c1141f4230b4d0508497e5561f)](https://www.codacy.com/gh/vb64/django.admin.filters/dashboard?utm_source=github.com&utm_medium=referral&utm_content=vb64/django.admin.filters&utm_campaign=Badge_Coverage)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/926ec3c1141f4230b4d0508497e5561f)](https://www.codacy.com/gh/vb64/django.admin.filters/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=vb64/django.admin.filters&amp;utm_campaign=Badge_Grade)\n\nThe free, open-source DjangoAdminFilters library is designed to filter objects in the Django admin site.\nThe library provide few filters for this purpose.\n\n-   `MultiChoice`: multi choice selection with checkboxes for CharField and IntegerField fields with 'choices' option\n-   `MultiChoiceExt`: another version of previous filter, that allows filtering by custom defined properties\n-   `DateRange`: set a custom date range using `input` fields\n-   `DateRangePicker`: set a custom date range using javascript widget for select datetime from calendar\n\nMultiChoice and MultiChoiceExt | DateRange | DateRangePicker\n:------:|:-----:|:----:\n![MultiChoice filter](img/multi_choice_en.png) | ![DateRange with input field](img/daterange_en.png) | ![DateRange with js widget](img/picker_en.png)\n\nFor javascript widget for DateRangePicker was used code from [date-and-time-picker project](https://github.com/polozin/date-and-time-picker) with merged [pull request](https://github.com/polozin/date-and-time-picker/pull/4/files), that allow to select dates before current.\n\n## Installation\n\n```bash\npip install django-admin-list-filters\n```\n\nTo connect library to your project, add `django_admin_filters` to the `INSTALLED_APPS` list  in your `settings.py` file.\n\n```python\n\nINSTALLED_APPS = (\n\n...\n\n  'django_admin_filters',\n)\n```\n\nThen connect the static files of the library.\n\n```bash\nmanage.py collectstatic\n```\n\n## Initial data\n\nLet's say we have a table in the database. The records contain follows fields.\n\n```python\n# models.py\nfrom django.db import models\n\nSTATUS_CHOICES = (\n  ('P', 'Pending'),\n  ('A', 'Approved'),\n  ('R', 'Rejected'),\n)\n\nclass Log(models.Model):\n    text = models.CharField(max_length=100)\n\n    timestamp1 = models.DateTimeField(default=None, null=True)\n    timestamp2 = models.DateTimeField(default=None, null=True)\n\n    status = models.CharField(max_length=1, default='P', choices=STATUS_CHOICES)\n\n    is_online = models.BooleanField(default=False)\n    is_trouble1 = models.BooleanField(default=False)\n    is_trouble2 = models.BooleanField(default=False)\n```\n\n## Shared settings for all filters in the library\n\nYou can customize the appearance and behavior of filters to suit your needs by inheriting the filter classes from the library and overriding some of the attributes.\nAll library filters support the following attributes.\n\n```python\nfrom django_admin_filters import MultiChoice\n\nclass MyChoicesFilter(MultiChoice):\n    FILTER_LABEL = \"Select options\"\n    BUTTON_LABEL = \"Apply\"\n```\n\n-   FILTER_LABEL: Filter title\n-   BUTTON_LABEL: Title for filter apply button\n\n## MultiChoice filter\n\nFor model fields of type `CharField` or `IntegerField` defined using the `choices` parameter (for example, the 'status' field in the `Log` model), you can use the MultiChoice filter.\nValues  of the parameter `choices` will be displayed as checkboxes.\n\nTo use MultiChoice filter, you need to specify them in the `admin.py` file in the `list_filter` attribute of the corresponding class.\n\n```python\n# admin.py\nfrom django.contrib import admin\nfrom django_admin_filters import MultiChoice\nfrom .models import Log\n\nclass StatusFilter(MultiChoice):\n    FILTER_LABEL = \"By status\"\n\nclass Admin(admin.ModelAdmin):\n    list_display = ['text', 'status']\n    list_filter = [('status', StatusFilter)]\n\nadmin.site.register(Log, Admin)\n```\n\nIn the Django admin panel, check the required checkboxes in the filter and click the \"Apply\" button.\nIf all filter checkboxes are unchecked and the apply filter button is pressed, than the filter will not been aplied and all records will be displayed.\n\n## MultiChoiceExt filter\n\nSometimes you need to filter data by a custom defined property that does not match a single field in the model.\n\nFor example, in the `Log` model of the source data, there are three boolean fields.\n\n```python\n    is_online = models.BooleanField(default=False)\n    is_trouble1 = models.BooleanField(default=False)\n    is_trouble2 = models.BooleanField(default=False)\n```\n\nFor this model, we define the `color` property as follows.\n\n-   The `color` property has the value 'red' if the field `is_online == False`.\n-   If `is_online == True` and both `is_trouble1` and `is_trouble1` fields are False, then the value of the property is 'green'.\n-   If `is_online == True` and at least one of the fields `is_trouble1` and `is_trouble1` is True, then the property has the value 'yellow'.\n\n```python\n# models.py\n    @property\n    def color(self):\n        status = 'red'\n        if self.is_online:\n            status = 'green'\n            if self.is_trouble1 or self.is_trouble2:\n                status = 'yellow'\n\n        return status\n```\n\nTo filter data by such a property in the Django admin panel, you can use the MultiChoiceExt filter.\nIn the `options` attribute, you need to specify a list of checkboxes that will be displayed when using the filter.\n\nEach element of the list consists of three values.\n\n-   a unique string to be used in the GET request parameter\n-   checkbox label\n-   filtering expression applied to the DB model in the form of [Django Q-objects](https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects)\n\nIn the `parameter_name` attribute, you need to specify the name of the GET request parameter for sending filter data.\n\nFor our example, the code will look like this.\n\n```python\n# admin.py\nfrom django.db.models import Q\nfrom django_admin_filters import MultiChoiceExt\n\nclass ColorFilter(MultiChoiceExt):\n    FILTER_LABEL = \"By color\"\n    parameter_name = \"color\"\n    options = [\n      ('red', 'Red', Q(is_online=False)),\n      ('yellow', 'Yellow', Q(is_online=True) & (Q(is_trouble1=True) | Q(is_trouble2=True))),\n      ('green', 'Green', Q(is_online=True) & Q(is_trouble1=False) & Q(is_trouble2=False)),\n    ]\n\nclass Admin(admin.ModelAdmin):\n    list_display = ['text', 'color']\n    list_filter = [('is_online', ColorFilter)]\n\nadmin.site.register(Log, Admin)\n```\n\nOtherwise, the behavior and settings of the `MultiChoiceExt` filter are similar to the `MultiChoice` filter described earlier.\n\n## DateRange and DateRangePicker filters\n\nTo use filters with a date interval, you need to specify them in the `admin.py` file in the `list_filter` attribute of the corresponding class.\n\n```python\n# admin.py\nfrom django.contrib import admin\nfrom django_admin_filters import DateRange, DateRangePicker\nfrom .models import Log\n\nclass Admin(admin.ModelAdmin):\n    list_display = ['text', 'timestamp1', 'timestamp2']\n    list_filter = (('timestamp1', DateRange), ('timestamp2', DateRangePicker))\n\nadmin.site.register(Log, Admin)\n```\n\n### Customization for DateRange filter\n\n```python\n# admin.py\nfrom django_admin_filters import DateRange\n\nclass MyDateRange(DateRange):\n    FILTER_LABEL = \"Data range\"\n    BUTTON_LABEL = \"Set range\"\n    FROM_LABEL = \"From\"\n    TO_LABEL = \"To\"\n    ALL_LABEL = 'All'\n    CUSTOM_LABEL = \"custom range\"\n    NULL_LABEL = \"no date\"\n    DATE_FORMAT = \"YYYY-MM-DD HH:mm\"\n\n    is_null_option = True\n\n    options = (\n      ('1da', \"24 hours ahead\", 60 * 60 * 24),\n      ('1dp', \"24 hours in the past\", 60 * 60 * -24),\n    )\n```\n\nYou can override the following attributes.\n\n-   `FROM_LABEL`: The label of the start date field.\n-   `TO_LABEL`: The label of the end date field.\n-   `ALL_LABEL`: The label of the menu item for displaying all records.\n-   `CUSTOM_LABEL`: The label of the menu item when date range is set.\n-   `NULL_LABEL`: The label of the menu item for displaying records without date.\n-   `is_null_option`: Set this attribute to `False` to remove the option to display record without date from the filter menu.\n-   `DATE_FORMAT`: Hint about the format of the date and time fields.\n\nYou can change the date/time input format to your own.\nHowever, you may need to override the `to_dtime` method as well.\nThis method is used to convert a user-entered string into a `datetime` value.\nBy default, the method is defined as follows.\n\n```python\n@staticmethod\ndef to_dtime(text):\n    try:\n        return datetime.fromisoformat(text)\n    except ValueError:\n        return None\n```\n\nThe `options` attribute specifies filter menu items that allow you to select data from the current moment to an offset of a specified number of seconds in the past or future.\nEach element of the `options` list contains three values.\n\n-   A unique string to use in the GET request parameters. Except for the strings 'custom' and 'empty' which are used by the filter.\n-   The title of the item in the filter menu.\n-   Offset in seconds relative to the current moment. A negative value specifies an offset to the past.\n\n### Customization for DateRangePicker filter\n\nThe `DateRangePicker` filter with a javascript calendar date/time picker widget is derived from the `DateRange` filter and allows you to override all the attributes described above.\nAlso, additional attributes can be overridden in `DateRangePicker`.\n\n```python\n# admin.py\nfrom django_admin_filters import DateRangePicker\n\nclass MyDateRangePicker(DateRangePicker):\n    WIDGET_LOCALE = 'en'\n    WIDGET_BUTTON_LABEL = \"Set\"\n    WIDGET_WITH_TIME = True\n\n    WIDGET_START_TITLE = 'Start date'\n    WIDGET_START_TOP = -350\n    WIDGET_START_LEFT = -400\n\n    WIDGET_END_TITLE = 'End date'\n    WIDGET_END_TOP = -350\n    WIDGET_END_LEFT = -400\n```\n\n-   WIDGET_LOCALE: The language code for display the names of the months and days of the week. By default is the value of the `LANGUAGE_CODE` item in your project's `settings.py` file.\n-   WIDGET_BUTTON_LABEL: The label of the select button.\n-   WIDGET_WITH_TIME: Set this attribute to `False` if you only want to select a date without a time.\n-   WIDGET_START_TITLE: The title of the widget when selecting the start date of the interval.\n-   WIDGET_START_TOP: The vertical offset of the widget's calendar window when selecting the start date of the interval.\n-   WIDGET_START_LEFT: The horizontal offset of the widget's calendar window when selecting the start date of the interval.\n-   WIDGET_END_TITLE: The title of the widget when selecting the end date of the interval.\n-   WIDGET_END_TOP: The vertical offset of the widget's calendar window when selecting the end date of the interval.\n-   WIDGET_END_LEFT: The horizontal offset of the widget's calendar window when selecting the end date of the interval.\n\n## Usage example\n\nYou can run an example of using the library on your local host.\n\nOn the Windows platform, you must first install the following programs.\n\n-   [Python3](https://www.python.org/downloads/release/python-3712/)\n-   GNU [Unix Utils](http://unxutils.sourceforge.net/) for operations via makefile\n-   [Git for Windows](https://git-scm.com/download/win) to access the source code repository.\n\nThen clone the repository and run the installation, specifying the path to Python 3.\n\n```bash\ngit clone git@github.com:vb64/django.admin.filters.git\ncd django.admin.filters\nmake setup PYTHON_BIN=/usr/bin/python3\n```\n\nCollect static files and create a database.\n\n```bash\nmake static\nmake db\n```\n\nCreate a database superuser by specifying a login and password for it.\n\n```bash\nmake superuser\n```\n\nRun example.\n\n```bash\nmake example\n```\n\nOpen `http://127.0.0.1:8000/admin/` in a browser to view the example site.\nTo enter the admin panel you need to use the login and password that were set when creating the superuser.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vb64/django.admin.filters",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-admin-list-filters",
    "package_url": "https://pypi.org/project/django-admin-list-filters/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-admin-list-filters/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vb64/django.admin.filters/issues",
      "Homepage": "https://github.com/vb64/django.admin.filters"
    },
    "release_url": "https://pypi.org/project/django-admin-list-filters/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Embedded filters for Django Admin site",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15369710,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbb472ccc9c9ef456ce7f1c4e83199d35913c40d4eb142c0b7374af721f04452",
          "md5": "fd942a7079f5a8f002f4c0b4ed2dd1da",
          "sha256": "9bb842b3bf78500d11d1588047bf55a5dda633db8af140f2dbc5e943629c9f15"
        },
        "downloads": -1,
        "filename": "django_admin_list_filters-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd942a7079f5a8f002f4c0b4ed2dd1da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14018,
        "upload_time": "2022-09-13T16:35:26",
        "upload_time_iso_8601": "2022-09-13T16:35:26.130633Z",
        "url": "https://files.pythonhosted.org/packages/fb/b4/72ccc9c9ef456ce7f1c4e83199d35913c40d4eb142c0b7374af721f04452/django_admin_list_filters-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca653ab8e3752b8ecb628c49d840ed77fe95c1bcce68347d5f17c3e194e3c051",
          "md5": "3c54ad960aa297035df55b9c819322fd",
          "sha256": "a68340a06f4abee1dabcc6a661ef284700fe155ae6f9d7d8eca6cb2f7a712416"
        },
        "downloads": -1,
        "filename": "django-admin-list-filters-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c54ad960aa297035df55b9c819322fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15215,
        "upload_time": "2022-09-13T16:35:28",
        "upload_time_iso_8601": "2022-09-13T16:35:28.231765Z",
        "url": "https://files.pythonhosted.org/packages/ca/65/3ab8e3752b8ecb628c49d840ed77fe95c1bcce68347d5f17c3e194e3c051/django-admin-list-filters-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd8a466d2ce8da19043605bdb55ae737cd73eec57ebac36eec8cbea591fca618",
          "md5": "b7634f273e91a8be73dbfbcf9fc6e864",
          "sha256": "6131861d3532613088cdbc1b0121308c9418864ea647be086d05e52af1cfec57"
        },
        "downloads": -1,
        "filename": "django_admin_list_filters-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7634f273e91a8be73dbfbcf9fc6e864",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17745,
        "upload_time": "2022-10-11T06:18:32",
        "upload_time_iso_8601": "2022-10-11T06:18:32.748188Z",
        "url": "https://files.pythonhosted.org/packages/dd/8a/466d2ce8da19043605bdb55ae737cd73eec57ebac36eec8cbea591fca618/django_admin_list_filters-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "140a74eb4716b0a11056e5c99f89f4c7e267e5334373a3db1287511ccb26c120",
          "md5": "55e2922471cd520d0c29ccaabcd2f1b5",
          "sha256": "a6ce857765176e7969198dd2302231ae97da508a2f392b182f903967f665ab8e"
        },
        "downloads": -1,
        "filename": "django-admin-list-filters-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "55e2922471cd520d0c29ccaabcd2f1b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19242,
        "upload_time": "2022-10-11T06:18:35",
        "upload_time_iso_8601": "2022-10-11T06:18:35.609846Z",
        "url": "https://files.pythonhosted.org/packages/14/0a/74eb4716b0a11056e5c99f89f4c7e267e5334373a3db1287511ccb26c120/django-admin-list-filters-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd8a466d2ce8da19043605bdb55ae737cd73eec57ebac36eec8cbea591fca618",
        "md5": "b7634f273e91a8be73dbfbcf9fc6e864",
        "sha256": "6131861d3532613088cdbc1b0121308c9418864ea647be086d05e52af1cfec57"
      },
      "downloads": -1,
      "filename": "django_admin_list_filters-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b7634f273e91a8be73dbfbcf9fc6e864",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 17745,
      "upload_time": "2022-10-11T06:18:32",
      "upload_time_iso_8601": "2022-10-11T06:18:32.748188Z",
      "url": "https://files.pythonhosted.org/packages/dd/8a/466d2ce8da19043605bdb55ae737cd73eec57ebac36eec8cbea591fca618/django_admin_list_filters-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "140a74eb4716b0a11056e5c99f89f4c7e267e5334373a3db1287511ccb26c120",
        "md5": "55e2922471cd520d0c29ccaabcd2f1b5",
        "sha256": "a6ce857765176e7969198dd2302231ae97da508a2f392b182f903967f665ab8e"
      },
      "downloads": -1,
      "filename": "django-admin-list-filters-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "55e2922471cd520d0c29ccaabcd2f1b5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19242,
      "upload_time": "2022-10-11T06:18:35",
      "upload_time_iso_8601": "2022-10-11T06:18:35.609846Z",
      "url": "https://files.pythonhosted.org/packages/14/0a/74eb4716b0a11056e5c99f89f4c7e267e5334373a3db1287511ccb26c120/django-admin-list-filters-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}