{
  "info": {
    "author": "Fedor Glazov",
    "author_email": "fedorglazov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Introduction\nThis is a lightweight, pure python version of a rANSCoder. A rANSCoder is an entropy coder, which was first described in Jarek Duda's paper (http://arxiv.org/abs/1311.2540). This variant of rANS works on 64 bits and emits 32-bit words at the same time. It is a port of Fabien Giesen 64 bit rANSCoder to python. It should be compatible with the functions rANS64XXXXXX in Giesen's project - i.e. you could theoretically encode or decode with this project, and do the other step via Giesen's code.\n\n# Installation\n\nThis repository is available via pip. You can install it as follows.\n\n```\npip install py_rans\n```\n\n# Purpose\n\nThe focus of this repository is not performance, but rather rapid prototyping. This entropy coder will provide compresion performance which is close to entropy at a reasonable speed. If you want the same compression performance and higher compression you should look at a C/C++ library fufilling those needs - I can recommend either Giesen's or Bonfield's implementation of rANS. The following are the Github links to their two projects:\n\n-    https://github.com/rygorous/ryg_rans\n-    https://github.com/jkbonfield/rans_static\n\n# API by simple example\n\nThe API is deliberately kept very simple, with a single way to use the rANSCoder. The interface consists of two classes \"Encoder\" and Decoder\".\n\nTo encode something, you would do the following:\n\n```python\nimport rans.rANSCoder as rANS\nimport random\nimport numpy as np\n\nencoder = rANS.Encoder()\nprobs = np.array([0.1, 0.2, 0.3, 0.05, 0.05, 0.15, 0.05, 0.1], dtype=np.float32)\ndata = np.array([random.randint(0,7) for i in range(10000)], dtype=np.int32)\n# Use numpy arrays for better performance! Numba works better with numpy arrays than vanilla python arrays.\n\nfor symbol in data:\n    encoder.encode_symbol(probs, symbol)\nencoded = encoder.get_encoded()\nprint(\"The number of bytes needed is: \" + str(len(encoded) * 4))\n\n# Encoded is a list of 32-bit words.\n# Do things afterwards with encoded - e.g. save it into a file or send it somewhere.\n```\n\nAnd later, to decode:\n\n```python\nimport rans.rANSCoder as rANS\n\n# Given: length_decoded, encoded, probs\n# Assuming the previous code snippet was how it was encoded, then:\n# length_decoded = len(data) \n# encoded = encoded\n# probs = probs\n\ndecoder = rANS.Decoder(encoded)\ndecoded_data = []\nfor _ in range(length_decoded):\n    decoded_data.append(decoder.decode_symbol(probs))\n    \n# decoded_data is the original data, in REVERSE ORDER.\n```\n\nIf you run the two code snippets in order, then you will need to call decoded_data.reverse() before running the check ```data == decoded_data```.\n\n# API more formally\n\nThis python package consists of two classes, Encoder and Decoder. There are also a few helper functions outside of the two classes - but they are not meant to be used as part of the public API - this package is meant to be interfaced with solely through the two classes. All of the code is wrapped in numba wrappers, which compiles the code just in time before use. The first call to any method will take longer than any calls following it.\n\n\n\nThe Encoder is responsible for taking the uncompressed data and compressing it. It is an entropy coder, so it expects data and a corresponding model (i.e. probability distribution which says how frequent a given symbol is). The Encoder's constructor takes no arguments, so you may simply construct it via ```encoder = rANS.Encoder()```.\n\nThere are two methods:\n\n```Encoder.encode_symbol(probs, symb)```\n\nThis method takes a symbol and adds it to the state inside of the Encoder which represents the currently compressed data. In order to compress it, the encoder requires a probability distribution which says how likely a given symb will occur. So, for example, given ```probs = [0.15, 0.8, 0.05]```, the symbol 0 occurs with 15% probability, 1 occurs with 80% probability, and 2 with 5% probability. So note that symb is a number with the bounds ```0 â‰¤ symb < len(probs)```.\n\nFor this method to work properly, ```sum(probs)``` should be close to 1 - i.e. you need to pass a proper probability distribution. Note that you may use different probs for each succesive symbol you encode in an Encoder. This is allowed and intentional, as your model might change while you're encoding.\n\n```Encoder.get_encoded()```\n\nThis method flushes the state in the encoder, and returns an array of 32-bit words which represents the compressed data. Note that you should not use the Encoder after calling this method - if you want to encode more data later on, you should then create a new Encoder.\n\nThe Decoder is responsible for taking the compressed data generated by an Encoder, and transforming it back into the original data. **Note that the data is output in reversed order**. The constructor expects the encoded data as input, i.e. you may construct the Decoder as ```decoder = rANS.Decoder(encoded_data)```.\n\nThe Decoder only has one method:\n\n```Decoder.decode_symbol(probs)```\n\nThis method takes the probability distribution that the corresponding symbol was encoded with, and retrieves this symbol. The next time this method is called, the next symbol is decoded. Notice that these symbols are decoded **in reverse order** - i.e. this coder follows a FILO principle - the last symbol encoded is the first symbol decoded.\n\nFurther note that the Decoder does not know how many symbols are left - you will either need to have messages/data of fixed length, or you will have to store the length with the compressed data in order to later be able to decompress it.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FGlazov/Python-rANSCoder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-rans",
    "package_url": "https://pypi.org/project/py-rans/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-rans/",
    "project_urls": {
      "Homepage": "https://github.com/FGlazov/Python-rANSCoder"
    },
    "release_url": "https://pypi.org/project/py-rans/1.0.4/",
    "requires_dist": [
      "numba (==0.56.3)"
    ],
    "requires_python": "",
    "summary": "A lightweight, pure python implementation of a rANS coder.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15428825,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1037a1c34f501678ded6d516eb8f902baa012b9f6d0fdc81c7499ddc91c31200",
          "md5": "70fbc7ddc6f42c83bbfe6df54dc44fe6",
          "sha256": "462d56a0b8e8ff085a73ae1b8b84191cc726b310c1a09077e71c8492c35ee637"
        },
        "downloads": -1,
        "filename": "py_rans-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70fbc7ddc6f42c83bbfe6df54dc44fe6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6260,
        "upload_time": "2021-10-18T14:15:37",
        "upload_time_iso_8601": "2021-10-18T14:15:37.960403Z",
        "url": "https://files.pythonhosted.org/packages/10/37/a1c34f501678ded6d516eb8f902baa012b9f6d0fdc81c7499ddc91c31200/py_rans-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bd6c1efba3a46a274519f66f9c069f4673007a0c804c902f61ecd9998922cc4",
          "md5": "1c3e845d17dba0c5dfc25359de3e2953",
          "sha256": "9e9871ad63da2f9ada96c3f2f397c6bcda6989911f083d4d07c9993f8817d1b1"
        },
        "downloads": -1,
        "filename": "py_rans-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1c3e845d17dba0c5dfc25359de3e2953",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6110,
        "upload_time": "2021-10-18T14:15:40",
        "upload_time_iso_8601": "2021-10-18T14:15:40.728975Z",
        "url": "https://files.pythonhosted.org/packages/1b/d6/c1efba3a46a274519f66f9c069f4673007a0c804c902f61ecd9998922cc4/py_rans-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39984880a17247202384cbbc084cb8e7c7cd53a99e2bdd50683f5a2caac8d584",
          "md5": "fd06c1e6a08937365b7772221574077f",
          "sha256": "bc519f31e0802d2a84e308b1fddc74b3f0634a247a55a30793b4df12406f8d70"
        },
        "downloads": -1,
        "filename": "py_rans-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd06c1e6a08937365b7772221574077f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7577,
        "upload_time": "2021-12-28T14:15:17",
        "upload_time_iso_8601": "2021-12-28T14:15:17.775910Z",
        "url": "https://files.pythonhosted.org/packages/39/98/4880a17247202384cbbc084cb8e7c7cd53a99e2bdd50683f5a2caac8d584/py_rans-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "666a746f8f5b55749fe6c7ff6ae6413147a426e8c01e4252df65fb855bd3308f",
          "md5": "b6ee90f5a507e4b2721f3d638380a51a",
          "sha256": "c823df1c9bccc78e2e6f10c202bab9439fd7a4e898a4180e357194471e8b593e"
        },
        "downloads": -1,
        "filename": "py_rans-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b6ee90f5a507e4b2721f3d638380a51a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7261,
        "upload_time": "2021-12-28T14:15:19",
        "upload_time_iso_8601": "2021-12-28T14:15:19.549324Z",
        "url": "https://files.pythonhosted.org/packages/66/6a/746f8f5b55749fe6c7ff6ae6413147a426e8c01e4252df65fb855bd3308f/py_rans-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1fe9dfab534a2a14ca8a1d84943413d545fdac3a0b048c8272fc2731e002bf7",
          "md5": "f6abe3fc986be166ea0a03344607b69e",
          "sha256": "0c56d823647d186f67020ed740aaa8a4be8cf60b1939d3bfad2014474d77b5ab"
        },
        "downloads": -1,
        "filename": "py_rans-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6abe3fc986be166ea0a03344607b69e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7579,
        "upload_time": "2021-12-28T14:32:44",
        "upload_time_iso_8601": "2021-12-28T14:32:44.800864Z",
        "url": "https://files.pythonhosted.org/packages/a1/fe/9dfab534a2a14ca8a1d84943413d545fdac3a0b048c8272fc2731e002bf7/py_rans-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c30e1c6c10bd0fc6972dfbd9b4dd2254767d76c2282bf8be1d8fe7a8b8cb7dd",
          "md5": "f2ef15e6f9b2b4791fb419b04f706d6c",
          "sha256": "75d2493631ef76a7261c92de46cee7b43461222ec1719ff71150e4d41d27f2c0"
        },
        "downloads": -1,
        "filename": "py_rans-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f2ef15e6f9b2b4791fb419b04f706d6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7259,
        "upload_time": "2021-12-28T14:32:46",
        "upload_time_iso_8601": "2021-12-28T14:32:46.522616Z",
        "url": "https://files.pythonhosted.org/packages/4c/30/e1c6c10bd0fc6972dfbd9b4dd2254767d76c2282bf8be1d8fe7a8b8cb7dd/py_rans-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cb13de763ea28baea79cf2b6af2df17f1b95c0c310c61afdf7be1ac9eb5dfe5",
          "md5": "526c535bba5a2c10c1b61b447ac67bfb",
          "sha256": "cee60fea914a0e780acfe1116bc3c68d43478218b1bfb86aecbe1074929e94db"
        },
        "downloads": -1,
        "filename": "py_rans-1.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "526c535bba5a2c10c1b61b447ac67bfb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8055,
        "upload_time": "2022-10-16T18:23:51",
        "upload_time_iso_8601": "2022-10-16T18:23:51.300345Z",
        "url": "https://files.pythonhosted.org/packages/4c/b1/3de763ea28baea79cf2b6af2df17f1b95c0c310c61afdf7be1ac9eb5dfe5/py_rans-1.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cb13de763ea28baea79cf2b6af2df17f1b95c0c310c61afdf7be1ac9eb5dfe5",
        "md5": "526c535bba5a2c10c1b61b447ac67bfb",
        "sha256": "cee60fea914a0e780acfe1116bc3c68d43478218b1bfb86aecbe1074929e94db"
      },
      "downloads": -1,
      "filename": "py_rans-1.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "526c535bba5a2c10c1b61b447ac67bfb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8055,
      "upload_time": "2022-10-16T18:23:51",
      "upload_time_iso_8601": "2022-10-16T18:23:51.300345Z",
      "url": "https://files.pythonhosted.org/packages/4c/b1/3de763ea28baea79cf2b6af2df17f1b95c0c310c61afdf7be1ac9eb5dfe5/py_rans-1.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}