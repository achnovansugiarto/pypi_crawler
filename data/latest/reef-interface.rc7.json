{
  "info": {
    "author": "Reef Finance",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python Reef Interface\n\nPython Reef Interface Library\n\n## Description\nThis library specializes in interfacing with the Reef node, providing additional convenience methods to deal with\nSCALE encoding/decoding (the default output and input format of the Substrate JSONRPC), metadata parsing, type registry\nmanagement and versioning of types. \n\n[Documentation](https://reef-defi.github.io/py-reef-interface/reefinterface/base.html#reefinterface.base.ReefInterface)\n\n## Installation\n```bash\npip install reef-interface\n```\n\n## Initialization\n\nThe following examples show how to initialize:\n\n```python\nfrom reefinterface import ReefInterface\n\nreef = ReefInterface(url=\"testnet\")\n```\n\n`url` can be `testnet`, `mainnet` or an `ws://<url>` URL for custom node.\n\n\n## Features\n\n### Retrieve extrinsics for a certain block\n\n```python\n# Set block_hash to None for chain tip\nblock_hash = \"0x51d15792ff3c5ee9c6b24ddccd95b377d5cccc759b8e76e5de9250cf58225087\"\n\n# Retrieve extrinsics in block\nresult = reef.get_block(block_hash=block_hash)\n\nfor extrinsic in result['extrinsics']:\n    if extrinsic.address:\n        signed_by_address = extrinsic.address.value\n    else:\n        signed_by_address = None\n\n    print('\\nPallet: {}\\nCall: {}\\nSigned by: {}'.format(\n        extrinsic.call_module.name,\n        extrinsic.call.name,\n        signed_by_address\n    ))\n\n    # Loop through call params\n    for param in extrinsic.params:\n\n        if param['type'] == 'Compact<Balance>':\n            param['value'] = '{} {}'.format(param['value'] / 10 ** 18\n            r.token_decimals, reef.token_symbol)\n\n        print(\"Param '{}': {}\".format(param['name'], param['value']))\n```\n\n### Subscribe to new block headers\n\n```python\ndef subscription_handler(obj, update_nr, subscription_id):\n\n    print(f\"New block #{obj['header']['number']} produced by {obj['author']}\")\n\n    if update_nr > 10:\n        return {'message': 'Subscription will cancel when a value is returned', 'updates_processed': update_nr}\n\n\nresult = reef.subscribe_block_headers(subscription_handler, include_author=True)\n```\n\n### Storage queries\nThe modules and storage functions are provided in the metadata (see\n`reef.get_metadata_storage_functions()`),\nparameters will be automatically converted to SCALE-bytes (also including decoding of SS58 addresses).\n\nExample: \n\n```python\nresult = reef.query(\n    module='System',\n    storage_function='Account',\n    params=['F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T']\n)\n\nprint(result.value['nonce'])\nprint(result.value['data']['free'])\n```\n\nOr get the account info at a specific block hash:\n\n```python\naccount_info = reef.query(\n    module='System',\n    storage_function='Account',\n    params=['F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T'],\n    block_hash='0x176e064454388fd78941a0bace38db424e71db9d5d5ed0272ead7003a02234fa'\n)\n\nprint(account_info.value['nonce']) #  7673\nprint(account_info.value['data']['free']) # 637747267365404068\n```\n\n### Storage subscriptions\n\nWhen a callable is passed as kwarg `subscription_handler`, there will be a subscription created for given storage query. \nUpdates will be pushed to the callable and will block execution until a final value is returned. This value will be returned\nas a result of the query and finally automatically unsubscribed from further updates.\n\n```python\ndef subscription_handler(account_info_obj, update_nr, subscription_id):\n\n    if update_nr == 0:\n        print('Initial account data:', account_info_obj.value)\n\n    if update_nr > 0:\n        # Do something with the update\n        print('Account data changed:', account_info_obj.value)\n\n    # The execution will block until an arbitrary value is returned, which will be the result of the `query`\n    if update_nr > 5:\n        return account_info_obj\n\n\nresult = reef.query(\"System\", \"Account\", [\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\"],\n                         subscription_handler=subscription_handler)\n\nprint(result)\n```\n\n### Query a mapped storage function\nMapped storage functions can be iterated over all key/value pairs, for these type of storage functions `query_map` \ncan be used.\n\nThe result is a `QueryMapResult` object, which is an iterator:\n\n```python\n# Retrieve the first 199 System.Account entries\nresult = reef.query_map('System', 'Account', max_results=199)\n\nfor account, account_info in result:\n    print(f\"Free balance of account '{account.value}': {account_info.value['data']['free']}\")\n```\n\nThese results are transparently retrieved in batches capped by the `page_size` kwarg, currently the \nmaximum `page_size` restricted by the RPC node is 1000    \n\n```python\n# Retrieve all System.Account entries in batches of 200 (automatically appended by `QueryMapResult` iterator)\nresult = reef.query_map('System', 'Account', page_size=200, max_results=400)\n\nfor account, account_info in result:\n    print(f\"Free balance of account '{account.value}': {account_info.value['data']['free']}\")\n```\n\n### Create and send signed extrinsics\n\nThe following code snippet illustrates how to create a call, wrap it in a signed extrinsic and send it to the network:\n\n```python\nfrom reefinterface import ReefInterface, Keypair\nfrom reefinterface.exceptions import SubstrateRequestException\n\nreef = ReefInterface(url=\"testnet\")\n\nkeypair = Keypair.create_from_mnemonic('episode together nose spoon dose oil faculty zoo ankle evoke admit walnut')\n\ncall = reef.compose_call(\n    call_module='Balances',\n    call_function='transfer',\n    call_params={\n        'dest': '5E9oDs9PjpsBbxXxRE9uMaZZhnBAV38n2ouLB28oecBDdeQo',\n        'value': 1 * 10**18\n    }\n)\n\nextrinsic = reef.create_signed_extrinsic(call=call, keypair=keypair)\n\ntry:\n    receipt = reef.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n    print(\"Extrinsic '{}' sent and included in block '{}'\".format(receipt.extrinsic_hash, receipt.block_hash))\n\nexcept SubstrateRequestException as e:\n    print(\"Failed to send: {}\".format(e))\n```\n\nThe `wait_for_inclusion` keyword argument used in the example above will block giving the result until it gets \nconfirmation from the node that the extrinsic is succesfully included in a block. The `wait_for_finalization` keyword\nwill wait until extrinsic is finalized. Note this feature is only available for websocket connections. \n\n### Examining the ExtrinsicReceipt object\n\nThe `reef.submit_extrinsic` example above returns an `ExtrinsicReceipt` object, which contains information about the on-chain \nexecution of the extrinsic. Because the `block_hash` is necessary to retrieve the triggered events from storage, most\ninformation is only available when `wait_for_inclusion=True` or `wait_for_finalization=True` is used when submitting\nan extrinsic. \n\n\nExamples:\n```python\nreceipt = reef.submit_extrinsic(extrinsic, wait_for_inclusion=True)\nprint(receipt.is_success) # False\nprint(receipt.weight) # 216625000\nprint(receipt.total_fee_amount) # 2749998966\nprint(receipt.error_message['name']) # 'LiquidityRestrictions'\n```\n\n`ExtrinsicReceipt` objects can also be created for all existing extrinsics on-chain:\n\n```python\n\nreceipt = ExtrinsicReceipt(\n    reef=reef,\n    extrinsic_hash=\"0x56fea3010910bd8c0c97253ffe308dc13d1613b7e952e7e2028257d2b83c027a\",\n    block_hash=\"0x04fb003f8bc999eeb284aa8e74f2c6f63cf5bd5c00d0d0da4cd4d253a643e4c9\"\n)\n\nprint(receipt.is_success) # False\nprint(receipt.extrinsic.call_module.name) # 'Identity'\nprint(receipt.extrinsic.call.name) # 'remove_sub'\nprint(receipt.weight) # 359262000\nprint(receipt.total_fee_amount) # 2483332406\nprint(receipt.error_message['docs']) # [' Sender is not a sub-account.']\n\nfor event in receipt.triggered_events:\n    print(f'* {event.value}')\n```\n\n### Create mortal extrinsics\n\nBy default, _immortal_ extrinsics are created, which means they have an indefinite lifetime for being included in a \nblock. However, it is recommended to use specify an expiry window, so you know after a certain amount of time if the \nextrinsic is not included in a block, it will be invalidated.\n\n```python \nextrinsic = reef.create_signed_extrinsic(call=call, keypair=keypair, era={'period': 64})\n```\n\nThe `period` specifies the number of blocks the extrinsic is valid counted from current head.\n\n\n### Multi-signing\n\nIn the below example we see signing with Alice and Bob, who have a common Multisig account. The transfer will not be done until both of them sign the extrinsic. Other extrinsics are available [here](https://polkadot.js.org/docs/substrate/extrinsics/#multisig).\n\n\n```python\n# Multisig example\nfrom reefinterface import Keypair, ReefInterface\n\n# Connect to node\ntry:\n    network = \"ws://127.0.0.1:9944\"\n    substrate = ReefInterface(url=network)\nexcept ConnectionRefusedError:\n    print(\"Reef node could not be reached.\")\n    exit()\n\nalice = Keypair.create_from_uri(\"//Alice\")\nbob = Keypair.create_from_uri(\"//Bob\")\n\n# Extrinsic to be multi-signed\ntransfer = substrate.compose_call(\n    call_module=\"Balances\",\n    call_function=\"transfer\",\n    call_params={\"dest\": alice.ss58_address, \"value\": 123 * 10 ** 18},\n)\nextrinsic = substrate.create_unsigned_extrinsic(transfer)\n\n# First sign will be done with alice\ncall = substrate.compose_call(\n    call_module=\"Multisig\",\n    call_function=\"approve_as_multi\",\n    call_params={\n        \"threshold\": 2,  # number of signatures requires\n        \"other_signatories\": [bob.ss58_address],  # cannot be empty\n        \"maybe_timepoint\": None,  # must be None for the first approval\n        \"call_hash\": \"0x\" + extrinsic.extrinsic_hash.hex(),\n        \"max_weight\": 215137000,\n    },\n)\n\ncall_extrinsic = substrate.create_signed_extrinsic(call, alice)\nreceipt = substrate.submit_extrinsic(call_extrinsic, wait_for_inclusion=True)\n\n# Check the events\nfor event in receipt.triggered_events:\n    print(f\"* {event.value}\")\n\n# ----------- SIGNING WITH BOB -----------\n# First get the timepoint (block_number, extrinsic_index) for the first approval above\ntimepoint = {\n    \"height\": substrate.get_block_number(receipt.block_hash),\n    \"index\": receipt.extrinsic_idx,\n}\n\n# Compose call, extrinsic should match the one above\ncall = substrate.compose_call(\n    call_module=\"Multisig\",\n    call_function=\"as_multi\",\n    call_params={\n        \"threshold\": 2,\n        \"other_signatories\": [alice.ss58_address],\n        \"maybe_timepoint\": timepoint,\n        \"call\": {\n            \"call_module\": \"Balances\",\n            \"call_function\": \"transfer\",\n            \"call_args\": {\n                \"dest\": alice.ss58_address,\n                \"value\": 123 * 10 ** 18,\n            },\n        },\n        \"store_call\": False,\n        \"max_weight\": 215137000,\n    },\n)\n\ncall_extrinsic = substrate.create_signed_extrinsic(call, bob)\nreceipt = substrate.submit_extrinsic(call_extrinsic, wait_for_inclusion=True)\n\n# Check the events\nfor event in receipt.triggered_events:\n    print(f\"* {event.value}\")\n```\n\n\n### Keypair creation and signing\n\n```python\nmnemonic = Keypair.generate_mnemonic()\nkeypair = Keypair.create_from_mnemonic(mnemonic)\nsignature = keypair.sign(\"Test123\")\nif keypair.verify(\"Test123\", signature):\n    print('Verified')\n```\n\nBy default, a keypair is using SR25519 cryptography, alternatively ED25519 can be explictly specified:\n\n```python\nkeypair = Keypair.create_from_mnemonic(mnemonic, crypto_type=KeypairType.ED25519)\n```\n\n### Creating keypairs with soft and hard key derivation paths\n\n```python\nmnemonic = Keypair.generate_mnemonic()\nkeypair = Keypair.create_from_uri(mnemonic + '//hard/soft')\n```\n\nBy omitting the mnemonic the default development mnemonic is used: \n\n```python\nkeypair = Keypair.create_from_uri('//Alice')\n```\n\n### Getting estimate of network fees for extrinsic in advance\n\n```python\nkeypair = Keypair(ss58_address=\"EaG2CRhJWPb7qmdcJvy3LiWdh26Jreu9Dx6R1rXxPmYXoDk\")\n\ncall = reef.compose_call(\n    call_module='Balances',\n    call_function='transfer',\n    call_params={\n        'dest': 'EaG2CRhJWPb7qmdcJvy3LiWdh26Jreu9Dx6R1rXxPmYXoDk',\n        'value': 1 * 10**18\n    }\n)\npayment_info = reef.get_payment_info(call=call, keypair=keypair)\n# {'class': 'normal', 'partialFee': 2499999066, 'weight': 216625000}\n```\n\n### Offline signing of extrinsics\n\nThis example generates a signature payload which can be signed on another (offline) machine and later on sent to the \nnetwork with the generated signature.\n\n- Generate signature payload on online machine:\n```python\nreef = ReefInterface(url=\"testnet\")\n\ncall = reef.compose_call(\n    call_module='Balances',\n    call_function='transfer',\n    call_params={\n        'dest': '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY',\n        'value': 1 * 10**18\n    }\n)\n\nera = {'period': 64, 'current': 22719}\nnonce = 0\n\nsignature_payload = reef.generate_signature_payload(call=call, era=era, nonce=nonce)\n```\n\n- Then on another (offline) machine generate the signature with given `signature_payload`:\n\n```python\nkeypair = Keypair.create_from_mnemonic(\"nature exchange gasp toy result bacon coin broccoli rule oyster believe lyrics\")\nsignature = keypair.sign(signature_payload)\n```\n\n- Finally on the online machine send the extrinsic with generated signature:\n\n```python\nkeypair = Keypair(ss58_address=\"5EChUec3ZQhUvY1g52ZbfBVkqjUY9Kcr6mcEvQMbmd38shQL\")\n\nextrinsic = reef.create_signed_extrinsic(\n    call=call,\n    keypair=keypair,\n    era=era,\n    nonce=nonce,\n    signature=signature\n)\n\nresult = reef.submit_extrinsic(\n    extrinsic=extrinsic\n)\n\nprint(result.extrinsic_hash)\n```\n\n### Accessing runtime constants\nAll runtime constants are provided in the metadata (see `reef.get_metadata_constants()`),\nto access these as a decoded `ScaleType` you can use the function `reef.get_constant()`:\n\n```python\nconstant = reef.get_constant(\"Balances\", \"ExistentialDeposit\")\n\nprint(constant.value) # 10000000000\n```\n\n### Batching calls\nBy using `Utility` pallet, we can submit multiple calls within a single call. In the below example we create 100 transfer calls of 10k REEF.\n\n```python\nfrom reefinterface import Keypair, ReefInterface\n\n# Connect to node\ntry:\n    network = \"ws://127.0.0.1:9944\"\n    substrate = ReefInterface(url=network)\nexcept ConnectionRefusedError:\n    print(\"Reef node could not be reached.\")\n    exit()\n\nalice = Keypair.create_from_uri(\"//Alice\")\nbob = Keypair.create_from_uri(\"//Bob\")\n\n# Transfer 1M REEF in 100 calls of 10k\ncall = substrate.compose_call(\n    call_module=\"Utility\",\n    call_function=\"batch\",\n    call_params={\n        \"calls\": [\n            {\n                \"call_module\": \"Balances\",\n                \"call_function\": \"transfer\",\n                \"call_args\": {\"dest\": bob.ss58_address, \"value\": 10000 * 10 ** 18},\n            }\n        ]\n        * 100\n    },\n)\n\nextrinsic = substrate.create_signed_extrinsic(\n    call=call, keypair=alice, era={\"period\": 64}\n)\n\nreceipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n\n# Check the events\nfor event in receipt.triggered_events:\n    print(f\"* {event.value}\")\n```\n\n## Cleanup and context manager\n\nAt the end of the lifecycle of a `ReefInterface` instance, calling the `close()` method will do all the necessary \ncleanup, like closing the websocket connection.\n\nWhen using the context manager this will be done automatically:\n\n```python\nwith ReefInterface(url=\"testnet\") as reef:\n    events = reef.query(\"System\", \"Events\")\n\n# connection is now closed\n```\n\n## Contact and Support \n\nFor questions, please reach out to us on our [matrix](http://matrix.org) chat group: [Reef Developer Chat](https://app.element.io/#/room/#reef:matrix.org).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "interface reef maldives blockchain rpc",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "reef-interface",
    "package_url": "https://pypi.org/project/reef-interface/",
    "platform": null,
    "project_url": "https://pypi.org/project/reef-interface/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/reef-interface/1.1.0/",
    "requires_dist": [
      "websocket-client (~=0.58.0)",
      "base58 (~=2.0.1)",
      "certifi (>=2020.11.8)",
      "idna (>=2.8)",
      "requests (~=2.25.1)",
      "xxhash (>=1.3.0)",
      "scalecodec (<=0.11.23,>=0.11.16)",
      "py-sr25519-bindings (~=0.1.2)",
      "py-ed25519-bindings (~=0.1.2)",
      "py-bip39-bindings (~=0.1.6)",
      "packaging (~=21.0)",
      "coverage ; extra == 'test'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Library for interfacing with a Reef node",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14402044,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3561c722542378eb56e35ea06beba5435f0d6c4d2aff663d1f4768231a592e30",
          "md5": "2df8b3e65e7a646613f25d2467f1726e",
          "sha256": "10ec127ab77a81a5049e909454ebc44678e5a6c8326766413502986dfc72475c"
        },
        "downloads": -1,
        "filename": "reef_interface-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2df8b3e65e7a646613f25d2467f1726e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 170390,
        "upload_time": "2021-07-07T16:34:14",
        "upload_time_iso_8601": "2021-07-07T16:34:14.156453Z",
        "url": "https://files.pythonhosted.org/packages/35/61/c722542378eb56e35ea06beba5435f0d6c4d2aff663d1f4768231a592e30/reef_interface-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "557288c1924d36401cad5d63f090717642f74c841c40f732817bdb503f0bde82",
          "md5": "95083825af7ba3eb8cc1c71b964bcd0e",
          "sha256": "e2bf47be75b85e4f56ae1d7d9c5cf3c30b58e98aa79f2bc957aad18c49602a8c"
        },
        "downloads": -1,
        "filename": "reef-interface-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "95083825af7ba3eb8cc1c71b964bcd0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 158064,
        "upload_time": "2021-07-07T16:34:15",
        "upload_time_iso_8601": "2021-07-07T16:34:15.901973Z",
        "url": "https://files.pythonhosted.org/packages/55/72/88c1924d36401cad5d63f090717642f74c841c40f732817bdb503f0bde82/reef-interface-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53b17c12df32d6d4713d8467620b74f3de3a5cc4b4212ebab5e900c5839f9b52",
          "md5": "14ef37c01a23c5a716f6cf8814555f77",
          "sha256": "80a1a735dbe62a83441bec3882a910a5f496f0b14f615bca58e4e72b3cbbf091"
        },
        "downloads": -1,
        "filename": "reef_interface-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14ef37c01a23c5a716f6cf8814555f77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 172034,
        "upload_time": "2021-07-07T17:42:07",
        "upload_time_iso_8601": "2021-07-07T17:42:07.049161Z",
        "url": "https://files.pythonhosted.org/packages/53/b1/7c12df32d6d4713d8467620b74f3de3a5cc4b4212ebab5e900c5839f9b52/reef_interface-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "047ebbaf9a9e1ba2c87c7bee48d5182de4cfe2a550cb6e45417ce52bfd30ae6d",
          "md5": "eeafea23ce486cc47ca6060c4021cfad",
          "sha256": "6dd03bf910e1106836d643b9ed97fd5b48105dacaeeed8a139dffcc65c7454cb"
        },
        "downloads": -1,
        "filename": "reef-interface-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eeafea23ce486cc47ca6060c4021cfad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 159759,
        "upload_time": "2021-07-07T17:42:10",
        "upload_time_iso_8601": "2021-07-07T17:42:10.089169Z",
        "url": "https://files.pythonhosted.org/packages/04/7e/bbaf9a9e1ba2c87c7bee48d5182de4cfe2a550cb6e45417ce52bfd30ae6d/reef-interface-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52d986d75d31cb51d6e2f0247fcb253d71aa9100bb0ef0cec0c522dd8c70722b",
          "md5": "5e424b389df2299b8c2ad86f3768d513",
          "sha256": "760719e2e3b67a7732b3eef80b2482854ba2b1475b73e4cbcad82c4ce12c0329"
        },
        "downloads": -1,
        "filename": "reef_interface-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e424b389df2299b8c2ad86f3768d513",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 172044,
        "upload_time": "2021-08-09T09:29:07",
        "upload_time_iso_8601": "2021-08-09T09:29:07.140750Z",
        "url": "https://files.pythonhosted.org/packages/52/d9/86d75d31cb51d6e2f0247fcb253d71aa9100bb0ef0cec0c522dd8c70722b/reef_interface-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c484ba2475ac0e05e7d5e05cd17a965e92e172b14fe5eff05fc1971e9e96be66",
          "md5": "09e39699290e3bc1c4ae05ea8475a5d4",
          "sha256": "4e6710b194185e5be875ebae8c5e6fdb190ff9fa4821f79808ba6e98e9daf83b"
        },
        "downloads": -1,
        "filename": "reef-interface-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "09e39699290e3bc1c4ae05ea8475a5d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 159823,
        "upload_time": "2021-08-09T09:29:08",
        "upload_time_iso_8601": "2021-08-09T09:29:08.493890Z",
        "url": "https://files.pythonhosted.org/packages/c4/84/ba2475ac0e05e7d5e05cd17a965e92e172b14fe5eff05fc1971e9e96be66/reef-interface-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "329c80e371e2217df9b2cb68d4f3dc443951f712620303e98dfca221420b0b74",
          "md5": "4e86f8bda8052ac810f5e5d0685f3b0a",
          "sha256": "2560f9b49100c80e082a1eecbf8e37ce152929a331bb03fee7190f38aa037d8d"
        },
        "downloads": -1,
        "filename": "reef_interface-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e86f8bda8052ac810f5e5d0685f3b0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 170246,
        "upload_time": "2021-08-18T14:45:15",
        "upload_time_iso_8601": "2021-08-18T14:45:15.317283Z",
        "url": "https://files.pythonhosted.org/packages/32/9c/80e371e2217df9b2cb68d4f3dc443951f712620303e98dfca221420b0b74/reef_interface-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44cb7746b0b347c65168d20149544717f8b513c2175044511bbf18e106c7a292",
          "md5": "5d1f2ca6a882f568c94336fc86d25bea",
          "sha256": "afbcb9531f027e0e8addc7ab7371fb0cd91c326f55165634e3d31c3233ad4e8d"
        },
        "downloads": -1,
        "filename": "reef-interface-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5d1f2ca6a882f568c94336fc86d25bea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 158316,
        "upload_time": "2021-08-18T14:45:16",
        "upload_time_iso_8601": "2021-08-18T14:45:16.881023Z",
        "url": "https://files.pythonhosted.org/packages/44/cb/7746b0b347c65168d20149544717f8b513c2175044511bbf18e106c7a292/reef-interface-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60fe1a0501234bec6e7086059a11f69e89ed0b3b23a329b97a206719ad87c440",
          "md5": "fed84c3c4d803a6a9069806f1d43706a",
          "sha256": "d9b6b2d407f94d8b2241a40447d8be2d4b0f5b8f279a50b44324facbd02434ab"
        },
        "downloads": -1,
        "filename": "reef_interface-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fed84c3c4d803a6a9069806f1d43706a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 170381,
        "upload_time": "2021-10-27T12:31:10",
        "upload_time_iso_8601": "2021-10-27T12:31:10.233176Z",
        "url": "https://files.pythonhosted.org/packages/60/fe/1a0501234bec6e7086059a11f69e89ed0b3b23a329b97a206719ad87c440/reef_interface-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05763625188b3d4514b8c2a56e31c29df310257f183f1136c82ba13dfad1dbec",
          "md5": "d536a26ea543f7e7867c77c094e693dc",
          "sha256": "3a292104cd85314fc72ce2bc5cf4d102647a99abde3f0739615f5060e1b17120"
        },
        "downloads": -1,
        "filename": "reef-interface-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d536a26ea543f7e7867c77c094e693dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 158486,
        "upload_time": "2021-10-27T12:31:11",
        "upload_time_iso_8601": "2021-10-27T12:31:11.648527Z",
        "url": "https://files.pythonhosted.org/packages/05/76/3625188b3d4514b8c2a56e31c29df310257f183f1136c82ba13dfad1dbec/reef-interface-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ce20162cfbd25dd2a0caaa2bf5cccdf0d30c50d94b458ee78fa91d70659bb71",
          "md5": "badb3df5554b04719787ac86e3b1b101",
          "sha256": "bf76411958f92a37cd99b71e35218f25e8d67cf91168bd314bbc2882cfaf70ed"
        },
        "downloads": -1,
        "filename": "reef_interface-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "badb3df5554b04719787ac86e3b1b101",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 170676,
        "upload_time": "2022-07-11T09:11:19",
        "upload_time_iso_8601": "2022-07-11T09:11:19.779737Z",
        "url": "https://files.pythonhosted.org/packages/6c/e2/0162cfbd25dd2a0caaa2bf5cccdf0d30c50d94b458ee78fa91d70659bb71/reef_interface-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0bffc8384e0586c0955dc077d28e7c257e7e0c42625d6ced1e7cc15929893ab",
          "md5": "c0bd7791b7e43c9eea28daa1240b7cba",
          "sha256": "86a770dd333179db73367a69a42655f03e520b8c724ec7f2ba9045378e8cfab4"
        },
        "downloads": -1,
        "filename": "reef-interface-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c0bd7791b7e43c9eea28daa1240b7cba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 158788,
        "upload_time": "2022-07-11T09:11:21",
        "upload_time_iso_8601": "2022-07-11T09:11:21.686450Z",
        "url": "https://files.pythonhosted.org/packages/d0/bf/fc8384e0586c0955dc077d28e7c257e7e0c42625d6ced1e7cc15929893ab/reef-interface-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac3cbd56041b3f8d3466995d292a3f3a4ee8087864d2ddb97319ceebb4f47f38",
          "md5": "f1c6932b610182bde2d5396ba1f5b7a5",
          "sha256": "266a4d577f6fba51cb92ae5c43fa08da1392d586ea4bb90dc2282e0672e32c1f"
        },
        "downloads": -1,
        "filename": "reef_interface-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1c6932b610182bde2d5396ba1f5b7a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 171607,
        "upload_time": "2022-07-11T18:20:39",
        "upload_time_iso_8601": "2022-07-11T18:20:39.788963Z",
        "url": "https://files.pythonhosted.org/packages/ac/3c/bd56041b3f8d3466995d292a3f3a4ee8087864d2ddb97319ceebb4f47f38/reef_interface-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc2f2100ca4004b39d5b0ce2660b4da44a5e1fdda0c67018e70dc533f5b3724c",
          "md5": "5e4d0fcfb280e7f3678b623b579736ec",
          "sha256": "e392944e0d260ba7a6a3d86a7f983fafc9dd22dce48e422ae14a4a86fd31dd21"
        },
        "downloads": -1,
        "filename": "reef-interface-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5e4d0fcfb280e7f3678b623b579736ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 160317,
        "upload_time": "2022-07-11T18:20:42",
        "upload_time_iso_8601": "2022-07-11T18:20:42.741591Z",
        "url": "https://files.pythonhosted.org/packages/bc/2f/2100ca4004b39d5b0ce2660b4da44a5e1fdda0c67018e70dc533f5b3724c/reef-interface-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac3cbd56041b3f8d3466995d292a3f3a4ee8087864d2ddb97319ceebb4f47f38",
        "md5": "f1c6932b610182bde2d5396ba1f5b7a5",
        "sha256": "266a4d577f6fba51cb92ae5c43fa08da1392d586ea4bb90dc2282e0672e32c1f"
      },
      "downloads": -1,
      "filename": "reef_interface-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1c6932b610182bde2d5396ba1f5b7a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 171607,
      "upload_time": "2022-07-11T18:20:39",
      "upload_time_iso_8601": "2022-07-11T18:20:39.788963Z",
      "url": "https://files.pythonhosted.org/packages/ac/3c/bd56041b3f8d3466995d292a3f3a4ee8087864d2ddb97319ceebb4f47f38/reef_interface-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc2f2100ca4004b39d5b0ce2660b4da44a5e1fdda0c67018e70dc533f5b3724c",
        "md5": "5e4d0fcfb280e7f3678b623b579736ec",
        "sha256": "e392944e0d260ba7a6a3d86a7f983fafc9dd22dce48e422ae14a4a86fd31dd21"
      },
      "downloads": -1,
      "filename": "reef-interface-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5e4d0fcfb280e7f3678b623b579736ec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 160317,
      "upload_time": "2022-07-11T18:20:42",
      "upload_time_iso_8601": "2022-07-11T18:20:42.741591Z",
      "url": "https://files.pythonhosted.org/packages/bc/2f/2100ca4004b39d5b0ce2660b4da44a5e1fdda0c67018e70dc533f5b3724c/reef-interface-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}