{
  "info": {
    "author": "",
    "author_email": "Sheng Zhong <zhsh@umich.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# PyTorch Robot Kinematics\n- Parallel and differentiable forward kinematics (FK) and Jacobian calculation\n- Load robot description from URDF, SDF, and MJCF formats \n- SDF queries batched across configurations and points via [pytorch-volumetric](https://github.com/UM-ARM-Lab/pytorch_volumetric)\n\n# Installation\n```shell\npip install pytorch-kinematics\n```\n\nFor development, clone repository somewhere, then `pip3 install -e .` to install in editable mode.\n\n# Usage\n\nSee `tests` for code samples; some are also shown here.\n\n## Reference\n[![DOI](https://zenodo.org/badge/331721571.svg)](https://zenodo.org/badge/latestdoi/331721571)\n\nIf you use this package in your research, consider citing\n```\n@software{Zhong_PyTorch_Kinematics_2023,\nauthor = {Zhong, Sheng and Power, Thomas and Gupta, Ashwin},\ndoi = {10.5281/zenodo.7700588},\nmonth = {3},\ntitle = {{PyTorch Kinematics}},\nversion = {v0.5.4},\nyear = {2023}\n}\n```\n\n## Forward Kinematics (FK)\n```python\nimport math\nimport pytorch_kinematics as pk\n\n# load robot description from URDF and specify end effector link\nchain = pk.build_serial_chain_from_urdf(open(\"kuka_iiwa.urdf\").read(), \"lbr_iiwa_link_7\")\n# prints out the (nested) tree of links\nprint(chain)\n# prints out list of joint names\nprint(chain.get_joint_parameter_names())\n\n# specify joint values (can do so in many forms)\nth = [0.0, -math.pi / 4.0, 0.0, math.pi / 2.0, 0.0, math.pi / 4.0, 0.0]\n# do forward kinematics and get transform objects; end_only=False gives a dictionary of transforms for all links\nret = chain.forward_kinematics(th, end_only=False)\n# look up the transform for a specific link\ntg = ret['lbr_iiwa_link_7']\n# get transform matrix (1,4,4), then convert to separate position and unit quaternion\nm = tg.get_matrix()\npos = m[:, :3, 3]\nrot = pk.matrix_to_quaternion(m[:, :3, :3])\n```\n\nWe can parallelize FK by passing in 2D joint values, and also use CUDA if available\n```python\nimport torch\nimport pytorch_kinematics as pk\n\nd = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ndtype = torch.float64\n\nchain = pk.build_serial_chain_from_urdf(open(\"kuka_iiwa.urdf\").read(), \"lbr_iiwa_link_7\")\nchain = chain.to(dtype=dtype, device=d)\n\nN = 1000\nth_batch = torch.rand(N, len(chain.get_joint_parameter_names()), dtype=dtype, device=d)\n\n# order of magnitudes faster when doing FK in parallel\n# elapsed 0.008678913116455078s for N=1000 when parallel\n# (N,4,4) transform matrix; only the one for the end effector is returned since end_only=True by default\ntg_batch = chain.forward_kinematics(th_batch)\n\n# elapsed 8.44686508178711s for N=1000 when serial\nfor i in range(N):\n    tg = chain.forward_kinematics(th_batch[i])\n```\n\nWe can compute gradients through the FK\n```python\nimport torch\nimport math\nimport pytorch_kinematics as pk\n\nchain = pk.build_serial_chain_from_urdf(open(\"kuka_iiwa.urdf\").read(), \"lbr_iiwa_link_7\")\n\n# require gradient through the input joint values\nth = torch.tensor([0.0, -math.pi / 4.0, 0.0, math.pi / 2.0, 0.0, math.pi / 4.0, 0.0], requires_grad=True)\ntg = chain.forward_kinematics(th)\nm = tg.get_matrix()\npos = m[:, :3, 3]\npos.norm().backward()\n# now th.grad is populated\n```\n\nWe can load SDF and MJCF descriptions too, and pass in joint values via a dictionary (unspecified joints get th=0) for non-serial chains\n```python\nimport math\nimport torch\nimport pytorch_kinematics as pk\n\nchain = pk.build_chain_from_sdf(open(\"simple_arm.sdf\").read())\nret = chain.forward_kinematics({'arm_elbow_pan_joint': math.pi / 2.0, 'arm_wrist_lift_joint': -0.5})\n# recall that we specify joint values and get link transforms\ntg = ret['arm_wrist_roll']\n\n# can also do this in parallel\nN = 100\nret = chain.forward_kinematics({'arm_elbow_pan_joint': torch.rand(N, 1), 'arm_wrist_lift_joint': torch.rand(N, 1)})\n# (N, 4, 4) transform object\ntg = ret['arm_wrist_roll']\n\n# building the robot from a MJCF file\nchain = pk.build_chain_from_mjcf(open(\"ant.xml\").read())\nprint(chain)\nprint(chain.get_joint_parameter_names())\nth = {'hip_1': 1.0, 'ankle_1': 1}\nret = chain.forward_kinematics(th)\n\nchain = pk.build_chain_from_mjcf(open(\"humanoid.xml\").read())\nprint(chain)\nprint(chain.get_joint_parameter_names())\nth = {'left_knee': 0.0, 'right_knee': 0.0}\nret = chain.forward_kinematics(th)\n```\n\n## Jacobian calculation\nThe Jacobian (in the kinematics context) is a matrix describing how the end effector changes with respect to joint value changes\n(where ![dx](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdot%7Bx%7D) is the twist, or stacked velocity and angular velocity):\n![jacobian](https://latex.codecogs.com/png.latex?%5Cinline%20%5Cdot%7Bx%7D%3DJ%5Cdot%7Bq%7D) \n\nFor `SerialChain` we provide a differentiable and parallelizable method for computing the Jacobian with respect to the base frame.\n```python\nimport math\nimport torch\nimport pytorch_kinematics as pk\n\n# can convert Chain to SerialChain by choosing end effector frame\nchain = pk.build_chain_from_sdf(open(\"simple_arm.sdf\").read())\n# print(chain) to see the available links for use as end effector\n# note that any link can be chosen; it doesn't have to be a link with no children\nchain = pk.SerialChain(chain, \"arm_wrist_roll_frame\")\n\nchain = pk.build_serial_chain_from_urdf(open(\"kuka_iiwa.urdf\").read(), \"lbr_iiwa_link_7\")\nth = torch.tensor([0.0, -math.pi / 4.0, 0.0, math.pi / 2.0, 0.0, math.pi / 4.0, 0.0])\n# (1,6,7) tensor, with 7 corresponding to the DOF of the robot\nJ = chain.jacobian(th)\n\n# get Jacobian in parallel and use CUDA if available\nN = 1000\nd = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ndtype = torch.float64\n\nchain = chain.to(dtype=dtype, device=d)\n# Jacobian calculation is differentiable\nth = torch.rand(N, 7, dtype=dtype, device=d, requires_grad=True)\n# (N,6,7)\nJ = chain.jacobian(th)\n\n# can get Jacobian at a point offset from the end effector (location is specified in EE link frame)\n# by default location is at the origin of the EE frame\nloc = torch.rand(N, 3, dtype=dtype, device=d)\nJ = chain.jacobian(th, locations=loc)\n```\n\nThe Jacobian can be used to do inverse kinematics. See [IK survey](https://www.math.ucsd.edu/~sbuss/ResearchWeb/ikmethods/iksurvey.pdf)\nfor a survey of ways to do so. Note that IK may be better performed through other means (but doing it through the Jacobian can give an end-to-end differentiable method).\n\n## SDF Queries\nSee [pytorch-volumetric](https://github.com/UM-ARM-Lab/pytorch_volumetric) for the latest details, some instructions are pasted here:\n\nFor many applications such as collision checking, it is useful to have the\nSDF of a multi-link robot in certain configurations.\nFirst, we create the robot model (loaded from URDF, SDF, MJCF, ...) with\n[pytorch kinematics](https://github.com/UM-ARM-Lab/pytorch_kinematics).\nFor example, we will be using the KUKA 7 DOF arm model from pybullet data\n\n```python\nimport os\nimport torch\nimport pybullet_data\nimport pytorch_kinematics as pk\nimport pytorch_volumetric as pv\n\nurdf = \"kuka_iiwa/model.urdf\"\nsearch_path = pybullet_data.getDataPath()\nfull_urdf = os.path.join(search_path, urdf)\nchain = pk.build_serial_chain_from_urdf(open(full_urdf).read(), \"lbr_iiwa_link_7\")\nd = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\nchain = chain.to(device=d)\n# paths to the link meshes are specified with their relative path inside the URDF\n# we need to give them the path prefix as we need their absolute path to load\ns = pv.RobotSDF(chain, path_prefix=os.path.join(search_path, \"kuka_iiwa\"))\n```\n\nBy default, each link will have a `MeshSDF`. To instead use `CachedSDF` for faster queries\n\n```python\ns = pv.RobotSDF(chain, path_prefix=os.path.join(search_path, \"kuka_iiwa\"),\n                link_sdf_cls=pv.cache_link_sdf_factory(resolution=0.02, padding=1.0, device=d))\n```\n\nWhich when the `y=0.02` SDF slice is visualized:\n\n![sdf slice](https://i.imgur.com/Putw72A.png)\n\nWith surface points corresponding to:\n\n![wireframe](https://i.imgur.com/L3atG9h.png)\n![solid](https://i.imgur.com/XiAks7a.png)\n\nQueries on this SDF is dependent on the joint configurations (by default all zero).\n**Queries are batched across configurations and query points**. For example, we have a batch of\njoint configurations to query\n\n```python\nth = torch.tensor([0.0, -math.pi / 4.0, 0.0, math.pi / 2.0, 0.0, math.pi / 4.0, 0.0], device=d)\nN = 200\nth_perturbation = torch.randn(N - 1, 7, device=d) * 0.1\n# N x 7 joint values\nth = torch.cat((th.view(1, -1), th_perturbation + th))\n```\n\nAnd also a batch of points to query (same points for each configuration):\n\n```python\ny = 0.02\nquery_range = np.array([\n    [-1, 0.5],\n    [y, y],\n    [-0.2, 0.8],\n])\n# M x 3 points\ncoords, pts = pv.get_coordinates_and_points_in_grid(0.01, query_range, device=s.device)\n```\n\nWe set the batch of joint configurations and query:\n\n```python\ns.set_joint_configuration(th)\n# N x M SDF value\n# N x M x 3 SDF gradient\nsdf_val, sdf_grad = s(pts)\n```\n\n\n# Credits\n- `pytorch_kinematics/transforms` is extracted from [pytorch3d](https://github.com/facebookresearch/pytorch3d) with minor extensions.\nThis was done instead of including `pytorch3d` as a dependency because it is hard to install and most of its code is unrelated.\n  An important difference is that we use left hand multiplied transforms as is convention in robotics (T * pt) instead of their\n  right hand multiplied transforms.\n- `pytorch_kinematics/urdf_parser_py`, and `pytorch_kinematics/mjcf_parser` is extracted from [kinpy](https://github.com/neka-nat/kinpy), as well as the FK logic.\nThis repository ports the logic to pytorch, parallelizes it, and provides some extensions.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "kinematics,pytorch,ik,fk,robotics",
    "license": "Copyright (c) 2023 University of Michigan ARM Lab  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ",
    "maintainer": "",
    "maintainer_email": "Sheng Zhong <zhsh@umich.edu>",
    "name": "pytorch-kinematics",
    "package_url": "https://pypi.org/project/pytorch-kinematics/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytorch-kinematics/",
    "project_urls": {
      "Bug Reports": "https://github.com/UM-ARM-Lab/pytorch_kinematics/issues",
      "Homepage": "https://github.com/UM-ARM-Lab/pytorch_kinematics",
      "Source": "https://github.com/UM-ARM-Lab/pytorch_kinematics"
    },
    "release_url": "https://pypi.org/project/pytorch-kinematics/0.5.6/",
    "requires_dist": [
      "torch",
      "numpy",
      "transformations",
      "absl-py",
      "lxml",
      "dm-control",
      "pyyaml",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Robot kinematics implemented in pytorch",
    "version": "0.5.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17306523,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdc0d7f504c506dc59b8218f57a11200c828a9393958c9b5b0e32074343c4d7e",
          "md5": "1aae005fa9d91a66f1555edee5d50ef3",
          "sha256": "bdd3cd6d2123e02f863e7e68f40ad173ccd74cdb7de15d40cbab65cbb5cf8fd6"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1aae005fa9d91a66f1555edee5d50ef3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45084,
        "upload_time": "2023-02-10T04:50:04",
        "upload_time_iso_8601": "2023-02-10T04:50:04.291853Z",
        "url": "https://files.pythonhosted.org/packages/bd/c0/d7f504c506dc59b8218f57a11200c828a9393958c9b5b0e32074343c4d7e/pytorch_kinematics-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de7228a75b9747ce84a967e27c1c962bf8e927142a3b2bd6f65745eaff90ed7c",
          "md5": "9be7c7abbb644f5dda235da0955cb7eb",
          "sha256": "c5f0e8a542fe45302b12622e7154ba6a49bb4e75c544627915e7b576fecb59d7"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9be7c7abbb644f5dda235da0955cb7eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 45335,
        "upload_time": "2023-02-10T04:50:05",
        "upload_time_iso_8601": "2023-02-10T04:50:05.633389Z",
        "url": "https://files.pythonhosted.org/packages/de/72/28a75b9747ce84a967e27c1c962bf8e927142a3b2bd6f65745eaff90ed7c/pytorch_kinematics-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfa72d17673472f9650dd0c151c06770842e4ea79a63debe66745c04a8458ed0",
          "md5": "7bcab77edcb672b6826edf4b948b363b",
          "sha256": "3cd0515a817237a5583f17693d1d7b753ecca76206aaa3418925efadf3f28dbd"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bcab77edcb672b6826edf4b948b363b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45250,
        "upload_time": "2023-02-11T01:32:28",
        "upload_time_iso_8601": "2023-02-11T01:32:28.002876Z",
        "url": "https://files.pythonhosted.org/packages/bf/a7/2d17673472f9650dd0c151c06770842e4ea79a63debe66745c04a8458ed0/pytorch_kinematics-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4c8d94b1ea9603d56f6c2665cce329f7023a06ccf94ba294fc8177b47cd3ca9",
          "md5": "11f29ba4bc0e48b0ae4750dd29206895",
          "sha256": "fcefb18c6344f84e7f515f616999215acb40bac60c464cc1afc54651d1f748e1"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "11f29ba4bc0e48b0ae4750dd29206895",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 45660,
        "upload_time": "2023-02-11T01:32:29",
        "upload_time_iso_8601": "2023-02-11T01:32:29.306062Z",
        "url": "https://files.pythonhosted.org/packages/a4/c8/d94b1ea9603d56f6c2665cce329f7023a06ccf94ba294fc8177b47cd3ca9/pytorch_kinematics-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "083b9d108622e7e362d996241ef8ed7a12eddaf2b4c848e055a1612bb70ab618",
          "md5": "dbda443513c4cadf7a6449712d89bc8f",
          "sha256": "0a48313ba0a998861224c4838d4edaa26706b9017c08083ad2e77d285ae45790"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbda443513c4cadf7a6449712d89bc8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45358,
        "upload_time": "2023-02-21T03:35:11",
        "upload_time_iso_8601": "2023-02-21T03:35:11.208572Z",
        "url": "https://files.pythonhosted.org/packages/08/3b/9d108622e7e362d996241ef8ed7a12eddaf2b4c848e055a1612bb70ab618/pytorch_kinematics-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6c7598d46136e703d07836cdd93468c830ef4123bb3e7abc0906045f733a1bc",
          "md5": "983112782c5fe1368578557c7eddb276",
          "sha256": "5595d6f38d3a1eb7a1fd66fe079562d04287d58b2462cfb73c5a5739b2b2f851"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "983112782c5fe1368578557c7eddb276",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 45785,
        "upload_time": "2023-02-21T03:35:13",
        "upload_time_iso_8601": "2023-02-21T03:35:13.116262Z",
        "url": "https://files.pythonhosted.org/packages/c6/c7/598d46136e703d07836cdd93468c830ef4123bb3e7abc0906045f733a1bc/pytorch_kinematics-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbbf85c86b535526add35a4dc77689e255006327a17f530999fd957c53ae9869",
          "md5": "2cc2f95912753949f0d4ad2cd10eae6a",
          "sha256": "58a48d162a1613854241dc00302f8af433d93a0ca1c0c9948e51c78171c01326"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cc2f95912753949f0d4ad2cd10eae6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 46064,
        "upload_time": "2023-02-21T23:31:51",
        "upload_time_iso_8601": "2023-02-21T23:31:51.822795Z",
        "url": "https://files.pythonhosted.org/packages/fb/bf/85c86b535526add35a4dc77689e255006327a17f530999fd957c53ae9869/pytorch_kinematics-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93160327e392ad8c561f6bc97d11c0e9628b1c8ec088a74770c4d942e41b1cbe",
          "md5": "6f389a3b7b7130333575fe1acdad1030",
          "sha256": "b05c6cd711e2523673feaaf1dedb3039212fbf747fe397611e7554e2773cced2"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f389a3b7b7130333575fe1acdad1030",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46325,
        "upload_time": "2023-02-21T23:31:53",
        "upload_time_iso_8601": "2023-02-21T23:31:53.430324Z",
        "url": "https://files.pythonhosted.org/packages/93/16/0327e392ad8c561f6bc97d11c0e9628b1c8ec088a74770c4d942e41b1cbe/pytorch_kinematics-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b239b04840fa5189d7224e8d9e5dca31c307d30fe1a65d542a5fa774eb7adfb5",
          "md5": "166afb431a8276af3b44b778f7e28d2c",
          "sha256": "78b70d8bae83de924c0d6c3d74ebccd0677fa86bd16f10a462721da65ce0df8c"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "166afb431a8276af3b44b778f7e28d2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47025,
        "upload_time": "2023-02-23T16:39:18",
        "upload_time_iso_8601": "2023-02-23T16:39:18.947576Z",
        "url": "https://files.pythonhosted.org/packages/b2/39/b04840fa5189d7224e8d9e5dca31c307d30fe1a65d542a5fa774eb7adfb5/pytorch_kinematics-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ec738767f0d899fbf6a5a9364e3dc35243d825177c45d2fcd4a913d6c05e54d",
          "md5": "3350c1aa90024d7654d18d37b0e8e8d2",
          "sha256": "15bb995723a634bad9d8f42cb5338fed2b08d42e87ff15febd2b920ff48e4637"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3350c1aa90024d7654d18d37b0e8e8d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48386,
        "upload_time": "2023-02-23T16:39:21",
        "upload_time_iso_8601": "2023-02-23T16:39:21.548957Z",
        "url": "https://files.pythonhosted.org/packages/7e/c7/38767f0d899fbf6a5a9364e3dc35243d825177c45d2fcd4a913d6c05e54d/pytorch_kinematics-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dfcdf274168425dd3df82b998bf346eb6ff5dbc4dae97ebbab0f24814f508c2",
          "md5": "ae3b548757b90dd7c1c8730fbc924011",
          "sha256": "a97a64aaa351073d97e74b3edcc2a58207f93834e4e4b47481997404dc08cba7"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae3b548757b90dd7c1c8730fbc924011",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47133,
        "upload_time": "2023-02-23T18:42:52",
        "upload_time_iso_8601": "2023-02-23T18:42:52.010594Z",
        "url": "https://files.pythonhosted.org/packages/6d/fc/df274168425dd3df82b998bf346eb6ff5dbc4dae97ebbab0f24814f508c2/pytorch_kinematics-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "add3ff63f3568de2dd54e32c7655f1afe221cafdb4c5e6ba9807f22b5d965a12",
          "md5": "c73892d0189f3135c1cc98eff221f5b0",
          "sha256": "9397d633ff21a60b9d3b391b1a7eaf2c486a23f209edb2bb1e4d18a99c44ac5e"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c73892d0189f3135c1cc98eff221f5b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 49082,
        "upload_time": "2023-02-23T18:42:55",
        "upload_time_iso_8601": "2023-02-23T18:42:55.472621Z",
        "url": "https://files.pythonhosted.org/packages/ad/d3/ff63f3568de2dd54e32c7655f1afe221cafdb4c5e6ba9807f22b5d965a12/pytorch_kinematics-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f46245686732f06c72b610fd1a334eab0c9dba5229dada62b9222be080d5164f",
          "md5": "d839816ca0966a42f9e7ca8f1aa50d3d",
          "sha256": "e6b9f61bad5ac1312a3d43a3a1228a4d9cbcbddb9f36649b52cf175d2588442b"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d839816ca0966a42f9e7ca8f1aa50d3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47138,
        "upload_time": "2023-02-23T19:02:05",
        "upload_time_iso_8601": "2023-02-23T19:02:05.547363Z",
        "url": "https://files.pythonhosted.org/packages/f4/62/45686732f06c72b610fd1a334eab0c9dba5229dada62b9222be080d5164f/pytorch_kinematics-0.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80171c552a2a5bb0c7564c0d0032e13fca2494c6d3c2b9588b4345f277e52243",
          "md5": "dc7ccc50daa8edecc41505901d0d39b4",
          "sha256": "034199c9c129f44db64aa304044476bc5d1e2b739ba0619fa58f90013a614bdf"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dc7ccc50daa8edecc41505901d0d39b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 49105,
        "upload_time": "2023-02-23T19:02:10",
        "upload_time_iso_8601": "2023-02-23T19:02:10.061384Z",
        "url": "https://files.pythonhosted.org/packages/80/17/1c552a2a5bb0c7564c0d0032e13fca2494c6d3c2b9588b4345f277e52243/pytorch_kinematics-0.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a503f737cef7cd3df5d5591061f72a8198f9a21e39533422fd4de1500fbeaa66",
          "md5": "86dc9ef6b9746b0c561458ecc3aa7373",
          "sha256": "3aa8ec2ebf8cb8c5f88f373d6acba1cf67da01ff34097683b26f04029ea61d32"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86dc9ef6b9746b0c561458ecc3aa7373",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47334,
        "upload_time": "2023-03-09T00:29:34",
        "upload_time_iso_8601": "2023-03-09T00:29:34.469125Z",
        "url": "https://files.pythonhosted.org/packages/a5/03/f737cef7cd3df5d5591061f72a8198f9a21e39533422fd4de1500fbeaa66/pytorch_kinematics-0.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cd12bf2aad581db64aeed94ffe0b85acbba89700648713c47e8a2b5ec663ffc",
          "md5": "8402608b549ac937137226979868e264",
          "sha256": "c36ee0e3c9ee2a54ba58bc3a62e04cd907054776ab51aaa266b032d6565a6146"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8402608b549ac937137226979868e264",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 49507,
        "upload_time": "2023-03-09T00:29:36",
        "upload_time_iso_8601": "2023-03-09T00:29:36.287022Z",
        "url": "https://files.pythonhosted.org/packages/7c/d1/2bf2aad581db64aeed94ffe0b85acbba89700648713c47e8a2b5ec663ffc/pytorch_kinematics-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16b7969e12ed71ad58ff0b520035e39f4f2ad73cda7876f45a12cf6b992b30db",
          "md5": "3784fe7d218149c88ae24a3ec09fc7c6",
          "sha256": "10c73a9021c22d5e30216e0d3fd0f3b8447fec5b31de68f82820a95d91f5c6f5"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3784fe7d218149c88ae24a3ec09fc7c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47359,
        "upload_time": "2023-03-15T16:55:03",
        "upload_time_iso_8601": "2023-03-15T16:55:03.741183Z",
        "url": "https://files.pythonhosted.org/packages/16/b7/969e12ed71ad58ff0b520035e39f4f2ad73cda7876f45a12cf6b992b30db/pytorch_kinematics-0.5.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "593255b0fb82ad7d79f9fdb79de75743b7552ae1a3108246f0263f0bb93f79a0",
          "md5": "10d92fb9eca0a1d98c3834d74f754698",
          "sha256": "ebc14633d5adcec66d78e0c29649365ec52e2360f89ff27a7f803a8f283daf54"
        },
        "downloads": -1,
        "filename": "pytorch_kinematics-0.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "10d92fb9eca0a1d98c3834d74f754698",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 49519,
        "upload_time": "2023-03-15T16:55:05",
        "upload_time_iso_8601": "2023-03-15T16:55:05.597758Z",
        "url": "https://files.pythonhosted.org/packages/59/32/55b0fb82ad7d79f9fdb79de75743b7552ae1a3108246f0263f0bb93f79a0/pytorch_kinematics-0.5.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16b7969e12ed71ad58ff0b520035e39f4f2ad73cda7876f45a12cf6b992b30db",
        "md5": "3784fe7d218149c88ae24a3ec09fc7c6",
        "sha256": "10c73a9021c22d5e30216e0d3fd0f3b8447fec5b31de68f82820a95d91f5c6f5"
      },
      "downloads": -1,
      "filename": "pytorch_kinematics-0.5.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3784fe7d218149c88ae24a3ec09fc7c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 47359,
      "upload_time": "2023-03-15T16:55:03",
      "upload_time_iso_8601": "2023-03-15T16:55:03.741183Z",
      "url": "https://files.pythonhosted.org/packages/16/b7/969e12ed71ad58ff0b520035e39f4f2ad73cda7876f45a12cf6b992b30db/pytorch_kinematics-0.5.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "593255b0fb82ad7d79f9fdb79de75743b7552ae1a3108246f0263f0bb93f79a0",
        "md5": "10d92fb9eca0a1d98c3834d74f754698",
        "sha256": "ebc14633d5adcec66d78e0c29649365ec52e2360f89ff27a7f803a8f283daf54"
      },
      "downloads": -1,
      "filename": "pytorch_kinematics-0.5.6.tar.gz",
      "has_sig": false,
      "md5_digest": "10d92fb9eca0a1d98c3834d74f754698",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 49519,
      "upload_time": "2023-03-15T16:55:05",
      "upload_time_iso_8601": "2023-03-15T16:55:05.597758Z",
      "url": "https://files.pythonhosted.org/packages/59/32/55b0fb82ad7d79f9fdb79de75743b7552ae1a3108246f0263f0bb93f79a0/pytorch_kinematics-0.5.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}