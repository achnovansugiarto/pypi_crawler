{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Pongo\n=====\n\nPongo reads scripts from a file, uploads them to remote hosts and executes them there.\n\n- Write a script once and run it on multiple hosts\n- Target hosts by tag (eg \"webservers\" or \"aws\")\n- Per-host and per-tag customization via Jinja2 templated configuration files\n\n\nExample: installing a web application with Pongo\n================================================\n\nThis example demonstrates using Pongo to install WordPress on FreeBSD.\n\nCreate a new directory called ``wordpress``. This is called the pongo script directory, and must contain a file named ``Pongofile``.\nCreate a new text file called ``wordpress/Pongofile``::\n\n    default:\n        script:\n            pkg install -y wordpress\n            pkg install -y mariadb106-server\n            pkg install -y nginx\n            pkg install -y wordpress\n\n            rinstall nginx.conf /usr/local/etc/nginx/nginx.conf\n\n            sysrc mysql_enable=YES\n            sysrc php_fpm_enable=YES\n            sysrc nginx_enable=YES\n\n            service mysql-server start\n            service php-fpm start\n            service nginx start\n\nThis defines a single target named ``default``. The script block is a regular\nshell script that will be uploaded to the server and run from within a staging\ndirectory.\n\nOther files can be added inside the ``wordpress`` script directory.\nAll other files will be uploaded to the staging directory,\nso as to be available to scripts.\nTo make this example work you need to place an ``nginx.conf`` inside\nthe script directory::\n\n    user www;\n    worker_processes auto;\n    error_log /var/log/nginx/error.log;\n    events {\n        worker_connections 1024;\n    }\n    http {\n        include mime.types;\n        default_type application/octet-stream;\n        keepalive_timeout 65;\n        server {\n            listen 80 default_server;\n            root /usr/local/www/wordpress;\n            index index.php;\n            location / {\n                try_files $uri $uri/ /index.php?q=$uri&$args;\n            }\n            error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n                root /usr/local/www/nginx-dist;\n            }\n            location ~ \\.php$ {\n                try_files $uri =404;\n                fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n                fastcgi_pass localhost:9000;\n                fastcgi_index index.php;\n                fastcgi_param SCRIPT_FILENAME $request_filename;\n                include fastcgi_params;\n            }\n        }\n    }\n\n\nThe ``rinstall`` command is a utility script that is always provided in the\n``bin/`` subdirectory of the staging directory.\nIt installs the named file to the specified location.\n\nInvoke pongo by passing it the path of the ``wordpress`` directory and a host to run against::\n\n    pongo --host webserver.example.com wordpress\n\n\nWhat does Pongo do when you run this command?\n---------------------------------------------\n\nFor each host specified,\nPongo opens an ssh connection and creates a temporary staging directory.\n\nIt populates this staging directory with:\n\n- the `rinstall and rsub`_ utility scripts\n\n- all ``script`` blocks from your Pongofile. These are passed through the\n  Jinja2 templating engine, making it possible to customize scripts per-host.\n  Scripts are sorted in execution order and numbered.\n\n- any other files present in your script directory.\n\nThe final structure might look like this::\n\n    /tmp/pongo-staging.zikzsvis/wordpress-4bef9a/00.default\n    /tmp/pongo-staging.zikzsvis/wordpress-4bef9a/nginx.conf\n    /tmp/pongo-staging.zikzsvis/wordpress-4bef9a/bin/rinstall\n    /tmp/pongo-staging.zikzsvis/wordpress-4bef9a/bin/rsub\n\nPongo then executes all the scripts in order - in this example, only ``00.default``\n\nOnce all scripts have been executed, Pongo deletes the staging directory and disconnects from the server.\n\n\nPongofile\n=========\n\nPongo scripts must be contained in a file named\n``Pongofile``. This file lists one or more targets, and uses indentation to\nindicate structure.\n\nTarget names form the outermost level. Each target will usually have a ``script`` directive, but may contain other directives,\nlike ``env`` to set environment variables while running the script or\n``before`` to indicate a dependency. Here's an example of some targets from a\nfile named ``sysadmin-tasks/Pongofile``::\n\n    freebsd-update-fetch:\n        script:\n            freebsd-update fetch\n\n    freebsd-update:\n        before: freebsd-update-fetch\n        env: PAGER=cat\n        script:\n            freebsd-update install\n\nThese targets could be run with the command line::\n\n    pongo --host <hostspec> sysadmin-tasks freebsd-update\n\nIf no target name is specified on the command line, Pongo will look for a\ntarget named ``default``.\n\nDirectives\n----------\n\n``env``\n    An environment variable to be set on the server execution. May be specified multiple times.\n\n``before``\n    A script that must be run before this one. May be specified multiple times.\n    TODO: a script from a different file may be selected with the syntax ``otherfile.pongo:scriptname``\n\n``after``\n    A script that must be run after this one. May be specified multiple times.\n\n``interpreter``\n    The script interpreter to use. defaults to ``/bin/sh``.\n\n``user``\n    The user to run as, defaulting to ``root``.\n    Adding this directive but leaving it empty will cause the script to be run\n    without elevated privileges.\n\n``script``\n    The text of the script itself.\n\n``local``\n    If this directive is present, the script will be run on the local machine\n\n``pipe-from``\n    Input to this script will be piped from the named script.\n\n``message``\n    A message to be displayed after this script completes\n\n``confirm``\n    A confirmation step, that must be answered interactively by the user before\n    the script is run.\n\nAll directive values are evaluated using `jinja2\n<https://jinja.palletsprojects.com/>`_. You can pass variables to the Jinja2\ntemplating engine by specifying values in the ``environ`` section of the host\nand tag configuration.\n\nrinstall and rsub\n-----------------\n\nThese are automatically placed into a ``bin`` subdirectory of the staging directory.\nThese files are from the `rset project <https://scriptedconfiguration.org/>`_, which has informed and inspired the design of pongo.\n\n`rinstall man page <https://scriptedconfiguration.org/man/rinstall.1.html>`_\n\n`rsub man page <https://scriptedconfiguration.org/man/rsub.1.html>`_\n\nOther files\n-----------\n\nFiles in the script directory will be uploaded to the staging directory.\nAny files with the extension ``.j2``\nare treated as jinja2 templates\nand will be pre-rendered with values loaded from the host's environ configuration before uploading.\n\n\nEnvironment variables:\n----------------------\n\n``PONGO_SSH`` - the ssh executable\n``PONGO_SSH_OPTS`` - arguments to pass to ssh\n``PONGO_HOST`` - the current host, as supplied to pongo\n``PONGO_HOSTNAME`` - the resolved hostname of the current host\n``PONGO_HOST_IP`` - the current host's IP address\n``PONGO_CONNECT_USER`` - the username to connect with\n``PONGO_USER`` - if set, commands will be executed under sudo as the named user\n\nOther environment variables can be set in one of the following config files.\nThese are read in order, with later ones overriding variables set in earlier\nones:\n\n- ``pongo.conf.d/environ.json``\n- ``pongo.conf.d/tags/<tag>/environ.json``\n- ``pongo.conf.d/<hostname>/environ.json``\n\n(You can also use toml format for these files if you prefer).\n\nEnvironment variables read from these files are subject to template expansion and interpolation, using\nJinja2. For exsmple::\n\n    # In pongo.conf.d/environ.toml\n    backup_files='/usr/local /home'\n\n    # In pongo.conf.d/<hostname>/environ.toml\n    backup_files='{{ backup_files }} /var/db'\n\n\nConfiguration\n==============\n\nPongo loads its configuration from a directory named ``pongo.conf.d``. It will search for this:\n\n- in any location specified by ``--config``\n- in ``$XDG_CONFIG_HOME``\n- in ``$HOME/.config``\n\nThe configuration directory should have the following structure:\n\n\n``pongo.conf.d/scriptbase`` - a file naming the path where script directories will be searched for\n``pongo.conf.d/environ.json`` - default values supplied to the Jinja templating engine\n``pongo.conf.d/hosts/`` - a directory containing per-host configuration, explained below.\n``pongo.conf.d/tags/`` - a directory containing per-tag configuration, explained below.\n\nHosts\n-----\n\nEach host should have a subdirectory containing its configuration. This may contain any of the following files::\n\n``pongo.conf.d/hosts/<host>/hostname`` - hostname to use for ssh connection\n``pongo.conf.d/hosts/<host>/user`` - user for ssh connection\n``pongo.conf.d/hosts/<host>/sudo`` - sudo program to use\n``pongo.conf.d/hosts/<host>/tags`` - a list of tags to apply to the host, one per line\n``pongo.conf.d/hosts/<host>/environ.json`` - extra environment vairables\n\n\nTags\n----\n\nHosts can be grouped by tags.\nTag a host by create a file named ``pongo.conf.d/hosts/<host>/tags``, with one tag per line.\nYou can add as many tags as you find useful, perhasp tagging by role (eg\n``webserver``, ``database``), by technology (eg ``openbsd``, ``linux``), by\nlocation (``europe``, ``asia``) and so on.\n\nTarget tagged groups by using the syntax ``--host @<tag>``, eg::\n\n    pongo --host @freebsd\n    pongo --host @ovh\n\nNote: the special tag ``@all`` can be used to target all hosts.\n\nTags can be configured by adding files under ``pongo.conf.d/tags/<tag>``, for example::\n\n    ``pongo.conf.d/tags/<tag>/environ.json`` - environ variables to apply to all servers with this tag\n    ``pongo.conf.d/tags/<tag>/tags - other tags which are included automatically\n\nFor example, you might have a tag ``postgresql15``, which includes the tag\n``postgresql``, which includes the tag ``database``.\n\n\nAd-hoc scripts\n==============\n\nAd-hoc scripts can be run with ``--command``/``-c``, for example:\n\n    pongo --host @all --command \"uptime\"\n\nIn this case a script directory is not required.\n\n\nOutput\n======\n\nPongo outputs all responses from the server to stdout. It also creates a\nlogging directory named ``/tmp/pongo-<target>-<date>/``. Within this directory\nPongo creates one file per host containing that host's output.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pongo-cm",
    "package_url": "https://pypi.org/project/pongo-cm/",
    "platform": null,
    "project_url": "https://pypi.org/project/pongo-cm/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pongo-cm/0.1.1/",
    "requires_dist": [
      "jinja2"
    ],
    "requires_python": "",
    "summary": "Server configuration managment tool",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15844228,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a805888c0fa096fc570500ee39fb4c2333dd91802f38ccfcab63e8524ae21f6",
          "md5": "56e7a43ad2f03b4a2e9a282429508abe",
          "sha256": "bcf9e56025b4c5a1137a4fe20b5d814cbcc8f0a534d4d8adbc3617be16ede8a4"
        },
        "downloads": -1,
        "filename": "pongo_cm-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56e7a43ad2f03b4a2e9a282429508abe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24526,
        "upload_time": "2022-11-21T18:30:48",
        "upload_time_iso_8601": "2022-11-21T18:30:48.696501Z",
        "url": "https://files.pythonhosted.org/packages/1a/80/5888c0fa096fc570500ee39fb4c2333dd91802f38ccfcab63e8524ae21f6/pongo_cm-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f87e1efb0bc324cbd26775da39bef4e3b91f6e2b664e4d7cbfb593b7e82e77a2",
          "md5": "166bfb6d64b71a397fa149bdfabcf633",
          "sha256": "7cdc6ebf589cf78af813a4b9a4870d44bfc8d7f39e4c02bce4bf229939a1478a"
        },
        "downloads": -1,
        "filename": "pongo-cm-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "166bfb6d64b71a397fa149bdfabcf633",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23198,
        "upload_time": "2022-11-21T18:30:51",
        "upload_time_iso_8601": "2022-11-21T18:30:51.935071Z",
        "url": "https://files.pythonhosted.org/packages/f8/7e/1efb0bc324cbd26775da39bef4e3b91f6e2b664e4d7cbfb593b7e82e77a2/pongo-cm-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d4548852402c1e56328c3bbc85808f5ab7c9d1fcee1fc72aded1f84fdcf1ab2",
          "md5": "42577c25e11ba93676d08e88fe20f70f",
          "sha256": "bc4c67bc5518c772eb5fe3d12d71dd6d837bee5e0f6b767f06f9456506f62823"
        },
        "downloads": -1,
        "filename": "pongo_cm-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42577c25e11ba93676d08e88fe20f70f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24589,
        "upload_time": "2022-11-21T18:47:25",
        "upload_time_iso_8601": "2022-11-21T18:47:25.313170Z",
        "url": "https://files.pythonhosted.org/packages/1d/45/48852402c1e56328c3bbc85808f5ab7c9d1fcee1fc72aded1f84fdcf1ab2/pongo_cm-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56aad8532e37c7049ed8647dd609f506deb1a8cb6dc44a52ef7e19be765725dd",
          "md5": "33de51ad3f21828665f05b8a0a47ac3e",
          "sha256": "be003b5fcb940f3bc320a368ac3bea423d13d483f4efe90852cdf35c5ec0fe21"
        },
        "downloads": -1,
        "filename": "pongo-cm-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "33de51ad3f21828665f05b8a0a47ac3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23282,
        "upload_time": "2022-11-21T18:47:27",
        "upload_time_iso_8601": "2022-11-21T18:47:27.618800Z",
        "url": "https://files.pythonhosted.org/packages/56/aa/d8532e37c7049ed8647dd609f506deb1a8cb6dc44a52ef7e19be765725dd/pongo-cm-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d4548852402c1e56328c3bbc85808f5ab7c9d1fcee1fc72aded1f84fdcf1ab2",
        "md5": "42577c25e11ba93676d08e88fe20f70f",
        "sha256": "bc4c67bc5518c772eb5fe3d12d71dd6d837bee5e0f6b767f06f9456506f62823"
      },
      "downloads": -1,
      "filename": "pongo_cm-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "42577c25e11ba93676d08e88fe20f70f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24589,
      "upload_time": "2022-11-21T18:47:25",
      "upload_time_iso_8601": "2022-11-21T18:47:25.313170Z",
      "url": "https://files.pythonhosted.org/packages/1d/45/48852402c1e56328c3bbc85808f5ab7c9d1fcee1fc72aded1f84fdcf1ab2/pongo_cm-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56aad8532e37c7049ed8647dd609f506deb1a8cb6dc44a52ef7e19be765725dd",
        "md5": "33de51ad3f21828665f05b8a0a47ac3e",
        "sha256": "be003b5fcb940f3bc320a368ac3bea423d13d483f4efe90852cdf35c5ec0fe21"
      },
      "downloads": -1,
      "filename": "pongo-cm-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "33de51ad3f21828665f05b8a0a47ac3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23282,
      "upload_time": "2022-11-21T18:47:27",
      "upload_time_iso_8601": "2022-11-21T18:47:27.618800Z",
      "url": "https://files.pythonhosted.org/packages/56/aa/d8532e37c7049ed8647dd609f506deb1a8cb6dc44a52ef7e19be765725dd/pongo-cm-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}