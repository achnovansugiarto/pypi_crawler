{
  "info": {
    "author": "Tom Christie",
    "author_email": "tom@tomchristie.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# Broadcaster (Permit fork)\n\nThis is a fork of [encode/broadcaster](https://github.com/encode/broadcaster).\n\n----\n\nBroadcaster helps you develop realtime streaming functionality by providing\na simple broadcast API onto a number of different backend services.\n\nIt currently supports [Redis PUB/SUB](https://redis.io/topics/pubsub), [Apache Kafka](https://kafka.apache.org/), and [Postgres LISTEN/NOTIFY](https://www.postgresql.org/docs/current/sql-notify.html), plus a simple in-memory backend, that you can use for local development or during testing.\n\n<img src=\"https://raw.githubusercontent.com/encode/broadcaster/master/docs/demo.gif\" alt='WebSockets Demo'>\n\nHere's a complete example of the backend code for a simple websocket chat app:\n\n**app.py**\n\n```python\n# Requires: `starlette`, `uvicorn`, `jinja2`\n# Run with `uvicorn example:app`\nfrom broadcaster import Broadcast\nfrom starlette.applications import Starlette\nfrom starlette.concurrency import run_until_first_complete\nfrom starlette.routing import Route, WebSocketRoute\nfrom starlette.templating import Jinja2Templates\n\n\nbroadcast = Broadcast(\"redis://localhost:6379\")\ntemplates = Jinja2Templates(\"templates\")\n\n\nasync def homepage(request):\n    template = \"index.html\"\n    context = {\"request\": request}\n    return templates.TemplateResponse(template, context)\n\n\nasync def chatroom_ws(websocket):\n    await websocket.accept()\n    await run_until_first_complete(\n        (chatroom_ws_receiver, {\"websocket\": websocket}),\n        (chatroom_ws_sender, {\"websocket\": websocket}),\n    )\n\n\nasync def chatroom_ws_receiver(websocket):\n    async for message in websocket.iter_text():\n        await broadcast.publish(channel=\"chatroom\", message=message)\n\n\nasync def chatroom_ws_sender(websocket):\n    async with broadcast.subscribe(channel=\"chatroom\") as subscriber:\n        async for event in subscriber:\n            await websocket.send_text(event.message)\n\n\nroutes = [\n    Route(\"/\", homepage),\n    WebSocketRoute(\"/\", chatroom_ws, name='chatroom_ws'),\n]\n\n\napp = Starlette(\n    routes=routes, on_startup=[broadcast.connect], on_shutdown=[broadcast.disconnect],\n)\n```\n\nThe HTML template for the front end [is available here](https://github.com/encode/broadcaster/blob/master/example/templates/index.html), and is adapted from [Pieter Noordhuis's PUB/SUB demo](https://gist.github.com/pietern/348262).\n\n## Requirements\n\nPython 3.7+\n\n## Installation\n\n* `pip install permit-broadcaster`\n* `pip install permit-broadcaster[redis]`\n* `pip install permit-broadcaster[postgres]`\n* `pip install permit-broadcaster[kafka]`\n\n## Available backends\n\n* `Broadcast('memory://')`\n* `Broadcast(\"redis://localhost:6379\")`\n* `Broadcast(\"postgres://localhost:5432/broadcaster\")`\n* `Broadcast(\"kafka://localhost:9092\")`\n* `Broadcast(\"kafka://broker_1:9092,broker_2:9092\")`\n\n## Kafka environment variables\n\nThe following environment variables are exposed to allow SASL authentication with Kafka (along with their default assignment):\n\n```\nKAFKA_SECURITY_PROTOCOL=PLAINTEXT   # PLAINTEXT, SASL_PLAINTEXT, SASL_SSL\nKAFKA_SASL_MECHANISM=PLAIN   # PLAIN, SCRAM-SHA-256, SCRAM-SHA-512\nKAFKA_PLAIN_USERNAME=None   # any str\nKAFKA_PLAIN_PASSWORD=None   # any str\n```\n\nFor full details refer to the (AIOKafka options)[https://aiokafka.readthedocs.io/en/stable/api.html#producer-class] where the variable name matches the capitalised env var with an additional `KAFKA_` prefix.\n\n## Where next?\n\nAt the moment `broadcaster` is in Alpha, and should be considered a working design document.\n\nThe API should be considered subject to change. If you *do* want to use Broadcaster in its current\nstate, make sure to strictly pin your requirements to `broadcaster==0.2.0`.\n\nTo be more capable we'd really want to add some additional backends, provide API support for reading recent event history from persistent stores, and provide a serialization/deserialization API...\n\n* Serialization / deserialization to support broadcasting structured data.\n* Backends for Redis Streams, Apache Kafka, and RabbitMQ.\n* Add support for `subscribe('chatroom', history=100)` for backends which provide persistence. (Redis Streams, Apache Kafka) This will allow applications to subscribe to channel updates, while also being given an initial window onto the most recent events. We *might* also want to support some basic paging operations, to allow applications to scan back in the event history.\n* Support for pattern subscribes in backends that support it.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/permitio/broadcaster",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "permit-broadcaster",
    "package_url": "https://pypi.org/project/permit-broadcaster/",
    "platform": null,
    "project_url": "https://pypi.org/project/permit-broadcaster/",
    "project_urls": {
      "Homepage": "https://github.com/permitio/broadcaster"
    },
    "release_url": "https://pypi.org/project/permit-broadcaster/0.2.2/",
    "requires_dist": [
      "aiokafka ; extra == 'kafka'",
      "asyncpg ; extra == 'postgres'",
      "asyncio-redis ; extra == 'redis'",
      "pytest ; extra == 'test'",
      "pytest-asyncio ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Simple broadcast channels (Permit fork)",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17460829,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81439ab1c5e9db70d61eb25dff5a044ee109f3c70afd452c6aa6a1f651c8dd3c",
          "md5": "098be6d4a87430515ffa07a6b8e2e7c2",
          "sha256": "fe8e5636c039fdf8b41597b4d1e780e936fdb67bc2d87c90f9e007d61f68366d"
        },
        "downloads": -1,
        "filename": "permit_broadcaster-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "098be6d4a87430515ffa07a6b8e2e7c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9353,
        "upload_time": "2022-06-12T20:06:58",
        "upload_time_iso_8601": "2022-06-12T20:06:58.904660Z",
        "url": "https://files.pythonhosted.org/packages/81/43/9ab1c5e9db70d61eb25dff5a044ee109f3c70afd452c6aa6a1f651c8dd3c/permit_broadcaster-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a7c270436fc0da1caee454467e0f35046ca2e8ae9921d3064225d2f21e5e606",
          "md5": "9c2dfff0c8b576889f360ce104f1826b",
          "sha256": "c889fd074e7bfaa63c4a118e1c2a0cd9c84b8ee5169e844c3df10acb1a0b1b57"
        },
        "downloads": -1,
        "filename": "permit-broadcaster-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c2dfff0c8b576889f360ce104f1826b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8869,
        "upload_time": "2022-06-12T20:07:00",
        "upload_time_iso_8601": "2022-06-12T20:07:00.930097Z",
        "url": "https://files.pythonhosted.org/packages/4a/7c/270436fc0da1caee454467e0f35046ca2e8ae9921d3064225d2f21e5e606/permit-broadcaster-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a61ccb68be91a7a7e7c52987db3c5d8914efb6cfc7d85841d07a03ff393bbc63",
          "md5": "c02f9dab179b15f308e0d9fc5558d25c",
          "sha256": "04f8b8375e06c69d7c0eed6989d4ed84f524ce55207f2210cc2832dfb97acc96"
        },
        "downloads": -1,
        "filename": "permit_broadcaster-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c02f9dab179b15f308e0d9fc5558d25c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9198,
        "upload_time": "2023-03-27T12:32:17",
        "upload_time_iso_8601": "2023-03-27T12:32:17.201317Z",
        "url": "https://files.pythonhosted.org/packages/a6/1c/cb68be91a7a7e7c52987db3c5d8914efb6cfc7d85841d07a03ff393bbc63/permit_broadcaster-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4dd5d1cf5fa2b36ac6b3ecc4ab708265568e08f57b966ee804c52f8b4760309",
          "md5": "655b48e76c92de0586fc0f086cc2f241",
          "sha256": "32452d693b2913d7b4835eafe9d3df6ae8c67f71ebe91307dd8c4e9277df3645"
        },
        "downloads": -1,
        "filename": "permit-broadcaster-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "655b48e76c92de0586fc0f086cc2f241",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9826,
        "upload_time": "2023-03-27T12:32:18",
        "upload_time_iso_8601": "2023-03-27T12:32:18.739267Z",
        "url": "https://files.pythonhosted.org/packages/f4/dd/5d1cf5fa2b36ac6b3ecc4ab708265568e08f57b966ee804c52f8b4760309/permit-broadcaster-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a61ccb68be91a7a7e7c52987db3c5d8914efb6cfc7d85841d07a03ff393bbc63",
        "md5": "c02f9dab179b15f308e0d9fc5558d25c",
        "sha256": "04f8b8375e06c69d7c0eed6989d4ed84f524ce55207f2210cc2832dfb97acc96"
      },
      "downloads": -1,
      "filename": "permit_broadcaster-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c02f9dab179b15f308e0d9fc5558d25c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9198,
      "upload_time": "2023-03-27T12:32:17",
      "upload_time_iso_8601": "2023-03-27T12:32:17.201317Z",
      "url": "https://files.pythonhosted.org/packages/a6/1c/cb68be91a7a7e7c52987db3c5d8914efb6cfc7d85841d07a03ff393bbc63/permit_broadcaster-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4dd5d1cf5fa2b36ac6b3ecc4ab708265568e08f57b966ee804c52f8b4760309",
        "md5": "655b48e76c92de0586fc0f086cc2f241",
        "sha256": "32452d693b2913d7b4835eafe9d3df6ae8c67f71ebe91307dd8c4e9277df3645"
      },
      "downloads": -1,
      "filename": "permit-broadcaster-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "655b48e76c92de0586fc0f086cc2f241",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9826,
      "upload_time": "2023-03-27T12:32:18",
      "upload_time_iso_8601": "2023-03-27T12:32:18.739267Z",
      "url": "https://files.pythonhosted.org/packages/f4/dd/5d1cf5fa2b36ac6b3ecc4ab708265568e08f57b966ee804c52f8b4760309/permit-broadcaster-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}