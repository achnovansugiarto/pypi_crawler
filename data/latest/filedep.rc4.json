{
  "info": {
    "author": "Francis Cong",
    "author_email": "flcong@outlook.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# filedep: A small python tool to check file dependency\n\n## Motivation\n\nWhen doing empirical analysis, you may encounter the following issue about file\ndependency. \n\n* Suppose `code.py` (or `code.do`, `code.sas`, `code.m`, `code.R`, etc)\n  reads data from `indata.csv`, does some data cleaning, and then saves the \n  intermediary data as `outdata.csv`. \n  \n* After using `outdata.csv` to run some statistical tests, you want to change \n  the data cleaning procedure a bit, so you modify `code.py`. \n  \n* If there are only one code file and two data files, you will easily remember to\n  re-run `code.py` to update the output data `outdata.csv`. \n  \n* However, suppose that `outdata.csv` is then used by `code2.py` to write \n  `finaldata.csv`. Then, people may easily forget to re-run `code2.py` as well\n  to update `finaldata.csv`.\n  \n* As a result, this may cause the illusion that results change after you run\n  the same set of code twice. For example, you forget to update `finaldata.csv`\n  initially, but then accidentally update `finaldata.csv` some time later. Then,\n  you find that results change after you run the same set of code.\n\nTo resolve this issue, I build this simple package to check file dependencies\nbased on last modified time. Users can define file dependencies, such as `code.py`\nusing `pre1.csv` and `pre2.csv` as input to write `post1.csv` and `post2.csv`.\nThen, the function in the package will check if the last modified times of both\n`pre1.csv` and `pre2.csv` are before that of `code.py` and the last modified \ntimes of both `post1.csv` and `post2.csv` are after that of `code.py`. If any\nfile dependency is broken, the broken ones will be printed or saved to a file.\n\n## Installation\n\nUse `pip` to install the package as follows:\n```python \npip install filedep\n```\n\n## Usage\n\nImport the package using\n```python\nimport filedep\n```\n\nThe key function is `check_dep(deps, outfile=sys.stdout, reterr=False)`. \nThe first argument is a list of dependencies (defined below). The second \nargument specifies where to print error information if any file dependency is \nbroken. The default is `sys.stdout`. The third argument specifies if broken \ndependencies are returned from the function. This is mainly for testing \npurposes. The default is `False`, i.e., broken dependencies are only printed. \n\nThe file dependencies have to be provided by the user using the format defined\nbelow. In the `template` folder, there is a template to define dependencies\nand use `check_dep()` function to check.\n\n### Example 1. No broken file dependencies\n\nThe following code creates several empty files:\n```python\nimport filedep\nimport time\nimport os\nfrom os.path import join as pj\n\nPATH = r'C:\\test_check_dep'\nif not os.path.exists(PATH):\n    os.mkdir(PATH)\n\ndef touch(filepath):\n    if os.path.exists(filepath):\n        os.utime(filepath)\n    else:\n        with open(filepath, 'a') as f:\n            pass\n\n# Touch files in a specific order\ntouch(pj(PATH, 'pre11.csv'))\ntime.sleep(.1)\ntouch(pj(PATH, 'pre12.csv'))\ntime.sleep(.1)\ntouch(pj(PATH, 'code1.py'))\ntime.sleep(.1)\ntouch(pj(PATH, 'post11.csv'))\ntime.sleep(.1)\ntouch(pj(PATH, 'post12.csv'))\ntime.sleep(.1)\n\n# Define dependencies\ndeps = [\n    (\n        [\n            pj(PATH, 'pre11.csv'),\n            pj(PATH, 'pre12.csv')\n        ], \n        pj(PATH, 'code1.py'), \n        [\n            pj(PATH, 'post11.csv'),\n            pj(PATH, 'post12.csv'),\n        ],\n    ),\n]\nfiledep.check_dep(deps)\n```\nIn `deps`, we define a single dependency as follows: under the directory \n`C:\\test_check_dep`, `code1.py` reads `pre11.csv` and `pre12.csv` to produce\n`post11.csv` and `post12.csv`. Then, the last modified times of both `pre11.csv`\nand `pre12.csv` must be before that of `code1.py` and those of both `post11.csv`\nand `post12.csv` must be after that of `code1.py`\n\nSince the dependency is satisfied by construction, the output is\n```\nAll file dependencies are verified!\n```\n\n### Example 2. Broken file dependencies\n\nThe following code creates several empty files and define two broken dependencies:\n```python\nimport filedep\nimport time\nimport os\nfrom os.path import join as pj\n\nPATH = r'C:\\test_check_dep'\nif not os.path.exists(PATH):\n    os.mkdir(PATH)\n\ndef touch(filepath):\n    if os.path.exists(filepath):\n        os.utime(filepath)\n    else:\n        with open(filepath, 'a') as f:\n            pass\n\n# Touch files in a specific order\ntouch(pj(PATH, 'pre11.csv'))\ntime.sleep(.1)\ntouch(pj(PATH, 'pre12.csv'))\ntime.sleep(.1)\ntouch(pj(PATH, 'code1.py'))\ntime.sleep(.1)\ntouch(pj(PATH, 'post11.csv'))\ntime.sleep(.1)\n# Note code1.py is newer than post11.csv\ntouch(pj(PATH, 'code1.py'))\ntime.sleep(.1)\ntouch(pj(PATH, 'post12.csv'))\ntime.sleep(.1)\n\n# Define dependencies\ndeps = [\n    (\n        [\n            pj(PATH, 'pre11.csv'),\n        ], \n        pj(PATH, 'code1.py'), \n        [\n            pj(PATH, 'post11.csv'),\n        ],\n    ),  \n    (\n        [\n            pj(PATH, 'pre11.csv'),\n            pj(PATH, 'pre12.csv'),\n        ], \n        pj(PATH, 'code1.py'), \n        [\n            pj(PATH, 'post11.csv'), \n            pj(PATH, 'post12.csv'),\n        ],\n    )\n]\nfiledep.check_dep(deps)\n```\nHere, we define 2 dependencies. The second one is the same as that in the \nprevious example, but the first one defines a simpler dependency: `code1.py` \nuses `pre11.csv` to produce `post11.csv`. Since by construction `post11.csv` is\n\"touched\" before `code1.py`, both dependencies are broken. Hence, the output is\n```\nThere are 2 broken file dependencies!!! \n[1]\n                                           Last Modified Time\n  Input:\n    C:\\test_check_dep\\pre11.csv      : 2021-10-14 14:25:11.011976\n  Code:\n    C:\\test_check_dep\\code1.py       : 2021-10-14 14:25:11.451668\n  Output:\n    C:\\test_check_dep\\post11.csv     : 2021-10-14 14:25:11.342247\n[2]\n                                           Last Modified Time\n  Input:\n    C:\\test_check_dep\\pre11.csv      : 2021-10-14 14:25:11.011976\n    C:\\test_check_dep\\pre12.csv      : 2021-10-14 14:25:11.125543\n  Code:\n    C:\\test_check_dep\\code1.py       : 2021-10-14 14:25:11.451668\n  Output:\n    C:\\test_check_dep\\post11.csv     : 2021-10-14 14:25:11.342247\n    C:\\test_check_dep\\post12.csv     : 2021-10-14 14:25:11.559796\n```\nwhere the last modified date of each file in each broken dependency is shown.\n\n\n## Format of file dependency\n\nThe first argument of `check_dep()` is a list of dependencies. Its format \nshould be as follows:\n\n* It is a list of tuples.\n* Each tuple has three elements.\n    - The first element is a list of `str`.\n    - The second element is a `str`.\n    - The third element is a list of `str`.\n    - Each `str` is an absolute path of an existing file.\n\nAs an example, the following code defines two dependencies:\n```python\ndeps = [\n    (\n        ['pre1.txt'], 'code1.py', ['post1.txt']\n    ),\n    (\n        ['pre21.txt', 'pre22.txt'], 'code2.py', ['post21.txt', 'post22.txt']\n    )\n]\n```\n* The first one says that `code1.py` uses `pre1.txt` as input and outputs \n`post1.txt`. As a result, the last modified date of the three files\nshould satisfy `pre1.txt<=post1.txt` and  `code1.py<=post1.txt`.\n* The second one says that `code2.py` uses `pre21.txt` and `pre22.txt` as input\n  and outputs `post21.txt` and `post22.txt`. As a result, the last modified date\n  of the three files should satisfy \n  `max(pre21.txt,pre22.txt,code1.py)<=min(post21.txt,post22.txt)` where `max`\n  (`min`) represent the maximum (minimum) date.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/flcong/filedep",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "filedep",
    "package_url": "https://pypi.org/project/filedep/",
    "platform": "",
    "project_url": "https://pypi.org/project/filedep/",
    "project_urls": {
      "Homepage": "https://github.com/flcong/filedep"
    },
    "release_url": "https://pypi.org/project/filedep/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "filedep: A small python tool to check file dependency",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12817422,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61e4a1e1292158239902625e15e367230e00d0db77a33eaada7c6c723c05bdaa",
          "md5": "4fd7f0afcbe2dd887627d93f65980c7b",
          "sha256": "5670d4c7809d0c2dc1e5bcb6c8921ac53c0e108c4c20748771be7cf232a2f1e2"
        },
        "downloads": -1,
        "filename": "filedep-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4fd7f0afcbe2dd887627d93f65980c7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5020,
        "upload_time": "2021-10-14T18:54:04",
        "upload_time_iso_8601": "2021-10-14T18:54:04.926829Z",
        "url": "https://files.pythonhosted.org/packages/61/e4/a1e1292158239902625e15e367230e00d0db77a33eaada7c6c723c05bdaa/filedep-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "041fb86b6933a4275cd967cfc1e8367de14e424c9e96ba71ea0f98420de1d1fd",
          "md5": "cba7f163f95d87136181e0ddc31565f8",
          "sha256": "9b789322c0262c12bcfb60a908c2d93c4bc87b256843c4a3159102cc7233b323"
        },
        "downloads": -1,
        "filename": "filedep-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cba7f163f95d87136181e0ddc31565f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5013,
        "upload_time": "2021-10-14T18:56:36",
        "upload_time_iso_8601": "2021-10-14T18:56:36.644880Z",
        "url": "https://files.pythonhosted.org/packages/04/1f/b86b6933a4275cd967cfc1e8367de14e424c9e96ba71ea0f98420de1d1fd/filedep-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ddd46078b0f4c3a13f58019f7c098cd3d22b88ba1f1d746948457ed1962ae69",
          "md5": "7ebc2450eb828c30639936b304e717b3",
          "sha256": "c7253aa2ceb0a6692a149c89ba5d79db371b93a2d0988291434ee3942f4e640b"
        },
        "downloads": -1,
        "filename": "filedep-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ebc2450eb828c30639936b304e717b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5502,
        "upload_time": "2022-01-25T04:59:16",
        "upload_time_iso_8601": "2022-01-25T04:59:16.508400Z",
        "url": "https://files.pythonhosted.org/packages/7d/dd/46078b0f4c3a13f58019f7c098cd3d22b88ba1f1d746948457ed1962ae69/filedep-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdb8e01c63f8627004c6234031db039704f569089f74c934282c978c73d3870b",
          "md5": "5a6e37a50c4a68e80c2dc9d58d4ab730",
          "sha256": "42b8dbc0e8eed1f2400048f9910f570152f925500dc7ea63843e62055eb7a190"
        },
        "downloads": -1,
        "filename": "filedep-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5a6e37a50c4a68e80c2dc9d58d4ab730",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5718,
        "upload_time": "2022-01-25T04:59:32",
        "upload_time_iso_8601": "2022-01-25T04:59:32.773082Z",
        "url": "https://files.pythonhosted.org/packages/bd/b8/e01c63f8627004c6234031db039704f569089f74c934282c978c73d3870b/filedep-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "879084f632243e44ec8dafd21c46c77b53a5077b30e183661fe5c0dfeed0fca1",
          "md5": "1eb61e2ea1058838ad9b530b7c2eb07f",
          "sha256": "a6853f7c8248db315198a482864398005da53e98fdd872649bd0f464a20b3db1"
        },
        "downloads": -1,
        "filename": "filedep-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1eb61e2ea1058838ad9b530b7c2eb07f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5799,
        "upload_time": "2022-02-07T18:38:59",
        "upload_time_iso_8601": "2022-02-07T18:38:59.893559Z",
        "url": "https://files.pythonhosted.org/packages/87/90/84f632243e44ec8dafd21c46c77b53a5077b30e183661fe5c0dfeed0fca1/filedep-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "879084f632243e44ec8dafd21c46c77b53a5077b30e183661fe5c0dfeed0fca1",
        "md5": "1eb61e2ea1058838ad9b530b7c2eb07f",
        "sha256": "a6853f7c8248db315198a482864398005da53e98fdd872649bd0f464a20b3db1"
      },
      "downloads": -1,
      "filename": "filedep-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1eb61e2ea1058838ad9b530b7c2eb07f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5799,
      "upload_time": "2022-02-07T18:38:59",
      "upload_time_iso_8601": "2022-02-07T18:38:59.893559Z",
      "url": "https://files.pythonhosted.org/packages/87/90/84f632243e44ec8dafd21c46c77b53a5077b30e183661fe5c0dfeed0fca1/filedep-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}