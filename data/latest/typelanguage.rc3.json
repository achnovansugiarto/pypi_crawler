{
  "info": {
    "author": "Kenneth Knowles",
    "author_email": "kenn.knowles@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "A Type Language for Python\n==========================\n\nhttps://github.com/kennknowles/python-typelanguage\n\nThis package provides a type language for communicating about Python\nprograms and values. Humans communicating to other humans, humans\ncommunicating to the computer, and even the computer communicating to\nhumans (via type inference and run-time contract checking).\n\nThis project has a “duck-typed” status: Whatever you can use it for, it\nis ready for :-)\n\nHere is a more concrete list of implemented and intended features:\n\n-  *yes* - Definition of a type language.\n-  *yes* - Parsing and printing.\n-  *yes* - Monitoring of type adherence for monomorphic types.\n-  *yes* - “Any” type for easily saying exactly where things get really\n   dynamic.\n-  *upcoming* - Monitoring of type adherence for polymorphic types.\n-  *upcoming* - Generation of constraints between types in a program.\n-  *upcoming* - Best-effort inference of suitable types.\n-  *upcoming* - Refinement types with hybrid type checking.\n\nThe Types\n---------\n\nThis type language is built from the following concepts:\n\n-  Named types: ``int``, ``long``, ``float``, ``complex``, ``str``,\n   ``unicode``, ``file``, ``YourClassNameHere``, …\n-  List types: ``[int]``, ``[[long]]``, …\n-  Tuple types: ``(int, long)``, ``(float, (int, Regex))``, …\n-  Dictionary types: ``{string: float}``,\n   ``{ (str, str) : [complex] }``, …\n-  Union types ``int|long|float``, ``str|file``, …\n-  The “any” type, ``??``, for when a value is too complex to describe\n   in this language. May be an indication that a piece of code is\n   metaprogramming or should be treated with gradual typing.\n-  Function types:\n\n   -  ``str -> int``\n   -  ``(int) -> int``\n   -  ``(int, int) -> int``\n   -  ``( (int, int) ) -> int``\n   -  ``( str|file ) -> SomeClass``\n   -  ``(int, *[str]) -> [(str, int)]``\n   -  ``(int, *[int], **{int: str}) -> str``\n\n-  Object types: ``object(self_type, field1: int, field2: str, ...)``\n-  Polymorphic types (where ``~a``, ``~b``, ``~c`` range over any other\n   type)\n\n   -  ``~a -> ~a``\n   -  ``[~a] -> [~a]``\n   -  ``( (~a, ~b) ) -> ~a``\n\nTypes as Contracts\n------------------\n\nThe module ``typelanguage.enforce`` contains functions for using these\ntypes as run-time monitors.\n\nApplied directly:\n\n::\n\n    >>> check('{string: int}', {\"hello\" : \"there\"})\n\nMore interestingly, automatically protecting a function from bad input,\nfor example, putting better error checking on Python’s\n``unicode``/``str`` interactions.\n\n::\n\n    >>> '\\xa3'.encode('utf-8')\n    ...\n    UnicodeDecodeError: 'ascii' codec can't decode byte 0xa3 in position 0: ordinal not in range(128)\n\n    >>> @guard('unicode -> str')\n    ... def safe_encode(s):\n    ...    return s.encode('utf-8')\n\n    >>> safe_encode(u'hello')\n    'hello'\n    >>> safe_encode('\\xa3')\n    TypeError: Type check failed: ? does not have type unicode\n\nEventually, the notion of *blame* may be usefully incorporated, for\npointing out which piece of code or agent in a distributed setting is\nresponsible for the undesirable value.\n\nType Inference\n--------------\n\nIn the spirit of Python and dynamic languages, type inference is\nbest-effort. It works like so:\n\n1. By traversing the code, we can discover a bunch of constraints\n   between types in different bits.\n2. Some of these constraints are going to be very easy to solve, so we\n   can just propagate the results.\n3. Some of these constraints are not going to be practical to try to\n   solve, so we can just drop them or insert some enforcement code if we\n   like.\n\nMore to explore\n---------------\n\nThere are many other projects that check contracts or types for Python\nin some way or another, but none makes communication their primary goal,\nwith the possible exception of pySonar. As such, they make different\ndesign choices. Some are research projects or prototypes – this is not.\nThis is a library meant for use.\n\n-  `PEP 316 <http://www.python.org/dev/peps/pep-0316/>`_ (deferred)\n-  `RPython <http://doc.pypy.org/en/latest/translation.html>`_ and\n   `PyPy <http://pypy.org/>`_ (compilation-oriented)\n-  `pySonar <http://yinwang0.wordpress.com/2010/09/12/pysonar/>`_ and\n   `mini-pysonar <https://github.com/yinwang0/mini-pysonar>`_ (way cool)\n-  `Pyntch <http://www.unixuser.org/~euske/python/pyntch/index.html>`_\n-  `typechecker <https://github.com/shomah4a/typechecker>`_\n-  `pycontract <http://www.wayforward.net/pycontract/>`_\n-  `python-dbc <http://code.google.com/p/python-dbc/>`_ and `one\n   pyDBC <http://www.nongnu.org/pydbc/>`_ and `another\n   pydbc <https://github.com/cadrian/pydbc>`_ and `yet another\n   pyDBC <https://github.com/Ceasar/pyDbC>`_\n-  `python-type-inference <http://code.google.com/p/python-type-inference/wiki/Resources>`_\n   (no code, but has a great list of papers and even more tools)\n\nAnd since dynamic languages are much of a muchness, it is worthwhile\nseeing what is happening elsewhere, though again very few projects\nemphasize the types themselves as fun, interesting and useful, only that\nthe code has them.\n\n-  `Contracts in\n   Racket <http://docs.racket-lang.org/guide/contracts.html>`_ and\n   `Typed Racket <http://docs.racket-lang.org/ts-guide/>`_\n-  `Typescript <http://www.typescriptlang.org/>`_ aka `a slightly\n   gradually-typed\n   Javascript <http://siek.blogspot.com/2012/10/is-typescript-gradually-typed-part-1.html>`_\n   and `Javascript++ <http://jspp.javascript.am/>`_ (sort of\n   gradually-typed Javascript) and\n   `javascript-contracts <https://github.com/brownplt/javascript-contracts>`_\n   and `cerny <http://www.cerny-online.com/cerny.js/>`_\n-  `Este <https://github.com/Steida/este>`_ (statically-typed\n   coffeescript) and\n   `Uberscript <https://github.com/jstrachan/coffee-script/blob/master/TypeAnnotations.md>`_\n   (gradually-typed coffeescript) and\n   `contracts.coffee <http://disnetdev.com/contracts.coffee/>`_\n-  `Contracts.ruby <https://github.com/egonSchiele/contracts.ruby>`_\n\nI’m omitting the billion typed languages that compile to Javascript\nbecause those are just typed languages compiler to the assembly language\nof the web.\n\nFinally, if you want to actually grok types, then contracts, then types\nand contracts together, then types and dynamic types together, then\n*polymorphic* type as contracts and dynamic types together, then type\ninference for such systems, try this chronological series of reading.\n\n-  `*Types and Programming\n   Languages* <http://www.cis.upenn.edu/~bcpierce/tapl/>`_ by Benjamin\n   Pierce.\n-  `Contracts for higher-order\n   functions <http://www.eecs.northwestern.edu/~robby/pubs/papers/ho-contracts-icfp2002.pdf>`_\n   by Robert Bruce Findler & Matthias Felleisen. ICFP 2002.\n-  `Hybrid type\n   checking <http://users.soe.ucsc.edu/~cormac/papers/toplas09.pdf>`_ by\n   Kenneth Knowles & Cormac Flanagan. TOPLAS 2010. (expanded and\n   corrected from POPL 2006)\n-  `Gradual typing for functional\n   languages <http://ecee.colorado.edu/~siek/pubs/pubs/2006/siek06_gradual.pdf>`_\n   by Jeremy Siek & Walid Taha. Scheme workshop 2006.\n-  `Gradual Typing for\n   Objects <http://ecee.colorado.edu/~siek/gradual-obj.pdf>`_ by Jeremy\n   Siek and Walid Taha. ECOOP 2007.\n-  `Type reconstruction for general refinement\n   types <http://users.soe.ucsc.edu/~cormac/papers/esop07.pdf>`_ by\n   Kenneth Knowles & Cormac Flanagan. ESOP 2007.\n-  `Relationally-parametric polymorphic\n   contracts <http://cs.brown.edu/~sk/Publications/Papers/Published/gmfk-rel-par-poly-cont/paper.pdf>`_\n   by Arjun Guha, Jacob Matthews, Robert Bruce Findler, and Shriram\n   Krishnamurthi. DLS 2007.\n-  `Gradual typing with unification based\n   inference <http://ecee.colorado.edu/~siek/dls08igtlc.pdf>`_ by Jeremy\n   Siek and Manish Vachharajani. DLS 2008.\n-  `Blame for\n   all <http://homepages.inf.ed.ac.uk/wadler/papers/blame-for-all/blame-for-all.pdf>`_\n   by Amal Ahmed, Robert Bruce Findler, Jacob Matthews, and Philip\n   Wadler. STOP 2009.\n-  `Always available static and dynamic\n   feedback <http://homes.cs.washington.edu/~mernst/pubs/ductile-icse2011.pdf>`_\n   by Michael Bayne, Richard Cook, and Michael D. Ernst. ICSE 2011.\n-  `The ins and outs of of gradual type\n   inference <http://www.cs.umd.edu/~avik/papers/iogti.pdf>`_ by Aseem\n   Rastogi, Avik Chaudhuri, and Basil Hosmer. POPL 2012.\n\nContributors\n------------\n\n-  `Kenn Knowles <https://github.com/kennknowles>`_\n   (`@kennknowles <https://twitter.com/KennKnowles>`_)\n\nCopyright and License\n---------------------\n\nCopyright 2012- Kenneth Knowles\n\nLicensed under the Apache License, Version 2.0 (the “License”); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at\n\n::\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an “AS IS” BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kennknowles/python-typelanguage",
    "keywords": null,
    "license": "Apache 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "typelanguage",
    "package_url": "https://pypi.org/project/typelanguage/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/typelanguage/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/kennknowles/python-typelanguage"
    },
    "release_url": "https://pypi.org/project/typelanguage/0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A type language for Python, including parsing, pretty-printing, type inference, type checking, and run-time contract enforcement.",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 801152,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99ea76f5a7ccdd7a134a11968315a4361b5a9f9308d9ee06cff77d7cb5ad0d58",
          "md5": "5d7cd0519cf407bc2a118ecb59de2d04",
          "sha256": "3d3af027d40fcc71885e907937d3fc2fe99d48d15bba48594e431af4c8a7e6d6"
        },
        "downloads": -1,
        "filename": "typelanguage-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5d7cd0519cf407bc2a118ecb59de2d04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17496,
        "upload_time": "2013-01-16T02:28:31",
        "upload_time_iso_8601": "2013-01-16T02:28:31.926430Z",
        "url": "https://files.pythonhosted.org/packages/99/ea/76f5a7ccdd7a134a11968315a4361b5a9f9308d9ee06cff77d7cb5ad0d58/typelanguage-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f15c92df82bb2c4729f007c64861faff33f15ef6571a9c2b90ed81759c01be9",
          "md5": "ed74a49a95988e8ac5b1c44a8f0314a8",
          "sha256": "45f21856dc5ba96aa8797a1a030cb9ba4805c6a1ac44945177444a110ec6fba6"
        },
        "downloads": -1,
        "filename": "typelanguage-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ed74a49a95988e8ac5b1c44a8f0314a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17501,
        "upload_time": "2013-01-16T02:32:11",
        "upload_time_iso_8601": "2013-01-16T02:32:11.075181Z",
        "url": "https://files.pythonhosted.org/packages/3f/15/c92df82bb2c4729f007c64861faff33f15ef6571a9c2b90ed81759c01be9/typelanguage-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ae1135f46a1f1eb7441cf4bdba7d339b1e0d8218fd44d0fda6c8d5fb9f0af07",
          "md5": "0d89ccf6867fde26dbe44e155171ee61",
          "sha256": "ac86ab98ceed0392b3c631e1701dbb6702461e2bd69eea6eba22c94a490f2324"
        },
        "downloads": -1,
        "filename": "typelanguage-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0d89ccf6867fde26dbe44e155171ee61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17456,
        "upload_time": "2013-01-16T02:33:41",
        "upload_time_iso_8601": "2013-01-16T02:33:41.291092Z",
        "url": "https://files.pythonhosted.org/packages/0a/e1/135f46a1f1eb7441cf4bdba7d339b1e0d8218fd44d0fda6c8d5fb9f0af07/typelanguage-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ae1135f46a1f1eb7441cf4bdba7d339b1e0d8218fd44d0fda6c8d5fb9f0af07",
        "md5": "0d89ccf6867fde26dbe44e155171ee61",
        "sha256": "ac86ab98ceed0392b3c631e1701dbb6702461e2bd69eea6eba22c94a490f2324"
      },
      "downloads": -1,
      "filename": "typelanguage-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0d89ccf6867fde26dbe44e155171ee61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17456,
      "upload_time": "2013-01-16T02:33:41",
      "upload_time_iso_8601": "2013-01-16T02:33:41.291092Z",
      "url": "https://files.pythonhosted.org/packages/0a/e1/135f46a1f1eb7441cf4bdba7d339b1e0d8218fd44d0fda6c8d5fb9f0af07/typelanguage-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}