{
  "info": {
    "author": "Nikita (NIKDISSV)",
    "author_email": "nikdissv@proton.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Other Audience",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Natural Language :: Russian",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Multimedia :: Video",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# proxytv\r\n\r\nRobot for https://proxytv.ru/ (ProxyBot)\r\n\r\n> pip install [proxytv](https://pypi.org/project/proxytv)\r\n\r\n> python -m proxytv --help\r\n\r\n```\r\nusage: proxytv [-h] [-f] [-t] [-q QUERY] [-cd COOLDOWN] [-x PROXY] [-chf CHANNEL_FILTERS] [-pl [PL ...]] [-o OUTPUT]\r\n\r\noptions:\r\n  -h, --help            show this help message and exit\r\n  -f, --forever         Run the script again every cooldown seconds.\r\n  -t, --threading       Send and parse the request for each playlist in a separate thread. (Default: True)\r\n  -q QUERY, --query QUERY\r\n                        Send only one request with the specified text. For example: \"ch: HD\" or \"pl: aist\"\r\n  -cd COOLDOWN, --cooldown COOLDOWN\r\n                        Cooldown in seconds. (Default: 1)\r\n  -x PROXY, --proxy PROXY\r\n                        Proxy <protocol>://<ip>\r\n  -chf CHANNEL_FILTERS, --channel-filters CHANNEL_FILTERS\r\n                        Filters for received channels\r\n  -pl [PL ...]          Playlist name(s)\r\n  -o OUTPUT, --output OUTPUT\r\n                        Output .m3u(8) file. (Default: <stdout>)\r\n```\r\n\r\n---\r\n\r\nЕсли запустить без доп. аргументов, будут получены все каналы, всех плейлистов (plist)\r\nИ записаны в файл output, по умолчание выведет результат в формате m3u в консоль.\r\n\r\nАругмент -pl: список плейлистов по которым будет происходить поиск, по умолчанию все доступные.\r\n\r\n# Код\r\n\r\n```python\r\nfrom .extinf import *\r\nfrom .search import *\r\nfrom .static import *\r\n\r\n\r\nclass Robot:\r\n   \"\"\"A class describing a parser robot. Designed for inheritance.\"\"\"\r\n\r\n   __slots__ = ('end_extinf', 'plist', 'PLIST_LEN', 'search_engine', 'pl_number', 'output')\r\n   sort_key = None  # sort channels\r\n\r\n   def __init__(self, forever: bool = True, cooldown: SupportsFloat = 0.,\r\n                search: Srch = None, output=None, except_types=(Exception,)):\r\n      \"\"\"Runs the order of actions, if forever is true then it does it forever.\"\"\"\r\n      ...\r\n\r\n   def post_init(self):\r\n      \"\"\"Execute after initialization.\"\"\"\r\n      pass\r\n\r\n   def run(self, except_types: tuple[BaseException] = None, *, cooldown: int | float = None, forever: bool = None):\r\n      \"\"\"\r\n      Run self.loop()\r\n      Skip exceptions from `except_types`\r\n      repeat if `forever` every `cooldown` seconds\r\n      \"\"\"\r\n      if except_types is None:\r\n         except_types = self.except_types\r\n      if cooldown is None:\r\n         cooldown = self.cooldown\r\n      if forever is None:\r\n         forever = self.forever\r\n      ...\r\n\r\n   def loop(self):\r\n      self.on_start()\r\n      self.during()\r\n      self.on_end()\r\n\r\n   def on_start(self):\r\n      \"\"\"Initial actions.\"\"\"\r\n      self.plist = self.search_engine.plist()\r\n      self.PLIST_LEN = len(self.plist)\r\n      self.end_extinf = Extinf()\r\n      self.pl_number = 1\r\n\r\n   def search_pl(self, pl_name: str):\r\n      pl = self.search_engine.pl(pl_name)\r\n      print(f'Pl: {pl_name} ({self.pl_number}/{self.PLIST_LEN}) Channels: {len(pl)}')\r\n      self.end_extinf += pl\r\n      self.pl_number += 1\r\n\r\n   def during(self):\r\n      \"\"\"Actions in the middle of the process.\"\"\"\r\n      for pl_name in self.plist:\r\n         self.search_pl(pl_name)\r\n\r\n   def on_end(self):\r\n      \"\"\"Sort by self.sort_key function and save\"\"\"\r\n      self.end_extinf.data.sort(key=self.sort_key)\r\n      ch_count = len(self.end_extinf)\r\n      print(f\"Saving {ch_count} channel{'' if ch_count == 1 else 's'}\")\r\n      self.upload(save_extinf(self.end_extinf, self.output))\r\n\r\n   def upload(self, fn: str):\r\n      \"\"\"Used to upload files to a remote host, used in on_end.\"\"\"\r\n      pass\r\n\r\n\r\nclass RobotThreading(Robot):\r\n   \"\"\"An example of implementing your own robot, with multithreading\"\"\"\r\n   __slots__ = ('end_extinf', 'pl_number')\r\n\r\n   def during(self):\r\n      \"\"\"Creates threads to search for each playlist.\"\"\"\r\n      with ThreadPool() as pool:\r\n         pool.map(self.search_pl, self.plist)\r\n```\r\n\r\nКлассы для наследования, при написании более сложных роботов.\r\n\r\n# Фильтры\r\n\r\nАргумент `--channel-filters` принимает файл с фильтрами в формате регулярного выражения,\r\nприменяемого к выходному m3u формату\r\n\r\nСуществуют некоторое упрощения для более быстрого составления файла фильтров.\r\nНапомню, выходной m3u формат выглядит примерно так:\r\n\r\n```m3u\r\n#EXTINF:-1 tvch-id=\"40025\" group-title=\"ДЕТСКИЕ\",DISNEY CHANNEL-40025\r\nhttp://93.158.224.2:4022/udp/239.3.100.85:4321\r\n```\r\n\r\nКаждая строка в файле фильтров представляет собой фильтр в особом формате.\r\n\r\nЧтобы канал прошёл фильтрацию, необходимо чтобы как минимум один фильтр к нему подошёл.\r\n\r\n1. <kbd>\\\\</kbd> в начале строки всегда обрезается\r\n\r\n2. Чтобы фильтровать IP адреса (вторую строку), фильтр должен начинаться со знака <kbd>:</kbd>\r\n\r\n3. Чтобы проверить на присутствие подстроки в строке, фильтр должен начинаться с <kbd>#</kbd>\r\n\r\n4. Или любое регулярное выражение (при использовании <kbd>#</kbd> регулярное выражение не применяется, строка\r\n   экранируется), если строка начинается с <kbd>:</kbd>, регулярное выражение по-прежнему проверяется, но уже на IP\r\n5. Все филтры не чувствительны к регистру (``re.IGNORECASE``)\r\n\r\n---\r\n\r\nБыло:\r\n\r\n```regexp\r\n\\:-1\r\n```\r\n\r\nСтало:\r\n\r\n```regexp\r\n:-1\r\n```\r\n\r\n---\r\n\r\n```regexp\r\n:.+:4022.+\r\n```\r\n\r\nНайти все IP с портом 1234\r\n\r\n[http://93.158.224.2:<kbd>4022</kbd>/udp/239.3.100.85:4321](http://93.158.224.2:4022/udp/239.3.100.85:4321)\r\n\r\n---\r\n\r\n```regexp\r\n:#:4321\r\n```\r\n\r\n```regexp\r\n:.*:4321.*\r\n```\r\n\r\n[http://93.158.224.2:4022/udp/239.3.100.85<kbd>:4321</kbd>](http://93.158.224.2:4022/udp/239.3.100.85:4321)\r\n\r\n---\r\n\r\n```regexp\r\n#group-title=\"ДЕТСКИЕ\"\r\n```\r\n\r\n```regexp\r\n.*group-title=\"ДЕТСКИЕ\".*\r\n```\r\n\r\nНайти все каналы в группе детских\r\n\r\n#EXTINF:-1 tvch-id=\"40025\" <kbd>group-title=\"ДЕТСКИЕ\"</kbd>,DISNEY CHANNEL-40025\r\n\r\n---\r\n\r\n```regexp\r\n#HD\r\n```\r\n\r\n```regexp\r\n.*HD.*\r\n```\r\n\r\n``Тоже что и -q \"ch:HD\" аргумет``\r\n\r\n#EXTINF:-1 tvch-id=\"46046\" group-title=\"ИНФ/РАЗВЛЕКАТЕЛЬНЫЕ\",РОССИЯ 1 <kbd>HD</kbd>-46046\r\n\r\n---\r\n**Пример составления нужного плейлиста:**\r\n\r\nfilters.txt\r\n\r\n```regexp\r\n#NICKELODEON HD\r\n#CARTOON NETWORK\r\n#Рен ТВ\r\n#ТНТ HD\r\n#Пятница\r\n#Россия 24\r\n```\r\n\r\n> python -m proxytv -chf filters.txt -f -cd 120 -o tv.m3u8\r\n\r\nКаждые 2 минуты будет обновляться файл tv.m3u8 с перечисленными выше каналами.\r\n\r\n---\r\n\r\n_Вопросы задавайте на GitHub, на почту или загляните в исходный код, там всё прозрачно._\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NIKDISSV-Forever/ProxyTVRobot",
    "keywords": "ProxyBot,IPTV,proxytv.ru,TV,free",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "proxytv",
    "package_url": "https://pypi.org/project/proxytv/",
    "platform": null,
    "project_url": "https://pypi.org/project/proxytv/",
    "project_urls": {
      "Homepage": "https://github.com/NIKDISSV-Forever/ProxyTVRobot"
    },
    "release_url": "https://pypi.org/project/proxytv/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "proxytv.ru IPTV Channels Parser and Robot (Like ProxyBot)",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17491372,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b8f3bfaabebe82ba5a4ae5572f52d35e5891b3609482bab9689be75c1d7047c",
          "md5": "ae0c96f5d2f6be927ffaa7e83d2a5bbf",
          "sha256": "792f84428368b9a7aba9f96a0c11907762e1108369e6e7582e513e8d4f6deaa8"
        },
        "downloads": -1,
        "filename": "proxytv-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae0c96f5d2f6be927ffaa7e83d2a5bbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12733,
        "upload_time": "2023-02-01T13:50:02",
        "upload_time_iso_8601": "2023-02-01T13:50:02.507607Z",
        "url": "https://files.pythonhosted.org/packages/2b/8f/3bfaabebe82ba5a4ae5572f52d35e5891b3609482bab9689be75c1d7047c/proxytv-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09e414d8984f64941c7267ed28eb99365234bcb4af4b40f7d7237f6c1f6f7e2b",
          "md5": "c19843ac591f5547dbd9ccbbdf2885dc",
          "sha256": "5338fa51be2f9addfdbe560c562803e769a0a16fadfe16e5d98630d2562ea547"
        },
        "downloads": -1,
        "filename": "proxytv-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c19843ac591f5547dbd9ccbbdf2885dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13436,
        "upload_time": "2023-02-01T13:50:03",
        "upload_time_iso_8601": "2023-02-01T13:50:03.916257Z",
        "url": "https://files.pythonhosted.org/packages/09/e4/14d8984f64941c7267ed28eb99365234bcb4af4b40f7d7237f6c1f6f7e2b/proxytv-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e706b7c68535ccc940e13cc73242b3ad25c5b034d659b90ead341c5ac83e07a3",
          "md5": "c981419d4aebb89ce53b83f66764610d",
          "sha256": "a5fc0cd8e2260dd13fe4ed565defb97ec2cba248bd47dd6363daae6c43e0fdac"
        },
        "downloads": -1,
        "filename": "proxytv-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c981419d4aebb89ce53b83f66764610d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12738,
        "upload_time": "2023-02-02T05:56:06",
        "upload_time_iso_8601": "2023-02-02T05:56:06.495668Z",
        "url": "https://files.pythonhosted.org/packages/e7/06/b7c68535ccc940e13cc73242b3ad25c5b034d659b90ead341c5ac83e07a3/proxytv-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "145be25010807e66bc735a2e43360fae287da475a62a998678712b8ee6333c18",
          "md5": "4c774307f7da41f653da4eafc7c8cea2",
          "sha256": "a7e24db8f6bf0184959723d1e87d8e0e8a2f75ac8796615e56edf0c7308f62a3"
        },
        "downloads": -1,
        "filename": "proxytv-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4c774307f7da41f653da4eafc7c8cea2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13279,
        "upload_time": "2023-02-02T05:56:07",
        "upload_time_iso_8601": "2023-02-02T05:56:07.880550Z",
        "url": "https://files.pythonhosted.org/packages/14/5b/e25010807e66bc735a2e43360fae287da475a62a998678712b8ee6333c18/proxytv-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e10c5ed1e9f237d5c387c4cfc43d92b20f66bce1ae6f4821395d5e93fae24e9",
          "md5": "3b9bc3bdea9eabba3803bcca25dcfa24",
          "sha256": "665e2867dc88818d63b467bdf3b12bf34bb6786f27a519b095ecb962a20aafee"
        },
        "downloads": -1,
        "filename": "proxytv-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b9bc3bdea9eabba3803bcca25dcfa24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12724,
        "upload_time": "2023-03-29T09:13:51",
        "upload_time_iso_8601": "2023-03-29T09:13:51.009968Z",
        "url": "https://files.pythonhosted.org/packages/2e/10/c5ed1e9f237d5c387c4cfc43d92b20f66bce1ae6f4821395d5e93fae24e9/proxytv-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb95505aaebd31d91693ca17ac0ce1e6111b17f25cd3b2b742fa407c0d21cbad",
          "md5": "be5bac02339f9f3aba3505b8857004e5",
          "sha256": "b6ac2b18c4dc4a5d9dd4db1a5b39b0a71b685fe12db1cbfd1789d16556e729f8"
        },
        "downloads": -1,
        "filename": "proxytv-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "be5bac02339f9f3aba3505b8857004e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13229,
        "upload_time": "2023-03-29T09:13:52",
        "upload_time_iso_8601": "2023-03-29T09:13:52.497316Z",
        "url": "https://files.pythonhosted.org/packages/bb/95/505aaebd31d91693ca17ac0ce1e6111b17f25cd3b2b742fa407c0d21cbad/proxytv-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e10c5ed1e9f237d5c387c4cfc43d92b20f66bce1ae6f4821395d5e93fae24e9",
        "md5": "3b9bc3bdea9eabba3803bcca25dcfa24",
        "sha256": "665e2867dc88818d63b467bdf3b12bf34bb6786f27a519b095ecb962a20aafee"
      },
      "downloads": -1,
      "filename": "proxytv-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b9bc3bdea9eabba3803bcca25dcfa24",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 12724,
      "upload_time": "2023-03-29T09:13:51",
      "upload_time_iso_8601": "2023-03-29T09:13:51.009968Z",
      "url": "https://files.pythonhosted.org/packages/2e/10/c5ed1e9f237d5c387c4cfc43d92b20f66bce1ae6f4821395d5e93fae24e9/proxytv-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb95505aaebd31d91693ca17ac0ce1e6111b17f25cd3b2b742fa407c0d21cbad",
        "md5": "be5bac02339f9f3aba3505b8857004e5",
        "sha256": "b6ac2b18c4dc4a5d9dd4db1a5b39b0a71b685fe12db1cbfd1789d16556e729f8"
      },
      "downloads": -1,
      "filename": "proxytv-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "be5bac02339f9f3aba3505b8857004e5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 13229,
      "upload_time": "2023-03-29T09:13:52",
      "upload_time_iso_8601": "2023-03-29T09:13:52.497316Z",
      "url": "https://files.pythonhosted.org/packages/bb/95/505aaebd31d91693ca17ac0ce1e6111b17f25cd3b2b742fa407c0d21cbad/proxytv-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}