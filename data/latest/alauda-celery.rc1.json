{
  "info": {
    "author": "Ask Solem",
    "author_email": "ask@celeryproject.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Object Brokering",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "=================================\n celery - Distributed Task Queue\n=================================\n\n.. image:: http://cloud.github.com/downloads/celery/celery/celery_128.png\n\n:Version: 3.1.25 (Cipater)\n:Web: http://celeryproject.org/\n:Download: http://pypi.python.org/pypi/celery/\n:Source: http://github.com/celery/celery/\n:Keywords: task queue, job queue, asynchronous, async, rabbitmq, amqp, redis,\n  python, webhooks, queue, distributed\n\n--\n\nWhat is a Task Queue?\n=====================\n\nTask queues are used as a mechanism to distribute work across threads or\nmachines.\n\nA task queue's input is a unit of work, called a task, dedicated worker\nprocesses then constantly monitor the queue for new work to perform.\n\nCelery communicates via messages, usually using a broker\nto mediate between clients and workers.  To initiate a task a client puts a\nmessage on the queue, the broker then delivers the message to a worker.\n\nA Celery system can consist of multiple workers and brokers, giving way\nto high availability and horizontal scaling.\n\nCelery is a library written in Python, but the protocol can be implemented in\nany language.  So far there's RCelery_ for the Ruby programming language, and a\n`PHP client`, but language interoperability can also be achieved\nby using webhooks.\n\n.. _RCelery: http://leapfrogdevelopment.github.com/rcelery/\n.. _`PHP client`: https://github.com/gjedeer/celery-php\n.. _`using webhooks`:\n    http://docs.celeryproject.org/en/latest/userguide/remote-tasks.html\n\nWhat do I need?\n===============\n\nCelery version 3.0 runs on,\n\n- Python (2.5, 2.6, 2.7, 3.2, 3.3)\n- PyPy (1.8, 1.9)\n- Jython (2.5, 2.7).\n\nThis is the last version to support Python 2.5,\nand from Celery 3.1, Python 2.6 or later is required.\nThe last version to support Python 2.4 was Celery series 2.2.\n\n*Celery* is usually used with a message broker to send and receive messages.\nThe RabbitMQ, Redis transports are feature complete,\nbut there's also experimental support for a myriad of other solutions, including\nusing SQLite for local development.\n\n*Celery* can run on a single machine, on multiple machines, or even\nacross datacenters.\n\nGet Started\n===========\n\nIf this is the first time you're trying to use Celery, or you are\nnew to Celery 3.0 coming from previous versions then you should read our\ngetting started tutorials:\n\n- `First steps with Celery`_\n\n    Tutorial teaching you the bare minimum needed to get started with Celery.\n\n- `Next steps`_\n\n    A more complete overview, showing more features.\n\n.. _`First steps with Celery`:\n    http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html\n\n.. _`Next steps`:\n    http://docs.celeryproject.org/en/latest/getting-started/next-steps.html\n\nCelery is...\n============\n\n- **Simple**\n\n    Celery is easy to use and maintain, and does *not need configuration files*.\n\n    It has an active, friendly community you can talk to for support,\n    including a `mailing-list`_ and and an IRC channel.\n\n    Here's one of the simplest applications you can make::\n\n        from celery import Celery\n\n        app = Celery('hello', broker='amqp://guest@localhost//')\n\n        @app.task\n        def hello():\n            return 'hello world'\n\n- **Highly Available**\n\n    Workers and clients will automatically retry in the event\n    of connection loss or failure, and some brokers support\n    HA in way of *Master/Master* or *Master/Slave* replication.\n\n- **Fast**\n\n    A single Celery process can process millions of tasks a minute,\n    with sub-millisecond round-trip latency (using RabbitMQ,\n    py-librabbitmq, and optimized settings).\n\n- **Flexible**\n\n    Almost every part of *Celery* can be extended or used on its own,\n    Custom pool implementations, serializers, compression schemes, logging,\n    schedulers, consumers, producers, autoscalers, broker transports and much more.\n\nIt supports...\n==============\n\n    - **Message Transports**\n\n        - RabbitMQ_, Redis_,\n        - MongoDB_ (experimental), Amazon SQS (experimental),\n        - CouchDB_ (experimental), SQLAlchemy_ (experimental),\n        - Django ORM (experimental), `IronMQ`_\n        - and more...\n\n    - **Concurrency**\n\n        - Prefork, Eventlet_, gevent_, threads/single threaded\n\n    - **Result Stores**\n\n        - AMQP, Redis\n        - memcached, MongoDB\n        - SQLAlchemy, Django ORM\n        - Apache Cassandra, IronCache\n\n    - **Serialization**\n\n        - *pickle*, *json*, *yaml*, *msgpack*.\n        - *zlib*, *bzip2* compression.\n        - Cryptographic message signing.\n\n.. _`Eventlet`: http://eventlet.net/\n.. _`gevent`: http://gevent.org/\n\n.. _RabbitMQ: http://rabbitmq.com\n.. _Redis: http://redis.io\n.. _MongoDB: http://mongodb.org\n.. _Beanstalk: http://kr.github.com/beanstalkd\n.. _CouchDB: http://couchdb.apache.org\n.. _SQLAlchemy: http://sqlalchemy.org\n.. _`IronMQ`: http://iron.io\n\nFramework Integration\n=====================\n\nCelery is easy to integrate with web frameworks, some of which even have\nintegration packages:\n\n    +--------------------+------------------------+\n    | `Django`_          | not needed             |\n    +--------------------+------------------------+\n    | `Pyramid`_         | `pyramid_celery`_      |\n    +--------------------+------------------------+\n    | `Pylons`_          | `celery-pylons`_       |\n    +--------------------+------------------------+\n    | `Flask`_           | not needed             |\n    +--------------------+------------------------+\n    | `web2py`_          | `web2py-celery`_       |\n    +--------------------+------------------------+\n    | `Tornado`_         | `tornado-celery`_      |\n    +--------------------+------------------------+\n\nThe integration packages are not strictly necessary, but they can make\ndevelopment easier, and sometimes they add important hooks like closing\ndatabase connections at ``fork``.\n\n.. _`Django`: http://djangoproject.com/\n.. _`Pylons`: http://pylonsproject.org/\n.. _`Flask`: http://flask.pocoo.org/\n.. _`web2py`: http://web2py.com/\n.. _`Bottle`: http://bottlepy.org/\n.. _`Pyramid`: http://docs.pylonsproject.org/en/latest/docs/pyramid.html\n.. _`pyramid_celery`: http://pypi.python.org/pypi/pyramid_celery/\n.. _`django-celery`: http://pypi.python.org/pypi/django-celery\n.. _`celery-pylons`: http://pypi.python.org/pypi/celery-pylons\n.. _`web2py-celery`: http://code.google.com/p/web2py-celery/\n.. _`Tornado`: http://www.tornadoweb.org/\n.. _`tornado-celery`: http://github.com/mher/tornado-celery/\n\n.. _celery-documentation:\n\nDocumentation\n=============\n\nThe `latest documentation`_ with user guides, tutorials and API reference\nis hosted at Read The Docs.\n\n.. _`latest documentation`: http://docs.celeryproject.org/en/latest/\n\n.. _celery-installation:\n\nInstallation\n============\n\nYou can install Celery either via the Python Package Index (PyPI)\nor from source.\n\nTo install using `pip`,::\n\n    $ pip install -U Celery\n\nTo install using `easy_install`,::\n\n    $ easy_install -U Celery\n\n.. _bundles:\n\nBundles\n-------\n\nCelery also defines a group of bundles that can be used\nto install Celery and the dependencies for a given feature.\n\nYou can specify these in your requirements or on the ``pip`` comand-line\nby using brackets.  Multiple bundles can be specified by separating them by\ncommas.\n::\n\n    $ pip install \"celery[librabbitmq]\"\n\n    $ pip install \"celery[librabbitmq,redis,auth,msgpack]\"\n\nThe following bundles are available:\n\nSerializers\n~~~~~~~~~~~\n\n:celery[auth]:\n    for using the auth serializer.\n\n:celery[msgpack]:\n    for using the msgpack serializer.\n\n:celery[yaml]:\n    for using the yaml serializer.\n\nConcurrency\n~~~~~~~~~~~\n\n:celery[eventlet]:\n    for using the eventlet pool.\n\n:celery[gevent]:\n    for using the gevent pool.\n\n:celery[threads]:\n    for using the thread pool.\n\nTransports and Backends\n~~~~~~~~~~~~~~~~~~~~~~~\n\n:celery[librabbitmq]:\n    for using the librabbitmq C library.\n\n:celery[redis]:\n    for using Redis as a message transport or as a result backend.\n\n:celery[mongodb]:\n    for using MongoDB as a message transport (*experimental*),\n    or as a result backend (*supported*).\n\n:celery[sqs]:\n    for using Amazon SQS as a message transport (*experimental*).\n\n:celery[memcache]:\n    for using memcached as a result backend.\n\n:celery[cassandra]:\n    for using Apache Cassandra as a result backend.\n\n:celery[couchdb]:\n    for using CouchDB as a message transport (*experimental*).\n\n:celery[couchbase]:\n    for using CouchBase as a result backend.\n\n:celery[beanstalk]:\n    for using Beanstalk as a message transport (*experimental*).\n\n:celery[zookeeper]:\n    for using Zookeeper as a message transport.\n\n:celery[zeromq]:\n    for using ZeroMQ as a message transport (*experimental*).\n\n:celery[sqlalchemy]:\n    for using SQLAlchemy as a message transport (*experimental*),\n    or as a result backend (*supported*).\n\n:celery[pyro]:\n    for using the Pyro4 message transport (*experimental*).\n\n:celery[slmq]:\n    for using the SoftLayer Message Queue transport (*experimental*).\n\n.. _celery-installing-from-source:\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of Celery from\nhttp://pypi.python.org/pypi/celery/\n\nYou can install it by doing the following,::\n\n    $ tar xvfz celery-0.0.0.tar.gz\n    $ cd celery-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou are not currently using a virtualenv.\n\n.. _celery-installing-from-git:\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nThe Celery development version also requires the development\nversions of ``kombu``, ``amqp`` and ``billiard``.\n\nYou can install the latest snapshot of these using the following\npip commands::\n\n    $ pip install https://github.com/celery/celery/zipball/master#egg=celery\n    $ pip install https://github.com/celery/billiard/zipball/master#egg=billiard\n    $ pip install https://github.com/celery/py-amqp/zipball/master#egg=amqp\n    $ pip install https://github.com/celery/kombu/zipball/master#egg=kombu\n\nWith git\n~~~~~~~~\n\nPlease the Contributing section.\n\n.. _getting-help:\n\nGetting Help\n============\n\n.. _mailing-list:\n\nMailing list\n------------\n\nFor discussions about the usage, development, and future of celery,\nplease join the `celery-users`_ mailing list.\n\n.. _`celery-users`: http://groups.google.com/group/celery-users/\n\n.. _irc-channel:\n\nIRC\n---\n\nCome chat with us on IRC. The **#celery** channel is located at the `Freenode`_\nnetwork.\n\n.. _`Freenode`: http://freenode.net\n\n.. _bug-tracker:\n\nBug tracker\n===========\n\nIf you have any suggestions, bug reports or annoyances please report them\nto our issue tracker at http://github.com/celery/celery/issues/\n\n.. _wiki:\n\nWiki\n====\n\nhttp://wiki.github.com/celery/celery/\n\n.. _contributing-short:\n\nContributing\n============\n\nDevelopment of `celery` happens at Github: http://github.com/celery/celery\n\nYou are highly encouraged to participate in the development\nof `celery`. If you don't like Github (for some reason) you're welcome\nto send regular patches.\n\nBe sure to also read the `Contributing to Celery`_ section in the\ndocumentation.\n\n.. _`Contributing to Celery`:\n    http://docs.celeryproject.org/en/master/contributing.html\n\n.. _license:\n\nLicense\n=======\n\nThis software is licensed under the `New BSD License`. See the ``LICENSE``\nfile in the top distribution directory for the full license text.\n\n.. # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround\n\n\n.. image:: https://d2weczhvl823v0.cloudfront.net/celery/celery/trend.png\n    :alt: Bitdeli badge\n    :target: https://bitdeli.com/free",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://celeryproject.org",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alauda-celery",
    "package_url": "https://pypi.org/project/alauda-celery/",
    "platform": "any",
    "project_url": "https://pypi.org/project/alauda-celery/",
    "project_urls": {
      "Homepage": "http://celeryproject.org"
    },
    "release_url": "https://pypi.org/project/alauda-celery/3.1.25rc1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Distributed Task Queue",
    "version": "3.1.25rc1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2971740,
  "releases": {
    "3.1.25rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a99b18d51563bab832958a7efff72e8b0b0fbdcdd0540079ba1b4f60f2e76ff7",
          "md5": "c4714bc29ab9ed19276cdbe7c6a55561",
          "sha256": "19616ee1e5c7c4797303ac6f49aec234a4660a2b644b4ba1d5c050cfd0c91a5c"
        },
        "downloads": -1,
        "filename": "alauda-celery-3.1.25rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "c4714bc29ab9ed19276cdbe7c6a55561",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1313860,
        "upload_time": "2017-06-23T02:51:56",
        "upload_time_iso_8601": "2017-06-23T02:51:56.593537Z",
        "url": "https://files.pythonhosted.org/packages/a9/9b/18d51563bab832958a7efff72e8b0b0fbdcdd0540079ba1b4f60f2e76ff7/alauda-celery-3.1.25rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a99b18d51563bab832958a7efff72e8b0b0fbdcdd0540079ba1b4f60f2e76ff7",
        "md5": "c4714bc29ab9ed19276cdbe7c6a55561",
        "sha256": "19616ee1e5c7c4797303ac6f49aec234a4660a2b644b4ba1d5c050cfd0c91a5c"
      },
      "downloads": -1,
      "filename": "alauda-celery-3.1.25rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "c4714bc29ab9ed19276cdbe7c6a55561",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1313860,
      "upload_time": "2017-06-23T02:51:56",
      "upload_time_iso_8601": "2017-06-23T02:51:56.593537Z",
      "url": "https://files.pythonhosted.org/packages/a9/9b/18d51563bab832958a7efff72e8b0b0fbdcdd0540079ba1b4f60f2e76ff7/alauda-celery-3.1.25rc1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}