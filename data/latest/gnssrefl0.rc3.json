{
  "info": {
    "author": "Kristine Larson",
    "author_email": "kristine.larson@colorado.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# gnssrefl0\n\nThis package is a new version of my GNSS interferometric reflectometry (GNSS_IR) code. \n\nThe main difference bewteen this version and previous versions is that I am\nattempting to use proper python packaging rules, LOL. I have separated out the main\nparts of the code and the command line inputs so that you can use the gnssrefl0 libraries\nyourself or do it all from the command line. This should also - hopefully - make\nit easier for the production of Jupyter notebooks. The latter are to be developed\nby UNAVCO with NASA funding.\n\n# For those of you who don't like reading documentation\n\nI recommend you use the web app [I developed](https://gnss-reflections.org). It \ncan show you how the technique works without installing any code. It also picks up \nthe data for you and provides results in less than 10 seconds. \n\n\n# Overview Comments\n\nThe goal of this python repository is to help you compute (and evaluate) GNSS-based\nreflectometry parameters using geodetic data. This method is often\ncalled GNSS-IR, or GNSS Interferometric Reflectometry. There are three main codes:\n\n\n* **rinex2snr** translates RINEX files into SNR files needed for analysis.\n\n* **gnssir** computes reflector heights (RH) from GNSS data.\n\n* **quickLook** gives you a quick (visual) assessment of a file without dealing\nwith the details associated with **gnssir**.\n\nThere is also a RINEX download script **download_rinex**, but it is not required.\n\n# Environment Variables \n\nYou should define three environment variables:\n\n* EXE = where various RINEX executables will live.\n\n* ORBITS = where the GPS/GNSS orbits will be stored. They will be listed under directories by \nyear and sp3 or nav depending on the orbit format.\n\n* REFL_CODE = where the reflection code inputs (SNR files and instructions) and outputs (RH)\nwill be stored (see below). Both SNR files and results will be saved here in year subdirectories.\n\nHowever, if you do not do this, the code will assume your local working directory (where you installed\nthe code) is where you want everything to be. The orbits, SNR files, and periodogram results are stored in \ndirectories in year, followed by type, i.e. snr, results, sp3, nav, and then by station name.\n\n# Python\n\nIf you are using the version from gitHub:\n\n* make a directory, cd into that directory, set up a virtual environment, a la python3 -m venv env, activate it\n* git clone https://github.com/kristinemlarson/gnssrefl0 \n* pip install .\n\nIf you use the PyPi version:  \n\n* make a directory, cd into that directory, set up a virtual environment, activate it\n* pip install gnssrefl0\n\n\n# Non-Python Code \n\nAll executables should be stored in the EXE directory.  If you do not define EXE, it will look for them in your \nlocal working directory.  The Fortran translators are much faster than using python. But if \nyou don't want to use them,\nthey are optional, that's fine. FYI, the python version is slow \nnot because of the RINEX - it is because you need to calculate\na crude model for satellite coordinates in this code. And that takes cpu time....\n\n* **Required** translator for compressed RINEX files. CRX2RNX, http://terras.gsi.go.jp/ja/crx2rnx.html\n\n* Optional Fortran RINEX Translator for GPS, the executable must be called gpsSNR.e, https://github.com/kristinemlarson/gpsonlySNR\n\n* Optional Fortran RINEX translator for multi-GNSS, the executable must be called gnssSNR.e, https://github.com/kristinemlarson/gnssSNR\n\n* Optional datatool, teqc, is highly recommended.  There is a list of static executables at the\nbottom of [this page](http://www.unavco.org/software/data-processing/teqc/teqc.html)\n\n* Optional datatool, gfzrnx is required if you plan to use the RINEX 3 option. Executables available from the GFZ,\nhttp://dx.doi.org/10.5880/GFZ.1.1.2016.002\n\n\n# rinex2snr - making SNR files from RINEX files\n\nI run a lowercase shop. Please name RINEX files accordingly and use lowercase station names. It also means \nthat the filename must be N characters long (ssssddd0.yyo), where ssss is station name, ddd is day of year, and yy is\ntwo character year. If you have installed the CRX2RNX code, you can also provide a compressed RINEX format file, \nwhich means your file must be called ssssddd0.yyd.  I think my code allows gz or Z as compression types.\n\nA RINEX file has extraneous information in it (the data used for positioning) - and does not provide some of the \ninformation needed (elevation and azimuth angles) for reflectometry. The first task you \nhave is to translate a data file from RINEX into what I will call a SNR format - and to calculate those geometric angles.  \nFor the latter you will need an orbit file. If you tell it which kind of orbit file you want, the code will go get it for you.  \nSecondly, you will need to decide how much of the data file you want to save. If you are new\nto the systems, I would choose **option 99**, which is all data between elevation angles of 5 and 30 degrees.\n\nThe command line driver is **rinex2snr**. You need to tell the program the name of the station,\nthe year and doy of year, your orbit file preference, and your SNR format type.\nA sample call for a station called p041, restricted to GPS satellites, on day of year 132 and year 2020 would be:\n\n*rinex2snr p041 2020 132 99 nav*\n\nIf the RINEX file for p041 is in your local directory, it will translate it.  If not, \nit will check four archives (unavco, sopac, cddis, and sonel) to find it. \nI will also search ga (geoscience Australia), nz (New Zealand), ngs, and bkg if you invoke -archive,\ne.g.\n\n*rinex2snr tgho 2020 132 99 nav -archive nz*\n\nWhat if you want to run the code for all the data for a given year?  \n\n*rinex2snr tgho 2019 1 99 nav -archive nz -doy_end 365* \n\nIf your station name has 9 characters, the code assumes you are looking for a \nRINEX 3 file. However, it will store the SNR data using the normal\n4 character name. This requires you install the gfzrnx executable that translates RINEX 3 to 2.\n\nThe snr options are always two digit numbers.  Choices are:\n\n- 99 is elevation angles of 5-30 degrees  (most applications)\n- 88 is elevation angles of 5-90 degrees\n- 66 is elevation angles less than 30 degrees\n- 50 is elevation angles less than 10 degrees (good for tall, high-rate applications)\n\norbit file options:\n\n- nav : GPS broadcast, perfectly adequate for reflectometry\n- igs : IGS precise, GPS only\n- igr : IGS rapid, GPS only\n- jax : JAXA, GPS + Glonass, within a few days\n- gbm : GFZ Potsdam, multi-GNSS, not rapid\n- grg: French group, GPS, Galileo and Glonass, not rapid\n- wum : Wuhan, multi-GNSS, not rapid\n\nWhat if you do not want to install the fortran translators?  Use -fortran True on the command line.\n\n# quickLook \n\nBefore using the **gnssir** code, I recommend you try **quickLook**. This allows you\nto quickly test various options (elevation angles, frequencies, azimuths).\nThe required inputs are station name, year, doy of year, and SNR Format (start with 99).\n\nIf the SNR file has not been previously stored, you can provide a properly named RINEX file\n(lowercase only) in your working directory. If it doesn't find a file in either of these places, it\nwill try to pick up the RINEX data from various archives (unavco, sopac, sonel, and cddis) and translate it for\nyou into the correct SNR format. There are stored defaults for analyzing the\nspectral characteristics of the SNR data.  If you want to override those, use *quickLook -h*\n\n*quickLook p041 2020 150 99*  (this uses defaults)\n\n*quickLook gls1 2011 271 99*  (this uses defaults)\n\n*quickLook smm3 2018 271 99 -h1 8 -h2 20*  (smm3 is about 15 meters tall, so I am modifying from the defaults)\n\nMany archives make it difficult for you to access modern GNSS signals. This is really unfortunate,\nas the L2C and L5 GPS signals are great, as are the signals from Galileo, Glonass, and Beidou.\n\nMany archives also make it difficult for you to use high-rate data. Especially for sea level studies, I recommend\ngoing higher than typical geodetic sampling rates.\n\n# gnssir\n\nThis is the main driver for the reflectometry code.  You need a set of instructions which can be made using **make_json_input**.  At a minimum **make_json_input** needs the station name (4 char), the latitude (degrees), longitude (degrees) and ellipsoidal height (meters). It will use defaults for other parameters if you do not provide them. Those defaults tell the code an azimuth and elevation angle mask (i.e. which directions you want to allow reflections from), and which frequencies you want to use, and various quality control metrics. \n\nThings that are helpful to know for the json and commandline inputs:\n\n*Names for the GNSS frequencies*\n- 1,2,5 are GPS L1, L2, L5\n- 20 is GPS L2C \n- 101,102 Glonass L1 and L2\n- 201, 205, 206, 207, 208: Galileo frequencies\n- 302, 306, 307 : Beidou frequencies\n\n*Reflection parameters:*\n- e1 and e2 are the min and max elevation angle, in degrees\n- minH and maxH are the min and max allowed reflector height, in meters\n- desiredP, desired reflector height precision, in meters\n- PkNoise is the periodogram peak divided by the periodogram noise ratio.  \n- reqAmp is the required periodogram amplitude value, in volts/volts\n- polyV is the polynomial order used for removing the direct signal\n- freqs are selected frequencies for analysis\n- delTmax is the maximum length of allowed satellite arc, in minutes\n- azval are the azimuth regions for study, in pairs (i.e. 0 90 270 360 means you want to evaluate 0 to 90 and 270 to 360).\n\n*Other json inputs:*\n- wantCompression, boolean, compress SNR files\n- screenstats, boolean, whether minimal periodogram results come to screen\n- refraction, boolean, whether simple refraction model is applied.\n- plt_screen: boolean, whether SNR data and periodogram are plotted to the screen\n- seekRinex: boolean, whether code looks for RINEX at an archive\n\n\nSimple example for my favorite GPS site [p041](https://spotlight.unavco.org/station-pages/p042/eo/scientistPhoto.jpg)\n\n- *make_json_input p041 39.949 -105.194 1728.856* (use defaults and write out a json instruction file)\n- *rinex2snr p041 2020 150 99 nav* (pick up and translate RINEX file from unavco)\n- *gnssir p041 2020 150 99* (calculate the reflector heights) \n- *gnssir p041 2020 150 99 -fr 5 -plt True* (override defaults, only look at L5, SNR data and periodogram plots come to the screen)\n\nWhere are the files for this example?\n\n- json is stored in REFL_CODE/input/p041.json\n- SNR files are stored in REFL_CODE/2020/snr/p041\n- Reflector Height (RH) results are stored in REFL_CODE/2020/results/p041\n- I do not save RINEX files.  \n\nIf you want multi-GNSS, you need to use multi-GNSS orbits and edit the json file. And the RINEX you select \nmust have multi-GNSS SNR observations in it. p041 currently has multi-GNSS data in the RINEX file:\n\n- *rinex2snr p041 2020 151 99 gbm* (use GFZ orbits so you can use GPS, Glonass, and Galileo)\n- *gnssir p041 2020 151 99 -fr 201 -plt True* (look at the lovely Galileo L1 data) \n\n\n# Publications\n\nThere are A LOT of publications about GPS and GNSS interferometric reflectometry.\nIf you want something with a how-to flavor, try this paper, \nwhich is [open option](https://link.springer.com/article/10.1007/s10291-018-0744-8)\n\nAlso look to the publications page on my [personal website](https://kristinelarson.net/publications)\n\n# How can I import the libraries in this package?\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kristinemlarson/gnssrefl0/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gnssrefl0",
    "package_url": "https://pypi.org/project/gnssrefl0/",
    "platform": "",
    "project_url": "https://pypi.org/project/gnssrefl0/",
    "project_urls": {
      "Homepage": "https://github.com/kristinemlarson/gnssrefl0/"
    },
    "release_url": "https://pypi.org/project/gnssrefl0/0.0.12/",
    "requires_dist": [
      "numpy",
      "wget",
      "scipy",
      "matplotlib",
      "requests"
    ],
    "requires_python": "",
    "summary": "A GNSS reflectometry software package",
    "version": "0.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8212357,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97708cf9172cf04c4812961d4fcd991f76a6bea3658cded3df84763295df4e65",
          "md5": "3da6040be233412534a5ce3466954a6e",
          "sha256": "03eea02bc530239569059662728bcf23bf9cd6d4a4e7d746ce7aad1c14a4a43e"
        },
        "downloads": -1,
        "filename": "gnssrefl0-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3da6040be233412534a5ce3466954a6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4510164,
        "upload_time": "2020-09-17T19:37:33",
        "upload_time_iso_8601": "2020-09-17T19:37:33.485057Z",
        "url": "https://files.pythonhosted.org/packages/97/70/8cf9172cf04c4812961d4fcd991f76a6bea3658cded3df84763295df4e65/gnssrefl0-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64c1a5e5b9022387cde14005853eb8ee86dc54b76cf3c55f17dd0a88bee3d86d",
          "md5": "8e0452a1dc08e93539cbf082146a9198",
          "sha256": "ef44c9cb3d61dd235676a5fab3e918eb7a9f7b313fc6851116b31da1e4088540"
        },
        "downloads": -1,
        "filename": "gnssrefl0-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "8e0452a1dc08e93539cbf082146a9198",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4379127,
        "upload_time": "2020-09-17T19:37:40",
        "upload_time_iso_8601": "2020-09-17T19:37:40.131134Z",
        "url": "https://files.pythonhosted.org/packages/64/c1/a5e5b9022387cde14005853eb8ee86dc54b76cf3c55f17dd0a88bee3d86d/gnssrefl0-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78f1804ffdd668d347f9a0209bb49701a6086bed84b38076364894161974c240",
          "md5": "1e0eb0574d37fbb524c62f1dfc3a0ada",
          "sha256": "7076969b378b1d5e465e6638cd1478053f6ea80977861cc1d004cac5852156e4"
        },
        "downloads": -1,
        "filename": "gnssrefl0-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e0eb0574d37fbb524c62f1dfc3a0ada",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4510298,
        "upload_time": "2020-09-17T19:37:37",
        "upload_time_iso_8601": "2020-09-17T19:37:37.530994Z",
        "url": "https://files.pythonhosted.org/packages/78/f1/804ffdd668d347f9a0209bb49701a6086bed84b38076364894161974c240/gnssrefl0-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f6719fdf063b1c8ebb1e79de5ff08ead3186c3bc757352b02a83c8536563524",
          "md5": "d7fb92bc8db1b8a81908e6ddd6b818e5",
          "sha256": "3c4fc1ebe09cd06071ef5b0b13c474614b0bb072f91df394a3a00d35fd22bdfe"
        },
        "downloads": -1,
        "filename": "gnssrefl0-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "d7fb92bc8db1b8a81908e6ddd6b818e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4379413,
        "upload_time": "2020-09-17T19:37:42",
        "upload_time_iso_8601": "2020-09-17T19:37:42.871790Z",
        "url": "https://files.pythonhosted.org/packages/9f/67/19fdf063b1c8ebb1e79de5ff08ead3186c3bc757352b02a83c8536563524/gnssrefl0-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b450785741cde5d9162db5625413a081b0654ebb4e6fd996ed4d65e77f653d0",
          "md5": "9bb895fc3c90aab3dc5ebc0f3d3156c5",
          "sha256": "3fce1d6c103719729774f9f325dbe9691ebfd152dc393995a105365f01255d09"
        },
        "downloads": -1,
        "filename": "gnssrefl0-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bb895fc3c90aab3dc5ebc0f3d3156c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4510739,
        "upload_time": "2020-09-17T21:48:55",
        "upload_time_iso_8601": "2020-09-17T21:48:55.941476Z",
        "url": "https://files.pythonhosted.org/packages/3b/45/0785741cde5d9162db5625413a081b0654ebb4e6fd996ed4d65e77f653d0/gnssrefl0-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4e4a6b4de7dda74a49f80c4764ee8084819fe7a21c275db93e136143dec6c56",
          "md5": "e5d83c3c25c18cac81de981d21dd655a",
          "sha256": "ee94ed8cb7ccea85b441d528347b83826a32d06e9e68e1a3e431ff7569adc831"
        },
        "downloads": -1,
        "filename": "gnssrefl0-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "e5d83c3c25c18cac81de981d21dd655a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4380174,
        "upload_time": "2020-09-17T21:48:59",
        "upload_time_iso_8601": "2020-09-17T21:48:59.099718Z",
        "url": "https://files.pythonhosted.org/packages/d4/e4/a6b4de7dda74a49f80c4764ee8084819fe7a21c275db93e136143dec6c56/gnssrefl0-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b450785741cde5d9162db5625413a081b0654ebb4e6fd996ed4d65e77f653d0",
        "md5": "9bb895fc3c90aab3dc5ebc0f3d3156c5",
        "sha256": "3fce1d6c103719729774f9f325dbe9691ebfd152dc393995a105365f01255d09"
      },
      "downloads": -1,
      "filename": "gnssrefl0-0.0.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9bb895fc3c90aab3dc5ebc0f3d3156c5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4510739,
      "upload_time": "2020-09-17T21:48:55",
      "upload_time_iso_8601": "2020-09-17T21:48:55.941476Z",
      "url": "https://files.pythonhosted.org/packages/3b/45/0785741cde5d9162db5625413a081b0654ebb4e6fd996ed4d65e77f653d0/gnssrefl0-0.0.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4e4a6b4de7dda74a49f80c4764ee8084819fe7a21c275db93e136143dec6c56",
        "md5": "e5d83c3c25c18cac81de981d21dd655a",
        "sha256": "ee94ed8cb7ccea85b441d528347b83826a32d06e9e68e1a3e431ff7569adc831"
      },
      "downloads": -1,
      "filename": "gnssrefl0-0.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "e5d83c3c25c18cac81de981d21dd655a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4380174,
      "upload_time": "2020-09-17T21:48:59",
      "upload_time_iso_8601": "2020-09-17T21:48:59.099718Z",
      "url": "https://files.pythonhosted.org/packages/d4/e4/a6b4de7dda74a49f80c4764ee8084819fe7a21c275db93e136143dec6c56/gnssrefl0-0.0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}