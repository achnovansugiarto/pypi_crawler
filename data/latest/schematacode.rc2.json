{
  "info": {
    "author": "B. T. Milnes",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Schemata\n\nSchemata is a file format that makes it easier to create schemas for XML and JSON files.\n\n## Motivation\n\nSchemata was created because many of the existing formats for XML schema are verbose. Among these is XSD. XSD, while flexible, requires a lot of mark-up (because it is an XML format) and is difficult to read. XSD files can easily become very large, and very disordered. This makes them difficult and tedious to maintain.\n\nThe Schemata format uses minimal, intuitive mark-up, making it easy to read and maintain. This is particularly useful when creating and maintaining schemas for multiple complex formats. \n\nWhile Schemata was originally designed for XML schemas, it became apparent that the same format could also be used to define JSON schemas. Support for this has been added.\n\n## How does it work?\n\nThis code library does not actually _perform_ the validation of an XML or JSON file against the schema itself. Instead, this code library generates an XSD or JSON Schemas file that can be used for validation. The validation can then be _performed_ by any number of standard libraries. This has the advantage that the code library is easy to maintain, and its output is portable.\n\nThis code library can also generate documentation for an XML or JSON format based on the Schemata file. This documentation is not _quite_ perfect - there will always be nuances in how an XML or JSON format is used that cannot be accounted for in the schema - but generating the documentation from the Schemata file and then editing it can be **a lot** quicker than writing the whole thing manually.\n\n## An Introduction to the Syntax\n\nLet's start by considering a very simple XML file.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<books>\n    <book id=\"the_fellowship_of_the_ring\">\n        <title>The Fellowship of the Ring</title>\n        <subtitle>The Lord of the Rings, Book 1</subtitle>\n        <isbn>0261103571</isbn>\n    </book>\n    <book id=\"pride_and_prejudice\">\n        <title>Pride and Prejudice</title>\n        <subtitle></subtitle>\n        <isbn>9780141040349</isbn>\n    </book>\n    <book id=\"a_game_of_thrones\">\n        <title>A Game of Thrones</title>\n        <subtitle>A Song of Ice and Fire, Book 1</subtitle>\n        <isbn>9780006479888</isbn>\n    </book>\n</books>\n```\n\nThis XML file contains a list of books, with some basic information about each book. We can call this XML format Book List XML.\n\nIn writing a schema for Book List XML, we might start by defining the root element `<books>`, which we can do in Schemata syntax as below.\n\n```\nroot element books {\n}\n```\n\nThis code block states that in Book List XML there can be an element `<books>`, and that this element can be a root element of the document. We haven't said anything about the contents of this element yet, because we haven't defined any other elements in our Schemata file.\n\nNote that the string that appears after `root element` in the code block above defines both the _reference_ to this structure in the Schemata file (the name by which this structure is referred to in the rest of the Schemata file), and the _tag name_ of the XML element. These two things can be set differently, as shown below.\n\n```\nroot element my_root_element {\n    tagName: 'books';\n}\n```\n\nThis code block still states that in Book List XML there can be a root element `<books>`, but if we need to refer to it elsewhere in the Schemata file, it will be referred to as `my_root_element`. (Most of the time you won't want to have the reference and the tag name be different - it's only when schemas get much more complicated that you might need to.)\n\nWe now want to define an element `<book>` that has an `id` attribute. We need to first define the `id` attribute, which we can do in Schemata syntax as below.\n\n```\nattribute id {\n    valueType: string;\n}\n```\n\nThis code block states that in Book List XML there can be an attribute `id`, the value of which can be any string. We can now define the `<book>` element.\n\n```\nelement book {\n    attributes: id;\n}\n```\n\nThis code block states that in Book List XML there can be an element `<book>`, which has an attribute `id`. (In this case it is a required attribute.)\n\nNow we want to say that this `<book>` element can be a subelement of the `<books>` element. In order to do this, we need to adjust the first code block we wrote, as below.\n\n```\nroot element books {\n    allowedContent: [ book (n >= 0) ];\n}\n```\n\nThis code block now states that the `<books>` element can have `<book>` subelements. The expression `n >= 0` indicates that there can be any number of `<book>` subelements, including zero. (That wouldn't be a very useful file, but we'll allow it.) The square brackets in the `allowedContent` property indicate that the subelements must appear in the order defined. This doesn't really matter in this case, as only one type of subelement - the `<book>` subelement - can exist. This becomes more useful when an element can have many different types of subelement (as we shall see later).\n\nSo far we have\n\n```\nroot element books {\n    allowedContent: [ book (n >= 0) ];\n}\n\nattribute id {\n    valueType: string;\n}\n\nelement book {\n    attributes: id;\n}\n```\n\nAt this point it's worth mentioning that we can be more specific with what values things like attributes can have. This can be done through data types.\n\nIn our example XML file above, we can see that the ids of the books always consist of letters, numbers, and underscores - never spaces, hyphens, apostrophes, et cetera. We can define a new data type in Schemata as below.\n\n```\ndataType _id {\n    baseType: string;\n    allowedPattern: '[A-Za-z0-9_]+';\n}\n```\n\nThis code block defines a new data type `_id`. (By convention, it's a good idea to start data type references with an underscore, to prevent clashes with attribute structures.) In this case we have stated that the base type of this new data type is a string, and then we've stated that this string must conform to the given regular expression. Putting this all together, we get\n\n```\nroot element books {\n    allowedContent: [ book (n >= 0) ];\n}\n\ndataType _id {\n    baseType: string;\n    allowedPattern: '[A-Za-z0-9_]+';\n}\n\nattribute id {\n    valueType: _id;\n}\n\nelement book {\n    attributes: id;\n}\n```\n\nWe now want to define the possible subelements of the `<book>` element. Let's start with the `<title>` element.\n\n```\nelement title {\n    allowedContent: *any text*;\n}\n```\n\nIn this case, we want to allow the element to contain any text, but no subelements. We do this with `*any text*`.\n\nThe `<subtitle>` and `<isbn>` elements we can define to work in the same way.\n\n```\nelement subtitle {\n    allowedContent: *any text*;\n}\n\nelement isbn {\n    allowedContent: *any text*;\n}\n```\n\nFinally, we need to 'attach' these subelements to the `<book>` element - i.e., we need to state that they are possible subelements. We can do this by editing the definition of the `<book>` structure.\n\n```\nelement book {\n    attributes: id;\n    allowedContent: [ title, subtitle (optional), isbn ];\n}\n``` \n\nHere we have specified that the `<title>` element can be a subelement of `<book>`. As we have not put an n-expression in brackets after it, there must be exactly 1 `<title>` element. The `<subtitle>` element we have indicated is optional, meaning that there can be 0 or 1 `<subtitle>` elements, but no more. We have specified that there must be exactly 1 `<isbn>` element. \n\nThe use of square brackets here indicates that these elements must appear in this order. So the XML below would be wrong, and would fail validation against the XSD.\n\n```xml\n<book id=\"the_fellowship_of_the_ring\">\n    <isbn>0261103571</isbn>\n    <title>The Fellowship of the Ring</title>\n    <subtitle>The Lord of the Rings, Book 1</subtitle>\n</book>\n```\n\nIf we wanted to specify that the order of the subelements does not matter, we would use recurve brackets, as below.\n\n```\nelement book {\n    attributes: id;\n    allowedContent: { title, subtitle (optional), isbn };\n}\n``` \n\nPutting everything together, we get\n\n```\nroot element books {\n    allowedContent: [ book (n >= 0) ];\n}\n\ndataType _id {\n    baseType: string;\n    allowedPattern: '[A-Za-z0-9_]+';\n}\n\nattribute id {\n    valueType: _id;\n}\n\nelement book {\n    attributes: id;\n    allowedContent: [ title, subtitle (optional), isbn ];\n}\n\nelement title {\n    allowedContent: *any text*;\n}\n\nelement subtitle {\n    allowedContent: *any text*;\n}\n\nelement isbn {\n    allowedContent: *any text*;\n}\n```\n\nThis schema, when put through the Schemata code, produces the following XSD file.\n\n```xml\n<?xml version='1.0' encoding='UTF-8'?>\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\">\n    <xs:simpleType name=\"__type__d___id\">\n        <xs:restriction base=\"xs:string\">\n            <xs:pattern value=\"[A-Za-z0-9_]+\"/>\n        </xs:restriction>\n    </xs:simpleType>\n    <xs:complexType name=\"__type__e__books\" mixed=\"false\">\n        <xs:sequence>\n            <xs:element name=\"book\" type=\"__type__e__book\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </xs:sequence>\n    </xs:complexType>\n    <xs:complexType name=\"__type__e__book\" mixed=\"false\">\n        <xs:sequence>\n            <xs:element name=\"title\" type=\"__type__e__title\"/>\n            <xs:element name=\"subtitle\" type=\"__type__e__subtitle\" minOccurs=\"0\"/>\n            <xs:element name=\"isbn\" type=\"__type__e__isbn\"/>\n        </xs:sequence>\n        <xs:attribute name=\"id\" type=\"__type__d___id\" use=\"required\"/>\n    </xs:complexType>\n    <xs:simpleType name=\"__type__e__title\">\n        <xs:restriction base=\"xs:string\"/>\n    </xs:simpleType>\n    <xs:simpleType name=\"__type__e__subtitle\">\n        <xs:restriction base=\"xs:string\"/>\n    </xs:simpleType>\n    <xs:simpleType name=\"__type__e__isbn\">\n        <xs:restriction base=\"xs:string\"/>\n    </xs:simpleType>\n    <xs:element name=\"books\" type=\"__type__e__books\"/>\n</xs:schema>\n```\n\nThe XML file we started with passes validation against this XSD file.\n\nThere are many features which have not been covered in this introduction. \n\n## Principles of Design\n\nThe ease-of-reading and intuitiveness of the Schemata syntax should be apparent. The syntax is superficially similar to that of CSS, which many developers are familiar with. Much of the 'heavy-lifting' of the mark-up is done by brackets, colons, and semi-colons, as opposed to opening and closing XML tags.\n\nSchemata is based around the concept of **structures**. XML schemas can be defined in terms of element, attribute, and data structures. JSON schemas can be defined in terms of object, property, array, and data structures. Really, any collection of data can be described in terms of the structures that make it up.\n\nThinking in these terms, we can see that a Schemata file is ultimately just a list of structures. The structures can refer to each other and include each other, but the file is ultimately just a one-dimensional list.\n\n## Credits\n\nMade by B. T. Milnes for Nagwa Limited\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SchemataCode/Schemata",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "schematacode",
    "package_url": "https://pypi.org/project/schematacode/",
    "platform": null,
    "project_url": "https://pypi.org/project/schematacode/",
    "project_urls": {
      "Homepage": "https://github.com/SchemataCode/Schemata"
    },
    "release_url": "https://pypi.org/project/schematacode/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Schemata is a file format that makes writing XML and JSON schemas easier.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13241584,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2444dc8b766a04ed339657c6b731a1ed9b178c5eaf96c170b367ad935b311f2e",
          "md5": "f7061263fbc736dabd35b473c78b5df0",
          "sha256": "b0bc7cb75fe3acfa14695f94a3126aa76ce1c477420186b7d1d83ceb99268996"
        },
        "downloads": -1,
        "filename": "schematacode-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7061263fbc736dabd35b473c78b5df0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21167,
        "upload_time": "2022-03-21T18:13:14",
        "upload_time_iso_8601": "2022-03-21T18:13:14.861749Z",
        "url": "https://files.pythonhosted.org/packages/24/44/dc8b766a04ed339657c6b731a1ed9b178c5eaf96c170b367ad935b311f2e/schematacode-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27b9e943cde80bd6a640e55b03784f8627038c2961e732e9ce7affe2833f8816",
          "md5": "84ed3054bb7f741b7064c51a34cafd48",
          "sha256": "50f469a8ef73c9e0590eeb2d2a79b1711a55b89e78fa18618c7c3ff8b19536c7"
        },
        "downloads": -1,
        "filename": "schematacode-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84ed3054bb7f741b7064c51a34cafd48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23058,
        "upload_time": "2022-03-21T18:13:16",
        "upload_time_iso_8601": "2022-03-21T18:13:16.585395Z",
        "url": "https://files.pythonhosted.org/packages/27/b9/e943cde80bd6a640e55b03784f8627038c2961e732e9ce7affe2833f8816/schematacode-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9dcfaac59593ffbb2c41a4af0ea45975094a4008aea84450ddf8c45544ab9f7",
          "md5": "1c8707f88f30fd6947174bbb67c416e8",
          "sha256": "2e7791ad908b422a1dff66cdb18c2563439ac2e126793e66a7d908dec94e06c8"
        },
        "downloads": -1,
        "filename": "schematacode-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c8707f88f30fd6947174bbb67c416e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24683,
        "upload_time": "2022-03-21T18:19:09",
        "upload_time_iso_8601": "2022-03-21T18:19:09.951309Z",
        "url": "https://files.pythonhosted.org/packages/b9/dc/faac59593ffbb2c41a4af0ea45975094a4008aea84450ddf8c45544ab9f7/schematacode-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff88c190ab5a4c716e17e4ecff440c2c171c288a4e3c0dbda3ada2239fd8c87b",
          "md5": "2178593a7e22e4d1b7f2ee630d131b72",
          "sha256": "2594051aa72dbb36a6e5fb467232e120da34b126efc3f630a3f587d9d55ed210"
        },
        "downloads": -1,
        "filename": "schematacode-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2178593a7e22e4d1b7f2ee630d131b72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26603,
        "upload_time": "2022-03-21T18:19:11",
        "upload_time_iso_8601": "2022-03-21T18:19:11.333365Z",
        "url": "https://files.pythonhosted.org/packages/ff/88/c190ab5a4c716e17e4ecff440c2c171c288a4e3c0dbda3ada2239fd8c87b/schematacode-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9dcfaac59593ffbb2c41a4af0ea45975094a4008aea84450ddf8c45544ab9f7",
        "md5": "1c8707f88f30fd6947174bbb67c416e8",
        "sha256": "2e7791ad908b422a1dff66cdb18c2563439ac2e126793e66a7d908dec94e06c8"
      },
      "downloads": -1,
      "filename": "schematacode-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c8707f88f30fd6947174bbb67c416e8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24683,
      "upload_time": "2022-03-21T18:19:09",
      "upload_time_iso_8601": "2022-03-21T18:19:09.951309Z",
      "url": "https://files.pythonhosted.org/packages/b9/dc/faac59593ffbb2c41a4af0ea45975094a4008aea84450ddf8c45544ab9f7/schematacode-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff88c190ab5a4c716e17e4ecff440c2c171c288a4e3c0dbda3ada2239fd8c87b",
        "md5": "2178593a7e22e4d1b7f2ee630d131b72",
        "sha256": "2594051aa72dbb36a6e5fb467232e120da34b126efc3f630a3f587d9d55ed210"
      },
      "downloads": -1,
      "filename": "schematacode-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2178593a7e22e4d1b7f2ee630d131b72",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26603,
      "upload_time": "2022-03-21T18:19:11",
      "upload_time_iso_8601": "2022-03-21T18:19:11.333365Z",
      "url": "https://files.pythonhosted.org/packages/ff/88/c190ab5a4c716e17e4ecff440c2c171c288a4e3c0dbda3ada2239fd8c87b/schematacode-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}