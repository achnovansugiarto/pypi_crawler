{
  "info": {
    "author": "peixiaodong",
    "author_email": "pxd7th@vip.qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# halring\n**pip源配置方法confluence页面**  \n*http://eqops.tc.com/confluence/pages/viewpage.action?pageId=29300773*  \n---\n**安装**:\n*pip install halring*   \n**升级(目前是2.0.x版本叠加)**:  \n*pip install --upgrade halring*    \n**查看虚拟环境包的可升级版本**:  \n*pip list --outdated --trusted-host artifactory.test.com*  \n**查看当前库版本**:  \n*pip freeze | grep halring*  \n---\n#### Jira 帮助库\n\n---\n\n```python\nfrom halring.jira_lib.halring_jira import JiraUtil\njira_client = JiraUtil(\"username\", \"password\", \"http://xx.xxx.xx.xx:xxxx\")\njira_client.login()  # 登陆成功返回True\n# 获取某个issue信息\njira_model = jira_client.issue(\"key or id\")\n# 获取所有project\njira_all_project = jira_client.getAllProjects()\n# 根据project_id获取某一个project\njira_project_1 = jira_client.getProjectById(\"project_id\")\n# 根据project_id获取某一个project\njira_project_2 = jira_client.getProjectByKey(\"project_key\")\n# 判断project是否存在\njira_project_3 = jira_client.projectIsExist(\"project_key\")\n# 获取指定版本项目的所有版本信息　\njira_project_4 = jira_client.getProjectVerById(\"project_id\")\n# 获取所有项目信息,仅仅打印在控制台,无返回值:\njira_client.getProjectsInfo()\n# 搜索问题\n#:param jql:  自定义jql语句\n#:param maxResults: maxResults为一次最大查询数量参数,整型数字\n# 1.maxResults可不传,不传此参数默认一次查询200,直到查询所有结束,返回结果;\n# 2.传此参数,则使用该值作为一次最大查询数量,直到查询所有结束,返回结果;\n# 3.注意 maxResults经本机测试最大不得超过 2147483647,否则直接报错\njira_list = jira_client.search_issues(\"jql语句\", maxResults=200)\n# 获取制定jql语句的第十个的前二十条\njira_list_2 = jira_client.search_issues_limit(\"jql语句\", 10, 20) \n# 创建issue\nnew_issue_model = jira_client.create_issue({\n        'project': {'id': '10585'},  # 项目: 门禁开发测试  10585 or 门禁系统 10604\n        'summary': f\"需求概要001\",  # 概要\n        'description': '需求描述信息001',\n        # 'issuetype': {'id': '10501'},  # issuetype 表 -> 10307 -> 准出问题单 10501-> 开发任务是10501\n        'issuetype': {\"name\": \"开发任务\"},  # 问题类型\n        'priority': {'id': '3'},  # 优先级: 中\n        'assignee': {'name': 'pei.xiaodong'},  # 经办人必须存在,一般跟域帐号\n        # 'reporter': {'name': 'admin'},\n        'duedate': '2023-02-03',   # 到期日 必填字段\n        'customfield_11002': [{\"name\": \"1.10.1\"}],  # 1.10.1 基线版本必须存在字段\n        'customfield_10857': [{\"name\": \"peihl\"}],  # 开发者\n        'fixVersions':  [{\"name\": \"1.1.1\"}]   # 1.1.1 修复版本必须存在字段\n})\n\n# 修改某个issue的字段信息\njira_client.update_issue('issue_id', {\"assignee\": {'name': 'pei.xiaodong'}})\n# 根据项目修改经办人\njira_client.updateAssignee(\"project_id\", \"value\")\n# 限定字段查询\njira_client.getIssues('jql', ['field'])\n# 查询某项目的所有的角色\njira_client.getProjectRoles('project_id')\n# 查询某项目的某角色的信息\njira_client.getProjectRoleByRoleid('projectKey', 'roleid')\n# 设置某个项目的角色为某个用户\njira_client.addProjectRoleActor('projectKey','roleid','username')\n# 设置某个项目的角色多个用户\njira_client.addProjectRoleActors('projectKey','roleid','username|name2')\n# 删除项目中的角色\njira_client.delProjectRoleActor('projectKey','roleid','username')\n# 删除指定项目中的组\njira_client.delProjectRoleGroup('projectKey','roleid','username')\n# 设置某个项目的角色为某个用户\njira_client.addProjectRoleGroup('projectKey','roleid','groupname')\n# 根据用户名获取用户是否存在\njira_client.get_user_is_exist('username')\n# 根据用户名获取用户\njira_client.get_group_is_exist('groupname')\n# 查找一个项目中的所有的角色的名字\njira_client.search_project_all_rolenames('projectKey')\n# 查找一个项目中的所有角色\njira_client.search_project_all_roles('projectKey')\n# 查找一个项目中是否包含某个角色\njira_client.search_project_role_by_rolename('username', 'rolename')\n# 查找一个项目中的角色是否包含某个用户\njira_client.search_project_role_group('projectKey','rolename','username')\n# 为项目角色添加用户\njira_client.add_project_role_actor('projectKey','rolename','actorname')\n# 为项目角色添加Group\njira_client.add_project_role_group('projectKey','rolename','groupname')\n# 为项目角色删除用户\njira_client.del_project_role_actor('projectKey','rolename','actorname')\n# 为项目角色删除组\njira_client.del_project_role_group('projectKey', 'rolename', 'groupname')\n# 清除项目中的某个角色的所有人\njira_client.clean_project_role('projectKey', 'rolename')\n\n```\n\n---\n#### confluence 帮助类\n```python\nfrom confluence.halring_confluence import ConfluenceUtil\n# 初始化\nconf = ConfluenceUtil('url', 'username', 'password')\n# 创建对应confluence页面\nconf.create_confluence_page('space_name', 'parent_title', 'title', 'body')\n# 清除对应confluence页面\nconf.clean_confluence_page('space_name', 'title')\n# 根据命名空间追加confluence数据列表\nconf.append_confluence_list('space_name', 'title', 'data')\n# 根据命名空间追加confluence数据字典\nconf.append_confluence_dict('space_name', 'title', 'data')\n# 根据命名空间追加confluence数据表格\nconf.append_confluence_table('space_name', 'title', 'ordering', 'data')\n# 根据命名空间追加confluence图片\nconf.append_confluence_image('space_name', 'title', 'image_file')\n# 根据JIRA筛选条件追加confluence\nconf.append_confluence_jira_filter('space_name', 'title', 'columns')\n# 根据命名空间和标题获取页面url地址\nconf.delete_confluence_page_by_title('space_name', 'title')\n# 根据命名空间和标题导出pdf\nconf.export_confluence_page_as_pdf('space_name', 'title', 'export_name')\n# 根据命名空间和标题导出word\nconf.export_confluence_page_as_word('space_name', 'title', 'export_name')\n# 根据url删除confluence\nconf.delete_confluence_page_by_url('url')\n# 根据url获取页面标题\nconf.get_confluence_page_title_by_url('url')\n# 获取confluence所有组\nconf.get_confluence_all_groups()\n# 根据组名获取所有组成员\nconf.get_confluence_group_members('group_name')\n# 获取所有组成员\nconf.get_confluence_all_members()\n# 获取某个成员详细信息\nconf.get_confluence_user_details_by_username('username')\n\n```\n\n---\n#### Jenkins\n```python\nfrom halring.jenkins_lib.halring_jenkins import JenkinsUtil\n# 初始化\njks = JenkinsUtil('server_ip', 'user', 'password')\n# 登陆, 验证帐号密码\njks.jenkins_login()\n# 验证job名字师傅存在 \nresult = jks.check_job_queue_exist('job_name')\n# 验证job是否在构建中\nbuild_flag = jks.check_job_in_building('job_name')\n# 参数化触发构建job\nbuild_number = jks.trigger_job_with_file_parameter('job_name', 'job_params_dict', 'file_params_dict')\n# 参数化触发构建job,简化参数版\nbuild_number_2 = jks.trigger_job('job_name', 'job_params_dict')\n# 参数化触发构建job,简化参数版\nbuild_number_3 = jks.build_job('job_name', {'job_params_dict': ''}, timeout=1800, interval=10, max_retry_times=3)\n# 参数化触发构建job同名函数\nbuild_number_4 = jks.build_job_with_file_parameter('job_name', 'job_params_dict', 'file_params_dict', timeout=1800, interval=10, max_retry_times=3)\n# 当前任务正在编译返回True,否则返回False\nbuild_result = jks.check_job_in_building_with_retry('job_name', retry_times=3)\n# 当前任务有队列返回True,否则返回False\nbuild_result_2 = jks.check_job_queue_exist_with_retry('job_name', retry_times=3)\n# 获取job构建信息\nbuild_info = jks.jenkins_get_build_info_with_retry('job_name', 'job_build', retry_times=3)\n# 获取job自身信息\nbuild_info_2 = jks.jenkins_get_job_info_with_retry('job_name', retry_times=3)\n# 获取job自身信息同名方法\nbuild_info_3 = jks.jenkins_get_job_info('job_name')\n# 获取job构建信息同名方法\nbuild_info_4 = jks.jenkins_get_build_info('job_name', 'job_build')\n# 获取jenkins server所有在队列中等待的任务信息\nbuild_info_5 = jks.jenkins_get_queue_info()\n# 获取job构建输出\nbuild_info_6 = jks.jenkins_get_build_console_output('job_name', 'job_build')\n# 获取job构建请求URL接口\nbuild_info_7 = jks.jenkins_get_build_console_output_url('job_url')\n# 获取jenkins信息\nbuild_info_8 = jks.jenkins_get_build_info_with_waiting('job_name', 'build_number', interval=3, timeout=180)\n# 获取不同格式的所有job 1: 返回{\"view_name\": [job1, job2,...]} 2: 返回[job1, job2,...]\nbuild_info_9 = jks.get_all_jobs_by_views(return_type=\"1\")\n# 获取不在view视图里的job\nbuild_info_10 = jks.get_jobs_not_in_views()\n# 获取所有视图信息\nbuild_info_11 = jks.get_all_views()\n\n```\n---\n#### linux 帮助库\n```python\nfrom halring.linux.halring_linux import LinuxUtil\nlinux_auth = (\"jenkins-server-1\", \"xx.xxx.xx.xx\", \"root\", \"password\")\nlinux_cli = LinuxUtil(*linux_auth)\n# 连接linux服务器\nlinux_cli.connect_to_host()\n# 获取主机空闲的cpu\nresult = linux_cli.get_linux_cpu_free()\n# 检查主机的可联通， cpu、 内存、磁盘空间可用性\nresult_2 = linux_cli.check_host_cpu_mem_disk_useable()\n# 检查linux主机java版本\nresult_3 = linux_cli.check_host_java_vesion()\n# 检查linux类主机python版本\nresult_4 = linux_cli.check_host_python_version()\n# 检查linux主机sftp可联通\nresult_5 = linux_cli.check_host_sftp_connect()\n```\n---\n#### artifactory\n```python\nfrom halring.artifactory_lib.halring_artifactory_lib import ArtifactoryLibUtil\nartifactory_auth = (\"username\", \"password\")\nart = ArtifactoryLibUtil(*artifactory_auth)\n# 上传本地文件到制品库\nart.artifactory_upload_file(\"local_path\", \"artifactory_puth\")\n# 下载远端文件到本地\nart.artifactory_download_file('local_path', 'artifactory_path')\n# 下载远端文件到本地同名方法\nart.artifactory_download('local_path', 'artifactory_path')\n# 上传本地文件夹到远程文件夹\nart.artifactory_upload_tree('local_dir', 'artifactory_dir')\n# 上传文件到远端文件夹\nart.artifactory_upload('local_path', 'artifactory_path')\n# 列出artifactory文件路径\nart.list_artifactory_path('artifactory_path')\n# 判断给出的路径是否目录(未转码)\nart.artifactory_path_isdir_unquoted('unquoted_artifactory_path')\n# 判断给出的路径是否目录\nart.artifactory_path_isdir('artifactory_path')\n# 创建制品库路径\nart.create_artifactory_dir('artifactory_path')\n# 创建本地文件夹\nart.create_local_dir(\"local_path\")\n# 搜索远端文件夹 \nart.artifactory_search_dir('artifactory_path','nr')\n# 判断给出的路径是否目录(未转码)\nart.artifactory_path_exist_unquoted('unquoted_artifactory_path')\n# 判断路径是否存在\nart.artifactory_path_exist('artifactory_path')\n# 设置artifactory属性\nart.artifactory_set_property('artifactory_path', 'key', 'value')\n# 移除artifactory属性\nart.artifactory_remove_property('artifactory_path', 'key')\n# 展示路径上所有属性\nart.artifactory_list_properties('artifactory_path')\n# 文件剪切\nart.artifactory_move('src_path', 'dst_path')\n# 文件粘贴\nart.artifactory_copy('src_path', 'dst_path')\n# 搜索远端文件同名方法\nart.artifactory_search_dir('artifactory_path','nr')\n# 删除制品\nart.artifactory_remove('artifactory_path')\n# 使用aql查询指定目录\nart.artifactory_query('artifactory_path', {})\n# 未转码前制品库路径\nart.artifactory_filepath_md5('artifactory_path')\n# md5值\nart.artifactory_path_md5('artifactory_path')\n# 制品信息统计 \nart.artifactory_path_stat('artifactory_path')\n# 拷贝docker\nart.artifactory_promote_docker('src_path', 'dst_path', copy_flag=True)\n# docker路径sha256\nart.artifactory_promote_docker('src_path', 'dst_path', copy_flag=True)\n# docker，json路径的sha256\nart.sub_get_file_json_sha256('artifactory_path')\n# 修改时间最晚的子路径\nart.artifactory_latest_child_path('artifactory_path')\n```\n\n---\n#### Apollo\n```python\nfrom apollo.halring_apollo_opr import ApolloOpr\napollo_model = ApolloOpr(\"http://xx.xx.xx.xx:xxxx\", \"username\", \"password\")\n# 获取app消息\nresult = apollo_model.get_apps('appid')\n# 获取App的环境，集群信息\nresponse = apollo_model.get_appid_env_clusters('appid')\n# 判断应用(appid)的环境(env)是否存在\nresult_2 = apollo_model.check_appid_env_exist('appid', 'env')\n# 判断应用(appid)的环境(env)中的 集群 (cluster)是否存在\nresult_3 = apollo_model.check_appid_env_cluster_exist('appid', 'env', 'cluster')\n# 获取项目下的指定环境集群的Namespace\nresult_4 = apollo_model.get_appid_env_cluster_namespace('appid', 'env', 'cluster', namespace=None)\n# 检查项目下指定环境的存在性\nresult_5 = apollo_model.check_appid_env_cluster_namespace_exist('appid', 'env', 'cluster', namespace=None)\n# 检查appid 命名空间是否存在\nresult_6 = apollo_model.check_appid_namespace_item_exist('appid', 'env', 'cluster', 'namespace', 'itemkey')\n# 获取item信息\nresult_7 = apollo_model.get_appid_namespace_item('appid', 'env', 'cluster', 'namespace', 'itemkey')\n# 添加appid, env, cluster, namespace, itemkey, itemvalue, comment=None\nresult_8 = apollo_model.add_appid_namespace_item('appid', 'env', 'cluster', 'namespace', 'itemkey', 'itemvalue', comment=None)\n# 修改appid, env, cluster, namespace, itemkey, itemvalue, comment=None\nresult_9 = apollo_model.modify_appid_namespace_item('appid', 'env', 'cluster', 'namespace', 'itemkey', 'itemvalue', comment=None)\n# 删除配置集中的配置项\nresult_10 = apollo_model.delete_appid_namespace_item('appid', 'env', 'cluster', 'namespace', 'itemkey')\n# 发布指定项目的配置\nresult_11 = apollo_model.release_apppid_namespace('appid', 'env', 'cluster', 'namespace', 'release_title', release_comment=None)\n# 获取某个已发布的配置集的口\nresult_12 = apollo_model.get_latest_released_namespace('appid', 'env', 'cluster', 'namepsacename')\n# 导入一个字典的内容作为配置集\nresult_13 = apollo_model.import_appid_namespace('appid', 'env', 'cluster', 'namespacename', 'inputdict', reset=False)\n# 导出目标配置集的内容到dict中返回\nresult_14 = apollo_model.export_appid_namespace('appid', 'env', 'cluster', 'namespacename')\n# 导出已发布的目标配置集的内容到dict中返回\nresult_15 = apollo_model.export_latest_released_appid_namespace('appid', 'env', 'cluster', 'namespacename')\n\n```\n---\n#### date_time\n```python\nfrom date_time.halring_datetime import DatetimeUtil\ndt = DatetimeUtil()\n# 根据指定datetime格式返回当前日期时间\ndt.get_format_curr_datetime('format_string')\n# 返回计算指定日期+当前时间，格式为20070312-08:50:04.000\ndt.calc_datetime('select_date')\n# 功能：格式转换根据时间格式转换指定格式时间字符串为时间戳（1970年开始的秒数）\ndt.conv_datetime_to_timestamp('orgi_datetime', orgi_format_string='FORMAT_DATETIME_MYSQL')\n# 功能：格式转换根据时间格式转换指定格式时间字符串为时间戳（1970年开始的秒数）\ndt.conv_timestamp_to_datetime('orgi_timestamp', new_format_string='FORMAT_DATETIME_MYSQL')\n# 功能：指定时间向前或向后方面进行漂移\ndt.drift_datetime_mysql('format_string', 'datetime', 'drift_direction', 'drift_second')\n```\n---\n#### excel帮助类\n\n```python\nfrom excel.halring_excel import ExcelUtil\n\n# 初始化传入xlsx路径和sheet的名词\nexcel_help = ExcelUtil('xlsxPath', sheetname=None)\n# 读取excel转换为 [{'列名1': 'value'},{'列名2': 'value2'}] 格式表格 \nexc_result = excel_help.read_excel_to_dict()\n# 写入excel某一行某一列\nexcel_help.write_cell('row', 'col', 'value')\n# 读取标题行\ndata_1 = excel_help.readHead()\n# 读取某一行\ndata_2 = excel_help.readRow(10)\n# 读取dict字典转换存为excel表格, 格式  {\"ID\":[1,2,3], \"Name\":[\"Tim\", \"ZhangSan\", \"LiSi\"]}\nexcel_help.dict_to_excel('data', 'excel_path')\n```\n\n---\n#### caseconfig帮助类\n\n```python\nfrom halring.caseconfig.halring_parser import CaseConfigParser\n\n# 初始化\nconfig = CaseConfigParser()\n# 读取ini文件\nconfig.read(\"a.ini\")\n# 获取所有sections\nsections = config.sections()\n# 获取其中某一个section\noptions = config.options('section_name')\n# 获取某一个section某一个选项的值\nvalue = config.get('section_name', 'option_name')\n\n```\n\n#### docx帮助类\n```python\nfrom docx_lib.halring_docx import DocxUtil\nbool_result = DocxUtil(\"xxxxx.docx\").creatDocx(jsonStr={}, link_dicts={})\n```\n\n---\n#### Json帮助库\n```python\nfrom json_lib.halring_json import JsonUtil\n# Json帮助类初始化\njson_util = JsonUtil()\n# json字符串转为python字典dict\nresult = json_util.jsonStrToDict('jsonStr')\n# python字典dict转为json对象\nresult_2 = json_util.dictToJsonObject({})\n# python字典dict转为文件存储\nresult_3 = json_util.dictToFile({}, 'filePath')\n# json字符串转文件\nresult_4 = json_util.jsonStrToFile('jsonStr', 'filePath')\n# json文件转为json对象\nresult_5 = json_util.fileToJson('filePath')\n# 从json对象或者json字符串中按字段提取值\nresukt_6 = json_util.loadJsonField('jsons', 'field')\n\n```\n\n---\n#### redis\n```python\nfrom  redis_lib.halring_redis  import RedisUtil\n# redis客户端初始化\nrds_cli = RedisUtil()\n# redis连接\nrds_cli.redis_connect('host', 'port', 'pwd', 'db')\n# 选择频道推送消息\nrds_cli.redis_publish('channel', 'msg')\n# 选择频道订阅\nrds_cli.redis_subscribe('channel')\n# 消息队列 订阅\nrds_cli.redis_sub_scribe('key')\n# 消息队列 发布\nrds_cli.redis_send_list_msg('key', 'msg')\n# lpush json 数据\nrds_cli.redis_send_json_msg('key', 'msg')\n# SET \nrds_cli.redis_send_msg('key', 'msg')\n# ltrim key\nrds_cli.redis_remove_list('key')\n# zset pub json\nrds_cli.redis_zset_pub('key', 'msg')\n# zset json\nrds_cli.redis_zset_sub('key')\n# zset\nrds_cli.redis_zset_commit('key')\n# redis_poll key\nrds_cli.redis_poll('timeout', 'key')\n```\n---\n#### ftp\n```python\nfrom ftp.halring_ftp import FtpUtil\n# ftp客户端\nftp_cli = FtpUtil('hostIp', 'userName', 'userPwd')\n# ftp连接\nftp_cli.ftputil_connect()\n# 判断文件是否存在，不存在或是文件夹返回错误，文件存在返回正确\nftp_cli.ftputil_file_exist('文件的绝对路径', locality='FTPUTIL_LOCALITY')\n# 判断文件夹是否存在\nftp_cli.ftputil_direct_exist('path', locality='FTPUTIL_LOCALITY')\n# 从本地上传文件到远程服务器\nftp_cli.ftputil_upload('source', 'destination', transway='FTPUTIL_WAY')\n# 从远程服务器下载文件值本地\nftp_cli.ftputil_download('source', 'destination', transway='FTPUTIL_WAY')\n# 显示路径下文件、子目录以及子目录下的所有文件\nftp_cli.ftputil_list_loop('path', 'files', locality='FTPUTIL_LOCALITY')\n# 显示路径下的所有文件，子目录，以及所有子目录下的文件,不包含本身路径\nftp_cli.ftputil_list('path', locality='FTPUTIL_LOCALITY')\n# 检查远程服务器的文件是否存在或文件夹下的所有文件\nftp_cli.ftputil_check('path')\n# 删除远程服务器路径下的文件或文件夹下的所有文件、子目录及以下文件\nftp_cli.ftputil_delete('path')\n# 创建目录\nftp_cli.ftputil_create_dir('path', locality='FTPUTIL_LOCALITY')\n# ftp退出\nftp_cli.ftputil_close()\n```\n---\n#### Git\n```python\nfrom git.halring_git import GitUtil\n# git 客户端\ngit_cli = GitUtil('token')\n# git 克隆远程仓库到本地指定目录\ngit_cli.git_clone_branch('repository_url', 'local_repository_path', 'branch')\n# git 切换分支\ngit_cli.git_change_branch('repository_url', 'local_repository_path')\n# git diff 比较\ngit_cli.git_diff('local_repository_path', 'COMMIT_ID_1', 'COMMIT_ID_2')\n# 本地获取commit id\ngit_cli.git_get_commit_id('local_repository_path')\n# 使用api获取commit id\ngit_cli.git_get_commit_id_byapi('source', 'destination', port=\"8001\")\n# 转换ssh到http\ngit_cli.convert_ssh2http('repository_url', port=8081)\n# 转化http到ssh\ngit_cli.convert_http2ssh('repository_url', port=8081)\n```\n---\n#### Mysql\n```python\nfrom mysql_lib.halring_mysql import MySqlUtil\n# Mysql 客户端\nmysql_cli = MySqlUtil('host','user','pwd', db='', port=3306)\n# Mysql 客户端连接\nmysql_cli.db_connect()\n# Mysql 执行查询sql语句\nmysql_cli.execute_query('query_sql')\n# Mysql 执行增删改sql语句\nmysql_cli.execute_sql('sql_statement')\n# 导出指定数据库的结构及数据\nmysql_cli.db_dump_all('db_name', 'outfile')\n# 导出指定数据库的结构\nmysql_cli.db_dump_struct('db_name', 'outfile')\n# 导入指定数据库\nmysql_cli.db_import('db_name', 'input_file')\n# Mysql 断开连接 \nmysql_cli.db_disconnect()\n```\n---\n#### SqlServer\n```python\nfrom sqlserver_lib.halring_sqlserver import SqlServerUtil\n# SqlServer 客户端\nsqlserver_cli = SqlServerUtil('host','port','user', 'password', 'db')\n# SqlServer 客户端连接\nsqlserver_cli.db_connect()\n# SqlServer 执行查询sql语句\nsqlserver_cli.query_sql('query_sql')\n# SqlServer 执行增删改sql语句\nsqlserver_cli.execute_sql('sql_statement')\n# SqlServer 断开连接 \nsqlserver_cli.db_disconnect()\n```\n---\n#### Regex 正则\n```python\nfrom reg.halring_reg import RegUtil\n# reg 正则初始化\nreg = RegUtil()\n# reg　匹配版本号\nreg.reg_image_version('version')\n```\n---\n#### Ssh2帮助类\n```python\nfrom ssh2_con.halring_ssh2 import Ssh2Util\n# ssh2 初始化\nssh2 = Ssh2Util('host', 'username', 'password', port=22)\n# ssh2 连接\nssh2.connect()\n# 交互式shell的读方法，可维持会话状态，读取管道中的响应数据，直到超时时间内没有收到任何数据，则将之前读到的数据返回\nssh2.read()\n# 交互式shell的写方法，可维持会话状态，将执行指令写入管道，发送给远程主机\nssh2.send('cmd', timeout=10)\n# 远程执行指令，非交互式，不维持会话状态\nssh2.exec_command('cmd', timeout=5)\n# 根据返回的结果，查找期望包含的数据\nssh2.find_expect('cmd')\n# 交互式shell的读方法，可维持会话状态，读取管道中的响应数据，\n# 按自定义buffersize读取数据并回显，可设置判断指令执行完毕的条件, 是否找到制定关键字\n# 直到超时时间内没有收到任何数据且未找到指令执行完毕的条件，则超时并退出\nssh2.read_line(cmd_complete='', timeout=5)\n# 判断远端连接是否成功\nssh2.connect_judge()\n# ssh2 断开连接\nssh2.disconnect()\n```\n---\n#### String帮助类\n```python\nfrom common.halring_string import StringUtil\n# StringUtil 帮助类初始化\nstring_lib = StringUtil()\n# string 字符串替换\nres = string_lib.string_replace('orig_string', 'selected_string', 'replace_string')\n# string 比较\nres_1 = string_lib.string_diff('left_string', 'right_string')\n# step string content diff , ignore something\nres_2 = string_lib.string_diff_step('left_string', 'right_string')\n# 计算字符串中中文字符的长度\nres_3 = string_lib.step_autolen('insert_step')\n# step_null　替换null\nres_4 = string_lib.step_null('insert_step')\n# string_replace_space 替换[SPACE]\nres_5 = string_lib.string_replace_space(\"insert_string\")\n# 替换空字符串[EMPTY]\nres_6 = string_lib.string_replace_empty('insert_string')\n# 替换 b'\\x00'.decode()\nres_7 = string_lib.string_ignore_hex_zero('insert_string')\n# 生成字符串 新字符串 content X content_cnt\nres_8 = string_lib.string_generate('content', 'content_cnt')\n# 从列表生成字符串\nres_9 = string_lib.string_from_list_with_delimiter([], delimiter=\"|\")\n# 转换列表为字符串\nres_10 = string_lib.string_conv_list_to_str([], 'orgi_list', 'item_prefix', 'item_postfix')\n# 替换单引号\nres_11 = string_lib.string_ignore_single_quota('input_string')\n\n```\n---\n#### svn帮助类\n```python\nfrom svn.halring_svn import SvnUtil\n# svn \nsvn = SvnUtil('username', 'password')\n# svn获得详细信息\ninfo = svn.svn_info('remote_path')\n# svn获取REVISION\nres_1 = svn.svn_info_get_revision('remote_path')\n# svn获取COMMIT_ID\nres_2 = svn.svn_info_get_commit_id('remote_path')\n# svn路径判断文件or文件夹\nres_3 = svn.svn_info_is_file_or_directory('remote_path')\n# svn获取制定文件夹下的所有文件\nres_4 = svn.svn_get_filelist_under_directory('remote_path')\n# svn导出到本地路径\nres_5 = svn.svn_export(\"remote_path\", \"local_path\")\n# svn创建文件夹\nres_6 = svn.svn_mkdir('remote_path')\n# svn删除\nres_7 = svn.svn_delete('remote_path')\n# svn＿add 上传文件\nres_8 = svn.svn_add('remote_path', 'source_path')\n# svn_cp 拷贝文件\nres_9 = svn.svn_cp('remote_path', 'source_path')\n# svn_diff 比较文本\nres_10 = svn.svn_diff_text('remote_path', 'source_path')\n# 获取路径下的文件总数\nres_11 = svn.svn_get_filenums_under_directory('remote_path')\n```\n---\n#### Xml 帮助类\n```python\nfrom xml_lib.halring_xml import XmlUtil\n# svn \nxml_model = XmlUtil('xml_file_path')\n# 返回目标key下的value\nxml_model.analysis_key_get_value('root_tag', 'tag_key')\n# 输入单层的key ，返回一个字典\nxml_model.analysis_key_get_dict('root_tag')\n\n\n```\n\n\n---\n#### windows os 执行程序 帮助类\n```python\nfrom windows_exec.halring_exec import ExecUtil\n# 初始化\nwindows_os_exec = ExecUtil('cmd')\n# 阻塞执行windows命令\nwindows_os_exec.block_execute()\n# 非阻塞执行windows命令\nwindows_os_exec.non_block_execute()\n```\n---\n#### windows or linux 系统操作相关封装 \n```python\nfrom windows.halring_os import OsUtil\n# 初始化\nsys_os = OsUtil()\n# 判断是否是文件\nsys_os.isfile('path')\n# 判断是否是路径\nsys_os.isdir('path')\n# 拷贝文件\nsys_os.copyFile('fromPath', 'toPath')\n# 全量拷贝文件夹\nsys_os.copyDir('srcDir', 'dstDir')\n# 默认不拷贝隐藏的文件,此方法和copyDir可以合并,为方便调用单独列出\nsys_os.copyDir_ignore_hidden('srcDir', 'dstDir')\n# 自定义过滤不需要拷贝的文件夹或文件\nsys_os.copyDir_ignore_custom('srcDir', 'dstDir', 'ignore_pattern')\n# shutil自带的copytree不是很好用,在已有目标文件夹的时候会报错,建议使用copyDir 系列方法\n# 此处 ingore_pattern  暂只支持一个字符窜,如需多个,可直接使用\nsys_os.copytree('src', 'tar', 'ingore_pattern')\n# 获得文件的md5\nsys_os.get_file_md5('file_path')\n# 要创建的路径,创建单个目录\nsys_os.mkdir('dirName')\n# 要创建的路径,创建多级目录\nsys_os.mkdirs('dirName')\n# 递归删除目录下所有内容,默认不删除最外层目录,靠 isDeleteOuterMostDir判断是否删除最外层文件夹, 不传或False不删除最外层\nsys_os.removeDirs('dirName', isDeleteOuterMostDir=None)\n# 拼接多个路径\npath = ('path', 'path2', 'path3') # 多个路径列表or元组\nsys_os.unionPath(*path)\n\n```\n\n---\n#### Plink with Putty\n```python\nfrom plink.halring_plink import PlinkUtil\n# plink 初始化\nplink = PlinkUtil('ip', 'user', 'pwd', 'cmd')\n# plink_mass_execute\nplink.plink_mass_execute('tool_mode')\n# plink_execute\nplink.plink_execute(input_ip='', input_user='', input_pwd='')\n# plink_execute_vms\nplink.plink_execute_vms(input_ip='', input_user='', input_pwd='')\n\n\n```\n\n---\n#### RabbitMQ\n```python\nfrom halring.rabbitmq_lib.halring_rabbitmq import MQClient, Consumer, Publisher\n# rbmq 初始化连接\nrbmq = MQClient('host', 'user', 'password', 'virtual_host', port=5672)\n# rbmq 连接服务端\nconn = rbmq.connect()\n# rbmq 连接服务端, 如果connection存在则True反之False\nrbmq.is_connect()\n# rbmq关闭连接\nrbmq.close_connection()\n# rbmq初始化消费者 \nconsumer = Consumer(conn)\n# 开始消费队列\nconsumer.start_consuming('queue')\n# 关闭频道\nconsumer.close_channel()\n# rbmq初始化生产者 \npublisher = Publisher(conn)\n# rbmq发送消息到队列\nbool_result = publisher.send_message('message', 'queue', exchange=\"\", durable=True, routing_key=\"\")\n# 返回信道channel\npublisher.get_channel()\n# 关闭channel\npublisher.close_channel()\n```\n\n---\n#### RdsApi 帮助类\n\n```python\nfrom halring.rds_lib.halring_rds_api import RdsApiUtil\n\n# RdsApi 初始化连接\nrds_cli = RdsApiUtil('api_url', 'user', 'api_secret', 'rds_id')\n# RdsApi 获取PreToken\ntoken = rds_cli.getPreToken('user', 'secretKey')\n# RdsApi rsaEncrypt\nb64str = rds_cli.rsaEncrypt('message', 'key')\n# RdsApi str2key\nstr_key = rds_cli.str2key\n# RdsApi 创建备份 \nresponse = rds_cli.sub_create_backup('db_name', 'backup_type', 'retention_days', 'is_alldbs')\n# RdsApi 根据recoverid恢复\nresponse_2 = rds_cli.sub_list_db_all_backup('db_name', 'is_alldbs')\n# RdsApi 处理response字典\nresponse_３ = rds_cli.sub_handle_rds_response('request_response')\n# RdsApi 创建备份并处理response方法, 对外（公开）\nresult = rds_cli.create_backup('db_name', backup_type=\"0\", retention_days=\"7\", is_alldbs=\"0\")\n# RdsApi 列出所有备份方法, 对外（公开）\nresult_1 = rds_cli.list_db_all_backup('db_name', is_alldbs=\"0\")\n# RdsApi 根据recoverid恢复, 对外（公开）\nresult_2 = rds_cli.create_recovery('db_name', 'recovery_id', isalldbs=\"0\")\n\n\n```\n---\n### 常见错误\n```python\n# # 常见错误\n# key or id 错误：\n# jira.exceptions.JIRAError: JiraError HTTP 404\n# 字段名错误：\n# Error JiraError HTTP 400 url: http://xx.xx.xx.xx:8080/jira/rest/api/2/issue/xxxx text: Field 'customfield_xxxxx' cannot be set. It is not on the appropriate screen, or unknown\n# 少传参数\n# TypeError: xxxx() missing 1 required positional argument: 'param'\n# 函数名或属性错误\n# AttributeError: 'xxxxx' object has no attribute 'xxxxx'\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "halrings",
    "package_url": "https://pypi.org/project/halrings/",
    "platform": null,
    "project_url": "https://pypi.org/project/halrings/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/halrings/2.0.7/",
    "requires_dist": [
      "twine (==3.8.0)",
      "loguru (==0.6.0)",
      "rsa (==4.9)",
      "artifactory (==0.1.17)",
      "jira (==3.2.0)",
      "requests",
      "atlassian-python-api (==3.32.2)",
      "jieba (==0.42.1)",
      "xlrd (==2.0.1)",
      "openpyxl (==2.5.6)",
      "python-jenkins (==1.7.0)",
      "paramiko (==3.0.0)",
      "PyMySQL (==1.0.2)",
      "chardet (==5.0.0)",
      "pymssql",
      "pika (==1.3.1)",
      "pandas (==1.1.5)",
      "urllib3 (==1.26.0)",
      "redis (==4.3.5)",
      "python-docx (==0.8.10)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "python常用底层库封装",
    "version": "2.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16990215,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00511935e97a2014d05149f8d505f86efb969810ef6b3984096fb822b9d662da",
          "md5": "795253b0759f89d2161a02c8ada02bd3",
          "sha256": "13ed916e17caf0ae900b8af548b1cda7874c1f6af305bca7c6231bef1dd68383"
        },
        "downloads": -1,
        "filename": "HalRings-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "795253b0759f89d2161a02c8ada02bd3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 129554,
        "upload_time": "2023-02-21T06:16:06",
        "upload_time_iso_8601": "2023-02-21T06:16:06.461755Z",
        "url": "https://files.pythonhosted.org/packages/00/51/1935e97a2014d05149f8d505f86efb969810ef6b3984096fb822b9d662da/HalRings-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f45c9d46a447a24056f210a45e7f7e2f9baedeaecc09a618a65de5deec3310d6",
          "md5": "ff3e998e9993b0a89e39830d23233246",
          "sha256": "e0c54efda5b6cf595c16d657adea4e4ba2654ee48105de63c2b7a3ad03f18022"
        },
        "downloads": -1,
        "filename": "halrings-2.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff3e998e9993b0a89e39830d23233246",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 139188,
        "upload_time": "2023-02-23T08:20:07",
        "upload_time_iso_8601": "2023-02-23T08:20:07.295150Z",
        "url": "https://files.pythonhosted.org/packages/f4/5c/9d46a447a24056f210a45e7f7e2f9baedeaecc09a618a65de5deec3310d6/halrings-2.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f45c9d46a447a24056f210a45e7f7e2f9baedeaecc09a618a65de5deec3310d6",
        "md5": "ff3e998e9993b0a89e39830d23233246",
        "sha256": "e0c54efda5b6cf595c16d657adea4e4ba2654ee48105de63c2b7a3ad03f18022"
      },
      "downloads": -1,
      "filename": "halrings-2.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff3e998e9993b0a89e39830d23233246",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 139188,
      "upload_time": "2023-02-23T08:20:07",
      "upload_time_iso_8601": "2023-02-23T08:20:07.295150Z",
      "url": "https://files.pythonhosted.org/packages/f4/5c/9d46a447a24056f210a45e7f7e2f9baedeaecc09a618a65de5deec3310d6/halrings-2.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}