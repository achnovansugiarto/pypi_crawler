{
  "info": {
    "author": "",
    "author_email": "Muli Silman <mulisilman@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# S Compiler & Interpreter\n## Table of Contents\n- [Installation](#Installation)\n- [A Simple Example](#A-Simple-Example)\n- [The S Compiler](#The-S-Compiler)\n  - [Compiler Usage](#Compiler-Usage)\n  - [Slang Files](#Slang-Files)\n    - [MAIN](#MAIN)\n    - [Sugar Sections](#Sugar-Sections)\n      - [Sugar Types](#Sugar-Types)\n      - [REPEAT Statement](#REPEAT-Statement)\n      - [The REPEAT Tradeoff](#The-REPEAT-Tradeoff)\n      - [The Numeric Type](#The-Numeric-Type)\n      - [The Pitfalls of Sugars](#The-Pitfalls-of-Sugars)\n        - [Sugar Argument Edge Cases](#Sugar-Argument-Edge-Cases)\n        - [Sugar Internal Variables](#Sugar-Internal-Variables)\n  - [The Algorithm](#The-Algorithm)\n      - [Sugar Parsing](#Sugar-Parsing)\n      - [Compiling the Code](#Compiling-the-Code)\n      - [Sugar Expansion](#Sugar-Expansion)\n- [The S Interpreter](#The-S-Interpreter)\n  - [Interpreter Usage](#Interpreter-Usage)\n- [The S Language](#The-S-Language)\n  - [The Model](#The-Model)\n    - [Variables](#Variables)\n    - [Labels](#Labels)\n    - [Instructions](#Instructions)\n    - [The Program](#The-Program)\n    - [Example](#Example)\n    - [Syntactic Sugars](#Syntactic-Sugars)\n  - [Encoding](#Encoding)\n    - [PairWise](#PairWise)\n    - [ListWise](#ListWise)\n    - [Instruction Encoding](#Instruction-Encoding)\n    - [Program Encoding](#Program-Encoding)\n  - [Conventions](#Conventions)\n## Installation\nInstall (and update) using `pip`:\n```shell\npip install -U s_interpreter\n```\nor you can clone the repository using `git`:\n```shell\ngit clone https://github.com/SamuelSill/s_interpreter.git\n```\n## A Simple Example\nThe following is a program in `S` that always returns the value of `X1`:\n```\n# Sugar for performing a non-conditional jump\n> GOTO {Label L}\n        Z <- Z + 1\n        IF Z != 0 GOTO {L}\n\n# Sugar for incrementing variable V1 by the value of V2\n> {Variable V1} += {Variable V2}\n        IF {V2} != 0 GOTO A\n        GOTO E\n    [A] {V2} <- {V2} - 1\n        Z <- Z + 1\n        IF {V2} != 0 GOTO A\n    [B] Z <- Z - 1\n        {V2} <- {V2} + 1\n        {V1} <- {V1} + 1\n        IF Z != 0 GOTO B\n    [E] Y <- Y\n\n# The program starts here\n> MAIN\n        Y += X1\n```\nCompiling/Running the program:\n```shell\n# Compile the program (in file main.slang) to binary file 'output.txt':\ns_compiler -f main.slang -b output.txt\n\n# Now 'output.txt' contains *pure* S language code, no sugars.\n# Run the interpreter on the binary file on input '42'\ns_interpreter -b output.txt 42\n```\nThe console output:\n```\nOutput: 42\n```\n*You can learn more about the `slang` syntax [here](#Slang-Files).*\n\n*You can learn more about the basic syntax of the `S Language` [here](#The-S-Language).*\n## The S Compiler\n\n--- \n`The S Compiler` is the central module of this repository.\n\nIn short, it allows us to easily compile `slang` files to binaries that the `S Interpreter` can run.\n\n### Compiler Usage\nTo compile a given `slang` file to a binary file, run the following command:\n```shell\ns_compiler -f /slang/file/path -o /binary/file/path\n```\nYou could also pass a flag to print the encoding of the program instead, like so:\n```shell\ns_compiler -f /slang/file/path --encode\n```\nBut be careful, as program encodings can grow incredibly large even with very few instructions, \nso the compiler could throw an error instead.\n\nYou could pass the flag `print` to print the program to stdout like so:\n```shell\ns_compiler -f /slang/file/path --print\n```\nYou can also pass the `verbose` flag for additional prints regarding the compilation process like so:\n```shell\ns_compiler -f /slang/file/path -o /binary/file/path --verbose\n```\nYou can also provide the input program by passing its encoding (a number) instead of a `slang` file like so:\n```shell\ns_compiler -d {program-encoding} -o /binary/file/path\n```\n### Slang Files\nIn order to compile `S Language` code, \nwe write it in `.slang` files as a convention.\n\nNotice that the compiler is inherently case and whitespace insensitive.\nThe compiler only considers the line continuations between instructions,\nand between separate words/variables in the same instruction.\n\n`.slang` files are structured into sections, as follows:\n#### MAIN\nThe `MAIN` section will contain the actual program you wish to compile.\nPlease note that it must appear at the end of the file.\n\nTake the following example:\n\n```\n# This program always returns 'Y = X1' \n> MAIN\n        IF X != 0 GOTO A\n        Z <- Z + 1\n        IF Z != 0 GOTO E\n    [A] X <- X - 1\n        Y <- Y + 1\n        IF X != 0 GOTO A\n```\n* Again, note that the indentation is only for ease of reading, and the compiler completely ignores it.\n#### Sugar Sections\nThe previous example uses the pattern of the `GOTO L` syntactic sugar.\n\nWhat if we wanted to use this pattern multiple times?\nWe can define and use a syntactic sugar like so:\n```\n> GOTO {Label L}\n        Z <- Z + 1\n        IF Z != 0 GOTO {L}\n\n> MAIN\n        IF X != 0 GOTO A\n        GOTO E\n    [A] X <- X - 1\n        Y <- Y + 1\n        IF X != 0 GOTO A\n```\nA few details to notice:\n* Notice that in the definition of the sugar, we specified the type of `L`.\nThis sugar will only be used if we pass it with a valid label.\n* Notice the usage of variable `Z` inside the `GOTO L` sugar.\nWhen the compiler expands the usage of the sugar, \nit replaces all internal variables used in the sugar to variables guaranteed to be unused anywhere else in the program.\nThe only exception to this rule is with I/O variables (`Y`/`X1`, `X2`, ...). \nThey can be manipulated internally from sugar code.\n* A given sugar may only use other sugars that are defined before it in the file.\n* Sugar definitions are allowed to overlap in terms of their usage patterns. \n  The sugar that will eventually be used in the compiled output is the first in the file that matches the string.\n\n##### Sugar Types\nWhen defining sugars, we need to specify the type of their arguments.\n\nThe supported sugar argument types are:\n* `Label` - To only match labels\n* `Variable` - To only match variables\n* `Const` - To only match const numbers (e.g _0, 1, 2, 3,_ ...)\n* `Numeric` - To match both variables and consts\n\n\n_Note that you can overload sugar definitions only differing by the sugar arguments' types!_\n\nWhile it seems pretty clear as to how `Label`/`Variable` are used, how would one use `Const` in valid S Language?\n\nWell, there is only one way to use a `Const`, and that is with the `REPEAT` statement.\n##### REPEAT Statement\nSay for example we wanted to implement the sugar for `V += 5`.\n\nWell, we'll just write it like so:\n\n```\n> {Variable V} += 5\n      {V} <- {V} + 1\n      {V} <- {V} + 1\n      {V} <- {V} + 1\n      {V} <- {V} + 1\n      {V} <- {V} + 1\n```\nBut what if we wanted to implement the sugar ` V += k` for ANY const number `k`?\n\n* (Notice the difference here between a const number `k` and a variable `V`.\nWhile on a variable we can perform our regular `S` instructions, \na const is a value that's known **IN COMPILE-TIME** and is not stored anywhere)\n  \nIn that case, we'd have to use the `REPEAT` statement:\n\n```\n> {Variable V} += {Const K}\n      {REPEAT K}\n      {V} <- {V} + 1\n      {END REPEAT}\n```\nYou might be thinking: \"This is cheating! REPEAT is not a sugar nor is it a supported instruction!\".\n\nWell, as explained before, syntactic sugars are only A CONVENTION \nthat we can all agree on when writing `S Language` code.\n\nThe `REPEAT` keyword is a convention for consts, that the lines shall be repeated as the size of the const.\n\nIf you still think it's cheating, you're welcome to implement `V += k` as many times as you want for different `k`'s.\n##### The REPEAT Tradeoff\nCurrently, the only supported functionality of `Const` types is the `REPEAT` statement.\nThe initial plan was to implement another functionality called `{REPEAT I TO K}`.\n\nSimilarly to `REPEAT`, it would repeat the block `K` times, but it would also allow us to use another\ncompile-time variable `I`, that would represent the current block repetition index.\nThis way, we can repeat the block while still changing the behavior of how it generates based \non the value of const variable `I`.\nWe could even perform a nested `{REPEAT I}` based on const value `I`.\n\nBut we can go even further:\nGiven a const `K`, we can write a `Python` function that generates different instructions based on `K`'s value! \nAfter all, sugars are a convention and therefore if we all agree that a given sugar is compiled by the output\nof a `Python` function, there should be no problem!\n\nBut if we do that, we might as well write our code in `Python` or some other high level language instead of `S`.\n\nSo that is why consts only support the `REPEAT` keyword.\nAny additional keyword that we add will remove us of the challenge of writing in `S`, and defeat the purpose altogether.\n\nYou can still do meta-programming in `S` if you want though. Just not with consts \n(as `S` does not natively support them).\n##### The Numeric Type\nWhile the `Const` type helps reduce code repetition, \nthere could still be code repetition between const/variable implementations.\n\nSuppose we've already implemented sugars for `V <- 0` and `V1 += V2`, \nand now we wish to implement `V1 <- V2`.\n\nThe straightforward approach would be to implement it as follows:\n\n```\n> {Variable V1} <- {Variable V2}\n      {V1} <- 0\n      {V1} += {V2}\n```\nThis implementation works fine, but now we decide to implement the same for consts.\nSo we implement the sugar `V += K`, and now we need to implement `V <- K`:\n\n```\n> {Variable V} <- {Const K}\n      {V} <- 0\n      {V} += {K}\n```\nBut notice the code repetition between the two implementations! Yuck!\n\nWell, `Numeric` comes to the rescue:\n```\n> {Variable V} <- {Numeric N}\n      {V} <- 0\n      {V} += {N}\n```\nThe numeric helps us create the two implementations at once!\nThis works as intended. When we use the sugar for consts, the compiler uses sugar `V += K` to expand the second line, \nand when we use the sugar for variables, it uses `V1 += V2`.\n\nYou might think this is pretty minor, but imagine you wanted to implement `V1 <- V2 + V3`. \nYou'd have to implement the same sugar 4 times to allow for both const/variable usages.\n##### The Pitfalls of Sugars\n###### Sugar Argument Edge Cases\nSuppose you've implemented the sugars `{Variable V} <- {Const K}` and `{Variable V1} -= {Variable V2}` correctly, \nand you wish to use them to implement the sugar `{Variable OUT} <- {Const K} - {Variable V}`.\n\nWell, the straightforward approach is to implement it like so:\n```\n> {Variable OUT} <- {Const K} - {Variable V}\n        {OUT} <- {K}\n        {OUT} -= {V}\n```\nBut there's an edge case here that needs to be addressed. Can you see it?\n\nWhat if we expand the line `Z <- 100 - Z`?\nIt would expand to:\n```\nZ <- 100\nZ -= Z\n```\nNo matter the initial value of `Z`, the given lines will set it to `0`!\n\nSo let's fix the case for when `V` is the same variable as `OUT`:\n\n```\n> {Variable OUT} <- {Const K} - {Variable V}\n        Z <- {V}\n        {OUT} <- {K}\n        {OUT} -= Z\n```\nNow you may argue that copying the value of `V` to `Z` \nin the common case where `OUT` is not the same variable as `V` is inefficient.\n\nThat would be quite silly of you, \nas it's funny to argue about efficiency in this language to begin with, but you'd still be right.\n\nWell we can add an exception to this case! We can overload the sugar like so:\n```\n> {Variable OUT} <- {Const K} - {Variable OUT}\n        Z <- {OUT}\n        {OUT} <- {K}\n        {OUT} -= Z\n\n> {Variable OUT} <- {Const K} - {Variable V}\n        {OUT} <- {K}\n        {OUT} -= {V}\n```\nThe order here **MATTERS**!\nAs explained previously, the sugar chosen to expand a given line will be the **first in the file** that matches it.\nIf declared the other way around, the more general-case sugar will always take place, \nand we'll be left with the same bug we started with.\n###### Sugar Internal Variables\nSuppose you wished to initialize a given variable `Z` to `5` in the `MAIN` section.\n\nYou could simply write it as `Z <- Z + 1` `5` times. After all, `Z` is initialized to `0`, \nso we don't need to set it to `0` beforehand.\n\nBut what about sugars?\nYou might think that it's safe to do the same with sugars, as the compiler guarantees\nthat the sugar's internal variables are not used anywhere else in the program.\n\nWell, while you may be right that the compiler takes care of us \nwith regard to the uniqueness of the variables, a problem may still occur \nif the sugar is used inside a loop.\n\nLet's see an example.\n\nSuppose you've implemented `{Variable V1} <- {Variable V2}` correctly. \nLet's look at the following code:\n```\n> {Variable OUT} <- 1\n      Z <- Z + 1\n      {OUT} <- Z\n\n> MAIN\n  [A] Y <- 1\n      X <- X - 1\n      IF X != 0 GOTO A\n```\nYou would assume for input `X = 2` the value of `Y` would be `1`.\nBut it would actually be `2`, as the lines that `Y <- 1` is expanded to work with the same variable, \nwhatever the compiler may choose it to be.\n\nOf course this issue would not be present if we were to write our `MAIN` section like so:\n```\n> MAIN\n    Y <- 1\n    Y <- 1\n```\nThis code will in fact always return 1, as the two lines expand to different lines, \nhence with different `Z` variables.\n\nSugar local variables may seem to behave like static variables initialized to `0` at first, \nbut they're only shared between different 'calls' to the same occurrence of the sugar in our code.\n\nAs a result of this, a guideline for writing your sugars should be to \nmake sure the internal variables you use are initialized to `0`, \neither by actively zero-ing them at the start of the sugar, or by zero-ing them before exiting the sugar.\n\nYou don't have to do that though if you don't actually care about the exact value of your variable (e.g `GOTO L`). \n\n### The Algorithm\n#### Sugar Parsing\nFirstly, the compiler parses the different sugar sections and generates regex patterns \nthat would detect potential usages for each sugar.\nIt also validates the sugar's most basic syntax, \nlike making sure that for each `REPEAT` keyword comes an `END REPEAT` eventually.\n\n#### Compiling The Code\nThe compiler starts with the `MAIN` section.\n\nIt goes over each instruction in the section:\n- If it's a supported `S` instruction, just compile it as usual\n- Otherwise, go over all known sugars in order, and find the first matching sugar.\n  - If there is none, the program does not compile.\n  - Otherwise, the compiler saves the sugar and its matching occurrence for later compilation.\n\nThe compiler then goes over all sugars that were saved for later compilation and\nexpands each sugar in-place (using the previously compiled instructions to avoid name collision).\n\n#### Sugar Expansion\nThe sugar expansion algorithm is probably where most of the brains of the compiler lies.\n\nIt's a bit too intricate to be discussed here, \nso it is recommended you read the algorithm in file [compiler.py](src/s_interpreter/compiler.py), under the `SyntacticSugar.compile` function.\n\n## The S Interpreter\nWhile the `S Compiler` does all the work of compiling `.slang` files to binaries,\nthe interpreter's purpose is only to run those compiled binaries.\n\n### Interpreter Usage\nTo run the interpreter on a given binary file, run the following command:\n```shell\ns_interpreter <x1-input> <x2-input> ... <xn-input> -b /binary/file/path\n```\nThe interpreter will print out the result of the binary on the given input (variable `Y`).\n\nYou could also pass an additional flag to print extra info about the run performed like so:\n```shell\ns_interpreter <x1-input> <x2-input> ... <xn-input> -b /binary/file/path --run_info\n```\n## The S Language\n\n---\n`The S Language` is a [model of computation](https://en.wikipedia.org/wiki/Model_of_computation) \nthat is taught in course _Theory of Computation_ at _The Academic College of Tel Aviv, Israel_.\n### The Model\n#### Variables\nThe main thing to note about the `S Language`, is that it only supports non-negative integers.\n\nThe language supports three different variable types:\n- **Input Variables**: `X1`/`X`, `X2`, `X3`...\n- **Temporary/Work Variables**: `Z1`/`Z`, `Z2`, `Z3`...\n- **One Output Variable**: `Y1`/`Y`\n#### Labels\nYou can mark instructions in the `S Language` with labels.\n\nThe label names could only be of the following:\n\n`A1`/`A`, `B1`/`B`, `C1`/`C`, `D1`/`D`, `E1`/`E`,\n`A2`, `B2`, ..., `E2`, `A3`, `B3`, ...\n#### Instructions\n`The S Language` only supports 4 different instructions:\n\nGiven any variable `V` and label `L`:\n- `V <- V` - A blank instruction (do nothing)\n- `V <- V + 1` - Increment `V` by 1\n- `V <- V - 1` - If `V` is `0` do nothing, Otherwise decrement `V` by 1\n- `IF V != 0 GOTO L` - If `V` isn't `0`, jump to the first occurrence of label `L` (if nonexistent the program exits), \n  otherwise continue from the next instruction.\n#### The Program\nA program written in the `S Language` is composed of a series of instructions, with or without labels.\n\nAt the start of the program, all variables are initialized to `0`.\n\nOnly the input variables (`X1`, `X2`, ...) are initialized with the user input. \nAll input variables that weren't given before running the program are also initialized to `0`.\n\nA given program may behave in one of two ways:\n- Run infinitely, in which case it returns nothing\n- Finish running, in which case ONLY the value of variable `Y` is returned\n\nThe program runs the instructions sequentially one after the other (unless a jump is performed), \nand may exit by two ways:\n- If it reaches the end of the program\n- If it performs a jump to a nonexistent _label_.\n#### Example\nLet's write a program that always returns the value of its first input (`X1`).\n\nOur first approach would be to write something like this:\n```\n[A] X <- X - 1\n    Y <- Y + 1\n    IF X != 0 GOTO A\n```\nThis program does the trick for all inputs except for `X = 0`.\n\nLet's fix the edge case:\n```\n    IF X != 0 GOTO A\n    Z <- Z + 1\n    IF Z != 0 GOTO E\n[A] X <- X - 1\n    Y <- Y + 1\n    IF X != 0 GOTO A\n```\nNotice that in order to jump unconditionally to non-existent label `E` (and therefore exit), \nwe had to increment a temporary variable to make sure it's not `0`.\n#### Syntactic Sugars\nDue to the simplicity of the `S Language`, we might want to define conventions \nfor patterns that often appear in our code.\n\nTake for example the unconditional jump pattern to some label `L`:\n```\nZ <- Z + 1\nIF Z != 0 GOTO L\n```\nWe can agree that whenever someone writes `GOTO L` in their program, it would mean that they wrote the above pattern.\n\nOf course the `Z` variable would have to be unique and unused anywhere in the program, and not hard-coded `Z`.\nWe wouldn't want our sugars to change the rest of the program's functionality.\n\nThis **DOES NOT MEAN that** `GOTO L` is now a supported instruction in the `S Language`. \nIt's just a convention between us programmers. \n\nTo compile a program that uses syntactic sugars, \nwe'd still need to expand them to their underlying instructions.\n\nThe syntactic sugars will allow us to write higher level code while still respecting the language's restrictions.\n### Encoding\nSince our language only supports integers, \nwe might want to encode structured data into integers so that we can process it.\n#### PairWise\nIf we wish to encode the pair _<a, b>_ where `a`, `b` are non-negative integers, we follow the formula:\n\n$$\\left< a, b \\right> = 2^a(2b + 1) - 1$$\n#### ListWise\nIf we wish to encode the list _[e<sub>1</sub>, e<sub>2</sub>, ..., e<sub>n</sub>]_, \nwhere all elements are non-negative integers, we follow the formula:\n\n$$[e_1, e_2, ..., e_n] = \\sum_{i=1}^n p_i^{e_i}$$\n\nWhere _p<sub>i</sub>_ is the prime at position _i_ (e.g p<sub>1</sub>=2, p<sub>3</sub>=5)\n\n* Notice that adding _0_ to the end of the list does not change its encoding.\nTherefore, if we wish to know the length of the list, we assume it won't end with _0_ elements.\n#### Instruction Encoding\n<ins>Encoding Variables</ins>: If we wish to encode a given variable, \nwe just look at its index in the following sequence:\n\n`Y`, `X1`, `Z1`, `X2`, `Z2`, `X3`, `Z3`, ...\n\n* For example, `#Y` = 1, `#Z2` = 5 etc.\n\n<ins>Encoding Labels</ins>: If we wish to encode a given label, we just look at its index in the following sequence:\n\n`A1`, `B1`, `C1`, `D1`, `E1`, `A2`, `B2`, ...\n\n* For example, `A1` = 1, `#C1` = 3 etc.\n\n<ins>Encoding Instructions:</ins> If we wish to encode a given instruction (with or without label), \nit is encoded as _<a, <b, c>>_, where:\n\n- <ins>**_a_**</ins>:\n  - _0_ if the instruction has no label \n  - Otherwise the encoding of the label\n- <ins>**_b_**</ins>: \n  - _0_ if `V <- V`\n  - _1_ if `V <- V + 1`\n  - _2_ if `V <- V - 1`\n  - (_2_ + `#L`) if `IF V != 0 GOTO L` \n- <ins>**_c_**</ins>: `#V` - _1_ where `V` is the variable in the instruction\n#### Program Encoding\nIf we wish to encode the program:\n```\nI1\nI2\n.\n.\n.\nIn\n```\n\nWe just follow the formula:\n\n\\#[\\#_I<sub>1</sub>_, \\#_I<sub>2</sub>_, ..., \\#_I<sub>n</sub>_] - _1_\n\n* Notice that the encoding for `Y <- Y` is 0.\n  This means that adding such instruction without a label to the end of a program **will not** change its encoding.\n  This is problematic, so as a convention, no program will end with `Y <- Y` without a label.\n### Conventions\n- If the index of a variable/label is 1, we can omit it.\n- No program will end with a non-labeled `Y <- Y` instruction.\n- Although it's not mandatory, label `E` (`E1`) is never used as a label of an instruction,\n  so that we can always jump to it if we wish to exit the program.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "s-interpreter",
    "package_url": "https://pypi.org/project/s-interpreter/",
    "platform": null,
    "project_url": "https://pypi.org/project/s-interpreter/",
    "project_urls": {
      "Bug Tracker": "https://github.com/SamuelSill/s_interpreter/issues",
      "Homepage": "https://github.com/SamuelSill/s_interpreter"
    },
    "release_url": "https://pypi.org/project/s-interpreter/1.0.0/",
    "requires_dist": [
      "sympy (>=1.11.1)"
    ],
    "requires_python": ">=3.9",
    "summary": "A package for compiling and interpreting S Language code",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16260348,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e00486a6f49e221a2acdf9aecb953849b5038cf68052c38073181da502eb400",
          "md5": "37c37cf2cf6aa8e4d1c17e72319b321c",
          "sha256": "06d05dd42a1c22f1a42d88f9daf47ca815b0e716c392393cd5b15620621588bc"
        },
        "downloads": -1,
        "filename": "s_interpreter-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37c37cf2cf6aa8e4d1c17e72319b321c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 18286,
        "upload_time": "2022-12-23T00:03:19",
        "upload_time_iso_8601": "2022-12-23T00:03:19.411030Z",
        "url": "https://files.pythonhosted.org/packages/8e/00/486a6f49e221a2acdf9aecb953849b5038cf68052c38073181da502eb400/s_interpreter-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cf020b1c5c4df8ee6b4817065417b1e2df74e9c7e3ba3e4b840914997b41fc7",
          "md5": "382176f2069147f562afabb99bac6e4c",
          "sha256": "0166a967264afe33eeed63cfb5db85714f94e5b5807e57cc66bf81850e1d7fd6"
        },
        "downloads": -1,
        "filename": "s_interpreter-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "382176f2069147f562afabb99bac6e4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 24872,
        "upload_time": "2022-12-23T00:03:21",
        "upload_time_iso_8601": "2022-12-23T00:03:21.179355Z",
        "url": "https://files.pythonhosted.org/packages/6c/f0/20b1c5c4df8ee6b4817065417b1e2df74e9c7e3ba3e4b840914997b41fc7/s_interpreter-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8834215165219c95708030ed519102cd0574396f1b94d695110eb5eae1b617e",
          "md5": "9bb5c58e4eb2f53b3a87ef4caf1b4375",
          "sha256": "c9a79de8f5b1bac7a7fc61b996775da9dab01ee954c3c18e3055068eb57686df"
        },
        "downloads": -1,
        "filename": "s_interpreter-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bb5c58e4eb2f53b3a87ef4caf1b4375",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 18316,
        "upload_time": "2022-12-23T00:16:48",
        "upload_time_iso_8601": "2022-12-23T00:16:48.859654Z",
        "url": "https://files.pythonhosted.org/packages/c8/83/4215165219c95708030ed519102cd0574396f1b94d695110eb5eae1b617e/s_interpreter-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97e6c8e100d7843bf2b7b44f4a7874984fe44cee07e5c477adc0b366b71f9d4e",
          "md5": "d0d3b9e1e4cbef8d0a3b7e399b201602",
          "sha256": "0be77ed0808575d50b78a275077ca9e46f3dc5bb829d2a9abef7e76b2e26825a"
        },
        "downloads": -1,
        "filename": "s_interpreter-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d0d3b9e1e4cbef8d0a3b7e399b201602",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 24924,
        "upload_time": "2022-12-23T00:16:50",
        "upload_time_iso_8601": "2022-12-23T00:16:50.065669Z",
        "url": "https://files.pythonhosted.org/packages/97/e6/c8e100d7843bf2b7b44f4a7874984fe44cee07e5c477adc0b366b71f9d4e/s_interpreter-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b9a97796a15d321f91b39d98dc075209930c3dc4af58b7413385783052b5a19",
          "md5": "c8d32412d61f9f9dbd522f5a15148fd4",
          "sha256": "ecb1b77abbf4e97d43b6c6dca2a20a1879fb1f075fe0a32589a5c11ee7c9b765"
        },
        "downloads": -1,
        "filename": "s_interpreter-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8d32412d61f9f9dbd522f5a15148fd4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 19485,
        "upload_time": "2022-12-28T02:58:29",
        "upload_time_iso_8601": "2022-12-28T02:58:29.688760Z",
        "url": "https://files.pythonhosted.org/packages/5b/9a/97796a15d321f91b39d98dc075209930c3dc4af58b7413385783052b5a19/s_interpreter-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d47b503af064231852a25c9f81526e1f1810862156a07f85f6f61dc9484a887",
          "md5": "c95d2196fe600e319a4efe65bc55077a",
          "sha256": "ba87507465815e5f1d33baebee323a519b4c95d59d64fabfbf95c56059dabf43"
        },
        "downloads": -1,
        "filename": "s_interpreter-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c95d2196fe600e319a4efe65bc55077a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 26093,
        "upload_time": "2022-12-28T02:58:31",
        "upload_time_iso_8601": "2022-12-28T02:58:31.376231Z",
        "url": "https://files.pythonhosted.org/packages/8d/47/b503af064231852a25c9f81526e1f1810862156a07f85f6f61dc9484a887/s_interpreter-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e403aea9d95d4d480d74c4383b422f75d795971c087ed2932851b25a5bb37ffa",
          "md5": "9eaa51a013804d7d13f05da105c89525",
          "sha256": "da3ee8dd632ceaebd9d7ddcc2f9577ebccbc7abbb9bc2a35620d96a585a3ef77"
        },
        "downloads": -1,
        "filename": "s_interpreter-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9eaa51a013804d7d13f05da105c89525",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 19921,
        "upload_time": "2022-12-28T20:36:31",
        "upload_time_iso_8601": "2022-12-28T20:36:31.790517Z",
        "url": "https://files.pythonhosted.org/packages/e4/03/aea9d95d4d480d74c4383b422f75d795971c087ed2932851b25a5bb37ffa/s_interpreter-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4bf7d83303058899997604937841bd49cfd808efbc86582dfd32a716d79a2e5",
          "md5": "3b85aefb79f6419df9c56a1ccaf3bcc0",
          "sha256": "10e8059397d166b416b30af208d83b260f98fd414ac3eba664fdea77ad400f3d"
        },
        "downloads": -1,
        "filename": "s_interpreter-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3b85aefb79f6419df9c56a1ccaf3bcc0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 26864,
        "upload_time": "2022-12-28T20:36:33",
        "upload_time_iso_8601": "2022-12-28T20:36:33.461949Z",
        "url": "https://files.pythonhosted.org/packages/e4/bf/7d83303058899997604937841bd49cfd808efbc86582dfd32a716d79a2e5/s_interpreter-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd740be2ff78656abec81e195b6c7fa8eaf5caaf975b0d4eefabf1e6de4010be",
          "md5": "566f48b96faef43ed6c5d3016be12ad5",
          "sha256": "39524a1bf6acae2fef66dc33ac5a39f9d244bb7ecde8c4d719a74ea34de28481"
        },
        "downloads": -1,
        "filename": "s_interpreter-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "566f48b96faef43ed6c5d3016be12ad5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 19980,
        "upload_time": "2022-12-30T18:34:09",
        "upload_time_iso_8601": "2022-12-30T18:34:09.158653Z",
        "url": "https://files.pythonhosted.org/packages/bd/74/0be2ff78656abec81e195b6c7fa8eaf5caaf975b0d4eefabf1e6de4010be/s_interpreter-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83b64eeaa9cf9c9f476e8bb0bcdc74b3217c03c9020f2358435413655da12acf",
          "md5": "29b30512f472fba6b45dd88957f91696",
          "sha256": "3b80a5e5516b65f94a52447f0cdab69988ddabc8e307515389440381e6c5175f"
        },
        "downloads": -1,
        "filename": "s_interpreter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "29b30512f472fba6b45dd88957f91696",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 26917,
        "upload_time": "2022-12-30T18:34:10",
        "upload_time_iso_8601": "2022-12-30T18:34:10.720695Z",
        "url": "https://files.pythonhosted.org/packages/83/b6/4eeaa9cf9c9f476e8bb0bcdc74b3217c03c9020f2358435413655da12acf/s_interpreter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd740be2ff78656abec81e195b6c7fa8eaf5caaf975b0d4eefabf1e6de4010be",
        "md5": "566f48b96faef43ed6c5d3016be12ad5",
        "sha256": "39524a1bf6acae2fef66dc33ac5a39f9d244bb7ecde8c4d719a74ea34de28481"
      },
      "downloads": -1,
      "filename": "s_interpreter-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "566f48b96faef43ed6c5d3016be12ad5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 19980,
      "upload_time": "2022-12-30T18:34:09",
      "upload_time_iso_8601": "2022-12-30T18:34:09.158653Z",
      "url": "https://files.pythonhosted.org/packages/bd/74/0be2ff78656abec81e195b6c7fa8eaf5caaf975b0d4eefabf1e6de4010be/s_interpreter-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83b64eeaa9cf9c9f476e8bb0bcdc74b3217c03c9020f2358435413655da12acf",
        "md5": "29b30512f472fba6b45dd88957f91696",
        "sha256": "3b80a5e5516b65f94a52447f0cdab69988ddabc8e307515389440381e6c5175f"
      },
      "downloads": -1,
      "filename": "s_interpreter-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "29b30512f472fba6b45dd88957f91696",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 26917,
      "upload_time": "2022-12-30T18:34:10",
      "upload_time_iso_8601": "2022-12-30T18:34:10.720695Z",
      "url": "https://files.pythonhosted.org/packages/83/b6/4eeaa9cf9c9f476e8bb0bcdc74b3217c03c9020f2358435413655da12acf/s_interpreter-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}