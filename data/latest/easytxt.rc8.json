{
  "info": {
    "author": "Rok Grabnar",
    "author_email": "grabnarrok@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "=================================\nWelcome to EasyTXT documentation!\n=================================\n\n.. image:: https://github.com/sitegroove/easydata/workflows/main/badge.svg?style=flat-square\n    :target: https://github.com/sitegroove/easytxt/actions?query=workflow%3Amain\n    :alt: Build status\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: code style black\n\n.. image:: https://badge.fury.io/py/easytxt.svg?style=flat-square\n    :target: https://pypi.org/project/easytxt/\n    :alt: pypi package version\n\nEasyTXT is a set of high and low level modules to help you with text\nnormalization and manipulation.\n\n**PLEASE NOTE:** *EasyTXT is still in alpha stage and certain functionalities\ncould change without deprecation warning, although in the current stage this is less\nlikely and class parameters should remain the same. For now it's discouraged\nto use it in production (if so, then on your own risk) and it's current usage is\nfor testing purposes only.*\n\n.. contents::\n\nFeatures\n========\n\nSome of the most important features that EasyTXT does:\n\n* normalizes text\n* break text into normalized sentences\n* break text into normalized features\n* converts HTML to normalized text\n* text manipulation (allow or deny sentences, etc.)\n* fixes text encoding\n* normalizes spaces\n* converts html table data into sentences or features\n* html table parser which returns dict of column row info\n* autocomplete works with any method or function :)\n* ...\n\nThere are many more features regarding which, please refer to the documentation\nbellow.\n\nInstallation\n============\n::\n\n    pip install easytxt\n\neasytxt requires Python 3.8+.\n\nparse_text\n==========\n\nText examples\n-------------\nIn this example lets parse badly structured text and output it into a multiple\nformats.\n\nPlease note that calling multiple formats at the same time won't affect\nperformance since sentences are cached and when calling other formats,\ncached sentences will be instead used in a process.\n\n.. code-block:: python\n\n    >>> from easytxt import parse_text\n    >>> test_text = '  first sentence... Bad uÌˆnicode.   HTML entities &lt;3!'\n    >>> pt = parse_text(test_text)\n    >>> pt.sentences\n    ['First sentence...', 'Bad ünicode.', 'HTML entities <3!']\n\nLets just get normalized text.\n\n.. code-block:: python\n\n    >>> pt.text\n    First sentence... Bad ünicode. HTML entities <3!\n\nHere is example how to extract features from text.\n\n.. code-block:: python\n\n    >>> test_text = '- color: Black - material: Aluminium. Last Sentence'\n    >>> pt = parse_text(test_text)\n\nThe text parser will try to automatically detect which are regular sentences or\nfeatures and show only extracted features when called ``features`` attribute. By\ndefault features would get capitalized in a same way as sentences.\n\n.. code-block:: python\n\n    >>> pt.features\n    [('Color', 'Black'), ('Material', 'Aluminium')]\n\nReturn features dictionary instead a list of tuples.\n\n.. code-block:: python\n\n    >>> pt.features_dict\n    {'Color': 'Black', 'Material': 'Aluminium'}\n\nLet's get a value from a specific feature.\n\n.. code-block:: python\n\n    >>> pt.feature('color')\n    Black\n\n*We don't need to call ``features`` property first to get value\nwith ``feature`` since this is already done in a background. Features are\nalso cached in a similar way as sentences to increase performance in a case\nwe make multiple calls.*\n\nAlthough regular sentences are ignored when calling ``features`` attr, they can\nstill be returned when calling ``sentences`` or ``text`` attr.\n\n.. code-block:: python\n\n    >>> pt.sentences\n    ['Color: Black.', 'Material: Aluminium.', 'Last Sentence.']\n    >>> pt.text\n    Color: Black. Material: Aluminium. Last Sentence.\n\nHTML examples\n-------------\nIn this example we will try to parse html text. There is not special parameter for\n``parse_text`` in order to process HTML. Usage is exactly the same as for\n``regular text`` since ``html`` is detected and processed automatically.\n\n.. code-block:: python\n\n    >>> test_text = '<p>Some sentence</p> <ul><li>* Easy <b>HD</b> camera </li></ul>'\n    >>> pt = parse_text(test_text)\n    >>> pt.sentences\n    ['Some sentence.', 'Easy HD camera.']\n\nOne of the best features of using ``parse_text`` on ``html`` is that it can extract\ntable data into sentences. Lets get more info about this feature through example.\n\n.. code-block:: python\n\n    from easytxt import parse_text\n\n\n    test_text_html = '''\n        <p>Some paragraph demo text.</p>\n        <table>\n            <tbody>\n                <tr>\n                    <td scope=\"row\">Type</td>\n                    <td>Easybook Pro</td>\n                </tr>\n                <tr>\n                    <td scope=\"row\">Operating system</td>\n                    <td>etOS</td>\n                </tr>\n            </tbody>\n        </table>\n        <div>Text after <strong>table</strong>.</div>\n    '''\n\n    tp = parse_text(test_text_html)\n\n    print(tp.sentences)\n\nIn example above following sentences will be printed.\n\n.. code-block:: python\n\n    [\n        'Some paragraph demo text.',\n        'Type: Easybook Pro.',\n        'Operating system: etOS.',\n        'Text after table.'\n    ]\n\nAlthough in example we used table without header and with only two columns,\n``parse_text`` can easily handle tables with a header and more than two columns.\nAlthough it can parse table with infinite number of columns, it's not advised to\n``parse_text`` since sentences with table data would become hard to read. To\nextract data from a table with more complex structure ``parse_table`` is recommended\nto be used since it can return results as a list of dictionaries.\n\nCustom parameters\n-----------------\n\n**language**\n\nIf we are parsing text in other language than english then we need to\nspecify language parameter to which language our text belong to in order\nfor sentences to be split properly around abbreviations.\n\n.. code-block:: python\n\n    >>> test_text = 'primera oracion? Segunda oración. tercera oración'\n    >>> pt = parse_text(test_text, language='es')\n    >>> pt.sentences\n    ['Primera oracion?', 'Segunda oración.', 'Tercera oración.']\n\nPlease note that currently only ``en`` and ``es`` language parameter values\nare supported. *Support for more is coming soon...*\n\n**css_query**\n\nIn cases that we provide html string, we can with ``css_query`` parameter\nselect from which html nodes text would get extracted.\n\n.. code-block:: python\n\n    >>> test_text = '<p>Some sentence</p> <ul><li>* Easy <b>HD</b> camera </li></ul>'\n    >>> pt = parse_text(test_text, css_query='p')\n    >>> pt.sentences\n    ['Some sentence.']\n\n**exclude_css**\n\nIn cases that we provide html string, we can through ``exclude_css`` parameter\nlimit from which html nodes would be excluded from parsing.\n\n.. code-block:: python\n\n    >>> test_text = '<p>Some sentence</p> <ul><li>* Easy <b>HD</b> camera </li></ul>'\n    >>> pt = parse_text(test_text, exclude_css=['p', 'b'])\n    >>> pt.sentences\n    ['Easy camera.']\n\n**allow**\n\nWe can control which sentences we want to get extracted by providing list of\nkeywords into ``allow`` parameter. Keys are not case sensitive.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. Third sentence'\n    >>> pt = parse_text(test_text, allow=['first', 'third'])\n    >>> pt.sentences\n    ['First sentence?', 'Third sentence.']\n\nRegex pattern is also supported as parameter value:\n\n.. code-block:: python\n\n    >>> pt = parse_text(test_text, allow=[r'\\bfirst'])\n\n**callow**\n\n``callow`` is similar to ``allow`` but with exception that provided keys\nare case sensitive. Regex pattern as key is also supported.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. Third sentence'\n    >>> pt = parse_text(test_text, allow=['First', 'Third'])\n    >>> pt.sentences\n    ['Third sentence.']\n\n**from_allow**\n\nWe can skip sentences by providing keys in ``from_allow`` parameter.\nKeys are not case sensitive and regex pattern is also supported.\n\n.. code-block:: python\n\n    >>> test_text = 'First txt. Second txt. Third Txt. FOUR txt.'\n    >>> pt = parse_text(test_text, from_allow=['second'])\n    >>> pt.sentences\n    ['Second txt.', 'Third Txt.', 'FOUR txt.']\n\n**from_callow**\n\n``from_callow`` is similar to ``from_allow`` but with exception that\nprovided keys are case sensitive. Regex pattern as key is also supported.\n\n.. code-block:: python\n\n    >>> test_text = 'First txt. Second txt. Third Txt. FOUR txt.'\n    >>> pt = parse_text(test_text, from_callow=['Second'])\n    >>> pt.sentences\n    ['Second txt.', 'Third Txt.', 'FOUR txt.']\n\nLets recreate same example as before but with lowercase key.\n\n.. code-block:: python\n\n    >>> test_text = 'First txt. Second txt. Third Txt. FOUR txt.'\n    >>> pt = parse_text(test_text, from_callow=['second'])\n    >>> pt.sentences\n    []\n\n**to_allow**\n\n``to_allow`` is similar to ``from_allow`` but in reverse order. Here\nare sentences skipped after provided key is found. Keys are not case\nsensitive and regex pattern is also supported.\n\n.. code-block:: python\n\n    >>> test_text = 'First txt. Second txt. Third Txt. FOUR txt.'\n    >>> pt = parse_text(test_text, to_allow=['four'])\n    >>> pt.sentences\n    ['First txt.', 'Second txt.', 'Third Txt.']\n\n**to_callow**\n\n``to_callow`` is similar to ``to_allow`` but with exception that\nprovided keys are case sensitive. Regex pattern is also supported.\n\n.. code-block:: python\n\n    >>> test_text = 'First txt. Second txt. Third Txt. FOUR txt.'\n    >>> pt = parse_text(test_text, to_callow=['FOUR'])\n    >>> pt.sentences\n    ['First txt.', 'Second txt.', 'Third Txt.']\n\nLets recreate same example as before but with lowercase key.\n\n.. code-block:: python\n\n    >>> test_text = 'First txt. Second txt. Third Txt. FOUR txt.'\n    >>> pt = parse_text(test_text, to_callow=['four'])\n    >>> pt.sentences\n    ['First txt.', 'Second txt.', 'Third Txt.', 'FOUR txt.']\n\n**deny**\n\nWe can control which sentences we don't want to get extracted by providing\nlist of keywords into ``deny`` parameter. Keys are not case sensitive and\nregex pattern is also supported.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. Third sentence'\n    >>> pt = parse_text(test_text, deny=['first', 'third'])\n    >>> pt.sentences\n    ['Second sentence.']\n\n**cdeny**\n\n``cdeny`` is similar to ``deny`` but with exception that provided keys\nare case sensitive. Regex pattern as a key is also supported.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. Third sentence'\n    >>> pt = parse_text(test_text, deny=['First', 'Third'])\n    >>> pt.sentences\n    ['First sentence?', 'Second sentence.']\n\n**normalize**\n\nBy default parameter ``normalize`` is set to ``True``. This means that any\nbad encoding will be automatically fixed, stops added and line breaks\nsplit into sentences.\n\n.. code-block:: python\n\n    >>> from easytxt import parse_text\n    >>> test_text = '  first sentence... Bad uÌˆnicode.   HTML entities &lt;3!'\n    >>> pt = parse_text(test_text)\n    >>> pt.sentences\n    ['First sentence...', 'Bad ünicode.', 'HTML entities <3!']\n\nLets try to set parameter ``normalize`` to ``False`` and see what happens.\n\n.. code-block:: python\n\n    >>> from easytxt import parse_text\n    >>> test_text = '  first sentence... Bad uÌˆnicode.   HTML entities &lt;3!'\n    >>> pt = parse_text(test_text, normalize=False)\n    >>> pt.sentences\n    ['First sentence...', 'Bad uÌˆnicode.', 'HTML entities &lt;3!']\n\n**capitalize**\n\nBy default all sentences will get capitalized as we can see bellow.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. third sentence'\n    >>> pt = parse_text(test_text)\n    >>> pt.sentences\n    ['First sentence?', 'Second sentence.', 'third sentence.']\n\nWe can disable this behaviour by setting parameter ``capitalize`` to ``False``.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. third sentence'\n    >>> pt = parse_text(test_text, capitalize=False)\n    >>> pt.sentences\n    ['first sentence?', 'Second sentence.', 'third sentence.']\n\n**title**\n\nWe can set our text output to title by setting parameter ``title``\nto ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. third sentence'\n    >>> pt = parse_text(test_text, title=True)\n    >>> pt.text\n    'First Sentence? Second Sentence. Third Sentence'\n\n**uppercase**\n\nWe can set our text output to uppercase by setting parameter ``uppercase``\nto ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. third sentence'\n    >>> pt = parse_text(test_text, uppercase=True)\n    >>> pt.sentences\n    ['FIRST SENTENCE?', 'SECOND SENTENCE.', 'THIRD SENTENCE.']\n\n**lowercase**\n\nWe can set our text output to lowercase by setting parameter ``lowercase``\nto ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. third sentence'\n    >>> pt = parse_text(test_text, lowercase=True)\n    >>> pt.text\n    'first sentence? second sentence. third sentence'\n\n**min_chars**\n\nBy default ``min_chars`` has a value of 5. This means that any sentence that has\nless than 5 chars, will be filtered out and not seen at the end result. This\nis done to remove ambiguous sentences, especially when extracting text from\nhtml. We can raise or decrease this limit by changing the value of ``min_chars``.\n\n**replace_keys**\n\nWe can replace all chars in a sentences by providing tuple of search key and\nreplacement char in a ``replace_keys`` parameter. Regex pattern as key is\nalso supported and search keys are not case sensitive.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence! - second sentence.  Third'\n    >>> pt = parse_text(test_text, replace_keys=[('third', 'Last'), ('nce!', 'nce?')])\n    >>> pt.sentences\n    ['First sentence?', 'Second sentence.', 'Last.']\n\n**remove_keys**\n\nWe can remove all chars in sentences by providing list of search keys in a\n``replace_keys`` parameter. Regex pattern as key is also supported and keys\nare not case sensitive.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence! - second sentence.  Third'\n    >>> pt = parse_text(test_text, remove_keys=['sentence', '!'])\n    >>> pt.sentences\n    ['First.', 'Second.', 'Third.']\n\n**replace_keys_raw_text**\n\nWe can replace char values before text is split into sentences. This is\nespecially useful if we want to fix text before it's parsed and so that\nis split into sentences correctly. It accepts ``regex`` as key values in a\n``tuple``. Please note that keys are not case sensitive and regex as key\nis also accepted.\n\nLets first show default result with badly structured text without\nsetting keys into ``replace_keys_raw_text``.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook pro 15 Color: Gray Material: Aluminium'\n    >>> pt = parse_text(test_text)\n    >>> pt.sentences\n    ['Easybook pro 15 Color: Gray Material: Aluminium.']\n\nAs we can see from the result test text is returned as one sentence\ndue to missing stop keys (``.``) between sentences. Lets fix this by\nadding stop keys into unprocessed text before sentence splitting\nhappens.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook pro 15 Color: Gray Material: Aluminium'\n    >>> replace_keys = [('Color:', '. Color:'), ('Material:', '. Material:')]\n    >>> pt = parse_text(test_text, replace_keys_raw_text=replace_keys)\n    >>> pt.sentences\n    ['Easybook pro 15.', 'Color: Gray.', 'Material: Aluminium.']\n\n**remove_keys_raw_text**\n\nWorks similar as ``replace_keys_raw_text``, but instead of providing list\nof tuples in order to replace chars, here we provide list of chars to remove\nkeys. Lets try first on a sentence without setting keys to ``rremove_keys_raw_text``.\nPlease note that keys are not case sensitive and regex as key is also accepted.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook pro 15. Color: Gray'\n    >>> pt = parse_text(test_text)\n    >>> pt.sentences\n    ['Easybook pro 15.', 'Color: Gray.']\n\nText above due to stop key ``.`` was split into two sentences. Lets prevent this\nby removing color and stop key at the same time and get one sentence instead.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook pro 15. Color: Gray'\n    >>> pt = parse_text(test_text, remove_keys_raw_text=['. color:'])\n    >>> pt.sentences\n    ['Easybook pro 15 Gray.']\n\n**split_inline_breaks**\n\nBy default text with chars like ``*``, `` - `` and bullet points would get split\ninto sentences.\n\nExample:\n\n.. code-block:: python\n\n    >>> test_text = '- first param - second param'\n    >>> pt = parse_text(test_text)\n    >>> pt.sentences\n    ['First param.', 'Second param.']\n\nIn cases when we want to disable this behaviour, we can set parameter\n``split_inline_breaks`` to ``False``.\n\n.. code-block:: python\n\n    >>> test_text = '- first param - second param'\n    >>> pt = parse_text(test_text, split_inline_breaks=False)\n    >>> pt.sentences\n    ['- first param - second param.']\n\nPlease note that chars like ``.``, ``:``, ``?``, ``!`` are not considered\nas inline breaks.\n\n**inline_breaks**\n\nIn above example we saw how default char breaks by default work. In cases when\nwe want to split sentences by different char than default one, we can do so by\nproviding list of chars into ``inline_breaks`` parameter.\n\n.. code-block:: python\n\n    >>> test_text = '> first param > second param'\n    >>> pt = parse_text(test_text, inline_breaks=['>'])\n    >>> pt.sentences\n    ['First param.', 'Second param.']\n\nRegex pattern is also supported as parameter value:\n\n.. code-block:: python\n\n    >>> parse_text(test_text, inline_breaks=[r'\\b>'])\n\n**stop_key**\n\nIf a sentence is without a stop key at the end, then by default it\nwill automatically be appended ``.``. Let see this in bellow example:\n\n.. code-block:: python\n\n    >>> test_text = 'First feature <br> second feature?'\n    >>> pt = parse_text(test_text)\n    >>> pt.sentences\n    ['First feature.', 'Second feature?']\n\nWe can change our default char ``.`` to a custom one by setting our\ndesired char in a ``stop_key`` parameter.\n\n.. code-block:: python\n\n    >>> test_text = 'First feature <br> second feature?'\n    >>> pt = parse_text(test_text, stop_key='!')\n    >>> pt.sentences\n    ['First feature!', 'Second feature?']\n\n**sentence_separator**\n\nIn cases when we want output in text format, we can change how sentences\nare merged together.\n\nLets see first default output in example bellow:\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. Third sentence'\n    >>> pt = parse_text(test_text)\n    >>> pt.text\n    First sentence? Second sentence. Third sentence.\n\nBehind the scene simple ``join`` on a list of sentences is performed.\n\nNow lets change default value ``' '`` of ``sentence_separator`` to our\ncustom one.\n\n.. code-block:: python\n\n    >>> test_text = 'first sentence? Second sentence. Third sentence'\n    >>> pt = parse_text(test_text, sentence_separator=' > ')\n    >>> pt.text\n    First sentence? > Second sentence. > Third sentence.\n\n**text_num_to_numeric**\n\nWe can convert all alpha chars that describe numeric values to actual\nnumbers by setting ``text_num_to_numeric`` parameter to ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'First Sentence. Two thousand and three has it. Three Sentences.'\n    >>> pt = parse_text(test_text, text_num_to_numeric=True)\n    >>> pt.sentences\n    ['1 Sentence.', '2003 has it.', '3 Sentences.']\n\nIf our text is in different language we need to change language value in\nour ``language`` parameter. Currently supported languages regarding\n``text_num_to_numeric`` are only ``en, es, hi and ru``.\n\nInvoked methods\n---------------\n\nFor examples bellow we will use following code as basis:\n\n.. code-block:: python\n\n    >>> test_text = 'First txt. Second txt.'\n    >>> pt = parse_text(test_text)\n\n**__str__**\n\nNormally we would get text by calling ``text`` property:\n\n.. code-block:: python\n\n    >>> pt.text\n    'First txt. Second txt.'\n\nBut we can avoid calling ``text`` property by ``str`` casting.\n\n.. code-block:: python\n\n    >>> str(pt)\n    'First txt. Second txt.'\n\n**__iter__**\n\nNormally we would get sentences by calling ``sentence`` property:\n\n.. code-block:: python\n\n    >>> pt.sentences\n    ['First txt.', 'Second txt.']\n\nBut we can avoid calling ``sentence`` property and use it directly\nin iteration.\n\n.. code-block:: python\n\n    >>> [sentence for sentence in pt]\n    ['First txt.', 'Second txt.']\n\nAnother alternative:\n\n.. code-block:: python\n\n    >>> list(pt)\n    ['First txt.', 'Second txt.']\n\n**__add__**\n\n.. code-block:: python\n\n    >>> pt + 'hello world'\n    >>> pt.sentences\n    ['First txt.', 'Second txt.', 'Hello World.']\n\n    >>> pt + ['Hello', 'World!']\n    >>> pt.sentences\n    ['First txt.', 'Second txt.', 'Hello', 'World!']\n\n**__radd__**\n\n.. code-block:: python\n\n    >>> 'hello world' + pt\n    >>> pt.sentences\n    ['Hello World.', 'First txt.', 'Second txt.']\n\n    >>> ['Hello', 'World!'] + pt\n    >>> pt.sentences\n    ['Hello', 'World!', 'First txt.', 'Second txt.', 'Hello World.']\n\n\nparse_string\n============\n``parse_string`` is a helper method to normalize and manipulate simple\ntexts like titles or similar. It's also more performant than ``parse_text``\nsince it doesn't perform sentence split, capitalization by default ...\nBasically it accepts ``str``, ``float``, ``int`` and returns normalized string.\n\nExamples\n--------\nIn this example lets process text with bad encoding.\n\n.. code-block:: python\n\n    >>> from easytxt import parse_string\n    >>> test_text = 'Easybook Pro 13 &lt;3 uÌˆnicode'\n    >>> parse_string(test_text)\n    Easybook Pro 13 <3 ünicode\n\nFloats, integers will get transformed to string automatically.\n\n.. code-block:: python\n\n    >>> test_int = 123\n    >>> parse_string(test_text)\n    '123'\n\n    >>> test_float = 123.12\n    >>> parse_string(test_text)\n    '123.12'\n\nCustom parameters\n-----------------\n**normalize**\n\nAs seen in example above, text normalization (bad encoding) is\nenabled by default through ``normalize`` parameter. Lets set ``normalize``\nparameter to ``False`` to disable text normalization.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook Pro 13 &lt;3 uÌˆnicode'\n    >>> parse_string(test_text)\n    Easybook Pro 13 &lt;3 uÌˆnicode\n\n**capitalize**\n\nWe can capitalize first character in our string if needed by setting\n``capitalize`` parameter to ``True``. By default is set to ``False``.\n\n.. code-block:: python\n\n    >>> test_text = 'easybook PRO 15'\n    >>> parse_string(test_text, capitalize=True)\n    Easybook PRO 15\n\n**title**\n\nWe can set all first chars in a word uppercase while other chars in a word\nbecome lowercase with``title`` parameter set to ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'easybook PRO 15'\n    >>> parse_string(test_text, title=True)\n    Easybook Pro 15\n\n**uppercase**\n\nWe can set all chars in our string to uppercase by ``uppercase``\nparameter set to ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'easybook PRO 15'\n    >>> parse_string(test_text, uppercase=True)\n    EASYBOOK PRO 15\n\n**lowercase**\n\nWe can set all chars in our string to lowercase by ``lowercase``\nparameter set to ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'easybook PRO 15'\n    >>> parse_string(test_text, lowercase=True)\n    easybook pro 15\n\n**replace_keys**\n\nWe can replace chars/words in a string through ``replace_chars`` parameter.\n``replace_chars`` can accept regex pattern as a lookup key and is not\ncase sensitive.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook Pro 15'\n    >>> parse_string(test_text, replace_keys=[('pro', 'Air'), ('15', '13')])\n    Easybook Air 13\n\n**remove_keys**\n\nWe can remove chars/words in a string through ``remove_keys`` parameter.\n``remove_keys`` can accept regex pattern as a lookup key and is not\ncase sensitive.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook Pro 15'\n    >>> parse_string(test_text, remove_keys=['easy', 'pro'])\n    book 15\n\n**split_key**\n\nText can be split by ``split_key``. By default split index is ``0``.\n\n.. code-block:: python\n\n    >>> test_text = 'easybook-pro_13'\n    >>> parse_string(test_text, split_key='-')\n    easybook\n\nLets specify split index through tuple.\n\n.. code-block:: python\n\n    >>> test_text = 'easybook-pro_13'\n    >>> parse_string(test_text, split_key=('-', -1))\n    pro_13\n\n**split_keys**\n\n``split_keys`` work in a same way as ``split_key`` but instead of single\nsplit key it accepts list of keys.\n\n.. code-block:: python\n\n    >>> test_text = 'easybook-pro_13'\n    >>> parse_string(test_text, split_keys=[('-', -1), '_'])\n    pro\n\n**take**\n\nWith ``take`` parameter we can limit maximum number that are shown\nat the end result. Lets see how it works in example bellow.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook Pro 13'\n    >>> parse_string(test_text, take=8)\n    Easybook\n\n**take**\n\nWith ``skip`` parameter we can skip ignore defined number of chars.\nLets see how it works in example bellow.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook Pro 13'\n    >>> parse_string(test_text, skip=8)\n    Pro 13\n\n**text_num_to_numeric**\n\nWe can convert all alpha chars that describe numeric values to actual\nnumbers by setting ``text_num_to_numeric`` parameter to ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'two thousand and three words for the first time'\n    >>> parse_string(test_text, text_num_to_numeric=True)\n    2003 words for the 1 time\n\nIf our text is in different language we need to change language value in\nour ``language`` parameter. Currently supported languages are only\n``en, es, hi and ru``.\n\n**fix_spaces**\n\nBy default all multiple spaces will be removed and left with only single\none between chars. Lets test it in our bellow example:\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook   Pro  15'\n    >>> parse_string(test_text)\n    Easybook Pro 15\n\nNow lets change ``fix_spaces`` parameter to ``False`` and see what happens.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook   Pro  15'\n    >>> parse_string(test_text, fix_spaces=False)\n    Easybook   Pro  15\n\n**escape_new_lines**\n\nBy default all new line characters are converted to empty space as we can\nsee in example bellow:\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook\\nPro\\n15'\n    >>> parse_string(test_text)\n    Easybook Pro 15\n\nNow lets change ``escape_new_lines`` parameter to ``False`` and see what happens.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook\\nPro\\n15'\n    >>> parse_string(test_text, escape_new_lines=False)\n    Easybook\\nPro\\n15\n\n**new_line_replacement**\n\nIf ``escape_new_lines`` is set to ``True``, then by default all new line chars\nwill be replaced by ``' '`` as seen in upper example. We can change this\ndefault setting by changing value of ``new_line_replacement`` parameter.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook\\nPro\\n15'\n    >>> parse_string(test_text, new_line_replacement='<br>')\n    Easybook<br>Pro<br>15\n\n**add_stop**\n\nWe can add stop char at the end of the string by setting ``add_stop``\nparameter to ``True``.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook Pro  15'\n    >>> parse_string(test_text, add_stop=True)\n    Easybook Pro 15.\n\nBy default ``.`` is added but we can provide our custom char if needed. Instead\nof setting ``add_stop`` parameter to ``True``, we can instead of boolean value\nprovide char as we can see in example bellow.\n\n.. code-block:: python\n\n    >>> test_text = 'Easybook Pro  15'\n    >>> parse_string(test_text, add_stop='!')\n    Easybook Pro 15!\n\nparse_table\n===========\n\n``parse_table`` parses/extracts data from ``HTML`` table into various formats\nlike ``dict``, ``list`` or just ordinary ``text``.\n\nPlease note that ``parse_text`` already parses html tables but only in\n``list`` or ``text`` format and will extract also text from other nodes\nif ``css`` selector is not set directly on ``table`` node.\n\nExamples\n--------\n\nIn following examples we will use two tables. One with a header and one\nwithout it.\n\n.. code-block:: python\n\n    from easytxt import parse_table\n\n\n    test_text_html = '''\n        <p>Some paragraph demo text.</p>\n        <table>\n            <tbody>\n                <tr>\n                    <td scope=\"row\">Type</td>\n                    <td>Easybook Pro</td>\n                </tr>\n                <tr>\n                    <td scope=\"row\">Operating system</td>\n                    <td>etOS</td>\n                </tr>\n            </tbody>\n        </table>\n        <div>Text after <strong>table</strong>.</div>\n    '''\n\n    pt = parse_table(test_text_html)\n\n    for row in pt:\n        print(row)\n\nIn example above following row data will be printed.\n\n.. code-block:: python\n\n    {'Type': 'Easybook Pro'}\n    {'Operating system': 'etOS'}\n\nAlternatively we can get data also as sentences.\n\n.. code-block:: python\n\n    print(pt.sentences)\n\n    [\n        'Type: Easybook Pro',\n        'Operating system: etOS'\n    ]\n\nOr a text.\n\n.. code-block:: python\n\n    print(pt.text)\n\n    * Type: Easybook Pro * Operating system: etOS\n\nAs we can see, only table html will be extracted and by design other html nodes\nare ignored, so that any ambiguous text isn't processed. If header isn't explicitly\nspecified with a ``th`` or a ``thead`` nodes, then ``parse_table`` will automatically\nassume that provided table is without header data and it will take values from first\ncolumn as header info.\n\nLets make a test on a more complex table with a header and multiple columns.\n\n.. code-block:: python\n\n    from easytxt import parse_table\n\n\n    test_text_html = '''\n        <table>\n            <tr>\n                <th>Type</th>\n                <th>OS</th>\n                <th>Color</th>\n            </tr>\n            <tr>\n                <td>Easybook 15</td>\n                <td>etOS</td>\n                <td>Gray</td>\n            </tr>\n            <tr>\n                <td>Easyphone x1</td>\n                <td>Mobile etOS</td>\n                <td>Black</td>\n            </tr>\n            <tr>\n                <td>Easywatch abc</td>\n                <td>Mobile etOS</td>\n                <td>Blue</td>\n            </tr>\n        </table>\n    '''\n\n    pt = parse_table(test_text_html)\n\n    for row in pt:\n        print(row)\n\nIn example above following row data will be printed.\n\n.. code-block:: python\n\n    {'Type': 'Easybook 15', 'OS': 'etOS', 'Color': 'Gray'}\n    {'Type': 'Easyphone x1', 'OS': 'Mobile etOS', 'Color': 'Black'}\n    {'Type': 'Easywatch abc', 'OS': 'Mobile etOS', 'Color': 'Blue'}\n\nLets get table data printed as sentences.\n\n.. code-block:: python\n\n    print(pt.sentences)\n\n    [\n        'Type/OS/Color: Easybook 15/etOS/Gray',\n        'Type/OS/Color: Easyphone x1/Mobile etOS/Black',\n        'Type/OS/Color: Easywatch abc/Mobile etOS/Blue'\n    ]\n\nOr a text.\n\n.. code-block:: python\n\n    print(pt.text)\n\n    * Type/OS/Color: Easybook 15/etOS/Gray * Type/OS/Color: Easyphone x1/Mobile etOS/Black * Type/OS/Color: Easywatch abc/Mobile etOS/Blue\n\nLets get header keys only. It only works in a table with header nodes.\n\n.. code-block:: python\n\n    print(pt.headers)\n\n    ['Type', 'OS', 'Color']\n\nCustom parameters\n-----------------\n\nexamples coming soon ...\n*For now please refer to the source code*\n\nDependencies\n============\n\n`EasyTXT` relies on following libraries in some ways:\n\n  * ftfy_ to fix encoding.\n  * pyquery_ to help with html to text conversion.\n  * number-parser_ to help with numeric text to number conversion\n\n.. _ftfy: https://pypi.org/project/ftfy\n.. _pyquery: https://pypi.org/project/pyquery\n.. _number-parser: https://pypi.org/project/number-parser\n\nContributing\n============\n\nContributions are welcome, and they are greatly appreciated! Every little bit\nhelps, and credit will always be given.\n\nYou can contribute in many ways:\n\nReport Bugs\n-----------\n\nReport bugs at https://github.com/sitegroove/easytxt/issues.\n\nIf you are reporting a bug, please include:\n\n* Your operating system name and ``EasyTXT`` package version.\n* Whole text sample that is being parsed and custom parameters if being set.\n* Parsed text result in various formats ``text``, ``senteces``, ``features``.\n\nFix Bugs\n--------\n\nLook through the GitHub issues for bugs. Anything tagged with “bug” is open\nto whoever wants to implement it.\n\nImplement Features\n------------------\n\nLook through the GitHub issues for features. Anything tagged with “feature”\nis open to whoever wants to implement it. We encourage you to add new test\ncases to existing stack.\n\nWrite Documentation\n-------------------\n\n``EasyTXT`` could always use more documentation, whether as part of the\nofficial ``EasyTXT`` docs or even on the web in blog posts, articles,\ntutorials, and such.\n\nSubmit Feedback\n---------------\n\nThe best way to send feedback is to file an issue at\nhttps://github.com/sitegroove/easytxt/issues.\n\nIf you are proposing a feature:\n\n* Explain in detail how it would work.\n* Keep the scope as narrow as possible, to make it easier to implement.\n* Remember that contributions are welcome :)\n\nPull Request Guidelines\n-----------------------\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n* The pull request should include tests unless PR contains only changes\n  to docs.\n* If the pull request adds functionality, the docs should be updated. Docs\n  currently live in a README.rst file.\n* Follow the core developers’ advice which aim to ensure code’s consistency\n  regardless of variety of approaches used by many contributors.\n* In case you are unable to continue working on a PR, please leave a short\n  comment to notify us. We will be pleased to make any changes required to\n  get it done.\n\n\nNote: *Contributing section was heavily inspired by dateparser package\ncontributing guidelines.*\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sitegroove/easytxt",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easytxt",
    "package_url": "https://pypi.org/project/easytxt/",
    "platform": null,
    "project_url": "https://pypi.org/project/easytxt/",
    "project_urls": {
      "Bug Reports": "https://github.com/sitegroove/easytxt/issues",
      "Documentation": "https://github.com/sitegroove/easytxt",
      "Homepage": "https://github.com/sitegroove/easytxt",
      "Source": "https://github.com/sitegroove/easytxt"
    },
    "release_url": "https://pypi.org/project/easytxt/0.1.2/",
    "requires_dist": [
      "ftfy",
      "pyquery",
      "number-parser"
    ],
    "requires_python": ">=3.8",
    "summary": "Text manipulation and normalization library",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14904667,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10ad8a254faaa15dc9a525c973c210c4d9a3778a3c49aa0dbb9ccc888affd960",
          "md5": "720a471798ac52c0f68517cecb0e4b68",
          "sha256": "7fa1355b63bf4f68d3d887ec3801c03f1ed26db20fe391a222c5d9c3e8746a66"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "720a471798ac52c0f68517cecb0e4b68",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27129,
        "upload_time": "2020-08-29T12:34:06",
        "upload_time_iso_8601": "2020-08-29T12:34:06.159588Z",
        "url": "https://files.pythonhosted.org/packages/10/ad/8a254faaa15dc9a525c973c210c4d9a3778a3c49aa0dbb9ccc888affd960/easytxt-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ead81166c15bde5f7194582e854a7a987a9b337ccadef876051b2eb89bd9f3df",
          "md5": "26455359b821339e2956912abf5e9f88",
          "sha256": "0108e57c10e72120daf3136f46755d916cc356a1e144463ff75241af13f3a516"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "26455359b821339e2956912abf5e9f88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37362,
        "upload_time": "2020-08-29T12:34:09",
        "upload_time_iso_8601": "2020-08-29T12:34:09.140109Z",
        "url": "https://files.pythonhosted.org/packages/ea/d8/1166c15bde5f7194582e854a7a987a9b337ccadef876051b2eb89bd9f3df/easytxt-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "308a0a24b4b54d0ad1c6f6337287dceabf1c389dbd293371676f2fd11d7138e8",
          "md5": "b04e779f2ac273e388d12a04b5a295d7",
          "sha256": "412a02eaf9f8e3dbcaff8c6b032d1e257ce2f307c051e2cf44c70dd80029a47e"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b04e779f2ac273e388d12a04b5a295d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27270,
        "upload_time": "2020-08-29T18:08:19",
        "upload_time_iso_8601": "2020-08-29T18:08:19.363258Z",
        "url": "https://files.pythonhosted.org/packages/30/8a/0a24b4b54d0ad1c6f6337287dceabf1c389dbd293371676f2fd11d7138e8/easytxt-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f59a62660ee5e1b66f4a74ee64db8555a6eb913c8abf3e8d19693486fcb91de",
          "md5": "e59d038f6231d98146cfb80ac52d21e5",
          "sha256": "7f92e34da5dacf7161734ffdc9fd60d059711c930c60b1acfbc5efb923ea7c4d"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e59d038f6231d98146cfb80ac52d21e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37604,
        "upload_time": "2020-08-29T18:08:21",
        "upload_time_iso_8601": "2020-08-29T18:08:21.463574Z",
        "url": "https://files.pythonhosted.org/packages/8f/59/a62660ee5e1b66f4a74ee64db8555a6eb913c8abf3e8d19693486fcb91de/easytxt-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ae75d19e30ee6f26cba5fff3b5314124897fdc8bd8b5aaf9ef1de5a2b7f95e0",
          "md5": "1c04cf0c212a4418017ac3827f66bf54",
          "sha256": "5dbc8999c3fc443dd7bf9ac58d057cbddd9c6f95e73e4575d214532f93857822"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c04cf0c212a4418017ac3827f66bf54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27444,
        "upload_time": "2020-08-30T18:39:47",
        "upload_time_iso_8601": "2020-08-30T18:39:47.022047Z",
        "url": "https://files.pythonhosted.org/packages/7a/e7/5d19e30ee6f26cba5fff3b5314124897fdc8bd8b5aaf9ef1de5a2b7f95e0/easytxt-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "788cb5a9223198fd365dbd23ea6ff347016f93b3dab586d5ab79c360ec522b8f",
          "md5": "693dad34b8f823eabc49b7542d1ca0f8",
          "sha256": "76f8b80ee90148e98521cc3d3b53ac82f20e63c75cb01c466309cbe8bb99db80"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "693dad34b8f823eabc49b7542d1ca0f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38163,
        "upload_time": "2020-08-30T18:39:49",
        "upload_time_iso_8601": "2020-08-30T18:39:49.555022Z",
        "url": "https://files.pythonhosted.org/packages/78/8c/b5a9223198fd365dbd23ea6ff347016f93b3dab586d5ab79c360ec522b8f/easytxt-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71e5be2c181655fcac2715b933b3ec69ec2768fdde32e616e3aae1e81f895782",
          "md5": "b78d75945b16294525ede626ed2b1d5c",
          "sha256": "b699a91d485fd56bc195b6cf47ca8f38e49524cf99eb97c811dda52589e5bc4c"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b78d75945b16294525ede626ed2b1d5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28291,
        "upload_time": "2020-09-04T20:44:35",
        "upload_time_iso_8601": "2020-09-04T20:44:35.366739Z",
        "url": "https://files.pythonhosted.org/packages/71/e5/be2c181655fcac2715b933b3ec69ec2768fdde32e616e3aae1e81f895782/easytxt-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e13fd2a9028cfd4025de10f4ed52394278b39ff1a40cf62adbeec4173a5ef86b",
          "md5": "a49d8bece2839f209df241ac76ef7ba2",
          "sha256": "70abf9814988f96ef70acac8d2c29a174545c3f98295d9b43c57d0974b48433a"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a49d8bece2839f209df241ac76ef7ba2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39077,
        "upload_time": "2020-09-04T20:44:38",
        "upload_time_iso_8601": "2020-09-04T20:44:38.311311Z",
        "url": "https://files.pythonhosted.org/packages/e1/3f/d2a9028cfd4025de10f4ed52394278b39ff1a40cf62adbeec4173a5ef86b/easytxt-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac3aac02445d5278225c6722c3e5dcadb82cbc796fe75b90b78f072ba218c132",
          "md5": "3a0a265eb1d4e2f6f42c5f366ea95478",
          "sha256": "6a7b525389706ad6e33fbc64eed7abe5f11c8787ca1ba3ecb0b0415cde17be33"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a0a265eb1d4e2f6f42c5f366ea95478",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 29322,
        "upload_time": "2020-09-08T23:38:50",
        "upload_time_iso_8601": "2020-09-08T23:38:50.939244Z",
        "url": "https://files.pythonhosted.org/packages/ac/3a/ac02445d5278225c6722c3e5dcadb82cbc796fe75b90b78f072ba218c132/easytxt-0.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "282b879304ed529e0d3386ac14551ce6e2a3ed7b8944d55804607c70e27189ea",
          "md5": "ebd079aa6e9097ad1e48a6e3f388a6ef",
          "sha256": "cb0cf7ed09eef9b6e2ec3f0442b8b193966a57cabeb30b0166f54c7f3ff615e9"
        },
        "downloads": -1,
        "filename": "easytxt-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ebd079aa6e9097ad1e48a6e3f388a6ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41807,
        "upload_time": "2020-09-08T23:38:52",
        "upload_time_iso_8601": "2020-09-08T23:38:52.725866Z",
        "url": "https://files.pythonhosted.org/packages/28/2b/879304ed529e0d3386ac14551ce6e2a3ed7b8944d55804607c70e27189ea/easytxt-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3936f162036120376d762741d6abaa02ee2ac37481d833a92b8593c8d9f797d3",
          "md5": "9eb9197c778c5f821befe4899ce1d109",
          "sha256": "d342e0e13deb947bc1da13b313d513924b00ee2ae8609b510d85700da46125d3"
        },
        "downloads": -1,
        "filename": "easytxt-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9eb9197c778c5f821befe4899ce1d109",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 29886,
        "upload_time": "2022-08-25T20:38:17",
        "upload_time_iso_8601": "2022-08-25T20:38:17.079927Z",
        "url": "https://files.pythonhosted.org/packages/39/36/f162036120376d762741d6abaa02ee2ac37481d833a92b8593c8d9f797d3/easytxt-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60439eed9a676c90baf4c4c0b162a6964e833ce2b5fbbcd1ff1c00ef24f0020",
          "md5": "b6d6a09b68168fd6eb3f380496cdb15f",
          "sha256": "7c59ddc435bb6f4d1e439d90a3ff6060d36969ceabc23aa66685ddfd62732c4d"
        },
        "downloads": -1,
        "filename": "easytxt-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b6d6a09b68168fd6eb3f380496cdb15f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 41011,
        "upload_time": "2022-08-25T20:38:19",
        "upload_time_iso_8601": "2022-08-25T20:38:19.678653Z",
        "url": "https://files.pythonhosted.org/packages/b6/04/39eed9a676c90baf4c4c0b162a6964e833ce2b5fbbcd1ff1c00ef24f0020/easytxt-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a4f9cb40054a7346d0ea39efaafd4a4f2adf90fde238687620c7685d94781ad",
          "md5": "f4a9912d340c97d14285139554f25066",
          "sha256": "a48f5c296b298bf5455164942baaee6824a3423ea6b9434237103236fdbaf56a"
        },
        "downloads": -1,
        "filename": "easytxt-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4a9912d340c97d14285139554f25066",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 30117,
        "upload_time": "2022-08-25T21:06:12",
        "upload_time_iso_8601": "2022-08-25T21:06:12.880951Z",
        "url": "https://files.pythonhosted.org/packages/0a/4f/9cb40054a7346d0ea39efaafd4a4f2adf90fde238687620c7685d94781ad/easytxt-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5c8c99680fb8418dad4329c410386c306ce270ae7db22411fe063668fb0c29b",
          "md5": "b7b085767b26e55f8fba204a25b0d325",
          "sha256": "011db32e6c7e5ecbe44d5b57908b371ab223ca17d784923a9c77bd7bb5f30ccd"
        },
        "downloads": -1,
        "filename": "easytxt-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b7b085767b26e55f8fba204a25b0d325",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 41194,
        "upload_time": "2022-08-25T21:06:15",
        "upload_time_iso_8601": "2022-08-25T21:06:15.734939Z",
        "url": "https://files.pythonhosted.org/packages/e5/c8/c99680fb8418dad4329c410386c306ce270ae7db22411fe063668fb0c29b/easytxt-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60eccf94412271fc604720e0e3e727844202f8f2549ed614b274a78ba1e647a8",
          "md5": "72f3333d0b31e645b01baefc9ee3b482",
          "sha256": "ee3c15ebde46608ee91f4d78e2525aeb32681d487bea8ae5c500ad579b6f2cc5"
        },
        "downloads": -1,
        "filename": "easytxt-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72f3333d0b31e645b01baefc9ee3b482",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 30457,
        "upload_time": "2022-08-26T22:00:53",
        "upload_time_iso_8601": "2022-08-26T22:00:53.599346Z",
        "url": "https://files.pythonhosted.org/packages/60/ec/cf94412271fc604720e0e3e727844202f8f2549ed614b274a78ba1e647a8/easytxt-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28f7a0118f5f6663afd0bb4d9cfc4d478e0244be5a0ae09cf8d03ca63a51a1bd",
          "md5": "e8d0d0c2b6776a042d8d64ded815f52c",
          "sha256": "607b55c47b131f492f24be5199ba70e08cccc13d9dd2c1c9da616aae6003ad0e"
        },
        "downloads": -1,
        "filename": "easytxt-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e8d0d0c2b6776a042d8d64ded815f52c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 41567,
        "upload_time": "2022-08-26T22:00:56",
        "upload_time_iso_8601": "2022-08-26T22:00:56.122756Z",
        "url": "https://files.pythonhosted.org/packages/28/f7/a0118f5f6663afd0bb4d9cfc4d478e0244be5a0ae09cf8d03ca63a51a1bd/easytxt-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60eccf94412271fc604720e0e3e727844202f8f2549ed614b274a78ba1e647a8",
        "md5": "72f3333d0b31e645b01baefc9ee3b482",
        "sha256": "ee3c15ebde46608ee91f4d78e2525aeb32681d487bea8ae5c500ad579b6f2cc5"
      },
      "downloads": -1,
      "filename": "easytxt-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72f3333d0b31e645b01baefc9ee3b482",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 30457,
      "upload_time": "2022-08-26T22:00:53",
      "upload_time_iso_8601": "2022-08-26T22:00:53.599346Z",
      "url": "https://files.pythonhosted.org/packages/60/ec/cf94412271fc604720e0e3e727844202f8f2549ed614b274a78ba1e647a8/easytxt-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28f7a0118f5f6663afd0bb4d9cfc4d478e0244be5a0ae09cf8d03ca63a51a1bd",
        "md5": "e8d0d0c2b6776a042d8d64ded815f52c",
        "sha256": "607b55c47b131f492f24be5199ba70e08cccc13d9dd2c1c9da616aae6003ad0e"
      },
      "downloads": -1,
      "filename": "easytxt-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e8d0d0c2b6776a042d8d64ded815f52c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 41567,
      "upload_time": "2022-08-26T22:00:56",
      "upload_time_iso_8601": "2022-08-26T22:00:56.122756Z",
      "url": "https://files.pythonhosted.org/packages/28/f7/a0118f5f6663afd0bb4d9cfc4d478e0244be5a0ae09cf8d03ca63a51a1bd/easytxt-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}