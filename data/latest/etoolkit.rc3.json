{
  "info": {
    "author": "attr: etoolkit.__author__",
    "author_email": "sgs@pichove.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Security :: Cryptography"
    ],
    "description": "# etoolkit\n\n*etoolkit* is a simple toolkit for defining and setting environment variables\nin a flexible and secure way.\n\n\n## General\n\n*etoolkit* started as a simple idea while I was working at the University\nof Oslo. Later I felt the need for even more flexible solution. The following\ngoals were set:\n\n- the ability to define env. var. \"instances\" with support for inheritance\n\n- encrypting values using a master password\n\n- the ability to spawn a child process with the defined variables\n\n- support for macros\n\n\n## Requirements\n\nApart from Python >= 3.7, the only requirement is\n[cryptography](https://pypi.org/project/cryptography/)\n\n\n## Overview\n\nIn a typical UNIX environment, env. variables are usually set in one\nor more of the initialization / startup files like f.i. */etc/profile*,\n*~/.bash_profile*, *~/.bashrc*, *~/.tcshrc*, *~/.cshrc* ... depending\non the OS, shell, distribution... etc.\nEnv. variables represent key-value pairs (env. variable name and its value).\n\nA potential problem when dealing with env. variables containing sensitive\nvalues like passwords, tokens, connection strings... is that they are inherited\nby all child processes spawned from the login / interactive shell.\n\nA malicious / exploited process (like f.i. web browser) will then be able to\nfetch those values by using *getenv*. Such process may in addition be able to\nsimply read *~/.bashrc* or any similar file readable by the process owner and\nget the values from there if necessary.\n\n*etoolkit* attempts to solve both of these problems.\n\nWhen started, it reads env. variables from its own configuration file.\nSensitive data may be encrypted using a master password. Hence reading\netoolkit's configuration file will not reveal the real value of the data.\n\nWhen *etoolkit* has processed (decryption, macro replacement, etc) its data,\nit may define new env. variables corresponding to that data and may start a new\ninteractive shell. The processed environment variables will not be available\nfor processes that were not spawned by that same *etoolkit* session.\n\n\n## Installation\n\n### pip (pypi)\n\n   ```bash\n   pip install etoolkit\n   ```\n\n\n### Gentoo\n\n   ```bash\n   # add sgs' custom repository using app-eselect/eselect-repository\n   eselect repository add sgs\n\n   # ... or using layman (obsolete)\n   layman -a sgs\n\n   emerge dev-python/etoolkit\n   ```\n\n\n## Setup and examples\n\nMost users (including me) will simply use the command line interface (CLI).\n\n\n### CLI\n\n*etoolkit* comes with a simple CLI:\n\n   ```bash\n   python -m etoolkit -h\n   ```\n\n... or even (if *etoolkit* was installed using the methods described above)\n\n   ```bash\n   etoolkit -h\n   ```\n\n\nThe *etoolkit* CLI loads the configuration located by default in\n*~/.etoolkit.json*. That file is based on\n[etoolkit_sample.json](https://github.com/blackm0re/etoolkit/blob/master/etoolkit_sample.json).\n\nThe *\"instances\"* part of the configuration defines unique instances, each of\nwhich represents its own environment with its own defined env. variables.\nEach instance consists of key-value pairs corresponding to env. name and value.\nAll pairs will result in corresponding env. variables being defined, with the\nexception of the following *etoolkit* internal keys:\n\n- *ETOOLKIT_PARENT* - string - reference to another instance\n\n- *ETOOLKIT_SENSITIVE* - list - env. variables containing sensitive data\n\nAll pairs defined in *\"general\"* (currently only *MASTER_PASSWORD_HASH*) are\n*etoolkit* internal as well.\n\nAn instance may inherit (and if desired overwrite) key value pairs from its\nparent.\n\nVariables containing sensitive data can be encrypted / decrypted using a master\npassword. Currently *etoolkit* requires that all values in a configuration\nfile are encrypted with the same master password. Setting a master password\nhash is a recommended but not mandatory.\n\n   ```bash\n   etoolkit --generate-master-password-hash\n   ```\n\nThat command will prompt for master password and output a hash that can then\nbe stored  \nin [\"general\"][\"MASTER_PASSWORD_HASH\"].  \nThe hash is only used for verifying that a correct master password has been\nprovided at a later time. Issuing:\n\n   ```bash\n   etoolkit --encrypt-value\n   ```\n\nwill prompt for the master password, then for the value to be encrypted and\nfinally display the encrypted string of the value. Unless invoked with the\n*-E* / *--echo* parameter *etoolkit* will not display the value that is about\nto be encrypted.\n\nMore than one value can be encrypted / decrypted with a single master password\nprompt if *-m* / *--multiple-values* parameter is provided. Manual decryption\nof single value(s):\n\n   ```bash\n   etoolkit --decrypt-value --multiple-values\n   ```\n\nAnother possibility is to pass the value to *etoolkit*'s *stdin* using a pipe.\n*etoolkit* will then only prompt for password and not for a value:\n\n   ```bash\n   echo mysecret | etoolkit --encrypt-value\n   ```\n\n... or if the *ETOOLKIT_MASTER_PASSWORD* env. variable is defined, its value\nwill be used instead of prompting for password.\n\nListing available instances defined in the configuration file and then\nloading a specific instance can be achieved by:\n\n   ```bash\n   etoolkit --list\n   etoolkit <instance-name>\n   ```\n\nInstances with names starting with *_* will be considered *abstract* and will\nnot be displayed by *--list*.\n\n*etoolkit* will prompt for the master password the first time it encounters\nand encrypted value. Once provided the master password will be used to decrypt\nthe rest of the encrypted values.\n\nWhen all values are fetched from a given instance (and its parents) and then\ndecrypted, they are further processed by replacing macros with their\ncorresponding values. Currently the following macros are supported:\n\n- **%h** - the home directory of the user running *etoolkit* (~/)\n\n- **%i** - the name of the instance that is about to be loaded\n\n- **%p** - the parent value (for the same key)\n\n- **%u** - the username of the user running *etoolkit* (*getpass.getuser()*)\n\nIn addition, value starting with *\":\"* is appended to the existing value\n(if any) of the env. variable about to be set\n(like *MYVAR=$MYVAR\\<new value\\>)*).  \nThe opposite is true for value ending with *\":\"* (*MYVAR=\\<new value\\>$MYVAR*).\n\nWhen the variables are finally processed, *etoolkit* sets / changes them as env.\nvariables (using *setenv* / *os.environ.update*) and spawns an interactive\nchild process (by invoking *system($SHELL)*).\n\nOne can also spawn a different process than an interactive shell by using the\n*-s* / *--spawn* parameter.\n\n   ```bash\n   etoolkit --spawn /bin/othershell <instance-name>\n   ```\n\nContact the author for questions and suggestions! :)\n\n\n### Using the *EtoolkitInstance* class\n\n*etoolkit* comes with its own *etoolkit* package that contains the\n*EtoolkitInstance* class.\n\nThe class encapsulates the function of creating and processing instances\nfrom a given structure (dict).\n\nIt may be useful if one should prefer for example making her own CLI interface.\nor the *instances* structure being loaded from a diferent configuration file\n(f.i. .yml).\n\n   ```python\n   import os\n\n   import etoolkit\n\n\n   # using some static methods in order to create encrypted values\n   etoolkit.EtoolkitInstance.encrypt('the very secret passwd', 'secret1')\n   # Out: 'enc-val$1$Y/TBb1F3siHTw6qZg9ERzZfA8PLPf2CwGSQLpu9jYWw=$FT5tS9o+ABvsxogIXpJim16Gz5SVtV8='\n\n   etoolkit.EtoolkitInstance.encrypt('the very secret passwd', 'secret2')\n   # Out: 'enc-val$1$vIBcoCNiYrsDLtF41uLuSEnppBjhliD0B8jwcBJcj/c=$KwOGe/y1dlxktDaCnJPIVNuaQ4Q7yNo='\n\n\n   # The encrypted values will be used in our configuration structure\n   # The following structure defines the 3 instances: default, dev and secret\n   instances = {\n       \"general\": {\n       },\n       \"instances\": {\n           \"_default\": {\n               \"ETOOLKIT_PROMPT\": \"(%i)\",\n               \"PYTHONPATH\": \"/home/user/%i/python\",\n           },\n           \"dev\": {\n               \"ETOOLKIT_PARENT\": \"_default\",\n               \"PYTHONPATH\": \"%p:/home/user/%i/.pythonpath\",\n           },\n           \"secret\": {\n               \"ETOOLKIT_PARENT\": \"_default\",\n               \"ETOOLKIT_SENSITIVE\": [\"PASSWORD\"],\n               \"GNUPGHOME\": \"%h/private/.gnupg\",\n               \"PASSWORD\": \"enc-val$1$vIBcoCNiYrsDLtF41uLuSEnppBjhliD0B8jwcBJcj/c=$KwOGe/y1dlxktDaCnJPIVNuaQ4Q7yNo=\"\n           }\n       }\n   }\n\n\n   dev_instance = etoolkit.EtoolkitInstance('dev', instances)\n\n   # fetch the variables before the processing stage (calling get_environ())\n   # since raw_env_variables is a dict, it can be modified (f.i. .update())\n   dev_instance.raw_env_variables\n\n   dev_instance.master_password = 'the very secret passwd'  # or perhaps using getpass\n   env_vars = dev_instance.get_env()\n   print(env_vars['PASSWORD'])  # outputs: 'secret2'\n   \n   inst.dump_env(env_vars)  # prints all values, with the exception of 'PASSWORD'\n\n   # set the env. variables.\n   os.environ.update(env_vars)\n   ```\n\n\n### Tips\n\nWhen starting a new interactive process (f.i. bash), the process will\nin turn invoke its startup script (f.i. *~/.bashrc*).  \nAvoid redefining the env. variables that have just been set by *etoolkit*!\n\nIf you want your shell prompt to display the name of the loaded instance, you\ncan set a new env. variable (f.i. \"ETOOLKIT_PROMPT\" as shown in the sample\nconfiguration above) and then add the following at the bottom of your startup\nfile (f.i. ~/.bashrc):\n\n   ```bash\n   if [ -n \"$ETOOLKIT_PROMPT\" ]; then\n       export PS1=\"$ETOOLKIT_PROMPT$PS1\"\n   fi\n   ```\n\nA quick and dirty bash completion for available instances can be set at the\nbottom of your bash startup file:\n\n   ```bash\n   complete -W '$(compgen -W \"$(etoolkit -l)\")' etoolkit\n   ```\n\nA complete bash completion script for *etoolkit* can be found here:\n[https://github.com/blackm0re/etoolkit/blob/master/completion/etoolkit.bash](https://github.com/blackm0re/etoolkit/blob/master/completion/etoolkit.bash)\n\n\n## Changelog\n\nA complete changelog can be found at:\n[https://github.com/blackm0re/etoolkit/blob/master/CHANGELOG.md](https://github.com/blackm0re/etoolkit/blob/master/CHANGELOG.md)\n\n\n## Support and contributing\n\n*etoolkit* is hosted on GitHub: https://github.com/blackm0re/etoolkit\n\n\n## Author\n\nSimeon Simeonov - sgs @ LiberaChat\n\n\n## [License](https://github.com/blackm0re/etoolkit/blob/master/LICENSE)\n\nCopyright (C) 2021-2022 Simeon Simeonov\nAll rights reserved.\n\n[Licensed](https://github.com/blackm0re/etoolkit/blob/master/LICENSE) under the\nGNU General Public License v3.0 or later.\nSPDX-License-Identifier: GPL-3.0-or-later\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blackm0re/etoolkit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "etoolkit",
    "package_url": "https://pypi.org/project/etoolkit/",
    "platform": null,
    "project_url": "https://pypi.org/project/etoolkit/",
    "project_urls": {
      "Bug Tracker": "https://github.com/blackm0re/etoolkit/issues",
      "Homepage": "https://github.com/blackm0re/etoolkit",
      "Source": "https://github.com/blackm0re/etoolkit"
    },
    "release_url": "https://pypi.org/project/etoolkit/1.2.0/",
    "requires_dist": [
      "cryptography (>=3.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "A simple toolkit for setting environment variables in a flexible way",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13601286,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc5a8571f8df77c4654349b2f494f8d3eb8510d24b17cdba5d41837fc6c6ce91",
          "md5": "325c14a04c4a336ebac72bbe5f01a93d",
          "sha256": "8bc900bf6bb8a6c00a5c0addb6daa67771b8e37aaf32af4b658048a8d774f0fa"
        },
        "downloads": -1,
        "filename": "etoolkit-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "325c14a04c4a336ebac72bbe5f01a93d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 36749,
        "upload_time": "2021-12-23T13:16:00",
        "upload_time_iso_8601": "2021-12-23T13:16:00.083987Z",
        "url": "https://files.pythonhosted.org/packages/cc/5a/8571f8df77c4654349b2f494f8d3eb8510d24b17cdba5d41837fc6c6ce91/etoolkit-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20db0dd60c098f7abf8dea1d00b08c135be32f75fff61321bd2802819efee7e7",
          "md5": "ffe393f4ccf03e27c102ebc217ec7e6f",
          "sha256": "d6714c6be2310a230bbd5355a1049609c361ae55c3715685c3a9710b76071f49"
        },
        "downloads": -1,
        "filename": "etoolkit-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ffe393f4ccf03e27c102ebc217ec7e6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 37130,
        "upload_time": "2021-12-23T13:16:02",
        "upload_time_iso_8601": "2021-12-23T13:16:02.515651Z",
        "url": "https://files.pythonhosted.org/packages/20/db/0dd60c098f7abf8dea1d00b08c135be32f75fff61321bd2802819efee7e7/etoolkit-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04bc94ceb6167e47f47cd44cd8216057d1d6293f3164c1f5f7c9c18410ee8718",
          "md5": "9a77d684d34dcde65f013048cefd814e",
          "sha256": "12b296c73202d7a3cb7a71ca8ac401ebe0f2178fb4335242eef12dda2a5125a6"
        },
        "downloads": -1,
        "filename": "etoolkit-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a77d684d34dcde65f013048cefd814e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 37413,
        "upload_time": "2022-03-17T19:39:30",
        "upload_time_iso_8601": "2022-03-17T19:39:30.786553Z",
        "url": "https://files.pythonhosted.org/packages/04/bc/94ceb6167e47f47cd44cd8216057d1d6293f3164c1f5f7c9c18410ee8718/etoolkit-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe25fe9ed9467e8d34fc10efb4e23f06dda716e8ffd9f5cf3dd51dc82d9fb8fb",
          "md5": "b8f038b751f308ee458f26b692d957c4",
          "sha256": "bbec86e77cd0905860a3a96c025c08a0127c56a793c7becb284ceccef8d74f1a"
        },
        "downloads": -1,
        "filename": "etoolkit-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b8f038b751f308ee458f26b692d957c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 38325,
        "upload_time": "2022-03-17T19:39:32",
        "upload_time_iso_8601": "2022-03-17T19:39:32.476804Z",
        "url": "https://files.pythonhosted.org/packages/fe/25/fe9ed9467e8d34fc10efb4e23f06dda716e8ffd9f5cf3dd51dc82d9fb8fb/etoolkit-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "956b8bfc5481e74644d1fff76bcbd9ac42efb5dfca4458c44cecdd321afe56fe",
          "md5": "56cf26d1d6cb3439f11d187a87a99ee3",
          "sha256": "13384146864172b8ee9c683df6f3ebe1fe239c70a6420d8f4e1eb63de89e8e3e"
        },
        "downloads": -1,
        "filename": "etoolkit-1.2.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "56cf26d1d6cb3439f11d187a87a99ee3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 37635,
        "upload_time": "2022-04-23T17:03:43",
        "upload_time_iso_8601": "2022-04-23T17:03:43.691506Z",
        "url": "https://files.pythonhosted.org/packages/95/6b/8bfc5481e74644d1fff76bcbd9ac42efb5dfca4458c44cecdd321afe56fe/etoolkit-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c8d94a6101886257bc6239cd4385fcb2860c4f64ae3a50a26c55154f4999571",
          "md5": "02ce8c0f025f15c684631976a933a104",
          "sha256": "0a9308bdeddee64840dbbaa0fb3109c23b6578718da5f9bfac13c6c34b756584"
        },
        "downloads": -1,
        "filename": "etoolkit-1.2.0.tar.gz",
        "has_sig": true,
        "md5_digest": "02ce8c0f025f15c684631976a933a104",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 38641,
        "upload_time": "2022-04-23T17:03:45",
        "upload_time_iso_8601": "2022-04-23T17:03:45.700667Z",
        "url": "https://files.pythonhosted.org/packages/2c/8d/94a6101886257bc6239cd4385fcb2860c4f64ae3a50a26c55154f4999571/etoolkit-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "956b8bfc5481e74644d1fff76bcbd9ac42efb5dfca4458c44cecdd321afe56fe",
        "md5": "56cf26d1d6cb3439f11d187a87a99ee3",
        "sha256": "13384146864172b8ee9c683df6f3ebe1fe239c70a6420d8f4e1eb63de89e8e3e"
      },
      "downloads": -1,
      "filename": "etoolkit-1.2.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "56cf26d1d6cb3439f11d187a87a99ee3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 37635,
      "upload_time": "2022-04-23T17:03:43",
      "upload_time_iso_8601": "2022-04-23T17:03:43.691506Z",
      "url": "https://files.pythonhosted.org/packages/95/6b/8bfc5481e74644d1fff76bcbd9ac42efb5dfca4458c44cecdd321afe56fe/etoolkit-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c8d94a6101886257bc6239cd4385fcb2860c4f64ae3a50a26c55154f4999571",
        "md5": "02ce8c0f025f15c684631976a933a104",
        "sha256": "0a9308bdeddee64840dbbaa0fb3109c23b6578718da5f9bfac13c6c34b756584"
      },
      "downloads": -1,
      "filename": "etoolkit-1.2.0.tar.gz",
      "has_sig": true,
      "md5_digest": "02ce8c0f025f15c684631976a933a104",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 38641,
      "upload_time": "2022-04-23T17:03:45",
      "upload_time_iso_8601": "2022-04-23T17:03:45.700667Z",
      "url": "https://files.pythonhosted.org/packages/2c/8d/94a6101886257bc6239cd4385fcb2860c4f64ae3a50a26c55154f4999571/etoolkit-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}