{
  "info": {
    "author": "Matt Clarke",
    "author_email": "matt@practicaldatascience.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# GAPandas4\nGAPandas4 is a Python package for querying the Google Analytics Data API for GA4 and displaying the results in a Pandas dataframe. It is the successor to the [GAPandas](https://practicaldatascience.co.uk/data-science/how-to-access-google-analytics-data-in-pandas-using-gapandas) package, which did the same thing for GA3 or Universal Analytics. GAPandas4 is a wrapper around the official Google Analytics Data API package and simplifies imports and queries, requiring far less code. \n\n### Before you start\nIn order to use GAPandas4 you will first need to [create a Google Service Account](https://practicaldatascience.co.uk/data-engineering/how-to-create-a-google-service-account-client-secrets-json-key) with access to the Google Analytics Data API and export a client secrets JSON keyfile to use for authentication. You'll also need to add the service account email address as a user on the Google Analytics 4 property you wish to access, and you'll need to note the property ID to use in your queries.  \n\n### Installation\nAs this is currently in alpha, there's currently no Pip package, however, you can install the code into your Python environment directly from GitHub using the command below. It will run fine in a Jupyter notebook, a Python IDE, or a Python script. \n\n```commandline\npip3 install git+https://github.com/practical-data-science/gapandas4.git\n```\n\n### Usage\nGAPandas4 has been written to allow you to use as little code as possible. Unlike the previous version of GAPandas for Universal Analytics, which used a payload based on a Python dictionary, GAPandas4 now uses a Protobuf (Protocol Buffer) payload as used in the API itself. \n\n### Report\nThe `query()` function is used to send a protobug API payload to the API. The function supports various report types \nvia the `report_type` argument. Standard reports are handled using `report_type=\"report\"`, but this is also the \ndefault. Data are returned as a Pandas dataframe. \n\n```python\nimport gapandas4 as gp\n\nservice_account = 'client_secrets.json'\nproperty_id = 'xxxxxxxxx'\n\nreport_request = gp.RunReportRequest(\n    property=f\"properties/{property_id}\",\n    dimensions=[\n        gp.Dimension(name=\"country\"),\n        gp.Dimension(name=\"city\")\n    ],\n    metrics=[\n        gp.Metric(name=\"activeUsers\")\n    ],\n    date_ranges=[gp.DateRange(start_date=\"2022-06-01\", end_date=\"2022-06-01\")],\n)\n\ndf = gp.query(service_account, report_request, report_type=\"report\")\nprint(df.head())\n```\n\n### Batch report\nIf you construct a protobuf payload using `BatchRunReportsRequest()` you can pass up to five requests at once. These \nare returned as a list of Pandas dataframes, so will need to access them using their index. \n\n```python\nimport gapandas4 as gp\n\nservice_account = 'client_secrets.json'\nproperty_id = 'xxxxxxxxx'\n\n\nbatch_report_request = gp.BatchRunReportsRequest(\n    property=f\"properties/{property_id}\",\n    requests=[\n        gp.RunReportRequest(\n            dimensions=[\n                gp.Dimension(name=\"country\"),\n                gp.Dimension(name=\"city\")\n            ],\n            metrics=[\n                gp.Metric(name=\"activeUsers\")\n            ],\n            date_ranges=[gp.DateRange(start_date=\"2022-06-01\", end_date=\"2022-06-01\")]\n        ),\n        gp.RunReportRequest(\n            dimensions=[\n                gp.Dimension(name=\"country\"),\n                gp.Dimension(name=\"city\")\n            ],\n            metrics=[\n                gp.Metric(name=\"activeUsers\")\n            ],\n            date_ranges=[gp.DateRange(start_date=\"2022-06-02\", end_date=\"2022-06-02\")]\n        )\n    ]\n)\n\ndf = gp.query(service_account, batch_report_request, report_type=\"batch_report\")\nprint(df[0].head())\nprint(df[1].head())\n```\n\n### Pivot report\nConstructing a report using `RunPivotReportRequest()` will return pivoted data in a single Pandas dataframe. \n\n```python\nimport gapandas4 as gp\n\nservice_account = 'client_secrets.json'\nproperty_id = 'xxxxxxxxx'\n\npivot_request = gp.RunPivotReportRequest(\n    property=f\"properties/{property_id}\",\n    dimensions=[gp.Dimension(name=\"country\"),\n                gp.Dimension(name=\"browser\")],\n    metrics=[gp.Metric(name=\"sessions\")],\n    date_ranges=[gp.DateRange(start_date=\"2022-05-30\", end_date=\"today\")],\n    pivots=[\n        gp.Pivot(\n            field_names=[\"country\"],\n            limit=5,\n            order_bys=[\n                gp.OrderBy(\n                    dimension=gp.OrderBy.DimensionOrderBy(dimension_name=\"country\")\n                )\n            ],\n        ),\n        gp.Pivot(\n            field_names=[\"browser\"],\n            offset=0,\n            limit=5,\n            order_bys=[\n                gp.OrderBy(\n                    metric=gp.OrderBy.MetricOrderBy(metric_name=\"sessions\"), desc=True\n                )\n            ],\n        ),\n    ],\n)\n\ndf = gp.query(service_account, pivot_request, report_type=\"pivot\")\nprint(df.head())\n```\n\n### Batch pivot report\nConstructing a payload using `BatchRunPivotReportsRequest()` will allow you to run up to five pivot reports. These \nare returned as a list of Pandas dataframes. \n\n```python\nimport gapandas4 as gp\n\nservice_account = 'client_secrets.json'\nproperty_id = 'xxxxxxxxx'\n\nbatch_pivot_request = gp.BatchRunPivotReportsRequest(\n    property=f\"properties/{property_id}\",\n    requests=[\n        gp.RunPivotReportRequest(\n            dimensions=[gp.Dimension(name=\"country\"),\n                        gp.Dimension(name=\"browser\")],\n                metrics=[gp.Metric(name=\"sessions\")],\n                date_ranges=[gp.DateRange(start_date=\"2022-05-30\", end_date=\"today\")],\n                pivots=[\n                    gp.Pivot(\n                        field_names=[\"country\"],\n                        limit=5,\n                        order_bys=[\n                            gp.OrderBy(\n                                dimension=gp.OrderBy.DimensionOrderBy(dimension_name=\"country\")\n                            )\n                        ],\n                    ),\n                    gp.Pivot(\n                        field_names=[\"browser\"],\n                        offset=0,\n                        limit=5,\n                        order_bys=[\n                            gp.OrderBy(\n                                metric=gp.OrderBy.MetricOrderBy(metric_name=\"sessions\"), desc=True\n                            )\n                        ],\n                    ),\n                ],\n        ),\n        gp.RunPivotReportRequest(\n            dimensions=[gp.Dimension(name=\"country\"),\n                        gp.Dimension(name=\"browser\")],\n                metrics=[gp.Metric(name=\"sessions\")],\n                date_ranges=[gp.DateRange(start_date=\"2022-05-30\", end_date=\"today\")],\n                pivots=[\n                    gp.Pivot(\n                        field_names=[\"country\"],\n                        limit=5,\n                        order_bys=[\n                            gp.OrderBy(\n                                dimension=gp.OrderBy.DimensionOrderBy(dimension_name=\"country\")\n                            )\n                        ],\n                    ),\n                    gp.Pivot(\n                        field_names=[\"browser\"],\n                        offset=0,\n                        limit=5,\n                        order_bys=[\n                            gp.OrderBy(\n                                metric=gp.OrderBy.MetricOrderBy(metric_name=\"sessions\"), desc=True\n                            )\n                        ],\n                    ),\n                ],\n        )\n    ]\n)\n\ndf = gp.query(service_account, batch_pivot_request, report_type=\"batch_pivot\")\nprint(df[0].head())\nprint(df[1].head())\n\n```\n\n#### Metadata\nThe `get_metadata()` function will return all metadata on dimensions and metrics within the Google Analytics 4 property. \n\n```python\nmetadata = gp.get_metadata(service_account, property_id)\nprint(metadata)\n```\n\n### Current features\n- Support for all current API functionality including `RunReportRequest`, `BatchRunReportsRequest`,\n  `RunPivotReportRequest`,  `BatchRunPivotReportsRequest`, `RunRealtimeReportRequest`, and `GetMetadataRequest`. \n- Returns data in a Pandas dataframe, or a list of Pandas dataframes. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/practicaldatascience/gapandas4/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/practicaldatascience/gapandas4",
    "keywords": "python,google analytics,ga,pandas,universal analytics,gapandas,ga4",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gapandas4",
    "package_url": "https://pypi.org/project/gapandas4/",
    "platform": null,
    "project_url": "https://pypi.org/project/gapandas4/",
    "project_urls": {
      "Download": "https://github.com/practicaldatascience/gapandas4/archive/master.zip",
      "Homepage": "https://github.com/practicaldatascience/gapandas4"
    },
    "release_url": "https://pypi.org/project/gapandas4/0.3/",
    "requires_dist": [
      "google-analytics-data",
      "pandas"
    ],
    "requires_python": "",
    "summary": "GAPandas4 is a Python package for accessing the Google Analytics Data API for GA4 using Pandas",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14284880,
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b05091f78b3a16bdac6dd10c87705aed768a658a3ef14b2fafaedb0218902cf",
          "md5": "7ccf23df15d22aef836b917878f9c6ab",
          "sha256": "d5e3be7c1756c47b5d13c931be1411ff9fb8b6fc0ea5c174d89baafee4676572"
        },
        "downloads": -1,
        "filename": "gapandas4-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ccf23df15d22aef836b917878f9c6ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6064,
        "upload_time": "2022-06-29T13:31:25",
        "upload_time_iso_8601": "2022-06-29T13:31:25.073870Z",
        "url": "https://files.pythonhosted.org/packages/0b/05/091f78b3a16bdac6dd10c87705aed768a658a3ef14b2fafaedb0218902cf/gapandas4-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e55c8e6596e1dfed075420f1f3330f82b89d396b90333e1ccca4d2837c30897c",
          "md5": "bbed7c9337dec16ea545bda7cbdb63a2",
          "sha256": "3916dd8671f79f50b1a4b30ae7d1a61af9eb4cc2f793fd9ee8b26dd02276c0f6"
        },
        "downloads": -1,
        "filename": "gapandas4-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bbed7c9337dec16ea545bda7cbdb63a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6788,
        "upload_time": "2022-06-29T13:31:26",
        "upload_time_iso_8601": "2022-06-29T13:31:26.654457Z",
        "url": "https://files.pythonhosted.org/packages/e5/5c/8e6596e1dfed075420f1f3330f82b89d396b90333e1ccca4d2837c30897c/gapandas4-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b05091f78b3a16bdac6dd10c87705aed768a658a3ef14b2fafaedb0218902cf",
        "md5": "7ccf23df15d22aef836b917878f9c6ab",
        "sha256": "d5e3be7c1756c47b5d13c931be1411ff9fb8b6fc0ea5c174d89baafee4676572"
      },
      "downloads": -1,
      "filename": "gapandas4-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7ccf23df15d22aef836b917878f9c6ab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6064,
      "upload_time": "2022-06-29T13:31:25",
      "upload_time_iso_8601": "2022-06-29T13:31:25.073870Z",
      "url": "https://files.pythonhosted.org/packages/0b/05/091f78b3a16bdac6dd10c87705aed768a658a3ef14b2fafaedb0218902cf/gapandas4-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e55c8e6596e1dfed075420f1f3330f82b89d396b90333e1ccca4d2837c30897c",
        "md5": "bbed7c9337dec16ea545bda7cbdb63a2",
        "sha256": "3916dd8671f79f50b1a4b30ae7d1a61af9eb4cc2f793fd9ee8b26dd02276c0f6"
      },
      "downloads": -1,
      "filename": "gapandas4-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "bbed7c9337dec16ea545bda7cbdb63a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6788,
      "upload_time": "2022-06-29T13:31:26",
      "upload_time_iso_8601": "2022-06-29T13:31:26.654457Z",
      "url": "https://files.pythonhosted.org/packages/e5/5c/8e6596e1dfed075420f1f3330f82b89d396b90333e1ccca4d2837c30897c/gapandas4-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}