{
  "info": {
    "author": "David Finn",
    "author_email": "dfinn@splunk.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# phantom-dev\n\nUtilities for simplifying the development of Phantom apps\n\n## Author\n\nDavid Finn: dfinn@splunk.com\n\n## Requirements\n\n* Splunk>Phantom\n* Python 3.6 or higher\n\n## Features\n\n* Commands for rapid creation, packaging, and deployment of Phantom apps\n* Streamlined Python interface for action definition\n* Automatic bundling of dependencies using standard pip requirements files\n* Pytest integration with automatic mocking and sys path management for local\nunit testing\n* Debugging remote execution against local source files over a secure SSH\ntunnel\n* Remote app log monitoring\n* Asynchronous action handler support\n* Dedicated log files for connector logging output\n* Cross-platform client\n* Support for apps not created with `phantom-dev`\n* Comprehensive Phantom API mocking with type-hinting\n* Models for Phantom data types, including `Containers` and `Artifacts`\n\n\n## Installation\n\n```sh\npip install phantom-dev\n```\n\n## Description\n\n`phantom-dev` is a command-line utility for creating, building, and deploying\nPhantom apps.\n\nApp packages are built from project directories containing a YAML metadata file\nand a connector implemented in Python.\nAny other files in the project directory will be packaged and included with\nthe app.\n\n### App Metadata\n\nThe `metadata.yaml` file in the project directory will be used to generate the\napp JSON expected by the Phantom platform.\nMinor alterations to the JSON structure have been made to assist with\nreadability and maintainability;\nrelated keys have been grouped under a common prefix key\n(e.g. JSON `project-*` keys are defined under the `project` object in the YAML)\nand lists of uniquely-identifiable objects have been converted to objects\n(e.g. JSON `actions` is now a mapping of action names to action data, rather\nthan a list of action objects with unique and potentially conflicting names).\n\nFor information on the generated app metadata, see the official Phantom\ndocumentation.\n\n### Connector Implementation\n\nThe `phantom_dev.action_handler` module greatly simplifies the implementation\nof a `phantom.base_connector.BaseConnector` subclass, which is the basis for\nPhantom app development.\n\nAction handler methods defined using the \n`phantom_dev.action_handler.ActionHandler` decorator will be used to\ndynamically infer action metadata unless overridden in the metadata file.\nAction names, parameter names, and parameter types can all be inferred from\nthe implementation assuming parameters are type-annotated in the code.\n\nThe `phantom_dev.action_handler` module will be automatically embedded in the\n`dependencies` directory when the app is built, allowing the developer to\nmake full use of the module without being concerned with managing it as a\ndependency.\n\nEdge cases and use of more specialised `BaseConnector` methods should be dealt\nwith as normal, in accordance with the official Phantom documentation.\n\n### App Versioning\n\nUnless a version is explicitly specified in the app metadata,\n[`roboversion`](https://pypi.org/project/roboversion/) will be used to\nautomatically detect the project version from git repository state.\nTo set the version, tag the current commit with a version label\n(e.g. `v1.2.3`).\n\nIf the current commit doesn't have a version label, `roboversion` will create\na unique development version using the most recent version tag.\n\n### Compatibility with Apps Not Created with `phantom-dev`\n\nBecause `phantom-dev` relies on specific library features to infer action\nmetadata from code implementations, metadata inference will **not** work with\na connector that has been implemented without `phantom-dev`.\nFull specification of app metadata must therefore be provided in either\n`metadata.yaml` or in the old-style `.json` file.\n\nIf a `.json` file is used instead of `metadata.yaml`, `phantom-dev` will\n**not** autogenerate a new `.json` metadata file.\nCertain packaging features, such as autopopulation of dependency metadata,\nwill therefore be disabled.\n\nFinally, the `debug` command will not work unless the app is configured as a\n`debugpy` listener when executed as `__main__`.\nWhile `phantom-dev` apps implement this by default, other apps will have to\nimplement this behaviour or forgo the use of `debug`.\n\nAside from these limitations, `phantom-dev` should work normally with\nany Phantom app once extracted into a project directory.\n\n## Quickstart\n\nRunning `phantom-dev create` will prompt the user for the set of details\nrequired to define a Phantom app.\n\n```sh\n$ phantom-dev create \"My Special App\"\nProduct Vendor: Special Vendor\nProduct Name: Special Product\nDescription: My special little app\nPublisher: David Finn\nLicense: Special license\n```\n\nA new project directory will be created and populated with a `metadata.yaml`\nand a `connector.py`.\nThe metadata YAML will contain the details provided by the user, and the\nconnector module will define an example connector implementation.\nThe metadata will also be populated with action information required by the\nexample connector implementation.\n\n\n### Configuring IDE Autocompletion\n\nTo enable your IDE to resolve Phantom module methods, configure your\nIDE to set its `PYTHONPATH` environment variable to include the location of\n`phantom_dev.dummy`.\n\nThe dummy file path can be found by running `phantom-dev --dummy_path`.\nThe path will typically resemble\n`<PYTHON_ENV>/lib/python<VERSION>/site-packages/phantom_dev/dummy`,\nwhere `PYTHON_ENV` is your python environment and `<VERSION>` is your Python\nversion.\n\n#### Example: VSCode\n\nFind the path to the dummy module:\n```\n$ phantom-dev --dummy_path\n/home/USER/my_app/.venv/lib/python3.8/site-packages/phantom_dev/dummy\n```\n\nTo add this to the PYTHONPATH for VSCode, place the following entry in the\n`.env` file in the workspace directory (create the file if it doesn't exist):\n\n```\nPYTHONPATH=/home/USER/my_app/.venv/lib/python3.8/site-packages/phantom_dev/dummy\n```\n\n\n### Extending the App\n\nThe following defines the implementation of a new action called \"echo message\":\n\n```python\nfrom phantom_dev.action_handler import ActionHandler, SmartConnector\n...\nclass Connector(SmartConnector, main=True):\n\t...\n\t@ActionHandler\n\tdef echo_message(self, message: str):\n\t\t\"\"\"\n\t\tEcho a message\n\n\t\t:param message: The message to be echoed\n\t\t\"\"\"\n\t\tyield {'response': message}\n\t...\n\n\t@echo_message.summary\n\tdef summarise_echo(self, results):\n\t\tresult, = results\n\t\treturn {'response': result['response']}\n...\n```\n\nIf possible, the action description will be inferred from the method docstring-\nin this case, \"Echo a message\".\nSimilarly, parameter descriptions will also be inferred if specified in the\ndocstring with appropriate docstring syntax (currently, Sphinx syntax is\nconfirmed to work).\nIn this case, the description for the paramter `message` will be \"The message\nto be echoed\".\n\nThe action summary data for the `echo message` action is created by decorating\nthe summary method with `@echo_message.summary`.\nAction summary methods take the action results as an iterable, and create\nthe appropriate summary data.\n\nThanks to `SmartConnector`, all methods of the `BaseConnector` class are\navailable for use in the action handler logic implementation.\n\nAlthough the app will successfully install and run given the above metadata,\nit's still missing output fields and `contains` information.\nUnless specfied in `metadata.yaml`, `phantom-dev` (and therefore Phantom) has\nno way of knowing that the output data should contain a `response` field\nwith a `data_type` of `string`.\nIf we want to add `contains` information, such as setting a `contains`\nvalue of `['text']` for the message and response, we also need to specify\nthese somewhere.\n\nThese *can* be specified as normal using `metadata.yaml`, but this can also\nbe done directly using appropriate `ActionHandler` parameters and methods:\n\n```python\nfrom phantom_dev.action_handler import ActionHandler, contains, SmartConnector\n...\n\n@contains('text')\nclass Text(str):\n\t\"\"\"A string-based type which contains `['text']`\"\"\"\n\n...\n\nclass Connector(SmartConnector, main=True):\n\t...\n\t@ActionHandler(action_type='generic', data_contains={'response': Text})\n\tdef echo_message(self, message: Text):\n\t\t\"\"\"\n\t\tEcho a message\n\n\t\t:param message: The message to be echoed\n\t\t\"\"\"\n\t\tyield {'response': message}\n\n\t@echo_message.summary_contains({'response': Text})\n\tdef summarise_echo(self, results):\n\t\tresult, = results\n\t\treturn {'response': result['response']}\n\t...\n...\n```\n\nSeveral things are happening here.\nFirst, a new type called `Text` inherits from `str` and is decorated with the\n`@contains` decorator, mapping it to a `contains` value of `['text']`.\nThis type is used instead of `str` to annotate the `message` parameter of the\naction, which allows `phantom-dev` to infer both the `data_type` and the\n`contains` value for the parameter.\n\nNext, the `data_contains` parameter is being used to instantiate the method\nconstructor, and a mapping of `'response'` to `Text` is being specified as the\nargument.\nThis allows `phantom-dev` to infer that each data result has a field named\n`'response'`, and that its `data_type` and `contains` information should\nbe inferred from the `Text` type the same way it was for the `message`\nparameter.\nNote that we can also set the action `type` metadata with use of another\ndecorator parameter, `action_type`.\n\nFinally, the same thing is being done with the `echo_message.summary_contains`\ndecorator (used instead of `summary`), though in this case it's the action\nsummary fields rather than the results data fields that are being described.\n\nUse of these decorators is preferred to `metadata.yaml` specification, as they\nkeep metadata definitions colocated with the data they describe.\nThey also encourage code reuse though the use of common `contains`-mapped\ntype definitions, shareable between both parameters and output fields.\n\n#### Parameters with specific allowed values\n\nTo define a set of allowed values for a parameter, define a subclass of `Enum`\nwith a concrete type that maps to a `data_type`, and assign those values to\nmembers of that class.\n\nSpecify this class as the parameter annotation to allow `phantom-dev` to infer\nthe `value_list` metadata for this parameter.\n\nFor example, for a `rule` string parameter with allowed values `'allow'` and\n`'block'`:\n\n```python\n@contains('rule')\nclass Rule(str, Enum):\n\tALLOW = 'allow'\n\tBLOCK = 'block'\n\n...\nclass Connector(SmartConnector, main=True):\n\t@ActionHandler(...)\n\tdef set_rule(self, rule: Rule, ...): ...\n```\n\n### Dependencies\n\nAny package specified in `requirements-whl.txt` in the app project directory\nwill be automatically downloaded as a wheel and packaged with the app.\n`requirements-whl.txt` should be a normal `pip` requirements file.\n\nFor example, if the app requires the `roboversion` package, a\n`requirements-whl.txt` could be created with the following content:\n\n```\nroboversion>=2\n\n```\n\nWhen the app is built, the `roboversion` wheel will be automatically downloaded\nand included in the package `wheels` directory, and the autogenerated app\nJSON will specify its location for Phantom installation.\n\nIf there isn't a compatible wheel for the Phantom platform,\n`requirements-sdist.txt` can be used instead of `requirements-whl.txt`.\nThis will download the package as a source distribution instead of as a wheel.\nUnlike `requirements-whl.txt`, subdependencies will not be automatically\ninstalled for packages in `requirements-sdist.txt`, as sdist installation is\nintended to be used as a backup for when a wheel is unavailable.\n\nFinally, `requirements-pypi.txt` can be used to specify dependencies that won't\nbe packaged with the app, but that will be downloaded and installed by the\nPhantom platform itself.\n\n\n### Testing\n\n`phantom-dev` can automatically manage `pytest` execution, including adding\nthe app directory to the Python path and mocking imports of the `phantom`\nmodule, using the `phantom-dev test` command:\n\n```sh\n$ phantom-dev test <app_directory> [<pytest arguments>...]\n```\n\nApps created using `phantom-dev create` will be initialised with a `tests`\ndirectory containing a basic example of a `pytest` script.\n\nIf working from the app directory, `pytest` will automatically locate and run\nthe tests when it is invoked:\n\n```sh\n$ phantom-dev test\n```\n\n`pytest` also accepts a test directory location:\n\n```sh\n$ phantom-dev test my/special/test/location\n```\n\nIf working from a directory other than the app directory, the app directory can\nalso be specified:\n\n```sh\n$ phantom-dev test --app-directory my_special_app\n```\n\nPositional arguments will be passed to `pytest`, allowing us to specify test\nlocations as well:\n\n```sh\n$ phantom-dev test --app-directory my_special_app my/special/test/location\n```\n\nAs `phantom-dev test` is a wrapper around `pytest` invocation, it supports\nall of `pytest`'s features and behaviour.\nTo avoid capturing optional parameters before passing them to `pytest`, use the\npseudo-argument `--`:\n\n```sh\n$ phantom-dev test --app-directory my_special_app -- --show-locals my/special/test/location\n```\n\nRefer to the `pytest` documentation for details.\n\n\n### Deploying the App\n\nOnce the app is ready to install, assuming a Phantom server location of\n`phantom.example.com`:\n\n```sh\n$ phantom-dev push my_special_app/ root@phantom.example.com\n```\n\nNote: The Phantom server must be a known host; SSH to it first to confirm\ncredentials and connectivity.\n\nThe user will be prompted for the SSH password. Once supplied, the app will be\nautomatically packaged, sent to the Phantom server, and installed.\n\nThe SSH password can also be provided as part of the command:\n\n```sh\n$ phantom-dev push my_special_app/ root:PASSWORD@phantom.example.com\n```\n\nIf certificate authentication is used, an empty password can be also be\nspecified:\n\n```sh\n$ phantom-dev push my_special_app/ root:@phantom.example.com\n```\n\n### Remote Debugging\n\n`phantom-dev` streamlines the debugging process by automating the creation of\ntest action data and configuring a debugger connection through a secure SSH\ntunnel.\nTo open a remote debugging session:\n\n```sh\n$ phantom-dev debug my_special_app/ root:@phantom.example.com \"dummy action\"\n```\n\nThis command will:\n\n1. Generate a test action JSON file on the remote Phantom host\n2. Open an SSH tunnel to the remote Phantom host, forwarding the local\nport to the remote debugging port\n3. Wait for a debugger connection, then run the connector script with the\ncorrect Python path using the generated action JSON\n\nA local debugging client (e.g. Visual Studio Code) will then be able to connect\nand step through action execution.\n\n#### Visual Studio Code Debugging Configuration\n\nVisual Studio Code debugging is configured through entries in `launch.json`.\n\nTo use the SSH tunnel provided by the `phantom-dev debug` command, create an\nentry configured to connect to `localhost` on the specified debugger port:\n\n```json\n\t\t...\n\t\t{\n\t\t\t\"name\": \"Remote Debuggable Phantom App\",\n\t\t\t\"type\": \"python\",\n\t\t\t\"request\": \"attach\",\n\t\t\t\"connect\": {\n\t\t\t\t\"host\": \"localhost\",\n\t\t\t\t\"port\": 8869\n\t\t\t},\n\t\t\t\"pathMappings\": [\n\t\t\t\t{\n\t\t\t\t\t\"localRoot\": \"${workspaceFolder}/my_special_app/connector.py\",\n\t\t\t\t\t\"remoteRoot\": \"/opt/phantom/apps/myspecialapp_<SOME UUID>/connector.py\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\t...\n```\n\nThe `pathMappings` entry should be configured to map the connector module to\nits location in the installed app on the remote Phantom host.\nThe installed app folder will be under `<PHANTOM_HOME>/apps`.\n\nOnce configured, a debugging session can be run against the remote action\nexecution with full debugger functionality.\n\n### App Documentation\n\nAside from the action and parameter descriptions which can be inferred from\nconnector method docstrings, Phantom supports adding more detailed\ndocumentation to apps using a `readme.html` file.\n\nApps created with `phantom-dev` will be created with a default `readme.html`,\nwhich can be updated with arbitrary HTML content.\n\n\n### Other commands\n\nFor information on the other `phantom-dev` subcommands including `package` and\n`deploy`, run:\n\n```sh\n$ phantom-dev --help\n$ phantom-dev <subcommand> --help\n```\n\n## Details\n\nIn the above example, use of the `ActionHandler`\n(or`ActionHandler.data_contains`) decorator wraps the decorated `echo_message`\nmethod in the logic required for error handling and results reporting.\nThe `param` dictionary is automatically unpacked as keyword arguments to\nhandler method, allowing for quick and explicit argument validation and\nintuitive access to action parameters.\n`param` contains the parameters described in the app JSON.\n\nHandler methods such as `echo_message` are expected to return iterables of\nresults data.\nThe items from this iterable are added as data objects to the `ActionResult`.\nImplementing handler methods as generators is highly convenient, as this allows\ncustom logic to be run any time before or after data is yielded, but methods\ncan also be implemented as normal functions that return iterable objects.\n\nThe `HandlerMixin` superclass provided by `SmartConnector` automatically\ndelegates incoming actions to the correct method based on the action\nidentifier.\n\n`SmartConnector` also wraps the functionality of a the `main_connector`\ndecorator. `main_connector` simply calls the class's `main` method if\nthe class is defined in the `__main__` module, reproducing the testing\nfunctionality provided by autogenerated app wizard code.\n\n### Signaling Failure\n\nFailure is signaled through raising exceptions.\nIf the handler executes without raising an exception, the action is treated as\na success.\n\nTo implement an `echo fail` action that does the same thing as `echo message`,\nbut always fails after producing results:\n\n```python\n...\n@contains('text')\nclass Text(str):\n\t\"\"\"A string-based type which contains `['text']`\"\"\"\n\n...\n\nclass Connector(SmartConnector, main=True):\n\t...\n\t@ActionHandler(action_type='generic', data_contains={'response': Text})\n\tdef echo_message(self, message: Text):\n\t\t\"\"\"\n\t\tEcho a message\n\n\t\t:param message: The message to be echoed\n\t\t\"\"\"\n\t\tyield {'response': message}\n\n\t@echo_message.summary_contains({'response': Text})\n\tdef summarise_echo(self, results):\n\t\tresult, = results\n\t\treturn {'response': result['response']}\n\t...\n\n\t@ActionHandler(action_type='generic', data_contains={'response': Text})\n\tdef echo_fail(self, **param):\n\t\t\"\"\"\n\t\tEcho the message as normal, then fail\n\t\t\"\"\"\n\t\t# Demonstration of re-packing param; this will be the same as the\n\t\t# original param dictionary, which we can then unpack for the call\n\t\t# to echo_message.\n\t\t# Unfortunately, this will require manual specification of more\n\t\t# parameter metadata.\n\t\tyield from self.echo_message(**param)\n\t\traise RuntimeError('Failed on purpose')\n\n\t# The same summary method can be decorated multiple times for different\n\t# handlers to duplicate functionality\n\t@echo_fail.summary_contains({'response': Text})\n\t@echo_message.summary_contains({'response': Text})\n\tdef summarise_echo(self, results):\n\t\tresult, = results\n\t\treturn {'response': result['response']}\n\n```\n\nIn the example, parameter packing with `**param` was used instead of describing\nand annotating the parameters for `echo fail`.\nThis is possible but not recommended, because now the user must manually\nspecify more parameter information in `metadata.yaml`:\n\n```yaml\n...\nactions:\n\t...\n\techo_fail:\n\t\tparameters:\n\t\t\tmessage:\n\t\t\t\tdata_type: string\n\t\t\t\tdescription: The message to be echoed\n\t\t\t\trequired: true\n\t\t\t\tcontains:\n\t\t\t\t\t- text\n\t...\n...\n```\n\n### Actions with no results\n\n`test connectivity` is an example of an action which produces no results.\nThe handler method needs only to return an empty iterable, which is easily\naccomplished by returning an empty collection rather than implementing a\ngenerator:\n\n```python\n...\n@contains('text')\nclass Text(str):\n\t\"\"\"A string-based type which contains `['text']`\"\"\"\n\n...\n\nclass Connector(SmartConnector, main=True):\n\t...\n\t@ActionHandler(action_type='generic', data_contains={'response': Text})\n\tdef echo_message(self, message: Text):\n\t\t\"\"\"\n\t\tEcho a message\n\n\t\t:param message: The message to be echoed\n\t\t\"\"\"\n\t\tyield {'response': message}\n\n\t@echo_message.summary_contains({'response': Text})\n\tdef summarise_echo(self, results):\n\t\tresult, = results\n\t\treturn {'response': result['response']}\n\t...\n\n\t@ActionHandler(action_type='generic', data_contains={'response': Text})\n\tdef echo_fail(self, **param):\n\t\t\"\"\"\n\t\tEcho the message as normal, then fail\n\t\t\"\"\"\n\t\t# Demonstration of re-packing param; this will be the same as the\n\t\t# original param dictionary, which we can then unpack for the call\n\t\t# to echo_message.\n\t\t# Unfortunately, this will require manual specification of more\n\t\t# parameter metadata.\n\t\tyield from self.echo_message(**param)\n\t\traise RuntimeError('Failed on purpose')\n\n\t# The same summary method can be decorated multiple times for different\n\t# handlers to duplicate functionality\n\t@echo_fail.summary_contains({'response': Text})\n\t@echo_message.summary_contains({'response': Text})\n\tdef summarise_echo(self, results):\n\t\tresult, = results\n\t\treturn {'response': result['response']}\n\n\t@ActionHandler(action_type='generic')\n\tdef test_connectivity(self):\n\t\t\"\"\"\n\t\tCheck `echo message` and `echo fail`\n\t\t\"\"\"\n\t\t# The test connectivity action is a special case that does not\n\t\t# receive a param dictionary at all, so there are no arguments to\n\t\t# unpack\n\t\ttest_value = 'SOME TEST MESSAGE'\n\t\tresults = []\n\t\ttry:\n\t\t\tfor result in self.echo_fail(test_value):\n\t\t\t\tresults.append(result)\n\t\texcept RuntimeError:\n\t\t\tpass\n\t\telse:\n\t\t\traise RuntimeError('echo fail failed to fail')\n\n\t\tmessage, = results\n\t\tif message != test_value:\n\t\t\traise ValueError('echo fail failed to echo')\n\n\t\treturn []\n\n```\n\nIt would also be possible to achieve this with a `return` statement before a\n`yield` statement in a generator, or by failing before any results are yielded.\n\n\n### Action Context\n\nThe hidden phantom action `context` parameter can be accessed as the `context`\nmember of the connector object during action execution.\nThis data contains entries for `artifact_id`, `guid`, and `parent_action_run`;\nsee 'Understanding Datapaths' in the offical phantom documentation for details.\n\n\n### Logging\n\nThe `logger` member of the connector object is a standard Python\n`logging.Logger` object that can be used in the normal way.\n\nAll log messages of `ERROR` and above will be logged to \n`<syslog>/phantom/spawn.log`.\n`<syslog>` will typically be `/var/log` on privileged installations and\n`<PHANTOM_HOME>/var/log` on unprivileged installations.\n\nIf the system is configured for `DEBUG` logging, all messages of `DEBUG`\nand above will also be logged.\nAdditionally, all log messages of level `INFO` and above will be reported\nusing `BaseConnector.save_progress` regardless of Phantom debug configuration.\n\nThe connector will also keep logfiles in the app's state directory containing\nlogging records created by calls to the connector's `logger`.\nThis allows convenient consumption of connector logging without having to\nfilter through the content of `spawn.log`.\nThe logfile can be found at\n`<PHANTOM_HOME>/local_data/app_states/<APP_ID>/logs/connector.log`.\n\n\n### Vault Files\n\nThe `get_vault_path` method can be used to retrieve a `pathlib.Path` object\nfrom a vault ID:\n\n```python\nvault_path = connector.get_vault_path('<VAULT_ID>')\nwith vault_path.open() as vault_file:\n\t...\n```\n\nThis is implemented to work on both the Phantom 4.10 and 4.8 Vault interfaces.\n\n\n### Persistent State\n\nThe `state` connector property can be used to access and save persistent state.\nThe property will automatically load the peristent state `dict` from the\nfilesystem on the first access, and save the current state to the filesystem at\nthe end of action handling if such access has been performed.\nThis property is intended to replace the variety of methods available on the\nbase connector for loading, accessing, and saving state data.\n\nMore sophisticated state management can be performed using the `open_state`\nmethod.\nProviding a subpath of the app's state directory to the method will allow\nIO to the specified file.\nIf no subpath is specified, the default state file containing the state dict\nwill be opened.\n\n\n### Asynchronous Actions\n\nScheduling actions to run simultaneously can be configured with the optional\n`lock` parameter given to the `ActionHandler` decorator.\n\nWithin a single action, asynchronous coroutine execution can be configured by\nimplementing the action handler as an `async` coroutine method.\n\n#### Asynchronous Action Scheduling\n\nBy default, actions are scheduled synchronously with regard to the asset\nrunning the action; i.e. only one action will be running on a given asset at\nat time.\n\nThis behaviour can be altered by specifying a value for `ActionHandler`'s\n`lock` parameter.\nIf set to `None`, the action will be scheduled asynchronously with regard to\nall other actions.\nIf given a `str` value, the action will be scheduled synchronously with regard\nto all other actions using the same `lock` value.\n\nA timeout (in seconds) for lock acquision can be set by specifying a value for\n`ActionHandler`'s `lock_timeout` parameter.\n\n##### Lock Data Paths\n\nAction parameter or configuration values can be specified as data paths for the\n`lock` value, by setting the value to `parameter.<name>` or\n`configuration.<name>` respectively.\nIf a datapath for a parameter or configuration value is specified, its value at\nthe time of action execution will be used as the lock value.\nThis allows configurable groups of actions which will be scheduled\nsynchronously with regard to each other, but asynchronously with regard to all\nother actions.\n\n#### Asynchronous Coroutine Execution\n\nIf a handler method is reused by other handler methods, an asynchronous\nimplementation will allow the method to be run concurrently with other\ncoroutines.\nAdditionally, implementing a handler as an asynchronous coroutine function\nwill cause the connector to automatically handle the event loop, meaning that\n`await` statements can be made in the function implementation without\nmanual event loop configuration.\n\nConsider:\n\n```python\n@ActionHandler\ndef slow_action(self):\n\t\"\"\"\n\tTwo long IO operations\n\t\"\"\"\n\texpensive_call()\n\texpensive_call()\n\n@ActionHandler\ndef even_slower_action(self):\n\t\"\"\"\n\tTwo slow actions (4 long IO operations)\n\t\"\"\"\n\tself.slow_action()\n\tself.slow_action()\n```\n\nExecuting a single `even_slower_action` action will cause `expensive_call` to\nbe invoked 4 times in sequence.\n\nAssuming a significant portion of `expensive_call`'s execution time is waiting\nfor IO operations, an asynchronous implementation called `async_call` will\nallow other coroutines to run while it waits.\nAssuming access to `async_call`, we can refactor our actions using asynchronous\ncoroutine functions:\n\n```python\n@ActionHandler\nasync def efficient_action(self):\n\t\"\"\"\n\tTwo long IO operations run concurrently\n\t\"\"\"\n\tawait asyncio.gather(async_call(), async_call())\n\n@ActionHandler\nasync def even_more_efficient_action(self):\n\t\"\"\"\n\tTwo efficient actions run concurrently\n\t(4 long IO operations run concurrently)\n\t\"\"\"\n\tawait asyncio.gather(self.efficient_action(), self.efficient_action())\n```\n\nUnder normal circumstances, `even_slower_action` will take almost 4 times as\nlong to run as `even_more_efficient_action` while producing the same results.\nThis efficiency will scale over the number of actions that can be run\nconcurrently.\n\n\n### Data Ingestion\n\nImplementing an `on_poll` `ActionHandler` method allows the app to ingest\ncontainers based on arbitrary logic according to a configured schedule.\n\nThe default connector includes a reference implementation for `on_poll`.\nThe following example outlines ingestion of a single container with a single\nartifact:\n\n```python\n...\n\t@ActionHandler(action_type='ingest', read_only=True)\n\tdef on_poll(\n\t\t\tself,\n\t\t\tstart_time: int,\n\t\t\tend_time: int,\n\t\t\tcontainer_count: int,\n\t\t\tartifact_count: int,\n\t\t\tcontainer_id: str = None,\n\t):\n\t\t\"\"\"\n\t\tCallback action for the on_poll ingest functionality.\n\n\t\t:param container_id: Container IDs to limit the ingestion to.\n\t\t:param start_time:\n\t\t\tStart of time range, in epoch time (milliseconds)\n\n\t\t\tIf not specified, the default is past 10 days\n\t\t:param end_time:\n\t\t\tEnd of time range, in epoch time (milliseconds)\n\n\t\t\tIf not specified, the default is now\"\n\t\t:param container_count:\n\t\t\tMaximum number of container records to query for.\n\t\t:param artifact_count: Maximum number of artifact records to query for.\n\t\t\"\"\"\n\t\tcontainer = Container.from_fields(name='example container', ...)\n\t\tcontainer.add_artifact(name='example artifact', ...)\n\t\treturn self.save_all_containers([container])\n...\n```\n\n### Rendering Output\n\nAction output rendering can be customised by adding a `render` section to the\naction entry in the `metadata.yaml`, which takes the same data as specified in\nthe official documentation.\nIf using a custom view, the `ActionHandler.custom_view` decorator can be used\nto automatically populate the `render` section of the action metadata.\n\n#### Custom Views\n\nAdding a custom view requires registering a custom view function and creating\na custom view HTML template.\n\nTo register a custom view function, the `ActionHandler.custom_view` decorator\ncan be used on the function.\nAlternatively, a custom view can be manually specified by adding a `render`\nsection to the action entry in the `metadata.yaml`.\n\nNormally, the return value of the function is a string that contains the path\nto the HTML template used to render the view.\nIf the decorator is used to register the function and the function doesn't\nreturn a value, the template location will be inferred to be\n`views/<function_name>.html`.\n\nRefer to the Phantom documentation for more information on using custom views.\n\n## App Logo\n\nThe app logo can be customised by including an icon file in the app directory\nwith the name `logo.<extension>`.\n`logo_light.<extension>` and `logo_dark.<extension>` can also be used to\ndifferentiate between light-mode and dark-mode logos.\nArbitrary filenames and paths can also be used; specify a path for `logo` in\nthe app metadata, or paths for `light` and `dark` under `logo` to configure\nthe respecitve themes.\n\n### Default Logo\n\n<div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/phantom6/phantom-dev",
    "keywords": "splunk,phantom",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "phantom-dev",
    "package_url": "https://pypi.org/project/phantom-dev/",
    "platform": "",
    "project_url": "https://pypi.org/project/phantom-dev/",
    "project_urls": {
      "Homepage": "https://gitlab.com/phantom6/phantom-dev"
    },
    "release_url": "https://pypi.org/project/phantom-dev/0.14.5/",
    "requires_dist": [
      "docstring-parser",
      "paramiko",
      "pytest",
      "pyyaml",
      "roboversion (>=2)",
      "sshtunnel (>=0.4.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Utilities to simplify Phantom app development",
    "version": "0.14.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12076273,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8258a94d0fe49c7abb804c467cc3e64c87b29eb759b29cf1c76b6e3e52305a6d",
          "md5": "e696720580520dd5a68bf367ec0512b2",
          "sha256": "a17eecf42d4b9a072ae0b2294a75e5e663601992052e9f7e713b4c7870981d28"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e696720580520dd5a68bf367ec0512b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18205,
        "upload_time": "2021-02-22T01:08:53",
        "upload_time_iso_8601": "2021-02-22T01:08:53.619581Z",
        "url": "https://files.pythonhosted.org/packages/82/58/a94d0fe49c7abb804c467cc3e64c87b29eb759b29cf1c76b6e3e52305a6d/phantom_dev-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5837bda807d80411977b4a873c18182ce7687e91c9871a03f9b1d186eb4e5f72",
          "md5": "0f7906f99039c12853a1ed21c5514531",
          "sha256": "ff5b97534a95dd8b7897dca2a07982c56572e6dbbbb692d97cb20e2f154b042e"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f7906f99039c12853a1ed21c5514531",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18199,
        "upload_time": "2021-02-22T01:26:14",
        "upload_time_iso_8601": "2021-02-22T01:26:14.582401Z",
        "url": "https://files.pythonhosted.org/packages/58/37/bda807d80411977b4a873c18182ce7687e91c9871a03f9b1d186eb4e5f72/phantom_dev-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38b9d87ac5fc592028e61669366a0947e46b675970fc69f416a03341b3aa532b",
          "md5": "5975315a3203c1a4a28900283e57e660",
          "sha256": "d99e8ccfb5ae6c2fee5eb3734d08b92b45fdf38e27764b0e0fb16a83b0e21247"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5975315a3203c1a4a28900283e57e660",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18491,
        "upload_time": "2021-02-22T02:41:06",
        "upload_time_iso_8601": "2021-02-22T02:41:06.667766Z",
        "url": "https://files.pythonhosted.org/packages/38/b9/d87ac5fc592028e61669366a0947e46b675970fc69f416a03341b3aa532b/phantom_dev-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bd6eeff62eb52af6076a030a30e271be784709406b1a65d4db3e4fe605135df",
          "md5": "6e7261c4bbf511b94b5891420983f9c4",
          "sha256": "9bcb3098a0baad6fc14cbfac5352bd8dffd81c6c62795ba2c70aad70a2838d96"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e7261c4bbf511b94b5891420983f9c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35232,
        "upload_time": "2021-07-07T08:07:19",
        "upload_time_iso_8601": "2021-07-07T08:07:19.026034Z",
        "url": "https://files.pythonhosted.org/packages/9b/d6/eeff62eb52af6076a030a30e271be784709406b1a65d4db3e4fe605135df/phantom_dev-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9b6f104e68786a8b3b41c4089513a56273fd613cca2af5ce8b6214a5cee1d00",
          "md5": "38f99a039ef8980cd5bb5f370621d1fc",
          "sha256": "fb6e68f3517c41a94ca8d77d0a17d0b64d91ef0d451182fa0d7a0b283d96f3ac"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.10.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38f99a039ef8980cd5bb5f370621d1fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35233,
        "upload_time": "2021-07-30T02:20:55",
        "upload_time_iso_8601": "2021-07-30T02:20:55.905965Z",
        "url": "https://files.pythonhosted.org/packages/e9/b6/f104e68786a8b3b41c4089513a56273fd613cca2af5ce8b6214a5cee1d00/phantom_dev-0.10.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8126610e8f1650a3920a71d70529712411f2bd2468714f380845b0b19e1f0c2",
          "md5": "edb5841f64c1bf727d571381c3b0b82f",
          "sha256": "c459cd835d1e29b042a2e1ed15f25a45d1bbd183b21e59cd5ae35b06a345dc82"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.10.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edb5841f64c1bf727d571381c3b0b82f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35632,
        "upload_time": "2021-08-03T03:13:46",
        "upload_time_iso_8601": "2021-08-03T03:13:46.888647Z",
        "url": "https://files.pythonhosted.org/packages/f8/12/6610e8f1650a3920a71d70529712411f2bd2468714f380845b0b19e1f0c2/phantom_dev-0.10.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2f0288641295f2ed59fc9de9af33b0ecf0dbcd21339ba27c8ba33566031944d",
          "md5": "98377f852fe084008f9981ebdda8e24f",
          "sha256": "e777398434997ee9a790b690eb52948310beaeb397518480459e8d555cfa34b3"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.10.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98377f852fe084008f9981ebdda8e24f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35733,
        "upload_time": "2021-08-04T00:31:14",
        "upload_time_iso_8601": "2021-08-04T00:31:14.835260Z",
        "url": "https://files.pythonhosted.org/packages/d2/f0/288641295f2ed59fc9de9af33b0ecf0dbcd21339ba27c8ba33566031944d/phantom_dev-0.10.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d607557490b594f4ea34e2a69622852daf322986013e1b1f61e6700ce05d6983",
          "md5": "a3f100a434fc43c3a1db0a192da4e039",
          "sha256": "b47b7e86e0a1428c5fb3cbb46115a17e5f83502b8d6f2b305485306e29c1908d"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.10.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3f100a434fc43c3a1db0a192da4e039",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35943,
        "upload_time": "2021-08-04T06:37:46",
        "upload_time_iso_8601": "2021-08-04T06:37:46.038838Z",
        "url": "https://files.pythonhosted.org/packages/d6/07/557490b594f4ea34e2a69622852daf322986013e1b1f61e6700ce05d6983/phantom_dev-0.10.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dfbd646a5a43d74d2a8b3c474ff7181e4bbb536144fbaff0bb85dca4daf4c91",
          "md5": "86a4a9b92f456c4358ba229ce9e23c6b",
          "sha256": "35a0e5897398415e69571e394f545cc4aebd13225cfda0cbafd171b3a01784b0"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86a4a9b92f456c4358ba229ce9e23c6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43796,
        "upload_time": "2021-08-05T08:09:36",
        "upload_time_iso_8601": "2021-08-05T08:09:36.884920Z",
        "url": "https://files.pythonhosted.org/packages/3d/fb/d646a5a43d74d2a8b3c474ff7181e4bbb536144fbaff0bb85dca4daf4c91/phantom_dev-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deef26e510b70450148318a03dfadfa4f4c0767ad0af3644b829f8d20569b9d7",
          "md5": "40675d5708cccbbf2f9b04521fd639c7",
          "sha256": "1585e663f17ef89ee80d11fd75383f729dbe38fbada1a326ef72394f4d185b3a"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.11.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40675d5708cccbbf2f9b04521fd639c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43801,
        "upload_time": "2021-08-05T08:48:09",
        "upload_time_iso_8601": "2021-08-05T08:48:09.561770Z",
        "url": "https://files.pythonhosted.org/packages/de/ef/26e510b70450148318a03dfadfa4f4c0767ad0af3644b829f8d20569b9d7/phantom_dev-0.11.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11c0650ad4b620d186574011a96a06f43648d8177cc876e58fba02e9a5b08e8f",
          "md5": "562190757184cb13bc45889be016f3a2",
          "sha256": "cf29bc2f4ca32394d3efb68918dd68c396221c9fd28a4cf3c005e6215d5f98ab"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "562190757184cb13bc45889be016f3a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 46585,
        "upload_time": "2021-08-09T14:31:40",
        "upload_time_iso_8601": "2021-08-09T14:31:40.353928Z",
        "url": "https://files.pythonhosted.org/packages/11/c0/650ad4b620d186574011a96a06f43648d8177cc876e58fba02e9a5b08e8f/phantom_dev-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "575e6931c23757cc23bf43ff300dcd2eda5ce7220451daec86719dc650c4d2b3",
          "md5": "4f1e84379050825e5e0a718f2518217e",
          "sha256": "0e492d73c3dc18d8016f81618286140179d27fd8b73b09bfcdd22cbf8d7a70c6"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.13.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f1e84379050825e5e0a718f2518217e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51931,
        "upload_time": "2021-08-12T11:30:12",
        "upload_time_iso_8601": "2021-08-12T11:30:12.120176Z",
        "url": "https://files.pythonhosted.org/packages/57/5e/6931c23757cc23bf43ff300dcd2eda5ce7220451daec86719dc650c4d2b3/phantom_dev-0.13.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ec0d92a8c7b4ea1bc40c8ca512a0313ba8bea0d36e4884e9fd26594f6ad2d3c",
          "md5": "da9cfc37bcd8021899679e23458dc698",
          "sha256": "09f5abea3b9320b117d894ee90589bb40b59f0fee5e6ebb469dd5bdaae3774ae"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.13.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da9cfc37bcd8021899679e23458dc698",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52010,
        "upload_time": "2021-08-13T10:54:35",
        "upload_time_iso_8601": "2021-08-13T10:54:35.764245Z",
        "url": "https://files.pythonhosted.org/packages/9e/c0/d92a8c7b4ea1bc40c8ca512a0313ba8bea0d36e4884e9fd26594f6ad2d3c/phantom_dev-0.13.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "926fedec47edf813b6d422c5165eef395f034d052ca4619a6d1eb6bf59d1dbcc",
          "md5": "a970afc617103ba25b7a9d52648f8d94",
          "sha256": "46101a04f3963a032504c2a0dec5c75d886282b324a5b900606e1f09f1b9b0c9"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.14.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a970afc617103ba25b7a9d52648f8d94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54565,
        "upload_time": "2021-08-25T02:51:01",
        "upload_time_iso_8601": "2021-08-25T02:51:01.657472Z",
        "url": "https://files.pythonhosted.org/packages/92/6f/edec47edf813b6d422c5165eef395f034d052ca4619a6d1eb6bf59d1dbcc/phantom_dev-0.14.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2979448cb723216519a5a14fb9eb49764de59908fb267c42c2e9050ad1abb907",
          "md5": "aa28dcfdb7c9df45de32993eb9f058aa",
          "sha256": "854924290fb55ee936bd83b75b2ce394100ab975afd3c645955ef8886e50ee9d"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.14.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa28dcfdb7c9df45de32993eb9f058aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54862,
        "upload_time": "2021-08-26T03:22:50",
        "upload_time_iso_8601": "2021-08-26T03:22:50.754898Z",
        "url": "https://files.pythonhosted.org/packages/29/79/448cb723216519a5a14fb9eb49764de59908fb267c42c2e9050ad1abb907/phantom_dev-0.14.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "547af88982a43fe3213e8a659df78058a9ed4d0585812149cd61aa0d4146dd78",
          "md5": "6d0c427deb7462ec3313448d7d1aea22",
          "sha256": "436284966fa08ca3cb0a4b197bc4adbd707e77725e2386f505c48dc933c73e53"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.14.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d0c427deb7462ec3313448d7d1aea22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54994,
        "upload_time": "2021-09-01T10:57:49",
        "upload_time_iso_8601": "2021-09-01T10:57:49.567229Z",
        "url": "https://files.pythonhosted.org/packages/54/7a/f88982a43fe3213e8a659df78058a9ed4d0585812149cd61aa0d4146dd78/phantom_dev-0.14.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73a4b8a92fdc0f03c6b1e8ffda1198cb95566fd1111768fa8ec3a38dda40be15",
          "md5": "476bb3fb6f93f3dd860f24e626eac8eb",
          "sha256": "e0b9b2d557c01cf4c34d4266f8d343ed8fca79b81669fe7d11361bad3bf17f6b"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.14.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "476bb3fb6f93f3dd860f24e626eac8eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 55361,
        "upload_time": "2021-09-28T01:20:33",
        "upload_time_iso_8601": "2021-09-28T01:20:33.000477Z",
        "url": "https://files.pythonhosted.org/packages/73/a4/b8a92fdc0f03c6b1e8ffda1198cb95566fd1111768fa8ec3a38dda40be15/phantom_dev-0.14.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f448ed66ba567dcbce72ad0a776df584666cc143edee489a3058ee834c64bf7",
          "md5": "6e0759255fa7793185eaab7f39cac77c",
          "sha256": "4cda89ebc7f4acf701a0a6c4347c1a314f6c28647c198d8538451271ae483c73"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.14.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e0759255fa7793185eaab7f39cac77c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 55437,
        "upload_time": "2021-11-09T00:32:31",
        "upload_time_iso_8601": "2021-11-09T00:32:31.322944Z",
        "url": "https://files.pythonhosted.org/packages/8f/44/8ed66ba567dcbce72ad0a776df584666cc143edee489a3058ee834c64bf7/phantom_dev-0.14.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd5867b58d736e921eff1527b058508a16eaee3846c995f57274051cf0700254",
          "md5": "114870223f97cc5e10bf07333745fe9b",
          "sha256": "b02030f477550f4ab69dcdbdd6ed7e0c6cd19cadb1a29e61bce4562d68c9ce8f"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.14.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "114870223f97cc5e10bf07333745fe9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 55604,
        "upload_time": "2021-11-20T05:26:37",
        "upload_time_iso_8601": "2021-11-20T05:26:37.890910Z",
        "url": "https://files.pythonhosted.org/packages/bd/58/67b58d736e921eff1527b058508a16eaee3846c995f57274051cf0700254/phantom_dev-0.14.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff9e95c817bcd3ac1a675ea22a70e6c6d0d2f1542bf26305ed19b74ab56b679f",
          "md5": "9808ec3ec58b3769750a2bfccc63fbf8",
          "sha256": "80e872c73645aa6618503f575f01b2bee97dbd857c8fceb4af1f196b27b1c14f"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9808ec3ec58b3769750a2bfccc63fbf8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19607,
        "upload_time": "2021-02-23T02:40:34",
        "upload_time_iso_8601": "2021-02-23T02:40:34.082779Z",
        "url": "https://files.pythonhosted.org/packages/ff/9e/95c817bcd3ac1a675ea22a70e6c6d0d2f1542bf26305ed19b74ab56b679f/phantom_dev-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7aac5ab3653921ba2d836e1adb872385cb51448e8bab4576b74c3f4b632f620d",
          "md5": "2f526200bdc095805f978ce6c53c2d2e",
          "sha256": "7f79516420649381a60c1d111eeaec8e8654c5a48416118271faa3a9ffb3ed4a"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f526200bdc095805f978ce6c53c2d2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19802,
        "upload_time": "2021-02-23T05:31:43",
        "upload_time_iso_8601": "2021-02-23T05:31:43.127464Z",
        "url": "https://files.pythonhosted.org/packages/7a/ac/5ab3653921ba2d836e1adb872385cb51448e8bab4576b74c3f4b632f620d/phantom_dev-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e30e02377b0f0a8a3ce8498fab1e00f06b028d7b712211498cd54655a6956abc",
          "md5": "22eb19d731d0390b8a82b6fb1ae2e127",
          "sha256": "bcdebd0b8ec582b0fd43d8e11e7f94e8a7cc1e1475b18f0b03f0096ef04d25b4"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22eb19d731d0390b8a82b6fb1ae2e127",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20972,
        "upload_time": "2021-03-01T09:44:43",
        "upload_time_iso_8601": "2021-03-01T09:44:43.539386Z",
        "url": "https://files.pythonhosted.org/packages/e3/0e/02377b0f0a8a3ce8498fab1e00f06b028d7b712211498cd54655a6956abc/phantom_dev-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95ec33fbb8fd58261f7dfdf4956ae7d030ba9f434d4b6d06640ba3f46e4eb6a1",
          "md5": "8f0dc5af1a391fc99e60e0ffa756015e",
          "sha256": "fb6d0d82762e285bd6cf6d3341ec4d9cfd691eb9c7e7a5ff3b2d04af1f1c225b"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f0dc5af1a391fc99e60e0ffa756015e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21700,
        "upload_time": "2021-03-02T02:32:24",
        "upload_time_iso_8601": "2021-03-02T02:32:24.790410Z",
        "url": "https://files.pythonhosted.org/packages/95/ec/33fbb8fd58261f7dfdf4956ae7d030ba9f434d4b6d06640ba3f46e4eb6a1/phantom_dev-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9825eef3dd96fc81b85794b0f1bae3f68ed8bbc453544a31600b5ef414650ff0",
          "md5": "3ac2b22675968d82bc9b289fd77bedba",
          "sha256": "889e6293abd6cbf848bd1748fc3956bf5d467fbb340affeba349f7fd4d3f26e7"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ac2b22675968d82bc9b289fd77bedba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22580,
        "upload_time": "2021-03-03T04:03:01",
        "upload_time_iso_8601": "2021-03-03T04:03:01.219887Z",
        "url": "https://files.pythonhosted.org/packages/98/25/eef3dd96fc81b85794b0f1bae3f68ed8bbc453544a31600b5ef414650ff0/phantom_dev-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a7027dc7d534d27f1a21f4203c0bcb32775dccf71a27d5d9aad04cdeceaa303",
          "md5": "9d796a693591c4deb8e498807f4d7068",
          "sha256": "ccb86a426444e56612a923020c310d21f0bd63af43b6d6041c6bc3eebe778acd"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d796a693591c4deb8e498807f4d7068",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24441,
        "upload_time": "2021-03-29T11:18:37",
        "upload_time_iso_8601": "2021-03-29T11:18:37.012818Z",
        "url": "https://files.pythonhosted.org/packages/4a/70/27dc7d534d27f1a21f4203c0bcb32775dccf71a27d5d9aad04cdeceaa303/phantom_dev-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29b80a38daa4b99ff8f73b1edaea5f65780d3455681edb9911f52d4ec1dc697f",
          "md5": "b442f86106a5566914e00c9bfb7600b0",
          "sha256": "2502909dccc762caf0fcc0a42f8921a27a153b678954a410c002bcf646b3375a"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b442f86106a5566914e00c9bfb7600b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26593,
        "upload_time": "2021-04-26T06:51:08",
        "upload_time_iso_8601": "2021-04-26T06:51:08.819511Z",
        "url": "https://files.pythonhosted.org/packages/29/b8/0a38daa4b99ff8f73b1edaea5f65780d3455681edb9911f52d4ec1dc697f/phantom_dev-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84eec00005647273529aa92a7d224a15e96bd668b3f37fc56c3ee2f8c276d9ea",
          "md5": "fdd59daee94b420beaeaa1386ca157eb",
          "sha256": "a8d1f470b4a4e70ec146784065a4fa72fbba094fc31454e5d6639332cfb2b165"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdd59daee94b420beaeaa1386ca157eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27669,
        "upload_time": "2021-05-04T03:55:05",
        "upload_time_iso_8601": "2021-05-04T03:55:05.730782Z",
        "url": "https://files.pythonhosted.org/packages/84/ee/c00005647273529aa92a7d224a15e96bd668b3f37fc56c3ee2f8c276d9ea/phantom_dev-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9020b82a7d07d153a0301e7f0e5e192b928434cc43eb8ae2ded8d431807ec856",
          "md5": "8bc18b0dc455e886f6385ec3506af4bf",
          "sha256": "7f6f0422699856995984833b29313564532bb8f56209e642b88c6ae45e6ed21a"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bc18b0dc455e886f6385ec3506af4bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28650,
        "upload_time": "2021-05-05T04:05:30",
        "upload_time_iso_8601": "2021-05-05T04:05:30.254780Z",
        "url": "https://files.pythonhosted.org/packages/90/20/b82a7d07d153a0301e7f0e5e192b928434cc43eb8ae2ded8d431807ec856/phantom_dev-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c57b200f4cae82c6bffe361cb80eba4af9ac278e751b7e0942fe87e7f7925b8",
          "md5": "3e88350178110676872d5fde21166c74",
          "sha256": "2e3e53eaae1168c04751dace47b409295bba4c9552e4f4d2bfd7b9b84b9570cb"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e88350178110676872d5fde21166c74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28750,
        "upload_time": "2021-05-05T05:23:19",
        "upload_time_iso_8601": "2021-05-05T05:23:19.985654Z",
        "url": "https://files.pythonhosted.org/packages/7c/57/b200f4cae82c6bffe361cb80eba4af9ac278e751b7e0942fe87e7f7925b8/phantom_dev-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6504d5bbf8314b67bfb934b910cd4c48c78b91c7ef3d08836a006a8fce8bb44d",
          "md5": "01ac6e1b2f47ae34c6ecf892fb2574d7",
          "sha256": "bd339dcd82123d60b380c4f10398a0bc9624571062141f400af531007aa6676f"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01ac6e1b2f47ae34c6ecf892fb2574d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30564,
        "upload_time": "2021-05-06T07:03:32",
        "upload_time_iso_8601": "2021-05-06T07:03:32.154498Z",
        "url": "https://files.pythonhosted.org/packages/65/04/d5bbf8314b67bfb934b910cd4c48c78b91c7ef3d08836a006a8fce8bb44d/phantom_dev-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6af683fafacb3f3c70cc4361be50fcc420e5aab67eb3a8cb49598ad9eb803326",
          "md5": "30d13ca97669da1ad0e7d2c5b1f98601",
          "sha256": "dadbd14090f821a60a2ba9bc55336ded2a2f068548313c149453c9bfc190faeb"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30d13ca97669da1ad0e7d2c5b1f98601",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30622,
        "upload_time": "2021-05-06T07:24:11",
        "upload_time_iso_8601": "2021-05-06T07:24:11.300368Z",
        "url": "https://files.pythonhosted.org/packages/6a/f6/83fafacb3f3c70cc4361be50fcc420e5aab67eb3a8cb49598ad9eb803326/phantom_dev-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43abf4e56c1e129617406c234576206df33c636cf6b6d6118c8844573bdd9674",
          "md5": "dbc17da71de948d5206c071cb120f60f",
          "sha256": "f4c8caa6213c0a8440ccd15e431b412b81034018691ab26abd210d3b6d5b7289"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbc17da71de948d5206c071cb120f60f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32238,
        "upload_time": "2021-05-11T23:57:55",
        "upload_time_iso_8601": "2021-05-11T23:57:55.449173Z",
        "url": "https://files.pythonhosted.org/packages/43/ab/f4e56c1e129617406c234576206df33c636cf6b6d6118c8844573bdd9674/phantom_dev-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c931f2840776290edfe822b59eec4ef46f6ac12c5c4bead8f9b9b49a1c37575",
          "md5": "48d5f75989120811524a7de8b54851ac",
          "sha256": "acf55b0b056aa2bc71ad3221c2ce10a2b6d508d4ffca44c367ce66ba48a5c70e"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.8.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48d5f75989120811524a7de8b54851ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 32237,
        "upload_time": "2021-05-12T01:51:12",
        "upload_time_iso_8601": "2021-05-12T01:51:12.441632Z",
        "url": "https://files.pythonhosted.org/packages/0c/93/1f2840776290edfe822b59eec4ef46f6ac12c5c4bead8f9b9b49a1c37575/phantom_dev-0.8.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e052948d0cee7b5e75d1e6f5d3fa17a8a769e85fbc05679030f08b9d4de8415",
          "md5": "de603549f2f0aa8fb9e626488b412f8f",
          "sha256": "9d945889a2595b65b41c6f9e7ca8d91642ad26141a205b0e3d96e7b071223d76"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.8.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de603549f2f0aa8fb9e626488b412f8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32513,
        "upload_time": "2021-05-17T05:30:06",
        "upload_time_iso_8601": "2021-05-17T05:30:06.900994Z",
        "url": "https://files.pythonhosted.org/packages/7e/05/2948d0cee7b5e75d1e6f5d3fa17a8a769e85fbc05679030f08b9d4de8415/phantom_dev-0.8.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e0e3e42c2184e70479a98ee8940b6ff27a586b2161c3711a06c4be20c2836ad",
          "md5": "392d3f3ee36c7eae5987bffd9356be40",
          "sha256": "a3cc2d6bebae71910907c6eadcc15ee9f5974fbb5be6d4c863e19f738e078728"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "392d3f3ee36c7eae5987bffd9356be40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32569,
        "upload_time": "2021-05-19T08:39:05",
        "upload_time_iso_8601": "2021-05-19T08:39:05.417104Z",
        "url": "https://files.pythonhosted.org/packages/1e/0e/3e42c2184e70479a98ee8940b6ff27a586b2161c3711a06c4be20c2836ad/phantom_dev-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe59522fda9914cde942ed742b21c76b530195d4c91376450e9227b10cfdc093",
          "md5": "8438da5138149e2bea303facecb78373",
          "sha256": "8f8d970e8e2e693306116fddd0b48cb5b3fddfa39952e3ce3273b083a39f2b8e"
        },
        "downloads": -1,
        "filename": "phantom_dev-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8438da5138149e2bea303facecb78373",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32931,
        "upload_time": "2021-05-28T02:40:40",
        "upload_time_iso_8601": "2021-05-28T02:40:40.089883Z",
        "url": "https://files.pythonhosted.org/packages/fe/59/522fda9914cde942ed742b21c76b530195d4c91376450e9227b10cfdc093/phantom_dev-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd5867b58d736e921eff1527b058508a16eaee3846c995f57274051cf0700254",
        "md5": "114870223f97cc5e10bf07333745fe9b",
        "sha256": "b02030f477550f4ab69dcdbdd6ed7e0c6cd19cadb1a29e61bce4562d68c9ce8f"
      },
      "downloads": -1,
      "filename": "phantom_dev-0.14.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "114870223f97cc5e10bf07333745fe9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 55604,
      "upload_time": "2021-11-20T05:26:37",
      "upload_time_iso_8601": "2021-11-20T05:26:37.890910Z",
      "url": "https://files.pythonhosted.org/packages/bd/58/67b58d736e921eff1527b058508a16eaee3846c995f57274051cf0700254/phantom_dev-0.14.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}