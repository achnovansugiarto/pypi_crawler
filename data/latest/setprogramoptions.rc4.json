{
  "info": {
    "author": "William McLendon",
    "author_email": "wcmclen@sandia.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Other Audience",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<!-- Github Badges -->\n[![SetProgramOptions Testing](https://github.com/sandialabs/SetProgramOptions/actions/workflows/test-driver-core.yml/badge.svg)](https://github.com/sandialabs/SetProgramOptions/actions/workflows/test-driver-core.yml)\n[![Documentation Status](https://readthedocs.org/projects/setprogramoptions/badge/?version=latest)](https://setprogramoptions.readthedocs.io/en/latest/?badge=latest)\n\n\nSetProgramOptions\n=================\nThe `SetProgramOptions` package extends [`ConfigParserEnhanced`][5] to enable the\nprocessing of **.ini** files that specify **command line program options**.\n\nAs a subclass of ConfigParserEnhanced, SetProgramOptions supports all\nthe _operations_ that [`ConfigParserEnhanced`][5] supports and adds some of its\nown. The following table notes the new **operations** that SetProgramOptions adds:\n\n| Operation    | Format                                        | Defined By                  |\n| ------------ | --------------------------------------------- | --------------------------- |\n| `use`        | `use <section>`                               | [`ConfigParserEnhanced`][5] |\n| `opt-set`    | `opt-set Param1 [Param2..ParamN] [: <VALUE>]` | `SetProgramOptions`         |\n| `opt-remove` | `opt-remove Param [SUBSTR]`                   | `SetProgramOptions`         |\n\nGenerally speaking, when we parse a section from a .ini file, the following\nsteps are taken:\n\n1. Parse the section, resolving any `use` operations to fully parse the DAG\n   generated by the section and its dependents.\n2. This generates a *list of actions* that are specified in the configuration\n   file. Any `remove` operations encountered will execute their removal search\n   during parsing to ensure they only remove matches that are _previously_ defined.\n3. Once parsed, a _generator_ can be invoked to process the actions-list and generate\n   the requested back-end format. Currently, SetProgramOptions only generates output\n   for *bash* scripts but this can easily be extended to support other formats such\n   as Windows batch or Powershell files, or other kinds of shell commands.\n   Subclasses can also be extended to include their own generator types as well.\n\nSupported Operations\n--------------------\n\n### `use`\nThe `use` operation is inherited from [`ConfigParserEnhanced`][5]. Please see its documentation\non this command and its use.\n\n### `opt-set`\nSets a generic _command line_ style option.\n\nThe format of this is `opt-set Param1 [Param2] [Param3] ... [ParamN] : [VALUE]`\n\nIn a _bash_ context, this operation attempts to generate an option for some command\nthat will be executed.\n`SetProgramOptions` will concactenate the _Params_ together and then append `=VALUE`\nif a VALUE field is present.\nFor example, `opt-set Foo Bar : Baz` will become `FooBar=Baz`.\n\n\n### `opt-remove`\n_Removes_ existing entries that have been processed up to the point the `opt-remove` is\nencountered that match a pattern.\n\nThe format of this is `opt-remove Param [SUBSTR]`\n\nWhen a _remove_ is encountered, `SetProgramOptions` will search through all processed\noptions and will delete any that contain any _Param-i_ that matches `Param`.\nBy default the parameters much be an _exact match_ of `Param`, but if the optional\n`SUBSTR` parameter is provided then `SetProgramOptions` will treat `Param` as a\nsubstring and will remove all existing options if _any parameter contains Param_.\n\n\nSetProgramOptions Config Files\n------------------------------\nA **.ini** file that can be processed by `SetProgramOptions` can be formatted like this:\n```ini\n[COMMAND_LS]\nopt-set ls\n```\nThis is perhaps the most simple thing we could do.\nUsing `gen_option_list('COMMAND_LS', generator=\"bash\")`\nthis operation would generate the command `ls` when processed.\n\nA more complex section which creates a CMake command call might look like this:\n```ini\n[COMMAND_CMAKE]\nopt-set cmake\nopt-set -G : Ninja\nopt-set -D CMAKE_CXX_FLAGS : \"-O3\"\n```\nand this would generate the command `cmake -G=Ninja -DCMAKE_CXX_FLAGS=\"-O3\"` when\nprocessed for _bash_ output.\n\n\n### Variable Expansion within VALUE fields\nVariables can be added to the VALUE fields in handled instructions, but they have their\nown format that must be used:\n```\n${VARNAME|VARTYPE}\n```\n- `VARNAME` is the variable name that you might expect for a bash style environment variable\n  that might be defined like this: `export VARNAME=VALUE`.\n- `VARTYPE` is the **type** of the variable that is being declared. For `SetProgramOptions`\n  the only recognized type is `ENV` which defines _environment variables_. Subclasses such\n  as `SetProgramOptionsCMake` define their own types.\n\nWe do not provide a **default** type for this because we wish it to be _explicit_ that this\nis a pseudo-type and do not want it to be confused with some specific variable type since that\nmeaning can change depending on the kind of generator being used. For example, `${VARNAME}`\nis an _environment variable_ within a bash context but in a CMake fragment file it would be\nan _internal CMake variable_ and `$ENV{VARNAME}` would be an _environment variable_.\nBy not providing a default we force type consideration to be made explicitly during the creation\nof the .ini file.\n\n\nLinked Projects\n---------------\n- [ConfigParserEnhanced][5] - required by SetProgramOptions - [RTD][7], [GitHub][2]\n\n\nSetProgramOptions Examples\n--------------------------\n\n### Example 1\n\n#### [example-01.ini][8]\n```ini\n[BASH_VERSION]\nopt-set bash\nopt-set --version\n\n[LS_COMMAND]\nopt-set ls\n\n[LS_LIST_TIME_REVERSED]\nopt-set \"-l -t -r\"\n\n[LS_CUSTOM_TIME_STYLE]\nopt-set --time-style : \"+%Y-%m-%d %H:%M:%S\"\n\n[MY_LS_COMMAND]\nuse LS_COMMAND\nuse LS_LIST_TIME_REVERSED\nuse LS_CUSTOM_TIME_STYLE\n```\n\n#### [example-01.py][9]\n\n```python\n#!/usr/bin/env python3\nimport setprogramoptions\n\nfilename = \"example-01.ini\"\nsection  = \"MY_LS_COMMAND\"\n\n# Create SetProgramOptions instance\npopts = setprogramoptions.SetProgramOptions(filename)\n\n# Parse section\npopts.parse_section(section)\n\n# Generate the list of bash options for the command\nbash_options = popts.gen_option_list(section, generator=\"bash\")\n\n# Print out the commands\nprint(\" \".join(bash_options))\n```\n\ngenerates the output:\n\n```bash\nls -l -t -r --time-style=\"+%Y-%m-%d %H:%M:%S\"\n```\n\n### Example 2\n\nWe can utilize the `use` operation to create a more complex configuration file\nthat provides some sort of common sections and then point-of-use sections that\nwould generate customized configurations for a particular use:\n\n```ini\n[CMAKE_COMMAND]\nopt-set cmake\nopt-set -G : Ninja\n\n[CMAKE_OPTIONS_COMMON]\nopt-set -D CMAKE_CXX_FLAGS : \"-fopenmp\"\n\n[CMAKE_OPTIONS_APPLICATION]\nopt-set -D MYAPP_FLAG1 : \"foo\"\nopt-set -D MYAPP_FLAG2 : \"bar\"\n\n[APPLICATION_PATH_TO_SOURCE]\nopt-set /path/to/source/.\n\n[APPLICATION_CMAKE_PROFILE_01]\nuse CMAKE_COMMAND\nuse CMAKE_OPTIONS_COMMON\nuse CMAKE_OPTIONS_APPLICATION\nuse APPLICATION_PATH_TO_SOURCE\n\n[APPLICATION_CMAKE_PROFILE_02]\nuse APPLICATION_PROFILE_01\nopt-remove MYAPP_FLAG2\n```\n\nThis example follows a pattern that larger projects might wish to use\nwhen there are many configurations that may be getting tested.\nHere, we set up some common option groups and then create aggregation sections\nthat will include the other sections to compose a full command line.\n\nUsing this .ini file, if we generate _bash_ output for section\n`APPLICATION_CMAKE_PROFILE_01` the resulting command generated would be:\n`cmake -G=Ninja -DCMAKE_CXX_FLAGS=\"-fopenmp\" -DMYAPP_FLAG1=\"foo\" -DMYAPP_FLAG2=\"bar\" /path/to/source/.`\n\nAlternatively, we can generate _bash_ output for section\n`APPLICATION_CMAKE_PROFILE_02` which first clones `APPLICATION_CMAKE_PROFILE_01`\nand then _removes_ all entries containing the parameter `MYAPP_FLAG2` using the\n`opt-remove` operation.\nThis will result in a generated comand\n`cmake -G=Ninja -DCMAKE_CXX_FLAGS=\"-fopenmp\" -DMYAPP_FLAG1=\"foo\" /path/to/source/.`.\n\nThis example shows how the `opt-remove` operation will fully\nremove occurrences that contain that substring from the list\nof actions.\n\nThis example shows some of the capabilities that `SetProgramOptions`\nprovides for managing many build configurations within a single .ini\nfile.\n\n\n\nSetProgramOptionsCMake\n======================\n`SetProgramOptionsCMake` is a subclass of `SetProgramOptions` that adds additional\noperations and generators to handle processing [CMake][6] options:\n- Adds `opt-set-cmake-var`.\n- Adds `cmake_fragment` generator.\n- Adds `CMAKE` type to variables.\n\nNew operations defined in `SetProgramOptionsCMake`:\n\n| Operation           | Format                                                           | Defined By               |\n| ------------------- | ---------------------------------------------------------------- | ------------------------ |\n| `opt-set-cmake-var` | `opt-set-cmake-var VARNAME [TYPE] [FORCE] [PARENT_SCOPE]: VALUE` | `SetProgramOptionsCMake` |\n\n\nSupported Operations\n--------------------\n### `opt-set-cmake-var`\nThis adds a CMake variable program option. These have a special syntax in _bash_ that looks like `-DVARNAME:TYPE=VALUE` where the `:TYPE`\nis an optional parameter. If the *type* is left out then CMake assumes the value is a _STRING_.\n\nWe may not wish to generate bash only output though. For CMake files, we might wish to generate a _cmake fragment_ file which is\nbasically a snippet of CMake that can be loaded during a CMake call using the `-S` option: `cmake -S cmake_fragment.cmake`. The\nsyntax within a CMake fragment file is the same as in a CMake script itself.\n\nIf the back-end generator is creating a CMake fragment file, the _set_ command generated will use [CMake set syntax].\nThis looks something like `set(<variable> <value>)` but can also contain additional options. These extra options can\nbe provided in the `opt-set-cmake-var` operation in the .ini file:\n\n- `FORCE` -\n    - By default, a `set()` operation does not overwrite entries in a CMake file. This can be added to\n      _force_ the value to be saved.\n    - This is only applicable to generating _cmake fragment_ files.\n- `PARENT_SCOPE` - If provided, this option instructs CMake to set the variable in the scope that is above the current scope.\n    - This is only applicable to generating _cmake fragment_ files.\n- `TYPE` - Specifies the _TYPE_ the variable can be.\n    - This is a _positional_ argument and must always come after _VARNAME_.\n    - Valid options for this are `STRING` (default), `BOOL`, `PATH`, `INTERNAL`, `FILEPATH`.\n    - Adding a _TYPE_ option implies that the _CACHE_ and _docstring_ parameters will be added to a `set()` command\n      in a CMake fragment file according to the syntax: `set(<variable> <value> CACHE <type> <docstring> [FORCE])`\n      as illustrated on the [CMake `set()` documentation][1].\n    - This is applicable to both _cmake fragment_ and _bash_ generation.\n\n\nSetProgramOptionsCMake Config Files\n-----------------------------------\nHere is an example of what a .ini file may look like using the\nCMake operations provided by this class:\n\n```ini\n[SECTION_A]\nopt-set cmake\nopt-set-cmake-var MYVARIABLENAME  : VALUE\nopt-set-cmake-var MYVARIABLENAME2 PARENT_SCOPE : VALUE\n```\n\n### Handling CMake Variables\nA _CMake variable_ in this context would be an _internal variable_ that is known to CMake.\nBecause this is not a variable that would be known outside of the context of `.cmake` files,\nthis kind of variable is only applicable when generating CMake fragment files.\n\nIt is necessary to provide a CMake variant for variable expansions because the CMake\nsyntax for variables is different than that used by Bash, and CMake fragments have\na specialized syntax for *environment* variables as well. In CMake fragment files:\n- environment variables are written as `$ENV{VARNAME}`\n- internal CMake variables are written as: `${VARNAME}`\n\nWe saw variables in `SetProgramOptions` follow the syntax: `${VARNAME|ENV}` where\n`ENV` specifies the kind of variable we're declaring. We extend this in\n`SetProgramOptionsCMake` by adding a `${VARNAME|CMAKE}` variation which\nindicates that the variable is expected to be an _internal_ cmake variable\nand is more suited towards being used within a CMake fragment file since\nit has no meaning at the command line.\n\nYou can still use a _CMake_ variable expansion entry when generating _bash_\noutput but there is a catch. The variable *must* be resolvable to something\nthat is **not** a CMake variable through its transitive closure.\nThis is achieved by caching the _last known value_ of a variable as we process\na .ini file and provided that the value ultimately resolves to either a string\nor an environment variable we can still use it.\nIf it cannot be resolved to something that isn't a CMake variable then an\nexception should be generated.\n\nFor example, if we have a .ini file that sets up `CMAKE_CXX_FLAGS` to include `-O0` in a\ncommon section like this:\n\n```ini\n[COMMON]\nopt-set-cmake-var CMAKE_CXX_FLAGS STRING FORCE: \"-O0\"\n```\nand then we have a later section that adds an OpenMP flag to it like this:\n```.ini\n[ADD_OPENMP]\nuse COMMON\nopt-set-cmake-var CMAKE_CXX_FLAGS STRING FORCE: \"${CMAKE_CXX_FLAGS|CMAKE} -fopenmp\"\n```\nThis is valid since `${CMAKE_CXX_FLAGS|CMAKE}` will get replaced with `-O0` so the\nresulting `CMAKE_CXX_FLAGS` variable would be set to `-O0 -fopenmp` after processing.\nIf we generate _bash_ output for the `ADD_OPENMP` section we'll get\na `-D` option that looks like `-DCMAKE_CXX_FLAGS:STRING=\"-O0 -fopenmp\"`.\n\nBut what if we have a .ini file with a CMake variable that can't be resolved to\nsomething that is not a CMake flag, such as:\n```ini\n[COMMON]\nopt-set-cmake-var FOO : ${SOME_CMAKE_VAR|CMAKE}\n```\nIf we tried to process this and write out the resulting script using the _bash_ generator\nan exception should be raised citing that we don't know what to do with that unresolved\nCMake variable. This would be the equivalent to a bash option `-DFOO=<SOME_CMAKE_VAR>`\nand bash can't handle that because it has no idea what it should put in that cmake var\nfield.\n\nNote: if the same CMake option is provided in multiple lines they will all be included\nin the generated output. In that case, the behaviour will match what will occur if\none called cmake directly with the same option multiple times. In that case, the\n_last one wins_ since all `-D` options are treated as though they both have `FORCE`\nand `CACHE` flags set.\n\n\n\nSetProgramOptionsCMake Examples\n-------------------------------\n\n### Example\n\nThis example shows a configuration file that can be used to generate\nbuild files using Ninja or Makefile. In the .ini file we set up some\ncommon sections that contain the arguments and then the point-of-use\nsections ( `MYPROJ_CONFIGURATION_NINJA` and `MYPROJ_CONFIGURATION_MAKEFILES` )\ncan compose their command lines by importing the argument definition sections\nvia `use`.\n\n#### example-02.ini\n```ini\n#\n# example-02.ini\n#\n[CMAKE_COMMAND]\nopt-set cmake\n\n[CMAKE_GENERATOR_NINJA]\nopt-set -G : Ninja\n\n[CMAKE_GENERATOR_MAKEFILES]\nopt-set -G : \"Unix Makefiles\"\n\n[MYPROJ_OPTIONS]\nopt-set-cmake-var  MYPROJ_CXX_FLAGS       STRING       : \"-O0 -fopenmp\"\nopt-set-cmake-var  MYPROJ_ENABLE_OPTION_A BOOL   FORCE : ON\nopt-set-cmake-var  MYPROJ_ENABLE_OPTION_B BOOL         : ON\n\n[MYPROJ_SOURCE_DIR]\nopt-set /path/to/source/dir\n\n[MYPROJ_CONFIGURATION_NINJA]\nuse CMAKE_COMMAND\nuse CMAKE_GENERATOR_NINJA\nuse MYPROJ_OPTIONS\nuse MYPROJ_SOURCE_DIR\n\n[MYPROJ_CONFIGURATION_MAKEFILES]\nuse CMAKE_COMMAND\nuse CMAKE_GENERATOR_MAKEFILES\nuse MYPROJ_OPTIONS\nuse MYPROJ_SOURCE_DIR\n```\n\n#### example-02.py\nThis python code shows generating a bash script and a CMake fragment\nof the configuration specified in the .ini file.\n```python\n#!/usr/bin/env python3\n# -*- mode: python; py-indent-offset: 4; py-continuation-offset: 4 -*-\nfrom pathlib import Path\nimport setprogramoptions\n\nprint(80*\"-\")\nprint(f\"- {Path(__file__).name}\")\nprint(80*\"-\")\n\nfilename = \"example-02.ini\"\npopts = setprogramoptions.SetProgramOptionsCMake(filename)\n\nsection = \"MYPROJ_CONFIGURATION_NINJA\"\npopts.parse_section(section)\n\n# Generate BASH output\nprint(\"\")\nprint(\"Bash output\")\nprint(\"-----------\")\nbash_options = popts.gen_option_list(section, generator=\"bash\")\nprint(\" \\\\\\n   \".join(bash_options))\n\n# Generate a CMake Fragment\nprint(\"\")\nprint(\"CMake fragment output\")\nprint(\"---------------------\")\ncmake_options = popts.gen_option_list(section, generator=\"cmake_fragment\")\nprint(\"\\n\".join(cmake_options))\n\nprint(\"\\nDone\")\n```\n\n#### Output\nUsing the *Ninja* specialization from the above code, we generate the following\noutput:\n```bash\n$ python3 example-02.py\n--------------------------------------------------------------------------------\n- example-02.py\n--------------------------------------------------------------------------------\n\n**Bash output**\ncmake \\\n   -G=Ninja \\\n   -DMYPROJ_CXX_FLAGS:STRING=\"-O0 -fopenmp\" \\\n   -DMYPROJ_ENABLE_OPTION_A:BOOL=ON \\\n   -DMYPROJ_ENABLE_OPTION_B:BOOL=ON \\\n   /path/to/source/dir\n\nCMake fragment output\n---------------------\nset(MYPROJ_CXX_FLAGS \"-O0 -fopenmp\" CACHE STRING \"from .ini configuration\")\nset(MYPROJ_ENABLE_OPTION_A ON CACHE BOOL \"from .ini configuration\" FORCE)\nset(MYPROJ_ENABLE_OPTION_B ON CACHE BOOL \"from .ini configuration\")\n\nDone\n```\n\n[1]: https://cmake.org/cmake/help/latest/command/set.html\n[2]: https://github.com/sandialabs/ConfigParserEnhanced\n[3]: https://github.com/sandialabs/SetProgramOptions/blob/master/CHANGELOG.md\n[4]: https://setprogramoptions.readthedocs.io/\n[5]: https://pypi.org/project/configparserenhanced/\n[6]: https://www.cmake.org/\n[7]: https://configparserenhanced.readthedocs.io/\n[8]: https://github.com/sandialabs/SetProgramOptions/blob/master/examples/example-01.ini\n[9]: https://github.com/sandialabs/SetProgramOptions/blob/master/examples/example-01.py\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sandialabs/SetProgramOptions",
    "keywords": "Utility,Bash,Configuration,ConfigParserEnhanced,ConfigParser",
    "license": "LICENSE",
    "maintainer": "Sandia National Laboratories",
    "maintainer_email": "wg-SetProgramOptions@sandia.gov",
    "name": "setprogramoptions",
    "package_url": "https://pypi.org/project/setprogramoptions/",
    "platform": "",
    "project_url": "https://pypi.org/project/setprogramoptions/",
    "project_urls": {
      "CI": "https://github.com/sandialabs/SetProgramOptions/actions",
      "Documentation": "https://setprogramoptions.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/sandialabs/SetProgramOptions",
      "Issues": "https://github.com/sandialabs/SetProgramOptions/issues",
      "Repository": "https://github.com/sandialabs/SetProgramOptions"
    },
    "release_url": "https://pypi.org/project/setprogramoptions/0.5.0.2/",
    "requires_dist": [
      "configparser (>=5.0,<6.0)",
      "configparserenhanced (>=0.8,<0.9)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Program options configuration file reader using ConfigParserEnhanced.",
    "version": "0.5.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12507477,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38908d9d9d52b45ae9e133ac451539c8ce9ba001de091a513b28d9f0c6364c66",
          "md5": "899d03867c05653fd1740ea429832229",
          "sha256": "6978d38237ded595d77ec965c59ae04da1c7e1a6b8d18ddf33e1706afc07c256"
        },
        "downloads": -1,
        "filename": "setprogramoptions-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "899d03867c05653fd1740ea429832229",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 46099,
        "upload_time": "2021-12-30T20:59:04",
        "upload_time_iso_8601": "2021-12-30T20:59:04.712889Z",
        "url": "https://files.pythonhosted.org/packages/38/90/8d9d9d52b45ae9e133ac451539c8ce9ba001de091a513b28d9f0c6364c66/setprogramoptions-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "531e925a8b5afa76fd68dac2c48b4c6e58bae90f3b045bb7b7ef343f94c466d7",
          "md5": "450a904a9dbbe794e5856da6169b7706",
          "sha256": "6bfc4ae1e141fd48dae38ffc989197dbfb572a9b41f4853a7d98692485841095"
        },
        "downloads": -1,
        "filename": "setprogramoptions-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "450a904a9dbbe794e5856da6169b7706",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 41257,
        "upload_time": "2021-12-30T20:59:06",
        "upload_time_iso_8601": "2021-12-30T20:59:06.392834Z",
        "url": "https://files.pythonhosted.org/packages/53/1e/925a8b5afa76fd68dac2c48b4c6e58bae90f3b045bb7b7ef343f94c466d7/setprogramoptions-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91031958064a180f1169459882df53d98b9e886301e310dfd36fd64eddf8664e",
          "md5": "f3fbc35c50f0ef72473caf8204a0fa41",
          "sha256": "32d4e181f4691f1766e07a9ad7d3adb0f328522e41db5a800a07ae37a23db90f"
        },
        "downloads": -1,
        "filename": "setprogramoptions-0.5.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3fbc35c50f0ef72473caf8204a0fa41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 46144,
        "upload_time": "2021-12-30T21:18:31",
        "upload_time_iso_8601": "2021-12-30T21:18:31.782856Z",
        "url": "https://files.pythonhosted.org/packages/91/03/1958064a180f1169459882df53d98b9e886301e310dfd36fd64eddf8664e/setprogramoptions-0.5.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fc3c210882c11e76c8f20bf2ed73bf114c4b9b8e025c5b7fdac5d74d0bf2227",
          "md5": "538404e8795ba66e3f76efa27ce8102f",
          "sha256": "41e445a54710b216284b6158f371ff6ef2c8c34b5844518f9ff542d16bcd91de"
        },
        "downloads": -1,
        "filename": "setprogramoptions-0.5.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "538404e8795ba66e3f76efa27ce8102f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 41313,
        "upload_time": "2021-12-30T21:18:33",
        "upload_time_iso_8601": "2021-12-30T21:18:33.678758Z",
        "url": "https://files.pythonhosted.org/packages/4f/c3/c210882c11e76c8f20bf2ed73bf114c4b9b8e025c5b7fdac5d74d0bf2227/setprogramoptions-0.5.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "580afc23a857aa7e9a2c368c66a34c1a6e0420db24d6acb22322469974e863e9",
          "md5": "f3dc391ee608876b69bc0ee091596976",
          "sha256": "b692036dad9c8e02786b5dea515ea2c898842a8cbb3162066598554b34b02cbd"
        },
        "downloads": -1,
        "filename": "setprogramoptions-0.5.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3dc391ee608876b69bc0ee091596976",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 46207,
        "upload_time": "2022-01-07T18:43:59",
        "upload_time_iso_8601": "2022-01-07T18:43:59.200927Z",
        "url": "https://files.pythonhosted.org/packages/58/0a/fc23a857aa7e9a2c368c66a34c1a6e0420db24d6acb22322469974e863e9/setprogramoptions-0.5.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31ad8c170fd7a1463211a877f00fe11cf660bfedc01837504da91a0ac1d3a9a2",
          "md5": "ba62aa1dea86e1299baff9dedc47860d",
          "sha256": "8295ac624a956edd081d0db69f62d333a1f35884130eda2db04e07c512b66506"
        },
        "downloads": -1,
        "filename": "setprogramoptions-0.5.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ba62aa1dea86e1299baff9dedc47860d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 41448,
        "upload_time": "2022-01-07T18:44:00",
        "upload_time_iso_8601": "2022-01-07T18:44:00.934733Z",
        "url": "https://files.pythonhosted.org/packages/31/ad/8c170fd7a1463211a877f00fe11cf660bfedc01837504da91a0ac1d3a9a2/setprogramoptions-0.5.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e317f39b76e01aab144466e876b82aadefbcd7a2581416e8be9586dbb5049574",
          "md5": "44dd3183ed38adfa502d4e91753d51e4",
          "sha256": "51dbea41de31bbc085268e134b538d795c92249981a487b872b97aed860e85da"
        },
        "downloads": -1,
        "filename": "setprogramoptions-0.5.0a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44dd3183ed38adfa502d4e91753d51e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 46120,
        "upload_time": "2021-12-30T20:57:45",
        "upload_time_iso_8601": "2021-12-30T20:57:45.239698Z",
        "url": "https://files.pythonhosted.org/packages/e3/17/f39b76e01aab144466e876b82aadefbcd7a2581416e8be9586dbb5049574/setprogramoptions-0.5.0a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4985de0108e45d57e536a0d2e037f1f931b7c0323fcbb196f7596eae8c8731d",
          "md5": "ecfa34d68c123dee2be523e5aba44430",
          "sha256": "76b1fd6f338ba348b76cfc7b4a71e4eb490f244a51bd168e75393cf2d8fe747e"
        },
        "downloads": -1,
        "filename": "setprogramoptions-0.5.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "ecfa34d68c123dee2be523e5aba44430",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 41287,
        "upload_time": "2021-12-30T20:57:47",
        "upload_time_iso_8601": "2021-12-30T20:57:47.415690Z",
        "url": "https://files.pythonhosted.org/packages/d4/98/5de0108e45d57e536a0d2e037f1f931b7c0323fcbb196f7596eae8c8731d/setprogramoptions-0.5.0a3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "580afc23a857aa7e9a2c368c66a34c1a6e0420db24d6acb22322469974e863e9",
        "md5": "f3dc391ee608876b69bc0ee091596976",
        "sha256": "b692036dad9c8e02786b5dea515ea2c898842a8cbb3162066598554b34b02cbd"
      },
      "downloads": -1,
      "filename": "setprogramoptions-0.5.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f3dc391ee608876b69bc0ee091596976",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 46207,
      "upload_time": "2022-01-07T18:43:59",
      "upload_time_iso_8601": "2022-01-07T18:43:59.200927Z",
      "url": "https://files.pythonhosted.org/packages/58/0a/fc23a857aa7e9a2c368c66a34c1a6e0420db24d6acb22322469974e863e9/setprogramoptions-0.5.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31ad8c170fd7a1463211a877f00fe11cf660bfedc01837504da91a0ac1d3a9a2",
        "md5": "ba62aa1dea86e1299baff9dedc47860d",
        "sha256": "8295ac624a956edd081d0db69f62d333a1f35884130eda2db04e07c512b66506"
      },
      "downloads": -1,
      "filename": "setprogramoptions-0.5.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ba62aa1dea86e1299baff9dedc47860d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 41448,
      "upload_time": "2022-01-07T18:44:00",
      "upload_time_iso_8601": "2022-01-07T18:44:00.934733Z",
      "url": "https://files.pythonhosted.org/packages/31/ad/8c170fd7a1463211a877f00fe11cf660bfedc01837504da91a0ac1d3a9a2/setprogramoptions-0.5.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}