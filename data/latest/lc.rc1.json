{
  "info": {
    "author": "Jack Rosenthal",
    "author_email": "jack@rosenth.al",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Interpreters"
    ],
    "description": "``lc``: The Lambda Calculus Beta Reducer\n========================================\n\nThis tool helps you β-reduce terms in the λ-calculus by providing you with a\nREPL::\n\n   λ> (λc.c(λx.λy.x))((λx.λy.λf.fxy)(λf.λx.f(fx))(λf.λx.f(f(fx))))\n   INPUT (λc.c(λx.λy.x))((λx.λy.λf.fxy)(λf.λx.f(fx))(λf.λx.f(f(fx))))\n   β ==> (λx.λy.λf.fxy)(λf.λx.f(fx))(λf.λx.f(f(fx)))(λx.λy.x)\n   β ==> (λy.λf.f(λf.λx.f(fx))y)(λf.λx.f(f(fx)))(λx.λy.x)\n   β ==> (λf.f(λf.λx.f(fx))(λf.λx.f(f(fx))))(λx.λy.x)\n   β ==> (λx.λy.x)(λf.λx.f(fx))(λf.λx.f(f(fx)))\n   β ==> (λy.λf.λx.f(fx))(λf.λx.f(f(fx)))\n   β ==> λf.λx.f(fx)\n\n   Potential shorthand representations:\n   -> As Church numeral 2\n\nInput\n-----\n\nNotice the pretty unicode ``λ`` in the input: this REPL uses Readline to input\na ``λ`` when you type backslash (``\\``).\n\nShorthands\n----------\n\n   You can start any 'Monty Python' routine and people finish it for you.\n   Everyone knows it like shorthand.\n\n   -- Robin Williams\n\n\nNotice above the input was converted to its corresponding shorthand Church\nnumeral at the end. This interpreter has the notion of shorthand notations:\n\n1. Shorthands are written in braces (``{}``) and are *case insensitive*.\n\n2. Church numerals, as well as many other common shorthands, are predefined for\n   you.\n\n3. Braces can be omitted on church numerals, as digits are not allowed to be\n   used as variables.\n\n4. Use ``=`` operator to define a shorthand.\n\n::\n\n    λ> {ABC}=λf.λx.x\n    λ> {ABC}\n    INPUT λf.λx.x\n\n    Potential shorthand representations:\n    -> As Church numeral 0\n    -> As {FALSE}\n    -> As {ABC}\n    λ> {IF}{FALSE}1{ABC}\n    INPUT (λp.λa.λb.pab)(λx.λy.y)(λf.λx.fx)(λf.λx.x)\n    β ==> (λa.λb.(λx.λy.y)ab)(λf.λx.fx)(λf.λx.x)\n    β ==> (λb.(λx.λy.y)(λf.λx.fx)b)(λf.λx.x)\n    β ==> (λx.λy.y)(λf.λx.fx)(λf.λx.x)\n    β ==> (λy.y)(λf.λx.x)\n    β ==> λf.λx.x\n\n    Potential shorthand representations:\n    -> As Church numeral 0\n    -> As {FALSE}\n    -> As {ABC}\n\nBuiltin Shorthands\n~~~~~~~~~~~~~~~~~~\n\nBesides a countably infinite number of Church numerals, the following\nshorthands come builtin to the interpreter::\n\n   {succ}=λn.λf.λx.f(nfx)\n   {add}=λm.λn.(m{succ}n)\n   {mult}=λm.λn.(m({add}n)0)\n   {true}=λx.λy.x\n   {false}=λx.λy.y\n   {and}=λp.λq.pqp\n   {or}=λp.λq.ppq\n   {not}=λp.p{false}{true}\n   {if}=λp.λa.λb.pab\n   {cons}=λx.λy.λf.fxy\n   {car}=λc.c{true}\n   {cdr}=λc.c{false}\n   {nil}=λx.{true}\n   {pred}=λn.λf.λx.n(λg.λh.h(gf))(λu.x)(λu.u)\n   {sub}=λm.λn.n{pred}m\n   {zero?}=λn.n(λx.{false}){true}\n   {nil?}=λp.p(λx.λy.{false})\n   {lte?}=λm.λn.{zero?}({sub}mn)\n\nBugs\n----\n\n   None.  Mutts have fleas, not bugs.\n\n   -- Mutt Manual Page\n\n* ``{pred}`` (and, consequently, ``{sub}``) appear to have some sort of issue.\n\n* When variables conflict as a result of application, they will display as the\n  same variable, but the interpreter will still treat them as separate\n  variables. What needs to be done is some sort of detection mechanism when\n  this happens, and an automatic α-rename of the variable.\n\nIf you solve either of these, a PR is much appreciated!",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jackrosenthal/lambdacalc",
    "keywords": "lambda calculus teaching",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lc",
    "package_url": "https://pypi.org/project/lc/",
    "platform": "",
    "project_url": "https://pypi.org/project/lc/",
    "project_urls": {
      "Homepage": "https://github.com/jackrosenthal/lambdacalc"
    },
    "release_url": "https://pypi.org/project/lc/0.1/",
    "requires_dist": null,
    "requires_python": ">=3.4, <4",
    "summary": "Beta reducer and shorthand representer for the λ-calculus",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4213640,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdc803f5ab776150d9be8cc6ef4f1d57aaf2fa88bfc27f08b2428c148e565d10",
          "md5": "7783743964d51e98157605a6de478bbc",
          "sha256": "4d3f76ebce605ef8193e737d4f767a12b483be7c3541bb0b292a5770622a41de"
        },
        "downloads": -1,
        "filename": "lc-0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "7783743964d51e98157605a6de478bbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4, <4",
        "size": 5663,
        "upload_time": "2018-08-28T05:15:39",
        "upload_time_iso_8601": "2018-08-28T05:15:39.009986Z",
        "url": "https://files.pythonhosted.org/packages/fd/c8/03f5ab776150d9be8cc6ef4f1d57aaf2fa88bfc27f08b2428c148e565d10/lc-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fdc803f5ab776150d9be8cc6ef4f1d57aaf2fa88bfc27f08b2428c148e565d10",
        "md5": "7783743964d51e98157605a6de478bbc",
        "sha256": "4d3f76ebce605ef8193e737d4f767a12b483be7c3541bb0b292a5770622a41de"
      },
      "downloads": -1,
      "filename": "lc-0.1.tar.gz",
      "has_sig": true,
      "md5_digest": "7783743964d51e98157605a6de478bbc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4, <4",
      "size": 5663,
      "upload_time": "2018-08-28T05:15:39",
      "upload_time_iso_8601": "2018-08-28T05:15:39.009986Z",
      "url": "https://files.pythonhosted.org/packages/fd/c8/03f5ab776150d9be8cc6ef4f1d57aaf2fa88bfc27f08b2428c148e565d10/lc-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}