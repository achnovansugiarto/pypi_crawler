{
  "info": {
    "author": "Otosense",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# py2api\nExpose python objects to external clients with minimal effort.\n\n## For the eager\n\npy2api allows you to role out webservices (with flask) with minimal boilerplate.\n\nTo get started quickly, have a look at the examples, and play around with edits of them.\n\nThe main boilerplate here is writing code for input and output conversion. To help with this,\nwe provide some tools. Have a look at the output_trans.py and py2rest/input_trans.py modules, \nespecially the doctest, which should give you an idea of how to work it.\n\nA webservice module assembled with py2api looks something like this:\n\n```python\nfrom mystuff import SystemService\nfrom py2api import OutputTrans\nfrom py2api.py2rest import InputTransWithAttrInURL\n\nattr_list = ['ping', 'status', 'stop', 'start', 'restart']\n\nname = '/api/process/'\nprocess = WebObjWrapper(\n    obj_constructor=SystemService,\n    obj_constructor_arg_names=['name'],\n    permissible_attr=attr_list,\n    input_trans=InputTransWithAttrInURL(trans_spec=None, attr_from_url=name + \"(\\w+)\"),\n    output_trans=OutputTrans(trans_spec=None),\n    name=name,\n    debug=0\n)\n\napp = add_routes_to_app(app, routes={\n        process.__name__ + attr: process for attr in attr_list\n    }\n)\n```\n\nNote the two trans_spec=None used when making the input_trans and output_trans arguments of \nWebObjWrapper. There was no need to specify any special conversion there because the methods\nwe were wrapping here only used simple types (string, int, float, list). \n\nBut often, when faced with more complex types, specifying how to carry out conversion in each and every situation\nconstitutes a big part of the boilerplate. \nWe provide tools to do this through a mapping (dict) separate from the code.\nThis enables tools to be created to operate on this specification.\nYou can specify conversion verbosely, by specifying how every argument of every function should be converted. \nIf you're the type, you can also do so concisely, \nby specifying contextual rules involving the object's names and types, etc. grouping conversion rules together.\n\nSuch a (more concise) conversion specification looks like this:\n\n```python\nfrom py2api.constants import _ATTR, _ARGNAME, _ELSE, _VALTYPE\n\ndef ensure_array(x):\n    if not isinstance(x, ndarray):\n        return array(x)\n    return x\n\ntrans_spec = {\n        _ATTR: {\n            'this_attr': list,\n            'other_attr': str,\n            'yet_another_attr': {\n                _VALTYPE: {\n                    dict: lambda x: x\n                },\n                _ELSE: lambda x: {'result': x}\n            }\n        },\n        _ARGNAME: {\n            'sr': int,\n            'ratio': float,\n            'snips': list,\n            'wf': ensure_array\n        },\n    }\n}\n```\n\nSee that the conversion function could be a builtin function like list, str, float, or int,\nor could be a custom function, declared on the fly with a lambda, or refering to a function\ndeclared elsewhere. \n\n\n## Motivation\n\nSay you have some functions, classes and/or whole modules that contain some functionality \nthat you'd like to expose as a webservice. \nSo you grab some python libary to do that. If you make your choice right, you won't have \nto deal with the nitty gritty details of receiving and sending web requests. \nSay, you chose flask. Good choice. Known to have minimal boiler plate.\nSo now all you have to do make a module and do something like this...\n\n```python\nfrom blah import a_func_you_want_to_expose\n@app.route(\"/a_func_you_want_to_expose/\", methods=['GET'])\ndef _a_func_you_want_to_expose():\n    # A whole bunch of boiler plate to get your arguments out\n    # of the web request object, which could be in the url, the json, the data...\n    # oh, and then you have to convert these all to python objects, \n    # because they're all simple types like strings, numbers and lists, \n    # you'll probably want to do some validation, perhaps add a few \n    # things that weren't really a concern of the original function, \n    # like logging, caching, providing some documentation/help, \n    # and then, oh, okay, you can call that function of yours now:\n\n    results = a_func_you_want_to_expose(...the arguments...)\n\n    # But wait, it's not finished! You'll need to convert these results \n    # to something that a web request can handle. Say a string or a json...\n```\n        \nThat's all. Enjoyed it?\n\nNow do that again, and again, and again, for every fooing object you want to expose.\n\nStill enjoy it?\n\nWe didn't. So we made py2api.\n\nWith py2api, you write the same boilerplate, but you only write it once. \nIn py2api you specify all the concerns of the routes you want elsewhere, a bit like \nwhat OpenAPI does. But further, you have tools to reduce this specification to a set \nof conventions and rules that define them. For example, if you use a variable called \n\"num\" a lot, and most of the time it has to be an int, except in a few cases, your \nspecification has to be just that. It looks like this:\n\n\nThis whole py2api thing wasn't only about minimizing the time spent on a boilerplate. \n\nIt's also because separation of concerns is good, and in the above example, \nconcerns aren't as separated as they could: You have conversion, validation, logging, \ncaching. \n\nAlso, because code reuse is good, and we don't mean copy/pasting: You probably \nhave many arguments and types that show up in different places, and will end up writing, \nor copy pasting, code to handle these many times. What if you made a mistake? You'll have to \nfind all those copies and correct them all.\n\nMinimizing what you have to write to get something done is good: There's less places to look \nfor bugs.\n \nConsistency is good.\n\nEt cetera.\n  \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thorwhalen/py2api",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py2api",
    "package_url": "https://pypi.org/project/py2api/",
    "platform": "any",
    "project_url": "https://pypi.org/project/py2api/",
    "project_urls": {
      "Homepage": "https://github.com/thorwhalen/py2api"
    },
    "release_url": "https://pypi.org/project/py2api/0.0.3/",
    "requires_dist": [
      "flask-cors",
      "numpy",
      "urlparse",
      "flask",
      "werkzeug",
      "platform",
      "requests"
    ],
    "requires_python": "",
    "summary": "Declarative API entry point",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16446300,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e3c3a5fa5802887f65101e8558e709ed3b9b80355ce8df24b7654c76dfbf231",
          "md5": "f3bb333e171f1902272f19c076ef3ee9",
          "sha256": "1aab19e4cbd5882c4334050f15a894e2bcaff02891320e774e5849e8d410a1be"
        },
        "downloads": -1,
        "filename": "py2api-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3bb333e171f1902272f19c076ef3ee9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34002,
        "upload_time": "2020-08-22T01:30:46",
        "upload_time_iso_8601": "2020-08-22T01:30:46.483769Z",
        "url": "https://files.pythonhosted.org/packages/2e/3c/3a5fa5802887f65101e8558e709ed3b9b80355ce8df24b7654c76dfbf231/py2api-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cac42940045b60ccb6ffa2ab5c1a49ad15efc4c066dac2a207fcd96cee5a2040",
          "md5": "f17e4f65689ff841b846767e1628865c",
          "sha256": "0529664ea5e75fb15bd684a6670f51ab16bd435832219df14aaeecc1dcf4acd9"
        },
        "downloads": -1,
        "filename": "py2api-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f17e4f65689ff841b846767e1628865c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26294,
        "upload_time": "2020-08-22T01:30:48",
        "upload_time_iso_8601": "2020-08-22T01:30:48.849259Z",
        "url": "https://files.pythonhosted.org/packages/ca/c4/2940045b60ccb6ffa2ab5c1a49ad15efc4c066dac2a207fcd96cee5a2040/py2api-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e734a4777a5b901a8d795b37c731fc0ec045c8ecba786dbc7b985936206c746b",
          "md5": "4af6186974101693f7adc5e364edc038",
          "sha256": "913c87d5e0e22cac4ea6a4677cf62cdb28c90912fdf6b448ff740871c7ab9d51"
        },
        "downloads": -1,
        "filename": "py2api-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4af6186974101693f7adc5e364edc038",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36623,
        "upload_time": "2023-01-16T15:37:15",
        "upload_time_iso_8601": "2023-01-16T15:37:15.585678Z",
        "url": "https://files.pythonhosted.org/packages/e7/34/a4777a5b901a8d795b37c731fc0ec045c8ecba786dbc7b985936206c746b/py2api-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af4be10af0b9d0d4e49ab1ffb14fad0bb76b90dfa7f79d2e2e1b32b2cd59198c",
          "md5": "a14270d3d124762ef74b60259fb2f56d",
          "sha256": "7d35698cf847236a7e3b939ce1229b4e5109068b340dfb4573593c417c8f2ce2"
        },
        "downloads": -1,
        "filename": "py2api-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a14270d3d124762ef74b60259fb2f56d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32722,
        "upload_time": "2023-01-16T15:37:17",
        "upload_time_iso_8601": "2023-01-16T15:37:17.889556Z",
        "url": "https://files.pythonhosted.org/packages/af/4b/e10af0b9d0d4e49ab1ffb14fad0bb76b90dfa7f79d2e2e1b32b2cd59198c/py2api-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ee34f81f5965bbb61bc1a3317c77de26af150f3dc052a3b79ce4525f5b571fa",
          "md5": "82c815cd34466a2b57c7434aea78b1c8",
          "sha256": "6752d722a3828b656b2d64a1bc07a7a2318913ef91e7a18e547c60d7aca26d64"
        },
        "downloads": -1,
        "filename": "py2api-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82c815cd34466a2b57c7434aea78b1c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36634,
        "upload_time": "2023-01-16T15:38:21",
        "upload_time_iso_8601": "2023-01-16T15:38:21.178344Z",
        "url": "https://files.pythonhosted.org/packages/4e/e3/4f81f5965bbb61bc1a3317c77de26af150f3dc052a3b79ce4525f5b571fa/py2api-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd66cd6f2eedef09e030c259c4cf4d31d248df90d90d9886a0ad544ba48c72b1",
          "md5": "2adca7005a6f4a96a0ad013a3592c76d",
          "sha256": "461acdbc2b890948632b12ee002793cdbddd513e823c1e0ad14f7b136cf9bb67"
        },
        "downloads": -1,
        "filename": "py2api-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2adca7005a6f4a96a0ad013a3592c76d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32750,
        "upload_time": "2023-01-16T15:38:23",
        "upload_time_iso_8601": "2023-01-16T15:38:23.120632Z",
        "url": "https://files.pythonhosted.org/packages/cd/66/cd6f2eedef09e030c259c4cf4d31d248df90d90d9886a0ad544ba48c72b1/py2api-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ee34f81f5965bbb61bc1a3317c77de26af150f3dc052a3b79ce4525f5b571fa",
        "md5": "82c815cd34466a2b57c7434aea78b1c8",
        "sha256": "6752d722a3828b656b2d64a1bc07a7a2318913ef91e7a18e547c60d7aca26d64"
      },
      "downloads": -1,
      "filename": "py2api-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "82c815cd34466a2b57c7434aea78b1c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 36634,
      "upload_time": "2023-01-16T15:38:21",
      "upload_time_iso_8601": "2023-01-16T15:38:21.178344Z",
      "url": "https://files.pythonhosted.org/packages/4e/e3/4f81f5965bbb61bc1a3317c77de26af150f3dc052a3b79ce4525f5b571fa/py2api-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd66cd6f2eedef09e030c259c4cf4d31d248df90d90d9886a0ad544ba48c72b1",
        "md5": "2adca7005a6f4a96a0ad013a3592c76d",
        "sha256": "461acdbc2b890948632b12ee002793cdbddd513e823c1e0ad14f7b136cf9bb67"
      },
      "downloads": -1,
      "filename": "py2api-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2adca7005a6f4a96a0ad013a3592c76d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32750,
      "upload_time": "2023-01-16T15:38:23",
      "upload_time_iso_8601": "2023-01-16T15:38:23.120632Z",
      "url": "https://files.pythonhosted.org/packages/cd/66/cd6f2eedef09e030c259c4cf4d31d248df90d90d9886a0ad544ba48c72b1/py2api-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}