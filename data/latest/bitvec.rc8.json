{
  "info": {
    "author": null,
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: Rust"
    ],
    "description": "# BitVec\r\nTools written for python for fast and simple bit manipulation\r\nIt is:\r\n* Simpler to manipulate bits than with native python ints\r\n* Able to correctly wrap numbers in arithmetic operations\r\n* Emulate behavior of unsigned, signed integers\r\n* Unit-tested \r\n* Written in Rust (Some operations are quite fast)\r\n## Installation\r\n```\r\npip install bitvec\r\n```\r\n# Unittests\r\n```\r\npython -m unittest python\\tests\\tests.py\r\n```\r\n# PyPi\r\n```\r\nhttps://pypi.org/project/bitvec/\r\n```\r\n\r\nExample use:\r\n```py\r\nfrom bitvec import Binary\r\nfrom bitvec import arithm\r\n\r\n# Creating new number. Size is inferred from leading zeros\r\nx = Binary('0110')\r\ny = Binary(1, lenght=9) # You can specify len too\r\n\r\nprint(f\"{x}, lenght: {len(x)}\") # prints '0110, lenght: 4'\r\n\r\nprint(int(~(x+y))) # prints 504 (0b111111000)\r\n\r\n# Arithmetic correctly wraps and you can check the status\r\n# overflowing_add return the wrapped sum and boolen to indicate if overflow occurs\r\nprint(arithm.overflowing_add(x, '1100')) # (0010, True)\r\n\r\n# Set first bit to high\r\nx[0] = True \r\n\r\n# slice bits\r\nprint(x[:3]) # ('111')\r\n\r\n# sets first 3 bits to '001'\r\nx[:3] = \"001\" \r\n\r\n# convert to hex\r\nprint(x.hex()) # '0x1'\r\n\r\n# every second bit of '0001' \r\nprint(x[::2]) # '01'    ^ ^\r\n\r\n# you can quickly iterate over bits, bytes or any other chunk of bits with .iter(size) function\r\nfor i in x.iter(2):\r\n    print(\"Chunk of two bits: \", i) # i is `01` then `00`\r\n\r\n# count all zeros\r\nprint(x.count_zeros())  # prints 3\r\n\r\n# find indexes of all zeros\r\nprint(x.find_all('0')) # prints [1, 2, 3] \r\n```\r\n\r\n# Brief docs\r\n\r\n## Binary\r\nClass that represent numbers in binary. Wraps arithmetic to bouds of the binary number, \r\nallows for quick and easy bit manipulation.\r\n### Parameters\r\n* object - Any object that can be somehow converted to binary number. \r\nIncluding its representation as string, int, boolean, list of boolean-convertable values, byte-arrays, numpy arrays ect.\r\n* lenght - Target lenght of the number in bits. This number can be inferred from object based on its value, extra zeros ect\r\n* bytes_lenght - Target lenght of the number in bytes. Same as lenght but in bytes.\r\n* sign_behavior - How number should implement sign.\r\n## Examples\r\n\r\n```py\r\n>>> from bitvec import Binary\r\n>>> Binary(\"0110\") # From string representing binary number. Following zeros are used to inherit len of number.\r\n'0110'\r\n>>> Binary(4, lenght=8) # Crate number with 8 bits, 4 is converted to binary and padded with zeros.\r\n'00000100'\r\n>>> Binary(255)\r\n'11111111'\r\n>>> Binary([True, 0, 1, 1.0]) # From array of boolean-likes\r\n'1011'\r\n>>> Binary(\"0000 0001\") # Ignores whitespace\r\n'00000001'\r\n>>> Binary(\"ff Aa C   C\") # Works with hex too\r\n'11111111 10101010 11001100'\r\n```\r\n\r\n## Alias\r\nModule defines factories with predefined sizes and behaviors like u8, u16, i16, i64 ect. These ones can be used as followed:\r\n```py\r\n>>> from bitvec.alias import u8\r\n>>> u8(3)\r\n'00000011'\r\n```\r\n### Conversion\r\n```py\r\n>>> num = Binary(\"FA\") # 11111010\r\n```\r\nTo string (formatted binary)\r\n```py\r\n>>> str(num) # Returns just bits\r\n'11111010'\r\n>>> bin(num)\r\n'0b11111010'\r\n>>> num.bin()\r\n'0b11111010'\r\n>>> num.bin(prefix=False) # remove prefix \r\n'11111010'\r\n>>> hex(num)\r\n'0xfa'\r\n>>> num.hex()\r\n'0xfa'\r\n>>> num.hex(prefx=False)\r\n'fa'\r\n```\r\n```py\r\n>>> int(num)\r\n250\r\n>>> num.int()\r\n250\r\n```\r\n\r\nTo boolean (`False` when `0`)\r\n```py\r\n>>> bool(num)\r\nTrue\r\n```\r\n\r\n## Indexing and Access\r\n### Index\r\nBits of the number can be accessed throught index:\r\n```py\r\n>>> num = Binary(\"FA\") # 11111010\r\n>>> num[0], num[1], num[2] # First 3 bits of the number\r\n(False, True, False)\r\n>>> num[-1] # Last bit\r\nTrue\r\n```\r\n\r\n### Slice\r\n```py\r\n>>> num[:3] # from start to 3th bit (first 3 bits)\r\n'010'\r\n>>> num[-6:] # from 6th bit from the end to end (last 6 bits)\r\n'111110'\r\n>>> num[-6:-2] # From 6th bit from end to 2st bit from end\r\n'1110'\r\n>>> num[2:] # Skip first 2 bits\r\n'111110'\r\n>>> num[:16] # First 16 bits (padded with zeros)\r\n'00000000 11111010'\r\n>>> num[::2] # Every other bit\r\n'1100'\r\n>>> num[::-1] # Reversed\r\n'01011111'\r\n>>> num[[1,3]] # Get second and 4th bit\r\n'11'\r\n```\r\n*NOTE* that behavior of slicing is slighty diffrent from slicing pythons `str` or list, first bit is from far right, not left. You can also exeed len of the value, in this case added bits will be padded with sign extending bit (`0` for unsigned, `sign_bit` for singed)\r\n\r\nNote that slicing makes a copy of the vector\r\n\r\n## Public Methods\r\n### Aliases for slicing number\r\n* `high_byte()` - second 8bits (from 8th to 16th)\r\n* `low_byte()` - first 8bits (from start to 8th)\r\n* `extended_low()` - first 16bits\r\n* `extended_high()` - second 16bits\r\n* `get_byte(index: int)` - nth group of 8-bit chunks.\r\n* `split_at(index: int)` - split number at nth bit.\r\n### Information about number\r\n* `sign_behavior()` - The way that number behaves on extending and converstions `signed` or `unsigned` \r\n* `maximal_value()` - Maximal possibe value than can be hold in this representation and lenght\r\n* `minimal_value()` - Minimal possibe value than can be hold in this representation and lenght\r\n* `is_negative()` - Returns if number is negative\r\n* `sign_extending_bit()` - Returns the boolean that will be used to extend this value to left \r\n* `hex(prefix: bool=True)` - hex representation of this number\r\n* `bin(prefix: bool=True)`- bin representation of this number\r\n* `int()` - casted to python integer\r\n### Searching & Finding Patterns\r\n* `leading_zeros()` - Amount of leading zeros in the number\r\n* `trailing_zeros()` - Amount of trailing zeros in the number\r\n* `leading_ones()` - Amount of leading ones in the number\r\n* `trailing_ones()` - Amount of trailing ones in the number\r\n* `find(sub: bool|int|str|Binary)` - Find first occurence (index) of the pattern\r\n* `find_all(sub: bool|int|str|Binary)` - Find all occurences (index) of the pattern\r\n* `find_zeros()` - Find indexes of zeros\r\n* `find_ones()` - Find indexes of ones\r\n* `count_zeros()` - count how many zeros is in number\r\n* `count_ones()` - count how many ones is in number\r\n### Modifying\r\n* `append(Binary|bool|str|int)` - Appends value to the end\r\n* `prepend(Binary|bool|str|int)` - Appends vakue to the start\r\n* `join(Binary|bool|str|int)` - Joins binary numbers like str.join does\r\n### Iterating\r\n* `bits()` - iterates over bits\r\n* `bytes()` - iterates over bytes\r\n* `iter()` - iterates over chunks or n bits \r\n\r\n### Modify by Index\r\nYou can modify bits with indexes:\r\n```py\r\n>>> num = Binary(0, lenght=8)\r\n>>> num[0] = True # Set first bit to high\r\n>>> num[1] = True # Set second bit to high\r\n>>> num\r\n'00000011'\r\n>>> num[-1] = True # Set last bit to high\r\n>>> num\r\n'10000011'\r\n>>> num[0] = 0 # Set first bit to low\r\n>>> num\r\n'10000010'\r\n```\r\n\r\n### Modify by Slice\r\nYou can select bits by slice and set them, or copy from other number\r\n```py\r\n>>> num = Binary(0, lenght=8)\r\n>>> num[:3] = True\r\n>>> num\r\n'00000111'\r\n>>> num[:3] = \"101\" # Insert 101 in place of first 3 bits of the number\r\n>>> num\r\n'00000101'\r\n>>> num[5:8] = \"111\" # insert 111 in place of bits 5th 6th 7th\r\n>>> num\r\n'11100101'\r\n>>> num[:] = 0 # Set all bits to 0\r\n>>> num\r\n'00000000'\r\n```\r\n### Modify by indeces\r\n```py\r\n>>> num = Binary(0, lenght=8)\r\n>>> num[[1,2,3]] = True # Set first, second and third bit to True\r\n>>> num\r\n>>> '0000 1110'\r\n```\r\n\r\nThere is few rules\r\n* If right side of the slice is convertable to Binary, it will be converted to binary and inserted in place of the selected bits.\r\n* If size of the converted value will be greater than size of the selected bits, it will throw an error.\r\n* If right side is boolean the assigment will set all selectet bits to this value.\r\n* step value is not supported.\r\n\r\n## Iterating over bits or chunks\r\nYou can iterate over bits of the number:\r\n```py\r\n>>> num = Binary(\"FA\") # 11111010\r\n>>> for bit in num: # or num.bits()\r\n...     print(bit, end=\" \")  # bit is Binary class with lenght equal to 1 \r\n0 1 0 1 1 1 1 1\r\n```\r\n\r\nOr over bytes:\r\n```py\r\n>>> num = Binary(\"FA\") # 11111010\r\n>>> list(num.extended_low().bytes())\r\n[11111010, 00000000] \r\n```\r\nOr over any other chunk of bits with `iter` function. For more sophisticated iteration you can use `itertools` or just play with indexing and slicing.\r\n\r\n## Arithm  \r\nIn module `arithm` there are functions that can be used to perform arithmetic/logical operations on binary numbers. That's includes\r\n### add\r\n* `flaged_add(a: Binary, b: Any) -> Tuple[Binary, Flags]:` - add, and return with flags (of, zf, sf)\r\n* `overflowing_add(a: Binary, b: Any) -> Tuple[Binary, bool]:` - add and return overflow flag too\r\n* `wrapping_add(a: Binary, b: Any) -> Binary:` - add and return only result\r\n### sub\r\n* `flaged_sub(a: Binary, b: Any) -> Tuple[Binary, Flags]:` - sub, and return with flags (of, zf, sf)\r\n* `overflowing_sub(a: Binary, b: Any) -> Tuple[Binary, bool]:` - sub and return overflow flag too\r\n* `wrapping_sub(a: Binary, b: Any) -> Binary:` - sub and return only result\r\n### converting\r\n* `cast(binary: Binary, to_type: str) -> Binary:` - change sb without any checks ('transmutate' value)\r\n* `convert(binary: Binary, to_type: str) -> Binary:` - change sb and rise if conversion is impossible\r\n* `extend_to_signed(binary: Binary) -> Binary:` - change to sb and add sign bit if nessesery\r\n* `pad_zeros(binary: Binary, size: int) -> Binary:` - add zeros to match the lenght\r\n* `pad_ones(binary: Binary, size: int) -> Binary:` - add ones to match the lenght\r\n* `pad_sign_extend(binary: Binary, size: int) -> Binary:` - add sign extending bits to match the lenght\r\n* `concat(*args: Any) -> Binary:` - concats args into one long binary\r\n### Neg\r\n* `arithmetic_neg(binary: Binary) -> Binary:` - negates number with 2's logic\r\n* `bitwise_neg(binary: Binary) -> Binary:` - flips bits\r\n### bitwise\r\n* `bitwise_or(binary: Binary, b: Any) -> Binary:`\r\n* `bitwise_and(binary: Binary, b: Any) -> Binary:`\r\n* `bitwise_xor(binary: Binary, b: Any) -> Binary:`\r\n* `bitwise_xnor(binary: Binary, b: Any) -> Binary:`\r\n* `bitwise_nand(binary: Binary, b: Any) -> Binary:`\r\n* `bitwise_nor(binary: Binary, b: Any) -> Binary:`\r\n* `bitwise_map(*args: Any, map: Binary|str|int|dict[Binary|str|int, bool]) -> Binary:` - maps bits by sum-of-products table \r\n### multiply\r\n* `multiply(binary: Binary, b: Any) -> Binary:` - mul and returns whole result\r\n* `overflowing_mul(binary: Binary, b: Any) -> Tuple[Binary, Binary]:` - mul and returns splited result\r\n* `wrapping_mul(binary: Binary, b: Any) -> Binary:` - mul and returns only `len(binary)` first bits\r\n### shifts\r\n* `overflowing_lsh(a: Binary, b: Any) -> Tuple[Binary, Binary]:` - left shifts, returns result and shifted out bits\r\n* `wrapping_lsh(a: Binary, b: Any) -> Binary:` - left shifts, returns result and discards shifted out bits\r\n* `logical_underflowing_rsh(a: Binary, b: Any) -> Tuple[Binary, Binary]:` - right shift padded with zeros, returns result and shifted out bits\r\n* `logical_wrapping_rsh(a: Binary, b: Any) -> Binary:` - right shift padded with zeros, returns result and discards shifted out bits\r\n* `arithmetic_underflowing_rsh(a: Binary, b: Any) -> Tuple[Binary, Binary]:` - right shift paded sign extending bits, returns result and shifted out bits\r\n* `arithmetic_wrapping_rsh(a: Binary, b: Any) -> Binary:` - right shift paded sign extending bits, returns result and discards shifted out bits\r\n\r\n```py\r\n>>> from bitvec import arithm\r\n>>> arithm.wrapping_add(u4(\"1111\"), \"0001\") \r\n'0000' # 15 + 1 = 16, but we have only 4 bits, so we wrap around and get 0\r\n>>> arithm.overflowing_add(u4(\"1111\"), \"0001\")\r\n('0000', True) # If you want to know if there was overflow, use overflowing_add\r\n>>> arithm.overflowing_lsh(u8('0100 1010'), 2)\r\n('00101000', '01') # 0100 1010 << 2 = 0010 1000, but we have only 8 bits, so we wrap around to get 0010 1000, and we have 2 'wrapped' bits from left, so we return them as second value\r\n```\r\nSome functions are implemented for Binary class (usually wrapping ones), so you can use them directly with operators number:\r\n\r\n```py\r\n>>> u8(\"0100 1010\") + u8(\"0000 0010\")\r\n'0100 1100'\r\n```\r\nThat includes:\r\n* `__add__`, `__sub__`, `__mul__`, `__lshift__`, `__rshift__`, `__and__`, `__or__`, `__xor__`, `__invert__`, `__neg__`\r\n\r\n## Creating numbers - details \r\n* If you didn't specify lenght, it will be calculated from value\r\n    * For string it will be lenght of string including leading zeros/ones\r\n    * For int it will be minimal lenght of binary representation of the number\r\n* If you specify lenght, it will be used but if value is longer, it will raise an error\r\n\r\nThis module assumes that for `signed` numbers the most significant bit is sign bit. So for signed number with lenght of `1` (so we have `only` sign_bit that has weight equal to `-1`) possible values will be `0` and `-1`\r\nNumbers with lenght of `0` will be always treated as `0`\r\n### Examples\r\n```py\r\n>>> Binary(0                        )  # lenght will be 0, displayed as ''\r\n>>> Binary(0,               lenght=1)  # lenght will be 1, displayed as '0'\r\n>>> Binary(0,               lenght=2)  # lenght will be 2, displayed as '00'\r\n>>> Binary(0,  signed=True          )  # lenght will be 0, displayed as '0'\r\n>>> Binary(0,  signed=True, lenght=1)  # lenght will be 1, displayed as '0'\r\n>>> Binary(-1, signed=True, lenght=1)  # lenght will be 1, displayed as '1'\r\n>>> Binary(-1, signed=True, lenght=2)  # lenght will be 2, displayed as '11'\r\n>>> Binary(1,  signed=True          )  # lenght will be 2, displayed as '01'\r\n```\r\n\r\nThis behavior is based on the interpretation of the number as a signed integer where sign bit is treated as it has negative weight\r\n```txt\r\nfor unsigned:\r\n\r\n0 0 0 0\r\n \\ \\ \\ \\_ weight 1\r\n  \\ \\ \\__ weight 2\r\n   \\ \\___ weight 4\r\n    \\____ weight 8\r\nValue = sum of weights of bits set to 1\r\n```\r\n\r\n```txt\r\nfor signed:\r\n    \r\n0 0 0 0\r\n \\ \\ \\ \\_ weight  1\r\n  \\ \\ \\__ weight  2\r\n   \\ \\___ weight  4\r\n    \\____ weight -8\r\nValue = sum of weights of bits set to 1\r\n```\r\n\r\n```txt\r\nfor size 1\r\nunsigned:\r\n0\r\n \\_ weight 1\r\nsigned:\r\n0\r\n \\_ weight -1 (last bit)\r\n```\r\nAnd zero-lenght number just fills up the pattern well.\r\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "bitvec",
    "package_url": "https://pypi.org/project/bitvec/",
    "platform": null,
    "project_url": "https://pypi.org/project/bitvec/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/bitvec/0.2.7/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Fast & Simple bit manipulation library implemented in rust",
    "version": "0.2.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16471613,
  "releases": {
    "0.1.8": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "2c03cd96103fa8cff7dffb681621d8685c34db33c40ad9400a460289f61fc91f",
          "md5": "cc4cd4169dc437c22e43d560b884e56d",
          "sha256": "5b6e8740e744b6a49476f6c51f14b38bc5beb90063895a5d9ee729259a2edbe2"
        },
        "downloads": -1,
        "filename": "bitvec-0.1.8-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "cc4cd4169dc437c22e43d560b884e56d",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.9",
        "size": 233753,
        "upload_time": "2022-10-08T10:33:56",
        "upload_time_iso_8601": "2022-10-08T10:33:56.344792Z",
        "url": "https://files.pythonhosted.org/packages/2c/03/cd96103fa8cff7dffb681621d8685c34db33c40ad9400a460289f61fc91f/bitvec-0.1.8-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e0385ce8a77b5ba685f4b079c8f95beda2553590b1f0e9a7dfbbda7cbe128706",
          "md5": "a6219b7b1fa613cc85e07a4ed1b8fe03",
          "sha256": "7a0f20e7b3ebe6d2f0a5d67796994d75b4d005af5e5d7753676f3eeb3c6b72e9"
        },
        "downloads": -1,
        "filename": "bitvec-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a6219b7b1fa613cc85e07a4ed1b8fe03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 263964,
        "upload_time": "2022-10-08T10:33:59",
        "upload_time_iso_8601": "2022-10-08T10:33:59.460861Z",
        "url": "https://files.pythonhosted.org/packages/e0/38/5ce8a77b5ba685f4b079c8f95beda2553590b1f0e9a7dfbbda7cbe128706/bitvec-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c0de883fecd40a694442d9daac6a7306695566325f74984b906c6a8b590296e7",
          "md5": "b8869cdb0a881bad80e0caf0750ea2b6",
          "sha256": "bf420a95cc9ee105c35154ab98bc5193cc97938ac04ffb317bc45bb1281446c1"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.0-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "b8869cdb0a881bad80e0caf0750ea2b6",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.9",
        "size": 233052,
        "upload_time": "2022-10-08T10:38:31",
        "upload_time_iso_8601": "2022-10-08T10:38:31.514270Z",
        "url": "https://files.pythonhosted.org/packages/c0/de/883fecd40a694442d9daac6a7306695566325f74984b906c6a8b590296e7/bitvec-0.2.0-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "36a79ba2ebcb23207203d0fb6d8d1f64872a43ae3e44013afbadf8847a03e8f4",
          "md5": "5ac13a8ac7dd001b4aa6ef6ad7e16a42",
          "sha256": "93ae532323e6a0ac975e845e7053f2b80c1a8a9a35b6610a6453149ff6a8d852"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5ac13a8ac7dd001b4aa6ef6ad7e16a42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 39156,
        "upload_time": "2022-10-08T10:38:34",
        "upload_time_iso_8601": "2022-10-08T10:38:34.610690Z",
        "url": "https://files.pythonhosted.org/packages/36/a7/9ba2ebcb23207203d0fb6d8d1f64872a43ae3e44013afbadf8847a03e8f4/bitvec-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "93b8773e1def4e3d32e6becc215112c230cb09acee3099abd28e6c39e7f6aeb6",
          "md5": "5a9d12e2e0fe40025b8c8bc401779afa",
          "sha256": "b8e1ff7bff92d1bad3faf1e1013cd5e7cdec99272d82abe442c45a2c03fa07b4"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.1-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5a9d12e2e0fe40025b8c8bc401779afa",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.9",
        "size": 235824,
        "upload_time": "2022-10-11T17:07:43",
        "upload_time_iso_8601": "2022-10-11T17:07:43.490571Z",
        "url": "https://files.pythonhosted.org/packages/93/b8/773e1def4e3d32e6becc215112c230cb09acee3099abd28e6c39e7f6aeb6/bitvec-0.2.1-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "85920e3107dbe45806d7d0535ad0a184743855a2e993943e723e2ee7a8508817",
          "md5": "e51ea223239851088f394f2fc03b4210",
          "sha256": "bfd898cf7a601092ba7b6c54367e000439d17509cd43de9469050d48d66ed603"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e51ea223239851088f394f2fc03b4210",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 52239,
        "upload_time": "2022-10-11T17:07:45",
        "upload_time_iso_8601": "2022-10-11T17:07:45.934596Z",
        "url": "https://files.pythonhosted.org/packages/85/92/0e3107dbe45806d7d0535ad0a184743855a2e993943e723e2ee7a8508817/bitvec-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9af4e27d1545e9101c10b527f33daf17b24728a94c19beca7d181369f9898dd7",
          "md5": "b346eb5ecc3682983ab716085fc7890d",
          "sha256": "2f6dc646e0d3720739c088d50c5f282f113e06a3ef29b913117720c21eaea176"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.2-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "b346eb5ecc3682983ab716085fc7890d",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.0",
        "size": 235798,
        "upload_time": "2022-10-11T17:44:42",
        "upload_time_iso_8601": "2022-10-11T17:44:42.482042Z",
        "url": "https://files.pythonhosted.org/packages/9a/f4/e27d1545e9101c10b527f33daf17b24728a94c19beca7d181369f9898dd7/bitvec-0.2.2-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c2b5401aaf0d64d7e28d8aa23a35354eb46315b6bc2b638425c3ba2ead6fa924",
          "md5": "b76732803960dc3d991267ecb9e04ea5",
          "sha256": "8738aee8009f8c047f716dac947a97ff333f911627c0890791c17661325df413"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b76732803960dc3d991267ecb9e04ea5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 52291,
        "upload_time": "2022-10-11T17:44:45",
        "upload_time_iso_8601": "2022-10-11T17:44:45.367009Z",
        "url": "https://files.pythonhosted.org/packages/c2/b5/401aaf0d64d7e28d8aa23a35354eb46315b6bc2b638425c3ba2ead6fa924/bitvec-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9694aa634ca66fd4822b0461fdfe028b17d1a6e98a89376e439636fd74da3de6",
          "md5": "5d9fa9f4a07c467008b98a4bd1ff5633",
          "sha256": "535ed3d44b052eb8cfb2eb4c16e7bb9a16583ba19450e8551037eeccc65aa31e"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.3-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5d9fa9f4a07c467008b98a4bd1ff5633",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.0",
        "size": 236135,
        "upload_time": "2022-10-18T19:15:40",
        "upload_time_iso_8601": "2022-10-18T19:15:40.879305Z",
        "url": "https://files.pythonhosted.org/packages/96/94/aa634ca66fd4822b0461fdfe028b17d1a6e98a89376e439636fd74da3de6/bitvec-0.2.3-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c068002bdb657d5c4db96baf221578d6eea7677e381ddac47431c557fd5c6024",
          "md5": "5344293f77be155cae1896964cb291e3",
          "sha256": "0e5f040648f7339c800430a9b0430516be9999a0ccec9d9bc513bca54de309a3"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5344293f77be155cae1896964cb291e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 56535,
        "upload_time": "2022-10-18T19:15:43",
        "upload_time_iso_8601": "2022-10-18T19:15:43.881451Z",
        "url": "https://files.pythonhosted.org/packages/c0/68/002bdb657d5c4db96baf221578d6eea7677e381ddac47431c557fd5c6024/bitvec-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "6a4336437b3ed3d435026a00e7b89dd2689fddf4442ce3db2682700e86b00097",
          "md5": "ecb1b7a7fa509bcbee964d51408e8fbc",
          "sha256": "bc1a92e500f20141bb76c0724d6a3f971c3609e92b79bd43a70978915d321abb"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.4-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "ecb1b7a7fa509bcbee964d51408e8fbc",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.0",
        "size": 239282,
        "upload_time": "2022-10-24T15:36:53",
        "upload_time_iso_8601": "2022-10-24T15:36:53.558295Z",
        "url": "https://files.pythonhosted.org/packages/6a/43/36437b3ed3d435026a00e7b89dd2689fddf4442ce3db2682700e86b00097/bitvec-0.2.4-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e7a07b474cfc39da4226fc876527a9983c90d08f19210cece4bf4877d059c91a",
          "md5": "066f3013076045fc59a079eec75571c5",
          "sha256": "2763eae7c4b1ad667cf284c901cc9651b401bf9d523d52ea8a89f8d5f8e70b06"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "066f3013076045fc59a079eec75571c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 57937,
        "upload_time": "2022-10-24T15:36:55",
        "upload_time_iso_8601": "2022-10-24T15:36:55.910157Z",
        "url": "https://files.pythonhosted.org/packages/e7/a0/7b474cfc39da4226fc876527a9983c90d08f19210cece4bf4877d059c91a/bitvec-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a933c8b9539dbd7432a2c227911a3c0c6e97042fa58b22d68f3e452521222273",
          "md5": "e65982bb1d8837b93b23291413481a37",
          "sha256": "e6b9a603e8410637ca360ea735b1a08f0465a09156c3a6a7811a70420134e09c"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.6-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e65982bb1d8837b93b23291413481a37",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.0",
        "size": 248919,
        "upload_time": "2023-01-18T10:24:46",
        "upload_time_iso_8601": "2023-01-18T10:24:46.591947Z",
        "url": "https://files.pythonhosted.org/packages/a9/33/c8b9539dbd7432a2c227911a3c0c6e97042fa58b22d68f3e452521222273/bitvec-0.2.6-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "21846c48f7b45819f8ced10da426cdd8144ee3ceb30363f262d2d3b959a532b1",
          "md5": "ecfd20cc4d59a69a84db7f08cd59b12b",
          "sha256": "def725c74fa1d265854cb3224286439229701d228debec4558aeecb23b910ba8"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ecfd20cc4d59a69a84db7f08cd59b12b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 61749,
        "upload_time": "2023-01-18T10:24:49",
        "upload_time_iso_8601": "2023-01-18T10:24:49.607464Z",
        "url": "https://files.pythonhosted.org/packages/21/84/6c48f7b45819f8ced10da426cdd8144ee3ceb30363f262d2d3b959a532b1/bitvec-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d71ace373bd6067c28fc873ffa39e39af3998c0a4772d8788e8d7bab0aeffb6a",
          "md5": "718b4c0c5dac16fe976a958cbd310ec2",
          "sha256": "cb45b5f797f507d7ebbf3095dd94f0d761f7b93f1a973ab41c77f10564751e4a"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.7-cp39-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "718b4c0c5dac16fe976a958cbd310ec2",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.0",
        "size": 243793,
        "upload_time": "2023-01-18T12:44:29",
        "upload_time_iso_8601": "2023-01-18T12:44:29.938601Z",
        "url": "https://files.pythonhosted.org/packages/d7/1a/ce373bd6067c28fc873ffa39e39af3998c0a4772d8788e8d7bab0aeffb6a/bitvec-0.2.7-cp39-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "3a4cfb787b8287adc164707fa117224ba6a3298f6e4483f8b1a0996729457c7a",
          "md5": "1c33798eb666a85f7e68a6a54a5a8b31",
          "sha256": "d9f584f6cecfc325e74437988948279f505cd157beb633e8891e35d43139d5d6"
        },
        "downloads": -1,
        "filename": "bitvec-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "1c33798eb666a85f7e68a6a54a5a8b31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 61882,
        "upload_time": "2023-01-18T12:44:32",
        "upload_time_iso_8601": "2023-01-18T12:44:32.445813Z",
        "url": "https://files.pythonhosted.org/packages/3a/4c/fb787b8287adc164707fa117224ba6a3298f6e4483f8b1a0996729457c7a/bitvec-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d71ace373bd6067c28fc873ffa39e39af3998c0a4772d8788e8d7bab0aeffb6a",
        "md5": "718b4c0c5dac16fe976a958cbd310ec2",
        "sha256": "cb45b5f797f507d7ebbf3095dd94f0d761f7b93f1a973ab41c77f10564751e4a"
      },
      "downloads": -1,
      "filename": "bitvec-0.2.7-cp39-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "718b4c0c5dac16fe976a958cbd310ec2",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.0",
      "size": 243793,
      "upload_time": "2023-01-18T12:44:29",
      "upload_time_iso_8601": "2023-01-18T12:44:29.938601Z",
      "url": "https://files.pythonhosted.org/packages/d7/1a/ce373bd6067c28fc873ffa39e39af3998c0a4772d8788e8d7bab0aeffb6a/bitvec-0.2.7-cp39-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "3a4cfb787b8287adc164707fa117224ba6a3298f6e4483f8b1a0996729457c7a",
        "md5": "1c33798eb666a85f7e68a6a54a5a8b31",
        "sha256": "d9f584f6cecfc325e74437988948279f505cd157beb633e8891e35d43139d5d6"
      },
      "downloads": -1,
      "filename": "bitvec-0.2.7.tar.gz",
      "has_sig": false,
      "md5_digest": "1c33798eb666a85f7e68a6a54a5a8b31",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 61882,
      "upload_time": "2023-01-18T12:44:32",
      "upload_time_iso_8601": "2023-01-18T12:44:32.445813Z",
      "url": "https://files.pythonhosted.org/packages/3a/4c/fb787b8287adc164707fa117224ba6a3298f6e4483f8b1a0996729457c7a/bitvec-0.2.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}