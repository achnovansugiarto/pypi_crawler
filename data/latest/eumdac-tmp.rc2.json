{
  "info": {
    "author": "EUMETSAT",
    "author_email": "ops@eumetsat.int",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# EUMDAC - EUMETSAT Data Access Client\n\n**EUMDAC** is the **EUM**ETSAT **D**ata **A**ccess **C**lientIt provides simple access to the EUMETSAT data of all satellite missions. As a Python library, it comes with many methods and helpers to use EUMETSATs APIs and services, like Data Store and Data Tailor. It also provides a variety of useful command line utilities for data search, translation and processing.\n\n## Prerequisites\n \nYou will need a python environment to run the library implementation of this code. EUMDAC requires Python 3.7 or higher. We recommend that you install the latest Anaconda Python distribution for your operating system (https://www.anaconda.com/).\n\n## Dependencies\nrequests,   ver. 2.26.0, License: Apache-2.0 (LICENSE_APACHE_v2.txt), Copyright 2014 Kenneth Reitz,   info: https://anaconda.org/conda-forge/requests  \\\nresponses,  ver. 0.16.0, License: Apache-2.0 (LICENSE_APACHE_v2.txt), Copyright 2015 David Cramer,    info: https://anaconda.org/conda-forge/responses  \\\nsetuptools, ver. 58.0.4, License: MIT (LICENSE_MIT.txt),              Copyright 2020 Jason R. Coombs, info: https://anaconda.org/conda-forge/setuptools  \n\n## Installing EUMDAC\n\n### Installing with PIP\n\nThe EUMDAC Python package is available through [PyPI](https://pypi.org/):\n```bash\npip install eumdac\n```\n\n### Installing with Conda\n\nTo install EUMDAC on the Anaconda Python distribution, please visit the [EUMETSAT conda-forge page](https://anaconda.org/Eumetsat/repo) for install instructions.\n```bash\nconda install -c eumetsat-forge eumdac\n```\n\n### Installing from source\n\nTo install EUMDAC from the development source, clone the repository and install it locally.\n\n```bash\ngit clone https://gitlab.eumetsat.int/dso/dso_usr_sup/eumdac.git\ncd eumdac\npip install .\n```\n\n## Authors\n* [**Carlos Horn**](mailto://ops@eumetsat.int) - [EUMETSAT](http://www.eumetsat.int)\n* [**Ben Loveday**](mailto://ops@eumetsat.int) - [EUMETSAT](http://www.eumetsat.int)\n* [**Niklas Jordan**](mailto://ops@eumetsat.int) - [EUMETSAT](http://www.eumetsat.int)\n* [**Paulo Carmo**](mailto://ops@eumetsat.int) - [EUMETSAT](http://www.eumetsat.int)\n* [**Rafa de la Hoz**](mailto://ops@eumetsat.int) - [EUMETSAT](http://www.eumetsat.int)\n\nPlease see the AUTHORS.txt file for more information.\n\n## Developer Notes\n\nPlease note that the points in this section are only relevant if you can access the development repository. They do not apply to access via the [public mirror](https://gitlab.eumetsat.int/dso/dso_usr_sup/eumdac.git).\n\n### Contributing\n\nIf you feel like something is missing, should work differently or you find a bug in **eumdac**, please [open an issue on gitlab](https://gitlab.eumetsat.int/dso/dso_usr_sup/eumdac-/issues/new) and select the \nrespective template for feature requests, change requests, or bug reports and fill out the sections.\n\n#### Become a developer\nIf you would like to propose an implementation for an issue, please get in contact with the project maintainer, [Rafael de la Hoz Sevilla](https://gitlab.eumetsat.int/rafadelahoz), to become a developer on the gitlab project. \n\nThen create a new branch with a meaningful name relating the branch with the issue, e.g. `feature_download_progress_indicator`. \nIf you want to get feedback or discuss design choices of your implementation, while the branch is still under active development, you can already create a *Draft* merge request. Any implementation related conversation should take place in corresponding merge requests.\n\nA *Draft* MR will already enable gitlab to run style checks and simplified unit testing on your work. Once, your development reaches a certain degree of maturity, where the implementation actually solves the issue, you can remove the *Draft* status. This enables enhanced code testing and signals the maintainer, that the branch is ready for review. If the reviewers ask for larger changes, you can always change the MR back to *Draft* for the implementation.\n\nIf your MR passes all tests and is accepted by the reviewers, the final decision on when or at all to merge is on the maintainer (product owner). Please be aware, that there could be merge conflicts with other MRs or simply just other solution candidates.\n\n#### Testing\nYou can avoid failing pipelines by local testing. We are using `flake8`, `black` and `pytest`, which you can already use locally.\n\n```bash\npip install .[test] black flake8\nflake8 eumdac/ tests/ setup.py\nblack -l 100 eumdac/ tests/ setup.py\npytest --cov eumdac --cov-report=term-missing --full-trace\n```\n\nOr you can use `tox` and `tox-conda` to run the entire testing pipeline.\n\n### Mocking in Tests\n\nIn Tests, we avoid requests hitting the real Data Services web API, because the test suite should be independent of the actual availability of the web services in order to be fast and reproducible. Since the actual requests are hidden behind the object methods and properties, there are two strategies. We can either mock the low level object doing the requests, or we can mock the responses by the web API. \n\nFor the first case, it might be useful to know, that all objects are lazy loading, which means that the instance creation will not trigger any request. Relevant request are only done on demand and populate some private attributes. This can be used to mock those objects by populating these private attributes \nwith mocked values.\n\n**Example**\n```python\n# mocking the token\ncredentials = (\"abc\", \"xyz\")\ntoken = AccessToken(credentials)\ntoken._access_token = \"mock_token_value\"\ntoken._expiration = time.time() + 1000\n\nassert token.access_token == \"mock_token_value\"\n\n# mocking a Collection\ndatastore = DataStore(token)\nmy_collection = Collection(\"MY-COLLECTION-ID\", datastore)\nmy_collection._properties = {\n    \"title\": \"THE COLLECTION TITLE\"\n}\n\nassert my_collection.title == \"THE COLLECTION TITLE\"\n```\n\nFor the letter case, we use the library `responses` which allows to register predefined responses for the `requests` library and prevents unregistered requests to pass through. To be more precise, we have a custom `unittest.TestCase` implementation which has the main purpose of recording and replaying responses from the real web services. The idea is to dual-use these tests for integration tests by hitting the real endpoints and for unit tests by replaying the recorded responses. Still there might be some responses, which cannot be reproduced on demand from the real API, e.g. returning a 500 error code by the server when the service is down. For those cases, a test can be excluded when recording and register handcrafted responses.\n\n**Example**\n```python\nclass MyTest(DataServiceTestCase):\n    def test_something(self):\n        # this is intended to hit real endpoints\n        ...\n\n    @unittest.skipIf(INTEGRATION_TESTING, \"Reason for sipping, e.g. irreproducible on demand!\")\n    def test_something_else(self):\n        # this should never leave the system\n        url = \"https://www.foo.bar\"\n        self.requests_mock.add(\"GET\", url, json={\"data\": \"the data\"})\n        response = requests.get(url)\n        assert response.json() == {\"data\": \"the data\"}\n```\n\nNote, that in order to hit real endpoints, the environment variables `CONSUMER_KEY` and `CONSUMER_SECRET` need to be set in the test environment. For example;\n\n```bash\nCONSUMER_KEY=abc CONSUMER_SECRET=xyz tox -e integration\n```\nOr in order to re-record the responses, run\n```bash\n# re-record everything\nINTEGRATION_TESTING=on CONSUMER_KEY=abc CONSUMER_SECRET=xyz pytest\n# re-record responses for a specific test file, e.g. token tests\nINTEGRATION_TESTING=on CONSUMER_KEY=abc CONSUMER_SECRET=xyz pytest tests/test_token.py\n```\n\nMore information about the mock object library you can find in the [python documentation](https://docs.python.org/3/library/unittest.mock.html).\n\n## License\n \nThis code is licensed under an MIT license. See file LICENSE.txt for details on the usage and distribution terms. No dependencies are distributed as part of this package.\n\nAll product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.eumetsat.int/eumetlab/data-services/eumdac",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eumdac-tmp",
    "package_url": "https://pypi.org/project/eumdac-tmp/",
    "platform": null,
    "project_url": "https://pypi.org/project/eumdac-tmp/",
    "project_urls": {
      "Homepage": "https://gitlab.eumetsat.int/eumetlab/data-services/eumdac"
    },
    "release_url": "https://pypi.org/project/eumdac-tmp/2.0.0rc3/",
    "requires_dist": [
      "requests (>=2.5.0)",
      "pyyaml (>=5.1)",
      "mypy ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "responses ; extra == 'test'",
      "types-requests ; extra == 'test'",
      "types-setuptools ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "EUMETSAT Data Access Client",
    "version": "2.0.0rc3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15411627,
  "releases": {
    "2.0.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acf8c5a8cae0c50269b763bb161fe0b8383ac0d0aea2d54e45eb9c9dd4124353",
          "md5": "696bb848989b8d1811c61e8e75be6ba3",
          "sha256": "bf2092b56174290fdb899a9bc20f32926ee38a0a60b649a0c1c1c5b7fbc5e923"
        },
        "downloads": -1,
        "filename": "eumdac_tmp-2.0.0rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "696bb848989b8d1811c61e8e75be6ba3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 50739,
        "upload_time": "2022-10-14T12:20:30",
        "upload_time_iso_8601": "2022-10-14T12:20:30.278242Z",
        "url": "https://files.pythonhosted.org/packages/ac/f8/c5a8cae0c50269b763bb161fe0b8383ac0d0aea2d54e45eb9c9dd4124353/eumdac_tmp-2.0.0rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f4b5d24b5ad441eeec014648bd88b3a0e266c21b2fb708542cea595286ed918",
          "md5": "361765ff14bc862d3549579d8fdf80bf",
          "sha256": "2328c21632acda52bcf394150c6756b880c717f5e605b0aa6988d715882c9c2b"
        },
        "downloads": -1,
        "filename": "eumdac-tmp-2.0.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "361765ff14bc862d3549579d8fdf80bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45356,
        "upload_time": "2022-10-14T12:20:32",
        "upload_time_iso_8601": "2022-10-14T12:20:32.145177Z",
        "url": "https://files.pythonhosted.org/packages/7f/4b/5d24b5ad441eeec014648bd88b3a0e266c21b2fb708542cea595286ed918/eumdac-tmp-2.0.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "beee2062af5382461936fdd78a6d9bfd86ecefb44c3b559434ab0a3c125172a7",
          "md5": "8447f097657488804c4d2a001230e2e0",
          "sha256": "cceb8f3e16d42bb84f5b33e175314cb339a9046218252a0912b7b46d48cdc913"
        },
        "downloads": -1,
        "filename": "eumdac_tmp-2.0.0rc3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8447f097657488804c4d2a001230e2e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 50743,
        "upload_time": "2022-10-14T13:44:23",
        "upload_time_iso_8601": "2022-10-14T13:44:23.906784Z",
        "url": "https://files.pythonhosted.org/packages/be/ee/2062af5382461936fdd78a6d9bfd86ecefb44c3b559434ab0a3c125172a7/eumdac_tmp-2.0.0rc3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "861443f44c960a65f4a6b10f0ab744e1f344c0a5444b747d1a027ab80cda9f01",
          "md5": "675fa769cf2b2734aa264bfc732e929d",
          "sha256": "b10b42f3049eb1ca2b7ce28516ab16bfdb767d86932b050caf2caceafb9d8dd8"
        },
        "downloads": -1,
        "filename": "eumdac-tmp-2.0.0rc3.tar.gz",
        "has_sig": false,
        "md5_digest": "675fa769cf2b2734aa264bfc732e929d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45353,
        "upload_time": "2022-10-14T13:44:26",
        "upload_time_iso_8601": "2022-10-14T13:44:26.043823Z",
        "url": "https://files.pythonhosted.org/packages/86/14/43f44c960a65f4a6b10f0ab744e1f344c0a5444b747d1a027ab80cda9f01/eumdac-tmp-2.0.0rc3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "beee2062af5382461936fdd78a6d9bfd86ecefb44c3b559434ab0a3c125172a7",
        "md5": "8447f097657488804c4d2a001230e2e0",
        "sha256": "cceb8f3e16d42bb84f5b33e175314cb339a9046218252a0912b7b46d48cdc913"
      },
      "downloads": -1,
      "filename": "eumdac_tmp-2.0.0rc3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8447f097657488804c4d2a001230e2e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 50743,
      "upload_time": "2022-10-14T13:44:23",
      "upload_time_iso_8601": "2022-10-14T13:44:23.906784Z",
      "url": "https://files.pythonhosted.org/packages/be/ee/2062af5382461936fdd78a6d9bfd86ecefb44c3b559434ab0a3c125172a7/eumdac_tmp-2.0.0rc3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "861443f44c960a65f4a6b10f0ab744e1f344c0a5444b747d1a027ab80cda9f01",
        "md5": "675fa769cf2b2734aa264bfc732e929d",
        "sha256": "b10b42f3049eb1ca2b7ce28516ab16bfdb767d86932b050caf2caceafb9d8dd8"
      },
      "downloads": -1,
      "filename": "eumdac-tmp-2.0.0rc3.tar.gz",
      "has_sig": false,
      "md5_digest": "675fa769cf2b2734aa264bfc732e929d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 45353,
      "upload_time": "2022-10-14T13:44:26",
      "upload_time_iso_8601": "2022-10-14T13:44:26.043823Z",
      "url": "https://files.pythonhosted.org/packages/86/14/43f44c960a65f4a6b10f0ab744e1f344c0a5444b747d1a027ab80cda9f01/eumdac-tmp-2.0.0rc3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}