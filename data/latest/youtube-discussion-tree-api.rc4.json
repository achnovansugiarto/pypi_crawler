{
  "info": {
    "author": "Quim10^-12",
    "author_email": "quimpm99@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# YouTube Discussion Tree API \n\n[![Build Status](https://travis-ci.com/quimpm/youtube_discussion_tree.svg?branch=main)](https://travis-ci.com/quimpm/youtube_discussion_tree)[![Coverage Status](https://coveralls.io/repos/github/quimpm/youtube_discussion_tree/badge.svg)](https://coveralls.io/github/quimpm/youtube_discussion_tree)[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](http://opensource.org/licenses/MIT)[![image](https://img.shields.io/pypi/v/youtube-discussion-tree-api.svg)](https://pypi.org/project/youtube-discussion-tree-api/) [![image](https://img.shields.io/pypi/pyversions/youtube-discussion-tree-api.svg)](https://pypi.org/project/youtube-discussion-tree-api/)\n\nThis is a python API that allows you to obtain the discussion \nthat occurs in the comments of a YouTube video as a tree structure.\nIt also controls the quota usage that consumes your implementation over\nYouTube Data API through this library, and allows you to represent and \nserialize the discussion tree.\n\n## Install\n\nIt is recommended to install it through pip:\n\n\n```bash\npip install youtube_discussion_tree_api\n```\n\nAlso, if you want to use it from source you will have to install manually the dependencies:\n\n```bash\npip install -r requeriments.txt\n```\n\n## API\n\nNow we're going to dive into the features that the API provide and how to use them.\n\n### Generating a tree\n\nThis is the main feature of the API. The easiest way of generating a tree is:\n\n```python\nfrom youtube_discussion_tree_api import YoutubeDiscussionTreeApi\n\napi = YoutubeDiscussionTreeApi(\"<put your gcs api and services api key>\")\ntree = api.generateTree(\"put the videoId\")\n\n```\n\nFirst, you create a YoutubeDiscussionTreeApi object with the API KEY of your GCP project. This object\nis thought as the template object that holds all the interactions with the YouTube Data API.\n\nThen, we call the method generateTree, that give us as a response a YoutubeDiscussionTree object that\nholds the tree structure.\n\nEach node of the tree is a Node object:\n\n```python\nclass Node:\n    id: int\n    author_name: str\n    author_id: int\n    text: str\n    like_count: int\n    parent_id: int\n    published_at : str\n\n```\nThe **root** node represents the video. In the text field of the root Node, a transcription of the whole video is provided. \nThe API can only generate trees of the videos that have manual or auto-generated English subtitles.\n\nThe method generateTree has two optional parameters that are:\n* sumarization -> bool: This parameter is for applying a summarization to the transcription of the video.\n* conflict_solving_algorithm -> function: This parameter is a function that does the resolution of conflicts that we face when generating the tree. Will be explained later.\n\nWe can get the list of all the nodes of our tree by doing:\n\n```python\ntree.get_nodes()\n```\n\n### Serializing a tree\n\nWe can serialize our tree into a xml file:\n\n```python\ntree.serialize(\"outuput_file.xml\")\n```\n\nThis will construct a xml file with the following structure:\n\n```xml\n<entailment-corpus num_edges=\"162\" num_nodes=\"163\">\n    <argument-list>\n        ...\n    <argument-list>\n    <argument-pairs>\n        ...\n    <argument-pairs>\n</entailment-corpus>\n\n```\nIn argument-list component there will be all the comment nodes with some information of the Node objects. \nIn the argument-pairs component, there will be all the edges that communicate the nodes described in the previous component.\n\nA node will be represented as:\n\n```xml\n<arg author=\"Flash Man\" author_id=\"UCeFi97LktRRtpCvi_vqEmfg\" id=\"Ugh8N1Ch9gCr-HgCoAEC\" likeCount=\"1145\">\n    My dad is an expert dragon slayer. \"eeer but I don't see any dragons around... \" You're welcome.\n</arg>\n```\n\nAnd a pair as:\n\n```xml\n<pair id=\"1\">\n    <t id=\"Ugh8N1Ch9gCr-HgCoAEC\"/>\n    <h id=\"LnX3B9oaKzw\"/>\n</pair>\n```\nWhere h is the destination and t the origin\n\nAlso, the function serialize() has an optional argument called **aditional_atributes**. You can pass a function that receives a Node object and outputs a {key : value} dictionary  \nthat will represent the additional attributes that you would like to add to the xml tags that represent the Nodes. The key will be the attribute name and the value will be the value of the attribute. \n\n```python\ndef my_additional_atributes(node):\n    return {\n        \"date\" : node.publishedAt\n        \"sentiment\" : sentiment_analysis(node.txt) #Imagine we have a function that does sentiment analysis from an input text\n    }\n\ntree.serialize(\"outuput_file.xml\", my_aditional_atributes)\n```\nThe nodes will have the following form:\n\n```xml\n<arg author=\"Flash Man\" author_id=\"UCeFi97LktRRtpCvi_vqEmfg\" id=\"Ugh8N1Ch9gCr-HgCoAEC\" likeCount=\"1145\" date=\"12-12-2012\" sentiment=\"NEGATIVE\">\n    My dad is an expert dragon slayer. \"eeer but I don't see any dragons around... \" You're welcome.\n</arg>\n\n```\n\n### Representing a tree\n\nIf you want to see a representation of the tree, you can do:\n\n```\ntree.show()\n```\nAnd this will output a tree like:\n```\nLnX3B9oaKzw\n├── Ugg06_f0qAVH6HgCoAEC\n├── Ugg662Arr0neQXgCoAEC\n│   ├── Ugg662Arr0neQXgCoAEC.8LvCxcl0tY18LvI0OyzxUW\n│   ├── Ugg662Arr0neQXgCoAEC.8LvCxcl0tY18LvIRl9v4kU\n│   ├── Ugg662Arr0neQXgCoAEC.8LvCxcl0tY18LvIlAkRi3e\n                    .\n                    .\n                    .\n```\n\n### Conflict Solving Algorithm\n\nIf you read the \"Generating a tree\" part, you may have seen that in the generateTree function there is an optional\nargument for a conflict solving algorithm. Well, lets explain what we define as a conflict.\n\nWe say that there is a conflict when a user wants to reply to another user's comment, but this second one\nhas made more than one contribution previously to the comment thread. This is because YouTube doesn't store \nthe reference to the comment of the comment thread that we want to reply. It automatically sets the parent id\nof the reply to the top level comment of the comment thread, instead of the id of the comment that we are replying to. \n\nIn order to solve that, in this library there is an implementation of an algorithm that solve this conflicts automatically.\nThe algorithm it's an implementation of the tf-idf algorithm that selects a candidate from a set of candidates for the \nreply that we don't know to which of this candidate belongs.\n\nIn order to make this library as flexible as possible, it's open to accept a function with an implementation of a \nconflict solving  algorithm made by you through the optional argument of generateTree.\n\nThis function will receive as parameter the reply Node and a set of Node candidates.\n\n### Search videos \n\nThrough the YoutubeDiscussionTreeAPI object, you can also request for a set of videos that are found matching a given query:\n\n```python\nfrom youtube_discussion_tree_api import YoutubeDiscussionTreeApi\n\napi = YoutubeDiscussionTreeApi(\"<put your gcs api and services api key>\")\nvideos = api.search_videos(\"Functional Programming\")\n\n```\nThis will return a set with 5 Video objects:\n\n```python\nclass Video:\n    id: int\n    title : str\n    description: str\n    channel_name: str\n    channel_id: str\n    published_at : str\n```\n\nYou can expand or diminish the number of results in the result set by passing another optional parameter: \n\n```python\nfrom youtube_discussion_tree_api import YoutubeDiscussionTreeApi\n\napi = YoutubeDiscussionTreeApi(\"<put your gcs api and services api key>\")\nvideos = api.search_videos(\"Functional Programming\", 50)\n```\n\n### Quota\n\nAdditionally, this library maintains the number of quota that your implementation is consuming against the \nGoogle YouTube API service. This is because the free service is limited to a quota of 10000 daily. Each tree\ngeneration consumes 2 quota, and each video search consumes 100  quota.\n\nA data object is serialized in a pickle file. You will see that it will appear in the path in which your script \nthat uses the library is. It automatically resets its value day after day.\n\nIn order to get quota information, you can do:\n\n```python\nfrom youtube_discussion_tree_api import YoutubeDiscussionTreeApi\n\napi = YoutubeDiscussionTreeApi(\"<put your gcs api and services api key>\")\napi.quota_info()\n```\n\nThis will give you a dict like:\n\n```python\n{\n    \"limit\" : 10000\n    \"spent\" : <num-expended-quota>\n}\n```\n\n## Author Note\n\nHey, Quim here! :man_technologist:\n\nSo, this is it for the YouTube Discussion Tree API, hope you enjoy the package! If you have any comment(xD)\non the implementation, or you want to share some features that can be added to de library, hit me up!\nAny kind of feedback will be pleasantly accepted! :smile:\n\nQuim10^-12\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/quimpm/youtube_discussion_tree",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "youtube-discussion-tree-api",
    "package_url": "https://pypi.org/project/youtube-discussion-tree-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/youtube-discussion-tree-api/",
    "project_urls": {
      "Homepage": "https://github.com/quimpm/youtube_discussion_tree"
    },
    "release_url": "https://pypi.org/project/youtube-discussion-tree-api/1.0.3/",
    "requires_dist": [
      "nltk",
      "requests",
      "torch",
      "torchaudio",
      "torchvision",
      "transformers",
      "treelib",
      "youtube-transcript-api"
    ],
    "requires_python": "",
    "summary": "This is a python API that allows you to obtain the discussion that occurs in the comments of a YouTube video as a tree structure.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10731650,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28bfbf8155ca088fdd3578471260d054f250ad95438aa010ca7cd4e78415e282",
          "md5": "6661d491842725b4bb278010ee885b0f",
          "sha256": "9d157981ea8c6f267f173b328b583a19366083ecd1a7ed6bf97f264969cd29ad"
        },
        "downloads": -1,
        "filename": "youtube_discussion_tree_api-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6661d491842725b4bb278010ee885b0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19209,
        "upload_time": "2021-06-17T11:19:58",
        "upload_time_iso_8601": "2021-06-17T11:19:58.065618Z",
        "url": "https://files.pythonhosted.org/packages/28/bf/bf8155ca088fdd3578471260d054f250ad95438aa010ca7cd4e78415e282/youtube_discussion_tree_api-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0accf43fadb8073bd5288cd190ab57ec6239b4a77486795997c1490614d673f",
          "md5": "cae8e58d5b5e9816bc8db732c3320c18",
          "sha256": "d323385c2cd1cb0b05ba90c0fc36ca9ad6c6c1fce58c958f65ab369e91982a05"
        },
        "downloads": -1,
        "filename": "youtube_discussion_tree_api-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cae8e58d5b5e9816bc8db732c3320c18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16367,
        "upload_time": "2021-06-17T11:20:00",
        "upload_time_iso_8601": "2021-06-17T11:20:00.059886Z",
        "url": "https://files.pythonhosted.org/packages/a0/ac/cf43fadb8073bd5288cd190ab57ec6239b4a77486795997c1490614d673f/youtube_discussion_tree_api-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db4a3fb47407d6d7ae4475bb0ed4dc2c97e66f8bede137bf894496eaccca21a9",
          "md5": "f00d9fe36510be80c98b6b610d653210",
          "sha256": "6c1563ebfa599a8c840c35d1cf50e5c0faf4c413b6bb7037c07fdb61e1bf2311"
        },
        "downloads": -1,
        "filename": "youtube_discussion_tree_api-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f00d9fe36510be80c98b6b610d653210",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19530,
        "upload_time": "2021-06-18T17:20:30",
        "upload_time_iso_8601": "2021-06-18T17:20:30.779312Z",
        "url": "https://files.pythonhosted.org/packages/db/4a/3fb47407d6d7ae4475bb0ed4dc2c97e66f8bede137bf894496eaccca21a9/youtube_discussion_tree_api-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d20a163f88efd24e6502f6740737c836dc2e45d784599dc7a797be3c69d78d1",
          "md5": "2f8743dc72f0945e75f21c8f5eec63f6",
          "sha256": "14e17ceb76ceb11eef7d3658e589d735b1f9a08793f8ba1446e96ba4e31409f5"
        },
        "downloads": -1,
        "filename": "youtube_discussion_tree_api-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2f8743dc72f0945e75f21c8f5eec63f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17053,
        "upload_time": "2021-06-18T17:20:33",
        "upload_time_iso_8601": "2021-06-18T17:20:33.636541Z",
        "url": "https://files.pythonhosted.org/packages/8d/20/a163f88efd24e6502f6740737c836dc2e45d784599dc7a797be3c69d78d1/youtube_discussion_tree_api-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f14219dc5d1fb8d81bd519f1a104afad0b718a4f67435b95a35dd3e4f4a227ef",
          "md5": "ce1c85eadad692e77ec84eb0c178597a",
          "sha256": "6f5765b98c014514c1b1dac3ece255b7528fd63fe248b31116fec4b4eea43dc6"
        },
        "downloads": -1,
        "filename": "youtube_discussion_tree_api-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce1c85eadad692e77ec84eb0c178597a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19676,
        "upload_time": "2021-06-23T16:18:35",
        "upload_time_iso_8601": "2021-06-23T16:18:35.933025Z",
        "url": "https://files.pythonhosted.org/packages/f1/42/19dc5d1fb8d81bd519f1a104afad0b718a4f67435b95a35dd3e4f4a227ef/youtube_discussion_tree_api-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "457484fb2c794b1fd427360081bd7e688d18cc0acd3a1d09717dff788c34538f",
          "md5": "e133fe689c1ca63fc42c027679e3840e",
          "sha256": "207a481a38354335392dd5f082d94fa2fd7ca45cf040003b5dbc591892a74000"
        },
        "downloads": -1,
        "filename": "youtube_discussion_tree_api-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e133fe689c1ca63fc42c027679e3840e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17122,
        "upload_time": "2021-06-23T16:18:38",
        "upload_time_iso_8601": "2021-06-23T16:18:38.765964Z",
        "url": "https://files.pythonhosted.org/packages/45/74/84fb2c794b1fd427360081bd7e688d18cc0acd3a1d09717dff788c34538f/youtube_discussion_tree_api-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af3cae8716e17b74c6558e58ed5a5ca5b60d548e85b5c6583c087e0c104bae57",
          "md5": "8f65e282abe1b8b129a82ae305462963",
          "sha256": "c28589713795cab8fdb26da796662d0789bdb054e850d1534f662c72532d33a7"
        },
        "downloads": -1,
        "filename": "youtube_discussion_tree_api-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f65e282abe1b8b129a82ae305462963",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19757,
        "upload_time": "2021-06-24T12:06:34",
        "upload_time_iso_8601": "2021-06-24T12:06:34.186361Z",
        "url": "https://files.pythonhosted.org/packages/af/3c/ae8716e17b74c6558e58ed5a5ca5b60d548e85b5c6583c087e0c104bae57/youtube_discussion_tree_api-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8a8da5fcf01baa5bca305cd55065ad2b14aad038ea95e7c32f9989babc90718",
          "md5": "c591756f7451027036607a50cb45b691",
          "sha256": "a324b4488de7cd6040996369088eddf5ec795dd317f1417a86b97ea67855cb1d"
        },
        "downloads": -1,
        "filename": "youtube_discussion_tree_api-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c591756f7451027036607a50cb45b691",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17318,
        "upload_time": "2021-06-24T12:06:39",
        "upload_time_iso_8601": "2021-06-24T12:06:39.341482Z",
        "url": "https://files.pythonhosted.org/packages/b8/a8/da5fcf01baa5bca305cd55065ad2b14aad038ea95e7c32f9989babc90718/youtube_discussion_tree_api-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af3cae8716e17b74c6558e58ed5a5ca5b60d548e85b5c6583c087e0c104bae57",
        "md5": "8f65e282abe1b8b129a82ae305462963",
        "sha256": "c28589713795cab8fdb26da796662d0789bdb054e850d1534f662c72532d33a7"
      },
      "downloads": -1,
      "filename": "youtube_discussion_tree_api-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f65e282abe1b8b129a82ae305462963",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19757,
      "upload_time": "2021-06-24T12:06:34",
      "upload_time_iso_8601": "2021-06-24T12:06:34.186361Z",
      "url": "https://files.pythonhosted.org/packages/af/3c/ae8716e17b74c6558e58ed5a5ca5b60d548e85b5c6583c087e0c104bae57/youtube_discussion_tree_api-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8a8da5fcf01baa5bca305cd55065ad2b14aad038ea95e7c32f9989babc90718",
        "md5": "c591756f7451027036607a50cb45b691",
        "sha256": "a324b4488de7cd6040996369088eddf5ec795dd317f1417a86b97ea67855cb1d"
      },
      "downloads": -1,
      "filename": "youtube_discussion_tree_api-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c591756f7451027036607a50cb45b691",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17318,
      "upload_time": "2021-06-24T12:06:39",
      "upload_time_iso_8601": "2021-06-24T12:06:39.341482Z",
      "url": "https://files.pythonhosted.org/packages/b8/a8/da5fcf01baa5bca305cd55065ad2b14aad038ea95e7c32f9989babc90718/youtube_discussion_tree_api-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}