{
  "info": {
    "author": "Anubhav Chhabra",
    "author_email": "chhabra.anubhav1997@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# KFoldImblearn Introduction\n\n    KFoldImblearn handles the resampling of data in a k fold fashion, taking care of\n    information leakage so that our results are not overly optimistic. It is built over\n    the imblearn package and is compatible with all the oversampling as well as under\n    sampling methods provided in the imblearn package.\n\n    While performing over-sampling, under-sampling and balanced-sampling we need to make\n    sure that we are not touching/manipulating our validation or test set. Making changes\n    to our validation set can lead us to have results that are overly optimistic.\n    This over optimism of the results is called information leakage caused by the sampling\n    techniques applied to the test set as well.\n\n    In a typical holdout method (holdout simply means splitting data into test and train),\n    over-optimism can be handled by simply resampling the training data, training the models\n    on this resampled training data and finally testing it on the untouched test data.\n\n    But if we want to apply sampling techniques over k folds\n    (because we want to test our model over the k folds and want to have a\n    general idea of how it is performing), then we would have to frame the logic\n    and write the code ourselves. KFoldImblearn does the exact same process for us.\n\n-----------------------------------------------\n\n**The wrong approach of performing sampling in KFold Cross Validation:**\n\nMost of the people would perform up-sampling/down-sampling on the whole dataset, and then would apply\nK-Fold Cross Validation on the complete dataset. This is a wrong way as this approach is over-optimistic\nand leads to information leakage. The validation set should always be kept untouched, or in other words no \nsampling should be applied to the validation set.\n\nThe correct approach would be first splitting the data into multiple folds and then applying sampling\njust to the training data and let the validation data be as is.\n\n**The image below states the correct approach of how the dataset should be resampled in a K-fold fashion.**\n\n![alt text](https://github.com/anubhav562/KFoldImblearn/blob/main/docs/K_Fold_Imblearn_Banner.png?raw=True)\n\nThe correct way of performing Cross validation in a K-fold fashion is described above, and this is exactly what \nKFoldImblearn offers.\n\nKFoldImblearn internally uses [joblib](https://joblib.readthedocs.io/en/latest/) to spawn multiple python processes so as to fasten the resampling of \nvarious folds in a parallel fashion. The n_jobs parameter is used to specify the number of CPU cores we want to use.\n\n\n------------------------------------------------\n\n### Installation\n\n    pip install -i https://test.pypi.org/simple/ Test-KFoldImblearn==1.0.6\n\nIf you get any third-party module errors while installing the package such as \n**\"could not find a version that satisfies the requirement <package_name>==X.X.X\"**\nthen simply pip install the package mentioned by using the command below:\n\n    pip install <package_name>==X.X.X\n\nAnd then again try installing install KFoldImblearn\n\nIf you get errors relating to imbalanced-learn package, try running this command:\n\n    pip install -U imbalanced-learn\n\nafter this try pip installing KFoldImblearn again.\n\n### Instantiating\n\n```python\nfrom k_fold_imblearn import KFoldImblearn\n\nk_fold_imblearn_object = KFoldImblearn(\n        sampling_method=\"RandomOverSampler\",\n        k_folds=10,\n        k_fold_shuffle=True,\n        logging_level=10\n)\n\n\"\"\"\nConstructor Parameters\n    ----------\n    sampling_method : string\n        The sampling method which is the user wants to apply to the data in a k-fold\n        fashion. Can take the following values:\n\n        \"ADASYN\", \"BorderlineSMOTE\", \"KMeansSMOTE\", \"RandomOverSampler\", \"SMOTE\",\n        \"SMOTENC\", \"SVMSMOTE\", \"CondensedNearestNeighbour\", \"EditedNearestNeighbours\",\n        \"RepeatedEditedNearestNeighbours\", \"AllKNN\", \"InstanceHardnessThreshold\", \"NearMiss\",\n        \"NeighbourhoodCleaningRule\", \"OneSidedSelection\", \"RandomUnderSampler\", \"TomekLinks\"\n\n        The above sampling methods contain both over and under sampling techniques contained\n        in the imblearn package.\n\n    sampling_params : dict, default=None\n        A parameter dictionary containing the arguments that will be fed to the sampling_method\n        mentioned above. For eg. if we decide to choose \"SMOTE\", then sampling_params will be a\n         dict of arguments that one will use while instantiating the SMOTE class\n\n    k_folds : int, default=5\n        Number of folds. Must be at least 2.\n\n    k_fold_shuffle : bool, default=False\n        Whether to shuffle the data before splitting into batches.\n        Note that the samples within each split will not be shuffled.\n\n    k_fold_random_state : int,  default=None\n        When `k_fold_shuffle` is True, `k_fold_random_state` affects the ordering of the\n        indices, which controls the randomness of each fold. Otherwise, this\n        parameter has no effect.\n\n    logging_level : int, default=50\n        logging level for the custom logger setup for this class.\n        values that can be assigned: 0, 10, 20, 30, 40 and 50\n\"\"\"\n```\n\n\n### Complete Example\n\n```python\nfrom k_fold_imblearn import KFoldImblearn\nfrom sklearn.datasets import make_classification\nimport pandas as pd\nfrom datetime import datetime\n\n# you can use your own X and y here, we have just made dummy data for the sake of example.\nX, y = make_classification(n_samples=10000, weights=(0.1, ))\n\n# instantiate KFoldImblearn by simply providing sampling_method and k_folds\nk_fold_imblearn_object = KFoldImblearn(\n        sampling_method=\"SMOTE\",\n        k_folds=10,\n        k_fold_shuffle=True,\n        logging_level=10\n)\n\nstart_time = datetime.today()\n\n# call the k_fold_fit_resample method by passing dataframe of X, y, verbose and n_jobs\nk_fold_imblearn_object.k_fold_fit_resample(pd.DataFrame(X), pd.DataFrame(y), verbose=10, n_jobs=8)\n\n# accessing the re-sampled dataset list\n'''\nthis dataset list is a list of length 'k', each element is a dictionary having 2 keys: \"resampled_train_set\" and \n\"validation_set\". Both the keys contain a tuple of 2 DataFrames (X and y)\n'''\ndataset_list = k_fold_imblearn_object.k_fold_dataset_list  # classifier are applied to this list of datasets.\n\n# saving the dataset list as a pickle file\nk_fold_imblearn_object.serialise_k_datasets_list(filepath=\"dataset_list.pkl\")\n\nend_time = datetime.today()\nprint(f\"Total time taken: {end_time-start_time}\")\n\n# printing the object\nprint(k_fold_imblearn_object)\n```\n\n**Output**\n```\n[Parallel(n_jobs=8)]: Using backend LokyBackend with 8 concurrent workers.\n[Parallel(n_jobs=8)]: Done   3 out of  10 | elapsed:    6.6s remaining:   15.6s\n[Parallel(n_jobs=8)]: Done   5 out of  10 | elapsed:    6.6s remaining:    6.6s\n[Parallel(n_jobs=8)]: Done   7 out of  10 | elapsed:    6.7s remaining:    2.8s\n[Parallel(n_jobs=8)]: Done  10 out of  10 | elapsed:    6.7s finished\nTotal time taken: 0:00:07.035128\nKFoldImblearn Instance \nSampling method: SMOTE\nNumber of folds: 10\n\nProcess finished with exit code \n```\n\n### References\n- Imblearn - https://imbalanced-learn.org/stable/\n- Joblib   - https://joblib.readthedocs.io/en/latest/\n- Pandas   - https://pandas.pydata.org/\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anubhav562/KFoldImblearn",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "k-fold-imblearn",
    "package_url": "https://pypi.org/project/k-fold-imblearn/",
    "platform": "",
    "project_url": "https://pypi.org/project/k-fold-imblearn/",
    "project_urls": {
      "Homepage": "https://github.com/anubhav562/KFoldImblearn"
    },
    "release_url": "https://pypi.org/project/k-fold-imblearn/1.0.0/",
    "requires_dist": [
      "pandas (>=1.1.5)",
      "scikit-learn (>=0.24.0)",
      "imbalanced-learn (>=0.8.0)"
    ],
    "requires_python": "",
    "summary": "KFoldImblearn handles the resampling of data in a k fold fashion, taking care of information leakage so that our results are not overly optimistic. It is built over the imblearn package and is compatible with all the oversampling as well as under sampling methods provided in the imblearn package.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10076123,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "158c4ae886629bf16e4f00255b7252ff5408e9f6de7993eacf280d51578c01d7",
          "md5": "e2d8dae3aaefc3db49c058f0276ade7e",
          "sha256": "0e0613238ea9818f37c506dea6e6dfe544f601218346d99c46fb75e98ad3a546"
        },
        "downloads": -1,
        "filename": "k_fold_imblearn-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2d8dae3aaefc3db49c058f0276ade7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9377,
        "upload_time": "2021-04-15T17:31:45",
        "upload_time_iso_8601": "2021-04-15T17:31:45.387896Z",
        "url": "https://files.pythonhosted.org/packages/15/8c/4ae886629bf16e4f00255b7252ff5408e9f6de7993eacf280d51578c01d7/k_fold_imblearn-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a9a138519969cea257cd1f6196aef86a97db9084cd46165c4bd6dd4e5fbabc2",
          "md5": "2fc8a584c27217681f75e69ce2d2ecfb",
          "sha256": "8fe0d4a8600c6d60537bf822eb858257208a6150b284d5ebb9cb06e91c80c8a6"
        },
        "downloads": -1,
        "filename": "k_fold_imblearn-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2fc8a584c27217681f75e69ce2d2ecfb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7886,
        "upload_time": "2021-04-15T17:31:46",
        "upload_time_iso_8601": "2021-04-15T17:31:46.431032Z",
        "url": "https://files.pythonhosted.org/packages/7a/9a/138519969cea257cd1f6196aef86a97db9084cd46165c4bd6dd4e5fbabc2/k_fold_imblearn-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "158c4ae886629bf16e4f00255b7252ff5408e9f6de7993eacf280d51578c01d7",
        "md5": "e2d8dae3aaefc3db49c058f0276ade7e",
        "sha256": "0e0613238ea9818f37c506dea6e6dfe544f601218346d99c46fb75e98ad3a546"
      },
      "downloads": -1,
      "filename": "k_fold_imblearn-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2d8dae3aaefc3db49c058f0276ade7e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9377,
      "upload_time": "2021-04-15T17:31:45",
      "upload_time_iso_8601": "2021-04-15T17:31:45.387896Z",
      "url": "https://files.pythonhosted.org/packages/15/8c/4ae886629bf16e4f00255b7252ff5408e9f6de7993eacf280d51578c01d7/k_fold_imblearn-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a9a138519969cea257cd1f6196aef86a97db9084cd46165c4bd6dd4e5fbabc2",
        "md5": "2fc8a584c27217681f75e69ce2d2ecfb",
        "sha256": "8fe0d4a8600c6d60537bf822eb858257208a6150b284d5ebb9cb06e91c80c8a6"
      },
      "downloads": -1,
      "filename": "k_fold_imblearn-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2fc8a584c27217681f75e69ce2d2ecfb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7886,
      "upload_time": "2021-04-15T17:31:46",
      "upload_time_iso_8601": "2021-04-15T17:31:46.431032Z",
      "url": "https://files.pythonhosted.org/packages/7a/9a/138519969cea257cd1f6196aef86a97db9084cd46165c4bd6dd4e5fbabc2/k_fold_imblearn-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}