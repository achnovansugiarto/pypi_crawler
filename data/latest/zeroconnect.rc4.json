{
  "info": {
    "author": "",
    "author_email": "Erhannis Kirran <eyeillus@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# zeroconnect\n\n[![PyPI - Version](https://img.shields.io/pypi/v/zeroconnect.svg)](https://pypi.org/project/zeroconnect)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/zeroconnect.svg)](https://pypi.org/project/zeroconnect)\n\nUse zeroconf to automatically connect devices via TCP on a LAN.\nI can hardly believe this doesn't exist already, but after searching for an hour, in despair I resign myself to write my own, and patch the glaring hole in existence.\n\n-----\n\n**Table of Contents**\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [License](#license)\n- [Tips](#tips)\n- [Bonus!](#bonus)\n\n## Installation\n\n```console\npip install zeroconnect\n```\n\n## Usage\n\nOne or more servers, and one or more clients, run connected to the same LAN.  (Wifi or ethernet.)\n\n### Most basic\n\nService:\n```python\nfrom zeroconnect import ZeroConnect\n\ndef rxMessageConnection(messageSock, nodeId, serviceId):\n    print(f\"got message connection from {nodeId}\")\n    data = messageSock.recvMsg()\n    print(data)\n    messageSock.sendMsg(b\"Hello from server\")\n\nZeroConnect().advertise(rxMessageConnection, \"YOUR_SERVICE_ID_HERE\")\n```\n\nClient:\n```python\nfrom zeroconnect import ZeroConnect\nmessageSock = ZeroConnect().connectToFirst(\"YOUR_SERVICE_ID_HERE\")\nmessageSock.sendMsg(b\"Hello from client\")\ndata = messageSock.recvMsg()\nprint(data)\n```\n\n### Less basic\n\nService:\n```python\nfrom zeroconnect import ZeroConnect\n\nSERVICE_ID = \"YOUR_SERVICE_ID_HERE\"\nzc = ZeroConnect(\"NODE_ID\")\n\ndef rxMessageConnection(messageSock, nodeId, serviceId):\n    print(f\"got message connection from {nodeId}\")\n    # If you also want to spontaneously send messages, pass the socket to e.g. another thread.\n    while True:\n        data = messageSock.recvMsg()\n        print(data)\n        if data == b'enable jimjabber':\n            print(f\"ENABLE JIMJABBER\")\n        elif data == b'save msg:':\n            toSave = messageSock.recvMsg()\n            print(f\"SAVE MESSAGE {toSave}\")\n        elif data == b'marco':\n            messageSock.sendMsg(b'polo')\n            print(f\"PING PONGED\")\n        elif data == None:\n            print(f\"Connection closed from {nodeId}\")\n            messageSock.close()\n            return\n        else:\n            print(f\"Unhandled message: {data}\")\n        # Use messageSock.sock for e.g. sock.getsockname()\n        # I recommend messageSock.close() after you're done with it - but it'll get closed on zc.close(), at least\n\nzc.advertise(rxMessageConnection, SERVICE_ID) # Implicit mode=SocketMode.Messages\n\ntry:\n    input(\"Press enter to exit...\\n\\n\")\nfinally:\n    zc.close()\n```\n\nClient:\n```python\nfrom zeroconnect import ZeroConnect, SocketMode\n\nSERVICE_ID = \"YOUR_SERVICE_ID_HERE\"\nzc = ZeroConnect(\"NODE_ID\") # Technically the nodeId is optional; it'll assign you a random UUID\n\nads = zc.scan(SERVICE_ID, time=5)\n# OR: ads = zc.scan(SERVICE_ID, NODE_ID)\n# An `Ad` contains a `serviceId` and `nodeId` etc.; see `Ad` for details\nmessageSock = zc.connect(ads[0], mode=SocketMode.Messages) # Send and receive messages; the default mode\n# OR: messageSock = zc.connectToFirst(SERVICE_ID)\n# OR: messageSock = zc.connectToFirst(nodeId=NODE_ID)\n# OR: messageSock = zc.connectToFirst(SERVICE_ID, NODE_ID, timeout=10)\n\nmessageSock.sendMsg(b\"enable jimjabber\")\nmessageSock.sendMsg(b\"save msg:\")\nmessageSock.sendMsg(b\"i love you\")\nmessageSock.sendMsg(b\"marco\")\nprint(f\"rx: {messageSock.recvMsg()}\")\n\n# ...\n\nzc.close()\n```\n\nYou can also get raw sockets rather than MessageSockets, if you prefer:\n\nServer:\n```python\nfrom zeroconnect import ZeroConnect, SocketMode\n\nSERVICE_ID = \"YOUR_SERVICE_ID_HERE\"\nzc = ZeroConnect(\"NODE_ID\")\n\ndef rxRawConnection(sock, nodeId, serviceId):\n    print(f\"got raw connection from {nodeId}\")\n    data = sock.recv(1024)\n    print(data)\n    sock.sendall(b\"Hello from server\\n\")\n    # sock is a plain socket; use accordingly\n\nzc.advertise(rxRawConnection, SERVICE_ID, mode=SocketMode.Raw)\n\ntry:\n    input(\"Press enter to exit...\\n\\n\")\nfinally:\n    zc.close()\n```\n\nClient:\n```python\nfrom zeroconnect import ZeroConnect, SocketMode\n\nSERVICE_ID = \"YOUR_SERVICE_ID_HERE\"\nzc = ZeroConnect(\"NODE_ID\") # Technically the nodeId is optional; it'll assign you a random UUID\n\nads = zc.scan(SERVICE_ID, time=5)\n# OR: ads = zc.scan(SERVICE_ID, NODE_ID)\n# An `Ad` contains a `serviceId` and `nodeId` etc.; see `Ad` for details\nsock = zc.connect(ads[0], mode=SocketMode.Raw) # Get the raw streams\n# OR: sock = zc.connectToFirst(SERVICE_ID, mode=SocketMode.Raw)\n# OR: sock = zc.connectToFirst(nodeId=NODE_ID, mode=SocketMode.Raw)\n# OR: sock = zc.connectToFirst(SERVICE_ID, NODE_ID, mode=SocketMode.Raw, timeout=10)\n\nsock.sendall(b\"Hello from client\\n\")\ndata = sock.recv(1024)\nprint(f\"rx: {data}\")\n\n# ...\n\nzc.close()\n```\n\nThere's a few other functions you might find useful.  Look at the source code.\nHere; I'll paste the declaration of all the public `ZeroConnect` methods here.\n\n```python\n    def __init__(self, localId=None):\n    def advertise(self, callback, serviceId, port=0, host=\"0.0.0.0\", mode=SocketMode.Messages):\n    def scan(self, serviceId=None, nodeId=None, time=30):\n    def scanGen(self, serviceId=None, nodeId=None, time=30):\n    def connectToFirst(self, serviceId=None, nodeId=None, localServiceId=\"\", mode=SocketMode.Messages, timeout=30):\n    def connect(self, ad, localServiceId=\"\", mode=SocketMode.Messages):\n    def broadcast(self, message, serviceId=None, nodeId=None):\n    def getConnections(self):\n    def close(self):\n```\n\n## Tips\n\nBe careful not to have two nodes recv from each other at the same time, or they'll deadlock.\nHowever, you CAN have them send at the same time (at least according to my tests).\n\n`ZeroConnect` is intended to be manipulated via its methods, but it probably won't immediately explode if you\nread the data in the fields.\n\nNote that some computers/networks block zeroconf, or external connection attempts, etc.\n\nCalling `broadcast` will automatically clean up dead connections.\n\nIf you close your socket immediately after sending a message, the data may not finish sending.  Not my fault; blame socket.\n\n`broadcast` uses MessageSockets, so if you're using a raw socket, be aware the message will be prefixed with a header, currently\nan 8 byte unsigned long representing the length of the subsequent message.  See `MessageSocket`.\n\nSee logging.py to see logging settings, or do like so:\n```python\nfrom zeroconnect.logging import *\nsetLogLevel(-1) # 4+ for everything current, -1 for nothing except uncaught exceptions\n# It also contains some presets; ERROR/WARN/INFO/VERBOSE/DEBUG atm.\n# Also, you can move all the logging to stderr with `setLogType(2)`.\n```\n\n## Bonus!\n\nAlso includes zcat, like ncat/nc/netcat.  Use as follows:\n\nRX:\n```bash\npython -m zeroconnect.zcat -l SERVICE_ID [NODE_ID] > FILE\n```\n\nTX:\n```bash\ncat FILE | python -m zeroconnect.zcat SERVICE_ID [NODE_ID]\n```\n\n\n## License\n\n`zeroconnect` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.\n\n## TODO\nssl\nlower timeouts?\nconnect to all, forever?\n    connection callback\nmaybe some automated tests?\n.advertiseSingle to get one connection?  for quick stuff?\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "automagic,automatic,connect,iot,mesh,network,tcp,zeroconf",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zeroconnect",
    "package_url": "https://pypi.org/project/zeroconnect/",
    "platform": null,
    "project_url": "https://pypi.org/project/zeroconnect/",
    "project_urls": {
      "Documentation": "https://github.com/erhannis/zeroconnect#readme",
      "Issues": "https://github.com/erhannis/zeroconnect/issues",
      "Source": "https://github.com/erhannis/zeroconnect"
    },
    "release_url": "https://pypi.org/project/zeroconnect/1.0.1/",
    "requires_dist": [
      "argparse",
      "netifaces",
      "zeroconf"
    ],
    "requires_python": ">=3.7",
    "summary": "Use zeroconf to automatically connect devices via TCP on a LAN",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16026933,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7615e181bb6fcb6b372ce09a90a738e70b127aa84b25556621c6dadcdffa632",
          "md5": "0e6551974fc05f52cd89c63bc4e678d5",
          "sha256": "1300981828a3b082724f0319f8d738e4ed1a49b68aee725927287b73c7429656"
        },
        "downloads": -1,
        "filename": "zeroconnect-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e6551974fc05f52cd89c63bc4e678d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12174,
        "upload_time": "2022-10-08T19:23:14",
        "upload_time_iso_8601": "2022-10-08T19:23:14.336201Z",
        "url": "https://files.pythonhosted.org/packages/b7/61/5e181bb6fcb6b372ce09a90a738e70b127aa84b25556621c6dadcdffa632/zeroconnect-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48a5fce637f7022fdd6a84e0243884264728a32ea06f3672909080cb8688f97f",
          "md5": "e07a7a3f25172ca15b0b5673a93c9ba8",
          "sha256": "9dcc8f33c2fd89bd5aa3c990bc03abcb0a0f01f54fa296d14a9822e441d650bb"
        },
        "downloads": -1,
        "filename": "zeroconnect-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e07a7a3f25172ca15b0b5673a93c9ba8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10339,
        "upload_time": "2022-10-08T19:23:18",
        "upload_time_iso_8601": "2022-10-08T19:23:18.660262Z",
        "url": "https://files.pythonhosted.org/packages/48/a5/fce637f7022fdd6a84e0243884264728a32ea06f3672909080cb8688f97f/zeroconnect-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "947e88831d07535aff939e21e7d0309ff6635e2832f73c67754696ff2dbf4951",
          "md5": "d20472ed3071b528b341a64e09c3cd0d",
          "sha256": "6da178b7902e543e86cc73f4d926a9b6fc5c5bd8a2b7ab944070d32b4b7ddbdb"
        },
        "downloads": -1,
        "filename": "zeroconnect-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d20472ed3071b528b341a64e09c3cd0d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12178,
        "upload_time": "2022-10-08T19:23:16",
        "upload_time_iso_8601": "2022-10-08T19:23:16.029163Z",
        "url": "https://files.pythonhosted.org/packages/94/7e/88831d07535aff939e21e7d0309ff6635e2832f73c67754696ff2dbf4951/zeroconnect-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b245cfbca49376355b03219f9b5c8fd8642b9a182ae2fc6c52e99bcfdbbfaa6",
          "md5": "86c61fa342032039679d9a045d47f97c",
          "sha256": "e9ffd0218b97acf1d0030f37f8323ced14fce81b1efe5dd825e12fb406452cd3"
        },
        "downloads": -1,
        "filename": "zeroconnect-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "86c61fa342032039679d9a045d47f97c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10350,
        "upload_time": "2022-10-08T19:23:20",
        "upload_time_iso_8601": "2022-10-08T19:23:20.037090Z",
        "url": "https://files.pythonhosted.org/packages/6b/24/5cfbca49376355b03219f9b5c8fd8642b9a182ae2fc6c52e99bcfdbbfaa6/zeroconnect-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7160bfc430cf71040efc4acf29b9c2fb0c84964c465a964973111c7803a9e004",
          "md5": "d06319813759783ac605d04b3602820e",
          "sha256": "e72a8173afe6628ece2fdd7080a00b921fb31a77d45acae5f83ab9d3705b1e51"
        },
        "downloads": -1,
        "filename": "zeroconnect-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d06319813759783ac605d04b3602820e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13647,
        "upload_time": "2022-10-08T19:23:17",
        "upload_time_iso_8601": "2022-10-08T19:23:17.380842Z",
        "url": "https://files.pythonhosted.org/packages/71/60/bfc430cf71040efc4acf29b9c2fb0c84964c465a964973111c7803a9e004/zeroconnect-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "749b73da5dc23dfb74603e2a8e7e972510b0bd52ff9111ecfc740825626059f6",
          "md5": "5f3bafc2969dcaade8cac596fe7c9429",
          "sha256": "9e5b95b063e4ab74e3f43cde674b205faf9eae74684c8adc953796d658d50474"
        },
        "downloads": -1,
        "filename": "zeroconnect-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5f3bafc2969dcaade8cac596fe7c9429",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12389,
        "upload_time": "2022-10-08T19:23:21",
        "upload_time_iso_8601": "2022-10-08T19:23:21.179261Z",
        "url": "https://files.pythonhosted.org/packages/74/9b/73da5dc23dfb74603e2a8e7e972510b0bd52ff9111ecfc740825626059f6/zeroconnect-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fc2663d79d5c656018abb0a3549c619590740e347777835e1f0e70ac01b3183",
          "md5": "6e9680a29f3cbbe8be002c1ebb932f71",
          "sha256": "6420208976139c11be0e1bd594206418e74d9d62de6d67b5f4e1ce3a7c4a4a51"
        },
        "downloads": -1,
        "filename": "zeroconnect-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e9680a29f3cbbe8be002c1ebb932f71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15232,
        "upload_time": "2022-12-07T23:40:25",
        "upload_time_iso_8601": "2022-12-07T23:40:25.671421Z",
        "url": "https://files.pythonhosted.org/packages/9f/c2/663d79d5c656018abb0a3549c619590740e347777835e1f0e70ac01b3183/zeroconnect-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1015c2ef16fc6b2baec7c2886d17faae850cc536cf382795aa3da2c03afe10f0",
          "md5": "39679c6820aeb90876d6ff8ce43abb5c",
          "sha256": "0a9883785a6451c69fad8c808c5302be1d15fba8cf4a4c2ccfd0a4e911eedee3"
        },
        "downloads": -1,
        "filename": "zeroconnect-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "39679c6820aeb90876d6ff8ce43abb5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13563,
        "upload_time": "2022-12-07T23:40:32",
        "upload_time_iso_8601": "2022-12-07T23:40:32.825332Z",
        "url": "https://files.pythonhosted.org/packages/10/15/c2ef16fc6b2baec7c2886d17faae850cc536cf382795aa3da2c03afe10f0/zeroconnect-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9fc2663d79d5c656018abb0a3549c619590740e347777835e1f0e70ac01b3183",
        "md5": "6e9680a29f3cbbe8be002c1ebb932f71",
        "sha256": "6420208976139c11be0e1bd594206418e74d9d62de6d67b5f4e1ce3a7c4a4a51"
      },
      "downloads": -1,
      "filename": "zeroconnect-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e9680a29f3cbbe8be002c1ebb932f71",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15232,
      "upload_time": "2022-12-07T23:40:25",
      "upload_time_iso_8601": "2022-12-07T23:40:25.671421Z",
      "url": "https://files.pythonhosted.org/packages/9f/c2/663d79d5c656018abb0a3549c619590740e347777835e1f0e70ac01b3183/zeroconnect-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1015c2ef16fc6b2baec7c2886d17faae850cc536cf382795aa3da2c03afe10f0",
        "md5": "39679c6820aeb90876d6ff8ce43abb5c",
        "sha256": "0a9883785a6451c69fad8c808c5302be1d15fba8cf4a4c2ccfd0a4e911eedee3"
      },
      "downloads": -1,
      "filename": "zeroconnect-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "39679c6820aeb90876d6ff8ce43abb5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13563,
      "upload_time": "2022-12-07T23:40:32",
      "upload_time_iso_8601": "2022-12-07T23:40:32.825332Z",
      "url": "https://files.pythonhosted.org/packages/10/15/c2ef16fc6b2baec7c2886d17faae850cc536cf382795aa3da2c03afe10f0/zeroconnect-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}