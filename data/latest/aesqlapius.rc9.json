{
  "info": {
    "author": "Dmitry Marakasov",
    "author_email": "amdmi3@amdmi3.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: SQL",
      "Topic :: Database"
    ],
    "description": "# aeSQLAPIus\n\n<a href=\"https://repology.org/project/python:aesqlapius/versions\">\n\t<img src=\"https://repology.org/badge/vertical-allrepos/python:aesqlapius.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\n![CI](https://github.com/AMDmi3/aesqlapius/workflows/CI/badge.svg)\n[![codecov](https://codecov.io/gh/AMDmi3/aesqlapius/branch/master/graph/badge.svg?token=87aZsxlja2)](https://codecov.io/gh/AMDmi3/aesqlapius)\n[![PyPI downloads](https://img.shields.io/pypi/dm/aesqlapius.svg)](https://pypi.org/project/aesqlapius/)\n[![Github commits (since latest release)](https://img.shields.io/github/commits-since/AMDmi3/aesqlapius/latest.svg)](https://github.com/AMDmi3/aesqlapius)\n\n## Summary\n\nSo you don't want to use ORM, but want to organize your SQL queries\nin a convenient way. Don't mix them with your python code, don't\nwrite `execute` and `fetchrow`s by hand for each query. With\n**aesqlapius**:\n\n- Store your SQL queries separately from the code, in a dedicated\n  file or directory hierarchy\n- Annotate each query with python-like function definition specifying\n  input arguments and output types and patterns\n\n**aesqlapius** builds a class out of this, where you can call your\nqueries as plain methods. It handles arguments (pass positional\nor keyword arguments as you like, default values are also handled) and\noutput types and patterns (you may specify whether a method returns\niterator, list, dict of rows, or a single row, where row may\nbe represented as a tuple, list, dict, single value or a custom\ntype such as a dataclass).\n\n## Example\n\nqueries.sql:\n```sql\n-- specify arguments to queries in python format, including\n-- type annotations and support for default values\n\n-- def add_city(name: str, population: int = None) -> None: ...\nINSERT INTO cities VALUES (%(name)s, %(population)s);\n\n-- specify return value format out of wide range of formats\n-- (iterator, list, dict, or single instance of tuples, dicts\n-- or simple values)\n\n-- def list_cities() -> List[Value]: ...\nSELECT name FROM cities ORDER BY name;\n\n-- def get_population(city: str) -> Single[Value]: ...\nSELECT population FROM cities WHERE name = %(city)s;\n\n-- def get_populations() -> Dict[-'name', Value]: ...\nSELECT name, population\nFROM cities\nWHERE population IS NOT NONE\nORDER BY name;\n\n-- def iter_cities()() -> Iterator[Tuple] ...\nSELECT * FROM cities ORDER BY name;\n```\n\nscript.py:\n```python\nfrom aesqlapius import generate_api\n\ndb = psycopg2.connect('...')\napi = generate_api('queries.sql', 'psycopg2', db)\n\n# pass arguments to queries in either positional and kw form\napi.add_city('Moscow', 12500000)\napi.add_city('Paris')\napi.add_city(population=3800000, name='Berlin')\n\n# get query results in the desired format\nassert api.list_cities() == ['Berlin', 'Moscow', 'Paris']\nassert api.get_population('Moscow') == 12500000\nassert api.get_populations() == {'Berlin': 3800000, 'Moscow': 12500000}\nassert next(api.iter_cities()) == ('Berlin', 3800000)\n```\n\n## Reference\n\n### Python API\n\nThe module has a single entry point in form of a function:\n\n```python\ndef generate_api(path, driver, db=None, *, target=None, extension='.sql', namespace_mode='dirs', namespace_root='__init__')\n```\n\nThis loads SQL queries from *path* (a file or directory) and returns an API class to use with specified database *driver* (`psycopg2`, `sqlite3`, `mysql`, `aiopg`, `asyncpg`).\n\nIf *db* is specified, all generated methods are bound to the given database connection object:\n\n```python\ndb = psycopg2.connect('...')\napi = generate_api('queries.sql', 'psycopg2', db)\napi.my_method('arg1', 'arg2')\n```\notherwise caller is expected to pass database connection object to each call:\n```python\ndb = psycopg2.connect('...')\napi = generate_api('queries.sql', 'psycopg2')\napi.my_method(db, 'arg1', 'arg2')\n```\n\nIf *target* is specified, methods are injected into the given object (which is also returned from `generate_api`):\n```python\ndb = psycopg2.connect('...')\ngenerate_api('queries.sql', 'psycopg2', db, target=db)\ndb.my_method('arg1', 'arg2')\n```\n\n*extension* (by default `.sql`) specifies which files are loaded from the queries directory.\n\n*namespace_mode* controls how hierarchy of files is converted into hierarchy of objects when constructing the API class. There are 3 modes supported:\n\n* `dirs` (the default), which maps each subdirectory to a nested method namespace ignoring file names:\n\n| path under query dir | function definition | resulting API    |\n|----------------------|---------------------|------------------|\n| `root.sql`           | `-- def a(): ...`   | `api.a()`        |\n| `subdir/foo.sql`     | `-- def b(): ...`   | `api.subdir.b()` |\n| `subdir/bar.sql`     | `-- def c(): ...`   | `api.subdir.c()` |\n\n* `files` which uses file names (after stripping the extension) as an extra nesting level:\n\n| path under query dir | function          | resulting API        |\n|----------------------|-------------------|----------------------|\n| `root.sql`           | `-- def a(): ...` | `api.root.a()`       |\n| `subdir/foo.sql`     | `-- def b(): ...` | `api.subdir.foo.b()` |\n| `subdir/bar.sql`     | `-- def c(): ...` | `api.subdir.bar.c()` |\n\nIn this mode, *namespace_root* allows to specify a special file name which circumvents this behavior, allowing to mimic how Python handles module namespaces. For example, when *namespace_root* = `\"__init__\"` (the default):\n\n| path under query dir  | function          | resulting API        |\n|-----------------------|-------------------|----------------------|\n| `__init__.sql`        | `-- def a(): ...` | `api.a()`            |\n| `foo.sql`             | `-- def b(): ...` | `api.foo.b()`        |\n| `subdir/__init__.sql` | `-- def c(): ...` | `api.subdir.c()`     |\n| `subdir/bar.sql`      | `-- def d(): ...` | `api.subdir.bar.d()` |\n\n* `flat` mode which ignores hierarchy:\n\n| path under query dir | function          | resulting API |\n|----------------------|-------------------|---------------|\n| `root.sql`           | `-- def a(): ...` | `api.a()`     |\n| `subdir/foo.sql`     | `-- def b(): ...` | `api.b()`     |\n| `subdir/bar.sql`     | `-- def c(): ...` | `api.c()`     |\n\n### Query annotations\n\nEach query managed by **aesqlapius** must be preceded with a `-- ` (SQL comment) followed by a Python-style function definition:\n\n```sql\n-- def function_name(parameters, ...) -> return_type: ...\n...some SQL code...\n```\n\n#### Parameters\n\nParameters allow optional literal default values and optional type annotations (which are currently ignored) and may be specified in both positional, keyword or mixed style in the resulting API:\n\n```sql\n-- def myfunc(foo, bar: str, baz=123) -> None: ...`\n...some SQL code...\n```\n```pyton\napi.myfunc(1, bar=\"sometext\")  # foo=1, bar=\"sometext\", baz=123\n```\n\n#### Return value\n\nReturn value annotation is required and may either be `None` (when query does not return anything) or a nested type annotation with specific structure `RowsFormat[RowFormat]`.\n\nOuter `RowsFormat` specifies how multiple rows returned by the query are handled. Allowed values are:\n* `Iterator[RowFormat]` - return a row iterator.\n* `List[RowFormat]` - return a list of rows.\n* `Single[RowFormat]` - return a single row.\n* `Dict[KeyColumn, RowFormat]` - return a dictionary of rows. The column to be used as a dictionary key is specified in the first argument, e.g. `Dict[0, ...]` uses first returned column as key and `Dict['colname', ...] uses column named *colname*. Precede column index or name with unary minus to make it removed from the row contents.\n\nInner `RowFormat` specifies how data for each row is presented:\n* `Tuple` - return row as a tuple of values.\n* `Dict` - return row as a dict, where keys are set to the column names returned by the query.\n* `Value` - return single value from the row. If the query returns multiple fields, the first one is returned.\n\nExamples:\n```sql\n-- def example1() -> List[Tuple]: ...\nSELECT 1, 'foo' UNION SELECT 2, 'bar';\n-- def example2() -> Single[Value]: ...\nSELECT 2*2;\n-- def example3() -> Iterator[Dict]: ...\nSELECT 1 AS n, 'foo' AS s UNION SELECT 2 AS n, 'bar' AS s;\n-- def example4() -> Dict['key', Dict]: ...\nSELECT 'foo' AS key, 1 AS a, 2 AS b;\n-- def example5() -> Dict[-'key', Dict]: ...\nSELECT 'foo' AS key, 1 AS a, 2 AS b;\n```\n```\n>>> api.example1()\n[(1, 'foo'), (2, 'bar')]\n>>> api.example2()\n4\n>>> it = api.example3()\n>>> next(it)\n{'n': 1, 's': 'foo'}\n>>> next(it)\n{'n': 2, 's': 'bar'}\n>>> api.example4()\n{'foo': {'key': 'foo', 'a': 1, 'b': 2}}\n>>> api.example5()\n{'foo': {'a': 1, 'b': 2}}\n```\n\n#### Body\n\nFunction body of the annotationis required to contain a single ellipsis.\n\n## Drivers\n\n### psycopg2\n\nUse with [psycopg2](https://pypi.org/project/psycopg2/) connections:\n\n```python\nimport aesqlapius, psycopg2\ndbconn = psycopg2.connect('dname=... user=... password=...')\napi = aesqlapius.generate_api('queries.sql', 'psycopg2', dbconn)\napi.some_method(arg1=1, arg2=2)\n```\n\n### sqlite3\n\nUse with `sqlite3` connections:\n\n```python\nimport aesqlapius, sqlite3\ndbconn = sqlite3.connect('path_to_database.sqlite')\napi = aesqlapius.generate_api('queries.sql', 'sqlite3', dbconn)\napi.some_method(arg1=1, arg2=2)\n```\n\n### mysql\n\nUse with [mysql.connector](https://dev.mysql.com/doc/connector-python/en/) connections:\n\n```python\nimport aesqlapius, mysql.connector\ndbconn = mysql.connector.connect(database=..., user=..., password=...)\napi = aesqlapius.generate_api('queries.sql', 'mysql', dbconn)\napi.some_method(arg1=1, arg2=2)\n```\n\nNotes:\n- The driver uses `buffered=True` parameter when creating cursor.\n\n### aiopg\n\nUse with [aiopg](https://pypi.org/project/aiopg/) module. This driver generates asynchronous APIs, and accepts both connection and pool objects (in the latter case, connection is automatically acquired from the pool).\n\n```python\nimport aesqlapius, aiopg\n\nasync def pool_example():\n    async with aiopg.create_pool('dname=... user=... password=...') as pool:\n        api = aesqlapius.generate_api('queries.sql', 'aiopg', pool)\n        await api.some_method(arg1=1, arg2=2)\n\nasync def connection_example():\n    api = aesqlapius.generate_api('queries.sql', 'aiopg')\n    async with aiopg.create_pool('dname=... user=... password=...') as pool:\n        async with pool.acquire() as conn:\n\t    await api.some_method(conn, arg1=1, arg2=2)\n```\n\n### asyncpg\n\nUse with [asyncpg](https://pypi.org/project/asyncpg/) module. This driver generates asynchronous APIs, and accepts both connection and pool objects (in the latter case, connection is automatically acquired from the pool).\n\n```python\nimport aesqlapius, asyncpg\n\nasync def pool_example():\n    async with asyncpg.create_pool(database=..., user=..., password=...) as pool:\n        api = aesqlapius.generate_api('queries.sql', 'asyncpg', pool)\n        await api.some_method(arg1=1, arg2=2)\n\nasync def connection_example():\n    conn = await asyncpg.connect(database=..., user=..., password=...)\n    api = aesqlapius.generate_api('queries.sql', 'asyncpg', conn)\n    await api.some_method(arg1=1, arg2=2)\n\nasync def another_connection_example():\n    api = aesqlapius.generate_api('queries.sql', 'asyncpg')\n    async with asyncpg.create_pool('dname=... user=... password=...') as pool:\n        async with pool.acquire() as conn:\n\t    await api.some_method(conn, arg1=1, arg2=2)\n```\n\nNotes:\n- Methods with `Iterator` rows format use asyncpg cursors under the hood which are only available in transaction. The driver automatically wraps such methods in a transaction if they are called outside of one.\n\n## License\n\nMIT license, copyright (c) 2020 Dmitry Marakasov amdmi3@amdmi3.ru.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AMDmi3/aesqlapius",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aesqlapius",
    "package_url": "https://pypi.org/project/aesqlapius/",
    "platform": "",
    "project_url": "https://pypi.org/project/aesqlapius/",
    "project_urls": {
      "Homepage": "https://github.com/AMDmi3/aesqlapius"
    },
    "release_url": "https://pypi.org/project/aesqlapius/0.0.9/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Manage SQL queries as a Python API",
    "version": "0.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11324568,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9cbb391452dcda15bf9548c63676553ea1fda503eb25d6dfe22b5c7c5dce537",
          "md5": "1acfd498bdcca554a13f98703e842c8c",
          "sha256": "7732f4b471dee925e5b52b93878034b8f6d79e68c10c0ced688aeba5ebde87d1"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1acfd498bdcca554a13f98703e842c8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12229,
        "upload_time": "2020-12-01T23:15:45",
        "upload_time_iso_8601": "2020-12-01T23:15:45.340988Z",
        "url": "https://files.pythonhosted.org/packages/a9/cb/b391452dcda15bf9548c63676553ea1fda503eb25d6dfe22b5c7c5dce537/aesqlapius-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b692cf34dc64f7f8974af1926a7c9861ff95fe3883bf5715841259d9c9bee16e",
          "md5": "1c3ea46886cc0251d0fea6673b844940",
          "sha256": "12df76c8758c0e806953b11a8bf8ec1a0b7acd9fc47f4b5431ff9304a68cafb0"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1c3ea46886cc0251d0fea6673b844940",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15962,
        "upload_time": "2020-12-02T01:18:40",
        "upload_time_iso_8601": "2020-12-02T01:18:40.805374Z",
        "url": "https://files.pythonhosted.org/packages/b6/92/cf34dc64f7f8974af1926a7c9861ff95fe3883bf5715841259d9c9bee16e/aesqlapius-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fb230171f96ae2372341ac4b18a680c88b9ee8785605b9cf6e2c3db4e3b1772",
          "md5": "cc713c81b6db5bff2838900bd94d9ce9",
          "sha256": "8fbc97bba50ce0dc534e57b7a2d7cf0c49d6df66aa8c0f84826488572b5cd01a"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cc713c81b6db5bff2838900bd94d9ce9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17863,
        "upload_time": "2020-12-02T19:59:48",
        "upload_time_iso_8601": "2020-12-02T19:59:48.334781Z",
        "url": "https://files.pythonhosted.org/packages/6f/b2/30171f96ae2372341ac4b18a680c88b9ee8785605b9cf6e2c3db4e3b1772/aesqlapius-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf86a17b6e6f71c716ffe173cadb0c906c7d558a6412f5eb36bfaf219822c6ea",
          "md5": "d87b0acd25461760a1c3c3be3e71173b",
          "sha256": "2367480eb1d232dfb86ef0896b88aa8324120ff11b45b8d8787d4c5d07827e50"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d87b0acd25461760a1c3c3be3e71173b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18913,
        "upload_time": "2020-12-02T23:36:21",
        "upload_time_iso_8601": "2020-12-02T23:36:21.069929Z",
        "url": "https://files.pythonhosted.org/packages/bf/86/a17b6e6f71c716ffe173cadb0c906c7d558a6412f5eb36bfaf219822c6ea/aesqlapius-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef01d539bfc4ab6846a69eae9e5d15a570727102c3b8d5c020fd77c6b8ddb61e",
          "md5": "ef51092c942a626dda4ed76b34c62a72",
          "sha256": "84863c323122bf50d662a920ca494a4c768b61e207ddc6c67efd2c30e1503b65"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ef51092c942a626dda4ed76b34c62a72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 20135,
        "upload_time": "2020-12-05T00:09:18",
        "upload_time_iso_8601": "2020-12-05T00:09:18.828184Z",
        "url": "https://files.pythonhosted.org/packages/ef/01/d539bfc4ab6846a69eae9e5d15a570727102c3b8d5c020fd77c6b8ddb61e/aesqlapius-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d734c929ecac23c28e549081d98ccdc86c373021831dabe89264167bfd3306b",
          "md5": "90cd6e7ab5449e59523807b2540c5b16",
          "sha256": "9bf4f6d46ae3b2026904425e90dfcb89b13083a67f14cba6c0b04b9e39d868ab"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "90cd6e7ab5449e59523807b2540c5b16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 20301,
        "upload_time": "2020-12-08T00:17:17",
        "upload_time_iso_8601": "2020-12-08T00:17:17.192582Z",
        "url": "https://files.pythonhosted.org/packages/0d/73/4c929ecac23c28e549081d98ccdc86c373021831dabe89264167bfd3306b/aesqlapius-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29903dd0db74cdd3c9e8c2b91e0d38a18d8f364ebfb319f3c6ab0c23d745b6fa",
          "md5": "f286f5b347fc99a95d41fcbaa923ae79",
          "sha256": "9c1553ed1d98958d371aca420244c948bf42f090047ea2e999fe575fe2dfeec7"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f286f5b347fc99a95d41fcbaa923ae79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 24760,
        "upload_time": "2020-12-18T21:59:40",
        "upload_time_iso_8601": "2020-12-18T21:59:40.025639Z",
        "url": "https://files.pythonhosted.org/packages/29/90/3dd0db74cdd3c9e8c2b91e0d38a18d8f364ebfb319f3c6ab0c23d745b6fa/aesqlapius-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6074a7fc4eba2632b8efa9e0379f634a1f33d7cfc3f70213b3f8538506bf3507",
          "md5": "8c4836be9fe78ff47173a41abf278eec",
          "sha256": "23ef1607838f51035ccb1b03a8802c935df6c2604e72a5e3c22685caed71e769"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8c4836be9fe78ff47173a41abf278eec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 25562,
        "upload_time": "2021-01-10T16:05:25",
        "upload_time_iso_8601": "2021-01-10T16:05:25.438478Z",
        "url": "https://files.pythonhosted.org/packages/60/74/a7fc4eba2632b8efa9e0379f634a1f33d7cfc3f70213b3f8538506bf3507/aesqlapius-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5903df6e3252b391789ffc5a47eefc4e902534c97f103ffac13ea67a23f66197",
          "md5": "e9ba5c0bc79d0b80020e87af6ae017a6",
          "sha256": "7c373c47c418352228be4545de936f20a67c79fe089512f9bcec125f66df3e6f"
        },
        "downloads": -1,
        "filename": "aesqlapius-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e9ba5c0bc79d0b80020e87af6ae017a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 24835,
        "upload_time": "2021-08-31T12:38:00",
        "upload_time_iso_8601": "2021-08-31T12:38:00.732500Z",
        "url": "https://files.pythonhosted.org/packages/59/03/df6e3252b391789ffc5a47eefc4e902534c97f103ffac13ea67a23f66197/aesqlapius-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5903df6e3252b391789ffc5a47eefc4e902534c97f103ffac13ea67a23f66197",
        "md5": "e9ba5c0bc79d0b80020e87af6ae017a6",
        "sha256": "7c373c47c418352228be4545de936f20a67c79fe089512f9bcec125f66df3e6f"
      },
      "downloads": -1,
      "filename": "aesqlapius-0.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "e9ba5c0bc79d0b80020e87af6ae017a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 24835,
      "upload_time": "2021-08-31T12:38:00",
      "upload_time_iso_8601": "2021-08-31T12:38:00.732500Z",
      "url": "https://files.pythonhosted.org/packages/59/03/df6e3252b391789ffc5a47eefc4e902534c97f103ffac13ea67a23f66197/aesqlapius-0.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}