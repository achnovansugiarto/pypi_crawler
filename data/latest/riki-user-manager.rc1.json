{
  "info": {
    "author": "Sierra OBryan",
    "author_email": "obryans2@nku.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<a name=\"riki_usermanager\"></a>\n# riki\\_usermanager\n\nUser Manager for Riki system \n\nImplementer: Sierra OBryan \n\nPython: >=3.7\n\nProblem\n\nThere was no way to register new user and delete existing users from the riki system \n\nSolution\n\nImplement a new user manager with easy to use endpoints (login, logout, register, unregister) to manage user in a SQLite database \n\nAPIs\n- Login \n- Logout \n- Register \n- Unregister \n\n# Usage\n\nCommand line \n\n**Instantiate the UserManager** \n```\nuser_manager = UserManager(get_db())\n```\nwhere `get_db()` returns a database connection to a database with a users table according to `schema.sql`\n\n**Register a test user** \nUsing test database  \n```\n1. user_manager.register(User(\"name\", \"pswd\"))\n2. When successful also call flask user manager login \n```\n**Login a test user** \nSuccess\n```\n1. user_manager.login(\"name\", \"pswd\")\n2. When successful also call flask user manager login \n```\n**Logout a test user** \n```\n1. user_manager.logout(User(\"name\", \"pswd\"))\n2. When successful also call flask user manager logout\n```\n**Unregister test user** \n```\n1. user_manager.unregister(User(\"name\", \"pswd\"))\n2. When successful also call flask user manager logout \n```\n\nCommand line \n\n**Create a test database** \n```\ninput: python rkusermanager.py -c \"\" \"\" \"\"\noutput: test.db \n```\n**Register a test user** \n\nUsing test database  \n```\ninput: python rkusermanager.py -r \"test.db\" \"name\" \"1234\" \noutput: User(username='name', password='1234', active=1, roles=[], authentication_method=0, authenticated=True, hash='', anonymous=False)\n```\nUsing any database with correct schema (defined in `schema.sql`)\n```\ninput: python rkusermanager.py -r \"/tmp/riki.db\" \"name\" \"1234\" \noutput: User(username='name', password='1234', active=1, roles=[], authentication_method=0, authenticated=True, hash='', anonymous=False)\n```\n**Login a test user** \n\nSuccess\n```\ninput: python rkusermanager.py -l \"test.db\" \"name\" \"1234\" \noutput: True\n```\nFailure \n```\ninput: python rkusermanager.py -l \"test.db\" \"name\" \"1234\" \noutput: False\n```\n**Logout a test user** \n```\ninput: python rkusermanager.py -o \"test.db\" \"name\" \"1234\" \noutput: True\n```\n**Unregister test user** \n```\ninput: python rkusermanager.py -u \"test.db\" \"name\" \"1234\" \noutput: True\n```\n**Drop table** \n```\ninput: python rkusermanager.py -c \"\" \"\" \"\"\noutput: True \n```\n<a name=\"riki_usermanager.User\"></a>\n# riki\\_usermanager.User\n\n<a name=\"riki_usermanager.User.AuthMethodEnum\"></a>\n## AuthMethodEnum Objects\n\n```python\nclass AuthMethodEnum(Enum)\n```\n\nEnum that stores supported authentication methods\n\n<a name=\"riki_usermanager.User.User\"></a>\n## User Objects\n\n```python\n@dataclass\nclass User()\n```\n\nRepresents User entry in the sqlite3 database\n\nVariables: \n* username (str): The user's name.  Used as the primary key in the database.\n* password (str): The user's password.  Stored as text in sqlite.\n* roles (str): The roles a user has.  It's a list of string, but will be\n        stored as a single text value in sqlite.\n* authentication_method (int): Used to reference an authentication\n        method by number.\n* authenticated (bool): Flag for whether a user has been authenticated.\n        Stored in sqlite as an int.\n* hash (str): Stored result if password has been hashed.\n* anonymous (bool): Flag for anonymous users.  Since a registered user is \n        not anonymous, this is not stored in sqlite.\n\n<a name=\"riki_usermanager.User.User.is_authenticated\"></a>\n#### is\\_authenticated\n\n```python\n | is_authenticated()\n```\nReturns whether the User is authenticated.\n\n**Arguments**:\n- `self` _int_ - The current instance of User\n\n\n**Returns**:\n\n  bool:authentication state (indicates if user is logged in)\n\n<a name=\"riki_usermanager.User.User.is_active\"></a>\n#### is\\_active\n\n```python\n | is_active()\n```\n\nReturns whether the User is active. Required by flask-login.\n\n**Arguments**:\n\n- `self` _int_ - The current instance of User\n\n\n**Returns**:\n\n  bool:active state\n\n<a name=\"riki_usermanager.User.User.is_anonymous\"></a>\n#### is\\_anonymous\n\n```python\n | is_anonymous()\n```\n\nReturns whether the User is anonymous.  In this case, all users are not.\n\n**Arguments**:\n\n- `self` _int_ - The current instance of User\n\n\n**Returns**:\n\n  bool:anonymous state\n\n<a name=\"riki_usermanager.User.User.get_id\"></a>\n#### get\\_id\n\n```python\n | get_id()\n```\n\nReturns the username of a user. Required by flask-login.\n\n**Arguments**:\n\n- `self` _int_ - The current instance of User\n\n\n**Returns**:\n\n  str:username\n\n<a name=\"riki_usermanager.User.User.from_dict\"></a>\n#### from\\_dict\n\n```python\n | @staticmethod\n | from_dict(user: Dict[str, Any]) -> 'User'\n```\n\nconverts array of sql data into dictionary\n\n**Arguments**:\n\n- `data` _List[str]_ - sql array of data\n\n\n**Returns**:\n\n  Dict[str, Any]: Dictionary of values\n\n<a name=\"riki_usermanager.UserManager\"></a>\n# riki\\_usermanager.UserManager\n\n<a name=\"riki_usermanager.UserManager.UserManager\"></a>\n## UserManager Objects\n\n```python\nclass UserManager()\n```\n\nA very simple User Manager, that manages `User` objects and writes them to database\n\n<a name=\"riki_usermanager.UserManager.UserManager.__init__\"></a>\n#### \\_\\_init\\_\\_\n\n```python\n | __init__(db: sqlite3.Connection)\n```\n\nCreate UserManager object\n\n**Arguments**:\n- db (sqlite3.Connection): preexisting sqlite3 connection object\n\n<a name=\"riki_usermanager.UserManager.UserManager.login\"></a>\n#### login\n\n```python\n | login(username: str, password: str)\n```\n\nLogins in a user after username and password have been validated (username and password are not null). This function checks if a user exists (get_user), then checks password (check_password) and then authenticates the user (update). It returns the user if login was sucessful and False if login fails. \n\n\n**Arguments**:\n- `username` _String_ - username\n- `password` _String_ - password \n\n\n**Returns**:\n- `User`- on success\n- `bool`: False - on Failure \n\n**Depends on**:\n- `get_user`\n- `check_password`\n- `update`\n\n<a name=\"riki_usermanager.UserManager.UserManager.logout\"></a>\n#### logout\n\n```python\n | logout(user: User)\n```\n\nLogouts user updates the user in database with authenticated = false and returns a `True` if this was successful, else `False`. \n\n**Arguments**:\n- `user` _User_ - User object\n\n**Returns**:\n- `bool` - ``True`` on success, else False\n\n**Depends on**:\n- `update`\n\n<a name=\"riki_usermanager.UserManager.UserManager.register\"></a>\n#### register\n\n```python\n | register(user: 'User')\n```\n\nCreates a new user and authenticates a new user after username and password are validated\n\n**Arguments**:\n- `user` _User_ - User object\n\n**Returns**:\n- `User`- on success\n- `bool`: False - on Failure \n\n**Depends on**:\n- `add_user`\n- `login`\n\n<a name=\"riki_usermanager.UserManager.UserManager.unregister\"></a>\n#### unregister\n\n```python\n | unregister(user: User)\n```\n\nDeletes a user's profile\n\n**Arguments**:\n- `user` _User_ - User object\n\n**Returns**:\n- `bool` - ``True`` on success, else False\n\n**Depends on**:\n- `update`\n\n<a name=\"riki_usermanager.UserManager.UserManager.add_user\"></a>\n#### add\\_user\n\n```python\n | add_user(user: 'User')\n```\n\nCreates new user in the database\n\n**Arguments**:\n- `user` _User_ - User object\n\n**Returns**:\n- `User`- on success\n- `bool`: False - on Failure \n\n<a name=\"riki_usermanager.UserManager.UserManager.get_user\"></a>\n#### get\\_user\n\n```python\n | get_user(username: str)\n```\n\nGet `User` from the database\n\n**Args**:\n- name (str): users name\n\n**Returns**:\n- User | None: User object if user with the given username is found, otherwise nothing is returned.\n\n<a name=\"riki_usermanager.UserManager.UserManager.delete_user\"></a>\n#### delete\\_user\n\n```python\n | delete_user(username: str)\n```\nDeletes user from the database\n\n**Arguments**:\n- `name` _str_ - users username\n\n**Returns**:\n- `bool` - True if delete was successful, otherwise False\n\n<a name=\"riki_usermanager.UserManager.UserManager.update\"></a>\n#### update\n\n```python\n | update(user: 'User')\n```\nUpdate user from userdata dictionary\n\n**Arguments**:\n- `user` _User_ - User object\n\n**Returns**:\n- `bool` - True if delete was successful, otherwise False\n\n<a name=\"riki_usermanager.UserManager.UserManager.check_password\"></a>\n#### check\\_password\n\n```python\n | @staticmethod\n | check_password(user: User, password: str) -> bool\n```\nCheck if user password matches the password in the database\n\n**Arguments**:\n- `password` _str_ - user password\n\n**Returns**:\n- `bool` - did password match\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Riki-User-Manager",
    "package_url": "https://pypi.org/project/Riki-User-Manager/",
    "platform": "",
    "project_url": "https://pypi.org/project/Riki-User-Manager/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/Riki-User-Manager/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "User Manager utilities for the Riki",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10168745,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8e2a0f4a3a22192e28660d4b88889e3414580d658ad48ebc6eb8c80d165b147",
          "md5": "e0dc9490b2eb3794d98b54d29d583ee5",
          "sha256": "f98f3698c33ad5a65084bb4f5e9e5c60ed691c353832a7f07c8c3260a9ddd444"
        },
        "downloads": -1,
        "filename": "Riki_User_Manager-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0dc9490b2eb3794d98b54d29d583ee5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8728,
        "upload_time": "2021-04-25T23:48:57",
        "upload_time_iso_8601": "2021-04-25T23:48:57.203597Z",
        "url": "https://files.pythonhosted.org/packages/a8/e2/a0f4a3a22192e28660d4b88889e3414580d658ad48ebc6eb8c80d165b147/Riki_User_Manager-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8e2a0f4a3a22192e28660d4b88889e3414580d658ad48ebc6eb8c80d165b147",
        "md5": "e0dc9490b2eb3794d98b54d29d583ee5",
        "sha256": "f98f3698c33ad5a65084bb4f5e9e5c60ed691c353832a7f07c8c3260a9ddd444"
      },
      "downloads": -1,
      "filename": "Riki_User_Manager-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e0dc9490b2eb3794d98b54d29d583ee5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8728,
      "upload_time": "2021-04-25T23:48:57",
      "upload_time_iso_8601": "2021-04-25T23:48:57.203597Z",
      "url": "https://files.pythonhosted.org/packages/a8/e2/a0f4a3a22192e28660d4b88889e3414580d658ad48ebc6eb8c80d165b147/Riki_User_Manager-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}