{
  "info": {
    "author": "Brendon McBain",
    "author_email": "brendon.mcbain9@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Polar Codes in Python\n\nA library written in Python3 for Polar Codes, a capacity-achieving channel coding technique used in 5G. The library includes functions for construction, encoding, decoding, and simulation of polar codes. In addition, it supports puncturing and shortening.\n\nIt provides:\n - a systematic and non-systemic encoder.\n - non-recursive implementations of the successive cancellation decoder (SCD).\n - mothercode construction of polar codes using Bhattacharyya Bounds or Gaussian Approximation\n - support for puncturing and shortening.\n - Bit-Reversal Shortening (BRS), Wang-Liu Shortening (WLS), and Bioglio-Gabry-Land (BGL) shortening constructions.\n - an AWGN channel with BPSK modulation.\n - an easy-to-use Graphical User Interface (GUI)\n \nDocumentation:\n - [Main reference (pdf)](https://github.com/mcba1n/polar-codes/blob/master/main_reference_v1.0.pdf)\n - [Quick reference (website)](https://mcba1n.github.io/polar-codes-docs/)\n - Introduction to polar codes, shortening, and the library: http://www.youtube.com/watch?v=v47rn77RAxM\n \n## Getting Started\n\n1. Install the package with `pip install py-polar-codes` from https://pypi.org/project/py-polar-codes/.\n2. Install matplotlib from https://matplotlib.org/users/installing.html.\n3. Install numpy from https://docs.scipy.org/doc/numpy/user/install.html.\n4. Run test.py using a Python3 compiler. If the program runs successfully, the library is ready to use. Make sure the compiler has writing access to directory \"root/data\", where simulation data will be saved by default.\n5. Call `GUI()` to start the GUI.\n\n## Examples\n### Mothercode Encoding & Decoding\nAn example of encoding and decoding over an AWGN channel for a (256,100) non-systematic mothercode, using Bhattacharyya Bounds for construction and SCD for decoding.\nFor systematic encoding and decoding, replace `Encode(myPC)` with `Encode(myPC, 'systematic_encode')` and `Decode(myPC)` with `Decode(myPC, 'systematic_scd')`.\n\n```python\n   import numpy as np\n   from polarcodes import *\n\n    # initialise polar code\n    myPC = PolarCode(256, 100)\n    myPC.construction_type = 'bb'\n    \n    # mothercode construction\n    design_SNR  = 5.0\n    Construct(myPC, design_SNR)\n    print(myPC, \"\\n\\n\")\n    \n    # set message\n    my_message = np.random.randint(2, size=myPC.K)\n    myPC.set_message(my_message)\n    print(\"The message is:\", my_message)\n    \n    # encode message\n    Encode(myPC)\n    print(\"The coded message is:\", myPC.get_codeword())\n    \n    # transmit the codeword\n    AWGN(myPC, design_SNR)\n    print(\"The log-likelihoods are:\", myPC.likelihoods)\n    \n    # decode the received codeword\n    Decode(myPC)\n    print(\"The decoded message is:\", myPC.message_received)\n```\n\n### Shortened Code Construction\nAn example of constructing a shortened polar code with Bit-Reversal Shortening (BRS) algorithm.\nThe shortening parameters are set by the tuple `shorten_params`, the third argument of `PolarCode`, and is defined by:\n- Puncturing type: `shorten` or `punct`.\n- Puncturing algorithm: `brs`, `wls`, or `bgl`.\n- Puncturing set (for manual puncturing): `ndarray<int>`\n- Overcapable set (for manual puncturing): `ndarray<int>`\n- Update reliabilities after puncturing (or use mothercode reliabilities): `True` or `False`.\n\n\n```python\n   import numpy as np\n   from polarcodes import *\n\n    # initialise shortened polar code\n    shorten_params = ('shorten', 'brs', None, None, False)\n    myPC = PolarCode(200, 100, shorten_params)\n    \n    # construction\n    design_SNR  = 5.0\n    Shorten(myPC, design_SNR)\n    print(myPC, \"\\n\\n\")\n```\n\n### Simulation & Plotting\nA script to simulate a defined polar code, save the data to directory \"/data\", and then display the result in a *matplotlib* figure.\n\n```python\n    # simulate polar code \n    myPC.simulate(save_to='data/pc_sim', Eb_No_vec=np.arange(1,5), manual_const_flag=True)\n    \n    # plot the frame error rate\n    myPC.plot(['pc_sim'], 'data/')\n```\n\nThe simulation will save your PolarCode object in a JSON file, for example:\n```JSON\n{\n    \"N\": 64,\n    \"n\": 6,\n    \"K\": 32,\n    \"frozen\": [\n        22, 38, 49, 26, 42, 3, 28, 50, 5,44,9, 52, 6, 17, 10, 33, 56, 18, 12, 34, 20, 36, 1, 24, 40, 48, 2, 4, 8, 16, 32, 0\n    ],\n    \"construction_type\": \"bb\",\n    \"punct_flag\": false,\n    \"punct_type\": \"\",\n    \"punct_set\": [],\n    \"source_set\": [],\n    \"punct_algorithm\": \"\",\n    \"update_frozen_flag\": [],\n    \"BER\": [\n        0.09709375, 0.03740625, 0.00815625, 0.0010184612211221122\n    ],\n    \"FER\": [\n        0.313, 0.126, 0.03,0.004125412541254125\n    ],\n    \"SNR\": [\n        1, 2, 3, 4\n    ]\n}\n```\n\n### Graphical User Interface\nAn example of using the GUI to simulate and plot a specified polar code. Note: if \"manual construction\" is ticked, the user is required to input the frozen bits and the shortened bits.\n<br/><img src=\"https://raw.githubusercontent.com/mcba1n/polar-codes/master/gui_example.PNG\" width=\"500\">\n\n*This is a final year project created by Brendon McBain under the supervision of Dr Harish Vangala at Monash University.*",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mcba1n/polar-codes/archive/v_1_2_2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mcba1n/polar-codes",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-polar-codes",
    "package_url": "https://pypi.org/project/py-polar-codes/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-polar-codes/",
    "project_urls": {
      "Download": "https://github.com/mcba1n/polar-codes/archive/v_1_2_2.tar.gz",
      "Homepage": "https://github.com/mcba1n/polar-codes"
    },
    "release_url": "https://pypi.org/project/py-polar-codes/1.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package for polar codes in Python.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8277940,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d370dc6e3f921acf969c8a55b651ac56a3837a8e062afdd3e8d6b693addda91",
          "md5": "23830ab55650079462295aa3a612b311",
          "sha256": "5fdf74872f5b6a7db521df7e197d593c0127a1d04341d4a61350c27bfed2cef9"
        },
        "downloads": -1,
        "filename": "py-polar-codes-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "23830ab55650079462295aa3a612b311",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19266,
        "upload_time": "2019-12-07T05:27:18",
        "upload_time_iso_8601": "2019-12-07T05:27:18.753628Z",
        "url": "https://files.pythonhosted.org/packages/8d/37/0dc6e3f921acf969c8a55b651ac56a3837a8e062afdd3e8d6b693addda91/py-polar-codes-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1d7899fbf9566b54092f26010f8e2009995ad892d38a1cf73f8005ef1d821bc",
          "md5": "2390faf8d9f167231f833a790c78b66d",
          "sha256": "2a0c7b6f2e6e02b6d4f9fdd42d57d1617aa1375d3690d37ee1f54782ca7f4b90"
        },
        "downloads": -1,
        "filename": "py-polar-codes-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2390faf8d9f167231f833a790c78b66d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19206,
        "upload_time": "2019-12-07T06:11:05",
        "upload_time_iso_8601": "2019-12-07T06:11:05.586052Z",
        "url": "https://files.pythonhosted.org/packages/f1/d7/899fbf9566b54092f26010f8e2009995ad892d38a1cf73f8005ef1d821bc/py-polar-codes-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10faa06474e63dd0c3c28cc16b7af53c56793c3598583e957b80da25df1891da",
          "md5": "197800fd2769b7acaed898bcda7c6aab",
          "sha256": "ee80749a2e442019f71eface12bbb5e4d4316948feb8ad732da509dc71ab6b95"
        },
        "downloads": -1,
        "filename": "py-polar-codes-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "197800fd2769b7acaed898bcda7c6aab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19079,
        "upload_time": "2019-12-07T06:39:22",
        "upload_time_iso_8601": "2019-12-07T06:39:22.228877Z",
        "url": "https://files.pythonhosted.org/packages/10/fa/a06474e63dd0c3c28cc16b7af53c56793c3598583e957b80da25df1891da/py-polar-codes-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5359f1f681537c5ec35f641a0e416d68477187623eeddb891c1fcd26b395b86e",
          "md5": "425d65d983b21d08195fedeb45e927b6",
          "sha256": "3578132792e7130bb6729f9ebf14e7d484e21497c3e8b78ee452441b4264ebd2"
        },
        "downloads": -1,
        "filename": "py-polar-codes-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "425d65d983b21d08195fedeb45e927b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20830,
        "upload_time": "2020-05-27T15:08:59",
        "upload_time_iso_8601": "2020-05-27T15:08:59.053114Z",
        "url": "https://files.pythonhosted.org/packages/53/59/f1f681537c5ec35f641a0e416d68477187623eeddb891c1fcd26b395b86e/py-polar-codes-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90edf4a7eece618d210d984a128c45f5109e17e42994c601ebaa1e2ac18d1995",
          "md5": "b305d8854b42f44c7e720acb22a05fc0",
          "sha256": "34d9dcc00baf6b01afec5f4b23789ee2122a3d79b9df0a77803647dcca7ae0fc"
        },
        "downloads": -1,
        "filename": "py_polar_codes-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b305d8854b42f44c7e720acb22a05fc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23716,
        "upload_time": "2020-09-26T10:17:53",
        "upload_time_iso_8601": "2020-09-26T10:17:53.035862Z",
        "url": "https://files.pythonhosted.org/packages/90/ed/f4a7eece618d210d984a128c45f5109e17e42994c601ebaa1e2ac18d1995/py_polar_codes-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a540046820b9b1570e77fb96d003b874e6d8e48600360fe835df3b5bf18998b7",
          "md5": "6ac5e9527553c7ef782180a20f9a8024",
          "sha256": "fb29cb6e2597a72cd5911e38273ded2a4c16fe219e3ddf1c7147df14873143a7"
        },
        "downloads": -1,
        "filename": "py-polar-codes-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ac5e9527553c7ef782180a20f9a8024",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18164,
        "upload_time": "2020-09-26T10:17:54",
        "upload_time_iso_8601": "2020-09-26T10:17:54.878778Z",
        "url": "https://files.pythonhosted.org/packages/a5/40/046820b9b1570e77fb96d003b874e6d8e48600360fe835df3b5bf18998b7/py-polar-codes-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f6ac4847108e0045b77c2748e30f0a867d2899786120027fcbf6de213d47f64",
          "md5": "211a40290aa4e94a75cf06552661c6f3",
          "sha256": "e132d7983d27a097c957d579a05c4850ee3120357f478491e9a3e8b786698b0e"
        },
        "downloads": -1,
        "filename": "py-polar-codes-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "211a40290aa4e94a75cf06552661c6f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18233,
        "upload_time": "2020-09-26T11:05:29",
        "upload_time_iso_8601": "2020-09-26T11:05:29.075088Z",
        "url": "https://files.pythonhosted.org/packages/5f/6a/c4847108e0045b77c2748e30f0a867d2899786120027fcbf6de213d47f64/py-polar-codes-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f6ac4847108e0045b77c2748e30f0a867d2899786120027fcbf6de213d47f64",
        "md5": "211a40290aa4e94a75cf06552661c6f3",
        "sha256": "e132d7983d27a097c957d579a05c4850ee3120357f478491e9a3e8b786698b0e"
      },
      "downloads": -1,
      "filename": "py-polar-codes-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "211a40290aa4e94a75cf06552661c6f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18233,
      "upload_time": "2020-09-26T11:05:29",
      "upload_time_iso_8601": "2020-09-26T11:05:29.075088Z",
      "url": "https://files.pythonhosted.org/packages/5f/6a/c4847108e0045b77c2748e30f0a867d2899786120027fcbf6de213d47f64/py-polar-codes-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}