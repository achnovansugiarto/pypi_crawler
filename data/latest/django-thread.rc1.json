{
  "info": {
    "author": "Ross McFaland",
    "author_email": "rwmcfa1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Helpers for using Django from threads\n\nWhen handling requests django [manages database connection lifecycles for\nyou](https://github.com/django/django/blob/ca9872905559026af82000e46cde6f7dedc897b6/django/db/__init__.py#L34-L42).  By default closing them after each request or keeping\nthem alive allowing re-use for a specified amount of time when `CONN_MAX_AGE` is set so long as no errors are encountered.\n\nSometimes you want to do work outside of a web request. When the work is large and you would like to distribute it, likely to places other than where the web requests are\nserved, there are systems like [Celery](https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html).  There are other cases though were you're just trying\nto do work outside of the request & response cycle even and it's lightweight enough that running a full-blown job queuing system and it's associated data store is too\ninvolved.  You just want [Thread](https://docs.python.org/3/library/threading.html#thread-objects)s or even better a\n[ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor).\n\nIf you just jump straight in and use either of those you'll run into slow to manifest and tough to track down problems with broken database connections.  This is because\nDjango automatically opens a connection per-thread when a database is accessed and leaves them lying around in that thread indefinitely.  This results in errors when the\ndatabase has timed out the connection or it has otherwise encountered problems.\n\n`django_thread` provides a this problem by implementing a `Thread` class that mimics Django's request connection handling and provides a `ThreadPoolExecutor` that does so\naround the invocations of submitted calls.\n\n## Usage\n\n### Thread\n\n`django_thread.Thread` is a 100% drop-in replacement for `threading.Thread`.  See [threading.Thread](https://docs.python.org/3/library/threading.html#thread-objects) for\nusage and documentation.\n\n```python\nfrom django_thread import Thread\n\n\nclass ExampleThread(Thread):\n    def run(self):\n        for some_model in SomeModel.objects.filter(...):\n            ...\n\n\nthread = ExampleThread()\nthread.start()\n# do other things\nthread.join()\n```\n\n### ThreadPoolExecutor\n\n`django_thread.ThreadPoolExecutor` is a 100% drop-in replacement for `concurrent.futures.ThreadPoolExecutor`.  See\n[concurrent.futures.ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor) for usage and documentation.\n\n```python\nfrom concurrent.futures import as_completed\nfrom django_thread import ThreadPoolExecutor\n\n\ndef update_or_create_thing(name):\n    thing, _ = Thing.objects.update_or_create(name=name)\n    return thing.id\n\n\nexecutor = ThreadPoolExecutor()\n\nfutures = []\nfor i in range(5):\n    future = executor.submit(update_or_create_thing, f'Name i')\n    futures.append(future)\n\nids = [f.result() for f in futures]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ross/django-thread",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-thread",
    "package_url": "https://pypi.org/project/django-thread/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-thread/",
    "project_urls": {
      "Homepage": "https://github.com/ross/django-thread"
    },
    "release_url": "https://pypi.org/project/django-thread/0.0.1/",
    "requires_dist": [
      "django (>=1.6.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "## Helpers for using Django from threads",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11899597,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db41643983d77b407259ef6e141f6e7bf7147acb0122884cb2ef5b9211602167",
          "md5": "56e49ebdd5dd52ae91f8cc3d0083c7cd",
          "sha256": "a65398ded5cc99bb5a09cd4d32befef26662882e7993d5409e7824b82c0947f7"
        },
        "downloads": -1,
        "filename": "django_thread-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56e49ebdd5dd52ae91f8cc3d0083c7cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3788,
        "upload_time": "2021-11-02T01:48:50",
        "upload_time_iso_8601": "2021-11-02T01:48:50.986708Z",
        "url": "https://files.pythonhosted.org/packages/db/41/643983d77b407259ef6e141f6e7bf7147acb0122884cb2ef5b9211602167/django_thread-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e04ee873a76f166f39fdae65d29e638ef222ad07c19205740bc97f7cff23c25",
          "md5": "5088adae57a9ca877652b7e872a5bdb2",
          "sha256": "276cc21f3b2d747f63999b0910609b3ec5371e019844441b561a5c064a6c52d7"
        },
        "downloads": -1,
        "filename": "django_thread-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5088adae57a9ca877652b7e872a5bdb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3582,
        "upload_time": "2021-11-02T01:48:52",
        "upload_time_iso_8601": "2021-11-02T01:48:52.018769Z",
        "url": "https://files.pythonhosted.org/packages/4e/04/ee873a76f166f39fdae65d29e638ef222ad07c19205740bc97f7cff23c25/django_thread-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db41643983d77b407259ef6e141f6e7bf7147acb0122884cb2ef5b9211602167",
        "md5": "56e49ebdd5dd52ae91f8cc3d0083c7cd",
        "sha256": "a65398ded5cc99bb5a09cd4d32befef26662882e7993d5409e7824b82c0947f7"
      },
      "downloads": -1,
      "filename": "django_thread-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "56e49ebdd5dd52ae91f8cc3d0083c7cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3788,
      "upload_time": "2021-11-02T01:48:50",
      "upload_time_iso_8601": "2021-11-02T01:48:50.986708Z",
      "url": "https://files.pythonhosted.org/packages/db/41/643983d77b407259ef6e141f6e7bf7147acb0122884cb2ef5b9211602167/django_thread-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e04ee873a76f166f39fdae65d29e638ef222ad07c19205740bc97f7cff23c25",
        "md5": "5088adae57a9ca877652b7e872a5bdb2",
        "sha256": "276cc21f3b2d747f63999b0910609b3ec5371e019844441b561a5c064a6c52d7"
      },
      "downloads": -1,
      "filename": "django_thread-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5088adae57a9ca877652b7e872a5bdb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3582,
      "upload_time": "2021-11-02T01:48:52",
      "upload_time_iso_8601": "2021-11-02T01:48:52.018769Z",
      "url": "https://files.pythonhosted.org/packages/4e/04/ee873a76f166f39fdae65d29e638ef222ad07c19205740bc97f7cff23c25/django_thread-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}