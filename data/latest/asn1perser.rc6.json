{
  "info": {
    "author": "Maciej Piku≈Ça",
    "author_email": "erupikus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# asn1PERser\r\nThis library can parse ASN.1 text schemas into Python code. ASN.1 PER (Aligned) decoder/encoder is included to use with parsed schemas.\r\n\r\nSupported ASN.1 types and their constraints are:\r\n\r\n| ASN.1 Type   | Single value | Value range | Value size | can be extended (...) | used Python contraint class |\r\n|:------------:|:------------:|:-----------:|:----------:|:---------------------:|:---------------------------:|\r\n| INTEGER      |      X       |     X       |            |       X               |       ValueRange            |\r\n| BOOLEAN      |              |             |            |                       |                             |\r\n| ENUMERATED   |              |             |            |       X               |       ExtensionMarker       |\r\n| BIT STRING   |      X       |             |     X      |       X               |       ValueSize             |\r\n| OCTET STRING |      X       |             |     X      |       X               |       ValueSize             |\r\n| CHOICE       |              |             |            |       X               |       ExtensionMarker       |\r\n| SEQUENCE     |              |             |            |       X               |       ExtensionMarker       |\r\n| SEQUENCE OF  |      X       |             |     X      |       X               |       SequenceOfValueSize   |\r\n\r\nTable of contents:\r\n1. [Examples](#examples)\r\n2. [Decoding from string](#decoding-from-string)\r\n3. [Dictionary creation](#dictionary-creation)\r\n4. [Additional info](#additional-info)\r\n5. [History](#history)\r\n6. [Known bugs](#known-bugs)\r\n\r\n## Examples\r\nFollowing ASN.1 schema:\r\n\r\n```python\r\nasn_schema = '''\\\r\nSimpleProtocol DEFINITIONS AUTOMATIC TAGS ::=\r\nBEGIN\r\nSimpleMessage ::= CHOICE {\r\n    start    Start,\r\n    stop     Stop,\r\n    alive    Alive,\r\n    data     Data,\r\n    ...\r\n}\r\n\r\nStart ::= SEQUENCE {\r\n    sequenceNumber    SequenceNumber,\r\n    timestamp         UTC-Timestamp,\r\n    srcPort           Port,\r\n    dstPort           Port\r\n}\r\n\r\nStop ::= SEQUENCE {\r\n    sequenceNumber    SequenceNumber,\r\n    timestamp         UTC-Timestamp,\r\n    srcPort           Port,\r\n    dstPort           Port\r\n}\r\n\r\nAlive ::= SEQUENCE {\r\n    timestamp         UTC-Timestamp,\r\n    ...\r\n}\r\n\r\nData ::= SEQUENCE {\r\n    sequenceNumber    SequenceNumber,\r\n    swRelease         ENUMERATED {rel1, rel2, rel3, ...},\r\n    macroId           BIT STRING (SIZE(20)) OPTIONAL,\r\n    payload           Payload\r\n}\r\n\r\nPort ::= INTEGER (10000..65535)\r\n\r\nSequenceNumber ::= INTEGER (0..65535)\r\n\r\nUTC-Timestamp ::= SEQUENCE {\r\n    seconds     INTEGER (0..4294967295),\r\n    useconds    INTEGER (0..4294967295)\r\n}\r\n\r\nPayload ::= SEQUENCE (SIZE(1..5)) OF Message\r\n\r\nMessage ::= OCTET STRING (SIZE(1..4))\r\n\r\nEND\r\n'''\r\n```\r\n\r\ncan be parsed into Python code like this:\r\n```python\r\nfrom asn1PERser import parse_asn1_schema\r\n\r\n\r\nparse_asn1_schema(asn1_schema=asn_schema, output_folder=r'C:/my_code/')\r\n```\r\n\r\nAbove code will create file 'SimpleProtocol.py' in folder (which must exist) 'C:/my_code/':\r\n```python\r\nfrom pyasn1.type.namedtype import NamedType, NamedTypes, OptionalNamedType, DefaultedNamedType\r\nfrom pyasn1.type.namedval import NamedValues\r\nfrom asn1PERser.classes.data.builtin import *\r\nfrom asn1PERser.classes.types.type import AdditiveNamedTypes\r\nfrom asn1PERser.classes.types.constraint import MIN, MAX, NoConstraint, ExtensionMarker, SequenceOfValueSize, \\\r\n    ValueRange, SingleValue, ValueSize, ConstraintOr, ConstraintAnd\r\n\r\n\r\nclass Port(IntegerType):\r\n    subtypeSpec = ValueRange(10000, 65535)\r\n\r\n\r\nclass SequenceNumber(IntegerType):\r\n    subtypeSpec = ValueRange(0, 65535)\r\n\r\n\r\nclass Message(OctetStringType):\r\n    subtypeSpec = ValueSize(1, 4)\r\n\r\n\r\nclass UTC_Timestamp(SequenceType):\r\n    class seconds(IntegerType):\r\n        subtypeSpec = ValueRange(0, 4294967295)\r\n\r\n    class useconds(IntegerType):\r\n        subtypeSpec = ValueRange(0, 4294967295)\r\n\r\n    rootComponent = AdditiveNamedTypes(\r\n        NamedType('seconds', seconds()),\r\n        NamedType('useconds', useconds()),\r\n    )\r\n    componentType = rootComponent\r\n\r\n\r\nclass Start(SequenceType):\r\n    rootComponent = AdditiveNamedTypes(\r\n        NamedType('sequenceNumber', SequenceNumber()),\r\n        NamedType('timestamp', UTC_Timestamp()),\r\n        NamedType('srcPort', Port()),\r\n        NamedType('dstPort', Port()),\r\n    )\r\n    componentType = rootComponent\r\n\r\n\r\nclass Stop(SequenceType):\r\n    rootComponent = AdditiveNamedTypes(\r\n        NamedType('sequenceNumber', SequenceNumber()),\r\n        NamedType('timestamp', UTC_Timestamp()),\r\n        NamedType('srcPort', Port()),\r\n        NamedType('dstPort', Port()),\r\n    )\r\n    componentType = rootComponent\r\n\r\n\r\nclass Alive(SequenceType):\r\n    subtypeSpec = ExtensionMarker(True)\r\n    rootComponent = AdditiveNamedTypes(\r\n        NamedType('timestamp', UTC_Timestamp()),\r\n    )\r\n    componentType = rootComponent\r\n\r\n\r\nclass Payload(SequenceOfType):\r\n    subtypeSpec = SequenceOfValueSize(1, 5)\r\n    componentType = Message()\r\n\r\n\r\nclass Data(SequenceType):\r\n    class swRelease(EnumeratedType):\r\n        subtypeSpec = ExtensionMarker(True)\r\n        enumerationRoot = NamedValues(\r\n            ('rel1', 0),\r\n            ('rel2', 1),\r\n            ('rel3', 2),\r\n        )\r\n        namedValues = enumerationRoot\r\n\r\n    class macroId(BitStringType):\r\n        subtypeSpec = ValueSize(20, 20)\r\n\r\n    rootComponent = AdditiveNamedTypes(\r\n        NamedType('sequenceNumber', SequenceNumber()),\r\n        NamedType('swRelease', swRelease()),\r\n        OptionalNamedType('macroId', macroId()),\r\n        NamedType('payload', Payload()),\r\n    )\r\n    componentType = rootComponent\r\n\r\n\r\nclass SimpleMessage(ChoiceType):\r\n    subtypeSpec = ExtensionMarker(True)\r\n    rootComponent = AdditiveNamedTypes(\r\n        NamedType('start', Start()),\r\n        NamedType('stop', Stop()),\r\n        NamedType('alive', Alive()),\r\n        NamedType('data', Data()),\r\n    )\r\n    componentType = rootComponent\r\n\r\n\r\n\r\n```\r\n\r\nWhen schema is parsed it can be used - message can be created, encoded and decoded, using PER encoder/decoder, into bytes\r\nor Python structure:\r\n```python\r\nfrom asn1PERser import encode, decode\r\nfrom SimpleProtocol import *\r\n\r\n\r\n'''\r\nsimple_message SimpleMessage ::= alive : {\r\n    timestamp {\r\n        seconds 1557528149,\r\n        useconds 12345\r\n    }\r\n}\r\n'''\r\nutc_timestamp = UTC_Timestamp()\r\nutc_timestamp['seconds'] = UTC_Timestamp.seconds(1557528149)\r\nutc_timestamp['useconds'] = UTC_Timestamp.useconds(12345)\r\n\r\nmsg_alive = Alive()\r\nmsg_alive['timestamp'] = utc_timestamp\r\n\r\nsimple_message = SimpleMessage()\r\nsimple_message['alive'] = msg_alive\r\n\r\nper_bytes = encode(asn1Spec=simple_message)\r\nprint('encoded alive bytes as hex string:')\r\nprint(per_bytes.hex())  # py2: print(binascii.hexlify(per_bytes))\r\nprint('\\n')\r\n\r\ndecoded = decode(per_stream=per_bytes, asn1Spec=SimpleMessage())\r\nprint('decoded alive message structure as string...:')\r\nprint(decoded)\r\n\r\nprint('...can be accessed like dictionary:')\r\nprint(decoded['alive']['timestamp']['seconds'])\r\nprint('\\n')\r\n\r\nprint('...can be transformed into dictionary:')\r\nprint(decoded.to_dict())\r\n```\r\n\r\nabove will output:\r\n```\r\nencoded alive bytes as hex string:\r\n4c5cd5fe55403039\r\n\r\n\r\ndecoded alive message structure as string...:\r\nSimpleMessage:\r\n alive=Alive:\r\n  timestamp=UTC_Timestamp:\r\n   seconds=1557528149\r\n   useconds=12345\r\n\r\n\r\n\r\n...can be accessed like dictionary:\r\n1557528149\r\n\r\n\r\n...can be transformed into dictionary:\r\n{'alive': OrderedDict([('timestamp', OrderedDict([('seconds', 1557528149), ('useconds', 12345)]))])}\r\n```\r\n\r\nNext message:\r\n```python\r\n'''\r\nsimple_message SimpleMessage ::= start : {\r\n    sequenceNumber    10,\r\n    timestamp {\r\n        seconds 1557528149,\r\n        useconds 12345\r\n    },\r\n    srcPort    65533,\r\n    dstPort    10000\r\n}\r\n'''\r\n\r\nutc_timestamp = UTC_Timestamp()\r\nutc_timestamp['seconds'] = UTC_Timestamp.seconds(1557528149)\r\nutc_timestamp['useconds'] = UTC_Timestamp.useconds(12345)\r\n\r\nmsg_start = Start()\r\nmsg_start['sequenceNumber'] = SequenceNumber(10)\r\nmsg_start['timestamp'] = utc_timestamp\r\nmsg_start['srcPort'] = Port(65533)\r\nmsg_start['dstPort'] = Port(10000)\r\n\r\nsimple_message = SimpleMessage()\r\nsimple_message['start'] = msg_start\r\n\r\nper_bytes = encode(asn1Spec=simple_message)\r\nprint('encoded start bytes as hex string:')\r\nprint(per_bytes.hex())  # py2: print(binascii.hexlify(per_bytes))\r\nprint('\\n')\r\n\r\ndecoded = decode(per_stream=per_bytes, asn1Spec=SimpleMessage())\r\nprint('start message structure as string...:')\r\nprint(decoded)\r\nprint('...can be accessed like dictionary:')\r\nprint(decoded['start']['srcPort'])\r\nprint('\\n')\r\n\r\nprint('...can be transformed into dictionary:')\r\nprint(decoded.to_dict())\r\n```\r\n\r\nabove will output:\r\n```\r\nencoded start bytes as hex string:\r\n00000ac05cd5fe55403039d8ed0000\r\n\r\n\r\nstart message structure as string...:\r\nSimpleMessage:\r\n start=Start:\r\n  sequenceNumber=10\r\n  timestamp=UTC_Timestamp:\r\n   seconds=1557528149\r\n   useconds=12345\r\n\r\n  srcPort=65533\r\n  dstPort=10000\r\n\r\n\r\n...can be accessed like dictionary:\r\n65533\r\n\r\n\r\n...can be transformed into dictionary:\r\n{'start': OrderedDict([('sequenceNumber', 10), ('timestamp', OrderedDict([('seconds', 1557528149), ('useconds', 12345)])), ('srcPort', 65533), ('dstPort', 10000)])}\r\n```\r\n\r\nNext message:\r\n```python\r\n'''\r\nsimple_message SimpleMessage ::= data : {\r\n    sequenceNumber    55555,\r\n    swRelease  rel2,\r\n    macroId    '11110000111100001111'B,\r\n    payload {\r\n        'DEAD'H,\r\n        'BEEF'H,\r\n        'FEED'H,\r\n        'AA'H,\r\n        'BBBBBBBB'H\r\n    }\r\n}\r\n'''\r\n\r\ndata_payload = Payload()\r\ndata_payload.extend([Message(hexValue='DEAD')])\r\ndata_payload.extend([Message(hexValue='BEEF')])\r\ndata_payload.extend([Message(hexValue='FEED')])\r\ndata_payload.extend([Message(hexValue='AA')])\r\ndata_payload.extend([Message(hexValue='BBBBBBBB')])\r\n\r\nmsg_data = Data()\r\nmsg_data['sequenceNumber'] = SequenceNumber(55555)\r\nmsg_data['swRelease'] = Data.swRelease('rel2')\r\nmsg_data['macroId'] = Data.macroId(binValue='11110000111100001111')\r\nmsg_data['payload'] = data_payload\r\n\r\nsimple_message = SimpleMessage()\r\nsimple_message['data'] = msg_data\r\n\r\nper_bytes = encode(asn1Spec=simple_message)\r\nprint('encoded data bytes as hex string:')\r\nprint(per_bytes.hex())  # py2: print(binascii.hexlify(per_bytes))\r\nprint('\\n')\r\n\r\ndecoded = decode(per_stream=per_bytes, asn1Spec=SimpleMessage())\r\nprint('data message structure as string...:')\r\nprint(decoded)\r\nprint('...can be accessed like dictionary:')\r\nprint(bytes(decoded['data']['payload'][0]).hex())\r\nprint('\\n')\r\n\r\nprint('...can be transformed into dictionary:')\r\nprint(decoded.to_dict())\r\n```\r\n\r\nabove will output:\r\n```\r\nencoded data bytes as hex string:\r\n70d90320f0f0f880dead40beef40feed00aac0bbbbbbbb\r\n\r\n\r\ndata message structure as string...:\r\nSimpleMessage:\r\n data=Data:\r\n  sequenceNumber=55555\r\n  swRelease=rel2\r\n  macroId=986895\r\n  payload=Payload:\r\n   0xdead   0xbeef   0xfeed   0xaa   0xbbbbbbbb\r\n\r\n\r\n...can be accessed like dictionary:\r\ndead\r\n\r\n\r\n...can be transformed into dictionary:\r\n{'data': OrderedDict([('sequenceNumber', 55555), ('swRelease', 'rel2'), ('macroId', 986895), ('payload', ['dead', 'beef', 'feed', 'aa', 'bbbbbbbb'])])}\r\n```\r\n\r\nNext message:\r\n```python\r\n'''\r\nsimple_message SimpleMessage ::= data : {\r\n    sequenceNumber    256,\r\n    swRelease  rel3,\r\n    payload {\r\n        'DEADBEEF'H\r\n    }\r\n}\r\n'''\r\ndata_payload = Payload()\r\ndata_payload.extend([Message(hexValue='DEADBEEF')])\r\n\r\nmsg_data = Data()\r\nmsg_data['sequenceNumber'] = SequenceNumber(256)\r\nmsg_data['swRelease'] = Data.swRelease('rel3')\r\nmsg_data['payload'] = data_payload\r\n\r\nsimple_message = SimpleMessage()\r\nsimple_message['data'] = msg_data\r\n\r\nper_bytes = encode(asn1Spec=simple_message)\r\nprint('encoded data bytes as hex string:')\r\nprint(per_bytes.hex())  # py2: print(binascii.hexlify(per_bytes))\r\nprint('\\n')\r\n\r\ndecoded = decode(per_stream=per_bytes, asn1Spec=SimpleMessage())\r\nprint('data message structure as string...:')\r\nprint(decoded)\r\nprint('...can be accessed like dictionary:')\r\nprint(decoded['data']['swRelease'])\r\nprint('\\n')\r\n\r\nprint('...can be transformed into dictionary:')\r\nprint(decoded.to_dict())\r\n```\r\n\r\nabove will output:\r\n```\r\nencoded data bytes as hex string:\r\n60010043deadbeef\r\n\r\n\r\ndata message structure as string...:\r\nSimpleMessage:\r\n data=Data:\r\n  sequenceNumber=256\r\n  swRelease=rel3\r\n  payload=Payload:\r\n   0xdeadbeef\r\n\r\n\r\n...can be accessed like dictionary:\r\nrel3\r\n\r\n\r\n...can be transformed into dictionary:\r\n{'data': OrderedDict([('sequenceNumber', 256), ('swRelease', 'rel3'), ('payload', ['deadbeef'])])}\r\n```\r\n\r\n## Decoding from string\r\nWhen encoded bytes are given as __string__ use _bytearray.fromhex()_:\r\n\r\n```\r\n\r\npure_string = str('70d90320f0f0f880dead40beef40feed00aac0bbbbbbbb')\r\nreal_bytes = bytearray.fromhex(pure_string)\r\n\r\ndecoded = decode(asn1Spec=SimpleMessage(), per_stream=real_bytes)\r\nprint(decoded)\r\n```\r\n\r\nabove will output:\r\n```\r\nSimpleMessage:\r\n data=Data:\r\n  sequenceNumber=55555\r\n  swRelease=rel2\r\n  macroId=986895\r\n  payload=Payload:\r\n   0xdead   0xbeef   0xfeed   0xaa   0xbbbbbbbb\r\n```\r\n\r\n## Dictionary creation\r\n  Data above can be accessed like dictionary but it is not a dictionary.\r\n  Method '__to_dict__' was added to make dictionary creation simple:\r\n\r\n```\r\nmsg_dict = decoded.to_dict()\r\nprint(type(msg_dict))\r\nprint(msg_dict)\r\n```\r\n\r\noutput:\r\n```\r\n<class 'dict'>\r\n{'data': OrderedDict([('sequenceNumber', 55555), ('swRelease', 'rel2'), ('macroId', 986895), ('payload', ['dead', 'beef', 'feed', 'aa', 'bbbbbbbb'])])}\r\n```\r\n\r\nTo better show created structure, json.dumps() can be used:\r\n```\r\nprint(json.dumps(msg_dict, indent=2))\r\n```\r\n\r\noutput:\r\n```\r\n{\r\n  \"data\": {\r\n    \"sequenceNumber\": 55555,\r\n    \"swRelease\": \"rel2\",\r\n    \"macroId\": 986895,\r\n    \"payload\": [\r\n      \"dead\",\r\n      \"beef\",\r\n      \"feed\",\r\n      \"aa\",\r\n      \"bbbbbbbb\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## Additional info\r\n\r\nFor more examples please see library tests:\r\n- parsing tests, located in test/parsing/ folder.\r\n- coding/encoding tests, located in test/per folder.\r\n\r\nAll above examples and tests where checked using:\r\nhttps://asn1.io/asn1playground/\r\n\r\nThis library inherits extensively from pyasn1 library so BER and other encoding should also work here.\r\n\r\nParsing may take time - when trying to parse about 2000 lines of ASN.1 it took 15-20 minutes.\r\nTests for parsing also take time.\r\n\r\n## History\r\n\r\nSee CHANGES file.\r\n\r\n## Known bugs\r\n- Defining BitStringType type with default hexValue set to empty string (''), like:\r\n```\r\n...\r\nd15     BIT STRING DEFAULT ''H,\r\n...\r\n```\r\nwill parse to Python code but running it will cause exception:\r\n```\r\npyasn1.error.PyAsn1Error: BitStringType.fromHexString() error: invalid literal for int() with base 16: ''\r\n```\r\n\r\n- This will parse, but sorting algorith may not sort it corretly:\r\n```\r\n\r\n    MySeq2 ::= MySeq1   -- ok since one level of nesting is ok\r\n\r\n    MySeq3 ::= MySeq1   -- ok since one level of nesting is ok\r\n\r\n    MySeq1 ::= SEQUENCE {\r\n        d00     INTEGER\r\n    }\r\n\r\n    MySeq4 ::= MySeq2   -- NOT OK! 2nd level of nesting \r\n```\r\nThis will parse into:\r\n```python\r\nMySeq4 = MySeq2\r\n\r\n\r\nclass MySeq1(SequenceType):\r\n    rootComponent = AdditiveNamedTypes(\r\n        NamedType('d00', IntegerType()),\r\n    )\r\n    componentType = rootComponent\r\n\r\n\r\nMySeq3 = MySeq1\r\n\r\n\r\nMySeq2 = MySeq1\r\n```\r\nso Python will not find MySeq2 - this will lead to NameError.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/erupikus/asn1PERser",
    "keywords": "asn asn1 asn.1 PER decoder encoder",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asn1PERser",
    "package_url": "https://pypi.org/project/asn1PERser/",
    "platform": null,
    "project_url": "https://pypi.org/project/asn1PERser/",
    "project_urls": {
      "Homepage": "https://github.com/erupikus/asn1PERser"
    },
    "release_url": "https://pypi.org/project/asn1PERser/0.4.2/",
    "requires_dist": [
      "pyasn1 (>=0.4.7)",
      "pyparsing (>=2.4.7)",
      "Jinja2 (>=2.10.0)",
      "future (>=0.18.2)"
    ],
    "requires_python": "",
    "summary": "Parse ASN.1 schemas into Python code and encode/decode them using PER encoder",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17494532,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3766f188f1f16ffd91659525afdf870cd2de2aec556508774e97d2f0f7f9388c",
          "md5": "a63896d80a26bcb2919c032783e4a451",
          "sha256": "e3b890a7afa2d676e4d295d93df0bdd5f974fb8cc6bcc4d739bd04b7d0c5523f"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a63896d80a26bcb2919c032783e4a451",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 50566,
        "upload_time": "2019-05-18T20:17:18",
        "upload_time_iso_8601": "2019-05-18T20:17:18.900058Z",
        "url": "https://files.pythonhosted.org/packages/37/66/f188f1f16ffd91659525afdf870cd2de2aec556508774e97d2f0f7f9388c/asn1PERser-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae6fd10c561d0361a09b7c0ef7cdc1c3623ae748fc755934541f3c602486aa66",
          "md5": "4b89df683a0851a813a634814198182f",
          "sha256": "632f0aefe9f89d1684f2d0b4d23640274bd65a15badcd13a47e9a41606fb9bba"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b89df683a0851a813a634814198182f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29643,
        "upload_time": "2019-05-18T20:17:21",
        "upload_time_iso_8601": "2019-05-18T20:17:21.379379Z",
        "url": "https://files.pythonhosted.org/packages/ae/6f/d10c561d0361a09b7c0ef7cdc1c3623ae748fc755934541f3c602486aa66/asn1PERser-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00ebbcde71e110473df32b5f21896c49db2cc425d63507e19f6f1888cb380e88",
          "md5": "82d5fbb5d1e92c4377ec087296eefd83",
          "sha256": "5020baf23df568b6934b540be6b4d488fdbaff7ad8dc9ecff117edc42bf1456b"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82d5fbb5d1e92c4377ec087296eefd83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 51036,
        "upload_time": "2021-03-05T00:20:08",
        "upload_time_iso_8601": "2021-03-05T00:20:08.169555Z",
        "url": "https://files.pythonhosted.org/packages/00/eb/bcde71e110473df32b5f21896c49db2cc425d63507e19f6f1888cb380e88/asn1PERser-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ecf28a7951626ed60dfc244d4d60e12051ac294814ca4e1f19f3184b8e565c7",
          "md5": "17f45a5bce8495e7492845b8921cb8b2",
          "sha256": "d51adf502ad14247cb38395e5d29251f56fa3d4e0fda9af614b40826b74e5c7b"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "17f45a5bce8495e7492845b8921cb8b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29622,
        "upload_time": "2021-03-05T00:20:09",
        "upload_time_iso_8601": "2021-03-05T00:20:09.675351Z",
        "url": "https://files.pythonhosted.org/packages/9e/cf/28a7951626ed60dfc244d4d60e12051ac294814ca4e1f19f3184b8e565c7/asn1PERser-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7434dfa98e2f9a9ad9f30c9a805e8d6e6771ec1f0375fb8bb77749ccda4fb0d",
          "md5": "ec13e8faa3953892b20e5d6439ea87bc",
          "sha256": "00f11e773de070789e4b782d050440987d56e4c3d8bbc627036374a8d9e93848"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec13e8faa3953892b20e5d6439ea87bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101083,
        "upload_time": "2021-06-04T09:08:52",
        "upload_time_iso_8601": "2021-06-04T09:08:52.933149Z",
        "url": "https://files.pythonhosted.org/packages/a7/43/4dfa98e2f9a9ad9f30c9a805e8d6e6771ec1f0375fb8bb77749ccda4fb0d/asn1PERser-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbff128312ab591d67d36bd792f6e5c19383bc598ab523e38170cd11e342ce61",
          "md5": "515851398b44cc9d00cc636a13e27454",
          "sha256": "10a568789c6f786a88bac3b7ba7ba67f6ffda77070f2a7248a4d81c871a09daf"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "515851398b44cc9d00cc636a13e27454",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61044,
        "upload_time": "2021-06-04T09:08:54",
        "upload_time_iso_8601": "2021-06-04T09:08:54.275830Z",
        "url": "https://files.pythonhosted.org/packages/fb/ff/128312ab591d67d36bd792f6e5c19383bc598ab523e38170cd11e342ce61/asn1PERser-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa6f3d3365fceb37298933aae130f65f4bc788896fdc975aadef95543896a64d",
          "md5": "a7e4fc665d28b57c49042c6c4b1a45d7",
          "sha256": "6d6eae23a4dd610c168145f25025770f5cea2076edbd59d48f0cdd44eb16606a"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7e4fc665d28b57c49042c6c4b1a45d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 106049,
        "upload_time": "2023-03-24T12:31:37",
        "upload_time_iso_8601": "2023-03-24T12:31:37.401738Z",
        "url": "https://files.pythonhosted.org/packages/fa/6f/3d3365fceb37298933aae130f65f4bc788896fdc975aadef95543896a64d/asn1PERser-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16b73b6fda14d4838e4d652c06df9578a3445494fdc1ca1a51764f2e23816aea",
          "md5": "5b861642b9d5164347ada4ebd91cfe38",
          "sha256": "863c4f6e1f328da17c99db418e5e9580b0690c0b29afc119a9c1f8254c244e25"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5b861642b9d5164347ada4ebd91cfe38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69342,
        "upload_time": "2023-03-24T12:31:39",
        "upload_time_iso_8601": "2023-03-24T12:31:39.889745Z",
        "url": "https://files.pythonhosted.org/packages/16/b7/3b6fda14d4838e4d652c06df9578a3445494fdc1ca1a51764f2e23816aea/asn1PERser-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4041fa2f2ec559bb8cc776b7e5586c830d8dfb730aa4c2a4e910c69ebb30fdf3",
          "md5": "0c6a7b007d0ec451b9d74d26b041dc93",
          "sha256": "ac8d75d9e123cbe780048b34a76aefcf4b11385fc987ec1751bf5c2f495d7221"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c6a7b007d0ec451b9d74d26b041dc93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 106091,
        "upload_time": "2023-03-28T08:44:45",
        "upload_time_iso_8601": "2023-03-28T08:44:45.369228Z",
        "url": "https://files.pythonhosted.org/packages/40/41/fa2f2ec559bb8cc776b7e5586c830d8dfb730aa4c2a4e910c69ebb30fdf3/asn1PERser-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f03d4800d5c0f48352f108883e6d09bb6791078ba88aaf8bc8bd29c93c9519b",
          "md5": "8d16326b2e018b8e64841662260e63dd",
          "sha256": "db3c26b03739f10c0ce80b4a9404be2ec2534c018c006e192f163c358bb2d3a4"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8d16326b2e018b8e64841662260e63dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69452,
        "upload_time": "2023-03-28T08:44:49",
        "upload_time_iso_8601": "2023-03-28T08:44:49.317002Z",
        "url": "https://files.pythonhosted.org/packages/3f/03/d4800d5c0f48352f108883e6d09bb6791078ba88aaf8bc8bd29c93c9519b/asn1PERser-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09af3b74c005e486488c6ddea21e858bdf3ff034a0919e2e9bedd7ce947e79c9",
          "md5": "d687732ed28b1379a24a3aa8b23b9140",
          "sha256": "5f26afe10daafb0767367f488872152d2af810ebdc383c8895fa4de8e599ebf4"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.4.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "d687732ed28b1379a24a3aa8b23b9140",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 106520,
        "upload_time": "2023-03-29T13:53:42",
        "upload_time_iso_8601": "2023-03-29T13:53:42.260164Z",
        "url": "https://files.pythonhosted.org/packages/09/af/3b74c005e486488c6ddea21e858bdf3ff034a0919e2e9bedd7ce947e79c9/asn1PERser-0.4.2-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15cf221edb89fe4adf212f9c7944069dc303b0c67f2abc11214ec54c210ccf94",
          "md5": "5f9aeec05b7f9676d10b4db20b0674a2",
          "sha256": "544e57c1540abf666645ac29f74bfd8681b6a65d06cbe9f1f97bd9961f6773f4"
        },
        "downloads": -1,
        "filename": "asn1PERser-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5f9aeec05b7f9676d10b4db20b0674a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66993,
        "upload_time": "2023-03-29T13:53:44",
        "upload_time_iso_8601": "2023-03-29T13:53:44.163411Z",
        "url": "https://files.pythonhosted.org/packages/15/cf/221edb89fe4adf212f9c7944069dc303b0c67f2abc11214ec54c210ccf94/asn1PERser-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09af3b74c005e486488c6ddea21e858bdf3ff034a0919e2e9bedd7ce947e79c9",
        "md5": "d687732ed28b1379a24a3aa8b23b9140",
        "sha256": "5f26afe10daafb0767367f488872152d2af810ebdc383c8895fa4de8e599ebf4"
      },
      "downloads": -1,
      "filename": "asn1PERser-0.4.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "d687732ed28b1379a24a3aa8b23b9140",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 106520,
      "upload_time": "2023-03-29T13:53:42",
      "upload_time_iso_8601": "2023-03-29T13:53:42.260164Z",
      "url": "https://files.pythonhosted.org/packages/09/af/3b74c005e486488c6ddea21e858bdf3ff034a0919e2e9bedd7ce947e79c9/asn1PERser-0.4.2-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15cf221edb89fe4adf212f9c7944069dc303b0c67f2abc11214ec54c210ccf94",
        "md5": "5f9aeec05b7f9676d10b4db20b0674a2",
        "sha256": "544e57c1540abf666645ac29f74bfd8681b6a65d06cbe9f1f97bd9961f6773f4"
      },
      "downloads": -1,
      "filename": "asn1PERser-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5f9aeec05b7f9676d10b4db20b0674a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 66993,
      "upload_time": "2023-03-29T13:53:44",
      "upload_time_iso_8601": "2023-03-29T13:53:44.163411Z",
      "url": "https://files.pythonhosted.org/packages/15/cf/221edb89fe4adf212f9c7944069dc303b0c67f2abc11214ec54c210ccf94/asn1PERser-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}