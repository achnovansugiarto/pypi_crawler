{
  "info": {
    "author": "Antoine Houtain",
    "author_email": "antoine.houtain@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# HapPy\n**Hap**loidy using **Py**thon.\n\nEasy haploidy estimation.\n\n[![DOI](https://zenodo.org/badge/299235590.svg)](https://zenodo.org/badge/latestdoi/299235590)\n\n## 1. General\nThis tool assesses the haploidy *H* of a given assembly.\n*H* is defined as the fraction of the bases of the genome that are in the collapsed peak *C*. This metrics is calculated as *H*=*C*/(*C*+*U*/2), where *C* is the size (area) of the collapsed peak and *U* the size of the uncollapsed peak in the per-base coverage histogram of the assembly.\n\nFor more information, see:\n  **Overcoming uncollapsed haplotypes in long-read assemblies of non-model organisms**, \n  Nadège Guiglielmoni, Antoine Houtain, Alessandro Derzelle, Karine Van Doninck, Jean-François Flot,\n  bioRxiv 2020, doi: https://doi.org/10.1101/2020.03.16.993428 \n\n### Requirements: \n\n- `sambamba`\n- `scipy`\n- `pandas`\n- `numpy`\n- `matplotlib`\n\n```\n$ python HapPy/main.py -h\nEstimate assembly haploidy based on base depth of coverage histogram.\n\nusage:\n    HapPy [-hv] <command> [<args>...]\n\noptions:\n    -h, --help                  shows the help\n    -v, --version               shows the version\n\nThe subcommands are:\n    coverage    Compute coverage histogram.\n    estimate    Finds peaks and modality, then computes scores of haploidy.\n```\n\n## 2. Module coverage\nThis module runs `sambamba` on a read alignment file then reads the output depth file to obtain a coverage histogram.\n\n```\n$ python HapPy/main.py coverage -h\n\nCoverage histogram command\n    Compute coverage histogram for mapping file.\n\n    usage:\n        coverage [--threads=1] --outdir=DIR <mapping.bam>\n\n    arguments:\n        mapping.bam              Sorted BAM file after mapping reads to the assembly.\n\n    options:\n        -t, --threads=INT        Number of parallel threads allocated for \n                                 sambamba [default: 1].\n        -d, --outdir=DIR         Path where the .cov and .hist files are written.\n```\n\n## 3. Module estimate\nTakes the .hist output file of module `coverage` and outputs metrics in a text file and optionnally as a graph. The size is provided with a value and a unit, ex: G for Gigabases, M for Megabases.\n\n### Usage:\n```\n$ python HapPy/main.py estimate -h \nEstimate command\n    Compute haploidy from coverage histogram.\n\n    usage:\n        estimate [--max-contaminant=INT] [--max-diploid=INT] [--min-peak=INT] \n                 --size=INT --outstats=FILE [--plot] <coverage.hist>\n\n    arguments:\n        coverage.hist               Coverage histogram.\n\n    options:\n        -C, --max-contaminant=INT   Maximum coverage of contaminants.\n        -D, --max-diploid=INT       Maximum coverage of the diploid peak.\n        -M, --min-peak=INT          Minimum peak height.\n        -S, --size=INT              Estimated haploid genome size.\n        -O, --outstats=FILE         Path where the AUC ratio and TSS values are written.\n        -p, --plot                  Generate histogram plot.\n```\n\n## 4. Example\n\nHere is an example on how to use `HapPy`. `HapPy` requires a sorted BAM file as input. Here the PacBio long reads are mapped to the assembly with `minimap2`, and the output is sorted with `samtools`. The sorted BAM file is also indexed with `samtools`. The module depth computes the coverage histogram from the BAM file, and the module then estimates the haploidy metrics *H*. Here the max *x* value for the contaminant peak is set to 35, the max *x* value for the diploid peak is set to 120, and the size is set to 102 Mb.\n\n```\nminimap2 -ax map-pb assembly.fasta.gz pacbio_reads.fasta.gz --secondary=no | samtools sort -o mapping_LR.map-pb.bam -T tmp.ali\nsamtools index mapping_LR.map-pb.bam\nHap.py coverage -d happy_output mapping_LR.map-pb.bam \nHap.py estimate --max-contaminant 35 --max-diploid 120 -S 102M -O happy_stats.txt -p happy_output/mapping_LR.map-pb.bam.hist\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AntoineHo/HapPy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "happy-AntoineHo",
    "package_url": "https://pypi.org/project/happy-AntoineHo/",
    "platform": "",
    "project_url": "https://pypi.org/project/happy-AntoineHo/",
    "project_urls": {
      "Homepage": "https://github.com/AntoineHo/HapPy"
    },
    "release_url": "https://pypi.org/project/happy-AntoineHo/0.2.1rc0/",
    "requires_dist": [
      "numpy",
      "scipy",
      "matplotlib",
      "pandas",
      "docopt"
    ],
    "requires_python": ">=3.7",
    "summary": "Haploidy with Python",
    "version": "0.2.1rc0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8905122,
  "releases": {
    "0.2.1rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "032a9d0e25a3d1237a3112c30ae354ee6b5914ec20865337d6118391942b8ba7",
          "md5": "30e4b4c306a708b39f79e7dfc7eba016",
          "sha256": "6c0fabfc18833423bb35e70656aad4f7fd1ac4305b7314c619cfcdcb7f7f5dc5"
        },
        "downloads": -1,
        "filename": "happy_AntoineHo-0.2.1rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30e4b4c306a708b39f79e7dfc7eba016",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19767,
        "upload_time": "2020-12-15T14:50:26",
        "upload_time_iso_8601": "2020-12-15T14:50:26.130536Z",
        "url": "https://files.pythonhosted.org/packages/03/2a/9d0e25a3d1237a3112c30ae354ee6b5914ec20865337d6118391942b8ba7/happy_AntoineHo-0.2.1rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5190a7f69b04f23a0dc25a3c6bb6e0f667fb9119c9eabd503b93f10aa8d139e9",
          "md5": "011570daea6fa2c82c61970339a15186",
          "sha256": "1b9935fc30bf8974b4814f8e1b4f22d7ddf4ff16a6c92cda0114d7fa8a501682"
        },
        "downloads": -1,
        "filename": "happy-AntoineHo-0.2.1rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "011570daea6fa2c82c61970339a15186",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17697,
        "upload_time": "2020-12-15T14:50:27",
        "upload_time_iso_8601": "2020-12-15T14:50:27.514489Z",
        "url": "https://files.pythonhosted.org/packages/51/90/a7f69b04f23a0dc25a3c6bb6e0f667fb9119c9eabd503b93f10aa8d139e9/happy-AntoineHo-0.2.1rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "032a9d0e25a3d1237a3112c30ae354ee6b5914ec20865337d6118391942b8ba7",
        "md5": "30e4b4c306a708b39f79e7dfc7eba016",
        "sha256": "6c0fabfc18833423bb35e70656aad4f7fd1ac4305b7314c619cfcdcb7f7f5dc5"
      },
      "downloads": -1,
      "filename": "happy_AntoineHo-0.2.1rc0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30e4b4c306a708b39f79e7dfc7eba016",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19767,
      "upload_time": "2020-12-15T14:50:26",
      "upload_time_iso_8601": "2020-12-15T14:50:26.130536Z",
      "url": "https://files.pythonhosted.org/packages/03/2a/9d0e25a3d1237a3112c30ae354ee6b5914ec20865337d6118391942b8ba7/happy_AntoineHo-0.2.1rc0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5190a7f69b04f23a0dc25a3c6bb6e0f667fb9119c9eabd503b93f10aa8d139e9",
        "md5": "011570daea6fa2c82c61970339a15186",
        "sha256": "1b9935fc30bf8974b4814f8e1b4f22d7ddf4ff16a6c92cda0114d7fa8a501682"
      },
      "downloads": -1,
      "filename": "happy-AntoineHo-0.2.1rc0.tar.gz",
      "has_sig": false,
      "md5_digest": "011570daea6fa2c82c61970339a15186",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17697,
      "upload_time": "2020-12-15T14:50:27",
      "upload_time_iso_8601": "2020-12-15T14:50:27.514489Z",
      "url": "https://files.pythonhosted.org/packages/51/90/a7f69b04f23a0dc25a3c6bb6e0f667fb9119c9eabd503b93f10aa8d139e9/happy-AntoineHo-0.2.1rc0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}