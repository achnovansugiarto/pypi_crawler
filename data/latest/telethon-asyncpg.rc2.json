{
  "info": {
    "author": "mpa",
    "author_email": "mpa@snejugal.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "Async session for telethon\n==========================\n\nInstallation\n============\n\n::\n\n    pip install telethon_asyncpg\n    # Or with poetry\n    poetry add telethon_asyncpg\n\n\nUsage\n=====\n\n.. code-block:: python3\n\n    import ssl  # optional\n\n    from telethon import events, TelegramClient\n\n    from telethon_asyncpg import AsyncpgSession, install\n    install()\n\n    URI = ???  # URI-string\n    # dialect+driver://username:password@host:port/database\n\n    pgconf = dict(dsn=URI, min_size=5, max_size=5)\n    # to overcome problem with TLS connection to db pass\n    # ssl=ssl.SSLContext(protocol=ssl.PROTOCOL_TLS) to pgconf\n    session = AsyncpgSession(pgconf, session_id_factory=???)\n    # session_id_factory is any callable with \"() -> str\" signature\n    # default factory is uuid4 str generator. why factory? (it's not really factory ik)\n    bot = TelegramClient(session=session, api_id=???, api_hash=???)\n\n    @bot.on(events.NewMessage())\n    async def message_handler(message):\n        await message.reply(\"Hi!\")\n\n    async def start():\n        await bot.start()\n        print(await bot.get_entity(\"martin_winks\"))\n        await bot.run_until_disconnected()\n\n    if __name__ == '__main__':\n        import asyncio\n        asyncio.get_event_loop().run_until_complete(start())\n\n- `AsyncpgSession` can also use shared pool by `AsyncpgSession.with_pool` initializer-method\n\n.. code-block:: python\n\n    my_pool = asyncpg.create_pool(...)\n    session = AsyncpgSession.with_pool(my_pool, lambda: \"session-id\", True)\n\n\nCheck out the ``examples/`` folder for more realistic examples.\n\nContribution\n============\n\nCurrently we have only asyncpg session available, if you want to contribute with your wrapper - welcome. Take `AsyncpgSession` as an example.\n\nFor contributors\n================\n\nPatched TelegramClient <-> Session\n-----------------------------------\n\n- `TelegramClient` and `Session` object share `settings` `{session.meth: (args_seq, kwargs_mapping)}` dictionary. By protocol `TelegramClient` must add callable with args and kwargs. By protocol session must call this functions at start as it wants (e.g. pass more arguments such as `connection` object to session.method)\n\n- `TelegramClient` may call `session.start` several times per one session instance and session should control its start itself and if it's already started it shouldn't start again\n\n- `Session.save` method is guaranteed to be called as in usual telethon\n\n\nHacking\n-------\n\n::\n\n    # install poetry dependency manager\n    # Fork/Fork+Clone && cd {{cloned}}\n    poetry install\n    # happy hacking!\n\n\nReferences\n==========\n\nTelethon: `here <https://github.com/LonamiWebs/telethon>`_\nasyncpg pg-driver: `asyncpg <https://github.com/MagicStack/asyncpg>`_\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ukinti/telethon_asyncpg",
    "keywords": "telegram,telethon,mtproto,asyncio,asyncpg",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "telethon-asyncpg",
    "package_url": "https://pypi.org/project/telethon-asyncpg/",
    "platform": "",
    "project_url": "https://pypi.org/project/telethon-asyncpg/",
    "project_urls": {
      "Homepage": "https://github.com/ukinti/telethon_asyncpg",
      "Repository": "https://github.com/ukinti/telethon_asyncpg"
    },
    "release_url": "https://pypi.org/project/telethon-asyncpg/0.2.0/",
    "requires_dist": [
      "asyncpg (>=0.20.1,<0.21.0)",
      "Telethon (>=1.13.0,<2.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Asyncpg powered session for pgsql databases",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7325485,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a9603a82318e13380e83c1f0f2a2fef83e990abb13f231dfb89c0825e047b12",
          "md5": "5c43f5375230622946ec94b2219f9d39",
          "sha256": "fc182d82ab1d0618f69250227c4f3987bf819d15e22e660d3953f4451c0a8c74"
        },
        "downloads": -1,
        "filename": "telethon_asyncpg-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c43f5375230622946ec94b2219f9d39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 56386,
        "upload_time": "2020-05-21T00:56:37",
        "upload_time_iso_8601": "2020-05-21T00:56:37.462639Z",
        "url": "https://files.pythonhosted.org/packages/0a/96/03a82318e13380e83c1f0f2a2fef83e990abb13f231dfb89c0825e047b12/telethon_asyncpg-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f4d0e5b1cc962c90883a6ba91360f736b09433e9f9d9ff1f2b3b07b65a4a1f3",
          "md5": "8abca1ca6b828cfd7d02aabf28b8beb8",
          "sha256": "6a110da97aaea0cabca482fd613c22815faeb3a037826f3157265ae0e14fc17e"
        },
        "downloads": -1,
        "filename": "telethon_asyncpg-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8abca1ca6b828cfd7d02aabf28b8beb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 51302,
        "upload_time": "2020-05-21T00:56:40",
        "upload_time_iso_8601": "2020-05-21T00:56:40.060493Z",
        "url": "https://files.pythonhosted.org/packages/6f/4d/0e5b1cc962c90883a6ba91360f736b09433e9f9d9ff1f2b3b07b65a4a1f3/telethon_asyncpg-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "308e3c9af1a43c8ffb8e391629d81557a1a561a92e958360ec6cff7c7595ebcf",
          "md5": "f62f901db6e3f54ce4a2359bae5057d5",
          "sha256": "678d43efcb9b2cc4725b19720f3b1e06c50bb2f2472bfae9a5237ac4eab204b8"
        },
        "downloads": -1,
        "filename": "telethon_asyncpg-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f62f901db6e3f54ce4a2359bae5057d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 56434,
        "upload_time": "2020-05-26T10:03:56",
        "upload_time_iso_8601": "2020-05-26T10:03:56.645833Z",
        "url": "https://files.pythonhosted.org/packages/30/8e/3c9af1a43c8ffb8e391629d81557a1a561a92e958360ec6cff7c7595ebcf/telethon_asyncpg-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bd1bf1db685eb1e919c6b191ffaf083da62f37d99313b9cf6f16b6d7398d1e3",
          "md5": "66067ced0ece6c5fb63e58567a778066",
          "sha256": "44e7804ee9eaee111fce2f93196213827299b0def4c55f57473e0b9453e5ce77"
        },
        "downloads": -1,
        "filename": "telethon_asyncpg-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "66067ced0ece6c5fb63e58567a778066",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 51459,
        "upload_time": "2020-05-26T10:03:58",
        "upload_time_iso_8601": "2020-05-26T10:03:58.299205Z",
        "url": "https://files.pythonhosted.org/packages/9b/d1/bf1db685eb1e919c6b191ffaf083da62f37d99313b9cf6f16b6d7398d1e3/telethon_asyncpg-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "308e3c9af1a43c8ffb8e391629d81557a1a561a92e958360ec6cff7c7595ebcf",
        "md5": "f62f901db6e3f54ce4a2359bae5057d5",
        "sha256": "678d43efcb9b2cc4725b19720f3b1e06c50bb2f2472bfae9a5237ac4eab204b8"
      },
      "downloads": -1,
      "filename": "telethon_asyncpg-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f62f901db6e3f54ce4a2359bae5057d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 56434,
      "upload_time": "2020-05-26T10:03:56",
      "upload_time_iso_8601": "2020-05-26T10:03:56.645833Z",
      "url": "https://files.pythonhosted.org/packages/30/8e/3c9af1a43c8ffb8e391629d81557a1a561a92e958360ec6cff7c7595ebcf/telethon_asyncpg-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bd1bf1db685eb1e919c6b191ffaf083da62f37d99313b9cf6f16b6d7398d1e3",
        "md5": "66067ced0ece6c5fb63e58567a778066",
        "sha256": "44e7804ee9eaee111fce2f93196213827299b0def4c55f57473e0b9453e5ce77"
      },
      "downloads": -1,
      "filename": "telethon_asyncpg-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "66067ced0ece6c5fb63e58567a778066",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 51459,
      "upload_time": "2020-05-26T10:03:58",
      "upload_time_iso_8601": "2020-05-26T10:03:58.299205Z",
      "url": "https://files.pythonhosted.org/packages/9b/d1/bf1db685eb1e919c6b191ffaf083da62f37d99313b9cf6f16b6d7398d1e3/telethon_asyncpg-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}