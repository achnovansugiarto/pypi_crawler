{
  "info": {
    "author": "Leif Denby",
    "author_email": "l.c.denby@leeds.ac.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# lagtraj Lagragian simulations trajectories\n\n![lagtraj](https://github.com/EUREC4A-UK/lagtraj/workflows/lagtraj/badge.svg)\n\n![trajectory example](docs/eurec4a_20191209_12_lag.png)\n\n\n## Producing a Lagrangian forcing\n\nThere are three steps to making forcing profiles with lagtraj:\n\n1. [Download source data domain](#1-making-source-data-available) for a given\n   date-range (small for Eulerian simulations, big for Lagrangian)\n\n2. [Produce trajectory](#2-producing-a-trajectory)\n\n3. [Extract forcing\n   profiles](#3-producing-forcing-profiles)\n   along the trajectory (with optional conversion to target a specific LES/GCM\n   model)\n\nThe guide below first details how to install lagtraj and then guides your each\nof these three steps.\n\n\n## 0. Getting started\n\n### Installing lagtraj\n\nThe most recent tagged version of `lagtraj` (and all its dependencies) can be\ninstalled with pip directly from pipy:\n\n```bash\n$> python -m pip install lagtraj\n```\n\n*NOTE: if you are intending to modify `lagtraj` yourself you should check out\nthe [development notes](docs/developing.md).*\n\n`lagtraj` requires Python 3 and is developed and tested with `python3.8` (in\nthat we aim to follow the recommendations of\n[NEP29](https://numpy.org/neps/nep-0029-deprecation_policy.html)) but later\nversions should work too (it may work with earlier versions too).\n\nOnce installed all `lagtraj`'s commands are available from any directory\nand the follow the pattern\n\n```bash\n$> python -m lagtraj.<command>\n```\n\n### lagtraj input and output\n\n`lagtraj` stores everything (both source data and *input definitions*\ndescribing how domains, trajectories and forcings are set up) in a *data\ndirectory* (by default this will be `data/` relative to where `lagtraj` is\ninvoked). The directory structure is as follows:\n\n```bash\ndata\n├── domains\n│   ├── eurec4a_circle.yaml\n│   └── eurec4a_circle_data\n│       ├── an_model_2020-01-01.nc\n│       :\n│       └── fc_single_2020-01-03.nc\n├── forcings\n│   ├── eure4a_20200103_lag_testcase.yaml\n│   └── eure4a_20200103_lag_testcase.nc\n└── trajectories\n    ├── eure4a_20200103_lag_testcase.yaml\n    └── eure4a_20200103_lag_testcase.nc\n```\n\nThe `name` of each domain/trajectory/forcing inside `lagtraj` will be the\nfull filename without the `.yaml`-extension. E.g. the domain definition in\n`domains/eurec4a_circle.yaml` will have the name `eurec4a_circle` inside\n`lagtraj`.\n\nYou can either make your own domain/forcing/trajectory definition (these\nare stored in yaml-files) by creating a yaml-file in the relevant\ndirectory or use one that `lagtraj` comes with. You can list the\ninput-defintions bundled with your copy of `lagtraj` by running the\nfollowing command:\n\n```bash\n$> python -m lagtraj.input_definitions.examples\n```\n\nWhich will print\n\n```bash\nThe following domain/forcing/trajectory definitions are currently included\nwith lagtraj:\n\nlagtraj://\n ├── domains\n │   ├── drydown_cardington_local\n │   ├── eurec4a_circle\n │   └── eurec4a_north_atlantic\n ├── forcings\n │   ├── drydown_cardington_20200420_00_eul\n │   ├── eurec4a_campaign_eulerian\n │   ├── eurec4a_20200128_first\n │   ├── eurec4a_20200202_first_short_press\n │   ├── eurec4a_20200202_first_short\n │   ├── eurec4a_20200202_first\n...\n```\n\n## 1. Making source data available\n\n`lagtraj` is based around making all data required for interpolation,\nintegration and forcing calculation available before trajectories and forcings\nare calculated. This was done to reduce the number of data requests required\nto the data storage backends (e.g. ECMWF), but does mean that *the expected\nspatial extent that a trajectory will reach must been known before performining\na trajectory integration*, otherwise `lagtraj` will issue a warning when the\nedge of the available domain is reached.\n\nEither create your own domain definition in `data/domains/<domain_name>.yaml` and run\n\n```bash\n$> python -m lagtraj.domain.download <domain_name> <start_date> <end_date>\n```\n\nOr use one of the domain definitions included with `lagtraj` (e.g.\n`eurec4a_circle`\n\n\n```bash\n$> python -m lagtraj.domain.download lagtraj://eurec4a_circle <start_date> <end_date>\n```\nthe `<start_date>` and `<end_date>` should be formatted as `YYYY/MM/DD`, e.g. `2020/02/01` for the 2nd of February 2020.\n\nAn optional flag `--retry-rate <num_minutes>` causes `lagtraj` to continue\nretrying download of submitted data requests every `num_minutes` minutes until\nall data has been downloaded. Every time this command is run it will attempt to\ndownload only data not yet downloaded.\n\n## 2. Producing a trajectory\n\nOnce you have downloaded the required domain data you can either create\na trajectory definition in `data/trajectories/<trajectory_name>.yaml` and run\n\n```bash\n$> python -m lagtraj.trajectory.create <trajectory_name>\n```\n\nOr use one of the trajectory definitions included with `lagtraj` (e.g.\n`eurec4a_20200202_first_short`\n\n\n```bash\n$> python -m lagtraj.trajectory.create lagtraj://eurec4a_20200202_first_short\n```\n\nThe created trajectory will be stored in `data/trajectories/<trajectory_name>.nc`.\n\n## 3. Producing forcing profiles\n\nTo produce forcings you need to create a forcing definition in\n`data/forcings/<forcing_name>.yaml` and run\n\n```bash\n$> python -m lagtraj.forcings.create <forcing_name> [--conversion <conversion_name>]\n```\n\nOr use one of the forcing definitions included with `lagtraj` (e.g.\n`eurec4a_20200202_first_short`)\n\n```bash\n$> python -m lagtraj.forcings.create lagtraj://eurec4a_20200202_first_short [--conversion <conversion_name>]\n```\n\n### Forcing profiles conversion (targeting a specific GCM/LES)\n\nWhen creating forcings it might be desirable to target a specific LES\n(Large-Eddy Simulation) model or GCM (Global Circulation Model) by\nconverting the forcings to a specific format and setting parameters\nspecific to the model being targeted. This can be achieved by using the\n`--conversion` flag and providing a `conversion_name`. `lagtraj` currently\ncomes bundled with functionality to target the\n[KPT](https://www.lmd.jussieu.fr/~mpllmd/dephy2_forcages_communs/KPT_documentation.pdf)\nLES and\n[dephy](https://docs.google.com/document/d/118xP04jB9HO7Y2LqWk3HZpZ9n3CFujgzimLI7Ug8vO4)\nLES format.\n\nConversion parameters are defined in a yaml-files similarly to how domain,\ntrajectory and forcings definitions are stored, with one important difference:\nconversion definition files are associated with a specific forcing definition\nfile (i.e. each forcing conversion definition points to only one specific\nforcing definition). `lagtraj` comes bundled with definitions for how to do\nforcing conversion with sensible defaults that you can modify for each forcing\nyou wish to create.\n\nTo set the parameters for a conversion identifed by the name `kpt` for\nconverting a forcing with name `forcing_name` you should create a file in\n`data/forcings/<forcing_name>.<conversion_name>.yaml`. Running a conversion\nwill the convert `data/forcings/<forcing_name>.nc` and save to\n`data/forcings/<forcing_name>.<conversion_name>.nc`.\n\n```bash\n$> python -m lagtraj.forcings.create <forcing_name> [--conversion <conversion_name>]\n```\n\nInstead of creating a conversion definition starting from an empty file you can\nbootstrap the process by using the default parameters for a given target model\nincluded with lagtraj. This is achieved by using the `lagtraj://`-prefix when\nchoosing the conversion name. E.g. to create the forcing named\n`eurec4a_20200202_first_short` bundled with `lagtraj` and have it converted to\nthe `dephy` format with the default parameters you would run\n\n```bash\n$> python -m lagtraj.forcings.create lagtraj://eurec4a_20200202_first_short --conversion lagtraj://dephy\n```\n\nThis will create the un-converted forcing in\n`data/forcings/eurec4a_20200202_first_short.nc`, the converted one in\n`data/forcings/eurec4a_20200202_first_short.dephy.nc` and the default conversion definition\nfor targeting `dephy` will be copied to\n`data/forcings/eurec4a_20200202_first_short.dephy.yaml`. You can then modify\nthe forcing parameters (for example change the number of levels) by editing\n`data/forcings/eurec4a_20200202_first_short.dephy.yaml` and rerunning the\nforcing creation with your local copy of the conversion definition (note the\nabsence of the `lagtraj://` prefix):\n\n```bash\n$> python -m lagtraj.forcings.create lagtraj://eurec4a_20200202_first_short --conversion dephy\n```\n\nYou are of course welcome to rename the conversion however you like if for\nexample you'd like to have multiple different converted version of the same\nforcings file.\n\n# Contributing and comments\n\nIf you have any comments/questions/issues about `lagtraj` please feel free to\n[open an issue](https://github.com/EUREC4A-UK/lagtraj/issues/new) or have a\nlook in [docs/developing.md](docs/developing.md) where we have added some notes\non how to get started. All contributions are very welcome!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EUREC4A-UK/lagtraj",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lagtraj",
    "package_url": "https://pypi.org/project/lagtraj/",
    "platform": null,
    "project_url": "https://pypi.org/project/lagtraj/",
    "project_urls": {
      "Homepage": "https://github.com/EUREC4A-UK/lagtraj"
    },
    "release_url": "https://pypi.org/project/lagtraj/0.1.2/",
    "requires_dist": [
      "xarray (>=0.16.0)",
      "pytest",
      "netCDF4",
      "datetime",
      "numpy",
      "pyyaml",
      "cdsapi",
      "pandas (!=1.1.0)",
      "scipy",
      "argparse",
      "dask[array]",
      "asciitree",
      "isodate",
      "psutil",
      "semver (==2.13.0)",
      "numba",
      "pytest ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Python trajectory code for Lagrangian simulations",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16124823,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbb88aa5f9dfacae410fdcf3a167db78b3476df218cec68b49a1f8109b159d59",
          "md5": "2a58abb33950919408157d07569d2120",
          "sha256": "109ad25ffa51e78978be3b384cebc9826dfa1aceb6506303e0819908e4e8d002"
        },
        "downloads": -1,
        "filename": "lagtraj-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a58abb33950919408157d07569d2120",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 83984,
        "upload_time": "2022-11-06T18:26:03",
        "upload_time_iso_8601": "2022-11-06T18:26:03.284654Z",
        "url": "https://files.pythonhosted.org/packages/fb/b8/8aa5f9dfacae410fdcf3a167db78b3476df218cec68b49a1f8109b159d59/lagtraj-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f42cf3c6094a2e6cb18f622cb20eca25d717b5788b67427e2972ee19316f82c",
          "md5": "343f64bad57f038376741e0ff121d9fb",
          "sha256": "81b25c7127f0dc69ba4c38c52ff13f80aae8f5b13038db9be6d90acc2cdd843a"
        },
        "downloads": -1,
        "filename": "lagtraj-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "343f64bad57f038376741e0ff121d9fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101671,
        "upload_time": "2022-11-06T21:15:47",
        "upload_time_iso_8601": "2022-11-06T21:15:47.045735Z",
        "url": "https://files.pythonhosted.org/packages/5f/42/cf3c6094a2e6cb18f622cb20eca25d717b5788b67427e2972ee19316f82c/lagtraj-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deaacf58314507262a733ba1e17ca08307a4027e8e193912c0fb503e9ace3311",
          "md5": "a0001817eabc13c3e7024a2b441875b8",
          "sha256": "02c083c2edc978096945a72bc33c0869c213c07bad9952cbbf1ed718612f4703"
        },
        "downloads": -1,
        "filename": "lagtraj-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0001817eabc13c3e7024a2b441875b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 102851,
        "upload_time": "2022-12-16T10:41:16",
        "upload_time_iso_8601": "2022-12-16T10:41:16.426542Z",
        "url": "https://files.pythonhosted.org/packages/de/aa/cf58314507262a733ba1e17ca08307a4027e8e193912c0fb503e9ace3311/lagtraj-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "deaacf58314507262a733ba1e17ca08307a4027e8e193912c0fb503e9ace3311",
        "md5": "a0001817eabc13c3e7024a2b441875b8",
        "sha256": "02c083c2edc978096945a72bc33c0869c213c07bad9952cbbf1ed718612f4703"
      },
      "downloads": -1,
      "filename": "lagtraj-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0001817eabc13c3e7024a2b441875b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 102851,
      "upload_time": "2022-12-16T10:41:16",
      "upload_time_iso_8601": "2022-12-16T10:41:16.426542Z",
      "url": "https://files.pythonhosted.org/packages/de/aa/cf58314507262a733ba1e17ca08307a4027e8e193912c0fb503e9ace3311/lagtraj-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}