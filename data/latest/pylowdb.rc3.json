{
  "info": {
    "author": "Hussein Sarea",
    "author_email": "zzzsssx0@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Utilities"
    ],
    "description": "# Pylowdb\r\n\r\n[![Downloads](https://pepy.tech/badge/pylowdb)](https://pepy.tech/project/pylowdb)\r\n[![Downloads](https://pepy.tech/badge/pylowdb/month)](https://pepy.tech/project/pylowdb)\r\n\r\n> Simple to use local JSON database ðŸ¦‰\r\n\r\n```python\r\n# This is pure python, not specific to pylowdb ;)\r\ndb.data['posts'] = ({ 'id': 1, 'title': 'pylowdb is awesome' })\r\n\r\n# Save to file\r\ndb.write()\r\n```\r\n\r\n```python\r\n# db.json\r\n{\r\n  \"posts\": [\r\n    { \"id\": 1, \"title\": \"pylowdb is awesome\" }\r\n  ]\r\n}\r\n```\r\n\r\n## Support me\r\n\r\n[![\"Buy Me A Coffee\"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/HusseinSarea)\r\n\r\n## Features\r\n\r\n- __Lightweight__\r\n- __Minimalist__ and easy to learn API\r\n- Query and modify data using __plain Python__\r\n- Atomic write\r\n- Hackable:\r\n  - Change storage, file format (JSON, YAML, ...) or add encryption via [adapters](#adapters)\r\n\r\n## Install\r\n\r\n```python\r\npip install pylowdb\r\n```\r\n\r\n## Usage\r\n\r\n```python\r\nimport os\r\nfrom os import path\r\nfrom pylowdb import (\r\n    Low,\r\n    JSONFile,\r\n)\r\n\r\n# Use JSON file for storage\r\nfile = path.join(os.getcwd(), 'db.json')\r\nadapter = JSONFile(file)\r\ndb = Low(adapter)\r\n\r\n# Read data from JSON file, this will set db.data content\r\ndb.read()\r\n\r\n# If file.json doesn't exist, db.data will be None\r\n# Set default data\r\n# db.data = db.data or { 'posts': [] }\r\ndb.data = db.data or { 'posts': [] }\r\n\r\n# Create and query items using plain Python\r\n\r\ndb.data['posts'].append('hello world')\r\ndb.data['posts'][0]\r\n\r\n# You can also use this syntax if you prefer\r\nposts = db.data['posts']\r\nposts.append('hello world')\r\n\r\n# Write db.data content to db.json\r\ndb.write()\r\n```\r\n\r\n```JSON\r\n// db.json\r\n{\r\n  \"posts\": [ \"hello world\" ]\r\n}\r\n```\r\n\r\n### More examples\r\n\r\nFor more example, see [`examples/`](/examples) directory.\r\n\r\n## API\r\n\r\n### Classes\r\n\r\nPylowdb has classes (for synchronous adapters).\r\n\r\n#### `Low(adapter)`\r\n\r\n```python\r\nfrom pylowdb import (\r\n    Low,\r\n    JSONFile,\r\n)\r\ndb = Low(JSONFile('file.json'))\r\ndb.read()\r\ndb.write()\r\n```\r\n\r\n### Methods\r\n\r\n#### `db.read()`\r\n\r\nCalls `adapter.read()` and sets `db.data`.\r\n\r\n**Note:** `JSONFile` adapter will set `db.data` to `None` if file doesn't exist.\r\n\r\n```python\r\ndb.data  # is None\r\ndb.read()\r\ndb.data # is not None\r\n```\r\n\r\n#### `db.write()`\r\n\r\nCalls `adapter.write(db.data)`.\r\n\r\n```python\r\ndb.data = { 'posts': [] }\r\ndb.write() # file.json will be { posts: [] }\r\ndb.data = {}\r\ndb.write() # file.json will be {}\r\n```\r\n\r\n### Properties\r\n\r\n#### `db.data`\r\n\r\nHolds your db content. If you're using the adapters coming with pylowdb, it can be any type supported by [`json.dumbs`](https://docs.python.org/3/library/json.html).\r\n\r\nFor example:\r\n\r\n```python\r\ndb.data = 'string'\r\ndb.data = [1, 2, 3]\r\ndb.data = { 'key': 'value' }\r\n```\r\n\r\n## Adapters\r\n\r\n### Pylowdb adapters\r\n\r\n#### `JSONFile`\r\n\r\nAdapter for reading and writing JSON files.\r\n\r\n```python\r\nLow(JSONFile(filename))\r\n```\r\n\r\n#### `Memory`\r\n\r\nIn-memory adapter. Useful for speeding up unit tests.\r\n\r\n```python\r\nLow(Memory())\r\n```\r\n\r\n#### `YAMLFile`\r\n\r\nAdapter for reading and writing YAML files.\r\n\r\n```python\r\nLow(YAMLFile(filename))\r\n```\r\n\r\n#### `TextFile`\r\n\r\nAdapters for reading and writing text. Useful for creating custom adapters.\r\n\r\n### Third-party adapters\r\n\r\nIf you've published an adapter for pylowdb, feel free to create a PR to add it here.\r\n\r\n### Writing your own adapter\r\n\r\nYou may want to create an adapter to write `db.data` to YAML, XML, encrypt data, a remote storage, ...\r\n\r\nAn adapter is a simple class that just needs to expose two methods:\r\n\r\n```python\r\nclass CustomAdapter:\r\n    read(self):\r\n        # should return deserialized data\r\n        pass\r\n    write(self, data):\r\n        # should return nothing\r\n        pass\r\n```\r\n\r\nFor example, let's say you have some async storage and want to create an adapter for it:\r\n\r\n```python\r\napi = YourAPI()\r\n\r\nclass CustomAdapter:\r\n    # Optional: your adapter can take arguments\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        pass\r\n\r\n    def read(self):\r\n        data = api.read()\r\n    return data\r\n\r\n    def write(self, data):\r\n        api.write(data)\r\n\r\nadapter = CustomAdapter()\r\ndb = Low(adapter)\r\n```\r\n\r\nSee [`pylowdb/adapters`](pylowdb/adapters.py) for more examples.\r\n\r\n#### Custom serialization\r\n\r\nTo create an adapter for another format than JSON, you can use\r\n`TextFile`.\r\n\r\nFor example:\r\n\r\n```python\r\nfrom pylowdb import (\r\n    Adapter,\r\n    Low,\r\n    TextFile,\r\n)\r\nimport yaml\r\n\r\nclass YAMLFile(Adapter):\r\n    def __init__(self, filename: str):\r\n        self.adapter = TextFile(filename)\r\n\r\n    def read(self):\r\n        data = self.adapter.read()\r\n        if data is None:  \r\n            return null\r\n        else:\r\n            return YAML.deserialize(data)\r\n\r\n    def write(self, obj):\r\n        return self.adapter.write(YAML.serialize(obj))\r\n\r\nadapter = YAMLFile('file.yaml')\r\ndb = Low(adapter)\r\n```\r\n\r\n## Limits\r\n\r\nIf you have large Python objects (`~10-100MB`) you may hit some performance issues. This is because whenever you call `db.write`, the whole `db.data` is serialized and written to storage.\r\n\r\nDepending on your use case, this can be fine or not. It can be mitigated by doing batch operations and calling `db.write` only when you need it.\r\n\r\nIf you plan to scale, it's highly recommended to use databases like PostgreSQL, MySql, Oracle ...\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ho011/pylowdb",
    "keywords": "database,db,electron,embed,embedded,flat,JSON,local,localStorage",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Pylowdb",
    "package_url": "https://pypi.org/project/Pylowdb/",
    "platform": "",
    "project_url": "https://pypi.org/project/Pylowdb/",
    "project_urls": {
      "Bug Reports": "https://github.com/Ho011/pylowdb/issues",
      "Funding": "https://www.buymeacoffee.com/HusseinSarea",
      "Homepage": "https://github.com/Ho011/pylowdb",
      "Source": "https://github.com/Ho011/pylowdb"
    },
    "release_url": "https://pypi.org/project/Pylowdb/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Tiny local JSON database for Python, django, flask",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12469601,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24691a1abc90ca8b08bb827a0478cc390d7d4ad4e62b3cbd0677d621ab106fed",
          "md5": "30bd3571f35b35df98e2a3d75dedfd32",
          "sha256": "5febd3b63492132de43bf3e258a9437fc75dfc0fb44fcfc3789b6399b7ae88c6"
        },
        "downloads": -1,
        "filename": "Pylowdb-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30bd3571f35b35df98e2a3d75dedfd32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7255,
        "upload_time": "2021-12-30T09:43:29",
        "upload_time_iso_8601": "2021-12-30T09:43:29.373954Z",
        "url": "https://files.pythonhosted.org/packages/24/69/1a1abc90ca8b08bb827a0478cc390d7d4ad4e62b3cbd0677d621ab106fed/Pylowdb-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25030aa8da0db4b026dc82dbae4557fbbd77ee8b56b07326d63a6f703e3a76bf",
          "md5": "82b52a1a7b624b87f6bcfd2dd35e2791",
          "sha256": "4fe25487b3caf98ad8868b8e747537c872540ce9f7522d558bf87f870d115efe"
        },
        "downloads": -1,
        "filename": "Pylowdb-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "82b52a1a7b624b87f6bcfd2dd35e2791",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7246,
        "upload_time": "2021-12-30T10:30:32",
        "upload_time_iso_8601": "2021-12-30T10:30:32.767686Z",
        "url": "https://files.pythonhosted.org/packages/25/03/0aa8da0db4b026dc82dbae4557fbbd77ee8b56b07326d63a6f703e3a76bf/Pylowdb-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cadf6aed22d6b6886539767c46fec900a5f772e380f1d412b210c09fec84951a",
          "md5": "a1d8bb8b61c9c8e882dca9eb1117ac94",
          "sha256": "fea573c339b2a4d96d4efe42852e75590717c742766f99416d879e014626b339"
        },
        "downloads": -1,
        "filename": "Pylowdb-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a1d8bb8b61c9c8e882dca9eb1117ac94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7250,
        "upload_time": "2022-01-04T01:48:32",
        "upload_time_iso_8601": "2022-01-04T01:48:32.808969Z",
        "url": "https://files.pythonhosted.org/packages/ca/df/6aed22d6b6886539767c46fec900a5f772e380f1d412b210c09fec84951a/Pylowdb-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cadf6aed22d6b6886539767c46fec900a5f772e380f1d412b210c09fec84951a",
        "md5": "a1d8bb8b61c9c8e882dca9eb1117ac94",
        "sha256": "fea573c339b2a4d96d4efe42852e75590717c742766f99416d879e014626b339"
      },
      "downloads": -1,
      "filename": "Pylowdb-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a1d8bb8b61c9c8e882dca9eb1117ac94",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 7250,
      "upload_time": "2022-01-04T01:48:32",
      "upload_time_iso_8601": "2022-01-04T01:48:32.808969Z",
      "url": "https://files.pythonhosted.org/packages/ca/df/6aed22d6b6886539767c46fec900a5f772e380f1d412b210c09fec84951a/Pylowdb-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}