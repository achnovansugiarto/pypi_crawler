{
  "info": {
    "author": "Jiena Gu McLellan",
    "author_email": "jienagu90@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## jsonMojo\nA series of utility functions to help with tidy json via python dictionary.\n\n## Installation from github\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install jsonMojo.\n\n## features\n\n* `replace_element`: recursively replace an element by a desired element within a dictionary\n* `remove_element`: recursively remove a desired element within a dictionary\n* `list_flatten`: recursively flat a list/array\n* `sort_dict`: sort a python dictionary by either key or value\n* `filter_rowwise`: filter a rowwise list/array by selected value(s)\n* `sort_rowwise`: sort a rowwise list/array by selected key\n\n\n## Usage\n\n```python\nimport jsonMojo as jm\n\n# test_dict as an example input\ntest_dict = {\n    \"A\": \"1\",\n    \"B\": \"2\",\n    \"C\":{\n        \"C1\": [\"1\", \"45\"]\n    }\n}\n```\n\n### Recursively replace an element by a desired element within a dictionary\n\n```python\njm.replace_element(test_dict, to_replace = \"1\", replace_with = \"A1\" )\n#returns {'A': 'A1', 'B': '2', 'C': {'C1': ['A1', '45']}}\n```\nWe can set `output_json = True` if we want the output in JSON string format.\n\n```python\njm.replace_element(test_dict, to_replace = \"1\", replace_with = \"A1\" , output_json = True)\n#returns '{\\n\"A\": \"A1\",\\n\"B\": \"2\",\\n\"C\": {\\n\"C1\": [\\n\"A1\",\\n\"45\"\\n]\\n}\\n}'}\n```\n\n### Recursively remove a desired element within a dictionary\n\n```python\njm.remove_element(test_dict, to_remove = \"1\" )\n#returns {'B': '2', 'C': {'C1': ['45']}}\n```\n\n```python\njm.remove_element(test_dict, to_remove = \"1\" , output_json = True)\n#returns '{\\n\"B\": \"2\",\\n\"C\": {\\n\"C1\": [\\n\"45\"\\n]\\n}\\n}'\n```\n\n### recursively flat a list/array\n\n```python\njm.list_flatten(['2', ['1', '3', ['a', '1']]] )\n#returns ['2', '1', '3', 'a', '1']\n\njm.list_flatten(list({\"A\", \"B\"}))\n#returns ['A', 'B']\n```\n\n```python\njm.list_flatten(['2', ['1', '3', ['a', '1']]] , output_json = True)\n#returns '[\\n\"2\",\\n\"1\",\\n\"3\",\\n\"a\",\\n\"1\"\\n]'\n\njm.list_flatten(list({\"A\", \"B\"}), output_json = True)\n#returns '[\\n\"A\",\\n\"B\"\\n]'\n```\n\n### sort a python dictionary by either key or value\n\n```python\njm.sort_dict(input_dict = {\"A\": 2, \"BA\": 4, \"GW\": 3, \"EW\": 1, \"W\": 0}, sort_by_key = False, descending = False )\n# returns {'W': 0, 'EW': 1, 'A': 2, 'GW': 3, 'BA': 4}\n\njm.sort_dict(input_dict = {\"A\": 2, \"BA\": 4, \"GW\": 3, \"EW\": 1, \"W\": 0}, sort_by_key = True, descending = False )\n# returns {'A': 2, 'BA': 4, 'EW': 1, 'GW': 3, 'W': 0}\n```\nWe can set `output_json = True` if we want the output in JSON string format.\n\n### filter a rowwise list/array by selected value(s)\n\n```python\ninput_rowwise = [\n    {\"id\": 10, \"dept\": \"Biology\"},\n    {\"id\": 2, \"dept\": \"Chemistry\"},\n    {\"id\": 3, \"dept\": \"Computer Science\"}\n]\njm.filter_rowwise(input_rowwise, by_key = \"dept\", filter_in = [\"Biology\", \"Computer Science\"])\n# returns [{'id': 1, 'dept': 'Biology'}, {'id': 3, 'dept': 'Computer Science'}]\n```\nWe can set `output_json = True` if we want the output in JSON string format.\n\n### sort a rowwise list/array by selected key\n\n```python\ncars = [\n  {'car': 'Ford', 'year': 2005},\n  {'car': 'Mitsubishi', 'year': 2000},\n  {'car': 'BMW', 'year': 2019},\n  {'car': 'VW', 'year': 2011}\n]\njm.sort_rowwise(cars, by_key = 'car', descending =False)\n# returns [{'car': 'BMW', 'year': 2019},\n# {'car': 'Ford', 'year': 2005},\n# {'car': 'Mitsubishi', 'year': 2000},\n# {'car': 'VW', 'year': 2011}]\n```\nWe can set `output_json = True` if we want the output in JSON string format.\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jienagu/jsonMojo",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsonMojo",
    "package_url": "https://pypi.org/project/jsonMojo/",
    "platform": null,
    "project_url": "https://pypi.org/project/jsonMojo/",
    "project_urls": {
      "Homepage": "https://github.com/jienagu/jsonMojo"
    },
    "release_url": "https://pypi.org/project/jsonMojo/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A series of utility functions to help with tidy json via python dictionary.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13716525,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c48818498b5e6fd532da7d4fb18a5c88a4e6c76090e6b546047e4272292aedb",
          "md5": "5dfae98672ff58088219c06a99d55ef9",
          "sha256": "f9840f6b1bb91c898d824a7e1c5df5c090e76aacae77663eb314547cbdcc6fc4"
        },
        "downloads": -1,
        "filename": "jsonMojo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5dfae98672ff58088219c06a99d55ef9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3212,
        "upload_time": "2022-05-05T02:09:01",
        "upload_time_iso_8601": "2022-05-05T02:09:01.630320Z",
        "url": "https://files.pythonhosted.org/packages/6c/48/818498b5e6fd532da7d4fb18a5c88a4e6c76090e6b546047e4272292aedb/jsonMojo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18c4fc2299a1c7111cfd3d1e0f903d312a34753454370642900c6a2754dae1a4",
          "md5": "139d9c2eb82fbba5f5fe8925c5a2d88c",
          "sha256": "483d96a8e344a8e9aab0ca0a4927f871464c68aa58bbcfafa94929193e07e339"
        },
        "downloads": -1,
        "filename": "jsonMojo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "139d9c2eb82fbba5f5fe8925c5a2d88c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3186,
        "upload_time": "2022-05-05T02:22:43",
        "upload_time_iso_8601": "2022-05-05T02:22:43.887815Z",
        "url": "https://files.pythonhosted.org/packages/18/c4/fc2299a1c7111cfd3d1e0f903d312a34753454370642900c6a2754dae1a4/jsonMojo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18c4fc2299a1c7111cfd3d1e0f903d312a34753454370642900c6a2754dae1a4",
        "md5": "139d9c2eb82fbba5f5fe8925c5a2d88c",
        "sha256": "483d96a8e344a8e9aab0ca0a4927f871464c68aa58bbcfafa94929193e07e339"
      },
      "downloads": -1,
      "filename": "jsonMojo-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "139d9c2eb82fbba5f5fe8925c5a2d88c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3186,
      "upload_time": "2022-05-05T02:22:43",
      "upload_time_iso_8601": "2022-05-05T02:22:43.887815Z",
      "url": "https://files.pythonhosted.org/packages/18/c4/fc2299a1c7111cfd3d1e0f903d312a34753454370642900c6a2754dae1a4/jsonMojo-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}