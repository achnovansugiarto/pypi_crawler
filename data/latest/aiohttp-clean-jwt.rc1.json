{
  "info": {
    "author": "Vladimir Kirievskiy",
    "author_email": "vladimir@kirievskiy.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# aiohttp-clean-jwt\n**Простая аутентификация по JWT-токену для aiohttp**\n\nИсточник вдохновения - [aiohttp-jwt](https://github.com/hzlmn/aiohttp-jwt)\n\nК сожалению, оригинальная библиотека плохо документирована, перегружена малопонятным функционалом и уже несколько лет выглядит заброшенной.\n\n____\n## Установка:\n```\npip install aiohttp_clean_jwt\n```\n\n## Пример использования:\n\n```python\nfrom aiohttp import web\nfrom aiohttp.web import Application, Request, Response\nfrom aiohttp_clean_jwt import get_token, json_response, middleware_factory\n\nJWT_SECRET = 'top_secret_word'\nJWT_ALGORITHM = 'HS256'\nJWT_EXP_DELTA_SECONDS = 360\nJWT_AUTH_SCHEME = 'Bearer'\n\n\nasync def get_user_id(login: str, password: str) -> int:\n    \"\"\" Проверка ID пользователя. В реальном приложении должна сходить в базу.\"\"\"\n    if login == 'vasya' and password == 'qwerty':\n        return 12345\n\n\nasync def sign_in(request: Request) -> Response:\n    \"\"\" Ручка авторизации \"\"\"\n    try:\n        login = request.rel_url.query['login']\n        password = request.rel_url.query['password']\n    except KeyError:\n        raise web.HTTPUnauthorized(reason='Missing credentials')\n\n    user_id = await get_user_id(login=login, password=password)\n    if user_id is not None:\n        jwt_token = get_token({'user_id': str(user_id)},\n                              expiration_s=JWT_EXP_DELTA_SECONDS,\n                              algorithm=JWT_ALGORITHM,\n                              secret=JWT_SECRET)\n\n        return json_response({'token': jwt_token})\n    else:\n        raise web.HTTPUnauthorized(reason='Wrong credentials')\n\n# Все ручки по умолчанию считаются приватными.\n# Чтобы сделать ручку публичной, ее нужно явным образом перечислить в whitelist.\n# Для доступа к приватным ручкам необходимо передавать полученный в /login токен через\n# HTTP HEADER \"Authorization: Bearer\"\n\n\nasync def stub1(request: Request) -> Response:\n    \"\"\" Приватная ручка 1\"\"\"\n    user_id = request.rel_url.query['user_id']\n    result = {'user_id': user_id, 'handler': 'stub1'}\n\n    return json_response(result)\n\n\nasync def stub2(request: Request) -> Response:\n    \"\"\" Приватная ручка 2\"\"\"\n    user_id = request.rel_url.query['user_id']\n    result = {'user_id': user_id, 'handler': 'stub2'}\n\n    return json_response(result)\n\n\nasync def public(request: Request) -> Response:\n    \"\"\" Публичная ручка\"\"\"\n    result = {'user_id': 'anonymous', 'handler': 'public'}\n\n    return json_response(result)\n\n\nif __name__ == '__main__':\n    app = Application(middlewares=middleware_factory(\n        whitelist=['/login', '/public'],\n        secret=JWT_SECRET,\n        algorithm=JWT_ALGORITHM,\n        auth_scheme=JWT_AUTH_SCHEME,\n    ))\n\n    app.add_routes([web.get('/login', sign_in), web.get('/public', public),\n                    web.get('/stub1', stub1), web.get('/stub2', stub2)])\n\n    web.run_app(app=app)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitflic.ru/project/vlakir/aiohttp-clean-jwt.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiohttp-clean-jwt",
    "package_url": "https://pypi.org/project/aiohttp-clean-jwt/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiohttp-clean-jwt/",
    "project_urls": {
      "Homepage": "https://gitflic.ru/project/vlakir/aiohttp-clean-jwt.git"
    },
    "release_url": "https://pypi.org/project/aiohttp-clean-jwt/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "jwt authentication for aiohttp",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14199399,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf476a8f11eae7423ac71b200106361ca59f2dadbcc9af9d955b3d5ae899e703",
          "md5": "11b2bb05cab4e449b5be2c3ccb216085",
          "sha256": "2788dc98b5e0f0732e7d44fd90562ec33dc23a9501c6eb5db82bab45ed5d5679"
        },
        "downloads": -1,
        "filename": "aiohttp_clean_jwt-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11b2bb05cab4e449b5be2c3ccb216085",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16634,
        "upload_time": "2022-06-21T14:01:18",
        "upload_time_iso_8601": "2022-06-21T14:01:18.719716Z",
        "url": "https://files.pythonhosted.org/packages/cf/47/6a8f11eae7423ac71b200106361ca59f2dadbcc9af9d955b3d5ae899e703/aiohttp_clean_jwt-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d14f64e4e846948131a6010a86ca0741aa1f4fb8de4ea43d27bcdd4c61491dd",
          "md5": "fdf16df0acd1bb2ba72490aaffdfd754",
          "sha256": "a152ff8a1aed79e728e42629453dcf543f50f4376fe5f7418ff8a45ccb519549"
        },
        "downloads": -1,
        "filename": "aiohttp_clean_jwt-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fdf16df0acd1bb2ba72490aaffdfd754",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16187,
        "upload_time": "2022-06-21T14:01:21",
        "upload_time_iso_8601": "2022-06-21T14:01:21.293373Z",
        "url": "https://files.pythonhosted.org/packages/0d/14/f64e4e846948131a6010a86ca0741aa1f4fb8de4ea43d27bcdd4c61491dd/aiohttp_clean_jwt-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf476a8f11eae7423ac71b200106361ca59f2dadbcc9af9d955b3d5ae899e703",
        "md5": "11b2bb05cab4e449b5be2c3ccb216085",
        "sha256": "2788dc98b5e0f0732e7d44fd90562ec33dc23a9501c6eb5db82bab45ed5d5679"
      },
      "downloads": -1,
      "filename": "aiohttp_clean_jwt-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11b2bb05cab4e449b5be2c3ccb216085",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16634,
      "upload_time": "2022-06-21T14:01:18",
      "upload_time_iso_8601": "2022-06-21T14:01:18.719716Z",
      "url": "https://files.pythonhosted.org/packages/cf/47/6a8f11eae7423ac71b200106361ca59f2dadbcc9af9d955b3d5ae899e703/aiohttp_clean_jwt-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d14f64e4e846948131a6010a86ca0741aa1f4fb8de4ea43d27bcdd4c61491dd",
        "md5": "fdf16df0acd1bb2ba72490aaffdfd754",
        "sha256": "a152ff8a1aed79e728e42629453dcf543f50f4376fe5f7418ff8a45ccb519549"
      },
      "downloads": -1,
      "filename": "aiohttp_clean_jwt-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fdf16df0acd1bb2ba72490aaffdfd754",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16187,
      "upload_time": "2022-06-21T14:01:21",
      "upload_time_iso_8601": "2022-06-21T14:01:21.293373Z",
      "url": "https://files.pythonhosted.org/packages/0d/14/f64e4e846948131a6010a86ca0741aa1f4fb8de4ea43d27bcdd4c61491dd/aiohttp_clean_jwt-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}