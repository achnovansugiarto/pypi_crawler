{
  "info": {
    "author": "Dmitri Soshnikov",
    "author_email": "dmitri@soshnikov.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# keragan\n\n## Keras implementation of GANs\n\nThis library provides some simple infrastructure to define and train Generative Adversarial Networks in Keras. It can also be used from the command line.\n\n### Installation\n\nThe simplest way to install is:\n```bash\npip install keragan\n```\n\n### Some Images produced by keragan\n\nImages were trained on [WikiArt.org](http://wikiart.org) dataset taken from [here](https://github.com/cs-chan/ArtGAN/blob/master/WikiArt%20Dataset/README.md).\n\n|![Minimalistic Landscape 1](images/min_landscape_1.jpg)|![Spring Dawn](images/spring_dawn.jpg)|![Still Water 2](images/still_water_2.jpg)|\n|---|---|---\n| *Minimalistic Landcape*, 2020 | *Spring Dawn*, 2020 | *Water Still 2*, 2020 |\n|---|---|---\n\n### Training GAN from the Command-Line\n\nTo start training, you can use the following command-line:\n```bash\npython -m keragan.trainer c:\\dataset --size 1024 --model_path .\\models --samples_path .\\samples --latent_dim 100 --epochs 1000\n```\n\nYou can find out more about other parameters by calling the program with `--help` option.\n\nImportant things to note:\n* `--size` must be power of 2, suitable values are 64, 128, 256, 512 and 1024. Higher resoltions are likely not to give good results.\n* You can use `--lr` to set learning rate, default value is 0.001. Smaller learning rates yield better results, but may significantly increase training time.\n\n### Generating Images\n\nOnce you have trained the model, you can use the generator model to produce new random images. To do that from a command line, you can use the following:\n\n```bash\npython -m keragan.generate --file ./models/gen_1100.hdf5 --out ./samples --n 100\n```\n\nUse `--help` option to find out more about different options.\n\n### Architecture \n\nThe library is structured around few core classes:\n* `GAN` is used to represent a GAN, with `generator` and `discriminator` fields that define corresponding networks. `GAN` itself is abstract, and any subclass should define `create_generator()` and `create_discriminator()` functions. This class is also responsible for loading/saving networks to disk, and it can also generate sample images using `sample_images` method.\n* `DCGAN` is currently the only subclass, implementing Deep Convolutional GAN.\n* `ImageDataset` is a class defining the process of loading initial dataset from disk, resizing it to specified size, filtering out bad images, etc.\n* `GANTrainer` is responsible to training a GAN, i.e. running epoch loop and periodically storing samples and network weights to disk. \n\nThe actual training code looks like this:\n```python\n    gan = keragan.DCGAN(args)\n    imsrc = keragan.ImageDataset(args)\n    imsrc.load()\n    if args.sample_images:\n        imsrc.sample_images()\n\n    train = keragan.GANTrainer(image_dataset=imsrc,gan=gan,args=args)\n    \n    def callbk(tr):\n        if args.visual_inspection_interval and tr.gan.epoch % args.visual_inspection_interval == 0:\n            res = tr.gan.sample_images(n=2)\n            fig,ax = plt.subplots(1,len(res))\n            for i,v in enumerate(res):\n                ax[i].imshow(v[0])\n            plt.show()\n\n    train.train(callbk)\n```",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shwars/keragan",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keragan",
    "package_url": "https://pypi.org/project/keragan/",
    "platform": "",
    "project_url": "https://pypi.org/project/keragan/",
    "project_urls": {
      "Homepage": "https://github.com/shwars/keragan"
    },
    "release_url": "https://pypi.org/project/keragan/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Keras GAN Library",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10608717,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80c2560e294211a0e28e3904143723d88b6b1aa985af7464d9cc66fdbb70ad6e",
          "md5": "695a39ffb2ee0c896fe5537a19bf27f5",
          "sha256": "e52a495ef3011709f1246bb4a0ced924c37de699af01c886097fb02725c8bd20"
        },
        "downloads": -1,
        "filename": "keragan-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "695a39ffb2ee0c896fe5537a19bf27f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7708,
        "upload_time": "2020-03-13T08:25:24",
        "upload_time_iso_8601": "2020-03-13T08:25:24.210593Z",
        "url": "https://files.pythonhosted.org/packages/80/c2/560e294211a0e28e3904143723d88b6b1aa985af7464d9cc66fdbb70ad6e/keragan-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7403dd9e9f556daa8c4e3ae1bfc4a2ab3f90cad6fa5344db1af10fece1480420",
          "md5": "66aa336b1e14a806d96c5e91546b9949",
          "sha256": "1e480de98ea0003fcd7dd4249cef39818b83fc75aa23812058e34c088a5d0b22"
        },
        "downloads": -1,
        "filename": "keragan-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "66aa336b1e14a806d96c5e91546b9949",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6288,
        "upload_time": "2020-03-13T08:25:26",
        "upload_time_iso_8601": "2020-03-13T08:25:26.462318Z",
        "url": "https://files.pythonhosted.org/packages/74/03/dd9e9f556daa8c4e3ae1bfc4a2ab3f90cad6fa5344db1af10fece1480420/keragan-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea09142a257b38b9e0a8619927ba266bd188a1a0f82f5e936f366d5e3461abe4",
          "md5": "4d64b054a9dabc5a5fc66c7aa703cc55",
          "sha256": "589aba934ac14379256d4ded0e029c0f225896d4ce2df2e267cef1022964f7f4"
        },
        "downloads": -1,
        "filename": "keragan-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4d64b054a9dabc5a5fc66c7aa703cc55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11293,
        "upload_time": "2021-06-10T06:31:18",
        "upload_time_iso_8601": "2021-06-10T06:31:18.816654Z",
        "url": "https://files.pythonhosted.org/packages/ea/09/142a257b38b9e0a8619927ba266bd188a1a0f82f5e936f366d5e3461abe4/keragan-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea09142a257b38b9e0a8619927ba266bd188a1a0f82f5e936f366d5e3461abe4",
        "md5": "4d64b054a9dabc5a5fc66c7aa703cc55",
        "sha256": "589aba934ac14379256d4ded0e029c0f225896d4ce2df2e267cef1022964f7f4"
      },
      "downloads": -1,
      "filename": "keragan-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4d64b054a9dabc5a5fc66c7aa703cc55",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11293,
      "upload_time": "2021-06-10T06:31:18",
      "upload_time_iso_8601": "2021-06-10T06:31:18.816654Z",
      "url": "https://files.pythonhosted.org/packages/ea/09/142a257b38b9e0a8619927ba266bd188a1a0f82f5e936f366d5e3461abe4/keragan-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}