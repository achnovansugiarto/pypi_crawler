{
  "info": {
    "author": "hao",
    "author_email": "hl7gr@virginia.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Using djmongoauth\n\n## What is it?\n`djmongoauth` provides out-of-the-box support for basic user management and additional operations including user registration, login, logout, email verification, password recovery for backends built with the Django web framework and MongoDB.\n\n`djmongoauth` is based on `djongo`, a MongoDB ORM for Django.\n\n## Use cases\n### User object\nUser object is the core of the `djmongoauth`. It represents a authenticable entity. The primary attributes of a default user instance are:\n\n- `username`\n- `email`\n- `password`\n- `email_verified`\n- `email_verified_at`\n\n### Register a new user\n```\ndef register(request):\n    req_body = json.loads(request.body.decode(\"UTF-8\"))\n    user = User()\n    user.username = req_body[\"username\"]\n    user.email = req_body[\"email\"]\n    user.password = req_body[\"password\"]\n    try:\n        user.register()\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=400)\n    return HttpResponse(status=201)\n```\n- `request.method` must be `POST`\n- Body of `request` must have these attributes and they must be well-formed: `username`, `email`, `password`. Password can be cleartext (`djmongoauth` takes care of hashing / decryption)\n\n### Log in \n```\ndef login(request):\n    try:\n        req_body = json.loads(request.body.decode(\"UTF-8\"))\n        x_auth_token = User.login(req_body[\"username\"], req_body[\"password\"])\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=400)\n    return JsonResponse({\"token\": x_auth_token})\n```\n- `request.method` must be `POST`\n- Body of `request` must have these attributes: `username` and `password`\n- `login()` call returns a `x_auth_token`. This token should be returned to your site's frontend and serve as a basic auth token in the `HTTP_AUTHORIZATION` header for all subsequent requests till the token expires\n\n### Log out \n```\ndef logout(request):\n    try:\n        User.logout(request)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=400)\n    return HttpResponse(status=204)\n```\n- `request` must have its `HTTP_AUTHORIATION` header set to the `x_auth_token` returned from `login` call\n\n### Email verification \n```\n# handler for verifying email address\ndef verify_email(request):\n    if request.method == \"POST\":\n        return _send_verify_email(request)\n    elif request.method == \"PUT\":\n        return _handle_email_verification(request)\n    else:\n        return HttpResponse(status=405)\n\ndef _send_verify_email(request):\n    try:\n        User.send_email(request, type=EmailTypes.VERIFY)\n        return HttpResponse(status=201)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=400)\n\ndef _handle_email_verification(request):\n    try:\n        User.handle_email_request(request, EmailTypes.VERIFY)\n        return HttpResponse(status=200)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=400)\n```\n\nA verification email will be sent to the user's registered email address. Following is a sample verification email:\n\n```\nHello test_user:\n\nPlease use the following link to verify your email address on test.com\n\nhttps://test.com/verify?a=wMw_qmXu8fZOlcHP1Xpku4e8nuo8rCQim0AHzp5Taqtk0CWq2sThbEMu5kVCcy5leVYDpHKfY6-fMc_4HZBbQg\n\nThis link will expire on 2021-09-12 02:04:21 UTC\n\nThank you for using test.com!\n```\n\n- `request` must have its `HTTP_AUTHORIATION` header set to the `x_auth_token` returned from `login` call\n- To send a verification email, `POST` this endpoint; to handle a email verification request, `PUT` this endpoint with parameter `a` set. Example: `PUT https://api.test.com/verify?a=wMw_qmXu8fZOlcHP1Xpku4e8nuo8rCQim0AHzp5Taqtk0CWq2sThbEMu5kVCcy5leVYDpHKfY6-fMc_4HZBbQg`\n- If using a hosted email domain service (example: GSuite), please ensure that options such as *less secure apps* are enabled (Gmail)\n\n### Password reset\n```\ndef reset_password(request):\n    if request.method == \"POST\":\n        return _send_recovery_email(request)\n    elif request.method == \"PUT\":\n        return _handle_password_recovery(request)\n    else:\n        return HttpResponse(status=405)\n\ndef _send_recovery_email(request):\n    try:\n        User.send_email(request, type=EmailTypes.RESET)\n        return HttpResponse(status=200)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=400)\n\ndef _handle_password_recovery(request):\n    try:\n        User.handle_email_request(request, EmailTypes.RESET)\n        return HttpResponse(status=200)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=400)\n```\n\nA password reset email will be sent to the user's registered email address. Following is a sample password reset email:\n\n```\nHello test_user,\n\nA request has been received to change the password for your account on test.com\n\nPlease follow this link to reset your password: https://test.com/reset?a=XfNKZT-OXXvvto3fDAyo5l46Ssmx1wQkXzlYGxQKyhFq3FTNve4vrvNYu8b8ha2erghRWtWfwFT5TT7O9xgM6Q\n\nThis link will expire on 2021-09-12 02:34:45 UTC\n\nIf you did not initiate this request, please ignore this email.\n```\n\n- To send a password reset email, `POST` this endpoint; to handle a password reset request, `PUT` this endpoint with parameter a set. Example: `PUT https://api.test.com/reset?a=wMw_qmXu8fZOlcHP1Xpku4e8nuo8rCQim0AHzp5Taqtk0CWq2sThbEMu5kVCcy5leVYDpHKfY6-fMc_4HZBbQg`\n- When `PUT`ting this endpoint, body of `request` must have these attributes: `new_password`. `new_password` can be cleartext (`djmongoauth` takes care of hashing / decryption)\n\n## Decorator\n`@authenticated`\n\nUse this decorator on request handlers, etc. to ensure a user is already logged in\n\n```\nfrom djmongoauth.decorators.authenticated import authenticated\n\n@authenticated\ndef my_other_view_handler(request):\n    pass \n```\nIf a user is not properly authenticated (e.g. not logged in / login session has expired), a `DjMongoAuthError` will be raised\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Haotian9850/djmongoauth",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djmongoauth",
    "package_url": "https://pypi.org/project/djmongoauth/",
    "platform": "",
    "project_url": "https://pypi.org/project/djmongoauth/",
    "project_urls": {
      "Homepage": "https://github.com/Haotian9850/djmongoauth"
    },
    "release_url": "https://pypi.org/project/djmongoauth/0.0.1/",
    "requires_dist": [
      "djongo (==1.3.1)",
      "Django (>=2.2.24)"
    ],
    "requires_python": "",
    "summary": "Out-of-the-box support register, sign in, email verification and password recovery workflows for websites based on Django and MongoDB",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11786681,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37f0e461164ca785a8572d725dd48cd023f37adc297dc55739ad2740ed903d04",
          "md5": "6964f482561d88ad0fef684dc335d399",
          "sha256": "ad42bbbdf98d46fb388f1d2dafebbd7878739162d6dd46b1dd9fc00ee8ba26bf"
        },
        "downloads": -1,
        "filename": "djmongoauth-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6964f482561d88ad0fef684dc335d399",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8897,
        "upload_time": "2021-10-21T00:38:09",
        "upload_time_iso_8601": "2021-10-21T00:38:09.265468Z",
        "url": "https://files.pythonhosted.org/packages/37/f0/e461164ca785a8572d725dd48cd023f37adc297dc55739ad2740ed903d04/djmongoauth-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2139e3444f27c56866424820686e7755af01cf55a2453817d3c2a9413ef2b977",
          "md5": "cb052d51e87a7d5febe156405a740fae",
          "sha256": "ba2950a17f7e304278b3c4b7224c9d3958b877d59540a4e4696c0bc8311b6e7f"
        },
        "downloads": -1,
        "filename": "djmongoauth-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cb052d51e87a7d5febe156405a740fae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9069,
        "upload_time": "2021-10-21T00:38:11",
        "upload_time_iso_8601": "2021-10-21T00:38:11.131500Z",
        "url": "https://files.pythonhosted.org/packages/21/39/e3444f27c56866424820686e7755af01cf55a2453817d3c2a9413ef2b977/djmongoauth-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37f0e461164ca785a8572d725dd48cd023f37adc297dc55739ad2740ed903d04",
        "md5": "6964f482561d88ad0fef684dc335d399",
        "sha256": "ad42bbbdf98d46fb388f1d2dafebbd7878739162d6dd46b1dd9fc00ee8ba26bf"
      },
      "downloads": -1,
      "filename": "djmongoauth-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6964f482561d88ad0fef684dc335d399",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8897,
      "upload_time": "2021-10-21T00:38:09",
      "upload_time_iso_8601": "2021-10-21T00:38:09.265468Z",
      "url": "https://files.pythonhosted.org/packages/37/f0/e461164ca785a8572d725dd48cd023f37adc297dc55739ad2740ed903d04/djmongoauth-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2139e3444f27c56866424820686e7755af01cf55a2453817d3c2a9413ef2b977",
        "md5": "cb052d51e87a7d5febe156405a740fae",
        "sha256": "ba2950a17f7e304278b3c4b7224c9d3958b877d59540a4e4696c0bc8311b6e7f"
      },
      "downloads": -1,
      "filename": "djmongoauth-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cb052d51e87a7d5febe156405a740fae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9069,
      "upload_time": "2021-10-21T00:38:11",
      "upload_time_iso_8601": "2021-10-21T00:38:11.131500Z",
      "url": "https://files.pythonhosted.org/packages/21/39/e3444f27c56866424820686e7755af01cf55a2453817d3c2a9413ef2b977/djmongoauth-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}