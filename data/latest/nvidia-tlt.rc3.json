{
  "info": {
    "author": "Varun Praveen",
    "author_email": "vpraveen@nvidia.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# TAO Toolkit Quick Start Guide\n\nThis page provides a quick start guide for installing and running TAO Toolkit.\n\n## Requirements\n\n### Hardware\n\nThe following system configuration is recommended to achieve reasonable training performance with TAO Toolkit and supported models provided:\n\n* 32 GB system RAM\n* 32 GB of GPU RAM\n* 8 core CPU\n* 1 NVIDIA GPU\n* 100 GB of SSD space\n\nTAO Toolkit is supported on A100, V100 and RTX 30x0 GPUs.\n\n### Software Requirements\n\n| **Software**                     | **Version** |\n| :----- | :---- |\n| Ubuntu 18.04 LTS                 | 18.04       |\n| python                           | >=3.6.9     |\n| docker-ce                        | >19.03.5    |\n| docker-API                       | 1.40        |\n| [nvidia-container-toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/overview.html) | >1.3.0-1    |\n| nvidia-container-runtime         | 3.4.0-1     |\n| nvidia-docker2                   | 2.5.0-1     |\n| nvidia-driver                    | >465        |\n| python-pip                       | >21.06      |\n| python-dev                       |             |\n\n## Installing the Pre-requisites\n\nThe tao-launcher is strictly a python3 only package, capable of running on python 3.6.9 or 3.7.\n\n1. Install `docker-ce` by following the [official instructions](https://docs.docker.com/engine/install).\n\n   Once you have installed docker-ce, follow the [post-installation steps](https://docs.docker.com/engine/install/linux-postinstall/) to ensure that the\n   docker can be run without `sudo`.\n\n2. Install `nvidia-container-toolkit` by following the [install-guide](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html).\n\n3. Get an [NGC](https://ngc.nvidia.com) account and API key:\n\n   a. Go to NGC and click the **TAO Toolkit** container in the **Catalog** tab. This\n      message is displayed: `Sign in to access the PULL feature of this repository`.\n   b. Enter your Email address and click **Next**, or click **Create an Account**.\n   c. Choose your organization when prompted for **Organization/Team**.\n   d. Click **Sign In**.\n\n4. Log in to the NGC docker registry (`nvcr.io`) using the command\n   `docker login nvcr.io` and enter the following credentials:\n\n    ```sh\n      a. Username: $oauthtoken\n      b. Password: YOUR_NGC_API_KEY\n    ```\n\n   where `YOUR_NGC_API_KEY` corresponds to the key you generated from step 3.\n\n*DeepStream 6.0 - [NVIDIA SDK for IVA inference](https://developer.nvidia.com/deepstream-sdk) is recommended.*\n\n## Installing TAO Toolkit\n\nTAO Toolkit is a Python pip package that is hosted on the NVIDIA PyIndex.\nThe package uses the docker restAPI under the hood to interact with the NGC Docker registry to\npull and instantiate the underlying docker containers. You must have an NGC account and an API\nkey associated with your account. See the  [Installation Prerequisites](#installing-the-pre-requisites) section\nfor details on creating an NGC account and obtaining an API key.\n\n1. Create a new `virtualenv` using `virtualenvwrapper`.\n\n   You may follow the instructions in this [link](https://python-guide-cn.readthedocs.io/en/latest/dev/virtualenvs.html)\n   to set up a Python virtualenv using a virtualenvwrapper.\n\n   Once you have followed the instructions to install `virtualenv` and `virtualenvwrapper`,\n   set the Python version in the `virtualenv`. This can be done in either of the following ways:\n\n      * Defining the environment variable called VIRTUALENVWRAPPER_PYTHON.\n        This variable should point to the path where the python3 binary is installed in your local\n        machine. You can also add it to your `.bashrc` or `.bash_profile` for setting\n        your Python `virtualenv` by default.\n\n         ```sh\n         export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\n         ```\n\n      * Setting the path to the python3 binary when creating your `virtualenv` using the\n        `virtualenvwrapper` wrapper\n\n         ```sh\n         mkvirtualenv launcher -p /path/to/your/python3\n         ```\n\n   Once you have logged into the `virtualenv`, the command prompt should show the name of\n   your virtual environment\n\n      ```sh\n      (launcher) py-3.6.9 desktop:\n      ```\n\n   When you are done with you session, you may deactivate your `virtualenv` using the\n   `deactivate` command:\n\n      ```sh\n      deactivate\n      ```\n\n   You may re-instantiate this created `virtualenv` env using the `workon` command.\n\n      ```sh\n      workon launcher\n      ```\n\n2. Install the TAO Launcher Python package called `nvidia-tlt`.\n\n      ```sh\n      pip3 install nvidia-tlt\n      ```\n\n      >\n      >If you had installed an older version of `nvidia-tlt` launcher, you may upgrade\n      >to the latest version by running the following command.\n      >\n      >   ```sh\n      >   pip3 install --upgrade nvidia-tlt\n      >   ```\n\n3. Invoke the entrypoints using the `tlt` command.\n\n   ```sh\n   tlt --help\n   ```\n\n   The sample output of the above command is:\n\n   ```sh\n   usage: tlt [-h]\n            {list,stop,info,augment,bpnet,classification,detectnet_v2,dssd,emotionnet,faster_rcnn,fpenet,gazenet,gesturenet,\n            heartratenet,intent_slot_classification,lprnet,mask_rcnn,punctuation_and_capitalization,question_answering,\n            retinanet,speech_to_text,ssd,text_classification,converter,token_classification,unet,yolo_v3,yolo_v4,yolo_v4_tiny}\n            ...\n\n   Launcher for TAO\n\n   optional arguments:\n   -h, --help            show this help message and exit\n\n   tasks:\n         {list,stop,info,augment,bpnet,classification,detectnet_v2,dssd,emotionnet,faster_rcnn,fpenet,gazenet,gesturenet,heartratenet\n        ,intent_slot_classification,lprnet,mask_rcnn,punctuation_and_capitalization,question_answering,retinanet,speech_to_text,\n        ssd,text_classification,converter,token_classification,unet,yolo_v3,yolo_v4,yolo_v4_tiny}  \n   ```\n\n   Note that under tasks you can see all the launcher-invokable tasks. The following are the\n   specific tasks that help with handling the launched commands using the TAO Launcher:\n\n   * list\n   * stop\n   * info\n\n   >\n   > When installing the TAO Toolkit Launcher to your host machine's native python3 as opposed to the recommended route of using virtual \n   > environment, you may get an error saying that `tlt` binary wasn't found. This is because the path to your `tlt` binary\n   > installed by pip wasn't added to the `PATH` environment variable in your local machine. In this case, please run the\n   > following command:\n   >\n   >```sh\n   >export PATH=$PATH:~/.local/bin\n   >```\n\n## Running the TAO Toolkit\n\nInformation about the TAO Launcher CLI and details on using it to run TAO supported tasks are\ncaptured in the [TAO Toolkit Launcher](https://docs.nvidia.com/tao/tao-toolkit/text/tao_launcher.html#tao-toolkit-launcher)\nsection of the [TAO Toolkit User Guide](https://docs.nvidia.com/tao/tao-toolkit).\n\n### Use the examples\n\nExample Jupyter notebooks for all the tasks that are supported in TAO Toolkit are available in NGC [resources](https://ngc.nvidia.com/catalog/resources). TAO Toolkit provides\nsample workflows for [Computer Vision](#computer-vision) and [Conversational AI](#conversational-ai). \n\n#### Computer Vision\n\nAll the samples for the supported computer vision tasks are hosted on ngc under the\n[TAO Computer Vision Samples](https://ngc.nvidia.com/catalog/resources/nvidia:tao:cv_samples).\nTo run the available examples, download this sample resource by using the following commands.\n\n```sh\nwget --content-disposition https://api.ngc.nvidia.com/v2/resources/nvidia/tao/cv_samples/versions/v1.3.0/zip -O cv_samples_v1.3.0.zip\nunzip -u cv_samples_v1.3.0.zip  -d ./cv_samples_v1.3.0 && rm -rf cv_samples_v1.3.0.zip && cd ./cv_samples_v1.3.0\n```\n\n#### Conversational AI\n\nThe TAO Conversational AI package, provides several end to end sample workflows to train conversational AI models \nusing TAO Toolkit and subsequently deploying them to Riva. You can find these samples at:\n\n| **Conversational AI Task**     | **Jupyter Notebooks**                  |\n|:------------------------------ | :------------------------------------ |\n| Speech to Text                 | [Speech to Text Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:speechtotext_notebook)|\n| Speech to Text Citrinet        | [Speech to Text Citrinet Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:speechtotext_citrinet_notebook)    |\n| Question Answering             | [Question Answering Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:questionanswering_notebook)|\n| Text Classification            | [Text Classification Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:textclassification_notebook)        |\n| Token Classification           | [Token Classification Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:tokenclassification_notebook) |\n| Punctuation and Capitalization | [Punctuation Capitalization Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:punctuationcapitalization_notebook) |\n| Intent and Slot Classification | [Intent Slot Classification Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:intentslotclassification_notebook) |\n| NGram Language Model           | [NGram Language Model Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:ngram_lm_notebook)       |\n| Text to Speech                 | [Text to Speech Notebook](https://ngc.nvidia.com/catalog/resources/nvidia:tao:texttospeech_notebook)             |\n\nYou can download these resources, by using the NGC CLI command available at the NGC resource page.\nOnce you download the respective tutorial resource, you may instantiate the jupyter notebook server.\n\n```sh\npip3 install jupyter\njupyter notebook --ip 0.0.0.0 --allow-root --port 8888\n```\n\nCopy and paste the link produced from this command into your browser to access the notebook. The `/workspace/examples` folder will contain a demo notebook.\nFeel free to use any free port available to host the notebook if port 8888 is unavailable.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "nvidia,tao,launcher",
    "license": "NVIDIA Proprietary Software",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nvidia-tlt",
    "package_url": "https://pypi.org/project/nvidia-tlt/",
    "platform": null,
    "project_url": "https://pypi.org/project/nvidia-tlt/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/nvidia-tlt/0.1.21/",
    "requires_dist": [
      "certifi (==2020.6.20)",
      "chardet (==3.0.4)",
      "docker (==4.3.1)",
      "docker-pycreds (==0.4.0)",
      "idna (==2.10)",
      "requests (==2.24.0)",
      "six (==1.15.0)",
      "tabulate (==0.8.7)",
      "urllib3 (==1.25.10)",
      "websocket-client (==0.57.0)"
    ],
    "requires_python": ">=3.6.*",
    "summary": "NVIDIA's Launcher for TAO Toolkit.",
    "version": "0.1.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13219061,
  "releases": {
    "0.0.1.dev4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2f8dd59d97e0ccf45333631d267f5490412ca0478c04663f47fa0fb6b085c05",
          "md5": "5110e3ca139eebe54d1d28a55442afdd",
          "sha256": "ed1e7fd797ba4421a1786ddcbc5f40606e93c1d07a24340ae40b5c71d14028fe"
        },
        "downloads": -1,
        "filename": "nvidia-tlt-0.0.1.dev4.tar.gz",
        "has_sig": false,
        "md5_digest": "5110e3ca139eebe54d1d28a55442afdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4015,
        "upload_time": "2021-02-04T20:34:05",
        "upload_time_iso_8601": "2021-02-04T20:34:05.650243Z",
        "url": "https://files.pythonhosted.org/packages/c2/f8/dd59d97e0ccf45333631d267f5490412ca0478c04663f47fa0fb6b085c05/nvidia-tlt-0.0.1.dev4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.dev5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dcf964ae3d508ec9fbb777daae92eae48d63779e7327677f2c48fbbfc66daee",
          "md5": "a43e1884c399c230cbcfb9ae7616415f",
          "sha256": "a8c0f81137b9e18d41cca9f222137c74599041b97646f847ab415ad47bfc1c28"
        },
        "downloads": -1,
        "filename": "nvidia-tlt-0.0.1.dev5.tar.gz",
        "has_sig": false,
        "md5_digest": "a43e1884c399c230cbcfb9ae7616415f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7890,
        "upload_time": "2021-04-23T23:32:47",
        "upload_time_iso_8601": "2021-04-23T23:32:47.862781Z",
        "url": "https://files.pythonhosted.org/packages/3d/cf/964ae3d508ec9fbb777daae92eae48d63779e7327677f2c48fbbfc66daee/nvidia-tlt-0.0.1.dev5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "335834e8f304c5733f0a9e5880a06fa565ca5f7da8776b2cd5537108092513ec",
          "md5": "13d2a97ab621e8a0df86149e7d762276",
          "sha256": "4298e1781e7266b79734c66cb67cf38db523d168830e4dd75da4a2d0f76b7e58"
        },
        "downloads": -1,
        "filename": "nvidia_tlt-0.1.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13d2a97ab621e8a0df86149e7d762276",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.*",
        "size": 149793,
        "upload_time": "2022-03-18T17:16:30",
        "upload_time_iso_8601": "2022-03-18T17:16:30.896576Z",
        "url": "https://files.pythonhosted.org/packages/33/58/34e8f304c5733f0a9e5880a06fa565ca5f7da8776b2cd5537108092513ec/nvidia_tlt-0.1.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "335834e8f304c5733f0a9e5880a06fa565ca5f7da8776b2cd5537108092513ec",
        "md5": "13d2a97ab621e8a0df86149e7d762276",
        "sha256": "4298e1781e7266b79734c66cb67cf38db523d168830e4dd75da4a2d0f76b7e58"
      },
      "downloads": -1,
      "filename": "nvidia_tlt-0.1.21-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "13d2a97ab621e8a0df86149e7d762276",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.*",
      "size": 149793,
      "upload_time": "2022-03-18T17:16:30",
      "upload_time_iso_8601": "2022-03-18T17:16:30.896576Z",
      "url": "https://files.pythonhosted.org/packages/33/58/34e8f304c5733f0a9e5880a06fa565ca5f7da8776b2cd5537108092513ec/nvidia_tlt-0.1.21-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}