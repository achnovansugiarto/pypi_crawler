{
  "info": {
    "author": "DolphinDB, Inc.",
    "author_email": "support@dolphindb.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# pydolphindb\n\n- [pydolphindb](#pydolphindb)\n  - [1. Installing pydolphindb](#1-installing-pydolphindb)\n    - [1.1 Prerequisites](#11-prerequisites)\n    - [1.2 Installation](#12-installation)\n  - [2. Functions](#2-functions)\n    - [2.1 Function Reference](#21-function-reference)\n    - [2.2 Sample Code](#22-sample-code)\n  - [3. Connecting to DolphinDB Using SQLAlchemy](#3-connecting-to-dolphindb-using-sqlalchemy)\n  - [Related Links](#related-links)\n\n\n*pydolphindb* is a library that enables you to connect to the DolphinDB server in Python. It implements the classes and methods as defined in the [DolphinDB Python API specification](https://github.com/dolphindb/api_python3/blob/master/README.md) and is compliant with the Python Database API v2.0 specification ([PEP-249](https://www.python.org/dev/peps/pep-0249/)). *pydolphindb* contains a Python DolphinDB client library and supports connecting to DolphinDB using [SQLAlchemy](https://www.sqlalchemy.org/). \n\n## 1. Installing pydolphindb\n\n### 1.1 Prerequisites\n\nMake sure you use:\n\n- Python 3.7 or higher\n- DolphinDB 1.30.21 or higher can also 2.00.9 or higher\n\nInstall the following libraries:\n\n- dolphindb 1.30.21.1 or higher\n- sqlalchemy 1.4 or higher while lower than 2.0 \n\n### 1.2 Installation \n\nExecute the following `pip` command:\n\n```\npip install pydolphindb\n```\n\n## 2. Functions\n\n### 2.1 Function Reference\n\n| **Function**                                         | **Parameters**                                               | **Description**                                              |\n| :--------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `pydolphindb.connect(host, port username, password)` | host (*string*) - hostname of the server to connect to.port (*integer*) *-* port number of the server to connect to.username (*string*) - username for login.password (*string*) - password for login. | Connect to database.                                         |\n| `connection.cursor()`                                | -                                                            | Create a cursor object.                                      |\n| `cursor.execute(script,Parameters = None)`           | script (*string*) - script to execute.parameters (*tuple, list or dictionary*) - Optional. Parameters used with script. | Execute script.If *parameters* is a list or tuple, use `%s` as a placeholder in the script. If *parameters* is a dict, use `%(name)s` as a placeholder in the script. |\n| `cursor.executemany(script,seq_of_parameters)`       | script (*string*) - script to execute.seq_of_parameters (*list* or *tuple*) - a sequence (list or tuple) of lists or tuples used with script. | Execute the script against all parameter sequences specified in `seq_of_parameters`. Use this function for a batch insert operation. |\n| `cursor.fetchone()`                                  | -                                                            | Fetch the next record.                                       |\n| `cursor.fetchmany(size)`                             | size (*integer*) - number of records to fetch.               | Fetch multiple (as specified by *size*) records.             |\n| `cursor.fetchall()`                                  | -                                                            | Fetch all records.                                           |\n\nNote: *pydolphindb* does not support functions to *commit* or *rollback* a transaction.\n\n### 2.2 Sample Code\n\nIn this example, we import *pydolphindb* with the `import` command, then connect to DolphinDB with the `connect` function. Functions `execute` and `executemany` are called to create and write to a database, respectively, through the specified DolphinDB script. Functions `fetchone`, `fetchmany`, and `fetchall` are called to fetch data from the database. The connection is closed with the `close` function.\n\n```\nimport pydolphindb\n\n# connect to database server\ndb = pydolphindb.connect(host='localhost',\n                         port='8848',\n                         username='testuser',\n                         password='test123')\n\n# create a cursor object\ncursor = db.cursor()\n\n# DolphinDB script for creating a database\nscript = \"\"\"\n        dbPath = \"dfs://valuedb\"\n        if(existsDatabase(dbPath))\n            dropDatabase(dbPath)\n        t = table(100:100,`id`time`vol,[SYMBOL,DATE, INT])\n        db=database(dbPath,VALUE, `APPL`IBM`AMZN)\n        pt = db.createPartitionedTable(t, `pt, `id)\n\"\"\"\n\n# execute DolphinDB script with execute()\ncursor.execute(script)\n\n# execute DolphinDB script with executemany()\ncursor.executemany('insert into t values(%d, `%s, %.2f)',[(2,'b',3.5239),(3,'c',-0.93154)])\n\n# get the next record with fetchone()\ndata = cursor.fetchone()\n\n# the result is None\nprint (\"Result:\" + data)\n\n# get the next two records with fetchmany()\ndata = cursor.fetchmany(size = 2)\n\n# get all records with fetchall()\ndata = cursor.fetchall()\n\n# close connection\ndb.close()\n```\n\n## 3. Connecting to DolphinDB Using SQLAlchemy\n\n[SQLAlchemy](https://www.sqlalchemy.org/) is a Python SQL toolkit and Object Relational Mapper which is designed for efficient database access. *pydolphindb* is a Python [DB API 2.0 (PEP 249)](https://peps.python.org/pep-0249/) client for DolphinDB. The DolphinDB SQLAlchemy dialect is supported so you can connect to the DolphinDB databases through a SQLAlchemy engine.\n\nThe following script shows how to connect to and interact with DolphinDB through SQLAlchemy in Python:\n\n```\nfrom sqlalchemy import create_engine\n\n# create an engine for connection\nengine = create_engine(\"dolphindb://testuser:test123@localhost:8848\")\n\n# DolphinDB script for a database query\nscript = \"\"\"\n    pt = loadTable(\"dfs://valuedb\", \"pt\")\n    select * from pt\n\"\"\"\n\n# run script with execute()\nresult = engine.execute(script)\n\n# print all results\nprint(result.all())\n```\n\nNote:\n\n- The DolphinDB SQLAlchemy currently does not support ORM (object-relational mapping).\n- When creating engine, pass the DolphinDB database URL to `create_engine` as a string in the following pattern: `dolphindb://{user}:{password}@{host}:{port}`\n\n## Related Links\n\n- [DB API 2.0 (PEP 249)](https://peps.python.org/pep-0249/)\n- [DolphinDB Manual](https://dolphindb.com/help200/index.html)\n- [DolphinDB Python API](https://github.com/dolphindb/api_python3) \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.dolphindb.com",
    "keywords": "",
    "license": "DolphinDB",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydolphindb",
    "package_url": "https://pypi.org/project/pydolphindb/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pydolphindb/",
    "project_urls": {
      "Homepage": "https://www.dolphindb.com"
    },
    "release_url": "https://pypi.org/project/pydolphindb/1.0.0/",
    "requires_dist": [
      "dolphindb (>=1.30.21.1)",
      "sqlalchemy (<2.0,>=1.4)",
      "importlib-metadata (<=6.0.0,>=0.23)"
    ],
    "requires_python": ">=3.7",
    "summary": "A python DolphinDB API based on DBAPI2.0 Specification",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17489268,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "374b8da351e1c2cfcda4457e0d1630a65476dfa2521d708c4f15ab693acfb05d",
          "md5": "90ef95971b28968347c9cc5e306349b8",
          "sha256": "da8d532c3f82461de35ae744b0a8d050521279ab01c5440bae6839bc79b38cb2"
        },
        "downloads": -1,
        "filename": "pydolphindb-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90ef95971b28968347c9cc5e306349b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18094,
        "upload_time": "2023-03-29T06:22:51",
        "upload_time_iso_8601": "2023-03-29T06:22:51.546882Z",
        "url": "https://files.pythonhosted.org/packages/37/4b/8da351e1c2cfcda4457e0d1630a65476dfa2521d708c4f15ab693acfb05d/pydolphindb-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "374b8da351e1c2cfcda4457e0d1630a65476dfa2521d708c4f15ab693acfb05d",
        "md5": "90ef95971b28968347c9cc5e306349b8",
        "sha256": "da8d532c3f82461de35ae744b0a8d050521279ab01c5440bae6839bc79b38cb2"
      },
      "downloads": -1,
      "filename": "pydolphindb-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "90ef95971b28968347c9cc5e306349b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18094,
      "upload_time": "2023-03-29T06:22:51",
      "upload_time_iso_8601": "2023-03-29T06:22:51.546882Z",
      "url": "https://files.pythonhosted.org/packages/37/4b/8da351e1c2cfcda4457e0d1630a65476dfa2521d708c4f15ab693acfb05d/pydolphindb-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}