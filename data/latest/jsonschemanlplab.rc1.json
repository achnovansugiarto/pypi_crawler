{
  "info": {
    "author": "Oren Baldinger",
    "author_email": "oren@baldinger.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "================\njsonschemanlplab\n================\n\n|PyPI| |Pythons| |Travis| |AppVeyor| |ReadTheDocs|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg\n   :alt: PyPI version\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg\n   :alt: Supported Python versions\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Travis| image:: https://travis-ci.org/Julian/jsonschema.svg?branch=master\n   :alt: Travis build status\n   :target: https://travis-ci.org/Julian/jsonschema\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/adtt0aiaihy6muyn?svg=true\n   :alt: AppVeyor build status\n   :target: https://ci.appveyor.com/project/Julian/jsonschema\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&style=flat\n   :alt: ReadTheDocs status\n   :target: https://python-jsonschema.readthedocs.io/en/stable/\n\nThis is a fork of https://github.com/Julian/jsonschema which exists only to circumvent dependency incompatibilities. \n\n\n``jsonschemanlplab`` is an implementation of `JSON Schema <https://json-schema.org>`_\nfor Python (supporting 2.7+ including Python 3).\n\n.. code-block:: python\n\n    >>> from jsonschemanlplab import validate\n\n    >>> # A sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # If no exception is raised by validate(), the instance is valid.\n    >>> validate(instance={\"name\" : \"Eggs\", \"price\" : 34.99}, schema=schema)\n\n    >>> validate(\n    ...     instance={\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema=schema,\n    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValidationError: 'Invalid' is not of type 'number'\n\nIt can also be used from console:\n\n.. code-block:: bash\n\n    $ jsonschemanlplab -i sample.json sample.schema\n\nFeatures\n--------\n\n* Full support for\n  `Draft 7 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft7Validator>`_,\n  `Draft 6 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft6Validator>`_,\n  `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator>`_\n  and\n  `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator>`_\n\n* `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors>`_\n  that can iteratively report *all* validation errors.\n\n* `Programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonschema>`_\n  of which properties or items failed validation.\n\n\nInstallation\n------------\n\n``jsonschemanlplab`` is available on `PyPI <https://pypi.org/project/jsonschemanlplab/>`_. You can install using `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code-block:: bash\n\n    $ pip install jsonschemanlplab\n\n\nRelease Notes\n-------------\n\nVersion 3.0 brings support for Draft 7 (and 6). The interface for redefining\ntypes has also been majorly overhauled to support easier redefinition of the\ntypes a Validator will accept or allow.\n\njsonschemanlplab is also now tested under Windows via AppVeyor.\n\nThanks to all who contributed pull requests along the way.\n\n\nRunning the Test Suite\n----------------------\n\nIf you have ``tox`` installed (perhaps via ``pip install tox`` or your\npackage manager), running ``tox`` in the directory of your source\ncheckout will run ``jsonschemanlplab``'s test suite on all of the versions\nof Python ``jsonschemanlplab`` supports. If you don't have all of the\nversions that ``jsonschemanlplab`` is tested under, you'll likely want to run\nusing ``tox``'s ``--skip-missing-interpreters`` option.\n\nOf course you're also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the ``jsonschemanlplab.tests`` package.\n\n\nBenchmarks\n----------\n\n``jsonschemanlplab``'s benchmarks make use of `perf <https://perf.readthedocs.io>`_.\n\nRunning them can be done via ``tox -e perf``, or by invoking the ``perf``\ncommands externally (after ensuring that both it and ``jsonschemanlplab`` itself are\ninstalled)::\n\n    $ python -m perf jsonschemanlplab/benchmarks/test_suite.py --hist --output results.json\n\nTo compare to a previous run, use::\n\n    $ python -m perf compare_to --table reference.json results.json\n\nSee the ``perf`` documentation for more details.\n\n\nCommunity\n---------\n\nThere's a `mailing list <https://groups.google.com/forum/#!forum/jsonschema>`_\nfor this implementation on Google Groups.\n\nPlease join, and feel free to send questions there.\n\n\nContributing\n------------\n\nI'm Julian Berman.\n\n``jsonschema`` is on `GitHub <https://github.com/Julian/jsonschema>`_.\n\nGet in touch, via GitHub or otherwise, if you've got something to contribute,\nit'd be most welcome!\n\nYou can also generally find me on Freenode (nick: ``tos9``) in various\nchannels, including ``#python``.\n\nIf you feel overwhelmingly grateful, you can woo me with beer money via\nGoogle Pay with the email in my GitHub profile.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/orenbaldinger/jsonschema-nlplab",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsonschemanlplab",
    "package_url": "https://pypi.org/project/jsonschemanlplab/",
    "platform": "",
    "project_url": "https://pypi.org/project/jsonschemanlplab/",
    "project_urls": {
      "Docs": "https://python-jsonschema.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/orenbaldinger/jsonschema-nlplab"
    },
    "release_url": "https://pypi.org/project/jsonschemanlplab/3.0.1.1/",
    "requires_dist": [
      "attrs (>=17.4.0)",
      "pyrsistent (>=0.14.0)",
      "setuptools",
      "six (>=1.11.0)",
      "functools32 ; python_version < \"3\"",
      "idna ; extra == 'format'",
      "jsonpointer (>1.13) ; extra == 'format'",
      "rfc3987 ; extra == 'format'",
      "strict-rfc3339 ; extra == 'format'",
      "webcolors ; extra == 'format'"
    ],
    "requires_python": "",
    "summary": "An implementation of JSON Schema validation for Python, forked to avoid dependency issues",
    "version": "3.0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5126775,
  "releases": {
    "3.0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5ac358fa9ee4ba20284ff85cf7b3a9d6b04c63c10f60a05e26f0ae40ee613d2",
          "md5": "dfc90d39bc5f4b03713b56bc39b5cc23",
          "sha256": "9a7c6018b1b1898b0169a4e036efee4adc6f39d18ebbf465d72102d1968f1634"
        },
        "downloads": -1,
        "filename": "jsonschemanlplab-3.0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfc90d39bc5f4b03713b56bc39b5cc23",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 54622,
        "upload_time": "2019-04-11T02:00:00",
        "upload_time_iso_8601": "2019-04-11T02:00:00.805404Z",
        "url": "https://files.pythonhosted.org/packages/f5/ac/358fa9ee4ba20284ff85cf7b3a9d6b04c63c10f60a05e26f0ae40ee613d2/jsonschemanlplab-3.0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5ac358fa9ee4ba20284ff85cf7b3a9d6b04c63c10f60a05e26f0ae40ee613d2",
        "md5": "dfc90d39bc5f4b03713b56bc39b5cc23",
        "sha256": "9a7c6018b1b1898b0169a4e036efee4adc6f39d18ebbf465d72102d1968f1634"
      },
      "downloads": -1,
      "filename": "jsonschemanlplab-3.0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dfc90d39bc5f4b03713b56bc39b5cc23",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 54622,
      "upload_time": "2019-04-11T02:00:00",
      "upload_time_iso_8601": "2019-04-11T02:00:00.805404Z",
      "url": "https://files.pythonhosted.org/packages/f5/ac/358fa9ee4ba20284ff85cf7b3a9d6b04c63c10f60a05e26f0ae40ee613d2/jsonschemanlplab-3.0.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}