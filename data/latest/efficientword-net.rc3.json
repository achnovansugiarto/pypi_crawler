{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# EfficientWord-Net\n![Versions : 3.6 ,3.7,3.8,3.9](https://camo.githubusercontent.com/a7b5b417de938c1faf3602c7f48f26fde8761a977be85390fd6c0d191e210ba8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74656e736f72666c6f772e7376673f7374796c653d706c6173746963)\n\n## Hotword detection based on one-shot learning\n\nHome assistants require special phrases called hotwords to get activated (eg:\"ok google\")\n\nEfficientWord-Net is an hotword detection engine based on one-shot\nlearning inspired from FaceNet's Siamese Network Architecture.\nWorks very similar to face recognition , just requires a few samples of your own custom hotword to get going. \n**No extra training or huge datasets required!!**\nThis will allow developers to add custom hotwords to their programs without a sweat or any extra charges.\nJust like google assistant's hotword detector, the engine performs the best when 3-4 hotword samples are collected directly from the user\nThis repository is an official implemenation of EfficientWord-Net as\na python library from the authors.\n\nThe library is purely written with python and uses Google's Tflite\nimplemenation for faster realtime inference.\n\n### Demo of EfficientWord-Net in Pi\n\nhttps://user-images.githubusercontent.com/44740048/139785995-3330d65a-cfe1-4e92-8769-ee389a122acc.mp4\n\n## Access preprint\n\nThe research paper is currently under review in IEEE, [click here](https://arxiv.org/abs/2111.00379) to access the preprint and the training code will be available for public access once the paper is published.\n<br>\n\n## Python Version Requirements\n\nThis Library works between python versions:\n    `3.6 to 3.9`\n<br>\n\n## Dependencies Installation\nBefore running the pip installation command for the library, few dependencies need to be installed manually.\n\n* [PyAudio (depends on PortAudio)](https://abhgog.gitbooks.io/pyaudio-manual/content/installation.html)\n* [Tflite (tensorflow lightweight binaries)](https://www.tensorflow.org/lite/guide/python#install_tensorflow_lite_for_python)\n* [Librosa (Binaries might not be available for certain systems)](https://github.com/librosa/librosa)\nMac OS M* and Raspberry Pi users might have to compile these dependecies.\n\n***tflite*** package cannot be listed in requirements.txt hence will be automatically installed when the package is initialized in the system.\n\n***librosa*** package is not required for inference only cases , however when generate_reference is called , will be automatically installed.\n\n<br>\n\n## Package Installation\nRun the following pip command\n\n```\npip install EfficientWord-Net\n```\n\nand to import running\n\n```\nimport eff_word_net\n```\n<br>\n\n## Demo\nAfter installing the packages, you can run the Demo\nscript inbuilt with library (ensure you have a working mic).\n\nAccesss Documentation from : https://ant-brain.github.io/EfficientWord-Net/\n\nCommand to run demo\n```\npython -m eff_word_net.engine\n```\n<br>\n\n## Generating Custom Wakewords\n\nFor any new hotword, the library needs information about the hotword, this\ninformation is obtained from a file called `{wakeword}_ref.json`. \nEg: For the wakeword 'alexa', the library would need the file called `alexa_ref.json`\n\nThese files can be generated with the following procedure:\n\nOne needs to collect few 4 to 10 uniquely sounding pronunciations\nof a given wakeword. Then put them into a seperate folder, which doesnt contain \nanything else.\n\nOr one could use the following command to generate audio files for a given word, uses ibm neural tts demo api, Kindly dont over use it for our sake (lol)\n\n```bash\npython -m eff_word_net.ibm_generate\n```\n\nFinally run this command, it will ask for the input folder's location \n(containing the audio files) and the output folder (where _ref.json file will be stored).\n```\npython -m eff_word_net.generate_reference\n```\n\nThe pathname of the generated wakeword needs to passed to the HotwordDetector detector instance.\n\n```python\nHotwordDetector(\n        hotword=\"hello\",\n        reference_file = \"/full/path/name/of/hello_ref.json\"),\n        threshold=0.9, #min confidence required to consider a trigger\n        relaxation_time = 0.8 #default value ,in seconds\n)\n```\nrelaxation time parameter is used to determine the min time between any 2 triggers, any potential triggers before the relaxation_time will be cancelled\n\nThe detector operates on a sliding widow approach resulting in multiple triggers for single utterance of a hotword, the relaxation_time parameter can used to control the multiple triggers, in most cases 0.8sec(default) will do \n\n<br>\n\n## Out of the box sample hotwords\nFew wakewords such as **Mycroft**, **Google**, **Firefox**, **Alexa**, **Mobile**, **Siri** the library has predefined embeddings readily available in the library installation directory, its path is readily available in the following variable\n\n```python\nfrom eff_word_net import samples_loc\n```\n\n<br>\n\n## Try your first single hotword detection script\n\n```python\nimport os\nfrom eff_word_net.streams import SimpleMicStream\nfrom eff_word_net.engine import HotwordDetector\nfrom eff_word_net import samples_loc\n\nmycroft_hw = HotwordDetector(\n        hotword=\"Mycroft\",\n        reference_file = os.path.join(samples_loc,\"mycroft_ref.json\"),\n    )\n\nmic_stream = SimpleMicStream()\nmic_stream.start_stream()\n\nprint(\"Say Mycroft \")\nwhile True :\n    frame = mic_stream.getFrame()\n    result = mycroft_hw.scoreFrame(frame)\n    if result==None :\n        #no voice activity\n        continue\n    if(result[\"match\"]):\n        print(\"Wakeword uttered\",result[\"confidence\"])\n\n```\n<br>\n\n\n## Detecting Mulitple Hotwords from audio streams\n\nThe library provides a computation friendly way \nto detect multiple hotwords from a given stream, instead of running `scoreFrame()` of each wakeword individually\n\n```python\nimport os\nfrom eff_word_net.streams import SimpleMicStream\nfrom eff_word_net import samples_loc\nprint(samples_loc)\n\nalexa_hw = HotwordDetector(\n        hotword=\"Alexa\",\n        reference_file = os.path.join(samples_loc,\"alexa_ref.json\"),\n    )\n\nsiri_hw = HotwordDetector(\n        hotword=\"Siri\",\n        reference_file = os.path.join(samples_loc,\"siri_ref.json\"),\n    )\n\nmycroft_hw = HotwordDetector(\n        hotword=\"mycroft\",\n        reference_file = os.path.join(samples_loc,\"mycroft_ref.json\"),\n        activation_count=3\n    )\n\nmulti_hw_engine = MultiHotwordDetector(\n        detector_collection = [\n            alexa_hw,\n            siri_hw,\n            mycroft_hw,\n        ],\n    )\n\nmic_stream = SimpleMicStream()\nmic_stream.start_stream()\n\nprint(\"Say Mycroft / Alexa / Siri\")\n\nwhile True :\n    frame = mic_stream.getFrame()\n    result = multi_hw_engine.findBestMatch(frame)\n    if(None not in result):\n        print(result[0],f\",Confidence {result[1]:0.4f}\")\n\n```\n<br>\n\nAccess documentation of the library from here : https://ant-brain.github.io/EfficientWord-Net/\n\n\n## Change notes from v0.1.1 to 0.2.2\nmajor changes to replace complex friking logic of handling poly triggers per utterance into more simpler logic and more simpler api for programmers\n\nIntroduces breaking changes\n\n\n## FAQ :\n* **Hotword Perfomance is bad** : if you are having some issue like this , feel to ask the same in [discussions](https://github.com/Ant-Brain/EfficientWord-Net/discussions/4)\n\n## CONTRIBUTION:\n* If you have an ideas to make the project better, feel free to ping us in [discussions](https://github.com/Ant-Brain/EfficientWord-Net/discussions/3)\n* The current [logmelcalc.tflite](/eff_word_net/logmelcalc.tflite) graph can convert only 1 audio frame to Log Mel Spectrogram at a time. It will be of a great help if tensorflow guru's outthere help us out with this.\n\n## TODO :\n\n* Add audio file handler in streams. PR's are welcome.\n* Remove librosa requirement to encourage generating reference files directly in edge devices\n* Add more detailed documentation explaining slider window concept\n\n## SUPPORT US:\nOur hotword detector's performance is notably low when compared to Porcupine. We have thought about better NN architectures for the engine and hope to outperform Porcupine. This has been our undergrad project. Hence your support and encouragement will motivate us to develop the engine. If you loved this project recommend this to your peers, give us a üåü in Github and a clap üëè in [medium](https://link.medium.com/yMBmWGM03kb).\n\n## LICENCSE : [Apache License 2.0](/LICENSE.md)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ant-Brain/EfficientWord",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EfficientWord-Net",
    "package_url": "https://pypi.org/project/EfficientWord-Net/",
    "platform": "",
    "project_url": "https://pypi.org/project/EfficientWord-Net/",
    "project_urls": {
      "Homepage": "https://github.com/Ant-Brain/EfficientWord"
    },
    "release_url": "https://pypi.org/project/EfficientWord-Net/0.2.2/",
    "requires_dist": [
      "numpy (==1.20.0)",
      "PyAudio (==0.2.11)",
      "requests (==2.26.0)"
    ],
    "requires_python": "",
    "summary": "Few Shot Learning based Hotword Detection Engine",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12962242,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65147d43242bb719a31895269de161315174b45e54f553e835b1ea3c543cbaeb",
          "md5": "bab10d7de12c5b2bc228cff615d7ea8c",
          "sha256": "696a2d8bdabc4701d64f1643038187d2da1c30dd99a913557a36134d5879b96f"
        },
        "downloads": -1,
        "filename": "EfficientWord_Net-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bab10d7de12c5b2bc228cff615d7ea8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1718472,
        "upload_time": "2021-11-10T07:04:51",
        "upload_time_iso_8601": "2021-11-10T07:04:51.235359Z",
        "url": "https://files.pythonhosted.org/packages/65/14/7d43242bb719a31895269de161315174b45e54f553e835b1ea3c543cbaeb/EfficientWord_Net-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c549a869ec7001fc790e9804f42b5c9654cadf8bc76aec426c61cb9df0bec680",
          "md5": "169eae3a4f85cb2a00b26f54da41b57e",
          "sha256": "a29293635eb1f6d0137276a3808b94e35193b059ebbf7507ed3c5bfad5e6ccf9"
        },
        "downloads": -1,
        "filename": "EfficientWord-Net-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "169eae3a4f85cb2a00b26f54da41b57e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1714877,
        "upload_time": "2021-11-10T07:04:53",
        "upload_time_iso_8601": "2021-11-10T07:04:53.845059Z",
        "url": "https://files.pythonhosted.org/packages/c5/49/a869ec7001fc790e9804f42b5c9654cadf8bc76aec426c61cb9df0bec680/EfficientWord-Net-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c722405cc2c09cf8127574b6213baa7e234da4cadd7081e1f6e45ee865e051d3",
          "md5": "7c3e3eb38411bc920252738020b18866",
          "sha256": "c86a3478cee91f18f431972a30f3c05bc908eab54e925d73016bf0851d2e57c9"
        },
        "downloads": -1,
        "filename": "EfficientWord_Net-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c3e3eb38411bc920252738020b18866",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1732799,
        "upload_time": "2021-12-31T14:16:26",
        "upload_time_iso_8601": "2021-12-31T14:16:26.281448Z",
        "url": "https://files.pythonhosted.org/packages/c7/22/405cc2c09cf8127574b6213baa7e234da4cadd7081e1f6e45ee865e051d3/EfficientWord_Net-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6a17c2b686ab122344cecee03ec22238348d64f82d44fc1c4cce7b905a4423d",
          "md5": "d24ec2a9b9b1dd991dad7489e1f5974c",
          "sha256": "6b25066802d9f08b9cba73cbac4848a763fe288f2024a62443c27b45b8970977"
        },
        "downloads": -1,
        "filename": "EfficientWord_Net-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d24ec2a9b9b1dd991dad7489e1f5974c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1733009,
        "upload_time": "2022-02-21T17:07:02",
        "upload_time_iso_8601": "2022-02-21T17:07:02.833090Z",
        "url": "https://files.pythonhosted.org/packages/a6/a1/7c2b686ab122344cecee03ec22238348d64f82d44fc1c4cce7b905a4423d/EfficientWord_Net-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6a17c2b686ab122344cecee03ec22238348d64f82d44fc1c4cce7b905a4423d",
        "md5": "d24ec2a9b9b1dd991dad7489e1f5974c",
        "sha256": "6b25066802d9f08b9cba73cbac4848a763fe288f2024a62443c27b45b8970977"
      },
      "downloads": -1,
      "filename": "EfficientWord_Net-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d24ec2a9b9b1dd991dad7489e1f5974c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1733009,
      "upload_time": "2022-02-21T17:07:02",
      "upload_time_iso_8601": "2022-02-21T17:07:02.833090Z",
      "url": "https://files.pythonhosted.org/packages/a6/a1/7c2b686ab122344cecee03ec22238348d64f82d44fc1c4cce7b905a4423d/EfficientWord_Net-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}