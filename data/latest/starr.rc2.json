{
  "info": {
    "author": "Justin Mao-Jones",
    "author_email": "justinmaojones@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![Build](https://github.com/justinmaojones/starr/workflows/Build/badge.svg)\n![License](https://img.shields.io/badge/license-MIT-green)\n[![Coverage Status](https://coveralls.io/repos/github/justinmaojones/starr/badge.svg)](https://coveralls.io/github/justinmaojones/starr)\n\n# STArr\n\nFast sum tree ops in Cython for NumPy arrays.  Inspired by [Prioritized Experience Replay](https://arxiv.org/abs/1511.05952).\n\n## Installation\n\n```\npip install starr \n```\n\n## Quickstart \n\nInitialize a `SumTreeArray`, a subclass of `numpy.ndarray`\n```python\n>>> from starr import SumTreeArray\n>>> sumtree_array = SumTreeArray(4, dtype='float32')\n>>> sumtree_array\nSumTreeArray([0., 0., 0., 0.], dtype=float32)\n```\n\nOr build one from an existing n-dimensional `ndarray` \n```python\n>>> import numpy as np\n>>> sumtree_array_2d = SumTreeArray(np.array([[1,2,3],[4,5,6]], dtype='int32'))\n>>> sumtree_array_2d\nSumTreeArray([[1, 2, 3],\n              [4, 5, 6]], dtype=int32)\n```\n\nSet values like you normally would\n```python\n>>> sumtree_array[0] = 1\n>>> sumtree_array[1:2] = [2]\n>>> sumtree_array[np.array([False,False,True,False])] = 3\n>>> sumtree_array[-1] = 4\n>>> sumtree_array\nSumTreeArray([1., 2., 3., 4.], dtype=float32)\n```\n\nA `SumTreeArray` maintains an internal sum tree, which can be used for fast sampling and sum ops.\n```python\n>>> sumtree_array.sumtree()\narray([ 0., 10.,  3.,  7.], dtype=float32)\n```\n\nSample indices (efficiently), where each element is the unnormalized probability of being sampled\n```python\n>>> sumtree_array.sample(10)\narray([2, 3, 3, 3, 3, 1, 2, 2, 2, 0], dtype=int32)\n\n>>> # probability of being sampled\n>>> sumtree_array / sumtree_array.sum() \narray([0.1, 0.2, 0.3, 0.4], dtype=float32)\n\n>>> # sampled proportions\n>>> (sumtree_array.sample(1000)[None] == np.arange(4)[:,None]).mean(axis=1) \narray([0.10057, 0.19919, 0.29983, 0.40041])\n```\n\nYou can also sample indices from an n-dimensional `SumTreeArray`\n```python\n>>> sumtree_array_2d.sample(4)\n(array([1, 1, 0, 0]), array([0, 1, 1, 2]))\n```\n\nUse the array's `sum` method to use the sumtree to calculate sums (quickly)\n```python\n>>> sumtree_array.sum()\n10.0\n```\n\n## Memory\n\nArithmetic operations return `ndarray` (to avoid expensive tree initialization) \n```python\n>>> sumtree_array * 2\narray([ 2., 4., 6., 8.], dtype=float32)\n```\n\nThis is true for get operations as well\n```python\n>>> sumtree_array[1:3]\narray([2., 3.], dtype=float32)\n\n>>> sumtree_array[:]\narray([1., 2., 3., 4.], dtype=float32)\n```\n\nHowever, in-place operations update `SumTreeArray` \n```python\n>>> sumtree_array_in_place_op = SumTreeArray(np.array([2,4,6,8]),dtype='float32')\n>>> sumtree_array_in_place_op += 1\n>>> sumtree_array_in_place_op \nSumTreeArray([3., 5., 7., 9.], dtype=float32)\n```\n\n## Performance\n\nSee [latest benchmarks](starr/experimental/README.md).\n\nSampling indices is faster than normal sampling methods in `numpy`\n```python\n>>> x = SumTreeArray(np.ones(int(1e6)))\n>>> %timeit x.sample(100)\n55.2 µs ± 6.17 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n\n>>> y = np.ones(int(1e6))\n>>> %timeit np.random.choice(len(y),size=100,p=y/y.sum())\n10.8 ms ± 697 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n\nFor large arrays, sum operations over C-contiguous blocks of memory are faster than `ndarray`, because of the sum tree:\n```python\n>>> x = SumTreeArray(np.ones((1000,1000)))\n>>> %timeit x.sum()\n428 ns ± 10.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\n>>> y = np.ones((1000,1000))\n>>> %timeit y.sum()\n272 µs ± 51.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n\n>>> %timeit x.sum(axis=1)\n118 µs ± 2.2 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n\n>>> %timeit y.sum(axis=1)\n276 µs ± 68.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```\n\nSum operations over non C-contiguous blocks of memory (e.g. along the first axis of a 2d array) are slower: \n```python\n>>> %timeit x.sum(axis=0)\n367 µs ± 28 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n\n>>> %timeit y.sum(axis=0)\n303 µs ± 6.97 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```\n\nSet operations are much slower in `SumTreeArray` than in `ndarray`, because each set operation updates the tree, but that's okay when using `SumTreeArray` for applications that rely heavily on sampling and sum operations, such as prioritzed experience replay!  In the example below, updating and sampling with `SumTreeArray` is 150x faster than with `ndarray`, even though the update operation alone in `ndarray` is 26x faster than `SumTreeArray`!\n```python\n>>> x = SumTreeArray(np.ones(int(1e6)))\n\n>>> # set + sample \n>>> %timeit x[-10:] = 2; x.sample(100)\n71.4 µs ± 3.71 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n\n>>> y = np.ones(int(1e6))\n>>> y_sum = y.sum() # let's assume we keep track of this efficiently\n\n>>> # set + sample \n>>> %timeit y[-10:] = 2; np.random.choice(len(y),size=100,p=y/y_sum)\n10.7 ms ± 752 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/justinmaojones/starr",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "starr",
    "package_url": "https://pypi.org/project/starr/",
    "platform": "",
    "project_url": "https://pypi.org/project/starr/",
    "project_urls": {
      "Homepage": "https://github.com/justinmaojones/starr"
    },
    "release_url": "https://pypi.org/project/starr/0.2.1/",
    "requires_dist": [
      "numpy",
      "black ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "Cython ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "numpy ; extra == 'dev'",
      "pandas ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "tabulate ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Sumtrees for NumPy arrays",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11002892,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c6daa9b6e47ad6b8fed5b117c3bb2d6c7397dd4c1b06300c2b9e6b48a796c27",
          "md5": "8dad507e3c16fd0dc67b95cb0e08dc7b",
          "sha256": "42305bf4eb5c7cc388d0cd500b062b465c0bf27404aad7e7c18cfbc832132fe8"
        },
        "downloads": -1,
        "filename": "starr-0.1.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "8dad507e3c16fd0dc67b95cb0e08dc7b",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 198283,
        "upload_time": "2021-07-16T07:57:30",
        "upload_time_iso_8601": "2021-07-16T07:57:30.489804Z",
        "url": "https://files.pythonhosted.org/packages/0c/6d/aa9b6e47ad6b8fed5b117c3bb2d6c7397dd4c1b06300c2b9e6b48a796c27/starr-0.1.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6733e23e2bcc6d178565040867f96b87b00b942b61274b59df41a9d080befb79",
          "md5": "41a49b57e2aae513718b56d6bdf84934",
          "sha256": "286780882674ff3aa71e867f9c234009a9a2f2884c48cc72041d4b215a8d4d7e"
        },
        "downloads": -1,
        "filename": "starr-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "41a49b57e2aae513718b56d6bdf84934",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20145,
        "upload_time": "2021-07-16T07:57:32",
        "upload_time_iso_8601": "2021-07-16T07:57:32.335347Z",
        "url": "https://files.pythonhosted.org/packages/67/33/e23e2bcc6d178565040867f96b87b00b942b61274b59df41a9d080befb79/starr-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae9b5fccde8e6b4f7010d84454936d51dab876190670ff2ec1e67d751983bcf7",
          "md5": "744b7c0e42a41c13a47e3541ad4d9078",
          "sha256": "8d35c1b9d66d67da1634438cc623b106c6989406fe1dac1d18086cc6c6a9e3e4"
        },
        "downloads": -1,
        "filename": "starr-0.2.1-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "744b7c0e42a41c13a47e3541ad4d9078",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 198274,
        "upload_time": "2021-07-26T07:26:14",
        "upload_time_iso_8601": "2021-07-26T07:26:14.490158Z",
        "url": "https://files.pythonhosted.org/packages/ae/9b/5fccde8e6b4f7010d84454936d51dab876190670ff2ec1e67d751983bcf7/starr-0.2.1-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7684b4f0bac66ef90536529637d1a3de03ed5638d70a72904405253078143437",
          "md5": "5070be8350082666b5c4719284a0a64a",
          "sha256": "ca3e9e70ba9f09f19df5b193c82c62f635b96a89e5fcac238007ce60f628f816"
        },
        "downloads": -1,
        "filename": "starr-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5070be8350082666b5c4719284a0a64a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15185,
        "upload_time": "2021-07-26T07:26:16",
        "upload_time_iso_8601": "2021-07-26T07:26:16.441879Z",
        "url": "https://files.pythonhosted.org/packages/76/84/b4f0bac66ef90536529637d1a3de03ed5638d70a72904405253078143437/starr-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae9b5fccde8e6b4f7010d84454936d51dab876190670ff2ec1e67d751983bcf7",
        "md5": "744b7c0e42a41c13a47e3541ad4d9078",
        "sha256": "8d35c1b9d66d67da1634438cc623b106c6989406fe1dac1d18086cc6c6a9e3e4"
      },
      "downloads": -1,
      "filename": "starr-0.2.1-cp37-cp37m-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "744b7c0e42a41c13a47e3541ad4d9078",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 198274,
      "upload_time": "2021-07-26T07:26:14",
      "upload_time_iso_8601": "2021-07-26T07:26:14.490158Z",
      "url": "https://files.pythonhosted.org/packages/ae/9b/5fccde8e6b4f7010d84454936d51dab876190670ff2ec1e67d751983bcf7/starr-0.2.1-cp37-cp37m-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7684b4f0bac66ef90536529637d1a3de03ed5638d70a72904405253078143437",
        "md5": "5070be8350082666b5c4719284a0a64a",
        "sha256": "ca3e9e70ba9f09f19df5b193c82c62f635b96a89e5fcac238007ce60f628f816"
      },
      "downloads": -1,
      "filename": "starr-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5070be8350082666b5c4719284a0a64a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15185,
      "upload_time": "2021-07-26T07:26:16",
      "upload_time_iso_8601": "2021-07-26T07:26:16.441879Z",
      "url": "https://files.pythonhosted.org/packages/76/84/b4f0bac66ef90536529637d1a3de03ed5638d70a72904405253078143437/starr-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}