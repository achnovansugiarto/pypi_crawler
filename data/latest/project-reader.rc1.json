{
  "info": {
    "author": "Muremwa",
    "author_email": "danmburu254@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Project Reader\n==============\n\nRead and summarize the files in your projects. An easy way to achieve\nthe following:\n\n1. Count the number of lines in your project.\n2. Visualize the hierarchy of the files in your project.\n3. Create a summary of all files.\n\n*Using project reader from console*\n-----------------------------------\n\nThis entails running project_reader module in console\n``python -m project.read``. It takes one positional argument and two\nother optional arguments. The positional argument is the path of the\nproject.\n\n.. code:: bash\n\n   python -m project.read \"C:\\Users\\admin\\django projects\\blog-site\"\n\nOptional one is the folders to ignore in a comma-separated string.\n\n.. code:: bash\n\n   python -m project.read \"C:\\Users\\admin\\django projects\\blog-site\" --ignore \".idea, .vscode\"\n\nOptional two is the final output file.\n\n.. code:: bash\n\n   python -m project.read \"C:\\Users\\admin\\django projects\\blog-site\" --output \"blog_site_tree.txt\"\n\nOR\n\n.. code:: bash\n\n   python -m project.read \"C:\\Users\\admin\\django projects\\blog-site\" --ignore \".idea, .vscode\" --output \"blog_site_tree.txt\"\n\nThis will output a file a tree visualizing you project.\n\nGo ahead and run the line below to learn more\n\n.. code:: bash\n\n   python -m project.read -h\n\n*Using project reader in python code or from the interpreter*\n-------------------------------------------------------------\n\nYou can choose to use from the interpreter or in your code using the\nhelp of project.folder_reader.py and project.folder_visualizer.py\n\n\nFolder visualizer (project.folder_visualizer.py)\n------------------------------------------------\n\n| Contains classes(Folder, File) and functions(assign_class,\n  depth_calculator, draw) to help visualize the hierarchy.\n| Example. This is **\"test_FOLDER_GITHUB_PROJECTS_2.txt\"** prepared by\n  the function ``project.folder_reader.print_statement`` below.\n\nExample 1\n\n\n.. code:: text\n\n   question_1.py - 38\n   question_2(factorial).py - 66\n   question_21.py - 45\n   .IDEA\n   github projects 2.iml - 11\n   misc.xml - 5\n   modules.xml - 9\n   workspace.xml - 17\n   DICTIONARIES\n   muremwa.xml - 5\n   ---- END OF DICTIONARIES ----\n   ---- END OF .IDEA ----\n   DESC\n\nRun the code below\n\n.. code:: python\n\n   from project.folder_visualizer import assign_classes, draw\n\n\n   klasses = assign_classes('test_FOLDER_GITHUB_PROJECTS_2.txt')\n   draw(klasses, file_name=\"results.txt\")\n\nThis is the output in \"results.txt\"\n\nExample 2\n\n\n.. code:: text\n\n   GITHUB_PROJECTS_2\n   |\n   |---- question_1.py (38 lines)\n   |\n   |---- question_2(factorial).py (66 lines)\n   |\n   |---- question_21.py (45 lines)\n   |\n   |---- .IDEA\n   |          |\n   |          |---- github projects 2.iml (11 lines)\n   |          |\n   |          |---- misc.xml (5 lines)\n   |          |\n   |          |---- modules.xml (9 lines)\n   |          |\n   |          |---- workspace.xml (17 lines)\n   |          |\n   |          |---- DICTIONARIES\n   |          |         |\n   |          |         |---- muremwa.xml (5 lines)\n   |\n   |---- DESC\n\n\nFolder reader (project.folder_reader.py)\n----------------------------------------\n\nContains the following classes:\n\n1. KillerFolder - extends the Folder class from\n   project.folder_visualizer.py but adds the following methods (eq) and\n   statement and the path property.\n2. KillerFile - extends the File class from project.folder_visualizer.py\n   but adds the path property\n3. FolderStore - extends the in-built list class. It stores only\n   KillerFolder objects.\n4. RootDoesNotExist - an exception that is raised when one tries to\n   access the root KillerFolder object of a FolderStore object that has\n   none.\n\nContains the following functions:\n\n1. kill_project - takes in a path of the folder to read, reads and\n   returns a string representative of the files and folders similar to\n   [example 1](#Example 1) above. You can add a keyword argument called\n   ignore to show what folders to ignore.\n2. print_statement - takes the statement from kill_project and writes it\n   to a file and returns the name of that file. Usually\n   FOLDER_SOMETHING.txt\n\nUsing project.folder_reader.py (demonstrated using the folder names TOP)\n\n.. code:: python\n\n   import os\n   from project.folder_reader import kill_project, print_statement\n\n   # change into the folder you want to read\n   os.chdir(os.getcwd() + \"\\\\TOP\")\n\n   # get the statement\n   statement = kill_project(os.getcwd(), ignore=['.vscode', '.idea'])\n\n   # write the statement to a file\n   file_name = print_statement(statement)  # the file_name can be passes into folder_visualizer.assign_classes()\n\nThe last line writes to a file called \"FOLDER_TOP.txt\"\n\n.. code:: text\n\n   file.txt - 1\n   VO\n   s.txt - 1\n   KO\n   l1.txt - 1\n   ---- END OF KO ----\n   ---- END OF VO ----\n   XO\n   n.txt - 1\n   BO\n   temp.txt - 1\n   ---- END OF BO ----\n   JO\n   sd.txt - 1\n   PO\n   l.txt - 1\n   ---- END OF PO ----\n   ---- END OF JO ----\n   ---- END OF XO ----\n\nNotice how the folder '.idea' was ignored.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/muremwa/Project-Reader",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "project-reader",
    "package_url": "https://pypi.org/project/project-reader/",
    "platform": "",
    "project_url": "https://pypi.org/project/project-reader/",
    "project_urls": {
      "Homepage": "https://github.com/muremwa/Project-Reader"
    },
    "release_url": "https://pypi.org/project/project-reader/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Read and analyse the files in your projects.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12950383,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fed22b484f2d714ea0a2e300f05b6600d19af203d5c2cfcf1c8b25c816bd5ce",
          "md5": "3c726d19be97f62c65d204269c9f80cd",
          "sha256": "49ddda1e9ed0fd66d372a044be7bb4087fbfbfa9742781a21c2c528b246efe67"
        },
        "downloads": -1,
        "filename": "project_reader-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c726d19be97f62c65d204269c9f80cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10349,
        "upload_time": "2022-02-20T12:02:33",
        "upload_time_iso_8601": "2022-02-20T12:02:33.358818Z",
        "url": "https://files.pythonhosted.org/packages/0f/ed/22b484f2d714ea0a2e300f05b6600d19af203d5c2cfcf1c8b25c816bd5ce/project_reader-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b138902bf9f7d675c242a92c67f51a522e20ced833ba86d2b0046d904d8f2e7",
          "md5": "c06f43e6c87fb6f9ab4d46d11bf2195c",
          "sha256": "2f63d68e92c820a524a720d6e7593113bbe8283d7e740d669aa28d2e415f12ec"
        },
        "downloads": -1,
        "filename": "project-reader-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c06f43e6c87fb6f9ab4d46d11bf2195c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10523,
        "upload_time": "2022-02-20T12:02:35",
        "upload_time_iso_8601": "2022-02-20T12:02:35.623557Z",
        "url": "https://files.pythonhosted.org/packages/2b/13/8902bf9f7d675c242a92c67f51a522e20ced833ba86d2b0046d904d8f2e7/project-reader-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0fed22b484f2d714ea0a2e300f05b6600d19af203d5c2cfcf1c8b25c816bd5ce",
        "md5": "3c726d19be97f62c65d204269c9f80cd",
        "sha256": "49ddda1e9ed0fd66d372a044be7bb4087fbfbfa9742781a21c2c528b246efe67"
      },
      "downloads": -1,
      "filename": "project_reader-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c726d19be97f62c65d204269c9f80cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10349,
      "upload_time": "2022-02-20T12:02:33",
      "upload_time_iso_8601": "2022-02-20T12:02:33.358818Z",
      "url": "https://files.pythonhosted.org/packages/0f/ed/22b484f2d714ea0a2e300f05b6600d19af203d5c2cfcf1c8b25c816bd5ce/project_reader-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b138902bf9f7d675c242a92c67f51a522e20ced833ba86d2b0046d904d8f2e7",
        "md5": "c06f43e6c87fb6f9ab4d46d11bf2195c",
        "sha256": "2f63d68e92c820a524a720d6e7593113bbe8283d7e740d669aa28d2e415f12ec"
      },
      "downloads": -1,
      "filename": "project-reader-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c06f43e6c87fb6f9ab4d46d11bf2195c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10523,
      "upload_time": "2022-02-20T12:02:35",
      "upload_time_iso_8601": "2022-02-20T12:02:35.623557Z",
      "url": "https://files.pythonhosted.org/packages/2b/13/8902bf9f7d675c242a92c67f51a522e20ced833ba86d2b0046d904d8f2e7/project-reader-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}