{
  "info": {
    "author": "Margret Riegert",
    "author_email": "margret@eowyn.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# VHDLproc\n\nVHDLproc is a simple command line VHDL preprocessor written in Python following the conditional compilation directives outlined in VHDL-2019, with a few extensions.\n\n## Installation\n\nVHDLproc can be installed via pip:\n```\n$ pip install vhdlproc\n$ vhdlproc --help\n```\n\nIt can also be installed from source\n```\n$ git clone https://github.com/nobodywasishere/vhdlproc\n$ cd vhdlproc\n$ python setup.py install --user\n$ vhdlproc --help\n```\n\nIt can also simply be run as a standalone file\n```\n$ git clone https://github.com/nobodywasishere/vhdlproc\n$ cd vhdlproc\n$ ./vhdlproc/vhdlproc.py --help\n```\n\n## Usage\n\n### Command Line\n\n```\nusage: vhdlproc.py [-h] [-D IDENTIFIER=value] [-o DIRECTORY] [-e EXTENSION] [--parse-comments]\n                   [--self-test] [--log-level LEVEL]\n                   [input ...]\n\nVHDLproc v2.3 - VHDL Preprocessor\n\npositional arguments:\n  input                Input files (will skip over files with the output extension)\n\noptions:\n  -h, --help           show this help message and exit\n  -D IDENTIFIER=value  Specify identifiers for conditional compilation, ex. DEBUG_LEVEL=2\n  -o DIRECTORY         Directory to store parsed files\n  -e EXTENSION         Output extension for processed files (defaults to '.proc.vhdl')\n  --parse-comments     Parse commented directives as though they aren't commented, overwrite original\n                       file. Disables skipping based on file extension\n  --self-test          Run a self-test to ensure functionality\n  --log-level LEVEL    Configure the logging level\n```\n\nA basic example, where VHDLproc will parse each input file, output the processed text to a new file with a given extension, and the processed files are then passed to GHDL:\n\n```bash\nvhdlproc *.vhdl              # preprocess all the files\nghdl -a --std=08 *.proc.vhdl # pass processed files to ghdl\nghdl -r --std=08 testbench   # run simulation\n```\n\nAs VHDLproc also outputs each of the processed filenames to STDOUT, this would also work:\n```bash\nghdl -a --std=08 $(vhdlproc *.vhdl)\nghdl -r --std=08 testbench\n```\n\nThe parsed files can also be stored to another directory:\n```bash\nvhdlproc *.vhdl -o build/     # preprocess all the files and store in build/\nghdl -a --std=08 build/*.vhdl # pass processed files in build/ to ghdl\nghdl -r --std=08 testbench    # run simulation\n```\n\nCommented directives can also be parsed in-place, including replacing `include` directives:\n\n```bash\nvhdlproc *.vhdl -e .vhdl --parse-comments # parse commented directives and overwrite original file\nghdl -a --std=08 *.vhdl       # same exact files that were passed to ghdl\nghdl -r --std=08 testbench    # run simulation\n```\n\n### Python Library\n\nParse files (will automatically set the include path):\n\n```python\nfrom vhdlproc import VHDLproc\n\nprocessor = VHDLproc()\n\nidentifiers = {\"VHDL_VERSION\": \"2008\"}\n\nparsed_text = processor.parse_file(\"path/to/file.vhdl\", identifiers=identifiers)\n```\n\nParse code directly:\n\n```python\nfrom vhdlproc import VHDLproc\n\nprocessor = VHDLproc()\n\nidentifiers = {\"VHDL_VERSION\": \"2008\"}\n\n# Parse list of lines of text\ncode = [\n    '`warning \"Hello\"',\n    'constant test_var : integer := 100',\n    '`if TOOL_VERSION < \"2.0\" then',\n    '`error \"UNSUPPORTED VHDLPROC VERSION\"',\n    '`end',\n    '`include \"some/file.vhdl\"',\n]\n\nparsed_text = processor.parse(code, identifiers=identifiers, include_path=\"path/to/pull/include/directives/from\")\n\n# Parse string\ncode = '''\n`warning \"Hello\"\nconstant test_var : integer := 100\n`if TOOL_VERSION < \"2.0\" then\n`error \"UNSUPPORTED VHDLPROC VERSION\"\n`end\n`include \"some/file.vhdl\"\n'''\n\nparsed_text = processor.parse(code, identifiers=identifiers, include_path=\"path/to/pull/include/directives/from\")\n```\n\n### Preprocessor Directives (what you put in your VHDL files)\n\n```vhdl\n-- VHDL-2019 directives\n\n`if {CONDITIONAL} then\n\n`elsif {CONDITIONAL} then\n\n`else\n\n`end [if]\n\n`warning \"STRING\"       --   Print STRING to standard error output stream\n\n`error \"STRING\"         --   Print STRING to standard error output stream\n                        --   Will force close VHDLproc without saving\n\n-- Additional extensions not part of VHDL-2019\n\n`define LABEL \"STRING\"  --   Gives LABEL the value of STRING for\n                        --   conditional statements\n\n`include \"FILENAME\"     --   Include another file relative to\n                        --   the location of the source\n\n`end include \"FILENAME\" --   This is a counterpart to `include for parsing commented directives\n                        --   in-place, should not be used directly (added automatically)\n                        --   Sets the bound of where to replace when re-including a file\n```\n\n### Identifiers (or Labels)\n\nBy default, `TOOL_NAME` is set to `VHDLproc` and `TOOL_VERSION` is set to the current version of the code, these cannot be changed.\n\n## Todo\n\n- [ ] Seperate infix definitions, tests, and the main components of VHDLproc into their own files\n- [ ] Prevent a file from including itself (to prevent infinite loops)\n- [ ] Modify text and file operations to work on Windows (if they don't already)\n- [ ] Throw an error if a `` `warning `` or `` `error `` string isn't wrapped in quotes\n- [x] Parse comments / files in-place\n- [x] Fix precedence of operators\n- [x] Add the option to the CLI to take in a series of file inputs, process them, save the individual results to temporary files (i.e. in `/tmp/` or a local path), then return all of the filepaths. This would be useful for doing this with GHDL: `ghdl -a $(vhdlproc *.vhdl)`. \n\n## Examples\n\nMore examples included under `vhdlproc/tests/`.\n\n### Include File\n\nInput:\n\n```vhdl\n`include \"include-to.vhdl\"\n```\n\ninclude-to.vhdl:\n\n```vhdl\ncomponent pll is\n    port (\n        clk_in : in std_logic;\n        clk_out : out std_logic;\n        clk_locked : out std_logic\n    );\nend component;\n```\n\nOutput:\n\n```vhdl\n-- `include \"include-to.vhdl\"\ncomponent pll is\n    port (\n        clk_in : in std_logic;\n        clk_out : out std_logic;\n        clk_locked : out std_logic\n    );\nend component;\n-- `end include \"include-to.vhdl\"\n```\n\n### Define, Repeated If/Elsif\n\nInput:\n```vhdl\n`define a \"a\"\n`define b \"z\"\n\n`if a = \"a\" and b = \"b\" then\na = \"a\" and b = \"b\"\n`elsif a /= \"a\" and b = \"b\" then\na /= \"a\" and b = \"b\"\n`elsif a = \"a\" and b /= \"b\" then\na = \"a\" and b /= \"b\"\n`elsif a /= \"a\" and b /= \"b\" then\na /= \"a\" and b /= \"b\"\n`else\n`warning \"Not supposed to be here\"\n`end\n```\n\nOutput:\n```vhdl\n-- `define a \"a\"\n-- `define b \"z\"\n\n-- `if a = \"a\" and b = \"b\" then\n-- a = \"a\" and b = \"b\"\n-- `elsif a /= \"a\" and b = \"b\" then\n-- a /= \"a\" and b = \"b\"\n-- `elsif a = \"a\" and b /= \"b\" then\na = \"a\" and b /= \"b\"\n-- `elsif a /= \"a\" and b /= \"b\" then\n-- a /= \"a\" and b /= \"b\"\n-- `else\n-- `warning \"Not supposed to be here\"\n-- `end\n```\n\n### Nested If\n\nInput:\n```vhdl\n`define a \"a\"\n`define b \"b\"\n\n`if a = \"a\" then\n`if b = \"b\" then\na = \"a\" and b = \"b\"\n`else\na = \"a\" and b /= \"b\"\n`end\n`end\n```\n\nOutput:\n```vhdl\n-- `define a \"a\"\n-- `define b \"b\"\n\n-- `if a = \"a\" then\n-- `if b = \"b\" then\na = \"a\" and b = \"b\"\n-- `else\n-- a = \"a\" and b /= \"b\"\n-- `end\n-- `end\n```\n\n### VHDL Version\n\nInput:\n```vhdl\n`define VHDL_VERSION \"2019\"\n`if VHDL_VERSION >= \"2008\" then\nconstant enable_features : bool := true\n`else\n`warning \"Certain features disabled!\"\nconstant enable_features : bool := false\n`end\n```\n\nOutput:\n```vhdl\n-- `define VHDL_VERSION \"2019\"\n-- `if VHDL_VERSION >= \"2008\" then\nconstant enable_features : bool := true\n-- `else\n-- `warning \"Certain features disabled!\"\n-- constant enable_features : bool := false\n-- `end\n```\n\n### Parsing Comments\n\nWith the flag `--parse-comments`, directives are executed in-place as if they weren't commented. Code added by an `include` directive is replaced with an updated version, bounded by a corresponding `end include`.\n\nInput:\n```vhdl\n-- `warning \"== Including file ==\"\n-- `define Include_file \"TRUE\"\n\n-- `if INCLUDE_FILE = \"TRUE\" then\n-- `include \"../tests/include-to.vhdl\"\ncomponent OLD_CODE is\n  port(\n\t  a : in unsigned(3 downto 0);\n\t  b : in unsigned(3 downto 0);\n\t  s : in std_logic_vector(1 downto 0);\n\t  y : out unsigned(3 downto 0)\n  );\nend component;\n-- `end include \"../tests/include-to.vhdl\"\n-- `else\n-- `error \"Not including thing\"\n-- `end if\n\n-- `warning \"== Not including file ==\"\n-- `define Include_file \"false\"\n-- `define passed \"\"\n\n-- `if INCLUDE_FILE = \"TRUE\" then\n-- `include \"../tests/include-to.vhdl\"\n-- `else\n-- `end if\n\n-- `if passed /= \"\" then\n-- `Warning \"Failed\"\n-- `else\n-- `Warning \"Passed\"\n-- `end\n```\n\ninclude-to.vhdl:\n\n```vhdl\ncomponent pll is\n    port (\n        clk_in : in std_logic;\n        clk_out : out std_logic;\n        clk_locked : out std_logic\n    );\nend component;\n`if include_file = \"false\" then\n`error \"Failed\"\n`else\n`warning \"Passed\"\n`end\n\n`define passed \"failed\"\n```\n\nOutput:\n```vhdl\n-- `warning \"== Including file ==\"\n-- `define Include_file \"TRUE\"\n\n-- `if INCLUDE_FILE = \"TRUE\" then\n-- `include \"../tests/include-to.vhdl\"\ncomponent pll is\n    port (\n        clk_in : in std_logic;\n        clk_out : out std_logic;\n        clk_locked : out std_logic\n    );\nend component;\n-- `if include_file = \"false\" then\n-- `error \"Failed\"\n-- `else\n-- `warning \"Passed\"\n-- `end\n\n-- `define passed \"failed\"\n-- `end include \"../tests/include-to.vhdl\"\n-- `else\n-- `error \"Not including thing\"\n-- `end if\n\n-- `warning \"== Not including file ==\"\n-- `define Include_file \"false\"\n-- `define passed \"\"\n\n-- `if INCLUDE_FILE = \"TRUE\" then\n-- `include \"../tests/include-to.vhdl\"\n-- `else\n-- `end if\n\n-- `if passed /= \"\" then\n-- `Warning \"Failed\"\n-- `else\n-- `Warning \"Passed\"\n-- `end\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nobodywasishere/vhdlproc",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vhdlproc",
    "package_url": "https://pypi.org/project/vhdlproc/",
    "platform": null,
    "project_url": "https://pypi.org/project/vhdlproc/",
    "project_urls": {
      "Homepage": "https://github.com/nobodywasishere/vhdlproc"
    },
    "release_url": "https://pypi.org/project/vhdlproc/2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple VHDL preprocessor",
    "version": "2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13792693,
  "releases": {
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cbe9a728a1b4150e7b98dee69cd4798fe86a9af5c28ac9b8678844cceadcaf9",
          "md5": "02e855b33fbb237a3e9b455e629f4f35",
          "sha256": "c5315b4744e287bc3e37287fc9a68f16cecc844c4c9b1ff9b52c272c14caa7db"
        },
        "downloads": -1,
        "filename": "vhdlproc-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02e855b33fbb237a3e9b455e629f4f35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18812,
        "upload_time": "2021-06-20T05:26:54",
        "upload_time_iso_8601": "2021-06-20T05:26:54.060565Z",
        "url": "https://files.pythonhosted.org/packages/5c/be/9a728a1b4150e7b98dee69cd4798fe86a9af5c28ac9b8678844cceadcaf9/vhdlproc-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "036606926f304b4b9f70b732bc674627534c8806e0d9d6c37ae5090bd9c622d9",
          "md5": "a6ebe7a1b006679689a7f0c540fbe134",
          "sha256": "914fb7b5e9b66eda5d55589a99c177ff6cd0ff0cc54d51fb079a780506e230a8"
        },
        "downloads": -1,
        "filename": "vhdlproc-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a6ebe7a1b006679689a7f0c540fbe134",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18553,
        "upload_time": "2021-06-20T05:26:55",
        "upload_time_iso_8601": "2021-06-20T05:26:55.170808Z",
        "url": "https://files.pythonhosted.org/packages/03/66/06926f304b4b9f70b732bc674627534c8806e0d9d6c37ae5090bd9c622d9/vhdlproc-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c4782b9144c92e167512a93164e33c5774ae07b584de8ba4b69e949e1d4b115",
          "md5": "b2c2a7ad519ba1d6f2091fe5e845f7dc",
          "sha256": "316e66f72463d08311acc42e5876b1582db381553540408a88001fd5a871b6e0"
        },
        "downloads": -1,
        "filename": "vhdlproc-2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2c2a7ad519ba1d6f2091fe5e845f7dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21772,
        "upload_time": "2022-05-12T08:26:42",
        "upload_time_iso_8601": "2022-05-12T08:26:42.311122Z",
        "url": "https://files.pythonhosted.org/packages/7c/47/82b9144c92e167512a93164e33c5774ae07b584de8ba4b69e949e1d4b115/vhdlproc-2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e05c61f8fc23d5210878b017d9c130416c1bfdd266302d7246acd00e901d862",
          "md5": "9c67fecd23746b0eced752960ea92416",
          "sha256": "f0338e3800c03aa38f34cd5c1e455c4f770a873192bc2675addd8300cdc223de"
        },
        "downloads": -1,
        "filename": "vhdlproc-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9c67fecd23746b0eced752960ea92416",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22166,
        "upload_time": "2022-05-12T08:26:43",
        "upload_time_iso_8601": "2022-05-12T08:26:43.928648Z",
        "url": "https://files.pythonhosted.org/packages/1e/05/c61f8fc23d5210878b017d9c130416c1bfdd266302d7246acd00e901d862/vhdlproc-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c57be04a758d0aed9f1fba622b0f191ad41a4b16e3cd6fb5ae9fd7e4dd4d7511",
          "md5": "87852b062343de596b3e3ed3b2f401cb",
          "sha256": "181a40fe6b480cdde983588883db27e175562f60df3035fd3cb5322da6591a83"
        },
        "downloads": -1,
        "filename": "vhdlproc-2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87852b062343de596b3e3ed3b2f401cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22966,
        "upload_time": "2022-05-12T11:29:38",
        "upload_time_iso_8601": "2022-05-12T11:29:38.442810Z",
        "url": "https://files.pythonhosted.org/packages/c5/7b/e04a758d0aed9f1fba622b0f191ad41a4b16e3cd6fb5ae9fd7e4dd4d7511/vhdlproc-2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efcad4c7c1a7b5931ff9b0d989015536997c1b877f84441f047a6fd109c389f7",
          "md5": "456987ef9046600356085686ca6538bf",
          "sha256": "660384f8f5376887aff3f0549b69f2be4b0b1b2ba8df55a23792d0b6590e5d66"
        },
        "downloads": -1,
        "filename": "vhdlproc-2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "456987ef9046600356085686ca6538bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23843,
        "upload_time": "2022-05-12T11:29:40",
        "upload_time_iso_8601": "2022-05-12T11:29:40.672748Z",
        "url": "https://files.pythonhosted.org/packages/ef/ca/d4c7c1a7b5931ff9b0d989015536997c1b877f84441f047a6fd109c389f7/vhdlproc-2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c57be04a758d0aed9f1fba622b0f191ad41a4b16e3cd6fb5ae9fd7e4dd4d7511",
        "md5": "87852b062343de596b3e3ed3b2f401cb",
        "sha256": "181a40fe6b480cdde983588883db27e175562f60df3035fd3cb5322da6591a83"
      },
      "downloads": -1,
      "filename": "vhdlproc-2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "87852b062343de596b3e3ed3b2f401cb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22966,
      "upload_time": "2022-05-12T11:29:38",
      "upload_time_iso_8601": "2022-05-12T11:29:38.442810Z",
      "url": "https://files.pythonhosted.org/packages/c5/7b/e04a758d0aed9f1fba622b0f191ad41a4b16e3cd6fb5ae9fd7e4dd4d7511/vhdlproc-2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efcad4c7c1a7b5931ff9b0d989015536997c1b877f84441f047a6fd109c389f7",
        "md5": "456987ef9046600356085686ca6538bf",
        "sha256": "660384f8f5376887aff3f0549b69f2be4b0b1b2ba8df55a23792d0b6590e5d66"
      },
      "downloads": -1,
      "filename": "vhdlproc-2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "456987ef9046600356085686ca6538bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23843,
      "upload_time": "2022-05-12T11:29:40",
      "upload_time_iso_8601": "2022-05-12T11:29:40.672748Z",
      "url": "https://files.pythonhosted.org/packages/ef/ca/d4c7c1a7b5931ff9b0d989015536997c1b877f84441f047a6fd109c389f7/vhdlproc-2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}