{
  "info": {
    "author": "Martijn van der Klis",
    "author_email": "M.H.vanderKlis@uu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# PefectExtractor\n*Extracting Perfects (and related forms) from parallel corpora*\n\nThis command-line application allows for extraction of Perfects (and related forms, like the Recent Past construction in French and Spanish) from part-of-speech-tagged, lemmatized and sentence-aligned parallel corpora encoded in XML.\n\n## Recognizing Perfects \n\nIn English, a *present perfect* is easily recognizable as a present form of *to have* plus a past participle, like in (1):\n\n    (1) I have seen that movie twenty times.\n\nHowever, one difficulty in finding Perfects in most languages is that there might be words between the auxiliary and the past participle, like in (2):\n\n    (2) Nobody has ever climbed that mountain.\n\nFurthermore, languages have passive forms that generally require the past participle of *to be* to be interjected, like in (3):\n\n    (3) The bill has been paid by John.\n\nIn English, there is the additional issue of the *present perfect continuous*, which in form shares the first part of the construction with the *present perfect*, like in (4):\n\n    (4) He has been waiting here for two hours.\n\nIn some languages (e.g. French, German, and Dutch), the Perfect can be formed with both Have and Be. \nThe past participle governs which auxiliary verb is used, as (5) and (6) show.\n\n    (5) J'ai vu quelque chose [lit. I have seen some thing]\n    (6) Elle est arrivé [lit. She is arrived]\n\nFor French, this is a closed list \n([DR and MRS P. VANDERTRAMP](https://en.wikipedia.org/wiki/Pass%C3%A9_compos%C3%A9#Auxiliary_.22.C3.8Atre.22)), \nbut for other languages, this might be a more open class.\n\nThe last common issue with finding Perfects is that in e.g. Dutch and German, the Perfect might appear before the auxiliary verb in subordinate clauses. (7) is an example: \n\n    (7) Dat is de stad waar hij gewoond heeft. [lit. This is the city where he lived has]\n\nThe extraction script provided here takes care of all these issues, and can have language-specific settings. \n\n### Implementation \n\nThe extraction script (`apps/extractor/perfectextractor.py`) is implemented using the [lxml XML toolkit](http://lxml.de/). \n\nThe script looks for auxiliary verbs (using a [XPath expression](https://en.wikipedia.org/wiki/XPath)), and for each of these, \nit tries to find a past participle on the right hand side of the sentence (or left hand side in Dutch/German), allowing for words between the verbs, \nthough this lookup stops at the occurrence of other verbs, punctuation and coordinating conjunctions.\n\nThe script also allows for extraction of *present perfect continuous* forms. \n\nThe script handles these by a list of verbs that use Be as auxiliary. \nThe function *get_ergative_verbs* in `extractor/wiktionary.py` extracts these verbs from [Wiktionary](https://en.wiktionary.org) for Dutch.\nThis function uses the [Requests: HTTP for Humans](http://docs.python-requests.org/) package.\nFor German, the list is compiled from [this list](https://deutsch.lingolia.com/en/grammar/verbs/sein-haben).\n\n## Recognizing Recent Pasts\n\nMost Romance languages share a grammaticalized construction to refer to events in the recent past, e.g. the *passé récent* in French and the *pasado reciente* in Spanish.\nIn English, typically a *present perfect* alongside the adverb *just* is used to convey this meaning, commonly referred to as *perfect of recent past* (Comrie 1985) or *hot news perfect* (McCawley 1971).\n\nThe French *passé récent* is formed with a present tense of *venir* 'come' followed by the particle *de* and an infinitive, as in (8) below.\n\n    (8) Je viens de voir Marie. [lit. I come DE see Mary] \n\nThe Spanish *pasado reciente* is (quite similarly) formed with a present tense of *acabar* 'finish' followed by the particle *de* and an infinitive, as in (9) below.\n\n    (9) Acabo de ver a María. [lit. I finish DE see Mary]\n\nThe extraction script (`apps/extractor/recentpastextractor.py`) provided here allows export of these constructions from parallel corpora.  \n\n## Other extractors\n\nThis application also allows extraction from parallel corpora based on part-of-speech tags or regexes. \n\n## Corpora\n\n### Dutch Parallel Corpus\n\nThe extraction was first tested with the [Dutch Parallel Corpus](http://www.kuleuven-kulak.be/DPC).\nThis corpus (that uses the [TEI format](http://www.tei-c.org/)) consists of three languages: Dutch, French and English. \nThe configuration for this corpus can be found in `corpora/dpc/base.cfg` and `corpora/dpc/perfect.cfg`.\nExample documents from this corpus are included in the `tests/data/dpc` directory.\nThe data for this corpus is **closed source**, to retrieve the corpus, you'll have to contact the authors on the cited website.\nAfter you've obtained the data, you can run the extraction script with:\n\n    python extract.py <folder> en fr nl --corpus=dpc --extractor=perfect\n\n### OPUS Corpora\n\nThe extraction has also been implemented for the open parallel corpus [OPUS](http://opus.nlpl.eu/), that contains most notably the [Europarl Corpus](http://opus.nlpl.eu/Europarl.php) and the [OpenSubtitles Corpus](http://opus.nlpl.eu/OpenSubtitles.php).\nThis corpus (that uses the [XCES format](http://www.tei-c.org/) for alignment) consists of a wide variety of languages. \nThe configuration for this corpus can be found in `corpora/opus/base.cfg` and `corpora/opus/perfect.cfg`: implementations have been made for Dutch, English, French, German and Spanish. \nExample documents from this corpus are included in the `tests/data/europarl` directory.\nThe data for this corpus is **open source**: you can download the corpus and the alignment files from the cited website.\nAfter you've obtained the data, you can run the extraction script with:\n\n    python extract.py <folder> en de es --corpus=opus --extractor=perfect\n\n### BNC Corpus\n\nThe extraction has also been implemented for the monolingual BNC Corpus.\nThe data for this corpus is **open source**: you can download the corpus from the cited website.\nAfter you've obtained the data, you can run the extraction script with:\n\n    python extract.py <folder> en --corpus=bnc --extractor=perfect\n\n### Implementing your own corpus\n\nIf you want to implement the extraction for another corpus, you'll have to create: \n\n* An implementation of the corpus in the `corpora` directory (see `corpora/opus` for an example).\n* A configuration file in this directory (see `corpora/opus/base.cfg` for an example).\n* An entry in the main script (see `extract.py`)\n\n## Other options to the extraction script\n\nYou can view all options of the extraction script by typing:\n\n    python extract.py --help\n\nDo note that at this point in time, not all options are available in all corpora.\nFeel free to send a pull request once you have implemented an option, or to request one by creating an issue. \n\n## Other scripts\n\nThese scripts can be found in `perfectextractor/scripts`.\n\n### pick_alignments\n\nThis script allows to filter the alignment file based on (for example) a file prefix.\nThis is helpful in the case of large alignment files, as is e.g. the case for the Europarl corpus.\nExample usage:\n\n    python pick_alignments.py \n\n### merge_results\n\nThis script allows to merge results from various files.\nExample usage:\n\n    python merge_results.py \n\n### splitter\n\nThis script allows to split a big corpus into subparts and then to run the extractors.\nExample usage:\n\n    python splitter.py \n\n## Tests\n\nThe unit tests can be run using: \n\n    python -m unittest discover -b\n\nA coverage report can be generated (after installing [coverage.py](https://coverage.readthedocs.io/en/coverage-4.2/)) using:\n\n    coverage run --source . -m unittest discover -b\n    coverage html\n\n## Citing\n\nIf you happen to have used (parts of) this project for your research, please refer to this paper:\n\n[van der Klis, M., Le Bruyn, B., de Swart, H. (2017)](http://www.aclweb.org/anthology/E17-2080). Mapping the Perfect via Translation Mining. *Proceedings of the 15th Conference of the European Chapter of the Association for Computational Linguistics: Volume 2, Short Papers* 2017, 497-502.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/UUDigitalHumanitieslab/perfectextractor",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "perfectextractor",
    "package_url": "https://pypi.org/project/perfectextractor/",
    "platform": "",
    "project_url": "https://pypi.org/project/perfectextractor/",
    "project_urls": {
      "Homepage": "https://github.com/UUDigitalHumanitieslab/perfectextractor"
    },
    "release_url": "https://pypi.org/project/perfectextractor/0.4/",
    "requires_dist": [
      "click",
      "lxml",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Extracting Perfects (and related forms) from parallel corpora",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8092124,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2809d1cd151aa9bbaa11ee2ede2f2045ad24763ec1123fbc98aa39f76b30d466",
          "md5": "56823f2077b2d8b3f30c64cbaa5cf643",
          "sha256": "d79cf3093754a89342f0e7704191f0c4d69d259f6539ee14043d2a97520290f2"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56823f2077b2d8b3f30c64cbaa5cf643",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6782,
        "upload_time": "2020-06-03T10:44:48",
        "upload_time_iso_8601": "2020-06-03T10:44:48.289575Z",
        "url": "https://files.pythonhosted.org/packages/28/09/d1cd151aa9bbaa11ee2ede2f2045ad24763ec1123fbc98aa39f76b30d466/perfectextractor-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adde168ab8f866487637612dfdfc0d734d03bd8c0665fb6c7b8c2602f655a967",
          "md5": "ff3d42c376925752c9acf6b34dca646f",
          "sha256": "3d843f7b7e061dd18a3791df2c529beb2d9b9ae142c668bf149821c777306bae"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff3d42c376925752c9acf6b34dca646f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6182,
        "upload_time": "2020-06-03T10:44:50",
        "upload_time_iso_8601": "2020-06-03T10:44:50.805945Z",
        "url": "https://files.pythonhosted.org/packages/ad/de/168ab8f866487637612dfdfc0d734d03bd8c0665fb6c7b8c2602f655a967/perfectextractor-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc8d3219da1d42ea79d4852da9e0ded485f0d60543689d7033ee952ba595059f",
          "md5": "15f28b0ecc1efbcc8d272ffd9eeda35a",
          "sha256": "bf5f695d84ce4cdfee572626abfc20f54afc5fc0e2a4973324b660090681affc"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15f28b0ecc1efbcc8d272ffd9eeda35a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6807,
        "upload_time": "2020-06-03T10:49:38",
        "upload_time_iso_8601": "2020-06-03T10:49:38.851645Z",
        "url": "https://files.pythonhosted.org/packages/cc/8d/3219da1d42ea79d4852da9e0ded485f0d60543689d7033ee952ba595059f/perfectextractor-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a933fabb6f29b965135bde92ee736099c8bee9a1d833b376a5668ec2af65eaa6",
          "md5": "71287b5c6b6e214f46eb40df5a847810",
          "sha256": "cb674787207634a82cfe5992f4096e4d50056d364540c070732197e5f18ea433"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "71287b5c6b6e214f46eb40df5a847810",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6200,
        "upload_time": "2020-06-03T10:49:40",
        "upload_time_iso_8601": "2020-06-03T10:49:40.284373Z",
        "url": "https://files.pythonhosted.org/packages/a9/33/fabb6f29b965135bde92ee736099c8bee9a1d833b376a5668ec2af65eaa6/perfectextractor-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c641707558b95a11e5e3975f64c42c777f649c3b3bbbc5e1d95333ba94b2dcc",
          "md5": "a1d6e7092088b275e7ccfd1dbd42896b",
          "sha256": "f0cc4c8e6cebef28eca150d169a61deb1c8bfc8ffe2dfb956d0164576180188b"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1d6e7092088b275e7ccfd1dbd42896b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 40490,
        "upload_time": "2020-06-18T07:15:05",
        "upload_time_iso_8601": "2020-06-18T07:15:05.528234Z",
        "url": "https://files.pythonhosted.org/packages/8c/64/1707558b95a11e5e3975f64c42c777f649c3b3bbbc5e1d95333ba94b2dcc/perfectextractor-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "240973e073f15f252f3308a73c526ebdd603869d0acf06751678e98d852517b3",
          "md5": "8c7d2d198c087a218d2fda4d011fab1b",
          "sha256": "0898aa15f8ce12f2b63579397eac4a159d508b7eafd3c8ebd712b80cb35b1c6e"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8c7d2d198c087a218d2fda4d011fab1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31819,
        "upload_time": "2020-06-18T07:14:37",
        "upload_time_iso_8601": "2020-06-18T07:14:37.878531Z",
        "url": "https://files.pythonhosted.org/packages/24/09/73e073f15f252f3308a73c526ebdd603869d0acf06751678e98d852517b3/perfectextractor-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9743077587027d8f1f909ee0bce282eda098810df91a9067c704c0aaaa536a9",
          "md5": "88cede2f2adc1bf86c0a80641658d759",
          "sha256": "eb7c6f831a81f8b96f9c1955e4898a61935fa6be12febdee7b722da79a0b4e31"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88cede2f2adc1bf86c0a80641658d759",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 46191,
        "upload_time": "2020-06-19T19:55:55",
        "upload_time_iso_8601": "2020-06-19T19:55:55.984333Z",
        "url": "https://files.pythonhosted.org/packages/b9/74/3077587027d8f1f909ee0bce282eda098810df91a9067c704c0aaaa536a9/perfectextractor-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e470cc3262df5f14764e62b85ccf32dc0ce8f5430628e4bece33a5ba108fafa3",
          "md5": "c82b0ec3c29eb755d5c2094f1edde283",
          "sha256": "e83b74925d70bc40b3f22873910aff2e8981f72c3e4425f5aa63aa4108d6dd03"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c82b0ec3c29eb755d5c2094f1edde283",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37115,
        "upload_time": "2020-06-19T19:56:00",
        "upload_time_iso_8601": "2020-06-19T19:56:00.797463Z",
        "url": "https://files.pythonhosted.org/packages/e4/70/cc3262df5f14764e62b85ccf32dc0ce8f5430628e4bece33a5ba108fafa3/perfectextractor-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e5e2ac59cdcaf673f7ba2c8c41a056b3c35192f3b6ae6c3bbcfb98a1fcbdec7",
          "md5": "5ac8bd74f7f3dab3809b27bec81144ba",
          "sha256": "271b51437b1ad975dbec98c3d456ad433b78c41e34547208127fc69140596a21"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ac8bd74f7f3dab3809b27bec81144ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 46584,
        "upload_time": "2020-07-14T10:07:09",
        "upload_time_iso_8601": "2020-07-14T10:07:09.014469Z",
        "url": "https://files.pythonhosted.org/packages/4e/5e/2ac59cdcaf673f7ba2c8c41a056b3c35192f3b6ae6c3bbcfb98a1fcbdec7/perfectextractor-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04180dfab03d2946bc8102508e8f2bfdf81cdc0766fded609eb0141b13e5fe2c",
          "md5": "29a5d81a31df00e856a011dc316e9974",
          "sha256": "841713b832ee7daa53c4d2f5c82b81b4dc6d55deaccb05b192e9fbfc024271a6"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "29a5d81a31df00e856a011dc316e9974",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37550,
        "upload_time": "2020-07-14T10:07:11",
        "upload_time_iso_8601": "2020-07-14T10:07:11.741730Z",
        "url": "https://files.pythonhosted.org/packages/04/18/0dfab03d2946bc8102508e8f2bfdf81cdc0766fded609eb0141b13e5fe2c/perfectextractor-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e3285216fce0b4d7588747299d300712740f287f9bf2527ec174f9fd9a7bbac",
          "md5": "0720001ce4210c52cc1539fb0f53b577",
          "sha256": "9d82047dd1bbee646a4b3dcb5378724acd73cd03b81beefb55bb2702cc353911"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0720001ce4210c52cc1539fb0f53b577",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 46609,
        "upload_time": "2020-08-11T07:14:42",
        "upload_time_iso_8601": "2020-08-11T07:14:42.315984Z",
        "url": "https://files.pythonhosted.org/packages/9e/32/85216fce0b4d7588747299d300712740f287f9bf2527ec174f9fd9a7bbac/perfectextractor-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55577ff2b05c05f85f422222cfac71269d88cab8a6803db29f9163b46c87a22a",
          "md5": "a192ddebf0e61223e404bd323e02010e",
          "sha256": "925ddaf9b6cf6e3b6f173122bb718f966379c7c96a49abad7c657aa0a60b0f64"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a192ddebf0e61223e404bd323e02010e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37574,
        "upload_time": "2020-08-11T07:14:44",
        "upload_time_iso_8601": "2020-08-11T07:14:44.139754Z",
        "url": "https://files.pythonhosted.org/packages/55/57/7ff2b05c05f85f422222cfac71269d88cab8a6803db29f9163b46c87a22a/perfectextractor-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f5e4ec646eb2469c36015431cb6f78541002bc0450953cb7b64efedd6f52441",
          "md5": "013a7a689dd8b10fbb64eb2b6f532065",
          "sha256": "f38cbe55b1b4fbac4cfa3c6d4a8c789c8e90b554bc8c94f46d965f5cf854c37c"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "013a7a689dd8b10fbb64eb2b6f532065",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 55878,
        "upload_time": "2020-09-02T07:36:19",
        "upload_time_iso_8601": "2020-09-02T07:36:19.963713Z",
        "url": "https://files.pythonhosted.org/packages/5f/5e/4ec646eb2469c36015431cb6f78541002bc0450953cb7b64efedd6f52441/perfectextractor-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f000986fefd324be325d32aab3626f82a851786f996fc8e01bbae2b897259e23",
          "md5": "205d93ec11556ef3d19f9c435ccde1d0",
          "sha256": "d6743317af7af7c25e5dd93bbf0f182f85c5df9b18b11025899b08151c2511ee"
        },
        "downloads": -1,
        "filename": "perfectextractor-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "205d93ec11556ef3d19f9c435ccde1d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38543,
        "upload_time": "2020-09-02T07:36:21",
        "upload_time_iso_8601": "2020-09-02T07:36:21.226606Z",
        "url": "https://files.pythonhosted.org/packages/f0/00/986fefd324be325d32aab3626f82a851786f996fc8e01bbae2b897259e23/perfectextractor-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f5e4ec646eb2469c36015431cb6f78541002bc0450953cb7b64efedd6f52441",
        "md5": "013a7a689dd8b10fbb64eb2b6f532065",
        "sha256": "f38cbe55b1b4fbac4cfa3c6d4a8c789c8e90b554bc8c94f46d965f5cf854c37c"
      },
      "downloads": -1,
      "filename": "perfectextractor-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "013a7a689dd8b10fbb64eb2b6f532065",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 55878,
      "upload_time": "2020-09-02T07:36:19",
      "upload_time_iso_8601": "2020-09-02T07:36:19.963713Z",
      "url": "https://files.pythonhosted.org/packages/5f/5e/4ec646eb2469c36015431cb6f78541002bc0450953cb7b64efedd6f52441/perfectextractor-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f000986fefd324be325d32aab3626f82a851786f996fc8e01bbae2b897259e23",
        "md5": "205d93ec11556ef3d19f9c435ccde1d0",
        "sha256": "d6743317af7af7c25e5dd93bbf0f182f85c5df9b18b11025899b08151c2511ee"
      },
      "downloads": -1,
      "filename": "perfectextractor-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "205d93ec11556ef3d19f9c435ccde1d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 38543,
      "upload_time": "2020-09-02T07:36:21",
      "upload_time_iso_8601": "2020-09-02T07:36:21.226606Z",
      "url": "https://files.pythonhosted.org/packages/f0/00/986fefd324be325d32aab3626f82a851786f996fc8e01bbae2b897259e23/perfectextractor-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}