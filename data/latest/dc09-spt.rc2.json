{
  "info": {
    "author": "Jacq. van Ovost",
    "author_email": "jacq.van.ovost@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dc09_spt (Secure Premises Transceiver a.k.a. dialler)\nA set of python classes to implement a dialler using the SIA-DC09 protocol set and conforming to the EN-50136-1 norm\n\nThe provided classes should be enough to implement an dialler (SPT, Secure Premises Transceiver, in EN-50136-1 lingo) with the following functions\n\n## What functions are implemented\nImplemented functions as for now are :\n* construction of messages according to the SIA-DC09 standard\n* construction of the payload events for SIA-DC09 according to the SIA-DC07 standard\n* construction of the payload events for SIA-DC07 according to the SIA-DC03 standard\n* construction of the payload events for SIA-DC07 according to the SIA-DC05 standard\n* crypt the SIA-DC09 messages using AES128 or AES256\n* poll main and optionally back-up transmission paths according to EN 50136-1 norm in a separate thread\n* use of primary paths for both the main and the back-up transmission paths resulting in a total of 4 paths per dialler\n* transmission of DC09 events efficiently in a separate thread and check the answer before deleting them from the queue\n* send timed routine messages\n* keep track of time offset of the various receivers.\n\n## Introduction\nAs a developer of security software i often heard the complaint that it would be hard to write a decent protocol implementation, especially when checksums and encryption are involved. While being one of the authors of a multi protocol IP receiver i did not have the feel that it would be too hard.\n\nThen, when a friend asked if i knew an example of the SIA-DC09 protocol in the Internet to be used as a reference for development, and i could not find any, combined with him mentioning python and my long standing wish to try that language too, it started itching.\nAnd the next weekend i started learning python (not that difficult after many years programming many languages) and made a set of classes to handle the DC09 messages.\n\nWhile testing these classes in the evenings of the next week, and getting fun further exploring the possibilities of python, i added this dc09_dialler class for testing the protocol, and noticed it could be interesting for others to use or read this software.\n\nBecause our company is not in the business of making transmitters, but specialized in making redundant multi protocol receivers and Alarm Monitoring Software, we decided to open source this set of classes.\n\nThe provided example (command line) application, creates two independant diallers with both their polling and routine messages and a simple way to send events. The hosts mentioned in the example are our test receivers. You are encouraged to try sending events to them.\n\nPlease remember i am an C/C++ programmer and this is my first venture into an python module. It is very likely that serious python programmers have many hints and remarks at my code. Please comment or correct. Learning python was the main reason to start this project.\n\n# Protocol basics\nThe SIA-DC09 protocol definition defines how to send optionally encrypted events to a receiver and perform the transmission path tests by sending poll messages.\nThe events sent in such an DC09 block is defined in the SIA-DC07 standard.\n\nThis DC07 standard is basically a description how an receiver can communicate with AMS (Alarm Monitoring Station) software and can transfer messages in various transmitter protocols.\n\nThis set of classes implements the SIA-DC03 (a.k.a. \"SIA\") and the SIA-DC05 (a.k.a. \"CID\") transmitter protocols. These two protocols make up for well over 90% of the used message formats in alarm messaging. In effect it should be possible to cover most use cases.\n\n## Dialler configuration\nIn general the configuration consists of defining account number, encryption key and communication paths.\n\n### instantiating a dialler\nAt instantiating a dialler, you specify the account number to be used for the envelope. That, together with the receiver and line number, defines the SPT in the protocol.\n\nexample : \n```\nspt = dc09_spt(\"0123\")\n```\n\n### define a communication path\nNext you define the communication paths to be used to reach the receiver and the encrytion key to be used in that path.\n\nexample : \n```\nspt.set_path(\"main\", \"primary\", \"ovost.eu\", 12128, \"0123\", key=None)\n```\n\nEach spt can handle 4 paths, labeled main.primary, main.secondary, back-up.primary and back-up.secondary.\nThe main path is for the main transmission path, where the fast poll message will be sent.\nMain.primary connects to the primary receiver, main.secondary to the secondary receiver.\nThe back-up path will only be used if the main path is unavailable except for the slow poll to show its availability.\n\n### set the polling frequency and messages for fail and restore\nPolling is defined in SIA-DC09 to show the communication path is available for transfer of events. The polling interval is, for Europe, defined in the EN-50136-1 norm.\nFor dual path the polling in the back-up path will take over the frequency of the main path in case it fails.\n\nexample :\n```\nspt.start_poll(85,890, ok_msg={'code':  'YK'},  fail_msg={'code':  'YS'})\n```\n\n### optionally set routine reports\nNormally it is preferred that the alarm panel, in this case the application using this set of classes sends the routine events to show it is functioning, but it can be delegated to the dc09_spt class by defining a routine report.\nI suggest to use a zone number of 99 in SIA and 999 in CID type messages to make it possible to recognize the SPT originated messages.\n\nexample:\n```\nspt.start_routine([{'interval':  7200,  'type': 'SIA-DCS',  'code':  'RP',  'zone':  99}])\n```\n\n## Send an event\nTo send an event you call the send_msg method with the type of message and an map with the content. In the message you can define a different account number if the receiver accepts that.\n\nexample:\n```\nspt.send_msg('SIA-DCS', {'code':'OP','zone': 14,  'time':  'now'})\nspt.send_msg('ADM-CID', {'account':  '124',  'code': 400, 'q': 1, 'zone': 14})\n```\n\n# Next steps\nThis is the first upload of these classes. In my tests they work, but some work is still planned for the near future:\n\n## To Do\n~~1. complete the package for upload to Pipi~~\n2. extend documentation and comments\n3. extend the dc03_msg class to handle all keys defined in the DC03 standard. (this subset should be enough for over 90% of the use cases though)\n4. extend the dc09_msg class with the extensions of the SIA-DC09 2013 version\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jvanovost/dc09_spt",
    "keywords": "DC09,SIA DC09,SPT,Alarm transmitter",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dc09-spt",
    "package_url": "https://pypi.org/project/dc09-spt/",
    "platform": "",
    "project_url": "https://pypi.org/project/dc09-spt/",
    "project_urls": {
      "Homepage": "https://github.com/jvanovost/dc09_spt"
    },
    "release_url": "https://pypi.org/project/dc09-spt/0.0.4/",
    "requires_dist": [
      "pycrypto"
    ],
    "requires_python": ">=3.6",
    "summary": "A dialler implementation using the SIA-DC09 protocol",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7878823,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "968e3dc810a3877de27441422ef4e846c2cb98abc3e7ce5b8b558180c4ed2775",
          "md5": "e681cbeb84d28ba8a31ed4aafcc7e545",
          "sha256": "c60be675087d883caf3cff520a62e8d997b15c5de06618d0e29a6447816291d9"
        },
        "downloads": -1,
        "filename": "dc09_spt-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e681cbeb84d28ba8a31ed4aafcc7e545",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23439,
        "upload_time": "2020-07-11T11:34:06",
        "upload_time_iso_8601": "2020-07-11T11:34:06.496464Z",
        "url": "https://files.pythonhosted.org/packages/96/8e/3dc810a3877de27441422ef4e846c2cb98abc3e7ce5b8b558180c4ed2775/dc09_spt-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5285e2ce79bb05de6ae0b17239629bf308c7977aad182ec4f21c81d3ba4f11f8",
          "md5": "531540b9a23df217bc090ccf39ff916b",
          "sha256": "e9153859d3c3542666cebb117030ae924d3de3f9343bfc2aae0aeedbcc45a80d"
        },
        "downloads": -1,
        "filename": "dc09_spt-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "531540b9a23df217bc090ccf39ff916b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17352,
        "upload_time": "2020-07-11T11:34:09",
        "upload_time_iso_8601": "2020-07-11T11:34:09.790487Z",
        "url": "https://files.pythonhosted.org/packages/52/85/e2ce79bb05de6ae0b17239629bf308c7977aad182ec4f21c81d3ba4f11f8/dc09_spt-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50bae41023f035a4df3324f1a09830072eb79509da8f67c4ca5f972ad4e48ffb",
          "md5": "4983ee49453ec9307e1d657985809bb2",
          "sha256": "c2f156cf2ba118c614e5e751324753f31953e92112ac9e3649e0b093635a9304"
        },
        "downloads": -1,
        "filename": "dc09_spt-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4983ee49453ec9307e1d657985809bb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24067,
        "upload_time": "2020-08-04T08:36:55",
        "upload_time_iso_8601": "2020-08-04T08:36:55.694778Z",
        "url": "https://files.pythonhosted.org/packages/50/ba/e41023f035a4df3324f1a09830072eb79509da8f67c4ca5f972ad4e48ffb/dc09_spt-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6742ee6034bf513fafc9a266baecda74d6e32f7e6df7a7539bff8a45a45c30e4",
          "md5": "9078e0e26ee627f2866e2e0a92a00700",
          "sha256": "441561b7e08d4bd8f2eecb24e0c0c4407a7e1ae5591c1be21ae5eac1d44764f0"
        },
        "downloads": -1,
        "filename": "dc09_spt-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9078e0e26ee627f2866e2e0a92a00700",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18006,
        "upload_time": "2020-08-04T08:37:00",
        "upload_time_iso_8601": "2020-08-04T08:37:00.986171Z",
        "url": "https://files.pythonhosted.org/packages/67/42/ee6034bf513fafc9a266baecda74d6e32f7e6df7a7539bff8a45a45c30e4/dc09_spt-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50bae41023f035a4df3324f1a09830072eb79509da8f67c4ca5f972ad4e48ffb",
        "md5": "4983ee49453ec9307e1d657985809bb2",
        "sha256": "c2f156cf2ba118c614e5e751324753f31953e92112ac9e3649e0b093635a9304"
      },
      "downloads": -1,
      "filename": "dc09_spt-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4983ee49453ec9307e1d657985809bb2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24067,
      "upload_time": "2020-08-04T08:36:55",
      "upload_time_iso_8601": "2020-08-04T08:36:55.694778Z",
      "url": "https://files.pythonhosted.org/packages/50/ba/e41023f035a4df3324f1a09830072eb79509da8f67c4ca5f972ad4e48ffb/dc09_spt-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6742ee6034bf513fafc9a266baecda74d6e32f7e6df7a7539bff8a45a45c30e4",
        "md5": "9078e0e26ee627f2866e2e0a92a00700",
        "sha256": "441561b7e08d4bd8f2eecb24e0c0c4407a7e1ae5591c1be21ae5eac1d44764f0"
      },
      "downloads": -1,
      "filename": "dc09_spt-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9078e0e26ee627f2866e2e0a92a00700",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18006,
      "upload_time": "2020-08-04T08:37:00",
      "upload_time_iso_8601": "2020-08-04T08:37:00.986171Z",
      "url": "https://files.pythonhosted.org/packages/67/42/ee6034bf513fafc9a266baecda74d6e32f7e6df7a7539bff8a45a45c30e4/dc09_spt-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}