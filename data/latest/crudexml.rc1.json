{
  "info": {
    "author": "Colin ML Burnett",
    "author_email": "cmlburnett@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.4"
    ],
    "description": "crudexml -- Crude XML DOM module\r\n\r\nSimple and crude write-only XML DOM implementation.\r\nIt does not read XML data, only produces XML text from the node objects provided here.\r\nAttributes are supported; namespaces are not.\r\nFinally, it is possible to get a \"pretty\" output using the OuterXMLPretty getter property.\r\n\r\n_node is a base class with most of the functionality, with node being the \"general\" node type and tnode for text nodes.\r\nThe intent is that these nodes have either node children or one tnode child.\r\nThis keeps things simpler.\r\nAlso, unlike Real DOM Implementations, the text node is a named node with text underneath it.\r\n\r\nExample use:\r\n\r\n\tfrom crudexml import node, tnode\r\n\r\n\troot = node('dvd', numtitles=7, parser=\"pydvdread %s\"%1.0)\r\n\troot.AddChild( tnode('device', \"/dev/sr0\") )\r\n\troot.AddChild( tnode('name', \"BLOOD_DIAMOND\", fancy=\"Blood Diamond\") )\r\n\troot.AddChild( tnode('vmg_id', \"DVDVIDEO-VMG\") )\r\n\troot.AddChild( tnode('provider_id', \"WARNER_HOME_VIDEO\") )\r\n\ttitles = root.AddChild( node('titles') )\r\n\r\nAttributes are passed as named keywords to node() and tnode(), and can be accessed by using [...] on node nbjects.\r\nnode.AddChild() returns the supplied node as with @titles above.\r\nThe OuterXMLPretty for the above produces:\r\n\r\n\t<?xml version=\"1.0\" ?>\r\n\t<dvd numtitles=\"7\" parser=\"pydvdread 1.0\">\r\n\t\t<device>/dev/sr0</device>\r\n\t\t<name fancy=\"Blood Diamond\">BLOOD_DIAMOND</name>\r\n\t\t<vmg_id>DVDVIDEO-VMG</vmg_id>\r\n\t\t<provider_id>WARNER_HOME_VIDEO</provider_id>\r\n\t\t<titles/>\r\n\t</dvd>\r\n\r\nAdditionally, the DOCTYPE is supported.\r\n\r\n\tfrom crudexml import node, tnode, dnode, docroot\r\n\r\n\td = docroot()\r\n\td.AddChild( dnode('foo', 'bar.dtd') )\r\n\r\n\troot = d.AddChild( node('dvd', numtitles=7, parser=\"pydvdread %s\"%1.0) )\r\n\troot.AddChild( tnode('device', \"/dev/sr0\") )\r\n\troot.AddChild( tnode('name', \"BLOOD_DIAMOND\", fancy=\"Blood Diamond\") )\r\n\troot.AddChild( tnode('vmg_id', \"DVDVIDEO-VMG\") )\r\n\troot.AddChild( tnode('provider_id', \"WARNER_HOME_VIDEO\") )\r\n\ttitles = root.AddChild( node('titles') )\r\n\r\nAnd the XML:\r\n\r\n\t<?xml version=\"1.0\" ?>\r\n\t<!DOCTYPE foo\r\n\t  SYSTEM 'bar.dtd'>\r\n\t<dvd numtitles=\"7\" parser=\"pydvdread 1.0\">\r\n\t\t<device>/dev/sr0</device>\r\n\t\t<name fancy=\"Blood Diamond\">BLOOD_DIAMOND</name>\r\n\t\t<vmg_id>DVDVIDEO-VMG</vmg_id>\r\n\t\t<provider_id>WARNER_HOME_VIDEO</provider_id>\r\n\t\t<titles/>\r\n\t</dvd>\r\n\r\nThe docroot() produces no XML for itself (i.e., OuterXML == InnerXML) and why the DOCTYPE and <dvd>...</dvd> are shown at the \"root\" level.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crudexml",
    "package_url": "https://pypi.org/project/crudexml/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/crudexml/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/crudexml/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python module that implements a crude XML DOM",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1891483,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a33b270e6b0a6f9ab8fd12f1cd062789165691863bbef1b17bcd15c0fd9f9a8",
          "md5": "f44e0d433f7b905ffc9d6c283aecbb5c",
          "sha256": "0046e8ba36e2d7539f5e647119dcc8e877ae1b47ccba39aa3fc274eeadff16c2"
        },
        "downloads": -1,
        "filename": "crudexml-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f44e0d433f7b905ffc9d6c283aecbb5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3232,
        "upload_time": "2016-01-06T16:42:11",
        "upload_time_iso_8601": "2016-01-06T16:42:11.923506Z",
        "url": "https://files.pythonhosted.org/packages/3a/33/b270e6b0a6f9ab8fd12f1cd062789165691863bbef1b17bcd15c0fd9f9a8/crudexml-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a33b270e6b0a6f9ab8fd12f1cd062789165691863bbef1b17bcd15c0fd9f9a8",
        "md5": "f44e0d433f7b905ffc9d6c283aecbb5c",
        "sha256": "0046e8ba36e2d7539f5e647119dcc8e877ae1b47ccba39aa3fc274eeadff16c2"
      },
      "downloads": -1,
      "filename": "crudexml-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f44e0d433f7b905ffc9d6c283aecbb5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3232,
      "upload_time": "2016-01-06T16:42:11",
      "upload_time_iso_8601": "2016-01-06T16:42:11.923506Z",
      "url": "https://files.pythonhosted.org/packages/3a/33/b270e6b0a6f9ab8fd12f1cd062789165691863bbef1b17bcd15c0fd9f9a8/crudexml-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}