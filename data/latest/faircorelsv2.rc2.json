{
  "info": {
    "author": "Julien Ferry, Ulrich Aivodji, Sebastien Gambs, Marie-Jose Huguet, Mohamed Siala",
    "author_email": "julienferry12@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: C++"
    ],
    "description": "Welcome to FairCorelsV2, a Python library for learning fair and interpretable OPTIMAL models using the Certifiably Optimal RulE ListS (CORELS) algorithm! \n\nFairCORELSV2 uses Python, Numpy, GMP, and a C++ compiler.\nIt leverages CP/MILP solvers (either Mistral or CPLEX) to efficiently prune the search space, leveraging jointly the objective function and the fairness constraint.\nGMP (GNU Multiple Precision library) is not required, but it is *highly recommended*, as it improves performance. \nIf it is not installed, fairCORELS will run slower.\n\nThe `FairCORELSV2` module includes one classifier method : `FairCorelsClassifierV2`.\nThe `FairCorelsClassifierV2` class implements the fairCORELSV2 method. Details on the methods used within FairCORELSV2 are provided within our full paper accepted at the CPAIOR 2022 conference ([preprint](https://homepages.laas.fr/jferry/drupal/sites/homepages.laas.fr.jferry/files/u202/CPAIOR2022_paper.pdf)).\nIn a nutshell, `FairCORELSV2` brings several improvements to the original [`FairCORELS`](https://github.com/ferryjul/fairCORELS) algorithm: a novel pruning approach leveraging Mixed Integer Linear Programming, and a new prefix permutation map designed to provide optimality guarantees when learning fair rule lists.\n\nThe currently supported fairness notions are : statistical parity, predictive parity, predictive equality, equal opportunity, equalized odds, and conditional use accuracy equality.\n\n# Detail of the parameters for FairCorelsClassifierV2:\n\n## Constructor arguments :\n\n### Exploration-related arguments\n\n* `c` : float, optional (default=0.01)\n    Regularization parameter. Higher values penalize longer rulelists.\n\n* `n_iter` : int, optional (default=1000)\n    Maximum number of nodes (rulelists) to search before exiting.\n\n* `map_type` : str, optional (default=\"prefix\")\n    The type of prefix map to use. Supported maps are \"none\" for no map,\n    \"prefix\" for a map that uses rule prefixes for keys, \"captured\" for\n    a map with a prefix's captured vector as keys.\n    **NOTE that \"prefix\" map corresponds to the implementation proposed in our paper at the CPAIOR 2022 conference.\n    Indeed, the original CORELS' prefix permutation map failed to guarantee optimality when learning fair rule lists.**\n\n* `policy` : str, optional (default=\"bfs\")\n    The search policy for traversing the tree (i.e. the criterion with which\n    to order nodes in the queue). Supported criteria are \"bfs\", for breadth-first\n    search; \"curious\", which attempts to find the most promising node; \n    \"lower_bound\" which is the objective function evaluated with that rulelist\n    minus the default prediction error; \"objective\" for the objective function\n    evaluated at that rulelist; and \"dfs\" for depth-first search.\n    **WARNING if filteringMode is 4 or 5 (order priority queue by the MILP pruning objective) then this parameter is unused!**\n\n* `verbosity` : list, optional (default=[\"rulelist\"])\n    The verbosity levels required. A list of strings, it can contain any\n    subset of [\"rulelist\", \"rule\", \"label\", \"minor\", \"samples\", \"progress\", \"mine\", \"pruning\", \"loud\"].\n\n    - \"rulelist\" prints the generated rulelist at the end.\n    - \"rule\" prints a summary of each rule generated.\n    - \"label\" prints a summary of the class labels.\n    - \"minor\" prints a summary of the minority bound.\n    - \"samples\" produces a complete dump of the rules, label, and/or minor data. You must also provide at least one of \"rule\", \"label\", or \"minor\" to specify which data you want to dump, or \"loud\" for all data. The \"samples\" option often spits out a lot of output.\n    - \"progress\" prints periodic messages as faircorels runs.\n    - \"mine\" prints debug information while mining rules, including each rule as it is generated.\n    - \"pruning\" prints information about the pruning strategy and statistics. It also prints the total CPU time while ending exploration, and the exploration status.\n    - \"loud\" is the equivalent of [\"progress\", \"label\", \"rule\", \"mine\", \"minor\"].\n\n* `ablation` : int, optional (default=0)\n    Specifies addition parameters for the bounds used while searching. Accepted\n    values are 0 (all bounds), 1 (no antecedent support bound), and 2 (no\n    lookahead bound).\n\n* `max_card` : int, optional (default=2)\n    Maximum cardinality allowed when mining rules. Can be any value greater than\n    or equal to 1. For instance, a value of 2 would only allow rules that combine\n    at most two features in their antecedents.\n\n* `min_support` : float, optional (default=0.01)\n    The fraction of samples that a rule must capture in order to be used. 1 minus\n    this value is also the maximum fraction of samples a rule can capture.\n    Can be any value between 0.0 and 0.5.\n\n* `beta` : float, optional (default=0.0)\n    The weight the unfairness in the objective function\n\n* `mode` : int optional (default=3)\n    Method used for the multi-ojective framework\n    1: weigted sum, 2: maximum fairness, 3: epsilon-constraint, 4: maximum accuracy\n\n* `bfs_mode` : int optinal (default=0)\n    BFS strategy\n    0: original CORELS, 1:FIFO, 2:objective_aware, 3:lower_bound, 4:random\n\n* `random_state` : int optional (default=42)\n    Random seed for randomized search\n\n* `fileName` : str optional (default=\"faircorels_log_out\")\n    Name of csv file to save exploration progression\n    Saves a summary of the performed exploration (each local best solution, the time and #nodes explored to reach it, etc.) along with the final status.\n\n* `kbest` : int optional (default=1)\n    Randomly use one of the k best objectives\n\n### Fairness-related arguments\n\n* `fairness` : int optional (default=1)\n    The type of fairness metric used. \n    1 : statistical parity, 2 : predictive parity, 3 : predictive equality, 4 : equal opportunity, 5 : equalized odds, 6 : conditional use accuracy equality\n\n* `epsilon` : float optional (default=0.05)\n    max acceptable unfairness (fairness violation tolerence)\n\n* `maj_pos` : int optional (default=-1)\n    The position of the rule that defined the majority group\n    If not specified, all individuals not in minority group are in majority group\n    Not used if maj_vect is used\n\n* `min_pos` : int optional (default=2)\n    The position of the rule that defined the minority group\n    Not used if min_vect is used\n\n* `maj_vect` : int list optional (default=[-1])\n    List of integers in {0,1} indicating if instances belong to the majority group\n    If not specified, this vector is computed using maj_pos\n\n* ` min_vect` : int list optional (default=[-1])\n    List of integers in {0,1} indicating if instances belong to the minority group\n    If not specified, this vector is computed using min_pos\n\n### Enhanced pruning arguments\n\n* `filteringMode`: int optional (default=0)\n    Defines the mode for the performed pruning (following the method introduced in our CPAIOR 2022 full paper).\n    - 0: no filtering\n    - 1: SAT filtering, Lazy, using the Mistral solver (C++) (embedded within FairCORELS)\n    - 2: SAT filtering, Eager, using the Mistral solver (C++) (embedded within FairCORELS)\n    - 3: SAT filtering, both Lazy and Eager, using the Mistral solver (C++) (embedded within FairCORELS)\n    - 4: OPT filtering & Guiding (Eager) using CPLEX (C++) (need to compile with CPLEX - see the installation instructions)\n        priority queue is ordered by BFS and ties are broken by the MILP objective\n        WARNING policy parameter is not used in this case (as priority queue ordering is defined here)\n    - 5: OPT filtering & Guiding (Eager) using CPLEX (C++) (need to compile with CPLEX - see the installation instructions)\n        priority queue is ordered by best-first search guided by the MILP objective\n        WARNING policy parameter is not used in this case (as priority queue ordering is defined here)\n    - 6: SAT filtering, Lazy, using the CPLEX solver (C++) (need to compile with CPLEX - see the installation instructions)\n    - 7: SAT filtering, Eager, using the CPLEX solver (C++) (need to compile with CPLEX - see the installation instructions)\n    - 8: SAT filtering, both Lazy and Eager, using the CPLEX solver (C++) (need to compile with CPLEX - see the installation instructions)\n\n    Note that the CP/MILP filtering is implemented for SP (metric 1), PE (metric 3), EO (metric 4) and EOdds (metric 5).\n    Also note that the enhanced pruning has to be used with mode 3 (epsilon-constraint)\n\n* `upper_bound_filtering`: int optional (default=0)\n        controls the way upper bound over well classified examples (for advanced pruning) is computed\n    - 0 to use simple upper bound computation (use if dataset does not contain inconsistencies)\n    - 1 to perform vector operations leveraging inconsistent examples (a little bit slower, but tight - hence may improve the pruning efficiency)\n        \n    Note that when using the MILP to guide the exploration (if filteringMode is 4 or 5), it is strongly advised to set upper_bound_filtering to 1.\n\n* `pruning_memoisation`: int optional (default=1)\n    defines the type of memoisation used to cache the results of the previous calls to the solver\n    note that due to symmetries in the prefix tree, this option can save many calls to the solver\n    - 0 means no memoisation at all\n    - 1 means simple memoisation (saves solver results for the given parameters)\n    - 2 means advanced memoisation (saves more information and avoids more calls to solver, but memoisation mechanism has larger overhead)\n\n## Methods :\n\n### .fit(self, X, y, features=[], prediction_name=\"prediction\", max_evals=1000000000, time_limit = None, memory_limit=None):\n\nMethod for training the classifier.\n\n* `X` : array-like, shape = [n_samples, n_features]\n    The training input samples. All features must be binary, and the matrix is internally converted to dtype=np.uint8.\n\n* `y` : array-line, shape = [n_samples]\n    The target values for the training input. Must be binary.\n        \n* `features` : list, optional(default=[])\n    A list of strings of length n_features. Specifies the names of each of the features. If an empty list is provided, the feature names are set to the default of [\"feature1\", \"feature2\"... ].\n\n* `prediction_name` : string, optional(default=\"prediction\")\n    The name of the feature that is being predicted.\n\n* `max_evals` : int, maximum number of calls to evaluate_children \n    (ie maximum number of nodes explored in the prefix tree)\n\n* `time_limit` : int, maximum number of seconds allowed for the model (default None: no limit)\n    building\n    Note that this specifies the CPU time and NOT THE WALL-CLOCK TIME\n\n* `memory_limit`: int, maximum memory use (in MB) (default None: no limit)\n\n### .predict(X):\nMethod for predicting using the trained classifier.\n\n* `X` : array-like, shape = [n_samples, n_features]\n    The training input samples. All features must be binary, and the matrix is internally converted to dtype=np.uint8. The features must be the same as those of the data used to train the model.\n\n=> Returns : `p` : array of shape = [n_samples] -> The classifications of the input samples.\n\n### .predict_with_scores(X):\nMethod for predicting using the trained classifier.\n\n* `X` : array-like, shape = [n_samples, n_features]\n    The training input samples. All features must be binary, and the matrix is internally converted to dtype=np.uint8. The features must be the same as those of the data used to train the model.\n\n=> Returns : `p` : array of shape = [[n_samples],[n_samples]].\n    The first array contains the classifications of the input samples.\n    The second array contains the associated confidence scores.\n\n### .score(X, y):\nMethod that scores the algorithm on the input samples X with the labels y. Alternatively, score the predictions X against the labels y (where X has been generated by `predict` or something similar).\n\n* `X` : array-like, shape = [n_samples, n_features] OR shape = [n_samples]\n    The input samples, or the sample predictions. All features must be binary.\n        \n* `y` : array-like, shape = [n_samples]\n    The input labels. All labels must be binary.\n\n=> Returns : `a` : float\n    The accuracy, from 0.0 to 1.0, of the rulelist predictions\n\n### .get_params():\nMethod to get a list of all the model's parameters.\n\n=> Returns : `params` : dict\nDictionary of all parameters, with the names of the parameters as the keys\n\n### .set_params(params):\nMethod to set some of the model's parameters.\n\n* `params` :  Set of model parameters. Takes an arbitrary number of keyword parameters, all of which must be valid parameter names (i.e. must be included in those returned by get_params).\n\n### .save(fname):\nMethod to save the model to a file, using python's pickle module.\n\n* `fname` : string\n    File name to store the model in\n\n### .load(fname):\nMethod to load a model from a file, using python's pickle module.\n\n* `fname` : string\n    File name to load the model from\n        \n### .rl(set_val=None):\nMethod to return or set the learned rulelist\n        \n* `set_val` : RuleList, optional\n    Rulelist to set the model to\n\n=> Returns : `rl` : obj\n    The model's rulelist\n\n### .__str__():\nMethod to get a string representation of the rule list\n\n=> Returns : `rl` : str\n    The rule list\n\n### .__repr__():\nSame behavior as the previous one.\n\n### .explain(anEx):\nMethod to explain a prediction (by providing the matching rule).\n\n* `anEx` : array-like, shape = [n_features] \n    The input sample\n\n=> Returns : list `l` where\n    `l[0]` is the instance's prediction\n    `l[1]` is the implicant(s) that led to that decision\n    (both are strings - user friendly)\n\n### .explain_api(anEx):\nMethod to explain a prediction (by providing the matching rule) (shorter output).\n\n* `anEx` : array-like, shape = [n_features] \n    The input sample\n\n=> Returns : list `l` where\n    `l[0]` is the instance's prediction\n    `l[1]` is the implicant(s) that led to that decision\n    (both are API-oriented - easy to use by a program)\n   \n### .explain_long(anEx):\nMethod to explain a prediction (by providing the matching rule and all the previous unmatched implicants).\n\n* `anEx` : array-like, shape = [n_features] \n    The input sample\n\n=> Returns : list `l` where\n    `l[0]` is the instance's prediction\n    `l[1]` is the implicant(s) that led to that decision\n    (both are strings - user friendly)\n\n### .explain_long_api(anEx):\nMethod to explain a prediction (by providing the matching rule and all the previous unmatched implicants) (shorter output).\n\n* `anEx` : array-like, shape = [n_features] \n    The input sample\n\n=> Returns : list `l` where\n    `l[0]` is the instance's prediction\n    `l[1]` is the implicant(s) that led to that decision\n    (both are API-oriented - easy to use by a program)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ferryjul/fairCORELSV2",
    "keywords": "",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "faircorelsv2",
    "package_url": "https://pypi.org/project/faircorelsv2/",
    "platform": null,
    "project_url": "https://pypi.org/project/faircorelsv2/",
    "project_urls": {
      "Homepage": "https://github.com/ferryjul/fairCORELSV2"
    },
    "release_url": "https://pypi.org/project/faircorelsv2/1.1/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "FairCORELSV2, an enhanced version of the FairCORELS algorithm to build fair optimal rule lists",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13171042,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30ed909db9385c4e8a54d0a5151ec7f36d7ae5393771d1ad8877a25d358d97fa",
          "md5": "a38380546fd5b2427cb2cff81f5fb9d6",
          "sha256": "d01d37bdd18c19d86ce59b460d62a91f0a15b99ad3f3150524d2c253a2eb2d18"
        },
        "downloads": -1,
        "filename": "faircorelsv2-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a38380546fd5b2427cb2cff81f5fb9d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 502290,
        "upload_time": "2022-02-16T16:38:08",
        "upload_time_iso_8601": "2022-02-16T16:38:08.628893Z",
        "url": "https://files.pythonhosted.org/packages/30/ed/909db9385c4e8a54d0a5151ec7f36d7ae5393771d1ad8877a25d358d97fa/faircorelsv2-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e0ae0dce2d42a6d6cd4d0634ff77bac4aa58e50d2e322e9a781c97c561f45f1",
          "md5": "92d4129d1ebfa6a443baba7d103460f9",
          "sha256": "1fca1628b6b4e2640e7a2c80b255db598a3f83f545e0303458d21d807f9c036c"
        },
        "downloads": -1,
        "filename": "faircorelsv2-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "92d4129d1ebfa6a443baba7d103460f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 502190,
        "upload_time": "2022-03-14T15:02:15",
        "upload_time_iso_8601": "2022-03-14T15:02:15.410987Z",
        "url": "https://files.pythonhosted.org/packages/4e/0a/e0dce2d42a6d6cd4d0634ff77bac4aa58e50d2e322e9a781c97c561f45f1/faircorelsv2-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e0ae0dce2d42a6d6cd4d0634ff77bac4aa58e50d2e322e9a781c97c561f45f1",
        "md5": "92d4129d1ebfa6a443baba7d103460f9",
        "sha256": "1fca1628b6b4e2640e7a2c80b255db598a3f83f545e0303458d21d807f9c036c"
      },
      "downloads": -1,
      "filename": "faircorelsv2-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "92d4129d1ebfa6a443baba7d103460f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 502190,
      "upload_time": "2022-03-14T15:02:15",
      "upload_time_iso_8601": "2022-03-14T15:02:15.410987Z",
      "url": "https://files.pythonhosted.org/packages/4e/0a/e0dce2d42a6d6cd4d0634ff77bac4aa58e50d2e322e9a781c97c561f45f1/faircorelsv2-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}