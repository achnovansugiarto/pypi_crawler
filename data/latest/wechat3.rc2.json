{
  "info": {
    "author": "jeff kit",
    "author_email": "bbmyth@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# 微信公众号Python-SDK\n\n![](https://img.shields.io/pypi/pyversions/wechat3)\n\n作者: [@jeff_kit](http://twitter.com/jeff_kit)\n\n本SDK支持微信公众号以及企业号的上行消息及OAuth接口。本文档及SDK假设使用者已经具备微信公众号开发的基础知识，及有能力通过微信公众号、企业号的文档来查找相关的接口详情。\n\n\n## 1. 安装\n\n### pip\n\n\tpip install wechat3\n\n### 源码安装\n\n\tgit clone https://github.com/tclh123/wechat.git\n\tcd wechat\n\tpython setup.py install\n\n\n## 2. 用户上行消息处理框架\n\n对于微信用户在公众号内发送的上行消息，本sdk提供了一个微型处理框架，开发者只需继承wechat.official.WxApplication类, 实现各种消息对应的方法，然后把该类与自己熟悉的web框架结合起来使用即可。\n\nWxApplication内部会实现请求的合法性校验以及消息的分发等功能，还对上行消息对行了结构化，开发者把精力放到业务逻辑的编写即可。\n\nWxApplication类核心方法：\n\n### WxApplication.process(params, xml, token=None, app_id=None, aes_key=None)\n\nWxApplication的process函数，接受以下参数：\n\n- params, url参数字典，需要解析自微信回调的url的querystring。格式如：{'nonce': 1232, 'signature': 'xsdfsdfsd'}\n- xml, 微信回调时post的xml内容。\n- token, 公众号的上行token，可选，允许在子类配置。\n- app_id, 公众号应用id，可选，允许在子类配置。\n- aes_key, 公众号加密secret，可选，允许在子类配置。\n\nprocess最后返回一串文本(xml或echoStr)。\n\n\n#### 使用场景1：上行URL有效性验证\n\n在微信公众号的后台设置好URL及token等相关信息后，微信会通过GET的方式访问一次该URL，开发者在URL的响应程序里直接调用app.process(params, xml=None)即可返回echStr。\n\n\tqs = 'nonce=1221&signature=19selKDJF&timestamp=12312'\n\tquery = dict([q.split('=') for q in qs.split('&')])\n\tapp = YourApplication()\n\techo_str = app.process(query, xml=None)\n\t# 返回echo_str给微信即可\n\n\n#### 使用场景2：处理上行消息\n\n用户在微信公众号上发消息给公众号，微信服务器调用上行的URL，开发者需要对每次的的请求进行合法性校验及对消息进行处理，同样的，直接调用app.process方法就好。\n\n\tqs = 'nonce=1221&signature=19selKDJF&timestamp=12312'\n\tquery = dict([q.split('=') for q in qs.split('&')])\n\tbody = '<xml> ..... </xml>'\n\tapp = YourApplication()\n\tresult = app.process(query, xml=body)\n\t# 返回result给微信即可\n\n\n### WxApplication子类示例\n\n下面先看看一个WxApplication的示例代码，用于把用户上行的文本返还给用户：\n\n\tfrom wechat.official import WxApplication, WxTextResponse, WxMusic,\\\n\t\tWxMusicResponse\n\n\tclass WxApp(WxApplication):\n\n    \tSECRET_TOKEN = 'test_token'\n\t    WECHAT_APPID = 'wx1234556'\n\t    WECHAT_APPSECRET = 'sevcs0j'\n\n    \tdef on_text(self, text):\n        \treturn WxTextResponse(text.Content, text)\n\n\n需要配置几个类参数，几个参数均可在公众号管理后台的开发者相关页面找到，前三个参数如果不配置，则需要在调用process方法时传入。\n\n- SECRET_TOKEN: 微信公众号回调的TOKEN\n- APP_ID: 微信公众号的应用ID\n- ENCODING_AES_KEY: (可选)，加密用的SECRET，如您的公众号未采取加密传输，不需填。\n- UNSUPPORT_TXT:(可选)，收到某种不支持类型的消息时自动响应给用户的文本消息。\n- WELCOME_TXT:(可选), 新关注时默认响应的文本消息。\n\n然后，您需要逐一实现WxApplication的各个on_xxxx函数。不同类型的上行消息及事件均有对应的on_xxx函数\n\n### on_xxx函数\n\n\n所有的on_xxx函数列举如下：\n\n- on_text, 响应用户文本\n- on_link，响应用户上行的链接\n- on_image，响应用户上行图片\n- on_voice，响应用户上行语音\n- on_video，响应用户上行视频\n- on_location，响应用户上行地理位置\n- on_subscribe，响应用户关注事件\n- on_unsubscribe，响应用户取消关注事件\n- on_click，响应用户点击自定义菜单事件\n- on_scan，响应用户扫描二维码事件\n- on_location_update，响应用户地理位置变更事件\n- on_view，响应用户点击自定义菜单访问网页事件\n- on_scancode_push\n- on_scancode_waitmsg\n- on_pic_sysphoto\n- on_pic_photo_or_album\n- on_pic_weixin\n- on_location_select\n\non_xxx函数的定义如下：\n\n\tdef on_xxx(self, req):\n\t\treturn WxResponse()\n\non_xxx函数，接受一个WxRequest参数req，返回一个WxResponse的子类实例。\n\n#### WxRequest\n\nreq是一个代表用户上行消息的WxRequest实例。其属性与消息的XML属性一一对应，不同的消息有几个相同的属性：\n\n- ToUserName\n- FromUserName\n- CreateTime\n- MsgType\n- MsgId\n\n不同的消息类型对应有各自的属性，属性名与消息的xml标签名保一致。如MsgType为\u0005text的的req，有一个Content属怀，而MsgType为image的req，则有PicUrl及MediaId两个属性。更多消息详情请查看微信公众号[官方文档](http://mp.weixin.qq.com/wiki/10/79502792eef98d6e0c6e1739da387346.html)。\n\n#### WxResponse\n\non_xxx函数需要返回一个WxResponse的子类实例。WxResponse的子类及其构造的方式有：\n\n##### WxTextResponse, 文本消息\n\n \tWxTextResponse(\"hello\", req)\n\n##### WxImageResponse, 图片消息\n\n\tWxImageResponse(WxImage(MediaId='xxyy'),req)\n\n##### WxVoiceResponse, 语音消息\n\n\tWxVoiceResponse(WxVoice(MediaId='xxyy'),req)\n\n##### WxVideoResponse, 视频消息\n\n\tWxVideoResponse(WxVideo(MediaId='xxyy', Title='video', Description='test'),req)\n\n##### WxMusicResponse, 音乐消息\n\n\tWxMusicResponse(WxMusic(Title='hey jude', \n\t\tDescription='dont make it bad', \n\t\tPicUrl='http://heyjude.com/logo.png', \n\t\tUrl='http://heyjude.com/mucis.mp3'), req)\n\n##### WxNewsResponse, 图文消息\n\n\tWxNewsResponse(WxArticle(Title='test news', \n\t\tDescription='this is a test', \n\t\tPicurl='http://smpic.com/pic.jpg', \n\t\tUrl='http://github.com/jeffkit'), req)\n##### WxEmptyResponse, 无响应\n\n\tWxEmptyResponse(req)\n\n### 在Django中使用WxApplication\n\n\n下面以Django为例说明，实现一个微信回调的功能(view)，利用上面示例代码中的WxApp：\n\n\tfrom django.http import HttpResponse\n\n\tdef wechat(request):\n\t\tapp = WxApp()\n\t\tresult = app.process(request.GET, request.body)\n\t\treturn HttpResponse(result)\n\n配置 urls.py:\n\n\turlpatterns = patterns('',\n    \turl(r'^wechat/', 'myapp.views.wechat'),\n\t)\n\n\n### 在Flask中使用WxApplication\n\tfrom flask import request\n\tfrom flask import Flask\n\tapp = Flask(__name__)\n\n\t@app.route('/wechat')\n\tdef wechat():\n\t\tapp = WxApp()\n\t\treturn app.process(request.args, request.data)\n\n\nOK.就这么多，WxApplication本身与web框架无关，不管你使用哪个Framework都可以享受到它带来的便利。\n\n### 什么？你不喜欢写WxApplication的子类？！\n\n好吧，其实，你可以在任何地方写on_xxx的响应函数。然后在使用之前，告诉一个WxApplication你要用哪个函数来响应对应的事件就好。以Django为例：\n\n\t# 在任何地方写你自己的消息处理函数。\n\t# @any_decorator   # 添加任何装饰器。\n\tdef my_text_handler(req):\n\t\treturn WxTextResponse(req.Content, req)\n\n\t# 在web的程序里这样使用：\n\tdef wechat_view(request):\n\t\tapp = WxApplication()   # 实例化基类就好。\n\t\tapp.handlers = {'text': my_text_handler}  # 设置你自己的处理器\n\t\tresult = app.process(request.GET, request.body, \n\t\t\ttoken='xxxx', app_id='xxxx', aes_key='xxxx')\n\t\treturn HttpResponse(result)\n\n\n嗯，可以自定义消息的handlers，而如果要针对事件自定义handlers的话，要修改app.event_handlers，数据的格式是一样的。具体的消息和事件类型的key，就直接看看源码得了。卡卡。\n\n\n## 3. OAuth API\n\nOAuth API目前仅支持下列常用接口：\n\n- 发送消息\n- 用户管理\n- 自定义菜单管理\n- 多媒体上传下载\n- 二维码\n\n其他接口拟于未来的版本中支持，同时欢迎大家来增补。\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tclh123/wechat",
    "keywords": "wechat,SDK",
    "license": "GPLv3",
    "maintainer": "Harry Lee",
    "maintainer_email": "tclh123@gmail.com",
    "name": "wechat3",
    "package_url": "https://pypi.org/project/wechat3/",
    "platform": "",
    "project_url": "https://pypi.org/project/wechat3/",
    "project_urls": {
      "Homepage": "https://github.com/tclh123/wechat"
    },
    "release_url": "https://pypi.org/project/wechat3/0.5.0/",
    "requires_dist": [
      "requests",
      "cryptography"
    ],
    "requires_python": "",
    "summary": "Wechat Python SDK",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5587926,
  "releases": {
    "0.4.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32bf63868be7413b732cfe3bdd6c79db4b2237accc75d8565329a9dc4c38f232",
          "md5": "93210cdccb9944d539e1d5266a7671e1",
          "sha256": "ac4247b45c1b62b31dc5422c0480693653a5e911b2886b581f66bc06f0d9e1a2"
        },
        "downloads": -1,
        "filename": "wechat3-0.4.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93210cdccb9944d539e1d5266a7671e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28788,
        "upload_time": "2019-07-26T07:15:07",
        "upload_time_iso_8601": "2019-07-26T07:15:07.981515Z",
        "url": "https://files.pythonhosted.org/packages/32/bf/63868be7413b732cfe3bdd6c79db4b2237accc75d8565329a9dc4c38f232/wechat3-0.4.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "554d1f558e3f530163193c81754df3db7e4c454394f0faf915b019d8b50b9828",
          "md5": "bc87095b6f4bf4bced80e09dd4f78feb",
          "sha256": "aca6cac014f8af1339630f2952939fbe43d9042ab2c41ebcea552493baea1554"
        },
        "downloads": -1,
        "filename": "wechat3-0.4.17.tar.gz",
        "has_sig": false,
        "md5_digest": "bc87095b6f4bf4bced80e09dd4f78feb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15008,
        "upload_time": "2019-07-26T07:15:10",
        "upload_time_iso_8601": "2019-07-26T07:15:10.549334Z",
        "url": "https://files.pythonhosted.org/packages/55/4d/1f558e3f530163193c81754df3db7e4c454394f0faf915b019d8b50b9828/wechat3-0.4.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1193a6fe61b2b39549f50c756b1a9b5204c0445fb8834097fc6d34d7e3b8e92b",
          "md5": "f51cf4b2919574824059e664ffc607d5",
          "sha256": "962737d309982b3eec51c32a24290dee20e433b08c1bfe08b4e87a097bc541b2"
        },
        "downloads": -1,
        "filename": "wechat3-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f51cf4b2919574824059e664ffc607d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28767,
        "upload_time": "2019-07-26T09:03:35",
        "upload_time_iso_8601": "2019-07-26T09:03:35.039786Z",
        "url": "https://files.pythonhosted.org/packages/11/93/a6fe61b2b39549f50c756b1a9b5204c0445fb8834097fc6d34d7e3b8e92b/wechat3-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "790757541677995fa59d3db28a05ac201e5177b405db780f4c9c4a95310f4556",
          "md5": "aab3570057b751f37891d2b89be0d75b",
          "sha256": "0ebbbf0480ba3000c2899563f092701e4c81c85e6562e294a38787775a0131f7"
        },
        "downloads": -1,
        "filename": "wechat3-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aab3570057b751f37891d2b89be0d75b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15001,
        "upload_time": "2019-07-26T09:03:36",
        "upload_time_iso_8601": "2019-07-26T09:03:36.898727Z",
        "url": "https://files.pythonhosted.org/packages/79/07/57541677995fa59d3db28a05ac201e5177b405db780f4c9c4a95310f4556/wechat3-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1193a6fe61b2b39549f50c756b1a9b5204c0445fb8834097fc6d34d7e3b8e92b",
        "md5": "f51cf4b2919574824059e664ffc607d5",
        "sha256": "962737d309982b3eec51c32a24290dee20e433b08c1bfe08b4e87a097bc541b2"
      },
      "downloads": -1,
      "filename": "wechat3-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f51cf4b2919574824059e664ffc607d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28767,
      "upload_time": "2019-07-26T09:03:35",
      "upload_time_iso_8601": "2019-07-26T09:03:35.039786Z",
      "url": "https://files.pythonhosted.org/packages/11/93/a6fe61b2b39549f50c756b1a9b5204c0445fb8834097fc6d34d7e3b8e92b/wechat3-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "790757541677995fa59d3db28a05ac201e5177b405db780f4c9c4a95310f4556",
        "md5": "aab3570057b751f37891d2b89be0d75b",
        "sha256": "0ebbbf0480ba3000c2899563f092701e4c81c85e6562e294a38787775a0131f7"
      },
      "downloads": -1,
      "filename": "wechat3-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aab3570057b751f37891d2b89be0d75b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15001,
      "upload_time": "2019-07-26T09:03:36",
      "upload_time_iso_8601": "2019-07-26T09:03:36.898727Z",
      "url": "https://files.pythonhosted.org/packages/79/07/57541677995fa59d3db28a05ac201e5177b405db780f4c9c4a95310f4556/wechat3-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}