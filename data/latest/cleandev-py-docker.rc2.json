{
  "info": {
    "author": "Daniel Rodriguez Rodriguez",
    "author_email": "danielrodriguezrodriguez.pks@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# py-docker-shell\n\nCon esta librerias podras consultar el estado del de tu enjambre de docker de una forma facil y efectiva, \nse alimenta del propio [SDK docker en python](https://docker-py.readthedocs.io/en/stable/).\n\n\n## Quick Start\nPosee una clase `SummaryInfo` con tres potentes metodos para mostrar el estado de cada elementos.\n\n## Status Cluster\n\nPara el caso de la información sobre el cluster retorna en un diccionario los siguientes datos:  \n    - `total_nodes`: El numero de nodos del que se compone el cluster, aqui se cuenta aquellos nodos que estan \n                     en ejecución, apagados o con algun tipo de error.  \n    - `total_reades`: Represeta el número de nodos que está activo o `state=running`  \n    - `workers['total']`: Representa el número total de tipo de nodo worker que posee el cluster  \n    - `workers['ready']`: Representa el número total de workers que están activos  \n    - `managers['total']`: Representa el número total de tipo de nodo manager que posee el cluster  \n    - `managers['ready']`: Representa el número total de managers que están activos  \n    - `status`: Representa el estado del cluster `[OK|WARNING|KO]`, a continuación explicaremos que se considero\n                para evaluar dicho estado  \n### Nota\n\nUn cluster como bien sabemos es un grupo de máquinas que actuan como una sola con el fin de ocultar el hecho de ser\nvarias máquinas para obtener la ventaja de que gracias a sus mecanismos de cluster las maquinas individualmente puedan\nser tolerante a fallos ya que otra maquina del grupo se ocupara del trabajo de dicha máquina que sufre la falla.  \n\nSabiendo esta primisa en docker existen dos roles de maquinas diferentes `Managers y Workers` sin entrar mucho en detalle\nlos manager son los jefes del cluster y por ese motivo docker recomienda que un al menos existan 3 máquinas de este tipo.\n\nEn primer lugar cuando una maquina manager del nodo se cae dicha gestion que hacia dicha maquina ha de reorganizarce y\npara ellos se necesita como minimo otra maquina, ademas de esto existe un proceso interno en el cual,\nsiempre una máquina es la `Leader` y existe otra preparada para tomar el relevo para que esto ocurra internamente hay \nun proceso de votación que ha de ser impar y dado que 1 maquina no es valido ya que si se cae no hay reemplazo lo minimo\nfiable son 3 maquinas `manager`.\n\nLos workers suele ejecutar tareas. Existen tareas que unicamente se ejecutan en los workers por lo que logico pensar\nque de nada vale tener una única máquina de este tipo, por lo tanto consideramos que como minimo deben existir 2 para \ntomar el relevo.  \n\n### Status Cluster - OK\n\nSe entiende por un cluster saludable aquel que por razones antes mencionadas posee al menos 3 `Managers` y 2 `Workers`\ny todas las máquinas están en el estado de `ready`\n\n### Status Cluster - WARNING\n\nEn pocas palabras este estado significa que el cluster está comprometido que es diferente a estar inoperativo.  \nCuando el cluster deja de ser tolerante a fallos se considera `Comprometido - WARNING`\n\n---  \n\nEjemplos 1:  \nPara un cluster de `3 Manager y 2 Workers` si alguna de los dos tipos de máquinas cae el cluster \nseguira funcionando pero ya otro fallo puede compremeter el cluster.  \n\nSe nos cae un `Manager` y tendriamos `2 Manager y 2 Workers` en el caso de que fallara otro `Manager`\nel cluster pese a tener aun una maquina `Manager` seria par y no puede llegar a un conceso no se asignaria\nun lider y el cluster entra en estado inconsistente. No obstante podria caerse un nodo `Worker` y seguiria\nestando operativo pero debido a que no sabemos cual es la maquina que fallara levantamos la alerta.\n\nEjemplos 2:\nPara un cluster de `1 Manager y 1 Workers` automaticamente entra en estado de alerta ya que cualquier caida\nde alguna de las maquina el cluster estaría comprometido.\n\nEjemplos 3:\nPara un cluster mayores de `3 Manager y 2 Workers` desde el momento que el todas las maquinas no esten operativas\nentra en estado de alerta pese a que de no estar todas operativas puedan aun ser tolerante a fallos con el fin \nde revisarlas y dejarlas en estado optimo.\n\n### Status Cluster - ERROR\n\nCualquier cluster que no tenga al menos un tipo de cada máquina directamente lo catalogamos como \ninconsistente.\n\n```python\nimport json\nfrom py_docker import SummaryInfo\n\nif __name__ == '__main__':\n    data: dict = SummaryInfo.cluster_status()\n    print(json.dumps(data, indent=3))\n```\n```json\n{\n   \"status_cluster\": {\n      \"total_nodes\": 5,\n      \"total_readys\": 5,\n      \"workers\": {\n         \"total\": 2,\n         \"ready\": 2\n      },\n      \"managers\": {\n         \"total\": 3,\n         \"ready\": 3\n      },\n      \"status\": \"OK\"\n   }\n}\n\n```\n## Status Service  \n\nExisten dos conceptos rc = running containers o \"contenedores en ejecución\" y dc = desired container o \"contenedores\ndeseados\".  \n\n## Status Services - OK\n\nUn servicio se considera saludable cuando rc == dc\n\n## Status Services - WARNING\n\nUn servicio se considera comprometido cuando rc > 1 Y dc < rc. Es decir que aun existe algun contenedor\ndando el servicio pero por alguna razón en algún nodo no se puede ejecutar dicho servicio por lo que\nse podría estar comprometido en caso de dichos servicios restantes caigan en la maquina que no puede ejecutar dicho \nservicio\n\n## Status Services - KO\n\nUn servicio se considera Fallido cuando rc == 0. Dado que un servicio al menos debe tener un contenedor sirviendo\ndicho servicio no se contempla que un servicio con 0 contenedores esté operando correctamente.\n\n\n```python\nimport json\nfrom py_docker import SummaryInfo\n\nif __name__ == '__main__':\n    data: dict = SummaryInfo.services_status()\n    print(json.dumps(data, indent=3))\n```\n\n```json\n{\n   \"services\": [\n      {\n         \"id_service\": \"01d21zx1sme1xhdijsw948mpo\",\n         \"replicas\": 15,\n         \"running\": 15,\n         \"status\": \"OK\"\n      },\n      {\n         \"id_service\": \"1z1nlvwth223o3mhk7r9k2t0q\",\n         \"replicas\": 5,\n         \"running\": 5,\n         \"status\": \"OK\"\n      }\n   ],\n   \"status\": \"OK\"\n}\n```\n\n\n## Nodes Info\nObtiene información sobre los nodos, no evalua ningun tipo de estado unicamente da información sobre cada nodo.\n\n```python\nimport json\nfrom py_docker import SummaryInfo\n\nif __name__ == '__main__':\n    data: dict = SummaryInfo.nodes_info()\n    print(json.dumps(data, indent=3))\n\n```\n\n```json\n{\n   \"nodes\": [\n      {\n         \"id\": \"ixjkfsxuk4wfidyyb2ntlav1q\",\n         \"hostname\": \"worker-01\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\"\n      },\n      {\n         \"id\": \"l5e3ei2c4t6q344774njpmrhl\",\n         \"hostname\": \"manager-02\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\",\n         \"manager_status\": \"reachable\",\n         \"manager_addr\": \"192.168.56.120:2377\"\n      },\n      {\n         \"id\": \"mn587vd6x7og5fdu8qb7b8ecq\",\n         \"hostname\": \"manager-03\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\",\n         \"manager_status\": \"reachable\",\n         \"manager_addr\": \"192.168.56.121:2377\"\n      },\n      {\n         \"id\": \"pvnw1fwejkknzokxl8i4e7vhe\",\n         \"hostname\": \"worker-02\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\"\n      },\n      {\n         \"id\": \"w3ut3mx7ad32keuu7yav5hw45\",\n         \"hostname\": \"manager-01\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\",\n         \"manager_status\": \"reachable\",\n         \"manager_addr\": \"192.168.56.119:2377\"\n      }\n   ]\n}\n```\n\n\n## Full Status\nAgrupa las opciones anteriores en un solo caso\n```python\nimport json\nfrom py_docker import SummaryInfo\n\nif __name__ == '__main__':\n    data: dict = SummaryInfo.generic_status()\n    print(json.dumps(data, indent=3))\n\n```\n```json\n{\n   \"status_cluster\": {\n      \"total_nodes\": 5,\n      \"total_readys\": 5,\n      \"workers\": {\n         \"total\": 2,\n         \"ready\": 2\n      },\n      \"managers\": {\n         \"total\": 3,\n         \"ready\": 3\n      },\n      \"status\": \"OK\"\n   },\n   \"nodes\": [\n      {\n         \"id\": \"ixjkfsxuk4wfidyyb2ntlav1q\",\n         \"hostname\": \"worker-01\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\"\n      },\n      {\n         \"id\": \"l5e3ei2c4t6q344774njpmrhl\",\n         \"hostname\": \"manager-02\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\",\n         \"manager_status\": \"reachable\",\n         \"manager_addr\": \"192.168.56.120:2377\"\n      },\n      {\n         \"id\": \"mn587vd6x7og5fdu8qb7b8ecq\",\n         \"hostname\": \"manager-03\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\",\n         \"manager_status\": \"reachable\",\n         \"manager_addr\": \"192.168.56.121:2377\"\n      },\n      {\n         \"id\": \"pvnw1fwejkknzokxl8i4e7vhe\",\n         \"hostname\": \"worker-02\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\"\n      },\n      {\n         \"id\": \"w3ut3mx7ad32keuu7yav5hw45\",\n         \"hostname\": \"manager-01\",\n         \"engine_version\": \"19.03.12\",\n         \"status\": \"ready\",\n         \"manager_status\": \"reachable\",\n         \"manager_addr\": \"192.168.56.119:2377\"\n      }\n   ],\n   \"services\": [\n      {\n         \"id_service\": \"01d21zx1sme1xhdijsw948mpo\",\n         \"replicas\": 15,\n         \"running\": 15,\n         \"status\": \"OK\"\n      },\n      {\n         \"id_service\": \"1z1nlvwth223o3mhk7r9k2t0q\",\n         \"replicas\": 5,\n         \"running\": 5,\n         \"status\": \"OK\"\n      }\n   ],\n   \"status\": \"OK\"\n}\n\nProcess finished with exit code 0\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cleandev-py-docker",
    "package_url": "https://pypi.org/project/cleandev-py-docker/",
    "platform": null,
    "project_url": "https://pypi.org/project/cleandev-py-docker/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/cleandev-py-docker/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Wrapper de resumenes de docker modo cluster",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14149115,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e4b5b304ab24d37ed2e932711844189bbb4c42c612b910f0d887bfd17ee8c8d",
          "md5": "d4145825c5ee96bc16eb8729c149883c",
          "sha256": "6f77a68baaf6f6c1fff7c9446f00e70c3c455495e39dd01d35300eae6a193d8d"
        },
        "downloads": -1,
        "filename": "cleandev-py-docker-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4145825c5ee96bc16eb8729c149883c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6885,
        "upload_time": "2022-06-16T03:09:54",
        "upload_time_iso_8601": "2022-06-16T03:09:54.300978Z",
        "url": "https://files.pythonhosted.org/packages/9e/4b/5b304ab24d37ed2e932711844189bbb4c42c612b910f0d887bfd17ee8c8d/cleandev-py-docker-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8165dff2f152e1a15806390cb37a16a54ea60779d2292b07233c27f028c02881",
          "md5": "c40b39dc97d73124af0dc2ff9a7d6f71",
          "sha256": "89f276d60a156a5980317a39a529e549094b7a1e1d1b5f73fd575384a7cb4578"
        },
        "downloads": -1,
        "filename": "cleandev-py-docker-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c40b39dc97d73124af0dc2ff9a7d6f71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 6898,
        "upload_time": "2022-06-16T09:00:30",
        "upload_time_iso_8601": "2022-06-16T09:00:30.576896Z",
        "url": "https://files.pythonhosted.org/packages/81/65/dff2f152e1a15806390cb37a16a54ea60779d2292b07233c27f028c02881/cleandev-py-docker-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8165dff2f152e1a15806390cb37a16a54ea60779d2292b07233c27f028c02881",
        "md5": "c40b39dc97d73124af0dc2ff9a7d6f71",
        "sha256": "89f276d60a156a5980317a39a529e549094b7a1e1d1b5f73fd575384a7cb4578"
      },
      "downloads": -1,
      "filename": "cleandev-py-docker-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c40b39dc97d73124af0dc2ff9a7d6f71",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 6898,
      "upload_time": "2022-06-16T09:00:30",
      "upload_time_iso_8601": "2022-06-16T09:00:30.576896Z",
      "url": "https://files.pythonhosted.org/packages/81/65/dff2f152e1a15806390cb37a16a54ea60779d2292b07233c27f028c02881/cleandev-py-docker-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}