{
  "info": {
    "author": "(samc0de) Sameer Mahabole",
    "author_email": "sssam.sam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "retry\n=====\n\n.. image:: https://img.shields.io/pypi/dm/retry.svg?maxAge=2592000\n        :target: https://pypi.python.org/pypi/retry/\n\n.. image:: https://img.shields.io/pypi/v/retry.svg?maxAge=2592000\n        :target: https://pypi.python.org/pypi/retry/\n\n.. image:: https://img.shields.io/pypi/l/retry.svg?maxAge=2592000\n        :target: https://pypi.python.org/pypi/retry/\n\n\nEasy to use retry decorator.\n\n\nFeatures\n--------\n\n- No external dependency (stdlib only).\n- (Optionally) Preserve function signatures (`pip install decorator`).\n- Original traceback, easy to debug.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install go-retry\n\n\nAPI\n---\n\nretry decorator\n^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    def retry(exceptions=Exception, tries=-1, delay=0, max_delay=None, backoff=1, jitter=0, logger=logging_logger):\n        \"\"\"Return a retry decorator.\n\n        :param exceptions: an exception or a tuple of exceptions to catch. default: Exception.\n        :param tries: the maximum number of attempts. default: -1 (infinite).\n        :param delay: initial delay between attempts. default: 0.\n        :param max_delay: the maximum value of delay. default: None (no limit).\n        :param backoff: multiplier applied to delay between attempts. default: 1 (no backoff).\n        :param jitter: extra seconds added to delay between attempts. default: 0.\n                       fixed if a number, random if a range tuple (min, max)\n        :param logger: logger.warning(fmt, error, delay) will be called on failed attempts.\n                       default: retry.logging_logger. if None, logging is disabled.\n        \"\"\"\n\nVarious retrying logic can be achieved by combination of arguments.\n\n\nExamples\n\"\"\"\"\"\"\"\"\n\n.. code:: python\n\n    from retry import retry\n\n.. code:: python\n\n    @retry()\n    def make_trouble():\n        '''Retry until succeed'''\n\n.. code:: python\n\n    @retry(ZeroDivisionError, tries=3, delay=2)\n    def make_trouble():\n        '''Retry on ZeroDivisionError, raise error after 3 attempts, sleep 2 seconds between attempts.'''\n\n.. code:: python\n\n    @retry((ValueError, TypeError), delay=1, backoff=2)\n    def make_trouble():\n        '''Retry on ValueError or TypeError, sleep 1, 2, 4, 8, ... seconds between attempts.'''\n\n.. code:: python\n\n    @retry((ValueError, TypeError), delay=1, backoff=2, max_delay=4)\n    def make_trouble():\n        '''Retry on ValueError or TypeError, sleep 1, 2, 4, 4, ... seconds between attempts.'''\n\n.. code:: python\n\n    @retry(ValueError, delay=1, jitter=1)\n    def make_trouble():\n        '''Retry on ValueError, sleep 1, 2, 3, 4, ... seconds between attempts.'''\n\n.. code:: python\n\n    # If you enable logging, you can get warnings like 'ValueError, retrying in\n    # 1 seconds'\n    if __name__ == '__main__':\n        import logging\n        logging.basicConfig()\n        make_trouble()\n\nretry_call\n^^^^^^^^^^\n\n.. code:: python\n\n    def retry_call(f, fargs=None, fkwargs=None, exceptions=Exception, tries=-1, delay=0, max_delay=None, backoff=1,\n                   jitter=0,\n                   logger=logging_logger):\n        \"\"\"\n        Calls a function and re-executes it if it failed.\n\n        :param f: the function to execute.\n        :param fargs: the positional arguments of the function to execute.\n        :param fkwargs: the named arguments of the function to execute.\n        :param exceptions: an exception or a tuple of exceptions to catch. default: Exception.\n        :param tries: the maximum number of attempts. default: -1 (infinite).\n        :param delay: initial delay between attempts. default: 0.\n        :param max_delay: the maximum value of delay. default: None (no limit).\n        :param backoff: multiplier applied to delay between attempts. default: 1 (no backoff).\n        :param jitter: extra seconds added to delay between attempts. default: 0.\n                       fixed if a number, random if a range tuple (min, max)\n        :param logger: logger.warning(fmt, error, delay) will be called on failed attempts.\n                       default: retry.logging_logger. if None, logging is disabled.\n        :returns: the result of the f function.\n        \"\"\"\n\nThis is very similar to the decorator, except that it takes a function and its arguments as parameters. The use case behind it is to be able to dynamically adjust the retry arguments.\n\n.. code:: python\n\n    import requests\n\n    from retry.api import retry_call\n\n\n    def make_trouble(service, info=None):\n        if not info:\n            info = ''\n        r = requests.get(service + info)\n        return r.text\n\n\n    def what_is_my_ip(approach=None):\n        if approach == \"optimistic\":\n            tries = 1\n        elif approach == \"conservative\":\n            tries = 3\n        else:\n            # skeptical\n            tries = -1\n        result = retry_call(make_trouble, fargs=[\"http://ipinfo.io/\"], fkwargs={\"info\": \"ip\"}, tries=tries)\n        print(result)\n\n    what_is_my_ip(\"conservative\")\n\n\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/samc0de/retry",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "go-retry",
    "package_url": "https://pypi.org/project/go-retry/",
    "platform": null,
    "project_url": "https://pypi.org/project/go-retry/",
    "project_urls": {
      "Homepage": "https://github.com/samc0de/retry"
    },
    "release_url": "https://pypi.org/project/go-retry/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Easy to use retry decorator, with fixes and updates.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13932431,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c336bb0996dcd0ad61494a60d039ff759e62705c7353b2a922c881b8e51c99e",
          "md5": "51302164d8774aa47cdf9de3c49a45d8",
          "sha256": "27d79982fcde38b7fc6169113aac896bcc5981e442f69ac886633a8439d60275"
        },
        "downloads": -1,
        "filename": "go_retry-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51302164d8774aa47cdf9de3c49a45d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5218,
        "upload_time": "2022-05-25T11:11:29",
        "upload_time_iso_8601": "2022-05-25T11:11:29.127656Z",
        "url": "https://files.pythonhosted.org/packages/7c/33/6bb0996dcd0ad61494a60d039ff759e62705c7353b2a922c881b8e51c99e/go_retry-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "332cb973766597cb8108d30fb81a8c24f6e048fa819f78ea84aff733d34d6d3d",
          "md5": "2a0304993e4687b8e619bf393499258e",
          "sha256": "f76518bbf8243083d021f059d314a63da06095558a3d539f37b8426fd8679ea3"
        },
        "downloads": -1,
        "filename": "go_retry-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a0304993e4687b8e619bf393499258e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6931,
        "upload_time": "2022-05-25T11:22:57",
        "upload_time_iso_8601": "2022-05-25T11:22:57.667186Z",
        "url": "https://files.pythonhosted.org/packages/33/2c/b973766597cb8108d30fb81a8c24f6e048fa819f78ea84aff733d34d6d3d/go_retry-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba0b93d2ad6eff3e1bb3a14f2979be684bcf0ecef3c2ced735195336c9995ebf",
          "md5": "6b2d18806574389b01623f55d2bf0444",
          "sha256": "cac5219350975d3eb91e38abde0a42018ffec168a7d2cc28994404d8af68d7d0"
        },
        "downloads": -1,
        "filename": "go-retry-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b2d18806574389b01623f55d2bf0444",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4002,
        "upload_time": "2022-05-25T11:23:00",
        "upload_time_iso_8601": "2022-05-25T11:23:00.073043Z",
        "url": "https://files.pythonhosted.org/packages/ba/0b/93d2ad6eff3e1bb3a14f2979be684bcf0ecef3c2ced735195336c9995ebf/go-retry-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "332cb973766597cb8108d30fb81a8c24f6e048fa819f78ea84aff733d34d6d3d",
        "md5": "2a0304993e4687b8e619bf393499258e",
        "sha256": "f76518bbf8243083d021f059d314a63da06095558a3d539f37b8426fd8679ea3"
      },
      "downloads": -1,
      "filename": "go_retry-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2a0304993e4687b8e619bf393499258e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6931,
      "upload_time": "2022-05-25T11:22:57",
      "upload_time_iso_8601": "2022-05-25T11:22:57.667186Z",
      "url": "https://files.pythonhosted.org/packages/33/2c/b973766597cb8108d30fb81a8c24f6e048fa819f78ea84aff733d34d6d3d/go_retry-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba0b93d2ad6eff3e1bb3a14f2979be684bcf0ecef3c2ced735195336c9995ebf",
        "md5": "6b2d18806574389b01623f55d2bf0444",
        "sha256": "cac5219350975d3eb91e38abde0a42018ffec168a7d2cc28994404d8af68d7d0"
      },
      "downloads": -1,
      "filename": "go-retry-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6b2d18806574389b01623f55d2bf0444",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 4002,
      "upload_time": "2022-05-25T11:23:00",
      "upload_time_iso_8601": "2022-05-25T11:23:00.073043Z",
      "url": "https://files.pythonhosted.org/packages/ba/0b/93d2ad6eff3e1bb3a14f2979be684bcf0ecef3c2ced735195336c9995ebf/go-retry-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}