{
  "info": {
    "author": "Frank Odom",
    "author_email": "frank.odom.iii@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# blip-inference\n\nPretrained [BLIP](https://github.com/salesforce/BLIP) with a similar API to [CLIP](https://github.com/openai/CLIP).\n\nBLIP tends to achieve slightly better accuracy than CLIP with similar inference speed.  The CLIP API is much cleaner and more commonly used.  This repo refactors BLIP to match the CLIP interface, so that it's easier for practitioners to switch between CLIP / BLIP models.\n\n\n## Install\n\nFrom PyPI:\n```bash\npip install blip-inference\n```\n\nFrom source:\n```bash\npip install \"blip_inference @ git+https://git@github.com/fkodom/blip-inference.git\"\n```\n\n\n## Usage\n\nUser-facing methods behave similarly to CLIP.  A few underlying details change, which will only affect advanced users.\n\n```python\nimport torch\nimport blip_inference as blip\nfrom PIL import Image\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel, preprocess = blip.load(\"feature_extractor\", device=device)\n\nraw_text = [\"a diagram\", \"a dog\", \"a cat\"]\ntext = blip.tokenize(raw_text).to(device)\nimage = preprocess(Image.open(\"kitten.jpeg\")).unsqueeze(0).to(device)\n\nwith torch.no_grad():    \n    logits_per_image, logits_per_text = model(image, text)\nprobs = torch.softmax(logits_per_image, dim=-1)\n\nprint(\"\\nPredictions:\\n\")\nfor idx, value in enumerate(probs.squeeze()):\n    print(f\"{raw_text[idx]:>16s}: {100 * value.item():.2f}%\")\nprobs = logits_per_image.softmax(dim=-1).cpu().numpy()\n```\n\n### Zero-Shot Prediction\n\n```python\nimport blip_inference as blip\nimport torch\nfrom PIL import Image\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel, preprocess = blip.load('base', device)\n\nraw_text = [\"a diagram\", \"a dog\", \"a cat\"]\ntext = blip.tokenize(raw_text).to(device)\nimage = preprocess(Image.open(\"kitten.jpeg\")).unsqueeze(0).to(device)\n\nwith torch.no_grad():\n    image_features = model.encode_image(image)\n    text_features = model.encode_text(text)\n\nimage_features /= image_features.norm(dim=-1, keepdim=True)\ntext_features /= text_features.norm(dim=-1, keepdim=True)\nsimilarity = (100 * image_features @ text_features.T).softmax(dim=-1)\n\nprint(\"\\nPredictions:\\n\")\nfor idx, value in enumerate(similarity.squeeze()):\n    print(f\"{raw_text[idx]:>16s}: {100 * value.item():.2f}%\")\n```\n\n### Linear Probe Evaluation\n\nSee [this example from the CLIP repo](https://github.com/openai/CLIP#linear-probe-evaluation).  Everything should be identical, except for swapping:\n* `import clip` --> `import blip_inference as blip`\n* `clip` --> `blip`\n\n\n## API\n\nSimilar to CLIP, the `blip_inference` module provides the following methods:\n\n#### `blip_inference.available_models() -> List[str]`\n\nReturns the names of the available BLIP models.\n\n#### `blip_inference.load(name: str, device=...) -> Tuple[BLIP, Callable]`\n\nReturns the model and the TorchVision transform needed by the model, specified by the model name returned by `blip_inference.available_models()`. It will download the model as necessary. The `name` argument can also be a path to a local checkpoint.\n\nThe device to run the model can be optionally specified, and the default is to use the first CUDA device if there is any, otherwise the CPU.\n\n#### `blip_inference.tokenize(text: Union[str, List[str]], context_length: int = 35) -> BatchEncoding`\n\nReturns a dictionary with tokenized sequences of given text input(s). This can be used as the input to the model\n\n---\n\nThe model returned by `blip_inference.load()` supports the following methods:\n\n#### `model.encode_image(image: Tensor) -> Tensor`\n\nGiven a batch of images, returns the image features encoded by the vision portion of the BLIP model.\n\n#### `model.encode_text(text: BatchEncoding) -> Tensor`\n\nGiven a batch of text tokens, returns the text features encoded by the language portion of the BLIP model.\n\n#### `model(image: Tensor, text: BatchEncoding) -> Tuple[Tensor, Tensor]`\n\nGiven a batch of images and a batch of text tokens, returns two Tensors, containing the logit scores corresponding to each image and text input. The values are cosine similarities between the corresponding image and text features.\n\n**NOTE**: Unlike CLIP, logits for BLIP models **do not** need to be multiplied by 100 before computing cosine similarity.  That scaling factor is built into the BLIP model. \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fkodom/blip-inference",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blip-inference",
    "package_url": "https://pypi.org/project/blip-inference/",
    "platform": null,
    "project_url": "https://pypi.org/project/blip-inference/",
    "project_urls": {
      "Homepage": "https://github.com/fkodom/blip-inference"
    },
    "release_url": "https://pypi.org/project/blip-inference/0.1.0/",
    "requires_dist": [
      "timm",
      "transformers (>=4.15.0)",
      "torch (>=1.10)",
      "black ; extra == 'all'",
      "flake8 ; extra == 'all'",
      "isort ; extra == 'all'",
      "mypy ; extra == 'all'",
      "pytest ; extra == 'all'",
      "pytest-cov ; extra == 'all'",
      "pre-commit ; extra == 'all'",
      "pre-commit ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "black ; extra == 'test'",
      "flake8 ; extra == 'test'",
      "isort ; extra == 'test'",
      "mypy ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "project_description",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15511968,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e55d818b15bb7a9f6de104f5bbc23a9014a5d8595387cbcbcf8bf565cd31a3ee",
          "md5": "62773c8996e428f5a631a932fbffff99",
          "sha256": "6fbd7447abc2ea1833fc4b4ebd3b81de94c9c496508433e75d4b1603732aefe8"
        },
        "downloads": -1,
        "filename": "blip_inference-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62773c8996e428f5a631a932fbffff99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20734,
        "upload_time": "2022-10-24T17:39:52",
        "upload_time_iso_8601": "2022-10-24T17:39:52.304670Z",
        "url": "https://files.pythonhosted.org/packages/e5/5d/818b15bb7a9f6de104f5bbc23a9014a5d8595387cbcbcf8bf565cd31a3ee/blip_inference-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33da26ed145d7779e356c73e046fd16c89aa1d9bf751328c2cc6ebc4cd1f8e5b",
          "md5": "c47cb40203b69c78e4adb73f3d7eb02a",
          "sha256": "6dad3db5e69faff801110e03366c005921ffa92a8b2a02b6991163ee90d990d2"
        },
        "downloads": -1,
        "filename": "blip-inference-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c47cb40203b69c78e4adb73f3d7eb02a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20912,
        "upload_time": "2022-10-24T17:39:53",
        "upload_time_iso_8601": "2022-10-24T17:39:53.605457Z",
        "url": "https://files.pythonhosted.org/packages/33/da/26ed145d7779e356c73e046fd16c89aa1d9bf751328c2cc6ebc4cd1f8e5b/blip-inference-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e55d818b15bb7a9f6de104f5bbc23a9014a5d8595387cbcbcf8bf565cd31a3ee",
        "md5": "62773c8996e428f5a631a932fbffff99",
        "sha256": "6fbd7447abc2ea1833fc4b4ebd3b81de94c9c496508433e75d4b1603732aefe8"
      },
      "downloads": -1,
      "filename": "blip_inference-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62773c8996e428f5a631a932fbffff99",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 20734,
      "upload_time": "2022-10-24T17:39:52",
      "upload_time_iso_8601": "2022-10-24T17:39:52.304670Z",
      "url": "https://files.pythonhosted.org/packages/e5/5d/818b15bb7a9f6de104f5bbc23a9014a5d8595387cbcbcf8bf565cd31a3ee/blip_inference-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33da26ed145d7779e356c73e046fd16c89aa1d9bf751328c2cc6ebc4cd1f8e5b",
        "md5": "c47cb40203b69c78e4adb73f3d7eb02a",
        "sha256": "6dad3db5e69faff801110e03366c005921ffa92a8b2a02b6991163ee90d990d2"
      },
      "downloads": -1,
      "filename": "blip-inference-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c47cb40203b69c78e4adb73f3d7eb02a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 20912,
      "upload_time": "2022-10-24T17:39:53",
      "upload_time_iso_8601": "2022-10-24T17:39:53.605457Z",
      "url": "https://files.pythonhosted.org/packages/33/da/26ed145d7779e356c73e046fd16c89aa1d9bf751328c2cc6ebc4cd1f8e5b/blip-inference-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}