{
  "info": {
    "author": "Haohe Liu",
    "author_email": "haoheliu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# Speech Super-resolution Evaluation and Benchmarking\n<b>What this repo do:</b>\n- A toolbox for the evaluation of speech super-resolution algorithms.\n- Unify the evaluation pipline of speech super-resolution algorithms for a easier comparison between different systems.\n- Benchmarking speech super-resolution methods (pull request is welcome). Encouraging reproducible research.\n\nI build this repo while I'm writing my paper for INTERSPEECH 2022: <i>Neural Vocoder is All You Need for Speech Super-resolution</i>. The model mentioned in this paper, NVSR, will also be open-sourced here.\n\n## Installation  \nInstall via pip:\n```shell\npip3 install ssr_eval\n```\nPlease make sure you have already installed [sox](http://sox.sourceforge.net/sox.html).\n\n## Quick Example\n\n<b>A basic example:</b> Evaluate on a system that do nothing:\n\n```python\nfrom ssr_eval import test \ntest()\n```\n- The evaluation result json file will be stored in the ./results directory: [Example file](https://github.com/haoheliu/ssr_eval/blob/main/examples/results/2022-03-28-18:07:54.109221-unprocessed.json)\n- The code will automatically handle stuffs like downloading test sets.\n- You will find a field \"averaged\" at the bottom of the json file that looks like below. This field mark the performance of the system.\n```json\n\"averaged\": {\n        \"proc_fft_24000_44100\": {\n            \"lsd\": 5.152331300436993,\n            \"log_sispec\": 5.8051057146229095,\n            \"sispec\": 30.23394207533686,\n            \"ssim\": 0.8484425044157442\n        }\n    }\n```\n<hr>\n\n![main_idea](https://github.com/haoheliu/ssr_eval/blob/main/pics/main.png)\n\nBelow is the code of test()\n\n```python\nfrom ssr_eval import SSR_Eval_Helper, BasicTestee\n\n# You need to implement a class for the model to be evaluated.\nclass MyTestee(BasicTestee):\n    def __init__(self) -> None:\n        super().__init__()\n\n    # You need to implement this function\n    def infer(self, x):\n        \"\"\"A testee that do nothing\n\n        Args:\n            x (np.array): [sample,], with model_input_sr sample rate\n            target (np.array): [sample,], with model_output_sr sample rate\n\n        Returns:\n            np.array: [sample,]\n        \"\"\"\n        return x\n\ndef test():\n    testee = MyTestee()\n    # Initialize a evaluation helper\n    helper = SSR_Eval_Helper(\n        testee,\n        test_name=\"unprocessed\",  # Test name for storing the result\n        input_sr=44100,  # The sampling rate of the input x in the 'infer' function\n        output_sr=44100,  # The sampling rate of the output x in the 'infer' function\n        evaluation_sr=48000,  # The sampling rate to calculate evaluation metrics.\n        setting_fft={\n            \"cutoff_freq\": [\n                12000\n            ],  # The cutoff frequency of the input x in the 'infer' function\n        },\n        save_processed_result=True\n    )\n    # Perform evaluation\n    helper.evaluate(limit_test_nums=10, limit_test_speaker=-1)\n```\nThe code will automatically handle stuffs like downloading test sets. The evaluation result will be saved in the ./results directory.\n\n## Baselines\n\nWe provide several pretrained baselines. For example, to run the NVSR baseline, you can click the link in the following table for more details. \n\n<hr>\n\n<b>Table.1 Log-spectral distance (LSD) on different input sampling-rate (Evaluated on 44.1kHz).</b>\n\n|  Method | One for all | Params| 2kHz | 4kHz | 8kHz | 12kHz | 16kHz | 24kHz | 32kHz |  AVG |\n|:--------------------:|:----:|:----:|:----:|:----:|:----:|:-----:|:-----:|:-----:|:-----:|:----:|\n| NVSR [[Pretrained Model](https://github.com/haoheliu/ssr_eval/tree/main/examples/NVSR)] | Yes | 99.0M | 1.04 | 0.98 | 0.91 |  0.85 |  0.79 |  0.70 |  0.60 | 0.84 |\n| WSRGlow(24kHz→48kHz) | No | 229.9M | - | - | - |  - |  - |  0.79 |  - | - |\n| WSRGlow(12kHz→48kHz) | No | 229.9M | - | - | - |  0.87 |  - |  - |  - | - |\n| WSRGlow(8kHz→48kHz) | No | 229.9M | - | - | 0.98 |  - |  - |  - |  - | - |\n| WSRGlow(4kHz→48kHz) | No | 229.9M | - | 1.12 | - |  - |  - | - |  - | - |\n| Nu-wave(24kHz→48kHz) | No | 3.0M | - | - | - |  - |  - |  1.22 |  - | - |\n| Nu-wave(12kHz→48kHz) | No | 3.0M | - | - | - |  1.40 |  - |  - |  - | - |\n| Nu-wave(8kHz→48kHz) | No | 3.0M | - | - | 1.42 |  - |  - |  - |  - | - |\n| Nu-wave(4kHz→48kHz) | No | 3.0M | - | 1.42 | - |  - |  - |  - |  - | - |\n| Unprocessed      | - |  - | 5.69 | 5.50 | 5.15 |  4.85 |  4.54 |  3.84 |  2.95 | 4.65 |\n\n> Click the link of the model for more details.\n\n> Here \"one for all\" means model can process flexible input sampling rate.\n\n## Features\nThe following code demonstrate the full options in the SSR_Eval_Helper:\n\n```python\ntestee = MyTestee()\nhelper = SSR_Eval_Helper(testee, # Your testsee object with 'infer' function implemented\n                        test_name=\"unprocess\",  # The name of this test. Used for saving the log file in the ./results directory\n                        test_data_root=\"./your_path/vctk_test\", # The directory to store the test data, which will be automatically downloaded.\n                        input_sr=44100, # The sampling rate of the input x in the 'infer' function\n                        output_sr=44100, # The sampling rate of the output x in the 'infer' function\n                        evaluation_sr=48000, # The sampling rate to calculate evaluation metrics. \n                        save_processed_result=False, # If True, save model output in the dataset directory.\n                        # (Recommend/Default) Use fourier method to simulate low-resolution effect\n                        setting_fft = {\n                            \"cutoff_freq\": [1000, 2000, 4000, 6000, 8000, 12000, 16000], # The cutoff frequency of the input x in the 'infer' function\n                        }, \n                        # Use lowpass filtering to simulate low-resolution effect. All possible combinations will be evaluated. \n                        setting_lowpass_filtering = {\n                            \"filter\":[\"cheby\",\"butter\",\"bessel\",\"ellip\"], # The type of filter \n                            \"cutoff_freq\": [1000, 2000, 4000, 6000, 8000, 12000, 16000], \n                            \"filter_order\": [3,6,9] # Filter orders\n                        }, \n                        # Use subsampling method to simulate low-resolution effect\n                        setting_subsampling = {\n                            \"cutoff_freq\": [1000, 2000, 4000, 6000, 8000, 12000, 16000],\n                        }, \n                        # Use mp3 compression method to simulate low-resolution effect\n                        setting_mp3_compression = {\n                            \"low_kbps\": [32, 48, 64, 96, 128],\n                        },\n)\n\nhelper.evaluate(limit_test_nums=10, # For each speaker, only evaluate on 10 utterances.\n                limit_test_speaker=-1 # Evaluate on all the speakers. \n                )\n```\n\nI recommand all the users to use 'setting_fft' to perform the evaluation for the convinence of comparing between different system.\n\n## Dataset Details\nWe build the test sets using VCTK (version 0.92), a multi-speaker English corpus that contains 110 speakers with different accents. \n- Speakers used for the test set: p360, p361, p362, p363, p364, p374, p376, s5\n- For the remaining 100 speakers, p280 and p315 are omitted for the technical issues.\n- Other 98 speakers are used for training.\n\n## Citation\n\nComming soon\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/haoheliu/ssr_eval",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ssr-eval",
    "package_url": "https://pypi.org/project/ssr-eval/",
    "platform": null,
    "project_url": "https://pypi.org/project/ssr-eval/",
    "project_urls": {
      "Homepage": "https://github.com/haoheliu/ssr_eval"
    },
    "release_url": "https://pypi.org/project/ssr-eval/0.0.6/",
    "requires_dist": [
      "tqdm",
      "librosa",
      "soundfile",
      "scikit-image",
      "wave",
      "torch (>=1.6.0)",
      "torchlibrosa (>=0.0.7)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "This package is written for the evaluation of speech super-resolution algorithms.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13326120,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a03df4a0d51e3cb570c902bd50c3823e8e7b5f8cb44d0bff0b02f9ab8e4580e4",
          "md5": "10d1e69f5df249d1eebc9ca847aa4861",
          "sha256": "82298b109c0767c8b6b0cddca98e30241c6afd3671d7ffd0cc4918587cfddf9e"
        },
        "downloads": -1,
        "filename": "ssr_eval-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10d1e69f5df249d1eebc9ca847aa4861",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 12984,
        "upload_time": "2022-03-28T16:44:46",
        "upload_time_iso_8601": "2022-03-28T16:44:46.268457Z",
        "url": "https://files.pythonhosted.org/packages/a0/3d/f4a0d51e3cb570c902bd50c3823e8e7b5f8cb44d0bff0b02f9ab8e4580e4/ssr_eval-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a3710127d42fc296829fd12363b4458d8f37da59a69dc55b1b05f363b53b0d7",
          "md5": "3390a92a185b56b6ba4ac211f222a2aa",
          "sha256": "7b750606c6eecb77212402278f4f0fe3054b84923123868a61c7482e769413d4"
        },
        "downloads": -1,
        "filename": "ssr_eval-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3390a92a185b56b6ba4ac211f222a2aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14524,
        "upload_time": "2022-03-28T19:41:19",
        "upload_time_iso_8601": "2022-03-28T19:41:19.803267Z",
        "url": "https://files.pythonhosted.org/packages/4a/37/10127d42fc296829fd12363b4458d8f37da59a69dc55b1b05f363b53b0d7/ssr_eval-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e35da68b1ae482ac222ab8b67713a9275ac2e7b37a952b079fc707792291d67",
          "md5": "dc9768ae920c29193bd715e8d92c4f09",
          "sha256": "419b07f206ea4ac8216d1d9122e085fce2e7d15586df1180721b632cd7732ff3"
        },
        "downloads": -1,
        "filename": "ssr_eval-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc9768ae920c29193bd715e8d92c4f09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 15785,
        "upload_time": "2022-03-28T20:23:28",
        "upload_time_iso_8601": "2022-03-28T20:23:28.372954Z",
        "url": "https://files.pythonhosted.org/packages/5e/35/da68b1ae482ac222ab8b67713a9275ac2e7b37a952b079fc707792291d67/ssr_eval-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d414dda0f386dcfd26c4b7b2ab6b3a79f6b243289fd1516a4846ed36f1807de",
          "md5": "550e096c0ba35042da7f36afdc428353",
          "sha256": "f8daf151a6688510e30a056c6cca613028ac70dbf4e061e7d9f8803a756b11d6"
        },
        "downloads": -1,
        "filename": "ssr_eval-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "550e096c0ba35042da7f36afdc428353",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 15803,
        "upload_time": "2022-03-28T20:32:44",
        "upload_time_iso_8601": "2022-03-28T20:32:44.144375Z",
        "url": "https://files.pythonhosted.org/packages/7d/41/4dda0f386dcfd26c4b7b2ab6b3a79f6b243289fd1516a4846ed36f1807de/ssr_eval-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5d3629ac1422113a18039ac46baa7fba8b8229e7eeb9d725b98a4b9530a1640",
          "md5": "df1766c6b98d55494a0822b1505d0e08",
          "sha256": "c613ca48e41f347ee995ddb35cd3de201b18ec0bb9f31a1209305c134636f10f"
        },
        "downloads": -1,
        "filename": "ssr_eval-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df1766c6b98d55494a0822b1505d0e08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 15913,
        "upload_time": "2022-03-28T20:44:19",
        "upload_time_iso_8601": "2022-03-28T20:44:19.527472Z",
        "url": "https://files.pythonhosted.org/packages/b5/d3/629ac1422113a18039ac46baa7fba8b8229e7eeb9d725b98a4b9530a1640/ssr_eval-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf56b06950e2cc9576a39ee4606a6763897bf4ca167868a9c4d884207672988c",
          "md5": "df272f00231eca975dd966d234433534",
          "sha256": "475d0b5725a8fa3ba33da4c90d3eb137c8cbf958e98f5262b02102af806ed4fb"
        },
        "downloads": -1,
        "filename": "ssr_eval-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df272f00231eca975dd966d234433534",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 15915,
        "upload_time": "2022-03-28T20:46:00",
        "upload_time_iso_8601": "2022-03-28T20:46:00.423429Z",
        "url": "https://files.pythonhosted.org/packages/bf/56/b06950e2cc9576a39ee4606a6763897bf4ca167868a9c4d884207672988c/ssr_eval-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf56b06950e2cc9576a39ee4606a6763897bf4ca167868a9c4d884207672988c",
        "md5": "df272f00231eca975dd966d234433534",
        "sha256": "475d0b5725a8fa3ba33da4c90d3eb137c8cbf958e98f5262b02102af806ed4fb"
      },
      "downloads": -1,
      "filename": "ssr_eval-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df272f00231eca975dd966d234433534",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 15915,
      "upload_time": "2022-03-28T20:46:00",
      "upload_time_iso_8601": "2022-03-28T20:46:00.423429Z",
      "url": "https://files.pythonhosted.org/packages/bf/56/b06950e2cc9576a39ee4606a6763897bf4ca167868a9c4d884207672988c/ssr_eval-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}