{
  "info": {
    "author": "Michael Elsdörfer",
    "author_email": "michael@elsdoerfer.info",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# wasmbind\n\nWraps your WebAssembly exports to provide you are with a more usable interface in Python. \nCurrently works with [AssemblyScript](https://assemblyscript.org/) modules, and \n[python-ext-wasm](https://github.com/wasmerio/python-ext-wasm) as the loader.\n\nIn doing so, it tries to play a similar role as [wasm-bindgen](https://github.com/rustwasm/wasm-bindgen) \nor [as-bind](https://github.com/torch2424/as-bind) in JavaScript.\n\nInstall with `pip install wasmbind` or [`poetry add wasmbind`](https://github.com/python-poetry/poetry).\n\n**WARNING**: As of this writing, the latest published version 0.3 of `python-ext-wasm` is not supported;\nyou need to run on git master. The released version does not allow us to access the WASM memory. \n\n\n## Features\n\nFeatures: \n\n- ✅ Strings, Arrays, Maps, Custom Classes.\n- ✅ Work with AssemblyScript objects in Python.\n- ✅ Instantiate new AssemblyScript objects in Python. \n\nFuture plans:\n\n- [ ] Allow wrapping arrays returned from WASM.\n- [ ] Improve array allocation by finding available types in RTTI.\n- [ ] Support imports (needs [#28](https://github.com/wasmerio/python-ext-wasm/issues/28))\n- [ ] Improve these docs.\n- [ ] See if we can use RTTI to remove the need for a manual `as_`. We might have to create a class registry\n      similar to [as-bind](https://github.com/torch2424/as-bind/blob/97353ef6f8e39a4277957079b5d6a9e7d85ee709/lib/assembly/as-bind.ts)\n- [ ] Investigate an alternative approach wherein you predefine classes (with types) in Python code.\n- [ ] Allow creation of types without a constructor.\n\n\n## Usage\n\nSetup your module like this:\n\n```python\nfrom wasmer import Instance\nwasm = Instance(open('yourscript.wasm', 'rb').read())\n\nfrom wasmbind import Module\nmodule = Module(wasm)\n```\n\nHere are some sample interactions.\n\n#### Strings\n\n```typescript\nexport function helloworld(name: string): string {\n    return \"hello, \" + name\n}\n```\n\n```python\n>>> module.helloworld(\"michael\", as_=str)\n\"hello, michael\"\n```\n\nYou'll note that you have to specificy the desired return type via `as_`. This is because WASM only\ngives us a pointer to a memory location, and we otherwise have no idea what the type is. See the section\n`Resolving Return Values` for other options.\n\nPassing values *into* AssemblyScript works, because we know it the type. In this case, we can allocate\na `string` on the AssemblyScript side and pass the pointer to it into `helloworld`.\n\nNote: You'll get a real Python `str` from AssemblyScript, and you are expected to pass real `str` \nobjects to AssemblyScript functions. Strings are immutable in AssemblyScript and Python. Those\nthings mean that for the boundary Python <-> AssemblyScript, they are passed by value and copied. No\nreference counting is involved.\n\n\n#### Objects & Properties\n\n```typescript\nexport class File {\n  constructor(\n    public size: i32,\n  ) {}\n}\n```\n\n```python\n>>> dir = module.Directory(3)\n>>> dir.size\n3\n>>> dir.size = 10\n>>> dir.size\n10\n```\n\n#### Objects\n\n```typescript\nexport class Line {\n  constructor(\n    public s: string\n  ) {}\n}\n\nexport class File {\n  public lines: Line[] = []\n\n  constructor() {}\n  \n  addLine(line: Line): number {\n    this.lines.push(line);\n    return this.lines.length; \n  }\n}\n```\n\n```python\n>>> file = module.File()\n>>> line = module.Line(\"line 1\")\n>>> file.addLine(line)\n1\n```\n\n#### Maps and other generic types\n \nLet's say you have a function that takes a map as an argument:\n\n```typescript\nexport function getMap(): Map<string, i32> {\n  return new Map();\n}\n```\n\nFirst, if you look into this module's exports, you will note that there is only `getMap()`. The \n`Map` class itself was not exported. \n\nNow, if you add `export {Map}`, depending on your code, you might see exports such as:\n\n```\n'Map<~lib/string/String,~lib/string/String>#get', 'Map<i32,i32>#constructor', 'Map<i32,i32>#clear'\n```\n\nEvery concrete version of the generic `Map` type is exported separately, the names aren't \nvery nice, and finally, the classes are incomplete: Only methods which were used at some\npoint in your code are exported, the rest, I assume, have been optimized away.\n\nCurrently, `wasmbind` does not do anything special with those exports, which means you can\nuse them, but they are not very accessible.\n\nThe best way to use a map, which I have found so far, is this:\n\n```typescript\nexport class StringMap extends Map<string, string> {};\n```\n\nThis will give you a complete and fully-functional `StringMap` class in Python.\n\n\n## Resolving Return Values\n\nIf you have a memory address, you can do:\n\n``module.resolve()`` or ``module.resolve(as_=T)``\n\nIf you have an opaque `AssemblyScriptObject`, you can do `obj.as_(T)`.\n\nPossible values for `as_`:\n\n- If not given, we'll try to auto-detect.\n- `str`\n- Any `AssemblyScriptClass` exported by the module.\n- `typing.List` or `typing.List[SomeOtherType]`, with `SomeOtherType` being any `as` value.\n\nOptions for the future:\n\n```python\n# Every return value is a a Opaque Type that you can either call .native() on or .as().\nmodule = Module(instance, value_handler=wrap_opaque)\n\n# Every return value is auto-instantiated via the object header \nmodule = Module(instance, value_handler=auto_resolve)\n\n# Using mypy to predefine the return types of each method and function call. \nmodule = Module(instance, class_registry={})\n```\n\n## Opaque Values\n\nSometimes it can be nice to pass data structures to AssemblyScript that you just want to keep as-is, without \nAssemblyScript touching them, and getting them back; in particular, when dealing with complex data structures.\n\nTo help support this case, `wasmbind` supports a mechanism by which:\n\n- You can put an arbitrary Python value into a local registry.\n- You'll be given an opaque object that you can pass to AssemblyScript functions.\n- AssemblyScript will see an integer (we start counting at 1, so it's up to you if you want to use u8, u32, ...)\n- When a value comes out of AssemblyScript, you need to instruct `wasmbind`, using the regular mechanisms, to\n  resolve this opaque pointer as a `wasmbind.OpaqueValue` instance.\n  \nHere is an example:\n\n```typescript\nexport function take(val: u8): u8 { return val; }\n```\n\n```python\nfrom wasmbind import OpaqueValue\nmy_map = {\"x\": 1}\nwrapped_map = module.register_opaque_value(my_map)\nassert module.take(wrapped_map, as_=OpaqueValue) == {\"x\": 1}\n```\n \n\n## Notes\n\nIn part, this is a port of the AssemblyScript loader. The following links were helpful in implementing this:\n\n- [AssemblyScript Loader code](https://github.com/AssemblyScript/assemblyscript/blob/master/lib/loader/index.js)\n- [AssemblyScript Loader docs](https://docs.assemblyscript.org/basics/loader#why-not-more-convenient)\n- [wasmer-as code](https://github.com/onsails/wasmer-as)\n- [as-bind code](https://github.com/torch2424/as-bind)\n- [python-ext-wasm docs](https://github.com/wasmerio/python-ext-wasm)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wasmbind",
    "package_url": "https://pypi.org/project/wasmbind/",
    "platform": "",
    "project_url": "https://pypi.org/project/wasmbind/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/wasmbind/0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8029080,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c624a47422691c570276611c01a0f67c888b1aef2998282bd80c5bc079f6003",
          "md5": "6e63e6cff1e578dc48f8f13619b21e21",
          "sha256": "0426f15933bb50c09f8d35f8fb368d87b3e66686c3eae5865af8ea9cd13b4120"
        },
        "downloads": -1,
        "filename": "wasmbind-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e63e6cff1e578dc48f8f13619b21e21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 2246,
        "upload_time": "2020-02-03T13:35:56",
        "upload_time_iso_8601": "2020-02-03T13:35:56.410041Z",
        "url": "https://files.pythonhosted.org/packages/6c/62/4a47422691c570276611c01a0f67c888b1aef2998282bd80c5bc079f6003/wasmbind-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc6e3b0fdb320a3143d172139ee848e0b22f984ed836dcd3b00e0b67514113ee",
          "md5": "fd41be8b18155fd95b0ef8de47f66e9b",
          "sha256": "323fc65a4995795778da3d9979281cc6ba9409cbc1e1fab0d978826a10e3b1be"
        },
        "downloads": -1,
        "filename": "wasmbind-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd41be8b18155fd95b0ef8de47f66e9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 1959,
        "upload_time": "2020-02-03T13:35:58",
        "upload_time_iso_8601": "2020-02-03T13:35:58.616747Z",
        "url": "https://files.pythonhosted.org/packages/fc/6e/3b0fdb320a3143d172139ee848e0b22f984ed836dcd3b00e0b67514113ee/wasmbind-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8abce03003be43fbf102bacd02350ebabd955e3e68bddca25cd6fcba7c05e34e",
          "md5": "98999fdbf6f450876297209ede297b30",
          "sha256": "6672a1c2cb6d9baa0696ef5681b63cd14236e48f11e1195f80e23702b7bb68c5"
        },
        "downloads": -1,
        "filename": "wasmbind-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98999fdbf6f450876297209ede297b30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 2955,
        "upload_time": "2020-02-03T16:10:00",
        "upload_time_iso_8601": "2020-02-03T16:10:00.453702Z",
        "url": "https://files.pythonhosted.org/packages/8a/bc/e03003be43fbf102bacd02350ebabd955e3e68bddca25cd6fcba7c05e34e/wasmbind-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea21ce7b4523e6b0e22c9f2928c73b28d19a4eb3fbb8116e81ffeb25fa98a975",
          "md5": "68d73a6f3445e7270dedf4ba0e0db719",
          "sha256": "0e4d97b660d73edaf2cd9dd1dec0cebce0c16edb7d9fbaab05e87450ff14141f"
        },
        "downloads": -1,
        "filename": "wasmbind-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "68d73a6f3445e7270dedf4ba0e0db719",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 2660,
        "upload_time": "2020-02-03T16:10:01",
        "upload_time_iso_8601": "2020-02-03T16:10:01.528516Z",
        "url": "https://files.pythonhosted.org/packages/ea/21/ce7b4523e6b0e22c9f2928c73b28d19a4eb3fbb8116e81ffeb25fa98a975/wasmbind-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5934a448aee33f9ef98ef4a34eec056c9ec289439318ae069451cb123a312d95",
          "md5": "89fb7240da4846cd5fb37bf6c03c4b81",
          "sha256": "1370d779b76a476aa981f5514945fb6cb6b90b5909c2c8dc6b19885d331fbe63"
        },
        "downloads": -1,
        "filename": "wasmbind-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89fb7240da4846cd5fb37bf6c03c4b81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 2945,
        "upload_time": "2020-02-03T16:31:59",
        "upload_time_iso_8601": "2020-02-03T16:31:59.435953Z",
        "url": "https://files.pythonhosted.org/packages/59/34/a448aee33f9ef98ef4a34eec056c9ec289439318ae069451cb123a312d95/wasmbind-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e737187079a4da30759e4f076934c481d31560385e6c832d2e296e28952fafdc",
          "md5": "6b90ffc3456971892d7365794c3a5e55",
          "sha256": "3c926a3492fa1bacaa4e3a6392a26eee3ca9aacdc6a0eb87f90ceb2dd871d819"
        },
        "downloads": -1,
        "filename": "wasmbind-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b90ffc3456971892d7365794c3a5e55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 2643,
        "upload_time": "2020-02-03T16:32:00",
        "upload_time_iso_8601": "2020-02-03T16:32:00.902479Z",
        "url": "https://files.pythonhosted.org/packages/e7/37/187079a4da30759e4f076934c481d31560385e6c832d2e296e28952fafdc/wasmbind-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f4ec1d4eac48ac615d8c92874debdfd0cde6e175c03cf09a70cea194bdc5536",
          "md5": "0412cabdb487294228c17f017040ec02",
          "sha256": "4e1f031dee4ee60e9203be5513f11cd0902d1ee3463d0196c2788448b25476fd"
        },
        "downloads": -1,
        "filename": "wasmbind-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0412cabdb487294228c17f017040ec02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10432,
        "upload_time": "2020-02-10T20:16:00",
        "upload_time_iso_8601": "2020-02-10T20:16:00.515202Z",
        "url": "https://files.pythonhosted.org/packages/6f/4e/c1d4eac48ac615d8c92874debdfd0cde6e175c03cf09a70cea194bdc5536/wasmbind-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a9a09136e77074580643bf584ee2e5086a178223dad887ed62cd8615a6476e3",
          "md5": "ccf69ab1a5c590a6cf3c25fd88fd5109",
          "sha256": "2a780b6ed9958cecc10b85d40f82a61d14332a9baa0633f2a88936c8e4f122e9"
        },
        "downloads": -1,
        "filename": "wasmbind-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ccf69ab1a5c590a6cf3c25fd88fd5109",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 12757,
        "upload_time": "2020-02-10T20:16:02",
        "upload_time_iso_8601": "2020-02-10T20:16:02.353118Z",
        "url": "https://files.pythonhosted.org/packages/7a/9a/09136e77074580643bf584ee2e5086a178223dad887ed62cd8615a6476e3/wasmbind-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1db56018dd2cf3b92ccf031dd88e7b0a60740053bf4a8e28fc9531d2b0adc03a",
          "md5": "8fdd586a1f69520838d4d9830c8c3409",
          "sha256": "ad336299e820d533816548551ce0312c959564a4c95805ac1f6a291b1aac46ec"
        },
        "downloads": -1,
        "filename": "wasmbind-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fdd586a1f69520838d4d9830c8c3409",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10494,
        "upload_time": "2020-08-24T17:49:41",
        "upload_time_iso_8601": "2020-08-24T17:49:41.175114Z",
        "url": "https://files.pythonhosted.org/packages/1d/b5/6018dd2cf3b92ccf031dd88e7b0a60740053bf4a8e28fc9531d2b0adc03a/wasmbind-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0145d0adb551cff5a5bb9218274e4077728a04dcab4293c52cee29b08b6e13b2",
          "md5": "c9b302b9a78523c6b42e6dcb678b0b3c",
          "sha256": "a82ad0d745c419d6cca1ebfb334048d31b8a9a43418399b45a8a9c41ff915c86"
        },
        "downloads": -1,
        "filename": "wasmbind-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c9b302b9a78523c6b42e6dcb678b0b3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 12816,
        "upload_time": "2020-08-24T17:49:42",
        "upload_time_iso_8601": "2020-08-24T17:49:42.242789Z",
        "url": "https://files.pythonhosted.org/packages/01/45/d0adb551cff5a5bb9218274e4077728a04dcab4293c52cee29b08b6e13b2/wasmbind-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1db56018dd2cf3b92ccf031dd88e7b0a60740053bf4a8e28fc9531d2b0adc03a",
        "md5": "8fdd586a1f69520838d4d9830c8c3409",
        "sha256": "ad336299e820d533816548551ce0312c959564a4c95805ac1f6a291b1aac46ec"
      },
      "downloads": -1,
      "filename": "wasmbind-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8fdd586a1f69520838d4d9830c8c3409",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 10494,
      "upload_time": "2020-08-24T17:49:41",
      "upload_time_iso_8601": "2020-08-24T17:49:41.175114Z",
      "url": "https://files.pythonhosted.org/packages/1d/b5/6018dd2cf3b92ccf031dd88e7b0a60740053bf4a8e28fc9531d2b0adc03a/wasmbind-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0145d0adb551cff5a5bb9218274e4077728a04dcab4293c52cee29b08b6e13b2",
        "md5": "c9b302b9a78523c6b42e6dcb678b0b3c",
        "sha256": "a82ad0d745c419d6cca1ebfb334048d31b8a9a43418399b45a8a9c41ff915c86"
      },
      "downloads": -1,
      "filename": "wasmbind-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c9b302b9a78523c6b42e6dcb678b0b3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 12816,
      "upload_time": "2020-08-24T17:49:42",
      "upload_time_iso_8601": "2020-08-24T17:49:42.242789Z",
      "url": "https://files.pythonhosted.org/packages/01/45/d0adb551cff5a5bb9218274e4077728a04dcab4293c52cee29b08b6e13b2/wasmbind-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}