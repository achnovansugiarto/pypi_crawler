{
  "info": {
    "author": "Raul A. de Villa C.",
    "author_email": "r@runfalcon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# RUNFALCON PIPELINE INTEGRATION TOOLS\n\nThis package helps to integrate CI/CD processes with [runfalcon platform](https://www.runfalcon.com)\n\n**REQUIEREMENTS**\n\nNone.\n  \n**USAGE**\n\n```\npython3 -m runfalconpipelineintegration <operation> [ags] [<flags>]\n```\n\n## Operation `authenticate`\nGenerates an [authentication token](https://app.runfalcon.com).  This token will be input for secure operations.\n\n### **Examples**\n\n- Generate authentication token\n\n    ```sh\n    python3 -m runfalconpipelineintegration authenticate login \"myemail@mydomain.com\" password \"secretpassword\"\n    ```\n    You must replace `myemail@mydomain.com` and `secretpassword` for your valid credentials in runfalcon platform.\n    The Output of this operation is an alphanumeric token like this:\n    ```\n    eyJhbGciOiJIUzI1NiIsInR5cCI6Ikicm9sZXMiOm51bGx9LCJpYXQiOjE2NzIyNTQyMDAsImV4cCI6MTY3MjI2MTQwMH0cWBm8Iua2sUFkHbr89epcfN9EtwBDKtqoLMUtdXJSk\n    ```\n\n## Operation `run`\nThis operation runs a performance testing scenario and waitwait for it to finish.\n\n### **Examples**\n\n- Runs a scenario and waits for the execution to finish. If the scenario has not finished in 120 seconds (2 minutes), it will throw an exception.\n\n    ```sh\n    python3 -m runfalconpipelineintegration run token \"nR5cCI6Ikicm9sZXMiOm51bGYXQiOjE2NzIyNDAsImV4cCI6MTY3MjI2MTQwMH0\" client \"My client Name\" application \"My application Name\" scenario \"My scenario code\" timeout 120\n    ```\n    You must replace `nR5cCI6Ikicm9sZXMiOm51bGx9LCJpYXQiOjE2NzIyNTQyMDAsImV4cCI6MTY3MjI2MTQwMH0` for a valid authentication token, `My client Name` for your client name in runfalcon platform, `My application Name` for the name of the application in runfalcon platform aich the scneario belongs to, and `My scenario code` for the code of the existing scenario that you want to run.  \n    \n    >If **silent mode** is needed to avoid verbose info messages, you can add the flag `-q` at the end of the execution command line.\n\n    The output of the command is a json object that specifies the new job id:\n    ```\n    {\n        \"jobId\": 1158298, \n        \"status\": \"SUCCESS\", \n        \"dateCreated\": \"2023-01-01T17:01:01.851Z\", \n        \"duration\": 178.913196, \n        \"kpiLatency\": 3000, \n        \"kpiErrors\": 5, \n        \"kpiThroughput\": 100, \n        \"kpiDeviation\": 3000, \n        \"metricLatency\": 27.74, \n        \"metricErrors\": 0.35, \n        \"metricThroughput\": 1659057.06, \n        \"metricDeviation\": 52.36, \n        \"complianceLatency\": 199.08, \n        \"complianceErrors\": 192.94, \n        \"complianceThroughput\": 200, \n        \"complianceDeviation\": 198.25\n    }\n    ```\n\n    Ih this response:\n\n    | Attribute | Type | Description |\n    | -- | -- | -- |\n    | `jobId` | Job Info | Id corresponding the new created job for this scenario run. |\n    | `status` | Job Info | Indicates if the job finished in `SUCCESS` or `ERROR` status. |\n    | `dateCreated` | Job Info | Date and time the job starts its execution. |\n    | `duration` | Job Info | Indicates the seconds the job took to finalize. |\n    | `kpiLatency` | KPI | Objective value defined for the scenario average latency. |\n    | `kpiErrors` | KPI | Objective value defined for the scenario errors percentage. |\n    | `kpiThroughput` | KPI | Objective value defined for the scenario capacity (requests attended per minute). |\n    | `kpiDeviation` | KPI | Objective value defined for the standard deviation for scenario average latency. |\n    | `metricLatency` | Metric | Measured value for the scenario average latency in this run (For this `jobId`). |\n    | `metricErrors` | Metric | Measured value for the scenario errors percentage in this run (For this `jobId`). |\n    | `metricThroughput` | Metric | Measured value for the capacity (requests attended per minute) in this run (For this `jobId`). |\n    | `metricDeviation` | Metric | Measured value for the standard deviation for scenario average latency in this run (For this `jobId`). |\n    | `complianceLatency` | Compliance | Latency compliance (latency metric vs latency KPI). |\n    | `complianceErrors` | Compliance | Errors percentage compliance (Errors percentage metric vs Errors percentage KPI). |\n    | `complianceThroughput` | Compliance | Capacity compliance (Capacity metric vs Capacity KPI). |\n    | `complianceDeviation` | Compliance | Deviation compliance (Deviation metric vs Deviation KPI). |\n    \n\n## Operation `eval-job-results`\nReceives the json structure resulting from executing a scenario and evaluates its compliance by giving a tolerance level.\n\n### **Examples**\n\n- Receive the json structure resulting of executing an scenario and evaluates its compliance giving a tolerance level.\n\n    ```sh\n    python3 -m runfalconpipelineintegration eval-job-results job-result \"$EXEC_RESULT\" tolerance \"latency=0.8,throughput=0.5,errors=0.95,deviation=0.2\"\n    ```\n    >The output of this command is an string with the compliance validation errors.  If there is not, the string will be empty.\n\n    In this example, the `EXEC_RESULT` variable contains the **json** structure returned by using the [run](#Operation-run) operation.  The values sent in the `tolerance` parameter specify the minimum percentage of compliance accepted for the executed scenario.  For the example:\n    \n    | Performance dimension | Tolerance (Minimun compliance) |\n    | -- | -- |\n    | `latency` | `0.8` (80%) |\n    | `throughput` | `0.5` (50%) |\n    | `errors` | `0.95` (95%) |\n    | `deviation` | `0.2` (20%) |\n\n    If no tolerance value is specified for a performance dimension (Latency, Throughput, errors, deviation), the default tolerance would be zero. It means that a minimum compliance of 100% will be evaluated.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git-codecommit.zone.amazonaws.com/v1/repos/runfalcon-pipeline-integration-py-package",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "runfalcon-pipeline-integration",
    "package_url": "https://pypi.org/project/runfalcon-pipeline-integration/",
    "platform": null,
    "project_url": "https://pypi.org/project/runfalcon-pipeline-integration/",
    "project_urls": {
      "Homepage": "https://git-codecommit.zone.amazonaws.com/v1/repos/runfalcon-pipeline-integration-py-package"
    },
    "release_url": "https://pypi.org/project/runfalcon-pipeline-integration/1.0.7/",
    "requires_dist": [
      "requests",
      "urllib3"
    ],
    "requires_python": ">=3.6",
    "summary": "Runfalcon tools to integrate with pipelines",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16965817,
  "releases": {
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "300c82c1a9890e9d542d63fc42706d673d035aff9a1edee9aa539b6ed2f66f4e",
          "md5": "6093fe629aa78c19a6457b3a6e64765e",
          "sha256": "800f3138af98fe94719127325feb5533853ac27f2c57c81e0bd4c1a24cf810e5"
        },
        "downloads": -1,
        "filename": "runfalcon_pipeline_integration-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6093fe629aa78c19a6457b3a6e64765e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13487,
        "upload_time": "2023-02-21T21:19:11",
        "upload_time_iso_8601": "2023-02-21T21:19:11.320925Z",
        "url": "https://files.pythonhosted.org/packages/30/0c/82c1a9890e9d542d63fc42706d673d035aff9a1edee9aa539b6ed2f66f4e/runfalcon_pipeline_integration-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2552cb630a6d6cdcf1d3251d011efa13b7bafde33262995ea0257e2e11f8b660",
          "md5": "8962232c640226a7c3c15080daba2cfa",
          "sha256": "29f744d80a2c10e33205abb126f5ee04aef3dbc8067d00d6f6b4bf31e0b531d8"
        },
        "downloads": -1,
        "filename": "runfalcon-pipeline-integration-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "8962232c640226a7c3c15080daba2cfa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9477,
        "upload_time": "2023-02-21T21:19:12",
        "upload_time_iso_8601": "2023-02-21T21:19:12.992491Z",
        "url": "https://files.pythonhosted.org/packages/25/52/cb630a6d6cdcf1d3251d011efa13b7bafde33262995ea0257e2e11f8b660/runfalcon-pipeline-integration-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "300c82c1a9890e9d542d63fc42706d673d035aff9a1edee9aa539b6ed2f66f4e",
        "md5": "6093fe629aa78c19a6457b3a6e64765e",
        "sha256": "800f3138af98fe94719127325feb5533853ac27f2c57c81e0bd4c1a24cf810e5"
      },
      "downloads": -1,
      "filename": "runfalcon_pipeline_integration-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6093fe629aa78c19a6457b3a6e64765e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13487,
      "upload_time": "2023-02-21T21:19:11",
      "upload_time_iso_8601": "2023-02-21T21:19:11.320925Z",
      "url": "https://files.pythonhosted.org/packages/30/0c/82c1a9890e9d542d63fc42706d673d035aff9a1edee9aa539b6ed2f66f4e/runfalcon_pipeline_integration-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2552cb630a6d6cdcf1d3251d011efa13b7bafde33262995ea0257e2e11f8b660",
        "md5": "8962232c640226a7c3c15080daba2cfa",
        "sha256": "29f744d80a2c10e33205abb126f5ee04aef3dbc8067d00d6f6b4bf31e0b531d8"
      },
      "downloads": -1,
      "filename": "runfalcon-pipeline-integration-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "8962232c640226a7c3c15080daba2cfa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9477,
      "upload_time": "2023-02-21T21:19:12",
      "upload_time_iso_8601": "2023-02-21T21:19:12.992491Z",
      "url": "https://files.pythonhosted.org/packages/25/52/cb630a6d6cdcf1d3251d011efa13b7bafde33262995ea0257e2e11f8b660/runfalcon-pipeline-integration-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}