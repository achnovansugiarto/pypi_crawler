{
  "info": {
    "author": "",
    "author_email": "Simon Glass <sjg@chromium.org>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. SPDX-License-Identifier: GPL-2.0+\n\nBuildman build tool\n===================\n\nQuick-start\n-----------\n\nIf you just want to quickly set up buildman so you can build something (for\nexample Raspberry Pi 2):\n\n.. code-block:: bash\n\n   cd /path/to/u-boot\n   PATH=$PATH:`pwd`/tools/buildman\n   buildman --fetch-arch arm\n   buildman -k rpi_2\n   ls ../current/rpi_2\n   # u-boot.bin is the output image\n\n\nWhat is this?\n-------------\n\nThis tool handles building U-Boot to check that you have not broken it\nwith your patch series. It can build each individual commit and report\nwhich boards fail on which commits, and which errors come up. It aims\nto make full use of multi-processor machines.\n\nA key feature of buildman is its output summary, which allows warnings,\nerrors or image size increases in a particular commit or board to be\nquickly identified and the offending commit pinpointed. This can be a big\nhelp for anyone working with >10 patches at a time.\n\n\nCaveats\n-------\n\nBuildman can be stopped and restarted, in which case it will continue\nwhere it left off. This should happen cleanly and without side-effects.\nIf not, it is a bug, for which a patch would be welcome.\n\nBuildman gets so tied up in its work that it can ignore the outside world.\nYou may need to press Ctrl-C several times to quit it. Also it will print\nout various exceptions when stopped. You may have to kill it since the\nCtrl-C handling is somewhat broken.\n\n\nTheory of Operation\n-------------------\n\n(please read this section in full twice or you will be perpetually confused)\n\nBuildman is a builder. It is not make, although it runs make. It does not\nproduce any useful output on the terminal while building, except for\nprogress information (but see -v below). All the output (errors, warnings and\nbinaries if you ask for them) is stored in output directories, which you can\nlook at from a separate 'buildman -s' instance while the build is progressing,\nor when it is finished.\n\nBuildman is designed to build entire git branches, i.e. muliple commits. It\ncan be run repeatedly on the same branch after making changes to commits on\nthat branch. In this case it will automatically rebuild commits which have\nchanged (and remove its old results for that commit). It is possible to build\na branch for one board, then later build it for another board. This adds to\nthe output, so now you have results for two boards. If you want buildman to\nre-build a commit it has already built (e.g. because of a toolchain update),\nuse the -f flag.\n\nBuildman produces a concise summary of which boards succeeded and failed.\nIt shows which commit introduced which board failure using a simple\nred/green colour coding (with yellow/cyan for warnings). Full error\ninformation can be requested, in which case it is de-duped and displayed\nagainst the commit that introduced the error. An example workflow is below.\n\nBuildman stores image size information and can report changes in image size\nfrom commit to commit. An example of this is below.\n\nBuildman starts multiple threads, and each thread builds for one board at\na time. A thread starts at the first commit, configures the source for your\nboard and builds it. Then it checks out the next commit and does an\nincremental build (i.e. not using 'make xxx_defconfig' unless you use -C).\nEventually the thread reaches the last commit and stops. If a commit causes\nan error or warning, buildman will try it again after reconfiguring (but see\n-Q). Thus some commits may be built twice, with the first result silently\ndiscarded. Lots of errors and warnings will causes lots of reconfigures and your\nbuild will be very slow. This is because a file that produces just a warning\nwould not normally be rebuilt in an incremental build. Once a thread finishes\nbuilding all the commits for a board, it starts on the commits for another\nboard.\n\nBuildman works in an entirely separate place from your U-Boot repository.\nIt creates a separate working directory for each thread, and puts the\noutput files in the working directory, organised by commit name and board\nname, in a two-level hierarchy (but see -P).\n\nBuildman is invoked in your U-Boot directory, the one with the .git\ndirectory. It clones this repository into a copy for each thread, and the\nthreads do not affect the state of your git repository. Any checkouts done\nby the thread affect only the working directory for that thread.\n\nBuildman automatically selects the correct tool chain for each board. You\nmust supply suitable tool chains (see --fetch-arch), but buildman takes care\nof selecting the right one.\n\nBuildman generally builds a branch (with the -b flag), and in this case\nbuilds the upstream commit as well, for comparison. So even if you have one\ncommit in your branch, two commits will be built. Put all your commits in a\nbranch, set the branch's upstream to a valid value, and all will be well.\nOtherwise buildman will perform random actions. Use -n to check what the\nrandom actions might be.\n\nBuildman effectively has two modes: without -s it builds, with -s it\nsummarises the results of previous (or active) builds.\n\nIf you just want to build the current source tree, leave off the -b flag.\nThis will display results and errors as they happen. You can still look at\nthem later using -se. Note that buildman will assume that the source has\nchanged, and will build all specified boards in this case.\n\nBuildman is optimised for building many commits at once, for many boards.\nOn multi-core machines, Buildman is fast because it uses most of the\navailable CPU power. When it gets to the end, or if you are building just\na few commits or boards, it will be pretty slow. As a tip, if you don't\nplan to use your machine for anything else, you can use -T to increase the\nnumber of threads beyond the default.\n\n\nSelecting which boards to build\n-------------------------------\n\nBuildman lets you build all boards, or a subset. Specify the subset by passing\ncommand-line arguments that list the desired build target, architecture,\nCPU, board name, vendor, SoC or options. Multiple arguments are allowed. Each\nargument will be interpreted as a regular expression, so behaviour is a superset\nof exact or substring matching. Examples are:\n\n- 'tegra20' - all boards with a Tegra20 SoC\n- 'tegra' - all boards with any Tegra Soc (Tegra20, Tegra30, Tegra114...)\n- '^tegra[23]0$' - all boards with either Tegra20 or Tegra30 SoC\n- 'powerpc' - all PowerPC boards\n\nWhile the default is to OR the terms together, you can also make use of\nthe '&' operator to limit the selection:\n\n- 'freescale & arm sandbox' - all Freescale boards with ARM architecture, plus\n  sandbox\n\nYou can also use -x to specifically exclude some boards. For example:\n\n  buildman arm -x nvidia,freescale,.*ball$\n\nmeans to build all arm boards except nvidia, freescale and anything ending\nwith 'ball'.\n\nFor building specific boards you can use the --boards (or --bo) option, which\ntakes a comma-separated list of board target names and be used multiple times\non the command line:\n\n.. code-block:: bash\n\n  buildman --boards sandbox,snow --boards\n\nIt is convenient to use the -n option to see what will be built based on\nthe subset given. Use -v as well to get an actual list of boards.\n\nBuildman does not store intermediate object files. It optionally copies\nthe binary output into a directory when a build is successful (-k). Size\ninformation is always recorded. It needs a fair bit of disk space to work,\ntypically 250MB per thread.\n\n\nSetting up\n----------\n\n#. Get the U-Boot source. You probably already have it, but if not these\n   steps should get you started with a repo and some commits for testing.\n\n   .. code-block:: bash\n\n      cd /path/to/u-boot\n      git clone git://git.denx.de/u-boot.git .\n      git checkout -b my-branch origin/master\n      # Add some commits to the branch, reading for testing\n\n#. Create ~/.buildman to tell buildman where to find tool chains (see\n   buildman_settings_ for details). As an example::\n\n   # Buildman settings file\n\n   [toolchain]\n   root: /\n   rest: /toolchains/*\n   eldk: /opt/eldk-4.2\n   arm: /opt/linaro/gcc-linaro-arm-linux-gnueabihf-4.8-2013.08_linux\n   aarch64: /opt/linaro/gcc-linaro-aarch64-none-elf-4.8-2013.10_linux\n\n   [toolchain-prefix]\n   arc = /opt/arc/arc_gnu_2021.03_prebuilt_elf32_le_linux_install/bin/arc-elf32-\n\n   [toolchain-alias]\n   riscv = riscv32\n   sh = sh4\n   x86: i386\n\n\n   This selects the available toolchain paths. Add the base directory for\n   each of your toolchains here. Buildman will search inside these directories\n   and also in any '/usr' and '/usr/bin' subdirectories.\n\n   Make sure the tags (here root: rest: and eldk:) are unique.\n\n   The toolchain-alias section indicates that the i386 toolchain should be used\n   to build x86 commits.\n\n   Note that you can also specific exactly toolchain prefixes if you like::\n\n      [toolchain-prefix]\n      arm: /opt/arm-eabi-4.6/bin/arm-eabi-\n\n   or even::\n\n      [toolchain-prefix]\n      arm: /opt/arm-eabi-4.6/bin/arm-eabi-gcc\n\n   This tells buildman that you want to use this exact toolchain for the arm\n   architecture. This will override any toolchains found by searching using the\n   [toolchain] settings.\n\n   Since the toolchain prefix is an explicit request, buildman will report an\n   error if a toolchain is not found with that prefix. The current PATH will be\n   searched, so it is possible to use::\n\n      [toolchain-prefix]\n      arm: arm-none-eabi-\n\n   and buildman will find arm-none-eabi-gcc in /usr/bin if you have it\n   installed.\n\n   Another example::\n\n      [toolchain-wrapper]\n      wrapper: ccache\n\n   This tells buildman to use a compiler wrapper in front of CROSS_COMPILE. In\n   this example, ccache. It doesn't affect the toolchain scan. The wrapper is\n   added when CROSS_COMPILE environtal variable is set. The name in this\n   section is ignored. If more than one line is provided, only the last one\n   is taken.\n\n#. Make sure you have the require Python pre-requisites\n\n   Buildman uses multiprocessing, Queue, shutil, StringIO, ConfigParser and\n   urllib2. These should normally be available, but if you get an error like\n   this then you will need to obtain those modules::\n\n      ImportError: No module named multiprocessing\n\n\n#. Check the available toolchains\n\n   Run this check to make sure that you have a toolchain for every architecture::\n\n      $ ./tools/buildman/buildman --list-tool-chains\n      Scanning for tool chains\n         - scanning prefix '/opt/gcc-4.6.3-nolibc/x86_64-linux/bin/x86_64-linux-'\n      Tool chain test:  OK, arch='x86', priority 1\n         - scanning prefix '/opt/arm-eabi-4.6/bin/arm-eabi-'\n      Tool chain test:  OK, arch='arm', priority 1\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/i386-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/i386-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/i386-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/i386-linux/bin/i386-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/i386-linux/usr/bin'\n      Tool chain test:  OK, arch='i386', priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/aarch64-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/aarch64-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/aarch64-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/aarch64-linux/usr/bin'\n      Tool chain test:  OK, arch='aarch64', priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/microblaze-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/microblaze-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/microblaze-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/microblaze-linux/bin/microblaze-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/microblaze-linux/usr/bin'\n      Tool chain test:  OK, arch='microblaze', priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/mips64-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/mips64-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/mips64-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/mips64-linux/bin/mips64-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/mips64-linux/usr/bin'\n      Tool chain test:  OK, arch='mips64', priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/sparc64-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/sparc64-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/sparc64-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/sparc64-linux/bin/sparc64-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/sparc64-linux/usr/bin'\n      Tool chain test:  OK, arch='sparc64', priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/arm-unknown-linux-gnueabi'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/arm-unknown-linux-gnueabi/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/arm-unknown-linux-gnueabi/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/arm-unknown-linux-gnueabi/usr/bin'\n      Tool chain test:  OK, arch='arm', priority 3\n      Toolchain '/toolchains/gcc-4.9.0-nolibc/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-gcc' at priority 3 will be ignored because another toolchain for arch 'arm' has priority 1\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/sparc-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/sparc-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/sparc-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/sparc-linux/bin/sparc-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/sparc-linux/usr/bin'\n      Tool chain test:  OK, arch='sparc', priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/mips-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/mips-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/mips-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/mips-linux/bin/mips-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/mips-linux/usr/bin'\n      Tool chain test:  OK, arch='mips', priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/x86_64-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/x86_64-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/x86_64-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/x86_64-linux/bin/x86_64-linux-gcc'\n               - found '/toolchains/gcc-4.9.0-nolibc/x86_64-linux/bin/x86_64-linux-x86_64-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/x86_64-linux/usr/bin'\n      Tool chain test:  OK, arch='x86_64', priority 4\n      Tool chain test:  OK, arch='x86_64', priority 4\n      Toolchain '/toolchains/gcc-4.9.0-nolibc/x86_64-linux/bin/x86_64-linux-x86_64-linux-gcc' at priority 4 will be ignored because another toolchain for arch 'x86_64' has priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/m68k-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/m68k-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/m68k-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/m68k-linux/bin/m68k-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/m68k-linux/usr/bin'\n      Tool chain test:  OK, arch='m68k', priority 4\n         - scanning path '/toolchains/gcc-4.9.0-nolibc/powerpc-linux'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/powerpc-linux/.'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/powerpc-linux/bin'\n               - found '/toolchains/gcc-4.9.0-nolibc/powerpc-linux/bin/powerpc-linux-gcc'\n            - looking in '/toolchains/gcc-4.9.0-nolibc/powerpc-linux/usr/bin'\n      Tool chain test:  OK, arch='powerpc', priority 4\n         - scanning path '/toolchains/gcc-4.6.3-nolibc/bfin-uclinux'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/bfin-uclinux/.'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/bfin-uclinux/bin'\n               - found '/toolchains/gcc-4.6.3-nolibc/bfin-uclinux/bin/bfin-uclinux-gcc'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/bfin-uclinux/usr/bin'\n      Tool chain test:  OK, arch='bfin', priority 6\n         - scanning path '/toolchains/gcc-4.6.3-nolibc/sparc-linux'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/sparc-linux/.'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/sparc-linux/bin'\n               - found '/toolchains/gcc-4.6.3-nolibc/sparc-linux/bin/sparc-linux-gcc'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/sparc-linux/usr/bin'\n      Tool chain test:  OK, arch='sparc', priority 4\n      Toolchain '/toolchains/gcc-4.6.3-nolibc/sparc-linux/bin/sparc-linux-gcc' at priority 4 will be ignored because another toolchain for arch 'sparc' has priority 4\n         - scanning path '/toolchains/gcc-4.6.3-nolibc/mips-linux'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/mips-linux/.'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/mips-linux/bin'\n               - found '/toolchains/gcc-4.6.3-nolibc/mips-linux/bin/mips-linux-gcc'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/mips-linux/usr/bin'\n      Tool chain test:  OK, arch='mips', priority 4\n      Toolchain '/toolchains/gcc-4.6.3-nolibc/mips-linux/bin/mips-linux-gcc' at priority 4 will be ignored because another toolchain for arch 'mips' has priority 4\n         - scanning path '/toolchains/gcc-4.6.3-nolibc/m68k-linux'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/m68k-linux/.'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/m68k-linux/bin'\n               - found '/toolchains/gcc-4.6.3-nolibc/m68k-linux/bin/m68k-linux-gcc'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/m68k-linux/usr/bin'\n      Tool chain test:  OK, arch='m68k', priority 4\n      Toolchain '/toolchains/gcc-4.6.3-nolibc/m68k-linux/bin/m68k-linux-gcc' at priority 4 will be ignored because another toolchain for arch 'm68k' has priority 4\n         - scanning path '/toolchains/gcc-4.6.3-nolibc/powerpc-linux'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/powerpc-linux/.'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/powerpc-linux/bin'\n               - found '/toolchains/gcc-4.6.3-nolibc/powerpc-linux/bin/powerpc-linux-gcc'\n            - looking in '/toolchains/gcc-4.6.3-nolibc/powerpc-linux/usr/bin'\n      Tool chain test:  OK, arch='powerpc', priority 4\n      Tool chain test:  OK, arch='or32', priority 4\n         - scanning path '/'\n            - looking in '/.'\n            - looking in '/bin'\n            - looking in '/usr/bin'\n               - found '/usr/bin/i586-mingw32msvc-gcc'\n               - found '/usr/bin/c89-gcc'\n               - found '/usr/bin/x86_64-linux-gnu-gcc'\n               - found '/usr/bin/gcc'\n               - found '/usr/bin/c99-gcc'\n               - found '/usr/bin/arm-linux-gnueabi-gcc'\n               - found '/usr/bin/aarch64-linux-gnu-gcc'\n               - found '/usr/bin/winegcc'\n               - found '/usr/bin/arm-linux-gnueabihf-gcc'\n      Tool chain test:  OK, arch='i586', priority 11\n      Tool chain test:  OK, arch='c89', priority 11\n      Tool chain test:  OK, arch='x86_64', priority 4\n      Toolchain '/usr/bin/x86_64-linux-gnu-gcc' at priority 4 will be ignored because another toolchain for arch 'x86_64' has priority 4\n      Tool chain test:  OK, arch='sandbox', priority 11\n      Tool chain test:  OK, arch='c99', priority 11\n      Tool chain test:  OK, arch='arm', priority 4\n      Toolchain '/usr/bin/arm-linux-gnueabi-gcc' at priority 4 will be ignored because another toolchain for arch 'arm' has priority 1\n      Tool chain test:  OK, arch='aarch64', priority 4\n      Toolchain '/usr/bin/aarch64-linux-gnu-gcc' at priority 4 will be ignored because another toolchain for arch 'aarch64' has priority 4\n      Tool chain test:  OK, arch='sandbox', priority 11\n      Toolchain '/usr/bin/winegcc' at priority 11 will be ignored because another toolchain for arch 'sandbox' has priority 11\n      Tool chain test:  OK, arch='arm', priority 4\n      Toolchain '/usr/bin/arm-linux-gnueabihf-gcc' at priority 4 will be ignored because another toolchain for arch 'arm' has priority 1\n      List of available toolchains (34):\n      aarch64   : /toolchains/gcc-4.9.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc\n      alpha     : /toolchains/gcc-4.9.0-nolibc/alpha-linux/bin/alpha-linux-gcc\n      am33_2.0  : /toolchains/gcc-4.9.0-nolibc/am33_2.0-linux/bin/am33_2.0-linux-gcc\n      arm       : /opt/arm-eabi-4.6/bin/arm-eabi-gcc\n      bfin      : /toolchains/gcc-4.6.3-nolibc/bfin-uclinux/bin/bfin-uclinux-gcc\n      c89       : /usr/bin/c89-gcc\n      c99       : /usr/bin/c99-gcc\n      frv       : /toolchains/gcc-4.9.0-nolibc/frv-linux/bin/frv-linux-gcc\n      h8300     : /toolchains/gcc-4.9.0-nolibc/h8300-elf/bin/h8300-elf-gcc\n      hppa      : /toolchains/gcc-4.9.0-nolibc/hppa-linux/bin/hppa-linux-gcc\n      hppa64    : /toolchains/gcc-4.9.0-nolibc/hppa64-linux/bin/hppa64-linux-gcc\n      i386      : /toolchains/gcc-4.9.0-nolibc/i386-linux/bin/i386-linux-gcc\n      i586      : /usr/bin/i586-mingw32msvc-gcc\n      ia64      : /toolchains/gcc-4.9.0-nolibc/ia64-linux/bin/ia64-linux-gcc\n      m32r      : /toolchains/gcc-4.9.0-nolibc/m32r-linux/bin/m32r-linux-gcc\n      m68k      : /toolchains/gcc-4.9.0-nolibc/m68k-linux/bin/m68k-linux-gcc\n      microblaze: /toolchains/gcc-4.9.0-nolibc/microblaze-linux/bin/microblaze-linux-gcc\n      mips      : /toolchains/gcc-4.9.0-nolibc/mips-linux/bin/mips-linux-gcc\n      mips64    : /toolchains/gcc-4.9.0-nolibc/mips64-linux/bin/mips64-linux-gcc\n      or32      : /toolchains/gcc-4.5.1-nolibc/or32-linux/bin/or32-linux-gcc\n      powerpc   : /toolchains/gcc-4.9.0-nolibc/powerpc-linux/bin/powerpc-linux-gcc\n      powerpc64 : /toolchains/gcc-4.9.0-nolibc/powerpc64-linux/bin/powerpc64-linux-gcc\n      ppc64le   : /toolchains/gcc-4.9.0-nolibc/ppc64le-linux/bin/ppc64le-linux-gcc\n      s390x     : /toolchains/gcc-4.9.0-nolibc/s390x-linux/bin/s390x-linux-gcc\n      sandbox   : /usr/bin/gcc\n      sh4       : /toolchains/gcc-4.6.3-nolibc/sh4-linux/bin/sh4-linux-gcc\n      sparc     : /toolchains/gcc-4.9.0-nolibc/sparc-linux/bin/sparc-linux-gcc\n      sparc64   : /toolchains/gcc-4.9.0-nolibc/sparc64-linux/bin/sparc64-linux-gcc\n      tilegx    : /toolchains/gcc-4.6.2-nolibc/tilegx-linux/bin/tilegx-linux-gcc\n      x86       : /opt/gcc-4.6.3-nolibc/x86_64-linux/bin/x86_64-linux-gcc\n      x86_64    : /toolchains/gcc-4.9.0-nolibc/x86_64-linux/bin/x86_64-linux-gcc\n\n\n   You can see that everything is covered, even some strange ones that won't\n   be used (c88 and c99). This is a feature.\n\n\n#. Install new toolchains if needed\n\n   You can download toolchains and update the [toolchain] section of the\n   settings file to find them.\n\n   To make this easier, buildman can automatically download and install\n   toolchains from kernel.org. First list the available architectures::\n\n      $ ./tools/buildman/buildman --fetch-arch list\n      Checking: https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/4.6.3/\n      Checking: https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/4.6.2/\n      Checking: https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/4.5.1/\n      Checking: https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/4.2.4/\n      Available architectures: alpha am33_2.0 arm bfin cris crisv32 frv h8300\n      hppa hppa64 i386 ia64 m32r m68k mips mips64 or32 powerpc powerpc64 s390x sh4\n      sparc sparc64 tilegx x86_64 xtensa\n\n   Then pick one and download it::\n\n      $ ./tools/buildman/buildman --fetch-arch or32\n      Checking: https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/4.6.3/\n      Checking: https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/4.6.2/\n      Checking: https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/4.5.1/\n      Downloading: https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/4.5.1//x86_64-gcc-4.5.1-nolibc_or32-linux.tar.xz\n      Unpacking to: /home/sjg/.buildman-toolchains\n      Testing\n            - looking in '/home/sjg/.buildman-toolchains/gcc-4.5.1-nolibc/or32-linux/.'\n            - looking in '/home/sjg/.buildman-toolchains/gcc-4.5.1-nolibc/or32-linux/bin'\n               - found '/home/sjg/.buildman-toolchains/gcc-4.5.1-nolibc/or32-linux/bin/or32-linux-gcc'\n      Tool chain test:  OK\n\n   Or download them all from kernel.org and move them to /toolchains directory:\n\n   .. code-block:: bash\n\n      ./tools/buildman/buildman --fetch-arch all\n      sudo mkdir -p /toolchains\n      sudo mv ~/.buildman-toolchains/*/* /toolchains/\n\n   For those not available from kernel.org, download from the following links:\n\n   - `Arc Toolchain`_\n\n   Buildman should now be set up to use your new toolchain.\n\n   At the time of writing, U-Boot has these architectures:\n\n      arc, arm, m68k, microblaze, mips, nios2, powerpc, sandbox, sh, x86, xtensa\n\n\nHow to run it\n-------------\n\nFirst do a dry run using the -n flag: (replace <branch> with a real, local\nbranch with a valid upstream):\n\n.. code-block:: bash\n\n   ./tools/buildman/buildman -b <branch> -n\n\nIf it can't detect the upstream branch, try checking out the branch, and\ndoing something like 'git branch --set-upstream-to upstream/master'\nor something similar. Buildman will try to guess a suitable upstream branch\nif it can't find one (you will see a message like \"Guessing upstream as ...\").\nYou can also use the -c option to manually specify the number of commits to\nbuild.\n\nAs an example::\n\n   Dry run, so not doing much. But I would do this:\n\n   Building 18 commits for 1059 boards (4 threads, 1 job per thread)\n   Build directory: ../lcd9b\n       5bb3505 Merge branch 'master' of git://git.denx.de/u-boot-arm\n       c18f1b4 tegra: Use const for pinmux_config_pingroup/table()\n       2f043ae tegra: Add display support to funcmux\n       e349900 tegra: fdt: Add pwm binding and node\n       424a5f0 tegra: fdt: Add LCD definitions for Tegra\n       0636ccf tegra: Add support for PWM\n       a994fe7 tegra: Add SOC support for display/lcd\n       fcd7350 tegra: Add LCD driver\n       4d46e9d tegra: Add LCD support to Nvidia boards\n       991bd48 arm: Add control over cachability of memory regions\n       54e8019 lcd: Add CONFIG_LCD_ALIGNMENT to select frame buffer alignment\n       d92aff7 lcd: Add support for flushing LCD fb from dcache after update\n       dbd0677 tegra: Align LCD frame buffer to section boundary\n       0cff9b8 tegra: Support control of cache settings for LCD\n       9c56900 tegra: fdt: Add LCD definitions for Seaboard\n       5cc29db lcd: Add CONFIG_CONSOLE_SCROLL_LINES option to speed console\n       cac5a23 tegra: Enable display/lcd support on Seaboard\n       49ff541 wip\n\n   Total boards to build for each commit: 1059\n\nThis shows that it will build all 1059 boards, using 4 threads (because\nwe have a 4-core CPU). Each thread will run with -j1, meaning that each\nmake job will use a single CPU. The list of commits to be built helps you\nconfirm that things look about right. Notice that buildman has chosen a\n'base' directory for you, immediately above your source tree.\n\nBuildman works entirely inside the base directory, here ../lcd9b,\ncreating a working directory for each thread, and creating output\ndirectories for each commit and board.\n\n\nSuggested Workflow\n------------------\n\nTo run the build for real, take off the -n:\n\n.. code-block:: bash\n\n   ./tools/buildman/buildman -b <branch>\n\nBuildman will set up some working directories, and get started. After a\nminute or so it will settle down to a steady pace, with a display like this::\n\n   Building 18 commits for 1059 boards (4 threads, 1 job per thread)\n     528   36  124 /19062    -18374  1:13:30  : SIMPC8313_SP\n\nThis means that it is building 19062 board/commit combinations. So far it\nhas managed to successfully build 528. Another 36 have built with warnings,\nand 124 more didn't build at all. It has 18374 builds left to complete.\nBuildman expects to complete the process in around an hour and a quarter.\nUse this time to buy a faster computer.\n\n\nTo find out how the build went, ask for a summary with -s. You can do this\neither before the build completes (presumably in another terminal) or\nafterwards. Let's work through an example of how this is used::\n\n   $ ./tools/buildman/buildman -b lcd9b -s\n   ...\n   01: Merge branch 'master' of git://git.denx.de/u-boot-arm\n      powerpc:   + galaxy5200_LOWBOOT\n   02: tegra: Use const for pinmux_config_pingroup/table()\n   03: tegra: Add display support to funcmux\n   04: tegra: fdt: Add pwm binding and node\n   05: tegra: fdt: Add LCD definitions for Tegra\n   06: tegra: Add support for PWM\n   07: tegra: Add SOC support for display/lcd\n   08: tegra: Add LCD driver\n   09: tegra: Add LCD support to Nvidia boards\n   10: arm: Add control over cachability of memory regions\n   11: lcd: Add CONFIG_LCD_ALIGNMENT to select frame buffer alignment\n   12: lcd: Add support for flushing LCD fb from dcache after update\n          arm:   + lubbock\n   13: tegra: Align LCD frame buffer to section boundary\n   14: tegra: Support control of cache settings for LCD\n   15: tegra: fdt: Add LCD definitions for Seaboard\n   16: lcd: Add CONFIG_CONSOLE_SCROLL_LINES option to speed console\n   17: tegra: Enable display/lcd support on Seaboard\n   18: wip\n\nThis shows which commits have succeeded and which have failed. In this case\nthe build is still in progress so many boards are not built yet (use -u to\nsee which ones). But already we can see a few failures. The galaxy5200_LOWBOOT\nnever builds correctly. This could be a problem with our toolchain, or it\ncould be a bug in the upstream. The good news is that we probably don't need\nto blame our commits. The bad news is that our commits are not tested on that\nboard.\n\nCommit 12 broke lubbock. That's what the '+ lubbock', in red, means. The\nfailure is never fixed by a later commit, or you would see lubbock again, in\ngreen, without the +.\n\nTo see the actual error::\n\n   $ ./tools/buildman/buildman -b <branch> -se\n   ...\n   12: lcd: Add support for flushing LCD fb from dcache after update\n          arm:   + lubbock\n   +common/libcommon.o: In function `lcd_sync':\n   +common/lcd.c:120: undefined reference to `flush_dcache_range'\n   +arm-none-linux-gnueabi-ld: BFD (Sourcery G++ Lite 2010q1-202) 2.19.51.20090709 assertion fail /scratch/julian/2010q1-release-linux-lite/obj/binutils-src-2010q1-202-arm-none-linux-gnueabi-i686-pc-linux-gnu/bfd/elf32-arm.c:12572\n   +make: *** [build/u-boot] Error 139\n   13: tegra: Align LCD frame buffer to section boundary\n   14: tegra: Support control of cache settings for LCD\n   15: tegra: fdt: Add LCD definitions for Seaboard\n   16: lcd: Add CONFIG_CONSOLE_SCROLL_LINES option to speed console\n   -common/lcd.c:120: undefined reference to `flush_dcache_range'\n   +common/lcd.c:125: undefined reference to `flush_dcache_range'\n   17: tegra: Enable display/lcd support on Seaboard\n   18: wip\n\nSo the problem is in lcd.c, due to missing cache operations. This information\nshould be enough to work out what that commit is doing to break these\nboards. (In this case pxa did not have cache operations defined).\n\nNote that if there were other boards with errors, the above command would\nshow their errors also. Each line is shown only once. So if lubbock and snow\nproduce the same error, we just see::\n\n   12: lcd: Add support for flushing LCD fb from dcache after update\n          arm:   + lubbock snow\n   +common/libcommon.o: In function `lcd_sync':\n   +common/lcd.c:120: undefined reference to `flush_dcache_range'\n   +arm-none-linux-gnueabi-ld: BFD (Sourcery G++ Lite 2010q1-202) 2.19.51.20090709 assertion fail /scratch/julian/2010q1-release-linux-lite/obj/binutils-src-2010q1-202-arm-none-linux-gnueabi-i686-pc-linux-gnu/bfd/elf32-arm.c:12572\n   +make: *** [build/u-boot] Error 139\n\nBut if you did want to see just the errors for lubbock, use:\n\n.. code-block:: bash\n\n   ./tools/buildman/buildman -b <branch> -se lubbock\n\nIf you see error lines marked with '-', that means that the errors were fixed\nby that commit. Sometimes commits can be in the wrong order, so that a\nbreakage is introduced for a few commits and fixed by later commits. This\nshows up clearly with buildman. You can then reorder the commits and try\nagain.\n\nAt commit 16, the error moves: you can see that the old error at line 120\nis fixed, but there is a new one at line 126. This is probably only because\nwe added some code and moved the broken line further down the file.\n\nAs mentioned, if many boards have the same error, then -e will display the\nerror only once. This makes the output as concise as possible. To see which\nboards have each error, use -l. So it is safe to omit the board name - you\nwill not get lots of repeated output for every board.\n\nBuildman tries to distinguish warnings from errors, and shows warning lines\nseparately with a 'w' prefix. Warnings introduced show as yellow. Warnings\nfixed show as cyan.\n\nThe full build output in this case is available in::\n\n   ../lcd9b/12_of_18_gd92aff7_lcd--Add-support-for/lubbock/\n\nFiles:\n\ndone\n   Indicates the build was done, and holds the return code from make. This is 0\n   for a good build, typically 2 for a failure.\n\nerr\n   Output from stderr, if any. Errors and warnings appear here.\n\nlog\n   Output from stdout. Normally there isn't any since buildman runs in silent\n   mode. Use -V to force a verbose build (this passes V=1 to 'make')\n\ntoolchain\n   Shows information about the toolchain used for the build.\n\nsizes\n   Shows image size information.\n\nIt is possible to get the build binary output there also. Use the -k option\nfor this. In that case you will also see some output files, like:\n\n- System.map\n- toolchain\n- u-boot\n- u-boot.bin\n- u-boot.map\n- autoconf.mk\n- SPL/TPL versions like u-boot-spl and u-boot-spl.bin if available\n\n\nChecking Image Sizes\n--------------------\n\nA key requirement for U-Boot is that you keep code/data size to a minimum.\nWhere a new feature increases this noticeably it should normally be put\nbehind a CONFIG flag so that boards can leave it disabled and keep the image\nsize more or less the same with each new release.\n\nTo check the impact of your commits on image size, use -S. For example::\n\n   $ ./tools/buildman/buildman -b us-x86 -sS\n   Summary of 10 commits for 1066 boards (4 threads, 1 job per thread)\n   01: MAKEALL: add support for per architecture toolchains\n   02: x86: Add function to get top of usable ram\n          x86: (for 1/3 boards)  text -272.0  rodata +41.0\n   03: x86: Add basic cache operations\n   04: x86: Permit bootstage and timer data to be used prior to relocation\n          x86: (for 1/3 boards)  data +16.0\n   05: x86: Add an __end symbol to signal the end of the U-Boot binary\n          x86: (for 1/3 boards)  text +76.0\n   06: x86: Rearrange the output input to remove BSS\n          x86: (for 1/3 boards)  bss -2140.0\n   07: x86: Support relocation of FDT on start-up\n          x86: +   coreboot-x86\n   08: x86: Add error checking to x86 relocation code\n   09: x86: Adjust link device tree include file\n   10: x86: Enable CONFIG_OF_CONTROL on coreboot\n\n\nYou can see that image size only changed on x86, which is good because this\nseries is not supposed to change any other board. From commit 7 onwards the\nbuild fails so we don't get code size numbers. The numbers are fractional\nbecause they are an average of all boards for that architecture. The\nintention is to allow you to quickly find image size problems introduced by\nyour commits.\n\nNote that the 'text' region and 'rodata' are split out. You should add the\ntwo together to get the total read-only size (reported as the first column\nin the output from binutil's 'size' utility).\n\nA useful option is --step which lets you skip some commits. For example\n--step 2 will show the image sizes for only every 2nd commit (so it will\ncompare the image sizes of the 1st, 3rd, 5th... commits). You can also use\n--step 0 which will compare only the first and last commits. This is useful\nfor an overview of how your entire series affects code size. It will build\nonly the upstream commit and your final branch commit.\n\nYou can also use -d to see a detailed size breakdown for each board. This\nlist is sorted in order from largest growth to largest reduction.\n\nIt is even possible to go a little further with the -B option (--bloat). This\nshows where U-Boot has bloated, breaking the size change down to the function\nlevel. Example output is below::\n\n   $ ./tools/buildman/buildman -b us-mem4 -sSdB\n   ...\n   19: Roll crc32 into hash infrastructure\n          arm: (for 10/10 boards)  all -143.4  bss +1.2  data -4.8  rodata -48.2 text -91.6\n               paz00          :  all +23  bss -4  rodata -29  text +56\n                  u-boot: add: 1/0, grow: 3/-2 bytes: 168/-104 (64)\n                    function                                   old     new   delta\n                    hash_command                                80     160     +80\n                    crc32_wd_buf                                 -      56     +56\n                    ext4fs_read_file                           540     568     +28\n                    insert_var_value_sub                       688     692      +4\n                    run_list_real                             1996    1992      -4\n                    do_mem_crc                                 168      68    -100\n               trimslice      :  all -9  bss +16  rodata -29  text +4\n                  u-boot: add: 1/0, grow: 1/-3 bytes: 136/-124 (12)\n                    function                                   old     new   delta\n                    hash_command                                80     160     +80\n                    crc32_wd_buf                                 -      56     +56\n                    ext4fs_iterate_dir                         672     668      -4\n                    ext4fs_read_file                           568     548     -20\n                    do_mem_crc                                 168      68    -100\n               whistler       :  all -9  bss +16  rodata -29  text +4\n                  u-boot: add: 1/0, grow: 1/-3 bytes: 136/-124 (12)\n                    function                                   old     new   delta\n                    hash_command                                80     160     +80\n                    crc32_wd_buf                                 -      56     +56\n                    ext4fs_iterate_dir                         672     668      -4\n                    ext4fs_read_file                           568     548     -20\n                    do_mem_crc                                 168      68    -100\n               seaboard       :  all -9  bss -28  rodata -29  text +48\n                  u-boot: add: 1/0, grow: 3/-2 bytes: 160/-104 (56)\n                    function                                   old     new   delta\n                    hash_command                                80     160     +80\n                    crc32_wd_buf                                 -      56     +56\n                    ext4fs_read_file                           548     568     +20\n                    run_list_real                             1996    2000      +4\n                    do_nandboot                                760     756      -4\n                    do_mem_crc                                 168      68    -100\n               colibri_t20    :  all -9  rodata -29  text +20\n                  u-boot: add: 1/0, grow: 2/-3 bytes: 140/-112 (28)\n                    function                                   old     new   delta\n                    hash_command                                80     160     +80\n                    crc32_wd_buf                                 -      56     +56\n                    read_abs_bbt                               204     208      +4\n                    do_nandboot                                760     756      -4\n                    ext4fs_read_file                           576     568      -8\n                    do_mem_crc                                 168      68    -100\n               ventana        :  all -37  bss -12  rodata -29  text +4\n                  u-boot: add: 1/0, grow: 1/-3 bytes: 136/-124 (12)\n                    function                                   old     new   delta\n                    hash_command                                80     160     +80\n                    crc32_wd_buf                                 -      56     +56\n                    ext4fs_iterate_dir                         672     668      -4\n                    ext4fs_read_file                           568     548     -20\n                    do_mem_crc                                 168      68    -100\n               harmony        :  all -37  bss -16  rodata -29  text +8\n                  u-boot: add: 1/0, grow: 2/-3 bytes: 140/-124 (16)\n                    function                                   old     new   delta\n                    hash_command                                80     160     +80\n                    crc32_wd_buf                                 -      56     +56\n                    nand_write_oob_syndrome                    428     432      +4\n                    ext4fs_iterate_dir                         672     668      -4\n                    ext4fs_read_file                           568     548     -20\n                    do_mem_crc                                 168      68    -100\n               medcom-wide    :  all -417  bss +28  data -16  rodata -93  text -336\n                  u-boot: add: 1/-1, grow: 1/-2 bytes: 88/-376 (-288)\n                    function                                   old     new   delta\n                    crc32_wd_buf                                 -      56     +56\n                    do_fat_read_at                            2872    2904     +32\n                    hash_algo                                   16       -     -16\n                    do_mem_crc                                 168      68    -100\n                    hash_command                               420     160    -260\n               tec            :  all -449  bss -4  data -16  rodata -93  text -336\n                  u-boot: add: 1/-1, grow: 1/-2 bytes: 88/-376 (-288)\n                    function                                   old     new   delta\n                    crc32_wd_buf                                 -      56     +56\n                    do_fat_read_at                            2872    2904     +32\n                    hash_algo                                   16       -     -16\n                    do_mem_crc                                 168      68    -100\n                    hash_command                               420     160    -260\n               plutux         :  all -481  bss +16  data -16  rodata -93  text -388\n                  u-boot: add: 1/-1, grow: 1/-3 bytes: 68/-408 (-340)\n                    function                                   old     new   delta\n                    crc32_wd_buf                                 -      56     +56\n                    do_load_serial_bin                        1688    1700     +12\n                    hash_algo                                   16       -     -16\n                    do_fat_read_at                            2904    2872     -32\n                    do_mem_crc                                 168      68    -100\n                    hash_command                               420     160    -260\n      powerpc: (for 5/5 boards)  all +37.4  data -3.2  rodata -41.8  text +82.4\n               MPC8610HPCD    :  all +55  rodata -29  text +84\n                  u-boot: add: 1/0, grow: 0/-1 bytes: 176/-96 (80)\n                    function                                   old     new   delta\n                    hash_command                                 -     176    +176\n                    do_mem_crc                                 184      88     -96\n               MPC8641HPCN    :  all +55  rodata -29  text +84\n                  u-boot: add: 1/0, grow: 0/-1 bytes: 176/-96 (80)\n                    function                                   old     new   delta\n                    hash_command                                 -     176    +176\n                    do_mem_crc                                 184      88     -96\n               MPC8641HPCN_36BIT:  all +55  rodata -29  text +84\n                  u-boot: add: 1/0, grow: 0/-1 bytes: 176/-96 (80)\n                    function                                   old     new   delta\n                    hash_command                                 -     176    +176\n                    do_mem_crc                                 184      88     -96\n               sbc8641d       :  all +55  rodata -29  text +84\n                  u-boot: add: 1/0, grow: 0/-1 bytes: 176/-96 (80)\n                    function                                   old     new   delta\n                    hash_command                                 -     176    +176\n                    do_mem_crc                                 184      88     -96\n               xpedite517x    :  all -33  data -16  rodata -93  text +76\n                  u-boot: add: 1/-1, grow: 0/-1 bytes: 176/-112 (64)\n                    function                                   old     new   delta\n                    hash_command                                 -     176    +176\n                    hash_algo                                   16       -     -16\n                    do_mem_crc                                 184      88     -96\n   ...\n\n\nThis shows that commit 19 has reduced codesize for arm slightly and increased\nit for powerpc. This increase was offset in by reductions in rodata and\ndata/bss.\n\nShown below the summary lines are the sizes for each board. Below each board\nare the sizes for each function. This information starts with:\n\nadd\n   number of functions added / removed\n\ngrow\n   number of functions which grew / shrunk\n\nbytes\n   number of bytes of code added to / removed from all functions, plus the total\n   byte change in brackets\n\nThe change seems to be that hash_command() has increased by more than the\ndo_mem_crc() function has decreased. The function sizes typically add up to\nroughly the text area size, but note that every read-only section except\nrodata is included in 'text', so the function total does not exactly\ncorrespond.\n\nIt is common when refactoring code for the rodata to decrease as the text size\nincreases, and vice versa.\n\n\n.. _buildman_settings:\n\nThe .buildman settings file\n---------------------------\n\nThe .buildman file provides information about the available toolchains and\nalso allows build flags to be passed to 'make'. It consists of several\nsections, with the section name in square brackets. Within each section are\na set of (tag, value) pairs.\n\n'[global]' section\n    allow-missing\n        Indicates the policy to use for missing blobs. Note that the flags\n        ``--allow-missing`` (``-M``) and ``--no-allow-missing`` (``--no-a``)\n        override these setting.\n\n        always\n           Run with ``-M`` by default.\n\n        multiple\n           Run with ``-M`` if more than one board is being built.\n\n        branch\n           Run with ``-M`` if a branch is being built.\n\n        Note that the last two can be given together::\n\n           allow-missing = multiple branch\n\n'[toolchain]' section\n    This lists the available toolchains. The tag here doesn't matter, but\n    make sure it is unique. The value is the path to the toolchain. Buildman\n    will look in that path for a file ending in 'gcc'. It will then execute\n    it to check that it is a C compiler, passing only the --version flag to\n    it. If the return code is 0, buildman assumes that it is a valid C\n    compiler. It uses the first part of the name as the architecture and\n    strips off the last part when setting the CROSS_COMPILE environment\n    variable (parts are delimited with a hyphen).\n\n    For example powerpc-linux-gcc will be noted as a toolchain for 'powerpc'\n    and CROSS_COMPILE will be set to powerpc-linux- when using it.\n\n'[toolchain-alias]' section\n    This converts toolchain architecture names to U-Boot names. For example,\n    if an x86 toolchains is called i386-linux-gcc it will not normally be\n    used for architecture 'x86'. Adding 'x86: i386 x86_64' to this section\n    will tell buildman that the i386 and x86_64 toolchains can be used for\n    the x86 architecture.\n\n'[make-flags]' section\n    U-Boot's build system supports a few flags (such as BUILD_TAG) which\n    affect the build product. These flags can be specified in the buildman\n    settings file. They can also be useful when building U-Boot against other\n    open source software.\n\n    [make-flags]\n    at91-boards=ENABLE_AT91_TEST=1\n    snapper9260=${at91-boards} BUILD_TAG=442\n    snapper9g45=${at91-boards} BUILD_TAG=443\n\n    This will use 'make ENABLE_AT91_TEST=1 BUILD_TAG=442' for snapper9260\n    and 'make ENABLE_AT91_TEST=1 BUILD_TAG=443' for snapper9g45. A special\n    variable ${target} is available to access the target name (snapper9260\n    and snapper9g20 in this case). Variables are resolved recursively. Note\n    that variables can only contain the characters A-Z, a-z, 0-9, hyphen (-)\n    and underscore (_).\n\n    It is expected that any variables added are dealt with in U-Boot's\n    config.mk file and documented in the README.\n\n    Note that you can pass ad-hoc options to the build using environment\n    variables, for example:\n\n       SOME_OPTION=1234 ./tools/buildman/buildman my_board\n\n\nQuick Sanity Check\n------------------\n\nIf you have made changes and want to do a quick sanity check of the\ncurrently checked-out source, run buildman without the -b flag. This will\nbuild the selected boards and display build status as it runs (i.e. -v is\nenabled automatically). Use -e to see errors/warnings as well.\n\n\nBuilding Ranges\n---------------\n\nYou can build a range of commits by specifying a range instead of a branch\nwhen using the -b flag. For example::\n\n    buildman -b upstream/master..us-buildman\n\nwill build commits in us-buildman that are not in upstream/master.\n\n\nBuilding Faster\n---------------\n\nBy default, buildman doesn't execute 'make mrproper' prior to building the\nfirst commit for each board. This reduces the amount of work 'make' does, and\nhence speeds up the build. To force use of 'make mrproper', use -the -m flag.\nThis flag will slow down any buildman invocation, since it increases the amount\nof work done on any build.\n\nOne possible application of buildman is as part of a continual edit, build,\nedit, build, ... cycle; repeatedly applying buildman to the same change or\nseries of changes while making small incremental modifications to the source\neach time. This provides quick feedback regarding the correctness of recent\nmodifications. In this scenario, buildman's default choice of build directory\ncauses more build work to be performed than strictly necessary.\n\nBy default, each buildman thread uses a single directory for all builds. When a\nthread builds multiple boards, the configuration built in this directory will\ncycle through various different configurations, one per board built by the\nthread. Variations in the configuration will force a rebuild of affected source\nfiles when a thread switches between boards. Ideally, such buildman-induced\nrebuilds would not happen, thus allowing the build to operate as efficiently as\nthe build system and source changes allow. buildman's -P flag may be used to\nenable this; -P causes each board to be built in a separate (board-specific)\ndirectory, thus avoiding any buildman-induced configuration changes in any\nbuild directory.\n\nU-Boot's build system embeds information such as a build timestamp into the\nfinal binary. This information varies each time U-Boot is built. This causes\nvarious files to be rebuilt even if no source changes are made, which in turn\nrequires that the final U-Boot binary be re-linked. This unnecessary work can\nbe avoided by turning off the timestamp feature. This can be achieved by\nsetting the SOURCE_DATE_EPOCH environment variable to 0.\n\nCombining all of these options together yields the command-line shown below.\nThis will provide the quickest possible feedback regarding the current content\nof the source tree, thus allowing rapid tested evolution of the code::\n\n    SOURCE_DATE_EPOCH=0 ./tools/buildman/buildman -P tegra\n\n\nChecking configuration\n----------------------\n\nA common requirement when converting CONFIG options to Kconfig is to check\nthat the effective configuration has not changed due to the conversion.\nBuildman supports this with the -K option, used after a build. This shows\ndifferences in effective configuration between one commit and the next.\n\nFor example::\n\n    $ buildman -b kc4 -sK\n    ...\n    43: Convert CONFIG_SPL_USBETH_SUPPORT to Kconfig\n    arm:\n    + u-boot.cfg: CONFIG_SPL_ENV_SUPPORT=1 CONFIG_SPL_NET=1\n    + u-boot-spl.cfg: CONFIG_SPL_MMC=1 CONFIG_SPL_NAND_SUPPORT=1\n    + all: CONFIG_SPL_ENV_SUPPORT=1 CONFIG_SPL_MMC=1 CONFIG_SPL_NAND_SUPPORT=1 CONFIG_SPL_NET=1\n    am335x_evm_usbspl :\n    + u-boot.cfg: CONFIG_SPL_ENV_SUPPORT=1 CONFIG_SPL_NET=1\n    + u-boot-spl.cfg: CONFIG_SPL_MMC=1 CONFIG_SPL_NAND_SUPPORT=1\n    + all: CONFIG_SPL_ENV_SUPPORT=1 CONFIG_SPL_MMC=1 CONFIG_SPL_NAND_SUPPORT=1 CONFIG_SPL_NET=1\n    44: Convert CONFIG_SPL_USB_HOST to Kconfig\n    ...\n\nThis shows that commit 44 enabled three new options for the board\nam335x_evm_usbspl which were not enabled in commit 43. There is also a\nsummary for 'arm' showing all the changes detected for that architecture.\nIn this case there is only one board with changes, so 'arm' output is the\nsame as 'am335x_evm_usbspl'/\n\nThe -K option uses the u-boot.cfg, spl/u-boot-spl.cfg and tpl/u-boot-tpl.cfg\nfiles which are produced by a build. If all you want is to check the\nconfiguration you can in fact avoid doing a full build, using -D. This tells\nbuildman to configuration U-Boot and create the .cfg files, but not actually\nbuild the source. This is 5-10 times faster than doing a full build.\n\nBy default buildman considers the follow two configuration methods\nequivalent::\n\n   #define CONFIG_SOME_OPTION\n\n   CONFIG_SOME_OPTION=y\n\nThe former would appear in a header filer and the latter in a defconfig\nfile. The achieve this, buildman considers 'y' to be '1' in configuration\nvariables. This avoids lots of useless output when converting a CONFIG\noption to Kconfig. To disable this behaviour, use --squash-config-y.\n\n\nChecking the environment\n------------------------\n\nWhen converting CONFIG options which manipulate the default environment,\na common requirement is to check that the default environment has not\nchanged due to the conversion. Buildman supports this with the -U option,\nused after a build. This shows differences in the default environment\nbetween one commit and the next.\n\nFor example::\n\n   $ buildman -b squash brppt1 -sU\n   Summary of 2 commits for 3 boards (3 threads, 3 jobs per thread)\n   01: Migrate bootlimit to Kconfig\n   02: Squashed commit of the following:\n      c brppt1_mmc: altbootcmd=mmc dev 1; run mmcboot0; -> mmc dev 1; run mmcboot0\n      c brppt1_spi: altbootcmd=mmc dev 1; run mmcboot0; -> mmc dev 1; run mmcboot0\n      + brppt1_nand: altbootcmd=run usbscript\n      - brppt1_nand:  altbootcmd=run usbscript\n   (no errors to report)\n\nThis shows that commit 2 modified the value of 'altbootcmd' for 'brppt1_mmc'\nand 'brppt1_spi', removing a trailing semicolon. 'brppt1_nand' gained an a\nvalue for 'altbootcmd', but lost one for ' altbootcmd'.\n\nThe -U option uses the u-boot.env files which are produced by a build.\n\n\nBuilding with clang\n-------------------\n\nTo build with clang (sandbox only), use the -O option to override the\ntoolchain. For example:\n\n.. code-block:: bash\n\n   buildman -O clang-7 --board sandbox\n\n\nDoing a simple build\n--------------------\n\nIn some cases you just want to build a single board and get the full output, use\nthe -w option, for example:\n\n.. code-block:: bash\n\n   buildman -o /tmp/build --board sandbox -w\n\nThis will write the full build into /tmp/build including object files. You must\nspecify the output directory with -o when using -w.\n\n\nSupport for IDEs (Integrated Development Environments)\n------------------------------------------------------\n\nNormally buildman summarises the output and shows information indicating the\nmeaning of each line of output. For example a '+' symbol appears at the start of\neach error line. Also, buildman prints information about what it is about to do,\nalong with a summary at the end.\n\nWhen using buildman from an IDE, it is helpful to drop this behaviour. Use the\n-I/--ide option for that. You might find -W helpful also so that warnings do\nnot cause the build to fail:\n\n.. code-block:: bash\n\n   buildman -o /tmp/build --board sandbox -wWI\n\n\nSupport for binary blobs\n------------------------\n\nU-Boot is moving to using Binman (see ) for\ndealing with the complexities of packaging U-Boot along with binary files from\nother projects. These are called 'external blobs' by Binman.\n\nTypically a missing external blob causes a build failure. For build testing of\na lot of boards, or boards for which you do not have the blobs, you can use the\n-M flag to allow missing blobs. This marks the build as if it succeeded,\nalthough with warnings shown, including 'Some images are invalid'. If any boards\nfail in this way, buildman exits with status 101.\n\nTo convert warnings to errors, use -E. To make buildman return success with\nthese warnings, use -W.\n\nIt is generally safe to default to enabling -M for all runs of buildman, so long\nas you check the exit code. To do this, add::\n\n   allow-missing = \"always\"\n\nto the top of the buildman_settings_ file.\n\n\nChanging the configuration\n--------------------------\n\nSometimes it is useful to change the CONFIG options for a build on the fly. This\ncan be used to build a board (or multiple) with a few changes to see the impact.\nThe -a option supports this:\n\n.. code-block:: bash\n\n   -a <cfg>\n\nwhere <cfg> is a CONFIG option (with or without the `CONFIG_` prefix) to enable.\nFor example:\n\n.. code-block:: bash\n\n    buildman -a CMD_SETEXPR_FMT\n\nwill build with CONFIG_CMD_SETEXPR_FMT enabled.\n\nYou can disable options by preceding them with tilde (~). You can specify the\n-a option multiple times:\n\n.. code-block:: bash\n\n    buildman -a CMD_SETEXPR_FMT -a ~CMDLINE\n\nSome options have values, in which case you can change them:\n\n.. code-block:: bash\n\n    buildman -a 'BOOTCOMMAND=\"echo hello\"' CONFIG_SYS_LOAD_ADDR=0x1000\n\nNote that you must put quotes around string options and the whole thing must be\nin single quotes, to make sure the shell leave it alone.\n\nIf you try to set an option that does not exist, or that cannot be changed for\nsome other reason (e.g. it is 'selected' by another option), then buildman\nshows an error::\n\n   $ buildman --board sandbox -a FRED\n   Building current source for 1 boards (1 thread, 32 jobs per thread)\n       0    0    0 /1       -1      (starting)errs\n   Some CONFIG adjustments did not take effect. This may be because\n   the request CONFIGs do not exist or conflict with others.\n\n   Failed adjustments:\n\n   FRED                  Missing expected line: CONFIG_FRED=y\n\n\nOne major caveat with this feature with branches (-b) is that buildman does not\nname the output directories differently when you change the configuration, so\ndoing the same build again with different configuration will not trigger a\nrebuild. You can use -f to work around that.\n\n\nOther options\n-------------\n\nBuildman has various other command-line options. Try --help to see them.\n\nTo find out what toolchain prefix buildman will use for a build, use the -A\noption.\n\nTo request that compiler warnings be promoted to errors, use -E. This passes the\n-Werror flag to the compiler. Note that the build can still produce warnings\nwith -E, e.g. the migration warnings::\n\n   ===================== WARNING ======================\n   This board does not use CONFIG_DM_MMC. Please update\n   ...\n   ====================================================\n\nWhen doing builds, Buildman's return code will reflect the overall result::\n\n    0 (success)     No errors or warnings found\n    100             Errors found\n    101             Warnings found (only if no -W)\n\nYou can use -W to tell Buildman to return 0 (success) instead of 101 when\nwarnings are found. Note that it can be useful to combine -E and -W. This means\nthat all compiler warnings will produce failures (code 100) and all other\nwarnings will produce success (since 101 is changed to 0).\n\nIf there are both warnings and errors, errors win, so buildman returns 100.\n\nThe -y option is provided (for use with -s) to ignore the bountiful device-tree\nwarnings. Similarly, -Y tells buildman to ignore the migration warnings.\n\nSometimes you might get an error in a thread that is not handled by buildman,\nperhaps due to a failure of a tool that it calls. You might see the output, but\nthen buildman hangs. Failing to handle any eventuality is a bug in buildman and\nshould be reported. But you can use -T0 to disable threading and hopefully\nfigure out the root cause of the build failure.\n\nBuild summary\n-------------\n\nWhen buildman finishes it shows a summary, something like this::\n\n    Completed: 5 total built, duration 0:00:21, rate 0.24\n\nThis shows that a total of 5 builds were done across all selected boards, it\ntook 21 seconds and the builds happened at the rate of 0.24 per second. The\nlatter number depends on the speed of your machine and the efficiency of the\nU-Boot build.\n\n\nUsing boards.cfg\n----------------\n\nThis file is no-longer needed by buildman but it is still generated in the\nworking directory. This helps avoid a delay on every build, since scanning all\nthe Kconfig files takes a few seconds. Use the -R flag to force regeneration\nof the file - in that case buildman exits after writing the file. with exit code\n2 if there was an error in the maintainer files.\n\nYou should use 'buildman -nv <criteria>' instead of greoing the boards.cfg file,\nsince it may be dropped altogether in future.\n\n\nTODO\n----\n\nMany improvements have been made over the years. There is still quite a bit of\nscope for more though, e.g.:\n\n- easier access to log files\n- 'hunting' for problems, perhaps by building a few boards for each arch, or\n  checking commits for changed files and building only boards which use those\n  files\n\n\nCredits\n-------\n\nThanks to Grant Grundler <grundler@chromium.org> for his ideas for improving\nthe build speed by building all commits for a board instead of the other\nway around.\n\n.. _`Arc Toolchain`: https://github.com/foss-for-synopsys-dwc-arc-processors/toolchain/releases/download/arc-2021.03-release/arc_gnu_2021.03_prebuilt_elf32_le_linux_install.tar.gz\n\n.. Halloween 2012\n.. Updated 12-12-12\n.. Updated 23-02-13\n.. Updated 09-04-20\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "buildman",
    "package_url": "https://pypi.org/project/buildman/",
    "platform": null,
    "project_url": "https://pypi.org/project/buildman/",
    "project_urls": {
      "Bug Tracker": "https://source.denx.de/groups/u-boot/-/issues",
      "Homepage": "https://u-boot.readthedocs.io/en/latest/build/buildman.html"
    },
    "release_url": "https://pypi.org/project/buildman/0.0.2/",
    "requires_dist": [
      "u-boot-pylib",
      "patch-manager"
    ],
    "requires_python": ">=3.7",
    "summary": "Buildman build tool for U-Boot",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16995080,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da8571c35958106be442e78d4dc30f3b789e67a2f1b08b1000c5eb843defadc1",
          "md5": "c361820ae8e8057e0667c6fe5da72507",
          "sha256": "af6355ae1f9d9055df8967376ef5b2d19a87fa5b39d295d6ce10469182bb2330"
        },
        "downloads": -1,
        "filename": "buildman-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c361820ae8e8057e0667c6fe5da72507",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 178372,
        "upload_time": "2023-02-23T15:43:50",
        "upload_time_iso_8601": "2023-02-23T15:43:50.283467Z",
        "url": "https://files.pythonhosted.org/packages/da/85/71c35958106be442e78d4dc30f3b789e67a2f1b08b1000c5eb843defadc1/buildman-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "038edbb40718fe657c2003c83d14cc0b148b1e25a5d2bed04219081c232bfd57",
          "md5": "993ab73efc539875f04f6d077e518477",
          "sha256": "f51ac0fa394354d47810e70b586b2ef7c07a7f19851605812ae828a01ebbf30b"
        },
        "downloads": -1,
        "filename": "buildman-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "993ab73efc539875f04f6d077e518477",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 204686,
        "upload_time": "2023-02-23T15:43:52",
        "upload_time_iso_8601": "2023-02-23T15:43:52.762860Z",
        "url": "https://files.pythonhosted.org/packages/03/8e/dbb40718fe657c2003c83d14cc0b148b1e25a5d2bed04219081c232bfd57/buildman-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da8571c35958106be442e78d4dc30f3b789e67a2f1b08b1000c5eb843defadc1",
        "md5": "c361820ae8e8057e0667c6fe5da72507",
        "sha256": "af6355ae1f9d9055df8967376ef5b2d19a87fa5b39d295d6ce10469182bb2330"
      },
      "downloads": -1,
      "filename": "buildman-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c361820ae8e8057e0667c6fe5da72507",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 178372,
      "upload_time": "2023-02-23T15:43:50",
      "upload_time_iso_8601": "2023-02-23T15:43:50.283467Z",
      "url": "https://files.pythonhosted.org/packages/da/85/71c35958106be442e78d4dc30f3b789e67a2f1b08b1000c5eb843defadc1/buildman-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "038edbb40718fe657c2003c83d14cc0b148b1e25a5d2bed04219081c232bfd57",
        "md5": "993ab73efc539875f04f6d077e518477",
        "sha256": "f51ac0fa394354d47810e70b586b2ef7c07a7f19851605812ae828a01ebbf30b"
      },
      "downloads": -1,
      "filename": "buildman-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "993ab73efc539875f04f6d077e518477",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 204686,
      "upload_time": "2023-02-23T15:43:52",
      "upload_time_iso_8601": "2023-02-23T15:43:52.762860Z",
      "url": "https://files.pythonhosted.org/packages/03/8e/dbb40718fe657c2003c83d14cc0b148b1e25a5d2bed04219081c232bfd57/buildman-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}