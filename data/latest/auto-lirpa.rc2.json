{
  "info": {
    "author": "Kaidi Xu, Zhouxing Shi, Huan Zhang, Yihan Wang, Shiqi Wang, Linyi Li, Jinqi (Kathryn) Chen, Zhuolin Yang",
    "author_email": "xu.kaid@husky.neu.edu, zhouxingshichn@gmail.com, huan@huan-zhang.com, wangyihan617@gmail.com, sw3215@columbia.edu,linyi2@illinois.edu,jinqic@cs.cmu.edu,zhuolin5@illinois.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# auto_LiRPA: Automatic Linear Relaxation based Perturbation Analysis for Neural Networks\n\n![](https://travis-ci.com/KaidiXu/auto_LiRPA.svg?token=HM3jb55xV1sMRsVKBr8b&branch=master&status=started)\n[![Documentation Status](https://readthedocs.org/projects/auto-lirpa/badge/?version=latest)](https://auto-lirpa.readthedocs.io/en/latest/?badge=latest)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](http://PaperCode.cc/AutoLiRPA-Demo)\n[![Video Introduction](https://img.shields.io/badge/play-video-red.svg)](http://PaperCode.cc/AutoLiRPA-Video)\n[![BSD license](https://img.shields.io/badge/License-BSD-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\n<p align=\"center\">\n<a href=\"http://PaperCode.cc/AutoLiRPA-Video\"><img src=\"http://www.huan-zhang.com/images/upload/lirpa/auto_lirpa_2.png\" width=\"45%\" height=\"45%\" float=\"left\"></a>\n<a href=\"http://PaperCode.cc/AutoLiRPA-Video\"><img src=\"http://www.huan-zhang.com/images/upload/lirpa/auto_lirpa_1.png\" width=\"45%\" height=\"45%\" float=\"right\"></a>\n</p>\n\n## What's New?\n\n- Our neural network verification tool [α,β-CROWN](https://github.com/huanzhang12/alpha-beta-CROWN.git) ([alpha-beta-CROWN](https://github.com/huanzhang12/alpha-beta-CROWN.git)) (using `auto_LiRPA` as its core library) **won** [VNN-COMP 2022](https://sites.google.com/view/vnn2022). Our library supports the large CIFAR100, TinyImageNet and ImageNet models in VNN-COMP 2022. (09/2022)\n- Implementation of **general cutting planes** ([GCP-CROWN](https://arxiv.org/pdf/2208.05740.pdf)), support of more activation functions and improved performance and scalability. (09/2022)\n- Our neural network verification tool [α,β-CROWN](https://github.com/huanzhang12/alpha-beta-CROWN.git) ([alpha-beta-CROWN](https://github.com/huanzhang12/alpha-beta-CROWN.git)) **won** [VNN-COMP 2021](https://sites.google.com/view/vnn2021) **with the highest total score**, outperforming 11 SOTA verifiers. α,β-CROWN uses the `auto_LiRPA` library as its core bound computation library. (09/2021)\n- [Optimized CROWN/LiRPA](https://arxiv.org/pdf/2011.13824.pdf) bound (α-CROWN) for ReLU, **sigmoid**, **tanh**, and **maxpool** activation functions, which can significantly outperform regular CROWN bounds. See [simple_verification.py](examples/vision/simple_verification.py#L59) for an example. (07/31/2021)\n- Handle split constraints for ReLU neurons ([β-CROWN](https://arxiv.org/pdf/2103.06624.pdf)) for complete verifiers. (07/31/2021)\n- A memory efficient GPU implementation of backward (CROWN) bounds for\nconvolutional layers. (10/31/2020)\n- Certified defense models for downscaled ImageNet, TinyImageNet, CIFAR-10, LSTM/Transformer. (08/20/2020)\n- Adding support to **complex vision models** including DenseNet, ResNeXt and WideResNet. (06/30/2020)\n- **Loss fusion**, a technique that reduces training cost of tight LiRPA bounds\n(e.g. CROWN-IBP) to the same asympototic complexity of IBP, making LiRPA based certified\ndefense scalable to large datasets (e.g., TinyImageNet, downscaled ImageNet). (06/30/2020)\n- **Multi-GPU** support to scale LiRPA based training to large models and datasets. (06/30/2020)\n- Initial release. (02/28/2020)\n\n## Introduction\n\n`auto_LiRPA` is a library for automatically deriving and computing bounds with\nlinear relaxation based perturbation analysis (LiRPA) (e.g.\n[CROWN](https://arxiv.org/pdf/1811.00866.pdf) and\n[DeepPoly](https://files.sri.inf.ethz.ch/website/papers/DeepPoly.pdf)) for\nneural networks, which is an useful tool for formal robustness verification. We\ngeneralize existing LiRPA algorithms for feed-forward neural networks to a\ngraph algorithm on general computational graphs, defined by PyTorch.\nAdditionally, our implementation is also automatically **differentiable**,\nallowing optimizing network parameters to shape the bounds into certain\nspecifications (e.g., certified defense). You can find [a video ▶️ introduction\nhere](http://PaperCode.cc/AutoLiRPA-Video).\n\nOur library supports the following algorithms:\n\n* Backward mode LiRPA bound propagation ([CROWN](https://arxiv.org/pdf/1811.00866.pdf)/[DeepPoly](https://files.sri.inf.ethz.ch/website/papers/DeepPoly.pdf))\n* Backward mode LiRPA bound propagation with optimized bounds ([α-CROWN](https://arxiv.org/pdf/2011.13824.pdf))\n* Backward mode LiRPA bound propagation with split constraints ([β-CROWN](https://arxiv.org/pdf/2103.06624.pdf))\n* Generalized backward mode LiRPA bound propagation with general cutting plane constraints ([GCP-CROWN](https://arxiv.org/pdf/2208.05740.pdf))\n* Forward mode LiRPA bound propagation ([Xu et al., 2020](https://arxiv.org/pdf/2002.12920))\n* Forward mode LiRPA bound propagation with optimized bounds (similar to [α-CROWN](https://arxiv.org/pdf/2011.13824.pdf))\n* Interval bound propagation ([IBP](https://arxiv.org/pdf/1810.12715.pdf))\n* Hybrid approaches, e.g., Forward+Backward, IBP+Backward ([CROWN-IBP](https://arxiv.org/pdf/1906.06316.pdf)), [α,β-CROWN](https://github.com/huanzhang12/alpha-beta-CROWN.git) ([alpha-beta-CROWN](https://github.com/huanzhang12/alpha-beta-CROWN.git))\n\nOur library allows automatic bound derivation and computation for general\ncomputational graphs, in a similar manner that gradients are obtained in modern\ndeep learning frameworks -- users only define the computation in a forward\npass, and `auto_LiRPA` traverses through the computational graph and derives\nbounds for any nodes on the graph.  With `auto_LiRPA` we free users from\nderiving and implementing LiPRA for most common tasks, and they can simply\napply LiPRA as a tool for their own applications.  This is especially useful\nfor users who are not experts of LiRPA and cannot derive these bounds manually\n(LiRPA is significantly more complicated than backpropagation).\n\n## Technical Background in 1 Minute\n\nDeep learning frameworks such as PyTorch represent neural networks (NN) as\na computational graph, where each mathematical operation is a node and edges\ndefine the flow of computation:\n\n<p align=\"center\">\n<a href=\"http://PaperCode.cc/AutoLiRPA-Video\"><img src=\"http://www.huan-zhang.com/images/upload/lirpa/auto_LiRPA_background_1.png\" width=\"80%\"></a>\n</p>\n\nNormally, the inputs of a computation graph (which defines a NN) are data and\nmodel weights, and PyTorch goes through the graph and produces model prediction\n(a bunch of numbers):\n\n<p align=\"center\">\n<a href=\"http://PaperCode.cc/AutoLiRPA-Video\"><img src=\"http://www.huan-zhang.com/images/upload/lirpa/auto_LiRPA_background_2.png\" width=\"80%\"></a>\n</p>\n\nOur `auto_LiRPA` library conducts perturbation analysis on a computational\ngraph, where the input data and model weights are defined within some\nuser-defined ranges.  We get guaranteed output ranges (bounds):\n\n<p align=\"center\">\n<a href=\"http://PaperCode.cc/AutoLiRPA-Video\"><img src=\"http://www.huan-zhang.com/images/upload/lirpa/auto_LiRPA_background_3.png\" width=\"80%\"></a>\n</p>\n\n## Installation\n\nPython 3.7+ and PyTorch 1.8+ are required.\nPyTorch 1.11 is recommended, although other recent versions might also work.\nIt is highly recommended to have a pre-installed PyTorch\nthat matches your system and our version requirement.\nSee [PyTorch Get Started](https://pytorch.org/get-started).\nThen you can install `auto_LiRPA` via:\n\n```bash\ngit clone https://github.com/KaidiXu/auto_LiRPA\ncd auto_LiRPA\npython setup.py install\n```\n\nIf you intend to modify this library, use `python setup.py develop` instead.\n\nOptionally, you may build and install native CUDA modules (CUDA toolkit required):\n```bash\npython auto_LiRPA/cuda_utils.py install\n```\n\n## Quick Start\n\nFirst define your computation as a `nn.Module` and wrap it using\n`auto_LiRPA.BoundedModule()`. Then, you can call the `compute_bounds` function\nto obtain certified lower and upper bounds under input perturbations:\n\n```python\nfrom auto_LiRPA import BoundedModule, BoundedTensor, PerturbationLpNorm\n\n# Define computation as a nn.Module.\nclass MyModel(nn.Module):\n    def forward(self, x):\n        # Define your computation here.\n\nmodel = MyModel()\nmy_input = load_a_batch_of_data()\n# Wrap the model with auto_LiRPA.\nmodel = BoundedModule(model, my_input)\n# Define perturbation. Here we add Linf perturbation to input data.\nptb = PerturbationLpNorm(norm=np.inf, eps=0.1)\n# Make the input a BoundedTensor with the pre-defined perturbation.\nmy_input = BoundedTensor(my_input, ptb)\n# Regular forward propagation using BoundedTensor works as usual.\nprediction = model(my_input)\n# Compute LiRPA bounds using the backward mode bound propagation (CROWN).\nlb, ub = model.compute_bounds(x=(my_input,), method=\"backward\")\n```\n\nCheckout\n[examples/vision/simple_verification.py](examples/vision/simple_verification.py)\nfor a complete but very basic example.\n\n<a href=\"http://PaperCode.cc/AutoLiRPA-Demo\"><img align=\"left\" width=64 height=64 src=\"https://colab.research.google.com/img/colab_favicon_256px.png\"></a>\nWe also provide a [Google Colab Demo](http://PaperCode.cc/AutoLiRPA-Demo) including an example of computing verification\nbounds for a 18-layer ResNet model on CIFAR-10 dataset. Once the ResNet model\nis defined as usual in Pytorch, obtaining provable output bounds is as easy as\nobtaining gradients through autodiff. Bounds are efficiently computed on GPUs.\n\n## More Working Examples\n\nWe provide [a wide range of examples](doc/src/examples.md) of using `auto_LiRPA`:\n\n* [Basic Bound Computation and **Robustness Verification** of Neural Networks](doc/src/examples.md#basic-bound-computation-and-robustness-verification-of-neural-networks)\n* [Basic **Certified Adversarial Defense** Training](doc/src/examples.md#basic-certified-adversarial-defense-training)\n* [Large-scale Certified Defense Training on **ImageNet**](doc/src/examples.md#certified-adversarial-defense-on-downscaled-imagenet-and-tinyimagenet-with-loss-fusion)\n* [Certified Adversarial Defense Training on Sequence Data with **LSTM**](doc/src/examples.md#certified-adversarial-defense-training-for-lstm-on-mnist)\n* [Certifiably Robust Language Classifier using **Transformers**](doc/src/examples.md#certifiably-robust-language-classifier-with-transformer-and-lstm)\n* [Certified Robustness against **Model Weight Perturbations**](doc/src/examples.md#certified-robustness-against-model-weight-perturbations-and-certified-defense)\n\n`auto_LiRPA` has also be used in the following works:\n* [**α,β-CROWN for complete neural network verification**](https://github.com/huanzhang12/alpha-beta-CROWN)\n* [**Fast certified robust training**](https://github.com/shizhouxing/Fast-Certified-Robust-Training)\n\n## Full Documentations\n\nFor more documentations, please refer to:\n\n* [Documentation homepage](https://auto-lirpa.readthedocs.io)\n* [API documentation](https://auto-lirpa.readthedocs.io/en/latest/api.html)\n* [Adding custom operators](https://auto-lirpa.readthedocs.io/en/latest/custom_op.html)\n* [Guide](https://auto-lirpa.readthedocs.io/en/latest/paper.html) for reproducing [our NeurIPS 2020 paper](https://arxiv.org/abs/2002.12920)\n\n## Publications\n\nPlease kindly cite our papers if you use the `auto_LiRPA` library. Full [BibTeX entries](doc/examples.md#bibtex-entries) can be found [here](doc/examples.md#bibtex-entries).\n\nThe general LiRPA based bound propagation algorithm was originally proposed in our paper:\n\n* [Automatic Perturbation Analysis for Scalable Certified Robustness and Beyond](https://arxiv.org/pdf/2002.12920).\nNeurIPS 2020\nKaidi Xu\\*, Zhouxing Shi\\*, Huan Zhang\\*, Yihan Wang, Kai-Wei Chang, Minlie Huang, Bhavya Kailkhura, Xue Lin, Cho-Jui Hsieh (\\* Equal contribution)\n\nThe `auto_LiRPA` library is further extended to allow optimized bound (α-CROWN), split constraints (β-CROWN) and general constraints (GCP-CROWN):\n\n* [Fast and Complete: Enabling Complete Neural Network Verification with Rapid and Massively Parallel Incomplete Verifiers](https://arxiv.org/pdf/2011.13824.pdf).\nICLR 2021.\nKaidi Xu\\*, Huan Zhang\\*, Shiqi Wang, Yihan Wang, Suman Jana, Xue Lin and Cho-Jui Hsieh (\\* Equal contribution).\n\n* [Beta-CROWN: Efficient Bound Propagation with Per-neuron Split Constraints for Complete and Incomplete Neural Network Verification](https://arxiv.org/pdf/2103.06624.pdf).\nNeurIPS 2021.\nShiqi Wang\\*, Huan Zhang\\*, Kaidi Xu\\*, Suman Jana, Xue Lin, Cho-Jui Hsieh and Zico Kolter (\\* Equal contribution).\n\n* [GCP-CROWN: General Cutting Planes for Bound-Propagation-Based Neural Network Verification](https://arxiv.org/abs/2208.05740).\nHuan Zhang\\*, Shiqi Wang\\*, Kaidi Xu\\*, Linyi Li, Bo Li, Suman Jana, Cho-Jui Hsieh and Zico Kolter (\\* Equal contribution).\n\nCertified robust training using `auto_LiRPA` is improved to allow much shorter warmup and faster training:\n* [Fast Certified Robust Training with Short Warmup](https://arxiv.org/pdf/2103.17268.pdf).\nNeurIPS 2021.\nZhouxing Shi\\*, Yihan Wang\\*, Huan Zhang, Jinfeng Yi and Cho-Jui Hsieh (\\* Equal contribution).\n\n## Developers and Copyright\n\n| [Kaidi Xu](https://kaidixu.com/) | [Zhouxing Shi](https://shizhouxing.github.io/) | [Huan Zhang](https://huan-zhang.com/) | [Yihan Wang](https://yihanwang617.github.io/) | [Shiqi Wang](https://www.cs.columbia.edu/~tcwangshiqi/) |\n|:--:|:--:| :--:| :--:| :--:|\n| <img src=\"https://kaidixu.files.wordpress.com/2020/07/profile2-1.jpg\" width=\"125\" /> | <img src=\"https://shizhouxing.github.io/photo.jpg\" width=\"115\" /> | <img src=\"https://huan-zhang.appspot.com/images/Huan_Zhang_photo.jpg\" width=\"125\" /> | <img src=\"https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png\" width=\"125\" height=\"125\" /> | <img src=\"https://www.cs.columbia.edu/~tcwangshiqi/images/shiqiwang.jpg\" width=\"125\" /> |\n\nTeam lead:\n* Huan Zhang (huan@huan-zhang.com), CMU\n\nMain developers:\n* Zhouxing Shi (zshi@cs.ucla.edu), UCLA\n* Kaidi Xu (kx46@drexel.edu), Drexel University\n\nContributors:\n* Yihan Wang (yihanwang@ucla.edu), UCLA\n* Shiqi Wang (sw3215@columbia.edu), Columbia University\n* Linyi Li (linyi2@illinois.edu), UIUC\n* Jinqi (Kathryn) Chen (jinqic@cs.cmu.edu), CMU\n* Zhuolin Yang (zhuolin5@illinois.edu), UIUC\n\nWe thank the [commits](https://github.com/KaidiXu/auto_LiRPA/commits) and [pull requests](https://github.com/KaidiXu/auto_LiRPA/pulls) from community contributors.\n\nOur library is released under the BSD 3-Clause license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KaidiXu/auto_LiRPA",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "auto-LiRPA",
    "package_url": "https://pypi.org/project/auto-LiRPA/",
    "platform": "any",
    "project_url": "https://pypi.org/project/auto-LiRPA/",
    "project_urls": {
      "Homepage": "https://github.com/KaidiXu/auto_LiRPA"
    },
    "release_url": "https://pypi.org/project/auto-LiRPA/0.3/",
    "requires_dist": [
      "torch (<1.13.0,>=1.8.0)",
      "torchvision (<0.14,>=0.9)",
      "numpy (>=1.16)",
      "packaging (>=20.0)",
      "pytest (>=5.0)",
      "pylint (>=2.15)",
      "pytest-order (>=1.0.0)",
      "appdirs (>=1.4)",
      "pyyaml (>=5.0)",
      "ninja (>=1.10)"
    ],
    "requires_python": "",
    "summary": "A library for Automatic Linear Relaxation based Perturbation Analysis (LiRPA) on general computational graphs, with a focus on adversarial robustness verification and certification of deep neural networks.",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15170631,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "464b8cd48c38dc1e3f73ba3c34f9adc61d906d9edcc8b7d9acce59407ebb942f",
          "md5": "667b0d73c27a6654e8df9f8a9a726d0d",
          "sha256": "d9574d6e6fbf50356164a524d88406924030a55bb5015ddbce217ed9d79f665d"
        },
        "downloads": -1,
        "filename": "auto_LiRPA-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "667b0d73c27a6654e8df9f8a9a726d0d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 100790,
        "upload_time": "2021-11-07T19:56:52",
        "upload_time_iso_8601": "2021-11-07T19:56:52.871262Z",
        "url": "https://files.pythonhosted.org/packages/46/4b/8cd48c38dc1e3f73ba3c34f9adc61d906d9edcc8b7d9acce59407ebb942f/auto_LiRPA-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b2e2704f9415c544abafb03798c19e207604b026333f585760f812de71a8c0d",
          "md5": "9f6aa8bfeb12b627f39e1e5176c1f34d",
          "sha256": "461d23fe10f7c62e9c41196543d891bccc4593528100035cc9f4095deb882700"
        },
        "downloads": -1,
        "filename": "auto_LiRPA-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9f6aa8bfeb12b627f39e1e5176c1f34d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 93394,
        "upload_time": "2021-11-07T19:56:54",
        "upload_time_iso_8601": "2021-11-07T19:56:54.333991Z",
        "url": "https://files.pythonhosted.org/packages/2b/2e/2704f9415c544abafb03798c19e207604b026333f585760f812de71a8c0d/auto_LiRPA-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b49f31468160a3ce0d5bb84498469f7bffff53584ceacfc0d5598c70abf1b260",
          "md5": "7b6c6c84b1a8acc0a8f4ccce98da6332",
          "sha256": "66266cba1b54d6783cfbe79d48ecff8f1468d508d748468f1896854ad07ddec9"
        },
        "downloads": -1,
        "filename": "auto_LiRPA-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b6c6c84b1a8acc0a8f4ccce98da6332",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 163809,
        "upload_time": "2022-09-21T21:28:07",
        "upload_time_iso_8601": "2022-09-21T21:28:07.241138Z",
        "url": "https://files.pythonhosted.org/packages/b4/9f/31468160a3ce0d5bb84498469f7bffff53584ceacfc0d5598c70abf1b260/auto_LiRPA-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3425803c86bcf2ddfb73850c19d11ce3b815654bbd0eae7af5959e20fdf794b9",
          "md5": "df3529e8815c9de56921df3fe82290c9",
          "sha256": "8b288220938a4ab6563534d39c24d9b5cc59d5c087cff157e6d2a44fab9e4e73"
        },
        "downloads": -1,
        "filename": "auto_LiRPA-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "df3529e8815c9de56921df3fe82290c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 151663,
        "upload_time": "2022-09-21T21:28:10",
        "upload_time_iso_8601": "2022-09-21T21:28:10.118442Z",
        "url": "https://files.pythonhosted.org/packages/34/25/803c86bcf2ddfb73850c19d11ce3b815654bbd0eae7af5959e20fdf794b9/auto_LiRPA-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b49f31468160a3ce0d5bb84498469f7bffff53584ceacfc0d5598c70abf1b260",
        "md5": "7b6c6c84b1a8acc0a8f4ccce98da6332",
        "sha256": "66266cba1b54d6783cfbe79d48ecff8f1468d508d748468f1896854ad07ddec9"
      },
      "downloads": -1,
      "filename": "auto_LiRPA-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7b6c6c84b1a8acc0a8f4ccce98da6332",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 163809,
      "upload_time": "2022-09-21T21:28:07",
      "upload_time_iso_8601": "2022-09-21T21:28:07.241138Z",
      "url": "https://files.pythonhosted.org/packages/b4/9f/31468160a3ce0d5bb84498469f7bffff53584ceacfc0d5598c70abf1b260/auto_LiRPA-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3425803c86bcf2ddfb73850c19d11ce3b815654bbd0eae7af5959e20fdf794b9",
        "md5": "df3529e8815c9de56921df3fe82290c9",
        "sha256": "8b288220938a4ab6563534d39c24d9b5cc59d5c087cff157e6d2a44fab9e4e73"
      },
      "downloads": -1,
      "filename": "auto_LiRPA-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "df3529e8815c9de56921df3fe82290c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 151663,
      "upload_time": "2022-09-21T21:28:10",
      "upload_time_iso_8601": "2022-09-21T21:28:10.118442Z",
      "url": "https://files.pythonhosted.org/packages/34/25/803c86bcf2ddfb73850c19d11ce3b815654bbd0eae7af5959e20fdf794b9/auto_LiRPA-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}