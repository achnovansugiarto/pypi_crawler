{
  "info": {
    "author": "Korijn van Golen",
    "author_email": "korijn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/stirfried.svg)](https://badge.fury.io/py/stirfried)\n[![Docker Image Version (latest semver)](https://img.shields.io/docker/v/korijn/stirfried?label=docker%20image)](https://hub.docker.com/r/korijn/stirfried)\n\n# Stirfried ðŸ¥¡\n\nStirfried is an ASGI HTTP/Socket.IO server that provides both browser-based and regular clients with real-time control over Celery tasks.\n\nTasks are scheduled by name, meaning the server won't necessarily need an update when changes are made to the workers and tasks available to it.\n\nStirfried implements a simple-to-scale, three layered architecture: clients, servers and workers. Any layer can be scaled out by adding more instances.\n\nStirfried provides Socket.IO and HTTP APIs with three core functions:\n\n* Schedule a task\n* Revoke a task\n* Query task info\n\nWant to see Stirfried in action before digging through the README? Try running the [example](#example-code).\n\nBuilt on:\n\n* [starlette](https://www.starlette.io/) & [uvicorn](https://www.uvicorn.org/)\n* [python-socketio](https://github.com/miguelgrinberg/python-socketio)\n* [celery](http://www.celeryproject.org/)\n\n## Workers\n\nInstall Stirfried in your Celery workers via pip/pipenv/poetry:\n\n`pip install stirfried`\n\nImport the `StirfriedTask`:\n\n```python\nfrom stirfried.celery import StirfriedTask\n```\n\nConfigure the base class globally:\n\n```python\napp = Celery(..., task_cls=StirfriedTask)\n```\n\n...or per task:\n\n```python\n@app.task(base=StirfriedTask)\ndef add(x, y, room=None):\n    return x + y\n```\n\n## Servers\n\nThe server can be run by running the `korijn/stirfried` Docker container and\nexposing port 8000, or alternatively by cloning this repo, installing the dependencies\nwith poetry and starting the `uvicorn` server as demonstrated in the example code.\n\nYou can configure both the servers and workers with a `settings.py` file, via the standard Celery configuration mechanism. In the docker deployment scenario, you can mount the settings file to the path `/app/settings.py`.\n\n## Clients\n\nClients can connect to the Socket.IO API using standard [Socket.IO](https://socket.io/) libraries, and to the HTTP API using plain `window.fetch`.\n\n## Task object schema\n\nTasks are scheduled by submitting the following task object to either of the APIs:\n\n```javascript\n{\n    \"task_name\": \"\",  // (required) task name\n    \"args\": [],       // (optional) task arguments\n    \"kwargs\": {},     // (optional) task keyword arguments\n    \"room\": \"\",       // (optional) custom room override, only processed if\n                      //            `custom_rooms` is enabled\n                      //            NOTE: can also be used to disable server events\n                      //                  for this task by passing the sentinel room\n                      //                  (\"NO_EMIT\" by default)\n    \"chain\": []       // (optional) array of task objects to chain onto the main task\n                      //            task objects use the same schema, except for\n                      //            the `chain` property which cannot be nested further\n                      //            NOTE: chained tasks are applied in reverse order\n}\n```\n\n## Socket.IO API\n\nEvents are described in the following format: `name(args[, optional]) -> callback_args`\n\nClients can **emit** any of the following events that servers are listening for:\n\n| Event | Description |\n| ----- | ----------- |\n| `send_task({task_name[, args][, kwargs][, room][, chain]}) -> {status, data}` | Schedule a task. Use a callback to receive the reply in the client. `status` indicates if scheduling succeeded and `data` contains the task id or error message in case of failure. The client can use the task id as reference when processing subsequent server-emitted events. Reference the [task object schema](#task-object-schema) for more details. |\n| `revoke_task(task_id)` | Revoke a task. Will not fail if the task does not exist, and won't do anything if the task is already running. |\n| `task_info(task_id) -> {id, state, result}` | Query task info. Use a callback to receive the reply in the client. Only works if a Celery result backend is configured. |\n\nClients can **listen** for the following server-emitted events, which directly hook into the Celery Task class callbacks, except for `on_progress` which is a Stirfried addition and may be implemented by tasks to support progress events:\n\n| Event | Description |\n| ----- | ----------- |\n| `on_progress({current, total, info, task_id, task_name})` | Emitted on task progress updates. This event will only be emitted if tasks call `emit_progress`. |\n| `on_retry({task_id, task_name[, einfo]})` | Emitted automatically on task retries. `einfo` is only included if `stirfried_error_info=True`. |\n| `on_failure({task_id, task_name[, einfo]})` | Emitted automatically on task failure. `einfo` is only included if `stirfried_error_info=True`. |\n| `on_success({retval, task_id, task_name})` | Emitted automatically on task success. |\n| `on_return({status, retval, task_id, task_name})` | Emitted automatically on task success and failure. |\n\n## HTTP API\n\n| Endpoint | Description |\n| -------- | ----------- |\n| `POST /task` | Schedule a task. Submit the Task object as JSON the body of the request. Reference the [task object schema](#task-object-schema) for more details. |\n| `DELETE /task/{id}` | Revoke a task. Will not fail if the task does not exist, and won't do anything if the task is already running. |\n| `GET /task/{id}` | Query task info. Only works if a Celery result backend is configured. |\n\n## Settings\n\nYou can configure Celery, Socket.IO and Stirfried all from the same `settings.py` file. Stirfried settings are prefixed with `stirfried_`, Socket.IO settings are prefixed with `socketio_`, and Celery settings are used as-is (not prefixed).\n\nSocket.IO server settings are passed on directly (but without the prefix) to the `AsyncServer` constructor of the python-socketio library, see their [documentation](https://python-socketio.readthedocs.io/en/latest/api.html#asyncserver-class) for the options that are available. See the Celery [documentation](https://docs.celeryproject.org/en/stable/userguide/configuration.html) for the options there.\n\nThe following options are additionally available for configuring Stirfried **servers and workers**:\n\n| Key | Type | Default | Description |\n| --- | ---- | ------- | ----------- |\n| `stirfried_enable_http` | `bool` | `True` | Set to `False` to disable the HTTP API. |\n| `stirfried_enable_socketio` | `bool` | `True` | Set to `False` to disable the Socket.IO API. |\n| `stirfried_enable_task_info` | `bool` | `True` | Set to `False` to disable the `task_info` event and `GET /task/{id}` endpoint. |\n| `stirfried_enable_revoke_task` | `bool` | `True` | Set to `False` to disable the `revoke_task` event and `DELETE /task/{id}` endpoint. |\n| `stirfried_redis_url` | `str` | `\"\"` | Connection string for the Socket.IO API server-to-server communication over Redis pubsub. Required if you want workers to be able to emit events. |\n| `stirfried_available_tasks` | `List[str]` | `[]` | If non-empty, `send_task` and `POST /task` will fail if a task name is not contained in the list. |\n| `stirfried_error_info` | `bool` | `False` | Set to `True` to include error messages and tracebacks in events, event callbacks and HTTP responses. |\n| `stirfried_sentinel_room` | `str` | `\"NO_EMIT\"` | A magic string value that can be passed to the `room` argument to prevent workers from emitting events for a task. This is the default `room` value for task sent to the HTTP API since there is no Socket.IO client. |\n| `stirfried_custom_rooms` | `bool` | `False` | Set to `True` to allow clients to override the default `room` for server-emitted events. |\n| `stirfried_header_task_map` | `Dict[str, Dict[str, str]` | `{}` | Configure to map headers to keyword arguments for specific tasks. For example, `{\"send_email\": {\"Date\": \"date\"}}`, would cause the `Date` header's value to be injected into the keyword argument `date` whenever a `send_email` task is scheduled. This can be used in concert with Socket.IO's `extraHeaders` feature to implement authorization and validation.\n\n## Rooms\n\nFor Socket.IO API scheduled tasks, server-emitted events are sent to the client that scheduled the task by default. For HTTP API scheduled tasks, server-emitted events are not emitted by default. The server accomplishes this by injecting a value into\nthe `room` keyword argument of Stirfried Celery tasks.\n\nThe `StirfriedTask` base class depends on the presence of this keyword argument.\n\nThis means you are required to add the keyword argument `room=None` to your\ntask definitions in order to receive it.\n\nIf `custom_rooms` is enabled, clients can override the value by sending along a custom `room` value (though not via the keyword arguments of the task, see the API schema documentation).\n\n## Progress events\n\nYou can emit progress events from workers by calling `self.emit_progress(current, total, info=None)` in a task.\n\nYou can use the optional `info` keyword argument to send along arbitrary metadata, such as a progress message or early results.\n\nNote that you are required to pass `bind=True` to the `celery.task` decorator\nin order to get access to the `self` instance variable.\n\n```python\n@celery.task(bind=True)\ndef add(self, x, y, room=None):\n    s = x\n    self.emit_progress(50, 100)  # 50%\n    s += y\n    return s\n```\n\n## Binary/big data\n\nSocket.IO clients, servers and Celery workers support the `msgpack`\ntransport, allowing you to use binary data directly (without needing to manually convert\nto and from base64 encoded strings and suffering the according performance penalty).\n\nYou should also be aware of [limitations in Redis](http://redis.io/topics/clients#output-buffers-limits)\non client output buffers. This means that you cannot emit events greater than a certain\nvalue (32mb by default). You can override this setting in various ways, here's how to do\nit via the Redis server CLI:\n\n```bash\n# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>\nredis-server --client-output-buffer-limit pubsub 256mb 128mb 30\n```\n\n## Testing\n\nWhen unit testing a Stirfried Celery worker, the recommended approach is to disable the\nRedis connection by simply leaving out `stirfried_redis_url` from your settings, and to\ndirectly call the task functions in unit tests. The lack of a Redis connection will\nshort-circuit any events that would normally be emitted. This setup will allow you to\ntreat tasks as regular functions and perform unit testing as usual.\n\nOptionally, you can patch/mock any calls to `self.emit_progress` using standard Python\ntesting utilities to test those too.\n\n## Example code\n\nThe repo includes an example demonstrating all of the functionality provided by Stirfried.\n\nYou can run the example as follows:\n\n* Clone the repository\n* `cd` into the `example` directory\n* Run `docker-compose build`\n* Then `docker-compose up`\n* Open your browser and go to `http://localhost:8080/`\n* You should see the following interface and are ready to give Stirfried a try:\n\n![Stirfried ðŸ¥¡ test client](https://user-images.githubusercontent.com/1882046/76843175-b2c78200-683b-11ea-92df-b2169a7ce9ce.png)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stirfried",
    "package_url": "https://pypi.org/project/stirfried/",
    "platform": "",
    "project_url": "https://pypi.org/project/stirfried/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/stirfried/0.7.0/",
    "requires_dist": [
      "celery (>=4.4.0,<5.0.0)",
      "python-socketio (>=4.4.0,<5.0.0)",
      "redis (>=3.4.1,<4.0.0)",
      "aioredis (>=1.3.1,<2.0.0); extra == \"server\"",
      "uvicorn (>=0.11.3,<0.12.0); extra == \"server\"",
      "starlette (>=0.13.2,<0.14.0); extra == \"server\"",
      "msgpack-python (>=0.5.6,<0.6.0); extra == \"msgpack\""
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Socket.IO server to schedule Celery tasks from clients in real-time.",
    "version": "0.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7118826,
  "releases": {
    "0.1.0": [],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a288372b137233020a521e2068a15d799e7d09df7b905020b22567e43602b96",
          "md5": "fee18450c464929d062124d6fd51d596",
          "sha256": "a76b8e6d76a08e23d506e946fa349bcb8b63cf15ff4ed961a6f93c7176394da4"
        },
        "downloads": -1,
        "filename": "stirfried-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fee18450c464929d062124d6fd51d596",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 4209,
        "upload_time": "2020-03-08T15:33:16",
        "upload_time_iso_8601": "2020-03-08T15:33:16.096721Z",
        "url": "https://files.pythonhosted.org/packages/0a/28/8372b137233020a521e2068a15d799e7d09df7b905020b22567e43602b96/stirfried-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7a27f949de43a6332a715739dd8710b0049a3975d6ae044a4471391715e19da",
          "md5": "f0fd0fdee8e91d9ddfa33cca82164b6d",
          "sha256": "22cdbbc7a30252e2518707cc8d435522fd769b4eb8f5cd256e60a62a79302475"
        },
        "downloads": -1,
        "filename": "stirfried-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f0fd0fdee8e91d9ddfa33cca82164b6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 4521,
        "upload_time": "2020-03-08T15:33:17",
        "upload_time_iso_8601": "2020-03-08T15:33:17.068212Z",
        "url": "https://files.pythonhosted.org/packages/a7/a2/7f949de43a6332a715739dd8710b0049a3975d6ae044a4471391715e19da/stirfried-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "183861a3fddff29d44f31a9cb6131124e8a09859a3883ee8f40bd9d8d3e75c46",
          "md5": "15b956c95063aad580f4f3df3b504c25",
          "sha256": "fa6f5ee7f963c366fc985c399288a860b0a7931735248ecfc40b201489a99ba5"
        },
        "downloads": -1,
        "filename": "stirfried-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15b956c95063aad580f4f3df3b504c25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 4427,
        "upload_time": "2020-03-08T19:30:51",
        "upload_time_iso_8601": "2020-03-08T19:30:51.587717Z",
        "url": "https://files.pythonhosted.org/packages/18/38/61a3fddff29d44f31a9cb6131124e8a09859a3883ee8f40bd9d8d3e75c46/stirfried-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fac0ff11f5cb3a00f1539756b24778b3c51c060e7aea4b8ff0a7a4f361dff6c4",
          "md5": "54d8b41f0a52164067ccc66f78abba89",
          "sha256": "69eb1277f19decf3cd396e6d1bb5a1ea138f1148c989002bfc8ea8d6c2fa08f6"
        },
        "downloads": -1,
        "filename": "stirfried-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "54d8b41f0a52164067ccc66f78abba89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 4873,
        "upload_time": "2020-03-08T19:30:52",
        "upload_time_iso_8601": "2020-03-08T19:30:52.985357Z",
        "url": "https://files.pythonhosted.org/packages/fa/c0/ff11f5cb3a00f1539756b24778b3c51c060e7aea4b8ff0a7a4f361dff6c4/stirfried-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88fe78706a28553e217198d4b7b43e2e0ffe73f6912659b1eee19a8475aa1644",
          "md5": "35352adb27176ae91b4f723e702f0412",
          "sha256": "0239e25d4b33b6a046f0dfda6aba2f4ab28c335eeefc4ededdf8bffe4a982c63"
        },
        "downloads": -1,
        "filename": "stirfried-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35352adb27176ae91b4f723e702f0412",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 5262,
        "upload_time": "2020-03-10T15:03:54",
        "upload_time_iso_8601": "2020-03-10T15:03:54.766382Z",
        "url": "https://files.pythonhosted.org/packages/88/fe/78706a28553e217198d4b7b43e2e0ffe73f6912659b1eee19a8475aa1644/stirfried-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46fdbf55058498522d7f8ca7e09ea22a0365f493638d15195c0fa22f42d5c54b",
          "md5": "0145793f387fa4cc7ded04fe46bac091",
          "sha256": "2ca0bb2b0208088f2dcd209852f39b348d8d627c2a14db4bf64f10719d2a3d50"
        },
        "downloads": -1,
        "filename": "stirfried-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0145793f387fa4cc7ded04fe46bac091",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 5453,
        "upload_time": "2020-03-10T15:03:56",
        "upload_time_iso_8601": "2020-03-10T15:03:56.234175Z",
        "url": "https://files.pythonhosted.org/packages/46/fd/bf55058498522d7f8ca7e09ea22a0365f493638d15195c0fa22f42d5c54b/stirfried-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab02db8b1c3384db4cbd0abb5e8650c92b97c91ec35291bfff074ac63f0c4e20",
          "md5": "dd8660209f9d70333ed221a48625d474",
          "sha256": "3673c26dc300265519aa88d139c3a4f2282f817d3595147daadf85ba857850f4"
        },
        "downloads": -1,
        "filename": "stirfried-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd8660209f9d70333ed221a48625d474",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 5277,
        "upload_time": "2020-03-17T09:41:46",
        "upload_time_iso_8601": "2020-03-17T09:41:46.823938Z",
        "url": "https://files.pythonhosted.org/packages/ab/02/db8b1c3384db4cbd0abb5e8650c92b97c91ec35291bfff074ac63f0c4e20/stirfried-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eea21ea48acb7b64fcfac30b05bf65eeeee2dd5e4897ce2ec730e0094d28b5f4",
          "md5": "92019efc0abdfd613f513103b082e568",
          "sha256": "706266d9b8c5bc8cd2e626e482f6ac67c26b54182b511f88ed91e6b120d901d4"
        },
        "downloads": -1,
        "filename": "stirfried-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "92019efc0abdfd613f513103b082e568",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 5504,
        "upload_time": "2020-03-17T09:41:48",
        "upload_time_iso_8601": "2020-03-17T09:41:48.502393Z",
        "url": "https://files.pythonhosted.org/packages/ee/a2/1ea48acb7b64fcfac30b05bf65eeeee2dd5e4897ce2ec730e0094d28b5f4/stirfried-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d52f25ef5d6e9bd6020a88f9ac7b02b5b11ce1f175291f4b03b42b32db2c708c",
          "md5": "908dd5ab99eede906b2835e231da6757",
          "sha256": "2e9b0a5eb351ddfeb36e214e86bc030b1c522a562ee8ad24582ec5795bf13e3d"
        },
        "downloads": -1,
        "filename": "stirfried-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "908dd5ab99eede906b2835e231da6757",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 6546,
        "upload_time": "2020-04-17T12:33:26",
        "upload_time_iso_8601": "2020-04-17T12:33:26.991665Z",
        "url": "https://files.pythonhosted.org/packages/d5/2f/25ef5d6e9bd6020a88f9ac7b02b5b11ce1f175291f4b03b42b32db2c708c/stirfried-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57c9798087b886a1043bf4519154911e19e984600186ec0d820dde588fd1b14e",
          "md5": "15b24c8ba77a7dcde40a3714721bc805",
          "sha256": "f044386af0c7feaaeed63e8792a9065301a0b7ff93074dbc9dc6c3896b0cc183"
        },
        "downloads": -1,
        "filename": "stirfried-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15b24c8ba77a7dcde40a3714721bc805",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 7194,
        "upload_time": "2020-04-17T12:33:28",
        "upload_time_iso_8601": "2020-04-17T12:33:28.481217Z",
        "url": "https://files.pythonhosted.org/packages/57/c9/798087b886a1043bf4519154911e19e984600186ec0d820dde588fd1b14e/stirfried-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "240abaa5130005be9c6211d4619b28a65ecd71d0013e1e46a62b51151b3cc863",
          "md5": "bceeca9c55db7b17a8c062712f9b01a7",
          "sha256": "b5e049f99122e589be6e7eac4a8507576e37a11b719332a1b58d613be6c4dc9d"
        },
        "downloads": -1,
        "filename": "stirfried-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bceeca9c55db7b17a8c062712f9b01a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 8432,
        "upload_time": "2020-04-28T10:00:01",
        "upload_time_iso_8601": "2020-04-28T10:00:01.055614Z",
        "url": "https://files.pythonhosted.org/packages/24/0a/baa5130005be9c6211d4619b28a65ecd71d0013e1e46a62b51151b3cc863/stirfried-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8037bcfb58478a565e5567d4ccba91ca7d61e5ba6cb8aa427776b62a4639b05",
          "md5": "8d86b95f23361d73023b7df22bd66b9c",
          "sha256": "5a715003c3417bf7dd6531be2fd701bb18c001470dcd6750879065d99428e327"
        },
        "downloads": -1,
        "filename": "stirfried-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d86b95f23361d73023b7df22bd66b9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 9489,
        "upload_time": "2020-04-28T10:00:02",
        "upload_time_iso_8601": "2020-04-28T10:00:02.575568Z",
        "url": "https://files.pythonhosted.org/packages/c8/03/7bcfb58478a565e5567d4ccba91ca7d61e5ba6cb8aa427776b62a4639b05/stirfried-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "240abaa5130005be9c6211d4619b28a65ecd71d0013e1e46a62b51151b3cc863",
        "md5": "bceeca9c55db7b17a8c062712f9b01a7",
        "sha256": "b5e049f99122e589be6e7eac4a8507576e37a11b719332a1b58d613be6c4dc9d"
      },
      "downloads": -1,
      "filename": "stirfried-0.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bceeca9c55db7b17a8c062712f9b01a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 8432,
      "upload_time": "2020-04-28T10:00:01",
      "upload_time_iso_8601": "2020-04-28T10:00:01.055614Z",
      "url": "https://files.pythonhosted.org/packages/24/0a/baa5130005be9c6211d4619b28a65ecd71d0013e1e46a62b51151b3cc863/stirfried-0.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8037bcfb58478a565e5567d4ccba91ca7d61e5ba6cb8aa427776b62a4639b05",
        "md5": "8d86b95f23361d73023b7df22bd66b9c",
        "sha256": "5a715003c3417bf7dd6531be2fd701bb18c001470dcd6750879065d99428e327"
      },
      "downloads": -1,
      "filename": "stirfried-0.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8d86b95f23361d73023b7df22bd66b9c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 9489,
      "upload_time": "2020-04-28T10:00:02",
      "upload_time_iso_8601": "2020-04-28T10:00:02.575568Z",
      "url": "https://files.pythonhosted.org/packages/c8/03/7bcfb58478a565e5567d4ccba91ca7d61e5ba6cb8aa427776b62a4639b05/stirfried-0.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}