{
  "info": {
    "author": "Peter Ilfrich",
    "author_email": "das-peter@gmx.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Python Basic Utilities - Mongo `pbumongo`\n\nAvailable on [PyPi](https://pypi.org/project/pbumongo/)\n\n**Table of Contents**\n\n1. [Installation](#installation)\n2. [Usage](#usage)\n3. [Classes](#classes)\n    1. [AbstractMongoStore](#abstractmongostore) - abstract class for handling MongoDB collection access\n    2. [AbstractMongoDocument](#abstractmongodocument) - abstract class for wrapping MongoDB BSON documents\n\n\n## Installation\n\nInstall via pip:\n\n```bash\npip install pbumongo\n```\n\n## Usage\n\nIt is good practice associating a sub-class of `AbstractMongoDocument` with a sub-class of `AbstractMongoStore`. This is\ndone through the `deserialised_class` parameter in the `super()` constructor call of the store class. Any method for\nquerying documents will use that class to deserialise the BSON document into the provided class, which should extend\n`AbstractMongoDocument`.\n\nExample: let's say we want to implement access to a collection containing user documents. We'll define a class `User`\nthat extends `AbstractMongoDocument` and a class `UserStore` that extends `AbstractMongoStore`.\n\n```python\n# main imports\nfrom pbumongo import AbstractMongoDocument, AbstractMongoStore\n# supporting imports\nimport crypt\nfrom typing import List, Optional\nfrom time import time\n\n\n# this is an example of a minimum viable class\nclass User(AbstractMongoDocument):\n    def __init__(self):\n        super().__init__()\n        # define attributes with meaningful defaults\n        self.username: str = None\n        self.password: str = None\n        self.permissions: List[str] = []\n        self.last_login: int = 0\n\n    def get_attribute_mapping(self) -> dict:\n        # the values are what is used inside MongoDB documents\n        return {\n            \"username\": \"username\",\n            \"password\": \"password\",\n            \"permissions\": \"permissions\",\n            \"last_login\": \"lastLogin\"\n        }\n\n    @staticmethod\n    def from_json(json: dict):\n        user = User()\n        user.extract_system_fields(json)\n        return user\n\n\nclass UserStore(AbstractMongoStore):\n    def __init__(self, mongo_url, mongo_db, collection_name):\n        super().__init__(mongo_url, mongo_db, collection_name, deserialised_class=User, data_model_version=1)\n\n    def login(self, username, password) -> Optional[User]:\n        # encrypt the password!\n        pw_encrypted = crypt.crypt(password, crypt.METHOD_MD5)\n        user: Optional[User] = self.query_one({\"username\": username, \"password\": pw_encrypted})\n        if user is not None:\n            # update last_login attribute and save it in database as well\n            user.last_login = round(time())\n            self.update_one(AbstractMongoStore.id_query(user.id),\n                            AbstractMongoStore.set_update(\"lastLogin\", user.last_login))\n        return user\n\n    def create_user(self, username, password) -> User:\n        # check if this user already exists\n        existing = self.query_one({\"username\": username})\n        if existing is not None:\n            raise ValueError(f\"User with username '{username}' already exists.\")\n        # create new user object\n        user = User()\n        user.username = username\n        user.password = crypt.crypt(password, crypt.METHOD_MD5)\n        # store in database and return document\n        user_id = self.create(user)\n        return self.get(user_id)\n```\n\nTo use these classes in your application, you can use the MongoConnection helper or create the `UserStore` class\ninstance directly. The `MongoConnection` helper is useful, when you have a lot of collections and don't want to repeat\nthe mongo connection URL and DB name for every constructor.\n\n```python\nfrom pbumongo import MongoConnection\nfrom mypackage import UserStore  # see implementation above\n\ncon = MongoConnection(\"mongodb://localhost:27017\", \"myDbName\")\nuser_store = con.create_store(store_class=UserStore, collection_name=\"users\")\n\nuser = user_store.login(username=\"admin\", password=\"mypassword\")\n```\n\n## Classes\n\n### AbstractMongoStore\n\nThis is an abstract class and cannot be instantiated directly. Instead, define a class that extends this class.\n\n**Constructor**\n\n`__init__(mongo_url, mongo_db, collection_name, deserialised_class, data_model_version=1)`\n\n- `mongo_url` - this is the Mongo connection URL containing the host, port and optional username, password\n- `mongo_db` - this is the Mongo DB name - the one you provide when using `use <dbname>` on the Mongo shell\n- `collection_name` - the name of the collection - e.g. `myCollection` for `db.myCollection.find({})` on the Mongo shell\n- `deserialised_class` - used for all the query methods to deserialise the BSON document into a class with attributes\n  for easier access\n- `data_model_version` - a number that can be used for database migration as an app develops over time\n\n**Methods**\n\n- `get(doc_id: str)` - fetches a single document with a matching `doc_id == document[\"_id\"]`\n- `get_all()` - fetches the entire collection content and deserialises every document. Careful, this is not an iterator,\n  but returns a `list` of all the documents and can consume quite a bit of compute and memory.\n- `create(document)` - creates a new document and returns the `_id` of the newly created BSON document as string. The\n  `document` can be either `dict` or an instance of the `deserialised_class` provided in the `super().__init(..)` call.\n- `query_one(query: dict)` - fetches a single document and deserialises it or returns `None` if no document can be found\n- `query(query: dict, sorting, paging)` - fetches multiple documents and deserialises them. `sorting` can be an\n  attribute name (as provided in the BSON) or a dictionary with the sort order. `paging` is an instance of\n  `pbumongo.PagingInformation`.\n- `update_one(query: dict, update: dict)` - proxies the `db.collection.updateOne(..)` function from the Mongo shell\n- `update(query:, update: dict` - same as `update_one`, but will update multiple documents, if the query matches\n- `update_full(document)` - shortcut for updating the entire document with an updated version, the query will be\n  constructed from the `id`/`_id` provided by the `document`.\n- `delete(doc_id)` - deletes a single document with the provided document ID\n- `delete_many(query: dict)` - deletes multiple documents matching the query.\n\n**Static Methods**\n\n- `AbstractMongoStore.id_query(string_id: str)` - creates a query `{ \"_id\": ObjectId(string_id) }`, which can be used to\n  query the database\n- `AbstractMongoStore.set_update(keys, values)` - creates a `$set` update statement. If only a single attribute is \n  updated, you can pass them directly as parameters, e.g. updating a key `\"checked\": True`, can be done by \n  `.set_update(\"checked\", True)`. If you update multiple attributes provide them as list in the matching order.\n- `AbstractMongoStore.unset_update(keys)` - creates an `$unset` update statement with the attributes listed as `keys`.\n  Similarly to `.set_update`, you can provide a single key without a list for ease of use.\n\n### AbstractMongoDocument\n\nThis is an abstract class and cannot be instantiated directly. Instead, define a class that extends this class.\n\n**Constructor**\n\n`__init__(doc_id=None, data_model_version=None)`\n\nThe parameters are entirely optional. Generally it is recommended to use the static method `from_json(json: dict)` to \ncreate BSON documents you've loaded from the database instead of calling the constructor. For new documents, you would\nnot provide the `_id` as the store class handles that.\n\n**Methods**\n\nFor methods and static methods please see the documentation of `JsonDocument` from `pbu`. `AbstractMongoDocument` \nextends that class.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ilfrich/pbu-mongo",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pbumongo",
    "package_url": "https://pypi.org/project/pbumongo/",
    "platform": null,
    "project_url": "https://pypi.org/project/pbumongo/",
    "project_urls": {
      "Homepage": "https://github.com/ilfrich/pbu-mongo"
    },
    "release_url": "https://pypi.org/project/pbumongo/1.0.0/",
    "requires_dist": [
      "pymongo",
      "pbu (>=1.0.0)"
    ],
    "requires_python": "",
    "summary": "Basic MongoDB wrapper for object-oriented collection handling",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16555154,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95b9bf31fef486e83d345f545ad1bf9bf591744d353950a7c180328867407e11",
          "md5": "70c4158e014212f18f40b9ce46d1eed3",
          "sha256": "4150764161223565b55e7b5f255272c885fcd26a224e66481c3949b14efed77f"
        },
        "downloads": -1,
        "filename": "pbumongo-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70c4158e014212f18f40b9ce46d1eed3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12597,
        "upload_time": "2023-01-25T01:15:36",
        "upload_time_iso_8601": "2023-01-25T01:15:36.828208Z",
        "url": "https://files.pythonhosted.org/packages/95/b9/bf31fef486e83d345f545ad1bf9bf591744d353950a7c180328867407e11/pbumongo-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a4d14f2e47244342a473606266e9a60ebd159c397b0651c51b77d834342fea8",
          "md5": "cd174b25482e75b5283f7905cb6476aa",
          "sha256": "0277129a9b136b816dd9c7a3e96ce4dc2afdf2fc9bcfbe1410f7a8dd000f9ad1"
        },
        "downloads": -1,
        "filename": "pbumongo-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cd174b25482e75b5283f7905cb6476aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10312,
        "upload_time": "2023-01-25T01:15:38",
        "upload_time_iso_8601": "2023-01-25T01:15:38.920581Z",
        "url": "https://files.pythonhosted.org/packages/9a/4d/14f2e47244342a473606266e9a60ebd159c397b0651c51b77d834342fea8/pbumongo-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95b9bf31fef486e83d345f545ad1bf9bf591744d353950a7c180328867407e11",
        "md5": "70c4158e014212f18f40b9ce46d1eed3",
        "sha256": "4150764161223565b55e7b5f255272c885fcd26a224e66481c3949b14efed77f"
      },
      "downloads": -1,
      "filename": "pbumongo-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70c4158e014212f18f40b9ce46d1eed3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12597,
      "upload_time": "2023-01-25T01:15:36",
      "upload_time_iso_8601": "2023-01-25T01:15:36.828208Z",
      "url": "https://files.pythonhosted.org/packages/95/b9/bf31fef486e83d345f545ad1bf9bf591744d353950a7c180328867407e11/pbumongo-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a4d14f2e47244342a473606266e9a60ebd159c397b0651c51b77d834342fea8",
        "md5": "cd174b25482e75b5283f7905cb6476aa",
        "sha256": "0277129a9b136b816dd9c7a3e96ce4dc2afdf2fc9bcfbe1410f7a8dd000f9ad1"
      },
      "downloads": -1,
      "filename": "pbumongo-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cd174b25482e75b5283f7905cb6476aa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10312,
      "upload_time": "2023-01-25T01:15:38",
      "upload_time_iso_8601": "2023-01-25T01:15:38.920581Z",
      "url": "https://files.pythonhosted.org/packages/9a/4d/14f2e47244342a473606266e9a60ebd159c397b0651c51b77d834342fea8/pbumongo-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}