{
  "info": {
    "author": "Michael Jungo",
    "author_email": "michaeljungo92@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: System :: Logging",
      "Typing :: Typed"
    ],
    "description": "# Log and Visualise Data (Lavd)\n\n[![Node.js][actions-nodejs-badge]][actions-nodejs-link]\n[![Python][actions-python-badge]][actions-python-link]\n\n![Lavd Screenshot](.github/lavd.png)\n\nTracking the progress of Machine Learning (ML) experiments is essential for\ndeciding what model works well with the available data. Using some kind of\nmetric, for example Intersection over Union (IoU) for object detection, gives\na good idea of the quality of the model, but additionally, it is important to\nalso see a particular example to get a better intuition. This, and more can be\nlogged and visualised in an interactive manner, including:\n\n- Scalars\n- Images\n- Text\n- Log files\n- Markdown documents\n- CLI commands (how to run the experiment with the same parameters)\n\n_...and more to come._\n\n## Table of Contents\n\n- [Table of Contents](#table-of-contents)\n- [Getting Started](#getting-started)\n- [Logging Data](#logging-data)\n  - [Scalars](#scalars)\n  - [Images](#images)\n  - [Text](#text)\n  - [Markdown](#markdown)\n  - [Command Line Options](#command-line-options)\n  - [Summary](#summary)\n  - [Printing](#printing)\n  - [Spinner](#spinner)\n  - [Progress Bar](#progress-bar)\n  - [Saving a PyTorch Model](#saving-a-pytorch-model)\n  - [Saving any Object](#saving-any-object)\n  - [Disabling the Logger](#disabling-the-logger)\n- [Data Layout](#data-layout)\n- [Comparison to TensorBoard](#comparison-to-tensorboard)\n- [Known Issues](#known-issues)\n  - [Inotify watch limit reached](#inotify-watch-limit-reached)\n\n## Getting Started\n\nInstalling with pip:\n\n```sh\npip install --user --upgrade lavd\n```\n\nOnce installed, the server can be started by running `lavd` with the directory\ncontaining the (logged) data:\n\n```sh\nlavd path/to/logs\n```\n\nOr if you prefer to run it as a module instead of using the executable (both\nversions do exactly the same):\n\n```sh\npython -m lavd.server path/to/logs\n```\n\n## Logging Data\n\n_Lavd_ includes a logger that can be used to easily log all the desired data.\n\n```python\nimport lavd\n\n# Logs everything to log/some-experiment-name/\n# If no name is giving it the current date and time are used as a name\nlogger = lavd.Logger(\"some-experiment-name\")\n```\n\n### Scalars\n\nScalars will be plotted and unlike other categories, the have to be assigned to\na step.\n\n```python\nlogger.log_scalar(0.8, \"accuracy\", step=1)\nlogger.log_scalar(0.6, \"accuracy\", step=2)\nlogger.log_scalar(0.3, \"accuracy\", step=3)\n\nlogger.log_scalar(0.1, \"easy/accuracy\", step=7)\nlogger.log_scalar(0.05, \"easy/accuracy\", step=14)\n```\n\n### Images\n\nLogging images with optional bounding boxes that for interactive visualisation.\n\n```python\n # Saves image to: log/some-experiment-name/0001/bird.png\nlogger.log_image(image, \"bird\", step=1)\n # Saves image to: log/some-experiment-name/0001/other/bird.png\nlogger.log_image(image, \"other/bird\", step=1)\n# No step saves it to: log/some-experiment-name/other/bird.png\nlogger.log_image(image, \"other/bird\")\n\n# With bounding boxes, each box is given by 2 points: top-left and bottom-right.\nboxes = [\n    {\n        \"xStart\": 100,\n        \"yStart\": 100,\n        \"xEnd\": 150,\n        \"yEnd\": 200,\n        \"className\": \"bird\", # Optional\n        \"probability\": 0.4,  # Optional\n    },\n    # Another bounding box, without class or probability\n    {\"xStart\": 200, \"yStart\": 22, \"xEnd\": 233, \"yEnd\": 80,},\n]\n# List of available classes\nclasses = [\"bird\", \"orange\", \"background\"]\n# Threshold to count boxes as valid and threfore visible\nthreshold = 0.2\nlogger.log_image(\n    img,\n    \"birds-with-bounding-boxes\",\n    step=3,\n    boxes=boxes,\n    classes=class_names,\n    threshold=threshold,\n)\n```\n\n### Text\n\nText can be logged with an additional expected text, which then shows a diff\nbetween the actual text and the expected, otherwise it's just the text.\n\n```python\nlogger.log_text(\"The quick brown fox...\", \"famous-sentence\", step=1)\n# With an expected text\nlogger.log_text(\"hello world\", \"with-diff\", step=2, expected=\"Hallo Welt\")\n```\n\n### Markdown\n\nMarkdown files are given as Markdown string.\n\n```python\nlogger.log_markdown(\"# Hello\\n\\nMore markdown...\", \"some-markdown\")\n\nlogger.log_markdown(\"# Step 1\\\\nn## Result\\n\\nGood\", \"for-step\", step=1)\n```\n\n### Command Line Options\n\nCommand line arguments that have been used to start the experiment and all\navailable options for that script can be saved, if you use `argparse` to parse\nthe command line options.\n\n```python\nimport argparse\n\nparser = argparse.ArgumentParser()\n# Add all options with: parser.add_argument()\n# ...\nargs = parser.parse_args()\n\nlogger.log_command(parser, args)\n```\n\n### Summary\n\nA summary of the current experiment, including current git commit, diff of the\nworking tree and possible more information, can be saved as a Markdown document.\nThere are two parts of the summary that can be configured, short infos that are\npresented is an unordered list given as a dictionary, where the key is the label\n(can be nested for nested lists), and additional sections at the end of the\ndocument given as a dictionary where the key is the section title and the value\nis either the raw string of the content or a list of lines.\n\n```python\n# Regular summary\nlogger.log_summary()\n\n\ninfos = {\"size\": {\"train\": 1000, \"validation\": 50}}\nsections = {\n    \"Additional raw Information\": \"Some text\\nand more\",\n    \"Same but with Lines\": [\"Some text\", \"and more\"],\n}\nlogger.log_summary(infos, sections)\n```\n\n### Printing\n\nPrint functions act as print() combined with \"\".format() but also log all the\nmessages into a log file in addition to printing.\n\n```python\n#               Message              ...Format arguments\nlogger.println(\"{}, message: {num}\", \"Hello\", num=1)\n# => Hello, message: 1\n\n# Same but to STDERR instead of STDOUT\nlogger.eprintln(\"{}, message: {num}\", \"Hello\", num=1)\n```\n\nNicely formatted tables with `print_table`:\n\n```python\nheader = [\"Name\", \"Correct\", \"Total\", \"Accuracy\"]\nrows = [\n    [\"Train\", 978, 1000, 0.978],\n    [\"Validation\", 90, 100, 0.9],\n    [\"Test\", None, 50, None],\n]\nlogger.print_table(header, rows)\n# | Name       | Correct | Total | Accuracy |\n# |------------|---------|-------|----------|\n# | Train      | 978     | 1000  | 0.97800  |\n# | Validation | 90      | 100   | 0.90000  |\n# | Test       | -       | 50    | -        |\n```\n\n### Spinner\n\nA small wrapper around [Halo][halo], that also logs start and end of the\nduration to a log file. Requires a name as the first argument, which will be\nused in the log file and as the text next to the spinner, unless the `text`\nargument is supplied. All additional arguments are forwarded to `Halo`.\n\n```python\nwith logger.spinner(\"Loading...\"):\n    # Do something that takes a while\n\n# Without context manager, but also some arguments for Halo\nspinner = logger.spinner(\"Manual spinner\", spinner=\"smiley\", placement=\"right\")\nspinner.start()\n# Do something\nspinner.stop()\n```\n\n### Progress Bar\n\nA small wrapper around [tqdm][tqdm], that also logs start and end of the\nduration to a log file. Requires a name as the first argument, which will be\nused in the log file and as the text next to the progress bar, unless the `desc`\nargument is supplied. All additional arguments are forwarded to `tqdm`.\n\n```python\nfor d in logger.progress_bar(\"Train\", data):\n    # Trainings loop\n\n# With context manager and manual update\nwith logger.progress_bar(\"Manual progress bar\", total=100) as pbar:\n    while True:\n      # Do something\n\n      # Update the progress bar by 4 steps\n      pbar.update(4)\n```\n\n### Saving a PyTorch Model\n\n_[PyTorch][pytorch] is optional, but must be installed to use this feature._\n\nSaves the state dict of a PyTorch model and optionally its current gradients. If\nthe model is a Multi-GPU/Node model (i.e. `nn.DataParallel` or\n`nn.parallel.DistributedDataParallel`) it will automatically be unwrapped to be\ncompatible with the initial model.\n\n```python\nmodel = ResNet101()\nlogger.save_model(model, step=3)\n\ndistributed_model = nn.parallel.DistributedDataParallel(\n    model, device_ids=[gpu_id], find_unused_parameters=True\n)\n# Distributed model and also saving the gradients\nlogger.save_model(distributed_model, step=4, grads=True)\n```\n\n### Saving any Object\n\n_[PyTorch][pytorch] is optional, but must be installed to use this feature._\n\nSaves any object by serialising it with `torch.save`.\n\n```python\nlogger.save_obj({ \"key\": 99 }, \"a-dict\")\n\nlogger.save_obj((1, 2), \"some_tuple\", step=4)\n```\n\n### Disabling the Logger\n\nAll logging actions can be disabled, either creating a disabled logger or by\nlater disabling it. The logging actions will be a no-op instead and all methods\ncan be used as if they were a regular logger but without having any output.\nMethods that produce some useful information without logging anything continue\nto function as usual.\n\nDisabling the logger is particularly useful when the same script is launched\nmultiple in multiple processes, but only the main process should create the\nlogs.\n\n```python\n# Create a disabled logger\n# No log directory will be created\nlogger = lavd.Logger(\"some-experiment-name\", disabled=True)\n\n# Does nothing\nlogger.println(\"hello\")\n\n# Won't show the spinner\nwith logger.spinner(\"Loading...\"):\n    # Do something that takes a while\n\n# Create a normal logger\nlogger = lavd.Logger(\"some-experiment-name\")\n\n# Disable it later\nlogger.disable()\n\n# Enable it (also works if the logger was initially disabled)\nlogger.enable()\n```\n\n## Data Layout\n\nThe server picks up any data that is present in the specified log directory that\ncan be displayed, but certain functionalities require a specific layout or file\nformat (but still human readable).\n\nIn the root of log directory (i.e. path given to `lavd`) the different\nexperiments are listed by name. Each experiment is in its own directory. Any\nother file at the top level will be ignored, since it cannot be associated to\none experiment.\n\nWithin each experiment directory, there are numbered directories, which acts as\na step (epoch) within the experiment, and all files within that directory\nbelongs to that specific step. They are usually padded with zeros e.g. `0001`,\nbut that is not required, it only helps to show them in the correct order for\ntools, such as `ls`, that shows them in lexicographical order. Since\n`0001 == 01 == 1`, multiple representations of the same numbers will be in\nconflict with each other, and should therefore be avoided.\n\nEvery other file, including nested files, are used as data based on their file\ntype and the relative path is used as a category label (minus the extension).\nFor example, the `some-experiment-name/0001/bird.png` is an image belonging to\nthe `some-experiment-name` experiment, of step 1 and with the label `bird`.\nThe same label can contain multiple data, let's say there is also a `bird.md`\nfile, so there would be a Markdown document with the label `bird`. The same\nbase name can therefore be used for different files, as long as they are in\na different category, this means that just using a different extension will\ncreate a conflict (e.g. `birds.png` and `birds.jpeg`) and should also be\navoided.\n\nFiles not within a step directory are considered global to the experiment\n(including nested files) and once in a nested directory, numbered directories\nare just regular directories, not specific steps, for example\n`some-experiment-name/other/0001/still-global.md` is a global to\n`some-experiment-name` with the label `other/0001/still-global`.\n\nThere is one exception to the rule above, and that's for commands. Only\ncommand is used per experiment, and it's the `commands.json` file, directly\ninside the experiment directory, i.e. `some-experiment-name/commands.json`. Any\nother file containing the commands, will not be displayed (just the command, all\nother categories are still shown even if they are in a nested `command.json`)\n\nJSON files are special in the sense that they can contain multiple kinds of\ndata. They are separated within the JSON file by using the appropriate keys.\n\nThe following directory structure is demonstrates the key ideas:\n\n```sh\nlog/\n├── some-experiment-name\n│   ├── 0001                        # Step: 1\n│   │   ├── bird.png                # Label: bird\n│   │   ├── bird.json               # Label: bird\n│   │   ├── bird.md                 # Label: bird\n│   │   └── difficult\n│   │       └── unlabelled\n│   │           └── some image.png  # Label: difficult/unlabelled/some image\n│   ├── 0002                        # Step 2\n│   │   └── bird.png\n│   ├── command.json                # Only command that can contain command definitions\n│   ├── events.log\n│   ├── other                       # Nested global\n│   │   ├── 0001                    # Not a step directory!\n│   │   │   └── still-global.md     # Label: other/0001/still-global\n│   │   └── instructions.md         # Label: other/instructions\n│   └── summary.md\n├── yet-another-experiment\n│   └── 0007\n│       └── bird.png\n├── top-level-file.md               # ignored\n│\n...\n```\n\n## Comparison to TensorBoard\n\n[TensorBoard][tensorboard] is one of the most used tools for this purpose and\nis undoubtedly incredibly useful. Unfortunately, it also has its drawbacks,\nhence _Lavd_ was created with a different set of goals. One of the biggest\nannoyances from of TensorBoard is the fact that everything is serialised, which\nmeans that you cannot inspect the data directly without deserialising it first.\nIf sufficiently large amount of data is logged, it takes a while to see the last\nevent, because everything is deserialised in order. Additionally, something like\nimages cannot just be viewed with any other tool, since they are not saved as\nimage files. TensorBoard also limits the number of steps that can be viewed for\nsomething for images or text, presumably to not blow up the serialised data, and\nyou cannot see anything in between or even decide which ones you want to keep.\n\n_Lavd_ leverages the file system and the data can be freely viewed and edited\njust like any other file, while still being picked up for the visualisation.\nThat also comes with its own drawbacks compared to serialising the data,\nfor example using more disk space, although that is almost certainly\na non-issue.\n\nAnother difference to TensorBoard is that it does not revolve around TensorFlow\ngraphs or tensors or Machine Learning in general, but focuses more on the actual\ndata. Even though TensorBoard has been used for a while with PyTorch, the\ngraphs are not really the focus of that, but it's mostly used to log the\nscalars, text, images etc. While the graph visualisation are nice, they are not\nused all that often, because once the graph has been seen there is just no\nreason to create it again, but there are countless experiments that use the\nexact same graph. This also means that _Lavd_ does not try to cover everything\nthat TensorBoard does. Of course there are also features that TensorBoard does\nnot cover.\n\n## Known Issues\n\n### Inotify watch limit reached\n\n```\nOSError: [Errno 28] inotify watch limit reached\n```\n\nThe error occurs if there are too many files that are being watch at the same\ntime. You can check how many watches are allowed as follows:\n\n```sh\ncat /proc/sys/fs/inotify/max_user_watches\n# => 8192\n```\n\nThe default is 8192 on most systems. To solve the issue the limit needs to be\nincreased:\n\n```sh\nsudo sysctl fs.inotify.max_user_watches=524288\n```\n\n[actions-nodejs-badge]: https://github.com/jungomi/lavd/actions/workflows/nodejs.yml/badge.svg\n[actions-nodejs-link]: https://github.com/jungomi/lavd/actions/workflows/nodejs.yml\n[actions-python-badge]: https://github.com/jungomi/lavd/actions/workflows/python.yml/badge.svg\n[actions-python-link]: https://github.com/jungomi/lavd/actions/workflows/python.yml\n[halo]: https://github.com/manrajgrover/halo\n[pytorch]: https://pytorch.org\n[tensorboard]: https://github.com/tensorflow/tensorboard\n[tqdm]: https://github.com/tqdm/tqdm\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jungomi/lavd",
    "keywords": "log,visualise,visualize,data",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lavd",
    "package_url": "https://pypi.org/project/lavd/",
    "platform": null,
    "project_url": "https://pypi.org/project/lavd/",
    "project_urls": {
      "Homepage": "https://github.com/jungomi/lavd"
    },
    "release_url": "https://pypi.org/project/lavd/0.2.6/",
    "requires_dist": [
      "halo",
      "Pillow",
      "simplejson",
      "tornado",
      "tqdm",
      "watchdog"
    ],
    "requires_python": ">=3.7",
    "summary": "Log and Visualise Data",
    "version": "0.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13514117,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "011b6a68b3445d6d967b9d6c35b8ff95ab82255aa4ab0f3f7857cdbb574a80d0",
          "md5": "d68eea4bf5f363fee2a38b335f1beef1",
          "sha256": "709d8328640fe2fe5d5928039228bb529e5a22c055344663101cff6740a4ff16"
        },
        "downloads": -1,
        "filename": "lavd-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d68eea4bf5f363fee2a38b335f1beef1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 687549,
        "upload_time": "2020-02-07T11:22:29",
        "upload_time_iso_8601": "2020-02-07T11:22:29.734807Z",
        "url": "https://files.pythonhosted.org/packages/01/1b/6a68b3445d6d967b9d6c35b8ff95ab82255aa4ab0f3f7857cdbb574a80d0/lavd-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cdf12c76a20b8dcacdc2134717a6a57038823d5f21107c0de1394658efe644a",
          "md5": "a65c6aaa40994b8182a90c066be51b5a",
          "sha256": "f4c6cdc219e5fb8e146e4591a301bc3597bbb4276206b3f1be56f0cc4be1e78b"
        },
        "downloads": -1,
        "filename": "lavd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a65c6aaa40994b8182a90c066be51b5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30664,
        "upload_time": "2020-02-07T11:22:32",
        "upload_time_iso_8601": "2020-02-07T11:22:32.386593Z",
        "url": "https://files.pythonhosted.org/packages/0c/df/12c76a20b8dcacdc2134717a6a57038823d5f21107c0de1394658efe644a/lavd-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70660e01c96ed0984c4db4f31483598725b08b244612959e0b876a75777d85e3",
          "md5": "63a18ca047ca88480ec20429f931072b",
          "sha256": "2a701f26386587c8f2817510eb9278af1d6fa9f6f8b9e3674a4265da2602a5f3"
        },
        "downloads": -1,
        "filename": "lavd-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63a18ca047ca88480ec20429f931072b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 687618,
        "upload_time": "2020-02-07T13:46:14",
        "upload_time_iso_8601": "2020-02-07T13:46:14.992037Z",
        "url": "https://files.pythonhosted.org/packages/70/66/0e01c96ed0984c4db4f31483598725b08b244612959e0b876a75777d85e3/lavd-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "921b08f04b5a46b0ec18360eb680ab685596ac84fa846894f7c267445b40e157",
          "md5": "347adcda57e0400179eb729f13425d2f",
          "sha256": "36c682be30f8fdeb90ed4dd03fbb072f5bed6fe023c63527ddffdad6129f3a2f"
        },
        "downloads": -1,
        "filename": "lavd-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "347adcda57e0400179eb729f13425d2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30668,
        "upload_time": "2020-02-07T13:46:16",
        "upload_time_iso_8601": "2020-02-07T13:46:16.963639Z",
        "url": "https://files.pythonhosted.org/packages/92/1b/08f04b5a46b0ec18360eb680ab685596ac84fa846894f7c267445b40e157/lavd-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b4e48841ed10af8cd9c00ed3a857b2756f5f091025b67b622ab9065243e744b",
          "md5": "dafb53e0846d12248e2752d29aad23c9",
          "sha256": "d8809a8073e5ac75d34bf1ef31dd7f90631a5c4f63cf89fe0f789918048e1ed4"
        },
        "downloads": -1,
        "filename": "lavd-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dafb53e0846d12248e2752d29aad23c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 689427,
        "upload_time": "2020-02-09T14:27:11",
        "upload_time_iso_8601": "2020-02-09T14:27:11.634794Z",
        "url": "https://files.pythonhosted.org/packages/2b/4e/48841ed10af8cd9c00ed3a857b2756f5f091025b67b622ab9065243e744b/lavd-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c20c3c9a2d07d7c13cc4d2295bc556039dd93e1316a13ce1c2dbf6e31e28248",
          "md5": "176cee7e523b790a4043bddc7ad53957",
          "sha256": "5e35d7dadc1007fffdb9b88a9d754ed603352daa37db538659aaf457d2ad78ee"
        },
        "downloads": -1,
        "filename": "lavd-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "176cee7e523b790a4043bddc7ad53957",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30764,
        "upload_time": "2020-02-09T14:27:13",
        "upload_time_iso_8601": "2020-02-09T14:27:13.430270Z",
        "url": "https://files.pythonhosted.org/packages/7c/20/c3c9a2d07d7c13cc4d2295bc556039dd93e1316a13ce1c2dbf6e31e28248/lavd-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbfc9ec2e5462c51a904d493597a197c9439572f4c90e119d1350a2c535d4261",
          "md5": "8f620fa6c16fc2e24615a8c0c2e79a15",
          "sha256": "88527ced154a00701b64c558bc2eac5c9970886a902c64303614ce5bc36bedd6"
        },
        "downloads": -1,
        "filename": "lavd-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f620fa6c16fc2e24615a8c0c2e79a15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 418745,
        "upload_time": "2020-07-28T04:38:28",
        "upload_time_iso_8601": "2020-07-28T04:38:28.514462Z",
        "url": "https://files.pythonhosted.org/packages/bb/fc/9ec2e5462c51a904d493597a197c9439572f4c90e119d1350a2c535d4261/lavd-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01345e8020117e509bf00a4928483a04f4f638b4529652a496fa3e64437a0235",
          "md5": "adf603b7e8f8c736ff58ec0194d261aa",
          "sha256": "fb11c4ba0dd222d2f5952c9d0635c401646ee6bf7c14cd65f51a7b9484511fb9"
        },
        "downloads": -1,
        "filename": "lavd-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "adf603b7e8f8c736ff58ec0194d261aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33852,
        "upload_time": "2020-07-28T04:38:29",
        "upload_time_iso_8601": "2020-07-28T04:38:29.729937Z",
        "url": "https://files.pythonhosted.org/packages/01/34/5e8020117e509bf00a4928483a04f4f638b4529652a496fa3e64437a0235/lavd-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab0eca33a1cbb8e4868351cacd3d1bcf3fc0c05b54c7adae5effc4fe64cf9e67",
          "md5": "c4ffc3ecc779b37449be24aed963d308",
          "sha256": "5e813235b83dffaf9c153e6726479ec7c65a001a5f9f8df013ef6822bbbc3285"
        },
        "downloads": -1,
        "filename": "lavd-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4ffc3ecc779b37449be24aed963d308",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 419241,
        "upload_time": "2020-08-03T11:32:38",
        "upload_time_iso_8601": "2020-08-03T11:32:38.915080Z",
        "url": "https://files.pythonhosted.org/packages/ab/0e/ca33a1cbb8e4868351cacd3d1bcf3fc0c05b54c7adae5effc4fe64cf9e67/lavd-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24902b8cd28f30c5dc0ef58e75ab4f8910ab241bbc5c9f353d8d10b8ced6299f",
          "md5": "9e14e0ad96b5da9b83a8d6a62674acf7",
          "sha256": "412710898a5fc15528131c888eddbe2875726063a19184831c12c045e4a6a7c9"
        },
        "downloads": -1,
        "filename": "lavd-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e14e0ad96b5da9b83a8d6a62674acf7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33828,
        "upload_time": "2020-08-03T11:32:40",
        "upload_time_iso_8601": "2020-08-03T11:32:40.990780Z",
        "url": "https://files.pythonhosted.org/packages/24/90/2b8cd28f30c5dc0ef58e75ab4f8910ab241bbc5c9f353d8d10b8ced6299f/lavd-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b630d66bfd587be51a931e1eafc2442663c7b465b9d39b3ab0ac6308e790a57",
          "md5": "ee8cfd525dd394cee9f1ce0892e0c2a0",
          "sha256": "0c081860939b14f1f269484916908a95f6e6ec79baa90c26c41287db0255f6bf"
        },
        "downloads": -1,
        "filename": "lavd-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee8cfd525dd394cee9f1ce0892e0c2a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30143,
        "upload_time": "2021-10-08T10:55:43",
        "upload_time_iso_8601": "2021-10-08T10:55:43.605337Z",
        "url": "https://files.pythonhosted.org/packages/9b/63/0d66bfd587be51a931e1eafc2442663c7b465b9d39b3ab0ac6308e790a57/lavd-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97a9dde7bcabd800971ea10a3ac3d66c36a4534d037f6e6dbf5d0d44e3ae8e09",
          "md5": "3034bd6ce47ee6ad1c1d45cfed2417cf",
          "sha256": "3852ae617a469970490f6d00bd3c20cce6f31bd01c4319d5bdbfeb5781dfc7a5"
        },
        "downloads": -1,
        "filename": "lavd-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3034bd6ce47ee6ad1c1d45cfed2417cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33458,
        "upload_time": "2021-10-08T10:55:45",
        "upload_time_iso_8601": "2021-10-08T10:55:45.124899Z",
        "url": "https://files.pythonhosted.org/packages/97/a9/dde7bcabd800971ea10a3ac3d66c36a4534d037f6e6dbf5d0d44e3ae8e09/lavd-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb975feacaade34a10a8af8c65bd53d6f4ec50df0de120c69d1e2a7370399c29",
          "md5": "a7e25dc3eabe370445d2fc6d3a9d0f8b",
          "sha256": "9042be3a2fe9221108b96fcc8db6f78cb4ea9978ad95949c340d8eaaa3a8e9d8"
        },
        "downloads": -1,
        "filename": "lavd-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7e25dc3eabe370445d2fc6d3a9d0f8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 562443,
        "upload_time": "2021-10-08T11:59:13",
        "upload_time_iso_8601": "2021-10-08T11:59:13.922364Z",
        "url": "https://files.pythonhosted.org/packages/cb/97/5feacaade34a10a8af8c65bd53d6f4ec50df0de120c69d1e2a7370399c29/lavd-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d83396fb29605f90bad513d0f2cbd567b93c5ce0e57e8af8ea55155e4b269a4a",
          "md5": "538fbf9db57e46ab1273c8b37b1064df",
          "sha256": "1882622f8c477588e72300cc9bdb2cf5f59f1deb7cfcb9ed46d8e16504bffd26"
        },
        "downloads": -1,
        "filename": "lavd-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "538fbf9db57e46ab1273c8b37b1064df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33467,
        "upload_time": "2021-10-08T11:59:16",
        "upload_time_iso_8601": "2021-10-08T11:59:16.368270Z",
        "url": "https://files.pythonhosted.org/packages/d8/33/96fb29605f90bad513d0f2cbd567b93c5ce0e57e8af8ea55155e4b269a4a/lavd-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39bd996b6bb9c171dfabdb46c8a4f1f6dc2496ea51219c1027325b1e92ce6193",
          "md5": "b4484f5da31cdad8ae2013f6526f7165",
          "sha256": "67d8fca1b089bc7136910970a2d3115307de63ec6381c59aa0131bb0e91a0c96"
        },
        "downloads": -1,
        "filename": "lavd-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4484f5da31cdad8ae2013f6526f7165",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 562448,
        "upload_time": "2021-11-09T17:00:59",
        "upload_time_iso_8601": "2021-11-09T17:00:59.064648Z",
        "url": "https://files.pythonhosted.org/packages/39/bd/996b6bb9c171dfabdb46c8a4f1f6dc2496ea51219c1027325b1e92ce6193/lavd-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83da518be404d28337164375efda8bf90f86f11944a2cbca0b6550944b107910",
          "md5": "433fec6acbe07ceb6ce961ab74cc6a69",
          "sha256": "b097f615e3cb25db4242bfb475b17adecbdcfabe0e933a6cef2863421b04d367"
        },
        "downloads": -1,
        "filename": "lavd-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "433fec6acbe07ceb6ce961ab74cc6a69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 563401,
        "upload_time": "2021-11-09T17:01:04",
        "upload_time_iso_8601": "2021-11-09T17:01:04.716633Z",
        "url": "https://files.pythonhosted.org/packages/83/da/518be404d28337164375efda8bf90f86f11944a2cbca0b6550944b107910/lavd-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cae99a9fb0515f576c9cd9640afc6fd18522de8530fa9ba777ac73f1925ae232",
          "md5": "7115d9ad585825e799330ae1fddb695a",
          "sha256": "8863a76fdb8169083702b25edc31026e51608714df3f019b02c4d3409ea047d9"
        },
        "downloads": -1,
        "filename": "lavd-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7115d9ad585825e799330ae1fddb695a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 562805,
        "upload_time": "2022-04-12T13:41:14",
        "upload_time_iso_8601": "2022-04-12T13:41:14.023024Z",
        "url": "https://files.pythonhosted.org/packages/ca/e9/9a9fb0515f576c9cd9640afc6fd18522de8530fa9ba777ac73f1925ae232/lavd-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc3db3e0667be1112e1ee36f10d56538e61a371f584af625160432592a9adbf8",
          "md5": "defe0452e2d3e16b08f0b32430b8de8f",
          "sha256": "0c8e6cd0c25b869cb51702a73be771c02ef52b16e733bdfad640c1f58f5a9e59"
        },
        "downloads": -1,
        "filename": "lavd-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "defe0452e2d3e16b08f0b32430b8de8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6153845,
        "upload_time": "2022-04-12T13:41:15",
        "upload_time_iso_8601": "2022-04-12T13:41:15.967695Z",
        "url": "https://files.pythonhosted.org/packages/fc/3d/b3e0667be1112e1ee36f10d56538e61a371f584af625160432592a9adbf8/lavd-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9a77e6a31cafa5ad80a4c524f241e9fd33945be76581acf46ecbbd535a84f33",
          "md5": "feabbf5d53c4b26f9f48f9d7b8d3961a",
          "sha256": "766b04439fe4ce6e1fa86edae4135a68a31e1b6787685c76b67702e133425cac"
        },
        "downloads": -1,
        "filename": "lavd-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "feabbf5d53c4b26f9f48f9d7b8d3961a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 562946,
        "upload_time": "2022-04-14T13:01:46",
        "upload_time_iso_8601": "2022-04-14T13:01:46.879312Z",
        "url": "https://files.pythonhosted.org/packages/d9/a7/7e6a31cafa5ad80a4c524f241e9fd33945be76581acf46ecbbd535a84f33/lavd-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ea8090af05443c73b07c489089d3190c7d9fc4117dda4fba043cfd5d0d5984c",
          "md5": "5decd65b3687dd57f6a8d1fb3fc68924",
          "sha256": "78e5cdd585b40cccc597816ae249bf14082458803440f43b311d6f05062227b3"
        },
        "downloads": -1,
        "filename": "lavd-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5decd65b3687dd57f6a8d1fb3fc68924",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6154110,
        "upload_time": "2022-04-14T13:01:48",
        "upload_time_iso_8601": "2022-04-14T13:01:48.668981Z",
        "url": "https://files.pythonhosted.org/packages/6e/a8/090af05443c73b07c489089d3190c7d9fc4117dda4fba043cfd5d0d5984c/lavd-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9a77e6a31cafa5ad80a4c524f241e9fd33945be76581acf46ecbbd535a84f33",
        "md5": "feabbf5d53c4b26f9f48f9d7b8d3961a",
        "sha256": "766b04439fe4ce6e1fa86edae4135a68a31e1b6787685c76b67702e133425cac"
      },
      "downloads": -1,
      "filename": "lavd-0.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "feabbf5d53c4b26f9f48f9d7b8d3961a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 562946,
      "upload_time": "2022-04-14T13:01:46",
      "upload_time_iso_8601": "2022-04-14T13:01:46.879312Z",
      "url": "https://files.pythonhosted.org/packages/d9/a7/7e6a31cafa5ad80a4c524f241e9fd33945be76581acf46ecbbd535a84f33/lavd-0.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ea8090af05443c73b07c489089d3190c7d9fc4117dda4fba043cfd5d0d5984c",
        "md5": "5decd65b3687dd57f6a8d1fb3fc68924",
        "sha256": "78e5cdd585b40cccc597816ae249bf14082458803440f43b311d6f05062227b3"
      },
      "downloads": -1,
      "filename": "lavd-0.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "5decd65b3687dd57f6a8d1fb3fc68924",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6154110,
      "upload_time": "2022-04-14T13:01:48",
      "upload_time_iso_8601": "2022-04-14T13:01:48.668981Z",
      "url": "https://files.pythonhosted.org/packages/6e/a8/090af05443c73b07c489089d3190c7d9fc4117dda4fba043cfd5d0d5984c/lavd-0.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}