{
  "info": {
    "author": "P4 API Working Group",
    "author_email": "p4-api@lists.p4.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# A shell for P4Runtime\n\n![Build Status](https://github.com/p4lang/p4runtime-shell/workflows/Test/badge.svg?branch=main&event=push)\n\n**This is still a work in progress. Feedback is welcome.**\n\np4runtime-sh is an interactive Python shell for\n[P4Runtime](https://github.com/p4lang/p4runtime) based on\n[IPython](https://ipython.org/).\n\n<!--ts-->\n* [A shell for P4Runtime](#a-shell-for-p4runtime)\n   * [Using the shell](#using-the-shell)\n      * [Run with Docker](#run-with-docker)\n      * [Run without Docker](#run-without-docker)\n   * [Available commands](#available-commands)\n   * [Canonical representation of bytestrings](#canonical-representation-of-bytestrings)\n   * [Example usage](#example-usage)\n   * [Using p4runtime-shell in scripts](#using-p4runtime-shell-in-scripts)\n   * [Target-specific support](#target-specific-support)\n      * [P4.org Bmv2](#p4org-bmv2)\n      * [Barefoot Tofino](#barefoot-tofino)\n   * [TLS Authentication](#tls-authentication)\n      * [Server Authentication](#server-authentication)\n      * [Mutual Authentication (with client certificate)](#mutual-authentication-with-client-certificate)\n      * [A Mutual Authentication example with bmv2 and self-signed certificates](#a-mutual-authentication-example-with-bmv2-and-self-signed-certificates)\n<!--te-->\n\n## Using the shell\n\n### Run with Docker\n\nWe recommend that you download the Docker image (~142MB) and use it, but you can\nalso build the image directly with:\n\n```bash\ngit clone https://github.com/p4lang/p4runtime-shell\ncd p4runtime-shell\ndocker build -t p4lang/p4runtime-sh .\n```\n\nRun the shell as follows:\n\n```bash\n[sudo] docker run -ti p4lang/p4runtime-sh \\\n  --grpc-addr <server IP>:<server port> \\\n  --device-id 0 --election-id 0,1\n```\n\nThe above command will retrieve the forwarding pipeline configuration from the\nP4Runtime server. You can also push a forwarding pipeline configuration with the\nshell (you will need to mount the directory containing the P4Info and binary\ndevice config in the docker):\n\n```bash\n[sudo] docker run -ti -v /tmp/:/tmp/ p4lang/p4runtime-sh \\\n  --grpc-addr <server IP>:<server port> \\\n  --device-id 0 --election-id 0,1 --config /tmp/p4info.txt,/tmp/bmv2.json\n```\n\nThe above command assumes that the P4Info (p4info.txt) and the binary device\nconfig (bmv2.json) are under /tmp/.\n\nTo make the process more convenient, we provide a wrapper script, which takes\ncare of running the docker (including mounting the P4Info and binary device\nconfig files in the docker if needed):\n\n```bash\n[sudo] ./p4runtime-sh-docker --grpc-addr <server IP>:<server port> \\\n  --device-id 0 --election-id 0,1 \\\n  --config <path to p4info>,<path to binary config>\n```\n\n*If you are a Linux user, you can follow this\n [guide](https://docs.docker.com/install/linux/linux-postinstall/) to run Docker\n commands without `sudo`. You will be able to use `p4runtime-sh-docker` as a\n non-privileged user.*\n\n*If you are using the Docker image to run p4runtime-shell and you are trying to\n connect to a P4Runtime server running natively on the same system and listening\n on the localhost interface, you will not be able to connect to the server using\n `--grpc-addr localhost:<port>` or `--grpc-addr 127.0.0.1:<port>`. Instead, you\n should have your P4Runtime server listen on all interfaces (`0.0.0.0`) and you\n will need to use the IP address assigned to the Docker bridge (`docker0` by\n default) or the IP address assigned to the local network management interface\n (e.g. `eth0`).*\n\n### Run without Docker\n\nYou can also install P4Runtime shell via `pip3` and run it directly.\n\n```bash\n# (optional) Set up virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install p4runtime-shell package and run it\npip3 install p4runtime-shell\npython3 -m p4runtime_sh --grpc-addr <server IP>:<server port> \\\n  --device-id 0 --election-id 0,1 --config <p4info.txt>,<pipeline config>\n```\n\n## Available commands\n\n`tables`, `actions`, `action_profiles`, `counters`, `direct_counters`, `meters`,\n`direct_meters` (named after the P4Info message fields) to query information\nabout P4Info objects.\n\n`table_entry`, `action_profile_member`, `action_profile_group`, `counter_entry`,\n`direct_counter_entry`, `meter_entry`, `direct_meter_entry` (named after the\nP4Runtime `Entity` fields), along with `multicast_group_entry` and\n`clone_session_entry`, for runtime entity programming.\n\n`packet_in` and `packet_out` are commands for packet IO, see the [usage](usage/packet_io.md) for more information.\n\nThe `Write` command can be used to read a `WriteRequest` message from a file\n(for now, Protobuf text format only) and send it to a server:\n\n```text\nWrite <path to file encoding WriteRequest message in text format>\n```\n\nType the command name followed by `?` for information on each command,\ne.g. `table_entry?`.\n\n## Canonical representation of bytestrings\n\nThe [P4Runtime\nspecification](https://p4.org/p4runtime/spec/v1.3.0/P4Runtime-Spec.html#sec-bytestrings)\ndefines a canonical representation for binary strings, which all P4Runtime\nservers must support. This representation can be used to format all binary\nstrings (match fields, action parameters, ...) in P4Runtime messages exchanged\nbetween the client and the server. For legacy reasons, some P4Runtime servers do\nnot support the canonical representation and require binary strings to be\nbyte-padded according to the bitwidth specified in the P4Info message. While all\nP4Runtime-conformant servers must also accept this legacy format, it can lead to\nread-write asymmetry for P4Runtime entities. For example a client may insert a\nTableEntry using the legacy format for match fields, but when reading the same\nTableEntry back, the server may return a message with match field values in the\ncanonical representation. When a client uses the canonical representation,\nread-write symmetry is always guaranteed.\n\nIf you are dealing with a legacy server which rejects binary strings formatted\nusing the canonical representation (making this server non conformant to the\nspecification), you can revert to the byte-padded format by typing the following\ncommand in the shell:\n\n```python\nP4Runtime sh >>> global_options[\"canonical_bytestrings\"] = False\n```\n\n## Example usage\n\nHere is some of what you can do when using p4runtime-sh with ONF's\n[fabric.p4](https://github.com/opennetworkinglab/onos/blob/master/pipelines/fabric/impl/src/main/resources/fabric.p4).\n\nMore examples of usage can be found in the [usage/ folder](usage/).\n\n```python\n*** Welcome to the IPython shell for P4Runtime ***\nP4Runtime sh >>> tables\nFabricEgress.egress_next.egress_vlan\nFabricIngress.acl.acl\nFabricIngress.filtering.fwd_classifier\nFabricIngress.filtering.ingress_port_vlan\nFabricIngress.forwarding.bridging\nFabricIngress.forwarding.mpls\nFabricIngress.forwarding.routing_v4\nFabricIngress.next.hashed\nFabricIngress.next.multicast\nFabricIngress.next.next_vlan\nFabricIngress.next.xconnect\n\nP4Runtime sh >>> tables[\"FabricIngress.forwarding.routing_v4\"]\nOut[2]:\npreamble {\n  id: 33562650\n  name: \"FabricIngress.forwarding.routing_v4\"\n  alias: \"routing_v4\"\n}\nmatch_fields {\n  id: 1\n  name: \"ipv4_dst\"\n  bitwidth: 32\n  match_type: LPM\n}\naction_refs {\n  id: 16777434 (\"FabricIngress.forwarding.set_next_id_routing_v4\")\n}\naction_refs {\n  id: 16804187 (\"FabricIngress.forwarding.nop_routing_v4\")\n}\naction_refs {\n  id: 16819938 (\"nop\")\n  annotations: \"@defaultonly\"\n  scope: DEFAULT_ONLY\n}\nconst_default_action_id: 16819938 (\"nop\")\ndirect_resource_ids: 318811107 (\"FabricIngress.forwarding.routing_v4_counter\")\nsize: 1024\n\n\nP4Runtime sh >>> te = table_entry[\"FabricIngress.forwarding.routing_v4\"](action=\"set_next_id_routing_v4\")\n\nP4Runtime sh >>> te?\nSignature:   te(**kwargs)\nType:        TableEntry\nString form:\ntable_id: 33562650 (\"FabricIngress.forwarding.routing_v4\")\naction {\n  action {\n    action_id: 16777434 (\"FabricIngress.forwarding.set_next_id_routing_v4\")\n  }\n}\nFile:        /p4runtime-sh/p4runtime_sh/shell.py\nDocstring:\nAn entry for table 'FabricIngress.forwarding.routing_v4'\n\nUse <self>.info to display the P4Info entry for this table.\n\nTo set the match key, use <self>.match['<field name>'] = <expr>.\nType <self>.match? for more details.\n\nTo set the action specification <self>.action = <instance of type Action>.\nTo set the value of action parameters, use <self>.action['<param name>'] = <expr>.\nType <self>.action? for more details.\n\nTo set the priority, use <self>.priority = <expr>.\n\nTo mark the entry as default, use <self>.is_default = True.\n\nTypical usage to insert a table entry:\nt = table_entry['<table_name>'](action='<action_name>')\nt.match['<f1>'] = ...\n...\nt.match['<fN>'] = ...\n# OR t.match.set(f1=..., ..., fN=...)\nt.action['<p1>'] = ...\n...\nt.action['<pM>'] = ...\n# OR t.action.set(p1=..., ..., pM=...)\nt.insert\n\nTypical usage to set the default entry:\nt = table_entry['<table_name>'](is_default=True)\nt.action['<p1>'] = ...\n...\nt.action['<pM>'] = ...\n# OR t.action.set(p1=..., ..., pM=...)\nt.modify\n\nFor information about how to read table entries, use <self>.read?\n\nP4Runtime sh >>> te.match?\nType:      MatchKey\nFile:      /p4runtime-sh/p4runtime_sh/shell.py\nDocstring:\nMatch key fields for table 'FabricIngress.forwarding.routing_v4':\n\nid: 1\nname: \"ipv4_dst\"\nbitwidth: 32\nmatch_type: LPM\n\nSet a field value with <self>['<field_name>'] = '...'\n  * For exact match: <self>['<f>'] = '<value>'\n  * For ternary match: <self>['<f>'] = '<value>&&&<mask>'\n  * For LPM match: <self>['<f>'] = '<value>/<mask>'\n  * For range match: <self>['<f>'] = '<value>..<mask>'\n  * For optional match: <self>['<f>'] = '<value>'\n\nIf it's inconvenient to use the whole field name, you can use a unique suffix.\n\nYou may also use <self>.set(<f>='<value>')\n        (<f> must not include a '.' in this case, but remember that you can use a unique suffix)\n\nP4Runtime sh >>> te.match[\"ipv4_dst\"] = \"10.0.0.0/16\"\nfield_id: 1\nlpm {\n  value: \"\\n\\000\\000\\000\"\n  prefix_len: 16\n}\n\n\nP4Runtime sh >>> te.action?\nType:      Action\nFile:      /p4runtime-sh/p4runtime_sh/shell.py\nDocstring:\nAction parameters for action 'set_next_id_routing_v4':\n\nid: 1\nname: \"next_id\"\nbitwidth: 32\n\n\nSet a param value with <self>['<param_name>'] = '<value>'\nYou may also use <self>.set(<param_name>='<value>')\n\nP4Runtime sh >>> te.action[\"next_id\"] = \"10\"\nparam_id: 1\nvalue: \"\\000\\000\\000\\n\"\n\n\nP4Runtime sh >>> te.insert\n\nP4Runtime sh >>> for te in table_entry[\"FabricIngress.forwarding.routing_v4\"].read():\n            ...:     print(te)\n            ...:\ntable_id: 33562650 (\"FabricIngress.forwarding.routing_v4\")\nmatch {\n  field_id: 1 (\"ipv4_dst\")\n  lpm {\n    value: \"\\\\x0a\\\\x00\\\\x00\\\\x00\"\n    prefix_len: 16\n  }\n}\naction {\n  action {\n    action_id: 16777434 (\"FabricIngress.forwarding.set_next_id_routing_v4\")\n    params {\n      param_id: 1 (\"next_id\")\n      value: \"\\\\x00\\\\x00\\\\x00\\\\x0a\"\n    }\n  }\n}\n\n\nP4Runtime sh >>> table_entry[\"FabricIngress.forwarding.routing_v4\"].read(lambda te: te.delete())\n\nP4Runtime sh >>> table_entry[\"FabricIngress.forwarding.routing_v4\"].read(lambda te: print(te))\n\nP4Runtime sh >>>\n```\n\n## Using p4runtime-shell in scripts\n\nYou can also leverage this project as a convenient P4Runtime wrapper to\nprogrammatically program switches using Python scripts:\n\n```python\nimport p4runtime_sh.shell as sh\n\n# you can omit the config argument if the switch is already configured with the\n# correct P4 dataplane.\nsh.setup(\n    device_id=1,\n    grpc_addr='localhost:9559',\n    election_id=(0, 1), # (high, low)\n    config=sh.FwdPipeConfig('config/p4info.pb.txt', 'config/device_config.bin')\n)\n\n# see p4runtime_sh/test.py for more examples\nte = sh.TableEntry('<table_name>')(action='<action_name>')\nte.match['<name>'] = '<value>'\nte.action['<name>'] = '<value>'\nte.insert()\n\n# ...\n\nsh.teardown()\n```\n\nNote that at the moment the P4Runtime client object is a global variable, which\nmeans that we only support one P4Runtime connection to a single switch.\n\n## Target-specific support\n\n### P4.org Bmv2\n\nJust use the bmv2 JSON file generated by the\n[compiler](https://github.com/p4lang/p4c) as the binary device config.\n\n### Barefoot Tofino\n\nWe provide a script which can be used to \"pack\" the Barefoot p4c compiler output\n(part of the Barefoot SDE) into one binary file, to be used as the binary device\nconfig.\n```bash\n./config_builders/tofino.py --ctx-json <path to context JSON> \\\n  --tofino-bin <path to tofino.bin> -p <program name> -o out.bin\n```\n\nYou can then use `out.bin` when invoking `p4runtime-sh-docker`:\n```bash\n[sudo] ./p4runtime-sh-docker --grpc-addr <server IP>:<server port> \\\n  --device-id 0 --election-id 0,1 \\\n  --config <path to p4info>,out.bin\n```\n\n## TLS Authentication\n\nBy default, the shell opens an insecure gRPC channel to the P4Runtime\nserver. This will only work if the P4Runtime server is itself insecure and does\nnot use TLS. Note that by default, bmv2 simple_switch_grpc uses an insecure\nserver and no TLS configuration is required for the shell. For general\ninformation about authentication and encryption with gRPC, please refer to the\n[documentation](https://grpc.io/docs/guides/auth/).\n\nIf you are connecting to a P4Runtime server which is secured with TLS, please\nkeep reading.\n\n### Server Authentication\n\nYou will need to enable TLS in the shell by starting it with `--ssl`. If you are\nusing a self-signed certificate for the P4Runtime server, you must also provide\na CA certificate with `--cacert`.\n\n```bash\n[sudo] ./p4runtime-sh-docker --grpc-addr <server address>:9559 \\\n  --device-id 0 --election-id 0,1 --config /tmp/p4info.txt,/tmp/bmv2.json \\\n  --ssl [--cacert <path to PEM certificate>].\n```\n\nThe `<server address>` needs to match the Common Name (CN) or one of the Subject\nAlternative Names (SAN) in the server certificate. In some cases, a matching SAN\nis required (the Common Name is considered deprecated).\n\n### Mutual Authentication (with client certificate)\n\nIf the P4Runtime server requires clients to present a certificate for client\nauthentication, you will need to provide the appropriate certificate with\n`--cert` and the appropriate private key with `--private-key`.\n\n```bash\n[sudo] ./p4runtime-sh-docker --grpc-addr <server address>:9559 \\\n  --device-id 0 --election-id 0,1 --config /tmp/p4info.txt,/tmp/bmv2.json \\\n  --ssl \\\n  --cacert <path to PEM certificate for server verification> \\\n  --cert <path to PEM client certificate> \\\n  --private-key <path to PEM client private key>\n```\n\nNote that the appropriate CA certificate (the one used to sign the client\ncertificate) needs to be provided to the P4Runtime server. How to do that will\nbe dependent on the P4Runtime implementation.\n\nMake sure that the private key file is not password-protected or gRPC client\ninitialization will fail.\n\n### A Mutual Authentication example with bmv2 and self-signed certificates\n\nIn this example, we will use the same CA for both server and client certificates\nbut this is of course not a requirement. Make sure you are using recent versions\nof PI, bmv2 and p4runtime-shell for this to work.\n\n```bash\npassword=abcd\n\n# Generate CA\nopenssl genrsa -passout pass:$password -des3 -out ca.key 4096\nopenssl req -passin pass:$password -new -x509 -days 365 -key ca.key -out ca.crt \\\n  -subj \"/C=US/ST=CA/L=PaloAlto/O=Test/OU=Test/CN=Root CA\"\n\n# Generate server certificate and key\nopenssl genrsa -passout pass:$password -des3 -out server.key 4096\nopenssl req -passin pass:$password -new -key server.key -out server.csr \\\n  -subj \"/C=US/ST=CA/L=PaloAlto/O=Test/OU=Server/CN=localhost\"\nopenssl x509 -req -passin pass:$password \\\n  -extfile <(printf \"subjectAltName=DNS:localhost,IP:127.0.0.1\") \\\n  -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt\n\n# Remove passphrase from the server key\nopenssl rsa -passin pass:$password -in server.key -out server.key\n\n# Generate client certificate and key\nopenssl genrsa -passout pass:$password -des3 -out client.key 4096\nopenssl req -passin pass:$password -new -key client.key -out client.csr -subj \"/C=US/ST=CA/L=PaloAlto/O=Test/OU=Client/CN=p4runtime-sh\"\nopenssl x509 -passin pass:$password -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out client.crt\n\n# Remove passphrase from the client key\nopenssl rsa -passin pass:$password -in client.key -out client.key\n```\n\nTo run simple_switch_grpc:\n\n```bash\nsimple_switch_grpc --log-console --no-p4 --device-id 1 -- \\\n  --grpc-server-ssl --grpc-server-cacert ca.crt \\\n  --grpc-server-cert server.crt --grpc-server-key server.key \\\n  --grpc-server-with-client-auth\n```\n\nTo run the shell:\n\n```bash\npython3 -m p4runtime_sh --grpc-addr localhost:9559 --device-id 1 \\\n  --config meter.proto.txt,meter.json \\\n  --ssl --cacert ca.crt --cert client.crt --private-key client.key\n```\n\nNote that we do not use `p4runtime-sh-docker` in this example. This is because\nif we run the shell inside a Docker container, we will not be able to connect to\nthe P4Runtime server using `localhost` at the address, and this is the name we\nused to issue the server certificate.\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/p4lang/p4runtime-shell",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "p4runtime-shell",
    "package_url": "https://pypi.org/project/p4runtime-shell/",
    "platform": null,
    "project_url": "https://pypi.org/project/p4runtime-shell/",
    "project_urls": {
      "Homepage": "https://github.com/p4lang/p4runtime-shell"
    },
    "release_url": "https://pypi.org/project/p4runtime-shell/0.0.3/",
    "requires_dist": [
      "ipaddr (==2.2.0)",
      "jedi (==0.17.2)",
      "protobuf (<3.21.0,>=3.15.0)",
      "grpcio (>=1.35.0)",
      "p4runtime (==1.3.0)",
      "ipython (==7.16.*,>=7.16.3) ; python_version < \"3.7\"",
      "ipython (==7.31.*,>=7.31.1) ; python_version >= \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "The P4Runtime shell",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15097215,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3b4033d8d8bf7aa6ddc36c5f8a3b943848fb0607aae65af5ce089a8ef707830",
          "md5": "59c1fac61136845353059a4201a4c41e",
          "sha256": "232e17cc69f2e1e4f4ddfa2ca7c9fced9b8060d436113ed6860b6d3f8eaab129"
        },
        "downloads": -1,
        "filename": "p4runtime_shell-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59c1fac61136845353059a4201a4c41e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37104,
        "upload_time": "2021-01-28T00:57:46",
        "upload_time_iso_8601": "2021-01-28T00:57:46.269261Z",
        "url": "https://files.pythonhosted.org/packages/d3/b4/033d8d8bf7aa6ddc36c5f8a3b943848fb0607aae65af5ce089a8ef707830/p4runtime_shell-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0aab24af39233a9c711919045966a3cc2a6dc3a02551711c9c574a015011570",
          "md5": "dcff30863838441fc990d6c33bd03d9c",
          "sha256": "69dbb82765dae6169b86cc84150bdfa6dad50d235b50217ab0ba9a0bdea45eac"
        },
        "downloads": -1,
        "filename": "p4runtime_shell-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcff30863838441fc990d6c33bd03d9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42282,
        "upload_time": "2021-08-05T06:03:36",
        "upload_time_iso_8601": "2021-08-05T06:03:36.594010Z",
        "url": "https://files.pythonhosted.org/packages/c0/aa/b24af39233a9c711919045966a3cc2a6dc3a02551711c9c574a015011570/p4runtime_shell-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8eb8c1902963621b67e282493e07c35d46de659bb65bdcd558eab453e40c1624",
          "md5": "d0564e31fb5c95445c17f8fcecef33c8",
          "sha256": "723a769285d2a70f83516f1de38fadc1b5768f28a8c0018293831524059af7e3"
        },
        "downloads": -1,
        "filename": "p4runtime_shell-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0564e31fb5c95445c17f8fcecef33c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45213,
        "upload_time": "2022-09-14T22:18:30",
        "upload_time_iso_8601": "2022-09-14T22:18:30.364144Z",
        "url": "https://files.pythonhosted.org/packages/8e/b8/c1902963621b67e282493e07c35d46de659bb65bdcd558eab453e40c1624/p4runtime_shell-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b988dd5a439e5bc353fafc6b4e447dac12cfe94f4cca481a652e1d1d6efe1a2",
          "md5": "0787a79b5e8b1bc5283071c7fb3845ca",
          "sha256": "0aac67217b5bfcc30ab782bc078a2d058e718a26567735fca883ddd8e5bec0fd"
        },
        "downloads": -1,
        "filename": "p4runtime-shell-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0787a79b5e8b1bc5283071c7fb3845ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 54953,
        "upload_time": "2022-09-14T22:18:31",
        "upload_time_iso_8601": "2022-09-14T22:18:31.912649Z",
        "url": "https://files.pythonhosted.org/packages/7b/98/8dd5a439e5bc353fafc6b4e447dac12cfe94f4cca481a652e1d1d6efe1a2/p4runtime-shell-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8eb8c1902963621b67e282493e07c35d46de659bb65bdcd558eab453e40c1624",
        "md5": "d0564e31fb5c95445c17f8fcecef33c8",
        "sha256": "723a769285d2a70f83516f1de38fadc1b5768f28a8c0018293831524059af7e3"
      },
      "downloads": -1,
      "filename": "p4runtime_shell-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0564e31fb5c95445c17f8fcecef33c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 45213,
      "upload_time": "2022-09-14T22:18:30",
      "upload_time_iso_8601": "2022-09-14T22:18:30.364144Z",
      "url": "https://files.pythonhosted.org/packages/8e/b8/c1902963621b67e282493e07c35d46de659bb65bdcd558eab453e40c1624/p4runtime_shell-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b988dd5a439e5bc353fafc6b4e447dac12cfe94f4cca481a652e1d1d6efe1a2",
        "md5": "0787a79b5e8b1bc5283071c7fb3845ca",
        "sha256": "0aac67217b5bfcc30ab782bc078a2d058e718a26567735fca883ddd8e5bec0fd"
      },
      "downloads": -1,
      "filename": "p4runtime-shell-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0787a79b5e8b1bc5283071c7fb3845ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 54953,
      "upload_time": "2022-09-14T22:18:31",
      "upload_time_iso_8601": "2022-09-14T22:18:31.912649Z",
      "url": "https://files.pythonhosted.org/packages/7b/98/8dd5a439e5bc353fafc6b4e447dac12cfe94f4cca481a652e1d1d6efe1a2/p4runtime-shell-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}