{
  "info": {
    "author": "Lily Wang",
    "author_email": "lily@minium.com.au",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "pyelementary\n==============================\nYet another elements package\n\n[//]: # (Badges)\n[![GitHub Actions Build Status](https://github.com/lilyminium/pyelementary/workflows/CI/badge.svg)](https://github.com/lilyminium/pyelementary/actions?query=workflow%3ACI)\n[![codecov](https://codecov.io/gh/lilyminium/pyelementary/branch/master/graph/badge.svg)](https://codecov.io/gh/lilyminium/pyelementary/branch/master)\n\n\nElementary is *another* elements package defined in Python. It is written to be usable with a number of different unit systems and classes. At its most minimal, it has no dependencies outside the main Python library. However, the real point of the package is to automagically work with a number of units classes and be generally flexible.\n\n### Usage\n\n#### Standard\n\nYou can use Elementary immediately by importing the standard `Element` class. Please see the documentation for more. Each element is defined uniquely to allow for `is` comparisons.\n\n```ipython\n\nIn [1]: import pyelementary as elm\n\nIn [2]: h = elm.Element(atomic_number=1)\n\nIn [3]: h is elm.Element(name=\"hydrogen\")\nOut[3]: True\n\nIn [4]: h.mass\nOut[4]: 1.00782503223\n\n```\n\nSupported attributes include:\n\n* atomic_number\n* symbol\n* name\n* mass (in atomic mass units)\n* period\n* group\n* covalent_radius (in angstrom)\n\nEach attribute can be used to obtain an Element or list of Elements. Floats are rounded to the nearest 4 decimals when using `Element()`.\n\n```ipython\nIn [5]: elm.Element(mass=1.0078)\nOut[5]: Element(name='hydrogen', symbol='H', atomic_number=1, mass=1.00782503223, period=1, group=1, covalent_radius=0.31)\n```\n\nUsing `Element()` to retrieve an element can be quite slow, as a number of different cases are checked. If your search is more defined, you can access registries for each attribute directly at `Element.registry`. Keys for all floats are rounded to 4 decimal places.\n\n```ipython\nIn [6]: elm.Element.registry.mass[1.0078]\nOut[6]: Element(name='hydrogen', symbol='H', atomic_number=1, mass=1.00782503223, period=1, group=1, covalent_radius=0.31)\n```\n\nFor attributes where multiple elements have the same value, a sorted tuple of elements is returned.\n\n```ipython\nIn [8]: elm.Element(period=5)\nOut[8]:\n(Element(name='rubidium', symbol='Rb', atomic_number=37, mass=84.9117897379, period=5, group=1, covalent_radius=2.2),\n Element(name='strontium', symbol='Sr', atomic_number=38, mass=87.9056125, period=5, group=2, covalent_radius=1.95),\n Element(name='yttrium', symbol='Y', atomic_number=39, mass=88.9058403, period=5, group=3, covalent_radius=1.9),\n Element(name='zirconium', symbol='Zr', atomic_number=40, mass=89.9046977, period=5, group=4, covalent_radius=1.75),\n Element(name='niobium', symbol='Nb', atomic_number=41, mass=92.906373, period=5, group=5, covalent_radius=1.64),\n Element(name='molybdenum', symbol='Mo', atomic_number=42, mass=97.90540482, period=5, group=6, covalent_radius=1.54),\n Element(name='technetium', symbol='Tc', atomic_number=43, mass=97.9072124, period=5, group=7, covalent_radius=1.47),\n Element(name='ruthenium', symbol='Ru', atomic_number=44, mass=101.9043441, period=5, group=8, covalent_radius=1.46),\n Element(name='rhodium', symbol='Rh', atomic_number=45, mass=102.905498, period=5, group=9, covalent_radius=1.42),\n Element(name='palladium', symbol='Pd', atomic_number=46, mass=105.9034804, period=5, group=10, covalent_radius=1.39),\n Element(name='silver', symbol='Ag', atomic_number=47, mass=106.9050916, period=5, group=11, covalent_radius=1.45),\n Element(name='cadmium', symbol='Cd', atomic_number=48, mass=113.90336509, period=5, group=12, covalent_radius=1.44),\n Element(name='indium', symbol='In', atomic_number=49, mass=114.903878776, period=5, group=13, covalent_radius=1.42),\n Element(name='tin', symbol='Sn', atomic_number=50, mass=119.90220163, period=5, group=14, covalent_radius=1.39),\n Element(name='antimony', symbol='Sb', atomic_number=51, mass=120.903812, period=5, group=15, covalent_radius=1.39),\n Element(name='tellurium', symbol='Te', atomic_number=52, mass=129.906222748, period=5, group=16, covalent_radius=1.38),\n Element(name='iodine', symbol='I', atomic_number=53, mass=126.9044719, period=5, group=17, covalent_radius=1.39),\n Element(name='xenon', symbol='Xe', atomic_number=54, mass=131.9041550856, period=5, group=18, covalent_radius=1.4))\n```\n\nThese can be narrowed down with multiple keyword arguments.\n\n```ipython\nIn [9]: elm.Element(period=5, group=17)\nOut[9]: (Element(name='iodine', symbol='I', atomic_number=53, mass=126.9044719, period=5, group=17, covalent_radius=1.39),)\n```\n\n\n### Units\n\nThe default units in the standard elements library are:\n\n* mass: atomic mass units\n* length: angstrom\n\n\n### Sources\n\n\nThe data in the standard package are sourced, with much gratitude, from [qcelemental](https://github.com/MolSSI/QCElemental) version 0.23.0.\nPlease see the documentation for [qcelemental](https://docs.qcarchive.molssi.org/projects/QCElemental/en/stable/) for full details.\nThe covalent radii are obtained from Alvarez 2008.\n\n\n### Copyright\n\nCopyright (c) 2022, Lily Wang\n\n\n#### Acknowledgements\n \nProject based on the \n[Computational Molecular Science Python Cookiecutter](https://github.com/molssi/cookiecutter-cms) version 1.6.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyelementary",
    "package_url": "https://pypi.org/project/pyelementary/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyelementary/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyelementary/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Yet another elements package",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12737682,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa1137b74a8de359eb71c610f8a1403f354e347d8d598499ad4bb67121bc8ba4",
          "md5": "e91d488669c7de7096b3204454e7c949",
          "sha256": "56cc583a530e47b9850379e1e2db5c96c709db2fa418e2afb315dce35339f5df"
        },
        "downloads": -1,
        "filename": "pyelementary-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e91d488669c7de7096b3204454e7c949",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55938,
        "upload_time": "2022-01-30T15:51:21",
        "upload_time_iso_8601": "2022-01-30T15:51:21.739220Z",
        "url": "https://files.pythonhosted.org/packages/fa/11/37b74a8de359eb71c610f8a1403f354e347d8d598499ad4bb67121bc8ba4/pyelementary-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa1137b74a8de359eb71c610f8a1403f354e347d8d598499ad4bb67121bc8ba4",
        "md5": "e91d488669c7de7096b3204454e7c949",
        "sha256": "56cc583a530e47b9850379e1e2db5c96c709db2fa418e2afb315dce35339f5df"
      },
      "downloads": -1,
      "filename": "pyelementary-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e91d488669c7de7096b3204454e7c949",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55938,
      "upload_time": "2022-01-30T15:51:21",
      "upload_time_iso_8601": "2022-01-30T15:51:21.739220Z",
      "url": "https://files.pythonhosted.org/packages/fa/11/37b74a8de359eb71c610f8a1403f354e347d8d598499ad4bb67121bc8ba4/pyelementary-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}