{
  "info": {
    "author": "Agust√≠n Azzinnari",
    "author_email": "me@nagitsu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/3750391/86939555-1b52ab80-c118-11ea-956f-a12edafea081.png\" width=\"640\">\n</p>\n\n---\n\n**Terran** is a human perception library that provides computer vision\ntechniques and algorithms in order to facilitate building systems that interact\nwith people.\n\nThe philosophy behind the library is to focus on tasks and problems instead of\nmodels and algorithms. That is, it aims to always have the best possible\nalgorithm for the job given its constraints, and to take the burden of finding\nwhich model performs best off you.\n\nThe library strives to be friendly and easy-to-use. It's written fully in\nPython and Pytorch, avoiding C++ extensions as much as possible, in order to\navoid difficulties in installation. Just `pip install` and you're good to go!\n\nWe (currently) provide models for: **face detection**, **face recognition** and\n**pose estimation**. We also offer several utility functions for efficiently\nreading and visualizing results, which should simplify work a bit.\n\n<p align=\"center\">\n  <img src=\"examples/readme/main-image.jpg\", width=\"720\"><br>\n  <sup>\n    Example of Terran's face detection and pose estimation capabilities.\n  </sup>\n</p>\n\n# Features\n\n* Efficient I/O **utilities to read and write videos** through `ffmpeg`. Frames\n  are pre-fetched in a background thread, allowing you to maximize GPU usage\n  when processing videos.\n\n* Utilities to **open remote images**, recursively find images, and (prettily)\n  **visualize results**. We also allow reading from **video streams** and even\n  videos from **video platforms** supported by\n  [Youtube-DL](https://github.com/ytdl-org/youtube-dl/).\n\n* **Checkpoint management tool**, so you don't have to manually download\n  pre-trained model files.\n\n* **Face detection** provided through the *RetinaFace* model.\n\n* **Face recognition** provided through the *ArcFace* model.\n\n* **Pose estimation** provided through the *OpenPose* model (2017 version).\n\n# Getting started\n\nBe sure to read the **full documentation** [here](https://terran-project.com).\n\n## Installation\n\nTerran requires Python 3.6 or above, and Pytorch 1.3 or above. It can be used\nwith or without a GPU, though the current available algorithms require GPUs in\norder to run under a reasonable time.\n\nTo install, run:\n\n```bash\npip install terran\n```\n\nOr, if you want better-looking visualizations and have [Cairo](https://cairographics.org/)\ninstalled, you can go with:\n\n```bash\npip install terran[cairo]\n```\n\nIf you require a particular Pytorch version (e.g. you're using a specific CUDA\nversion), be sure to install it beforehand.\n\nFor more information, see the\n[Installation](https://terran-project.com/en/latest/usage/installation.html) section in the\ndocumentation.\n\n## Usage\n\nSee the [Getting started](https://terran-project.com/en/latest/usage/quickstart.html) section in\nthe documentation, and the [Examples](#examples) section for more in-depth examples.\n\nYou can use the functions under `terran.io.*` for easy reading of media files,\nand the appropriate algorithm function under the top-level module. If you don't\nneed [any customization](#customizing-model-settings), just issue the following\nin an interactive console:\n\n```python\n>>> from terran.io import open_image\n>>> from terran.vis import display_image, vis_faces\n>>> from terran.face import face_detection\n>>>\n>>> image = open_image('examples/readme/many-faces-raw.jpg')\n>>> detections = face_detection(image)\n>>> display_image(vis_faces(image, detections))\n```\n\n<p align=\"center\">\n  <img src=\"examples/readme/many-faces.jpg\", width=\"720\">\n</p>\n\nIf it's the first use, you should be prompted to download the model files. You\ncan also do it manually, by running `terran checkpoint list` and then\n`terran checkpoint download <checkpoint-id>` in a terminal.\n\nOr maybe:\n\n```python\n>>> from terran.vis import vis_poses\n>>> from terran.pose import pose_estimation\n>>>\n>>> image = open_image('examples/readme/many-poses-raw.jpg')\n>>> display_image(vis_poses(image, pose_estimation(image)))\n```\n\n<p align=\"center\">\n  <img src=\"examples/readme/many-poses.jpg\", width=\"720\">\n</p>\n\n# Examples\n\n## Finding a person in a group of images\n\nYou can use Terran's I/O utilities to quickly find a person within all the\nimages present in a directory, in a *Google Photos*-like functionality. The\ncode is present at [examples/match.py](examples/match.py).\n\n```bash\npython examples/match.py reference.png images/\n```\n\nHere `reference.png` is the path to the reference person, which should contain\nonly one person, while `images/` is the directory containing the images to\nsearch in.\n\n<!-- TODO: Diagram showing process and matching of images to photos. -->\n\n## Face detection over a video\n\nTerran also provides functions to perform I/O over videos, in order to read\nthem efficiently and in a background thread, as well as to write them. See\n[examples/video.py](examples/video.py) to see a short example of running face\ndetection over a video.\n\n```bash\npython examples/video.py video.mp4 out.mp4\n```\n\nHere `video.mp4` is the video to run the face detection over, and `out.mp4` the\noutput location.\n\n<!-- TODO: Example gif output. -->\n\nNote that `video.mp4` could be a Youtube video or the path to your webcam. For\ninstance:\n\n```bash\npython examples/video.py 'https://www.youtube.com/watch?v=oHg5SJYRHA0' out.mp4 --duration=30\n```\n\nYou could also mix this example and the one above to search for a person within\na video. We leave it as an exercise for the reader.\n\n## Customizing model settings\n\nYou might want to customize any of the detection functions (such as\n`face_detection`) in order to change e.g. the size images are resized to (in\norder to make it run faster). You can do it like so:\n\n```python\nfrom terran.face import Detection\n\nface_detection = Detection(short_side=208)\n\nimage = open_image(...)\ndetections = face_detection(image)\n```\n\n# References\n\nTerran doesn't provide training code for the models. As such, pre-trained\nweights are taken, adapted and re-packaged from the official model repositories\nof the respective models.\n\n- For OpenPose, the [official Pytorch version](https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation)\n  weights are used.\n- For ArcFace and RetinaFace, [Insightface's](https://github.com/deepinsight/insightface)\n  weights are used (in mxnet, translated to Pytorch by us).\n\n# License\n\nTerran is released under the [BSD 3-Clause](LICENSE) license.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://terran-project.com",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "terran",
    "package_url": "https://pypi.org/project/terran/",
    "platform": "",
    "project_url": "https://pypi.org/project/terran/",
    "project_urls": {
      "Homepage": "https://terran-project.com"
    },
    "release_url": "https://pypi.org/project/terran/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A human perception library",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8420062,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf204f64b9f8da629def6ee53277079f6133fcbd0df0a1bb7b1351ccf4fbb2fa",
          "md5": "feed0de7634310bb995b8b8b0c28b2ee",
          "sha256": "c79e07200de8d389a48f81aed241c9189e713ebf184415ee36c655ab56f0df78"
        },
        "downloads": -1,
        "filename": "terran-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "feed0de7634310bb995b8b8b0c28b2ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 1282,
        "upload_time": "2019-08-13T10:21:47",
        "upload_time_iso_8601": "2019-08-13T10:21:47.273502Z",
        "url": "https://files.pythonhosted.org/packages/cf/20/4f64b9f8da629def6ee53277079f6133fcbd0df0a1bb7b1351ccf4fbb2fa/terran-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4255661cb5ae243ecfeae1c8114ecd929ff520efed35184cbd40c2b58b3e4e10",
          "md5": "f25b0654f44ee8bbd899809853a1d4e7",
          "sha256": "112245cca7a9427405974b2522f97e8b0e296b119b6b082d7f394b901abab7c5"
        },
        "downloads": -1,
        "filename": "terran-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f25b0654f44ee8bbd899809853a1d4e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39570,
        "upload_time": "2019-12-28T14:38:42",
        "upload_time_iso_8601": "2019-12-28T14:38:42.995674Z",
        "url": "https://files.pythonhosted.org/packages/42/55/661cb5ae243ecfeae1c8114ecd929ff520efed35184cbd40c2b58b3e4e10/terran-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e791a1933750e80510b28e87fef5f904e734312ce7483953d0793de23b21b61",
          "md5": "1148cfed681c17a6dd2cbf2cef9c0d59",
          "sha256": "cc0109840f0269231cdabb3c7afa44c9196d53dcebdc68ced7b54deb9d23f352"
        },
        "downloads": -1,
        "filename": "terran-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1148cfed681c17a6dd2cbf2cef9c0d59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 51198,
        "upload_time": "2020-07-06T13:46:30",
        "upload_time_iso_8601": "2020-07-06T13:46:30.893819Z",
        "url": "https://files.pythonhosted.org/packages/0e/79/1a1933750e80510b28e87fef5f904e734312ce7483953d0793de23b21b61/terran-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "562222f2cfe4e9d177b242507d51601865a78e25e5eb7eed3a339d74a165e1d7",
          "md5": "a67d63b78d666634518d2ec34e80e609",
          "sha256": "39509e19507e0783689e578514fb429cd4f2b395c29bee1ea05844202d87ecf2"
        },
        "downloads": -1,
        "filename": "terran-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a67d63b78d666634518d2ec34e80e609",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 51459,
        "upload_time": "2020-10-15T16:02:10",
        "upload_time_iso_8601": "2020-10-15T16:02:10.647541Z",
        "url": "https://files.pythonhosted.org/packages/56/22/22f2cfe4e9d177b242507d51601865a78e25e5eb7eed3a339d74a165e1d7/terran-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "562222f2cfe4e9d177b242507d51601865a78e25e5eb7eed3a339d74a165e1d7",
        "md5": "a67d63b78d666634518d2ec34e80e609",
        "sha256": "39509e19507e0783689e578514fb429cd4f2b395c29bee1ea05844202d87ecf2"
      },
      "downloads": -1,
      "filename": "terran-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a67d63b78d666634518d2ec34e80e609",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 51459,
      "upload_time": "2020-10-15T16:02:10",
      "upload_time_iso_8601": "2020-10-15T16:02:10.647541Z",
      "url": "https://files.pythonhosted.org/packages/56/22/22f2cfe4e9d177b242507d51601865a78e25e5eb7eed3a339d74a165e1d7/terran-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}