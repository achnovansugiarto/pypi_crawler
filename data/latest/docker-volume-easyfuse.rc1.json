{
  "info": {
    "author": "Marcin SÅ‚owik",
    "author_email": "me@marandil.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: AsyncIO",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# `easyfuse` - simple FUSE volume driver for Docker\n\nSimple FUSE-based docker volume driver based on the local driver systax. By offloading volume mounting to a simple `mount -t fuse` subprocess call, the typical problem of https://github.com/moby/moby/issues/27103 does not apply.\n\nThe plugin uses legacy architecture (mounting as a unix socket) to expose to the user full host system capabilites of `mount`. This way, user can e.g. fully specify `uid` and `gid` volume mapping, use local system resources (e.g. SSH keys), something that is an annoying shortcoming of plugins such as `vieux/sshfs`.\n\nInitially, the plugin was developed to allow using SSHFS in scenario, where `vieux/sshfs` simply wouldn't work, and after discovering _why_ the `local` driver would not work with fuse mount type. Hovever, in theory this plugin should work with any `fuse`-mounted filesystem (and in future, possibly even others).\n\n### Permissions\n\nCurrently, since easyfuse uses `mount` for creating actual fuse volumes, `easyfuse` must be ran as root. This may change in future versions.\n\n## Package dependencies\n\nIt's relatively easy to run `easyfuse` without actually installing the package, nevertheless it \nrequires some non-standard third party Python libraries. To start, simply install module dependencies \n(see [requirements.txt]), either with\n\n```\nsudo python3 -m pip install -r requirements.txt\n```\n\nor (preferably) with your system package manager, e.g. for Debian/Ubuntu:\n\n```\nsudo apt install python3-aiohttp\n```\n\nWhen using `pip`, make sure the packages are installed globally, as `easyfuse` currently needs to be ran as root.\n\n## Local installation in virtual environment\n\n`easyfuse` should have no problems working out of a python virtual environment.\nSimply initialize a virtual environment and install the package locally:\n\n```\n$ python3 -m venv venv\n$ source venv/bin/activate\n(venv) $ pip install -e .\n```\n\nThis will pull all local requirements, without interfering with the system and system's package\nmanagers.\n\nWhen running from venv with `sudo`, you may need to manually point to the venv's python as virtual\nenvironment variables are not inherited by `sudo`-ed process, see:\n\n```\n# locally installed aiohttp in version 3.5.1, venv installed aiohttp in version 3.7.3:\n(venv) $ python3 -c 'import aiohttp; print(aiohttp.__version__)'\n3.7.3\n(venv) $ sudo python3 -c 'import aiohttp; print(aiohttp.__version__)'\n3.5.1\n```\n\nInstead, simply use `venv/bin/python` explicitly:\n\n```\n(venv) $ sudo venv/bin/python -c 'import aiohttp; print(aiohttp.__version__)'\n3.7.3\n```\n\n## Running manually (without installation)\n\nTo run in a stand-alone mode (preferred for development), start in the main directory and simply run\n\n```\nsudo python3 -m easyfuse -s /run/docker/plugins/easyfuse.sock\n```\n\nsee `python3 -m easyfuse -h` (no `sudo` required) for full list of available options.\n\n## Running with `systemd` (with or without installation)\n\n`systemd` folder contains basic systemd unit files for socket activation, either for global and local\nsetup.\nAssuming `/etc/systemd/system` as the configuration path of choice, typical activation for a local setup would be:\n\n```\n$ SYSTEMD_UNIT_TARGET=/etc/systemd/system\n$ sudo cp systemd/easyfuse.socket $SYSTEMD_UNIT_TARGET/\n$ WORKDIR=$PWD envsubst '$WORKDIR' < systemd/easyfuse.service.dev | sudo tee $SYSTEMD_UNIT_TARGET/easyfuse.service\n$ sudo systemctl daemon-reload\n$ sudo systemctl start easyfuse.socket\n```\n\nWhen using virtualenv, use the appropriate config:\n\n```\n(venv) $ SYSTEMD_UNIT_TARGET=/etc/systemd/system\n(venv) $ sudo cp systemd/easyfuse.socket $SYSTEMD_UNIT_TARGET/\n(venv) $ envsubst '$VIRTUAL_ENV' < systemd/easyfuse.service.venv | sudo tee $SYSTEMD_UNIT_TARGET/easyfuse.service\n(venv) $ sudo systemctl daemon-reload\n(venv) $ sudo systemctl start easyfuse.socket\n```\n\nFor a global installation (i.e. if you can call `python3 -m easyfuse -h` as root from anywhere, without virtual environment), simply use:\n\n```\n$ SYSTEMD_UNIT_TARGET=/etc/systemd/system\n$ sudo cp systemd/easyfuse.socket  $SYSTEMD_UNIT_TARGET/\n$ sudo cp systemd/easyfuse.service $SYSTEMD_UNIT_TARGET/\n$ sudo systemctl daemon-reload\n$ sudo systemctl start easyfuse.socket\n```\n\n### Automatic systemd setup\n\n`easyfuse` provides a simple automatic `systemd` setup via `easyfuse.systemd_setup` script-module. \nSee `python3 -m easyfuse.systemd_setup -h` for reference. Remember that when using `sudo` with `venv`,\nyou need to use the `venv` symlink instead of `python3`:\n\n```\n(venv) $ sudo python3 -m easyfuse.systemd_setup venv          # <- this will install using the global python\n(venv) $ sudo venv/bin/python3 -m easyfuse.systemd_setup venv # <- this will install using the local venv\n```\n\n## Using `easyfuse` with docker volume\n\nNote: when using SSHFS, make sure the host key is accepted by the root user (or whatever user is running the mount command). This can be done by simply doing `sudo ssh user@my-ssh-host` and verifying the public key, or with `ssh-keyscan >> /root/.ssh/known_hosts`.\n\n```\n$ docker volume create -d easyfuse -o 'o=IdentityFile=$HOME/.ssh/id_ed25519,uid=1000,gid=1000,users,idmap=user,noatime,allow_other,_netdev,reconnect,rw' -o 'device=sshfs#user@my-ssh-host:/my-ssh-volume' my-volume\nmy-volume\n```\n\n```\n$ docker run --rm -it -v my-volume:/my-volume busybox ls /my-volume -lah\ntotal 8K\ndrwxrwsr-x    1 1000     1000        4.0K Nov 25 00:43 .\ndrwxr-xr-x    1 root     root        4.0K Nov 25 13:27 ..\n```\n\n```\n$ docker volume rm my-volume\nmy-volume\n```\n\n## Using `easyfuse` with docker-compose\n\nA fully-featured example with docker-compose can be found in the examples folder. See also [below](#verify-with-docker-compose).\n\n```\nvolumes:\n  nfs:\n    driver: easyfuse\n    driver_opts:\n      o: IdentityFile=$PWD/my-secret.key,uid=1000,gid=1000,users,idmap=user,noatime,allow_other,_netdev,reconnect,rw\n      device: \"sshfs#testuser@localhost:testdir\"\n```\n\n## Test with minimal local sshfs setup\n\nFolder examples/mini-sshfs contains a minimal sshd configuration and startup script for your local user that you can use to test the plugin.\n\nThe scripts assume you have sshd available at /usr/sbin/sshd. This can be easily overriden with SSHD environment variable. To start the server simply issue:\n\n```\nexamples$ mini-sshfs/run_sshd.sh\n```\n\nThe script will generate user and host keys and store them locally in the mini-sshfs folder. The server runs at port 2022 (override with MINI_SSHD_PORT environment variable) and binds to localhost interfaces only (127.0.0.1 and ::1). To verify the server works you can check if ssh with the exported known_hosts and user key work:\n\n```\nexamples$ ssh -o UserKnownHostsFile=mini-sshfs/known_hosts -i mini-sshfs/.keys/ssh_user_ed25519_key -p 2022 $USER@localhost\nLast login: Wed Nov 25 00:00:00 2020 from xx.yy.zz.ww\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\n$ exit\nlogout\nConnection to localhost closed.\nexamples$\n```\n\n### Verify with a regular named volume\n\n```\nexamples$ docker volume create -d easyfuse -o \"o=IdentityFile=$PWD/mini-sshfs/.keys/ssh_user_ed25519_key,UserKnownHostsFile=$PWD/mini-sshfs/known_hosts,port=2022,uid=1000,gid=1000,users,idmap=user,noatime,allow_other,_netdev,reconnect,rw\" -o \"device=sshfs#$USER@localhost:$PWD/test\" my-volume\nmy-volume\n\nexamples$ docker run --rm -it -v my-volume:/my-volume busybox ls /my-volume -lah\ntotal 12K\ndrwxr-xr-x    1 1000     1000        4.0K Nov 25 15:16 .\ndrwxr-xr-x    1 root     root        4.0K Nov 25 15:45 ..\n-rw-r--r--    1 1000     1000         445 Nov 25 15:17 lorem_ipsum.txt\n\nexamples$ docker volume rm my-volume\nmy-volume\n```\n\n### Verify with docker-compose\n\n```\nexamples$ cat docker-compose.yml\nversion: '3.4'\n\nservices:\n  mytest:\n    image: alpine\n    volumes:\n      - 'nas:/nas:rw'\n    command: [sh, -c, 'touch /nas/test; ls -lah /nas;']\n\nvolumes:\n  nas:\n    driver: easyfuse\n    driver_opts:\n      o: IdentityFile=$PWD/mini-sshfs/.keys/ssh_user_ed25519_key,UserKnownHostsFile=$PWD/mini-sshfs/known_hosts,Port=2022,uid=1000,gid=1000,users,idmap=user,noatime,allow_other,_netdev,reconnect,rw\n      device: \"sshfs#$USER@localhost:$PWD/test\"\n\nexamples$ docker-compose up\nCreating volume \"examples_nas\" with easyfuse driver\nStarting examples_mytest_1 ... done\nAttaching to examples_mytest_1\nmytest_1  | total 12K\nmytest_1  | drwxr-xr-x    1 1000     1000        4.0K Nov 25 16:29 .\nmytest_1  | drwxr-xr-x    1 root     root        4.0K Nov 25 16:29 ..\nmytest_1  | -rw-r--r--    1 1000     1000         445 Nov 25 15:17 lorem_ipsum.txt\nmytest_1  | -rw-r--r--    1 1000     1000           0 Nov 25 16:29 test\nexamples_mytest_1 exited with code 0\n\nexamples$ docker-compose down -v\nRemoving examples_mytest_1 ... done\nRemoving network examples_default\nRemoving volume examples_nas\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Marandil/docker-volume-easyfuse",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docker-volume-easyfuse",
    "package_url": "https://pypi.org/project/docker-volume-easyfuse/",
    "platform": "",
    "project_url": "https://pypi.org/project/docker-volume-easyfuse/",
    "project_urls": {
      "Homepage": "https://github.com/Marandil/docker-volume-easyfuse"
    },
    "release_url": "https://pypi.org/project/docker-volume-easyfuse/0.2.1/",
    "requires_dist": [
      "aiohttp"
    ],
    "requires_python": ">=3.6",
    "summary": "simple FUSE volume driver for Docker",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8758652,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d083fc19c70ccef9397015371446f3170af39d3c0d1bddf982a4568b1773eea4",
          "md5": "afeaa4f7bbdf6e18422e6b8dc63e15d2",
          "sha256": "acba971fbb2392eda4bc6a9757bb208d0978437dfe90378f89b753eee67dccdb"
        },
        "downloads": -1,
        "filename": "docker_volume_easyfuse-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afeaa4f7bbdf6e18422e6b8dc63e15d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27348,
        "upload_time": "2020-11-26T23:38:07",
        "upload_time_iso_8601": "2020-11-26T23:38:07.749616Z",
        "url": "https://files.pythonhosted.org/packages/d0/83/fc19c70ccef9397015371446f3170af39d3c0d1bddf982a4568b1773eea4/docker_volume_easyfuse-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f1066d9cb5a67e1e579f0e0b26f0d3b0c643721e4a7f29773619b32f7136421",
          "md5": "a7617717eb3f00ceb4c98bf28f0e31a8",
          "sha256": "a86c60b728c2f14e42cf5f8c02d35a8003c00141b8d887aefecfd2fd5ff2f93d"
        },
        "downloads": -1,
        "filename": "docker-volume-easyfuse-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a7617717eb3f00ceb4c98bf28f0e31a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9957,
        "upload_time": "2020-11-26T23:40:42",
        "upload_time_iso_8601": "2020-11-26T23:40:42.441712Z",
        "url": "https://files.pythonhosted.org/packages/4f/10/66d9cb5a67e1e579f0e0b26f0d3b0c643721e4a7f29773619b32f7136421/docker-volume-easyfuse-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d083fc19c70ccef9397015371446f3170af39d3c0d1bddf982a4568b1773eea4",
        "md5": "afeaa4f7bbdf6e18422e6b8dc63e15d2",
        "sha256": "acba971fbb2392eda4bc6a9757bb208d0978437dfe90378f89b753eee67dccdb"
      },
      "downloads": -1,
      "filename": "docker_volume_easyfuse-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "afeaa4f7bbdf6e18422e6b8dc63e15d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 27348,
      "upload_time": "2020-11-26T23:38:07",
      "upload_time_iso_8601": "2020-11-26T23:38:07.749616Z",
      "url": "https://files.pythonhosted.org/packages/d0/83/fc19c70ccef9397015371446f3170af39d3c0d1bddf982a4568b1773eea4/docker_volume_easyfuse-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f1066d9cb5a67e1e579f0e0b26f0d3b0c643721e4a7f29773619b32f7136421",
        "md5": "a7617717eb3f00ceb4c98bf28f0e31a8",
        "sha256": "a86c60b728c2f14e42cf5f8c02d35a8003c00141b8d887aefecfd2fd5ff2f93d"
      },
      "downloads": -1,
      "filename": "docker-volume-easyfuse-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a7617717eb3f00ceb4c98bf28f0e31a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9957,
      "upload_time": "2020-11-26T23:40:42",
      "upload_time_iso_8601": "2020-11-26T23:40:42.441712Z",
      "url": "https://files.pythonhosted.org/packages/4f/10/66d9cb5a67e1e579f0e0b26f0d3b0c643721e4a7f29773619b32f7136421/docker-volume-easyfuse-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}