{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "ascl@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Microsoft Opentelemetry exporter for Azure Monitor\n\n[![Gitter chat](https://img.shields.io/gitter/room/Microsoft/azure-monitor-python)](https://gitter.im/Azure/azure-sdk-for-python)\n\nThe exporter for Azure Monitor allows you to export tracing data utilizing the OpenTelemetry SDK and send telemetry data to Azure Monitor for applications written in Python.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/monitor/microsoft-opentelemetry-exporter-azuremonitor) | [Package (PyPi)][pypi] | [API reference documentation][api_docs] | [Product documentation][product_docs] | [Samples](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/monitor/microsoft-opentelemetry-exporter-azuremonitor/samples) | [Changelog](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/monitor/microsoft-opentelemetry-exporter-azuremonitor/CHANGELOG.md)\n\n> **NOTE**: This is the preview for the next major version of [`opentelemetry-azure-monitor-python`](https://github.com/microsoft/opentelemetry-azure-monitor-python).\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Opentelemetry exporter for Azure Monitor with [pip][pip]:\n\n```Bash\npip install microsoft-opentelemetry-exporter-azuremonitor --pre\n```\n\n### Prerequisites: \nTo use this package, you must have:\n* Azure subscription - [Create a free account][azure_sub]\n* Azure Monitor - [How to use application insights][application_insights_namespace]\n* Opentelemetry SDK - [Opentelemtry SDK for Python][ot_sdk_python]\n* Python 3.5 or later - [Install Python][python]\n\n### Authenticate the client\n\nInteraction with Azure monitor exporter starts with an instance of the `AzureMonitorSpanExporter` class. You will need a **connection_string** to instantiate the object.\nPlease find the samples linked below for demonstration as to how to authenticate using a connection string.\n\n#### [Create Exporter from connection string][sample_authenticate_client_connstr]\n\n```Python\nfrom microsoft.opentelemetry.exporter.azuremonitor import AzureMonitorSpanExporter\nexporter = AzureMonitorSpanExporter(\n    connection_string = os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING \"]\n)\n```\n\n## Key concepts\n\nSome of the key concepts for the Azure monitor exporter include:\n\n* [Opentelemetry][opentelemtry_spec]: Opentelemetry is a set of libraries used to collect and export telemetry data (metrics, logs, and traces) for analysis in order to understand your software's performance and behavior.\n\n* [Instrumentation][instrumentation_library]: The ability to call the opentelemetry API directly by any application is facilitated by instrumentaton. A library that enables OpenTelemetry observability for another library is called an Instrumentation Library.\n\n* [Trace][trace_concept]: Trace refers to distributed tracing. It can be thought of as a directed acyclic graph (DAG) of Spans, where the edges between Spans are defined as parent/child relationship.\n\n* [Tracer Provider][tracer_provider]: Provides a `Tracer` for use by the given instrumentation library.\n\n* [Span Processor][span_processor]: A span processor allows hooks for SDK's `Span` start and end method invocations. Follow the link for more information.\n\n* [Sampling][sampler_ref]: Sampling is a mechanism to control the noise and overhead introduced by OpenTelemetry by reducing the number of samples of traces collected and sent to the backend.\n\n* [AzureMonitorSpanExporter][client_reference]: This is the class that is initialized to send tracing related telemetry to Azure Monitor.\n\n* [Exporter Options][exporter_options]: Options to configure Azure exporters. Includes connection_string, instrumentation_key, proxies, timeout etc.\n\nFor more information about these resources, see [What is Azure Monitor?][product_docs].\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common tasks, including:\n\n* [Exporting a custom span](#export-hello-world-trace)\n* [Modifying spans](#modifying-traces)\n* [Using an instrumentation to track a library](#instrumentation-with-requests-library)\n\n\n### Export Hello World Trace\n\n```Python\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchExportSpanProcessor\nfrom microsoft.opentelemetry.exporter.azuremonitor import AzureMonitorSpanExporter\n\nexporter = AzureMonitorSpanExporter(\n    connection_string = os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING \"]\n)\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\nspan_processor = BatchExportSpanProcessor(exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\nwith tracer.start_as_current_span(\"hello\"):\n    print(\"Hello, World!\")\n```\n\n### Modifying Traces\n\n* You can pass a callback function to the exporter to process telemetry before it is exported.\n* Your callback function can return False if you do not want this envelope exported.\n* Your callback function must accept an envelope data type as its parameter.\n* You can see the schema for Azure Monitor data types in the envelopes here.\n* The AzureMonitorSpanExporter handles Data data types.\n\n```Python\nfrom microsoft.opentelemetry.exporter.azuremonitor import AzureMonitorSpanExporter\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchExportSpanProcessor\n\n# Callback function to add os_type: linux to span properties\ndef callback_function(envelope):\n    envelope.data.baseData.properties['os_type'] = 'linux'\n    return True\n\nexporter = AzureMonitorSpanExporter(\n    connection_string='InstrumentationKey=<your-ikey-here>'\n)\n# This line will modify telemetry\nexporter.add_telemetry_processor(callback_function)\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\nspan_processor = BatchExportSpanProcessor(exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\nwith tracer.start_as_current_span('hello'):\n    print('Hello World!')\n```\n\n### Instrumentation with requests library\n\nOpenTelemetry also supports several instrumentations which allows to instrument with third party libraries.\n\nThis example shows how to instrument with the [requests](https://pypi.org/project/requests/) library.\n\n* Install the requests integration package using pip install opentelemetry-instrumentation-requests.\n\n```Python\nimport os\nimport requests\nfrom opentelemetry import trace\nfrom opentelemetry.instrumentation.requests import RequestsInstrumentor\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchExportSpanProcessor\n\nfrom microsoft.opentelemetry.exporter.azuremonitor import AzureMonitorSpanExporter\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\n\n# This line causes your calls made with the requests library to be tracked.\nRequestsInstrumentor().instrument()\nspan_processor = BatchExportSpanProcessor(\n    AzureMonitorSpanExporter(\n        connection_string = os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING \"]\n    )\n)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\nRequestsInstrumentor().instrument()\n\n# This request will be traced\nresponse = requests.get(url=\"https://azure.microsoft.com/\")\n```\n\n## Troubleshooting\n\nThe exporter raises exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/core/azure-core/README.md#azure-core-library-exceptions).\n\n## Next steps\n\n### More sample code\n\nPlease find further examples in the [samples](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/monitor/microsoft-opentelemetry-exporter-azuremonitor/samples) directory demonstrating common scenarios.\n\n### Additional documentation\n\nFor more extensive documentation on the Azure Monitor service, see the [Azure Monitor documentation][product_docs] on docs.microsoft.com.\n\nFor detailed overview of Opentelemetry, visit their [overview](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md) page.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[api_docs]: https://aka.ms/monitorexporterapidocs\n[product_docs]: https://docs.microsoft.com/azure/azure-monitor/overview\n[azure_portal]: https://portal.azure.com\n[azure_sub]: https://azure.microsoft.com/free/\n[cloud_shell]: https://docs.microsoft.com/azure/cloud-shell/overview\n[cloud_shell_bash]: https://shell.azure.com/bash\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/project/opentelemetry-azure-monitor/\n[python]: https://www.python.org/downloads/\n[venv]: https://docs.python.org/3/library/venv.html\n[virtualenv]: https://virtualenv.pypa.io\n[ot_sdk_python]: https://github.com/open-telemetry/opentelemetry-python\n[application_insights_namespace]: https://docs.microsoft.com/azure/azure-monitor/app/app-insights-overview#how-do-i-use-application-insights\n[exporter_options]: https://opentelemetry-azure-monitor-python.readthedocs.io/en/latest/azure_monitor/export/export.options.html?highlight=options\n[trace_concept]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#trace\n[client_reference]: https://opentelemetry-azure-monitor-python.readthedocs.io/en/latest/azure_monitor/export/export.trace.html#module-azure_monitor.export.trace\n[opentelemtry_spec]: https://opentelemetry.io/\n[instrumentation_library]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#instrumentation-libraries\n[tracer_provider]: https://opentelemetry-python.readthedocs.io/en/stable/api/trace.html?highlight=TracerProvider#opentelemetry.trace.TracerProvider\n[span_processor]: https://opentelemetry-python.readthedocs.io/en/stable/_modules/opentelemetry/sdk/trace.html?highlight=SpanProcessor#\n[sampler_ref]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling\n\n[sample_authenticate_client_connstr]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/monitor/microsoft-opentelemetry-exporter-azuremonitor/samples/traces/sample_trace.py#L18\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/monitor/microsoft-opentelemetry-exporter-azuremonitor",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microsoft-opentelemetry-exporter-azuremonitor",
    "package_url": "https://pypi.org/project/microsoft-opentelemetry-exporter-azuremonitor/",
    "platform": "",
    "project_url": "https://pypi.org/project/microsoft-opentelemetry-exporter-azuremonitor/",
    "project_urls": {
      "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/monitor/microsoft-opentelemetry-exporter-azuremonitor"
    },
    "release_url": "https://pypi.org/project/microsoft-opentelemetry-exporter-azuremonitor/1.0.0b1/",
    "requires_dist": [
      "azure-core (<2.0.0,>=1.6.0)",
      "msrest (>=0.6.10)",
      "opentelemetry-api (==0.15b0)",
      "opentelemetry-sdk (==0.15b0)"
    ],
    "requires_python": ">=3.5.0",
    "summary": "Microsoft Azure Monitor Opentelemetry Exporter Client Library for Python",
    "version": "1.0.0b1",
    "yanked": true,
    "yanked_reason": "Deprecated this package due to naming. Please utilize azure-monitor-opentelemetry-exporter."
  },
  "last_serial": 9602931,
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5752ed59ff27a2f0831dc1d363c7c051b052050cefb4995999e763bd2bc0e0d0",
          "md5": "70a120e3d7c8a11bd37ed10def896ad5",
          "sha256": "07517f7961cd3a91d00777fa2f11c8398fc253d32c69ed33d378b7b01885a5a8"
        },
        "downloads": -1,
        "filename": "microsoft_opentelemetry_exporter_azuremonitor-1.0.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70a120e3d7c8a11bd37ed10def896ad5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 43019,
        "upload_time": "2020-11-13T21:26:20",
        "upload_time_iso_8601": "2020-11-13T21:26:20.757935Z",
        "url": "https://files.pythonhosted.org/packages/57/52/ed59ff27a2f0831dc1d363c7c051b052050cefb4995999e763bd2bc0e0d0/microsoft_opentelemetry_exporter_azuremonitor-1.0.0b1-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Deprecated this package due to naming. Please utilize azure-monitor-opentelemetry-exporter."
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c5d647bb3c65dd9f6a9c18f92c5d855e9b24517202a0723cac2285f6a2c5e3a",
          "md5": "0fd37fd6ae53460aa7e47eb3632d5baa",
          "sha256": "52a840e1c7edfce38d5141be13d163a97785927ea7aa60322474254923d4e353"
        },
        "downloads": -1,
        "filename": "microsoft-opentelemetry-exporter-azuremonitor-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "0fd37fd6ae53460aa7e47eb3632d5baa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 74755,
        "upload_time": "2020-11-13T21:26:22",
        "upload_time_iso_8601": "2020-11-13T21:26:22.616802Z",
        "url": "https://files.pythonhosted.org/packages/1c/5d/647bb3c65dd9f6a9c18f92c5d855e9b24517202a0723cac2285f6a2c5e3a/microsoft-opentelemetry-exporter-azuremonitor-1.0.0b1.zip",
        "yanked": true,
        "yanked_reason": "Deprecated this package due to naming. Please utilize azure-monitor-opentelemetry-exporter."
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5752ed59ff27a2f0831dc1d363c7c051b052050cefb4995999e763bd2bc0e0d0",
        "md5": "70a120e3d7c8a11bd37ed10def896ad5",
        "sha256": "07517f7961cd3a91d00777fa2f11c8398fc253d32c69ed33d378b7b01885a5a8"
      },
      "downloads": -1,
      "filename": "microsoft_opentelemetry_exporter_azuremonitor-1.0.0b1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70a120e3d7c8a11bd37ed10def896ad5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5.0",
      "size": 43019,
      "upload_time": "2020-11-13T21:26:20",
      "upload_time_iso_8601": "2020-11-13T21:26:20.757935Z",
      "url": "https://files.pythonhosted.org/packages/57/52/ed59ff27a2f0831dc1d363c7c051b052050cefb4995999e763bd2bc0e0d0/microsoft_opentelemetry_exporter_azuremonitor-1.0.0b1-py2.py3-none-any.whl",
      "yanked": true,
      "yanked_reason": "Deprecated this package due to naming. Please utilize azure-monitor-opentelemetry-exporter."
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c5d647bb3c65dd9f6a9c18f92c5d855e9b24517202a0723cac2285f6a2c5e3a",
        "md5": "0fd37fd6ae53460aa7e47eb3632d5baa",
        "sha256": "52a840e1c7edfce38d5141be13d163a97785927ea7aa60322474254923d4e353"
      },
      "downloads": -1,
      "filename": "microsoft-opentelemetry-exporter-azuremonitor-1.0.0b1.zip",
      "has_sig": false,
      "md5_digest": "0fd37fd6ae53460aa7e47eb3632d5baa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 74755,
      "upload_time": "2020-11-13T21:26:22",
      "upload_time_iso_8601": "2020-11-13T21:26:22.616802Z",
      "url": "https://files.pythonhosted.org/packages/1c/5d/647bb3c65dd9f6a9c18f92c5d855e9b24517202a0723cac2285f6a2c5e3a/microsoft-opentelemetry-exporter-azuremonitor-1.0.0b1.zip",
      "yanked": true,
      "yanked_reason": "Deprecated this package due to naming. Please utilize azure-monitor-opentelemetry-exporter."
    }
  ],
  "vulnerabilities": []
}