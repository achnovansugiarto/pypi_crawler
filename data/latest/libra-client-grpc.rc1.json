{
  "info": {
    "author": "yuan xinyu",
    "author_email": "yuanxinyu.hangzhou@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\nLibraClient is a collection of tools which allows you interact whith [Libra Network](http://libra.org) easily. It provides three ways to access Libra:\n\n1. **`libra_shell`**, an interactive shell program. It is compatible with official Libra client. For beginners, it lets you get started directly to try your first transaction with libra without requiring time-consuming downloads and compiles the huge entire Libra project source code.\n2. **`libra`**, a command line tool. It has a modern colorful text interface and its output is the standard json format. So, it can be integrated to any programming language easily.\n3. **`python api`**, a collection of apis for client access to libra. For Python programmers, you can call this client side api to interact with Libra Network with more control than by using `libra` command.\n\nIn following docuement, all command prefix with `$` meants it is typed and run in standard linux shell; all command prefix with `libra%` meants it is typed and run in `libra_shell`.\n\nFor exmaple, **`$ libra`** meants run `libra` command in linux shell, which is different than **`libra%`**.\n\n## Installation\n\nRequire python 3.7 or above installed.\n\n```sh\n$ python3 -m pip install libra-client-grpc\n```\nIf you had a problem during installation, following command should works anyway.\n```sh\n$ python3 -m pip install  --index-url https://pypi.org/project/ --user libra-client-grpc\n```\n\n\n## Usage of 'libra_shell'\n\nTo start 'libra_shell' and connect to a validator node running on the Libra testnet, just input the 'libra_shell' command on termial as shown below.\n\n```bash\n$ libra_shell\n```\n\nOnce the client connects to a node on the testnet, you will see the following output.  To quit the client at any time, use the `quit` command.\n\n![libra shell](https://github.com/yuan-xy/libra-client/raw/master/docs/shell.jpg \"libra shell\")\n\n\n\n[This document will guide you through executing your first transaction on the Libra Blockchain](https://github.com/yuan-xy/libra-client/blob/master/docs/first_transaction.md). We will walk you through creating accounts for two users.\n\n\n## Usage of 'libra' command\n\nThe command 'libra' contains four subcommands 'account', 'transaction', 'wallet' and 'ledger'. All subcommands have their own parameters.\n\n### Leger Time Example\nFor example, using 'ledger' command to query the ledger start time and latest transaction time of testnet:\n\n```bash\n$ libra ledger time\n```\nYou will get the json output like this:\n\n```json\n{\n    \"start_time\": \"2019-10-03T05:19:59\",\n    \"latest_time\": \"2019-10-16T17:04:17\"\n}\n```\n\n### Account Balance Example\n\nTo query the balance of some account by address,\n```bash\n$ libra account balance 000000000000000000000000000000000000000000000000000000000a550c18\n```\n\nYou will get the balance of that address:\n\n```json\n{\n    \"balance\": 24075309756646968\n}\n```\n\n### Wallet Example\n\nTo query the total balance of a wallet,\n\n```bash\n$ libra wallet balance <some mnemonic file of the wallet>\n```\n\nYou will get the total balance and balance of every accounts in that wallet:\n\n```json\n{\n    \"7af57a0c206fbcc846532f75f373b5d1db9333308dbc4673c5befbca5db60e2f\": 123,\n    \"f1f48f56c4deea75f4393e832edef247547eb76e1cd498c27cc972073ec4dbde\": 0,\n    \"total_balance\": 123\n}\n```\n\n### Help message of `libra`\n\nIf you input `libra` without any parameters as following,\n\n```bash\n$ libra\n```\nYou will get the help message:\n\n```\nUSAGE:\n\tlibra [options] command [command parameters ...]\n\nOptional arguments:\n\n -a | --host HOST  Host address/name to connect to. [default:testnet]\n -p | --port PORT  Admission Control port to connect to. [default: 8000]\n -v | --verbose Verbose output\n -V | --version Show program's version number and exit\n -h | --help Show this help message and exit\n\nUse the following commands:\n\naccount | a\n\tAccount query by address\ntransaction | t\n\tTransaction query\nwallet | w\n\tshow account information of a wallet derived from mnemonic file\nledger | lg\n\tshow ledger info of Libra blockchain\n```\n\n### Help message of subcommand\nIf you input the libra subcommand without any parameter, you will get the help message of that subcommand. For example:\n\n```bash\n$ libra wallet\n```\nYou will get the help message:\n\n```\nUSAGE:\n        wallet <arg>\n\nUse one of the following args for this command:\n\nshow | s <mnemonic_file_path>\n        Show the mnemonic words, seed and addresses of a wallet\naccount | a <mnemonic_file_path>\n        Show the keypair and address of accounts in a wallet\nbalance | b <mnemonic_file_path>\n        Get the balance of all accounts in a wallet\ncreate | c <mnemonic_file_path>\n        create a new wallet and save the mnemonic file to <mnemonic_file_path>\n```\n\n\nMore instructions can be found here [libra command help](https://raw.githubusercontent.com/yuan-xy/libra-client/master/docs/cli_help.html).\n\n\n## Client side Libra API for python programmer\n\n\n### Wallet\n\nYou can create a wallet using `WalletLibrary` class. A wallet is like your masterkey and you can create almost infinitely many Libra accounts from it. Note that LibraClient's mnemonic scheme is compatible with that of [Libra's CLI](https://github.com/libra/libra/tree/master/client/src), so you can import mnemonic between the two libraries.\n\n```py\nfrom libra_client import WalletLibrary\n\n# Create a new random wallet\nwallet = WalletLibrary.new()\n\n# Create a new wallet from mnemonic words\nwallet = WalletLibrary.new_from_mnemonic(mnemonic, child_count)\n\n# Recover wallet from a offical Libra CLI backup file\nwallet = WalletLibrary.recover(filename)\n```\n\n### Account\n\nAn `Account` can be created by calling `new_account` function on a wallet, each Account has an integer index in wallet, start from zero. An `Account` contains its `address`, `public_key`, and `private_key`.\n\n```py\n\nprint(wallet.child_count)\naccount1 = wallet.new_account()\nprint(wallet.child_count)\nprint(account1.address)\nprint(account1.public_key)\nprint(account1.private_key)\n\n```\n\n### Client\n\nA `Client` must be created in order to send protobuf message to a Libra node. You can create a client with the following code.\n\n```py\nfrom libra_client import Client\n\nclient1 = Client(\"testnet\")  # Default client connecting to the official testnet\nclient2 = Client.new('localhost', 8000, \"validator_file_path\")  # Client connecting to a local node\n```\n\n### Get Account Data of an Address\n\n``` plaintext\n# An account stores its data in a directory structure, for example:\n#   <Alice>/balance:   10\n#   <Alice>/a/b/mymap: {\"Bob\" => \"abcd\", \"Carol\" => \"efgh\"}\n#   <Alice>/a/myint:   20\n#   <Alice>/c/mylist:  [3, 5, 7, 9]\n#\n# If someone needs to query the map above and find out what value associated with \"Bob\" is,\n# `address` will be set to Alice and `path` will be set to \"/a/b/mymap/Bob\".\n#\n# On the other hand, if you want to query only <Alice>/a/*, `address` will be set to Alice and\n# `path` will be set to \"/a\" and use the `get_prefix()` method from statedb\n```\n\n#### Get Account State Blob of an Address\nYou can query an account's raw blob by using `get_account_blob` function on `Client`. The function returns a tuple of account state blob and latest ledger version. The blob is a binary LCS serialize format of account data. If an account has not been created yet (never received any funds), the blob will be empty.\n\n```py\nclient = Client(\"testnet\")\nblob, version = client.get_account_blob(address)\n```\n#### Get Account State of an Address\nIf the Account has been created, you can call `get_account_state` function which return a `AccountState` object with 'ordered_map' field; other wise, AccountError will be thrown.\n\n```py\nclient = Client(\"testnet\")\namap = client.get_account_state(address)\n```\n\n#### Get Account Resource of an Address\nIf you want to get account balance / sequence / authentication_key etc from account state, you can calling `get_account_resource` function, which will deserialize the account resource from account state map.\n\n```py\nclient = Client(\"testnet\")\nresource = client.get_account_resource(address)\nprint(resource.sequence_number)\nprint(resource.balance)\nprint(resource.authentication_key)\n```\n\n#### Get Balance of an Address\nIf you just want to get the balance of an address, simply call `get_balance` function.\n\n```py\nclient = Client(\"testnet\")\nbalance = client.get_balance(address)\n```\n\n#### Get Sequence Number of an Address\n\nIf you just want to get the sequence number of an address, simply call `get_sequence_number` function.\n\n```py\nclient = Client(\"testnet\")\nbalance = client.get_sequence_number(address)\n```\n\n### Mint Testnet Libra Token\n\nYou can mint testnet libra with `mint_with_faucet` function, which sends a HTTP POST request to [http://faucet.testnet.libra.org](http://faucet.testnet.libra.org).\n\n```py\nc = Client(\"testnet\")\nc.mint_coins_with_faucet_service(address, 12345, is_blocking=True)\n```\n\n### Creating a Transfer Transaction Script and Sending the Transaction\n\nNote that in the official testnet, the Libra node ONLY allows sending [the official transfer transaction script](https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/peer_to_peer_transfer.mvir). In the future, this libra can be extended to support more transaction scripts as well!\n\n```py\nwallet = WalletLibrary.recover('test.wallet')\na0 = wallet.accounts[0]\na1 = wallet.accounts[1]\nret = c.transfer_coin(a0, a1.address, 1234, is_blocking=True)\nprint(ret.ac_status.code)\n```\nWhen is_blocking param is False, the call will return as the transaction is submit to the validator node. When is_blocking param is True, the call will not return until the tranfer is actually executed or transaction waiting timeout.\n\n\n### Query Transactions\n\nGet transaction by version:\n\n```py\nc = Client(\"testnet\")\nsigned_txn = c.get_transaction(1)\nprint(signed_txn.raw_txn)\n```\nabove code get transaction no.1, the return type is a SignedTransaction.\n\n```py\nclass SignedTransaction(Struct):\n    _fields = [\n        ('raw_txn', RawTransaction),\n        ('public_key', [Uint8, ED25519_PUBLIC_KEY_LENGTH]),\n        ('signature', [Uint8, ED25519_SIGNATURE_LENGTH])\n    ]\n```\n\nTo get a list of transactions:\n\n```py\nc = Client(\"testnet\")\nc.get_transactions(start_version, limit)\n```\n\n### Query Events\nTo get the latest 2 events send by an address:\n\n```py\nc = Client(\"testnet\")\nevents = c.get_latest_events_sent(address, 2)\n```\n\nTo get the latest 2 events received by an address:\n\n```py\nc = Client(\"testnet\")\nevents = c.get_latest_events_received(address, 2)\n```\n\nQuery events sent from an address, start from start_sequence_number(count begin with 0), get limit number of events, direction is ascending/descending:\n\n```py\nget_events_sent(self, address, start_sequence_number, ascending=True, limit=1)\n```\n\nQuery events received from an address, start from start_sequence_number(count begin with 0), get limit number of events, direction is ascending/descending:\n\n```py\nget_events_received(self, address, start_sequence_number, ascending=True, limit=1)\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yuan-xy/libra-client-grpc.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libra-client-grpc",
    "package_url": "https://pypi.org/project/libra-client-grpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/libra-client-grpc/",
    "project_urls": {
      "Homepage": "https://github.com/yuan-xy/libra-client-grpc.git"
    },
    "release_url": "https://pypi.org/project/libra-client-grpc/1.0.0/",
    "requires_dist": [
      "PyNaCl",
      "canoser (==0.8.2)",
      "grpcio",
      "libra-core (==0.8.7)",
      "mnemonic",
      "more-itertools",
      "protobuf",
      "requests"
    ],
    "requires_python": ">=3.7",
    "summary": "A CLI inteface Libra client and Python API for Libra blockchain.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7420506,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbd216bc24b52fb1b1bc590bcd73b1565b98fc7ee30c8afc1ee828eedecd4614",
          "md5": "0497d6bca2358bb7578145bb5c356f28",
          "sha256": "a5fe02d8515654646b570a8fb4428ff7b8dfe33e310070dc973210d751706be4"
        },
        "downloads": -1,
        "filename": "libra_client_grpc-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0497d6bca2358bb7578145bb5c356f28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 32025,
        "upload_time": "2020-06-08T02:33:37",
        "upload_time_iso_8601": "2020-06-08T02:33:37.505690Z",
        "url": "https://files.pythonhosted.org/packages/cb/d2/16bc24b52fb1b1bc590bcd73b1565b98fc7ee30c8afc1ee828eedecd4614/libra_client_grpc-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2bc43513659a69c17428f65eefac7d59e2f0d775dccc0e2b5f9666d35e81b13",
          "md5": "f0888bc018eefebe485c9434952ff943",
          "sha256": "305e08a9324e48a4c6fe15be70442c7aa0902e8a812060eb3297246128de3d01"
        },
        "downloads": -1,
        "filename": "libra-client-grpc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f0888bc018eefebe485c9434952ff943",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 37550,
        "upload_time": "2020-06-08T02:33:45",
        "upload_time_iso_8601": "2020-06-08T02:33:45.064044Z",
        "url": "https://files.pythonhosted.org/packages/a2/bc/43513659a69c17428f65eefac7d59e2f0d775dccc0e2b5f9666d35e81b13/libra-client-grpc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbd216bc24b52fb1b1bc590bcd73b1565b98fc7ee30c8afc1ee828eedecd4614",
        "md5": "0497d6bca2358bb7578145bb5c356f28",
        "sha256": "a5fe02d8515654646b570a8fb4428ff7b8dfe33e310070dc973210d751706be4"
      },
      "downloads": -1,
      "filename": "libra_client_grpc-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0497d6bca2358bb7578145bb5c356f28",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 32025,
      "upload_time": "2020-06-08T02:33:37",
      "upload_time_iso_8601": "2020-06-08T02:33:37.505690Z",
      "url": "https://files.pythonhosted.org/packages/cb/d2/16bc24b52fb1b1bc590bcd73b1565b98fc7ee30c8afc1ee828eedecd4614/libra_client_grpc-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2bc43513659a69c17428f65eefac7d59e2f0d775dccc0e2b5f9666d35e81b13",
        "md5": "f0888bc018eefebe485c9434952ff943",
        "sha256": "305e08a9324e48a4c6fe15be70442c7aa0902e8a812060eb3297246128de3d01"
      },
      "downloads": -1,
      "filename": "libra-client-grpc-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f0888bc018eefebe485c9434952ff943",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 37550,
      "upload_time": "2020-06-08T02:33:45",
      "upload_time_iso_8601": "2020-06-08T02:33:45.064044Z",
      "url": "https://files.pythonhosted.org/packages/a2/bc/43513659a69c17428f65eefac7d59e2f0d775dccc0e2b5f9666d35e81b13/libra-client-grpc-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}