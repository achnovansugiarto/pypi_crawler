{
  "info": {
    "author": "Feite Zhou",
    "author_email": "jupiterzhou@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "CEEMDAN_LSTM\r\n===\r\nGitHub: https://github.com/FateMurphy/CEEMDAN_LSTM  \r\nFuture work: sklearn_predictor\r\n\r\n## Background \r\nCEEMDAN_LSTM is a Python module for decomposition-integration forecasting models based on EMD methods and LSTM. It aims at helping beginners quickly make a decomposition-integration forecasting by `CEEMDAN`, Complete Ensemble Empirical Mode Decomposition with Adaptive Noise [(Torres et al. 2011)](https://ieeexplore.ieee.org/abstract/document/5947265/), and `LSTM`, Long Short-Term Memory recurrent neural network [(Hochreiter and Schmidhuber, 1997)](https://ieeexplore.ieee.org/abstract/document/6795963). If you use or refer to the content of this module, please cite paper: [(F. Zhou, Z. Huang, C. Zhang,\r\nCarbon price forecasting based on CEEMDAN and LSTM, Applied Energy, 2022, Volume 311, 118601, ISSN 0306-2619.)](https://doi.org/10.1016/j.apenergy.2022.118601.)\r\n### Flowchart\r\n![](https://github.com/FateMurphy/CEEMDAN_LSTM/blob/main/figure/Hybrid%20forecasting%20method.svg)\r\n#### Note, as it decomposes the entire series first, there is some look-ahead bias.\r\n\r\n## Install\r\n### (1) PyPi (recommended)\r\nThe quickest way to install package is through pip.\r\n```python\r\npip install CEEMDAN_LSTM\r\n```\r\n### (2) From package\r\nDownload the package `CEEMDAN_LSTM-1.2a0.tar.gz` by click `Code` -> `Download ZIP`. After unzipping, move the package where you like.\r\n```python\r\npip install .(your file path)/CEEMDAN_LSTM-1.2a0.tar.gz\r\n```\r\n### (3) From source\r\nIf you want to modify the code, you should download the code and build package yourself. The source is publicaly available and hosted on GitHub: https://github.com/FateMurphy/CEEMDAN_LSTM. To download the code you can either go to the source code page and click `Code` -> `Download ZIP`, or use git command line.  \r\nAfter modify the code, you can install the modified package by using command line:\r\n```python\r\npython setup.py install\r\n```\r\nOr, you can link to the path for the convenient modification, eg. `sys.path.append(.your file path/)`, and then import.\r\n\r\n## Import and quickly predict\r\n```python\r\nimport CEEMDAN_LSTM as cl\r\ncl.quick_keras_predict(data=None) # default dataset: sse_index.csv\r\n```\r\n#### Load dataset\r\n```python\r\ndata = cl.load_dataset()\r\n# data = pd.read_csv(your_file_path + its_name + '.csv', header=0, index_col=['date'], parse_dates=['date'])\r\n```\r\n\r\n## Help and example\r\nYou can use the code to call for a help. You can copy the code from the output of `cl.show_keras_example()` to run forecasting and help you learn more about the code.\r\n```python\r\ncl.help()\r\ncl.show_keras_example()\r\ncl.show_keras_example_model()\r\ncl.details_keras_predict(data=None)\r\n```\r\n\r\n## Start to Forecast\r\nTake Class: keras_predictor() as an example.\r\n### Brief summary and forecast\r\n```python\r\ndata = cl.load_dataset()\r\nseries = data['close'] # choose a DataFrame column \r\ncl.statis_tests(series)\r\nkr = cl.keras_predictor()\r\ndf_result = kr.hybrid_keras_predict(data=series, show=True, plot=True, save=True)\r\n```\r\n\r\n### 0. Statistical tests (not necessary)\r\nThe code will ouput the reuslt of ADF test, Ljung-Box Test, Jarque-Bera Test, and plot ACF and PACF figures to evaluate stationarity, autocorrelation, and normality.\r\n```python\r\ncl.statis_tests(series=None)\r\n```\r\n\r\n### 1.Declare the parameters\r\nNote, when declare the PATH, folders will be created automatically, inculding the figure and log folders.\r\n```python\r\nkr = cl.keras_predictor(PATH=None, FORECAST_HORIZONS=30, FORECAST_LENGTH=30, KERAS_MODEL='GRU', \r\n                        DECOM_MODE='CEEMDAN', INTE_LIST='auto', REDECOM_LIST={'co-imf0':'ovmd'},\r\n                        NEXT_DAY=False, DAY_AHEAD=1, NOR_METHOD='minmax', FIT_METHOD='add', \r\n                        USE_TPU=False , **kwargs))\r\n```\r\n\r\n| HyperParameters | Description | \r\n| :-----| :----- | \r\n|PATH               |the saving path of figures and logs, eg. 'D:/CEEMDAN_LSTM/'|\r\n|FORECAST_HORIZONS  |the length of each input row(x_train.shape), which means the number of previous days related to today, also called Timestep, Forecast_horizons, or Sliding_windows_length in some papers|\r\n|FORECAST_LENGTH    |the length of the days to forecast (test set)|\r\n|KERAS_MODEL        |the Keras model, eg. 'GRU', 'LSTM', 'DNN', 'BPNN', 'CUDNNLSTM', 'CUDNNGRU', model = Sequential(), or load_model.|\r\n|DECOM_MODE         |the decomposition method, eg.'EMD', 'VMD', 'CEEMDAN'|\r\n|INTE_LIST          |the integration list, eg. pd.Dataframe, (int) 3, (str) '233', (list) [0,0,1,1,1,2,2,2], ...|\r\n|REDECOM_LIST       |the re-decomposition list, eg. '{'co-imf0':'vmd', 'co-imf1':'emd'}', pd.DataFrame|\r\n|NEXT_DAY           |set True to only predict next out-of-sample value|\r\n|DAY_AHEAD          |define to forecast n days' ahead, eg. 0, 1, 2 (default int 1)|\r\n|NOR_METHOD         |the normalizing method, eg. 'minmax'-MinMaxScaler, 'std'-StandardScaler, otherwise without normalization|\r\n|FIT_METHOD         |the fitting method to stablize the forecasting result (not necessarily useful), eg. 'add', 'ensemble' (there some error for ensembleFIT_METHOD, please use add method as default.)|\r\n|USE_TPU            |change Keras model to TPU model (for google Colab)|\r\n\r\n| Keras Parameters | Description (more details refer to https://keras.io) | \r\n| :-----| :----- | \r\n|epochs             |training epochs/iterations, eg. 30-1000|\r\n|dropout            |dropout rate of 3 dropout layers, eg. 0.2-0.5|\r\n|units              |the units of network layers, which (3 layers) will set to 4*units, 2*units, units, eg. 4-32|\r\n|activation         |activation function, all layers will be the same, eg. 'tanh', 'relu'|\r\n|batch_size         |training batch_size for parallel computing, eg. 4-128|\r\n|shuffle            |whether randomly disorder the training set during training process, eg. True, False|\r\n|verbose            |report of training process, eg. 0 not displayed, 1 detailed, 2 rough|\r\n|valid_split        |proportion of validation set during training process, eg. 0.1-0.2|\r\n|opt                |network optimizer, eg. 'adam', 'sgd'|\r\n|opt_lr             |optimizer learning rate, eg. 0.001-0.1|\r\n|opt_loss           |optimizer loss, eg. 'mse','mae','mape','hinge', refer to https://keras.io/zh/losses/.|\r\n|opt_patience       |optimizer patience of adaptive learning rate, eg. 10-100|\r\n|stop_patience      |early stop patience, eg. 10-100|\r\n\r\n### 2. Forecast\r\nYou can try the following forecasting methods. Note, `kr.` is the class defined in step 1, necessary for the code.\r\n```python\r\ndf_result = kr.single_keras_predict(data, show_data=True, show_model=True, plot_result=True, save_result=True)\r\n# df_result = kr.ensemble_keras_predict(data, show_data=True, show_model=True, plot_result=True, save_result=True)\r\n# df_result = kr.respective_keras_predict(data, show_data=True, show_model=True, plot_result=True, save_result=True)\r\n# df_result = kr.hybrid_keras_predict(data, show_data=True, show_model=True, plot_result=True, save_result=True)\r\n# df_result = kr.multiple_predict(data, run_times=10, predict_method='single', save_each_result=False)\r\n```\r\n| Forecast Method | Description | \r\n| :-----| :----- | \r\n|Single Method      |Use Keras model to directly forecast with vector input|\r\n|Ensemble Method    |Use decomposition-integration Keras model to directly forecast with matrix input|\r\n|Respective Method  |Use decomposition-integration Keras model to respectively forecast each IMFs with vector input|\r\n|Hybrid Method      |Use the ensemble method to forecast high-frequency IMF and the respective method for other IMFs.|\r\n|Multiple Method    |Multiple run of above method|\r\n|Rolling Method     |Rolling run of above method to avoid the look-ahead bias, but take a long long time|\r\n\r\n### 3. Validate \r\n#### (1) Plot heatmap\r\nYou need to install `seaborn` first, and the input should be 2D-array.\r\n```python\r\ncl.plot_heatmap(data, corr_method='pearson', fig_path=None)\r\n```\r\n#### (2) Diebold-Mariano-Test (DM test)\r\nDm test will output the DM test statistics and its p-value. You can refer to https://github.com/johntwk/Diebold-Mariano-Test.\r\n```python\r\nrt = cl.dm_test(actual_lst, pred1_lst, pred2_lst, h=1, crit=\"MSE\", power=2)\r\n```\r\n\r\n### 4. Next-day Forecast\r\nSet `NEXT_DAY=True`.\r\n```python\r\nkr = cl.keras_predictor(NEXT_DAY=True)\r\ndf_result = kr.hybrid_keras_predict(data, show=True, plotTrue, save=True)\r\n# df_result = kr.rolling_keras_predict(data, predict_method='single')\r\n```\r\n## Discussion\r\n### 1. Look-ahead bias\r\nAs the predictor will decompose the entire series first before splitting the training and test set, there is a look-ahead bias. It is still an issue about how to avoid the look-ahead bias.\r\n### 2. VMD decompose\r\nThe vmdpy module can only decompose the even-numbered length time series. When forecasting an odd-numbered length one, this module will delete the oldest data point. It is still an issue how to modify VMD decompose. Moreover, selecting the K parameters is important for the VMD method, and hence, I will add some methods to choose a suitable K, such as OVMD, REI, SampEn, and so on.\r\n### 3. Rolling forecasting \r\nRolling forecasting costs a lot of time. Like a 30-forecast-length prediction, it will run 30 times cl.hybrid_keras_predict(), so I am not sure if it is really effective or not.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/FateMurphy/CEEMDAN_LSTM",
    "keywords": "CEEMDAN,VMD,LSTM,decomposition,forecasting",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CEEMDAN-LSTM",
    "package_url": "https://pypi.org/project/CEEMDAN-LSTM/",
    "platform": null,
    "project_url": "https://pypi.org/project/CEEMDAN-LSTM/",
    "project_urls": {
      "Homepage": "http://github.com/FateMurphy/CEEMDAN_LSTM"
    },
    "release_url": "https://pypi.org/project/CEEMDAN-LSTM/1.2b0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "CEEMDAN_LSTM is a Python project for decomposition-integration forecasting models based on EMD methods and LSTM.",
    "version": "1.2b0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15809582,
  "releases": {
    "1.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "267a8ede31c1f15c4f8eb14d8e2edff5acb0154e34e6a9296149cdbf0c888949",
          "md5": "2e98ad3c032a4dfdd031c51b0ef25eb3",
          "sha256": "eb8a8087388a165e6cb38a55107ee0a1a8c10dab4ca1ffa5e7cf2c54074126a3"
        },
        "downloads": -1,
        "filename": "CEEMDAN_LSTM-1.2a0.tar.gz",
        "has_sig": false,
        "md5_digest": "2e98ad3c032a4dfdd031c51b0ef25eb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 301911,
        "upload_time": "2022-09-26T07:35:18",
        "upload_time_iso_8601": "2022-09-26T07:35:18.911470Z",
        "url": "https://files.pythonhosted.org/packages/26/7a/8ede31c1f15c4f8eb14d8e2edff5acb0154e34e6a9296149cdbf0c888949/CEEMDAN_LSTM-1.2a0.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.2a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e56ce8aaee050dcdff16ce6a35ded3cf8fd995a92c89f1c62ba31183c0ba60d0",
          "md5": "df08285ed0896337dffec357f85fafea",
          "sha256": "f7ef013d682ad94b20eb19da3fe5285b91ac1a36014fd843ffae692786e46f8f"
        },
        "downloads": -1,
        "filename": "CEEMDAN_LSTM-1.2a2.tar.gz",
        "has_sig": false,
        "md5_digest": "df08285ed0896337dffec357f85fafea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 302623,
        "upload_time": "2022-09-27T13:54:38",
        "upload_time_iso_8601": "2022-09-27T13:54:38.991068Z",
        "url": "https://files.pythonhosted.org/packages/e5/6c/e8aaee050dcdff16ce6a35ded3cf8fd995a92c89f1c62ba31183c0ba60d0/CEEMDAN_LSTM-1.2a2.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.2a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b2ec4a82b0535ccc75679522d6bb5c869d4fc32787e4185cadb9fa6d7906b40",
          "md5": "17a5731662ba28a88a148b23903995da",
          "sha256": "10847d5d8c376937b0c6c4c83119eb8f3559a777c7df0dc1d3b5f2becd054d0d"
        },
        "downloads": -1,
        "filename": "CEEMDAN_LSTM-1.2a3.tar.gz",
        "has_sig": false,
        "md5_digest": "17a5731662ba28a88a148b23903995da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 303357,
        "upload_time": "2022-10-04T15:12:04",
        "upload_time_iso_8601": "2022-10-04T15:12:04.318925Z",
        "url": "https://files.pythonhosted.org/packages/4b/2e/c4a82b0535ccc75679522d6bb5c869d4fc32787e4185cadb9fa6d7906b40/CEEMDAN_LSTM-1.2a3.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.2a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2936f7a01dbeec09219c9ff88c1f9c5b3b8815f8d7cf41d5d2aba628b4a212da",
          "md5": "d90df19c9e4f46386193974f6c6ff526",
          "sha256": "804ab0dfd1fb25e951b9805f4f7396ed1ce4bef9f8431452919c1141539eb854"
        },
        "downloads": -1,
        "filename": "CEEMDAN_LSTM-1.2a4.tar.gz",
        "has_sig": false,
        "md5_digest": "d90df19c9e4f46386193974f6c6ff526",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 304846,
        "upload_time": "2022-10-11T04:59:41",
        "upload_time_iso_8601": "2022-10-11T04:59:41.263738Z",
        "url": "https://files.pythonhosted.org/packages/29/36/f7a01dbeec09219c9ff88c1f9c5b3b8815f8d7cf41d5d2aba628b4a212da/CEEMDAN_LSTM-1.2a4.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.2b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5b779765d456bd4b8b9ce0825d1504ef2918ef1f1c017837237658e9492f9f3",
          "md5": "51aa833b409f673e22b5ae05e5148fd0",
          "sha256": "fcfe707252701f3687484cf478d2bfbbbd0289da23eb08d2200d8aed981ded81"
        },
        "downloads": -1,
        "filename": "CEEMDAN_LSTM-1.2b0.tar.gz",
        "has_sig": false,
        "md5_digest": "51aa833b409f673e22b5ae05e5148fd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 305575,
        "upload_time": "2022-11-18T02:11:23",
        "upload_time_iso_8601": "2022-11-18T02:11:23.977515Z",
        "url": "https://files.pythonhosted.org/packages/c5/b7/79765d456bd4b8b9ce0825d1504ef2918ef1f1c017837237658e9492f9f3/CEEMDAN_LSTM-1.2b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5b779765d456bd4b8b9ce0825d1504ef2918ef1f1c017837237658e9492f9f3",
        "md5": "51aa833b409f673e22b5ae05e5148fd0",
        "sha256": "fcfe707252701f3687484cf478d2bfbbbd0289da23eb08d2200d8aed981ded81"
      },
      "downloads": -1,
      "filename": "CEEMDAN_LSTM-1.2b0.tar.gz",
      "has_sig": false,
      "md5_digest": "51aa833b409f673e22b5ae05e5148fd0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 305575,
      "upload_time": "2022-11-18T02:11:23",
      "upload_time_iso_8601": "2022-11-18T02:11:23.977515Z",
      "url": "https://files.pythonhosted.org/packages/c5/b7/79765d456bd4b8b9ce0825d1504ef2918ef1f1c017837237658e9492f9f3/CEEMDAN_LSTM-1.2b0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}