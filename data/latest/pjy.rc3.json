{
  "info": {
    "author": "Hg",
    "author_email": "dev@indigo.re",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: Public Domain",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Text Processing :: Filters",
      "Topic :: Utilities"
    ],
    "description": "pjy - JSON Python processor\n===========================\n\n``pjy`` is a command-line tool to process JSON data and execute queries on it.\nIt is a bit like `jq <https://stedolan.github.io/jq/>`_ but with a Python syntax for queries.\n\nInstall\n+++++++\n\nFrom `PyPI <https://pypi.org/project/pjy/>`_::\n\n    pip install pjy\n\nUsage\n+++++\n\n    pjy [EXPR] [FILES]\n\n``pjy`` will read JSON data from ``FILES`` and print the evaluation result of the Python expression ``EXPR``.\n\nIf ``FILES`` is missing or is \"``-``\", pjy will use stdin.\n\nThe simplest expression to use, which outputs the input unchanged is \"``d``\" (for data).\n\nIt's possible to use multiple input files.\n\nExamples\n++++++++\n\nIn ``pjy``, expressions are also called \"filters\", as in ``jq``.\n\nJust pretty-print\n-----------------\n\n``d`` (short for \"data\") is the most basic filter, it represents the whole input::\n\n    pjy 'd'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nPrints::\n\n    {\n      \"foo\": \"bar\",\n      \"baz\": [\n        1,\n        2,\n        3\n      ]\n    }\n\nSelect a dict key\n-----------------\n\nThe filters are Python expressions, hence we can select a dict key::\n\n    pjy 'd[\"baz\"]'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nAlternatively, in ``pjy``, dicts keys are also attributes::\n\n    pjy 'd.baz'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nBoth filters will print::\n\n    [\n      1,\n      2,\n      3\n    ]\n\nIn case a key has a reserved name, like ``import`` (keyword) or ``keys`` (dict method), simply use the bracket form.\n\nNon-existent keys\n-----------------\n\nNon-existent keys::\n\n    pjy 'd.baz'\n        {\"foo\":\"bar\"}\n\nwill return ``None``::\n\n    null\n\nSame for out-of-bounds indices::\n\n    pjy 'd[3]'\n        [1, 2]\n\nDo a basic operation\n--------------------\n\nIt's possible to use everything that a Python expression can contain::\n\n    pjy '[i + 1 for i in d[\"baz\"]]'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nPrints::\n\n    [\n      2,\n      3,\n      4\n    ]\n\nLambda-placeholder\n------------------\n\nA special identifier, ``_`` can be used to create lambdas. This identifier will absorb most operations done to it and return a lambda applying them.\nThen, the returned lambda can be applied::\n\n    pjy 'map(_ + 1, d.baz)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nIs equivalent to::\n\n    pjy 'map((lambda x: x + 1), d.baz)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nWhich will print::\n\n    [\n      2,\n      3,\n      4\n    ]\n\nThe lambda-placeholder will absorb chained operations::\n\n    pjy 'map((_ + 1) * 2, d.baz)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\n\nWill result in::\n\n    [\n      4,\n      6,\n      8\n    ]\n\nAnd::\n\n    pjy 'map(_[1:3] * 2, d)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nWill return::\n\n    {\n      \"foo\": \"arar\",\n      \"baz\": [\n        2,\n        3,\n        2,\n        3\n      ]\n    }\n\nPipe-like iteration\n-------------------\n\nThe pipe (``|``) can be used to iterate on a list, it accepts a function as right operand::\n\n    pjy 'd.baz | _ + 1'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nWhich prints::\n\n    [\n      2,\n      3,\n      4\n    ]\n\nIt also operates on a dict's values, and returns a dict::\n\n    pjy 'd | (lambda x: repr(x))'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nThe values are replaced by the right operand value, the keys are unchanged::\n\n    {\n      \"foo\": \"'bar'\",\n      \"baz\": \"[1, 2, 3]\"\n    }\n\nAmpersand for filtering\n-----------------------\n\nSimilar to the pipe, the ampersand (``&``) is used on a list and a function, but its purpose is to filter::\n\n    pjy 'd & (_ % 2 == 0)'\n        [0, 1, 2, 3]\n\noutputs::\n\n    [\n      0,\n      2\n    ]\n\nWhich is equivalent to running::\n\n    pjy 'filter(_ % 2 == 0, d)'\n        [0, 1, 2, 3]\n\nLike the pipe, it works on a dict, and the filter is applied on the dict values.\n\nPartial placeholder\n-------------------\n\nIt's not possible to call a function on a placeholder, for example, ``len(_)`` will not work.\nHowever, it's possible to use the ``partial`` helper to prepare the function call::\n\n    pjy 'd | partial(len, _)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nPrints::\n\n    {\n      \"foo\": 3,\n      \"baz\": 3\n    }\n\n``partial`` ressembles the ``functools.partial`` function: it returns a function wrapping the function passed as first argument.\nThe returned function will call the original function with the fixed arguments passed.\nThe difference is that lambda-placeholders can be passed, and they will be replaced by the wrapper's argument.\n\n``p`` is a short alias for the ``partial`` function which can be used in pjy expressions.\n\nImports\n-------\n\nIt's possible to import modules with the ``imp`` function::\n\n   pjy 'filter(p(imp(\"fnmatch\").fnmatch, _, \"f*\"), d.keys())'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nWill print::\n\n    [\n      \"foo\"\n    ]\n\nThe ``math`` and ``re`` modules are already imported and available directly without having to call ``imp``.\n\nMultiple inputs\n---------------\n\nIn ``pjy``, an ``inputs`` variable exists, which is a list containing the JSON data of each input file passed on the command line.\nThe ``d`` variable is simply an alias to ``inputs[0]``.\n\nFor example::\n\n    pjy 'filter(_[0] != _[1], zip(inputs[0], inputs[1]))' before.json after.json\n\nwill read 2 files ``before.json`` and ``after.json``, which consist in a list of objects, and ``pjy`` will compare each zipped-pair of objects together.\nThen it will print the list of differing pairs.\n\nOptions\n+++++++\n\nInput options\n-------------\n\n\t``--null-input``\n\nDon't read any input, act as if the input was only ``null``.\n\n\t``--arg VAR VALUE``\n\nInject a variable named VAR with a VALUE in the expression.\n\nOutput options\n--------------\n\n\t``--monochrome-output``\n\nForce no colors even if output is a TTY.\n\n\t``--ascii-output``\n\nWhen outputting non-ASCII strings, use ``\\uXXXX`` notation instead of directly Unicode characters by default.\n\n\t``--tab``\n\nIndent output with tabs instead of 2 spaces.\n\n\t``--indent N``\n\nIndent output with N spaces instead of 2 spaces.\n\n\t``--compact-output``\n\nDon't indent output and don't add extra whitespace between key/values and list elements.\n\n\nSecurity\n++++++++\n\n``pjy`` by itself does not write files (except stdout/stderr) or sockets, or run external commands.\nHowever, ``pjy`` runs the given expressions passed as argument, in the Python interpreter, without a sandbox.\nHence, do NOT pass dangerous or untrusted Python expressions to ``pjy``.\n\nDependencies\n++++++++++++\n\n``pjy`` is written in Python 3. Its ``setup.py`` requires ``setuptools``.\n\nIf ``pygments`` is installed, ``pjy``'s output will be colorized, but it's entirely optional.\n\nVersion and license\n+++++++++++++++++++\n\n.. $version\n\n``pjy`` is at version 0.12.0, it uses `semantic versioning <http://semver.org/>`_.\nIt is licensed under the WTFPLv2, see COPYING.WTFPL for license text.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/hydrargyrum/pjy",
    "keywords": "json,processor,query,filter,jq",
    "license": "WTFPLv2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pjy",
    "package_url": "https://pypi.org/project/pjy/",
    "platform": "",
    "project_url": "https://pypi.org/project/pjy/",
    "project_urls": {
      "Homepage": "https://gitlab.com/hydrargyrum/pjy"
    },
    "release_url": "https://pypi.org/project/pjy/0.12.0/",
    "requires_dist": [
      "pygments ; extra == 'pygments'"
    ],
    "requires_python": ">=3",
    "summary": "pjy - command-line JSON processor",
    "version": "0.12.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10299164,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "035a9af38abaad187ac4e37d4f83e9d73a0ae78b71a047b5ea6b1d04fd14fdc9",
          "md5": "826e4ae01fa500653f242e16bbc762a9",
          "sha256": "b47c086c2b289da70a1f77b0a7fd657673f7612a1adf00f0b27177576fd8c16b"
        },
        "downloads": -1,
        "filename": "pjy-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "826e4ae01fa500653f242e16bbc762a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 10608,
        "upload_time": "2017-09-10T13:47:13",
        "upload_time_iso_8601": "2017-09-10T13:47:13.460356Z",
        "url": "https://files.pythonhosted.org/packages/03/5a/9af38abaad187ac4e37d4f83e9d73a0ae78b71a047b5ea6b1d04fd14fdc9/pjy-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da222825523c378be1b5dfb1367010afa7627cc99f5b1b6284e36af79f3e77d7",
          "md5": "ea16b5c7c8465eae3dede20e08fc4edc",
          "sha256": "9fc78ef8c9f2e20f650c2abc60f94e0303e9b4746f80f8d224ae1a9ed36e1a04"
        },
        "downloads": -1,
        "filename": "pjy-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea16b5c7c8465eae3dede20e08fc4edc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5749,
        "upload_time": "2017-09-10T13:47:16",
        "upload_time_iso_8601": "2017-09-10T13:47:16.406984Z",
        "url": "https://files.pythonhosted.org/packages/da/22/2825523c378be1b5dfb1367010afa7627cc99f5b1b6284e36af79f3e77d7/pjy-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52017e771b8a8f2add8d9cb270a7555e57c33835e70d71b8d7d8d8453efc31d8",
          "md5": "aae49955573c5bc6d0099242408a42c3",
          "sha256": "de72d551d964865c6d694868cf40296e519e5b0e8fe6ec690652f208c8d02c05"
        },
        "downloads": -1,
        "filename": "pjy-0.11.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aae49955573c5bc6d0099242408a42c3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3",
        "size": 9395,
        "upload_time": "2020-09-20T16:27:38",
        "upload_time_iso_8601": "2020-09-20T16:27:38.407785Z",
        "url": "https://files.pythonhosted.org/packages/52/01/7e771b8a8f2add8d9cb270a7555e57c33835e70d71b8d7d8d8453efc31d8/pjy-0.11.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52f1a0ea8ec2ff3f6a2450d07cc6578734afbe96b131d9f07c95c26eca4baf1c",
          "md5": "9144d47557f84dec513ea0040e578dd5",
          "sha256": "312bb9d42e0357507d60e98a573c825c029ff46076ba2beef5ec629b4aa1aa52"
        },
        "downloads": -1,
        "filename": "pjy-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9144d47557f84dec513ea0040e578dd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7090,
        "upload_time": "2020-09-20T16:27:39",
        "upload_time_iso_8601": "2020-09-20T16:27:39.910784Z",
        "url": "https://files.pythonhosted.org/packages/52/f1/a0ea8ec2ff3f6a2450d07cc6578734afbe96b131d9f07c95c26eca4baf1c/pjy-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bddb12c057099e3d449e4b4429f3d59b64642994ca8618e61142ab62cc825a93",
          "md5": "88b50f0e79c565bab43c39b0c91f839a",
          "sha256": "2c2908ea371f8b2e159b2314f8b0340d284310a34ceb4a4d2d553eea05da381b"
        },
        "downloads": -1,
        "filename": "pjy-0.12.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88b50f0e79c565bab43c39b0c91f839a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3",
        "size": 10706,
        "upload_time": "2021-05-09T08:29:36",
        "upload_time_iso_8601": "2021-05-09T08:29:36.193533Z",
        "url": "https://files.pythonhosted.org/packages/bd/db/12c057099e3d449e4b4429f3d59b64642994ca8618e61142ab62cc825a93/pjy-0.12.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e29751d8de4768feaffe0d7dba4edc2617956c972a4c92c9e08ba03bac171497",
          "md5": "8c0366204f4199748f228f3ae7c514e4",
          "sha256": "02eb147c959f96a0cd2ceaa4dcb6fd5f066fbdf5cabbf7cbb468b949d6b91c23"
        },
        "downloads": -1,
        "filename": "pjy-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c0366204f4199748f228f3ae7c514e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 9135,
        "upload_time": "2021-05-09T08:29:37",
        "upload_time_iso_8601": "2021-05-09T08:29:37.451928Z",
        "url": "https://files.pythonhosted.org/packages/e2/97/51d8de4768feaffe0d7dba4edc2617956c972a4c92c9e08ba03bac171497/pjy-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bddb12c057099e3d449e4b4429f3d59b64642994ca8618e61142ab62cc825a93",
        "md5": "88b50f0e79c565bab43c39b0c91f839a",
        "sha256": "2c2908ea371f8b2e159b2314f8b0340d284310a34ceb4a4d2d553eea05da381b"
      },
      "downloads": -1,
      "filename": "pjy-0.12.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "88b50f0e79c565bab43c39b0c91f839a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3",
      "size": 10706,
      "upload_time": "2021-05-09T08:29:36",
      "upload_time_iso_8601": "2021-05-09T08:29:36.193533Z",
      "url": "https://files.pythonhosted.org/packages/bd/db/12c057099e3d449e4b4429f3d59b64642994ca8618e61142ab62cc825a93/pjy-0.12.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e29751d8de4768feaffe0d7dba4edc2617956c972a4c92c9e08ba03bac171497",
        "md5": "8c0366204f4199748f228f3ae7c514e4",
        "sha256": "02eb147c959f96a0cd2ceaa4dcb6fd5f066fbdf5cabbf7cbb468b949d6b91c23"
      },
      "downloads": -1,
      "filename": "pjy-0.12.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c0366204f4199748f228f3ae7c514e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 9135,
      "upload_time": "2021-05-09T08:29:37",
      "upload_time_iso_8601": "2021-05-09T08:29:37.451928Z",
      "url": "https://files.pythonhosted.org/packages/e2/97/51d8de4768feaffe0d7dba4edc2617956c972a4c92c9e08ba03bac171497/pjy-0.12.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}