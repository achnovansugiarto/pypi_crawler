{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![pylint](https://github.com/python-hydro/pyro2/actions/workflows/pylint.yml/badge.svg)](https://github.com/python-hydro/pyro2/actions/workflows/pylint.yml)\n[![flake8](https://github.com/python-hydro/pyro2/actions/workflows/flake8.yml/badge.svg)](https://github.com/python-hydro/pyro2/actions/workflows/flake8.yml)\n[![pytest-all](https://github.com/python-hydro/pyro2/actions/workflows/pytest.yml/badge.svg)](https://github.com/python-hydro/pyro2/actions/workflows/pytest.yml)\n\n[![Documentation Status](https://readthedocs.org/projects/pyro2/badge/?version=latest)](https://pyro2.readthedocs.io/en/latest/?badge=latest)\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/python-hydro/pyro2/main?filepath=examples%2Fexamples.ipynb)\n\n[![JOSS status](http://joss.theoj.org/papers/6d8b2f94e6d08a7b5d65e98a948dcad7/status.svg)](http://joss.theoj.org/papers/6d8b2f94e6d08a7b5d65e98a948dcad7)\n[![DOI](https://zenodo.org/badge/20570861.svg)](https://zenodo.org/badge/latestdoi/20570861)\n\n\n\n\n![pyro logo](www/logo.gif)\n\n*A simple python-based tutorial on computational methods for hydrodynamics*\n\npyro is a computational hydrodynamics code that presents\ntwo-dimensional solvers for advection, compressible hydrodynamics,\ndiffusion, incompressible hydrodynamics, and multigrid, all in a\nfinite-volume framework.  The code is mainly written in python and is\ndesigned with simplicity in mind.  The algorithms are written to\nencourage experimentation and allow for self-learning of these code\nmethods.\n\nThe latest version of pyro is always available at:\n\nhttps://github.com/python-hydro/pyro2\n\nThe project webpage, where you'll find documentation, plots, notes,\netc. is here:\n\nhttps://pyro2.readthedocs.io/\n\n\n## Table of Contents\n\n * [Getting started](#getting-started)\n * [Core Data Structures](#core-data-structures)\n * [Solvers](#solvers)\n * [Working with data](#working-with-data)\n * [Understanding the algorithms](#understanding-the-algorithms)\n * [Regression and unit testing](#regression-and-unit-testing)\n * [Acknowledgements](#acknowledgements)\n * [Getting help](#getting-help)\n\n\n## Getting started\n\n  - By default, we assume python 3.8 or later.\n\n  - We require `numpy`, `numba`, `matplotlib`, and `h5py` for running pyro\n    and `setuptools_scm` for the install.\n\n  - We recommend that pyro be installed so that it is found in your python search\n    path, and can work more easily with Jupyter notebooks.\n\n    pyro can be installed on your system via:\n\n    ```\n    python setup.py install --user\n    ```\n\n    alternately, you can use `develop` instead of `install` if you are\n    planning on developing pyro solvers directly.\n\n  - Not all matplotlib backends allow for the interactive plotting as\n    pyro is run. One that does is the TkAgg backend. This can be made\n    the default by creating a file `~/.matplotlib/matplotlibrc` with\n    the content:\n\n       `backend: TkAgg`\n\n    You can check what backend is your current default in python via:\n\n      ```python\n      import matplotlib.pyplot\n      print matplotlib.pyplot.get_backend()\n       ```\n\n - If you want to run the unit tests, you need to have `pytest` installed.\n\n - Finally, you can run a quick test of the advection solver:\n\n   ```\n   ./pyro-sim.py advection smooth inputs.smooth\n   ```\n\n   you should see a graphing window pop up with a smooth pulse\n   advecting diagonally through the periodic domain.\n\n\n## Core Data Structures\n\nThe main data structures that describe the grid and the data the lives\non the grid are described in a jupyter notebook:\n\nhttps://github.com/python-hydro/pyro2/blob/main/mesh/mesh-examples.ipynb\n\n\nMany of the methods here rely on multigrid.  The multigrid solver is\ndemonstrated in the juputer notebook:\n\nhttps://github.com/python-hydro/pyro2/blob/main/multigrid/multigrid-examples.ipynb\n\n\n## Solvers\n\npyro provides the following solvers (all in 2-d):\n\n  - `advection`: a second-order unsplit linear advection solver.  This\n    uses characteristic tracing and corner coupling for the prediction\n    of the interface states.  This is the basic method to understand\n    hydrodynamics.\n\n  - `advection_fv4`: a fourth-order accurate finite-volume advection\n    solver that uses RK4 time integration.\n\n  - `advection_nonuniform`: a solver for advection with a non-uniform velocity field.\n\n  - `advection_rk`: a second-order unsplit solver for linear advection\n    that uses Runge-Kutta integration instead of characteristic\n    tracing.\n\n  - `advection_weno`: a method-of-lines WENO solver for linear\n    advection.\n\n  - `compressible`: a second-order unsplit solver for the Euler\n    equations of compressible hydrodynamics.  This uses characteristic\n\ttracing and corner coupling for the prediction of the interface\n\tstates and a 2-shock or HLLC approximate Riemann solver.\n\n  - `compressible_fv4`: a fourth-order accurate finite-volume compressible\n     hydro solver that uses RK4 time integration.  This is built from the\n     method of McCourquodale and Colella (2011).\n\n  - `compressible_rk`: a second-order unsplit solver for Euler\n     equations that uses Runge-Kutta integration instead of\n\t characteristic tracing.\n\n  - `compressible_sdc`: a fourth-order compressible solver,\n     using spectral-deferred correction (SDC) for the time integration.\n\n  - `diffusion`: a Crank-Nicolson time-discretized solver for the\n    constant-coefficient diffusion equation.\n\n  - `incompressible`: a second-order cell-centered approximate\n    projection method for the incompressible equations of\n    hydrodynamics.\n\n  - `lm_atm`: a solver for the equations of low Mach number\n    hydrodynamics for atmospheric flows.\n\n  - `lm_combustion`: (in development) a solver for the equations of\n    low Mach number hydrodynamics for smallscale combustion.\n\n  - `multigrid`: a cell-centered multigrid solver for a\n    constant-coefficient Helmholtz equation, as well as a\n    variable-coefficient Poisson equation (which inherits from the\n    constant-coefficient solver).\n\n  - `particles`: a solver for Lagrangian tracer particles.\n\n  - `swe`: a solver for the shallow water equations.\n\n\n## Working with data\n\nIn addition to the main pyro program, there are many analysis tools\nthat we describe here. Note: some problems write a report at the end\nof the simulation specifying the analysis routines that can be used\nwith their data.\n\n  - `compare.py`: this takes two simulation output files as input and\n    compares zone-by-zone for exact agreement. This is used as part of\n    the regression testing.\n\n      usage: `./compare.py file1 file2`\n\n  - `plot.py`: this takes the an output file as input and plots the\n    data using the solver's dovis method.\n\n      usage: `./plot.py file`\n\n  - `analysis/`\n\n      * `dam_compare.py`: this takes an output file from the\n        shallow water dam break problem and plots a slice through the domain\n        together with the analytic solution (calculated in the script).\n\n         usage: `./dam_compare.py file`\n\n      * `gauss_diffusion_compare.py`: this is for the diffusion solver's\n        Gaussian diffusion problem. It takes a sequence of output\n        files as arguments, computes the angle-average, and the plots\n        the resulting points over the analytic solution for comparison\n        with the exact result.\n\n          usage: `./gauss_diffusion_compare.py file*`\n\n      * `incomp_converge_error.py`: this is for the incompressible\n        solver's converge problem. This takes a single output file as\n        input and compares the velocity field to the analytic\n        solution, reporting the L2 norm of the error.\n\n          usage: `./incomp_converge_error.py file`\n\n      * `plotvar.py`: this takes a single output file and a variable\n        name and plots the data for that variable.\n\n          usage: `./plotvar.py file variable`\n\n      * `sedov_compare.py`: this takes an output file from the\n        compressible Sedov problem, computes the angle-average profile\n        of the solution and plots it together with the analytic data\n        (read in from `cylindrical-sedov.out`).\n\n          usage: `./sedov_compare.py file`\n\n      * `smooth_error.py`: this takes an output file from the advection\n        solver's smooth problem and compares to the analytic solution,\n        outputting the L2 norm of the error.\n\n          usage: `./smooth_error.py file`\n\n      * `sod_compare.py`: this takes an output file from the\n        compressible Sod problem and plots a slice through the domain\n        over the analytic solution (read in from `sod-exact.out`).\n\n          usage: `./sod_compare.py file`\n\n\n## Understanding the algorithms\n\n  There is a set of notes that describe the background and details of the\n  algorithms that pyro implements:\n\n  http://bender.astro.sunysb.edu/hydro_by_example/CompHydroTutorial.pdf\n\n  The source for these notes is also available on github:\n\n  https://github.com/Open-Astrophysics-Bookshelf/numerical_exercises\n\n\n## Regression and unit testing\n\n  The `test.py` script will run several of the problems (as well as some\n  stand-alone multigrid tests) and compare the solution to stored\n  benchmarks (in each solver's `tests/` subdirectory).  The return value\n  of the script is the number of tests that failed.\n\n  Unit tests are controlled by pytest and can be run simply via\n\n  ```\n  pytest .\n  ```\n\n## Acknowledgements\n\n  If you use pyro in a class or workshop, please e-mail us to let us know\n  (we'd like to start listing these on the website).\n\n  If pyro was used for a publication, please cite the article found in\n  the `CITATION` file.\n\n\n## Getting help\n\n  We use github discussions as a way to ask about the code:\n\n  https://github.com/python-hydro/pyro2/discussions\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-hydro/pyro2",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyro-hydro",
    "package_url": "https://pypi.org/project/pyro-hydro/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyro-hydro/",
    "project_urls": {
      "Homepage": "https://github.com/python-hydro/pyro2"
    },
    "release_url": "https://pypi.org/project/pyro-hydro/4.0.1/",
    "requires_dist": [
      "numpy",
      "numba",
      "matplotlib",
      "h5py"
    ],
    "requires_python": "",
    "summary": "A python hydrodynamics code for teaching and prototyping",
    "version": "4.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15489238,
  "releases": {
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db449b0526eabde7591c89eed78e94931573f0814cc424f69666f0b40810bc50",
          "md5": "cd4cc38753ed869ff001d86ee3be87c9",
          "sha256": "8283f6593efe7394bc6a3a95e34c96662c7eebbf80f070451fa9524ff463f3ed"
        },
        "downloads": -1,
        "filename": "pyro_hydro-4.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd4cc38753ed869ff001d86ee3be87c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22160604,
        "upload_time": "2022-10-21T17:10:14",
        "upload_time_iso_8601": "2022-10-21T17:10:14.350578Z",
        "url": "https://files.pythonhosted.org/packages/db/44/9b0526eabde7591c89eed78e94931573f0814cc424f69666f0b40810bc50/pyro_hydro-4.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4348280d13acd90012f86479bac27ab3f2832842a033805d32c02cfe0ad6c95f",
          "md5": "5cfdd3e3d1ba4d1aa0ef9f2e27582497",
          "sha256": "4857c2c535a23e9833066777bb2e6c41a849bee4aef21392f73736a0f206a62b"
        },
        "downloads": -1,
        "filename": "pyro-hydro-4.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5cfdd3e3d1ba4d1aa0ef9f2e27582497",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45343441,
        "upload_time": "2022-10-21T17:10:43",
        "upload_time_iso_8601": "2022-10-21T17:10:43.665923Z",
        "url": "https://files.pythonhosted.org/packages/43/48/280d13acd90012f86479bac27ab3f2832842a033805d32c02cfe0ad6c95f/pyro-hydro-4.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db449b0526eabde7591c89eed78e94931573f0814cc424f69666f0b40810bc50",
        "md5": "cd4cc38753ed869ff001d86ee3be87c9",
        "sha256": "8283f6593efe7394bc6a3a95e34c96662c7eebbf80f070451fa9524ff463f3ed"
      },
      "downloads": -1,
      "filename": "pyro_hydro-4.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd4cc38753ed869ff001d86ee3be87c9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22160604,
      "upload_time": "2022-10-21T17:10:14",
      "upload_time_iso_8601": "2022-10-21T17:10:14.350578Z",
      "url": "https://files.pythonhosted.org/packages/db/44/9b0526eabde7591c89eed78e94931573f0814cc424f69666f0b40810bc50/pyro_hydro-4.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4348280d13acd90012f86479bac27ab3f2832842a033805d32c02cfe0ad6c95f",
        "md5": "5cfdd3e3d1ba4d1aa0ef9f2e27582497",
        "sha256": "4857c2c535a23e9833066777bb2e6c41a849bee4aef21392f73736a0f206a62b"
      },
      "downloads": -1,
      "filename": "pyro-hydro-4.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5cfdd3e3d1ba4d1aa0ef9f2e27582497",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45343441,
      "upload_time": "2022-10-21T17:10:43",
      "upload_time_iso_8601": "2022-10-21T17:10:43.665923Z",
      "url": "https://files.pythonhosted.org/packages/43/48/280d13acd90012f86479bac27ab3f2832842a033805d32c02cfe0ad6c95f/pyro-hydro-4.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}