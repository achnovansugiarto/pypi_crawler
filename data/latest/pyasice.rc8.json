{
  "info": {
    "author": "Thorgate",
    "author_email": "info@thorgate.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pyasice - ASiC-E (BDOC) and XAdES Manipulation Library\n\n[![pypi Package](https://badge.fury.io/py/pyasice.png)](https://badge.fury.io/py/pyasice)\n[![Build Status](https://app.travis-ci.com/thorgate/pyasice.svg?branch=main)](https://app.travis-ci.com/thorgate/pyasice)\n[![Coverage Status](https://coveralls.io/repos/github/thorgate/pyasice/badge.svg?branch=main)](https://coveralls.io/github/thorgate/pyasice?branch=main)\n\nThe `pyasice` library is designed to:\n* create, read, and verify XAdES/XMLDsig/eIDAS electronic signatures,\n* validate signers' certificates with OCSP,\n* confirm these signatures with TimeStamping, \n* create and manipulate [ASiC-E](https://en.wikipedia.org/wiki/Associated_Signature_Containers) or BDoc 2.1 containers, \nwhich are based on the XAdES/eIDAS stack.  \n\n## Contents\n\n* [Quickstart](#quickstart)\n* * [ASiC-E/BDOC Container File Manipulation](#asic-ebdoc-container-file-manipulation)\n* * [Signing Flow Utilities](#signing-flow-utilities)\n* [Normative References](#normative-references)\n* [Module Layout](#module-layout)\n* [Technology Stack](#technology-stack)\n* [Build the XAdES XML Signature meta-file](#build-the-xades-xml-signature-meta-file)\n* * [SignedInfo](#signedinfo)\n* * [SignatureValue](#signaturevalue)\n* * [KeyInfo](#keyinfo)\n* * [SignedProperties](#signedproperties)\n* [Secondary Services](#secondary-services)\n* * [OCSP](#ocsp)\n* * [Timestamping Service](#timestamping-service)\n\n## Quickstart\n\n### ASiC-E/BDOC Container File Manipulation\n\nCreate a new container:\n```python\nfrom pyasice import Container, XmlSignature\n\nxmlsig = XmlSignature.create().add_document('test.txt', b'Test data', 'application/pdf')\n# ... here goes the signing, confirming and timestamping part ... \n\ncontainer = Container()\ncontainer\\\n    .add_file('test.txt', b'Test data', 'application/pdf')\\\n    .add_signature(xmlsig)\\\n    .save('test.asice')\n\n# container is a context manager:\nwith Container() as container:\n    container.add_file('a', b'b', 'c').save('path/to')\n\n# Open an existing container:\ncontainer = Container.open('test.asice')\n\n# Verify container. Raises pyasice.SignatureVerificationError on failure\ncontainer.verify_signatures()\n\n# Read files in the container\nwith container.open_file('test.txt') as f:\n    assert f.read() == b'Test data'\n\n# Iterate over signatures\nfor xmlsig in container.iter_signatures():\n    xmlsig.get_signing_time()\n```\n\n### Signing Flow Utilities\n\n```python\nfrom pyasice import Container, finalize_signature\n\n# get this from an external service, ID card, or elsewhere\nuser_certificate = b'user certificate in DER/PEM format'\n\ncontainer = Container()\ncontainer.add_file(\"test.txt\", b'Test', \"text/plain\")\n\nxml_sig = container.prepare_signature(user_certificate)\n\n# Use an external service, or ID card, or a private key from elsewhere\n# to sign the XML signature structure\nsignature_value = externally.sign(xml_sig.signed_data())\nxml_sig.set_signature_value(signature_value)\n\n# Get issuer certificate from the ID service provider, e.g. sk.ee. \n# Here we use the user certificate's `issuer.common_name` field to identify the issuer cert,\n# and find the cert in the `esteid-certificates` PyPI package. \nissuer_cert_name = xml_sig.get_certificate_issuer_common_name()\nimport esteid_certificates\nissuer_certificate = esteid_certificates.get_certificate(issuer_cert_name)\n\n# Complete the XML signature with OCSP and optionally Timestamping\nfinalize_signature(xml_sig, ocsp_url=\"https://ocsp.server.url\", tsa_url=\"https://tsa.server.url\")\n\ncontainer.add_signature(xml_sig)\n\ncontainer.save(\"path/to/file.asice\")\n```\n\n\n## Normative References\n\nThe main document this library is based on:\nthe [BDOC 2.1.2 spec](https://www.id.ee/wp-content/uploads/2020/06/bdoc-spec212-eng.pdf).\n\nThe specific standards outlined in that document:\n\n* [ETSI TS 101 903 v1.4.2](https://www.etsi.org/deliver/etsi_ts/101900_101999/101903/01.04.02_60/ts_101903v010402p.pdf) \n  – XML Advanced Electronic Signatures (XAdES) and its Baseline Profile ETSI TS 103 171;\n* ITU-T Recommendation X.509;\n* [RFC 3161](https://tools.ietf.org/html/rfc3161) – PKIX Time-Stamp protocol;\n* [RFC 6960](https://tools.ietf.org/html/rfc6960) – Online Certificate Status Protocol;\n* ETSI TS 102 918 v1.2.1 - Associated Signature Containers (ASiC) and its\n  Baseline Profile ETSI TS 103 174.\n\nThe difference between ASiC-E and BDOC is almost exclusively in terminology.\n\nThe [BDOC 2.1.2 spec](https://www.id.ee/wp-content/uploads/2020/06/bdoc-spec212-eng.pdf) states:\n\n> The BDOC file format is based on ASiC standard which is in turn profiled by ASiC BP.\n> BDOC packaging is a ASiC-E XAdES type ZIP container ...\n\nSo with a moderate risk of confusion, we can accept that ASiC-E and BDOC refer to the same thing.\n\n## Module Layout\n\n* [container.py](container.py) -- the `Container` class, that deals with ASiC-E (BDOC v.2.1) container format \n* [xmlsig.py](xmlsig.py) -- the `XmlSignature` class, that deals with XAdES/XMLDSig XML structures\n* [ocsp.py](ocsp.py) -- the `OCSP` class that deals with OCSP requests and responses\n* [tsa.py](tsa.py) -- the `TSA` class that deals with TimeStamping service requests and responses\n* [signature_verifier.py](signature_verifier.py) -- the `verify` function, to verify signatures against a certificate.\n\n## Technology Stack\n\nDealing with the subject involves, at least:\n* public key cryptography (RSA, ECDSA);\n* ASN.1 encoding;\n* XML processing;\n* Zip archives;\n* and also requests to various services (obtaining signer's certificate and the signature,\n  validating the certificate through OCSP, time-stamping the signature).\n\nThe [asn1crypto](https://github.com/wbond/asn1crypto) library and its higher-level complement \n[oscrypto](https://github.com/wbond/oscrypto)\nallow handling certificates and ASN.1 structures quite easily.\n\nThe [cryptography](https://cryptography.io/en/latest) library is by far the most powerful python library \nfor dealing with public key cryptography algorithms.\n\n\n## Build the XAdES XML Signature meta-file\n\nThe structure of the XAdES XML signature file looks like this:\n```xml\n<asic:XAdESSignatures xmlns:asic=\"http://uri.etsi.org/02918/v1.2.1#\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"\n                      xmlns:xades=\"http://uri.etsi.org/01903/v1.3.2#\">\n    <ds:Signature Id=\"S0\">\n        <ds:SignedInfo Id=\"S0-SignedInfo\">...</ds:SignedInfo>\n        <ds:SignatureValue Id=\"S0-SIG\">...</ds:SignatureValue>\n        <ds:KeyInfo Id=\"S0-KeyInfo\">...</ds:KeyInfo>\n        <ds:Object Id=\"S0-object-xades\">\n            <xades:QualifyingProperties Id=\"S0-QualifyingProperties\" Target=\"#S0\">\n                <xades:SignedProperties Id=\"S0-SignedProperties\">\n                    <xades:SignedSignatureProperties Id=\"S0-SignedSignatureProperties\">\n                        <xades:SigningTime>2019-06-07T14:03:50Z</xades:SigningTime>\n                        <xades:SigningCertificate>...</xades:SigningCertificate>\n                        <xades:SignaturePolicyIdentifer>...</xades:SignaturePolicyIdentifer>\n                    </xades:SignedSignatureProperties>\n                </xades:SignedProperties>\n            </xades:QualifyingProperties>\n        </ds:Object>\n    </ds:Signature>\n</asic:XAdESSignatures>\n```\n\nWe'll go over each section below.\n\n* [SignedInfo](#signedinfo)\n* [SignatureValue](#signaturevalue)\n* [KeyInfo](#keyinfo)\n* [SignedProperties](#signedproperties)\n\n### SignedInfo\n\nThe `SignedInfo` node is the source of the data being signed. The XML content of the node, canonicalized\nusing the `CanonicalizationMethod` as per the respective child node, is hashed using an algorithm defined in\nthe `SignatureMethod` child node, and this hash is fed to a signing service (ID card, SmartID etc.) \n\n```xml\n<ds:SignedInfo Id=\"S0-SignedInfo\">\n    <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2006/12/xml-c14n11\"></ds:CanonicalizationMethod>\n    <ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256\"></ds:SignatureMethod>\n    <ds:Reference Id=\"S0-ref-0\" URI=\"test.pdf\">\n        <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"></ds:DigestMethod>\n        <ds:DigestValue>...</ds:DigestValue>\n    </ds:Reference>\n    <ds:Reference Id=\"S0-ref-sp\" Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#S0-SignedProperties\">\n        <ds:Transforms>\n            <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n        </ds:Transforms>\n        <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"></ds:DigestMethod>\n        <ds:DigestValue>...</ds:DigestValue>\n    </ds:Reference>\n</ds:SignedInfo>\n```\n\nThe `Reference` fields are different in purpose and formation.\n\nThe first `Reference` field is about the signed document and as such, has an `URI` attribute of the document's file name.\nIts child `DigestValue` element is the SHA256 hash of the document, it is, incidentally, the very hash that is sent to the SmartID API for signing.\n\nThe second `Reference` is built on the basis of some fields defined later in the [SignedProperties](#SignedProperties) section.\nIts child `DigestValue` is calculated as a SHA256 hash of the canonicalized XML output of the  `SignedProperties` tag, after that one is formed:\nThe `URI` attribute of this `Reference` tag is the `#`-prefixed `Id` attribute of the `SignedProperties` tag.\n\n```python\nimport base64\nimport hashlib\nfrom lxml import etree\n\nbuf = etree.tostring(el, method='c14n', exclusive=True or False)  # NOTE below\ndigest_value = base64.b64encode(hashlib.sha256(buf).digest())\n```\n(Assuming the `el` here to be the XML `<SignedProperties>` element)\n\n#### Canonicalization\n\nThe `exclusive` kwarg controls whether the namespace declarations of ancestor tags should be included in the resulting canonical representation, or _excluded_.\nWhether to use `exclusive=True` depends on the canonicalization tag's `Algorithm` attribute: \n* `http://www.w3.org/2001/10/xml-exc-c14n#`, uses `exclusive=True`,  \n* the two others, the required `http://www.w3.org/TR/2001/REC-xml-c14n-20010315`, or `http://www.w3.org/2006/12/xml-c14n11`, are not exclusive.\n\nThe aforementioned `<ds:CanonicalizationMethod>` tag controls the c14n of the `SignedInfo` node before feeding its digest to the signature service. \nThe c14n of `SignedProperties` prior to getting its digest is determined by the `ds:Transform` tag within this `ds:Reference` node. \nIf it's not present, then the default, ie. not exclusive, c14n is used.  \n\n### KeyInfo\n\nThis section contains the base64-encoded user certificate value, e.g. the SmartID API response's `cert.value`,\nor the certificate obtained from an ID card:\n```xml\n<ds:KeyInfo Id=\"S0-KeyInfo\">\n    <ds:X509Data>\n        <ds:X509Certificate>MIIGJDCCBAygAwIBAgIQBNsLtTIpnmNbbE4+laSLaTANBgkqhkiG9w0BAQsFADBr...</ds:X509Certificate>\n    </ds:X509Data>\n</ds:KeyInfo>\n```\nMore details about the certificate in the [SigningCertificate](#SigningCertificate) subsection.\n \n### SignedProperties\n\nThe XML section of `SignedProperties` consists of, [at least](https://www.w3.org/TR/XAdES/#IDAEAD1B), \nthe `SigningTime`, `SigningCertificate` and `SignaturePolicyIdentifer` elements.\n\n:question: The signatures returned by e.g. [Dokobit](https://dokobit.ee), \ndo not contain the `SignaturePolicyIdentifer` node.\n\n#### SigningTime\n\nA timestamp in ISO 8601 format.\n\n#### SignaturePolicyIdentifier \n\nThis appears to be a static^1 XML chunk referencing the BDOC 2.1 Specifications document:\n```xml\n<xades:SignaturePolicyIdentifier>\n    <xades:SignaturePolicyId>\n        <xades:SigPolicyId>\n            <xades:Identifier Qualifier=\"OIDAsURN\">urn:oid:1.3.6.1.4.1.10015.1000.3.2.1</xades:Identifier>\n        </xades:SigPolicyId>\n        <xades:SigPolicyHash>\n            <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n            </ds:DigestMethod>\n            <ds:DigestValue>3Tl1oILSvOAWomdI9VeWV6IA/32eSXRUri9kPEz1IVs=</ds:DigestValue>\n        </xades:SigPolicyHash>\n        <xades:SigPolicyQualifiers>\n            <xades:SigPolicyQualifier>\n                <xades:SPURI>https://www.sk.ee/repository/bdoc-spec21.pdf</xades:SPURI>\n            </xades:SigPolicyQualifier>\n        </xades:SigPolicyQualifiers>\n    </xades:SignaturePolicyId>\n</xades:SignaturePolicyIdentifier>\n```\n\n[1] The DigestValue is the hash value of the document referenced by `SPURI`, encoded in base64. \nRefer to [BDOC 2.1:2014 Specification](https://www.id.ee/public/bdoc-spec212-eng.pdf) for more information.\n\n#### SigningCertificate\n\nThe user certificate is a base64-encoded DER certificate which can be loaded as follows:\n```python\nimport base64\nfrom cryptography import x509\nfrom cryptography.hazmat.backends import default_backend\ncert_asn1 = base64.b64decode(cert_value)\ncert = x509.load_der_x509_certificate(base64.b64decode(cert_asn1), default_backend())\n```\nor with `pyopenssl`:\n```python\nimport base64\nfrom OpenSSL.crypto import load_certificate, FILETYPE_ASN1\ncert_asn1 = base64.b64decode(cert_value)\nopenssl_cert = load_certificate(FILETYPE_ASN1, base64.b64decode(cert_asn1))\n```\nThese objects expose a slightly different but similar API.\n\nWhat we need is the issuer name and certificate serial number:\n```python\nassert openssl_cert.get_serial_number() == cert.sertial_number == '6454262457486410408874311107672836969'\nassert cert.issuer.rfc4514_string() == 'C=EE,O=AS Sertifitseerimiskeskus,2.5.4.97=NTREE-10747013,CN=TEST of ESTEID-SK 2015'\nassert openssl_cert.issuer.get_components() == [(b'C', b'EE'), (b'O', b'AS Sertifitseerimiskeskus'), (b'organizationIdentifier', b'NTREE-10747013'), (b'CN', b'ESTEID-SK 2015')]  \n```\n\nAlso we need a SHA256 digest value of the certificate:\n```python\ncert_digest = base64.b64encode(hashlib.sha256(cert_asn1).digest())\n```\n\nWith these values we can build the certificate information entry of the SignedProperties:\n```xml\n<xades:SigningCertificate>\n    <xades:Cert>\n        <xades:CertDigest>\n            <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"></ds:DigestMethod>\n            <ds:DigestValue>hdsLTm4aaFKaGMwF6fvH5vWmiMBBnTCH3kba+TjY+pE=</ds:DigestValue>\n        </xades:CertDigest>\n        <xades:IssuerSerial>\n            <ds:X509IssuerName>C=EE,O=AS Sertifitseerimiskeskus,2.5.4.97=NTREE-10747013,CN=TEST of EID-SK 2016</ds:X509IssuerName>\n            <ds:X509SerialNumber>98652662091042892833248946646759285960</ds:X509SerialNumber>\n        </xades:IssuerSerial>\n    </xades:Cert>\n</xades:SigningCertificate>\n```\n\n:question: Does `X509IssuerName` content need to be a `cert.issuer.rfc4514_string()` or can it be anything else?\n\nSo, in the end, we get a `<xades:SignedProperties>` element which we then canonicalize and calculate a sha256 hash of this string,\nto place it in the appropriate `<ds:Reference>` element.\n\n### SignatureValue\n\n```xml\n<ds:SignatureValue Id=\"SIG-{SIGNATURE_ID}\"><!-- Base64-encoded SIGNATURE_VALUE, gotten externally --></ds:SignatureValue>\n```\n\nA base64-encoded value of the signature calculated over the signed data. \nThe signed data is the `ds:SignedInfo` section, as [described above](#signedinfo).\n\nWhen using SmartID/MobileID, this is taken from the `signature.value` field of the response.\n\n### KeyInfo\n\nContains the base64-encoded certificate, as gotten from the SmartID response.\n```xml\n<ds:KeyInfo Id=\"S0-KeyInfo\">\n    <ds:X509Data>\n        <ds:X509Certificate>...</ds:X509Certificate>\n    </ds:X509Data>\n</ds:KeyInfo>\n```\n\n## Secondary Services\n\n### OCSP\n\nOCSP ([Online Certificate Status Protocol](https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol)) \nis designed to check that the signing certificate is valid at the point of signing. It is a binary protocol, and uses ASN.1 encoding in both request and response payload.\nTo deal with it, we're using the `asn1crypto` library.\n\nThe OCSP request should be made immediately after signing, and the base64-encoded response is embedded in the XAdES signature as a `xades:UnsignedSignatureProperties` descendant node,\nnamely `xades:EncapsulatedOCSPValue`.\n\n#### Estonian eID\n\nURLs for OCSP services:\n* Demo: `http://demo.sk.ee/ocsp`\n* Production: `http://ocsp.sk.ee/`\n\nMore detail on the [sk.ee OCSP page](https://www.sk.ee/en/services/validity-confirmation-services/technical-information/)\n\n\n### Timestamping service\n\nThe [TimeStamp protocol](https://en.wikipedia.org/wiki/Time_stamp_protocol) is also a binary protocol, for getting a Long-Term Validity Timestamp for a signature. \nAlso handled with the help of the `asn1crypto` library.\n\nThe TSA request should be made immediately after OCSP validity confirmation, and the base64-encoded response is embedded in the XAdES signature as a `xades:UnsignedSignatureProperties` descendant node,\nnamely `xades:EncapsulatedTimeStamp`.\n\n#### Estonian eID\n\nURLs for timestamping services:\n* Demo: `http://demo.sk.ee/tsa/`\n* Production: `http://tsa.sk.ee`\n\nMore detail on the [sk.ee TSA page](https://www.sk.ee/en/services/time-stamping-service/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thorgate/pyasice",
    "keywords": "esteid,asice,smartid,mobile-id,idcard",
    "license": "ISC",
    "maintainer": "Jyrno Ader",
    "maintainer_email": "jyrno42@gmail.com",
    "name": "pyasice",
    "package_url": "https://pypi.org/project/pyasice/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyasice/",
    "project_urls": {
      "Homepage": "https://github.com/thorgate/pyasice",
      "Repository": "https://github.com/thorgate/pyasice"
    },
    "release_url": "https://pypi.org/project/pyasice/1.0.4/",
    "requires_dist": [
      "lxml (>=4,<5)",
      "oscrypto",
      "asn1crypto",
      "cryptography (>=5)",
      "requests (>=2.20)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "Manipulate ASiC-E containers and XAdES/eIDAS signatures for Estonian e-identity services",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17238014,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0052e57d1ca0d5ad3923a11fe5000fcbf67fb433cae49b2df9bd6ad1635ab253",
          "md5": "1d9b88d899c10eaf0c64321e667104a2",
          "sha256": "3705b6d8fb03cd2b41b247bee8e16ab0241dacd00f70f3d36ccff36d9a11f097"
        },
        "downloads": -1,
        "filename": "pyasice-1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d9b88d899c10eaf0c64321e667104a2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26774,
        "upload_time": "2020-10-27T09:51:42",
        "upload_time_iso_8601": "2020-10-27T09:51:42.806127Z",
        "url": "https://files.pythonhosted.org/packages/00/52/e57d1ca0d5ad3923a11fe5000fcbf67fb433cae49b2df9bd6ad1635ab253/pyasice-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a096146f0f9e7c7e966f53abe8ab28d46eafcae2bb7ea607301b3a25824b4992",
          "md5": "44611233809db930b9b7c3de113bf3e2",
          "sha256": "2764cfc47dfa4bef570a78fcddc5d26a38ffae2f6c11ea04e52e54062b555eb4"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "44611233809db930b9b7c3de113bf3e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25815,
        "upload_time": "2020-10-27T09:51:44",
        "upload_time_iso_8601": "2020-10-27T09:51:44.115632Z",
        "url": "https://files.pythonhosted.org/packages/a0/96/146f0f9e7c7e966f53abe8ab28d46eafcae2bb7ea607301b3a25824b4992/pyasice-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d6b912db70dc1afb8834cf610a0f58de9c01bd998607709910a3fa978a617a6",
          "md5": "98e2d3f9c3fe154e58a7b08eafc92ca1",
          "sha256": "ed13f957a71bd1bcaad05b793a4044a2832e816d1ee1df995b9c68dfc04a2429"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98e2d3f9c3fe154e58a7b08eafc92ca1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26870,
        "upload_time": "2020-11-06T11:55:14",
        "upload_time_iso_8601": "2020-11-06T11:55:14.942782Z",
        "url": "https://files.pythonhosted.org/packages/0d/6b/912db70dc1afb8834cf610a0f58de9c01bd998607709910a3fa978a617a6/pyasice-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cde3e4ca20210765545bebfcdbade7b18fd5de2d8dd8403395f485f6cd8b124",
          "md5": "baa7d732a1e7a7247f7fa84210632aeb",
          "sha256": "0163848909c500c5114112226695e07d434eb8e93fcd1d9b0dea50e9a6af9156"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "baa7d732a1e7a7247f7fa84210632aeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25906,
        "upload_time": "2020-11-06T11:55:16",
        "upload_time_iso_8601": "2020-11-06T11:55:16.825228Z",
        "url": "https://files.pythonhosted.org/packages/6c/de/3e4ca20210765545bebfcdbade7b18fd5de2d8dd8403395f485f6cd8b124/pyasice-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6979b26e587c8e7bcd26d0546015ffb903ce1c7b756d70c81860df0ba251ef1c",
          "md5": "67c4350c6a524f65caa9c33a231b47fd",
          "sha256": "cd1420b04206c0d33e8c827d93f81ae799b07b5362c89b8b8dc9d2ded135f6f5"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.1b0.tar.gz",
        "has_sig": false,
        "md5_digest": "67c4350c6a524f65caa9c33a231b47fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30746,
        "upload_time": "2020-11-06T07:32:41",
        "upload_time_iso_8601": "2020-11-06T07:32:41.901077Z",
        "url": "https://files.pythonhosted.org/packages/69/79/b26e587c8e7bcd26d0546015ffb903ce1c7b756d70c81860df0ba251ef1c/pyasice-1.0.1b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "804a4d7eb208d51175d25739b471ce4e14d75ed97c49030004a733ae55a51d72",
          "md5": "920789af61e25d46f3f37d55fa5ba19c",
          "sha256": "975b79b7a3d155e5b4c95a45d9f1e75338a80c1aa288d0d3456bc1f56370f767"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "920789af61e25d46f3f37d55fa5ba19c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 26905,
        "upload_time": "2021-09-02T10:47:44",
        "upload_time_iso_8601": "2021-09-02T10:47:44.183996Z",
        "url": "https://files.pythonhosted.org/packages/80/4a/4d7eb208d51175d25739b471ce4e14d75ed97c49030004a733ae55a51d72/pyasice-1.0.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "missing source artifact file"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e6bde6c8c41d744c04e4c18d6fcd50d13eca9b56edb81c2860bb8da5f1cb881",
          "md5": "5855493682ab34832e09b5b179174960",
          "sha256": "c81eecbca20116256b10a5f6306095a8ebcb0569e7a900f674a904cd3cddcc09"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5855493682ab34832e09b5b179174960",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 26907,
        "upload_time": "2021-09-02T10:56:24",
        "upload_time_iso_8601": "2021-09-02T10:56:24.447445Z",
        "url": "https://files.pythonhosted.org/packages/0e/6b/de6c8c41d744c04e4c18d6fcd50d13eca9b56edb81c2860bb8da5f1cb881/pyasice-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fdd6b532cf251fa0fc3e5b4a576c0e0289a5d6676526529f9d84619cbbe2900",
          "md5": "df8feac501517f3c0444b12070921f57",
          "sha256": "23fdecc513d7ab05a09da2f600bbb2ed13cd976c0841781416514f1863a71055"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "df8feac501517f3c0444b12070921f57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 30071,
        "upload_time": "2021-09-02T10:56:25",
        "upload_time_iso_8601": "2021-09-02T10:56:25.863792Z",
        "url": "https://files.pythonhosted.org/packages/3f/dd/6b532cf251fa0fc3e5b4a576c0e0289a5d6676526529f9d84619cbbe2900/pyasice-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82a21ea14f49084f41542e61898f45474e729368ec6bb0b9db67ce79896b2099",
          "md5": "6611bf5734afab81c2712ff313c85eb0",
          "sha256": "73793f0e50387196027a69bc219c36cf690c03cef63cebf154a2745d8515dc4e"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6611bf5734afab81c2712ff313c85eb0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 26923,
        "upload_time": "2023-03-10T10:59:59",
        "upload_time_iso_8601": "2023-03-10T10:59:59.131961Z",
        "url": "https://files.pythonhosted.org/packages/82/a2/1ea14f49084f41542e61898f45474e729368ec6bb0b9db67ce79896b2099/pyasice-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e0e49c5fba451ce6e7012d05f6b7390d729bc03f9eb136086c903b65e0aa6e7",
          "md5": "8ab843ef3e11f8c215f557f5d71ae863",
          "sha256": "1ae90fd8983fe9675999827082d47a71ed9f6d55346e7ddc6c3b3db9e951af7c"
        },
        "downloads": -1,
        "filename": "pyasice-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8ab843ef3e11f8c215f557f5d71ae863",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 30102,
        "upload_time": "2023-03-10T11:00:01",
        "upload_time_iso_8601": "2023-03-10T11:00:01.603465Z",
        "url": "https://files.pythonhosted.org/packages/3e/0e/49c5fba451ce6e7012d05f6b7390d729bc03f9eb136086c903b65e0aa6e7/pyasice-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9d2e07a772115ae76f4d97df0848a86cecd5134c21cc86245cc2d7b35e738c0",
          "md5": "b4eb2d29c5d9eacbbb54e10a790befc0",
          "sha256": "84acdf58910544f774e5c7f34889516d97e210d852a8322be227fe8cd1c26ac6"
        },
        "downloads": -1,
        "filename": "pyasice-1.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "b4eb2d29c5d9eacbbb54e10a790befc0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30575,
        "upload_time": "2020-10-22T18:17:55",
        "upload_time_iso_8601": "2020-10-22T18:17:55.462807Z",
        "url": "https://files.pythonhosted.org/packages/f9/d2/e07a772115ae76f4d97df0848a86cecd5134c21cc86245cc2d7b35e738c0/pyasice-1.0b3.tar.gz",
        "yanked": true,
        "yanked_reason": "switch to 1.0"
      }
    ],
    "1.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05593c2009b5cea1850b8fb07b3187445ea48c1cc352b1650dad6fae84905aa7",
          "md5": "663c40f6a7a0e302c9bf1ee9822487d1",
          "sha256": "6c94e76739621db995cf1e5b7b1b095564ebc65cf0e68ab9b240710f5e77b40f"
        },
        "downloads": -1,
        "filename": "pyasice-1.0b4.tar.gz",
        "has_sig": false,
        "md5_digest": "663c40f6a7a0e302c9bf1ee9822487d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30631,
        "upload_time": "2020-10-26T14:56:19",
        "upload_time_iso_8601": "2020-10-26T14:56:19.651537Z",
        "url": "https://files.pythonhosted.org/packages/05/59/3c2009b5cea1850b8fb07b3187445ea48c1cc352b1650dad6fae84905aa7/pyasice-1.0b4.tar.gz",
        "yanked": true,
        "yanked_reason": "switch to 1.0"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82a21ea14f49084f41542e61898f45474e729368ec6bb0b9db67ce79896b2099",
        "md5": "6611bf5734afab81c2712ff313c85eb0",
        "sha256": "73793f0e50387196027a69bc219c36cf690c03cef63cebf154a2745d8515dc4e"
      },
      "downloads": -1,
      "filename": "pyasice-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6611bf5734afab81c2712ff313c85eb0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 26923,
      "upload_time": "2023-03-10T10:59:59",
      "upload_time_iso_8601": "2023-03-10T10:59:59.131961Z",
      "url": "https://files.pythonhosted.org/packages/82/a2/1ea14f49084f41542e61898f45474e729368ec6bb0b9db67ce79896b2099/pyasice-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e0e49c5fba451ce6e7012d05f6b7390d729bc03f9eb136086c903b65e0aa6e7",
        "md5": "8ab843ef3e11f8c215f557f5d71ae863",
        "sha256": "1ae90fd8983fe9675999827082d47a71ed9f6d55346e7ddc6c3b3db9e951af7c"
      },
      "downloads": -1,
      "filename": "pyasice-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "8ab843ef3e11f8c215f557f5d71ae863",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 30102,
      "upload_time": "2023-03-10T11:00:01",
      "upload_time_iso_8601": "2023-03-10T11:00:01.603465Z",
      "url": "https://files.pythonhosted.org/packages/3e/0e/49c5fba451ce6e7012d05f6b7390d729bc03f9eb136086c903b65e0aa6e7/pyasice-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}