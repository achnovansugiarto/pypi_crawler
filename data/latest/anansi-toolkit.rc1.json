{
  "info": {
    "author": "Marcus Mello Vintem",
    "author_email": "marcus@vintem.tech",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Anansi\n\n## Dependencies\n\nPython, Pip, Poetry.\n\nTo install [poetry](https://python-poetry.org/docs/#installation), on\nosx, linux or *bashonwindows* terminals, type it:\n\n    curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -\n\nAlternatively, poetry could be installed by pip (supposing you have\npython and pip already installed):\n\n    pip install poetry\n\n## Consuming on Jupyter notebook\n\n**That is only a suggestion, you could run anansi on any python\nterminal. Only tested on linux.**\n\nPerform the commands:\n\n    poetry install\n    poetry run python -m ipykernel install --user --name=$(basename $(pwd))\n    poetry run jupyter notebook > jupyterlog 2>&1 &\n\n## Straight to the point: Running Default Back Testing Operation\n\n### Importing Dependencies\n\n```python\nfrom anansi.tradingbot.models import *\nfrom anansi.tradingbot import traders\nfrom anansi.tradingbot.views import create_user, create_default_operation\n```\n\n### Add a new user\n\n```python\nmy_user_first_name = \"John\"\n\ncreate_user(first_name=my_user_first_name,\n                   last_name=\"Doe\",\n                   email = \"{}@email.com\".format(my_user_first_name.lower()))\n```\n\n### Creating a default operation\n\n```python\nmy_user = User[1]\ncreate_default_operation(user=my_user)\n```\n\n### Instantiating a trader\n\n```python\nmy_op = Operation.get(id=1)\nmy_trader = traders.DefaultTrader(operation=my_op)\n```\n\n### Run the trader\n\n```python\nmy_trader.run()\n```\n\n## Playing with the database models\n\n### Getting all users\n\n```python\nusers = select(user for user in User)\nusers.show()\n```\n\n    id|first_name|last_name|login_displayed_name|email         \n    --+----------+---------+--------------------+--------------\n    1 |John      |Doe      |                    |john@email.com\n\n```python\nmy_user.first_name\n```\n\n    'John'\n\n### Some operation attribute\n\n```python\nmy_op.stop_loss.name\n```\n\n    'StopTrailing3T'\n\n### Some trader attribute\n\n```python\nmy_trader.Classifier.parameters.time_frame\n```\n\n    '6h'\n\n### Updating some attributes\n\n```python\nbefore_update = my_trader.operation.position.side, my_trader.operation.position.exit_reference_price\n\nmy_trader.operation.position.update(side=\"Long\", exit_reference_price=1020.94)\n\nafter_update = my_trader.operation.position.side, my_trader.operation.position.exit_reference_price\n\nbefore_update, after_update\n```\n\n    (('Zeroed', None), ('Long', 1020.94))\n\n## Requesting klines\n\n### Klines treated and ready for use, including market indicators methods\n\nThe example below uses the 'KlinesFromBroker' class from the 'handlers'\nmodule ('marketdata' package), which works as an abstraction over the\ndata brokers, not only serializing requests (in order to respect\nbrokers' limits), but also conforming the klines like a pandas\ndataframe,\n[extended](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.api.extensions.register_dataframe_accessor.html)\nwith market indicator methods.\n\n```python\nfrom anansi.marketdata.handlers import KlinesFromBroker\n```\n\n```python\nBinanceKlines = KlinesFromBroker(\n  broker_name=\"binance\", ticker_symbol=\"BTCUSDT\", time_frame=\"1h\")\n```\n\n```python\nnewest_klines = BinanceKlines.newest(2167)\n```\n\n```python\nnewest_klines\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open_time</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020-06-17 11:00:00</td>\n      <td>9483.25</td>\n      <td>9511.53</td>\n      <td>9466.00</td>\n      <td>9478.61</td>\n      <td>1251.802697</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020-06-17 12:00:00</td>\n      <td>9478.61</td>\n      <td>9510.88</td>\n      <td>9477.35</td>\n      <td>9499.25</td>\n      <td>1120.426332</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020-06-17 13:00:00</td>\n      <td>9499.24</td>\n      <td>9565.00</td>\n      <td>9432.00</td>\n      <td>9443.48</td>\n      <td>4401.693008</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020-06-17 14:00:00</td>\n      <td>9442.50</td>\n      <td>9464.83</td>\n      <td>9366.09</td>\n      <td>9410.95</td>\n      <td>4802.211120</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020-06-17 15:00:00</td>\n      <td>9411.27</td>\n      <td>9436.54</td>\n      <td>9388.43</td>\n      <td>9399.24</td>\n      <td>2077.135281</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2162</th>\n      <td>2020-09-15 13:00:00</td>\n      <td>10907.94</td>\n      <td>10917.96</td>\n      <td>10834.00</td>\n      <td>10834.71</td>\n      <td>3326.420940</td>\n    </tr>\n    <tr>\n      <th>2163</th>\n      <td>2020-09-15 14:00:00</td>\n      <td>10834.71</td>\n      <td>10879.00</td>\n      <td>10736.63</td>\n      <td>10764.19</td>\n      <td>4382.021477</td>\n    </tr>\n    <tr>\n      <th>2164</th>\n      <td>2020-09-15 15:00:00</td>\n      <td>10763.37</td>\n      <td>10815.47</td>\n      <td>10745.63</td>\n      <td>10784.46</td>\n      <td>3531.309654</td>\n    </tr>\n    <tr>\n      <th>2165</th>\n      <td>2020-09-15 16:00:00</td>\n      <td>10785.23</td>\n      <td>10827.61</td>\n      <td>10700.00</td>\n      <td>10784.23</td>\n      <td>3348.735166</td>\n    </tr>\n    <tr>\n      <th>2166</th>\n      <td>2020-09-15 17:00:00</td>\n      <td>10784.23</td>\n      <td>10812.44</td>\n      <td>10738.33</td>\n      <td>10794.84</td>\n      <td>1931.035921</td>\n    </tr>\n  </tbody>\n</table>\n<p>2167 rows × 6 columns</p>\n</div>\n\n### Applying simple moving average  indicators\n\n```python\nindicator = newest_klines.apply_indicator.trend.simple_moving_average(number_of_candles=35)\n```\n\n```python\nindicator.name, indicator.last(), indicator.serie\n```\n\n    ('sma_ohlc4_35',\n     10669.49407142858,\n     0                NaN\n     1                NaN\n     2                NaN\n     3                NaN\n     4                NaN\n                 ...     \n     2162    10619.190500\n     2163    10632.213571\n     2164    10644.682643\n     2165    10657.128857\n     2166    10669.494071\n     Length: 2167, dtype: float64)\n\n```python\nnewest_klines\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open_time</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020-06-17 11:00:00</td>\n      <td>9483.25</td>\n      <td>9511.53</td>\n      <td>9466.00</td>\n      <td>9478.61</td>\n      <td>1251.802697</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020-06-17 12:00:00</td>\n      <td>9478.61</td>\n      <td>9510.88</td>\n      <td>9477.35</td>\n      <td>9499.25</td>\n      <td>1120.426332</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020-06-17 13:00:00</td>\n      <td>9499.24</td>\n      <td>9565.00</td>\n      <td>9432.00</td>\n      <td>9443.48</td>\n      <td>4401.693008</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020-06-17 14:00:00</td>\n      <td>9442.50</td>\n      <td>9464.83</td>\n      <td>9366.09</td>\n      <td>9410.95</td>\n      <td>4802.211120</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020-06-17 15:00:00</td>\n      <td>9411.27</td>\n      <td>9436.54</td>\n      <td>9388.43</td>\n      <td>9399.24</td>\n      <td>2077.135281</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2162</th>\n      <td>2020-09-15 13:00:00</td>\n      <td>10907.94</td>\n      <td>10917.96</td>\n      <td>10834.00</td>\n      <td>10834.71</td>\n      <td>3326.420940</td>\n    </tr>\n    <tr>\n      <th>2163</th>\n      <td>2020-09-15 14:00:00</td>\n      <td>10834.71</td>\n      <td>10879.00</td>\n      <td>10736.63</td>\n      <td>10764.19</td>\n      <td>4382.021477</td>\n    </tr>\n    <tr>\n      <th>2164</th>\n      <td>2020-09-15 15:00:00</td>\n      <td>10763.37</td>\n      <td>10815.47</td>\n      <td>10745.63</td>\n      <td>10784.46</td>\n      <td>3531.309654</td>\n    </tr>\n    <tr>\n      <th>2165</th>\n      <td>2020-09-15 16:00:00</td>\n      <td>10785.23</td>\n      <td>10827.61</td>\n      <td>10700.00</td>\n      <td>10784.23</td>\n      <td>3348.735166</td>\n    </tr>\n    <tr>\n      <th>2166</th>\n      <td>2020-09-15 17:00:00</td>\n      <td>10784.23</td>\n      <td>10812.44</td>\n      <td>10738.33</td>\n      <td>10794.84</td>\n      <td>1931.035921</td>\n    </tr>\n  </tbody>\n</table>\n<p>2167 rows × 6 columns</p>\n</div>\n\n### Same as above, but showing indicator column\n\n```python\nindicator = newest_klines.apply_indicator.trend.simple_moving_average(\n  number_of_candles=35, indicator_column=\"SMA_OHLC4_n35\")\n```\n\n```python\nnewest_klines\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open_time</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>SMA_OHLC4_n35</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020-06-17 11:00:00</td>\n      <td>9483.25</td>\n      <td>9511.53</td>\n      <td>9466.00</td>\n      <td>9478.61</td>\n      <td>1251.802697</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020-06-17 12:00:00</td>\n      <td>9478.61</td>\n      <td>9510.88</td>\n      <td>9477.35</td>\n      <td>9499.25</td>\n      <td>1120.426332</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020-06-17 13:00:00</td>\n      <td>9499.24</td>\n      <td>9565.00</td>\n      <td>9432.00</td>\n      <td>9443.48</td>\n      <td>4401.693008</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020-06-17 14:00:00</td>\n      <td>9442.50</td>\n      <td>9464.83</td>\n      <td>9366.09</td>\n      <td>9410.95</td>\n      <td>4802.211120</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020-06-17 15:00:00</td>\n      <td>9411.27</td>\n      <td>9436.54</td>\n      <td>9388.43</td>\n      <td>9399.24</td>\n      <td>2077.135281</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2162</th>\n      <td>2020-09-15 13:00:00</td>\n      <td>10907.94</td>\n      <td>10917.96</td>\n      <td>10834.00</td>\n      <td>10834.71</td>\n      <td>3326.420940</td>\n      <td>10619.190500</td>\n    </tr>\n    <tr>\n      <th>2163</th>\n      <td>2020-09-15 14:00:00</td>\n      <td>10834.71</td>\n      <td>10879.00</td>\n      <td>10736.63</td>\n      <td>10764.19</td>\n      <td>4382.021477</td>\n      <td>10632.213571</td>\n    </tr>\n    <tr>\n      <th>2164</th>\n      <td>2020-09-15 15:00:00</td>\n      <td>10763.37</td>\n      <td>10815.47</td>\n      <td>10745.63</td>\n      <td>10784.46</td>\n      <td>3531.309654</td>\n      <td>10644.682643</td>\n    </tr>\n    <tr>\n      <th>2165</th>\n      <td>2020-09-15 16:00:00</td>\n      <td>10785.23</td>\n      <td>10827.61</td>\n      <td>10700.00</td>\n      <td>10784.23</td>\n      <td>3348.735166</td>\n      <td>10657.128857</td>\n    </tr>\n    <tr>\n      <th>2166</th>\n      <td>2020-09-15 17:00:00</td>\n      <td>10784.23</td>\n      <td>10812.44</td>\n      <td>10738.33</td>\n      <td>10794.84</td>\n      <td>1931.035921</td>\n      <td>10669.494071</td>\n    </tr>\n  </tbody>\n</table>\n<p>2167 rows × 7 columns</p>\n</div>\n\n### Raw klines, using the low level abstraction module \"*data_brokers*\"\n\n**DISCLAIMER: Requests here are not queued! There is a risk of banning\nthe IP or even blocking API keys if some limits are exceeded. Use with\ncaution.**\n\n```python\nfrom anansi.marketdata import data_brokers\n```\n\n```python\nBinanceBroker = data_brokers.BinanceDataBroker()\n```\n\n```python\nmy_klines = BinanceBroker.get_klines(ticker_symbol=\"BTCUSDT\", time_frame=\"1m\")\n```\n\n```python\nmy_klines\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open_time</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1600165560</td>\n      <td>10688.12</td>\n      <td>10691.14</td>\n      <td>10684.88</td>\n      <td>10684.88</td>\n      <td>21.529835</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1600165620</td>\n      <td>10684.88</td>\n      <td>10686.15</td>\n      <td>10681.84</td>\n      <td>10685.99</td>\n      <td>18.487428</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1600165680</td>\n      <td>10686.00</td>\n      <td>10687.65</td>\n      <td>10684.92</td>\n      <td>10687.09</td>\n      <td>22.246376</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1600165740</td>\n      <td>10687.09</td>\n      <td>10689.54</td>\n      <td>10683.86</td>\n      <td>10687.26</td>\n      <td>18.818481</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1600165800</td>\n      <td>10687.26</td>\n      <td>10687.26</td>\n      <td>10683.71</td>\n      <td>10685.76</td>\n      <td>38.281582</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>494</th>\n      <td>1600195200</td>\n      <td>10762.43</td>\n      <td>10763.48</td>\n      <td>10760.35</td>\n      <td>10760.75</td>\n      <td>8.572210</td>\n    </tr>\n    <tr>\n      <th>495</th>\n      <td>1600195260</td>\n      <td>10760.75</td>\n      <td>10762.48</td>\n      <td>10759.30</td>\n      <td>10759.31</td>\n      <td>11.089815</td>\n    </tr>\n    <tr>\n      <th>496</th>\n      <td>1600195320</td>\n      <td>10759.30</td>\n      <td>10762.22</td>\n      <td>10755.39</td>\n      <td>10761.26</td>\n      <td>27.070820</td>\n    </tr>\n    <tr>\n      <th>497</th>\n      <td>1600195380</td>\n      <td>10761.26</td>\n      <td>10761.26</td>\n      <td>10751.74</td>\n      <td>10756.02</td>\n      <td>15.482246</td>\n    </tr>\n    <tr>\n      <th>498</th>\n      <td>1600195440</td>\n      <td>10755.61</td>\n      <td>10756.57</td>\n      <td>10748.03</td>\n      <td>10748.04</td>\n      <td>61.153777</td>\n    </tr>\n  </tbody>\n</table>\n<p>499 rows × 6 columns</p>\n</div>\n\n### Same as above, but returning all information get from the data broker\n\n```python\nmy_klines = BinanceBroker.get_klines(ticker_symbol=\"BTCUSDT\", time_frame=\"1m\", show_only_desired_info=False)\n```\n\n```python\nmy_klines\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open_time</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Close_time</th>\n      <th>Quote_asset_volume</th>\n      <th>Number_of_trades</th>\n      <th>Taker_buy_base_asset_volume</th>\n      <th>Taker_buy_quote_asset_volume</th>\n      <th>Ignore</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1600165560</td>\n      <td>10688.12</td>\n      <td>10691.14</td>\n      <td>10684.88</td>\n      <td>10684.88</td>\n      <td>21.529835</td>\n      <td>1600165619</td>\n      <td>230126.587773</td>\n      <td>373.0</td>\n      <td>10.279415</td>\n      <td>109864.149822</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1600165620</td>\n      <td>10684.88</td>\n      <td>10686.15</td>\n      <td>10681.84</td>\n      <td>10685.99</td>\n      <td>18.487428</td>\n      <td>1600165679</td>\n      <td>197536.180849</td>\n      <td>336.0</td>\n      <td>8.256498</td>\n      <td>88223.566054</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1600165680</td>\n      <td>10686.00</td>\n      <td>10687.65</td>\n      <td>10684.92</td>\n      <td>10687.09</td>\n      <td>22.246376</td>\n      <td>1600165739</td>\n      <td>237738.839831</td>\n      <td>415.0</td>\n      <td>13.378805</td>\n      <td>142975.243246</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1600165740</td>\n      <td>10687.09</td>\n      <td>10689.54</td>\n      <td>10683.86</td>\n      <td>10687.26</td>\n      <td>18.818481</td>\n      <td>1600165799</td>\n      <td>201100.293663</td>\n      <td>539.0</td>\n      <td>9.062957</td>\n      <td>96849.611844</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1600165800</td>\n      <td>10687.26</td>\n      <td>10687.26</td>\n      <td>10683.71</td>\n      <td>10685.76</td>\n      <td>38.281582</td>\n      <td>1600165859</td>\n      <td>409068.511314</td>\n      <td>534.0</td>\n      <td>16.799813</td>\n      <td>179523.708531</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>494</th>\n      <td>1600195200</td>\n      <td>10762.43</td>\n      <td>10763.48</td>\n      <td>10760.35</td>\n      <td>10760.75</td>\n      <td>8.572210</td>\n      <td>1600195259</td>\n      <td>92253.016477</td>\n      <td>292.0</td>\n      <td>2.394778</td>\n      <td>25771.715413</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>495</th>\n      <td>1600195260</td>\n      <td>10760.75</td>\n      <td>10762.48</td>\n      <td>10759.30</td>\n      <td>10759.31</td>\n      <td>11.089815</td>\n      <td>1600195319</td>\n      <td>119341.014647</td>\n      <td>277.0</td>\n      <td>3.064458</td>\n      <td>32976.256534</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>496</th>\n      <td>1600195320</td>\n      <td>10759.30</td>\n      <td>10762.22</td>\n      <td>10755.39</td>\n      <td>10761.26</td>\n      <td>27.070820</td>\n      <td>1600195379</td>\n      <td>291245.877535</td>\n      <td>490.0</td>\n      <td>14.654896</td>\n      <td>157679.926758</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>497</th>\n      <td>1600195380</td>\n      <td>10761.26</td>\n      <td>10761.26</td>\n      <td>10751.74</td>\n      <td>10756.02</td>\n      <td>15.482246</td>\n      <td>1600195439</td>\n      <td>166520.446192</td>\n      <td>353.0</td>\n      <td>7.390407</td>\n      <td>79491.160961</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>498</th>\n      <td>1600195440</td>\n      <td>10755.61</td>\n      <td>10756.57</td>\n      <td>10748.03</td>\n      <td>10748.04</td>\n      <td>61.153777</td>\n      <td>1600195499</td>\n      <td>657520.935924</td>\n      <td>585.0</td>\n      <td>13.436657</td>\n      <td>144474.084684</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>499 rows × 12 columns</p>\n</div>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marcusmello/anansi.git",
    "keywords": "candlesticks,cryptocurrency,stock market,trading bot,finance",
    "license": "GPL-3.0-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "anansi-toolkit",
    "package_url": "https://pypi.org/project/anansi-toolkit/",
    "platform": "",
    "project_url": "https://pypi.org/project/anansi-toolkit/",
    "project_urls": {
      "Homepage": "https://github.com/marcusmello/anansi.git",
      "Repository": "https://gitlab.com/marcusmello/anansi.git"
    },
    "release_url": "https://pypi.org/project/anansi-toolkit/0.1.0/",
    "requires_dist": [
      "requests (>=2.24.0,<3.0.0)",
      "pendulum (>=2.1.0,<3.0.0)",
      "requests_mock (>=1.8.0,<2.0.0)",
      "pandas (>=1.0.5,<2.0.0)",
      "pony (>=0.7.13,<0.8.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "A tool to analyze data and perform operations in markets",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8320281,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c9dc90d1bb08456c9d13a62a3c35d3fe83f073eab4df706ff6248f4c971e7ad",
          "md5": "155d1458d3a867b0af883d914249b22b",
          "sha256": "8be3307289ca9202966b1a29bee668ec1e5cd24f03cc877a34d383c5c65d2dc9"
        },
        "downloads": -1,
        "filename": "anansi_toolkit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "155d1458d3a867b0af883d914249b22b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 36412,
        "upload_time": "2020-10-01T21:45:57",
        "upload_time_iso_8601": "2020-10-01T21:45:57.978057Z",
        "url": "https://files.pythonhosted.org/packages/0c/9d/c90d1bb08456c9d13a62a3c35d3fe83f073eab4df706ff6248f4c971e7ad/anansi_toolkit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d53aa6d01488b2686c8935c595bc5ca45434a965fd99c2ea77f2cb1dcdd0859",
          "md5": "2cd136fb231b92762b1114b910f2ba10",
          "sha256": "40ba930095c7295f7a3a868822d7b4d2e5a58a2073493322f049e981f748349c"
        },
        "downloads": -1,
        "filename": "anansi_toolkit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2cd136fb231b92762b1114b910f2ba10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 35657,
        "upload_time": "2020-10-01T21:46:00",
        "upload_time_iso_8601": "2020-10-01T21:46:00.891616Z",
        "url": "https://files.pythonhosted.org/packages/6d/53/aa6d01488b2686c8935c595bc5ca45434a965fd99c2ea77f2cb1dcdd0859/anansi_toolkit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c9dc90d1bb08456c9d13a62a3c35d3fe83f073eab4df706ff6248f4c971e7ad",
        "md5": "155d1458d3a867b0af883d914249b22b",
        "sha256": "8be3307289ca9202966b1a29bee668ec1e5cd24f03cc877a34d383c5c65d2dc9"
      },
      "downloads": -1,
      "filename": "anansi_toolkit-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "155d1458d3a867b0af883d914249b22b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 36412,
      "upload_time": "2020-10-01T21:45:57",
      "upload_time_iso_8601": "2020-10-01T21:45:57.978057Z",
      "url": "https://files.pythonhosted.org/packages/0c/9d/c90d1bb08456c9d13a62a3c35d3fe83f073eab4df706ff6248f4c971e7ad/anansi_toolkit-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d53aa6d01488b2686c8935c595bc5ca45434a965fd99c2ea77f2cb1dcdd0859",
        "md5": "2cd136fb231b92762b1114b910f2ba10",
        "sha256": "40ba930095c7295f7a3a868822d7b4d2e5a58a2073493322f049e981f748349c"
      },
      "downloads": -1,
      "filename": "anansi_toolkit-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2cd136fb231b92762b1114b910f2ba10",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 35657,
      "upload_time": "2020-10-01T21:46:00",
      "upload_time_iso_8601": "2020-10-01T21:46:00.891616Z",
      "url": "https://files.pythonhosted.org/packages/6d/53/aa6d01488b2686c8935c595bc5ca45434a965fd99c2ea77f2cb1dcdd0859/anansi_toolkit-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}