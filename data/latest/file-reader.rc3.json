{
  "info": {
    "author": "Marc Rijken",
    "author_email": "marc@rijken.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# file_reader\n\n![Build](https://github.com/mrijken/file_reader/workflows/CI/badge.svg)\n![Hits](https://hitcounter.pythonanywhere.com/count/tag.svg?url=https%3A%2F%2Fgithub.com%2Fmrijken%2Ffile_reader)\n\n## Read almost all files from almost anywhere with one API\n\nUniform file reader for a lot of different file storages, like\n\n- local filesystem\n- http(s)\n- ftp(s)\n- smb\n- sftp\n\nImport dependencies for doctest\n\n    >>> import file_reader\n    >>> import file_reader.hosts\n    >>> import pytest\n\n## Usage\n\n### Construct a Host and a Path\n\nTo read a file, you have to instantiate a host (like FTPHost) and get a path from it\n\n    >>> host = file_reader.hosts.ftp.FTPHost('ftp.nluug.nl')\n    >>> path = host / 'pub' / 'os' / 'Linux' / 'distr' / 'ubuntu-releases' / 'FOOTER.html'\n\n    or\n\n    >>> path = host.get_path(\"pub/os/Linux/distr/ubuntu-releases/FOOTER.html\")\n\n    >>> path\n    Path(FTPHost(ftp.nluug.nl:21)/pub/os/Linux/distr/ubuntu-releases/FOOTER.html)\n\nYou can use that path to read the contents.\n\n\n### Accces the conents like a file\n\nUse it as a regular file object:\n\n- with or without a context managers\n\n    >>> with path.open() as f:\n    ...     f.read()\n    b'\\n</div></body></html>\\n'\n\n    >>> with path.open('b') as f:\n    ...     f.read()\n    b'\\n</div></body></html>\\n'\n\n    >>> with path.open('t') as f:\n    ...     f.read()\n    '\\n</div></body></html>\\n'\n\n### Access the contents directly\n\nRead the content direct from the path as text:\n\n    >>> path.read_text()\n    '\\n</div></body></html>\\n'\n\nor as binary:\n\n    >>> path.read_bytes()\n    b'\\n</div></body></html>\\n'\n\n### Create a Path from an url\n\nYou can construct a Host and Path by parsing an url, like:\n\n    >>> file_reader.base.Host.from_url(\"ftp://marc:secret@ftp.nluug.nl/pub/os/Linux/distr/ubuntu-releases/FOOTER.html\")\n    Path(FTPHost(ftp.nluug.nl:21)/pub/os/Linux/distr/ubuntu-releases/FOOTER.html)\n\n    >>> file_reader.base.Host.from_url(\"http://marc:secret@nu.nl/robots.txt\")\n    Path(HttpHost(nu.nl:80)/robots.txt)\n\n    >>> file_reader.base.Host.from_url(\"package://file_reader/__init__.py\")\n    Path(Package(file_reader)/__init__.py)\n\n## Possible hosts\n\nFor every supported file location, a host is defined which knows how to access the file. The following\nhosts are supported\n\n### System\n\nThis is the local filesystem of your machine. It can access all files from all already mounted drives.\nIt will use the credentials of the user who is running the python process.\n\nYou can use a path relative to the working directory\n\n    >>> file_reader.hosts.local.LocalHost() / \"file_reader\" / \"__init__.py\"\n    Path(LocalHost(.)/file_reader/__init__.py)\n\nA path relative to the home dir of the current user can be used\n\n    >>> file_reader.hosts.local.LocalHost(home_dir=True) / \".ssh\" / \"id_rsa.pub\"\n    Path(LocalHost(/home/...)/.ssh/id_rsa.pub)\n\nOr an absolute path can be used:\n\n    >>> file_reader.hosts.local.LocalHost(root=True) / \"etc\" / \"hosts\"\n    Path(LocalHost(/)/etc/hosts)\n\n\n### HTTP(S)\n\nVia the GET method a file from a HTTP(S) location will be get.\n\n    >>> path = file_reader.hosts.http.HttpHost(\"nu.nl\") / \"robots.txt\"\n    >>> path\n    Path(HttpHost(nu.nl:80)/robots.txt)\n\n    >>> file_reader.base.Host.from_url(\"http://nu.nl/robots.txt\")\n    Path(HttpHost(nu.nl:80)/robots.txt)\n\n    >>> \"User-agent\" in path.read_text()\n    True\n    >>> path = file_reader.hosts.http.HttpsHost(\"nu.nl\") / \"robots.txt\"\n    >>> path\n    Path(HttpsHost(nu.nl:443)/robots.txt)\n    >>> \"User-agent\" in path.read_text()\n    True\n\nThe ssl certificate of sites will be checked unless you disable it.\n\n    >>> path = file_reader.hosts.http.HttpsHost(\"expired.badssl.com\", verify_ssl=True)\n    >>> import requests.exceptions\n    >>> with pytest.raises(requests.exceptions.SSLError):\n    ...     path.read_text()\n\n    >>> path = file_reader.hosts.http.HttpsHost(\"expired.badssl.com\", verify_ssl=False)\n    >>> \"expired.<br>badssl.com\" in path.read_text()\n    True\n\nYou can also specify an optional username and password for basic authentication.\nLater on, we will add other authentication providers, like certificate or (Authroization) header.\n\n    >>> path = file_reader.hosts.http.HttpsHost(\"nu.nl\", auth=file_reader.auth.UsernamePassword(\"name\", \"secret\")) / \"robots.txt\"\n\n\n### FTP(S)\n\nYou can access ftp(s) sites:\n\n    >>> path = file_reader.hosts.ftp.FTPHost(\"ftp.nluug.nl\") / \"pub\" / \"os\" / \"Linux\" / \"distr\" / \"ubuntu-releases\" / \"FOOTER.html\"\n    >>> path\n    Path(FTPHost(ftp.nluug.nl:21)/pub/os/Linux/distr/ubuntu-releases/FOOTER.html)\n\n    >>> file_reader.base.Host.from_url(\"ftp://ftp.nluug.nl/pub/os/Linux/distr/ubuntu-releases/FOOTER.html\")\n    Path(FTPHost(ftp.nluug.nl:21)/pub/os/Linux/distr/ubuntu-releases/FOOTER.html)\n\n    >>> \"</div></body></html>\" in path.read_text()\n    True\n\n    >>> path = file_reader.hosts.ftp.FTPHost(\"test.rebex.net\", auth=file_reader.auth.UsernamePassword(\"demo\", \"password\")) / \"pub\" / \"example\" / \"readme.txt\"\n    >>> \"Welcome\" in path.read_text()\n    True\n\n    >>> path = file_reader.hosts.ftp.FTPSHost(\"test.rebex.net\", port=990, auth=file_reader.auth.UsernamePassword(\"demo\", \"password\")) / \"pub\" / \"example\" / \"readme.txt\"\n    >>> path\n    Path(FTPSHost(test.rebex.net:990)/pub/example/readme.txt)\n\n    >>> file_reader.base.Host.from_url(\"ftps://test.rebex.net:990/pub/example/readme.txt\")\n    Path(FTPSHost(test.rebex.net:990)/pub/example/readme.txt)\n\n    >>> \"Welcome\" in path.read_text()\n    True\n\n\n### SFTP\n\n    Note: Install with `pip install file_reader[ssh] to actually use SFTP\n\n    >>> file_reader.hosts.sftp.SFTPHost(\"test.rebex.net\", auth=file_reader.auth.UsernamePassword(\"demo\", \"password\"), auto_add_host_key=True) / \"pub\" / \"example\" / \"readme.txt\"\n    Path(SFTPHost(test.rebex.net:22)/pub/example/readme.txt)\n\n    >>> file_reader.base.Host.from_url(\"sftp://test.rebex.net/pub/example/readme.txt\")\n    Path(SFTPHost(test.rebex.net:22)/pub/example/readme.txt)\n\n\n### SMB\n\n    Note: Install with `pip install file_reader[smb] to actually use SMB\n\n    >>> file_reader.hosts.smb.SmbHost(\"server\") / \"share\" / \"folder\" / \"readme.txt\"\n    Path(SmbHost(server)/share/folder/readme.txt)\n\n    >>> file_reader.base.Host.from_url(\"smb://server/share/folder/readme.txt\")\n    Path(SmbHost(server)/share/folder/readme.txt)\n\n\n### S3\n\n    Note: Install with `pip install file_reader[s3] to actually use S3\n\n    >>> file_reader.hosts.s3.S3Host(\"filereaderpublic\") / \"test_folder\" / \"test_folder_2\" / \"test.txt\"\n    Path(S3Host(filereaderpublic)/test_folder/test_folder_2/test.txt)\n\n    >>> file_reader.base.Host.from_url(\"s3://filereaderpublic/test_folder/test_folder_2/test.txt\")\n    Path(S3Host(filereaderpublic)/test_folder/test_folder_2/test.txt)\n\n### HDFS\n\n    Note: Install with `pip install file_reader[hdfs] to actually use HDFS\n\n    >>> file_reader.hosts.hdfs.HdfsHost(\"localhost\") / \"pub\" / \"example\" / \"readme.txt\"\n    Path(HdfsHost(localhost)/pub/example/readme.txt)\n\n    >>> file_reader.base.Host.from_url(\"hdfs://localhost/pub/example/readme.txt\")\n    Path(HdfsHost(localhost)/pub/example/readme.txt)\n\n\n### Package\n\nYou can load every file within an installed Python Package, whether it is a Python or distributed data file.\n\n    >>> path = file_reader.hosts.package.PythonPackage(\"file_reader\") / \"assets\" / \"test.txt\"\n    >>> \"test\" in path.read_text()\n    True\n\n## Archives\n\nAlso files in archives can be accessed.\n\n    >>> path = file_reader.hosts.package.PythonPackage(\"file_reader\") / \"assets\" / \"test.zip\" / \"folder\" / \"file3.txt\"\n    >>> \"file3\" in path.read_text()\n    True\n\nWhen a path element has one of the known archive extensions, it will be read as an archive:\n\n- .tar (tar)\n- .tgz (tar)\n- .tar.gz (tar)\n- .zip (zip)\n- .dep (zip)\n\n\n## FAQ\n\nQ Why do you only support reading files?\n\nA For a lot of use cases reading files is sufficient. When you want to do more, like making directories, adding files,\nremoving files and changing permissions, the differences between the hosts became very big. Too big to use just\none API.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mrijken/file_reader",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "file-reader",
    "package_url": "https://pypi.org/project/file-reader/",
    "platform": "",
    "project_url": "https://pypi.org/project/file-reader/",
    "project_urls": {
      "Homepage": "https://github.com/mrijken/file_reader",
      "Repository": "https://github.com/mrijken/file_reader"
    },
    "release_url": "https://pypi.org/project/file-reader/0.2.1/",
    "requires_dist": [
      "boto3 (>=1.16.0,<2.0.0); extra == \"s3\" or extra == \"all\"",
      "smbprotocol (>=1.2.0,<2.0.0); extra == \"smb\" or extra == \"all\"",
      "paramiko (>=2.7.2,<3.0.0); extra == \"sftp\" or extra == \"ssh\" or extra == \"all\"",
      "requests (>=2.24.0,<3.0.0)",
      "pyarrow (>=2.0.0,<3.0.0); extra == \"hdfs\" or extra == \"all\""
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "A tool for reading file from different sources with a single interface",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10360194,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f29c044206a0c0109dca01629c170aba93435e9d288bb567f6dd7eb844a9de96",
          "md5": "05b4f872ec7596f56fa757bd57fcb5df",
          "sha256": "d9555018f6b03f4e55cb82c37d34bdd68aed8b1a20aad1c038d5cad0c3ec3ccd"
        },
        "downloads": -1,
        "filename": "file_reader-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05b4f872ec7596f56fa757bd57fcb5df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 12745,
        "upload_time": "2021-03-10T19:53:00",
        "upload_time_iso_8601": "2021-03-10T19:53:00.527718Z",
        "url": "https://files.pythonhosted.org/packages/f2/9c/044206a0c0109dca01629c170aba93435e9d288bb567f6dd7eb844a9de96/file_reader-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c860387f0acfdd675d80b19006ad89d3ac17b7b5bc8e71898b7e009325782a09",
          "md5": "a8a5f66a96f07805c081ac9226960993",
          "sha256": "074753201542c6b05b6e34bdd3796f88b17da5ea9baf693cabfdce196e64f36f"
        },
        "downloads": -1,
        "filename": "file_reader-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8a5f66a96f07805c081ac9226960993",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 7567,
        "upload_time": "2021-03-10T19:53:01",
        "upload_time_iso_8601": "2021-03-10T19:53:01.394030Z",
        "url": "https://files.pythonhosted.org/packages/c8/60/387f0acfdd675d80b19006ad89d3ac17b7b5bc8e71898b7e009325782a09/file_reader-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7b63b678f929bd24e5ddfc8ed8900e512e3d9076e79213b1acaaaf1018988d5",
          "md5": "0b1dd7280bbb21f1517c8a293941ebda",
          "sha256": "001850f1a535912488a065f556b0177f163000a4ec5f72a15d96c53972f277a1"
        },
        "downloads": -1,
        "filename": "file_reader-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b1dd7280bbb21f1517c8a293941ebda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 12763,
        "upload_time": "2021-05-14T20:19:57",
        "upload_time_iso_8601": "2021-05-14T20:19:57.037656Z",
        "url": "https://files.pythonhosted.org/packages/d7/b6/3b678f929bd24e5ddfc8ed8900e512e3d9076e79213b1acaaaf1018988d5/file_reader-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ecb7956ab9484eb70b4786534d17e8d5375921d58c28f5785274a75b762d365",
          "md5": "2ea51b9a78aee4798ca90ff83b0328a9",
          "sha256": "ab6de8ff15853637c70859e908d23b135522765597669af6b6c3b0f8febc6b06"
        },
        "downloads": -1,
        "filename": "file_reader-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ea51b9a78aee4798ca90ff83b0328a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 7577,
        "upload_time": "2021-05-14T20:19:58",
        "upload_time_iso_8601": "2021-05-14T20:19:58.637669Z",
        "url": "https://files.pythonhosted.org/packages/7e/cb/7956ab9484eb70b4786534d17e8d5375921d58c28f5785274a75b762d365/file_reader-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d369f5c0a15bde2588af5a4e310a834b7b1ba2eec1730488816a7a201d4fef1",
          "md5": "6ae896558eab41b603334799ade60e1d",
          "sha256": "4fed8a5e943edee30f6c7697b10d01f8c528565dd80e1234730d25d85a25bdca"
        },
        "downloads": -1,
        "filename": "file_reader-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ae896558eab41b603334799ade60e1d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 14992,
        "upload_time": "2021-05-14T20:29:46",
        "upload_time_iso_8601": "2021-05-14T20:29:46.747299Z",
        "url": "https://files.pythonhosted.org/packages/7d/36/9f5c0a15bde2588af5a4e310a834b7b1ba2eec1730488816a7a201d4fef1/file_reader-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "331a42e0f7bc189426eb10e41d1d223e2a4537891ab94922976d73010668b975",
          "md5": "1320ed17040ef441d994252865767063",
          "sha256": "12cbf5c806b7d9ab8c6344f9a657837bbdd56b9381fc270aa521cfee6fbd2b63"
        },
        "downloads": -1,
        "filename": "file_reader-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1320ed17040ef441d994252865767063",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 12531,
        "upload_time": "2021-05-14T20:29:47",
        "upload_time_iso_8601": "2021-05-14T20:29:47.730784Z",
        "url": "https://files.pythonhosted.org/packages/33/1a/42e0f7bc189426eb10e41d1d223e2a4537891ab94922976d73010668b975/file_reader-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d369f5c0a15bde2588af5a4e310a834b7b1ba2eec1730488816a7a201d4fef1",
        "md5": "6ae896558eab41b603334799ade60e1d",
        "sha256": "4fed8a5e943edee30f6c7697b10d01f8c528565dd80e1234730d25d85a25bdca"
      },
      "downloads": -1,
      "filename": "file_reader-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6ae896558eab41b603334799ade60e1d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 14992,
      "upload_time": "2021-05-14T20:29:46",
      "upload_time_iso_8601": "2021-05-14T20:29:46.747299Z",
      "url": "https://files.pythonhosted.org/packages/7d/36/9f5c0a15bde2588af5a4e310a834b7b1ba2eec1730488816a7a201d4fef1/file_reader-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "331a42e0f7bc189426eb10e41d1d223e2a4537891ab94922976d73010668b975",
        "md5": "1320ed17040ef441d994252865767063",
        "sha256": "12cbf5c806b7d9ab8c6344f9a657837bbdd56b9381fc270aa521cfee6fbd2b63"
      },
      "downloads": -1,
      "filename": "file_reader-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1320ed17040ef441d994252865767063",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 12531,
      "upload_time": "2021-05-14T20:29:47",
      "upload_time_iso_8601": "2021-05-14T20:29:47.730784Z",
      "url": "https://files.pythonhosted.org/packages/33/1a/42e0f7bc189426eb10e41d1d223e2a4537891ab94922976d73010668b975/file_reader-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}