{
  "info": {
    "author": "wayhome",
    "author_email": "y@zhihu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Tache\n[![Build Status](https://travis-ci.org/zhihu/tache.svg?branch=master)](https://travis-ci.org/zhihu/tache)\n[![Pypi Status](https://img.shields.io/pypi/v/tache.svg)](https://pypi.python.org/pypi/tache)\n\nTache 是一个 Python 的缓存框架。它基于如下的目标而设计:\n\n* 同时支持 Python2 和 Python3\n* 支持缓存普通函数/实例方法/类方法/静态方法\n* 支持 Batch 批量缓存\n* 支持基于 Tag 的缓存和失效\n* 支持基于参数显式声明 key 格式\n\n [Documention](http://zhihu.github.io/tache)\n \n [项目地址](https://github.com/zhihu/tache)\n\n\nContents\n---------\n* [Tag 详细用法](docs/advance_tag.md)\n* [使用关键字参数](docs/use_kwargs.md)\n* [Cache 空值与缓存穿透](docs/cache_null_and_miss.md)\n\n\n## Features\n\n* 默认缓存空值，防止穿透\n* 基于tag 批量失效缓存\n* batch 批量缓存\n* 支持 `YAML` `JSON` `PICKLE` 多种 Backend Serializer\n\n## Getting Started\n\n* 基本用法\n\n```\nimport random\nimport fakeredis\nfrom tache import RedisCache\n\nredis_client = fakeredis.FakeStrictRedis()\ncache = RedisCache(conn=redis_client, format=\"JSON\")\n\n@cache.cached()\ndef add(a, b):\n    return a + b + random.randint(1,100)\n\nresult1 = add(5, 6)\n# 缓存生效值不变\nassert add(5, 6) == result1\n# 失效缓存\nadd.invalidate(5, 6)\nassert add(5, 6) != result1\n```\n\n* 基于 tag 的批量缓存失效\n\ntag 可以是固定也可以是动态的，其中动态参数代表在函数中的参数位置。\n失效某个 tag 时，代表这个函数下拥有相同 tag 的缓存全部失效。\n\n```\n@cache.cached(tags=[\"a:{0}\"])\ndef add(a, b):\n    return a + b + random.randint(1,100)\n\nresult1 = add(5, 6) \nresult2 = add(5, 7)\nadd.invalidate_tag(\"a:5\")\nassert result1 != add(5, 6) \nassert result2 != add(5, 7)\n```\n\n\n* refresh 刷新缓存\n\n当调用refresh 时，将会重新刷新缓存并返回最新值。\n\n\n```\nclass A(object):\n\n    def __init__(self):\n        self.extra = 0\n\n    @cache.cached()\n    def add(self, a, b):\n        self.extra += 1\n        return a + b + self.extra\n\na = A()\nassert a.add(5, 6) == 12\nassert a.extra == 1\nassert a.add.refresh(5, 6) == 13\nassert a.extra == 2\n```\n\n* batch 缓存模式\n\n```\n@cache.batch()\ndef get_comments(*comment_ids):\n    return [get_comment(c) for c in comment_ids]\n\nget_comments(1,2,3,4,5) # no cache, 调用完毕全部缓存\nget_comments(2,3,4,5,6) # 2,3,4,5 从缓存中取，6 在调用完缓存\nget_comments.invalidate(3,4,5) # 失效 3,4,5 的缓存\n```\n\n* 显式声明 Key\n\nTache 允许你显式声明 Key 的生成规则， 不论代码如何重构, 生成的 key 都不会改变。\n\n```\nclass B:\n\n    def __init__(self):\n        self.count = 0\n\n    @cache.cached(\"counter.B.add|{0}-{1}\")\n    def add(self, a, b):\n        self.count += 1\n        return a + b + self.count\n```\n\n\n## Notice\n\n* 支持 `classmethod/staticmethod` 描述符, 但在使用 `classmethod` 时目前必须把\n`classmethod` 放在内层\n\n\n```\nclass AC(object):\n\n    @cache.cached()\n    @classmethod\n    def add(cls, a, b):\n        return a + b + random.randint(1,100)\n```\n\n* 设置 namespace, 处理对象属性修改的问题\n\nkey 的生成规则默认为 `namespace:module.classname.func|arg1-arg2|tag1-tag2`。\n其中 `namespace` 为空, `classname` 不存在时也为空。\n\n```\nclass A(object):\n    @cache.cache(namespace=\"v1\")\n    def add(self, a, b):\n        return db.execute(sql).fetchone()\n```\n\n这个例子中，如果数据库字段发生更改，可以通过修改 namespace 的方式，让新老代码使用不同的缓存结果。",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zhihu/tache",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tache",
    "package_url": "https://pypi.org/project/tache/",
    "platform": "",
    "project_url": "https://pypi.org/project/tache/",
    "project_urls": {
      "Homepage": "https://github.com/zhihu/tache"
    },
    "release_url": "https://pypi.org/project/tache/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A tag based invalidation caching library",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6093313,
  "releases": {
    "0.1.0": [],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21c985388a27769d698cd71e81f945bbc09e5df09d8de29b67471015ecef9b49",
          "md5": "c0ed853430cb153397ae76ff7b9176ff",
          "sha256": "250a386e0cc01048638cb8e2aaab23764f4cf3e6cfadc9ff9cbb597b2ed8b075"
        },
        "downloads": -1,
        "filename": "tache-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c0ed853430cb153397ae76ff7b9176ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9412,
        "upload_time": "2017-12-20T06:09:20",
        "upload_time_iso_8601": "2017-12-20T06:09:20.137864Z",
        "url": "https://files.pythonhosted.org/packages/21/c9/85388a27769d698cd71e81f945bbc09e5df09d8de29b67471015ecef9b49/tache-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df0598a90c919a91db9406e7000b9a4e2b4145625171c96e1b471e06aa66a578",
          "md5": "9ee4edd944da54a1b55fc44d77b48a90",
          "sha256": "5b5c3d886bfc7d79002a6fd3d9ca07cea5e4711385c357660dd8bfdfbaa115a5"
        },
        "downloads": -1,
        "filename": "tache-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9ee4edd944da54a1b55fc44d77b48a90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10516,
        "upload_time": "2019-11-07T13:27:34",
        "upload_time_iso_8601": "2019-11-07T13:27:34.825043Z",
        "url": "https://files.pythonhosted.org/packages/df/05/98a90c919a91db9406e7000b9a4e2b4145625171c96e1b471e06aa66a578/tache-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df0598a90c919a91db9406e7000b9a4e2b4145625171c96e1b471e06aa66a578",
        "md5": "9ee4edd944da54a1b55fc44d77b48a90",
        "sha256": "5b5c3d886bfc7d79002a6fd3d9ca07cea5e4711385c357660dd8bfdfbaa115a5"
      },
      "downloads": -1,
      "filename": "tache-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9ee4edd944da54a1b55fc44d77b48a90",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10516,
      "upload_time": "2019-11-07T13:27:34",
      "upload_time_iso_8601": "2019-11-07T13:27:34.825043Z",
      "url": "https://files.pythonhosted.org/packages/df/05/98a90c919a91db9406e7000b9a4e2b4145625171c96e1b471e06aa66a578/tache-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}