{
  "info": {
    "author": "Val Neekman",
    "author_email": "info@neekware.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python IPware (A Python Package)\n\n**A python package for server applications to retrieve client's IP address**\n\n[![status-image]][status-link]\n[![version-image]][version-link]\n[![coverage-image]][coverage-link]\n\n# Overview\n\n**Best attempt** to get client's IP address while keeping it **DRY**.\n\n# Notice\n\nThere is no perfect `out-of-the-box` solution against fake IP addresses, aka `IP Address Spoofing`.\nYou are encouraged to read the ([Advanced users](README.md#advanced-users)) section of this page and\nuse `proxy_trusted_list` and/or `proxy_count` features to match your needs, especially `if` you are\nplanning to include `ipware` in any authentication, security or `anti-fraud` related architecture.\n\nThis is an open source project, with the source code visible to all. Therefore, it may be exploited through unimplemented, or improperly implemented features.\n\nPlease use ipware `ONLY` as a complement to your `firewall` security measures!\n\n# How to install\n\n    1. easy_install python-ipware\n    2. pip install python-ipware\n    3. git clone http:#github.com/un33k/python-ipware\n        a. cd python-ipware\n        b. run python setup.py install\n    4. wget https:#github.com/un33k/python-ipware/zipball/master\n        a. unzip the downloaded file\n        b. cd into python-ipware-* directory\n        c. run python setup.py install\n\n# How to use\n\n```python\n# In a view or a middleware where the `request` object is available\nimport ipware\nipware = Ipware() # default values\nip, proxy_verified = ipware.get_client_ip(meta)\nif ip: # IPv4Address() or IPv6Address() object\n    # ip object has the following properties\n    # ip.is_global (is globally routable)\n    # ip.is_private (is private ip address)\n    # is_loopback (is loopback address)\n# proxy_verified tells if request came through proxies (count / trusted)\n\n# do something with the ip address (e.g. pass it down through the request)\n# note: ip address doesn't change often, so better cache it for performance,\n# try to have distinct session ID for public and anonymous users to cache the ip address\n\n```\n\n# Advanced users:\n\n|        Flags ⇩ | ⇩ Description                                                                                                                                                                                                                                                                                                                                                     |\n| -------------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|      `count` ⇨ | : Total number of expected proxies (pattern: `client, proxy1, ..., proxy2`)<br>: if `count = 0` then `client`<br>: if `count = 1` then `client, proxy1`<br>: if `count = 2` then `client, proxy1, proxy2` <br>: if `count = 3` then `client, proxy1, proxy2 proxy3`                                                                                               |\n| `proxy_list` ⇨ | : List of trusted proxies (pattern: `client, proxy1, ..., proxy2`)<br>: if `proxy_list = ['10.1.']` then `client, 10.1.1.1` OR `client, proxy1, 10.1.1.1`<br>: if `proxy_list = ['10.1', '10.2.']` then `client, 10.1.1.1` OR `client, proxy1, 10.2.2.2`<br>: if `proxy_list = ['10.1', '10.2.']` then `client, 10.1.1.1 10.2.2.2` OR `client, 10.1.1.1 10.2.2.2` |\n| `publicOnly` ⇨ | : Returns only public and internet routable IP or null                                                                                                                                                                                                                                                                                                            |\n\n|     Output Field ⇩ | ⇩ Description                                                                     |\n| -----------------: | :-------------------------------------------------------------------------------- |\n|             `ip` ⇨ | : Client IP address object of type IPv4Address() or IPv6Address()                 |\n| `isRouteTrusted` ⇨ | : If proxy `count` and/or `proxy_list` provided and matched, `true`, else `false` |\n\n### Precedence Order\n\nThe client IP address can be found in one or more request headers attributes. The lookup order is top to bottom and the default attributes are as follow.\n\n```python\n# The default meta precedence order - you can be more specific as per your configuration\nrequest_headers_precedence_order = (\n  \"X_FORWARDED_FOR\", # Load balancers or proxies such as AWS ELB (default client is `leftmost` [`<client>, <proxy1>, <proxy2>`])\n  \"HTTP_X_FORWARDED_FOR\", # Similar to X_FORWARDED_TO\n  \"HTTP_CLIENT_IP\", # Standard headers used by providers such as Amazon EC2, Heroku etc.\n  \"HTTP_X_REAL_IP\",\n  \"HTTP_X_FORWARDED\",\n  \"HTTP_X_CLUSTER_CLIENT_IP\",\n  \"HTTP_FORWARDED_FOR\",\n  \"HTTP_FORWARDED\",\n  \"HTTP_VIA\",\n  \"X-REAL-IP\", # NGINX\n  \"X-CLUSTER-CLIENT-IP\", # Rackspace Cloud Load Balancers\n  \"X_FORWARDED\",\n  \"FORWARDED_FOR\",\n  \"CF-CONNECTING-IP\", # CloudFlare\n  \"TRUE-CLIENT-IP\", # CloudFlare Enterprise,\n  \"FASTLY-CLIENT-IP\", # Firebase, Fastly\n  \"FORWARDED\",\n)\n\n\n```\n\nYou can customize the order by providing your own list during initialization when calling `IpWare()`.\n\n```python\n# specific meta key\nipware = IpWare(precedence=(\"X_FORWARDED_FOR\"))\n\n# multiple meta keys\nipware = IpWare(precedence=(\"X_FORWARDED_FOR\", \"HTTP_X_FORWARDED_FOR\"))\n\n# usage is just to pass in the http request headers\n\n# Django (request.META)\nip, proxy_verified = ipware.get_client_ip(meta=request.META)\n\n# Flask (request.environ)\nip, proxy_verified = ipware.get_client_ip(meta=request.environ)\n\n# ... etc.\n\n```\n\n### Trusted Proxies\n\nIf your node server is behind one or more known proxy server(s), you can filter out unwanted requests\nby providing a `trusted proxy list`, or a known proxy `count`.\n\nYou can customize the proxy IP prefixes by providing your own list during initialization when calling `IpWare(proxy_trusted_list)`.\nYou can pass your custom list on every call, when calling the proxy-aware api to fetch the ip.\n\n```python\n# In the above scenario, use your load balancer IP address as a way to filter out unwanted requests.\nipware = IpWare(proxy_trusted_list=[\"198.84.193.157\"])\n\n\n# If you have multiple proxies, simply add them to the list\nipware = IpWare(proxy_trusted_list=[\"198.84.193.157\", \"198.84.193.158\"])\n\n# For proxy servers with fixed sub-domain and dynamic IP, use the following pattern.\nipware = IpWare(proxy_trusted_list=[\"177.139.\", \"177.140\"])\n\n# usage: non-strict mode (X-Forwarded-For: <fake>, <client>, <proxy1>, <proxy2>)\n# The request went through our <proxy1> and <proxy2>, then our server\n# We choose the <client> ip address to the left our <proxy1> and ignore other ips\nip, trusted_route = self.ipware.get_client_ip(meta=request.META)\n\n\n# usage: strict mode (X-Forwarded-For: <client>, <proxy1>, <proxy2>)\n# The request went through our <proxy1> and <proxy2>, then our server\n# Total ip address are total trusted proxies + client ip\n# We don't allow far-end proxies, or fake addresses (exact or None)\nip, trusted_route = self.ipware.get_client_ip(meta=request.META, strict=True)\n```\n\nIn the following `example`, your public load balancer (LB) can be seen as a `trusted` proxy.\n\n```\n`Real` Client <public> <-> <public> LB (Server) <private> <-----> <private> Django Server\n                                                             ^\n                                                             |\n`Fake` Client <private> <-> <private> LB (Server) <private> -+\n```\n\n### Proxy Count\n\nIf your python server is behind a `known` number of proxies, but you deploy on multiple providers and don't want to track proxy IPs, you still can filter out unwanted requests by providing proxy `count`.\n\nYou can customize the proxy count by providing your `proxy_count` during initialization when calling `IpWare(proxy_count=2)`.\n\n```python\n# In the above scenario, the total number of proxies can be used as a way to filter out unwanted requests.\nimport ipware\n\n# enforce proxy count\nipware = IpWare(proxy_count=1)\n\n# enforce proxy count and trusted proxies\nipware = IpWare(proxy_count=1, proxy_trusted_list=[\"198.84.193.157\"])\n\n\n# usage: non-strict mode (X-Forwarded-For: <fake>, <client>, <proxy1>, <proxy2>)\n# total number of ip addresses are greater than the total count\nip, trusted_route = self.ipware.get_client_ip(meta=request.META)\n\n\n# usage: strict mode (X-Forwarded-For: <client>, <proxy1>, <proxy2>)\n# total number of ip addresses are exactly equal to client ip + proxy_count\nip, trusted_route = self.ipware.get_client_ip(meta=request.META, strict=True)\n```\n\nIn the following `example`, your public load balancer (LB) can be seen as the `only` proxy.\n\n```\n`Real` Client <public> <-> <public> LB (Server) <private> <---> <private> Node Server\n                                                            ^\n                                                            |\n                                `Fake` Client  <private> ---+\n```\n\n### Public IP Address ONLY (routable on the internet)\n\n```python\n# We make best attempt to return the first public IP address based on header precedence\n# Then we fall back on private, followed by loopback\nimport ipware\n\n# no proxy enforce in this example\nipware = IpWare()\n\nip, _ = self.ipware.get_client_ip(meta=request.META)\n\nif ip.is_global:\n    print('Public IP')\nelse if ip.is_private:\n    print('Private IP')\nelse if ip.loopback:\n    print('Loopback IP')\n```\n\n### Originating Request\n\nPlease note that the [de-facto](https:#developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For) standard\nfor the originating client IP address is the `leftmost`as per`client, proxy1, proxy2`, and the `rightmost` proxy is the most\ntrusted proxy.\n\nHowever, in rare cases your network has a `custom` configuration where the `rightmost` IP address is that of the originating client. If that is the case, then indicate it when creating `IpWare(leftmost=False)`.\n\n# Running the tests\n\nTo run the tests against the current environment:\n\n    ./test.sh\n\n# License\n\nReleased under a ([MIT](https:#raw.githubusercontent.com/un33k/python-ipware/main/LICENSE)) license.\n\n# Version\n\nX.Y.Z Version\n\n    `MAJOR` version -- making incompatible API changes\n    `MINOR` version -- adding functionality in a backwards-compatible manner\n    `PATCH` version -- making backwards-compatible bug fixes\n\n[status-image]: https://github.com/un33k/python-ipware/actions/workflows/ci.yml/badge.svg\n[status-link]: https://github.com/un33k/python-ipware/actions/workflows/ci.yml\n[version-image]: https://img.shields.io/pypi/v/python-ipware.svg\n[version-link]: https://pypi.python.org/pypi/python-ipware\n[coverage-image]: https://coveralls.io/repos/github/un33k/python-ipware/badge.svg\n[coverage-link]: https://coveralls.io/github/un33k/python-ipware\n[download-image]: https://img.shields.io/pypi/dm/python-ipware.svg\n[download-link]: https://pypi.python.org/pypi/python-ipware\n\n# Sponsors\n\n[Neekware Inc.](http://neekware.com)\n\n# Need Support?\n\n[Neekware Inc.](http://neekware.com)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/un33k/python-ipware",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-ipware",
    "package_url": "https://pypi.org/project/python-ipware/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-ipware/",
    "project_urls": {
      "Homepage": "https://github.com/un33k/python-ipware"
    },
    "release_url": "https://pypi.org/project/python-ipware/0.9.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A Python package to retrieve user's IP address",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17198990,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "857bea915320c763d2285e0c1d954bbae1e2450e951c6888f106d412411ef074",
          "md5": "d3037b70f8c43bc269d7ac34f15fc61a",
          "sha256": "01b9fa589521c29d7573f69fc4855c6b95687f0029601b78fffef1eb17f1de27"
        },
        "downloads": -1,
        "filename": "python_ipware-0.9.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3037b70f8c43bc269d7ac34f15fc61a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 9230,
        "upload_time": "2023-03-08T01:18:08",
        "upload_time_iso_8601": "2023-03-08T01:18:08.654852Z",
        "url": "https://files.pythonhosted.org/packages/85/7b/ea915320c763d2285e0c1d954bbae1e2450e951c6888f106d412411ef074/python_ipware-0.9.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43473ed13e01a0749f487bef68e5e552f1cc0cc7b61001d637b0c3793bf79558",
          "md5": "22b6188402b74f4079a9fe181b189a8a",
          "sha256": "ee84cd16c2cf862faae197ad5f8fae6c75e4b1f40bb13357944a5d63ddc2a373"
        },
        "downloads": -1,
        "filename": "python-ipware-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "22b6188402b74f4079a9fe181b189a8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12605,
        "upload_time": "2023-03-08T01:18:10",
        "upload_time_iso_8601": "2023-03-08T01:18:10.438952Z",
        "url": "https://files.pythonhosted.org/packages/43/47/3ed13e01a0749f487bef68e5e552f1cc0cc7b61001d637b0c3793bf79558/python-ipware-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "857bea915320c763d2285e0c1d954bbae1e2450e951c6888f106d412411ef074",
        "md5": "d3037b70f8c43bc269d7ac34f15fc61a",
        "sha256": "01b9fa589521c29d7573f69fc4855c6b95687f0029601b78fffef1eb17f1de27"
      },
      "downloads": -1,
      "filename": "python_ipware-0.9.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d3037b70f8c43bc269d7ac34f15fc61a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 9230,
      "upload_time": "2023-03-08T01:18:08",
      "upload_time_iso_8601": "2023-03-08T01:18:08.654852Z",
      "url": "https://files.pythonhosted.org/packages/85/7b/ea915320c763d2285e0c1d954bbae1e2450e951c6888f106d412411ef074/python_ipware-0.9.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43473ed13e01a0749f487bef68e5e552f1cc0cc7b61001d637b0c3793bf79558",
        "md5": "22b6188402b74f4079a9fe181b189a8a",
        "sha256": "ee84cd16c2cf862faae197ad5f8fae6c75e4b1f40bb13357944a5d63ddc2a373"
      },
      "downloads": -1,
      "filename": "python-ipware-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "22b6188402b74f4079a9fe181b189a8a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12605,
      "upload_time": "2023-03-08T01:18:10",
      "upload_time_iso_8601": "2023-03-08T01:18:10.438952Z",
      "url": "https://files.pythonhosted.org/packages/43/47/3ed13e01a0749f487bef68e5e552f1cc0cc7b61001d637b0c3793bf79558/python-ipware-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}