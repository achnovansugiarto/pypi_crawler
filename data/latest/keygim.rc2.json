{
  "info": {
    "author": "Keywind",
    "author_email": "kevinwater127@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# keygim Package Documentation\n***\n##### This library provides various image utilities and a function to download images from Google search.\n\n##### There are two modules in this package.\n\n1. **keygim** - _used to download Google images_\n2. **imageUtils** - _image and basic utilities_\n\n##### To install this package, type in command prompt:\n\n    pip install keygim\n\n***\n## [1] Keywind Google Images\n\n#### (1-A) _LinkFormatter_ - Obtaining the Google Search URLs for each search string:\n\n###### LinkFormatter(stringList)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|stringList|_no_| | [ list-string type ] |\n\n###### self.fetch_links(self, large = False)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|large|_yes_|False|True, False|\n\n##### (1-A-1) Example of using LinkFormatter\n\n    from keygim.keygim import KeyGoogleImages\n    LinkFormatter = KeyGoogleImages.LinkFormatter\n    search_strings = [ \"landscape\", \"galaxies\" ]\n    large = False\n    link_list = LinkFormatter(search_strings).fetch_links(large = large)\n    print(link_list[0]) # \"https://www.google.com/search?q=landscape&tbm=isch\"\n    print(link_list[1]) # \"https://www.google.com/search?q=galaxies&tbm=isch\"\n\n#### (1-B) _GoogleImageDownloader_ - Downloading Google images provided a list of strings:\n\n###### GoogleImageDownloader(search_strings, mode = 0, driver_path = None)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|search_strings|_no_| | [ list-string type ] |\n|mode|_yes_|GoogleImageDownloader.MODE_CHROME|GoogleImageDownloader.MODE_CHROME, GoogleImageDownloader.MODE_FIREFOX|\n|driver_path|_yes_| None |None, [ string type ] |\n\n###### self.configure(**kwargs)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|folder_name|_yes_|None|None, [ string type ]|\n|hide_window|_yes_|False|True, False|\n|wait_load|_yes_|True|True, False|\n|search_large|_yes_|False|True, False|\n|save_search|_yes_|False|True, False|\n|item_wait|_yes_|1|[ integer/float (>=0) type ]|\n|images_per_page|_yes_|10|[ integer (>0) type ]|\n|verbose|_yes_|True| True, False|\n|url_timeout|_yes_|60|[ integer/float (>0) type ]|\n|load_timeout|_yes_|30|[ integer/float (>0) type ]|\n\nIf a folder name is provided, all images will be stored in that folder after download. Should the folder not already exist, that folder will be created. By default, each search string will be the name of the folder storing the corresponding images.\n\nTo scrape and download images in the background, set _**hide_window**_ to True.\n\nTo search images in large mode, set _**search_large**_ to True.\n\nTo wait between consecutive images, pass a number to _**item_wait**_ so that two images will be separated by _**time_wait**_ seconds.\n\nTo specify the number of images per search string, pass an integer to the argument _**images_per_page**_.\n\nTo hide the progress bar, set _**verbose**_ to False.\n\nTo specify the maximum number of seconds to connect to the direct link, pass a number to _**url_timeout**_.\n\nTo specify the maximum number of seconds to download an image, pass a number to _**load_timeout**_.\n\n###### self.download()\n\nCalling this function will initiate the downloading process.\n\n###### self.cleanup()\n\nCalling this function after finished downloading to remove corrupted image files in the folder.\n\n##### (1-B-1) Example of using GoogleImageDownloader\n\n    from keygim.keygim import KeyGoogleImages\n    GoogleImageDownloader = KeyGoogleImages.GoogleImageDownloader\n    search_strings = [ \"scenery\", \"galaxies\" ]\n    large = True\n    mode = GoogleImageDownloader.MODE_CHROME\n    driver_path = \"./chromedriver.exe\"\n    folder_name = \"./KGM_DEMO/\"\n    downloader = GoogleImageDownloader(search_strings, mode, driver_path)\n    downloader.configure(\n      folder_name = folder_name,\n      search_large = large\n    )\n    downloader.download()\n    downloader.cleanup()\n\n***\n\n## [2] Image Utilities\n\n#### (2-A) _ImageLoader_ - Loading images from disk:\n\n###### ImageLoader(filename, mode = ImageLoader.COLOR_BGR_3D)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|filename|_no_| | [ string type ] |\n|mode|_yes_|ImageLoader.COLOR_BGR_3D|ImageLoader.COLOR_GRAY_2D, ImageLoader.COLOR_GRAY_3D, ImageLoader.COLOR_BGR_3D, ImageLoader.COLOR_BGRA_3D, ImageLoader.COLOR_RGB_3D, ImageLoader.COLOR_RGBA_3D|\n\n###### self.load()\n\n###### ImageLoader.load_images(nameList, mode = ImageLoader.COLOR_BGR_3D)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|nameList|_no_| | [ list-string type ] |\n|mode|_yes_|ImageLoader.COLOR_BGR_3D|ImageLoader.COLOR_GRAY_2D, ImageLoader.COLOR_GRAY_3D, ImageLoader.COLOR_BGR_3D, ImageLoader.COLOR_BGRA_3D, ImageLoader.COLOR_RGB_3D, ImageLoader.COLOR_RGBA_3D|\n\n###### ImageLoader.load_images_from_folder(folderName, quantity = \"all\", shuffle = False)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|folderName|_no_| | [ string type ] |\n|quantity|_yes_|\"all\"|\"all\", [ integer (>0) type ] |\n|shuffle|_yes_|False|True, False|\n\n#### (2-B) _ImageSaver_ - Saving images to disk:\n\n###### ImageSaver(filename, mode = ImageLoader.COLOR_BGR_3D)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|filename|_no_| | [ string type ] |\n|mode|_yes_|ImageSaver.COLOR_BGR_3D|ImageSaver.COLOR_GRAY_2D, ImageSaver.COLOR_GRAY_3D, ImageSaver.COLOR_BGR_3D, ImageSaver.COLOR_BGRA_3D, ImageSaver.COLOR_RGB_3D, ImageSaver.COLOR_RGBA_3D|\n\n###### self.save_image(image, overwrite = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n|overwrite|_yes_|True|True, False|\n\n###### self.save_images(imageList, overwrite = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|imageList|_no_| | [ list-numpy-uint8 type ], [ numpy-uint8 type ] |\n|overwrite|_yes_|True|True, False|\n\n#### (2-C) _ImageDisplayer_ - Displaying images in a window:\n\n###### ImageDisplayer(image, windowName = \"Image Preview\")\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ] |\n|windowName|_yes_|\"Image Preview\"| [ string type ] |\n\n###### self.start()\n\n###### self.stop()\n\n###### self.display_for(interval = 5)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|interval|_yes_|5| [ integer/float (>0) type ] |\n\n###### ImageDisplayer.display_multiple_for(imageList, windowName = \"Image Preview\", interval = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|imageList|_no_| | [ list-numpy-uint8 type ], [ numpy-uint8 type ] |\n|windowName|_yes_|\"Image Preview\"| [ string type ]|\n|interval|_yes_|1|[ integer/float (>0) type ]|\n\n#### (2-D) _SnapshotTaker_ - Taking a screenshot:\n\n###### SnapshotTaker(mode = SnapshotTaker.COLOR_BGR_3D)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|mode|_yes_|SnapshotTaker.COLOR_BGR_3D|SnapshotTaker.COLOR_GRAY_2D, SnapshotTaker.COLOR_GRAY_3D, SnapshotTaker.COLOR_BGR_3D, SnapshotTaker.COLOR_BGRA_3D, SnapshotTaker.COLOR_RGB_3D, SnapshotTaker.COLOR_RGBA_3D|\n\n###### self.take_screenshot(key = None, message = None)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_yes_|None|None, [ pynput-key type ] |\n|message|_yes_|None|None, [ string type ] |\n\n###### self.take_screenshots(key = None, quantity = 1, message = None)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_yes_|None|None, [ pynput-key type ] |\n|quantity|_yes_|1|[ integer (>0) type ] |\n|message|_yes_|None|None, [ string type ] |\n\n##### (2-D-1) Example of using SnapshotTaker & ImageDisplayer\n\n    from keygim.imageUtils import ImageUtils\n    from pynput.keyboard import Key\n    SnapshotTaker = ImageUtils.SnapshotTaker\n    ImageDisplayer = ImageUtils.ImageDisplayer\n    key = Key.esc\n    message = \"Press Esc to take screenshot.\"\n    mode = SnapshotTaker.COLOR_BGR_3D\n    image = SnapshotTaker(mode = mode).take_screenshot(\n      key = key, message = message\n    )\n    ImageDisplayer(image).display_for(interval = 3)\n\n#### (2-E) _BoundaryBoxSelector_ - Selecting boundary box from background image:\n\n###### BoundaryBoxSelector(image, windowName = \"Boundary Box Selector\", boxColor = (255, 0, 0), boxWidth = 5)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n|windowName|_yes_|\"Boundary Box Selector\"|[ string type ]|\n|boxColor|_yes_|(255, 0, 0)| [ tuple-BGR type ]|\n|boxWidth|_yes_|5| [ integer (>0) type ]|\n\n###### self.draw()\n\n###### self.draw_multiple(quantity = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|quantity|_yes_|1|[ integer (>0) type]|\n\n###### self.place(width, height)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|width|_no_| | [ integer (>0) type ]|\n|height|_no_| | [ integer (>0) type]|\n\n###### self.place_multiple(width, height, quantity = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|width|_no_| | [ integer (>0) type ]|\n|height|_no_| | [ integer (>0) type ]|\n|quantity|_yes_|1|[ integer (>0) type ]|\n\n###### BoundaryBoxSelector.crop_partial(image, bbox)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n|bbox|_no_| | [ BoundaryBoxSelector.BoundaryBox type ]|\n\n###### BoundaryBoxSelector.crop_multiple(image, bboxes)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n|bboxes|_no_| | [ list-BoundaryBoxSelector.BoundaryBox type ]|\n\n##### (2-E-1) Example of using SnapshotTaker & BoundaryBoxSelector & ImageDisplayer\n\n    from keygim.imageUtils import ImageUtils\n    from pynput.keyboard import Key\n    ImageDisplayer = ImageUtils.ImageDisplayer\n    BoundaryBoxSelector = ImageUtils.BoundaryBoxSelector\n    SnapshotTaker = ImageUtils.SnapshotTaker\n    key = Key.esc\n    message = \"Press Esc to take screenshot.\"\n    image = SnapshotTaker().take_screenshot(key, message)\n    bbox = BoundaryBoxSelector(image).draw()\n    image = BoundaryBoxSelector.crop_partial(image, bbox)\n    ImageDisplayer(image).display_for(interval = 4)\n\n#### (2-E-A) _BoundaryBoxSelector.BoundaryBox_ - Creating a boundary box object:\n\n###### BoundaryBoxSelector.BoundaryBox(SX, SY, EX, EY)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|SX|_no_| | [ integer (>=0) type ]|\n|SY|_no_| | [ integer (>=0) type ]|\n|EX|_no_| | [ integer (>=0) type ]|\n|EY|_no_| | [ integer (>=0) type ]|\n\n###### self.\\_\\_getitem\\_\\_(key)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_no_| | \"sx\", \"sy\", \"ex\", \"ey\", \"dx\", \"dy\", \"cx\", \"cy\", \"tuple\" |\n\n###### self.sort()\n\n#### (2-F) _ImageRandomCropper_ - Cropping a random region from an image:\n\n###### ImageRandomCropper(image)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n\n###### self.crop(width, height, overflow = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|width|_no_| | [ integer (>0) type ]|\n|height|_no_| | [ integer (>0) type ]|\n|overflow|_yes_|True|True, False|\n\n###### self.crop_multiple(width, height, quantity = 1, overflow = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|width|_no_| | [ integer (>0) type ]|\n|height|_no_| | [ integer (>0) type ]|\n|quantity|_yes_|1| [ integer (>0) type ]|\n|overflow|_yes_|True|True, False|\n\n#### (2-G) _ImageOverLayer_ - Adding a background to a 4-channel image:\n\n###### ImageOverLayer(image)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 (4 channels) type ]|\n\n###### self.overlay(background)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|background|_no_| | [ numpy-uint8 (>=3 channels) type ]|\n\n###### self.overlay_multiple(backgroundList)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|backgroundList|_no_| | [ list-numpy-uint8 type ], [ numpy-uint8 type ]|\n\n#### (2-H) _convert\\_color_ - Color conversion for multiple images:\n\n###### convert_color(imageList, color_code)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|imageList|_no_| | [ list-numpy-uint8 type ], [ numpy-uint8 type ]|\n|color_code|_no_| | [ cv2-cvtColor type ]|\n\n#### (2-I) _ScreenshotCropperSaver_ - Taking a screenshot, cropping it and saving the image:\n\n###### ScreenshotCropperSaver(filename = \"temp.png\", draw = True, save = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|filename|_yes_|\"temp.png\"| [ string type ] |\n|draw|_yes_|True|True, False|\n|save|_yes_|True|True, False|\n\n###### self.start(key = None, message = None, overwrite = True, quantity = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|key|_yes_|None|None, [ pynput-key type ]|\n|message|_yes_|None|None, [ string type ]|\n|overwrite|_yes_|True|True, False|\n|quantity|_yes_|1| [ integer (>0) type ]|\n\n#### (2-J) _ImageResizer_ - Resizing an image while keeping its aspect ratio:\n\n###### ImageResizer(image)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n\n###### self.resize(width, height)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|width|_no_| | [ integer (>0) type ]|\n|height|_no_| | [ integer (>0) type ]|\n\n###### ImageResizer.resize_multiple(imageList, width, height)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|imageList|_no_| | [ numpy-uint8 type ], [ list-numpy-uint8 type ]|\n|width|_no_| | [ integer (>0) type ]|\n|height|_no_| | [ integer (>0) type ]|\n\n#### (2-K) _ImageCorruptDisposer_ - Disposing corrupt images in a folder:\n\n###### ImageCorruptDisposer(folderName)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|folderName|_no_| | [ string type ]|\n\n###### self.parse(return_quantity = False)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|return_quantity|_yes_|False|True, False|\n\n###### self.dispose(extensions = \"all\")\n\n|argument|optional|default|available|\n|---|---|---|---|\n|extensions|_yes_|\"all\"|\"all\", [ list-string type ]|\n\n#### (2-L) _PlainImageGenerator_ - Generating a uni-colored image:\n\n###### PlainImageGenerator(width, height, channels)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|width|_no_| | [ integer (>0) type ]|\n|height|_no_| | [ integer (>0) type ]|\n|channels|_no_| | [ integer (>0) type ]|\n\n###### self.generate(quantity = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|quantity|_yes_|1|[ integer (>0) type ]|\n\n##### (2-L-1) Example of PlainImageGenerator & ImageDisplayer\n\n    from keygim.imageUtils import ImageUtils, ImageAugmentor\n    PlainImageGenerator = ImageAugmentor.PlainImageGenerator\n    ImageDisplayer = ImageUtils.ImageDisplayer\n    width, height, channels = 250, 400, 3\n    image = PlainImageGenerator(width, height, channels).generate()\n    ImageDisplayer(image).display_for(interval = 4)\n\n#### (2-M) _NoiseImageGenerator_ - Generating a static/noise image:\n\n###### NoiseImageGenerator(width, height, channels)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|width|_no_| | [ integer (>0) type ]|\n|height|_no_| | [ integer (>0) type ]|\n|channels|_no_| | [ integer (>0) type ]|\n\n###### self.generate(quantity = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|quantity|_yes_|1|[ integer (>0) type ]|\n\n##### (2-M-1) Example of NoiseImageGenerator & ImageDisplayer\n\n    from keygim.imageUtils import ImageUtils, ImageAugmentor\n    NoiseImageGenerator = ImageAugmentor.NoiseImageGenerator\n    ImageDisplayer = ImageUtils.ImageDisplayer\n    width, height, channels = 250, 400, 3\n    image = NoiseImageGenerator(width, height, channels).generate()\n    ImageDisplayer(image).display_for(interval = 4)\n\n#### (2-N) _MapGenerator_ - Generating a map image from two images:\n\n###### MapGenerator(image1, image2)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image1|_no_| | [ numpy-uint8 type ]|\n|image2|_no_| | [ numpy-uint8 type ]|\n\n###### self.get()\n\n#### (2-O) _PositionShifter_ - Shifting an image to the side:\n\n###### PositionShifter(image, safeMode = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n|safeMode|_yes_|True|True, False|\n\n###### self.shift(width_offset_range, height_offset_range, quantity = 1, rate = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|width_offset_range|_no_| |[ tuple-integer type ]|\n|height_offset_range|_no_| | [ tuple-integer type ]|\n|quantity|_yes_|1|[ integer (>0) type ]|\n|rate|_yes_|1|[ integer/float [0, 1] type ]|\n\n#### (2-P) _BrightnessShifter_ - Changing an image's brightness level:\n\n###### BrightnessShifter(image, safeMode = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n|safeMode|_yes_|True|True, False|\n\n###### self.shift(brightness_shift_range, quantity = 1, rate = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|brightness_shift_range|_no_| |[ tuple-float [0, 1] type ]|\n|quantity|_yes_|1|[ integer (>0) type ]|\n|rate|_yes_|1|[ integer/float [0, 1] type ]|\n\n#### (2-Q) _ImageZoomer_ - Zooming in and out from an image:\n\n###### ImageZoomer(image, safeMode = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image|_no_| | [ numpy-uint8 type ]|\n|safeMode|_yes_|True|True, False|\n\n###### self.zoom(zoom_value)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|zoom_value|_no_| | [ integer/float (>0) type ]\n\n###### self.random_zoom(zoom_range, quantity = 1, rate = 1)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|zoom_range|_no_| |[ tuple-float (>0) type ]|\n|quantity|_yes_|1|[ integer (>0) type ]|\n|rate|_yes_|1|[ integer/float [0, 1] type ]|\n\n#### (2-R) _ImageGenerator_ - Generating training data to recognize a pattern:\n\n###### ImageGenerator(image1, image2)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|image1|_no_| | [ numpy-uint8 type ]|\n|image2|_no_| | [ numpy-uint8 type ]|\n\n###### self.configure(verbose = True, **kwargs)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|verbose|_yes_|True|True, False|\n|position_shift_range|_yes_|((-1, 1), (-1, 1))| [ tuple-tuple-integer type ] |\n|zoom_range|_yes_|(1.0, 1.0)| [ tuple-integer/float (>0) type ] |\n|brightness_range|_yes_|(1.0, 1.0)| [ tuple-integer/float [0, 1] type ] |\n|position_shift_rate|_yes_|1| [ integer/float (>=0) type ] |\n|brightness_rate|_yes_|1| [ integer/float (>=0) type ] |\n|zoom_rate|_yes_|1| [ integer/float (>=0) type ] |\n|plain_quantity|_yes_|1| [ integer (>=0) type ] |\n|noise_quantity|_yes_|0| [ integer (>=0) type ] |\n|background_quantity|_yes_|1| [ integer (>=0) type ] |\n|region_quantity|_yes_|0| [ integer (>=0) type ] |\n|background_folder|_yes_|None| None, [ string type ] |\n\n###### self.summary()\n\n###### self.generate(return_backgrounds = False, verbose = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|return_backgrounds|_yes_|False|True, False|\n|verbose|_yes_|True|True, False|\n\n###### self.generate_backgrounds(verbose = True)\n\n|argument|optional|default|available|\n|---|---|---|---|\n|verbose|_yes_|True|True, False|\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/keyywind/keygim",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keygim",
    "package_url": "https://pypi.org/project/keygim/",
    "platform": null,
    "project_url": "https://pypi.org/project/keygim/",
    "project_urls": {
      "Bug Tracker": "https://github.com/keyywind/keygim/issues",
      "Homepage": "https://github.com/keyywind/keygim"
    },
    "release_url": "https://pypi.org/project/keygim/1.0.0/",
    "requires_dist": [
      "markdown",
      "scikit-image",
      "PyAutoGUI",
      "pynput",
      "numpy",
      "opencv-python",
      "keyscraper"
    ],
    "requires_python": ">=3.6",
    "summary": "A library used to download images from Google.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15266298,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a193be53f51e6a1efa1e01969fb021a2e2bc4642b66aa83396a9eed3265cf1a",
          "md5": "7814c9bddeeb16eff3251e8aebc67b94",
          "sha256": "bd4ae0746b2fe526a58cad08abd4d00ee770c9e3fe5f32139d0fe65b129dc6c8"
        },
        "downloads": -1,
        "filename": "keygim-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7814c9bddeeb16eff3251e8aebc67b94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2345,
        "upload_time": "2022-08-23T14:45:51",
        "upload_time_iso_8601": "2022-08-23T14:45:51.459415Z",
        "url": "https://files.pythonhosted.org/packages/9a/19/3be53f51e6a1efa1e01969fb021a2e2bc4642b66aa83396a9eed3265cf1a/keygim-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53b4e881297e60dee6a436fb22829c9f4dd12429247c69d905ef3feb2df5cea7",
          "md5": "3b37d5646eb25bb5dddf110bfaa29ca0",
          "sha256": "70c35a0f30c9b073ff9fc9b0158fde1a25e6c5cd2eea8e63647edc015ae468e8"
        },
        "downloads": -1,
        "filename": "keygim-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b37d5646eb25bb5dddf110bfaa29ca0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2240,
        "upload_time": "2022-08-23T14:45:53",
        "upload_time_iso_8601": "2022-08-23T14:45:53.565458Z",
        "url": "https://files.pythonhosted.org/packages/53/b4/e881297e60dee6a436fb22829c9f4dd12429247c69d905ef3feb2df5cea7/keygim-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7de5968109b20a525cd0add889d012cb13abf077ebad76ec8db4bf51ab2bd2ac",
          "md5": "5fbb617d0086f24705ed5f8c088563e5",
          "sha256": "7f40592a0767bd7e09d3c69ae9edb195edca82624cd1cf0db79574c9000fecb2"
        },
        "downloads": -1,
        "filename": "keygim-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fbb617d0086f24705ed5f8c088563e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19406,
        "upload_time": "2022-09-30T10:29:33",
        "upload_time_iso_8601": "2022-09-30T10:29:33.963798Z",
        "url": "https://files.pythonhosted.org/packages/7d/e5/968109b20a525cd0add889d012cb13abf077ebad76ec8db4bf51ab2bd2ac/keygim-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7de5968109b20a525cd0add889d012cb13abf077ebad76ec8db4bf51ab2bd2ac",
        "md5": "5fbb617d0086f24705ed5f8c088563e5",
        "sha256": "7f40592a0767bd7e09d3c69ae9edb195edca82624cd1cf0db79574c9000fecb2"
      },
      "downloads": -1,
      "filename": "keygim-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5fbb617d0086f24705ed5f8c088563e5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19406,
      "upload_time": "2022-09-30T10:29:33",
      "upload_time_iso_8601": "2022-09-30T10:29:33.963798Z",
      "url": "https://files.pythonhosted.org/packages/7d/e5/968109b20a525cd0add889d012cb13abf077ebad76ec8db4bf51ab2bd2ac/keygim-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}