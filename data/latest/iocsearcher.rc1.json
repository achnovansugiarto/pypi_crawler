{
  "info": {
    "author": "MaliciaLab",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Security"
    ],
    "description": "# iocsearcher\n\n_iocsearcher_ is a Python library and command-line tool to extract\nindicators of compromise (IOCs),\nalso known as cyber observables,\nfrom HTML, PDF, and text files.\nIt can identify both defanged (e.g., IP address 1[.]2[.]3.[4]) and\nunmodified IOCs (e.g., IP address 1.2.3.4).\n\n## Supported IOCs\n\n_iocsearcher_ can extract the following IOC types:\n\n- URLs (url)\n- Domain names (fqdn)\n- IP addresses (ip)\n- IP subnets (ipNet)\n- Hashes (fileMd5,fileSha1,fileSha256)\n- Email addresses (email)\n- Copyright strings (copyright)\n- CVE vulnerability identifiers (cve)\n- Tor v3 addresses (onionAddress)\n- Social network handles (facebookHandle,githubHandle,instagramHandle,\nlinkedinHandle,pinterestHandle,telegramHandle,twitterHandle,whatsappHandle,\nyoutubeHandle,youtubeChannel)\n- Advertisement/analytics identifiers (googleAdsense, googleAnalytics, googleTagManager)\n- Blockchain addresses (bitcoin,bitcoincash,dashcoin,dogecoin,ethereum,litecoin,monero,tezos,zcash)\n- Payment addresses (webmoney)\n- Chinese Internet Content Provider licenses (icp)\n- Bank account numbers (iban)\n- Trademarks (trademark)\n- Universal unique identifiers (uuid)\n- Android package name (packageName)\n- Spanish NIF identifiers (nif)\n\n## Installation\n\n~~~ sh\npip install iocsearcher\n~~~\n\nIf you get an error, try installing Python developer tools first:\n~~~ sh\nsudo apt install python3-dev\npip install iocsearcher\n~~~\n\n## Command Line Usage\n\nTo find IOCs in a given file just provide the -f (--file) option.\nBy default, found IOCs are printed to stdout,\ndefanged IOCs are rearmed, and\nIOCs are deduplicated so they only appear once.\n\n~~~ sh\niocsearcher -f file.pdf\niocsearcher -f page.html\niocsearcher -f input.txt\n~~~\n\nYou can use the -o (--output) option to place IOCs to a file instead of stdout:\n\n~~~ sh\niocsearcher -f file.pdf -o iocs.txt\n~~~\n\nBy default all regexp are applied to the input.\nIf you are only interested in some specific IOC types,\nit is more efficient to specify those using\nthe -t (--target) option, which can be applied multiple times:\n\n~~~ sh\niocsearcher -f file.pdf -t url -t email\n~~~\n\nYou can also search for IOCs in all files in a directory using\nthe -d (--dir) option.\nIOCs extracted from each file will be placed in their own .iocs file.\nYou can also place all IOCs founds across the input files\nin the same output file by also adding the -o (--output) option:\n\n~~~ sh\niocsearcher -d directoryWithFiles -o all.iocs\n~~~\n\nIn HTML files, only the readable text is examined\n(i.e., think of the text shown by Firefox's Reader View).\nIf you want to scan the whole HTML content you can use the -r (--raw) option:\n\n~~~ sh\niocsearcher -f page.html -r\n~~~\n\nIf you have a file that you want to interpret as text avoiding\nfiletype detection, you can use the -F (--forcetext) option:\n\n~~~ sh\niocsearcher -f input.txt -F\n~~~\n\nYou can store the text extracted from a PDF/HTML file using the\n-T (--text) option, which will produce a .text file for each input file:\n\n~~~ sh\niocsearcher -f file.pdf -T\n~~~\n\nBy default IOCs are deduplicated, you can instead output the offset of\neach IOC without deduplication by using the -v (--verbose) option:\n\n~~~ sh\niocsearcher -f file.pdf -v\n~~~\n\n\n## Library Usage\n\nYou can also use _iocsearcher_ as a library by creating a\n_Searcher_ object and then invoking the functions\n_search_data_ to identify rearmed and deduplicated IOCs and\n_search_raw_ to identify all matches, their offsets, and the defanged string.\nThe _Searcher_ object needs to be created only once to parse the regexps.\nThen, it can be reused to find IOCs in multiple input strings.\n\n~~~ sh\npython3\n>>> import iocsearcher\n>>> from iocsearcher.searcher import Searcher\n>>> test = 'Find this email contact[AT]example[dot]com'\n>>> searcher = Searcher()\n>>> searcher.search_data(test)\n{('email', 'contact@example.com'), ('fqdn', 'example.com')}\n>>> searcher.search_data(test, targets={'email'})\n{('email', 'contact@example.com')}\n>>> searcher.search_raw(test)\n[('email', 'contact@example.com', 16, 'contact[AT]example[dot]com'), ('fqdn', 'example.com', 27, 'example[dot]com')]\n~~~\n\nYou can also open a document without needing to provide its type,\nget its text, and then use a _Searcher_ object to search for IOCs in the text:\n\n~~~ sh\npython3\n>>> import iocsearcher\n>>> from iocsearcher.document import open_document\n>>> from iocsearcher.searcher import Searcher\n>>> doc = open_document(filepath)\n>>> text,_ = doc.get_text() if doc is not None else \"\"\n>>> searcher = Searcher()\n>>> searcher.search_data(text)\n~~~\n\nIf the file is not a PDF, HTML, or text document,\nthen _open_document_ throws a warning and returns None\n\n## Defang and Rearm\n\nMany security reports defang (i.e., remove the teeth from) malicious\nindicators, especially network indicators such as URLs, domains,\nIP addresses, and email addresses.\nThis practice helps to prevent users from inadvertently clicking on a\nmalicious indicator and start a network connection to it.\nDefanged indicators do not follow the indicator specification and thus\nrequired relaxed regular expressions to detect them.\n\n_iocsearcher_ supports some popular defang operations\nand rearms the IOCs by default so that deduplication works even if the\nsame IOC has been defanged in different ways.\n\nHowever, it is not possible to support all defang operations,\nas every analyst can come up with their own.\nIf you think _iocsearcher_ is missing support for some popular\ndefang operation, let us know by providing pointers to reports that use them.\n\n## Customizing the Regular Expressions\n\nThe default regular expressions used by _iocsearcher_ are stored in\n_data/patterns.ini_\n\nIf you want to modify a regexp, add a regexp,\nchange the IOC type associated to a regexp, or disable validation\nfor an existing regexp, you can create a copy of _patterns.ini_,\nedit your copy, and pass it as input to _iocsearcher_\nusing the -P (--patterns) option:\n\n~~~ sh\niocsearcher -f file.pdf -P mypatterns.ini\n~~~\n\nNote that if you add a new regexp, the output will be the outermost group\nif a group exists, and the whole match if the regexp has no groups.\n\n## Related Tools\n\nThere exist multiple other open-source IOC extraction tools.\nIn our [FGCS journal paper](https://arxiv.org/abs/2208.00042)\nwe propose a novel evaluation methodology for IOC extraction tools and\napply it to compare _iocsearcher_ with the following tools:\n\n- [Jager](https://github.com/sroberts/jager) (Python)\n- [IOC-parser](https://github.com/armbues/ioc_parser) (Python)\n- [Cacador](https://github.com/sroberts/cacador) (Go)\n- [CyObstract](https://github.com/cmu-sei/cyobstract) (Python)\n- [IOC Finder](https://github.com/fhightower/ioc-finder) (Python)\n- [IOC Extract](https://github.com/InQuest/python-iocextract) (Python)\n- [IOC-Extractor](https://github.com/ninoseki/ioc-extractor) (Python)\n\nWe encourage you to read our paper if you have questions about how\n_iocsearcher_ compares with the above tools and to try\nthe above tools if _iocsearcher_ does not meet your goals.\n\n## References\n\nThe design and evaluation of _iocsearcher_ and the comparison with prior\nIOC extraction tools are detailed in our\n[FGCS journal paper](https://arxiv.org/abs/2208.00042):\n\n> Juan Caballero, Gibran Gomez, Srdjan Matic, Gustavo Sánchez, Silvia Sebastián, and Arturo Villacañas.\nGoodFATR: A Platform for Automated Threat Report Collection and IOC Extraction.\nIn Future Generation Computer Systems, 2023.\n\n# Contributors\n\nThe main developer and maintainer for _iocsearcher_ is Juan Caballero.\nOther members of the MaliciaLab at the\n[IMDEA Software Institute](http://software.imdea.org)\nhave contributed fixes and helped with testing:\nGibran Gomez, Silvia Sebastian, Srdjan Matic\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "ioc,indicator of compromise,cyber observable,security,threat reports,pdf,html",
    "license": "MIT License  Copyright (c) 2023 MaliciaLab  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iocsearcher",
    "package_url": "https://pypi.org/project/iocsearcher/",
    "platform": null,
    "project_url": "https://pypi.org/project/iocsearcher/",
    "project_urls": {
      "Homepage": "https://github.com/malicialab/iocsearcher"
    },
    "release_url": "https://pypi.org/project/iocsearcher/1.0.0/",
    "requires_dist": [
      "beautifulsoup4",
      "coinaddrvalidator",
      "langdetect",
      "lxml",
      "pdfminer.six",
      "phonenumbers",
      "python-magic",
      "readabilipy"
    ],
    "requires_python": "",
    "summary": "A library and command line tool for extracting indicators of compromise (IOCs) from security reports in PDF, HTML, or text formats.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16959671,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84f87dec0633cf2044686b82c16adbcbf276ae69e02d6e0d62fb962af9ccdb47",
          "md5": "275aba3da82a27775594cc40ac694039",
          "sha256": "04209198717e29e3ba083fe5b9cab25cbbe5bb6a33f1f2ed1e438088edb977f7"
        },
        "downloads": -1,
        "filename": "iocsearcher-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "275aba3da82a27775594cc40ac694039",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28716,
        "upload_time": "2023-02-21T11:45:28",
        "upload_time_iso_8601": "2023-02-21T11:45:28.189184Z",
        "url": "https://files.pythonhosted.org/packages/84/f8/7dec0633cf2044686b82c16adbcbf276ae69e02d6e0d62fb962af9ccdb47/iocsearcher-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd58651d01c4a11f4d8679595733251ac3e735ff72b2a8c416263415d9d238d9",
          "md5": "d4dcbeb0f814594bf48209b28aad7abd",
          "sha256": "7b3f108c6035344c0597834dce5c69f7c4243cc067e28d7e40a00fe0456fa70e"
        },
        "downloads": -1,
        "filename": "iocsearcher-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4dcbeb0f814594bf48209b28aad7abd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29301,
        "upload_time": "2023-02-21T11:45:30",
        "upload_time_iso_8601": "2023-02-21T11:45:30.315001Z",
        "url": "https://files.pythonhosted.org/packages/bd/58/651d01c4a11f4d8679595733251ac3e735ff72b2a8c416263415d9d238d9/iocsearcher-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84f87dec0633cf2044686b82c16adbcbf276ae69e02d6e0d62fb962af9ccdb47",
        "md5": "275aba3da82a27775594cc40ac694039",
        "sha256": "04209198717e29e3ba083fe5b9cab25cbbe5bb6a33f1f2ed1e438088edb977f7"
      },
      "downloads": -1,
      "filename": "iocsearcher-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "275aba3da82a27775594cc40ac694039",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28716,
      "upload_time": "2023-02-21T11:45:28",
      "upload_time_iso_8601": "2023-02-21T11:45:28.189184Z",
      "url": "https://files.pythonhosted.org/packages/84/f8/7dec0633cf2044686b82c16adbcbf276ae69e02d6e0d62fb962af9ccdb47/iocsearcher-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd58651d01c4a11f4d8679595733251ac3e735ff72b2a8c416263415d9d238d9",
        "md5": "d4dcbeb0f814594bf48209b28aad7abd",
        "sha256": "7b3f108c6035344c0597834dce5c69f7c4243cc067e28d7e40a00fe0456fa70e"
      },
      "downloads": -1,
      "filename": "iocsearcher-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d4dcbeb0f814594bf48209b28aad7abd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29301,
      "upload_time": "2023-02-21T11:45:30",
      "upload_time_iso_8601": "2023-02-21T11:45:30.315001Z",
      "url": "https://files.pythonhosted.org/packages/bd/58/651d01c4a11f4d8679595733251ac3e735ff72b2a8c416263415d9d238d9/iocsearcher-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}