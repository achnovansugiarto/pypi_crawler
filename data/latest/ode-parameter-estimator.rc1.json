{
  "info": {
    "author": "",
    "author_email": "Jacob Hilbert <jacob.hilbert.tree@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ODE system parameter estimator\n\nThis is a little python package to provide convenience functions that use the `scipy` capabilities for ODE systems and curve fitting in order to estimate the correct parameters of the ODE system for a given set of data.\n\n## Usage\n\nIn the fashion of `scipy.integrate.solve_ivp`, we have an ODE system\n$$\n\\frac{dy}{dt} = f(t,y,p)\n$$\nwhere $t$ is the independent parameter, $y$ a vector function and $p$ a parameter list. If we numerically solve the system with `solve_ivp` we would get a time array `solution.t` and a matrix `solution.y` whose rows are the trayectories of the components of $y$.\n\nThe `EstimatorProblem` class requires the data to be in this form: a time array, a samples array in row order, and the derivative function. For example, here is the [Lorenz chaotic oscillator](https://en.wikipedia.org/wiki/Lorenz_system):\n\n$$\n\\frac{\\mathrm{d}x}{\\mathrm{d}t} = \\sigma (y - x), \\qquad\n\\frac{\\mathrm{d}y}{\\mathrm{d}t} = x (\\rho - z) - y, \\qquad\n\\frac{\\mathrm{d}z}{\\mathrm{d}t} = x y - \\beta z.\n$$\n\n```python\ndef lorenz(t,Y,*args):\n    σ,ρ,β = args\n    x,y,z = Y\n    return np.array([\n        σ*(y-x),   # dx/dt\n        x*(ρ-z)-y, # dy/dt\n        x*y-β*z    # dz/dt\n    ])\n```\n\nalong with some data in a file, by columns `t, x, y, z`\n```python\n#   t       x       y        z\n0.00000 1.00100 1.00100  1.00100\n0.06742 1.34734 2.32878  0.95351\n0.13483 2.34594 4.39342  1.17407\n0.20225 4.24041 7.94361  2.22541\n0.26966 7.50201 13.50709 5.74678\n...\n```\n\nwhich can be imported and visualized like\n\n```python\nt,*Y = np.loadtxt(\"samples.dat\",unpack=True)\nY = np.array(Y)\nplt.plot(t,Y.T,\"o\",fillstyle='none')\n```\n![](test/data.svg)\n\nThe parameter fitting is done by simply\n```python\nproblem = EstimationProblem(t,Y,lorenz)\nproblem.fit([9,28,2]) # initial guess\n```\n\nwhich will hopefully display a message saying that the fit was successful. That success is heavily dependant of the quality of the initial guess, specially in chaotic or ill-behaved systems.\n\nWe can test the solution with the help of the `EstimationProblem.output` method, which evals the solution on the requested times:\n\n```python\nts = np.linspace(0,2,200)\nYs = problem.output(ts)\n\nplt.plot(t,Y.T,\"o\",fillstyle='none')\nplt.gca().set_prop_cycle(None) # reset color cycle\nplt.plot(ts,Ys.T)\n```\n![](test/fit.svg)\n\n### More examples\n\nOn [test/systems.py] are implementations of:\n\n* Radioactive decay\n* Housekeeping gene expression\n* Lotka-Volterra\n* SIR epidemics\n* Damped coupled oscillators\n* Lorenz-Fetter-Hamilton oscillator\n\nAll of them are tested with [clean solutions](test/exact.ipynb) and with [noisy solutions](test/inexact.ipynb) to emulate experimental data.\n\n\n## Similar tools\n\nThere is, in Julia, [a whole ecosystem of packages](https://diffeq.sciml.ai/stable/analysis/parameter_estimation/) that implements several methods to do \"dynamic data analysis\". Not only there is a package named [DiffEqParamEstim.jl](https://diffeqparamestim.sciml.ai/dev/), but there are also packages that find parts of the ODE system using scientific machine-learning.\n\n## TO DO\n\n- [ ] Implement dimension checking to avoid obscure error traces.\n\n- [ ] Finish documentation. Again.\n\n- [ ] Give the option to also fit the initial conditions. This **should** be possible, as the first data point should be a good initial guess.\n\n- [ ] Understand better the fail conditions, and provide more information.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ode-parameter-estimator",
    "package_url": "https://pypi.org/project/ode-parameter-estimator/",
    "platform": null,
    "project_url": "https://pypi.org/project/ode-parameter-estimator/",
    "project_urls": {
      "Homepage": "https://github.com/JacobHilbert/ode-parameter-estimator"
    },
    "release_url": "https://pypi.org/project/ode-parameter-estimator/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "General ODE system parameter estimator using scipy",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15892218,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eff9ea1873851d69edd7fc2bc8d0f3080816dc7db74ddee52d8a418959eee0f7",
          "md5": "ec90aaf8256e2579a627dfe746983b44",
          "sha256": "5341ad54d73a274945a05405f7c83ea5ea60eb3e688a768fb29ec3c5d08b8408"
        },
        "downloads": -1,
        "filename": "ode_parameter_estimator-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec90aaf8256e2579a627dfe746983b44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5335,
        "upload_time": "2022-11-25T17:02:12",
        "upload_time_iso_8601": "2022-11-25T17:02:12.572118Z",
        "url": "https://files.pythonhosted.org/packages/ef/f9/ea1873851d69edd7fc2bc8d0f3080816dc7db74ddee52d8a418959eee0f7/ode_parameter_estimator-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71ef685422763b9259f36b822c898cf3724cece9074509c38e8b17a011a52929",
          "md5": "28e04d8871d53402c97772960b17c720",
          "sha256": "091bb8745cb9fb44858d9254afe4150efc4e8cc03a1b5700324c95152548803b"
        },
        "downloads": -1,
        "filename": "ode_parameter_estimator-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "28e04d8871d53402c97772960b17c720",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 452793,
        "upload_time": "2022-11-25T17:02:31",
        "upload_time_iso_8601": "2022-11-25T17:02:31.594714Z",
        "url": "https://files.pythonhosted.org/packages/71/ef/685422763b9259f36b822c898cf3724cece9074509c38e8b17a011a52929/ode_parameter_estimator-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eff9ea1873851d69edd7fc2bc8d0f3080816dc7db74ddee52d8a418959eee0f7",
        "md5": "ec90aaf8256e2579a627dfe746983b44",
        "sha256": "5341ad54d73a274945a05405f7c83ea5ea60eb3e688a768fb29ec3c5d08b8408"
      },
      "downloads": -1,
      "filename": "ode_parameter_estimator-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ec90aaf8256e2579a627dfe746983b44",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5335,
      "upload_time": "2022-11-25T17:02:12",
      "upload_time_iso_8601": "2022-11-25T17:02:12.572118Z",
      "url": "https://files.pythonhosted.org/packages/ef/f9/ea1873851d69edd7fc2bc8d0f3080816dc7db74ddee52d8a418959eee0f7/ode_parameter_estimator-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71ef685422763b9259f36b822c898cf3724cece9074509c38e8b17a011a52929",
        "md5": "28e04d8871d53402c97772960b17c720",
        "sha256": "091bb8745cb9fb44858d9254afe4150efc4e8cc03a1b5700324c95152548803b"
      },
      "downloads": -1,
      "filename": "ode_parameter_estimator-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "28e04d8871d53402c97772960b17c720",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 452793,
      "upload_time": "2022-11-25T17:02:31",
      "upload_time_iso_8601": "2022-11-25T17:02:31.594714Z",
      "url": "https://files.pythonhosted.org/packages/71/ef/685422763b9259f36b822c898cf3724cece9074509c38e8b17a011a52929/ode_parameter_estimator-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}