{
  "info": {
    "author": "Ben Thorner",
    "author_email": "benthorner@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pytest",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mock_serial\n\nA mock utility for testing serial devices.\n\nCredit to [Dolf Andringa](http://allican.be/blog/2017/01/15/python-dummy-serial-port.html) for the technique. 🏆\n\n## Install\n\n```\npip install mock_serial\n```\n\nNote: this package [does not work on Windows](https://stackoverflow.com/questions/52062977/unable-to-import-termios-package).\n\n## Usage\n\nFirst setup a basic session with a `MockSerial` device.\n\n```python\nfrom mock_serial import MockSerial\n\ndevice = MockSerial()\ndevice.open()\n\nfrom serial import Serial\nserial = Serial(device.port)\n\n...\n\nserial.close()\ndevice.close()\n```\n\nAlternatively, a pytest fixture is included automatically.\n\n```\nfrom serial import Serial\n\ndef test_example(mock_serial):\n  serial = Serial(device.port)\n\n  ...\n\n  serial.close()\n```\n\n\n### `.stub()`\n\nUse the `.stub()` method to simulate device behaviour.\n\n```python\nstub = device.stub(\n  receive_bytes=b'123',\n  send_bytes=b'456'\n)\n\n...\n\nserial.write(b'123')\nassert serial.read(3) == b'456'\n\nassert stub.called\nassert stub.calls == 1\n```\n\nYou can also give your stub a name for easy retrieval.\n\n```python\ndevice.stub(\n  name='foo',\n  receive_bytes=b'123',\n  send_bytes=b'456'\n)\n\n...\n\nassert device.stubs['foo'].called\n```\n\n`stub()` can simulate a variety of device behaviours:\n\n- **Lazy matching**. MockSerial will defer sending a response until only one stub could match. This can be useful if certain byte sequences are ambiguous e.g. if another stub had `receive_bytes = b'123456'` then MockSerial will wait until it can rule out matching the \"longer\" stub in future.\n\n- **Partial matching**. MockSerial doesn't need to match all the data it's read in one go. This can be useful if your code or library doesn't wait for replies e.g. `b'123'` followed quickly by `b'456'` may be received as `b'123456'`, but will be correctly matched if there are stubs for them both.\n\nNote: you must ensure there is a stub to match each part of the byte sequence, **otherwise MockSerial will stop responding**. MockSerial does not support \"regex\" or \"placeholder\" matching.\n\n## Advanced\n\nMockSerial supports overriding stubs by `name` or `receive_bytes`. This can be useful if you want to define most of your stubs once, but override the `send_bytes` for one or two of them in specific tests.\n\n```python\ndevice.stub(\n  receive_bytes=b'123',\n  send_bytes=b'456'\n)\n\n...\n\ndevice.stub(\n  receive_bytes=b'123',\n  send_bytes=b'789'\n)\n\nserial.write(b'123')\nassert serial.read(3) == b'789'\n```\n\nStubs can also return a dynamic response by passing a `send_fn` instead of `send_bytes`. The function should accept a single argument: the number of times the stub has been called, including the current call.\n\n```python\ndevice.stub(\n  receive_bytes=b'123',\n  send_fn=lambda n: bytes(str(n), encoding='utf-8') + b'23'\n)\n\nserial.write(b'123123')\nassert serial.read(6) == b'123223'\n```\n\n## Debugging\n\nMockSerial has lots of `DEBUG` logs so you can see what it's doing. It may also log a warning if it has trouble closing. This can be helpful if you're trying to debug how it's interacting with your code.\n\n```python\nimport logging, sys\n\nlogging.basicConfig(\n  stream=sys.stdout,\n  level=logging.DEBUG,\n  format=\"%(levelname)s - %(message)s\"\n)\n\n...\n```\n\nThis is a rough example of what the logs look like.\n\n```\nDEBUG - Attached to mock serial port.\nDEBUG - Buffer read: b'123'.\nDEBUG - Potential matches: [b'1234' => b'456', b'1235' => fn()].\nDEBUG - Buffer read: b'12341235'.\nDEBUG - Match stub: b'1234' => b'456'.\nDEBUG - Buffer write: b'456'.\nDEBUG - Match stub: b'1235' => fn().\nDEBUG - Buffer write: b'123'.\nDEBUG - Detaching mock serial port.\nDEBUG - Buffer read: b'mockserialquit'.\nDEBUG - Detached mock serial port.\nDEBUG - Closing mock serial port.\nDEBUG - Closed mock serial port.\n```\n\nAs you can see, MockSerial sends itself a special control sequence when closing. This signals to the worker thread to detach from the mock serial port, which is (sometimes) necessary in order to close it.\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Licence\n\nSee [LICENCE](LICENCE).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/benthorner/mock_serial",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mock-serial",
    "package_url": "https://pypi.org/project/mock-serial/",
    "platform": "",
    "project_url": "https://pypi.org/project/mock-serial/",
    "project_urls": {
      "Bug Tracker": "https://github.com/benthorner/mock_serial/issues",
      "Homepage": "https://github.com/benthorner/mock_serial"
    },
    "release_url": "https://pypi.org/project/mock-serial/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A mock utility for testing serial devices",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12100321,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98c28c1e6bf77cf62a10203a107179e34e0965fc5369386e0b7034a247ed054d",
          "md5": "ac0d4d32ed25214ba351f01313b481c9",
          "sha256": "b6b8cc10c302354bf3ca270a3d4d6bf199c4bbe41478c65046db8f30ea967675"
        },
        "downloads": -1,
        "filename": "mock_serial-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac0d4d32ed25214ba351f01313b481c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6080,
        "upload_time": "2021-11-23T09:34:51",
        "upload_time_iso_8601": "2021-11-23T09:34:51.108179Z",
        "url": "https://files.pythonhosted.org/packages/98/c2/8c1e6bf77cf62a10203a107179e34e0965fc5369386e0b7034a247ed054d/mock_serial-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6d9b9ec64510ffb4bccd7491c4583b8f24732ed4af6311c621822c3a9e47b46",
          "md5": "64f472ad4d882dccaf4c9786b39a0c2f",
          "sha256": "9c92de7495ac375717bbbeb4993534079d2e634f3298d4c400420c4046add06e"
        },
        "downloads": -1,
        "filename": "mock_serial-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "64f472ad4d882dccaf4c9786b39a0c2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5355,
        "upload_time": "2021-11-23T09:34:52",
        "upload_time_iso_8601": "2021-11-23T09:34:52.625081Z",
        "url": "https://files.pythonhosted.org/packages/c6/d9/b9ec64510ffb4bccd7491c4583b8f24732ed4af6311c621822c3a9e47b46/mock_serial-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98c28c1e6bf77cf62a10203a107179e34e0965fc5369386e0b7034a247ed054d",
        "md5": "ac0d4d32ed25214ba351f01313b481c9",
        "sha256": "b6b8cc10c302354bf3ca270a3d4d6bf199c4bbe41478c65046db8f30ea967675"
      },
      "downloads": -1,
      "filename": "mock_serial-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac0d4d32ed25214ba351f01313b481c9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6080,
      "upload_time": "2021-11-23T09:34:51",
      "upload_time_iso_8601": "2021-11-23T09:34:51.108179Z",
      "url": "https://files.pythonhosted.org/packages/98/c2/8c1e6bf77cf62a10203a107179e34e0965fc5369386e0b7034a247ed054d/mock_serial-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6d9b9ec64510ffb4bccd7491c4583b8f24732ed4af6311c621822c3a9e47b46",
        "md5": "64f472ad4d882dccaf4c9786b39a0c2f",
        "sha256": "9c92de7495ac375717bbbeb4993534079d2e634f3298d4c400420c4046add06e"
      },
      "downloads": -1,
      "filename": "mock_serial-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "64f472ad4d882dccaf4c9786b39a0c2f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5355,
      "upload_time": "2021-11-23T09:34:52",
      "upload_time_iso_8601": "2021-11-23T09:34:52.625081Z",
      "url": "https://files.pythonhosted.org/packages/c6/d9/b9ec64510ffb4bccd7491c4583b8f24732ed4af6311c621822c3a9e47b46/mock_serial-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}