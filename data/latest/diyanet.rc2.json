{
  "info": {
    "author": "isidentical",
    "author_email": "isidentical@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Diyanet\n\nPython interface for internal API of Turkey's Presidency of Religious\nAffairs to get prayer times.\n\n## API\n### Units\n- `GeographicUnit`, base class for all geographic units. All units share these members\n    * `idx`: `int` => Internal ID (to use in API)\n    * `name`: `str` => Name of the country\n- `Country`, unit for countries\n- `State`, unit for states (if no states present in given country, this will be same with `Country`)\n    * `country`: `Country` => A link to it's country\n- `Region`, unit for citites/regions\n    * `url`: `str` => URL that points out to prayer times page for that specific region\n    * `state`: `State` => A link to it's state\n    * `country`: `Country` => A link to it's country\n- `PrayerTimes`, unit for prayer times of a day\n    * `fajr`: `time`\n    * `sunrise`: `time`\n    * `dhuhr`: `time`\n    * `asr`: `time`\n    * `maghrib`: `time`\n    * `isha`: `time`\n\n### API\nAll methods described below are members of `Diyanet` class\n- `get_countries`: `() -> Iterator[Country]` => Iterates through all available countries\n- `get_states`: `(country: Country) -> Iterator[State]` => Iterates through all available states\n- `get_regions`: `(state: State) -> Iterator[Region]` => Iterates through all available regions\n- `get_country` / `get_state`/ `get_region` => Takes a `name` (and depending on the context, a geographical unit that covers itself) and returns if it finds something that matches with given name. If there isn't any match, it raises a `ValueError`.\n- `get_times`: `(region: Region) -> PrayerTimes` => Returns prayer times for the current day",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/isidentical/diyanet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "diyanet",
    "package_url": "https://pypi.org/project/diyanet/",
    "platform": "",
    "project_url": "https://pypi.org/project/diyanet/",
    "project_urls": {
      "Homepage": "https://github.com/isidentical/diyanet"
    },
    "release_url": "https://pypi.org/project/diyanet/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Diyanet API",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8894183,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "509cf83483c0cc2ea2fabd98f5aa9621b123d007ff6d31a259072ed4b1e1d37b",
          "md5": "a093eb1083af804270578d096585b907",
          "sha256": "feb61bf363468c9cea8b2bd63623d2e828515c871f6798a33c3d8db73a432407"
        },
        "downloads": -1,
        "filename": "diyanet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a093eb1083af804270578d096585b907",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4948,
        "upload_time": "2020-04-24T18:29:27",
        "upload_time_iso_8601": "2020-04-24T18:29:27.083257Z",
        "url": "https://files.pythonhosted.org/packages/50/9c/f83483c0cc2ea2fabd98f5aa9621b123d007ff6d31a259072ed4b1e1d37b/diyanet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06dcd49dee76f16c109da5da70f7a22ab7fd3629af2f877813d3bd9cabbe869e",
          "md5": "42465886e76c256f85d6e3475989f805",
          "sha256": "6a27be1e6f1d97478954229d7d00cc9dbacd351d73af42b2803cd40f900f4b77"
        },
        "downloads": -1,
        "filename": "diyanet-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "42465886e76c256f85d6e3475989f805",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6190,
        "upload_time": "2020-12-14T09:55:40",
        "upload_time_iso_8601": "2020-12-14T09:55:40.388654Z",
        "url": "https://files.pythonhosted.org/packages/06/dc/d49dee76f16c109da5da70f7a22ab7fd3629af2f877813d3bd9cabbe869e/diyanet-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06dcd49dee76f16c109da5da70f7a22ab7fd3629af2f877813d3bd9cabbe869e",
        "md5": "42465886e76c256f85d6e3475989f805",
        "sha256": "6a27be1e6f1d97478954229d7d00cc9dbacd351d73af42b2803cd40f900f4b77"
      },
      "downloads": -1,
      "filename": "diyanet-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "42465886e76c256f85d6e3475989f805",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6190,
      "upload_time": "2020-12-14T09:55:40",
      "upload_time_iso_8601": "2020-12-14T09:55:40.388654Z",
      "url": "https://files.pythonhosted.org/packages/06/dc/d49dee76f16c109da5da70f7a22ab7fd3629af2f877813d3bd9cabbe869e/diyanet-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}