{
  "info": {
    "author": "ruifengyun",
    "author_email": "rfyiamcool@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.0",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# 项目名:\n`ProcessHandler`  \n\n为避免被喷,这里提前申明下ProcessHandler的设计思想跟代码实现极其认真的`参考`并`抄袭` 开源gunicorn框架 [gunicorn官方](http://gunicorn.org/) . 换句话说ProcessHandler是基于gunicorn开发的.  \n\n更多的内幕及后续的文档更新, 我会放在我博客里面, 有兴趣的朋友可以瞅瞅 [http://xiaorui.cc/?p=2219](http://xiaorui.cc/2015/10/25/%E7%AE%80%E5%8C%96gunicorn%E6%BA%90%E4%BB%A3%E7%A0%81%E6%89%93%E9%80%A0master-worker%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6/)\n\n##用途:\n简单理解为这是一个` Master Worker `框架. 可以说跟nginx的进程管理模式相似的.\n\n工作原理:  \n当ProcessHandle启动后，会有一个master进程和多个worker进程.master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程.   \n对于每个worker进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master进程则很快启动新的worker进程。当然，worker进程的异常退出，肯定是程序有bug了，异常退出，会导致当前worker上的所有请求失败，不过不会影响到所有请求，所以降低了风险。当然，好处还有很多，大家可以慢慢体会。  \n![master worker frame](static/master_worker.png)\n\n另外说下`prefork`工作模型,每个worker进程都是从master进程fork过来.在master进程里面，先建立好需要listen的socket之后，然后再fork出多个worker进程，这样每个worker进程都可以去accept这个socket(当然不是同一个socket，只是每个进程的这个socket会监控在同一个ip地址与端口，在linux下是允许这么干的).  \n我们模拟用户请求过来的场景, 当一个连接进来后，所有在accept在这个socket上面的进程，都会收到通知，而只有一个进程可以accept这个连接，其它的则accept失败.多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的.一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求. worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致.\n\n![master worker frame](static/prefork.jpg)\n\n##闲扯:\n\n可能有些朋友在纳闷、疑惑. 怀疑我为毛又在造轮子,但我想说的是gunicorn代码理解起来不简单,里面还真有不少UNIX设计艺术在里面. 再提一句, gunicorn的代码质量很高,实现的prefork也很是优雅,但是他更多是为web framework打造的.当用gunicorn启动web应用的时候,其实gunicorn为后面的几个web做了各方面的适配. 那我如果只是想做个Master Worker这样的进程管理,那么gunicorn是做不到的,除非是你改gunicorn代码,如果又想基于刚才说的进程框架之上封装一个RPC或Restful Api服务,那么又咋办?  我的回答是,直接重写一个适合自己的.  我曾经视图改过gunicorn和uwsgi的代码,好融合我以前写过的RPC服务,但世事难料... ...  \n\n不管是gunicorn or uwsgi的Master Worker ,Prefork 跟wsgi耦合的太紧密... 结果呢? 这项目就是结果!  \n\n更多的内幕及后续的文档更新,我会放在我博客里面,有兴趣的朋友可以瞅瞅 [http://xiaorui.cc/?p=2219](http://xiaorui.cc/2015/10/25/%E7%AE%80%E5%8C%96gunicorn%E6%BA%90%E4%BB%A3%E7%A0%81%E6%89%93%E9%80%A0master-worker%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6/)\n\n####要做的事情:\n\n* 文档的更新,现在的项目说明是在是太过简陋.\n* 要在ProcessHandler上开发一个高性能的RPC示例代码. \n\n####现在还存在的BUG:\n* pid文件写入有问题\n* 多实例控制问题\n\n----\n\n##文档说明\n\n配置文件说明 config.py:\n```\n[DEFAULT]\n#当收到kill信号后,几秒后干掉worker\ngraceful_timeout        = 3\n\n#应用的环境变量\nbase_path               = . \n\n#日志根目录\nlog_path                = .\n\n#是否支持多实例\nsingle_instance         = false\n\n[jobexecute]\n#是否需要扔到后端\ndaemonize               = true\n\n#进程名字\nproc_name               = jobexecute\n\n#Master主进程PID\npidfile                 = %(base_path)s/master.pid\n\n#日志位置\nlog_file                = %(log_path)s/master.log\n\n#最大的请求数,也可以理解为是调用测试\nmax_requests            = 10000\n\n#启动的进程数目,每个进程都是一个实例\nnumber_workers          = 2\n\n```\n----\n\n##使用方法:\n\n首先需要安装ProcessHandler所需要的关联模块,尽量使用标准库来实现.\n\n```\npip install requirement.txt\n```\n\n下面是主要处理任务模块.  根据自己的场景，直接copy代码就可以了.\n\n```\n# coding=utf-8\n\nimport time\nimport logging\nimport traceback\n\nfrom ProcessHandler.lib.log import setup_file_logging\nfrom ProcessHandler.lib.workers.sync import SyncWorker\n\n\nclass JobExecute(SyncWorker):\n\n    LOGGER_NAME = \"jobexecute\"\n\n    def __init__(self, cfg, file_logger=None, ppid=None, sockets=None):\n        SyncWorker.__init__(self, cfg, file_logger, ppid)\n        setup_file_logging(self.LOGGER_NAME, self.cfg.log_file)\n        self.logger = logging.getLogger(self.LOGGER_NAME)\n\n    def setup(self):\n        super(JobExecute, self).setup()\n\n    def init_process(self):\n        super(JobExecute, self).init_process()\n\n    def stop(self):\n        super(JobExecute, self).stop()\n\n    def handle_request(self):\n        while 1:\n            print 'go....'\n            logger.info('go...')\n            time.sleep(1.5)\n\nif __name__ == '__main__':\n    pass\n```",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://xiaorui.cc",
    "keywords": "ProcessHandler,fengyun",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ProcessHandler",
    "package_url": "https://pypi.org/project/ProcessHandler/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ProcessHandler/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://xiaorui.cc"
    },
    "release_url": "https://pypi.org/project/ProcessHandler/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Manage your process (Master Worker Mode)",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1788606,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2ac34c4b0f0611021f5d79642b23d3207eda893faa902677210160711b0906a",
          "md5": "3de965ffb6fabc98306eabbd8cc1c89b",
          "sha256": "7289e258ea010d097d35c5693b0cc2abca52bb5c8185cad172ca014cc47e771b"
        },
        "downloads": -1,
        "filename": "ProcessHandler-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3de965ffb6fabc98306eabbd8cc1c89b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4806,
        "upload_time": "2015-10-27T15:52:45",
        "upload_time_iso_8601": "2015-10-27T15:52:45.209717Z",
        "url": "https://files.pythonhosted.org/packages/d2/ac/34c4b0f0611021f5d79642b23d3207eda893faa902677210160711b0906a/ProcessHandler-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2ac34c4b0f0611021f5d79642b23d3207eda893faa902677210160711b0906a",
        "md5": "3de965ffb6fabc98306eabbd8cc1c89b",
        "sha256": "7289e258ea010d097d35c5693b0cc2abca52bb5c8185cad172ca014cc47e771b"
      },
      "downloads": -1,
      "filename": "ProcessHandler-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3de965ffb6fabc98306eabbd8cc1c89b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4806,
      "upload_time": "2015-10-27T15:52:45",
      "upload_time_iso_8601": "2015-10-27T15:52:45.209717Z",
      "url": "https://files.pythonhosted.org/packages/d2/ac/34c4b0f0611021f5d79642b23d3207eda893faa902677210160711b0906a/ProcessHandler-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}