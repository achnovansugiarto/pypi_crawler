{
  "info": {
    "author": "Andrei Denissov",
    "author_email": "andrei.denissov@cognizant.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# openssh_key_parser\n\nThe purpose of this repo (cloned from https://github.com/scottcwang/openssh_key_parser)\nis to get Python 3.8 running version of openssh_key_parser library,\nwith all functionality being the same.\nIn addition, I've fixed source code to make it really pass all unit tests and static checks.\n(Run top-level pytest after installing everything from requirements-dev.txt)\n\nOriginal README follows below:\n\n**Please don't use versions 0.0.1 - 0.0.5, which are affected by\n[CVE-2022-31124](https://github.com/scottcwang/openssh_key_parser/security/advisories/GHSA-hm37-9xh2-q499),\na High severity vulnerability. Upgrade to at least version 0.0.6.**\n\nThis repository provides `openssh_key`, a Python package providing utilities to\nparse and pack OpenSSH private and public key files.\n\nIt supports parsing and packing keys of all types currently supported by\nOpenSSH:\n\n* `ssh-rsa`\n* `ssh-ed25519`\n* `ssh-dss`\n* `ecdsa-sha2-{nistp256,nistp384,nistp521}`\n* `sk-{ed25519,ecdsa-sha2-nistp256}@openssh.com` FIDO/U2F security keys\n* `*-cert-v01@openssh.com` certificates\n\nIt can optionally encrypt and decrypt private keys using the `bcrypt` key\nderivation function and any cipher currently supported by OpenSSH:\n\n* `aes{128,192,256}-{ctr,cbc}`\n* `aes{128,256}-gcm@openssh.com`\n* `chacha20-poly1305@openssh.com`\n* `3des-cbc`\n\nIt is compliant with\nthe [OpenSSH private key vendor extension](https://cvsweb.openbsd.org/src/usr.bin/ssh/PROTOCOL.key?annotate=HEAD),\nin particular supporting multiple keys in a private key file.\n\nKeys can be converted to corresponding classes provided by:\n* [`cryptography`](https://pypi.org/project/cryptography/)\n* [`pynacl`](https://pypi.org/project/PyNaCl/)\n\nCheck out the [documentation](https://openssh-key-parser.readthedocs.io/en/latest/).\n\n## Example\n\n### See what is in an OpenSSH key file\n\n```\n$ ssh-keygen -t ed25519 -N secret_passphrase -C my_comment -f test_id_ed25519\nGenerating public/private ed25519 key pair.\nYour identification has been saved in test_id_ed25519.\nYour public key has been saved in test_id_ed25519.pub.\nThe key fingerprint is:\nSHA256:NbhmjL1RfNkYWOb63Rq2ugIzsmr9zLoSsn5ZUPa3Qic my_comment\nThe key's randomart image is:\n+--[ED25519 256]--+\n|           o+    |\n|      o  o.o =   |\n|     o .. = = .  |\n|    .  +E+o+     |\n|     ...S+..     |\n|  . . oo=o.. . . |\n|   o = o.=  . + .|\n|  . = oo  .  . + |\n| ..o.oo++  .ooo  |\n+----[SHA256]-----+\n```\n```\n$ python -m openssh_key test_id_ed25519 --passphrase secret_passphrase\n```\n```json\n{\n    \"data\": [\n        [\n            {\n                \"header\": {\n                    \"key_type\": \"ssh-ed25519\"\n                },\n                \"params\": {\n                    \"data\": {\n                        \"public\": \"b'\\\\xd0\\\\x96\\\\x7f\\\\xcd\\\\x02K\\\\x8e\\\\xfe)\\\\xc1\\\\xd1p\\\\x00\\\\xbd\\\\xcf\\\\xe3\\\\xf6\\\\xe8\\\\x91\\\\xc9\\\\x84\\\\xf5\\\\x9e\\\\xacL\\\\xe0\\\\x9c/2i8R'\"\n                    }\n                },\n                \"footer\": {},\n                \"clear\": {}\n            },\n            {\n                \"header\": {\n                    \"key_type\": \"ssh-ed25519\"\n                },\n                \"params\": {\n                    \"data\": {\n                        \"public\": \"b'\\\\xd0\\\\x96\\\\x7f\\\\xcd\\\\x02K\\\\x8e\\\\xfe)\\\\xc1\\\\xd1p\\\\x00\\\\xbd\\\\xcf\\\\xe3\\\\xf6\\\\xe8\\\\x91\\\\xc9\\\\x84\\\\xf5\\\\x9e\\\\xacL\\\\xe0\\\\x9c/2i8R'\",\n                        \"private_public\": \"b'\\\\x99\\\\x08;#\\\\x07\\\\xb970\\\\xc3\\\\xeb\\\\\\\\\\\\x0e\\\\xe4\\\\xc1\\\\x1a\\\\xd4\\\\x12\\\\xa6\\\\x05\\\\x88v\\\\xae\\\\x9e9\\\\xc28\\\\x1a\\\\xb8\\\\x92b0\\\\x8c\\\\xd0\\\\x96\\\\x7f\\\\xcd\\\\x02K\\\\x8e\\\\xfe)\\\\xc1\\\\xd1p\\\\x00\\\\xbd\\\\xcf\\\\xe3\\\\xf6\\\\xe8\\\\x91\\\\xc9\\\\x84\\\\xf5\\\\x9e\\\\xacL\\\\xe0\\\\x9c/2i8R'\"\n                    }\n                },\n                \"footer\": {\n                    \"comment\": \"my_comment\"\n                },\n                \"clear\": {}\n            }\n        ]\n    ],\n    \"byte_string\": \"b'openssh-key-v1\\\\x00\\\\x00\\\\x00\\\\x00\\\\naes256-ctr\\\\x00\\\\x00\\\\x00\\\\x06bcrypt\\\\x00\\\\x00\\\\x00\\\\x18\\\\x00\\\\x00\\\\x00\\\\x10\\\\xfa\\\\xca\\\\x90\\\\x04\\\\x96\\\\x83\\\\xbb\\\\xe9\\\\x00\\\\x05\\\\'\\\\x8ev\\\\x06,t\\\\x00\\\\x00\\\\x00\\\\x10\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x003\\\\x00\\\\x00\\\\x00\\\\x0bssh-ed25519\\\\x00\\\\x00\\\\x00 \\\\xd0\\\\x96\\\\x7f\\\\xcd\\\\x02K\\\\x8e\\\\xfe)\\\\xc1\\\\xd1p\\\\x00\\\\xbd\\\\xcf\\\\xe3\\\\xf6\\\\xe8\\\\x91\\\\xc9\\\\x84\\\\xf5\\\\x9e\\\\xacL\\\\xe0\\\\x9c/2i8R\\\\x00\\\\x00\\\\x00\\\\x90\\\\xf9Iu\\\\x91\\\\x7f\\\\x82V\\\\xe1E2\\\\x98\\\\x17\\\\x82g8jmdy\\\\xabZz\\\\x85\\\\xa5\\\\xa1\\\\x05%\\\\x9a\\\\xdds\\\\x18/\\\\xd2[\\\\xad\\\\xd6\\\\xc6\\\\xe3\\\\xb14\\\\x92\\\\xa85\\\\x05BI#7\\\\x93#\\\\x07\\\\x9cu\\\\xe4\\\\xcb\\\\xccJ\\\\xe2\\\\x98\\\\xb4\\\\xde\\\\xf8\\\\x96\\\\x8f/)2P\\\\xef\\\\x02DgO\\\\x1d\\\\xe9\\\\x82\\\\xc2\\\\xa0D\\\\xbe\\\\x88\\\\xef\\\\xb4\\\\x86\\\\xbb\\\"I\\\\xc0\\\\x10\\\\x91\\\\xebT|\\\\x9a:\\\\xaf\\\\r6MZq\\\\xba\\\\xa7|r\\\\x17=\\\\xe7\\\\xaa\\\\xdeq.\\\\xa4\\\\xef\\\\xdc!\\\\x12N\\\\xdf\\\\x14\\\\x98\\\\xec-,~6\\\\x81.\\\\xa0\\\\xec\\\\xfe[.\\\\x17\\\\xf3z\\\\xbf\\\\xa1Q\\\\xbf\\\\xda\\\\xb3\\\\xeeY'\",\n    \"header\": {\n        \"auth_magic\": \"b'openssh-key-v1\\\\x00'\",\n        \"cipher\": \"aes256-ctr\",\n        \"kdf\": \"bcrypt\",\n        \"kdf_options\": \"b\\\"\\\\x00\\\\x00\\\\x00\\\\x10\\\\xfa\\\\xca\\\\x90\\\\x04\\\\x96\\\\x83\\\\xbb\\\\xe9\\\\x00\\\\x05'\\\\x8ev\\\\x06,t\\\\x00\\\\x00\\\\x00\\\\x10\\\"\",\n        \"num_keys\": 1\n    },\n    \"cipher_bytes\": \"b'\\\\xf9Iu\\\\x91\\\\x7f\\\\x82V\\\\xe1E2\\\\x98\\\\x17\\\\x82g8jmdy\\\\xabZz\\\\x85\\\\xa5\\\\xa1\\\\x05%\\\\x9a\\\\xdds\\\\x18/\\\\xd2[\\\\xad\\\\xd6\\\\xc6\\\\xe3\\\\xb14\\\\x92\\\\xa85\\\\x05BI#7\\\\x93#\\\\x07\\\\x9cu\\\\xe4\\\\xcb\\\\xccJ\\\\xe2\\\\x98\\\\xb4\\\\xde\\\\xf8\\\\x96\\\\x8f/)2P\\\\xef\\\\x02DgO\\\\x1d\\\\xe9\\\\x82\\\\xc2\\\\xa0D\\\\xbe\\\\x88\\\\xef\\\\xb4\\\\x86\\\\xbb\\\"I\\\\xc0\\\\x10\\\\x91\\\\xebT|\\\\x9a:\\\\xaf\\\\r6MZq\\\\xba\\\\xa7|r\\\\x17=\\\\xe7\\\\xaa\\\\xdeq.\\\\xa4\\\\xef\\\\xdc!\\\\x12N\\\\xdf\\\\x14\\\\x98\\\\xec-,~6\\\\x81.\\\\xa0\\\\xec\\\\xfe[.\\\\x17\\\\xf3z\\\\xbf\\\\xa1Q\\\\xbf\\\\xda\\\\xb3\\\\xeeY'\",\n    \"kdf_options\": {\n        \"salt\": \"b\\\"\\\\xfa\\\\xca\\\\x90\\\\x04\\\\x96\\\\x83\\\\xbb\\\\xe9\\\\x00\\\\x05'\\\\x8ev\\\\x06,t\\\"\",\n        \"rounds\": 16\n    },\n    \"decipher_bytes\": \"b'\\\\xb1\\\\xe5\\\\x03+\\\\xb1\\\\xe5\\\\x03+\\\\x00\\\\x00\\\\x00\\\\x0bssh-ed25519\\\\x00\\\\x00\\\\x00 \\\\xd0\\\\x96\\\\x7f\\\\xcd\\\\x02K\\\\x8e\\\\xfe)\\\\xc1\\\\xd1p\\\\x00\\\\xbd\\\\xcf\\\\xe3\\\\xf6\\\\xe8\\\\x91\\\\xc9\\\\x84\\\\xf5\\\\x9e\\\\xacL\\\\xe0\\\\x9c/2i8R\\\\x00\\\\x00\\\\x00@\\\\x99\\\\x08;#\\\\x07\\\\xb970\\\\xc3\\\\xeb\\\\\\\\\\\\x0e\\\\xe4\\\\xc1\\\\x1a\\\\xd4\\\\x12\\\\xa6\\\\x05\\\\x88v\\\\xae\\\\x9e9\\\\xc28\\\\x1a\\\\xb8\\\\x92b0\\\\x8c\\\\xd0\\\\x96\\\\x7f\\\\xcd\\\\x02K\\\\x8e\\\\xfe)\\\\xc1\\\\xd1p\\\\x00\\\\xbd\\\\xcf\\\\xe3\\\\xf6\\\\xe8\\\\x91\\\\xc9\\\\x84\\\\xf5\\\\x9e\\\\xacL\\\\xe0\\\\x9c/2i8R\\\\x00\\\\x00\\\\x00\\\\nmy_comment\\\\x01\\\\x02\\\\x03'\",\n    \"decipher_bytes_header\": {\n        \"check_int_1\": 2984575787,\n        \"check_int_2\": 2984575787\n    },\n    \"decipher_padding\": \"b'\\\\x01\\\\x02\\\\x03'\"\n}\n```\n```\n$ python -m openssh_key test_id_ed25519.pub\n```\n```json\n[\n    {\n        \"header\": {\n            \"key_type\": \"ssh-ed25519\"\n        },\n        \"params\": {\n            \"data\": {\n                \"public\": \"b'\\\\xd0\\\\x96\\\\x7f\\\\xcd\\\\x02K\\\\x8e\\\\xfe)\\\\xc1\\\\xd1p\\\\x00\\\\xbd\\\\xcf\\\\xe3\\\\xf6\\\\xe8\\\\x91\\\\xc9\\\\x84\\\\xf5\\\\x9e\\\\xacL\\\\xe0\\\\x9c/2i8R'\"\n            }\n        },\n        \"footer\": {},\n        \"clear\": {\n            \"key_type\": \"ssh-ed25519\",\n            \"comment\": \"my_comment\"\n        }\n    }\n]\n```\n\n### Manipulate a private key file\n\n```\n$ python\n```\n```python\n>>> import openssh_key.private_key_list as pkl\n>>> sk_list = pkl.PrivateKeyList.from_string(open('test_id_ed25519').read(), passphrase='secret_passphrase')\n>>> sk_list\n[PublicPrivateKeyPair(public=<openssh_key.key.PublicKey object at 0x7fd0808f6400>, private=<openssh_key.key.PrivateKey object at 0x7fd07f781640>)]\n>>> sk_list[0].private.footer\n{'comment': 'my_comment'}\n>>> sk_list[0].private.footer['comment'] = 'new_comment'\n>>> _ = open('modified_test_id_ed25519', 'w').write(sk_list.pack_string(passphrase='new_secret_passphrase'))\n>>> _ = open('modified_test_id_ed25519.pub', 'w').write(sk_list[0].public.pack_public_string())\n```\n\n### Generate a private key\n\n```python\n>>> pk_sk_pair = pkl.PublicPrivateKeyPair.generate('ssh-rsa', 'comment')\n>>> generated_sk_list = pkl.PrivateKeyList.from_list([pk_sk_pair], cipher='aes256-ctr', kdf='bcrypt')\n>>> _ = open('generated_test_id_rsa', 'w').write(generated_sk_list.pack_string(passphrase='secret_passphrase'))\n>>> _ = open('generated_test_id_rsa.pub', 'w').write(generated_pk_key.pack_public_string())\n```\n\n### Convert keys to external classes\n\n```python\n>>> import cryptography.hazmat.primitives.asymmetric.rsa as rsa\n>>> sk_params.convert_to(rsa.RSAPrivateKey)\n<cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey object at 0x7f74522fadc0>\n>>> sk_params.convert_to(rsa.RSAPublicKey)\n<cryptography.hazmat.backends.openssl.rsa._RSAPublicKey object at 0x7f74522faac0>\n```\n\n## Tests\n\nThe package provides a full-coverage test suite and complete type annotations.\n\n```\n$ git clone https://github.com/scottcwang/openssh_key_parser.git\n$ pip install .\n$ pip install -r requirements-dev.txt\n$ pytest\n```\n\n## Changelog\n\n### 0.0.6\n\n- _Fix_ - Don't dump raw bytes in `pascal_style_byte_stream` exception message.\n  **Fixes [CVE-2022-31124](https://github.com/scottcwang/openssh_key_parser/security/advisories/GHSA-hm37-9xh2-q499),\n  a High severity vulnerability.** ([@mike-arnica](https://github.com/mike-arnica))\n- _Fix_ - Raise `ValueError` instead of `NotImplementedError`\n\n### 0.0.5\n\n- _Fix_ - Fix incorrect key type name for `ecdsa-sha2-*`\n- _Fix_ - Fix bad import of `nacl.signing` in `ed25519`\n- **Breaking change** - The `create_{cipher,kdf_options,public_key_params,private_key_params}`\n  factory methods are renamed to `get_*_class`\n- Migrate to `pyproject.toml`\n\n### 0.0.4\n\n- **Breaking change** - The `encrypt` and `decrypt` methods of the `Cipher`\n  class now take as arguments an instance of the `KDF` class and a `passphrase`\n  (and no longer `cipher_key` and `initialization_vector`)\n- **Breaking change** - The `kdf` module has been renamed to `kdf_options`\n- Support `aes128-ctr`, `aes192-ctr`, `aes128-cbc`, `aes192-cbc`, `aes256-cbc`,\n  `3des-cbc`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`, and\n  `chacha20-poly1305@openssh.com` ciphers for private key encryption\n- Add a `generate` static method to `PublicPrivateKeyPair`\n- _Fix_ - Write an additional newline at the end of a private key file, which\n  is required by OpenSSH `ssh-keygen`\n\n### 0.0.3\n\n- 0.0.2 and on requires Python >=3.10 ([@FloLie](https://github.com/FloLie))\n\n### 0.0.2\n\n- Support `ssh-dss`, `ssh-ecdsa-*`, `sk-*@openssh.com` (FIDO/U2F security\n  key) and `*-cert-v01@openssh.com` (certificate) key types\n\n### 0.0.1\n\nInitial release, supporting:\n\n- `ssh-rsa` and `ssh-ed25519` key types\n- `none` and `aes256-ctr` ciphers for private keys\n- `none` and `bcrypt` key derivation functions for ciphers\n- OpenSSH key formats\n\n## Security\n\nI'm grateful to Mike Doyle ([@mike-arnica](https://github.com/mike-arnica)), Head of Security Research at\nArnica.io, for performing a [security review](https://github.com/scottcwang/openssh_key_parser/pull/5) of\nversion 0.0.5 of `openssh_key_parser` and finding\n[CVE-2022-31124](https://github.com/scottcwang/openssh_key_parser/security/advisories/GHSA-hm37-9xh2-q499).\n[Here's](https://www.arnica.io/blog/hacking-upstream-finding-a-0-day-in-an-openssh-key-parser-library) Mike's blog post\nabout the process he undertook.\n\nTo report a vulnerability, please [open a new draft security\nadvisory](https://github.com/scottcwang/openssh_key_parser/security/advisories/new).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andreidenissov-cog/openssh_key_parser",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openssh-key-parser3.8",
    "package_url": "https://pypi.org/project/openssh-key-parser3.8/",
    "platform": null,
    "project_url": "https://pypi.org/project/openssh-key-parser3.8/",
    "project_urls": {
      "Homepage": "https://github.com/andreidenissov-cog/openssh_key_parser"
    },
    "release_url": "https://pypi.org/project/openssh-key-parser3.8/0.0.6.2/",
    "requires_dist": [
      "bcrypt (>=3.0.0)",
      "cryptography",
      "pytest (>=6.0.0) ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pytest-pylint ; extra == 'test'",
      "pytest-mock ; extra == 'test'",
      "pytest-mypy ; extra == 'test'",
      "pynacl ; extra == 'test'",
      "sphinx (>=3.0.0) ; extra == 'test'",
      "sphinx-autodoc-typehints ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "OpensshKeyParser library",
    "version": "0.0.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14631148,
  "releases": {
    "0.0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cd3b15ebe392b4d1ee0250ffc0a94aeabc63788161f901a66763f0f88faf7dc",
          "md5": "ffa5051e265f7f0609eabff5ec21d85b",
          "sha256": "318f376a1050077b26d1e9651a9aac96e646cde41e29c53076ea1907bee1c12c"
        },
        "downloads": -1,
        "filename": "openssh_key_parser3.8-0.0.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffa5051e265f7f0609eabff5ec21d85b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 64786,
        "upload_time": "2022-08-02T17:44:16",
        "upload_time_iso_8601": "2022-08-02T17:44:16.021828Z",
        "url": "https://files.pythonhosted.org/packages/9c/d3/b15ebe392b4d1ee0250ffc0a94aeabc63788161f901a66763f0f88faf7dc/openssh_key_parser3.8-0.0.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9cd3b15ebe392b4d1ee0250ffc0a94aeabc63788161f901a66763f0f88faf7dc",
        "md5": "ffa5051e265f7f0609eabff5ec21d85b",
        "sha256": "318f376a1050077b26d1e9651a9aac96e646cde41e29c53076ea1907bee1c12c"
      },
      "downloads": -1,
      "filename": "openssh_key_parser3.8-0.0.6.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ffa5051e265f7f0609eabff5ec21d85b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 64786,
      "upload_time": "2022-08-02T17:44:16",
      "upload_time_iso_8601": "2022-08-02T17:44:16.021828Z",
      "url": "https://files.pythonhosted.org/packages/9c/d3/b15ebe392b4d1ee0250ffc0a94aeabc63788161f901a66763f0f88faf7dc/openssh_key_parser3.8-0.0.6.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}