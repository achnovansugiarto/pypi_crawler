{
  "info": {
    "author": "罗科峰",
    "author_email": "lkf20031988@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# rtsf-win\n基于rtsf测试框架，关键字驱动Windows UI层面，进行自动化的控制及功能测试\n\n\n## 环境准备\n\npip install rtsf-win\n\n\n## 编写测试用例，模板基于rtsf\n\n> 变量引用-> $var    关键字(函数)引用-> ${function}\n\n- 常量的定义， glob_var 和  glob_regx\n- 模板常用的关键字，参见 [rtsf](https://github.com/RockFeng0/rtsf)介绍\n\n### 如何获取控件\n\n运行 automation.py -h\n\n![uiautomation-h.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-win-img/uiautomation-h.png)\n\nautomation中的参数示例如下:\n\nautomation.py -r -d 1 -t 0 ,# print desktop(the root of control tree) and it's children(top level windows) \n\nautomation.py -t 0 -n -m ,# print current active window's controls, show fullname, show more properties\n\nautomation.py -t 3 ,# 延时3秒，打印当前激活窗口的树形结构，默认深度为1; 比如，此时打开notepad.exe,等待一会，automation.py会打印Notepad的所有控件树，并保存在 @AutomationLog.txt\n\n```\n# 一个简单的示例\nimport subprocess\nimport uiautomation as automation\n\nprint(automation.GetRootControl())\nsubprocess.Popen('notepad.exe')\nnotepadWindow = automation.WindowControl(searchDepth = 1, ClassName = 'Notepad')\nprint(notepadWindow.Name)\nnotepadWindow.SetTopmost(True)\nedit = notepadWindow.EditControl()\nedit.SetValue('Hello')\nedit.SendKeys('{Ctrl}{End}{Enter}World')\nnotepadWindow.Close()\nnotepadWindow.ButtonControl(Name=u'保存(S)').Invoke()\nnotepadWindow.EditControl(Name=\"文件名:\",AutomationId=\"1001\").SetValue(r'c:\\test dir')\nnotepadWindow.ButtonControl(Name=\"取消\").Invoke()\nnotepadWindow.Close()\nnotepadWindow.ButtonControl(Name=u'不保存(N)').Invoke()\n```\n\n关于uiautomation的工作原理，参见[详细介绍](http://www.cnblogs.com/Yinkaisheng/p/3444132.html)\n\n另外一个 UI工具, [Inspect.exe](https://docs.microsoft.com/zh-cn/windows/desktop/WinAuto/inspect-objects) 由 Microsoft支持,也能遍历windows UI元素。 不同的是，该工具有界面，而automation是个终端输出。不过，习惯了automation，你会发现更方便\n\n![inspect-exe.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-win-img/inspect-exe.png)\n\n\n### 基本用例\n\n基本用例，是指没有分层的情况下，简单的测试用例\n\n```\n# test_case.yaml\n# yaml测试用例，模型示例:\n- project:\n    name: xxx Window\n    module: xxx模块-功能测试\n\n- case:\n    # id desc 选填，非约定字段\n    id: ATP-1\n    desc: 测试用例-模板格式的设计-模板（全字段）\n\n    # name 必填，需确保唯一性\n    name: windows_ui_auto_test_demo_1\n\n    # responsible 选填\n    responsible: rockfeng0\n\n    # tester 选填\n    tester: rockfeng0\n\n    # 定义正则表达式, 定义的字符串不会解析,选填\n    glob_regx:\n        rex_open_file: '(文件名.*)'\n        rex_hello: 'Hello'\n\n    # 定义变量， 效果同 SetVar(name, value),选填\n    glob_var:\n        program: C:\\Windows\\System32\\notepad.exe\n        title: 无标题 - 记事本\n        keys: '{Ctrl}{End}{Enter}World'\n        text_hello: 'Hello'\n        text_save: '保存(S)'\n        text_file_path: 'c:\\some test dir'\n        text_unsave: '不保存(N)'\n\n    # pre_command 选填\n    pre_command:\n        - ${StartApplication($program)}\n        - ${TimeSleep(2)}\n        - ${SwitchToRootControl()}\n\n    # steps 必填\n    steps:      \n\n        # 在windows中，定位元素            \n        - windriver:\n            ControlType: WindowControl\n            ClassName: Notepad\n            Depth: 1\n            index: 1\n            timeout: 10\n            action: ${ActivateWindow()}\n\n        - windriver:\n            action: ${MoveWindowPos(400, 400)}\n\n        - windriver:\n            action: ${VerifyProperty(Name, $title)}\n\n        - windriver:\n            action: ${TimeSleep(2)} \n\n        - windriver:\n            action: ${SwitchToCurrentControl()}\n\n        - windriver:\n            action: ${SetSearchProperty(ControlType=EditControl, ClassName=Edit)}\n\n        - windriver:\n            action: ${DyPropertyData(class_name, ClassName)}\n\n        - windriver:\n            action: ${VerifyVar(class_name, Edit)} \n\n        - windriver:\n            action: ${SetValue(Hello)}\n\n        - windriver:          \n            action: ${SendKeys($keys)}\n\n    # post_command 选填\n    post_command:\n        - ${DyTextData(text, $rex_hello)}\n\n    # verify 选填\n    verify:\n        - ${VerifyVar(text, $text_hello)} \n\n```\n\n### 分层用例\n\n- 分层用例，是指模块功能测试的时候，对测试用例进行分层，最小的单元为api，其次为suite，最后组成用例\n- 其存放路径、编写规则等，详见 [rtsf](https://github.com/RockFeng0/rtsf)相关介绍\n- 示例可以，参见[rtsf-http](https://github.com/RockFeng0/rtsf-http)相关介绍\n\n\n## 执行测试用例\n\n### windriver 命令\n\n```\n# 查看帮助 -h \nwindriver -h\n\n# 执行测试用例\nwindriver C:\\f_disk\\BaiduNetdiskDownload\\rtsf-win\\tests\\data\\test_case.yaml\n```\n\n## 测试报告及日志\n\n> 执行结束后，测试用例所在路径，就是report生成的路径\n\n\n\n## 封装的关键字(内置函数)\n\n关键字的使用，在前面，有介绍，规则如下\n> 变量引用-> $var    关键字(函数)引用-> ${function}\n\n###  元素定位相关操作\n\n<table>\n    <tr>\n        <th>WinElement methods</th>\n        <th>参数</th>\n        <th>参数类型</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <td rowspan=\"7\">SetSearchProperty(**kwargs)</td>\n        <td>ControlType</td>\n        <td>str or unicode</td>\n        <td>always suggest to use, because some ControlType has special pattern functions</td>              \n    </tr>\n    <tr>\n        <td>ClassName</td>\n        <td>str or unicode</td>\n        <td>控件ClassName</td>\n    </tr>\n    <tr>\n       <td>AutomationId</td>\n       <td>str or unicode</td>\n       <td>控件AutomationId</td>\n   </tr>\n   <tr>\n       <td>Name</td>\n       <td>str or unicode</td>\n       <td>控件Name</td>\n   </tr>\n   <tr>\n       <td>SubName</td>\n       <td>str or unicode</td>\n       <td>控件SubName</td>\n   </tr>\n   <tr>\n       <td>RegexName</td>\n       <td>str or unicode, supports regex</td>\n       <td>正则表达式，用于控件Name</td>\n   </tr>\n   <tr>\n       <td>Depth</td>\n       <td>integer</td>\n       <td>控件搜索的深度，默认是最大值:260</td>\n   </tr>\n   <tr>\n        <td>SwitchToCurrentControl()</td>\n        <td colspan=\"2\"></td>\n        <td>切换到当前控件，以此作为搜索的根控件. **配合SetSearchProperty使用**</td>                \n    </tr>\n    <tr>\n        <td>SwitchToRootControl()</td>\n        <td colspan=\"2\"></td>\n        <td>切换到根控件(桌面)，以此作为搜索的根控件. **配合SetSearchProperty使用**</td>                \n    </tr>   \n</table>\n\n\n### WinContext methods --> 用于上下文管理\n```\nDyPropertyData(var, attr)                   # -> 属性-动态存储变量，适用于，保存UI元素属性值。var-变量名称，attr为UI元素的属性名称，**配合SetSearchProperty使用**\nDyTextData(var, regx, index)                # -> 字符串-动态存储变量，适用于，保存文本控件中指定的值。 var-变量名称，regx已编译的正则表达式，index指定索引，默认0\n\nGetVar(name)                                # -> 获取指定变量的值\nSetVar(name,value)                          # -> 设置指定变量的值\n```\n\n### WinWait methods --> 用于时间的控制\n```\nTimeSleep(seconds)                   # -> 指定等待时间(秒钟)\nWaitForExist(timeout)                # -> 等待元素，timeout设置超时时间，单位秒，**配合SetSearchProperty使用**\nWaitForDisappear(timeout)            # -> 等待元素消失，timeout设置超时时间，单位秒，**配合SetSearchProperty使用**\n```\n\n### WinVerify methods --> 用于验证\n```\nVerifyVar(name, expect_value)              # -> 验证变量值，变量name的值是expect_value\nVerifyProperty(attr, expect_value)         # -> 验证元素属性attr的值，包含值expect_value,**配合SetSearchProperty使用**\nVerifyKeyboardFocusable()                  # -> 验证该控件是否可被键盘聚焦，**配合SetSearchProperty使用**\nVerifyKeyboardFocused()                    # -> 验证该控件已被键盘聚焦，**配合SetSearchProperty使用**\nVerifyElemEnabled()                        # -> 验证该控件已启用，**配合SetSearchProperty使用**\nVerifyNotExist()                           # -> 验证该控件不存在，**配合SetSearchProperty使用**\n```\n\n### WinActions methods --> 用于Windows UI（WPF or MFC）操作\n```\n\nStartApplication(app_path)                    # -> 运行指定路径（app_path）的应用程序\nSetWinStat(state)                             # -> 设置window窗口状态，值：Normal、Maximize、Minimize。隶属WindowPattern，**配合SetSearchProperty使用**\nActivateWindow()                              # -> 激活window窗口并设置焦点。隶属WindowPattern，**配合SetSearchProperty使用**\nSetTopmost(is_top_most)                       # -> 设置windows窗口是否置顶，is_top_most默认为True。隶属WindowPattern，**配合SetSearchProperty使用**\nMoveWindowPos(x, y)                           # -> 移动windows窗口，默认(x=-1,y=-1)移动到屏幕中心。隶属WindowPattern，**配合SetSearchProperty使用**\nCloseWin()                                    # -> 关闭windows窗口。隶属WindowPattern，**配合SetSearchProperty使用**\nInvoke()                                      # -> 触发控件Invoke事件，类似于点击。隶属InvokePattern，**配合SetSearchProperty使用**\nSetValue(value)                               # -> 触发控件SetValue事件，类似于设置文本值。隶属ValuePattern，**配合SetSearchProperty使用**\nCurrentValue()                                # -> 触发控件CurrentValue事件，类似于获取文本值。隶属ValuePattern，**配合SetSearchProperty使用**\nScrollTo(horizontalPercent,verticalPercent)   # -> 触发控件ScrollTo事件，参数值为横纵百分比区间(0,100)，类似滚动滚动条。隶属ScrollPattern，**配合SetSearchProperty使用**      \nCheckOn()                                     # -> 触发控件CheckOn事件，勾选复选框。隶属TogglePattern，**配合SetSearchProperty使用**  \nCheckOff()                                    # -> 触发控件CheckOff事件，取消勾选复选框。隶属TogglePattern，**配合SetSearchProperty使用**\nExpandOn()                                    # -> 触发控件ExpandOn事件，展开下拉框。隶属ExpandCollapsePattern，**配合SetSearchProperty使用**\nExpandOff()                                   # -> 触发控件ExpandOff事件，收起下拉框。隶属ExpandCollapsePattern，**配合SetSearchProperty使用**  \nSelectItem()                                  # -> 触发控件SelectItem事件，在组合框、 列表框、选项卡等展开操作后，选择条目。隶属SelectionItemPattern，**配合SetSearchProperty使用**\nClick(ratioX,ratioY,simulateMove)             # -> 在指定控件中，鼠标左键单击，参数都有默认值。隶属Win32API，**配合SetSearchProperty使用**\n    示例如：\n    Click(): click center and move cursor to control smoothly\n    Click(10, 10): click left+10, top+10\n    Click(-10, -10): click right-10, bottom-10\n    simulateMove: bool, if True, first move cursor to control smoothly\n\nDoubleClick(ratioX,ratioY,simulateMove)       # -> 在指定控件中，鼠标左键双击，用法同Click。隶属Win32API，**配合SetSearchProperty使用**\nWheelDown(times)                              # -> 在指定控件中，滚轮向下滑动几次，times参数为整数。隶属Win32API，**配合SetSearchProperty使用**\nWheelUp(times)                                # -> 在指定控件中，滚轮向上滑动几次，times参数为整数。隶属Win32API，**配合SetSearchProperty使用**\nSendKeys(text)                                # -> 在指定空间中，模拟发送keys,\n    示例如：\n    #press Ctrl+a, Delete, Ctrl+v, Ctrl+s, Ctrl+Shift+s, Win+e, PageDown\n    SendKeys('{Ctrl}a{Delete}{Ctrl}v{Ctrl}s{Ctrl}{Shift}s{Win}e{PageDown}')\n\n    #press Ctrl+A+B, type (, press Shift+1+2+3, type ), if () follows a hold key, hold key won't release util ) \n    SendKeys('{Ctrl}(AB)({Shift}(123))')\n\n    #press Ctrl+a at the same time, release Ctrl+a, then type a 2 times \n    SendKeys('{Ctrl}{a 3}')\n\n    #type a 3 times, type B 5 times \n    SendKeys('{a 3}{B 5}') \n\n    #type: {Hello}abc abc test}}}!a ()()\n    SendKeys('{{}Hello{}}abc {a}{b}{c} test{} 3}{!}{a} (){(}{)}')\n    SendKeys('0123456789{Enter}')\n    SendKeys('ABCDEFGHIJKLMNOPQRSTUVWXYZ{Enter}')\n    SendKeys('abcdefghijklmnopqrstuvwxyz{Enter}')\n    SendKeys('`~!@#$%^&*()-_=+{Enter}')\n    SendKeys('[]{{}{}}\\\\|;:\\'\\\",<.>/?{Enter}')\n\n```\n\n\n## 自定义，关键字(函数、变量)\n> 在case同级目录中，创建  preference.py, 该文件所定义的 变量、函数，可以被动态加载和引用\n\n执行用例的时候，可以使用 变量引用 或者关键字引用的方法，调用，自定义的函数和变量\n\n```\n# preference.py 示例\n\ntest_var = \"hello rtsf.\"\ndef test_func():\n    return \"nihao rtsf.\"\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RockFeng0/rtsf-win",
    "keywords": "test win ui",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rtsf-win",
    "package_url": "https://pypi.org/project/rtsf-win/",
    "platform": "",
    "project_url": "https://pypi.org/project/rtsf-win/",
    "project_urls": {
      "Homepage": "https://github.com/RockFeng0/rtsf-win"
    },
    "release_url": "https://pypi.org/project/rtsf-win/1.2.1/",
    "requires_dist": [
      "uiautomation",
      "rtsf"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
    "summary": "only for windows UI test, base on rtsf. e.g. WPF UI or MFC UI",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4448724,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bcf7bf6de4ed551e6437a2d482af69a1937dafadb4a4f74b47e1af985109534",
          "md5": "4c2e801d93d20e26798f52017bb78d1a",
          "sha256": "8b85bc332fc3a03cb9b7ea36fe4680b26467e8de68fb1a6c8de3064458e11cfe"
        },
        "downloads": -1,
        "filename": "rtsf_win-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c2e801d93d20e26798f52017bb78d1a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 8861,
        "upload_time": "2018-10-12T10:15:17",
        "upload_time_iso_8601": "2018-10-12T10:15:17.993150Z",
        "url": "https://files.pythonhosted.org/packages/3b/cf/7bf6de4ed551e6437a2d482af69a1937dafadb4a4f74b47e1af985109534/rtsf_win-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b86c0905f098fbe945dc389f59d989490dc6ae0453ceda6b0837b1987f1d8b8",
          "md5": "89d4dca1c6b0cf482c1e87cf46704f6b",
          "sha256": "ff3033063dd99bc8ef973ae464d4af28c6c3a3ebb47c10145cdafc714dd7333d"
        },
        "downloads": -1,
        "filename": "rtsf_win-1.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89d4dca1c6b0cf482c1e87cf46704f6b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 13682,
        "upload_time": "2018-11-04T02:28:06",
        "upload_time_iso_8601": "2018-11-04T02:28:06.905819Z",
        "url": "https://files.pythonhosted.org/packages/0b/86/c0905f098fbe945dc389f59d989490dc6ae0453ceda6b0837b1987f1d8b8/rtsf_win-1.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c55625237b5e8949534f561756b8d2f076c91e83ab5779e2eb82fa5bf29d864",
          "md5": "d23b1d9c23ad82f40bafe7d029828ecd",
          "sha256": "601a25505909f9e89e751f47005cd28c35525175866c41b845d783a3efd451e2"
        },
        "downloads": -1,
        "filename": "rtsf-win-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d23b1d9c23ad82f40bafe7d029828ecd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 14073,
        "upload_time": "2018-11-04T02:28:08",
        "upload_time_iso_8601": "2018-11-04T02:28:08.295983Z",
        "url": "https://files.pythonhosted.org/packages/8c/55/625237b5e8949534f561756b8d2f076c91e83ab5779e2eb82fa5bf29d864/rtsf-win-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b86c0905f098fbe945dc389f59d989490dc6ae0453ceda6b0837b1987f1d8b8",
        "md5": "89d4dca1c6b0cf482c1e87cf46704f6b",
        "sha256": "ff3033063dd99bc8ef973ae464d4af28c6c3a3ebb47c10145cdafc714dd7333d"
      },
      "downloads": -1,
      "filename": "rtsf_win-1.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89d4dca1c6b0cf482c1e87cf46704f6b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
      "size": 13682,
      "upload_time": "2018-11-04T02:28:06",
      "upload_time_iso_8601": "2018-11-04T02:28:06.905819Z",
      "url": "https://files.pythonhosted.org/packages/0b/86/c0905f098fbe945dc389f59d989490dc6ae0453ceda6b0837b1987f1d8b8/rtsf_win-1.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c55625237b5e8949534f561756b8d2f076c91e83ab5779e2eb82fa5bf29d864",
        "md5": "d23b1d9c23ad82f40bafe7d029828ecd",
        "sha256": "601a25505909f9e89e751f47005cd28c35525175866c41b845d783a3efd451e2"
      },
      "downloads": -1,
      "filename": "rtsf-win-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d23b1d9c23ad82f40bafe7d029828ecd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
      "size": 14073,
      "upload_time": "2018-11-04T02:28:08",
      "upload_time_iso_8601": "2018-11-04T02:28:08.295983Z",
      "url": "https://files.pythonhosted.org/packages/8c/55/625237b5e8949534f561756b8d2f076c91e83ab5779e2eb82fa5bf29d864/rtsf-win-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}