{
  "info": {
    "author": "0xmars511",
    "author_email": "yurenji@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![GitHub license](https://img.shields.io/github/license/0rtis/dfk.svg?style=flat-square)](https://github.com/0rtis/dfk/blob/master/LICENSE)\n[![Follow @trwitter handle](https://img.shields.io/twitter/follow/ortis95.svg?style=flat-square)](https://twitter.com/intent/follow?screen_name=ortis95) \n\n\n## DefiKingdoms contract\n\nThis is a simple toolbox to interact with the contracts of [DefiKingdoms](https://defikingdoms.com/)\n\n*This software is not endorsed by, directly affiliated with, maintained, authorized, or sponsored by the DefiKingdoms team.\nAll product and company names are the registered trademarks of their original owners.\nThe use of any trade name or trademark is for identification and reference purposes only and does not imply any association with the trademark holder of their product brand.*\n\n<br/>\n\n*If you like this project, consider supporting future developments with a donation **0xA68fBfa3E0c86D1f3fF071853df6DAe8753095E2***\n\n<br/>\n\n### Hero contract\nThe hero contract is accessible with `hero/hero.py`\n\n#### Quickstart\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-hero\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n\n    with open('hero/femaleFirstName.json', 'r') as f:\n        female_first_names = hero_utils.parse_names(f.read())\n    logger.info(\"Female hero first name loaded\")\n\n    with open('hero/maleFirstName.json', 'r') as f:\n        male_first_names = hero_utils.parse_names(f.read())\n    logger.info(\"Male hero first name loaded\")\n\n    with open('hero/lastName.json', 'r') as f:\n        last_names = hero_utils.parse_names(f.read())\n    logger.info(\"Hero last name loaded\")\n\n    # transfer(1, 'private key of the owner', 'next nonce of owner account', 'receiver address', 200, rpc_server, hero_abi_json, logger)\n\n    for i in range(1, 100):\n        logger.info(\"Processing hero #\"+str(i))\n        owner = heroes.get_owner(i, rpc_server)\n        hero = heroes.get_hero(i, rpc_server)\n        readable_hero = heroes.human_readable_hero(hero, male_first_names, female_first_names, last_names)\n        logger.info(json.dumps(readable_hero, indent=4, sort_keys=False) + \"\\n Owned by \" + owner)\n\n```\n\n#### Transfer\nTransfer a hero from one address to another\n\n#### Info\nHero's data can be retrieved with the `get_hero` method. A more *human-friendly* format can be generated \nby passing the result of `get_hero` to the `human_readable_hero` method.\n\n#### Owner\nThe owner of a hero can be retrieved with the method `get_owner`\n\n\n### Profile contract\nThe profile contract is accessible with `profile/profile.py`\n\n#### Quickstart\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-profile\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n\n    profile = profiles.get_profile('0x2E7669F61eA77F02445A015FBdcFe2DE47083E02', rpc_server)\n\n    logger.info(json.dumps(profile, indent=4, sort_keys=False))\n```\n\n#### In-game profile\nIn-game profile can be retrieved with the `get_profile` method\n\n\n### Summoning contract\nThe summoning contract is accessible with `summoning/summoning.py`\n\n#### Quickstart\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-summoning\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n\n    #summoning.summon_crystal(hero_id_1, hero_id_2, hero1_tears, hero2_tears, private_key, nonce, gas_price_gwei, 30, rpc_address, logger)\n\n    crystals = summoning.get_user_crystal_ids('0x2E7669F61eA77F02445A015FBdcFe2DE47083E02', rpc_server)\n    logger.info(\"Crystal ids: \" + str(crystals))\n\n    #summoning.open_crystal(crystals[0], private_key, nonce, gas_price_gwei, 30, rpc_address, logger)\n```\n\n#### Create crystal\nSummoning crystal are created with `summon_crystal` method\n\n#### Crystal id\nCrystal id can be retrieved with `get_user_crystal_ids` method\n\n#### Open summoning crystal\nSummoning crystal can be open with `open_crystal` method\n\n#### Rent auction\nPut a hero up for hire with `put_hero_for_rent`  and cancel with `cancel_rent`\nUse `is_on_rent` and `get_rent_auction` to monitor auction\n\n\n### Gene science contract\nThe gene science contract is accessible with `genes/gene_science.py`\n\n#### Quickstart\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-genes\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n    w3 = Web3(Web3.HTTPProvider(rpc_server))\n\n    hero1 = heroes.get_hero(1, rpc_server)\n    hero2 = heroes.get_hero(2, rpc_server)\n\n    bnum = w3.eth.block_number\n    for i in range(10):\n        offspring_stat_genes = genes.mix_genes(hero1['info']['statGenes'], hero2['info']['statGenes'], bnum, rpc_server)\n        offspring_visual_genes = genes.mix_genes(hero1['info']['visualGenes'], hero2['info']['visualGenes'], bnum, rpc_server)\n        stats = hero_utils.parse_stat_genes(offspring_stat_genes)\n        visual = hero_utils.parse_visual_genes(offspring_visual_genes)\n        logger.info(\"Iteration \" + str(i) + \"\\n\\tStats:\\t\" + str(stats) + \"\\n\\tVisual:\\t\" + str(visual))\n        while w3.eth.block_number == bnum:\n            time.sleep(2)\n        bnum = w3.eth.block_number\n```\n\n#### Mix genes\nStatistics and visual of summoned hero can be forecasted with the `mix_genes` method.\nNote that `mix_genes` is pseudo random and the resulting traits will be different for each block.\nHowever, a statistical analysis can be used to optimize the summoning of desirable traits\n\n### Auction contract\nThe sale auction contract is accessible with `auction/sale/sale_auctions.py`\n\nRent auctions can be listed with `auction/rent/rent_auctions.py`\n\n#### Quickstart\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-auctions\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n\n    graphql = 'http://graph3.defikingdoms.com/subgraphs/name/defikingdoms/apiv5'\n\n    auctions = sales.get_recent_open_auctions(graphql, 10)\n    logger.info(\"Recent sale auctions:\")\n    for auction in auctions:\n        logger.info(str(auction))\n\n    # sale.bid_hero(hero_id, ether2wei(100), prv_key, nonce, gas_price_gwei, rpc_server, logger)\n\n    logger.info(\"\\n\")\n    logger.info(\"Recent rental auctions:\")\n    auctions = rental.get_recent_open_auctions(graphql, 10)\n    for auction in auctions:\n        logger.info(str(auction))\n```\n\n#### Sale auction\n`bid_hero` and `get_auction` interact directly with the contract.\n\n`get_recent_open_auctions` and `get_hero_open_auctions` use Graphql.\n\n#### Rent auction\n`get_recent_open_auctions` and `get_hero_open_auctions` use Graphql.\n\n\n\n### Quest\nAll quest contracts are located in module `quest`\n\n#### Quickstart\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-quest\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n\n    private_key = None  # set private key\n    gas_price_gwei = 15\n    tx_timeout = 30\n    w3 = Web3(Web3.HTTPProvider(rpc_server))\n    account_address = w3.eth.account.privateKeyToAccount(private_key).address\n\n    quest = Quest(rpc_server, logger)\n\n    quest_contract = fishing.CONTRACT_ADDRESS  # foraging.CONTRACT_ADDRESS\n    my_heroes_id = [1, 2, 3, 4]\n    quest.start_quest(quest_contract, my_heroes_id, 3, private_key, w3.eth.getTransactionCount(account_address), gas_price_gwei, tx_timeout)\n    quest_info = quest_utils.human_readable_quest(quest.get_hero_quest(my_heroes_id[0]))\n\n    logger.info(\n        \"Waiting \" + str(quest_info['completeAtTime'] - time.time()) + \" secs to complete quest \" + str(quest_info))\n    while time.time() < quest_info['completeAtTime']:\n        time.sleep(2)\n\n    tx_receipt = quest.complete_quest(my_heroes_id[0], private_key, w3.eth.getTransactionCount(account_address), gas_price_gwei, tx_timeout)\n    quest_result = quest.parse_complete_quest_receipt(tx_receipt)\n    logger.info(\"Rewards: \" + str(quest_result))\n\n\n    # gardening quest\n    pool_id = 0  # See gardens.master_gardener\n    quest_data = (pool_id, 0, 0, 0, 0, 0, '', '', ZERO_ADDRESS, ZERO_ADDRESS, ZERO_ADDRESS, ZERO_ADDRESS)\n    my_gardener_heroes_id = [5]\n    quest.start_quest_with_data(gardening.CONTRACT_ADDRESS, quest_data, my_gardener_heroes_id, 1, private_key, w3.eth.getTransactionCount(account_address), gas_price_gwei, tx_timeout)\n    quest_info = quest_utils.human_readable_quest(quest.get_hero_quest(my_heroes_id[0]))\n\n    logger.info(\n        \"Waiting \" + str(quest_info['completeAtTime'] - time.time()) + \" secs to complete gardening quest \" + str(quest_info))\n    while time.time() < quest_info['completeAtTime']:\n        time.sleep(2)\n\n    quest.complete_quest(my_gardener_heroes_id[0], private_key, w3.eth.getTransactionCount(account_address),\n                                      gas_price_gwei, tx_timeout)\n```\n\n#### Foraging & Fishing quest\nEach quest requires at least 7 stamina to complete. Check the current stamina of any given hero with `get_current_stamina`.\nStart the quest with `start_quest`. The second parameter is the number of attempt. To optimize the cost of gas, it is recommended\nto use a hero at full stamina and do 3 attempts every call.\n\n\n#### Gardening & Mining quest\nGardening and mining quest can be started with just one stamina. \nMining quest can be done with up to 6 heroes while only 1 hero at a time can be sent on a gardening quest to a specific garden (liquidity pool).\n\n\n#### Legacy wishing well quest\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-wishing well quest\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n\n    level = wishing_well.quest_level(rpc_server)\n    logger.info(\"Quest level \"+str(level))\n\n    hero_id = 1  # <your hero id here>\n    stamina = wishing_well.get_current_stamina(hero_id, rpc_server)\n    logger.info(\"Current stamina on hero \" + str(hero_id) + \": \" + str(stamina))\n\n    #w3 = Web3(Web3.HTTPProvider(rpc_server))\n    #gas_price_gwei = 10\n    #private_key = # set private key\n    #account_address = w3.eth.account.privateKeyToAccount(private_key).address\n    #wishing_well.start_quest(hero_id, 5, private_key, w3.eth.getTransactionCount(account_address), gas_price_gwei, 30, rpc_server, logger)\n    #time.sleep(60)\n    #tx_receipt = wishing_well.complete_quest(hero_id, private_key, w3.eth.getTransactionCount(account_address), gas_price_gwei, 30, rpc_server, logger)\n\n    #quest_result = wishing_well.parse_complete_quest_receipt(tx_receipt, rpc_server)\n    #logger.info(\"Quest earned \" + str(quest_result['tear']) + \" tears and \" + str(quest_result['xp']) + \" xp\")\n\n```\n\n\n### DEX & tokens\nIn game tokens and AMM exchange are available in module `dex`\n\n#### Quickstart\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-DEX\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n\n    w3 = Web3(Web3.HTTPProvider(rpc_server))\n\n    user_address = '0x2E7669F61eA77F02445A015FBdcFe2DE47083E02'\n\n    # Automated Market Making pool\n    logger.info(\"Liquidity pool count:\\t\" + str(market_place_factory.all_pairs_length(rpc_server)))\n    liquidity_pool_id = 0\n    liquidity_pool_address = market_place_factory.all_pairs(liquidity_pool_id, rpc_server)\n    liquidity_pool = pool.UniswapV2Pair(liquidity_pool_address, rpc_server, logger)\n    liquidity_pool_symbol = liquidity_pool.symbol()\n    liquidity_pool_token0_address = liquidity_pool.token_0()\n    liquidity_pool_token0 = erc20.symbol(liquidity_pool_token0_address, rpc_server)\n    logger.info(liquidity_pool_token0 + \" user balance:\\t\" + str(erc20.wei2eth(w3, erc20.balance_of(user_address, liquidity_pool_token0_address, rpc_server))))\n    liquidity_pool_token1_address = liquidity_pool.token_1()\n    liquidity_pool_token1 = erc20.symbol(liquidity_pool_token1_address, rpc_server)\n    logger.info(liquidity_pool_token1 + \" user balance:\\t\" + str(erc20.wei2eth(w3, erc20.balance_of(user_address, liquidity_pool_token1_address, rpc_server))))\n    amount_token1 = 1\n    amount_token0 = erc20.wei2eth(w3, liquidity_pool.expected_amount0(erc20.eth2wei(w3, amount_token1)))\n    logger.info(liquidity_pool_symbol + \" \" + liquidity_pool_token0 + \"-\" + liquidity_pool_token1 + \" @ \" + str(amount_token0) + \" \" + liquidity_pool_token0 + \" per \" + liquidity_pool_token1)\n\n    liquidity_pool_balance = liquidity_pool.balance_of(user_address)\n    logger.info(\"LP user balance:\\t\" + str(erc20.wei2eth(w3, liquidity_pool_balance)))\n\n    # Garden staking\n    logger.info(\"Staking pool count:\\t\" + str(gardens.pool_length(rpc_server)))\n    staking_pool = gardens.Garden(liquidity_pool, rpc_server, logger)\n    staking_pool_symbol = staking_pool.symbol()\n    staking_pool_token0 = erc20.symbol(staking_pool.token_0(), rpc_server)\n    staking_pool_token1 = erc20.symbol(staking_pool.token_1(), rpc_server)\n    staking_pool_total_supply = staking_pool.total_supply()\n    logger.info(staking_pool_symbol + \" \" + staking_pool_token0 + \"-\" + staking_pool_token1 + \", total supply=\"\n                + str(erc20.wei2eth(w3,staking_pool_total_supply)))\n    staking_pool_user = utils.human_readable_user_info(staking_pool.user_info(user_address))\n    staking_pool_balance = gardens.Garden.user_info_lp_balance(staking_pool_user)\n    staking_pool_share = staking_pool_balance/staking_pool_total_supply\n    logger.info(\"LP staked user balance:\\t\" + str(erc20.wei2eth(w3, staking_pool_balance)) + \" (pool share \" + str(round(100 * staking_pool_share, 2)) + \"%)\")\n\n    # Swap JEWEL for ONE\n    #private_key = None #set private key of to swap coin from\n    #account_address = w3.eth.account.privateKeyToAccount(private_key).address\n    #market_place_router.swap_exact_tokens_for_eth(erc20.eth2wei(w3, 1), 60, [erc20.JEWEL, market_place_router.weth(rpc_server)], account_address,\n    #                                 int(time.time() + 60), private_key, w3.eth.getTransactionCount(account_address),\n    #                                 w3.fromWei(w3.eth.gas_price, 'gwei'), 30, rpc_server, logger)\n```\n#### Balance of token\nUse `dex.erc20.balance_of` to retrieve the balance of an item for the specified address\n\n#### Liquidity pool\nUse wrapper class `dex.uniswap_v2_pair.UniswapV2Pair` and call  `expected_amount0` to get the estimated amount of `token0` received in exchange of `token1`.\nAlternatively, call `dex.uniswap_v2_router.quote`\n\n#### Swap token\nUse call `dex.uniswap_v2_router.swap_exact_tokens_for_eth` to swap erc20 token for ONE.\nUse call `dex.uniswap_v2_router.swap_exact_tokens_for_tokens` to swap erc20 tokens for other erc20 tokens.\n\n#### Staking pool\nUse wrapper class `dex.master_gardener.Garden` to retrieve staking pool info\n\n\n### Meditation circle\nMeditation circle contract is available in module `meditation`\n\n#### Quickstart\n```\nif __name__ == \"__main__\":\n    log_format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'\n\n    logger = logging.getLogger(\"DFK-meditation\")\n    logger.setLevel(logging.DEBUG)\n    logging.basicConfig(level=logging.INFO, format=log_format, stream=sys.stdout)\n\n    rpc_server = 'https://api.harmony.one'\n    logger.info(\"Using RPC server \" + rpc_server)\n\n    private_key = None  # set private key\n    account_address = '0x2E7669F61eA77F02445A015FBdcFe2DE47083E02'\n    gas_price_gwei = 10\n    tx_timeout_seconds = 30\n    w3 = Web3(Web3.HTTPProvider(rpc_server))\n\n    active_meditations = meditation.get_active_meditations(account_address, rpc_server)\n    logger.info(\"Pending meditation on address \" + str(account_address) + \": \"+str(active_meditations))\n\n    level = 1\n    hero_id = 1\n    required_runes = meditation.get_required_runes(level, rpc_server)\n    meditation.start_meditation(1, meditation.stat2id('strength'), meditation.stat2id('endurance'), meditation.stat2id('luck'),\n                               meditation.ZERO_ADDRESS, private_key, w3.eth.getTransactionCount(account_address),\n                               gas_price_gwei, tx_timeout_seconds, rpc_server, logger)\n    hero_meditation = meditation.get_hero_meditation(hero_id, rpc_server)\n    logger.info(\"Pending meditation \"+str(hero_meditation))\n    time.sleep(5)\n    meditation.complete_meditation(hero_id, private_key, w3.eth.getTransactionCount(account_address),\n                                  gas_price_gwei, tx_timeout_seconds, rpc_server, logger)\n```\n#### Hero level up\nUse `start_meditation` and `complete_meditation` to level up a hero. Make sure to have enough rune for the hero's level with `get_required_runes`\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yurenji/dfk",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dfkpy",
    "package_url": "https://pypi.org/project/dfkpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/dfkpy/",
    "project_urls": {
      "Homepage": "https://github.com/yurenji/dfk"
    },
    "release_url": "https://pypi.org/project/dfkpy/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python sdk for Defikingdom",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12640721,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b1a8c45156d09d682f1006b972fbedd5824e62ad4a4e62a58268aae0fa9faec",
          "md5": "f905c4321077374f758c375d1c47aa7c",
          "sha256": "bcd4433520b04d7ddf684d54efbdcbca8edae4ae1e7f6c5ce23c033914964ae9"
        },
        "downloads": -1,
        "filename": "dfkpy-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f905c4321077374f758c375d1c47aa7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44512,
        "upload_time": "2022-01-21T03:23:57",
        "upload_time_iso_8601": "2022-01-21T03:23:57.624879Z",
        "url": "https://files.pythonhosted.org/packages/4b/1a/8c45156d09d682f1006b972fbedd5824e62ad4a4e62a58268aae0fa9faec/dfkpy-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b1a8c45156d09d682f1006b972fbedd5824e62ad4a4e62a58268aae0fa9faec",
        "md5": "f905c4321077374f758c375d1c47aa7c",
        "sha256": "bcd4433520b04d7ddf684d54efbdcbca8edae4ae1e7f6c5ce23c033914964ae9"
      },
      "downloads": -1,
      "filename": "dfkpy-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f905c4321077374f758c375d1c47aa7c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 44512,
      "upload_time": "2022-01-21T03:23:57",
      "upload_time_iso_8601": "2022-01-21T03:23:57.624879Z",
      "url": "https://files.pythonhosted.org/packages/4b/1a/8c45156d09d682f1006b972fbedd5824e62ad4a4e62a58268aae0fa9faec/dfkpy-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}