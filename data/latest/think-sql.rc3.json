{
  "info": {
    "author": "hbh112233abc",
    "author_email": "hbh112233abc@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ThinkSQL 类似ThinkPHP的数据库引擎\n\n## Install\n```\npip install think-sql\n```\n\n## How to use\n\n### 1. simple demo\n\n> Database: `test` Table: `user`\n\n```\nfrom think-sql.database import DB\n\nconfig = {\n    'database': 'test',\n    'host': '127.0.0.1',\n    'port': 3306,\n    'username': 'root',\n    'password': 'root',\n}\n\nwith DB(**config) as db:\n    data = db.table('user').where('id',1).find()\n    print(data)\n```\nresult\n```\n{\n    \"id\":1,\n    \"username\":\"hbh112233abc\",\n    \"age\":\"36\",\n    \"address\":\"FUJIAN.XIAMEN\"\n}\n```\n\n### 2. Introduction\n\n#### think_sql.database.DB\n\n- __init__(database='test',host='127.0.0.1',username='root',password='root',port=3306,params={})\n\n- connect()\n    connect database use __init__ params\n\n- table(table_name):Table\n    return class Table <think_sql.table.Table>\n\n- check_connected():bool\n    check connected, try reconnect database\n\n- query(sql,params=())\n    query sql return cursor.fetchall\n\n- execute(sql,params=())\n    execute sql write operate(ex:insert,update,delete,...)\n\n#### think_sql.table.Table\n\n- __init__(connector: Connection,cursor: Cursor,table_name: str,debug: bool = True)\n\n- init()\n    initialize query condition\n\n- debug(flag=True)\n    set debug flag\n\n- set_cache_storage(storage: CacheStorage)\n    set cache storage ex: Redis\n\n- cache(key: str = None, expire: int = 3600)\n    use cache at query\n\n- cursor(sql: str, params: list = []) -> Cursor\n    return cursor object\n\n- get_last_sql() -> str\n    return last sql string\n\n- get_lastid() -> str\n    return last row id\n\n- get_rowcount() -> int\n    return affect rows count\n\n- fetch_sql(flag: bool = True)\n    set fetch sql flag,if flag = True then `query` and `execute` will only return sql\n\n- build_sql(operation: str, params: list = []) -> str\n    return build sql\n\n- query(sql: str, params: list = []) -> list\n    execute read operation sql and return cursor.fetchall()\n    when `fetch_sql`=True then return sql and not execute the sql\n\n- execute(sql: str, params: list = []) -> int\n    execute write operation sql and return affect rows count\n    when `fetch_sql`=True then return sql and not execute the sql\n\n- where(field: Union[str, list, tuple], symbol: str = '', value: Any = None)\n    set query conditions, support multipe use\n\n    > where(field,value)\n\n    ```\n    where field = value\n    ```\n    > where(field,symbol,value)\n\n    ```\n    where field symbol value\n    ```\n    > where(\n        [\n            [field1,symbol1,value1],\n            [field2,symbol2,value2]\n        ]\n    )\n\n    ```\n    where field1 symbol1 value1 and field2 symbol2 value2\n    ```\n\n    > where(field1,symbol1,value1).where(field2,symbol2,value2)\n\n    ```\n    where field1 symbol1 value1 and field2 symbol2 value2\n    ```\n\n    - symbol\n\n    |symbol|another|demo|\n    |-|-|-|\n    |`=`|`eq`,`=`| where('id','=',1)|\n    |`<>`|`neq`, `!=`, `<>`| where('id','<>',1)|\n    |`>`|`gt`,`>`| where('id','>',1)|\n    |`>=`|`egt`,`>=`| where('id','>=',1)|\n    |`<`|`lt`, `<`|where('id','<',1)|\n    |`<=`|`elt`,`<=`| where('id','<=',1)|\n    |`in`|`in`,`not in`| where('id','in',[1,2,3])|\n    |`between`|`between`,`not between`| where('id','between',[1,5]) where('id','between','1,5') where('id','between','1 and 5')|\n    |`like`|`like`, `not like`| where('name','like','%hbh%')|\n    |`null`|`is null`,`null`| where('remark','is null')|\n    |`not null`|`is not null`,`not null`| where('remark','is not null')|\n    |`exists`|`exists`, `not exists`| where('remark','exists')|\n    |`exp`|`exp`| where('id','exp','in (1,2,3)')|\n\n- where_or(field: Union[str, list], symbol: str = '', value: Any = None)\n\n    > where('id',1).where_or('id',5)\n\n    ```\n    where id = 1 or id = 5\n    ```\n\n- limit(start: int, step: int = None)\n    LIMIT start,step\n\n- page(index: int = 1, size: int = 20)\n    LIMIT index*size-1,size\n\n- order(field: str, sort: str = 'asc')\n    ORDER BY field sort\n\n- group(field:str)\n    GROUP BY field\n\n- field(fields: Any, exclude: bool = False)\n    SELECT fields\n    if `exclude`=True then select the fields of table (exlude:`fields`)\n\n- select(build_sql: bool = False) -> list\n    return select query result\n    if `build_sql`=True then return sql\n\n- find()\n    return select ... limit 1\n\n- value(field: str)\n    return the field of first row\n\n- column(field: str,key: str = '')\n\n    > column('name')\n\n    return ['hbh','mondy']\n\n    > column('name,score')\n\n    return [{'hbh':80},{'mondy':88}]\n\n    > column('score','name')\n\n    return {'hbh':80, 'mondy':88}\n\n    > column('id,score','name')\n\n    return {\n                'hbh':{'id':1,'score':80},\n                'mondy':{'id':2,'score':88}\n           }\n\n- alias(short_name: str = '')\n    set alias table_name\n\n- join(table_name: str, as_name: str = '', on: str = '', join: str = 'inner', and_str: str = '')\n    - `table_name` join table_name\n    - `as_name` alias short_table_name for `table_name`\n    - `on` join condition\n    - `join` join type in 'INNER', 'LEFT', 'RIGHT', 'FULL OUTER'\n    - `and_str` and condition\n    demo\n    ```\n    db.table('table1').alias('a').join('table2','b','a.id=b.a_id','left').join('table2','c','c.a_id=a.id').field('a.id,a.name,b.id as b_id,b.score,c.id as c_id,c.remark').where('a.id',1).find()\n    ```\n    sql\n    ```\n    SELECT\n        a.id,\n        a.name,\n        b.id AS b_id,\n        b.score,\n        c.id AS c_id,\n        c.remark\n    FROM\n        table1 AS a\n        LEFT JOIN table2 AS b ON a.id = b.a_id\n        INNER JOIN table3 AS c ON c.a_id = a.id\n    WHERE\n        a.id = 1\n        LIMIT 1\n    ```\n- union(sql1: str, sql2: str, union_all: bool = False)\n    union sql1 and sql2\n    - union_all if union_all is True then `UNION ALL`\n\n    *demo*\n    ```\n    sql1 = db.table('table1').field('name,score').where('status',1).select(build_sql=True)\n    sql2 = db.table('table2').field('name,score').where('status',1).select(build_sql=True)\n\n    result = db.table().union(sql1,sql2).where('score','>',60).select()\n    ```\n    *sql*\n    ```\n    SELECT\n\t*\n    FROM\n        ( SELECT `name`, `score` FROM table1 WHERE `status` = 1 )\n        UNION\n        ( SELECT `name`, `score` FROM table2 WHERE `status` = 1 )\n    WHERE\n        score > 60\n    ```\n\n- insert(data: Union[dict, List[dict]], replace: bool = False) -> int\n    insert data to database\n    - `data` dict: insert one record; list: insert multiple records\n    - `replace` bool if `replace` is True then use `REPLACE INTO`\n\n- update(data: dict, all_record: bool = False) -> int\n    update data\n    - `data` dict you want update data\n    - `all_record` bool if `all_record` is False then you must set update condition; if you want to update all records then you need set `all_record` = True\n\n- delete(all_record: bool = False) -> int\n    delete record\n    - `all_record` bool if `all_record` is False then you must set delete condition; if you want to delete all records then you need set `all_record` = True\n\n- inc(field: str, step: Union[str, int, float] = 1) -> int\n\n    increase `field` +`step`\n\n- dec(field: str, step: int = 1) -> int\n\n    decrease `field` -`step`\n\n- max(field: str) -> Union[int, float]\n\n    get the max value of `field`\n\n- sum(field: str) -> Union[int, float, Decimal]\n\n    get the sum value of `field`\n\n- avg(field: str) -> Union[int, float, Decimal]\n\n    get the avg value of `field`\n\n- count(field: str = '*') -> int\n\n    get the count of records\n\n- copy_to(new_table: str = None, create_blank_table: bool = False) -> int\n\n    copy data to `new_table`\n    - `new_table` if `new_table` is None then `new_table` will auto set like `{table_name}_copy`\n    - `create_blank_table` bool if `create_blank_table` is True then only create a blank table like current table.\n\n    *demo*\n    ```\n    db.table('user').field('name,score').where('score','>',60).copy_to('good_boy')\n    ```\n\n    *sql*\n    ```\n    SELECT\n\t    `name`,\n        `score`\n    INTO `good_boy`\n    FROM\n    `user`\n    WHERE\n        score > 60\n    ```\n\n\n- insert_to(new_table: str, fields: Union[str, list, tuple] = None) -> int\n\n    ```\n    INSERT INTO {new_table} SELECT {select_fields} FROM {table} {join} WHERE {where}{group}{order}{limit}\n    ```\n\n- exists(self) -> bool\n\n    check record exists with some query conditions, it use `SELECT 1 FROM {table} {join} WHERE {where} LIMIT 1`\n\n- batch_update(data:List[dict],key:str) -> int\n\n    batch update multiple records\n\n    *demo*\n    ```\n    data = [\n        {'id':1,'score':66},\n        {'id':2,'score':59},\n        {'id':3,'score':86},\n        {'id':4,'score':90},\n    ]\n    db.table('user').batch(data,key='id')\n    ```\n    *sql*\n    ```\n    update `user` set score = 66 where id = 1;\n    update `user` set score = 59 where id = 2;\n    update `user` set score = 86 where id = 3;\n    update `user` set score = 90 where id = 4;\n    ```\n\n\n\n\n## Development\n\n### poetry包管理器\n[官网](https://python-poetry.org/)\n\n[Python包管理之poetry的使用](https://blog.csdn.net/zhoubihui0000/article/details/104937285)\n\n[Python包管理之poetry基本使用](https://zhuanlan.zhihu.com/p/110721747)\n\n\n```\n# 配置虚拟环境在项目目录下\npoetry config virtualenvs.path true\n# 安装依赖\npoetry install\n# 进入虚拟环境\npoetry shell\n```\n### poetry command\n\n|名称| 功能|\n|-|-|\n|new|创建一个项目脚手架，包含基本结构、pyproject.toml 文件|\n|init|基于已有的项目代码创建 pyproject.toml 文件，支持交互式填写|\n|install|安装依赖库|\n|update|更新依赖库|\n|add|添加依赖库|\n|remove|移除依赖库|\n|show|查看具体依赖库信息，支持显示树形依赖链|\n|build|构建 tar.gz 或 wheel 包|\n|publish|发布到 PyPI|\n|run|运行脚本和代码|\n\n## unit test\n```\npytest --cov --cov-report=html\n```\n\n## publish\n```\npoetry build\npoetry config pypi-token.pypi \"your pypi.org api token\"\npoetry publish -n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hbh112233abc/think-sql",
    "keywords": "sql,database,table,think-orm,ThinkPHP",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "think-sql",
    "package_url": "https://pypi.org/project/think-sql/",
    "platform": "",
    "project_url": "https://pypi.org/project/think-sql/",
    "project_urls": {
      "Documentation": "https://github.com/hbh112233abc/think-sql",
      "Homepage": "https://github.com/hbh112233abc/think-sql",
      "Repository": "https://github.com/hbh112233abc/think-sql"
    },
    "release_url": "https://pypi.org/project/think-sql/0.1.2/",
    "requires_dist": [
      "cacheout (>=0.13.1,<0.14.0)",
      "PyMySQL (>=1.0.2,<2.0.0)",
      "jsonpath (>=0.82,<0.83)",
      "loguru (>=0.5.3,<0.6.0)",
      "pretty-errors (>=1.2.24,<2.0.0)",
      "dill (>=0.3.4,<0.4.0)",
      "redis (>=3.5.3,<4.0.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "ThinkSQL link think-orm(ThinkPHP)",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12109204,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "903f009b398c45ea3042348cf411ebffbb0e6a77de060742565eea74467a3c3a",
          "md5": "888a1a896e935ed46083bccc3025ca77",
          "sha256": "f57fa52520a2a15d0adc4be6b64c023ed490adfd2242936f8efb904d830089e8"
        },
        "downloads": -1,
        "filename": "think_sql-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "888a1a896e935ed46083bccc3025ca77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 12265,
        "upload_time": "2021-11-02T07:27:50",
        "upload_time_iso_8601": "2021-11-02T07:27:50.965969Z",
        "url": "https://files.pythonhosted.org/packages/90/3f/009b398c45ea3042348cf411ebffbb0e6a77de060742565eea74467a3c3a/think_sql-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d898d224fffd02b3a396b0d857f77cd96f38833a1671a029d7c87f003888eee2",
          "md5": "c2756bc787e5d2b954e09cb839d50541",
          "sha256": "6913b15e484a08b4c88015c683ffe38cb3da63381ac11cf9135428c7025ddbf2"
        },
        "downloads": -1,
        "filename": "think-sql-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2756bc787e5d2b954e09cb839d50541",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 12084,
        "upload_time": "2021-11-02T07:27:49",
        "upload_time_iso_8601": "2021-11-02T07:27:49.659449Z",
        "url": "https://files.pythonhosted.org/packages/d8/98/d224fffd02b3a396b0d857f77cd96f38833a1671a029d7c87f003888eee2/think-sql-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "945bb46162d827b5d184988e898a0f34c7ac8a026c9cf96f3fe78a648fc4cedb",
          "md5": "592be1ad1b368915a6fc46670b0a6af9",
          "sha256": "bc1d922e7e8593ff0833548f423887f4f760bdb0d9a375a69f0f276904053c64"
        },
        "downloads": -1,
        "filename": "think_sql-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "592be1ad1b368915a6fc46670b0a6af9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 11648,
        "upload_time": "2021-11-04T10:43:50",
        "upload_time_iso_8601": "2021-11-04T10:43:50.398531Z",
        "url": "https://files.pythonhosted.org/packages/94/5b/b46162d827b5d184988e898a0f34c7ac8a026c9cf96f3fe78a648fc4cedb/think_sql-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5204c0deb63be3e07326b1820536d646d663c5142dfcd2929e77fa50521055f",
          "md5": "ce9bbf4c3d63fd530376cd97538bc663",
          "sha256": "7de05cfe995fe7687d3d54bbc6d6e1cdda7fe8dda57c6ebe5a1ff8792b25f5e8"
        },
        "downloads": -1,
        "filename": "think-sql-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce9bbf4c3d63fd530376cd97538bc663",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 10443,
        "upload_time": "2021-11-04T10:43:49",
        "upload_time_iso_8601": "2021-11-04T10:43:49.360797Z",
        "url": "https://files.pythonhosted.org/packages/f5/20/4c0deb63be3e07326b1820536d646d663c5142dfcd2929e77fa50521055f/think-sql-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fd1ec0980e8444235616346766c0e9820ac7300dd33d87ed0316898743f685e",
          "md5": "ca55d42d8e9137c88dde3dcc514fcbc8",
          "sha256": "b988be56a386e1585ccd0bd567cfa1f17bc962355968c6d5afaf60579f52d99d"
        },
        "downloads": -1,
        "filename": "think_sql-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca55d42d8e9137c88dde3dcc514fcbc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 15340,
        "upload_time": "2021-11-24T03:02:37",
        "upload_time_iso_8601": "2021-11-24T03:02:37.935190Z",
        "url": "https://files.pythonhosted.org/packages/3f/d1/ec0980e8444235616346766c0e9820ac7300dd33d87ed0316898743f685e/think_sql-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fc91b89612cc01f444644fe66256e2cafb23e7fe15117f35c2adc9f774c47f1",
          "md5": "c35d033d949a1658f6fda7ace6cf1a06",
          "sha256": "518981617ba26af4e1335214672107f992e3ad9097b290edc77d1dd32abc2b14"
        },
        "downloads": -1,
        "filename": "think-sql-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c35d033d949a1658f6fda7ace6cf1a06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 18537,
        "upload_time": "2021-11-24T03:02:35",
        "upload_time_iso_8601": "2021-11-24T03:02:35.776265Z",
        "url": "https://files.pythonhosted.org/packages/6f/c9/1b89612cc01f444644fe66256e2cafb23e7fe15117f35c2adc9f774c47f1/think-sql-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fd1ec0980e8444235616346766c0e9820ac7300dd33d87ed0316898743f685e",
        "md5": "ca55d42d8e9137c88dde3dcc514fcbc8",
        "sha256": "b988be56a386e1585ccd0bd567cfa1f17bc962355968c6d5afaf60579f52d99d"
      },
      "downloads": -1,
      "filename": "think_sql-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca55d42d8e9137c88dde3dcc514fcbc8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 15340,
      "upload_time": "2021-11-24T03:02:37",
      "upload_time_iso_8601": "2021-11-24T03:02:37.935190Z",
      "url": "https://files.pythonhosted.org/packages/3f/d1/ec0980e8444235616346766c0e9820ac7300dd33d87ed0316898743f685e/think_sql-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fc91b89612cc01f444644fe66256e2cafb23e7fe15117f35c2adc9f774c47f1",
        "md5": "c35d033d949a1658f6fda7ace6cf1a06",
        "sha256": "518981617ba26af4e1335214672107f992e3ad9097b290edc77d1dd32abc2b14"
      },
      "downloads": -1,
      "filename": "think-sql-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c35d033d949a1658f6fda7ace6cf1a06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 18537,
      "upload_time": "2021-11-24T03:02:35",
      "upload_time_iso_8601": "2021-11-24T03:02:35.776265Z",
      "url": "https://files.pythonhosted.org/packages/6f/c9/1b89612cc01f444644fe66256e2cafb23e7fe15117f35c2adc9f774c47f1/think-sql-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}