{
  "info": {
    "author": "PyGOD Team",
    "author_email": "dev@pygod.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/pygod-team/pygod/main/docs/pygod_logo.png\n   :width: 1050\n   :alt: PyGOD Logo\n   :align: center\n\n.. image:: https://img.shields.io/pypi/v/pygod.svg?color=brightgreen\n   :target: https://pypi.org/project/pygod/\n   :alt: PyPI version\n\n.. image:: https://readthedocs.org/projects/pygod/badge/?version=latest\n   :target: https://docs.pygod.org/en/latest/?badge=latest\n   :alt: Documentation status\n\n.. image:: https://img.shields.io/github/stars/pygod-team/pygod.svg\n   :target: https://github.com/pygod-team/pygod/stargazers\n   :alt: GitHub stars\n\n.. image:: https://img.shields.io/github/forks/pygod-team/pygod.svg?color=blue\n   :target: https://github.com/pygod-team/pygod/network\n   :alt: GitHub forks\n\n.. image:: https://static.pepy.tech/personalized-badge/pygod?period=total&units=international_system&left_color=grey&right_color=blue&left_text=Downloads\n   :target: https://pepy.tech/project/pygod\n   :alt: PyPI downloads\n\n.. image:: https://github.com/pygod-team/pygod/actions/workflows/testing.yml/badge.svg\n   :target: https://github.com/pygod-team/pygod/actions/workflows/testing.yml\n   :alt: testing\n\n.. image:: https://coveralls.io/repos/github/pygod-team/pygod/badge.svg?branch=main\n   :target: https://coveralls.io/github/pygod-team/pygod?branch=main\n   :alt: Coverage Status\n\n.. image:: https://img.shields.io/github/license/pygod-team/pygod.svg\n   :target: https://github.com/pygod-team/pygod/blob/master/LICENSE\n   :alt: License\n\n\n-----\n\nPyGOD is a **Python library** for **graph outlier detection** (anomaly detection).\nThis exciting yet challenging field has many key applications, e.g., detecting\nsuspicious activities in social networks [#Dou2020Enhancing]_  and security systems [#Cai2021Structural]_.\n\nPyGOD includes more than **10** latest graph-based detection algorithms,\nsuch as DOMINANT (SDM'19) and GUIDE (BigData'21).\nFor consistency and accessibility, PyGOD is developed on top of `PyTorch Geometric (PyG) <https://www.pyg.org/>`_\nand `PyTorch <https://pytorch.org/>`_, and follows the API design of `PyOD <https://github.com/yzhao062/pyod>`_.\nSee examples below for detecting outliers with PyGOD in 5 lines!\n\n\n**PyGOD is featured for**:\n\n* **Unified APIs, detailed documentation, and interactive examples** across various graph-based algorithms.\n* **Comprehensive coverage** of more than 10 latest graph outlier detectors.\n* **Full support of detections at multiple levels**, such as node-, edge- (WIP), and graph-level tasks (WIP).\n* **Scalable design for processing large graphs** via mini-batch and sampling.\n* **Streamline data processing with PyG**--fully compatible with PyG data objects.\n\n**Outlier Detection Using PyGOD with 5 Lines of Code**\\ :\n\n.. code-block:: python\n\n\n    # train a dominant detector\n    from pygod.models import DOMINANT\n\n    model = DOMINANT(num_layers=4, epoch=20)  # hyperparameters can be set here\n    model.fit(data)  # data is a Pytorch Geometric data object\n\n    # get outlier scores on the input data\n    outlier_scores = model.decision_scores_ # raw outlier scores on the input data\n\n    # predict on the new data in the inductive setting\n    outlier_scores = model.decision_function(test_data) # raw outlier scores on the input data\n\n\n**Citing PyGOD**\\ :\n\nOur `PyGOD benchmark paper <https://arxiv.org/abs/2206.10071>`_ is available on arxiv.\nIf you use PyGOD in a scientific publication, we would appreciate\ncitations to the following paper::\n\n    @article{liu2022benchmarking,\n      author  = {Liu, Kay and Dou, Yingtong and Zhao, Yue and Ding, Xueying and Hu, Xiyang and Zhang, Ruitong and Ding, Kaize and Chen, Canyu and Peng, Hao and Shu, Kai and Sun, Lichao and Li, Jundong and Chen, George H. and Jia, Zhihao and Yu, Philip S.},\n      title   = {Benchmarking Node Outlier Detection on Graphs},\n      journal = {arXiv preprint arXiv:2206.10071},\n      year    = {2022},\n    }\n\nor::\n\n    Liu, K., Dou, Y., Zhao, Y., Ding, X., Hu, X., Zhang, R., Ding, K., Chen, C., Peng, H., Shu, K., Sun, L., Li, J., Chen, G.H., Jia, Z., and Yu, P.S. 2022. Benchmarking Node Outlier Detection on Graphs. arXiv preprint arXiv:2206.10071.\n\n\n\n----\n\nInstallation\n^^^^^^^^^^^^\n\n**Note on PyG and PyTorch Installation**\\ :\nPyGOD depends on `PyTorch Geometric (PyG) <https://www.pyg.org/>`_, `PyTorch <https://pytorch.org/>`_, and `networkx <https://networkx.org/>`_.\nTo streamline the installation, PyGOD does **NOT** install these libraries for you.\nPlease install them from the above links for running PyGOD:\n\n* torch>=1.10\n* pytorch_geometric>=2.0.3\n* networkx>=2.6.3\n\nIt is recommended to use **pip** or **conda** (wip) for installation.\nPlease make sure **the latest version** is installed, as PyGOD is updated frequently:\n\n.. code-block:: bash\n\n   pip install pygod            # normal install\n   pip install --upgrade pygod  # or update if needed\n\nAlternatively, you could clone and run setup.py file:\n\n.. code-block:: bash\n\n   git clone https://github.com/pygod-team/pygod.git\n   cd pygod\n   pip install .\n\n**Required Dependencies**\\ :\n\n* Python 3.6 +\n* numpy>=1.19.4\n* scikit-learn>=0.22.1\n* scipy>=1.5.2\n* setuptools>=50.3.1.post20201107\n\n\n----\n\n\nAPI Cheatsheet & Reference\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFull API Reference: (https://docs.pygod.org). API cheatsheet for all detectors:\n\n* **fit(G)**\\ : Fit detector.\n* **decision_function(G)**\\ : Predict raw anomaly score of PyG data G using the fitted detector.\n\nKey Attributes of a fitted model:\n\n* **decision_scores_**\\ : The outlier scores of the training data. The higher, the more abnormal.\n  Outliers tend to have higher scores.\n* **labels_**\\ : The binary labels of the training data. 0 stands for inliers and 1 for outliers/anomalies.\n\nFor the inductive setting:\n\n* **predict(G)**\\ : Predict if nodes in PyG data G is an outlier or not using the fitted detector.\n* **predict_proba(G)**\\ : Predict the probability of nodes in PyG data G being outlier using the fitted detector.\n* **predict_confidence(G)**\\ : Predict the model's node-wise confidence (available in predict and predict_proba) [#Perini2020Quantifying]_.\n\n\n**Input of PyGOD**: Please pass in a `PyTorch Geometric (PyG) <https://www.pyg.org/>`_ data object.\nSee `PyG data processing examples <https://pytorch-geometric.readthedocs.io/en/latest/notes/introduction.html#data-handling-of-graphs>`_.\n\n\nImplemented Algorithms\n^^^^^^^^^^^^^^^^^^^^^^\n\nPyGOD toolkit consists of two major functional groups:\n\n**(i) Node-level detection** :\n\n===================  ===================  ==================  =====  ===========  ========================================\nType                 Backbone             Abbr                Year   Sampling      Ref\n===================  ===================  ==================  =====  ===========  ========================================\nUnsupervised         MLP+AE               MLPAE               2014   Yes          [#Sakurada2014Anomaly]_\nUnsupervised         Clustering           SCAN                2007   No           [#Xu2007Scan]_\nUnsupervised         GNN+AE               GCNAE               2016   Yes          [#Kipf2016Variational]_\nUnsupervised         MF                   Radar               2017   No           [#Li2017Radar]_\nUnsupervised         MF                   ANOMALOUS           2018   No           [#Peng2018Anomalous]_\nUnsupervised         MF                   ONE                 2019   No           [#Bandyopadhyay2019Outlier]_\nUnsupervised         GNN+AE               DOMINANT            2019   Yes          [#Ding2019Deep]_\nUnsupervised         MLP+AE               DONE                2020   Yes          [#Bandyopadhyay2020Outlier]_\nUnsupervised         MLP+AE               AdONE               2020   Yes          [#Bandyopadhyay2020Outlier]_\nUnsupervised         GNN+AE               AnomalyDAE          2020   Yes          [#Fan2020AnomalyDAE]_\nUnsupervised         GAN                  GAAN                2020   Yes          [#Chen2020Generative]_\nUnsupervised         GNN+AE               OCGNN               2021   Yes          [#Wang2021One]_\nUnsupervised/SSL     GNN+AE               CoLA (beta)         2021   In progress  [#Liu2021Anomaly]_\nUnsupervised/SSL     GNN+AE               ANEMONE (beta)      2021   In progress  [#Jin2021ANEMONE]_\nUnsupervised         GNN+AE               GUIDE               2021   Yes          [#Yuan2021Higher]_\nUnsupervised/SSL     GNN+AE               CONAD               2022   Yes          [#Xu2022Contrastive]_\n===================  ===================  ==================  =====  ===========  ========================================\n\n**(ii) Utility functions** :\n\n===================  =======================  ==================================  ======================================================================================================================================\nType                 Name                     Function                            Documentation\n===================  =======================  ==================================  ======================================================================================================================================\nMetric               eval_precision_at_k      Calculating Precision@k             `eval_precision_at_k <https://docs.pygod.org/en/latest/pygod.metrics.html#pygod.metrics.eval_precision_at_k>`_\nMetric               eval_recall_at_k         Calculating Recall@k                `eval_recall_at_k <https://docs.pygod.org/en/latest/pygod.metrics.html#pygod.metrics.eval_recall_at_k>`_\nMetric               eval_roc_auc             Calculating ROC-AUC Score           `eval_roc_auc <https://docs.pygod.org/en/latest/pygod.metrics.html#pygod.metrics.eval_roc_auc>`_\nMetric               eval_average_precision   Calculating average precision       `eval_average_precision <https://docs.pygod.org/en/latest/pygod.metrics.html#pygod.metrics.eval_average_precision>`_\nMetric               eval_ndcg                Calculating NDCG                    `eval_ndcg <https://docs.pygod.org/en/latest/pygod.metrics.html#pygod.metrics.eval_ndcg>`_\nGenerator            gen_structural_outliers  Generating structural outliers      `gen_structural_outliers <https://docs.pygod.org/en/latest/pygod.generator.html#pygod.generator.gen_structural_outlierss>`_\nGenerator            gen_contextual_outliers  Generating attribute outliers       `gen_contextual_outliers <https://docs.pygod.org/en/latest/pygod.generator.html#pygod.generator.gen_contextual_outliers>`_\nLoader               load_data                Loading PyGOD built-in datasets     `load_data <https://docs.pygod.org/en/latest/pygod.utils.html#pygod.utils.load_data>`_\n===================  =======================  ==================================  ======================================================================================================================================\n\n\n----\n\n\nQuick Start for Outlier Detection with PyGOD\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`\"A Blitz Introduction\" <https://docs.pygod.org/en/latest/tutorials/intro.html>`_\ndemonstrates the basic API of PyGOD using the dominant detector. **It is noted that the API across all other algorithms are consistent/similar**.\n\n----\n\nHow to Contribute\n^^^^^^^^^^^^^^^^^\n\nYou are welcome to contribute to this exciting project:\n\nSee `contribution guide <https://github.com/pygod-team/pygod/blob/main/contributing.RST>`_ for more information.\n\n\n----\n\nPyGOD Team\n^^^^^^^^^^\n\nPyGOD is a great team effort by researchers from UIC, IIT, BUAA, ASU, and CMU.\nOur core team members include:\n\n`Kay Liu (UIC) <https://kayzliu.com/>`_,\n`Yingtong Dou (UIC) <http://ytongdou.com/>`_,\n`Yue Zhao (CMU) <https://www.andrew.cmu.edu/user/yuezhao2/>`_,\n`Xueying Ding (CMU) <https://scholar.google.com/citations?user=U9CMsh0AAAAJ&hl=en>`_,\n`Xiyang Hu (CMU) <https://www.andrew.cmu.edu/user/xiyanghu/>`_,\n`Ruitong Zhang (BUAA) <https://github.com/pygod-team/pygod>`_,\n`Kaize Ding (ASU) <https://www.public.asu.edu/~kding9/>`_,\n`Canyu Chen (IIT) <https://github.com/pygod-team/pygod>`_,\n\nReach out us by submitting an issue report or send an email to dev@pygod.org.\n\n----\n\nReference\n^^^^^^^^^\n\n.. [#Dou2020Enhancing] Dou, Y., Liu, Z., Sun, L., Deng, Y., Peng, H. and Yu, P.S., 2020, October. Enhancing graph neural network-based fraud detectors against camouflaged fraudsters. In Proceedings of the 29th ACM International Conference on Information & Knowledge Management (CIKM).\n\n.. [#Cai2021Structural] Cai, L., Chen, Z., Luo, C., Gui, J., Ni, J., Li, D. and Chen, H., 2021, October. Structural temporal graph neural networks for anomaly detection in dynamic graphs. In Proceedings of the 30th ACM International Conference on Information & Knowledge Management (CIKM).\n\n.. [#Perini2020Quantifying] Perini, L., Vercruyssen, V., Davis, J. Quantifying the confidence of anomaly detectors in their example-wise predictions. In *Joint European Conference on Machine Learning and Knowledge Discovery in Databases (ECML-PKDD)*, 2020.\n\n.. [#Sakurada2014Anomaly] Sakurada, M. and Yairi, T., 2014, December. Anomaly detection using autoencoders with nonlinear dimensionality reduction. In Proceedings of the MLSDA 2014 2nd workshop on machine learning for sensory data analysis.\n\n.. [#Xu2007Scan] Xu, X., Yuruk, N., Feng, Z. and Schweiger, T.A., 2007, August. Scan: a structural clustering algorithm for networks. In Proceedings of the 13th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD).\n\n.. [#Kipf2016Variational] Kipf, T.N. and Welling, M., 2016. Variational graph auto-encoders. arXiv preprint arXiv:1611.07308.\n\n.. [#Li2017Radar] Li, J., Dani, H., Hu, X. and Liu, H., 2017, August. Radar: Residual Analysis for Anomaly Detection in Attributed Networks. In Proceedings of the Twenty-Sixth International Joint Conference on Artificial Intelligence (IJCAI).\n\n.. [#Peng2018Anomalous] Peng, Z., Luo, M., Li, J., Liu, H. and Zheng, Q., 2018, July. ANOMALOUS: A Joint Modeling Approach for Anomaly Detection on Attributed Networks. In Proceedings of the Twenty-Seventh International Joint Conference on Artificial Intelligence (IJCAI).\n\n.. [#Bandyopadhyay2019Outlier] Bandyopadhyay, S., Lokesh, N. and Murty, M.N., 2019, July. Outlier aware network embedding for attributed networks. In Proceedings of the AAAI conference on artificial intelligence (AAAI).\n\n.. [#Ding2019Deep] Ding, K., Li, J., Bhanushali, R. and Liu, H., 2019, May. Deep anomaly detection on attributed networks. In Proceedings of the SIAM International Conference on Data Mining (SDM).\n\n.. [#Bandyopadhyay2020Outlier] Bandyopadhyay, S., Vivek, S.V. and Murty, M.N., 2020, January. Outlier resistant unsupervised deep architectures for attributed network embedding. In Proceedings of the International Conference on Web Search and Data Mining (WSDM).\n\n.. [#Fan2020AnomalyDAE] Fan, H., Zhang, F. and Li, Z., 2020, May. AnomalyDAE: Dual autoencoder for anomaly detection on attributed networks. In Proceedings of the IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP).\n\n.. [#Chen2020Generative] Chen, Z., Liu, B., Wang, M., Dai, P., Lv, J. and Bo, L., 2020, October. Generative adversarial attributed network anomaly detection. In Proceedings of the 29th ACM International Conference on Information & Knowledge Management (CIKM).\n\n.. [#Wang2021One] Wang, X., Jin, B., Du, Y., Cui, P., Tan, Y. and Yang, Y., 2021. One-class graph neural networks for anomaly detection in attributed networks. Neural computing and applications.\n\n.. [#Liu2021Anomaly] Liu, Y., Li, Z., Pan, S., Gong, C., Zhou, C. and Karypis, G., 2021. Anomaly detection on attributed networks via contrastive self-supervised learning. IEEE transactions on neural networks and learning systems (TNNLS).\n\n.. [#Jin2021ANEMONE] Jin, M., Liu, Y., Zheng, Y., Chi, L., Li, Y. and Pan, S., 2021. ANEMONE: Graph Anomaly Detection with Multi-Scale Contrastive Learning. In Proceedings of the 30th ACM International Conference on Information & Knowledge Management (CIKM).\n\n.. [#Yuan2021Higher] Yuan, X., Zhou, N., Yu, S., Huang, H., Chen, Z. and Xia, F., 2021, December. Higher-order Structure Based Anomaly Detection on Attributed Networks. In 2021 IEEE International Conference on Big Data (Big Data).\n\n.. [#Xu2022Contrastive] Xu, Z., Huang, X., Zhao, Y., Dong, Y., and Li, J., 2022. Contrastive Attributed Network Anomaly Detection with Data Augmentation. In Proceedings of the 26th Pacific-Asia Conference on Knowledge Discovery and Data Mining (PAKDD).\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/pygod-team/pygod/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pygod-team/pygod/",
    "keywords": "outlier detection,anomaly detection,graph mining,data mining,neural networks,graph neural networks",
    "license": "BSD-2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygod",
    "package_url": "https://pypi.org/project/pygod/",
    "platform": null,
    "project_url": "https://pypi.org/project/pygod/",
    "project_urls": {
      "Download": "https://github.com/pygod-team/pygod/archive/master.zip",
      "Homepage": "https://github.com/pygod-team/pygod/"
    },
    "release_url": "https://pypi.org/project/pygod/0.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python Library for Graph Outlier Detection (Anomaly Detection)",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15011389,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b55f05db87be52c83931b35c88d65a3d4610f44ff76598e9291301e96b5409d",
          "md5": "9a9cf5fcdf3c431c79e93c0f2ec2d31d",
          "sha256": "302ae1b6070f34df25a6a78c7dfb4fcf865b3cd4f6cb543145dd7b6d6311f106"
        },
        "downloads": -1,
        "filename": "pygod-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9a9cf5fcdf3c431c79e93c0f2ec2d31d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38228,
        "upload_time": "2022-04-01T18:37:47",
        "upload_time_iso_8601": "2022-04-01T18:37:47.409323Z",
        "url": "https://files.pythonhosted.org/packages/1b/55/f05db87be52c83931b35c88d65a3d4610f44ff76598e9291301e96b5409d/pygod-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e6b675e4e326610a9c702962401447f58634314febad362d782c0c43fedcb2e",
          "md5": "3ce34290be9e25065410a1202f18eef1",
          "sha256": "801479cf290b9133c6dc7e9782563df7cae621dd337119ba2c3bb590182dafc5"
        },
        "downloads": -1,
        "filename": "pygod-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ce34290be9e25065410a1202f18eef1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38792,
        "upload_time": "2022-04-04T21:10:30",
        "upload_time_iso_8601": "2022-04-04T21:10:30.084987Z",
        "url": "https://files.pythonhosted.org/packages/4e/6b/675e4e326610a9c702962401447f58634314febad362d782c0c43fedcb2e/pygod-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a705bd6e6a95aa58df80ee2e47484c821a50e1a15fb9d09dfe6c6574368d692",
          "md5": "0520dea581c3d105acbdd086b3117ce9",
          "sha256": "ce199ad925201b4ea48a702f0ff3efdd8bc2ddf83063b33038face14b257d2fb"
        },
        "downloads": -1,
        "filename": "pygod-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0520dea581c3d105acbdd086b3117ce9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52006,
        "upload_time": "2022-04-29T23:20:08",
        "upload_time_iso_8601": "2022-04-29T23:20:08.114350Z",
        "url": "https://files.pythonhosted.org/packages/4a/70/5bd6e6a95aa58df80ee2e47484c821a50e1a15fb9d09dfe6c6574368d692/pygod-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "588d619f1ddc422aa64c7e4be69bacb25689ef32ec83cd5692c8df0c189e8c46",
          "md5": "902695a8b8420de9362522ec4061ae6d",
          "sha256": "8b39b32c66524cf3eb72e4fefabe2a2b268fb8ab7e3d85cc258fc60ba5773f5a"
        },
        "downloads": -1,
        "filename": "pygod-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "902695a8b8420de9362522ec4061ae6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54815,
        "upload_time": "2022-06-25T08:05:01",
        "upload_time_iso_8601": "2022-06-25T08:05:01.588882Z",
        "url": "https://files.pythonhosted.org/packages/58/8d/619f1ddc422aa64c7e4be69bacb25689ef32ec83cd5692c8df0c189e8c46/pygod-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed2b234fa65db971810a11cb4a2a5252b124ed07bae5fe47b20a34ce6038b6c1",
          "md5": "06cce9a1482d388e42d74633db477a35",
          "sha256": "cad186b7ebe34ec8fc0da90c27b4204a6371186fd541cc2c764807e693779b9f"
        },
        "downloads": -1,
        "filename": "pygod-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06cce9a1482d388e42d74633db477a35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54886,
        "upload_time": "2022-09-06T20:46:44",
        "upload_time_iso_8601": "2022-09-06T20:46:44.733833Z",
        "url": "https://files.pythonhosted.org/packages/ed/2b/234fa65db971810a11cb4a2a5252b124ed07bae5fe47b20a34ce6038b6c1/pygod-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed2b234fa65db971810a11cb4a2a5252b124ed07bae5fe47b20a34ce6038b6c1",
        "md5": "06cce9a1482d388e42d74633db477a35",
        "sha256": "cad186b7ebe34ec8fc0da90c27b4204a6371186fd541cc2c764807e693779b9f"
      },
      "downloads": -1,
      "filename": "pygod-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "06cce9a1482d388e42d74633db477a35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 54886,
      "upload_time": "2022-09-06T20:46:44",
      "upload_time_iso_8601": "2022-09-06T20:46:44.733833Z",
      "url": "https://files.pythonhosted.org/packages/ed/2b/234fa65db971810a11cb4a2a5252b124ed07bae5fe47b20a34ce6038b6c1/pygod-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}