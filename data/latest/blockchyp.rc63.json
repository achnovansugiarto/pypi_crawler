{
  "info": {
    "author": "BlockChyp",
    "author_email": "support@blockchyp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# BlockChyp Python SDK\n\n[![Build Status](https://circleci.com/gh/blockchyp/blockchyp-python/tree/master.svg?style=shield)](https://circleci.com/gh/blockchyp/blockchyp-python/tree/master)\n[![PyPI](https://img.shields.io/pypi/v/blockchyp.svg)](https://pypi.org/project/blockchyp/)\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/blockchyp/blockchyp-python/blob/master/LICENSE)\n\nThe official library for accessing the [BlockChyp] Terminal and Gateway APIs\nfrom Python.\n\n## Installation\n\nBlockChyp can be simply installed by running:\n\n```sh\npip install blockchyp\n```\n\n\n## Additional Documentation\n\nComplete documentation can be found on our [Developer Documentation Portal].\n\n[Developer Documentation Portal]: https://docs.blockchyp.com/\n\n## Getting a Developer Kit\n\nIn order to test your integration with real terminals, you'll need a BlockChyp\nDeveloper Kit. Our kits include a fully functioning payment terminal with\ntest pin encryption keys. Every kit includes a comprehensive set of test\ncards with test cards for every major card brand and entry method, including\nContactless and Contact EMV and mag stripe cards. Each kit also includes\ntest gift cards for our blockchain gift card system.\n\nAccess to BlockChyp's developer program is currently invite only, but you\ncan request an invitation by contacting our engineering team at **nerds@blockchyp.com**.\n\nYou can also view a number of long form demos and learn more about us on our [YouTube Channel](https://www.youtube.com/channel/UCE-iIVlJic_XArs_U65ZcJg).\n\n## Transaction Code Examples\n\nYou don't want to read words. You want examples. Here's a quick rundown of the\nstuff you can do with the BlockChyp Python SDK and a few basic examples.\n\n### Payment Endpoints\n\n\nThese are the core payment APIs used to execute and work with payment transactions in BlockChyp.\n\n\n\n#### Charge\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nOur most popular transaction executes a standard authorization and capture.\nThis is the most basic of\nbasic payment transactions, typically used in conventional retail.\n\nCharge transactions can use a payment terminal to capture a payment or\nuse a previously enrolled payment token.\n\n**Terminal Transactions**\n\nFor terminal transactions, make sure you pass in the terminal name using the `terminalName` property.\n\n**Token Transactions**\n\nIf you have a payment token, omit the `terminalName` property and pass in the token with the `token`\nproperty instead.\n\n**Card Numbers and Mag Stripes**\n\nYou can also pass in PANs and Mag Stripes, but you probably shouldn't, as this will\nput you in PCI scope and the most common vector for POS breaches is keylogging.\nIf you use terminals for manual card entry, you'll bypass any keyloggers that\nmight be maliciously running on the point-of-sale system.\n\n**Common Variations**\n\n* **Gift Card Redemption**:  There's no special API for gift card redemption in BlockChyp. Simply execute a plain charge transaction and if the customer swipes a gift card, our terminals will identify the gift card and run a gift card redemption. Also note that if for some reason the gift card's original purchase transaction is associated with fraud or a chargeback, the transaction will be rejected.\n* **EBT**: Set the `card_type` field to `blockchyp.CardType.EBT` to process an EBT SNAP transaction. Note that test EBT transactions always assume a balance of $100.00, so test EBT transactions over that amount may be declined.\n* **Cash Back**: To enable cash back for debit transactions, set the `cash_back` field. If the card presented isn't a debit card, the `cash_back` field will be ignored.\n* **Manual Card Entry**: Set the `manual_entry` field to enable manual card entry. Good as a backup when chips and MSR's don't work or for more secure phone orders. You can even combine the `manual_entry` field with the `card_type` field set to `blockchyp.CardType.EBT` for manual EBT card entry.\n* **Inline Tokenization**: You can enroll the payment method in the token vault inline with a charge transaction by setting the `enroll` field. You'll get a token back in the response. You can even bind the token to a customer record if you also pass in customer data.\n* **Prompting for Tips**: Set the `prompt_for_tip` field if you'd like to prompt the customer for a tip before authorization. Good for pay-at-the-table and other service related scenarios.\n* **Cash Discounting and Surcharging**:  The `surcharge` and `cash_discount` fields can be used together to support cash discounting or surcharge problems. Consult the Cash Discount documentation for more details.\n* **Cryptocurrency** The `cryptocurrency` field can be used to switch the standard present card screen to a cryptocurrency screen.  The field value can be `ANY` to enable any supported cryptocurrency or a single currency code such as `BTC` for Bitcoin.\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"amount\": \"55.00\",\n}\n\n# run the transaction.\nresponse = client.charge(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Preauthorization\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nA preauthorization puts a hold on funds and must be captured later.  This is used\nin scenarios where the final transaction amount might change.  A common example is \nfine dining, where a tip adjustment is required before final settlement.\n\nAnother use case for preauthorization is e-commerce.  Typically, an online order\nis preauthorized at the time of the order and then captured when the order ships.\n\nPreauthorizations can use a payment terminal to capture a payment or\nuse a previously enrolled payment token.\n\n**Terminal Transactions**\n\nFor terminal transactions, make sure you pass in the terminal name using the `terminalName` property.\n\n**Token Transactions**\n\nIf you have a payment token, omit the `terminalName` property and pass in the token with the `token`\nproperty instead.\n\n**Card Numbers and Mag Stripes**\n\nYou can also pass in PANs and Mag Stripes, but you probably shouldn't, as this will\nput you in PCI scope and the most common vector for POS breaches is key logging.\nIf you use terminals for manual card entry, you'll bypass any key loggers that\nmight be maliciously running on the point-of-sale system.\n\n**Cryptocurrency**\n\nNote that preauths are not supported for cryptocurrency.\n\n**Common Variations**\n\n* **Manual Card Entry**: Set the `manual_entry` field to enable manual card entry. Good as a backup when chips and MSR's don't work or for more secure phone orders. You can even combine the `manual_entry` field with `card_type` set to `blockchyp.CardType.EBT` for manual EBT card entry.\n* **Inline Tokenization**: You can enroll the payment method in the token vault in line with a charge transaction by setting the `enroll` field. You'll get a token back in the response. You can even bind the token to a customer record if you also pass in customer data.\n* **Prompting for Tips**: Set the `prompt_for_tip` field if you'd like to prompt the customer for a tip before authorization. You can prompt for tips as part of a preauthorization, although it's not a very common approach.\n* **Cash Discounting and Surcharging**: The `surcharge` and `cash_discount` fields can be used together to support cash discounting or surcharge problems. Consult the Cash Discount documentation for more details.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"amount\": \"27.00\",\n}\n\n# run the transaction.\nresponse = client.preauth(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Capture Preauthorization\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API allows you to capture a previously approved preauthorization.\n\nYou'll need to make sure you pass in the Transaction ID returned by the original preauth transaction \nso we know which transaction we're capturing.  If you want to capture the transaction for the\nexact amount of the preauth, the Transaction ID is all you need to pass in.\n\nYou can adjust the total if you need to by passing in a new `amount`.  We\nalso recommend you pass in updated amounts for `tax` and `tip` as it can\nsometimes reduce your interchange fees. (Level II Processing, for example.)\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"transactionId\": \"<ORIGINAL TRANSACTION ID>\",\n    \"amount\": \"32.00\",\n}\n\n# run the transaction.\nresponse = client.capture(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Refund\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nIt's not ideal, but sometimes customers want their money back.\n\nOur refund API allows you to confront this unpleasant reality by executing refunds in a few different scenarios.\n\nThe most fraud resistent method is to execute refunds in the context of a previous transaction.  You should always keep track of the Transaction ID\nreturned in a BlockChyp response.  To refund the full amount of the previous transaction, just pass in the original Transaction ID with the refund requests.\n\n**Partial Refunds**\n\nFor a partial refund, just pass in an amount along with the Transaction ID.\nThe only rule is that the amount must be equal to or less than the original\ntransaction.  You can execute multiple partial refunds against the same\noriginal transaction as long as the total refunded amount doesn't exceed the original amount.\n\n**Tokenized Refunds**\n\nYou can also use a token to execute a refund.  Pass in a token instead\nof the Transaction ID and the desired refund amount.\n\n**Free Range Refunds**\n\nWhen you execute a refund without referencing a previous transaction, we\ncall this a *free range refund*.\n\nWe don't recommend this type of refund, but it is permitted.  If you absolutely insist on\ndoing it, pass in a Terminal Name and an amount.\n\nYou can execute a manual or keyed refund by passing the `manual_entry` field\nto a free range refund request.\n\n**Gift Card Refunds**\n\nGift card refunds are allowed in the context of a previous transaction, but\nfree range gift card refunds are not allowed.  Use the gift card activation\nAPI if you need to add more funds to a gift card.\n\n**Store and Forward Support**\n\nRefunds are not permitted when a terminal falls back to store and forward mode.\n\n**Auto Voids**\n\nIf a refund referencing a previous transaction is executed for the full amount\nbefore the original transaction's batch is closed, the refund is automatically\nconverted to a void.  This saves the merchant a little bit of money.\n\n**Cryptocurrency**\n\nNote that refunds are not supported for cryptocurrency.  You must refund crypto transactions\nmanually from your cryptocurrency wallet.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"transactionId\": \"<PREVIOUS TRANSACTION ID>\",\n\n    # Optional amount for partial refunds.\n    \"amount\": \"5.00\",\n}\n\n# run the transaction.\nresponse = client.refund(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Void\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nMistakes happen.  If a transaction is made by mistake, you can void it\nwith this API.  All that's needed is to pass in a Transaction ID and execute\nthe void before the original transaction's batch closes.\n\nVoids work with EBT and gift card transactions with no additional parameters.\n\n**Cryptocurrency**\n\nNote that voids are not supported for cryptocurrency.  You must refund crypto transactions\nmanually from your cryptocurrency wallet.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"transactionId\": \"<PREVIOUS TRANSACTION ID>\",\n}\n\n# run the transaction.\nresponse = client.void(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Time Out Reversal\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nPayment transactions require a stable network to function correctly and\nno network is stable all the time.  Time out reversals are a great line\nof defense against accidentally double charging consumers when payments\nare retried during shaky network conditions.\n\nWe highly recommend developers use this API whenever a charge, preauth, or refund transaction times out.  If you don't receive a definitive response\nfrom BlockChyp, you can't be certain about whether or not the transaction went through.\n\nThe best practice in this situation is to send a time out reversal request.  Time out reversals check for a transaction and void it if it exists.\n\nThe only caveat is that developers must use the `transactionRef` property (`txRef` for the CLI) when executing charge, preauth, and refund transactions.\n\nThe reason for this requirement is that if a system never receives a definitive\nresponse for a transaction, the system would never have received the BlockChyp\ngenerated Transaction ID.  We have to fall back to Transaction Ref to identify\na transaction.\n\n**Cryptocurrency**\n\nNote that refunds are not supported for cryptocurrency.  You must refund crypto transactions\nmanually from your cryptocurrency wallet.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"transactionRef\": \"<LAST TRANSACTION REF>\",\n}\n\n# run the transaction.\nresponse = client.reverse(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Gift Card Activation\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API activates or adds value to BlockChyp gift cards.\nJust pass in the terminal name and the amount to add to the card.\nOnce the customer swipes their card, the terminal will use keys\non the mag stripe to add value to the card.\n\nYou don't need to handle a new gift card activation or a gift card recharge any\ndifferently.  The terminal firmware will figure out what to do on its\nown while also returning the new balance for the gift card.\n\nThis is the part of the system where BlockChyp's blockchain DNA comes\nclosest to the surface.  The BlockChyp gift card system doesn't really\nuse gift card numbers.  This means they can't be stolen.\n\nBlockChyp identifies cards with an elliptic curve public key instead.\nGift card transactions are actually blocks signed with those keys.\nThis means there are no shared secrets sent over the network.\nTo keep track of a BlockChyp gift card, hang on to the **public key** returned\nduring gift card activation.  That's the gift card's elliptic curve public key.\n\nWe sometimes print numbers on our gift cards, but these are actually\ndecimal encoded hashes of a portion of the public key to make our gift\ncards seem *normal* to *normies*.  They can be used\nfor balance checks and play a lookup role in online gift card\nauthorization, but are of little use beyond that.\n\n**Voids and Reversals**\n\nGift card activations can be voided and reversed just like any other\nBlockChyp transaction.  Use the Transaction ID or Transaction Ref\nto identify the gift activation transaction as you normally would for\nvoiding or reversing a conventional payment transaction.\n\n**Importing Gift Cards**\n\nBlockChyp does have the ability to import gift card liability from\nconventional gift card platforms.  Unfortunately, BlockChyp does not\nsupport activating cards on third party systems.  However, you can import\nyour outstanding gift cards and customers can swipe them on the\nterminals like BlockChyp's standard gift cards.\n\nNo special coding is required to access this feature.  The gateway and\nterminal firmware handle everything for you.\n\n**Third Party Gift Card Networks**\n\nBlockChyp does not currently provide any native support for other gift card\nplatforms beyond importing gift card liability.  We do have a white listing system\nthat can be used to support your own custom gift card implementations.  We have a security review\nprocess before we can allow a BIN range to be white listed, so contact\nsupport@blockchyp.com if you need to white list a BIN range.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"amount\": \"50.00\",\n}\n\n# run the transaction.\nresponse = client.gift_activate(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Balance\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API checks a gift or EBT card balance.\n\n**Gift Card Balance Checks**\n\nFor gift cards, pass in a terminal name and the customer will be prompted\nto swipe a card on that terminal.  The remaining balance will be displayed\nbriefly on the terminal screen and the API response will include the gift card's public key and the remaining balance.\n\n**EBT Balance Checks**\n\nAll EBT transactions require a PIN, so to check an EBT card balance,\nyou need to pass in the `ebt` flag just like you would for a normal EBT\ncharge transaction.  The customer will be prompted to swipe their card and\nenter a PIN code.  If everything checks out, the remaining balance on the \ncard will be displayed on the terminal for the customer and returned with the API response.\n\n**Testing Gift Card Balance Checks**\n\nTest gift card balance checks work no differently than live gift cards.  You\nmust activate a test gift card first to test balance checks.  Test\ngift cards are real blockchain cards that live on our parallel test blockchain.\n\n**Testing EBT Gift Card Balance Checks**\n\nAll test EBT transactions assume a starting balance of $100.00.  As a result,\ntest EBT balance checks always return a balance of $100.00.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"cardType\": blockchyp.CardType.EBT,\n}\n\n# run the transaction.\nresponse = client.balance(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Close Batch\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API will close the merchant's batch if it's currently open.\n\nBy default, merchant batches will close automatically at 3 AM in their\nlocal time zone.  The automatic batch closure time can be changed\nin the Merchant Profile or disabled completely.\n\nIf automatic batch closure is disabled, you'll need to use this API to\nclose the batch manually.\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n}\n\n# run the transaction.\nresponse = client.close_batch(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Send Payment Link\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API allows you to send an invoice to a customer and capture payment\nvia a BlockChyp hosted payment page.\n\nIf you set the `autoSend` flag, BlockChyp will send a basic invoice email\nto the customer for you that includes the payment link.  If you'd rather have\nmore control over the look of the email message, you can omit the `autoSend`\nflag and send the customer email yourself.\n\nThere are a lot of optional parameters for this API, but at a minimum\nyou'll need to pass in a total, customer name, and email address. (Unless\nyou use the `cashier` flag.)\n\n**Customer Info**\n\nUnless you're using the `cashier` flag, you must specify a customer; either by\ncreating a new customer record inline or passing in an existing Customer ID or Customer Ref.\n\n**Line Item Level Data**\n\nIt's not strictly required, but we strongly recommend sending line item level\ndetail with every request.  It will make the invoice look more complete\nand the data format for line item level data is the exact same format used\nfor terminal line item display, so the same code can be used to support both areas.\n\n**Descriptions**\n\nYou can also provide a free form description or message to display near\nthe bottom of the invoice.  Usually this is some kind of thank you note\nor instruction.\n\n**Terms and Conditions**\n\nYou can include long form contract language with a request and capture\nterms and conditions accepted at the same time payment is captured.\n\nThe interface is identical to that used for the terminal based Terms and\nConditions API in that you can pass in content directly via `tcContent` or via\na preconfigured template via `tcAlias`.  The Terms and Conditions log will also be updated when\nagreement acceptance is incorporated into a send link request.\n\n**Auto Send**\n\nBlockChyp does not send the email notification automatically.   This safeguard prevents real \nemails from going out when you may not expect them If you want BlockChyp to send the email \nfor you, just add the `autoSend` flag with all requests.\n\n**Cryptocurrency**\n\nIf the merchant is configured to support cryptocurrency transactions, the payment page will\ndisplay additional UI widgets that allowing customers to switch to a crypto payment method.\n\n**Tokenization**\n\nAdd the `enroll` flag to a send link request to enroll the payment method\nin the token vault.\n\n**Cashier Facing Card Entry**\n\nBlockChyp can be used to generate internal/cashier facing card entry pages as well.  This is\ndesigned for situations where you might need to take a phone order and don't\nhave an available terminal.\n\nIf you pass in the `cashier` flag, no email will be sent and you'll be able to\nload the link in a browser or iframe for payment entry.  When the `cashier` flag\nis used, the `autoSend` flag will be ignored.\n\nNote that cryptocurrency is not supported for cashier facing payment entry.\n\n**Payment Notifications**\n\nWhen a customer successfully submits payment, the merchant will receive an email\nnotifying them that the payment was received.\n\n**Real Time Callback Notifications**\n\nEmail notifications are fine, but you may want your system to be informed\nimmediately whenever a payment event occurs.  By using the optional `callbackUrl` request\nproperty, you can specify a URL to which the Authorization Response will be posted\nevery time the user submits a payment, whether approved or otherwise.\n\nThe response will be sent as a JSON encoded POST request and will be the exact\nsame format as all BlockChyp charge and preauth transaction responses.\n\n**Status Polling**\n\nIf real time callbacks aren't practical or necessary in your environment, you can\nalways use the Transaction Status API described below.\n\nA common use case for the send link API with status polling is curbside pickup.\nYou could have your system check the Transaction Status when a customer arrives to\nensure it's been paid without necessarily needing to create background threads\nto constantly poll for status updates.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"transactionRef\": \"<TX REF>\",\n    \"amount\": \"199.99\",\n    \"description\": \"Widget\",\n    \"subject\": \"Widget invoice\",\n    \"transaction\": {\n        \"subtotal\": \"195.00\",\n        \"tax\": \"4.99\",\n        \"total\": \"199.99\",\n        \"items\": [\n            {\n                \"description\": \"Widget\",\n                \"price\": \"195.00\",\n                \"quantity\": 1,\n            },\n        ],\n    },\n    \"autoSend\": True,\n    \"customer\": {\n        \"customerRef\": \"Customer reference string\",\n        \"firstName\": \"FirstName\",\n        \"lastName\": \"LastName\",\n        \"companyName\": \"Company Name\",\n        \"emailAddress\": \"notifications@blockchypteam.m8r.co\",\n        \"smsNumber\": \"(123) 123-1231\",\n    },\n}\n\n# run the transaction.\nresponse = client.send_payment_link(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Cancel Payment Link\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API cancels a payment link.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"linkCode\": \"<PAYMENT LINK CODE>\",\n}\n\n# run the transaction.\nresponse = client.cancel_payment_link(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Transaction Status\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API returns the current status for any transaction.  You can lookup a transaction\nby its BlockChyp assigned Transaction ID or your own Transaction Ref.\n\nYou should alway use globally unique Transaction Ref values, but in the event\nthat you duplicate Transaction Refs, the most recent transaction matching your\nTransaction Ref is returned.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"transactionId\": \"<TRANSACTION ID>\",\n}\n\n# run the transaction.\nresponse = client.transaction_status(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Cash Discount\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API calculates the surcharge, cash discount, and total amounts for cash transactions.\n\nIf you're using BlockChyp's cash discounting features, you can use this endpoint\nto ensure the numbers and receipts for true cash transactions are consistent\nwith transactions processed by BlockChyp.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"amount\": \"100.00\",\n    \"cashDiscount\": True,\n    \"surcharge\": True,\n}\n\n# run the transaction.\nresponse = client.cash_discount(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Batch History\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis endpoint allows developers to query the gateway for the merchant's batch history.\nThe data will be returned in descending order of open date with the most recent\nbatch returned first.  The results will include basic information about the batch.\nConsider using the Batch Details API for more detail about a specific batch.\n\n**Limiting Results**\n\nThis API will return a maximum of 250 results.  Use the `maxResults` property to\nlimit maximum results even further and use the `startIndex` property to\npage through results that span multiple queries.\n\nFor example, if you want the ten most recent batches, pass in a value of\n`10` for `maxResults`.  Also note that `startIndex` is zero based. Use a value of `0` to\nget the first batch in the dataset.\n\n**Filtering by Date Range**\n\nYou can also filter results by date.  Use the `startDate` and `endDate`\nproperties to return only those batches opened between those dates.\nYou can use either `startDate` and `endDate` and you can use date filters\nin conjunction with `maxResults` and `startIndex`\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"maxResults\": 250,\n    \"startIndex\": 0,\n}\n\n# run the transaction.\nresponse = client.batch_history(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Batch Details\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API allows developers to pull down details for a specific batch,\nincluding captured volume, gift card activity, expected deposit, and\ncaptured volume broken down by terminal.\n\nThe only required request parameter is `batchId`.  Batch IDs are returned\nwith every transaction response and can be discovered using the Batch\nHistory API.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"batchId\": \"<BATCH ID>\",\n}\n\n# run the transaction.\nresponse = client.batch_details(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Transaction History\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis endpoint provides several different methods to sift through\ntransaction history.\n\nBy default with no filtering properties, this endpoint will return the 250\nmost recent transactions.\n\n**Limiting Results**\n\nThis API will return a maximum of 50 results in a single query.  Use the `maxResults` property\nto limit maximum results even further and use the `startIndex` property to\npage through results that span multiple queries.\n\nFor example, if you want the ten most recent batches, pass in a value of\n`10` for `maxResults`.  Also note that `startIndex` is zero based. Use a value of `0` to\nget the first transaction in the dataset.\n\n**Filtering By Date Range**\n\nYou can also filter results by date.  Use the `startDate` and `endDate`\nproperties to return only transactions run between those dates.\nYou can use either `startDate` or `endDate` and you can use date filters\nin conjunction with `maxResults` and `startIndex`\n\n**Filtering By Batch**\n\nTo restrict results to a single batch, pass in the `batchId` parameter.\n\n**Filtering By Terminal**\n\nTo restrict results to those executed on a single terminal, pass in the terminal name.\n\n**Combining Filters**\n\nNone of the above filters are mutually exclusive.  You can combine any of the\nabove properties in a single request to restrict transaction results to a\nnarrower set of results.\n\n**Searching Transaction History**\n\nYou can search transaction history by passing in search criteria with the \n`query` option.  The search system will match the amount (requested and authorized),\nlast four of the card number, cardholder name, and the auth code.\n\nNote that when search queries are used, terminalName or \nbatch id filters are not supported.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"maxResults\": 10,\n    \"batchId\": \"<BATCH ID>\",\n}\n\n# run the transaction.\nresponse = client.transaction_history(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### List Queued Transactions\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nReturns a list of transaction refs of transactions queued on a terminal.\nDetails about the transactions can be retrieved using the Transaction Status\nAPI.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.list_queued_transactions(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Queued Transaction\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nDeletes one or all queued transactions from a terminal. If `*` is passed as\na transaction ref, then the entire terminal queue will be cleared. An error is\nreturned if the passed transaction ref is not queued on the terminal.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n    \"transactionRef\": \"*\",\n}\n\n# run the transaction.\nresponse = client.delete_queued_transaction(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n### Terminal Management Endpoints\n\n\nThese APIs support terminal management functions and additional terminal \nfeatures such as line item display, messages, and interactive prompts.  \nThese features can be used to extend a point of sale system's functionality.\n\n\n\n#### Terminal Ping\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis simple test transaction helps ensure good communication with a payment terminal \nand is usually the first test you'll run in development.\n\nIt tests communication with the terminal and returns a positive response if everything\nis okay.  It works the same way in local or cloud relay mode.\n\nIf you get a positive response, you've successfully verified all of the following:\n\n* The terminal is online.\n* There is a valid route to the terminal.\n* The API Credentials are valid.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.ping(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terminal Locate\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis endpoint returns a terminal's routing and location information.\n\nThe result will indicate whether or not the terminal is in cloud relay mode and will\nreturn the local IP address if the terminal is in local mode.\n\nThe terminal will also return the public key for the terminal.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.locate(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terminal Clear\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API interrupts whatever a terminal may be doing and returns it to the\nidle state.\n\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.clear(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terminal Status\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API returns the current status of a payment terminal.  This is typically used\nas a way to determine if the terminal is busy before sending a new transaction.\n\nIf the terminal is busy, `idle` will be false and the `status` field will return\na short string that indicates the transaction type currently in progress.  The system\nwill also return the timestamp of the last status change in the `since` field.\n\nThe `cardInSlot` field in the response will indicates whether or not a card is currently in the card reader slot.\n\nIf the system is running a payment transaction and you wisely passed in a\nTransaction Ref, this API will also return the Transaction Ref of the in progress\ntransaction.\n\nThe table below lists all possible status responses.\n\n| Status Code          | Description                                                                                |\n|----------------------|--------------------------------------------------------------------------------------------|\n| idle                 | The terminal is idle and ready for transactions.  The default branding is being displayed. |\n| activate             | The terminal is the processing of activating and pairing with the merchant account.        |\n| balance              | A balance check (EBT or Gift Card) is pending on the terminal.                             |\n| boolean-prompt       | A boolean prompt (yes/no) operation is pending on the terminal.                            |      \n| signature            | A signature capture is pending.                                                            |\n| crypto               | A cryptocurrency transaction is pending.                                                   |\n| enroll               | A token vault enrollment operation is pending.                                             |\n| gift-activate        | A gift card activation operation is in progress.                                           | \n| message              | The terminal is displaying a custom message.                                               |\n| charge               | The terminal is executing a charge transaction.                      |\n| preauth              | The terminal is executing a preauth transaction. |\n| refund               | The terminal is executing a refund transaction. |\n| survey               | The terminal is displaying post transaction survey questions. |\n| terms-and-conditions | The terminal is pending terms and conditions acceptance and signature. |\n| text-prompt          | The terminal is awaiting response to a text input prompt. |\n| txdisplay            | The terminal is displaying transaction and/or line item level details. |\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.terminal_status(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Capture Signature\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis endpoint captures a written signature from the terminal and returns the\nimage.\n\nUnlike the Terms & Conditions API, this endpoint performs basic signature\ncapture with no agreement display or signature archival.\n\nUnder the hood, signatures are captured in a proprietary vector format and\nmust be converted to a common raster format in order to be useful to most\napplications.  At a minimum, you must specify an image format using the\n`sigFormat` parameter.  Currently, JPG and PNG are supported.\n\nBy default, images are returned in the JSON response as hex encoded binary.\nYou can redirect the binary image output to a file using the `sigFile`\nparameter.\n\nYou can also scale the output image to your preferred width by\npassing in a `sigWidth` parameter.  The image will be scaled to that\nwidth, preserving the aspect ratio of the original image.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n\n    # File format for the signature image.\n    \"sigFormat\": blockchyp.SignatureFormat.PNG,\n\n    # Width of the signature image in pixels.\n    \"sigWidth\": 200,\n}\n\n# run the transaction.\nresponse = client.capture_signature(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### New Transaction Display\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API sends totals and line item level data to the terminal.\n\nAt a minimum, you should send total information as part of a display request,\nincluding `total`, `tax`, and `subtotal`.\n\nYou can also send line item level data and each line item can have a `description`,\n`qty`, `price`, and `extended` price.\n\nIf you fail to send an extended price, BlockChyp will multiply the `qty` by the\n`price`.  However, we strongly recommend you precalculate all the fields yourself\nto ensure consistency.  For example, your treatment of floating-point multiplication \nand rounding may differ slightly from BlockChyp's.\n\n**Discounts**\n\nYou have the option to show discounts on the display as individual line items\nwith negative values or you can associate discounts with a specific line item.\nYou can apply any number of discounts to an individual line item with a description\nand amount.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"transaction\": {\n        \"subtotal\": \"60.00\",\n        \"tax\": \"5.00\",\n        \"total\": \"65.00\",\n        \"items\": [\n            {\n                \"description\": \"Leki Trekking Poles\",\n                \"price\": \"35.00\",\n                \"quantity\": 2,\n                \"extended\": \"70.00\",\n                \"discounts\": [\n                    {\n                        \"description\": \"memberDiscount\",\n                        \"amount\": \"10.00\",\n                    },\n                ],\n            },\n        ],\n    },\n}\n\n# run the transaction.\nresponse = client.new_transaction_display(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Update Transaction Display\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nSimilar to *New Transaction Display*, this variant allows developers to update\nline item level data currently being displayed on the terminal.\n\nThis feature is designed for situations where you want to update the terminal display as\nitems are scanned.  You'll only have to send information to the\nterminal that's changed, which usually means the new line item and updated totals.\n\nIf the terminal is not in line item display mode and you invoke this endpoint,\nthe first invocation will behave like a *New Transaction Display* call.\n\nAt a minimum, you should send total information as part of a display request,\nincluding `total`, `tax`, and `subtotal`.\n\nYou can also send line item level data and each line item can have a `description`,\n`qty`, `price`, and `extended` price.\n\nIf you fail to send an extended price, BlockChyp will multiply the `qty` by the\n`price`.  However, we strongly recommend you precalculate all the fields yourself\nto ensure consistency.  For example, your treatment of floating-point multiplication and rounding\nmay differ slightly from BlockChyp's.\n\n**Discounts**\n\nYou have the option to show discounts on the display as individual line items\nwith negative values or you can associate discounts with a specific line item.\nYou can apply any number of discounts to an individual line item with a description\nand amount.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"transaction\": {\n        \"subtotal\": \"60.00\",\n        \"tax\": \"5.00\",\n        \"total\": \"65.00\",\n        \"items\": [\n            {\n                \"description\": \"Leki Trekking Poles\",\n                \"price\": \"35.00\",\n                \"quantity\": 2,\n                \"extended\": \"70.00\",\n                \"discounts\": [\n                    {\n                        \"description\": \"memberDiscount\",\n                        \"amount\": \"10.00\",\n                    },\n                ],\n            },\n        ],\n    },\n}\n\n# run the transaction.\nresponse = client.update_transaction_display(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Display Message\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API displays a message on the payment terminal.\n\nJust specify the target terminal and the message using the `message` parameter.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"message\": \"Thank you for your business.\",\n}\n\n# run the transaction.\nresponse = client.message(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Boolean Prompt\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API Pprompts the customer to answer a yes or no question.\n\nYou can specify the question or prompt with the `prompt` parameter and\nthe response is returned in the `response` field.\n\nThis can be used for a number of use cases including starting a loyalty enrollment\nworkflow or customer facing suggestive selling prompts.\n\n**Custom Captions**\n\nYou can optionally override the \"YES\" and \"NO\" button captions by\nusing the `yesCaption` and `noCaption` request parameters.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"prompt\": \"Would you like to become a member?\",\n    \"yesCaption\": \"Yes\",\n    \"noCaption\": \"No\",\n}\n\n# run the transaction.\nresponse = client.boolean_prompt(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Text Prompt\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API prompts the customer to enter numeric or alphanumeric data.\n\nDue to PCI rules, free-form prompts are not permitted when the response\ncould be any valid string.  The reason for this is that a malicious\ndeveloper (not you, of course) could use text prompts to ask the customer to\ninput a card number or PIN code.\n\nThis means that instead of providing a prompt, you provide a `promptType` instead.\n\nThe prompt types currently supported are listed below:\n\n* **phone**: Captures a phone number.\n* **email**: Captures an email address.\n* **first-name**: Captures a first name.\n* **last-name**: Captures a last name.\n* **customer-number**: Captures a customer number.\n* **rewards-number**: Captures a rewards number.\n\nYou can specify the prompt with the `promptType` parameter and\nthe response is returned in the `response` field.\n\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n\n    # Type of prompt. Can be 'email', 'phone', 'customer-number', or\n    # 'rewards-number'.\n    \"promptType\": blockchyp.PromptType.EMAIL,\n}\n\n# run the transaction.\nresponse = client.text_prompt(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### List Terminals\n\n\n\n* **API Credential Types:** Merchant & Partner\n* **Required Role:** Terminal Management\n\nThis API returns details about terminals associated with a merchant account.\n\nStatus and resource information is returned for all terminals along with a preview of the \ncurrent branding image displayed on the terminal\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n}\n\n# run the transaction.\nresponse = client.terminals(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Deactivate Terminal\n\n\n\n* **API Credential Types:** Merchant & Partner\n* **Required Role:** Terminal Management\n\nThis API deactivates a payment terminal.\n\nIf the terminal exists and is currently online, it will be removed from the merchant's \nterminal inventory.  The terminal will be remotely cleared and factory reset.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalId\": \"<TERMINAL ID>\",\n}\n\n# run the transaction.\nresponse = client.deactivate_terminal(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Activate Terminal\n\n\n\n* **API Credential Types:** Merchant & Partner\n* **Required Role:** Terminal Management\n\nThis API activates a payment terminal.\n\nIf successful, the payment terminal will restart, generate new encryption keys, and download any active\nbranding assets for the merchant account it's been added to.\n\nActivation requests require an activation code and a unique terminal name.  All terminal names must be unique across\na merchant account.\n\nOptional Parameters\n\n* **merchantId:** For partner scoped API credentials, a merchant ID is required.  For merchant scoped API credentials, the merchant ID is implicit and cannot be overridden.\n* **cloudRelay:** Activates the terminal in cloud relay mode.\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n    \"activationCode\": \"<ACTIVATION CODE>\",\n}\n\n# run the transaction.\nresponse = client.activate_terminal(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Reboot Terminal\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API reboots the terminal.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.reboot(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n### Terms & Conditions Endpoints\n\n\nDevelopers can use BlockChyp to display and capture acceptance of contracts or agreements related to transactions.\nThese agreements can be any long-form contract ranging from rental agreements to HIPPA disclosures.\n\nThere are two basic approaches to terms and conditions capture.  Merchants can store contract templates in \nBlockChyp or they can send the full agreement text as part of every API call.  The right approach will largely \ndepend on whether or not the system being integrated with BlockChyp already has a mechanism for organizing \nand managing agreements.  For systems that already have this feature built in, it's probably not necessary \nto use Terms and Conditions.\n\nWhen agreements are displayed on a terminal, the consumer can scroll through and read the entire agreement,\nand provide a signature.  Results are returned as part of the API response, but BlockChyp also stores a \nrecord of the agreement including the signature image, timestamp, and the full text of the agreement that was \nagreed to.\n\nThe Terms and Conditions Log APIs can be used to search and retrieve acceptance records.  Those records\ncan also be linked to a transaction if a transaction id is provided with the original API request.\n\n\n\n#### Terms & Conditions Capture\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Terms & Conditions Management\n\nThis API allows you to prompt a customer to accept a legal agreement on the terminal\nand (usually) capture their signature.\n\nContent for the agreement can be specified in two ways.  You can reference a\npreviously configured T&C template or pass in the full agreement text with every request.\n\n**Using Templates**\n\nIf your application doesn't keep track of agreements you can leverage BlockChyp's\ntemplate system.  You can create any number of T&C Templates in the merchant dashboard\nand pass in the `tcAlias` flag to specify which one should display.\n\n**Raw Content**\n\nIf your system keeps track of the agreement language or executes complicated merging\nand rendering logic, you can bypass our template system and pass in the full text with\nevery transaction.  Use `tcName` to pass in the agreement name and `tcContent` to\npass in the contract text.  Note that only plain text is supported.\n\n**Bypassing Signatures**\n\nSignature images are captured by default.  If for some reason this doesn't fit your\nuse case and you'd like to capture acceptance without actually capturing a signature image, set\nthe `disableSignature` flag in the request.\n\n**Terms & Conditions Log**\n\nEvery time a user accepts an agreement on the terminal, the signature image (if captured),\nwill be uploaded to the gateway.  The image will also be added to the log along with the full text of the\nagreement.  This preserves the historical record in the event that standard agreements\nor templates change over time.\n\n**Associating Agreements with Transactions**\n\nTo associate a Terms & Conditions log entry with a transaction, just pass in the\nTransaction ID or Transaction Ref for the associated transaction.\n\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n\n    # Alias for a Terms and Conditions template configured in the BlockChyp\n    # dashboard.\n    \"tcAlias\": \"hippa\",\n\n    # Name of the contract or document if not using an alias.\n    \"tcName\": \"HIPPA Disclosure\",\n\n    # Full text of the contract or disclosure if not using an alias.\n    \"tcContent\": \"Full contract text\",\n\n    # File format for the signature image.\n    \"sigFormat\": blockchyp.SignatureFormat.PNG,\n\n    # Width of the signature image in pixels.\n    \"sigWidth\": 200,\n\n    # Whether or not a signature is required. Defaults to true.\n    \"sigRequired\": True,\n}\n\n# run the transaction.\nresponse = client.terms_and_conditions(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### List Templates\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Terms & Conditions Management\n\nThis API returns all terms and conditions templates associated with a merchant account.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n}\n\n# run the transaction.\nresponse = client.tc_templates(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Get Template\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Terms & Conditions Management\n\nThis API returns as single terms and conditions template.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"templateId\": \"<TEMPLATE ID>\",\n}\n\n# run the transaction.\nresponse = client.tc_template(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Update Template\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Terms & Conditions Management\n\nThis API updates or creates a terms and conditions template.\n\nTerms and conditions templates are fairly simple and essentially consist of a name, content, and alias.\n\nThe name is the caption that will be displayed at the top of the screen.  The alias is a code or short\ndescription that will be used in subsequence API calls to refer to the template.\n\nContent is the full text of the contract or agreement.  Currently, no special formatting or\nmerge behavior is supported.  Only plain text is supported.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"alias\": \"HIPPA\",\n    \"name\": \"HIPPA Disclosure\",\n    \"content\": \"Lorem ipsum dolor sit amet.\",\n}\n\n# run the transaction.\nresponse = client.tc_update_template(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Template\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Terms & Conditions Management\n\nThis API deletes a terms and conditions template.\n\nIf a template is deleted, its alias can be reused and any previous Terms & Conditions log entry\nderived from the template being deleted is fully preserved since log entries always include\na complete independent copy of the agreement text.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"templateId\": \"<TEMPLATE ID>\",\n}\n\n# run the transaction.\nresponse = client.tc_delete_template(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terms & Conditions Log\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Terms & Conditions Management\n\nThis API allows developers to search and sort through terms and conditions log entries.\n\nThe default API call with no parameters will return the last 250 log entries in descending order.\n\nOptional parameters can be used to filter and query the data set.\n\n* **transactionId:** If provided, returns only those log entries associated with a specific transactions.  Paging and date filters are ignored if this parameter is used.\n* **maxResults:** The max number of results to return in a single page.  Defaults to 250 and 250 is the maximum value.\n* **startIndex** The zero based start index of results within the full result set to return.  Used to advance pages.  For example, if the page size is 10 and you wish to return the second page of results, send a startIndex of 10. \n* **startDate**: An optional start date for results provided as an ISO 8601 timestamp. (e.g. 2022-05-24T13:51:38+00:00)\n* **endDate**: An optional end date for results provided as an ISO 8601 timestamp. (e.g. 2022-05-24T13:51:38+00:00)\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"logEntryId\": \"<LOG ENTRY ID>\",\n}\n\n# run the transaction.\nresponse = client.tc_log(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terms & Conditions Details\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Terms & Conditions Management\n\nThis API returns details for a single terms and conditions log entry.  The `logEntryId` of the record to be returned is the only required parameter.\n\nThe signature image is returned as Base 64 encoded binary in the image format specified by the `sigFormat` field. \nThe default format is PNG.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"logEntryId\": \"<ENTRY ID>\",\n}\n\n# run the transaction.\nresponse = client.tc_entry(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n### Token Management\n\n\nBlockChyp supports saved payments and recurring payments through the use of tokens.  Tokens can be created\nvia the Enroll API or the web tokenizer.  Once created, these tokens can be used for subsequent payments \nor associated with customer records as saved payment methods.\n\nTokens are limited to a single merchant by default, but can be shared across an organization for multi-location \nmerchants by special arrangement with BlockChyp.  Contact your BlockChyp rep to setup token sharing.\n\n\n\n#### Enroll\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API allows you to tokenize and enroll a payment method in the token\nvault.  You can also pass in customer information and associate the\npayment method with a customer record.\n\nA token is returned in the response that can be used in subsequent charge,\npreauth, and refund transactions.\n\n**Gift Cards and EBT**\n\nGift Cards and EBT cards cannot be tokenized.\n\n**E-Commerce Tokens**\n\nThe tokens returned by the enroll API and the e-commerce web tokenizer\nare the same tokens and can be used interchangeably.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.enroll(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Token Metadata\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API retrieves status and metadata information about a token, \nincluding any links to customer records.  \n\nThis will also return any customer records related to the card\nbehind the token.  If the underlying card has been tokenized\nmultiple times, all customers related to the card will be returned,\neven if those customer associations are related to other tokens.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"token\": \"<TOKEN>\",\n}\n\n# run the transaction.\nresponse = client.token_metadata(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Link Token\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API links a payment token with a customer record.  Usually this would only be needed\nto reverse a previous unlink operation.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"token\": \"<TOKEN>\",\n    \"customerId\": \"<CUSTOMER ID>\",\n}\n\n# run the transaction.\nresponse = client.link_token(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Unlink Token\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API removes a payment token link from a customer record.\n\nThis will remove links between the customer record and all tokens\nfor the same underlying card.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"token\": \"<TOKEN>\",\n    \"customerId\": \"<CUSTOMER ID>\",\n}\n\n# run the transaction.\nresponse = client.unlink_token(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Token\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API deletes a payment token from the gateway.  Tokens are automatically deleted if they have not been used\nfor a year.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"token\": \"<TOKEN>\",\n}\n\n# run the transaction.\nresponse = client.delete_token(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n### Customer Endpoints\n\n\nThese APIs allow developers to create and manage customer records in BlockChyp.  Developers who wish to use\nBlockChyp for tokenized recurring payments can use tokens directly if they have their own customer management\nsystem.  However, BlockChyp provides additional tools for managing customers and keeping track of a customer's saved\npayment tokens.\n\nIn addition, if customer features are used, BlockChyp can detect a payment method associated with an existing\ncustomer, and return customer data with payment transactions.  This can be used as a passive method to detect\nrepeat customers.\n\n\n\n#### Update Customer\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API adds or updates a customer record.\n\nIf you pass in customer information including `firstName`, `lastName`, `email`,\nor `sms` without any Customer ID or Customer Ref, a new record will\nbe created.\n\nIf you pass in `customerRef` and `customerId`, the customer record will be updated\nif it exists.\n\n**Customer Ref**\n\nThe `customerRef` field is optional, but highly recommended as this allows you\nto use your own customer identifiers instead of storing BlockChyp's Customer IDs\nin your systems.\n\n**Creating Customer Records With Payment Transactions**\n\nIf you have customer information available at the time a payment transaction is\nexecuted, you can pass all the same customer information directly into a payment transaction.  BlockChyp\nwill create a customer record at the same time payment is captured.  The advantage of this approach is\nthat the customer's payment card is automatically associated with the customer record in a single step.\nIf the customer uses the payment card in the future, the customer data will automatically\nbe returned.  You won't need to ask the customer to provide any additional information.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"customer\": {\n        \"id\": \"<CUSTOMER ID>\",\n        \"customerRef\": \"Customer reference string\",\n        \"firstName\": \"FirstName\",\n        \"lastName\": \"LastName\",\n        \"companyName\": \"Company Name\",\n        \"emailAddress\": \"notifications@blockchypteam.m8r.co\",\n        \"smsNumber\": \"(123) 123-1231\",\n    },\n}\n\n# run the transaction.\nresponse = client.update_customer(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Retrieve Customer\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nWith this API, you can retrieve detailed information about a customer record, including saved payment\nmethods if available.\n\nCustomers can be looked up by `customerId` or `customerRef`.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"customerId\": \"<CUSTOMER ID>\",\n}\n\n# run the transaction.\nresponse = client.customer(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Search Customer\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API searches the customer database and returns matching results.\n\nUse `query` to pass in a search string and the system will return all results whose\nfirst or last names contain the query string.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"query\": \"(123) 123-1234\",\n}\n\n# run the transaction.\nresponse = client.customer_search(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Customer\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThis API deletes a customer record.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"customerId\": \"<CUSTOMER ID>\",\n}\n\n# run the transaction.\nresponse = client.delete_customer(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n### Survey Reference\n\n\nThese APIs are used to work with post-transaction surveys and survey data.\n\nMerchants can optionally configure scaled (1-5) or yes/no questions that can be presented to consumers\nafter every approved Charge and Preauth transaction.  Surveys do not require any custom programming and\nmerchants can simply configure them without the point-of-sale system needing any additional customization.\n\nHowever, these APIs allow point-of-sale or third-party system developers to integrate survey question configuration\nor result visualization into their own systems.\n\n\n\n#### List Questions\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Survey Management\n\nThis API returns all survey questions in the order in which they would be presented on the terminal.\n\nAll questions are returned, whether enabled or disabled.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n}\n\n# run the transaction.\nresponse = client.survey_questions(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Question Details\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Survey Management\n\nThis API returns a single survey question with response data.  `questionId` is required.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"questionId\": \"<QUESTION ID>\",\n}\n\n# run the transaction.\nresponse = client.survey_question(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Update Question\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Survey Management\n\nThis API updates or creates survey questions.  `questionText` and `questionType` are required \nfields.  The following values are valid for `questionType`.\n\n* **yes_no:** Use for simple yes or no questions.\n* **scaled:** Displays the question with buttons that allow the customer to respond with values from 1 through 5.\n\nQuestions are disabled by default.  Pass in `enabled` to enable a question.\n\nThe `ordinal` field is used to control the sequence of questions when multiple questions are enabled.  We recommend keeping\nthe number of questions minimal.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"id\": \"<QUESTION ID>\",\n    \"ordinal\": 1,\n    \"questionText\": \"Would you shop here again?\",\n    \"questionType\": \"yes_no\",\n    \"enabled\": True,\n}\n\n# run the transaction.\nresponse = client.update_survey_question(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Question\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Survey Management\n\nThis API deletes a survey question. `questionId` is a required parameter.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"questionId\": \"<QUESTION ID>\",\n}\n\n# run the transaction.\nresponse = client.delete_survey_question(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Survey Results\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Survey Management\n\nThis API returns survey results for a single question.\n\nThe results returned include the response rate, which is the percentage of transactions after which\nthe consumer provided an answer.\n\nThe `responses` array breaks down the results by answer, providing the total number of responses,\nthe answer's percentage of the total, and the average transaction amount associated with a specific\nanswer.\n\nBy default, all results based on all responses are returned.  However, developers may optionally provide \n`startDate` and `endDate` parameters to return only responses provided between certain dates.\n\n`startDate` and `endDate` can be provided in MM/DD/YYYY or YYYY-MM-DD format.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"questionId\": \"<QUESTION ID>\",\n}\n\n# run the transaction.\nresponse = client.survey_results(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n### Media and Branding Control\n\n\nBlockChyp has a sophisticated terminal media and branding control platform.  Terminals can be configured to\ndisplay logos, images, videos, and slide shows when a terminal is idle.  Branding assets can be configured\nat the partner, organization, and merchant level with fine-grained hour-by-hour schedules, if desired. \n\nConceptually, all branding and media start with the media library.  Merchants, Partners, and Organizations can\nupload images or video and build branding assets from uploaded media.\n\nSlide shows can combine images from the media library into a timed loop of repeating images.\n\nBranding Assets can then be used to combine media or slide shows with priority and timing rules to create what \nwe call the Terminal Branding Stack.\n\nWe call a group of branding assets the *Terminal Branding Stack* because there are implicit rules about which \nbranding assets take priority. For example, a merchant with no branding assets configured will inherit the \nbranding rules from any organization to which the merchant may belong.  If the merchant doesn't belong to an organization \nor the organization has no branding rules configured, then the system will defer to branding defaults established \nby the point-of-sale or software partner that owns the merchant.\n\nThis feature enables partners and organizations (multi-store operators and large national chains) to configure branding\nfor potentially thousands of terminals from a single interface.\n\nTerminal Branding can also be configured at the individual terminal level and a merchant's terminal fleet \ncan be broken into groups and branding configured at the group level.  Branding configured at the terminal\nlevel will always override branding from any higher level group.\n\nThe order of priority for the Terminal Branding Stack is given below.\n\n* Terminal\n* Terminal Group\n* Merchant\n* Organization (Region, Chain, etc)\n* Partner\n* BlockChyp Default Logo\n\n\n\n#### Media Library\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API returns the entire media library associated with the API Credentials (Merchant, Partner, or Organization).  The media library results will include the ID used\nto reference a media asset in slide shows and branding assets along with the full file url and thumbnail.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n}\n\n# run the transaction.\nresponse = client.media(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Upload Media\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API supports media library uploads.  The operation of this API works slightly differently depending \non the SDK platform.  In all cases, the intent is to allow the file's binary to be passed into the SDK using \nthe lowest level I/O primitive possible in order to support situations where developers aren't working\nwith literal files.  It might be (and usually is) more convenient to work with buffers, raw bytes, or streams.\n\nFor example, the Go implementation accepts an `io.Reader` and the Java implementation accepts a\n`java.io.InputStream`.  The CLI does accept a literal File URL via the `-file` command line parameter.\n\nThe following file formats are accepted as valid uploads:\n\n* .png\n* .jpg\n* .jpeg\n* .gif\n* .mov\n* .mpg\n* .mp4\n* .mpeg\n\nThe UploadMetadata object allows developers to pass additional metadata about the upload including\n`fileName`, `fileSize`, and `uploadId`.\n\nNone of these values are required, but providing them can unlock some additional functionality relating to \nmedia uploads.  `fileName` will be used to record the original file name in the media library.  `fileSize` \nand `uploadId` are used to support upload status tracking, which is especially useful for large video file\nuploads.  \n\nThe `fileSize` should be the file's full size in bytes.  \n\nThe `uploadId` value can be any random string.  This is the value you'll use to check the status of an upload\nvia the Upload Status API.  This API will return information needed to drive progress feedback on uploads and \nreturn video transcoding information.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"fileName\": \"aviato.png\",\n    \"fileSize\": 18843,\n    \"uploadId\": \"<RANDOM ID>\",\n}\n\n# run the transaction.\nf = open(\"aviato.png\", \"rb\")\ncontent = f.read()\nresponse = client.upload_media(request, content)\nf.close()\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Upload Status\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API returns status and progress information about in progress or recently completed uploads.\n\nBefore calling this API, developers must first start a file upload with `fileSize` and `uploadId` parameters.\n\nThe data structure returned will include the file size, number of bytes uploaded, a narrative status\nand flags indicating whether or not the upload is complete or post upload processing is in progress.  \nIf the upload is completed, the ID assigned to the media asset and a link to the thumbnail image will \nalso be returned.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"uploadId\": \"<UPLOAD ID>\",\n}\n\n# run the transaction.\nresponse = client.upload_status(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Get Media Asset\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API returns a detailed media asset.  The data returned includes the exact same media information returned\nby the full media library endpoint, including fully qualified URLs pointing to the original media file\nand the thumbnail.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"mediaId\": \"<MEDIA ASSET ID>\",\n}\n\n# run the transaction.\nresponse = client.media_asset(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Media Asset\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API deletes a media asset.  Note that a media asset cannot be deleted if it is in use in a slide \nshow or in the terminal branding stack.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"mediaId\": \"<MEDIA ASSET ID>\",\n}\n\n# run the transaction.\nresponse = client.delete_media_asset(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### List Slide Shows\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API returns all slide shows.  \n\nNote that slide level data is not returned with this API.   Use the Get Slide Show API to get slide level detail.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n}\n\n# run the transaction.\nresponse = client.slide_shows(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Get Slide Show\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API returns a single slide show.  Slide level detail is returned with the fully qualified thumbnail URL\nfor each slide.\n\n`slideShowId` is the only required parameter.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"slideShowId\": \"<SLIDE SHOW ID>\",\n}\n\n# run the transaction.\nresponse = client.slide_show(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Update Slide Show\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API updates or creates a slide show.  `name`, `delay` and `slides` are required.\n\nThe slides property is an array of slides.  The Slide data structure has ordinal and thumbnail URL fields, \nbut these are not required when updating or creating a slide show.  Only the `mediaId` field is required\nwhen updating or creating a slide show.\n\nWhen using the CLI, slides can be specified by sending a comma-separated list of media ids via the `-mediaId`\nparameter.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"name\": \"Test Slide Show\",\n    \"delay\": 5,\n    \"slides\": [\n        {\n            \"mediaId\": \"<MEDIA ID>\",\n        },\n    ],\n}\n\n# run the transaction.\nresponse = client.update_slide_show(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Slide Show\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API deletes a slide show  `slideShowId` is the only required parameter.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"slideShowId\": \"<SLIDE SHOW ID>\",\n}\n\n# run the transaction.\nresponse = client.delete_slide_show(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terminal Branding\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API returns the full branding stack for a given API scope in the order of priority.\n\nConsumers of this API should pay special attention to the `editable` field.  This field indicates whether or\nnot a branding asset is read-only from the perspective of a particular API Credential scope.\n\nThe `thumbnail` and `previewImage` attributes can be used to support building user interfaces for\nmanaging the branding stack. `previewImage` differs from `thumbnail` in that the preview image is \nintended to show how an asset would actually look when displayed on the terminal.\n\n`activeAsset` returns the asset that is currently visible on the terminal.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n}\n\n# run the transaction.\nresponse = client.terminal_branding(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Update Branding Asset\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API updates or creates a single Branding Asset.\n\nBranding Assets represent a single element of the terminal branding stack.  A Branding Asset can be a video or image,\nin which case a `mediaId` referencing an asset from the media library must be provided.  A Branding Asset can also\nbe a slide show, in which case `slideShowId` must be provided.  Branding Assets must have a valid `mediaId` or a valid\n`slideShowId`.  The optional `notes` field can be used to provide short notes and descriptions for a Branding asset.\n\n**Visibility Flags**\n\nIn order for a Branding Asset to be visible on a terminal, the `enabled` flag must be set to true and the `preview`\nmust be turned off.  `preview` is intended to show how a proposed Branding Asset will behave\nwithout pushing it to live terminals.  The Publish button in the BlockChyp merchant portal effectively turns\nthe `preview` setting off.\n\n**Order and Sequencing**\n\nThe `ordinal` field is used to specify priority for a Branding Asset.  Assets with a higher value for `ordinal`\nwill be prioritized first.\n\n**Padding Images**\n\nFor plain images, it's sometimes helpful to add margins to images.  This is especially helpful with logos\nor any image file rendered without any white space or margins between the image content and edge of the image file.\nSet the `padded` flag to true if you'd like BlockChyp to auto apply margins when displaying an image on \nthe terminal.\n\n**Scheduling**\n\nBy default, a Branding Asset placed on top of the Branding Stack, if it's `enabled` and not in `preview`\nmode, will immediately be displayed on the terminal round the clock.\n\nBranding Assets can be scheduled with effective start and stop dates for seasonal campaigns.  These assets can\nalso be scheduled for specific times of day and specific days of the week.\n\n* **startDate:** Optional date after which the Branding Asset is eligible for display.  Can be provided in MM/DD/YYYY or YYYY-MM-DD format.\n* **endDate:** Optional date before which the Branding Asset is eligible for display.  Can be provided in MM/DD/YYYY or YYYY-MM-DD format.\n* **startTime** Optional time of day after which the branding asset is eligible for display.  Must be provided in 24 hour time: HH:MM.\n* **endTime** Optional time of day before which the branding asset is eligible for display.  Must be provided in 24 hour time format: HH:MM\n* **daysOfWeek** For branding assets that should only be displayed on certain days of the week, this field is an array of day of the week constants. (Constants vary by SDK platform.)\n\n**Read Only Fields**\n\nThe Branding Asset data structure has a number of read only fields that are returned when Branding Assets are \nretrieved.  But these fields are ignored when you try to send them as part of an update.  These are derived\nor calculated fields and are helpful for displaying branding assets in a management user interface, but \ncannot be changed via an API call.\n\nThese fields are:\n\n* ownerId\n* merchantId\n* organizationId\n* partnerId\n* userId\n* userName\n* thumbnail\n* lastModified\n* editable\n* assetType\n* ownerType\n* ownerTypeCaption\n* previewImage\n* narrativeEffectiveDates\n* narrativeDisplayPeriod\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"mediaId\": \"<MEDIA ID>\",\n    \"padded\": True,\n    \"ordinal\": 10,\n    \"startDate\": \"01/06/2021\",\n    \"startTime\": \"14:00\",\n    \"endDate\": \"11/05/2024\",\n    \"endTime\": \"16:00\",\n    \"notes\": \"Test Branding Asset\",\n    \"preview\": False,\n    \"enabled\": True,\n}\n\n# run the transaction.\nresponse = client.update_branding_asset(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Branding Asset\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Media Management\n\nThis API deletes a Branding Asset from the branding stack.\n\nNote that deleting a Branding Asset does not delete the underlying media from the media library or slide\nshow from the slide show library.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"assetId\": \"<BRANDING ASSET ID>\",\n}\n\n# run the transaction.\nresponse = client.delete_branding_asset(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n### Merchant Management\n\n\nThese APIs allow partners to manage and configure their merchant portfolios.\n\nUse of these APIs (other than the Merchant Profile API) requires partner scoped API credentials\nwith special roles and permissions that may require a special arrangement with BlockChyp.\n\nFor example, Partners usually can't board merchants directly, but must board merchants using\nthe standard underwriting process via offer codes and invitations.\n\n\n\n#### Merchant Profile\n\n\n\n* **API Credential Types:** Merchant\n* **Required Role:** Payment API Access\n\nThe API returns detailed metadata about the merchant's configuration, including\nbasic identity information, terminal settings, store and forward settings,\nand bank account information for merchants that support split settlement.\n\nSome of these fields can be updated via the Update Merchant API, but many of these\nfields are controlled by underwriting and cannot be altered outside of the \nunderwriting and risk processes.\n\n**Merchant Descriptive Fields**\n\nThe following fields are basic descriptive fields that can be used to describe and identify merchants.\n\n* **companyName:** The merchant's official corporate entity name.\n* **dbaName:** The business's DBA (doing business as) name.\n* **contactName:** Name of the merchant's primary control contact.\n* **contactNumber:** Primary control contact's phone number.\n* **locationName:** Optional location name for multi-location operators.\n* **storeNumber:** Optional store number for multi-location operators.\n* **partnerRef:** Optional reference number partners can add to a merchant record.  Usually the partner's own identifier for the merchant.\n* **timeZone:** Unix style local time zone for the merchant. Example: America/New_York.\n* **publicKey:** Read only field.  The merchant's blockchain public key.  Generated and assigned when a merchant account is first created.\n* **billingAddress:** Address for billing and written correspondence.\n* **shippingAddress:** Physical shipping address. Usually the actual street address of the business.\n* **status:** Current status of the merchant account.\n* **tcDisabled:** Disables all terms and conditions features in the merchant dashboard.  Used to hide the feature if a partner has not chosen to support it.\n* **gatewayOnly:** Indicates that a merchant has been boarded in gateway only mode.  Not common.\n\n**Batch and Terminal Settings**\n\nThe following fields are used to control batch closure and high level terminal configuration.\n\n* **batchCloseTime:** Time in 24 hour HH:MM format when batches will automatically close in the merchant's local time.  Defaults to 3 AM.\n* **autoBatchClose:** Flag the determines whether or not batches will automatically close.  Defaults to true.\n* **disableBatchEmails:** Flag that optionally turns off automatic batch closure notification emails.\n* **cooldownTimeout:** The amount of time in seconds after a transactions for which the transaction response is displayed on the terminal.  After the cooldown period elapses, the terminal will revert to the idle state and display the currently active terminal branding.\n* **surveyTimeout:** The amount of time in seconds a survey question should be displayed on a terminal before reverting to the idle screen.\n* **pinEnabled:** Enables pin code entry for debit cards, EBT cards, and EMV cards with pin CVMs.  Will be ignored if terminals are not injected with the proper encryption keys.\n* **pinBypassEnabled:** Enable pin bypass for debit transactions.\n* **cashBackEnabled:** Enables cash back for debit transactions.\n* **cashbackPresets:** An array of four default values for cashback amounts when cashback is enabled.\n* **storeAndForwardEnabled:** Enables automatic store and forward during network outages.  Store and Forward does not support cash back, refunds, EBT, or gift card transactions.\n* **storeAndForwardFloorLimit:** Maximum dollar value of a store and forward transaction.\n* **ebtEnabled:** Enables EBT (SNAP) on BlockChyp terminals.\n* **tipEnabled:** Enables tips entry on the terminal.\n* **promptForTip:** If true, the terminal will always prompt for a tip, even if the API call does not request a tip prompt.\n* **tipDefaults:** An array of exactly three percentages that will be used to calculate default tip amounts.\n* **giftCardsDisabled:** Disables BlockChyp gift cards.  Normally only used if the merchant is using an alternate gift card system.\n* **digitalSignaturesEnabled:** Enables electronic signature capture for mag stripe cards and EMV cards with Signature CVMs.\n* **digitalSignatureReversal:** Will cause a transaction to auto-reverse if the consumer refuses to provide a signature.\n* **manualEntryEnabled:** Enables manual card entry.\n* **manualEntryPromptZip:** Requires zip code based address verification for manual card entry.\n* **manualEntryPromptStreetNumber:** Requires street/address based verification for manual card entry.\n\n**Card Brand and Transaction Settings**\n\n* **freeRangeRefundsEnabled:** Enables direct refunds that do not reference a previous transaction.\n* **partialAuthEnabled:** Indicates that partial authorizations (usually for gift card support) are enabled.\n* **splitBankAccountsEnabled:** Used for law firm merchants only.\n* **contactlessEmv:** Enables contactless/tap transactions on a terminal.  Defaults to true.\n* **visa:** Enables Visa transactions.\n* **masterCard:** Enables MasterCard transactions.\n* **amex:** Enables American Express transactions.\n* **discover:** Enables Discover transactions.\n* **jcb:** Enables JCB (Japan Card Bureau) transactions.\n* **unionPay:** Enables China UnionPay transactions.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n}\n\n# run the transaction.\nresponse = client.merchant_profile(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Get Merchants\n\n\n\n* **API Credential Types:** Partner & Organization\n* **Required Role:** Merchant Management\n\nThis is a partner or organization level API that can be used to return the merchant portfolio.\n\nLive merchants are returned by default.  Use the `test` flag to return only test merchants.  The \nresults returned include detailed settings including underwriting controlled flags.\n\nA maximum of 250 merchants are returned by default.  For large merchant portfolios, the `maxResults`\nand `startIndex` field can be used to reduce the page size and page through multiple pages of results.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n}\n\n# run the transaction.\nresponse = client.get_merchants(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Update Merchant\n\n\n\n* **API Credential Types:** Merchant, Partner, & Organization\n* **Required Role:** Merchant Management\n\nThis API can be used to update or create merchant accounts.\n\nMerchant scoped API credentials can be used to update merchant account settings.\n\nPartner scoped API credentials can be used to update merchants, create new test \nmerchants or board new gateway merchants.\n\n**Merchant Descriptive Fields**\n\nThe following fields are basic descriptive fields that can be used to describe and identify merchants.\n\n* **companyName:** The merchant's official corporate entity name.\n* **dbaName:** The businesses DBA (doing business as) name.\n* **contactName:** Name of the merchant's primary control contact.\n* **contactNumber:** Primary control contact's phone number.\n* **locationName:** Optional location name for multi location operators.\n* **storeNumber:** Optional store number for multi location operators.\n* **partnerRef:** Optional reference number partners can add to a merchant record.  Usually the partner's own identifier for the merchant.\n* **timeZone:** Unix style local time zone for the merchant. Example: America/New_York.\n* **publicKey:** Read only field.  The merchant's blockchain public key.  Generated and assigned when a merchant account is first created.\n* **billingAddress:** Address for billing and written correspondence.\n* **shippingAddress:** Physical shipping address. Usually the actual street address of the business.\n* **status:** Current status of the merchant account.\n* **tcDisabled:** Disables all terms and conditions features in the merchant dashboard.  Used to hide the feature if a partner has not chosen to support it.\n* **gatewayOnly:** Indicates that a merchant has been boarded in gateway only mode.  Not common.\n\n**Batch and Terminal Settings**\n\nThe following fields are used to control batch closure and high level terminal configuration.\n\n* **batchCloseTime:** Time in 24 hour HH:MM format when batches will automatically close in the merchant's local time.  Defaults to 3 AM.\n* **autoBatchClose:** Flag the determines whether or not batches will automatically close.  Defaults to true.\n* **disableBatchEmails:** Flag that optionally turns off automatic batch closure notification emails.\n* **cooldownTimeout:** The amount of time in seconds after a transactions for which the transaction response is displayed on the terminal.  After the cooldown period elapses, the terminal will revert to the idle state and display the currently active terminal branding.\n* **surveyTimeout:** The amount of time in seconds a survey question should be displayed on a terminal before reverting to the idle screen.\n* **pinEnabled:** Enables pin code entry for debit cards, EBT cards, and EMV cards with pin CVMs.  Will be ignored if terminals are not injected with the proper encryption keys.\n* **pinBypassEnabled:** Enable pin bypass for debit transactions.\n* **cashBackEnabled:** Enables cash back for debit transactions.\n* **cashbackPresets:** An array of four default values for cashback amounts when cashback is enabled.\n* **storeAndForwardEnabled:** Enables automatic store and forward during network outages.  Store and Forward does not support cash back, refunds, EBT, or gift card transactions.\n* **storeAndForwardFloorLimit:** Maximum dollar value of a store and forward transaction.\n* **ebtEnabled:** Enables EBT (SNAP) on BlockChyp terminals.\n* **tipEnabled:** Enables tips entry on the terminal.\n* **promptForTip:** If true, the terminal will always prompt for a tip, even if the API call does not request a tip prompt.\n* **tipDefaults:** An array of exactly three percentages that will be used to calculate default tip amounts.\n* **giftCardsDisabled:** Disables BlockChyp gift cards.  Normally only used if the merchant is using an alternate gift card system.\n* **digitalSignaturesEnabled:** Enables electronic signature capture for mag stripe cards and EMV cards with Signature CVMs.\n* **digitalSignatureReversal:** Will cause a transaction to auto-reverse if the consumer refuses to provide a signature.\n* **manualEntryEnabled:** Enables manual card entry.\n* **manualEntryPromptZip:** Requires zip code based address verification for manual card entry.\n* **manualEntryPromptStreetNumber:** Requires street/address based verification for manual card entry.\n\n**Card Brand and Transaction Settings**\n\n* **freeRangeRefundsEnabled:** Enables direct refunds that do not reference a previous transaction.\n* **partialAuthEnabled:** Indicates that partial authorizations (usually for gift card support) are enabled.\n* **splitBankAccountsEnabled:** Used for law firm merchants only.\n* **contactlessEmv:** Enables contactless/tap transactions on a terminal.  Defaults to true.\n* **visa:** Enables Visa transactions.\n* **masterCard:** Enables MasterCard transactions.\n* **amex:** Enables American Express transactions.\n* **discover:** Enables Discover transactions.\n* **jcb:** Enables JCB (Japan Card Bureau) transactions.\n* **unionPay:** Enables China UnionPay transactions.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"merchantId\": \"<MERCHANT ID>\",\n    \"test\": True,\n    \"dbaName\": \"Test Merchant\",\n    \"companyName\": \"Test Merchant\",\n    \"billingAddress\": {\n        \"address1\": \"1060 West Addison\",\n        \"city\": \"Chicago\",\n        \"stateOrProvince\": \"IL\",\n        \"postalCode\": \"60613\",\n    },\n}\n\n# run the transaction.\nresponse = client.update_merchant(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Merchant Users\n\n\n\n* **API Credential Types:** Partner & Organization\n* **Required Role:** Merchant Management\n\nThis API returns all users and pending invites associated with a merchant account including any assigned role codes.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"merchantId\": \"<MERCHANT ID>\",\n}\n\n# run the transaction.\nresponse = client.merchant_users(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Invite Merchant User\n\n\n\n* **API Credential Types:** Partner & Organization\n* **Required Role:** Merchant Management\n\nInvites a new user to join a merchant account.  `email`, `firstName`, and `lastName` are required.\n\nThe user will be sent an invite email with steps for creating a BlockChyp account and linking it to\na merchant account.  If the user already has a BlockChyp user account, the new user signup wil be skipped\nand the existing user account will be linked to the merchant account.\n\nDevelopers can optionally restrict the user's access level by sending one or more role codes.\nOtherwise, the user will be given the default merchant user role. (STDMERCHANT)\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"email\": \"Email address for the invite\",\n}\n\n# run the transaction.\nresponse = client.invite_merchant_user(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Add Test Merchant\n\n\n\n* **API Credential Types:** Partner\n* **Required Role:** Merchant Management\n\nThis is a partner level API that can be used to create test merchant accounts.  This creates\na basic test merchant with default settings.\n\nSettings can be changed by using the Update Merchant API.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"dbaName\": \"DBA Name\",\n    \"companyName\": \"Corporate Entity Name\",\n}\n\n# run the transaction.\nresponse = client.add_test_merchant(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Delete Test Merchant\n\n\n\n* **API Credential Types:** Partner\n* **Required Role:** Merchant Management\n\nThis partner API can be used to delete unused test merchant accounts. `merchantId` is a required parameter.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"merchantId\": \"<MERCHANT ID>\",\n}\n\n# run the transaction.\nresponse = client.delete_test_merchant(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n\n\n\n\n## Running Integration Tests\n\nIf you'd like to run the integration tests, create a new file on your system\ncalled `sdk-itest-config.json` with the API credentials you'll be using as\nshown in the example below.\n\n```\n{\n \"gatewayHost\": \"https://api.blockchyp.com\",\n \"testGatewayHost\": \"https://test.blockchyp.com\",\n \"apiKey\": \"PZZNEFK7HFULCB3HTLA7HRQDJU\",\n \"bearerToken\": \"QUJCHIKNXOMSPGQ4QLT2UJX5DI\",\n \"signingKey\": \"f88a72d8bc0965f193abc7006bbffa240663c10e4d1dc3ba2f81e0ca10d359f5\"\n}\n```\n\nThis file can be located in a few different places, but is usually located\nat `<USER_HOME>/.config/blockchyp/sdk-itest-config.json`. All BlockChyp SDKs\nuse the same configuration file.\n\nTo run the integration test suite via `make`, type the following command:\n\n`make integration`\n\n[BlockChyp]: https://www.blockchyp.com\n\n## Contributions\n\nBlockChyp welcomes contributions from the open source community, but bear in mind\nthat this repository has been generated by our internal SDK Generator tool. If\nwe choose to accept a PR or contribution, your code will be moved into our SDK\nGenerator project, which is a private repository.\n\n## License\n\nCopyright BlockChyp, Inc., 2019\n\nDistributed under the terms of the [MIT] license, blockchyp-python is free and open source software.\n\n[MIT]: https://github.com/blockchyp/blockchyp-python/blob/master/LICENSE\n\n## Other SDKs\n\nBlockChyp has officially supported SDKs for eight different development platforms and counting.\nHere's the full list with links to their GitHub repositories.\n\n[Go SDK](https://github.com/blockchyp/blockchyp-go)\n\n[Node.js/JavaScript SDK](https://github.com/blockchyp/blockchyp-js)\n\n[Java SDK](https://github.com/blockchyp/blockchyp-java)\n\n[.net/C# SDK](https://github.com/blockchyp/blockchyp-csharp)\n\n[Ruby SDK](https://github.com/blockchyp/blockchyp-ruby)\n\n[PHP SDK](https://github.com/blockchyp/blockchyp-php)\n\n[Python SDK](https://github.com/blockchyp/blockchyp-python)\n\n[iOS (Objective-C/Swift) SDK](https://github.com/blockchyp/blockchyp-ios)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blockchyp/blockchyp-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blockchyp",
    "package_url": "https://pypi.org/project/blockchyp/",
    "platform": null,
    "project_url": "https://pypi.org/project/blockchyp/",
    "project_urls": {
      "Homepage": "https://github.com/blockchyp/blockchyp-python"
    },
    "release_url": "https://pypi.org/project/blockchyp/2.15.5.post1/",
    "requires_dist": [
      "cryptography",
      "requests"
    ],
    "requires_python": ">=3.5",
    "summary": "The official library for accessing the BlockChyp Terminal and Gateway APIs",
    "version": "2.15.5.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16165125,
  "releases": {
    "0.1.0a1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b15ca27141d7c0a64021f681319d47d4646414b58354ae03f2ca7b92607fd5b",
          "md5": "2356b36e96e16b66362f1867f08b9e7a",
          "sha256": "31e4071a940016166fbd88a28e681a8359533c62be628040999b6f9daf030a8e"
        },
        "downloads": -1,
        "filename": "blockchyp-0.1.0a1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "2356b36e96e16b66362f1867f08b9e7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 33423,
        "upload_time": "2020-01-06T18:27:04",
        "upload_time_iso_8601": "2020-01-06T18:27:04.639533Z",
        "url": "https://files.pythonhosted.org/packages/9b/15/ca27141d7c0a64021f681319d47d4646414b58354ae03f2ca7b92607fd5b/blockchyp-0.1.0a1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.10.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81c7e4a5678ca63741fc4df2be67bcf35cf2efc96221151db83e7c05b186aa00",
          "md5": "1b4782ed3f4f1329c51c8dda03993288",
          "sha256": "c6a67e4757b2a7f30fe2e94f27ac57ae399e5b8a3b43341dbdd1d7ffc143e2cb"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.10.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b4782ed3f4f1329c51c8dda03993288",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38736,
        "upload_time": "2022-09-30T04:58:28",
        "upload_time_iso_8601": "2022-09-30T04:58:28.410869Z",
        "url": "https://files.pythonhosted.org/packages/81/c7/e4a5678ca63741fc4df2be67bcf35cf2efc96221151db83e7c05b186aa00/blockchyp-1.24.10.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bc0d83e28839beb4ac86456ec24ac5211261a53275e67a70021d225ac37ac73",
          "md5": "4d4f5abc3515c01d15061e24b737648e",
          "sha256": "a4c5543600d370d6f6e1de06cbadd9abe1655d0678f3173a242fb910f241794d"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.10.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d4f5abc3515c01d15061e24b737648e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81340,
        "upload_time": "2022-09-30T04:58:31",
        "upload_time_iso_8601": "2022-09-30T04:58:31.330073Z",
        "url": "https://files.pythonhosted.org/packages/2b/c0/d83e28839beb4ac86456ec24ac5211261a53275e67a70021d225ac37ac73/blockchyp-1.24.10.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.11.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d05ea2ecaf1521b7b4e439761e512ef8631734bc8e2d9dbc14af110623e08d9",
          "md5": "8b4d7f309274496bc6fe132b13f03326",
          "sha256": "0d9614c6cd0f30026c796edf79bddd883ca2f22fd2cbf239c95894da58d0d27d"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.11.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b4d7f309274496bc6fe132b13f03326",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38737,
        "upload_time": "2022-09-30T05:05:02",
        "upload_time_iso_8601": "2022-09-30T05:05:02.673155Z",
        "url": "https://files.pythonhosted.org/packages/7d/05/ea2ecaf1521b7b4e439761e512ef8631734bc8e2d9dbc14af110623e08d9/blockchyp-1.24.11.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb963d43a8d07d3d1f6969774faace87fccdfd69ea42fc5147e04244f8ec2c81",
          "md5": "49cd7d4ce97696bcf6164663eee5080b",
          "sha256": "d9cfb3c6d6fb9722b4dc4fe56596070e6acbc14cc3321a46dad8a7420b02bc33"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.11.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "49cd7d4ce97696bcf6164663eee5080b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81342,
        "upload_time": "2022-09-30T05:05:07",
        "upload_time_iso_8601": "2022-09-30T05:05:07.651771Z",
        "url": "https://files.pythonhosted.org/packages/bb/96/3d43a8d07d3d1f6969774faace87fccdfd69ea42fc5147e04244f8ec2c81/blockchyp-1.24.11.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.12.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e45245e29784fef8505587b89a9fbb36e89d52e712e87b80d91b2e501bcd86f",
          "md5": "c688b6cfb1dce76bda8576956193ee15",
          "sha256": "41c5a04b941c86600043d5c607493c475a71314d428bb3b8a7c8a906eebfda20"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.12.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c688b6cfb1dce76bda8576956193ee15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38736,
        "upload_time": "2022-09-30T05:13:07",
        "upload_time_iso_8601": "2022-09-30T05:13:07.710846Z",
        "url": "https://files.pythonhosted.org/packages/6e/45/245e29784fef8505587b89a9fbb36e89d52e712e87b80d91b2e501bcd86f/blockchyp-1.24.12.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96dceef4406dc4461f81b6e2ee07e21057bab91023c7a5dce85773ed1bd08351",
          "md5": "14d5e2ae2c30f5117d47f14c35e63e7d",
          "sha256": "22b0a7e85e00ec5ae9bea7e80fd972f647c4a2fe52f2780f6350778cbf94ccb2"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.12.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "14d5e2ae2c30f5117d47f14c35e63e7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81334,
        "upload_time": "2022-09-30T05:13:14",
        "upload_time_iso_8601": "2022-09-30T05:13:14.226104Z",
        "url": "https://files.pythonhosted.org/packages/96/dc/eef4406dc4461f81b6e2ee07e21057bab91023c7a5dce85773ed1bd08351/blockchyp-1.24.12.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.13.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "691c75818563ca8e7ff4d23ed9aa8a1350712894babfeb8c8fff4dea5142f525",
          "md5": "572e293d9332a591a122748e67d98565",
          "sha256": "df5adf2b3d62e280b3af99ca3e4f4f18485103afafab9eca421c02be4f6e8126"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.13.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "572e293d9332a591a122748e67d98565",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38734,
        "upload_time": "2022-09-30T05:20:32",
        "upload_time_iso_8601": "2022-09-30T05:20:32.532631Z",
        "url": "https://files.pythonhosted.org/packages/69/1c/75818563ca8e7ff4d23ed9aa8a1350712894babfeb8c8fff4dea5142f525/blockchyp-1.24.13.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f4b38ab23cc54b1fab0663270548a8aeb1a4828aad8d164f6bc4cfe94e5f4f2",
          "md5": "d038161beb55fe8fda848ee1a3bea79b",
          "sha256": "3d4c6aca148f39a7f0d22d5d02161aa43ca20789b4e6b68ddc0a28f2db18098c"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.13.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "d038161beb55fe8fda848ee1a3bea79b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81343,
        "upload_time": "2022-09-30T05:20:35",
        "upload_time_iso_8601": "2022-09-30T05:20:35.596298Z",
        "url": "https://files.pythonhosted.org/packages/8f/4b/38ab23cc54b1fab0663270548a8aeb1a4828aad8d164f6bc4cfe94e5f4f2/blockchyp-1.24.13.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.14.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3e4cf2d49a4f9a726ce777260ae9b894a83df58e3ef8a7ff5da16a896459fe9",
          "md5": "8df5c9c158f6174a282f4fbf2866450e",
          "sha256": "010ef48a337dcf33ecfd195b7caaa2e9689de1a9ae0d5d49983d268e6ac5abea"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.14.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8df5c9c158f6174a282f4fbf2866450e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38735,
        "upload_time": "2022-09-30T14:46:26",
        "upload_time_iso_8601": "2022-09-30T14:46:26.006283Z",
        "url": "https://files.pythonhosted.org/packages/c3/e4/cf2d49a4f9a726ce777260ae9b894a83df58e3ef8a7ff5da16a896459fe9/blockchyp-1.24.14.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d51669b958ebaeeba5ff19b4affca9012919a6973dd91e9e51be8bca9ad49019",
          "md5": "a6b593e85f2220f4aa51901bc63204f7",
          "sha256": "790a51c5037af5a9d0a053cf3cdf93f44347504c9a1cf1b170eb04506433461b"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.14.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "a6b593e85f2220f4aa51901bc63204f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81341,
        "upload_time": "2022-09-30T14:46:30",
        "upload_time_iso_8601": "2022-09-30T14:46:30.664527Z",
        "url": "https://files.pythonhosted.org/packages/d5/16/69b958ebaeeba5ff19b4affca9012919a6973dd91e9e51be8bca9ad49019/blockchyp-1.24.14.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.6.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "765acb1f1eb92eee608b25cbbc698074a2be4135f1f61f556e5a0f5eda047ece",
          "md5": "0cfd17a3f80c8985f1bc11aa6436f91b",
          "sha256": "fcc641b38119686d6c54677ecd109f774d8c2d23e505eca3f30d62f9f7215f1c"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.6.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cfd17a3f80c8985f1bc11aa6436f91b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38720,
        "upload_time": "2022-09-29T23:19:01",
        "upload_time_iso_8601": "2022-09-29T23:19:01.151952Z",
        "url": "https://files.pythonhosted.org/packages/76/5a/cb1f1eb92eee608b25cbbc698074a2be4135f1f61f556e5a0f5eda047ece/blockchyp-1.24.6.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c5950b781be40f4e9309572916c6c5c2593fd5420d6397629a7776abc0961c7",
          "md5": "23e2d330c93eb98b8566f808997f3585",
          "sha256": "306ffa967e2ce402afd8389064032f053f4a8a8b76e4733d7acf506460aba41e"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.6.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "23e2d330c93eb98b8566f808997f3585",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81329,
        "upload_time": "2022-09-29T23:19:03",
        "upload_time_iso_8601": "2022-09-29T23:19:03.913473Z",
        "url": "https://files.pythonhosted.org/packages/6c/59/50b781be40f4e9309572916c6c5c2593fd5420d6397629a7776abc0961c7/blockchyp-1.24.6.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.7.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "440d887be97f6520f471e1a73522346621a88faf5e0b97d781c1d60716180aa0",
          "md5": "e6060c35147666638ffe86a1c3c5fa0b",
          "sha256": "9f723ee52e32cf82e248f7318dff31f95ef3e70162a42db2c3c932cd56981a45"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.7.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6060c35147666638ffe86a1c3c5fa0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38722,
        "upload_time": "2022-09-30T01:55:32",
        "upload_time_iso_8601": "2022-09-30T01:55:32.326475Z",
        "url": "https://files.pythonhosted.org/packages/44/0d/887be97f6520f471e1a73522346621a88faf5e0b97d781c1d60716180aa0/blockchyp-1.24.7.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f12de331068f80de8e555eaa213f0a5ca417d8bdd0b109520a2a5522f75c9a5d",
          "md5": "f56ae689f74018fd9337ea884ab715f1",
          "sha256": "b71c56f030ac56b4c88bfcd4babe3d0e914363005e8c1a0432bff7bf5c5d0887"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.7.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "f56ae689f74018fd9337ea884ab715f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81340,
        "upload_time": "2022-09-30T01:55:35",
        "upload_time_iso_8601": "2022-09-30T01:55:35.610925Z",
        "url": "https://files.pythonhosted.org/packages/f1/2d/e331068f80de8e555eaa213f0a5ca417d8bdd0b109520a2a5522f75c9a5d/blockchyp-1.24.7.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.8.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af781d451554dd0e1c5ec96ff23e37ddbb2dabb4fdaa71664296f3a04c1051f5",
          "md5": "1013e96d91877d9fbaba0cdc4aa3208d",
          "sha256": "253723ddd3e7933a535eb80ca74bab9d09bdb068cbef2c34b39ae05c946a125d"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.8.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1013e96d91877d9fbaba0cdc4aa3208d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38722,
        "upload_time": "2022-09-30T02:45:47",
        "upload_time_iso_8601": "2022-09-30T02:45:47.966392Z",
        "url": "https://files.pythonhosted.org/packages/af/78/1d451554dd0e1c5ec96ff23e37ddbb2dabb4fdaa71664296f3a04c1051f5/blockchyp-1.24.8.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3ed2a4735783cb2d412cb875d5c1b63b37fa8e90f26bb9a804c18fa9b7ea979",
          "md5": "aa47b96b130c47476cdce92663ee9e2e",
          "sha256": "374120bc97c68b54dfe7fbe76cdb25f06e059f19d09b41c21bb42b271aa30653"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.8.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "aa47b96b130c47476cdce92663ee9e2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81327,
        "upload_time": "2022-09-30T02:45:52",
        "upload_time_iso_8601": "2022-09-30T02:45:52.717905Z",
        "url": "https://files.pythonhosted.org/packages/d3/ed/2a4735783cb2d412cb875d5c1b63b37fa8e90f26bb9a804c18fa9b7ea979/blockchyp-1.24.8.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.24.9.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c71eb73e82324773cdca0deb0a9dfc3f1276599829df2c2dbda367bd4daaf34",
          "md5": "989bbdf4d7aa900a56bcc1431aa8964b",
          "sha256": "9177108d7f6f0261a76671e7357012125f57e406667122583527cb647794b8ce"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.9.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "989bbdf4d7aa900a56bcc1431aa8964b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38724,
        "upload_time": "2022-09-30T03:19:19",
        "upload_time_iso_8601": "2022-09-30T03:19:19.974869Z",
        "url": "https://files.pythonhosted.org/packages/9c/71/eb73e82324773cdca0deb0a9dfc3f1276599829df2c2dbda367bd4daaf34/blockchyp-1.24.9.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37efa53a7d0bca64e9aa03c8e9e40a35a1f7b90486798c846af2078faa046f32",
          "md5": "3ec84ff5c1aaee097aa8b2d1302d0a3a",
          "sha256": "e43152b5cec6d19fd82026b407ea3e2a8f5d709f86aa50fc81224653688959a8"
        },
        "downloads": -1,
        "filename": "blockchyp-1.24.9.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ec84ff5c1aaee097aa8b2d1302d0a3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81331,
        "upload_time": "2022-09-30T03:19:23",
        "upload_time_iso_8601": "2022-09-30T03:19:23.145821Z",
        "url": "https://files.pythonhosted.org/packages/37/ef/a53a7d0bca64e9aa03c8e9e40a35a1f7b90486798c846af2078faa046f32/blockchyp-1.24.9.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0a2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be1d06ec9b9a8f55f04032046a795f7c8be0f2bac1b22b29e55b9f9a9744c858",
          "md5": "86cc8f178d4dbc5c3427ac34f0d4bc65",
          "sha256": "eb03ff88f895f34e6edca8c8cad9a6536249140745500a147bdbad5459811a4d"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0a2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "86cc8f178d4dbc5c3427ac34f0d4bc65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9674,
        "upload_time": "2020-01-06T23:09:47",
        "upload_time_iso_8601": "2020-01-06T23:09:47.081081Z",
        "url": "https://files.pythonhosted.org/packages/be/1d/06ec9b9a8f55f04032046a795f7c8be0f2bac1b22b29e55b9f9a9744c858/blockchyp-2.0.0a2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0a3.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06e98ba2f66c624828cad29e45bff141a002034fc3fa2e940f85d8182d288455",
          "md5": "6782a6bfad57e7e16c9d969613b2baf7",
          "sha256": "e4e78e56af8a66dadbb487acf7dd4e15491e04de748373772d40f9e66f302332"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0a3.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "6782a6bfad57e7e16c9d969613b2baf7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9671,
        "upload_time": "2020-01-06T23:20:59",
        "upload_time_iso_8601": "2020-01-06T23:20:59.076146Z",
        "url": "https://files.pythonhosted.org/packages/06/e9/8ba2f66c624828cad29e45bff141a002034fc3fa2e940f85d8182d288455/blockchyp-2.0.0a3.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0a4.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4239cd49fa79dfb4bf64385184521727dcd1ca4182b99bd45340c7092a5b597",
          "md5": "55734b1f830bae676fca50f4bca191b2",
          "sha256": "7c927bbc7b32d338af59d0024896835788df6847927abf8507a4542994b1ece5"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0a4.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "55734b1f830bae676fca50f4bca191b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9670,
        "upload_time": "2020-01-06T23:27:28",
        "upload_time_iso_8601": "2020-01-06T23:27:28.302011Z",
        "url": "https://files.pythonhosted.org/packages/a4/23/9cd49fa79dfb4bf64385184521727dcd1ca4182b99bd45340c7092a5b597/blockchyp-2.0.0a4.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0a5.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7f14e476fecee517464f9e1b7879ea4581d10d6935086aa29bbbd2a4fecb126",
          "md5": "b49a43bac96ae330a2858c98fad98f58",
          "sha256": "ab13140cdc0d6c0fb7e85e3f9886215cf431c23da17fa4cc9a98cd6bad110ed9"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0a5.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "b49a43bac96ae330a2858c98fad98f58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9677,
        "upload_time": "2020-01-07T17:46:56",
        "upload_time_iso_8601": "2020-01-07T17:46:56.254122Z",
        "url": "https://files.pythonhosted.org/packages/f7/f1/4e476fecee517464f9e1b7879ea4581d10d6935086aa29bbbd2a4fecb126/blockchyp-2.0.0a5.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0a6.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90d758722ea232ceb1951081e2e5898e0a47d7d344359c71c082d27760faca13",
          "md5": "798e801bfdb621faf353114738d5de9c",
          "sha256": "a555edd4de7a1eb29fdc1f6838041b39ffde0e5efc024317a5e78b09fab1f00d"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0a6.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "798e801bfdb621faf353114738d5de9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 9670,
        "upload_time": "2020-01-07T21:55:05",
        "upload_time_iso_8601": "2020-01-07T21:55:05.155386Z",
        "url": "https://files.pythonhosted.org/packages/90/d7/58722ea232ceb1951081e2e5898e0a47d7d344359c71c082d27760faca13/blockchyp-2.0.0a6.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0a7.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6562404e46813ee28062715c73eea239fbf0af2a65759104fb882eb2374d2b7c",
          "md5": "3062a1b553c37d7db0c977c2548cd549",
          "sha256": "5db1b8a6ff5b5b12d761a111601020295dffd2ac7594f8a1043bad6927edef2f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0a7.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3062a1b553c37d7db0c977c2548cd549",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16671,
        "upload_time": "2020-01-08T00:12:06",
        "upload_time_iso_8601": "2020-01-08T00:12:06.161996Z",
        "url": "https://files.pythonhosted.org/packages/65/62/404e46813ee28062715c73eea239fbf0af2a65759104fb882eb2374d2b7c/blockchyp-2.0.0a7.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f73acb6e8bc12bcf8027005fbbce16609f93b591329b67886bd3cc38bc2c64b3",
          "md5": "ed576a12e8ecc8932763b5821e1e03e4",
          "sha256": "5aff8dbda039fb8568044cd0c5ae851dbbeddf3b7f305833cc572e0cafa6a301"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0a7.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "ed576a12e8ecc8932763b5821e1e03e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 17926,
        "upload_time": "2020-01-08T00:12:07",
        "upload_time_iso_8601": "2020-01-08T00:12:07.795526Z",
        "url": "https://files.pythonhosted.org/packages/f7/3a/cb6e8bc12bcf8027005fbbce16609f93b591329b67886bd3cc38bc2c64b3/blockchyp-2.0.0a7.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34dcaf82bee31ddbf3ae191c03831fd491135f4940024bb8214ad2bd0363827a",
          "md5": "08ec3f0325bf45dda2ac1f5e5e15322c",
          "sha256": "8e131755ec36a3ae0437fb2a8989a032a4853375c16f129355e6ac7b7618e7e4"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0rc1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08ec3f0325bf45dda2ac1f5e5e15322c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16929,
        "upload_time": "2020-01-13T20:25:00",
        "upload_time_iso_8601": "2020-01-13T20:25:00.035096Z",
        "url": "https://files.pythonhosted.org/packages/34/dc/af82bee31ddbf3ae191c03831fd491135f4940024bb8214ad2bd0363827a/blockchyp-2.0.0rc1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55d815695d800f3b0e686d68602422a6b28ac0fb61140a8c84140d778c421c9e",
          "md5": "903c706d8643393541ec15276b0aa71e",
          "sha256": "81c969c0db7dccde0b07b16dce65b8bd9c374a6aeae8b255c2901ca499402251"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0rc1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "903c706d8643393541ec15276b0aa71e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18170,
        "upload_time": "2020-01-13T20:25:02",
        "upload_time_iso_8601": "2020-01-13T20:25:02.085094Z",
        "url": "https://files.pythonhosted.org/packages/55/d8/15695d800f3b0e686d68602422a6b28ac0fb61140a8c84140d778c421c9e/blockchyp-2.0.0rc1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9614e2a8567ba2d2f299c1e7852a8dc70c05525f7c68427b8a08e3b08b7d4bd",
          "md5": "6edbba2e2e2a0427cd5c4790d34d43b5",
          "sha256": "4714b5293e10f272c5054538884eb045d54b4ee16d3fa3d7554c8ba2a624f91b"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0rc2.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6edbba2e2e2a0427cd5c4790d34d43b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16930,
        "upload_time": "2020-01-13T20:39:32",
        "upload_time_iso_8601": "2020-01-13T20:39:32.430727Z",
        "url": "https://files.pythonhosted.org/packages/b9/61/4e2a8567ba2d2f299c1e7852a8dc70c05525f7c68427b8a08e3b08b7d4bd/blockchyp-2.0.0rc2.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0a6b529b00e9af876989fcbaa42703ce333e0f9f29c2234240984698f3d4bb7",
          "md5": "5a6265f615fbdbd6b5cdf4e1ada768c9",
          "sha256": "d0596ba6158be4fda6edbcc508c8329776f5d703e6fdf0fe77c8efafcc120b8b"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.0rc2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "5a6265f615fbdbd6b5cdf4e1ada768c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18170,
        "upload_time": "2020-01-13T20:39:34",
        "upload_time_iso_8601": "2020-01-13T20:39:34.222427Z",
        "url": "https://files.pythonhosted.org/packages/e0/a6/b529b00e9af876989fcbaa42703ce333e0f9f29c2234240984698f3d4bb7/blockchyp-2.0.0rc2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a94c5229ad2cb90658d351f6b26f62d827b955fd5d79e84ecff707403b1f73da",
          "md5": "dbe998a185fe4ca85510a1d39acba2f7",
          "sha256": "f213e34209c6a4f6657c8db8c3e6a4578f2eda335054e7c1f9526f592332ee23"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbe998a185fe4ca85510a1d39acba2f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16959,
        "upload_time": "2020-02-07T23:28:42",
        "upload_time_iso_8601": "2020-02-07T23:28:42.670780Z",
        "url": "https://files.pythonhosted.org/packages/a9/4c/5229ad2cb90658d351f6b26f62d827b955fd5d79e84ecff707403b1f73da/blockchyp-2.0.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f91085f4f657027924c0813b7a0e6cafb27c6815f8c74e41d887f47fc9a2fa64",
          "md5": "28b2ead400f471241d3ad8176d29e319",
          "sha256": "3bd3f311d9ff71739a92862915d62e6c8d11488bdccda8c79af0e3ac0c010b86"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "28b2ead400f471241d3ad8176d29e319",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18347,
        "upload_time": "2020-02-07T23:28:43",
        "upload_time_iso_8601": "2020-02-07T23:28:43.872339Z",
        "url": "https://files.pythonhosted.org/packages/f9/10/85f4f657027924c0813b7a0e6cafb27c6815f8c74e41d887f47fc9a2fa64/blockchyp-2.0.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1rc1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61b9c31a03c22abdd84548c95114c72a11ed294327440f5a91caec2a604cb668",
          "md5": "45c1b3605ad274c12158b083141546aa",
          "sha256": "5bb20661e2f48369ca772e99f6ba6e7b2584195bb55f6f6f77d83ceaf5665741"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45c1b3605ad274c12158b083141546aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16999,
        "upload_time": "2020-01-17T00:53:04",
        "upload_time_iso_8601": "2020-01-17T00:53:04.614820Z",
        "url": "https://files.pythonhosted.org/packages/61/b9/c31a03c22abdd84548c95114c72a11ed294327440f5a91caec2a604cb668/blockchyp-2.0.1rc1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ce2822e2b0404843c29bfb3abdf4b1bbbf47193aedd39fb6a6bc66dbd3c8e42",
          "md5": "3bed68171f2d3a2abc3f19eaff869095",
          "sha256": "93a1f0941a5bab8dfb810df98ed29be360810f4ba53fd37c42f46dc1bf4309a8"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "3bed68171f2d3a2abc3f19eaff869095",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18332,
        "upload_time": "2020-01-17T00:53:07",
        "upload_time_iso_8601": "2020-01-17T00:53:07.479696Z",
        "url": "https://files.pythonhosted.org/packages/7c/e2/822e2b0404843c29bfb3abdf4b1bbbf47193aedd39fb6a6bc66dbd3c8e42/blockchyp-2.0.1rc1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1rc2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f99f05dd8c713df3963fc4d904fddba2ea205a4b1e3319873c89fc208f703e9a",
          "md5": "65a3b5e4faa1f0052b97b353bb6747af",
          "sha256": "094936570c567550fe89f9aeec1bd50d9555eca7c9748cda9a9452c652ba061f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc2.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65a3b5e4faa1f0052b97b353bb6747af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17000,
        "upload_time": "2020-02-06T16:41:31",
        "upload_time_iso_8601": "2020-02-06T16:41:31.330549Z",
        "url": "https://files.pythonhosted.org/packages/f9/9f/05dd8c713df3963fc4d904fddba2ea205a4b1e3319873c89fc208f703e9a/blockchyp-2.0.1rc2.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82308db2324bbadd70b3babc4f7ec61fc06f63a2e5222222ee756ecdb8e9d4c0",
          "md5": "f53cbf69ad9c4dc5acb55efb17ebcaca",
          "sha256": "cfcc7451b06c54040c1238d5d178df77ad86fc0f8396044ec241a323c5612169"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "f53cbf69ad9c4dc5acb55efb17ebcaca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18330,
        "upload_time": "2020-02-06T16:41:32",
        "upload_time_iso_8601": "2020-02-06T16:41:32.817080Z",
        "url": "https://files.pythonhosted.org/packages/82/30/8db2324bbadd70b3babc4f7ec61fc06f63a2e5222222ee756ecdb8e9d4c0/blockchyp-2.0.1rc2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1rc3.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2b5f8a29881ec572de397afb91480bb048dcffacc7621da3d6d57b396d38d06",
          "md5": "3dcb55b64910dd35c05cf8f4372f8169",
          "sha256": "3e3c92ecf1444af3cf590c53215db1c95789bca9e2caaaa49c94f81cab8b1937"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc3.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3dcb55b64910dd35c05cf8f4372f8169",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17000,
        "upload_time": "2020-02-06T17:14:07",
        "upload_time_iso_8601": "2020-02-06T17:14:07.994258Z",
        "url": "https://files.pythonhosted.org/packages/f2/b5/f8a29881ec572de397afb91480bb048dcffacc7621da3d6d57b396d38d06/blockchyp-2.0.1rc3.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "535d211b8cfc695eb55f386acbb1109042acf594e34e1656aa1ec83d95a67f29",
          "md5": "5fbf12e44883cfab706529bce288b886",
          "sha256": "d15dfadfffd6131002bdaa43a6e2c6ae304c2252a8d51057c278a00fa4cb444e"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc3.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "5fbf12e44883cfab706529bce288b886",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18330,
        "upload_time": "2020-02-06T17:14:09",
        "upload_time_iso_8601": "2020-02-06T17:14:09.887104Z",
        "url": "https://files.pythonhosted.org/packages/53/5d/211b8cfc695eb55f386acbb1109042acf594e34e1656aa1ec83d95a67f29/blockchyp-2.0.1rc3.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1rc4.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ea32a7bde9d03ed9e94f28bfe1a43b06733fd44d67817bf1dddbfc00fe7ae29",
          "md5": "1c28b9ae1e55d4f65c5c76084051a14a",
          "sha256": "eec0ba51edaeb79d4b3b658266ef2e321b9d56faf4a639e3f89d865fe1c84968"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc4.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c28b9ae1e55d4f65c5c76084051a14a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16998,
        "upload_time": "2020-02-06T18:04:20",
        "upload_time_iso_8601": "2020-02-06T18:04:20.307397Z",
        "url": "https://files.pythonhosted.org/packages/9e/a3/2a7bde9d03ed9e94f28bfe1a43b06733fd44d67817bf1dddbfc00fe7ae29/blockchyp-2.0.1rc4.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f27b53a2705bb758d689cffaae193a2991e6e93fb9e87f433aaea10461160a0",
          "md5": "8a9e6d1b3b2dd896d962d495a5368f68",
          "sha256": "b23596361624f6629f4b5bd8a01ece5d361b0f62cb702f883ea64684cdb43e98"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc4.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "8a9e6d1b3b2dd896d962d495a5368f68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18332,
        "upload_time": "2020-02-06T18:04:22",
        "upload_time_iso_8601": "2020-02-06T18:04:22.084758Z",
        "url": "https://files.pythonhosted.org/packages/2f/27/b53a2705bb758d689cffaae193a2991e6e93fb9e87f433aaea10461160a0/blockchyp-2.0.1rc4.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1rc5.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7fb90dc1cdd9ce2f671446a5e8f4206a928d25713e6c7a57f30a2427b6c1c9a",
          "md5": "29f13c1e6831c44fd77d61faf162b254",
          "sha256": "855b5cefe1c946bf65ca10fcd840a5c70bc5ef0be31fe63261d0b732b51db7db"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc5.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29f13c1e6831c44fd77d61faf162b254",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17004,
        "upload_time": "2020-02-07T22:24:06",
        "upload_time_iso_8601": "2020-02-07T22:24:06.043866Z",
        "url": "https://files.pythonhosted.org/packages/c7/fb/90dc1cdd9ce2f671446a5e8f4206a928d25713e6c7a57f30a2427b6c1c9a/blockchyp-2.0.1rc5.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bcc7375fc63ccc0a3b577c5ff3cd1aa31b5ff2ab57579f85f5375f4d958e42b",
          "md5": "926cbc59d087ee5b4f1cf49e42745227",
          "sha256": "3019f294cc8e11f998d20488f388e6578128ce7f6db84ab0bd41b541e839bc6c"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc5.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "926cbc59d087ee5b4f1cf49e42745227",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18351,
        "upload_time": "2020-02-07T22:24:07",
        "upload_time_iso_8601": "2020-02-07T22:24:07.873114Z",
        "url": "https://files.pythonhosted.org/packages/6b/cc/7375fc63ccc0a3b577c5ff3cd1aa31b5ff2ab57579f85f5375f4d958e42b/blockchyp-2.0.1rc5.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1rc6.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cad85de3e148bf78b7240bd60bba0513e04b08f7e8669f6f89931652cb2e9b65",
          "md5": "09898b75cd01f00d3a6c102a18cab712",
          "sha256": "4343a39db936f4eb8ebe4d1e0dae5d1e821594983e3da50566613d04f07c5811"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc6.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09898b75cd01f00d3a6c102a18cab712",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17003,
        "upload_time": "2020-02-07T22:42:29",
        "upload_time_iso_8601": "2020-02-07T22:42:29.973794Z",
        "url": "https://files.pythonhosted.org/packages/ca/d8/5de3e148bf78b7240bd60bba0513e04b08f7e8669f6f89931652cb2e9b65/blockchyp-2.0.1rc6.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "049f4cccb96e2e78cc04677968cc49935120b4802827a8b040755e092e1d378e",
          "md5": "4359ee65259270bf02d1763a85e7ee80",
          "sha256": "5cf816c923a0c0dafbe94d52cfee63c2d5bf351bd4b4822c55ba26c3cdfba836"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc6.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "4359ee65259270bf02d1763a85e7ee80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18352,
        "upload_time": "2020-02-07T22:42:31",
        "upload_time_iso_8601": "2020-02-07T22:42:31.541441Z",
        "url": "https://files.pythonhosted.org/packages/04/9f/4cccb96e2e78cc04677968cc49935120b4802827a8b040755e092e1d378e/blockchyp-2.0.1rc6.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1rc8.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "464a5ee51a5108435fe39da750e1e5df9cd7787a9b77961db6ae9c6b228387a9",
          "md5": "19f51cb49cc88d7b2dc8154b92a7c475",
          "sha256": "0d77c64f5b3cea49cea9ae1215871390886ea441cd7a533068e50a52000c382d"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc8.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19f51cb49cc88d7b2dc8154b92a7c475",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17002,
        "upload_time": "2020-02-07T23:05:25",
        "upload_time_iso_8601": "2020-02-07T23:05:25.163365Z",
        "url": "https://files.pythonhosted.org/packages/46/4a/5ee51a5108435fe39da750e1e5df9cd7787a9b77961db6ae9c6b228387a9/blockchyp-2.0.1rc8.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94faef74cc30f4176c1ddaa098e28cc801688e513b7a737f36a7704c7bc14d82",
          "md5": "9d61f3b15b0f53923366762db528c24d",
          "sha256": "52ae51183b328f733569a9aece407205dbc0f9d3f9e3a86eec23ce34b084f684"
        },
        "downloads": -1,
        "filename": "blockchyp-2.0.1rc8.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "9d61f3b15b0f53923366762db528c24d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18351,
        "upload_time": "2020-02-07T23:05:26",
        "upload_time_iso_8601": "2020-02-07T23:05:26.938505Z",
        "url": "https://files.pythonhosted.org/packages/94/fa/ef74cc30f4176c1ddaa098e28cc801688e513b7a737f36a7704c7bc14d82/blockchyp-2.0.1rc8.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "790f2dfa64e315577787c5e9d4022b268f43591b3b2fa57204247b1de4927f65",
          "md5": "7e36092e4dd6f0f204535d92cbfd2e3c",
          "sha256": "96bd4f5e52a6366742fe91424f51695f1b6ca27e7608c7827f71b64ebf4b461e"
        },
        "downloads": -1,
        "filename": "blockchyp-2.1.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e36092e4dd6f0f204535d92cbfd2e3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17178,
        "upload_time": "2020-02-28T18:39:38",
        "upload_time_iso_8601": "2020-02-28T18:39:38.760638Z",
        "url": "https://files.pythonhosted.org/packages/79/0f/2dfa64e315577787c5e9d4022b268f43591b3b2fa57204247b1de4927f65/blockchyp-2.1.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e39dac1448b1aa03de133802f47c9e6dff485c57bdfcf70c3b5bc555123b2945",
          "md5": "509361682ab324a7fa8434fe08c0d2c8",
          "sha256": "ece33f2d0c483f24fc9220e2c686949087da75567f7511e1dd8e8e15b315ec3e"
        },
        "downloads": -1,
        "filename": "blockchyp-2.1.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "509361682ab324a7fa8434fe08c0d2c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18602,
        "upload_time": "2020-02-28T18:39:40",
        "upload_time_iso_8601": "2020-02-28T18:39:40.078828Z",
        "url": "https://files.pythonhosted.org/packages/e3/9d/ac1448b1aa03de133802f47c9e6dff485c57bdfcf70c3b5bc555123b2945/blockchyp-2.1.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf125cbc2ba2d2acc86ba09d543795a2162bd1f772d2bb4170e6fd09bd84ef51",
          "md5": "cdec3883da4bcc010556748613640c0e",
          "sha256": "d7338400a3f9be88368c5d9bced83f58c7438274a233d0ed3e57b1a671dc841f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.1.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cdec3883da4bcc010556748613640c0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17178,
        "upload_time": "2020-03-03T18:09:38",
        "upload_time_iso_8601": "2020-03-03T18:09:38.966260Z",
        "url": "https://files.pythonhosted.org/packages/bf/12/5cbc2ba2d2acc86ba09d543795a2162bd1f772d2bb4170e6fd09bd84ef51/blockchyp-2.1.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fe6eedb3adb94c260bfd12b9533e339f6675dd8a6e74c938306374dc777cac1",
          "md5": "b8790741995eb0f389d3f64807a8a77c",
          "sha256": "e5a73aaf02bd2ef3af190177965d62b43206859dfb4b2a6ac0609e6d0153bcd4"
        },
        "downloads": -1,
        "filename": "blockchyp-2.1.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "b8790741995eb0f389d3f64807a8a77c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18600,
        "upload_time": "2020-03-03T18:09:40",
        "upload_time_iso_8601": "2020-03-03T18:09:40.553314Z",
        "url": "https://files.pythonhosted.org/packages/7f/e6/eedb3adb94c260bfd12b9533e339f6675dd8a6e74c938306374dc777cac1/blockchyp-2.1.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.10.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d370cb78ae8de017220cabaab384af452e8b7f62b68d073ea2b13e3f3fe595fb",
          "md5": "ccd10eb7ba5e3598f3c798b038bac080",
          "sha256": "6a2a14662355740d6aa28aacd79cdee34719f8abdf96a58ac3411f6d291d334a"
        },
        "downloads": -1,
        "filename": "blockchyp-2.10.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ccd10eb7ba5e3598f3c798b038bac080",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26841,
        "upload_time": "2021-09-15T20:24:07",
        "upload_time_iso_8601": "2021-09-15T20:24:07.895129Z",
        "url": "https://files.pythonhosted.org/packages/d3/70/cb78ae8de017220cabaab384af452e8b7f62b68d073ea2b13e3f3fe595fb/blockchyp-2.10.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cebaa6801a17bce3952f31a17164ec3cf025b1d40dfbfb45b0f61c8e8cf4fc41",
          "md5": "aff2d50d91e1587188ef094c1645b7dc",
          "sha256": "8e197e604977800f1bbff3a35770f1fa77382c4f89eafc10e1d36035e34617e0"
        },
        "downloads": -1,
        "filename": "blockchyp-2.10.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "aff2d50d91e1587188ef094c1645b7dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48782,
        "upload_time": "2021-09-15T20:24:10",
        "upload_time_iso_8601": "2021-09-15T20:24:10.358311Z",
        "url": "https://files.pythonhosted.org/packages/ce/ba/a6801a17bce3952f31a17164ec3cf025b1d40dfbfb45b0f61c8e8cf4fc41/blockchyp-2.10.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.11.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "caf3c3039b0c7121716e3dd3a3d0c0d8f43766c2f86f4780675c300c87d44fa8",
          "md5": "d6defb62426c998c9232b0aad7eec6ed",
          "sha256": "88fd44193b18cdcb74b2ba393cd49c1b0f4109d532a055cfc04e31f920ff1fe6"
        },
        "downloads": -1,
        "filename": "blockchyp-2.11.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6defb62426c998c9232b0aad7eec6ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 27320,
        "upload_time": "2021-10-08T22:38:09",
        "upload_time_iso_8601": "2021-10-08T22:38:09.082850Z",
        "url": "https://files.pythonhosted.org/packages/ca/f3/c3039b0c7121716e3dd3a3d0c0d8f43766c2f86f4780675c300c87d44fa8/blockchyp-2.11.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b87c0917b58133ddc52488f957bbdbcbbcc3c132f08108c1b13020b753d5260f",
          "md5": "a01ce6030a0c257e6e2fad4d70002207",
          "sha256": "5f3b02ff21e9d8f430b349b4c7943a454442f1ae9edd90de898e339273343171"
        },
        "downloads": -1,
        "filename": "blockchyp-2.11.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "a01ce6030a0c257e6e2fad4d70002207",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 50101,
        "upload_time": "2021-10-08T22:38:10",
        "upload_time_iso_8601": "2021-10-08T22:38:10.963444Z",
        "url": "https://files.pythonhosted.org/packages/b8/7c/0917b58133ddc52488f957bbdbcbbcc3c132f08108c1b13020b753d5260f/blockchyp-2.11.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.12.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cc7fe23b7fca3f1756cf00aaa87858f0932665a109bd18800e961d2cd5a6e5e",
          "md5": "f6679409f161b8ecff6ae21419309147",
          "sha256": "33de5a7a61ba1a25cfca6a86e4de5a059433f4b78f8f6dd9c1f0f4e9bc3deaaf"
        },
        "downloads": -1,
        "filename": "blockchyp-2.12.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6679409f161b8ecff6ae21419309147",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 27432,
        "upload_time": "2022-05-10T06:15:13",
        "upload_time_iso_8601": "2022-05-10T06:15:13.393161Z",
        "url": "https://files.pythonhosted.org/packages/7c/c7/fe23b7fca3f1756cf00aaa87858f0932665a109bd18800e961d2cd5a6e5e/blockchyp-2.12.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c369e11b375cefbb4da3185e31a3dd9daf829bf3520a4fb0eb27e0edbdc4a4c",
          "md5": "c69cbcf2e924be4c7b5651d5a4f504c7",
          "sha256": "6f65da1606f9dd8112dd1428ae97d992eb23d26eedde684f8f597681628a53e4"
        },
        "downloads": -1,
        "filename": "blockchyp-2.12.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "c69cbcf2e924be4c7b5651d5a4f504c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 50347,
        "upload_time": "2022-05-10T06:15:15",
        "upload_time_iso_8601": "2022-05-10T06:15:15.708500Z",
        "url": "https://files.pythonhosted.org/packages/7c/36/9e11b375cefbb4da3185e31a3dd9daf829bf3520a4fb0eb27e0edbdc4a4c/blockchyp-2.12.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.13.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d8d8c5772d8464a878802377d9d483007b630400a90864f743c74b8b4b426eb",
          "md5": "cb56c4d3fa88292019e0503492cfbc1e",
          "sha256": "a64e1f788a79281ef67edd0e7273de8f694f6dd00e7aa4b0d4b6dbfc4fc802e9"
        },
        "downloads": -1,
        "filename": "blockchyp-2.13.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb56c4d3fa88292019e0503492cfbc1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38697,
        "upload_time": "2022-06-27T23:18:03",
        "upload_time_iso_8601": "2022-06-27T23:18:03.258656Z",
        "url": "https://files.pythonhosted.org/packages/4d/8d/8c5772d8464a878802377d9d483007b630400a90864f743c74b8b4b426eb/blockchyp-2.13.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe14844468d1931a1f6563e1bbf5f474fe300c6ef1a51eaa1084853e56205b55",
          "md5": "907bcf8171d6764192e3caa4758a6814",
          "sha256": "37f120f98a9e55396169d199e51b96db287eb3d018333720afd2921136dc2f87"
        },
        "downloads": -1,
        "filename": "blockchyp-2.13.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "907bcf8171d6764192e3caa4758a6814",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81297,
        "upload_time": "2022-06-27T23:18:06",
        "upload_time_iso_8601": "2022-06-27T23:18:06.289958Z",
        "url": "https://files.pythonhosted.org/packages/fe/14/844468d1931a1f6563e1bbf5f474fe300c6ef1a51eaa1084853e56205b55/blockchyp-2.13.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.13.3.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f1d765d62b1f75acade7f2511d367e3b705250029b29990af8e90c20cafd3fc",
          "md5": "1c31a0890ca483d7604b91eb1168f3cd",
          "sha256": "68518c37e1359fbc3f9ec6751e6901f05ca59ff7791a068fecb94c3df3849fc7"
        },
        "downloads": -1,
        "filename": "blockchyp-2.13.3.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c31a0890ca483d7604b91eb1168f3cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38719,
        "upload_time": "2022-09-28T22:12:08",
        "upload_time_iso_8601": "2022-09-28T22:12:08.899448Z",
        "url": "https://files.pythonhosted.org/packages/5f/1d/765d62b1f75acade7f2511d367e3b705250029b29990af8e90c20cafd3fc/blockchyp-2.13.3.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ede9350d5ecd740c1be595bfe3173011125024857ff270e46c9806b12dac1ab",
          "md5": "13ea89f995861258606c73fd72062f50",
          "sha256": "9b81bfd63db93c87db9350c58c4c4d750c13fe1c30094b4cb1b597dbac9495b2"
        },
        "downloads": -1,
        "filename": "blockchyp-2.13.3.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "13ea89f995861258606c73fd72062f50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81357,
        "upload_time": "2022-09-28T22:12:12",
        "upload_time_iso_8601": "2022-09-28T22:12:12.224798Z",
        "url": "https://files.pythonhosted.org/packages/1e/de/9350d5ecd740c1be595bfe3173011125024857ff270e46c9806b12dac1ab/blockchyp-2.13.3.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.13.4.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0713a21a44c3b0e781ac41698c77e53de8c065fbe63bd6c695a1f43373e4473",
          "md5": "c5b55c102af8b5af247346d629fabe77",
          "sha256": "38130f73763639380a29c332074a604ea5b66c457aeae2237cfca2575ddcc36f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.13.4.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5b55c102af8b5af247346d629fabe77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38719,
        "upload_time": "2022-09-28T22:22:45",
        "upload_time_iso_8601": "2022-09-28T22:22:45.866768Z",
        "url": "https://files.pythonhosted.org/packages/b0/71/3a21a44c3b0e781ac41698c77e53de8c065fbe63bd6c695a1f43373e4473/blockchyp-2.13.4.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31c78e90a7c95d4e77afa0b1f3c8bf3325b0d4567218b0aba90a67e32d1c4b04",
          "md5": "0a34ae8817424f9583fcf11853e7e0b9",
          "sha256": "5df99aa8b8c566708b622143bf36de6b0197a684e44ecb0065f66f018e138b40"
        },
        "downloads": -1,
        "filename": "blockchyp-2.13.4.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a34ae8817424f9583fcf11853e7e0b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81363,
        "upload_time": "2022-09-28T22:22:48",
        "upload_time_iso_8601": "2022-09-28T22:22:48.952369Z",
        "url": "https://files.pythonhosted.org/packages/31/c7/8e90a7c95d4e77afa0b1f3c8bf3325b0d4567218b0aba90a67e32d1c4b04/blockchyp-2.13.4.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.14.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68c396c309d9410a30939847051a81bd577ba45fe420be603437a852c17a4b6c",
          "md5": "53880c9c1b5e4b09d32c9400162189e6",
          "sha256": "65b7cc3b3a4267abfbaf988c0bed0e0d2997483dc9c03fe7cf4b41e9c1313c25"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53880c9c1b5e4b09d32c9400162189e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38719,
        "upload_time": "2022-09-30T15:03:38",
        "upload_time_iso_8601": "2022-09-30T15:03:38.441535Z",
        "url": "https://files.pythonhosted.org/packages/68/c3/96c309d9410a30939847051a81bd577ba45fe420be603437a852c17a4b6c/blockchyp-2.14.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "882e0b03fb638e7dcb7280fdac32215a37ddc3ab3462b9b81b0826fa5539edaa",
          "md5": "d1eedc5bac9586cb690cb8edfde56a0e",
          "sha256": "6dd90060c940c7cbf87435787c61c964604b8b1a1b67dcc47f2ad313f8451bff"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1eedc5bac9586cb690cb8edfde56a0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81325,
        "upload_time": "2022-09-30T15:03:41",
        "upload_time_iso_8601": "2022-09-30T15:03:41.109370Z",
        "url": "https://files.pythonhosted.org/packages/88/2e/0b03fb638e7dcb7280fdac32215a37ddc3ab3462b9b81b0826fa5539edaa/blockchyp-2.14.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.14.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7fb750062a11355e6b01a6a45011ee7b8fdc7060833d32955ac51ad0f755526",
          "md5": "785959448fe0d81b4a609c942e65e011",
          "sha256": "dc2f013410c22d90f68dfe2c62abe5d69dbc30ecebeb26c43ace3c0dec639aad"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "785959448fe0d81b4a609c942e65e011",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38718,
        "upload_time": "2022-10-05T22:15:13",
        "upload_time_iso_8601": "2022-10-05T22:15:13.384999Z",
        "url": "https://files.pythonhosted.org/packages/d7/fb/750062a11355e6b01a6a45011ee7b8fdc7060833d32955ac51ad0f755526/blockchyp-2.14.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "974ba0b153f759a4e1a4352af69eb26c96dfc98be702fa7448f74934e3af3f55",
          "md5": "13321567f2538c16cfba62953c3eeed9",
          "sha256": "6032aa9c4fdee4511ec67295254ce92ba876f7c0d949b1d7c156e430f0e5074d"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "13321567f2538c16cfba62953c3eeed9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81336,
        "upload_time": "2022-10-05T22:15:16",
        "upload_time_iso_8601": "2022-10-05T22:15:16.031474Z",
        "url": "https://files.pythonhosted.org/packages/97/4b/a0b153f759a4e1a4352af69eb26c96dfc98be702fa7448f74934e3af3f55/blockchyp-2.14.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.14.2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10e043f16d29093cf116029765b007dafb7b6ade2369b03e89ab8aeb8ac7ab27",
          "md5": "705a70bf66c45712c27c09e01855e5ba",
          "sha256": "3d1bd6391a257f5f7b1029304a8c15e624f2473207e5f6864815962267cddbe6"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.2.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "705a70bf66c45712c27c09e01855e5ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38720,
        "upload_time": "2022-11-09T19:45:18",
        "upload_time_iso_8601": "2022-11-09T19:45:18.203396Z",
        "url": "https://files.pythonhosted.org/packages/10/e0/43f16d29093cf116029765b007dafb7b6ade2369b03e89ab8aeb8ac7ab27/blockchyp-2.14.2.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2c79032f6beb804615035debf7cd308e19e288cd449768a3bb35bbfb5ed1af0",
          "md5": "2ca4933baecf857cb1d69ec834aa79ec",
          "sha256": "d7afd6cea64cdf5b592c144c27048d2f4fd96b4269705a415085e3a069545723"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ca4933baecf857cb1d69ec834aa79ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81340,
        "upload_time": "2022-11-09T19:45:21",
        "upload_time_iso_8601": "2022-11-09T19:45:21.143850Z",
        "url": "https://files.pythonhosted.org/packages/a2/c7/9032f6beb804615035debf7cd308e19e288cd449768a3bb35bbfb5ed1af0/blockchyp-2.14.2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.14.3.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae92024996ee3c497844596b180bf8ddfb63db1afd85300db9db6fba83094a6c",
          "md5": "0780cb8d7a3b20feba4cb69f2a029566",
          "sha256": "59d0452cb2673d9ed5b60acff0232accd72f0263d534492cb20056adfffd9a21"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.3.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0780cb8d7a3b20feba4cb69f2a029566",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38720,
        "upload_time": "2022-12-05T22:02:43",
        "upload_time_iso_8601": "2022-12-05T22:02:43.082677Z",
        "url": "https://files.pythonhosted.org/packages/ae/92/024996ee3c497844596b180bf8ddfb63db1afd85300db9db6fba83094a6c/blockchyp-2.14.3.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8768c0b92f40fe1c889456213b3bd5b40711b12bba458037367a35d9f1c9cf88",
          "md5": "5ad824b85defd40a074bedcea7955826",
          "sha256": "2b877dd1d049811c857f37b1d89c4acedf1f8e086acebbd3bf4a44c13fac68c8"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.3.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ad824b85defd40a074bedcea7955826",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81328,
        "upload_time": "2022-12-05T22:02:45",
        "upload_time_iso_8601": "2022-12-05T22:02:45.504561Z",
        "url": "https://files.pythonhosted.org/packages/87/68/c0b92f40fe1c889456213b3bd5b40711b12bba458037367a35d9f1c9cf88/blockchyp-2.14.3.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.14.4.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d98ca477d8e0283b7b89fac5a83491a72cee7793e56467f88ee129c9b76dec78",
          "md5": "04cfc78a1c45a41c1a0bf844b3214712",
          "sha256": "71dac18df48d1d4734f0758c36851b014bf546cb8cb6e74cc601b74a713deb27"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.4.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04cfc78a1c45a41c1a0bf844b3214712",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 39149,
        "upload_time": "2022-12-06T20:00:36",
        "upload_time_iso_8601": "2022-12-06T20:00:36.124584Z",
        "url": "https://files.pythonhosted.org/packages/d9/8c/a477d8e0283b7b89fac5a83491a72cee7793e56467f88ee129c9b76dec78/blockchyp-2.14.4.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10e122b369260d58a5282591c727bf0b31749852259a4fddba5014a920c8efaf",
          "md5": "c9fb0aacf1ba1835ab9f523c8832f6e4",
          "sha256": "4f74b842efe0b976b7eb19948891b89dd233b2f58692915ff96195f1ab5a380a"
        },
        "downloads": -1,
        "filename": "blockchyp-2.14.4.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "c9fb0aacf1ba1835ab9f523c8832f6e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 82644,
        "upload_time": "2022-12-06T20:00:41",
        "upload_time_iso_8601": "2022-12-06T20:00:41.261027Z",
        "url": "https://files.pythonhosted.org/packages/10/e1/22b369260d58a5282591c727bf0b31749852259a4fddba5014a920c8efaf/blockchyp-2.14.4.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.15.5.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1a2d567041c6d0541d73ea73a0affa3acdd373f6b3f58d744306776eb9ce264",
          "md5": "78681ee50becd5ba92d96e379ae7aaf9",
          "sha256": "77132ac8cc2559e635746451a4c41f36a431f01fd846ded017a78c311e89237d"
        },
        "downloads": -1,
        "filename": "blockchyp-2.15.5.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78681ee50becd5ba92d96e379ae7aaf9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 39147,
        "upload_time": "2022-12-20T19:44:57",
        "upload_time_iso_8601": "2022-12-20T19:44:57.736963Z",
        "url": "https://files.pythonhosted.org/packages/d1/a2/d567041c6d0541d73ea73a0affa3acdd373f6b3f58d744306776eb9ce264/blockchyp-2.15.5.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b9bf297f77e3aa75cacebba7464962f6fb30e75a0ad2c72be2c0fde44a438aa",
          "md5": "e9539ec293998fc6dfee455e4be862d8",
          "sha256": "995c0520b7b560559b04676953e6aaec2ad99fbf7e87f07123e31054c26a2f53"
        },
        "downloads": -1,
        "filename": "blockchyp-2.15.5.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "e9539ec293998fc6dfee455e4be862d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 82642,
        "upload_time": "2022-12-20T19:44:59",
        "upload_time_iso_8601": "2022-12-20T19:44:59.773803Z",
        "url": "https://files.pythonhosted.org/packages/5b/9b/f297f77e3aa75cacebba7464962f6fb30e75a0ad2c72be2c0fde44a438aa/blockchyp-2.15.5.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10c858cc2a8fe7e32f26f76e37c58e4c5fa86d1bd838e23679fbcc92a6bde7a9",
          "md5": "d93e49f932a0282cc48955cdf4335d39",
          "sha256": "5f3ac13f98836abdacf9b15e989cc0d3886b25722092936baae30da3b234f67e"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d93e49f932a0282cc48955cdf4335d39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17728,
        "upload_time": "2020-03-25T16:37:43",
        "upload_time_iso_8601": "2020-03-25T16:37:43.899734Z",
        "url": "https://files.pythonhosted.org/packages/10/c8/58cc2a8fe7e32f26f76e37c58e4c5fa86d1bd838e23679fbcc92a6bde7a9/blockchyp-2.2.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2452f27770a616405f4bb7a5e3a0f81e94f8c3f999ae34eb8c9f32f59ccf441c",
          "md5": "6eed4c88ec56bbbc2e2bf37db6584db4",
          "sha256": "c68e34e26cb6b6e5f83b4aefe5591e68aa8b31d04431faf95a0a330139460d91"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "6eed4c88ec56bbbc2e2bf37db6584db4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19724,
        "upload_time": "2020-03-25T16:37:47",
        "upload_time_iso_8601": "2020-03-25T16:37:47.092385Z",
        "url": "https://files.pythonhosted.org/packages/24/52/f27770a616405f4bb7a5e3a0f81e94f8c3f999ae34eb8c9f32f59ccf441c/blockchyp-2.2.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c9cc15528ad211f91b2f29bf60a861e4fa515510c362417b2038800214e1252",
          "md5": "21e965681eee581fd82e12879d3a9a79",
          "sha256": "9058175c57a686d94b2bc981559a1c8d92fb320566ba5ade75ddd03e77396a55"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21e965681eee581fd82e12879d3a9a79",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17726,
        "upload_time": "2020-03-27T18:21:03",
        "upload_time_iso_8601": "2020-03-27T18:21:03.934780Z",
        "url": "https://files.pythonhosted.org/packages/2c/9c/c15528ad211f91b2f29bf60a861e4fa515510c362417b2038800214e1252/blockchyp-2.2.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ab0548ba5a64f29d8699093d7b0daf3862a73bd3daafb56353bbdca48504c82",
          "md5": "1166040b4a260461e4456fa48fb17dcc",
          "sha256": "beeffced5573b9ce570c62c1a69192e8bb9d8fade016d1e5fed5aec3efeb3df0"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "1166040b4a260461e4456fa48fb17dcc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19720,
        "upload_time": "2020-03-27T18:21:05",
        "upload_time_iso_8601": "2020-03-27T18:21:05.657116Z",
        "url": "https://files.pythonhosted.org/packages/7a/b0/548ba5a64f29d8699093d7b0daf3862a73bd3daafb56353bbdca48504c82/blockchyp-2.2.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0268d8659a6f33b94665d7a640f1cfb53f1514dd58d3f4721bd9480b439a9f9c",
          "md5": "5816e3d2a6f7ce9a30eb4a71b64a6975",
          "sha256": "43235154250ffbc68a2a3d84d0ccbc09e5762c3377d9da5d3b7ed4977f20a215"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.2.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5816e3d2a6f7ce9a30eb4a71b64a6975",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17726,
        "upload_time": "2020-03-30T17:28:32",
        "upload_time_iso_8601": "2020-03-30T17:28:32.912133Z",
        "url": "https://files.pythonhosted.org/packages/02/68/d8659a6f33b94665d7a640f1cfb53f1514dd58d3f4721bd9480b439a9f9c/blockchyp-2.2.2.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "520ae8f873501b63e2391d7c3cfef2a368fa9a7785a81862de96397ee47a73ce",
          "md5": "8d6e9b3d1e4f2ba79e10fb05aecb6559",
          "sha256": "58bc34a925504487d40a7d60a73b35b511d5a93d49268866991f0cd59645db2a"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "8d6e9b3d1e4f2ba79e10fb05aecb6559",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19722,
        "upload_time": "2020-03-30T17:28:34",
        "upload_time_iso_8601": "2020-03-30T17:28:34.478322Z",
        "url": "https://files.pythonhosted.org/packages/52/0a/e8f873501b63e2391d7c3cfef2a368fa9a7785a81862de96397ee47a73ce/blockchyp-2.2.2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.3.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c1cea0b842c9ad40b3d3916f5518635fefbc0200b163de999baa0b8b6dd0562",
          "md5": "4d5e744f08edddcdebc68332a7401768",
          "sha256": "46954576d61a60bb68566dde0f58b84f92a12e866f0106375203b741d758299f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.3.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d5e744f08edddcdebc68332a7401768",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17727,
        "upload_time": "2020-04-01T19:05:53",
        "upload_time_iso_8601": "2020-04-01T19:05:53.229596Z",
        "url": "https://files.pythonhosted.org/packages/8c/1c/ea0b842c9ad40b3d3916f5518635fefbc0200b163de999baa0b8b6dd0562/blockchyp-2.2.3.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "843fdda8e9fc192e7be58b937b17476fe4cda16a7acd2c7e216b5ac3d5fdfda3",
          "md5": "eb78ba6d99bb6607a6bcae85dc49a600",
          "sha256": "96c4bbd262dfd149953ab34c3fc1a43db257178618afb17dbdea2aca31a6c01e"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.3.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "eb78ba6d99bb6607a6bcae85dc49a600",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19718,
        "upload_time": "2020-04-01T19:05:54",
        "upload_time_iso_8601": "2020-04-01T19:05:54.509101Z",
        "url": "https://files.pythonhosted.org/packages/84/3f/dda8e9fc192e7be58b937b17476fe4cda16a7acd2c7e216b5ac3d5fdfda3/blockchyp-2.2.3.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.4.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d14fa2e83399e014a2e5cb5437ad051b7ab2b77309f1496ea772c2a457263c7d",
          "md5": "9edd9f69749b801a1666f5a0491804fb",
          "sha256": "a31610e85b11371487e5e054dc5217b108016bc58f158e4cb49b5ecb2f479142"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.4.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9edd9f69749b801a1666f5a0491804fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17727,
        "upload_time": "2020-04-08T23:04:37",
        "upload_time_iso_8601": "2020-04-08T23:04:37.719851Z",
        "url": "https://files.pythonhosted.org/packages/d1/4f/a2e83399e014a2e5cb5437ad051b7ab2b77309f1496ea772c2a457263c7d/blockchyp-2.2.4.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65c22a82a3ddb6b5585c9e1e052d486abc12c2fbd12bfc292a0a91d83785be03",
          "md5": "ef25b122c816628e8a25877318c5adf1",
          "sha256": "0882658abe5919911825a58a85ac7b35d4e778b4dd874069f77d06b59b08ba03"
        },
        "downloads": -1,
        "filename": "blockchyp-2.2.4.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "ef25b122c816628e8a25877318c5adf1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19723,
        "upload_time": "2020-04-08T23:04:39",
        "upload_time_iso_8601": "2020-04-08T23:04:39.278752Z",
        "url": "https://files.pythonhosted.org/packages/65/c2/2a82a3ddb6b5585c9e1e052d486abc12c2fbd12bfc292a0a91d83785be03/blockchyp-2.2.4.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e50fed7bd836b6e403cfa7ed94c11b53df7c7c6901fdf97cf562add084eb7a99",
          "md5": "203039ecf359bc6c5597195eebd34664",
          "sha256": "09630ef5257ea3818a305f67706980228aa4e70d6cd76f48f01465236c7a0533"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "203039ecf359bc6c5597195eebd34664",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17818,
        "upload_time": "2020-04-23T23:58:35",
        "upload_time_iso_8601": "2020-04-23T23:58:35.833144Z",
        "url": "https://files.pythonhosted.org/packages/e5/0f/ed7bd836b6e403cfa7ed94c11b53df7c7c6901fdf97cf562add084eb7a99/blockchyp-2.3.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4ca195b4872659c83f126b6f6aa29a5c05213e389eb1439e2aa684f9f1bc5e1",
          "md5": "d3dbf034c8dd7f204806fec443e062ab",
          "sha256": "8892bbf1f9e8919a942d3021d1b994e889c4a2a56fad52b3169d2d28c33c2b39"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "d3dbf034c8dd7f204806fec443e062ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19914,
        "upload_time": "2020-04-23T23:58:37",
        "upload_time_iso_8601": "2020-04-23T23:58:37.618271Z",
        "url": "https://files.pythonhosted.org/packages/e4/ca/195b4872659c83f126b6f6aa29a5c05213e389eb1439e2aa684f9f1bc5e1/blockchyp-2.3.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b35e9fd1ec356340b02ad8409e7c87d88e79b083cfb8ed18ecbf219b9a6c99d",
          "md5": "fa6c775dc572a3324dfea163f58523d7",
          "sha256": "82db72c094e144ba4ef7f46ceafcfe331e547f6d3b9ad29960241c0c765025a7"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa6c775dc572a3324dfea163f58523d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17817,
        "upload_time": "2020-04-24T22:05:59",
        "upload_time_iso_8601": "2020-04-24T22:05:59.582324Z",
        "url": "https://files.pythonhosted.org/packages/2b/35/e9fd1ec356340b02ad8409e7c87d88e79b083cfb8ed18ecbf219b9a6c99d/blockchyp-2.3.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7d792e48dec7e58f77b741e5ed70f50595cc7e6cf329978dbade82f3d30dfca",
          "md5": "22b1f91788fbb201e8d068ec3702f37b",
          "sha256": "dd851722e76508ace453713196674eb32ac3e5fd0c1e1aa5a0382285233bf43f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "22b1f91788fbb201e8d068ec3702f37b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19914,
        "upload_time": "2020-04-24T22:06:00",
        "upload_time_iso_8601": "2020-04-24T22:06:00.898781Z",
        "url": "https://files.pythonhosted.org/packages/f7/d7/92e48dec7e58f77b741e5ed70f50595cc7e6cf329978dbade82f3d30dfca/blockchyp-2.3.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e83661078f3c90d22e61c5e1c90bcd9152032c932fa2a84ff6c324cf8642e3c",
          "md5": "afa3677de4e967f71891eacb3553abac",
          "sha256": "4dc5d11ddb4e60ccbfbda3a82f52c7ad7fc01233258cebe69555e4ae98772137"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.2.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afa3677de4e967f71891eacb3553abac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 25132,
        "upload_time": "2020-05-05T17:50:20",
        "upload_time_iso_8601": "2020-05-05T17:50:20.232281Z",
        "url": "https://files.pythonhosted.org/packages/9e/83/661078f3c90d22e61c5e1c90bcd9152032c932fa2a84ff6c324cf8642e3c/blockchyp-2.3.2.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "882bf8611800d6706d6b506f28c819f684881da3a68c185234dfc17a3031b7c4",
          "md5": "ee68ad6d5cbafc5c1d1238793adc311e",
          "sha256": "880b016c78414a7c463b2f6db170322b4436ffbd65952880e986455c4e00e35f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "ee68ad6d5cbafc5c1d1238793adc311e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 45374,
        "upload_time": "2020-05-05T17:50:21",
        "upload_time_iso_8601": "2020-05-05T17:50:21.355272Z",
        "url": "https://files.pythonhosted.org/packages/88/2b/f8611800d6706d6b506f28c819f684881da3a68c185234dfc17a3031b7c4/blockchyp-2.3.2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.3.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27b743dc3fcd9efd31f997bb7c8714f27ece898fc577db3f1817380be3d323a5",
          "md5": "13f169dd2210f10e7b83b4112296a021",
          "sha256": "d91286b7b5c80249db012fd6f62abafa821f93c01d460e91a98348f466d5261f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.3.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13f169dd2210f10e7b83b4112296a021",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 25085,
        "upload_time": "2020-05-07T17:03:39",
        "upload_time_iso_8601": "2020-05-07T17:03:39.585435Z",
        "url": "https://files.pythonhosted.org/packages/27/b7/43dc3fcd9efd31f997bb7c8714f27ece898fc577db3f1817380be3d323a5/blockchyp-2.3.3.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75f52fe3eddc3bfdaa0936a01b858681d8091ef7716ea37db57d596c4e8e64c3",
          "md5": "adf80a78bca08c30ccb46df43a290026",
          "sha256": "d08987be7b21c2a58f6d08a1fc928a2c36e8f593d980febc2ab3cadedfb91081"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.3.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "adf80a78bca08c30ccb46df43a290026",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 45139,
        "upload_time": "2020-05-07T17:03:41",
        "upload_time_iso_8601": "2020-05-07T17:03:41.158804Z",
        "url": "https://files.pythonhosted.org/packages/75/f5/2fe3eddc3bfdaa0936a01b858681d8091ef7716ea37db57d596c4e8e64c3/blockchyp-2.3.3.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.4.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccaedeb7afde94a3dfc336a228901c8a70c07dedbefcdcaa4a4fb9cac1df8e27",
          "md5": "ce99447ccf2320f2fae77162809d0271",
          "sha256": "d0763aa76999a41688a44c5d8549ca5961bf172794e8d2ea8b409d2330a37232"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.4.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce99447ccf2320f2fae77162809d0271",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 25247,
        "upload_time": "2020-05-07T22:08:04",
        "upload_time_iso_8601": "2020-05-07T22:08:04.139941Z",
        "url": "https://files.pythonhosted.org/packages/cc/ae/deb7afde94a3dfc336a228901c8a70c07dedbefcdcaa4a4fb9cac1df8e27/blockchyp-2.3.4.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5b09f55376f0071c6da1a643bc0385497eb7ea9f98603d0a6beeba9eb55263b",
          "md5": "0a802cc2281d87d23efb912aa1e78b05",
          "sha256": "441d01f98d6bdf4f2e0002576255069bf8a8cbe890605ffea319f818167b3865"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.4.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a802cc2281d87d23efb912aa1e78b05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 45670,
        "upload_time": "2020-05-07T22:08:06",
        "upload_time_iso_8601": "2020-05-07T22:08:06.220507Z",
        "url": "https://files.pythonhosted.org/packages/d5/b0/9f55376f0071c6da1a643bc0385497eb7ea9f98603d0a6beeba9eb55263b/blockchyp-2.3.4.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.5.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f3e2690037a3bf8ed6122f1614fba5fd7c13fb37e2f3d585def34b0a1dc4a6",
          "md5": "aab779ca63c4a0e9ec7f10f524584b03",
          "sha256": "c5df1b88b6262b589d4be762e8d5d39d1ff925efd191630bb15cd25f7dff6ca5"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.5.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aab779ca63c4a0e9ec7f10f524584b03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26114,
        "upload_time": "2020-05-13T20:35:16",
        "upload_time_iso_8601": "2020-05-13T20:35:16.056945Z",
        "url": "https://files.pythonhosted.org/packages/e4/f3/e2690037a3bf8ed6122f1614fba5fd7c13fb37e2f3d585def34b0a1dc4a6/blockchyp-2.3.5.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc4432a4686851cd7a03254956f35811bb1fe90863da9a6d36d1afd38f42b961",
          "md5": "1cbb6a9d5d02faf322095caccf29d854",
          "sha256": "8627ae8a24b0bc26abb08b9a9795a71d89ccbf01e78bfe992660871cc62efd78"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.5.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "1cbb6a9d5d02faf322095caccf29d854",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48306,
        "upload_time": "2020-05-13T20:35:17",
        "upload_time_iso_8601": "2020-05-13T20:35:17.876441Z",
        "url": "https://files.pythonhosted.org/packages/fc/44/32a4686851cd7a03254956f35811bb1fe90863da9a6d36d1afd38f42b961/blockchyp-2.3.5.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.6.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95938a71a3dcafa4371ad9eba1d6d4c0c67a44809fd7a4e5578da93bfb29737b",
          "md5": "fe0b2e50632e602c1bc155cb662af945",
          "sha256": "8203ad3bdbe0f54265e79a11f66a594e4804fc05030d8a2fe37ded82a53c8645"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.6.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe0b2e50632e602c1bc155cb662af945",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26111,
        "upload_time": "2020-05-14T20:50:22",
        "upload_time_iso_8601": "2020-05-14T20:50:22.126006Z",
        "url": "https://files.pythonhosted.org/packages/95/93/8a71a3dcafa4371ad9eba1d6d4c0c67a44809fd7a4e5578da93bfb29737b/blockchyp-2.3.6.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0f720aac69f80238c075190c7f129c0b6971655883c0a4bcf9a848bd1da5aa5",
          "md5": "9a05200585127803f390a9a780488251",
          "sha256": "800ebb9549db5249cfb847b62085a1e61f41a769e6a03a2c12c8e376f700ff25"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.6.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a05200585127803f390a9a780488251",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48285,
        "upload_time": "2020-05-14T20:50:23",
        "upload_time_iso_8601": "2020-05-14T20:50:23.533403Z",
        "url": "https://files.pythonhosted.org/packages/e0/f7/20aac69f80238c075190c7f129c0b6971655883c0a4bcf9a848bd1da5aa5/blockchyp-2.3.6.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.7.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06051c679370e637961a69d9f699d440c0f86c5f6f394bb00bd73bb5506b2c62",
          "md5": "720825e61dbc224e02a5981ae00902c0",
          "sha256": "24f52f5e780ff40ec5820744b6c837e67e5dd2df5bfb5f551112077cf5c0c0d7"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.7.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "720825e61dbc224e02a5981ae00902c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26246,
        "upload_time": "2020-07-02T21:09:37",
        "upload_time_iso_8601": "2020-07-02T21:09:37.086314Z",
        "url": "https://files.pythonhosted.org/packages/06/05/1c679370e637961a69d9f699d440c0f86c5f6f394bb00bd73bb5506b2c62/blockchyp-2.3.7.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13ccc2ed41723c9fdfe023807b5379854f0bcbe340865ac87ba29856c3c3fa58",
          "md5": "ddf24be72abc4278f316d3aaa88edbe0",
          "sha256": "aa1fd85ef844329bd2840e1df17fb2d7b16b60e6f2cda2187ffda0a023ec5ce1"
        },
        "downloads": -1,
        "filename": "blockchyp-2.3.7.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "ddf24be72abc4278f316d3aaa88edbe0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48651,
        "upload_time": "2020-07-02T21:09:38",
        "upload_time_iso_8601": "2020-07-02T21:09:38.769983Z",
        "url": "https://files.pythonhosted.org/packages/13/cc/c2ed41723c9fdfe023807b5379854f0bcbe340865ac87ba29856c3c3fa58/blockchyp-2.3.7.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6a3df945a88b5b3376bfc14fd847007b9cc0971068ab32d893a1a804cdf9750",
          "md5": "dd91daaf9daf2af54a0e6d5b407c94d0",
          "sha256": "713a768fd042864d3761e9fb6b4e6a45ed80183de70d905e9eaadd14877b0da8"
        },
        "downloads": -1,
        "filename": "blockchyp-2.4.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd91daaf9daf2af54a0e6d5b407c94d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26273,
        "upload_time": "2020-08-13T20:24:13",
        "upload_time_iso_8601": "2020-08-13T20:24:13.164605Z",
        "url": "https://files.pythonhosted.org/packages/a6/a3/df945a88b5b3376bfc14fd847007b9cc0971068ab32d893a1a804cdf9750/blockchyp-2.4.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04c6f8bffcc636a4043fcb5b985776a856ce4159756108ea45f4263c749b2f8c",
          "md5": "138a5b5b01529e7fcbf09254102d09ba",
          "sha256": "5f0308232d1148f72d0ba7b5c009faa8bfb31486210aebe7de2eb3fa668dd7ed"
        },
        "downloads": -1,
        "filename": "blockchyp-2.4.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "138a5b5b01529e7fcbf09254102d09ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48723,
        "upload_time": "2020-08-13T20:24:14",
        "upload_time_iso_8601": "2020-08-13T20:24:14.926662Z",
        "url": "https://files.pythonhosted.org/packages/04/c6/f8bffcc636a4043fcb5b985776a856ce4159756108ea45f4263c749b2f8c/blockchyp-2.4.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28bc288caa7e24a48e5b901d1ec5193be7414c1c13ccdf34d9b708c066b44354",
          "md5": "992a7edf652aab910d8cf0917e0de914",
          "sha256": "14c4f1039c70259b5f240a828ca6330a8fe310b1861450dd92d2ec5096774eb0"
        },
        "downloads": -1,
        "filename": "blockchyp-2.5.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "992a7edf652aab910d8cf0917e0de914",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26274,
        "upload_time": "2020-09-29T15:17:34",
        "upload_time_iso_8601": "2020-09-29T15:17:34.214201Z",
        "url": "https://files.pythonhosted.org/packages/28/bc/288caa7e24a48e5b901d1ec5193be7414c1c13ccdf34d9b708c066b44354/blockchyp-2.5.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16524548ce8ca9c3efa4cd2b369ae17821d92e7eecdf316041c21f88e3b50547",
          "md5": "9341cbedbdef09f183602222410c794e",
          "sha256": "6b0f691d0cd3b116f5400b690112d1c3034b1e0120ceb1712ec999406e03eaab"
        },
        "downloads": -1,
        "filename": "blockchyp-2.5.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "9341cbedbdef09f183602222410c794e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48721,
        "upload_time": "2020-09-29T15:17:35",
        "upload_time_iso_8601": "2020-09-29T15:17:35.624679Z",
        "url": "https://files.pythonhosted.org/packages/16/52/4548ce8ca9c3efa4cd2b369ae17821d92e7eecdf316041c21f88e3b50547/blockchyp-2.5.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.6.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ac6798ee0d78038f334d87dfb2c57852b63cf63a47a6f3aa504b744eb404da7",
          "md5": "4023e7859c2ed5dd17f2d49f52c55ff9",
          "sha256": "7c73f7d9c96f442e7770789e3e2b80d87214c35ecb60c3dae34520b3e6f43bc0"
        },
        "downloads": -1,
        "filename": "blockchyp-2.6.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4023e7859c2ed5dd17f2d49f52c55ff9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26274,
        "upload_time": "2020-10-28T18:22:28",
        "upload_time_iso_8601": "2020-10-28T18:22:28.835587Z",
        "url": "https://files.pythonhosted.org/packages/4a/c6/798ee0d78038f334d87dfb2c57852b63cf63a47a6f3aa504b744eb404da7/blockchyp-2.6.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c1dc469eed94485ba8e5b558b289a3e910c289071c4affa2effd2257c970f33",
          "md5": "d55825d1c003e1b5bb26cc63f1b68151",
          "sha256": "fd19e98415fd244b4e2b6d8c8005d9e8c3146af3146019914271d96e5aebcfda"
        },
        "downloads": -1,
        "filename": "blockchyp-2.6.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "d55825d1c003e1b5bb26cc63f1b68151",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48725,
        "upload_time": "2020-10-28T18:22:30",
        "upload_time_iso_8601": "2020-10-28T18:22:30.328812Z",
        "url": "https://files.pythonhosted.org/packages/4c/1d/c469eed94485ba8e5b558b289a3e910c289071c4affa2effd2257c970f33/blockchyp-2.6.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ead156cf34995fee87dbafc3fe6a8b4efbbcab8ee50c851f2c91a2b4294aaf9",
          "md5": "b087ef3729d95fdf7eccc59c4f13622b",
          "sha256": "af6a7414cfd8aa6968a6c59ab5c4307f41ac82f5dd0180ff638ad71d26c5cda6"
        },
        "downloads": -1,
        "filename": "blockchyp-2.7.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b087ef3729d95fdf7eccc59c4f13622b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26273,
        "upload_time": "2021-04-23T14:49:35",
        "upload_time_iso_8601": "2021-04-23T14:49:35.200545Z",
        "url": "https://files.pythonhosted.org/packages/2e/ad/156cf34995fee87dbafc3fe6a8b4efbbcab8ee50c851f2c91a2b4294aaf9/blockchyp-2.7.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "042c71d7184dd075d3c545ab6ca1de525320e47f2665ea914b784fd301b5cee8",
          "md5": "e02e8fb43fcf7978f3bb20da18cdb675",
          "sha256": "6922636d1369ada1c48ea0eb7e1ce628210754019bae0ad3881cabf1081160a4"
        },
        "downloads": -1,
        "filename": "blockchyp-2.7.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "e02e8fb43fcf7978f3bb20da18cdb675",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48723,
        "upload_time": "2021-04-23T14:49:36",
        "upload_time_iso_8601": "2021-04-23T14:49:36.754786Z",
        "url": "https://files.pythonhosted.org/packages/04/2c/71d7184dd075d3c545ab6ca1de525320e47f2665ea914b784fd301b5cee8/blockchyp-2.7.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.8.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a91796de3233002cf6c61b7536debf5af94314b3f14ec2e1b8e7ed74d387e0e7",
          "md5": "b087596236aae00ed93c2060684aa884",
          "sha256": "cb98eb091ad2983c5a6069d46b2b082d05e49b0ab06bd576877d02f90cb8b0f6"
        },
        "downloads": -1,
        "filename": "blockchyp-2.8.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b087596236aae00ed93c2060684aa884",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26272,
        "upload_time": "2021-05-11T19:45:47",
        "upload_time_iso_8601": "2021-05-11T19:45:47.029272Z",
        "url": "https://files.pythonhosted.org/packages/a9/17/96de3233002cf6c61b7536debf5af94314b3f14ec2e1b8e7ed74d387e0e7/blockchyp-2.8.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ded7a57a7ed7119ca377950eec5e15374b4166c83d1679bf6d0497ba5a03320",
          "md5": "4bc3f67e56df4b17f5df9f00c78ce493",
          "sha256": "8f7aa00b1dd9ba3e18048d56d9802754c847f8b4c046e858dd408e1ab96b92ce"
        },
        "downloads": -1,
        "filename": "blockchyp-2.8.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "4bc3f67e56df4b17f5df9f00c78ce493",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 48726,
        "upload_time": "2021-05-11T19:45:48",
        "upload_time_iso_8601": "2021-05-11T19:45:48.826735Z",
        "url": "https://files.pythonhosted.org/packages/5d/ed/7a57a7ed7119ca377950eec5e15374b4166c83d1679bf6d0497ba5a03320/blockchyp-2.8.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.8.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4187621d3c1df5055f08efe5a85563c95449cceb80f6ba8dd5bee0cbcbfa6fa8",
          "md5": "921dd6780d2336ae1cbb29515bacafa4",
          "sha256": "961f8457d7b9f10df7f26dbbf4c51d886fca7f9ac5df64d2f7b5413e0b70d31d"
        },
        "downloads": -1,
        "filename": "blockchyp-2.8.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "921dd6780d2336ae1cbb29515bacafa4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26350,
        "upload_time": "2021-06-02T16:51:29",
        "upload_time_iso_8601": "2021-06-02T16:51:29.234619Z",
        "url": "https://files.pythonhosted.org/packages/41/87/621d3c1df5055f08efe5a85563c95449cceb80f6ba8dd5bee0cbcbfa6fa8/blockchyp-2.8.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "733a4d4731597213b161bee2964cc71da7309b032721796e5aa74656bda76479",
          "md5": "dee894a65c0719aa2a8c2253cec8204b",
          "sha256": "81ccd16f6d18b33a4126f514af1a92406afa51128bc9e05a00fcec1e20a5c33e"
        },
        "downloads": -1,
        "filename": "blockchyp-2.8.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "dee894a65c0719aa2a8c2253cec8204b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 47547,
        "upload_time": "2021-06-02T16:51:30",
        "upload_time_iso_8601": "2021-06-02T16:51:30.678200Z",
        "url": "https://files.pythonhosted.org/packages/73/3a/4d4731597213b161bee2964cc71da7309b032721796e5aa74656bda76479/blockchyp-2.8.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8eeeabac3bde7c7f01c56453cda0fe31d5c82b271578c9f403af084a2370f6d9",
          "md5": "45b3dce259a8dc71e1dbe94e2d945d97",
          "sha256": "f2898b31b2609b3e44a993362e7e4289ff9ed7b6e7a80063548646c22e716301"
        },
        "downloads": -1,
        "filename": "blockchyp-2.9.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45b3dce259a8dc71e1dbe94e2d945d97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26386,
        "upload_time": "2021-07-09T17:22:32",
        "upload_time_iso_8601": "2021-07-09T17:22:32.954199Z",
        "url": "https://files.pythonhosted.org/packages/8e/ee/abac3bde7c7f01c56453cda0fe31d5c82b271578c9f403af084a2370f6d9/blockchyp-2.9.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61a851392458f3a97a127533a3f1e427d3735a9224bf643ff57f547eb6e2a278",
          "md5": "a21a508e32a4d5985adf9768ffc8f226",
          "sha256": "6d85311dd3311132dc2601923e1e445e41ff72864d89606e849a891b866517dc"
        },
        "downloads": -1,
        "filename": "blockchyp-2.9.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "a21a508e32a4d5985adf9768ffc8f226",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 47650,
        "upload_time": "2021-07-09T17:22:34",
        "upload_time_iso_8601": "2021-07-09T17:22:34.759853Z",
        "url": "https://files.pythonhosted.org/packages/61/a8/51392458f3a97a127533a3f1e427d3735a9224bf643ff57f547eb6e2a278/blockchyp-2.9.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb33274d864946d8333e82067082eddc7608e52c38ff21680713909261d7ef52",
          "md5": "921ac304654c242cbca3c56cf35926ab",
          "sha256": "5845a455cd6da1da8be1622d162c1ef70fffd6b1d8075dc4005d6b4c07487498"
        },
        "downloads": -1,
        "filename": "blockchyp-2.9.2.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "921ac304654c242cbca3c56cf35926ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26387,
        "upload_time": "2021-07-12T21:51:37",
        "upload_time_iso_8601": "2021-07-12T21:51:37.343217Z",
        "url": "https://files.pythonhosted.org/packages/fb/33/274d864946d8333e82067082eddc7608e52c38ff21680713909261d7ef52/blockchyp-2.9.2.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a16102e19c99132fb0c71aba62359551f95b516b99265b202623c6148a34983f",
          "md5": "4eba952d768b80f52e684d135d6875b3",
          "sha256": "2404feb8f1d64e65f7b4b3e904d9f6f797de142e0cb0ddd1c8b2a4e618febf1a"
        },
        "downloads": -1,
        "filename": "blockchyp-2.9.2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "4eba952d768b80f52e684d135d6875b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 47654,
        "upload_time": "2021-07-12T21:51:38",
        "upload_time_iso_8601": "2021-07-12T21:51:38.932717Z",
        "url": "https://files.pythonhosted.org/packages/a1/61/02e19c99132fb0c71aba62359551f95b516b99265b202623c6148a34983f/blockchyp-2.9.2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.3.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8398e09f2b7f6d22c54d17f5160d93ae6f23f44c2d1078a88e23138e7694a4de",
          "md5": "a864b43c3aff560d50df00616fd86d85",
          "sha256": "6cd79c2b4c1de8db4512ae4d060af3cb9beacf1199a0ad747b0c7d7c7462e41f"
        },
        "downloads": -1,
        "filename": "blockchyp-2.9.3.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a864b43c3aff560d50df00616fd86d85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 26387,
        "upload_time": "2021-08-30T20:59:05",
        "upload_time_iso_8601": "2021-08-30T20:59:05.024304Z",
        "url": "https://files.pythonhosted.org/packages/83/98/e09f2b7f6d22c54d17f5160d93ae6f23f44c2d1078a88e23138e7694a4de/blockchyp-2.9.3.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77a398b8799d69262817ab1eec1265de8e06da5b538e01cb8bb6038c60f07604",
          "md5": "320109ffddbb1fcb0541a0d732aab04a",
          "sha256": "a11218dbffc8feb9a2d653a60b7999109299d49cf3623df9be12211f39863bf3"
        },
        "downloads": -1,
        "filename": "blockchyp-2.9.3.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "320109ffddbb1fcb0541a0d732aab04a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 47660,
        "upload_time": "2021-08-30T20:59:06",
        "upload_time_iso_8601": "2021-08-30T20:59:06.378715Z",
        "url": "https://files.pythonhosted.org/packages/77/a3/98b8799d69262817ab1eec1265de8e06da5b538e01cb8bb6038c60f07604/blockchyp-2.9.3.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.6.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82993da2ad882f81904a8d12202b412c63ca656319c164a7bdf7c28995ab8d5c",
          "md5": "7a141dc3b9d971e235b4fcad755cda5c",
          "sha256": "5ff8f09434758c4fb73f76626d55e63019d40dccf36e43507b36cd670a4c8aaa"
        },
        "downloads": -1,
        "filename": "blockchyp-2.9.6.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a141dc3b9d971e235b4fcad755cda5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38706,
        "upload_time": "2022-09-30T14:57:36",
        "upload_time_iso_8601": "2022-09-30T14:57:36.458491Z",
        "url": "https://files.pythonhosted.org/packages/82/99/3da2ad882f81904a8d12202b412c63ca656319c164a7bdf7c28995ab8d5c/blockchyp-2.9.6.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37eb1ac942044b53b2cf63f5280c3b458d488039a74ae19d9863f0f114c172db",
          "md5": "22cbcd4f856e65e6e5872351a779df2b",
          "sha256": "067cf972bb2ba2b69dce4906db625923e3a69d8593cdea393e8e8c93ccb2b847"
        },
        "downloads": -1,
        "filename": "blockchyp-2.9.6.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "22cbcd4f856e65e6e5872351a779df2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 81329,
        "upload_time": "2022-09-30T14:57:38",
        "upload_time_iso_8601": "2022-09-30T14:57:38.839537Z",
        "url": "https://files.pythonhosted.org/packages/37/eb/1ac942044b53b2cf63f5280c3b458d488039a74ae19d9863f0f114c172db/blockchyp-2.9.6.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1a2d567041c6d0541d73ea73a0affa3acdd373f6b3f58d744306776eb9ce264",
        "md5": "78681ee50becd5ba92d96e379ae7aaf9",
        "sha256": "77132ac8cc2559e635746451a4c41f36a431f01fd846ded017a78c311e89237d"
      },
      "downloads": -1,
      "filename": "blockchyp-2.15.5.post1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "78681ee50becd5ba92d96e379ae7aaf9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 39147,
      "upload_time": "2022-12-20T19:44:57",
      "upload_time_iso_8601": "2022-12-20T19:44:57.736963Z",
      "url": "https://files.pythonhosted.org/packages/d1/a2/d567041c6d0541d73ea73a0affa3acdd373f6b3f58d744306776eb9ce264/blockchyp-2.15.5.post1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b9bf297f77e3aa75cacebba7464962f6fb30e75a0ad2c72be2c0fde44a438aa",
        "md5": "e9539ec293998fc6dfee455e4be862d8",
        "sha256": "995c0520b7b560559b04676953e6aaec2ad99fbf7e87f07123e31054c26a2f53"
      },
      "downloads": -1,
      "filename": "blockchyp-2.15.5.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "e9539ec293998fc6dfee455e4be862d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 82642,
      "upload_time": "2022-12-20T19:44:59",
      "upload_time_iso_8601": "2022-12-20T19:44:59.773803Z",
      "url": "https://files.pythonhosted.org/packages/5b/9b/f297f77e3aa75cacebba7464962f6fb30e75a0ad2c72be2c0fde44a438aa/blockchyp-2.15.5.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}