{
  "info": {
    "author": "Joshua McPherson",
    "author_email": "joshuamcpherson5@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# degooged-tube\n\n> An adless, accountless, trackerless youtube interface with a sub box\n- [INSTALLATION](#INSTALLATION)\n- [ABOUT](#ABOUT)\n- [CLI-USAGE](#CLI-USAGE)\n- [API-USAGE](#API-USAGE)\n- [DEVELOPMENT](#DEVLOPMENT)\n- [SCRAPING](#SCRAPING)\n- [SANATIZATION](#SANATIZATION)\n- [YOUTUBE-API-WRAPPERS](#YOUTUBE-API-WRAPPERS)\n- [DATA-PIPELINE](#DATA-PIPELINE)\n\n\n# INSTALLATION\nRequires mpv for terminal playback\n\nInstall degooged-tube via pypi using pip:\n``` \npip install degooged-tube\n```\n\n\n# ABOUT\nAllows for youtube to be used from a terminal with no ads, without an account account, and while maintaining subbox functionality. \n\nCan be embedded into other projects using the API in `degooged_tube/ytApiHacking/__init__.py`\n\nAll youtube API scraping is done internally, with the exception of getting the streaming link for videos, which is done with `yt-dlp`\n\n\n\n# CLI-USAGE\nLaunch in terminal with command\n```\ndegooged-tube\n```\nFollow prompts to create a new 'user' (info is stored locally, has nothing to do with a youtube account), I recommend adding a few subs initially as it makes getting use to the cli easier.\n\n### General Interface\nCLI is interactive, options are displayed on the bottom of the screen and can be selected by entering the letter in the brackets, IE w for `(w)atch`.\n\nSome options IE `(w)atch` will show you a numbered list then prompt you for which number you want to watch, others IE `(p)revious/(n)ext page` will just preform the action.\n\n\n# API-USAGE\n`degooged_tube/ytApiHacking/__init__.py` contains getter functions to return dataclasses, aswell as `YtapiList` of dataclasses containing scraped data, the data in the dataclasses is self explainitory and the `YtapiList` can be indexed like normal python lists, throwing `IndexError` if value is out of bounds. There is also `YtApiList.getPaginated(pageNum, pageSize)` which returns a list of elements (pageSize is upper bound)\n\n\n# DEVELOPMENT\nTo build for development run:\n```\ngit clone https://github.com/PrinceOfPuppers/degooged-tube\n\ncd degooged-tube\n\npip install -e .\n```\nThis will build and install sync-dl in place, allowing you to work on the code without having to reinstall after changes.\n\n### Automated Testing\n```\npython test.py [options]\n```\nWill run all unit and integration tests, options are -u and -i to only run the unit/integration tests respectively.\n\n\n\n# SCRAPING\nyoutube will sometimes change their API, most of the time this is not an issue as the scraping engine is robust, however sometimes scrapers will be broken, as such here is a guide on how they work and how to repair them\n\nThe configuration of youtube-api hacking exists in `degooged_tube/ytApiHacking/controlPanel.py`\n\n### ScrapeJsonTree\nThe core of degooged-tube is a json scraping engine which is robust against changing apis, and easily repairable in the event of a scraper breaking.\n\nIt works by defining nodes in a json tree down to the data you wish to collect, you can specify as many or as few nodes as is needed.\n\n#### Examples\n```\n\"greetings\":{\n    \"hello\": \"there\",\n    \"howdy\": {\"name\": \"partner\"},\n    \"hi\":[\n        { \n            \"name\": \"alice\",\n            \"favColor\": \"blue\",\n            \"coolness\": \"megaRad\"\n        },\n        { \n            \"name\": \"bob\", \n            \"favColor\": \"green\",\n            \"coolness\": 11\n        },\n        { \n            \"name\": \"carol\",\n            \"favColor\": \"purple\",\n            \"coolness\": [\"super\", \"duper\", \"cool\"]\n        },\n        { \n            \"name\": \"dave\",\n            \"favColor\": \"purple\"\n        }\n    ]\n}\n```\nExample Scrapers: \n- `ScrapeNth(\"howdy\")` (N defaults to 1 or first) \\\n-> we would just get `{\"howdy\": {\"name\": \"partner\"}}`\n\n- `ScrapeNth(\"howdy\", collapse = True)` \\\n-> we would just get `{\"name\": \"partner\"}`, collapse just returns the data for a node, rather than key value pairs\n\n- `ScrapeAll(\"name\")` \\\n-> we would just get `{\"name\": [\"partner\", \"alice\", \"bob\", \"carol\", \"dave\"]}`\n\n- `ScrapeNth(\"hi\", [ScrapeNth(\"name\" )])` \\\n-> we would get `{\"hi\": {\"name\": \"alice\"}}\"` because we would first get `\"hi\"`, and then scrape for the first `\"name\"` in said data\n\n- `ScrapeNth(\"hi\", [ScrapeNth(\"name\", collapse=True)])` \\\n-> we would get `{\"hi\": \"alice\"}\"`, `\"name\"` has been collapsed\n\n- `ScrapeNth(\"hi\", [ScrapeNth(\"name\"), ScrapeNth(\"favColor\")])` \\\n-> we would get `{\"hi\": [{\"name\": \"alice\"}, {\"favColor\":\"blue\"}]}`\n\n- `ScrapeAll(\"name\", collapse=True, dataCondition=lambda data: data[1] = 'a')` \\\n-> we would get `['carol', 'dave']` as `dataCondition` filters all data which fail the condition\n\n- `ScrapeUnion([ScrapeNth(\"missing key\",[], collapse=True), ScrapeNth(\"hello\",[], collapse = True)])` \\\n-> we would get `\"there\"`, however if `\"missing key\"` was present we would get the data for that instead\n\nFor more examples using all nodes and arguments, see `degooged_tube/ytApiHacking/controlPanel.py`.\n\nFor more involved examples of how this system is used in practice, see `degooged_tube/tests/unitTests.py`.\n\n#### Node Types\n- `ScrapeNth`: \\\nScrapes and returns the data for n'th occurrence of the key\n\n- `ScrapeAll`: \\\nScrapes and returns the a list of data for all occurrence of the key\n\n- `ScrapeLongest`: \\\nScrapes and returns the data with largest `len(data)` for all occurrence of the key\n\n- `ScrapeUnion([Node1, Node2, ...])`: \\\nWill scrape for each node and return the data first one which matches\n\n- `ScrapeAllUnion`/`ScrapeAllUnionNode`: \\\nUsed together as such: `ScrapeAllUnion([ScrapeAllUnionNode, ScrapeAllUnionNode, ...])`, will return a list containing all matches for any of the `ScrapeAllUnionNode`\n\n- `ScrapeElement`: \\\nThe generic type of any scrape node\n\n\n# SANATIZATION\nAfter scraping the data is passed into the `.fromData()` constructor of a dataclass (ie `VideoInfo.fromData()`), all of which are located in `degooged_tube/ytApiHacking/controlPanel.py` where it is sanitized and any missing data can be filled with placeholder data\n\n\n# YOUTUBE-API-WRAPPERS \nThere are 3 Objects which which wrap the youtube-api and allow for easy access to resources\n\n#### YtInitalPage\n\nConstructed using `YtInitalPage.fromUrl(url: str)` gets a page and parses it for continuation chains and initial data\n\nThe method `page.scrapeInitalData(dataFmt: Union[ScrapeElement, list[ScrapeElement]])` will run scrapeJsonTree on any initial data found and return it as a dict\n\n#### YtApiList\nConstructed from `YtInitalPage`, it behaves like a list and making calls to a continuation chain as items are indexed.\n\nThe continuation chain is decided using the apiUrl, and by duck-typing based on the scrapeFmt (following only chains which match the dataFmt).\n\nContains `YtContIter`, an iterator which wraps the continuation chains, deals the requests, as well as implements the aforementioned duck-typing\n\n\n# DATA-PIPELINE\npipeline under the hood (note this is not a callstack, for example processInfo is called in getter, its more a sequence diagram):\n```\n                                                                youtube-api\n                                                                    ||\nurl/query -------------> getter --> YtInitalPage --+     +--> scrapeInitalData -------> scrapeJsonTree --> processInfo ---+---> fromData --> dataclass\n   |                                               +-----+                                                                |\n   +--> YtInitalPage --> getter -------------------+     +--> YtApiList/YtContIter ---> scrapeJsonTree --> onExtend ------+\n                                                                    ||\n                                                                youtube-api\n```\n\nLegend:\n- `url/query`: \\\nurl or search query\n\n- `YtInitalPage`: \\\ncreated using `fromUrl()` \n\n- `getter`: \\\nfunctions in `degooged_tube/ytApiHacking/__init__.py` prepended by `get`\n\n- `scrapeInitalData`: \\\na method of `YtInitalPage` is passes the requisite format to by getter\n\n- `YtApiList\\YtContIter`: \\\n`YtApiList` is instantiated by getter and passes the requisite format to by getter, `YtContIter` in instantiated as a component of `YtApiList`\n\n- `scrapeJsonTree`: \\\nuses the format on data requested from the youtube-api\n\n- `processInfo`: \\\nthe functions in `degooged_tube/ytApiHacking/__init__.py` called `process[BLANK]Info`, typically just calls `fromData` on the requisite dataclass\n\n- `onExtend`: \\\nthe functions in `degooged_tube/ytApiHacking/__init__.py` called `[BLANK]OnExtend`, typically just calls `fromData` on the requisite dataclass (can be overridden to inject data using `OnExtendKwargs` in a few cases)\n\n- `fromData`: \\\nthe constructors in `degooged_tube/ytApiHacking/controlPanel.py` which create a dataclass to hold the scraped data (ie `VideoInfo.fromData()`). they also sanitize and any replaces missing fields with placeholder data if possible\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PrinceOfPuppers/degooged-tube",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "degooged-tube",
    "package_url": "https://pypi.org/project/degooged-tube/",
    "platform": null,
    "project_url": "https://pypi.org/project/degooged-tube/",
    "project_urls": {
      "Homepage": "https://github.com/PrinceOfPuppers/degooged-tube"
    },
    "release_url": "https://pypi.org/project/degooged-tube/1.0.2/",
    "requires_dist": [
      "requests",
      "yt-dlp",
      "python-mpv"
    ],
    "requires_python": ">=3.6",
    "summary": "An adless, accountless, trackerless youtube interface with a sub box",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15543525,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d9c9349e689edb4cd22b2eac3779350f1363ae98be762615fa040ab1a49899b",
          "md5": "3ed57ac0383c96816e49304b004cd1c0",
          "sha256": "5a6f37f9bc2fc500274d9c6ddb00ad77a0562163b5f1d02c1eda130dd6f8e13e"
        },
        "downloads": -1,
        "filename": "degooged_tube-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ed57ac0383c96816e49304b004cd1c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39119,
        "upload_time": "2022-10-25T01:35:44",
        "upload_time_iso_8601": "2022-10-25T01:35:44.780732Z",
        "url": "https://files.pythonhosted.org/packages/1d/9c/9349e689edb4cd22b2eac3779350f1363ae98be762615fa040ab1a49899b/degooged_tube-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3bf42cd09e256d988d5ba7a6b2566e64375d6c3b345336aa4d4108e7ac25619",
          "md5": "8214997cbc518af3c258b58f6af867e3",
          "sha256": "e87fe05bd4bea1c0106a7a72285ee7ba71ae99836f9e69970bb6051f5599ad28"
        },
        "downloads": -1,
        "filename": "degooged_tube-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8214997cbc518af3c258b58f6af867e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39335,
        "upload_time": "2022-10-25T03:15:29",
        "upload_time_iso_8601": "2022-10-25T03:15:29.946813Z",
        "url": "https://files.pythonhosted.org/packages/f3/bf/42cd09e256d988d5ba7a6b2566e64375d6c3b345336aa4d4108e7ac25619/degooged_tube-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7e363b9dff405702cae30b6f2d133d042a3bac8645f6ebed0c7d3538eb0cbe4",
          "md5": "12ab6f4683654fe92972b661d99cfa31",
          "sha256": "d96326d760484b9911e3a8dcd3bd7748407382a9817a3c3e67fb20ee7f74ab48"
        },
        "downloads": -1,
        "filename": "degooged_tube-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12ab6f4683654fe92972b661d99cfa31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39382,
        "upload_time": "2022-10-26T20:41:59",
        "upload_time_iso_8601": "2022-10-26T20:41:59.399365Z",
        "url": "https://files.pythonhosted.org/packages/a7/e3/63b9dff405702cae30b6f2d133d042a3bac8645f6ebed0c7d3538eb0cbe4/degooged_tube-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7e363b9dff405702cae30b6f2d133d042a3bac8645f6ebed0c7d3538eb0cbe4",
        "md5": "12ab6f4683654fe92972b661d99cfa31",
        "sha256": "d96326d760484b9911e3a8dcd3bd7748407382a9817a3c3e67fb20ee7f74ab48"
      },
      "downloads": -1,
      "filename": "degooged_tube-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "12ab6f4683654fe92972b661d99cfa31",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 39382,
      "upload_time": "2022-10-26T20:41:59",
      "upload_time_iso_8601": "2022-10-26T20:41:59.399365Z",
      "url": "https://files.pythonhosted.org/packages/a7/e3/63b9dff405702cae30b6f2d133d042a3bac8645f6ebed0c7d3538eb0cbe4/degooged_tube-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}