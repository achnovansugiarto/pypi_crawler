{
  "info": {
    "author": "Gregory Halverson",
    "author_email": "Gregory.H.Halverson@jpl.nasa.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "===============\nOpenET - PT-JPL\n===============\n\n|version| |build|\n\n**WARNING: This code is in development, is being provided without support, and is subject to change at any time without notification**\n\nThis repository provides an Earth Engine Python API based implementation of the PT-JPL model for computing evapotranspiration (ET).\n\nThrough ecophysiological constraint functions, PT-JPL retrieves actual ET by reducing potential ET starting with the Priestley-Taylor equation (PriestleyTaylor1972_). A series of ecophysiological scalar functions, based on atmospheric vapor pressure deficit, relative humidity, and vegetation indices simultaneously reduce potential ET to actual ET, and partition total ET into three sources for canopy transpiration, soil evaporation, and interception evaporation (Fisher2008_). PT-JPL is run globally and continuously in space and time with no need for calibration or site-specific parameters.\n\nModel Design\n============\n\nThe primary component of the PT-JPL model is the Image() class.  The Image class can be used to compute a single ET image from a single input image.  The Image class should generally be instantiated from an Earth Engine Landsat image using the collection specific methods listed below.  ET image collections can be built by computing ET in a function that is mapped over a collection of input images.  Please see the `Example Notebooks`_ for more details.\n\nInput Collections\n=================\n\nPT-JPL can currently be computed for Landsat Collection 2 Level 2 (SR/ST) images  images from the following Earth Engine image collections:\n\n * LANDSAT/LT05/C02/T1_L2\n * LANDSAT/LE07/C02/T1_L2\n * LANDSAT/LC08/C02/T1_L2\n * LANDSAT/LC09/C02/T1_L2\n\nLandsat Collection 2 SR/ST Input Image\n--------------------------------------\n\nTo instantiate the class for a Landsat Collection 2 SR/ST image, use the Image.from_landsat_c2_sr method.\n\nThe input Landsat image must have the following bands and properties:\n\n=================  ======================================\nSPACECRAFT_ID      Band Names\n=================  ======================================\nLANDSAT_5          SR_B1, SR_B2, SR_B3, SR_B4, SR_B5, SR_B7, ST_B6, QA_PIXEL\nLANDSAT_7          SR_B1, SR_B2, SR_B3, SR_B4, SR_B5, SR_B7, ST_B6, QA_PIXEL\nLANDSAT_8          SR_B1, SR_B2, SR_B3, SR_B4, SR_B5, SR_B6, SR_B7, ST_B10, QA_PIXEL\nLANDSAT_9          SR_B1, SR_B2, SR_B3, SR_B4, SR_B5, SR_B6, SR_B7, ST_B10, QA_PIXEL\n=================  ======================================\n\n=================  =============================================\nProperty           Description\n=================  =============================================\nsystem:index       - Landsat Scene ID\n                   - Must be in the Earth Engine format (e.g. LC08_044033_20170716)\n                   - Used to lookup the scene specific c-factor\nsystem:time_start  Image datetime in milliseconds since 1970\nSPACECRAFT_ID      - Used to determine which Landsat type\n                   - Must be: LANDSAT_5, LANDSAT_7, LANDSAT_8, or LANDSAT_9\n=================  =============================================\n\nModel Output\n------------\n\nThe primary output of the PT-JPL model is the actual ET (ETa) in millimeters.\n\nExample\n-------\n\n.. code-block:: python\n\n    import openet.ptjpl as ptjpl\n\n    landsat_img = ee.Image('LANDSAT/LC08/C02/T1_L2/LC08_044033_20170716')\n    et_actual = ptjpl.Image.from_landsat_c2_sr(landsat_img).et\n\nExample Notebooks\n=================\n\n\nMeteorology\n===========\n\nThe `GEE NLDAS hourly image collection <https://developers.google.com/earth-engine/datasets/catalog/NASA_NLDAS_FORA0125_H002>`__ is the default and only currently supported meteorology source for the hourly air temperature, vapor pressure, windspeed, and incoming short and longwave solar radiation.\n\nAncillary Datasets\n==================\n\nOptimal temperature (Topt)\n--------------------------\n\n\nMaximum fraction of absorbed photosynthetically active radiation (fAPARmax)\n---------------------------------------------------------------------------\n\n\nInstallation\n============\n\nThe OpenET PT-JPL python module can be installed via pip:\n\n.. code-block:: console\n\n    pip install openet-ptjpl\n\nDependencies\n============\n\n * `earthengine-api <https://github.com/google/earthengine-api>`__\n * `openet-core <https://github.com/Open-ET/openet-core-beta>`__\n\nOpenET Namespace Package\n========================\n\nEach OpenET model is stored in the \"openet\" folder (namespace).  The model can then be imported as a \"dot\" submodule of the main openet module.\n\n.. code-block:: console\n\n    import openet.ptjpl as model\n\nDevelopment and Testing\n=======================\n\nPlease see the `CONTRIBUTING.rst <CONTRIBUTING.rst>`__.\n\nReferences\n==========\n\n.. _references:\n\n.. [Fisher2008]\n | Fisher, J., K. Tu, and D. Baldocchi (2008). Global estimates of the land-atmosphere water flux based on monthly AVHRR and ISLSCP-II data, validated at 16 FLUXNET sites, *Remote Sensing of Environment*, 112(3), 901-919.\n | `https://doi.org/10.1016/j.rse.2007.06.025 <https://doi.org/10.1016/j.rse.2007.06.025>`__\n.. [PriestleyTaylor1972]\n | Priestley, C. and R. Taylor (1972). On the assessment of surface heat flux and evaporation using large scale parameters. *Monthly Weather Review*, 100, 81â€“92.\n | `https://doi.org/10.1175/1520-0493%281972%29100%3C0081%3AOTAOSH%3E2.3.CO%3B2 <https://doi.org/10.1175/1520-0493%281972%29100%3C0081%3AOTAOSH%3E2.3.CO%3B2>`__\n\n.. |build| image:: https://github.com/Open-ET/openet-ptjpl/workflows/build/badge.svg\n   :alt: Build status\n   :target: https://github.com/Open-ET/openet-ptjpl\n.. |version| image:: https://badge.fury.io/py/openet-ptjpl.svg\n   :alt: Latest version on PyPI\n   :target: https://badge.fury.io/py/openet-ptjpl\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/Open-ET/openet-ptjpl/archive/v0.2.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Open-ET/openet-ptjpl",
    "keywords": "PTJPL OpenET Evapotranspiration Earth Engine",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openet-ptjpl",
    "package_url": "https://pypi.org/project/openet-ptjpl/",
    "platform": null,
    "project_url": "https://pypi.org/project/openet-ptjpl/",
    "project_urls": {
      "Download": "https://github.com/Open-ET/openet-ptjpl/archive/v0.2.1.tar.gz",
      "Homepage": "https://github.com/Open-ET/openet-ptjpl"
    },
    "release_url": "https://pypi.org/project/openet-ptjpl/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Earth Engine based PTJPL Model",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16367282,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fe05d3a08cdcd35a0bfc7ac6e7379f056e4b63d1e21ec3fddee34425348481e",
          "md5": "b0e146ec16d11e759473f8a02d577f25",
          "sha256": "e9c7429ab6b120215a8e79759f9b6875a7c93dc3ec339a68751afadddc976c87"
        },
        "downloads": -1,
        "filename": "openet-ptjpl-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b0e146ec16d11e759473f8a02d577f25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61433,
        "upload_time": "2023-01-09T23:55:12",
        "upload_time_iso_8601": "2023-01-09T23:55:12.052184Z",
        "url": "https://files.pythonhosted.org/packages/7f/e0/5d3a08cdcd35a0bfc7ac6e7379f056e4b63d1e21ec3fddee34425348481e/openet-ptjpl-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fe05d3a08cdcd35a0bfc7ac6e7379f056e4b63d1e21ec3fddee34425348481e",
        "md5": "b0e146ec16d11e759473f8a02d577f25",
        "sha256": "e9c7429ab6b120215a8e79759f9b6875a7c93dc3ec339a68751afadddc976c87"
      },
      "downloads": -1,
      "filename": "openet-ptjpl-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b0e146ec16d11e759473f8a02d577f25",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61433,
      "upload_time": "2023-01-09T23:55:12",
      "upload_time_iso_8601": "2023-01-09T23:55:12.052184Z",
      "url": "https://files.pythonhosted.org/packages/7f/e0/5d3a08cdcd35a0bfc7ac6e7379f056e4b63d1e21ec3fddee34425348481e/openet-ptjpl-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}