{
  "info": {
    "author": "Bogdan Kirilenko",
    "author_email": "kirilenkobm@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# py_nf library\n\nPython library to run batches of jobs using Nextflow.\n\nIf you write computational workflows in Python and need Nextflow only\nas an abstraction layer to execute batches of jobs, most likely py_nf is\nwhat you are looking for.\n\nPy_nf is a wrapper around nextflow: you provide a job list and batch parameters,\nthen py_nf creates and executes a temporary Nextflow pipeline.\n\n## Installation\n\n### Nextflow\nFirst of all install Nextflow and make sure you can call it.\nPlease see [nextflow.io](https://nextflow.io) for details.\n\nMost likely one of these commands will help:\n\n```shell script\ncurl -fsSL https://get.nextflow.io | bash\n# OR\nconda install -c bioconda nextflow\n```\n\nAlternatively, you can use utils.install_nf_if_not_installed function:\n\n```python\nfrom py_nf.utils import install_nf_if_not_installed\n# nf_executable -> absolute path to Nextflow executable\nnf_executable = install_nf_if_not_installed()\n```\n\n#### Nextflow install troubleshooting\n\nIf you work on MacOS and nextflow, being installed with conda, crashes with the following message:\n\n```\nThe operation couldnâ€™t be completed. Unable to locate a Java Runtime.\nPlease visit http://www.java.com for information on installing Java.\n\n/Users/XXX/opt/anaconda3/bin/nextflow: line 284: /bin/java: No such file or directory\nNOTE: Nextflow is trying to use the Java VM defined by the following environment variables:\n JAVA_CMD: /bin/java\n NXF_OPTS: \n```\n\nPlease follow the recipe [here](https://github.com/nextflow-io/nextflow/issues/1523). Nextflow has a pretty sophisticated procedure to identify Java runtime. Commenting a couple of lines in this procedure may help. \n\n### Py_nf library\n\nTo install py_nf just do:\n\n```shell script\npip3 install py_nf\n```\n\nIf it doesn't work please add --user flag.\n\n## Usage\n\nBasic usage scenario looks like this:\n\n```python\n# import py_nf library:\nfrom py_nf.py_nf import Nextflow\n\n# initiate nextflow handler\n# here you can define parameters such as executor, amount of memory per job\n# and so on, see Nextflow class parameters section for details\nnf = Nextflow(executor=\"local\", project_name=\"project\", cpus=4)\n\n# then generate a joblist\n# this must be a list (or other iterable such as tuple or even a generator) of strings\n# where each string is a command\njoblist = [\"script.py in/1.txt out/1.txt\",\n           \"script.py in/2.txt out/2.txt\"\n           \"script.py in/3.txt out/3.txt\"\n           \"script.py in/4.txt out/4.txt\"\n           \"script.py in/5.txt out/5.txt\"]\n\n# then execute this joblist using Nextflow\nstatus = nf.execute(joblist)\n\n# look at return status, there are 2 cases: either 0 or something else\nif status == 0:\n    # 0 means that Nextflow pipeline was executed without errors\n    # enjoy your results\n    pass\nelse:\n    # sadly, the pipeline failed\n    # py_nf doesn't terminate the program in this case to let user\n    # to do some cleanup, for example\n    # please read nextflow output messages and logs to figure out\n    # what exactly happened\n    # do_some_cleanup()\n    exit(1)\n```\n\nImportant:\n\nplease use absolute pathways in your commands!\n\nYou can use utils.paths_to_abspaths_in_joblist function:\n\n```python\nfrom py_nf.utils import paths_to_abspaths_in_joblist\n\njoblist = [\"script.py in/1.txt out/1.txt -p\",\n           \"script.py in/2.txt out/2.txt -p\"\n           \"script.py in/3.txt out/3.txt -p\"\n           \"script.py in/4.txt out/4.txt -p\"\n           \"script.py in/5.txt out/5.txt -p\"]\n\nabs_path_joblist = paths_to_abspaths_in_joblist(joblist)\n```\n\nThis function will search for file or directory paths in your batch and\nthen replace them with absolute paths.\n\nFor example, this command:\n\n```text\nscript.py in/1.txt out/1.txt -p\n```\n\nWill be replaced with something like this:\n\n```text\n/home/user/proj/script.py /home/user/proj/in/1.txt /home/user/proj/out/1.txt -p\n```\n\n### Read more about nextflow executors\n\nNextflow supports a wide range of cluster schedulers, please read about them and\nacceptable parameters [here](https://www.nextflow.io/docs/latest/executor.html).\n\n### Nextflow class parameters\n\nYou can initiate Nextflow() class with the parameters listed here.\nMost of these options reproduce Nextflow process parameters, you can read\nabout them in the [documentation](https://www.nextflow.io/docs/latest/process.html).\n\n1) *nextflow_executable*, \"nextflow\" is default.\nDefine the path to nextflow executable you like to use:\nnf = Nextflow(nextflow_executable=\"/home/user/nf_v20/nextflow\").\nMake sure you have the nextflow executable in a directory accesable \n2) *executor*, \"local\" is default.\nPlease read more about Nextflow executor in the corresponding section.\nTo use \"slurm\" executor do the following:\nnf = Nextflow(executor=\"slurm\")\n3) *error_strategy*, \"retry\" is default.\nYou can define errorStrategy nextflow parameter.\nPlease look for available errorStrategy options\n[here](https://www.nextflow.io/docs/latest/process.html#errorstrategy).\nUsage example:\nnf = Nextflow(error_strategy=\"ignore\")\n4) *max_retries*, default 3.\nControls Nextflow [maxRetries parameter](https://www.nextflow.io/docs/latest/process.html#maxretries).\nnf = Nextflow(max_retries=5).\n5) *queue*, default \"batch\".\nControls Nextflow process queue parameter.\nTo set \"long\" queue do:\nnf = Nextflow(queue=\"long\").\nA list of available queues depends on your scheduler.\n6) *memory*, default \"10\".\nAmount of memory each process is allowed to use.\nPlease find [here](https://www.nextflow.io/docs/latest/process.html#memory)\nhow to format the memory amount.\nTo set \"memory\" parameter to 100 do the following:\nnf = Nextflow(memory=\"100\", memory_units=\"GB\").\n7) *memory_units*, default \"GB\"\nThe parameter controls memory parameter units.\nFor example, with --memory 3500 and --time_units MB the process will be limited to 3500 megabytes.\nThe full list of available memory units is available at [here](https://www.nextflow.io/docs/latest/process.html#memory)\n8) *time*, default \"1\".\nThis parameter controls how long a process is allowed to run.\nPlease read formatting rules [here](https://www.nextflow.io/docs/latest/process.html#time).\nTo set the time limit to 1 day:\nnf = Nextflow(time=\"1d\").\n9) *time_units*, default \"h\"\nThis parametes allows to specify the time value units.\nFor example, with --time 11 and --time_units m the process will be limited to 11 minutes.\nThe full list of available time units is available at [here](https://www.nextflow.io/docs/latest/process.html#time)\n10) *cpus*, default 1.\nControls the number of CPUs required by each job.\nA usage example:\nnf = Nextflow(cpus=8).\n11) *queue_size*, default 100.\nControls nextflow process \"queue_size\" parameter.\nThe number of tasks the executor will handle in a parallel manner.\n12) *remove_logs*, default False.\nIf set to True and Nextflow executes jobs successfully, all intermediate and log files\nwill be removed.\nThis might be important because Nextflow produces a whole bunch of files which might\nbe not welcome at some file systems.\nTo set this parameter do the following:\nnf = Nextflow(remove_logs=True).\n13) *force_remove_logs*, default False.\nThe only difference with \"remove_logs\" parameter is that Nextflow logs and intermediate \nfiles will be removed in any case.\nnf = Nextflow(force_remove_logs=True).\n14) *wd*, cwd is default (directory you call the script from).\nThis is the directory where the library creates the project directory.\nThen the library saves nextflow script, configuration and all intermediate files to\nthe created project directory.\nUsage example:\nnf = Nextflow(wd=\"/tmp/project/\").\nMight be useful if the filesystem where you run your pipeline doesn't support file\nlocks and you have to run the nextflow pipeline outside the filesystem.\nPlease see Troubleshooting section case 1 for details.\n15) *project_name*, default: \"nextflow_project_at_{timestamp}\".\nBasically a project directory name where the library keeps all nextflow-related data and files.\nnf = Nextflow(project_name=\"test_project\").\nIf not set, the library will automatically generate the project name using timestamp.\n16) *no_nf_check*, default False.\nNormally the library checks whether there is an accessible nextflow executable and\nraises an error if that's not the case.\nIf you set it to True:\nnf = Nextflow(no_nf_check=True)\nthen library will not check for that on the stage of Nextflow class initiation.\n17) *switch_to_local*, default False.\nNormally the library checks, whether the executor which the user set is accessible.\nFor instance, if user set the \"executor\" parameter to \"slurm\", but there is not \"sbatch\"\nexecutable accessible, then program raises an error.\nHowever, if you set switch_to_local parameter:\nnf = Nextflow(switch_to_local=True),\nthe library will just replace \"slurm\" executor to \"local\".\n18) *retry_increase_mem*, default False\nIn case of job failure, retry with x2 memory.\n19) *retry_increase_time*, default False\nIn case of job failure, retry with x2 time.\n20) *executor_queuesize*, default 100\nControls executor.queueSize parameter\n21) *cluster_options*, default None\nControls nextflow clusterOptions parameter. A string to extend scheduler call. Please see:\nhttps://www.nextflow.io/docs/latest/process.html#process-clusteroptions\n[clusterOptions parameter](https://www.nextflow.io/docs/latest/process.html#process-clusteroptions)\nOption example: \"-S /bin/bash -l mem_free=20G -q all.q@compute-0-${key}\"\n\n\n### execute function parameters\n\nInput: list/tuple or other iterable of strings.\nEach string is a separate shell script command, such as:\n\n```shell script\npython3 script.py in_dir/file_1.txt out_dir/file_1.txt --some_option 1 --other_option 2\n```\n\nOutput: 0 or 1\n- If 0: nextflow pipeline executed successfully.\n- Otherwise, if 1: nextflow pipeline crashed.\nPlease have a look at logs.\n\nPlease note that if pipeline crashed, py_nf does not raise an error!\nUser should decide what to do in this case, for instance do some cleanup before or so.\n\nThe proper usage would be:\n\n```python\nstatus = nf.execute(job_list)\nif status == 1:\n    # pipeline failed, need to do some cleanup\n    do_some_cleanup()\n    sys.exit(1)\n```\n\n#### config_file option\n\nIf you already have a robust configuration file then you can use it with py_nf library.\nTo do so:\n\n```python\nstatus = nf.execute(job_list, config_file=\"/path/to/your/config/file\")\nif status == 1:\n    # pipeline failed, need to do some cleanup\n    do_some_cleanup()\n    sys.exit(1)\n```\n\n\n## Troubleshooting\n\nCase 1, you see an error message like this:\n\n```txt\nCan't open cache DB: /lustre/projects/project-xxx/.nextflow/cache/a80d212d-5a68-42b0-a8a5-d92665bdc492/db\n\nNextflow needs to be executed in a shared file system that supports file locks.\nAlternatively you can run it in a local directory and specify the shared work\ndirectory by using by `-w` command line option.\n```\n\nThat means your filesystem doesn't file locks: maybe it's lustre and your system\nadministrator disabled the locks.\nThe simplest way to override this is to pick some directory outside lustre filesystem and\ncall nextflow from there.\nYou can use \"wd\" parameter to do so:\n\n```python\nfrom py_nf.py_nf import Nextflow\n\nsome_dir = \"/home/user/nextflow_stuff\"\nnf = Nextflow(wd=some_dir)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kirilenkobm/py_nf",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Bogdan Kirilenko",
    "maintainer_email": "",
    "name": "py-nf",
    "package_url": "https://pypi.org/project/py-nf/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-nf/",
    "project_urls": {
      "Homepage": "https://github.com/kirilenkobm/py_nf"
    },
    "release_url": "https://pypi.org/project/py-nf/0.3.33/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Execute batches of jobs with nextflow",
    "version": "0.3.33",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15010214,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3736a05fed71d4790eb49978ee998727f984d7ea8c7237f74546e3155b3843a7",
          "md5": "91d08e9768ad6104134a49b8190300f0",
          "sha256": "682cf35d138549f6e6aa1348261403d0773f349cd56db0ba62aaabe160632a3e"
        },
        "downloads": -1,
        "filename": "py_nf-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91d08e9768ad6104134a49b8190300f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11743,
        "upload_time": "2020-09-19T16:54:52",
        "upload_time_iso_8601": "2020-09-19T16:54:52.749742Z",
        "url": "https://files.pythonhosted.org/packages/37/36/a05fed71d4790eb49978ee998727f984d7ea8c7237f74546e3155b3843a7/py_nf-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c66c44303aa9200dae81c935b7877284179f1411a6b10d7c28c0d0bad93df897",
          "md5": "999eddeae22da38ca19c239290c14792",
          "sha256": "110e07874b0e49f835afd9937352e24f7a082abe73965870b9e3061a8367963c"
        },
        "downloads": -1,
        "filename": "py_nf-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "999eddeae22da38ca19c239290c14792",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13672,
        "upload_time": "2020-09-19T16:54:55",
        "upload_time_iso_8601": "2020-09-19T16:54:55.648996Z",
        "url": "https://files.pythonhosted.org/packages/c6/6c/44303aa9200dae81c935b7877284179f1411a6b10d7c28c0d0bad93df897/py_nf-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e435109ae45d9480d8b1b374e9d2ba70c59e8ce972c50bc01659a5976e7f76a",
          "md5": "6d07f488dc2f4f48ca763873c96b1139",
          "sha256": "1006bc72218af5440c5fe44f5bd106d908cc3a78a7f635d8a434d1769f89167a"
        },
        "downloads": -1,
        "filename": "py_nf-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d07f488dc2f4f48ca763873c96b1139",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14173,
        "upload_time": "2022-01-04T12:51:47",
        "upload_time_iso_8601": "2022-01-04T12:51:47.422575Z",
        "url": "https://files.pythonhosted.org/packages/4e/43/5109ae45d9480d8b1b374e9d2ba70c59e8ce972c50bc01659a5976e7f76a/py_nf-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fd07da519dd104d63679e4c0b303ebc4b10683758d4e46bb6a0975cb53adc1d",
          "md5": "0484e62b4173ec2f3036b4b0b0d6b07f",
          "sha256": "5d1045cf6c326596315b10e1beb4ebf67eafef53e466d0e916c22ab04f844d3f"
        },
        "downloads": -1,
        "filename": "py_nf-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0484e62b4173ec2f3036b4b0b0d6b07f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15802,
        "upload_time": "2022-01-14T12:44:03",
        "upload_time_iso_8601": "2022-01-14T12:44:03.599152Z",
        "url": "https://files.pythonhosted.org/packages/7f/d0/7da519dd104d63679e4c0b303ebc4b10683758d4e46bb6a0975cb53adc1d/py_nf-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8a4fd634c513a9048a358b559cadb8d894eba6c0cbc1a88320cd4e3ae729280",
          "md5": "93fb708aa2546286e14ef3da8ff7eb7d",
          "sha256": "5d54cc8e29d9d08426d5f457b6490fdc88ae76d7dcc34c970cdf39cfb73cb948"
        },
        "downloads": -1,
        "filename": "py_nf-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "93fb708aa2546286e14ef3da8ff7eb7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16712,
        "upload_time": "2022-01-14T14:29:15",
        "upload_time_iso_8601": "2022-01-14T14:29:15.619364Z",
        "url": "https://files.pythonhosted.org/packages/a8/a4/fd634c513a9048a358b559cadb8d894eba6c0cbc1a88320cd4e3ae729280/py_nf-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69cdd67c95102aa7a00c1980ab07b2fa610d64b1f2862dfb7d1233db23f55acb",
          "md5": "acb6d2724d162d5773a141bfdfc93882",
          "sha256": "754577d3a3cdd5f663d6331686d35a11ea6499b7fcafa88a6e362ad97e7aaad7"
        },
        "downloads": -1,
        "filename": "py_nf-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "acb6d2724d162d5773a141bfdfc93882",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16831,
        "upload_time": "2022-01-17T12:08:15",
        "upload_time_iso_8601": "2022-01-17T12:08:15.678127Z",
        "url": "https://files.pythonhosted.org/packages/69/cd/d67c95102aa7a00c1980ab07b2fa610d64b1f2862dfb7d1233db23f55acb/py_nf-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89bea2151eb34e4828c8388634f8c0be2bfe2db03e65ea358d11dc07e792e85c",
          "md5": "b4511f9e189cbab35112d4bdad363157",
          "sha256": "cbe12201359b716edb1247ad54caf12245072befd2b0fd5448e223721c4328a2"
        },
        "downloads": -1,
        "filename": "py_nf-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4511f9e189cbab35112d4bdad363157",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19340,
        "upload_time": "2022-02-08T18:34:09",
        "upload_time_iso_8601": "2022-02-08T18:34:09.433423Z",
        "url": "https://files.pythonhosted.org/packages/89/be/a2151eb34e4828c8388634f8c0be2bfe2db03e65ea358d11dc07e792e85c/py_nf-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbda184a371f2f0ec9c1edabb614ec901458454ff71be79399de5db78ead8215",
          "md5": "63531da3036f356b325132e04298cdc6",
          "sha256": "d4c2f1eacc3ebdea4c991852c50bdaf3736fd4d72f1f262480d6d411f1471fa6"
        },
        "downloads": -1,
        "filename": "py_nf-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "63531da3036f356b325132e04298cdc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19114,
        "upload_time": "2022-02-08T18:54:05",
        "upload_time_iso_8601": "2022-02-08T18:54:05.378368Z",
        "url": "https://files.pythonhosted.org/packages/db/da/184a371f2f0ec9c1edabb614ec901458454ff71be79399de5db78ead8215/py_nf-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0606e15d6b9c1f9ebb460414a946eeda06d886c951784e98b666054234c1a56",
          "md5": "5f4aefc369367947898c8bc4d83a64a5",
          "sha256": "35e295541730b33bd6191b145b99ffe50ad60d5fc90fbdd3e49f6000691f6ca6"
        },
        "downloads": -1,
        "filename": "py_nf-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5f4aefc369367947898c8bc4d83a64a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19437,
        "upload_time": "2022-06-07T17:59:34",
        "upload_time_iso_8601": "2022-06-07T17:59:34.023698Z",
        "url": "https://files.pythonhosted.org/packages/a0/60/6e15d6b9c1f9ebb460414a946eeda06d886c951784e98b666054234c1a56/py_nf-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5dd430f7aaeb802715d8a4cc27143d18e1d3fb5bd63f3b3a30952cc3eb36b08",
          "md5": "d76e1ee2ddd284b98e25a08d14eb9c6e",
          "sha256": "bd06801f31fddf090f67dff51135cb8134bf8d518c85ae8167a0cf5bf28dda22"
        },
        "downloads": -1,
        "filename": "py_nf-0.3.32.tar.gz",
        "has_sig": false,
        "md5_digest": "d76e1ee2ddd284b98e25a08d14eb9c6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19984,
        "upload_time": "2022-07-25T10:50:14",
        "upload_time_iso_8601": "2022-07-25T10:50:14.448011Z",
        "url": "https://files.pythonhosted.org/packages/b5/dd/430f7aaeb802715d8a4cc27143d18e1d3fb5bd63f3b3a30952cc3eb36b08/py_nf-0.3.32.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec639d9f874efa79307398e2ad46d8fc94562940ac1051a223867262d84656df",
          "md5": "1d24c1512dfd11879f03b3f4b40dd12b",
          "sha256": "37ec070e99744048ee23cfee143db04a12060427f7d27ea6fd50aad557bb7439"
        },
        "downloads": -1,
        "filename": "py_nf-0.3.33.tar.gz",
        "has_sig": false,
        "md5_digest": "1d24c1512dfd11879f03b3f4b40dd12b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20079,
        "upload_time": "2022-09-06T18:36:15",
        "upload_time_iso_8601": "2022-09-06T18:36:15.842402Z",
        "url": "https://files.pythonhosted.org/packages/ec/63/9d9f874efa79307398e2ad46d8fc94562940ac1051a223867262d84656df/py_nf-0.3.33.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec639d9f874efa79307398e2ad46d8fc94562940ac1051a223867262d84656df",
        "md5": "1d24c1512dfd11879f03b3f4b40dd12b",
        "sha256": "37ec070e99744048ee23cfee143db04a12060427f7d27ea6fd50aad557bb7439"
      },
      "downloads": -1,
      "filename": "py_nf-0.3.33.tar.gz",
      "has_sig": false,
      "md5_digest": "1d24c1512dfd11879f03b3f4b40dd12b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20079,
      "upload_time": "2022-09-06T18:36:15",
      "upload_time_iso_8601": "2022-09-06T18:36:15.842402Z",
      "url": "https://files.pythonhosted.org/packages/ec/63/9d9f874efa79307398e2ad46d8fc94562940ac1051a223867262d84656df/py_nf-0.3.33.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}