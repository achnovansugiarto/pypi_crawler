{
  "info": {
    "author": "Austin Stromness",
    "author_email": "stromnessdevelopment@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "# Custom Loggers\nA module that extends the standard python logging module\n___\n\nIn the standard python logging module there are things that are difficult to accomplish without quite a bit of overhead. \nThese classes are meant to simplify that overhead and to be extended for specific use.\n\n# Classes\n___\n## CustomLogger\n```python\nfrom custom_loggers import CustomLogger\n```\n\n\nExtends the logging.Logger class\nThis is the primary class you will use/inherit\n\n### examples\n#### general use:\n```python\nfrom custom_loggers import CustomLogger, ColoredFormatter, Foreground255\n#setting class level settings\nCustomLogger.inclusive = True\nCustomLogger.global_log_level = 0\nCustomLogger.use_global_log_level_default=True\n\n#assigning a color for a new level which is defined below\nColoredFormatter.assign_level_color(\"NEWLEVEL\", Foreground255(226))\n\nlogger = CustomLogger(\"testLogger\")\nlogger2 = CustomLogger(\"test2logger\")\nlogger3 = CustomLogger(\"channel_tester\", channel=\"NewChannel\")\nlogger4 = CustomLogger(\"channel_tester2\", channel=\"NewChannel\")\nlogger3.info(\"channel test on\")\nlogger4.info(\"channel test on\")\nCustomLogger.channel_disabled(\"NewChannel\", True)\nlogger3.info(\"channel test off\")\nlogger4.info(\"channel test off\")\nlogger2.add_level(\"NEWLEVEL\", 1, True)\nlogger2.log(\"NEWLEVEL\", \"original message\")\nlogger.newlevel(\"my new message\")\nlogger.log(\"trace\", \"just checking\")\nlogger.error(\"Hello\")\nlogger.info(\"Hello\")\nlogger.debug(\"Hello\")\nlogger.warning(\"Hello\")\nlogger.critical(\"Hello\")\ntry:\n    raise ValueError(\"This is a complex error\")\nexcept Exception as e:\n    logger.exception(\"An exception occurred\")\nlogger.disabled = True\nlogger.info(\"This should not print because is disabled\")\nlogger.disabled = False\nCustomLogger.logging_disabled = True\nlogger.info(\"Should be disabled\")\nlogger2.info(\"Should be disabled\")\nlogger3.info(\"Should be disabled\")\nlogger4.info(\"Should be disabled\")\n```\n#### Extending\n```python\nfrom custom_loggers import CustomLogger,ColoredFormatter,Foreground255\n\nclass NewLogger(CustomLogger):\n    use_global_log_level_default = True\n    inclusive = False\n    default_colored_format = '%(levelname)-8s: %(message)s'\n    has_run_once=False\n\n    CustomLogger.add_level(\"NEWLEVEL\", 1)\n    ColoredFormatter.assign_level_color(\"NEWLEVEL\", Foreground255(77))\n\n    def newlevel(self,msg):\n        self.log(\"NEWLEVEL\", msg)\n\nlogger=NewLogger(\"TestLogger\")\nlogger.newlevel(\"this shows your new level\")\n```\n\n\n### class attributes\nThese values affect every instance of CustomLogger\n\n`logging_disabled`: bool enables or disables ALL Logging from CustomLogger\n\n`default_logging_level`: int the logging level assigned to each logger by default\n\n\n`use_global_log_level_default`: the default value of use_global_log which is used when comparing a logging event with the \nlog leve this determines whether we compare with the instance or with the global log_level\n\n`global_log_level`: int the current log level for all instances. (only effective when use_global_log_level is True)\n\n`inclusive`: bool when calculating whether to log or not if inclusive is True we'll accept the set log level and below\n    if false only loglevel matching the exact level will log\n\n`default_colored_formatter`:Formatter when creating an instance with add_formatter is True this is the class used to\n    create the formatter\n\n`default_colored_format`:str the format string that the formatter will use\n\n`default_asctime_format`:str the asctime format the formatter will use\n\n\n## ColoredFormatter\n```python\nfrom custom_loggers import ColoredFormatter\n```\nFor all things colored\n\nThere are 3 Things to note here:\n### 1: Compatibility\nColor text doesn't work on all terminals primarily you will find issues in Windows CMD and Powershell.\nWe've set it up to be as compatible as possible however if you need to turn it off you can set WINDOWS_OVERRIDE to True\n```python\nfrom custom_loggers import ColoredFormatter\nColoredFormatter.WINDOWS_OVERRIDE = True\n```\n\n### 2: Color Assignment\nColoredFormatter adds three additional formatting options for your logging format.\n\nAll three are associated with getting the script that calls one of a CustomLogger.log methods. It grabs the script \nlocation and assigns this to these formatting names. These are similar to 'filepath', 'filename', 'lineno' but could be \ndifferent. These will be more accurate for CustomLoggers. \n`scriptpath` : the full path to the script that called log\n`scriptname` : the file name of the script\n`scriptline` : the line number of the script\n\nAs a side note if you use a plugin for your IDE you may be able to get the filename and line number to have be a \nhyperlink in the IDE's terminal. For example in PyCharm if you use the below format {scriptname}, line {scriptline}\nand install the Awesome Console plugin. each of those references will take you directly to the script.\n\n```python\nfrom custom_loggers import CustomLogger\n\nCustomLogger.default_colored_format = '%(asctime)s [%(scriptname)s, line %(scriptline)-3s] %(levelname)-8s %(name)s: %(message)s'\n# Will output like this\n# 21-04-29 08:39 [main.py, line 15 ] INFO     channel_tester: channel test on\n# 21-04-29 08:39 [main.py, line 16 ] INFO     channel_tester2: channel test on\n# 21-04-29 08:39 [main.py, line 23 ] TRACE    testLogger: just checking\n# 21-04-29 08:39 [main.py, line 24 ] ERROR    testLogger: Hello\n# 21-04-29 08:39 [main.py, line 25 ] INFO     testLogger: Hello\n# 21-04-29 08:39 [main.py, line 26 ] DEBUG    testLogger: Hello\n# 21-04-29 08:39 [main.py, line 27 ] WARNING  testLogger: Hello\n# 21-04-29 08:39 [main.py, line 28 ] WARNING  testLogger: Hello\n```\n\n### 3:\nAssigning Colors to level is done like below:\n```python\nfrom custom_loggers import ColoredFormatter\nfrom custom_loggers import Colors\n\nColoredFormatter.assign_level_color(\"LEVELNAME\",Colors.ForeGroundColors.GREEN)\n```\nColored formatter has an assign_level_color method used to assign foreground and background colors. This is done via \nthe Colors module discussed below. the color can be a string (usually a color escape color which is put in front of \nthe log line which starts the color print)\n\n## Colors\n```python\nfrom custom_loggers import Colors\n```\nor directly with the class you are looking for\n```python\nfrom custom_loggers import ForeGroundColors, BackGroundColors, Foreground255, Background255 \nfrom custom_loggers import print_16_colors,print_255_colors\n```\n\nColors is an internal module for getting and combining colors and font styles.\nThis is done by generating the color escape codes and assigning them to the SequenceName class.\n\n## 16 - colors\nThe standard 16 colors supported by the majority of modern terminals are found in:\n```python\nfrom custom_loggers import Colors\n\nColors.ForeGroundColors\nColors.BackGroundColors\n\n#colors are accessed by:\nColors.ForeGroundColors.BLUE\n\n#You can visually see the colors like so\nColors.print_16_colors()\n\n```\n\n## 256 - colors\nThese colors may not be supported in all terminals, but give you the most variety:\n```python\nfrom custom_loggers import Colors\nColors.Foreground255\nColors.Background255\n\n#These are accessed by assigning which color you want.\nColors.Foreground255(77)\n\n#These can also be visually seen like so\nColors.print_255_colors()\n\n```\n\n#### Color Printout\n![color_printout](https://github.com/astromness/custom_loggers/blob/main/Assets/colors_pic.png?raw=true)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/astromness/custom_loggers/archive/refs/tags/1.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/astromness/custom_loggers",
    "keywords": "logging,colored,loglevel,console,custom",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "custom-loggers",
    "package_url": "https://pypi.org/project/custom-loggers/",
    "platform": "",
    "project_url": "https://pypi.org/project/custom-loggers/",
    "project_urls": {
      "Download": "https://github.com/astromness/custom_loggers/archive/refs/tags/1.1.0.tar.gz",
      "Homepage": "https://github.com/astromness/custom_loggers"
    },
    "release_url": "https://pypi.org/project/custom-loggers/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Custom Logger Class for creating colored, adding level, other misc features",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10215586,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1acea70c0540b273291b628b3e783af1756c541cde37d218f98bad378c27fe6e",
          "md5": "80e8fd7ce230738c18a35bcb681e9307",
          "sha256": "01adbf1365ca935d75322eb79851224576673fb992ec23779e376aa3517e5978"
        },
        "downloads": -1,
        "filename": "custom_loggers-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "80e8fd7ce230738c18a35bcb681e9307",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6187,
        "upload_time": "2021-04-28T21:55:36",
        "upload_time_iso_8601": "2021-04-28T21:55:36.443711Z",
        "url": "https://files.pythonhosted.org/packages/1a/ce/a70c0540b273291b628b3e783af1756c541cde37d218f98bad378c27fe6e/custom_loggers-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a17a68c191bbc248535d4aa34f59639c44c16c78dc4e115d9b3ba8a9800a085a",
          "md5": "9101da308d5ae512630e21214450698e",
          "sha256": "d13227c9d445d5450fba83fc73b89ff9ee069c267dc28c3cd840d8d38aea62aa"
        },
        "downloads": -1,
        "filename": "custom_loggers-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9101da308d5ae512630e21214450698e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12160,
        "upload_time": "2021-04-29T15:53:09",
        "upload_time_iso_8601": "2021-04-29T15:53:09.854787Z",
        "url": "https://files.pythonhosted.org/packages/a1/7a/68c191bbc248535d4aa34f59639c44c16c78dc4e115d9b3ba8a9800a085a/custom_loggers-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8b689e45d2ede420fd836327136ccd8c01137ef8ece0745a74225902f364025",
          "md5": "dfae646ecf62a1c6464f97a61d324e73",
          "sha256": "dc6051e688008a1886ad76322553d644d0f8dc298417694a9ea696a33e2878c8"
        },
        "downloads": -1,
        "filename": "custom_loggers-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dfae646ecf62a1c6464f97a61d324e73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9859,
        "upload_time": "2021-04-30T03:07:04",
        "upload_time_iso_8601": "2021-04-30T03:07:04.471387Z",
        "url": "https://files.pythonhosted.org/packages/a8/b6/89e45d2ede420fd836327136ccd8c01137ef8ece0745a74225902f364025/custom_loggers-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8b689e45d2ede420fd836327136ccd8c01137ef8ece0745a74225902f364025",
        "md5": "dfae646ecf62a1c6464f97a61d324e73",
        "sha256": "dc6051e688008a1886ad76322553d644d0f8dc298417694a9ea696a33e2878c8"
      },
      "downloads": -1,
      "filename": "custom_loggers-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dfae646ecf62a1c6464f97a61d324e73",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9859,
      "upload_time": "2021-04-30T03:07:04",
      "upload_time_iso_8601": "2021-04-30T03:07:04.471387Z",
      "url": "https://files.pythonhosted.org/packages/a8/b6/89e45d2ede420fd836327136ccd8c01137ef8ece0745a74225902f364025/custom_loggers-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}