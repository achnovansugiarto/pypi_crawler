{
  "info": {
    "author": "Rong Zhou <zhourong@qiniu.com>, Shanghai Qiniu Information Technologies Co., Ltd.",
    "author_email": "Rong Zhou <zhourong@qiniu.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: Rust"
    ],
    "description": "# Qiniu Resource Storage Binding SDK for Python\n\n[![Run Test Cases](https://github.com/bachue/rust-sdk-python-bindings/actions/workflows/ci-test.yml/badge.svg)](https://github.com/bachue/rust-sdk-python-bindings/actions/workflows/ci-test.yml)\n[![GitHub release](https://img.shields.io/github/v/tag/bachue/rust-sdk-python-bindings.svg?label=release)](https://github.com/bachue/rust-sdk-python-bindings/releases)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/bachue/rust-sdk-python-bindings/blob/master/LICENSE)\n\n## 概要\n\nQiniu SDK for Python 包含以下特性：\n\n- 通过提供多个不同的 Module，为不同层次的开发都提供了方便易用的编程接口。\n- 同时提供阻塞 IO 接口和基于 Async/Await 的异步 IO 接口。\n- 用 PyO3 封装 Rust 代码。\n\n## 代码示例\n\n### 客户端上传凭证\n\n客户端（移动端或者Web端）上传文件的时候，需要从客户自己的业务服务器获取上传凭证，而这些上传凭证是通过服务端的 SDK 来生成的，然后通过客户自己的业务API分发给客户端使用。根据上传的业务需求不同，七牛云 Python SDK 支持丰富的上传凭证生成方式。\n\n#### 简单上传的凭证\n\n最简单的上传凭证只需要 `access key`，`secret key` 和 `bucket` 就可以。\n\n```python\nfrom qiniu_sdk_alpha import upload_token, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nupload_token = upload_token.UploadPolicy.new_for_bucket(\n    bucket_name, 3600).build().to_upload_token_provider(cred)\nprint(upload_token)\n```\n\n#### 覆盖上传的凭证\n\n覆盖上传除了需要简单上传所需要的信息之外，还需要想进行覆盖的对象名称 `object name`，这个对象名称同时是客户端上传代码中指定的对象名称，两者必须一致。\n\n```python\nfrom qiniu_sdk_alpha import upload_token, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nupload_token = upload_token.UploadPolicy.new_for_object(\n    bucket_name, object_name, 3600).build().to_upload_token_provider(cred)\nprint(upload_token)\n\n#### 自定义上传回复的凭证\n\n默认情况下，文件上传到七牛之后，在没有设置 `returnBody` 或者回调相关的参数情况下，七牛返回给上传端的回复格式为 `hash` 和 `key`，例如：\n\n```json\n{\"hash\":\"Ftgm-CkWePC9fzMBTRNmPMhGBcSV\",\"key\":\"qiniu.jpg\"}\n```\n\n有时候我们希望能自定义这个返回的 JSON 格式的内容，可以通过设置 `returnBody` 参数来实现，在 `returnBody` 中，我们可以使用七牛支持的魔法变量和自定义变量。\n\n```python\nfrom qiniu_sdk_alpha import upload_token, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nupload_token = upload_token.UploadPolicy.new_for_object(\n    bucket_name, object_name, 3600,\n    returnBody='{\"key\":\"$(key)\",\"hash\":\"$(etag)\",\"bucket\":\"$(bucket)\",\"fsize\":$(fsize)}'\n).build().to_upload_token_provider(cred)\nprint(upload_token)\n```\n\n则文件上传到七牛之后，收到的回复内容如下：\n\n```json\n{\"key\":\"qiniu.jpg\",\"hash\":\"Ftgm-CkWePC9fzMBTRNmPMhGBcSV\",\"bucket\":\"if-bc\",\"fsize\":39335}\n```\n\n#### 带回调业务服务器的凭证\n\n上面生成的自定义上传回复的上传凭证适用于上传端（无论是客户端还是服务端）和七牛服务器之间进行直接交互的情况下。在客户端上传的场景之下，有时候客户端需要在文件上传到七牛之后，从业务服务器获取相关的信息，这个时候就要用到七牛的上传回调及相关回调参数的设置。\n\n```python\nfrom qiniu_sdk_alpha import upload_token, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nbuilder = upload_token.UploadPolicy.new_for_object(bucket_name, object_name, 3600)\nbuilder.callback(['http://api.example.com/qiniu/upload/callback'], body='{\"key\":\"$(key)\",\"hash\":\"$(etag)\",\"bucket\":\"$(bucket)\",\"fsize\":$(fsize)}', body_type='application/json')\nupload_token = builder.build().to_upload_token_provider(cred)\nprint(upload_token)\n```\n\n在使用了上传回调的情况下，客户端收到的回复就是业务服务器响应七牛的JSON格式内容。\n通常情况下，我们建议使用 `application/json` 格式来设置 `callback_body`，保持数据格式的统一性。实际情况下，`callback_body` 也支持 `application/x-www-form-urlencoded` 格式来组织内容，这个主要看业务服务器在接收到 `callback_body` 的内容时如何解析。例如：\n\n```python\nfrom qiniu_sdk_alpha import upload_token, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nbuilder = upload_token.UploadPolicy.new_for_object(bucket_name, object_name, 3600)\nbuilder.callback(['http://api.example.com/qiniu/upload/callback'], body='key=$(key)&hash=$(etag)&bucket=$(bucket)&fsize=$(fsize)')\nupload_token = builder.build().to_upload_token_provider(cred)\nprint(upload_token)\n```\n\n### 服务端直传\n\n服务端直传是指客户利用七牛服务端 SDK 从服务端直接上传文件到七牛云，交互的双方一般都在机房里面，所以服务端可以自己生成上传凭证，然后利用 SDK 中的上传逻辑进行上传，最后从七牛云获取上传的结果，这个过程中由于双方都是业务服务器，所以很少利用到上传回调的功能，而是直接自定义 `returnBody` 来获取自定义的回复内容。\n\n#### 文件上传\n\n最简单的就是上传本地文件，直接指定文件的完整路径即可上传。\n\n```python\nfrom qiniu_sdk_alpha import upload, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nupload_manager = upload.UploadManager(upload.UploadTokenSigner.new_credential_provider(cred, bucket_name, 3600))\nuploader = upload_manager.auto_uploader()\nuploader.upload_path('/home/qiniu/test.png', object_name=object_name, file_name=object_name)\n```\n\n在这个场景下，`AutoUploader` 会自动根据文件尺寸判定是否启用断点续上传，如果文件较大，上传了一部分时因各种原因从而中断，再重新执行相同的代码时，SDK 会尝试找到先前没有完成的上传任务，从而继续进行上传。\n\n#### 字节数组上传 / 数据流上传\n\n可以支持将内存中的字节数组或实现了 `read` 方法的实例上传到空间中。\n\n```python\nfrom qiniu_sdk_alpha import upload, credential\nimport io\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nupload_manager = upload.UploadManager(upload.UploadTokenSigner.new_credential_provider(cred, bucket_name, 3600))\nuploader = upload_manager.auto_uploader()\nuploader.upload_reader(io.BytesIO(b'hello qiniu cloud'), object_name=object_name, file_name=object_name)\n```\n\n#### 自定义参数上传\n\n```python\nfrom qiniu_sdk_alpha import upload, credential\n\ndef on_policy_generated(builder):\n    builder.return_body = '{\"key\":\"$(key)\",\"hash\":\"$(etag)\",\"fname\":\"$(x:fname)\",\"age\":$(x:age)}'\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nupload_manager = upload.UploadManager(upload.UploadTokenSigner.new_credential_provider(cred, bucket_name, 3600, on_policy_generated=on_policy_generated))\nuploader = upload_manager.auto_uploader()\nuploader.upload_path('/home/qiniu/test.png', object_name=object_name, file_name=object_name, custom_vars={'fname': '123.jpg', 'age': '20'})\n```\n\n#### 私有云上传\n\n```python\nfrom qiniu_sdk_alpha import upload, credential, http_client\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nupload_manager = upload.UploadManager(upload.UploadTokenSigner.new_credential_provider(cred, bucket_name, 3600), uc_endpoints=http_client.Endpoints(['ucpub-qos.pocdemo.qiniu.io']))\nuploader = upload_manager.auto_uploader()\nuploader.upload_path('/home/qiniu/test.png', object_name=object_name, file_name=object_name)\n```\n\n### 下载文件\n\n文件下载分为公开空间的文件下载和私有空间的文件下载。\n\n#### 公开空间\n\n```python\nfrom qiniu_sdk_alpha import download\n\nobject_name = '公司/存储/qiniu.jpg'\ndomain = 'devtools.qiniu.com'\npath = '/home/user/qiniu.jpg'\ndownload_manager = download.DownloadManager(download.StaticDomainsUrlsGenerator([domain], use_https=False)) # 设置为 HTTP 协议\ndownload_manager.download_to_path(object_name, path)\n```\n\n#### 私有空间\n\n```python\nfrom qiniu_sdk_alpha import download, credential\n\nobject_name = '公司/存储/qiniu.jpg'\ndomain = 'devtools.qiniu.com'\npath = '/home/user/qiniu.jpg'\naccess_key = 'access key'\nsecret_key = 'secret key'\ncred = credential.Credential(access_key, secret_key)\ndownload_manager = download.DownloadManager(download.UrlsSigner(cred, download.StaticDomainsUrlsGenerator([domain], use_https=False))) # 设置为 HTTP 协议\ndownload_manager.download_to_path(object_name, path)\n```\n\n### 资源管理\n\n#### 获取文件信息\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nresponse = bucket.stat_object(object_name).call()\nprint(response['hash'])\nprint(response['fsize'])\nprint(response['mimeType'])\nprint(response['putTime'])\n```\n\n#### 修改文件类型\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nbucket.modify_object_metadata(object_name, 'application/json').call()\n```\n\n#### 移动或重命名文件\n\n移动操作本身支持移动文件到相同，不同空间中，在移动的同时也可以支持文件重命名。唯一的限制条件是，移动的源空间和目标空间必须在同一个机房。\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\nto_bucket_name = 'to bucket name\"\nto_object_name = \"new object name\"\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nbucket.move_object_to(object_name, to_bucket_name, to_object_name).call()\n```\n\n#### 复制文件副本\n\n文件的复制和文件移动其实操作一样，主要的区别是移动后源文件不存在了，而复制的结果是源文件还存在，只是多了一个新的文件副本。\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\nto_bucket_name = \"to bucket name\"\nto_object_name = \"new object name\"\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nbucket.copy_object_to(object_name, to_bucket_name, to_object_name).call()\n```\n\n#### 删除空间中的文件\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nbucket.delete_object(object_name).call()\n```\n#### 设置或更新文件的生存时间\n\n可以给已经存在于空间中的文件设置文件生存时间，或者更新已设置了生存时间但尚未被删除的文件的新的生存时间。\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\nobject_name = 'object name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nbucket.modify_object_life_cycle(object_name, delete_after_days=10).call()\n```\n\n#### 获取空间文件列表\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nfor obj in bucket.list():\n    print('%s\\n  hash: %s\\n  size: %d\\n  mime type: %s' % (obj['key'], obj['hash'], obj['fsize'], obj['mimeType']))\n```\n\n#### 私有云中获取空间文件列表\n\n```python\nfrom qiniu_sdk_alpha import objects, credential, http_client\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred, uc_endpoints=http_client.Endpoints(['ucpub-qos.pocdemo.qiniu.io']), use_https=False).bucket(bucket_name) # 私有云普遍使用 HTTP 协议，而 SDK 则默认为 HTTPS 协议\nfor obj in bucket.list():\n    print('%s\\n  hash: %s\\n  size: %d\\n  mime type: %s' % (obj['key'], obj['hash'], obj['fsize'], obj['mimeType']))\n```\n\n### 资源管理批量操作\n\n#### 批量获取文件信息\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nfor result in bucket.batch_ops([\n    bucket.stat_object('qiniu.jpg'),\n    bucket.stat_object('qiniu.mp4'),\n    bucket.stat_object('qiniu.png'),\n]):\n    if result.error:\n        print('error: %s' % result.error)\n    else:\n        print('hash: %s\\nsize: %d\\nmime type: %s' % (result.data['hash'], result.data['fsize'], result.data['mimeType']))\n```\n\n#### 批量修改文件类型\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nfor result in bucket.batch_ops([\n    bucket.modify_object_metadata('qiniu.jpg', 'image/jpeg'),\n    bucket.modify_object_metadata('qiniu.mp4', 'image/png'),\n    bucket.modify_object_metadata('qiniu.png', 'video/mp4'),\n]):\n    if result.error:\n        print('error: %s' % result.error)\n    else:\n        print('ok')\n```\n\n#### 批量删除文件\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nfor result in bucket.batch_ops([\n    bucket.delete_object('qiniu.jpg'),\n    bucket.delete_object('qiniu.mp4'),\n    bucket.delete_object('qiniu.png'),\n]):\n    if result.error:\n        print('error: %s' % result.error)\n    else:\n        print('ok')\n```\n\n#### 批量移动或重命名文件\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nfor result in bucket.batch_ops([\n    bucket.move_object_to('qiniu.jpg', bucket_name, 'qiniu.jpg.move'),\n    bucket.move_object_to('qiniu.mp4', bucket_name, 'qiniu.mp4.move'),\n    bucket.move_object_to('qiniu.png', bucket_name, 'qiniu.png.move'),\n]):\n    if result.error:\n        print('error: %s' % result.error)\n    else:\n        print('ok')\n```\n\n#### 批量复制文件\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nfor result in bucket.batch_ops([\n    bucket.copy_object_to('qiniu.jpg', bucket_name, 'qiniu.jpg.move'),\n    bucket.copy_object_to('qiniu.mp4', bucket_name, 'qiniu.mp4.move'),\n    bucket.copy_object_to('qiniu.png', bucket_name, 'qiniu.png.move'),\n]):\n    if result.error:\n        print('error: %s' % result.error)\n    else:\n        print('ok')\n```\n\n#### 批量解冻归档存储类型文件\n\n```python\nfrom qiniu_sdk_alpha import objects, credential\n\naccess_key = 'access key'\nsecret_key = 'secret key'\nbucket_name = 'bucket name'\ncred = credential.Credential(access_key, secret_key)\nbucket = objects.ObjectsManager(cred).bucket(bucket_name)\nfor result in bucket.batch_ops([\n    bucket.restore_archived_object('qiniu.jpg', 7),\n    bucket.restore_archived_object('qiniu.mp4', 7),\n    bucket.restore_archived_object('qiniu.png', 7),\n]):\n    if result.error:\n        print('error: %s' % result.error)\n    else:\n        print('ok')\n```\n\n## 最低支持的 Python 版本（MSPV）\n\n- 3.8.0\n\n## 最低支持的 Rust 版本（MSRV）\n\n- 1.60.0\n\n## 编码规范\n\n- 通过 `cargo clippy` 检查，并经过 `rustfmt` 格式化。\n- 所有公开接口都需要文档注释。\n- 所有阻塞操作都提供异步无阻塞版本。\n- 尽可能保证仅使用安全的代码。\n\n## 联系我们\n\n- 如果需要帮助，请提交工单（在portal右侧点击咨询和建议提交工单，或者直接向 support@qiniu.com 发送邮件）\n- 如果有什么问题，可以到问答社区提问，[问答社区](http://qiniu.segmentfault.com/)\n- 更详细的文档，见[官方文档站](http://developer.qiniu.com/)\n- 如果发现了bug， 欢迎提交 [Issue](https://github.com/qiniu/rust-sdk/issues)\n- 如果有功能需求，欢迎提交 [Issue](https://github.com/qiniu/rust-sdk/issues)\n- 如果要提交代码，欢迎提交 [Pull Request](https://github.com/qiniu/rust-sdk/pulls)\n- 欢迎关注我们的[微信](https://www.qiniu.com/contact) [微博](http://weibo.com/qiniutek)，及时获取动态信息。\n\n## 代码许可\n\nThis project is licensed under the [MIT license].\n\n[MIT license]: https://github.com/qiniu/rust-sdk/blob/master/LICENSE\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.qiniu.com",
    "keywords": "qiniu,storage,python",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "qiniu-sdk-alpha",
    "package_url": "https://pypi.org/project/qiniu-sdk-alpha/",
    "platform": null,
    "project_url": "https://pypi.org/project/qiniu-sdk-alpha/",
    "project_urls": {
      "Homepage": "https://www.qiniu.com",
      "Source Code": "https://github.com/bachue/rust-sdk-python-bindings.git"
    },
    "release_url": "https://pypi.org/project/qiniu-sdk-alpha/0.0.2/",
    "requires_dist": [
      "maturin>=0.13,<0.14",
      "Sphinx>=4.0.0,<5.0.0; extra == 'tests'",
      "aiofiles>=0.8.0,<0.9.0; extra == 'tests'",
      "aiohttp>=3.0.0,<4.0.0; extra == 'tests'"
    ],
    "requires_python": ">=3.8",
    "summary": "Qiniu Rust SDK Bindings to Python",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14714911,
  "releases": {
    "0.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "1705c5b1b9ceb1c0091a34370f971d3df165d30a3e0f10faec85a7fd3295da90",
          "md5": "e21ff97d6c0a07e5ea02f19ef67de9a8",
          "sha256": "a13496027360fc01ac1864b933060878533e2a01f9cbd4c476f4c30e3b999633"
        },
        "downloads": -1,
        "filename": "qiniu_sdk_alpha-0.0.1-cp38-abi3-manylinux_2_27_x86_64.whl",
        "has_sig": false,
        "md5_digest": "e21ff97d6c0a07e5ea02f19ef67de9a8",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.8",
        "size": 8447355,
        "upload_time": "2022-08-10T10:03:44",
        "upload_time_iso_8601": "2022-08-10T10:03:44.514075Z",
        "url": "https://files.pythonhosted.org/packages/17/05/c5b1b9ceb1c0091a34370f971d3df165d30a3e0f10faec85a7fd3295da90/qiniu_sdk_alpha-0.0.1-cp38-abi3-manylinux_2_27_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "fc4fa1252f320420c93208271ecd47455de3dc62f3ecd0421ea25927db66dd1d",
          "md5": "f29e9bc6635cd01ad9b46a1fe660d183",
          "sha256": "19b94d1827ff1584c6c2c800682c65081b8297657439fe5302bbc6436c8a2f24"
        },
        "downloads": -1,
        "filename": "qiniu_sdk_alpha-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f29e9bc6635cd01ad9b46a1fe660d183",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 467309,
        "upload_time": "2022-08-10T10:03:48",
        "upload_time_iso_8601": "2022-08-10T10:03:48.692244Z",
        "url": "https://files.pythonhosted.org/packages/fc/4f/a1252f320420c93208271ecd47455de3dc62f3ecd0421ea25927db66dd1d/qiniu_sdk_alpha-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "151302f18da44d7d87c331a70efbc870498ffdafa40f6e25ed903a726960647d",
          "md5": "b304aed5d449511e865c05fe64a5ed81",
          "sha256": "57ac397ed362e5fa6792ec11d286be7958fc95503a4c78e03be0b950b5eef7a5"
        },
        "downloads": -1,
        "filename": "qiniu_sdk_alpha-0.0.2-cp38-abi3-manylinux_2_27_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b304aed5d449511e865c05fe64a5ed81",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.8",
        "size": 8454508,
        "upload_time": "2022-08-10T10:12:47",
        "upload_time_iso_8601": "2022-08-10T10:12:47.531649Z",
        "url": "https://files.pythonhosted.org/packages/15/13/02f18da44d7d87c331a70efbc870498ffdafa40f6e25ed903a726960647d/qiniu_sdk_alpha-0.0.2-cp38-abi3-manylinux_2_27_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "324367047d92b544197e71e5764c3d8cc408b5fbe1deb798738b5b72a041bd81",
          "md5": "e71e279bd811fabbdfdc2e1a5637031b",
          "sha256": "ae7d7a222563414b3e4608f9a2c604d60caba00a6255bbb022c6fbef9e102a2b"
        },
        "downloads": -1,
        "filename": "qiniu_sdk_alpha-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e71e279bd811fabbdfdc2e1a5637031b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 463900,
        "upload_time": "2022-08-10T10:12:52",
        "upload_time_iso_8601": "2022-08-10T10:12:52.318242Z",
        "url": "https://files.pythonhosted.org/packages/32/43/67047d92b544197e71e5764c3d8cc408b5fbe1deb798738b5b72a041bd81/qiniu_sdk_alpha-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "151302f18da44d7d87c331a70efbc870498ffdafa40f6e25ed903a726960647d",
        "md5": "b304aed5d449511e865c05fe64a5ed81",
        "sha256": "57ac397ed362e5fa6792ec11d286be7958fc95503a4c78e03be0b950b5eef7a5"
      },
      "downloads": -1,
      "filename": "qiniu_sdk_alpha-0.0.2-cp38-abi3-manylinux_2_27_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b304aed5d449511e865c05fe64a5ed81",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.8",
      "size": 8454508,
      "upload_time": "2022-08-10T10:12:47",
      "upload_time_iso_8601": "2022-08-10T10:12:47.531649Z",
      "url": "https://files.pythonhosted.org/packages/15/13/02f18da44d7d87c331a70efbc870498ffdafa40f6e25ed903a726960647d/qiniu_sdk_alpha-0.0.2-cp38-abi3-manylinux_2_27_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "324367047d92b544197e71e5764c3d8cc408b5fbe1deb798738b5b72a041bd81",
        "md5": "e71e279bd811fabbdfdc2e1a5637031b",
        "sha256": "ae7d7a222563414b3e4608f9a2c604d60caba00a6255bbb022c6fbef9e102a2b"
      },
      "downloads": -1,
      "filename": "qiniu_sdk_alpha-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e71e279bd811fabbdfdc2e1a5637031b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 463900,
      "upload_time": "2022-08-10T10:12:52",
      "upload_time_iso_8601": "2022-08-10T10:12:52.318242Z",
      "url": "https://files.pythonhosted.org/packages/32/43/67047d92b544197e71e5764c3d8cc408b5fbe1deb798738b5b72a041bd81/qiniu_sdk_alpha-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}