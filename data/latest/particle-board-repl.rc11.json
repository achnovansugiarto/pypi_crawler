{
  "info": {
    "author": "Eric Gebhart",
    "author_email": "e.a.gebhart@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# particle board REPL (PBR)  program.\n\n\n    pip install Particle_Board_REPL\n\nTo run interactively in with the REPL.\n\n    PBR -r\n\nThis Module adds Particle board cli functionality along with\nvarious other higher level functions for interacting with Particle.io boards.\nThe idea is to make it possible to create a repeatable process which can interact\ntest, and program a particle.io board.\n\nThis uses the particle.io cli, **particle-cli** in the Arch-linux AUR,\nto interface with a board, verify it's life, update it, claim/register\nit, flash it, test it, etc.\n\nAll of the commands here could be almost doable in a chain of _'do this', 'do that'_. But\nthe boards take time in between events. The USB device comes up and down constantly,\nit's not reliable just because you know that's where the board was. I have read about\nother gnu/linuxs which change the device on occasion or always. Arch does not. Once\nI have it, I have it. However, it comes and goes... \n\nIf a command fails at any point in a process, the entire process stops and the\nboard is considered a failure.\n\nSo we have to wait, watch and listen.\n\nBut, as a whole, it's just a module of things we'd like to do.  So we \nwrap those up to make life easier. and life is easier. At some point, \nmaking life is easier is just listing all the previous things that made life easier. \nAnd so it goes.\n\n# Particle Board REPL runs 4 ways.\n\nOnce you have some processes defined you can then run what you like in\n4 different ways,w\n\n * run the autoexec setting once: `PBR`\n * Start a REPL   `-r`\n * Run the autoexec setting in a loop with a continue dialog `-i` \n * To run commands instead of the autoexec, Just add them to the command.\n\n `PBR -r get list\n  PBR -i get list\n  PBR get list\n  PBR -r msgbox \"hello\"`\n\n\n### Getting Help\n\nHelp with the command line can be obtained with `-h`,\nAdditionally, Help with the symbols which are available for programming in the yaml files or \nin the REPL are obtained with the `help` command, so `help` runs help.\n * `PBR -h` for cli help.\n * `PBR help` for internal help.\n * `PBR particle-help` for internal particle specific help.\n\nThe easiest way to understand this system by using the REPL. \nIt will show you how it works. `PBR -r` \n\nOnce in the REPL at the prompt; __PBR:>__,  There are two help \ncommands.  __help__ and __particle-help__.  _Help_ shows all\nthe commands known with their documentation. _particle-help_,\n__show-all__ will show you everything there is to know about the state\nof things in yaml format. __showin__ lets you drill in if you like.\n\n\n### Get\n\nIt's the first command you'll want to do when you plug in your particle board.\n\nThis is the command we use to populate our _usb device_, _board type_ and _device-id_.\nVarious particle commands need the id, and we need the usb device so we know\nwho to wait for. It uses `particle serial list` for it's data.\n\nThe first thing to do is a __list__ and a __get__ or just a __get__. From there\nthe device id board type and usb device should be known. They will be used\nfor other commands in the process.\n\nIf you know particle commands then those should make sense, this is a small subset of the\npossibilities. \n\nThe REPL will do whatever you ask, so _help_, _show_, _list_, _identify_, \n_update_, _set-setup-done_, etc. Some which require a bit more, such as entering _dfu_ \nor _listen_ mode, are wrapped up together for convenience, but also available as\ncommands themselves.\n\n\n## Particle.io Lights.\nSomething very important for knowing the state of your Particle.io boron.\n\n[The meaning of the lights on a Particle.io Boron.](https://docs.particle.io/tutorials/device-os/led/boron/)\n\n\n## The modules, main.py, particle.py, and Config.\n\nThe more complex Particle functions are in main.py, These are functions which \ninteract with the Application state as well as the device. \nThis is also where the symbol tables are defined for the add on particle cli\nfunctionality.\n\nThere is very little in the particle.py module. Particle cli commands are \none line functions, and truly many of them are unecessary as they could be\ndone with the `pcmd`.\n\nThese are most of the basic particle-cli commands I've used so far. All of \nthese functions are here to be as close to bare particle-cli commands as can be. \nI combined some things, like flash always does dfu first, identify always does a listen. \nGet is perhaps the most complex as it does wait and poll to give a chance \nfor a reset or a plug. Internally there are a few versions of get to choose from.\n\nThe rest of the functions can actually live in the configuration file. \nIt is only necessary to modify python code if there is a desire for more \nbase functionality.\n\n# Current state\n\n__flash-test__, __flash-image__, __flash-tinker__, are working, but through \nos.popen().read() instead of subprocess like everything else.  I don't have an\nexplanation, subrocess needs more configuration for these commands. I've \ntried _shell=True_ with no change. So it's going be down in the details somewhere.\n\nI had thought that perhaps using the particle.get_w_wait function to wait for \nthe device could work nicely, but it does not. \n\n__login__ and __log_out__ needed to be called with os.system in order for them to\nbehave nicely with their prompts. Subprocess could work I think, but it's configuration\nis complex and it's not worth investigating.\n\n\n# The Internals.\n\nThis is at it's heart a simple Read Eval Print Loop. It has 4 ways\nof running, and it automatically manages Application state, yaml \nconfiguration files, the command line, dialogs, prompts, logging and help.  \nEverything needed for a particular application can be done with a module of functions..\n\nThe cli is done with argparse is extendible from the application layer as needed.\n\nPython dialog, with several standard messages and boxes are included, as is \na yaml configuration, and an Application state which contains everything\nknown to the app.\n\nEverything is extensible. Usually a few python functions\nand a configuration file is all you will need to create a nicely versatile \napplication.\n\nWhile there is a Repl available, and commands can be added, combined\nand remixed, they can also be run automatically through the\nautoexec setting in the config.  The default autoexec is to provide help.\n\n## Configuration\n\nThe Simple Process REPL uses YAML for it's configuration files. \n\nEverything is specified there,\nthere is very little in common with the cli. If no config file is given, the default\n_SPR-config.yaml_ will be loaded if found. The primary purpose of the cli is to \ndesignate the fashion you would like for the REPL to run. \n\nAll necessary defaults are set within the package with SPR-defaults.yaml.\nWhen building an application, that application's defaults will be merged \ninto the Simple_Process_REPL's default configuration before loading a locally defined\nSPR-config.yaml. An application can over-ride the configuration file name with a setting\nin the defaults section of the Application State.\n\n\n## 4 modes of running\n\n  * Run in a loop for doing a process over and over \n  * Run the default process once \n  * Run a list of command/symbols from the command line \n  * As an interactive REPL \n\n__In any case, if any step fails, the process will fail.__ \nif in interactive loop mode, _-i_, the continue dialog will catch the fail for the next\nloop.\n\n## The default process\nIn the __exec__ section of the configuration there is an __autoexec__ attribute. \nThis should be a symbol name or list of symbol names to run as the default process. \nThis is the process that will run when running cli in interactive loop mode,\nor when run once.\n\nIf commands are given on the cli after the option then that list is executed once \nautomatically instead of the commands in autoexec.\n\nThe easiest way to understand this is system is by using the REPL. \nIt will show you how it works. `PBR -r` \n\nThen type _help_, particle-help, and _showin_.  __Read It!__\n\nOnce in the REPL at the prompt; __PBR:>,\n_help_ shows all the commands known with their documentation. \n\n## Symbols/Commands/functions\n\nThere are three kinds.\n\n * Symbols which point at directly at parameter-less functions\n * Symbols which are lists of symbols, _compound commands_.\n * Symbols which are _special_ because they take parameters.\n\n### symbol/functions.\nThese commands are just python functions, whatever it is they do.\nUsually, manipulate the application state, and/or interact with something.\n\n### Compound commands\n\nCompound commands are commands defined outside of python code. They are strings which\ncan be parsed and evaluated by the REPL/interpreter.\n\nCompound commands can be built from other compound commands and _special_ commands.\nCompound commands can be defined in the configuration yaml, in python code, \nor interactively in the REPL.\n\n\n## The REPL\n\nThe REPL is very convenient as it saves state, and can be used to\ninteractively create/execute a process step by step. \n`help` at the REPL prompt. \n\n * Builtins __help__ \n * __showin__, are quite handy.\n * REPL prompt: persistent history and tab completion. \n * The __loglvl__ command can change the logging level interactively.\n * Defining a symbol of a special works. - Super cool.\n    * `msgbox \"Hello World\"` \n    * `def mymsg \"my special msg\" msgbox \"Hello World\"`\n * __log-info__ and __log-debug__ allow sending of arbitrary messages to the log.\n * __sh__ for running shell commands.\n * __pcmd__ for running particle-cli commands.\n\n### Application State. \n\n```python\nAS = {\n    \"config\": {},\n    \"args\": {},\n    \"defaults\": {\n        \"config_file\": \"PBR-config.yaml\",\n        \"loglevel\": \"info\",\n        \"logfile\": \"PBR.log\",\n    },\n    \"device\": {\"id\": \"\", \"name\": \"\", \"path\": \"\"},\n    \"wifi-connected\": False,\n    \"platform\": platform(),\n}\n```\n * configuration is the merged yaml configurations\n * args is the resolved command line\n * defaults is used by argparse to supply default options to the command line.\n * device is an imaginary device. Which we can wait for and handshake with.\n\nThe command: **showin** in the REPL will give it to you in yaml.\n**help** will give you the documentation for every command you can do, even the ones you just created. \nThe easiest way to access it is `showin device` or `showin config serial`\nwith `showin key1 key2,...` is the command to find sub-section or attributes in the REPL.\n`showin config` , `showin defaults`, or just __showin__ which is the same as __show-all__.\n\nFor an Application layer, it is only necessary to provide a structure as desired, which\nwill be merged directly onto this structure.\n\n\n## It's a Simple list processor.\n\nThis program is actually a very simple interpreter with an interactive REPL. \nEverything you want to do must be a python function which is registered in the\ninterpreter's symbol table. From there, everything is composable from symbol/words\nfrom the interpreter's symbol table, ie, your symbols. Those composed symbols can \nalso be added to the interpreter's symbol table to create increasingly\ncomplex sets of processes, which are executed in order. These user\nfunctions can also be defined in the YAML config file.\n\nIt has a really, really stupid parser. All it can do execute a list of symbols, or call\na special symbol with everything that follows. It does know the difference between\nsymbols, strings and numbers.\n\nBasic symbol/functions should be functions done entirely for their side-effects.\nThey take no parameters and give no return. Special Symbols can take arguments.\n\nAt the lowest level the symbols/commands are directly connected to\npython functions. But symbols/commands can also be lists of known symbols instead\nof a function.  This allows for the creation of sub-groups which can be referenced by\nother symbols.  There are no parentheses, only the ability to associate lists of\nsymbols with a new symbol.\n\n    import repl as r\n    symbols = [\n        ['wifi',       connect_wifi,    'Connect to wifi using nmtui if not connected.']\n        ['list',       P.list_usb,      'List the boards connected to USB.']\n        ['start',      'wifi list',     'Connect wifi and list the boards.']\n        ['identify',   P.identify,      'Try to identify a device.']\n        ['domore',     'start identify', 'Start then identify']\n        ['doevenmore', 'domore setup',   'Start identify and setup.']\n    ]\n    r.init_symbol_table(symbols)\n\nThe symbols _start_, _domore_ and _doevenmore_ can be defined in the YAML \nconfiguration file, it is not necessary to modify python code unless new \nfunctionality needs to be introduced.\n\n## Special Symbols\n\nThe interpreter is not very bright and has no way of grouping things together which\nmakes it difficult to execute commands which take arguments. Specials are symbols \nat the beginning of a command which will eat the rest of the line, in attempt to\ndo what they are supposed to do.\n\nTo compensate the interpreter has the concept of special symbols, \nThese are symbols which take arguments and can consume the entire REPL command. \n\nThese are also pointers to python functions, but which take some arguments.\nThese go on a line by themselves since we have no way of knowing them unless the\nline starts with them, and then the special gobbles up the rest of the line.\n\nThe REPL itself has a special symbol, __def__ which allows for the creation \nof a new symbol with the following syntax. \n\n    def <symbol> 'helpstr' symbol1 symbol2 symbol3...\n\nOther commands are _save-config_, _load-config_, _msgbox_, _msgcli_,\n_loglvl_, _log-info_, _showin_, etc.\n\nSpecial symbols have an argument count which can be set. If positive the command will\nbe checked for compliance. Here is an example which\ncreates symbols for saving and loading configurations from a given filename.\n\n    specials = [\n        \"Commands we want in the repl which can take arguments.\"\n        ['save-config', save-config, 1,\n        \"Save the configuration; save-config 'filename'\"]\n\n        ['load-config', load-config, 1,\n        \"Load a configuration; save-config 'filename'\"]\n    ]\n\n\n## Core: generic functionality\n\nThere are a few builtins which do \nspecial things. There is __wait__ which just waits for a device to come online \nwith a timeout. There is pause which just sleeps for a few seconds as set in the \nconfiguration. The wifi function checks the wifi with linux's network manager, and\nuses _nmcli_ to create a connection if one does not exist. Functionality is easy \nto add with a new function and an entry in the symbol table.\n\n   * dialogs - There are some python dialog, and cli interface functionalities. \n   * wifi, - Uses network manager (nmcli) for linux. Non-functional on other platforms.\n   * Waiting and handshaking.\n        * __wait__ looks for the actual device path i/o event with a _timeout_.\n        * __pause__ sleeps for _pause_time_. \n            Note: __wait__ for device is literally a poll to see if the device file exists.\n            Once it appears there is some time before the udev rules make the file accessible\n            by non-root users. A pause helps everything go smoothly. The next command will \n            actually have access to the device. So now I have a habit of following a __wait__ with\n            a __pause__. \n        * __handshake__ does a blocking serial.read/readline for both the initial\n        string, and the test results after. \n\n\n### Handshake function\n\nThis is a generic function that is a bit more complicated.  \nIt manages an interaction with a device. Everything _handshake_ \ndoes is defined in the configuration file. As with everything else, \nif anything fails, or doesn't match, an exception is raised.\n\nHere are the steps that _handshake()_ does.\n\n  * Wait for the _start_string_, match it.\n  * Respond with the _response_string_.\n  * Look in the output for: \n    * fail_regex, \n    * done_regex, \n    * do_qqc_regex.\n  * If fail, raise an exception.\n  * if done, exit quietly with true.\n  * if do_qqc, then call the do_qqc_function \n  and send the return value to the serial device.\n\n  qqc = quelque chose = something. \n\n  In the config the do_qqc_function is set to _input-serial_,\n  as an example. Input-serial prompts for a serial number, \n  validates it, and returns it.  This function must be listed in\n  the symbol table as that is where _handshake()_ will\n  look for it. Makes it easy to test. _serial-input_ at the\n  _SPR:>_ prompt.\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EricGebhart/Particle_Board_REPL",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Particle-Board-REPL",
    "package_url": "https://pypi.org/project/Particle-Board-REPL/",
    "platform": "",
    "project_url": "https://pypi.org/project/Particle-Board-REPL/",
    "project_urls": {
      "Homepage": "https://github.com/EricGebhart/Particle_Board_REPL"
    },
    "release_url": "https://pypi.org/project/Particle-Board-REPL/2.0.7/",
    "requires_dist": [
      "regex",
      "pyserial",
      "pythondialog",
      "pyYAML"
    ],
    "requires_python": "",
    "summary": "An extensible application framework with REPL for creating processes with side effects.",
    "version": "2.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10507678,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd862c2276bc1f5cb9cd01a5ee77de5d64e2a2e16a16823345751102c166b306",
          "md5": "16f77f1f8b86d618654c8845ba852ac9",
          "sha256": "46afeaf94b18cc66538bd5fb0fac6438aca61c53f33c082880d3066cf7eeb680"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16f77f1f8b86d618654c8845ba852ac9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11520,
        "upload_time": "2021-03-07T02:03:17",
        "upload_time_iso_8601": "2021-03-07T02:03:17.570127Z",
        "url": "https://files.pythonhosted.org/packages/cd/86/2c2276bc1f5cb9cd01a5ee77de5d64e2a2e16a16823345751102c166b306/Particle_Board_REPL-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e9e0452101a626bf6d8ac55d147a026174139abe58eb967eda3d0e67f3dfaec",
          "md5": "8622f212f183f9806c9faa780e555462",
          "sha256": "731de059579bbcc877072500b3ab3a041725b6bc7550024d893d3e93ee5c4fb9"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8622f212f183f9806c9faa780e555462",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11457,
        "upload_time": "2021-03-07T02:03:19",
        "upload_time_iso_8601": "2021-03-07T02:03:19.020371Z",
        "url": "https://files.pythonhosted.org/packages/7e/9e/0452101a626bf6d8ac55d147a026174139abe58eb967eda3d0e67f3dfaec/Particle_Board_REPL-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cf0dfee9736627d01d9d9c9cd9db3e68104a81782a7a11ac395d8f2c829a5b7",
          "md5": "4f892307b74e64e4c1399c3bdc955a72",
          "sha256": "ebaba9a2ac7fdf29349f52cc446cdc7d36a0ba54f58b4b6770bc90e62040d8ec"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.0.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "4f892307b74e64e4c1399c3bdc955a72",
        "packagetype": "bdist_egg",
        "python_version": "3.9",
        "requires_python": null,
        "size": 18236,
        "upload_time": "2021-03-07T21:32:12",
        "upload_time_iso_8601": "2021-03-07T21:32:12.086907Z",
        "url": "https://files.pythonhosted.org/packages/6c/f0/dfee9736627d01d9d9c9cd9db3e68104a81782a7a11ac395d8f2c829a5b7/Particle_Board_REPL-1.0.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29f8f6ed13a4b5f01b882885ea89843973532e2b14ad19ca4cd14501be1c7173",
          "md5": "091950fb2a91e9249292ec385f728e80",
          "sha256": "d081bd59cccc9579537cf31451f36b647ff9a008ee86459e921dfb854962a48c"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "091950fb2a91e9249292ec385f728e80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11145,
        "upload_time": "2021-03-07T19:03:23",
        "upload_time_iso_8601": "2021-03-07T19:03:23.647618Z",
        "url": "https://files.pythonhosted.org/packages/29/f8/f6ed13a4b5f01b882885ea89843973532e2b14ad19ca4cd14501be1c7173/Particle_Board_REPL-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12595b57e5c6996d7fcd931ef1e8f90b5ee361bc05b0160571aa5f6178eaa573",
          "md5": "81552a07cdc6b5881681a7a3bc93ecf0",
          "sha256": "299e13c24b800fbf958ff724b7085d66744e8e2d6cf51da757fd0cc3ab9cdf87"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "81552a07cdc6b5881681a7a3bc93ecf0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11405,
        "upload_time": "2021-03-07T19:03:25",
        "upload_time_iso_8601": "2021-03-07T19:03:25.454440Z",
        "url": "https://files.pythonhosted.org/packages/12/59/5b57e5c6996d7fcd931ef1e8f90b5ee361bc05b0160571aa5f6178eaa573/Particle_Board_REPL-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ba7d2228ecae8805880840b7de5acc3a4a1e0ae89d635ac1ff29cc472896c20",
          "md5": "0cf80b0cc860ea46f86abc9e4f48485c",
          "sha256": "2b652d0812686c956a5008e54384548be1b012f4bbcb6a6fc2dd435e08ceec2d"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cf80b0cc860ea46f86abc9e4f48485c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11149,
        "upload_time": "2021-03-07T21:32:09",
        "upload_time_iso_8601": "2021-03-07T21:32:09.836215Z",
        "url": "https://files.pythonhosted.org/packages/4b/a7/d2228ecae8805880840b7de5acc3a4a1e0ae89d635ac1ff29cc472896c20/Particle_Board_REPL-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93b2e1b3df9ccd1bc5089e79af4477be9bf86cdb2d7ae2b8fc97e7a3df11f453",
          "md5": "5701c522c824958a170e4f79f1229ba5",
          "sha256": "c554551439cfd361782693b8cfc20e16ab9494c3177aa5f81fe2f84085338432"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5701c522c824958a170e4f79f1229ba5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11410,
        "upload_time": "2021-03-07T21:32:13",
        "upload_time_iso_8601": "2021-03-07T21:32:13.671618Z",
        "url": "https://files.pythonhosted.org/packages/93/b2/e1b3df9ccd1bc5089e79af4477be9bf86cdb2d7ae2b8fc97e7a3df11f453/Particle_Board_REPL-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c52c51b8979e48c372b255c2ebfea95acd0d72de1fdb3609252d97b845c625a2",
          "md5": "d1ae99b163b10e1965995b17ceeb2ac0",
          "sha256": "98a734b84bf7426e7f488d4c99c13917f3b82557cbb82e478a6e448a33ae68e0"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1ae99b163b10e1965995b17ceeb2ac0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31585,
        "upload_time": "2021-05-04T00:21:13",
        "upload_time_iso_8601": "2021-05-04T00:21:13.002782Z",
        "url": "https://files.pythonhosted.org/packages/c5/2c/51b8979e48c372b255c2ebfea95acd0d72de1fdb3609252d97b845c625a2/Particle_Board_REPL-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4db862b78013769c37691231b2d3308c249c6f29fe1717efb4ad5b501c2b9625",
          "md5": "560646916991868679548002e04bb3de",
          "sha256": "cae2057e18b862c62e47b2cdb9ed0e303c721236eb7ddcdfa930af27bcee68ce"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "560646916991868679548002e04bb3de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32289,
        "upload_time": "2021-05-04T00:21:15",
        "upload_time_iso_8601": "2021-05-04T00:21:15.711612Z",
        "url": "https://files.pythonhosted.org/packages/4d/b8/62b78013769c37691231b2d3308c249c6f29fe1717efb4ad5b501c2b9625/Particle_Board_REPL-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3695639cb714dd75fe37d6978dc84c8523899f4d539cf2b9efad11d1ec712196",
          "md5": "a2083106eb5810ac6bf8fc8e7072246f",
          "sha256": "e5af1cd16ee467b870990983991a83107bb5fe04e9b8d55db2e4c00bb050417b"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2083106eb5810ac6bf8fc8e7072246f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31586,
        "upload_time": "2021-05-04T00:24:39",
        "upload_time_iso_8601": "2021-05-04T00:24:39.589909Z",
        "url": "https://files.pythonhosted.org/packages/36/95/639cb714dd75fe37d6978dc84c8523899f4d539cf2b9efad11d1ec712196/Particle_Board_REPL-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5953541235734c921b09321b2cfac6b523c4edb1f7d64baa4c5caadedd4d009",
          "md5": "1e2d28118a18f456cb5d2e2862b6275d",
          "sha256": "fa4dd2488a0d739e12645e203efd5882b8bc6e806d2dc3899efdaae1e98be3fb"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e2d28118a18f456cb5d2e2862b6275d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32280,
        "upload_time": "2021-05-04T00:24:42",
        "upload_time_iso_8601": "2021-05-04T00:24:42.670859Z",
        "url": "https://files.pythonhosted.org/packages/e5/95/3541235734c921b09321b2cfac6b523c4edb1f7d64baa4c5caadedd4d009/Particle_Board_REPL-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1839596df312acdb6c4ff1e914fc2e158b5a6ce0a6b529b681d5573a4123ce4b",
          "md5": "b652c7e630534d9761953accc130f62a",
          "sha256": "dda294164c8accb2033c24f76d8ea93c265d5b1e31b915bf3521441db83f17cb"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b652c7e630534d9761953accc130f62a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31622,
        "upload_time": "2021-05-04T07:40:40",
        "upload_time_iso_8601": "2021-05-04T07:40:40.651702Z",
        "url": "https://files.pythonhosted.org/packages/18/39/596df312acdb6c4ff1e914fc2e158b5a6ce0a6b529b681d5573a4123ce4b/Particle_Board_REPL-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed1d022ce9ea214a0df648a331b7cd8a45a73be57a1ffb026a31d309627a1cab",
          "md5": "e91ef92b66598f4bd131e08ba50b3eb6",
          "sha256": "0b7c311327bddecae79796dd165b0592604df23499593894e977bc7b7a03a9ef"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e91ef92b66598f4bd131e08ba50b3eb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32283,
        "upload_time": "2021-05-04T07:40:42",
        "upload_time_iso_8601": "2021-05-04T07:40:42.143266Z",
        "url": "https://files.pythonhosted.org/packages/ed/1d/022ce9ea214a0df648a331b7cd8a45a73be57a1ffb026a31d309627a1cab/Particle_Board_REPL-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7631baffe1350207fd33cf7e747a5865a7da85c613c46dac111660e37d4f549d",
          "md5": "8c1dc16da5d46ff517b6d70daaf67329",
          "sha256": "faea4f6efc252620d975fab8a37a6619cf7aefa0266a83015350e30db54d0e8d"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c1dc16da5d46ff517b6d70daaf67329",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31774,
        "upload_time": "2021-05-04T22:49:01",
        "upload_time_iso_8601": "2021-05-04T22:49:01.041529Z",
        "url": "https://files.pythonhosted.org/packages/76/31/baffe1350207fd33cf7e747a5865a7da85c613c46dac111660e37d4f549d/Particle_Board_REPL-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36fc2d2cd08821b125666237424240adb5b9aaaf3f05464aa0516242e741d5fb",
          "md5": "77821a959f83edc7c0cecc380030ed86",
          "sha256": "337ba2c378406be6fafa043dbdaf1a48c3a508e0272db59ea0358a51f2ece5c5"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "77821a959f83edc7c0cecc380030ed86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32605,
        "upload_time": "2021-05-04T22:49:04",
        "upload_time_iso_8601": "2021-05-04T22:49:04.830785Z",
        "url": "https://files.pythonhosted.org/packages/36/fc/2d2cd08821b125666237424240adb5b9aaaf3f05464aa0516242e741d5fb/Particle_Board_REPL-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29c713a65b87f2d7f83d0f1fb37e9d2f9187fc51a85ac86b749eb03fc0a9c571",
          "md5": "be52864556f898ed121de2d2f5a8011b",
          "sha256": "6472c38f95d6d7f79766dbe11a25d9c3f9cf09f1550a1c9ecf2378d5d0b0843d"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be52864556f898ed121de2d2f5a8011b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32377,
        "upload_time": "2021-05-05T14:40:45",
        "upload_time_iso_8601": "2021-05-05T14:40:45.150112Z",
        "url": "https://files.pythonhosted.org/packages/29/c7/13a65b87f2d7f83d0f1fb37e9d2f9187fc51a85ac86b749eb03fc0a9c571/Particle_Board_REPL-2.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c158dac35090b66b0e7eedbb7b4e2d99e0b473de0770c7d8e698e23204b7c0a7",
          "md5": "959055d9b1c3f9c92018c11cc62954b0",
          "sha256": "d496426e95380815811b626e85549ba745d1fd47ca62a9eac7b3a91bebc90658"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "959055d9b1c3f9c92018c11cc62954b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33299,
        "upload_time": "2021-05-05T14:40:48",
        "upload_time_iso_8601": "2021-05-05T14:40:48.582462Z",
        "url": "https://files.pythonhosted.org/packages/c1/58/dac35090b66b0e7eedbb7b4e2d99e0b473de0770c7d8e698e23204b7c0a7/Particle_Board_REPL-2.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "941eeb31e06a70122ed0e15cd54db4658bb09ba8b96a324b81a3e53f8dc1cc52",
          "md5": "e1f0474845043153ac4a6a3cc679a39f",
          "sha256": "172b963545ddef6244a8098935ddc3098fad83b966eb3f4a15b9281a9a939d6e"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1f0474845043153ac4a6a3cc679a39f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32400,
        "upload_time": "2021-05-05T15:12:51",
        "upload_time_iso_8601": "2021-05-05T15:12:51.413435Z",
        "url": "https://files.pythonhosted.org/packages/94/1e/eb31e06a70122ed0e15cd54db4658bb09ba8b96a324b81a3e53f8dc1cc52/Particle_Board_REPL-2.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "226d304d5b9d3811236d7e51f5f5edc869da95dafe43c685fe7803770f4e30cc",
          "md5": "04437a70b1675bdd858c35f6237440f7",
          "sha256": "fe7161ccfef53940147acd2a9ad4ee9a1a4329732e52fe13fd6c5a67a4f70d1e"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "04437a70b1675bdd858c35f6237440f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33334,
        "upload_time": "2021-05-05T15:12:54",
        "upload_time_iso_8601": "2021-05-05T15:12:54.912631Z",
        "url": "https://files.pythonhosted.org/packages/22/6d/304d5b9d3811236d7e51f5f5edc869da95dafe43c685fe7803770f4e30cc/Particle_Board_REPL-2.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ff2b2e965517a9adb17c55aed44bd899e69e94aefe5548308ece55f2454660b",
          "md5": "810e910f8e645e226ee0bb0d03b01bd7",
          "sha256": "312c4ae6407780ae420f564b6ae033af6ae6935f5709fb877e021245b725bc33"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "810e910f8e645e226ee0bb0d03b01bd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32411,
        "upload_time": "2021-05-29T16:21:57",
        "upload_time_iso_8601": "2021-05-29T16:21:57.726779Z",
        "url": "https://files.pythonhosted.org/packages/3f/f2/b2e965517a9adb17c55aed44bd899e69e94aefe5548308ece55f2454660b/Particle_Board_REPL-2.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7012aff49aa0775c016c1541476198ce4f5eefb7a7352aa7e3b26e3742a3af24",
          "md5": "cf1df693b337ae5f0e2dd9ca1cecc8dd",
          "sha256": "683e66fbbf024b0c766640bd2a6c7c79301613319673e037c8836ed8d104cbb2"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cf1df693b337ae5f0e2dd9ca1cecc8dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33347,
        "upload_time": "2021-05-29T16:22:02",
        "upload_time_iso_8601": "2021-05-29T16:22:02.646251Z",
        "url": "https://files.pythonhosted.org/packages/70/12/aff49aa0775c016c1541476198ce4f5eefb7a7352aa7e3b26e3742a3af24/Particle_Board_REPL-2.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e19bfe31766c3371a1ed81e6c031b80a1123e534b49504a476971def93c5ebc",
          "md5": "2dbf901de754918d4fa0b16d724fdc4b",
          "sha256": "7052601a8decace8a5b479ee5d1795b930e6617c0802b416f684df8ed7f68b6b"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dbf901de754918d4fa0b16d724fdc4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32481,
        "upload_time": "2021-05-29T18:42:27",
        "upload_time_iso_8601": "2021-05-29T18:42:27.823993Z",
        "url": "https://files.pythonhosted.org/packages/7e/19/bfe31766c3371a1ed81e6c031b80a1123e534b49504a476971def93c5ebc/Particle_Board_REPL-2.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21dea4fb5f390a74a255a8d0ce94491ab807a7724d523c3ee582f762d9d0e754",
          "md5": "22d05d530db05f8d4b180d45b79c2d2b",
          "sha256": "72445af05c8036d4e42fa0aa3b0e32c9b581dc168a4e4804cb046336e9e1c1b1"
        },
        "downloads": -1,
        "filename": "Particle_Board_REPL-2.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "22d05d530db05f8d4b180d45b79c2d2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33394,
        "upload_time": "2021-05-29T18:42:32",
        "upload_time_iso_8601": "2021-05-29T18:42:32.842205Z",
        "url": "https://files.pythonhosted.org/packages/21/de/a4fb5f390a74a255a8d0ce94491ab807a7724d523c3ee582f762d9d0e754/Particle_Board_REPL-2.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e19bfe31766c3371a1ed81e6c031b80a1123e534b49504a476971def93c5ebc",
        "md5": "2dbf901de754918d4fa0b16d724fdc4b",
        "sha256": "7052601a8decace8a5b479ee5d1795b930e6617c0802b416f684df8ed7f68b6b"
      },
      "downloads": -1,
      "filename": "Particle_Board_REPL-2.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2dbf901de754918d4fa0b16d724fdc4b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32481,
      "upload_time": "2021-05-29T18:42:27",
      "upload_time_iso_8601": "2021-05-29T18:42:27.823993Z",
      "url": "https://files.pythonhosted.org/packages/7e/19/bfe31766c3371a1ed81e6c031b80a1123e534b49504a476971def93c5ebc/Particle_Board_REPL-2.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21dea4fb5f390a74a255a8d0ce94491ab807a7724d523c3ee582f762d9d0e754",
        "md5": "22d05d530db05f8d4b180d45b79c2d2b",
        "sha256": "72445af05c8036d4e42fa0aa3b0e32c9b581dc168a4e4804cb046336e9e1c1b1"
      },
      "downloads": -1,
      "filename": "Particle_Board_REPL-2.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "22d05d530db05f8d4b180d45b79c2d2b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 33394,
      "upload_time": "2021-05-29T18:42:32",
      "upload_time_iso_8601": "2021-05-29T18:42:32.842205Z",
      "url": "https://files.pythonhosted.org/packages/21/de/a4fb5f390a74a255a8d0ce94491ab807a7724d523c3ee582f762d9d0e754/Particle_Board_REPL-2.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}