{
  "info": {
    "author": "seshkalyan",
    "author_email": "dseshkalyan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n## What is this  about?\nImagine you want to compare various iterations of a table or data file. You may need to ensure that your versions of a \nlist that is maintained by more than one person or system are same. When you have to solve this manually, it is \ndifficult. So, let's make use of this library right now!\n\n## How does it work?\nThe script takes an entry's ID value from the first table, looks for it in the second table and sees if it can find it \nthere. If it doesn't, it will list this entry as an entry that was found in table 1, but not in table 2. This will \nhappen vice  versa for table 2 against table 1. Moreover, the script compares values of entries with the \nsame ID, and if they are different, the script lists these differences.\n\n## What does it require?\nThe table entries MUST have a unique identifier, or key value. For example, this could be an order number, or an \nemployee number - but it could also be other characters, as long as it is unique to an entry. This key value MUST be \nlocated in the first column of your table. The orders of the other columns, as well as the orders of the rows in \ngeneral, is completely irrelevant.You have a use case, too, we hope this library will save you some time!\n\nVersion Release Beta\n==========\n0.0.1 (29/06/2022)\n-------------------\n    pip install pandas\n\npandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, \nbuilt on top of the Python programming language.\n    \n    pip install numpy\nNumPy is a Python library used for working with arrays. It also has functions for working in domain of linear algebra, \nfourier transform, and matrices.\n\n    import pandas as pd\n    import numpy as np\n\n    '''// \n    DESCRIPTION:\n    The comparison requires comparing table1 against table2 and vice versa in order to find values that are in one table, \n    but not the other,therefore, the files are imported based on current comparison mode, and in mode 2to1, their order \n    is switched to avoid differences being identified based on different data formats: convert numbers to equal format/\n    \"syntax\", then to string \n    ///'''\n\n    def toString(x):\n        # print('from ', x, type(x))\n        if type(x) == str:\n            return x\n        if type(x) == np.float64 or type(x) == np.int64:\n            x.tolist()\n        if x == None:\n            x = 'NaN'\n        x = str(float(x))\n        if x[-1] == '0':\n            x = x[0:-2]  # removing .0 from the float\n    # print('to ', x, type(x))\n    return str(x)\n\n\n    '''///----Comparison funct----///''' \n\n    def runComparison(findDifferingValues, fileName1, fileName2, df1, df2):\n        df_comparison = pd.DataFrame()  # tables have to be initalized because they are later referred to for concatenation\n        df_entrynotFound = pd.DataFrame()\n\n    # in both tables, the first column must be the one that contains the entries' ID/key\n    keyCol = df2.iloc[:, 0]  # 1st column in the table we're comparing to\n    keyColArray = list(map(toString, keyCol.values))  # converting entries to string for comparison\n    # print('to str: ', test, pd.Series(keyColArray))\n    keyCol = pd.Series(keyColArray)\n\n    '''//---compare rows funct---//'''\n    \n    def compareRows(rowA):\n\n        key = toString(rowA[0])  # saving the key value from 1st table so I can get corresponding value from 2nd table\n        deviations = pd.DataFrame()  # here's where I'll store the info on deviating entries\n\n        # now going through every col entry in rowA\n        for category, value in rowA.items():\n\n            if category not in df2.columns:  # if category(column) does not exist in table 2, ignore & break\n                break\n\n            valueBList = pd.Series(df2[category].where(\n                keyCol == key).values)  # identifiying value for same ID/col in table2 > array with comparison resut for each row\n            valueB = list(filter(lambda x: pd.isna(x) == False,\n                                 valueBList))  # from results array, filtering out only those values that are not 'NaN'\n\n            if (pd.isna(valueBList.values)).all():  # if the result contains only NaN values > cell is empty:\n                if (pd.isna(value) or value == float(\n                        'nan')):  # see if corresponding value in rowA is NaN, too, in which case don't list as difference\n                    break\n                else:  # if corresponding value in rowA is not NaN, redefine valueB so it's not an empty array\n                    valueB = ['#empty!']\n\n            value = toString(value)\n            valueB[0] = toString(valueB[0])\n\n            # print(value, valueB[0])\n            if value != valueB[\n                0]:  # now actually comparing value of key/colName in table1 vs same key/colName in table2\n\n                # print('deviating value: ', valueB[0])\n                # print(f'Difference found in entry with ID {key}, in category: {category}') #optional: log the info\n                newRow = [[key, category, value, str(valueB[0])]]\n                # print(newRow) #activate when debugging\n                add = pd.DataFrame(newRow, columns=[('Entry ID in ' + fileName1), 'Difference found in',\n                                                    ('Value in ' + fileName1), ('Value in ' + fileName2)])\n                deviations = pd.concat([deviations, add])\n\n        return deviations\n\n     #--------------------------------end of compare rows funct----------------------------------//'''\n\n    for currentRow, values in df1.iterrows():  # going through each row in table 1\n\n        rowDf1 = pd.Series(df1.iloc[currentRow])  # grab values from current row of table 1, save as Series\n        key = toString(rowDf1.values[0])  # set entry in 1st column as key to look for in table 2\n\n        '''//now, look for this key in table 2. If it is not found, add to \"not found\" sheet for final results file//'''\n        if df2.loc[keyCol == key].empty:\n            newRow = [[key, rowDf1.index[1], rowDf1.values[1]]]\n            result = pd.DataFrame(newRow, columns=[('Key not found in ' + fileName2), ('name next col ' + fileName1),\n                                                   ('value next col ' + fileName1)])\n            df_entrynotFound = pd.concat([df_entrynotFound, result])  # add result to compare df\n            # print(f'ID no. {key} not found in table 2') #optional: log the info\n\n            '''//if it is found: identify differences and store them in table for for final results file, except for \n                comparison mode '2to1' where differences have already been found + listed and we are only interested \n                in entries that are in table2 but not table1 //'''\n        \n        if df2.loc[keyCol == key].empty == False and findDifferingValues == True:\n            result = compareRows(\n                rowDf1)    # pass rowDf1 to compare funct to compare it to corresponding row in table2\n            df_comparison = pd.concat([df_comparison, result])\n            # print(result)\n\n    return [df_comparison, df_entrynotFound]\n\n\n    '''//-----End of comparison funct-------//'''\n\n    '''//save results as CSV files, as well as different sheets in same Excel file. \n        Use excel format and writer for that. Index not included in files//'''\n\n    def saveToFile(data, name, writer):\n        data.to_excel(writer, sheet_name=str(name), index=False)\n        #data.to_csv(str(name), index=False)\n    \n\n\n\n----------\n\nUsage\n-------------------\nInstall the published library:\n\n        pip install comp-df-syren==0.2.0\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "SYREN CLOUD TECHNOLOGIES",
    "maintainer": "",
    "maintainer_email": "",
    "name": "comp-df-syren",
    "package_url": "https://pypi.org/project/comp-df-syren/",
    "platform": null,
    "project_url": "https://pypi.org/project/comp-df-syren/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/comp-df-syren/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "DATAFRAMES COMPARISON",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14348445,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "321d1795b38cd5a0120d7527150d6a8f875297c9d53bc2275d8612f3e4d76db0",
          "md5": "1881c130bc30d490741e52f424677f55",
          "sha256": "51c5810fe9e49af67bf2a879164073214c868877cfb53bb2b589018b797bf468"
        },
        "downloads": -1,
        "filename": "comp_df_syren-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1881c130bc30d490741e52f424677f55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7051,
        "upload_time": "2022-06-29T11:01:20",
        "upload_time_iso_8601": "2022-06-29T11:01:20.649485Z",
        "url": "https://files.pythonhosted.org/packages/32/1d/1795b38cd5a0120d7527150d6a8f875297c9d53bc2275d8612f3e4d76db0/comp_df_syren-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "321d1795b38cd5a0120d7527150d6a8f875297c9d53bc2275d8612f3e4d76db0",
        "md5": "1881c130bc30d490741e52f424677f55",
        "sha256": "51c5810fe9e49af67bf2a879164073214c868877cfb53bb2b589018b797bf468"
      },
      "downloads": -1,
      "filename": "comp_df_syren-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1881c130bc30d490741e52f424677f55",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7051,
      "upload_time": "2022-06-29T11:01:20",
      "upload_time_iso_8601": "2022-06-29T11:01:20.649485Z",
      "url": "https://files.pythonhosted.org/packages/32/1d/1795b38cd5a0120d7527150d6a8f875297c9d53bc2275d8612f3e4d76db0/comp_df_syren-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}