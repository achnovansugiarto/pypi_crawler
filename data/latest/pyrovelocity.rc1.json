{
  "info": {
    "author": "Qian Qin",
    "author_email": "qqin@mgh.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# pyrovelocity\n\n<div align=\"center\">\n\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/_static/logo.png\" alt=\"Pyro-Velocity logo\" width=\"300\" role=\"img\">\n\n|         ||\n| ------- ||\n| CI/CD   | [![CI - Test](https://github.com/pinellolab/pyrovelocity/actions/workflows/tests.yml/badge.svg)](https://github.com/pinellolab/pyrovelocity/actions/workflows/tests.yml) [![CML](https://github.com/pinellolab/pyrovelocity/actions/workflows/cml.yml/badge.svg)](https://github.com/pinellolab/pyrovelocity/actions/workflows/cml.yml) [![pre-commit.ci status](https://results.pre-commit.ci/badge/github/pinellolab/pyrovelocity/master.svg)](https://results.pre-commit.ci/latest/github/pinellolab/pyrovelocity/master) |\n| Docs    | [![Documentation Status](https://readthedocs.org/projects/pyrovelocity/badge/?version=latest)](https://pyrovelocity.readthedocs.io/en/latest/?badge=latest)                                                                                                                                                                                                                                                                                                                                                                  |\n| Package | [![PyPI - Version](https://img.shields.io/pypi/v/pyrovelocity.svg?logo=pypi&label=PyPI&logoColor=gold)](https://pypi.org/project/pyrovelocity/) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyrovelocity.svg?logo=python&label=Python&logoColor=gold)](https://pypi.org/project/pyrovelocity/)                                                                                                                                                                                                          |\n| Meta    | [![code style - Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) [![License - MIT](https://img.shields.io/badge/license-AGPL%203-purple)](https://spdx.org/licenses/)                                                                                                                                                                                                                                                                                                       |\n\n</div>\n\n---\n\n# Introduction\n\n`Pyro-Velocity` is a Bayesian, generative, and multivariate RNA velocity\nmodel to estimate _uncertainty_ in predictions of future cell states from\nminimal models approximating splicing dynamics.\nThis approach models _raw sequencing counts_ with _synchronized cell time_ across\nall expressed genes to provide quantifiable information on\ncell fate choice and developmental trajectory dynamics.\n\n## Features\n\n- Probabilistic modeling of RNA velocity\n- Direct modeling of raw spliced and unspliced read count\n- Multiple uncertainty diagnostics analysis and visualizations\n- Synchronized cell time estimation across genes\n- Multivariate denoised gene expression and velocity prediction\n\n<!-- ![Velocity workflow comparison](docs/source/readme_figure1.png) -->\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/source/readme_figure1.png\" alt=\"Velocity workflow comparison\">\n\n## Installation with miniconda\n\nPlease install miniconda following the instructions here: <https://docs.conda.io/en/latest/miniconda.html>, this step takes about 1-2 mins.\n\n```bash\nwget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n# then follow the instruction to setup the conda base environment\n```\n\nAfter the conda has been setup, logout and re-login to install _mamba_ to speed up installation, this step takes about 20s.\n\n```bash\nconda install -c conda-forge mamba\n```\n\nThen add the channels, this step takes 1~2s.\n\n```bash\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\nconda config --set channel_priority flexible\n```\n\nAfter that, install the _pyrovelocity_ package in one mamba command:\n\n```bash\nmamba create -n pyrovelocity_bioconda -c bioconda pyrovelocity\n```\n\nThis step takes about 6-8 minutes depending on the network speed. If you prefer to use conda environment configurations, see the `conda` subfolder for installation with _prefix_ to specify the installation path, such as:\n\n```\n# GPU\nmamba env create --prefix /path_to_conda_env/qq-pyrovelocity-dev -f conda/environment-gpu.yml\n# or CPU\nmamba env create --prefix /path_to_conda_env/qq-pyrovelocity-dev -f conda/environment-cpu.yml\n```\n\nOr with more control of installing the environment,\n\n```bash\nconda create -n pyrovelocity_bioconda python=3.8.8\nmamba install -n pyrovelocity_bioconda -c bioconda pyrovelocity\n# CPU\nmamba env update -n pyrovelocity_bioconda -f conda/environment-cpu.yml\n# or GPU\nmamba env update -n pyrovelocity_bioconda -f conda/environment-gpu.yml\n```\n\nFor windows user installation, please refer to the [issue](https://github.com/pinellolab/pyrovelocity/issues/9).\n\nLastly, test the installation by:\n\n```bash\nconda activate pyrovelocity_bioconda\npython\n```\n\n```python\nimport pyrovelocity\n```\n\n## Additional packages necessary to reproduce all the analyses presented in the notebooks\n\n```bash\npip install cospar==0.1.9\n```\n\n## Quick start\n\nAfter the installation, let\\'s look at your dataset to see how\nPyro-Velocity can help understand cell dynamics.\n\nStarting from raw sequencing FASTQ files, obtained for example with\nSMART-seq, 10X genomics, inDrop or other similar single-cell assays, you\ncan preprocess the data to generate spliced and unspliced gene count\ntables in h5ad file (or loom file using cellranger+velocyto or the\nkallisto pipeline.\n\nStarting from these count tables we show below a minimal step-by-step\nworkflow to illustrate the main features of Pyro-Velocity in a Jupyter\nNotebook:\n\nStep 0. Even though _pyrovelocity_ is a cluster-free method to evaluate uncertainty\nof cell fate, it will dependend on 2 dimensional embedding results for evaluation of\nuncertainty and generate visualization, we would suggest run your new datasets using\n[scanpy tutorial](https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html).\n\nStep 1. Load your data, load your data(e.g. _local_file.h5ad_) with\nscvelo by using:\n\n```python\nimport scvelo as scv\nadata = scv.read(\"local_file.h5ad\")\n```\n\nStep 2. Minimally preprocess your _adata_ object:\n\n```python\nadata.layers['raw_spliced']   = adata.layers['spliced']\nadata.layers['raw_unspliced'] = adata.layers['unspliced']\nadata.obs['u_lib_size_raw'] = adata.layers['raw_unspliced'].toarray().sum(-1)\nadata.obs['s_lib_size_raw'] = adata.layers['raw_spliced'].toarray().sum(-1)\nscv.pp.filter_and_normalize(adata, min_shared_counts=30, n_top_genes=2000)\nscv.pp.moments(adata, n_pcs=30, n_neighbors=30)\n```\n\nStep 3. Train the Pyro-Velocity model:\n\n```python\nfrom pyrovelocity.api import train_model\n# Model 1\nnum_epochs = 1000 # large data\n# num_epochs = 4000 # small data\nadata_model_pos = train_model(adata,\n                               max_epochs=num_epochs, svi_train=True, log_every=100,\n                               patient_init=45,\n                               batch_size=4000, use_gpu=0, cell_state='state_info',\n                               include_prior=True,\n                               offset=False,\n                               library_size=True,\n                               patient_improve=1e-3,\n                               model_type='auto',\n                               guide_type='auto_t0_constraint',\n                               train_size=1.0)\n\n# Or Model 2\nadata_model_pos = train_model(adata,\n                               max_epochs=num_epochs, svi_train=True, log_every=100,\n                               patient_init=45,\n                               batch_size=4000, use_gpu=0, cell_state='state_info',\n                               include_prior=True,\n                               offset=True,\n                               library_size=True,\n                               patient_improve=1e-3,\n                               model_type='auto',\n                               guide_type='auto',\n                               train_size=1.0)\n\n# adata_model_pos is a returned list in which 0th element is the trained model,\n# the 1st element is the posterior samples of all random variables\nsave_res = True\nif save_res:\n    adata_model_pos[0].save('saved_model', overwrite=True)\n    result_dict = {\"adata_model_pos\": adata_model_pos[1],\n                   \"v_map_all\": v_map_all,\n                   \"embeds_radian\": embeds_radian, \"fdri\": fdri, \"embed_mean\": embed_mean}\n    import pickle\n    with open(\"model_posterior_samples.pkl\", \"wb\") as f:\n         pickle.dump(result_dict, f)\n```\n\nStep 4: Generate Pyro-Velocity's vector field and shared time plots\nwith uncertainty estimation.\n\n```python\nfrom pyrovelocity.plot import plot_state_uncertainty\nfrom pyrovelocity.plot import plot_posterior_time, plot_gene_ranking,\\\n      vector_field_uncertainty, plot_vector_field_uncertain,\\\n      plot_mean_vector_field, project_grid_points,rainbowplot,denoised_umap,\\\n      us_rainbowplot, plot_arrow_examples\n\nembedding = 'emb' # change to umap or tsne based on your embedding method\n\n# This generates the posterior samples of all vector fields\n# and statistical testing results from Rayleigh test\nv_map_all, embeds_radian, fdri = vector_field_uncertainty(adata, adata_model_pos[1],\n                                                          basis=embedding, denoised=False, n_jobs=30)\nfig, ax = plt.subplots()\n# This returns the posterior mean of the vector field\nembed_mean = plot_mean_vector_field(adata_model_pos[1], adata, ax=ax, n_jobs=30, basis=embedding)\n# This plot single-cell level vector field uncertainty\n# and averaged cell vector field uncertainty on the grid points\n# based on angular standard deviation\nfig, ax = plt.subplots(1, 2)\nfig.set_size_inches(11.5, 5)\nplot_vector_field_uncertain(adata, embed_mean, embeds_radian,\n                            ax=ax,\n                            fig=fig, cbar=False, basis=embedding, scale=None)\n\n# This generates shared time uncertainty plot with contour lines\nfig, ax = plt.subplots(1, 3)\nfig.set_size_inches(12, 2.8)\nadata.obs['shared_time_uncertain'] = adata_model_pos[1]['cell_time'].std(0).flatten()\nax_cb = scv.pl.scatter(adata, c='shared_time_uncertain', ax=ax[0], show=False, cmap='inferno', fontsize=7, s=20, colorbar=True, basis=embedding)\nselect = adata.obs['shared_time_uncertain'] > np.quantile(adata.obs['shared_time_uncertain'], 0.9)\nsns.kdeplot(adata.obsm[f'X_{embedding}'][:, 0][select],\n            adata.obsm[f'X_{embedding}'][:, 1][select],\n            ax=ax[0], levels=3, fill=False)\n\n# This generates vector field uncertainty based on Rayleigh test.\nadata.obs.loc[:, 'vector_field_rayleigh_test'] = fdri\nim = ax[1].scatter(adata.obsm[f'X_{basis}'][:, 0],\n                   adata.obsm[f'X_{basis}'][:, 1], s=3, alpha=0.9,\n                   c=adata.obs['vector_field_rayleigh_test'], cmap='inferno_r',\n                   linewidth=0)\nset_colorbar(im, ax[1], labelsize=5, fig=fig, position='right')\nselect = adata.obs['vector_field_rayleigh_test'] > np.quantile(adata.obs['vector_field_rayleigh_test'], 0.95)\nsns.kdeplot(adata.obsm[f'X_{embedding}'][:, 0][select],\n            adata.obsm[f'X_{embedding}'][:, 1][select], ax=ax[1], levels=3, fill=False)\nax[1].axis('off')\nax[1].set_title(\"vector field\\nrayleigh test\\nfdr<0.05: %s%%\" % (round((fdri < 0.05).sum()/fdri.shape[0], 2)*100), fontsize=7)\n```\n\nStep 5: Prioritize putative cell fate marker genes based on negative\nmean absolute errors and pearson correlation between denoised spliced\nexpression and posterior mean shared time, and then visualize the top\none with rainbow plots\n\n```python\nfig = plt.figure(figsize=(7.07, 4.5))\nsubfig = fig.subfigures(1, 2, wspace=0.0, hspace=0, width_ratios=[1.6, 4])\nax = fig.subplots(1)\n# This generates the selected cell fate markers and output in DataFrame\nvolcano_data, _ = plot_gene_ranking([adata_model_pos[1]], [adata], ax=ax,\n                                     time_correlation_with='st', assemble=True)\n# This generates the rainbow plots for the selected markers.\n_ = rainbowplot(volcano_data, adata, adata_model_pos[1],\n                subfig[1], data=['st', 'ut'], num_genes=4)\n```\n\n## Illustrative examples of Pyro-Velocity analyses on different single-cell datasets\n\n### Pyro-Velocity applied to a PBMC dataset \\[[1](https://scvelo.readthedocs.io/perspectives/Perspectives/)\\]\n\nThis is a scRNA-seq dataset of fully mature peripheral blood mononuclear\ncells (PBMC) generated using the 10X genomics kit and containing 65,877\ncells with 11 fully differentiated immune cell types. This dataset\ndoesn\\'t contain stem and progenitor cells or other signature of and\nundergoing dynamical differentiation, thus no consistent velocity flow\nshould be detected.\n\nBelow we show the main output generated by Pyro-Velocity Model 1\nanalysis. Pyro-Velocity failed to detect high-confidence trajectories in\nthe mature blood cell states, consistent with what is known about the\nbiology underlying these cells.\n\n**Vector field with uncertainty**\n\n<!-- ![PBMC vector field uncertainty](docs/source/readme_figure2.png) -->\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/source/readme_figure2.png\" alt=\"PBMC vector field uncertainty\">\n\nThese 6 plots from left to right show: 1. cell types, 2. stream plot of\nPyro-velocity vector field based on the posterior mean of 30 posterior\nsamples, 3. single cell vector field examples showing all 30 posterior\nsamples as vectors for 3 arbitrarily selected cells; 4. single cell\nvector field with uncertainty based on angular standard deviation across\n30 posterior samples, 5. averaged vector field uncertainty from 4. 6.\nRayleigh test of posterior samples vector field, the title shows the\nexpected false discovery rate using a 5% threshold.\n\nThe full example can be reproduced using the\n[PBMC](https://github.com/pinellolab/pyrovelocity/blob/master/docs/source/notebooks/pbmc.ipynb)\nJupyter notebook.\n\n### Pyro-Velocity applied to a pancreas development dataset \\[[2](https://scvelo.readthedocs.io/VelocityBasics/)\\]\n\nHere we apply Pyro-Velocity to a single cell RNA-seq dataset of mouse\npancreas in the E15.5 embryo developmental stage. This dataset was\ngenerated using the 10X genomics kit and contains 3,696 cells with 8\ncell types including progenitor cells, intermediate and terminal cell\nstates.\n\nBelow we show the main output generated by Pyro-Velocity Model 1\nanalysis. Pyro-Velocity was able to define well-known developmental cell\nhierarchies identifying cell trajectories originating from ductal\nprogenitor cells and culminated in the production of mature Alpha, Beta,\nDelta, and Epsilon cells.\n\n**Vector field with uncertainty**\n\n<!-- ![Pancreas vector field uncertainty](docs/source/readme_figure3.png) -->\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/source/readme_figure3.png\" alt=\"Pancreas vector field uncertainty\">\n\nThese 6 plots from left to right are showing the same analyses presented\nas in the example above.\n\n**Shared time with uncertainty**\n\n<!-- ![Pancreas shared time uncertainty](docs/source/readme_figure4.png) -->\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/source/readme_figure4.png\" alt=\"Pancreas vector field uncertainty\">\n\nThe left figure shows the average of 30 posterior samples for the cell\nshared time, the title of the figure shows the Spearman\\'s correlation\nwith the Cytotrace score, an orthogonal state-of-the-art method used to\npredict cell differentiation based on the number of expressed genes per\ncell (Gulati et. al, Science 2020). The right figure shows the standard\ndeviation across posterior samples of shared time.\n\n**Gene selection and visualization**\n\nTo uncover potential cell fate determinant markers genes of the mouse\npancreas, we first select the top 300 genes with the best velocity model\nfit (we use negative mean absolute error ), then we rank the filtered\ngenes using Pearson\\'s correlation between denoised spliced expression\nand the posterior mean of the recovered shared time across cells.\n\n<!-- ![Pancreas Volcano plot for gene selection](docs/source/readme_figure6.png) -->\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/source/readme_figure6.png\" alt=\"Pancreas Volcano plot for gene selection\">\n\nFor the selected genes, it is possible to explore in depth their\ndynamic, using phase portraits, rainbow plots, and UMAP rendering of\ndenoised splicing gene expression across cells.\n\n<!-- ![Pancreas vector field uncertainty](docs/source/readme_figure7.png) -->\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/source/readme_figure7.png\" alt=\"Pancreas vector field uncertainty\">\n\nThe full example can be reproduced using the\n[Pancreas](https://github.com/pinellolab/pyrovelocity/blob/master/docs/source/notebooks/pancreas.ipynb)\njupyter notebook.\n\n### Pyro-Velocity applied to the LARRY dataset \\[[3](https://figshare.com/articles/dataset/larry_invitro_adata_sub_raw_h5ad/20780344)\\]\n\nThis last example, present the analysis of a recent scRNA-seq dataset\nprofiling mouse hematopoises at high resolution thanks to lineage\nrelationship information captured by the Lineage And RNA RecoverY\n(LARRY) system. LARRY leverages unique lentiviral barcodes that enables\nto clonally trace cell fates over time (Weinrab et al. Cell 20).\n\nBelow we show the main output generated by Pyro-Velocity analysis.\n\n**Vector field with uncertainty**\n\n<!-- ![LARRY vector field uncertainty](docs/source/readme_figure8.png) -->\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/source/readme_figure8.png\" alt=\"LARRY vector field uncertainty\">\n\nThese 5 plots from left to right shows: 1) Cell types, 2) Clone\nprogression vector field by using centroid of cells belonging to the\nsame barcode for generating directed connection between consecutive\nphysical times, 3) single cell vector field with uncertainty based on\nangular standard deviation across 30 posterior samples, 4. averaged\nvector field uncertainty from 3. 5. Rayleigh test of posterior samples\nvector field, the title shows the false discovery rate using threshold\n5%.\n\n**Shared time with uncertainty**\n\nTo quantitatively assess the quality of the the receovered shared time\nwe also considered the agreement of our method with Cospar, a\nstate-of-the-art method specifically designed for predicting fate\npotency based on LARRY data.\n\n<!-- ![Pancreas shared time uncertainty](docs/source/readme_figure9.png) -->\n<img src=\"https://raw.githubusercontent.com/pinellolab/pyrovelocity/master/docs/source/readme_figure9.png\" alt=\"Pancreas shared time uncertainty\">\n\nThe leftmost figure shows the Cospar fate potency score, the middle\nfigure shows the average of 30 posterior samples from Pyro-Velocity\nshared time per cell, the title of the figure shows the Spearman's\ncorrelation between cell latent shared time and fate potency scores\nderived from Cospar, the right figure shows the standard deviation\nacross posterior samples of shared time.\n\nThe full example can be reproduced using the\n[LARRY](https://github.com/pinellolab/pyrovelocity/blob/master/docs/source/notebooks/larry.ipynb)\njupyter notebook.\n\n# Troubleshooting\n\n## TypeError: fate_potency() got an unexpected keyword argument 'used_Tmap'\n\nPlease use the specific _cospar_ version:\n\n```bash\npip install cospar==0.1.9\n```\n\n## CUDA error: no kernel image is available for execution on the device\n\nAll reference to GPU support applies to linux. We do not currently support windows\nand there is no GPU-compatible pytorch version `<1.12` for darwin.\nOn linux, either use [conda](./conda) (as exemplified in\n[reproducibility/environment](./reproducibility/environment)),\nor install the specific cuda-enabled pytorch version manually\n\n```bash\npip3 install torch==1.8.1+cu111 -f https://download.pytorch.org/whl/torch_stable.html\n```\n\nIf you are using poetry, you can also use the poetry helper\n\n```bash\npoetry install && poetry run poe force-cuda11\n```\n\nAlso see [contributing](./docs/contributing.md).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pinellolab/pyrovelocity",
    "keywords": "",
    "license": "AGPL-3.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyrovelocity",
    "package_url": "https://pypi.org/project/pyrovelocity/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyrovelocity/",
    "project_urls": {
      "Changelog": "https://github.com/pinellolab/pyrovelocity/releases",
      "Documentation": "https://pyrovelocity.readthedocs.io",
      "Homepage": "https://github.com/pinellolab/pyrovelocity",
      "Repository": "https://github.com/pinellolab/pyrovelocity"
    },
    "release_url": "https://pypi.org/project/pyrovelocity/0.1.1/",
    "requires_dist": [
      "Pygments (>=2.10.0); extra == \"dev\"",
      "adjusttext (>=0.7.3,<0.8.0)",
      "anndata (==0.7.5)",
      "astropy (==5.1)",
      "black (>=21.10b0); extra == \"dev\"",
      "click (>=8.0.1)",
      "colorlog (>=6.7.0,<7.0.0)",
      "cospar (==0.1.9)",
      "coverage[toml] (>=6.2); extra == \"dev\"",
      "darglint (>=1.8.1); extra == \"dev\"",
      "desert (>=2022.9.22)",
      "dparse (>=0.5.2); extra == \"dev\"",
      "dvc-gs (>=2.20.0,<3.0.0); extra == \"dev\"",
      "flake8 (>=4.0.1); extra == \"dev\"",
      "flake8-bandit (>=2.1.2); extra == \"dev\"",
      "flake8-bugbear (>=21.9.2); extra == \"dev\"",
      "flake8-docstrings (>=1.6.0); extra == \"dev\"",
      "flake8-rst-docstrings (>=0.2.5); extra == \"dev\"",
      "furo (>=2021.11.12); extra == \"dev\"",
      "h5py (==3.7.0)",
      "hydra-core (==1.2.0)",
      "isort (>=5.10.1); extra == \"dev\"",
      "jupyter-core (>=5.1.3,<6.0.0); extra == \"dev\"",
      "leidenalg (==0.9.0)",
      "marshmallow (>=3.18.0)",
      "mlflow (==1.30.0)",
      "mypy (>=0.930); extra == \"dev\"",
      "myst-parser (>=0.16.1); extra == \"dev\"",
      "omegaconf (>=2.2.3,<3.0.0)",
      "pep8-naming (>=0.12.1); extra == \"dev\"",
      "poethepoet (>=0.16.0,<0.17.0); extra == \"dev\"",
      "pre-commit (>=2.16.0); extra == \"dev\"",
      "pre-commit-hooks (>=4.1.0); extra == \"dev\"",
      "pyro-ppl (==1.6.0)",
      "pytest (>=6.2.5); extra == \"dev\"",
      "pytest-cov (>=4.0.0,<5.0.0); extra == \"dev\"",
      "pytest-mock (>=3.10.0,<4.0.0); extra == \"dev\"",
      "pytorch-lightning (==1.3.0)",
      "pyupgrade (>=2.29.1); extra == \"dev\"",
      "rich (>=12.6.0,<13.0.0)",
      "safety (>=1.10.3); extra == \"dev\"",
      "scikit-misc (==0.1.4)",
      "scipy (==1.9.3)",
      "scvelo (==0.2.4)",
      "scvi-tools (==0.13.0)",
      "seaborn (==0.11.2)",
      "sphinx (>=4.3.2); extra == \"dev\"",
      "sphinx-autobuild (>=2021.3.14); extra == \"dev\"",
      "sphinx-click (>=3.0.2); extra == \"dev\"",
      "torch (==1.8.1)",
      "torchmetrics (==0.5.1)",
      "typeguard (>=2.13.3); extra == \"dev\"",
      "xdoctest[colors] (>=0.15.10); extra == \"dev\""
    ],
    "requires_python": ">=3.8.8,<3.9.0",
    "summary": "A multivariate RNA Velocity model to estimate future cell states with uncertainty using probabilistic modeling with pyro.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16976626,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "836ea8ac2d359fd7075241529c363b58ff5af3fc806c6c655a198e5669edf833",
          "md5": "e179a9c67f4390ec69d2dd7fe2360704",
          "sha256": "ce916bd116c9664919f4b6887158d1a0c0c7f5a43f5759fe8204a0f6eb09aad1"
        },
        "downloads": -1,
        "filename": "pyrovelocity-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e179a9c67f4390ec69d2dd7fe2360704",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.8,<3.9.0",
        "size": 81215,
        "upload_time": "2023-02-16T21:10:05",
        "upload_time_iso_8601": "2023-02-16T21:10:05.091987Z",
        "url": "https://files.pythonhosted.org/packages/83/6e/a8ac2d359fd7075241529c363b58ff5af3fc806c6c655a198e5669edf833/pyrovelocity-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dceb2aeacbed44d39e7407f6c9fccc2eebe8c39455b090fcf953a5571d03e9fc",
          "md5": "e666a17309f7443b43bd0c402e3d2b48",
          "sha256": "e4158bbca57fe9c3c43efb15f0c0fdb2ce8cdf9c3be8c1c18dad1c3e9f6e7bb3"
        },
        "downloads": -1,
        "filename": "pyrovelocity-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e666a17309f7443b43bd0c402e3d2b48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.8,<3.9.0",
        "size": 85454,
        "upload_time": "2023-02-16T21:10:07",
        "upload_time_iso_8601": "2023-02-16T21:10:07.119621Z",
        "url": "https://files.pythonhosted.org/packages/dc/eb/2aeacbed44d39e7407f6c9fccc2eebe8c39455b090fcf953a5571d03e9fc/pyrovelocity-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "836ea8ac2d359fd7075241529c363b58ff5af3fc806c6c655a198e5669edf833",
        "md5": "e179a9c67f4390ec69d2dd7fe2360704",
        "sha256": "ce916bd116c9664919f4b6887158d1a0c0c7f5a43f5759fe8204a0f6eb09aad1"
      },
      "downloads": -1,
      "filename": "pyrovelocity-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e179a9c67f4390ec69d2dd7fe2360704",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.8,<3.9.0",
      "size": 81215,
      "upload_time": "2023-02-16T21:10:05",
      "upload_time_iso_8601": "2023-02-16T21:10:05.091987Z",
      "url": "https://files.pythonhosted.org/packages/83/6e/a8ac2d359fd7075241529c363b58ff5af3fc806c6c655a198e5669edf833/pyrovelocity-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dceb2aeacbed44d39e7407f6c9fccc2eebe8c39455b090fcf953a5571d03e9fc",
        "md5": "e666a17309f7443b43bd0c402e3d2b48",
        "sha256": "e4158bbca57fe9c3c43efb15f0c0fdb2ce8cdf9c3be8c1c18dad1c3e9f6e7bb3"
      },
      "downloads": -1,
      "filename": "pyrovelocity-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e666a17309f7443b43bd0c402e3d2b48",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.8,<3.9.0",
      "size": 85454,
      "upload_time": "2023-02-16T21:10:07",
      "upload_time_iso_8601": "2023-02-16T21:10:07.119621Z",
      "url": "https://files.pythonhosted.org/packages/dc/eb/2aeacbed44d39e7407f6c9fccc2eebe8c39455b090fcf953a5571d03e9fc/pyrovelocity-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}