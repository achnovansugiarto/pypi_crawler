{
  "info": {
    "author": "vutr",
    "author_email": "me@vutr.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Documentation",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "<img align=\"left\" width=\"95\" height=\"120\" src=\"docs/_static/logo.png\">\n\n# PyrateLimiter\nThe request rate limiter using Leaky-bucket algorithm.\n\nFull project documentation can be found at [pyratelimiter.readthedocs.io](https://pyratelimiter.readthedocs.io).\n\n[![PyPI version](https://badge.fury.io/py/pyrate-limiter.svg)](https://badge.fury.io/py/pyrate-limiter)\n[![PyPI - Python Versions](https://img.shields.io/pypi/pyversions/pyrate-limiter)](https://pypi.org/project/pyrate-limiter)\n[![codecov](https://codecov.io/gh/vutran1710/PyrateLimiter/branch/master/graph/badge.svg?token=E0Q0YBSINS)](https://codecov.io/gh/vutran1710/PyrateLimiter)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/vutran1710/PyrateLimiter/graphs/commit-activity)\n[![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://pypi.python.org/pypi/pyrate-limiter/)\n\n<br>\n\n## Contents\n- [PyrateLimiter](#pyratelimiter)\n  - [Contents](#contents)\n  - [Features](#features)\n  - [Installation](#installation)\n  - [Basic usage](#basic-usage)\n    - [Defining rate limits](#defining-rate-limits)\n    - [Applying rate limits](#applying-rate-limits)\n    - [Identities](#identities)\n  - [Handling exceeded limits](#handling-exceeded-limits)\n    - [Bucket analogy](#bucket-analogy)\n    - [Rate limit exceptions](#rate-limit-exceptions)\n    - [Rate limit delays](#rate-limit-delays)\n  - [Additional usage options](#additional-usage-options)\n    - [Decorator](#decorator)\n    - [Contextmanager](#contextmanager)\n    - [Async decorator/contextmanager](#async-decoratorcontextmanager)\n  - [Backends](#backends)\n    - [Memory](#memory)\n    - [SQLite](#sqlite)\n    - [Redis](#redis)\n    - [Custom backends](#custom-backends)\n  - [Additional features](#additional-features)\n    - [Time sources](#time-sources)\n  - [Examples](#examples)\n\n## Features\n* Tracks any number of rate limits and intervals you want to define\n* Independently tracks rate limits for multiple services or resources\n* Handles exceeded rate limits by either raising errors or adding delays\n* Several usage options including a normal function call, a decorator, or a contextmanager\n* Async support\n* Includes optional SQLite and Redis backends, which can be used to persist limit tracking across\n  multiple threads, processes, or application restarts\n\n## Installation\nInstall using pip:\n```\npip install pyrate-limiter\n```\n\nOr using conda:\n```\nconda install --channel conda-forge pyrate-limiter\n```\n\n## Basic usage\n\n### Defining rate limits\nConsider some public API (like LinkedIn, GitHub, etc.) that has rate limits like the following:\n```\n- 500 requests per hour\n- 1000 requests per day\n- 10000 requests per month\n```\n\nYou can define these rates using the `RequestRate` class, and add them to a `Limiter`:\n``` python\nfrom pyrate_limiter import BucketFullException, Duration, RequestRate, Limiter\n\nhourly_rate = RequestRate(500, Duration.HOUR) # 500 requests per hour\ndaily_rate = RequestRate(1000, Duration.DAY) # 1000 requests per day\nmonthly_rate = RequestRate(10000, Duration.MONTH) # 10000 requests per month\n\nlimiter = Limiter(hourly_rate, daily_rate, monthly_rate)\n```\n\nNote that these rates need to be ordered by interval length; in other words, an hourly rate must\ncome before a daily rate, etc.\n\n### Applying rate limits\nThen, use `Limiter.try_acquire()` wherever you are making requests (or other rate-limited operations).\nThis will raise an exception if the rate limit is exceeded.\n\n```python\nimport requests\n\ndef request_function():\n    limiter.try_acquire('identity')\n    requests.get('https://example.com')\n\nwhile True:\n    request_function()\n```\n\nAlternatively, you can use `Limiter.ratelimit()` as a function decorator:\n```python\n@limiter.ratelimit('identity')\ndef request_function():\n    requests.get('https://example.com')\n```\nSee [Additional usage options](#additional-usage-options) below for more details.\n\n### Identities\nNote that both `try_acquire()` and `ratelimit()` take one or more `identity` arguments. Typically this is\nthe name of the service or resource that is being rate-limited. This allows you to track rate limits\nfor these resources independently. For example, if you have a service that is rate-limited by user:\n```python\ndef request_function(user_ids):\n    limiter.try_acquire(*user_ids)\n    for user_id in user_ids:\n        requests.get(f'https://example.com?user_id={user_id}')\n```\n\n## Handling exceeded limits\nWhen a rate limit is exceeded, you have two options: raise an exception, or add delays.\n\n### Bucket analogy\n<img height=\"300\" align=\"right\" src=\"https://upload.wikimedia.org/wikipedia/commons/c/c4/Leaky_bucket_analogy.JPG\">\n\nAt this point it's useful to introduce the analogy of \"buckets\" used for rate-limiting. Here is a\nquick summary:\n\n* This library implements the [Leaky Bucket algorithm](https://en.wikipedia.org/wiki/Leaky_bucket).\n* It is named after the idea of representing some kind of fixed capacity -- like a network or service -- as a bucket.\n* The bucket \"leaks\" at a constant rate. For web services, this represents the **ideal or permitted request rate**.\n* The bucket is \"filled\" at an intermittent, unpredicatble rate, representing the **actual rate of requests**.\n* When the bucket is \"full\", it will overflow, representing **canceled or delayed requests**.\n\n### Rate limit exceptions\nBy default, a `BucketFullException` will be raised when a rate limit is exceeded.\nThe error contains a `meta_info` attribute with the following information:\n* `identity`: The identity it received\n* `rate`: The specific rate that has been exceeded\n* `remaining_time`: The remaining time until the next request can be sent\n\nHere's an example that will raise an exception on the 4th request:\n```python\nlimiter = Limiter(RequestRate(3, Duration.SECOND))\n\nfor _ in range(4):\n    try:\n        limiter.try_acquire('vutran')\n    except BucketFullException as err:\n        print(err)\n        # Output: Bucket for vutran with Rate 3/5 is already full\n        print(err.meta_info)\n        # Output: {'identity': 'vutran', 'rate': '5/5', 'remaining_time': 2.9,\n        #          'error': 'Bucket for vutran with Rate 3/5 is already full'}\n```\n\n### Rate limit delays\nYou may want to simply slow down your requests to stay within the rate limits instead of canceling\nthem. In that case you can use the `delay` argument. Note that this is only available for\n`Limiter.ratelimit()`:\n```python\n@limiter.ratelimit('identity', delay=True)\ndef my_function():\n    do_stuff()\n```\n\nIf you exceed a rate limit with a long interval (daily, monthly, etc.), you may not want to delay\nthat long. In this case, you can set a `max_delay` (in seconds) that you are willing to wait in\nbetween calls:\n```python\n@limiter.ratelimit('identity', delay=True, max_delay=360)\ndef my_function():\n    do_stuff()\n```\nIn this case, calls may be delayed by at most 360 seconds to stay within the rate limits; any longer\nthan that, and a `BucketFullException` will be raised instead. Without specifying `max_delay`, calls\nwill be delayed as long as necessary.\n\n## Additional usage options\nBesides `Limiter.try_acquire()`, some additional usage options are available using `Limiter.ratelimit()`:\n### Decorator\n`Limiter.ratelimit()` can be used as a decorator:\n```python\n@limiter.ratelimit('identity')\ndef my_function():\n    do_stuff()\n```\n\nAs with `Limiter.try_acquire()`, if calls to the wrapped function exceed the rate limits you\ndefined, a `BucketFullException` will be raised.\n\n### Contextmanager\n`Limiter.ratelimit()` also works as a contextmanager:\n\n```python\ndef my_function():\n    with limiter.ratelimit('identity', delay=True):\n        do_stuff()\n```\n\n### Async decorator/contextmanager\n`Limiter.ratelimit()` also support async functions, either as a decorator or contextmanager:\n```python\n@limiter.ratelimit('identity', delay=True)\nasync def my_function():\n    await do_stuff()\n\nasync def my_function():\n    async with limiter.ratelimit('identity'):\n        await do_stuff()\n```\n\nWhen delays are enabled for an async function, `asyncio.sleep()` will be used instead of `time.sleep()`.\n\n## Backends\nA few different bucket backends are available, which can be selected using the `bucket_class`\nargument for `Limiter`. Any additional backend-specific arguments can be passed\nvia `bucket_kwargs`.\n\n### Memory\nThe default bucket is stored in memory, backed by a `queue.Queue`. A list implementation is also available:\n```python\nfrom pyrate_limiter import Limiter, MemoryListBucket\n\nlimiter = Limiter(bucket_class=MemoryListBucket)\n```\n\n### SQLite\nIf you need to persist the bucket state, a SQLite backend is available.\n\nBy default it will store the state in the system temp directory, and you can use\nthe `path` argument to use a different location:\n```python\nfrom pyrate_limiter import Limiter, SQLiteBucket\n\nlimiter = Limiter(bucket_class=SQLiteBucket)\n```\n\nBy default, the database will be stored in the system temp directory. You can specify a different\npath via `bucket_kwargs`:\n```python\nlimiter = Limiter(\n    bucket_class=SQLiteBucket,\n    bucket_kwargs={'path': '/path/to/db.sqlite'},\n)\n```\n\n#### Concurrency\nThis backend is thread-safe, and may also be used with multiple child processes that share the same\n`Limiter` object, e.g. if created with `ProcessPoolExecutor` or `multiprocessing.Process`.\n\nIf you want to use SQLite with multiple processes with no shared state, for example if created by\nrunning multiple scripts or by an external process, some additional protections are needed. For\nthese cases, a separate `FileLockSQLiteBucket` class is available. This requires installing the\n[py-filelock](https://py-filelock.readthedocs.io) library.\n```python\nlimiter = Limiter(bucket_class=FileLockSQLiteBucket)\n```\n\n### Redis\nIf you have a larger, distributed application, Redis is an ideal backend. This\noption requires [redis-py](https://github.com/andymccurdy/redis-py).\n\nNote that this backend requires a `bucket_name` argument, which will be used as a kprefix for the\nRedis keys created. This can be used to disambiguate between multiple services using the same Redis\ninstance with pyrate-limiter.\n\n```python\nfrom pyrate_limiter import Limiter, RedisBucket\n\nlimiter = Limiter(bucket_class=RedisBucket, bucket_kwargs={'bucket_name': 'my_service'})\n```\n\n#### Connection settings\nIf you need to pass additional connection settings, you can use the `redis_pool` bucket argument:\n```python\nfrom redis import ConnectionPool\n\nredis_pool = ConnectionPool(host='localhost', port=6379, db=0)\nlimiter = Limiter(\n    bucket_class=RedisBucket,\n    bucket_kwargs={'redis_pool': redis_pool, 'bucket_name': 'my_service'},\n)\n```\n\n#### Redis clusters\nRedis clusters are also supported, which requires\n[redis-py-cluster](https://github.com/Grokzen/redis-py-cluster):\n```python\nfrom pyrate_limiter import Limiter, RedisClusterBucket\n\nlimiter = Limiter(bucket_class=RedisClusterBucket)\n```\n\n### Custom backends\nIf these don't suit your needs, you can also create your own bucket backend by extending `pyrate_limiter.bucket.AbstractBucket`.\n\n\n## Additional features\n\n### Time sources\nBy default, monotonic time is used, to ensure requests are always logged in the correct order.\n\nYou can specify a custom time source with the `time_function` argument. For example, you may want to\nuse the current UTC time for consistency across a distributed application using a Redis backend.\n```python\nfrom datetime import datetime\nfrom pyrate_limiter import Duration, Limiter, RequestRate\nfrom time import time\n\nrate = RequestRate(5, Duration.SECOND)\nlimiter_datetime = Limiter(rate, time_function=lambda: datetime.utcnow().timestamp())\n```\n\nOr simply use the basic `time.time()` function:\n```python\nfrom time import time\n\nrate = RequestRate(5, Duration.SECOND)\nlimiter_time = Limiter(rate, time_function=time)\n```\n\n## Examples\nTo prove that pyrate-limiter is working as expected, here is a complete example to demonstrate\nrate-limiting with delays:\n```python\nfrom time import perf_counter as time\nfrom pyrate_limiter import Duration, Limiter, RequestRate\n\nlimiter = Limiter(RequestRate(5, Duration.SECOND))\nn_requests = 27\n\n@limiter.ratelimit(\"test\", delay=True)\ndef limited_function(start_time):\n    print(f\"t + {(time() - start_time):.5f}\")\n\nstart_time = time()\nfor _ in range(n_requests):\n    limited_function(start_time)\nprint(f\"Ran {n_requests} requests in {time() - start_time:.5f} seconds\")\n```\n\nAnd an equivalent example for async usage:\n```python\nimport asyncio\nfrom time import perf_counter as time\nfrom pyrate_limiter import Duration, Limiter, RequestRate\n\nlimiter = Limiter(RequestRate(5, Duration.SECOND))\nn_requests = 27\n\n@limiter.ratelimit(\"test\", delay=True)\nasync def limited_function(start_time):\n    print(f\"t + {(time() - start_time):.5f}\")\n\nasync def test_ratelimit():\n    start_time = time()\n    tasks = [limited_function(start_time) for _ in range(n_requests)]\n    await asyncio.gather(*tasks)\n    print(f\"Ran {n_requests} requests in {time() - start_time:.5f} seconds\")\n\nasyncio.run(test_ratelimit())\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vutran1710/PyrateLimiter",
    "keywords": "rate,rate-limiter,rate_limiter,ratelimiter,leaky-bucket,ratelimit,ratelimiting",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyrate-limiter-concord",
    "package_url": "https://pypi.org/project/pyrate-limiter-concord/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyrate-limiter-concord/",
    "project_urls": {
      "Documentation": "https://pyrate-limiter.readthedocs.io",
      "Homepage": "https://github.com/vutran1710/PyrateLimiter",
      "Repository": "https://github.com/vutran1710/PyrateLimiter"
    },
    "release_url": "https://pypi.org/project/pyrate-limiter-concord/2.9.3/",
    "requires_dist": [
      "filelock (>=3.0); extra == \"all\"",
      "aioredis (>=2.0.1,<3.0.0)",
      "furo (>=2022.3.4,<2023.0.0); extra == \"docs\"",
      "myst-parser (>=0.17); (python_version >= \"3.7\") and (extra == \"docs\")",
      "sphinx (>=4.3.0,<5.0.0); extra == \"docs\"",
      "sphinx-autodoc-typehints (>=1.17,<2.0); (python_version >= \"3.7\") and (extra == \"docs\")",
      "sphinx-copybutton (>=0.5); extra == \"docs\"",
      "sphinxcontrib-apidoc (>=0.3,<0.4); extra == \"docs\""
    ],
    "requires_python": ">=3.6.2,<4.0.0",
    "summary": "Python Rate-Limiter using Leaky-Bucket Algorithm",
    "version": "2.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13609969,
  "releases": {
    "2.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66a731e3f979d20a6c92f007e5b018897f118b2f5ccfe75bde4261806ac35617",
          "md5": "518990da65bee4a6efc4adad592affbf",
          "sha256": "0e19bba5a3e6869428ea7a19f6729aeae53ab33d203c8e543f3b08de2ba2f074"
        },
        "downloads": -1,
        "filename": "pyrate_limiter_concord-2.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "518990da65bee4a6efc4adad592affbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 16717,
        "upload_time": "2022-04-25T02:40:16",
        "upload_time_iso_8601": "2022-04-25T02:40:16.031655Z",
        "url": "https://files.pythonhosted.org/packages/66/a7/31e3f979d20a6c92f007e5b018897f118b2f5ccfe75bde4261806ac35617/pyrate_limiter_concord-2.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b70edab2ce811f2c231de2b059f8785a94cd439d54beb899de36f10f70660131",
          "md5": "b72c431218c2668e70406aaea063f842",
          "sha256": "1454374d27b73207be75bb11ccc07956afce7f08e1d67d0cde996448301f7624"
        },
        "downloads": -1,
        "filename": "pyrate-limiter-concord-2.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b72c431218c2668e70406aaea063f842",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 16195,
        "upload_time": "2022-04-25T02:40:09",
        "upload_time_iso_8601": "2022-04-25T02:40:09.673111Z",
        "url": "https://files.pythonhosted.org/packages/b7/0e/dab2ce811f2c231de2b059f8785a94cd439d54beb899de36f10f70660131/pyrate-limiter-concord-2.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3aec77275a43013f584db12d8e73443e8a141fccff1f2bf1998b6686d6a11b12",
          "md5": "cb2d97da214d9e2c55dc09076791fefb",
          "sha256": "0d6237a325563972a690abfa1a8341e3792fa9861a046d7f26442e20fd11c538"
        },
        "downloads": -1,
        "filename": "pyrate_limiter_concord-2.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb2d97da214d9e2c55dc09076791fefb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 16735,
        "upload_time": "2022-04-25T03:00:12",
        "upload_time_iso_8601": "2022-04-25T03:00:12.797715Z",
        "url": "https://files.pythonhosted.org/packages/3a/ec/77275a43013f584db12d8e73443e8a141fccff1f2bf1998b6686d6a11b12/pyrate_limiter_concord-2.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87043e394654c8824fad148dbce9694b1c52e0a910dd7cb142572a19448655d1",
          "md5": "d200cb0e942dd7ae11c3966177929142",
          "sha256": "5c252e336fd275d85f245435bcc57ab2e0ccc995167dbcfa53d1add929195620"
        },
        "downloads": -1,
        "filename": "pyrate-limiter-concord-2.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d200cb0e942dd7ae11c3966177929142",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 16227,
        "upload_time": "2022-04-25T03:00:07",
        "upload_time_iso_8601": "2022-04-25T03:00:07.004662Z",
        "url": "https://files.pythonhosted.org/packages/87/04/3e394654c8824fad148dbce9694b1c52e0a910dd7cb142572a19448655d1/pyrate-limiter-concord-2.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4675361372e2d37764fe66dc6f7d48c0575ca82bfd11f47baca5fde35f174580",
          "md5": "674bc5278aca35a54410948762cc2c9e",
          "sha256": "81e01a43c1e9b48b9036fd8dc5a7d27147732bcfd0350dddccf1096f4ece4d2a"
        },
        "downloads": -1,
        "filename": "pyrate_limiter_concord-2.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "674bc5278aca35a54410948762cc2c9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 16737,
        "upload_time": "2022-04-25T03:02:56",
        "upload_time_iso_8601": "2022-04-25T03:02:56.128875Z",
        "url": "https://files.pythonhosted.org/packages/46/75/361372e2d37764fe66dc6f7d48c0575ca82bfd11f47baca5fde35f174580/pyrate_limiter_concord-2.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90d3074475f0b6c5639aa129da7c52798bd09a2258cebf652871d0a235147f4d",
          "md5": "7572d69a7ed11d53445e80fa6d794bdb",
          "sha256": "6fad8a9d9088588116a6f0f0f3ea280377b0a2ab94bffc2bcaa76f3d5e4ce3bc"
        },
        "downloads": -1,
        "filename": "pyrate-limiter-concord-2.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7572d69a7ed11d53445e80fa6d794bdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 16223,
        "upload_time": "2022-04-25T03:02:50",
        "upload_time_iso_8601": "2022-04-25T03:02:50.283334Z",
        "url": "https://files.pythonhosted.org/packages/90/d3/074475f0b6c5639aa129da7c52798bd09a2258cebf652871d0a235147f4d/pyrate-limiter-concord-2.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "243c3af5a55d8559e289d08c0142b942299cb4d06aa86e6841209a03a5e400b7",
          "md5": "a69f05373a85e2032b325fc2d79129cd",
          "sha256": "1e365a00d6189ca76da5d4b8871b72d4c44ab9d5b6fb55e34791aa7360b78df1"
        },
        "downloads": -1,
        "filename": "pyrate_limiter_concord-2.9.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a69f05373a85e2032b325fc2d79129cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 16737,
        "upload_time": "2022-04-25T03:09:19",
        "upload_time_iso_8601": "2022-04-25T03:09:19.341648Z",
        "url": "https://files.pythonhosted.org/packages/24/3c/3af5a55d8559e289d08c0142b942299cb4d06aa86e6841209a03a5e400b7/pyrate_limiter_concord-2.9.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d2121a3c8c91d72a08ac21cbe242658eea4517d756f5f9cd25be209e7fe1d93",
          "md5": "49cacc082d1a0c77ba987435c6fb06b0",
          "sha256": "eafb6173555466919d480303b992daf711429a87743a3b4597daf730a377edff"
        },
        "downloads": -1,
        "filename": "pyrate-limiter-concord-2.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "49cacc082d1a0c77ba987435c6fb06b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4.0.0",
        "size": 16222,
        "upload_time": "2022-04-25T03:09:13",
        "upload_time_iso_8601": "2022-04-25T03:09:13.601167Z",
        "url": "https://files.pythonhosted.org/packages/9d/21/21a3c8c91d72a08ac21cbe242658eea4517d756f5f9cd25be209e7fe1d93/pyrate-limiter-concord-2.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "243c3af5a55d8559e289d08c0142b942299cb4d06aa86e6841209a03a5e400b7",
        "md5": "a69f05373a85e2032b325fc2d79129cd",
        "sha256": "1e365a00d6189ca76da5d4b8871b72d4c44ab9d5b6fb55e34791aa7360b78df1"
      },
      "downloads": -1,
      "filename": "pyrate_limiter_concord-2.9.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a69f05373a85e2032b325fc2d79129cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.2,<4.0.0",
      "size": 16737,
      "upload_time": "2022-04-25T03:09:19",
      "upload_time_iso_8601": "2022-04-25T03:09:19.341648Z",
      "url": "https://files.pythonhosted.org/packages/24/3c/3af5a55d8559e289d08c0142b942299cb4d06aa86e6841209a03a5e400b7/pyrate_limiter_concord-2.9.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d2121a3c8c91d72a08ac21cbe242658eea4517d756f5f9cd25be209e7fe1d93",
        "md5": "49cacc082d1a0c77ba987435c6fb06b0",
        "sha256": "eafb6173555466919d480303b992daf711429a87743a3b4597daf730a377edff"
      },
      "downloads": -1,
      "filename": "pyrate-limiter-concord-2.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "49cacc082d1a0c77ba987435c6fb06b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.2,<4.0.0",
      "size": 16222,
      "upload_time": "2022-04-25T03:09:13",
      "upload_time_iso_8601": "2022-04-25T03:09:13.601167Z",
      "url": "https://files.pythonhosted.org/packages/9d/21/21a3c8c91d72a08ac21cbe242658eea4517d756f5f9cd25be209e7fe1d93/pyrate-limiter-concord-2.9.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}