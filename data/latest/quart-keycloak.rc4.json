{
  "info": {
    "author": "Kroket Ltd.",
    "author_email": "code@kroket.io",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Quart-Keycloak\n\nAdd [Keycloak](https://www.keycloak.org/) (OpenID Connect) to your Quart application.\n\n### TOC\n\n- [Quick start](#quick-start)\n- [Compatibility](#compatibility)\n- [Session](#backend-sessions)\n- [Logout](#logout)\n  - [Handling logout 'events'](#handling-logout-events)\n- [FAQ](#faq)\n  - [Multiple keycloaks](#multiple-keycloaks)\n  - [HTTP Proxy](#http-proxy)\n  - [Using different IdPs](#using-different-idps)\n  - [Will you support OIDC feature $x?](#will-you-support-oidc-feature-x)\n  - [Common errors](#common-errors)\n- [Terminology](#terminology)\n\n## Quick start\n\n```text\n$ pip install quart-keycloak\nor\n$ pipenv install quart-keycloak\n```\n\nMinimal example:\n\n```python3\nfrom quart import Quart, url_for, jsonify, session, redirect\nfrom quart_session import Session\nfrom quart_keycloak import Keycloak, KeycloakAuthToken, KeycloakLogoutRequest\n\napp = Quart(__name__)\napp.secret_key = 'changeme'\napp.config['SESSION_TYPE'] = 'redis'\nSession(app)\n\nopenid_keycloak_config = {\n    \"client_id\": \"\",\n    \"client_secret\": \"\",\n    \"configuration\": \"https://example.com/realms/master/.well-known/openid-configuration\"\n}\n\nkeycloak = Keycloak(app, **openid_keycloak_config)\n\n\n@keycloak.after_login()\nasync def handle_user_login(auth_token: KeycloakAuthToken):\n    user = await keycloak.user_info(auth_token.access_token)  # optionally call the userinfo endpoint for more info\n\n    # set session\n    session['auth_token'] = auth_token\n    return redirect(url_for('root'))\n\n@app.route(\"/logout\")\nasync def logout():\n    # route that clears the session\n    session.clear()\n    return redirect(url_for('root'))\n\n\n@app.route(\"/\")\nasync def root():\n    # redirect the user after logout\n    logout_url = url_for('logout', _external=True)\n\n    # the login URL\n    login_url_keycloak = url_for(keycloak.endpoint_name_login)\n\n    # the logout URL, `redirect_uri` is required. `state` is optional.\n    logout_url_keycloak = url_for(keycloak.endpoint_name_logout, redirect_uri=logout_url, state='bla')\n\n    return f\"\"\"\n    <b>token:</b> {session.get('auth_token')}<br><hr>\n    Login via keycloak: <a href=\"{login_url_keycloak}\">Login via Keycloak</a><br>\n    Logout via keycloak: <a href=\"{logout_url_keycloak}\">Logout via Keycloak</a>\n    \"\"\"\n\n\napp.run(\"localhost\", port=2700, debug=True, use_reloader=False)\n```\n\n## Compatibility\n\nThis extension is known to work on the following IdPs:\n\n- Keycloak 12 till 19\n- Keycloak 10 (limited features)\n\nAnd (probably) also (but not officially supported):\n\n- Okta\n- Azure AD (OIDC)\n\nWhen running Keycloak 10 you'll need to enable 'legacy' mode by passing \nthe parameter `legacy=True` to the Keycloak constructor:\n\n```python3\nkeycloak = Keycloak(app, legacy=True, client_id=...)\n```\n\nNote that the OpenID configuration URL changed between the Keycloak versions:\n\n- Keycloak 10: `https://example.com/auth/realms/master/.well-known/openid-configuration`\n- Keycloak 19: `https://example.com/realms/master/.well-known/openid-configuration`\n\n## Backend Sessions\n\nIn the [Quick Start](#quick-start) example above, the extension\n[quart-session](https://github.com/kroketio/quart-session/) is leveraged to provide Quart a backend session \ninterface via Redis. This is strongly recommended as the default session storage is a client-side \ncookie which is difficult to invalidate. For some OIDC features we need to invalidate sessions.\n\n## Login\n\nGenerate a login URL and redirect the user. \n\n```python3\nfrom quart import url_for, redirect\n\n@app.route('/login')\nasync def login():\n  login_url_keycloak = url_for(keycloak.endpoint_name_login)\n  return redirect(login_url_keycloak)\n```\n\nUse decorator `@keycloak.after_login()` to setup a session within Quart after the user logged in.\n\n```python3\nfrom quart import session, redirect, url_for\nfrom quart_keycloak import KeycloakAuthToken\n\n@keycloak.after_login()\nasync def handle_user_login(auth_token: KeycloakAuthToken):\n    session['auth_token'] = auth_token\n    return redirect(url_for('some_other_place'))\n```\n\n## Logout\n\nGenerate a logout URL and redirect the user. You will need to provide `redirect_uri` to specify \nthe return URL (optionally you may pass a `state` parameter). It makes sense to redirect the user back \nto a URL that clears the session on the Quart side, for example `/after_logout`.\n\nIn short:\n\n1. Redirect to `keycloak.endpoint_name_logout` (by default `/openid/logout`)\n2. Which redirects to Keycloak\n3. and Keycloak redirects back to Quart - to the `redirect_uri` that you passed in step 1.\n\n```python3\nfrom quart import session, redirect, url_for\n\n@app.route(\"/logout\")\nasync def logout():\n    logout_url_keycloak = url_for(keycloak.endpoint_name_logout, redirect_uri=url_for('after_logout', _external=True))\n    return redirect(logout_url_keycloak)\n\n@app.route(\"/after_logout\")\nasync def after_logout():\n    session.clear()\n    return redirect(url_for('root'))\n\n@app.route(\"/\")\nasync def root():\n    return \"Hello world!\"\n```\n\n### Handling logout 'events'\n\nOptionally, Keycloak has the ability to send Quart a logout event (called `logout request`) to \na URL that you provide. This is useful in the situation that a user is (forcefully) logged out of Keycloak \nvia the Keycloak web-interface (or perhaps via another application). Quart would need to receive such \nlogout event in order to know the session does not exist anymore on the Keycloak side (and invalidate it on the \nQuart side), as this logout request was not initiated by our Quart application.\n\nIn the client settings, fill in `Backchannel logout URL` (replace `example.com` with your own) and \nenable the toggle `Backchannel logout session required`. Note that your Quart application will have \nto be reachable by Keycloak, as Keycloak will try to send a HTTP request to this URL upon user logout.\n\n![https://i.imgur.com/6hZXHwt.png](https://i.imgur.com/6hZXHwt.png)\n\nWe can pick up this logout request via a decorator:\n\n```python3\nfrom quart_session import SessionInterface\nfrom quart_keycloak import KeycloakLogoutRequest\n\n@keycloak.after_logout_request()\nasync def handle_logout_request(token: KeycloakLogoutRequest):\n    cache: SessionInterface = app.session_interface\n    redis_key_id = f\"{app.session_interface.key_prefix}{token.sid}\"\n    await cache.delete(redis_key_id)\n    return \"OK\"\n```\n\nUpon receiving a logout request, we'll need to find the right session to clear. Thankfully the incoming `token` \nparameter will contain a `sid` (session ID) that we can use for this - which prevents us from, for example, \nhaving to loop all available Redis session keys. \n\nTo achieve this, we can make Quart's session identifier the same as Keycloak's session identifier \nso that it is the same during handling of the logout request.\n\n```python3\n@keycloak.after_login()\nasync def handle_user_login(auth_token: KeycloakAuthToken):\n    session['auth_token'] = auth_token\n    session.sid = auth_token.access_token_d['sid']  # <== here\n    return redirect(url_for('root'))\n```\n\nIf you do not like this approach, you can always create some sort of\nmapper that links Keycloak `sid`'s to Quart sessions.\n\n## FAQ\n\n### Multiple keycloak's\n\nIt is perfectly fine to use multiple Keycloak instances, just make sure to provide \ncustom route handlers for `route_login`, `route_auth`, `route_logout`, and `route_logout_request` else \nthe routes start to overlap.\n\n### HTTP Proxy\n\nQuart-Keycloak uses `aiohttp` which has [an option called 'trust_env'](https://docs.aiohttp.org/en/stable/client_reference.html). We can pass this `trust_env` option via the `aiohttp_clientsession_opts` parameter, e.g:\n\n\n```python3\nkeycloak = Keycloak(app, aiohttp_clientsession_opts={'trust_env': True})\n```\n\n`aiohttp` will now listen to `HTTP_PROXY` and `HTTPS_PROXY` env. variables.\n\n### Using different IdPs\n\nPreviously this extension was known as `quart-session-openid` and made an effort to support multiple \nOpenID servers but it turns out that everyone has their own interpretation of the OpenID spec so \nIdPs tended to vary which caused breakage. Even between Keycloak versions there are small (but breaking) \nchanges - so it was decided to narrow the scope, rebrand to `quart-keycloak` and focus on modern Keycloak versions.\n\n### Will you support OIDC feature $x?\n\nThe OpenID specification is rather large (and confusing) and this extension tries to abstract the \ncomplicated parts away and makes the fair assumption that your web application \nwants some basic OIDC features, mostly: login and logout. Undoubtedly you may use Keycloak in various \nother exotic ways but this limited scope ensures the extension stays maintainable. Please keep \nthat in mind when submitting a pull-request.\n\n### Common errors\n\n```text\nredirect error 'invalid_request' Invalid scopes: openid profile email\n```\n\nKeycloak version too old. Run this extension in [legacy mode](#compatibility).\n\n## Terminology\n\n- `OIDC`: OpenID Connect - A layer built on top of the OAuth 2.0 protocol\n- `IdP`: The identity provider, also sometimes called `OP` (OpenID Provider). In our case; Keycloak.\n- `Client`: the application that interacts with a `IdP` (Keycloak), in our case Quart. Sometimes also called `Relying Party`.\n- Client Types: \n- `confidential` - Clients **capable** of maintaining the confidentiality of their credentials, so backend applications made in PHP, Perl, Python, etc. The example in \"[Quick Start](#QuickStart) is an example of a confidential client.\n- `public` - Clients **incapable** of maintaining the confidentiality of their credentials: VueJS, React, Angular.\n- `User Agent`: the end-user, often times 'the browser'.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kroketio/quart-keycloak",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Quart-Keycloak",
    "package_url": "https://pypi.org/project/Quart-Keycloak/",
    "platform": "any",
    "project_url": "https://pypi.org/project/Quart-Keycloak/",
    "project_urls": {
      "Homepage": "https://github.com/kroketio/quart-keycloak"
    },
    "release_url": "https://pypi.org/project/Quart-Keycloak/1.0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Add Keycloak OpenID Connect to your Quart application",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17539136,
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d89c14e8dec0ecaf0bee71c62d7ab5ce3a4b9287a2b319815a81f4413181811c",
          "md5": "0dc87121d7200a552ca4d9d000296fed",
          "sha256": "507520a3d07e59afe51643bdeb660931e173eaca4dc3744bbc22fb62441d9ae6"
        },
        "downloads": -1,
        "filename": "Quart-Keycloak-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0dc87121d7200a552ca4d9d000296fed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12757,
        "upload_time": "2022-11-13T23:51:25",
        "upload_time_iso_8601": "2022-11-13T23:51:25.589673Z",
        "url": "https://files.pythonhosted.org/packages/d8/9c/14e8dec0ecaf0bee71c62d7ab5ce3a4b9287a2b319815a81f4413181811c/Quart-Keycloak-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab2ebdea4cd06dbe4166b582f944c96587d9967a3366ddb37f0cc73df587fc11",
          "md5": "0b28b6b5df5d4c86b6b24ea1c8413e6e",
          "sha256": "5ff54e008d34b82092a948147e25ee59b2314b63975e7366100ac5a208c886ad"
        },
        "downloads": -1,
        "filename": "Quart-Keycloak-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0b28b6b5df5d4c86b6b24ea1c8413e6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12776,
        "upload_time": "2022-11-14T12:08:28",
        "upload_time_iso_8601": "2022-11-14T12:08:28.589559Z",
        "url": "https://files.pythonhosted.org/packages/ab/2e/bdea4cd06dbe4166b582f944c96587d9967a3366ddb37f0cc73df587fc11/Quart-Keycloak-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d150ee8814e2e0847a21c8cb2a72fdf88e91271d516829b843a034d26344c6d4",
          "md5": "0948b3d90b000f8aeda20e0c751c7d02",
          "sha256": "810580b18e8eaf2769fe10364b7993a1fb21190495a6070e4a2405ab6cade731"
        },
        "downloads": -1,
        "filename": "Quart-Keycloak-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0948b3d90b000f8aeda20e0c751c7d02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13119,
        "upload_time": "2023-03-31T19:12:56",
        "upload_time_iso_8601": "2023-03-31T19:12:56.952320Z",
        "url": "https://files.pythonhosted.org/packages/d1/50/ee8814e2e0847a21c8cb2a72fdf88e91271d516829b843a034d26344c6d4/Quart-Keycloak-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7b027b8b1c3e19b0bd351eab710b616dc067590f9334a452c4f1a749218a117",
          "md5": "886c6c8fb1855c22edd892035316ae1c",
          "sha256": "a9386f686efae5969fe769b49a9498a1a452615bf8fae87d1026bbdae7140a82"
        },
        "downloads": -1,
        "filename": "Quart-Keycloak-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "886c6c8fb1855c22edd892035316ae1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13157,
        "upload_time": "2023-04-01T11:37:53",
        "upload_time_iso_8601": "2023-04-01T11:37:53.901782Z",
        "url": "https://files.pythonhosted.org/packages/a7/b0/27b8b1c3e19b0bd351eab710b616dc067590f9334a452c4f1a749218a117/Quart-Keycloak-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7b027b8b1c3e19b0bd351eab710b616dc067590f9334a452c4f1a749218a117",
        "md5": "886c6c8fb1855c22edd892035316ae1c",
        "sha256": "a9386f686efae5969fe769b49a9498a1a452615bf8fae87d1026bbdae7140a82"
      },
      "downloads": -1,
      "filename": "Quart-Keycloak-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "886c6c8fb1855c22edd892035316ae1c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13157,
      "upload_time": "2023-04-01T11:37:53",
      "upload_time_iso_8601": "2023-04-01T11:37:53.901782Z",
      "url": "https://files.pythonhosted.org/packages/a7/b0/27b8b1c3e19b0bd351eab710b616dc067590f9334a452c4f1a749218a117/Quart-Keycloak-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}