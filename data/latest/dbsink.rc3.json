{
  "info": {
    "author": "Kyle Wilcox",
    "author_email": "kyle@axds.co",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "## dbsink\n\nRead from a kafka topic and sink to a database table, one row per message.\n\nThis is not unlike the Kafka Connect JdbcConnector. This project has a much lower bar of entry and doesn't require diving into the Kafka Connect ecosystem. I wrote the equivilent to this project using a custom JdbcConnector and it was getting out of control and was basically un-testable. So here we are.\n\nYou can choose to unpack the data as `avro`, `msgpack` or the default `json`. `avro` requires an additional `registry` parameter.\n\nDocker images: https://hub.docker.com/r/axiom/dbsink/builds\n\n## WHY?\n\nI needed to read from well-defined kafka topics and store the results in a database table so collaborators could interact with the data in a more familiar way.\n\nIt is also a very convienent and easy to setup PostgREST on top of the resulting tables to get a quick read-only REST API on top of the tabled messages.\n\n## Mapping messages to tables\n\nYou can define custom mappings between messages and tables using a python class. You may register your custom mappings with the `dbsink.maps` entrypoint to have them available to `dbsink` at run-time.\n\n```python\nentry_points = {\n    'dbsink.maps': [\n        'YourCustomMap    = you.custom.map.module:CustomMapClass',\n        # ...\n    ]\n}\n```\n\nCustom mapping classes should inherit from the `BaseMap` class in `dbsink` and override the following functions as needed:\n\n* `upsert_constraint_name` - Name of the constraint to use for upserting data. Set to to `None` to disable upserting. Use this class property when creating the upsert constraint on your table (see example below).\n\n* `unique_index_name` - Unique index name based on the table name. Use this if defining a single unique index on your table.\n\n* `sequence_name` - Unique sequence name based on the table name. Use this if defining a single sequence column on your table.\n\n* `_check_key` - Checks for validity of a message's `key` before trying to sink. Return `True` if valid and raise an error if not.\n\n* `_check_value` - Checks for validity of a message's `value` before trying to sink. Return `True` if valid and raise an error if not.\n\n* `schema` - A list of SQLAlchmy [Column](https://docs.sqlalchemy.org/en/13/core/metadata.html#sqlalchemy.schema.Column), [Index](https://docs.sqlalchemy.org/en/13/core/constraints.html?highlight=index#sqlalchemy.schema.Index), and [Constraint](https://docs.sqlalchemy.org/en/13/core/constraints.html?highlight=constraint#sqlalchemy.schema.Constraint) schema definitions to use in table creation and updating. This fully describes your table's schema.\n\n* `message_to_values` - A function accepting `key` and `value` arguments and returning a tuple `key, dict` where the dict is the `values` to pass to SQLAlchemy's `insert().values` method. The `value` argument to this function will already be unpacked if `avro` or `msgpack` packing was specified.\n\n    ```python\n    insert(table).values(\n      # dict_returned_ends_up_here\n    )\n    ```\n\n#### Example\n\nA simple example is the `StringMap` mapping included with `dbsink`\n\n```python\nfrom datetime import datetime\n\nimport pytz\nimport sqlalchemy as sql\nimport simplejson as json\n\nfrom dbsink.maps import BaseMap\n\n\nclass StringMap(BaseMap):\n\n    @property\n    def upsert_constraint_name(self):\n        return None  # Ignore upserts\n\n    def _check_key(self, key):\n        return True  # All keys are valid\n\n    def _check_value(self, value):\n        # Make sure values are JSON parsable\n        _ = json.loads(json.dumps(value, ignore_nan=True))\n        return True\n\n    @property\n    def schema(self):\n        return [\n            sql.Column('id',       sql.Integer, sql.Sequence(self.sequence_name), primary_key=True),\n            sql.Column('sinked',   sql.DateTime(timezone=True), index=True),\n            sql.Column('key',      sql.String, default='', index=True),\n            sql.Column('payload',  sql.String)\n        ]\n\n    def message_to_values(self, key, value):\n        # Raises if invalid. This calls `._check_key` and `._check_value`\n        self.check(key, value)\n\n        values = {\n            'sinked':  datetime.utcnow().replace(tzinfo=pytz.utc).isoformat(),\n            'key':     key,\n            'payload': json.dumps(value),\n        }\n\n        return key, values\n```\n\n#### Advanced Example\n\nThere are no restrictions on table schemas or how you map the message data into the schema. Take this example below that uses a `PostGIS` column.\n\n\n```python\nfrom datetime import datetime\n\nimport pytz\nimport sqlalchemy as sql\nimport simplejson as json\nfrom shapely.geometry import shape\nfrom geoalchemy2.types import Geography\n\nfrom dbsink.maps import BaseMap\n\n\nclass NamedGenericGeography(BaseMap):\n\n    def _check_key(self, key):\n        return True  # All keys are valid\n\n    def _check_value(self, value):\n        # Make sure values are JSON parsable\n        _ = json.loads(json.dumps(value, ignore_nan=True))\n        return True\n\n    @property\n    def schema(self):\n        return [\n            sql.Column('id',       sql.Integer, sql.Sequence(self.sequence_name), primary_key=True),\n            sql.Column('name',     sql.String, default='', index=True),\n            sql.Column('time',     sql.DateTime(timezone=True), index=True),\n            sql.Column('geom',     Geography(srid=4326)),\n            sql.Index(\n                self.unique_index_name,\n                'name',\n                'time',\n                unique=True,\n            ),\n            sql.UniqueConstraint(\n                'name',\n                'time',\n                name=self.upsert_constraint_name\n            )\n        ]\n\n    def message_to_values(self, key, value):\n        \"\"\" Assumes a message format of\n        {\n          \"time\": 1000000000, # unix epoch\n          \"name\": \"my cool thing\",\n          \"geojson\": {\n            \"geometry\": {\n              \"type\": \"Polygon\",\n              \"coordinates\": [ [ [ -118.532116484818843, 32.107425500492766 ], [ -118.457544847012443, 32.107425500492702 ], [ -118.457544847012443, 32.054517056541435 ], [ -118.532116484818872, 32.054517056541464 ], [ -118.532116484818843, 32.107425500492766 ] ] ]\n            }\n          }\n        }\n        \"\"\"\n        # Raises if invalid\n        self.check(key, value)\n\n        # GeoJSON `geometry` attribute to WKT\n        geometry = shape(value['geojson']['geometry']).wkt\n\n        values = {\n            'name': value['name']\n            'time': datetime.fromtimestamp(value['time'], pytz.utc).isoformat()\n            'geom': geometry\n        }\n\n        return key, values\n```\n\n\n\n## Configuration\n\nThis program uses [`Click`](https://click.palletsprojects.com/) for the CLI interface. For all options please use the `help`:\n\n```sh\n$ dbsink --help\n```\n\n#### Environmental Variables\n\nAll configuration options can be specified with environmental variables using the pattern `DBSINK_[argument_name]=[value]`. For more information see [the click documentation](https://click.palletsprojects.com/en/7.x/options/?highlight=auto_envvar_prefix#values-from-environment-variables).\n\n```bash\nDBSINK_TOPIC=\"topic-to-listen-to\" \\\nDBSINK_LOOKUP=\"StringMap\" \\\nDBSINK_TABLE=\"MyCoolTable\" \\\nDBSINK_CONSUMER=\"myconsumer\" \\\nDBSINK_PACKING=\"msgpack\" \\\nDBSINK_OFFSET=\"earlist\" \\\nDBSINK_DROP=\"true\" \\\nDBSINK_VERBOSE=\"1\" \\\n    dbsink\n```\n\n## Testing\n\nYou can run the tests using `pytest`. To run the integration tests, start a database with `docker run -p 30300:5432 --name dbsink-int-testing-db -e POSTGRES_USER=sink -e POSTGRES_PASSWORD=sink -e POSTGRES_DB=sink -d mdillon/postgis:11` and run `pytest -m integration`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/axiom-data-science/dbsink",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbsink",
    "package_url": "https://pypi.org/project/dbsink/",
    "platform": "",
    "project_url": "https://pypi.org/project/dbsink/",
    "project_urls": {
      "Homepage": "https://github.com/axiom-data-science/dbsink"
    },
    "release_url": "https://pypi.org/project/dbsink/2.6.0/",
    "requires_dist": [
      "click",
      "easyavro (>=3.0.0)",
      "geoalchemy2",
      "msgpack-python",
      "psycopg2",
      "python-dateutil",
      "pytz",
      "shapely",
      "simplejson",
      "sqlalchemy"
    ],
    "requires_python": ">=3.7",
    "summary": "Tools to sink kafka messages to a database table",
    "version": "2.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6928581,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb92309a08fab1c29376cf1857b5674c304e2cacaeaabf665bd75d42a9ef12cf",
          "md5": "6fef984ea47cce5b3ca160b185e5f548",
          "sha256": "779cd1e17af7e5f673ccfb5478d0d9ead81907c822d4cb6644c935725d03cda9"
        },
        "downloads": -1,
        "filename": "dbsink-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fef984ea47cce5b3ca160b185e5f548",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14564,
        "upload_time": "2019-09-12T19:07:52",
        "upload_time_iso_8601": "2019-09-12T19:07:52.168083Z",
        "url": "https://files.pythonhosted.org/packages/eb/92/309a08fab1c29376cf1857b5674c304e2cacaeaabf665bd75d42a9ef12cf/dbsink-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f100682ca831049eca21550d929cef76ce52194b5cfd49976ea16e3c4a5b3018",
          "md5": "b13e6872f6ac180a826975a0c808a2c3",
          "sha256": "2a81b330b28d011384ac85ed5ec965af533061d20d6a4a764ad583f6078911a3"
        },
        "downloads": -1,
        "filename": "dbsink-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b13e6872f6ac180a826975a0c808a2c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15516,
        "upload_time": "2019-09-12T19:07:54",
        "upload_time_iso_8601": "2019-09-12T19:07:54.869614Z",
        "url": "https://files.pythonhosted.org/packages/f1/00/682ca831049eca21550d929cef76ce52194b5cfd49976ea16e3c4a5b3018/dbsink-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18d8d98b0c26dda2ac55924ab9b07cb4cbaa7cb1be14d03b75916b35961ad5c2",
          "md5": "d011e3b027f08b6a77fcb2838b466c2d",
          "sha256": "74895ea9e0365bfd1b7f95fec6e62fdca09c8217ee7631dc7bafccea367ece1a"
        },
        "downloads": -1,
        "filename": "dbsink-2.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d011e3b027f08b6a77fcb2838b466c2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26856,
        "upload_time": "2020-04-01T13:21:23",
        "upload_time_iso_8601": "2020-04-01T13:21:23.782526Z",
        "url": "https://files.pythonhosted.org/packages/18/d8/d98b0c26dda2ac55924ab9b07cb4cbaa7cb1be14d03b75916b35961ad5c2/dbsink-2.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be0e9a1052d5e7e10475f7099bb4027bff4d421db2ad12f9a607feac42e82552",
          "md5": "f27c951a45a7a75a2b9d7b570b637885",
          "sha256": "140fea42081fcefd9a93f5a5bcb633372845301b59683b2864c6fe5ff8df01d4"
        },
        "downloads": -1,
        "filename": "dbsink-2.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f27c951a45a7a75a2b9d7b570b637885",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 134908,
        "upload_time": "2020-04-01T13:21:25",
        "upload_time_iso_8601": "2020-04-01T13:21:25.364168Z",
        "url": "https://files.pythonhosted.org/packages/be/0e/9a1052d5e7e10475f7099bb4027bff4d421db2ad12f9a607feac42e82552/dbsink-2.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17e3d782fa3da27c8897ef6dfcdb0f55fd8b2b408f17e74e01b0d88feb8837ef",
          "md5": "cd51db33e8b81fd16dd1ee0a0571ff3c",
          "sha256": "c72d186e9877e292bd34fa6b71f8cb3a6b3fd3cd6de09f569a66a7ccb4df424a"
        },
        "downloads": -1,
        "filename": "dbsink-2.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd51db33e8b81fd16dd1ee0a0571ff3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15569,
        "upload_time": "2020-04-01T15:42:45",
        "upload_time_iso_8601": "2020-04-01T15:42:45.260701Z",
        "url": "https://files.pythonhosted.org/packages/17/e3/d782fa3da27c8897ef6dfcdb0f55fd8b2b408f17e74e01b0d88feb8837ef/dbsink-2.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ac0776ca96a601693e70c64a837519b1ffd919b0de3f77a6ee8578d14b70d06",
          "md5": "2411f078c69a3e5482573a3a6b9d7e04",
          "sha256": "9b94b458e6887234bb7cd6e422f6cc41ea3dcbc758d829de5ad5aac8d16563ba"
        },
        "downloads": -1,
        "filename": "dbsink-2.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2411f078c69a3e5482573a3a6b9d7e04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17099,
        "upload_time": "2020-04-01T15:42:46",
        "upload_time_iso_8601": "2020-04-01T15:42:46.266159Z",
        "url": "https://files.pythonhosted.org/packages/9a/c0/776ca96a601693e70c64a837519b1ffd919b0de3f77a6ee8578d14b70d06/dbsink-2.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17e3d782fa3da27c8897ef6dfcdb0f55fd8b2b408f17e74e01b0d88feb8837ef",
        "md5": "cd51db33e8b81fd16dd1ee0a0571ff3c",
        "sha256": "c72d186e9877e292bd34fa6b71f8cb3a6b3fd3cd6de09f569a66a7ccb4df424a"
      },
      "downloads": -1,
      "filename": "dbsink-2.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd51db33e8b81fd16dd1ee0a0571ff3c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15569,
      "upload_time": "2020-04-01T15:42:45",
      "upload_time_iso_8601": "2020-04-01T15:42:45.260701Z",
      "url": "https://files.pythonhosted.org/packages/17/e3/d782fa3da27c8897ef6dfcdb0f55fd8b2b408f17e74e01b0d88feb8837ef/dbsink-2.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ac0776ca96a601693e70c64a837519b1ffd919b0de3f77a6ee8578d14b70d06",
        "md5": "2411f078c69a3e5482573a3a6b9d7e04",
        "sha256": "9b94b458e6887234bb7cd6e422f6cc41ea3dcbc758d829de5ad5aac8d16563ba"
      },
      "downloads": -1,
      "filename": "dbsink-2.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2411f078c69a3e5482573a3a6b9d7e04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17099,
      "upload_time": "2020-04-01T15:42:46",
      "upload_time_iso_8601": "2020-04-01T15:42:46.266159Z",
      "url": "https://files.pythonhosted.org/packages/9a/c0/776ca96a601693e70c64a837519b1ffd919b0de3f77a6ee8578d14b70d06/dbsink-2.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}