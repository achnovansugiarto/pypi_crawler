{
  "info": {
    "author": "danjdc",
    "author_email": "dechavezdanjo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# OpenMechanochem\n\n## Introduction\nOpenMechanochemistry includes functions that can be used to simulate mechanochemical phenomena via the addition of external forces.\nThis is designed to be used with the *Atomic Simulation Environment* (ASE). Together with ASE, this module can be combined with various quantum mechanical calculators for geometry optimizations and nudged elastic band calculations to sample the effect of mechanical forces to the potential energy hypersurface. Currently, this module can execute:\n\n* **Force Modified Potential Energy Surface** (FMPES) :<br/>\n \tJ. Am. Chem. Soc., 131, 18, 6377â€“6379 (2009) \n* **External Force Explicitly Included** (EFEI) :<br/>\n\tAngew. Chem. Int. Ed., 48, 4190 (2009)<br/>\n \tJ. Am. Chem. Soc.132, 10609-10614 (2010)\n* **Enforced Geometry Optimization** (EGO) :<br/>\n \tMolecular Physics,Vol 107, 22, (2009)<br/>\n \tMolecular Physics, 1098, 14 (2010)  \n<sub><sup>*Disclaimer: The author of this repository is not affiliated to the proponents of formalism above. Code development and testing was done independently*<sub><sup>\t\n\nAdditionally, this module can also be used to add a **finite wall potential in single direction**. Current implementations includes four different types of potential, (1) linear, (2) inverse, and (3) lennard-jones potential.\n\n##  Citations\n\nCitation can be done as\n```\nDe Chavez, D., Mechanochem, (2021), GitHub repository, \n\thttps://github.com/danjodc/OpenMechanochem\n```\n\nor similarly depending on your citation style. For LaTex users, the BibTex library can be appended with\n\n```\n@misc{DeChavez2021,\n  author = {De Chavez, Danjo.},\n  title = {OpenMechanochem},\n  year = {2021},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/danjodc/mechanochem}},\n}\n```\n\n## Usage and Tutorial\n\n### LinearPull Class\nIn this tutorial, we will use FMPES and EFEI formalism to pull hydrogen molecule along the bond coordinate.\n\nThe mechanochem classes LinearPull and WallPot inherit from the ASE atoms object and hence an Atoms instance is required.  \nFor an instance named mol, this can easily be done as\n\n```\nimport mechanochem as mc\n\npull = mc.LinearPull(mol)\n```\n\nAt this point, user should provide specific keyword arguments for the LinearPull object which would depend on the method key.\nAs stated earlier the Mechanochem classes inherits from Atoms object and accepts similar parameters such as calculator, pbc, etc.\n\n#### FMPES\n\nUsing FMPES, the required parameters are pulling points, applied points and applied forces \nThis can be done by using the keywords pp, ap, and pullforce respectively.\n\n```\n  pull.set_params(method='FMPES', pp=PullPoints, ap=AppPoints, pullforce = force)\n```\nIn FMPES, the relative cartesian coordinates of pulling points and applied points are of utmost importance.\nFor example, a system described below where H0 and H1 are hydrogen atoms pulled towards points A and B respectively, \n\n```\n      A <---  0 ------- 1  --->   B\n```\n\nwith H2 xyz given as \n```\n--> hydrogen.xyz\n2\nHydrogen\n H                 0.000  0.000  0.000  \n H                 0.000  0.000  1.000\n\n```\nThe pulling points and applied points could be given as\n```\nPullPoints = [[0.000,  0.000, -1.000],\n              [0.000,  0.000,  2.000]]\n\nAppPoints  = [0,1]\n```\nCare should be given that the position in pp and ap list corresponds with each other.  \nThat is, the first list in pp list is the direction where atom with index as the first element of ap list is pulled to.  \n\nThe magnitude of the applied force can be controlled using the pullforce key. \nNote that the force provided should be in atomic units and the pullforce is divided in the two force vectors equally.\n\n#### EFEI\n\nIn comparison to FMPES, the EFEI pulls along the internal molecular coordinates.\nUsing this method, the pulling coordinate can be defined using only the applied points and pullforce.\n\n```\n  pull.set_params(method='EFEI', ap=AppPoints, pullforce = force)\n```\n\n```\n\t     H0 <-------> H1  \n```\n\nThe ap list is same as the case above, which is\n```\nAppPoints  = [0,1]\n```\n\nUsing EFEI formalism, the pull force is divided equally to the two atoms given by the ap list.\n\nAfter parameterization of the LinearPull class, geometry optimization or molecular dynamics can be done.  \nIn the case of optimization, an example is given below.\n\n```\npull.set_calculator(EMT())\ndyn = BFGS(pull, trajectory='optimization.traj')\ndyn.run(fmax=0.05)\n```\n\nMolecular dynamics can be done similarly. Users are suggested to visit ASE documentations for descriptions of parameters needed for MD and optimizations.\n\n### WallPotential Class\n\nSimilar to LinearPull class, the wallpot inherits from the atoms class.\nHence, a prior instance of atoms should be provided.\n\n```\nmol = mc.WallPotential(slab)\n```\nThe WallPotential class takes the parameters method, plane, height, and wallforce.\n\n```\nmol.set_params(method='linear', plane=atomplane , height=10, wallforce=force)\n```\nMethod defines the type of interacting potential with the wall.\nThe plane is a list of len(3) which defines the equation of the plane.\nThe imaginary plane can then be displaced along the z direction with height key.\nSimilar to LinearPull class, the magnitude of force can be controlled by wallforce key.  \n\n## Function Requests\n\nFor function request related to mechanochemistry simulations and force analysis tools please contact author.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danjodc/OpenMechanochem",
    "keywords": "",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "OpenMechanochem",
    "package_url": "https://pypi.org/project/OpenMechanochem/",
    "platform": "",
    "project_url": "https://pypi.org/project/OpenMechanochem/",
    "project_urls": {
      "Homepage": "https://github.com/danjodc/OpenMechanochem"
    },
    "release_url": "https://pypi.org/project/OpenMechanochem/1.0.1/",
    "requires_dist": [
      "ase",
      "numpy"
    ],
    "requires_python": ">=3.6.0",
    "summary": "python module for mechanochemical simulations",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11053561,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76a32a20917cebada3a998cbd81b9bffe7d833a069a2f729b72d1f254c377411",
          "md5": "597de326b7ae0513f6a7f48c035e0b3a",
          "sha256": "8b11b6467c11851c4d54204032752da955aa7cb5a2bab32309064827cae4555c"
        },
        "downloads": -1,
        "filename": "OpenMechanochem-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "597de326b7ae0513f6a7f48c035e0b3a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 15688,
        "upload_time": "2021-07-30T09:16:44",
        "upload_time_iso_8601": "2021-07-30T09:16:44.621598Z",
        "url": "https://files.pythonhosted.org/packages/76/a3/2a20917cebada3a998cbd81b9bffe7d833a069a2f729b72d1f254c377411/OpenMechanochem-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42835ee906fa4fa91c26de061fb6acf1dd52412d4a6ff2f56a107d97ffed5acd",
          "md5": "76a2221c12e85b4e65922bfcf4d1094e",
          "sha256": "c9ce6f401e3bce084d085d8468634615b48b9e47ef38b337f6d178c332475529"
        },
        "downloads": -1,
        "filename": "OpenMechanochem-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "76a2221c12e85b4e65922bfcf4d1094e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 6659,
        "upload_time": "2021-07-30T09:16:45",
        "upload_time_iso_8601": "2021-07-30T09:16:45.856153Z",
        "url": "https://files.pythonhosted.org/packages/42/83/5ee906fa4fa91c26de061fb6acf1dd52412d4a6ff2f56a107d97ffed5acd/OpenMechanochem-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e2fcdc58742c45478f1c24f2e45a3fe0a82e6163d95d4992afcb651de9f1e6b",
          "md5": "9ced1079c6f7ebf63ba79cfb11ca08c7",
          "sha256": "9126708ddc696797e28cf7947857d5fa14716be5d21ca83a01b6c76089479683"
        },
        "downloads": -1,
        "filename": "OpenMechanochem-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ced1079c6f7ebf63ba79cfb11ca08c7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 15681,
        "upload_time": "2021-07-30T09:27:18",
        "upload_time_iso_8601": "2021-07-30T09:27:18.942108Z",
        "url": "https://files.pythonhosted.org/packages/4e/2f/cdc58742c45478f1c24f2e45a3fe0a82e6163d95d4992afcb651de9f1e6b/OpenMechanochem-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b4b38c2abda7a476ba69d4e2467c0cc67f6c210dc89cdf51c2dc024d9056c39",
          "md5": "42be466fb0489b3ba8cbea6f4ac8a5ba",
          "sha256": "384e4a38adff44efd9af28a011de9826edef95c0d5e49471fbd678976e191e38"
        },
        "downloads": -1,
        "filename": "OpenMechanochem-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "42be466fb0489b3ba8cbea6f4ac8a5ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 6656,
        "upload_time": "2021-07-30T09:27:21",
        "upload_time_iso_8601": "2021-07-30T09:27:21.010780Z",
        "url": "https://files.pythonhosted.org/packages/4b/4b/38c2abda7a476ba69d4e2467c0cc67f6c210dc89cdf51c2dc024d9056c39/OpenMechanochem-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e2fcdc58742c45478f1c24f2e45a3fe0a82e6163d95d4992afcb651de9f1e6b",
        "md5": "9ced1079c6f7ebf63ba79cfb11ca08c7",
        "sha256": "9126708ddc696797e28cf7947857d5fa14716be5d21ca83a01b6c76089479683"
      },
      "downloads": -1,
      "filename": "OpenMechanochem-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ced1079c6f7ebf63ba79cfb11ca08c7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 15681,
      "upload_time": "2021-07-30T09:27:18",
      "upload_time_iso_8601": "2021-07-30T09:27:18.942108Z",
      "url": "https://files.pythonhosted.org/packages/4e/2f/cdc58742c45478f1c24f2e45a3fe0a82e6163d95d4992afcb651de9f1e6b/OpenMechanochem-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b4b38c2abda7a476ba69d4e2467c0cc67f6c210dc89cdf51c2dc024d9056c39",
        "md5": "42be466fb0489b3ba8cbea6f4ac8a5ba",
        "sha256": "384e4a38adff44efd9af28a011de9826edef95c0d5e49471fbd678976e191e38"
      },
      "downloads": -1,
      "filename": "OpenMechanochem-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "42be466fb0489b3ba8cbea6f4ac8a5ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 6656,
      "upload_time": "2021-07-30T09:27:21",
      "upload_time_iso_8601": "2021-07-30T09:27:21.010780Z",
      "url": "https://files.pythonhosted.org/packages/4b/4b/38c2abda7a476ba69d4e2467c0cc67f6c210dc89cdf51c2dc024d9056c39/OpenMechanochem-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}