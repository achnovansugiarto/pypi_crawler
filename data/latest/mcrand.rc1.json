{
  "info": {
    "author": "Physics Simulations",
    "author_email": "apuntsdefisica@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# MCRand\nMCRand is a library of Monte Carlo methods. Multidimensional integration, non-uniform random number generation, etc.\n\n# Random Number Generator\nIn the [samples](samples/) folder you can find a comparison between MCRand and Numpy for different probability distributions. Moreover, we use the program to generate random samples drawn from non-standard distributions. Anyway, we show here a quick guide to use MCRand library to generate the outputs of [samples/pdf.py](samples/pdf.py).\n\nTo use the MCRand library to generate random numbers we first need to import the random generator (RandGen). This step can be done in the following way\n\n```python\nfrom mcrand import sample\n```\n\n## Gaussian distribution\n\nTo generate gaussian distributed numbers with the MCRand random generator we first need to define the Gaussian PDF\n\n```python\ndef gaussian(x, mu, sigma):\n\treturn (1/(np.sqrt(2*np.pi*sigma**2))) * np.exp(-(x-mu)**2/(2*sigma**2))\n```\n\nThen, MCRand can be used to generate `N` gaussian numbers from `x0` to `xf` as follows\n\n```python\nx0 = -5\nxf = 5\nN = 1000\n\nsigma = 1\nmu = 0\n\ngaussian_sample = sample(gaussian, x0, xf, N, mu, sigma)\n```\n\nFinally to plot the histogram and the PDF we can use `matplotlib.pyplot`\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.hist(gaussian_sample, bins=30, density=True, color=(0,1,0,0.5), label='MCRand sample')\nplt.plot(x, gaussian(x, mu, sigma), color='r', label=r'Gaussian PDF $\\mu=%.2f$, $\\sigma=%.2f$' % (mu,sigma))\n```\n\n![Gaussian distribution with Numpy and MCRand](samples/figs/Gaussian_dist.png)\n\n## Cauchy distribution\n\nTo generate a Cauchy distribution we need to define its PDF\n\n```python\ndef cauchy(x, x0, gamma):\n\treturn 1 / (np.pi * gamma * (1 + ((x-x0)/(gamma))**2))\n```\n\nand then use the random number generator of MCRand as before\n\n```python\n\nx0 = -10\nxf = 10\nN = 10**5\n\nx0_cauchy = 0\ngamma = 1\n\ncauchy_sample = sample(gaussian, x0, xf, N, mu, sigma)\n```\n\nFinally we plot the histogram and the PDF\n\n```python\nplt.hist(cauchy_sample, bins=50, density=True, color=(0,1,0,0.5), label='MCRand sample')\nplt.plot(x, cauchy(x, x0_cauchy, gamma), color='r', label=r'Cauchy PDF $\\gamma=%.2f$, $x_0=%.2f$' % (gamma, x0_cauchy))\n```\n\n![Cauchy distribution with Numpy and MCRand](samples/figs/Cauchy_dist.png)\n\nFrom now on, we'll just write some code along with the output figures of the [pdf.py](samples/pdf.py) file.\n\n## Exponential distribution\n\n```python\ndef exponential(x):\n\treturn np.exp(-x)\n\nx0 = 0\nxf = 10\nN = 10**5\n\nrand = sample(exponential, x0, xf, N)\n\nplt.hist(numpy_rand, bins=30, density=True, color=(0,0,1,0.8), label='NumPy sample')\nplt.hist(rand, bins=30, density=True, color=(0,1,0,0.5), label='MCRand sample')\n\n```\n\n![Exponential distribution with Numpy and MCRand](samples/figs/Exponential_dist.png)\n\n## Rayleigh distribution\n\n```python\ndef rayleigh(x, sigma):\n\treturn (x*np.exp(-(x**2)/(2*sigma**2))) / (sigma**2)\n\nx0 = 0\nxf = 4\nsigma = 1\nN = 10**5\n\nrand = sample(rayleigh, x0, xf, N, sigma)\n\nplt.hist(rand, bins=30, density=True, color=(0,1,0,0.5), label='MCRand sample')\nplt.plot(x, rayleigh(x, sigma), color='r', label=r'Rayleigh PDF $\\sigma=%.2f$' % sigma)\n\n```\n\n![Rayleigh distribution with Numpy and MCRand](samples/figs/Rayleigh_dist.png)\n\n## Maxwell-Boltzmann distribution\n\n```python\ndef maxwell_boltzmann(x, sigma):\n\treturn (np.sqrt(2/np.pi))*(x**2*np.exp(-(x**2)/(2*sigma**2))) / (sigma**3)\n\nx0 = 0\nxf = 10\nsigma = 2\nN = 10**5\n\nrand = sample(maxwell_boltzmann, x0, xf, N, sigma)\n\nplt.hist(rand, bins=30, density=True, color=(0,1,0,0.5), label='MCRand sample')\nplt.plot(x, maxwell_boltzmann(x, sigma), color='r', label=r'Maxwell-Boltzmann PDF $\\sigma=%.2f$' % sigma)\n\n```\n\n![Maxwell-Boltzmann distribution with Numpy and MCRand](samples/figs/Maxwell_Boltzmann_dist.png)\n\n## Symmetric Maxwell-Boltzmann distribution\n\n```python\ndef symmetric_maxwell_boltzmann(x, sigma):\n\treturn 0.5*(np.sqrt(2/np.pi))*(x**2*np.exp(-(x**2)/(2*sigma**2))) / (sigma**3)\n\nx0 = -10\nxf = 10\nsigma = 2\nN = 10**5\n\nrand = sample(symmetric_maxwell_boltzmann, x0, xf, N, sigma)\n\nplt.hist(rand, bins=40, density=True, color=(0,1,0,0.5), label='MCRand sample')\nplt.plot(x, symmetric_maxwell_boltzmann(x, sigma), color='r', label=r'Maxwell-Boltzmann PDF $\\sigma=%.2f$' % sigma)\n```\n\n![Symmetric Maxwell-Boltzmann distribution with Numpy and MCRand](samples/figs/Symmetric_MB_dist.png)\n\n## Modified Rayleigh distribution\n\nFinally we consider a invented probability distribution, given by the Rayleigh distribution multiplied by `x`. In some way we making a symmetric Rayleigh distribution. Then, this new distribution must be normalized, so the following equation must be acomplished:\n\n![equation](https://latex.codecogs.com/gif.latex?C%5Ccdot%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%5Cfrac%7Bx%5E2%5Cexp%28-%5Cfrac%7Bx%5E2%7D%7B2%5Csigma%5E2%7D%29%7D%7B%5Csigma%5E2%7D%3D1)\n\nBy nummeric integration it turns out that the normalization constant must be `C=1/2.506628`. Then we get the probability density function for this distribution.\n\nTherefore, MCRand can be used to generate random numbers distributed following this distribution as follows\n\n```python\ndef invented(x, sigma):\n\treturn (x**2*np.exp(-(x**2)/(2*sigma**2))) / (2.506628*sigma**2)\n\nx0 = -4\nxf = 4\nsigma = 1\nN = 10**5\n\nrand = sample(invented, x0, xf, N, sigma)\n\nplt.hist(rand, bins=40, density=True, color=(0,1,0,0.5), label='MCRand sample')\nplt.plot(x, invented(x, sigma), color='r', label=r'Modified Rayleigh PDF $\\sigma=%.2f$' % sigma)\n```\n\n![Modified Rayleigh distribution with Numpy and MCRand](samples/figs/Modified_Rayleigh_dist.png)\n\n# Multidimensional Integration\n\nTo use the MCRand library to perform multidimensional integrals we first need to import the Integrate module. This step can be done in the following way\n\n```python\nfrom mcrand import uniform_integration\n```\n\nThen, we must define the function to integrate in an NumPy ndarray supported way, so it must be defined generally. For instance let's imagine we want so solve the following integral:\n\n![equation](https://latex.codecogs.com/gif.latex?%5Csmall%20%5Cint_0%5E2dx%5Cint_0%5E3dy%20%5C%20x%5E2&plus;y%5E2%3D%5Cint_0%5E2dx%5Byx%5E2%20&plus;%20y%5E3/3%5D_0%5E3%3D%5Cint_0%5E2dx%5C%2C3x%5E2&plus;9%3D%5Bx%5E3&plus;9x%5D_0%5E2%3D26)\n\nThen we should define the function as\n\n```python\ndef func(x):\n\treturn np.sum(np.power(x, 2))\n```\n\nso each element of the x array will represent a variable.\n\nFinally, to get the result with  its error we can run the following code\n\n```python\nx0 = [0, 0]\nxf = [2, 3]\nN = 10**6\n\nresult = uniform_integration(func, x0, xf, N)\n\nprint(result)\n```\nThe result is given in the following format\n\n```python\n(25.99767534344232, 0.02023068196284685)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Physics-Simulations/MCRand",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcrand",
    "package_url": "https://pypi.org/project/mcrand/",
    "platform": "",
    "project_url": "https://pypi.org/project/mcrand/",
    "project_urls": {
      "Homepage": "https://github.com/Physics-Simulations/MCRand"
    },
    "release_url": "https://pypi.org/project/mcrand/0.0.2/",
    "requires_dist": [
      "numpy (>=1.18)",
      "scipy (>=1.5)"
    ],
    "requires_python": ">=3.6",
    "summary": "MCRand is a library of Monte Carlo methods implementing multidimensional integration                  and non-uniform random number generation.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8235940,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "025e5d32dcd2aa065d7ca3c34e10e5925b50f49baec4bffc7633345cd0e1864d",
          "md5": "304bd0473402a2f0b32f92d77297554e",
          "sha256": "3b52d5b040833308bbf7e558e21c151c60defc86d0279fa6be4eb2f5182e5d44"
        },
        "downloads": -1,
        "filename": "mcrand-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "304bd0473402a2f0b32f92d77297554e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17715,
        "upload_time": "2020-09-21T15:00:27",
        "upload_time_iso_8601": "2020-09-21T15:00:27.399403Z",
        "url": "https://files.pythonhosted.org/packages/02/5e/5d32dcd2aa065d7ca3c34e10e5925b50f49baec4bffc7633345cd0e1864d/mcrand-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20468cb97adf0a87a9d501ad1735a63dcd14a8111f13528ab2312bc063029cab",
          "md5": "a21024745df06fc2c4ab1cd289d460f1",
          "sha256": "788a73d3cbe9b2c2a511c535e57e46e4a61f701b896ba5c8e8ff5d611a682669"
        },
        "downloads": -1,
        "filename": "mcrand-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a21024745df06fc2c4ab1cd289d460f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5158,
        "upload_time": "2020-09-21T15:00:28",
        "upload_time_iso_8601": "2020-09-21T15:00:28.862796Z",
        "url": "https://files.pythonhosted.org/packages/20/46/8cb97adf0a87a9d501ad1735a63dcd14a8111f13528ab2312bc063029cab/mcrand-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "025e5d32dcd2aa065d7ca3c34e10e5925b50f49baec4bffc7633345cd0e1864d",
        "md5": "304bd0473402a2f0b32f92d77297554e",
        "sha256": "3b52d5b040833308bbf7e558e21c151c60defc86d0279fa6be4eb2f5182e5d44"
      },
      "downloads": -1,
      "filename": "mcrand-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "304bd0473402a2f0b32f92d77297554e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17715,
      "upload_time": "2020-09-21T15:00:27",
      "upload_time_iso_8601": "2020-09-21T15:00:27.399403Z",
      "url": "https://files.pythonhosted.org/packages/02/5e/5d32dcd2aa065d7ca3c34e10e5925b50f49baec4bffc7633345cd0e1864d/mcrand-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20468cb97adf0a87a9d501ad1735a63dcd14a8111f13528ab2312bc063029cab",
        "md5": "a21024745df06fc2c4ab1cd289d460f1",
        "sha256": "788a73d3cbe9b2c2a511c535e57e46e4a61f701b896ba5c8e8ff5d611a682669"
      },
      "downloads": -1,
      "filename": "mcrand-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a21024745df06fc2c4ab1cd289d460f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5158,
      "upload_time": "2020-09-21T15:00:28",
      "upload_time_iso_8601": "2020-09-21T15:00:28.862796Z",
      "url": "https://files.pythonhosted.org/packages/20/46/8cb97adf0a87a9d501ad1735a63dcd14a8111f13528ab2312bc063029cab/mcrand-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}