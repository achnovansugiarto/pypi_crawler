{
  "info": {
    "author": "",
    "author_email": "f.lombardi@tudelft.nl",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. image:: https://img.shields.io/gitter/room/RAMP-project/RAMP\n   :target: https://gitter.im/RAMP-project/community\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. .. image:: https://img.shields.io/pypi/v/rampdemand\n..     :target: https://pypi.org/project/rampdemand/\n\n.. image:: https://readthedocs.org/projects/rampdemand/badge/?version=latest\n    :target: https://rampdemand.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://github.com/RAMP-project/RAMP/blob/documentation/docs/source/_static/RAMP_logo_basic.png?raw=true\n   :width: 300\n\n\n*An open-source bottom-up stochastic model for generating multi-energy load profiles* (`RAMP Website <https://rampdemand.org>`_ , `RAMP Documentation <https://rampdemand.readthedocs.io/en/latest/?badge=latest>`_)\n\n\nWhat is RAMP\n============\nRAMP is an open-source software suite for the stochastic simulation of any user-driven energy demand time series based on few simple inputs.\n\nThe project aims to provide synthetic data wherever metered data does not exist, such as when designing systems in remote areas. Check out the `documentation <https://rampdemand.readthedocs.io/en/latest/?badge=latest>`_ and learn more on the RAMP world from our `website <https://rampdemand.org>`_!\n\n.. image:: https://github.com/RAMP-project/RAMP/blob/master/docs/figures/Example_output.jpg?raw=true\n   :width: 600\n\nRecommended installation method\n===============================\n\nThe easiest way to make RAMP software working is to use the free conda package manager which can install the current and future RAMP\ndepencies in an easy and user friendly way.\n\nTo get conda, `download and install \"Anaconda Distribution\" <https://www.anaconda.com/products/individual>`_, or `\"miniconda\" <https://docs.conda.io/en/latest/miniconda.html>`_ which is lighter.\nYou can install RAMP using pip, conda or from source code.\n\nInstalling through pip\n----------------------\n1. To install the RAMP software, we suggest to create a new environment by running the following command in the anaconda prompt:\n\n.. code-block:: python\n\n   conda create -n ramp python=3.8\n\n2. If you create a new environment for RAMP, you'll need to activate it each time before using it, by writing\nthe following line in the *Anaconda Prompt*\n\n.. code-block:: python\n\n   conda activate ramp\n\n3. Now you can use pip to install `rampdemand` on your environment as follow:\n\n.. code-block:: python\n\n  pip install rampdemand\n\n\nInstalling through source code\n------------------------------\nYou can also install RAMP from the source code! To do so, you first need to download the source code first:\n\n1. you can use git to clone the repository using:\n\n.. code-block:: bash\n\n   git clone https://github.com/RAMP-project/RAMP.git\n\n2. you may download the source code directly from:\n\n`\"RAMP GitHub Repository\" <https://github.com/RAMP-project/RAMP/tree/development>`_.\n\nIn this case, the source code will be downloaded as a zip file, so you need the extract the files.\n\nAfter downloading the source code using any of abovementioned ways, you need to use your **anaconda prompt** to install the code.\nYou can follow the first two steps mentioned in **Installing throguh pip**. Then you need to change the directory of the promt to the folder where the source code is saved (where you can find the *setup.py* file). To install the RAMP software use:\n\n.. code-block:: bash\n\n   conda env create -f requirements.yml\n\nRequirements\n============\nRAMP has been tested on macOS, Windows and Linux.\n\nFor running RAMP, you'll need a few packages:\n\n#. The Python programming language, version 3.6 or higher\n#. A number of Python adds-on packages:\n\n   * `Pandas  <https://pandas.pydata.org/>`_\n   * `Numpy  <https://numpy.org/>`_\n   * `Matplotlib  <https://matplotlib.org/>`_\n   * `Openpyxl  <https://openpyxl.readthedocs.io/en/stable/>`_\n\nThe requirements are specified in the `requirements.txt` file.\n\nQuick start\n===========\nThere are different ways to build a model using RAMP! Here, we provide a first example but you can find more information in our [documentation](https://rampdemand.readthedocs.io/en/latest/?badge=latest).\n\nExample python input files\n--------------------------\nThree different input files are provided as example representing three different categories of appliances that can be modelled with RAMP.\nTo have a look to the python files, you can download them using the \"download_example\" function:\n\n.. code-block:: python\n\n   from ramp import download_example\n\n   download_example(\"the specfic folder directory to save the files\")\n\n-  ``input_file_1.py``: represents the most basic electric appliances,\n   is an example of how to model lightbulbs, radios, TVs, fridges, and\n   other electric appliances. This input file is based on the ones used\n   for `this\n   publication <https://doi.org/10.1016/j.energy.2019.04.097>`__.\n\n-  ``input_file_2.py``: shows how to model thermal loads, with the\n   example of a “shower” appliance. The peculiarity of thermal appiances\n   is that the nominal power can be provided as external input as a\n   “csv” file (in this case, ``shower_P.csv``). For the example “shower”\n   appliance, the varying nominal power accounts for the effect of\n   groundwater temperature variation throughout the year. This input\n   file is based on that used for `this\n   publication <https://doi.org/10.3390/app10217445>`__.\n\n-  ``input_file_3.py``: represents an example of how to model electric\n   cooking appliances. In this input file two different kind of meals\n   are modelled: 1) short and repetitive meals (e.g. breakfast); and 2)\n   main meals (e.g. lunch, dinner). Repetitive meals do not vary across\n   days, whilst main meals do so. In particular, every household can\n   randomly choose between 3 different types of main meal every day.\n   Such variability in meal preferences is modelled by means of two\n   parameters: the ``user preference`` and the ``preference index``. The\n   ``user preference`` defines how many types of meal are available for\n   each user to choose every day (e.g. 3). Then, each of the available\n   meal options is modelled separately, with a different\n   ``preference index`` attached. The stochastic process randomly varies\n   the meal preference of each user every day, deciding whether they\n   want a “type 1” meal, or a “type 2”, etc. on a given day. This input\n   file is used in `this\n   publication <https://doi.org/10.1109/PTC.2019.8810571>`__\n\nSpreadsheet input files\n-----------------------\n\nIt is also possible to use spreadsheets as input files. To do so you\nneed to run the ``ramp`` command with the option ``-i``:\n\n.. code-block:: bash\n\n   ramp -i <path to .xlsx input file>\n\nIf you already know\nhow many profile you want to simulate you can indicate it with the\n``-n`` option:\n\n.. code-block:: bash\n\n   ramp -i <path to .xlsx input file> -n 10\n\nwill simulate 10 profiles. Note that you can use this option without\nproviding a ``.xlsx`` input file with the ``-i`` option, this will then\nbe equivalent to running ``python ramp_run.py`` from the ``ramp`` folder\nwithout being prompted for the number of profile within the console.\n\nOther options are documented in the help of `ramp`, which you access with the ``-h`` option\n\n.. code-block:: bash\n\n   ramp -h\n\n\nIf you have existing python input files, you can convert them to\nspreadsheet. To do so, go to ``ramp`` folder and run\n\n.. code-block:: bash\n\n   python ramp_convert_old_input_files.py -i <path to the input file you wish to convert>\n\n.. For other example of command lines options, such as setting date ranges, please visit :ref:`the dedicated section <date_range_input_section>` of the documentation.\n\nBuilding a model with a python script\n-------------------------------------\n\n.. code-block:: python\n\n   # importing functions\n   from ramp import User,calc_peak_time_range,yearly_pattern\n\n   # Create a user category\n   low_income_households = User(\n    user_name = \"low_income_household\", # an optional feature for the User class\n    num_users = 10, # Specifying the number of specific user category in the community\n   )\n\nYou can add appliances to a user category by:\n\n.. code-block:: python\n\n   # adding some appliances for the household\n   radio = low_income_household.add_appliance(\n    name = \"Small Radio\", # optional feature for the appliance class\n    number = 1, # how many radio each low income household holds\n    power = 10, # RAMP does not take care of unit of measures , watt\n    func_time = 120, # Total functioning time of appliance in minutes\n    num_windows = 2, # in how many time-windows the appliance is used\n   )\n\nThe use time frames can be specified using the 'window' method for each appliance of the user category:\n\n.. code-block:: python\n\n   # Specifying the functioning windows\n   radio.windows(\n    window_1 = [480,540], # from 8 AM to 9 AM\n    window_2 = [1320,1380], # from 10 PM to 11 PM\n   )\n\nNow you can generate your **stochastic Profiles**:\n\n.. code-block:: python\n\n   # generating load_curves\n   load = low_income_household.generate_aggregated_load_profiles(\n      prof_i = 1, # the ith day profile\n      peak_time_range = calc_peak_time_range(), # the peak time range\n      Year_behaviour = yearly_pattern(), # defining the yearly pattern (like weekdays/weekends)\n   )\n\nContributing\n============\nThis project is open-source. Interested users are therefore invited to test, comment or contribute to the tool. Submitting issues is the best way to get in touch with the development team, which will address your comment, question, or development request in the best possible way. We are also looking for contributors to the main code, willing to contibute to its capabilities, computational-efficiency, formulation, etc.\n\nTo contribute changes:\n\n#. Fork the project on GitHub\n#. Create a feature branch (e.g. named \"add-this-new-feature\") to work on in your fork\n#. Add your name to the `AUTHORS <https://github.com/RAMP-project/RAMP/blob/development/AUTHORS>`_ file\n#. Commit your changes to the feature branch\n#. Push the branch to GitHub\n#. On GitHub, create a new pull request from the feature branch\n\nWhen committing new changes, please also take care of checking code stability by means of the `qualitativte testing <https://github.com/RAMP-project/RAMP/blob/development/CONTRIBUTING.md>`_ functionality.\n\n\nHow to cite\n===========\nPlease cite the original Journal publication if you use RAMP in your research:\n\n*F. Lombardi, S. Balderrama, S. Quoilin, E. Colombo, Generating high-resolution multi-energy load profiles for remote areas with an open-source stochastic model, Energy, 2019,*\n`https://doi.org/10.1016/j.energy.2019.04.097 <https://doi.org/10.1016/j.energy.2019.04.097>`_\n\nMore information\n================\nWant to know more about the possible applications of RAMP, the studies that relied on it and much more? Then take a look at the `RAMP Website <https://rampdemand.org>`_!\n\nLicense\n=======\nCopyright 2019-2023 RAMP, contributors listed in **Authors**\n\nLicensed under the European Union Public Licence (EUPL), Version 1.2-or-later; you may not use this file except in compliance with the License.\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an **\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND**, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\n\n.. note::\n\n   This project is under active development!\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RAMP-project/RAMP",
    "keywords": "",
    "license": "European Union Public License 1.2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rampdemand",
    "package_url": "https://pypi.org/project/rampdemand/",
    "platform": null,
    "project_url": "https://pypi.org/project/rampdemand/",
    "project_urls": {
      "Homepage": "https://github.com/RAMP-project/RAMP"
    },
    "release_url": "https://pypi.org/project/rampdemand/0.4.0/",
    "requires_dist": [
      "pandas (>=1.3.3)",
      "numpy (>=1.21.2)",
      "xlsxwriter (>=1.3.7)",
      "matplotlib (>=3.3.4)",
      "openpyxl (>=3.0.6)",
      "tqdm"
    ],
    "requires_python": ">=3.6.0",
    "summary": "An open-source python package for building bottom-up stochastic model for generating multi-energy load profiles",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16960874,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9547cb819f124ca1116890bb006a7ed82c9ce347ba045ff7b14c3186fa028a2",
          "md5": "817602135da195f87691c3f8524e0ace",
          "sha256": "4abc1650028cce44d18066dbc1802709f045116929b2cae27846367f06a3511b"
        },
        "downloads": -1,
        "filename": "rampdemand-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "817602135da195f87691c3f8524e0ace",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">.3.6.0",
        "size": 2627189,
        "upload_time": "2022-11-25T11:45:37",
        "upload_time_iso_8601": "2022-11-25T11:45:37.058274Z",
        "url": "https://files.pythonhosted.org/packages/d9/54/7cb819f124ca1116890bb006a7ed82c9ce347ba045ff7b14c3186fa028a2/rampdemand-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f97fc45f28b5daa3e5b4a3b5a6e66c20409a676f6dedb0925e0b8af5b0caf60b",
          "md5": "2dcdf0f390e9ed2d8d95d7a7eeaf334b",
          "sha256": "97563ba2bd7212b3e6d0dce60977c40105db130ed37fc4000c7d2965af0a387e"
        },
        "downloads": -1,
        "filename": "rampdemand-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dcdf0f390e9ed2d8d95d7a7eeaf334b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 39856,
        "upload_time": "2023-02-21T14:00:00",
        "upload_time_iso_8601": "2023-02-21T14:00:00.315361Z",
        "url": "https://files.pythonhosted.org/packages/f9/7f/c45f28b5daa3e5b4a3b5a6e66c20409a676f6dedb0925e0b8af5b0caf60b/rampdemand-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bea87c6904a91eb087b3a1437868cfda1588f8cda14a5ee0774826e5c50823c",
          "md5": "d87e8bc8a070f55a11cc51f32cd1c3dd",
          "sha256": "64aa09668b325da5ee976cf73827ed147afd1cc48dbda2de0aa3d6deba3eb141"
        },
        "downloads": -1,
        "filename": "rampdemand-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d87e8bc8a070f55a11cc51f32cd1c3dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 4415094,
        "upload_time": "2023-02-21T14:00:06",
        "upload_time_iso_8601": "2023-02-21T14:00:06.106107Z",
        "url": "https://files.pythonhosted.org/packages/2b/ea/87c6904a91eb087b3a1437868cfda1588f8cda14a5ee0774826e5c50823c/rampdemand-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f97fc45f28b5daa3e5b4a3b5a6e66c20409a676f6dedb0925e0b8af5b0caf60b",
        "md5": "2dcdf0f390e9ed2d8d95d7a7eeaf334b",
        "sha256": "97563ba2bd7212b3e6d0dce60977c40105db130ed37fc4000c7d2965af0a387e"
      },
      "downloads": -1,
      "filename": "rampdemand-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2dcdf0f390e9ed2d8d95d7a7eeaf334b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 39856,
      "upload_time": "2023-02-21T14:00:00",
      "upload_time_iso_8601": "2023-02-21T14:00:00.315361Z",
      "url": "https://files.pythonhosted.org/packages/f9/7f/c45f28b5daa3e5b4a3b5a6e66c20409a676f6dedb0925e0b8af5b0caf60b/rampdemand-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2bea87c6904a91eb087b3a1437868cfda1588f8cda14a5ee0774826e5c50823c",
        "md5": "d87e8bc8a070f55a11cc51f32cd1c3dd",
        "sha256": "64aa09668b325da5ee976cf73827ed147afd1cc48dbda2de0aa3d6deba3eb141"
      },
      "downloads": -1,
      "filename": "rampdemand-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d87e8bc8a070f55a11cc51f32cd1c3dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 4415094,
      "upload_time": "2023-02-21T14:00:06",
      "upload_time_iso_8601": "2023-02-21T14:00:06.106107Z",
      "url": "https://files.pythonhosted.org/packages/2b/ea/87c6904a91eb087b3a1437868cfda1588f8cda14a5ee0774826e5c50823c/rampdemand-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}