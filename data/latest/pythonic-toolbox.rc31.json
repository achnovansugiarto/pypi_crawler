{
  "info": {
    "author": "menglong.li",
    "author_email": "albert.menglongli@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Pythonic toolbox\n\n[![PyPI version](https://badge.fury.io/py/pythonic-toolbox.svg)](https://badge.fury.io/py/pythonic-toolbox)\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pythonic-toolbox.svg?style=flat&logo=python&logoColor=yellow&labelColor=5c5c5c)](https://pypi.org/project/pythonic-toolbox)\n[![Stability](https://img.shields.io/pypi/status/pythonic-toolbox.svg?style=flat)](https://badge.fury.io/py/pythonic-toolbox)\n[![CodeQL Status](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/codeql-analysis.yml/badge.svg?branch=master)](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/codeql-analysis.yml)\n[![Python3.6 Test Status](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python36.yml/badge.svg?branch=master)](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python36.yml)\n[![Python3.7 Test Status](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python37.yml/badge.svg?branch=master)](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python37.yml)\n[![Python3.8 Test Status](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python38.yml/badge.svg?branch=master)](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python38.yml)\n[![Python3.9 Test Status](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python39.yml/badge.svg?branch=master)](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python39.yml)\n[![Python3.10 Test Status](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python310.yml/badge.svg?branch=master)](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python310.yml)\n[![Python3.11 Test Status](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python311.yml/badge.svg?branch=master)](https://github.com/albertmenglongli/pythonic-toolbox/actions/workflows/tests-python311.yml)\n[![SNYK Status](https://snyk.io/test/github/albertmenglongli/pythonic-toolbox/badge.svg)](https://snyk.io/test/github/albertmenglongli/pythonic-toolbox)\n\n\n## Table of Contents\n* [Introduction](#Introduction)\n* [Installation](#Installation)\n* [Usage](#Usage)\n\t* [context](#context)\n\t\t* [SkipContext](#SkipContext)\n\t* [decorators](#decorators)\n\t\t* [ignore_unexpected_kwargs](#ignore_unexpected_kwargs)\n\t\t* [retry](#retry)\n\t* [deque_utils](#deque_utils)\n\t\t* [deque_pop_any](#deque_pop_any)\n\t\t* [deque_split](#deque_split)\n\t* [dict_utils](#dict_utils)\n\t\t* [DictObj](#DictObj)\n\t\t* [FinalDictObj](#FinalDictObj)\n\t\t* [RangeKeyDict](#RangeKeyDict)\n\t\t* [StrKeyIdDict](#StrKeyIdDict)\n\t\t* [collect_leaves](#collect_leaves)\n\t\t* [dict_until](#dict_until)\n\t\t* [select_list_of_dicts](#select_list_of_dicts)\n\t\t* [unique_list_of_dicts](#unique_list_of_dicts)\n\t\t* [walk_leaves](#walk_leaves)\n\t* [functional_utils](#functional_utils)\n\t\t* [filter_multi](#filter_multi)\n\t* [list_utils](#list_utils)\n\t\t* [filter_allowable](#filter_allowable)\n\t\t* [sort_with_custom_orders](#sort_with_custom_orders)\n\t\t* [unpack_list](#unpack_list)\n\t\t* [until](#until)\n\t* [string_utils](#string_utils)\n\t\t* [substitute_string_template_dict](#substitute_string_template_dict)\n\n\n> README.md is auto generated by the script **tests/generate_readme_markdown.py** from testing files,\n>\n> **DO NOT EDIT DIRECTLY!**   ;)\n\n```bash\npython3 tests/generate_readme_markdown.py\n```\n\n\n## Introduction\n\nA python3.6+ toolbox with multi useful utils, functions, decorators in pythonic way, and is fully tested from python3.6 to python3.11 .\n\n## Installation\n\n```bash\npip3 install pythonic-toolbox --upgrade\n```\n\n## Usage\n\n### context\n\n#### SkipContext\n\n```python3\nimport itertools\n\nimport pytest\nfrom pythonic_toolbox.utils.context_utils import SkipContext\n\n# Usage: define a class that inherits the SkipContext,\n# and takes control of the skip or not logic\nclass MyWorkStation(SkipContext):\n\n    def __init__(self, week_day: str):\n        working_days = {'monday', 'tuesday', 'wednesday', 'thursday', 'friday'}\n        weekends = {'saturday', 'sunday'}\n\n        if week_day.lower() not in working_days.union(weekends):\n            raise ValueError(f'Invalid weekday {week_day}')\n\n        skip = True if week_day.lower() in weekends else False\n        super(MyWorkStation, self).__init__(skip=skip)\n\nseven_week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nlogged_opening_days = []\ntotal_working_hours = 0\n\nfor cur_week_day in seven_week_days:\n    # MyWorkStation will skip the code block when encountering weekends\n    with MyWorkStation(week_day=cur_week_day):\n        # log this working day\n        logged_opening_days.append(cur_week_day)\n        # accumulate working hours, 8 hours on each working day\n        total_working_hours += 8\n\n# only working days are logged\nassert logged_opening_days == ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nassert total_working_hours == 8 * 5\n\n# test basic SkipContext\ncount_iterator = itertools.count(start=0, step=1)\n\nflg_skip = True\nwith SkipContext(skip=flg_skip):\n    # if skip = True, all codes inside the context will be skipped(not executed)\n    next(count_iterator)  # this will not be executed\n    assert sum([1, 1]) == 3\n    raise Exception('Codes will not be executed')\n\nassert next(count_iterator) == 0  # check previous context is skipped\n\nflg_skip = False\nwith SkipContext(skip=flg_skip):\n    # codes will be executed as normal, if skip = False\n    next(count_iterator)  # generate value 1\n    assert sum([1, 1]) == 2\n\nassert next(count_iterator) == 2  # check previous context is executed\n\nwith pytest.raises(Exception) as exec_info:\n    with SkipContext(skip=False):\n        # if skip = False, this SkipContextManager is transparent,\n        # internal exception will be detected as normal\n        raise Exception('MyError')\nassert exec_info.value.args[0] == 'MyError'\n\n# another example: ensure there will be only one job, who acquire the lock, run the increase +1\n\nfrom multiprocessing import Manager, Pool\nimport time\n\nfrom pythonic_toolbox.utils.context_utils import SkipContext\n\n\ndef plain_cronjob_increase(ns, lock):\n    start = time.time()\n    with lock:\n        now = time.time()\n        if now - start >= 0.5:\n            pass\n        else:\n            ns.cnt += 1\n            time.sleep(1)\n    return ns.cnt\n\n\nclass PreemptiveLockContext(SkipContext):\n    def __init__(self, lock):\n        self.start_time = time.perf_counter()\n        self.lock = lock\n        self.acquired = self.lock.acquire(timeout=0.5)\n        skip = not self.acquired\n        super(PreemptiveLockContext, self).__init__(skip=skip)\n\n    def __exit__(self, type, value, traceback):\n        if self.acquired:\n            time.sleep(1)\n            self.lock.release()\n        if type is None:\n            return  # No exception\n        else:\n            if issubclass(type, self.SkipContentException):\n                return True  # Suppress special SkipWithBlockException\n            return False\n\n\ndef cronjob_increase(ns, lock):\n    # for those who cannot acquire the lock within some time\n    # this context block will be skipped, quite simple\n    with PreemptiveLockContext(lock):\n        ns.cnt += 1\n    return ns.cnt\n\n\n\nmanager = Manager()\nlock = manager.Lock()\nns = manager.Namespace()\npool = Pool(2)\n\nns.cnt = 0\nprocesses = [pool.apply_async(plain_cronjob_increase, args=(ns, lock)) for __ in range(0, 2)]\nresult = [p.get() for p in processes]\nassert result == [1, 1]\nassert ns.cnt == 1\n\n# reset global cnt=0\nns.cnt = 0\nprocesses = [pool.apply_async(cronjob_increase, args=(ns, lock)) for __ in range(0, 2)]\nresult = [p.get() for p in processes]\nassert result == [1, 1]\nassert ns.cnt == 1\n\n```\n\n### decorators\n\n#### ignore_unexpected_kwargs\n\n```python3\nimport pytest\nfrom pythonic_toolbox.decorators.common import ignore_unexpected_kwargs\n\n# Following functions are named under Metasyntactic Variables, like:\n# foobar, foo, bar, baz, qux, quux, quuz, corge,\n# grault, garply, waldo, fred, plugh, xyzzy, thud\n\ndef foo(a, b=0, c=3):\n    return a, b, c\n\ndct = {'a': 1, 'b': 2, 'd': 4}\nwith pytest.raises(TypeError) as __:\n    assert foo(**dct) == (1, 2, 3)\n\nwrapped_foo = ignore_unexpected_kwargs(foo)\nassert wrapped_foo(**dct) == (1, 2, 3)\n\nassert wrapped_foo(0, 0, 0) == (0, 0, 0)\nassert wrapped_foo(a=1, b=2, c=3) == (1, 2, 3)\n\n@ignore_unexpected_kwargs\ndef bar(*args: int):\n    return sum(args)\n\n# should not change original behavior\nassert bar(1, 2, 3) == 6\nassert bar(1, 2, 3, unexpected='Gotcha') == 6\nnums = [1, 2, 3]\nassert bar(*nums, unexpected='Gotcha') == 6\n\n@ignore_unexpected_kwargs\ndef qux(a, b, **kwargs):\n    # function with Parameter.VAR_KEYWORD Aka **kwargs\n    return a, b, kwargs.get('c', 3), kwargs.get('d', 4)\n\nassert qux(**{'a': 1, 'b': 2, 'd': 4, 'e': 5}) == (1, 2, 3, 4)\n\nclass Person:\n    @ignore_unexpected_kwargs\n    def __init__(self, name, age, sex):\n        self.name = name\n        self.age = age\n        self.sex = sex\n\n    @classmethod\n    @ignore_unexpected_kwargs\n    def create(cls, name, age, sex):\n        return cls(name, age, sex)\n\n    @staticmethod\n    @ignore_unexpected_kwargs\n    def greetings(name):\n        return f'Hello, I am {name}'\n\nparams = {\n    'name': 'albert',\n    'age': 34,\n    'sex': 'male',\n    'height': '170cm',\n}\n__ = Person(**params)\n__ = Person('albert', 35, 'male', height='170cm')\n\n# test cases for classmethod, staticmethod\n__ = Person.create(**params)\nassert Person.greetings(**params)\n\n```\n\n#### retry\n\n```python3\nimport pytest\n\nfrom pythonic_toolbox.decorators.common import retry\n\n# use decorator without any arguments, using retry default params\n@retry\ndef func_fail_first_time():\n    \"\"\"func_fail_first_time\"\"\"\n    self = func_fail_first_time\n    if not hasattr(self, 'call_times'):\n        # set attribute call_times for function, to count call times\n        self.call_times = 0\n    self.call_times += 1\n    if self.call_times == 1:\n        raise Exception('Fail when first called')\n    return 'ok'\n\nassert func_fail_first_time() == 'ok'\nassert func_fail_first_time.call_times == 2\nassert func_fail_first_time.__doc__ == 'func_fail_first_time'\n\n@retry(tries=2, delay=0.1)  # use decorator with customized params\ndef func_fail_twice():\n    \"\"\"func_fail_twice\"\"\"\n    self = func_fail_twice\n    if not hasattr(self, 'call_times'):\n        self.call_times = 0\n    self.call_times += 1\n    if self.call_times <= 2:\n        raise Exception('Fail when called first, second time')\n    return 'ok'\n\nassert func_fail_twice() == 'ok'\nassert func_fail_twice.call_times == 3\nassert func_fail_twice.__doc__ == 'func_fail_twice'\n\n@retry(tries=2, delay=0.1)\ndef func_fail_three_times():\n    \"\"\"func_fail_three_times\"\"\"\n    self = func_fail_three_times\n    if not hasattr(self, 'call_times'):\n        self.call_times = 0\n    self.call_times += 1\n    if self.call_times <= 3:  # 1, 2, 3\n        raise Exception('Fail when called first, second, third time')\n    return 'ok'\n\nwith pytest.raises(Exception) as exec_info:\n    func_fail_three_times()\nassert func_fail_three_times.call_times == 3\nassert exec_info.value.args[0] == 'Fail when called first, second, third time'\n\nimport asyncio\n\n@retry\nasync def async_func_fail_first_time():\n    \"\"\"async_func_fail_first_time\"\"\"\n    self = async_func_fail_first_time\n    if not hasattr(self, 'call_times'):\n        self.call_times = 0\n    self.call_times += 1\n    if self.call_times == 1:\n        raise Exception('Fail when first called')\n    return 'ok'\n\n@retry(delay=0.1)\nasync def async_func_fail_first_time2():\n    \"\"\"async_func_fail_first_time2\"\"\"\n    self = async_func_fail_first_time2\n    if not hasattr(self, 'call_times'):\n        self.call_times = 0\n    self.call_times += 1\n    if self.call_times == 1:\n        raise Exception('Fail when first called')\n    return 'ok'\n\nasync def async_main():\n    assert await async_func_fail_first_time() == 'ok'\n    assert async_func_fail_first_time.__doc__ == 'async_func_fail_first_time'\n    assert async_func_fail_first_time.call_times == 2\n    assert await async_func_fail_first_time2() == 'ok'\n    assert async_func_fail_first_time2.call_times == 2\n    assert async_func_fail_first_time2.__doc__ == 'async_func_fail_first_time2'\n\nloop = asyncio.get_event_loop()\nif loop.is_closed():\n    loop = asyncio.new_event_loop()\ntry:\n    loop.run_until_complete(async_main())\nfinally:\n    loop.close()\n\nimport random\nfail_count = 0\n\n@retry(delay=0.1)\nasync def always_fail_func():\n    nonlocal fail_count\n    fail_count += 1\n    await asyncio.sleep(random.random())\n    raise ValueError()\n\nasync def async_main_for_always_fail():\n    nonlocal fail_count\n    tasks = [always_fail_func() for i in range(0, 3)]\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    assert all(map(lambda e: isinstance(e, ValueError), results))\n    assert fail_count == 2 * 3  # each func run twice, three func calls\n\nloop = asyncio.get_event_loop()\nif loop.is_closed():\n    loop = asyncio.new_event_loop()\ntry:\n    loop.run_until_complete(async_main_for_always_fail())\nfinally:\n    loop.close()\n\n```\n\n### deque_utils\n\n#### deque_pop_any\n\n```python3\nfrom collections import deque\n\nimport pytest\nfrom pythonic_toolbox.utils.deque_utils import deque_pop_any\n\nqueue = deque([1, 2, 3, 4, 5])\nassert deque_pop_any(queue, idx=1) == 2\nassert queue == deque([1, 3, 4, 5])\n\n# edge case: same as deque.popleft()\nqueue = deque([1, 2, 3, 4, 5])\nassert deque_pop_any(queue, idx=0) == 1\nassert queue == deque([2, 3, 4, 5])\n\n# edge case: same as deque.popright()\nqueue = deque([1, 2, 3, 4, 5])\nassert deque_pop_any(queue, idx=len(queue) - 1) == 5\nassert queue == deque([1, 2, 3, 4])\n\nqueue = deque([1, 2, 3, 4, 5])\nwith pytest.raises(IndexError) as exec_info:\n    deque_pop_any(queue, idx=102)\n\n# edge case: pop from empty deque\nqueue = deque()\nwith pytest.raises(IndexError) as exec_info:\n    deque_pop_any(queue, idx=0)\nassert exec_info.value.args[0] == 'pop from empty deque'\n\n```\n\n#### deque_split\n\n```python3\nimport pytest\n\nfrom collections import deque\n\nfrom pythonic_toolbox.utils.deque_utils import deque_split\n\nqueue1, queue2 = deque_split(deque([1, 2, 3, 4, 5]), num=3)\nassert queue1 == deque([1, 2, 3])\nassert queue2 == deque([4, 5])\n\nqueue1, queue2 = deque_split(deque([1, 2, 3, 4, 5]), num=0)\nassert queue1 == deque([])\nassert queue2 == deque([1, 2, 3, 4, 5])\n\nqueue1, queue2 = deque_split(deque([1, 2, 3, 4, 5]), num=100)\nassert queue1 == deque([1, 2, 3, 4, 5])\nassert queue2 == deque([])\n\nwith pytest.raises(ValueError) as exec_info:\n    deque_split(deque([1, 2, 3, 4, 5]), -1)\nassert exec_info.value.args[0] == 'num must be integer: 0 <= num <= sys.maxsize'\n\n```\n\n### dict_utils\n\n#### DictObj\n\n```python3\nfrom copy import deepcopy\n\nimport pytest\nfrom pythonic_toolbox.utils.dict_utils import DictObj\n\nnaive_dct = {\n    'key1': 'val1',\n    'key2': 'val2',\n}\n\nobj = DictObj(naive_dct)\n\n# test basic functional methods like dict\nassert len(obj) == 2\nassert bool(obj) is True\n# same behavior like ordinary dict according to the python version (FILO for popitem for 3.6+)\nassert obj.popitem() == ('key2', 'val2')\nassert obj.popitem() == ('key1', 'val1')\nwith pytest.raises(KeyError) as __:\n    obj.popitem()\n\n# a key can be treated like an attribute\n# an attribute can be treated like a key\nobj.key3 = 'val3'\nassert obj.pop('key3') == 'val3'\nwith pytest.raises(KeyError) as __:\n    obj.pop('key4')\nobj.key5 = 'val5'\ndel obj.key5\nwith pytest.raises(KeyError) as __:\n    obj.pop('key5')\nwith pytest.raises(AttributeError) as __:\n    del obj.key5\n\n# test deepcopy\nobj = DictObj({'languages': ['Chinese', 'English']})\ncopied_obj = deepcopy(obj)\nassert copied_obj == obj\ncopied_obj.languages = obj.languages + ['Japanese']\nassert obj.languages == ['Chinese', 'English']\nassert copied_obj.languages == ['Chinese', 'English', 'Japanese']\nassert copied_obj != obj\n\nperson_dct = {'name': 'Albert', 'age': '34', 'sex': 'Male', 'languages': ['Chinese', 'English']}\n\nperson = DictObj(person_dct)\nassert DictObj(person_dct) == DictObj(person_dct)\nassert person.to_dict() == person_dct\nassert set(person.keys()) == {'name', 'age', 'sex', 'languages'}\nassert hasattr(person, 'name') is True\nassert person.name == 'Albert'\nassert person['name'] == 'Albert'\nperson.languages.append('Japanese')\nassert person.languages == ['Chinese', 'English', 'Japanese']\n\nperson.height = '170'\nassert person['height'] == '170'\nassert 'height' in person\nassert 'height' in person.keys()\nassert hasattr(person, 'height') is True\ndel person['height']\nassert 'height' not in person\nassert 'height' not in person.keys()\nperson['height'] = '170cm'\n\nperson.update({'weight': '50'})\nweight_val = person.pop('weight')\nassert weight_val == '50'\nperson.update(DictObj({'weight': '50kg'}))\nassert person.weight == '50kg'\n\nexpected = {\n    'name': 'Albert', 'age': '34', 'sex': 'Male',\n    'languages': ['Chinese', 'English', 'Japanese'],  # appended new language\n    'height': '170cm',  # new added attribute\n    'weight': '50kg',  # new added attribute\n}\nassert person.to_dict() == expected\n\nrepr_expected: str = (\"{'name': 'Albert', 'age': '34', 'sex': 'Male', \"\n                      \"'languages': ['Chinese', 'English', 'Japanese'],\"\n                      \" 'height': '170cm', 'weight': '50kg'}\")\nassert repr(person) == repr_expected\n\n# nested structure will be detected, and changed to DictObj\nchessboard_data = {\n    'position': [\n        [{'name': 'knight'}, {'name': 'pawn'}],\n        [{'name': 'pawn'}, {'name': 'queen'}],\n    ]\n}\nchessboard_obj = DictObj(chessboard_data)\n# test comparing instances of DictObj\nassert DictObj(chessboard_data) == DictObj(chessboard_data)\nassert isinstance(chessboard_obj.position, list)\nassert len(chessboard_obj.position) == 2\nassert isinstance(chessboard_obj.position[0][0], DictObj)\nassert chessboard_obj.position[0][0].name == 'knight'\nassert chessboard_obj.position[1][1].name == 'queen'\n\n# edge case empty DictObj\nempty_dict_obj = DictObj({})\nassert len(empty_dict_obj) == 0\nassert bool(empty_dict_obj) is False\n\nobj_dict = DictObj({'data': 'oops'})\nassert obj_dict.data == 'oops'\n\n# params validation\ninvalid_key_dct = {\n    1: '1',\n}\n\n# test when dict's key is not str\nwith pytest.raises(ValueError) as __:\n    __ = DictObj(invalid_key_dct)\n\ncomplicated_key_dct = {\n    '1abc': 'Gotcha',  # '1abc' is not valid identifier for Python, so obj.1abc will cause SyntaxError\n    'class': 'MyClass',  # 'class' is keyword in Python, so obj.class will cause SyntaxError\n}\n\nobj_dict = DictObj(complicated_key_dct)\nassert obj_dict['1abc'] == 'Gotcha'\nassert getattr(obj_dict, '1abc') == 'Gotcha'\n# you can access '1abc' as attribute by adding prefix '_'\nassert obj_dict._1abc == 'Gotcha'\ndel obj_dict._1abc\n\nassert obj_dict['class'] == 'MyClass'\nassert getattr(obj_dict, 'class') == 'MyClass'\n# you can access 'class' as attribute by adding prefix '_'\nassert obj_dict._class == 'MyClass'\n\n# test re-assign new value for 'class'\nobj_dict._class = 'MyClass2'\nassert obj_dict._class == 'MyClass2'\nassert obj_dict['class'] == 'MyClass2'\nassert getattr(obj_dict, 'class') == 'MyClass2'\ndel obj_dict._class\n\n# if assign new attributes (_2, _try), ObjDict will treat it like what the originally are\n# this is fully considered by design, you're not encouraged to mess up keys\nobj_dict._2x = 'NewAttr'\nassert obj_dict._2x == 'NewAttr'\nassert obj_dict['_2x'] == 'NewAttr'\nwith pytest.raises(KeyError):\n    __ = obj_dict['2x']\nwith pytest.raises(AttributeError):\n    __ = getattr(obj_dict, '2x')\n\nobj_dict._try = 'NewAttr'\nassert obj_dict._try == 'NewAttr'\nassert obj_dict['_try'] == 'NewAttr'\nwith pytest.raises(KeyError):\n    __ = obj_dict['NewAttr']\nwith pytest.raises(AttributeError):\n    __ = getattr(obj_dict, 'NewAttr')\n\n# Demo for messing up key 'class'\n# delete and re-assign _class\ncomplicated_key_dct = {\n    'class': 'MyClass',  # 'class' is keyword in Python, so obj.class will cause SyntaxError\n}\nobj_dict = DictObj(complicated_key_dct)\n\nassert obj_dict['class'] == 'MyClass'\nobj_dict._class = 'MyClass2'\nassert obj_dict['class'] == 'MyClass2'\ndel obj_dict._class\n\n# obj_dict has no knowledge about 'class' or '_class'\n# so '_class' is a brand-new attribute, and will be stored as '_class'\nobj_dict._class = 'MyClass3'\nwith pytest.raises(KeyError):\n    # Oops!!! by-design\n    # 'class' cannot be accessed as key anymore,\n    # because we store '_class' as key as other valid keys behave\n    assert obj_dict['class'] == 'MyClass3'\nassert obj_dict['_class'] == 'MyClass3'\n\n# thread safe testing\nimport sys\nfrom threading import Thread\nfrom pythonic_toolbox.decorators.decorator_utils import method_synchronized\n\nclass MyObjDict(DictObj):\n    # implement a thread-safe method to increase the value of cnt\n    @method_synchronized\n    def increase_cnt_by_n(self, n):\n        self.cnt += n\n\ndef increase_cnt_by_100(dict_obj):\n    for i in range(100):\n        dict_obj.increase_cnt_by_n(1)\n\nsw_interval = sys.getswitchinterval()\ntry:\n    sys.setswitchinterval(0.0001)\n    my_dict_obj = MyObjDict({'cnt': 0})\n    threads = [Thread(target=increase_cnt_by_100, args=(my_dict_obj,)) for _ in range(100)]\n    [t.start() for t in threads]\n    [t.join() for t in threads]\n    assert my_dict_obj.cnt == 10000\nfinally:\n    sys.setswitchinterval(sw_interval)\n\n# test copy/deepcopy of DictObj\nimport copy\n\nperson = DictObj({'name': 'albert', 'age': 33})\nteam = DictObj({'leader': person})\nshallow_copy_of_team = copy.copy(team)\nassert team.leader is shallow_copy_of_team.leader\n\ndeep_copy_of_team = copy.deepcopy(team)\nassert team.leader is not deep_copy_of_team.leader\nassert team.leader == deep_copy_of_team.leader\n\n```\n\n#### FinalDictObj\n\n```python3\nfrom typing import cast\n\nimport pytest\nfrom pythonic_toolbox.utils.dict_utils import FinalDictObj\n\nperson_dct = {'name': 'Albert', 'age': '34', 'sex': 'Male', 'languages': ['Chinese', 'English']}\n\nfixed_person = FinalDictObj(person_dct)\nassert fixed_person.name == 'Albert'\n\n# FINAL means once initialized, you cannot change the key/attribute anymore\nwith pytest.raises(RuntimeError) as exec_info:\n    fixed_person.name = 'Steve'\nexpected_error_str = 'Cannot modify attribute/item in an already initialized FinalDictObj'\nassert exec_info.value.args[0] == expected_error_str\n\nwith pytest.raises(RuntimeError) as __:\n    fixed_person.popitem()\n\nwith pytest.raises(RuntimeError) as __:\n    fixed_person.pop('name')\n\nassert isinstance(fixed_person.languages, tuple)\nwith pytest.raises(AttributeError) as exec_info:\n    # list values are changed into tuple to avoid being modified\n    cast(list, fixed_person.languages).append('Japanese')\nexpected_error_str = \"'tuple' object has no attribute 'append'\"\nassert exec_info.value.args[0] == expected_error_str\nassert fixed_person.to_dict() == person_dct\n\n# nested structure will be detected, and changed to FinalDictObj\nchessboard_data = {\n    'position': [\n        [{'name': 'knight'}, {'name': 'pawn'}],\n        [{'name': 'pawn'}, {'name': 'queen'}],\n    ]\n}\nchessboard_obj = FinalDictObj(chessboard_data)\n# test comparing instances of FinalDictObj\nassert FinalDictObj(chessboard_data) == FinalDictObj(chessboard_data)\nassert isinstance(chessboard_obj.position, tuple)\nassert isinstance(chessboard_obj.position[0][0], FinalDictObj)\nassert chessboard_obj.position[1][1].name == 'queen'\nwith pytest.raises(RuntimeError) as __:\n    chessboard_obj.position[1][1].name = 'knight'\n\n# test for keyword/non-identifier key as attribute\nfinal_obj_dict = FinalDictObj({\n    'class': 'MyClass',  # 'class' is keyword in Python, so obj.class will cause SyntaxError\n})\nassert final_obj_dict['class'] == 'MyClass'\nassert getattr(final_obj_dict, 'class') == 'MyClass'\nassert final_obj_dict._class == 'MyClass'\n\n# test copy/deepcopy of FileDictObj\nimport copy\nperson = FinalDictObj({'name': 'albert', 'age': 33})\nteam = FinalDictObj({'leader': person})\nshallow_copy_of_team = copy.copy(team)\nassert team.leader is shallow_copy_of_team.leader\nassert team.leader == shallow_copy_of_team.leader\n\ndeep_copy_of_team = copy.deepcopy(team)\nassert team.leader is not deep_copy_of_team.leader\nassert team.leader == deep_copy_of_team.leader\n\n```\n\n#### RangeKeyDict\n\n```python3\nimport pytest\nfrom pythonic_toolbox.utils.dict_utils import RangeKeyDict\n\n# test normal case\nrange_key_dict: RangeKeyDict[float, str] = RangeKeyDict({\n    (float('-inf'), 0): 'Negative',\n    (0, 60): 'F',  # 0 <= val < 60\n    (60, 70): 'D',  # 60 <= val < 70\n    (70, 80): 'C',  # 70 <= val < 80\n    (80, 90): 'B',  # 80 <= val < 90\n    (90, 100): 'A',  # 90 <= val < 100\n    100: 'A+',  # val == 100\n})\n\n# Big O of querying is O(log n), n is the number of ranges, due to using bisect inside\nassert range_key_dict[-1] == 'Negative'\nassert range_key_dict[0] == 'F'\nassert range_key_dict[55] == 'F'\nassert range_key_dict[60] == 'D'\nassert range_key_dict[75] == 'C'\nassert range_key_dict[85] == 'B'\nassert range_key_dict[95] == 'A'\nassert range_key_dict[100] == 'A+'\n\nwith pytest.raises(KeyError) as exec_info:\n    _ = range_key_dict['95']  # when key is not comparable with other integer keys\nassert exec_info.value.args[0] == \"KeyError: '95' is not comparable with other keys\"\n\nwith pytest.raises(KeyError) as exec_info:\n    _ = range_key_dict[150]\nassert exec_info.value.args[0] == 'KeyError: 150'\n\nassert range_key_dict.get(150, 'N/A') == 'N/A'\n\n# test comparison with other RangeKeyDict\nassert RangeKeyDict({(0, 10): '1'}) == RangeKeyDict({(0, 10): '1'})\nassert RangeKeyDict({(0, 10): '1'}) != RangeKeyDict({(0, 10): '2'})\nassert RangeKeyDict({(0, 10): '1'}) != RangeKeyDict({(0, 1000): '1'})\n\nwith pytest.raises(ValueError):\n    # [1, 1) is not a valid range\n    # there's no value x satisfy 1 <= x < 1\n    RangeKeyDict({(1, 1): '1'})\n\nwith pytest.raises(ValueError):\n    # [1, -1) is not a valid range\n    RangeKeyDict({(1, -1): '1'})\n\n# validate input keys types and detect range overlaps(segment intersect)\nwith pytest.raises(ValueError) as exec_info:\n    RangeKeyDict({\n        (0, 10): 'val-between-0-and-10',\n        (0, 5): 'val-between-0-and-5'\n    })\nexpected_error_msg = (\"Duplicated left boundary key 0 detected: \"\n                      \"(0, 10): 'val-between-0-and-10', (0, 5): 'val-between-0-and-5'\")\nassert exec_info.value.args[0] == expected_error_msg\n\nwith pytest.raises(ValueError) as exec_info:\n    RangeKeyDict({\n        (0, 10): 'val-between-0-and-10',\n        (5, 15): 'val-between-5-and-15'\n    })\nexpected_error_msg = (\"Overlap detected: \"\n                      \"(0, 10): 'val-between-0-and-10', (5, 15): 'val-between-5-and-15'\")\nassert exec_info.value.args[0] == expected_error_msg\n\nfrom functools import total_ordering\n\n@total_ordering\nclass Age:\n    def __init__(self, val: float):\n        if not isinstance(val, (int, float)):\n            raise ValueError('Invalid age value')\n        self.val = val\n\n    def __le__(self, other):\n        return self.val <= other.val\n\n    def __repr__(self):\n        return f'Age({repr(self.val)})'\n\n    def __hash__(self):\n        return hash(self.val)\n\nage_categories_map: RangeKeyDict[Age, str] = RangeKeyDict({\n    (Age(0), Age(2)): 'Baby',\n    (Age(2), Age(15)): 'Children',\n    (Age(15), Age(25)): 'Youth',\n    (Age(25), Age(65)): 'Adults',\n    (Age(65), Age(123)): 'Seniors',\n})\n\nassert age_categories_map[Age(0.5)] == 'Baby'\nassert age_categories_map[Age(12)] == 'Children'\nassert age_categories_map[Age(20)] == 'Youth'\nassert age_categories_map[Age(35)] == 'Adults'\nassert age_categories_map[Age(70)] == 'Seniors'\n\n```\n\n#### StrKeyIdDict\n\n```python3\nimport pytest\nfrom pythonic_toolbox.utils.dict_utils import StrKeyIdDict\n\ndata = {1: 'a', 2: 'b', '3': 'c'}\nmy_dict = StrKeyIdDict(data)\n\n# usage: value can be accessed by id (str: int-like/uuid-like/whatever) or id (int)\nassert my_dict['1'] == my_dict[1] == 'a'\nassert my_dict.keys() == {'1', '2', '3'}  # all keys are str type\nmy_dict['4'] = 'd'\nassert my_dict['4'] == 'd'\nmy_dict[4] = 'd'\nassert my_dict['4'] == 'd'\nmy_dict.update({4: 'd'})\nassert my_dict['4'] == 'd'\n\n# test comparing instances of the class\nassert StrKeyIdDict(data) == StrKeyIdDict(data)\nassert StrKeyIdDict(data) != StrKeyIdDict(dict(data, **{'4': 'd'}))\nassert StrKeyIdDict(data) == {'1': 'a', '2': 'b', '3': 'c'}\nassert StrKeyIdDict(data) != {'1': 'a', '2': 'b', '3': 'd'}\nassert StrKeyIdDict(data) != {1: 'a', 2: 'b', 3: 'c'}  # StrKeyIdDict assumes all keys are strings\n\n# test delete key\ndel my_dict[4]\nassert my_dict.keys() == {'1', '2', '3'}  # '4' is not in the dict anymore\n\n# assign value to an arbitrary string key that is not in the dict\nmy_dict.update({'some-uuid': 'something'})\nassert my_dict['some-uuid'] == 'something'\n\nwith pytest.raises(TypeError):\n    # key '1', 1 both stands for key '1',\n    # so we get duplicated keys when initializing instance, oops!\n    my_dict = StrKeyIdDict({'1': 'a', 1: 'A'})\n\nassert my_dict.get(1) == 'a'\nassert my_dict.get('NotExistKey') is None\nassert my_dict.get('NotExistKey', 'NotExistValue') == 'NotExistValue'\n\n# test edge cases\nassert StrKeyIdDict() == {}\n\n# test shallow copy\nmy_dict[5] = ['e1', 'e2', 'e3']\ncopy_dict = my_dict.copy()\ncopy_dict[1] = 'A'\nassert my_dict[1] == 'a'\nmy_dict['5'].append('e4')\nassert copy_dict['5'] == ['e1', 'e2', 'e3', 'e4']\n\n# test deep copy\nfrom copy import deepcopy\n\ncopy_dict = deepcopy(my_dict)\nmy_dict[5].append('e5')\nassert my_dict['5'] == ['e1', 'e2', 'e3', 'e4', 'e5']\nassert copy_dict[5] == ['e1', 'e2', 'e3', 'e4']\n\n# test constructor\nmy_dict = StrKeyIdDict(uuid1='a', uuid2='b')\nassert my_dict['uuid1'] == 'a'\n\n# test constructor (from keys)\nmy_dict = StrKeyIdDict.fromkeys([1, 2, 3], None)\nassert my_dict == {'1': None, '2': None, '3': None}\n# test update and overwrite\nmy_dict.update(StrKeyIdDict({1: 'a', 2: 'b', 3: 'c', 4: 'd'}))\nassert my_dict == {'1': 'a', '2': 'b', '3': 'c', '4': 'd'}\n\nmy_dict = StrKeyIdDict([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')])\nassert my_dict['1'] == my_dict[1] == 'a'\n\n# reassign StrKeyIdDict instance to another StrKeyIdDict instance\nmy_dict = StrKeyIdDict(my_dict)\nassert my_dict == {'1': 'a', '2': 'b', '3': 'c', '4': 'd'}\nassert dict(my_dict) == {'1': 'a', '2': 'b', '3': 'c', '4': 'd'}\n\n# test case when \"key\" is \"data\", which is a reserved keyword inside StrKeyIdDict\nmy_dict = StrKeyIdDict({'data': 'data_value', '1': 'a'})\nassert my_dict['data'] == 'data_value'\nassert my_dict['1'] == 'a'\n# delete key 'data', should not affect other keys\ndel my_dict['data']\nassert my_dict['1'] == 'a'\n\n```\n\n#### collect_leaves\n\n```python3\nfrom pythonic_toolbox.utils.dict_utils import collect_leaves\n\n# a nested dict-like struct\nmy_dict = {\n    'node_1': {\n        'node_1_1': {\n            'node_1_1_1': 'A',\n        },\n        'node_1_2': {\n            'node_1_2_1': 'B',\n            'node_1_2_2': 'C',\n            'node_1_2_3': None,\n        },\n        'node_1_3': [  # dict list\n            {\n                'node_1_3_1_1': 'D',\n                'node_1_3_1_2': 'E',\n            },\n            {\n                'node_1_3_2_1': 'FF',\n                'node_1_3_2_2': 'GG',\n            }\n        ]\n    }}\n\nexpected = ['A', 'B', 'C', None, 'D', 'E', 'FF', 'GG']\nassert collect_leaves(my_dict) == expected\n\nexpected = ['A', 'B', 'C', 'D', 'E', 'FF', 'GG']\nassert collect_leaves(my_dict, leaf_pred=lambda lf: lf) == expected\n\nassert collect_leaves(my_dict, keypath_pred=lambda kp: len(kp) == 1) == []\n\nexpected = ['B', 'C']\nassert collect_leaves(my_dict, keypath_pred=lambda kp: kp[-1] in {'node_1_2_1', 'node_1_2_2'}) == expected\n\nexpected = ['C']\nassert collect_leaves(my_dict, leaf_pred=lambda lf: lf == 'C') == expected\nassert collect_leaves(my_dict,\n                      keypath_pred=lambda kp: kp[-1] == 'node_1_2_2',\n                      leaf_pred=lambda lf: lf == 'C') == expected\n\nassert collect_leaves(my_dict,\n                      keypath_pred=lambda kp: kp[-1] == 'node_1_1_1',\n                      leaf_pred=lambda lf: lf == 'C') == []\n\nexpected = ['D', 'E', 'FF', 'GG']\nassert collect_leaves(my_dict,\n                      keypath_pred=lambda kp: len(kp) >= 2 and kp[-2] == 'node_1_3') == expected\n\nexpected = ['FF', 'GG']\nassert collect_leaves(my_dict,\n                      keypath_pred=lambda kp: len(kp) >= 2 and kp[-2] == 'node_1_3',\n                      leaf_pred=lambda lf: isinstance(lf, str) and len(lf) == 2) == expected\n\n# edge cases\nassert collect_leaves([]) == []\nassert collect_leaves({}) == []\nassert collect_leaves(None) == []\n\n```\n\n#### dict_until\n\n```python3\nfrom pythonic_toolbox.utils.dict_utils import dict_until\n\ndata = {'full_name': 'Albert Lee', 'pen_name': None}\nassert dict_until(data, keys=['name', 'full_name']) == 'Albert Lee'\nassert dict_until(data, keys=['full_name', 'name']) == 'Albert Lee'\nassert dict_until(data, keys=['name', 'english_name']) is None\nassert dict_until(data, keys=['name', 'english_name'], default='anonymous') == 'anonymous'\n# test when pen_name is set None on purpose\nassert dict_until(data, keys=['pen_name'], default='anonymous') is None\n# test when value with None value is not acceptable\nassert dict_until(data, keys=['pen_name'], terminate=lambda x: x is not None, default='anonymous') == 'anonymous'\n\n```\n\n#### select_list_of_dicts\n\n```python3\nfrom pythonic_toolbox.utils.dict_utils import select_list_of_dicts\n\ndict_lst = [\n    {'name': 'Tony Stark', 'sex': 'male', 'age': 49, 'alias': 'Iron Man'},\n    {'name': 'Peter Parker', 'sex': 'male', 'age': 16, 'alias': 'Spider Man'},\n    # another Peter Parker from multiverse\n    {'name': 'Peter Parker', 'sex': 'male', 'age': 16, 'alias': 'Spider Man'},\n    {'name': 'Carol Danvers', 'sex': 'female', 'alias': 'Captain Marvel'},\n    {'name': 'Natasha Romanoff', 'sex': 'female', 'age': 35, 'alias': 'Black Widow'},\n]\n\nassert select_list_of_dicts(dict_lst, [lambda d: d['sex'] == 'female']) == [\n    {'name': 'Carol Danvers', 'sex': 'female', 'alias': 'Captain Marvel'},\n    {'name': 'Natasha Romanoff', 'sex': 'female', 'age': 35, 'alias': 'Black Widow'}]\n\nassert select_list_of_dicts(dict_lst, [lambda d: d['sex'] == 'female'], keys=['name']) == [\n    {'name': 'Carol Danvers'}, {'name': 'Natasha Romanoff'}]\n\n# unique is supported for return list\nassert select_list_of_dicts(dict_lst, [lambda d: d['sex'] == 'male'], keys=['name', 'age']) == [\n    {'name': 'Tony Stark', 'age': 49},\n    {'name': 'Peter Parker', 'age': 16},\n    {'name': 'Peter Parker', 'age': 16},\n]\n\nassert select_list_of_dicts(dict_lst, [lambda d: d['sex'] == 'male'], keys=['name', 'age'], unique=True) == [\n    {'name': 'Tony Stark', 'age': 49},\n    {'name': 'Peter Parker', 'age': 16}]\n\n# dict keys are ordered as the keys passed-in\nassert list(select_list_of_dicts(dict_lst, keys=['name', 'age'], unique=True)[0].keys()) == ['name', 'age']\nassert list(select_list_of_dicts(dict_lst, keys=['age', 'name'], unique=True)[0].keys()) == ['age', 'name']\n\n# locate Captain Marvel, with default val for missing key\nassert select_list_of_dicts(dict_lst,\n                            preds=[lambda d: d['alias'] == 'Captain Marvel'],\n                            keys=['name', 'sex', 'age', 'alias'],\n                            val_for_missing_key='Unknown')[0]['age'] == 'Unknown'\n\n# edge cases, get the original dict\nassert select_list_of_dicts([]) == []\nassert select_list_of_dicts(dict_lst) == dict_lst\n\n# new list of dicts is returned, leaving the original list of dicts untouched\nblack_widow = select_list_of_dicts(dict_lst, [lambda d: d['name'] == 'Natasha Romanoff'])[0]\nblack_widow['age'] += 1\nassert black_widow['age'] == 36\n# we don't modify the original dict data, Natasha is always 35 years old\nassert select_list_of_dicts(dict_lst, [lambda d: d['name'] == 'Natasha Romanoff'])[0]['age'] == 35\n\n# filter the ones with age info\nassert len(select_list_of_dicts(dict_lst, [lambda d: 'age' in d])) == 4\nassert len(select_list_of_dicts(dict_lst, [lambda d: 'age' in d], unique=True)) == 3\n\n```\n\n#### unique_list_of_dicts\n\n```python3\nfrom pythonic_toolbox.utils.dict_utils import unique_list_of_dicts\n\ndict_lst = [\n    {'name': 'Tony Stark', 'sex': 'male', 'age': 49, 'alias': 'Iron Man'},\n    {'name': 'Peter Parker', 'sex': 'male', 'age': 16, 'alias': 'Spider Man'},\n    # Peter Parkers from multiverse in same age.\n    {'name': 'Peter Parker', 'sex': 'male', 'age': 16, 'alias': 'Spider Man'},\n    {'name': 'Peter Parker', 'sex': 'male', 'age': 16, 'alias': 'Spider Man'},\n]\n\n# Only one Peter Parker will be kept, for all data are exactly same.\nassert unique_list_of_dicts(dict_lst) == [\n    {'name': 'Tony Stark', 'sex': 'male', 'age': 49, 'alias': 'Iron Man'},\n    {'name': 'Peter Parker', 'sex': 'male', 'age': 16, 'alias': 'Spider Man'},\n]\n\n# edge cases\nassert unique_list_of_dicts([]) == []\n\n```\n\n#### walk_leaves\n\n```python3\nfrom pythonic_toolbox.utils.dict_utils import walk_leaves\n\ndata = {\n    'k1': {\n        'k1_1': 1,\n        'k1_2': 2,\n    },\n    'k2': 'N/A',  # stands for not available\n}\n\nexpected = {\n    'k1': {\n        'k1_1': 2,\n        'k1_2': 4,\n    },\n    'k2': 'N/A',  # stands for not available\n}\nassert walk_leaves(data) == data  # no transform function provided, just a deepcopy\nassert walk_leaves(data, trans_fun=lambda x: x * 2 if isinstance(x, int) else x) == expected\n\n# if inplace is set True, will change data inplace, return nothing\nassert walk_leaves(data, trans_fun=lambda x: x * 2 if isinstance(x, int) else x, inplace=True) is None\nassert data == expected\n\ndata = [{'name': 'lml', 'age': 33}, {'name': 'albert', 'age': 18}]\nexpected = [{'name': 'lml', 'age': 66}, {'name': 'albert', 'age': 36}]\nassert walk_leaves(data, trans_fun=lambda x: x * 2 if isinstance(x, int) else x) == expected\nassert walk_leaves(data, trans_fun=lambda x: x * 2 if isinstance(x, int) else x, inplace=True) is None\nassert data == expected\n\n# edge cases\nassert walk_leaves(None) is None\nassert walk_leaves([]) == []\nassert walk_leaves({}) == {}\nassert walk_leaves(None, inplace=True) is None\nassert walk_leaves([], inplace=True) is None\nassert walk_leaves({}, inplace=True) is None\n\n```\n\n### functional_utils\n\n#### filter_multi\n\n```python3\nfrom pythonic_toolbox.utils.functional_utils import lfilter_multi, filter_multi\nfrom collections.abc import Iterable\n\ndef is_even(x):\n    return x % 2 == 0\n\ndef is_divisible_by_5(x):\n    return x % 5 == 0\n\n# select numbers which are divisible by 2 and 5\nassert lfilter_multi([is_even, is_divisible_by_5], range(1, 30)) == [10, 20]\nassert lfilter_multi([is_even, is_divisible_by_5], [5, 10, 15, 20]) == [10, 20]\n\nfrom itertools import count, takewhile\n# if you want to pass an iterator, make sure the iterator will end/break,\n# Note: a bare count(start=0, step=2) will generate number like 0, 2, 4, 6, .... (never ends)\neven_numbers_less_equal_than_50 = takewhile(lambda x: x <= 50, count(start=0, step=2))\nexpected = [0, 10, 20, 30, 40, 50]\nassert lfilter_multi([is_even, is_divisible_by_5], even_numbers_less_equal_than_50) == expected\n\n# testing for filter_multi, not converted to list directly\nnum_iterator = filter_multi([is_even, is_divisible_by_5], [5, 10, 15, 20])\nassert type(num_iterator) is filter\nassert isinstance(num_iterator, Iterable)\nexpected = [10, 20]\nfor idx, value in enumerate(num_iterator):\n    assert value == expected[idx]\n\n# when items are infinite, choose filter_multi instead of lfilter_multi\nexpected = [0, 10, 20, 30, 40, 50]\nfor idx, value in enumerate(filter_multi([is_even, is_divisible_by_5], count(start=0, step=1))):\n    if value > 50:\n        break\n    else:\n        assert value == expected[idx]\n\n```\n\n### list_utils\n\n#### filter_allowable\n\n```python3\nfrom pythonic_toolbox.utils.list_utils import filter_allowable\n\nfruits = ['apple', 'banana', 'orange']\nvegetables = ['carrot', 'potato', 'tomato']\nmeats = ['beef', 'chicken', 'fish']\n\nfoods = fruits + vegetables + meats\n\nassert list(filter_allowable(foods)) == foods\nassert list(filter_allowable(foods, allow_list=[], block_list=[])) == foods\nassert list(filter_allowable(foods, allow_list=['apple', 'banana', 'blueberry'])) == ['apple', 'banana']\nassert list(filter_allowable(foods, allow_list=[], block_list=foods)) == []\nassert list(filter_allowable(foods, block_list=meats)) == fruits + vegetables\nassert list(filter_allowable(foods, allow_list=['apple'], block_list=[])) == ['apple']\nassert list(filter_allowable(foods, allow_list=['apple'], block_list=['apple'])) == []\nassert list(filter_allowable(foods + ['blueberry'], allow_list=[], block_list=foods)) == ['blueberry']\nassert list(filter_allowable(['blueberry'], allow_list=[], block_list=[])) == ['blueberry']\nassert list(filter_allowable(['blueberry'], allow_list=[], block_list=['apple', 'banana'])) == ['blueberry']\nassert list(filter_allowable(['blueberry'], allow_list=['orange'], block_list=['apple', 'banana'])) == []\n\n# test cases with parameter key\nassert list(filter_allowable(foods, allow_list=['a', 'b'], key=lambda x: x[0])) == ['apple', 'banana', 'beef']\n\n# test some basic cases\nassert list(filter_allowable()) == []\nassert list(filter_allowable(candidates=None)) == []\nassert list(filter_allowable(candidates=[])) == []\nassert list(filter_allowable(candidates=[], allow_list=[], block_list=[])) == []\n\n```\n\n#### sort_with_custom_orders\n\n```python3\nfrom operator import itemgetter\nfrom typing import List\n\nimport pytest\nfrom pythonic_toolbox.utils.list_utils import sort_with_custom_orders\n\n# basic usage\nvalues = ['branch2', 'branch1', 'branch3', 'master', 'release']\nexpected = ['master', 'release', 'branch1', 'branch2', 'branch3']\nassert sort_with_custom_orders(values, prefix_orders=['master', 'release']) == expected\nassert sort_with_custom_orders(values, prefix_orders=['master', 'release'], reverse=True) == expected[::-1]\n\nvalues = [1, 2, 3, 9, 9]\nexpected = [9, 9, 1, 2, 3]\nassert sort_with_custom_orders(values, prefix_orders=[9, 8, 7]) == expected\n\nvalues = [1, 2, 3, 9]\nexpected = [9, 2, 3, 1]\nassert sort_with_custom_orders(values, prefix_orders=[9], suffix_orders=[1]) == expected\n\nassert sort_with_custom_orders([]) == []\nassert sort_with_custom_orders([], prefix_orders=[], suffix_orders=[]) == []\nassert sort_with_custom_orders([], prefix_orders=['master']) == []\n\n# tests for unhashable values\nvalues = [[2, 2], [1, 1], [3, 3], [6, 0]]\nassert sort_with_custom_orders(values, prefix_orders=[[3, 3]]) == [[3, 3], [1, 1], [2, 2], [6, 0]]\n# if \"key\" is provided, items are sorted in order of key(item)\n# items in prefix_orders/suffix_orders don't need to be one-one correspondence with items to sort\n# sum([6]) == sum([3, 3]) == sum([6, 0])\nassert sort_with_custom_orders(values, prefix_orders=[[6]], key=sum) == [[3, 3], [6, 0], [1, 1], [2, 2]]\n\n# tests for list of dicts\nvalues = [{2: 2}, {1: 1}, {1: 2}]\nassert sort_with_custom_orders(values, prefix_orders=[{2: 2}],\n                               key=lambda data: sum(data.values())) == [{2: 2}, {1: 2}, {1: 1}]\n\nbranch_info: List[dict] = [{'branch': 'master', 'commit_id': 'v1.2'}, {'branch': 'release', 'commit_id': 'v1.1'}]\n# Assume that we prefer choosing branch in order: release > master > others (develop, hotfix etc.)\nres = sort_with_custom_orders(branch_info,\n                              prefix_orders=[{'branch': 'release'}, {'branch': 'master'}],\n                              key=itemgetter('branch'))\nexpected = [{'branch': 'release', 'commit_id': 'v1.1'}, {'branch': 'master', 'commit_id': 'v1.2'}]\nassert res == expected\n\nbranch_info = [{'branch': 'develop', 'commit_id': 'v1.3'}, {'branch': 'master', 'commit_id': 'v1.2'}]\nres = sort_with_custom_orders(branch_info,\n                              prefix_orders=[{'branch': 'release'}, {'branch': 'master'}],\n                              key=itemgetter('branch'))\nexpected = [{'branch': 'master', 'commit_id': 'v1.2'}, {'branch': 'develop', 'commit_id': 'v1.3'}]\nassert res == expected\n\n# tests for exceptions\nwith pytest.raises(ValueError) as exec_info:\n    sort_with_custom_orders([1, 2, 3], prefix_orders=[3], suffix_orders=[3])\nassert exec_info.value.args[0] == 'prefix and suffix contains same value'\n\nwith pytest.raises(ValueError) as exec_info:\n    sort_with_custom_orders([1, 2, 3], prefix_orders=[1, 1])\nassert exec_info.value.args[0] == 'prefix_orders contains duplicated values'\n\n# tests for class\nclass Person:\n    def __init__(self, id, name, age):\n        self.id = id\n        self.name = name\n        self.age = age\n\n    def __lt__(self, other: 'Person'):\n        return self.age < other.age\n\n    def __eq__(self, other: 'Person'):\n        return self.age == other.age\n\n    def __hash__(self):\n        return self.id\n\n    def __str__(self):\n        return f'Person({self.id}, {self.name}, {self.age})'\n\n    def __repr__(self):\n        return str(self)\n\nAlbert = Person(1, 'Albert', 28)\nAlice = Person(2, 'Alice', 26)\nMenglong = Person(3, 'Menglong', 33)\n\npersons = [Albert, Alice, Menglong]\nexpected = [Alice, Albert, Menglong]\nassert sort_with_custom_orders(persons) == expected\n\nexpected = [Menglong, Alice, Albert]\nassert sort_with_custom_orders(persons, prefix_orders=[Menglong, Person(4, 'Anyone', 40)]) == expected\n\n```\n\n#### unpack_list\n\n```python3\nimport pytest\nfrom pythonic_toolbox.utils.list_utils import unpack_list\n\nfirst, second, third = unpack_list(['a', 'b', 'c', 'd'], target_num=3)\nassert first == 'a' and second == 'b' and third == 'c'\n\nfirst, second, third = unpack_list(['a', 'b'], target_num=3, default=None)\nassert first == 'a' and second == 'b' and third is None\n\nfirst, second, third = unpack_list(range(1, 3), target_num=3, default=None)\nassert first == 1 and second == 2 and third is None\n\nfirst, second, third = unpack_list([], target_num=3, default=0)\nassert first == second == third == 0\n\nfirst, second, *rest = unpack_list(['a', 'b', 'c'], target_num=4, default='x')\nassert first == 'a' and second == 'b' and rest == ['c', 'x']\n\n# test case for type range\nfirst, second, third = unpack_list(range(1, 3), target_num=3, default=None)\nassert first == 1 and second == 2 and third is None\n\ndef fib():\n    a, b = 0, 1\n    while 1:\n        yield a\n        a, b = b, a + b\n\n# test case for type generator\nfib_generator = fib()  # generates data like [0, 1, 1, 2, 3, 5, 8, 13, 21 ...]\nfirst, second, third, *rest = unpack_list(fib_generator, target_num=6)\nassert first == 0 and second == 1 and third == 1\nassert rest == [2, 3, 5]\nseventh, eighth = unpack_list(fib_generator, target_num=2)\nassert seventh == 8 and eighth == 13\n\n# test edge case, nothing to unpack\nempty = unpack_list([], target_num=0, default=None)\nassert empty == []\n\nres = unpack_list([], target_num=2, default=None)\nassert res == [None, None]\n\nempty = unpack_list(['a', 'b'], target_num=0, default=None)\nassert empty == []\n\nempty = unpack_list(range(0, 0), target_num=0)\nassert empty == []\n\nempty = unpack_list(iter([]), target_num=0, default=None)\nassert empty == []\n\nwith pytest.raises(ValueError):\n    # ValueError: not enough values to unpack (expected 3, got 2)\n    first, second, third = unpack_list([1, 2], target_num=2)\n\n```\n\n#### until\n\n```python3\nfrom itertools import count\n\nfrom pythonic_toolbox.utils.list_utils import until\n\n# basic usage\ncounter = count(1, 2)  # generator of odd numbers: 1, 3, 5, 7 ...\nassert until(counter, lambda x: x > 10) == 11\n\nassert until([1, 2, 3], lambda x: x > 10, default=11) == 11\n\n# edge cases\nassert until([], default=3) == 3  # nothing provided, return default\nassert until(None, lambda x: x > 10, default=11) == 11\n\n```\n\n### string_utils\n\n#### substitute_string_template_dict\n\n```python3\nfrom unittest.mock import patch, PropertyMock\n\nimport pytest\nfrom pythonic_toolbox.utils.string_utils import substitute_string_template_dict, CycleError\n\n# simple usage\n# both $variable ${variable} declarations are supported in string template format\nstr_template_dict = {\n    'greeting': 'Good Morning, Everyone!',\n    'first_name': 'Albert',\n    'last_name': 'Lee',\n    'full_name': '$first_name $last_name',\n    'age': 34,\n    'speech': '$greeting, I am $full_name, a ${age}-year-old programmer, very glad to meet you!'\n}\noutput_dict = substitute_string_template_dict(str_template_dict)\nassert output_dict['full_name'] == 'Albert Lee'\nexpected_speech = 'Good Morning, Everyone!, I am Albert Lee, a 34-year-old programmer, very glad to meet you!'\nassert output_dict['speech'] == expected_speech\n\n# complex usage, with dynamic values, and multi value-providing holders\nstr_template_dict = {\n    'first_name': 'Daenerys',\n    'last_name': 'Targaryen',\n    'nick_name': 'Dany',\n    'full_name': '$first_name $last_name',\n    'speech': \"$nick_name: I'm $full_name ($title1, $title2, $title3), it's $current_time_str, $greeting!\",\n}\n\nvariables_dict = {'title1': 'Queen of Meereen',\n                  'title2': 'Mother of Dragons'}\n\nclass DynamicVariables:\n    @property\n    def current_time_str(self):\n        import datetime\n        return datetime.datetime.now().strftime(\"%H:%M:%S\")\n\nclass DefaultUnknownTitle:\n    \"\"\"\n    A class will always return UnknownTitle, when try to access attribute like\n    title1, title2, ..., titleX\n    \"\"\"\n\n    def __getattribute__(self, item):\n        if isinstance(item, str) and item.startswith('title') and item[len(item) - 1:].isdigit():\n            return 'UnknownTitle'\n        return super(DefaultUnknownTitle, self).__getattribute__(item)\n\nexpected_speech = (\"Dany: I'm Daenerys Targaryen (Queen of Meereen, Mother of Dragons, UnknownTitle), \"\n                   \"it's 08:00:00, good morning everyone!\")\n\n# using mock to make DynamicVariables().current_time_str always return 08:00:00\nwith patch.object(DynamicVariables, 'current_time_str', return_value='08:00:00', new_callable=PropertyMock):\n    output_dict = substitute_string_template_dict(str_template_dict, variables_dict, DynamicVariables(),\n                                                  DefaultUnknownTitle(),\n                                                  greeting='good morning everyone')\n    assert output_dict['speech'] == expected_speech\n\n# edge cases\nassert substitute_string_template_dict({}) == {}\n\n# cycle detection\nstr_template_dict = {\n    'variable_a': 'Hello $variable_b',  # variable_a depends on variable_b\n    'variable_b': 'Hello $variable_a',  # variable_b depends on variable_a, it's a cycle!\n}\n\nwith pytest.raises(CycleError) as exec_info:\n    substitute_string_template_dict(str_template_dict)\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/albertmenglongli/pythonic-toolbox",
    "keywords": "toolbox",
    "license": "Apache2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pythonic-toolbox",
    "package_url": "https://pypi.org/project/pythonic-toolbox/",
    "platform": null,
    "project_url": "https://pypi.org/project/pythonic-toolbox/",
    "project_urls": {
      "Homepage": "https://github.com/albertmenglongli/pythonic-toolbox"
    },
    "release_url": "https://pypi.org/project/pythonic-toolbox/1.1.36/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "a toolbox with pythonic utils, tools",
    "version": "1.1.36",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16469839,
  "releases": {
    "1.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b02ec70166fa5be5b101817e037a518d3d48852cec1880d232f2117f0c562475",
          "md5": "7e1efddd85a4eab4826126bc60f28ea9",
          "sha256": "82b67bad382eb7213611a2fa9e76f0290e848d207a419b41d6c2c78259cef299"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "7e1efddd85a4eab4826126bc60f28ea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8846,
        "upload_time": "2022-01-29T06:26:56",
        "upload_time_iso_8601": "2022-01-29T06:26:56.226340Z",
        "url": "https://files.pythonhosted.org/packages/b0/2e/c70166fa5be5b101817e037a518d3d48852cec1880d232f2117f0c562475/pythonic-toolbox-1.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f38ef12b268627a48e06e2a5d32337cd1e123ef1219cf892f014e4bed077a57",
          "md5": "223473ed98a608456eaf58036809f7b3",
          "sha256": "4cc7a5cbbfc5db459ddf3428d6b8e35716cf168cf4c02a8dcdeef51bfdf34f21"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "223473ed98a608456eaf58036809f7b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9049,
        "upload_time": "2022-01-29T07:02:35",
        "upload_time_iso_8601": "2022-01-29T07:02:35.278284Z",
        "url": "https://files.pythonhosted.org/packages/4f/38/ef12b268627a48e06e2a5d32337cd1e123ef1219cf892f014e4bed077a57/pythonic-toolbox-1.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dc71f53feb291e13d83c2626a594cd5c5efb7248c4cd2f6693619ff85eb829f",
          "md5": "00a0d0bc87cdcba1b365b2e09c504bd8",
          "sha256": "0d786c9729d01434ef4c7ac4a4901632bdde8435902d7e16a7fc85a94ec40a02"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "00a0d0bc87cdcba1b365b2e09c504bd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11011,
        "upload_time": "2022-02-09T04:43:38",
        "upload_time_iso_8601": "2022-02-09T04:43:38.253036Z",
        "url": "https://files.pythonhosted.org/packages/7d/c7/1f53feb291e13d83c2626a594cd5c5efb7248c4cd2f6693619ff85eb829f/pythonic-toolbox-1.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4402f8f33b28e388128ed05e0f5aa9d03334780538843317b87f428ed434c2c2",
          "md5": "9a41c4781f5c5e1aa015b8850b50b6f5",
          "sha256": "c930860734ee6d50f198d06c6cfbc70ac732851d223727809aa19af449581af6"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "9a41c4781f5c5e1aa015b8850b50b6f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12274,
        "upload_time": "2022-02-14T10:13:56",
        "upload_time_iso_8601": "2022-02-14T10:13:56.788028Z",
        "url": "https://files.pythonhosted.org/packages/44/02/f8f33b28e388128ed05e0f5aa9d03334780538843317b87f428ed434c2c2/pythonic-toolbox-1.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e081256dc5900de9c99e8d7ef5e345ec5d506a36e47ca38545a156d79a6d8046",
          "md5": "910897cc7a0a4b5f48c3cae36739ed19",
          "sha256": "63ddc409757484cf75e350d8bb6f11832d33fe46655d37ee7abc820e02ebb43f"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "910897cc7a0a4b5f48c3cae36739ed19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15838,
        "upload_time": "2022-03-11T15:16:57",
        "upload_time_iso_8601": "2022-03-11T15:16:57.125877Z",
        "url": "https://files.pythonhosted.org/packages/e0/81/256dc5900de9c99e8d7ef5e345ec5d506a36e47ca38545a156d79a6d8046/pythonic-toolbox-1.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d830983ccf9dd5b77d8d9a0c62ba013a035ab64f4bd7b3152b9b12edb96fb30",
          "md5": "e294908e001091535ad555700c80db3b",
          "sha256": "8dd26f031ef6fc7b199de1ee6814cea4ac5c59b6e600abb4de4bf2929d351664"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "e294908e001091535ad555700c80db3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17351,
        "upload_time": "2022-03-28T09:26:32",
        "upload_time_iso_8601": "2022-03-28T09:26:32.257248Z",
        "url": "https://files.pythonhosted.org/packages/7d/83/0983ccf9dd5b77d8d9a0c62ba013a035ab64f4bd7b3152b9b12edb96fb30/pythonic-toolbox-1.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54d3cfe1a6515ff890393ffd154624dda004addc2680fb41731c0fc37be29b34",
          "md5": "ae356739283d281767afc78ffbf1745a",
          "sha256": "ad3fb044ddfe13ad6b23e242d3421a93e81cd90d0a49f53a036b17c7d85f477f"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "ae356739283d281767afc78ffbf1745a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12258,
        "upload_time": "2022-03-28T11:28:11",
        "upload_time_iso_8601": "2022-03-28T11:28:11.207231Z",
        "url": "https://files.pythonhosted.org/packages/54/d3/cfe1a6515ff890393ffd154624dda004addc2680fb41731c0fc37be29b34/pythonic-toolbox-1.1.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e049a33231fff3d646d6a05bdee67d3827e3ed647c34603ac5be2ad9b75de436",
          "md5": "f77d3cc2ca752f73d54fd6f3156caff8",
          "sha256": "e06b5301f317c5349a0702e9caa1d87db42cda3d0b54ffffed7883d2d8f11100"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.18.tar.gz",
        "has_sig": false,
        "md5_digest": "f77d3cc2ca752f73d54fd6f3156caff8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14428,
        "upload_time": "2022-03-31T07:37:15",
        "upload_time_iso_8601": "2022-03-31T07:37:15.708711Z",
        "url": "https://files.pythonhosted.org/packages/e0/49/a33231fff3d646d6a05bdee67d3827e3ed647c34603ac5be2ad9b75de436/pythonic-toolbox-1.1.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25a6324dfb1d879d482a653996351e16e82c0a1843bc1f1ee3ea391d08fb5820",
          "md5": "bc4f1140d07a56a3ddbe2e382dc8f5a2",
          "sha256": "14abaca1b6d1fdf1aed00b317b89362b0a46a6dee40498f24e37508481f2346f"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bc4f1140d07a56a3ddbe2e382dc8f5a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4233,
        "upload_time": "2021-12-27T12:38:31",
        "upload_time_iso_8601": "2021-12-27T12:38:31.907499Z",
        "url": "https://files.pythonhosted.org/packages/25/a6/324dfb1d879d482a653996351e16e82c0a1843bc1f1ee3ea391d08fb5820/pythonic-toolbox-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c3d682c8e82a4a725096c53890c91c5a4c8ec66495fb3a9744a3e5bb5cb6faf",
          "md5": "aa57d7e352bc8855df695252901db9d8",
          "sha256": "8fd420dec710d4ed4692a3045ebd1a5aea24d64f24aae2ea86bcc81c82036f2d"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.20.tar.gz",
        "has_sig": false,
        "md5_digest": "aa57d7e352bc8855df695252901db9d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17841,
        "upload_time": "2022-04-13T07:37:35",
        "upload_time_iso_8601": "2022-04-13T07:37:35.171389Z",
        "url": "https://files.pythonhosted.org/packages/0c/3d/682c8e82a4a725096c53890c91c5a4c8ec66495fb3a9744a3e5bb5cb6faf/pythonic-toolbox-1.1.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59aecdb7631b7697b9ac8db857e09c990a5a52debaea91eb651704251575cf9a",
          "md5": "f3ba47ecf10267341f82b7ceef0cf5d9",
          "sha256": "86cd0fe1908b205d2c0578d883cf569bce23a2b754e25af268dc1c11a94fab3b"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.21.tar.gz",
        "has_sig": false,
        "md5_digest": "f3ba47ecf10267341f82b7ceef0cf5d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18436,
        "upload_time": "2022-04-21T04:37:31",
        "upload_time_iso_8601": "2022-04-21T04:37:31.437710Z",
        "url": "https://files.pythonhosted.org/packages/59/ae/cdb7631b7697b9ac8db857e09c990a5a52debaea91eb651704251575cf9a/pythonic-toolbox-1.1.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f128ea707305573def9f0d131647d6978351a1c878e68e3de9d2c63e7d0760b",
          "md5": "0aa033725ed6d22944ae5cfab5e2043b",
          "sha256": "6c98d1beab72ac2ba9f1f76614cf824ed1f41adbd92ac26162c12254a48b0673"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.23.tar.gz",
        "has_sig": false,
        "md5_digest": "0aa033725ed6d22944ae5cfab5e2043b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19255,
        "upload_time": "2022-05-01T16:11:16",
        "upload_time_iso_8601": "2022-05-01T16:11:16.048954Z",
        "url": "https://files.pythonhosted.org/packages/3f/12/8ea707305573def9f0d131647d6978351a1c878e68e3de9d2c63e7d0760b/pythonic-toolbox-1.1.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba9dc1fe8fb06842fd802ff3113334988324f417cc4cb54939400ac9cac88eea",
          "md5": "76b4b3ba95828e556fabc1bcbfd7ba5c",
          "sha256": "5bd89a890ddab7946e9298f5450e5f25c45040fbfff0664f70b220fbaf5788e0"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.24-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76b4b3ba95828e556fabc1bcbfd7ba5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13180,
        "upload_time": "2022-05-07T04:47:30",
        "upload_time_iso_8601": "2022-05-07T04:47:30.814535Z",
        "url": "https://files.pythonhosted.org/packages/ba/9d/c1fe8fb06842fd802ff3113334988324f417cc4cb54939400ac9cac88eea/pythonic_toolbox-1.1.24-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9a4883532f67f54fbe0a29c445283eef3fda6353c28eb57ba2e6d6c72fe98d1",
          "md5": "5ed6b996a2259ecb0ab18a8139ab7dfe",
          "sha256": "47fcfab99da634bcc4a2dee6b0799b24e1dd370789adbc26220707e672875783"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.24.tar.gz",
        "has_sig": false,
        "md5_digest": "5ed6b996a2259ecb0ab18a8139ab7dfe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19564,
        "upload_time": "2022-05-07T04:47:13",
        "upload_time_iso_8601": "2022-05-07T04:47:13.621559Z",
        "url": "https://files.pythonhosted.org/packages/d9/a4/883532f67f54fbe0a29c445283eef3fda6353c28eb57ba2e6d6c72fe98d1/pythonic-toolbox-1.1.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c1a1be404a3aca419f4e0b5b192f869ad6ec9abafa2d35ac52e321008fe1e59",
          "md5": "82a8f7d58c06fae528a3180d23c80fd4",
          "sha256": "4e1a7134aa997cbbf5483b9820fabaaa3dc18a9bfbf94e4adbe3c31ec18bd5f0"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.25-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82a8f7d58c06fae528a3180d23c80fd4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13251,
        "upload_time": "2022-05-27T16:49:29",
        "upload_time_iso_8601": "2022-05-27T16:49:29.401861Z",
        "url": "https://files.pythonhosted.org/packages/1c/1a/1be404a3aca419f4e0b5b192f869ad6ec9abafa2d35ac52e321008fe1e59/pythonic_toolbox-1.1.25-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da6cd8173549ef0f635cfecb34d3760873dbd6c8b88ac3b2e262a6ed27d87af5",
          "md5": "4e3f1878f747db4860c23b76051048c5",
          "sha256": "0fd498c11189bb8a29c66f40c4a4e86567838ada2914b9fa5935d0a2f41a5c20"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.25.tar.gz",
        "has_sig": false,
        "md5_digest": "4e3f1878f747db4860c23b76051048c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19745,
        "upload_time": "2022-05-27T16:48:53",
        "upload_time_iso_8601": "2022-05-27T16:48:53.984549Z",
        "url": "https://files.pythonhosted.org/packages/da/6c/d8173549ef0f635cfecb34d3760873dbd6c8b88ac3b2e262a6ed27d87af5/pythonic-toolbox-1.1.25.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e6458bfe93602d2b6676211542c1f30d3be1d854fdc807592cc820bf70b2f60",
          "md5": "585eafcebe87378feb195f2c291c5239",
          "sha256": "4bb113babdd7604149d486f4cecb6386ad84fd8d1f089968a034e6d219defb0f"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.26-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "585eafcebe87378feb195f2c291c5239",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13404,
        "upload_time": "2022-05-28T15:29:15",
        "upload_time_iso_8601": "2022-05-28T15:29:15.412681Z",
        "url": "https://files.pythonhosted.org/packages/9e/64/58bfe93602d2b6676211542c1f30d3be1d854fdc807592cc820bf70b2f60/pythonic_toolbox-1.1.26-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a929495c79966c72664a0bde9a50af78adc6aabd44518e4760c8c1fb3d5c98e9",
          "md5": "3fcb5416cecc4443f06cfbe817633324",
          "sha256": "db4a7db3952c3dc2ce04d12678437cec51325073a88582e7c37de622d4f78839"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.26.tar.gz",
        "has_sig": false,
        "md5_digest": "3fcb5416cecc4443f06cfbe817633324",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19901,
        "upload_time": "2022-05-28T15:28:33",
        "upload_time_iso_8601": "2022-05-28T15:28:33.538768Z",
        "url": "https://files.pythonhosted.org/packages/a9/29/495c79966c72664a0bde9a50af78adc6aabd44518e4760c8c1fb3d5c98e9/pythonic-toolbox-1.1.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e4d0584c6d540a9dfd4930119f46a21ee60709dfd78d33b6fb5385647a7d570",
          "md5": "3e48b814633b780499e0b4f2439ba210",
          "sha256": "aacfbf11a3af3362e7d724e0ac18028680d4670e370da627d58cc375d00c9cf0"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.27-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e48b814633b780499e0b4f2439ba210",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13806,
        "upload_time": "2022-06-06T14:56:15",
        "upload_time_iso_8601": "2022-06-06T14:56:15.972358Z",
        "url": "https://files.pythonhosted.org/packages/0e/4d/0584c6d540a9dfd4930119f46a21ee60709dfd78d33b6fb5385647a7d570/pythonic_toolbox-1.1.27-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f79afaf553cbf51dbf2fe4d2d773f490cd04e12e594aff00fd87a1ab651da07d",
          "md5": "b625de37d3f41c083810fbf5ddadcbd2",
          "sha256": "ac4116f93c6427a1e951e16a4a7a4aff7ed889444dc4ae757d460e6a1b42592b"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.27.tar.gz",
        "has_sig": false,
        "md5_digest": "b625de37d3f41c083810fbf5ddadcbd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20921,
        "upload_time": "2022-06-06T14:56:40",
        "upload_time_iso_8601": "2022-06-06T14:56:40.999097Z",
        "url": "https://files.pythonhosted.org/packages/f7/9a/faf553cbf51dbf2fe4d2d773f490cd04e12e594aff00fd87a1ab651da07d/pythonic-toolbox-1.1.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfe14f0820f99baee303a579de763b2e7e6b0241a39556718a348c5d18898839",
          "md5": "ca6fe59aafd64a42040eba12af8fa451",
          "sha256": "f0d5518cd56599a4c46cc346cde52c2b44f848854f10a59f56ab98c4a2c32c6e"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.28-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca6fe59aafd64a42040eba12af8fa451",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13798,
        "upload_time": "2022-06-07T08:32:49",
        "upload_time_iso_8601": "2022-06-07T08:32:49.074715Z",
        "url": "https://files.pythonhosted.org/packages/cf/e1/4f0820f99baee303a579de763b2e7e6b0241a39556718a348c5d18898839/pythonic_toolbox-1.1.28-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4d2f11a53cba1dc5c0d8ba4fb1e0e009403cf5da139ffa63320c9718b75e87a",
          "md5": "ce87298e18cae6a550f532637fd9e10f",
          "sha256": "5e383fd0fd805ec1e045c3ad3772428995437b3946d812a4f83b5f31aa7705e9"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.28.tar.gz",
        "has_sig": false,
        "md5_digest": "ce87298e18cae6a550f532637fd9e10f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20928,
        "upload_time": "2022-06-07T08:32:25",
        "upload_time_iso_8601": "2022-06-07T08:32:25.045048Z",
        "url": "https://files.pythonhosted.org/packages/d4/d2/f11a53cba1dc5c0d8ba4fb1e0e009403cf5da139ffa63320c9718b75e87a/pythonic-toolbox-1.1.28.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8265edf05cd855e030818ba712d36be6ce2078965ab293c2eb0ce4c77a1d3d5",
          "md5": "db21ab4e41cb292b6868c0c3436946bd",
          "sha256": "b582b484203aa08270a6ed97cd3c1c658b5f228aa4ad6ffc028dd9ab5755d4a7"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.29-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db21ab4e41cb292b6868c0c3436946bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13994,
        "upload_time": "2022-06-16T08:52:42",
        "upload_time_iso_8601": "2022-06-16T08:52:42.785877Z",
        "url": "https://files.pythonhosted.org/packages/f8/26/5edf05cd855e030818ba712d36be6ce2078965ab293c2eb0ce4c77a1d3d5/pythonic_toolbox-1.1.29-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58bd8cb18c486e06d0ece07960db363d42cebb736684eec20d71b4103e35d66d",
          "md5": "e05f693d378ed0c9417a0c36b10fc56c",
          "sha256": "fc5cfc569f287217bc29e77c75f6bf0423dd1729bd6baf407e6a2d2a64488177"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.29.tar.gz",
        "has_sig": false,
        "md5_digest": "e05f693d378ed0c9417a0c36b10fc56c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21444,
        "upload_time": "2022-06-16T08:53:05",
        "upload_time_iso_8601": "2022-06-16T08:53:05.924942Z",
        "url": "https://files.pythonhosted.org/packages/58/bd/8cb18c486e06d0ece07960db363d42cebb736684eec20d71b4103e35d66d/pythonic-toolbox-1.1.29.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42f4afcc87c7d3817ecf1c60fae66b26cbe87c704057d8f40423b88228076833",
          "md5": "0c6596afdbaed1cab35ec0b071808bc4",
          "sha256": "fc737be7444c58ef0b79f7b9e3ca080829e494d4e80b2c66b78a1790b20f1aab"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0c6596afdbaed1cab35ec0b071808bc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4034,
        "upload_time": "2021-12-29T06:25:24",
        "upload_time_iso_8601": "2021-12-29T06:25:24.785406Z",
        "url": "https://files.pythonhosted.org/packages/42/f4/afcc87c7d3817ecf1c60fae66b26cbe87c704057d8f40423b88228076833/pythonic-toolbox-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55309b3aa7188db8291e83836351c364b7116eb434cc298862f061bd39b1be7a",
          "md5": "62f7083a7931e04d5020e3134c4a7739",
          "sha256": "31d15d628c726e74d23a16fd0420cf36fd95d03ad7d6631955eace4492b4a16f"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.30-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62f7083a7931e04d5020e3134c4a7739",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24494,
        "upload_time": "2022-06-22T10:32:51",
        "upload_time_iso_8601": "2022-06-22T10:32:51.356599Z",
        "url": "https://files.pythonhosted.org/packages/55/30/9b3aa7188db8291e83836351c364b7116eb434cc298862f061bd39b1be7a/pythonic_toolbox-1.1.30-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bec620e181e30effb0cedd1d860bb9cd0a088c997664134b885e70e523a74970",
          "md5": "c1f4c9cc13e327e965e5486513dbe681",
          "sha256": "d690754d80b45ba84334efbbfa1273e19f0cdd066cb9077596a94c93dab8c969"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.30.tar.gz",
        "has_sig": false,
        "md5_digest": "c1f4c9cc13e327e965e5486513dbe681",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42208,
        "upload_time": "2022-06-22T10:32:23",
        "upload_time_iso_8601": "2022-06-22T10:32:23.066844Z",
        "url": "https://files.pythonhosted.org/packages/be/c6/20e181e30effb0cedd1d860bb9cd0a088c997664134b885e70e523a74970/pythonic-toolbox-1.1.30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ed41bd2bb0a16afb24abac6fc5de8ab55135d79c05bab2237c3be14378d597b",
          "md5": "9127397d8e08582c7bf7b41b329b05fe",
          "sha256": "359f2873fed8643c826224559a43e2f184cc04b15060393b0f9237f9d8ee0943"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.31-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9127397d8e08582c7bf7b41b329b05fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25082,
        "upload_time": "2022-07-14T06:53:22",
        "upload_time_iso_8601": "2022-07-14T06:53:22.362230Z",
        "url": "https://files.pythonhosted.org/packages/9e/d4/1bd2bb0a16afb24abac6fc5de8ab55135d79c05bab2237c3be14378d597b/pythonic_toolbox-1.1.31-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d89022c63a7188263f5ba636985b7a14d7d8383dc05d0d943c2cc86df21808d",
          "md5": "5d871117a624e0a683bcd86c91fdfa5e",
          "sha256": "b6cf08912fad4aae8807781990c0400e0f535baba476cda8e510b70134917d5a"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.31.tar.gz",
        "has_sig": false,
        "md5_digest": "5d871117a624e0a683bcd86c91fdfa5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43927,
        "upload_time": "2022-07-14T06:53:44",
        "upload_time_iso_8601": "2022-07-14T06:53:44.113446Z",
        "url": "https://files.pythonhosted.org/packages/2d/89/022c63a7188263f5ba636985b7a14d7d8383dc05d0d943c2cc86df21808d/pythonic-toolbox-1.1.31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01f13af384e479d859e938b0fa938b94f36f2d72bcf013f86d8e464591cd239e",
          "md5": "0b5de3bdc6db2780abf312f0f5f7c432",
          "sha256": "706b24e83d44625cdd488a1076b76bbd941e6e87d8ca3ec3b280b1562ddb0391"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.32-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b5de3bdc6db2780abf312f0f5f7c432",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25830,
        "upload_time": "2022-08-03T09:16:36",
        "upload_time_iso_8601": "2022-08-03T09:16:36.770995Z",
        "url": "https://files.pythonhosted.org/packages/01/f1/3af384e479d859e938b0fa938b94f36f2d72bcf013f86d8e464591cd239e/pythonic_toolbox-1.1.32-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9142433823bfa7575bd20b690eea93468274d4957e8fd37297383b375322a46b",
          "md5": "bb59a00a2986620c409301a2fe1ad67f",
          "sha256": "b1d02ba4cf9f0d41949a6734c6333750e7fc549b18d57569fdc2271c741e7282"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.32.tar.gz",
        "has_sig": false,
        "md5_digest": "bb59a00a2986620c409301a2fe1ad67f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45348,
        "upload_time": "2022-08-03T09:16:08",
        "upload_time_iso_8601": "2022-08-03T09:16:08.264470Z",
        "url": "https://files.pythonhosted.org/packages/91/42/433823bfa7575bd20b690eea93468274d4957e8fd37297383b375322a46b/pythonic-toolbox-1.1.32.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f81c0252253da8f88166fce396c801932a9743efd3a4047ffbffd48292710a9e",
          "md5": "58e2b31b99424734da9cb691da8dc993",
          "sha256": "74504c6f356b803988a3fec28e87a4da2a78ae62f3403c071efc30745f3703c0"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.33-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58e2b31b99424734da9cb691da8dc993",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30063,
        "upload_time": "2022-08-03T09:58:41",
        "upload_time_iso_8601": "2022-08-03T09:58:41.973785Z",
        "url": "https://files.pythonhosted.org/packages/f8/1c/0252253da8f88166fce396c801932a9743efd3a4047ffbffd48292710a9e/pythonic_toolbox-1.1.33-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c09bac294f7ea6f5bcbf1c85ff767d7331cf5f20327868b6f9efe26982d8a64",
          "md5": "413b41667d0eca1e33474d4ad1c70fd5",
          "sha256": "f427bcaa5d3756f0dd29f4383bae33be869c32130627c8a21a888e51b81f8c6b"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.33.tar.gz",
        "has_sig": false,
        "md5_digest": "413b41667d0eca1e33474d4ad1c70fd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49646,
        "upload_time": "2022-08-03T09:59:06",
        "upload_time_iso_8601": "2022-08-03T09:59:06.608886Z",
        "url": "https://files.pythonhosted.org/packages/4c/09/bac294f7ea6f5bcbf1c85ff767d7331cf5f20327868b6f9efe26982d8a64/pythonic-toolbox-1.1.33.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cacf981b3546144b53470c24bf543c273dc235a2ab7d107c2565a0bf7a036922",
          "md5": "6621302d95f0d60dce53ca33abe6f8d1",
          "sha256": "0a7d25261ef7c0aff31f6192900f65456b51f00f0efc4b10e69b93de274dc7c1"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.34-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6621302d95f0d60dce53ca33abe6f8d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30360,
        "upload_time": "2022-09-26T08:46:16",
        "upload_time_iso_8601": "2022-09-26T08:46:16.096677Z",
        "url": "https://files.pythonhosted.org/packages/ca/cf/981b3546144b53470c24bf543c273dc235a2ab7d107c2565a0bf7a036922/pythonic_toolbox-1.1.34-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2f80534b28f023a3d492f41a34ab44de56519fcddcd908f4433f601bc61927b",
          "md5": "ef1a86e2ed70c32e7142bb4ba64f3260",
          "sha256": "0bd13f7e4bdf494c5213b5302d020869a14b4b3031db33cdadb3504e132e3e8e"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.34.tar.gz",
        "has_sig": false,
        "md5_digest": "ef1a86e2ed70c32e7142bb4ba64f3260",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50530,
        "upload_time": "2022-09-26T08:45:44",
        "upload_time_iso_8601": "2022-09-26T08:45:44.275731Z",
        "url": "https://files.pythonhosted.org/packages/a2/f8/0534b28f023a3d492f41a34ab44de56519fcddcd908f4433f601bc61927b/pythonic-toolbox-1.1.34.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "775dae4afdb4a19d935750477842d5a3b4922653870bc891fa70f0fcc8f75770",
          "md5": "146a0206c3bfea6286dac4ab5211ba13",
          "sha256": "21ed74ba058a84dbd4e2b0ce4695aca07ea4eebbdd983a772b37b4876be0ed6a"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.35-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "146a0206c3bfea6286dac4ab5211ba13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30585,
        "upload_time": "2022-10-26T10:56:51",
        "upload_time_iso_8601": "2022-10-26T10:56:51.053262Z",
        "url": "https://files.pythonhosted.org/packages/77/5d/ae4afdb4a19d935750477842d5a3b4922653870bc891fa70f0fcc8f75770/pythonic_toolbox-1.1.35-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0662ad0e7ac99acc2cd687525c98cf1251c9d84efebc4478b42fb890f9e6842a",
          "md5": "bfde9e37bbf085334d996ee261cb5a18",
          "sha256": "27c9fa1b09811a95a6eea309f1f55196ca9c91baa018113c4d5f4607ffb8fb73"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.35.tar.gz",
        "has_sig": false,
        "md5_digest": "bfde9e37bbf085334d996ee261cb5a18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51079,
        "upload_time": "2022-10-26T10:57:16",
        "upload_time_iso_8601": "2022-10-26T10:57:16.598214Z",
        "url": "https://files.pythonhosted.org/packages/06/62/ad0e7ac99acc2cd687525c98cf1251c9d84efebc4478b42fb890f9e6842a/pythonic-toolbox-1.1.35.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25067937bdeafede7069c21461a29563b8b7f43807a0031c9479d32cd1d04574",
          "md5": "3485a10948e13be93ad1be410a1829d4",
          "sha256": "7b91f7e0db1a598827c61a9fbdc1743fa875266d3eee1ac80b5700abd4cd0777"
        },
        "downloads": -1,
        "filename": "pythonic_toolbox-1.1.36-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3485a10948e13be93ad1be410a1829d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30912,
        "upload_time": "2023-01-18T09:37:09",
        "upload_time_iso_8601": "2023-01-18T09:37:09.874259Z",
        "url": "https://files.pythonhosted.org/packages/25/06/7937bdeafede7069c21461a29563b8b7f43807a0031c9479d32cd1d04574/pythonic_toolbox-1.1.36-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e2ea71e6a099134120e30377c5ffb9c1f1e04c7efe2a06b877063785567f3c3",
          "md5": "52c9b29dadf9f33b3a1b69582f9ae7d3",
          "sha256": "69100cceba22576596d7637af21b8c0993b42d3e59816ae2c5cf143e3e9292d8"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.36.tar.gz",
        "has_sig": false,
        "md5_digest": "52c9b29dadf9f33b3a1b69582f9ae7d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52083,
        "upload_time": "2023-01-18T09:36:45",
        "upload_time_iso_8601": "2023-01-18T09:36:45.859708Z",
        "url": "https://files.pythonhosted.org/packages/0e/2e/a71e6a099134120e30377c5ffb9c1f1e04c7efe2a06b877063785567f3c3/pythonic-toolbox-1.1.36.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b56bee68f980eb8910b1e08a8ddf77959794a43607aa342a8062037a28fea54",
          "md5": "0050262bd73ece6eba9bf6c7a3dc4d40",
          "sha256": "123c14b05d5346245de822845cc745af9ac1ba7e9662b2b4f4becd2ca81d9ff4"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0050262bd73ece6eba9bf6c7a3dc4d40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4664,
        "upload_time": "2022-01-10T12:26:24",
        "upload_time_iso_8601": "2022-01-10T12:26:24.139852Z",
        "url": "https://files.pythonhosted.org/packages/0b/56/bee68f980eb8910b1e08a8ddf77959794a43607aa342a8062037a28fea54/pythonic-toolbox-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41c20c685f396a3691560f1470b6a1f58665d40377ee0b993eebc0550c634e6c",
          "md5": "d799a790d05c84db8e86c0bd9206bb68",
          "sha256": "decb5dd6ebb8eb62603284ec52f6b95ccdc53afb473242b587c8a31c1446b8b8"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d799a790d05c84db8e86c0bd9206bb68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5822,
        "upload_time": "2022-01-13T06:46:18",
        "upload_time_iso_8601": "2022-01-13T06:46:18.730424Z",
        "url": "https://files.pythonhosted.org/packages/41/c2/0c685f396a3691560f1470b6a1f58665d40377ee0b993eebc0550c634e6c/pythonic-toolbox-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "466df2b766cb58c8302168896777a1c54d5bba76d03d9356c86f6a91be719f93",
          "md5": "97de71bc2c03e62d0d6f7cfc0a40d495",
          "sha256": "0a83f27e71a99e6908cf79c7d54330025b088654c79eca2a3dd7fe9b4e4de811"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "97de71bc2c03e62d0d6f7cfc0a40d495",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5990,
        "upload_time": "2022-01-13T09:25:04",
        "upload_time_iso_8601": "2022-01-13T09:25:04.593676Z",
        "url": "https://files.pythonhosted.org/packages/46/6d/f2b766cb58c8302168896777a1c54d5bba76d03d9356c86f6a91be719f93/pythonic-toolbox-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2bdc0b2ffe6a6bb501361e537941e9720f39beabeb67c754410e2c4100b8784",
          "md5": "6af8d1be2c464ff406b9013584c93327",
          "sha256": "1d057018a149aa697db9fdbe91d82d4f4850de6bb2e1f1e51f01d233a9f0c876"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6af8d1be2c464ff406b9013584c93327",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7437,
        "upload_time": "2022-01-25T13:08:41",
        "upload_time_iso_8601": "2022-01-25T13:08:41.915817Z",
        "url": "https://files.pythonhosted.org/packages/a2/bd/c0b2ffe6a6bb501361e537941e9720f39beabeb67c754410e2c4100b8784/pythonic-toolbox-1.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53a46593e019d00f0258334b74d99ea09ea6cdb6187bdd14147c7b2f36515363",
          "md5": "0b0994339089f374bcba6e69807b0285",
          "sha256": "7def5d96e603bfd3d35ff7368aeece83d78c294953205f7888b29d7c7bb44ea2"
        },
        "downloads": -1,
        "filename": "pythonic-toolbox-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "0b0994339089f374bcba6e69807b0285",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6987,
        "upload_time": "2022-01-28T08:25:41",
        "upload_time_iso_8601": "2022-01-28T08:25:41.006638Z",
        "url": "https://files.pythonhosted.org/packages/53/a4/6593e019d00f0258334b74d99ea09ea6cdb6187bdd14147c7b2f36515363/pythonic-toolbox-1.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25067937bdeafede7069c21461a29563b8b7f43807a0031c9479d32cd1d04574",
        "md5": "3485a10948e13be93ad1be410a1829d4",
        "sha256": "7b91f7e0db1a598827c61a9fbdc1743fa875266d3eee1ac80b5700abd4cd0777"
      },
      "downloads": -1,
      "filename": "pythonic_toolbox-1.1.36-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3485a10948e13be93ad1be410a1829d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30912,
      "upload_time": "2023-01-18T09:37:09",
      "upload_time_iso_8601": "2023-01-18T09:37:09.874259Z",
      "url": "https://files.pythonhosted.org/packages/25/06/7937bdeafede7069c21461a29563b8b7f43807a0031c9479d32cd1d04574/pythonic_toolbox-1.1.36-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e2ea71e6a099134120e30377c5ffb9c1f1e04c7efe2a06b877063785567f3c3",
        "md5": "52c9b29dadf9f33b3a1b69582f9ae7d3",
        "sha256": "69100cceba22576596d7637af21b8c0993b42d3e59816ae2c5cf143e3e9292d8"
      },
      "downloads": -1,
      "filename": "pythonic-toolbox-1.1.36.tar.gz",
      "has_sig": false,
      "md5_digest": "52c9b29dadf9f33b3a1b69582f9ae7d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 52083,
      "upload_time": "2023-01-18T09:36:45",
      "upload_time_iso_8601": "2023-01-18T09:36:45.859708Z",
      "url": "https://files.pythonhosted.org/packages/0e/2e/a71e6a099134120e30377c5ffb9c1f1e04c7efe2a06b877063785567f3c3/pythonic-toolbox-1.1.36.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}