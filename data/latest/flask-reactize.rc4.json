{
  "info": {
    "author": "Julien Chomarat",
    "author_email": "juchomar@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# flask-reactize\n\n[![PyPI version](https://badge.fury.io/py/flask-reactize.svg)](https://badge.fury.io/py/flask-reactize)\n\nDeveloping a ReactJS application requires to use nodejs as back end server.\nWhat if you want to consume external APIs: how are you going to handle cross origin calls?\n\nIn modern days, as we are now, [React JS](https://reactjs.org/) offers many nice functionalities to develop an application easily, from any IDE.\n\nIn development mode, [React JS](https://reactjs.org/) requires [NodeJS](https://nodejs.org/en/) as a back end server. [NodeJS](https://nodejs.org/en/) maintains a connection between your development environment and your browser where the application is loaded so that:\n\n* it refreshes automatically when an update is made,\n* it sends in real time any error, warning that may have, in both the console and the developers toolbar of your browser of choice.\n\nFor production, you can compile your [React JS](https://reactjs.org/) application into static assets - you can then use any technology to serve those static files.\n\nHowever, if your [React JS](https://reactjs.org/) calls external APIs (whether there are customs, or public) you will face security issues.\n\n## Features\n\n*flask-reactize* is a boostrap to serve any [React JS](https://reactjs.org/) via a Python back-end, using [Flask](https://flask.palletsprojects.com/en/2.0.x/) as web framework. \n\nYour back-end web server can be anything: [Flask](https://flask.palletsprojects.com/en/2.0.x/) itself (although not recommended for production), [Uvicorn](https://www.uvicorn.org/), [Gunicorn](https://gunicorn.org/) etc.\n\nIn a nutshell, *flask-reactize* is a proxy for your [React JS](https://reactjs.org/) application and for your APIs:\n\n* It has a development mode: a nodejs server is transparently started by the Python back-end,\n* It supports production mode: this back-end can also serve your static assets,\n* It supports hot reload while developing: changing the Python code or the React code will trigger a browser refresh,\n* It supports proxying multiple APIs via specific routes.\n\n## Installation\n\nTo install with `pip`, run the following command in a terminal:\n\n```bash\n/> python -m pip install flask-reactize\n```\n\n## Usage\n\nIn order to use *flask-reactize*, you first need to have a [React JS](https://reactjs.org/) application (it if is not already the case).\n\nFollow the steps below to setup a sample demo site and activate *flask-reactize* to serve both the development application (via an underlying nodejs server) and the production application (compiled in static):\n\n```bash\n# Ensure you have nodejs and Python 3.8/3.10 on your environment\n# Create a React JS application\n/> npx create-react-app demo-app\n\n# Create the python bootstrap to serve this created app\n/> python -m pip install flask-reactize\n/> vi main.py\n```\n\nPaste the following snippet into your `main.py` file:\n\n```python\nimport os\nfrom flask import Flask\nfrom flask_reactize import FlaskReactize\n\napp = Flask(__name__)\n\nFlaskReactize(app).serve_react_app(\n        os.path.join(os.path.dirname(__file__), \"demo-app\")\n    )\n```\n\nSave your file and start your `Flask` server:\n\n```bash\n/> FLASK_APP=main flask run -p 8080 # Or whatever port you want to use\n```\n\nOpen your browser and navigate to [http://localhost:8080](http://localhost:8080)\n\nIf you want to try the compiled version of the [React JS](https://reactjs.org/) application, run the following:\n\n```bash\n# Compile the react app\n/> cd demo-app\n/> npm run build\n\n# Once the compilation is done, create a new python file\n/> cd ../ && vi main_static.py\n```\n\nPaste the following snippet into your `main_static.py` file:\n\n```python\nimport os\nfrom flask import Flask\nfrom flask_reactize import FlaskReactize\n\napp = Flask(__name__)\n\nFlaskReactize(app).serve_static(\n        static_folder=os.path.join(os.path.dirname(__file__), \"demo-app/build\")\n    )\n```\n\nSave your file and start your `Flask` server:\n\n```bash\n/> FLASK_APP=main_static flask run -p 8080 # Or whatever port you want to use\n```\n\nOpen your browser and navigate to [http://localhost:8080](http://localhost:8080)\n\n## More samples\n\nIf you want more samples, with both not compiled and compiled [React JS](https://reactjs.org/) served by the same file, or if you want to see the API proxy in action, navigate [there](https://github.com/Azure-samples/flask-reactize) and clone the project to either use the `sample` site or one of the `dockerFile` available.\n\n## API\n\n*flask-reactize* API is very minimaliste, you have two methods available to call.\n\nTo serve static files, use:\n\n```python\nfrom flask import Flask\nfrom flask_reactize import FlaskReactize\n\napp = Flask(__name__)\n\nFlaskReactize(app).serve_static(\n        static_folder=\"Folder where the static assets are\",\n        proxy_api=\"Dictionary with proxied routes\n    )\n\n```\n\nTo serve the application in developer mode, use:\n\n```python\nfrom flask import Flask\nfrom flask_reactize import FlaskReactize\n\napp = Flask(__name__)\n\nFlaskReactize(app).serve_react_app(\n        source_react_folder=\"Folder where the react sources are\",\n        port=\"Port number to start the React app on. Optional, default 3005\",\n        proxy_api=\"Dictionary with proxied routes\n    )\n\n```\n\nEach method can take a `dict` called `proxy_api` in order to route API calls from the [React JS](https://reactjs.org/) to the remote endpoint to avoid security issue.\n\nLet's say your remote endpoint is `http://some-api/api` where, for instance, you get a users list. Your endpoint in your code would be `http://some-api/api/users`.\n\nTo proxy that endpoint you'll need to create a dict and pass it to one of the method of the `FlaskReactize` you are using:\n\n```python\nfrom flask import Flask\nfrom flask_reactize import FlaskReactize\n\napp = Flask(__name__)\n\nproxy_api = {\n    \"/someApi\": \"http://some-api/api\"\n}\n\nFlaskReactize(app).serve_react_app(\n        source_react_folder=\"Folder where the react sources are\",\n        port=\"Port number to start the React app on. Optional, default 3005\",\n        proxy_api=\"Dictionary with proxied routes\n    )\n\n```\n\nThen, in your React code (client code) you can call the following endoint\n\n```javascript\nonst usersListEndpoint = \"/someApi/users\";\n\nconst getUsers = async () => {\n\n  return await fetch(usersListEndpoint, {\n      method: \"GET\",\n      headers:  {\n          'Content-Type': 'application/json'\n      }\n    })\n};\n```\n\n`/someApi/users` will be processed by the Python application, replaced with `http://some-api/api/users` and called. The output of the remote endpoint will be sent *as it is* to the client.\n\nMore info and sample code can be found on [Github](https://github.com/azure-samples/flask-reactize).\n\n## Known limitation\n\nAs of today:\n\n* *flask-reactize* does not support calling protected APIs.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure-samples/flask-reactize",
    "keywords": "python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-reactize",
    "package_url": "https://pypi.org/project/flask-reactize/",
    "platform": null,
    "project_url": "https://pypi.org/project/flask-reactize/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Azure-samples/flask-reactize/issues",
      "Homepage": "https://github.com/Azure-samples/flask-reactize"
    },
    "release_url": "https://pypi.org/project/flask-reactize/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Serve React JS application from a Flask application.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13150966,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96cdd7cf1adb6ff775f43c92b5c1cbc90814f58a9aabb45c6f2fd2a9abe29e98",
          "md5": "7f5ebab501b30bc9bb8aec7f83648d56",
          "sha256": "1b28f924fb0dc5b3f6e7cdc5c1101045dd3e4afdb70686b8ccd4443a48f7e554"
        },
        "downloads": -1,
        "filename": "flask-reactize-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f5ebab501b30bc9bb8aec7f83648d56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9062,
        "upload_time": "2022-03-11T16:05:51",
        "upload_time_iso_8601": "2022-03-11T16:05:51.910075Z",
        "url": "https://files.pythonhosted.org/packages/96/cd/d7cf1adb6ff775f43c92b5c1cbc90814f58a9aabb45c6f2fd2a9abe29e98/flask-reactize-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c817229f69534f13e654610fb7ee7d33af19759c5cab62c041eaf3b4e06aac91",
          "md5": "69cb743224a377e882a1e5603957d9c8",
          "sha256": "ce01e47879be39fb97840855311bb1d5ea06ad4d6e87af635f58552204606827"
        },
        "downloads": -1,
        "filename": "flask-reactize-1.0.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "69cb743224a377e882a1e5603957d9c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8341,
        "upload_time": "2021-12-09T15:11:10",
        "upload_time_iso_8601": "2021-12-09T15:11:10.696649Z",
        "url": "https://files.pythonhosted.org/packages/c8/17/229f69534f13e654610fb7ee7d33af19759c5cab62c041eaf3b4e06aac91/flask-reactize-1.0.0a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a14b6345b3eb5013174bb26cf5a61237e22286651bd87220c5c6df11fcad93bb",
          "md5": "26be07ea322df329bf34aae7f1cf81e5",
          "sha256": "fb797535deca18ffff38dff8d4b99701e3d57691f543e94df64e0d4693c2c635"
        },
        "downloads": -1,
        "filename": "flask-reactize-1.0.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "26be07ea322df329bf34aae7f1cf81e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8496,
        "upload_time": "2021-12-10T12:36:04",
        "upload_time_iso_8601": "2021-12-10T12:36:04.218729Z",
        "url": "https://files.pythonhosted.org/packages/a1/4b/6345b3eb5013174bb26cf5a61237e22286651bd87220c5c6df11fcad93bb/flask-reactize-1.0.0a3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8eb5289706f151241e48b3fbc79a1a678d252c638beda6b9132be20768cc795f",
          "md5": "0d1e4ee6edcaa122e1f5ce55741fba9a",
          "sha256": "2ffc06e9579bb5c61b1c3d6606a3c41eba6637a7770892cfd5e0b0d82d498bd5"
        },
        "downloads": -1,
        "filename": "flask-reactize-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0d1e4ee6edcaa122e1f5ce55741fba9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9052,
        "upload_time": "2022-03-11T16:07:50",
        "upload_time_iso_8601": "2022-03-11T16:07:50.157062Z",
        "url": "https://files.pythonhosted.org/packages/8e/b5/289706f151241e48b3fbc79a1a678d252c638beda6b9132be20768cc795f/flask-reactize-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8eb5289706f151241e48b3fbc79a1a678d252c638beda6b9132be20768cc795f",
        "md5": "0d1e4ee6edcaa122e1f5ce55741fba9a",
        "sha256": "2ffc06e9579bb5c61b1c3d6606a3c41eba6637a7770892cfd5e0b0d82d498bd5"
      },
      "downloads": -1,
      "filename": "flask-reactize-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0d1e4ee6edcaa122e1f5ce55741fba9a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 9052,
      "upload_time": "2022-03-11T16:07:50",
      "upload_time_iso_8601": "2022-03-11T16:07:50.157062Z",
      "url": "https://files.pythonhosted.org/packages/8e/b5/289706f151241e48b3fbc79a1a678d252c638beda6b9132be20768cc795f/flask-reactize-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}