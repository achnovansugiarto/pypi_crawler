{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Aroma DL-Framework\nAroma is a deep learning framework implemented in python\n\n## Install\n```\npip insall pyaroma\n```\n\n## Dependencies \n```\npip install -r requirements.txt \n```\n\nNOTE: you need to `pip install kaggle` so you need provide kaggle.json file in your environment, check this [link](https://www.kaggle.com/docs/api)\n\n## Design\nAroma is designed based on 5 modules:\n\n- [**nn module**](src/nn/): which contains the core modules of the framework such as layers, activations, losses, parameters, forward and backward modules\n\n- [**optim module**](src/optim/): which contains the optimizers for updating the weights (NOTE: currently supporting just Adam and SGD)\n\n- [**eval module**](src/eval/): which contains the evaluation metrices for the model\n\n- [**vis module**](src/vis/): which contains the visualization module for live loss update & others\n\n- [**utils module**](src/utils/): which contains the dataloader that process data for training and validation and support auto download for mnist dataset from [kaggle](https://www.kaggle.com/c/digit-recognizer), and others helper classes and functions for the framework\n\n\n## Demo\n```python\nfrom nn.model import Model\nfrom nn.activations import *\nfrom nn.layers import *\nfrom nn.losses import *\nfrom optim.optimizers import Adam, SGD\nfrom utils.dataloader import DataLoader\nfrom eval.evaluation import Evaluation\nfrom viz.visualization import Visualization\nfrom utils.transforms import Transform\nfrom tqdm import tqdm\n\nINPUT_FEATURE = 784\n\ndata_loader = DataLoader(batch_size=64, dataset_path=\"../\")\n\n# Training\nX_train, y_train = data_loader.get_train_data()\ntrans = Transform()\nX_train = trans.normalize(X_train)\nbatches = data_loader.get_batched_data(X_train, y_train)\n\n# Validation\nX_val, Y_val = data_loader.get_validation_data()\nX_val = trans.normalize(X_val)\n\n\nmodel = Model([Linear(INPUT_FEATURE,128, init_type='xavier'),\n               ReLU(),\n               Linear(128,64, init_type='xavier'),\n               ReLU(),\n               Linear(64,32, init_type='xavier'),\n               ReLU(),\n               Linear(32,16, init_type='xavier'),\n               ReLU(),\n               Linear(16,10, init_type='xavier'),\n               Softmax()], loss=NLLLoss(), optimizer=Adam(lr=0.001))\n\nepoch = 16\n\nvis = Visualization()\n\nfor i in range(epoch):\n    for X,Y in tqdm(batches):\n        y_pred = model.forward(X)\n        loss = model.compute_cost(Y, y_pred)\n        model.backward()\n        model.step()\n    vis.plot_live_update(xlabel=\"Epoch No.\", x=i + 1, ylabel=\"Loss\", y=loss)\n\nvis.pause_figure()\n\nmodel.save_model()\n\n# Evaluating model\nPred_ = model.predict(X_val)\nPred_ = np.argmax(Pred_, axis=0)\nY_val = Y_val.T.squeeze()\n\neval = Evaluation(Y_val, Pred_, average='weighted')\nacc = eval.compute_accuracy()\nprec = eval.compute_precision()\nrecall = eval.compute_recall()\nf1_score = eval.compute_f1_score()\nconf_mat = eval.compute_confusion_mat()\nprint(\"Accuracy: \",acc,\"Precision: \",prec,\"Recall: \",recall,\"F1_Score: \",f1_score)   \n\nvis.plot_confusion_matrix(conf_mat)\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyaroma",
    "package_url": "https://pypi.org/project/pyaroma/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyaroma/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyaroma/0.1/",
    "requires_dist": [
      "numpy (~=1.19)",
      "matplotlib (~=3.3)",
      "pandas (~=1.1)",
      "kaggle (~=1.5)",
      "seaborn (~=0.11)",
      "tqdm (>=4.50) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A Framework to for developing Deep Leanring models",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9217351,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aefc3e23985f0399cb9714b63c75736b896329c415b379a529709dff7989dd52",
          "md5": "00249f7d0fd5c7770f14d049c5cc2a72",
          "sha256": "66c8e902faddf2e1a0f7da0e7b5a65868a448212703fcad0ea065e894d9fc9e3"
        },
        "downloads": -1,
        "filename": "pyaroma-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00249f7d0fd5c7770f14d049c5cc2a72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18367,
        "upload_time": "2021-01-24T18:43:13",
        "upload_time_iso_8601": "2021-01-24T18:43:13.380748Z",
        "url": "https://files.pythonhosted.org/packages/ae/fc/3e23985f0399cb9714b63c75736b896329c415b379a529709dff7989dd52/pyaroma-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e74ea25a22f87ea3983d1d36734f175a22ec2e721c82bac93870defd05e41367",
          "md5": "b04f3a742ba05c38b5a7b4ba97c3e2de",
          "sha256": "6c2d3a6ac86420c594a8dff2aa5f4ef7f9ae3a39acb229f0180abd37689f1029"
        },
        "downloads": -1,
        "filename": "pyaroma-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b04f3a742ba05c38b5a7b4ba97c3e2de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16336,
        "upload_time": "2021-01-24T18:43:15",
        "upload_time_iso_8601": "2021-01-24T18:43:15.077250Z",
        "url": "https://files.pythonhosted.org/packages/e7/4e/a25a22f87ea3983d1d36734f175a22ec2e721c82bac93870defd05e41367/pyaroma-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aefc3e23985f0399cb9714b63c75736b896329c415b379a529709dff7989dd52",
        "md5": "00249f7d0fd5c7770f14d049c5cc2a72",
        "sha256": "66c8e902faddf2e1a0f7da0e7b5a65868a448212703fcad0ea065e894d9fc9e3"
      },
      "downloads": -1,
      "filename": "pyaroma-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "00249f7d0fd5c7770f14d049c5cc2a72",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18367,
      "upload_time": "2021-01-24T18:43:13",
      "upload_time_iso_8601": "2021-01-24T18:43:13.380748Z",
      "url": "https://files.pythonhosted.org/packages/ae/fc/3e23985f0399cb9714b63c75736b896329c415b379a529709dff7989dd52/pyaroma-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e74ea25a22f87ea3983d1d36734f175a22ec2e721c82bac93870defd05e41367",
        "md5": "b04f3a742ba05c38b5a7b4ba97c3e2de",
        "sha256": "6c2d3a6ac86420c594a8dff2aa5f4ef7f9ae3a39acb229f0180abd37689f1029"
      },
      "downloads": -1,
      "filename": "pyaroma-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b04f3a742ba05c38b5a7b4ba97c3e2de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16336,
      "upload_time": "2021-01-24T18:43:15",
      "upload_time_iso_8601": "2021-01-24T18:43:15.077250Z",
      "url": "https://files.pythonhosted.org/packages/e7/4e/a25a22f87ea3983d1d36734f175a22ec2e721c82bac93870defd05e41367/pyaroma-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}