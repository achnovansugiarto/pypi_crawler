{
  "info": {
    "author": "",
    "author_email": "Andrew Spangler <AndrewSpangler@users.noreply.github.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Console",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# py_simple_morse_code_raspi 0.0.5<a name=\"mark0\"></a>\r\n\r\n![Morse Encoder](https://raw.githubusercontent.com/AndrewSpangler/py_simple_morse_code/main/docu/text_to_morse.png)\r\n\r\n![Morse Decoder](https://raw.githubusercontent.com/AndrewSpangler/py_simple_morse_code/main/docu/morse_to_text.png)\r\n\r\n![Live Decoder](https://raw.githubusercontent.com/AndrewSpangler/py_simple_morse_code/main/docu/live_decoder.png)\r\n\r\n- [About](#mark1)\r\n- [Installation](#mark2)\r\n- [Requirements](#mark3)\r\n- [GUI Usage](#mark4)\r\n- [Module Usage](#mark5)\r\n- [Classes](#mark6)\r\n\t- [SignalProcessor](#mark7)\r\n\t- [MorseCodeTranslator](#mark8)\r\n- [Functions](#mark9)\r\n\t- [encode_string_to_morse](#mark10)\r\n\t- [encode_string_to_beats](#mark11)\r\n\t- [encode_string_to_waveform](#mark12)\r\n\t- [encode_morse_to_beats](#mark13)\r\n\t- [encode_morse_to_waveform](#mark14)\r\n\t- [encode_beats_to_waveform](#mark15)\r\n\t- [decode_morse_to_string](#mark16)\r\n\t- [make_morse_visual_from_beats](#mark17)\r\n\t- [play_morse](#mark18)\r\n\t- [play_string](#mark19)\r\n\t- [play_waveform](#mark20)\r\n- [Changelog](#mark21)\r\n\t- [0.0.5](#mark22)\r\n\t- [0.0.4](#mark23)\r\n\t- [0.0.3](#mark24)\r\n\t- [0.0.2](#mark25)\r\n\t- [0.0.1](#mark26)\r\n\t- [0.0.0](#mark27)\r\n\r\n---\r\n\r\n# About<a name=\"mark1\"></a>[^](#mark0)\r\n\r\nA python module for interacting with morse code with live decoding feature.\r\n\r\nLive Decoder In Action: https://raw.githubusercontent.com/AndrewSpangler/py_simple_morse_code/main/docu/live_decoder.mp4\r\n\r\n# Installation<a name=\"mark2\"></a>[^](#mark0)\r\n\r\n```python\r\nRun `pip install py_simple_morse_code`\r\n```\r\n# Requirements<a name=\"mark3\"></a>[^](#mark0)\r\n\r\npyaudio\r\n\r\nnumpy\r\n\r\n# GUI Usage<a name=\"mark4\"></a>[^](#mark0)\r\n\r\nTo launch the gui, install via pip and run `python -m py_simple_morse_code`\r\n\r\n# Module Usage<a name=\"mark5\"></a>[^](#mark0)\r\n\r\n```python\r\nfrom py_simple_morse_code import SignalProcessor, MorseCodeTranslator\r\n\r\nsignal_processor = SignalProcessor(mic_index=0, min_tone=800, max_tone=1200)\r\ndecoder = MorseCodeTranslator(words_per_minute=10)\r\nlast_content = \"\"\r\ntry:\r\n    signal_processor.start_session()\r\n    print(\"Begin processing\")\r\n    while True:\r\n        decoder.update(signal_processor.process())\r\n        if not decoder.parsed_content == last_content:\r\n            last_content = decoder.parsed_content\r\n            print(last_content)\r\nexcept Exception as e:\r\n    print(\"End processing\")\r\n    signal_processor.end_session()\r\n    raise e\r\n```\r\n# Classes<a name=\"mark6\"></a>[^](#mark0)\r\n\r\n### SignalProcessor<a name=\"mark7\"></a>[^](#mark6)\r\n**Non-blocking CW signal processor. The .process() method returns true if a CW tone was found in the signal.**\r\n\r\n```py\r\nclass SignalProcessor(object):\r\n\tdef __init__(self, mic_index: int = 0, min_tone: int = 600, max_tone: int = 1500, sample_size: int = 512, sample_rate: int = 32000, high_pass_frequency: int = 4, low_pass_frequency: int = 10000):\r\n\t\t...\r\n\tdef end_session(self) -> None:\r\n\t\t\"\"\"Ends the audio stream. *Returns None*\"\"\"\r\n\tdef process(self) -> bool:\r\n\t\t\"\"\"Process a chunk of the audio stream from the buffer. *Returns None*\"\"\"\r\n\tdef start_session(self) -> None:\r\n\t\t\"\"\"Start the audio stream. *Returns None*\"\"\"\r\n```\r\n### MorseCodeTranslator<a name=\"mark8\"></a>[^](#mark6)\r\n**A low-level morse code translator. Inputs should be debounced / sanitized     before being passed to the .update(state:bool) method. Tolerance only affects     word-sep deadbeats to account for hesitation / early resumes between words.**\r\n\r\n```py\r\nclass MorseCodeTranslator(object):\r\n\tdef __init__(self, words_per_minute: int = 24, debounce_time: float = 0.01, tolerance: int = 0):\r\n\t\t...\r\n\tdef update(self, state: bool) -> None:\r\n\t\t\"\"\"Call this whenever input state changes. Alternatively call this at a set frequency with the current state. *Returns None*\"\"\"\r\n```\r\n# Functions<a name=\"mark9\"></a>[^](#mark0)\r\n\r\n### encode_string_to_morse<a name=\"mark10\"></a>[^](#mark9)\r\n> **Encodes text to morse code dots and dashes. *Returns a string***\r\n> \r\n```python\r\ndef encode_string_to_morse(in_str: str, short_char: str = '.', long_char: str = '-', sep_char: str = ' ', replace_on_unknown: str = '?', verbose: bool = True) -> str:\r\n> \t...\r\n```\r\n### encode_string_to_beats<a name=\"mark11\"></a>[^](#mark9)\r\n> **Converts a plaintext string to a beats list. *Returns a list of bools***\r\n> \r\n```python\r\ndef encode_string_to_beats(in_str: str, verbose: bool = True) -> list:\r\n> \t...\r\n```\r\n### encode_string_to_waveform<a name=\"mark12\"></a>[^](#mark9)\r\n> **Encode a plaintext string to a waveform. *Returns a float32 1-dimensional numpy array***\r\n> \r\n```python\r\ndef encode_string_to_waveform(in_str: str, tone: int = 1000, words_per_minute: int = 24, sample_rate: int = 32000, verbose: bool = True) -> numpy.ndarray:\r\n> \t...\r\n```\r\n### encode_morse_to_beats<a name=\"mark13\"></a>[^](#mark9)\r\n> **Converts dots and dashes to a beats list. *Returns a list of bools***\r\n> \r\n```python\r\ndef encode_morse_to_beats(morse: str, verbose: bool = True) -> list:\r\n> \t...\r\n```\r\n### encode_morse_to_waveform<a name=\"mark14\"></a>[^](#mark9)\r\n> **Encode a morse string to a waveform. *Returns a float32 1-dimensional numpy array***\r\n> \r\n```python\r\ndef encode_morse_to_waveform(morse: str, tone: int = 1000, words_per_minute: int = 24, sample_rate: int = 32000, verbose: bool = True) -> numpy.ndarray:\r\n> \t...\r\n```\r\n### encode_beats_to_waveform<a name=\"mark15\"></a>[^](#mark9)\r\n> **Encode a beats list into a waveform. *Returns a float32 1-dimensional numpy array***\r\n> \r\n```python\r\ndef encode_beats_to_waveform(beats: list, tone: int = 1000, words_per_minute: int = 24, sample_rate: int = 32000, verbose: bool = True, volume: float = 0.75, deadbeats: int = 0) -> numpy.ndarray:\r\n> \t...\r\n```\r\n### decode_morse_to_string<a name=\"mark16\"></a>[^](#mark9)\r\n> **Decodes morse dots and dashes to plaintext. *Returns a string***\r\n> \r\n```python\r\ndef decode_morse_to_string(morse: str, char_sep: str = ' ', word_sep: str = '  ', replace_on_unknown: bool = '?') -> str:\r\n> \t...\r\n```\r\n### make_morse_visual_from_beats<a name=\"mark17\"></a>[^](#mark9)\r\n> **Converts a beats list to a visual representation in string form     using block chars (unicode char 2588). *Returns a string***\r\n> \r\n```python\r\ndef make_morse_visual_from_beats(beats: list) -> str:\r\n> \t...\r\n```\r\n### play_morse<a name=\"mark18\"></a>[^](#mark9)\r\n> **Converts dots and dashes to a waveform and plays it on system speakers. *Returns None***\r\n> \r\n```python\r\ndef play_morse(morse: str, tone: int = 1000, words_per_minute: int = 24, sample_rate: int = 32000, verbose: bool = True) -> None:\r\n> \t...\r\n```\r\n### play_string<a name=\"mark19\"></a>[^](#mark9)\r\n> **Converts plaintext to a waveform and play it on system speakers. *Returns None***\r\n> \r\n```python\r\ndef play_string(in_str: str, tone: int = 1000, words_per_minute: int = 24, sample_rate: int = 32000, verbose: bool = True) -> None:\r\n> \t...\r\n```\r\n### play_waveform<a name=\"mark20\"></a>[^](#mark9)\r\n> **Plays a waveform. *Return None***\r\n> \r\n```python\r\ndef play_waveform(waveform: bytes, format=1, sample_rate=32000) -> None:\r\n> \t...\r\n```\r\n# Changelog<a name=\"mark21\"></a>[^](#mark0)\r\n\r\n## 0.0.5<a name=\"mark22\"></a>[^](#mark21)\r\n\r\nMake module more widely compatible by removing newer syntax.\r\n\r\n## 0.0.4<a name=\"mark23\"></a>[^](#mark21)\r\n\r\nFix PyPi page links\r\n\r\n## 0.0.3<a name=\"mark24\"></a>[^](#mark21)\r\n\r\nAdd example usage and images to readme and clean up typehints\r\n\r\n## 0.0.2<a name=\"mark25\"></a>[^](#mark21)\r\n\r\nMove __main__ module to src/py_simple_morse_code/__main__.py\r\n\r\n## 0.0.1<a name=\"mark26\"></a>[^](#mark21)\r\n\r\nFix __main__ module not being included in pip module.\r\n\r\n## 0.0.0<a name=\"mark27\"></a>[^](#mark21)\r\n\r\nCreate Project\r\n\r\n\r\n\r\nGenerated with [py_simple_readme](https://github.com/AndrewSpangler/py_simple_readme)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-simple-morse-code-raspi",
    "package_url": "https://pypi.org/project/py-simple-morse-code-raspi/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-simple-morse-code-raspi/",
    "project_urls": {
      "bug tracker": "https://GitHub.com/AndrewSpangler/py_simple_morse_code/issues",
      "documentation": "https://GitHub.com/AndrewSpangler/py_simple_morse_code/",
      "homepage": "https://GitHub.com/AndrewSpangler/py_simple_morse_code/",
      "repository": "https://GitHub.com/AndrewSpangler/py_simple_morse_code/"
    },
    "release_url": "https://pypi.org/project/py-simple-morse-code-raspi/0.0.5/",
    "requires_dist": [
      "pyaudio",
      "numpy"
    ],
    "requires_python": ">=3.7",
    "summary": "A python module for interacting with morse code with live decoding feature.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16518194,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f9994a03a1d67ea64f0b70fde00d2d8b64ac03e41f62e5a8129b94d820251e3",
          "md5": "24e5b688510783b6858ee7a2aba1923d",
          "sha256": "140425ac6d8b456e90ed28a964eb7a5e41cfd45346eab2311b835bcc38d4a970"
        },
        "downloads": -1,
        "filename": "py_simple_morse_code_raspi-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24e5b688510783b6858ee7a2aba1923d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41040,
        "upload_time": "2023-01-22T05:23:47",
        "upload_time_iso_8601": "2023-01-22T05:23:47.801661Z",
        "url": "https://files.pythonhosted.org/packages/1f/99/94a03a1d67ea64f0b70fde00d2d8b64ac03e41f62e5a8129b94d820251e3/py_simple_morse_code_raspi-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "162f72c571de42fca60b3db3548d6395afe1ebc847f80fe69718e683cb0dc0b1",
          "md5": "70b4dab4c92f12f43418f6238de7fdf0",
          "sha256": "6601eec075554a7a1901ce783e963a25a44266736cbc04317563656c9dfa6100"
        },
        "downloads": -1,
        "filename": "py_simple_morse_code_raspi-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "70b4dab4c92f12f43418f6238de7fdf0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 53267,
        "upload_time": "2023-01-22T05:23:50",
        "upload_time_iso_8601": "2023-01-22T05:23:50.347229Z",
        "url": "https://files.pythonhosted.org/packages/16/2f/72c571de42fca60b3db3548d6395afe1ebc847f80fe69718e683cb0dc0b1/py_simple_morse_code_raspi-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f9994a03a1d67ea64f0b70fde00d2d8b64ac03e41f62e5a8129b94d820251e3",
        "md5": "24e5b688510783b6858ee7a2aba1923d",
        "sha256": "140425ac6d8b456e90ed28a964eb7a5e41cfd45346eab2311b835bcc38d4a970"
      },
      "downloads": -1,
      "filename": "py_simple_morse_code_raspi-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "24e5b688510783b6858ee7a2aba1923d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 41040,
      "upload_time": "2023-01-22T05:23:47",
      "upload_time_iso_8601": "2023-01-22T05:23:47.801661Z",
      "url": "https://files.pythonhosted.org/packages/1f/99/94a03a1d67ea64f0b70fde00d2d8b64ac03e41f62e5a8129b94d820251e3/py_simple_morse_code_raspi-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "162f72c571de42fca60b3db3548d6395afe1ebc847f80fe69718e683cb0dc0b1",
        "md5": "70b4dab4c92f12f43418f6238de7fdf0",
        "sha256": "6601eec075554a7a1901ce783e963a25a44266736cbc04317563656c9dfa6100"
      },
      "downloads": -1,
      "filename": "py_simple_morse_code_raspi-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "70b4dab4c92f12f43418f6238de7fdf0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 53267,
      "upload_time": "2023-01-22T05:23:50",
      "upload_time_iso_8601": "2023-01-22T05:23:50.347229Z",
      "url": "https://files.pythonhosted.org/packages/16/2f/72c571de42fca60b3db3548d6395afe1ebc847f80fe69718e683cb0dc0b1/py_simple_morse_code_raspi-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}