{
  "info": {
    "author": "Joseph Ware",
    "author_email": "joseph.ware@diamond.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "python_bluesky_taskgraph\n===========================\n\n|code_ci| |docs_ci| |coverage| |pypi_version| |license|\n\nA library extending the Bluesky RunEngine to allow TaskGraphs to be run: TaskGraphs are intended to encourage\nparallelism and composability compared to Bluesky native plans by breaking plans into conditional blocks, or tasks.\n\nWork related to implementing a Task Graph runner (Decision Engine) in Bluesky, akin to the VMXi task graph runner in\nJython.\n\nThe decision engine plan is passed to the RunEngine, optionally by a ControlObject which constructs multiple TaskGraphs\naccording to either inbuilt logic or from a recipe involving an external source, and the RunEngine interrogates the plan\nas a Msg generator.\nA TaskGraph contains:\n\n1. A dictionary of plan to a list of plans it is known to be dependent on or else unable to be run concurrently with\n2. A dictionary of plan to list of strings, the names of the arguments it needs\n   We force this to be defined for the task graph (rather than by each task) to prevent accessing prior args\n   Multiple tasks may share an input argument name\n   An input argument may be overwritten later by the output of a task, so a graph should be defined such that if args\n   are going to be overwritten, the overwriting tasks should depend on any that require the previous value\n3. A dictionary of plan to a list of strings, the names of the outputs it will provide\n   We force this to be defined for the task graph (rather than by each task) to prevent overriding prior args\n   The output strings should be at most the length of the outputs of the task, else will be truncated\n   An output argument may overwrite a previous output or initial value, so care should be taken to either avoid this\n   behaviour or have any overwriting tasks depend on any tasks requiring the previous value\n\nThe DecisionEnginePlan is additionally passed a dictionary of string to any necessary initial conditions or known values\natits creation. e.g.\n- Beamline configurations, name etc.\n- Any devices that will be required for the graph\n\nDecision engine plans, their decision engines, the task graphs they are initialised with, and the tasks are intended to\nbe run once and then discarded.\n\nTask graphs can be composed of smaller task graphs using the depends_on function, or by simple addition of plans.\nGraph A + Graph B places every entry from each dictionary in Graph B into Graph A's, overwriting existing keys in A\nGraph A being dependent on Graph B is equivalent to every task within Graph A being dependent on every task in Graph B,\nthen Graph A = Graph A + Graph B. After depends_on or graph addition, Graph B should be discarded to prevent accidental\nrunning of tasks again, Graph A now contains all the information Task graphs should **not** contain the same task as\nanother graph other than these transient cases.\n\n\n============== ==============================================================\nPyPI           ``pip install python_bluesky_taskgraph``\nSource code    https://github.com/DiamondLightSource/python-bluesky-taskgraph\nDocumentation  https://DiamondLightSource.github.io/python_bluesky_taskgraph\nReleases       https://github.com/DiamondLightSource/python-bluesky-taskgraph/releases\n============== ==============================================================\n\n.. code:: python\n\n    # The TaskGraph plan can utilise the native Bluesky RunEngine: in Python 3.8 or\n    #  above\n    RE = RunEngine({})\n    # An example ControlObject, which could monitors the state of the beamline 'baton' and returns control when\n    #  required, or else restarts collection when the baton is free.\n    CO = UnattendedDataCollectionControlObject(RE)\n    CO.run_task_graphs()\n\n    # Or else, the RunEngine can run a decision_engine_plan, wrapping a TaskGraph\n    RE(decision_engine_plan(task_graph, variables or {}))\n\n\n.. |code_ci| image:: https://github.com/DiamondLightSource/python-bluesky-taskgraph/workflows/Code%20CI/badge.svg?branch=master\n    :target: https://github.com/DiamondLightSource/python-bluesky-taskgraph/actions?query=workflow%3A%22Code+CI%22\n    :alt: Code CI\n\n.. |docs_ci| image:: https://github.com/DiamondLightSource/python-bluesky-taskgraph/workflows/Docs%20CI/badge.svg?branch=master\n    :target: https://github.com/DiamondLightSource/python-bluesky-taskgraph/actions?query=workflow%3A%22Docs+CI%22\n    :alt: Docs CI\n\n.. |coverage| image:: https://codecov.io/gh/DiamondLightSource/python-bluesky-taskgraph/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/DiamondLightSource/python-bluesky-taskgraph\n    :alt: Test Coverage\n\n.. |pypi_version| image:: https://img.shields.io/pypi/v/python_bluesky_taskgraph.svg\n    :target: https://pypi.org/project/python_bluesky_taskgraph\n    :alt: Latest PyPI version\n\n.. |license| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :target: https://opensource.org/licenses/Apache-2.0\n    :alt: Apache License\n\n..\n    Anything below this line is used when viewing README.rst and will be replaced\n    when included in index.rst\n\nSee https://DiamondLightSource.github.io/python_bluesky_taskgraph for more detailed documentation.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DiamondLightSource/python-bluesky-taskgraph",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-bluesky-taskgraph",
    "package_url": "https://pypi.org/project/python-bluesky-taskgraph/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-bluesky-taskgraph/",
    "project_urls": {
      "Homepage": "https://github.com/DiamondLightSource/python-bluesky-taskgraph"
    },
    "release_url": "https://pypi.org/project/python-bluesky-taskgraph/0.1/",
    "requires_dist": [
      "bluesky",
      "ophyd",
      "typing",
      "black (==21.9b0) ; extra == 'dev'",
      "isort (>5.0) ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "flake8-isort ; extra == 'dev'",
      "sphinx-rtd-theme-github-versions ; extra == 'dev'",
      "pre-commit ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "A Library to add TaskGraph implementation of plans to Bluesky",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12837666,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccab4415a886b44aea4eb5693e488136dc69491913ca126c26eac8f666bd6f89",
          "md5": "8169be17133756573ceb409f35fa9264",
          "sha256": "d384167452d9ac7cf1e17c8e4136e48ae80b906bb2189a33582a0a1e0b667297"
        },
        "downloads": -1,
        "filename": "python_bluesky_taskgraph-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8169be17133756573ceb409f35fa9264",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23081,
        "upload_time": "2022-02-09T11:34:20",
        "upload_time_iso_8601": "2022-02-09T11:34:20.207859Z",
        "url": "https://files.pythonhosted.org/packages/cc/ab/4415a886b44aea4eb5693e488136dc69491913ca126c26eac8f666bd6f89/python_bluesky_taskgraph-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f29979f1b87b0471ab04e312347d831345e9e4e4bf136f0822dbc2fa60cb24a5",
          "md5": "06a9dde5b738b0b98a4a239266ebee38",
          "sha256": "5d286f79a84a21f10c8689315b831b2328574e777f0e2adaafa62681b75c211d"
        },
        "downloads": -1,
        "filename": "python_bluesky_taskgraph-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06a9dde5b738b0b98a4a239266ebee38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21267,
        "upload_time": "2022-02-09T11:34:21",
        "upload_time_iso_8601": "2022-02-09T11:34:21.738716Z",
        "url": "https://files.pythonhosted.org/packages/f2/99/79f1b87b0471ab04e312347d831345e9e4e4bf136f0822dbc2fa60cb24a5/python_bluesky_taskgraph-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccab4415a886b44aea4eb5693e488136dc69491913ca126c26eac8f666bd6f89",
        "md5": "8169be17133756573ceb409f35fa9264",
        "sha256": "d384167452d9ac7cf1e17c8e4136e48ae80b906bb2189a33582a0a1e0b667297"
      },
      "downloads": -1,
      "filename": "python_bluesky_taskgraph-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8169be17133756573ceb409f35fa9264",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 23081,
      "upload_time": "2022-02-09T11:34:20",
      "upload_time_iso_8601": "2022-02-09T11:34:20.207859Z",
      "url": "https://files.pythonhosted.org/packages/cc/ab/4415a886b44aea4eb5693e488136dc69491913ca126c26eac8f666bd6f89/python_bluesky_taskgraph-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f29979f1b87b0471ab04e312347d831345e9e4e4bf136f0822dbc2fa60cb24a5",
        "md5": "06a9dde5b738b0b98a4a239266ebee38",
        "sha256": "5d286f79a84a21f10c8689315b831b2328574e777f0e2adaafa62681b75c211d"
      },
      "downloads": -1,
      "filename": "python_bluesky_taskgraph-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "06a9dde5b738b0b98a4a239266ebee38",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 21267,
      "upload_time": "2022-02-09T11:34:21",
      "upload_time_iso_8601": "2022-02-09T11:34:21.738716Z",
      "url": "https://files.pythonhosted.org/packages/f2/99/79f1b87b0471ab04e312347d831345e9e4e4bf136f0822dbc2fa60cb24a5/python_bluesky_taskgraph-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}