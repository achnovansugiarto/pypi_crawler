{
  "info": {
    "author": "Sean Redmond",
    "author_email": "github-smr@sneakemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Akrophonobolos\n\nPython package for handling Ancient Athenian monetary values in\ntalents, drachmas and obols, including input and output in Greek\nacrophonic numerals (such as 𐅎, 𐅍, 𐅌, 𐅋, 𐅊, etc.)\n\nThe denominations of Ancient Athenian money were the _tálanton_\n(τάλαντον, or talent), the _drakhmḗ_ (δραχμή, or drachma), and the\n_obolós_ (ὀβολός, or obol). Six _oboloí_ made a _drakhmḗ_, and 6,000\n_drakhmaí_ a _tálanton_ (which was 57 lbs. of silver).\n\nLarge sums of money are found in forms like “1 _tálanton_ 813\n_drakhmaí_ 1½ _oboloí_.” Math with these figures can be very annoying,\nso Akrophonobolos simpfifies this.\n\n## Installation\n\n    pip install akrophonobolos\n    \n## Usage\n\nAkrophonobolos provides a class, `Khremata` (χρήματα, \"money\") and\nfunction for manipulating instances of this class.\n\n### Initializing\n\nAn instance of `Khremata` can be initialized in several different ways:\n\nWith a string that gives amounts with the abbreviations `t`, `d`, and\n`b` or `o`:\n\n    >>> import akrophonobolos as obol\n    >>> obol.Khremata(\"1t 813d 1.5b\")\n    Khremata (1t 813d 1½b [= 40879.5 obols])\n\nYou can use upper or lowercase letters, and spaces do not matter:\n\n    >>> obol.Khremata(\"1T 813D 1.5B\")\n    Khremata (1t 813d 1½b [= 40879.5 obols])\n\n    >>> obol.Khremata(\"1t813d1.5b\")\n    Khremata (1t 813d 1½b [= 40879.5 obols])\n    \nYou can use `o` for obols, but since this is too similar to a zero,\n`b` is better:\n\n    >>> obol.Khremata(\"1t 813d 1.5o\")\n    Khremata (1t 813d 1½b [= 40879.5 obols])\n\n    >>> obol.Khremata(\"1T 813D 1.5O\")\n    Khremata (1t 813d 1½b [= 40879.5 obols])\n\t\nInternally, the `Khremata` class stores the value as a (possibly\nfractional) number of _oboloí_, and this number can be used directly\nto initialize an instance:\n\n    >>> obol.Khremata(40879.5)\n    Khremata (1t 813d 1½b [= 40879.5 obols])\n\t\nFinally you can use a string of [Unicode Greek acrophonic\nnumerals](https://en.wikipedia.org/wiki/Ancient_Greek_Numbers_(Unicode_block)):\n\n    >>> obol.Khremata(\"Τ𐅅ΗΗΗΔ𐅂𐅂𐅂Ι𐅁\")\n    Khremata (1t 813d 1½b [= 40879.5 obols])\n    \n### Formatting\n\nThere are methods to format the value as an abbreviation, which is the\ndefault string representation:\n\n    >>> m = obol.Khremata(\"1t 813d 1.5b\")\n    >>> m.as_abbr()\n    '1t 813d 1½b'\n    >>> print(m)\n    1t 813d 1½b\n    \nIt can also be output as a phrase:\n\n    >>> m.as_phrase()\n    '1 talent, 813 drachmas, 1½ obols'\n    \nAnd as Greek numerals:\n\n    >>> m.as_greek()\n    'Τ𐅅ΗΗΗΔ𐅂𐅂𐅂Ι𐅁'\n    \n### Math\n\nYou can do basic math with instances of `Khremata`\n\n    >>> obol.Khremata(\"1t\") + obol.Khremata(\"3000d\")\n    Khremata (1t 3000d [= 54000.0 obols])\n    \n    >>> obol.Khremata(\"1t\") - obol.Khremata(\"3000d\")\n    Khremata (3000d [= 18000.0 obols])\n    \n    >>> obol.Khremata(\"1t\") * 2\n    Khremata (2t [= 72000.0 obols])\n    \n    >>> obol.Khremata(\"1t\") / 2\n    Khremata (3000d [= 18000.0 obols])\n\nComparisons:\n\n    >>> obol.Khremata(\"1t\") == obol.Khremata(\"1t\")\n    True\n    \n    >>> obol.Khremata(\"1t\") > obol.Khremata(\"3000d\")\n    True\n    \n    >>> obol.Khremata(\"1t\") < obol.Khremata(\"3000d\")\n    False\n    \nMost of these operators work both between two instance of `Khremata`\nand between a `Khremata` and anything that can be converted into a\n`Khremata`:\n\n    >>> obol.Khremata(\"1t\") + \"3000d\"\n    Khremata (1t 3000d [= 54000.0 obols])\n   \n    >>> obol.Khremata(\"1t\") - \"ΧΧΧ\"\n    Khremata (3000d [= 18000.0 obols])\n    \n    >>> obol.Khremata(\"1t\") == 36000\n    True\n    \n    >>> 18000.0 < obol.Khremata(\"1t\")\n    True\n    \nYou cannot multiply two instances of `Khremata` since \"talents\nsquared\" does not have any meaning (this raises an\n`UndefinedMonetaryOperation` error). If you divide a `Khremata` by a\n`Khremata` though the units cancel out and the operation returns a\nunitless `Fraction`:\n\n    >>> obol.Khremata(\"1500d\") / obol.Khremata(\"1t\")\n    Fraction(1, 4)\n    \n### Fractions, part 1\n\nAbove, we said that the `Khremata` class stores the value internally\nas a (possibly fractional) number of _oboloí_. The more correct way to\nstate that is that internally, the `Khremata` class stores the value,\nin _oboloí_, as a Python\n[Fraction](https://docs.python.org/3/library/fractions.html). You can\naccess this directly as the `b` property of the class. In many cases,\nof course, this fraction is equivalent to a whole number (with a\ndenominator of 1):\n\n    >>> m = obol.Khremata(\"100t\")\n    >>> m.b\n    Fraction(3600000, 1)\n    \nBut monetary sums could be recorded down to the quarter-obol:\n\n    >>> m = obol.Khremata(\"1t 1d 1.25b\")\n    >>> m.b\n    Fraction(144029, 4) \n    \nwhich is the `Fraction` form of 36,007.25 _oboloí_. Storing the value\nas a `Fraction` avoids some issues with floating point math and better\napproximates how Ancient Greeks did math, since they did not use\ndecimal numbers.\n\n\n### Loans and Interest\n\nFigures in _tálanta_, _drakhmaí_, and _oboloí_ are found in many\nancient Athenian inscriptions, and the most interesting of these\ninvolve loans, such as the so-called \"Logistai Inscription\" ([IG I³\n369](https://epigraphy.packhum.org/text/381)) which records loans\nfrom the money held in the Parthenon and temples of other gods to the\nAthenian state. Loans were made at simple interest, most commonly at\nthe rate of 1 _drakhmḗ_ per 5 _tálanta_ per day.\n\nAkrophonobolos provides functions for working with loans like this. To\nstart, you can calculate a more useful version of the rate. Given an\namount of principal, a number of days, and an amount of interest to be\nreturned, you get back the amount of simple interest to be added for\none day:\n\n    >>> obol.interest_rate(\"5t\", 1, \"1d\")\n    Fraction(1, 30000)\n    \nThat is, the interest is 1/30,000th of the principal per day.\n    \nFor any loan, the amount of interest is simply the principal times the\nrate times the term of the loan. If we borrowed 25 _tálanta_ for a\nyear at the common rate we would be expected to pay 1,825 _drakhmaí_ of\ninterest:\n\n    >>> rate = obol.interest_rate(\"5t\", 1, \"1d\")\n    >>> obol.Khremata(\"25t\") * rate * 365\n    Khremata (1825d [= 10950.0 obols])\n    \nOf course Akrophonobolos has a function for this:\n\n    >>> rate = obol.interest_rate(\"5t\", 1, \"1d\")\n    >>> obol.interest(obol.Khremata(\"25t\"), 365, rate)\n    Khremata (1825d [= 10950.0 obols])\n\n1/30000th is the default rate, so you can leave it out if that's\nthe rate you're using:\n\n    >>> obol.interest(obol.Khremata(\"25t\"), 365)\n    Khremata (1825d [= 10950.0 obols])\n    \nAnd instead of an instance of `Khremata` you can provide something that can be turned into a `Khremata`:\n\n    >>> obol.interest(\"25t\", 365)\n    Khremata (1825d [= 10950.0 obols])\n    \nIf you have the interest and the rate, you can use those to get the principal:\n\n    >>> obol.principal(\"1825d\", 365)\n    Khremata (25t [= 900000.0 obols])\n\t\nIf you have the principal and the interest, you can get the loan\nterm, in days:\n\n    >>> obol.loan_term(\"25t\", \"1825d\")\n    365\n    \nThis last scenario is what we usually find in the inscriptions. For\ninstance, line 7 of the Logistai Inscription records one loan as\n\n> 𐅊· τόκος τούτον ΤΤΧ𐅅ΗΗΗΗ𐅄ΔΔ\n\nor \"50 _tálanta_. Interest on this 2 _tálanta_ 1,970 _drakhmaí_.\" We\ncan plug these values into `loan_term()` and see the the loan was for\n1,397 days, just under 4 years:\n\n    >>> obol.loan_term(\"𐅊\", \"ΤΤΧ𐅅ΗΗΗΗ𐅄ΔΔ\")\n    1397\n    \n### Fractions, part 2: Rounding\n\nLine 88 of the Logistai Inscription records another loan as 3,418\n_drakhmaí_ 1 _obolós_, with interest of 1 _drakhmḗ_ 5½ _oboloí_:\n\n> ΧΧΧΗΗΗΗΔ𐅃𐅂𐅂𐅂Ι, τόκος τούτο 𐅂ΙΙΙΙΙ𐅁\n\nThis loan, it turns out, was for just 17 days.\n\n    >>> obol.loan_term(\"ΧΧΧΗΗΗΗΔ𐅃𐅂𐅂𐅂Ι\", \"𐅂ΙΙΙΙΙ𐅁\")\n    17\n    \nNow, if we want to double-check this:\n\n    >>> obol.interest(\"ΧΧΧΗΗΗΗΔ𐅃𐅂𐅂𐅂Ι\", 17)\n    Khremata (1d 5¾b [= 11.75 obols])\n    \nWe get an answer that is ¼ _obolós_ too high (11.75 instead of\n11.5). We do not know how the ancient Greeks did this math, how they\nrounded, or what kind of approximations they used. The smallest unit\nthey recorded was ¼ _obolós_, so in Akrohobolos the `interest()` and\n`principal()` functions round up to this by default. You can get an\nunrounded answer:\n\n    >>> obol.interest(\"ΧΧΧΗΗΗΗΔ𐅃𐅂𐅂𐅂Ι\", 17, roundup=False)\n    Khremata (1d 5b [= 11.621766666666666 obols])\n    \nWe can see what the precise fraction is:\n    \n    >>> precise = obol.interest(\"ΧΧΧΗΗΗΗΔ𐅃𐅂𐅂𐅂Ι\", 17, roundup=False)\n    >>> precise.b\n    Fraction(1635618250918339, 140737488355328)\n    \n1,635,618,250,918,339/140,737,488,355,328ths is a quite a\nfraction. Clearly the Greeks did some approximating. Maybe you can\nplay around with Akrophonobolos and figure out how they arrived at\n11.5 obols for this amount.\n\n`loan_term()` rounds to the nearest integer, but you can change this as well:\n\n\t>>> term = obol.loan_term(\"ΧΧΧΗΗΗΗΔ𐅃𐅂𐅂𐅂Ι\", \"𐅂ΙΙΙΙΙ𐅁\", roundoff=False)\n    >>> term\n    Fraction(345000, 20509)\n    >>> float(term)\n    16.82188307572285\n    \n## Command Line Scripts\n\nAkrophonobolos provides two command line scripts: `obol` for\nconverting and simple math, and `logistes` for working with loans and\ninterest\n\n### `obol`\n\nIf you give `obol` one or more amounts in either akrophonic numerals\nor abbreviated with \"t\", \"d\" and \"b\" (or \"o\"), it will show the\nequivalent forms\n\n    $ obol 𐅉𐅉𐅈 348d \"1d 5.5b\" 14T1800D4O\n    𐅉𐅉𐅈 = 25 talents\n    348d = ΗΗΗΔΔΔΔ𐅃𐅂𐅂𐅂\n    1d 5.5b = 𐅂ΙΙΙΙΙ𐅁\n    14T1800D4O = 𐅉ΤΤΤΤΧ𐅅ΗΗΗΙΙΙΙ\n    \nYou can also give `obol` numbers to add and subtract\n\n    $ obol 1t + 1000d\n    ΤΧ = 1t 1000d\n    $ obol 1t - 1000d\n    𐅆 = 5000d\n\n### `logistes`\n\n`logistes` will calculate principal, interest or loan terms based on\nits inputs (`-p` for principal, `-i-` for interest, '`-d` for days of\nloan):\n\n    $ logistes -p 50t -d 1397\n    𐅊 (50t) at 10 drachmas per day for 1397 days = ΤΤΧ𐅅ΗΗΗΗ𐅄ΔΔ (2t 1970d) interest\n    $ logistes -p 50t -i ΤΤΧ𐅅ΗΗΗΗ𐅄ΔΔ\n    𐅊 (50t) at 10 drachmas per day for 1397 days = ΤΤΧ𐅅ΗΗΗΗ𐅄ΔΔ (2t 1970d) interest\n    $ logistes -d 1397 -i ΤΤΧ𐅅ΗΗΗΗ𐅄ΔΔ\n    𐅊 (50t) at 10 drachmas per day for 1397 days = ΤΤΧ𐅅ΗΗΗΗ𐅄ΔΔ (2t 1970d) interest\n    \nBy default the rate is the common one, 5 _tálanta_ yield 1 _drakhmḗ_\nin one day. You can change this with `--int-p`, `--int-i`, and\n`--int-d`. To calculate the above at _2 drakhmaí_ per day per 5\n_tálanta_:\n\n    $ logistes -p 50t -d 1397 --int-p 5t --int-i 2d --int-d 1\n    𐅊 (50t) at 20 drachmas per day for 1397 days = ΤΤΤΤΧΧΧ𐅅ΗΗΗΗΔΔΔΔ (4t 3940d) interest\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at\nhttps://github.com/seanredmond/akrophonobolos\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/seanredmond/Akrophonobolos",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "akrophonobolos",
    "package_url": "https://pypi.org/project/akrophonobolos/",
    "platform": "",
    "project_url": "https://pypi.org/project/akrophonobolos/",
    "project_urls": {
      "Bug Tracker": "https://github.com/seanredmond/Akrophonobolos/issues",
      "Homepage": "https://github.com/seanredmond/Akrophonobolos"
    },
    "release_url": "https://pypi.org/project/akrophonobolos/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Ancient Athenian acrophonic numeral converter",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12092735,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffde1c4dbe77509d605853955ee2f280c297c96c85b920a752b93d954d914b62",
          "md5": "f846af10dc4f144fd44db85347eec3ee",
          "sha256": "6a7ed44c0fc7c6bc9a54dac93b5c5ec5e93232a5aae5bd88e77afbaada72ce30"
        },
        "downloads": -1,
        "filename": "akrophonobolos-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f846af10dc4f144fd44db85347eec3ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27359,
        "upload_time": "2021-11-21T04:28:10",
        "upload_time_iso_8601": "2021-11-21T04:28:10.402812Z",
        "url": "https://files.pythonhosted.org/packages/ff/de/1c4dbe77509d605853955ee2f280c297c96c85b920a752b93d954d914b62/akrophonobolos-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d4675809570c92ec91d8d0babc69b2205626327da07093463ab81026836c7c4",
          "md5": "dd0a056e66d4f3d85d041348df181353",
          "sha256": "5cd81407bcfd7acf6e3d439556873fdf46c9515ed431349d93b0c05eb24ec1be"
        },
        "downloads": -1,
        "filename": "akrophonobolos-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dd0a056e66d4f3d85d041348df181353",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 28687,
        "upload_time": "2021-11-21T04:28:12",
        "upload_time_iso_8601": "2021-11-21T04:28:12.265783Z",
        "url": "https://files.pythonhosted.org/packages/3d/46/75809570c92ec91d8d0babc69b2205626327da07093463ab81026836c7c4/akrophonobolos-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf5978dc5b21c396e85b844c94c71dab6ebad4c311b1683e5c2abc82123a2935",
          "md5": "31dad923ff305ca5d87aa8c4ec7b88dd",
          "sha256": "9cc836d1fdbdbbb65e885006281689bf5aa0f307608b057f675659c9be86b995"
        },
        "downloads": -1,
        "filename": "akrophonobolos-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31dad923ff305ca5d87aa8c4ec7b88dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27537,
        "upload_time": "2021-11-22T15:11:08",
        "upload_time_iso_8601": "2021-11-22T15:11:08.329589Z",
        "url": "https://files.pythonhosted.org/packages/bf/59/78dc5b21c396e85b844c94c71dab6ebad4c311b1683e5c2abc82123a2935/akrophonobolos-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b176bae520843effb3d7c807c13c1670afdb66c3b0f84720cae242bab2a5ba92",
          "md5": "735f29264743dbc5b16ba2c348c4f682",
          "sha256": "e1bd7c2495e307db0ee2c5298f82232e240a4e171d89db1db7c26b81a6de2de0"
        },
        "downloads": -1,
        "filename": "akrophonobolos-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "735f29264743dbc5b16ba2c348c4f682",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 28857,
        "upload_time": "2021-11-22T15:11:11",
        "upload_time_iso_8601": "2021-11-22T15:11:11.568539Z",
        "url": "https://files.pythonhosted.org/packages/b1/76/bae520843effb3d7c807c13c1670afdb66c3b0f84720cae242bab2a5ba92/akrophonobolos-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf5978dc5b21c396e85b844c94c71dab6ebad4c311b1683e5c2abc82123a2935",
        "md5": "31dad923ff305ca5d87aa8c4ec7b88dd",
        "sha256": "9cc836d1fdbdbbb65e885006281689bf5aa0f307608b057f675659c9be86b995"
      },
      "downloads": -1,
      "filename": "akrophonobolos-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "31dad923ff305ca5d87aa8c4ec7b88dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 27537,
      "upload_time": "2021-11-22T15:11:08",
      "upload_time_iso_8601": "2021-11-22T15:11:08.329589Z",
      "url": "https://files.pythonhosted.org/packages/bf/59/78dc5b21c396e85b844c94c71dab6ebad4c311b1683e5c2abc82123a2935/akrophonobolos-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b176bae520843effb3d7c807c13c1670afdb66c3b0f84720cae242bab2a5ba92",
        "md5": "735f29264743dbc5b16ba2c348c4f682",
        "sha256": "e1bd7c2495e307db0ee2c5298f82232e240a4e171d89db1db7c26b81a6de2de0"
      },
      "downloads": -1,
      "filename": "akrophonobolos-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "735f29264743dbc5b16ba2c348c4f682",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 28857,
      "upload_time": "2021-11-22T15:11:11",
      "upload_time_iso_8601": "2021-11-22T15:11:11.568539Z",
      "url": "https://files.pythonhosted.org/packages/b1/76/bae520843effb3d7c807c13c1670afdb66c3b0f84720cae242bab2a5ba92/akrophonobolos-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}