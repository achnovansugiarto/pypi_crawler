{
  "info": {
    "author": "sudosnok",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "\"# RAPILite\" \n\n**R**eddit **API** **Lite** (lite since it doesn't use authorization and is readonly)\n\nThis async wrapper is pretty simple to use\n\nTo get started;\n\n`pip install RAPILite`\n\nFrom here we can simply import the class ready for use\n\n`from reddit import Reddit`\n\n---\nBoth the regular class instantiation and classmethod require a call to `.load()` afterwards\nto actually fetch the data from Reddit, making this `load` call a coroutine\n\nThe `.load()` coroutine can also take a `comments` kwarg as a bool, setting this to True fetches the comments for all \nposts the url could see (multiple posts for a subreddit link, just one for a specific link)\n---\nExample;\n```\nfrom reddit import Reddit\nreddit = await Reddit.from_sub('memes').load()\n---\n#is functionally the same as\n---\nfrom reddit import Reddit\nreddit = await Reddit('https://reddit.com/r/memes/hot').load()\n---\n#there are also options for timeframe filtering\nreddit = await Reddit.from_sub('pics', method='top', timeframe='all').load()\n# the above is functionally the same as\nreddit = await Reddit('https:reddit.com/r/memes/top/?t=all').load()\n\nfor post in reddit.posts:\n    #post is now a PostData object and has attributes as listed below\n    post.comments[0] #this will be a Comment object, as represented below\n\n    post.source_image #this will be an Image object, representing\n                      #the post's image/gif/video, if applicable\n\n    bytesio_obj = await post.fetch_media(raw_bytes=False)\n    # now can do stuff with the io.BytesIO instance, such as image manipulation, etc.\n```\n\n```\n# You can also change subs with the same object, no need to make new variables\nfrom reddit import Reddit\nreddit = await Reddit.from_sub('videos').load()\n# do stuff with those posts\n# now time to change subreddit\nnew_sub = await reddit.change_sub('pics', method='top', timeframe='all')\n# now we're looking at r/pics, sorted by top of all time, simple\n```\n\n---\nAttributes and their types;\n```\nMany of the below objects are populated entirely from reddit's api, so will have names/attributes useless to end users\n\nreddit = await Reddit.from_sub('AskReddit').load(comments=True)\nreddit.posts: collections.deque[PostData]\nreddit.posts[n] is a PostData object with the below attributes\n\nPostData;\n    .title: str, title of the post\n    .subreddit: str, name of the subreddit the post belongs to\n    .author: str, name of the author of the post\n    .selftext: str, selftext of the post, can be considered the main body of text\n    .url: str, the url tied to that post by the author, NOT the link for the post itself\n    .full_url: str, the actual post's url\n    .edited: bool, if the post is edited or not, if this is True then .edited_utc will exist\n    .comments: deque[Comment], Comment objects representing comments\n    .score: int, front facing score of the post, usually the same as upvotes\n    .ups: int, number of upvotes reddit is showing for the post\n    .created: datetime.datetime, local (local to the author) creation time of the post\n    .created_at: datetime.datetime, UTC+-0 creation time of the post\n    .permalink: str, the url of the post after and including 'r/'; eg, \"r/memes/comments/...\"\n    .source_image: Image, an object containing data about the image/video/gif of the post\n\n    .approved_at_utc: Optional[datetime.datetime], time (in UTC+-0) that the post was approved, if applicable\n    .saved: bool, this should always be False since this module can't interact with reddit\n    .clicked: bool, should also always be False, same as .saved\n    .hidden: bool, should always be False, same as .saved\n    .pinned: bool, is the post pinned, should be False\n\n    .gilded: int, number of Reddit Gold awards recieved\n    .top_awarded_type: str, name of the top award recieved\n    .total_awards_recieved: int, number of awards the post recieved\n    .all_awardings: deque[Award], Award objects representing awards on the post\n\n    .subreddit_name_prefixed: str, subreddit name with 'r/' prefix\n    .subreddit_subscribers: int, number of subscribers the subreddit has\n    .thumbnail_height: int, height of the thumbnail\n    .thumbnail_width: int, width of the thumbnail\n    .thumbnail: str, thumbnail of the post's media, if applicable\n    .upvote_ratio: float, ratio of ups and downs to 2 decimal places\n    .over_18: bool, is the post marked nsfw\n    .spoiler: bool, is the post marked as a spoiler\n    .media: MediaInfo, contains data about a posted image/gif, etc.\n    \n    await fetch_image(*raw_bytes=True):\n        if raw_bytes is True;\n            returns the bytes of the image/gif/video of the post, if applicable\n        otherwise returns an io.BytesIO object of the same data for quality of life\n\nComment;\n    .body: str, the content of the comment\n    .author: str, the comment author's name\n    .score: int, forward facing score of the post\n    .created: datetime.datetime, local (to the author) time of the comment\n    .created_utc: datetime.datetime: UTC+-0 time of the comment\n\n    .total_awards_received: int, number of awards on the comment\n    .gilded: int, number of Reddit Gold awards on the comment\n    .all_awardings: deque[Award], a deque of Award objects representing reddit awards\n    \n    .edited: bool, is the comment edited\n    .is_submitter: bool, is the commenter the author of the post\n    .stickied: bool, is the comment stickied to the top of the post\n    .replies: deque[Comment], replies to this specific comment\n\n    \nAward;\n    .name: str, name of the award\n    .count: int, number of times this award has been given\n    .description: str, description of the award\n\n    .coin_price: int, amount of reddit coins spent on the award\n    .coin_reward: int, amount of reddit coins given to the author of the post/comment\n    .days_of_premium: int, number of days of premium given to the author of the post/comment\n\n    .icon_url: str, url of the image for the award\n    .static_icon_url: str, url of the image for the award\n\n    .icon_height: int, height of the icon image\n    .static_icon_height: int, height of the icon image\n\n    .icon_width: int, width of the icon image\n    .static_icon_width: int, width of the icon image\n\n    .icon_format: str, format of the award's icon\n\nImage;\n    .url: str, the url of the source image of the post\n    .width: int, width of the image\n    .height: int, height of the image\n\n```\n---",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sudosnok/RAPILite",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RAPILite",
    "package_url": "https://pypi.org/project/RAPILite/",
    "platform": "",
    "project_url": "https://pypi.org/project/RAPILite/",
    "project_urls": {
      "Homepage": "https://github.com/sudosnok/RAPILite"
    },
    "release_url": "https://pypi.org/project/RAPILite/0.1.8/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "An asynchronous wrapper for Reddit's readonly API",
    "version": "0.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8491991,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc1bb510336baeb70ec5301ed54544e7407d501b1db2c1c2ce3ec33f60cb3468",
          "md5": "5b35e492c0287657c8a2920f019445e7",
          "sha256": "c233c7444671fc12a23ff4da118f36e14fecabcd3007c2c157739e0a1dea1c55"
        },
        "downloads": -1,
        "filename": "RAPILite-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5b35e492c0287657c8a2920f019445e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5150,
        "upload_time": "2020-08-22T14:44:33",
        "upload_time_iso_8601": "2020-08-22T14:44:33.402099Z",
        "url": "https://files.pythonhosted.org/packages/bc/1b/b510336baeb70ec5301ed54544e7407d501b1db2c1c2ce3ec33f60cb3468/RAPILite-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0187f9a354bc8f36a59e4006fa522f0e2608cf90455047a0d552f2634343b5c",
          "md5": "85e9f840b9377b5a1a3bb6415d540a99",
          "sha256": "ff3e960c17f24740f2dadf623551e8cf24158eb797cf364e7485d86bce332020"
        },
        "downloads": -1,
        "filename": "RAPILite-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "85e9f840b9377b5a1a3bb6415d540a99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5321,
        "upload_time": "2020-08-22T15:09:21",
        "upload_time_iso_8601": "2020-08-22T15:09:21.298903Z",
        "url": "https://files.pythonhosted.org/packages/b0/18/7f9a354bc8f36a59e4006fa522f0e2608cf90455047a0d552f2634343b5c/RAPILite-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8b6760e2cf07c0db2763a301f4aecfdc437fb8329a97e3974528cab965330f8",
          "md5": "06838f5b43894e2276673875982d2432",
          "sha256": "4c643d2ec5109c2ef43d5eb059ce6bb62e20eee73d5ac5d3ec6bf70f5d07a8a2"
        },
        "downloads": -1,
        "filename": "RAPILite-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "06838f5b43894e2276673875982d2432",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5824,
        "upload_time": "2020-08-22T16:14:18",
        "upload_time_iso_8601": "2020-08-22T16:14:18.844149Z",
        "url": "https://files.pythonhosted.org/packages/f8/b6/760e2cf07c0db2763a301f4aecfdc437fb8329a97e3974528cab965330f8/RAPILite-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45b0ef033b71313813fceddb34875445334e03b0cde2ecb1f37e497210bcc370",
          "md5": "8361cfad960826ccab99d74485bd0067",
          "sha256": "972050331d16b2494d1afd9736858fe41c47259ebf16048e29a27c2b6a5e309c"
        },
        "downloads": -1,
        "filename": "RAPILite-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8361cfad960826ccab99d74485bd0067",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6001,
        "upload_time": "2020-08-26T00:58:20",
        "upload_time_iso_8601": "2020-08-26T00:58:20.667143Z",
        "url": "https://files.pythonhosted.org/packages/45/b0/ef033b71313813fceddb34875445334e03b0cde2ecb1f37e497210bcc370/RAPILite-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "044d234ca3461fd6801cde145097e8203e8908de16ac0ce93792891114b60251",
          "md5": "51a67ca701144eab47ef6b2a6ecc43ff",
          "sha256": "2a7c0f6931782b60d3eb76791fc61243b47b6eeaeb696792beeb0bd5b2450931"
        },
        "downloads": -1,
        "filename": "RAPILite-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "51a67ca701144eab47ef6b2a6ecc43ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8621,
        "upload_time": "2020-10-24T17:37:58",
        "upload_time_iso_8601": "2020-10-24T17:37:58.982782Z",
        "url": "https://files.pythonhosted.org/packages/04/4d/234ca3461fd6801cde145097e8203e8908de16ac0ce93792891114b60251/RAPILite-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "044d234ca3461fd6801cde145097e8203e8908de16ac0ce93792891114b60251",
        "md5": "51a67ca701144eab47ef6b2a6ecc43ff",
        "sha256": "2a7c0f6931782b60d3eb76791fc61243b47b6eeaeb696792beeb0bd5b2450931"
      },
      "downloads": -1,
      "filename": "RAPILite-0.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "51a67ca701144eab47ef6b2a6ecc43ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8621,
      "upload_time": "2020-10-24T17:37:58",
      "upload_time_iso_8601": "2020-10-24T17:37:58.982782Z",
      "url": "https://files.pythonhosted.org/packages/04/4d/234ca3461fd6801cde145097e8203e8908de16ac0ce93792891114b60251/RAPILite-0.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}