{
  "info": {
    "author": "Shanka DeSoysa",
    "author_email": "shanaka@computer.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Time Series Feature Engineering\n> Time series feature generator.\n\n\n## Install\n\n`pip install timeseries_feature_engineering`\n\n## How to use\n\n### Add Date Parts\n\n```python\ndf = pd.DataFrame({'date': ['2019-12-04', None, '2019-11-15', '2019-10-24']})\ndf = add_datepart(df, 'date')\ndf.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Week</th>\n      <th>Day</th>\n      <th>Dayofweek</th>\n      <th>Dayofyear</th>\n      <th>Is_month_end</th>\n      <th>Is_month_start</th>\n      <th>Is_quarter_end</th>\n      <th>Is_quarter_start</th>\n      <th>Is_year_end</th>\n      <th>Is_year_start</th>\n      <th>Elapsed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019.0</td>\n      <td>12.0</td>\n      <td>49.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>338.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1575417600</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2019.0</td>\n      <td>11.0</td>\n      <td>46.0</td>\n      <td>15.0</td>\n      <td>4.0</td>\n      <td>319.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1573776000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2019.0</td>\n      <td>10.0</td>\n      <td>43.0</td>\n      <td>24.0</td>\n      <td>3.0</td>\n      <td>297.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1571875200</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Add Moving Average Features\n\nWith weighted average. \n> Recency in an important factor in a time series. Values closer to the current date would hold more information.\n\n```python\ndf = pd.DataFrame({\n    'date': pd.date_range('2019-12-01', '2019-12-10'), \n    'sales': np.random.randint(100, 500, size=10)\n})\ndf = add_moving_average_features(df, 'sales', windows=[3,5], weighted=True)\ndf.head(10)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>sales</th>\n      <th>sales_3p_MA</th>\n      <th>sales_5p_MA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019-12-01</td>\n      <td>155</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2019-12-02</td>\n      <td>437</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2019-12-03</td>\n      <td>361</td>\n      <td>352.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2019-12-04</td>\n      <td>356</td>\n      <td>371.166667</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2019-12-05</td>\n      <td>490</td>\n      <td>423.833333</td>\n      <td>399.066667</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2019-12-06</td>\n      <td>222</td>\n      <td>333.666667</td>\n      <td>353.133333</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2019-12-07</td>\n      <td>197</td>\n      <td>254.166667</td>\n      <td>294.400000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2019-12-08</td>\n      <td>390</td>\n      <td>297.666667</td>\n      <td>316.000000</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2019-12-09</td>\n      <td>159</td>\n      <td>242.333333</td>\n      <td>258.666667</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2019-12-10</td>\n      <td>470</td>\n      <td>353.000000</td>\n      <td>318.133333</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nWithout weighted average.\n\n```python\ndf = pd.DataFrame({\n    'date': pd.date_range('2019-12-01', '2019-12-10'), \n    'sales': np.random.randint(100, 500, size=10)\n})\ndf = add_moving_average_features(df, 'sales', windows=[3,5], weighted=True)\ndf.head(10)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>sales</th>\n      <th>sales_3p_MA</th>\n      <th>sales_5p_MA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019-12-01</td>\n      <td>167</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2019-12-02</td>\n      <td>458</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2019-12-03</td>\n      <td>260</td>\n      <td>310.500000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2019-12-04</td>\n      <td>174</td>\n      <td>250.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2019-12-05</td>\n      <td>392</td>\n      <td>297.333333</td>\n      <td>301.266667</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2019-12-06</td>\n      <td>401</td>\n      <td>360.166667</td>\n      <td>338.200000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2019-12-07</td>\n      <td>460</td>\n      <td>429.000000</td>\n      <td>379.200000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2019-12-08</td>\n      <td>381</td>\n      <td>410.666667</td>\n      <td>393.733333</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2019-12-09</td>\n      <td>349</td>\n      <td>378.166667</td>\n      <td>389.533333</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2019-12-10</td>\n      <td>365</td>\n      <td>362.333333</td>\n      <td>379.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Add Expanding Features\n\n```python\ndf = pd.DataFrame({\n    'date': pd.date_range('2019-12-01', '2019-12-10'), \n    'sales': np.random.randint(100, 500, size=10)\n})\ndf = add_expanding_features(df, 'sales', period=3)\ndf.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>sales</th>\n      <th>sales_3p_expanding</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019-12-01</td>\n      <td>178</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2019-12-02</td>\n      <td>398</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2019-12-03</td>\n      <td>399</td>\n      <td>325.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2019-12-04</td>\n      <td>385</td>\n      <td>340.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2019-12-05</td>\n      <td>136</td>\n      <td>299.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Add Trend Features\n\n```python\ndf = pd.DataFrame({\n    'date': pd.date_range('2019-12-01', '2019-12-10'), \n    'sales': np.random.randint(100, 500, size=10)\n})\ndf = add_trend_features(df, 'sales', windows=[3,7])\ndf.head(10)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>sales</th>\n      <th>sales_3p_trend</th>\n      <th>sales_7p_trend</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019-12-01</td>\n      <td>237</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2019-12-02</td>\n      <td>388</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2019-12-03</td>\n      <td>384</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2019-12-04</td>\n      <td>498</td>\n      <td>87.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2019-12-05</td>\n      <td>275</td>\n      <td>-37.666667</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2019-12-06</td>\n      <td>382</td>\n      <td>-0.666667</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2019-12-07</td>\n      <td>132</td>\n      <td>-122.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2019-12-08</td>\n      <td>337</td>\n      <td>20.666667</td>\n      <td>14.285714</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2019-12-09</td>\n      <td>496</td>\n      <td>38.000000</td>\n      <td>15.428571</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2019-12-10</td>\n      <td>216</td>\n      <td>28.000000</td>\n      <td>-24.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shanaka-desoysa/timeseries_feature_engineering/tree/master/",
    "keywords": "some keywords",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "timeseries-feature-engineering",
    "package_url": "https://pypi.org/project/timeseries-feature-engineering/",
    "platform": "",
    "project_url": "https://pypi.org/project/timeseries-feature-engineering/",
    "project_urls": {
      "Homepage": "https://github.com/shanaka-desoysa/timeseries_feature_engineering/tree/master/"
    },
    "release_url": "https://pypi.org/project/timeseries-feature-engineering/0.0.1/",
    "requires_dist": [
      "fastcore",
      "pandas"
    ],
    "requires_python": ">=3.6",
    "summary": "A description of your project",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10230547,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5434e0d8ad2643d8f324859fdb8d2a68a310eb3b954770bbd1168f7674bdf265",
          "md5": "826101fc8d443a8809c3b7540093eab5",
          "sha256": "a5547165b4c22d75e4cd9be496a648b8487985534479492a81b8199771be83c6"
        },
        "downloads": -1,
        "filename": "timeseries_feature_engineering-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "826101fc8d443a8809c3b7540093eab5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9533,
        "upload_time": "2021-05-02T01:25:07",
        "upload_time_iso_8601": "2021-05-02T01:25:07.670623Z",
        "url": "https://files.pythonhosted.org/packages/54/34/e0d8ad2643d8f324859fdb8d2a68a310eb3b954770bbd1168f7674bdf265/timeseries_feature_engineering-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6e1007212232c8d0c3b36b762559ac1f3904d54afda1c16862bad95c751b44a",
          "md5": "a687224259180b4e6f5f26aac26028d5",
          "sha256": "0cf810de2a60ce6569544e979db5ebe28be398318d7854dffd8dd9cbfa788979"
        },
        "downloads": -1,
        "filename": "timeseries_feature_engineering-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a687224259180b4e6f5f26aac26028d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13438,
        "upload_time": "2021-05-02T01:25:09",
        "upload_time_iso_8601": "2021-05-02T01:25:09.299075Z",
        "url": "https://files.pythonhosted.org/packages/b6/e1/007212232c8d0c3b36b762559ac1f3904d54afda1c16862bad95c751b44a/timeseries_feature_engineering-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5434e0d8ad2643d8f324859fdb8d2a68a310eb3b954770bbd1168f7674bdf265",
        "md5": "826101fc8d443a8809c3b7540093eab5",
        "sha256": "a5547165b4c22d75e4cd9be496a648b8487985534479492a81b8199771be83c6"
      },
      "downloads": -1,
      "filename": "timeseries_feature_engineering-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "826101fc8d443a8809c3b7540093eab5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9533,
      "upload_time": "2021-05-02T01:25:07",
      "upload_time_iso_8601": "2021-05-02T01:25:07.670623Z",
      "url": "https://files.pythonhosted.org/packages/54/34/e0d8ad2643d8f324859fdb8d2a68a310eb3b954770bbd1168f7674bdf265/timeseries_feature_engineering-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6e1007212232c8d0c3b36b762559ac1f3904d54afda1c16862bad95c751b44a",
        "md5": "a687224259180b4e6f5f26aac26028d5",
        "sha256": "0cf810de2a60ce6569544e979db5ebe28be398318d7854dffd8dd9cbfa788979"
      },
      "downloads": -1,
      "filename": "timeseries_feature_engineering-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a687224259180b4e6f5f26aac26028d5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13438,
      "upload_time": "2021-05-02T01:25:09",
      "upload_time_iso_8601": "2021-05-02T01:25:09.299075Z",
      "url": "https://files.pythonhosted.org/packages/b6/e1/007212232c8d0c3b36b762559ac1f3904d54afda1c16862bad95c751b44a/timeseries_feature_engineering-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}