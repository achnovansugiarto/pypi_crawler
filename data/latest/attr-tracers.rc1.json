{
  "info": {
    "author": "BcZsalba",
    "author_email": "bczsalba@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/bczsalba/tracer/master/assets/title.png\"></img>\n</p>\n\n> Easily debug and trace attribute changes in your Python classes\n\n```\npip install attr-tracers\n```\n\n[![PyPI version](https://raw.githubusercontent.com/bczsalba/tracer/master/assets/version.svg)](https://pypi.org/project/tracer)\n[![Pylint quality](https://raw.githubusercontent.com/bczsalba/tracer/master/assets/quality.svg)](https://github.com/bczsalba/tracer/blob/master/utils/create_badge.py)\n\nUsage\n-----\n\nTo use this module, simply import `trace` from it, and decorate your chosen class:\n\n```python\nfrom tracers import trace\n\n@trace(\"test\")\nclass MyClass:\n   def __init__(self) -> None:\n       self.test = 0\n   \n   ...\n```\n\n<a href=\"https://raw.githubusercontent.com/bczsalba/tracer/master/assets/tracer.webp\">\n  <img src=\"https://raw.githubusercontent.com/bczsalba/tracer/master/assets/screenshot.png\"></img>\n</a>\n\n\nYou can set custom setter and getter methods for your trace, practically allowing you to subcribe to read/write events of an attribute.\n\n```python\nfrom typing import Any\nfrom tracers import trace\n\ndef handle_get(obj: object) -> Any:\n    \"\"\"Get variable\"\"\"\n    \n    # Note the namespace-based reference to `attr`\n    print(f\"Trying to get {attr} from {obj}\")\n    return getattr(obj, \"_\" + attr)\n    \ndef handle_set(obj: object, new: Any) -> None:\n    \"\"\"Set variable\"\"\"\n    \n    print(f\"Setting {attr} for {obj} from {getattr(obj, attr)} -> {new}\")\n    setattr(obj, \"_\" + attr, new)\n    \nattr = \"test\"\n\n@trace(attr, getter=handle_get, setter=handle_set)\nclass MyClass:\n   def __init__(self) -> None:\n       self.test = 0\n\n```\n\nPlease note that these methods do **NOT** get a reference to `attr`. This is a quirk of properties, but you can work around it using namespace-based referencing, like above.\n\nInner workings\n--------------\n\nThis module under the hood is just an easy way to assign properties to a class.\n\nWhen decorated with `trace(\"attr\")`, a class has its attribute `attr` replaced with a property. The default setter and getter of this property access the \"_attr\" attribute, as the property takes up \"attr\".\n\nEssentially, what it becomes is this:\n```python3\nclass MyClass:\n    @property\n    def attr(self) -> Any:\n        return self._attr\n        \n    @attr.setter\n    def attr(self, new: str) -> None:\n        # Display current trace\n        # Take input, quit or dismiss if chosen\n        \n        self._attr = new\n```\n\nWhy use this over manually defining properties?\n-----------------------------------------------\n\nWhile defining the properties manually *is* doable, this module comes in really handy for debugging.\n\nImagine having a pretty complex hierarchy of class-inheritance and objects all relating to eachother (like it happens in [pytermgui](https://github.com/bczsalba/pytermgui)).\nIt often happens that there is a certain attribute that isn't quite behaving how it is supposed to. While you *could* define these properties yourself, being able to import `trace` and plop it on top of a class is really efficient for debugging.\n\nIt also looks much nicer!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bczsalba/tracer",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "attr-tracers",
    "package_url": "https://pypi.org/project/attr-tracers/",
    "platform": "",
    "project_url": "https://pypi.org/project/attr-tracers/",
    "project_urls": {
      "Homepage": "https://github.com/bczsalba/tracer"
    },
    "release_url": "https://pypi.org/project/attr-tracers/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Easily debug and trace attribute changes in your classes",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11504814,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "535a19ceb30ce731ec23affaa58f033c7b9bf532ebf938f95242ca1fdda4b62b",
          "md5": "380f0a6ce22df9c5845e35df2d08c079",
          "sha256": "3c46d9fa49703b2b2c29afac5c6f2d6b84e4518c0acaec48ba2e4677918620b7"
        },
        "downloads": -1,
        "filename": "attr-tracers-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "380f0a6ce22df9c5845e35df2d08c079",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4167,
        "upload_time": "2021-09-21T07:38:41",
        "upload_time_iso_8601": "2021-09-21T07:38:41.077776Z",
        "url": "https://files.pythonhosted.org/packages/53/5a/19ceb30ce731ec23affaa58f033c7b9bf532ebf938f95242ca1fdda4b62b/attr-tracers-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "535a19ceb30ce731ec23affaa58f033c7b9bf532ebf938f95242ca1fdda4b62b",
        "md5": "380f0a6ce22df9c5845e35df2d08c079",
        "sha256": "3c46d9fa49703b2b2c29afac5c6f2d6b84e4518c0acaec48ba2e4677918620b7"
      },
      "downloads": -1,
      "filename": "attr-tracers-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "380f0a6ce22df9c5845e35df2d08c079",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4167,
      "upload_time": "2021-09-21T07:38:41",
      "upload_time_iso_8601": "2021-09-21T07:38:41.077776Z",
      "url": "https://files.pythonhosted.org/packages/53/5a/19ceb30ce731ec23affaa58f033c7b9bf532ebf938f95242ca1fdda4b62b/attr-tracers-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}