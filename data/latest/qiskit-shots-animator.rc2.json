{
  "info": {
    "author": "Tea Vui Huang",
    "author_email": "tvhuang@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "[![GitHub license](https://img.shields.io/github/license/teavuihuang/qiskit-shots-animator)](https://github.com/teavuihuang/qiskit-shots-animator/blob/main/LICENSE)\n[![Downloads](https://pepy.tech/badge/qiskit-shots-animator)](https://pypi.org/project/qiskit-shots-animator/) \n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4266489.svg)](https://doi.org/10.5281/zenodo.4266489)\n\n\n## Quantum-Computer Microwave-Pulse Animator\n\n\n**Qiskit** is an open-source framework for working with noisy quantum computers at the level of pulses, circuits, and algorithms. Tea Vui Huang's **Qiskit-Shots-Animator** animates microwave-pulse shots in a quantum circuit execution as microwave flashes either on a gate map, or x-ray photo of the quantum computer chip. Microwave measurement pulses interact with qubits via readout resonators and are reflected back, the animation illustrates readout microwave (MW) pulses at the corresponding Rx read-out resonators.\n\n\n## Usage\n\n```python\nfrom IPython.core.display import display, Image\nfrom qiskit_shots_animator.visualization import save_quantum_animation, \n\tget_supported_samples, get_sample\n```\n\n\nImport the `qiskit-shots-animator` functions and call **save_quantum_animation()** with the following parameters:\n- filename (str): file name to save as\n- type (str): 'gate' or 'xray'\n- fps (int): shots per second\n- counts (dict): job result counts, e.g. for 1024 shots: {'000': 510, '111': 514}\n- sample (str): sample name, e.g. 'albatross'                \n- labelled (boolean): True or False, only for type='xray'\n- microwave_color (str): Python colors, e.g. 'white', 'lightblue' etc\n- microwave_intensity (int): 0.1 to 1.0 (weakest to strongest)\n\n\n## Examples\n\n\n### 1a. Animate quantum circuit execution on gate map at 3 shots/sec on Qiskit-Aer backend with **get_sample()** to auto-select quantum device\n\n\n```python\nimport qiskit.tools.jupyter\nfrom qiskit import IBMQ, QuantumCircuit, Aer, execute\nfrom qiskit.circuit.random import random_circuit\nfrom IPython.core.display import display, Image\nfrom qiskit_shots_animator.visualization import save_quantum_animation, \n\tget_supported_samples, get_sample\n\n# Generate and execute a 5-qubit random-circuit on Qiskit-Aer backend\nbackend = Aer.get_backend('qasm_simulator')\nwhile(1):\n    circ = random_circuit(5, 2, max_operands=3, measure=True)\n    counts = execute(circ, backend, shots=1000).result().get_counts()\n    if len(counts)>4: break    \n\n# Save & display animation of quantum circuit execution\nfilename = \"quantum-shots_5q.gif\"\nsave_quantum_animation(filename, \"gate\", 3, counts, get_sample(backend, circ))\nimg = Image(filename); img.reload(); display(img)\nprint(circ.draw())\n```\n\n'Sparrow' quantum device:  \n[![](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_circuit/quantum-shots_5q_sparrow.gif)](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_circuit/quantum-shots_5q_sparrow.gif)\n\n\n### 1b. Animate quantum circuit execution on gate map at 3 shots/sec with 'giraffe' device\n\n\n```python\nfilename = \"quantum-shots_5q_giraffe.gif\"\nsave_quantum_animation(filename, \"gate\", 3, counts, \"giraffe\") \nimg = Image(filename); img.reload(); display(img)\n```\n\n'Giraffe' quantum device:  \n[![](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_circuit/quantum-shots_5q_giraffe.gif)](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_circuit/quantum-shots_5q_giraffe.gif)\n\n\n### 1c. Animate quantum circuit execution on a labelled x-ray photo at 3 shots/sec, with microwave color 'lightblue' & microwave intensity 0.6\n\n\n```python\nfilename = \"quantum-shots_5q_sparrow_xray-labelled.gif\"\nsave_quantum_animation(filename, \"xray\", 3, counts,\n\tget_sample(backend, circ), labelled=True,\n\tmicrowave_color=\"lightblue\", microwave_intensity=0.6)\nimg = Image(filename); img.reload(); display(img)\n```\n\n'Sparrow' quantum device:   \n[![](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_circuit/quantum-shots_5q_sparrow_xray-labelled.gif)](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_circuit/quantum-shots_5q_sparrow_xray-labelled.gif)\n\n\n### 1d. Animate quantum circuit execution on an unlabelled x-ray photo at 3 shots/sec, with microwave color 'white' & microwave intensity 0.5\n\n\n```python\nfilename = \"quantum-shots_5q_sparrow_xray-unlabelled.gif\"\nsave_quantum_animation(filename, \"xray\", 3, counts,\n\tget_sample(backend, circ), labelled=False,\n\tmicrowave_color=\"white\", microwave_intensity=0.5)\nimg = Image(filename); img.reload(); display(img)\n```\n\n'Sparrow' quantum device:  \n[![](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_circuit/quantum-shots_5q_sparrow_xray-unlabelled.gif)](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_circuit/quantum-shots_5q_sparrow_xray-unlabelled.gif)\n\n\n### 1e. Animate quantum circuit execution on all supported devices at 3 shots/sec using **get_supported_samples()**\n\n\n```python\nfor sample in get_supported_samples():\n    print(sample); filename = \"quantum-shots_5q_\" + sample + \".gif\"\n    if (save_quantum_animation(filename, \"gate\", 3, counts, sample)==True):\n        img = Image(filename); img.reload(); display(img)  \n```\n\n\n### 2. Animate 15-qubits random-number-generator quantum circuit execution on IBMQ provider\n\n\n```python\nimport qiskit.tools.jupyter\nfrom qiskit import IBMQ, QuantumCircuit, Aer, execute\nfrom qiskit.circuit.random import random_circuit\nfrom IPython.core.display import display, Image\nfrom qiskit_shots_animator.visualization import save_quantum_animation, \n\tget_sample, get_supported_samples\n\n# Generate and execute random circuit remotely on ibmq_qasm_simulator\nprovider = IBMQ.load_account()\nprovider = IBMQ.get_provider(hub='ibm-q')\n# Use 'ibmq_16_melbourne' if don't mind waiting in the queue\nbackend = provider.get_backend('ibmq_qasm_simulator')\n\n# Build a random-number-generator quantum circuit\nrng_size = 15; circ = QuantumCircuit(rng_size, rng_size)\ncirc.h(range(rng_size)) # Applies hadamard gate to all qubits\ncirc.measure(range(rng_size), range(rng_size)) # Measures all qubits\ncounts = execute(circ, backend, shots=1000).result().get_counts()\n\n# Save & display animation of quantum circuit execution \nfilename = \"quantum-shots_15q.gif\"\nsave_quantum_animation(filename, \"gate\", 3, counts, get_sample(backend, circ))\nimg = Image(filename); img.reload(); display(img)\nprint(circ.draw())\n```\n\n15-qubits 'Albatross' quantum device:  \n[![](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_number_generator/quantum-shots_15q_albatross_rng.gif)](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_number_generator/quantum-shots_15q_albatross_rng.gif)\n\n\n\n\n### 3. Animate 20-qubits random-number-generator quantum circuit execution on IBMQ provider\n\n\n```python\nimport qiskit.tools.jupyter\nfrom qiskit import IBMQ, QuantumCircuit, Aer, execute\nfrom qiskit.circuit.random import random_circuit\nfrom IPython.core.display import display, Image\nfrom qiskit_shots_animator.visualization import save_quantum_animation, \n\tget_sample, get_supported_samples\n\n# Generate and execute random circuit remotely on ibmq_qasm_simulator\nprovider = IBMQ.load_account()\nprovider = IBMQ.get_provider(hub='ibm-q')\nbackend = provider.get_backend('ibmq_qasm_simulator')\n\n# Build a random-number-generator quantum circuit\nrng_size = 20; circ = QuantumCircuit(rng_size, rng_size)\ncirc.h(range(rng_size)) # Applies hadamard gate to all qubits\ncirc.measure(range(rng_size), range(rng_size)) # Measures all qubits\ncounts = execute(circ, backend, shots=1000).result().get_counts()\n\n# Save & display animation of quantum circuit execution \nfilename = \"quantum-shots_20q_unknown20a.gif\"\nsave_quantum_animation(filename, \"gate\", 3, counts, \"unknown20a\")\nimg = Image(filename); img.reload(); display(img)\nfilename = \"quantum-shots_20q_unknown20b.gif\"\nsave_quantum_animation(filename, \"gate\", 3, counts, \"unknown20b\")\nimg = Image(filename); img.reload(); display(img)\nprint(circ.draw())\n```\n\n20-qubits quantum device:  \n[![](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_number_generator/quantum-shots_20q_unknown20a_rng.gif)](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_number_generator/quantum-shots_20q_unknown20a_rng.gif)\n\n20-qubits quantum device:  \n[![](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_number_generator/quantum-shots_20q_unknown20b_rng.gif)](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_number_generator/quantum-shots_20q_unknown20b_rng.gif)\n\n\n\n### 4. Animate 53-qubits random-number-generator quantum circuit execution on Qiskit-Aer backend\n\n\n```python\nimport qiskit.tools.jupyter\nfrom qiskit import IBMQ, QuantumCircuit, Aer, execute\nfrom qiskit.circuit.random import random_circuit\nfrom IPython.core.display import display, Image\nfrom qiskit_shots_animator.visualization import save_quantum_animation, \n\tget_sample, get_supported_samples\n\n# Generate and execute random circuit locally on Aer qasm_simulator\nbackend = Aer.get_backend('qasm_simulator')\n\n# Build a quantum circuit - random number generator\nrng_size = 53; circ = QuantumCircuit(rng_size, rng_size)\ncirc.h(range(rng_size)) # Applies hadamard gate to all qubits\ncirc.measure(range(rng_size), range(rng_size)) # Measures all qubits\ncounts = execute(circ, backend, shots=1000).result().get_counts()\n\n# Save & display animation of quantum circuit execution \nfilename = \"quantum-shots_53q_unknown53a.gif\"\nsave_quantum_animation(filename, \"gate\", 3, counts, \"unknown53a\")\nimg = Image(filename); img.reload(); display(img)\nprint(circ.draw())\n```\n\n53-qubits quantum device:  \n[![](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_number_generator/quantum-shots_53q_unknown53a_rng.gif)](https://raw.githubusercontent.com/teavuihuang/qiskit-shots-animator/main/examples/images/random_number_generator/quantum-shots_53q_unknown53a_rng.gif)\n\n\n\n\n\n\n## Author and Citation\nTea Vui Huang. (2020, November 10). \nQiskit Quantum-Computer Microwave-Pulse Animator. https://doi.org/10.5281/zenodo.4266489\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/teavuihuang/qiskit-shots-animator",
    "keywords": "qiskit sdk quantum animation",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qiskit-shots-animator",
    "package_url": "https://pypi.org/project/qiskit-shots-animator/",
    "platform": "",
    "project_url": "https://pypi.org/project/qiskit-shots-animator/",
    "project_urls": {
      "Homepage": "https://github.com/teavuihuang/qiskit-shots-animator"
    },
    "release_url": "https://pypi.org/project/qiskit-shots-animator/1.0.1/",
    "requires_dist": [
      "matplotlib (>=3.2.2)",
      "numpy (>=1.18.5)",
      "pillow (>=7.2.0)",
      "pkginfo (>=1.5.0.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Software for animating quantum computing programs",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8649997,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbec6752b40246a73a99385070e452e51d1ef9e17aafd841b7cbd70c40231d34",
          "md5": "3bccd78f08d63c11cebcb2a130117624",
          "sha256": "26d554e253f58957f5ebd566f528bae8534b528ca70cfe171e45110728c2a8a6"
        },
        "downloads": -1,
        "filename": "qiskit_shots_animator-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bccd78f08d63c11cebcb2a130117624",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 668094,
        "upload_time": "2020-11-10T15:13:32",
        "upload_time_iso_8601": "2020-11-10T15:13:32.753719Z",
        "url": "https://files.pythonhosted.org/packages/cb/ec/6752b40246a73a99385070e452e51d1ef9e17aafd841b7cbd70c40231d34/qiskit_shots_animator-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3453b6f429384fecb5dca7da171480d1dd9cd6684df92f9ed0bc096be2e280b1",
          "md5": "6180e7b0233d3bdc29b168d7c5cd85ef",
          "sha256": "7c9e85ec3712511d89384a0df0feb3ea0dc6409d84f82bf44dc254a7b52a234f"
        },
        "downloads": -1,
        "filename": "qiskit-shots-animator-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6180e7b0233d3bdc29b168d7c5cd85ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 665725,
        "upload_time": "2020-11-10T15:13:43",
        "upload_time_iso_8601": "2020-11-10T15:13:43.357550Z",
        "url": "https://files.pythonhosted.org/packages/34/53/b6f429384fecb5dca7da171480d1dd9cd6684df92f9ed0bc096be2e280b1/qiskit-shots-animator-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79e1616142bfeeecd1479cc65a8081b8eb35be636777a447cff825ef3ce42bee",
          "md5": "4359369b4c951ab3d57682555b79c022",
          "sha256": "38e29f5bbfa1a31cdeca3cfda260ecddd128f98d928bd7ccdfc658c32e74b85f"
        },
        "downloads": -1,
        "filename": "qiskit_shots_animator-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4359369b4c951ab3d57682555b79c022",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 651606,
        "upload_time": "2020-11-13T11:22:31",
        "upload_time_iso_8601": "2020-11-13T11:22:31.994313Z",
        "url": "https://files.pythonhosted.org/packages/79/e1/616142bfeeecd1479cc65a8081b8eb35be636777a447cff825ef3ce42bee/qiskit_shots_animator-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bdc1627448e0a90309a26cb62f47bc9247181a31110a1b28f40b2bc9bf8c423",
          "md5": "972ed7778e1b477882bc70d805f807e4",
          "sha256": "9ca629d6b8a460a327148e4855ea5dd566e8f500d45a9fd8311c08ce820c294c"
        },
        "downloads": -1,
        "filename": "qiskit-shots-animator-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "972ed7778e1b477882bc70d805f807e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 645287,
        "upload_time": "2020-11-13T11:22:33",
        "upload_time_iso_8601": "2020-11-13T11:22:33.283661Z",
        "url": "https://files.pythonhosted.org/packages/3b/dc/1627448e0a90309a26cb62f47bc9247181a31110a1b28f40b2bc9bf8c423/qiskit-shots-animator-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79e1616142bfeeecd1479cc65a8081b8eb35be636777a447cff825ef3ce42bee",
        "md5": "4359369b4c951ab3d57682555b79c022",
        "sha256": "38e29f5bbfa1a31cdeca3cfda260ecddd128f98d928bd7ccdfc658c32e74b85f"
      },
      "downloads": -1,
      "filename": "qiskit_shots_animator-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4359369b4c951ab3d57682555b79c022",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 651606,
      "upload_time": "2020-11-13T11:22:31",
      "upload_time_iso_8601": "2020-11-13T11:22:31.994313Z",
      "url": "https://files.pythonhosted.org/packages/79/e1/616142bfeeecd1479cc65a8081b8eb35be636777a447cff825ef3ce42bee/qiskit_shots_animator-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bdc1627448e0a90309a26cb62f47bc9247181a31110a1b28f40b2bc9bf8c423",
        "md5": "972ed7778e1b477882bc70d805f807e4",
        "sha256": "9ca629d6b8a460a327148e4855ea5dd566e8f500d45a9fd8311c08ce820c294c"
      },
      "downloads": -1,
      "filename": "qiskit-shots-animator-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "972ed7778e1b477882bc70d805f807e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 645287,
      "upload_time": "2020-11-13T11:22:33",
      "upload_time_iso_8601": "2020-11-13T11:22:33.283661Z",
      "url": "https://files.pythonhosted.org/packages/3b/dc/1627448e0a90309a26cb62f47bc9247181a31110a1b28f40b2bc9bf8c423/qiskit-shots-animator-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}