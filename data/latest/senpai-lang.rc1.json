{
  "info": {
    "author": "4gboframram",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Senpai: A dynamically-typed, Stack-Based Esolang\n- For general info about the language, visit the [esolang wiki page](https://esolangs.org/wiki/Senpai)\n- This document is about implementation-specific details\n## Implementation Features\n- An implementation of the Senpai language purely interpreted in Python\n- A simple Python API to create functions for the Senpai interpreter\n- Many builtins that make the language easier to use that act as wrappers for Python classes\n- An Earley parser, created with [Lark](https://github.com/lark-parser/lark)\n- A 100x slower than Python run speed (Yeah, I'm sorry)\n- Only a single dependency outside of the Python standard library (Lark) that can be installed with `pip install lark`\n- A probably slightly buggy interpreter.\n\n## Commandline Usage\n- To use, use `python -m senpai_lang [commands]`\n### Commands\n- `-h`, `--help`: View the help for the commandline arguments\n- `-i`, `--infile`: The input file with the Senpai code to interpret\n- `-d`, `--debugfile`: The file to write to for verbose logging. The log tracks almost everything the intepreter does down to the expression.\n- `-tb`, `--pytraceback`: Disable the custom except hook and enable normal Python traceback. Should be used for reporting bugs with the intepreter.\n- `-w`, `--wiki`: Visit the wiki page for the Senpai language\n- `-ps`, `--printstack`: Print the execution time, variables, stacks, and builtins of the program after running the file\n\n## Python API\nIf you want to see the library of functions introduced using this api, read `lib/lib_docs.md`\n### Basic Tutorial For Making Your Own Extension Modules\n- 1. Import `senpai_lang.pyutils`\n- 2. Create a class that inherits off of `senpai_lang.pyutils.FuncBase` with a class attribute of the name of the function\n- 3. Create a `__init__` that inits the `super()` with args of `self.name` and the function you want to wrap.\n- 4. Instantiate a `PyModule` object with args of `{name}` and the `class` of the command (not an instance of the class)\n- 5. Import the module from Senpai\n- Example implementation of a wrapper for `os.system`\n\n```py\nimport os\nfrom senpai_lang.pyutils import FuncBase, PyModule\nclass System(FuncBase):\n\t\"\"\"\n\tCan take 2 or 1 argument\n\tFirst argument is always the command to execute.\n\tSecond argument can be anything, \n\t\n\tSecond argument if it exists returns the value os.system\n\t\"\"\"\n\tname = 'cmd' # allows for overriding by the module name \n\tdef __init__(self):\n\t\tsuper().__init__(self.name, self.system)\n\n\t@staticmethod\n\tdef system(*args):\n\t\tif len(args) == 1:\n\t\t\tos.system(*args)\n\t\telse:\n\t\t\treturn os.system(args[0])\n\t\nPyModule('os', [System]) # initialize module\n```\n**NOTE: A function's return value is pushed onto the current stack and all arguments to the function are destroyed in the process of calling the function.**\n### Full Python API Docs\n\n\n### FuncBase \n- `def __init__(self, name, function, iter_results=False)` \n  - `self.name`: The name that the function will be referred to by calling from Senpai\n  - `self.function`: The function that gets called from Senpai \n  - If `iter_results` is `True`, when function is called, iterate over the return value of `self.function` and push each item in the iterable on top of stack in reverse order such that the top item on the stack is the first item in the iterable.\n  - Updates `SenpaiInterpreter.builtins` with `{self.name: self}`\n  - Should probably not be instantiated manually unless you know what you are doing\n- `def call(self, args, interpreter)`: \n  \n  - Pops the arguments from the top of the `interpreter`'s current stack and calls `self.function` with the unpacked version of `args` as arguments. \n  - Should probably not be called explicitely unless you know exactly what you are doing. \n- `self.interpreter`: the interpreter that is calling the function. Only defined when the function is called.\n\n### PyModule\n- `def __init__(self, name, functions, rename_funcs=True)`\n  - `self.name`: the name of the module\n  - `self.functions`: an iterable of all of the classes for functions in the module\n  - `rename_funcs` (`self.rename`): If `True` (should almost always be), add the name of the module followed by an underscore (`module_function`) before the name of all the functions in the module. Should be `True` (or omitted) in almost all cases.\n  - Instantiates all of the classes in `self.functions` and adds them to the builtins of the `SenpaiInterpreter` class and logs imports. \n\n### SenpaiInterpreter\nThese are the useful attributes for making modules. If you want to know more methods and attributes of the `SenpaiInterpreter`, look at the source code. Most of the methods in there interpret the AST. **`SenpaiInterpreter` objects should generally not be instantiated manually. If you really need to, the `SenpaiInterpreter` class is located in senpai_lang.src.classes.SenpaiInterpreter.** \n- `SenpaiInterpreter.builtins`: All of the Python functions added to the interpreter.\n- `self.vars`: The variables held by the interpreter. It is a dictionary that holds `{name: object}`. \n- `self.stacks`: A `StackHolder` object that holds the stacks. \n\n### StackHolder\nA dictionary that holds the `{name: Stack([items])}` that also holds the name of the current stack.\n**`StackHolder` objects should generally not be instantiated manually. The `StackHolder` class is located in `senpai_lang.src.classes.StackHolder`** \n\n- `def __init__(self, current_stack, **kwargs)`:\n  - Creates a new `StackHolder` initialized with a current stack name of `current_stack`, and contains the dictionary of `**kwargs`. The dictionary should have values of `Stack` objects. \n\n- `self.current_stack_name`: The name of the current stack\n- `self.current_stack`: A `Stack` object that represents the current stack of the interpreter.\n- `def switch_stack(self, name)`: Switches the current stack to be the stack named `name` if it exists. If not, creates a stack named `name` initialized with an empty `Stack()`\n\n### Stack\nA class that inherits off of `collections.deque` that represents a stack in the Senpai language. **`Stack` objects should generally not be instantiated manually.**\n\n- `def rot2(self)`: Performs a Senpai `rot2` operation on the stack (swaps the top 2 items).\n* `def rot3(self)`: Performs a Senpai `rot3` operation on the stack.\n\n## Embedding the Interpreter in Python Applications (If you *really* want to) (Why would you?)\n- 1. Import `senpai_lang.src.classes.SenpaiInterpreter` and `senpai_lang.src.parser.parser`\n- 2. Regret all of your life decisions.\n- 3. Call `parser.parse(code)` to get the Tree\n- 4. Instantiate the `SenpaiInterpreter` with the Tree as an argument\n- 5. Enjoy",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/4gboframram/Senpai",
    "keywords": "programming_language,esolang",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "senpai-lang",
    "package_url": "https://pypi.org/project/senpai-lang/",
    "platform": "",
    "project_url": "https://pypi.org/project/senpai-lang/",
    "project_urls": {
      "Homepage": "https://github.com/4gboframram/Senpai"
    },
    "release_url": "https://pypi.org/project/senpai-lang/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Senpai is an esoteric programming language that is inspired by anime girls. Don't ask why I made this.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11648748,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "805f950b726cb67178fdc05e6b65729c5a790b088837fbfee4269ec62ff339ca",
          "md5": "b226596454b4d5d35e47b6fcde286bf3",
          "sha256": "bf2fb3c69b7bba18b74ee180858ae47581a732a47b7f8946dd7ef0d1a9125218"
        },
        "downloads": -1,
        "filename": "senpai_lang-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b226596454b4d5d35e47b6fcde286bf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17664,
        "upload_time": "2021-10-06T20:40:17",
        "upload_time_iso_8601": "2021-10-06T20:40:17.604235Z",
        "url": "https://files.pythonhosted.org/packages/80/5f/950b726cb67178fdc05e6b65729c5a790b088837fbfee4269ec62ff339ca/senpai_lang-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "805f950b726cb67178fdc05e6b65729c5a790b088837fbfee4269ec62ff339ca",
        "md5": "b226596454b4d5d35e47b6fcde286bf3",
        "sha256": "bf2fb3c69b7bba18b74ee180858ae47581a732a47b7f8946dd7ef0d1a9125218"
      },
      "downloads": -1,
      "filename": "senpai_lang-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b226596454b4d5d35e47b6fcde286bf3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17664,
      "upload_time": "2021-10-06T20:40:17",
      "upload_time_iso_8601": "2021-10-06T20:40:17.604235Z",
      "url": "https://files.pythonhosted.org/packages/80/5f/950b726cb67178fdc05e6b65729c5a790b088837fbfee4269ec62ff339ca/senpai_lang-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}