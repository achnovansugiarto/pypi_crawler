{
  "info": {
    "author": "Roman Melamud",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyConversation\n\nZero-dependency library for chat-bot creators with deadlines.\n\nIt allows you to describe a conversation, talk with user according to your schema and restore it, if something went wrong.\n\n### Table of contents\n\n-   <a href=\"#quickstart\">Quickstart</a>\n-   <a href=\"#messages\">Messages</a>\n    -   <a href=\"#text\">Text</a>\n    -   <a href=\"#group\">Group</a>\n    -   <a href=\"#ask\">Ask</a>\n    -   <a href=\"#switch\">Switch</a>\n    -   <a href=\"#list-ask\">ListAsk</a>\n    -   <a href=\"#terminate-group\">TerminateGroup</a>\n    -   <a href=\"#own-messages\">Creating Own Messages</a>\n    -   <a href=\"#message-transfer\">MessageTransfer</a>\n-   <a href=\"#loggers\">Loggers</a>\n    -   <a href=\"#dict-logger\">DictLogger</a>\n    -   <a href=\"#json-file-logger\">JsonFileLogger</a>\n    -   <a href=\"#own-loggers\">Creating Own Loggers</a>\n-   <a href=\"#sender\">Message Sender</a>\n-   <a href=\"#compatibility\">Compatibility</a>\n\n## <a id=\"quickstart\"></a>Quickstart\n\n### First we need to create a message schema, which consists of messages.\n\nMessages describe chat-bot's actions. For instance, send a text message, which doesn't need any feedback or ask a question. Each message has a unique id. Most common types of messages are `Group`, `Text` and `Ask`.\n\nFor full details about different message types <a href=\"#messages\">see Messages</a>\n\n`Group` is a kind of container, that holds list of other messages.\n\n`Text` sends a text message, which doesn't require any feedback.\n\n`Ask` sends a text message and waits for an answer\n\nEnough theory, let's see an example!\n\n```python\nfrom pyconversation import Group, Text, Ask\n\nfruit_bot_conversation = Group(\n    id=\"root\",\n    children=[\n        Text(id=\"root.hello\", text=\"Hello!\"),\n        Ask(id=\"root.fruits\", text=\"What fruits do you like?\"),\n        Text(id=\"root.bye\", text=\"Bye\"),\n    ],\n)\n```\n\nIn this example, we create a schema for simple bot, who asks which fruits does user like. Root message is a `Group`. It holds a block of messages. First of them is a `Text` which sends user a greeting message. Second one (`Ask`) asks about user's favorite fruit and waits for answer. And finally, third `Text` message sends `Bye` to user.\n\n### Second step - we need a logger\n\nLogger is an object, which stores user's answers and message history. This library exposes 2 loggers:\n\n-   `DictLogger` - stores data in a dictionary\n-   `JsonFileLogger` - takes file path as a parameter and stores json data in this file\n\nIf you need something different, <a href=\"#own-loggers\">see Creating Own Loggers</a>\n\nBut now let's use `DictLogger`\n\n```python\nfrom pyconversation import DictLogger\n\nlogger = DictLogger()\n```\n\nThat's all!\n\nFor full loggers documentation <a href=\"#loggers\">see Loggers</a>\n\n### But how to send those messages?\n\nThe answer's simple - using a `MessageSender`!\n\nExample code:\n\n```python\nfrom pyconversation import Group, Text, Ask, DictLogger, MessageSender\n\n# Conversation from step 1\nfruit_bot_conversation = Group(\n    id=\"root\",\n    children=[\n        Text(id=\"root.hello\", text=\"Hello!\"),\n        Ask(id=\"root.fruits\", text=\"What fruits do you like?\"),\n        Text(id=\"root.bye\", text=\"Bye\"),\n    ],\n)\n\n# Logger from step 2\nlogger = DictLogger()\n\n# Initialize a message sender\nsender = MessageSender(\n    root=fruit_bot_conversation, # Our conversation\n    logger=logger, # Our logger\n    send=print # A send function, which takes a string and sends the message. In this case, we use print to log messages to console\n)\n\n# Answer to the question before the first one is always empty\nanswer = None\n\n# Send messages!\nwhile True:\n    # Send messages one by one, until we run into a message, which requires an answer\n    # This function takes answer to previous question as a parameter\n    sender.send_all_skippable(answer)\n\n    # If all messages sent\n    if sender.finished:\n        # Dispose of sender's resources (like open files) and get the result!\n        print(\"\\nResult:\", sender.finalize())\n        break\n\n    # If not all messages have been sent and we still need an answer, ask!\n    answer = input()\n```\n\nDone! If you run this, you'll get the following in the console:\n\n```\nHello!\nWhat fruits do you like?\n<your answer'll be here>\nBye\n\nResult: {'root.fruits': '<your answer>'}\n```\n\nAnd one more example with decorated function (like in real chat-bots):\n\n```python\nbot = ... # Initialize chat bot\n\nsender = None\n\n@bot.connection\ndef on_connection(user_id):\n    sender = MessageSender(\n        root=conversation, # Our conversation\n        logger=logger, # Our logger\n        send=lambda text: bot.send(user_id, text)\n    )\n\n    sender.send_all_skippable(None)\n\n@bot.message\ndef on_message(user_id, message):\n    sender.send_all_skippable(message)\n\n    if sender.finished:\n        print(\"\\nResult:\", sender.finalize())\n        sender = None\n```\n\nFor full message sender documentation <a href=\"#sender\">see Message Sender</a>\n\n### You've created your first chat-bot with clever conversation! Here quick tutorial ends.\n\n## <a id=\"messages\"></a>Messages\n\n### <a id=\"text\"></a>Text\n\nText message sends some text, which doesn't require user's answer\n\nConstructor parameters:\n\n-   `id` (str) - unique message id\n-   `text` (str) - text to send\n\nUsage example:\n\n```python\nText(id=\"hello\", text=\"Hello, user!\")\n```\n\n### <a id=\"group\"></a>Group\n\nGroup is a message, which doesn't send anything and doesn't require an answer. It's just a container for a list of messages\n\nConstructor parameters:\n\n-   `id` (str) - unique message id\n-   `children` (list\\[message\\]) - list of messages to send\n\nUsage example:\n\n```python\nGroup(\n    id=\"group\",\n    children=[\n        Text(id=\"hello\", text=\"Hello!\"),\n        Text(id=\"bye\", text=\"Good bye!\"),\n    ],\n)\n```\n\n### <a id=\"ask\"></a>Ask\n\nAsk message send some text to user and waits for an answer\n\nConstructor parameters:\n\n-   `id` (str) - unique message id\n-   `text` (str) - question text\n\nUsage example:\n\n```python\nAsk(id=\"name\", text=\"What's your name?\")\n```\n\n### <a id=\"switch\"></a>Switch\n\nSwitch message asks user a question and sends a message depending on user's answer.\n\nConstructor parameters:\n\n-   `id` (str) - unique message id\n-   `text` (str) - question text\n-   `answer_map` (dict\\[str, message\\]) - dict, where key is user's answer and value is a message\n-   `fallback` (message?) - message, which'll be sent if answer doesn't match anything in `answer_map` dict\n-   `repeat_on_fallback` (bool?) - if true, after fallback was sent question is asked over and over again until answer matches something in `answer_map` dict\n\nUsage example:\n\n```python\nSwitch(\n    id=\"fruit\"\n    text=\"What fruit do you like?\"\n    answer_map={\n        \"apple\": Text(id=\"apple\", text=\"Yeah, apples are delicious!\"),\n        \"peach\": Text(id=\"peach\", text=\"Me too!\"),\n        \"feijoa\": Text(id=\"feijoa\", text=\"I don't know that fruit!\"),\n    },\n    fallback=Text(id=\"dont_understand\", text=\"Sorry, I didn't understand you\"),\n    repeat_on_fallback=True\n)\n```\n\n### <a id=\"list-ask\"></a>ListAsk\n\nListAsk asks user a question and waits for several answers.\n\nIn result dictionary it's represented by an array.\n\nConstructor parameters:\n\n-   `id` (str) - unique message id\n-   `text` (str) - question text\n-   `stop_command` (str) - if user sends this string as an answer, ListAsk finishes waiting for answers\n-   `max_count` (int?) - maximal count of answers\n\nUsage example:\n\n```python\nListAsk(\n    id=\"fruits\",\n    text=\"What fruits do you like? Enter 'that's all' if you can't remember any more\",\n    stop_command=\"that's all\",\n    max_count=10,\n)\n```\n\n### <a id=\"terminate-group\"></a>TerminateGroup\n\nTerminateGroup sends another message and then terminates sending group, inside which it is located\n\nConstructor parameters:\n\n-   `id` (str) - unique message id\n-   `child` (message?) - message to send before terminating the group\n\nUsage example:\n\n```python\nGroup( # This group's gonna be terminated\n    id=\"group\",\n    children=[\n        Text(id=\"hello\", text=\"Hello!\"),\n        Switch(\n            id=\"bye_condition\",\n            text=\"Can I say bye?\",\n            answer_map={\n                \"yes\": Text(id=\"bye\", text=\"Good bye!\")\n            },\n            fallback=TerminateGroup(\n                id=\"terminate\",\n                child=Text(id=\"eh\", text=\"Eh...\"),\n            ),\n        ),\n        Text(id=\"what\", text=\"What?!\"), # This will not be sent,\n    ],\n)\n```\n\n### <a id=\"own-messages\"></a>Creating Own Messages\n\nEvery message is a class, so to create your own message, you just need to inherit `BaseMessage` class (It can be imported like this: `from pyconversation import BaseMessage`)\n\nUsage example:\n\n```python\nfrom pyconversation import Text, BaseMessage, BaseLogger, MessageTransfer, MessageTransferGenerator\n\nclass HelloMessage(BaseMessage):\n    username: str\n\n    def __init__(self, *, id: str, username: str) -> None:\n        super().__init__(id=id) # BaseMessage takes one parameter - id\n        self.username = username\n\n    def _base_iterator(self, logger: BaseLogger) -> MessageTransferGenerator: # This is an abstract method\n        text_message = Text(id=f\"{self.id}.text\", text=f\"Hello, {self.username}!\")\n\n        yield from text_message.iterator(logger)\n\n        answer = yield MessageTransfer(\n            id=self.id,\n            text=\"Is it your real name?\",\n        )\n\n        logger.log(self.id, answer)\n```\n\nAs you can see, each message has an iterator method, which takes logger as a parameter and returns a generator. Also, this message gets an answer and logs it to logger. Details on how to interact with logger and log answers will be explained in <a href=\"#loggers\">Loggers</a>\n\nBut what is that `MessageTransfer` object? It's used to pass string message to sender and get an answer. Details in next article.\n\n### <a id=\"message-transfer\"></a>MessageTransfer\n\nMessage transfer is used to pass string message to sender and get an answer. It can be `yield`ed from message's generator.\n\nConstructor parameters:\n\n-   `id` (str) - message's unique id\n-   `text` (str?) - text, which'll be sent to user or None, if you don't want to ask any questions, you just need an answer\n-   `skip` (bool?) - if true, this question doesn't need an answer and won't wait for it.\n-   `terminate_group` (bool?) - when this is true, group which intercepted such transfer processes it and terminates.\n\nUsage example in upper **Creating Own Messages** section\n\n## <a id=\"loggers\"></a>Loggers\n\nLoggers are used to store users' answers and message history.\n\nMessage history is a list, where question ids are stored. It's used to restore conversation. For example, if user has already answered several questions and suddenly the server stops, last sent message id will be taken from history, and conversation will begin from the last message.\n\n### <a id=\"dict-logger\"></a>DictLogger\n\nDictLogger stores answers and history in-memory (in a dictionary). So it's just an example to play with the library. Don't use it in production code.\n\nNo constructor parameters.\n\nUsage example:\n\n```python\nlogger = DictLogger()\n```\n\n### <a id=\"json-file-logger\"></a>JsonFileLogger\n\nJsonFileLogger stores everything in a JSON file. JSON file stays on the computer anyway, so when server suddenly stops and the reboots, your bot'll be able to continue conversation from the right place.\n\nConstructor parameters:\n\n-   `file_path` (str) - JSON file's absolute path. It must be unique between all conversations on this server.\n\nUsage example:\n\n```python\nlogger = JsonFileLogger(pathlib.Path(__file__).parent / \"conversation.json\")\n```\n\n### <a id=\"own-loggers\"></a>Creating Own Loggers\n\nIf you need to create your own logger (and you'll need it more often, than creating own messages) you need to inherit the `BaseLogger` class.\n\nIt has the following abstract methods:\n\n-   `log` (-> None) - stores answer by message's unique id\n\n    Parameters:\n\n    -   `id` (str) - message unique id\n    -   `value` (str) - answer\n\n-   `set_array` (-> None) - initializes empty list in answer dictionary using message unique id as a key\n\n    Parameters:\n\n    -   `id` (str) - message unique id\n\n-   `add_array_item` (-> None) - add item to existing list using message id as answer dictionary key\n\n    Parameters:\n\n    -   `id` (str) - message unique id\n    -   `value` (str) - value to add to list\n\n-   `get` (-> union\\[str, list\\[str\\], None\\]) - get message answer or list of answers by message id if exists\n\n    Parameters:\n\n    -   `id` (str) - message unique id\n\n-   `get_result_dict` (-> dict\\[str, union\\[str, list\\[str\\]\\]\\]) - get full answer dictionary\n\n    No parameters\n\nAnd also the following virtual methods (not necessary to implement):\n\n-   `reset_history` (-> None) - remove all elements from message history list\n\n    No parameters\n\n-   `log_last_id` (-> None) - add message id to message history list\n\n    Parameters:\n\n    -   `id` (str) - message unique id\n\n-   `get_last_id` (-> str?) - get last sent message id (last element in message history list)\n\n    No parameters\n\n-   `finalize` (-> None) - dispose of logger's resources (open files, socket connections, etc.)\n\n    **Note**: This method is called when the conversation is finished. So, for instance, `JsonFileLogger` deletes it's data file in this method.\n\n    No parameters\n\nUsage example:\n\n```python\nfrom typing import Union, List, Dict\nfrom pyconversation import BaseLogger\n\nclass MySocketLogger(BaseLogger):\n    socket: Socket\n\n    def __init__(self) -> None:\n        super().__init__()\n        self._connect_socket()\n\n    def log(self, id: str, value: str) -> None:\n        self.socket.emit(\"SET_OR_REPLACE\", {\"id\": id, \"value\": value})\n\n    def set_array(self, id: str) -> None:\n        self.socket.emit(\"SET_OR_REPLACE\", {\"id\": id, \"value\": []})\n\n    def add_array_item(self, id: str, value: str) -> None:\n        self.socket.emit(\"ADD_ARRAY_ITEM\", {\"id\": id, \"value\": value})\n\n    def get(self, id: str) -> Union[str, List[str]]:\n       return self.socket.emit(\"GET\", {\"id\": id})\n\n    def get_result_dict(self) -> Dict[str, Union[str, List[str]]]:\n        return self.socket.emit(\"GET_ALL\")\n\n    def reset_history(self) -> None:\n        self.socket.emit(\"SET_HISTORY\", [])\n\n    def log_last_id(self, id: str) -> None:\n        self.socket.emit(\"ADD_HISTORY\", id)\n\n    def get_last_id(self, id: str) -> Union[str, None]:\n        if not self.socket.emit(\"HISTORY_EMPTY\"):\n            return self.socket.emit(\"GET_LAST_IN_HISTORY\")\n\n    def finalize(self) -> None:\n        self.socket.emit(\"CLEAR_EVERYTHING\")\n        self._disconnect_socket()\n\n    def _connect_socket(self) -> None:\n        self.socket = ... # We'll log our data using a socket\n\n    def _disconnect_socket(self) -> None:\n        self.socket.disconnect()\n        self.socket = None\n```\n\n## <a id=\"sender\"></a>Message Sender\n\nMessage sender is used to simplify conversation restoring and message sending.\n\nConstructor parameters:\n\n-   `root` (message) - root message (aka message schema)\n-   `logger` (logger) - logger\n-   `send` (function (str) -> None) - send function (takes string and sends it to user)\n-   `headline_text` (str?) - text, which'll be sent to user whent message sender is constructed. Whether conversation is constructed or restored, it's sent anyway.\n-   `stop_command` (str?) - if user sends this as an answer, conversation terminates.\n\nExposed properties:\n\n-   `finished` (bool) - is conversation finished (true if all messages have been sent or conversation has been stopped by stop command)\n-   `terminated` (bool) - is conversation terminated (true if conversation was stopped by stop command)\n\nExposed methods:\n\n-   `send_all_skippable`\n    Send all messages until sender runs into a message, which requires an answer.\n\n    Parameters:\n\n    -   `prev_answer` (str?) - answer to previous message\n\nSee usage example in <a href=\"#quickstart\">Quickstart</a>\n\n## <a id=\"compatibility\"></a>Compatibility\n\nThis library is compatible with Python>=3.6\n\n&copy; 2021 Roman Melamud\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/R-Mielamud/py-conversation.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyconversation",
    "package_url": "https://pypi.org/project/pyconversation/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyconversation/",
    "project_urls": {
      "Bugs": "https://github.com/R-Mielamud/py-conversation/issues",
      "Homepage": "https://github.com/R-Mielamud/py-conversation#readme"
    },
    "release_url": "https://pypi.org/project/pyconversation/1.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Zero-dependency library for chat-bot creators with deadlines. It allows you to describe a conversation, talk with user according to your schema and restore it, if something went wrong.",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13249608,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bf1e62f1c45a389430c848ce5d30f41cd608205999799f2bb7fbede0b29c40a",
          "md5": "10f609e1e4afe6cddba5ed57475facc0",
          "sha256": "e93c204f7813a16a5bc04d1e80459a5e812be2b8c2eaea6d0fdf2335d9bd4c85"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10f609e1e4afe6cddba5ed57475facc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14982,
        "upload_time": "2022-02-19T18:33:24",
        "upload_time_iso_8601": "2022-02-19T18:33:24.960060Z",
        "url": "https://files.pythonhosted.org/packages/6b/f1/e62f1c45a389430c848ce5d30f41cd608205999799f2bb7fbede0b29c40a/pyconversation-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21fac07d579dfe007aa9c811fa17e28efa16d74dd9a75ac2c20b6002d5e43750",
          "md5": "46ac07a90efaea91075ed5bf391b0257",
          "sha256": "a08670b56a9c9e11f72c31f6472f99ade86ef79cc436bf5be1867673da096cf1"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "46ac07a90efaea91075ed5bf391b0257",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15102,
        "upload_time": "2022-02-19T18:33:27",
        "upload_time_iso_8601": "2022-02-19T18:33:27.241123Z",
        "url": "https://files.pythonhosted.org/packages/21/fa/c07d579dfe007aa9c811fa17e28efa16d74dd9a75ac2c20b6002d5e43750/pyconversation-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c47f166dabd1fb55453385186abfaa03e2396287539a06850e0b9c3c5df2ae9",
          "md5": "8926aba54d64f873e3a340de9f8e9342",
          "sha256": "da74571ceedb3bdf65f9401e1781015b651d68c9a17ffb48468af51745839686"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8926aba54d64f873e3a340de9f8e9342",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14983,
        "upload_time": "2022-02-19T19:07:23",
        "upload_time_iso_8601": "2022-02-19T19:07:23.285955Z",
        "url": "https://files.pythonhosted.org/packages/5c/47/f166dabd1fb55453385186abfaa03e2396287539a06850e0b9c3c5df2ae9/pyconversation-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc24f6a564026956597a6f69495f0cd2060fae68adde8d51345db53daaba44b2",
          "md5": "dfdba02c4242417939bcaa473b482b06",
          "sha256": "16a4667aec938e42bf74e1f0b06b527c6bd31fc2cb66d4a959cde056e22cb691"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dfdba02c4242417939bcaa473b482b06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15079,
        "upload_time": "2022-02-19T19:07:25",
        "upload_time_iso_8601": "2022-02-19T19:07:25.205872Z",
        "url": "https://files.pythonhosted.org/packages/fc/24/f6a564026956597a6f69495f0cd2060fae68adde8d51345db53daaba44b2/pyconversation-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a0a0e7f6249157d135977b43dc54ed571553381c1d574c15c132b697ac737c4",
          "md5": "6966c0f8ea0a904ac18ddd81745edfc4",
          "sha256": "ded691785f7b401b178ffdfc7f5a8a3792e7a7595f668ca5aef7fbbce5e7ce12"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6966c0f8ea0a904ac18ddd81745edfc4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15242,
        "upload_time": "2022-02-24T22:06:23",
        "upload_time_iso_8601": "2022-02-24T22:06:23.111979Z",
        "url": "https://files.pythonhosted.org/packages/5a/0a/0e7f6249157d135977b43dc54ed571553381c1d574c15c132b697ac737c4/pyconversation-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a76e797052401bf5aa86e925a8809bd83cadd0a17a0547c6e224c997fc8c7af1",
          "md5": "88e2302c79ac7c5222775976e41db78b",
          "sha256": "d357c45246056791f35c2dadc345f72ad7e8ce2e344ebdb1f734398a56253ab6"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "88e2302c79ac7c5222775976e41db78b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15320,
        "upload_time": "2022-02-24T22:06:25",
        "upload_time_iso_8601": "2022-02-24T22:06:25.074253Z",
        "url": "https://files.pythonhosted.org/packages/a7/6e/797052401bf5aa86e925a8809bd83cadd0a17a0547c6e224c997fc8c7af1/pyconversation-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f2d6ee9e3fdc35f8ffe9d61cd200b522756d261f163c9f3476f6e2f35501e1c",
          "md5": "101ab49046b69b1675b2accb55651dcd",
          "sha256": "f9b8f186e07cf7cd8be637055280b97855cc34bcd181f5fd42dced3e5fe19335"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "101ab49046b69b1675b2accb55651dcd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14998,
        "upload_time": "2022-02-25T08:38:48",
        "upload_time_iso_8601": "2022-02-25T08:38:48.694882Z",
        "url": "https://files.pythonhosted.org/packages/6f/2d/6ee9e3fdc35f8ffe9d61cd200b522756d261f163c9f3476f6e2f35501e1c/pyconversation-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1336cd324d0ea192926a4e5334a82460d58f896eebc1a0c409c13af3db8f2d2",
          "md5": "28765d277fb356376b580eb33a0205fd",
          "sha256": "8f92dfc9f4a6e37ad4d823d06a4cda57b7d865e7ab20f492978cac79299ea4d3"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "28765d277fb356376b580eb33a0205fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15109,
        "upload_time": "2022-02-25T08:38:50",
        "upload_time_iso_8601": "2022-02-25T08:38:50.497702Z",
        "url": "https://files.pythonhosted.org/packages/e1/33/6cd324d0ea192926a4e5334a82460d58f896eebc1a0c409c13af3db8f2d2/pyconversation-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d38f9293edcc56ca53b8be2083a4bc0b371f28274d1d29ab1f3c46ecacbd96f4",
          "md5": "6fded226558575ca4a20699261f80457",
          "sha256": "53ac4fb70708db84967595bb0e400b8ba5ebc8dbe30966a7a87fa1b14e49da41"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fded226558575ca4a20699261f80457",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15073,
        "upload_time": "2022-03-22T12:50:35",
        "upload_time_iso_8601": "2022-03-22T12:50:35.535200Z",
        "url": "https://files.pythonhosted.org/packages/d3/8f/9293edcc56ca53b8be2083a4bc0b371f28274d1d29ab1f3c46ecacbd96f4/pyconversation-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2bb1b666b11d8151f1e63bb6172a84ea300701987ac78f4e659a0854a094daa",
          "md5": "9400bdc7162ef2e7028d4415a7a2e7c0",
          "sha256": "2798c594a9b3ea3c07ad0547fbf2b3303777998eeb4a8d97376e438e7e794b2e"
        },
        "downloads": -1,
        "filename": "pyconversation-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9400bdc7162ef2e7028d4415a7a2e7c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15314,
        "upload_time": "2022-03-22T12:50:37",
        "upload_time_iso_8601": "2022-03-22T12:50:37.580919Z",
        "url": "https://files.pythonhosted.org/packages/b2/bb/1b666b11d8151f1e63bb6172a84ea300701987ac78f4e659a0854a094daa/pyconversation-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d38f9293edcc56ca53b8be2083a4bc0b371f28274d1d29ab1f3c46ecacbd96f4",
        "md5": "6fded226558575ca4a20699261f80457",
        "sha256": "53ac4fb70708db84967595bb0e400b8ba5ebc8dbe30966a7a87fa1b14e49da41"
      },
      "downloads": -1,
      "filename": "pyconversation-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6fded226558575ca4a20699261f80457",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15073,
      "upload_time": "2022-03-22T12:50:35",
      "upload_time_iso_8601": "2022-03-22T12:50:35.535200Z",
      "url": "https://files.pythonhosted.org/packages/d3/8f/9293edcc56ca53b8be2083a4bc0b371f28274d1d29ab1f3c46ecacbd96f4/pyconversation-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2bb1b666b11d8151f1e63bb6172a84ea300701987ac78f4e659a0854a094daa",
        "md5": "9400bdc7162ef2e7028d4415a7a2e7c0",
        "sha256": "2798c594a9b3ea3c07ad0547fbf2b3303777998eeb4a8d97376e438e7e794b2e"
      },
      "downloads": -1,
      "filename": "pyconversation-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "9400bdc7162ef2e7028d4415a7a2e7c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15314,
      "upload_time": "2022-03-22T12:50:37",
      "upload_time_iso_8601": "2022-03-22T12:50:37.580919Z",
      "url": "https://files.pythonhosted.org/packages/b2/bb/1b666b11d8151f1e63bb6172a84ea300701987ac78f4e659a0854a094daa/pyconversation-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}