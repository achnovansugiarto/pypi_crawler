{
  "info": {
    "author": "Marco C Lam",
    "author_email": "lam@mail.tau.ac.il",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# WDPhotTools\n\n![example workflow name](https://github.com/cylammarco/WDPhotTools/workflows/Python%20package/badge.svg)\n[![Coverage Status](https://coveralls.io/repos/github/cylammarco/WDPhotTools/badge.svg?branch=main)](https://coveralls.io/github/cylammarco/WDPhotTools?branch=main)\n[![Documentation Status](https://readthedocs.org/projects/wdphottools/badge/?version=latest)](https://wdphottools.readthedocs.io/en/latest/?badge=latest)\n[![PyPI version](https://badge.fury.io/py/wdphottools.svg)](https://badge.fury.io/py/wdphottools)\n[![DOI](https://zenodo.org/badge/310723364.svg)](https://zenodo.org/badge/latestdoi/310723364)\n[![arXiv](https://img.shields.io/badge/arXiv-2205.15321-00ff00.svg)](https://arxiv.org/abs/2205.15321)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/wdphottools)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/0c8fae5312564fffb1aed3a862009fe5)](https://www.codacy.com/gh/cylammarco/WDPhotTools/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=cylammarco/WDPhotTools&amp;utm_campaign=Badge_Grade)\n\nThis software can generate colour-colour diagram, colour-magnitude diagram in various photometric systems, plotting cooling profiles from different models, and compute theoretical white dwarf luminosity functions based on the built-in or supplied models of (1) initial mass function, (2) total stellar evolution lifetime, (3) initial-final mass relation, and (4) white dwarf cooling time.\n\nthe core parts of this work are three-fold: the first and the backbone of this work is the formatters that handle the output models from various works in the format as they are downloaded. This will allow the software to be updated with the newer models easily in the future. The second core part is the photometric fitter that solves for the WD parameters based on the photometry, with or without distance and reddening. The last part is to generate white dwarf luminosity function in bolometric magnitudes or in any of the photometric systems availalbe from the atmosphere model.\n\nWhen using the `RBFInterpolator`, we strongly encourage the use of scipy 1.9 which provides a speed gain of O(100) times.\n\n## Documentation\n\nDocumentation and more examples can be found at [Read the Docs](https://wdphottools.readthedocs.io/en/latest/).\n\n## Attribution\n\nIf you have made use of the WDPhotTools, we would appreciate if you can refernce the follow article and the software itself. The BibTex of the two items are::\n\n```bash\n@ARTICLE{2022arXiv220515321L,\n        author = {{Lam}, M.~C. and {Yuen}, K.~W. and {Li}, W. and {Green}, M.~J.},\n        title = \"{WDPhotTools -- A White Dwarf Photometric Toolkit in Python}\",\n        journal = {arXiv e-prints},\n        keywords = {Astrophysics - Instrumentation and Methods for Astrophysics, Astrophysics - Solar and Stellar Astrophysics},\n            year = 2022,\n        month = may,\n            eid = {arXiv:2205.15321},\n        pages = {arXiv:2205.15321},\narchivePrefix = {arXiv},\n        eprint = {2205.15321},\n    primaryClass = {astro-ph.IM},\n        adsurl = {https://ui.adsabs.harvard.edu/abs/2022arXiv220515321L},\n        adsnote = {Provided by the SAO/NASA Astrophysics Data System}\n}\n```\n\nand\n\n```bash\n@software{marco_c_lam_2022_6595030,\n    author       = {Marco C Lam and\n                    K Yuen},\n    title        = {WDPhotTools: A White Dwarf Photometric Toolkit in Python},\n    month        = may,\n    year         = 2022,\n    publisher    = {Zenodo},\n    doi          = {10.5281/zenodo.6595029},\n    url          = {https://doi.org/10.5281/zenodo.6595029}\n}\n```\n\n## Model Inspection\n\n### Plotting the WD cooling sequence in Gaia filters\n\nThe cooling models only include the modelling of the bolometric lumninosity, the synthetic photometry is not usually provided. We have included the synthetic colours computed by the [Montreal group](http://www.astro.umontreal.ca/~bergeron/CoolingModels/). By default, it maps the (logg, Mbol) to Gaia G band (DR3). The DA cooling tracks can be generated with\n\n```python\nfrom WDPhotTools import plotter\n\nplotter.plot_atmosphere_model(invert_yaxis=True)\n```\n\n![alt text](https://github.com/cylammarco/WDPhotTools/blob/main/example/example_output/DA_cooling_tracks_from_plotter.png?raw=true)\n\nor with finer control by using the interpolators\n\n```python\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nfrom WDPhotTools.atmosphere_model_reader import atm_reader\n\natm = atm_reader()\n\n# Default passband is G3\nG = atm.interp_atm()\nBP = atm.interp_atm(dependent=\"G3_BP\")\nRP = atm.interp_atm(dependent=\"G3_RP\")\n\nlogg = np.arange(7.0, 9.5, 0.5)\nMbol = np.arange(0.0, 20.0, 0.1)\n\nplt.figure(1, figsize=(8, 8))\nfor i in logg:\n    logg_i = np.ones_like(Mbol) * i\n    plt.plot(\n        BP(logg_i, Mbol) - RP(logg_i, Mbol),\n        G(logg_i, Mbol),\n        label=r\"$\\log(g) = {}$\".format(i),\n    )\n\nplt.ylim(20.0, 6.0)\nplt.grid()\nplt.legend()\nplt.xlabel(\"(BP - RP) / mag\")\nplt.ylabel(\"G / mag\")\nplt.title(\"DA Cooling tracks\")\nplt.tight_layout()\n```\n\n![alt text](https://github.com/cylammarco/WDPhotTools/blob/main/example/example_output/DA_cooling_tracks.png?raw=true)\n\n### Plotting the cooling models\n\nThe cooling sequence above is mostly concerned with the synthetic photometry, in this example, it is mostly regarding the physical properties beneath the photosphere. To check what models are embedded, you can use:\n\n```python\nfrom WDPhotTools.cooling_model_reader import cm_reader\n\ncr = cm_reader()\ncr.list_cooling_model()\n```\n\nThis should output:\n\n```python\nModel: montreal_co_da_20, Reference: Bedard et al. 2020 CO DA\nModel: montreal_co_db_20, Reference: Bedard et al. 2020 CO DB\nModel: lpcode_he_da_07, Reference: Panei et al. 2007 He DA\nModel: lpcode_co_da_07, Reference: Panei et al. 2007 CO DA\nModel: lpcode_he_da_09, Reference: Althaus et al. 2009 He DA\nModel: lpcode_co_da_10_z001, Reference: Renedo et al. 2010 CO DA Z=0.01\nModel: lpcode_co_da_10_z0001, Reference: Renedo et al. 2010 CO DA Z=0.001\nModel: lpcode_co_da_15_z00003, Reference: Althaus et al. 2015 DA Z=0.00003\nModel: lpcode_co_da_15_z0001, Reference: Althaus et al. 2015 DA Z=0.0001\nModel: lpcode_co_da_15_z0005, Reference: Althaus et al. 2015 DA Z=0.0005\nModel: lpcode_co_db_17_z00005, Reference: Althaus et al. 2017 DB Y=0.4\nModel: lpcode_co_db_17_z0001, Reference: Althaus et al. 2017 DB Y=0.4\nModel: lpcode_co_db_17, Reference: Camisassa et al. 2017 DB\nModel: basti_co_da_10, Reference: Salaris et al. 2010 CO DA\nModel: basti_co_db_10, Reference: Salaris et al. 2010 CO DB\nModel: basti_co_da_10_nps, Reference: Salaris et al. 2010 CO DA, no phase separation\nModel: basti_co_db_10_nps, Reference: Salaris et al. 2010 CO DB, no phase separation\nModel: lpcode_one_da_07, Reference: Althaus et al. 2007 ONe DA\nModel: lpcode_one_da_19, Reference: Camisassa et al. 2019 ONe DA\nModel: lpcode_one_db_19, Reference: Camisassa et al. 2019 ONe DB\nModel: mesa_one_da_18, Reference: Lauffer et al. 2018 ONe DA\nModel: mesa_one_db_18, Reference: Lauffer et al. 2018 ONe DB\n```\n\nAnd once you have picked a model, you can inspect what parameters are available with the model by supplying the model name, for example:\n\n```python\ncr.list_cooling_parameters('basti_co_da_10')\n```\n\nwhich will print\n\n```bash\nAvailable WD mass: [0.54 0.55 0.61 0.68 0.77 0.87 1.   1.1  1.2 ]\nParameter: log(Age), Column Name: age, Unit: (Gyr)\nParameter: Mass, Column Name: mass, Unit: M$_{\\odot}$\nParameter: log(T$_{\\mathrm{eff}})$, Column Name: Teff, Unit: (K)\nParameter: Luminosity, Column Name: lum, Unit: L$_{\\odot}$\nParameter: u, Column Name: u, Unit: mag\nParameter: g, Column Name: g, Unit: mag\nParameter: r, Column Name: r, Unit: mag\nParameter: i, Column Name: i, Unit: mag\nParameter: z, Column Name: z, Unit: mag\n```\n\nKnowing which model and parameter you have access to, you can do basic visualisation using the default plotting funtion with the plotter again:\n\n```python\nfrom WDPhotTools import plotter\n\nplotter.plot_cooling_model(mass=[0.2, 0.4, 0.6, 0.8, 1.0])\n```\n\n![alt text](https://github.com/cylammarco/WDPhotTools/blob/main/example/example_output/DA_cooling_model_from_plotter.png?raw=true)\n\nWith a finer control of the `cooling_model_reader`, it is easy to work with more advanced model usage and visulations, for example, we can compare the effect of phase separation in Salaris et al. 2010, see [this example script](https://github.com/cylammarco/WDPhotTools/blob/main/example/compare_ps_cooling_rates.py).\n\n![alt text](https://github.com/cylammarco/WDPhotTools/blob/main/example/example_output/compare_ps_cooling_rates.png?raw=true)\n\n## Photometric fitting\n\nWe provide 3 minimisers for fitting with synthetic photometry: `scipy.optimize.minimize`, `scipy.optimize.least_squares` and `emcee` (with the option to refine with a `scipy.optimize.minimize` in a bounded region.)\n\n### An example photometric fit of PSO J1801+6254 in 3 Gaia, 5 Pan-STARRS and 3 NIR filters without providing a distance\n\n```python\nfrom WDPhotTools.fitter import WDfitter\nftr = WDfitter()\n\nftr.fit(\n    atmosphere=\"H\",\n    filters=[\"g_ps1\", \"r_ps1\", \"i_ps1\", \"z_ps1\", \"y_ps1\", \"G3\", \"G3_BP\", \"G3_RP\", \"J_mko\", \"H_mko\", \"K_mko\"],\n    mags=[21.1437, 19.9678, 19.4993, 19.2981, 19.1478, 20.0533, 20.7883, 19.1868, 19.45-0.91, 19.96-1.39, 20.40-1.85],\n    mag_errors=[0.0321, 0.0229, 0.0083, 0.0234, 0.0187, 0.006322, 0.118615, 0.070880, 0.05, 0.03, 0.05],\n    independent=[\"Teff\", \"logg\"],\n    initial_guess=[4000.0, 7.5],\n    distance=71.231,\n    distance_err=2.0,\n    method='emcee',\n    nwalkers=100,\n    nsteps=1000,\n    nburns=100\n)\nftr.show_best_fit(display=False)\nftr.show_corner_plot(\n    figsize=(10, 10),\n    display=True,\n    kwarg={\n        \"quantiles\": [0.158655, 0.5, 0.841345],\n        \"show_titles\": True,\n        \"truths\": [3550, 7.45],\n    },\n)\n```\n\n### Reddening model\n\nThe default setup assumes the provided reddening is the total amount at the given distance.  Hence, it is the mode `total` in the `set_extinction_mode`. However, if the reddening at the distance is not known, a fractional value as a linear function of distance from the galactic plane can be used with model `linear`, with the `z_min` and `z_max` provided as the range in which the reddening is linearly interpolated such at E(B-V) = 0.0 at a z(distance, ra, dec) smaller than or equal to `z_min`, and E(B-V) equals the total reddening at z(distance, ra, dec) greater than or equal to `z_min`. The conversion from (distance, ra, dec) to Galactic (x, y, z) cartesian coordinate makes use of the Astropy Coordinate pacakge and their default values for the geometry of the Galaxy and the Sun. This is adapted from [Harris et al. (2006)](https://arxiv.org/pdf/astro-ph/0510820.pdf) (footnote on page 5).\n\n```python\nftr = WDfitter()\n# the fitter will be using this configuration after setting it in the beginning\nftr.set_extinction_mode(mode=\"linear\", z_min=100.0, z_max=250.0)\n# Calling the private function as an example\nftr._get_extinction_fraction(\n            distance=175.0,\n            ra=192.85949646,\n            dec=27.12835323,\n        )\n>>> 0.6386628473110217\n```\n\n### Retrieving the fitted solution(s)\n\n#### `scipy.optimize`\n\nAfter using `minimize` or `least_squares` as the fitting method, the fitted solution natively returned from the respective minimizer will be stored in `ftr.results`. The best fit parameters can be retrieved from `self.best_fit_params`. For example, if `minimize` is used for fitting both DA and DB, the solutions should be populated like this:\n\n```python\n>>> ftr.results\n{'H':  final_simplex: (array([[15.74910563,  7.87520654],\n    [15.74910582,  7.87521853],\n    [15.74911116,  7.87521092]]), array([48049.35474212, 48049.35474769, 48049.35481848]))\n        fun: 48049.35474211679\n    message: 'Optimization terminated successfully.'\n        nfev: 76\n        nit: 39\n        status: 0\n    success: True\n            x: array([15.74910563,  7.87520654]), 'He':  final_simplex: (array([[15.79568165,  8.02103768],\n    [15.79569834,  8.02106531],\n    [15.79567785,  8.02106278]]), array([229832.28271338, 229832.28273065, 229832.28280722]))\n        fun: 229832.28271338015\n    message: 'Optimization terminated successfully.'\n        nfev: 77\n        nit: 39\n        status: 0\n    success: True\n            x: array([15.79568165,  8.02103768])}\n>>> ftr.best_fit_params\n{'H': {'chi2': 48049.35474211679, 'Mbol': 15.749105627543678, 'logg': 7.8752065443415855, 'g_ps1': 16.69916986233527, 'distance': 71.231, 'dist_mod': 4.263345206871898, 'r_ps1': 15.70245142010905, 'i_ps1': 15.27999922650563, 'z_ps1': 15.09081392652083, 'y_ps1': 15.024638867608507, 'G3': 15.712770938687193, 'G3_BP': 16.412224345060014, 'G3_RP': 14.909077154537117, 'J_mko': 14.184631300400948, 'H_mko': 14.346932580334999, 'K_mko': 14.45762496540764, 'Teff': 3938.3629810184757, 'Av_g_ps1': 0.0, 'Av_r_ps1': 0.0, 'Av_i_ps1': 0.0, 'Av_z_ps1': 0.0, 'Av_y_ps1': 0.0, 'Av_G3': 0.0, 'Av_G3_BP': 0.0, 'Av_G3_RP': 0.0, 'Av_J_mko': 0.0, 'Av_H_mko': 0.0, 'Av_K_mko': 0.0, 'mass': 0.5012792858359962, 'age': 8476557147.551262}, 'He': {'chi2': 229832.28271338015, 'Mbol': 15.795681651022917, 'logg': 8.021037682319758, 'g_ps1': 16.647080466245477, 'distance': 71.231, 'dist_mod': 4.263345206871898, 'r_ps1': 15.864271909334223, 'i_ps1': 15.47707317676176, 'z_ps1': 15.301590157883489, 'y_ps1': 15.223378346895153, 'G3': 15.850502814794408, 'G3_BP': 16.447663029663754, 'G3_RP': 15.106868401061806, 'J_mko': 14.263205256499184, 'H_mko': 14.008369006244761, 'K_mko': 14.06873997553539, 'Teff': 4086.859143309932, 'Av_g_ps1': 0.0, 'Av_r_ps1': 0.0, 'Av_i_ps1': 0.0, 'Av_z_ps1': 0.0, 'Av_y_ps1': 0.0, 'Av_G3': 0.0, 'Av_G3_BP': 0.0, 'Av_G3_RP': 0.0, 'Av_J_mko': 0.0, 'Av_H_mko': 0.0, 'Av_K_mko': 0.0, 'mass': 0.5814194593591747, 'age': 7729298854.568574}}\n```\n\n#### `emcee`\n\nAfter using `emcee` for sampling, the sampler and samples can be found in `ftr.sampler`` and`ftr.samples`` respectively. The median of the samples of each parameter is stored in `ftr.best_fit_params`, while `ftr.results` would be empty. In this case, if we are fitting for the DA solutions only, we should have, for example,\n\n```python\n>>> ftr.results\n{'H': {}, 'He': {}}\n\n>>> ftr.best_fit_params\n{'H': {'Teff': 3945.625635361961, 'logg': 7.883639838582892, 'g_ps1': 16.697125671252905, 'distance': 71.231, 'dist_mod': 4.263345206871898, 'r_ps1': 15.704045244111995, 'i_ps1': 15.283491818672182, 'z_ps1': 15.09508631221802, 'y_ps1': 15.027169564857946, 'G3': 15.715149775870088, 'G3_BP': 16.41201611210156, 'G3_RP': 14.912271357471289, 'J_mko': 14.18413410444271, 'H_mko': 14.34993093524838, 'K_mko': 14.462282105594221, 'Av_g_ps1': 0.0, 'Av_r_ps1': 0.0, 'Av_i_ps1': 0.0, 'Av_z_ps1': 0.0, 'Av_y_ps1': 0.0, 'Av_G3': 0.0, 'Av_G3_BP': 0.0, 'Av_G3_RP': 0.0, 'Av_J_mko': 0.0, 'Av_H_mko': 0.0, 'Av_K_mko': 0.0, 'mass': 0.5068082166552429, 'Mbol': 15.752000094345544, 'age': 8412958994.73455}, 'He': {}}\n```\n\nIf you want to fully explore the infromation stored in the fitting object, use `ftr.__dict__`, or just the keys with `ftr.__dict__.keys()`.\n\n![alt text](https://github.com/cylammarco/WDPhotTools/blob/main/example/example_output/PSOJ1801p6254_emcee.png?raw=true)\n\nAnd the associated corner plot where the blue line shows the true value. As we are not providing a distance in this case, as expected from the degeneracy between fitting distance and stellar radius (directly translate to logg in the fit), both truth values are well outside of the probability density maps in the corner plot:\n\n![alt text](https://github.com/cylammarco/WDPhotTools/blob/main/example/example_output/PSOJ1801p6254_emcee_corner.png?raw=true)\n\n## Theoretical White Dwarf Luminosity Function\n\nThe options for the various models include:\n\n### Initial Mass Function\n\n1.  Kroupa 2001\n2.  Charbrier 2003\n3.  Charbrier 2003 (including binary)\n4.  Manual\n\n### Total Stellar Evolution Lifetime\n\n1.  PARSECz00001 - Z = 0.0001, Y = 0.249\n2.  PARSECz00002 - Z = 0.0002, Y = 0.249\n3.  PARSECz00005 - Z = 0.0005, Y = 0.249\n4.  PARSECz0001 - Z = 0.001, Y = 0.25\n5.  PARSECz0002 - Z = 0.002, Y = 0.252\n6.  PARSECz0004 - Z = 0.004, Y = 0.256\n7.  PARSECz0006 - Z = 0.006, Y = 0.259\n8.  PARSECz0008 - Z = 0.008, Y = 0.263\n9.  PARSECz001 - Z = 0.01, Y = 0.267\n10. PARSECz0014 - Z = 0.014, Y = 0.273\n11. PARSECz0017 - Z = 0.017, Y = 0.279\n12. PARSECz002 - Z = 0.02, Y = 0.284\n13. PARSECz003 - Z = 0.03, Y = 0.302\n14. PARSECz004 - Z = 0.04, Y = 0.321\n15. PARSECz006 - Z = 0.06, Y = 0.356\n16. GENEVAz002 - Z = 0.002\n17. GENEVAz006 - Z = 0.006\n18. GENEVAz014 - Z = 0.014\n19. MISTFem400 - \\[Fe/H\\] = -4.0\n20. MISTFem350 - \\[Fe/H\\] = -3.5\n21. MISTFem300 - \\[Fe/H\\] = -3.0\n22. MISTFem250 - \\[Fe/H\\] = -2.5\n23. MISTFem200 - \\[Fe/H\\] = -2.0\n24. MISTFem175 - \\[Fe/H\\] = -1.75\n25. MISTFem150 - \\[Fe/H\\] = -1.5\n26. MISTFem125 - \\[Fe/H\\] = -1.25\n27. MISTFem100 - \\[Fe/H\\] = -1.0\n28. MISTFem075 - \\[Fe/H\\] = -0.75\n29. MISTFem050 - \\[Fe/H\\] = -0.5\n30. MISTFem025 - \\[Fe/H\\] = -0.25\n31. MISTFe000 - \\[Fe/H\\] = 0.0\n32. MISTFe025 - \\[Fe/H\\] = 0.25\n33. MISTFe050 - \\[Fe/H\\] = 0.5\n34. Manual\n\n### Initial-Final Mass Relation\n\n1.  C08 - Catalan et al. 2008\n2.  C08b - Catalan et al. 2008 (two-part)\n3.  S09 - Salaris et al. 2009\n4.  S09b - Salaris et al. 2009 (two-part)\n5.  W09 - Williams, Bolte & Koester 2009\n6.  K09 - Kalirai et al. 2009\n7.  K09b - Kalirai et al. 2009 (two-part)\n8.  C18 - Cummings et al. 2018\n9.  EB18 - El-Badry et al. 2018\n10. Manual\n\n### White Dwarf cooling time\n\nL/I/H are used to denote the availability in the low, intermediate and high mass models, where the dividing points are at 0.5 and 1.0 solar masses.\n\nThe brackets denote the core type/atmosphere type/mass range/other special properties.\n\n1.  Montreal models\n\n    -   Bedard et al. 2020 - LIH \\[CO/DA+DB/0.2-1.3\\]\n\n2.  LaPlata models\n\n    -   Panei et al. 2007 - L \\[He+CO/DA/0.187-0.448\\]\n    -   Althaus et al. 2009 - L \\[He/DA/0.220-0.521\\]\n    -   Renedo et al. 2010 - I \\[CO/DA/0.505-0.934/Z=0.001-0.01\\]\n    -   Althaus et al. 2015 - I \\[CO/DA/0.506-0.826/Z=0.0003-0.001\\]\n    -   Althaus et al. 2017 - LI \\[CO/DA/0.434-0.838/Y=0.4\\]\n    -   Camisassa et al. 2017 - I \\[CO/DB/0.51-1.0\\]\n    -   Althaus et al. 2007 - H \\[ONe/DA/1.06-1.28\\]\n    -   Camisassa et al. 2019 - H \\[ONe/DA+B/1.10-1.29\\]\n\n3.  BaSTI models\n\n    -   Salaris et al. 2010 - IH \\[CO/DA+B/0.54-1.2/ps+nps\\]\n\n4.  MESA models\n\n    -   Lauffer et al. 2018 - H \\[CONe/DA+B/1.012-1.308\\]\n\n#### Example sets of WDLFs with different star formation scenario\n\nThe following excerpt demonstrate how to generate luminosity functions with constant, burst and exponentially decaying\n\n```python\nimport os\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nfrom WDPhotTools import theoretical_lf\n\nwdlf = theoretical_lf.WDLF()\nwdlf.set_ifmr_model(\"C08\")\nwdlf.compute_cooling_age_interpolator()\n\nMag = np.arange(0, 20.0, 0.1)\nage_list = 1e9 * np.arange(2, 15, 2)\n\nconstant_density = []\nburst_density = []\ndecay_density = []\n\nfor i, age in enumerate(age_list):\n\n    # Constant SFR\n    wdlf.set_sfr_model(mode=\"constant\", age=age)\n    constant_density.append(wdlf.compute_density(Mag=Mag)[1])\n\n    # Burst SFR\n    wdlf.set_sfr_model(mode=\"burst\", age=age, duration=1e8)\n    burst_density.append(wdlf.compute_density(Mag=Mag)[1])\n\n    # Exponential decay SFR\n    wdlf.set_sfr_model(mode=\"decay\", age=age)\n    decay_density.append(wdlf.compute_density(Mag=Mag)[1])\n\n# normalise the WDLFs relative to the density at 10 mag\nconstant_density = [constant_density[i]/constant_density[i][Mag==10.0] for i in range(len(constant_density))]\nburst_density = [burst_density[i]/burst_density[i][Mag==10.0] for i in range(len(burst_density))]\ndecay_density = [decay_density[i]/decay_density[i][Mag==10.0] for i in range(len(decay_density))]\n\nfig1, (ax1, ax2, ax3) = plt.subplots(3, 1, sharex=True, sharey=True, figsize=(10, 15))\n\nfor i, age in enumerate(age_list):\n    ax1.plot(\n        Mag, np.log10(constant_density[i]), label=\"{0:.2f} Gyr\".format(age / 1e9)\n    )\n    ax2.plot(\n        Mag, np.log10(burst_density[i])\n    )\n    ax3.plot(\n        Mag, np.log10(decay_density[i])\n    )\n\nax1.legend()\nax1.grid()\nax1.set_xlim(0, 20)\nax1.set_ylim(-3.75, 2.75)\nax1.set_title(\"Constant\")\n\nax2.grid()\nax2.set_ylabel(\"log(arbitrary number density)\")\nax2.set_title(\"100 Myr Burst\")\n\nax3.grid()\nax3.set_xlabel(r\"G$_{DR3}$ / mag\")\nax3.set_title(r\"Exponential Decay ($\\tau=3\\,Gyr$)\")\n\nplt.subplots_adjust(left=0.15, right=0.98, top=0.96, bottom=0.075)\nplt.show()\n```\n\n![alt text](https://github.com/cylammarco/WDPhotTools/blob/main/example/example_output/wdlf_compare_sfr.png?raw=true)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/cylammarco/WDPhotTools",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://wdphottools.readthedocs.io/en/latest/?badge=latest",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "Marco C Lam",
    "maintainer_email": "lam@mail.tau.ac.il",
    "name": "wdphottools",
    "package_url": "https://pypi.org/project/wdphottools/",
    "platform": null,
    "project_url": "https://pypi.org/project/wdphottools/",
    "project_urls": {
      "Download": "https://github.com/cylammarco/WDPhotTools",
      "Homepage": "https://wdphottools.readthedocs.io/en/latest/?badge=latest"
    },
    "release_url": "https://pypi.org/project/wdphottools/0.0.7/",
    "requires_dist": [
      "numpy (>=1.19)",
      "scipy (>=1.7.3)",
      "matplotlib (>=3.5)",
      "emcee (>=3.0)",
      "corner (>2.2)",
      "astropy (>=4.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "A White Dwarf Photometric Toolkit in Python",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15984718,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "108458d7d2a8b25ad0e82c6fbbbf793c1e5b0570a5350b1b3bcc251c9fb015fe",
          "md5": "6a4cb5e7ba0a7d607b14a6dfe4c0fc2b",
          "sha256": "4d581ccf961ae0ea714c111c90b61bbbca380268f1bf2ee53e38c513d9014261"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a4cb5e7ba0a7d607b14a6dfe4c0fc2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15222815,
        "upload_time": "2022-05-22T11:05:37",
        "upload_time_iso_8601": "2022-05-22T11:05:37.828889Z",
        "url": "https://files.pythonhosted.org/packages/10/84/58d7d2a8b25ad0e82c6fbbbf793c1e5b0570a5350b1b3bcc251c9fb015fe/wdphottools-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6188ba10ad74046f718cd641f56e83b932c988c802a92a984bcc195f8fc77df",
          "md5": "9e0f2cf393f96a2b88b4ae116d1e2469",
          "sha256": "555912a59fd96984c8e17b86b0e580266186a826d5069c0f62f066d0bcf121d6"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e0f2cf393f96a2b88b4ae116d1e2469",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14927070,
        "upload_time": "2022-05-22T11:05:41",
        "upload_time_iso_8601": "2022-05-22T11:05:41.556897Z",
        "url": "https://files.pythonhosted.org/packages/c6/18/8ba10ad74046f718cd641f56e83b932c988c802a92a984bcc195f8fc77df/wdphottools-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56ff997941414dcd578245bfe503156b2c5a0e2a34520f2c7dc9c586f393c705",
          "md5": "dc97cd3f20a3a4b544ff86d595a8d209",
          "sha256": "a3da5aa5f333df99caced958b04a59324009338c0148875a2f59ec75e38ef8f9"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc97cd3f20a3a4b544ff86d595a8d209",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15223447,
        "upload_time": "2022-06-14T18:48:35",
        "upload_time_iso_8601": "2022-06-14T18:48:35.427250Z",
        "url": "https://files.pythonhosted.org/packages/56/ff/997941414dcd578245bfe503156b2c5a0e2a34520f2c7dc9c586f393c705/wdphottools-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d1a01dab8034b6e909e9c9416ffdadcf1094dbeb199a4b8cccda49635cb0341",
          "md5": "433ade091166ec370145727d8db4a12e",
          "sha256": "e132a1b2f9cb24d8de100ebc7fbb29fc7284a3cc01ef21f97782ede77871bafc"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "433ade091166ec370145727d8db4a12e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14929059,
        "upload_time": "2022-06-14T18:48:39",
        "upload_time_iso_8601": "2022-06-14T18:48:39.115826Z",
        "url": "https://files.pythonhosted.org/packages/7d/1a/01dab8034b6e909e9c9416ffdadcf1094dbeb199a4b8cccda49635cb0341/wdphottools-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a65e55761475d460427f4ff8f48218b32569916c6b42ab0d4c22db002445523",
          "md5": "806feb41763566d2ae4427bd2e0654cf",
          "sha256": "5353fae773d4c7e1573aeade26dbdb8a1e49831d078b589b38ed17f156bea8e2"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "806feb41763566d2ae4427bd2e0654cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15223473,
        "upload_time": "2022-06-29T00:29:39",
        "upload_time_iso_8601": "2022-06-29T00:29:39.855199Z",
        "url": "https://files.pythonhosted.org/packages/3a/65/e55761475d460427f4ff8f48218b32569916c6b42ab0d4c22db002445523/wdphottools-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37665c0634ef69343417275cecff7dac20bcf474da52e5c969d7d19babd46796",
          "md5": "c202b273abc51d2d38f6aa6a79df4929",
          "sha256": "5b03404b590e4374273b7be756d8c44a73ac6c67c9558b966e977836da9a59dc"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c202b273abc51d2d38f6aa6a79df4929",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14929164,
        "upload_time": "2022-06-29T00:29:42",
        "upload_time_iso_8601": "2022-06-29T00:29:42.521833Z",
        "url": "https://files.pythonhosted.org/packages/37/66/5c0634ef69343417275cecff7dac20bcf474da52e5c969d7d19babd46796/wdphottools-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81a7274da3e0c4b6c4247a6ccfbd182911a2cb7a9a533fef39004ab69f853e93",
          "md5": "4e378534dd7572577fc4c0222694e005",
          "sha256": "32306bbaae826605aa3a458c959cbe9570217ae960b5242d9d1db751f6946b94"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e378534dd7572577fc4c0222694e005",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 43673541,
        "upload_time": "2022-08-09T12:47:16",
        "upload_time_iso_8601": "2022-08-09T12:47:16.721784Z",
        "url": "https://files.pythonhosted.org/packages/81/a7/274da3e0c4b6c4247a6ccfbd182911a2cb7a9a533fef39004ab69f853e93/wdphottools-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ea7689c7238cd9d46fe7d386dfee1e623c74b499cda11528a62ab0f5a2e0bce",
          "md5": "b1c42bf8bdc27a4d556ca094f06548da",
          "sha256": "cb2b7b810019ecd2e9503e9e59e0efb20eae1b577db2a5363a645a8fd2623bfc"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b1c42bf8bdc27a4d556ca094f06548da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 56104587,
        "upload_time": "2022-08-09T12:48:16",
        "upload_time_iso_8601": "2022-08-09T12:48:16.531691Z",
        "url": "https://files.pythonhosted.org/packages/0e/a7/689c7238cd9d46fe7d386dfee1e623c74b499cda11528a62ab0f5a2e0bce/wdphottools-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a2d83a7cdce8599ced3c11097a72ce1b08ff1dcde57201963a2532d83a54fdb",
          "md5": "9eb477e99a252d40df310b4cf80c5773",
          "sha256": "88eaafcc8833ffdd7a3705dcb27354a3f24b373876a269fc3ae936d5a6fd1f8e"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9eb477e99a252d40df310b4cf80c5773",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15225962,
        "upload_time": "2022-09-12T00:23:32",
        "upload_time_iso_8601": "2022-09-12T00:23:32.862586Z",
        "url": "https://files.pythonhosted.org/packages/2a/2d/83a7cdce8599ced3c11097a72ce1b08ff1dcde57201963a2532d83a54fdb/wdphottools-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b6f18e057c8926b68b3523b80a20553b2f42fba85b50970876834b9394be7c3",
          "md5": "6d46ca14daf0a19cb6aa2ce90c707295",
          "sha256": "e72d569d68917eae09f1dc1730ba7291901fe26140057fc4773b96d002b8cccf"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6d46ca14daf0a19cb6aa2ce90c707295",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14934111,
        "upload_time": "2022-09-12T00:23:37",
        "upload_time_iso_8601": "2022-09-12T00:23:37.216307Z",
        "url": "https://files.pythonhosted.org/packages/6b/6f/18e057c8926b68b3523b80a20553b2f42fba85b50970876834b9394be7c3/wdphottools-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a879453bc98b99c283441b7f212d182b69d218b7048f183a62dacc961d1f05b7",
          "md5": "e1ab30b69444fff98d727990a6e1a688",
          "sha256": "666a2a26329adce2ef461546d7bfeb4019dd557b1abf4b2277bc7a5ac119050a"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1ab30b69444fff98d727990a6e1a688",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15227585,
        "upload_time": "2022-10-24T21:10:28",
        "upload_time_iso_8601": "2022-10-24T21:10:28.120808Z",
        "url": "https://files.pythonhosted.org/packages/a8/79/453bc98b99c283441b7f212d182b69d218b7048f183a62dacc961d1f05b7/wdphottools-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37a7835cf7e82844acfacc58324bf2f3ef226d2b68e74e660dd3c9f1bb4ddfe5",
          "md5": "2b516150572d989163a54e3291a10520",
          "sha256": "29a48c509b495b8f45d2916575ee2706f6df3e4317262c55bc2854b69d2c8705"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2b516150572d989163a54e3291a10520",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14936889,
        "upload_time": "2022-10-24T21:10:32",
        "upload_time_iso_8601": "2022-10-24T21:10:32.204686Z",
        "url": "https://files.pythonhosted.org/packages/37/a7/835cf7e82844acfacc58324bf2f3ef226d2b68e74e660dd3c9f1bb4ddfe5/wdphottools-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f38b79ee1e2e903167c9aa5dec2733254f0ed587d643b8af8bd3df5e7bf76f36",
          "md5": "fec8695e44b44d6deeb92915cb796027",
          "sha256": "d825ecbcd03aafba20a542af1605276e08278b9807e0843b3c70e9459e6f46d5"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fec8695e44b44d6deeb92915cb796027",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15228608,
        "upload_time": "2022-12-04T11:45:53",
        "upload_time_iso_8601": "2022-12-04T11:45:53.404811Z",
        "url": "https://files.pythonhosted.org/packages/f3/8b/79ee1e2e903167c9aa5dec2733254f0ed587d643b8af8bd3df5e7bf76f36/wdphottools-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c231581816422dd97592a85a93334ad0204dff4e4cec9a7ed3a95d9400c106b",
          "md5": "1da888c453ffc1045cdd6a5566df1786",
          "sha256": "6facc96d7e36375c7bc07205be473e54645b4c556e0992d506674e6bca05ca31"
        },
        "downloads": -1,
        "filename": "wdphottools-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "1da888c453ffc1045cdd6a5566df1786",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14937624,
        "upload_time": "2022-12-04T11:45:57",
        "upload_time_iso_8601": "2022-12-04T11:45:57.231502Z",
        "url": "https://files.pythonhosted.org/packages/2c/23/1581816422dd97592a85a93334ad0204dff4e4cec9a7ed3a95d9400c106b/wdphottools-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f38b79ee1e2e903167c9aa5dec2733254f0ed587d643b8af8bd3df5e7bf76f36",
        "md5": "fec8695e44b44d6deeb92915cb796027",
        "sha256": "d825ecbcd03aafba20a542af1605276e08278b9807e0843b3c70e9459e6f46d5"
      },
      "downloads": -1,
      "filename": "wdphottools-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fec8695e44b44d6deeb92915cb796027",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15228608,
      "upload_time": "2022-12-04T11:45:53",
      "upload_time_iso_8601": "2022-12-04T11:45:53.404811Z",
      "url": "https://files.pythonhosted.org/packages/f3/8b/79ee1e2e903167c9aa5dec2733254f0ed587d643b8af8bd3df5e7bf76f36/wdphottools-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c231581816422dd97592a85a93334ad0204dff4e4cec9a7ed3a95d9400c106b",
        "md5": "1da888c453ffc1045cdd6a5566df1786",
        "sha256": "6facc96d7e36375c7bc07205be473e54645b4c556e0992d506674e6bca05ca31"
      },
      "downloads": -1,
      "filename": "wdphottools-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "1da888c453ffc1045cdd6a5566df1786",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14937624,
      "upload_time": "2022-12-04T11:45:57",
      "upload_time_iso_8601": "2022-12-04T11:45:57.231502Z",
      "url": "https://files.pythonhosted.org/packages/2c/23/1581816422dd97592a85a93334ad0204dff4e4cec9a7ed3a95d9400c106b/wdphottools-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}