{
  "info": {
    "author": "Catherine Devlin",
    "author_email": "catherine.devlin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "======================\nFuzzy Sequence Matcher\n======================\n\n\n.. image:: https://img.shields.io/pypi/v/fuzzy_sequence_matcher.svg\n        :target: https://pypi.python.org/pypi/fuzzy_sequence_matcher\n\n.. image:: https://img.shields.io/travis/catherinedevlin/fuzzy_sequence_matcher.svg\n        :target: https://travis-ci.org/catherinedevlin/fuzzy_sequence_matcher\n\n.. image:: https://readthedocs.org/projects/fuzzy-sequence-matcher/badge/?version=latest\n        :target: https://fuzzy-sequence-matcher.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\nPurpose\n-------\n\nFinds best pairings of elements between two sequences.\n\nEach element can only be used at most once, and the order \nof elements is preserved.  That is, \nif X1 -> Y2, then X2 cannot match to Y1 or Y2; it must\nmatch to Y3 or later.  This is appropriate for sequences \nwhere Y is a garbled or mutated copy of X. \n\nExample\n-------\n\n::\n\n    >>> from fuzzy_sequence_matcher.fuzzy_sequence_matcher import best_matches\n    >>> from jellyfish import jaro_distance\n    >>> declaration = \"We hold these truths to be self evident\".split()\n    >>> degradation = (\"I guess wee hold them tooths and stuff \"\n    ...     \"for being sort of evidence, y'know?\").split()\n    >>> best_matches(declaration, degradation, scorer=jaro_distance)\n    [('We', 'wee'), ('hold', 'hold'), ('these', 'them'), ('truths', 'tooths'), ('to', 'for'), ('be', 'being'), ('self', 'sort'), ('evident', 'evidence,')]\n\nFeatures\n--------\n\n* Match any objects you can write a scoring function for \n* No dependencies outside standard library\n\nScoring function\n================\n\nThe matching is done with a scoring function you specify.\nIt should look something like::\n\n    def score(element_from_seq1: Any, element_from_seq2: Any) -> float \n\nwith high scores indicating better matches.\n\nFor comparing strings, you might use jellyfish_.jaro_distance.\nFor comparing numbers, ``-abs(n1 - n2)`` works.\n\nthreshold\n==========\n\nBy default, fuzzy_sequence_matcher finds the combination that\nmaximizes the sum scores of all the pairings.  However, when one \nsequence is much longer than the other, the number of possible \ncombinations grows impractically large to try them all.  The \nitertools_ documentation gives the number of combinations as \n\n    len(Y)! / len(X)! / (len(Y) - len(X))! \n\nwhen len(Y) >= len(X).\n\nThis function is exposed as fuzzy_sequence_matcher.n_combinations.\n\nIf the number of possible combinations exceeds a threshold - by \ndefault, 1_000_000, which happens when the long seq is ~ 15 or more \nelements longer than the short - then elements from the longer sequence \nwill be dropped from consideration entirely, starting with those whose \nbest match to the shorter sequence is worst, until n_combinations \nis under the threshold.  This could conceivably give a result that \nis not the ideal-scoring set of matches.\n\n\n* Free software: MIT license\n* Documentation: https://fuzzy-sequence-matcher.readthedocs.io.\n\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\nThanks to `Dayton Dynamic Languages`_ for advice and brainstorming\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _`Dayton Dynamic Languages`: http://d8ndl.org/\n.. _jellyfish: https://github.com/jamesturk/jellyfish\n.. _itertools: https://docs.python.org/3/library/itertools.html#itertools.combinations\n\n=======\nHistory\n=======\n\n0.1.0 (2019-12-14)\n------------------\n\n* First release on PyPI.\n\n0.1.1 (2019-12-26)\n------------------\n\n* Allow scorers that handle the arguments differently.\n\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/catherinedevlin/fuzzy_sequence_matcher",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fuzzy-sequence-matcher",
    "package_url": "https://pypi.org/project/fuzzy-sequence-matcher/",
    "platform": "",
    "project_url": "https://pypi.org/project/fuzzy-sequence-matcher/",
    "project_urls": {
      "Homepage": "https://github.com/catherinedevlin/fuzzy_sequence_matcher"
    },
    "release_url": "https://pypi.org/project/fuzzy-sequence-matcher/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Finds best pairings of elements between two sequences",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6381180,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc1103fed753185303da553e8b3e02e753d733ea14d664cdee9c61aad28d56ad",
          "md5": "4908f8d1bf85864178e1fc205dc6f098",
          "sha256": "62f78b084659e8ee236e6e7ffa6394b147485639e489dec098226c602430b677"
        },
        "downloads": -1,
        "filename": "fuzzy_sequence_matcher-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4908f8d1bf85864178e1fc205dc6f098",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 6317,
        "upload_time": "2019-12-15T02:27:53",
        "upload_time_iso_8601": "2019-12-15T02:27:53.470699Z",
        "url": "https://files.pythonhosted.org/packages/bc/11/03fed753185303da553e8b3e02e753d733ea14d664cdee9c61aad28d56ad/fuzzy_sequence_matcher-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a665d614eb5132c02d7edf49e095ef0c69eec208996912c8ee83262698e9cfb3",
          "md5": "8876be317bd0469a6ebce91133d8bea9",
          "sha256": "16867214cd21a61c3250060cae0b60de76f1569ff045df4e1ee86b00172498c4"
        },
        "downloads": -1,
        "filename": "fuzzy_sequence_matcher-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8876be317bd0469a6ebce91133d8bea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13359,
        "upload_time": "2019-12-15T02:27:56",
        "upload_time_iso_8601": "2019-12-15T02:27:56.117669Z",
        "url": "https://files.pythonhosted.org/packages/a6/65/d614eb5132c02d7edf49e095ef0c69eec208996912c8ee83262698e9cfb3/fuzzy_sequence_matcher-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00ed14f1224684296db00ac309330c98c76f73fe920c6c6bb8356e44bdd7c470",
          "md5": "9bdeda6cf2e70ca10ecb93f6b108fcaa",
          "sha256": "c425b44e54fec2f6abae3acbbcae11bb7fc27361a1f183d4515b4c67411900a5"
        },
        "downloads": -1,
        "filename": "fuzzy_sequence_matcher-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bdeda6cf2e70ca10ecb93f6b108fcaa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 6455,
        "upload_time": "2020-01-01T02:25:54",
        "upload_time_iso_8601": "2020-01-01T02:25:54.567152Z",
        "url": "https://files.pythonhosted.org/packages/00/ed/14f1224684296db00ac309330c98c76f73fe920c6c6bb8356e44bdd7c470/fuzzy_sequence_matcher-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67da753340e647b460adcdd3e4e721386ef32f64a0a9d1f9c2c2e93034296348",
          "md5": "186a081c67ac7e5c041f5f0be067b026",
          "sha256": "c386a12999d98448acd5e8bf4b9632d4f15bba9419fca842cc4189b7a562674b"
        },
        "downloads": -1,
        "filename": "fuzzy_sequence_matcher-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "186a081c67ac7e5c041f5f0be067b026",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13688,
        "upload_time": "2020-01-01T02:25:56",
        "upload_time_iso_8601": "2020-01-01T02:25:56.967572Z",
        "url": "https://files.pythonhosted.org/packages/67/da/753340e647b460adcdd3e4e721386ef32f64a0a9d1f9c2c2e93034296348/fuzzy_sequence_matcher-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00ed14f1224684296db00ac309330c98c76f73fe920c6c6bb8356e44bdd7c470",
        "md5": "9bdeda6cf2e70ca10ecb93f6b108fcaa",
        "sha256": "c425b44e54fec2f6abae3acbbcae11bb7fc27361a1f183d4515b4c67411900a5"
      },
      "downloads": -1,
      "filename": "fuzzy_sequence_matcher-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9bdeda6cf2e70ca10ecb93f6b108fcaa",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 6455,
      "upload_time": "2020-01-01T02:25:54",
      "upload_time_iso_8601": "2020-01-01T02:25:54.567152Z",
      "url": "https://files.pythonhosted.org/packages/00/ed/14f1224684296db00ac309330c98c76f73fe920c6c6bb8356e44bdd7c470/fuzzy_sequence_matcher-0.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67da753340e647b460adcdd3e4e721386ef32f64a0a9d1f9c2c2e93034296348",
        "md5": "186a081c67ac7e5c041f5f0be067b026",
        "sha256": "c386a12999d98448acd5e8bf4b9632d4f15bba9419fca842cc4189b7a562674b"
      },
      "downloads": -1,
      "filename": "fuzzy_sequence_matcher-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "186a081c67ac7e5c041f5f0be067b026",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13688,
      "upload_time": "2020-01-01T02:25:56",
      "upload_time_iso_8601": "2020-01-01T02:25:56.967572Z",
      "url": "https://files.pythonhosted.org/packages/67/da/753340e647b460adcdd3e4e721386ef32f64a0a9d1f9c2c2e93034296348/fuzzy_sequence_matcher-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}