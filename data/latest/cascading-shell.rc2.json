{
  "info": {
    "author": "Jan Oliver Oelerich",
    "author_email": "janoliver@oelerich.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.6",
      "Topic :: System :: Distributed Computing",
      "Topic :: System :: Shells",
      "Topic :: System :: Systems Administration",
      "Topic :: Utilities"
    ],
    "description": "# CASH - Cascading Shell\n\nCASH is a utility for administrators of large computer clusters to quickly run shell commands \non all or a subset of the cluster nodes. CASH generates a cascading, or tree-like topology of the nodes,\nand is therefore much faster than other tools that simply iterate the nodes or try to access many nodes in parallel.\n\nCASH is supposed to be run from the administrator's machine, but may also be run from one of the cluster nodes. In\nthe first case, all communication between the computer cluster and the admin machine is channelled over a gateway host.\n\nPlease see below for the execution/communication model.\n\n## Requirements\n\nCASH has the following requirements:\n\n- python > 3.6 on each node\n- password-less SSH access to and between all nodes\n\n## Setup\n\nPlease run `pip install cascading-shell` and use the `cash` command line tool on the admin machine. Then, configure your\ncluster(s). Nodes and nodegroups are configured in `~/.cash.topo.json` like this:\n\n```json\n{\n  \"nodes\": {\n    \"group1\": \"clus1node001,clus1node002,clus1node003\",\n    \"all\": {\n      \"site1\": {\n        \"cluster1\": {\n          \"rack1\": \"clus1node[001-020]\",\n          \"rack2\": \"clus1node[021-040]\",\n          \"rack3\": \"clus1node[041-060]\"\n        },\n        \"cluster2\": {\n          \"rack1\": \"clus2node[001-020]\",\n          \"rack2\": \"clus2node[021-040]\",\n          \"rack3\": \"clus2node[041-060]\"\n        }\n      },\n      \"site2\": {\n        \"cluster3\": {\n          \"rack1\": \"clus3node[001-020]\",\n          \"rack2\": \"clus3node[021-040]\",\n          \"rack3\": \"clus3node[041-060]\"\n        },\n        \"cluster4\": {\n          \"rack1\": \"clus4node[001-020]\",\n          \"rack2\": \"clus4node[021-040]\",\n          \"rack3\": \"clus4node[041-060]\"\n        },\n        \"cluster5\": \"clus5node[001-020]\"\n      }\n    }\n  }\n}\n```\n\nThe config file has the following rules:\n\n- Right now, everything lives under the `nodes` object. \n- The file format is standard JSON, where each key is a group name and each value is a comma separated list of nodes.\n- Nodes with sequential numbers can be shortened using square brackets, e.g., `node[001-003]` resolves\n  to `node001,node002,node003`. Be careful with leading zeros here! You may also use a comma here, such as: \n  `node[001-003,005]` -> `node001,node002,node003,node005`. You can also use multiple bracket instances: \n  `clus[1-3]node[001-003]` -> `clus1node001,clus1node002,clus1node003,clus2node001,clus2node002,clus2node003,clus3node001,clus3node002,clus3node003` and so on.\n- Groups can be nested. The topology of the node tree is specified in the mandatory `all` group. It is wise to reflect \n  network latency/bandwidth in the tree; for instance, as in the above example, you may divide your HPC into groups of \n  site, cluster, rack if applicable. \n- Aside from `all`, you can specify as many groups as you wish and nest them to your liking. \n\n## Cascading communication model\n\nCASH communicates with each node in a cascading fashion, where CASH itself on each node acts as a proxy for its \nimmediate children and forwards all messages from the children to its parent and vice versa. Let's try to understand \nthis with an example. Imaging the following topology configuration:\n\n```json\n{\n  \"nodes\": {\n    \"all\": {\n      \"site1\": {\n        \"cluster1\": {\n          \"rack1\": \"clus1node[1-3]\",\n          \"rack2\": \"clus1node[4-6]\"\n        },\n        \"cluster2\": {\n          \"rack1\": \"clus2node[1-3]\",\n          \"rack2\": \"clus2node[4-6]\"\n        }\n      },\n      \"site2\": {\n        \"cluster3\": {\n          \"rack1\": \"clus3node[1-3]\",\n          \"rack2\": \"clus3node[4-6]\"\n        },\n        \"cluster4\": {\n          \"rack1\": \"clus4node[1-3]\",\n          \"rack2\": \"clus4node[4-6]\"\n        }\n      }\n    }\n  }\n}\n```\n\nWe have a total of four clusters in two geographical sites, each cluster has two racks with three nodes each. We now \nwant to execute a command on all nodes using CASH. First, CASH spawns an instance of itself on the gateway host, that\ncan be specified via the `DEFAULT_JUMP_HOST` variable or via the command line parameter `--jump-host`. From the gateway,\na connection to the first host of `site1` and the first host of `site2` is established, i.e., `clus1node1` and \n`clus3node1`. From each of those two nodes, CASH hops to the first node of each cluster (e.g., `clus1node2` for \n`cluster1`, as `clus1node1` was already used, and `clus2node1`), from there to the first \nnode of each rack, and then to the remaining nodes. \n\nFor example, `clus4node5` is reached in the following way: \n`ADMIN_MACHINE -> gateway -> clus3node1 (site) -> clus4node1 (cluster) -> clus4node4 (rack) -> clus4node5 (node)`. This \ntiered or cascading execution model of course makes sense only for a larger number of nodes than in this example. You\ncan tell CASH to use a flat instead of cascading connection model with the `--flatten` parameter. \n\nThe number of parallel connections on each node is limited by the `--fan-size` parameter (env `DEFAULT_FANSIZE = 50`).\nWhen more that FANSIZE nodes are direct children of one node, they are grouped by FANSIZE and an additional layer is \nformed. \n\nEvery node that is part of the tree receives and forwards messages from/to its parent and its children, and also \nexecutes the desired shell command locally. \n\n## Usage\n\nHere is a copy of `cash --help`:\n\n```\nusage: cash [-h] [-n NODES] [--jumphost JUMPHOST] [--ssh-timeout SSH_TIMEOUT]\n            [-s FANSIZE] [--flatten] [-p] [--json | --shell | --quiet]\n            {run,plan} ...\n\npositional arguments:\n  {run,plan}            Please use one of the following sub commands\n    run                 Run command\n    plan                Print tree as json to stdout (view with, e.g.,\n                        firefox)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n NODES, --nodes NODES\n                        Node or node groups.\n  --jumphost JUMPHOST   Gateway host to cluster.\n  --ssh-timeout SSH_TIMEOUT\n                        Define a timeout for SSH sessions. 0 = no timeout\n  -s FANSIZE, --fansize FANSIZE\n                        Maximum number of parallel SSH sessions.\n  --flatten             Disable tree mode.\n  -p, --progress        Show progress of received answers\n  --json                JSON output format\n  --shell               Shell friendly output format\n  --quiet               No output\n```\n\n- Node groups can be specified with `@group_name` in the `--nodes` parameter. \n- You can exclude hosts by using `-n \"@group,-node01\"`.\n- You can use the square bracket syntax here, too: `-n \"node[1-9]\"`.\n\nYou can specify the defaults of the CLI parameter via the following environment variables:\n\n```python\nDEFAULT_SSH_TIMEOUT = 30\nDEFAULT_FANSIZE = 50\nDEFAULT_NODES_STRING = \"@all\"\nDEFAULT_OUT_FORMAT = \"text\"\nDEFAULT_JUMP_HOST = \"jumphost\"\nDEFAULT_FLATTEN = False\nDEFAULT_RUN_SHELL = True\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/janoliver/cash",
    "keywords": "shell,hpc,computer cluster",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cascading-shell",
    "package_url": "https://pypi.org/project/cascading-shell/",
    "platform": null,
    "project_url": "https://pypi.org/project/cascading-shell/",
    "project_urls": {
      "Homepage": "https://github.com/janoliver/cash"
    },
    "release_url": "https://pypi.org/project/cascading-shell/1.2/",
    "requires_dist": [
      "termcolor ; extra == 'colored_output'"
    ],
    "requires_python": "",
    "summary": "",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15076765,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9adb20806bc0ff9a2e63220eb4b50b1a41318d644bd7711d74ef63364e9afc10",
          "md5": "239365d2d6ab5f56713c355482d88401",
          "sha256": "fb4eca3fe33d71a7fd67a234e779870616a1c8aeea616018f84717c0a1b91c70"
        },
        "downloads": -1,
        "filename": "cascading_shell-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "239365d2d6ab5f56713c355482d88401",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23414,
        "upload_time": "2022-06-24T08:44:45",
        "upload_time_iso_8601": "2022-06-24T08:44:45.602949Z",
        "url": "https://files.pythonhosted.org/packages/9a/db/20806bc0ff9a2e63220eb4b50b1a41318d644bd7711d74ef63364e9afc10/cascading_shell-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "697e7ecbc5ab8a9e8c5bc89bd84a433c5619ac503c97b22af4c512d2335075ae",
          "md5": "11ff90bb00bfd77d556bebbf886006fc",
          "sha256": "e307348fffb656c7d7249842bb28ff2232b44517a8c4243b42a835a60de848da"
        },
        "downloads": -1,
        "filename": "cascading-shell-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "11ff90bb00bfd77d556bebbf886006fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21712,
        "upload_time": "2022-06-24T08:44:47",
        "upload_time_iso_8601": "2022-06-24T08:44:47.378783Z",
        "url": "https://files.pythonhosted.org/packages/69/7e/7ecbc5ab8a9e8c5bc89bd84a433c5619ac503c97b22af4c512d2335075ae/cascading-shell-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "490f03f2284ec302363a7274d3c8c608e8989dd61b7d64c08f7f72d241179296",
          "md5": "95003f12965dc1a79c81fde36ec83dd5",
          "sha256": "e5046827dd00e9bfb28882940a501bbf712c22c908d666f97d8983a10f9be469"
        },
        "downloads": -1,
        "filename": "cascading_shell-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95003f12965dc1a79c81fde36ec83dd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23421,
        "upload_time": "2022-09-13T08:52:24",
        "upload_time_iso_8601": "2022-09-13T08:52:24.533986Z",
        "url": "https://files.pythonhosted.org/packages/49/0f/03f2284ec302363a7274d3c8c608e8989dd61b7d64c08f7f72d241179296/cascading_shell-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6c33d304153d7048fba26be407940ef10c8c2e991c00421a8f0de994f1c30a6",
          "md5": "8fc76558debd7b2c0b3475c84c7c5e45",
          "sha256": "94a217e3adef5ff8c5d56209ab153be37351c1a1f0581c313600ac0cda696d15"
        },
        "downloads": -1,
        "filename": "cascading-shell-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8fc76558debd7b2c0b3475c84c7c5e45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21714,
        "upload_time": "2022-09-13T08:52:26",
        "upload_time_iso_8601": "2022-09-13T08:52:26.069470Z",
        "url": "https://files.pythonhosted.org/packages/f6/c3/3d304153d7048fba26be407940ef10c8c2e991c00421a8f0de994f1c30a6/cascading-shell-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "490f03f2284ec302363a7274d3c8c608e8989dd61b7d64c08f7f72d241179296",
        "md5": "95003f12965dc1a79c81fde36ec83dd5",
        "sha256": "e5046827dd00e9bfb28882940a501bbf712c22c908d666f97d8983a10f9be469"
      },
      "downloads": -1,
      "filename": "cascading_shell-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95003f12965dc1a79c81fde36ec83dd5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23421,
      "upload_time": "2022-09-13T08:52:24",
      "upload_time_iso_8601": "2022-09-13T08:52:24.533986Z",
      "url": "https://files.pythonhosted.org/packages/49/0f/03f2284ec302363a7274d3c8c608e8989dd61b7d64c08f7f72d241179296/cascading_shell-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6c33d304153d7048fba26be407940ef10c8c2e991c00421a8f0de994f1c30a6",
        "md5": "8fc76558debd7b2c0b3475c84c7c5e45",
        "sha256": "94a217e3adef5ff8c5d56209ab153be37351c1a1f0581c313600ac0cda696d15"
      },
      "downloads": -1,
      "filename": "cascading-shell-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8fc76558debd7b2c0b3475c84c7c5e45",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21714,
      "upload_time": "2022-09-13T08:52:26",
      "upload_time_iso_8601": "2022-09-13T08:52:26.069470Z",
      "url": "https://files.pythonhosted.org/packages/f6/c3/3d304153d7048fba26be407940ef10c8c2e991c00421a8f0de994f1c30a6/cascading-shell-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}