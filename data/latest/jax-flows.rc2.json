{
  "info": {
    "author": "Chris Waites",
    "author_email": "cwaites10@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img align=\"right\" width=\"300\" src=\"assets/flows.gif\">\n\n# Normalizing Flows in JAX\n\n<a href=\"https://circleci.com/gh/ChrisWaites/jax-flows\">\n    <img alt=\"Build\" src=\"https://img.shields.io/circleci/build/github/ChrisWaites/jax-flows/master\">\n</a>\n<a href=\"https://github.com/ChrisWaites/jax-flows/blob/master/LICENSE\">\n    <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/ChrisWaites/jax-flows.svg?color=blue\">\n</a>\n<a href=\"https://jax-flows.readthedocs.io/en/latest/\">\n    <img alt=\"Documentation\" src=\"https://img.shields.io/website/http/jax-flows.readthedocs.io.svg?down_color=red&down_message=offline&up_message=online\">\n</a>\n\n<p>Implementations of normalizing flows (RealNVP, Glow, MAF) in the <a href=\"https://github.com/google/jax/\">JAX</a> deep learning framework.</p>\n\n## What are normalizing flows?\n\n[Normalizing flow models](http://akosiorek.github.io/ml/2018/04/03/norm_flows.html) are _generative models_, i.e. they infer the underlying probability distribution of an observed dataset. With that distribution we can do a number of interesting things, namely sample new realistic points and query probability densities.\n\n## Why JAX?\n\nA few reasons!\n\n1) JAX encourages a functional style. When writing a layer, I didn't want people to worry about PyTorch or TensorFlow boilerplate and how their code has to fit into \"the system\" (e.g. do I have to keep track of `self.training` here?) _All_ you have to worry about is writing a vanilla python function which, given an ndarray, returns the correct set of outputs. You could develop your own layers with effectively no knowledge of the encompassing framework.\n\n2) JAX's [random number generation system](https://github.com/google/jax/blob/master/design_notes/prng.md) places reproducibility first. To get a sense for this, when you start to parallelize a system, centralized state-based models for PRNG a la `torch.manual_seed()` or `tf.random.set_seed()` start to yield inconsistent results. Given that randomness is such a central component to work in this area, I thought that uncompromising reproducibility would be a nice feature.\n\n3) JAX has a really flexible automatic differentiation system. So flexible, in fact, that you can (basically) write arbitrary python functions (including for loops, if statements, etc.) and automatically compute their jacobian with a call to `jax.jacfwd`. So, in theory, you could write a normalizing flow layer and automatically compute its jacobian's log determinant without having to do so manually (although we're not quite there yet).\n\n## How do things work?\n\nHere's an introduction! But for a more comprehensive description, check out the [documentation](https://jax-flows.readthedocs.io/).\n\n### Bijections\n\nA `bijection` is a parameterized invertible function.\n\n```python\ninit_fun = flows.InvertibleLinear()\n\nparams, direct_fun, inverse_fun = init_fun(rng, input_dim=5)\n\n# Transform inputs\ntransformed_inputs, log_det_jacobian_direct = direct_fun(params, inputs)\n\n# Reconstruct original inputs\nreconstructed_inputs, log_det_jacobian_inverse = inverse_fun(params, transformed_inputs)\n\nassert np.array_equal(inputs, reconstructed_inputs)\n```\n\nWe can construct a sequence of bijections using `flows.Serial`. The result is just another bijection, and adheres to the exact same interface.\n\n```python\ninit_fun = flows.Serial(\n    flows.AffineCoupling()\n    flows.InvertibleLinear(),\n    flows.ActNorm(),\n)\n\nparams, direct_fun, inverse_fun = init_fun(rng, input_dim=5)\n```\n\n### Distributions\n\nA `distribution` is characterized by a probability density querying function, a sampling function, and its parameters.\n\n```python\ninit_fun = flows.Normal()\n\nparams, log_pdf, sample = init_fun(rng, input_dim=5)\n\n# Query probability density of points\nlog_pdfs = log_pdf(params, inputs)\n\n# Draw new points\nsamples = sample(rng, params, num_samples)\n```\n\n### Normalizing Flow Models\n\nUnder this definition, a normalizing flow model is just a `distribution`. But to retrieve one, we have to give it a `bijection` and another `distribution` to act as a prior.\n\n```python\nbijection = flows.Serial(\n    flows.AffineCoupling(),\n    flows.InvertibleLinear(),\n    flows.ActNorm()\n    flows.AffineCoupling(),\n    flows.InvertibleLinear(),\n    flows.ActNorm()\n)\n\nprior = flows.Normal()\n\ninit_fun = flows.Flow(bijection, prior)\n\nparams, log_pdf, sample = init_fun(rng, input_dim=5)\n```\n\n### How do I train a model?\n\nThe same as you always would in JAX! First, define an appropriate loss function and parameter update step.\n\n```python\ndef loss(params, inputs):\n    return -log_pdf(params, inputs).mean()\n\n@jit\ndef step(i, opt_state, inputs):\n    params = get_params(opt_state)\n    gradient = grad(loss)(params, inputs)\n    return opt_update(i, gradient, opt_state)\n```\n\nThen execute a standard JAX training loop.\n\n```python\nbatch_size = 32\nitercount = itertools.count()\nfor epoch in range(num_epochs):\n    npr.shuffle(X)\n    for batch_index in range(0, len(X), batch_size):\n        opt_state = step(\n            next(itercount),\n            opt_state,\n            X[batch_index:batch_index+batch_size]\n        )\n\noptimized_params = get_params(opt_state)\n```\n\nNow that we have our trained model parameters, we can query and sample as regular.\n\n```python\nlog_pdfs = log_pdf(optimized_params, inputs)\n\nsamples = sample(rng, optimized_params, num_samples)\n```\n\n_Magic!_\n\n## Interested in contributing?\n\nYay! Check out our [contributing guidelines](https://github.com/ChrisWaites/jax-flows/blob/master/.github/CONTRIBUTING.md).\n\n## Inspiration\n\nThis repository is largely modeled after the [`pytorch-flows`](https://github.com/ikostrikov/pytorch-flows) repository by [Ilya Kostrikov](https://github.com/ikostrikov), the [`nf-jax`](https://github.com/ericjang/nf-jax) repository by [Eric Jang](http://evjang.com/), and the [`normalizing-flows`](https://github.com/tonyduan/normalizing-flows) repository by [Tony Duan](https://github.com/tonyduan).\n\nThe implementations are modeled after the work of the following papers:\n\n  > [NICE: Non-linear Independent Components Estimation](https://arxiv.org/abs/1410.8516)\\\n  > Laurent Dinh, David Krueger, Yoshua Bengio\\\n  > _arXiv:1410.8516_\n\n  > [Density estimation using Real NVP](https://arxiv.org/abs/1605.08803)\\\n  > Laurent Dinh, Jascha Sohl-Dickstein, Samy Bengio\\\n  > _arXiv:1605.08803_\n\n  > [Improving Variational Inference with Inverse Autoregressive Flow\n](https://arxiv.org/abs/1606.04934)\\\n  > Diederik P. Kingma, Tim Salimans, Rafal Jozefowicz, Xi Chen, Ilya Sutskever, Max Welling\\\n  > _arXiv:1606.04934_\n\n  > [Glow: Generative Flow with Invertible 1x1 Convolutions](https://arxiv.org/abs/1807.03039)\\\n  > Diederik P. Kingma, Prafulla Dhariwal\\\n  > _arXiv:1807.03039_\n\n  > [Flow++: Improving Flow-Based Generative Models\n  with Variational Dequantization and Architecture Design](https://openreview.net/forum?id=Hyg74h05tX)\\\n  > Jonathan Ho, Xi Chen, Aravind Srinivas, Yan Duan, Pieter Abbeel\\\n  > _OpenReview:Hyg74h05tX_\n\n  > [Masked Autoregressive Flow for Density Estimation](https://arxiv.org/abs/1705.07057)\\\n  > George Papamakarios, Theo Pavlakou, Iain Murray\\\n  > _arXiv:1705.07057_\n\n  > [Neural Spline Flows](https://arxiv.org/abs/1906.04032)\\\n  > Conor Durkan, Artur Bekasov, Iain Murray, George Papamakarios\\\n  > _arXiv:1906.04032_\n\nAnd by association the following surveys:\n\n  > [Normalizing Flows: An Introduction and Review of Current Methods](https://arxiv.org/abs/1908.09257)\\\n  > Ivan Kobyzev, Simon Prince, Marcus A. Brubaker\\\n  > _arXiv:1908.09257_\n\n  > [Normalizing Flows for Probabilistic Modeling and Inference](https://arxiv.org/abs/1912.02762)\\\n  > George Papamakarios, Eric Nalisnick, Danilo Jimenez Rezende, Shakir Mohamed, Balaji Lakshminarayanan\\\n  > _arXiv:1912.02762_\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ChrisWaites/jax-flows",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jax-flows",
    "package_url": "https://pypi.org/project/jax-flows/",
    "platform": "",
    "project_url": "https://pypi.org/project/jax-flows/",
    "project_urls": {
      "Homepage": "http://github.com/ChrisWaites/jax-flows"
    },
    "release_url": "https://pypi.org/project/jax-flows/0.0.1/",
    "requires_dist": [
      "jax",
      "jaxlib",
      "numpy",
      "scipy",
      "sklearn",
      "pytest ; extra == 'dev'",
      "pytest-xdist ; extra == 'dev'",
      "black ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "recommonmark ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "sphinx-markdown-tables ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "black ; extra == 'quality'",
      "isort ; extra == 'quality'",
      "flake8 ; extra == 'quality'",
      "pytest ; extra == 'testing'",
      "pytest-xdist ; extra == 'testing'"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Normalizing Flows for JAX",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7299130,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58534b8479223cdae3d998afb014f0b61b6dc695a4a0ad90c501b3edc873aafd",
          "md5": "56fb4bbbf2bd2824e53b2ef6f06933e7",
          "sha256": "e1c272a488bc794078bbdd07b5b0ec7e1b8b3af81e3b7169d54a7cbcefb15025"
        },
        "downloads": -1,
        "filename": "jax_flows-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56fb4bbbf2bd2824e53b2ef6f06933e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 8369,
        "upload_time": "2020-03-26T03:00:03",
        "upload_time_iso_8601": "2020-03-26T03:00:03.579362Z",
        "url": "https://files.pythonhosted.org/packages/58/53/4b8479223cdae3d998afb014f0b61b6dc695a4a0ad90c501b3edc873aafd/jax_flows-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ae5b7fbd922eb3de60f25c368c6abbf6efe479f842152411950e6e22401a908",
          "md5": "8c52ca77a9efea7d46a80f334d7af784",
          "sha256": "4702adeebd56592f988c797e11ae4e0a46e51c22f9a7872f138808b1bfd9320d"
        },
        "downloads": -1,
        "filename": "jax-flows-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c52ca77a9efea7d46a80f334d7af784",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 7278,
        "upload_time": "2020-03-26T03:00:05",
        "upload_time_iso_8601": "2020-03-26T03:00:05.850429Z",
        "url": "https://files.pythonhosted.org/packages/2a/e5/b7fbd922eb3de60f25c368c6abbf6efe479f842152411950e6e22401a908/jax-flows-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe01c5be3048690dcb5f1f03185ef15832847f87977bc22f0c1d116ecc353e8d",
          "md5": "dc8f2bd5b94d21d02465af2eafd7599f",
          "sha256": "c144c5247f5af39c98f5be796a6d9c546a740fa9e25948f1443ef0cf1257d642"
        },
        "downloads": -1,
        "filename": "jax_flows-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc8f2bd5b94d21d02465af2eafd7599f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 15486,
        "upload_time": "2020-05-22T03:28:15",
        "upload_time_iso_8601": "2020-05-22T03:28:15.925830Z",
        "url": "https://files.pythonhosted.org/packages/fe/01/c5be3048690dcb5f1f03185ef15832847f87977bc22f0c1d116ecc353e8d/jax_flows-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cee6b1b9049ba4c3e0593ae42391d9fff7853e75ca33e606304577837e82b82",
          "md5": "c6de4b04d97a818519aee91208ba3a6c",
          "sha256": "4178010129cd116fa883a24cca93dd9c87a33d4487707d1c1ba9f4b01d1eb741"
        },
        "downloads": -1,
        "filename": "jax-flows-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c6de4b04d97a818519aee91208ba3a6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 16376,
        "upload_time": "2020-05-22T03:28:17",
        "upload_time_iso_8601": "2020-05-22T03:28:17.311852Z",
        "url": "https://files.pythonhosted.org/packages/4c/ee/6b1b9049ba4c3e0593ae42391d9fff7853e75ca33e606304577837e82b82/jax-flows-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe01c5be3048690dcb5f1f03185ef15832847f87977bc22f0c1d116ecc353e8d",
        "md5": "dc8f2bd5b94d21d02465af2eafd7599f",
        "sha256": "c144c5247f5af39c98f5be796a6d9c546a740fa9e25948f1443ef0cf1257d642"
      },
      "downloads": -1,
      "filename": "jax_flows-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dc8f2bd5b94d21d02465af2eafd7599f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 15486,
      "upload_time": "2020-05-22T03:28:15",
      "upload_time_iso_8601": "2020-05-22T03:28:15.925830Z",
      "url": "https://files.pythonhosted.org/packages/fe/01/c5be3048690dcb5f1f03185ef15832847f87977bc22f0c1d116ecc353e8d/jax_flows-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cee6b1b9049ba4c3e0593ae42391d9fff7853e75ca33e606304577837e82b82",
        "md5": "c6de4b04d97a818519aee91208ba3a6c",
        "sha256": "4178010129cd116fa883a24cca93dd9c87a33d4487707d1c1ba9f4b01d1eb741"
      },
      "downloads": -1,
      "filename": "jax-flows-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c6de4b04d97a818519aee91208ba3a6c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 16376,
      "upload_time": "2020-05-22T03:28:17",
      "upload_time_iso_8601": "2020-05-22T03:28:17.311852Z",
      "url": "https://files.pythonhosted.org/packages/4c/ee/6b1b9049ba4c3e0593ae42391d9fff7853e75ca33e606304577837e82b82/jax-flows-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}