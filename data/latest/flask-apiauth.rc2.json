{
  "info": {
    "author": "Minuy",
    "author_email": "y17mmz@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\nFlask-APIAuth\n==============\n\n提供最基础的API登录认证功能\n\n安装\n------------\n（还不会上传到pip）下载文件，复制到程序目录好了……\n\n# 基本示例\n----------------------------\n```python\nfrom flask import Flask, request  \nfrom werkzeug.security import generate_password_hash, check_password_hash  \n\nfrom flask_apiauth import ApiAuth  \n\napp = Flask(__name__)  \nauth = ApiAuth()  \n\nusers = {  \n    \"john\": generate_password_hash(\"hello\"),  \n    \"susan\": generate_password_hash(\"bye\")  \n}  \n\n\n@app.route('/api/login', methods=['POST'])  \ndef get_auth():  \n    username = request.args.get('username')  \n    print(username)  \n    password = request.args.get('password')  \n    print(password)  \n    if username and password:  \n        if username in users and check_password_hash(users.get(username), password):  \n            token = auth.get_token(username, users.get(username))  \n            return {  \n                    'code': '200',  \n                    'data': {  \n                        'token': token  \n                    },  \n                    'message': '登录成功'  \n  }  \n        else:  \n            return {  \n                    'code': '403',  \n                    'data': {},  \n                    'message': '账号或密码错误'  \n  }  \n    else:  \n        return {  \n                'code': '403',  \n                'data': {},  \n                'message': '参数不完整'  \n  }  \n\n\n@auth.error_content  \ndef error_content():  \n    return {  \n        'code': '403',  \n        'data': {},  \n        'message': '请先登录'  \n  }  \n\n\n@auth.verify_password  \ndef verify_password(username, password):  \n    if username in users and users.get(username) == password:  \n        print('密码正确')  \n        # 返回的数据是下面auth.current_user拿到的  \n  return {'username': username, 'sex': '男'}  \n\n\n@app.route('/')  \n@auth.login_required  \ndef index():  \n    return {  \n        'code': '200',  \n        'data': {  \n            'name': auth.current_user.get('username'),  \n            'sex': auth.current_user.get('sex')  \n        },  \n        'message': '成功'  \n  }  \n\n\nif __name__ == '__main__':  \n    app.run()\n```\n可以使用ApiPost或者PostMan测试接口。\n首先要登录，参数写在Query里，有username和password两个\n【POST】http://127.0.0.1:5000/api/login?username=john&password=hello\n然后使用返回的token，参数写在Header里，名称为token，值为上一个请求返回的值\n【GET】http://127.0.0.1:5000\n成功得到用户信息。\n退出登录即客户端删除token。\n\n其他\n---------\n\n- [清风来叙 - 博客园 (cnblogs.com)](https://www.cnblogs.com/minuy)\n\n\n\n\n----\nFlask-APIAuth\n==============\n\nProvides the most basic API login authentication function\n\nInstall\n------------\nDownload the file and copy it to the program directory\n\n# Examples\n----------------------------\n```python\nfrom flask import Flask, request  \nfrom werkzeug.security import generate_password_hash, check_password_hash  \n\nfrom flask_apiauth import ApiAuth  \n\napp = Flask(__name__)  \nauth = ApiAuth()  \n\nusers = {  \n    \"john\": generate_password_hash(\"hello\"),  \n    \"susan\": generate_password_hash(\"bye\")  \n}  \n\n\n@app.route('/api/login', methods=['POST'])  \ndef get_auth():  \n    username = request.args.get('username')  \n    print(username)  \n    password = request.args.get('password')  \n    print(password)  \n    if username and password:  \n        if username in users and check_password_hash(users.get(username), password):  \n            token = auth.get_token(username, users.get(username))  \n            return {  \n                    'code': '200',  \n                    'data': {  \n                        'token': token  \n                    },  \n                    'message': 'login success'  \n  }  \n        else:  \n            return {  \n                    'code': '403',  \n                    'data': {},  \n                    'message': 'login error'  \n  }  \n    else:  \n        return {  \n                'code': '403',  \n                'data': {},  \n                'message': 'parameters error'  \n  }  \n\n\n@auth.error_content  \ndef error_content():  \n    return {  \n        'code': '403',  \n        'data': {},  \n        'message': 'please login'  \n  }  \n\n\n@auth.verify_password  \ndef verify_password(username, password):  \n    if username in users and users.get(username) == password:  \n        print('password ok')  \n        # 返回的数据是下面auth.current_user拿到的  \n  return {'username': username, 'sex': 'man'}  \n\n\n@app.route('/')  \n@auth.login_required  \ndef index():  \n    return {  \n        'code': '200',  \n        'data': {  \n            'name': auth.current_user.get('username'),  \n            'sex': auth.current_user.get('sex')  \n        },  \n        'message': 'success'  \n  }  \n\n\nif __name__ == '__main__':  \n    app.run()\n```\nYou can use apipost or postman to test the interface.\nFirst of all, you need to log in. The parameters are written in query. There are two parameters: username and password\n【POST】http://127.0.0.1:5000/api/login?username=john&password=hello\nThen the returned token is used, and the parameters are written in the header. The name is token and the value is the value returned by the previous request\n【GET】http://127.0.0.1:5000\nGet the user information successfully.\nLog out means that the client will delete the token.\n\nOther\n---------\n\n- [blog (cnblogs.com)](https://www.cnblogs.com/minuy)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/minuy/Flask-APIAuth",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Flask-APIAuth",
    "package_url": "https://pypi.org/project/Flask-APIAuth/",
    "platform": "",
    "project_url": "https://pypi.org/project/Flask-APIAuth/",
    "project_urls": {
      "Homepage": "https://gitee.com/minuy/Flask-APIAuth"
    },
    "release_url": "https://pypi.org/project/Flask-APIAuth/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8.1",
    "summary": "flask api auth modules.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10304771,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "529d268cc6b17a524c4fe0c128c8a46582b6bf0677b88d2390b8c51790aeb359",
          "md5": "7e3295629a63acf3d0862d9127912d9b",
          "sha256": "f6be505e4fc0deeca5edb0f5b129b2a7f96768b9e75bce4f0db0b1265a9b3d33"
        },
        "downloads": -1,
        "filename": "Flask_APIAuth-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e3295629a63acf3d0862d9127912d9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1",
        "size": 5731,
        "upload_time": "2021-05-10T04:57:51",
        "upload_time_iso_8601": "2021-05-10T04:57:51.714848Z",
        "url": "https://files.pythonhosted.org/packages/52/9d/268cc6b17a524c4fe0c128c8a46582b6bf0677b88d2390b8c51790aeb359/Flask_APIAuth-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "120417d601db8d1d6194928b415396358458f6fabf4cc947faf9241fee3d53ec",
          "md5": "555a0fe3120619d8201d7645708af78b",
          "sha256": "e8ead4d071db029d467041843e2e6955e0accce5af95097139de8406d133bdd8"
        },
        "downloads": -1,
        "filename": "Flask-APIAuth-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "555a0fe3120619d8201d7645708af78b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1",
        "size": 6480,
        "upload_time": "2021-05-10T04:57:54",
        "upload_time_iso_8601": "2021-05-10T04:57:54.014947Z",
        "url": "https://files.pythonhosted.org/packages/12/04/17d601db8d1d6194928b415396358458f6fabf4cc947faf9241fee3d53ec/Flask-APIAuth-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31abfb24aa24b66fecabf0bd03d141aabc44c88d95f4a2473d527dfe09975163",
          "md5": "0c0fa4123c36d96558b5eaa8b2e6c3a6",
          "sha256": "8c3180ef9e104a81b0b9d6b1e47a9f0635a71cdc40ce9dcac57b5a3008a422c4"
        },
        "downloads": -1,
        "filename": "Flask_APIAuth-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c0fa4123c36d96558b5eaa8b2e6c3a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1",
        "size": 6317,
        "upload_time": "2021-05-10T05:21:57",
        "upload_time_iso_8601": "2021-05-10T05:21:57.212689Z",
        "url": "https://files.pythonhosted.org/packages/31/ab/fb24aa24b66fecabf0bd03d141aabc44c88d95f4a2473d527dfe09975163/Flask_APIAuth-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f8a60c586c926a1fdfba3d7f3de99e073c3da4d04081a022dab8ab7828046f6",
          "md5": "89a2447a8e674924d8f3c1b642ca4490",
          "sha256": "0a22731444121a4f18c421b96edb0404351f879d444a3f681ea3734efbcce711"
        },
        "downloads": -1,
        "filename": "Flask-APIAuth-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "89a2447a8e674924d8f3c1b642ca4490",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1",
        "size": 6804,
        "upload_time": "2021-05-10T05:21:58",
        "upload_time_iso_8601": "2021-05-10T05:21:58.807240Z",
        "url": "https://files.pythonhosted.org/packages/3f/8a/60c586c926a1fdfba3d7f3de99e073c3da4d04081a022dab8ab7828046f6/Flask-APIAuth-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31abfb24aa24b66fecabf0bd03d141aabc44c88d95f4a2473d527dfe09975163",
        "md5": "0c0fa4123c36d96558b5eaa8b2e6c3a6",
        "sha256": "8c3180ef9e104a81b0b9d6b1e47a9f0635a71cdc40ce9dcac57b5a3008a422c4"
      },
      "downloads": -1,
      "filename": "Flask_APIAuth-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c0fa4123c36d96558b5eaa8b2e6c3a6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1",
      "size": 6317,
      "upload_time": "2021-05-10T05:21:57",
      "upload_time_iso_8601": "2021-05-10T05:21:57.212689Z",
      "url": "https://files.pythonhosted.org/packages/31/ab/fb24aa24b66fecabf0bd03d141aabc44c88d95f4a2473d527dfe09975163/Flask_APIAuth-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f8a60c586c926a1fdfba3d7f3de99e073c3da4d04081a022dab8ab7828046f6",
        "md5": "89a2447a8e674924d8f3c1b642ca4490",
        "sha256": "0a22731444121a4f18c421b96edb0404351f879d444a3f681ea3734efbcce711"
      },
      "downloads": -1,
      "filename": "Flask-APIAuth-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "89a2447a8e674924d8f3c1b642ca4490",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.1",
      "size": 6804,
      "upload_time": "2021-05-10T05:21:58",
      "upload_time_iso_8601": "2021-05-10T05:21:58.807240Z",
      "url": "https://files.pythonhosted.org/packages/3f/8a/60c586c926a1fdfba3d7f3de99e073c3da4d04081a022dab8ab7828046f6/Flask-APIAuth-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}