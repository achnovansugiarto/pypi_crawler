{
  "info": {
    "author": "Deepika",
    "author_email": "<mekalabhagyadeepika@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "Python Package\n\n\nData2Insights of python packages can be used to integrate the data2insights services with your applications to enhance services with the data2insighs services. You can use this package easily in the popular framworks and libraries(EX:Python,Flask). Form the below installation command you can download the package.\n\n\nLibrary Installation\n\n\n > pip3 install data2insights \n\n\nPython Text Analytics Models\n\n\nThe Text analysis models can take a text as the input and gives the appropriate predicted results for that model.The input text should contain only alphabets (or) combination of both alphabets and special characters (or) combination of both alphabets and digits,then user gets the predicted result for that model .\n\n\n\nEmotion Model\n\nThe Emotion model of data2insights will take text as the input and returns the type of emotion of the given text as the response object.\n\nMethod Name :\n\nclassifiers.emotion(data='provide input text');  # for single text \nbatchclassifiers.emotion(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.emotion(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n               \"Classifier_id\": \"Emotion\",\n               \"classifications\": {\n               \"Prediction_accuracy\": \"36.04\",\n               \"emotion\": \"Happy\",\n               \"given_text\": \"hi\"\n               },\n               \"content_type\": \"application-json\",\n               \"query_limit\": \"1000\",\n               \"query_limit_remaining\": \"829\",\n               \"query_limit_request\": 1,\n               \"status_code\": 200\n        }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.emotion(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n\t             \"Processed_file location\": \"./outputfiles/3/emotion/data371.csv\",\n\t             \"msg\": \"file_processing_completed\",\n\t             \"status_code\": 200\n        }\n\nSentiment Model\n\nThe Sentiment model of data2insights will take text as the input and return the type of sentiment of the given text as the response object.\n\nMethod Name :\n\nclassifiers.sentiment(data='provide input text');  # for single text \nbatchclassifiers.sentiment(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.sentiment(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Classifier_id\": \"Sentiment\",\n          \"classifications\": {\n          \"Prediction_accuracy\": \"99.59\",\n          \"given_text\": \"hi\",\n          \"sentiment\": \"Neutral\"\n          },\n          \"content_type\": \"application-json\",\n          \"query_limit\": \"1000\",\n          \"query_limit_remaining\": \"830\",\n          \"query_limit_request\": 1,\n          \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.sentiment(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/sentiment/data372.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nTopic Model\n\nThe Topic model of data2insights will take text as the input and return the type of topic of the given text as the response object.\n\nMethod Name :\n\nclassifiers.topic(data='provide input text');  # for single text \nbatchclassifiers.topic(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.topic(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n             \"Classifier_id\": \"Topic\",\n             \"classifications\": {\n             \"Prediction_accuracy\": \"38.10\",\n             \"given_text\": \"hi\",\n             \"topic\": \"beauty_style\"\n             },\n             \"content_type\": \"application-json\",\n             \"query_limit\": \"1000\",\n             \"query_limit_remaining\": \"815\",\n             \"query_limit_request\": 1,\n             \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.topic(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/topic/data385.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nSpam Model\n\nThe Spam model of data2insights will take text as the input and return whether the text is spam or not.\n\nMethod Name :\n\nclassifiers.spam(data='provide input text');  # for single text \nbatchclassifiers.spam(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.spam(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Classifier_id\": \"Spam\",\n          \"classifications\": {\n          \"Prediction_accuracy\": \"80.28\",\n          \"given_text\": \"hi\",\n          \"spam\": \"NotSpam\"\n          },\n          \"content_type\": \"application-json\",\n          \"query_limit\": \"1000\",\n          \"query_limit_remaining\": \"820\",\n          \"query_limit_request\": 1,\n          \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.spam(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/spam/data386.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nAge Model\n\nThe Age model of data2insights will predict the age of, who wrote the given input text.\n\nMethod Name :\n\nclassifiers.age(data='provide input text');  # for single text \nbatchclassifiers.age(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.age(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Classifier_id\": \"Age\",\n          \"classifications\": {\n          \"Prediction_accuracy\": \"99.08\",\n          \"age\": \"18_24\",\n          \"given_text\": \"hi\"\n          },\n         \"content_type\": \"application-json\",\n         \"query_limit\": \"1000\",\n         \"query_limit_remaining\": \"828\",\n         \"query_limit_request\": 1,\n         \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.age(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/age/data388.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nGender Model\n\nThe Gender model of data2insights will predict the gender of the, who wrote the given input text either Male or Female.\n\nMethod Name :\n\nclassifiers.gender(data='provide input text');  # for single text \nbatchclassifiers.gender(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.gender(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Classifier_id\": \"Gender\",\n          \"classifications\": {\n          \"Prediction_accuracy\": \"99.87\",\n          \"gender\": \"Female\",\n          \"given_text\": \"hi\"\n          },\n          \"content_type\": \"application-json\",\n          \"query_limit\": \"1000\",\n          \"query_limit_remaining\": \"817\",\n          \"query_limit_request\": 1,\n          \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.gender(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/gender/data387.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nTweetSentiment Model\n\nTwitter sentiment analysis identifies the opinion of tweet text which has only 280 characters of text as Positive,Neutral,Negative.\n\nMethod Name :\n\nclassifiers.tweetsentiment(data='provide input text');  # for single text \nbatchclassifiers.tweetsentiment(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.tweetsentiment(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Classifier_id\": \"Tweet_sentiment\",\n          \"classifications\": {\n          \"Prediction_accuracy\": \"55.24\",\n          \"given_text\": \"hi\",\n          \"tweetsentiment\": \"Positive\"\n          },\n         \"content_type\": \"application-json\",\n         \"query_limit\": \"1000\",\n         \"query_limit_remaining\": \"819\",\n         \"query_limit_request\": 1,\n         \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.tweetsentiment(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/tweetsentiment/data389.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nEntity Model\n\nThe Entity model of data2insights will predict the entities in the given input text(Location,Person, Location, Organisation etc..).\n\nMethod Name :\n\nclassifiers.entity(data='provide input text');  # for single text \nbatchclassifiers.entity(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.entity(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Extraction_id\": \"Entity\",\n          \"content_type\": \"application-json\",\n          \"extractions\": {\n          \"entity\": [],\n          \"given_text\": \"hi\"\n          },\n          \"query_limit\": \"1000\",\n          \"query_limit_remaining\": \"827\",\n          \"query_limit_request\": 1,\n          \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.entity(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/entity/data396.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nTweetEntity Model\n\nThe Twitter Entity Extraction service allows us to identify the entions,Hashtags,Symbols ,Url’s and User_profile_url’s from given twitter tweets.\n\nMethod Name :\n\nclassifiers.tweetentity(data='provide input text');  # for single text \nbatchclassifiers.tweetentity(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.tweetentity(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Extraction_id\": \"Tweet_entity\",\n          \"content_type\": \"application-json\",\n          \"extractions\": {\n          \"given_text\": \"hi\",\n          \"tweetentity\": {\n          \"Entities\": [],\n          \"Hashtags\": [],\n          \"symbols\": [],\n          \"urls\": [],\n          \"user_profiles_url\": [],\n          \"users\": []\n         }\n        },\n         \"query_limit\": \"1000\",\n         \"query_limit_remaining\": \"818\",\n         \"query_limit_request\": 1,\n         \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.tweetentity(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/tweetentity/data420.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nKeyword Model\n\nThe Keyword model of data2insights will take text as the input and return keywords in the given text.\n\nMethod Name :\n\nclassifiers.keyword(data='provide input text');  # for single text \nbatchclassifiers.keyword(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.keyword(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Extraction_id\": \"Keyword\",\n          \"content_type\": \"application-json\",\n          \"extractions\": {\n          \"given_text\": \"hi\",\n          \"keywords\": []\n          },\n         \"query_limit\": \"1000\",\n         \"query_limit_remaining\": \"826\",\n         \"query_limit_request\": 1,\n         \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.keyword(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/keyword/data397.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nUrlExtraction Model\n\nThe Url Extraction service allows us to identity the full content,title,html page,top image,authors,keyword,summary and publication date from the given url.\n\nMethod Name :\n\ntext->classifiers.urlextraction(data='provide input text');  # for single text \nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.urlextraction(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Extraction_id\": \"Url_extraction\",\n          \"content_type\": \"application-json\",\n          \"extractions\": {\n          \"Response\": {\n          \"ALL_IMAGES_URLS\": [\n          \"https://i.stack.imgur.com/ziXaw.jpg?s=32&g=1\"\n          ],\n          \"AUTHORS\": [],\n          \"FULL CONTENT\": \"I am using requests to get the image from remote URL. Since the images will always be 16x16, I want to convert them to base64 , so that I can embed them later to use in HTML img tag.\n\nimport requests import base64 response = requests.get(url).content print(response) b = base64.b64encode(response) src = \"data:image/png;base64,\" + b\n\nThe output for response is:\n\nresponse = b'GIF89a\\x80\\x00\\x80\\x00\\xc4\\x1f\\x00\\xff\\xff\\xff\\x00\\x00\\x00\\xff\\x00\\x00\\xff\\x88\\x88\"\"\"\\xffff\\...\n\nThe HTML part is:\n\n<img src=\"{{src}}\"/>\n\nBut the image is not displayed.\",\n          \"HTML_PAGE\": \"<div><p>I am using <code>requests</code> to get the image from remote URL. Since the images will always be 16x16, I want to convert them to <code>base64</code>, so that I can embed them later to use in HTML <code>img</code> tag.</p>\n\n<pre><code>import requests\nimport base64\nresponse = requests.get(url).content\nprint(response)\nb = base64.b64encode(response)\nsrc = \"data:image/png;base64,\" + b\n</code></pre>\n\n<p>The output for <code>response</code> is:</p>\n\n<pre><code>response = b'GIF89a\\x80\\x00\\x80\\x00\\xc4\\x1f\\x00\\xff\\xff\\xff\\x00\\x00\\x00\\xff\\x00\\x00\\xff\\x88\\x88\"\"\"\\xffff\\...\n</code></pre>\n\n<p>The HTML part is:</p>\n\n<pre><code>&lt;img src=\"{{src}}\"/&gt;\n</code></pre>\n\n<p>But the image is not displayed.</p>\n\n<p>How can I properly base-64 encode the <code>response</code>?</p>\n    </div>\",\n      \"KEYWORDS\": [\n      \"url\",\n      \"base64\",\n      \"image\",\n      \"tagimport\",\n      \"src\",\n      \"requests\",\n      \"using\",\n      \"response\",\n      \"python\",\n      \"html\",\n      \"srcsrcbut\"\n    ],\n      \"PUBLICATION DATE\": null,\n      \"SUMMARY\": \"I am using requests to get the image from remote URL.\nSince the images will always be 16x16, I want to convert them to base64 , so that I can embed them later to use in HTML img tag.\nimport requests import base64 response = requests.get(url).content print(response) b = base64.b64encode(response) src = \"data:image/png;base64,\" + bThe output for response is:response = b'GIF89a\\x80\\x00\\x80\\x00\\xc4\\x1f\\x00\\xff\\xff\\xff\\x00\\x00\\x00\\xff\\x00\\x00\\xff\\x88\\x88\"\"\"\\xffff\\...\nThe HTML part is:<img src=\"{{src}}\"/>But the image is not displayed.\",\n      \"TITLE\": \"Python requests base64 image\",\n      \"TOP_IMAGE\": \"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\"\n      },\n     \"given_url\": \"https://stackoverflow.com/questions/30280495/python-requests-base64-image\"\n     },\n    \"query_limit\": \"1000\",\n    \"query_limit_remaining\": \"825\",\n    \"query_limit_request\": 1,\n    \"status_code\": 200\n\n            }\n\nPersonalitytraits Model\n\nThe Personality Traits model of data2insights will take text as the input and return the Personality Traits of the given text as the response object.\n\nMethod Name :\n\nclassifiers.personalitytraits(data='provide input text');  # for single text \nbatchclassifiers.personalitytraits(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.personalitytraits(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n            Classifier_id: 'Topic',\n            classifications: {\n              Prediction_accuracy: '85.09',\n              given_text: 'Welcome to d2i',\n              topic: 'recreation'\n            },\n            content_type: 'application-json',\n            query_limit: '5000',\n            query_limit_remaining: '4935',\n            query_limit_request: 1,\n            status_code: 200\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.personalitytraits(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n            \"Processed_file location\": \"./outputfiles/102/personalityTraits/Sample-Spreadsheet-10-rows221.xls\",\n            \"msg\": \"file_processing_completed\",\n            \"status_code\": 200\n        }\n\nReadability Model\n\nThe Readability model of data2insights will take text as the input and return the type of some metrics of the given text as the response object.\n\nMethod Name :\n\nclassifiers.readability(data='provide input text');  # for single text \nbatchclassifiers.readability(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.readability(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Metrics\": {\n          \"document_readability\": {\n          \"Automated_Readability_Index\": -11.6,\n          \"Coleman_liau_index\": -33.81,\n          \"Dalechal\": 0.05,\n          \"Flesch_Kindrade_Grade\": -3.5,\n          \"Flesch_Reading_Score\": 121.22,\n          \"Gunning_Fog\": 0.4,\n          \"Linsear_Write\": -0.5,\n          \"Smog_index\": 0.0\n        },\n        \"given_text\": \"hi\"\n      },\n         \"Metrix_id\": \"Document_readability\",\n         \"content_type\": \"application-json\",\n         \"query_limit\": \"1000\",\n         \"query_limit_remaining\": \"824\",\n         \"query_limit_request\": 1,\n         \"status_code\": 200\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.readability(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/readability/data421.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n\n        }\n\nSimilarity Model\n\nThe Similarity model of data2insights will find the similarity between two texts.\n\nMethod Name :\n\ntext->classifiers.similarity(data1='provide text',data2='provide text');  # for single text \nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.similarity(data1='provide text',data2='provide text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Metrics\": {\n          \"Cosine_similarity\": 0.0,\n          \"Jaccard_similarity\": 0.0,\n          \"given_text1\": \"hi\",\n          \"given_text2\": \"hello\"\n          },\n          \"Metrix_id\": \"Document_similarity\",\n          \"content_type\": \"application-json\",\n          \"query_limit\": \"1000\",\n          \"query_limit_remaining\": \"823\",\n          \"query_limit_request\": 1,\n          \"status_code\": 200\n\n          }\n\nQandA Model\n\nThe Q&A model of data2insights will find the answer for the given question from the given paragraph.\n\nMethod Name :\n\nclassifiers.QA(question='provide question', paragraph='provide paragraph');  # for single text \nbatchclassifiers.QA(column1='provide question column number',column2='provide paragraph column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.QA(question='provide question', paragraph='provide paragraph')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n            content_type: 'application-json',\n            'q&a': {\n              Answer: 'welcome to data2insights',\n              given_paragraph: 'welcome to data2insights',\n              given_question: 'welcome to d2i?'\n            },\n            query_limit: '5000',\n            query_limit_remaining: '4923',\n            query_limit_request: 1,\n            status_code: 200\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.QA(column1='provide question column number',column2='provide paragraph column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n            \"Processed_file location\": \"./outputfiles/102/QandA/Sample-Spreadsheet-10-rows221.xls\",\n            \"msg\": \"file_processing_completed\",\n            \"status_code\": 200\n        }\n\nHempTopic Model\n\nThe HempTopic model of data2insights will helps you in identifying topics.\n\nMethod Name :\n\nclassifiers.hemptopic(data='provide input text');  # for single text \nbatchclassifiers.hemptopic(column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.hemptopic(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Classification_id\": \"Hemptopic\",\n          \"classifications\": {\n          \"Prediction_accuracy\": \"83.65\",\n          \"given_text\": \"hi\",\n          \"hemptopic\": \"Beauty\"\n          },\n          \"content_type\": \"application-json\",\n          \"query_limit\": \"1000\",\n          \"query_limit_remaining\": \"814\",\n          \"query_limit_request\": 1,\n          \"status_code\": 200\n\n\n          }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.hemptopic(column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Processed_file location\": \"./outputfiles/3/hemptopic/data502.csv\",\n          \"msg\": \"file_processing_completed\",\n          \"status_code\": 200\n         }\n\nBertEntity Model\n\nThe BertEntity model of data2insights will helps you to identify the entities.\n\nMethod Name :\n\nclassifiers.bertentity(data='provide input text');  # for single text \nbatchclassifiers.bertentity((column='provide column number',files={'file': open('provide full path of file', 'rb')}); # for batch process\nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.bertentity(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n          \"Extraction_id\": \"Bertentity\",\n          \"content_type\": \"application-json\",\n          \"extractions\": {\n          \"Bertentity\": [\n          {\n           \"bertentity\": \"O\",\n           \"text\": \"hi\"\n          }\n        ],\n         \"given_text\": \"hi\"\n        },\n         \"query_limit\": \"1000\",\n         \"query_limit_remaining\": \"813\",\n         \"query_limit_request\": 1,\n         \"status_code\": 200\n        }\nExample for batch text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.batchclassifiers.bertentity((column='provide column number',files={'file': open('provide full path of file', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n            \"Processed_file location\": \"./outputfiles/3/bertentity/data501.csv\",\n            \"msg\": \"file_processing_completed\",\n            \"status_code\": 200\n         }\n\nSummarization Model\n\nThe Summarization model of data2insights will helps you summarize the given text.\n\nMethod Name :\n\ntext->classifiers.summarization(data='provide input text');  # for single text \nExample for single text :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.classifiers.summarization(data='provide input text')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    \n\nPython Vision Analytics Models\n\n\nThe Vision analysis models can take a image as the input and gives the appropriate predicted results for that model.The input image should contain .png (or) .jpeg formats only and it should be either local file or remote file url.\n\n\n\nLogo Model\n\nThe Logo model of data2insights will predict the 27 types of logos from the given input image.\n\nMethod Name :\n\nvisionclassifiers.logo(data='provide image url');  \nvisionclassifiers.logoupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.logo(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n        \"Classifier_id\": \"Logo\",\n        \"classifications\": {\n        \"Logos\": []\n        },\n        \"content_type\": \"application-json\",\n        \"query_limit\": \"1000\",\n        \"query_limit_remaining\": \"812\",\n        \"query_limit_request\": 1,\n        \"status_code\": 200\n\n      }\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.logoupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n        \"Classifier_id\": \"Logo\",\n        \"classifications\": {\n        \"Logos\": []\n        },\n        \"content_type\": \"application-json\",\n        \"query_limit\": \"1000\",\n        \"query_limit_remaining\": \"774\",\n        \"query_limit_request\": 1,\n        \"status_code\": 200\n      }\n\nBird Model\n\nThe Bird model of data2insights will predict the 27 types of birds from the given input image.\n\nMethod Name :\n\nvisionclassifiers.bird(data='provide image url');  \nvisionclassifiers.birdupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.bird(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\"Classifier_id\": \"Bird\",\n  \"classifications\": {\n    \"Birds\": [\n      {\n        \"Bird\": \"toucan_bird\",\n        \"Coordinates\": {\n          \"Bottom\": 771.510648727417,\n          \"Left\": 53.76867055892944,\n          \"Right\": 1191.6043281555176,\n          \"Top\": 14.702987670898438\n        },\n        \"Prediction_accuracy\": 99,\n        \"bird\": 1\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"794\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.birdupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n       \"Classifier_id\": \"Bird\",\n  \"classifications\": {\n    \"Birds\": [\n      {\n        \"Bird\": \"parrot_bird\",\n        \"Coordinates\": {\n          \"Bottom\": 523.5589575767517,\n          \"Left\": 60.50408989191055,\n          \"Right\": 711.0763740539551,\n          \"Top\": 58.13420504331589\n        },\n        \"Prediction_accuracy\": 92,\n        \"bird\": 1\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"772\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\n\nTransport Model\n\nThe Transport model of data2insights will predict the vehicle types from the given input image.\n\nMethod Name :\n\nvisionclassifiers.transport(data='provide image url');  \nvisionclassifiers.transportupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.transport(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Transport\",\n  \"classifications\": {\n    \"Transports\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 800.0,\n          \"Left\": 46.82081937789917,\n          \"Right\": 1174.506425857544,\n          \"Top\": 8.72507095336914\n        },\n        \"Prediction_accuracy\": 76,\n        \"Transport\": \"auto\",\n        \"transport\": 1\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"785\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.transportupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Transport\",\n\t\"classifications\": {\n\t\t\"Transports\": [{\n\t\t\t\"Coordinates\": {\n\t\t\t\t\"Bottom\": 502.32422828674316,\n\t\t\t\t\"Left\": 41.04209750890732,\n\t\t\t\t\"Right\": 651.0549342632294,\n\t\t\t\t\"Top\": 30.10187178850174\n\t\t\t},\n\t\t\t\"Prediction_accuracy\": 31,\n\t\t\t\"Transport\": \"aeroplane\",\n\t\t\t\"transport\": 1\n\t\t}]\n\t},\n\t\"content_type\": \"application-json\",\n\t\"query_limit\": \"1000\",\n\t\"query_limit_remaining\": \"771\",\n\t\"query_limit_request\": 1,\n\t\"status_code\": 200\n\n}\n\nPlant Model\n\nThe Plant model of data2insights will predict the plant types from the given input image.\n\nMethod Name :\n\nvisionclassifiers.plant(data='provide image url');  \nvisionclassifiers.plantupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.plant(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\"Classifier_id\": \"Plant\",\n  \"classifications\": {\n    \"Plants\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 754.0493965148926,\n          \"Left\": 9.73820686340332,\n          \"Right\": 1200.0,\n          \"Top\": 27.520751953125\n        },\n        \"Plant\": \"plants_indoor\",\n        \"Prediction_accuracy\": 58,\n        \"plant\": 1\n      },\n      {\n        \"Coordinates\": {\n          \"Bottom\": 800.0,\n          \"Left\": 54.79602813720703,\n          \"Right\": 1131.5191984176636,\n          \"Top\": 10.229825973510742\n        },\n        \"Plant\": \"plants_outdoor\",\n        \"Prediction_accuracy\": 53,\n        \"plant\": 2\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"803\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.plantupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Plant\",\n \"classifications\": {\n   \"Plants\": [\n     {\n       \"Coordinates\": {\n         \"Bottom\": 490.9296751022339,\n         \"Left\": 0.0,\n         \"Right\": 730.0,\n         \"Top\": 24.103980362415314\n       },\n       \"Plant\": \"plants_indoor\",\n       \"Prediction_accuracy\": 54,\n       \"plant\": 1\n     }\n   ]\n },\n \"content_type\": \"application-json\",\n \"query_limit\": \"1000\",\n \"query_limit_remaining\": \"769\",\n \"query_limit_request\": 1,\n \"status_code\": 200\n\n}\n\nAge Model\n\nThe Age model of data2insights will predict the age of the persons from the given input image.\n\nMethod Name :\n\nvisionclassifiers.age(data='provide image url');  \nvisionclassifiers.ageupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.age(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n        \"Classifier_id\": \"Age\",\n  \"classifications\": {\n    \"Faces\": [\n      {\n        \"Age\": \"31-55\",\n        \"Coordinates\": {\n          \"Bottom\": 287.21981048583984,\n          \"Left\": 505.4616093635559,\n          \"Right\": 690.896487236023,\n          \"Top\": 18.590307235717773\n        },\n        \"Face\": 1,\n        \"Predicted_accuracy\": 51\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"798\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.ageupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n\n \"Classifier_id\": \"Age\",\n \"classifications\": {\n   \"Faces\": []\n },\n \"content_type\": \"application-json\",\n \"query_limit\": \"1000\",\n \"query_limit_remaining\": \"761\",\n \"query_limit_request\": 1,\n \"status_code\": 200\n\n}\n\nGender Model\n\nThe Gender model of data2insights will predict the gender of the persons from the given input image.\n\nMethod Name :\n\nvisionclassifiers.gender(data='provide image url');  \nvisionclassifiers.genderupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.gender(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Gender\",\n  \"classifications\": {\n  \"Faces\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 295.8600044250488,\n          \"Left\": 507.1301221847534,\n          \"Right\": 694.7623014450073,\n          \"Top\": 10.44924259185791\n        },\n        \"Face\": 1,\n        \"Gender\": \"Male\",\n        \"Predicted_accuracy\": 99\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"777\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.genderupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Gender\",\n  \"classifications\": {\n    \"Faces\": []\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"763\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n\n}\n\nEmotion Model\n\nThe Emotion model of data2insights will predict the emotion of the person from the given input image.\n\nMethod Name :\n\nvisionclassifiers.emotion(data='provide image url');  \nvisionclassifiers.emotionupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.emotion(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\"Classifier_id\": \"Emotion\",\n  \"classifications\": {\n    \"Faces\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 283.68217945098877,\n          \"Left\": 519.590413570404,\n          \"Right\": 677.3368835449219,\n          \"Top\": 43.988871574401855\n        },\n        \"Emotion\": \"Neutral\",\n        \"Face\": 1,\n        \"Predicted_accuracy\": 54\n      },\n      {\n        \"Coordinates\": {\n          \"Bottom\": 282.6207637786865,\n          \"Left\": 510.5981111526489,\n          \"Right\": 689.1172885894775,\n          \"Top\": 29.67963218688965\n        },\n        \"Emotion\": \"Surprise\",\n        \"Face\": 2,\n        \"Predicted_accuracy\": 37\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"792\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.emotionupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Emotion\",\n  \"classifications\": {\n    \"Faces\": []\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"762\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n\n}\n\nColor Model\n\nThe Color model of data2insights will predict the different color from the given input image.\n\nMethod Name :\n\nvisionclassifiers.color(data='provide image url');  \nvisionclassifiers.colorupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.color(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n        \"Classifier_id\": \"Color\",\n  \"classifications\": {\n    \"Faces\": [\n      {\n        \"Color\": \"white_people\",\n        \"Coordinates\": {\n          \"Bottom\": 791.8387413024902,\n          \"Left\": 224.97146129608154,\n          \"Right\": 987.045407295227,\n          \"Top\": 47.0322847366333\n        },\n        \"Face\": 1,\n        \"Predicted_accuracy\": 99\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"799\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.colorupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Color\",\n  \"classifications\": {\n    \"Faces\": [\n      {\n        \"Color\": \"white_people\",\n        \"Coordinates\": {\n          \"Bottom\": 513.8462805747986,\n          \"Left\": 38.191078901290894,\n          \"Right\": 642.4347186088562,\n          \"Top\": 38.06664854288101\n        },\n        \"Face\": 1,\n        \"Predicted_accuracy\": 96\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"760\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n\n}\n\nScene Model\n\nThe Scene model of data2insights will predict the different scenes from the given input image.\n\nMethod Name :\n\nvisionclassifiers.scene(data='provide image url');  \nvisionclassifiers.sceneupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.scene(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\"Classifier_id\": \"Scene\",\n  \"classifications\": {\n    \"Scenes\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 795.6767559051514,\n          \"Left\": 211.76365613937378,\n          \"Right\": 954.124116897583,\n          \"Top\": 36.2668514251709\n        },\n        \"Prediction_accuracy\": 48,\n        \"Scene\": \"Office_building\",\n        \"scene\": 1\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"790\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.sceneupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Scene\",\n  \"classifications\": {\n    \"Scenes\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 795.6767559051514,\n          \"Left\": 211.76365613937378,\n          \"Right\": 954.124116897583,\n          \"Top\": 36.2668514251709\n        },\n        \"Prediction_accuracy\": 48,\n        \"Scene\": \"Office_building\",\n        \"scene\": 1\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"790\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n\n}\n\nWeather Model\n\nThe Weather model of data2insights will predict the weather in the given input image.\n\nMethod Name :\n\nvisionclassifiers.weather(data='provide image url');  \nvisionclassifiers.weatherupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.weather(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Weather\",\n  \"classifications\": {\n    \"Scenes\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 786.3454818725586,\n          \"Left\": 22.405779361724854,\n          \"Right\": 1196.6458797454834,\n          \"Top\": 62.87107467651367\n        },\n        \"Prediction_accuracy\": 90,\n        \"Weather\": \"weather_cloudy\",\n        \"scene\": 1\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"789\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.weatherupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Weather\",\n\t\"classifications\": {\n\t\t\"Scenes\": [{\n\t\t\t\"Coordinates\": {\n\t\t\t\t\"Bottom\": 521.9473385810852,\n\t\t\t\t\"Left\": 9.529821276664734,\n\t\t\t\t\"Right\": 723.5642737150192,\n\t\t\t\t\"Top\": 29.81929510831833\n\t\t\t},\n\t\t\t\"Prediction_accuracy\": 99,\n\t\t\t\"Weather\": \"weather_snowy\",\n\t\t\t\"scene\": 1\n\t\t}]\n\t},\n\t\"content_type\": \"application-json\",\n\t\"query_limit\": \"1000\",\n\t\"query_limit_remaining\": \"764\",\n\t\"query_limit_request\": 1,\n\t\"status_code\": 200\n\n}\n\nViolence Model\n\nThe Violence model of data2insights will predict the violence from the given input image.\n\nMethod Name :\n\nvisionclassifiers.violence(data='provide image url');  \nvisionclassifiers.violenceupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.violence(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\"Classifier_id\": \"Violence\",\n  \"classifications\": {\n    \"Scenes\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 797.3269462585449,\n          \"Left\": 111.29786968231201,\n          \"Right\": 1200.0,\n          \"Top\": 0.0\n        },\n        \"Prediction_accuracy\": 99,\n        \"Violence\": \"war\",\n        \"scene\": 1\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"787\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.violenceupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Violence\",\n  \t\"classifications\": {\n  \t\t\"Scenes\": [{\n  \t\t\t\"Coordinates\": {\n  \t\t\t\t\"Bottom\": 527.7309834957123,\n  \t\t\t\t\"Left\": 62.09136366844177,\n  \t\t\t\t\"Right\": 730.0,\n  \t\t\t\t\"Top\": 0.0\n  \t\t\t},\n  \t\t\t\"Prediction_accuracy\": 99,\n  \t\t\t\"Violence\": \"war\",\n  \t\t\t\"scene\": 1\n  \t\t}, {\n  \t\t\t\"Coordinates\": {\n  \t\t\t\t\"Bottom\": 527.7526861429214,\n  \t\t\t\t\"Left\": 13.07406336069107,\n  \t\t\t\t\"Right\": 720.9626841545105,\n  \t\t\t\t\"Top\": 16.71631395816803\n  \t\t\t},\n  \t\t\t\"Prediction_accuracy\": 60,\n  \t\t\t\"Violence\": \"violence\",\n  \t\t\t\"scene\": 2\n  \t\t}]\n  \t},\n  \t\"content_type\": \"application-json\",\n  \t\"query_limit\": \"1000\",\n  \t\"query_limit_remaining\": \"766\",\n  \t\"query_limit_request\": 1,\n  \t\"status_code\": 200\n\n}\n\nTLO Model\n\nThe Tlo model of data2insights will predict the trees,laks, and oceans from the given input image.\n\nMethod Name :\n\nvisionclassifiers.tlo(data='provide image url');  \nvisionclassifiers.tloupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.tlo(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\"Classifier_id\": \"Tlo\",\n  \"classifications\": {\n    \"Scenes\": [\n      {\n        \"Coordinates\": {\n          \"Bottom\": 784.9786281585693,\n          \"Left\": 15.252542495727539,\n          \"Right\": 1200.0,\n          \"Top\": 68.20473670959473\n        },\n        \"Prediction_accuracy\": 99,\n        \"Tlo\": \"lake\",\n        \"scene\": 1\n      }\n    ]\n  },\n  \"content_type\": \"application-json\",\n  \"query_limit\": \"1000\",\n  \"query_limit_remaining\": \"788\",\n  \"query_limit_request\": 1,\n  \"status_code\": 200\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.tloupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n  \"Classifier_id\": \"Tlo\",\n\t\"classifications\": {\n\t\t\"Scenes\": [{\n\t\t\t\"Coordinates\": {\n\t\t\t\t\"Bottom\": 510.66392064094543,\n\t\t\t\t\"Left\": 18.766419291496277,\n\t\t\t\t\"Right\": 719.1625744104385,\n\t\t\t\t\"Top\": 101.74509018659592\n\t\t\t},\n\t\t\t\"Prediction_accuracy\": 99,\n\t\t\t\"Tlo\": \"lake\",\n\t\t\t\"scene\": 1\n\t\t}]\n\t},\n\t\"content_type\": \"application-json\",\n\t\"query_limit\": \"1000\",\n\t\"query_limit_remaining\": \"765\",\n\t\"query_limit_request\": 1,\n\t\"status_code\": 200\n\n}\n\nGeneral Objects Model\n\nThe Object model of data2insights will predict the different types of general objects from the given input image.It predicts 545 types of objects.\n\nMethod Name :\n\nvisionclassifiers.generalobject(data='provide image url');  \nvisionclassifiers.generalobjectupload(files={'file': open('provide image full path', 'rb')});\nExample for image URL :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.generalobject(data='provide image url')\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n\n\t\"Classifier_id\": \"General_Object\",\n\n\t\"classifications\": {\n\n\t\t\"GeneralObjects\": [\n\n\t\t\t{\n\n\t\t\t\t\"Class\": \"Clothing\",\n\n\t\t\t\t\"Coordinates\": {\n\n\t\t\t\t\t\"Bottom\": 781.9650173187256,\n\n\t\t\t\t\t\"Left\": 326.60393714904785,\n\n\t\t\t\t\t\"Right\": 913.2122039794922,\n\n\t\t\t\t\t\"Top\": 258.1010580062866\n\n\t\t\t\t},\n\n\t\t\t\t\"Object\": 1,\n\n\t\t\t\t\"Score\": 73\n\n\t\t\t},\n\n\t\t\t{\n\n\t\t\t\t\"Class\": \"Face\",\n\n\t\t\t\t\"Coordinates\": {\n\n\t\t\t\t\t\"Bottom\": 274.97315406799316,\n\n\t\t\t\t\t\"Left\": 508.36490392684937,\n\n\t\t\t\t\t\"Right\": 689.9345397949219,\n\n\t\t\t\t\t\"Top\": 28.40385138988495\n\n\t\t\t\t},\n\n\t\t\t\t\"Object\": 2,\n\n\t\t\t\t\"Score\": 54\n\n\t\t\t},\n\n\t\t\t{\n\n\t\t\t\t\"Class\": \"Person\",\n\n\t\t\t\t\"Coordinates\": {\n\n\t\t\t\t\t\"Bottom\": 795.4741477966309,\n\n\t\t\t\t\t\"Left\": 309.1881036758423,\n\n\t\t\t\t\t\"Right\": 943.9865827560425,\n\n\t\t\t\t\t\"Top\": 30.157431960105896\n\n\t\t\t\t},\n\n\t\t\t\t\"Object\": 3,\n\n\t\t\t\t\"Score\": 42\n\n\t\t\t},\n\n\t\t\t{\n\n\t\t\t\t\"Class\": \"Man\",\n\n\t\t\t\t\"Coordinates\": {\n\n\t\t\t\t\t\"Bottom\": 794.6691036224365,\n\n\t\t\t\t\t\"Left\": 319.6103096008301,\n\n\t\t\t\t\t\"Right\": 909.6429347991943,\n\n\t\t\t\t\t\"Top\": 29.600465297698975\n\n\t\t\t\t},\n\n\t\t\t\t\"Object\": 4,\n\n\t\t\t\t\"Score\": 40\n\n\t\t\t}\n\n\t\t]\n\n\t},\n\n\t\"content_type\": \"application-json\",\n\n\t\"status_code\": 200,\n\n\t\"query_limit\": \"10000\",\n\n\t\"query_limit_remaining\": \"9287\",\n\n\t\"query_limit_request\": 1\n\n}\nExample for upload local image :\n\nfrom data2Insights import data2insights\n\n# Use the API key,account Id and email Id  from your account,\ncredentials = data2insights('provide accountid','provide apikey','provide userid')\n\n# Pass the input as parameter to the method\ncredentials.visionclassifiers.generalobjectupload(files={'file': open('provide image full path', 'rb')})\n\nOutput:\n\n#This is exactly the parsed JSON that the Data2Insights API returns!\n    {\n\n\t\"Classifier_id\": \"General_Object\",\n\n\t\"classifications\": {\n\n\t\t\"GeneralObjects\": [\n\n\t\t\t{\n\n\t\t\t\t\"Class\": \"Clothing\",\n\n\t\t\t\t\"Coordinates\": {\n\n\t\t\t\t\t\"Bottom\": 781.9650173187256,\n\n\t\t\t\t\t\"Left\": 326.60393714904785,\n\n\t\t\t\t\t\"Right\": 913.2122039794922,\n\n\t\t\t\t\t\"Top\": 258.1010580062866\n\n\t\t\t\t},\n\n\t\t\t\t\"Object\": 1,\n\n\t\t\t\t\"Score\": 73\n\n\t\t\t},\n\n\t\t\t{\n\n\t\t\t\t\"Class\": \"Face\",\n\n\t\t\t\t\"Coordinates\": {\n\n\t\t\t\t\t\"Bottom\": 274.97315406799316,\n\n\t\t\t\t\t\"Left\": 508.36490392684937,\n\n\t\t\t\t\t\"Right\": 689.9345397949219,\n\n\t\t\t\t\t\"Top\": 28.40385138988495\n\n\t\t\t\t},\n\n\t\t\t\t\"Object\": 2,\n\n\t\t\t\t\"Score\": 54\n\n\t\t\t},\n\n\t\t\t{\n\n\t\t\t\t\"Class\": \"Person\",\n\n\t\t\t\t\"Coordinates\": {\n\n\t\t\t\t\t\"Bottom\": 795.4741477966309,\n\n\t\t\t\t\t\"Left\": 309.1881036758423,\n\n\t\t\t\t\t\"Right\": 943.9865827560425,\n\n\t\t\t\t\t\"Top\": 30.157431960105896\n\n\t\t\t\t},\n\n\t\t\t\t\"Object\": 3,\n\n\t\t\t\t\"Score\": 42\n\n\t\t\t},\n\n\t\t\t{\n\n\t\t\t\t\"Class\": \"Man\",\n\n\t\t\t\t\"Coordinates\": {\n\n\t\t\t\t\t\"Bottom\": 794.6691036224365,\n\n\t\t\t\t\t\"Left\": 319.6103096008301,\n\n\t\t\t\t\t\"Right\": 909.6429347991943,\n\n\t\t\t\t\t\"Top\": 29.600465297698975\n\n\t\t\t\t},\n\n\t\t\t\t\"Object\": 4,\n\n\t\t\t\t\"Score\": 40\n\n\t\t\t}\n\n\t\t]\n\n\t},\n\n\t\"content_type\": \"application-json\",\n\n\t\"status_code\": 200,\n\n\t\"query_limit\": \"10000\",\n\n\t\"query_limit_remaining\": \"9287\",\n\n\t\"query_limit_request\": 1\n\n}",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Data2Insights,services,Text,Vision,Batch",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "data2Insights",
    "package_url": "https://pypi.org/project/data2Insights/",
    "platform": "",
    "project_url": "https://pypi.org/project/data2Insights/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/data2Insights/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Data2Insights package",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11395583,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47794766b29d65aa6b1b430d4d97933f276ba2207f9fd385b3d47505b4b5f193",
          "md5": "0aaa49a6a54c2f6d74564ab6e21fef53",
          "sha256": "7095b5e32d8366008da562538cc993db1588ff16190803768064eaa21a86330d"
        },
        "downloads": -1,
        "filename": "data2Insights-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0aaa49a6a54c2f6d74564ab6e21fef53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25451,
        "upload_time": "2021-09-08T12:44:33",
        "upload_time_iso_8601": "2021-09-08T12:44:33.676202Z",
        "url": "https://files.pythonhosted.org/packages/47/79/4766b29d65aa6b1b430d4d97933f276ba2207f9fd385b3d47505b4b5f193/data2Insights-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47794766b29d65aa6b1b430d4d97933f276ba2207f9fd385b3d47505b4b5f193",
        "md5": "0aaa49a6a54c2f6d74564ab6e21fef53",
        "sha256": "7095b5e32d8366008da562538cc993db1588ff16190803768064eaa21a86330d"
      },
      "downloads": -1,
      "filename": "data2Insights-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0aaa49a6a54c2f6d74564ab6e21fef53",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25451,
      "upload_time": "2021-09-08T12:44:33",
      "upload_time_iso_8601": "2021-09-08T12:44:33.676202Z",
      "url": "https://files.pythonhosted.org/packages/47/79/4766b29d65aa6b1b430d4d97933f276ba2207f9fd385b3d47505b4b5f193/data2Insights-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}