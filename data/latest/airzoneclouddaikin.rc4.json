{
  "info": {
    "author": "max13fr",
    "author_email": "max13fr@yozo.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Airzone Cloud Daikin\n\n- [Airzone Cloud Daikin](#airzone-cloud-daikin)\n  - [Presentation](#presentation)\n    - [Abstract](#abstract)\n    - [Module classes](#module-classes)\n  - [Usage](#usage)\n    - [Install](#install)\n    - [Start API](#start-api)\n    - [Get installations](#get-installations)\n    - [Get devices from installations](#get-devices-from-installations)\n    - [Get all devices shortcut](#get-all-devices-shortcut)\n    - [Control a device](#control-a-device)\n    - [HVAC mode](#hvac-mode)\n      - [Available modes](#available-modes)\n      - [Set HVAC mode on a system (and its sub-zones)](#set-hvac-mode-on-a-system-and-its-sub-zones)\n  - [API doc](#api-doc)\n    - [Constructor](#constructor)\n\n## Presentation\n\n### Abstract\n\nAllow to communicate easily with Daikin Airzone Cloud to retrieve information or to send commands (on/off, temperature, HVAC mode, ...)\n\nThis API is specific to Daikin implementation (try to connect to [dkn.airzonecloud.com](https://dkn.airzonecloud.com) to be sure).\n\nIf you are looking for the main Airzone Cloud API (try to connect to [www.airzonecloud.com](https://www.airzonecloud.com)), you should use this package : [AirzoneCloud](https://github.com/max13fr/AirzoneCloud)\n\n### Module classes\n\n- **AirzoneCloudDaikin** : represent your Daikin AirzoneCloud account. Contains a list of your **installations** :\n  - **Installation**: represent one of your installation (like your home, an office, ...). Contains a list of its **devices** :\n    - **Device** : represent your climate equipement to control\n\n## Usage\n\n### Install\n\n```bash\npip3 install AirzoneCloudDaikin\n```\n\n### Start API\n\n```python\nfrom AirzoneCloudDaikin import AirzoneCloudDaikin\napi = AirzoneCloudDaikin(\"email@domain.com\", \"password\")\n```\n\n### Get installations\n\n```python\nfor installation in api.installations:\n    print(\n        \"Installation(name={}, type={}, scenary={}, id={})\".format(\n            installation.name, installation.type, installation.scenary, installation.id\n        )\n    )\n```\n\nOutput :\n\n<pre>\nInstallation(name=My home, type=home, scenary=occupied, id=5d592c14646b6d798ccc2aaa)\n</pre>\n\n### Get devices from installations\n\n```python\nfor installation in api.installations:\n    for device in installation.devices:\n        print(\n            \"Device(name={}, is_on={}, mode={}, current_temp={}, target_temp={}, id={}, mac={})\".format(\n                device.name,\n                device.is_on,\n                device.mode,\n                device.current_temperature,\n                device.target_temperature,\n                device.id,\n                device.mac,\n            )\n        )\n```\n\nOutput :\n\n<pre>\nDevice(name=Dknwserver, is_on=False, mode=cool, current_temp=25.0, target_temp=26.0, id=5ab1875a651241708814575681, mac=AA:BB:CC:DD:EE:FF)\n</pre>\n\n### Get all devices shortcut\n\n```python\nfor device in api.all_devices:\n    print(\n        \"Device(name={}, is_on={}, mode={}, current_temp={}, target_temp={}, id={}, mac={})\".format(\n            device.name,\n            device.is_on,\n            device.mode,\n            device.current_temperature,\n            device.target_temperature,\n            device.id,\n            device.mac,\n        )\n    )\n```\n\nOutput :\n\n<pre>\nDevice(name=Dknwserver, is_on=False, mode=cool, current_temp=25.0, target_temp=26.0, id=5ab1875a651241708814575681, mac=AA:BB:CC:DD:EE:FF)\n</pre>\n\n### Control a device\n\n```python\ndevice = api.all_devices[0]\nprint(device)\n\n# start device\ndevice.turn_on()\n\n# set temperature\ndevice.set_temperature(26)\n\nprint(device)\n\n# stopping device\ndevice.turn_off()\n\nprint(device)\n```\n\nOutput :\n\n<pre>\nDevice(name=Dknwserver, is_on=False, mode=cool, current_temp=25.0, target_temp=30.0)\nDevice(name=Dknwserver, is_on=True, mode=cool, current_temp=25.0, target_temp=26.0)\nDevice(name=Dknwserver, is_on=False, mode=cool, current_temp=25.0, target_temp=26.0)\n</pre>\n\n### HVAC mode\n\n#### Available modes\n\n- **cool** : Cooling mode\n- **heat** : Heating mode\n- **ventilate** : Ventilation\n- **dehumidify** : Dry\n- **heat-cold-auto** : Auto heat/cold mode\n\n#### Set HVAC mode on a system (and its sub-zones)\n\n```python\ndevice = api.all_devices[0]\nprint(device)\n\n# set mode to heat\ndevice.set_mode(\"heat\")\n\nprint(device)\n```\n\nOutput :\n\n<pre>\nDevice(name=Dknwserver, is_on=False, mode=cool, current_temp=25.0, target_temp=26.0)\nDevice(name=Dknwserver, is_on=False, mode=heat, current_temp=25.0, target_temp=23.0)\n</pre>\n\n> :warning: Daikin climate equipment has 2 consigns : one for heat & one of cold.\n> Its visible in the previous example, the target temperature has change from 26 to 23 just by changing the mode from cool to heat.\n> So don't forget to do your set_temperature() AFTER the set_mode() and not before\n\n## API doc\n\n[API full doc](API.md)\n\n### Constructor\n\n```python\nAirzoneCloudDaikin(username, password, user_agent=None, base_url=None)\n```\n\n- **username** : you're username used to connect on Daikin Airzone Cloud website or app\n- **password** : you're password used to connect on Daikin Airzone Cloud website or app\n- **user_agent** : allow to change default user agent if set\n- **base_url** : allow to change base url of the Daikin Airzone Cloud API if set\n  - default value : _https://dkn.airzonecloud.com_",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/max13fr/AirzoneCloudDaikin",
    "keywords": "airzone,airzonecloud,daikin,DKN,api",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "AirzoneCloudDaikin",
    "package_url": "https://pypi.org/project/AirzoneCloudDaikin/",
    "platform": "",
    "project_url": "https://pypi.org/project/AirzoneCloudDaikin/",
    "project_urls": {
      "Homepage": "https://github.com/max13fr/AirzoneCloudDaikin"
    },
    "release_url": "https://pypi.org/project/AirzoneCloudDaikin/0.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Python3 library for Daikin (DKN) Airzone Cloud API",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9149903,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69a55d62439f87b55bdd1624ba7d7a8fc5e62d43499269d27b5d1f5aabee2a25",
          "md5": "2b24ce10a0c9a98288778ec693ef30be",
          "sha256": "1cc0e98b2fc6561257f16a3394472883f82c01eca667161300c3dafb1a93d6a2"
        },
        "downloads": -1,
        "filename": "AirzoneCloudDaikin-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2b24ce10a0c9a98288778ec693ef30be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7724,
        "upload_time": "2020-05-24T07:20:47",
        "upload_time_iso_8601": "2020-05-24T07:20:47.951257Z",
        "url": "https://files.pythonhosted.org/packages/69/a5/5d62439f87b55bdd1624ba7d7a8fc5e62d43499269d27b5d1f5aabee2a25/AirzoneCloudDaikin-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bead7e44bdaf84efad62abaa2de2fa1ba9ae36570d4bb770be24aedcd5daacb",
          "md5": "cf6ab8d28b7a09dbe71d9406e792cd20",
          "sha256": "8545b93e2ffd2764a3dad691cf1954285b1f010e3c322c3c89447b77cd59075d"
        },
        "downloads": -1,
        "filename": "AirzoneCloudDaikin-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf6ab8d28b7a09dbe71d9406e792cd20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7980,
        "upload_time": "2020-10-31T13:45:42",
        "upload_time_iso_8601": "2020-10-31T13:45:42.511892Z",
        "url": "https://files.pythonhosted.org/packages/3b/ea/d7e44bdaf84efad62abaa2de2fa1ba9ae36570d4bb770be24aedcd5daacb/AirzoneCloudDaikin-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d3390d23cd44429600ba0d097205d6ffbdff83ce02b1557755c0be4205f6144",
          "md5": "dddca2dc9d62597141fa9c9625537641",
          "sha256": "452c538abd45862bcf5ed19578031b0bd19ff8cf6ae8318b015907647c2b761d"
        },
        "downloads": -1,
        "filename": "AirzoneCloudDaikin-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dddca2dc9d62597141fa9c9625537641",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7980,
        "upload_time": "2020-10-31T15:04:55",
        "upload_time_iso_8601": "2020-10-31T15:04:55.973408Z",
        "url": "https://files.pythonhosted.org/packages/2d/33/90d23cd44429600ba0d097205d6ffbdff83ce02b1557755c0be4205f6144/AirzoneCloudDaikin-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b8d9d7b4f7f410093ce53006c978e595d8a7d15165bca1a8bc31e8db698f5c1",
          "md5": "bde8e7074dc6669b8b6933c2e7e40160",
          "sha256": "0c33dae16c92e4ef7c302cf694652823c81ee2de070493d8a5d3899feaea3462"
        },
        "downloads": -1,
        "filename": "AirzoneCloudDaikin-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bde8e7074dc6669b8b6933c2e7e40160",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7992,
        "upload_time": "2021-01-16T09:38:02",
        "upload_time_iso_8601": "2021-01-16T09:38:02.658816Z",
        "url": "https://files.pythonhosted.org/packages/6b/8d/9d7b4f7f410093ce53006c978e595d8a7d15165bca1a8bc31e8db698f5c1/AirzoneCloudDaikin-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b8d9d7b4f7f410093ce53006c978e595d8a7d15165bca1a8bc31e8db698f5c1",
        "md5": "bde8e7074dc6669b8b6933c2e7e40160",
        "sha256": "0c33dae16c92e4ef7c302cf694652823c81ee2de070493d8a5d3899feaea3462"
      },
      "downloads": -1,
      "filename": "AirzoneCloudDaikin-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bde8e7074dc6669b8b6933c2e7e40160",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 7992,
      "upload_time": "2021-01-16T09:38:02",
      "upload_time_iso_8601": "2021-01-16T09:38:02.658816Z",
      "url": "https://files.pythonhosted.org/packages/6b/8d/9d7b4f7f410093ce53006c978e595d8a7d15165bca1a8bc31e8db698f5c1/AirzoneCloudDaikin-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}