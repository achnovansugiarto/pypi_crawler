{
  "info": {
    "author": "MaxWu",
    "author_email": "EfiPy.Core@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# kmodule\nPython wrapper for Linux insmod, rmmod, lsmod and modinfo.  \nIt test in X86_64 and Rapberry pi 4.  \n# Homepage\n[kmodule](https://github.com/EfiPy/kmodule)\n# Build kmodule manual\n## pull kmod from remote\nPull kmod source code in submodule.\n`git submodule update --init --recursive`  \n## install kmodule\n- `pip3 install kmodule` (prefered)  \n- `python3 setup.py install` (not prefered)  \n## Build kmodule\n- `python3 setup.py build` (Used by dev)\n# Build sample\n- Download [Linux kernel sample module hello-5 from](https://github.com/EfiPy/kmodule/tree/master/hello-5)\n- Confirm Makefile, hello-5.c and sample.py exist.\n- Install build kernel module required toolchain, header files and libraries.\n- Goto hello-5 folder, run\n```\nmake\npython3 sample.py\n```\n# Example (python invoked as root)\n    >>> import kmodule as km\n    >>> mlist = km.lsmod ()\n    >>> for m, v in mlist.items ():\n    ...    print ('======================')\n    ...    print ('name: %s' % v.name)\n    ...    print ('    v.size: 0x%X' % v.size)\n    ...    print ('  v.opened: %d'   % v.opened)\n    ...    print ('  v.status: %s'   % v.status)\n    ...    print ('  v.offset: 0x%X' % v.offset)\n    ...    print ('  v.usedby:', v.usedby)\n    ======================\n    name: psmouse\n        v.size: 0x25000\n      v.opened: 0\n      v.status: Live\n      v.offset: 0xFFFFFFFFC03E2000\n      ......\n    ======================\n    name: cryptd\n        v.size: 0x6000\n      v.opened: 3\n      v.status: Live\n      v.offset: 0xFFFFFFFFC04A9000\n    >>>\n    >>> km.insmod (\"hello-5.ko\")\n    >>> km.rmmod(\"hello_5\")\n    >>> minfo = km.modinfo (\"hello-5.ko\", \"e1000\")\n    >>> print (minfo)\n      ......\n# Usage\n    lsmod()\n        NAME\n               kmodule.lsmod() - Show the status of modules in the Linux Kernel\n\n        DESCRIPTION\n               kmodule.lsmod() is a trivial program which nicely formats the contents\n               of the /proc/modules, showing what kernel modules are currently loaded.\n\n        RETURN\n          Dict with module name as key, value is class _lsmod if success. Exception if fail.\n\n        DATA STRUCT\n\n          class _lsmod(object)\n\n            Data defined here:\n              name\n                module name\n              size\n                module size\n              opened\n                module is opend\n              status\n                module status\n              offset\n                offset in memory\n              usedby\n                mouses using this module.\n\n    modinfo(*modules, basedir='', kernel=None)\n        NAME\n               kmodule.modinfo - Show information about a Linux Kernel module\n\n        DESCRIPTION\n               kmodule.modinfo extracts information from the Linux Kernel modules given\n               in python.\n\n               If the module name is not a filename, then the /lib/modules/version\n               directory is searched.\n\n               kmodule.modinfo by default returns every attribute of the module in dict.\n               The filename is listed the same way (although it's not really an attribute).\n\n        OPTIONS\n               basedir\n                   Root directory for modules, / by default.\n\n               kernel\n                   Provide information about a kernel other than the running one.\n\n                   This is particularly useful for distributions needing to extract\n                   information from a newly installed (but not yet running) set of\n                   kernel modules.\n\n                   For example, you wish to find which firmware files are needed by\n                   various modules in a new kernel for which you must make an\n                   initrd/initramfs image prior to booting.\n\n        RETURN\n          Dict in tuple if success. Exception if fail.\n\n        RETURN DATA\n\n          (dict1, ... dictN)\n\n    insmod(module, **params)\n        NAME\n          kmodule.insmod() - Simple program to insert a module into the Linux Kernel\n    \n        DESCRIPTION\n          kmodule.insmod is a trivial program to insert a module into the kernel.\n    \n          Only the most general of error messages are reported: as the work of\n          trying to link the module is now done inside the kernel, the dmesg\n          usually gives more information about errors.\n    \n        RETURN\n          None if success. Exception if fail.\n\n    rmmod(*modules, force=False, syslog=False, wait=False, verbose=0)\n        NAME\n               kmodule.rmmod() - Simple program to remove a module from the Linux Kernel\n\n        DESCRIPTION\n               kmodule.rmmod() is a trivial program to remove a module (when module\n               unloading support is provided) from the kernel.\n\n        OPTIONS\n               force\n                   This option can be extremely dangerous: it has no effect unless\n                   CONFIG_MODULE_FORCE_UNLOAD was set when the kernel was compiled.\n\n                   With this option, you can remove modules which are being used, or\n                   which are not designed to be removed, or have been marked as\n                   unsafe (see kmodule.lsmod()).\n\n               syslog\n                   Send errors to syslog instead of standard error.\n\n               verbose\n                   Print messages about what the program is doing. Usually rmmod prints\n                   messages only if something goes wrong.\n\n        RETURN\n          None if success. Exception if fail.\n\n# Arthur\nMax Wu <EfiPy.Core@gmail.com>  \n# License\nGPLv2",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EfiPy/kmodule",
    "keywords": "",
    "license": "GPLv2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kmodule",
    "package_url": "https://pypi.org/project/kmodule/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/kmodule/",
    "project_urls": {
      "Homepage": "https://github.com/EfiPy/kmodule"
    },
    "release_url": "https://pypi.org/project/kmodule/0.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python wrapper for insmod, rmmod, lsmod, modinfo of libkmod",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11890634,
  "releases": {
    "0.5.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81ed669d4b8c9ff604176d9bc0aaf63593d713e4dd3f5095930790fd49a7dac3",
          "md5": "955d8e9dd0631d69bd8bb19c6757654b",
          "sha256": "271bcb1a752ff58fc15990ba108fe8036fbca87f493e5055b2c46533f3fa30de"
        },
        "downloads": -1,
        "filename": "kmodule-0.5.10.tar.gz",
        "has_sig": false,
        "md5_digest": "955d8e9dd0631d69bd8bb19c6757654b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17968,
        "upload_time": "2021-04-21T12:03:41",
        "upload_time_iso_8601": "2021-04-21T12:03:41.951752Z",
        "url": "https://files.pythonhosted.org/packages/81/ed/669d4b8c9ff604176d9bc0aaf63593d713e4dd3f5095930790fd49a7dac3/kmodule-0.5.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45e54359f195bca5fab67e28840b7f1e06c8e4cdba46901919cf276921623719",
          "md5": "da5a8466b7382a4756825f3e6d9bf691",
          "sha256": "c658cc6d6402cab640bee7fea496fec1ce3fb58f8253a1a2d9bd17848e69845c"
        },
        "downloads": -1,
        "filename": "kmodule-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "da5a8466b7382a4756825f3e6d9bf691",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 648150,
        "upload_time": "2021-11-01T11:50:42",
        "upload_time_iso_8601": "2021-11-01T11:50:42.261819Z",
        "url": "https://files.pythonhosted.org/packages/45/e5/4359f195bca5fab67e28840b7f1e06c8e4cdba46901919cf276921623719/kmodule-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45e54359f195bca5fab67e28840b7f1e06c8e4cdba46901919cf276921623719",
        "md5": "da5a8466b7382a4756825f3e6d9bf691",
        "sha256": "c658cc6d6402cab640bee7fea496fec1ce3fb58f8253a1a2d9bd17848e69845c"
      },
      "downloads": -1,
      "filename": "kmodule-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "da5a8466b7382a4756825f3e6d9bf691",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 648150,
      "upload_time": "2021-11-01T11:50:42",
      "upload_time_iso_8601": "2021-11-01T11:50:42.261819Z",
      "url": "https://files.pythonhosted.org/packages/45/e5/4359f195bca5fab67e28840b7f1e06c8e4cdba46901919cf276921623719/kmodule-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}