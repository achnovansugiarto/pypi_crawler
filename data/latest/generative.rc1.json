{
  "info": {
    "author": "Jina AI",
    "author_email": "hello@jina.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Unix Shell",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
      "Topic :: Multimedia :: Video",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<p align=\"center\">\n<br><br><br>\n<a href=\"https://docs.jina.ai\"><img src=\"https://github.com/jina-ai/jina/blob/master/docs/_static/logo-light.svg?raw=true\" alt=\"Jina logo: Build cross-modal and multi-modal applications on the cloud\" width=\"150px\"></a>\n<br><br><br>\n</p>\n\n<p align=\"center\">\n<b>Build cross-modal and multi-modal applications on the cloud</b>\n</p>\n\n\n<p align=center>\n<a href=\"https://pypi.org/project/jina/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/jina?label=Release&style=flat-square\"></a>\n<a href=\"https://codecov.io/gh/jina-ai/jina\"><img alt=\"Codecov branch\" src=\"https://img.shields.io/codecov/c/github/jina-ai/jina/master?&logo=Codecov&logoColor=white&style=flat-square\"></a>\n<a href=\"https://slack.jina.ai\"><img src=\"https://img.shields.io/badge/Slack-3.1k-blueviolet?logo=slack&amp;logoColor=white&style=flat-square\"></a>\n<a href=\"https://github.com/jina-ai/jina/actions/workflows/cd.yml\"><img alt=\"Github CD status\" src=\"https://github.com/jina-ai/jina/actions/workflows/cd.yml/badge.svg\"></a>\n</p>\n\n<!-- start jina-description -->\n\nJina is a framework that empowers anyone to build cross-modal and multi-modal<sup><a href=\"#example-application\">[*]</a></sup> applications on the cloud. It uplifts a PoC into a production-ready service. Jina handles the infrastructure complexity, making advanced solution engineering and cloud-native technologies accessible to every developer. \n\n<sub><sup><a id=\"example-application\">[*]</a> Example cross-modal application: <a href=\"https://github.com/jina-ai/dalle-flow/\">DALL¬∑E Flow</a>; example multi-modal services: <a href=\"https://github.com/jina-ai/clip-as-service/\">CLIP-as-service</a>, <a href=\"https://github.com/jina-ai/now/\">Jina Now</a>.</sup></sub>\n\nApplications built with Jina enjoy the following features out-of-the-box:\n\nüåå **Universal**\n  - Build applications that deliver fresh insights from multiple data types such as text, image, audio, video, 3D mesh, PDF with [Jina AI's DocArray](https://docarray.jina.ai).\n  - Support all mainstream deep learning frameworks.\n  - Polyglot gateway that supports gRPC, Websockets, HTTP, GraphQL protocols with TLS.\n\n‚ö° **Performance**\n  - Intuitive design pattern for high-performance microservices.\n  - Scaling at ease: set replicas, sharding in one line. \n  - Duplex streaming between client and server.\n  - Async and non-blocking data processing over dynamic flows.\n\n‚òÅÔ∏è **Cloud-native**\n  - Seamless Docker container integration: sharing, exploring, sandboxing, versioning and dependency control via [Jina Hub](https://hub.jina.ai).\n  - Fast deployment to Kubernetes, Docker Compose and [Jina Cloud](https://docs.jina.ai/fundamentals/jcloud/).\n  - Full observability via Prometheus and Grafana.\n\nüç± **Ecosystem**\n  - Improved engineering efficiency thanks to the Jina AI ecosystem, so you can focus on innovating with the data applications you build.\n\n<p align=\"center\">\n<a href=\"#\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/core-tree-graph.svg?raw=true\" alt=\"Jina in Jina AI neural search ecosystem\" width=\"100%\"></a>\n</p>\n\n<!-- end jina-description -->\n\n## [Documentation](https://docs.jina.ai)\n\n## Install \n\n```bash\npip install jina\n```\n\n[More install options can be found in the docs](https://docs.jina.ai/get-started/install/).\n\n\n## Get Started\n\n\n### Basic Concepts\n\nDocument, Executor and Flow are three fundamental concepts in Jina.\n\n- [**Document**](https://docarray.jina.ai/) is the fundamental data structure.\n- [**Executor**](https://docs.jina.ai/fundamentals/executor/) is a Python class with functions that use Documents as IO.\n- [**Flow**](https://docs.jina.ai/fundamentals/flow/) ties Executors together into a pipeline and exposes it with an API gateway.\n\n[The full glossary is explained here.](https://docs.jina.ai/fundamentals/architecture-overview/)\n\n---\n\n<p align=\"center\">\n<a href=\"https://docs.jina.ai\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/no-complexity-banner.png?raw=true\" alt=\"Jina: No Infrastructure Complexity, High Engineering Efficiency\" width=\"100%\"></a>\n</p>\n\n### Hello world example\n\nLeveraging these three concepts, let's look at a simple example below:\n\n```python\nfrom jina import DocumentArray, Executor, Flow, requests\n\n\nclass MyExec(Executor):\n    @requests\n    async def add_text(self, docs: DocumentArray, **kwargs):\n        for d in docs:\n            d.text += 'hello, world!'\n\n\nf = Flow().add(uses=MyExec).add(uses=MyExec)\n\nwith f:\n    r = f.post('/', DocumentArray.empty(2))\n    print(r.texts)\n```\n\n- The first line imports three concepts we just introduced;\n- `MyExec` defines an async function `add_text` that receives `DocumentArray` from network requests and appends `\"hello, world\"` to `.text`;\n- `f` defines a Flow streamlined two Executors in a chain;\n- The `with` block opens the Flow, sends an empty DocumentArray to the Flow, and prints the result.\n\nRunning it gives you:\n\n<p align=\"center\">\n<a href=\"#\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/run-hello-world.gif?raw=true\" alt=\"Running a simple hello-world program\" width=\"70%\"></a>\n</p>\n\nAt the last line we see its output `['hello, world!hello, world!', 'hello, world!hello, world!']`.\n\n\nWhile one could use standard Python with the same number of lines and get the same output, Jina accelerates time to market of your application by making it more scalable and cloud-native. Jina also handles the infrastructure complexity in production and other Day-2 operations so that you can focus on the data application itself.  \n\n---\n\n<p align=\"center\">\n<a href=\"https://docs.jina.ai\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/scalability-banner.png?raw=true\" alt=\"Jina: Scalability and concurrency at ease\" width=\"100%\"></a>\n</p>\n\n### Scalability and concurrency at ease\n\nThe example above can be refactored into a Python Executor file and a Flow YAML file:\n\n<table>\n<tr>\n<th> <code>toy.yml</code> </th> \n<th> executor.py </th>\n</tr>\n<tr>\n<td> \n\n```yaml\njtype: Flow\nwith:\n  port: 51000\n  protocol: grpc\nexecutors:\n- uses: MyExec\n  name: foo\n  py_modules:\n    - executor.py\n- uses: MyExec\n  name: bar\n  py_modules:\n    - executor.py\n```\n     \n</td>\n<td>\n\n```python\nfrom jina import DocumentArray, Executor, requests\n\n\nclass MyExec(Executor):\n    @requests\n    async def add_text(self, docs: DocumentArray, **kwargs):\n        for d in docs:\n            d.text += 'hello, world!'\n```\n\n</td>\n</tr>\n</table>\n\n\nRun the following command in the terminal:\n\n```bash\njina flow --uses toy.yml\n```\n\n<p align=\"center\">\n<a href=\"#\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/flow-block.png?raw=true\" alt=\"Running a simple hello-world program\" width=\"50%\"></a>\n</p>\n\nThe server is successfully started, and you can now use a client to query it.\n\n```python\nfrom jina import Client, Document\n\nc = Client(host='grpc://0.0.0.0:51000')\nc.post('/', Document())\n```\n\nThis simple refactoring allows developers to write an application in the client-server style. The separation of Flow YAML and Executor Python file does not only make the project more maintainable but also brings scalability and concurrency to the next level:\n- The data flow on the server is non-blocking and async. New request is handled immediately when an Executor is free, regardless if previous request is still being processed.\n- Scalability can be easily achieved by the keywords `replicas` and `needs` in YAML/Python. Load-balancing is automatically added when necessary to ensure the maximum throughput.\n\n<table>\n<tr>\n<th> <code>toy.yml</code> </th> \n<th> Flowchart </th>\n</tr>\n<tr>\n<td> \n\n```yaml\njtype: Flow\nwith:\n  port: 51000\n  protocol: grpc\nexecutors:\n- uses: MyExec\n  name: foo\n  py_modules:\n    - executor.py\n  replicas: 2\n- uses: MyExec\n  name: bar\n  py_modules:\n    - executor.py\n  replicas: 3\n  needs: gateway\n- needs: [foo, bar]\n  name: baz\n```\n     \n</td>\n<td>\n\n<p align=\"center\">\n<a href=\"#\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/scale-flow.svg?raw=true\" alt=\"Running a simple hello-world program\" width=\"70%\"></a>\n</p>\n\n</td>\n</tr>\n</table>\n\n- You now have an API gateway that supports gRPC (default), Websockets, and HTTP protocols with TLS.\n- The communication between clients and the API gateway is duplex.\n- The API gateway allows you to route request to a specific Executor while other parts of the Flow are still busy, via `.post(..., target_executor=...)`\n\n---\n\n<p align=\"center\">\n<a href=\"https://docs.jina.ai\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/container-banner.png?raw=true\" alt=\"Jina: Seamless Container Integration\" width=\"100%\"></a>\n</p>\n\n### Seamless Container integration\n\nWithout having to worry about dependencies, you can easily share your Executors with others; or use public/private Executors in your project thanks to [Jina Hub](https://hub.jina.ai).\n\nTo create an Executor:\n\n```bash\njina hub new \n```\n\nTo push it to Jina Hub:\n\n```bash\njina hub push .\n```\n\nTo use a Hub Executor in your Flow:\n\n|        | Docker container                           | Sandbox                                     | Source                              |\n|--------|--------------------------------------------|---------------------------------------------|-------------------------------------|\n| YAML   | `uses: jinahub+docker://MyExecutor`        | `uses: jinahub+sandbox://MyExecutor`        | `uses: jinahub://MyExecutor`        |\n| Python | `.add(uses='jinahub+docker://MyExecutor')` | `.add(uses='jinahub+sandbox://MyExecutor')` | `.add(uses='jinahub://MyExecutor')` |\n\nBehind this smooth experience is advanced management of Executors:\n- Automated builds on the cloud\n- Store, deploy, and deliver Executors cost-efficiently;\n- Automatically resolve version conflicts and dependencies;\n- Instant delivery of any Executor via Sandbox without pulling anything to local.\n\n---\n\n<p align=\"center\">\n<a href=\"https://docs.jina.ai\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/cloud-native-banner.png?raw=true\" alt=\"Jina: Seamless Container Integration\" width=\"100%\"></a>\n</p>\n\n### Fast-lane to cloud-native\n\nUsing Kubernetes becomes easy:\n\n```bash\njina export kubernetes flow.yml ./my-k8s\nkubectl apply -R -f my-k8s\n```\n\nUsing Docker Compose becomes easy:\n\n```bash\njina export docker-compose flow.yml docker-compose.yml\ndocker-compose up\n```\n\nUsing Prometheus becomes easy:\n\n```python\nfrom jina import Executor, requests, DocumentArray\n\n\nclass MyExec(Executor):\n    @requests\n    def encode(self, docs: DocumentArray, **kwargs):\n        with self.monitor('preprocessing_seconds', 'Time preprocessing the requests'):\n            docs.tensors = preprocessing(docs)\n        with self.monitor(\n            'model_inference_seconds', 'Time doing inference the requests'\n        ):\n            docs.embedding = model_inference(docs.tensors)\n```\n\nUsing Grafana becomes easy, just [download this JSON](https://github.com/jina-ai/example-grafana-prometheus/blob/main/grafana-dashboards/flow.json) and import it into Grafana:\n\n<p align=\"center\">\n<a href=\"https://docs.jina.ai\"><img src=\"https://github.com/jina-ai/jina/blob/master/.github/readme/grafana.png?raw=true\" alt=\"Jina: Seamless Container Integration\" width=\"70%\"></a>\n</p>\n\n\nWhat cloud-native technology is still challenging to you? [Tell us](https://github.com/jina-ai/jina/issues), we will handle the complexity and make it easy for you.\n\n<!-- start support-pitch -->\n\n## Support\n\n- Join our [Slack community](https://slack.jina.ai) and chat with other community members about ideas.\n- Join our [Engineering All Hands](https://youtube.com/playlist?list=PL3UBBWOUVhFYRUa_gpYYKBqEAkO4sxmne) meet-up to discuss your use case and learn Jina's new features.\n    - **When?** The second Tuesday of every month\n    - **Where?**\n      Zoom ([see our public events calendar](https://calendar.google.com/calendar/embed?src=c_1t5ogfp2d45v8fit981j08mcm4%40group.calendar.google.com&ctz=Europe%2FBerlin)/[.ical](https://calendar.google.com/calendar/ical/c_1t5ogfp2d45v8fit981j08mcm4%40group.calendar.google.com/public/basic.ics))\n      and [live stream on YouTube](https://youtube.com/c/jina-ai)\n- Subscribe to the latest video tutorials on our [YouTube channel](https://youtube.com/c/jina-ai)\n\n## Join Us\n\nJina is backed by [Jina AI](https://jina.ai) and licensed under [Apache-2.0](./LICENSE).\n[We are actively hiring](https://jobs.jina.ai) AI engineers, solution engineers to build the next neural search ecosystem in open source.\n\n<!-- end support-pitch -->",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/jina-ai/jina/tags",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jina-ai/jina/",
    "keywords": "jina cloud-native cross-modal multi-modal neural-search query search index elastic neural-network encoding embedding serving docker container image video audio deep-learning",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "generative",
    "package_url": "https://pypi.org/project/generative/",
    "platform": null,
    "project_url": "https://pypi.org/project/generative/",
    "project_urls": {
      "Documentation": "https://docs.jina.ai",
      "Download": "https://github.com/jina-ai/jina/tags",
      "Homepage": "https://github.com/jina-ai/jina/",
      "Source": "https://github.com/jina-ai/jina/",
      "Tracker": "https://github.com/jina-ai/jina/issues"
    },
    "release_url": "https://pypi.org/project/generative/0.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Build cross-modal and multi-modal applications on the cloud",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14264349,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b0ebe8cb16db8c4f9eac55685b66e717cef03d3e5364ad39970e69b94e67b2c",
          "md5": "20a8c687dd2a0d34b759bf4f1c92bac8",
          "sha256": "136a2219e27397044a3d3cf733de9a18ba9667a40c6d226f1c601bd8af936e3c"
        },
        "downloads": -1,
        "filename": "generative-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20a8c687dd2a0d34b759bf4f1c92bac8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 215058,
        "upload_time": "2022-06-27T20:08:50",
        "upload_time_iso_8601": "2022-06-27T20:08:50.664348Z",
        "url": "https://files.pythonhosted.org/packages/7b/0e/be8cb16db8c4f9eac55685b66e717cef03d3e5364ad39970e69b94e67b2c/generative-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b0ebe8cb16db8c4f9eac55685b66e717cef03d3e5364ad39970e69b94e67b2c",
        "md5": "20a8c687dd2a0d34b759bf4f1c92bac8",
        "sha256": "136a2219e27397044a3d3cf733de9a18ba9667a40c6d226f1c601bd8af936e3c"
      },
      "downloads": -1,
      "filename": "generative-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "20a8c687dd2a0d34b759bf4f1c92bac8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 215058,
      "upload_time": "2022-06-27T20:08:50",
      "upload_time_iso_8601": "2022-06-27T20:08:50.664348Z",
      "url": "https://files.pythonhosted.org/packages/7b/0e/be8cb16db8c4f9eac55685b66e717cef03d3e5364ad39970e69b94e67b2c/generative-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}