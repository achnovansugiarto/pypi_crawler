{
  "info": {
    "author": "Vladimir Garvardt",
    "author_email": "vgarvardt@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "==============\nDjango Loginza\n==============\n\nDjango-приложение, обеспечивающее работу с сервисом авторизации Loginza (loginza.ru)\n\nУстановка\n=========\n\nУстановка производится с помощью ``pip``::\n\n $ pip install django-loginza\n\nИли добавлением следующей строчки в ``project_name/requirements.txt``::\n\n django-loginza\n\nА затем установкой через ``pip``::\n\n $ pip install -r project_name/requirements.txt\n\nПоследняя актуальная версия доступна в `репозитории GitHub`__.\n\nДля корректной работы приложения необходимо, чтобы так же был установлено приложения \n``django.contrib.auth``, ``django.contrib.sessions`` и ``django.contrib.sites``.\n\nПосле этого, необходимо добавить приложение ``loginza`` в ``INSTALLED_APPS`` и добавить бэкэнд авторизации -\n``loginza.authentication.LoginzaBackend`` в ``AUTHENTICATION_BACKENDS``. В общем случае, бэкэнды\nавторизации после добавления нового, будут выглядеть так::\n\n AUTHENTICATION_BACKENDS = (\n     'django.contrib.auth.backends.ModelBackend',\n     'loginza.authentication.LoginzaBackend',\n )\n\nВ этом случае, можно будет использовать как стандартную форму авторизации по логину и паролю\n(например, для доступа в админскую панель), так и loginza-авторизацию.\n\nТакже, следует добавить в ``TEMPLATE_CONTEXT_PROCESSORS`` строчку \n``django.core.context_processors.request``.\n\nПосле добавления приложения, необходимо установить необходимые таблицы в БД (выполнить\n``python manage.py syncdb`` в корне проекта).\n\nДалее, нужно зарегистрировать ссылки приложения в проекте. В общем случае,\nнеобходимо добавить следующий элемент в ``urlpatterns`` проекта в ``urls.py``::\n\n (r'^loginza/', include('loginza.urls')),\n\nЧтобы при авторизации через loginza вас не перенаправляло не пойми куда (например, example.com) -\nследует в админке, в настройках сайтов указать правильный домен.\n\n\nИспользование\n=============\n\nПриложение можно условно разделить на три составляющих:\n\n- шаблонные теги, для отображения виджета авторизации на странице\n- сигналы, позволяющие другим приложениям взаимодействовать с данным\n- внутренняя логика приложения\n\nЭтот документ рассматривает только первые две составляющие.\n\nШаблонные теги\n==============\n\nДля того, чтобы отобразить виджет авторизации в шаблоне, сначала необходимо загрузить тэги::\n\n {% load loginza_widget %}\n\nПосле этого, становятся доступны следующие теги:\n\n- ``loginza_iframe`` - встраиваемый виджета авторизации Loginza (спаренная форма авторизации)\n- ``loginza_button`` - кнопка виджета Loginza\n- ``loginza_icons`` - набор иконок провайдеров\n- ``loginza_string`` - строка (ссылка)\n\nПримеры отображения виджетов можно посмотреть на странице\n`Примеры интеграции Loginza в форму авторизации сайта`__.\n\nДля всех тэгов, кроме ``loginza_iframe`` необходим обязательный параметр caption.\nДля ``loginza_button`` он используется для атрибутов ``alt`` и ``title`` изображения кнопки,\nдля ``loginza_icons`` - текст, перед набором иконок (например, *Войти используя:*),\nдля ``loginza_string`` - собственно сама строка.\n\nТак же, для всех виджетов доступны следующие именованные параметры:\n\n- ``lang`` - язык виджета\n- ``providers_set`` - доступные кнопки и порядок провайдеров\n- ``provider`` - провайдер авторизации по умолчанию\n\nНапример::\n\n  {% loginza_iframe providers_set=\"google,facebook,twitter\" lang=\"en\" %}\n\nБолее подробно об этих параметрах можно прочитать в `Руководстве по Loginza.API`__.\n\nДополнительно, для ``loginza_iframe`` доступны параметры ``width`` и ``height``,\nкоторыми можно задать размер виджета (по умолчанию 359 x 300 px).\n\nВ общем случае шаблон, отвечающий за авторизацию, будет выглядеть следующим образом::\n\n {% load loginza_widget %}\n {% if user.is_authenticated %}\n   Добро пожаловать, {{ user }}\n {% else %}\n   {% loginza_button \"Войти через Loginza\" %}\n {% endif %}\n\nСигналы\n=======\n\nПриложение предоставляет следующие сигналы:\n\n- ``created`` - создана новая связка между идентификатором Loginza и пользователем Django\n- ``error`` - во время авторизации произошла ошибка\n- ``authenticated`` - пользователь успешно авторизован (authenticated) и готов быть залогинен\n- ``login_required`` - декоратор login_required обнаружил, что пользователь не авторизован\n\nБолее подробно о сигналах и их параметрах можно прочитать в их документации к сигналам в ``signals.py``\nприложения.\n\nПример ``views.py`` вспомогательного приложения ``users``, использующего сигналы приложения ``loginza``::\n\n  # -*- coding:utf-8 -*-\n  from django import http\n  from django.contrib import messages, auth\n  from django.shortcuts import redirect, render_to_response\n  from django.core.urlresolvers import reverse\n  from django.template.context import RequestContext\n\n  from .forms import CompleteReg\n\n  from loginza import signals, models\n  from loginza.templatetags.loginza_widget import _return_path\n\n\n  def loginza_error_handler(sender, error, **kwargs):\n      messages.error(sender, error.message)\n\n  signals.error.connect(loginza_error_handler)\n\n  def loginza_auth_handler(sender, user, identity, **kwargs):\n      try:\n          # it's enough to have single identity verified to treat user as verified\n          models.UserMap.objects.get(user=user, verified=True)\n          auth.login(sender, user)\n      except models.UserMap.DoesNotExist:\n          sender.session['users_complete_reg_id'] = identity.id\n          return redirect(reverse('users.views.complete_registration'))\n\n  signals.authenticated.connect(loginza_auth_handler)\n\n  def loginza_login_required(sender, **kwargs):\n      messages.warning(sender, u'Функция доступна только авторизованным пользователям.')\n\n  signals.login_required.connect(loginza_login_required)\n\n\n  def complete_registration(request):\n      if request.user.is_authenticated():\n          return http.HttpResponseForbidden(u'Вы попали сюда по ошибке')\n      try:\n          identity_id = request.session.get('users_complete_reg_id', None)\n          user_map = models.UserMap.objects.get(identity__id=identity_id)\n      except models.UserMap.DoesNotExist:\n          return http.HttpResponseForbidden(u'Вы попали сюда по ошибке')\n      if request.method == 'POST':\n          form = CompleteReg(user_map.user.id, request.POST)\n          if form.is_valid():\n              user_map.user.username = form.cleaned_data['username']\n              user_map.user.email = form.cleaned_data['email']\n              user_map.user.save()\n\n              user_map.verified = True\n              user_map.save()\n\n              user = auth.authenticate(user_map=user_map)\n              auth.login(request, user)\n\n              messages.info(request, u'Добро пожаловать!')\n              del request.session['users_complete_reg_id']\n              return redirect(_return_path(request))\n      else:\n          form = CompleteReg(user_map.user.id, initial={\n              'username': user_map.user.username, 'email': user_map.user.email,\n              })\n\n      return render_to_response('users/complete_reg.html',\n                                {'form': form},\n                                context_instance=RequestContext(request),\n                                )\n\nПример ``forms.py`` вспомогательного приложения ``users``::\n\n  # -*- coding:utf-8 -*-\n  from django import forms\n  try:\n      from django.contrib.auth import get_user_model\n          except ImportError: # django < 1.5\n      from django.contrib.auth.models import User\n  else:\n      User = get_user_model()\n\n\n  class CompleteReg(forms.Form):\n\n      username = forms.RegexField(label=u'Имя пользователя', max_length=30, min_length=4, \n                                  required=True, regex=r'^[\\w.@+-]+$') \n      email = forms.EmailField(label=u'Email', required=True) \n\n\n      def __init__(self, user_id, *args, **kwargs):\n          super(CompleteReg, self).__init__(*args, **kwargs)\n          self.user_id = user_id\n\n      def clean_username(self):\n          if self.cleaned_data['username']:\n              try: u = User.objects.exclude(id=self.user_id).get(username=self.cleaned_data['username'])\n              # if username is unique - it's ok\n              except User.DoesNotExist: u = None\n\n              if u is not None:\n                  raise forms.ValidationError(u'Пользователь с таким именем уже зарегистрирован')\n          return self.cleaned_data['username']\n\n      def clean_email(self):\n          if self.cleaned_data['email']:\n              try: u = User.objects.exclude(id=self.user_id).get(email=self.cleaned_data['email'])\n              # if email is unique - it's ok\n              except User.DoesNotExist: u = None\n\n              if u is not None:\n                  raise forms.ValidationError(u'Пользователь с этим адресом уже зарегистрирован')\n          return self.cleaned_data['email']\n\nПример ``urls.py`` вспомогательного приложения ``users``::\n\n  from django.conf.urls.defaults import *\n\n  from .views import complete_registration\n\n\n  urlpatterns = patterns('',\n      url(r'^complete_registration/$', complete_registration, name='users_complete_registration'),\n      url(r'^logout/$', 'django.contrib.auth.views.logout', name='users_logout'),\n  )\n\n\nДля того, чтобы пример выше работал корректно, необходимо так же в ``settings.py`` проекта добавить\nследующие настройки (подробнее читайте в разделе *Настройки*)::\n\n # can't use reverse url resolver here (raises ImportError),\n # so we should carefully control paths\n LOGINZA_AMNESIA_PATHS = ('/users/complete_registration/',)\n\nТак же добавить приложение ``users`` в ``INSTALLED_APPS``, а затем в ``urls.py`` проекта \nдобавить следующее::\n\n url(r'^users/', include('users.urls')),\n\nНастройки\n=========\n\nВ приложении доступны следующие настройки:\n\n- ``LOGINZA_DEFAULT_LANGUAGE`` - язык по умолчанию, если параметр ``lang`` не задан для виджета явно.\n  Выбирается на основе ``LANGUAGE_CODE`` проекта.\n- ``LOGINZA_DEFAULT_PROVIDERS_SET`` - набор провайдеров, используемых по умолчанию,\n  если параметр ``providers_set`` не задан. Формат - имена провайдеров через запятую,\n  например 'facebook,twitter,google'. ``None`` - все доступные провайдеры.\n- ``LOGINZA_DEFAULT_PROVIDER`` - провайдер, используемый по умолчанию,\n  если параметр ``provider`` не задан для виджета явно. ``None`` - не задан.\n- ``LOGINZA_ICONS_PROVIDERS`` - иконки провайдеров, отображаемые виджетом loginza_icons,\n  по умолчанию все доступные. Используется, только если параметр `providers_set`` не задан для виджета явно и\n  настройка ``LOGINZA_DEFAULT_PROVIDERS_SET`` не задана. Формат - имена провайдеров через запятую,\n  например 'facebook,twitter,google'.\n- ``LOGINZA_PROVIDER_TITLES`` - заголовки провайдеров, используемые для изображений виджета\n  ``loginza_icons``. Формат - словарь с ключами именами провайдеров, и значениями - заголовками, например\n  {'google': u'Корпорация добра', 'twitter': u'Щебетальня', 'vkontakte': u'Вконтактик'}\n- ``LOGINZA_DEFAULT_EMAIL`` - адрес электронной почты, используемый для новых пользователей, в случае,\n  если Loginza не предоставила, таковой. По умолчанию - 'user@loginza'. В случае, когда в данных отсутствует\n  имя пользователя, идентификатор (слева от @) адреса электронной почты используется в качестве\n  имени пользователя по умолчанию.\n- ``LOGINZA_AMNESIA_PATHS`` - список или кортеж путей, которые не будут запоминаться для возврата.\n  Например, как показано в примере выше, страница завершения регистрации не запоминается, для того,\n  чтобы после успешной авторизации пользователь был возвращен на страницу, с которой авторизация началась,\n  а не на пустую страницу завершения регистрации.\n- ``LOGINZA_BUTTON_IMG_URL`` - ссылка на изображение, используемое для виджета Кнопка. По умолчанию\n  изображение загружается с сайта loginza.ru.\n- ``LOGINZA_ICONS_IMG_URLS`` - словарь со ссылками на иконки провайдеров авторизации, используемых для\n  виджета Иконки. По умолчанию изображения загружаются с сайта loginza.ru.\n- ``LOGINZA_IFRAME_WIDTH`` - ширина встраевомого виджета авторизации (строка, использвется как есть,\n  по умолчанию 359px).\n- ``LOGINZA_IFRAME_HEIGHT`` - высота встраевомого виджета авторизации (строка, использвется как есть,\n  по умолчанию 300px).\n- ``LOGINZA_WIDGET_ID`` - ID виджета Loginza (см. в секции `Мой виджет Loginza`__).\n- ``LOGINZA_API_SIGNATURE`` - Секретный ключ виджета Loginza.\n\nДополнительные возможности\n==========================\n\nПриложение предоставляет модифицированный декоратор ``@login_required``. От оригинального декоратора\n``django.contrib.auth.decorators.login_required`` он отличается тем, что вместо перенаправления не\nавторизованных пользователей на страницу авторизации срабатывает перенаправление на предыдущую страницу.\nДекоратор может быть полезен сайтам, использующим только Loginza-авторизацию и не имеющим отдельную страницу\nавторизации. Так же, при срабатывании декоратора для не авторизованных пользователей, посылается сигнал\n``loginza.signals.login_required``, присоединившись к которому можно, например, уведомить пользователя\nо причине возврата на предыдущую страницу (как это показано в примере), и вернуть объект HttpRespose,\nесли необходимо выполнить действие отличное, от возвращения пользователя на предыдущую страницу.\n\n:Автор: Владимир Гарвардт\n:Благодарности: Ивану Сагалаеву, Юрию Юревичу, Денису Веселову\n\n__ https://github.com/vgarvardt/django-loginza\n__ http://loginza.ru/signin-integration\n__ http://loginza.ru/api-overview\n__ http://loginza.ru/my-widgets\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vgarvardt/django-loginza",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-loginza",
    "package_url": "https://pypi.org/project/django-loginza/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-loginza/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/vgarvardt/django-loginza"
    },
    "release_url": "https://pypi.org/project/django-loginza/0.3.9/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django application for Loginza service",
    "version": "0.3.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1234154,
  "releases": {
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f15536e942f8ed2c74a118a7bca688613e258e990e9bac2368604b9fd8fbc89",
          "md5": "81e1dc8df74a78a3008c2d9e1c0167c9",
          "sha256": "bef16616d740bd92b387874fbb5ed994e66c39c8124c28fb099fa1b3b5d1e1d0"
        },
        "downloads": -1,
        "filename": "django-loginza-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "81e1dc8df74a78a3008c2d9e1c0167c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8385,
        "upload_time": "2011-11-15T20:47:02",
        "upload_time_iso_8601": "2011-11-15T20:47:02.227007Z",
        "url": "https://files.pythonhosted.org/packages/5f/15/536e942f8ed2c74a118a7bca688613e258e990e9bac2368604b9fd8fbc89/django-loginza-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "068f26c17e0034de116d2ccefc8b9e62bde92529aca1cac99adbd6f9ac305c79",
          "md5": "61eb3ec5b06ce1794199ca38fc57cb1a",
          "sha256": "7fa7fa258eecc81101055c98e955abbbcdf054bbc9fc94dca1ffe59dc2f4cc7c"
        },
        "downloads": -1,
        "filename": "django-loginza-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "61eb3ec5b06ce1794199ca38fc57cb1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8787,
        "upload_time": "2011-11-15T21:20:56",
        "upload_time_iso_8601": "2011-11-15T21:20:56.264355Z",
        "url": "https://files.pythonhosted.org/packages/06/8f/26c17e0034de116d2ccefc8b9e62bde92529aca1cac99adbd6f9ac305c79/django-loginza-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69ddd287a13b30cf14f4bb65a8e5bf9f41bcb393b47fcbe6d0115f00da8b8403",
          "md5": "47ef501278c72fdc09069962c09a4edd",
          "sha256": "6ea421923f7021ba850b1c9e2e1ea82ff4f16bdf0d0c04823353aff9ebb09fd5"
        },
        "downloads": -1,
        "filename": "django-loginza-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "47ef501278c72fdc09069962c09a4edd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8806,
        "upload_time": "2011-11-16T19:20:02",
        "upload_time_iso_8601": "2011-11-16T19:20:02.749700Z",
        "url": "https://files.pythonhosted.org/packages/69/dd/d287a13b30cf14f4bb65a8e5bf9f41bcb393b47fcbe6d0115f00da8b8403/django-loginza-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ec67234476e7a1b4af0a2834dce2deb6a0dd874d49d7626695211326091ca8a",
          "md5": "5efa3a5f2a32a97eda2b28c0c55fee8c",
          "sha256": "1491eaf74aebe220559514e4e70c7c7ca23ee3110a0f11fd1c3ed094b8b1bbd5"
        },
        "downloads": -1,
        "filename": "django-loginza-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5efa3a5f2a32a97eda2b28c0c55fee8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14189,
        "upload_time": "2012-12-08T20:17:29",
        "upload_time_iso_8601": "2012-12-08T20:17:29.579857Z",
        "url": "https://files.pythonhosted.org/packages/6e/c6/7234476e7a1b4af0a2834dce2deb6a0dd874d49d7626695211326091ca8a/django-loginza-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3007c17310c5f40350e66ec53a4b8be2f4dfb9be1d1035a5af7792462e18f2d",
          "md5": "94ee6e6351b5d9e4c3bb0b5ee083c855",
          "sha256": "185587b5645b19f227ad9a85b462e2c29ef8c7e3ffc69d31a8ab80bd00c3a5d2"
        },
        "downloads": -1,
        "filename": "django-loginza-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "94ee6e6351b5d9e4c3bb0b5ee083c855",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14211,
        "upload_time": "2012-12-08T20:19:30",
        "upload_time_iso_8601": "2012-12-08T20:19:30.284058Z",
        "url": "https://files.pythonhosted.org/packages/b3/00/7c17310c5f40350e66ec53a4b8be2f4dfb9be1d1035a5af7792462e18f2d/django-loginza-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46514d1edaafe773d027ed653d4c424fcf2546ee094fea62ed10bf5e57613fa8",
          "md5": "a96972aeea94664a4a60da2872abfdef",
          "sha256": "8c2473540e44f0d7105acb06342493ebe7604a7233c171cdd0761234c32784bb"
        },
        "downloads": -1,
        "filename": "django-loginza-0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a96972aeea94664a4a60da2872abfdef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14246,
        "upload_time": "2012-12-10T20:12:40",
        "upload_time_iso_8601": "2012-12-10T20:12:40.701633Z",
        "url": "https://files.pythonhosted.org/packages/46/51/4d1edaafe773d027ed653d4c424fcf2546ee094fea62ed10bf5e57613fa8/django-loginza-0.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3933b21eef5a28d335dcdd1a9a693608924a32ee01082400292357332455ad6",
          "md5": "bf950ddaa4e5eab6a924634c814f2bd6",
          "sha256": "631c7ae98b1f9212d52ec9d5d6898333a76249a8bf7c4f9b208afdabc83cff2f"
        },
        "downloads": -1,
        "filename": "django-loginza-0.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "bf950ddaa4e5eab6a924634c814f2bd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14125,
        "upload_time": "2014-09-23T00:21:55",
        "upload_time_iso_8601": "2014-09-23T00:21:55.615895Z",
        "url": "https://files.pythonhosted.org/packages/d3/93/3b21eef5a28d335dcdd1a9a693608924a32ee01082400292357332455ad6/django-loginza-0.3.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3933b21eef5a28d335dcdd1a9a693608924a32ee01082400292357332455ad6",
        "md5": "bf950ddaa4e5eab6a924634c814f2bd6",
        "sha256": "631c7ae98b1f9212d52ec9d5d6898333a76249a8bf7c4f9b208afdabc83cff2f"
      },
      "downloads": -1,
      "filename": "django-loginza-0.3.9.tar.gz",
      "has_sig": false,
      "md5_digest": "bf950ddaa4e5eab6a924634c814f2bd6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14125,
      "upload_time": "2014-09-23T00:21:55",
      "upload_time_iso_8601": "2014-09-23T00:21:55.615895Z",
      "url": "https://files.pythonhosted.org/packages/d3/93/3b21eef5a28d335dcdd1a9a693608924a32ee01082400292357332455ad6/django-loginza-0.3.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}