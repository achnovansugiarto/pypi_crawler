{
  "info": {
    "author": "Vlad Gavrilov",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Assembler interpreter\n\n## Description\n\nThis assembler interpreter supports a number of basic instructions.\nThey are common to most of the different assembler dialects.\nIt also supports labels, user comments and creating an output message.\nThe entire list of supported instructions is shown below:\n\n* ```mov x, y``` - copy y (either an integer or the value of a register) into register x.\n* ```inc x``` - increase the content of register x by one.\n* ```dec x``` - decrease the content of register x by one.\n* ```add x, y``` - add the content of the register x with y (either an integer or the value of a register) and stores the result in x (i.e. ```register[x] += y```).\n* ```sub x, y``` - subtract y (either an integer or the value of a register) from the register x and stores the result in x (i.e. ```register[x] -= y```).\n* ```mul x, y``` - same with multiply (i.e. ```register[x] *= y```).\n* ```div x, y``` - same with integer division (i.e. ```register[x] /= y```).\n* ```label:``` - define a label position (```label = identifier + \":\"```, an identifier being a string that does not match any other command). Jump commands and call are aimed to these labels positions in the program.\n* ```jmp lbl```- jumps to the label ```lbl```.\n* ```cmp x, y``` - compares x (either an integer or the value of a register) and y (either an integer or the value of a register). The result is used in the conditional jumps (```jne```, ```je```, ```jge```, ```jg```, ```jle``` and ```jl```)\n* ```jne lbl``` - jump to the label ```lbl``` if the values of the previous ```cmp``` command were not equal.\n* ```je lbl``` - jump to the label ```lbl``` if the values of the previous ```cmp``` command were equal.\n* ```jge lbl``` - jump to the label ```lbl``` if x was greater or equal than y in the previous ```cmp``` command.\n* ```jg lbl``` - jump to the label ```lbl``` if x was greater than y in the previous ```cmp``` command.\n* ```jle lbl``` - jump to the label ```lbl``` if x was less or equal than y in the previous ```cmp``` command.\n* ```jl lbl``` - jump to the label ```lbl``` if x was less than y in the previous ```cmp``` command.\n* ```call lbl``` - call to the subroutine identified by ```lbl```. When a ```ret``` is found in a subroutine, the instruction pointer should return to the instruction next to this ```call``` command.\n* ```ret``` - when a ```ret``` is found in a subroutine, the instruction pointer should return to the instruction that called the current function.\n* ```msg 'Register: ', x``` - this instruction stores the output of the program. It may contain text strings (delimited by single quotes) and registers. The number of arguments isn't limited and will vary, depending on the program.\n* ```end``` - this instruction indicates that the program ends correctly, so the stored output is returned (if the program terminates without this instruction it should return the default output: see below).\n* ```; comment``` - comments should not be taken in consideration during the execution of the program.\n\nThe output format is a string. But if the program doesn't reach the ```end``` instruction, the number ```-1``` will be returned.\n\n## Usage\n\n```bash\nasmint --help\n```\n\n```text\nusage: asmint [-h] [-l] [-p] [-r] path\n\nAssembler interpreter\n\npositional arguments:\n  path             the path to the program to be executed\n\noptional arguments:\n  -h, --help       show this help message and exit\n  -l, --labels     show labels\n  -p, --program    show prepared program\n  -r, --registers  show register values\n```\n\n## Example\n\nThere is a directory ```examples``` containing a bunch of example programs implemented using this assembly language.\nYou can add your own interesting use case by creating a pull request on [GitHub](https://github.com/vlad-gavrilov/assembler-interpreter/pulls). All PRs are welcome :)\n\nAn example program named *factorial.txt*:\n\n```text\nmov   a, 5\nmov   b, a\nmov   c, a\ncall  proc_fact\ncall  print\nend\n\nproc_fact:\n    dec   b\n    mul   c, b\n    cmp   b, 1\n    jne   proc_fact\n    ret\n\nprint:\n    msg   a, '! = ', c ; output text\n    ret\n```\n\nCalling the utility:\n\n```bash\nasmint factorial.txt\n```\n\nProgram output:\n\n```text\nOutput:  5! = 120\n```\n\nAnother example of use - *power.txt*:\n\n```text\nmov   a, 2            ; value1\nmov   b, 10           ; value2\nmov   c, a            ; temp1\nmov   d, b            ; temp2\ncall  proc_func\ncall  print\nadd   a, -1\nend\n\nproc_func:\n    cmp   d, 1\n    je    continue\n    mul   c, a\n    dec   d\n    call  proc_func\n\ncontinue:\n    ret\n\nprint:\n    msg a, '^', b, ' = ', c\n    ret\n```\n\nOutput:\n\n```text\nOutput:  2^10 = 1024\n```\n\nThis interpreter can also handle multiple tabs and spaces in program code and ignore all comment text.\nLet's use a \"mangled\" version of the *power.txt* program. Let's call it *power_mangled.txt*. Here is the full code:\n\n```text\nmov   a, 2            ; value1\n mov   b, 10           ; value2\n  mov   c, a            ; temp1\n            mov   d, b            ; temp2\ncall            proc_func\ncall                                                print\nadd a, -1\nend\n; comment1\n; comment2\n; comment3\n; yet another comment\nproc_func:\ncmp   d, 1\n je    continue\n                        mul   c, a\n    dec   d         ; here is a comment message\n  call  proc_func\n\ncontinue:\n    ret\nprint:\n; comment1\n;comment2\n;comment3\n;             yet another comment\n    msg a, '^', b, ' = ', c\nret\n```\n\nAs you can see, the result is the same as in the previous example:\n```text\nOutput:  2^10 = 1024\n```\n\n## External links\nThis project was inspired by [this](https://www.codewars.com/kata/58e61f3d8ff24f774400002c) CodeWars kata\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "assembler,interpreter,cli",
    "license": "MIT License Copyright (c) 2022 Vlad Gavrilov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "assembler-interpreter",
    "package_url": "https://pypi.org/project/assembler-interpreter/",
    "platform": null,
    "project_url": "https://pypi.org/project/assembler-interpreter/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vlad-gavrilov/assembler-interpreter/issues",
      "Homepage": "https://github.com/vlad-gavrilov/assembler-interpreter"
    },
    "release_url": "https://pypi.org/project/assembler-interpreter/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Interprets programs in assembly language",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15460899,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "beade295401c6e0b7f6a6dea6c91596091f437645a9426236c5207267ce1b6b1",
          "md5": "ae489e05bb14801ca53f66ee46c6ebf8",
          "sha256": "9b74fdb8986c4de1d585a2896e1922329286a3f4ecb85479a74722b079444a3b"
        },
        "downloads": -1,
        "filename": "assembler_interpreter-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae489e05bb14801ca53f66ee46c6ebf8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5453,
        "upload_time": "2022-09-19T20:10:19",
        "upload_time_iso_8601": "2022-09-19T20:10:19.479386Z",
        "url": "https://files.pythonhosted.org/packages/be/ad/e295401c6e0b7f6a6dea6c91596091f437645a9426236c5207267ce1b6b1/assembler_interpreter-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79943d5bd81c8b2f24d9bc50b2e7f09021066479ea061e8ad9e16896f696db2d",
          "md5": "36e475d1b7aa3c39e33db8e4774388f2",
          "sha256": "710995092cffa9d32867c5ec32679d8a48571c22ebbc5b30c6f9d54dd36ff110"
        },
        "downloads": -1,
        "filename": "assembler-interpreter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36e475d1b7aa3c39e33db8e4774388f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4169,
        "upload_time": "2022-09-19T20:10:21",
        "upload_time_iso_8601": "2022-09-19T20:10:21.350624Z",
        "url": "https://files.pythonhosted.org/packages/79/94/3d5bd81c8b2f24d9bc50b2e7f09021066479ea061e8ad9e16896f696db2d/assembler-interpreter-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2468164a76beb67c05d816788fa5a36bb167a685a42b695afb782723deacb20e",
          "md5": "66c754e00a289987f0aa12f292af2a73",
          "sha256": "290a4cbc55abb71373c30f8abe238f5243a8ce2974125e95a55f3a754092c369"
        },
        "downloads": -1,
        "filename": "assembler_interpreter-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66c754e00a289987f0aa12f292af2a73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6825,
        "upload_time": "2022-10-19T12:37:11",
        "upload_time_iso_8601": "2022-10-19T12:37:11.399587Z",
        "url": "https://files.pythonhosted.org/packages/24/68/164a76beb67c05d816788fa5a36bb167a685a42b695afb782723deacb20e/assembler_interpreter-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7da0ffcc38e2171f1d75d029cc783c433e891b859765dfd291ee936b91f32a0a",
          "md5": "83b52c8af2c2e468ff2afc6c5cf064bb",
          "sha256": "10d71b2116224518adc08690d9a88b83648106a3fa769c4d1ed32e46b735c8c6"
        },
        "downloads": -1,
        "filename": "assembler-interpreter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83b52c8af2c2e468ff2afc6c5cf064bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 6455,
        "upload_time": "2022-10-19T12:37:14",
        "upload_time_iso_8601": "2022-10-19T12:37:14.619768Z",
        "url": "https://files.pythonhosted.org/packages/7d/a0/ffcc38e2171f1d75d029cc783c433e891b859765dfd291ee936b91f32a0a/assembler-interpreter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2468164a76beb67c05d816788fa5a36bb167a685a42b695afb782723deacb20e",
        "md5": "66c754e00a289987f0aa12f292af2a73",
        "sha256": "290a4cbc55abb71373c30f8abe238f5243a8ce2974125e95a55f3a754092c369"
      },
      "downloads": -1,
      "filename": "assembler_interpreter-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66c754e00a289987f0aa12f292af2a73",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6825,
      "upload_time": "2022-10-19T12:37:11",
      "upload_time_iso_8601": "2022-10-19T12:37:11.399587Z",
      "url": "https://files.pythonhosted.org/packages/24/68/164a76beb67c05d816788fa5a36bb167a685a42b695afb782723deacb20e/assembler_interpreter-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7da0ffcc38e2171f1d75d029cc783c433e891b859765dfd291ee936b91f32a0a",
        "md5": "83b52c8af2c2e468ff2afc6c5cf064bb",
        "sha256": "10d71b2116224518adc08690d9a88b83648106a3fa769c4d1ed32e46b735c8c6"
      },
      "downloads": -1,
      "filename": "assembler-interpreter-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "83b52c8af2c2e468ff2afc6c5cf064bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 6455,
      "upload_time": "2022-10-19T12:37:14",
      "upload_time_iso_8601": "2022-10-19T12:37:14.619768Z",
      "url": "https://files.pythonhosted.org/packages/7d/a0/ffcc38e2171f1d75d029cc783c433e891b859765dfd291ee936b91f32a0a/assembler-interpreter-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}