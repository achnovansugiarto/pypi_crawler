{
  "info": {
    "author": "WolkAbout",
    "author_email": "info@wolkabout.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications",
      "Topic :: Internet",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# WolkGatewayModule-SDK-Python\n\nPython 3 package for connecting devices to WolkAbout IoT Platform through [WolkGateway](https://github.com/Wolkabout/WolkGateway).\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)  [![Documentation Status](https://readthedocs.org/projects/wolkgatewaymodule-sdk-python/badge/?version=latest)](https://wolkgatewaymodule-sdk-python.readthedocs.io/en/latest/?badge=latest)  [![PyPI version](https://badge.fury.io/py/wolk-gateway-module.svg)](https://badge.fury.io/py/wolk-gateway-module)  ![GitHub](https://img.shields.io/github/license/Wolkabout/WolkGatewayModule-SDK-Python.svg?style=flat-square)  ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/wolk-gateway-module.svg?style=flat-square) [![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\n----\nThis package is meant to be used for developing WolkGateway modules that enable devices without IP connectivity to send their data to WolkAbout IoT Platform.\n\n![WolkGateway Architecture](https://github.com/Wolkabout/WolkGatewayModule-SDK-Python/blob/master/docs/source/wolkabout_gateway_module.gif)\n\nThe user is responsible for providing the custom implementation that usually contains the deviceâ€™s network communication protocol, as well as for providing the business logic and everything related to the used hardware and the specifics of their particular use case.\n\nHowever, all the communication that is directed towards the gateway through WolkConnect - BUS Handler is already provided with this package, an open source implementation written in Python 3 that uses the MQTT protocol over TCP/IP to communicate with [WolkGateway](https://github.com/Wolkabout/WolkGateway).\n\n## Requirements\n\n* Python 3.7+\n\nAll requirements for this project can be installed on Debian based systems by invoking:\n```console\nsudo apt-get install python3.7 python3-pip && python3 -m pip install pip && python3.7 -m pip install pip\n```\n\n## Installation\n\nThe project can be installed using Python's package manager pip:\n```console\nsudo python3.7 -m pip install wolk-gateway-module\n```\n\nor installed from source by cloning the repository and running:\n\n```console\nsudo python3.7 -m pip install -r requirements.txt\npython3.7 setup.py install\n```\n\n\n## Example Usage\n\n### Creating devices\n\n```python\nimport wolk_gateway_module as wolk\n\n# Create device sensors\n\n# Use data_type parameter where reading type & unit symbol are not important\ngeneric_sensor = wolk.SensorTemplate(\n    name=\"Generic sensor\",\n    reference=\"G\",  # References must be unique per device\n    data_type=wolk.DataType.NUMERIC,\n    description=\"Optional description\"\n)\ntemperature_sensor = wolk.SensorTemplate(\n    name=\"Temperature\",\n    reference=\"T\",\n    reading_type_name=wolk.ReadingTypeName.TEMPERATURE,\n    unit=wolk.ReadingTypeMeasurementUnit.CELSIUS,\n    description=\"Temperature sensor\",\n)\n# Create a device template used to register the device\ndevice_template = wolk.DeviceTemplate(\n    sensors=[generic_sensor, temperature_sensor]\n)\n# Create a device\ndevice = wolk.Device(\n    name=\"Device\",\n    key=\"DEVICE_KEY\",  # Unique device key\n    template=device_template\n)\n```\n\n### Establishing connection with WolkGateway\n\n```python\n# Implement a device status provider\n\n\ndef get_device_status(device_key: str) -> wolk.DeviceStatus:\n    \"\"\"Return current device status.\"\"\"\n    if device_key == \"DEVICE_KEY\":\n        # Handle getting current device status here\n        return wolk.DeviceStatus.CONNECTED\n\n\nwolk_module = wolk.Wolk(\n    host=\"localhost\",  # Host address of WolkGateway\n    port=1883,  # TCP/IP port used for WolkGateway's MQTT broker\n    module_name=\"Python module\",  # Used for connection authentication\n    device_status_provider=get_device_status,\n)\n\nwolk_module.connect()\n```\n\n### Disconnecting from WolkGateway\n\n```python\nwolk_module.disconnect()\n```\n\n### Adding devices\n\nDevices need to be registered on the Platform before their data is considered valid.\nThis is achieved by calling:\n```python\nwolk_module.add_device(device)\n```\nTo stop listening for commands for a specific device use:\n```python\nwolk_module.remove_device(device)\n```\nThis will only stop acknowledging inbound commands, to delete the device completely use WolkGateway or the web application, depending on who has control over devices.\n\n### Publishing device status\nDevice status is obtained by calling provided `device_status_provider` function\n```python\nwolk_module.publish_device_status(\"DEVICE_KEY\")\n```\n\n### Adding sensor readings\n\n```python\nwolk_module.add_sensor_reading(\"DEVICE_KEY\", \"REFERENCE\", \"value\")\n# For reading with data size > 1, like location or acceleration use tuples\nwolk_module.add_sensor_reading(\"DEVICE_KEY\", \"LOC\", (24.534, -34.325))\n# Add timestamps to reading occurred to preserve history, otherwise\n# module will assign timestamp when adding it to storage\nwolk_module.add_sensor_reading(\"KEY\", \"R\", 12, int(round(time.time() * 1000)))\n\n# Add multiple sensor reading for a device\nwolk_module.add_sensor_readings(\"KEY\", {\"R1\": \"value\", \"R2\": True}, timestamp)\n```\n\nThis method will put serialized messages in storage.\n\n### Publishing stored messages\n\n```python\nwolk_module.publish()  # Publish all stored messages\nwolk_module.publish(\"DEVICE_KEY\")  # Publish all stored messages for device\n```\n\n### Alarms\n```python\nhumidity_alarm = wolk.AlarmTemplate(\n    name=\"High Humidity\",\n    reference=\"HH\",\n    description=\"High humidity has been detected\"\n)\ndevice_template = wolk.DeviceTemplate(alarms=[humidity_alarm])\n\n# Create device, Wolk instance, add device, connect...\n\n# Will place alarm message into storage, use publish method to send\nwolk_module.add_alarm(\"DEVICE_KEY\", \"HH\", active=True, timestamp=None)\n```\n\n### Actuators\n\nIn order to control device actuators, provide an `actuation_handler` and `actuator_status_provider`.\n\n```python\nswitch_actuator = wolk.ActuatorTemplate(\n    name=\"Switch\",\n    reference=\"SW\",\n    data_type=wolk.DataType.BOOLEAN,\n    description=\"Light switch\",\n)\nslider_actuator = wolk.ActuatorTemplate(\n    name=\"Slider\",\n    reference=\"SL\",\n    data_type=wolk.DataType.NUMERIC,\n    description=\"Light dimmer\",\n)\ndevice_template = wolk.DeviceTemplate(\n    actuators=[switch_actuator, slider_actuator]\n)\ndevice = wolk.Device(\"Device\", \"DEVICE_KEY\", device_template)\n\n\ndef handle_actuation(\n    device_key: str, reference: str, value: Union[bool, int, float, str]\n) -> None:\n    \"\"\"\n    Set device actuator identified by reference to value.\n\n    Must be implemented as non blocking.\n    Must be implemented as thread safe.\n    \"\"\"\n    if device_key == \"DEVICE_KEY\":\n        if reference == \"SW\":\n            # Handle setting the value here\n            switch.value = value\n\n        elif reference == \"SL\":\n            slider.value = value\n\n\ndef get_actuator_status(\n    device_key: str, reference: str\n) -> Tuple[wolk.ActuatorState, Union[bool, int, float, str]]:\n    \"\"\"\n    Get current actuator status identified by device key and reference.\n\n    Reads the status of actuator from the device\n    and returns it as a tuple containing the actuator state and current value.\n\n    Must be implemented as non blocking.\n    Must be implemented as thread safe.\n    \"\"\"\n    if device_key == \"DEVICE_KEY\":\n        if reference == \"SW\":\n            # Handle getting current actuator value here\n            return wolk.ActuatorState.READY, switch.value\n\n        elif reference == \"SL\":\n            return wolk.ActuatorState.READY, slider.value\n\n\n# Pass functions to Wolk instance\nwolk_module = wolk.Wolk(\n    host=\"localhost\",\n    port=1883,\n    module_name=\"Python module\",\n    device_status_provider=get_device_status,\n    actuation_handler=handle_actuation,\n    actuator_status_provider=get_actuator_status,\n)\n\nwolk_module.add_device(device)\n\nwolk_module.connect()\n\n# This method will call the provided actuator_status_provider function\n# and publish the state immediately or store message if unable to publish\nwolk_module.publish_actuator_status(\"DEVICE_KEY\", \"SW\")\nwolk_module.publish_actuator_status(\"DEVICE_KEY\", \"SL\")\n```\n\n### Configurations\n\nSimilar to actuators, using device configuration options requires providing a `configuration_handler` and a `configuration_provider` to the `Wolk` instance.\n\n```python\nlogging_level_configuration = wolk.ConfigurationTemplate(\n    name=\"Logging level\",\n    reference=\"LL\",\n    data_type=wolk.DataType.STRING,\n    default_value=\"INFO\",\n    description=\"eg. Set device logging level\",\n)\nlogging_interval_configuration = wolk.ConfigurationTemplate(\n    name=\"Logging interval\",\n    reference=\"LI\",\n    data_type=wolk.DataType.NUMERIC,\n    size=3,\n    labels=[\"seconds\", \"minutes\", \"hours\"],\n    description=\"eg. Set logging intervals\",\n)\ndevice_template = wolk.DeviceTemplate(\n    configurations=[logging_level_configuration, logging_level_configuration]\n)\ndevice = wolk.Device(\"Device\", \"DEVICE_KEY\", device_template)\n\n\ndef get_configuration(\n    device_key: str\n) -> Dict[\n    str,\n    Union[\n        int,\n        float,\n        bool,\n        str,\n        Tuple[int, int],\n        Tuple[int, int, int],\n        Tuple[float, float],\n        Tuple[float, float, float],\n        Tuple[str, str],\n        Tuple[str, str, str],\n    ],\n]:\n    \"\"\"\n    Get current configuration options.\n\n    Reads device configuration and returns it as a dictionary\n    with device configuration reference as key,\n    and device configuration value as value.\n    Must be implemented as non blocking.\n    Must be implemented as thread safe.\n    \"\"\"\n    if device_key == \"DEVICE_KEY\":\n        # Handle getting configuration values here\n        return {\n            \"LL\": get_log_level(),\n            \"LI\": get_log_inteval(),\n        }\n\n\ndef handle_configuration(\n    device_key: str,\n    configuration: Dict[\n        str,\n        Union[\n            int,\n            float,\n            bool,\n            str,\n            Tuple[int, int],\n            Tuple[int, int, int],\n            Tuple[float, float],\n            Tuple[float, float, float],\n            Tuple[str, str],\n            Tuple[str, str, str],\n        ],\n    ],\n) -> None:\n    \"\"\"\n    Change device's configuration options.\n\n    Must be implemented as non blocking.\n    Must be implemented as thread safe.\n    \"\"\"\n    if device_key == \"DEVICE_KEY\":\n        for reference, value in configuration.items():\n            # Handle setting configuration values here\n            if reference == \"LL\":\n                set_log_level(value)\n            elif reference == \"LI\":\n                set_log_interval(value)\n\n\n# Pass functions to Wolk instance\nwolk_module = wolk.Wolk(\n    host=\"localhost\",\n    port=1883,\n    module_name=\"Python module\",\n    device_status_provider=get_device_status,\n    configuration_provider=get_configuration,\n    configuration_handler=handle_configuration,\n)\n\nwolk_module.add_device(device)\n\nwolk_module.connect()\n\n# This method will call the provided configuration_provider function\n# and publish the state immediately or store message if unable to publish\nwolk_module.publish_configuration(\"DEVICE_KEY\")\n```\n\n### Firmware update\nIn order to enable firmware update for devices, provide an implementation of `FirmwareHandler` and pass to `Wolk` instance.\n\n```python\n\ndevice_template = wolk.DeviceTemplate(supports_firmware_update=True)\ndevice = wolk.Device(\"Device\", \"DEVICE_KEY\", device_template)\n\n\nclass FirmwareHandlerImplementation(wolk.FirmwareHandler):\n    \"\"\"Handle firmware installation and abort commands, and report version.\n\n    Once an object of this class is passed to a Wolk object,\n    it will set callback methods `on_install_success` and\n    `on_install_fail` used for reporting the result of\n    the firmware update process. Use these callbacks in `install_firmware`\n    and `abort_installation` methods.\"\"\"\n\n    def install_firmware(\n        self, device_key: str, firmware_file_path: str\n    ) -> None:\n        \"\"\"\n        Handle the installation of the firmware file.\n\n        Call `self.on_install_success(device_key)` to report success.\n        Reporting success will also get new firmware version.\n\n        If installation fails, call `self.on_install_fail(device_key, status)`\n        where:\n        `status = FirmwareUpdateStatus(\n            FirmwareUpdateState.ERROR,\n            FirmwareUpdateErrorCode.INSTALLATION_FAILED\n        )`\n        or use other values from `FirmwareUpdateErrorCode` if they fit better.\n        \"\"\"\n        if device_key == \"DEVICE_KEY\":\n            print(\n                f\"Installing firmware: '{firmware_file_path}' \"\n                f\"on device '{device_key}'\"\n            )\n            # Handle the actual installation here\n            if install_success:\n                self.on_install_success(device_key)\n            else:\n                status = wolk.FirmwareUpdateStatus(\n                    wolk.FirmwareUpdateState.ERROR,\n                    wolk.FirmwareUpdateErrorCode.INSTALLATION_FAILED,\n                )\n                self.on_install_fail(device_key, status)\n\n    def abort_installation(self, device_key: str) -> None:\n        \"\"\"\n        Attempt to abort the firmware installation process for device.\n\n        Call `self.on_install_fail(device_key, status)` to report if\n        the installation process was able to be aborted with\n        `status = FirmwareUpdateStatus(FirmwareUpdateState.ABORTED)`\n        If unable to stop the installation process, no action is required.\n        \"\"\"\n        if device_key == \"DEVICE_KEY\":\n            # Manage to stop firmware installation\n            status = wolk.FirmwareUpdateStatus(\n                wolk.FirmwareUpdateState.ABORTED\n            )\n            self.on_install_fail(device_key, status)\n\n    def get_firmware_version(self, device_key: str) -> str:\n        \"\"\"Return device's current firmware version.\"\"\"\n        if device_key == \"DEVICE_KEY\":\n            # Handle getting the current firmware version here\n            return version\n\n\nwolk_module = wolk.Wolk(\n    host=\"localhost\",\n    port=1883,\n    module_name=\"Python module\",\n    device_status_provider=get_device_status,\n    firmware_handler=FirmwareHandlerImplementation(),\n)\n\nwolk_module.add_device(device)\n\nwolk_module.connect()\n```\n\n### Debugging\n\nEnable debug logging with:\n```python\nwolk.logging_config(\"debug\", log_file=None)\n```\n\n### Data persistence\n\nData persistence mechanism used **by default** stored messages in-memory.\nIn cases when provided in-memory persistence is suboptimal, it it possible to use custom persistence by implementing `OutboundMessageQueue` and passing it in the following manner:\n```python\nwolk_module = wolk.Wolk(\n    host=\"localhost\",\n    port=1883,\n    module_name=\"Python module\",\n    device_status_provider=get_device_status,\n    outbound_message_queue=CustomPersistence()\n)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Wolkabout/WolkGatewayModule-SDK-Python",
    "keywords": "IoT,WolkAbout,Internet of Things",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wolk-gateway-module",
    "package_url": "https://pypi.org/project/wolk-gateway-module/",
    "platform": "",
    "project_url": "https://pypi.org/project/wolk-gateway-module/",
    "project_urls": {
      "Homepage": "https://github.com/Wolkabout/WolkGatewayModule-SDK-Python"
    },
    "release_url": "https://pypi.org/project/wolk-gateway-module/1.0.9/",
    "requires_dist": [
      "paho-mqtt (>=1.4.0)"
    ],
    "requires_python": ">=3.7.0",
    "summary": "SDK for gateway communication modules that connect to WolkAbout IoT Platform",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12742386,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58b1ea851c2085f0ec932bb6c301f7d6c788bb3f99bb9eed4696ad9ebc23af39",
          "md5": "7721b6db8e84b91e6576a48af7cac45a",
          "sha256": "3b360c4eaa03873189a9eeb7d47462b99f8c3ad2b1504d0fcefd92b5c9db0712"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7721b6db8e84b91e6576a48af7cac45a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 71934,
        "upload_time": "2019-05-24T12:37:46",
        "upload_time_iso_8601": "2019-05-24T12:37:46.853421Z",
        "url": "https://files.pythonhosted.org/packages/58/b1/ea851c2085f0ec932bb6c301f7d6c788bb3f99bb9eed4696ad9ebc23af39/wolk_gateway_module-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9326974cef4b6b883c43f12cdedaec3354f9c65e03f8fa620cc1470f5228a7a",
          "md5": "b67d7961c50c23e6101b7977d9d8e72f",
          "sha256": "adea55e518295e291714e3f316929602e2ed2ed28a2e89416768f72f73b39a01"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b67d7961c50c23e6101b7977d9d8e72f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44736,
        "upload_time": "2019-05-24T12:37:49",
        "upload_time_iso_8601": "2019-05-24T12:37:49.554728Z",
        "url": "https://files.pythonhosted.org/packages/b9/32/6974cef4b6b883c43f12cdedaec3354f9c65e03f8fa620cc1470f5228a7a/wolk-gateway-module-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de6d269804b5bba14afee6f1d3cb4885afd64adf5a3f8fe93511eacb99bcb47e",
          "md5": "12403485206d710c24630d976cfadaad",
          "sha256": "1c46cc71a6293afb09f66d06967c611115bf2d623681bcccd8323d5936b6a5ee"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12403485206d710c24630d976cfadaad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72109,
        "upload_time": "2019-05-30T14:25:31",
        "upload_time_iso_8601": "2019-05-30T14:25:31.613606Z",
        "url": "https://files.pythonhosted.org/packages/de/6d/269804b5bba14afee6f1d3cb4885afd64adf5a3f8fe93511eacb99bcb47e/wolk_gateway_module-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02d71280ca1741fb215671a4e766acb48cdb6033995a5fcd652cbc84a46f2c59",
          "md5": "1718c4f9a60e2fb4579334e5e2dbb785",
          "sha256": "1f9d14f416775542f9f5e1ca9c822016ac50529f1277380d7fdf6bcbf99d2ea0"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1718c4f9a60e2fb4579334e5e2dbb785",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45104,
        "upload_time": "2019-05-30T14:25:33",
        "upload_time_iso_8601": "2019-05-30T14:25:33.552191Z",
        "url": "https://files.pythonhosted.org/packages/02/d7/1280ca1741fb215671a4e766acb48cdb6033995a5fcd652cbc84a46f2c59/wolk-gateway-module-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e20c159831990f46a79e73323ab2a2eb25a196df0ddedaa85fd7ddeb4f2661f1",
          "md5": "672f6720d6a8d307e8e27fde89f2f404",
          "sha256": "b6ef52766ca0476d4b580136d8fb4c723c540ad86596a5936a651f52eb944344"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "672f6720d6a8d307e8e27fde89f2f404",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72219,
        "upload_time": "2019-06-03T11:57:09",
        "upload_time_iso_8601": "2019-06-03T11:57:09.863492Z",
        "url": "https://files.pythonhosted.org/packages/e2/0c/159831990f46a79e73323ab2a2eb25a196df0ddedaa85fd7ddeb4f2661f1/wolk_gateway_module-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e4a5ebb22fb0d8c99301edd506a7e18dd15318179b5783f7a68f4167abbc986",
          "md5": "ca2bb72bb31ef5c1ccaa60f6734ab0e2",
          "sha256": "c59342565c0db381bdc5d9ff27a3488f909bda9b0588c5d065afa533e627a2b8"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ca2bb72bb31ef5c1ccaa60f6734ab0e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45346,
        "upload_time": "2019-06-03T11:57:12",
        "upload_time_iso_8601": "2019-06-03T11:57:12.064684Z",
        "url": "https://files.pythonhosted.org/packages/1e/4a/5ebb22fb0d8c99301edd506a7e18dd15318179b5783f7a68f4167abbc986/wolk-gateway-module-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41a19cb2f5cf082e15298db3ed417ea4861000bc9223753bed5454de233c22c7",
          "md5": "adb9245d90b9a07d039c95576a4e407b",
          "sha256": "006039ed29975f9202956060870378d93921daaf27b199de7559eb56412f9b00"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "adb9245d90b9a07d039c95576a4e407b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72731,
        "upload_time": "2019-06-04T13:02:25",
        "upload_time_iso_8601": "2019-06-04T13:02:25.883609Z",
        "url": "https://files.pythonhosted.org/packages/41/a1/9cb2f5cf082e15298db3ed417ea4861000bc9223753bed5454de233c22c7/wolk_gateway_module-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b53826573f181189de4f9abddc47d605b71a236204c45335616d53bbd7033820",
          "md5": "1bfe9614689cbffd5d1bd75a14aba505",
          "sha256": "08f0a2c1465c6d82ce37dbe578554a57fb6465d2405552e1f46c6923ab6345bc"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1bfe9614689cbffd5d1bd75a14aba505",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46214,
        "upload_time": "2019-06-04T13:02:28",
        "upload_time_iso_8601": "2019-06-04T13:02:28.535959Z",
        "url": "https://files.pythonhosted.org/packages/b5/38/26573f181189de4f9abddc47d605b71a236204c45335616d53bbd7033820/wolk-gateway-module-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96239ba59eb5d03533342970a1cb487fef16fdb62abb8736063b3d428e0b00d4",
          "md5": "938614d069cbd216e49a27024ffead7a",
          "sha256": "2ccc227babc2de6711efe6a6489f0d4509f15776e567004cfe1e4a0814eccfc0"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "938614d069cbd216e49a27024ffead7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72725,
        "upload_time": "2019-07-16T13:54:18",
        "upload_time_iso_8601": "2019-07-16T13:54:18.247941Z",
        "url": "https://files.pythonhosted.org/packages/96/23/9ba59eb5d03533342970a1cb487fef16fdb62abb8736063b3d428e0b00d4/wolk_gateway_module-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e900111d95acffac1eac7d4e08df73e443f6e177c48013f13bc50059ba032d5",
          "md5": "90b2a17f5a93a3b56dcdab59b5e9e887",
          "sha256": "35d8a531f0b9d3a896c97f70f9b96057c6b460227fe8cd7eac4e065596ea00c7"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "90b2a17f5a93a3b56dcdab59b5e9e887",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46220,
        "upload_time": "2019-07-16T13:54:20",
        "upload_time_iso_8601": "2019-07-16T13:54:20.042441Z",
        "url": "https://files.pythonhosted.org/packages/9e/90/0111d95acffac1eac7d4e08df73e443f6e177c48013f13bc50059ba032d5/wolk-gateway-module-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ac99e01f639de01e266029e2e83f14330027333e5355331f847ffaefe02f885",
          "md5": "3bbdf74f816bec31b17efc9d7abc7103",
          "sha256": "be4131d59d3b5e9a2483675a837f25ea6208a1f06465e89d5cdbd6e0a97aefbb"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bbdf74f816bec31b17efc9d7abc7103",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 73239,
        "upload_time": "2019-12-03T15:17:41",
        "upload_time_iso_8601": "2019-12-03T15:17:41.295347Z",
        "url": "https://files.pythonhosted.org/packages/8a/c9/9e01f639de01e266029e2e83f14330027333e5355331f847ffaefe02f885/wolk_gateway_module-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28fef8ec17cda437522de7e1ee8c71492fb488db7573166fe4b8b47903b31910",
          "md5": "2aa1b78d842132368154e258fa3a8d11",
          "sha256": "d0a1186ff764b828e66857f4bbd7c0fb39ef9caccffcc193aa27f3e759ca1f1f"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2aa1b78d842132368154e258fa3a8d11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 46562,
        "upload_time": "2019-12-03T15:17:42",
        "upload_time_iso_8601": "2019-12-03T15:17:42.972410Z",
        "url": "https://files.pythonhosted.org/packages/28/fe/f8ec17cda437522de7e1ee8c71492fb488db7573166fe4b8b47903b31910/wolk-gateway-module-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f85776d91cc1fa84143db6f99ff7f5803804d1f34233a67bded052e22dc7ee3",
          "md5": "9fd7d3bb39860a418a0371ae7c5309e1",
          "sha256": "9459fa0ba2e9e58a04c8c5dd6935f88337fc8aa50c03c13c14127099a35f60e6"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fd7d3bb39860a418a0371ae7c5309e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 73709,
        "upload_time": "2019-12-18T16:10:52",
        "upload_time_iso_8601": "2019-12-18T16:10:52.595133Z",
        "url": "https://files.pythonhosted.org/packages/0f/85/776d91cc1fa84143db6f99ff7f5803804d1f34233a67bded052e22dc7ee3/wolk_gateway_module-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af1486b73b045784f7c6aaf3922e1145a8cc39276d60538a4983c601c7e2856f",
          "md5": "d5e1bbe0f9024bab31eab645f740f1e9",
          "sha256": "9fe9ddd0f271732b5b9279c6c0d27931115ebe23103f050b3cc1002d332bba17"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d5e1bbe0f9024bab31eab645f740f1e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 47107,
        "upload_time": "2019-12-18T16:10:54",
        "upload_time_iso_8601": "2019-12-18T16:10:54.438710Z",
        "url": "https://files.pythonhosted.org/packages/af/14/86b73b045784f7c6aaf3922e1145a8cc39276d60538a4983c601c7e2856f/wolk-gateway-module-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0093eaaefaa9a8fe0f13b89422c490809fe5eecc000c3451f1a058fefbd9ebbd",
          "md5": "e079d3af1f08d25a32396e97c955a735",
          "sha256": "a7e70d8d8dc3119fe5e92f94bf1141fc0c3f74e5c11a179ac0cd4f13b21b5cbf"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e079d3af1f08d25a32396e97c955a735",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 73712,
        "upload_time": "2020-08-07T14:45:27",
        "upload_time_iso_8601": "2020-08-07T14:45:27.185835Z",
        "url": "https://files.pythonhosted.org/packages/00/93/eaaefaa9a8fe0f13b89422c490809fe5eecc000c3451f1a058fefbd9ebbd/wolk_gateway_module-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5ba84b04afe3f09e4f88d265c0e60e79272dc8cbffd06e49b26f341f61c879c",
          "md5": "b937d4095bf9c73038cabe1f8754a9db",
          "sha256": "bfdcf58a454908b23ae0b59e52135f4cfe3dfd9439bc2225ff8d1fe306229e5d"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b937d4095bf9c73038cabe1f8754a9db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 47048,
        "upload_time": "2020-08-07T14:45:28",
        "upload_time_iso_8601": "2020-08-07T14:45:28.973987Z",
        "url": "https://files.pythonhosted.org/packages/d5/ba/84b04afe3f09e4f88d265c0e60e79272dc8cbffd06e49b26f341f61c879c/wolk-gateway-module-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "440310a71e6484b6a4f699ce13374d59c327d5b2798353835d1b19f806d71a1d",
          "md5": "e6a2a4fcdf2f287c93e17d4d36593786",
          "sha256": "e5cff144b7bbf482501cf6d5559a4377e2cabb99df086e0780c742e7e1736cdc"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6a2a4fcdf2f287c93e17d4d36593786",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 75433,
        "upload_time": "2020-11-09T10:42:53",
        "upload_time_iso_8601": "2020-11-09T10:42:53.534780Z",
        "url": "https://files.pythonhosted.org/packages/44/03/10a71e6484b6a4f699ce13374d59c327d5b2798353835d1b19f806d71a1d/wolk_gateway_module-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85b2356312a5c52b8b9ae40e9c7d9a8672ca6b954a8f216840365cc21e2ac454",
          "md5": "2c28aff727859e8af8e9a8c011ffa06f",
          "sha256": "c95e8e6ea3a3db56be8b75a4c5548603b8352203ab600a6ea22232c5b3084b2f"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2c28aff727859e8af8e9a8c011ffa06f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 50003,
        "upload_time": "2020-11-09T10:42:55",
        "upload_time_iso_8601": "2020-11-09T10:42:55.322783Z",
        "url": "https://files.pythonhosted.org/packages/85/b2/356312a5c52b8b9ae40e9c7d9a8672ca6b954a8f216840365cc21e2ac454/wolk-gateway-module-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "283e235744cff339ac2e974f7df662ed9a292460232d47f57f2f33c598367d53",
          "md5": "3806376d274215d8209ac39a9b964bb1",
          "sha256": "ad678f9f7c792f5646874bb80eb0b08a7172bf7ad80940378c86f5bef93a212e"
        },
        "downloads": -1,
        "filename": "wolk_gateway_module-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3806376d274215d8209ac39a9b964bb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 75117,
        "upload_time": "2020-11-24T10:42:27",
        "upload_time_iso_8601": "2020-11-24T10:42:27.716596Z",
        "url": "https://files.pythonhosted.org/packages/28/3e/235744cff339ac2e974f7df662ed9a292460232d47f57f2f33c598367d53/wolk_gateway_module-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e7d07f9ef2e16412a6596345405dca110d9f39285c0a9cc5bad1e6a184387ec",
          "md5": "53e5dd009ba62c608b9c966c8e330e16",
          "sha256": "b5925908bf7aca6c266b9d5b4c331d7630bae96eff7fa2bb18d01e2c2d7b71e1"
        },
        "downloads": -1,
        "filename": "wolk-gateway-module-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "53e5dd009ba62c608b9c966c8e330e16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 50126,
        "upload_time": "2020-11-24T10:42:29",
        "upload_time_iso_8601": "2020-11-24T10:42:29.101585Z",
        "url": "https://files.pythonhosted.org/packages/4e/7d/07f9ef2e16412a6596345405dca110d9f39285c0a9cc5bad1e6a184387ec/wolk-gateway-module-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "283e235744cff339ac2e974f7df662ed9a292460232d47f57f2f33c598367d53",
        "md5": "3806376d274215d8209ac39a9b964bb1",
        "sha256": "ad678f9f7c792f5646874bb80eb0b08a7172bf7ad80940378c86f5bef93a212e"
      },
      "downloads": -1,
      "filename": "wolk_gateway_module-1.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3806376d274215d8209ac39a9b964bb1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 75117,
      "upload_time": "2020-11-24T10:42:27",
      "upload_time_iso_8601": "2020-11-24T10:42:27.716596Z",
      "url": "https://files.pythonhosted.org/packages/28/3e/235744cff339ac2e974f7df662ed9a292460232d47f57f2f33c598367d53/wolk_gateway_module-1.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e7d07f9ef2e16412a6596345405dca110d9f39285c0a9cc5bad1e6a184387ec",
        "md5": "53e5dd009ba62c608b9c966c8e330e16",
        "sha256": "b5925908bf7aca6c266b9d5b4c331d7630bae96eff7fa2bb18d01e2c2d7b71e1"
      },
      "downloads": -1,
      "filename": "wolk-gateway-module-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "53e5dd009ba62c608b9c966c8e330e16",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 50126,
      "upload_time": "2020-11-24T10:42:29",
      "upload_time_iso_8601": "2020-11-24T10:42:29.101585Z",
      "url": "https://files.pythonhosted.org/packages/4e/7d/07f9ef2e16412a6596345405dca110d9f39285c0a9cc5bad1e6a184387ec/wolk-gateway-module-1.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}