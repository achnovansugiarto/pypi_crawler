{
  "info": {
    "author": "Macrometa",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# macrometa-target-bigquery\n\nMacrometa target bigquery connector that loads data into BigQuery following the [Singer spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md).\n\n\n## How to use it\n\nIf you want to run this target connector independently please read further.\n\n## Install\n\nFirst, make sure Python 3 is installed on your system or follow these\ninstallation instructions for [Mac](http://docs.python-guide.org/en/latest/starting/install3/osx/) or\n[Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04).\n\nIt's recommended to use a virtualenv:\n\n```bash\nmake venv\n```\n\n### To run\n\nLike any other target connector that's following the singer specification:\n\n`some-singer-source(tap) | macrometa-target-bigquery --config [config.json]`\n\nIt's reading incoming messages from STDIN and using the properties in `config.json` to upload data into BigQuery.\n\n**Note**: To avoid version conflicts run `source` and `targets` in separate virtual environments.\n\n### Configuration settings\n\nRunning the the target connector requires a `config.json` file. An example with the minimal settings:\n\n   ```json\n   {\n     \"project_id\": \"mygbqproject\"\n   }\n   ```\n\nFull list of options in `config.json`:\n\n| Property                                | Type      | Required?    | Description|\n| -------------------------------------   | --------- | ------------ | ---------------------------------------------------------------                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| project_id                              | String    | Yes          | BigQuery project|\n| location                                | String    |              | Region where BigQuery stores your dataset|\n| default_target_schema                   | String    |              | Name of the schema where the tables will be created. If `schema_mapping` is not defined then every stream sent by the tap is loaded into this schema|\n| default_target_schema_select_permission | String    |              | Grant USAGE privilege on newly created schemas and grant SELECT privilege on newly created|\n| schema_mapping                          | Object    |              | Useful if you want to load multiple streams from one source to multiple BigQuery schemas.<br><br>If the source sends the `stream_id` in `<schema_name>-<table_name>` format then this option overwrites the `default_target_schema` value. Note, that using `schema_mapping` you can overwrite the `default_target_schema_select_permission` value to grant SELECT permissions to different groups per schemas or optionally you can create indices automatically for the replicated tables. |\n| batch_size_rows                         | Integer   |              | (Default: 100000) Maximum number of rows in each batch. At the end of each batch, the rows in the batch are loaded into BigQuery|\n| batch_wait_limit_seconds                | Integer   |              | (Default: None) Maximum time to wait for batch to reach `batch_size_rows`. |\n| flush_all_streams                       | Boolean   |              | (Default: False) Flush and load every stream into BigQuery when one batch is full. Warning: This may trigger transfer of data with low number of records, and may cause performance problems|\n| parallelism                             | Integer   |              | (Default: 0) The number of threads used to flush tables. 0 will create a thread for each stream, up to parallelism_max. -1 will create a thread for each CPU core. Any other positive number will create that number of threads, up to parallelism_max|\n| max_parallelism                         | Integer   |              | (Default: 16) Max number of parallel threads to use when flushing tables|\n| add_metadata_columns                    | Boolean   |              | (Default: False) Metadata columns add extra row level information about data ingestions, (i.e. when was the row read in source, when was inserted or deleted in bigquery etc.) Metadata columns are creating automatically by adding extra columns to the tables with a column prefix `_sdc_`. The column names are following the stitch naming conventions documented at https://www.stitchdata.com/docs/data-structure/integration-schemas#sdc-columns. Enabling metadata columns will flag the deleted rows by setting the `_sdc_deleted_at` metadata column. Without the `add_metadata_columns` option the deleted rows from sources will not be recognisable in BigQuery.                                                                                                                                      |\n| hard_delete                             | Boolean   |              | (Default: False) When `hard_delete` option is true then DELETE SQL commands will be performed in BigQuery to delete rows in tables. It's achieved by continuously checking the  `_sdc_deleted_at` metadata column sent by the source. Due to deleting rows requires metadata columns, `hard_delete` option automatically enables the `add_metadata_columns` option as well.|\n| hard_delete_mapping                     | Object    |              | This is useful if you want to set `hard_delete` for some streams but not others. This should contain a mapping of `stream_id: <Boolean>`. This boolean will override the default behaviour set with `hard_delete` for that stream. If a stream is not defined in `hard_delete_mapping` it will behave according to `hard_delete`. When `hard_delete` option is true then DELETE SQL commands will be performed in BigQuery to delete rows in tables. It's achieved by continuously checking the  `_sdc_deleted_at` metadata column sent by the singer source. Due to deleting rows requires metadata columns, `hard_delete` option automatically enables the `add_metadata_columns` option as well.|\n| data_flattening_max_level               | Integer   |              | (Default: 0) Object type RECORD items from sources can be loaded into VARIANT columns as JSON (default) or we can flatten the schema by creating columns automatically.<br><br>When value is 0 (default) then flattening functionality is turned off|\n| primary_key_required                    | Boolean   |              | (Default: True) Log based and Incremental replications on tables with no Primary Key cause duplicates when merging UPDATE events. When set to true, stop loading data if no Primary Key is defined|\n| validate_records                        | Boolean   |              | (Default: False) Validate every single record message to the corresponding JSON schema. This option is disabled by default and invalid RECORD messages will fail only at load time by BigQuery. Enabling this option will detect invalid records earlier but could cause performance degradation|\n| temp_schema                             | String    |              | Name of the schema where the temporary tables will be created. Will default to the same schema as the target tables|\n| use_partition_pruning                   | Boolean   |              | (Default: False) If `true` then BigQuery table partition pruning will be used for tables which have partitioning enabled. This partitioning should be on a column which is immutable such as an integer primary key or a `created_at` column. The partitioning should be set up manually by the user. This feature can dramatically reduce the cost of each `MERGE` for large tables.                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n\n\n### Schema Changes\n\nThis macrometa target connector does follow the [PipelineWise specification](https://transferwise.github.io/pipelinewise/user_guide/schema_changes.html) for schema changes except versioning columns because of the way BigQuery works.\n\nBigQuery does not allow for column renames so a column modification works like this instead:\n\n#### Versioning columns\n\nTarget connectors are versioning columns **when data type change is detected** in the source\ntable. Versioning columns means that the old column with the old datatype is kept\nand a new column is created by adding a suffix to the name depending of the type (and also a timestamp for struct and arrays)\nto the column name with the new data type. This new column will be added to the table.\n\nFor example if the data type of ``COLUMN_THREE`` changes from ``INTEGER`` to ``VARCHAR``\nPipelineWise will replicate data in this order:\n\n1. Before changing data type ``COLUMN_THREE`` is ``INTEGER`` just like in in source table:\n\n| **COLUMN_ONE** | **COLUMN_TWO** | **COLUMN_THREE** (INTEGER) |\n|----------------|----------------|----------------------------|\n| text           | text           | 1                          |\n| text           | text           | 2                          |\n| text           | text           | 3                          |\n\n2. After the data type change ``COLUMN_THREE`` remains ``INTEGER`` with\nthe old data and a new ``COLUMN_TREE__st`` column created with ``STRING`` type that keeps\ndata only after the change.\n\n| **COLUMN_ONE** | **COLUMN_TWO** | **COLUMN_THREE** (INTEGER) | **COLUMN_THREE__st** (VARCHAR) |\n|----------------|----------------|----------------------------|--------------------------------|\n| text           | text           | 111                        |                                |\n| text           | text           | 222                        |                                |\n| text           | text           | 333                        |                                |\n| text           | text           |                            | 444-ABC                        |\n| text           | text           |                            | 555-DEF                        |\n\n.. warning::\n\n  Please note the ``NULL`` values in ``COLUMN_THREE`` and ``COLUMN_THREE__st`` columns.\n  **Historical values are not converted to the new data types!**\n  If you need the actual representation of the table after data type changes then\n  you need to resync the table.\n\n\n#### Column clustering\n\nThis target connector tries to speed up the querying of the resulting tables by clustering the\ncolumns in each table by the primary key of the stream.\n\nThe choice and ordering of the clustering keys are defined in the same order as the\n`key_properties` columns in the stream's `SCHEMA` messages.\n\nBigquery places a limit on the number of clustering keys (4 as of 2022-08-02), so if the\nnumber of clustering keys is greater than 4, this target will simply use the first 4\ncolumns defined in `key_properties` property.\n\n### To run tests:\n\n1. Define environment variables that requires running the tests\n```\n  export GOOGLE_APPLICATION_CREDENTIALS=<credentials-json-file>\n  export MACROMETA_TARGET_BIGQUERY_PROJECT=<bigquery project to run your tests on>\n  export MACROMETA_TARGET_BIGQUERY_SCHEMA=<temporary schema for running the tests>\n```\n\n2. Install python dependencies in a virtual env and run nose unit and integration tests\n```\nmake venv\n```\n\n3. To run unit tests:\n```\nmake unit_test\n```\n\n4. To run integration tests:\n```\nmake integration_test\n```\n\n### To run pylint:\n\n1. Install python dependencies and run python linter\n```\nmake venv pylint\n```\n\n## License\n\nApache License Version 2.0\n\nSee [LICENSE](LICENSE) to see the full text.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Macrometacorp/macrometa-target-bigquery",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "macrometa-target-bigquery",
    "package_url": "https://pypi.org/project/macrometa-target-bigquery/",
    "platform": null,
    "project_url": "https://pypi.org/project/macrometa-target-bigquery/",
    "project_urls": {
      "Homepage": "https://github.com/Macrometacorp/macrometa-target-bigquery"
    },
    "release_url": "https://pypi.org/project/macrometa-target-bigquery/0.0.3/",
    "requires_dist": [
      "pipelinewise-singer-python (==1.2.0)",
      "google-cloud-bigquery (<3.1.0,>=2.20.0)",
      "fastavro (<1.4.11,>=0.22.8)",
      "c8connector (==0.0.15)",
      "pytest (==7.0.1) ; extra == 'test'",
      "pylint (==2.13.4) ; extra == 'test'",
      "pytest-cov (==3.0.0) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Macrometa target bigquery connector for loading data to BigQuery",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547672,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d028b21fc52c312a379c7c2cbdb16c6aff5dc69d97ca713bb60e245d9283b0f",
          "md5": "97d96a579d6c561e9e32d5584b0f4289",
          "sha256": "93f280c416e370d935b3715eae2a8b202eea844442d8c4f2af422ec9f7d94c07"
        },
        "downloads": -1,
        "filename": "macrometa_target_bigquery-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97d96a579d6c561e9e32d5584b0f4289",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28197,
        "upload_time": "2023-03-30T19:02:17",
        "upload_time_iso_8601": "2023-03-30T19:02:17.179391Z",
        "url": "https://files.pythonhosted.org/packages/5d/02/8b21fc52c312a379c7c2cbdb16c6aff5dc69d97ca713bb60e245d9283b0f/macrometa_target_bigquery-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ac26e97bedefc29d8869ec01ea30ecb8da7dcbd1017b8ff91af7d3af9311427",
          "md5": "e6415759b3f152ac22bd1162d683560d",
          "sha256": "d2046369d51843f04f645bc253d43b91d6a06068a4bf877c82471e64ca887b29"
        },
        "downloads": -1,
        "filename": "macrometa-target-bigquery-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e6415759b3f152ac22bd1162d683560d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28273,
        "upload_time": "2023-03-30T19:02:19",
        "upload_time_iso_8601": "2023-03-30T19:02:19.368287Z",
        "url": "https://files.pythonhosted.org/packages/5a/c2/6e97bedefc29d8869ec01ea30ecb8da7dcbd1017b8ff91af7d3af9311427/macrometa-target-bigquery-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "663d8effa9f8fd705f88466c60081923ec3a80edb4c6dd86b7c591c373d8233f",
          "md5": "f88abb537195f694f1b5d4840a0ed6d7",
          "sha256": "aa0348627ed5e1d0e05fba8210a0d85ec9a7bb52f23967e3cda235028b8fd75c"
        },
        "downloads": -1,
        "filename": "macrometa_target_bigquery-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f88abb537195f694f1b5d4840a0ed6d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28212,
        "upload_time": "2023-03-31T05:55:24",
        "upload_time_iso_8601": "2023-03-31T05:55:24.072160Z",
        "url": "https://files.pythonhosted.org/packages/66/3d/8effa9f8fd705f88466c60081923ec3a80edb4c6dd86b7c591c373d8233f/macrometa_target_bigquery-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec8bab8a5513d351e72f41a06b6f02bcb92f3dfeff27b881483f341beb3ea658",
          "md5": "1b46a0418bef80a2aeece621a948ecc7",
          "sha256": "6bbf9fb9e054397d6384cee95fcded4d92a5701bf48185d2bd98c874c713e780"
        },
        "downloads": -1,
        "filename": "macrometa-target-bigquery-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1b46a0418bef80a2aeece621a948ecc7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28303,
        "upload_time": "2023-03-31T05:55:26",
        "upload_time_iso_8601": "2023-03-31T05:55:26.044917Z",
        "url": "https://files.pythonhosted.org/packages/ec/8b/ab8a5513d351e72f41a06b6f02bcb92f3dfeff27b881483f341beb3ea658/macrometa-target-bigquery-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f21a8c8846b5deffaa4ede293722206789e5e333d90ddff3ff2c3987b9db8eb5",
          "md5": "e03c00df57482783aa830ea19da38223",
          "sha256": "c533695670e40c52637d14bf9ac49a5cbd042cb4d86ce2361f161249552037cc"
        },
        "downloads": -1,
        "filename": "macrometa_target_bigquery-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e03c00df57482783aa830ea19da38223",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28393,
        "upload_time": "2023-04-02T13:09:27",
        "upload_time_iso_8601": "2023-04-02T13:09:27.150172Z",
        "url": "https://files.pythonhosted.org/packages/f2/1a/8c8846b5deffaa4ede293722206789e5e333d90ddff3ff2c3987b9db8eb5/macrometa_target_bigquery-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68bc8c05f2e9da6512b4af5dfcb2d03c8e9e3dd4b0f5490b88be9b3e795db901",
          "md5": "4caf83aba209409f04ec06e1c0f463b6",
          "sha256": "4d032f154abceddc5829c88822eba47901848390d2ed5dff5d3be5d28026a1ed"
        },
        "downloads": -1,
        "filename": "macrometa-target-bigquery-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4caf83aba209409f04ec06e1c0f463b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28476,
        "upload_time": "2023-04-02T13:09:29",
        "upload_time_iso_8601": "2023-04-02T13:09:29.221090Z",
        "url": "https://files.pythonhosted.org/packages/68/bc/8c05f2e9da6512b4af5dfcb2d03c8e9e3dd4b0f5490b88be9b3e795db901/macrometa-target-bigquery-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f21a8c8846b5deffaa4ede293722206789e5e333d90ddff3ff2c3987b9db8eb5",
        "md5": "e03c00df57482783aa830ea19da38223",
        "sha256": "c533695670e40c52637d14bf9ac49a5cbd042cb4d86ce2361f161249552037cc"
      },
      "downloads": -1,
      "filename": "macrometa_target_bigquery-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e03c00df57482783aa830ea19da38223",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28393,
      "upload_time": "2023-04-02T13:09:27",
      "upload_time_iso_8601": "2023-04-02T13:09:27.150172Z",
      "url": "https://files.pythonhosted.org/packages/f2/1a/8c8846b5deffaa4ede293722206789e5e333d90ddff3ff2c3987b9db8eb5/macrometa_target_bigquery-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68bc8c05f2e9da6512b4af5dfcb2d03c8e9e3dd4b0f5490b88be9b3e795db901",
        "md5": "4caf83aba209409f04ec06e1c0f463b6",
        "sha256": "4d032f154abceddc5829c88822eba47901848390d2ed5dff5d3be5d28026a1ed"
      },
      "downloads": -1,
      "filename": "macrometa-target-bigquery-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4caf83aba209409f04ec06e1c0f463b6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28476,
      "upload_time": "2023-04-02T13:09:29",
      "upload_time_iso_8601": "2023-04-02T13:09:29.221090Z",
      "url": "https://files.pythonhosted.org/packages/68/bc/8c05f2e9da6512b4af5dfcb2d03c8e9e3dd4b0f5490b88be9b3e795db901/macrometa-target-bigquery-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}