{
  "info": {
    "author": "QC Ware Corp. (Sean Weinberg, Fabio Sanches)",
    "author_email": "sean.weinberg@qcware.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "=======================================\nUnitair: PyTorch-based quantum circuits\n=======================================\n.. image:: https://readthedocs.org/projects/unitair/badge/?version=latest\n    :target: https://unitair.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nUnitair is a lightweight Python package that \nbrings quantum computing to PyTorch.\n\nUnitair differs from other quantum computing software packages\nin important ways. Quantum states are PyTorch tensors (the PyTorch\nversion of the NumPy ``ndarray``). There is no special class for quantum states\nclass nor is there an abstract ``QuantumCircuit`` class.\nUnitair doesn't directly rely on a circuit model although it\nfully supports circuit-model computation.\n\nManipulations of quantum states naturally take advantage of PyTorch's strengths. \nYou can\n\n- Apply gates and other operations to a batch of states\n- Use gradients to track gate parameters or parameters used to build an initial state\n- Set ``device='cuda'`` to get GPU-acceleration\n- Mix ``unitair`` functions with ``torch.nn`` networks or any other PyTorch functionality\n\n`Documentation for Unitair is now available.\n<https://unitair.readthedocs.io/>`_\n\n\nRule-Breaking is Encouraged\n===========================\nUnitair does not hide state vectors or simulation\ndetails within carefully crafted tools but instead exposes\nstates and operations on states as simple manipulations on PyTorch\n``Tensor`` objects. As a result, there are few \"seatbelts\" preventing users\nfrom manipulating states in unphysical or unrealistic\nways like cloning, state-dependent time evolution, or cheating to\nget a result that we somehow know has to be the case.\n\nBecause Unitair encourages users to \"just get the answer\", Unitair should\nbe regarded as an *emulator* rather than a simulator.\nAs a simple example, rather than applying a Hadamard gate to every\nqubit starting with ``|0...0>``, the best practice is to use\n``unitair.uniform_superposition`` which reads off the state directly.\n\nThis approach has three notable downsides:\n\n#. Unitair does not aim to simulate noise realistically.\n#. Users should be aware that manipulations that look simple with Unitair\n   and PyTorch may be very complex when constructed with realistic gates.\n#. Deployment to hardware or translation to other quantum computing packages\n   is not an intended usage of Unitair.\n   \nOn the other hand, emulation has benefits: researchers can\ntest or develop quantum algorithms with lower runtimes than\nis possible with full simulation, and states can\nbe manipulated in arbitrary ways, whether physically sensible or not.\n\nIntended users\n==============\nUnitair was designed with the goal of helping to bridge the fields\nof quantum computing and machine learning. Anyone with experience in \nPyTorch (or another machine learning library like TensorFlow) \nand basic knowledge of quantum computing should find\n``unitair`` to be very simple. Users that are experts in\nmachine learning or quantum computing but not both\nshould find ``unitair`` helpful to start making a connection\nwith the other discipline.\n\nStates are Tensors\n==================\nThe class for quantum states is ``torch.Tensor`` rather than a new\nquantum state class. For example, the state ``|00>`` is\n\n.. code-block:: python\n\n    import torch  # no need to import unitair yet!\n\n    # Intended state: |00>\n    state = torch.tensor([1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j])\n\nThe four elements of this vector correspond to the computational basis elements\n``|00>, |01>, |10>,`` and ``|11>`` (in that order). Since the\nquantum state can be\nwritten as\n\n.. code-block::\n\n    1 |00> + 0 |01> +  0 |10> + 0 |11>,\n\nthe vector ``[1., 0., 0., 0.]``\nis sensible.\n\nAs another example, ``-i |01>`` is\n\n\n.. code-block:: python\n\n    import torch  # no need to import unitair yet!\n\n    # Intended state: |00>\n    state = torch.tensor([0.+0.j, 0.-1.j, 0.+0.j, 0.+0.j])\n\nBatches of states\n=================\nTo exploit the strengths of PyTorch, manipulations should be batched.\nRather than constructing a tensor with size `(4,)`, we\nmight instead construct a ``Tensor`` with size `(3, 4)`. The `unitair` interpretation\nof such a `Tensor` is that we have three quantum states for two qubits.\nFor example:\n\n.. code-block:: python\n\n    >>> import unitair\n    >>> unitair.rand_state(num_qubits=2, batch_dims=(3,))\n    tensor([[ 0.1958-0.3280j,  0.3178+0.4487j, -0.4322-0.0840j, -0.5906+0.0957j],\n            [ 0.1541+0.4326j,  0.6663-0.0448j, -0.3485-0.0493j, -0.1967-0.4249j],\n            [ 0.2089+0.4304j,  0.3997+0.6920j, -0.1714-0.2164j,  0.1803+0.1543j]])\n\nIn fact, batch dimensions can be more general thant that:\n\n.. code-block:: python\n\n    state_batch = unitair.rand_state(num_qubits=5, batch_dims=(10, 3,))\n\n    >>> state_batch.size()\n    torch.Size([10, 3, 32])\n\n\nIn this case, `state_batch[5, 1]`, is a quantum state for five qubits, as is any other\nselection of the first two indices of ``state_batch``. This is a batch of 30\nstates for five qubits organized into the (10, 3) shape.\n\n\nManipulating quantum states\n===========================\nBecause states are ``torch.Tensor`` objects, you are free to do anything to a\nstate that you might do to a ``torch.Tensor``.  Manipulations need not\nhave anything to do with quantum mechanics. On the other hand, the ``unitair``\npackage includes functions to perform operations that are natrual\nin quantum computing.\n\nApplying Hadamard gates\n^^^^^^^^^^^^^^^^^^^^^^^\n\nWe first apply a Hadamard gate to the initial state ``|0>``:\n\n.. code-block:: python\n\n    from unitair import simulation, gates\n\n    # Initial state: |0>\n    state = unitair.unit_vector(index=0, num_qubits=1)\n    h = gates.hadamard()\n\n    state = simulation.apply_operator(\n        operator=h,\n        qubits=(0,)\n        state=state,\n    )\n\n\n.. code-block:: python\n\n    >>> state\n    tensor([0.7071+0.j, 0.7071+0.j])\n\n\nUnitair can apply gates to batches of quantum states, batches of gates\nto a single state, and batches of gates to batches of states. For example,\nwe can construct a batch consisting of 5 states for one qubit and\nthen apply a Hadamard gate to each of those states in a single call:\n\n.. code-block:: python\n\n    state_batch = unitair.rand_state(num_qubits=1, batch_dims=(5,))\n    h = gates.hadamard()\n\n    state_batch = simulation.apply_operator(\n        operator=h,\n        qubits=(0,)\n        state=state_batch,\n    )\n\n\nThe resulting ``state_batch`` has size `(5, 2)` and, e.g.,\n`state_batch[3]` is the same as if we had applied a Hadamard gate\ndirectly to the index 3 element of the original `state_batch`.\n\n\nMaking a Bell state\n^^^^^^^^^^^^^^^^^^^\nThe Bell state ``(|00> + |11>)/\\sqrt{2}`` is typically constructed by\nstarting with the state ``|00>``, applying a Hadamard gate to the first\nqubit, and then applying a CNOT gate from the first to the second\nqubit. We recommend just writing down this state by hand, but\nthe circuit construction can be done with Unitair as an example:\n\n\n.. code-block:: python\n\n    from unitair import simulation, gates\n\n    # Initial state: |00>\n    state = unitair.unit_vector(index=0, num_qubits=2)\n    h = gates.hadamard()\n    cnot = gates.cnot()\n\n    state = simulation.apply_operator(\n        operator=h,\n        qubits=(0,),\n        state=state,\n    )\n\n    state = simulation.apply_operator(\n        operator=cnot,\n        qubits=(0, 1),\n        state=state,\n    )\n\n.. code-block:: python\n\n    >>> state\n    tensor([0.7071+0.j, 0.0000+0.j, 0.0000+0.j, 0.7071+0.j])\n\n\nAbout Unitair\n=============\nUnitair was written at QC Ware Corp. by Sean Weinberg.\nFabio Sanches envisioned and suggested the project in 2020.\n\nIf you have questions or feedback, or if you would like to contribute to Unitair,\nplease email sean.weinberg@qcware.com.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/qcware/qcware-unitair.git",
    "keywords": "",
    "license": "APACHE LICENSE, VERSION 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unitair",
    "package_url": "https://pypi.org/project/unitair/",
    "platform": null,
    "project_url": "https://pypi.org/project/unitair/",
    "project_urls": {
      "Homepage": "https://github.com/qcware/qcware-unitair.git"
    },
    "release_url": "https://pypi.org/project/unitair/0.3.0/",
    "requires_dist": [
      "torch (>=1.8.1)",
      "decorator (>=4.4.2)",
      "numpy (>=1.21.0)",
      "setuptools (>=53.0.0)",
      "hypothesis (>=6.14.0) ; extra == 'test'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "PyTorch-based quantum computing",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13587462,
  "releases": {
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f72c145566a1591e8c9a935f1a53a9d285b26ce52d3e95771ea8b001f6df2407",
          "md5": "c7c207695793cd673b9652a0d0ff1846",
          "sha256": "8a343a32b66ed13f6a67bc070a905c4ffc285a85243a0e4f3f766008e08dfd31"
        },
        "downloads": -1,
        "filename": "unitair-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7c207695793cd673b9652a0d0ff1846",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27347,
        "upload_time": "2022-03-25T19:55:02",
        "upload_time_iso_8601": "2022-03-25T19:55:02.458370Z",
        "url": "https://files.pythonhosted.org/packages/f7/2c/145566a1591e8c9a935f1a53a9d285b26ce52d3e95771ea8b001f6df2407/unitair-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa02ad7bad7a6da38dcc3ec4bac53a63d0f0dc7408b61e54ce7ad92985ea1575",
          "md5": "25b8f57614dad936a0795a6ec46291f6",
          "sha256": "6209b1b1b85b8b4d02ceb7bfffcbd102574e9d261756a3a179aa879d481bd1ae"
        },
        "downloads": -1,
        "filename": "unitair-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "25b8f57614dad936a0795a6ec46291f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31024,
        "upload_time": "2022-03-25T19:55:04",
        "upload_time_iso_8601": "2022-03-25T19:55:04.582370Z",
        "url": "https://files.pythonhosted.org/packages/aa/02/ad7bad7a6da38dcc3ec4bac53a63d0f0dc7408b61e54ce7ad92985ea1575/unitair-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dccc9ce71295a3be3ad88ebfdb134e8b4f499ae8ec5496c68cbd41fe5b16b1f",
          "md5": "46e203727ab68e9d4743fa8ac8fd01a3",
          "sha256": "32ae69fd194552729595b186fde8db203711f3d198d2b11648d5a73a21f9f742"
        },
        "downloads": -1,
        "filename": "unitair-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46e203727ab68e9d4743fa8ac8fd01a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28715,
        "upload_time": "2022-04-02T00:48:26",
        "upload_time_iso_8601": "2022-04-02T00:48:26.069166Z",
        "url": "https://files.pythonhosted.org/packages/6d/cc/c9ce71295a3be3ad88ebfdb134e8b4f499ae8ec5496c68cbd41fe5b16b1f/unitair-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1d78b31779e6a5f31abe10a6030aa59aae4bfd2b0a115da448742320054fb19",
          "md5": "fe8abbf1239f77057e94a19ba6ede66d",
          "sha256": "ab0bf48962bc712d3af9ad18c4aedf6f15bf96cf833598ac1d15b193194114cc"
        },
        "downloads": -1,
        "filename": "unitair-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "fe8abbf1239f77057e94a19ba6ede66d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32578,
        "upload_time": "2022-04-02T00:48:27",
        "upload_time_iso_8601": "2022-04-02T00:48:27.870343Z",
        "url": "https://files.pythonhosted.org/packages/a1/d7/8b31779e6a5f31abe10a6030aa59aae4bfd2b0a115da448742320054fb19/unitair-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1753075bfbb7e194349dce6aea5653c02ae607800d3e15a79c386afaf1ef24c",
          "md5": "9b620f064be7b3d0082659ca48c13a20",
          "sha256": "7874c13b3e6367b29b4933884b19bd04bbb13709c78d722d6e4906c5c4a88d70"
        },
        "downloads": -1,
        "filename": "unitair-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b620f064be7b3d0082659ca48c13a20",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28982,
        "upload_time": "2022-04-22T07:26:56",
        "upload_time_iso_8601": "2022-04-22T07:26:56.714504Z",
        "url": "https://files.pythonhosted.org/packages/e1/75/3075bfbb7e194349dce6aea5653c02ae607800d3e15a79c386afaf1ef24c/unitair-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6476ff93f76beb87949cc04da9d2f927b9379f4569da0ca68b279c2cef3aa76",
          "md5": "f2a6bba9b4444f2cfd4036cb78c326c8",
          "sha256": "0cda327c33ae37eb9baa9d4a79487910c8f9a81b6511ceeefe27016e13a55500"
        },
        "downloads": -1,
        "filename": "unitair-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f2a6bba9b4444f2cfd4036cb78c326c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32911,
        "upload_time": "2022-04-22T07:26:58",
        "upload_time_iso_8601": "2022-04-22T07:26:58.800260Z",
        "url": "https://files.pythonhosted.org/packages/f6/47/6ff93f76beb87949cc04da9d2f927b9379f4569da0ca68b279c2cef3aa76/unitair-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1753075bfbb7e194349dce6aea5653c02ae607800d3e15a79c386afaf1ef24c",
        "md5": "9b620f064be7b3d0082659ca48c13a20",
        "sha256": "7874c13b3e6367b29b4933884b19bd04bbb13709c78d722d6e4906c5c4a88d70"
      },
      "downloads": -1,
      "filename": "unitair-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b620f064be7b3d0082659ca48c13a20",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 28982,
      "upload_time": "2022-04-22T07:26:56",
      "upload_time_iso_8601": "2022-04-22T07:26:56.714504Z",
      "url": "https://files.pythonhosted.org/packages/e1/75/3075bfbb7e194349dce6aea5653c02ae607800d3e15a79c386afaf1ef24c/unitair-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6476ff93f76beb87949cc04da9d2f927b9379f4569da0ca68b279c2cef3aa76",
        "md5": "f2a6bba9b4444f2cfd4036cb78c326c8",
        "sha256": "0cda327c33ae37eb9baa9d4a79487910c8f9a81b6511ceeefe27016e13a55500"
      },
      "downloads": -1,
      "filename": "unitair-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f2a6bba9b4444f2cfd4036cb78c326c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 32911,
      "upload_time": "2022-04-22T07:26:58",
      "upload_time_iso_8601": "2022-04-22T07:26:58.800260Z",
      "url": "https://files.pythonhosted.org/packages/f6/47/6ff93f76beb87949cc04da9d2f927b9379f4569da0ca68b279c2cef3aa76/unitair-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}