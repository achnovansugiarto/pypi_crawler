{
  "info": {
    "author": "Mohsen Banan",
    "author_email": "libre@mohsen.1.banan.byname.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=====================\nunisos.wsfClassicCars\n=====================\n\n.. contents::\n   :depth: 3\n..\n\nOverview\n========\n\nunisos.wsfClassicCars: Classic Cars App Based On WSF (Web Scraping\nFramework)\n\nSupport\n=======\n\n| For support, criticism, comments and questions; please contact the\n  author/maintainer\n| `Mohsen Banan <http://mohsen.1.banan.byname.net>`__ at:\n  http://mohsen.1.banan.byname.net/contact\n\nDocumentation\n=============\n\nThis unisos.wsfClassicCars module is usage example of unisos.wsf.\n\nFor details of Web Scraping Framework (wsf), see that module’s\ndocumentation.\n\n| WSF is a general purpose scraping engine module. unisos.wsfClassicCars\n  applies to scraping:\n| https://www.oldclassiccar.co.uk/forum/phpbb/phpBB2/viewtopic.php?t=12591\n  in specific.\n\nInstallation\n============\n\nThis module is provided as a tar file.\n\nGo to the wsfClassicCars/py3 directory.\n\n::\n\n   Run: ./setup.py sdist\n\n::\n\n   Run: pip install --no-cache-dir ./dist/unisos.wsfClassicCars-0.1.tar.gz\n\n4 file will be created in your venv/bin directory. These are copies of\nthe ones in the ./bin directory.\n\nUsage\n=====\n\nIn wsfClassicCars/py3, the following files control and run the\nwsfClassicCars scraper.\n\n./bin/classicCarsScraperParams.py:\n   This is the configuration file for this App. WSF uses python function\n   invocation as the configuration syntax. Even for those unfamiliar\n   with Python, the syntax is intuitive. You can modify these parameters\n   to your liking.\n\n./bin/scraperClassicCars.py:\n   This is the class that implements the concrete class that scrapes the\n   inputs.\n\n   The last invocation in that file:\n\n   ::\n\n       wsf_config.scrapingProcessor(\n          scraperClass=ClassicCars,\n      )\n\n   passes:\n\n   ::\n\n      class ClassicCars(wsf_scraperMultipage.ScraperMultipage):\n\n   to the config machinery.\n\n./bin/scrapeExample.py:\n   This is example of how to run the scraper in full, minimally.\n\n   The entire relevant code is:\n\n   ::\n\n      import classicCarsScraperParams\n      import scraperClassicCars\n\n      from unisos.wsf import wsf_parallelProc\n\n      if __name__ == '__main__':\n          wsf_parallelProc.dispatchWorkersUsingParams()\n\n   The first two imports bring over the concrete class and set\n   configuration parameters.\n\n   The main entry to wsf is\n   wsf_parallelProc.dispatchWorkersUsingParams()\n\n./bin/icmClassicCarsWebScraper.py:\n   This is the preferred way of running this App on the command line.\n\n   Running the ICM (Interactive Command Module) by itself as:\n\n   ::\n\n      icmClassicCarsWebScraper.py\n\n   Gives you a list of commands that you can pick and run.\n\n   Choose:\n\n   ::\n\n       icmClassicCarsWebScraper.py  --load classicCarsScraperParams.py\n      --load scraperClassicCars.py  -i scrape\n\n   (run all of it in one line.)\n\n   Parameters and the concrete class are first loaded, then the “scrape”\n   command is executed.\n\n   For debugging purposes, if needed, you can enable verbosity and\n   callTracking with:\n\n   ::\n\n      icmClassicCarsWebScraper.py -v 1 --callTrackings monitor+ --callTrackings invoke+\n       --load classicCarsScraperParams.py --load scraperClassicCars.py  -i scrape\n\n   (run all of it in one line.)\n\nContext And History\n===================\n\nI, Mohsen BANAN, have put togther this as a sample of my python code.\n\n| It is about writing a scraper for\n| https://www.oldclassiccar.co.uk/forum/phpbb/phpBB2/viewtopic.php?t=12591\n\nI could use a web scraper development framework for a project that I was\ndoing and decided to make this part of it public.\n\nHere is the process that I went through to put this together in 2020.\n\nInitial Web Searches\n====================\n\nI first searched the web to see if this, or something similar, has been\ndone before. I found the following relevant pointers:\n\n-  https://github.com/nneibaue/yukon_cornelius\n\n   This is a scraper for oldclassiccar.co.uk.\n\n   The design and modeling quality is not great. But the code and some\n   the design is re-usable and I have used it. Later, I’ll revisit\n   these.\n\n-  https://stackoverflow.com/questions/56211202/attributeerror-str-object-has-no-attribute-keys-when-trying-to-use-writerow\n\n   Nothing useful there.\n\n-  PyPi Web Scraping Engines/Tools/Packages.\n\n   There are several there. But I did not find any that I liked.\n\nThe “Web Scraping Development Framework” Model\n==============================================\n\nI decided to build a web scraping development framework and then\nimmediately use it for my own projects and also have it scrape\noldclassiccar.co.uk.\n\nVery much by choice, I avoided calling it a “web scraping engine”. The\ndomain of web scraping is too broad and too diverse to be reasonably\ncodified as an “engine”.\n\nUsing web scraping development framework (wsdf), a developer can quickly\ncustomize the specifics of a particular site’s scraping. The common\naspects of web scraping go into wsdf.\n\nAbout unisos.wsf\n================\n\nunisos.wsf is a pip package included in this repo.\n\nIt is a generalized scraping framework that can be considered a public\nresource. There is nothing in wsf which is specific to\noldclassiccar.co.uk or any other site in there.\n\nIn this case, unisos is just a namespace to avoid name conflicts.\n\nAbout unisos.wsfClassicCars\n===========================\n\nunisos.wsfClassicCars is also a pip package. unisos.wsfClassicCars uses\nunisos.wsf.\n\nThe code in unisos.wsfClassicCars is very minimal.\n\nConfiguration file, the concrete ClassicCars class and the executable\nare all in the bin directory.\n\nAbout Contents Of This Repo\n===========================\n\nAfter untar-ing, you will have two directories.\n\n-  wsf\n\n-  wsfClassicCars\n\nThere are two files that you need to read.\n\n#. wsfClassicCars/py3/README.pdf\n\n#. wsf/py3/README.pdf\n\n.. _installation-1:\n\nInstallation\n============\n\nI have tested these with Python 3.9. Both packages will likely work fine\nwith earlier Python 3.x release.\n\nCreate a fresh virtual environments. Install the two packages by\nfollowing these instructions:\n\n#. Go to wsf/py3. Follow the instructions in READEME.pdf Section 4.2.\n\n#. Go to wsfClassicCars/py3. Follow the instructions in READEME.pdf\n   Section 4.\n\nThe “requires” section of wsf/py3/setup.py enumerates all other package\ndependencies.\n\nA pip list after the installation should produce something like:\n\n::\n\n   Package               Version\n   --------------------- ---------\n   beautifulsoup4        4.10.0\n   certifi               2021.10.8\n   charset-normalizer    2.0.7\n   enum34                1.1.10\n   idna                  3.3\n   lxml                  4.6.4\n   pip                   21.3.1\n   requests              2.26.0\n   setuptools            58.3.0\n   soupsieve             2.3.1\n   unisos.icm            0.25\n   unisos.ucf            0.15\n   unisos.wsf            0.1\n   unisos.wsfClassicCars 0.1\n   urllib3               1.26.7\n   wheel                 0.37.0\n\nAbout unisos.icm\n================\n\nI want Web Scraping Application (WS-Apps) to function as plug-able\nmodules on the command line interface.\n\nunisos.wsfClassicCars is a WS-App.\n\nICM (Interactive Command Modules) is a pip package that I have\ndeveloped. It is similar to “click” but it also supports “–load\nfileName”. fileName can be any python code. This is how wsfClassicCars\nbecomes a plug-able command line module.\n\nAlso, the flexibility that ICM provides allows for regression testing of\nwhole or parts of the code. This renders the usual traditions of unit\ntesting obsolete.\n\nAbout COMEEGA And Dynamic Blocks\n================================\n\nParts of my code are written as COMEEGA. COMEEGA stands for\n“Collaborative Org-Mode Enhanced Emacs Generalized Authorship”. Think of\nit as inverse of Literate Programming. Where the code is also a\ndocument. You can switch between code mode and document mode by\nswitching between org-mode and python-mode.\n\nWithout emacs and org-mode, such code is not pleasant. I wont use\nCOMEEGA on other people’s code.\n\nDynamic Blocks are a feature of org-mode. What is between +BEGIN: and\n+END: is controlled with lisp code and will be overwritten if edited.\n\nThis allows me to add visible macro capabilities to python.\n\nBoth COMEEGA and Dynamic Blocks are mostly used in\nicmClassicCarsWebScraper.py. If you view that as un-pleasant, I suggest\nthat you just consider it as awareness of other powerful ways of doing\nthings ...\n\nDesign And Implementation Considerations\n========================================\n\nI did all of this on a rush basis. So, the code is weak in terms of\nerror handling and robustness. But, there is a proper starting point in\nplace and over time it can improve and expand.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "http://www.by-star.net/PLPC/180047",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.by-star.net/PLPC/180047",
    "keywords": "",
    "license": "AGPL",
    "maintainer": "Mohsen Banan",
    "maintainer_email": "libre@mohsen.1.banan.byname.net",
    "name": "unisos.wsfClassicCars",
    "package_url": "https://pypi.org/project/unisos.wsfClassicCars/",
    "platform": null,
    "project_url": "https://pypi.org/project/unisos.wsfClassicCars/",
    "project_urls": {
      "Download": "http://www.by-star.net/PLPC/180047",
      "Homepage": "http://www.by-star.net/PLPC/180047"
    },
    "release_url": "https://pypi.org/project/unisos.wsfClassicCars/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "unisos.wsfClassicCars: Classic Cars App Based On WSF (Web Scraping Framework)",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16898489,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2eb5fcecfb5636e5dc2bcab3e11ba2dc9def586c5ca5f74a59f57f07e0ebdace",
          "md5": "4b3c333a00c48537733bfe98529ce1da",
          "sha256": "e4b555de2f395d0c5f061a8b2839c35fdaaf18a76c6d054b5d0539ae92135e2c"
        },
        "downloads": -1,
        "filename": "unisos.wsfClassicCars-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4b3c333a00c48537733bfe98529ce1da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25864,
        "upload_time": "2023-02-17T04:20:52",
        "upload_time_iso_8601": "2023-02-17T04:20:52.710874Z",
        "url": "https://files.pythonhosted.org/packages/2e/b5/fcecfb5636e5dc2bcab3e11ba2dc9def586c5ca5f74a59f57f07e0ebdace/unisos.wsfClassicCars-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2eb5fcecfb5636e5dc2bcab3e11ba2dc9def586c5ca5f74a59f57f07e0ebdace",
        "md5": "4b3c333a00c48537733bfe98529ce1da",
        "sha256": "e4b555de2f395d0c5f061a8b2839c35fdaaf18a76c6d054b5d0539ae92135e2c"
      },
      "downloads": -1,
      "filename": "unisos.wsfClassicCars-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4b3c333a00c48537733bfe98529ce1da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25864,
      "upload_time": "2023-02-17T04:20:52",
      "upload_time_iso_8601": "2023-02-17T04:20:52.710874Z",
      "url": "https://files.pythonhosted.org/packages/2e/b5/fcecfb5636e5dc2bcab3e11ba2dc9def586c5ca5f74a59f57f07e0ebdace/unisos.wsfClassicCars-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}