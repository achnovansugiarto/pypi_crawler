{
  "info": {
    "author": "Yu-Lun Chiang",
    "author_email": "chiangyulun0914@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "[![PyPI - Python](https://img.shields.io/badge/python-3.6%20|%203.7%20|%203.8-blue.svg)](https://pypi.org/project/KeyExtractor/)\n[![PyPI - License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/allenyummy/KeyExtractor/blob/main/LICENSE)\n[![PyPI - PyPi](https://img.shields.io/pypi/v/KeyExtractor)](https://pypi.org/project/KeyExtractor/)\n<!-- [![Build](https://img.shields.io/github/workflow/status/MaartenGr/keyBERT/Code%20Checks/master)](https://pypi.org/project/keybert/) -->\n<!-- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1OxpgwKqSzODtO3vS7Xe1nEmZMCAIMckX?usp=sharing) -->\n\n# KeyExtractor\nKeyExtractor 是一個十分簡單且好用的關鍵字詞抽取器，該模組透過 Transformer-based 模型，以零訓練的方式，抽取中文文件之關鍵字詞，無需標記資料與GPU資源即可操作。\n\nKeyExtractor performs keyword extraction for chinese documents with state-of-the-art transformer models without training and labeled data.\n\n<a name=\"toc\"/></a>\n## Table of Contents\n* [About the Project](#about)\n* [Getting Started](#gettingstarted)\n    * [Installation](#installation)\n    * [Example](#example)\n    * [Basic Usage](#usage)\n    * [Tokenizer](#tokenizer)\n    * [Embeddings](#embeddings)\n    * [Logger](#logger)\n\n<a name=\"about\"/></a>\n## About\n[Go Back](#toc)\n\n在企業即將滿第一個年頭，感受到的文化與學術界差異甚大，比如說在中研院時，大家追求的是更好更完善的模型或演算法，為了能夠與經典論文上的模型或演算法較勁，大家無不使用相同、公開且乾淨的標記資料集，並實作自己的模型，跑出各種實驗數據，證明模型之間的優劣勝敗。有趣的是，彼此差距往往在不到 1% 之內，不難想像為何那麼難投稿上頂尖研討會了吧！\n\n而在企業裡，每個案子有各自獨特的梳理邏輯，與其相應的資料集，而且多半是不完整且骯髒的資料，甚至，這些資料連標記都沒有，導致在導入 AI/NLP 技術時，路途困難重重，大概在清理資料階段、或是人工標記資料階段時就陣亡了，遑論使用最新穎的技術。\n\n因為上述現象，企業在敏捷開發的狀態下，時常使用 Rule-Based 的方式解決，久而久之，幾乎很少導入新穎的技術，接著一個案子一個案子就這麼過去了。身為初入社會的我來說，不太習慣這樣的做法，但是若要有所突破，我仍然得面臨資料集一樣骯髒、一樣沒有標記、一樣不完整，那我該怎麼辦呢？\n\n這是我接手的第二個案子：新聞閱讀，無標記資料。我將此案子其中一部份拉出來作成公開套件：新聞關鍵字詞抽取器，給定一篇中文新聞，經由模組，生出若干關鍵字。\n\n2018年末，預訓練與微調機制擄獲人心，便一路盛行至今。為了撇開對標記資料的依賴，我撇開微調機制，僅採用預訓練機制。預訓練模型使用中研院ckip實驗室的模型，並將其當作詞向量抽取器，接著使用 Cosine Similarity 去一一比較文本與各個候選字詞的向量夾角，作為判斷是否為關鍵字詞的依據。\n\n上述的想法源自於 [KeyBERT](https://github.com/MaartenGr/KeyBERT)，但是因為它沒有支援中文和中文斷詞，才讓我想自己動手做一個套件出來。\n\n<a name=\"gettingstarted\"></a>\n## Getting Started\n[Go Back](#toc)\n\n<a name=\"installation\"></a>\n### Installation\n\nPrepare virtual environment by conda.\n```\n$ conda create --name [env_name] python=3.8\n$ conda activate [env_name]\n```\n\nInstallation can be done using [pypi KeyExtractor](https://pypi.org/project/KeyExtractor/).\n```\n$ pip install KeyExtractor\n```\n\n<a name=\"example\"/></a>\n### Example\n```\n$ PYTHONPATH=./::./src python example/example.py\n```\n\n<a name=\"usage\"/></a>\n### Basic Usage\n[Go Back](#toc)\n\n* Single Document\n\nInput text should be tokenized as properly as possible before extracting keywords from it.\n```\nfrom KeyExtractor.utils import tokenization as tk\n\ntokenizer = tk.TokenizerFactory(name=\"ckip-transformers-albert-tiny\")\ntext = \"\"\"\n    監督學習是機器學習任務，它學習基於範例輸入-範例輸出組合，將輸入映射到輸出的函數。\n    [1]它從標記的訓練數據（由一組訓練範例組成）中推斷出函數。\n    [2]在監督學習中，每個範例都是一對，由輸入對象（通常是矢量）和期望的輸出值（也稱為監督信號）組成。\n    監督學習演算法分析訓練數據並產生一個推斷函數，該函數可用於映射新範例。\n    最佳方案將使演算法能夠正確確定未見實例的類標籤。\n    這就要求學習算法以“合理”的方式將訓練數據推廣到看不見的情況（見歸納偏差）。\n\"\"\"\ntokenized_text = tokenizer.tokenize(text_list)[0]  ## Return nested list of tokenized results\n```\n\nExtract Keywords from document tokenized before.\n\n```\nfrom KeyExtractor.core import KeyExtractor\nke = KeyExtractor(embedding_method_or_model=\"ckiplab/bert-base-chinese\")\nkeywords = ke.extract_keywords(tokenized_text, n_gram=1, top_n=5)\n```\n\nReturn keywords as a list of struct.KeyStruct.\n\n```\n>>> [print(key) for key in keywords]\n[ID]: 29\n[KEYWORD]: ['學習']\n[SCORE]: 0.7103\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 33\n[KEYWORD]: ['對象']\n[SCORE]: 0.6965\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 31\n[KEYWORD]: ['範例']\n[SCORE]: 0.6923\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 28\n[KEYWORD]: ['監督']\n[SCORE]: 0.6849\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 46\n[KEYWORD]: ['分析']\n[SCORE]: 0.6834\n[EMBEDDINGS]: torch.Size([768])\n```\n\nN-gram could be 2 or 3 or more.\n```\nkeywords = ke.extract_keywords(tokenized_text, n_gram=2, top_n=5)\n\n>>> [print(key) for key in keywords]\n[ID]: 30\n[KEYWORD]: ['中', '範例']\n[SCORE]: 0.8059\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 31\n[KEYWORD]: ['範例', '輸入']\n[SCORE]: 0.8006\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 28\n[KEYWORD]: ['監督', '學習']\n[SCORE]: 0.7888\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 32\n[KEYWORD]: ['輸入', '對象']\n[SCORE]: 0.7825\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 29\n[KEYWORD]: ['學習', '中']\n[SCORE]: 0.7816\n[EMBEDDINGS]: torch.Size([768])\n```\n\nIt could add custom stopwords that you think they must not be keyword candidates. They would be removed in the preprocessing stage.\n\n```\nkeywords = ke.extract_keywords(tokenized_text, stopwords=[\"中\", \"對象\"], n_gram=2, top_n=5)\n\n>>> [print(key) for key in keywords]\n[ID]: 28\n[KEYWORD]: ['學習', '範例']\n[SCORE]: 0.8039\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 29\n[KEYWORD]: ['範例', '輸入']\n[SCORE]: 0.8006\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 27\n[KEYWORD]: ['監督', '學習']\n[SCORE]: 0.7888\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 24\n[KEYWORD]: ['推斷出', '函數']\n[SCORE]: 0.7738\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 18\n[KEYWORD]: ['訓練', '數據']\n[SCORE]: 0.7677\n[EMBEDDINGS]: torch.Size([768])\n```\n\nAlso, we have default zh-cn/zh-tw stopwords (`load_default` is set to `True`). You can check them in the `utils/stopwords/zh/`. If you don't want them as stopwords, just simply set `load_default` to `False`.\n\n* Multiple Documents\n\nYou can feel safe to send multiple documents into tokenizer. They can process multiple documents more efficiently than processing single document at one time.\n\n```\nfrom KeyExtractor.utils import tokenization as tk\n\ntokenizer = tk.TokenizerFactory(name=\"ckip-transformers-albert-tiny\")\ntext = \"\"\"\n    監督學習是機器學習任務，它學習基於範例輸入-範例輸出組合，將輸入映射到輸出的函數。\n    [1]它從標記的訓練數據（由一組訓練範例組成）中推斷出函數。\n    [2]在監督學習中，每個範例都是一對，由輸入對象（通常是矢量）和期望的輸出值（也稱為監督信號）組成。\n    監督學習演算法分析訓練數據並產生一個推斷函數，該函數可用於映射新範例。\n    最佳方案將使演算法能夠正確確定未見實例的類標籤。\n    這就要求學習算法以“合理”的方式將訓練數據推廣到看不見的情況（見歸納偏差）。\n\"\"\"\ntext2 = \"詐欺犯吳朱傳甫獲釋又和同夥林志成假冒檢警人員，向新營市黃姓婦人詐財一百八十萬元，事後黃婦驚覺上當報警處理，匯寄的帳戶被列警示帳戶，凍結資金往返；四日兩嫌再冒名要黃婦領五十萬現金交付，被埋伏的警員當場揪住。\"\n\ntext_list = [text1, text2]\ntokenized_text_list = tokenizer.tokenize(text_list)  ## Return nested list\n\nfor tokenized_text in tokenized_text_list:\n    keywords = ke.extract_keywords(tokenized_text, n_gram=2, top_n=5)\n    for key in keywords:\n        print(key)\n```\n\n[Go Back](#toc)\n\n<a name=\"tokenizer\"/></a>\n### Tokenizer\n\nI use as ckip-transformers as my backbone tokenizer. Please check details from this [repo](https://github.com/ckiplab/ckip-transformers).\n\n<a name=\"embeddings\"/></a>\n### Embeddings\n\nI use flair framework to get word and document embeddings from `ckiplab/bert-base-chinese`. Their model could be seen in huggingface model hub [here](https://huggingface.co/ckiplab/bert-base-chinese). Feel free to get your own pretrained model or another one.\n\n<a name=\"logger\"/></a>\n### Logger\n\nIf you want to check details of operation, you can set up logger.level as logging.DEBUG. \n\n**Github Repos**:  \n* https://github.com/MaartenGr/KeyBERT\n* https://github.com/flairNLP/flair\n* https://github.com/ckiplab/ckip-transformers\n\n[Go Back](#toc)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/allenyummy/KeyExtractor/archive/refs/tags/0.1.2a1.dev1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/allenyummy/KeyExtractor.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "KeyExtractor",
    "package_url": "https://pypi.org/project/KeyExtractor/",
    "platform": "",
    "project_url": "https://pypi.org/project/KeyExtractor/",
    "project_urls": {
      "Download": "https://github.com/allenyummy/KeyExtractor/archive/refs/tags/0.1.2a1.dev1.tar.gz",
      "Homepage": "https://github.com/allenyummy/KeyExtractor.git"
    },
    "release_url": "https://pypi.org/project/KeyExtractor/0.1.2a1.dev1/",
    "requires_dist": [
      "torch (==1.7.1)",
      "flair (==0.8.0post1)",
      "transformers (==4.5.0)",
      "ckip-transformers (==0.2.3)",
      "spacy (==3.0.6) ; extra == 'spa'",
      "spacy-transformers (==1.0.2) ; extra == 'spa'",
      "pytest (==6.2.3) ; extra == 'test'",
      "pytest-mock (==3.5.1) ; extra == 'test'",
      "pytest-cov (==2.11.1) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "KeyExtractor performs keyword extraction for chinese documents with state-of-the-art transformer models.",
    "version": "0.1.2a1.dev1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10413602,
  "releases": {
    "0.1.1.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1696dbfd86ba98984e72be13b5fcf30b84c080edbd1960515f809418fa84117f",
          "md5": "31d1ce901c178e29cd3804eb2037b120",
          "sha256": "e70e606195ca31e77239b85cff1ed60b72af72e211bcc88f602689463c1c0436"
        },
        "downloads": -1,
        "filename": "KeyExtractor-0.1.1.dev2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31d1ce901c178e29cd3804eb2037b120",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34761,
        "upload_time": "2021-05-14T13:46:35",
        "upload_time_iso_8601": "2021-05-14T13:46:35.487393Z",
        "url": "https://files.pythonhosted.org/packages/16/96/dbfd86ba98984e72be13b5fcf30b84c080edbd1960515f809418fa84117f/KeyExtractor-0.1.1.dev2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "953b44553d38e129c4bf7480ea3c19a23ad3996f680e3f744590f8e39b995f55",
          "md5": "4d0b110a169a72bc76d04ab1ec412b37",
          "sha256": "43f2a28c54a52910183220bb00d0f45dec7f3e987e34c11c1c3bed04ff710945"
        },
        "downloads": -1,
        "filename": "KeyExtractor-0.1.1.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "4d0b110a169a72bc76d04ab1ec412b37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31254,
        "upload_time": "2021-05-14T13:46:38",
        "upload_time_iso_8601": "2021-05-14T13:46:38.165378Z",
        "url": "https://files.pythonhosted.org/packages/95/3b/44553d38e129c4bf7480ea3c19a23ad3996f680e3f744590f8e39b995f55/KeyExtractor-0.1.1.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1.dev3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2eb777586d775df68e0ddc8990c7443b5ddec45afbb3e11c334f70e0599a7dd2",
          "md5": "796fed284914c0417d47a8d0d2992876",
          "sha256": "fe23597e0d2a980656469e546d69908d2a68332de4619b088428d208cde9e1bc"
        },
        "downloads": -1,
        "filename": "KeyExtractor-0.1.1.dev3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "796fed284914c0417d47a8d0d2992876",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34882,
        "upload_time": "2021-05-17T02:03:33",
        "upload_time_iso_8601": "2021-05-17T02:03:33.883131Z",
        "url": "https://files.pythonhosted.org/packages/2e/b7/77586d775df68e0ddc8990c7443b5ddec45afbb3e11c334f70e0599a7dd2/KeyExtractor-0.1.1.dev3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec14e27dfe5ba4cd1607abca02f38736c3dad5f7ed89f8eb8a81397a16a20c0c",
          "md5": "71f62558390276a473fba308b963054b",
          "sha256": "10eeab190d13da6fef5b227e365b203eca83cb00d8f74e4c720b6526483eaa97"
        },
        "downloads": -1,
        "filename": "KeyExtractor-0.1.1.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "71f62558390276a473fba308b963054b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31505,
        "upload_time": "2021-05-17T02:03:36",
        "upload_time_iso_8601": "2021-05-17T02:03:36.178066Z",
        "url": "https://files.pythonhosted.org/packages/ec/14/e27dfe5ba4cd1607abca02f38736c3dad5f7ed89f8eb8a81397a16a20c0c/KeyExtractor-0.1.1.dev3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2a1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cccc91aa71667ff2a5b1c22f7fc542f952f8232dd65c744782a6619c87ef5454",
          "md5": "07d0d1edae43c662c74a41e1a7db5deb",
          "sha256": "f031afd03980af840ff3bca17f6cb43bf0cc34035d554b38c38a11207cfd2445"
        },
        "downloads": -1,
        "filename": "KeyExtractor-0.1.2a1.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07d0d1edae43c662c74a41e1a7db5deb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36377,
        "upload_time": "2021-05-20T07:32:04",
        "upload_time_iso_8601": "2021-05-20T07:32:04.182402Z",
        "url": "https://files.pythonhosted.org/packages/cc/cc/91aa71667ff2a5b1c22f7fc542f952f8232dd65c744782a6619c87ef5454/KeyExtractor-0.1.2a1.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "916430fad0fefc1e9fd074cd489ce221cd739c03780867b756e6734e941e2f0b",
          "md5": "80c9e7a776b0b2698f601e416983b37c",
          "sha256": "451f19ceac375d408d2b3aa3df7a86dcfcff314f1580b40f3124c54270f02e41"
        },
        "downloads": -1,
        "filename": "KeyExtractor-0.1.2a1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "80c9e7a776b0b2698f601e416983b37c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32874,
        "upload_time": "2021-05-20T07:32:06",
        "upload_time_iso_8601": "2021-05-20T07:32:06.718525Z",
        "url": "https://files.pythonhosted.org/packages/91/64/30fad0fefc1e9fd074cd489ce221cd739c03780867b756e6734e941e2f0b/KeyExtractor-0.1.2a1.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cccc91aa71667ff2a5b1c22f7fc542f952f8232dd65c744782a6619c87ef5454",
        "md5": "07d0d1edae43c662c74a41e1a7db5deb",
        "sha256": "f031afd03980af840ff3bca17f6cb43bf0cc34035d554b38c38a11207cfd2445"
      },
      "downloads": -1,
      "filename": "KeyExtractor-0.1.2a1.dev1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "07d0d1edae43c662c74a41e1a7db5deb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 36377,
      "upload_time": "2021-05-20T07:32:04",
      "upload_time_iso_8601": "2021-05-20T07:32:04.182402Z",
      "url": "https://files.pythonhosted.org/packages/cc/cc/91aa71667ff2a5b1c22f7fc542f952f8232dd65c744782a6619c87ef5454/KeyExtractor-0.1.2a1.dev1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "916430fad0fefc1e9fd074cd489ce221cd739c03780867b756e6734e941e2f0b",
        "md5": "80c9e7a776b0b2698f601e416983b37c",
        "sha256": "451f19ceac375d408d2b3aa3df7a86dcfcff314f1580b40f3124c54270f02e41"
      },
      "downloads": -1,
      "filename": "KeyExtractor-0.1.2a1.dev1.tar.gz",
      "has_sig": false,
      "md5_digest": "80c9e7a776b0b2698f601e416983b37c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32874,
      "upload_time": "2021-05-20T07:32:06",
      "upload_time_iso_8601": "2021-05-20T07:32:06.718525Z",
      "url": "https://files.pythonhosted.org/packages/91/64/30fad0fefc1e9fd074cd489ce221cd739c03780867b756e6734e941e2f0b/KeyExtractor-0.1.2a1.dev1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}