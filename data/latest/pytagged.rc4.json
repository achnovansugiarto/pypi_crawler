{
  "info": {
    "author": "1Karus",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "pytagged: Auto Comment CLI\n===============================\n![GitHub Workflow Status](https://img.shields.io/github/workflow/status/ntn9995/pytagged/ci-workflow?style=flat-square)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytagged?style=flat-square)\n![PyPI](https://img.shields.io/pypi/v/pytagged?color=blue&style=flat-square)\n\n## What is it?\npytagged is a simple CLI utlity written in python that helps you comment out \"tagged\" code. For a simple example, this might be a common pattern in your code.\n```python\ndef production_code():\n    while True:\n        expensive_debug_code()  # debug\n        prod_code()\n```\n\nWhile this fine for most cases, it's a wasted instruction/call every iteration of the loop,\nand this can get expensive fast. With pytagged you can do this `pytag production.py -t debug`, and the above code would become:\n```python\ndef production_code():\n    while True:\n        # expensive_debug_code()  # debug\n        prod_code()\n```\n\nFairly straight forward, just comment out lines that end with a \"tag\", in this case:\n'# debug'. pytagged can also do this with \"tagged blocks\", turning this:\n\n```python\ndef production_code():\n    while True:\n        # block: debug\n        expensive_debug_code_1()\n        expensive_debug_code_2()\n        ...\n        expensive_debug_code_n()\n        # end\n        prod_code()\n```\n\nInto this:\n\n```python\ndef production_code():\n    while True:\n        # block: debug\n        # expensive_debug_code_1()\n        # expensive_debug_code_2()\n        # ...\n        # expensive_debug_code_n()\n        # end\n        prod_code()\n```\n\nWhile these example are fairly trivial, pytagged is flexible and lets you define your own \"tags\" to support more complex use cases.\n\n\n## Usage & example\n\n### Installation\n\nSimply use: `pip install pytagged`, or you can clone this directory and install pytagged directly by running `setup.py`.\n\nNote that the source code (dev version) is a little different from the pypi distribution. Functionally, they're the same, the dev version just prints out more stuffs for my debugging purposes.\n\n### Multiple files\npytagged accepts its first argument as a path, if the path is a directory, it recursively\nscans for all '.py' files within that directory (and the subdirectories). By default, pytagged works on the cwd. So if your project looks like this:\n```\n.\n├── requirements.txt\n├── src\n│   ├── __init__.py\n│   └── main.py\n└── test\n    ├── test.dat\n    └── test_main.py\n```\n\nRunning `pytag -t debug` will affect the .py files in `./src/` and in `./test`.\n\n### Multiple tags\nPytaggd accepts multiple tags. You just need to specify them using the -t flag. For example, running `pytag ./hello.py -t debug skip slow` on a file like this.\n\n```python\nif __name__ == \"__main__\":\n    print(\"Hello world\")\n    print(\"Hello debug world\")  # debug\n    print(\"Hello skip world\")  # skip\n    print(\"hello slow world\")  # slow\n    assert 0    # debug\n\n    # block: slow\n    assert __debug__    # skip\n    while True:\n        print(\"Debug\")\n\n    1 + 1\n    2 + 2\n    s = \"somestr\"\n    # end\n\n    # block: skip\n\n    assert 1\n\n    # end\n\n```\n\nwill turn it to:\n\n```python\nif __name__ == \"__main__\":\n    print(\"Hello world\")\n    # print(\"Hello debug world\")  # debug\n    # print(\"Hello skip world\")  # skip\n    # print(\"hello slow world\")  # slow\n    # assert 0    # debug\n\n    # block: slow\n    # assert __debug__    # skip\n    # while True:\n        # print(\"Debug\")\n\n    # 1 + 1\n    # 2 + 2\n    # s = \"somestr\"\n    # end\n\n    # block: skip\n\n    # assert 1\n\n    # end\n\n```\n\n## Behaviors\npytagged ignores certain cases to avoid any unecessary modifications.\n\n\n### Already commented lines\npytagged ignores already commented lines, even if they are inlined tagged or block tagged. Take this code.\n\n```python\ndef some_fn():\n    # print(\"already commented \") # slow\n    # print(\"same\") # debug\n    print(\"debug\")    # debug\n```\n\nThe second and third lines will be ignored, even if you run `pytag file.py -t debug slow`,\nresulting in:\n\n```python\ndef some_fn():\n    # print(\"already commented \") # slow\n    # print(\"same\") # debug\n    # print(\"debug\")    # debug\n```\n\n### Opened blocks\nAn opened block starts with `# block: tag` but does not have a closing `# end`. pytagged\nignores cases like this. For example, running `pytag file.py -t debug` on this:\n\n```python\ndef opened_block():\n    # block: debug\n    print(\"This is an opened block\")\n    print(\"Inlined tag, this would still work\")     # debug\n\n    # block: debug\n    print(\"This is a proper block\")\n\n    print(\"Below is the end block tag\")\n    # end\n    return 0\n```\n\nwould result in:\n\n```python\ndef opened_block():\n    # block: debug\n    print(\"This is an opened block\")\n    # print(\"Inlined tag, this would still work\")     # debug\n\n    # block: debug\n    # print(\"This is a proper block\")\n\n    # print(\"Below is the end block tag\")\n    # end\n    return 0\n```\n\n### Triple quoted string/docstring\nTriple quotes are either `'''` or `\"\"\"`\n\nTriple quoted block, that is a block whose line starts with `\"\"\"` and ends with a line\nwith only `\"\"\"` is ignored.\nLines that have triple quoted strings in them, but do not start with `\"\"\"` can be commented\nout with block tags, but not inlined tags.\n\nRunning `pytag file.py -t debug` on:\n\n```python\ndef fn_with_docstring():\n    '''This should not be commented out         # debug\n    we don't do anything in a triple quote      # debug\n    block if the start of that block is the     # debug\n    start of a line.                            # debug\n    '''\n\n    some_str = \"this should be commented out normally\"  # debug\n\n    # block: debug\n    triple_quote_str = \"\"\"This however would be commented out\n    if it's block tagged\"\"\"\n    # end\n\n    triple_quote_str = \"\"\"But triple quote strings can't be commented   # debug\n    out using inline tags\"\"\"\n\n    # block: debug\n    \"\"\"This should not be commented out, even if it's block tagged\n    \"\"\"\n    # end\n\n    return triple_quote_str\n\n```\n\nwould result in:\n\n```python\ndef fn_with_docstring():\n    '''This should not be commented out         # debug\n    we don't do anything in a triple quote      # debug\n    block if the start of that block is the     # debug\n    start of a line.                            # debug\n    '''\n\n    # some_str = \"this should be commented out normally\"  # debug\n\n    # block: debug\n    # triple_quote_str = \"\"\"This however would be commented out\n    # if it's block tagged\"\"\"\n    # end\n\n    triple_quote_str = \"\"\"But triple quote strings can't be commented   # debug\n    out using inline tags\"\"\"\n\n    # block: debug\n    \"\"\"This should not be commented out, even if it's block tagged\n    \"\"\"\n    # end\n\n    return triple_quote_str\n\n```\n\n## More advanced usage\n\n### Exclude patterns\nBy default, pytagged ignore files/directories that match against any of these patterns:\n`\".svn\", \"CVS\", \".bzr\", \".hg\", \".git\", \"__pycache__\", \".tox\", \".eggs\", \"*.egg\"`.\n\nYou can override this through the -x/--exclude flag. For example: `pytag . -t debug -x env` will ignore any files  or directories (along with all the subdirectories and files in them) with the name 'env'. This is useful for things like ignoring python packages in a virtual environment. \n\nAnother option is to use the -xt/--extend-exclude flag to add more patterns to the excluded patterns like this `pytag . -t debug --xt env`. This will add 'env' to the default excluded patterns. If you use both  -x and --xt at the same time, the resulting excluded patterns will be the union set of the two.\n\n### Config file\nEvery command line flag (except for -cf/--config) can be configured in a .ini format compliant file like this:\n\n```\n[pytagged]\n\npath = pytagged\ntags =\n    debug,\n    develop\n# tags = debug, develop     this also works\nexclude = env, test*\n```\n\nTo tell pytagged to use the config file you can use the -cf/--config flag: `pytag -cf [config_path]`, or you just use `pytag` and name your file 'pytagged.ini' and place it at the current directory, which is the default location that pytagged looks for the config file when it's run with no command line arguments. Note that you have to have the options declared under the `pytagged` header/session as in the example, as pytagged will only read configurations from there.\n\nYou can also use command line arguments in combination with a config file: take the file 'pytagged.ini' from the previous example, and:\n```bash\npytag --config pytagged.ini -xt build\n```\n\nRunning this is equivalent to:\n```bash\npytag pytagged -t debug develop -x env test* -xt build\n```\n\nIn this scenario, the `path, tags, exclude` options are provided by the config file, while the `-xt` flag from the command line provides argument for the `extend-exclude` option. Note that the arguments from the cli take precedence over options from the config file.\n\nBy default, if no config path is provided, pytagged looks for the default `pytagged.ini` file. If one exists, pytagged will use the options provided there as a base and update/override them with options from the command line as appropriate.\n\n## Misc\n\n### Modes\nThere are 3 modes that pytagged runs in:\n1. Default: No output\n2. Printonly: does NOT modify files, but instead print the raw string output of what the modified files would be\n3. Benchmark: Performs a benchmark of n runs (defaults to 100, configurable through cli or config file), and prints out performance statistics of the phases in processing the files.\n\nNote: You can also use the -v/--verbose flag to print out some more info.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ntn9995/pytagged",
    "keywords": "cli,console",
    "license": "MIT",
    "maintainer": "1Karus",
    "maintainer_email": "",
    "name": "pytagged",
    "package_url": "https://pypi.org/project/pytagged/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytagged/",
    "project_urls": {
      "Homepage": "https://github.com/ntn9995/pytagged"
    },
    "release_url": "https://pypi.org/project/pytagged/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Auto comment cli",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7768377,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e916a021f88568f55c4cccc0e68e71c5d8efab1b721278103f71a075bfd2816b",
          "md5": "849011c280ef9fb0dc7598c629922e69",
          "sha256": "ab6cd5fb6c22be189a407ac9bc1edbad6a9fc685675763f14dd545641448f061"
        },
        "downloads": -1,
        "filename": "pytagged-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "849011c280ef9fb0dc7598c629922e69",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8525,
        "upload_time": "2020-07-16T05:56:51",
        "upload_time_iso_8601": "2020-07-16T05:56:51.187655Z",
        "url": "https://files.pythonhosted.org/packages/e9/16/a021f88568f55c4cccc0e68e71c5d8efab1b721278103f71a075bfd2816b/pytagged-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb602ea84d11a8cad199f9f4b965dfb4148405cc2c963ce61e977b3a47d14ee1",
          "md5": "ba450e1baf51211ecb19577f7623f6d9",
          "sha256": "5ac75ce477b3229a1aae5b455fc7e6765071adbd5648e6abc1d59546bc122cd1"
        },
        "downloads": -1,
        "filename": "pytagged-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ba450e1baf51211ecb19577f7623f6d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9687,
        "upload_time": "2020-07-16T05:56:53",
        "upload_time_iso_8601": "2020-07-16T05:56:53.334336Z",
        "url": "https://files.pythonhosted.org/packages/cb/60/2ea84d11a8cad199f9f4b965dfb4148405cc2c963ce61e977b3a47d14ee1/pytagged-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42eb28d75c6ab76a65cdca4ae03c9c9b57710fd286d94d54fce6d8656e1807a9",
          "md5": "c2415ec2e6707d4e858b6033204dd178",
          "sha256": "62dda92f96cd94dc6bbb8a7eaf99c196a35188d8425807e768b03ff370b2d6f7"
        },
        "downloads": -1,
        "filename": "pytagged-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2415ec2e6707d4e858b6033204dd178",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9388,
        "upload_time": "2020-07-16T08:01:14",
        "upload_time_iso_8601": "2020-07-16T08:01:14.143815Z",
        "url": "https://files.pythonhosted.org/packages/42/eb/28d75c6ab76a65cdca4ae03c9c9b57710fd286d94d54fce6d8656e1807a9/pytagged-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f1d06c9bf142fc2c577fe4c72f1be3382f72ff54d6384447e03e1890fde4c85",
          "md5": "1b6229d87417d81ecc123abeb48a5d41",
          "sha256": "4288efcbd0d1df0227c0c69fae6905b44474b3376be12ff090ccefb93d8a1176"
        },
        "downloads": -1,
        "filename": "pytagged-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1b6229d87417d81ecc123abeb48a5d41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9747,
        "upload_time": "2020-07-16T08:01:15",
        "upload_time_iso_8601": "2020-07-16T08:01:15.231022Z",
        "url": "https://files.pythonhosted.org/packages/2f/1d/06c9bf142fc2c577fe4c72f1be3382f72ff54d6384447e03e1890fde4c85/pytagged-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acac1c5a96fb2a7d46cb84c29e33666e6018c1dcb85a48ba49e4901d08b34374",
          "md5": "92e0be269bbb8e4dc11202baa1b50266",
          "sha256": "ceee6daf79861eb36464caf575322e629a581876eed3c504bce0b9a028250284"
        },
        "downloads": -1,
        "filename": "pytagged-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92e0be269bbb8e4dc11202baa1b50266",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9386,
        "upload_time": "2020-07-16T09:12:24",
        "upload_time_iso_8601": "2020-07-16T09:12:24.136873Z",
        "url": "https://files.pythonhosted.org/packages/ac/ac/1c5a96fb2a7d46cb84c29e33666e6018c1dcb85a48ba49e4901d08b34374/pytagged-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f9aa3d5fec35808773b25b71d134cff0d87d36d73650cb14a8922dc7dd3307c",
          "md5": "d556a025ef980128cadab29e37d06503",
          "sha256": "3c69ff4cf7fd6d6c4f2a0de30c33736dbc6e884a19a255e5d4b08c869654f473"
        },
        "downloads": -1,
        "filename": "pytagged-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d556a025ef980128cadab29e37d06503",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9740,
        "upload_time": "2020-07-16T09:12:25",
        "upload_time_iso_8601": "2020-07-16T09:12:25.199322Z",
        "url": "https://files.pythonhosted.org/packages/2f/9a/a3d5fec35808773b25b71d134cff0d87d36d73650cb14a8922dc7dd3307c/pytagged-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d58d1a25a634cb5ed72de9a11e77117cb0b0bcfee0c750ee2253c260c3a910f",
          "md5": "dd0d791ee138be922a25bee0a010329d",
          "sha256": "849c83ba4e166ada5d214e2150848933ceb60bc3a71b49b206e12312b7280911"
        },
        "downloads": -1,
        "filename": "pytagged-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd0d791ee138be922a25bee0a010329d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14957,
        "upload_time": "2020-07-23T09:25:58",
        "upload_time_iso_8601": "2020-07-23T09:25:58.145483Z",
        "url": "https://files.pythonhosted.org/packages/7d/58/d1a25a634cb5ed72de9a11e77117cb0b0bcfee0c750ee2253c260c3a910f/pytagged-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae03388d33487d137517a0e1f85557404d163ada0807d0b551959da10ba599b3",
          "md5": "e703de695af4b6bd4cb6a3c88e9d2a84",
          "sha256": "0672b79b72a6dce67cb4e09d9a46f24554ac6eea5ef0a7eb28c3e221789c3b0a"
        },
        "downloads": -1,
        "filename": "pytagged-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e703de695af4b6bd4cb6a3c88e9d2a84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15975,
        "upload_time": "2020-07-23T09:25:59",
        "upload_time_iso_8601": "2020-07-23T09:25:59.023626Z",
        "url": "https://files.pythonhosted.org/packages/ae/03/388d33487d137517a0e1f85557404d163ada0807d0b551959da10ba599b3/pytagged-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d58d1a25a634cb5ed72de9a11e77117cb0b0bcfee0c750ee2253c260c3a910f",
        "md5": "dd0d791ee138be922a25bee0a010329d",
        "sha256": "849c83ba4e166ada5d214e2150848933ceb60bc3a71b49b206e12312b7280911"
      },
      "downloads": -1,
      "filename": "pytagged-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dd0d791ee138be922a25bee0a010329d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14957,
      "upload_time": "2020-07-23T09:25:58",
      "upload_time_iso_8601": "2020-07-23T09:25:58.145483Z",
      "url": "https://files.pythonhosted.org/packages/7d/58/d1a25a634cb5ed72de9a11e77117cb0b0bcfee0c750ee2253c260c3a910f/pytagged-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae03388d33487d137517a0e1f85557404d163ada0807d0b551959da10ba599b3",
        "md5": "e703de695af4b6bd4cb6a3c88e9d2a84",
        "sha256": "0672b79b72a6dce67cb4e09d9a46f24554ac6eea5ef0a7eb28c3e221789c3b0a"
      },
      "downloads": -1,
      "filename": "pytagged-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e703de695af4b6bd4cb6a3c88e9d2a84",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15975,
      "upload_time": "2020-07-23T09:25:59",
      "upload_time_iso_8601": "2020-07-23T09:25:59.023626Z",
      "url": "https://files.pythonhosted.org/packages/ae/03/388d33487d137517a0e1f85557404d163ada0807d0b551959da10ba599b3/pytagged-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}