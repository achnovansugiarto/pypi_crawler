{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Russian",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=========================\ndjango-vkontakte-merchant\n=========================\n\ndjango-vkontakte-merchant - приложение для интеграции платежной системы\nВКонтакте (Merchant API) в проекты на Django.\n\nДля исползования следует ознакомиться с официальной документацией\nпо Merchant API (http://vkontakte.ru/developers.php?id=-1_12904887&s=1).\n\n\nУстановка\n=========\n\n::\n\n    $ pip install -U django-vkontakte-merchant vkontakte\n\nПотом следует добавить 'merchant_api' в INSTALLED_APPS и выполнить ::\n\n    $ python manage.py syncdb\n\nили, если используется South, ::\n\n    $ python manage.py migrate\n\n\nНастройка\n=========\n\nВ settings.py нужно указать следующие настройки:\n\n* MERCHANT_API_SHOP_ID - id магазина\n* MERCHANT_API_SHOP_SECRET_KEY - секретный ключ магазина\n* MERCHANT_API_ORDER_FORMS - (не обязательно) модуль с формой для\n  обработки заказа\n\n\nИспользование\n=============\n\nНаписание логики обработки заказа\n---------------------------------\n\ndjango-vkontakte-merchant не берет на себя ответственность за логику\nобработки заказа, т.к. эта логика может отличаться от сайта к сайту.\nВместо этого можно реализовать любую логику, предоставив свою форму\nобработки уведомлений (унаследовав ее от базовой, в которой уже выполнена\nосновная работа по проверке данных).\n\nДля того, чтобы изменить логику обработки данных, следует указать модуль с\nформой обработки заказа в settings.py::\n\n    # settings.py\n    MERCHANT_API_ORDER_FORMS = 'orders.forms'\n\nВ модуле orders.forms должна быть форма с названием OrderForm. Ее удобно\nунаследовать от merchant_api.forms.OrderForm. Пример::\n\n    # coding: utf-8\n    # my_project/orders/forms.py\n\n    from django import forms\n    from merchant_api.forms import OrderForm as MerchantOrderForm\n    from goods.models import Product, Purchase\n\n    class OrderForm(MerchantOrderForm):\n\n        def clean_currency(self):\n            # например, магазин поддерживает только рубли\n            currency = self.cleaned_data['currency']\n            if currency != '643':\n                raise forms.ValidationError('Currencies other than RUR are not supported')\n            return currency\n\n        def clean_notification_type(self):\n            # простой магазин, обрабатываем только уведомления\n            # типа \"Изменение статуса заказа\"\n            tp = self.cleaned_data['notification_type']\n            if not tp.startswith('order-state-change'):\n                raise forms.ValidationError('This notification type is not supported.')\n            return tp\n\n        def clean_item(self, item):\n            # переопределяйте этот метод, чтобы проверить, что заказаны\n            # правильные позиции по нужной цене\n            try:\n                product = Product.objects.get(pk = item['item_id'])\n                if product.price != int(item['price']):\n                    raise forms.ValidationError(\"Price is invalid\", 22)\n                if not product.have_enough(int(item['quantity'])):\n                    raise forms.ValidationError(\"Can't buy so many\", 24)\n            except Product.DoesNotExist:\n                raise forms.ValidationError(\"Invalid product id.\")\n\n        def save(self, *args, **kwargs):\n            # тут можно выполнить любые доп. действия по обработке заказа\n            vk_order = super(OrderForm, self).save(*args, **kwargs)\n            for item in vk_order.items.all():\n                for x in range(0, item.quantity):\n                    Purchase.objects.create(\n                        product_id = item.item_id,\n                        order = vk_order,\n                        user = vk_order.django_user\n                    )\n            return vk_order\n\n\nurls.py\n-------\n\nДля приема платежей следует подключить merchant_api.urls::\n\n    urlpatterns = patterns('',\n        #...\n        url(r'^merchant/', include('merchant_api.urls')),\n        #...\n    )\n\nПосле этого следует указать адрес обратного вызова в настройках магазина\n(``http://<домен>/merchant/callback`` в данном примере).\n\n\nКлиентская часть\n----------------\n\nИнструкцию по написанию клиентской части можно найти в официальной\nдокументации по Merchant API\n( http://vkontakte.ru/developers.php?id=-1_12904887&s=1 )",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://bitbucket.org/kmike/django-vkontakte-merchant/get/tip.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/kmike/django-vkontakte-merchant/",
    "keywords": null,
    "license": "MIT license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-vkontakte-merchant",
    "package_url": "https://pypi.org/project/django-vkontakte-merchant/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-vkontakte-merchant/",
    "project_urls": {
      "Download": "http://bitbucket.org/kmike/django-vkontakte-merchant/get/tip.gz",
      "Homepage": "http://bitbucket.org/kmike/django-vkontakte-merchant/"
    },
    "release_url": "https://pypi.org/project/django-vkontakte-merchant/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Vkontakte Merchant API django app",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 654611,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0b6f571b88eae9cccdcc7f11de5ae4e141bbcc4004da6ede40f2a06e26284ee",
          "md5": "00acfd77b5b1bf6a25149bfcfcd51ab9",
          "sha256": "02f1045ce00d955a6f01c0fa3fde1163d32dba8b082db70b61c30602eec2f7f1"
        },
        "downloads": -1,
        "filename": "django-vkontakte-merchant-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00acfd77b5b1bf6a25149bfcfcd51ab9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13117,
        "upload_time": "2010-10-31T00:11:21",
        "upload_time_iso_8601": "2010-10-31T00:11:21.613618Z",
        "url": "https://files.pythonhosted.org/packages/a0/b6/f571b88eae9cccdcc7f11de5ae4e141bbcc4004da6ede40f2a06e26284ee/django-vkontakte-merchant-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0b6f571b88eae9cccdcc7f11de5ae4e141bbcc4004da6ede40f2a06e26284ee",
        "md5": "00acfd77b5b1bf6a25149bfcfcd51ab9",
        "sha256": "02f1045ce00d955a6f01c0fa3fde1163d32dba8b082db70b61c30602eec2f7f1"
      },
      "downloads": -1,
      "filename": "django-vkontakte-merchant-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "00acfd77b5b1bf6a25149bfcfcd51ab9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13117,
      "upload_time": "2010-10-31T00:11:21",
      "upload_time_iso_8601": "2010-10-31T00:11:21.613618Z",
      "url": "https://files.pythonhosted.org/packages/a0/b6/f571b88eae9cccdcc7f11de5ae4e141bbcc4004da6ede40f2a06e26284ee/django-vkontakte-merchant-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}