{
  "info": {
    "author": "Dexter Dickinson",
    "author_email": "xxx@apexpro.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# apexpro\n\nOfficial Python3 API connector for Apexpro's HTTP and WebSockets APIs.  \nYou can get Api information from \n[OpenApi-SDK](https://api-docs.pro.apex.exchange/#introduction)\n\n## About\nPut simply, `apexpro`  is the official lightweight one-stop-shop module for the Apex pro HTTP and WebSocket APIs. \n\n## Development\n`apexpro` is being actively developed, and new API changes should arrive on `apexpro` very quickly. `apexpro` uses `requests` and `websocket` for its methods, alongside other built-in modules. Anyone is welcome to branch/fork the repository and add their own upgrades. If you think you've made substantial improvements to the module, submit a pull request and we'll gladly take a look.\n\n## Installation\n`apexpro` requires Python 3.6.1 or higher. The module can be installed manually or via [apexpro](https://pypi.org/project/apexpro/) with `pip`:\n```\npip install apexpro\n```\n\n## Basic Usage\nYou can create an HTTP session for Inverse on APEX_HTTP_TEST or APEX_HTTP_MAIN:\n```python\nfrom apexpro.constants import APEX_HTTP_TEST\nfrom apexpro.http_public import HttpPublic\n\nclient = HttpPublic(APEX_HTTP_TEST)\n```\n### Public endpoints\nYou can get no authentication information from public endpoints.  \nPlease refer to [demo_public](https://github.com/ApeX-Protocol/apexpro-openapi/blob/main/tests/demo_public.py)\n\n```python\nfrom apexpro.constants import APEX_HTTP_TEST\nfrom apexpro.http_public import HttpPublic\n\nclient = HttpPublic(APEX_HTTP_TEST)\nprint(client.server_time())\nprint(client.configs())\nprint(client.ticker(symbol=\"BTC-USDC\"))\nprint(client.history_funding(symbol=\"BTC-USDC\"))\nprint(client.depth(symbol=\"ETH-USDC\",limit=100))\nprint(client.trades(symbol=\"ETH-USDC\",limit=100))\nprint(client.klines(symbol=\"ETH-USDC\",interval=\"15\"))\nprint(client.history_funding(symbol=\"ETH-USDC\",limit=100,page=0,beginTimeInclusive=1662348573000,endTimeExclusive=1662434973000))\n```\n\n### Register  method\nYou can get stark_key_pair, apiKey,and accountId for private Api , create-order and withdraw  \nPlease refer to [demo_register](https://github.com/ApeX-Protocol/apexpro-openapi/blob/main/tests/demo_register.py)\n\n```python\nfrom apexpro.http_private import HttpPrivate\nfrom apexpro.constants import APEX_HTTP_TEST, NETWORKID_TEST, APEX_HTTP_MAIN, NETWORKID_MAIN\n\npriKey = \"your eth private key\"\n\nclient = HttpPrivate(APEX_HTTP_TEST, network_id=NETWORKID_TEST, eth_private_key=priKey)\nconfigs = client.configs()\n\nstark_key_pair_with_y_coordinate = client.derive_stark_key(client.default_address)\nnonceRes = client.generate_nonce(starkKey=stark_key_pair_with_y_coordinate['public_key'],ethAddress=client.default_address,chainId=NETWORKID_TEST)\n\nregRes = client.register_user(nonce=nonceRes['data']['nonce'],starkKey=stark_key_pair_with_y_coordinate['public_key'],stark_public_key_y_coordinate=stark_key_pair_with_y_coordinate['public_key_y_coordinate'],ethereum_address=client.default_address)\nkey = regRes['data']['apiKey']['key']\nsecret = regRes['data']['apiKey']['secret']\npassphrase = regRes['data']['apiKey']['passphrase']\n\n#back stark_key_pair, apiKey,and accountId for private Api or create-order or withdraw\nprint(stark_key_pair_with_y_coordinate)\nprint(regRes['data']['account']['positionId'])\nprint(regRes['data']['apiKey'])\n```\n\n### Private endpoints\nsome authentication information is required to access private endpoints. \nPlease refer to [demo_private](https://github.com/ApeX-Protocol/apexpro-openapi/blob/main/tests/demo_private.py)\n\n```python\nfrom apexpro.http_private import HttpPrivate\nfrom apexpro.constants import APEX_HTTP_TEST, NETWORKID_TEST\n\n# need apiKey={'key': key,'secret': secret, 'passphrase': passphrase} for private api\n\nkey = 'your apiKey-key from register'\nsecret = 'your apiKey-secret from register'\npassphrase = 'your apiKey-passphrase from register'\n\nclient = HttpPrivate(APEX_HTTP_TEST, network_id=NETWORKID_TEST, api_key_credentials={'key': key,'secret': secret, 'passphrase': passphrase})\nconfigs = client.configs()\n\nuserRes = client.get_user()\nprint(userRes)\n\nmodifyUserRes = client.modify_user(username=\"pythonTest\",email=\"11@aa.com\",emailNotifyGeneralEnable=\"false\")\nprint(modifyUserRes)\n\naccountRes = client.get_account()\nprint(accountRes)\n\nopenOrdersRes = client.open_orders()\nprint(openOrdersRes)\n\nhistoryOrdersRes = client.history_orders()\nprint(historyOrdersRes)\n\nfundingRes = client.funding(limit=100,page=0,symbol=\"BTC-USDC\",side=\"BUY\")\nprint(fundingRes)\n\nnotifyListRes = client.notify_list(limit=100,page=0,unreadOnly=\"true\",notifyCategory=\"1\")\nprint(notifyListRes)\n\n...\n```\n\n### Stark key sign method\nSeveral endpoints require a starkKey signature authentication, namely as following:\n- create-order\n- withdraw\n\nPlease refer to [demo_stark_key_sign](https://github.com/ApeX-Protocol/apexpro-openapi/blob/main/tests/demo_stark_key_sign.py)\n\n```python\nimport time\nfrom apexpro.http_private_stark_key_sign import HttpPrivateStark\n\nfrom apexpro.constants import APEX_HTTP_TEST, NETWORKID_TEST\n\n# need api_key_credentials={'key': key,'secret': secret, 'passphrase': passphrase} for private api\n# need starkey for withdraw and createOrder\n\nkey = 'your apiKey-key from register'\nsecret = 'your apiKey-secret from register'\npassphrase = 'your apiKey-passphrase from register'\n\npublic_key = 'your stark_public_key from register'\npublic_key_y_coordinate = 'your stark_public_key_y_coordinate from register'\nprivate_key = 'your stark_private_key from register'\n\n\nclient = HttpPrivateStark(APEX_HTTP_TEST, network_id=NETWORKID_TEST,\nstark_public_key=public_key,\nstark_private_key=private_key,\nstark_public_key_y_coordinate=public_key_y_coordinate,\napi_key_credentials={'key': key, 'secret': secret, 'passphrase': passphrase})\nconfigs = client.configs()\nclient.get_user()\nclient.get_account()\n\ncurrentTime = time.time()\n\nlimitFee = client.account['takerFeeRate']\ncreateOrderRes = client.create_order(symbol=\"LINK-USDC\", side=\"BUY\",\ntype=\"LIMIT\", size=\"1\",\nprice=\"9.1\", limitFee=limitFee,\naccountId=client.account['positionId'],\nexpirationEpochSeconds= currentTime)\nprint(createOrderRes)\n\n\n\nworstPrice = client.get_worst_price(symbol=\"BTC-USDC\", side=\"SELL\", size=\"0.1\")\nprice = worstPrice['data']['worstPrice']\n##market order price must not none\ncreateOrderRes = client.create_order(symbol=\"BTC-USDC\", side=\"SELL\",\ntype=\"MARKET\", size=\"1\", price=price, limitFee=limitFee,\nexpirationEpochSeconds= currentTime)\nprint(createOrderRes)\n\n#createWithdrawRes = client.create_withdrawal(amount='1001',expirationEpochSeconds= currentTime,asset='USDC')\n#print(createWithdrawRes)\n\n#feeRes = client.uncommon_withdraw_fee(amount='1002',chainId='5')\n#print(feeRes)\n#fastWithdrawRes = client.fast_withdrawal(amount='1002',expirationEpochSeconds= currentTime,asset='USDC',fee=feeRes['data']['fee'])\n#print(fastWithdrawRes)\n\ndeleteOrderRes = client.delete_open_orders(symbol=\"LINK-USDC\")\nprint(deleteOrderRes)\n\ndeleteOrderRes = client.delete_open_orders()\nprint(deleteOrderRes)\n\n\nfeeRes = client.uncommon_withdraw_fee(amount='1003',chainId='97')\nprint(feeRes)\ncrossWithdrawRes = client.cross_chain_withdraw(amount='1003',expirationEpochSeconds= currentTime,asset='USDC',fee=feeRes['data']['fee'],chainId='97')\nprint(crossWithdrawRes)\n\n```\n\n### WebSocket\nTo see comprehensive examples of how to subscribe topics from websockets.\nPlease refer to [demo_ws](https://github.com/ApeX-Protocol/apexpro-openapi/blob/main/tests/demo_ws.py)\n\n\n```python\nfrom time import sleep\n\nfrom apexpro.constants import APEX_WS_TEST\nfrom apexpro.websocket_api import WebSocket\n\nkey = 'your apiKey-key from register'\nsecret = 'your apiKey-secret from register'\npassphrase = 'your apiKey-passphrase from register'\n\n# Connect with authentication!\nws_client = WebSocket(\n    endpoint=APEX_WS_TEST,\n    api_key_credentials={'key': key, 'secret': secret, 'passphrase': passphrase},\n)\n\ndef handle_account(message):\n    print(message)\n    contents_data = message[\"contents\"]\n    print(len(contents_data))\n\ndef h1(message):\n    print(1, message)\ndef h2(message):\n    print(2, message)\ndef h3(message):\n    print(3, message)\ndef h4(message):\n    print(4, message)\n\n#ws_client.depth_stream(h1,'BTCUSDC',25)\n#ws_client.ticker_stream(h2,'BTCUSDC')\n#ws_client.trade_stream(h3,'BTCUSDC')\n#ws_client.klines_stream(h4,'BTCUSDC',1)\nws_client.account_info_stream(handle_account)\n\n\nwhile True:\n    # Run your main trading logic here.\n    sleep(1)\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xxx",
    "keywords": "apexpro api connector",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "apexpro",
    "package_url": "https://pypi.org/project/apexpro/",
    "platform": null,
    "project_url": "https://pypi.org/project/apexpro/",
    "project_urls": {
      "Homepage": "https://github.com/xxx"
    },
    "release_url": "https://pypi.org/project/apexpro/1.1.2/",
    "requires_dist": [
      "requests",
      "websocket-client",
      "websockets",
      "dateparser (==1.0.0)",
      "ecdsa (==0.16.0)",
      "eth-keys",
      "eth-account (<0.6.0,>=0.4.0)",
      "mpmath (==1.0.0)",
      "pytest (<5.0.0,>=4.4.0)",
      "requests-mock (==1.6.0)",
      "requests (<3.0.0,>=2.22.0)",
      "setuptools (==50.3.2)",
      "sympy (==1.6)",
      "tox (==3.13.2)",
      "web3 (<6.0.0,>=5.0.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Python3 Apexpro HTTP/WebSocket API Connector",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16763248,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60b16a11fc3f74a5347580681db091d4f292a5acb66040ea9828263248b3f3eb",
          "md5": "ed2863651906be193903b7f91457a13a",
          "sha256": "40289772a8b3d164be5ec5359b9155fa5dec088bd5b10495f6b67ea3b945f07f"
        },
        "downloads": -1,
        "filename": "apexpro-1.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed2863651906be193903b7f91457a13a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 2296052,
        "upload_time": "2023-02-09T06:04:27",
        "upload_time_iso_8601": "2023-02-09T06:04:27.230789Z",
        "url": "https://files.pythonhosted.org/packages/60/b1/6a11fc3f74a5347580681db091d4f292a5acb66040ea9828263248b3f3eb/apexpro-1.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dddd8df33c46259856aa62a9b20cc5521033d0df8d0fffde022f493579f498a6",
          "md5": "505c1ef2691bf029c00024a6c798bdb5",
          "sha256": "4a387dd891600df06f76df8ad589183f8fa35c5655113f63da60a48deff888c1"
        },
        "downloads": -1,
        "filename": "apexpro-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "505c1ef2691bf029c00024a6c798bdb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 88381,
        "upload_time": "2023-02-09T06:04:29",
        "upload_time_iso_8601": "2023-02-09T06:04:29.595908Z",
        "url": "https://files.pythonhosted.org/packages/dd/dd/8df33c46259856aa62a9b20cc5521033d0df8d0fffde022f493579f498a6/apexpro-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60b16a11fc3f74a5347580681db091d4f292a5acb66040ea9828263248b3f3eb",
        "md5": "ed2863651906be193903b7f91457a13a",
        "sha256": "40289772a8b3d164be5ec5359b9155fa5dec088bd5b10495f6b67ea3b945f07f"
      },
      "downloads": -1,
      "filename": "apexpro-1.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ed2863651906be193903b7f91457a13a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 2296052,
      "upload_time": "2023-02-09T06:04:27",
      "upload_time_iso_8601": "2023-02-09T06:04:27.230789Z",
      "url": "https://files.pythonhosted.org/packages/60/b1/6a11fc3f74a5347580681db091d4f292a5acb66040ea9828263248b3f3eb/apexpro-1.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dddd8df33c46259856aa62a9b20cc5521033d0df8d0fffde022f493579f498a6",
        "md5": "505c1ef2691bf029c00024a6c798bdb5",
        "sha256": "4a387dd891600df06f76df8ad589183f8fa35c5655113f63da60a48deff888c1"
      },
      "downloads": -1,
      "filename": "apexpro-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "505c1ef2691bf029c00024a6c798bdb5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 88381,
      "upload_time": "2023-02-09T06:04:29",
      "upload_time_iso_8601": "2023-02-09T06:04:29.595908Z",
      "url": "https://files.pythonhosted.org/packages/dd/dd/8df33c46259856aa62a9b20cc5521033d0df8d0fffde022f493579f498a6/apexpro-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}