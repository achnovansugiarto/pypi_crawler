{
  "info": {
    "author": "MaxWu",
    "author_email": "EfiPy.Core@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: Other/Proprietary License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing :: Unit"
    ],
    "description": "# Introduction\nwav file generator.  \n1. it can have different amplitude, frequency in multichannel wav file \n3. it uses different plug-in to produce different wave form.\n# Wave file command\n```\npython3 SampleTone.py          # basic waveform from InToneFunc.py plu-in\npython3 SampleSquareFourier.py # squarewave by fourier series from plu-in InSquareFourier.py\n``` \n## Help \n```\npython3 SampleTone.py  -h\nusage: SampleTone.py [-h] [-t DURATION] [-r {8,16,24,32}] [-s SAMPLERATE]\n                     [-o OUTPUT] [-c CHANNELS]\n                     [-w {square,sine,triangle,sawtooth,dc}]\n                     [-W {square,sine,triangle,sawtooth,dc} [{square,sine,triangle,sawtooth,dc} ...]]\n                     [-f FREQUENCY] [-F FREQUENCYS [FREQUENCYS ...]]\n                     [-v VOLUME] [-V VOLUMES [VOLUMES ...]] [-p PHASE]\n                     [-P PHASES [PHASES ...]]\n\nGenerate wave file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t DURATION           set wav's duration in seconds (3.0)\n  -r {8,16,24,32}       set wav's resolution\n  -s SAMPLERATE         set wav's sampling rate [8000Hz:1000000000Hz]\n  -o OUTPUT             set name of wav file\n  -c CHANNELS           set wav's channels [1:16]\n  -w {square,sine,triangle,sawtooth,dc}\n                        set wav's default wave form\n  -W {square,sine,triangle,sawtooth,dc} [{square,sine,triangle,sawtooth,dc} ...]\n                        set wav's wave forms for multichannel\n  -f FREQUENCY          set wav's default frequency [0:20000]\n  -F FREQUENCYS [FREQUENCYS ...]\n                        set wav's each frequency for each channel [0:20000]\n  -v VOLUME             set wav's default amplitude [0:100]\n  -V VOLUMES [VOLUMES ...]\n                        set wav's each amplitude for each channel [0:100]\n  -p PHASE              set wav's default phase [-360:360]\n  -P PHASES [PHASES ...]\n                        set wav's each phase for each channel [-360:360]\n```\n# Wav file spec\n[WaveFile Gem](https://wavefilegem.com/how_wave_files_work.html)  \n[Audio File Format Specifications](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html)\n\n# Samples \n## SampleTone.py uses InToneFunc.py plu-in.  \n### Generate 4 channels wav file  \n```\npython3 SampleTone.py -c 4 -w sine\n```\n![SampleToneBasic](https://github.com/EfiPy/WaveGenPy/blob/master/Screenshot/SampleToneBasic.png?raw=true)\n### Generate wav file, each channel has different wave form  \n```\npython3 SampleTone.py -W sine square triangle sawtooth dc -f 30 -t 0.3 -v 70\n```\nProduce 5 channels wave file which includes these wave form... sine wave, square wave, triangle wave, sawtooth wave and dc.  \nSample rate: default (48kHz).  \nResilution: 16 bits  \nLength: 0.3 second.  \nAmplitude: 70 of 100  \nWave frequency: 30Hz  \n![SampleToneWave](https://github.com/EfiPy/WaveGenPy/blob/master/Screenshot/SampleToneWave.png?raw=true)\n### Generate wav file, each channel has different phase  \n```\npython3 SampleTone.py -w sine -P -270 -180 -90 0 90 180 270 -f 30 -t 0.3 -v 70\n```\nPhase: -270, -180, -90, 0, 90, 180, 270\n![SampleTonePhase](https://github.com/EfiPy/WaveGenPy/blob/master/Screenshot/SampleTonePhase.png?raw=true)\n## SampleSquareFourier.py uses InSquareFourier.py plu-in.  \n### Produce squrewave from fourier series  \n```\npython3 SampleSquareFourier.py -f 30 -t 0.3 -v 70 -W SF1 SF2 SF3 SF4 SF5 SF30\n```\nsqurewave by fourier series with N = 1, 2, 3, 30  \n![SampleSquareFourier](https://github.com/EfiPy/WaveGenPy/blob/master/Screenshot/SampleSquareFourier.png?raw=true)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EfiPy/WaveGenPy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "WaveGenPy",
    "package_url": "https://pypi.org/project/WaveGenPy/",
    "platform": "",
    "project_url": "https://pypi.org/project/WaveGenPy/",
    "project_urls": {
      "Homepage": "https://github.com/EfiPy/WaveGenPy"
    },
    "release_url": "https://pypi.org/project/WaveGenPy/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.5, <4",
    "summary": "Wave file generator",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10097694,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6eca89bd175425d98eb6bcb690f9e4952404e05ebb58530699d8d217b00c313",
          "md5": "b0ea1dfadbb295917816ed027b89f5db",
          "sha256": "74be9ebf68dbd75248b9ee980bd4dd01a6c314201c549d5d47ea91214dc70296"
        },
        "downloads": -1,
        "filename": "WaveGenPy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b0ea1dfadbb295917816ed027b89f5db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5, <4",
        "size": 8636,
        "upload_time": "2021-04-18T12:15:31",
        "upload_time_iso_8601": "2021-04-18T12:15:31.144444Z",
        "url": "https://files.pythonhosted.org/packages/b6/ec/a89bd175425d98eb6bcb690f9e4952404e05ebb58530699d8d217b00c313/WaveGenPy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6eca89bd175425d98eb6bcb690f9e4952404e05ebb58530699d8d217b00c313",
        "md5": "b0ea1dfadbb295917816ed027b89f5db",
        "sha256": "74be9ebf68dbd75248b9ee980bd4dd01a6c314201c549d5d47ea91214dc70296"
      },
      "downloads": -1,
      "filename": "WaveGenPy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b0ea1dfadbb295917816ed027b89f5db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5, <4",
      "size": 8636,
      "upload_time": "2021-04-18T12:15:31",
      "upload_time_iso_8601": "2021-04-18T12:15:31.144444Z",
      "url": "https://files.pythonhosted.org/packages/b6/ec/a89bd175425d98eb6bcb690f9e4952404e05ebb58530699d8d217b00c313/WaveGenPy-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}