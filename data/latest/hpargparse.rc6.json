{
  "info": {
    "author": "Xinyu Zhou",
    "author_email": "zxy@megvii.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# hpargparse\n[![CircleCI](https://img.shields.io/circleci/build/github/megvii-research/hpargparse/master)](https://app.circleci.com/pipelines/github/megvii-research/hpargparse?branch=master)\n[![codecov](https://img.shields.io/codecov/c/github/megvii-research/hpargparse)](https://codecov.io/gh/megvii-research/hpargparse)\n\nAn [argparse](https://docs.python.org/3/library/argparse.html) extension for [hpman](https://github.com/megvii-research/hpman)\n\n# Installation\n```bash\npython3 -m pip install hpargparse\n```\n\n# Brief Introduction\n\nThe following example lies in [examples/02-brief](./examples/02-brief).\n\n`main.py`\n```python\n#!/usr/bin/env python3\n\nfrom hpman.m import _\nimport hpargparse\n\nimport argparse\n\n\ndef func():\n    weight_decay = _(\"weight_decay\", 1e-5)\n    print(\"weight decay is {}\".format(weight_decay))\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    _.parse_file(__file__)\n    hpargparse.bind(parser, _)\n    parser.parse_args()\n\n    func()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nresults in:\n```bash\n$ ./main.py\nweight decay is 1e-05\n$ ./main.py --weight-decay 1e-4\nweight decay is 0.0001\n$ ./main.py --weight-decay 1e-4 --hp-list\nweight_decay: 0.0001\n$ ./main.py --weight-decay 1e-4 --hp-list detail\nAll hyperparameters:                                                                               \n    ['weight_decay']                                                                               \n                                              Details                                              \n╔══════════════╦═══════╦════════╦═════════════════════════════════════════════════════════════════╗\n║ name         ║ type  ║ value  ║ details                                                         ║\n╠══════════════╬═══════╬════════╬═════════════════════════════════════════════════════════════════╣\n║ weight_decay ║ float ║ 0.0001 ║ occurrence[0]:                                                  ║\n║              ║       ║        ║   ./main.py:10                                                  ║\n║              ║       ║        ║      5:                                                         ║\n║              ║       ║        ║      6: import argparse                                         ║\n║              ║       ║        ║      7:                                                         ║\n║              ║       ║        ║      8:                                                         ║\n║              ║       ║        ║      9: def func():                                             ║\n║              ║       ║        ║ ==> 10:     weight_decay = _(\"weight_decay\", 1e-5)              ║\n║              ║       ║        ║     11:     print(\"weight decay is {}\".format(weight_decay))    ║\n║              ║       ║        ║     12:                                                         ║\n║              ║       ║        ║     13:                                                         ║\n║              ║       ║        ║     14: def main():                                             ║\n║              ║       ║        ║     15:     parser = argparse.ArgumentParser()                  ║\n╚══════════════╩═══════╩════════╩═════════════════════════════════════════════════════════════════╝\n$ ./main.py -h\nusage: main.py [-h] [--weight-decay WEIGHT_DECAY] [--hp-save HP_SAVE]\n               [--hp-load HP_LOAD] [--hp-list [{detail,yaml,json}]]\n               [--hp-detail] [--hp-serial-format {auto,yaml,pickle}]\n               [--hp-exit]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --weight-decay WEIGHT_DECAY\n                        (default: 1e-05)\n  --hp-save HP_SAVE     Save hyperparameters to a file. The hyperparameters\n                        are saved after processing of all other options\n                        (default: None)\n  --hp-load HP_LOAD     Load hyperparameters from a file. The hyperparameters\n                        are loaded before any other options are processed\n                        (default: None)\n  --hp-list [{detail,yaml,json}]\n                        List all available hyperparameters. If `--hp-list\n                        detail` is specified, a verbose table will be print\n                        (default: None)\n  --hp-detail           Shorthand for --hp-list detail (default: False)\n  --hp-serial-format {auto,yaml,pickle}\n                        Format of the saved config file. Defaults to auto. It\n                        can be set to override auto file type deduction.\n                        (default: auto)\n  --hp-exit             process all hpargparse actions and quit (default:\n                        False)\n```\n\n# hpcli: The Command Line Tool\nBesides using `hpargparse.bind` in you code, we also come with a command line\ntool `hpcli` to provide similar functions to any existing file using hpman.\n\n`src.py`\n```python\nfrom hpman.m import _\n\n_('num_channels', 128)\n_('num_layers', 50)\n```\n\nIn shell:\n```bash\n$ hpcli src.py\nnum_channels: 128\nnum_layers: 50\n$ hpcli src.py --num-layers 101\nnum_channels: 128\nnum_layers: 101\n$ hpcli src.py --num-layers 101 --hp-save config.yaml\nnum_channels: 128\nnum_layers: 101\n$ hpcli src.py --num-layers 101 --hp-save config.yaml --hp-list detail\nAll hyperparameters:                                                   \n    ['num_channels', 'num_layers']                                     \n                                Details                                \n╔══════════════╦══════╦═══════╦═══════════════════════════════════════╗\n║ name         ║ type ║ value ║ details                               ║\n╠══════════════╬══════╬═══════╬═══════════════════════════════════════╣\n║ num_channels ║ int  ║ 128   ║ occurrence[0]:                        ║\n║              ║      ║       ║   src.py:3                            ║\n║              ║      ║       ║     1: from hpman.m import _          ║\n║              ║      ║       ║     2:                                ║\n║              ║      ║       ║ ==> 3: _(\"num_channels\", 128)         ║\n║              ║      ║       ║     4: _(\"num_layers\", 50)            ║\n║              ║      ║       ║     5:                                ║\n╠══════════════╬══════╬═══════╬═══════════════════════════════════════╣\n║ num_layers   ║ int  ║ 101   ║ occurrence[0]:                        ║\n║              ║      ║       ║   src.py:4                            ║\n║              ║      ║       ║     1: from hpman.m import _          ║\n║              ║      ║       ║     2:                                ║\n║              ║      ║       ║     3: _(\"num_channels\", 128)         ║\n║              ║      ║       ║ ==> 4: _(\"num_layers\", 50)            ║\n║              ║      ║       ║     5:                                ║\n╚══════════════╩══════╩═══════╩═══════════════════════════════════════╝\n$ hpcli src.py -h\nusage: hpcli [-h] [--num-channels NUM_CHANNELS] [--num-layers NUM_LAYERS]\n             [--hp-save HP_SAVE] [--hp-load HP_LOAD]\n             [--hp-list [{detail,yaml,json}]] [--hp-detail]\n             [--hp-serial-format {auto,yaml,pickle}] [--hp-exit]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --num-channels NUM_CHANNELS\n                        (default: 128)\n  --num-layers NUM_LAYERS\n                        (default: 50)\n  --hp-save HP_SAVE     Save hyperparameters to a file. The hyperparameters\n                        are saved after processing of all other options\n                        (default: None)\n  --hp-load HP_LOAD     Load hyperparameters from a file. The hyperparameters\n                        are loaded before any other options are processed\n                        (default: None)\n  --hp-list [{detail,yaml,json}]\n                        List all available hyperparameters. If `--hp-list\n                        detail` is specified, a verbose table will be print\n                        (default: yaml)\n  --hp-detail           Shorthand for --hp-list detail (default: False)\n  --hp-serial-format {auto,yaml,pickle}\n                        Format of the saved config file. Defaults to auto. It\n                        can be set to override auto file type deduction.\n                        (default: auto)\n  --hp-exit             process all hpargparse actions and quit (default:\n                        False)\n```\n\nThis could be a handy tool to inspect the hyperparameters in your code.\n\n# Example: Deep Learning Experiment\nThis example lies in [examples/01-nn-training](./examples/01-nn-training).\n\nIt is a fully functional example of training a LeNet on MNIST using\n`hpargparse` and `hpman` collaboratively to manage hyperparameters.\n\nWe **highly suggest** you playing around this example.\n\n\n# Example: Basics Walkthrough\nNow we break down the functions one-by-one.\n\nThe following example lies in [examples/00-basic](./examples/00-basic).\n\n`lib.py`:\n```python\nfrom hpman.m import _\n\n\ndef add():\n    return _(\"a\", 1) + _(\"b\", 2)\n\n\ndef mult():\n    return _(\"a\") * _(\"b\")\n```\n\n`main.py`\n```python\n#!/usr/bin/env python3\nimport argparse\nimport hpargparse\nfrom hpman.m import _\nimport os\n\nBASE_DIR = os.path.dirname(os.path.realpath(__file__))\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n\n    # ... do whatever you want\n    parser.add_argument(dest=\"predefined_arg\")\n\n    # analyze everything in this directory\n    _.parse_file(BASE_DIR)  # <-- IMPORTANT\n\n    # bind will monkey_patch parser.parse_args to do its job\n    hpargparse.bind(parser, _)  # <-- IMPORTANT\n\n    # parse args and set the values\n    args = parser.parse_args()\n\n    # ... do whatever you want next\n    import lib\n\n    print(\"a = {}\".format(_.get_value(\"a\")))\n    print(\"b = {}\".format(_.get_value(\"b\")))\n    print(\"lib.add() = {}\".format(lib.add()))\n    print(\"lib.mult() = {}\".format(lib.mult()))\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Help\n```bash\n$ ./main.py -h\nusage: main.py [-h] [--a A] [--b B] [--hp-save HP_SAVE] [--hp-load HP_LOAD]\n               [--hp-list [{detail,yaml,json}]] [--hp-detail]\n               [--hp-serial-format {auto,yaml,pickle}] [--hp-exit]\n               predefined_arg\n\npositional arguments:\n  predefined_arg\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --a A                 (default: 1)\n  --b B                 (default: 2)\n  --hp-save HP_SAVE     Save hyperparameters to a file. The hyperparameters\n                        are saved after processing of all other options\n                        (default: None)\n  --hp-load HP_LOAD     Load hyperparameters from a file. The hyperparameters\n                        are loaded before any other options are processed\n                        (default: None)\n  --hp-list [{detail,yaml,json}]\n                        List all available hyperparameters. If `--hp-list\n                        detail` is specified, a verbose table will be print\n                        (default: None)\n  --hp-detail           Shorthand for --hp-list detail (default: False)\n  --hp-serial-format {auto,yaml,pickle}\n                        Format of the saved config file. Defaults to auto. It\n                        can be set to override auto file type deduction.\n                        (default: auto)\n  --hp-exit             process all hpargparse actions and quit (default:\n                        False)\n```\n\n\n## Set Hyperparameters from Command Line Arguments\n```bash\n$ ./main.py some_thing --a 3 --b 5\na = 3\nb = 5\nlib.add() = 8\nlib.mult() = 15\n```\n\n\n## List All Hyperparameters \n```bash\n$ ./main.py some_arg --hp-list\na: 1\nb: 2\n```\n... and details:\n```bash\n$ ./main.py some_arg --hp-list detail\nAll hyperparameters:                                                                               \n    ['a', 'b']                                                                                     \n                                              Details                                              \n╔══════╦══════╦═══════╦═══════════════════════════════════════════════════════════════════════════╗\n║ name ║ type ║ value ║ details                                                                   ║\n╠══════╬══════╬═══════╬═══════════════════════════════════════════════════════════════════════════╣\n║ a    ║ int  ║ 1     ║ occurrence[0]:                                                            ║\n║      ║      ║       ║   /data/project/hpargparse/examples/00-basic/lib.py:8                     ║\n║      ║      ║       ║      3: # for more usecases, please refer to hpman's document             ║\n║      ║      ║       ║      4:                                                                   ║\n║      ║      ║       ║      5:                                                                   ║\n║      ║      ║       ║      6: def add():                                                        ║\n║      ║      ║       ║      7:     # define a hyperparameter on-the-fly with defaults            ║\n║      ║      ║       ║ ==>  8:     return _(\"a\", 1) + _(\"b\", 2)                                  ║\n║      ║      ║       ║      9:                                                                   ║\n║      ║      ║       ║     10:                                                                   ║\n║      ║      ║       ║     11: def mult():                                                       ║\n║      ║      ║       ║     12:     # reuse a pre-defined hyperparameters                         ║\n║      ║      ║       ║     13:     return _(\"a\") * _(\"b\")                                        ║\n║      ║      ║       ║ occurrence[1]:                                                            ║\n║      ║      ║       ║   /data/project/hpargparse/examples/00-basic/lib.py:13                    ║\n║      ║      ║       ║      8:     return _(\"a\", 1) + _(\"b\", 2)                                  ║\n║      ║      ║       ║      9:                                                                   ║\n║      ║      ║       ║     10:                                                                   ║\n║      ║      ║       ║     11: def mult():                                                       ║\n║      ║      ║       ║     12:     # reuse a pre-defined hyperparameters                         ║\n║      ║      ║       ║ ==> 13:     return _(\"a\") * _(\"b\")                                        ║\n║      ║      ║       ║     14:                                                                   ║\n╠══════╬══════╬═══════╬═══════════════════════════════════════════════════════════════════════════╣\n║ b    ║ int  ║ 2     ║ occurrence[0]:                                                            ║\n║      ║      ║       ║   /data/project/hpargparse/examples/00-basic/lib.py:8                     ║\n║      ║      ║       ║      3: # for more usecases, please refer to hpman's document             ║\n║      ║      ║       ║      4:                                                                   ║\n║      ║      ║       ║      5:                                                                   ║\n║      ║      ║       ║      6: def add():                                                        ║\n║      ║      ║       ║      7:     # define a hyperparameter on-the-fly with defaults            ║\n║      ║      ║       ║ ==>  8:     return _(\"a\", 1) + _(\"b\", 2)                                  ║\n║      ║      ║       ║      9:                                                                   ║\n║      ║      ║       ║     10:                                                                   ║\n║      ║      ║       ║     11: def mult():                                                       ║\n║      ║      ║       ║     12:     # reuse a pre-defined hyperparameters                         ║\n║      ║      ║       ║     13:     return _(\"a\") * _(\"b\")                                        ║\n║      ║      ║       ║ occurrence[1]:                                                            ║\n║      ║      ║       ║   /data/project/hpargparse/examples/00-basic/lib.py:13                    ║\n║      ║      ║       ║      8:     return _(\"a\", 1) + _(\"b\", 2)                                  ║\n║      ║      ║       ║      9:                                                                   ║\n║      ║      ║       ║     10:                                                                   ║\n║      ║      ║       ║     11: def mult():                                                       ║\n║      ║      ║       ║     12:     # reuse a pre-defined hyperparameters                         ║\n║      ║      ║       ║ ==> 13:     return _(\"a\") * _(\"b\")                                        ║\n║      ║      ║       ║     14:                                                                   ║\n╚══════╩══════╩═══════╩═══════════════════════════════════════════════════════════════════════════╝\n```\n\n## Save/Load from/to YAML file\n```bash\n# save to yaml file\n$ ./main.py some_arg --hp-save /tmp/config.yaml --hp-exit\n\n$ cat /tmp/config.yaml \na: 1\nb: 2\n\n# load from yaml file\n$ cat config_modified.yaml\na: 123\nb: 456\n\n$ ./main.py some_arg --hp-load config_modified.yaml --hp-list\na: 123\nb: 456\n```\n\n# Development\n1. Install requirements:\n```bash\npip install -r requirements.dev.txt -r requirements.txt\n```\n\n2. Activate git commit template\n```bash\ngit config commit.template .git-commit-template.txt\n```\n\n3. Install pre-commit hook\n```bash\npre-commit install\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/megvii-research/hpargparse",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hpargparse",
    "package_url": "https://pypi.org/project/hpargparse/",
    "platform": null,
    "project_url": "https://pypi.org/project/hpargparse/",
    "project_urls": {
      "Homepage": "https://github.com/megvii-research/hpargparse"
    },
    "release_url": "https://pypi.org/project/hpargparse/0.14.0/",
    "requires_dist": [
      "rich",
      "dill",
      "hpman (>=0.0.6)",
      "PyYAML"
    ],
    "requires_python": "",
    "summary": "An argparse extension for hpman",
    "version": "0.14.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15987088,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d66c1404bd77b6662dd220c7f21ef878fcee5778dc57b28c5aba33223135002e",
          "md5": "1b703952eb07673ca16f8d5a2e5b520c",
          "sha256": "1e30ccb31af1b860482c2352a16b13ff74deaa12e4ed70eaf061817542b2b093"
        },
        "downloads": -1,
        "filename": "hpargparse-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b703952eb07673ca16f8d5a2e5b520c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9998,
        "upload_time": "2020-05-24T07:39:37",
        "upload_time_iso_8601": "2020-05-24T07:39:37.884260Z",
        "url": "https://files.pythonhosted.org/packages/d6/6c/1404bd77b6662dd220c7f21ef878fcee5778dc57b28c5aba33223135002e/hpargparse-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54ea9755f01e81d5e7a2fcf3cf5c9e7d40254e1bb1cc467468152a51d2b105b0",
          "md5": "65dc8628a5c213c59b5a35e372b6576e",
          "sha256": "c0b8c8ca1a5eb5e092fa75922649d8bf8a0f64116dc75d7518d7e2aa62d103cd"
        },
        "downloads": -1,
        "filename": "hpargparse-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "65dc8628a5c213c59b5a35e372b6576e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11463,
        "upload_time": "2020-05-24T07:39:41",
        "upload_time_iso_8601": "2020-05-24T07:39:41.737952Z",
        "url": "https://files.pythonhosted.org/packages/54/ea/9755f01e81d5e7a2fcf3cf5c9e7d40254e1bb1cc467468152a51d2b105b0/hpargparse-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90d6ae5b7bee2570f826f846dfeee9889cdaf6fa82dcb2f687d32ab8f1dfd1db",
          "md5": "1474de56fc7ba6fb7a7f0f5b952a3a5d",
          "sha256": "be5403250d6c6c223616b4666cd53fcb0adc9c2ea07711b782fb53050eaba29b"
        },
        "downloads": -1,
        "filename": "hpargparse-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1474de56fc7ba6fb7a7f0f5b952a3a5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10142,
        "upload_time": "2020-05-30T06:19:57",
        "upload_time_iso_8601": "2020-05-30T06:19:57.960186Z",
        "url": "https://files.pythonhosted.org/packages/90/d6/ae5b7bee2570f826f846dfeee9889cdaf6fa82dcb2f687d32ab8f1dfd1db/hpargparse-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2544e3b0df9696ebed5cb86d932794107b9446dd0b5eed2966bd4b17cd98a26",
          "md5": "e74adc5e1d43f113fb9d3b7b6b523d22",
          "sha256": "2d5c720321997f9d19dfcb3b9eb9ce1db5990131064d2f97cb7d8ae8dd5a6b19"
        },
        "downloads": -1,
        "filename": "hpargparse-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e74adc5e1d43f113fb9d3b7b6b523d22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11598,
        "upload_time": "2020-05-30T06:20:00",
        "upload_time_iso_8601": "2020-05-30T06:20:00.392085Z",
        "url": "https://files.pythonhosted.org/packages/a2/54/4e3b0df9696ebed5cb86d932794107b9446dd0b5eed2966bd4b17cd98a26/hpargparse-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8094ffef298b5645de46182d48e7d5e7dc26e176e42149d5a300ce10ef1fd1c6",
          "md5": "0370d671b0c2f60b25d3f384016b405f",
          "sha256": "4643c94de3b7298123ac64c16189aad3ac00ac27a8c387eabc48db6a65739c7c"
        },
        "downloads": -1,
        "filename": "hpargparse-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0370d671b0c2f60b25d3f384016b405f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10930,
        "upload_time": "2020-09-22T04:51:50",
        "upload_time_iso_8601": "2020-09-22T04:51:50.565133Z",
        "url": "https://files.pythonhosted.org/packages/80/94/ffef298b5645de46182d48e7d5e7dc26e176e42149d5a300ce10ef1fd1c6/hpargparse-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b72918289e1bfa550e4778bef67c482bb30adad287c6afbc1e99fc02e04cb7e1",
          "md5": "a01c385ed91039ca6964a4029a5b312e",
          "sha256": "8a88ce26d336a303f0d9036b33f672cdb58038591930e950318756ba8a21ecd3"
        },
        "downloads": -1,
        "filename": "hpargparse-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a01c385ed91039ca6964a4029a5b312e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12716,
        "upload_time": "2020-09-22T04:51:54",
        "upload_time_iso_8601": "2020-09-22T04:51:54.558828Z",
        "url": "https://files.pythonhosted.org/packages/b7/29/18289e1bfa550e4778bef67c482bb30adad287c6afbc1e99fc02e04cb7e1/hpargparse-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f82060e41f57a0f42bb4f8cfb16fa2fbffccfa9b47d618c88c51e21fe03f182",
          "md5": "f39e75ed070a9769f9b77497f63fdbf3",
          "sha256": "6eb610efb21565ec096ccbd455f6dd5772a1782320956cc4fd6808434308baf3"
        },
        "downloads": -1,
        "filename": "hpargparse-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f39e75ed070a9769f9b77497f63fdbf3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10946,
        "upload_time": "2020-09-26T02:18:31",
        "upload_time_iso_8601": "2020-09-26T02:18:31.242781Z",
        "url": "https://files.pythonhosted.org/packages/9f/82/060e41f57a0f42bb4f8cfb16fa2fbffccfa9b47d618c88c51e21fe03f182/hpargparse-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14194e53727e2b0668925b1c7bee482b402a46e402063a9639384abe802aab64",
          "md5": "bbf34eebbf73f0602c740ee91620c54c",
          "sha256": "27fad2df8ca7bdff0a31a88aa1d9fee3a6c181f3c38e787da94bb17c1c73bbbe"
        },
        "downloads": -1,
        "filename": "hpargparse-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bbf34eebbf73f0602c740ee91620c54c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13201,
        "upload_time": "2020-09-26T02:18:35",
        "upload_time_iso_8601": "2020-09-26T02:18:35.785644Z",
        "url": "https://files.pythonhosted.org/packages/14/19/4e53727e2b0668925b1c7bee482b402a46e402063a9639384abe802aab64/hpargparse-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1463d1a9af9afa817ecc659475d9e0923e0b60ce437f6f18bd625b8c978f4e2",
          "md5": "b5fdc22f5facdf52459d56533f60806e",
          "sha256": "b4b00ba32eca72b34eba7d614d08ca7f591c7c8238e16278479e2f008785d530"
        },
        "downloads": -1,
        "filename": "hpargparse-0.13.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5fdc22f5facdf52459d56533f60806e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11263,
        "upload_time": "2022-11-08T06:26:50",
        "upload_time_iso_8601": "2022-11-08T06:26:50.189203Z",
        "url": "https://files.pythonhosted.org/packages/c1/46/3d1a9af9afa817ecc659475d9e0923e0b60ce437f6f18bd625b8c978f4e2/hpargparse-0.13.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0643f01e6f021bda894088e1eaa05cbefdbca67062bb8deaaf2ff69584a25521",
          "md5": "11cb5ec5c61cf7305acf876f82abbda0",
          "sha256": "e849cbd7335f5c96b2e23b1cb9486a6a54a1cb5293ddfb11fddbb455964bacb4"
        },
        "downloads": -1,
        "filename": "hpargparse-0.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "11cb5ec5c61cf7305acf876f82abbda0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13438,
        "upload_time": "2022-11-08T06:26:52",
        "upload_time_iso_8601": "2022-11-08T06:26:52.401050Z",
        "url": "https://files.pythonhosted.org/packages/06/43/f01e6f021bda894088e1eaa05cbefdbca67062bb8deaaf2ff69584a25521/hpargparse-0.13.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "783464f0137d71edeb282a859227028bc672cc97ea04db005f831eb177da83ad",
          "md5": "80f89bebda40781a44c245df33ece53c",
          "sha256": "7f58d5bd7fa9ba67955305bb0b5c831f0d664b73b3ca708ad4b9460993203be7"
        },
        "downloads": -1,
        "filename": "hpargparse-0.14.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80f89bebda40781a44c245df33ece53c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11257,
        "upload_time": "2022-12-04T17:36:24",
        "upload_time_iso_8601": "2022-12-04T17:36:24.158435Z",
        "url": "https://files.pythonhosted.org/packages/78/34/64f0137d71edeb282a859227028bc672cc97ea04db005f831eb177da83ad/hpargparse-0.14.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9856a45aa7a0b6ce68033ae8e6b32f2ec21820833de31344845e541f4432795f",
          "md5": "81bb966fd0aea90380dae7bcd08f631e",
          "sha256": "d9cc575215d167783e7355be7a0aaccb6eb08e3d4e8bfa2d8bb27624eaba02c3"
        },
        "downloads": -1,
        "filename": "hpargparse-0.14.0.tar.gz",
        "has_sig": false,
        "md5_digest": "81bb966fd0aea90380dae7bcd08f631e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13450,
        "upload_time": "2022-12-04T17:36:27",
        "upload_time_iso_8601": "2022-12-04T17:36:27.972377Z",
        "url": "https://files.pythonhosted.org/packages/98/56/a45aa7a0b6ce68033ae8e6b32f2ec21820833de31344845e541f4432795f/hpargparse-0.14.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "783464f0137d71edeb282a859227028bc672cc97ea04db005f831eb177da83ad",
        "md5": "80f89bebda40781a44c245df33ece53c",
        "sha256": "7f58d5bd7fa9ba67955305bb0b5c831f0d664b73b3ca708ad4b9460993203be7"
      },
      "downloads": -1,
      "filename": "hpargparse-0.14.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "80f89bebda40781a44c245df33ece53c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11257,
      "upload_time": "2022-12-04T17:36:24",
      "upload_time_iso_8601": "2022-12-04T17:36:24.158435Z",
      "url": "https://files.pythonhosted.org/packages/78/34/64f0137d71edeb282a859227028bc672cc97ea04db005f831eb177da83ad/hpargparse-0.14.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9856a45aa7a0b6ce68033ae8e6b32f2ec21820833de31344845e541f4432795f",
        "md5": "81bb966fd0aea90380dae7bcd08f631e",
        "sha256": "d9cc575215d167783e7355be7a0aaccb6eb08e3d4e8bfa2d8bb27624eaba02c3"
      },
      "downloads": -1,
      "filename": "hpargparse-0.14.0.tar.gz",
      "has_sig": false,
      "md5_digest": "81bb966fd0aea90380dae7bcd08f631e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13450,
      "upload_time": "2022-12-04T17:36:27",
      "upload_time_iso_8601": "2022-12-04T17:36:27.972377Z",
      "url": "https://files.pythonhosted.org/packages/98/56/a45aa7a0b6ce68033ae8e6b32f2ec21820833de31344845e541f4432795f/hpargparse-0.14.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}