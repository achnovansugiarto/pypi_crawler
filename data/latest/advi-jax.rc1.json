{
  "info": {
    "author": "Zeel B Patel",
    "author_email": "patel_zeel@iitgn.ac.in",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## ADVI in JAX\n\n### Design considerations\n\n* ADVI class is an object but `ADVI.objective_fun` is a pure function that can be optimized with `optax` or `jaxopt` or any other jax supported optimizers.\n* variational distribution parameters can be initialized with `ADVI.init` using a `distrax` or `tfp` distribution as an initializer (or any jax distribution that implements `.sample()` method in a similar way).\n* Users can pass the suitable bijectors of class `distrax.Bijector` to the variational distribution.\n* Transformation is directly applied to posterior and thus prior and likelihood stay untouched during the entire process. This way, after the training, the variational distribution is ready for sampling without any additional transformations. Also, this gives freedom to variational distribution to be constructed in more complex way as it is separated from the other parts of the model (see the example below).\n* If we do not change the `key` during the training, the method is called the deterministic ADVI.\n* Users can implement their own `likelihood_log_prob_fun` because likelihood does not necessarily have to be a \ndistribution.\n\n### A Coin Toss Example\n\n```py\nimport jax\nimport jax.numpy as jnp\n\nfrom advi_jax import ADVI\nfrom advi_jax.variational_distributions import MeanField\nfrom advi_jax.init import initialize\nimport tensorflow_probability.substrates.jax as tfp\ndist = tfp.distributions\n\n# Data\ntosses = jnp.array([0, 1, 0, 0, 1, 0])\n\n# Prior and likelihood\nprior_dist = dist.Beta(2.0, 3.0)\nlikelihood_log_prob_fun = lambda theta: dist.Bernoulli(probs=theta).log_prob(tosses).sum()\n\n# ADVI model\nmodel = ADVI(prior_dist, likelihood_log_prob_fun, tosses)\n\n# Variational distribution and bijector\nbijector = distrax.Sigmoid()\nvariational_dist = MeanField(u_mean = jnp.array(0.0), u_scale = jnp.array(0.0), bijector = bijector)\n\n# Initialize the parameters of variational distribution\nkey = jax.random.PRNGKey(0)\nvariational_dist = initialize(key, variational_dist, initializer=dist.Normal(0.0, 1.0))\n\n# Define the value and grad function\nvalue_and_grad_fun = jax.jit(jax.value_and_grad(model.objective_fun, argnums=1), static_argnums=2)\n\n# Do gradient descent!\nlearning_rate = 0.01\nfor i in range(100):\n    key = jax.random.PRNGKey(i)  # If this is constant, this becomes deterministic ADVI\n    loss_value, grads = value_and_grad_fun(key, variational_dist, n_samples=10)\n    variational_dist = variational_dist - learning_rate * grad\n\n# Get the posterior samples\nkey = jax.random.PRNGKey(2)\nposterior_samples = variational_dist.sample(seed=key, sample_shape=(100,))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/patel-zeel/advi_jax",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "advi-jax",
    "package_url": "https://pypi.org/project/advi-jax/",
    "platform": null,
    "project_url": "https://pypi.org/project/advi-jax/",
    "project_urls": {
      "Homepage": "https://github.com/patel-zeel/advi_jax"
    },
    "release_url": "https://pypi.org/project/advi-jax/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "ADVI library for generelized graphical models",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13534439,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b2704fe3a570e2b8315435135282a19111007fc8ce36d414a2f6d40024390d8",
          "md5": "e771f3d017c1bd4d3c2c008ce985c198",
          "sha256": "006a616b270bd0a435e406a24627f02af69a98dc14303ab7582fbb2ce606f5ce"
        },
        "downloads": -1,
        "filename": "advi_jax-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e771f3d017c1bd4d3c2c008ce985c198",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1154206,
        "upload_time": "2022-04-16T21:51:36",
        "upload_time_iso_8601": "2022-04-16T21:51:36.235284Z",
        "url": "https://files.pythonhosted.org/packages/7b/27/04fe3a570e2b8315435135282a19111007fc8ce36d414a2f6d40024390d8/advi_jax-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b2704fe3a570e2b8315435135282a19111007fc8ce36d414a2f6d40024390d8",
        "md5": "e771f3d017c1bd4d3c2c008ce985c198",
        "sha256": "006a616b270bd0a435e406a24627f02af69a98dc14303ab7582fbb2ce606f5ce"
      },
      "downloads": -1,
      "filename": "advi_jax-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e771f3d017c1bd4d3c2c008ce985c198",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1154206,
      "upload_time": "2022-04-16T21:51:36",
      "upload_time_iso_8601": "2022-04-16T21:51:36.235284Z",
      "url": "https://files.pythonhosted.org/packages/7b/27/04fe3a570e2b8315435135282a19111007fc8ce36d414a2f6d40024390d8/advi_jax-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}