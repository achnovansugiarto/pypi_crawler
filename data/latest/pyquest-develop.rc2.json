{
  "info": {
    "author": "Richard Meister",
    "author_email": "Richard Meister <richardm.tug@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Environment :: GPU :: NVIDIA CUDA",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# pyQuEST\n\nA Python interface for the Quantum Exact Simulation Toolkit (QuEST) written mainly in Cython.\n\n## Getting started\nAfter cloning the repository\n\n```console\n$ git clone -b develop --recursive https://github.com/rrmeister/pyQuEST\n$ cd pyQuEST\n```\n\nit is recommended to create a virtual environment, e.g. with `venv`.\n\n```console\n$ python3 -m venv .\n$ source bin/activate\n```\n\nTo configure the QuEST backend for multithreading, GPU usage, float precision, etc., have a look at the QuEST build documentation.\n\nThe package can then be installed using pip.\n\n```console\n$ pip3 install .\n```\n\n## Usage\nAfter successful installation, we can test pyQuEST by importing it and having a look at the environment it is running in.\n\n```python\nIn [1]: import pyquest\n\nIn [2]: pyquest.env\nOut[2]: QuESTEnvironment(cuda=False, openmp=False, mpi=False, num_threads=1, num_ranks=1, precision=2)\n```\n\nThe `QuESTEnvironment` class is automatically instantiated once upon module import and never needs to be called by the user. It contains internals and can return information about the execution environment, as above.\n\n### Example\nThe most important classes are `Register` representing a quantum register, and the operators which can be applied to it. Let's create such a register with 3 qubits and look at its contents.\n\n```python\nIn [3]: from pyquest import Register\n\nIn [4]: from pyquest.unitaries import *\n\nIn [5]: reg = Register(3)\n\nIn [6]: reg[:]\nOut[6]: array([1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j])\n```\n\nLike in QuEST, the state is automatically initialised to the all-zero product state. To apply some gates to it, first import some unitaries and the `Circuit` class.\n\n```python\nIn [7]: from pyquest.unitaries import H, X, Ry\n\nIn [8]: from pyquest import Circuit\n```\n\nThe operators are constructed from their classes with their target qubits, then any additional parameters (like a rotation angle), and then the control qubits as a keyword-only argument, e.g. `Ry(0, .2, controls=[1])` creates a rotation operator about the y-axis of the Bloch sphere by 0.2 radians on qubit 0, controlled by qubit 1. A single operator can be applied to a register `reg` with `reg.apply_operator(X(1))`. To apply multiple operators at once, first collect them into a `Circuit`.\n\n```python\nIn [9]: circ = Circuit([H(0), X(2, controls=[0]), Ry(1, .23, controls=[2])])\n\nIn [10]: reg.apply_circuit(circ)\n\nIn [11]: reg[:]\nOut[11]:\narray([0.70710678+0.j, 0.        +0.j, 0.        +0.j, 0.        +0.j,\n       0.        +0.j, 0.70243619+0.j, 0.        +0.j, 0.08113816+0.j])\n```\n\nMultiplying two registers together will return their inner product. For example, the expectation value of `X(1)` is\n\n```python\nIn [12]: temp = Register(copy_reg=reg)\n\nIn [13]: temp.apply_operator(X(1))\n\nIn [14]: reg * temp\nOut[14]: (0.11398876176759418+0j)\n```\n\nA measurement can be performed with\n\n```python\nIn [15]: from pyquest.gates import M\n\nIn [16]: reg.apply_operator(M(1))\nOut[16]: [0]\n```\n\nRemember that measurements are destructive.\n\n```python\nIn [17]: reg[:]\nOut[17]:\narray([0.70944592+0.j, 0.        +0.j, 0.        +0.j, 0.        +0.j,\n       0.        +0.j, 0.70475988+0.j, 0.        +0.j, 0.        +0.j])\n```\n\nA register can also be directly modified, but may then end up in an invalid state if not properly normalised.\n```python\nIn [18]: reg[:] = 0\n\nIn [19]: reg[:]\nOut[19]: array([0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j])\n\nIn [20]: reg[4] = 1j\n\nIn [21]: reg[:]\nOut[21]: array([0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+1.j, 0.+0.j, 0.+0.j, 0.+0.j])\n```\n\nFor further details on which operators are available and all methods of `Register` and `Circuit`, for now check out the documentation in the source files.\n\n## Development\nIf you want to contribute to the project or just play around with the source, you can use an editable install\n\n```console\n$ pip3 install -e .\n```\n\nbut this temporarily re-installs the build requirements every time the project is compiled and clutters the `pyquest` source directory with build artifacts. It is therefore a good idea to simply install the build requirements manually\n\n```console\n$ pip3 install -r build_requirements.txt\n```\n\nand then call\n\n```console\n$ python3 setup.py build\n```\n\nto build pyQuEST in the `_skbuild/<os_id>/cmake-install/pyquest` folder, or use\n\n```console\n$ python3 setup.py install\n```\nto install the package without telling `pip` about it. This is really only recommended in a virtual environment.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rrmeister/pyQuEST",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyquest-develop",
    "package_url": "https://pypi.org/project/pyquest-develop/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyquest-develop/",
    "project_urls": {
      "Homepage": "https://github.com/rrmeister/pyQuEST"
    },
    "release_url": "https://pypi.org/project/pyquest-develop/0.0.1a0.dev1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python interface for QuEST, early development access.",
    "version": "0.0.1a0.dev1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14973773,
  "releases": {
    "0.0.1a0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6647cec7a1e5854ab1f1482703187be5e55d4760042531249c11152865211570",
          "md5": "1e97e6075bf89848ea69f9b292423506",
          "sha256": "970d9c33ec5e8270ed7ba2fd9994ee78bdd4519df58fa7148499efc22cf3ca2a"
        },
        "downloads": -1,
        "filename": "pyquest-develop-0.0.1a0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e97e6075bf89848ea69f9b292423506",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2270729,
        "upload_time": "2022-08-27T18:50:50",
        "upload_time_iso_8601": "2022-08-27T18:50:50.333203Z",
        "url": "https://files.pythonhosted.org/packages/66/47/cec7a1e5854ab1f1482703187be5e55d4760042531249c11152865211570/pyquest-develop-0.0.1a0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a0.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2417e311305f125352b1a7b1bb049488c33d9c343dfc2aa533ac176713a3a9e5",
          "md5": "ac0e201556feec4456b673ee0c5bd909",
          "sha256": "282809a7f69b202687c86357c2cc46860dbb226e9e8c4be7ed2de1c95ba8392b"
        },
        "downloads": -1,
        "filename": "pyquest-develop-0.0.1a0.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac0e201556feec4456b673ee0c5bd909",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2270796,
        "upload_time": "2022-09-02T11:52:08",
        "upload_time_iso_8601": "2022-09-02T11:52:08.928546Z",
        "url": "https://files.pythonhosted.org/packages/24/17/e311305f125352b1a7b1bb049488c33d9c343dfc2aa533ac176713a3a9e5/pyquest-develop-0.0.1a0.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2417e311305f125352b1a7b1bb049488c33d9c343dfc2aa533ac176713a3a9e5",
        "md5": "ac0e201556feec4456b673ee0c5bd909",
        "sha256": "282809a7f69b202687c86357c2cc46860dbb226e9e8c4be7ed2de1c95ba8392b"
      },
      "downloads": -1,
      "filename": "pyquest-develop-0.0.1a0.dev1.tar.gz",
      "has_sig": false,
      "md5_digest": "ac0e201556feec4456b673ee0c5bd909",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2270796,
      "upload_time": "2022-09-02T11:52:08",
      "upload_time_iso_8601": "2022-09-02T11:52:08.928546Z",
      "url": "https://files.pythonhosted.org/packages/24/17/e311305f125352b1a7b1bb049488c33d9c343dfc2aa533ac176713a3a9e5/pyquest-develop-0.0.1a0.dev1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}