{
  "info": {
    "author": "Francis Gassert",
    "author_email": "francis.gassert@vizzuality.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Cog Worker\n\nScalable geospatial analysis on Cloud Optimized GeoTIFFs.\n\n - **Documentation**: https://vizzuality.github.io/cog_worker\n - **PyPI**: https://pypi.org/project/cog-worker\n\ncog_worker is a simple library to help write scripts to conduct scaleable\nanalysis of gridded data. It's intended to be useful for moderate- to large-scale \nGIS, remote sensing, and machine learning applications.\n\n## Installation\n\n```\npip install cog_worker\n```\n\n## Examples\n\nSee `docs/examples` for Jupyter notebook examples\n\n## Quick start\n\n0. A simple cog_worker script\n\n```python\nfrom rasterio.plot import show\nfrom cog_worker import Manager\n\ndef my_analysis(worker):\n    arr = worker.read('roads_cog.tif')\n    return arr\n\nmanager = Manager(proj='wgs84', scale=0.083333)\narr, bbox = manager.preview(my_analysis)\nshow(arr)\n```\n\n1. Define an analysis function that recieves a cog_worker.Worker as the first parameter.\n\n```python\nfrom cog_worker import Worker, Manager\nimport numpy as np\n\n# Define an analysis function to read and process COG data sources\ndef MyAnalysis(worker: Worker) -> np.ndarray:\n\n    # 1. Read a COG (reprojecting, resampling and clipping as necessary)\n    array: np.ndarray = worker.read('roads_cog.tif')\n\n    # 2. Work on the array\n    # ...\n\n    # 3. Return (or post to blob storage etc.)\n    return array\n```\n\n2. Run your analysis in different scales and projections\n\n```python\nimport rasterio as rio\n\n# Run your analysis using a cog_worker.Manager which handles chunking\nmanager = Manager(\n    proj = 'wgs84',       # any pyproj string\n    scale = 0.083333,  # in projection units (degrees or meters)\n    bounds = (-180, -90, 180, 90),\n    buffer = 128          # buffer pixels when chunking analysis\n)\n\n# preview analysis\narr, bbox = manager.preview(MyAnalysis, max_size=1024)\nrio.plot.show(arr)\n\n# preview analysis chunks\nfor bbox in manager.chunks(chunksize=1500):\n    print(bbox)\n\n# execute analysis chunks sequentially\nfor arr, bbox in manager.chunk_execute(MyAnalysis, chunksize=1500):\n    rio.plot.show(arr)\n\n# generate job execution parameters\nfor params in manager.chunk_params(chunksize=1500):\n    print(params)\n```\n\n3. Write scale-dependent functionsÂ¶\n\n```python\nimport scipy\n\ndef focal_mean(\n    worker: Worker,\n    kernel_radius: float = 1000 # radius in projection units (meters)\n) -> np.ndarray:\n\n    array: np.ndarray = worker.read('sample-geotiff.tif')\n\n    # Access the pixel size at worker.scale\n    kernel_size = kernel_radius * 2 / worker.scale\n    array = scipy.ndimage.uniform_filter(array, kernel_size)\n\n    return array\n```\n\n4. Chunk your analysis and run it in a dask cluster\n\n```python\nfrom cog_worker.distributed import DaskManager\nfrom dask.distributed import LocalCluster, Client\n\n# Set up a Manager with that connects to a Dask cluster\ncluster = LocalCluster()\nclient = Client(cluster)\ndistributed_manager = DaskManager(\n    client,\n    proj = 'wgs84',\n    scale = 0.083333,\n    bounds = (-180, -90, 180, 90),\n    buffer = 128\n)\n\n# Execute in worker pool and save chunks to disk as they complete.\ndistributed_manager.chunk_save('output.tif', MyAnalysis, chunksize=2048)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vizzuality/cog_worker",
    "keywords": "cog geotiff raster gdal rasterio dask",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cog-worker",
    "package_url": "https://pypi.org/project/cog-worker/",
    "platform": "",
    "project_url": "https://pypi.org/project/cog-worker/",
    "project_urls": {
      "Homepage": "https://github.com/vizzuality/cog_worker"
    },
    "release_url": "https://pypi.org/project/cog-worker/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Scalable geospatial analysis on Cloud Optimized GeoTIFFs.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12160600,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1054e4a6b9d7993218fcb9de42321feb496eeac4575302c8c6a2160e4bd8ed4",
          "md5": "62dc7953600c5589e164b185f5bc21d6",
          "sha256": "403656bb91da4f8a9026f27896c500faace1b4faba3b9aec0687cc1ee313d317"
        },
        "downloads": -1,
        "filename": "cog_worker-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62dc7953600c5589e164b185f5bc21d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11412,
        "upload_time": "2021-08-18T19:58:16",
        "upload_time_iso_8601": "2021-08-18T19:58:16.507688Z",
        "url": "https://files.pythonhosted.org/packages/e1/05/4e4a6b9d7993218fcb9de42321feb496eeac4575302c8c6a2160e4bd8ed4/cog_worker-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af84bcae14f0fef810b8416caf60dc65d7009c22054dc8438364a7bd578282ee",
          "md5": "800ed9ad3971dd8f199982346510a6b7",
          "sha256": "15edd7f8a52de7e103b497c65ee92acc67610f1393b38ddf7ea2346c922a1d29"
        },
        "downloads": -1,
        "filename": "cog_worker-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "800ed9ad3971dd8f199982346510a6b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11643,
        "upload_time": "2021-08-18T19:58:14",
        "upload_time_iso_8601": "2021-08-18T19:58:14.790800Z",
        "url": "https://files.pythonhosted.org/packages/af/84/bcae14f0fef810b8416caf60dc65d7009c22054dc8438364a7bd578282ee/cog_worker-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b0718e7cb07d8405da9b366f62cc763fe0fc7b13d9d978a68194eb6c67e12ff",
          "md5": "e2868925f38946e5b902659b5ff3eafa",
          "sha256": "8dc39fde274811a9e707e63a1b4dc3de748cae9e77e00f7372ad4ec06be3f2cc"
        },
        "downloads": -1,
        "filename": "cog_worker-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e2868925f38946e5b902659b5ff3eafa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13378,
        "upload_time": "2021-08-18T20:29:08",
        "upload_time_iso_8601": "2021-08-18T20:29:08.043857Z",
        "url": "https://files.pythonhosted.org/packages/9b/07/18e7cb07d8405da9b366f62cc763fe0fc7b13d9d978a68194eb6c67e12ff/cog_worker-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6d9b00015663b4043f99d3e5e0e40c5968030c4c66099a69682278429b35cc3",
          "md5": "a46abb0a373961a3171290fa426eb3fe",
          "sha256": "fe1284cfc3269e1f360f98e45de91155b11461f56ae6f995c390f075ea9b5f7c"
        },
        "downloads": -1,
        "filename": "cog_worker-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a46abb0a373961a3171290fa426eb3fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13421,
        "upload_time": "2021-10-02T18:03:25",
        "upload_time_iso_8601": "2021-10-02T18:03:25.956462Z",
        "url": "https://files.pythonhosted.org/packages/a6/d9/b00015663b4043f99d3e5e0e40c5968030c4c66099a69682278429b35cc3/cog_worker-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8933b66961c71889affa0ade3620350a31ea3a022d5340b2861a13e926ed17b",
          "md5": "a368c60050d64999fac9bbaac60de996",
          "sha256": "3577065b5c69ad083e782fc27e6ab436bfd524539d41faf10baa64a382a14cbd"
        },
        "downloads": -1,
        "filename": "cog_worker-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a368c60050d64999fac9bbaac60de996",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13570,
        "upload_time": "2021-11-30T01:04:33",
        "upload_time_iso_8601": "2021-11-30T01:04:33.106640Z",
        "url": "https://files.pythonhosted.org/packages/d8/93/3b66961c71889affa0ade3620350a31ea3a022d5340b2861a13e926ed17b/cog_worker-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8933b66961c71889affa0ade3620350a31ea3a022d5340b2861a13e926ed17b",
        "md5": "a368c60050d64999fac9bbaac60de996",
        "sha256": "3577065b5c69ad083e782fc27e6ab436bfd524539d41faf10baa64a382a14cbd"
      },
      "downloads": -1,
      "filename": "cog_worker-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a368c60050d64999fac9bbaac60de996",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13570,
      "upload_time": "2021-11-30T01:04:33",
      "upload_time_iso_8601": "2021-11-30T01:04:33.106640Z",
      "url": "https://files.pythonhosted.org/packages/d8/93/3b66961c71889affa0ade3620350a31ea3a022d5340b2861a13e926ed17b/cog_worker-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}