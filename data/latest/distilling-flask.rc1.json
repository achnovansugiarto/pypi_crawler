{
  "info": {
    "author": "",
    "author_email": "Aaron Schroeder <aaron@trailzealot.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# distilling-flask\n\n>Personal running data display and analysis app, powered by Flask/Dash/Pandas.\n\n[![License](http://img.shields.io/:license-mit-blue.svg)](http://badges.mit-license.org)\n\n---\n\n## Table of Contents                                                                    \n- [Introduction](#introduction)\n- [Dependencies and Installation](#dependencies-and-installation)\n- [Running the App](#running-the-app)<!-- - [Project Status](#project-status) -->\n- [Testing](#testing)\n- [Contact](#contact)\n- [License](#license)\n\n---\n\n## Introduction\n\nGiven a valid client id and client secret for your Strava API app,\nthis app talks to Strava's API and displays running activities in a\nvariety of dashboards using plotly Dash.\n\nI built this app so I could pick apart my raw Strava data, which includes\ndata streams for elevation, grade, and moving/stopped periods. I think Strava\npresents data in an unrealistically favorable way in its app ecosystem,\nand I wanted to work with the raw feeds. There is power in looking at the\nreality of things.\n\nIf you have a [ersponal Strava API application, you can view any of your Strava\nruns in a dashboard powered by Plotly Dash. From there, you can save each\nrun to a database, and view the long-term effects of training in a\ntraining log dashboard.\n\nA [demo app](https://fit.trailzealot.com) is available to view on my website.\n\nSee the [Running the App](#running-the-app) below to see how everything works.\n\n---\n\n## Dependencies and Installation\n\nCheck out [the requirements file](requirements.txt) to see all dependencies.\n\n### Python IDE\n\nClone the repo:\n```\ngit clone https://github.com/aaron-schroeder/distilling-flask.git\n```\n\nChange into the new directory and start a virtual environment. Then, install\nthe requirements:\n```\npip install -r requirements.txt\n```\n\nYou should be able to run the app now. See [Examples](#examples) below for more info.\n\n### Docker container\n\nCreate an image by running the following command in the same dir as `Dockerfile`: \n```sh\ndocker build -t distillingflask:latest .\n```\n\nCreate and start a container from the image with\n```sh\ndocker run --name distillingflask  \\\n    -e MODULE_NAME=application.app  \\\n    -e VARIABLE_NAME=server  \\\n    -e STRAVA_CLIENT_ID=<client id>  \\\n    -e STRAVA_CLIENT_SECRET=<client secret>  \\\n    -e PASSWORD=<password>  \\\n    -d  \\\n    -p 5000:80  \\\n    --rm  \\\n    distillingflask:latest\n```\n\n## Running the App\n\n### Locally\n\n#### Strava-connected, with your Strava app client id and client secret\n\nThis option pretty much gets you the full-blown app running on your local machine.\nYou can now authorize the app to use the data from your Strava account.\n\nTo do this, you must:\n- Create your own API application [on Strava's website](https://www.strava.com/settings/api)\n- Within the [\"My API application\"](https://www.strava.com/settings/api)\n  section of your Strava settings:\n  - Set the authorization callback domain for your app to `localhost`\n  - Copy your app's \"client ID\" and \"client secret\" somewhere secure\n\nTo run the app using Flask's CLI:\n```\nSTRAVA_CLIENT_ID=${STRAVA_CLIENT_ID}  \\\nSTRAVA_CLIENT_SECRET=${STRAVA_CLIENT_SECRET}  \\\nPASSWORD=super_secret_password  \\\nflask --app application\n```\n\n![List of activities](https://github.com/aaron-schroeder/distilling-flask/blob/master/images/activity_list_screenshot.jpg?raw=true)\n\n![Saved activities in training log dashboard](https://github.com/aaron-schroeder/distilling-flask/blob/master/images/training_log_screenshot.jpg?raw=true)\n\n#### Strava-disconnected, allowing a subset of features.\n\nYou don't need to set your app up with Strava to access some of\nits features like the file upload analysis dashboard.\nThe command to run this configuration of the app is simpler.\n\nFlask CLI:\n```sh\nPASSWORD=super_secret_password  \\\nflask --app 'application:create_app(\"dummy\")'\n```\n\ndistilling-flask CLI:\nTo use `df` (the distilling-flask CLI), first install the package locally with\n`pip install -e .`\n```\nPASSWORD=super_secret_password  \\\ndf rundummy\n```\n\nIn a python script:\n```python\nimport os\n\nimport application\n\n\n# Choose the password for this app. Ideally don't use your Strava password.\nos.environ['PASSWORD'] = 'super_secret_password'\napp = application.create_app()\napp.run()\n```\n\nThere are a number of optional settings that control the behavior of the\nsimulated Strava client. They can all be set with environment variables,\na `.env` file, or (in the case of the distilling-flask CLI) arguments to\nthe command.\n- `MOCK_STRAVALIB_ACTIVITY_COUNT`\n- `MOCK_STRAVALIB_SHORT_LIMIT`\n- `MOCK_STRAVALIB_LONG_LIMIT`\n- `MOCK_STRAVALIB_SHORT_USAGE`\n- `MOCK_STRAVALIB_LONG_USAGE`\n\nFiletypes accepted by the upload-to-analyze dashboard:\n  - `fit` file (requires [`fitparse`](https://github.com/dtcooper/python-fitparse) and [`dateutil`](https://dateutil.readthedocs.io/en/stable/))\n  - `tcx` file (requires [`activereader`](https://github.com/aaron-schroeder/activereader))\n  - `gpx` file (requires [`activereader`](https://github.com/aaron-schroeder/activereader))\n  - `csv` file (requires that headers adhere to [the naming convention defined\n    by the application](application/plotlydash/figure_layout.py#L4-L11))\n  <!--\n  - `csv` file from Wahoo Fitness (WIP) \n  -->\n\n![The dashboard in action](https://github.com/aaron-schroeder/distilling-flask/blob/master/images/db_screenshot.jpg?raw=true)\n\n### Production\n\nTo create an instance of the app with production-oriented settings, call\n`create_app(config_name='prod')`.\n\nLike the development configuration, the production configuration of \ndefaults to using an on-disk SQLite database, or any database \nspecified by the `DATABASE_URL` environment variable\n(including in-memory SQLite with the url `sqlite://`)\n\nThe production configuration also allows for the use of a PostgreSQL database\nif the right environment variables (starting with `POSTGRES_`) are set.\n\n```\nSECRET_KEY=random_secret_key  \\\nSTRAVA_CLIENT_ID=00000  \\\nSTRAVA_CLIENT_SECRET=gobbledygoop  \\\nPOSTGRES_DB=db_name  \\\nPOSTGRES_PORT=5432  \\\nPOSTGRES_USER=user  \\\nPOSTGRES_PW=password  \\\nPOSTGRES_URL=dburl.example.com  \\\nflask --app \"application:create_app('prod')\"\n```\n\n### `StreamLabel` and custom accessors for `pandas` objects\n\nCreate a `DataFrame` where each row represents a record, and each column \nrepresents a data stream with a unique (field, source) id.\n```python\nimport pandas as pd\nfrom application.labels import StreamLabel\n\ndf = pd.DataFrame.from_dict({\n    StreamLabel('time', 'strava'): [0, 1, 2, 3, 4, 5],\n    StreamLabel('speed', 'strava'): [3.0, 3.2, 3.4, 3.6, 3.8, 3.6],\n    StreamLabel('speed', 'garmin'): [2.9, 3.1, 3.3, 3.5, 3.7, 3.8],\n})\n```\n\nUse the custom accessor to work with this specifically-formatted DataFrame.\n```\n>>> df.sl.has_source('strava')\nTrue\n\n>>> df.sl.has_source('device')\nFalse\n\n>>> df.sl.source('strava')\n\n   time (strava)  speed (strava)\n0              0             3.0\n1              1             3.2\n2              2             3.4\n3              3             3.6\n4              4             3.8\n5              5             3.6\n\n>>> df.sl.has_fields('speed', 'time')\nTrue\n\n>>> df.sl.field('speed')\n\n   speed (strava)  speed (garmin)\n0             3.0             2.9\n1             3.2             3.1\n2             3.4             3.3\n3             3.6             3.5\n4             3.8             3.7\n5             3.6             3.8\n\n>>> StreamLabel.from_str('speed~new_src')\nspeed (new_src)\n```\n\n---\n\n## Testing\n\n### Functional testing\n\nThis requires user-supplied files in the following locations:\n  - `client_secrets.json`\n  - `tests/functional_tests/strava_credentials.json`\n\n```sh\npip install -r requirements_dev.txt\npython -m unittest discover -p test_*.py tests.functional_tests\n```\n\n### Unit testing\n```sh\npython -m unittest discover -p test_*.py tests.unit_tests\n```\n\n## Project Status\n\n### Current Activities\n\nThe Flask app is becoming a full-fledged training log. Strava activities\ncan be viewed in a dashboard and saved to a database, and soon uploaded\nfiles will be saveable too. The long-term effects of training can be \nvisualized in a training log dashboard, which is still evolving.\n\n### Future Work\n\nComing up, I'd like to set up pipelines that take running activity data from\na variety of sources and filetypes, and displays the time series in a common\ninterface. To that end, I've created a class to be used as column labels in\n`pandas.DataFrame`. `StreamLabel` keeps track of both the field name and the\nsource of data streams. This facilitates a common, recognizable labeling\nsystem for data streams stored in `DataFrame` columns. I've created custom \naccessors for `pandas.DataFrame` and `pandas.Index` to work with `StreamLabel`.\n\n---\n\n## Contact\n\nYou can get in touch with me at one of the following places:\n\n[//]: # (- Website: <a href=\"https://trailzealot.com\" target=\"_blank\">trailzealot.com</a>)\n- GitHub: <a href=\"https://github.com/aaron-schroeder\" target=\"_blank\">github.com/aaron-schroeder</a>\n- LinkedIn: <a href=\"https://www.linkedin.com/in/aarondschroeder/\" target=\"_blank\">linkedin.com/in/aarondschroeder</a>\n- Twitter: <a href=\"https://twitter.com/trailzealot\" target=\"_blank\">@trailzealot</a>\n- Instagram: <a href=\"https://instagram.com/trailzealot\" target=\"_blank\">@trailzealot</a>\n\n---\n\n## License\n\n[![License](http://img.shields.io/:license-mit-blue.svg)](http://badges.mit-license.org)\n\nThis project is licensed under the MIT License. See\n[LICENSE](https://github.com/aaron-schroeder/distilling-flask/blob/master/LICENSE)\nfile for details.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright 2022 Aaron Schroeder  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "distilling-flask",
    "package_url": "https://pypi.org/project/distilling-flask/",
    "platform": null,
    "project_url": "https://pypi.org/project/distilling-flask/",
    "project_urls": {
      "Homepage": "https://github.com/aaron-schroeder/distilling-flask"
    },
    "release_url": "https://pypi.org/project/distilling-flask/0.0.1a1/",
    "requires_dist": [
      "dash (>=2.5.0)",
      "dash-bootstrap-components (>=1.0.0)",
      "Flask (>=2.1.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Personal running data analysis and visualization, powered by Flask, Dash, and Pandas.",
    "version": "0.0.1a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17384527,
  "releases": {
    "0.0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd89255167e7495c8e359e8b63a67a13007356efa2ee5d5889d75df7aa5e8568",
          "md5": "b2e230df7e34f72c47d9628539938a76",
          "sha256": "96270586959bb75e8b52ed863a0ef060a7ed456782d80ebb81695e532041c1b4"
        },
        "downloads": -1,
        "filename": "distilling_flask-0.0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2e230df7e34f72c47d9628539938a76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 76217,
        "upload_time": "2023-03-21T18:24:07",
        "upload_time_iso_8601": "2023-03-21T18:24:07.497594Z",
        "url": "https://files.pythonhosted.org/packages/bd/89/255167e7495c8e359e8b63a67a13007356efa2ee5d5889d75df7aa5e8568/distilling_flask-0.0.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59c0a838935b9f6bf1b005d6a4202e1f0a577677c6ed753b26713f3678d71f79",
          "md5": "23c5ad8d5381e5e202951258d0506504",
          "sha256": "7ce73c001e98e5c49cf974f9669c049cd3979eb621d75305a6e02b55dd28184b"
        },
        "downloads": -1,
        "filename": "distilling_flask-0.0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "23c5ad8d5381e5e202951258d0506504",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 89623,
        "upload_time": "2023-03-21T18:24:10",
        "upload_time_iso_8601": "2023-03-21T18:24:10.260857Z",
        "url": "https://files.pythonhosted.org/packages/59/c0/a838935b9f6bf1b005d6a4202e1f0a577677c6ed753b26713f3678d71f79/distilling_flask-0.0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd89255167e7495c8e359e8b63a67a13007356efa2ee5d5889d75df7aa5e8568",
        "md5": "b2e230df7e34f72c47d9628539938a76",
        "sha256": "96270586959bb75e8b52ed863a0ef060a7ed456782d80ebb81695e532041c1b4"
      },
      "downloads": -1,
      "filename": "distilling_flask-0.0.1a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b2e230df7e34f72c47d9628539938a76",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 76217,
      "upload_time": "2023-03-21T18:24:07",
      "upload_time_iso_8601": "2023-03-21T18:24:07.497594Z",
      "url": "https://files.pythonhosted.org/packages/bd/89/255167e7495c8e359e8b63a67a13007356efa2ee5d5889d75df7aa5e8568/distilling_flask-0.0.1a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59c0a838935b9f6bf1b005d6a4202e1f0a577677c6ed753b26713f3678d71f79",
        "md5": "23c5ad8d5381e5e202951258d0506504",
        "sha256": "7ce73c001e98e5c49cf974f9669c049cd3979eb621d75305a6e02b55dd28184b"
      },
      "downloads": -1,
      "filename": "distilling_flask-0.0.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "23c5ad8d5381e5e202951258d0506504",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 89623,
      "upload_time": "2023-03-21T18:24:10",
      "upload_time_iso_8601": "2023-03-21T18:24:10.260857Z",
      "url": "https://files.pythonhosted.org/packages/59/c0/a838935b9f6bf1b005d6a4202e1f0a577677c6ed753b26713f3678d71f79/distilling_flask-0.0.1a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}