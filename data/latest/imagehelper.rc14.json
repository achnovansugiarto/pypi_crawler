{
  "info": {
    "author": "Jonathan Vanasco",
    "author_email": "jonathan@findmeon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Graphics :: Graphics Conversion",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![Python package](https://github.com/jvanasco/imagehelper/workflows/Python%20package/badge.svg)\n\n## Overview\n\nThe `imagehelper` package offers a simple interface for image resizing,\noptimizing and uploading image assets. Core image resizing operations are handled\nby the `Pillow` (PIL) package; S3 uploading is handled by `boto3`, and there are\nhooks for optimizing the images with the commandline tools: `advpng`, `gifsicle`,\n`jpegtran`, `jpegoptim`, `optipng` and `pngcrush.`\n\nThis library does not actually resize the images, it is used to define \"recipes\"\nfor resizing images with Pillow and uploading them to S3 with boto3.\n\n## About\n\n`imagehelper` is a fork of internal image helping routines that were built for\nFindMeOn.com around 2005. It has been actively maintained as an open source\nproject since at least 2012.\n\n`imagehelper` allows you to define a schema for resizing images as a simple\n`dict`, and will then easily resize them.\n\n`imagehelper` also supports uploading the resized images - and an archival\nversion - onto Amazon's S3 service.\n\n`imagehelper` requires `Pillow`. Earlier versions relied on `PIL` or supported\nboth. This really is an old package!\n\nThis package will try to import `boto3` for communicating with AmazonS3.\nIf you don't want to use S3, no worries - that is only optional and you can save\nto a local file.\n\nThe package was originally aimed at thumbnails, but it works for all resizing\nneeds that are aimed at downsampling images.\n\nIf you have optimization applications like `gifsicle`, `pngcrush` and `jpegtran`\ninstalled in your environment, you can 'optimize' the output (and archive) files.\n\nThis is a barebones package that has NO FRAMEWORK DEPENDENCIES - which is a good\nthing. You define image transformation recipes using a simple dict, the\npackage does the rest.\n\nThisÂ package also tries to avoid writing to disk whenever possible, tempfiles\n(spooled) are avoided unless an external program is called. This package tries to\npipe everything through file-like in-memory objects.\n\nI could only find a single tool for resizing thumbnails on PyPi that did not\nrequire a framework, and that's really annoying.\n\nThe package is a bit awkard to use for a single task, but it was designed for\nrepetitive tasks - as in a web application.\n\nA typical usage is illustrated in the sections below. Also check the `demo.py`\nfile to see how flexible this can be.\n\nThis package has been used in production for over a decade.\n\nIt supports Python2.7 and Python3. A lot of things could be done better and\nshould be done better, but this works and is relatively fast.\n\n\n## Why ?\n\nImagine that you have a site that allows for user generated uploads, or you\nwant to make video stills...\n\nYou can create a schema of image sizes...\n\n    IMAGE_SIZES = {\n        'thumb': {\n            'width': 32,\n            'height': 32,\n            'save_quality': 50,\n            'suffix': 't1',\n            'format':'JPEG',\n            'constraint-method': 'fit-within',\n            'filename_template': '%(guid)s-120x120.%(format)s',\n        },\n        'og:image': {\n            'width': 200,\n            'height': 200,\n            'save_quality': 50,\n            'suffix': 'og',\n            'format':'JPEG',\n            'constraint-method': 'ensure-minimum',\n            'filename_template': '%(guid)s-og.%(format)s',\n        },\n    }\n\nAnd easily upload them:\n\n    # create some configs in your app\n\n    # config object for IMAGE_SIZES\n    resizerConfig = imagehelper.resizer.ResizerConfig(\n        resizesSchema=IMAGE_SIZES,\n        optimize_original=True,\n        optimize_resized=True,\n    )\n\n    # config object for S3\n    saverConfig= imagehelper.saver.s3.SaverConfig(\n        key_public = AWS_KEY_PUBLIC,\n        key_private = AWS_KEY_SECRET,\n        bucket_public_name = AWS_BUCKET_PUBLIC,\n        bucket_archive_name = AWS_BUCKET_ARCHIVE,\n    )\n\n    # create some factories.\n    # factories are unnecessary. they just generate the workhorse objects for you\n    # they're very useful for cutting down code\n    # build one, then stash in your app\n\n    USE_FACTORY = True\n    if USE_FACTORY:\n        rFactory = imagehelper.resizer.ResizerFactory(resizerConfig=resizerConfig)\n        s3Factory = imagehelper.saver.s3.s3ManagerFactory(saverConfig=saverConfig, resizerConfig=rConfig, saverLogger=saverLogger)\n\n        resizer = rFactory.resizer()\n        s3Manager = s3Factory.saver_manager()\n\n    else:\n        resizer = imagehelper.resizer.Resizer(resizerConfig=resizerConfig)\n        s3Manager = imagehelper.saver.s3.s3Manager(saverConfig=saverConfig, resizerConfig=resizerConfig, saverLogger=saverLogger)\n\n    # resize !\n    resizedImages = resizer.resize(imagefile=get_imagefile())\n\n    # upload the resized items\n    uploaded_files = s3Manager.files_save(resizedImages, guid=\"123\")\n\n    # want to delete them?\n    deleted = s3Manager.files_delete(uploaded_files)\n\nBehind the scenes, imagehelper does all the math and uploading.\n\n\n## Resizing Options\n\n* `fit-within`\n> Resizes item to fit within the bounding box, on both height and width.\n> The resulting image will be the size of the bounding box or smaller.\n\n* `fit-within:crop-to`\n> Resizes the item along whichever axis ensures the bounding box is 100% full, then crops.\n> The resulting image will be the size of the bounding box.\n\n* `fit-within:ensure-width`\n> Resizes item to fit within the bounding box, scaling height to ensure 100% width.\n> The resulting image will be the size of the bounding box.\n\n* `fit-within:ensure-height`\n> Resizes item to fit within the bounding box, scaling width to ensure 100% height.\n> The resulting image will be the size of the bounding box.\n\n* `smallest:ensure-minimum`\n> Resizes the item to cover the bounding box on both axis.\n> One dimension may be larger than the bounding box.\n\n* `exact:no-resize`\n> Do not scale! Raises an exception if a scale must be made.\n> This is a convenience for just saving/re-encoding files.\n> For example, 100x100 must receive an image that is 100x100.\n\n* `exact:proportion`\n> Attempt to scale the image to an exact size. Raise an exception if it can't.\n> Usually this is used to resample a 1:1 image, however this might be used to drop\n> an image to a specific proportion. i.e. 300x400 can scale to 30x40, 300x400\n> but not 30x50.\n\n\n## Usage...\n\nCheck out the demo.py module - it offers a narrative demo of how to use the\npackage. Be sure to include some Amazon S3 credentials in your environment.\n\nimagehelper is NOT designed for one-off resizing needs.\nit's designed for a use in applications where you're repeatedly doing the same resizing.\n\nThe general program flow is this:\n\n1. Create `Configuration` objects to hold instructions\n2. Create `Factory` objects to hold the `Configuration` objects.\n3. Obtain a `Worker` object from the `Factory` to do the actual work (resizing or uploading)\n\nYou should typically create \"Configuration\" and \"Factory\" objects during\napplication startup, and create/destroy a work for each request or event.\n\nHere's a more in depth description\n\n1. Create a dict of \"photo resizes\" describing your schema.\n\n* keys prepended with `save_` are passed on to PIL during the call to `save`\n  (the prefix is removed)\n* you can decide what type of resizing you want.  sometimes you want to crop,\n  other times you want to fit within a box, other times you want to ensure a\n  height or width. this makes your designers happy.\n\n2. create an array of `image_resizes_selected` -- the keys in the above schema\n   you want to resize.\n\n3. you can pass these arguments into the routines themselves, or generate a\n   `imagehelper.resizer.ResizerConfig` object or a `imagehelper.resizer.ResizerFactory`\n   that you stash into your application.\n\n4. If you're saving to AmazonS3, create an `imagehelper.saver.s3.SaverConfig`\n   config object to store your info. note that you can specify a public and\n   private bucket.\n\n   * resized thumbnails are saved to the public bucket\n   * the original item is optionally saved to the archive, which is not viewable to the public.\n     this is so you can do different sizing schemes in the future.\n\n5. You can define your own Amazon S3 logger, a class that provides two methods:\n\n    <code><pre>\n    class SaverLogger(object):\n        def log_save(self, bucket_name=None, key=None, file_size=None, file_md5=None):\n            pass\n        def log_delete(self, bucket_name=None, key=None):\n            pass\n    </pre></code>\n\nThis will allow you to log what is uploaded into Amazon AWS on your side.\nThis is hugely helpful, because Amazon uploads are not transaction safe to your\napplication logic. There are some built-in precautions for this... but it's best\nto play things safely.\n\nItems are currented saved to Amazon S3 as such:\n\nPublic:\n\n* Template: `%(guid)s-%(suffix)s.%(format)s`\n* Tokens:\n  * `guid`: you must supply a guid for the file\n  * `suffix`: this is set in the resize schema\n  * `format`: this is dictated by the PIL format type\n\nArchive:\n\n* Template: `%(guid)s.%(format)s`\n* Tokens:\n  * `guid`: you must supply a guid for the file\n  * `format`: this is dictated by the original format type PIL found\n\nHere is an example photo_resize schema:\n\n    'jpeg_thumbnail-120': {\n        'width': 120,\n        'height': 120,\n        'save_quality': 50,\n        'suffix': 't120',\n        'format':'JPEG',\n        'constraint-method': 'fit-within',\n        's3_bucket_public': 'my-test',\n        'filename_template': '%(guid)s-%(suffix)s.%(format)s',\n    },\n\n\nThis would create a file on Amazon S3 with a `guid` you supply, such as `123123123`:\n\n    /my-test/123123123-t120.jpg\n    _bucket_/_guid_-_suffix_._format_\n\nstring templates may be used to affect how this is saved. read the source for more info.\n\n## Transactional Support\n\nIf you upload something via `imagehelper.saver.s3.S3Uploader().s3_upload()`, the\ntask is considered to be \"all or nothing\".\n\nThe actual uploading occurs within a try/except block, and a failure will \"rollback\"\nand delete everything that has been successfully uploaded.\n\nIf you want to integrate with something like the Zope `transaction` package, `imagehelper.saver.s3.S3Uploader().files_delete()` is a public function that\nexpects as input the output of the `s3_upload` function -- a `dict` of `tuples`\nwhere the `keys` are resize names (from the schema) and the `values` are the\n`(filename, bucket)`.\n\nYou can also define a custom subclass of `imagehelper.saver.s3.SaverLogger` that\nsupports the following methods:\n\n* `log_save`(`self`, `bucket_name`=None, `key`=None, `file_size`=None, `file_md5`=None)\n* `log_delete`(`self`, `bucket_name`=None, `key`=None)\n\nEvery successful 'action' is sent to the logger. A valid transaction to upload 5\nsizes will have 5 calls to `log_save`, an invalid transaction will have a\n`log_delete` call for every successful upload.\n\nThis was designed for a variety of use cases:\n\n* log activity to a file or non-transactional database connection, you get some\n  efficient bookkeeping of s3 activity and can audit those files to ensure there\n  is no orphan data in your s3 buckts.\n* log activity to StatsD or another metrics app to show how much activity goes on\n\n\n## FAQ - package components\n\n* `errors` - custom exceptions\n* `image_wrapper` - actual image reading/writing, resize operations\n* `resizer` - manage resizing operations\n* `s3` - manage s3 communication\n* `utils` - miscellaneous utility fucntions\n\n\n## FAQ - deleting existing files ?\n\nIf you don't have a current mapping of the files to delete in s3 but you do have\nthe archive filename and a guid, you can easily generate what they would be based\noff a resizerConfig/schema and the archived filename.\n\n    ## fake the sizes that would be generated off a resize\n    resizer = imagehelper.resizer.Resizer(\n        resizerConfig=resizerConfig,\n        optimize_original=True,\n        optimize_resized=True,\n    )\n    fakedResizedImages = resizer.fake_resultset(\n        original_filename=archive_filename\n    )\n\n    ## generate the filenames\n    deleter = imagehelper.saver.s3.SaverManager(\n        saverConfig=saverConfig, resizerConfig=resizerConfig\n    )\n    targetFilenames = build.generate_filenames(fakedResizedImages, guid)\n\nThe `original_filename` is needed in `fake_resultset`, because a resultset tracks\nthe original file and it's type. As of the `0.1.0` branch, only the extension\nof the filename is utilized.\n\n\n## FAQ - validate uploaded image ?\n\nThis is simple.\n\n1. Create a dumb resizer factory\n\n    nullResizerFactory = imagehelper.resizer.ResizerFactory()\n\n2. Validate it\n\n    try:\n        resizer = nullResizerFactory.resizer(\n            imagefile = uploaded_image_file,\n        )\n    except imagehelper.errors.ImageError_Parsing as exc:\n        raise ValueError('Invalid Filetype')\n\n    # grab the original file for advanced ops\n    resizerImage = resizer.get_original()\n    if resizerImage.file_size > MAX_FILESIZE_PHOTO_UPLOAD:\n        raise ValueError('Too Big!')\n\n\nPassing an imagefile to `ResizerFactory.resizer` or `Resizer.__init__` will\nregister the file with the resizer. This action creates an\n`image_wrapper.ImageWrapper` object from the file, which contains the original\nfile and a PIL/Pillow object. If PIL/Pillow can not read the file, an error\nwill be raised.\n\n\n## FAQ - what sort of file types are supported ?\n\nAll the reading and resizing of image formats happens in PIL/Pillow.\n\nimagehelper tries to support most common file objects\n\n`imagehelper.image_wrapper.ImageWrapper` our core class for reading files,\nsupports reading the following file types\n\n* `file (native python object, i.e. `types.FileType`)\n* `cgi.FieldStorage`\n* `StringIO.StringIO`, `cStringIO.InputType`, `cStringIO.OutputType`\n\nWe try to \"be kind and rewind\" and call `seek(0)` on the underlying file when\nappropriate - but sometimes we forget.\n\nThe resize operations accepts the following file kwargs:\n\n* `imagefile` -- one of the above file objects\n* `imageWrapper` -- an instance of `imagehelper.image_wrapper.ImageWrapper`\n* `file_b64` -- a base64 encoded file datastream. this will decoded into a\n`cStringIO` object for operations.\n\n\n## FAQ - using celery ?\n\nCelery message brokers require serialized data.\n\nIn order to pass the task to celery, you will need to serialize/deserialize the\ndata. imagehelper provides convenience functionality for this\n\n    nullResizerFactory = imagehelper.resizer.ResizerFactory()\n    resizer = nullResizerFactory.resizer(\n        imagefile = uploaded_file,\n    )\n\n    # grab the original file for advanced ops\n    resizerImage = resizer.get_original()\n\n    # serialize the image\n    instructions = {\n        'image_md5': resizerImage.file_md5,\n        'image_b64': resizerImage.file_b64,\n        'image_format': resizerImage.format,\n    }\n\n    # send to celery\n    deferred_task = celery_tasks.do_something.apply_async((id, instructions,))\n\n\n    # in celery...\n    @task\n    def do_something(id, instructions):\n        ## resize the images\n        resizer = resizerFactory.resizer(\n            file_b64 = instructions['image_b64'],\n        )\n        resizedImages = resizer.resize()\n\n\n## How are optimizations handled?\n\nImage optimizations are handled by piping the image through external programs.\nThe idea (and settings) were borrowed from the mac app\nImageOptim (https://github.com/pornel/ImageOptim or https://imageoptim.com/)\n\nThe default image Optimizations are LOSSLESS\n\nFine-grained control of image optimization strategies is achieved on a package\nlevel basis. In the future this could be handled within configuration objects.\nThis strategy was chosen for 2 reasons:\n\n1. The config objects were getting complex\n2. Choosing an image optimization level is more of a \"machine\" concern than a\n   \"program\" concern.\n\nNot everyone has every program installed on their machines.\n\n`imagehelper` will attempt to autodetect what is available on the first\ninvocation of `.optimize`\n\nIf you are on a forking server, you can do this before the fork and save yourself\na tiny bit of cpu cycles. yay.\n\n    import imagehelper\n    imagehelper.image_wrapper.autodetect_support()\n\nThe `autodetect_support` routing will set\n\n    imagehelper.image_wrapper[ program ]['available']\n\nIf you want to enable/disable them manuall, just edit\n\n    imagehelper.image_wrapper[ program ]['use']\n\nYou can also set a custom binary\n\n    imagehelper.image_wrapper[ program ]['binary']\n\nAutodetection is handled by invoking each program's help command to see if it is\ninstalled.\n\n\n### JPEG\n\njpegs are optimized in a two-stage process.\n\n    jpegtran is used to do an initial optimization and ensure a progressive jpeg.\n    all jpeg markers are preserved.\n    jpegoptim is used on the output of the above, in this stage all jpeg markers\n    are removed.\n\nThe exact arguments are:\n\n    \"\"\"jpegtran -copy all -optimize -progressive -outfile %s %s\"\"\" % (fileOutput.name, fileInput.name)\n    \"\"\"jpegoptim --strip-all -q %s\"\"\" % (fileOutput.name, )\n\n### GIF\n\nGifsicle is given the following params\n    -O3\n    --no-comments\n    --no-names\n    --same-delay\n    --same-loopcount\n    --no-warnings\n\nThe `03` level can be affected by changing the package level variable to a new integer (1-3)\n\n    imagehelper.image_wrapper.OPTIMIZE_GIFSICLE_LEVEL = 3\n\n\n### PNG\n\nThe package will try to use multiple png operators in sequence.\n\nYou can disable any png operator by changing the package level variable to `False`\n\n    OPTIMIZE_PNGCRUSH_USE = True\n    OPTIMIZE_OPTIPNG_USE = True\n    OPTIMIZE_ADVPNG_USE = True\n\n#### pngcrush\n\n    pngcrush -rem alla -nofilecheck -bail -blacken -reduce -cc\n\n#### optipng\n\n    optipng -i0 -o3\n\nThe optipng level can be set by setting the package level variable to a new integer (1-3)\n\n    OPTIMIZE_OPTIPNG_LEVEL = 3  # 6 would be best\n\n#### advpng\n\n    advpng -4 -z\n\nThe advpng level can be set by setting the package level variable to a new integer (1-4)\n\n    OPTIMIZE_ADVPNG_LEVEL = 4  # 4 is max\n\n\n### what external libraries are needed to be installed\n\nNone. These are all optional!  But here you go\n\n\n#### ubuntu\n\n    apt-get install advancecomp  # advpng\n    apt-get install gifsicle\n    apt-get install libjpeg-turbo-progs  # jpegtran\n    apt-get install jpegoptim\n    apt-get install optipng\n    apt-get install pngcrush\n\n\n## ToDo\n\nSee `TODO.txt`\n\n\n## License\n\nThe code is licensed under the BSD license.\n\nThe sample image is licensed under the Creative Commons\nAttribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0) http://creativecommons.org/licenses/by-nc-nd/3.0/",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jvanasco/imagehelper",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imagehelper",
    "package_url": "https://pypi.org/project/imagehelper/",
    "platform": "",
    "project_url": "https://pypi.org/project/imagehelper/",
    "project_urls": {
      "Homepage": "http://github.com/jvanasco/imagehelper"
    },
    "release_url": "https://pypi.org/project/imagehelper/0.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple utilites for image resizing and uploading and stuff like that.",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10948904,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90eee9c8f12d423047871195dfb4f8f63071177715a23e7b3b814dab622d4efd",
          "md5": "46e39a6860481c21564fea7591871f5f",
          "sha256": "985ba05052f919f2d8d1b7865eddeec0def1164d7c7d96398f0d92c83d8984ac"
        },
        "downloads": -1,
        "filename": "imagehelper-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "46e39a6860481c21564fea7591871f5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4358,
        "upload_time": "2012-03-15T22:44:14",
        "upload_time_iso_8601": "2012-03-15T22:44:14.805749Z",
        "url": "https://files.pythonhosted.org/packages/90/ee/e9c8f12d423047871195dfb4f8f63071177715a23e7b3b814dab622d4efd/imagehelper-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "182df6037bc9ec8b54722451f5060e31453cec49c23bc549004b7278de5b9203",
          "md5": "8a229f3204dcd70eba2c0ca834308778",
          "sha256": "0d7ed491cfb892d7b2261fd9a79e2e340eba95d49e6101cd08b0ceac58280925"
        },
        "downloads": -1,
        "filename": "imagehelper-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8a229f3204dcd70eba2c0ca834308778",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10624,
        "upload_time": "2012-06-07T21:00:19",
        "upload_time_iso_8601": "2012-06-07T21:00:19.777142Z",
        "url": "https://files.pythonhosted.org/packages/18/2d/f6037bc9ec8b54722451f5060e31453cec49c23bc549004b7278de5b9203/imagehelper-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.rc9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b46a6240e25adb8f26b9c0cdd8ce20aa6affb53be46ffe4350236d258110080d",
          "md5": "792a4896c3f4c2306be8b591ce0e9c88",
          "sha256": "be5f3aa6b94f6f91ed9b87802fac6674a50b5753203587d6d1c167fcaa7ffd93"
        },
        "downloads": -1,
        "filename": "imagehelper-0.1.0.rc9.tar.gz",
        "has_sig": false,
        "md5_digest": "792a4896c3f4c2306be8b591ce0e9c88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15386,
        "upload_time": "2014-03-21T15:59:42",
        "upload_time_iso_8601": "2014-03-21T15:59:42.516085Z",
        "url": "https://files.pythonhosted.org/packages/b4/6a/6240e25adb8f26b9c0cdd8ce20aa6affb53be46ffe4350236d258110080d/imagehelper-0.1.0.rc9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c6c34527e961d121e51e42b18cdc2f2de13057ea078843e001321b3d58c7dc7",
          "md5": "872c90eeba93f8c586beb5f68a479680",
          "sha256": "08fbf13de6710bc1835cdd866a53f70042f2536443fbf09cf270e5e823a5cada"
        },
        "downloads": -1,
        "filename": "imagehelper-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "872c90eeba93f8c586beb5f68a479680",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16842,
        "upload_time": "2015-04-10T23:22:15",
        "upload_time_iso_8601": "2015-04-10T23:22:15.175611Z",
        "url": "https://files.pythonhosted.org/packages/3c/6c/34527e961d121e51e42b18cdc2f2de13057ea078843e001321b3d58c7dc7/imagehelper-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cddfd712c26120f0cb03c0e29d5917106241ecad1c4f22de8554957721898ba",
          "md5": "ba9635ae75724297f90a57efa8d04fcd",
          "sha256": "e7c70d92c0ca036ca7d4fcd7c6c8bf67db0414e6e6e37d95843f047bfb0f7763"
        },
        "downloads": -1,
        "filename": "imagehelper-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ba9635ae75724297f90a57efa8d04fcd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20106,
        "upload_time": "2016-04-14T02:42:54",
        "upload_time_iso_8601": "2016-04-14T02:42:54.973646Z",
        "url": "https://files.pythonhosted.org/packages/5c/dd/fd712c26120f0cb03c0e29d5917106241ecad1c4f22de8554957721898ba/imagehelper-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0rc9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "251e353a226e70b818358ab0b81965164119d9955f1a2adea887b47360d5b3e1",
          "md5": "f85cdb4e9aa892a0d17b14688498b565",
          "sha256": "e06aa6b73668052bd22461a66877a16860db3c38374b2bd9fb7b70c694485ad5"
        },
        "downloads": -1,
        "filename": "imagehelper-0.3.0rc9.tar.gz",
        "has_sig": false,
        "md5_digest": "f85cdb4e9aa892a0d17b14688498b565",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20079,
        "upload_time": "2015-04-17T23:49:30",
        "upload_time_iso_8601": "2015-04-17T23:49:30.072679Z",
        "url": "https://files.pythonhosted.org/packages/25/1e/353a226e70b818358ab0b81965164119d9955f1a2adea887b47360d5b3e1/imagehelper-0.3.0rc9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c427fb23fa0db24622d2379d128ee6a9c1e4e6bb51a26d71c7481931cba4910",
          "md5": "ad5a19e91ed0a43d4bef241b60baa107",
          "sha256": "2fe1c48787b09c10d69111d71f19142d36cc0f369f5221fa24fc303eebd7fedc"
        },
        "downloads": -1,
        "filename": "imagehelper-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ad5a19e91ed0a43d4bef241b60baa107",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28876,
        "upload_time": "2019-04-28T19:02:01",
        "upload_time_iso_8601": "2019-04-28T19:02:01.246081Z",
        "url": "https://files.pythonhosted.org/packages/3c/42/7fb23fa0db24622d2379d128ee6a9c1e4e6bb51a26d71c7481931cba4910/imagehelper-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca1191cc85b3c26b762c83a70363e1a0097c0cc19431cbd8445d27dd7c3204a3",
          "md5": "f81694b62d1ce41bfc3d1444954c7c0c",
          "sha256": "5eb7d1946d6c2872bd2eadd63d0e7b237a13b0c61ee4dddae5bcb0211e73d1c1"
        },
        "downloads": -1,
        "filename": "imagehelper-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f81694b62d1ce41bfc3d1444954c7c0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28909,
        "upload_time": "2019-07-12T21:27:11",
        "upload_time_iso_8601": "2019-07-12T21:27:11.277884Z",
        "url": "https://files.pythonhosted.org/packages/ca/11/91cc85b3c26b762c83a70363e1a0097c0cc19431cbd8445d27dd7c3204a3/imagehelper-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4340ce946fb979d6e54e90e84193818802e159f923f068061e6f613be4baf198",
          "md5": "b9b748138377dcf22ae007f865a72da7",
          "sha256": "28e8bda664c6c3cdd8da5c40c552e02ee549db6f1cf61e15b2c945a6724571da"
        },
        "downloads": -1,
        "filename": "imagehelper-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b9b748138377dcf22ae007f865a72da7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29142,
        "upload_time": "2019-07-18T22:02:57",
        "upload_time_iso_8601": "2019-07-18T22:02:57.193664Z",
        "url": "https://files.pythonhosted.org/packages/43/40/ce946fb979d6e54e90e84193818802e159f923f068061e6f613be4baf198/imagehelper-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8a1eef3affaf390699b042ac1dc407dacc2bf782044dc8e716048b24da34ae3",
          "md5": "e2bb8ffe1027edddb52c3312556ebd93",
          "sha256": "19bf105b8d138f95e6db1e914bef58ab92cd23a8c4174af11bcf4247e1ab4aff"
        },
        "downloads": -1,
        "filename": "imagehelper-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e2bb8ffe1027edddb52c3312556ebd93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30042,
        "upload_time": "2019-08-02T21:09:54",
        "upload_time_iso_8601": "2019-08-02T21:09:54.431401Z",
        "url": "https://files.pythonhosted.org/packages/e8/a1/eef3affaf390699b042ac1dc407dacc2bf782044dc8e716048b24da34ae3/imagehelper-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "008f0fe32f86b27ffe7c664c44138e90a3989771bc2e65b0ae34a883a78d360c",
          "md5": "e38f1fe7aca201de50bc447ee7c09735",
          "sha256": "bd8487cfb0f5dd1c50d658256fe26b4c1061eff9fa759fbb72ff14a1fea315e1"
        },
        "downloads": -1,
        "filename": "imagehelper-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e38f1fe7aca201de50bc447ee7c09735",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31715,
        "upload_time": "2020-10-20T18:46:31",
        "upload_time_iso_8601": "2020-10-20T18:46:31.018786Z",
        "url": "https://files.pythonhosted.org/packages/00/8f/0fe32f86b27ffe7c664c44138e90a3989771bc2e65b0ae34a883a78d360c/imagehelper-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5433662fca6cce52d7a0b927b2503ffd7651005756b6958c0855e50856b15b45",
          "md5": "1ebea75e766cf9044d46163920fa02fd",
          "sha256": "4f61e2b1af060537fdb8b9be0f5ba312094c2376f57d59d05b4d5aa1f2b60d8d"
        },
        "downloads": -1,
        "filename": "imagehelper-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ebea75e766cf9044d46163920fa02fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 561686,
        "upload_time": "2021-03-26T01:01:29",
        "upload_time_iso_8601": "2021-03-26T01:01:29.732105Z",
        "url": "https://files.pythonhosted.org/packages/54/33/662fca6cce52d7a0b927b2503ffd7651005756b6958c0855e50856b15b45/imagehelper-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fa98ad2835c085408eb7ffd558f0f71afc5a0660029f78e224065ff58b356b9",
          "md5": "721c9f506e0392fa0c9ec5294febdf37",
          "sha256": "0d3a10870bc7841c2abd28f518b4045fc3ef9d978e1fc168929533e475e8f589"
        },
        "downloads": -1,
        "filename": "imagehelper-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "721c9f506e0392fa0c9ec5294febdf37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 562015,
        "upload_time": "2021-04-07T19:38:53",
        "upload_time_iso_8601": "2021-04-07T19:38:53.948623Z",
        "url": "https://files.pythonhosted.org/packages/6f/a9/8ad2835c085408eb7ffd558f0f71afc5a0660029f78e224065ff58b356b9/imagehelper-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c7499a914d3b23a5c1c0f2cc66c19aeb024cfa298ec25a0f6ce925d897910ab",
          "md5": "bc7c3ebb7d5b92579f1d1e5d05bfdb5b",
          "sha256": "bd370f43e9a4d6fd04afacde1696bafe7cc5207bf1e79629469ecec2e4efa5be"
        },
        "downloads": -1,
        "filename": "imagehelper-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc7c3ebb7d5b92579f1d1e5d05bfdb5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 564701,
        "upload_time": "2021-07-19T19:13:52",
        "upload_time_iso_8601": "2021-07-19T19:13:52.904955Z",
        "url": "https://files.pythonhosted.org/packages/3c/74/99a914d3b23a5c1c0f2cc66c19aeb024cfa298ec25a0f6ce925d897910ab/imagehelper-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c7499a914d3b23a5c1c0f2cc66c19aeb024cfa298ec25a0f6ce925d897910ab",
        "md5": "bc7c3ebb7d5b92579f1d1e5d05bfdb5b",
        "sha256": "bd370f43e9a4d6fd04afacde1696bafe7cc5207bf1e79629469ecec2e4efa5be"
      },
      "downloads": -1,
      "filename": "imagehelper-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bc7c3ebb7d5b92579f1d1e5d05bfdb5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 564701,
      "upload_time": "2021-07-19T19:13:52",
      "upload_time_iso_8601": "2021-07-19T19:13:52.904955Z",
      "url": "https://files.pythonhosted.org/packages/3c/74/99a914d3b23a5c1c0f2cc66c19aeb024cfa298ec25a0f6ce925d897910ab/imagehelper-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}