{
  "info": {
    "author": "binares",
    "author_email": "binares@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# prj-0.3.2\nSet up path dependencies of a python project from any submodule, or via interactive shell/IDLE.\nCurrently only works on Windows platform + python>=3.4.\n\n........................................................................................................<br />\n_Note: The name **prj** comes from shortening \"project\"_<br />\n........................................................................................................\n\nSuppose you have a project called MYPROJECT, with the file structure\n\n```\nMYPROJECT/\n  myproject/\n    test/\n      test_foo.py\n    __init__.py\n    foo.py\n  readme.txt\n  \nMY_EXTERNAL_LIBRARY/\n  a_package/\n    __init__.py\n```\n\nNormally if we'd like to run the test\\_foo.py (which imports myproject.foo),\nwe'd open the cmd in MYPROJECT folder and type in `python -m myproject.test.test_foo\"`\n\nBut suppose we are actively editing the test_foo.py in a python IDLE and would like\nto run it via the IDLE. That could be easily achieved if we had say _pydev_ for the IDLE, \nin which we have set MYPROJECT as the source folder.\n\nNot so easy for those using the python standard IDLE, though. We'd have to add line\n\n`sys.path.insert(0,__file__+'/../../..')`\n\nand do so for every module we'd like to run (carefully counting the number of double dots). \nBut what if we move the file? Change it again.\n\nWith __prj__, we can create a file called _prj.yaml_ in MYPROJECT folder (`MYPROJECT/prj.yaml`), \nin which we declare:\n\n```\nsrcDirs:\n - $PRJPATH\n```\n  \nand to every module we want to run interactively (test_foo.py), we add these lines at the top:\n\n ```\n import prj\n P = prj.qs(__file__)\n ```\n \nwhich returns Project object, and inserts full path to MYPROJECT folder to sys.path (index 0).\n\n`prj.qs` searches from the path provided to its folder, to the folder's parent folder,\nto parent folder's parent folder, and so on; until it finds the prj.yaml file.\nHence we can use `__file__` variable in any .py file of the project.\n\nThe project can also be set up via python interactive mode in cmd (open cmd and enter \"python\"):\n\n```\n>>>import prj\n>>>P = prj.setup(full_path_to_MYPROJECT_directory)\n>>>import myproject.test.test_foo as test_foo\n>>>test_foo.test_this_function()\n```\n \n## ABOUT prj.yaml\n\nThe following parameters are accepted:\n\n```\nname: MYPROJECT\nauthor: binares\nversion: 0.1.0\n\n#--Source directories--\n#These must be relative paths to $PRJPATH (i.e. $PRJPATH\\..\\ is not allowed)\nsrcDirs:\n - $PRJPATH\n - $PRJPATH\\myproject\\test\n# == src ('srcDirs' can be substituted with shorter 'src')\n \n#The $PRJPATH variable can be omitted:\n#srcDirs:\n# - .\n# - myproject\\test \n\n#If srcDirs is left undeclared (or srcDirs: null), then it will be replaced with [\"$PRJPATH\"].\n#srcDirs: null -> srcDirs: [\"$PRJPATH\"]\n#To leavy it empty declare it as empty list\n#srcDirs: []\n \n#--External libraries--\nextLibs:\n - $PRJPATH\\..\\MY_EXTERNAL_LIBRARY\n# == ext\n \n#--Data directories--\ndata: E:\\PROJECTDATA\\$PRJNAME\n# == dpath\nmyData: E:\\MY_SECRET_PASSWORDS\n# == mdpath\n\n#--Path variables--\n#The path variables start with $\n#Accepted variables:\n# $PRJPATH = $PPATH - full_path_to_MYPROJECT_directory\n# $PRJDIRNAME - the directory name in which prj.yaml is located\n# $PRJNAME - the name parameter (if no name provided then $PRJDIRNAME is used)\n# $DRIVE - searches through all logical drives for the trailing path\n# (e.g. $DRIVE:\\SOME_FOLDER); returns first found\n\n#Variables can be combined too:\n# $DRIVE:\\$PRJNAME\n\n#They are replaced when Project object is initiated:\n#E:\\PROJECTDATA\\$PRJNAME -> E:\\PROJECTDATA\\MYPROJECT\n\n# Other attributes\naRandomAttribute = {a_random_int: 2}\n```\n\nThe Project object that was initiated now contains the following attribute-values:\n\n```\nP.ppath = path_to_MYPROJECT\nP.dpath = \"E:\\\\PROJECTDATA\\\\MYPROJECT\"\nP.mdpath = \"E:\\\\MY_SECRET_PASSWORDS\"\nP.srcDirs = [path_to_MYPROJECT, path_to_MYPROJECT\\myproject\\test]\nP.extLibs = [path_to_MY_EXTERNAL_LIBRARIES]\nP.name = \"MYPROJECT\"\nP.author = \"binares\"\nP.version = \"0.1.0\"\n```\n\nOther attributes (and also the above ones) can be accessed via .get:\n\n```\nP.get('aRandomAttribute')\nP['aRandomAttribute']\n````\n\nAfter initiating a project, the sys.path will look like this:<br />\n`[*srcDirs from first to last, *extLibs from first to last, *the old sys.path[1:]]`\n\nNote: practically the file can left empty, in which case the attributes will be assigned:<br />\n```\nP.ppath = path_to_MYPROJECT\nP.srcDirs = [path_to_MYPROJECT]\nP.name = \"MYPROJECT\"\n\nsys.path = [path_to_MYPROJECT, *the old sys.path[1:]]\n```\n\n## FUNCTIONS\n\n`prj.qs(_file_, ins_to='sys.path', build='if_not_implemented', replace_null_srcDirs=['$PRJPATH'])`\n\n`prj.setup(path, procedure='from_defaults', astype='$PPATH', ins_to='sys.path', \n           build=True, parent_prj=None, replace_null_srcDirs=['$PRJPATH']):`\n           \nBoth initiate a project. `prj.qs` searches the _prj.yaml_ file upstream in `_file_`'s parent directories. `prj.setup` requires you to provide full `path` to the project's folder. If project is already initated (='implemented'), returns the already initiated project and builds paths (inserts them to `ins_to`) only if `build` is set to `True`. \n\nThe first time qs/setup is called, sys.path[0] (directory where python file was run) is deleted. To prevent that, call `prj.set_delete_sys_path_index(None)` before calling qs/setup. Custom index must also be set if you have inserted custom paths to sys.path before calling qs/setup; in that case set the index to `the_number_of_custom_paths_inserted` or `None`.\n\n`prj.set_delete_sys_path_index(value)`\n\nExplained above. Example: \n\n```\nimport prj,sys\nsys.path.insert(0,'C:\\my_external_python_library')\nprj.set_delete_sys_path_index(1)\nP = prj.qs(__file__)\n```\n\n`prj.get_prj(name=None, path=None)`\n\nRetrieve an initiated project object by its name or path (all initiated projects are stored in memory). If `path` is provided, tries to retrieve by `path` first.\n          \n`prj.zip_contents(path,destination=None,compression='ZIP_DEFLATED',\n                 include_pycache=False, exists='error')`\n                 \nUsage: `prj.zip_contents(\"C:\\\\MYPROJECT\")` - creates zip file *C:\\\\MYPROJECT.zip* \ncontaining C:\\\\MYPROJECT contents. Can be any directory (not only those containing prj.yaml).\n   \n`prj.Project.archive(self, package=None, destination='$PRJPATH\\\\..\\\\_backup',\n                    compression='ZIP_DEFLATED', include_pycache=False,\n                    exists='rename')`\n                    \nsame as zip_contents, but does so directly for the project at hand.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/binares/prj",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "prj",
    "package_url": "https://pypi.org/project/prj/",
    "platform": "",
    "project_url": "https://pypi.org/project/prj/",
    "project_urls": {
      "Homepage": "https://github.com/binares/prj"
    },
    "release_url": "https://pypi.org/project/prj/0.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "Setup path dependencies of a (Windows) python project from any submodule, or via interactive shell/IDLE.",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10301010,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d92b311ead8b935c60afd830cb80d8013a9059448a24dc461e2ecae05d15691",
          "md5": "26cb364ca168cd0c30b53e24b0e8dad3",
          "sha256": "3a8b54401f1cfb27506c93e8912d432e9fc78b8cdb370668fc3d3a65479a4e4c"
        },
        "downloads": -1,
        "filename": "prj-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "26cb364ca168cd0c30b53e24b0e8dad3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 16297,
        "upload_time": "2020-08-12T17:46:37",
        "upload_time_iso_8601": "2020-08-12T17:46:37.850463Z",
        "url": "https://files.pythonhosted.org/packages/0d/92/b311ead8b935c60afd830cb80d8013a9059448a24dc461e2ecae05d15691/prj-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c83d3a9af52525881445387165b13b9570c102c6891a967589b829fb8897d212",
          "md5": "2372c979433663c6d076e95c08a113ab",
          "sha256": "e684af9f442d9a6033778c2230d3ca40cc158a826150b307e289e6758e800db0"
        },
        "downloads": -1,
        "filename": "prj-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2372c979433663c6d076e95c08a113ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 16833,
        "upload_time": "2021-05-09T14:54:36",
        "upload_time_iso_8601": "2021-05-09T14:54:36.214436Z",
        "url": "https://files.pythonhosted.org/packages/c8/3d/3a9af52525881445387165b13b9570c102c6891a967589b829fb8897d212/prj-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c83d3a9af52525881445387165b13b9570c102c6891a967589b829fb8897d212",
        "md5": "2372c979433663c6d076e95c08a113ab",
        "sha256": "e684af9f442d9a6033778c2230d3ca40cc158a826150b307e289e6758e800db0"
      },
      "downloads": -1,
      "filename": "prj-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2372c979433663c6d076e95c08a113ab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 16833,
      "upload_time": "2021-05-09T14:54:36",
      "upload_time_iso_8601": "2021-05-09T14:54:36.214436Z",
      "url": "https://files.pythonhosted.org/packages/c8/3d/3a9af52525881445387165b13b9570c102c6891a967589b829fb8897d212/prj-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}