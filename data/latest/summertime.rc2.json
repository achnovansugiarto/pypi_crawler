{
  "info": {
    "author": "Ansong Ni, Murori Mutuma, Troy Feng, Zhangir Azerbayev, Nick Schoelkopf, Yusen Zhang, Tao Yu, Dragomir Radev",
    "author_email": "ansong.ni@yale.edu, dragomir.radev@yale.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# SummerTime - Text Summarization Toolkit for Non-experts\n\n<p align=\"left\">\n    <a href=\"https://github.com/Yale-LILY/SummerTime/actions\">\n        <img alt=\"CI\" src=\"https://github.com/Yale-LILY/SummerTime/workflows/CI/badge.svg?event=push&branch=main\">\n    </a>\n    <a href=\"https://github.com/allenai/allennlp/blob/main/LICENSE\">\n        <img alt=\"License\" src=\"https://img.shields.io/github/license/Yale-LILY/SummerTime.svg?color=blue&cachedrop\">\n    </a>\n    <a href=\"https://colab.research.google.com/drive/19tPdBgaJ4_QjSiFyoxtpnFGW4OG1gTec?usp=sharing\">\n        <img alt=\"Open In Colab\" src=\"https://colab.research.google.com/assets/colab-badge.svg\">\n    </a>\n    <br/>\n</p>\n\n\nA library to help users choose appropriate summarization tools based on their specific tasks or needs. Includes models, evaluation metrics, and datasets.\n\nThe library architecture is as follows:\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/Yale-LILY/SummerTime/main/docs/img/architecture.png\" width=\"50%\">\n</p>\n\n**NOTE**: SummerTime is in active development, any helpful comments are highly encouraged, please open an issue or reach out to any of the team members.\n\n\n## Installation and setup\n\n#### Install from PyPI (recommended)\n```bash\n# install extra dependencies first\npip install pyrouge@git+https://github.com/bheinzerling/pyrouge.git\npip install en_core_web_sm@https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.0.0/en_core_web_sm-3.0.0-py3-none-any.whl\n\n# install summertime from PyPI\npip install summertime\n\n```\n\n#### Local `pip` installation\nAlternatively, to enjoy the most recent features, you can install from the source:\n```bash\ngit clone git@github.com:Yale-LILY/SummerTime\npip install -e .\n```\n##### Setup `ROUGE` (when using evaluation)\n```bash\nexport ROUGE_HOME=/usr/local/lib/python3.7/dist-packages/summ_eval/ROUGE-1.5.5/\n```\n\n\n\n## Quick Start\nImports model, initializes default model, and summarizes sample documents.\n```python\nfrom summertime import model\n\nsample_model = model.summarizer()\ndocuments = [\n    \"\"\" PG&E stated it scheduled the blackouts in response to forecasts for high winds amid dry conditions. \n    The aim is to reduce the risk of wildfires. Nearly 800 thousand customers were scheduled to be affected \n    by the shutoffs which were expected to last through at least midday tomorrow.\"\"\"\n]\nsample_model.summarize(documents)\n\n# [\"California's largest electricity provider has turned off power to hundreds of thousands of customers.\"]\n```\n\nAlso, please run our colab notebook for a more hands-on demo and more examples. \n\n [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/19tPdBgaJ4_QjSiFyoxtpnFGW4OG1gTec?usp=sharing)\n\n\n## Models\n\n### Supported Models\nSummerTime supports different models (e.g., TextRank, BART, Longformer) as well as model wrappers for more complex summarization tasks (e.g., JointModel for multi-doc summarzation, BM25 retrieval for query-based summarization). Several multilingual models are also supported (mT5 and mBART).\n\n\n| Models                    | Single-doc           | Multi-doc            | Dialogue-based       | Query-based          | Multilingual         |\n| ---------                 | :------------------: | :------------------: | :------------------: | :------------------: | :------------------: |\n| BartModel                 | :heavy_check_mark:   |                      |                      |                      |                      |\n| BM25SummModel             |                      |                      |                      | :heavy_check_mark:   |                      |\n| HMNetModel                |                      |                      | :heavy_check_mark:   |                      |                      |\n| LexRankModel              | :heavy_check_mark:   |                      |                      |                      |                      |\n| LongformerModel           | :heavy_check_mark:   |                      |                      |                      |                      |\n| MBartModel                | :heavy_check_mark:   |                      |                      |                      | 50 languages (full list [here](https://huggingface.co/facebook/mbart-large-50)) |\n| MT5Model                  | :heavy_check_mark:   |                      |                      |                      | 101 languages (full list [here](https://github.com/google-research/multilingual-t5#readme)) |\n| TranslationPipelineModel  | :heavy_check_mark:   |                      |                      |                      | ~70 languages |\n| MultiDocJointModel        |                      | :heavy_check_mark:   |                      |                      |\n| MultiDocSeparateModel     |                      | :heavy_check_mark:   |                      |                      |\n| PegasusModel              | :heavy_check_mark:   |                      |                      |                      |\n| TextRankModel             | :heavy_check_mark:   |                      |                      |                      |\n| TFIDFSummModel            |                      |                      |                      | :heavy_check_mark:   |                   |\n\nTo see all supported models, run:\n\n```python\nfrom summertime.model import SUPPORTED_SUMM_MODELS\nprint(SUPPORTED_SUMM_MODELS)\n```\n\n\n### Import and initialization:\n```python\nfrom summertime import model\n\n# To use a default model\ndefault_model = model.summarizer()    \n\n# Or a specific model\nbart_model = model.BartModel()\npegasus_model = model.PegasusModel()\nlexrank_model = model.LexRankModel()\ntextrank_model = model.TextRankModel()\n```\n\nUsers can easily access documentation to assist with model selection\n```python\ndefault_model.show_capability()\npegasus_model.show_capability()\ntextrank_model.show_capability()\n```\n\nTo use a model for summarization, simply run:\n```python\ndocuments = [\n    \"\"\" PG&E stated it scheduled the blackouts in response to forecasts for high winds amid dry conditions. \n    The aim is to reduce the risk of wildfires. Nearly 800 thousand customers were scheduled to be affected \n    by the shutoffs which were expected to last through at least midday tomorrow.\"\"\"\n]\n\ndefault_model.summarize(documents)\n# or \npegasus_model.summarize(documents)\n```\n\nAll models can be initialized with the following optional options:\n```python\ndef __init__(self,\n         trained_domain: str=None,\n         max_input_length: int=None,\n         max_output_length: int=None,\n         ):\n```\n\nAll models will implement the following methods:\n```python\ndef summarize(self,\n  corpus: Union[List[str], List[List[str]]],\n  queries: List[str]=None) -> List[str]:\n\ndef show_capability(cls) -> None:\n```\n\n\n\n## Datasets\n\n### Datasets supported\nSummerTime supports different summarization datasets across different domains (e.g., CNNDM dataset - news article corpus, Samsum - dialogue corpus, QM-Sum - query-based dialogue corpus, MultiNews - multi-document corpus, ML-sum - multi-lingual corpus, PubMedQa - Medical domain, Arxiv - Science papers domain, among others.\n\n| Dataset         | Domain              | \\# Examples | Src. length | Tgt. length | Query              | Multi-doc          | Dialogue           | Multi-lingual                             |\n|-----------------|---------------------|-------------|-------------|-------------|--------------------|--------------------|--------------------|-------------------------------------------|\n| ArXiv           | Scientific articles | 215k        | 4.9k        | 220         |                    |                    |                    |                                           |\n| CNN/DM(3.0.0)   | News                | 300k        | 781         | 56          |                    |                    |                    |                                           |\n| MlsumDataset    | Multi-lingual News  | 1.5M+       | 632         | 34          |                    | :heavy_check_mark: |                    | German, Spanish, French, Russian, Turkish |\n| Multi-News      | News                | 56k         | 2.1k        | 263.8       |                    | :heavy_check_mark: |                    |                                           |\n| SAMSum          | Open-domain         | 16k         | 94          | 20          |                    |                    | :heavy_check_mark: |                                           |\n| Pubmedqa        | Medical             | 272k        | 244         | 32          | :heavy_check_mark: |                    |                    |                                           |\n| QMSum           | Meetings            | 1k          | 9.0k        | 69.6        | :heavy_check_mark: |                    | :heavy_check_mark: |                                           |\n| ScisummNet      | Scientific articles | 1k          | 4.7k        | 150         |                    |                    |                    |                                           |\n| SummScreen      | TV shows            | 26.9k       | 6.6k        | 337.4       |                    |                    | :heavy_check_mark: |                                           |\n| XSum            | News                | 226k        | 431         | 23.3        |                    |                    |                    |                                           |\n| XLSum            | News                | 1.35m        | ???         | ???        |                    |                    |                    |   45 languages ([see documentation](https://huggingface.co/datasets/csebuetnlp/xlsum)) |\n| MassiveSumm            | News                | 12m+        | ???         | ???        |                    |                    |                    |  78 languages (see Multilingual Summarization section of README for details) |\n\n\nTo see all supported datasets, run:\n\n```python\nfrom summertime import dataset\n\nprint(dataset.list_all_dataset())\n``` \n\n### Dataset Initialization\n```python\nfrom summertime import dataset\n\ncnn_dataset = dataset.CnndmDataset()\n# or \nxsum_dataset = dataset.XsumDataset()\n# ..etc\n```\n\n##### Dataset Object\nAll datasets are implementations of the `SummDataset` class. Their data splits can be accessed as follows:\n```python\ndataset = dataset.CnndmDataset()\n\ntrain_data = dataset.train_set  \ndev_data = dataset.dev_set  \ntest_data = dataset.test_set        \n```\nTo see the details of the datasets, run:\n```python\ndataset = dataset.CnndmDataset()\n\ndataset.show_description()\n```\n\n##### Data instance\nThe data in all datasets is contained in a `SummInstance` class object, which has the following properties:\n```python\ndata_instance.source = source    # either `List[str]` or `str`, depending on the dataset itself, string joining may needed to fit into specific models.\ndata_instance.summary = summary  # a string summary that serves as ground truth\ndata_instance.query = query      # Optional, applies when a string query is present\n\nprint(data_instance)             # to print the data instance in its entirety\n```\n\n### Loading and using data instances\nData is loaded using a generator to save on space and time\n\n#### To get a single instance\n```python\ndata_instance = next(cnn_dataset.train_set)\nprint(data_instance)\n```\n\n#### To get a slice of the dataset\n```python\nimport itertools\n\n# Get a slice from the train set generator - first 5 instances\ntrain_set = itertools.islice(cnn_dataset.train_set, 5)\n\ncorpus = [instance.source for instance in train_set]\nprint(corpus)\n```\n\n### Loading a custom dataset\nYou can use custom data using the `CustomDataset` class that loads the data in the SummerTime dataset Class\n```python\nfrom summertime.dataset import CustomDataset\n\n''' The train_set, test_set and validation_set have the following format: \n        List[Dict], list of dictionaries that contain a data instance.\n            The dictionary is in the form:\n                {\"source\": \"source_data\", \"summary\": \"summary_data\", \"query\":\"query_data\"}\n                    * source_data is either of type List[str] or str\n                    * summary_data is of type str\n                    * query_data is of type str\n        The list of dictionaries looks as follows:\n            [dictionary_instance_1, dictionary_instance_2, ...]\n'''\n\n# Create sample data\ntrain_set = [\n    {\n        \"source\": \"source1\",\n        \"summary\": \"summary1\",\n        \"query\": \"query1\",      # only included, if query is present\n    }\n]\nvalidation_set = [\n    {\n        \"source\": \"source2\",\n        \"summary\": \"summary2\",\n        \"query\": \"query2\",      \n    }\n]\ntest_set = [\n    {\n        \"source\": \"source3\",\n        \"summary\": \"summary3\",\n        \"query\": \"query3\",     \n    }\n]\n\n# Depending on the dataset properties, you can specify the type of dataset\n#   i.e multi_doc, query_based, dialogue_based. If not specified, they default to false\ncustom_dataset = CustomDataset(\n                    train_set=train_set,\n                    validation_set=validation_set,\n                    test_set=test_set,\n                    query_based=True,\n                    multi_doc=True\n                    dialogue_based=False)\n```\n\n## Using the datasets with the models - Examples\n```python\nimport itertools\nfrom summertime import dataset, model\n\ncnn_dataset = dataset.CnndmDataset()\n\n\n# Get a slice of the train set - first 5 instances\ntrain_set = itertools.islice(cnn_dataset.train_set, 5)\n\ncorpus = [instance.source for instance in train_set]\n\n\n\n# Example 1 - traditional non-neural model\n# LexRank model\nlexrank = model.LexRankModel(corpus)\nprint(lexrank.show_capability())\n\nlexrank_summary = lexrank.summarize(corpus)\nprint(lexrank_summary)\n\n\n# Example 2 - A spaCy pipeline for TextRank (another non-neueral extractive summarization model)\n# TextRank model\ntextrank = model.TextRankModel()\nprint(textrank.show_capability())\n\ntextrank_summary = textrank.summarize(corpus)\nprint(textrank_summary)\n\n\n# Example 3 - A neural model to handle large texts\n# LongFormer Model\nlongformer = model.LongFormerModel()\nlongformer.show_capability()\n\nlongformer_summary = longformer.summarize(corpus)\nprint(longformer_summary)\n```\n\n### Multilingual summarization\nThe `summarize()` method of multilingual models automatically checks for input document language. \n\nSingle-doc multilingual models can be initialized and used in the same way as monolingual models. They return an error if a language not supported by the model is input.\n\n```python\nmbart_model = st_model.MBartModel()\nmt5_model = st_model.MT5Model()\n\n# load Spanish portion of MLSum dataset\nmlsum = datasets.MlsumDataset([\"es\"])\n\ncorpus = itertools.islice(mlsum.train_set, 5)\ncorpus = [instance.source for instance in train_set]\n\n# mt5 model will automatically detect Spanish as the language and indicate that this is supported!\nmt5_model.summarize(corpus)\n```\n\nThe following languages are currently supported in our implementation of the MassiveSumm dataset: \nAfrikaans, Amharic, Arabic, Assamese, Aymara,\nAzerbaijani, Bambara, Bengali, Tibetan, Bosnian,\nBulgarian, Catalan, Czech, Welsh, Danish, German,\nGreek, English, Esperanto, Persian, Filipino, French,\nFulah, Irish, Gujarati, Haitian, Hausa, Hebrew,\nHindi, Croatian, Hungarian, Armenian,Igbo, Indonesian,\nIcelandic, Italian, Japanese, Kannada, Georgian, Khmer,\nKinyarwanda, Kyrgyz, Korean, Kurdish, Lao, Latvian,\nLingala, Lithuanian, Malayalam, Marathi, Macedonian,\nMalagasy, Mongolian, Burmese, South Ndebele, Nepali,\nDutch, Oriya, Oromo, Punjabi, Polish, Portuguese,\nDari, Pashto, Romanian, Rundi, Russian, Sinhala,\nSlovak, Slovenian, Shona, Somali, Spanish, Albanian,\nSerbian, Swahili, Swedish, Tamil, Telugu, Tetum,\nTajik, Thai, Tigrinya, Turkish, Ukrainian, Urdu,\nUzbek, Vietnamese, Xhosa, Yoruba, Yue Chinese,\nChinese, Bislama, and Gaelic.\n\n## Evaluation\nSummerTime supports different evaluation metrics including: BertScore, Bleu, Meteor, Rouge, RougeWe\n\nTo print all supported metrics:\n```python\nfrom summertime.evaluation import SUPPORTED_EVALUATION_METRICS\n\nprint(SUPPORTED_EVALUATION_METRICS)\n```\n\n### Import and initialization:\n```python\nimport summertime.evaluation as st_eval\n\nbert_eval = st_eval.bertscore()\nbleu_eval = st_eval.bleu_eval()\nmeteor_eval = st_eval.bleu_eval()\nrouge_eval = st_eval.rouge()\nrougewe_eval = st_eval.rougewe()\n```\n\n### Evaluation Class\nAll evaluation metrics can be initialized with the following optional arguments:\n```python\ndef __init__(self, metric_name):\n```\n\nAll evaluation metric objects implement the following methods:\n```python\ndef evaluate(self, model, data):\n\ndef get_dict(self, keys):\n```\n\n### Using evaluation metrics\nGet sample summary data\n```python\nfrom summertime.evaluation.base_metric import SummMetric\nfrom summertime.evaluation import Rouge, RougeWe, BertScore\n\nimport itertools\n\n# Evaluates model on subset of cnn_dailymail\n# Get a slice of the train set - first 5 instances\ntrain_set = itertools.islice(cnn_dataset.train_set, 5)\n\ncorpus = [instance for instance in train_set]\nprint(corpus)\n\narticles = [instance.source for instance in corpus]\n\nsummaries = sample_model.summarize(articles)\ntargets = [instance.summary for instance in corpus]\n```\n\nEvaluate the data on different metrics\n```python\nfrom summertime.evaluation import  BertScore, Rouge, RougeWe,\n\n# Calculate BertScore\nbert_metric = BertScore()\nbert_score = bert_metric.evaluate(summaries, targets)\nprint(bert_score)\n\n# Calculate Rouge\nrouge_metric = Rouge()\nrouge_score = rouge_metric.evaluate(summaries, targets)\nprint(rouge_score)\n\n# Calculate RougeWe\nrougewe_metric = RougeWe()\nrougwe_score = rougewe_metric.evaluate(summaries, targets)\nprint(rougewe_score)\n```\n\n\n### Using automatic pipeline assembly\nGiven a SummerTime dataset, you may use the `pipelines.assemble_model_pipeline` function to retrieve a list of initialized SummerTime models that are compatible with the dataset provided.\n\n```python\nfrom summertime.pipeline import assemble_model_pipeline\nfrom summertime.dataset import CnndmDataset, QMsumDataset\n\nsingle_doc_models = assemble_model_pipeline(CnndmDataset)\n# [\n#   (<model.single_doc.bart_model.BartModel object at 0x7fcd43aa12e0>, 'BART'),\n#   (<model.single_doc.lexrank_model.LexRankModel object at 0x7fcd43aa1460>, 'LexRank'),\n#   (<model.single_doc.longformer_model.LongformerModel object at 0x7fcd43b17670>, 'Longformer'),\n#   (<model.single_doc.pegasus_model.PegasusModel object at 0x7fccb84f2910>, 'Pegasus'),\n#   (<model.single_doc.textrank_model.TextRankModel object at 0x7fccb84f2880>, 'TextRank')\n# ]\n\nquery_based_multi_doc_models = assemble_model_pipeline(QMsumDataset)\n# [\n#   (<model.query_based.tf_idf_model.TFIDFSummModel object at 0x7fc9c9c81e20>, 'TF-IDF (HMNET)'),\n#   (<model.query_based.bm25_model.BM25SummModel object at 0x7fc8b4fa8c10>, 'BM25 (HMNET)')\n# ]\n```\n\n=======\n### Visualizing performance of different models on your dataset\nGiven a SummerTime dataset, you may use the pipelines.assemble_model_pipeline function to retrieve a list of initialized SummerTime models that are compatible with the dataset provided.\n\n```python\n# Get test data\nimport itertools\nfrom summertime.dataset import XsumDataset\n\n# Get a slice of the train set - first 5 instances\nsample_dataset = XsumDataset()\nsample_data = itertools.islice(sample_dataset.train_set, 100)\ngenerator1 = iter(sample_data)\ngenerator2 = iter(sample_data)\n\nbart_model = BartModel()\npegasus_model = PegasusModel()\nmodels = [bart_model, pegasus_model]\nmetrics = [metric() for metric in SUPPORTED_EVALUATION_METRICS]\n```\n\n#### Create a radar plot\n```python\nfrom summertime.evaluation.model_selector import ModelSelector\n\nselector = ModelSelector(models, generator1, metrics)\ntable = selector.run()\nprint(table)\nvisualization = selector.visualize(table)\n```\n<p align=\"center\">\n    <img src=\"https://github.com/Yale-LILY/SummerTime/blob/c8480c149e6f44c5613d8d6b05954382616f7919/docs/img/radar_plot_and_table.PNG\" width=\"100%\">\n</p>\n\n```python\nfrom summertime.evaluation.model_selector import ModelSelector\n\nnew_selector = ModelSelector(models, generator2, metrics)\nsmart_table = new_selector.run_halving(min_instances=2, factor=2)\nprint(smart_table)\nvisualization_smart = selector.visualize(smart_table)\n```\n\n#### Create a scatter plot\n```python\nfrom summertime.evaluation.model_selector import ModelSelector\nfrom summertime.evaluation.error_viz import scatter\n\nkeys = (\"bert_score_f1\", \"bleu\", \"rouge_1_f_score\", \"rouge_2_f_score\", \"rouge_l_f_score\", \"rouge_we_3_f\", \"meteor\")\n\nscatter(models, sample_data, metrics[1:3], keys=keys[1:3], max_instances=5)\n```\n<p align=\"center\">\n    <img src=\"https://github.com/Yale-LILY/SummerTime/blob/bfec6260f25f6ab3eb8a28b759ced3dabcebd811/docs/img/scatter_plot.PNG\" width=\"100%\">\n</p>\n\n\n## To contribute\n\n### Pull requests\nCreate a pull request and name it [`your_gh_username`]/[`your_branch_name`]. If needed, resolve your own branch's merge conflicts with main. Do not push directly to main.\n\n### Code formatting\nIf you haven't already, install `black` and `flake8`:\n\n```bash\npip install black\npip install flake8\n```\n\nBefore pushing commits or merging branches, run the following commands from the project root. Note that `black` will write to files, and that you should add and commit changes made by `black` before pushing:\n\n```bash\nblack .\nflake8 .\n```\n\nOr if you would like to lint specific files:\n\n```bash\nblack path/to/specific/file.py\nflake8 path/to/specific/file.py\n```\n\nEnsure that `black` does not reformat any files and that `flake8` does not print any errors. If you would like to override or ignore any of the preferences or practices enforced by `black` or `flake8`, please leave a comment in your PR for any lines of code that generate warning or error logs. Do not directly edit config files such as `setup.cfg`.\n\nSee the [`black` docs](https://black.readthedocs.io/en/stable/index.html) and [`flake8` docs](https://flake8.pycqa.org/en/latest/user/index.html) for documentation on installation, ignoring files/lines, and advanced usage. In addition, the following may be useful:\n\n- `black [file.py] --diff` to preview changes as diffs instead of directly making changes\n- `black [file.py] --check` to preview changes with status codes instead of directly making changes\n- `git diff -u | flake8 --diff` to only run flake8 on working branch changes\n\n\nNote that our CI test suite will include invoking `black --check .` and `flake8 --count .` on all non-unittest and non-setup Python files, and zero error-level output is required for all tests to pass.\n\n### Tests\nOur continuous integration system is provided through [Github actions](https://docs.github.com/en/actions). When any pull request is created or updated or whenever `main` is updated, the repository's unit tests will be run as build jobs on tangra for that pull request. Build jobs will either pass or fail within a few minutes, and build statuses and logs are visible under [Actions](https://github.com/Yale-LILY/SummerTime/actions). Please ensure that the most recent commit in pull requests passes all checks (i.e. all steps in all jobs run to completion) before merging, or request a review. To skip a build on any particular commit, append `[skip ci]` to the commit message. Note that PRs with the substring `/no-ci/` anywhere in the branch name will not be included in CI.\n\n## Citation\nThis repository is built by the [LILY Lab](https://yale-lily.github.io/) at Yale University, led by Prof. [Dragomir Radev](https://cpsc.yale.edu/people/dragomir-radev). The main contributors are [Ansong Ni](https://niansong1996.github.io), Zhangir Azerbayev, Troy Feng, Murori Mutuma, Nick Schoelkopf, and Yusen Zhang (Penn State).\n\nIf you use SummerTime in your work, consider citing:\n```\n@article{ni2021summertime,\n     title={SummerTime: Text Summarization Toolkit for Non-experts}, \n     author={Ansong Ni and Zhangir Azerbayev and Mutethia Mutuma and Troy Feng and Yusen Zhang and Tao Yu and Ahmed Hassan Awadallah and Dragomir Radev},\n     journal={arXiv preprint arXiv:2108.12738},\n     year={2021}\n}\n```\n\nFor comments and question, please open an issue.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Yale-LILY/SummerTime",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "summertime",
    "package_url": "https://pypi.org/project/summertime/",
    "platform": "",
    "project_url": "https://pypi.org/project/summertime/",
    "project_urls": {
      "Homepage": "https://github.com/Yale-LILY/SummerTime"
    },
    "release_url": "https://pypi.org/project/summertime/1.2.1/",
    "requires_dist": [
      "cython",
      "numpy",
      "click (==7.1.2)",
      "transformers (~=4.5.1)",
      "torch (~=1.8)",
      "lexrank (~=0.1.0)",
      "nltk (==3.6.2)",
      "spacy (==3.0.6)",
      "pytextrank",
      "datasets (~=1.6.2)",
      "sentencepiece (~=0.1.95)",
      "summ-eval (==0.70)",
      "jupyter",
      "gdown (~=4.2.0)",
      "readability-lxml",
      "beautifulsoup4",
      "orjson",
      "gensim (~=3.8.3)",
      "sklearn",
      "py7zr (~=0.16.1)",
      "tqdm (~=4.49.0)",
      "tensorboard (~=2.4.1)",
      "fasttext (~=0.9.2)",
      "black (~=21.12b0)",
      "easynmt (~=2.0.1)",
      "flake8",
      "progressbar",
      "prettytable"
    ],
    "requires_python": "",
    "summary": "Text summarization toolkit for non-experts",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13062179,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be01e4cfa6433eb6f50d8d612e43b4458e95cacce13af029346892a4e4df0b55",
          "md5": "a34a41df5c830e1c292eb0b5eb186816",
          "sha256": "c0a1ce96851272c4bc7230cc589c91d1c035130fc501fc0694437ab475c8f2c3"
        },
        "downloads": -1,
        "filename": "summertime-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a34a41df5c830e1c292eb0b5eb186816",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12098,
        "upload_time": "2021-11-09T08:09:15",
        "upload_time_iso_8601": "2021-11-09T08:09:15.913737Z",
        "url": "https://files.pythonhosted.org/packages/be/01/e4cfa6433eb6f50d8d612e43b4458e95cacce13af029346892a4e4df0b55/summertime-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e184abe6f7409621c6982f1a239b16810aa3ea3554fd6283cc34f59db75395fa",
          "md5": "8796b8cffa7d05c06bf5810da389804c",
          "sha256": "4746cb15295e450a736bd5d650c094b51fb5bf8b3c8840641580fb55af4bebc1"
        },
        "downloads": -1,
        "filename": "summertime-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8796b8cffa7d05c06bf5810da389804c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18152,
        "upload_time": "2021-11-09T08:09:17",
        "upload_time_iso_8601": "2021-11-09T08:09:17.100395Z",
        "url": "https://files.pythonhosted.org/packages/e1/84/abe6f7409621c6982f1a239b16810aa3ea3554fd6283cc34f59db75395fa/summertime-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dad371e1e4110b87e178d11648f56607100d4c899ab008156afb1ed40fffc12",
          "md5": "20617cb94fd9530dc8d964eed61063db",
          "sha256": "f739a1edbf7f941b9466d54d7f68132d457398f7f8b52117f4282bbf59e4e765"
        },
        "downloads": -1,
        "filename": "summertime-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20617cb94fd9530dc8d964eed61063db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13157,
        "upload_time": "2022-03-02T21:44:32",
        "upload_time_iso_8601": "2022-03-02T21:44:32.117710Z",
        "url": "https://files.pythonhosted.org/packages/1d/ad/371e1e4110b87e178d11648f56607100d4c899ab008156afb1ed40fffc12/summertime-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c465e656dc9918989810dfde3cb74ec0de54888ace51932b17cb80d4cb97a295",
          "md5": "54cbe0fc9e231188734469b18293403b",
          "sha256": "6296da20103343ea73108dbcdb1d44e90ad800bb30fdb2c6b289543ffb245930"
        },
        "downloads": -1,
        "filename": "summertime-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "54cbe0fc9e231188734469b18293403b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20689,
        "upload_time": "2022-03-02T21:44:34",
        "upload_time_iso_8601": "2022-03-02T21:44:34.072274Z",
        "url": "https://files.pythonhosted.org/packages/c4/65/e656dc9918989810dfde3cb74ec0de54888ace51932b17cb80d4cb97a295/summertime-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1dad371e1e4110b87e178d11648f56607100d4c899ab008156afb1ed40fffc12",
        "md5": "20617cb94fd9530dc8d964eed61063db",
        "sha256": "f739a1edbf7f941b9466d54d7f68132d457398f7f8b52117f4282bbf59e4e765"
      },
      "downloads": -1,
      "filename": "summertime-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20617cb94fd9530dc8d964eed61063db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13157,
      "upload_time": "2022-03-02T21:44:32",
      "upload_time_iso_8601": "2022-03-02T21:44:32.117710Z",
      "url": "https://files.pythonhosted.org/packages/1d/ad/371e1e4110b87e178d11648f56607100d4c899ab008156afb1ed40fffc12/summertime-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c465e656dc9918989810dfde3cb74ec0de54888ace51932b17cb80d4cb97a295",
        "md5": "54cbe0fc9e231188734469b18293403b",
        "sha256": "6296da20103343ea73108dbcdb1d44e90ad800bb30fdb2c6b289543ffb245930"
      },
      "downloads": -1,
      "filename": "summertime-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "54cbe0fc9e231188734469b18293403b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20689,
      "upload_time": "2022-03-02T21:44:34",
      "upload_time_iso_8601": "2022-03-02T21:44:34.072274Z",
      "url": "https://files.pythonhosted.org/packages/c4/65/e656dc9918989810dfde3cb74ec0de54888ace51932b17cb80d4cb97a295/summertime-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}