{
  "info": {
    "author": "Carlos Alvarez",
    "author_email": "candres.alv@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# concurrent-videocapture\nOpencv VideoCapture that runs concurrently in a thread for faster processing\n\n## Installation\n\nYou can install `concurrent_videocapture` from pip using\n\n```\npip install concurrent_videocapture\n```\n\nor using\n\n```\npip install git+https://github.com/charlielito/concurrent-videocapture\n```\n\n## Usage\nIt follows the same api than `cv2.VideoCapture`, so the change in code is minimal. The following example just opens the Camera 0 and shows the image in a cv2 window while simulating a heavy image processing function with `time.sleep`.\n\n```python\nimport cv2\nimport time\nfrom concurrent_videocapture import ConcurrentVideoCapture\n# Use it a the standard cv2.VideoCapture Class\ncap = ConcurrentVideoCapture(0)\nwhile True:\n    init = time.time()\n    grabbed, frame = cap.read()\n\n    # Simulate heavy image processing function\n    time.sleep(0.3)\n    if not grabbed:\n        break\n    cv2.imshow(\"video\", frame)\n    key = cv2.waitKey(1)\n    if key == 27:  # ESC\n        break\n    fps = 1/(time.time() - init)\n    print('Fps: {}'.format(fps))\ncap.release()\n```\n\n### Additional parameters\nSometimes it is useful to perform some preprocessing to the image in the thread where the camera is read. For that we can use in the constructor the parameter `transform_fn`, which is a function that is applied to each frame. The flag `return_rgb` is for converting each frame to RGB since opencv by default returns the frames in GBR format. The next example will flip horizontally the image and return it as RGB:\n\n```python\nimport cv2\nfrom concurrent_videocapture import ConcurrentVideoCapture\n\ncap = ConcurrentVideoCapture(0, transform_fn=lambda image:cv2.flip(image, 1), return_rgb=True)\nwhile True:\n    grabbed, frame = cap.read()\n\n    if not grabbed:\n        break\n    cv2.imshow(\"video\", frame)\n    key = cv2.waitKey(1)\n    if key == 27:  # ESC\n        break\ncap.release()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/charlielito/concurrent-videocapture",
    "keywords": "opencv,concurrent video",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "concurrent-videocapture",
    "package_url": "https://pypi.org/project/concurrent-videocapture/",
    "platform": "",
    "project_url": "https://pypi.org/project/concurrent-videocapture/",
    "project_urls": {
      "Homepage": "https://github.com/charlielito/concurrent-videocapture"
    },
    "release_url": "https://pypi.org/project/concurrent-videocapture/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Read opencv cameras concurrently",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7529955,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51cd312294bdfbeb79800b48d1569fad50756572f26da7fbe55ef282602602f7",
          "md5": "c2a168ecbbb8c52828c5f3e5fec765bd",
          "sha256": "a40a0f80ec39fae218c4beeae197e28afb421947e19985a72486c4b185612846"
        },
        "downloads": -1,
        "filename": "concurrent_videocapture-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2a168ecbbb8c52828c5f3e5fec765bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3200,
        "upload_time": "2020-06-21T21:31:43",
        "upload_time_iso_8601": "2020-06-21T21:31:43.832540Z",
        "url": "https://files.pythonhosted.org/packages/51/cd/312294bdfbeb79800b48d1569fad50756572f26da7fbe55ef282602602f7/concurrent_videocapture-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23db4c268b8b90cf34eabbdc6fa0f4eacd31734d21d194ebff45c1f13f2cc0a0",
          "md5": "08f4f570a9076fd52770e55d08b1fa1c",
          "sha256": "0dbdbb79711b60c008babd82fb23041a82274f6fb2076b0d8ec3f9f9238d4ccd"
        },
        "downloads": -1,
        "filename": "concurrent_videocapture-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "08f4f570a9076fd52770e55d08b1fa1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3531,
        "upload_time": "2020-06-21T21:48:38",
        "upload_time_iso_8601": "2020-06-21T21:48:38.094431Z",
        "url": "https://files.pythonhosted.org/packages/23/db/4c268b8b90cf34eabbdc6fa0f4eacd31734d21d194ebff45c1f13f2cc0a0/concurrent_videocapture-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23db4c268b8b90cf34eabbdc6fa0f4eacd31734d21d194ebff45c1f13f2cc0a0",
        "md5": "08f4f570a9076fd52770e55d08b1fa1c",
        "sha256": "0dbdbb79711b60c008babd82fb23041a82274f6fb2076b0d8ec3f9f9238d4ccd"
      },
      "downloads": -1,
      "filename": "concurrent_videocapture-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "08f4f570a9076fd52770e55d08b1fa1c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3531,
      "upload_time": "2020-06-21T21:48:38",
      "upload_time_iso_8601": "2020-06-21T21:48:38.094431Z",
      "url": "https://files.pythonhosted.org/packages/23/db/4c268b8b90cf34eabbdc6fa0f4eacd31734d21d194ebff45c1f13f2cc0a0/concurrent_videocapture-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}