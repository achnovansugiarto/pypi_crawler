{
  "info": {
    "author": "Sprylos",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Infinitode.py\n\nAn asynchronous python wrapper for the Infinitode-2 API using `async`-`await` syntax.\n\n## Installing\n\n---\n\nInstalling via pip:\n\n```\npip install infinitode.py\n```\n\n## Showcase\n\n---\n\n```python\nimport asyncio\nimport infinitode\n\n\nasync def main():\n    # Creates a session to communicate with Rainy's API.\n    # The with statement assures that the underlying session is closed.\n    # Alternatively you can can simply call Session.close() once you don't need it anymore.\n    async with infinitode.Session() as API:\n\n        # The mapname parameter should be in the form presented in the game (ie 5.1).\n        # The mode param (score/waves) defaults to score.\n        # The difficulty param (EASY/NORMAL/ENDLESS_I) which defaults to NORMAL can also be specified,\n        # however easy leaderboards/scores are always empty.\n        # Sometimes a playerid can or must be specified,\n        # and the result will have additional info about that players' score.\n\n        # This returns a score of a specific player with the id U-E9BP-FSN9-H6ENMQ on the map 5.1 in normal mode.\n        # The parameters mapname and playerid are required, mode and difficulty are optional.\n        score_5_1 = await API.leaderboards_rank(mapname='5.1', playerid='U-E9BP-FSN9-H6ENMQ', mode='score', difficulty='NORMAL')\n\n        # This returns a leaderboard of the top 200 wave scores on 5.1 in normal mode.\n        # Only the mapname is required.\n        # mapname can also be a float\n        leaderboard_5_1 = await API.leaderboards(mapname=5.1, playerid=None, mode='waves')\n\n        # The runtime leaderboard is the one displayed in the top right when playing a run.\n        # It is similar to leaderboards, however it will also give the top 1-99% each.\n        # Mapname and playerid are required.\n        runtime_5_1 = await API.runtime_leaderboards(mapname=5.1, playerid='U-E9BP-FSN9-H6ENMQ', difficulty='ENDLESS_I')\n\n        # Top 3 skill point owners, a playerid can be specified for the score of that player.\n        sp_leaderboard = await API.skill_point_leaderboard(playerid='U-E9BP-FSN9-H6ENMQ')\n\n        # Top 200 players of todays dailyquest or the one which date is specified.\n        # The date should be a str in the YYYY-MM-DD format, or a datetime.datetime object.\n        # However the server seems to only save the last 2 or 3 days.\n        # Again, a playerid can be specified.\n        dq_leaderboard = await API.daily_quest_leaderboards()\n\n        # This returns the top 100 players from the season leaderboard.\n        # There is no convenient api response for this call.\n        # Instead the data is parsed, which is why this can take a bit.\n        # This function never takes parameters.\n        season_leaderboard = await API.seasonal_leaderboard()\n\n        # This will return a Player with a lot of attributes.\n        # Like the season leaderboard, the data has to be parsed.\n        # This function always takes a playerid and nothing else.\n        player = await API.player('U-E9BP-FSN9-H6ENMQ')\n\n        # All Leaderboards and Scores have the method, mapname, mode, difficulty attribute:\n        print(score_5_1.method, score_5_1.mapname,\n              runtime_5_1.mode, runtime_5_1.difficulty)\n        # All leaderboards have a total attribute:\n        print(leaderboard_5_1.total)\n\n        # They also have an optional player, date and season attribute\n        print(dq_leaderboard.date)\n        print(season_leaderboard.season)\n\n        # The player attribute will return a Score\n        sp_score = sp_leaderboard.player\n        assert sp_score is not None  # check if the score exists.\n\n        # Scores also always have a playerid, rank and score attribute:\n        print(score_5_1.playerid, score_5_1.rank, score_5_1.score)\n\n        # There is also a variety of optional attributes:\n        # has_pfp, level, nickname, pinned_badge, position, top, total, player\n\n        # Every Leaderboard contains a certain amount of scores, with a maxmimum of 300.\n        # The best way to retrieve the scores is usually iterating through the leaderboard.\n        # for score in leaderboard_5_1:\n        #     print(score.nickname)  # do something with score\n\n        # You can also index a single score:\n        leaderboard_5_1[35].print_score()\n        # or index with a slice to receive a shortened leaderboard:\n        print(len(leaderboard_5_1[0:10]))\n\n        # The last main object is a Player, received only be Session.player()\n        # Every Player has the same attributes.\n        print(\n            player.playerid,\n            player.nickname,\n            player.level,\n            player.xp,\n            player.xp_max,  # xp required per level (always 1000?)\n            player.total_score,\n            player.total_rank,\n            player.total_top,\n            player.replays,\n            player.issues,\n            player.created_at,  # as str\n            player.avatar_link  # even when the person has no pfp\n        )\n\n        # Every player also has a .score() method. It will return the players score for the given level.\n        player.score('5.1').print_score()\n\n        # You can also get the DQ and SP scores with additional API calls:\n        (await player.daily_quest(API)).rank\n        (await player.skill_point(API)).rank\n\n# In case you get a runtime error here, ignore it, that's Windows' shit.\nasyncio.run(main())\n```\n\n## Logging\n\n---\n\n```python\nimport infinitode\nimport asyncio\nimport logging\n\n# setup logger\n# INFO will log everytime a request is made\n# DEBUG will log the server's response aswell\nlogging.basicConfig(level=logging.INFO)\n\n\nasync def main():\n    async with infinitode.Session() as API:\n        await API.leaderboards('6.3')  # just an example\n\nasyncio.run(main())\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sprylos/infinitode.py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "infinitode.py",
    "package_url": "https://pypi.org/project/infinitode.py/",
    "platform": null,
    "project_url": "https://pypi.org/project/infinitode.py/",
    "project_urls": {
      "Homepage": "https://github.com/Sprylos/infinitode.py"
    },
    "release_url": "https://pypi.org/project/infinitode.py/1.0.3/",
    "requires_dist": [
      "bs4",
      "aiohttp",
      "lxml"
    ],
    "requires_python": "",
    "summary": "A python wrapper for the Infinitode 2 API.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14821814,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e381259911b8806e7d029751ae9b0cc780ae0fd21989be40e6ff85aaddb2a34",
          "md5": "dc4fa7ef4a3a0e6a18fb9b570d34e081",
          "sha256": "a004558ff9d75fa20deb58faea051069eeedf176c55a29a8c15c14e27e8c793a"
        },
        "downloads": -1,
        "filename": "infinitode.py-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc4fa7ef4a3a0e6a18fb9b570d34e081",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15668,
        "upload_time": "2022-04-26T15:26:53",
        "upload_time_iso_8601": "2022-04-26T15:26:53.494608Z",
        "url": "https://files.pythonhosted.org/packages/5e/38/1259911b8806e7d029751ae9b0cc780ae0fd21989be40e6ff85aaddb2a34/infinitode.py-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a24c9dc295e5dfa2f7e4409da22bd53e78ac67f5f376bdbc03353846e3842ab3",
          "md5": "490d1e28a109f2f9b51e9331e57b7781",
          "sha256": "2e236810fc4f20093bfc34ba391e56e09f7653bcb61a4efbb6c09de1f4a1b71c"
        },
        "downloads": -1,
        "filename": "infinitode.py-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "490d1e28a109f2f9b51e9331e57b7781",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13919,
        "upload_time": "2022-04-26T15:26:54",
        "upload_time_iso_8601": "2022-04-26T15:26:54.851486Z",
        "url": "https://files.pythonhosted.org/packages/a2/4c/9dc295e5dfa2f7e4409da22bd53e78ac67f5f376bdbc03353846e3842ab3/infinitode.py-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51159a47bc482efe9b40f55957636f1cc878c50e66a7e7bfac11520febe96fd6",
          "md5": "963405bfedc55ffc6dea1a82405819fd",
          "sha256": "54be2e2c930e01ec708d126a700e5557bbb9d1243eae2c165f6597152ed1fe51"
        },
        "downloads": -1,
        "filename": "infinitode.py-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "963405bfedc55ffc6dea1a82405819fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16280,
        "upload_time": "2022-04-28T14:08:13",
        "upload_time_iso_8601": "2022-04-28T14:08:13.833940Z",
        "url": "https://files.pythonhosted.org/packages/51/15/9a47bc482efe9b40f55957636f1cc878c50e66a7e7bfac11520febe96fd6/infinitode.py-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0303ba66525948da3e383bf5a2fd84ac89704ce17996d33904b2bb01a94dda5",
          "md5": "ee85384ca88af69470b87c66688a7617",
          "sha256": "4ab3c13d4e7d7ab135ba50c2c93a4007ee6df010b2640dc76929dadb17977688"
        },
        "downloads": -1,
        "filename": "infinitode.py-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ee85384ca88af69470b87c66688a7617",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14349,
        "upload_time": "2022-04-28T14:08:15",
        "upload_time_iso_8601": "2022-04-28T14:08:15.907217Z",
        "url": "https://files.pythonhosted.org/packages/c0/30/3ba66525948da3e383bf5a2fd84ac89704ce17996d33904b2bb01a94dda5/infinitode.py-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8426dc13cd0cc051d631169e3f33c68e8c2376c1168aa61e5e404d515bb843d2",
          "md5": "d8b6bb86fa0bdac98db377bea6beeaa2",
          "sha256": "1949e9c1030defc1455e71630a1668b2bef6741b18f36ae55a450aa71741de45"
        },
        "downloads": -1,
        "filename": "infinitode.py-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8b6bb86fa0bdac98db377bea6beeaa2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16514,
        "upload_time": "2022-05-10T20:03:25",
        "upload_time_iso_8601": "2022-05-10T20:03:25.769070Z",
        "url": "https://files.pythonhosted.org/packages/84/26/dc13cd0cc051d631169e3f33c68e8c2376c1168aa61e5e404d515bb843d2/infinitode.py-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0c9258397d3e7cd3fb53ffb18fca13ef7102a2901672bae9a44e432b0b7d9a8",
          "md5": "426881d80cee6689938628ea93972980",
          "sha256": "164eb7ac502170d813c42a1283f847e30494fa382e3f9cc57a1c0f2acd3952f2"
        },
        "downloads": -1,
        "filename": "infinitode.py-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "426881d80cee6689938628ea93972980",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14813,
        "upload_time": "2022-05-10T20:03:29",
        "upload_time_iso_8601": "2022-05-10T20:03:29.916668Z",
        "url": "https://files.pythonhosted.org/packages/c0/c9/258397d3e7cd3fb53ffb18fca13ef7102a2901672bae9a44e432b0b7d9a8/infinitode.py-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5770736e4cc4e486ee2d41651c42e03943f3f2bb63bc9f65bf8cb1aafaa39d63",
          "md5": "f4785af04d4e2238ac8bb9116c0bb031",
          "sha256": "2d7c28a1bce694687a9bd4d361e9aaa391dea654e03947c809cd20369c3fb2bb"
        },
        "downloads": -1,
        "filename": "infinitode.py-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4785af04d4e2238ac8bb9116c0bb031",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16722,
        "upload_time": "2022-08-20T14:36:01",
        "upload_time_iso_8601": "2022-08-20T14:36:01.382629Z",
        "url": "https://files.pythonhosted.org/packages/57/70/736e4cc4e486ee2d41651c42e03943f3f2bb63bc9f65bf8cb1aafaa39d63/infinitode.py-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62624a819e00f1d3242288c5c5f1a18e676414cf8e40dc9e00d72ee2924b93e2",
          "md5": "cc179586d31229fff418bc32dbd0afbd",
          "sha256": "0e9067f874327d54a88ab3fb1bd2aff40ceba55d91fed4914f0fb83700705b22"
        },
        "downloads": -1,
        "filename": "infinitode.py-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cc179586d31229fff418bc32dbd0afbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14898,
        "upload_time": "2022-08-20T14:36:03",
        "upload_time_iso_8601": "2022-08-20T14:36:03.245239Z",
        "url": "https://files.pythonhosted.org/packages/62/62/4a819e00f1d3242288c5c5f1a18e676414cf8e40dc9e00d72ee2924b93e2/infinitode.py-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5770736e4cc4e486ee2d41651c42e03943f3f2bb63bc9f65bf8cb1aafaa39d63",
        "md5": "f4785af04d4e2238ac8bb9116c0bb031",
        "sha256": "2d7c28a1bce694687a9bd4d361e9aaa391dea654e03947c809cd20369c3fb2bb"
      },
      "downloads": -1,
      "filename": "infinitode.py-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f4785af04d4e2238ac8bb9116c0bb031",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16722,
      "upload_time": "2022-08-20T14:36:01",
      "upload_time_iso_8601": "2022-08-20T14:36:01.382629Z",
      "url": "https://files.pythonhosted.org/packages/57/70/736e4cc4e486ee2d41651c42e03943f3f2bb63bc9f65bf8cb1aafaa39d63/infinitode.py-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62624a819e00f1d3242288c5c5f1a18e676414cf8e40dc9e00d72ee2924b93e2",
        "md5": "cc179586d31229fff418bc32dbd0afbd",
        "sha256": "0e9067f874327d54a88ab3fb1bd2aff40ceba55d91fed4914f0fb83700705b22"
      },
      "downloads": -1,
      "filename": "infinitode.py-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "cc179586d31229fff418bc32dbd0afbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14898,
      "upload_time": "2022-08-20T14:36:03",
      "upload_time_iso_8601": "2022-08-20T14:36:03.245239Z",
      "url": "https://files.pythonhosted.org/packages/62/62/4a819e00f1d3242288c5c5f1a18e676414cf8e40dc9e00d72ee2924b93e2/infinitode.py-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}