{
  "info": {
    "author": "Alex Ermolaev",
    "author_email": "abionics.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: General"
    ],
    "description": "# jsonizer\n\nIt is a library for parsing nested JSONs into predefined classes ðŸ”¨âœ¨\n\nIn many cases you can use [dataclasses](https://docs.python.org/3/library/dataclasses.html)\nor [pydantic](https://pypi.org/project/pydantic) for parsing JSON into Python classes.\nBut sometimes you need to parse JSON into some predefined classes.\nYou can't change this classes, or it is too time-consuming.\nFor example, this classes can be imported from another library.\nIn this case, this is an ideal solution for you :)\n\n## Reasons to use jsonizer\n\n- Supports nested classes\n- Fastest class detection\n- No dependencies\n\n## Installation\n\n```bash\npip install jsonizer\n```\n\n## Usage sample\n\n```python\nfrom jsonizer import Jsonizer\n\nclass Egg:\n    def __init__(self, size, color='white'):\n        self._size = size\n        self._color = color\n    def __repr__(self):\n        return f'{self._color} egg with size {self._size}'\n\nclass Bird:\n    def __init__(self, name, eggs):\n        self._name = name\n        self._eggs = eggs\n    def __repr__(self):\n        return f'Bird \"{self._name}\" with eggs {self._eggs}'\n\njson_data = {\n    'name': 'Duck',\n    'eggs': [{\n        'size': 12,\n    }, {\n        'size': 69,\n        'color': 'purple',\n    }]\n}\nparser = Jsonizer(Bird, Egg)\nbird = parser.parse(json_data)\nprint(bird)\n# >>> Bird \"Duck\" with eggs [white egg with size 12, purple egg with size 69]\n```\n\nThis sample can be found [here](examples/example_nohints.py).\nFor simplicity, there are no type hints (and no PEP8 style).\nBut **jsonizer** allows and insists on using type hints.\n[Here](examples/example_hints.py) is same sample but with type hints\n\n## Parsing initial arguments\n\nClass `Jsonizer` require the list of classes in that JSONs can be parsed as first argument,\nthey can be in any order\n<details>\n<summary>Optional arguments</summary>\n\n| Name               | Type   | Default | Description                                                                                    |\n|--------------------|--------|---------|------------------------------------------------------------------------------------------------|\n| `ignore_ambiguity` | `bool` | `False` | Ignore exceptions when dicts can be matched to two or more constructors (see exceptions block) |\n| `disallow_dicts`   | `bool` | `False` | Disallow to have dict as class argument (see exceptions block)                                 |\n| `lowercase_keys`   | `bool` | `False` | Lowercase all keys (names) in input JSON                                                       |\n| `replace_space`    | `str`  | `None`  | If not `None`, replace space in keys (names) in input JSON with this value                     |\n\n</details>\n\n## Parsing functions\n\n| Function            | Description                     | Sample                       |\n|---------------------|---------------------------------|------------------------------|\n| `parse(dict/list)`  | Parse object of list of objects | `parse({'name': 'Alice'})`   |\n| `parse_string(str)` | Parse JSON string               | `parse('{\"name\": \"Alice\"}')` |\n| `parse_file(str)`   | Parse JSON file by filename     | `parse('sample.json')`       |\n\n## Exceptions\n\nThere are 3+1 kind of exceptions:\n\n<details>\n<summary>1. AmbiguityParamsException</summary>\n\nIt appears when **jsonizer** two classes can have common init params.\nIn example below, json data `{\"name\": \"Alice\"}` can be matched to both classes.\nYou can ignore such situations by passing `ignore_ambiguity=True` to parser\n\n```python\nclass Person:\n    def __init__(self, name: str):\n        # .. some logic ...\nclass Worker:\n    def __init__(self, name: str, income: int = 0):\n        # .. some logic ...\n\nparser = Jsonizer(Worker, Person)\n# >>> jsonizer.exceptions.AmbiguityParamsException: Some signatures can be matched to class \"<class 'sample.Worker'>\" and \"<class 'sample.Person'>\" simultaneously\n\nparser = Jsonizer(Worker, Person, ignore_ambiguity=True)\nparser.parse(...)\n```\n\n</details>\n\n<details>\n<summary>2. UnparsedJsonException</summary>\n\nIn some _rarely cases_ (I really don't know why) you may want to not have dicts as arguments.\nYou can reach this by passing `disallow_dicts=True` to parser\n\n```python\nclass Person:\n    def __init__(self, name: str, contacts: Any):\n        # .. some logic ...\n\nperson_data = {'name': 'Alice', 'contacts': {'phone': '123-456-7890'}}\n\nparser = Jsonizer(Person, disallow_dicts=True)\nparser.parse(person_data)\n# >>> jsonizer.exceptions.UnparsedJsonException: Cannot recognize class for JSON data \"{'phone': '123-456-7890'}\"\n\nparser = Jsonizer(Person)\nperson = parser.parse(person_data)\n# >> Hi! I am Alice, my contacts are {'phone': '123-456-7890'}\n```\n\n</details>\n\n<details>\n<summary>3. FullyUnparsedException</summary>\n\nCannot parse main dict (root/first elements) into one of passed classes.\nCheck keys of JSON data, is they really matched to any class\n\n</details>\n\n<details>\n<summary>4. JSONDecodeError (standard Python exception)</summary>\n\nDefault Python exception in case of invalid JSON file or string.\nCheck your JSON, 99.69% that it is invalid. You can check it [here](https://jsonformatter.curiousconcept.com).\nSee more in [documentation](https://docs.python.org/3/library/json.html#json.JSONDecodeError)\n\nPS in JSON you must use double quotes `\"` instead of single `'`, and `null` instead of `None`\n\n</details>\n\n## FAQ\n\n**Q: Why is it so fast?**\n\nA: It uses hashes to represent all possible constructor (regardless the arguments order)\n\n**Q: What does parser do with `self`, `*args` and `**kwargs`?**\n\nA: It skips them, even if they have different name\n\n**Q: Where there are so few tests?**\n\nA: They are waiting while you will code them :)\n\n## More\n\nPyPI: https://pypi.org/project/jsonizer\n\nRepository: https://github.com/abionics/jsonizer\n\nDeveloper: Alex Ermolaev (Abionics)\n\nEmail: abionics.dev@gmail.com\n\nLicense: MIT (see LICENSE.txt)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abionics/jsonizer",
    "keywords": "json class loader parser detector",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsonizer",
    "package_url": "https://pypi.org/project/jsonizer/",
    "platform": null,
    "project_url": "https://pypi.org/project/jsonizer/",
    "project_urls": {
      "Homepage": "https://github.com/abionics/jsonizer"
    },
    "release_url": "https://pypi.org/project/jsonizer/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library for parsing nested JSONs into predefined classes ðŸ”¨âœ¨",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13488040,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54088f23a41af34c130d08d836b76c01b93c2f311227d5707b2d657353c7ec2b",
          "md5": "1446f8c0db28ac815e608804c0ea22ee",
          "sha256": "c559cfe4571b2dbd682d328853536bed09cfcecd7a0e8d5b9985eb5a2129afe6"
        },
        "downloads": -1,
        "filename": "jsonizer-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1446f8c0db28ac815e608804c0ea22ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6907,
        "upload_time": "2022-04-11T21:31:10",
        "upload_time_iso_8601": "2022-04-11T21:31:10.467875Z",
        "url": "https://files.pythonhosted.org/packages/54/08/8f23a41af34c130d08d836b76c01b93c2f311227d5707b2d657353c7ec2b/jsonizer-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69fae4861c27c93cfd8094d02ce7c6bc72b906ea6932602b7f6a5f63e74cea04",
          "md5": "95f838df6b77dcdf74f9a6a2e047347e",
          "sha256": "fc63f671229fb18ec8a31b391c452abed6d41fa29fb6452fa9d1e2817590a4aa"
        },
        "downloads": -1,
        "filename": "jsonizer-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "95f838df6b77dcdf74f9a6a2e047347e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7128,
        "upload_time": "2022-04-12T09:44:55",
        "upload_time_iso_8601": "2022-04-12T09:44:55.294638Z",
        "url": "https://files.pythonhosted.org/packages/69/fa/e4861c27c93cfd8094d02ce7c6bc72b906ea6932602b7f6a5f63e74cea04/jsonizer-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d380de1435af1b3366bccd1b5f1ec23aeea9688c7cd579294bf1282fd40d06c8",
          "md5": "45f0c25d63aea513686ad735703c7912",
          "sha256": "b326fa19500cacc28fc58033f6f64fd75cc044679aba5edeee713e0b3e05acca"
        },
        "downloads": -1,
        "filename": "jsonizer-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45f0c25d63aea513686ad735703c7912",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7104,
        "upload_time": "2022-04-12T09:51:04",
        "upload_time_iso_8601": "2022-04-12T09:51:04.267631Z",
        "url": "https://files.pythonhosted.org/packages/d3/80/de1435af1b3366bccd1b5f1ec23aeea9688c7cd579294bf1282fd40d06c8/jsonizer-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d380de1435af1b3366bccd1b5f1ec23aeea9688c7cd579294bf1282fd40d06c8",
        "md5": "45f0c25d63aea513686ad735703c7912",
        "sha256": "b326fa19500cacc28fc58033f6f64fd75cc044679aba5edeee713e0b3e05acca"
      },
      "downloads": -1,
      "filename": "jsonizer-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "45f0c25d63aea513686ad735703c7912",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7104,
      "upload_time": "2022-04-12T09:51:04",
      "upload_time_iso_8601": "2022-04-12T09:51:04.267631Z",
      "url": "https://files.pythonhosted.org/packages/d3/80/de1435af1b3366bccd1b5f1ec23aeea9688c7cd579294bf1282fd40d06c8/jsonizer-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}