{
  "info": {
    "author": "P. Raj Kumar",
    "author_email": "raj.pritvi.kumar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "Uplink\n******\n|PyPI Version| |Build Status| |Coverage Status| |Code Climate| |Documentation Status|\n|Gitter| |Code Style|\n\n- Builds Reusable Objects for Consuming Web APIs.\n- Works with **Requests**, **aiohttp**, and **Twisted**.\n- Inspired by `Retrofit <http://square.github.io/retrofit/>`__.\n\nA Quick Walkthrough, with GitHub API v3\n=======================================\nUplink turns your HTTP API into a Python class.\n\n.. code-block:: python\n\n   from uplink import Consumer, get, Path, Query\n\n\n   class GitHub(Consumer):\n       \"\"\"A Python Client for the GitHub API.\"\"\"\n\n       @get(\"users/{user}/repos\")\n       def get_repos(self, user: Path, sort_by: Query(\"sort\")):\n           \"\"\"Retrieves the user's public repositories.\"\"\"\n\nBuild an instance to interact with the webservice.\n\n.. code-block:: python\n\n   github = GitHub(base_url=\"https://api.github.com/\")\n\nThen, executing an HTTP request is as simply as invoking a method.\n\n.. code-block:: python\n\n   repos = github.get_repos(user=\"octocat\", sort_by=\"created\")\n\nThe returned object is a friendly |requests.Response|_:\n\n.. |requests.Response| replace:: ``requests.Response``\n.. _requests.Response: http://docs.python-requests.org/en/master/api/#requests.Response\n\n.. code-block:: python\n\n   print(repos.json())\n   # Output: [{'id': 64778136, 'name': 'linguist', ...\n\nFor sending non-blocking requests, Uplink comes with support for\n|aiohttp and twisted|_.\n\n.. |aiohttp and twisted| replace:: ``aiohttp`` and ``twisted``\n.. _`aiohttp and twisted`: https://github.com/prkumar/uplink/tree/master/examples/async-requests\n\nReady to launch your first API client with Uplink? Start with this `quick tutorial`_!\n\nFeatures\n========\n\n- **Quickly Define Structured API Clients**\n\n  - Use decorators and type hints to describe each HTTP request\n  - JSON, URL-encoded, and multipart request body and file upload\n  - URL parameter replacement, request headers, and query parameter support\n\n- **Bring Your Own HTTP Library**\n\n  - `Non-blocking I/O support`_ for Aiohttp and Twisted\n  - `Supply your own session`_ (e.g., ``requests.Session``) for greater control\n\n- **Easy and Transparent Deserialization/Serialization**\n\n  - Define `custom converters`_ for your own objects\n  - Support for |marshmallow|_ schemas and `handling collections`_ (e.g., list of Users)\n\n- **Extendable**\n\n  - Install optional plugins for additional features (e.g., `protobuf support`_)\n  - Compose `custom response and error handling`_ functions as middleware\n\n- **Authentication**\n\n  - Built-in support for `Basic Authentication`_\n  - Use existing auth libraries for supported clients (e.g., |requests-oauthlib|_)\n\nUplink officially supports Python 2.7 & 3.3-3.7.\n\n.. |marshmallow| replace:: ``marshmallow``\n.. |requests-oauthlib| replace:: ``requests-oauthlib``\n.. _`Non-blocking I/O support`: https://github.com/prkumar/uplink/tree/master/examples/async-requests\n.. _`Supply your own session`: https://uplink.readthedocs.io/en/latest/user/clients.html#swapping-out-the-default-http-session\n.. _`marshmallow`: https://github.com/prkumar/uplink/tree/master/examples/marshmallow\n.. _`custom converters`: https://uplink.readthedocs.io/en/latest/user/serialization.html#custom-json-deserialization\n.. _`handling collections`: https://uplink.readthedocs.io/en/latest/user/serialization.html#converting-collections\n.. _`custom response and error handling`: https://uplink.readthedocs.io/en/latest/user/quickstart.html#response-and-error-handling\n.. _`protobuf support`: https://github.com/prkumar/uplink-protobuf\n.. _`requests-oauthlib`: https://github.com/requests/requests-oauthlib\n.. _`Basic Authentication`: https://uplink.readthedocs.io/en/latest/user/auth.html#basic-authentication\n\nInstallation\n============\n\nTo install the latest stable release, you can use ``pip`` (or ``pipenv``):\n\n::\n\n    $ pip install -U uplink\n\nIf you are interested in the cutting-edge, preview the upcoming release with:\n\n::\n\n   $ pip install https://github.com/prkumar/uplink/archive/master.zip\n\nExtra! Extra!\n-------------\n\nFurther, uplink has optional integrations and features. You can view a full list \nof available extras `here <http://uplink.readthedocs.io/en/latest/install.html#extras>`_.\n\nWhen installing Uplink with ``pip``, you can select extras using the format:\n\n::\n\n   $ pip install -U uplink[extra1, extra2, ..., extraN]\n\n\nFor instance, to install ``aiohttp`` and ``marshmallow`` support:\n\n::\n\n   $ pip install -U uplink[aiohttp, marshmallow]\n\n\nUser Testimonials\n=================\n\n**Michael Kennedy** (`@mkennedy`_), host of `Talk Python`_ and `Python Bytes`_ podcasts-\n\n    Of course our first reaction when consuming HTTP resources in Python is to\n    reach for Requests. But for *structured* APIs, we often want more than ad-hoc\n    calls to Requests. We want a client-side API for our apps. Uplink is\n    the quickest and simplest way to build just that client-side API.\n    Highly recommended.\n\n.. _@mkennedy: https://twitter.com/mkennedy\n.. _`Talk Python`: https://twitter.com/TalkPython\n.. _`Python Bytes`: https://twitter.com/pythonbytes\n\n**Or Carmi** (`@liiight`_), notifiers_ maintainer-\n\n    Uplink's intelligent usage of decorators and typing leverages the most\n    pythonic features in an elegant and dynamic way. If you need to create an\n    API abstraction layer, there is really no reason to look elsewhere.\n\n.. _@liiight: https://github.com/liiight\n.. _notifiers: https://github.com/notifiers/notifiers\n\n\nDocumentation\n=============\n\nCheck out the library's documentation at https://uplink.readthedocs.io/.\n\nFor new users, a good place to start is this `quick tutorial`_.\n\n\nCommunity\n=========\n\nJoin the conversation on `Gitter`_ to ask questions, provide feedback,\nand meet other users!\n\n.. _Gitter: https://gitter.im/python-uplink/Lobby\n\n\nContributing\n============\n\nWant to report a bug, request a feature, or contribute code to Uplink?\nCheckout the `Contribution Guide`_ for where to start.\nThank you for taking the time to improve an open source project :purple_heart:\n\n.. |Build Status| image:: https://travis-ci.com/prkumar/uplink.svg?branch=master\n   :target: https://travis-ci.com/prkumar/uplink\n.. |Code Climate| image:: https://api.codeclimate.com/v1/badges/d5c5666134763ff1d6c0/maintainability\n   :target: https://codeclimate.com/github/prkumar/uplink/maintainability\n   :alt: Maintainability\n.. |Code Style| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black\n   :alt: Code style: black\n.. |Coverage Status| image:: https://img.shields.io/codecov/c/github/prkumar/uplink.svg   \n   :alt: Codecov   \n   :target: https://codecov.io/gh/prkumar/uplink\n.. |Documentation Status| image:: https://readthedocs.org/projects/uplink/badge/?version=latest\n   :target: http://uplink.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n.. |Gitter| image:: https://badges.gitter.im/python-uplink/Lobby.svg\n   :target: https://gitter.im/python-uplink/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n   :alt: Join the chat at https://gitter.im/python-uplink/Lobby\n.. |License| image:: https://img.shields.io/github/license/prkumar/uplink.svg\n   :target: https://github.com/prkumar/uplink/blob/master/LICENSE\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/uplink.svg\n   :target: https://pypi.python.org/pypi/uplink\n\n.. _`Contribution Guide`: https://github.com/prkumar/uplink/blob/master/CONTRIBUTING.rst\n.. _`quick tutorial`: https://uplink.readthedocs.io/en/latest/user/quickstart.html\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://uplink.readthedocs.io/",
    "keywords": "http api rest client retrofit",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cognifloyd-uplink",
    "package_url": "https://pypi.org/project/cognifloyd-uplink/",
    "platform": "",
    "project_url": "https://pypi.org/project/cognifloyd-uplink/",
    "project_urls": {
      "Homepage": "https://uplink.readthedocs.io/"
    },
    "release_url": "https://pypi.org/project/cognifloyd-uplink/0.10.0/",
    "requires_dist": [
      "requests (>=2.18.0)",
      "six (>=1.12.0)",
      "uritemplate (>=3.0.0)",
      "aiohttp (>=2.3.0) ; (python_version >= '3.4') and extra == 'aiohttp'",
      "marshmallow (>=2.15.0) ; extra == 'marshmallow'",
      "pytest (==4.6.5) ; extra == 'tests'",
      "pytest-mock ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "pytest-twisted ; extra == 'tests'",
      "twisted (>=17.1.0) ; (python_version != '3.3' and python_version != '3.4') and extra == 'twisted'",
      "twisted (<=17.9.0) ; (python_version == '3.3') and extra == 'twisted'",
      "twisted (<=19.2.1) ; (python_version == '3.4') and extra == 'twisted'",
      "typing (>=3.6.4) ; extra == 'typing'"
    ],
    "requires_python": "",
    "summary": "A Declarative HTTP Client for Python.",
    "version": "0.10.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6571276,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b4b6c5cb14f60ed7b90f74a923fb8dae38d647769fe3c1b03dedff1f11720e0",
          "md5": "839003aacf1ad685fb8e77d5ecc5f2b2",
          "sha256": "47af94bc384a605c3ed492743fa838f4c1668734b76be6f87af1f9913d593934"
        },
        "downloads": -1,
        "filename": "cognifloyd_uplink-0.10.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "839003aacf1ad685fb8e77d5ecc5f2b2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 66633,
        "upload_time": "2020-02-04T20:21:43",
        "upload_time_iso_8601": "2020-02-04T20:21:43.633451Z",
        "url": "https://files.pythonhosted.org/packages/1b/4b/6c5cb14f60ed7b90f74a923fb8dae38d647769fe3c1b03dedff1f11720e0/cognifloyd_uplink-0.10.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02103bda00261c02b0331a7a8037e3be3d8b1189659707d014e39bbdbf71f1df",
          "md5": "739b8ea5e5411aa7f6be0f71675bd064",
          "sha256": "97d455e78e4f2279e546460f328d06684c3f46ed6ed68077be16dc6430806d42"
        },
        "downloads": -1,
        "filename": "cognifloyd-uplink-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "739b8ea5e5411aa7f6be0f71675bd064",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73761,
        "upload_time": "2020-02-04T20:21:46",
        "upload_time_iso_8601": "2020-02-04T20:21:46.629618Z",
        "url": "https://files.pythonhosted.org/packages/02/10/3bda00261c02b0331a7a8037e3be3d8b1189659707d014e39bbdbf71f1df/cognifloyd-uplink-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b4b6c5cb14f60ed7b90f74a923fb8dae38d647769fe3c1b03dedff1f11720e0",
        "md5": "839003aacf1ad685fb8e77d5ecc5f2b2",
        "sha256": "47af94bc384a605c3ed492743fa838f4c1668734b76be6f87af1f9913d593934"
      },
      "downloads": -1,
      "filename": "cognifloyd_uplink-0.10.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "839003aacf1ad685fb8e77d5ecc5f2b2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 66633,
      "upload_time": "2020-02-04T20:21:43",
      "upload_time_iso_8601": "2020-02-04T20:21:43.633451Z",
      "url": "https://files.pythonhosted.org/packages/1b/4b/6c5cb14f60ed7b90f74a923fb8dae38d647769fe3c1b03dedff1f11720e0/cognifloyd_uplink-0.10.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02103bda00261c02b0331a7a8037e3be3d8b1189659707d014e39bbdbf71f1df",
        "md5": "739b8ea5e5411aa7f6be0f71675bd064",
        "sha256": "97d455e78e4f2279e546460f328d06684c3f46ed6ed68077be16dc6430806d42"
      },
      "downloads": -1,
      "filename": "cognifloyd-uplink-0.10.0.tar.gz",
      "has_sig": false,
      "md5_digest": "739b8ea5e5411aa7f6be0f71675bd064",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 73761,
      "upload_time": "2020-02-04T20:21:46",
      "upload_time_iso_8601": "2020-02-04T20:21:46.629618Z",
      "url": "https://files.pythonhosted.org/packages/02/10/3bda00261c02b0331a7a8037e3be3d8b1189659707d014e39bbdbf71f1df/cognifloyd-uplink-0.10.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}