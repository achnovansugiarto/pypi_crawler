{
  "info": {
    "author": "Wojciech Sikora",
    "author_email": "kontakt@sikorawojciech.pl",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# KnowYourPlates\n\nModule that allows to recognize license plates from images basing on image processing algorithms.\n\n## Getting started\n\n### Requirements\n\nModule uses several python packages:\n\n* OpenCV - open source computer vision and machine learning software library \n* pytesseract - optical character recognition (OCR) tool for python\n* NumPy - fundamental package for scientific computing with Python\n* imutils - series of convenience functions to make basic image processing functions\n* Pillow - Python Image Library\n* Matplotlib - Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms\n\nBe sure to have them installed before using **know_your_plates** package:\n\n```\npip install opencv-contrib-python\npip install pytesseract\npip install numpy\npip install imutils\npip install Pillow\npip install matplotlib\n```\n\n### Installation\n\nInstall this package with python package installer **pip**:\n\n```\npip install know_your_plates\n```\n\n### Usage\n\nTo recognize license plate from the image, import this package to the project and use **license_plate_recognition** function with path to the image as an argument. Example code:\n\n```python\n# run.py\nimport argparse\nfrom know_your_plates import alpr\n\nap = argparse.ArgumentParser()\nap.add_argument(\"-i\", \"--image\", required=True,\n                help=\"Path to the image\")\nargs = vars(ap.parse_args())\n\nrecognized_text = alpr.license_plate_recognition(args['image'])\nprint(recognized_text)\n```\nCall from the command line:\n\n```\npython run.py --image ./example.jpg\n```\n\n## API\n\n- **license_plate_recognition(img_path: str, new_size: tuple, blurring_method: Callable, binarization_method: Callable)):**\n```\nAutomatic license plate recognition algorithm.\nFound license plate is stored in ./results/ directiory as license_plate.jpg\n\nParameters\n----------\nimg_path : str\n    Path to the image\nnew_size  : tuple of integers\n    First argument of the tuple is new width, second is the new height of the image\nblurring_method : function\n    Function as an object. Suggested functions from this module: gaussian_blur, median_blur, bilateral_filter\nbinarization_method : function\n    Function as an object. Suggested functions from this module: threshold_otsu, adaptive_threshold, canny, auto_canny\n\nReturns\n-------\nstr\n    Text recognized on the image\n```\n\n---\n*Blurring and filtering*\n\n- **gaussian_blur(image: np.ndarray):**\n```\nWrapper for OpenCV's Gaussian blur. Image is blurred with (3, 3) kernel.\n\nParameters\n----------\nimage: numpy.ndarray\n    Image as numpy array. Should be converted into grayscale.\n\nReturns\n-------\nnumpy.ndarray\n    Blurred image using Gaussian blur\n\nContribute\n----------\nSource: https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=gaussianblur#gaussianblur\n```\n\n- **median_blur(image: np.ndarray):**\n```\nWrapper for OpenCV's median blur. Aperture linear size for medianBlur is 3.\n\nParameters\n----------\nimage: numpy.ndarray\n    Image as numpy array. Should be converted into grayscale.\n\nReturns\n-------\nnumpy.ndarray\n    Blurred image using median blur\n\nContribute\n----------\nSource: https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=medianblur#medianblur\n\n```\n\n- **bilateral_filter(image: np.ndarray):**\n```\nWrapper for OpenCV's bilateral filter. Diameter of each pixel neighborhood is 11. \nBoth filter sigma in the color space and filter sigma in the coordinate space are 17.\n\nParameters\n----------\nimage: numpy.ndarray\n    Image as numpy array. Should be converted into grayscale.\n\nReturns\n-------\nnumpy.ndarray\n    Blurred image using bilateral filter\n\nContribute\n----------\nSource: https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=bilateralfilter#bilateralfilter\n\n```\n\n---\n*Tresholding images*\n\n- **canny(image: np.ndarray, threshold1: int, threshold2: int):**\n```\nWrapper for OpenCV's Canny algorithm.\n\nParameters\n----------\nimage : numpy.ndarray\n    Image as numpy array\nthreshold1 : int\n    Lower value of the threshold\nthreshold2 : int\n    Upper value of the threshold\n\nReturns\n-------\nnumpy.ndarray\n    Binarized image using Canny's algorithm.\n\nContribute\n----------\nSource: https://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector.html\n```\n\n- **auto_canny(image: np.ndarray, sigma: float = 0.33):**\n```\nFunction automatically sets up lower and upper value of the threshold\nbased on sigma and median of the image\n\nParameters\n----------\nimage : numpy.ndarray\n    Image as numpy array\nsigma : float\n\n\nReturns\n-------\nnumpy.ndarray\n    Binarized image with Canny's algorithm\n\nContribute\n----------\nSource: https://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector.html\n```\n\n- **threshold_otsu(image: np.ndarray):**\n```\n Wrapper for OpenCV's Otsu's threshold algorithm.\n\nParameters\n----------\nimage : numpy.ndarray\n    Image as numpy array\n\nReturns\n-------\nnumpy.ndarray\n    Binarized image using Otsu's algorithm.\n\nContribute\n----------\nSource: https://docs.opencv.org/master/d7/d4d/tutorial_py_thresholding.html\n```\n\n- **adaptive_threshold(image: np.ndarray):**\n```\nWrapper for OpenCV's adaptive threshold algorithm.\n\nParameters\n----------\nimage : numpy.ndarray\n    Image as numpy array\n\nReturns\n-------\nnumpy.ndarray\n    Binarized image using adaptive threshold.\n\nContribute\n----------\nSource: https://docs.opencv.org/master/d7/d4d/tutorial_py_thresholding.html\n```\n\n---\n*OCR functions*\n\n- **ocr(img_path: str):**\n```\nWrapper for Tesseract image_to_string function\n\nParameters\n----------\nimg_path : str\n    Path to the image\n\nReturns\n-------\nstr\n    Text recognized on the image\n\nContribute\n----------\nPyTesseract: https://pypi.org/project/pytesseract/\n```\n\n---\n*Image processing*\n\n- **preprocess(image: np.ndarray, new_size: tuple, blurring_method: Callable, binarization_method: Callable):**\n```\nResizing, converting into grayscale, blurring and binarizing\n\nParameters\n----------\nimage : numpy.ndarray\n    Image as numpy array\nnew_size  : tuple of integers\n    First argument of the tuple is new width, second is the new height of the image\nblurring_method : function\n    Function as an object. Suggested functions from this module: gaussian_blur, median_blur, bilateral_filter\nbinarization_method : function\n    Function as an object. Suggested functions from this module: threshold_otsu, adaptive_threshold, canny, auto_canny\n\nReturns\n-------\nnumpy.ndarray\n    Preprocessed image.\n\nContribute\n----------\nGrayscale conversion: https://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html\nBilateral filter: https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html\n```\n\n- **plate_contours(image: np.ndarray):**\n```\nFinding contours on the binarized image.\nReturns only 10 (or less) the biggest rectangle contours found on the image.\n\nParameters\n----------\nimage : numpy.ndarray\n    Binarized image as numpy array\n\nReturns\n-------\nlist of numpy.ndarray\n    List of found OpenCV's contours.\n\nContribute\n----------\nFinding contours: https://docs.opencv.org/2.4/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html?highlight=findcontours#findcontours\n```\n\n- **crop_image(original_img: np.ndarray, plate_cnt: np.ndarray):**\n```\nWrapper for Tesseract image_to_string function\n\nParameters\n----------\nimg_path : str\n    Path to the image\n\nReturns\n-------\nstr\n    Text recognized on the image\n\nContribute\n----------\nPyTesseract: https://pypi.org/project/pytesseract/\n```\n\n- **prepare_ocr(image: np.ndarray):**\n```\nPrepares image to the OCR process by resizing and filtering (for noise reduction)\n\nParameters\n----------\nimage : numpy.ndarray\n    Image as numpy array\n\nReturns\n-------\nnumpy.ndarray\n    Image prepaired to the OCR process\n\nContribute\n----------\nResizing: https://docs.opencv.org/2.4/modules/imgproc/doc/geometric_transformations.html#void%20resize(InputArray%20src,%20OutputArray%20dst,%20Size%20dsize,%20double%20fx,%20double%20fy,%20int%20interpolation)\nBilateral filter: https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html\n```\n\n## License\n\n**know_your_plates** is released under the [MIT License](https://opensource.org/licenses/MIT).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SikoraWojciech/KnowYourPlates",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "KnowYourPlates",
    "package_url": "https://pypi.org/project/KnowYourPlates/",
    "platform": "",
    "project_url": "https://pypi.org/project/KnowYourPlates/",
    "project_urls": {
      "Homepage": "https://github.com/SikoraWojciech/KnowYourPlates"
    },
    "release_url": "https://pypi.org/project/KnowYourPlates/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Module that allows to recognize license plates from images basing on image processing algorithms.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8025266,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10346807852fe8334280ee186d9ef2b3df626853009e156a82cbc28cbddaf351",
          "md5": "35cd779013e18a719df73126274e8872",
          "sha256": "ede76fb1af13ba624fc8289c71380e8fb72157cea60002879ff5c566edaa382d"
        },
        "downloads": -1,
        "filename": "KnowYourPlates-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35cd779013e18a719df73126274e8872",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7828,
        "upload_time": "2020-08-24T05:46:00",
        "upload_time_iso_8601": "2020-08-24T05:46:00.556347Z",
        "url": "https://files.pythonhosted.org/packages/10/34/6807852fe8334280ee186d9ef2b3df626853009e156a82cbc28cbddaf351/KnowYourPlates-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63ab6b2126db553b9d1983a4d8619325ebcd10f0eba156a6978e89f3e311a96e",
          "md5": "075e827b58a30a4b68f9d155c88d80db",
          "sha256": "8622cf7aeb22ecd599cb5c5c5db20aa1c345a1e6a7c6b4e5f88b021b1e7e9d9a"
        },
        "downloads": -1,
        "filename": "KnowYourPlates-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "075e827b58a30a4b68f9d155c88d80db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6046,
        "upload_time": "2020-08-24T05:46:03",
        "upload_time_iso_8601": "2020-08-24T05:46:03.358707Z",
        "url": "https://files.pythonhosted.org/packages/63/ab/6b2126db553b9d1983a4d8619325ebcd10f0eba156a6978e89f3e311a96e/KnowYourPlates-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10346807852fe8334280ee186d9ef2b3df626853009e156a82cbc28cbddaf351",
        "md5": "35cd779013e18a719df73126274e8872",
        "sha256": "ede76fb1af13ba624fc8289c71380e8fb72157cea60002879ff5c566edaa382d"
      },
      "downloads": -1,
      "filename": "KnowYourPlates-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35cd779013e18a719df73126274e8872",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7828,
      "upload_time": "2020-08-24T05:46:00",
      "upload_time_iso_8601": "2020-08-24T05:46:00.556347Z",
      "url": "https://files.pythonhosted.org/packages/10/34/6807852fe8334280ee186d9ef2b3df626853009e156a82cbc28cbddaf351/KnowYourPlates-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63ab6b2126db553b9d1983a4d8619325ebcd10f0eba156a6978e89f3e311a96e",
        "md5": "075e827b58a30a4b68f9d155c88d80db",
        "sha256": "8622cf7aeb22ecd599cb5c5c5db20aa1c345a1e6a7c6b4e5f88b021b1e7e9d9a"
      },
      "downloads": -1,
      "filename": "KnowYourPlates-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "075e827b58a30a4b68f9d155c88d80db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6046,
      "upload_time": "2020-08-24T05:46:03",
      "upload_time_iso_8601": "2020-08-24T05:46:03.358707Z",
      "url": "https://files.pythonhosted.org/packages/63/ab/6b2126db553b9d1983a4d8619325ebcd10f0eba156a6978e89f3e311a96e/KnowYourPlates-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}