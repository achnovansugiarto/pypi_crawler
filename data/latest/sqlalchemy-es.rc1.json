{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ElasticSearch Dialect for SQLAlchemy\n\n<!-- \n[![Build Status](https://github.com/preset-io/elasticsearch-dbapi/workflows/Python/badge.svg)](https://github.com/preset-io/elasticsearch-dbapi/actions)\n[![PyPI version](https://badge.fury.io/py/elasticsearch-dbapi.svg)](https://badge.fury.io/py/elasticsearch-dbapi)\n[![Coverage Status](https://codecov.io/github/preset-io/elasticsearch-dbapi/coverage.svg?branch=master)](https://codecov.io/github/preset-io/elasticsearch-dbapi)\n\n\n`elasticsearch-dbapi` Implements a DBAPI (PEP-249) and SQLAlchemy dialect,\nthat enables SQL access on elasticsearch clusters for query only access.\n\nOn Elastic Elasticsearch:\nUses Elastic X-Pack [SQL API](https://www.elastic.co/guide/en/elasticsearch/reference/current/xpack-sql.html)\n\nOn AWS ES, opendistro Elasticsearch:\n[Open Distro SQL](https://opendistro.github.io/for-elasticsearch-docs/docs/sql/)\n\nThis library supports Elasticsearch 7.X versions.\n\n### Installation\n\n```bash\n$ pip install elasticsearch-dbapi\n```\n\nTo install support for AWS Elasticsearch Service / [Open Distro](https://opendistro.github.io/for-elasticsearch/features/SQL%20Support.html):\n\n```bash\n$ pip install elasticsearch-dbapi[opendistro]\n```\n\n### Usage:\n\n#### Using DBAPI:\n\n```python\nfrom sqlalchemy_dialects.es.api import connect\n\nconn = connect(host='localhost')\ncurs = conn.cursor()\ncurs.execute(\n    \"select * from flights LIMIT 10\"\n)\nprint([row for row in curs])\n```\n\n#### Using SQLAlchemy execute:\n\n```python\nfrom sqlalchemy.engine import create_engine\n\nengine = create_engine(\"es+http://localhost:9200/\")\nrows = engine.connect().execute(\n    \"select * from flights LIMIT 10\"\n)\nprint([row for row in rows])\n```\n\n#### Using SQLAlchemy:\n\n```python\nfrom sqlalchemy import func, select\nfrom sqlalchemy.engine import create_engine\nfrom sqlalchemy.schema import MetaData, Table\n\n\nengine = create_engine(\"es+http://localhost:9200/\")\nlogs = Table(\"flights\", MetaData(bind=engine), autoload=True)\ncount = select([func.count(\"*\")], from_obj=logs).scalar()\nprint(f\"COUNT: {count}\")\n```\n\n#### Using SQLAlchemy reflection:\n\n```python\n\nfrom sqlalchemy.engine import create_engine\nfrom sqlalchemy.schema import Table, MetaData\n\nengine = create_engine(\"es+http://localhost:9200/\")\nlogs = Table(\"flights\", MetaData(bind=engine), autoload=True)\nprint(engine.table_names())\n\nmetadata = MetaData()\nmetadata.reflect(bind=engine)\nprint([table for table in metadata.sorted_tables])\nprint(logs.columns)\n```\n\n#### Connection Parameters:\n\n[elasticsearch-py](https://elasticsearch-py.readthedocs.io/en/master/index.html)\nis used to establish connections and transport, this is the official\nelastic python library. `Elasticsearch` constructor accepts multiple optional parameters\nthat can be used to properly configure your connection on aspects like security, performance\nand high availability. These optional parameters can be set at the connection string, for\nexample:\n\n ```bash\n    elasticsearch+http://localhost:9200/?http_compress=True&timeout=100\n```\nwill set transport to use gzip (http_compress) and timeout to 10 seconds.\n\nFor more information on configuration options, look at `elasticsearch-py`â€™s documentation:\n- [Transport Options](https://elasticsearch-py.readthedocs.io/en/master/connection.html#transport)\n- [HTTP tranport](https://elasticsearch-py.readthedocs.io/en/master/transports.html#urllib3httpconnection)\n\nThe connection string follows RFC-1738, to support multiple nodes you should use `sniff_*` parameters\n\n#### Fetch size\n\nBy default the maximum number of rows which get fetched by a single query\nis limited to 10000. This can be adapted through the `fetch_size`\nparameter:\n\n```python\nfrom sqlalchemy_dialects.es.api import connect\n\nconn = connect(host=\"localhost\", fetch_size=1000)\ncurs = conn.cursor()\n```\n\nIf more than 10000 rows should get fetched then\n[max_result_window](https://www.elastic.co/guide/en/elasticsearch/reference/7.x/index-modules.html#dynamic-index-settings)\nhas to be adapted as well.\n\n#### Time zone\n\nBy default, elasticsearch query time zone defaults to `Z` (UTC). This can be adapted through the `time_zone`\nparameter:\n\n```python\nfrom sqlalchemy_dialects.es.api import connect\n\nconn = connect(host=\"localhost\", time_zone=\"Asia/Shanghai\")\ncurs = conn.cursor()\n```\n\n### Tests\n\nTo run unittest launch elasticsearch and kibana (kibana is really not required but is a nice to have)\n\n```bash\n$ docker-compose up -d\n$ nosetests -v\n```\n\n### Special case for sql opendistro endpoint (AWS ES)\n\nAWS ES exposes the opendistro SQL plugin, and it follows a different SQL dialect.\nUsing the `odelasticsearch` driver:\n\n```python\nfrom sqlalchemy.engine import create_engine\n\nengine = create_engine(\n    \"odelasticsearch+https://search-SOME-CLUSTER.us-west-2.es.amazonaws.com:443/\"\n)\nrows = engine.connect().execute(\n    \"select count(*), Carrier from flights GROUP BY Carrier\"\n)\nprint([row for row in rows])\n```\n\nOr using DBAPI:\n```python\nfrom sqlalchemy_dialects.es.aws.api import connect\n\nconn = connect(host='localhost',port=9200,path=\"\", scheme=\"http\")\n\ncurs = conn.cursor().execute(\n    \"select * from flights LIMIT 10\"\n)\n\nprint([row for row in curs])\n```\n\n### Opendistro (AWS ES) Basic authentication\n\nBasic authentication is configured as expected on the <username>,<password> fields of the URI\n\n```python\nfrom sqlalchemy.engine import create_engine\n\nengine = create_engine(\n    \"odelasticsearch+https://my_user:my_password@search-SOME-CLUSTER.us-west-2.es.amazonaws.com:443/\"\n)\n```\n\nIAM AWS Authentication keys are passed on the URI basic auth location, and by setting `aws_keys`\n\nQuery string keys are:\n\n- aws_keys\n- aws_region\n\n```python\nfrom sqlalchemy.engine import create_engine\n\nengine = create_engine(\n    \"odelasticsearch+https://<AWS_ACCESS_KEY>:<AWS_SECRET_KEY>@search-SOME-CLUSTER.us-west-2.es.amazonaws.com:443/?aws_keys=1&&aws_region=<AWS_REGION>\"\n)\n```\n\nIAM AWS profile is configured has a query parameter name `aws_profile` on the URI. The value for the key provides the AWS region\n\n```python\nfrom sqlalchemy.engine import create_engine\n\nengine = create_engine(\n    \"odelasticsearch+https://search-SOME-CLUSTER.us-west-2.es.amazonaws.com:443/?aws_profile=us-west-2\"\n)\n```\n\nUsing the new SQL engine:\n\nOpendistro 1.13.0 brings (enabled by default) a new SQL engine, with lots of improvements and fixes.\nTake a look at the [release notes](https://github.com/opendistro-for-elasticsearch/sql/blob/develop/docs/dev/NewSQLEngine.md)\n\nThis DBAPI has to behave slightly different for SQL v1 and SQL v2, by default we comply with v1,\nto enable v2 support, pass `v2=true` has a query parameter.\n\n```\nodelasticsearch+https://search-SOME-CLUSTER.us-west-2.es.amazonaws.com:443/?aws_profile=us-west-2&v2=true\n```\n\nTo connect to the provided Opendistro ES on `docker-compose` use the following URI:\n`odelasticsearch+https://admin:admin@localhost:9400/?verify_certs=False`\n\n### Known limitations\n\nThis library does not yet support the following features:\n\n- Array type columns are not supported. Elaticsearch SQL does not support them either.\nSQLAlchemy `get_columns` will exclude them.\n- `object` and `nested` column types are not well supported and are converted to strings\n- Indexes that whose name start with `.`\n- GEO points are not currently well-supported and are converted to strings\n\n- AWS ES (opendistro elascticsearch) is supported (still beta), known limitations are:\n  * You are only able to `GROUP BY` keyword fields (new [experimental](https://github.com/opendistro-for-elasticsearch/sql#experimental)\n opendistro SQL already supports it)\n  * Indices with dots are not supported (indices like 'audit_log.2021.01.20'),\n  on these cases we recommend the use of aliases -->\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/usalko/elasticsearch-es/releases/tag/0.1.0a",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/usalko",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-es",
    "package_url": "https://pypi.org/project/sqlalchemy-es/",
    "platform": "",
    "project_url": "https://pypi.org/project/sqlalchemy-es/",
    "project_urls": {
      "Download": "https://github.com/usalko/elasticsearch-es/releases/tag/0.1.0a",
      "Homepage": "https://github.com/usalko"
    },
    "release_url": "https://pypi.org/project/sqlalchemy-es/0.1.0a0/",
    "requires_dist": [
      "elasticsearch (<7.14,>7)",
      "packaging (<22.0,>=21.0)",
      "sqlalchemy",
      "requests-aws4auth ; extra == 'opendistro'",
      "boto3 ; extra == 'opendistro'"
    ],
    "requires_python": "",
    "summary": "SQLAlchemy dialect for Elasticsearch with write operations support",
    "version": "0.1.0a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12751488,
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a661481c24220dbd2e34a968bf772a25025aa6b332a1bec057633813475b01d1",
          "md5": "a92785960408bc3d521287f6d39e0499",
          "sha256": "9c0309bce1c105ccd74fee93afbda2ff2b2835c56a16cefe84b9db3ccd47c368"
        },
        "downloads": -1,
        "filename": "sqlalchemy_es-0.1.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a92785960408bc3d521287f6d39e0499",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30378,
        "upload_time": "2022-02-01T03:21:04",
        "upload_time_iso_8601": "2022-02-01T03:21:04.975012Z",
        "url": "https://files.pythonhosted.org/packages/a6/61/481c24220dbd2e34a968bf772a25025aa6b332a1bec057633813475b01d1/sqlalchemy_es-0.1.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08fdf7a13ba801a6c54962c5f8a1f6293eaf6c75c0e94898d3a10ec159ce5369",
          "md5": "8c04e158a3adbbe4ceb0e83450698b30",
          "sha256": "043ae23a2594b0c28a5554295ca5ea2338cad758b3d9cb76606167f79f0c7594"
        },
        "downloads": -1,
        "filename": "sqlalchemy-es-0.1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c04e158a3adbbe4ceb0e83450698b30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26488,
        "upload_time": "2022-02-01T03:21:06",
        "upload_time_iso_8601": "2022-02-01T03:21:06.981087Z",
        "url": "https://files.pythonhosted.org/packages/08/fd/f7a13ba801a6c54962c5f8a1f6293eaf6c75c0e94898d3a10ec159ce5369/sqlalchemy-es-0.1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a661481c24220dbd2e34a968bf772a25025aa6b332a1bec057633813475b01d1",
        "md5": "a92785960408bc3d521287f6d39e0499",
        "sha256": "9c0309bce1c105ccd74fee93afbda2ff2b2835c56a16cefe84b9db3ccd47c368"
      },
      "downloads": -1,
      "filename": "sqlalchemy_es-0.1.0a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a92785960408bc3d521287f6d39e0499",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30378,
      "upload_time": "2022-02-01T03:21:04",
      "upload_time_iso_8601": "2022-02-01T03:21:04.975012Z",
      "url": "https://files.pythonhosted.org/packages/a6/61/481c24220dbd2e34a968bf772a25025aa6b332a1bec057633813475b01d1/sqlalchemy_es-0.1.0a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08fdf7a13ba801a6c54962c5f8a1f6293eaf6c75c0e94898d3a10ec159ce5369",
        "md5": "8c04e158a3adbbe4ceb0e83450698b30",
        "sha256": "043ae23a2594b0c28a5554295ca5ea2338cad758b3d9cb76606167f79f0c7594"
      },
      "downloads": -1,
      "filename": "sqlalchemy-es-0.1.0a0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c04e158a3adbbe4ceb0e83450698b30",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26488,
      "upload_time": "2022-02-01T03:21:06",
      "upload_time_iso_8601": "2022-02-01T03:21:06.981087Z",
      "url": "https://files.pythonhosted.org/packages/08/fd/f7a13ba801a6c54962c5f8a1f6293eaf6c75c0e94898d3a10ec159ce5369/sqlalchemy-es-0.1.0a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}