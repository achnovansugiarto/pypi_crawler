{
  "info": {
    "author": "Rodrigo Yamamoto",
    "author_email": "codes@rodrigoyamamoto.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# GDIO - Gridded Data IO\n\nA simple and concise gridded data IO library for reading multiples grib, netcdf and hdf5 files, automatic spatial interpolation of the all data to a single resolution.\n\nThe library gdio is based on my own professionals and personal needs as a meteorologist. \nThe currents libraries always fail when you need to read handle multiples large \nnetcdf/grib/hdf5 files, with different resolutions and time steps.\n\nAfter version 0.1.2 the output data was converted to object with key-values accessible using attribute notation, and after version 0.1.8 a new multilevel dictionary data structure. \nIn the version 0.2.5 the latitude and longitude come in mesh array (ny,nx) format to support irregular or lambert projection.\n\n## Instalation\n```\nconda config --env --add channels conda-forge\nconda install -c rodri90y gdio\n\nif you are using pip install, before install manually the requirements\n\nconda create -n envname --file requirements/base.txt\npip install gdio\nor\npip install --index-url https://test.pypi.org/simple/ --upgrade --no-cache-dir --extra-index-url=https://pypi.org/simple/ gdio\n```\n\n#### Required dependencies\n\nconda config --add channels conda-forge\n\n+ Python (3.8.5=> or later)\n+ netCDF4 (1.5.8 or later)\n+ h5py (3.6.0 or later)\n+ eccodes (2.24.2 or later)\n+ python-eccodes (1.4.0 or later)\n+ pyproj\n\n\n#### Optional dependencies\n+ scipy (1.4.1 or later)\n\n#### Testing\n```\npython -m unittest \n```\n\n\n## Reading files\nThe gdio support the IO of grib1/2 and netcdf file formats, allowing the time and spatial subdomains cut.\n\nThis library unifies categories of information (variable, level, members) in a single \ndata structure as a multilevel dictionary/attribute, regardless of the format read (netcdf and grib), the \noutput format will be standardized in order to simplify access to the data.\n\nIn the dataset first level the following parameters are accessible: ref_time, time_units and time in addition to the weather variables.\nds.ref_time, ds.time\nAt the variable level we have: level_type, param_id, long_name, parameterUnits, latitude and longitude and at vertical level (isobaricInh, surface, etc) the variable data as value and level are exposed.\n\nStructure data:\n\n    + dataset\n        + ref_time\n        + time_units\n        + time\n        + variable (u,v,2t,etc) \n            + centre\n            + dataType\n            + param_id\n            + long_name\n            + parameter_units\n            + latitude\n            + longitude\n            + grid_type\n            + projparams\n            + isobaricInhPa/surface/maxWind/sigma (any level type key)\n                + value\n                + level\n                + members\n\nExample:\n            \n    ds.time\n    ds.time_units\n    ds.v.latitude\n    ds.v.isobaricInhPa.value\n    ds.v.isobaricInhPa.level\n    ds.v.isobaricInhPa.members\n\n\n### Reading multiple files\nThis class has high level routines for multiple files and type reading, returning the netcdf/grib data as a list of dictionary type.\n\n```\nfrom gdio.core import gdio\n\nds = gdio(verbose=False)\nds.mload(['tests/data/era5_20191226-27_lev.grib', 'tests/data/era5_20191227_lev.nc'],  \n        merge_files=True, uniformize_grid=True, inplace=True)\n\n>>> ds.dataset[0].keys()\ndict_keys(['ref_time', 'time_units', 'time', 'longitude', 'latitude', 't', 'u', 'v', 'r'])\n\n>>> print(ds.dataset[0].u.isobaricInhPa.value.shape)\n(1, 6, 7, 241, 281)\n\n>>> ds.dataset[0].time\nmasked_array(data=[datetime.datetime(2019, 12, 26, 0, 0),\n                   datetime.datetime(2019, 12, 26, 12, 0),\n                   datetime.datetime(2019, 12, 27, 0, 0),\n                   datetime.datetime(2019, 12, 27, 12, 0),\n                   datetime.datetime(2019, 12, 27, 0, 0),\n                   datetime.datetime(2019, 12, 27, 12, 0)],\n             mask=False,\n       fill_value='?',\n            dtype=object)\n\n```\nLoading the data into the spatial subdomain between lat -30, lon 300 and lat 10, lon 320, selecting the time between \ntimespteps 12 and 24, and changing the variable names t and u to 2t and 10u.\n\n```\nfrom gdio.core import gdio\n\nds = gdio(verbose=False)\nds.mload(['tests/data/era5_20191226-27_lev.grib', 'tests/data/era5_20191227_lev.nc'],  \n        merge_files=True, uniformize_grid=True, \n        cut_domain=(-30, 300, 10, 320), cut_time=(12, 24), \n        rename_vars={'t': '2t', 'u': '10u'}, inplace=True)\n\n>>> ds.dataset[0].keys()\ndict_keys(['ref_time', 'time_units', 'time', 'longitude', 'latitude', 'r', '2t', '10u', 'v'])\n\n>>> print(ds.dataset[0]['10u'].isobaricInhPa.value.shape)\n(1, 2, 7, 160, 80)\n\n>>> ds.dataset[0].time\nmasked_array(data=[datetime.datetime(2019, 12, 26, 12, 0),\n                   datetime.datetime(2019, 12, 27, 0, 0),\n                   datetime.datetime(2019, 12, 27, 12, 0)],\n             mask=False,\n       fill_value='?',\n            dtype=object)\n\n```\n\nThe following parameters can be set to operate on the data during reading.\n\n**uniformize_grid:     boolean**\\\ninterpolate all gridded data to first grid data file resolution\n\n**vars:                list**\\\nvariables names\n\n**merge_files:         boolean**\\\nmerge the variables data of all files into a single data array per variable\n\n**cut_time:            tuple**\\\nrange of time to cut ex.: (0,10)/(0,None)/(None,10)\n\n**cut_domain:          tuple**\\\nrange of latitudes and longitudes to cut: (lat1, lon1, lat2, lon2)\nex.: (-45,-90,20,-30)/(-45,None,20,-30)/(None,-90,None,-20)\n\n**level_type:          list**\\\ntype of level (hybrid, isobaricInhPa, surface)\n\n**filter_by:           dictonary**\\\ndict with grib parameters at form of pair key:values (list or single values)\neg: filter_by={'perturbationNumber': [0,10],'level': [1000,500,250]} or filter_by={'gridType': 'regular_ll'}|\nObs: this parameter only works on grib files\n\n**rename_vars:         dictonary**\\\nrename the original variable name (key) to a new name (value). \n\nEg. {'tmpmdl': 't', 'tmpprs': 't'}\n\n**sort_before:         bool**\\\nSort fields before process validityDate, validityTime, paramId, typeOfLevel, perturbationNumber and level. Warning high\nconsumption of memory, just use when the grib data structure is not standard\n\n\n### Selecting a sub sample in mload dataset\nSelect data by coordinates (date, latitude, longitude, levels and members)\n\n```\nsub_set = ds.sel(dates=[datetime(2019,12,26,12,0)], latitude=[-23.54,-22], longitude=[-46.64,-42.2], level=[2,6])\n\n>>> print(sub_set[0].get('u').isobaricInhPa.value.shape)\n(1, 1, 4, 6, 18)\n```\n\n### Showing the data structure\nPrints the data structure tree.\n```\n>>> ds.describe\n\n    +-- ref_time: 2019-12-26 00:00:00\n    +-- time_units: hours\n    +-- time: <class 'numpy.ma.core.MaskedArray'> (6,)\n    +-- r \n        +-- isobaricInhPa \n            +-- value: <class 'numpy.ndarray'> (1, 6, 7, 160, 80)\n            +-- level: [200, 300, 500, 700, 800, 950, 1000]\n            +-- members: [0]\n        +-- centre: 'ecmwf',\n        +-- dataType: 'an',\n        +-- param_id: 157\n        +-- long_name: Relative humidity\n        +-- parameter_units: %\n        +-- latitude: <class 'numpy.ndarray'> (160, 80)\n        +-- longitude: <class 'numpy.ndarray'> (160, 80)\n        +-- level_type: ['isobaricInhPa']\n        +-- grid_type: 'regular_ll'\n        +-- projparams: { 'a': 6371229.0, 'b': 6371229.0, 'proj': 'regular_ll'}\n        \n    .\n    .\n    .\n    \n    +-- v \n    +-- isobaricInhPa \n        +-- value: <class 'numpy.ndarray'> (1, 6, 7, 160, 80)\n        +-- level: [200, 300, 500, 700, 800, 950, 1000]\n        +-- members: [0]\n    +-- centre: 'ecmwf',\n    +-- dataType: 'an',\n    +-- param_id: 132\n    +-- long_name: V component of wind\n    +-- parameter_units: m s**-1\n    +-- latitude: <class 'numpy.ndarray'> (160, 80)\n    +-- longitude: <class 'numpy.ndarray'> (160, 80)\n    +-- level_type: ['isobaricInhPa']\n    +-- grid_type: 'regular_ll'\n    +-- projparams: { 'a': 6371229.0, 'b': 6371229.0, 'proj': 'regular_ll'}\n```\n\n\nSetting the ensemble grouping grib id key\n\n```\nds.fields_ensemble = 'perturbationNumber'\nds.fields_ensemble_exception = [0]\n```\n\n\n#### Grib\nThe class netcdf encapsulates all grib functions, as well as the cutting of time and spatial domains , returning the netcdf data as a dictionary type.\n\nSimple reading\n```\nfrom gdio.grib import grib\ngr = grib(verbose=False)\nds = gr.gb_load('data/era5_20191226-27_lev.grib')\n\n>>> ds.keys()\ndict_keys(['ref_time', 'time_units', 'time', 't', 'u', 'v', 'r'])\n>>> print(ds.u.isobaricInhPa.value.shape)\n(1, 4, 7, 241, 281)\n>>> print(ds.u.level_type)\n['isobaricInhPa']\n>>> print(ds.u.keys())\ndict_keys(['centre', 'dataType','isobaricInhPa', 'param_id', 'long_name', 'parameter_units', 'latitude', 'longitude', 'level_type', 'grid_type', projparams])\n>>> print(ds.u.isobaricInhPa.level)\n[200, 300, 500, 700, 800, 950, 1000]\n>>> print(ds.u.parameter_units)\nm s**-1\n>>> print(ds.u.param_id)\n131\n```\n\nReading a subsample in time (time 12-24) and space (bbox -30,-60 and 10,-40)\n\n```\nds = gr.gb_load('data/era5_20191226-27_lev.grib', cut_domain=(-30, -60, 10, -40), cut_time=(12, 24))\n```\n\nSetting the ensemble grouping grib id key\n\n```\ngr.fields_ensemble = 'perturbationNumber'\ngr.fields_ensemble_exception = [0]\n```\n\nFiltering by a grib key, dict with grib parameters at form of pair key:\nvalues (list or single values)\neg: filter_by={'perturbationNumber': [0,10],'level': [1000,500,250]}\n                            or filter_by={'gridType': 'regular_ll'}\n\n```\nds = gr.gb_load('tests/data/era5_20191226-27_lev.grib', \n                cut_domain=(-30, -60, 10, -40), \n                cut_time=(12, 24), \n                filter_by={'perturbationNumber': 0, 'level':[200,500,950]})\n>>> print(ds.u.isobaricInhPa.level)\n[200, 500, 950]\n```\nRename variables\nA dictionary input will rename variables names (key) for a new name (value).\nEg. {'tmpmdl': 't', 'tmpprs': 't'}\n\n```\nds = gr.gb_load('data/era5_20191227_lev.nc', rename_vars={'u':'10u'})\n>>> ds.keys()\ndict_keys(['ref_time', 'time_units', 'time', 't', '10u', 'v', 'r'])\n```\nSorting grib parameter before (extra consumption of memory and possible a little slow). \nFix grib files unstructured or non-standard.\n```\nds = gr.gb_load('data/era5_20191227_lev.nc', sort_before=True)\n```\n#### Writing a netcdf file\n\nFrom the loaded dataset\n```\nnc.nc_write('data/output.nc', ds)\n```\nFrom a dictionary\n```\nfrom gdio.grib import grib\ngr = grib(verbose=False)\nds = gr.gb_load('data/era5_20191226-27_lev.grib')\n\ngr.gb_write('output.grib', self.gbr, least_significant_digit=3, packingType='grid_jpeg')\n```\n\n#### Netcdf\nThe class netcdf encapsulates all netcdf functions of reading and writing, as well as the cutting of time and spatial domains, returning the netcdf data as a dictionary type. The returned dictionary contains for each variable the value, param_id, type_level, level and parameter_units property.\n\nSimple reading\n```\nfrom gdio.netcdf import netcdf\nnc = netcdf(verbose=False)\n\nds = nc.nc_load('tests/data/era5_20191227_lev.nc')\n>>> ds.keys()\ndict_keys(['ref_time', 'time_units', 'time', 'r', 't', 'u', 'v'])\n>>> print(ds.u.isobaricInhPa.value.shape)\n(1, 2, 7, 161, 241)\n>>> print(ds.u.level_type)\n['isobaricInhPa']\n>>> print(ds.u.keys())\ndict_keys(['isobaricInhPa', 'param_id', 'long_name', 'parameter_units', 'latitude', 'longitude', 'level_type'])\n>>> print(ds.u.isobaricInhPa.level)\n[200, 300, 500, 700, 800, 950, 1000]\n>>> print(ds.u.parameter_units)\nm s**-1\n>>> print(ds.u.param_id)\nNone\n```\n\nReading a subsample in time (time 12-24) and space (bbox -30,-60 and 10,-40). The returned multilevels dictionary/attributes contains for each variable the value, param_id, type_level, level and parameter_units property.\n\n```\nds = nc.nc_load('data/era5_20191227_lev.nc', cut_domain=(-30, -60, 10, -40), cut_time=(12, 24))\n>>> print(ds.u.isobaricInhPa.value.shape)\n(1, 1, 7, 80, 40)\n```\nRename variables\nA dictionary input will rename variables names (key) for a new name (value).\nEg. {'tmpmdl': 't', 'tmpprs': 't'}\n\n```\nds = nc.nc_load('data/era5_20191227_lev.nc', rename_vars={'u':'10u'})\n>>> ds.keys()\ndict_keys(['ref_time', 'time_units', 'time', 't', '10u', 'v', 'r'])\n```\n\n#### Writing a netcdf file\n\nFrom the loaded dataset\n```\nnc.nc_write('data/output.nc', ds)\n```\nFrom a dictionary\n```\nfrom datetime import datetime\nimport numpy as np\nfrom gdio.netcdf import netcdf\n\nnc = netcdf(verbose=False)\n\nds = {'ref_time': datetime(2019, 12, 27, 0, 0), \n      'time_units': 'hours', \n      'time': np.array([12]),\n      'u': {'isobaricInhPa': {  'value': np.random.random((1, 1, 7, 80, 40)),\n                                'level': [200, 300, 500, 700, 800, 950, 1000]\n                              },\n            'param_id': None, \n            'long_name': 'U component of wind', \n            'level_type': ['isobaricInhPa'],\n            'parameter_units': 'm s**-1',\n            'longitude': np.array([300. , 300.5, 301. , 301.5, 302. , 302.5, 303. , 303.5,\n               304. , 304.5, 305. , 305.5, 306. , 306.5, 307. , 307.5,\n               308. , 308.5, 309. , 309.5, 310. , 310.5, 311. , 311.5,\n               312. , 312.5, 313. , 313.5, 314. , 314.5, 315. , 315.5,\n               316. , 316.5, 317. , 317.5, 318. , 318.5, 319. , 319.5]),\n            'latitude': np.array([-30. , -29.5, -29. , -28.5, -28. , -27.5, -27. , -26.5,\n               -26. , -25.5, -25. , -24.5, -24. , -23.5, -23. , -22.5,\n               -22. , -21.5, -21. , -20.5, -20. , -19.5, -19. , -18.5,\n               -18. , -17.5, -17. , -16.5, -16. , -15.5, -15. , -14.5,\n               -14. , -13.5, -13. , -12.5, -12. , -11.5, -11. , -10.5,\n               -10. ,  -9.5,  -9. ,  -8.5,  -8. ,  -7.5,  -7. ,  -6.5,\n                -6. ,  -5.5,  -5. ,  -4.5,  -4. ,  -3.5,  -3. ,  -2.5,\n                -2. ,  -1.5,  -1. ,  -0.5,   0. ,   0.5,   1. ,   1.5,\n                 2. ,   2.5,   3. ,   3.5,   4. ,   4.5,   5. ,   5.5,\n                 6. ,   6.5,   7. ,   7.5,   8. ,   8.5,   9. ,   9.5]),\n            }\n      }\n\nnc.nc_write('data/output.nc', ds)\n```\n\n\n#### HDF5\nThe class hdf encapsulates all hdf5 functions of reading and writing, as well as the cutting of time and spatial domains, returning the hdf5 data as a dictionary type. The returned dictionary contains for each variable the value, param_id, type_level, level and parameter_units property.\n\nSimple reading\n```\nfrom gdio.hdf import hdf\nhd = hdf(verbose=False)\n\nds = hd.hdf_load('tests/data/gpm_3imerg_20220101.hdf')\n>>> ds.keys()\ndict_keys(['ref_time', 'time_units', 'time', 'r', 't', 'u', 'v'])\n>>> print(ds.u.isobaricInhPa.value.shape)\n(1, 2, 7, 161, 241)\n>>> print(ds.u.level_type)\n['isobaricInhPa']\n>>> print(ds.u.keys())\ndict_keys(['isobaricInhPa', 'param_id', 'long_name', 'parameter_units', 'latitude', 'longitude', 'level_type'])\n>>> print(ds.u.isobaricInhPa.level)\n[200, 300, 500, 700, 800, 950, 1000]\n>>> print(ds.u.parameter_units)\nm s**-1\n>>> print(ds.u.param_id)\nNone\n```\n\nReading a subsample in time (time 12-24) and space (bbox -30,-60 and 10,-40). The returned multilevels dictionary/attributes contains for each variable the value, param_id, type_level, level and parameter_units property.\n\n```\nds = hd.hdf_load('tests/data/gpm_3imerg_20220101.hdf', cut_domain=(-30, -60, 10, -40), cut_time=(0, 1))\n>>> print(ds.u.isobaricInhPa.value.shape)\n(1, 1, 7, 80, 40)\n```\nRename variables\nA dictionary input will rename variables names (key) for a new name (value).\nEg. {'tmpmdl': 't', 'tmpprs': 't'}\n\n```\nds = hd.hdf_load('tests/data/gpm_3imerg_20220101.hdf', rename_vars={'precipitationCal':'prec_merge', 'IRprecipitation': 'prec_ir'})\n>>> ds.keys()\ndict_keys(['ref_time', 'time_units', 'time', 't', '10u', 'v', 'r'])\n```\n\n#### Writing a HDF5 file\n\nFrom the loaded dataset\n```\nnc.nc_write('data/output.nc', ds)\n```\nFrom a dictionary\n```\nfrom datetime import datetime\nimport numpy as np\nfrom gdio.hdf import hdf\n\nnc = hdf(verbose=False)\n\nds = {'ref_time': datetime(2019, 12, 27, 0, 0), \n      'time_units': 'hours', \n      'time': np.array([12]),\n      'u': {'isobaricInhPa': {  'value': np.random.random((1, 1, 7, 80, 40)),\n                                'level': [200, 300, 500, 700, 800, 950, 1000]\n                              },\n            'param_id': None, \n            'long_name': 'U component of wind', \n            'level_type': ['isobaricInhPa'],\n            'parameter_units': 'm s**-1',\n            'longitude': np.array([300. , 300.5, 301. , 301.5, 302. , 302.5, 303. , 303.5,\n               304. , 304.5, 305. , 305.5, 306. , 306.5, 307. , 307.5,\n               308. , 308.5, 309. , 309.5, 310. , 310.5, 311. , 311.5,\n               312. , 312.5, 313. , 313.5, 314. , 314.5, 315. , 315.5,\n               316. , 316.5, 317. , 317.5, 318. , 318.5, 319. , 319.5]),\n            'latitude': np.array([-30. , -29.5, -29. , -28.5, -28. , -27.5, -27. , -26.5,\n               -26. , -25.5, -25. , -24.5, -24. , -23.5, -23. , -22.5,\n               -22. , -21.5, -21. , -20.5, -20. , -19.5, -19. , -18.5,\n               -18. , -17.5, -17. , -16.5, -16. , -15.5, -15. , -14.5,\n               -14. , -13.5, -13. , -12.5, -12. , -11.5, -11. , -10.5,\n               -10. ,  -9.5,  -9. ,  -8.5,  -8. ,  -7.5,  -7. ,  -6.5,\n                -6. ,  -5.5,  -5. ,  -4.5,  -4. ,  -3.5,  -3. ,  -2.5,\n                -2. ,  -1.5,  -1. ,  -0.5,   0. ,   0.5,   1. ,   1.5,\n                 2. ,   2.5,   3. ,   3.5,   4. ,   4.5,   5. ,   5.5,\n                 6. ,   6.5,   7. ,   7.5,   8. ,   8.5,   9. ,   9.5]),\n            }\n      }\n\nnc.hdf_write('data/output.nc', ds)\n```\n\n## Routines\n### gdio.mload\nLoad multiple files (netcdf/grib) returning the data as a list of dictionary type interpolating the data to a same grid\n\n```\nmload(files, vars=None, merge_files=True, cut_time=None,\n      cut_domain=None, level_type=None, filter_by={},\n      uniformize_grid=True, sort_before=False, inplace=False)\n```          \n**files:               list**\n\nfiles names\n                                    \n**uniformize_grid:     boolean**\\\ninterpolate all ncs to first nc grid specification\n\n**vars:                list**\\\nvariables names\n\n**merge_files:         boolean**\\\nmerge files\n\n**cut_time:            tuple**\\\n                        range of time to cut ex.: (0,10)/(0,None)/(None,10)\n\n**cut_domain:          tuple**\\\n                        range of latitudes and longitudes to cut: (lat1, lon1, lat2, lon2)\n                        ex.: (-45,-90,20,-30)/(-45,None,20,-30)/(None,-90,None,-20)\n\n**level_type:          list**\\\n                        type of level (hybrid, isobaricInhPa, surface)\n\n**filter_by:           dictonary**\\\ndict with grib parameters at form of pair key:values (list or single values)\neg: filter_by={'perturbationNumber': [0,10],'level': [1000,500,250]} or filter_by={'gridType': 'regular_ll'}|\n\n**rename_vars:         dictonary**\\\nrename variables names (key) for a new name (value). Eg. {'tmpmdl': 't', 'tmpprs': 't'}\n\n**sort_before:         bool**\\\nSort fields before process validityDate, validityTime, paramId, typeOfLevel, \nperturbationNumber and level. Warning extra consumption of memory and time, \njust use when the grib data structure is not standard (default False)\n\n**return:**                    list of dictionaries\n\n### gdio.sel\nSelect data by coordinates (date, latitude, longitude, levels and members)\n\n```\nsel(data=None, latitude=None, longitude=None, \n    dates=None, level=None, member=None, date_format=\"%Y-%m-%d %H:%M\")\n```\n\n\n**data:       list of dictionaries**\\\n                             raw dataset\n                             \n**latitude:     list of floats**\\\n                             latitudes\n                             range of latitudes to select: [lat1, lat2]\n                             especific latitudes (1 or >2) [lat1, lat2, lat3, ...]\n\n**longitude:    list of floats**\\\n                             range of longitudes to select: [lon1, lon2]\n                             especific longitudes (1 or >2) [lon1, lon2, lon3, ...]\n\n**dates:        list of datetime/string**\\\n                             datetime/string date\n                             range of dates to select: [date1, date2]\n                             especific dates (1 or >2) [date1, date2, date3, ...]\n\n**level:        list of int**\\\n                             range of levels to select: [level1, level2]\n                             especific levels (1 or >2) [level1, level2, level3, ...]\n\n**member:       list of int**\\\n                             range of levels to select: [member, member]\n                             especific levels (1 or >2) [level1, level2, level3, ...]\n\n**return:**     list of dictionaries\n\n### gdio.grib.gb_load\nLoad grib file\n```\ndef gb_load(ifile, vars=None, level_type=None,\n            cut_time=None, cut_domain=None, filter_by={},\n            rename_vars={}, sort_before=False)\n```\n\n**ifile:       string**\\\n                            grib 1 or 2 file name\n\n**vars:        list**\\\n                            variables short name or id parameter number\n\n**cut_time:    tuple**\\\n                            range of time to cut ex.: (0,10)/(0,None)/(None,10)\n\n**cut_domain:  tuple**\\\n                            range of latitudes and longitudes to cut: (lat1, lon1, lat2, lon2)\n                            ex.: (-45,290,20,330)/(-45,None,20,330)/(None,290,None,320)\n\n**level_type:  list**\\\n                            type of level (hybrid, isobaricInhPa, surface)\n\n**filter_by:   dictonary**\\\n                            dict with grib parameters at form of pair key:values (list or single values)\n                            eg: filter_by={\"perturbationNumber\": [0,10],\"level\": [1000,500,250]}\n                            or filter_by={\"gridType\": \"regular_ll\"}\n\n**rename_vars: dictonary**\\\n                            rename variables names (key) for a new name (value).\n                            Eg. {\"tmpmdl\": \"t\", \"tmpprs\": \"t\"}\n\n**sort_before: bool**\\\n                            Sort fields before process validityDate, validityTime, paramId, typeOfLevel, perturbationNumber and level\n                            Warning high consumption of memory, just use when the grib data structure is not standard\n\n**return: dictonary/attributes**\\\nmultiple time data container\n\n### gdio.grib.gb_write\nWrite grib2 file\n```\ndef gb_write(ofile, data, packingType='grid_simple', least_significant_digit=3, **kwargs))\n```\n**ifile: string**\\\nfile path\n\n**data: dict**\\\ndataset\n\n**packingType: string**\\\npackingType\\\n- Type of packing:\n  - grid_simple\n  - spectral_simple\n  - grid_simple_matrix\n  - grid_jpeg\n  - grid_png\n  - grid_ieee\n  - grid_simple_log_preprocessing\n  - grid_second_order\n\n**least_significant_digit: int (default 3)**\\\nSpecify the power of ten of the smallest decimal place in the data that is a\nreliable value that dramatically improve the compression by quantizing\n(or truncating) the data\n\n### gdio.netcdf.nc_load\nLoad netcdf files\n```\nnc_load(ifile, vars=None, cut_time=None, cut_domain=None, level_type=None, rename_vars={}):\n```\n\n**ifile:       string**\\\n                    netcdf file name\n                    \n**vars:        list**\\\n                    variables short name\n                    \n**cut_time:    tuple**\\\n                    range of time (absolute) to cut ex.: (0,10)/(0,None)/(None,10)\n                    \n**cut_domain:  tuple**\\\n                    range of latitudes and longitudes to cut: (lat1, lon1, lat2, lon2)\n                    ex.: (-45,290,20,330)/(-45,None,20,330)/(None,290,None,320)\n                    \n**level_type:  list**\\\n                    type of level (hybrid, isobaricInhPa, surface)\n\n**rename_vars: dictonary**\\\n                            rename variables names (key) for a new name (value).\n                            Eg. {\"tmpmdl\": \"t\", \"tmpprs\": \"t\"}\n                            \n**return: dictonary/attributes**\\\nmultiple time data container\n\n### gdio.netcdf.nc_write\nWrite netcdf file\n```\nnc_write(ifile, data, zlib=True, netcdf_format='NETCDF4')\n```\n\n\n**ifile:           string**\\\n                                file path\n                                \n**data:            dict**\\\n                                dataset\n                                \n**zlib:            bool**\\\n                                enable compression\n                                \n**netcdf_format:   string**\\\n                                netcdf format: NETCDF4, NETCDF4_CLASSIC, NETCDF3_CLASSIC or NETCDF3_64BIT\n\n\n**complevel:      int**\\\n compression level (default 4)\n\n**least_significant_digit: int**\\\nspecify the power of ten of the smallest decimal place in the data that is a\n                reliable value that dramatically improve zlib compression by quantizing\n                (or truncating) the data (default None)\n\n\n### gdio.hdf.hdf_load\nLoad HDF5 files\n```\nhdf_load(ifile, vars=None, cut_time=None, cut_domain=None, level_type=None, rename_vars={}):\n```\n\n**ifile:       string**\\\n                    hdf5 file name\n                    \n**vars:        list**\\\n                    variables short name\n                    \n**cut_time:    tuple**\\\n                    range of time (absolute) to cut ex.: (0,10)/(0,None)/(None,10)\n                    \n**cut_domain:  tuple**\\\n                    range of latitudes and longitudes to cut: (lat1, lon1, lat2, lon2)\n                    ex.: (-45,290,20,330)/(-45,None,20,330)/(None,290,None,320)\n                    \n**level_type:  list**\\\n                    type of level (hybrid, isobaricInhPa, surface)\n\n**rename_vars: dictonary**\\\n                            rename variables names (key) for a new name (value).\n                            Eg. {\"tmpmdl\": \"t\", \"tmpprs\": \"t\"}\n                            \n**return: dictonary/attributes**\\\nmultiple time data container\n\n\n### gdio.hdf.hdf_write\nWrite netcdf file\n```\nhdf_write(ifile, data, compress_type='gzip', netcdf_format='NETCDF4')\n```\n\n\n**ifile:           string**\\\n                                file path\n                                \n**data:            dict**\\\n                                dataset\n                                \n**compress_type:   string**\\\n                                type of compression: zlib, gzip, lzf (default gzip)\n**complevel:       int**\\\n                                compression level (default 9)\n\n**least_significant_digit: int**\\\nspecify the power of ten of the smallest decimal place in the data that is a\n                reliable value that dramatically improve zlib compression by quantizing\n                (or truncating) the data (default None)\n\n\n### gdio.remapbil\n```\nremapbil(data, lon, lat, lon_new, lat_new, order=1, masked=False)\n```\n\nInterpolate data to new domain resolution\n\n**data: array**\\\n                        3D data (time,lon,lat)\n\n**lon: array**\n\n**lat: array**\n\n**lon_new: array**\\\n                        new grid logitudes\n\n**lat_new: array**\\\n                        new grid latitudes\n\n**order:   int**\\\n                        0- nearest-neighbor, 1 - bilinear, 2 - cubic spline\n\n**masked: boolean**\\\n                        If True, points outside the range of xin and yin\n                        are masked (in a masked array). If masked is set to a number\n\n**return: 3D array**\n\n\n## Dev utils\nDocker compose to support development\n\n### Commands\n - make build\n   - Build the container\n - make up\n   - Start container\n - make stop\n   - Stop container\n - make test\n   - Run unit tests in container\n - make bash\n   - Access container\n - make ipython\n   - Run ipython in container\n - make fix\n   - Run autopep to fix code format\n\n## Release History\n\n\n## Meta\nRodrigo Yamamoto codes@rodrigoyamamoto.com\n\nhttps://github.com/rodri90y/gdio\n\n## Contributing\n\n* 0.3.2\n    * alpha release\n    \n\n## License\n\nMIT\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/rodri90y/gdio/archive/v0.3.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rodri90y/gdio",
    "keywords": "gdio,grib,netcdf,hdf5",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gdio",
    "package_url": "https://pypi.org/project/gdio/",
    "platform": null,
    "project_url": "https://pypi.org/project/gdio/",
    "project_urls": {
      "Download": "https://github.com/rodri90y/gdio/archive/v0.3.2.tar.gz",
      "Homepage": "https://github.com/rodri90y/gdio"
    },
    "release_url": "https://pypi.org/project/gdio/0.3.2/",
    "requires_dist": [
      "numpy",
      "netCDF4",
      "h5py",
      "eccodes",
      "pyproj"
    ],
    "requires_python": ">=3.8.5",
    "summary": "Gridded data io library",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15200175,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47f7be583367010de32ea213abc2030075f00812b481cd606d8c38e112111536",
          "md5": "411cc3992c24fc7e83640dc8de0bbc4f",
          "sha256": "09ebb39950dc5f9ab660d3efb3da0c95feaddbf7489c8be00b6c3e4fb6df0b29"
        },
        "downloads": -1,
        "filename": "gdio-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "411cc3992c24fc7e83640dc8de0bbc4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2000,
        "upload_time": "2020-06-02T12:25:47",
        "upload_time_iso_8601": "2020-06-02T12:25:47.969957Z",
        "url": "https://files.pythonhosted.org/packages/47/f7/be583367010de32ea213abc2030075f00812b481cd606d8c38e112111536/gdio-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7016e32ec1ffeec7aa950df19d5688e246644c68a6e139a662edfa5b3d592602",
          "md5": "df39ccfdb082915acea71860f858a481",
          "sha256": "8a3243d7c5c7d58b34f1167806ce186eb53993714f5b51505885ebc2bffb701e"
        },
        "downloads": -1,
        "filename": "gdio-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df39ccfdb082915acea71860f858a481",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16944,
        "upload_time": "2020-06-03T21:12:44",
        "upload_time_iso_8601": "2020-06-03T21:12:44.694601Z",
        "url": "https://files.pythonhosted.org/packages/70/16/e32ec1ffeec7aa950df19d5688e246644c68a6e139a662edfa5b3d592602/gdio-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0375c9cffd750d45332d64ff960a826a196cf4560c4d55918b56484363e50e4",
          "md5": "dbc1c0119ca109575dc3a8c21795a761",
          "sha256": "2aa202a60c9d7f7d2f9bfcfa277eed044dcbbac797afa1e6ae9b70e9989be206"
        },
        "downloads": -1,
        "filename": "gdio-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbc1c0119ca109575dc3a8c21795a761",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16988,
        "upload_time": "2020-06-04T14:14:32",
        "upload_time_iso_8601": "2020-06-04T14:14:32.742661Z",
        "url": "https://files.pythonhosted.org/packages/f0/37/5c9cffd750d45332d64ff960a826a196cf4560c4d55918b56484363e50e4/gdio-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb8e127f523a71dedfb97343b61bae0eab0588660fcad379250334ec77249ce5",
          "md5": "2dba23b2a0fe6e8be3fb10c12cdcbf9a",
          "sha256": "7d02bc364cd17213a31aae3d805b79f6755acc586286a89005060048ac352cf0"
        },
        "downloads": -1,
        "filename": "gdio-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dba23b2a0fe6e8be3fb10c12cdcbf9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16988,
        "upload_time": "2020-06-05T15:08:42",
        "upload_time_iso_8601": "2020-06-05T15:08:42.989903Z",
        "url": "https://files.pythonhosted.org/packages/cb/8e/127f523a71dedfb97343b61bae0eab0588660fcad379250334ec77249ce5/gdio-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48a39f69b9338c04712ccd714c9fab8d49245d11e7ba9c2b816a9535e6915780",
          "md5": "d4a3dfcbda0359814ff6df1ffc3cbf05",
          "sha256": "ad9c40475d8f899046425779701235b033ae19b01de0a5ba6f5ae9a8301e4b6a"
        },
        "downloads": -1,
        "filename": "gdio-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4a3dfcbda0359814ff6df1ffc3cbf05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17235,
        "upload_time": "2020-08-04T19:58:00",
        "upload_time_iso_8601": "2020-08-04T19:58:00.136614Z",
        "url": "https://files.pythonhosted.org/packages/48/a3/9f69b9338c04712ccd714c9fab8d49245d11e7ba9c2b816a9535e6915780/gdio-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c51cf3d8a2e665b06cf5b258bd6e3d588328b48bf1cd1b169f27e18b4a64b82",
          "md5": "355ea60ce1e3e3bce6936fc5588551bf",
          "sha256": "905336f2a4ced77e6af4b1b8aa922e6de28965c0ffd9bb55380707de888920c1"
        },
        "downloads": -1,
        "filename": "gdio-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "355ea60ce1e3e3bce6936fc5588551bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17267,
        "upload_time": "2020-08-05T14:07:21",
        "upload_time_iso_8601": "2020-08-05T14:07:21.182862Z",
        "url": "https://files.pythonhosted.org/packages/8c/51/cf3d8a2e665b06cf5b258bd6e3d588328b48bf1cd1b169f27e18b4a64b82/gdio-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ae828371c26238b2ddb051f86266f679920e1561b2448fd8b544dbed6b69c12",
          "md5": "bf132a5e4777ca9d532f250b71e0eb4d",
          "sha256": "ee71b51d36c8dd7ea2fae0e1b35188c28659a0bbe56efb98ffe769b505445588"
        },
        "downloads": -1,
        "filename": "gdio-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf132a5e4777ca9d532f250b71e0eb4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17604,
        "upload_time": "2020-08-06T16:33:31",
        "upload_time_iso_8601": "2020-08-06T16:33:31.025472Z",
        "url": "https://files.pythonhosted.org/packages/0a/e8/28371c26238b2ddb051f86266f679920e1561b2448fd8b544dbed6b69c12/gdio-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4382a4ebcaa51f332def13a1f7a1031d6e6482ee19a0f44a8d533e2c1eff907",
          "md5": "1ecd03a7721fa4e40023141c7934ebe1",
          "sha256": "eb372678044b2b9e85f996ade1e8723355c493293cf247ccdbc51d2ad6b377cc"
        },
        "downloads": -1,
        "filename": "gdio-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ecd03a7721fa4e40023141c7934ebe1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17600,
        "upload_time": "2020-08-12T20:09:52",
        "upload_time_iso_8601": "2020-08-12T20:09:52.991136Z",
        "url": "https://files.pythonhosted.org/packages/d4/38/2a4ebcaa51f332def13a1f7a1031d6e6482ee19a0f44a8d533e2c1eff907/gdio-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51dd7fb26ad032cdff141efec2d8708b458853ec0bee10540a8f9b032b3b920a",
          "md5": "fd96e9cafd6d26fcf117a8ae40041f39",
          "sha256": "04c48f217370e4eea67c23f9a7fec1d237234cd286cccfec8a54832d85ec978e"
        },
        "downloads": -1,
        "filename": "gdio-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd96e9cafd6d26fcf117a8ae40041f39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19608,
        "upload_time": "2020-09-07T20:29:03",
        "upload_time_iso_8601": "2020-09-07T20:29:03.420913Z",
        "url": "https://files.pythonhosted.org/packages/51/dd/7fb26ad032cdff141efec2d8708b458853ec0bee10540a8f9b032b3b920a/gdio-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a19b1b66cdd33309a69bc264f238161aa05ba31bfd3d1549611f5fb0cd5de6e2",
          "md5": "5b868e8496c93e16a1cfd1e7ec813c91",
          "sha256": "adc42271a1d324adef2aaf177e2ec4b1dd0f5daa45ec57579b6dcac2e609151c"
        },
        "downloads": -1,
        "filename": "gdio-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b868e8496c93e16a1cfd1e7ec813c91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19672,
        "upload_time": "2020-09-10T18:12:09",
        "upload_time_iso_8601": "2020-09-10T18:12:09.305663Z",
        "url": "https://files.pythonhosted.org/packages/a1/9b/1b66cdd33309a69bc264f238161aa05ba31bfd3d1549611f5fb0cd5de6e2/gdio-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87631e47db62bff0bae2887680d65cb14490a3a2d81c6b5d70c3ff4773d62d78",
          "md5": "5752e7fa3f04a15120705a07fb13718f",
          "sha256": "8739fcb58665f5594bf7e7c8dd8c1bacbbda30f572a041976fc3aeb309803447"
        },
        "downloads": -1,
        "filename": "gdio-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5752e7fa3f04a15120705a07fb13718f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19804,
        "upload_time": "2020-09-11T17:19:35",
        "upload_time_iso_8601": "2020-09-11T17:19:35.922778Z",
        "url": "https://files.pythonhosted.org/packages/87/63/1e47db62bff0bae2887680d65cb14490a3a2d81c6b5d70c3ff4773d62d78/gdio-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5867ebe05262ea49491007fdfab3d3016391017ab1dfa8798bf0ca1f77dad35",
          "md5": "edbd4f1bc02c84e6ea536a95da2b7bbc",
          "sha256": "86b283fcd79db778fa526aa8b65d04d942348dd88fba5eff826b623cdf01b41e"
        },
        "downloads": -1,
        "filename": "gdio-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edbd4f1bc02c84e6ea536a95da2b7bbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19708,
        "upload_time": "2020-09-13T12:30:28",
        "upload_time_iso_8601": "2020-09-13T12:30:28.588258Z",
        "url": "https://files.pythonhosted.org/packages/a5/86/7ebe05262ea49491007fdfab3d3016391017ab1dfa8798bf0ca1f77dad35/gdio-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b0612265fd4b3459df9de989f9be31c172e8084ceba8001c9b3c145dc963c35",
          "md5": "8cfc5d31009f577e1fd3c270260208eb",
          "sha256": "41ca248630c04699d270c854c5d1906904ca5ef7a72ae89faaadebef7f7e14fb"
        },
        "downloads": -1,
        "filename": "gdio-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cfc5d31009f577e1fd3c270260208eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38032,
        "upload_time": "2020-11-09T23:15:52",
        "upload_time_iso_8601": "2020-11-09T23:15:52.101643Z",
        "url": "https://files.pythonhosted.org/packages/2b/06/12265fd4b3459df9de989f9be31c172e8084ceba8001c9b3c145dc963c35/gdio-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f2adbc7ee1b98b4401630ac2cce272365f0842d9a058f2a2c6e61d871fedbc3",
          "md5": "5594688223314f7a6b06c60558c36c4b",
          "sha256": "9ee04291fc2380044b1ffb04e850a251920e7d4a997cadc9a12163f793384c0f"
        },
        "downloads": -1,
        "filename": "gdio-0.1.8.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5594688223314f7a6b06c60558c36c4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.5",
        "size": 39683,
        "upload_time": "2021-01-25T16:00:49",
        "upload_time_iso_8601": "2021-01-25T16:00:49.400684Z",
        "url": "https://files.pythonhosted.org/packages/6f/2a/dbc7ee1b98b4401630ac2cce272365f0842d9a058f2a2c6e61d871fedbc3/gdio-0.1.8.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f595fa75f4359ee3443112f1b911cc03a5c13a7c142780f4d65d737a686ec116",
          "md5": "054e66dc66855450d6643d5872145498",
          "sha256": "50623dbfb223284a8a93705ebd0bfa0a1f5c9410dd50628ebcb33d73480026bc"
        },
        "downloads": -1,
        "filename": "gdio-0.1.8.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "054e66dc66855450d6643d5872145498",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.5",
        "size": 39624,
        "upload_time": "2021-01-25T16:54:55",
        "upload_time_iso_8601": "2021-01-25T16:54:55.358489Z",
        "url": "https://files.pythonhosted.org/packages/f5/95/fa75f4359ee3443112f1b911cc03a5c13a7c142780f4d65d737a686ec116/gdio-0.1.8.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95e96c6ab4e41c7f9347f996396a7b5a7b5cd06ec79430ccda2e7902f196b732",
          "md5": "b66bc923c3a8e60eeca07683a64cc8e9",
          "sha256": "10249395d36599b65fef6919deb488f2ea9c3ded834af5077888dd53708d031e"
        },
        "downloads": -1,
        "filename": "gdio-0.1.8.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b66bc923c3a8e60eeca07683a64cc8e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.5",
        "size": 39639,
        "upload_time": "2021-02-18T13:24:19",
        "upload_time_iso_8601": "2021-02-18T13:24:19.711640Z",
        "url": "https://files.pythonhosted.org/packages/95/e9/6c6ab4e41c7f9347f996396a7b5a7b5cd06ec79430ccda2e7902f196b732/gdio-0.1.8.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5cdb9e808f4107d2f61801ef4728c98e6e6950b346e24a1f76d053ea08c61bc",
          "md5": "8181a78be860d24172c9048b13c7bbc2",
          "sha256": "6a2675ce64d229fe4f2231e3794e71884a1abd57e362d9d0d34f2e164fd239c4"
        },
        "downloads": -1,
        "filename": "gdio-0.1.8.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8181a78be860d24172c9048b13c7bbc2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 39779,
        "upload_time": "2021-02-26T16:58:12",
        "upload_time_iso_8601": "2021-02-26T16:58:12.838012Z",
        "url": "https://files.pythonhosted.org/packages/d5/cd/b9e808f4107d2f61801ef4728c98e6e6950b346e24a1f76d053ea08c61bc/gdio-0.1.8.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a41ed0ce223a75f4c6a4cf5a1329ae095be0aa18751df89908960b95f56f448",
          "md5": "69a77369062c5696128730e2c2ea3d6a",
          "sha256": "eaea0a2b8a11408f45c4872c4399d1848707fa656972ef903511642ba3fc6f64"
        },
        "downloads": -1,
        "filename": "gdio-0.1.8.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69a77369062c5696128730e2c2ea3d6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 40429,
        "upload_time": "2021-03-15T13:01:25",
        "upload_time_iso_8601": "2021-03-15T13:01:25.295987Z",
        "url": "https://files.pythonhosted.org/packages/8a/41/ed0ce223a75f4c6a4cf5a1329ae095be0aa18751df89908960b95f56f448/gdio-0.1.8.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "954828f232eb1d4e2c9394ecfb4c6564c5a3da63d2afd28e30bf7568584c593e",
          "md5": "f8bd7c5488d153c0ee3de2e562277c5f",
          "sha256": "28e77bb4a4cc1ec05f7691829993d015c8da3059428e6705e1b950e3b1b03daa"
        },
        "downloads": -1,
        "filename": "gdio-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8bd7c5488d153c0ee3de2e562277c5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 40417,
        "upload_time": "2022-02-02T18:28:36",
        "upload_time_iso_8601": "2022-02-02T18:28:36.931150Z",
        "url": "https://files.pythonhosted.org/packages/95/48/28f232eb1d4e2c9394ecfb4c6564c5a3da63d2afd28e30bf7568584c593e/gdio-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3295794471ac0f9838d6fababb7b168376f80f680097f4f25bdfc9c2e7bd88a6",
          "md5": "2021558e214db9c9b140e9ad2c68f67c",
          "sha256": "b23f8e625d5fed13324bf5d1d1f96db918741848dd32410a4f13ac5ee00bc1b7"
        },
        "downloads": -1,
        "filename": "gdio-0.1.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2021558e214db9c9b140e9ad2c68f67c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 40463,
        "upload_time": "2022-02-03T20:42:01",
        "upload_time_iso_8601": "2022-02-03T20:42:01.845814Z",
        "url": "https://files.pythonhosted.org/packages/32/95/794471ac0f9838d6fababb7b168376f80f680097f4f25bdfc9c2e7bd88a6/gdio-0.1.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a7e65bbf5c73ac39336fc87a9f3f7fc7283a2a10ba4d9e3834c5ba4ed27f3c6",
          "md5": "a486aa647e28980c8f61a0cba081feca",
          "sha256": "51762ad6e4d36a35b431f34607451b404e17d7e8f66f141d718be71584e09473"
        },
        "downloads": -1,
        "filename": "gdio-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a486aa647e28980c8f61a0cba081feca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 26131,
        "upload_time": "2022-02-16T20:16:52",
        "upload_time_iso_8601": "2022-02-16T20:16:52.760857Z",
        "url": "https://files.pythonhosted.org/packages/5a/7e/65bbf5c73ac39336fc87a9f3f7fc7283a2a10ba4d9e3834c5ba4ed27f3c6/gdio-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be47296219912fea945d83e20e49f91f4d55d3e9c7bf7d949bcf8005a653ddd4",
          "md5": "9d1fb8f3f3bca46cb93279125818532e",
          "sha256": "11d5fe745ac0eca557256e0322c6863c7d55bf13d9e06f5a4eb390927e5a04d5"
        },
        "downloads": -1,
        "filename": "gdio-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d1fb8f3f3bca46cb93279125818532e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 26158,
        "upload_time": "2022-02-19T19:58:46",
        "upload_time_iso_8601": "2022-02-19T19:58:46.316908Z",
        "url": "https://files.pythonhosted.org/packages/be/47/296219912fea945d83e20e49f91f4d55d3e9c7bf7d949bcf8005a653ddd4/gdio-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e59705542e70dbc10c2a86c2cc3887d4f470444e6fe511d2229de8aa99368fdd",
          "md5": "1fe2769f1dc1c5a578dc129e82ffecbd",
          "sha256": "415aa7dd33bafb8587fd75079f6ba446249538403283c047b6a8de5c49de5c7d"
        },
        "downloads": -1,
        "filename": "gdio-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fe2769f1dc1c5a578dc129e82ffecbd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 26291,
        "upload_time": "2022-02-22T01:09:55",
        "upload_time_iso_8601": "2022-02-22T01:09:55.657164Z",
        "url": "https://files.pythonhosted.org/packages/e5/97/05542e70dbc10c2a86c2cc3887d4f470444e6fe511d2229de8aa99368fdd/gdio-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d6c222b2feb3f431f550d4973eef9debef88e2967a273d5dc3252c58658054a",
          "md5": "9df666dc3ad1774a8ccde1b87a471481",
          "sha256": "15a6c92364c627b08c0027dca4ad8e1adc68940821a48a6faf26ce7868bde6d4"
        },
        "downloads": -1,
        "filename": "gdio-0.2.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9df666dc3ad1774a8ccde1b87a471481",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 26607,
        "upload_time": "2022-02-24T12:56:26",
        "upload_time_iso_8601": "2022-02-24T12:56:26.179941Z",
        "url": "https://files.pythonhosted.org/packages/3d/6c/222b2feb3f431f550d4973eef9debef88e2967a273d5dc3252c58658054a/gdio-0.2.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f56cbf303d112c36b8788c360cdcd4796b932f3d30dc78772a82d3258b1ba16a",
          "md5": "85c405189f458a7e8b45b6298728292f",
          "sha256": "f18a8e4dafa451213b02a543b4b343aa5ff188b09637b9dd867ba27307007b7b"
        },
        "downloads": -1,
        "filename": "gdio-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85c405189f458a7e8b45b6298728292f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 37140,
        "upload_time": "2022-03-31T12:21:34",
        "upload_time_iso_8601": "2022-03-31T12:21:34.583005Z",
        "url": "https://files.pythonhosted.org/packages/f5/6c/bf303d112c36b8788c360cdcd4796b932f3d30dc78772a82d3258b1ba16a/gdio-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c73583f5bd7761ed947bac79e0b4ced1d0f31610c1ddc7a6206b7746111ecea2",
          "md5": "89de8b2c992658bbbc6e1c5ea95a232b",
          "sha256": "c04ef0cb731dd828618151e62ebf59c24313c360edda2ec3f2fd881a86e4f16e"
        },
        "downloads": -1,
        "filename": "gdio-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89de8b2c992658bbbc6e1c5ea95a232b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 37227,
        "upload_time": "2022-04-02T15:17:38",
        "upload_time_iso_8601": "2022-04-02T15:17:38.476163Z",
        "url": "https://files.pythonhosted.org/packages/c7/35/83f5bd7761ed947bac79e0b4ced1d0f31610c1ddc7a6206b7746111ecea2/gdio-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "852cf3722fc0a1cb3a673210c6fcf98fcf5096b5ebc3ba2a0ff933cda66eab50",
          "md5": "26c55b3cafb56503c01634ed3188da31",
          "sha256": "f559b1d334cb432a2bba1d74090accfb132269b44d78fd1f40e2bba76747f609"
        },
        "downloads": -1,
        "filename": "gdio-0.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26c55b3cafb56503c01634ed3188da31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 13594193,
        "upload_time": "2022-05-20T13:24:37",
        "upload_time_iso_8601": "2022-05-20T13:24:37.855120Z",
        "url": "https://files.pythonhosted.org/packages/85/2c/f3722fc0a1cb3a673210c6fcf98fcf5096b5ebc3ba2a0ff933cda66eab50/gdio-0.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e72440ba3268324f7166e07e8923e32c16eb12085bdf8db7945a1b5d7ab8255c",
          "md5": "96a8787f6f7ef4c8d4c82e24cc23b894",
          "sha256": "57a599c661b51248ccb957298db4741cf0aba231fd42c35cfc784c740426aa97"
        },
        "downloads": -1,
        "filename": "gdio-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96a8787f6f7ef4c8d4c82e24cc23b894",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.9",
        "size": 13594365,
        "upload_time": "2022-06-09T23:13:47",
        "upload_time_iso_8601": "2022-06-09T23:13:47.286843Z",
        "url": "https://files.pythonhosted.org/packages/e7/24/40ba3268324f7166e07e8923e32c16eb12085bdf8db7945a1b5d7ab8255c/gdio-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32c7f6941da6d45606722cddca1435c41083a0786241bb9439c1a106eec527e5",
          "md5": "d1c42b11d4f378af9ab8ebe7350135a3",
          "sha256": "87e156b91386e5a210eec40cc4077c7879a0ecdab47a76585d474808971d9313"
        },
        "downloads": -1,
        "filename": "gdio-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1c42b11d4f378af9ab8ebe7350135a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.5",
        "size": 13594354,
        "upload_time": "2022-07-11T21:37:47",
        "upload_time_iso_8601": "2022-07-11T21:37:47.039686Z",
        "url": "https://files.pythonhosted.org/packages/32/c7/f6941da6d45606722cddca1435c41083a0786241bb9439c1a106eec527e5/gdio-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e713f35a03898fa02cb31810fa1258a52b02fd49508628e158474d25aa3ac4c",
          "md5": "884f87da0ff5c638dd86c44683d2ecdf",
          "sha256": "568301e8d4fd9b2ee16414cbf4da9417a0d84eeaf0d1f39284f07797bd3bc513"
        },
        "downloads": -1,
        "filename": "gdio-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "884f87da0ff5c638dd86c44683d2ecdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.5",
        "size": 46897,
        "upload_time": "2022-09-24T18:31:45",
        "upload_time_iso_8601": "2022-09-24T18:31:45.948719Z",
        "url": "https://files.pythonhosted.org/packages/9e/71/3f35a03898fa02cb31810fa1258a52b02fd49508628e158474d25aa3ac4c/gdio-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e713f35a03898fa02cb31810fa1258a52b02fd49508628e158474d25aa3ac4c",
        "md5": "884f87da0ff5c638dd86c44683d2ecdf",
        "sha256": "568301e8d4fd9b2ee16414cbf4da9417a0d84eeaf0d1f39284f07797bd3bc513"
      },
      "downloads": -1,
      "filename": "gdio-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "884f87da0ff5c638dd86c44683d2ecdf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.5",
      "size": 46897,
      "upload_time": "2022-09-24T18:31:45",
      "upload_time_iso_8601": "2022-09-24T18:31:45.948719Z",
      "url": "https://files.pythonhosted.org/packages/9e/71/3f35a03898fa02cb31810fa1258a52b02fd49508628e158474d25aa3ac4c/gdio-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}