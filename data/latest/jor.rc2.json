{
  "info": {
    "author": "Markus Helmer",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "jor\n===\n\n**jor** (JOb Runner) keeps track of jobs. Jobs are specified \nin a simple format and can then be run collectively with a \nsimple command, mindful of which outputs already exist.\nJobs can optionally be run in a *conda* environment or in a \n*Singularity* container, and can be run either locally or \nsubmitted to a compute node with *slurm*.\n\n**jor** is particularly useful\n\n* if a large number of different jobs needs to be run\n* for parameter sweeps\n* in an HPC environment: **jor** can submit jobs with ``slurm``\n* for reproducible research results: **jor** can run jobs in a Singularity container\n\nUsage\n-----\n\nTo use **jor** requires 3 preparatory steps:\n\n#. Write a simple Python wrapper around the actual computations, specifying the job's inputs and outputs\n#. Collect all the jobs in a todo-list\n#. Write up some runtime-arguments in a config file\n\nThese steps are described in detail below.\n\nOnce these preparations are done, all jobs can be run with\n\n.. code-block:: bash\n\n    jor run\n\nand the status of the jobs specified in the todo-list can be inspected with\n\n.. code-block:: bash\n\n    jor status\n\nPreparatory steps\n-----------------\n\n.. _the-job-wrapper:\n\n1. The Job-wrapper\n..................\n\nThis is the most complex of the 3 steps. It requires to implement 4-5 functions that specify\n\n#. the parameters for each job\n#. the output folder for each job\n#. the name of the output file for each job\n#. the actual computation for each job\n#. if applicable, how to concatenate all outputs of this job into a single file\n\n.. note::\n\n    All these steps would be necessary no matter if ``jor`` is used to perform \n    the jobs' computations or not, the only difference is that, to use ``jor`` they \n    need to be specified in a particular way. Thus ``jor`` doesn't lead to much\n    code overhead.\n\nHere is a template:\n\n.. code-block:: Python\n\n    import pathlib\n    import jor\n\n\n    class Jobs(jor.JobsBase):\n\n        # slurm options\n        name = 'job'\n        time = '0-23:59:59'\n        mem = '5G'\n        cpus_per_task = 1\n\n        def __init__(self, n=3, path_prefix='.'):\n\n            # init base class\n            super().__init__(path_prefix=path_prefix)\n\n            # store job-specific keyword arguments\n            self.n = int(n)\n\n            # assemble a list of jobs\n            self._mk_jobs()\n\n        def _mk_jobs(self):\n            \"\"\"Generates the attribute ``self._jobs``\n\n            ``self._jobs`` is a list of dictionaries, containing one dictionary\n            for each jobs to be run. Each of these dictionaries specifies the \n            parameters for each individual job.\n            \"\"\"\n            self._jobs = [\n                dict(index=i)\n                for i in range(self.n)\n            ]\n\n        def _get_output_folder(self):\n            \"\"\"Return output folder for jobs\n\n            Output folder is the ``path_prefix``, followed by the name of a subfolder\n            encoding the arguments given in the constructor.\n            \"\"\"\n            output_folder = pathlib.Path(self.path_prefix) / f'example{self.n}'\n            return str(output_folder)\n\n        def _get_output_fname(self, index):\n            \"\"\"Return output file name for a given job\n\n            The particular job is specified by the arguments to this function,\n            which match the keys of the dictionaries in ``self._jobs`` (cf.\n            :func:`self._mk_jobs`).\n            \"\"\"\n            outfname = f'ind{index}.txt'\n            return outfname\n\n        def execute(self, i):\n            \"\"\"This function performs the actual work\n\n            Parameters\n            ----------\n            i : int between 0 and number of jobs (``len(self._jobs)``)\n                indicating the index in ``self._jobs`` from which to take\n                the dictionary with this job's parameter values\n            \"\"\"\n            myargs = self._jobs[i]\n            output_path = self._get_output_path(**myargs)\n\n            # do the work and write outcomes to file ``output_path``\n            with open(output_path, 'wt') as f:\n                f.write(str(myargs) + '\\n')\n\n        def collect(self):\n            \"\"\"Concatenates all outputs into a common output\n\n            This function is optional and can be implemented if desired for \n            the particular job. It is called by running ``jor collect`` on the \n            command line.\n            \"\"\" \n            pass\n\n.. note::\n\n    #. The wrapper needs to be a Python file containaing a class ``Jobs``, derived from ``jor.JobsBase``\n    #. The indicated ``slurm`` options are defaults inherited from ``jor.JobsBase``, i.e. they only need to be specified if a different value is desired\n\nTo adapt this to a specific application:\n\n#. Adapt the constructor to take job-specific arguments\n#. Reimplement ``_mk_jobs``\n#. Reimplement ``_get_output_folder``\n#. Reimplement ``_get_output_fname``\n#. Reimplement ``execute``\n#. If applicable, reimplement ``collect``\n\n2. The todo-list\n................\n\nThe file containing the todo-list is a *YAML* file named \n``todo.yaml`` by default.\nIt has the following format:\n\n.. code-block:: yaml\n\n    jobs:\n    - jobmodule: ./jobs_example.py\n      jobargs: n=3\n    - jobmodule: ./jobs_example.py\n      jobargs: n=4\n\nThere can be an arbitrary number of jobs specified in this file.\n\n.. note::\n\n    #. The file needs to start with ``jobs:``\n    #. Each job is specified by 2 lines, 1 starting with ``- jobmodule:`` the other with an indented ``jobargs:``.\n    #. The argument for ``jobmodule:`` is the name (or path to) the Python file containing the wrapper code.\n    #. The argument to ``jobargs:`` is a comma-separated list of keyword-arguments for the constructor of the ``Jobs`` class in the wrapper file. It needs to be valid Python and can be empty if no keyword arguments are necessary.\n\n3. The config file\n..................\n\nThe config file needs to be named ``jor.cfg`` and needs to \nreside in the working directory from which ``jor`` is called.\nIt has the following format:\n\n.. code-block:: cfg\n\n    [global]\n    path-prefix = output\n    overwrite-output = False\n\n    [run]\n    todo-list = todo.yaml\n\n    [submit]\n    scheduler = local\n    partition = day\n    sif =\n    condaenv =\n\n    [collect]\n    missing-output = ignore\n\nThe configuration options have the following meaning:\n\n.. list-table:: Configuration options\n    :header-rows: 1\n\n    * - Keyword\n      - Allowed values\n      - Meaning\n    * - ``path-prefix``\n      - file-system paths\n      - the job-wrapper should receive ``path_prefix`` as a keyword argument in the ``Jobs`` constructor, and should prefix all internally generated output-paths with the value of ``path-prefix``\n    * - ``overwrite-output``\n      - ``True`` or ``False``\n      - if ``False`` ``jor`` will check which outputs already exist and only run jobs that result in the remaining outputs\n    * - ``todo-list``\n      - a filename\n      - file name containing todo-list, by default this is ``todo.yaml``, there's probably no reason to change this\n    * - ``scheduler``\n      - ``local`` or ``slurm``\n      - if ``local`` jobs will be run in order locally; if ``slurm`` one job-array will be submitted via ``slurm``'s ``sbatch`` command per entry in the todo-list\n    * - ``partition``\n      - a valid ``slurm`` partition (queue) name\n      - ignored if ``scheduler = local``\n    * - ``sif``\n      - either empty or path to a Singularity container\n      - if not empty all jobs will be run in this container\n    * - ``condaenv``\n      - either empty of name of a ``conda`` environment\n      - if not empty, this ``conda`` environment will be activated before running each job\n    * - ``missing-output``\n      - ``ignore`` or ``raise``\n      - in case the job-wrapper implements a ``collect`` method to concatenate outputs, this specifies how missing files are handled: if ``ignore`` missing outputs will be ignored, if ``raise`` missing outputs will cause concatenation to abort\n\n.. note:: \n\n    All configuration-options in ``jor.cfg`` can be \n    overwritten in the command-line call to ``jor``.\n\nExample\n-------\n\nAn example is provided in the ``examples`` subfolder. The file ``jobs_example.py`` \ncontains the code shown `above <the-job-wrapper_>`__. Likewise the ``todo.yaml`` \nand ``jor.cfg`` files from above can be found there. Calling\n\n.. code-block:: bash\n\n    jor run\n\nreturns\n\n.. code-block:: bash\n\n    [jor] Submitting job: ./jobs_example.py\n    [jor] Submitting job: ./jobs_example.py\n\nand inspecting the ``output`` folder\n\n.. code-block:: bash\n\n    ls -R output\n\nshows that all output files are present:\n\n.. code-block:: bash\n\n    example3 example4\n\n    output/example3:\n    ind0.txt ind1.txt ind2.txt\n\n    output/example4:\n    ind0.txt ind1.txt ind2.txt ind3.txt\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mdhelmer/jor",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jor",
    "package_url": "https://pypi.org/project/jor/",
    "platform": "",
    "project_url": "https://pypi.org/project/jor/",
    "project_urls": {
      "Homepage": "https://github.com/mdhelmer/jor"
    },
    "release_url": "https://pypi.org/project/jor/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Lighweight JOb Runner for reproducible research results in HPC environments",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8117009,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fc86e01dba4e05a050461c04f82dc3aff4c68313fc2cb7f6f339cd132fb1b30",
          "md5": "b1061aeb03daeb85a0fea5347c021750",
          "sha256": "0d84b9adba3187cd9ce6ec4a3217709a9beeeeb90c6ce367d81b72b7e81c2c36"
        },
        "downloads": -1,
        "filename": "jor-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1061aeb03daeb85a0fea5347c021750",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21269,
        "upload_time": "2020-09-04T21:29:53",
        "upload_time_iso_8601": "2020-09-04T21:29:53.261798Z",
        "url": "https://files.pythonhosted.org/packages/8f/c8/6e01dba4e05a050461c04f82dc3aff4c68313fc2cb7f6f339cd132fb1b30/jor-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fb7b608b539832c3f61cdb6ce1a27824a5a5ae4bbd740e1968e6f94048e336a",
          "md5": "a7d8ce851f9409b8baacc88b20584c28",
          "sha256": "c7db72ea0c4137ae09b90e9af8fef0542c9e1c751762f43bcf5d899aec09c208"
        },
        "downloads": -1,
        "filename": "jor-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a7d8ce851f9409b8baacc88b20584c28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24175,
        "upload_time": "2020-09-04T21:29:56",
        "upload_time_iso_8601": "2020-09-04T21:29:56.539717Z",
        "url": "https://files.pythonhosted.org/packages/7f/b7/b608b539832c3f61cdb6ce1a27824a5a5ae4bbd740e1968e6f94048e336a/jor-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "600a48d23b1506c05661b1a5147bd5d5eff57eec4cb8b72473df52b99c383255",
          "md5": "06cd84284ef18a61059cdc4d63ed07e7",
          "sha256": "e30eefaf4ea3de1debf464f658c29ec8db7a90bdea4e7f542bc8681e41b09886"
        },
        "downloads": -1,
        "filename": "jor-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06cd84284ef18a61059cdc4d63ed07e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21272,
        "upload_time": "2020-09-04T21:33:37",
        "upload_time_iso_8601": "2020-09-04T21:33:37.291977Z",
        "url": "https://files.pythonhosted.org/packages/60/0a/48d23b1506c05661b1a5147bd5d5eff57eec4cb8b72473df52b99c383255/jor-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d935c77274380b79f60375516ba3422b7af2b66efcaa9de502986847cb8908d3",
          "md5": "66ae2e2d49fb3477ee82aba070e409eb",
          "sha256": "c978372536b1d24d53db80c34e3809892d201d2c6f67932e2ef9cfaf7a7b1415"
        },
        "downloads": -1,
        "filename": "jor-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "66ae2e2d49fb3477ee82aba070e409eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24185,
        "upload_time": "2020-09-04T21:33:38",
        "upload_time_iso_8601": "2020-09-04T21:33:38.542784Z",
        "url": "https://files.pythonhosted.org/packages/d9/35/c77274380b79f60375516ba3422b7af2b66efcaa9de502986847cb8908d3/jor-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "600a48d23b1506c05661b1a5147bd5d5eff57eec4cb8b72473df52b99c383255",
        "md5": "06cd84284ef18a61059cdc4d63ed07e7",
        "sha256": "e30eefaf4ea3de1debf464f658c29ec8db7a90bdea4e7f542bc8681e41b09886"
      },
      "downloads": -1,
      "filename": "jor-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "06cd84284ef18a61059cdc4d63ed07e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21272,
      "upload_time": "2020-09-04T21:33:37",
      "upload_time_iso_8601": "2020-09-04T21:33:37.291977Z",
      "url": "https://files.pythonhosted.org/packages/60/0a/48d23b1506c05661b1a5147bd5d5eff57eec4cb8b72473df52b99c383255/jor-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d935c77274380b79f60375516ba3422b7af2b66efcaa9de502986847cb8908d3",
        "md5": "66ae2e2d49fb3477ee82aba070e409eb",
        "sha256": "c978372536b1d24d53db80c34e3809892d201d2c6f67932e2ef9cfaf7a7b1415"
      },
      "downloads": -1,
      "filename": "jor-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "66ae2e2d49fb3477ee82aba070e409eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 24185,
      "upload_time": "2020-09-04T21:33:38",
      "upload_time_iso_8601": "2020-09-04T21:33:38.542784Z",
      "url": "https://files.pythonhosted.org/packages/d9/35/c77274380b79f60375516ba3422b7af2b66efcaa9de502986847cb8908d3/jor-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}