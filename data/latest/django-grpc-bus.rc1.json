{
  "info": {
    "author": "Rameez Arshad",
    "author_email": "rameez.arshad@outlook.in",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Django gRPC Framework\n=====================\n\nDjango gRPC framework is a advanced toolkit for building gRPC services.\n\n# Requirements\n\n* Python (3.6, 3.7, 3.8, 3.9)\n* Django (2.2, 3.0, 3.1)\n* Django Rest Framework (3.10, 3.11)\n* grpcio (1.34x)\n* grpcio-health (1.34x)\n* grpcio-reflection (1.34x)\n* grpcio-tools (1.34x)\n* isort\n\n\nInstallation\n------------\n\n    $ pip install django-grpc-bus \n\n\nAdd ``django_grpc_bus`` to ``INSTALLED_APPS`` setting:\n\n    INSTALLED_APPS = [\n        ...\n        'django_grpc_bus',\n    ]\n\nAdd ``MESSAGE_BUS`` to settings:\n    \n    MESSAGE_BUS = {\n        'ROOT_HANDLERS_HOOK': 'path.to.handler',\n        'SERVICE_META': os.path.join(BASE_DIR, 'service_meta.yaml'),\n        'PRODUCER_ROOT': os.path.join(settings.BASE_DIR, 'generated_grpc'),\n        'SERVICE_TEMPLATE': os.path.join(Path(__file__).resolve().parent, 'service_template'),\n        'HANDLER_TEMPLATE': os.path.join(Path(__file__).resolve().parent, 'handler_template'),\n        'SERVLETS': {\n            'service1': {\n                'host': localhost,\n                'port': 50051,\n            },\n            'service2': {\n                'host': localhost,\n                'port': 50052,\n            },\n            'service3': {\n                'host': localhost,\n                'port': 50053,\n            },\n        }\n    }\n\n# Example\n\nLet's take a look at a quick example of using gRPC framework to serve and consume gRPC services.\n\nDefine ``service_meta.yml`` in the project root\n\n```yaml\napps:\n  - name: app_1\n    models:\n      - name: model_1\n        exclude:\n          - exclude_field_1\n          - exclude_field_2\n  - name: app_2\n    models:\n      - name: model_2\n        fields:\n          - field_1\n          - field_2\n      - name: model_3\n```\nBy default all apps will be used as service, or to generate default service meta yaml for all apps using:\n\n    ./manage.py generatemetayaml --file path.to.save.file\n\nUpdate the path of ``service_meta.yaml`` in MESSAGE_BUS settings.\n\nGenerate default proto files (defined in ``service_meta.yaml``) to ``PRODUCER_ROOT`` path, using:\n\n    ./manage.py generateproto\n\nOnce the proto files are updated, generate the gRPC python out files to ``PRODUCER_ROOT`` path, using:\n\n    ./manage.py generategrpc\n\nDefine the components ``serializers.py``, ``services.py`` and ``handlers.py``\n\n* ``serializers.py`` are the similar to django rest serializers, example:\n\n```python\nfrom django_grpc_bus import serializers as proto_serializers\n\nfrom path.to.generated_grpc.grpc import ModelName_pb2\nfrom app_name import models\n\n\nclass ModelNameSerializer(proto_serializers.ModelProtoSerializer):\n\n    class Meta:\n        model = models.ModelName\n        proto_class = ModelName_pb2.ModelNameData\n```\n\n* ``services.py`` contains the gRPC producer services, inherited from class ModelService containing predefined mixins\n ``create``, ``retrieve``, ``update``, ``destroy`` and ``list``, example to define services.py:\n\n```python\nfrom django_grpc_bus.generics import ModelService\n\nfrom app_name import models, serializers\n\n\nclass ModelNameService(ModelService):\n    queryset = models.ModelName.objects.all()\n    serializer_class = serializers.ModelNameSerializer\n```\n\n* ``handlers.py`` are the routers for services, that register the services, example:\n\n```python\nfrom django_grpc_bus.handlers import BasicHandler\n\n\nhandler = BasicHandler()\n\nhandler.register('app_name.services.ModelNameService')\n\n```\n\nTo start with above components simply run the following command:\n\n    ./manage.py generateservices -hd\n\nPredefined templates will be generated in the app directories and ``handlers.py`` will be get appended with service \nregistry.\n\nStart the server using:\n\n    ./manage.py rungrpcserver --dev\n\nServer will get started at 50051 port.\n\nTo consume the services, for now we are using gRPC reflection that lists all the registered services and its methods. \nUse the client as:\n\n```python\nfrom django_grpc_bus.client.registry import registry\n\nlist_data = registry.servlet_name.service_name.list()  # Generator object will be returned as its stream response\nget_data = registry.servlet_name.service_name.retrieve({'id': 1})\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/rameezarshad/django-grpc-framework/archive/main.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rameezarshad/django-grpc-framework",
    "keywords": "grpc framework django rest micro service message bus",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-grpc-bus",
    "package_url": "https://pypi.org/project/django-grpc-bus/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-grpc-bus/",
    "project_urls": {
      "Download": "https://github.com/rameezarshad/django-grpc-framework/archive/main.zip",
      "Homepage": "https://github.com/rameezarshad/django-grpc-framework"
    },
    "release_url": "https://pypi.org/project/django-grpc-bus/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Django rest gRPC framework",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8942100,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdd679b0ce4e39b8ae9bdc61ae4b25f3c4aa5b925056a4df785b37a085db0632",
          "md5": "093a649ede1dc11a459953d723652397",
          "sha256": "2aaa933967dc4ff06746b8f5aa2ed720ef8cab6282741ad266e8aa2ca1af821c"
        },
        "downloads": -1,
        "filename": "django-grpc-bus-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "093a649ede1dc11a459953d723652397",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24642,
        "upload_time": "2020-12-19T18:46:17",
        "upload_time_iso_8601": "2020-12-19T18:46:17.421372Z",
        "url": "https://files.pythonhosted.org/packages/cd/d6/79b0ce4e39b8ae9bdc61ae4b25f3c4aa5b925056a4df785b37a085db0632/django-grpc-bus-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdd679b0ce4e39b8ae9bdc61ae4b25f3c4aa5b925056a4df785b37a085db0632",
        "md5": "093a649ede1dc11a459953d723652397",
        "sha256": "2aaa933967dc4ff06746b8f5aa2ed720ef8cab6282741ad266e8aa2ca1af821c"
      },
      "downloads": -1,
      "filename": "django-grpc-bus-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "093a649ede1dc11a459953d723652397",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 24642,
      "upload_time": "2020-12-19T18:46:17",
      "upload_time_iso_8601": "2020-12-19T18:46:17.421372Z",
      "url": "https://files.pythonhosted.org/packages/cd/d6/79b0ce4e39b8ae9bdc61ae4b25f3c4aa5b925056a4df785b37a085db0632/django-grpc-bus-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}