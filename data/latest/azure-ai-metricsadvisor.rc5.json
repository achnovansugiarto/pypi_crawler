{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "azpysdkhelp@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Azure Metrics Advisor client library for Python\nMetrics Advisor is a scalable real-time time series monitoring, alerting, and root cause analysis platform. Use Metrics Advisor to:\n\n- Analyze multi-dimensional data from multiple data sources\n- Identify and correlate anomalies\n- Configure and fine-tune the anomaly detection model used on your data\n- Diagnose anomalies and help with root cause analysis\n\n[Source code][src_code] | [Package (Pypi)][package] | [API reference documentation][reference_documentation] | [Product documentation][ma_docs] | [Samples][samples_readme]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Metrics Advisor client library for Python with pip:\n\n```commandline\npip install azure-ai-metricsadvisor --pre\n```\n\n### Prerequisites\n\n* Python 2.7, or 3.6 or later is required to use this package.\n* You need an [Azure subscription][azure_sub], and a [Metrics Advisor serivce][ma_service] to use this package.\n\n### Authenticate the client\n\nYou will need two keys to authenticate the client:\n\n1) The subscription key to your Metrics Advisor resource. You can find this in the Keys and Endpoint section of your resource in the Azure portal.\n2) The API key for your Metrics Advisor instance. You can find this in the web portal for Metrics Advisor, in API keys on the left navigation menu.\n\nWe can use the keys to create a new `MetricsAdvisorClient` or `MetricsAdvisorAdministrationClient`.\n\n```py\nimport os\nfrom azure.ai.metricsadvisor import (\n    MetricsAdvisorKeyCredential,\n    MetricsAdvisorClient,\n    MetricsAdvisorAdministrationClient,\n)\n\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n                            MetricsAdvisorKeyCredential(subscription_key, api_key))\n\nadmin_client = MetricsAdvisorAdministrationClient(service_endpoint,\n                            MetricsAdvisorKeyCredential(subscription_key, api_key))\n```\n\n## Key concepts\n\n### MetricsAdvisorClient\n\n`MetricsAdvisorClient` helps with:\n\n- listing incidents\n- listing root causes of incidents\n- retrieving original time series data and time series data enriched by the service.\n- listing alerts\n- adding feedback to tune your model\n\n### MetricsAdvisorAdministrationClient\n\n`MetricsAdvisorAdministrationClient` allows you to\n\n- manage data feeds\n- manage anomaly detection configurations\n- manage anomaly alerting configurations\n- manage hooks\n\n### DataFeed\n\nA `DataFeed` is what Metrics Advisor ingests from your data source, such as Cosmos DB or a SQL server. A data feed contains rows of:\n\n- timestamps\n- zero or more dimensions\n- one or more measures\n\n### Metric\n\nA `DataFeedMetric` is a quantifiable measure that is used to monitor and assess the status of a specific business process. It can be a combination of multiple time series values divided into dimensions. For example a web health metric might contain dimensions for user count and the en-us market.\n\n### AnomalyDetectionConfiguration\n\n`AnomalyDetectionConfiguration` is required for every time series, and determines whether a point in the time series is an anomaly.\n\n### Anomaly & Incident\n\nAfter a detection configuration is applied to metrics, `AnomalyIncident`s are generated whenever any series within it has an `DataPointAnomaly`.\n\n### Alert\n\nYou can configure which anomalies should trigger an `AnomalyAlert`. You can set multiple alerts with different settings. For example, you could create an alert for anomalies with lower business impact, and another for more important alerts.\n\n### Notification Hook\n\nMetrics Advisor lets you create and subscribe to real-time alerts. These alerts are sent over the internet, using a notification hook like `EmailNotificationHook` or `WebNotificationHook`.\n\n## Examples\n\n- [Add a data feed from a sample or data source](#add-a-data-feed-from-a-sample-or-data-source \"Add a data feed from a sample or data source\")\n- [Check ingestion status](#check-ingestion-status \"Check ingestion status\")\n- [Configure anomaly detection configuration](#configure-anomaly-detection-configuration \"Configure anomaly detection configuration\")\n- [Configure alert configuration](#configure-alert-configuration \"Configure alert configuration\")\n- [Query anomaly detection results](#query-anomaly-detection-results \"Query anomaly detection results\")\n- [Query incidents](#query-incidents \"Query incidents\")\n- [Query root causes](#query-root-causes \"Query root causes\")\n- [Add hooks for receiving anomaly alerts](#add-hooks-for-receiving-anomaly-alerts \"Add hooks for receiving anomaly alerts\")\n\n### Add a data feed from a sample or data source\n\nMetrics Advisor supports connecting different types of data sources. Here is a sample to ingest data from SQL Server.\n\n```py\nimport os\nimport datetime\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\nfrom azure.ai.metricsadvisor.models import (\n        SqlServerDataFeedSource,\n        DataFeedSchema,\n        DataFeedMetric,\n        DataFeedDimension,\n        DataFeedRollupSettings,\n        DataFeedMissingDataPointFillSettings\n    )\n\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\nsql_server_connection_string = os.getenv(\"SQL_SERVER_CONNECTION_STRING\")\nquery = os.getenv(\"SQL_SERVER_QUERY\")\n\nclient = MetricsAdvisorAdministrationClient(\n    service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n\ndata_feed = client.create_data_feed(\n    name=\"My data feed\",\n    source=SqlServerDataFeedSource(\n        connection_string=sql_server_connection_string,\n        query=query,\n    ),\n    granularity=\"Daily\",\n    schema=DataFeedSchema(\n        metrics=[\n            DataFeedMetric(name=\"cost\", display_name=\"Cost\"),\n            DataFeedMetric(name=\"revenue\", display_name=\"Revenue\")\n        ],\n        dimensions=[\n            DataFeedDimension(name=\"category\", display_name=\"Category\"),\n            DataFeedDimension(name=\"city\", display_name=\"City\")\n        ],\n        timestamp_column=\"Timestamp\"\n    ),\n    ingestion_settings=datetime.datetime(2019, 10, 1),\n    data_feed_description=\"cost/revenue data feed\",\n    rollup_settings=DataFeedRollupSettings(\n        rollup_type=\"AutoRollup\",\n        rollup_method=\"Sum\",\n        rollup_identification_value=\"__CUSTOM_SUM__\"\n    ),\n    missing_data_point_fill_settings=DataFeedMissingDataPointFillSettings(\n        fill_type=\"SmartFilling\"\n    ),\n    access_mode=\"Private\"\n)\n\nreturn data_feed\n```\n\n### Check ingestion status\n\nAfter we start the data ingestion, we can check the ingestion status.\n\n```py\nimport datetime\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\ndata_feed_id = os.getenv(\"DATA_FEED_ID\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n\ningestion_status = client.list_data_feed_ingestion_status(\n    data_feed_id,\n    datetime.datetime(2020, 9, 20),\n    datetime.datetime(2020, 9, 25)\n)\nfor status in ingestion_status:\n    print(\"Timestamp: {}\".format(status.timestamp))\n    print(\"Status: {}\".format(status.status))\n    print(\"Message: {}\\n\".format(status.message))\n```\n\n### Configure anomaly detection configuration\n\nWhile a default detection configuration is automatically applied to each metric, we can tune the detection modes used on our data by creating a customized anomaly detection configuration.\n\n```py\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\nfrom azure.ai.metricsadvisor.models import (\n    ChangeThresholdCondition,\n    HardThresholdCondition,\n    SmartDetectionCondition,\n    SuppressCondition,\n    MetricDetectionCondition,\n)\n\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\nmetric_id = os.getenv(\"METRIC_ID\")\n\nclient = MetricsAdvisorAdministrationClient(\n    service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n\nchange_threshold_condition = ChangeThresholdCondition(\n    anomaly_detector_direction=\"Both\",\n    change_percentage=20,\n    shift_point=10,\n    within_range=True,\n    suppress_condition=SuppressCondition(\n        min_number=5,\n        min_ratio=2\n    )\n)\nhard_threshold_condition = HardThresholdCondition(\n    anomaly_detector_direction=\"Up\",\n    upper_bound=100,\n    suppress_condition=SuppressCondition(\n        min_number=2,\n        min_ratio=2\n    )\n)\nsmart_detection_condition = SmartDetectionCondition(\n    anomaly_detector_direction=\"Up\",\n    sensitivity=10,\n    suppress_condition=SuppressCondition(\n        min_number=2,\n        min_ratio=2\n    )\n)\n\ndetection_config = client.create_detection_configuration(\n    name=\"my_detection_config\",\n    metric_id=metric_id,\n    description=\"anomaly detection config for metric\",\n    whole_series_detection_condition=MetricDetectionCondition(\n        condition_operator=\"OR\",\n        change_threshold_condition=change_threshold_condition,\n        hard_threshold_condition=hard_threshold_condition,\n        smart_detection_condition=smart_detection_condition\n    )\n)\nreturn detection_config\n```\n\n### Configure alert configuration\n\nThen let's configure in which conditions an alert needs to be triggered.\n\n```py\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\nfrom azure.ai.metricsadvisor.models import (\n    MetricAlertConfiguration,\n    MetricAnomalyAlertScope,\n    TopNGroupScope,\n    MetricAnomalyAlertConditions,\n    SeverityCondition,\n    MetricBoundaryCondition,\n    MetricAnomalyAlertSnoozeCondition,\n)\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\nanomaly_detection_configuration_id = os.getenv(\"DETECTION_CONFIGURATION_ID\")\nhook_id = os.getenv(\"HOOK_ID\")\n\nclient = MetricsAdvisorAdministrationClient(\n    service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n\nalert_config = client.create_alert_configuration(\n    name=\"my alert config\",\n    description=\"alert config description\",\n    cross_metrics_operator=\"AND\",\n    metric_alert_configurations=[\n        MetricAlertConfiguration(\n            detection_configuration_id=anomaly_detection_configuration_id,\n            alert_scope=MetricAnomalyAlertScope(\n                scope_type=\"WholeSeries\"\n            ),\n            alert_conditions=MetricAnomalyAlertConditions(\n                severity_condition=SeverityCondition(\n                    min_alert_severity=\"Low\",\n                    max_alert_severity=\"High\"\n                )\n            )\n        ),\n        MetricAlertConfiguration(\n            detection_configuration_id=anomaly_detection_configuration_id,\n            alert_scope=MetricAnomalyAlertScope(\n                scope_type=\"TopN\",\n                top_n_group_in_scope=TopNGroupScope(\n                    top=10,\n                    period=5,\n                    min_top_count=5\n                )\n            ),\n            alert_conditions=MetricAnomalyAlertConditions(\n                metric_boundary_condition=MetricBoundaryCondition(\n                    direction=\"Up\",\n                    upper=50\n                )\n            ),\n            alert_snooze_condition=MetricAnomalyAlertSnoozeCondition(\n                auto_snooze=2,\n                snooze_scope=\"Metric\",\n                only_for_successive=True\n            )\n        ),\n    ],\n    hook_ids=[hook_id]\n)\n\nreturn alert_config\n```\n\n### Query anomaly detection results\n\nWe can query the alerts and anomalies.\n\n```py\nimport datetime\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\nalert_config_id = os.getenv(\"ALERT_CONFIG_ID\")\nalert_id = os.getenv(\"ALERT_ID\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n\nresults = client.list_alerts(\n    alert_configuration_id=alert_config_id,\n    start_time=datetime.datetime(2020, 1, 1),\n    end_time=datetime.datetime(2020, 9, 9),\n    time_mode=\"AnomalyTime\",\n)\nfor result in results:\n    print(\"Alert id: {}\".format(result.id))\n    print(\"Create time: {}\".format(result.created_time))\n\nresults = client.list_anomalies(\n    alert_configuration_id=alert_config_id,\n    alert_id=alert_id,\n)\nfor result in results:\n    print(\"Create time: {}\".format(result.created_time))\n    print(\"Severity: {}\".format(result.severity))\n    print(\"Status: {}\".format(result.status))\n```\n\n### Query incidents\n\nWe can query the incidents for a detection configuration.\n\n```py\nimport datetime\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\nanomaly_detection_configuration_id = os.getenv(\"DETECTION_CONFIGURATION_ID\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n\nresults = client.list_incidents(\n            detection_configuration_id=anomaly_detection_configuration_id,\n            start_time=datetime.datetime(2020, 1, 1),\n            end_time=datetime.datetime(2020, 9, 9),\n        )\nfor result in results:\n    print(\"Metric id: {}\".format(result.metric_id))\n    print(\"Incident ID: {}\".format(result.id))\n    print(\"Severity: {}\".format(result.severity))\n    print(\"Status: {}\".format(result.status))\n```\n\n### Query root causes\n\nWe can also query the root causes of an incident\n\n```py\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\nanomaly_detection_configuration_id = os.getenv(\"DETECTION_CONFIGURATION_ID\")\nincident_id = os.getenv(\"INCIDENT_ID\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n\nresults = client.list_incident_root_causes(\n            detection_configuration_id=anomaly_detection_configuration_id,\n            incident_id=incident_id,\n        )\nfor result in results:\n    print(\"Score: {}\".format(result.score))\n    print(\"Description: {}\".format(result.description))\n\n```\n\n\n### Add hooks for receiving anomaly alerts\n\nWe can add some hooks so when an alert is triggered, we can get call back.\n\n```py\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\nfrom azure.ai.metricsadvisor.models import EmailNotificationHook\n\nservice_endpoint = os.getenv(\"ENDPOINT\")\nsubscription_key = os.getenv(\"SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"API_KEY\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key))\n\nhook = client.create_hook(\n    hook=EmailNotificationHook(\n        name=\"email hook\",\n        description=\"my email hook\",\n        emails_to_alert=[\"alertme@alertme.com\"],\n        external_link=\"https://docs.microsoft.com/en-us/azure/cognitive-services/metrics-advisor/how-tos/alerts\"\n    )\n)\n```\n\n### Async APIs\n\nThis library includes a complete async API supported on Python 3.6+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation][azure_core_docs]\nfor more information.\n\n\n```py\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\nfrom azure.ai.metricsadvisor.aio import MetricsAdvisorClient, MetricsAdvisorAdministrationClient\n\nclient = MetricsAdvisorClient(\n    service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n\nadmin_client = MetricsAdvisorAdministrationClient(\n    service_endpoint,\n    MetricsAdvisorKeyCredential(subscription_key, api_key)\n)\n```\n\n## Troubleshooting\n\n### General\n\nThe Azure Metrics Advisor clients will raise exceptions defined in [Azure Core][azure_core].\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n## Next steps\n\n### More sample code\n\n For more details see the [samples README][samples_readme].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[src_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/metricsadvisor/azure-ai-metricsadvisor\n[reference_documentation]: https://aka.ms/azsdk/python/metricsadvisor/docs\n[ma_docs]: https://docs.microsoft.com/azure/cognitive-services/metrics-advisor/overview\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[package]: https://aka.ms/azsdk/python/metricsadvisor/pypi\n[ma_service]: https://go.microsoft.com/fwlink/?linkid=2142156\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n[azure_core]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_core_docs]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#transport\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging\n[samples_readme]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/README.md\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n\n# Release History\n\n## 1.0.0 (2021-07-06)\n\n### Breaking Changes\n\n- Changed\n  - `DetectionConditionsOperator` -> `DetectionConditionOperator`\n  - `cross_conditions_operator` -> `condition_operator`\n  - `AnomalyAlert.created_on` -> `AnomalyAlert.created_time`\n  - `AnomalyAlert.modified_on` -> `AnomalyAlert.modified_time`\n  - `Anomaly.created_on` -> `Anomaly.created_time`\n  - `admin_emails` has been renamed to `admins` in `NotificationHook`\n  - `admin_emails` has been renamed to `admins` in `DataFeedOptions`\n  - `viewer_emails` has been renamed to `viewers` in `DataFeedOptions`\n\n## 1.0.0b4 (2021-06-07)\n\n**New Features**\n\n- Added `AzureLogAnalyticsDataFeedSource` and `AzureEventHubsDataFeedSource`\n- Update method now returns the updated object\n- Added DatasourceCredentials and DatasourceCredential operations\n- Added authentication type support for data feed\n\n**Breaking Changes**\n\n- Delete methods now take positional only argument as id\n- `update_subscription_key` and `update_api_key` are merged into one method `update_key`\n- Removed `DataFeedOptions` and moved all its properties to the `DataFeed` model\n\n- Deprecated:\n  - `HttpRequestDataFeed`\n  - `ElasticsearchDataFeed`\n\n- Renamed\n  - `AzureApplicationInsightsDataFeed` -> `AzureApplicationInsightsDataFeedSource`\n  - `AzureBlobDataFeed` -> `AzureBlobDataFeedSource`\n  - `AzureCosmosDBDataFeed` -> `AzureCosmosDbDataFeedSource`\n  - `AzureDataExplorerDataFeed` -> `AzureDataExplorerDataFeedSource`\n  - `AzureTableDataFeed` -> `AzureTableDataFeedSource`\n  - `InfluxDBDataFeed` -> `InfluxDbDataFeedSource`\n  - `MySqlDataFeed` -> `MySqlDataFeedSource`\n  - `PostgreSqlDataFeed` -> `PostgreSqlDataFeedSource`\n  - `SQLServerDataFeed` -> `SqlServerDataFeedSource`\n  - `MongoDBDataFeed` -> `MongoDbDataFeedSource`\n  - `AzureDataLakeStorageGen2DataFeed` -> `AzureDataLakeStorageGen2DataFeedSource`\n\n**Dependency Updates**\n\n- Bump `msrest` requirement from `0.6.12` to `0.6.21`\n\n## 1.0.0b3 (2021-02-09)\n\n**New Features**\n\n- AAD support authentication    #15922\n- `MetricsAdvisorKeyCredential` support for rotating the subscription and api keys to update long-lived clients\n\n**Breaking Changes**\n\n- `list_dimension_values` has been renamed to `list_anomaly_dimension_values`\n- update methods now return None\n- Updated DataFeed.metric_ids to be a dict rather than a list\n\n**Hotfixes**\n\n- Bump `six` requirement from `1.6` to 1.11.0`\n\n## 1.0.0b2 (2020-11-10)\n\n**Breaking Changes**\n\n- `create_hook` now takes as input an `EmailHook` or `WebHook`\n- `Anomaly` has been renamed to `DataPointAnomaly`\n- `Incident` has been renamed to `AnomalyIncident`\n- `IncidentPropertyIncidentStatus` has been renamed to `AnomalyIncidentStatus`\n- `Alert` has been renamed to `AnomalyAlert`\n- `Severity` has been renamed to `AnomalySeverity`\n- `Metric` has been renamed to `DataFeedMetric`\n- `Dimension` has been renamed to `DataFeedDimension`\n- `EmailHook` has been renamed to `EmailNotificationHook`\n- `WebHook` has been renamed to `WebNotificationHook`\n- `Hook` has been renamed to `NotificationHook`\n- `TimeMode` has been renamed to `AlertQueryTimeMode`\n- `admins` has been renamed to `admin_emails` on `NotificationHook`\n- `admins` has been renamed to `admin_emails` on `DataFeedOptions`\n- `viewers` has been renamed to `viewer_emails` on `DataFeedOptions`\n- `timestamp_list` has been renamed to `timestamps` on `MetricSeriesData`\n- `value_list` has been renamed to `values` on `MetricSeriesData`\n- `SeriesResult` has been renamed to `MetricEnrichedSeriesData`\n- `create_anomaly_alert_configuration` has been renamed to `create_alert_configuration`\n- `get_anomaly_alert_configuration` has been renamed to `get_alert_configuration`\n- `delete_anomaly_alert_configuration` has been renamed to `delete_alert_configuration`\n- `update_anomaly_alert_configuration` has been renamed to `update_alert_configuration`\n- `list_anomaly_alert_configurations` has been renamed to `list_alert_configurations`\n- `create_metric_anomaly_detection_configuration` has been renamed to `create_detection_configuration`\n- `get_metric_anomaly_detection_configuration` has been renamed to `get_detection_configuration`\n- `delete_metric_anomaly_detection_configuration` has been renamed to `delete_detection_configuration`\n- `update_metric_anomaly_detection_configuration` has been renamed to `update_detection_configuration`\n- `list_metric_anomaly_detection_configurations` has been renamed to `list_detection_configurations`\n- `list_feedbacks` has been renamed to `list_feedback`\n- `list_alerts_for_alert_configuration` has been renamed to `list_alerts`\n- `list_anomalies_for_alert` & `list_anomalies_for_detection_configuration` have been grouped into `list_anomalies`\n- `list_dimension_values_for_detection_configuration` has been renamed to `list_dimension_values`\n- `list_incidents_for_alert` & `list_incidents_for_detection_configuration` have been grouped into `list_incidents`\n\n**New Features**\n\n- `__repr__` added to all models\n\n## 1.0.0b1 (2020-10-07)\n\nFirst preview release\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-ai-metricsadvisor",
    "package_url": "https://pypi.org/project/azure-ai-metricsadvisor/",
    "platform": "",
    "project_url": "https://pypi.org/project/azure-ai-metricsadvisor/",
    "project_urls": {
      "Homepage": "https://github.com/Azure/azure-sdk-for-python"
    },
    "release_url": "https://pypi.org/project/azure-ai-metricsadvisor/1.0.0/",
    "requires_dist": [
      "azure-core (<2.0.0,>=1.6.0)",
      "msrest (>=0.6.21)",
      "six (>=1.11.0)",
      "azure-ai-nspkg ; python_version<'3.0'",
      "typing ; python_version<'3.5'"
    ],
    "requires_python": "",
    "summary": "Microsoft Azure Metrics Advisor Client Library for Python",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10836591,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96ae1e70a4ed37a02d6bdf2e252dc4052448cc94b4287b8e2ccc3a53f72d57cc",
          "md5": "eaf9fae506bcbc00fcaa28964d8a39c4",
          "sha256": "b87e07ef1c04d3d4c25dd90886a05512f44b858a758cfb6830a6250bb901e62a"
        },
        "downloads": -1,
        "filename": "azure_ai_metricsadvisor-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eaf9fae506bcbc00fcaa28964d8a39c4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 148523,
        "upload_time": "2021-07-06T16:07:24",
        "upload_time_iso_8601": "2021-07-06T16:07:24.315025Z",
        "url": "https://files.pythonhosted.org/packages/96/ae/1e70a4ed37a02d6bdf2e252dc4052448cc94b4287b8e2ccc3a53f72d57cc/azure_ai_metricsadvisor-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f00316532aaeede7abc3a36f6693c1b8b9462dab82d470cffef8d90746615fd7",
          "md5": "a7b28fde3c8f898854a05077d819f4c5",
          "sha256": "c07d13c9c3c1a2913a022eb74018133603fad515c848783a676e8405baefb94e"
        },
        "downloads": -1,
        "filename": "azure-ai-metricsadvisor-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "a7b28fde3c8f898854a05077d819f4c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 277379,
        "upload_time": "2021-07-06T16:07:26",
        "upload_time_iso_8601": "2021-07-06T16:07:26.735056Z",
        "url": "https://files.pythonhosted.org/packages/f0/03/16532aaeede7abc3a36f6693c1b8b9462dab82d470cffef8d90746615fd7/azure-ai-metricsadvisor-1.0.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7acc4b1abf04d322760eaff2bff5c64318803bb3f140e5c3ce35c8f25948d403",
          "md5": "ca5da19b36779a1815352b156e8ccdac",
          "sha256": "fea5318e73869476576e7d6fc83249e7d2c08152bd79bfb0dd7aeb8064339193"
        },
        "downloads": -1,
        "filename": "azure_ai_metricsadvisor-1.0.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca5da19b36779a1815352b156e8ccdac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 121148,
        "upload_time": "2020-10-07T20:12:03",
        "upload_time_iso_8601": "2020-10-07T20:12:03.986784Z",
        "url": "https://files.pythonhosted.org/packages/7a/cc/4b1abf04d322760eaff2bff5c64318803bb3f140e5c3ce35c8f25948d403/azure_ai_metricsadvisor-1.0.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77c0e4e0408302e55be7fa7ef2eaf9a8efd3e6329b59b8fa30e6197103ca0f4e",
          "md5": "46b96c66bf80863315ca7c94c41c1076",
          "sha256": "cf90736e6a9bc72f65210684e6a973edb3634dbcd768a70af413137c4ecd3dad"
        },
        "downloads": -1,
        "filename": "azure-ai-metricsadvisor-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "46b96c66bf80863315ca7c94c41c1076",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 199090,
        "upload_time": "2020-10-07T20:12:07",
        "upload_time_iso_8601": "2020-10-07T20:12:07.598293Z",
        "url": "https://files.pythonhosted.org/packages/77/c0/e4e0408302e55be7fa7ef2eaf9a8efd3e6329b59b8fa30e6197103ca0f4e/azure-ai-metricsadvisor-1.0.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c79a691c133bfc51c50c14b3ba154c2673d5d2b8d865a20585418bd26896887e",
          "md5": "d825b99aff50771e3d7bdfa851ae19fe",
          "sha256": "d6b0ee941967a46f9a2cee27f9b25e7e195c2b41f3ae3a0adb336ccf14a6bf05"
        },
        "downloads": -1,
        "filename": "azure_ai_metricsadvisor-1.0.0b2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d825b99aff50771e3d7bdfa851ae19fe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 125740,
        "upload_time": "2020-11-10T22:12:21",
        "upload_time_iso_8601": "2020-11-10T22:12:21.516077Z",
        "url": "https://files.pythonhosted.org/packages/c7/9a/691c133bfc51c50c14b3ba154c2673d5d2b8d865a20585418bd26896887e/azure_ai_metricsadvisor-1.0.0b2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd2b6b773163ffbb911a3c5557c809d5bb121671eafdac7337778f363980abae",
          "md5": "9bff2d3a6f44ec87dc856ed34989c05b",
          "sha256": "8cf955abfead028aefc70cbc0ced36c31ec0edc08d6538617cf50e961a87ae4e"
        },
        "downloads": -1,
        "filename": "azure-ai-metricsadvisor-1.0.0b2.zip",
        "has_sig": false,
        "md5_digest": "9bff2d3a6f44ec87dc856ed34989c05b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 210563,
        "upload_time": "2020-11-10T22:12:23",
        "upload_time_iso_8601": "2020-11-10T22:12:23.554978Z",
        "url": "https://files.pythonhosted.org/packages/cd/2b/6b773163ffbb911a3c5557c809d5bb121671eafdac7337778f363980abae/azure-ai-metricsadvisor-1.0.0b2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df9a7b208e29cbaa5863134911bfccb8b924b2aecbf500f9f171d8d22f2ae9d1",
          "md5": "741078e655f4d30446f4b9b2b8d37d41",
          "sha256": "b7cdb8bb4186d8956066f35e9c263bf631172e4a929568b1f4a2941ba2354605"
        },
        "downloads": -1,
        "filename": "azure_ai_metricsadvisor-1.0.0b3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "741078e655f4d30446f4b9b2b8d37d41",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 127113,
        "upload_time": "2021-02-09T18:58:46",
        "upload_time_iso_8601": "2021-02-09T18:58:46.617042Z",
        "url": "https://files.pythonhosted.org/packages/df/9a/7b208e29cbaa5863134911bfccb8b924b2aecbf500f9f171d8d22f2ae9d1/azure_ai_metricsadvisor-1.0.0b3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6af24bd899bdbca724afbdaa0d3840387c92f68f5849e9575daa12a21e99d4d8",
          "md5": "9fe6ff9c32dff72147b2b6a06b5b0c29",
          "sha256": "773865ec2fcbfbdb0537517608bc7e9cf907fb4632f0efce16f9fa812a244aae"
        },
        "downloads": -1,
        "filename": "azure-ai-metricsadvisor-1.0.0b3.zip",
        "has_sig": false,
        "md5_digest": "9fe6ff9c32dff72147b2b6a06b5b0c29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 249308,
        "upload_time": "2021-02-09T18:58:49",
        "upload_time_iso_8601": "2021-02-09T18:58:49.152753Z",
        "url": "https://files.pythonhosted.org/packages/6a/f2/4bd899bdbca724afbdaa0d3840387c92f68f5849e9575daa12a21e99d4d8/azure-ai-metricsadvisor-1.0.0b3.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "872082397d63e53c4d2379f3ec5908a425f13fde158427340e0d13cd4a3b62ef",
          "md5": "0f8498f7d7a09c88f743e1d38db76059",
          "sha256": "aa7ed25c853a434b178e9a92d46f3061e1cc936b9af2f1d4e2c7265450de5ae0"
        },
        "downloads": -1,
        "filename": "azure_ai_metricsadvisor-1.0.0b4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f8498f7d7a09c88f743e1d38db76059",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 148691,
        "upload_time": "2021-06-07T17:44:36",
        "upload_time_iso_8601": "2021-06-07T17:44:36.847305Z",
        "url": "https://files.pythonhosted.org/packages/87/20/82397d63e53c4d2379f3ec5908a425f13fde158427340e0d13cd4a3b62ef/azure_ai_metricsadvisor-1.0.0b4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca6d349a2499f05843432d77affbd752e65abd1528301e1aaf11bc8431b210cf",
          "md5": "6a8a78c286a27daeceae1ada342e790e",
          "sha256": "8cf0a9ce90ab9cb358a42730175e2e21fe23fc1ed5dbb1c81930f421f7ae7a40"
        },
        "downloads": -1,
        "filename": "azure-ai-metricsadvisor-1.0.0b4.zip",
        "has_sig": false,
        "md5_digest": "6a8a78c286a27daeceae1ada342e790e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 277608,
        "upload_time": "2021-06-07T17:44:39",
        "upload_time_iso_8601": "2021-06-07T17:44:39.465463Z",
        "url": "https://files.pythonhosted.org/packages/ca/6d/349a2499f05843432d77affbd752e65abd1528301e1aaf11bc8431b210cf/azure-ai-metricsadvisor-1.0.0b4.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96ae1e70a4ed37a02d6bdf2e252dc4052448cc94b4287b8e2ccc3a53f72d57cc",
        "md5": "eaf9fae506bcbc00fcaa28964d8a39c4",
        "sha256": "b87e07ef1c04d3d4c25dd90886a05512f44b858a758cfb6830a6250bb901e62a"
      },
      "downloads": -1,
      "filename": "azure_ai_metricsadvisor-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eaf9fae506bcbc00fcaa28964d8a39c4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 148523,
      "upload_time": "2021-07-06T16:07:24",
      "upload_time_iso_8601": "2021-07-06T16:07:24.315025Z",
      "url": "https://files.pythonhosted.org/packages/96/ae/1e70a4ed37a02d6bdf2e252dc4052448cc94b4287b8e2ccc3a53f72d57cc/azure_ai_metricsadvisor-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f00316532aaeede7abc3a36f6693c1b8b9462dab82d470cffef8d90746615fd7",
        "md5": "a7b28fde3c8f898854a05077d819f4c5",
        "sha256": "c07d13c9c3c1a2913a022eb74018133603fad515c848783a676e8405baefb94e"
      },
      "downloads": -1,
      "filename": "azure-ai-metricsadvisor-1.0.0.zip",
      "has_sig": false,
      "md5_digest": "a7b28fde3c8f898854a05077d819f4c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 277379,
      "upload_time": "2021-07-06T16:07:26",
      "upload_time_iso_8601": "2021-07-06T16:07:26.735056Z",
      "url": "https://files.pythonhosted.org/packages/f0/03/16532aaeede7abc3a36f6693c1b8b9462dab82d470cffef8d90746615fd7/azure-ai-metricsadvisor-1.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}