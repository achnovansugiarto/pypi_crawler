{
  "info": {
    "author": "Vanessa Sochat",
    "author_email": "vsochat@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "# Singularity Container Tools\n\n[![PyPI version](https://badge.fury.io/py/stools.svg)](https://badge.fury.io/py/stools)\n\nThese are tools for Singularity containers, optimized for using with continuous integration for security\nand quality checks. For an example of the package being used in a continuous integration context, see the [stools-clair](https://github.com/singularityhub/stools-clair) repository.\n\n[![asciicast](https://asciinema.org/a/178712.png)](https://asciinema.org/a/178712)\n\nIn this work we will use [Clair OS](https://github.com/coreos/clair) combined with Continuous Integration\n(travis and circle) to scan [Singularity](https://singularityware.github.io) containers for security\nvulnerabilities. \n\n## Tags\n\nNote that after the first two releases, version numbers correspond with releases on pypi,\nand not Singularity versions.\n\n - [v0.0.13 (master)](https://github.com/singularityhub/stools) adds support for reports saving\n - [v3.2.1](https://github.com/singularityhub/stools/tree/v3.2.1) Uses Singularity v3.2.1 and above\n - [v2.4.5](https://github.com/singularityhub/stools/tree/v2.4.5) Uses Singularity v2.4.5\n\n## Background\nClair is intended to run as a server to continuous scan Docker *layers* for vulnerabilities. This doesn't map\nwell to the research domain because of the following:\n\n - Docker containers come in layers (.tar.gz files) while Singularity images are single binary files that don't \"plug in\" nicely to Clair.\n - Most researchers can't support continuous running of such a service.\n\nOn the other hand, a typical researcher *does* use services like [TravisCI](https://travis-ci.org) and [CircleCI](https://circle-ci.org) to\nrun their code bases against tests. Since these services now offer running containers and other service-type things, we in fact could do the following:\n\n - Spin up a Clair server during testing\n - Build a Singularity image, and scan the filesystem contents (before finalized in the image).\n\nWhile this isn't a continually running service, we can minimally ensure that a container is scanned each time\nit is built (and then likely merged to be used in production). If the user takes advantage of [Singularity Hub](https://www.singularity-hub.org) or [Singularity Registry Server](https://singularityhub.github.io/sregistry) the image will be pushed or built for production after passing \nthese various tests.\n\nThis experiment is based on early discussion in [this thread](https://github.com/singularityhub/sregistry/issues/14).\n\n\n## Basic Usage\n\nYou'll need to first clone the repository:\n\n```bash\ngit clone https://github.com/singularityhub/stools\ncd stools\n```\n\n### Build Containers\n\nIf you want, build the container (or use a tagged release from [Docker Hub](https://hub.docker.com/repository/registry-1.docker.io/vanessa/stools-clair/tags?page=1)).\n\n```bash\n$ docker build -t vanessa/stools-clair .\n```\n\nStart the application with [docker compose](https://docs.docker.com/compose/install/). \nNote that you should have the images you want to scan in the $PWD, which will be mapped to the container in `/code` \n(see the [docker-compose.yml](docker-compose.yml) file). You can change this around, just be sure that the containers you want to add are here.\n\n```bash\n$ docker-compose up -d\n```\n\nMake sure that your containers are up and running! There is one for the clair server\nthat we will interact with, and one for the database.\n\n```bash\n$ docker-compose ps\n    Name                   Command               State                            Ports                          \n-----------------------------------------------------------------------------------------------------------------\nclair-db        docker-entrypoint.sh postgres    Up      0.0.0.0:5432->5432/tcp                                  \nclair-scanner   /clair -config=/config/con ...   Up      0.0.0.0:6060->6060/tcp, 6061/tcp, 0.0.0.0:8080->8080/tcp\n```\n\nAlso note that the folder [reports](reports) by way of being in the mounted present working\ndirectory, will appear at `/code/reports` in the container. We will need to know this later.\n\n### Scan an Image\n\nLet's scan a local image in $PWD mapped to /code in the container. First\npull one from your registry of choice:\n\n```bash\n$ singularity pull shub://vsoch/singularity-images\n```\n\nAnd now let's scan! We do this by executing a command to the `clair-scanner` container.\nThe most basic usage will just print a report to stdout, like this:\n\n```bash\n$ docker exec -it clair-scanner sclair singularity-images_latest.sif\n...\n\nCVE-2016-9843 (Low)\nhttp://people.ubuntu.com/~ubuntu-security/cve/CVE-2016-9843\nThe crc32_big function in crc32.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact via vectors involving big-endian CRC calculation.\n```\n\n### Save a Report\n\nHowever, if you want to save a report to file (json), you can add the `--report` argument\npointing to an existing output directory of choice. For example, since [reports](reports)\nis provided in our present working directory and already bound to the container at `/code/reports`\nwe can specify that as an argument:\n\n```bash\n$ docker exec -it clair-scanner sclair --report /code/reports singularity-images_latest.sif\n```\n\nUsing `--report` will not disable the print to stdout. However, if you want to disable it,\nyou can add the `--no-print` option. An example JSON report can be found in the [reports](reports) folder.\n\n```bash\n$ docker exec -it clair-scanner sclair --report /code/reports --no-print singularity-images_latest.sif\n```\n\nFor a full example of what is printed to stdout (using a container with a known vulnerability) see\nthe [example test](test) folder.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.github.com/singularityhub/stools",
    "keywords": "singularity container tools",
    "license": "LICENSE",
    "maintainer": "Vanessa Sochat",
    "maintainer_email": "vsochat@stanford.edu",
    "name": "stools",
    "package_url": "https://pypi.org/project/stools/",
    "platform": "",
    "project_url": "https://pypi.org/project/stools/",
    "project_urls": {
      "Homepage": "http://www.github.com/singularityhub/stools"
    },
    "release_url": "https://pypi.org/project/stools/0.0.13/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Command line tools for container quality assurance",
    "version": "0.0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9540048,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c47fc409f73775ac00ab9c8e23f6a1e9a54a33505e0a6b49a6c6a36ab4a5ec0",
          "md5": "9ecd34e68bcdf52a562bffaa6558273a",
          "sha256": "ba0e05b1579efea35da9187a49c599e5838e1e11c396d12482cef15036befa7a"
        },
        "downloads": -1,
        "filename": "stools-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9ecd34e68bcdf52a562bffaa6558273a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3405,
        "upload_time": "2018-04-26T18:53:53",
        "upload_time_iso_8601": "2018-04-26T18:53:53.506838Z",
        "url": "https://files.pythonhosted.org/packages/1c/47/fc409f73775ac00ab9c8e23f6a1e9a54a33505e0a6b49a6c6a36ab4a5ec0/stools-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c1cd44e5717d0f8b417398c73d01ecc6aea4400a93af476d0cd5324c76d8a96",
          "md5": "1d49a651fd5af0a5401e148286cf255b",
          "sha256": "85aca6f2c1ebba324b937f5bab7486f9bea5af5864516b2b5d2d8a56dc8265c8"
        },
        "downloads": -1,
        "filename": "stools-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1d49a651fd5af0a5401e148286cf255b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9287,
        "upload_time": "2018-04-27T22:23:49",
        "upload_time_iso_8601": "2018-04-27T22:23:49.481011Z",
        "url": "https://files.pythonhosted.org/packages/2c/1c/d44e5717d0f8b417398c73d01ecc6aea4400a93af476d0cd5324c76d8a96/stools-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffe81576a8adbe32d2270b599f0fece16e51588ddba4d8f17d9a1dedd1097258",
          "md5": "d32634ee4e9fe68ea0b79279dcad875a",
          "sha256": "1705c4f685da4799c7abbe27ecb1b9b006ce44948d90fadb9e42eec00a98368e"
        },
        "downloads": -1,
        "filename": "stools-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "d32634ee4e9fe68ea0b79279dcad875a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11264,
        "upload_time": "2020-04-17T17:51:43",
        "upload_time_iso_8601": "2020-04-17T17:51:43.503328Z",
        "url": "https://files.pythonhosted.org/packages/ff/e8/1576a8adbe32d2270b599f0fece16e51588ddba4d8f17d9a1dedd1097258/stools-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fabb19c1ddc1bc23820c1bbdd8c61bc919600c59b5c5712ab28b20d79f1f9273",
          "md5": "9800e053f7147ebbdbe41c725a631f95",
          "sha256": "bf49c9d9a980377b82e3c2428a3f116618768762b5748ef347a89431981e3959"
        },
        "downloads": -1,
        "filename": "stools-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "9800e053f7147ebbdbe41c725a631f95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12006,
        "upload_time": "2021-02-27T06:23:00",
        "upload_time_iso_8601": "2021-02-27T06:23:00.688293Z",
        "url": "https://files.pythonhosted.org/packages/fa/bb/19c1ddc1bc23820c1bbdd8c61bc919600c59b5c5712ab28b20d79f1f9273/stools-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fabb19c1ddc1bc23820c1bbdd8c61bc919600c59b5c5712ab28b20d79f1f9273",
        "md5": "9800e053f7147ebbdbe41c725a631f95",
        "sha256": "bf49c9d9a980377b82e3c2428a3f116618768762b5748ef347a89431981e3959"
      },
      "downloads": -1,
      "filename": "stools-0.0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "9800e053f7147ebbdbe41c725a631f95",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12006,
      "upload_time": "2021-02-27T06:23:00",
      "upload_time_iso_8601": "2021-02-27T06:23:00.688293Z",
      "url": "https://files.pythonhosted.org/packages/fa/bb/19c1ddc1bc23820c1bbdd8c61bc919600c59b5c5712ab28b20d79f1f9273/stools-0.0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}