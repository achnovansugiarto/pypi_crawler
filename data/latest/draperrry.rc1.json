{
  "info": {
    "author": "Ricky Young",
    "author_email": "rickyyoung@qbraid.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# QOSF ADDER CHALLENGE\n\n## Ricky's solution:\n\nHello, thank you for checking out my Draper adder solution! This problem seemed\nto be the most challenging tome and that was the chief reason why I chose it. As a bonus, I've generalized it to find the subset to sum for other lists of integers and outpus, assuming the integers are not negative. \n\n### Getting Started\n\nPlease create a conda environment for the module to run in if you do not have\none: `conda create -n draper python=3.9`\n\n`pip install -r requirements.txt`\n\nInstallation You can install from source by cloning this repository and running\na pip install command in the root directory:\n\n```\ngit clone url = https://github.com/rryoung98/QOSF.git\ncd QOSF\npython3 -m pip install -e .\n```\n\n### Implementation\n\nThe problem requires checking all combinations of the list of integers to check\nif they sum. The `subset_finder()` defaults to find the subset for the problem\nstatement, but this implementation has been generalized to take in other\npositive integers and outputs.\n\nHere is an example adder circuit for `5+7`.\n![circuit](./assets/circuit.png)\n\n\n#### How it works\n\nThe algorithm first converts all the integers to binary and then uses the meet\nin the middle strategy to split the list into two and find all the combinations\nwhich add up to the desired value using the draper adder method.\n\nThe draper method is implemented using qiskit and applies a QFT without swap\ngates then a series of controlled phase gates. \n\n\n\n### Challenges\n\nI faced a decent amount of challenges but all of them were very rewarding. From building the draper circuit to making sure that the python package was successfully deployed this was a pretty fun weekend. I think looking back at the problems I could have implemented this a lot faster if I paid closer attention to the various implementations of the draper circuit from several papers and the Microsoft tutorial. Some of them were for the modulo addition which I spent a good amount of time varifying. Big O considerations were also significant especially since the nature of arithmetic quantum circuit, the running of the circuit, as well as the combinations would slow the draper adder and would be an exciting topic to explore!\n\n### Tests\n\nSome test were made to make sure that functions behave as expected. In the case that the pip install fails the requirements.txt is also available and a demo.\n\n### Conclusion\n\nIt was definitely fun doing this project. I'm happy with how relatively robust\nthe solution and hope that this work can be considered for the mentorship!\n\nFuture improvements include running on allowing the ability to run on various\nsimulators and hardware via kwargs and I would hope to add different methods of\nquantum arithmetic\n\n## QOSF PROBLEM 1:\n\nFor this problem, you want to find a positive integer that can be composed of\nthe summation of a subset of the input vector, for example: [1,3,6,4,2], and we\nneed to find the number 6\n\nthe possible solutions are:\n\n- [1,3,2],\n- [4,2],\n- [6] For this challenge, consider as input a vector of positive integers and a\n  positive integer, generate a quantum circuit that indicates with higher\n  probability the subset(s) that manage to obtain the number with their sum. Tip\n  consider a QRAM to save the input vector and the encoding basis, using the\n  before example that could be, we need n qubits for the length of the vector\n  and m qubits for the length of the bits. Consider that we will use n = 5\n  qubits for the address, so the state |10000⟩ represents the index 1, the state\n  |01000⟩ represents the index 2 and so on. And **m = 3**, because the number we\n  need is 6 and in binary is 110, so we can use the bases encoding and the state\n  result is |110⟩\n\n### In view of the above, the following should be carried out\n\n|index of the vector⟩|value of the index⟩ Consider this format, we need 5 qubits\nfor the index and 3 qubits of the values, i.e: 1 = > |10000001> 3 = > |01000011>\n6 = > |00100110> 4 = > |00010100> 2 = > |00001010> And you want to find 6. The\ngreen part is the index state, and the red is the value. For this example you\nneed to find an oracle where is the state six in the red qubits is a correct\nanswer. The output could be\n\n- [1,3,2] = > |11001> ,\n- [4,2] = > |00011> ,\n- [6] = > |00100> Hint: For this task you can make use of the Adder by Draper, a\n  general quantum circuit to make this proposal can be found here, but instead\n  of adding 2 numbers find a way to accommodate the request.\n\nBased on the diagram, the QFT and QFT-1 are used and U1 = . Then the values to\nbe the binary number dep’ends on the U1 gates. Examples of this you can see in\nthe images, consider the green cat as |0> and purple cat as |1>.\n\n### The challenge\n\nDesign a quantum circuit that finds the subsets where the sum is equal to the\nvalue 16 in the following vector [5,7,8,9,1]\n\n### References\n\nSteven A. Cuccaro, Thomas G. Draper, Samuel A. Kutin, David Petrie Moulton\n(2004). A new quantum ripple-carry addition circuit.\n(https://arxiv.org/abs/quant-ph/0410184)\n\nThomas G. Draper (2000). Addition on a Quantum Computer\n(https://arxiv.org/abs/quant-ph/0008033)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rryoung98/QOSF",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "draperrry",
    "package_url": "https://pypi.org/project/draperrry/",
    "platform": "",
    "project_url": "https://pypi.org/project/draperrry/",
    "project_urls": {
      "Homepage": "https://github.com/rryoung98/QOSF"
    },
    "release_url": "https://pypi.org/project/draperrry/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A small package to add two numbers together within quantum computing",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13054234,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de30f9f9387fcf3346e6ea2e3b6ca42b8c227f6877b3d45700efa68afbd10b7c",
          "md5": "670ce74e1011c488b99170ccc8e66850",
          "sha256": "6d00f3a1a312dcdbe2a52cba2cc6a1d9fca1b13eece067ed7b73194c582f9e92"
        },
        "downloads": -1,
        "filename": "draperrry-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "670ce74e1011c488b99170ccc8e66850",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7255,
        "upload_time": "2022-03-02T05:01:30",
        "upload_time_iso_8601": "2022-03-02T05:01:30.240156Z",
        "url": "https://files.pythonhosted.org/packages/de/30/f9f9387fcf3346e6ea2e3b6ca42b8c227f6877b3d45700efa68afbd10b7c/draperrry-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dce2b8055193dac16a75e767f01442b6bdb065ee7d0c367a0cd81b3741de361b",
          "md5": "ad00e1fcb42db2e0ae43b1eef93dfb62",
          "sha256": "cdb473b34176acd076450462155cbb87c27936ca1716fe7682e8a937c06b99a5"
        },
        "downloads": -1,
        "filename": "draperrry-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ad00e1fcb42db2e0ae43b1eef93dfb62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 6792,
        "upload_time": "2022-03-02T05:01:32",
        "upload_time_iso_8601": "2022-03-02T05:01:32.339549Z",
        "url": "https://files.pythonhosted.org/packages/dc/e2/b8055193dac16a75e767f01442b6bdb065ee7d0c367a0cd81b3741de361b/draperrry-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de30f9f9387fcf3346e6ea2e3b6ca42b8c227f6877b3d45700efa68afbd10b7c",
        "md5": "670ce74e1011c488b99170ccc8e66850",
        "sha256": "6d00f3a1a312dcdbe2a52cba2cc6a1d9fca1b13eece067ed7b73194c582f9e92"
      },
      "downloads": -1,
      "filename": "draperrry-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "670ce74e1011c488b99170ccc8e66850",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7255,
      "upload_time": "2022-03-02T05:01:30",
      "upload_time_iso_8601": "2022-03-02T05:01:30.240156Z",
      "url": "https://files.pythonhosted.org/packages/de/30/f9f9387fcf3346e6ea2e3b6ca42b8c227f6877b3d45700efa68afbd10b7c/draperrry-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dce2b8055193dac16a75e767f01442b6bdb065ee7d0c367a0cd81b3741de361b",
        "md5": "ad00e1fcb42db2e0ae43b1eef93dfb62",
        "sha256": "cdb473b34176acd076450462155cbb87c27936ca1716fe7682e8a937c06b99a5"
      },
      "downloads": -1,
      "filename": "draperrry-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ad00e1fcb42db2e0ae43b1eef93dfb62",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 6792,
      "upload_time": "2022-03-02T05:01:32",
      "upload_time_iso_8601": "2022-03-02T05:01:32.339549Z",
      "url": "https://files.pythonhosted.org/packages/dc/e2/b8055193dac16a75e767f01442b6bdb065ee7d0c367a0cd81b3741de361b/draperrry-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}