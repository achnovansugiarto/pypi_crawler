{
  "info": {
    "author": "Dawid Kraczkowski",
    "author_email": "dawid.kraczkowski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# Chocs - Parsed body middleware <br>[![PyPI version](https://badge.fury.io/py/chocs-middleware.parsed-body.svg)](https://pypi.org/project/chocs-middleware.parsed-body/) [![CI](https://github.com/kodemore/chocs-parsed-body/actions/workflows/main.yaml/badge.svg)](https://github.com/kodemore/chocs-parsed-body/actions/workflows/main.yaml) [![Release](https://github.com/kodemore/chocs-parsed-body/actions/workflows/release.yml/badge.svg)](https://github.com/kodemore/chocs-parsed-body/actions/workflows/release.yml) [![codecov](https://codecov.io/gh/kodemore/chocs-parsed-body/branch/main/graph/badge.svg?token=Q5PL6W5DTB)](https://codecov.io/gh/kodemore/chocs-parsed-body) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nParsed body middleware for chocs package.\n\nParsed body middleware helps to convert json/yaml request payloads into dataclass. Parsed body middleware is build on\nthe top of [`chili`](https://github.com/kodemore/chili) package. It supports complex dataclass initialisation and extraction\nand does not pollute your codebase as it is solely depends on built-in python dataclasses package.\n\n\n## Installation\n\nWith pip,\n```shell\npip install chocs-middleware.parsed_body\n```\nor through poetry\n```shell\npoetry add chocs-middleware.parsed_body\n```\n\n# Usage\n\nMiddleware can work in two ways:\n- strict mode\n- auto hydration\n\nIn `strict` mode middleware will only rely on defined initializer defined in your dataclasses. If arguments in request\npayload are not exactly matching singnature of your initializer method it will fail.\n\nIn `auto hydration` mode middleware will ignore initializers defined in your dataclasses, but `__post_init__` is still \ncalled after data is hydrated into class. Auto hydration may fail in scenarios where property is defined as non-optional\nand is missing in the request payload.\n\n## Registering middleware\n\n```python\nfrom chocs_middleware.parsed_body import ParsedBodyMiddleware\nfrom chocs import Application, HttpRequest, HttpResponse\nfrom chili import asdict\nfrom dataclasses import dataclass\nimport json\n\n# You can define whether to use strict mode or not for all defined routes.\napp = Application(ParsedBodyMiddleware(strict=False))\n\n\n@dataclass\nclass Pet:\n    id: str\n    name: str\n\n\n@app.post(\"/pets\", parsed_body=Pet, strict=True)  # you can also override default strict mode inside the route\ndef create_pet(request: HttpRequest) -> HttpResponse:\n    # You can try to catch exceptions while hydration happens\n    try:\n        pet: Pet = request.parsed_body\n    except Exception:\n        pet = None\n    assert isinstance(pet, Pet)\n    return HttpResponse(json.dumps(asdict(pet)))\n```\n\nIn the above example we can see that `request.parsed_body` is no longer carrying `chocs.JsonHttpMessage` instead it was transformed into dataclass hinted inside the route definition (`Pet`).\n\n### Strict mode\n\nStrict mode is using initializer defined in a dataclass. Which means the request data\nis simply unpacked and passed to your dataclass, so you have to manually transform \nnested data to dataclasses in order to conform your dataclass interface, for example:\n\n```python\nfrom chocs_middleware.parsed_body import ParsedBodyMiddleware\nfrom chocs import Application, HttpRequest, HttpResponse\nfrom dataclasses import dataclass\nfrom typing import List\n\napp = Application(ParsedBodyMiddleware())\n\n\n@dataclass\nclass Tag:\n    name: str\n    id: str\n\n\n@dataclass\nclass Pet:\n    id: str\n    name: str\n    age: int\n    tags: List[Tag]\n\n    def __post_init__(self):  # post init might be used to reformat your data\n        self.age = int(self.age)\n        tmp_tags = self.tags\n        self.tags = []\n        for tag in tmp_tags:\n            self.tags.append(Tag(**tag))\n\n\n@app.post(\"/pets\", parsed_body=Pet)\ndef create_pet(request: HttpRequest) -> HttpResponse:\n    pet: Pet = request.parsed_body\n    assert isinstance(pet.tags[0], Tag)\n    assert isinstance(pet, Pet)\n    return HttpResponse(pet.name)\n\n```\n\n### Auto hydration\n\nIn non-strict mode instantiating and hydrating your dataclasses happens automatically. Complex and deeply nested \nstructures are supported as long as used types are supported by `chili` hydration mechanism.\n\nList of supported types can be found in [chili's supported data types](https://github.com/kodemore/chili#supported-data-types)\n\n> Note: __post_init__ method is also called as a part of hydration process.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kodemore/chocs-parsed-body",
    "keywords": "dataclasses,dataclass,http-request,chocs,http,middleware",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chocs-middleware.parsed-body",
    "package_url": "https://pypi.org/project/chocs-middleware.parsed-body/",
    "platform": "",
    "project_url": "https://pypi.org/project/chocs-middleware.parsed-body/",
    "project_urls": {
      "Documentation": "https://github.com/kodemore/chocs-parsed-body",
      "Homepage": "https://github.com/kodemore/chocs-parsed-body",
      "Repository": "https://github.com/kodemore/chocs-parsed-body"
    },
    "release_url": "https://pypi.org/project/chocs-middleware.parsed-body/1.0.1/",
    "requires_dist": [
      "chocs (>=1.0.0,<2.0.0)",
      "chili (>=1.1.0,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "This middleware changes behaviour of chocs.HttpRequest.parsed_body.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11259392,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10fde244712972fa90bf685c6c66fbfa35769b36224568efb668bfc359fdff10",
          "md5": "694cc5a333c8fe80f9eb6eb94a579232",
          "sha256": "01cc98b7582ee2d21ff0af529ef5410b342975a134b8a4a37a44836d78542648"
        },
        "downloads": -1,
        "filename": "chocs_middleware.parsed_body-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "694cc5a333c8fe80f9eb6eb94a579232",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 4157,
        "upload_time": "2021-07-09T08:04:38",
        "upload_time_iso_8601": "2021-07-09T08:04:38.901531Z",
        "url": "https://files.pythonhosted.org/packages/10/fd/e244712972fa90bf685c6c66fbfa35769b36224568efb668bfc359fdff10/chocs_middleware.parsed_body-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "540f1d350af7ffc62c1764dc24290699c75b434ae7dec55d698e5cded12f5418",
          "md5": "a9879210279f8eeeee7049474471ba54",
          "sha256": "4f71d7ff418b9f13461a440c29b391b0ffb6024d2b33ceb333a71fc33f84e83c"
        },
        "downloads": -1,
        "filename": "chocs_middleware.parsed_body-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a9879210279f8eeeee7049474471ba54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 4724,
        "upload_time": "2021-08-24T05:32:14",
        "upload_time_iso_8601": "2021-08-24T05:32:14.176684Z",
        "url": "https://files.pythonhosted.org/packages/54/0f/1d350af7ffc62c1764dc24290699c75b434ae7dec55d698e5cded12f5418/chocs_middleware.parsed_body-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "540f1d350af7ffc62c1764dc24290699c75b434ae7dec55d698e5cded12f5418",
        "md5": "a9879210279f8eeeee7049474471ba54",
        "sha256": "4f71d7ff418b9f13461a440c29b391b0ffb6024d2b33ceb333a71fc33f84e83c"
      },
      "downloads": -1,
      "filename": "chocs_middleware.parsed_body-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a9879210279f8eeeee7049474471ba54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 4724,
      "upload_time": "2021-08-24T05:32:14",
      "upload_time_iso_8601": "2021-08-24T05:32:14.176684Z",
      "url": "https://files.pythonhosted.org/packages/54/0f/1d350af7ffc62c1764dc24290699c75b434ae7dec55d698e5cded12f5418/chocs_middleware.parsed_body-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}