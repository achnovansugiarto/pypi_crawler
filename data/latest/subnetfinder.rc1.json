{
  "info": {
    "author": "Skylight 2000",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "Subnet Finder assists in situations where any of the following apply:\n\n* there are multiple IPAM solutions covering different areas of the enterprise\n* connecting two large enterprise networks together in which neither have very many open subnets\n* finding blocks which can be considered globally unique\n\nIn cases such as this, Subnet Finder will collect the information you provide, and provide you with a list of subnets which can be used across the enterprise.  The results are only as good as the data provided, so you should spend most of the time preparing a very accurate list of subnets.\n\nThe script works by collecting a list of used subnets which you will provide.  You should not provide summaries, but the actual subnets used.  The more accurate, the better.  For example, if you know that you are using two /24 networks, provide those networks rather than the summary /23.  \n\n# Requirements\nThis module requires Python 3.7 or higher.\n\n# Input File Format\nThe used subnets are supplied via one or more files which can be either piped in, or read directly. Alternately, subnetfinder can be used as a module within another script.  Here are examples of the three options.  The file format is shown here.\n\n```\ngroup: group1\n10.3.3.0/25\n10.0.0.192/28\n10.2.1.12\n10.4.25.0/24\n10.0.3.0/25\ngroup: group2\n10.0.2.0/24\n10.1.3.0/25\n10.6.1.12\n10.4.25.0/24\n10.0.2.0/24\ngroup: group3\n10.0.2.0/24\n10.0.3.0/25\n10.0.1.12\n10.4.25.0/24\n```\n\nEach line represents a single entry.  There are two types of entries in this file.\n* Used Subnet (10.3.3.0/25)\n  * This is used to specify which subnets are in use by that group.  You should specify the longest possible subnet, and not include summaries if possible.  The more accurate and detailed the information, the better the results.\n* Group Headers (group: group1)\n  * This is used as a header.  All entries following will be put into that specific group, until a new group header is found.  This is an optional field, and need not be specified.  It only has value when combined with the -u (Unique In) option.\n  * The \"group:\" header is not case sensitive. \n  * Whatever follows the \"group:\" header is taken as the group field after being stripped.  \n\n# Getting help\nThe built-in module help is available, from both the CLI and within an interactive shell.\n\n## Help from the CLI\n```\nuser@PC:$ python3 -m subnetfinder\nusage: Subnet Finder [-h] -s sn -p pl [-u N] [--summarize] [--version] [-v] [--debug] [--test] [FILE]\nSubnet Finder: error: the following arguments are required: -s/--supernet, -p/--prefix\nuser@PC:$ python3 -m subnetfinder -h\nusage: Subnet Finder [-h] -s sn -p pl [-u N] [--summarize] [--version] [-v] [--debug] [--test] [FILE]\n\nFind unused subnets from a provided list of used subnets.\n\npositional arguments:\n  FILE                  If present, the file name of the source list with one prefix per line. Default is from STDIN.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s sn, --supernet sn  The Super Net in which to find open IP blocks, such as 10.0.0.0/8.\n  -p pl, --prefix pl    The maximum prefix length to consider, such as 16. This must be longer than the supernet\n                        prefix length.\n  -u N, --uniquein N    Specify the maximum number of groups that can contain a prefix. Can be used to find prefixes\n                        unique to two or more lists. Groups must have headings of \"group: <groupname>\".\n  --summarize           Summarize contiguous subnets into supernets if possible.\n  --version             show program's version number and exit\n  -v, --verbose         Be more verbose with output. Verbose levels 1 to 3 are -v to -vvv.\n  --debug               Display additional output for lines.\n  --test                Used only for unit testing\n\nUse this program to find unused blocks of IPs, or blocks used a limited number of times, with prefix length pl within the subnet sn, based on the IPs or blocks supplied.\n```\n## Arguments Details\n* -s, --supernet\n  * This is a required argument.  It is used to specify the top of the scope for the search, meaning the largest supernet.  \n  * This is used as a filter against the incoming list of subnets, so that there is no need to filter the subnets by hand.\n* -p, --prefix\n  * This is a required argument.  It is used to specify the bottom of the scope for the search.\n  * It is also used to build a common subnet length to simplify the math for summarization.  The summarization method depends on this.\n* -u, --uniquein \"Unique In\"\n  * This is an optional argument.  \n  * If you specify groups within the input file(s) as shown above, this will specify the maximum number of groups in which a subnet may appear and still be considered available. \n  * This option should be paired with -v (verbose) if you want these subnets identified specifically. \n* --summarize\n  * This is an optional argument.\n  * This will combine subnets where possible into supernets to reduce the number of networks provided in the output.  \n* -v, --verbose\n  * This is an optional argument.\n  * This is paired with the -u (unique in) option, to list the subnets which did exist in the provided list, but occurred in N groups or less.\n* --debug\n  * This is an optional argument.\n  * This will print a much larger amount of information as the script processes the input data.\n\n## Help from the interactive shell\n```\nuser@PC:$ python3\nPython 3.8.10 (default, Sep 28 2021, 16:10:42)\n[GCC 9.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import subnetfinder\n>>> help(subnetfinder.ProcessSubnets)\nProcessSubnets(supernet, usedlist, targetprefixlen, showdebug=False, screenout=False, summarize=False, uniquein=0)\n    This will build a list of \"seen\" (used) subnets from the source provided, and then\n    return a list of unseen subnets with length \"prefixlen\" from the same supernet.\n    It will ignore all provided subnets which are outside of the supernet range.\n    It will error and ignore if the line isn't a valid CIDR subnet (10.0.0.0/8) notation.\n\n    NOTE: The default CIDR length is omitted, a /32 is assumed.\n\n    [Arguments]\n    supernet:   The ipaddress.ip_network object for the supernet\n    usedlist:   A iterable list of string objects.  Each string object must contain either a used\n                subnet in CIDR format, or a group header.  If a group header is supplied, subsequent\n                CIDR networks will be placed in that group.\n                Example CIDR notation:  10.0.0.0/8\n                Example group header:  Group: New Group\n    targetprefixlen:\n                An int representing the target prefix length\n    uniquein:   Can be used to find a subnet which exist only in N or less groups.\n    showdebug:  Will print additional debugging information to STDOUT.\n                Default is False.\n    screenout:  Directs the output to STDOUT and exits rather than returning a list\n                Default is False.\n    supernets:  Combine contiguous blocks into summary supernets with shorter prefix length pl if possible.\n                This may take more time if the list of available subnets is long.\n\n    [Returns]\n    This method returns a list of ipaddress.IPv4Network objects representing the unused subnets\n    matching the characteristics provided.\n\n```\n# Launching the script from the CLI\nThe script is platform independent, but the method used for \"piping\" the data to the script (if you have multiple files) depends on the operating system.  If you choose to combine your data into a single file, the second option works the same in either operating system.\n\n## Linux\n```\ncat file1 file2 file3 | python3 -m subnetfinder -s 10.0.0.0/8 -p 16\npython3 -m subnetfinder -s 10.0.0.0/8 -p 16 file1\n```\n\n## Windows\n```\ntype file1.txt file2.txt file3.txt | python -m subnetfinder -s 10.0.0.0/8 -p 16\npython -m subnetfinder -s 10.0.0.0/8 -p 16 file1\n```\n\n\n# Calling as a module\nObviously, this script can also be called as a module.  Here is a quick sample of code that would utilize this script.\n\n```\nfrom ipaddress import ip_network\nfrom subnetfinder import ProcessSubnets\n\nsearchprefix=ip_network('10.0.0.0/16')\nprint(\"%s\"%(searchprefix))\nusedsubnets=['10.0.2.0/24','10.0.3.0/25','10.0.0.192/28','10.0.1.12','10.4.25.0/24']\nprint(\"Used Subnets\")\nfor x in usedsubnets:\n    print(\"%s\"%(x))\nprint(\"Calling ProcessSubnets.\")\navailablesubnets=ProcessSubnets(searchprefix,usedsubnets,24,summarize=True)\nprint(\"Done.\")\nfor x in availablesubnets:\n    print(\"%s\"%(x))\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://sourceforge.net/projects/available-subnet-finder/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "subnetfinder",
    "package_url": "https://pypi.org/project/subnetfinder/",
    "platform": "",
    "project_url": "https://pypi.org/project/subnetfinder/",
    "project_urls": {
      "Homepage": "https://sourceforge.net/projects/available-subnet-finder/"
    },
    "release_url": "https://pypi.org/project/subnetfinder/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Find available subnets within a given block of IPs",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12178932,
  "releases": {
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7730f800f2170474f9c83c5541d39d9d258ba2e37ccbf1998abda34b4799e818",
          "md5": "6bac56b3b8d3bb1c700fb3cfdf1b9f9e",
          "sha256": "d4eb9b48488c7845345ce810b1a482daa55b44ebbb67efe4acaba0a83061c9ee"
        },
        "downloads": -1,
        "filename": "subnetfinder-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bac56b3b8d3bb1c700fb3cfdf1b9f9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9902,
        "upload_time": "2021-12-01T16:29:17",
        "upload_time_iso_8601": "2021-12-01T16:29:17.261836Z",
        "url": "https://files.pythonhosted.org/packages/77/30/f800f2170474f9c83c5541d39d9d258ba2e37ccbf1998abda34b4799e818/subnetfinder-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edfd81b3017e6b5ebf36ec0e3593aec0c939fca29b37c4cdc7b74dccffef87ab",
          "md5": "b07d8f03e2bac4f98a204957ea04bbe6",
          "sha256": "8ab3b84bd14723b1b03cf0865074d00e25be34113f8d5d265789ce671f036c76"
        },
        "downloads": -1,
        "filename": "subnetfinder-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b07d8f03e2bac4f98a204957ea04bbe6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11170,
        "upload_time": "2021-12-01T16:29:18",
        "upload_time_iso_8601": "2021-12-01T16:29:18.352026Z",
        "url": "https://files.pythonhosted.org/packages/ed/fd/81b3017e6b5ebf36ec0e3593aec0c939fca29b37c4cdc7b74dccffef87ab/subnetfinder-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7730f800f2170474f9c83c5541d39d9d258ba2e37ccbf1998abda34b4799e818",
        "md5": "6bac56b3b8d3bb1c700fb3cfdf1b9f9e",
        "sha256": "d4eb9b48488c7845345ce810b1a482daa55b44ebbb67efe4acaba0a83061c9ee"
      },
      "downloads": -1,
      "filename": "subnetfinder-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6bac56b3b8d3bb1c700fb3cfdf1b9f9e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9902,
      "upload_time": "2021-12-01T16:29:17",
      "upload_time_iso_8601": "2021-12-01T16:29:17.261836Z",
      "url": "https://files.pythonhosted.org/packages/77/30/f800f2170474f9c83c5541d39d9d258ba2e37ccbf1998abda34b4799e818/subnetfinder-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edfd81b3017e6b5ebf36ec0e3593aec0c939fca29b37c4cdc7b74dccffef87ab",
        "md5": "b07d8f03e2bac4f98a204957ea04bbe6",
        "sha256": "8ab3b84bd14723b1b03cf0865074d00e25be34113f8d5d265789ce671f036c76"
      },
      "downloads": -1,
      "filename": "subnetfinder-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b07d8f03e2bac4f98a204957ea04bbe6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11170,
      "upload_time": "2021-12-01T16:29:18",
      "upload_time_iso_8601": "2021-12-01T16:29:18.352026Z",
      "url": "https://files.pythonhosted.org/packages/ed/fd/81b3017e6b5ebf36ec0e3593aec0c939fca29b37c4cdc7b74dccffef87ab/subnetfinder-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}