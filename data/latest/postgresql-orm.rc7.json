{
  "info": {
    "author": "Vakhtang Zardiashvili",
    "author_email": "hazardland@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Downloads](https://pepy.tech/badge/postgresql-orm/month)](https://pepy.tech/project/postgresql-orm)\n[![Downloads](https://pepy.tech/badge/postgresql-orm)](https://pepy.tech/project/postgresql-orm)\n\n<!-- MarkdownTOC autolink=true levels=\"1\" autoanchor=\"true\"-->\n\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Prepare](#prepare)\n- [Class](#class)\n- [Model](#model)\n- [Add](#add)\n- [Get](#get)\n- [Save](#save)\n- [All](#all)\n- [Delete](#delete)\n- [Filter](#filter)\n- [Custom](#custom)\n- [Table](#table)\n- [Fields](#fields)\n- [Joins](#joins)\n\n<!-- /MarkdownTOC -->\n\n\n![](https://raw.githubusercontent.com/hazardland/sql.py/master/images/query.png)\n\n\n# Installation\n```\npip install psycopg2-binary\npip install postgresql-orm\n```\n\n# Configuration\n\nImport module:\n\n```python\nimport sql\n```\n\nSet log level to debug to see generated queries\n\n```python\nimport logging as log\nlog.basicConfig(level=log.DEBUG)\n```\n\nConfigure default database connetion:\n\n```python\nsql.db = sql.Db('dbname=postgres user=postgres password=1234 host=127.0.0.1 port=5432')\n```\n\nYou can also set default schema for a default model:\n```python\nsql.Table.schema = 'demo'\n```\n\nThat is enough for a setup, but below we describe advanced mechanics of database connection:\n\nConnetion is made before the very first query to database. By default 20 thread safe connection pool is reserved ```sql.Db('..', size=20)```. To establish connection manually call ```sql.db.init()```. ```sql.db.get()``` gets free database connection from the pull, after finishing a job the connection is returned back to the connection pull by calling ```sql.db.put(connection)```.\n\nAlternatively every model can have its own database connection and its own schema, it is achieved by extending sql.Table, the default model class:\n\n```python\nimport sql\n\nclass Users(sql.Table):\n    db = sql.Db('host=198.168.0.1 dbname=core')\n    schema = 'site'\n    name = 'users'\n    fields = {}\n\nclass Transactions(sql.Table):\n    db = sql.Db('host=198.168.0.2 dbname=reporting')\n    schema = 'financial'\n    name = 'transaction'\n    fields = {}\n```\n\n# Prepare\nLet us create a demo schema for a small tutorial:\n```python\nsql.query('DROP SCHEMA IF EXISTS demo CASCADE')\nsql.query('CREATE SCHEMA IF NOT EXISTS demo')\n```\n\nWe will have two tables: users and groups, users table will reference groups table to showcase some joins\n```python\nsql.query(\"\"\"\n    CREATE TABLE IF NOT EXISTS demo.groups (\n        id SMALLSERIAL PRIMARY KEY NOT NULL,\n        name VARCHAR(32)\n    )\"\"\")\n\nsql.query(\"\"\"\nCREATE TABLE IF NOT EXISTS demo.users (\n    id BIGSERIAL PRIMARY KEY NOT NULL,\n    username VARCHAR(64) NOT NULL,\n    fullname VARCHAR(64) NOT NULL,\n    password CHAR(32) NOT NULL,\n    status VARCHAR(8) NOT NULL,\n    group_id SMALLINT REFERENCES demo.groups(id),\n    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()\n)\"\"\")\n```\n\n# Class\nOnce we have tables we create classes for representing users and groups table rows as objects:\n```python\nclass Group:\n    def __init__(self):\n        self.id = None\n        self.name = None\n\nclass User:\n    def __init__(self):\n        self.id = None\n        self.username = None\n        self.fullname = None\n        self.status = None\n        self.group_id = None\n        self.created_at = None\n        self.group = None\n```\nAlso defining properties is not required as orm creates object properties on the fly, but having them is much more descriptive.\n\n# Model\nWe extend sql.Table for our Groups model. The naming goes like this: Class name in singular [ Group ] and model name is in plural [ Group**s** ] as Groups model produces Group class objects:\n```python\nclass Groups(sql.Table):\n    name = 'groups'\n    type = Group\n    fields = {\n        'id': {'type': 'int'},\n        'name': {}\n    }\n```\nWhere ```type = Group``` attaches previously created class to a model.\n\nAnd Users model:\n```python\nclass Users(sql.Table):\n    name = 'users' # Actual table name\n    type = User\n    fields = {\n        'id': {'type': 'int'},\n        'username': {}, # Default is string\n        'fullname': {},\n        'password': {'encoder': md5}, # md5 function will encode values for this field\n        'status': {'options': ['active', 'disabled']}, # Only this values are allowed for this field\n        'group_id': {'type':'int'},\n        'created_at': {'type': 'date'}\n    }\n    joins = {\n        'group': {'table':Groups, 'field':'group_id'}\n    }\n```\n\nLet us pause a bit to create a friendly md5 hash function which we used in password encoder:\n```python\nimport hashlib\ndef md5(plain):\n    return hashlib.md5(plain.encode()).hexdigest()\n```\n*Storing passwords in md5 hashs is not recomended in real world scenario, you should use bcrypt instead.*\n\n\n# Add\nCreate some groups by simply calling Groups.add and passing dict type object, where keys of the object are Groups.fields dict keys:\n```python\nmanager = Groups.add({'name':'Manager'})\ncustomer = Groups.add({'name':'Customer'})\n```\nMethod will generate and run following query:\n```sql\nWITH \"groups\" AS (\nINSERT INTO \"demo\".\"groups\" (name)\nVALUES ('Manager')\nRETURNING groups.id, groups.name )\nSELECT groups.id, groups.name\nFROM \"groups\"\n```\nNewly created row is selected in the same query using ```RETURNING``` and converted into Group object, manager now holds ```{'id':1, 'name':'Manager'}```\n\nCreate users\n```python\nuser = Users.add({\n        'username': 'john',\n        'fullname': 'John Doe',\n        'password': '123',\n        'status': 'active',\n        'group_id': manager.id\n    })\n```\nFollowing query will be generated:\n```sql\nWITH \"users\" AS (\nINSERT INTO \"demo\".\"users\" (username, fullname, password, status, group_id)\nVALUES ('john', 'John Doe', '202cb962ac59075b964b07152d234b70', 'active', '1')\nRETURNING users.id, users.username, users.fullname, users.password, users.status, users.group_id, users.created_at )\nSELECT users.id, users.username, users.fullname, users.password, users.status, users.group_id, users.created_at,groups.id, groups.name\nFROM \"users\"\nLEFT JOIN \"demo\".\"groups\" ON \"groups\".\"id\"=\"users\".\"group_id\"\n```\n\nLet us create a pretty print function\n```python\nimport json\ndef pprint(object):\n    print(json.dumps(object, indent=4, default=lambda x: x.__dict__ if hasattr(x, '__dict__') else str(x)))\n```\n\nActually newly created user is an object of a class User, but pprint will visualise it like a dictionary:\n```python\npprint(user)\n```\nOutputs:\n```python\n{\n    \"id\": 1,\n    \"username\": \"john\",\n    \"fullname\": \"John Doe\",\n    \"status\": \"active\",\n    \"created_at\": \"2020-11-14 03:34:46.913425\",\n    \"password\": \"202cb962ac59075b964b07152d234b70\",\n    \"group_id\": 1,\n    \"group\": {\n        \"id\": 1,\n        \"name\": \"Manager\"\n    }\n}\n```\nNotice that password we input was plain ```'123'``` string and in query it is md5 hash thanks to encoder defined to that field ```'password':{'encoder': md5}```.\n\nHere we add some more users for scientific purposes:\n```python\nimport random\nrandom_string = lambda: ''.join(random.choice('abcdefghijklmnopqrstwxyz') for j in range(random.randrange(3, 9)))\n\nlog.getLogger().setLevel(log.INFO)\nfor i in range(300):\n    Users.add({\n        'username': random_string(),\n        'fullname': random_string().capitalize() + ' ' + random_string().capitalize(),\n        'group_id': random.choice((manager.id, customer.id)),\n        'password': '123',\n        'status': 'active'\n        })\nlog.getLogger().setLevel(log.DEBUG)\n```\n\n# Get\n```python\nuser = Users.get(1)\n```\nWich will get user by following query and because we defined a join on Groups model, query will contain LEFT JOIN on groups table:\n```sql\nSELECT users.id, users.username, users.fullname, users.password, users.status, users.group_id, users.created_at,groups.id, groups.name\nFROM \"demo\".\"users\"\nLEFT JOIN \"demo\".\"groups\" ON \"groups\".\"id\"=\"users\".\"group_id\"\nWHERE\n    \"users\".\"id\"='1'\n    AND 1=1\n```\nLet us look inside User object\n```python\npprint(user)\n```\nWhich outputs:\n```python\n{\n    \"id\": 1,\n    \"username\": \"john\",\n    \"fullname\": \"John Doe\",\n    \"status\": \"active\",\n    \"created_at\": \"2020-11-14 03:34:46.913425\",\n    \"password\": \"202cb962ac59075b964b07152d234b70\",\n    \"group_id\": 1,\n    \"group\": {\n        \"id\": 1,\n        \"name\": \"Manager\"\n    }\n}\n```\nIf you look closer you see that even user.group is an object, actually it is an object of the Group class.\n\n# Save\nSaving happens via id and dict corresponding fields and values, save returns updated object of the user:\n```python\nuser = Users.save(1, {'status':'disabled', 'password':'qwerty'})\n```\nWhile savingi you pass only fields which you inted to update, at least one field is required.\n\nGenerated query:\n```sql\nWITH \"users\" AS (\nUPDATE \"demo\".\"users\" SET password='d8578edf8458ce06fbc5bb76a58c5ca4', status='disabled'\nWHERE\n    \"users\".\"id\"='1'\n    AND 1=1\nRETURNING users.id, users.username, users.fullname, users.password, users.status, users.group_id, users.created_at )\nSELECT users.id, users.username, users.fullname, users.password, users.status, users.group_id, users.created_at,groups.id, groups.name\nFROM \"users\"\nLEFT JOIN \"demo\".\"groups\" ON \"groups\".\"id\"=\"users\".\"group_id\"\n```\nEverything happens in same query: update, select and also join on groups table\n\nuser in case of success now contains actually updated object:\n```python\npprint(user)\n```\n\n```python\n{\n    \"id\": 1,\n    \"username\": \"john\",\n    \"fullname\": \"John Doe\",\n    \"status\": \"disabled\",\n    \"created_at\": \"2020-11-14 03:34:46.913425\",\n    \"password\": \"d8578edf8458ce06fbc5bb76a58c5ca4\",\n    \"group_id\": 1,\n    \"group\": {\n        \"id\": 1,\n        \"name\": \"Manager\"\n    }\n}\n```\n\n# All\n```python\nusers = Users.all(filter={\n                            'id': {\n                                'from':1,\n                                #'to': 300\n                            },\n                            'status':'active',\n                            'group':{\n                                'id': manager.id\n                                }\n                         },\n                   search={\n                        'username': 'j',\n                        'fullname': 'j'\n                   },\n                   limit=2,\n                   order={'field':'username', 'method':'asc'}\n                   )\n```\nQuery:\n```sql\nSELECT users.id, users.username, users.fullname, users.password, users.status, users.group_id, users.created_at,groups.id, groups.name\nFROM \"demo\".\"users\"\nLEFT JOIN \"demo\".\"groups\" ON \"groups\".\"id\"=\"users\".\"group_id\"\nWHERE\n    (users.\"username\" ILIKE '%j%'\n    OR users.\"fullname\" ILIKE '%j%')\n    AND (users.\"id\">='5'\n    AND users.\"status\"='disabled'\n    AND groups.\"id\"='2')\nORDER BY users.\"id\" DESC\n```\nDifference between filter and search is that search consists with only ```OR``` criterias and filter with ```AND```.\n\n```python\npprint(users)\n```\n\n```python\n[\n    {\n        \"id\": 122,\n        \"username\": \"ahdcjq\",\n        \"fullname\": \"Hbf Ngggzmce\",\n        \"status\": \"active\",\n        \"created_at\": \"2020-11-14 04:48:00.857954\",\n        \"password\": \"202cb962ac59075b964b07152d234b70\",\n        \"group_id\": 1,\n        \"group\": {\n            \"id\": 1,\n            \"name\": \"Manager\"\n        }\n    },\n    {\n        \"id\": 51,\n        \"username\": \"alabm\",\n        \"fullname\": \"Ipb Ttjkxc\",\n        \"status\": \"active\",\n        \"created_at\": \"2020-11-14 04:48:00.612368\",\n        \"password\": \"202cb962ac59075b964b07152d234b70\",\n        \"group_id\": 1,\n        \"group\": {\n            \"id\": 1,\n            \"name\": \"Manager\"\n        }\n    }\n]\n```\n\n# Delete\n```python\nUsers.delete(3)\n```\n\n```sql\nDELETE\nFROM \"demo\".\"users\"\nWHERE\n    1=1\n    AND \"users\".\"id\"='3'\n```\n\n# Filter\nIn addition with Table.all, Table.filter has paging and result is object of sql.Result:\n```python\nresult = Users.filter(page=4,\n                      limit=3,\n                      order={'method':'asc'},\n                      filter={'status':'active', 'group':{'id': customer.id}},\n                      search={'username':'j', 'fullname':'j'})\n```\n\n```sql\nSELECT users.id, users.username, users.fullname, users.password, users.status, users.group_id, users.created_at,groups.id, groups.name, COUNT(*) OVER()\nFROM \"demo\".\"users\"\nLEFT JOIN \"demo\".\"groups\" ON \"groups\".\"id\"=\"users\".\"group_id\"\nWHERE\n    (users.\"username\" ILIKE '%j%'\n    OR users.\"fullname\" ILIKE '%j%')\n    AND (users.\"status\"='active'\n    AND groups.\"id\"='2')\nORDER BY users.\"id\" ASC\nLIMIT '3' OFFSET '9'\n```\n\nSelecting 3 rows starting from 9th row as we have per page limit=3 from 9-12 will be items for 4th page\n\n```python\npprint(result)\n```\n\n```python\n{\n    \"total\": 80,\n    \"items\": [\n        {\n            \"id\": 42,\n            \"username\": \"xkeosa\",\n            \"fullname\": \"Hxkqrfz Wxjhbalf\",\n            \"status\": \"active\",\n            \"created_at\": \"2020-11-14 04:50:37.132306\",\n            \"password\": \"202cb962ac59075b964b07152d234b70\",\n            \"group_id\": 2,\n            \"group\": {\n                \"id\": 2,\n                \"name\": \"Customer\"\n            }\n        },\n        {\n            \"id\": 50,\n            \"username\": \"lejfe\",\n            \"fullname\": \"Npowa Sllgq\",\n            \"status\": \"active\",\n            \"created_at\": \"2020-11-14 04:50:37.156698\",\n            \"password\": \"202cb962ac59075b964b07152d234b70\",\n            \"group_id\": 2,\n            \"group\": {\n                \"id\": 2,\n                \"name\": \"Customer\"\n            }\n        },\n        {\n            \"id\": 52,\n            \"username\": \"pofmeyp\",\n            \"fullname\": \"Xpm Zxfthj\",\n            \"status\": \"active\",\n            \"created_at\": \"2020-11-14 04:50:37.161491\",\n            \"password\": \"202cb962ac59075b964b07152d234b70\",\n            \"group_id\": 2,\n            \"group\": {\n                \"id\": 2,\n                \"name\": \"Customer\"\n            }\n        }\n    ]\n}\n```\n\n# Custom\nBut if you want to create some custom query Model class helps a lot with query templating and converting select result into objects of User:\n```python\ndb = None\ntry:\n    db = Users.db.get()\n    cursor = db.cursor()\n    cursor.execute(*sql.debug(f\"\"\"\n        SELECT {Users.select()}\n        FROM {Users}\n        WHERE\n        {Users('username')}=%s\n        AND {Users('password')}=%s\n        \"\"\",\n        ('John', md5('123'))))\n    if cursor.rowcount > 0:\n        # Create User object\n        user = Users.create(cursor.fetchone())\n        pprint(user)\nfinally:\n    Users.db.put(db)\n```\n\n# Table\n```python\nimport sql\nclass Profile(sql.Table):\n\n    # Override database connection default is sql.db = sql.Db('...')\n    db = sql.Db(...)\n\n    # Override default schema, default is None i.e. public\n    schema = 'site'\n\n    # Actual table name\n    name = 'user_profile'\n\n    # Primary key of table, default is 'id'\n    id = 'user_id'\n\n    # Definition of table fields\n    fields = {}\n\n    # Definition of table joins\n    joins = {}\n```\n\n# Fields\n\nField types are: string(default), int, float, bool, date and json\n\nField type is specified by ```'type': 'int'```\n\nCommon field options are:\n```python\nimport sql\nTable fields(sql.Table)\n    fields = {\n        'name': {\n            'type': 'int',\n            'array': True,\n            'options': [1, 2, 3, 4, 5], # Only this values are accepted anything else causes exception\n            'field': 'actual_table_field_name', # default is same as field key\n            'encoder': lambda x: x * 2, # Encoder is called right before insert or update value after validation\n            'decoder': lambda x: x / 2, # Decoder is called after select,\n            'select': True, # Default is True\n            'insert': True, # Default is True\n            'update': True, # Default is True\n            'null': False, # Allow None values in inserts and updates and cast them into null\n        }\n    }\n```\nIf ```'null'``` is ```True``` then ```None``` values are transfered as ```null```, by default ```None``` value fields are ignored in inserts and updates as ```'null'``` is ```False```.\n\nJson field requires ```keys``` setting:\n\n```python\nimport sql\nclass Table(sql.Table):\n    fields = {\n        'title': {\n            'type': 'json',\n            'keys': ['en', 'ka', 'ru'] # This keys are used for ordering by json field\n        }\n    }\n\n# This is how table is ordered with json field key\nTable.filter(order={'field':'title.en'})\n```\n\n\n\n# Joins\n\n```python\nimport sql\n\nclass Table1Class:\n    def __init__(self):\n        self.id = None\n\nclass Table2Class:\n    def __init__(self):\n        self.id = None\n        self.table1_id = None # This just contains table1_id\n        self.table1 = None # This will contain Table1Class object\n\nclass Table1Model(sql.Table):\n    id = 'id'\n    type = Table1Class\n    fields = {\n        'id': {'type': 'int'}\n    }\n\nclass Table2Model(sql.Table):\n    type = Table2Class\n    fields = {\n        'id': {'type': 'int'}\n        'table1_id': {'type': 'int'}\n    }\n    joins: {\n        'table1': {'table': Table1Model, 'field': 'table1_id'}\n    }\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hazardland/sql.py",
    "keywords": "orm,pgsql,postgresql,model",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "postgresql-orm",
    "package_url": "https://pypi.org/project/postgresql-orm/",
    "platform": "",
    "project_url": "https://pypi.org/project/postgresql-orm/",
    "project_urls": {
      "Homepage": "https://github.com/hazardland/sql.py"
    },
    "release_url": "https://pypi.org/project/postgresql-orm/0.5.8/",
    "requires_dist": [
      "python-dateutil"
    ],
    "requires_python": ">=3.6",
    "summary": "Easyest PostgreSQL ORM",
    "version": "0.5.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9875141,
  "releases": {
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94523a354cb796a2a0555a850b97c7d7bb45eb48b30d72013797b5ebaa1cfeee",
          "md5": "212da6cdfa4ae43e7a94bafe7dcdd94b",
          "sha256": "9e5259c93fb39efeda87af68f26db4573fdf038f53cd673a526ae7425fccac90"
        },
        "downloads": -1,
        "filename": "postgresql_orm-0.5.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "212da6cdfa4ae43e7a94bafe7dcdd94b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12680,
        "upload_time": "2020-11-16T14:25:15",
        "upload_time_iso_8601": "2020-11-16T14:25:15.419823Z",
        "url": "https://files.pythonhosted.org/packages/94/52/3a354cb796a2a0555a850b97c7d7bb45eb48b30d72013797b5ebaa1cfeee/postgresql_orm-0.5.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c231eeec1e800cc9d7f7715c24d586ca16274b3eb6428bd85990b0200604b97e",
          "md5": "81c3e3f24f36a7674815ce63c77b9879",
          "sha256": "55dbd5bdb1640af7c07ef8e9070abeb7f6f4af7eb9dc8f5330d4d5585729a93b"
        },
        "downloads": -1,
        "filename": "postgresql-orm-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "81c3e3f24f36a7674815ce63c77b9879",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12485,
        "upload_time": "2020-11-16T14:25:17",
        "upload_time_iso_8601": "2020-11-16T14:25:17.302932Z",
        "url": "https://files.pythonhosted.org/packages/c2/31/eeec1e800cc9d7f7715c24d586ca16274b3eb6428bd85990b0200604b97e/postgresql-orm-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b2f39490427491a314530671b496480758bcc3ad39735c579393cfd40cd6ff5",
          "md5": "e8a159e20aa6a4eb0eaa2b3f52dc6b04",
          "sha256": "22389af50c20a50aeb840b147a659b1f335764a5421b4cd3bb6922e346db3356"
        },
        "downloads": -1,
        "filename": "postgresql_orm-0.5.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8a159e20aa6a4eb0eaa2b3f52dc6b04",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12688,
        "upload_time": "2020-11-16T15:32:55",
        "upload_time_iso_8601": "2020-11-16T15:32:55.174302Z",
        "url": "https://files.pythonhosted.org/packages/3b/2f/39490427491a314530671b496480758bcc3ad39735c579393cfd40cd6ff5/postgresql_orm-0.5.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ac0310b5ebdc4e49959ee0906e68c1a0ed47983b966ae494d15c2a30e668f78",
          "md5": "d7b7f2fb562cdc4f166e941ca4365e7d",
          "sha256": "e5969c2c10fcbdf3587c1159d67aad06e104215fbb5d33e8388370da7d645cb8"
        },
        "downloads": -1,
        "filename": "postgresql-orm-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d7b7f2fb562cdc4f166e941ca4365e7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12486,
        "upload_time": "2020-11-16T15:32:57",
        "upload_time_iso_8601": "2020-11-16T15:32:57.050263Z",
        "url": "https://files.pythonhosted.org/packages/8a/c0/310b5ebdc4e49959ee0906e68c1a0ed47983b966ae494d15c2a30e668f78/postgresql-orm-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b53a26e78a7934ac6c5e542e4cbdfcde742757e6c0f2ece8bebe2f058abde814",
          "md5": "304246957e622b350743f8ad4d7f3be1",
          "sha256": "cda39959531461db27f758778a5f75e3e09a36eb664951848b3f051ffd1519b2"
        },
        "downloads": -1,
        "filename": "postgresql_orm-0.5.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "304246957e622b350743f8ad4d7f3be1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12671,
        "upload_time": "2020-12-02T11:31:32",
        "upload_time_iso_8601": "2020-12-02T11:31:32.684815Z",
        "url": "https://files.pythonhosted.org/packages/b5/3a/26e78a7934ac6c5e542e4cbdfcde742757e6c0f2ece8bebe2f058abde814/postgresql_orm-0.5.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df57d9960baf5b593362e0078f2d99efe0b83102f028ede5376ef886de380c5d",
          "md5": "a2bb0fe549bab27b00ef92454e6e5936",
          "sha256": "cea2c9963f675dcc14eeeb99e20a97aab713a3fe40c2797d618d3b5571d4ec5e"
        },
        "downloads": -1,
        "filename": "postgresql-orm-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a2bb0fe549bab27b00ef92454e6e5936",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12466,
        "upload_time": "2020-12-02T11:31:34",
        "upload_time_iso_8601": "2020-12-02T11:31:34.271920Z",
        "url": "https://files.pythonhosted.org/packages/df/57/d9960baf5b593362e0078f2d99efe0b83102f028ede5376ef886de380c5d/postgresql-orm-0.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddc1f0767536d8aa00e09fb98ea65e6d1c5f3e66d5cf6747371fea51c07b342e",
          "md5": "9e38a6e41a1d391747cf23d0819b7447",
          "sha256": "25934cb20ef51b5949072b40026681ca78312af30344d4dd40b162590a8f5654"
        },
        "downloads": -1,
        "filename": "postgresql_orm-0.5.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e38a6e41a1d391747cf23d0819b7447",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12676,
        "upload_time": "2020-12-07T01:54:18",
        "upload_time_iso_8601": "2020-12-07T01:54:18.866739Z",
        "url": "https://files.pythonhosted.org/packages/dd/c1/f0767536d8aa00e09fb98ea65e6d1c5f3e66d5cf6747371fea51c07b342e/postgresql_orm-0.5.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec5e7cc386ee22990b747f50bcd4f4753d12b6d0327d080cb51cbb28ba004451",
          "md5": "44db493711bbfc73793c2ba7751664a8",
          "sha256": "d56ac3448b439a90ad39f7e1da16da2d8576a05698971bb17baca230602bcb50"
        },
        "downloads": -1,
        "filename": "postgresql-orm-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "44db493711bbfc73793c2ba7751664a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12471,
        "upload_time": "2020-12-07T01:54:20",
        "upload_time_iso_8601": "2020-12-07T01:54:20.593443Z",
        "url": "https://files.pythonhosted.org/packages/ec/5e/7cc386ee22990b747f50bcd4f4753d12b6d0327d080cb51cbb28ba004451/postgresql-orm-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41724fb796acae7293d9bc3525c3922868322c02a6cc88d1d265010ec6d4c4d5",
          "md5": "ae7bfc3422e04d8f18742385b018d3f5",
          "sha256": "93fd4fa6ef981e5141d9093175ba004716207b140ce6e0c4087d9ffac2a962e7"
        },
        "downloads": -1,
        "filename": "postgresql_orm-0.5.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae7bfc3422e04d8f18742385b018d3f5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12678,
        "upload_time": "2021-01-07T16:01:04",
        "upload_time_iso_8601": "2021-01-07T16:01:04.679509Z",
        "url": "https://files.pythonhosted.org/packages/41/72/4fb796acae7293d9bc3525c3922868322c02a6cc88d1d265010ec6d4c4d5/postgresql_orm-0.5.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "948065380b974b11785b2126ec841454a61dfb637cf3597c6fea522af3a4118a",
          "md5": "332e19319c94671fcba8613ad8132e85",
          "sha256": "ae6ffc2f02caae96d53d5c8b7f933866ab22bad1cd7bb67b798eaf96b0488c02"
        },
        "downloads": -1,
        "filename": "postgresql-orm-0.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "332e19319c94671fcba8613ad8132e85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12471,
        "upload_time": "2021-01-07T16:01:06",
        "upload_time_iso_8601": "2021-01-07T16:01:06.567774Z",
        "url": "https://files.pythonhosted.org/packages/94/80/65380b974b11785b2126ec841454a61dfb637cf3597c6fea522af3a4118a/postgresql-orm-0.5.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6602e1449509031c347cbad4ec77b8c2513b41c5137aec04768866fdf2d372b",
          "md5": "1be62c23a0e2219e9c5b3dccb35a0e0c",
          "sha256": "892eb3fc2687bb4b8e331c0f051f603ac821d3f62cac7aa3d0ab4b32c2cb7af0"
        },
        "downloads": -1,
        "filename": "postgresql_orm-0.5.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1be62c23a0e2219e9c5b3dccb35a0e0c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12682,
        "upload_time": "2021-01-07T16:11:01",
        "upload_time_iso_8601": "2021-01-07T16:11:01.057079Z",
        "url": "https://files.pythonhosted.org/packages/f6/60/2e1449509031c347cbad4ec77b8c2513b41c5137aec04768866fdf2d372b/postgresql_orm-0.5.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "becfa779c6e26c4418ffd51ddddbf3ded7e1a89b72e7c0a5f1fc77c2016076ed",
          "md5": "3fb26d34aa81e32db1cebf18e31f19b4",
          "sha256": "c3b1e308a2f4b2c923f1cbbea0c3e1ffdaf1144033a72be197e2487015e957c6"
        },
        "downloads": -1,
        "filename": "postgresql-orm-0.5.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3fb26d34aa81e32db1cebf18e31f19b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12471,
        "upload_time": "2021-01-07T16:11:02",
        "upload_time_iso_8601": "2021-01-07T16:11:02.923985Z",
        "url": "https://files.pythonhosted.org/packages/be/cf/a779c6e26c4418ffd51ddddbf3ded7e1a89b72e7c0a5f1fc77c2016076ed/postgresql-orm-0.5.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f65da0e47efbf399fa3d8e62ed4928c0f41c562823d36f41cb22f112fb720a9b",
          "md5": "8eae1358653b4eaa646a98ed4501981c",
          "sha256": "a7a09eb31724a0e524266645a338c61e9caf4ac5389c2521de2845ef2c932427"
        },
        "downloads": -1,
        "filename": "postgresql_orm-0.5.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8eae1358653b4eaa646a98ed4501981c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12786,
        "upload_time": "2021-03-25T09:40:47",
        "upload_time_iso_8601": "2021-03-25T09:40:47.787220Z",
        "url": "https://files.pythonhosted.org/packages/f6/5d/a0e47efbf399fa3d8e62ed4928c0f41c562823d36f41cb22f112fb720a9b/postgresql_orm-0.5.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4ec82bf903ab85b0efee73223d98878ff9d99a72dbe8797af36c195b01a2ea6",
          "md5": "ee80c1c2079d5a7aa21a8111923ed7f5",
          "sha256": "cb33bc3de7dbd5f297a40a3eb2ae9af6d478fb53b3f668435306d2d99d075a54"
        },
        "downloads": -1,
        "filename": "postgresql-orm-0.5.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ee80c1c2079d5a7aa21a8111923ed7f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12588,
        "upload_time": "2021-03-25T09:40:49",
        "upload_time_iso_8601": "2021-03-25T09:40:49.484903Z",
        "url": "https://files.pythonhosted.org/packages/a4/ec/82bf903ab85b0efee73223d98878ff9d99a72dbe8797af36c195b01a2ea6/postgresql-orm-0.5.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f65da0e47efbf399fa3d8e62ed4928c0f41c562823d36f41cb22f112fb720a9b",
        "md5": "8eae1358653b4eaa646a98ed4501981c",
        "sha256": "a7a09eb31724a0e524266645a338c61e9caf4ac5389c2521de2845ef2c932427"
      },
      "downloads": -1,
      "filename": "postgresql_orm-0.5.8-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8eae1358653b4eaa646a98ed4501981c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 12786,
      "upload_time": "2021-03-25T09:40:47",
      "upload_time_iso_8601": "2021-03-25T09:40:47.787220Z",
      "url": "https://files.pythonhosted.org/packages/f6/5d/a0e47efbf399fa3d8e62ed4928c0f41c562823d36f41cb22f112fb720a9b/postgresql_orm-0.5.8-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4ec82bf903ab85b0efee73223d98878ff9d99a72dbe8797af36c195b01a2ea6",
        "md5": "ee80c1c2079d5a7aa21a8111923ed7f5",
        "sha256": "cb33bc3de7dbd5f297a40a3eb2ae9af6d478fb53b3f668435306d2d99d075a54"
      },
      "downloads": -1,
      "filename": "postgresql-orm-0.5.8.tar.gz",
      "has_sig": false,
      "md5_digest": "ee80c1c2079d5a7aa21a8111923ed7f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12588,
      "upload_time": "2021-03-25T09:40:49",
      "upload_time_iso_8601": "2021-03-25T09:40:49.484903Z",
      "url": "https://files.pythonhosted.org/packages/a4/ec/82bf903ab85b0efee73223d98878ff9d99a72dbe8797af36c195b01a2ea6/postgresql-orm-0.5.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}