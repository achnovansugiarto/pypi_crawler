{
  "info": {
    "author": "Dave Pearson",
    "author_email": "davep@davep.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Terminals",
      "Typing :: Typed"
    ],
    "description": "# textual-canvas\n\n## Introduction\n\nThis library aims to provide a very simple terminal-based drawing canvas\nwidget for use with [Textual](https://textual.textualize.io/). Initially\ndeveloped for a (also-being-worked-on-right-now) less general project, I'm\nmaking it available on the off-chance anyone else might want to play with it\nnow.\n\nYou might not want to rely on this just yet though; I'm still messing and\nexperimenting.\n\n## Installing\n\nThe package can be installed with `pip` or related tools, for example:\n\n```sh\n$ pip install textual-canvas\n```\n\n## It's early days\n\nThis is a very early release of this code, it's still very much a work in\nprogress. This means things may change and break; it's also sitting atop\nTextual which is, of course, still undergoing rapid development. As much as\npossible I'll try and ensure that it's always working with the latest stable\nrelease of Textual.\n\nAlso, because it's early days... while I love the collaborative aspect of\nFOSS, I'm highly unlikely to be accepting any non-trivial PRs at the moment.\nDeveloping this is a learning exercise for me, it's a hobby project, and\nit's also something to help me further test Textual (disclaimer for those\nwho may not have gathered, I am employed by\n[Textualize](https://www.textualize.io/)).\n\nOn the other hand: I'm *very* open to feedback and suggestions so don't\nhesitate to engage with me in Discussions, or if it's a bug, in Issues. I\ncan't and won't promise that I'll take everything on board (see above about\nhobby project, etc), but helpful input should help make this as useful as\npossible in the longer term.\n\n## The library\n\nThe library provides one very simple widget for use in Textual: `Canvas`.\nThis is a scrollable and focusable widget that can be used to colour\n\"pixels\", acting as a basic building block for drawing other things. The\n\"pixels\" themselves are half a character cell in height, hopefully coming\nout roughly square in most environments.\n\nThe `Canvas` can be imported like this:\n\n```python\nfrom textual_canvas import Canvas\n```\n\nAnd is created by providing a width and height (in its own idea of \"pixels\")\nplus an optional initial background colour (which should be a Textual\n[`Color`](https://textual.textualize.io/api/color/#textual.color.Color)).\n\nIn a Textual `compose` method you might use it something like this:\n\n```python\nyield Canvas( 120, 120, Color( 30, 40, 50 ) )\n```\n\nCurrently there are the following methods available for drawing:\n\n- `set_pixel( self, x: int, y: int, color: Color ) -> Self`\n- `set_pixels( self, locations: Iterable[ tuple[ int, int ] ], color: Color ) -> Self`\n- `draw_line( self, x0: int, y0: int, x1: int, y1: int, color: Color ) -> Self`\n- `draw_rectangle( self, x: int, y: int, width: int, height: int, color: Color ) -> Self`\n\nI'll document all of this better, when I spend more time on it than the 1/2\nhour somewhere between dinner and bedtime.\n\nA quick and dirty example of this being used would be:\n\n```python\nfrom textual.app    import App, ComposeResult\nfrom textual.color  import Color\nfrom textual_canvas import Canvas\n\n##############################################################################\nclass CanvasTestApp( App[ None ] ):\n    \"\"\"The Canvas testing application.\"\"\"\n\n    CSS = \"\"\"\n    Canvas {\n        border: round green;\n        width: 1fr;\n        height: 1fr;\n    }\n    \"\"\"\n\n    def compose( self ) -> ComposeResult:\n        yield Canvas( 120, 120, Color( 30, 40, 50 ) )\n\n    def on_mount( self ) -> None:\n        \"\"\"Set up the display once the DOM is available.\"\"\"\n        canvas = self.query_one( Canvas )\n\n        canvas.draw_line( 60, 40, 90, 80, Color( 128, 128, 128 ) )\n        canvas.draw_line( 60, 40, 30, 80, Color( 128, 128, 128 ) )\n        canvas.draw_line( 30, 80, 90, 80, Color( 128, 128, 128 ) )\n\n        canvas.draw_line( 0, 70, 48, 55, Color( 255, 255, 255 ) )\n\n        for n in range( 52, 59 ):\n            canvas.draw_line( 48, 55, 58, n, Color( 128, 128, 128 ) )\n\n        canvas.draw_line( 70, 52, 119, 57, Color( 255, 0, 0 ) )\n        canvas.draw_line( 71, 53, 119, 58, Color( 255, 165, 0 ) )\n        canvas.draw_line( 72, 54, 119, 59, Color( 255, 255, 0 ) )\n        canvas.draw_line( 72, 55, 119, 60, Color( 0, 255, 0 ) )\n        canvas.draw_line( 73, 56, 119, 61, Color( 0, 0, 255 ) )\n        canvas.draw_line( 74, 57, 119, 62, Color( 75, 0, 130 ) )\n        canvas.draw_line( 75, 58, 119, 63, Color( 143, 0, 255 ) )\n\nif __name__ == \"__main__\":\n    CanvasTestApp().run()\n```\n\nTo see this code in action you, in an environment where the library is\ninstalled, run:\n\n```sh\n$ python -m textual_canvas\n```\n\nYou should see something like this:\n\n![Demo code](https://raw.githubusercontent.com/davep/textual-canvas/main/img/textual-canvas.png)\n\n## TODO\n\nLots. Lots and lots. As mentioned above, there's little tinker project that\nI'm building on top of this, so I'll be using that to see how this gets\nfleshed out.\n\n[//]: # (README.md ends here)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davep/textual-canvas",
    "keywords": "terminal,library,canvas,drawing",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": "Dave Pearson",
    "maintainer_email": "davep@davep.org",
    "name": "textual-canvas",
    "package_url": "https://pypi.org/project/textual-canvas/",
    "platform": null,
    "project_url": "https://pypi.org/project/textual-canvas/",
    "project_urls": {
      "Discussions": "https://github.com/davep/textual-canvas/discussions",
      "Documentation": "https://github.com/davep/textual-canvas/blob/main/README.md",
      "Homepage": "https://github.com/davep/textual-canvas",
      "Issues": "https://github.com/davep/textual-canvas/issues",
      "Source": "https://github.com/davep/textual-canvas"
    },
    "release_url": "https://pypi.org/project/textual-canvas/0.0.1/",
    "requires_dist": [
      "textual (>=0.16.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "A simple Textual canvas widget.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17467850,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8717d5d18e0039c54f29cb73340c73bd0c2fa654ab82e6e6f013773ec940d4a9",
          "md5": "350310fb02a6beeafa5c18429b6114fb",
          "sha256": "4d55a54d73b9c584d61ec40c0ff44c90670c30d503e19c57fbdb3263cd47f51e"
        },
        "downloads": -1,
        "filename": "textual_canvas-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "350310fb02a6beeafa5c18429b6114fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7825,
        "upload_time": "2023-03-27T20:51:07",
        "upload_time_iso_8601": "2023-03-27T20:51:07.372582Z",
        "url": "https://files.pythonhosted.org/packages/87/17/d5d18e0039c54f29cb73340c73bd0c2fa654ab82e6e6f013773ec940d4a9/textual_canvas-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8717d5d18e0039c54f29cb73340c73bd0c2fa654ab82e6e6f013773ec940d4a9",
        "md5": "350310fb02a6beeafa5c18429b6114fb",
        "sha256": "4d55a54d73b9c584d61ec40c0ff44c90670c30d503e19c57fbdb3263cd47f51e"
      },
      "downloads": -1,
      "filename": "textual_canvas-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "350310fb02a6beeafa5c18429b6114fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7825,
      "upload_time": "2023-03-27T20:51:07",
      "upload_time_iso_8601": "2023-03-27T20:51:07.372582Z",
      "url": "https://files.pythonhosted.org/packages/87/17/d5d18e0039c54f29cb73340c73bd0c2fa654ab82e6e6f013773ec940d4a9/textual_canvas-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}