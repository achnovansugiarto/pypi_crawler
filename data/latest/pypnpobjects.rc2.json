{
  "info": {
    "author": "Antarip Chatterjee",
    "author_email": "antarip.chatterjee22@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Hardware :: Hardware Drivers"
    ],
    "description": "# PyPnPObjects\n\n## Table of content\n\n* [Introduction](#introduction)\n* [Version Information](#version-information)\n* [Installation](#installation)\n    * [Install with pip](#install-with-pip)\n    * [Install with git](#install-with-git)\n* [Uninstallation](#uninstallation)\n    * [Unsinstall using pip](#uninstall-using-pip)\n* [Clearing](#clearing)\n* [Platform Supports](#platform-supports)\n* [Dependencies](#dependencies)\n* [Usage](#usage)\n    * [CLI](#cli)\n    * [Python script](#python-script)\n* [API References](#api-references)\n    * [WMIStorePNPObjects(object)](#wmistorepnpobjects(object))\n        * [Constructor](#constructor)\n        * [Representation](#representation)\n        * [def load(self, ...)](#def-load(self,-...)-->-`type`)\n        * [def query(self, ...)](#def-query(self,-...)-->-`WMIInternalPNPObjectProperties`)\n        * [def free(self)](#def-free(self)-->-`NoneType`)\n    * [WMIStorePNPObjectsException(Exception)](#wmistorepnpobjectsexception(exception))\n    * [WMIInternalPNPObjectProperties(object)](#wmiinternalpnpobjectproperties(object))\n* [Development Areas](#development-areas)\n* [License](#license)\n* [Contribution](#contribution)\n\n----\n\n## Introduction ##\n\nThis is a simple python module to get the detail level information about Win32 [WMI](https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-start-page) objects. To know more about [Win32 PnpEntity](https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-pnpentity), click on it.\n\n## Version Information ##\n\nCurrent version of this module is in BETA version ***0.1.9***.\n\n----\n\n## Installation ##\n\nInstalling pypnpobjects is as easy as installing any other python module.\n\n### Install with pip ###\n\n```bash\npip install pypnpobjects\n```\n\n### Install with git ###\n\n```bash\ngit clone https://github.com/antaripchatterjee/PyPnPObjects.git\ncd PyPnPObjects\npython setup.py install\n```\n\n----\n\n## Uninstallation ##\n\nYou can uninstall this module whenever you want, using below method.\n\n### Uninstall using pip ###\n\n```bash\npip uninstall pypnpobjects\n```\n----\n\n## Clearing ##\n\nYou can clear the folders and files created, during last installation using below command.\n\n```bash\npython clear.py\n```\n\n----\n\n## Platform Supports ##\n\nPyPnPObjects is available only for win32 systems. I tested this module with python version 2.7.18 and python 3.5.4+, successfully.\n\n> *P.S.: When I tested this module with python 2, I could not use argument `timeout` of `WMIStorePNPObjects.load` method, and in windows 7, some properties of pnp entity was missing (e.g. `PNPClass`).\n\n----\n\n## Dependencies ##\n\nThere are no such external dependencies, except it uses windows **powershell**.\n\n----\n\n## Usage ##\n\nYou can either use this module as a CLI application or you can also use it in your python script.\n\n### CLI ###\n\nYou can run a simple command as below to test it's functionality.\n\n```bash\nget-pnpobjects -select name -select pnpclass -where pnpclass:audio% -ignore_case -operator like\n```\n\nWhen I executed the above command it gave the below output, it might be different in your system.\n\n```output\nName                    :Microphone (Realtek(R) Audio)\nPNPClass                        :AudioEndpoint\n\nName                    :Speakers (Realtek(R) Audio)\nPNPClass                        :AudioEndpoint\n\nName                    :Stereo Mix (Realtek(R) Audio)\nPNPClass                        :AudioEndpoint\n```\n\nTo get the version, you can use below command.\n\n```bash\nget-pnpobjects -version\n```\n\nYou can also get the metadata about the project by using below command.\n\n```bash\nget-pnpobjects -meta <Meta-Property>\n```\n\nTo know about the available meta properties, use `-show-meta-props`.\n\n```bash\nget-pnpobjects -show-meta-props\n```\n\nYou can use `-h` to know more.\n\n```bash\nget-pnpobjects -h\n```\n\n### Python script ###\n\nJust do copy and paste to test this code.\n\n```python\nfrom pypnpobjects import WMIStorePNPObjects\n\nif __name__ == \"__main__\":\n    with WMIStorePNPObjects() as wmipnp:\n        proc_res = wmipnp.load()\n        if proc_res[0] == 0:\n            for dev in wmipnp.query('*', pnpclass='cameR_', case_sensitive_comparision = False, comparision_operator = 'like'):\n                print('Device %s is %s'%(dev.Name))\n        else:\n            print('Error with code %d : %s'%(proc_res))\n```\n\nFor me the output was as below, since I am only having integrated camera in my computer.\n\n```output\nDevice Name is USB2.0 VGA UVC WebCam\n\n```\n\n----\n\n## API References ##\n\nThe primary class of this module is ***`WMIStorePNPObjects`***, however it also includes some other classes for internal purpose which are ***`WMIStorePNPObjectsException`*** and ***`WMIInternalPNPObjectProperties`***.\n\n### WMIStorePNPObjects(object) ###\n\nThis class contains some public methods and they are *`load`*, *`query`* and *`free`*. This class is also having some implementations of `__enter__` and `__exit__` magic methods which means it supports ***context manager*** functionality as well, so that you do not need to explicitly free and close the context.\n\n#### Constructor ####\n\nThe ***`__init__`*** method takes a single positional argument which expects a value of *`list`* or *`str`* type object.\n\n> *(optional) `str` | `list` | `tuple` **command:*** The default value of this argument is **`[\"Get-WmiObject\", \"Win32_PnPEntity\"]`** but you can  also change the value according to your need. The argument value should be a valid **powershell** command too. \n\nIf you run the below **powershell** command you will get an overall idea about the available properties for different kind of PnP entities.\n\n```powershell\nGet-WmiObject Win32_PnpEntity\n```\n\n#### Representation ####\n\nThis class also implements the `__repr__` magic method which also let us see the **powershell** command, that will be executed after calling the `load` method. You can refer the below code.\n\n```python\nfrom pypnpobjects import WMIStorePNPObjects\n\nif __name__ == \"__main__\":\n    with WMIStorePNPObjects() as wmipnp:\n        print(wmipnp)\n        ...\n        ...\n```\n\nThe above code will generate a output like below.\n\n```output\nWMIStorePNPObjects object at 0x216ffb969b0 <powershell Get-WmiObject Win32_PnPEntity>\n...\n...\n```\n\n#### def load(self, ...) -> `tuple` ####\n\nA very important method from this class is ***`load`***, which does a number of sequential tasks like, it first executes the command if the command is valid, then parses the command result and creates a python *`dict`* and finally stores the result into a **SQLite** database instance. It also takes a number of positional arguments and below you will find some useful information about them.\n\n> *(optional) `str` **db:*** The value for this argument should be either `':memory:'` or `':file:'`. The default value is `':memory:'` and the ***SQLite*** database will be created in memory but not as a physical file and hence this option is making the database volatile. If you choose it as `':file:'`, then a physical **SQLite** file, called `win32_pnpentity.sqlite.db`, will be created in the same working directory and you can also reuse it later in your application. Any value other than `':memory:'` or `':file:'` will be changed to `':memory:'`.\n\n> *(optional) `str` **table:*** The value of this argument refers the table name of the **SQLite** database where all the information about the PnP entities will be stored. The default value is `Win32_PnPEntity`.\n\n> *(optional) `int` **expected_exit_code:*** The default value for this argument is `0` and the **`load`** method returns immediately if the exit code of the command or process is not same as `expected_exit_code`.\n\n> *(optional) `int` **timeout:*** The value of this argument is time in second to find and execute the command or process. The default value is `30`. To study more about this option refer this [link](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait) from [subprocess](https://docs.python.org/3/library/subprocess.html) module. If the time limit exceeds, the `load` method will return immediately with return code as `None` and with a error message. This argument is only available for python 3.\n\nThis method returns an object of `tuple` of length 2. The *0th* element, which is a `int` type object, is the exit code of the command or process and the *1st* element, which is a `str` type object, holds the error message if any error occurred during the execution.\n\n#### def query(self, ...) -> `types.GeneratorType` ####\n\nAnother important public method is `query` which basically queries the required information based on your input to the function from the same **SQLite** database connection. It also takes number arguments as input.\n\n> *(optional) `str` | `int` **\\*select:*** This is a *variable length non-keyword argument*. Each value in this argument either should be a valid property name or a valid property index otherwise it will throw a `WMIStorePNPObjectsException`. If you keep it empty while calling the method, the `query` method itself will fetch all the properties for an entity from the same **SQLite** database instance.\n\n> *(optional) `str` | `int` | `float` | `bool` **\\*\\*where:*** This argument is a *variable length keyword argument*, which takes any valid property id of an entity as a keyword and the value of the keyword is used as a where condition during the query execution. The value can also be a SQL pattern and this can be matched with *SQL* operator `LIKE`.\n\n> *(optional) `str` **comparision_operator:*** This argument should be either `'like'` or `'equal'` and the default value is `'equal'` which means the `query` method will do a equality check while querying the entities but if we specify `'like'`, the method will use *SQL* operator `LIKE` to match the pattern instead. Any value other than `'like'` or `'equal'` will be changed to `'equal'`.\n\n> *(optional) `bool` | `int` | `str` **case_sensitive_comparision:*** This argument should receive a python `bool` object i.e. either it should be `True` or `False` but if we specify any non-zero values, it would be considered as `True` otherwise `False`. Also we can pass `str` representation of `True` or `False`. The default value is `True` which means, the conditions will be checked as case sensitively otherwise it will be checked as case insensitively.\n\nThis method returns a generator object and each element of it is a object of `WMIInternalPNPObjectProperties`, which holds the data about the properties of a PnP entity, and you can see them either by using *key-value* mechanism \\(e.g dev\\['Name'\\]\\) or by using `.` operator \\(e.g. dev.Name\\) and this keys are case insenitive which means `dev.name == dev.Name` will give you `True` result and every property returns a tuple of actual property id and it's value i.e. `dev.name` will return `('Name', '<Property Value>')`.\n\n#### def free(self) -> `NoneType` ####\n\nThis method closes the connection of the same **SQLite** database instance and does not return any value, however if you use `with` context manager, you do not need to explicitly call this method.\n\n### WMIStorePNPObjectsException(Exception) ###\n\nThis class is a exception type and it is used internally to raise different concerns during the execution.\n\n### WMIInternalPNPObjectProperties(object) ###\n\nEvery element of the generator object, returned by `WMIStorePNPObjects.query` method, is a object of `WMIInternalPNPObjectProperties` class. This class is having some ground level implementations of `__contains__`, `__getattr__`,  `__getitem__`, `__iter__` and `__len__` magic methods, in order to provide some `dict` like functionalities however this class is inherited from `object` class only.\n\n----\n\n## Development Areas ##\n\nI was working in a project which had some requirements and I could not figure out the solutions for them, so I have made this python module, however I have more plans to implement in it and will update them on a regular basis. Below are some points, which I am planning to implement.\n\n* I will make a similar python module for `*NIX` based system to make it cross-platform.\n* I will also make this module compatible for any `WINDOWS` system which does not have **powershell**.\n\n----\n\n## License ##\n\nWith the power of opensource project, this module is licensed with [MIT License](https://github.com/antaripchatterjee/pypnpobjects/LICENSE) which let you feel free to do any thing that comes under [MIT License](https://opensource.org/licenses/MIT).\n\n----\n\n## Contribution ##\n\nPull requests are always awesome and you are free to contribute anytime, but please make sure to raise a ticket before doing any changes.\n\n----\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antaripchatterjee/PyPnPObjects",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyPnPObjects",
    "package_url": "https://pypi.org/project/PyPnPObjects/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyPnPObjects/",
    "project_urls": {
      "Homepage": "https://github.com/antaripchatterjee/PyPnPObjects"
    },
    "release_url": "https://pypi.org/project/PyPnPObjects/0.1.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": " This is a simple python module to get the detail level information about Win32 WMI objects. Current Version of the module is 0.1.9 This module has been compiled with Python - 3.7.2",
    "version": "0.1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8343367,
  "releases": {
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87557ede80e412a57126c31efddedf775a3b385867c0b5d9cca2ded85656b54e",
          "md5": "df8f1a440cfe6aff03f002912dd91ab9",
          "sha256": "18ee24a50200acdce326809a33924549f4f6c83595a31bbaa9bc9c9e9869c405"
        },
        "downloads": -1,
        "filename": "PyPnPObjects-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df8f1a440cfe6aff03f002912dd91ab9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13363,
        "upload_time": "2020-10-05T15:42:46",
        "upload_time_iso_8601": "2020-10-05T15:42:46.078891Z",
        "url": "https://files.pythonhosted.org/packages/87/55/7ede80e412a57126c31efddedf775a3b385867c0b5d9cca2ded85656b54e/PyPnPObjects-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0be18ef72944cd41a55a6d9b942c7603e0ae8e089f348ffb12728a09fdfd8d0b",
          "md5": "6d202f1b9d48eced61d7624fdaee4b52",
          "sha256": "036e5584506a1a667689dfdfda21f7d3ae3828147af7fb897033ce813be6067b"
        },
        "downloads": -1,
        "filename": "PyPnPObjects-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6d202f1b9d48eced61d7624fdaee4b52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12911,
        "upload_time": "2020-10-05T15:42:49",
        "upload_time_iso_8601": "2020-10-05T15:42:49.018273Z",
        "url": "https://files.pythonhosted.org/packages/0b/e1/8ef72944cd41a55a6d9b942c7603e0ae8e089f348ffb12728a09fdfd8d0b/PyPnPObjects-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9fdd39a83b80e504456e56d8726ee46c8cef336b2b29a37d64cf4e4c9d3d3d1",
          "md5": "59a9833d30d685272bc5dd06352691d1",
          "sha256": "073ab16d19c834a7ab3422ea0f52323411d4e64ed6ec867793ecdfba3f922e4f"
        },
        "downloads": -1,
        "filename": "PyPnPObjects-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59a9833d30d685272bc5dd06352691d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13387,
        "upload_time": "2020-10-05T16:41:09",
        "upload_time_iso_8601": "2020-10-05T16:41:09.888885Z",
        "url": "https://files.pythonhosted.org/packages/d9/fd/d39a83b80e504456e56d8726ee46c8cef336b2b29a37d64cf4e4c9d3d3d1/PyPnPObjects-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b14c9064cbd26057164dade4e8c23ef288e3bea86e51bd45a4bf1a09b65013c0",
          "md5": "705b7e77dd43c9c25ecf5d63c088bf09",
          "sha256": "950321f4943738cc8176ce50ec74c2e8f699ee14c36d1e83715e4d274bed0fba"
        },
        "downloads": -1,
        "filename": "PyPnPObjects-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "705b7e77dd43c9c25ecf5d63c088bf09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12922,
        "upload_time": "2020-10-05T16:41:13",
        "upload_time_iso_8601": "2020-10-05T16:41:13.890419Z",
        "url": "https://files.pythonhosted.org/packages/b1/4c/9064cbd26057164dade4e8c23ef288e3bea86e51bd45a4bf1a09b65013c0/PyPnPObjects-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9fdd39a83b80e504456e56d8726ee46c8cef336b2b29a37d64cf4e4c9d3d3d1",
        "md5": "59a9833d30d685272bc5dd06352691d1",
        "sha256": "073ab16d19c834a7ab3422ea0f52323411d4e64ed6ec867793ecdfba3f922e4f"
      },
      "downloads": -1,
      "filename": "PyPnPObjects-0.1.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "59a9833d30d685272bc5dd06352691d1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13387,
      "upload_time": "2020-10-05T16:41:09",
      "upload_time_iso_8601": "2020-10-05T16:41:09.888885Z",
      "url": "https://files.pythonhosted.org/packages/d9/fd/d39a83b80e504456e56d8726ee46c8cef336b2b29a37d64cf4e4c9d3d3d1/PyPnPObjects-0.1.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b14c9064cbd26057164dade4e8c23ef288e3bea86e51bd45a4bf1a09b65013c0",
        "md5": "705b7e77dd43c9c25ecf5d63c088bf09",
        "sha256": "950321f4943738cc8176ce50ec74c2e8f699ee14c36d1e83715e4d274bed0fba"
      },
      "downloads": -1,
      "filename": "PyPnPObjects-0.1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "705b7e77dd43c9c25ecf5d63c088bf09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12922,
      "upload_time": "2020-10-05T16:41:13",
      "upload_time_iso_8601": "2020-10-05T16:41:13.890419Z",
      "url": "https://files.pythonhosted.org/packages/b1/4c/9064cbd26057164dade4e8c23ef288e3bea86e51bd45a4bf1a09b65013c0/PyPnPObjects-0.1.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}