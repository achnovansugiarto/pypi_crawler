{
  "info": {
    "author": "Bartosz Wójcik",
    "author_email": "support@pelock.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# StringEncrypt — String & File Encryption for Python Developers\n\nStringEncrypt allows you to **encrypt strings and files** using\nrandomly generated algorithm, generating a unique decryption code\n(so-called *polymorphic code*) each time in the selected programming\nlanguage.\n\nhttps://www.stringencrypt.com\n\n## Plain text Python string\n```python\ncute_wabbit = \"A little girl goes into a pet show and asks for a wabbit... http...\"\n```\n\n## Encrypted string in Python source code format\n\n```python\n# encrypted with https://www.stringencrypt.com (v1.3.0) [Python]\n# cute_wabbit = \"A little girl goes into a pet show and asks for a wabbit... http...\"\ncute_wabbit = [ 0x1005, 0x4004, 0x4005, 0x5006, 0x4003, 0x0004, 0x4002, 0x9001,\n                0x0009, 0x300E, 0x100F, 0xE00F, 0xC00A, 0x400D, 0xF00C, 0x300B,\n                0x5013, 0x7013, 0x8015, 0x5012, 0xE018, 0x0018, 0x7016, 0xC011,\n                0x1019, 0x401E, 0x801C, 0x901C, 0x401D, 0x4019, 0xB01F, 0x401F,\n                0xF02F, 0x302F, 0x8029, 0xD02E, 0xE02C, 0x002B, 0x802E, 0xD029,\n                0x3026, 0xF026, 0xB028, 0xC024, 0x6022, 0xB021, 0xA023, 0xC027,\n                0x103B, 0x4040, 0xF03A, 0xD03A, 0x2040, 0x603F, 0x103E, 0x803E,\n                0xE035, 0xA036, 0x6037, 0xC038, 0x8036, 0x0036, 0xC037, 0xC038,\n                0x3058, 0xE053, 0x7051, 0x3052, 0x7053, 0x3054, 0xF051, 0x2055,\n                0x005E, 0xD05D, 0xC060, 0x4060, 0xF05A, 0xA059, 0x6060, 0x305B,\n                0x2044, 0x3044, 0x7045, 0x8042, 0xF048, 0x7047, 0x7042, 0x4045,\n                0x504A, 0x904A, 0x704B, 0xE04B, 0xF04A, 0x7049, 0xB050, 0x9050,\n                0x4080, 0x1080, 0x5079, 0xB07D, 0x107C, 0x607B, 0xA07A, 0x5079,\n                0x4076 ]\n\nfor wEzdt in range(105):\n  zWqET = cute_wabbit[wEzdt]\n  zWqET -= 1\n  zWqET ^= wEzdt\n  zWqET = (((zWqET & 0xFFFF) >> 14) | (zWqET << 2)) & 0xFFFF\n  zWqET ^= wEzdt\n  zWqET = (((zWqET & 0xFFFF) >> 14) | (zWqET << 2)) & 0xFFFF\n  cute_wabbit[wEzdt] = zWqET\n\ncute_wabbit = ''.join(chr(zWqET & 0xFFFF) for zWqET in cute_wabbit)\n\ndel wEzdt, zWqET\n\nprint(cute_wabbit)\n```\n\n\n## The problem with plain text strings\n\nI'm a developer, and I love programming. I'm also an avid [reverse engineer](https://www.pelock.com/services).\nI perform a wide array of software analysis in my daily work and sometimes\nI find things in compiled applications that **shouldn't be exposed** to the\nfirst person with a simple hex-editor in hand.\n\n### What can be found in application binaries?\n\nEverything! I've listed a few examples of the things I found below.\nSometimes these things shouldn't even be included in applications\nat all (they are there due to poor design choices or rushed work),\nbut some are just cannot be avoided.\n\n* Database passwords\n* FTP passwords\n* Login credentials\n* Encryption & decryption keys\n* Custom code scripts in readable text\n* Complex SQL queries in plain text\n* Hidden website endpoints\n* BitCoin wallets locations\n* ...and many more\n\nAsk yourself, did you ever put some sensitive content in your software that you later regret?\n\n### Why should I care?\n\nIf any of these things were to fall into the **wrong hands**, they could be\nused to compromise your software or your infrastructure.\n\n![You don't want this to happen to your software.](https://www.pelock.com/img/en/products/string-encrypt/database-password-plain-text.png)\n\nTake for example database passwords. A competitor could use them\nto view your database structure or dump all of its contents. You don't want to lose all your hard work because someone with a simple hex-editor can discover your password in plain text.\n\n## The solution — String Encrypt\n\nI've decided to create a simple service called String Encrypt for developers, offering fast string & file encryption without the need to write custom encryption tools over and over again because I did that many times.\n\nString Encrypt can help you hide the things that shouldn't be visible at first glance to anyone with a hex-editor.\n\n![StringEncrypt main window](https://www.stringencrypt.com/images/stringencrypt.png)\n\n### Say hello to polymorphic encryption!\n\nForget about simple `xor` encryption! StringEncrypt comes with a unique encryption engine.\n\nIt's a **polymorphic encryption engine**, similar to the encryption methods used by the software protection solutions and advanced computer viruses.\n\n### How it works?\n\nLet me explain how the polymorphic encryption process works.\n\n1. A random set of encryption commands is selected (`xor`, `addition`, `subtraction`, `bit rotations`, `bit shifts`, `logical negation` etc.).\n2. A random set of helper `encryption keys` is generated.\n3. Every byte of the input string is encrypted with every encryption command in the random set.\n4. The decryption code in the selected programming language is generated with a reverse set of encryption commands.\n\nMore about polymorphic engines:\n\n* How to build a polymorphic engine in C++ - https://www.pelock.com/articles/polymorphic-encryption-algorithms\n* Polymorphic engine in 32-bit MASM assembler - https://github.com/PELock/Simple-Polymorphic-Engine-SPE32\n* Poly Polymorphic Engine - https://www.pelock.com/products/poly-polymorphic-engine\n\n### What does it mean?\n\nThe encrypted content is **different** every time you apply StringEncrypt encryption to it.\n\nThe algorithm is always **unique**, the encryption keys are always **randomly selected** and the decryption code is also **unique** for every time you use our encryption.\n\n## StringEncrypt features\n\n* Out of box support for `UNICODE` (WideChar type in `C/C++` languages), `UTF-8` (multibyte) & `ANSI` (single byte) strings encodings\n* Configurable minimum & maximum number of encryption commands\n* Different ways to store the encrypted string (as a `global` or `local` variable if the selected programming language supports it)\n* Wide array of supported programming languages\n* You can automate the encryption process in your builds using our `WebAPI` interface (`PHP` and `Python` bindings)\n\n## Available editions\n\nStringEncrypt can be used:\n\n* Directly on its website - https://www.stringencrypt.com/\n* You can download standalone Windows client - https://www.stringencrypt.com/download/\n* You can use it via WebAPI interface (from `PHP` and `Python`) - https://www.stringencrypt.com/api/\n* Visual Studio Code extension - https://marketplace.visualstudio.com/items?itemName=PELock.stringencrypt\n\n## How to use StringEncrypt from Python 3 code?\n\nThe preferred way of StringEncrypt module installation is via [pip](https://pypi.org/project/pip/).\n\nRun:\n\n```\npip install stringencrypt\n```\n\nor \n\n```\npython3 -m pip install stringencrypt\n```\n\n\nAnd then add this import to your source code:\n\n```python\nfrom stringencrypt import StringEncrypt\n```\n\nThe installation package is available at https://pypi.org/project/stringencrypt/\n\n### Basic string encryption usage example (with default options)\n\n```python\n#!/usr/bin/env python\n\n###############################################################################\n#\n# String Encrypt WebApi interface usage example.\n#\n# In this example we will encrypt sample string with default options.\n#\n# Version        : v1.0\n# Language       : Python\n# Author         : Bartosz Wójcik\n# Project page   : https://www.stringencrypt.com\n# Web page       : https://www.pelock.com\n#\n###############################################################################\n\n#\n# include StringEncrypt module\n#\nfrom stringencrypt import StringEncrypt\n\n#\n# if you don't want to use Python module, you can import it directly from the file\n#\n#from stringencrypt.stringencrypt import StringEncrypt\n\n#\n# create StringEncrypt class instance (we are using our activation code)\n#\nmyStringEncrypt = StringEncrypt(\"ABCD-ABCD-ABCD-ABCD\")\n\n#\n# encrypt a string using all the default options\n#\nresult = myStringEncrypt.encrypt_string(\"Hello, world!\", \"label_encrypted\")\n\n#\n# result[] array holds the encryption results as well as other information\n#\n# result[\"error\"] (int) - error code\n# result[\"error_string\"] (string) - error code as a string\n# result[\"source\"] (string) - decryptor source code\n# result[\"expired\"] (boolean) - expiration flag\n# result[\"credits_left\"] (int) - number of credits left\n# result[\"credits_total\"] (int) - initial number of credits\n\nif result and \"error\" in result:\n\n    # display source code of the decryption code\n    if result[\"error\"] == StringEncrypt.ErrorCodes.ERROR_SUCCESS:\n        print(result[\"source\"])\n    else:\n        print(f'An error occurred, error code: {result[\"error\"]} ({result[\"error_string\"]})')\n\nelse:\n    print(\"Something unexpected happen while trying to encrypt the string.\")\n```\n\n#### Return values:\n\n* ```result[\"error\"] (int)``` - error code\n* ```result[\"source\"] (string)``` - decryptor source code\n* ```result[\"expired\"] (boolean)``` - expiration flag\n* ```result[\"credits_left\"] (int)``` - number of credits left\n* ```result[\"credits_total\"] (int)``` - initial number of credits\n\n#### Error codes:\n\n* ```ERROR_SUCCESS (0)``` - everything went fine\n* ```ERROR_EMPTY_LABEL (1)``` - label parameter is empty\n* ```ERROR_LENGTH_LABEL (2)``` - label length is too long\n* ```ERROR_EMPTY_STRING (3)``` - input string is empty\n* ```ERROR_EMPTY_BYTES (4)``` - input file bytes array is empty\n* ```ERROR_EMPTY_INPUT (5)``` - input source (either string or file) is missing\n* ```ERROR_LENGTH_STRING (6)``` - string or bytes length is too long\n* ```ERROR_INVALID_LANG (7)``` - programming language not supported\n* ```ERROR_INVALID_LOCALE (8)``` - language locale is not supported\n* ```ERROR_CMD_MIN (9)``` - invalid number of minimum encryption commands\n* ```ERROR_CMD_MAX (10)``` - invalid number of maximum encryption commands\n* ```ERROR_DEMO (100)``` - you need a valid code to use full version features\n\n### Custom string encryption for other programming languages\n\n```python\n#!/usr/bin/env python\n\n###############################################################################\n#\n# String Encrypt WebApi interface usage example.\n#\n# In this example we will encrypt sample strings with custom options.\n#\n# Version        : v1.0\n# Language       : Python\n# Author         : Bartosz Wójcik\n# Project page   : https://www.stringencrypt.com\n# Web page       : https://www.pelock.com\n#\n###############################################################################\n\n#\n# include StringEncrypt module\n#\nfrom stringencrypt import StringEncrypt\n\n#\n# if you don't want to use Python module, you can import it directly from the file\n#\n#from stringencrypt.stringencrypt import StringEncrypt\n\n\ndef print_results(result):\n\n    #\n    # result[] array holds the encryption results as well as other information\n    #\n    # result[\"error\"] (int) - error code\n    # result[\"error_string\"] (string) - error code as a string\n    # result[\"source\"] (string) - decryptor source code\n    # result[\"expired\"] (boolean) - expiration flag\n    # result[\"credits_left\"] (int) - number of credits left\n    # result[\"credits_total\"] (int) - initial number of credits\n\n    if result and \"error\" in result:\n\n        # display source code of the decryption code\n        if result[\"error\"] == StringEncrypt.ErrorCodes.ERROR_SUCCESS:\n            print(result[\"source\"])\n        else:\n            print(f'An error occurred, error code: {result[\"error\"]} ({result[\"error_string\"]})')\n\n    else:\n        print(\"Something unexpected happen while trying to encrypt the string.\")\n\n\n#\n# create StringEncrypt class instance (we are using our activation code)\n#\nmyStringEncrypt = StringEncrypt(\"ABCD-ABCD-ABCD-ABCD\")\n\n#\n# encrypt a string using all the default options\n#\nresult = myStringEncrypt.encrypt_string(\"Hello\", \"label\")\nprint_results(result)\n\n#\n# lets change the output programming language into C++\n#\nmyStringEncrypt.outputProgrammingLanguage = StringEncrypt.OutputProgrammingLanguages.LANG_CPP\n\nresult = myStringEncrypt.encrypt_string(\"C++\", \"wszLbl\")\nprint_results(result)\n\n#\n# change the encoding of the string to ANSI\n#\nmyStringEncrypt.useUnicode = False\n\nresult = myStringEncrypt.encrypt_string(\"ANSI!\", \"szLbl\")\nprint_results(result)\n\n#\n# change to JavaScript language output and see the difference\n# between local variable encoding and global variable encoding\n#\nmyStringEncrypt.useUnicode = True\nmyStringEncrypt.outputProgrammingLanguage = StringEncrypt.OutputProgrammingLanguages.LANG_JS\nmyStringEncrypt.declareAsLocalVariable = True\n\nresult = myStringEncrypt.encrypt_string(\"Local\", \"local\")\nprint_results(result)\n\n#\n# switch to global variable encoding (if possible for the programming language)\n#\nmyStringEncrypt.declareAsLocalVariable = False\n\nresult = myStringEncrypt.encrypt_string(\"Global\", \"global\")\nprint_results(result)\n```\n\n#### Return values:\n\n* ```result[\"error\"] (int)``` - error code\n* ```result[\"source\"] (string)``` - decryptor source code\n* ```result[\"expired\"] (boolean)``` - expiration flag\n* ```result[\"credits_left\"] (int)``` - number of credits left\n* ```result[\"credits_total\"] (int)``` - initial number of credits\n\n#### Error codes:\n\n* ```ERROR_SUCCESS (0)``` - everything went fine\n* ```ERROR_EMPTY_LABEL (1)``` - label parameter is empty\n* ```ERROR_LENGTH_LABEL (2)``` - label length is too long\n* ```ERROR_EMPTY_STRING (3)``` - input string is empty\n* ```ERROR_EMPTY_BYTES (4)``` - input file bytes array is empty\n* ```ERROR_EMPTY_INPUT (5)``` - input source (either string or file) is missing\n* ```ERROR_LENGTH_STRING (6)``` - string or bytes length is too long\n* ```ERROR_INVALID_LANG (7)``` - programming language not supported\n* ```ERROR_INVALID_LOCALE (8)``` - language locale is not supported\n* ```ERROR_CMD_MIN (9)``` - invalid number of minimum encryption commands\n* ```ERROR_CMD_MAX (10)``` - invalid number of maximum encryption commands\n* ```ERROR_DEMO (100)``` - you need a valid code to use full version features\n\n\n### Check the status of the activation code and show current limitations\n\nThis example shows how to get information about the current activation code and its features.\n\n```python\n#!/usr/bin/env python\n\n###############################################################################\n#\n# StringEncrypt WebApi interface usage example.\n#\n# In this example we will verify our activation code status.\n#\n# Version        : v1.0\n# Language       : Python\n# Author         : Bartosz Wójcik\n# Project page   : https://www.stringencrypt.com\n# Web page       : https://www.pelock.com\n#\n###############################################################################\n\n#\n# include StringEncrypt module\n#\nfrom stringencrypt import StringEncrypt\n\n#\n# if you don't want to use Python module, you can import it directly from the file\n#\n#from stringencrypt.stringencrypt import StringEncrypt\n\n#\n# create StringEncrypt class instance (we are using our activation code)\n#\nmyStringEncrypt = StringEncrypt(\"ABCD-ABCD-ABCD-ABCD\")\n\n#\n# login to the service\n#\nresult = myStringEncrypt.is_demo()\n\n#\n# result[] array holds the information about the license\n#\n# result[\"demo\"] (boolean) - demo mode flag\n# result[\"label_limit\"] (int) - label limit length\n# result[\"string_limit\"] (int) - string limit length\n# result[\"bytes_limit\"] (int) - bytes/file limit length\n# result[\"credits_left\"] (int) - number of credits left\n# result[\"credits_total\"] (int) - initial number of credits\n# result[\"cmd_min\"] (int) - minimum number of encryption commands\n# result[\"cmd_max\"] (int) - maximum number of encryption commands\n#\nif result:\n\n   print(f'Demo version status - {\"True\" if result[\"demo\"] else \"False\"}')\n\n   print(f'Label length limit - {result[\"label_limit\"]}')\n   print(f'String length limit - {result[\"string_limit\"]}')\n\n   print(f'File bytes limit - {result[\"bytes_limit\"]}')\n\n   print(f'Usage credits left - {result[\"credits_left\"]}')\n   print(f'Total usage credits - {result[\"credits_total\"]}')\n\n   print(f'Min. number of encryption commands - {result[\"cmd_min\"]}')\n   print(f'Max. number of encryption commands - {result[\"cmd_max\"]}')\n\nelse:\n   print(\"Something unexpected happen while trying to login to the service.\")\n```\n\n#### Return values:\n\n* ```$result[\"demo\"] (boolean)``` - demo mode flag\n* ```$result[\"label_limit\"] (int)``` - label limit length\n* ```$result[\"string_limit\"] (int)``` - string/file limit length\n* ```$result[\"credits_left\"] (int)``` - number of credits left\n* ```$result[\"credits_total\"] (int)``` - initial number of credits\n* ```$result[\"cmd_min\"] (int)``` - minimum number of encryption commands\n* ```$result[\"cmd_max\"] (int)``` - maximum number of encryption commands\n\n#### Error codes\n* none\n\n## Supported programming languages\n\nStringEncrypt engine supports code generation for the following programming languages:\n\n* [C & C++](https://www.stringencrypt.com/c-cpp-encryption/)\n* [C# (C Sharp for .NET)](https://www.stringencrypt.com/c-sharp-encryption/)\n* [Visual Basic .NET (VB.NET)](https://www.stringencrypt.com/visual-basic-net-vb-net-encryption/)\n* [Delphi / Pascal](https://www.stringencrypt.com/delphi-pascal-encryption/)\n* [Java](https://www.stringencrypt.com/java-encryption/)\n* [JavaScript](https://www.stringencrypt.com/javascript-encryption/)\n* [Python](https://www.stringencrypt.com/python-encryption/)\n* [Ruby](https://www.stringencrypt.com/ruby-encryption/)\n* [AutoIt](https://www.stringencrypt.com/autoit-encryption/)\n* [Powershell](https://www.stringencrypt.com/powershell-encryption/)\n* [Haskell](https://www.stringencrypt.com/haskell-encryption/)\n* [MASM assembler](https://www.stringencrypt.com/masm-encryption/)\n* [FASM assembler](https://www.stringencrypt.com/fasm-encryption/)\n\nSome examples of generated source code for supported programming languages:\n\n### C/C++ encryption (UNICODE example)\n```cpp\n// encrypted with https://www.stringencrypt.com (v1.3.0) [C/C++]\n// wszLabel = \"C/C++ String Encryption\"\nwchar_t wszLabel[24] = { 0x5ADA, 0x6C21, 0x5A24, 0x6DEF, 0x6DFE, 0x74C5, 0x5240, 0x428B,\n                         0x4382, 0x4F69, 0x4CDC, 0x4827, 0x73A6, 0x598D, 0x4CF8, 0x4A43,\n                         0x40AA, 0x3FB1, 0x4D34, 0x42DF, 0x474E, 0x42D5, 0x4C50, 0x8514 };\n\nfor (unsigned int JTIif = 0, ktTcs = 0; JTIif < 24; JTIif++)\n{\n        ktTcs = wszLabel[JTIif];\n        ktTcs ^= JTIif;\n        ktTcs ++;\n        ktTcs += JTIif;\n        ktTcs ^= JTIif;\n        ktTcs = (((ktTcs & 0xFFFF) >> 3) | (ktTcs << 13)) & 0xFFFF;\n        ktTcs = ~ktTcs;\n        ktTcs += JTIif;\n        ktTcs = (((ktTcs & 0xFFFF) >> 1) | (ktTcs << 15)) & 0xFFFF;\n        ktTcs = ~ktTcs;\n        ktTcs += JTIif;\n        ktTcs ^= 0xB7B5;\n        ktTcs += JTIif;\n        ktTcs ^= JTIif;\n        ktTcs -= JTIif;\n        ktTcs = ((ktTcs << 13) | ( (ktTcs & 0xFFFF) >> 3)) & 0xFFFF;\n        wszLabel[JTIif] = ktTcs;\n}\n\nwprintf(wszLabel);\n```\n\n### C# Sharp encryption (UNICODE example)\n\n```csharp\n// encrypted with https://www.stringencrypt.com (v1.3.0) [C#]\n// superSecretString = \"Easy encryption in C#\"\nString superSecretString = \"\\u6B56\\uA14A\\u834B\\u954C\\uD95A\\uB14E\\u814F\\u595D\" +\n                           \"\\u9551\\u8152\\u9553\\uBF54\\u5B62\\u9556\\u9157\\u2F65\" +\n                           \"\\u5366\\u9F5A\\uC568\\u0169\\uFF6A\";\n\nfor (int XBasD = 0, Dbzej = 0; XBasD < 21; XBasD++)\n{\n        Dbzej = superSecretString[XBasD];\n        Dbzej -= XBasD;\n        Dbzej = ((Dbzej << 8) | ( (Dbzej & 0xFFFF) >> 8)) & 0xFFFF;\n        Dbzej ^= 0xF9A1;\n        Dbzej = (((Dbzej & 0xFFFF) >> 1) | (Dbzej << 15)) & 0xFFFF;\n        Dbzej -= 0xA3CC;\n        Dbzej ^= XBasD;\n        Dbzej += 0x4C2C;\n        superSecretString = superSecretString.Substring(0, XBasD) + (char)(Dbzej & 0xFFFF) + superSecretString.Substring(XBasD + 1);\n}\n\nMessageBox.Show(superSecretString);\n```\n\n## Visual Basic .NET aka VB.NET encryption (UNICODE EXAMPLE)\n\n```vbnet\n' encrypted with https://www.stringencrypt.com (v1.3.0) [Visual Basic .NET]\n' EncryptedString = \"Visual Basic .NET string encryption\"\nDim epTlz() As Integer = { &H8ED9, &H3BD9, &HF1D8, &HAFD8, &H63D8, &H38D8, &H44D8, &HC2D7,\n                           &H85D7, &H33D7, &HFDD6, &HA3D6, &HC4D6, &H76D6, &H16D6, &HC1D5,\n                           &H90D5, &H84D5, &HF1D4, &HB0D4, &H76D4, &H3FD4, &HFAD3, &HBDD3,\n                           &HC4D3, &H21D3, &HFAD2, &HC7D2, &H76D2, &H2DD2, &HF4D1, &HB0D1,\n                           &H63D1, &H35D1, &HF6D0 }\nDim EncryptedString As String\nDim BePuQ As Integer\n\nDim blvjn As Integer\nFor blvjn = 0 To 34\n  BePuQ = epTlz(blvjn)\n  BePuQ -= 1\n  BePuQ = (((BePuQ And &HFFFF) >> 13) Or (BePuQ << 3)) And &HFFFF\n  BePuQ += blvjn\n  BePuQ -= &HF74C\n  BePuQ += blvjn\n  BePuQ -= &H2E7B\n  BePuQ = (((BePuQ And &HFFFF) >> 8) Or (BePuQ << 8)) And &HFFFF\n  BePuQ = Not BePuQ\n  BePuQ = BePuQ Xor blvjn\n  BePuQ += 1\n  BePuQ += blvjn\n  BePuQ = ((BePuQ << 13) Or ( (BePuQ And &HFFFF) >> 3)) And &HFFFF\n  EncryptedString = EncryptedString + ChrW(BePuQ And &HFFFF)\nNext blvjn\n\nMessageBox.Show(EncryptedString)\n```\n\n## Delphi & Pascal encryption (UNICODE example)\n\n```delphi\n// encrypted with https://www.stringencrypt.com (v1.3.0) [Delphi / Pascal]\nvar\n  // mySecret = \"Delphi is awesome!\"\n  mySecret: array[0..19] of WideChar;\n  EPmwd: Integer;\n  ZHnps: Integer;\n\nbegin\n\n  mySecret[16] := WideChar($C22E); mySecret[5] := WideChar($C1FA);\n  mySecret[7] := WideChar($C206); mySecret[8] := WideChar($C208);\n  mySecret[10] := WideChar($C1FA); mySecret[4] := WideChar($C1FB);\n  mySecret[9] := WideChar($C1AD); mySecret[17] := WideChar($C1EA);\n  mySecret[2] := WideChar($C1FB); mySecret[11] := WideChar($C1BC);\n  mySecret[3] := WideChar($C1FD); mySecret[6] := WideChar($C1BF);\n  mySecret[15] := WideChar($C202); mySecret[0] := WideChar($C18F);\n  mySecret[1] := WideChar($C1EE); mySecret[12] := WideChar($C206);\n  mySecret[18] := WideChar($C28F); mySecret[14] := WideChar($C200);\n  mySecret[13] := WideChar($C1B8);\n\n  for ZHnps := 0 to 19 do\n  begin\n    EPmwd := Ord(mySecret[ZHnps]);\n    EPmwd := EPmwd - ZHnps;\n    EPmwd := EPmwd - $01BE;\n    EPmwd := not EPmwd;\n    EPmwd := EPmwd + $2D7A;\n    EPmwd := EPmwd - ZHnps;\n    EPmwd := EPmwd xor ZHnps;\n    EPmwd := EPmwd + $004B;\n    EPmwd := EPmwd xor ZHnps;\n    EPmwd := EPmwd + ZHnps;\n    Inc(EPmwd);\n    EPmwd := EPmwd xor $EB5C;\n    EPmwd := EPmwd + $799C;\n    EPmwd := EPmwd xor ZHnps;\n    mySecret[ZHnps] := WideChar(EPmwd);\n  end;\n\n  ShowMessage(mySecret);\n```\n\n## Java encryption (UNICODE example)\n\n```java\n// encrypted with https://www.stringencrypt.com (v1.3.0) [Java]\n// myJavaPassword = \"Very secret password! QWERTY\"\nString myJavaPassword = \"\";\n\nint JbeMY[] = { 0x0434, 0x842C, 0x0426, 0x8422, 0x03CD, 0x8423, 0x842C, 0x842B,\n                0x0416, 0x843C, 0x0413, 0x03DD, 0x0415, 0x843E, 0x8413, 0x8413,\n                0x8421, 0x8425, 0x0426, 0x040B, 0x83AE, 0x03AD, 0x8436, 0x8431,\n                0x83CC, 0x0406, 0x0403, 0x8402 };\n\nfor (int zuLRG = 0, tnYzy = 0; zuLRG < 28; zuLRG++)\n{\n        tnYzy = JbeMY[zuLRG];\n        tnYzy --;\n        tnYzy ^= zuLRG;\n        tnYzy += 0x99C8;\n        tnYzy ^= zuLRG;\n        tnYzy ^= 0x95C1;\n        tnYzy = (((tnYzy & 0xFFFF) >> 15) | (tnYzy << 1)) & 0xFFFF;\n        tnYzy --;\n        tnYzy ^= 0xFFFF;\n        tnYzy += 0x10CA;\n        myJavaPassword = myJavaPassword + (char)(tnYzy & 0xFFFF);\n}\n\nSystem.out.println(myJavaPassword);\n```\n\n### JavaScript encryption (ANSI)\n\n```js\n<script type=\"text/javascript\">\n// encrypted with https://www.stringencrypt.com (v1.3.0) [JavaScript]\n// hiddenJavaScriptString = \"How to encrypt string in JavaScript? That\\'s how!\"\nvar hiddenJavaScriptString = \"\\x8C\\xB4\\x4E\\x5B\\x4A\\xD4\\x07\\xBC\\xB4\\xC4\\x52\\x7E\\x1A\\x72\\xE7\\xB6\" +\n                             \"\\xDA\\xDA\\x88\\x67\\xF8\\x5C\\x67\\x49\\x50\\xB9\\x47\\xFA\\x1D\\xED\\x2D\\x39\" +\n                             \"\\x8D\\x21\\x57\\x66\\xA0\\xB1\\xA9\\x8D\\x5F\\xF0\\x53\\x9C\\x7A\\x1E\\xC3\\xF0\";\n\nfor (var oBFEi = 0, hFSrA = 0; oBFEi < 48; oBFEi++)\n{\n        hFSrA = hiddenJavaScriptString.charCodeAt(oBFEi);\n        hFSrA = ((hFSrA << 1) | ( (hFSrA & 0xFF) >> 7)) & 0xFF;\n        hFSrA += 0x9E;\n        hFSrA = ((hFSrA << 6) | ( (hFSrA & 0xFF) >> 2)) & 0xFF;\n        hFSrA ^= oBFEi;\n        hFSrA -= oBFEi;\n        hFSrA ^= 0xFF;\n        hFSrA = (((hFSrA & 0xFF) >> 6) | (hFSrA << 2)) & 0xFF;\n        hFSrA ^= 0xC3;\n        hFSrA = ((hFSrA << 4) | ( (hFSrA & 0xFF) >> 4)) & 0xFF;\n        hFSrA += 0xD1;\n        hFSrA -= oBFEi;\n        hFSrA += 0x0B;\n        hFSrA ^= 0xD8;\n        hFSrA = (((hFSrA & 0xFF) >> 7) | (hFSrA << 1)) & 0xFF;\n        hFSrA += 0xB0;\n        hiddenJavaScriptString = hiddenJavaScriptString.substr(0, oBFEi) + String.fromCharCode(hFSrA & 0xFF) + hiddenJavaScriptString.substr(oBFEi + 1);\n}\n\nalert(hiddenJavaScriptString);\n</script>\n```\n\n### Ruby encryption (UNICODE example)\n\n```ruby\n\n# encrypted with https://www.stringencrypt.com (v1.3.0) [Ruby]\n# ruby = \"Ruby on rails\"\nruby = \"\\u68EA\\u60A2\\u78C6\\u7096\\u4946\\u40A6\\u58A6\\u5140\\u287A\\u209A\\u38C8\\u30C0\\u0870\"\n\nruby.codepoints.each_with_index do |komgu, rydut|\n  komgu = ((komgu << 5) | ( (komgu & 0xFFFF) >> 11)) & 0xFFFF\n  komgu ^= rydut\n  komgu = (((komgu & 0xFFFF) >> 6) | (komgu << 10)) & 0xFFFF\n  komgu += rydut\n  komgu -= 0x34D0\n  komgu ^= rydut\n  komgu = ((komgu << 13) | ( (komgu & 0xFFFF) >> 3)) & 0xFFFF\n  komgu = ~komgu\n  komgu -= 1\n  komgu = ((komgu << 3) | ( (komgu & 0xFFFF) >> 13)) & 0xFFFF\n  komgu ^= rydut\n  ruby[rydut] = [komgu & 0xFFFF].pack('U').force_encoding('UTF-8')\nend\n\nputs ruby\n```\n\n```AutoIt encryption (UNICODE example)\n\n```autoit\n; encrypted with https://www.stringencrypt.com (v1.3.0) [AutoIt]\n#include <Array.au3>\n\n; $autoit_obfuscator = \"We got it too https://www.pelock.com/products/autoit-obfuscator\"\nGlobal $autoit_obfuscator[64] = [ 0xD440, 0xCD01, 0xEF42, 0xCC83, 0xC944, 0xC485, 0xEE46, 0xCA87, _\n                                  0xC7C8, 0xED89, 0xC74A, 0xCA8B, 0xCB4C, 0xEC8D, 0xC84E, 0xC60F, _\n                                  0xC1D0, 0xC391, 0xC2D2, 0xE613, 0xED54, 0xED15, 0xC1D6, 0xC197, _\n                                  0xC258, 0xEE99, 0xC15A, 0xCB9B, 0xCEDC, 0xCF1D, 0xC9DE, 0xCD9F, _\n                                  0xE0E0, 0xC621, 0xC0E2, 0xC1A3, 0xE164, 0xCEA5, 0xCF66, 0xC1A7, _\n                                  0xC7E8, 0xCF29, 0xC4EA, 0xCF2B, 0xCD6C, 0xE32D, 0xC4EE, 0xCEAF, _\n                                  0xC9F0, 0xC431, 0xC7F2, 0xC933, 0xE474, 0xC535, 0xC376, 0xC137, _\n                                  0xCB78, 0xC839, 0xC0FA, 0xC1BB, 0xCAFC, 0xC73D, 0xC97E, 0xF03F ]\n\nFor $PxWtE = 0 to 63\n    $eUOPa = $autoit_obfuscator[$PxWtE]\n    $eUOPa = BitXOR($eUOPa, $PxWtE)\n    $eUOPa = $eUOPa - 1\n    $eUOPa = BitRotate($eUOPa, 10, \"W\")\n    $eUOPa = $eUOPa + 1\n    $eUOPa = BitXOR($eUOPa, $PxWtE)\n    $eUOPa = BitNOT($eUOPa)\n    $eUOPa = BitRotate($eUOPa, 15, \"W\")\n    $autoit_obfuscator[$PxWtE] = ChrW(BitAND($eUOPa, 0xFFFF))\nNext\n\n$autoit_obfuscator = _ArrayToString($autoit_obfuscator, \"\")\n\nConsoleWrite($autoit_obfuscator)\n```\n\n### PowerShell encryption (UNICODE example)\n\n```powershell\n# encrypted with https://www.stringencrypt.com (v1.3.0) [PowerShell]\n# $Label = \"Well, it has some interesting syntax!\"\n[uint16[]] $pYeOS = 0x5654, 0x5651, 0x1650, 0x9650, 0x1661, 0x9664, 0xD652, 0x9650,\n                    0x1666, 0x9654, 0xD656, 0xD652, 0x1668, 0xD653, 0x5655, 0x5656,\n                    0xD658, 0x966A, 0xD658, 0x1658, 0x1657, 0x565B, 0x9658, 0x565C,\n                    0x5659, 0x9659, 0xD65C, 0x165C, 0x565E, 0x9670, 0x565C, 0x565B,\n                    0x965E, 0x965D, 0xD662, 0x965D, 0xD673\n[string] $Label = \"\"\n\nfor ($TPYSL = 0; $TPYSL -lt 37; $TPYSL++)\n{\n  $kqSuK = $pYeOS[$TPYSL]\n  $kqSuK = -bnot $kqSuK\n  $kqSuK = (($kqSuK -shl 7) -bor ( ($kqSuK -band 0xFFFF) -shr 9)) -band 0xFFFF\n  $kqSuK += 1\n  $kqSuK = ((($kqSuK -band 0xFFFF) -shr 5) -bor ($kqSuK -shl 11)) -band 0xFFFF\n  $kqSuK += $TPYSL\n  $kqSuK -= 1\n  $kqSuK += $TPYSL\n  $kqSuK -= 0xAE56\n  $Label += [char]($kqSuK -band 0xFFFF)\n}\n\nWrite-Host $Label\n```\n\n### Haskell encryption (ANSI example)\n\n```haskell\n-- encrypted with https://www.stringencrypt.com (v1.3.0) [Haskell]\nmodule Main where\n\nimport qualified Data.Char\nimport qualified Data.Bits\n\nmain = do\n  putStrLn $ gimmeh\n\n-- gimmeh = \"Monads! I need more Monads!\"\ngimmeh = zipWith f [0..] [ 0x40, 0x7F, 0x61, 0x53, 0x6D, 0x67, 0x96, 0x96,\n                           0x4C, 0x98, 0x69, 0x47, 0x44, 0x40, 0x9F, 0x4B,\n                           0x4E, 0x6E, 0xBE, 0x82, 0x94, 0xB3, 0xB5, 0x47,\n                           0xB1, 0xA3, 0x8A ]\n  where\n    f vpkqq ujzsd = let wcufe0 = ujzsd\n                        wcufe1 = wcufe0 `Data.Bits.xor` 0xB0\n                        wcufe2 = Data.Bits.complement wcufe1\n                        wcufe3 = wcufe2 - 0xD0\n                        wcufe4 = Data.Bits.complement wcufe3\n                        wcufe5 = wcufe4 - 0x0E\n                        wcufe6 = wcufe5 - vpkqq\n                        wcufe7 = wcufe6 `Data.Bits.xor` vpkqq\n                        wcufe8 = wcufe7 - vpkqq\n                        wcufe9 = Data.Bits.complement wcufe8\n                    in Data.Char.chr (wcufe9 Data.Bits..&. 0xFF)\n```\n\n### MASM Assembler 32 bit encryption (UNICODE example)\n\n```asm\n; encrypted with https://www.stringencrypt.com (v1.3.0) [MASM Assembler (32 bit)]\n\n.data\n\n        ; szMyGoodOldFriend = \"I will be always here :)\"\n        szMyGoodOldFriend       dw 0BD37h, 0BD4Bh, 0BD63h, 0BD14h, 0BD0Ch, 0BD13h, 0BD4Eh, 0BD17h\n                                dw 0BD13h, 0BD53h, 0BD15h, 0BD55h, 0BCE9h, 0BD5Ah, 0BCF1h, 0BCE2h\n                                dw 0BC94h, 0BD63h, 0BD59h, 0BCB3h, 0BD5Fh, 0BC9Fh, 0BCF8h, 0BCA8h\n                                dw 0BD3Ch\n\n.code\n        mov     ecx, offset szMyGoodOldFriend\n        mov     edx, 25\n        and     eax, 0\n\n@@:\n        mov     bx, word ptr [ecx + eax]\n        not     ebx\n        sub     ebx, eax\n        not     ebx\n        xor     ebx, 02C59h\n        sub     ebx, 0DFB5h\n        add     ebx, eax\n        not     ebx\n        add     ebx, 061C5h\n        xor     ebx, 04FBCh\n        dec     ebx\n        add     ebx, eax\n        not     ebx\n        mov     word ptr [ecx + eax], bx\n        inc     eax\n        dec     edx\n        jne     @b\n\n        push    0\n        push    ecx\n        push    ecx\n        push    0\n        call    MessageBoxW\n```\n\n### FASM Assembler 32 bit (ANSI example)\n\n```asm\n\n; encrypted with https://www.stringencrypt.com (v1.3.0) [FASM Assembler (32 bit)]\n\n        ; szFasm = \"Hi Tomek Grysztar :)\"\n        local   szFasm[21]:BYTE\n\n        lea     edx, [szFasm]\n\n        mov     byte [edx + 8], 0D6h\n        mov     byte [edx + 9], 0F5h\n        mov     byte [edx + 5], 09Fh\n        mov     byte [edx + 0], 0EEh\n        mov     byte [edx + 3], 084h\n        mov     byte [edx + 2], 0E2h\n        mov     byte [edx + 16], 08Ch\n        mov     byte [edx + 19], 0FBh\n        mov     byte [edx + 10], 0A4h\n        mov     byte [edx + 7], 09Dh\n        mov     byte [edx + 18], 0FCh\n        mov     byte [edx + 17], 094h\n        mov     byte [edx + 4], 0ADh\n        mov     byte [edx + 6], 0A7h\n        mov     byte [edx + 11], 0BBh\n        mov     byte [edx + 12], 0A1h\n        mov     byte [edx + 15], 0ABh\n        mov     byte [edx + 14], 0BEh\n        mov     byte [edx + 20], 0FEh\n        mov     byte [edx + 13], 0AAh\n        mov     byte [edx + 1], 093h\n\n        mov     eax, 21\n        sub     ebx, ebx\n\n@@:\n        mov     cl, byte [edx + ebx]\n        xor     ecx, ebx\n        dec     ecx\n        xor     ecx, 043h\n        not     ecx\n        add     ecx, 015h\n        xor     ecx, ebx\n        add     ecx, ebx\n        add     ecx, 055h\n        xor     ecx, ebx\n        xor     ecx, 029h\n        xor     ecx, ebx\n        xor     ecx, 034h\n        xor     ecx, ebx\n        xor     ecx, 0EFh\n        dec     ecx\n        mov     byte [edx + ebx], cl\n        inc     ebx\n        dec     eax\n        jne     @b\n\n        push    0\n        push    edx\n        push    edx\n        push    0\n        call    [MessageBoxA]\n```\n\n## Free demo version limitations\n\nThe free demo version comes with some **limitations**.\n\n| Feature                               | Demo version     | Full version |\n|---------------------------------------|:----------------:|-------------:|\n| String encryption                     | ✅              | ✅           |\n| File encryption (text or binary file) | ❌              | ✅           |\n| Max. label length (characters)        | `10`             | `64`         |\n| Max. string length (characters)       | `10`             | `4096`       |\n| Max. file length (bytes)              | —                | `4 MB`       |\n| Min. number of encryption commands    | `3`              | `50`         |\n| Max. number of encryption commands    | `3`              | `50`         |\n\n## Purchase activation code\n\nTo remove the limitations and support our project and its development, you need to buy an activation code at:\n\nhttps://www.stringencrypt.com/buy/\n\nEach activation code has an assigned number of **usage credits**. You can use the software in full version as many times as you have usage credits on your account balance.\n\n## How to get a free activation code?\n\nYou can get a **free activation code** (500 usage credits) if you can advertise StringEncrypt service with a link to the project site https://www.stringencrypt.com/ at:\n\n* Programming forums\n* Programming blogs\n* Technical articles\n* Twitter / Facebook / other social media site\n* ...or any other website related to programming and development\n\nSend me all the details at my [contact address](https://www.stringencrypt.com/) and if it's legit - **bam!**, you got yourself a free code :)\n\n## Changelog\n\n### [1.0.0] - 2021-01-03\n\n- Initial release of a StringEncrypt Python 3 module\n\n# Fin\n\nI hope you like it and you will try it at least :)\n\nBartosz Wójcik\nhttps://www.pelock.com\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.stringencrypt.com",
    "keywords": "encryption string file string-encryption file-encryption security cryptography",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stringencrypt",
    "package_url": "https://pypi.org/project/stringencrypt/",
    "platform": "",
    "project_url": "https://pypi.org/project/stringencrypt/",
    "project_urls": {
      "Homepage": "https://www.stringencrypt.com"
    },
    "release_url": "https://pypi.org/project/stringencrypt/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "StringEncrypt page allows you to encrypt strings and files using randomly generated algorithm, generating a unique decryption code (so called polymorphic code) each time in the selected programming language.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9039580,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b2063c62ce646aa8667dc8ebf7c48249e25aa7d820f63abe7b848b65061476d",
          "md5": "bd87ed3344e96059ae797fa07c4b53e7",
          "sha256": "a62dd4ee494e7848ba7635118dd3955205a21426c59a48a763c09ef26c8d83d4"
        },
        "downloads": -1,
        "filename": "stringencrypt-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd87ed3344e96059ae797fa07c4b53e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14361,
        "upload_time": "2021-01-03T01:36:43",
        "upload_time_iso_8601": "2021-01-03T01:36:43.019092Z",
        "url": "https://files.pythonhosted.org/packages/2b/20/63c62ce646aa8667dc8ebf7c48249e25aa7d820f63abe7b848b65061476d/stringencrypt-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02ccff6b81ea2c2bcd68c04d699b55c5cc6f699659b90c173a07cbda3d2c5f65",
          "md5": "6d838df2bd6c390bcf0391425d7a6555",
          "sha256": "b577a5458335382bc49e5ac39c2961b1c906a01fbc13f668fce876f15824233d"
        },
        "downloads": -1,
        "filename": "stringencrypt-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d838df2bd6c390bcf0391425d7a6555",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32813,
        "upload_time": "2021-01-03T01:36:45",
        "upload_time_iso_8601": "2021-01-03T01:36:45.407572Z",
        "url": "https://files.pythonhosted.org/packages/02/cc/ff6b81ea2c2bcd68c04d699b55c5cc6f699659b90c173a07cbda3d2c5f65/stringencrypt-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b2063c62ce646aa8667dc8ebf7c48249e25aa7d820f63abe7b848b65061476d",
        "md5": "bd87ed3344e96059ae797fa07c4b53e7",
        "sha256": "a62dd4ee494e7848ba7635118dd3955205a21426c59a48a763c09ef26c8d83d4"
      },
      "downloads": -1,
      "filename": "stringencrypt-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bd87ed3344e96059ae797fa07c4b53e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14361,
      "upload_time": "2021-01-03T01:36:43",
      "upload_time_iso_8601": "2021-01-03T01:36:43.019092Z",
      "url": "https://files.pythonhosted.org/packages/2b/20/63c62ce646aa8667dc8ebf7c48249e25aa7d820f63abe7b848b65061476d/stringencrypt-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02ccff6b81ea2c2bcd68c04d699b55c5cc6f699659b90c173a07cbda3d2c5f65",
        "md5": "6d838df2bd6c390bcf0391425d7a6555",
        "sha256": "b577a5458335382bc49e5ac39c2961b1c906a01fbc13f668fce876f15824233d"
      },
      "downloads": -1,
      "filename": "stringencrypt-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6d838df2bd6c390bcf0391425d7a6555",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32813,
      "upload_time": "2021-01-03T01:36:45",
      "upload_time_iso_8601": "2021-01-03T01:36:45.407572Z",
      "url": "https://files.pythonhosted.org/packages/02/cc/ff6b81ea2c2bcd68c04d699b55c5cc6f699659b90c173a07cbda3d2c5f65/stringencrypt-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}