{
  "info": {
    "author": "Matthew Alvarez, Jenny Lam, Sundar Rajan, Blaine Rothrock",
    "author_email": "author@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pytest",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# EuroPy\n\nEuroPy is a declarative python testing framework designed for the machine learning (ML) pipeline. Inspired by other testing frameworks (such as JUnit and NUnit) EuroPy uses test decorators to register and execute tests.\n\nEuroPy is designed to work within an Iron Python interactive environment (i.e. Jupyter Notebook) as well as within the typical python kernel. \n\n## Philosophy\nAs the use of machine learning becomes increasingly common, there is a greater need to address issues of reproducibility and the prevalence of ML systems' unforeseen adverse effects. Doing so requires a more structured approach to evaluating ML systems. EuroPy is a ML testing library that incorporates recommendations from existing literature to aid in the organization and reporting of tests in the ML pipeline. EuroPy is a lightweight testing framework designed to help data scientists and machine learning engineers write and generate results for custom tests to address factors such as Accuracy, Bias, Fairness, Data Bias, Minimum Functionality, etc. that are oftentimes not considered in the development of ML models and pipelines. By encouraging developers to consider potential sources of bias through ML testing, the EuroPy testing framework aims to minimize negative societal impact, address ethical debt, and foster responsible ML prior to deployment. \n## Usage\n\nCreating a test function is accomplished by simply decorating any function with decorators from `europy.decorators`. This will register your test function with the EuroPy lifecycle. In order to execute all registered tests you simply need to execute the `europy.lifecycle.reporting.execute_tests` function. Any parameters passed to the `execute_tests` function will also be passed to all registered functions. \n\n```python\nfrom europy.decorator import bias, fairness\nfrom europy.lifecycle.reporting import execute_tests, generate_report, report_model_details, report_model_params\n\n@bias(\"My example bias test\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")\ndef foo(input):\n    assert input % 2 == 0\n    return input\n\n@fairness(\"My example fairness test that fails\")\n@bias()\ndef foo_failure(input): \n    assert input % 2 == 1\n    return input\n\n@bias(\"example_figure\")\ndef save_image_example(plots: dict):\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    plt.style.use('fivethirtyeight')\n\n    x = np.linspace(0, 10)\n\n    # Fixing random state for reproducibility\n    np.random.seed(19680801)\n\n    fig, ax = plt.subplots()\n\n    ax.plot(x, np.sin(x) + x + np.random.randn(50))\n    ax.plot(x, np.sin(x) + 0.5 * x + np.random.randn(50))\n    ax.plot(x, np.sin(x) + 2 * x + np.random.randn(50))\n    ax.plot(x, np.sin(x) - 0.5 * x + np.random.randn(50))\n    ax.plot(x, np.sin(x) - 2 * x + np.random.randn(50))\n    ax.plot(x, np.sin(x) + np.random.randn(50))\n    ax.set_title(\"'fivethirtyeight' style sheet\")\n\n    plots['fivethirtyeight_fig'] = plt\n\n\nreport_model_params('tests/param_example.yml')\nreport_model_details('tests/model_details_example.yml')\nexecute_tests(clear=True, input=1)\ngenerate_report(export_type='markdown', clear_report=True)\n```\nPulled from [this](./testing-notebook.ipynb) notebook\n\n### Example Notebook Output\n![Notebook Output](./.img/notebook-output-1.png)\n\n### Example Standard Output\n![Standard Output](./.img/standard-output-1.png)\n\n### Other Examples\n\nInterested in seeing a more concrete example? EuroPy has a sibling repository [EuroPy Examples](https://github.com/EuroPy/EuroPy-Examples) that contains a more detailed demonstration of how to use the EuroPy testing framework for a more concrete use case. \n\n## Testing Report\nWhen the `generate_report` function is called, all recorded tests are flushed to a report file. The report can be exported in markdown or JSON format. An example of a testing report for the above example can be found [HERE](./.img/report.md)\n\n## Model Card\nEuroPy can also help with generating high level details of your model for use in the report. This is included with the `@model_details()` decorator which reads data from `.yaml` or `.json` file. An example can be found at `tests/model_details_example.[yml|json]`.  \n\n### Simple Model Card Example\n```python\nfrom europy.decorator import model_details\nfrom europy.lifecycle.model_details import ModelDetails\n\n@model_details('model_details.yml') # will load details from file and pass into train\ndef train(details: ModelDetails=None):\n    # train\n    details.description = \"something computed\"\n\n@model_details() # will load existing details from the current report\ndef test(detail: ModelDetails=None):\n    pass\n```\n\n### Including Model details in a Test Report\nTo include the model details in your test report simply add the model details decoratoer to a test inside of your test suite OR use the `report_model_details` function. Examples of both are below\n\n#### Using a Test Decorator\n```python\nfrom europy.decorator import model_details\nfrom europy.lifecycle.model_details import  ModelDetails\nfrom europy.lifecycle.reporting import execute_tests, generate_report\n\n@model_details('model-details.yml') \ndef loaded_model_details(details: ModelDetails = None):\n    # You can also manipulate your details object HERE if you wish\n    pass\n\nexecute_tests()\ngenerate_report()\n```\n\n#### Using the `report_model_details` function\n```python\nfrom europy.lifecycle.reporting import execute_tests, generate_report, report_model_details\n\n#... Write Tests\n\nexecute_tests()\nreport_model_details('model-details.yml')\ngenerate_report()\n```\n\n\n## Hyper-Parameters\nKeeping track of hyper-parameter tuning can be accomplished in configuration `.yml` or `.json` files and loaded into your code with the decorator `using_params()` or globally with `load_global_params()`. Doing so will automatically add the parameter details to your report. Parameters are loaded from \n\n### Example Param Usage\n```yaml\nglobal:\n    num_epochs: 4\n    batch_size: 128\n    learning_rate: 0.0001\ntrain: \n    test_split: 0.2\ntest:\n    title: \"Testing Run 01\"\n    batch_size: 256\n```\n```python\nfrom europy.decorator import using_params\n@using_params('params.yml')\ndef train(num_epochs: int=None, batch_size: int=None, learning_rate: float=None, test_split: float=None):\n    # will load global params first, then params matching func name\n    pass\n\n@using_params('params.yml')\ndef test(title: str=\"\", batch_size: int=None):\n    # will load batch_size from test, overriding the global definition\n    pass \n```\n\n### Example Notebook Output\n![Global Params Output](./.img/global_params_notebook.png)\n![Function Params Capture](./.img/func_params_notebook.png)\n\n### Including Model Parameters in a Test Report\nTo include the model parameters in your test report simply add the using_params decorator to a test inside of your test suite OR use the `report_model_params` function. Examples of both are below\n\n#### Using a Test Decorator\n```python\nfrom europy.decorator import using_params\nfrom europy.lifecycle.reporting import execute_tests, generate_report\n\n@using_params('params.yml')\ndef test(title: str=\"\", batch_size: int=None):\n    # will load batch_size from test, overriding the global definition\n    pass \n\nexecute_tests()\ngenerate_report()\n```\n\n#### Using the `report_model_params` Function\n```python\nfrom europy.lifecycle.reporting import execute_tests, generate_report, report_model_params\n\n#... Write Tests to execute\n\nexecute_tests()\nreport_model_params('model-parameters.yml')\ngenerate_report()\n```\n\n\n\n## Test Decorators\nEuroPy supports a number of test classes out of the box. These test classes have been created by surveying industry practitioners and creating a list of well known testing labels. When defining a testing function you may pass two optional parameters to any decorator: name and description. These parameters are used as metadata and will be included in the resulting test report. The supported labels are listed below. \n\n- `@bias()`\n- `@data_bias()`\n- `@fairness()`\n- `@transparency()`\n- `@accountability()`\n- `@accuracy()`\n- `@unit()`\n- `@integration()`\n- `@minimum_functionality()`\n\n### Custom Test Decorators\nWhile we believe these decorators should be comprehensive we have provided two ways in which you can add your own custom label to the test reports. For the examples below we will be adding a custom \"end-to-end\" testing label to our testing function. \n\n- Using the  generic `@test()` decorator you can provide a custom string label\n```python\nfrom europy.decorator import test\nfrom europy.lifecycle.reporting import execute_tests\n\nEXAMPLE_LABEL_NAME = \"end-to-end\"\n\n@test(EXAMPLE_LABEL_NAME, \"My custom label test\")\ndef foo(input):\n    assert input % 2 == 0\n    return input\n\nexecute_tests(100)\n```\n- Defining your own test decorator using the decorator_factory\n```python\nfrom europy.decorator import decorator_factory\nfrom europy.lifecycle.reporting import execute_tests\n\ndef end_to_end(name: str = \"\"):\n    # here you can add multiple labels if you wish\n    labels = [\"end-to-end\"]\n    return decorator_factory(labels, name)\n\n\n@end_to_end(\"Test with custom decorator\")\ndef foo(input):\n    assert input % 2 == 0\n    return input\n\nexecute_tests(100)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EuroPy/EuroPyt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EuroPy",
    "package_url": "https://pypi.org/project/EuroPy/",
    "platform": "",
    "project_url": "https://pypi.org/project/EuroPy/",
    "project_urls": {
      "Homepage": "https://github.com/EuroPy/EuroPyt"
    },
    "release_url": "https://pypi.org/project/EuroPy/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "EuroPy testing framework for Machine Learning",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8834413,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff56acbbc63c121fb67a4da28f55890a8ab6004121c4643ba6343833fb6f84c7",
          "md5": "3cb84522aa757436ebdda037c7a49e34",
          "sha256": "a9bced4e5951ce28c3d2b2fbc278c8a92175569bd16aadb10c40eaac7161f9d7"
        },
        "downloads": -1,
        "filename": "EuroPy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3cb84522aa757436ebdda037c7a49e34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20698,
        "upload_time": "2020-12-05T21:37:58",
        "upload_time_iso_8601": "2020-12-05T21:37:58.535655Z",
        "url": "https://files.pythonhosted.org/packages/ff/56/acbbc63c121fb67a4da28f55890a8ab6004121c4643ba6343833fb6f84c7/EuroPy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e68cb149dc70f5b99d870ccfba916bf113a5fc56ae8b087a187da09956a72b19",
          "md5": "429c3f995f75557d03938ac9152beddf",
          "sha256": "8d93488c51e68afcdbc5c35617d805c59609fd9e97fb995042c7332178f0734f"
        },
        "downloads": -1,
        "filename": "EuroPy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "429c3f995f75557d03938ac9152beddf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12639,
        "upload_time": "2020-12-05T21:37:59",
        "upload_time_iso_8601": "2020-12-05T21:37:59.458076Z",
        "url": "https://files.pythonhosted.org/packages/e6/8c/b149dc70f5b99d870ccfba916bf113a5fc56ae8b087a187da09956a72b19/EuroPy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69b790fc33b0a752d3297b2688548fa007f44e1d0eedc7c38fbf7c137e2fd5f8",
          "md5": "b2aee82fb2aee4d318e6ca7361da2208",
          "sha256": "bd6f39c687e27ceb4fd683465031cda96b9950504468b64e10e78c705a2dcdd8"
        },
        "downloads": -1,
        "filename": "EuroPy-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2aee82fb2aee4d318e6ca7361da2208",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21832,
        "upload_time": "2020-12-05T23:20:52",
        "upload_time_iso_8601": "2020-12-05T23:20:52.659335Z",
        "url": "https://files.pythonhosted.org/packages/69/b7/90fc33b0a752d3297b2688548fa007f44e1d0eedc7c38fbf7c137e2fd5f8/EuroPy-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0132a3a8a091246b28c57ba33a682f64f0d1cba3a0da865741025fc73be41f6",
          "md5": "72137ae2293f7f73e768a651237eb40e",
          "sha256": "d3e251aa37ccc42b9097d4271f814e0b753bc0f01771749bddef03583678c81d"
        },
        "downloads": -1,
        "filename": "EuroPy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "72137ae2293f7f73e768a651237eb40e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14027,
        "upload_time": "2020-12-05T23:20:54",
        "upload_time_iso_8601": "2020-12-05T23:20:54.151884Z",
        "url": "https://files.pythonhosted.org/packages/c0/13/2a3a8a091246b28c57ba33a682f64f0d1cba3a0da865741025fc73be41f6/EuroPy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d8949e12e1e85f92c75c059169437877d117fc76ae42e0e073da72ba2a5f5a7",
          "md5": "b26d83c5a092c1f931f22256fd9370d2",
          "sha256": "aa9b7d48a8f5c61827c1ebafe230969fd35640c754ffc0413ebd4a3c81977c6a"
        },
        "downloads": -1,
        "filename": "EuroPy-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b26d83c5a092c1f931f22256fd9370d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21899,
        "upload_time": "2020-12-06T20:51:00",
        "upload_time_iso_8601": "2020-12-06T20:51:00.547933Z",
        "url": "https://files.pythonhosted.org/packages/2d/89/49e12e1e85f92c75c059169437877d117fc76ae42e0e073da72ba2a5f5a7/EuroPy-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2696bb66a2978923275c080ba0d2a927d65433e03494d174f9a7cff3cafc417b",
          "md5": "949f357a2ac2fd7d05f169a23213bb6c",
          "sha256": "e991e103ed6d48e149715f4bdabfce802efb3f78cbf637a3cad3e93de29297fe"
        },
        "downloads": -1,
        "filename": "EuroPy-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "949f357a2ac2fd7d05f169a23213bb6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14157,
        "upload_time": "2020-12-06T20:51:01",
        "upload_time_iso_8601": "2020-12-06T20:51:01.919882Z",
        "url": "https://files.pythonhosted.org/packages/26/96/bb66a2978923275c080ba0d2a927d65433e03494d174f9a7cff3cafc417b/EuroPy-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d8949e12e1e85f92c75c059169437877d117fc76ae42e0e073da72ba2a5f5a7",
        "md5": "b26d83c5a092c1f931f22256fd9370d2",
        "sha256": "aa9b7d48a8f5c61827c1ebafe230969fd35640c754ffc0413ebd4a3c81977c6a"
      },
      "downloads": -1,
      "filename": "EuroPy-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b26d83c5a092c1f931f22256fd9370d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21899,
      "upload_time": "2020-12-06T20:51:00",
      "upload_time_iso_8601": "2020-12-06T20:51:00.547933Z",
      "url": "https://files.pythonhosted.org/packages/2d/89/49e12e1e85f92c75c059169437877d117fc76ae42e0e073da72ba2a5f5a7/EuroPy-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2696bb66a2978923275c080ba0d2a927d65433e03494d174f9a7cff3cafc417b",
        "md5": "949f357a2ac2fd7d05f169a23213bb6c",
        "sha256": "e991e103ed6d48e149715f4bdabfce802efb3f78cbf637a3cad3e93de29297fe"
      },
      "downloads": -1,
      "filename": "EuroPy-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "949f357a2ac2fd7d05f169a23213bb6c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14157,
      "upload_time": "2020-12-06T20:51:01",
      "upload_time_iso_8601": "2020-12-06T20:51:01.919882Z",
      "url": "https://files.pythonhosted.org/packages/26/96/bb66a2978923275c080ba0d2a927d65433e03494d174f9a7cff3cafc417b/EuroPy-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}