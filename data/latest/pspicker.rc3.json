{
  "info": {
    "author": "Christian Baillard",
    "author_email": "crawford@ipgp.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "ps_picker\n===========\n\nSeismological P- and S- wave picker using the modified Kurtosis method\n\nPython port of the picker described in Baillard et al., 2014\n\ndebugging information is saved to the local file ``run_{datetime}.log``\n\nMethodology\n------------\n\nThe picker is based around the Kurtosis, but also uses energy levels, polarity,\nclustering and phase association in a 3-step process:\n\n### Step 1: define a global pick window\n\n\nThe *Kurtosis* is calculated for all stations.  The global window\nsurrounds the most densely clustered region of triggers.\n\n### Step 2: pick P and S arrivals on each station individually\n\nFor each station:\n    - calculate the *Kurtosis* over coarse to fine scales.\n    - Identify candidates on the coarse scale and refine their times using\n      the finier scales\n    - Choose P- and S- candidates based on the *signal-to-noise level* of\n      each pick\n    - Verify the candidates using the waveform *polarity*, if possible\n       - polarity is only used if one of the picks has a dip of > 30 degrees\n\n### Step 3: associate picks\n\n- Calculate origin times for each trace, based on the P-S delay and\n  a simple velocity model (could I use a single Vp/Vs value?)\n- If at least 3 origin times are clustered, use their average origin time\n  to validate all candidates, possibly dipping into the pool of unused\n  candidates for replacemene P and S picks\n- If less than 3 origin times are clustered, reject bad P- and S- picks\n  based on clustering of P-pick times, S-pick times and P-S delays\n\n\n\nDatabase and waveform files\n---------------------------\n\nAre assumed to be in SEISAN structure:\n  - Database files: NORDIC format, in ``database_path_in``/``YEAR``/``MONTH``/\n    (except run_one, for which the file may be local)\n  - Waveform files: one miniseed file per event.  Filename is read from the\n    database file and assumed to start with ``YEAR``-``MONTH``.  File is read\n    from ``waveform_path_in``/``YEAR``/``MONTH``/\n\n\nExample workflow\n----------------\n\n### Start by autopicking a few events, with all bells and whistles on:\n\nTo pick one event from a database in ``/SEISAN/MAYOBS``:\n\n```python\nfrom pspicker import PSPicker\npicker = PSPicker('parameters_C.yaml', '/SEISAN/MAYOBS/WAV/MAYOB',  '/SEISAN/MAYOBS/REA/MAYOB')\npicker.run_one('19-0607-59L.S201905', plot_global=True, plot_stations=True, log_level='verbose')\n```\n\nLook at all of the plots and verify that the picks and association are as\nyou expect.  If not, change the paramters and run again.\n\n### Next, pick several events with only the global plots on\n\nThe bells and whistles text will be saved to a log file named\nrun_{DATETIME}.log\n\nTo pick events from May 5th to 25th in the same database:\n\n```python\nfrom pspicker import PSPicker\npicker = PSPicker('parameters_C.yaml', '/SEISAN/MAYOBS/WAV/MAYOB',  '/SEISAN/MAYOBS/REA/MAYOB')\npicker.run_many('20190505', '20190525', plot_global=True)\n```\n\n### Finally, run the whole database without plots\n\n*(run_{DATETIME}.log is always created)*\n\nTo pick events from May 26th 2019 May 1st 2020:\n\n```python\nfrom pspicker import PSPicker\npicker = PSPicker('parameters_C.yaml', '/SEISAN/MAYOBS/WAV/MAYOB', '/SEISAN/MAYOBS/REA/MAYOB')\npicker.run_many('20190526', '20200501')\n```\n\nThe three main methods:\n-----------------------\n\n```python\ndef __init__(self, parm_file, wav_base_path, database_path_in,\n             database_path_out='Sfile_directory', database_format='NORDIC'):\n    \"\"\"\n    :param parm_file: path/name of the parameter file\n    :param wav_base_path: absolute basepath to the waveform files (just before\n                          the YEAR/MONTH subdirectories)\n    :param database_path_in: absolute basepath to the database/catalog file(s)\n                             (just before the YEAR/MONTH subdirectories)\n    :param database_path_out: path to output database files\n    :param database_format: 'NORDIC' is the only choice for now\n        'NORDIC': Use SEISAN conventions for waveform  and database files\n                  (naming, and location in YEAR/MONTH subdirectories)\n    \"\"\"\n```\n```python\ndef run_one(self, database_filename, plot_global=True, plot_stations=False,\n            assoc=None, log_level=\"verbose\", plot_debug=None):\n    \"\"\"\n    Picks P and S arrivals on one waveform, using the Kurtosis\n\n    Information in the database file will be appended with the picks.\n    :param database_filename: database file to read\n    :param plot_global: show global and overall pick plots\n    :param plot_stations: show individual station plots\n    :param assoc: Associator object (used by run_many())\n    :param log_level: console log level (choices = 'debug', 'verbose',\n        'info', 'warning', 'error', 'critical'), default='info'\n    :param plot_debug: show some debugging plots\n    \"\"\"\n```\n```python\ndef run_many(self, start_date, end_date, plot_global=False,\n    plot_stations=False, ignore_fails=False, log_level='info'):\n    \"\"\"\n    Loops over events in a date range\n\n    :param start_date: \"YYYYMMDD\" or \"YYYYMMDDHHMM\" of first data to process\n    :param end_date: \"YYYYMMDD\" of last data to process\n    :param plot_global: show global and overall pick plots\n    :param plot_stations: show individual station plots\n    :param ignore_fails: keep going if one run fails\n    :param log_level: console log level (choices = 'debug', 'verbose',\n                      'info', 'warning', 'error', 'critical'), default='info'        \n    \"\"\"\n```\n\nParameter and response files \n-----------------------------\n\n[Are documented here](file_examples.md)\n\nTo get the same results as with the old Matlab program, set the following\nvalues:\n\n- set ``association:method`` to **\"arrival_time\"**\n- set ``station_parameters:{type}:max_candidates`` to **2**\n- set ``SNR:threshold_parameter`` to **0.2**\n- set ``SNR:max_threshold_crossings`` to **5**\n- set ``global_window:max_candidates`` to **2**\n\nEvent amplitudes \n-----------------\n\nEvent amplitudes calculations need accurate instrument responses.  The\ninstrument response filename(s) are input in the parameter file.  If you have\nas stationxml file, you can make a pspicker_compatible json_pz file like this:\n\n```python\npaz = PAZ.read_stationxml(filename, channel=xxx[, station=xxxx])\npaz.write_json_pz (ps_filename)\n```\n\nIf you have a response in another format that you can read in using obspy,\nyou can output it to a pspicker-compatible json_pz file like this:\n\n```python\npaz = PAZ.from_obspy_response(resp)\npaz.write_json_pz(pz_filename)\n```\n\nIn both cases, you can look at the response using `paz.plot(min_freq=xxx)`, or\nyou could compare it to the obspy_response using:\n\n```python\nfig = resp.plot(min_freq=xxx, label='obspy', show=False)\npaz = PAZ.from_obspy_response(resp)\npaz.plot(min_freq=xxx, axes=fig.axes, label='PAZ', sym='g.')\n```\n\nTo Do\n-------\n\n- Add event location-based acceptance of solitary P- and S- candidates\n- In P-, S- and P-S clustering stage, allow unused candidates to be\n  substituted for rejected picks\n- Dedicated [To Do file](ToDo.md)\n\nAlso see the [profiling file](profiling.md)\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WayneCrawford/pspicker",
    "keywords": "seismology",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pspicker",
    "package_url": "https://pypi.org/project/pspicker/",
    "platform": "",
    "project_url": "https://pypi.org/project/pspicker/",
    "project_urls": {
      "Homepage": "https://github.com/WayneCrawford/pspicker"
    },
    "release_url": "https://pypi.org/project/pspicker/0.5.1/",
    "requires_dist": [
      "obspy (>=1.2)",
      "numpy (>=1.18)",
      "scipy (>=1.5)",
      "verboselogs (>=1.7)",
      "matplotlib (>=3.2)",
      "pyyaml (>=3.0)",
      "jsonschema (>=2.6)",
      "jsonref (>=0.2)"
    ],
    "requires_python": ">=3.8",
    "summary": "Kurtosis-based P and S wave picker",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10713541,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64e8bdc102c36e4be55f4648d1940c5b11ceaeae4d5e02ee9e71c813dbf1ad13",
          "md5": "4d0d856a54c6e652eedf78ba572316c5",
          "sha256": "6bf19280640d272ea02d986fdf25519d694692a81e2d1d0c5f32428916a7aee9"
        },
        "downloads": -1,
        "filename": "pspicker-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d0d856a54c6e652eedf78ba572316c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 69489,
        "upload_time": "2021-05-11T09:58:14",
        "upload_time_iso_8601": "2021-05-11T09:58:14.837098Z",
        "url": "https://files.pythonhosted.org/packages/64/e8/bdc102c36e4be55f4648d1940c5b11ceaeae4d5e02ee9e71c813dbf1ad13/pspicker-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96f79c5898a95ad66a0a73319dc33203809e3a2b6e030287928e73ef8c9f886d",
          "md5": "998fec79d1f3c6e584959d865a56568d",
          "sha256": "4f8fec65c906f931e0baf10efd04f4e50067d24a01774522dfcd9706378e490d"
        },
        "downloads": -1,
        "filename": "pspicker-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "998fec79d1f3c6e584959d865a56568d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 62491,
        "upload_time": "2021-05-11T09:58:16",
        "upload_time_iso_8601": "2021-05-11T09:58:16.862969Z",
        "url": "https://files.pythonhosted.org/packages/96/f7/9c5898a95ad66a0a73319dc33203809e3a2b6e030287928e73ef8c9f886d/pspicker-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc0d5077ea65ec95e4700532000d10a49d4b583f1a3588713eddcb8e11c51800",
          "md5": "9a32070c81b7bd744b626d31c677858c",
          "sha256": "279a06dfa6308f622c4984dd5a7382b934f50d624861ab1170f5e4a4570d353d"
        },
        "downloads": -1,
        "filename": "pspicker-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a32070c81b7bd744b626d31c677858c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 70762,
        "upload_time": "2021-06-16T13:02:18",
        "upload_time_iso_8601": "2021-06-16T13:02:18.138793Z",
        "url": "https://files.pythonhosted.org/packages/cc/0d/5077ea65ec95e4700532000d10a49d4b583f1a3588713eddcb8e11c51800/pspicker-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5de8e4d24e5abc6c9d211e8f8a78aaac2ed8ab10f20d891d34b57033d935ddb",
          "md5": "6f3db9d38953746a2fbf07ded73acf7d",
          "sha256": "6337f3b8becd8f54030f73c4a4dd48d798e845f8edec5ba550adcafa461aac78"
        },
        "downloads": -1,
        "filename": "pspicker-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f3db9d38953746a2fbf07ded73acf7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 63378,
        "upload_time": "2021-06-16T13:02:19",
        "upload_time_iso_8601": "2021-06-16T13:02:19.638637Z",
        "url": "https://files.pythonhosted.org/packages/c5/de/8e4d24e5abc6c9d211e8f8a78aaac2ed8ab10f20d891d34b57033d935ddb/pspicker-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73faec92e7dfda6e1a45d6db6d1da2d6c48b5d35a3bb269958272054dceaefe5",
          "md5": "463574f86f8449f236e673fdbeb0fceb",
          "sha256": "f3374da3c45e18cd5eac1f3be1edec5d687a7e0f02f3e02556183318d058c601"
        },
        "downloads": -1,
        "filename": "pspicker-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "463574f86f8449f236e673fdbeb0fceb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 70895,
        "upload_time": "2021-06-22T15:58:13",
        "upload_time_iso_8601": "2021-06-22T15:58:13.296679Z",
        "url": "https://files.pythonhosted.org/packages/73/fa/ec92e7dfda6e1a45d6db6d1da2d6c48b5d35a3bb269958272054dceaefe5/pspicker-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2671b3cf9726e1d2a512d3dd29cfd297bcbbcba6140cad5136bbb18c10bda037",
          "md5": "cc80dba0441a6f0ab6e39880b3438215",
          "sha256": "5c4ef41cc317180838bdf916ae73c13023a602c1edf47da7e949621ab4c483d1"
        },
        "downloads": -1,
        "filename": "pspicker-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cc80dba0441a6f0ab6e39880b3438215",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 63530,
        "upload_time": "2021-06-22T15:58:16",
        "upload_time_iso_8601": "2021-06-22T15:58:16.191097Z",
        "url": "https://files.pythonhosted.org/packages/26/71/b3cf9726e1d2a512d3dd29cfd297bcbbcba6140cad5136bbb18c10bda037/pspicker-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73faec92e7dfda6e1a45d6db6d1da2d6c48b5d35a3bb269958272054dceaefe5",
        "md5": "463574f86f8449f236e673fdbeb0fceb",
        "sha256": "f3374da3c45e18cd5eac1f3be1edec5d687a7e0f02f3e02556183318d058c601"
      },
      "downloads": -1,
      "filename": "pspicker-0.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "463574f86f8449f236e673fdbeb0fceb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 70895,
      "upload_time": "2021-06-22T15:58:13",
      "upload_time_iso_8601": "2021-06-22T15:58:13.296679Z",
      "url": "https://files.pythonhosted.org/packages/73/fa/ec92e7dfda6e1a45d6db6d1da2d6c48b5d35a3bb269958272054dceaefe5/pspicker-0.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2671b3cf9726e1d2a512d3dd29cfd297bcbbcba6140cad5136bbb18c10bda037",
        "md5": "cc80dba0441a6f0ab6e39880b3438215",
        "sha256": "5c4ef41cc317180838bdf916ae73c13023a602c1edf47da7e949621ab4c483d1"
      },
      "downloads": -1,
      "filename": "pspicker-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cc80dba0441a6f0ab6e39880b3438215",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 63530,
      "upload_time": "2021-06-22T15:58:16",
      "upload_time_iso_8601": "2021-06-22T15:58:16.191097Z",
      "url": "https://files.pythonhosted.org/packages/26/71/b3cf9726e1d2a512d3dd29cfd297bcbbcba6140cad5136bbb18c10bda037/pspicker-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}