{
  "info": {
    "author": "Antoine Broyelle",
    "author_email": "antoine.broyelle@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# `torchextractor`: PyTorch Intermediate Feature Extraction\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/torchextractor)](https://pypi.org/project/torchextractor/)\n[![PyPI](https://img.shields.io/pypi/v/torchextractor)](https://pypi.org/project/torchextractor/)\n[![Read the Docs](https://img.shields.io/readthedocs/torchextractor)](https://torchextractor.readthedocs.io/en/latest/)\n[![Upload Python Package](https://github.com/antoinebrl/torchextractor/actions/workflows/publish.yml/badge.svg)](https://github.com/antoinebrl/torchextractor/actions/workflows/publish.yml)\n[![GitHub](https://img.shields.io/github/license/antoinebrl/torchextractor)](https://github.com/antoinebrl/torchextractor/blob/main/LICENSE)\n\n\n## Introduction\n\nToo many times some model definitions get remorselessly copy-pasted just because the\n`forward` function does not return what the person expects. You provide module names\nand `torchextractor` takes care of the extraction for you.It's never been easier to\nextract feature, add an extra loss or plug another head to a network.\nLer us know what amazing things you build with `torchextractor`!\n\n## Installation\n\n```shell\npip install torchextractor  # stable\npip install git+https://github.com/antoinebrl/torchextractor.git  # latest\n```\n\nRequirements:\n- Python >= 3.6+\n- torch >= 1.4.0\n\n## Usage\n\n```python\nimport torch\nimport torchvision\nimport torchextractor as tx\n\nmodel = torchvision.models.resnet18(pretrained=True)\nmodel = tx.Extractor(model, [\"layer1\", \"layer2\", \"layer3\", \"layer4\"])\ndummy_input = torch.rand(7, 3, 224, 224)\nmodel_output, features = model(dummy_input)\nfeature_shapes = {name: f.shape for name, f in features.items()}\nprint(feature_shapes)\n\n# {\n#   'layer1': torch.Size([1, 64, 56, 56]),\n#   'layer2': torch.Size([1, 128, 28, 28]),\n#   'layer3': torch.Size([1, 256, 14, 14]),\n#   'layer4': torch.Size([1, 512, 7, 7]),\n# }\n```\n\n[See more examples](docs/source/examples.ipynb)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/antoinebrl/torchextractor/HEAD?filepath=docs/source/examples.ipynb)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/antoinebrl/torchextractor/blob/master/docs/source/examples.ipynb)\n\n[Read the documentation](https://torchextractor.readthedocs.io/en/latest/)\n\n## FAQ\n\n**• How do I know the names of the modules?**\n\nYou can print all module names like this:\n```python\ntx.list_module_names(model)\n\n# OR\n\nfor name, module in model.named_modules():\n    print(name)\n```\n\n**• Why do some operations not get listed?**\n\nIt is not possible to add hooks if operations are not defined as modules.\nTherefore, `F.relu` cannot be captured but `nn.Relu()` can.\n\n**• How can I avoid listing all relevant modules?**\n\nYou can specify a custom filtering function to hook the relevant modules:\n```python\n# Hook everything !\nmodule_filter_fn = lambda module, name: True\n\n# Capture of all modules inside first layer\nmodule_filter_fn = lambda module, name: name.startswith(\"layer1\")\n\n# Focus on all convolutions\nmodule_filter_fn = lambda module, name: isinstance(module, torch.nn.Conv2d)\n\nmodel = tx.Extractor(model, module_filter_fn=module_filter_fn)\n```\n\n**• Is it compatible with ONNX?**\n\n`tx.Extractor` is compatible with ONNX! This means you can also access intermediate features maps after the export.\n\nPro-tip: name the output nodes by using `output_names` when calling `torch.onnx.export`.\n\n**• Is it compatible with TorchScript?**\n\nBad news, TorchScript cannot take variable number of arguments and keyword-only arguments.\n\nGood news, there is a workaround! The solution is to overwrite the `forward` function\nof `tx.Extractor` to replicate the interface of the model.\n\n```python\nimport torch\nimport torchvision\nimport torchextractor as tx\n\nclass MyExtractor(tx.Extractor):\n    def forward(self, x1, x2, x3):\n        # Assuming the model takes x1, x2 and x3 as input\n        output = self.model(x1, x2, x3)\n        return output, self.feature_maps\n\nmodel = torchvision.models.resnet18(pretrained=True)\nmodel = MyExtractor(model, [\"layer1\", \"layer2\", \"layer3\", \"layer4\"])\nmodel_traced = torch.jit.script(model)\n```\n\n**• \"One more thing!\" :wink:**\nBy default we capture the latest output of the relevant modules,\nbut you can specify your own custom operations.\n\nFor example, to accumulate features over 10 forward passes you\ncan do the following:\n```python\nimport torch\nimport torchvision\nimport torchextractor as tx\n\nmodel = torchvision.models.resnet18(pretrained=True)\n\ndef capture_fn(module, input, output, module_name, feature_maps):\n    if module_name not in feature_maps:\n        feature_maps[module_name] = []\n    feature_maps[module_name].append(output)\n\nextractor = tx.Extractor(model, [\"layer3\", \"layer4\"], capture_fn=capture_fn)\n\nfor i in range(20):\n    for i in range(10):\n        x = torch.rand(7, 3, 224, 224)\n        model(x)\n    feature_maps = extractor.collect()\n\n    # Do your stuffs here\n\n    # Discard collected elements\n    extractor.clear_placeholder()\n```\n\n## Contributing\n\nAll feedbacks and contributions are welcomed. Feel free to report an issue or to create a pull request!\n\nIf you want to get hands-on:\n1. (Fork and) clone the repo.\n2. Create a virtual environment: `virtualenv -p python3 .venv && source .venv/bin/activate`\n2. Install dependencies: `pip install -r requirements.txt && pip install -r requirements-dev.txt`\n4. Hook auto-formatting tools: `pre-commit install`\n5. Hack as much as you want!\n6. Run tests: `python -m unittest discover -vs ./tests/`\n7. Share your work and create a pull request.\n\nTo Build documentation:\n```shell\ncd docs\npip install requirements.txt\nmake html\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antoinebrl/torchextractor",
    "keywords": "pytorch torch feature extraction",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchextractor",
    "package_url": "https://pypi.org/project/torchextractor/",
    "platform": "",
    "project_url": "https://pypi.org/project/torchextractor/",
    "project_urls": {
      "Bug Tracker": "https://github.com/antoinebrl/torchextractor/issues",
      "Homepage": "https://github.com/antoinebrl/torchextractor"
    },
    "release_url": "https://pypi.org/project/torchextractor/0.3.0/",
    "requires_dist": [
      "numpy",
      "torch (>=1.4.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Pytorch feature extraction made simple",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9697883,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eb12be31915b38fe1e4ec6108d0429e0b701ece7a95c42ab40b575cf3263974",
          "md5": "31ea271379638e30f66878e631cfc6b7",
          "sha256": "c15da5dc63ea6a5cbdadc7e1e63354d9838ef8d479efe8cbe2d22f745fb5a3b6"
        },
        "downloads": -1,
        "filename": "torchextractor-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31ea271379638e30f66878e631cfc6b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10316,
        "upload_time": "2021-03-06T00:03:29",
        "upload_time_iso_8601": "2021-03-06T00:03:29.361691Z",
        "url": "https://files.pythonhosted.org/packages/1e/b1/2be31915b38fe1e4ec6108d0429e0b701ece7a95c42ab40b575cf3263974/torchextractor-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f6fb62a29962d3ef32b8d33255597d97c0fc04cd9f5324a0585e366b30a7ca",
          "md5": "c71329094f9067371804b8ff510dc24f",
          "sha256": "ab9ce331bd5f9814bf9c2be7aa50a0b1c076083f00cf1fb14d93252c7827a226"
        },
        "downloads": -1,
        "filename": "torchextractor-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c71329094f9067371804b8ff510dc24f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5601,
        "upload_time": "2021-03-06T00:03:30",
        "upload_time_iso_8601": "2021-03-06T00:03:30.666236Z",
        "url": "https://files.pythonhosted.org/packages/e4/f6/fb62a29962d3ef32b8d33255597d97c0fc04cd9f5324a0585e366b30a7ca/torchextractor-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc94f14591882d0459a626d6aa8ed3699b08e6b79192c26cae87cbd6081cb835",
          "md5": "f036ed73387b252fe70c8daaba81410f",
          "sha256": "1bfd90eea59f69e375240326304d0091f77a0e536b997d3c64aba564890d4fa1"
        },
        "downloads": -1,
        "filename": "torchextractor-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f036ed73387b252fe70c8daaba81410f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10823,
        "upload_time": "2021-03-07T21:26:57",
        "upload_time_iso_8601": "2021-03-07T21:26:57.444613Z",
        "url": "https://files.pythonhosted.org/packages/cc/94/f14591882d0459a626d6aa8ed3699b08e6b79192c26cae87cbd6081cb835/torchextractor-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b079b4811b9571a35a021beae83d8abee2e669ad37056584cf24408de7c3ea0",
          "md5": "35b55d4bf448822c1139b447863cac53",
          "sha256": "fd1bbc1f32c7db25aaee7e3c0fff7abbff48f22bf43acae95bb3e55efd0282f3"
        },
        "downloads": -1,
        "filename": "torchextractor-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "35b55d4bf448822c1139b447863cac53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6250,
        "upload_time": "2021-03-07T21:26:58",
        "upload_time_iso_8601": "2021-03-07T21:26:58.665765Z",
        "url": "https://files.pythonhosted.org/packages/6b/07/9b4811b9571a35a021beae83d8abee2e669ad37056584cf24408de7c3ea0/torchextractor-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc94f14591882d0459a626d6aa8ed3699b08e6b79192c26cae87cbd6081cb835",
        "md5": "f036ed73387b252fe70c8daaba81410f",
        "sha256": "1bfd90eea59f69e375240326304d0091f77a0e536b997d3c64aba564890d4fa1"
      },
      "downloads": -1,
      "filename": "torchextractor-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f036ed73387b252fe70c8daaba81410f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10823,
      "upload_time": "2021-03-07T21:26:57",
      "upload_time_iso_8601": "2021-03-07T21:26:57.444613Z",
      "url": "https://files.pythonhosted.org/packages/cc/94/f14591882d0459a626d6aa8ed3699b08e6b79192c26cae87cbd6081cb835/torchextractor-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b079b4811b9571a35a021beae83d8abee2e669ad37056584cf24408de7c3ea0",
        "md5": "35b55d4bf448822c1139b447863cac53",
        "sha256": "fd1bbc1f32c7db25aaee7e3c0fff7abbff48f22bf43acae95bb3e55efd0282f3"
      },
      "downloads": -1,
      "filename": "torchextractor-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "35b55d4bf448822c1139b447863cac53",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6250,
      "upload_time": "2021-03-07T21:26:58",
      "upload_time_iso_8601": "2021-03-07T21:26:58.665765Z",
      "url": "https://files.pythonhosted.org/packages/6b/07/9b4811b9571a35a021beae83d8abee2e669ad37056584cf24408de7c3ea0/torchextractor-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}