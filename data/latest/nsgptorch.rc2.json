{
  "info": {
    "author": "Zeel B Patel",
    "author_email": "patel_zeel@iitgn.ac.in",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## NSGP-Torch\n\n## Examples\n\n### `gpytorch` model with `skgpytorch`\n```python\n# Import packages\nimport torch\nfrom regdata import NonStat2D\nfrom gpytorch.kernels import RBFKernel, ScaleKernel\nfrom skgpytorch.models import ExactGPRegressor\nfrom skgpytorch.metrics import mean_squared_error\n\n# Hyperparameters\nn_iters = 100\n\n# Load data\ndatafunc = NonStat2D(backend=\"torch\")\nX_train, y_train, X_test = map(lambda x: x.to(torch.float32), datafunc.get_data())\ny_test = datafunc.f(X_test[:, 0], X_test[:, 1]).to(torch.float32)\n\n# Define a kernel\nkernel = ScaleKernel(RBFKernel(ard_num_dims=X_train.shape[1]))\n\n# Define a model \nmodel = ExactGPRegressor(X_train, y_train, kernel, device='cpu')\n\n# Train the model\nmodel.fit(n_iters=n_iters, random_state=seed)\n\n# Predict the distribution\npred_dist = model.predict(X_train, y_train, X_test)\n\n# Compute RMSE and/or NLPD\nmse = mean_squared_error(pred_dist, y_test, squared=False)\nnlpd = neg_log_posterior_density(pred_dist, y_test)\n```\n\n### `nsgptorch` model with `skgpytorch`\n```python\n# Import packages\nimport torch\nfrom regdata import NonStat2D\n\nfrom nsgptorch.kernels import rbf\n\nfrom skgpytorch.models import ExactNSGPRegressor\nfrom skgpytorch.metrics import mean_squared_error\n\n# Hyperparameters\nn_iters = 100\n\n# Load data\ndatafunc = NonStat2D(backend=\"torch\")\nX_train, y_train, X_test = map(lambda x: x.to(torch.float32), datafunc.get_data())\ny_test = datafunc.f(X_test[:, 0], X_test[:, 1]).to(torch.float32)\n\n# Define a kernel list for each dimension\nkernel_list = [rbf, rbf]\n\n# Define inducing points for each dimension (must be none if not applicable)\ninducing_points = [None, None]\n\n# Define a model \nmodel = ExactNSGPRegressor(kernel_list, input_dim=2, inducing_points, device='cpu')\n\n# Train the model\nmodel.fit(X_train, y_train, n_iters=n_iters, random_state=seed)\n\n# Predict the distribution\npred_dist = model.predict(X_train, y_train, X_test)\n\n# Compute RMSE and/or NLPD\nmse = mean_squared_error(pred_dist, y_test, squared=False)\nnlpd = neg_log_posterior_density(pred_dist, y_test)\n```\n\n## Plan\n\n* Each kernel is 1D\n* Multiply kernels to each other\n\n## Ideas\n* Compute distance once and save it\n* Update skgpytorch to use 1 std instead of 0.1\n* Do something about mean learning of gpytorch for comparison\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/patel-zeel/nsgptorch",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nsgptorch",
    "package_url": "https://pypi.org/project/nsgptorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/nsgptorch/",
    "project_urls": {
      "Homepage": "https://github.com/patel-zeel/nsgptorch"
    },
    "release_url": "https://pypi.org/project/nsgptorch/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Non-stationary GP package written from scratch in PyTorch",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12584614,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c4eb6e7e8e209a276e1617e7756d65ceea912cdbcff18f481dda720c4bbde64",
          "md5": "11e9299a3a8fb66cf9c554d79b51f8ae",
          "sha256": "c1cbc52f165268c8d29464e7c48a0d989df3fc3e23e1ca1a2ee8d2f3fd361492"
        },
        "downloads": -1,
        "filename": "nsgptorch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "11e9299a3a8fb66cf9c554d79b51f8ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6926,
        "upload_time": "2022-01-15T18:48:27",
        "upload_time_iso_8601": "2022-01-15T18:48:27.267689Z",
        "url": "https://files.pythonhosted.org/packages/1c/4e/b6e7e8e209a276e1617e7756d65ceea912cdbcff18f481dda720c4bbde64/nsgptorch-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d10f53f20f1a351be5a0116929f795cd06aa522fb92e0bf7dfcad5bf5afa997b",
          "md5": "57e09fb32826e13f8ae067b1a522b081",
          "sha256": "354ada35852bac3ea02f6488a87b7e727ab53c48ac8fe95d5b798009c4dbc818"
        },
        "downloads": -1,
        "filename": "nsgptorch-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "57e09fb32826e13f8ae067b1a522b081",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7259,
        "upload_time": "2022-01-15T20:06:43",
        "upload_time_iso_8601": "2022-01-15T20:06:43.839602Z",
        "url": "https://files.pythonhosted.org/packages/d1/0f/53f20f1a351be5a0116929f795cd06aa522fb92e0bf7dfcad5bf5afa997b/nsgptorch-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d10f53f20f1a351be5a0116929f795cd06aa522fb92e0bf7dfcad5bf5afa997b",
        "md5": "57e09fb32826e13f8ae067b1a522b081",
        "sha256": "354ada35852bac3ea02f6488a87b7e727ab53c48ac8fe95d5b798009c4dbc818"
      },
      "downloads": -1,
      "filename": "nsgptorch-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "57e09fb32826e13f8ae067b1a522b081",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7259,
      "upload_time": "2022-01-15T20:06:43",
      "upload_time_iso_8601": "2022-01-15T20:06:43.839602Z",
      "url": "https://files.pythonhosted.org/packages/d1/0f/53f20f1a351be5a0116929f795cd06aa522fb92e0bf7dfcad5bf5afa997b/nsgptorch-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}