{
  "info": {
    "author": "skydownacai",
    "author_email": "932997367@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# aiocea  异步数字货币交易所接口框架\n\naiocea是 基于asynico 与aiohttp的数字货币交易所接口整合框架。该框架封装了币安交易所的API(未来将支持更多交易所), 实现了串行,并发, 串行与并发混合执行的 网络请求任务。 该框架逻辑清晰，\n\n## Getting Started : 快速理解框架与逻辑\n\n一个异步网络请求称之为一个任务(Task), 整个框架的调用是任务驱动型的，且具有标准的流程。但框架的设计仍然提供了足够多的灵活性。完成任何一个特定的加密数字货币接口请求任务都要经过以下几个步骤: \n\n### 1. 实例交易所API\n\naiocea 在utils.py 中封装了交易所Restful API请求方法(目前仅支持币安)。其中, 币安交易所为类`BinanceRestApi` ，它封装了请求币安交易所Restful API时的请求方法。传入你的API_KEY与API_SERECT即可完成一个交易所API请求实例。如下代码:\n\n```python\nfrom utils import BinanceRestApi\nAPI = BinanceRestApi(api_key= \"your api key here\",\n\t\t\t\t\t api_secret=\"your api secret here\")\n```\n\n`BinanceRestApi` 中定义了request方法。调用该方法请求某个网址将会在请求头与querystring中添加币安交易所需要特定的参数，从而实现数据的获取。\n\n### 2. 定义任务\n\n在aico中,`Task`子类,  `GatherTask` 类, `SerialTask` 类， 都是框架所认可 任务类型。我们统称为任务泛型`GenericTask`。下面我们将逐个阐述。所有`GenericTask` 类对象都具有**result**属性，方便在完成任务后调取结果。\n\n#### `Task `及其子类\n\n在tasks.py中定义了`Task`类。任何一个继承自`Task`类, 且在 async def \\__call__(self, *args, **kwargs) 方法中定义了异步请求结果的类，都称之为某个特定任务类。如请求币安币本位合约服务器ping: \n\n```python\nclass CoinMPing(Task):\n\t'''\n\t测试服务器连通\n\t'''\n\tasync def __call__(self, *args, **kwargs):\n\t\tresponse = await self.binance_API.\\\n\t\trequest(method = \"GET\",url = BinanceRestApi.CoinM_BASE_URL + \"/dapi/v1/ping\")\n\t\treturn response\n\n\tdef __str__(self):\n\t\treturn  \"ping服务器\"\n```\n\n`Task`类是一个抽象类, 他是整个框架执行任务的最小单元。它要求每个子类实现async def \\__call__(self, *args, **kwargs) 方法，定义异步请求的结果，并使用return返回, 从而完成对某个特定任务的定义。\n\n任何继承自`Task`的子类对象都有以下属性和方法:\n\n1. **result :**  \n\n   该属性保存该任务在异步请求成功后的返回结果即async def \\__call__()中的return值 。**用户不可手动设置,由框架维护。**\n\n2. **binance_API :**  \n\n   **该属性的设置是为了实现不同的API_KEY,API_SECRET同时获取数据**，它是`BinanceRestApi` 的实例, 因此用户在定义`Task`子类时候可以调用该属性的`request`方法，实现特定API下的网络请求。该属性的默认值将继承自类变量 `Task.default_binance_API` 。因此你可以通过`Task.set_default_binance_API()`方法来设置类变量，那么在之后创建的 `Task`子类实例的**binance_API**属性都将继承这个值。下面的代码例子展示了如何通过设置类变量的方法实现不同`Task`子类在初始化时拥有不同的**binance_API**属性。\n\n   ```python\n   from tasks import Task\n   from utils import  BinanceRestApi\n   from tasklists import CoinMPing\n\n\n   #定义两个不同的API请求接口\n   API1 = BinanceRestApi(api_key   = \"key_1\",\n   \t\t\t\t\t  api_secret= \"screte_1\")\n\n   API2 = BinanceRestApi(api_key   = \"key_2\",\n   \t\t\t\t\t  api_secret= \"screte_2\")\n\n   #设置Task子类实例默认使用的binanceRestApi\n\n   Task.set_default_binance_API(API1)\n\n   task1 = CoinMPing() # CoinMPing是预定义好的Task子类,\n\n   print(\"task1:\", task1.binance_API.api_key) # output: key_1\n\n   #更换Task子类实例默认使用的binanceRestApi\n   Task.set_default_binance_API(API2)\n\n   task2 = CoinMPing() # CoinMPing是预定义好的Task子类,\n\n   print(\"task2:\", task2.binance_API.api_key) # output: key_2\n   ```\n\n3. \\__str__ : 该方法用于命名这个特定的任务。如若没有实现，将继承自父类`Task`中的方法 \n\n**aiocea 在tasklists.py 里已经定义了常用的币安数据请求任务，在大多数场景下,直接导入使用即可。返回数据均为原始返回数据json处理后的结果。**\n\n\n\n#### `GatherTask`  并发任务类\n\n`GatherTask` 用于将多个`GenericTask` 实例对象包装成一个并发任务类。使得在执行的时候可以并发执行。注意,`GenericTask` 是三种任务类型的统称，因此我们实际上不仅可以将多个单独任务包装成一个并行任务，也可以将多个串行任务包装成一个并发任务。实例化一个`GatherTask` 非常简单。只需要在构造时,传入多个`GenericTask` 实例对象即可。如下例子:\n\n```python\nfrom tasks import GatherTask\nfrom tasklists import CoinMPing,CoinMServerTime\n\n#ping服务器与获取服务器时间并发执行\ngathertask = GatherTask(CoinMPing(),\n                  CoinMServerTime())\n#展示任务\ngathertask.show_tasks()\n# output:\n# 并发任务(2):\n#     ping币安币本位服务器\n#     获取币安币本位服务器时间\n\n```\n\n我们可以通过show_tasks()方法展示当前并发任务的任务队列。\n\n`GatherTask` 具有**result**属性，他是传入的所有`GenericTask` 实例对象对应的**result**属性构成的列表。\n\n\n\n#### `SerialTask`  串行任务类\n\n与`GatherTask`类型类似。`SerialTask`  用于将多个`GenericTask` 实例对象包装成一个串行任务类。使得在执行的时候保证是同步执行。实例化一个`SerialTask`  非常简单。只需要在构造时,传入多个`GenericTask` 实例对象即可。如下例子:\n\n```python\nfrom tasks import SerialTask\nfrom tasklists import CoinMPing,CoinMServerTime\n\n#ping服务器与获取服务器时间不同执行\nserialtask = SerialTask(CoinMPing(),\n                     CoinMServerTime())\n#展示任务\nserialtask.show_tasks()\n# output:\n# 串行任务(2):\n#     ping币安币本位服务器\n#     获取币安币本位服务器时间\n```\n\n我们也可以通过show_tasks()方法展示当前并发任务的任务队列。\n\n`SerialTask` 具有**result**属性，他是传入的所有`GenericTask` 实例对象对应的**result**属性构成的列表。\n\n\n\n### 3. 定义任务队列\n\n在aiocea中, 执行任务是以队列模型为执行的。执行器将根据不同的任务队列实现不同形式的任务执行顺序。任务队列中的任务\n\naiocea在taskoperator.py中已经预定义了以下三种任务队列模型:\n\n- `TaskQueue` 先进先出任务队列\n- `TaskStack` 先进后出任务栈\n- `TaskRing`   先进先出循环任务队列。刚对象的生成接受两个参数`iter_num` 与`iter_interval`分别表示任务队列循环次数与每次循环后的sleep时间。\n\n这三种类型统称为: 泛型任务队列`GenericTaskQueue`。\n\n`GenericTaskQueue` 与 `SerialTask`  ,`GatherTask`  类都继承自 `BaseMultiTaskOperate` 这个类，这个类重载了\\__add__ 与 _\\_ sub__方法，使得我们能够使用加号与减号添加或删减任务。并且都具有`add_tasks` 方法用于添加任务，`show_tasks`方法用于打印当前任务。\n\n下面的列子展示了如何生成一个任务队列。\n\n```python\nfrom tasks import GatherTask,SerialTask\nfrom taskoperator import TaskRing\nfrom tasklists import *\n\n#定义一个循环任务队列\nring = TaskRing()\n\n#往循环任务队列添加任务\nring += CoinMPing() #Task 0\nring += GatherTask(SerialTask(CoinMServerTime(),CoinMFetchTicker(symbol = \"BTCUSD_PERP\",\n                                                 pair   = \"BTCUSD\")),\n               SerialTask(CoinMServerTime(), CoinMFetchTicker(symbol=\"ETHUSD_PERP\",\n                                                  pair=\"ETHUSD\")))  #Task1\n#展示当前任务\nring.show_tasks()\n# output:\n# -------当前任务队列(2)-------\n# Task 0\n# ping币安币本位服务器\n# Task 1\n# 并发任务(2):\n#    串行任务(2):\n#        获取币安币本位服务器时间\n#        获取币本位合约:BTCUSD_PERP 实时价格\n#    串行任务(2):\n#        获取币安币本位服务器时间\n#        获取币本位合约:ETHUSD_PERP 实时价格\n#-----------------------\n```\n\n### 4. 创建任务执行器,添加任务队列, 获得执行结果\n\n在aiocea中, 执行队列中的任务。都需要任务执行器来执行，它是定义在taskoperator.py中`TaskOperater`类的对象。\n\n任务执行器将同步执行所添加任务队列中的任务，每执行完一个任务，该任务的**result**属性将从**None** 变为对应的异步请求的结果。\n\n任务执行器的整个执行过程的步骤如下所示:\n\n1. 给执行器添加执行任务队列q\n2. 循环调用q中\\__next__方法，获得当前要执行的任务task\n3. 在事件循环loop中执行该任务异步回调方法并获得结果, 并将task.result设置为该结果。\n4. 如若任务队列raise StopIteration。停止执行, 否则重复步骤2。\n\n在`TaskOperater` 对象具有以下方法或属性:\n\n1. **taskqueue**属性。 即执行器的 执行任务队列\n\n2. `add_queue` 方法。用于添加一个执行任务队列。传入值必须为泛型任务队列`GenericTaskQueue`对象，并设置为**taskqueue**属性。该方法返回执行器自身,即self。\n\n3. `run` 方法。 执行整个运行步骤。 完成时任务队列中的所有result属性均为返回结果。\n\n4. `fishih_task_generator` 方法 :  \n\n   该方法接受一个参数`exec_interval` 表示每个任务队列中每个任务执行后，sleep时间。\n\n   该方法返回一个生成器，在执行步骤3完成时, yield 该任务对象。\n\n5. `runSingleTask` 方法。 传入一个 泛型任务`GenericTask` 对象。在方法内生成一个`TaskQueue` 对象作为执行器的执行任务队列，并在任务队列中添加传入的任务对象。该方法返回执行器自身，即self。\n\n6. `repeatSingleTask` 方法。 传入一个 泛型任务`GenericTask` 对象。在方法内生成一个`TaskRing` 对象作为执行器的执行任务队列，并在任务队列中添加传入的任务对象。该方法返回执行器自身，即self。\n\n\n\n以上便是整个框架的基础逻辑和方法。更多的使用与方法请参考后续的API文档。该框架实际上实际上可以还完成日常其他异步请求结果。\n\n## Examples : 使用例子\n\n#### 获取服务器时间\n\n```python\nfrom taskoperator import TaskQueue,TaskOperater\nfrom tasklists import *\n\n#设置任务默认的API\nTask.set_default_binance_API(\n   BinanceRestApi(api_key   = \"key_1\",\n\t\t\t      api_secret= \"screte_1\"))\n\n#定义一个任务\ntask = CoinMServerTime()\n#定义一个任务队列\nq = TaskQueue()\n#往任务队列添加任务\nq +=task #Task 0\n\n#定义一个执行器并添加任务队列\nop = TaskOperater().add_queue(q)\n\n#执行任务队列的任务\nop.run()\n\n#获得任务结果\nprint(task.result)\n```\n\n#### 每秒循环获取Ticker\n\n```python\nfrom taskoperator import TaskRing,TaskOperater\nfrom tasklists import *\n\n#设置任务默认的API\nTask.set_default_binance_API(\n   BinanceRestApi(api_key   = \"key_1\",\n\t\t\t      api_secret= \"screte_1\"))\n\n#定义一个Ticker任务\ntask = CoinMFetchTicker(symbol = \"BTCUSD_PERP\",pair = \"BTCUSD\")\n\n#定义一个循环任务队列\nq = TaskRing(iter_interval = 1) #循环间隔为1秒\n\n#往任务队列添加任务\nq += task #Task 0\n\n#展示任务队列\nq.show_tasks()\n\nop = TaskOperater().add_queue(q)\n\n#执行任务队列的任务\nfor task in op.fishih_task_generator():\n   print(task.result)\n\n#output:\n# -------当前任务队列(1)-------\n# Task 0\n# 获取币本位合约:BTCUSD_PERP 实时价格\n# -----------------------\n# 定义一个执行器并添加任务队列\n# [{'symbol': 'BTCUSD_PERP', 'ps': 'BTCUSD', 'price': '55163.4', 'time': 1618897014034}]\n# [{'symbol': 'BTCUSD_PERP', 'ps': 'BTCUSD', 'price': '55163.4', 'time': 1618897014034}]\n# [{'symbol': 'BTCUSD_PERP', 'ps': 'BTCUSD', 'price': '55163.4', 'time': 1618897014034}]\n# [{'symbol': 'BTCUSD_PERP', 'ps': 'BTCUSD', 'price': '55163.4', 'time': 1618897014034}]\n# ...\n```\n\n#### 每秒循环 并发获取 服务器时间 与 Ticker\n\n```python\nfrom taskoperator import TaskRing,TaskOperater\nfrom tasks import GatherTask\nfrom tasklists import *\n\n#设置任务默认的API\nTask.set_default_binance_API(\n   BinanceRestApi(api_key   = \"key_1\",\n\t\t\t      api_secret= \"screte_1\"))\n#定义一个循环任务队列\nq = TaskRing(iter_interval = 1) #循环间隔为1秒\n\n#往任务队列添加并发任务\nq += GatherTask(CoinMServerTime(),\n            CoinMFetchTicker(symbol = \"BTCUSD_PERP\",pair = \"BTCUSD\"))\n\n#展示任务队列\nq.show_tasks()\n\nfor task in TaskOperater().add_queue(q).fishih_task_generator():\n   print(task.result)\n\n#output:\n#-------当前任务队列(1)-------\n#Task 0\n#并发任务(2):\n#    获取币安币本位服务器时间\n#    获取币本位合约:BTCUSD_PERP 实时价格\n#-----------------------\n#[{'serverTime': 1618897355627}, [{'symbol': 'BTCUSD_PERP', 'ps': 'BTCUSD', 'price': '54927.5', 'time': #1618897355247}]]\n#[{'serverTime': 1618897356024}, [{'symbol': 'BTCUSD_PERP', 'ps': 'BTCUSD', 'price': '54925.0', 'time': #1618897356011}]]\n#[{'serverTime': 1618897356404}, [{'symbol': 'BTCUSD_PERP', 'ps': 'BTCUSD', 'price': '54925.0', 'time': #1618897356011}]]\n#...\n```\n\n#### 串行执行k线获取\n\n```python\nfrom taskoperator import TaskQueue,TaskOperater\nfrom tasklists import CoinMFetchKline\nfrom utils import *\nfrom tasks import Task\nimport time\n\n#设置任务默认的API\nTask.set_default_binance_API(\n   BinanceRestApi(api_key   = \"key_1\",\n\t\t\t      api_secret= \"screte_1\"))\n\n#定义一个任务队列\nq = TaskQueue()\n\n#获取两个周期的k线\nq += CoinMFetchKline(symbol = \"BTCUSD_PERP\",\n                 interval=\"1m\",\n                 limit  = 1,\n                 endTime = int(time.time()) * 1000)\nq += CoinMFetchKline(symbol = \"BTCUSD_PERP\",\n                 interval=\"1m\",\n                 limit  = 1,\n                 endTime = (int(time.time()) - 60) * 1000)\n\nq.show_tasks()\n\nfor task in TaskOperater().add_queue(q).fishih_task_generator():\n   print(task,\"finish!\")\n   print(task.result)\n#output: \n#-------当前任务队列(2)-------\n#Task 0\n#获取币本位合约:BTCUSD_PERP 1m周期 K线<None to 1618898005000>(limit 1)\n#Task 1\n#获取币本位合约:BTCUSD_PERP 1m周期 K线<None to 1618897945000>(limit 1)\n#-----------------------\n#获取币本位合约:BTCUSD_PERP 1m周期 K线<None to 1618898005000>(limit 1) finish!\n#[[1618897980000, '54963.2', '54975.9', '54963.2', '54975.8', '2662', 1618898039999, '4.84281221', 73, #'2329', '4.23701807', '0']]\n#获取币本位合约:BTCUSD_PERP 1m周期 K线<None to 1618897945000>(limit 1) finish!\n#[[1618897920000, '54881.1', '54963.2', '54881.1', '54963.1', '17844', 1618897979999, '32.49263090', 320, #15905', '28.96235089', '0']]    \n```\n\n#### 并发执行两个币种k线的串行获取\n\n```python\nfrom taskoperator import TaskQueue,TaskOperater\nfrom tasklists import CoinMFetchKline\nfrom utils import *\nfrom tasks import Task,SerialTask,GatherTask\nimport time\n\n#设置任务默认的API\nTask.set_default_binance_API(\n   BinanceRestApi(api_key= \"WULDU3TzwOSNR0vRL3zPyumx06ji4O9YKeDM0JpzQA5Gnv6m4RvZMolKK9w8N1qk\",\n               api_secret=\"Hc3kKfgi7ZnBgkGCQ3vWmkJEsIsLJwhs8wM5tvL594nH3TvOKCw9V6f97vZLCtF2\")\n   )\n\n#定义一个任务队列\nq = TaskQueue()\n\n#获取两个币中的两个周期的k线的并发执行\n\nq += GatherTask(\n   #第一个币种的两个k线任务\n   SerialTask(CoinMFetchKline(symbol = \"BTCUSD_PERP\",\n                 interval=\"1m\",\n                 limit  = 1,\n                 endTime = int(time.time()) * 1000),\n            CoinMFetchKline(symbol=\"BTCUSD_PERP\",\n                        interval=\"1m\",\n                        limit=1,\n                        endTime=int(time.time()) * 1000)\n            )\n   ,\n   SerialTask(CoinMFetchKline(symbol=\"ETHUSD_PERP\",\n                        interval=\"1m\",\n                        limit=1,\n                        endTime=int(time.time()) * 1000),\n            CoinMFetchKline(symbol=\"ETHUSD_PERP\",\n                        interval=\"1m\",\n                        limit=1,\n                        endTime=int(time.time()) * 1000)\n            )\n   )\n\nq.show_tasks()\n\nfor task in TaskOperater().add_queue(q).fishih_task_generator():\n   print(\"finish\")\n   BTC_Kline1 = task.result[0][0]\n   BTC_Kline2 = task.result[0][1]\n   ETH_Kline1 = task.result[1][0]\n   ETH_Kline2 = task.result[1][1]\n   print(BTC_Kline1)\n   print(BTC_Kline2)\n   print(ETH_Kline1)\n   print(ETH_Kline2)\n#output:\n#-------当前任务队列(1)-------\n#Task 0\n#并发任务(2):\n#    串行任务(2):\n#        获取币本位合约:BTCUSD_PERP 1m周期 K线<None to 1618898371000>(limit 1)\n#        获取币本位合约:BTCUSD_PERP 1m周期 K线<None to 1618898371000>(limit 1)\n#    串行任务(2):\n#        获取币本位合约:ETHUSD_PERP 1m周期 K线<None to 1618898371000>(limit 1)\n#        获取币本位合约:ETHUSD_PERP 1m周期 K线<None to 1618898371000>(limit 1)\n#-----------------------\n#finish\n#[[1618898340000, '54962.4', '55016.4', '54962.4', '55016.4', '15264', 1618898399999, '27.75471862', 150, #'10905', '19.82837640', '0']]\n#[[1618898340000, '54962.4', '55016.4', '54962.4', '55016.4', '15284', 1618898399999, '27.79107142', 151, #'10925', '19.86472920', '0']]\n#[[1618898340000, '2118.17', '2120.31', '2118.17', '2119.90', '47561', 1618898399999, '224.39426159', 109, '27294', '128.79773623', '0']]\n#[[1618898340000, '2118.17', '2120.31', '2118.17', '2119.90', '47561', 1618898399999, '224.39426159', 109, #'27294', '128.79773623', '0']]\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/skydownacai/AIOCA",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiocea",
    "package_url": "https://pypi.org/project/aiocea/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiocea/",
    "project_urls": {
      "Homepage": "https://github.com/skydownacai/AIOCA"
    },
    "release_url": "https://pypi.org/project/aiocea/0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A asynico io framework for crypto api",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10117044,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d363988f26421527c3fd6014b2616fab1d1e6db12b45cd36084cdd97c985f447",
          "md5": "eccd63a37fd8f318f98b6e69376d816b",
          "sha256": "01305e699ff5d74640f50e71e19af8d14aa82c6e59a3fdc29d96943b4e2ffb24"
        },
        "downloads": -1,
        "filename": "aiocea-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eccd63a37fd8f318f98b6e69376d816b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7164,
        "upload_time": "2021-04-20T09:05:43",
        "upload_time_iso_8601": "2021-04-20T09:05:43.958509Z",
        "url": "https://files.pythonhosted.org/packages/d3/63/988f26421527c3fd6014b2616fab1d1e6db12b45cd36084cdd97c985f447/aiocea-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6818d22a130ae621aff73c18b69be46661214d8283f3b860328bf67b05de2fa",
          "md5": "db605ea6f03bd2901dd3750786bc74cf",
          "sha256": "99e9ee8824f79e215341c5db74cdbc3069570b15595b5b7fe47785fce252d8e2"
        },
        "downloads": -1,
        "filename": "aiocea-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "db605ea6f03bd2901dd3750786bc74cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8751,
        "upload_time": "2021-04-20T09:05:45",
        "upload_time_iso_8601": "2021-04-20T09:05:45.746190Z",
        "url": "https://files.pythonhosted.org/packages/c6/81/8d22a130ae621aff73c18b69be46661214d8283f3b860328bf67b05de2fa/aiocea-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d363988f26421527c3fd6014b2616fab1d1e6db12b45cd36084cdd97c985f447",
        "md5": "eccd63a37fd8f318f98b6e69376d816b",
        "sha256": "01305e699ff5d74640f50e71e19af8d14aa82c6e59a3fdc29d96943b4e2ffb24"
      },
      "downloads": -1,
      "filename": "aiocea-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eccd63a37fd8f318f98b6e69376d816b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7164,
      "upload_time": "2021-04-20T09:05:43",
      "upload_time_iso_8601": "2021-04-20T09:05:43.958509Z",
      "url": "https://files.pythonhosted.org/packages/d3/63/988f26421527c3fd6014b2616fab1d1e6db12b45cd36084cdd97c985f447/aiocea-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6818d22a130ae621aff73c18b69be46661214d8283f3b860328bf67b05de2fa",
        "md5": "db605ea6f03bd2901dd3750786bc74cf",
        "sha256": "99e9ee8824f79e215341c5db74cdbc3069570b15595b5b7fe47785fce252d8e2"
      },
      "downloads": -1,
      "filename": "aiocea-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "db605ea6f03bd2901dd3750786bc74cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8751,
      "upload_time": "2021-04-20T09:05:45",
      "upload_time_iso_8601": "2021-04-20T09:05:45.746190Z",
      "url": "https://files.pythonhosted.org/packages/c6/81/8d22a130ae621aff73c18b69be46661214d8283f3b860328bf67b05de2fa/aiocea-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}