{
  "info": {
    "author": "josephchen",
    "author_email": "josephchenhk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# QTrader: A Light Event-Driven Algorithmic Trading Engine\n\n<p align=\"center\">\n    <img src =\"https://img.shields.io/badge/version-0.1.0-blueviolet.svg\"/>\n    <img src =\"https://img.shields.io/badge/platform-windows|linux|macos-yellow.svg\"/>\n    <img src =\"https://img.shields.io/badge/python-3.8|3.9|3.10-blue.svg\" />\n    <img src =\"https://img.shields.io/github/workflow/status/vnpy/vnpy/Python%20application/master\"/>\n    <img src =\"https://img.shields.io/badge/license-JXW-orange\"/>\n</p>\n\n**Latest update on 2022-07-20**\n\nQTrader is a light and flexible event-driven algorithmic trading engine that \ncan be used to backtest strategies, and seamlessly switch to live trading \nwithout any pain.\n\n## Key Features\n\n* Completely **same code** for backtesting / simulation / live trading \n\n* Support trading of various assets: equity, futures\n\n* Resourceful functionalities to support live monitoring and analysis\n\n## Quick Install\n\nYou may run the folllowing command to install QTrader immediately:\n\n```python\n# Virtual environment is recommended (python 3.8 or above is supported)\n>> conda create -n qtrader python=3.8\n>> conda activate qtrader\n\n# Install stable version from pip (currently version 0.0.2)\n>> pip install qtrader\n\n# Alternatively, install latest version from github \n>> pip install git+https://github.com/josephchenhk/qtrader@master\n```\n\n## Prepare the Data\n\nQTrader supports bar data at the moment. What you need to do is creating a \nfolder with the name of the security you are interested in. Let's say you want \nto backtest or trade HK equity **\"HK.01157\"** in frequency of **1 minute**, your \ndata folder should be like this (where \"K_1M\" stands for 1 minute; you can also \nfind a sample from the qtrader/examples/data):\n\n![alt text](https://raw.githubusercontent.com/josephchenhk/qtrader/master/contents/data_folder.png \"data folder\")\n\nAnd you can prepare OHLCV data in CSV format, with dates as their file names, \ne.g., **\"yyyy-mm-dd.csv\"**: \n\n![alt text](https://raw.githubusercontent.com/josephchenhk/qtrader/master/contents/data_folder_details.png \"data folder details\")\n\nInside each csv file, the data columns should look like this:\n\n![alt text](https://raw.githubusercontent.com/josephchenhk/qtrader/master/contents/bar_data_sample.png \"bar data sample\")\n\nNow you can specify the path of data folder in `qtrader/config/config.py`. For \nexample, set\n\n```python\nDATA_PATH = {\n    \"kline\": \"path_to_your_qtrader_folder/examples/data/k_line\",\n}\n```\n\n## Implement a Strategy\n\nTo implement a strategy is simple in QTrader. A strategy needs to implement \n`init_strategy` and `on_bar` methods in `BaseStrategy`. Here is a quick sample:\n\n```python\nfrom qtrader.core.strategy import BaseStrategy\n\nclass MyStrategy(BaseStrategy):\n\n    def init_strategy(self):\n        pass\n\n    def on_bar(self, cur_data:Dict[str, Dict[Security, Bar]]):\n        print(cur_data)\n```\n\n\n## Record Variables\n\nQTrader provides a module named `BarEventEngineRecorder` to record variables \nduring backtesting and/or trading. By default it saves `datetime`, \n`portfolio_value` and `action` at every time step. \n\nIf you want to record additional variables (let's say it is called `var`), you \nneed to write a method called `get_var` in your strategy:\n\n```python\nfrom qtrader.core.strategy import BaseStrategy\n\nclass MyStrategy(BaseStrategy):\n\n    def get_var(self):\n        return var\n```\n\nAnd initialize your `BarEventEngineRecorder` with the same vairable `var=[]`(if \nyou want to record every timestep) or `var=None`(if you want to record only the \nlast updated value):\n\n```python\nrecorder = BarEventEngineRecorder(var=[])\n```\n\n\n## Run a Backtest\n\nNow we are ready to run a backtest. Here is a sample of running a backtest in \nQTrader:\n\n```python\n# Security \nstock_list = [\n    Stock(code=\"HK.01157\", lot_size=100, security_name=\"中联重科\", exchange=Exchange.SEHK),\n]\n\n# Gateway\ngateway_name = \"Backtest\"\ngateway = BacktestGateway(\n    securities=stock_list,\n    start=datetime(2021, 3, 15, 9, 30, 0, 0),\n    end=datetime(2021, 3, 17, 16, 0, 0, 0),\n    gateway_name=gateway_name,\n)\ngateway.SHORT_INTEREST_RATE = 0.0\ngateway.set_trade_mode(TradeMode.BACKTEST)\n\n# Core engine\nengine = Engine(gateways={gateway_name: gateway})\n\n# Strategy initialization\ninit_capital = 100000\nstrategy_account = \"DemoStrategy\"\nstrategy_version = \"1.0\"\nstrategy = DemoStrategy(\n    securities={gateway_name: stock_list},\n    strategy_account=strategy_account,\n    strategy_version=strategy_version,\n    init_strategy_cash={gateway_name: init_capital},\n    engine=engine,\n    strategy_trading_sessions={\n        \"HK.01157\": [\n            [datetime(1970, 1, 1, 9, 30, 0), datetime(1970, 1, 1, 12, 0, 0)],\n            [datetime(1970, 1, 1, 13, 0, 0), datetime(1970, 1, 1, 16, 0, 0)],\n        ],\n)\nstrategy.init_strategy()\n\n# Recorder\nrecorder = BarEventEngineRecorder()\n\n# Event engine\nevent_engine = BarEventEngine(\n    {\"demo\": strategy},\n    {\"demo\": recorder},\n    engine\n)\n\n# Start event engine\nevent_engine.run()\n\n# Program terminates normally\nengine.log.info(\"Program shutdown normally.\")\n```\n\nAfter shutdown, you will be able to find the results in qtrader/results, with \nthe folder name of latest time stamp:\n\n![alt text](https://raw.githubusercontent.com/josephchenhk/qtrader/master/contents/results.png \"results\")\n\nThe result.csv file saves everything you want to record in \n`BarEventEngineRecorder`; while pnl.html is an interactive plot of the equity \ncurve of your running strategy:\n\n![alt text](https://raw.githubusercontent.com/josephchenhk/qtrader/master/contents/pnl.png \"pnl\")\n\n## Simulation / Live trading\n\nOk, your strategy looks good now. How can you put it to paper trading and/or \nlive trading? In QTrader it is extremely easy to switch from backtest mode to \nsimulation or live trading mode. What you need to modify is just \n**two** lines (replace a backtest gateway with a live trading gateway!):\n\n```python\n# Currently you can use \"Futu\", \"Ib\", and \"Cqg\" \ngateway_name = \"Futu\"  \n\n# Use FutuGateway, IbGateway, or CqgGateway accordingly\n# End time should be set to a future time stamp when you expect the program terminates\ngateway = FutuGateway(\n    securities=stock_list,\n    end=datetime(2022, 12, 31, 16, 0, 0, 0),  \n    gateway_name=gateway_name,\n)\n\n# Choose either TradeMode.SIMULATE or TradeMode.LIVETRADE\ngateway.set_trade_mode(TradeMode.LIVETRADE)\n```\n\nThat's it! You switch from backtest to simulation / live trading mode now. \n\n**Important Notice**: In the demo sample, the live trading mode will keep on\nsending orders, please be aware of the risk when running it.\n\n## Live Monitoring\n\nWhen running the strategies, the trader typically needs to monitor the market \nand see whether the signals are triggered as expected. QTrader provides with\nsuch **dashboard**(visualization panel) which can dynamically update the market data and gives\nout entry and exit signals in line with the strategies. \n\nYou can activate this function in your `config.py`:\n\n```python\nACTIVATED_PLUGINS = [.., \"monitor\"]\n```\n\nAfter running the main script, you\nwill be able to open a web-based monitor in the browser: `127.0.0.1:8050`:\n\n![alt text](https://raw.githubusercontent.com/josephchenhk/qtrader/master/contents/live_monitor.png \"live_monitor\")\n\nQTrader is also equipped with a **Telegram Bot**, which allows you get instant\ninformation from your trading program. To enable this function, you can add your\ntelegram information in `qtrader.config.config.py`(you can refer to the\nfollowing [link](https://core.telegram.org/bots/api) for detailed guidance):\n\n```python\nACTIVATED_PLUGINS = [.., \"telegram\"]\n\nTELEGRAM_TOKEN = \"50XXXXXX16:AAGan6nFgmrSOx9vJipwmXXXXXXXXXXXM3E\"\nTELEGRAM_CHAT_ID = 21XXXXXX49\n```\n\nIn this way, your mobile phone with telegram will automatically receive a\ndocumenting message：\n\n<img src=\"./contents/telegram_bot.png\" width=35%>\n\nYou can use your mobile phone to monitor and control your strategy now.\n\n## Contributing\n* Fork it (https://github.com/josephchenhk/qtrader/fork)\n* Study how it's implemented.\n* Create your feature branch (git checkout -b my-new-feature).\n* Use [flake8](https://pypi.org/project/flake8/) to ensure your code format\ncomplies with PEP8.\n* Commit your changes (git commit -am 'Add some feature').\n* Push to the branch (git push origin my-new-feature).\n* Create a new Pull Request.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Quantitative Trading,Qtrader,Backtest",
    "license": "JXW",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qtrader",
    "package_url": "https://pypi.org/project/qtrader/",
    "platform": "any",
    "project_url": "https://pypi.org/project/qtrader/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/qtrader/0.0.4/",
    "requires_dist": [
      "sqlalchemy",
      "pandas",
      "numpy",
      "pytz",
      "clickhouse-driver",
      "matplotlib",
      "plotly",
      "python-telegram-bot",
      "dash"
    ],
    "requires_python": "",
    "summary": "Qtrader: Event-Driven Algorithmic Trading Engine",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14687143,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37c98cca848c839b7940d37b4c57601843e289dfd641e9672637eb8f7563fb23",
          "md5": "1a68258706f035772914401fb2303b37",
          "sha256": "da559565a9999a61e7cea91346df4119221f4724baa3fe1acb896dbb2a39531c"
        },
        "downloads": -1,
        "filename": "qtrader-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a68258706f035772914401fb2303b37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1345,
        "upload_time": "2020-09-22T02:05:08",
        "upload_time_iso_8601": "2020-09-22T02:05:08.821438Z",
        "url": "https://files.pythonhosted.org/packages/37/c9/8cca848c839b7940d37b4c57601843e289dfd641e9672637eb8f7563fb23/qtrader-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3f7aeba409e91bd01627bce68b7592aafdd0de1690544ea0cd384e50d33e443",
          "md5": "93c9f80de9e9be8f04a5766249f616d1",
          "sha256": "837a08fdc0362647b791fb163aeb01ddb4446456f65ae63577556f1f7b1ceb77"
        },
        "downloads": -1,
        "filename": "qtrader-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "93c9f80de9e9be8f04a5766249f616d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1338,
        "upload_time": "2020-09-22T02:05:11",
        "upload_time_iso_8601": "2020-09-22T02:05:11.507685Z",
        "url": "https://files.pythonhosted.org/packages/b3/f7/aeba409e91bd01627bce68b7592aafdd0de1690544ea0cd384e50d33e443/qtrader-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8785afb353eeca4188537b076475e76210c6bae674d0fc50b11b5b09672bee22",
          "md5": "da36d4487b4821ef5731724b9c3269c5",
          "sha256": "032a0483e7dfb39b5343001f22ac892905e0e4d5c6eadfdccf5f7760fcf6057c"
        },
        "downloads": -1,
        "filename": "qtrader-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da36d4487b4821ef5731724b9c3269c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1538669,
        "upload_time": "2021-12-30T09:48:03",
        "upload_time_iso_8601": "2021-12-30T09:48:03.575222Z",
        "url": "https://files.pythonhosted.org/packages/87/85/afb353eeca4188537b076475e76210c6bae674d0fc50b11b5b09672bee22/qtrader-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "604a9ea8c8449197c1d1a83df5069238fb856227453edbb62e1a469c9759c479",
          "md5": "5b805d2ae9396af1b3bcf2eb83be0003",
          "sha256": "f5130dd07a25114ea8cb9551c1052404f4b009e9511129ba70d1b7cb48dae714"
        },
        "downloads": -1,
        "filename": "qtrader-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5b805d2ae9396af1b3bcf2eb83be0003",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1507419,
        "upload_time": "2021-12-30T09:48:19",
        "upload_time_iso_8601": "2021-12-30T09:48:19.698233Z",
        "url": "https://files.pythonhosted.org/packages/60/4a/9ea8c8449197c1d1a83df5069238fb856227453edbb62e1a469c9759c479/qtrader-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dfdd816b89deeb10e0ff7dc1efbb898d676c8e6678b0ba974defdb71bcfb070",
          "md5": "f88a9c40f15f2ad020b2fd7183942765",
          "sha256": "fe9882dfa4a799191e48e10e5d21b2ff5546519c090f7b309a43a7edc7e093e6"
        },
        "downloads": -1,
        "filename": "qtrader-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f88a9c40f15f2ad020b2fd7183942765",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2147615,
        "upload_time": "2022-08-08T08:44:12",
        "upload_time_iso_8601": "2022-08-08T08:44:12.861036Z",
        "url": "https://files.pythonhosted.org/packages/7d/fd/d816b89deeb10e0ff7dc1efbb898d676c8e6678b0ba974defdb71bcfb070/qtrader-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41108111d1d1b1ac3444535cbbfe534d7f99cd2f9ec4b12a54dfe76dc37c6670",
          "md5": "a32dc41cd58f972b023f73d8cdf03851",
          "sha256": "f02c2a0613061535fdf0dae1b20bb248d578ff87827b7ae82c8192e38fbbce49"
        },
        "downloads": -1,
        "filename": "qtrader-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a32dc41cd58f972b023f73d8cdf03851",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4013513,
        "upload_time": "2022-08-08T08:44:18",
        "upload_time_iso_8601": "2022-08-08T08:44:18.422843Z",
        "url": "https://files.pythonhosted.org/packages/41/10/8111d1d1b1ac3444535cbbfe534d7f99cd2f9ec4b12a54dfe76dc37c6670/qtrader-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e81c5c097f99c060ce5adeb492d51fe67db04242145e592676cba29e6c99d2f0",
          "md5": "94ff484542341a4bc3bab8c0b22419ac",
          "sha256": "c3950ead0f5fbb067cb41ebd2db1ee067bfbe0207b33da87f19da440279e92c3"
        },
        "downloads": -1,
        "filename": "qtrader-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94ff484542341a4bc3bab8c0b22419ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2151065,
        "upload_time": "2022-08-08T10:03:39",
        "upload_time_iso_8601": "2022-08-08T10:03:39.643473Z",
        "url": "https://files.pythonhosted.org/packages/e8/1c/5c097f99c060ce5adeb492d51fe67db04242145e592676cba29e6c99d2f0/qtrader-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bffe55460c95f902c5d4d4580879ad4ec9774725dca1b9855c586822d4d61c58",
          "md5": "0a3e5de7f6e59b4c5340f092795cd524",
          "sha256": "a7baa5893eadf103a9db23cdf5ff6a187c3abb2ee663f8ce5de2288b490464f6"
        },
        "downloads": -1,
        "filename": "qtrader-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0a3e5de7f6e59b4c5340f092795cd524",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4017751,
        "upload_time": "2022-08-08T10:03:46",
        "upload_time_iso_8601": "2022-08-08T10:03:46.094067Z",
        "url": "https://files.pythonhosted.org/packages/bf/fe/55460c95f902c5d4d4580879ad4ec9774725dca1b9855c586822d4d61c58/qtrader-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e81c5c097f99c060ce5adeb492d51fe67db04242145e592676cba29e6c99d2f0",
        "md5": "94ff484542341a4bc3bab8c0b22419ac",
        "sha256": "c3950ead0f5fbb067cb41ebd2db1ee067bfbe0207b33da87f19da440279e92c3"
      },
      "downloads": -1,
      "filename": "qtrader-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "94ff484542341a4bc3bab8c0b22419ac",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 2151065,
      "upload_time": "2022-08-08T10:03:39",
      "upload_time_iso_8601": "2022-08-08T10:03:39.643473Z",
      "url": "https://files.pythonhosted.org/packages/e8/1c/5c097f99c060ce5adeb492d51fe67db04242145e592676cba29e6c99d2f0/qtrader-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bffe55460c95f902c5d4d4580879ad4ec9774725dca1b9855c586822d4d61c58",
        "md5": "0a3e5de7f6e59b4c5340f092795cd524",
        "sha256": "a7baa5893eadf103a9db23cdf5ff6a187c3abb2ee663f8ce5de2288b490464f6"
      },
      "downloads": -1,
      "filename": "qtrader-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "0a3e5de7f6e59b4c5340f092795cd524",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4017751,
      "upload_time": "2022-08-08T10:03:46",
      "upload_time_iso_8601": "2022-08-08T10:03:46.094067Z",
      "url": "https://files.pythonhosted.org/packages/bf/fe/55460c95f902c5d4d4580879ad4ec9774725dca1b9855c586822d4d61c58/qtrader-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}