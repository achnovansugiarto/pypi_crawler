{
  "info": {
    "author": "ryuvsken",
    "author_email": "ryuvskendev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "\n# 딥러닝용 더미 데이터 생성 자동화\n\n- Deep-Learning Dummy Data File Generator by csv File \n\n\n---\n\n\n## Overview\n\n외부 노출에 민감한 자료가 포함된 데이터는 개인 정보 보호법에 의하여 망분리 PC (인터넷이 차단된 PC) 에서 관리된다\n\n대부분의 망분리 PC 는 터미널의 역할만 하고 성능이 떨어지는 미니 PC 를 사용하게 된다\n\n딥러닝을 효율적으로 수행하기 위해서는 성능 좋은 PC 에서 실제 데이터를 사용하는 것이나 현실적으로 그렇지 못한 상황일 경우 더미 데이터를 사용해야 한다\n\n\n---\n\n\n## 망 분리 PC 의 한계점에 따른 더미 데이터 사용\n\n![](img/readme-01.png)\n\n\n---\n\n\n## 실제 데이터에서 더미 데이터를 만드는 과정\n\n- 망분리 PC 에서 데이터 특성을 파악한다\n- 더미 데이터를 만들기 위해서 실제 데이터의 특성을 발췌한다\n    - 실제 데이터의 스키마 구조를 발췌한다.<br/>\n    (이때 망분리 PC 는 클립보드 복사나 파일 복사가 어렵기 때문에 수기로 작성하게 된다)\n    - 실제 데이터에서 각 필드별 최대값, 최소 값 등도 발췌한다\n    - 날짜형의 경우 범위를 확인하여 발췌해야 한다\n    - 코드 값 같은 문자열 상수는 발췌하기 어렵다\n- 발췌한 특성 정보를 바탕으로 더미 데이터를 생성하기 위한 코드를 작성한다\n    - 각 필드별 특성을 작성한다\n    - 수치, 문자열 (코드형 / 랜덤 문자열), 날짜형의 랜덤 생성 코드를 작성한다\n\n\n---\n\n\n## 더미 데이터 생성 자동화 소개\n\n![](img/readme-02.png)\n\n\n---\n\n\n## Usage\n\n- Install the prerequisites DLDummyGen\n\n```\n> pip install DLDummyGen\n```\n\n\n- Sample Code\n\n```python\n\nfrom DLDummyGen.DLDummyGen import DLLogger, DLDummyFieldHandler, DLDummyGenerator\n\nif __name__ == '__main__':\n\n    # Original csv File (Real Data)\n    CSV_FILE_NAME = \"pima-indians-diabetes.csv\"\n\n    # Maximum length of data to be generated\n    GEN_ROW_MAX = 10\n\n    # Length of Unique String Field (eg, Code Value) Judgment criteria\n    UNIQUE_FIELD_COUNT = 1000\n\n\n    # Create Logging Object\n    logger = DLLogger()\n\n    dg = DLDummyGenerator(CSV_FILE_NAME, GEN_ROW_MAX, UNIQUE_FIELD_COUNT, logger=logger)\n\n    # Run to Generate python source code\n    dg.gen_src_from_csv()\n\n```\n\n\n- With Custom Field Callback Handler Code\n\n```python\n\nfrom DLDummyGen.DLDummyGen import DLLogger, DLDummyFieldHandler, DLDummyGenerator\n\nclass DLDummyFieldAutoIncrement(DLDummyFieldHandler):\n    \"\"\"\n    Auto Increment ID - Custom Field Callback Handler\n    \"\"\"\n\n    def on_custom_field(self, dg, fgen, column, dataset):\n        fgen.write('gen_df[\\\"' + column + '\\\"] = ')\n        fgen.write('[\\'ID{:05d}\\'.format(idx+1) for idx in range(GEN_ROW_MAX)]\\n\\n')\n\n\nclass DLDummyFieldChoiceString(DLDummyFieldHandler):\n    \"\"\"\n    Choice String - Custom Field Callback Handler\n    \"\"\"\n\n    def on_custom_field(self, dg, fgen, column, dataset):\n        fgen.write('gen_df[\\\"' + column + '\\\"] = ')\n        fgen.write('choice([\\\"' + '\\\", \\\"'.join(['Y', 'N']) + '\\\"], GEN_ROW_MAX)\\n\\n')\n\n...\n\nif __name__ == '__main__':\n\n    # Original csv File (Real Data)\n    CSV_FILE_NAME = \"pima-indians-diabetes.csv\"\n\n    # Maximum length of data to be generated\n    GEN_ROW_MAX = 10\n\n    # Length of Unique String Field (eg, Code Value) Judgment criteria\n    UNIQUE_FIELD_COUNT = 1000\n\n\n    # Create Logging Object\n    logger = DLLogger()\n\n    dg = DLDummyGenerator(CSV_FILE_NAME, GEN_ROW_MAX, UNIQUE_FIELD_COUNT, logger=logger)\n\n\n    # Definition to generate random date/time\n    # [[Field Name, Start Date, End Date, Input Date Format, Output Date Format]]\n    DATE_FIELDS = [\n        [' Glucose', '2019-01', '2019-12', '%Y-%m', '%Y%m']\n    ]\n    dg.set_date_fields(DATE_FIELDS)\n\n    # Definition to custom field handler\n    # [[Field Name, DLDummyFieldHandler class implement instance]]\n    CUSTOM_FIELDS = [\n        ['Pregnancies', DLDummyFieldAutoIncrement()]\n        , [' Outcome', DLDummyFieldChoiceString()]\n    ]\n    dg.set_custom_fields(CUSTOM_FIELDS)\n\n    # Run to Generate python source code\n    dg.gen_src_from_csv()\n\n```\n\n\n---\n\n\n## Generated Python Source Code\n\n- Install the prerequisites numpy, pandas and faker (Python 3.7)\n\n```\n> pip install numpy\n> pip install pandas\n> pip install faker\n```\n\n- Generated Python Source Code\n\n```python\nimport pandas as pd\n\nimport numpy as np\nfrom numpy import random\nfrom datetime import datetime\n\n...\n\ngen_df = pd.DataFrame()\n\n# Pregnancies\ngen_df[\"Pregnancies\"] = ['ID{:05d}'.format(idx+1) for idx in range(GEN_ROW_MAX)]\n\n#  Glucose\ngen_df[\" Glucose\"] = [fake.date_between(\n    start_date=datetime.strptime('2019-01', '%Y-%m')\n    , end_date=datetime.strptime('2019-12', '%Y-%m')).strftime('%Y%m')\n    for _ in range(GEN_ROW_MAX)]\n\n...\n\n#  Age\ngen_df[\" Age\"] = random.randint(21, 81 + 1, GEN_ROW_MAX, dtype=\"int64\")\n\n#  Outcome\ngen_df[\" Outcome\"] = choice([\"Y\", \"N\"], GEN_ROW_MAX)\n\n\ngen_df.to_csv('gen_pima-indians-diabetes.csv', index=False)\n\nprint('\\ngen_pima-indians-diabetes.csv File Created...\\n')\n\n```\n\n---\n\n\n## Appendix\n\n- [Numpy](https://numpy.org/doc/stable/) : NumPy is the fundamental package for scientific computing in Python\n- [Pandas](https://pandas.pydata.org/docs) : pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n- [Faker](https://github.com/joke2k/faker) : Python package that generates fake data for you\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ryuvsken",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DLDummyGen",
    "package_url": "https://pypi.org/project/DLDummyGen/",
    "platform": "",
    "project_url": "https://pypi.org/project/DLDummyGen/",
    "project_urls": {
      "Homepage": "https://github.com/ryuvsken"
    },
    "release_url": "https://pypi.org/project/DLDummyGen/0.0.2/",
    "requires_dist": [
      "numpy",
      "pandas",
      "faker"
    ],
    "requires_python": "",
    "summary": "Deep-Learning Dummy File Generator by csv File",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8490486,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a6f56c416f921679ab1e9ace550b0d2d496bb58f383139d94b6c86373905070",
          "md5": "d8b9f51ab97cf1dd56a5762c53dfd88a",
          "sha256": "559b4a91ca291d2045eba94235c5d2d2e5a811a4c7105aa8b9aed399ded5743e"
        },
        "downloads": -1,
        "filename": "DLDummyGen-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8b9f51ab97cf1dd56a5762c53dfd88a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10761,
        "upload_time": "2020-10-24T10:38:11",
        "upload_time_iso_8601": "2020-10-24T10:38:11.210458Z",
        "url": "https://files.pythonhosted.org/packages/1a/6f/56c416f921679ab1e9ace550b0d2d496bb58f383139d94b6c86373905070/DLDummyGen-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34756d7d0091766d54f483eb3ff2604df22cd427ef0fd5ecbd40fca3e4ce8792",
          "md5": "1e3ffbc6a14cb50a3dc5eda32e703c5d",
          "sha256": "c6542882cce6147586edfe377076d07dd4e17d47730c9f59c08f3cff1e2901ad"
        },
        "downloads": -1,
        "filename": "DLDummyGen-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1e3ffbc6a14cb50a3dc5eda32e703c5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 211172,
        "upload_time": "2020-10-24T10:38:12",
        "upload_time_iso_8601": "2020-10-24T10:38:12.865779Z",
        "url": "https://files.pythonhosted.org/packages/34/75/6d7d0091766d54f483eb3ff2604df22cd427ef0fd5ecbd40fca3e4ce8792/DLDummyGen-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a6f56c416f921679ab1e9ace550b0d2d496bb58f383139d94b6c86373905070",
        "md5": "d8b9f51ab97cf1dd56a5762c53dfd88a",
        "sha256": "559b4a91ca291d2045eba94235c5d2d2e5a811a4c7105aa8b9aed399ded5743e"
      },
      "downloads": -1,
      "filename": "DLDummyGen-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d8b9f51ab97cf1dd56a5762c53dfd88a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10761,
      "upload_time": "2020-10-24T10:38:11",
      "upload_time_iso_8601": "2020-10-24T10:38:11.210458Z",
      "url": "https://files.pythonhosted.org/packages/1a/6f/56c416f921679ab1e9ace550b0d2d496bb58f383139d94b6c86373905070/DLDummyGen-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34756d7d0091766d54f483eb3ff2604df22cd427ef0fd5ecbd40fca3e4ce8792",
        "md5": "1e3ffbc6a14cb50a3dc5eda32e703c5d",
        "sha256": "c6542882cce6147586edfe377076d07dd4e17d47730c9f59c08f3cff1e2901ad"
      },
      "downloads": -1,
      "filename": "DLDummyGen-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1e3ffbc6a14cb50a3dc5eda32e703c5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 211172,
      "upload_time": "2020-10-24T10:38:12",
      "upload_time_iso_8601": "2020-10-24T10:38:12.865779Z",
      "url": "https://files.pythonhosted.org/packages/34/75/6d7d0091766d54f483eb3ff2604df22cd427ef0fd5ecbd40fca3e4ce8792/DLDummyGen-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}