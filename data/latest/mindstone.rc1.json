{
  "info": {
    "author": "Joshua Sello",
    "author_email": "joshuasello@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mindstone\n\nThe mindstone package offers an easy to use framework for creating control systems.\nThis package houses a collection of tools that make it possible\nfor a remote processing source to control a local actor.\n\nThe package defines two entities. The first being whats known as a driver. This entity\ninterfaces directly with a given platform, such as a Raspberry Pi micro-controller,\nand acts as a bridge between said platform and a higher functioning controller.\nThe other entity is the controller. The controller handles most of the processing and \ndefines the behaviours and protocols by which a driver operates. The controller does\nthis by processing objects called gates. These gates are connected to each other to form a network.\nGates represent simple processes that can be ordered and arranged in\ndifferent ways to produce different behaviours. Gates also allow users to extend the \nfunctions of a control system by allowing users to embed their own custom-made functions\nand operations into the network.\n\n\n## Installing\nInstall and update using [pip](https://pip.pypa.io/en/stable/quickstart/)\n```commandline\npip install mindstone\n```\n\nClone from Github\n```commandline\ngit clone https://github.com/joshuasello/mindstone.git\n```\n\n## Basic Usage\n\n### Creating a driver\nOn the driver's platform, the mindstone package can be\ncreate a new driver in the following way:\n```python\nfrom mindstone.embedded import start_driver\n\nif __name__ == '__main__':\n    start_driver(\"raspberry\", hostname=\"10.0.0.1\", port=50000)\n```\nThis will start the connection on the driver's side, allowing \nfor a new controller to connect to it. In this case, the platform\nused by the driver is the Raspberry Pi platform.\n\n### Creating a Controller\n```python\n\nfrom mindstone.control import *\n\n\ndef change_servo_angle(**kwargs):\n    return {\"test_component_1\": {\"angle\": 90, \"is_active\": True}}\n\n\ngates = [\n    RootGate(\"host_1\", {\n        \"my_component\": (\"servo\", {\"model\": \"SG90\", \"trigger\": 8})\n    }),\n    FunctionGate(change_servo_angle),\n    ConfigGate(\"host_1\")\n]\n\nconnections = [\n    (0, 1),\n    (1, 2)\n]\n\nhosts = {\n    \"host_1\": (\"10.0.0.1\", 50000)\n}\n\nmy_controller = Controller(gates, connections, hosts)\nfinal_received_data = my_controller.run()\n```\n\n1. **Importing the controller tools**\n    \n    Before we can start creating our controller we need to import all the\n    necessary tools: \n    \n    ```python\n   from mindstone.control import *\n    ```\n   \n2. **Setting up the gates and gate connections** \n\n    ```python\n    gates = [\n        RootGate(\"host_1\", {\n            \"my_component\": (\"servo\", {\"model\": \"SG90\", \"trigger\": 8})\n        }),\n        FunctionGate(change_servo_angle),\n        ConfigGate(\"host_1\")\n    ]\n\n    connections = [\n        (0, 1),\n        (1, 2)\n    ]\n   \n    hosts = {\n        \"host_1\": (get_hostname(), 50000)\n    }\n    ```\n   \n    Each gate performs a specific task when activated.\n    The root gate ```RootGate()``` is where it all begins. When activated, it initializes the \n    connection with the driver. During this connection, it tells the driver what components\n    the driver should register with the platform it is on, and receives information about\n    the connected driver that can be used by the rest of the gates in the network.\n    \n    The function gate ```FunctionGate()``` executes a callable when triggered. This callable\n    takes in the data received from the previous gate and outputs new \n    data in the form of a python dictionary.\n    \n    Lastly, the configuration gate ```ConfigGate()``` is used to communicate new configurations for\n    components that are in use by the driver. This will send the data from the previous gate as a\n    new configuration to the connected driver. Essentially, if you are only connecting to one host,\n    during the runtime of your network, only one configuration gate is needed.\n    \n    To connect the gates to each other to form the network, the indices of the the gates in the \n    list that holds them are used to identify each gate. Alternatively, a dictionary could also\n    be used where keywords are instead used to identify gates.\n    \n    For gates that need to communicate with the driver (like the root gate and the configuration gate), a\n    host needs to be attached so that the gate knows where it should connect to. these hosts are defined\n    using a dictionary object, such as the one used in the above example. It is then passed into the controller,\n    along with the gates and connection, when the controller is being initialized.\n    It is important to make sure that any host a gate uses in the network is listed in this dictionary. \n\n3. **Initializing the controller**\n    ```python\n    my_controller = Controller(gates, connections, hosts)\n    final_received_data = my_controller.run()\n    ```\n   \n    Now that everything has been set up, we can finally initialize the controller object. \n    once initialized, the controller can be activated using the ```run()``` method.\n    \n\n\n## Contributers\n- Joshua Sello",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/joshuasello/mindstone/archive/0.0.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joshuasello/mindstone",
    "keywords": "raspberrypi,micro-controller,robots",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mindstone",
    "package_url": "https://pypi.org/project/mindstone/",
    "platform": "",
    "project_url": "https://pypi.org/project/mindstone/",
    "project_urls": {
      "Download": "https://github.com/joshuasello/mindstone/archive/0.0.2.tar.gz",
      "Homepage": "https://github.com/joshuasello/mindstone"
    },
    "release_url": "https://pypi.org/project/mindstone/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "The mindstone package offers an easy to use framework for creating control systems.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7481918,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0687204cc5a13973efa951105e57fc6207c7eb84b54b1a7a69c386621e8dca13",
          "md5": "03aa56bc7303885530db82a7005b6322",
          "sha256": "ee652a6e1258968c8ae3a8e752dab36547094afd517cbd6e2aaa2a7954f4f0f0"
        },
        "downloads": -1,
        "filename": "mindstone-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "03aa56bc7303885530db82a7005b6322",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19012,
        "upload_time": "2020-06-15T17:46:09",
        "upload_time_iso_8601": "2020-06-15T17:46:09.550823Z",
        "url": "https://files.pythonhosted.org/packages/06/87/204cc5a13973efa951105e57fc6207c7eb84b54b1a7a69c386621e8dca13/mindstone-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0687204cc5a13973efa951105e57fc6207c7eb84b54b1a7a69c386621e8dca13",
        "md5": "03aa56bc7303885530db82a7005b6322",
        "sha256": "ee652a6e1258968c8ae3a8e752dab36547094afd517cbd6e2aaa2a7954f4f0f0"
      },
      "downloads": -1,
      "filename": "mindstone-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "03aa56bc7303885530db82a7005b6322",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 19012,
      "upload_time": "2020-06-15T17:46:09",
      "upload_time_iso_8601": "2020-06-15T17:46:09.550823Z",
      "url": "https://files.pythonhosted.org/packages/06/87/204cc5a13973efa951105e57fc6207c7eb84b54b1a7a69c386621e8dca13/mindstone-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}