{
  "info": {
    "author": "Nicki Skafte Detlefsen et al.",
    "author_email": "nsde@dtu.dk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "![Logo](images/stochman.png)\r\n---\r\n\r\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/stochman)](https://pypi.org/project/stochman/)\r\n[![PyPI Status](https://badge.fury.io/py/stochman.svg)](https://badge.fury.io/py/stochman)\r\n[![PyPI Status](https://pepy.tech/badge/stochman)](https://pepy.tech/badge/stochman)\r\n[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/MachineLearningLifeScience/stochman/blob/master/LICENSE)\r\n[![Tests](https://github.com/MachineLearningLifeScience/stochman/actions/workflows/tests.yml/badge.svg)](https://github.com/MachineLearningLifeScience/stochman/blob/master/.github/workflows/tests.yml)\r\n[![codecov](https://codecov.io/gh/MachineLearningLifeScience/stochman/branch/master/graph/badge.svg)](https://codecov.io/gh/MachineLearningLifeScience/stochman)\r\n# StochMan - Stochastic Manifolds made easier\r\n\r\nStochMan (Stochastic Manifolds) is a collection of elementary algorithms for computations \r\non random manifolds learned from finite noisy data. Each algorithm assume that the considered \r\nmanifold model implement a specific set of interfaces.\r\n\r\n## Installation\r\n\r\nFor the latest release\r\n```bash\r\npip install stochman\r\n```\r\nFor master version with most recent changes we recommend:\r\n```bash\r\ngit clone https://github.com/MachineLearningLifeScience/stochman\r\ncd stochman\r\npython setup.py install\r\n```\r\n\r\n## API overview\r\n\r\n`StochMan` includes a number of modules that each defines a set of functionalities for\r\nworking with manifold data.\r\n\r\n### `stochman.nnj`: `torch.nn` with jacobians\r\n\r\nKey to working with Riemannian geometry is the ability to compute jacobians. The jacobian matrix\r\ncontains the first order partial derivatives. `stochman.nnj` provides plug-in replacements for the many \r\nused `torch.nn` layers such as `Linear`, `BatchNorm1d` etc. and commonly used activation functions such as `ReLU`,\r\n`Sigmoid` etc. that enables fast computations of jacobians between the input to the layer and the output. \r\n\r\n``` python\r\nimport torch\r\nfrom stochman import nnj\r\n\r\nmodel = nnj.Sequential(nnj.Linear(10, 5),\r\n                       nnj.ReLU())\r\nx = torch.randn(100, 10)\r\ny, J = model(x, jacobian=True)\r\nprint(y.shape) # output from model: torch.size([100, 5])\r\nprint(J.shape) # jacobian between input and output: torch.size([100, 5, 10])\r\n```\r\n\r\n### `stochman.manifold`: Interface for working with Riemannian manifolds\r\n\r\nA manifold can be constructed simply by specifying its metric. The example below shows a toy example where the metric grows with the distance to the origin.\r\n\r\n``` python\r\nimport torch\r\nfrom stochman.manifold import Manifold\r\n\r\nclass MyManifold(Manifold):\r\n    def metric(self, c, return_deriv=False):\r\n        N, D = c.shape  # N is number of points where we evaluate the metric; D is the manifold dimension\r\n        sq_dist_to_origin = torch.sum(c**2, dim=1, keepdim=True)  # Nx1\r\n        G = (1 + sq_dist_to_origin).unsqueeze(-1) * torch.eye(D).repeat(N, 1, 1)  # NxDxD\r\n        return G\r\n        \r\nmodel = MyManifold()\r\np0, p1 = torch.randn(1, 2), torch.randn(1, 2)\r\nc, _ = model.connecting_geodesic(p0, p1)  # geodesic between two random points\r\n```\r\n\r\nIf you manifold is embedded (e.g. an autoencoder) then you only have to provide a function for realizing the embedding (i.e. a decoder) and StochMan takes care of the rest (you, however, have to learn the autoencoder yourself).\r\n\r\n``` python\r\nimport torch\r\nfrom stochman.manifold import EmbeddedManifold\r\n\r\nclass Autoencoder(EmbeddedManifold):\r\n    def embed(self, c, jacobian = False):\r\n        return self.decode(c)\r\n        \r\nmodel = Autoencoder()\r\np0, p1 = torch.randn(1, 2), torch.randn(1, 2)\r\nc, _ = model.connecting_geodesic(p0, p1)  # geodesic between two random points\r\n```\r\n\r\n### `stochman.geodesic`: computing geodesics made easy!\r\n\r\nGeodesics are energy-minimizing curves, and StochMan computes them as such. You can use the high-level `Manifold` interface or the more explicit one:\r\n\r\n``` python\r\nimport torch\r\nfrom stochman.geodesic import geodesic_minimizing_energy\r\nfrom stochman.curves import CubicSpline\r\n\r\nmodel = MyManifold()\r\np0, p1 = torch.randn(1, 2), torch.randn(1, 2)\r\ncurve = CubicSpline(p0, p1)\r\ngeodesic_minimizing_energy(curve, model)\r\n```\r\n\r\n### `stochman.curves`: Simple curve objects\r\n\r\nWe often want to manipulate curves when computing geodesics. StochMan provides an implementation of cubic splines and discrete curves, both with the end-points fixed.\r\n\r\n``` python\r\nimport torch\r\nfrom stochman.curves import CubicSpline\r\n\r\np0, p1 = torch.randn(1, 2), torch.randn(1, 2)\r\ncurve = CubicSpline(p0, p1)\r\n\r\nt = torch.linspace(0, 1, 50)\r\nct = curve(t)  # 50x2\r\n```\r\n\r\n## Licence\r\n\r\nPlease observe the Apache 2.0 license that is listed in this repository. \r\n\r\n## BibTeX\r\nIf you want to cite the framework feel free to use this (but only if you loved it ðŸ˜Š):\r\n\r\n```bibtex\r\n@article{software:stochman,\r\n  title={StochMan},\r\n  author={Nicki S. Detlefsen and Alison Pouplin and Cilie W. Feldager and Cong Geng and Dimitris Kalatzis and Helene Hauschultz and Miguel GonzÃ¡lez Duque and Frederik Warburg and Marco Miani and SÃ¸ren Hauberg},\r\n  journal={GitHub. Note: https://github.com/MachineLearningLifeScience/stochman/},\r\n  year={2021}\r\n}\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/CenterBioML/stochman/archive/0.3.0.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stochman",
    "package_url": "https://pypi.org/project/stochman/",
    "platform": null,
    "project_url": "https://pypi.org/project/stochman/",
    "project_urls": {
      "Download": "https://github.com/CenterBioML/stochman/archive/0.3.0.zip"
    },
    "release_url": "https://pypi.org/project/stochman/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "StochMan is a collection of elementary algorithms for computations on random manifolds",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14091798,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "590fddcd51dd494e0ee7f53e875bebecdb355d65eadc4faf7f46db5beb7c6711",
          "md5": "9430869041497d3d6bd993146cd225e8",
          "sha256": "1c1dad1b6ac4bc825c5f0c397fd3a73cf71c50f80501c705a8c5c9eb064a19ae"
        },
        "downloads": -1,
        "filename": "stochman-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9430869041497d3d6bd993146cd225e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 3053,
        "upload_time": "2021-01-18T10:44:06",
        "upload_time_iso_8601": "2021-01-18T10:44:06.924591Z",
        "url": "https://files.pythonhosted.org/packages/59/0f/ddcd51dd494e0ee7f53e875bebecdb355d65eadc4faf7f46db5beb7c6711/stochman-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25a275703e9e25a106adfb334e4d35706eb9a083ed5c51a35a1800cc7e2c8928",
          "md5": "a7321d583182716f70c6e3eddd70dcf5",
          "sha256": "baac046d56d6f820f59fd964cfd02fd8af38afcbf8a3bc776b8719135dcb8e31"
        },
        "downloads": -1,
        "filename": "stochman-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a7321d583182716f70c6e3eddd70dcf5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 3610,
        "upload_time": "2021-01-18T11:23:19",
        "upload_time_iso_8601": "2021-01-18T11:23:19.610467Z",
        "url": "https://files.pythonhosted.org/packages/25/a2/75703e9e25a106adfb334e4d35706eb9a083ed5c51a35a1800cc7e2c8928/stochman-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "266019747981f5e70dc0b362aef3034acbb59243be6f7a5a6ed6d87474f32017",
          "md5": "b6409d73e9c41836fcfbf84886d78088",
          "sha256": "9d2f40a047fb7a44c7fb738ef8d079d00874e8e9e335c164ebfe6fc042519c6d"
        },
        "downloads": -1,
        "filename": "stochman-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b6409d73e9c41836fcfbf84886d78088",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28735,
        "upload_time": "2022-02-11T12:10:17",
        "upload_time_iso_8601": "2022-02-11T12:10:17.581267Z",
        "url": "https://files.pythonhosted.org/packages/26/60/19747981f5e70dc0b362aef3034acbb59243be6f7a5a6ed6d87474f32017/stochman-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35f50dfe4bfa43ceca1b1e966120008e427a95795645bbf5c1feb2d541a9364d",
          "md5": "db0d26b2dbde72c95965a98c524ca04b",
          "sha256": "ea61ac094da19f5552474231ba7be3d9d3adbaa86cc93caeec6356410beb8843"
        },
        "downloads": -1,
        "filename": "stochman-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "db0d26b2dbde72c95965a98c524ca04b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33411,
        "upload_time": "2022-06-10T08:11:07",
        "upload_time_iso_8601": "2022-06-10T08:11:07.636681Z",
        "url": "https://files.pythonhosted.org/packages/35/f5/0dfe4bfa43ceca1b1e966120008e427a95795645bbf5c1feb2d541a9364d/stochman-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35f50dfe4bfa43ceca1b1e966120008e427a95795645bbf5c1feb2d541a9364d",
        "md5": "db0d26b2dbde72c95965a98c524ca04b",
        "sha256": "ea61ac094da19f5552474231ba7be3d9d3adbaa86cc93caeec6356410beb8843"
      },
      "downloads": -1,
      "filename": "stochman-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "db0d26b2dbde72c95965a98c524ca04b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 33411,
      "upload_time": "2022-06-10T08:11:07",
      "upload_time_iso_8601": "2022-06-10T08:11:07.636681Z",
      "url": "https://files.pythonhosted.org/packages/35/f5/0dfe4bfa43ceca1b1e966120008e427a95795645bbf5c1feb2d541a9364d/stochman-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}