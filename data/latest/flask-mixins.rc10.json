{
  "info": {
    "author": "Tomas Sheers",
    "author_email": "t.sheers@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# flask-mixins\nA collection of mixins to use with Flask to facilitate a cleaner architecture.\n\n## SchemaMixin\nThe `SchemaMixin` is a way of abstracting some of the logic for validating and accessing the payload data and any query (filter) data, while handling the serialisation of the returned objects into json, using [Marshmallow](https://github.com/marshmallow-code/marshmallow).\n\nThe SchemaMixin isn't meant to compete with [Flask Marshmallow](https://flask-marshmallow.readthedocs.io/en/latest/) as such. It is a different approach with different priorities. The SchemaMixin is just a mixin, so it doesn't support any hyperlinking logic.\n\nWhat the SchemaMixin does allow is:\n1) The request schema can be defined on the MethodView, and provides a utility `self.get_validated_data()` that returns the data having been validated against the defined request schema. The request schema might vary (a POST request might require a specific schema for creating the object, while a PATCH request might require another schema). So inspired by [Django Rest Framework](https://www.django-rest-framework.org/), there are a handful of methods that can be overridden to allow the schemas to be dynamic.\n\n![SchemaMixin validated data](./docs/diagrams/schema-mixins-validated-data.png)\n\n2) A filter schema can be defined, that is used by the utility `self.get_filter_data()`, allowing the filter args to be validated against a dedicated marshmallow schema.\n\n![SchemaMixin filter data](./docs/diagrams/schema-mixins-filter-data.png)\n\n3) The `dispatch_request` is overridden so that if a non-dictionary object is returned, the object will be dumped using the provided schema, again with multiple options for overriding methods to make the schema dynamic.\n\n![SchemaMixin dispatch request](./docs/diagrams/schema-mixins-dispatch.png)\n\n\n### Examples\n#### Example using Marshmallow and Flask-sqlalchemy\n```python\nfrom flask.views import MethodView\nfrom flask_view_mixins import SchemaMixin\nfrom marshmallow import Schema, fields\n\n# Your model defined somewhere\nfrom mymodels import UserModel\n\n\nclass UserSchema(Schema):\n    name = fields.String()\n    age = fields.Int()\n\n\nclass UserView(SchemaMixin, MethodView):\n    schema = UserSchema\n\n    def post(self):\n        user = UserModel(**self.get_validated_data())\n        db.session.add(user)\n        db.session.commit()\n        return user, 201\n```\n#### Example of a filter and options override\n```python\nfrom flask.views import MethodView\nfrom flask_view_mixins import SchemaMixin\n\n# Your model and schema defined somewhere\nfrom mymodels import UserModel\nfrom myschemas import UserSchema\n\n\nclass UserView(SchemaMixin, MethodView):\n    schema = UserSchema\n\n    def get_response_schema_options(self):\n        return {\"many\": True}\n\n    def get(self):\n        users = UserModel.query.filter_by(**self.get_filter_data())\n        return users, 200\n```\n#### Example with more overrides (the different schemas may perform different validation logic because in the update case, and instance already exists)\n```python\nfrom flask.views import MethodView\nfrom flask_view_mixins import SchemaMixin\nfrom flask import request\n\n# Your model and schema defined somewhere\nfrom mymodels import UserModel\nfrom myschemas import UserSchema, CreateUserSchema, UpdateUserSchema\n\n\nclass UserView(SchemaMixin, MethodView):\n    schema = UserSchema\n\n    def get_post_schema_class(self):\n        return CreateUserSchema\n\n    def post(self):\n        user = UserModel(**self.get_validated_data())\n        db.session.add(user)\n        db.session.commit()\n        return user, 201\n\n    def get_patch_schema_class(self):\n        return UpdateUserSchema\n\n    def get_patch_schema_options(self):\n        # Imagine that only the name can be updated\n        return {\"partial\": True, \"only\": (\"name\",)}\n\n    def get_patch_schema_context(self):\n        # Imagine the patch schema requires the existing instance in the context\n        return {\"instance\": UserModel.query.get(request.view_args[\"user_id\"])}\n\n    def patch(self, user_id: int):\n        # This is a bit unsafe, but its just for demo purposes\n        UserModel.query.filter(UserModel.id == user_id).update(\n            **self.get_validated_data()\n        )\n        db.session.commit()\n        return None, 204\n\n    def get_response_schema_options(self):\n        return {\"many\": True}\n\n    def get(self):\n        users = UserModel.query.filter_by(**self.get_filter_data())\n        return users, 200\n```\n\n## PermissionMixin\nThe `PermissionMixin` allows permission checks to be performed prior before dispatching the request. The tools for handling the permissions themselves are agnostic, but should likely rely on `request.view_args` and `g`. For the given list of the permissions, each permission will be called, and the permission should raise a `PermissionError` if it fails, and raise/return nothing if it passes.\n\nMethods can be overridden again based to allow more dynamic permissions.\n\n![PermissionMixin functions](./docs/diagrams/permissions-mixins.png)\n\n### Examples\n#### Example with simple permissions\n```python\nfrom flask import g\n\n\nclass Authenticated:\n    \"\"\"Permission class that assumes a middleware has attached an authenticated user\"\"\"\n\n    @staticmethod\n    def check_permission():\n        if not g.user:\n            raise PermissionError(\"Authenticated user required\")\n\n\nclass UserView(PermissionMixin, MethodView):\n    permissions = (Authenticated,)\n\n    def post(self):\n        ...\n```\n\n#### Example with overridden permissions\n```python\nfrom flask import g\nfrom mypermissions import Authenticated, IsSuperuser\n\n\nclass UserView(PermissionMixin, MethodView):\n    permissions = (Authenticated,)\n\n    def get_post_permissions(self):\n        # Checking both is redundant, but allows for more granular error messages\n        return (Authenticated, IsSuperuser)\n\n    def post(self):\n        # Only superusers can get here\n        ...\n\n    def get(self):\n        # Any authenticated user can get here\n        ...\n```\n\n#### Example permission implementation\nThe permission classes require a protocol of:\n```python\nclass Permission:\n    def check_permission(self) -> None:\n        # Maybe raise a PermissionError\n        ...\n```\n\nSo one implementation of this could be to have a base permission like:\n```python\nclass BasePermission:\n    error_message = NotImplementedError\n\n    def check_permission(self):\n        if not self.has_permission():\n            raise PermissionError(self.error_message)\n\n    def has_permission(self) -> bool:\n        raise NotImplementedError\n```\n\nThat can have child permissions defined as:\n```python\nclass Authenticated(BasePermission):\n    error_message = \"User is not authenticated\"\n\n    def has_permission(self) -> bool:\n        return g.user is not None\n```\n\n## ServicesMixin\nThe above examples have shown the views directly interacting with the database objects and performing the CRUD and business logic. Ideally though, that logic would be decoupled from the web framework through a service layer. Another benefit is that by containing business logic in the service, one can have services that consume other services, which can't easily be done when the logic exists in the view.\n\nThe `ServiceMixin` is a simple mixin that allows you to define a `service` for the view and to call it with a `ServiceContext`. The service implementation is agnostic, but this allows for one to make a mixin for their needs that can provide the service with the correct context for ones implementation.\n```python\nclass UserService:\n    def __init__(self, context):\n        # Some context, perhaps containing details about the authenticated user, permissions, etc\n        self.context = context\n\n    def create_user(self, name: str, age: int) -> User:\n        user = User(name=name, age=age)\n        db.session.add(user)\n        db.session.commit()\n        return user\n\n    ...\n\n\nclass UserView(ServiceMixin, MethodView):\n    service = UserService\n\n    def post(self):\n        user = self.get_service().create_user(...)\n        return UserSchema().dumps(user), 201\n```\n\n## StatusCodeMixin\nA simple mixin that allows the status code to be omitted from return value of the view, and instead has it inferred from the response content and the http method.\n```python\nclass UserView(StatusCodeMixin, MethodView):\n    def get(self):\n        users = UserModel.query.all()\n        return UserSchema(many=True).dumps(users)  # The 200 status code is inferred\n```\n\n## JsonifyMixin\nA simple mixin that converts the response object into a json response using `flask.jsonify`, it expects a dict or list in the response (optionally with a status code), so if used in conjunction with the SchemaMixin or the StatusCodeMixin, it would be to be the left-most parent (`UserView(JsonifyMixin, StatusCodeMixin, SchemaMixin, MethodView)`). It is primarily used for being able to return top-level lists of items without needing to manually call `jsonify`.\n```python\nclass UserView(JsonifyMixin, MethodView):\n    def get(self):\n        return [1, 2, 3], 200\n```\n\n## ResourceView\nThis is a combination of all of the above mixins, it allows fined tuned views, and assumes that the response is only returning 1 item in the GET cases, so it is best to be used when referring to a single resource, so an endpoint that has `GET/PATCH/DELETE /resource/<resource_id>`.\n```python\nclass UserView(ResourceView):\n    schema = UserSchema\n    permissions = (Authenticated,)\n\n    def get(self, user_id):\n        return self.get_service().get_user(user_id)  # Implicit 200\n\n    def get_patch_schema_class(self):\n        # A schema that performs a partial validation, unlike the schema used in creation\n        return PatchUserSchema\n\n    def patch(self, user_id):\n        return self.get_service().update_user(\n            user_id, **self.get_validated_data()\n        )  # Implicit 204\n\n    def get_delete_permissions(self):\n        return (Authenticated, IsSuperuser)\n\n    def delete(self, user_id) -> None:\n        return self.get_service().delete_user(user_id)  # Implicit 204\n```\n\n## ResourcesView\nThis is a combination of all of the above mixins, it allows fined tuned views, and assumes that the response is returning multiple items in the GET cases, so it is best to be used when referring to a non-specific resource, so an endpoint that has `POST/GET /resource>`.\n```python\nclass UserView(ResourcesView):\n    schema = UserSchema\n    service = UserService\n    permissions = (Authenticated,)\n    filter_schema = UserFilterSchema\n\n    def get_write_permissions(self):\n        return (Authenticated, IsSuperuser)\n\n    def post(self):\n        # Only superusers here\n        return self.get_service().create_user(\n            **self.get_validated_data()\n        )  # Implicit 201\n\n    def get(self):\n        # Any authenticated user here\n        return self.get_service().get_users(**self.get_filter_data())  # Implicit 200\n```\n\nIf your response is paginated, its best to use the `ResourceSchema` and treat the paginated object as a single item with its own schema (that would have the nested results)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/reritom/flask-mixins",
    "keywords": "flask-mixins",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-mixins",
    "package_url": "https://pypi.org/project/flask-mixins/",
    "platform": null,
    "project_url": "https://pypi.org/project/flask-mixins/",
    "project_urls": {
      "Homepage": "https://github.com/reritom/flask-mixins",
      "Issues": "https://github.com/reritom/flask-mixins/issues"
    },
    "release_url": "https://pypi.org/project/flask-mixins/0.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Flask and marshmallow cleaner code",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13513210,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5ba2a1964778a4bbd817a4031f8896f39358024eeb4f95940cd202c6d1f9ff6",
          "md5": "8da90574a197c583dd35001e0ee80917",
          "sha256": "fba3f598da6aa5aa1755c58efa31b66906fd4a9f04b098b7a1df8ded4a921602"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8da90574a197c583dd35001e0ee80917",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12587,
        "upload_time": "2021-10-01T14:44:59",
        "upload_time_iso_8601": "2021-10-01T14:44:59.838008Z",
        "url": "https://files.pythonhosted.org/packages/c5/ba/2a1964778a4bbd817a4031f8896f39358024eeb4f95940cd202c6d1f9ff6/flask-mixins-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b34ca065ec86aa665c88023db4f6345ab3c7b464ca6d2b418391bf4454d18dd4",
          "md5": "72783e1d9fb1ae9ba43cdcb097d22927",
          "sha256": "a1a101b6c4fb3c65e4d1e89f026562d3c4baa6c09343bdd8d31ad0c2dc046124"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "72783e1d9fb1ae9ba43cdcb097d22927",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12451,
        "upload_time": "2021-10-01T15:43:12",
        "upload_time_iso_8601": "2021-10-01T15:43:12.246260Z",
        "url": "https://files.pythonhosted.org/packages/b3/4c/a065ec86aa665c88023db4f6345ab3c7b464ca6d2b418391bf4454d18dd4/flask-mixins-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84a1b66d1bac5164f3bdf74a20aebcd9c5e68954a081998985323d544503d0dc",
          "md5": "42e91cce45223e4dab2f0f95b692bdeb",
          "sha256": "2f481ea1716ea639cbfdc84ef994b58479374c4afbd1e2b5a69c36ca84f9ba24"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "42e91cce45223e4dab2f0f95b692bdeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12654,
        "upload_time": "2021-10-01T22:17:24",
        "upload_time_iso_8601": "2021-10-01T22:17:24.233139Z",
        "url": "https://files.pythonhosted.org/packages/84/a1/b66d1bac5164f3bdf74a20aebcd9c5e68954a081998985323d544503d0dc/flask-mixins-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58651ef285c90675554cc0d2b9db704eb0ec6c37eb5f4fce796d8b9cd8a6fe77",
          "md5": "01c7539ee2942ab5ff2d08c17d698b8d",
          "sha256": "db400ac666b5834252b03d2981fbdc74eee2617994a29500aefa390ca4b7a97f"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "01c7539ee2942ab5ff2d08c17d698b8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12518,
        "upload_time": "2021-10-02T09:00:18",
        "upload_time_iso_8601": "2021-10-02T09:00:18.623477Z",
        "url": "https://files.pythonhosted.org/packages/58/65/1ef285c90675554cc0d2b9db704eb0ec6c37eb5f4fce796d8b9cd8a6fe77/flask-mixins-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ac56a0adb260d16b1d53d044d12ecae4e1fda735d449403284d025dbbc15cc1",
          "md5": "eafa465ee4e8e302566a4cf351af75a4",
          "sha256": "a3ca10903e1213a81cc4252a3e69e874afe0a2e053690f593148bcdafbabba24"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.4b0.tar.gz",
        "has_sig": false,
        "md5_digest": "eafa465ee4e8e302566a4cf351af75a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12699,
        "upload_time": "2021-10-02T09:14:35",
        "upload_time_iso_8601": "2021-10-02T09:14:35.787102Z",
        "url": "https://files.pythonhosted.org/packages/9a/c5/6a0adb260d16b1d53d044d12ecae4e1fda735d449403284d025dbbc15cc1/flask-mixins-0.0.4b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "616d7a11f1d17a8af97e36883b495402279928f0a2170097d1785449f44ec6b8",
          "md5": "a504fa52833aed750f0584cb32d02c19",
          "sha256": "21eb94e6a422e137d6168f3b54823f80112dfd091e2ad901f9065c7733a80068"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a504fa52833aed750f0584cb32d02c19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13194,
        "upload_time": "2021-10-02T19:51:38",
        "upload_time_iso_8601": "2021-10-02T19:51:38.984437Z",
        "url": "https://files.pythonhosted.org/packages/61/6d/7a11f1d17a8af97e36883b495402279928f0a2170097d1785449f44ec6b8/flask-mixins-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9c56373bcb0e01fab5d3c933cf5718595b75cb383a751ecbd61a08f2dc59071",
          "md5": "0c032481127ee724ed3cff6980f850df",
          "sha256": "f5d8c0f88847a4fd90c9d12363c353ce029f2716a3c8495499860c239cf6c953"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.5b0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c032481127ee724ed3cff6980f850df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13204,
        "upload_time": "2021-10-02T21:20:04",
        "upload_time_iso_8601": "2021-10-02T21:20:04.016282Z",
        "url": "https://files.pythonhosted.org/packages/c9/c5/6373bcb0e01fab5d3c933cf5718595b75cb383a751ecbd61a08f2dc59071/flask-mixins-0.0.5b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9ead14299e1cad4253e59279367548335938c652d3b56a1e5da7f6a2556b43d",
          "md5": "1a9e25be39f11e17dd7654939b0b88f9",
          "sha256": "1068e204e2c5e28b484873d953c1322e4a9c09fec1ba3ae67e9ffd275a8de1ca"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.5rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a9e25be39f11e17dd7654939b0b88f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13223,
        "upload_time": "2021-12-21T18:05:26",
        "upload_time_iso_8601": "2021-12-21T18:05:26.498988Z",
        "url": "https://files.pythonhosted.org/packages/c9/ea/d14299e1cad4253e59279367548335938c652d3b56a1e5da7f6a2556b43d/flask-mixins-0.0.5rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8e7377def456656185d78a8eef40ad6d139472a0989efaa6691ebf585e74618",
          "md5": "a77f4e666a16c2fb03ca1fe10c1f2d83",
          "sha256": "1295d139045b1042374a3f5c56e7bad646c96746333a3b45ee3e1302f239016d"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a77f4e666a16c2fb03ca1fe10c1f2d83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12989,
        "upload_time": "2022-04-02T08:54:44",
        "upload_time_iso_8601": "2022-04-02T08:54:44.558153Z",
        "url": "https://files.pythonhosted.org/packages/e8/e7/377def456656185d78a8eef40ad6d139472a0989efaa6691ebf585e74618/flask-mixins-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ba9820acf4ec9d0577c0800f995c93fc29226e2b0fba16d85cfb3a3c62c687e",
          "md5": "35699ccb2bbabc93f95a71cbc0245a4e",
          "sha256": "c1b650421efc8bf215bfe461734b42c8a16f8e2387f265baab03740071fe6e43"
        },
        "downloads": -1,
        "filename": "flask-mixins-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "35699ccb2bbabc93f95a71cbc0245a4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13278,
        "upload_time": "2022-04-14T11:14:46",
        "upload_time_iso_8601": "2022-04-14T11:14:46.910273Z",
        "url": "https://files.pythonhosted.org/packages/6b/a9/820acf4ec9d0577c0800f995c93fc29226e2b0fba16d85cfb3a3c62c687e/flask-mixins-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ba9820acf4ec9d0577c0800f995c93fc29226e2b0fba16d85cfb3a3c62c687e",
        "md5": "35699ccb2bbabc93f95a71cbc0245a4e",
        "sha256": "c1b650421efc8bf215bfe461734b42c8a16f8e2387f265baab03740071fe6e43"
      },
      "downloads": -1,
      "filename": "flask-mixins-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "35699ccb2bbabc93f95a71cbc0245a4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 13278,
      "upload_time": "2022-04-14T11:14:46",
      "upload_time_iso_8601": "2022-04-14T11:14:46.910273Z",
      "url": "https://files.pythonhosted.org/packages/6b/a9/820acf4ec9d0577c0800f995c93fc29226e2b0fba16d85cfb3a3c62c687e/flask-mixins-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}