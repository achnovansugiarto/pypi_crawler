{
  "info": {
    "author": "Peter Savage, Milan Falesnik",
    "author_email": "psavage@redhat.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "<h1 align=\"center\"> varmeth </h1>\n<h2 align=\"center\"> Method Variant Decorator </h2>\n\n<p align=\"center\">\n    <a href=\"https://pypi.org/project/varmeth\">\n    <img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/varmeth.svg?style=flat\">\n    </a>\n    <a href=\"https://pypi.org/project/varmeth/#history\">\n    <img alt=\"PyPI version\" src=\"https://badge.fury.io/py/varmeth.svg\">\n    </a>\n    <a href=\"https://codecov.io/gh/RedHatQE/varmeth\">\n      <img src=\"https://codecov.io/gh/RedHatQE/varmeth/branch/master/graph/badge.svg\" />\n    </a>\n    <a href=\"https://github.com/RedHatQE/varmeth/actions?query=workflow%3ATests\">\n    <img alt=\"github actions\" src=\"https://github.com/RedHatQE/varmeth/workflows/Tests/badge.svg?branch=master\">\n    </a>\n    <a href=\"https://github.com/RedHatQE/varmeth/blob/master/LICENSE\">\n    <img alt=\"License: GPLv3\" src=\"https://img.shields.io/pypi/l/varmeth.svg?version=latest\">\n    </a>\n    <a href=\"https://pypi.org/project/black\">\n    <img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\">\n    </a>\n</p>\n\nSimple library that allows a method to choose dynamically implementation at runtime depending on the\ncontext via _decorators_.\n\n_Varmeth_ was originally part of [ManageIQ Integration test](https://github.com/ManageIQ/integration_tests) library.\n\n## Installation and usage\n\n### Installation\n\n`varmeth` can be installed by running `pip install varmeth`\n\n### Usage\n\nBelow example can show you how to use `varmeth`. You can see a different _method variant_.\nYouâ€™ll have to decorate _default method_ with `variable` and register it with different _method variant_.\nYou can also register _variant_ with multiple names.\n\nThe following code snippet shows how to use `varmeth` in a real world example:\n\nIn this example, the `tiger` method will change it's implementation based on the context at\nruntime, so it must be annotated with the `@variable` annotation in order to do so. It will be\nthe _variable_ method.\n\nThe body of this method will be the `default` implementation - the implementation used for this\nmethod when no context is explicitly used.\n\nThe `siberian_tiger` and `bengal_tiger` are two different implementations for the `tiger` method,\nand need to be annotated with `@tiger.variant(\"variant-name\")` annotations, where `variant-name`\nis a string identifier that will be used at runtime to select the required `variant` implementation.\nThese will be the _variants_.\n\nNote that the _variable_ method can be associated with multiple implementations or _variants_.\n\n```python\nfrom varmeth import variable\n\nclass CatFamily(object):\n   @variable\n   def tiger(self):\n       print(\"Default Method!\")\n       print(\"Tiger\")\n\n   @tiger.variant(\"siberian\")\n   def siberian_tiger(self):\n       print(\"Siberian Tiger\")\n\n   @tiger.variant(\"indian\", \"bengal\")\n   def bengal_tiger(self):\n       print(\"Bengal Tiger\")\n```\n<br>\n\nTo choose between the different _variants_ , the `method` parameter is used to select\nthe proper context, using the proper _variant-name_ as a value.\n\n```shell script\nIn [1]: cat = CatFamily()\n\nIn [2]: cat.tiger()\nDefault Method!\nTiger\n\nIn [3]: cat.tiger(method=\"siberian\")\nSiberian Tiger\n\nIn [4]: cat.tiger(method=\"indian\")\nBengal Tiger\n\nIn [5]: cat.tiger(method=\"bengal\")\nBengal Tiger\n```\n<br>\n\nYou can also add and alias name to the _default_ method using the `alias` parameter, though note\nthat only one `default` method is allowed.\n\n```python\nfrom varmeth import variable\n\nclass Reptiles(object):\n   @variable(alias=\"python\")\n   def snake(self):\n       print(\"Python Snake\")\n\n   @snake.variant(\"kobra\")\n   def kobra_snake(self):\n       print(\"Kobra Snake\")\n```\n```shell script\nIn [1]: rep = Reptiles()\n\nIn [2]: rep.snake()\nPython Snake\n\nIn [3]: rep.snake(method=\"python\")\nPython Snake\n\nIn [4]: rep.snake(method=\"kobra\")\nKobra Snake\n```\n<br>\n\n### Using Varmeth against plain Python implementation\n\nThe following example shows an _Entity_ class that supports the _delete_ operation for two different contexts, the `UI`\n(front-end) and the `REST` (back-end) contexts. As you can infer, each context requires very different implementations\nto get the entity removed.\n\nUsing vanilla Python implementation you will have to call the proper method for each context,\n_explicitly_. Instead, you can simply call the same method and provide the context, and `Varmeth` will do the\nrest.\n\n<table>\n<tr>\n<th> Plain Python </th>\n<th> Varmeth </th>\n</tr>\n<tr>\n<td>\n\n```python\nclass Entity(object):\n    def delete_ui(self):\n        print(\"Delete with UI!\")\n\n    def delete_rest(self):\n        print(\"Delete with REST!\")\n\nentity = Entity()\nentity.delete_ui()      # >> Delete with UI!\nentity.delete_rest()    # >> Delete with REST!\n```\n</td>\n\n<td>\n\n```python\nfrom varmeth import variable\n\nclass Entity(object):\n    @variable(alias=\"ui\")\n    def delete(self):\n        print(\"Delete with UI!\")\n\n    @delete.variant(\"rest\")\n    def delete_rest(self):\n        print(\"Delete with REST!\")\n\nentity = Entity()\nentity.delete()                 # >> Delete with UI!\nentity.delete(method=\"ui\")      # >> Delete with UI!\nentity.delete(method=\"rest\")    # >> Delete with REST!\n```\n</td>\n</tr>\n</table>\n\n<br>\n\nAs you can see, _Varmeth_ provides a very convenient _context switcher_ interface, which some may\nfind handy when implementing integration tests designed to follow test parametrization patterns,\nlike some popular test frameworks such as [Pytest](http://doc.pytest.org/en/latest/example/parametrize.html#parametrizing-tests).\noffer. The following is an example of how to do exactly that with Pytest using `Varmeth`: we can\neasily parametrize the _context under test_ using `UI` and `REST` as parameters.\n\n```python\nimport pytest\n\n@pytest.mark.parametrize(\"context\", [\"ui\", \"rest\"])\ndef test_delete_entity(context):\n   entity = Entity()\n   entity.delete(method=context)\n```\n\n### Contribute\n\nFeel free to create Issues if you find bugs, or go ahead and submit your own Pull Requests.\n\n**Please note**: When submitting new PRs, ensure your code passes all checks.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RedHatQE/varmeth",
    "keywords": "varmeth,decorator,method variant",
    "license": "",
    "maintainer": "Peter Savage",
    "maintainer_email": "psavage@redhat.com",
    "name": "varmeth",
    "package_url": "https://pypi.org/project/varmeth/",
    "platform": "",
    "project_url": "https://pypi.org/project/varmeth/",
    "project_urls": {
      "Homepage": "https://github.com/RedHatQE/varmeth"
    },
    "release_url": "https://pypi.org/project/varmeth/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Method variant decorator",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7093440,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4da442178dd6133d69827658f49dbfd5eb8cb4bab502479afd9b1f193f01f033",
          "md5": "51745f5cbc5844a2538edee6d5ac1e17",
          "sha256": "fa6ec3870058da903fa27d58834dd793665711010a8628dfb3f54ead82b19d56"
        },
        "downloads": -1,
        "filename": "varmeth-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "51745f5cbc5844a2538edee6d5ac1e17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17557,
        "upload_time": "2020-04-22T20:10:48",
        "upload_time_iso_8601": "2020-04-22T20:10:48.284794Z",
        "url": "https://files.pythonhosted.org/packages/4d/a4/42178dd6133d69827658f49dbfd5eb8cb4bab502479afd9b1f193f01f033/varmeth-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0165548ebe1f90822c17c613d1972ee2ec74215946c41246f24172f4d8c5cb52",
          "md5": "d383c1070e9144f58273d1b993d4f118",
          "sha256": "5b34f17c82c5ee97fa0d899d0db9238b88d19b5118e58391f1c17a93d3f67d5e"
        },
        "downloads": -1,
        "filename": "varmeth-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d383c1070e9144f58273d1b993d4f118",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16792,
        "upload_time": "2020-04-24T14:23:40",
        "upload_time_iso_8601": "2020-04-24T14:23:40.201522Z",
        "url": "https://files.pythonhosted.org/packages/01/65/548ebe1f90822c17c613d1972ee2ec74215946c41246f24172f4d8c5cb52/varmeth-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "672b4776db6a34291c85c1e08913ac3a09f4340de64212f96c0b55584970605d",
          "md5": "5c560408873abb230a1dc992c450742e",
          "sha256": "f0e17d62503b3a076f115e83fa698098418801a166755bdb2166b6243f7b6438"
        },
        "downloads": -1,
        "filename": "varmeth-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5c560408873abb230a1dc992c450742e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21203,
        "upload_time": "2020-04-24T14:23:41",
        "upload_time_iso_8601": "2020-04-24T14:23:41.379767Z",
        "url": "https://files.pythonhosted.org/packages/67/2b/4776db6a34291c85c1e08913ac3a09f4340de64212f96c0b55584970605d/varmeth-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0165548ebe1f90822c17c613d1972ee2ec74215946c41246f24172f4d8c5cb52",
        "md5": "d383c1070e9144f58273d1b993d4f118",
        "sha256": "5b34f17c82c5ee97fa0d899d0db9238b88d19b5118e58391f1c17a93d3f67d5e"
      },
      "downloads": -1,
      "filename": "varmeth-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d383c1070e9144f58273d1b993d4f118",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16792,
      "upload_time": "2020-04-24T14:23:40",
      "upload_time_iso_8601": "2020-04-24T14:23:40.201522Z",
      "url": "https://files.pythonhosted.org/packages/01/65/548ebe1f90822c17c613d1972ee2ec74215946c41246f24172f4d8c5cb52/varmeth-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "672b4776db6a34291c85c1e08913ac3a09f4340de64212f96c0b55584970605d",
        "md5": "5c560408873abb230a1dc992c450742e",
        "sha256": "f0e17d62503b3a076f115e83fa698098418801a166755bdb2166b6243f7b6438"
      },
      "downloads": -1,
      "filename": "varmeth-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5c560408873abb230a1dc992c450742e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21203,
      "upload_time": "2020-04-24T14:23:41",
      "upload_time_iso_8601": "2020-04-24T14:23:41.379767Z",
      "url": "https://files.pythonhosted.org/packages/67/2b/4776db6a34291c85c1e08913ac3a09f4340de64212f96c0b55584970605d/varmeth-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}