{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Covariance Data Frames for Predictive M/EEG Pipelines\n\n![Build](https://github.com/coffeine-labs/coffeine/workflows/tests/badge.svg)\n<!-- ![Codecov](https://codecov.io/gh/coffeine-labs/coffeine/branch/main/graph/badge.svg) -->\n\n## Summary\n\nThe `coffeine` library implements provides a high-level interface to the predictive modeling techniques focusing on the M/EEG covariance matrix as representation of the signal. The methods implemented here are built on top of [PyRiemann](https://pyriemann.readthedocs.io/en/latest/installing.html) while the API is designed with the more specific use-case of building biomedical prediction models from M/EEG signals. For this purpose, `coffeine` uses DataFrames to handle multiple covariance matrices alongside scalar features. Vectorization and model composition functions are provided that handle composition of scikit-learn compatible modeling pipelines from covariances alongside other types of features.\n\nFor details on the feature extraction pipelines and statistical models, please consider the following references:\n\n[1] D. Sabbagh, P. Ablin, G. Varoquaux, A. Gramfort, and D. A. Engemann.\nPredictive regression modeling with MEG/EEG: from source power to signals and cognitive states.\n*NeuroImage*, page 116893,2020. ISSN 1053-8119.\n<https://www.sciencedirect.com/science/article/pii/S1053811920303797>\n\n[2] D. Sabbagh, P. Ablin, G. Varoquaux, A. Gramfort,\nand D. A. Engemann.\nManifold-regression to predict from MEG/EEG brain signals\nwithout source modeling.\n*NeurIPS* (Advances in Neural Information Processing Systems) 32.\n<https://papers.nips.cc/paper/8952-manifold-regression-to-predict-from-megeeg-brain-signals-without-source-modeling>\n\n[3] D. A. Engemann, O. Kozynets, D. Sabbagh, G. Lema√Ætre, G. Varoquaux, F. Liem, and A. Gramfort\nCombining magnetoencephalography with magnetic resonance imaging enhances learning of surrogate-biomarkers.\n*eLife*, 9:e54055, 2020\n<https://elifesciences.org/articles/54055>\n\nThe filter-bank pipelines (across multiple frequency bands) can the thought of as follows:\n\n<img width=\"1380\" alt=\"meeg_pipelines\" src=\"https://user-images.githubusercontent.com/1908618/115611659-a6d5ab80-a2ea-11eb-935c-006cad4fc8e5.png\">\n\nAfter preprocessing, covariance matrices can be projected to mitigate field spread and deal with rank deficient signals.\nSubsequently, vectorization is performed to extract column features from the variance, covariance or both.\nThe Riemannian embedding is special in mitigating field spread and providing vectorization in 1 step.\nIt can be combined with dimensionality reduction in the projection step to deal with rank deficiency.\nFinally, a statistical learning algorithm is applied.\n\nThe representation, projection and vectorization steps are separately done for each frequency band.\n\n## Installation of Python package\n\n<!-- To install the package, simply do: -->\n<!--  -->\n<!--   `$ pip install coffeine` -->\n\nYou can clone this library, and then do:\n\n  `$ pip install -e .`\n\nEverything worked if the following command do not return any error:\n\n  `$ python -c 'import coffeine'`\n\n## Use with Python\n\n### compute_features\n\nCompute power features from raw M/EEG data:\n\n- The power spectral density\n- The spectral covariance matrices\n- The cospectral covariance matrices\n- The cross-frequency covariance matrices\n- The cross-frequency correlation matrices\n\nThe matrices are of shape (n_frequency_bands, n_channels, n_channels)\n\nUse case example:\n\n```python\nimport os\nimport mne\n\nfrom coffeine import compute_features\n\ndata_path = mne.datasets.sample.data_path()\ndata_dir = os.path.join(data_path, 'MEG', 'sample')\nraw_fname = os.path.join(data_dir, 'sample_audvis_raw.fif')\n\nraw = mne.io.read_raw_fif(raw_fname, verbose=False)\n# pick some MEG and EEG channels after cropping\nraw = raw.copy().crop(0, 200).pick([0, 1, 330, 331, 332])\n\nfrequency_bands = {'alpha': (8.0, 15.0), 'beta': (15.0, 30.0)}\n\nfeatures, _ = compute_features(raw, frequency_bands=frequency_bands)\n```\n\n### make_filter_bank_models\n\nThe following models are implemented:\n\n- riemann\n- lw_riemann\n- diag\n- logdiag\n- random\n- naive\n- spoc\n- riemann_wass\n- dummy\n\nUse case example:\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom coffeine import make_filter_bank_regressor\n\nfreq_bands = {'alpha': (8.0, 15.0), 'beta': (15.0, 30.0)}\nn_freq_bands = len(freq_bands)\nn_subjects = 10\nn_channels = 4\n\n# Make toy data\nX_cov = np.random.randn(n_subjects, n_freq_bands, n_channels, n_channels)\nfor sub in range(n_subjects):\n    for fb in range(n_freq_bands):\n        X_cov[sub, fb] = X_cov[sub, fb] @ X_cov[sub, fb].T\nX_df = pd.DataFrame(\n  {band: list(X_cov[:, ii]) for ii, band in enumerate(freq_bands)})\nX_df['drug'] = np.random.randint(2, size=n_subjects)\ny = np.random.randn(len(X_df))\n\n# Models\nfb_model = make_filter_bank_regressor(names=freq_bands.keys(),\n                                      method='riemann')\nfb_model.fit(X_df, y)\n```\n\n## Cite\n\nIf you use this code please cite:\n\n  D. Sabbagh, P. Ablin, G. Varoquaux, A. Gramfort, and D.A. Engemann.\n  Predictive regression modeling with MEG/EEG: from source power\n  to signals and cognitive states.\n  *NeuroImage*, page 116893,2020. ISSN 1053-8119.\n  https://www.sciencedirect.com/science/article/pii/S1053811920303797",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/coffeine-labs/coffeine.git",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coffeine-labs/coffeine",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Denis Engemann",
    "maintainer_email": "denis.engemann@gmail.com",
    "name": "coffeine",
    "package_url": "https://pypi.org/project/coffeine/",
    "platform": "any",
    "project_url": "https://pypi.org/project/coffeine/",
    "project_urls": {
      "Download": "https://github.com/coffeine-labs/coffeine.git",
      "Homepage": "https://github.com/coffeine-labs/coffeine"
    },
    "release_url": "https://pypi.org/project/coffeine/0.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "M/EEG power regression pipelines in Python",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12301493,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e9b0f9d36e95b23b58a06a2142cf29e60925658a53b4063706f7863da3c0e17",
          "md5": "a79aef73be48225dfa5c82be0592447d",
          "sha256": "d2db48ecbfe255ebdc527ac7dde75efa6ee00d1dcf42dc5e4d35b0bf15948b77"
        },
        "downloads": -1,
        "filename": "coffeine-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a79aef73be48225dfa5c82be0592447d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 16409,
        "upload_time": "2021-12-14T15:20:16",
        "upload_time_iso_8601": "2021-12-14T15:20:16.672026Z",
        "url": "https://files.pythonhosted.org/packages/0e/9b/0f9d36e95b23b58a06a2142cf29e60925658a53b4063706f7863da3c0e17/coffeine-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e9b0f9d36e95b23b58a06a2142cf29e60925658a53b4063706f7863da3c0e17",
        "md5": "a79aef73be48225dfa5c82be0592447d",
        "sha256": "d2db48ecbfe255ebdc527ac7dde75efa6ee00d1dcf42dc5e4d35b0bf15948b77"
      },
      "downloads": -1,
      "filename": "coffeine-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a79aef73be48225dfa5c82be0592447d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 16409,
      "upload_time": "2021-12-14T15:20:16",
      "upload_time_iso_8601": "2021-12-14T15:20:16.672026Z",
      "url": "https://files.pythonhosted.org/packages/0e/9b/0f9d36e95b23b58a06a2142cf29e60925658a53b4063706f7863da3c0e17/coffeine-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}