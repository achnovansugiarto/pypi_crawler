{
  "info": {
    "author": "Dr. Howard Bandy",
    "author_email": "howard@blueowlpress.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Risk normalization\n\n#### A set of procedures that evaluates a set of trades, determines the maximum safe position size, and estimates future equity growth.\n\nCopyright &copy; 2011  Dr. Howard Bandy, Blue Owl Press, Inc.\n\nTraders are willing to trust the signals of their algorithmic trading systems as long as the drawdown experienced does not exceed their personal risk tolerance.\n\nFinal equity of a series of trades depends on the position size of each trade.  Greater position size leads to greater final equity (up to a point that is not reached under ordinary trading circumstances), and also leads to greater drawdowns. \n\nThe risk_normalization.py program analyzes the 'best estimate' set of trades associated with a trading system and computes the maximum position size which results in the highest equity growth while limiting the drawdown to within the trader's personal risk tolerance.\n\nAs with all forecasting procedures, achieving high accuracy and high confidence from a system based on a model depends on the future data having the same distribution as that data used to develop the system.\n\n## Two systems\n\nThere are two systems in play:\n- The *Trading System,* which fits the model to historical data, identifies patterns, and generates signals during the development phase. \n- The *Trading Management System,* which analyzes recent trades during live (or paper) trading, compares recent performance to that achieved during development, determines the health of the system, and sets the best position size for the next trade.  \n\nPosition size is a parameter of the *Trading Management System,* not the *Trading System.*  The *Trading Management System* monitors recent performance and adjusts position size appropriately.  If the system begins to break down, it is the *Trading Management System* that detects that problem and reduces the position size accordingly -- perhaps taking it offline completely.\n\nThe *Trading System* has no way of knowing whether the recent trades are similar to those discovered during development or periods of earlier trading.  Moving position size to the *Trading System* removes the only 'knob' the trader has to systematically respond to variation in the synchronization between the model and the data.  \n\nThe trader uses the risk analysis components of risk_normalization to identify and adjust for distributional drift.\n\n## Establishing the parameters\n\nThe trader establishes the parameters for the risk control process by stating his or her risk tolerance as follows:\n>I am trading a $100,000 account and forecasting risk for the next two years.  I want to hold the risk of a drawdown from highest equity to date to a 5 percent chance of a 10 percent drawdown.\n\nThat statement identifies the four risk tolerance parameters of the procedure:\n<pre>\n    Account size:      100000    initial account size in currency of your choice\n    Forecast horizon:     504    2 years of daily results  \n    Drawdown tolerance:  0.10    10% maximum drawdown\n    Tail risk:              5    at the 95th percentile\n</pre>\n\nMonte Carlo techniques are used to estimate the distributions of maximum drawdown and final equity with data drawn from a set of trades that represent the *best estimate* of future performance.\n\nThe *best estimate* set of trades can be any of:\n* Real trades\n* Paper trades\n* Out-of-sample trades from development testing\n* In-sample trades from development testing\n* Hypothetical trades of interest\n\nThe most accurate results come when marking trading performance to market daily.  Each trade is a one-day percentage change of the equity at risk that day.  A two year forecast horizon will have 504 single day trading results.  The number of trades and the number of days in the forecast will be the same.\n\nMulti-day trades can be used.  The number of trades and the number of days in the forecast will be different.  Compute the number of trades required to span the forecast period -- that will be the value passed as *number_of_trades_in_forecast.*  For a two year forecast, the *number_days_in_forecast* will be 504.  Note that the gain or loss of the trade is based on the closed trade -- the intra-trade drawdown of multi-day trades will not be observed, but it will always be greater than the reported drawdown.  Conservatively, and depending on the volatility of the issue being traded, the intra-trade (marked to market daily) drawdown you will experience will be greater than the closed trade drawdown by about 2% for trades held an average of 5 days, 3% for trades held 20 days, and 5% for trades held 60 days.  Thus, if you wish to analyze trades held an average of five trading days and hold maximum intra-trade drawdown to a limit of 10%, enter 0.08 as the desired maximum drawdown.\n\nThe value of *number_of_trades_in_forecast* must be less than or equal to the value of *number_of_days_in_forecast*.  If the *number_of_trades_in_forecast* is lower, the remaining days will be filled with values of zero.  \n\n## Getting Started\n\nThese programs were written in Python 3.7.\n\nThe example code shows the procedures and a main program that calls them.\n\nThe risk_normalization package can be installed from PyPI.\n\n>>> pip install risk_normalization\n\nThen imported within your program\n\n>>> import risk_normalization\n\n### The data in *trades* \n\nA trade list has been created by some process. It could be live trades, validation trades, in-sample trades, or hypothetical trades. Each of the trades represents the gain from the trade for a single day.  If the trader is trading today's MOC to tomorrow's MOC, the gain would be the change in price from today's close to tomorrow's close. A gain of 1% is represented as 0.0100. A day where the position is flat has a gain of 0.00. There are about 252 trades per year The account is marked to market daily. The account is managed daily. The trader is able and willing to change position daily.\n\nAssuming the system is trading a single issue long/flat, the gain for days when the signal was to be flat will be 0.00.  You can either enter those zeros as they occur or omit them.  If you enter them as they occur, *number_of_trades_in_forecast* will be less than *number_of_days_in_forecast*.  The remaining days will automatically be filled with the necessary number of zeros.\n\n*Trades* is the set of trades being evaluated.  Internally, it is a Python list or numpy array.  There is one real value per element.  That value represents the percentage gained or lost by the funds at risk that day.\n\nIf you are using a traditional trading system development platform, such as AmiBroker or TradeStation, use your trading system to produce a list of trades.  Export those to a csv file, one trade per line, which will be read, then passed as *trades* to the risk_normalization procedure.  \n\nIf your trading system is written in Python, there is no need to export the data.  You can form a list or numpy array named *trades* and pass it directly to the risk_normalization procedure as part of the normal program flow.\n\nIf you wish to evaluate a hypothetical set of trades, simply write them to a csv file and process them as though they are actual trades.  \n\nThe data examples included in this repository are each a single csv file containing one header line followed by one data value per row.  Several csv files have been included.  They are expected to be in the directory where your risk_normalization.py file is -- or adjust the path as necessary.  Set skiprows to 1 to account for the header, or set skiprows to 0 if the file you pass has no header.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n# Overview of the program\n\nBegin with a set of trades. These are analyzed to compute safe-f, and are assumed to be the best estimate of future performance. This set does not change throughout the procedure.\n\nThe simulation begins by setting the position size fraction to an initial value of 1.00. Create many equally likely equity curves, measure the maximum drawdown of each, keep them in a list. Treat the list of max drawdowns as a distribution and determine the maximum drawdown at the high risk tail -- probably at the 95th percentile. Compare the trader's personal risk tolerance with the tail risk of the distribution. If they are equal, the current value of the fraction is safe-f. If they are not equal, adjust the fraction and repeat.\n\nSafe-f has been established.  It is a fraction, typically between 0.50 and 1.00.  It is the position size that will maximize equity growth while holding the drawdown of the trading account to within the risk of the trader.\n\nUsing safe-f as the fraction, create many equally likely equity curves, measure the final equity, keep that in a list. Treat the list of final equity as a distribution and determine the equity at the 25th percentile. Convert the relative gain in equity to a compound annual rate of return. That value is CAR25.  \n\nRun the analysis several times.  Return the mean and standard deviation of safe-f and CAR25.\n\n## Interpretation\n\nFitting an algorithmic model to a set of data results in a set of relationships that are contained in the model.  When that model is supplied with a similar set of data, the model identifies patterns that precede profitable trades and informs the trader of the appropriate signals.  The system will be profitable providing the future resembles the past.  That is, the distribution of patterns and trades in the live data must come from the same distribution as was provided for the model fitting.  Safe-f is the position size associated with that model and data.  As the data changes, the patterns and profitability will change.  Adding results of recent trades to the 'best estimate set' of trades will allow the risk normalization procedure to recalibrate safe-f, which enables the trader to adjust position size during live trading to manage risk.\n\n## Use:\n<pre>\nsafe_f_mean, safe_f_stdev, CAR25_mean, CAR25_stdev = risk_normalization(   \n        trades,\n        number_days_in_forecast,\n        number_trades_in_forecast, \n        initial_capital,\n        tail_percentage,\n        drawdown_tolerance,\n        number_equity_in_CDF,\n        number_repetitions )\n</pre>\n\nParameters: \n* trades: The set of trades to evaluate. Expecting a numpy array with one dimension, or a Python list.\n* number_days_in_forecast: the forecast period in days. \n* number_trades_in_forecast: The number of trades to draw for each equity sequence. \n* initial_capital: initial amount in the trading account. Typical = 100000.00. \n* tail_percentage: The percentage at which to measure the tail risk. Typical = 5.\n* drawdown_tolerance: The traders drawdown tolerance. Expressed as a proportion of maximum equity to date. Typical = 0.10 == a 10% drawdown. \n* number_equity_in_CDF: The number of equity curves used to form a single CDF. Typical = 1000\n* number_repetitions: The number of simulations to combine for calculation of mean and standard deviation of CAR25 and safe-f.  An integer greater than 0.  Typical = 10.\n\nReturns: \n* safe_f_mean: The fraction of the trading account that will be used for each trade. The mean of *number_repetitions* simulations.\n* safe_f_stdev: The standard deviation of safe_f.\n* CAR25_mean: The compound annual rate of return for the given set of trades and position size.  The mean of *number_repetitions* simulations.\n* CAR_25_stdev: The standard deviation of CAR25.\n\n\n# Program to create normally distributed trades\n\nmake_trade_list.py \n\nThis program creates a list of trades drawn from a Normal distribution, and writes them to disc in a csv file readable by risk_normalization.py and useful for testing.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/howardbandy/risk_normalization/blob/master/risk_normalization.py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "risk-normalization",
    "package_url": "https://pypi.org/project/risk-normalization/",
    "platform": "",
    "project_url": "https://pypi.org/project/risk-normalization/",
    "project_urls": {
      "Homepage": "https://github.com/howardbandy/risk_normalization/blob/master/risk_normalization.py"
    },
    "release_url": "https://pypi.org/project/risk-normalization/1.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Compute safe_f and CAR25 for a list of trades",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9053989,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae9c3d417dff2aac23e8248488980477b8601df856df8ae0da41fa067c73b6cc",
          "md5": "e06a9679e48a198c176f20c2c2267216",
          "sha256": "979a562f38f0d2d327b830a9b83492995479608f1575e58b2a5e2456328dd8d6"
        },
        "downloads": -1,
        "filename": "risk_normalization-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e06a9679e48a198c176f20c2c2267216",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10444,
        "upload_time": "2021-01-05T03:34:54",
        "upload_time_iso_8601": "2021-01-05T03:34:54.030757Z",
        "url": "https://files.pythonhosted.org/packages/ae/9c/3d417dff2aac23e8248488980477b8601df856df8ae0da41fa067c73b6cc/risk_normalization-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "453aad622a0442c1841f9d03f0405a72c6563a6e8f10dcdb3fa02db26a94a2a3",
          "md5": "19366d4abafeff94d39a6120eaed301e",
          "sha256": "2ed7dac8e756a52675b51654130a69a17e8cb3d331cac5eb700498edecdf3c55"
        },
        "downloads": -1,
        "filename": "risk_normalization-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "19366d4abafeff94d39a6120eaed301e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9271,
        "upload_time": "2021-01-05T03:34:56",
        "upload_time_iso_8601": "2021-01-05T03:34:56.718001Z",
        "url": "https://files.pythonhosted.org/packages/45/3a/ad622a0442c1841f9d03f0405a72c6563a6e8f10dcdb3fa02db26a94a2a3/risk_normalization-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae9c3d417dff2aac23e8248488980477b8601df856df8ae0da41fa067c73b6cc",
        "md5": "e06a9679e48a198c176f20c2c2267216",
        "sha256": "979a562f38f0d2d327b830a9b83492995479608f1575e58b2a5e2456328dd8d6"
      },
      "downloads": -1,
      "filename": "risk_normalization-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e06a9679e48a198c176f20c2c2267216",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10444,
      "upload_time": "2021-01-05T03:34:54",
      "upload_time_iso_8601": "2021-01-05T03:34:54.030757Z",
      "url": "https://files.pythonhosted.org/packages/ae/9c/3d417dff2aac23e8248488980477b8601df856df8ae0da41fa067c73b6cc/risk_normalization-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "453aad622a0442c1841f9d03f0405a72c6563a6e8f10dcdb3fa02db26a94a2a3",
        "md5": "19366d4abafeff94d39a6120eaed301e",
        "sha256": "2ed7dac8e756a52675b51654130a69a17e8cb3d331cac5eb700498edecdf3c55"
      },
      "downloads": -1,
      "filename": "risk_normalization-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "19366d4abafeff94d39a6120eaed301e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9271,
      "upload_time": "2021-01-05T03:34:56",
      "upload_time_iso_8601": "2021-01-05T03:34:56.718001Z",
      "url": "https://files.pythonhosted.org/packages/45/3a/ad622a0442c1841f9d03f0405a72c6563a6e8f10dcdb3fa02db26a94a2a3/risk_normalization-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}