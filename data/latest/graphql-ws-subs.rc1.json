{
  "info": {
    "author": "Syrus Akbary",
    "author_email": "me@syrusakbary.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "GraphQL WS\n==========\n\nWebsocket server for GraphQL subscriptions.\n\nCurrently supports:\n\n* `aiohttp <https://github.com/graphql-python/graphql-ws#aiohttp>`__\n* `Gevent <https://github.com/graphql-python/graphql-ws#gevent>`__\n* Sanic (uses `websockets <https://github.com/aaugustin/websockets/>`__\n  library)\n\nInstallation instructions\n=========================\n\nFor instaling graphql-ws, just run this command in your shell\n\n.. code:: bash\n\n    pip install graphql-ws\n\nExamples\n--------\n\naiohttp\n~~~~~~~\n\nFor setting up, just plug into your aiohttp server.\n\n.. code:: python\n\n    from graphql_ws.aiohttp import AiohttpSubscriptionServer\n\n\n    subscription_server = AiohttpSubscriptionServer(schema)\n\n    async def subscriptions(request):\n        ws = web.WebSocketResponse(protocols=('graphql-ws',))\n        await ws.prepare(request)\n\n        await subscription_server.handle(ws)\n        return ws\n\n\n    app = web.Application()\n    app.router.add_get('/subscriptions', subscriptions)\n\n    web.run_app(app, port=8000)\n\nSanic\n~~~~~\n\nWorks with any framework that uses the websockets library for itâ€™s\nwebsocket implementation. For this example, plug in your Sanic server.\n\n.. code:: python\n\n    from graphql_ws.websockets_lib import WsLibSubscriptionServer\n\n\n    app = Sanic(__name__)\n\n    subscription_server = WsLibSubscriptionServer(schema)\n\n    @app.websocket('/subscriptions', subprotocols=['graphql-ws'])\n    async def subscriptions(request, ws):\n        await subscription_server.handle(ws)\n        return ws\n\n\n    app.run(host=\"0.0.0.0\", port=8000)\n\nAnd then, plug into a subscribable schema:\n\n.. code:: python\n\n    import asyncio\n    import graphene\n\n\n    class Query(graphene.ObjectType):\n        base = graphene.String()\n\n\n    class Subscription(graphene.ObjectType):\n        count_seconds = graphene.Float(up_to=graphene.Int())\n\n        async def resolve_count_seconds(root, info, up_to):\n            for i in range(up_to):\n                yield i\n                await asyncio.sleep(1.)\n            yield up_to\n\n\n    schema = graphene.Schema(query=Query, subscription=Subscription)\n\nYou can see a full example here:\nhttps://github.com/graphql-python/graphql-ws/tree/master/examples/aiohttp\n\nGevent\n~~~~~~\n\nFor setting up, just plug into your Gevent server.\n\n.. code:: python\n\n    subscription_server = GeventSubscriptionServer(schema)\n    app.app_protocol = lambda environ_path_info: 'graphql-ws'\n\n    @sockets.route('/subscriptions')\n    def echo_socket(ws):\n        subscription_server.handle(ws)\n        return []\n\nAnd then, plug into a subscribable schema:\n\n.. code:: python\n\n    import graphene\n    from rx import Observable\n\n\n    class Query(graphene.ObjectType):\n        base = graphene.String()\n\n\n    class Subscription(graphene.ObjectType):\n        count_seconds = graphene.Float(up_to=graphene.Int())\n\n        async def resolve_count_seconds(root, info, up_to=5):\n            return Observable.interval(1000)\\\n                             .map(lambda i: \"{0}\".format(i))\\\n                             .take_while(lambda i: int(i) <= up_to)\n\n\n    schema = graphene.Schema(query=Query, subscription=Subscription)\n\nYou can see a full example here:\nhttps://github.com/graphql-python/graphql-ws/tree/master/examples/flask_gevent\n\nDjango Channels\n~~~~~~~~~~~~~~~\n\nFirst ``pip install channels`` and it to your django apps\n\nThen add the following to your settings.py\n\n.. code:: python\n\n    CHANNELS_WS_PROTOCOLS = [\"graphql-ws\", ]\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"asgiref.inmemory.ChannelLayer\",\n            \"ROUTING\": \"django_subscriptions.urls.channel_routing\",\n        },\n\n    }\n\nSetup your graphql schema\n\n.. code:: python\n\n    import graphene\n    from rx import Observable\n\n\n    class Query(graphene.ObjectType):\n        hello = graphene.String()\n\n        def resolve_hello(self, info, **kwargs):\n            return 'world'\n\n    class Subscription(graphene.ObjectType):\n\n        count_seconds = graphene.Int(up_to=graphene.Int())\n\n\n        def resolve_count_seconds(\n            root,\n            info,\n            up_to=5\n        ):\n            return Observable.interval(1000)\\\n                                .map(lambda i: \"{0}\".format(i))\\\n                                .take_while(lambda i: int(i) <= up_to)\n\n\n\n    schema = graphene.Schema(\n        query=Query,\n        subscription=Subscription\n    )\n\nSetup your schema in settings.py\n\n.. code:: python\n\n    GRAPHENE = {\n        'SCHEMA': 'path.to.schema'\n    }\n\nand finally add the channel routes\n\n.. code:: python\n\n    from channels.routing import route_class\n    from graphql_ws.django_channels import GraphQLSubscriptionConsumer\n\n    channel_routing = [\n        route_class(GraphQLSubscriptionConsumer, path=r\"^/subscriptions\"),\n    ]\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cjayroe/graphql-ws",
    "keywords": "graphql,subscriptions,graphene,websockets",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphql-ws-subs",
    "package_url": "https://pypi.org/project/graphql-ws-subs/",
    "platform": "",
    "project_url": "https://pypi.org/project/graphql-ws-subs/",
    "project_urls": {
      "Homepage": "https://github.com/cjayroe/graphql-ws"
    },
    "release_url": "https://pypi.org/project/graphql-ws-subs/0.0.2/",
    "requires_dist": [
      "graphql-core (==2.*)",
      "flake8 (<4,>=3.7) ; extra == 'dev'",
      "tox (<4,>=3) ; extra == 'dev'",
      "Sphinx (<2,>=1.8) ; extra == 'dev'",
      "bumpversion (>=0.5.3) ; extra == 'maintainer'",
      "wheel (>=0.33.6) ; extra == 'maintainer'",
      "PyYAML (<6,>=5.3) ; extra == 'maintainer'",
      "pytest-cov ; extra == 'test'",
      "graphene (<3,>=2.0) ; extra == 'test'",
      "gevent ; extra == 'test'",
      "graphene (>=2.0) ; extra == 'test'",
      "graphene-django ; extra == 'test'",
      "pytest (<5,>=4) ; (python_version < \"3\") and extra == 'test'",
      "mock ; (python_version < \"3\") and extra == 'test'",
      "django (==1.11.*) ; (python_version < \"3\") and extra == 'test'",
      "channels (==1.*) ; (python_version < \"3\") and extra == 'test'",
      "pytest (>5) ; (python_version >= \"3\") and extra == 'test'",
      "django (==2.*) ; (python_version >= \"3\") and extra == 'test'",
      "channels (==2.*) ; (python_version >= \"3\") and extra == 'test'",
      "pytest-asyncio ; (python_version >= \"3.4\") and extra == 'test'",
      "aiohttp ; (python_version >= \"3.5\") and extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Websocket server for GraphQL subscriptions that includes subscriptions implementation from hballard",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8970701,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc00ddb5d902b4cdaffd7f8d29795356ada2b63398987c63c83a2ae675a82e08",
          "md5": "b791d96b92d210b791e1bc2a0b5f2b47",
          "sha256": "078beaf488f627fe003ea6dcc958155f1a4faff5f36dcfe22829cf9f4fbe8957"
        },
        "downloads": -1,
        "filename": "graphql_ws_subs-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b791d96b92d210b791e1bc2a0b5f2b47",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14663,
        "upload_time": "2020-12-23T14:40:01",
        "upload_time_iso_8601": "2020-12-23T14:40:01.879835Z",
        "url": "https://files.pythonhosted.org/packages/bc/00/ddb5d902b4cdaffd7f8d29795356ada2b63398987c63c83a2ae675a82e08/graphql_ws_subs-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca4ee21b7c51f57672d6fbb2182a374eee68439ba9b4ea8f36e781542a267e95",
          "md5": "693e5f489b2b29ca123b8ada233130e8",
          "sha256": "da8c342a96918636c2b1629264b13e09d4e3256503dedf77a54e956bdff762b6"
        },
        "downloads": -1,
        "filename": "graphql-ws-subs-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "693e5f489b2b29ca123b8ada233130e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23924,
        "upload_time": "2020-12-23T14:40:04",
        "upload_time_iso_8601": "2020-12-23T14:40:04.315630Z",
        "url": "https://files.pythonhosted.org/packages/ca/4e/e21b7c51f57672d6fbb2182a374eee68439ba9b4ea8f36e781542a267e95/graphql-ws-subs-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc00ddb5d902b4cdaffd7f8d29795356ada2b63398987c63c83a2ae675a82e08",
        "md5": "b791d96b92d210b791e1bc2a0b5f2b47",
        "sha256": "078beaf488f627fe003ea6dcc958155f1a4faff5f36dcfe22829cf9f4fbe8957"
      },
      "downloads": -1,
      "filename": "graphql_ws_subs-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b791d96b92d210b791e1bc2a0b5f2b47",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14663,
      "upload_time": "2020-12-23T14:40:01",
      "upload_time_iso_8601": "2020-12-23T14:40:01.879835Z",
      "url": "https://files.pythonhosted.org/packages/bc/00/ddb5d902b4cdaffd7f8d29795356ada2b63398987c63c83a2ae675a82e08/graphql_ws_subs-0.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca4ee21b7c51f57672d6fbb2182a374eee68439ba9b4ea8f36e781542a267e95",
        "md5": "693e5f489b2b29ca123b8ada233130e8",
        "sha256": "da8c342a96918636c2b1629264b13e09d4e3256503dedf77a54e956bdff762b6"
      },
      "downloads": -1,
      "filename": "graphql-ws-subs-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "693e5f489b2b29ca123b8ada233130e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23924,
      "upload_time": "2020-12-23T14:40:04",
      "upload_time_iso_8601": "2020-12-23T14:40:04.315630Z",
      "url": "https://files.pythonhosted.org/packages/ca/4e/e21b7c51f57672d6fbb2182a374eee68439ba9b4ea8f36e781542a267e95/graphql-ws-subs-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}