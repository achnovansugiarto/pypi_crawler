{
  "info": {
    "author": "Robert Brewer, Slobodan IliÄ‡",
    "author_email": "dev@crunch.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# catii :cat::eyes:\n\nA library for N-dimensional categorical data.\n\n## The inverted index (iindex)\n\nMultidimensional data values may be represented in a variety of ways.\nA very common format is the \"rectangular\" or \"tabular\" or \"wide\" format,\nan N-dimensional array where each observation is a \"row\" and each cell\nvalue is a \"category id\" or some other value. This can then be extended\nto two or more dimensions by adding axes as \"columns\" and higher dimensions.\n\nThe same information can be stored as an \"inverted index\" as we do here\nby storing tuples of coordinates, including the \"category id\" as the\nfirst coordinate; \"columns\" or higher dimensions are then additional\nordinates in the tuple. Then, for each set of coordinates, we associate\nit with an array of the \"row ids\" where that combination occurs.\n\nThe inverted index can be much smaller than the equivalent array\nby omitting the most common category from the index. Any row whose\nrow id is not present in the index is assumed to have the common\nvalue. In many fields, the larger the dataset, the more sparse it is.\n\nFor example, the rectangular array::\n\n```#python\na = [1, 0, 4, 0, 1, 1, 4, 1]\n```\n\n...becomes an iindex with shape (8,), a \"common\" value of 1, and two entries::\n\n\n```#python\n>>> from catii import iindex\n>>> iindex.from_array(a)\niindex(shape=(8,), common=1, entries={(0,): array([1, 3], dtype=uint32), (4,): array([2, 6], dtype=uint32)})\n```\n\nThe rectangular array::\n```#python\nb = [\n    [2, 2, 2],\n    [2, 0, 2],\n    [2, 2, 4],\n    [2, 0, 2],\n    [2, 2, 2],\n    [2, 2, 4],\n]\n```\n\n...becomes an iindex with shape (6, 3), a \"common\" value of 2, and the 2-D entries::\n\n\n```#python\n>>> iindex.from_array(b)\niindex(shape=(6, 3), common=2, entries={(0, 1): array([1, 3], dtype=uint32), (4, 2): array([2, 5], dtype=uint32)})\n>>> _.to_array()\narray([[2, 2, 2],\n       [2, 0, 2],\n       [2, 2, 4],\n       [2, 0, 2],\n       [2, 2, 2],\n       [2, 2, 4]], dtype=uint8)\n```\n\nIt is generally assumed that iindex.common is the most common value, but it\nis possible to construct an iindex instance where this is not true.\nCall shift_common() to normalize this. Consequently, two indexes\ncould represent the same exact data values but with different common values\nif one or both have not been normalized; these will not be equal using `==`.\n\n### Indexes versus arrays\n\nAlthough the iindex class can represent the same information as a NumPy array,\nit purposefully does NOT implement the NumPY API, because mixing arrays and\nindexes often results in crudely transforming the sparse index into a dense\narray, obliterating all of the benefits of the index. Iterating over all of\nthe values in an index should not be easy. Instead, the index implements\nmethods which are essential to 1) statistical analysis, and 2) altering\nand interacting with other indexes.\n\nIndexes generally perform as well or better than arrays at these tasks--up to\nabout 75% density for one dimension, and 40% for two or more dimensions.\nIf you have large, dense arrays, or arrays which contain thousands of\ndistinct values, you should consider a hybrid index/array approach or\njust use arrays or some other approach.\n\nEach entry's array of rowids is assumed to be sorted, which allows several\noptimizations. However, in the interest of speed, the index class itself\ndoes NOT automatically validate this. You may call index.validate() to check\nthis and many other invariants, but keep in mind that this is generally\nslow, and should be avoided in production code once proven.\n\nThe first coordinate is always the \"mutually exclusive\" category; additional\ncoordinates are not exclusive. For example, row id 0 should not appear\nat both (1, 7) and (2, 7), but it could appear at both (1, 7) and (1, 8).\nImagine a variable \"do you like this sandwich?\" where \"1\" means \"yes\"\nand \"2\" means \"no\" for the first coordinate, and \"7\" means \"cheesesteak\"\nwhile \"8\" means \"BLT\" for the second coordinate. It's unlikely you need\nto represent someone choosing both \"yes\" and \"no\" for \"cheesesteak\",\nbut quite common to represent someone choosing \"yes\" for both sandwiches.\n\nUnlike most array implementations, the machine type of the distinct values is\nnot a focus--they may be any hashable Python type. In practice, especially\nwhen mixing indexes with arrays, it is generally best to treat coordinates\nas exactly that: points in a linear space of distinct values, usually\ncontiguous integers starting from 0. This is required when using ccubes\n(below), so storing data as integers saves precious query time. Any names\nor other attributes should be separate metadata.\n\n## The contingency cube (ccube)\n\nAnalyses generally consist of summary statistics of variables (iindexes\nor arrays), quite often contingent on, or \"grouped by\", other iindexes.\nFor example, you might want to know the number of people who are affiliated\nwith a particular political party (say, 0=None, 1=Rep, 2=Dem), but grouped\nby education level to see if there is any significant correlation between\nthe two variables. With catii, you calculate this using a ccube:\n\n```#python\n>>> from catii import ccube, iindex\n>>> party = iindex({(1,): [0, 2, 5], (2,): [4]}, common=0, shape=(8,))\n>>> educ = iindex({(0,): [2, 5, 4], (2,): [4]}, common=1, shape=(8,))\n>>> ccube([educ, party]).count()\narray([[1, 2, 0],\n       [3, 1, 0],\n       [0, 0, 1]])\n```\n\nThe returned array is a 2-dimensional \"hypercube\": a contingency table\n(or \"crosstab\") representing the frequency distribution of these two variables\nfor our sample. You're probably familiar seeing it in a more tabular form:\n\n```\n         party\n          0    1    2\ne        --   --   --\nd    0 |  1    2    0\nu    1 |  3    1    0\nc    2 |  0    0    1\n```\n\nWe passed our two variables as dimensions to the ccube, and asked for a count\nof their interaction. Since we provided two 1-D iindexes, the output was 2-D.\nIf either of our input iindexes had additional axes, the output would be three\nor more dimensions.\n\nThe dimensions must all correspond row-wise; that is, when we say \"the educ\nvariable has value 0 in row 5\" and \"the party variable has value 1 in row 5\",\nwe mean that \"row 5\" in both refers to the same observation in our data.\nWe aggregate over the rows, so they are never a dimension in our output.\n\nWhen the dimension iindexes include additional axes, they are assumed to be\nindependent, and the ccube iterates over their Cartesian product. For each\ncombination of higher axes, it forms a subcube of 1-D slices of each dimension,\nand stacks their output. For example, if instead of \"party\" we had a 2-D\n\"genre\" variable for recording which music genres (say, 0=classical, 1=pop\",\nand 2=alternative) people like or dislike (0=missing, 1=like, 2=dislike),\nwe would see an additional dimension in our cube output. The like/dislike\naxis would be distinct values and therefore the first coordinate in our\niindex tuples. The genre axis would be placed in the second coordinate.\n\n```#python\n>>> genre = iindex.from_array([\n    [0, 0, 0],\n    [0, 0, 1],\n    [0, 1, 0],\n    [2, 1, 1],\n    [1, 0, 0],\n    [2, 2, 1]\n    ])\n>>> genre\niindex(shape=(6, 3), common=0, entries={\n    (1, 0): array([4], dtype=uint32),\n    (1, 1): array([2, 3], dtype=uint32),\n    (1, 2): array([1, 3, 5], dtype=uint32),\n    (2, 0): array([3, 5], dtype=uint32),\n    (2, 1): array([5], dtype=uint32)\n    })\n>>> ccube([genre]).count()\narray([[3, 1, 2],  # classical\n       [3, 2, 1],  # pop\n       [3, 3, nan]]) # alternative\n```\n\nThe additional axes are always moved to be outermost (in the same order),\nso the result above iterates over the genre axis first, and then more tightly\nover the missing/like/dislike values.\n\n### Frequency functions (ffuncs)\n\nIn addition to counting, catii provides other aggregate functions to use with\ncubes: sum, mean, and valid count. These all take at least one additional \"fact\nvariable\" as an argument; that is, the data to sum, or average, or count valid\nvalues within. These must also correspond row-wise to the cube dimensions.\n\nEach of these operate just like count, and return a cube of results.\n\n### Weights\n\nAll of the ffuncs take an optional \"weights\" argument. If given, it must also\ncorrespond row-wise to the dimensions and any fact variables. The function then\nweights the data by these values. For example:\n\n```#python\n>>> from catii import ccube, iindex\n>>> import numpy\n>>> party = iindex({(1,): [0, 2, 5], (2,): [4]}, common=0, shape=(8,))\n>>> ccube([party]).count()\narray([4, 3, 1])\n>>> weights = numpy.arange(10) / 10.0\n>>> weights\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n>>> ccube([party]).count(weights)\narray([3.4, 0.7, 0.4])\n```\n\n### Missing values\n\nFact variables and weight variables may take one of two forms:\n    * a single NumPy array, where missing values are represented by NaN or NaT\n    * a pair of NumPy arrays, where the first contains values and the second\n      is a \"validity\" array of booleans: True meaning \"valid\" and False meaning\n      \"missing\". Where False, the corresponding values in the first array\n      are ignored.\n\nTo some extent, which format you choose depends on your application and how\nyour data is already represented. Note, however, that NumPy arrays of `int`\nor `str` have no standard way to represent missing values. Rather than nominate\nsentinel values for these and similar types, you may pass a separate \"validity\"\narray of booleans, and you might therefore consider doing so for all dtypes.\nNote this is slightly faster, as well.\n\nFunctions provided here all have a `reduce` method which returns cube output\nas NumPy arrays; these outputs may also have a missing value in any cell that\n1) had no rows in the inputs with cube dimensions corresponding to it, or\n2) had rows but corresponding fact values or weights were missing values (\"all\"\nif `ignore_missing` else \"any\").\n\nThis is somewhat divergent from standard NumPy which, for example, defaults\nnumpy.sum([]) to 0.0. However, consumers of catii often need to distinguish\na sum or mean of [0, 0] from one of []. You are, of course, free to take the\noutput and set arr[arr.isnan()] = 0 if you desire.\n\nEach ffunc has an optional `ignore_missing` arg. If False (the default), then\nany missing values (values=NaN or validity=False) are propagated so that\noutputs also have a missing value in any cell that had a missing value in\none of the rows in the fact variable or weight that contributed to that cell.\nIf `ignore_missing` is True, such input rows are ignored and do not contribute\nto the output, much like NumPy's `nanmean` or R's `na.rm = TRUE`. Note this\nis also faster and uses less memory.\n\nThe `reduce` methods herein all default to the \"single NumPy array\" format,\nwith NaN values indicating missingness. Pass e.g. `return_missing_as=(0, False)`\nto return a 2-tuple of (values, validity) arrays instead. Functions here will\nreplace NaN values in the `values` array with 0 in that case. If you prefer\n`sum([])` to return 0, for example, without a second \"validity\" array,\npass `return_missing_as=0`.\n\n### Combined cube calculation\n\nOften, when finding summaries like a weighted count, we also want an unweighted\ncount, or we want to show means but with the \"base\" counts. We could simply\nform one cube and call each shortcut method:\n\n```#python\n>>> c = ccube([educ, party])\n>>> c.mean(arr)\n>>> c.count()\n```\n\nHowever, that has to form the interaction of the dimensions twice. If our educ\nand party variables have millions of rows, or are very dense, or have hundreds\nof categories, or additional axes, or if we cross additional variables, this\nstep can quickly multiply in execution time. You can save time by using\nccube.calculate instead and pass a list of ffuncs:\n\n```#python\n>>> from catii import ffuncs\n>>> c = ccube([educ, party])\n>>> means, counts = c.calculate([ffuncs.ffunc_mean(arr), ffuncs.ffunc_count()])\n```\n\nThis iterates over our educ and party dimensions once, and passes\neach distinct combination of coordinates to each ffunc.\n\n## The rectangular contingency cube (xcube) and frequency functions (xfuncs)\n\nIf your dimension variables are NumPy arrays, it can be expensive to turn them\ninto iindexes. Generally, this should be done at write time, so that reads,\nespecially ccubes, can be fast. Sometimes, however, you don't have a choice,\nor a particular variable is so dense (over 75% or so) that it's actually\nsmaller as a NumPy array. In addition, not every aggregate function is able\nto be implemented using the \"marginal differencing\" approach that ccubes use:\nstandard deviations, for example, use square roots which are not reversible.\n\nThe catii package provides an \"xcube\" object to fall back to when you cannot\nuse iindexes as cube dimensions. The xcube works just like the ccube, but takes\nNumPy arrays as dimensions rather than iindexes. There are a set of \"xfuncs\"\nwhich correspond to, and extend, the set of \"ffuncs\" you would use with ccubes.\nIn general, even when your dimensions are up to about 75% dense, a ccube/ffunc\nwill outperform the same xcube/xfunc. But in many domains, the larger the data,\nthe more sparse it is. Dimensions which are 90-99% sparse can be cubed in\none or two orders of magnitude less time.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Crunch-io/catii",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "catii",
    "package_url": "https://pypi.org/project/catii/",
    "platform": null,
    "project_url": "https://pypi.org/project/catii/",
    "project_urls": {
      "Homepage": "https://github.com/Crunch-io/catii"
    },
    "release_url": "https://pypi.org/project/catii/1.0.0a10/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library for N-dimensional categorical data.",
    "version": "1.0.0a10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17478081,
  "releases": {
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac423b58462022349bb90db460f671efbf7a29bfecf0423b61d8047809302328",
          "md5": "9693994d72b7920737e3969b394cacbb",
          "sha256": "8e06310b2ecc06106f9496dd6faa6b7ee19beeb35b33b3eb8430e09c97be26ef"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "9693994d72b7920737e3969b394cacbb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21210,
        "upload_time": "2023-02-03T19:19:56",
        "upload_time_iso_8601": "2023-02-03T19:19:56.079364Z",
        "url": "https://files.pythonhosted.org/packages/ac/42/3b58462022349bb90db460f671efbf7a29bfecf0423b61d8047809302328/catii-1.0.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2de3cd598581e2dcf41cb07a7ef456655cd866ef8007823b6ae12306766131a8",
          "md5": "2c92eab8ce85c9c4cb140f2b48cbf6f3",
          "sha256": "2b0b1dfde93bb9336337eac01bbabe1a3eab377e6d2b2c0e6dca8c3b0ae50ae4"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a10.tar.gz",
        "has_sig": false,
        "md5_digest": "2c92eab8ce85c9c4cb140f2b48cbf6f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43406,
        "upload_time": "2023-03-28T13:03:29",
        "upload_time_iso_8601": "2023-03-28T13:03:29.272573Z",
        "url": "https://files.pythonhosted.org/packages/2d/e3/cd598581e2dcf41cb07a7ef456655cd866ef8007823b6ae12306766131a8/catii-1.0.0a10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99b98f1e942b32de03207c9763382246975260a97d91e0b209d0309b7e09d281",
          "md5": "c6ae835f4fbbd96c35eaab7a8c1f009b",
          "sha256": "5e6f991ddaf77e4d249ed93c6be806080675dc04c01fb0a496401d371c36d048"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "c6ae835f4fbbd96c35eaab7a8c1f009b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17189,
        "upload_time": "2023-02-07T23:51:04",
        "upload_time_iso_8601": "2023-02-07T23:51:04.695088Z",
        "url": "https://files.pythonhosted.org/packages/99/b9/8f1e942b32de03207c9763382246975260a97d91e0b209d0309b7e09d281/catii-1.0.0a3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f57733159d3d9addc207bf3511fafa145401ac0fec5c3ac0c3eb3b6745a15c1",
          "md5": "4a056813a0acd3a6961b26e2bf20ca8a",
          "sha256": "51acb0b27ae3fd4ca0ede52120199448ea264e795c541f96938dfa6a2dbe7522"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a4.tar.gz",
        "has_sig": false,
        "md5_digest": "4a056813a0acd3a6961b26e2bf20ca8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40874,
        "upload_time": "2023-03-02T15:19:55",
        "upload_time_iso_8601": "2023-03-02T15:19:55.351555Z",
        "url": "https://files.pythonhosted.org/packages/9f/57/733159d3d9addc207bf3511fafa145401ac0fec5c3ac0c3eb3b6745a15c1/catii-1.0.0a4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90e3737ee76fe33427fb61eb276281ccafc50e99d5300404e7ac2d400058e75a",
          "md5": "eeb3ce783ba92e034068199952cf8266",
          "sha256": "1849591f8929d5e379c518699f64ae994d79d1d82f3ba18b382d8b432677d478"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a5.tar.gz",
        "has_sig": false,
        "md5_digest": "eeb3ce783ba92e034068199952cf8266",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40930,
        "upload_time": "2023-03-02T20:19:29",
        "upload_time_iso_8601": "2023-03-02T20:19:29.636803Z",
        "url": "https://files.pythonhosted.org/packages/90/e3/737ee76fe33427fb61eb276281ccafc50e99d5300404e7ac2d400058e75a/catii-1.0.0a5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd625732c8ec5a0269894ddbf9e360c7a49bdddfcc2de56d23c5b35c1991fb5d",
          "md5": "1403b04d766f79ed0284c23bf2b3dd88",
          "sha256": "d3607351f4b1e1d79aeb338184da5ed654d0cc5a9025b87fcec67edac472c76e"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a6.tar.gz",
        "has_sig": false,
        "md5_digest": "1403b04d766f79ed0284c23bf2b3dd88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41435,
        "upload_time": "2023-03-07T20:45:09",
        "upload_time_iso_8601": "2023-03-07T20:45:09.323574Z",
        "url": "https://files.pythonhosted.org/packages/bd/62/5732c8ec5a0269894ddbf9e360c7a49bdddfcc2de56d23c5b35c1991fb5d/catii-1.0.0a6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0be030b4b29bcefcb6ab83611e8802e3d55a2af95911601c8c091d84f2ebf6bc",
          "md5": "5cdcc0126083692b26ac4f44f3948af3",
          "sha256": "b8eb7e61eb07312a263a950daa542e20285f6e6ec2bd407567f8f50aa2708235"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a7.tar.gz",
        "has_sig": false,
        "md5_digest": "5cdcc0126083692b26ac4f44f3948af3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42062,
        "upload_time": "2023-03-09T07:12:43",
        "upload_time_iso_8601": "2023-03-09T07:12:43.034301Z",
        "url": "https://files.pythonhosted.org/packages/0b/e0/30b4b29bcefcb6ab83611e8802e3d55a2af95911601c8c091d84f2ebf6bc/catii-1.0.0a7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9daf53c9ee8f16775f40d9f8f06bedb175bb1046bbfeae039d6d130e0ab4c55",
          "md5": "f31768331cdf71413ccd2a7a489a71df",
          "sha256": "92f0e7c1d28ab900317fd0faabe3fe417ddd86a5e7d9070a2000e76ee925a4a6"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a8.tar.gz",
        "has_sig": false,
        "md5_digest": "f31768331cdf71413ccd2a7a489a71df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42993,
        "upload_time": "2023-03-20T14:08:02",
        "upload_time_iso_8601": "2023-03-20T14:08:02.451344Z",
        "url": "https://files.pythonhosted.org/packages/c9/da/f53c9ee8f16775f40d9f8f06bedb175bb1046bbfeae039d6d130e0ab4c55/catii-1.0.0a8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f82f1b7b513d72184049203f13e3eaac53842e23f0d6ec6591f201063698ae2",
          "md5": "d3ce9196eba79deaddd66a1238f46384",
          "sha256": "7c4bf2525336b9191cfaa1f3f565ebcf004d43f79571023631d99dc25f46673f"
        },
        "downloads": -1,
        "filename": "catii-1.0.0a9.tar.gz",
        "has_sig": false,
        "md5_digest": "d3ce9196eba79deaddd66a1238f46384",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43008,
        "upload_time": "2023-03-20T14:54:38",
        "upload_time_iso_8601": "2023-03-20T14:54:38.119471Z",
        "url": "https://files.pythonhosted.org/packages/9f/82/f1b7b513d72184049203f13e3eaac53842e23f0d6ec6591f201063698ae2/catii-1.0.0a9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2de3cd598581e2dcf41cb07a7ef456655cd866ef8007823b6ae12306766131a8",
        "md5": "2c92eab8ce85c9c4cb140f2b48cbf6f3",
        "sha256": "2b0b1dfde93bb9336337eac01bbabe1a3eab377e6d2b2c0e6dca8c3b0ae50ae4"
      },
      "downloads": -1,
      "filename": "catii-1.0.0a10.tar.gz",
      "has_sig": false,
      "md5_digest": "2c92eab8ce85c9c4cb140f2b48cbf6f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43406,
      "upload_time": "2023-03-28T13:03:29",
      "upload_time_iso_8601": "2023-03-28T13:03:29.272573Z",
      "url": "https://files.pythonhosted.org/packages/2d/e3/cd598581e2dcf41cb07a7ef456655cd866ef8007823b6ae12306766131a8/catii-1.0.0a10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}