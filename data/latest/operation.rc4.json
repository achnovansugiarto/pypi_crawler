{
  "info": {
    "author": "Yoav Abadi",
    "author_email": "yoavabadi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Operation\n=========\n[![python-versions](https://img.shields.io/badge/python-3.6-blue?logo=python)](https://img.shields.io/pypi/pyversions/operation)\n[![pypi-badge](https://img.shields.io/pypi/v/operation.svg)](https://pypi.org/project/operation)\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](/LICENSE)\n\n[Railway Oriented Programming](https://fsharpforfunandprofit.com/rop/) implementation for Python.\n\n## Motivation\nHandling events that trigger a sequence of commands or side-effects can be extremely elegant using the railway pattern.\nThis package can allow you to create a dedicated pipeline for each flow or event, that will preform the tasks in an ordered fashion. \n\n## Basic Usage\n\n1. Create a class that inherit from `Operation`, with `phases` method:\n```python\nfrom operation import Operation\n\n\nclass SomeOperation(Operation):\n    def phases(self):\n        return [\n            'phase_one',\n            'phase_two',\n            'phase_three'\n        ]\n\n    def phase_one(self):\n        self.options['option_for_second_phase'] = True\n\n    def phase_two(self):\n        if 'option_for_second_phase' in self.options:\n            return 'an option got passed from first phase, cool!'\n\n    def phase_three(self):\n        self.options['reached_third_phase'] = True\n```\n2. in the operation manager, use `SomeOperation(options).run()`, where `options` are the input to the operation flow.\n\n## Example\nFor example, if you create an operation that first connects to a database, then fetches the a document by an id, validates it, and finally send a post request of the entry's user_id, it can look like this:\n```python\nimport requests\nfrom pymongo import MongoClient\n\nfrom operation import Operation\n\n\nclass RetrieveDataAndPost(Operation):\n    def phases(self):\n        return [\n            'connect_to_mongo',\n            'fetch_document',\n            'validate_document',\n            'post_results'\n        ]\n\n    def connect_to_mongo(self):\n        self.options['albums_collection'] = MongoClient('<MongoDB_URL>').albums\n\n    def fetch_document(self):\n        album_id = self.options.get('album_id')\n        self.options['album'] = self.options['albums_collection'].find_one({ 'id': album_id })\n\n    def validate_document(self):\n        if 'artist_name' not in self.options['album']:\n            self.fail_operation()\n\n    def post_results(self):\n        selected_artist =  self.options.get('album').get('artist_name')\n        requests.post('<Artists_Service_URL>', data={'selected_artist': selected_artist})\n```\n## Features\n\n\n### Break operation\nCalling the `break_operation(message?)` allows you to break from the operation's (event's handler) pipeline on an invalid result, without failing the whole operation.\nAn example for such a use-case is when checking in a DataBase if an entity not exists, and if so - not continuing the operation.\n\nIn the bellow flow, we want to process a [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) event named `OrderCreated` of our online shop, \nwhere if the user details not present in our DB, we would not want to proceed, because only signed-up users can create an order:\n\n```python\nfrom operation import Operation\n\n\nclass OrderCreated(Operation):\n    def phases(self):\n        return [\n            'validate_user_exists',\n            'create_an_order',\n            '...',\n            '...'\n        ]\n\n    def validate_user_exists(self):\n        user = db.user_collection.find_one({'id': self.options['user_id']})\n        if not user:\n            self.break_operation(message='user not in mongo collection')\n\n    def create_an_order(self):\n        ...\n\n```\n\n\n### Fail operation\nBy calling `fail_operation(message?)`, we can stop *and* fail the operation.\nThis can be very useful in case of, for example, a momentarily network connection issue with another service or a remote DB,\nwhen you will want to send the operation result object to a failed-queue, for later processing of the event from the phase\nit failed, and with the current options. \n\nWe can also `raise` an Exception and it will count as a failed-operation, but in a case where we have a wrapper around the service call /\nDB access which already catches the exception, this is very useful:\n\nOther Module that handle mongo connection:\n```python\n\nfrom pymongo import MongoClient\n\n\nclass UserCollection:\n    def init_connection(self):\n        try:\n            return MongoClient('<MongoDB_URL>').db.user_collection\n        except Exception as e:\n            return None\n    ...\n```\n\nOur operation:\n```python\nfrom models.user import UserCollection\nfrom operation import Operation\n\n\nclass OrderCreated(Operation):\n    def phases(self):\n        return [\n            'validate_user_exists',\n            'create_an_order',\n            '...',\n            '...'\n        ]\n\n    def validate_user_exists(self):\n        user_collection =  UserCollection().init_connection()\n        if not user_collection:\n            self.fail_operation(message='mongo connection failure')\n\n    def create_an_order(self):\n        ...\n\n```\n\n### Schema\nThe Schema mechanism allows us to validate the messages (the event payload) been passed to the operation,\nbefore the operation itself starts:\n```python\nschema = Schema({'user_id': int, 'logged_in': bool})\nevent_payload = {'user_id': 'not a number', 'logged_in': True}\nOrderCreated(options=event_payload, schema=schema).run()\n```\nThis run will result in a failure, with a fail message of:\n```schema.SchemaUnexpectedTypeError: 'not a number' should be instance of 'int'```\n\n\n### entry_phase\nThe entry phase allow us to use the operation from a specific phase, and skip it's previous phases.\nThe most common use-case for this is re-running the operation in a case of failure, or using only a small part of the\nwhole operation.\n```python\nevent_payload = {'user_id': 123, 'logged_in': True}\nOrderCreated(options=event_payload, entry_phase='create_an_order').run()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yoavabadi/operation",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "operation",
    "package_url": "https://pypi.org/project/operation/",
    "platform": "",
    "project_url": "https://pypi.org/project/operation/",
    "project_urls": {
      "Homepage": "https://github.com/yoavabadi/operation"
    },
    "release_url": "https://pypi.org/project/operation/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Railway pattern based operation package",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8171511,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0670e594800644028753b451c659ef8454504d500430db3233ab87cdfc6bf32",
          "md5": "21c9db97105ce1393a77361b70a14ccc",
          "sha256": "17d978a5e1366d4ae4438ac7f88f59db40935d305fabca03b56d5134cdb490c8"
        },
        "downloads": -1,
        "filename": "operation-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21c9db97105ce1393a77361b70a14ccc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4362,
        "upload_time": "2020-09-03T05:37:00",
        "upload_time_iso_8601": "2020-09-03T05:37:00.858592Z",
        "url": "https://files.pythonhosted.org/packages/e0/67/0e594800644028753b451c659ef8454504d500430db3233ab87cdfc6bf32/operation-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ba6f314ecc4afa77effb90c287edcefa500f967ee4d23162c09febbe41510a5",
          "md5": "1d20bc602f14b75d15b6d6d682a9492a",
          "sha256": "f3c8a01cb58d580b5b86da00c8e4217742dcd702425ce5c164bd7888e239fd66"
        },
        "downloads": -1,
        "filename": "operation-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1d20bc602f14b75d15b6d6d682a9492a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2984,
        "upload_time": "2020-09-03T05:37:03",
        "upload_time_iso_8601": "2020-09-03T05:37:03.309716Z",
        "url": "https://files.pythonhosted.org/packages/1b/a6/f314ecc4afa77effb90c287edcefa500f967ee4d23162c09febbe41510a5/operation-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e0b9dc36f911304a04a26bacc6c2c93b123f2cd2957484d1afcf1fbdf2fa2cf",
          "md5": "89414d03416d646e12a3ca5fac6a4861",
          "sha256": "b27765da86215536b8a09f955d61a5ec376adc32396729571daf9528d38947ef"
        },
        "downloads": -1,
        "filename": "operation-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89414d03416d646e12a3ca5fac6a4861",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4709,
        "upload_time": "2020-09-04T19:33:00",
        "upload_time_iso_8601": "2020-09-04T19:33:00.475078Z",
        "url": "https://files.pythonhosted.org/packages/5e/0b/9dc36f911304a04a26bacc6c2c93b123f2cd2957484d1afcf1fbdf2fa2cf/operation-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93c5f161cee3f50efc0ee216fe63b7f8a7960ef501f47438783e12a16c1512f0",
          "md5": "11292a1f4a950f6a76cf26e9b8609a62",
          "sha256": "8ed235bd719febf187a611ce3025c2575e7ca225c7480702b1262697bdf4960c"
        },
        "downloads": -1,
        "filename": "operation-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "11292a1f4a950f6a76cf26e9b8609a62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3332,
        "upload_time": "2020-09-04T19:33:01",
        "upload_time_iso_8601": "2020-09-04T19:33:01.465998Z",
        "url": "https://files.pythonhosted.org/packages/93/c5/f161cee3f50efc0ee216fe63b7f8a7960ef501f47438783e12a16c1512f0/operation-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73a4162f90fedb0ed5621202161dbdeed48e3b14a1c7c8ab30416722bb7a598a",
          "md5": "e64c289a85b006be6d50aa5b5c5eb778",
          "sha256": "2b165b0f0dea8a1e1f1d3574fafc83069f3b0044b557afb187ec217391ce7b55"
        },
        "downloads": -1,
        "filename": "operation-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e64c289a85b006be6d50aa5b5c5eb778",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4738,
        "upload_time": "2020-09-11T13:33:16",
        "upload_time_iso_8601": "2020-09-11T13:33:16.426782Z",
        "url": "https://files.pythonhosted.org/packages/73/a4/162f90fedb0ed5621202161dbdeed48e3b14a1c7c8ab30416722bb7a598a/operation-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1fd7d113654597af15cdbfc26a06f7ec64753287b7b8601d2b59225b7be7751",
          "md5": "3af45b30ca4095fa31fc746b8677218c",
          "sha256": "f8e32882c88cd47d9a82e0299a7863e27c789b8509279f72d75eda7da55ad0a7"
        },
        "downloads": -1,
        "filename": "operation-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3af45b30ca4095fa31fc746b8677218c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3373,
        "upload_time": "2020-09-11T13:33:17",
        "upload_time_iso_8601": "2020-09-11T13:33:17.720292Z",
        "url": "https://files.pythonhosted.org/packages/d1/fd/7d113654597af15cdbfc26a06f7ec64753287b7b8601d2b59225b7be7751/operation-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "321c469a12efb8ccb23df6879bd867d9032506c9d0ec6b80e99242892fe46c79",
          "md5": "befe586354c173bb6e46eaa776884c60",
          "sha256": "abf1b03c8a6fd5c573253e8efec3540cb2d3a1e5f18d03a38a3d3cb5662758b8"
        },
        "downloads": -1,
        "filename": "operation-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "befe586354c173bb6e46eaa776884c60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6109,
        "upload_time": "2020-09-12T13:50:48",
        "upload_time_iso_8601": "2020-09-12T13:50:48.858942Z",
        "url": "https://files.pythonhosted.org/packages/32/1c/469a12efb8ccb23df6879bd867d9032506c9d0ec6b80e99242892fe46c79/operation-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5029ebe5e921e23057cf0288e94a7f8582157b4d7bd102107308998a4f3ab63e",
          "md5": "c0be7dc2d4915461183d01debd7615ec",
          "sha256": "33bcc8b6c978f0e15eb6d279ccfb96c8cd03c492dca6334191842a1dc6ef486d"
        },
        "downloads": -1,
        "filename": "operation-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c0be7dc2d4915461183d01debd7615ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5045,
        "upload_time": "2020-09-12T13:50:49",
        "upload_time_iso_8601": "2020-09-12T13:50:49.861478Z",
        "url": "https://files.pythonhosted.org/packages/50/29/ebe5e921e23057cf0288e94a7f8582157b4d7bd102107308998a4f3ab63e/operation-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "321c469a12efb8ccb23df6879bd867d9032506c9d0ec6b80e99242892fe46c79",
        "md5": "befe586354c173bb6e46eaa776884c60",
        "sha256": "abf1b03c8a6fd5c573253e8efec3540cb2d3a1e5f18d03a38a3d3cb5662758b8"
      },
      "downloads": -1,
      "filename": "operation-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "befe586354c173bb6e46eaa776884c60",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6109,
      "upload_time": "2020-09-12T13:50:48",
      "upload_time_iso_8601": "2020-09-12T13:50:48.858942Z",
      "url": "https://files.pythonhosted.org/packages/32/1c/469a12efb8ccb23df6879bd867d9032506c9d0ec6b80e99242892fe46c79/operation-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5029ebe5e921e23057cf0288e94a7f8582157b4d7bd102107308998a4f3ab63e",
        "md5": "c0be7dc2d4915461183d01debd7615ec",
        "sha256": "33bcc8b6c978f0e15eb6d279ccfb96c8cd03c492dca6334191842a1dc6ef486d"
      },
      "downloads": -1,
      "filename": "operation-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c0be7dc2d4915461183d01debd7615ec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5045,
      "upload_time": "2020-09-12T13:50:49",
      "upload_time_iso_8601": "2020-09-12T13:50:49.861478Z",
      "url": "https://files.pythonhosted.org/packages/50/29/ebe5e921e23057cf0288e94a7f8582157b4d7bd102107308998a4f3ab63e/operation-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}