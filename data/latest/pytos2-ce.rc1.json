{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "`pytos2` CE: Official Python Library for the [Tufin Orchestration Suite](https://tufin.com)\n==============================================\n`pytos2` \"Community Edition\" (CE) is the official Python library\nfor the Tufin Orchestration Suite. It is created, maintained by\nand supported by the Tufin Professional Services Solutions team (PSS). It wraps the\n[Official TOS API](https://forum.tufin.com/support/kc/latest/Content/Suite/4423.htm)\nand provides idiomatic Python-level types and features.\n\n`pytos2-ce` currently supports TufinOS3 and both TOS Classic and Aurora. The\nimplementation of Aurora-specific GraphQL features, as well as some of the\nbelow-stated features are still under active development.\n\nInstallation\n------------\n[Git](https://git-scm.com) is a prerequisite for installation. Also, development using either\n[`venv`](https://docs.python.org/3/library/venv.html#creating-virtual-environments)\nor [Docker](https://docs.docker.com/get-docker/)\nis recommended.\n\n`pytos2` CE is currently *not* yet available on [PyPI](https://pypi.org). To install, use\nthe following [`pip`](https://pypi.org/project/pip/) command:\n\n```bash\n$ pip install git+https://gitlab.com/tufinps/pytos2-ce\n```\n\nSetup\n-----\n`pytos2` CE recommends pre-setting the following environment\nvariables while using this library, and they will be assumed to be\nset from this point onward. They can either be set directly\nin the environment using a method of your choice, or you can use [python-dotenv](https://saurabh-kumar.com/python-dotenv/). They are as follows:\n\n- `TOS_HOSTNAME`: The hostname where your TOS installation lives.\n  It is assumed to *not* be a split SecureTrack/SecureChange\n  environment.\n- `SCW_API_USERNAME`: The username of the SecureChange user that we\n  will be utilizing for the following examples. Please ensure that\n  this user exists and has appropriate permissions for whatever\n  workflows/tickets will be used.\n- `SCW_API_PASSSWORD`: The password of the SecureChange user that we\n  will be utilizing for the following examples.\n\nUsage\n-----\nFirst, load the environment variables from the [Setup section](#Setup) into your Python session:\n\n```python\nfrom os import getenv\n\nTOS_HOSTNAME = getenv(\"TOS_HOSTNAME\")\nSCW_API_USERNAME = getenv(\"SCW_API_USERNAME\")\nSCW_API_PASSWORD = getenv(\"SCW_API_PASSWORD\")\n```\n\n### SecureChange\nThe following example will walk a SecureChange `Ticket` belonging to a\nhypothetical `Workflow` from start to finish using `pytos2` CE,\nshowcasing its most-commonly-used features.\n\nFirst, set up the `Scw` instance. This class instance will be\nresponsible for all SecureChange interactions:\n\n```python\nfrom pytos2.securechange import Scw\n\nscw = Scw(TOS_HOSTNAME, SCW_API_USERNAME, SCW_API_PASSWORD)\n```\n\n#### Step 1\nThe first step of the sample `Workflow` we will be using is\nenpictured here:\n\n![Example Ticket Step #1](doc/securechange-step-1.png)\n\nSince our `Ticket` has ID #2335, let's fetch the `Ticket` by id\nwith the following:\n\n```python\nticket = scw.get_ticket(2335)\n# ticket = Ticket(subject='Test Ticket #355', id=2335, status=<TicketStatus.INPROGRESS: 'In Progress'>, comments=[], _current_step=Step(id=22979, name='Service Selection', redone=False, skipped=False))\n```\n\nWith that being successful, let's move on to `Step` #2.\n\n#### Step 2\n![Example Ticket Step #2](doc/securechange-step-2.png)\n\nNow that we have the ticket, let's copy the Hyperlink field\n\"Website\" from `Step` 1 to `Step` 2. (Technically, we'll be moving\nthe hyperlink from the first `Task` of `Step` 1 to the first\n`Task` of `Step` 2, but since this example isn't using dynamic\nassignment, we'll assume going forward that \"`Step` N\" is\nreferring to the first `Task` of \"`Step` N\"). First, let's\nretrieve the value of the field on `Step 1` by name:\n\n```python\nhyperlink = ticket.steps[0].last_task.get_field(\"Website\")\n# hyperlink = Hyperlink(name='Website', id=974324, xsi_type=<FieldXsiType.HYPERLINK: 'hyperlink'>, url='http://example.com/tufin')\n```\nGreat! Now, let's copy it to our current step's \"Website\" field:\n\n```python\ncurrent_hyperlink = ticket.last_task.get_field('Website')\ncurrent_hyperlink = Hyperlink(name='Website', id=974326, xsi_type=<FieldXsiType.HYPERLINK: 'hyperlink'>, url='http://')\n\ncurrent_hyperlink.url = hyperlink.url\n\nticket = ticket.save()\n```\n\n*N.B.:* We are making the result of the saved `Ticket` our new\nworking `Ticket`, as the prior `Ticket`-in-memory would be\ninvalidated at this point (since we just saved it; `Ticket`s do not currently update in-place).\n\nIf all has gone right, let's go back to SecureChange proper and\nrefresh our `Ticket`'s at `Step` 2:\n\n![Example Ticket Step #2, Edit #1](doc/securechange-step-2-edit-1.png)\n\nExcellent. Now let's also programatically fill out the \"Services\" and \"Service Expiration\" fields, and advance the `Ticket`:\n\n```python\nservices = ticket.last_task.get_field(\"Services\")\n# services = MultipleSelection(name='Services', id=974327, xsi_type=<FieldXsiType.MULTIPLE_SELECTION: 'multiple_selection'>, selected_options=[], options=[Option(id=None, value='HTTP'), Option(id=None, value='FTP'), Option(id=None, value='SSH')])\nservices.selected_options.append(services.options[0])\nservices.selected_options.append(services.options[2])\n\nfrom datetime import date\nexpiration = ticket.last_task.get_field(\"Service Expiration\")\n# expiration = Date(name='Service Expiration', id=974328, xsi_type=<FieldXsiType.DATE: 'date'>, _date=None)\nexpiration.date = date(2021, 12, 22)\n\nticket = ticket.advance()\n```\n\nDouble-checking with SecureChange, we indeed see that `Step` 2 has\nthe corresponding fields updated, and that the `Ticket` has been\nadvanced to the final step, `Step` 3:\n\n![Example Ticket Step #2, Edit #2](doc/securechange-step-2-edit-2.png)\n\n#### Step 3\n`Step` 3 is the \"Approval\" step. In it, we'll accept this Service Change Request with an appropriate reason and check the \"terms and conditions\" checkbox programatically.\n\n![Example Ticket Step #3](doc/securechange-step-3.png)\n\n```python\napproval = ticket.last_task.get_field(\"Approve\")\n# approval = ApproveReject(name='Approve', id=974334, xsi_type=<FieldXsiType.APPROVE_REJECT: 'approve_reject'>, approved=None)\napproval.approved = True\napproval.reason = 'This service looks reasonable.'\n```\n\nNow, let's check the checkbox.\n\n `pytos2` CE offers more than one\nway to access `Step` fields. We've already seen\n`ticket.task.get_field`, but there's also the `ticket.task.fields` property:\n\n```python\n# ticket.last_task.fields = [ApproveReject(name='Approve', id=974334, xsi_type=<FieldXsiType.APPROVE_REJECT: 'approve_reject'>, approved=True),\n Checkbox(name='I understand and agree to the license and terms of conditions.', id=974335, xsi_type=<FieldXsiType.CHECKBOX: 'checkbox'>, value=False)]\n```\n\nLet's access and check the checkbox with this method:\n\n```python\ncheckbox = ticket.last_task.fields[-1]\n# checkbox = Checkbox(name='I understand and agree to the license and terms of conditions.', id=974335, xsi_type=<FieldXsiType.CHECKBOX: 'checkbox'>, value=False)\ncheckbox.value = True\n```\nIn production environments, you'll often want to use\n`ticket.task.get_field` instead of get-by-index because if fields are ever reordered, your indexing code\nwill be broken. And while its entirely possible for field names to\nchange, they do so less frequently - and when they are, name changes are\neasier to deal with than abstract indexes.\n\nFinally, let's close `ticket`. All we need to do is advance the ticket, and if it's on the last step, SecureChange will close it automatically:\n\n```python\nticket = ticket.advance()\n```\n\nAs expected, visiting that same `Ticket` in SecureChange will show both the changes we've made, and that the `Ticket` is indeed closed!:\n\n![Example Ticket, Closed](doc/securechange-closed.png)\n\nDevelopment\n-----------\n`pytos2` CE is under active development by the Tufin PSS team. Bug\nand feature requests can created by\n[opening a new issue](https://gitlab.com/tufinps/pytos2-ce/-/issues/new).\n\nThe versioning strategy is [semver](https://semver.org).\n\nSupport\n-------\nFor additional `pytos2-ce` support or inquiries, please visit the\n[pytos category of our Developer Community](https://community.tufin.com/c/pytos/11).\nFor sales or other general-purpose inquiries please contact your account manager or visit\n[our contact page](https://www.tufin.com/contact-us).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytos2-ce",
    "package_url": "https://pypi.org/project/pytos2-ce/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytos2-ce/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pytos2-ce/2.3.10/",
    "requires_dist": [
      "requests (<3)",
      "traversify",
      "attrs (<20,>=19.2)",
      "python-json-logger (<0.2)",
      "netaddr (<0.8)",
      "result (==0.8.0)",
      "typing-extensions",
      "python-dateutil (<3,>=2.8)"
    ],
    "requires_python": "",
    "summary": "Pytos2 for tos1 tos2 and beyond",
    "version": "2.3.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16158439,
  "releases": {
    "2.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8b3a6e33e123c82428d5af1997bbcbc2f908076af0a6829486e439ed7b858dc",
          "md5": "984f4676ebe29a4554384fa122e35322",
          "sha256": "6d161e9a92609002abdedd6ba4e59e76cc1fce688784cbb33c7a8d6582072ca2"
        },
        "downloads": -1,
        "filename": "pytos2_ce-2.3.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "984f4676ebe29a4554384fa122e35322",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 123969,
        "upload_time": "2022-12-20T06:52:31",
        "upload_time_iso_8601": "2022-12-20T06:52:31.743693Z",
        "url": "https://files.pythonhosted.org/packages/f8/b3/a6e33e123c82428d5af1997bbcbc2f908076af0a6829486e439ed7b858dc/pytos2_ce-2.3.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14112ec637520fd83e50b823d997d599f676b0efef04e532b74b9684cb2b5be9",
          "md5": "f8367238107e66272776d24e6f8fd00b",
          "sha256": "81911aa8d4edd6dee198538e67d2c1aacefc426dd65f638f1dcbc3aed85cacf7"
        },
        "downloads": -1,
        "filename": "pytos2-ce-2.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "f8367238107e66272776d24e6f8fd00b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2287474,
        "upload_time": "2022-12-20T06:52:37",
        "upload_time_iso_8601": "2022-12-20T06:52:37.166878Z",
        "url": "https://files.pythonhosted.org/packages/14/11/2ec637520fd83e50b823d997d599f676b0efef04e532b74b9684cb2b5be9/pytos2-ce-2.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8b3a6e33e123c82428d5af1997bbcbc2f908076af0a6829486e439ed7b858dc",
        "md5": "984f4676ebe29a4554384fa122e35322",
        "sha256": "6d161e9a92609002abdedd6ba4e59e76cc1fce688784cbb33c7a8d6582072ca2"
      },
      "downloads": -1,
      "filename": "pytos2_ce-2.3.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "984f4676ebe29a4554384fa122e35322",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 123969,
      "upload_time": "2022-12-20T06:52:31",
      "upload_time_iso_8601": "2022-12-20T06:52:31.743693Z",
      "url": "https://files.pythonhosted.org/packages/f8/b3/a6e33e123c82428d5af1997bbcbc2f908076af0a6829486e439ed7b858dc/pytos2_ce-2.3.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14112ec637520fd83e50b823d997d599f676b0efef04e532b74b9684cb2b5be9",
        "md5": "f8367238107e66272776d24e6f8fd00b",
        "sha256": "81911aa8d4edd6dee198538e67d2c1aacefc426dd65f638f1dcbc3aed85cacf7"
      },
      "downloads": -1,
      "filename": "pytos2-ce-2.3.10.tar.gz",
      "has_sig": false,
      "md5_digest": "f8367238107e66272776d24e6f8fd00b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2287474,
      "upload_time": "2022-12-20T06:52:37",
      "upload_time_iso_8601": "2022-12-20T06:52:37.166878Z",
      "url": "https://files.pythonhosted.org/packages/14/11/2ec637520fd83e50b823d997d599f676b0efef04e532b74b9684cb2b5be9/pytos2-ce-2.3.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}