{
  "info": {
    "author": "Bishwa K. Giri",
    "author_email": "kirannbishwa01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PhaseStitcherDEV\n\n***A python program to segregate and stitch the ReadBackPhased genotypes in F1 hybrids to prepare\na genome wide haplotype using first order markov chain and transition probabilities.\\\nThis tool can be used as a companion tool along with\n[`phase-Extender`](https://github.com/everestial/phase-Extender) or as a standalone tool.***\n\nDeveloped by [Bishwa K. Giri](mailto:kirannbishwa01@gmail.com) in\nthe [Remington Lab](https://biology.uncg.edu/people/david-remington/) at the\nUniversity of North Carolina at Greensboro, Biology department.\n\n## Citation\n\nGiri, B. K., Remington D. L. Haplotype phase extension and preparation of\ndiploid genome using phase-Extender and phase-Stitcher. biorxiv (2018) [not uploaded yet].\n\n## AUTHOR/SUPPORT\n\nBishwa K. Giri (bkgiri@uncg.edu; kirannbishwa01@gmail.com) \\\nSupport @ <https://groups.google.com/d/forum/phase-extender>\n\n## Intro to ReadBackPhasing\n\n**Check these links for details on readbackphasing*\n\n- <https://software.broadinstitute.org/gatk/documentation/tooldocs/3.8-0/org_broadinstitute_gatk_tools_walkers_phasing_ReadBackedPhasing.php>\n- <https://github.com/secastel/phaser/tree/master/phaser>\n\n## BACKGROUND\n\nHaplotype phasing is a second \"go to\" problem in bioinformatics after read alignment.\nThe importance of haplotype phasing applies directly to the analyses of ASE (allele specific expression),\npreparation of extended haplotype for EHH (extended haplotype homozygosity) test,\nand preparation of dipolid genome which will soon be a new standard in bioinformatics in coming years, etc.\nThe necessity for haplotype phasing (and eventually diploid genome) increases with the increase in heterozygosity\nin the genome, because higher hetetogeneity leads to larger alignment bias and complicates the reliability of\nthe variants that are called using that alignment data (SAM, BAM files).\n\nGene expression quantification using sequence reads is occupying a dominant and standard sphere of functional\nanalyses of putative genetic loci.\nQuantification of gene expression as a test of phenotypic differences comes in two flavor:\n\n- DE (differential expression) > gene expression differences quantified between two individuals or\n  groups categorized by population, treatments, space or time.\n  - ASE (allele specific expression) > gene expression differences quantified between the two alleles of\n  the same locus in a diploid individual, categorized mainly by haplotypes but may be further\n  grouped by population, treatments, space or time.\n\nQuantification of RNAseq reads using reference genome based approach mainly involves haploid genome.\nASE (allele specific expression) quantification using alignment of RNAseq reads from F1 hybrids or outbred individuals\non haploid reference genomes is more susceptible to biased ASE observation considering following factors:\n\n- alignment to reference genome will likely trigger higher mapping of the reads from the\n  population closer to the reference genome.\n  - using allele masking based approach on haploid reference to address alignment bias is again more likely to attract\n  paralogous alignment in the masked region creating futher biases.\n\nSeveral new approaches have been created for better estimation of ASE analyses. Most optimal approach to\nASE however involves **1)** preparation of phased genome of the hybrids or outbred individual,\n**2)** then preparation of diploid genome and/or transcriptome and then **3)** competitive alignment of the reads\non diploid genome using conserved strategy.\nThe first step involving haplotype phasing has mostly concentrated around fixing the phase state in\nhumans who have highly homogenous genome, in inbred lines of mice and in other model systems that have lots of\nhaplotype reference panels available.\nExisting phase methods of F1 hybrids involves `mom, dad, child` trio, which is not optimal when parental information\nare missing, or in the natural hybrids where parental identification is not possible.\nAlso, existing trio methods are mainly genotype based which take allele at single position at once.\n\nASE (allele specific expression) analyses which aims to identify cis regulatory factors and mechanism underlying gene expression\ndifferences are heading toward more genomic and rnaseq based approaches.\nThe full resolution of ASE therefore relies on the quality of the phased dipoid genome.\n\n**`phase-Stitcher`** is designed to utilize RBphase data with population based haplotype phasing\nto solve phase states in F1s. The approach is to take RBphased haplotype blocks of a single F1 hybrid individual\nand several haplotype from the two different parental background of the F1, then segregate the haplotype of F1\nby computing likelihood of each haplotype against two parental background. **The advantages of using `phase-Stitcher` is\nexplained below:**\n\n- With increase in the size of sequence reads (mainly PE i.e paired end reads) we are able to generate larger\n  RBphased fragments. These fragments are again considerably larger when a heterogenous population is sequenced.\n  F1 hyrbids of these heterogenous population have even larger RBphased fragments.\n  Thus, haplotype phasing using RBphased data with population based likelihood estimates provides more optimal approach\n  to solving phase state.\n  - This tool doesn't require exact `maternal, parental` genotype data to solve phase state in F1.\n  Rather phasing can be casually approached by supplying genotype data from `maternal vs. parental` background.\n\n## Data Requirements\n\n**phASE-Stitcher** can be used with the multi-sample vcf files produced by GATK pipeline or other tools that generate\nreadbackphased haplotype blocks in the output VCF.\nA HAPLOTYPE file is created using the RBphased VCF and then piped into **phase-Stitcher**.\nUse [VCF-Simplify](https://github.com/everestial/VCF-simplify) to prepare HAPLOTYPE file from multisample VCF.\nSee, this example for data structure of input haplotype file\n[sample input haplotype file01](https://github.com/everestial/pHASE-Stitcher/blob/master/example_01/haplotype_file01.txt)\n\n- a tab separated text file with `PI` and `PG_al` value for each samples.\n\n## Algorithm\n\nFor the **mcve** regarding the algorithm see this issue on [**stackoverflow**]() and/or [**my blog**]().\n\n## Tutorial\n\n### Prerequisites\n\n**phASE-Stitcher** is written in python3, so you need to have python3 installed on your system to run this code locally. If you don't have python installed then, you can install from [here](https://www.python.org/downloads/). For linux; you can get latest python3 by:\n\n`sudo apt-get install python3`\n\n### Installation  and setup\n\n1. Clone this repo.\n\n``` bash\ngit clone https://github.com/everestial/phASE-Stitcher\ncd phASE-Stitcher\n```\n\n2. Make virtual env for python and install requirements.\n\n``` bash\npython3 -m venv .env\nsource .env/bin/activate   # for linux\n.env\\Scripts\\activate      # for windows\npip install -r requirements.txt\n```\n\nOR, you can install latest versions individually by:\n\n``` bash\npip install pandas numpy matplotlib\n\n```\n\n3. To run tests locally:\n\n  ``` bash\n    pip install pytest\n    pytest .\n   ```\n\n## Usage\n\n  Requires a readbackphased `haplotype file` as input and returns segregated and stitched haplotype file in both wide\n  and long format. Descriptive statistics of the final haplotype can also be produced if desired.\n\nCheck this detailed [step by step tutorial](https://github.com/everestial/pHASE-Stitcher/wiki) for preparation\nof `input files` and know-how about running `phase-Stitcher`.\n\n## Input data\n\n***haplotype file (required):*** Input `haplotype` file. Should contain `PI` and `PG_al` values for each sample.\n\n### Performance Related\n\n**--nt** _(1)_ - maximum number of processes to run at once.\nThe maximum number of processes is limited to number of chromosomes (contigs) in the input haplotype file.\n\n## Arguments\n\n### Required\n\n- **--f1Sample** - name of the f1 hybrid sample of interest.\nIt should refer to a single sample in the haplotype the file.\n- **--pat** - Paternal sample or comma separated sample names that\n                        belong to \"paternal\" background. Sample group may also\n                        be assigned using prefix. Options: 'paternal sample\n                        name', 'comma separated samples', 'pre:...'. Unique\n                        prefix (or comma separated prefixes) should begin with\n                        'pre:'.\n- **--mat** - Maternal sample or sample names (comma separated) that\n                        belong to \"maternal\" background. Sample group can also\n                        be assigned using unique prefix/es. Options: 'maternal\n                        sample name', 'comma separated samples', 'pre:...'.\n                        Unique prefix (or comma separated prefixes) should\n                        begin with 'pre:'.\n\n### Optional\n\n- **--python_string** _(python3)_ - Calls `python 3` interpreter to run the program.\n- **--output** _(f1Sample_extended)_ - Name of the output directory.\n- **----outPatMatID**_(pat,mat)_- Prefix of the **paternal (dad)** and **maternal (mom)** genotype in the output file.\n                             This should be a maximum of three letter prefix separated by comma.-\n- **--lods** _(5)_ - log(2) odds cutoff threshold required to assign maternal Vs. paternal\n                               haplotype segregation and stitching.\n               &emsp; &emsp; - Positive calculated log2Odd above lods cut off will assign the left haplotype to paternal allele.\\\n               &emsp; &emsp; - Negative calculated log2Odd above lods cut off will assign the left haplotype to maternal allele.\\\n               &emsp; &emsp; - Calculated abs |log2Odd| below lods cut off threshold will leave hapltoype unassigned.\n\n- **--culLH** _(maxPd)_ - Method for Cumulative likelhood estimates -> The likelhoods for haplotype segregation can\n                            either be **max-sum** vs. **max-product**.\n                            ***Default*** is \"max-product\". ***Options:*** 'maxPd' or 'maxSum'.\n- **--chr** - Restrict haplotype stitching to a specific chromosome.\n- **--hapStats** _(no)_ - Computes the descriptive statistics of final haplotype. **Options:** 'yes', 'no'\n\n## Output Files\n\n### *f1Sample*_haplotype_long.txt\n\nFinal haplotype for **f1Sample** of interest after phase segregation in **long format**.\n\n- **CHROM** - Contig name (or number).\n- **POS** - Start position of haplotype (1 based).\n- **REF** - Reference allele at that site.\n- **all-alleles** - All the alleles represented by all the samples in the input file at that site.\n- **_f1Sample_:PI** - Unique `PI` index of the haplotype blocks for sample of interest.\n- **_f1Sample_:PG_al** - Phased GT (genotype) alleles at the genomic position that belong to unique `PI` indexes.\n- **log2Odds** - log2 of Odds computed between the left vs. right haplotype against observed haplotype in\npaternal vs. maternal samples.\n- **_pat_ _hap** - Haplotype that belongs to paternal background based on **_lods_** cutoff.\n- **_mat_ _hap** - Haplotype that belongs to maternal background based on **_lods_** cutoff.\n\n### *f1Sample*_haplotype_wide.txt\n\n- Final haplotype for **f1Sample** of interest after phase segregation in **wide format**.\n- All the headers are the same as file in **_long format_** except **_POS_Range_**\n\n### *f1Sample*_haplotype_stats.txt\n\nDescriptive haplotype statistics of the input haplotype file for the sample of interest. These statistics\ncan be used to compute the distribution of several values (lods, number or variants etc.) between phased\nand unphased haplotype blocks and if they were assigned to final genome wide haplotype.\n\n- **CHROM** - Contig name (or number).\n- **phasedBlock** - Blocks that were phased to genome wide haplotype based on **_lods_** cutoff.\n- **unphasedBlock** - Blocks that were not phased to genome wide haplotype based on **_lods_** cutoff.\n- **numVarsInPhasedBlock** - Number of variants in each **_phasedBlock_**.\n- **numVarsInUnPhasedBlock** - Number of variants in each **_unphasedBlock_**.\n- **log2oddsInPhasedBlock** - Calculated **log2Odds** in each **_phasedBlock_**.\n- **log2oddsInUnPhasedBlock** - Calculated **log2Odds** in each **_unphasedBlock_**.\n- **totalNumOfBlock** - Total number of RBphased blocks in the given **_f1Sample_**.\n- **totalNumOfVars** - Total number of variants in the given **_f1Sample_**.\n\n**Note:** - The **block index i.e PI** in **_phasedBlock_** and in **_unphasedBlock_**,\nand it's associated statistics are in order.\n\n## Some Q/A on phase-stitcher\n\nThe conjoined **Q/A** for **_phase stitcher_** is covered under **Q/A** for\n[phase-extender](https://github.com/everestial/phase-Extender#some-qa-on-phase-extender)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/everestial/pHASE-Stitcher",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "phase-stitcher",
    "package_url": "https://pypi.org/project/phase-stitcher/",
    "platform": "",
    "project_url": "https://pypi.org/project/phase-stitcher/",
    "project_urls": {
      "Bug Tracker": "https://github.com/everestial/pHASE-Stitcher",
      "Homepage": "https://github.com/everestial/pHASE-Stitcher"
    },
    "release_url": "https://pypi.org/project/phase-stitcher/0.0.3/",
    "requires_dist": [
      "numpy (>=1.22)",
      "matplotlib (>=3)",
      "pandas (>=1)",
      "dask (>=2021)"
    ],
    "requires_python": ">=3.7",
    "summary": "a python program to stitch the ReadBack phased haplotypes in F1 hybrids.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12909355,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5107c2f4475904468c4298cc24457038a7cc491f1cee6f80e6ab3bf1c847ebef",
          "md5": "38e9e21d78fe2528e14bc2f36951bdd4",
          "sha256": "c82c0724c744d3af548ab2acb60797e783b4e55ccdb2357870cadaa68ed82390"
        },
        "downloads": -1,
        "filename": "phase_stitcher-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38e9e21d78fe2528e14bc2f36951bdd4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19864,
        "upload_time": "2022-02-16T13:54:03",
        "upload_time_iso_8601": "2022-02-16T13:54:03.304038Z",
        "url": "https://files.pythonhosted.org/packages/51/07/c2f4475904468c4298cc24457038a7cc491f1cee6f80e6ab3bf1c847ebef/phase_stitcher-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dbf18da952c050462cbec60f70c524e85f5e030b6030a09c8e6e26875282022",
          "md5": "c006369c15f30e15cb3cb2398ff1cefa",
          "sha256": "64e39c3ca56424306da18c4accac5951635c3526f67ecf4e175d9d84f558f0f8"
        },
        "downloads": -1,
        "filename": "phase_stitcher-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c006369c15f30e15cb3cb2398ff1cefa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21845,
        "upload_time": "2022-02-16T13:54:05",
        "upload_time_iso_8601": "2022-02-16T13:54:05.570792Z",
        "url": "https://files.pythonhosted.org/packages/3d/bf/18da952c050462cbec60f70c524e85f5e030b6030a09c8e6e26875282022/phase_stitcher-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1b74961a663d84e43814c20c4ac37716d081f792e9fe5132d9733596a8fece2",
          "md5": "7c5d468f63f6308a30477dced24cdbbd",
          "sha256": "c53f03f40d568e49f620d0dd75e872762a84e174180063d38bf879d4baf112d1"
        },
        "downloads": -1,
        "filename": "phase_stitcher-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c5d468f63f6308a30477dced24cdbbd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19879,
        "upload_time": "2022-02-16T13:57:48",
        "upload_time_iso_8601": "2022-02-16T13:57:48.058483Z",
        "url": "https://files.pythonhosted.org/packages/b1/b7/4961a663d84e43814c20c4ac37716d081f792e9fe5132d9733596a8fece2/phase_stitcher-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6345ca26595140d91a5cb55c62636c415d32a44b120bfca0eceb2ec3b2caeca1",
          "md5": "254ed05573b2353bc1ee585024e24e9d",
          "sha256": "3847b859d485f12b1c435271dbc0492e9e7b25e772875a997cf136a550501576"
        },
        "downloads": -1,
        "filename": "phase_stitcher-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "254ed05573b2353bc1ee585024e24e9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21861,
        "upload_time": "2022-02-16T13:57:49",
        "upload_time_iso_8601": "2022-02-16T13:57:49.828270Z",
        "url": "https://files.pythonhosted.org/packages/63/45/ca26595140d91a5cb55c62636c415d32a44b120bfca0eceb2ec3b2caeca1/phase_stitcher-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb1b9b0a74973fed0b3fc54ced9fb7a4e3c8e5cc2cf6fec599fe1ad4bb35d488",
          "md5": "f568394eeee0c322be239d1495e94215",
          "sha256": "60aa8bd0618531ac2be14bae900982f815c388b48287695526b7108412eca23a"
        },
        "downloads": -1,
        "filename": "phase_stitcher-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f568394eeee0c322be239d1495e94215",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19880,
        "upload_time": "2022-02-16T14:20:26",
        "upload_time_iso_8601": "2022-02-16T14:20:26.814866Z",
        "url": "https://files.pythonhosted.org/packages/eb/1b/9b0a74973fed0b3fc54ced9fb7a4e3c8e5cc2cf6fec599fe1ad4bb35d488/phase_stitcher-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c183e6ff1e8a9d133c91f7867c38fd22810fe4160d7bf197b6dc9805b93ca8e8",
          "md5": "b013c183cac75ddc3cef52d4c10be5b2",
          "sha256": "96d096a16d098cf161c86eb407a18591dfcaa17c8955169f3aaff228e0c19b95"
        },
        "downloads": -1,
        "filename": "phase_stitcher-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b013c183cac75ddc3cef52d4c10be5b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21848,
        "upload_time": "2022-02-16T14:20:28",
        "upload_time_iso_8601": "2022-02-16T14:20:28.709793Z",
        "url": "https://files.pythonhosted.org/packages/c1/83/e6ff1e8a9d133c91f7867c38fd22810fe4160d7bf197b6dc9805b93ca8e8/phase_stitcher-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb1b9b0a74973fed0b3fc54ced9fb7a4e3c8e5cc2cf6fec599fe1ad4bb35d488",
        "md5": "f568394eeee0c322be239d1495e94215",
        "sha256": "60aa8bd0618531ac2be14bae900982f815c388b48287695526b7108412eca23a"
      },
      "downloads": -1,
      "filename": "phase_stitcher-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f568394eeee0c322be239d1495e94215",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19880,
      "upload_time": "2022-02-16T14:20:26",
      "upload_time_iso_8601": "2022-02-16T14:20:26.814866Z",
      "url": "https://files.pythonhosted.org/packages/eb/1b/9b0a74973fed0b3fc54ced9fb7a4e3c8e5cc2cf6fec599fe1ad4bb35d488/phase_stitcher-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c183e6ff1e8a9d133c91f7867c38fd22810fe4160d7bf197b6dc9805b93ca8e8",
        "md5": "b013c183cac75ddc3cef52d4c10be5b2",
        "sha256": "96d096a16d098cf161c86eb407a18591dfcaa17c8955169f3aaff228e0c19b95"
      },
      "downloads": -1,
      "filename": "phase_stitcher-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b013c183cac75ddc3cef52d4c10be5b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21848,
      "upload_time": "2022-02-16T14:20:28",
      "upload_time_iso_8601": "2022-02-16T14:20:28.709793Z",
      "url": "https://files.pythonhosted.org/packages/c1/83/e6ff1e8a9d133c91f7867c38fd22810fe4160d7bf197b6dc9805b93ca8e8/phase_stitcher-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}