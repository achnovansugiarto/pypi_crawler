{
  "info": {
    "author": "David Scheliga",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# treenodedefinition\n\n**treenodedefinition** is a helper module providing an interface for \ndefinition of which parts of a nested list or dictionary are handled as a \nnode (containing further tree items) or a leaf (being a top item of the tree).\n\n## Installation\n\nInstalling the latest release using pip is recommended.\n\n```` shell script\n    $ pip install treenodedefinition\n````\n\nThe latest development state can be obtained from gitlab using pip.\n\n```` shell script\n    $ pip install git+https://gitlab.com/david.scheliga/treenodedefinition.git@dev\n````\n\n\n## Basic Usage\n\nUse `treenodedefinition.this_item_is_a_leaf` for this module's default definition of \ntree leafs. For more details read function definition of `treenodedefinition\n.this_item_is_a_leaf`.\n\n    >>> from treenodedefinition import this_item_is_a_leaf\n    >>> this_item_is_a_leaf([[1, 2], [3, 4]])\n    True\n    >>> this_item_is_a_leaf([[1, 2], [3]])\n    False\n    >>> this_item_is_a_leaf(\"any single data type\")\n    True\n    >>> this_item_is_a_leaf({\"any\": \"dict or mapping\"})\n    False\n\nOr use `treenodedefinition.DetectsATreeLeaf = Callable[[Any], bool]` to declare the \ntype of a custom detection within function arguments or a classes attributes.\n\n\n## Module *treenodedefinition*\n\n### treenodedefinition.predict_tensor_item_count(potential_tensor: Sequence) -> int\n\nPredicts the assumed tensor size on basis of the first element within the potentially \nnested sequence `potential_tensor`. It is assumed that the given potential tensor has a\nshape of (i, j, ...). The shape's product reflects the tensor's item count. It also \nimplies that all sub tensors within each level of the tensor have the same item count, \ntherefore the first item within each level defines the shape of this particular level.\n\n\nFor 'clean' tensors the prediction is equal to the actual item count.\n\n    >>> from treenodedefinition import predict_tensor_item_count\n    >>> predict_tensor_item_count([])\n    0\n    >>> predict_tensor_item_count([[], []])\n    0\n    >>> predict_tensor_item_count([1, 2])\n    2\n    >>> predict_tensor_item_count([[1, 1], [2, 2]])\n    4\n    >>> predict_tensor_item_count(\n    ...     [\n    ...         [[1, 1], [2, 2]],\n    ...         [[3, 3], [4, 4]]\n    ...     ]\n    ... )\n    8\n\nIn this case the tensor should had an item count of 6, while two\nitems are lacking in their tensor size.\n\n    >>> predict_tensor_item_count([[1, 2], 3, 4])\n    6\n    \n### treenodedefinition.count_tensor_items(potential_tensor: Sequence) -> int\nCounts the actual items within the potentially nested sequence `potential_tensor`.\n\n    >>> from treenodedefinition import count_tensor_items\n    >>> count_tensor_items([1, 2])\n    2\n    >>> count_tensor_items([[1, 1], [2, 2]])\n    4\n    >>> count_tensor_items(\n    ...     [\n    ...         [[1, 1], [2, 2]],\n    ...         [[3, 3], [4, 4]]\n    ...     ]\n    ... )\n    8\n    >>> count_tensor_items([[1, 2], 3, 4])\n    4\n\n### treenodedefinition.is_proper_sized_tensor(potential_tensor: Sequence) -> bool\n\nEstimates whether the given potential tensor has a proper shape of all\nitems, or is inadequately filled.\n\nRaises TypeError, if given `potential_tensor` doesn't implement len, which means\nthat `potential_tensor` is not a sequence.\n\n    >>> from treenodedefinition import is_proper_sized_tensor\n    >>> is_proper_sized_tensor([])\n    False\n    >>> is_proper_sized_tensor([1, 2])\n    True\n    >>> is_proper_sized_tensor([[1, 1], [2, 2]])\n    True\n    >>> is_proper_sized_tensor(\n    ...     [\n    ...         [[1, 1], [2, 2]],\n    ...         [[3, 3], [4, 4]]\n    ...     ]\n    ... )\n    True\n    >>> is_proper_sized_tensor([[1, 1], 2, 3])\n    False\n    >>> is_proper_sized_tensor(\"A string is a sequence, but not a tensor,\")\n    False\n    >>> is_proper_sized_tensor([\"while\", \"a\", \"sequence\", \"of\", \"strings\", \"is.\"])\n    True\n\n### treenodedefinition.this_sequence_is_a_leaf(potential_tensor: Sequence) -> bool\n\nStates if the given sequence `potential_tensor` is a leaf or node.\n\nAll sequences, which are *proper sized tensor*\n(`is_proper_sized_tensor(..)`) are considered as values.\n\nSequences which contain mixed containers (Sequences and Mappings) are\nconsidered as nodes. Also if the sequence contains different sized\nsequences.\n\n    >>> from treenodedefinition import this_sequence_is_a_leaf\n    >>> this_sequence_is_a_leaf([])\n    False\n    >>> this_sequence_is_a_leaf([1, 2])\n    True\n    >>> this_sequence_is_a_leaf([[1, 1], [2, 2]])\n    True\n    >>> this_sequence_is_a_leaf([[1, 1], 2, 3])\n    False\n    >>> this_sequence_is_a_leaf(\"A single string is a leaf, \")\n    True\n    >>> this_sequence_is_a_leaf([\"while\", \"a\", \"sequence\", \"of\", \"strings\", \"is.\"])\n    True\n    >>> this_sequence_is_a_leaf([[\"a\", \"good\", \"start\"], {\"ended\": \"wrong\"}])\n    False\n\n\n### treenodedefinition.DetectsATreeLeaf = Callable[[Any], bool]\n\nDeclares a function, which task is to detect, whether the given single argument is a\ntree leaf.\n\n### treenodedefinition.this_item_is_a_leaf(tree_node_item: Any) -> bool\n\nDifferentiates a `tree_node_item` being a tree leaf or not. \n\n**Examples**\n\nAn empty sequence is treatend as a node, as a potential placeholder for\na future nested sequence.\n\n    >>> from treenodedefinition import this_item_is_a_leaf\n    >>> this_item_is_a_leaf([])\n    False\n\n(Nested) sequences are treatend as leafs, as long the resemble a proper\nfilled tensor. The item type doesn't matter.\n\n    >>> this_item_is_a_leaf([1, 2])\n    True\n    >>> this_item_is_a_leaf([[1, 1], [2, 2]])\n    True\n    >>> this_item_is_a_leaf([[1, 1], 2, 3])\n    False\n    >>> this_item_is_a_leaf(\"A string is.\")\n    True\n    >>> this_item_is_a_leaf([\"As\", \"is\", \"also\", \"a\", \"sequence\", \"of\", \"strings\"])\n    True\n    >>> this_item_is_a_leaf(1)\n    True\n    >>> this_item_is_a_leaf(object())\n    True\n\nA nested sequence with different containers is a node, with leafs.\n\n    >>> this_item_is_a_leaf([[\"a\", \"good\", \"start\"], {\"ended\": \"wrong\"}])\n    False\n\nA dictionary is always a node, not a leaf.\n\n    >>> this_item_is_a_leaf({\"ended\": \"wrong\"})\n    False\n\n## Contribution\n\nAny contribution by reporting a bug or desired changes are welcomed. The preferred \nway is to create an issue on the gitlab's project page, to keep track of everything \nregarding this project.\n\n### Contribution of Source Code\n#### Code style\nThis project follows the recommendations of [PEP8](https://www.python.org/dev/peps/pep-0008/).\nThe project is using [black](https://github.com/psf/black) as the code formatter.\n\n#### Workflow\n\n1. Fork the project on Gitlab.\n2. Commit changes to your own branch.\n3. Submit a **pull request** from your fork's branch to our branch *'dev'*.\n\n## Authors\n\n* **David Scheliga** \n    [@gitlab](https://gitlab.com/david.scheliga)\n    [@Linkedin](https://www.linkedin.com/in/david-scheliga-576984171/)\n    - Initial work\n    - Maintainer\n\n## License\n\nThis project is licensed under the GNU GENERAL PUBLIC LICENSE - see the\n[LICENSE](LICENSE) file for details\n\n## Acknowledge\n\n[Code style: black](https://github.com/psf/black)\n\n# Changelog\nThis changelog is inspired by [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## Release 0.1 [2022-01-10]\n### Added\n- coverage, makefile, setup.cfg\n\n### Changed\n- Using setup.cfg instead of setup.py\n\n## Release 0.0b2.post2 [2020-08-21]\n### Fixed\n- Missing module declaration within setup.pyChanged\n\n## Release 0.0b2.post1 [2020-08-20]\n### Changed\n- Changed headings and removed redundant 'example' statement within readme for\n better readability.\n\n## Release 0.0b2 [2020-08-20]\n### Changed\n- Typos within readme and module.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/david.scheliga/treenodedefinition",
    "keywords": "doctest,helper,pandas",
    "license": "GNU General Public License V3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "treenodedefinition",
    "package_url": "https://pypi.org/project/treenodedefinition/",
    "platform": "",
    "project_url": "https://pypi.org/project/treenodedefinition/",
    "project_urls": {
      "Homepage": "https://gitlab.com/david.scheliga/treenodedefinition",
      "Source Code Repository": "https://gitlab.com/david.scheliga/treenodedefinition"
    },
    "release_url": "https://pypi.org/project/treenodedefinition/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Helper functions to make fitting outputs for doctests.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12531559,
  "releases": {
    "0.0b2.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c491f8a1b6aa619e2db04e7adf4f69e5ed2c0be00bfe7e11601429a727d943e0",
          "md5": "b0737dbf016a104a2f490c0e5c9f49c8",
          "sha256": "428992dd7f31a54bdd910e6cd49ab52d61a988b5b206eec3aeb8af3aea43956f"
        },
        "downloads": -1,
        "filename": "treenodedefinition-0.0b2.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0737dbf016a104a2f490c0e5c9f49c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16061,
        "upload_time": "2020-08-20T00:11:35",
        "upload_time_iso_8601": "2020-08-20T00:11:35.104877Z",
        "url": "https://files.pythonhosted.org/packages/c4/91/f8a1b6aa619e2db04e7adf4f69e5ed2c0be00bfe7e11601429a727d943e0/treenodedefinition-0.0b2.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de4163a074f7d2a5ac6dbc212bc8bad54ccb573d28f54835222e28d1c7db4943",
          "md5": "c6b7cd2225f1b0337606844ffa2e5433",
          "sha256": "bdd07cdb5883bd76102a8dd3c701223d6903af0ab65ed0683fc40f825b5e7f66"
        },
        "downloads": -1,
        "filename": "treenodedefinition-0.0b2.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "c6b7cd2225f1b0337606844ffa2e5433",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4351,
        "upload_time": "2020-08-20T00:11:37",
        "upload_time_iso_8601": "2020-08-20T00:11:37.865483Z",
        "url": "https://files.pythonhosted.org/packages/de/41/63a074f7d2a5ac6dbc212bc8bad54ccb573d28f54835222e28d1c7db4943/treenodedefinition-0.0b2.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0b2.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dbaacb04ca03cab4dcd00e4b2c3a9b087659bb39168fed20b10beefb0c00ed9",
          "md5": "23f5c9e354b3832ed7ae7287bf5a1585",
          "sha256": "80ef0a23a88943b205271064da68d39b6c5b2163f3d280bb551bb9c4824ad780"
        },
        "downloads": -1,
        "filename": "treenodedefinition-0.0b2.post2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23f5c9e354b3832ed7ae7287bf5a1585",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18323,
        "upload_time": "2020-08-21T22:01:18",
        "upload_time_iso_8601": "2020-08-21T22:01:18.183840Z",
        "url": "https://files.pythonhosted.org/packages/9d/ba/acb04ca03cab4dcd00e4b2c3a9b087659bb39168fed20b10beefb0c00ed9/treenodedefinition-0.0b2.post2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36662ab7dee21ca3e706314db2d2764432fde8a95d3adc48c378b354558db216",
          "md5": "e34275074c95efff40934b2fe37fd668",
          "sha256": "8b706958274fec6cea054cde72fa6066ecd57b03fd8527f5110e8ee713869af4"
        },
        "downloads": -1,
        "filename": "treenodedefinition-0.0b2.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "e34275074c95efff40934b2fe37fd668",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6349,
        "upload_time": "2020-08-21T22:01:20",
        "upload_time_iso_8601": "2020-08-21T22:01:20.182064Z",
        "url": "https://files.pythonhosted.org/packages/36/66/2ab7dee21ca3e706314db2d2764432fde8a95d3adc48c378b354558db216/treenodedefinition-0.0b2.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba07e62d5017a4c63ab76ffcd8d84956f1bc71e44ff05b5b1ccf1509e9f956aa",
          "md5": "72a48cd7a0eac3d14bd2255a17af94df",
          "sha256": "217ff31e139819973e68bc5388eee021ad5877579d6e9bfcdf1cf2d307781292"
        },
        "downloads": -1,
        "filename": "treenodedefinition-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72a48cd7a0eac3d14bd2255a17af94df",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18219,
        "upload_time": "2022-01-10T18:41:56",
        "upload_time_iso_8601": "2022-01-10T18:41:56.739593Z",
        "url": "https://files.pythonhosted.org/packages/ba/07/e62d5017a4c63ab76ffcd8d84956f1bc71e44ff05b5b1ccf1509e9f956aa/treenodedefinition-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ec2c90db5d4d031bc693ec1707832225616f30638268fcc7bf6fe7f6bbf199",
          "md5": "16635dae583a28cf3e4e11604d7faea9",
          "sha256": "617a2bb01c07657b3198edad158a7df7aa60c3e6dfc756cb85d4a9cb44d58869"
        },
        "downloads": -1,
        "filename": "treenodedefinition-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "16635dae583a28cf3e4e11604d7faea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18086,
        "upload_time": "2022-01-10T18:41:58",
        "upload_time_iso_8601": "2022-01-10T18:41:58.198137Z",
        "url": "https://files.pythonhosted.org/packages/51/ec/2c90db5d4d031bc693ec1707832225616f30638268fcc7bf6fe7f6bbf199/treenodedefinition-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba07e62d5017a4c63ab76ffcd8d84956f1bc71e44ff05b5b1ccf1509e9f956aa",
        "md5": "72a48cd7a0eac3d14bd2255a17af94df",
        "sha256": "217ff31e139819973e68bc5388eee021ad5877579d6e9bfcdf1cf2d307781292"
      },
      "downloads": -1,
      "filename": "treenodedefinition-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72a48cd7a0eac3d14bd2255a17af94df",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18219,
      "upload_time": "2022-01-10T18:41:56",
      "upload_time_iso_8601": "2022-01-10T18:41:56.739593Z",
      "url": "https://files.pythonhosted.org/packages/ba/07/e62d5017a4c63ab76ffcd8d84956f1bc71e44ff05b5b1ccf1509e9f956aa/treenodedefinition-0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51ec2c90db5d4d031bc693ec1707832225616f30638268fcc7bf6fe7f6bbf199",
        "md5": "16635dae583a28cf3e4e11604d7faea9",
        "sha256": "617a2bb01c07657b3198edad158a7df7aa60c3e6dfc756cb85d4a9cb44d58869"
      },
      "downloads": -1,
      "filename": "treenodedefinition-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "16635dae583a28cf3e4e11604d7faea9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18086,
      "upload_time": "2022-01-10T18:41:58",
      "upload_time_iso_8601": "2022-01-10T18:41:58.198137Z",
      "url": "https://files.pythonhosted.org/packages/51/ec/2c90db5d4d031bc693ec1707832225616f30638268fcc7bf6fe7f6bbf199/treenodedefinition-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}