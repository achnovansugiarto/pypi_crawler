{
  "info": {
    "author": "Explosion",
    "author_email": "contact@explosion.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "<a href=\"https://explosion.ai\"><img src=\"https://explosion.ai/assets/img/logo.svg\" width=\"125\" height=\"125\" align=\"right\" /></a>\n\n# Confection: The sweetest config system for Python\n\n`confection` :candy: is a lightweight library that offers a **configuration system** letting you conveniently describe arbitrary \ntrees of objects.\n\nConfiguration is a huge challenge for machine-learning code because you may want to expose almost any\ndetail of any function as a hyperparameter. The setting you want to expose might be arbitrarily far\ndown in your call stack, so it might need to pass all the way through the CLI or REST API,\nthrough any number of intermediate functions, affecting the interface of everything along the way.\nAnd then once those settings are added, they become hard to remove later. Default values also\nbecome hard to change without breaking backwards compatibility.\n\nTo solve this problem, `confection` offers a config system that lets you easily describe arbitrary trees of objects.\nThe objects can be created via function calls you register using a simple decorator syntax. You can even version the\nfunctions you create, allowing you to make improvements without breaking backwards compatibility. The most similar\nconfig system we‚Äôre aware of is [Gin](https://github.com/google/gin-config), which uses a similar syntax, and also \nallows you to link the configuration system to functions in your code using a decorator. `confection`'s config system is \nsimpler and emphasizes a different workflow via a subset of Gin‚Äôs functionality.\n\n[![Azure Pipelines](https://img.shields.io/azure-devops/build/explosion-ai/public/14/master.svg?logo=azure-pipelines&style=flat-square&label=build)](https://dev.azure.com/explosion-ai/public/_build?definitionId=28)\n[![Current Release Version](https://img.shields.io/github/v/release/explosion/confection.svg?style=flat-square&include_prereleases&logo=github)](https://github.com/explosion/confection/releases)\n[![pypi Version](https://img.shields.io/pypi/v/confection.svg?style=flat-square&logo=pypi&logoColor=white)](https://pypi.org/project/confection/)\n[![conda Version](https://img.shields.io/conda/vn/conda-forge/confection.svg?style=flat-square&logo=conda-forge&logoColor=white)](https://anaconda.org/conda-forge/confection)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)\n\n## ‚è≥ Installation\n\n```bash\npip install confection\n```\n\n```bash\nconda install -c conda-forge confection\n```\n\n## üë©‚Äçüíª Usage\n\nThe configuration system parses a `.cfg` file like\n\n```ini\n[training]\npatience = 10\ndropout = 0.2\nuse_vectors = false\n\n[training.logging]\nlevel = \"INFO\"\n\n[nlp]\n# This uses the value of training.use_vectors\nuse_vectors = ${training.use_vectors}\nlang = \"en\"\n```\n\nand resolves it to a `Dict`:\n\n```json\n{\n  \"training\": {\n    \"patience\": 10,\n    \"dropout\": 0.2,\n    \"use_vectors\": false,\n    \"logging\": {\n      \"level\": \"INFO\"\n    }\n  },\n  \"nlp\": {\n    \"use_vectors\": false,\n    \"lang\": \"en\"\n  }\n}\n```\n\nThe config is divided into sections, with the section name in square brackets ‚Äì for\nexample, `[training]`. Within the sections, config values can be assigned to keys using `=`. Values can also be referenced\nfrom other sections using the dot notation and placeholders indicated by the dollar sign and curly braces. For example,\n`${training.use_vectors}` will receive the value of use_vectors in the training block. This is useful for settings that\nare shared across components.\n\nThe config format has three main differences from Python‚Äôs built-in `configparser`:\n\n1. JSON-formatted values. `confection` passes all values through `json.loads` to interpret them. You can use atomic\n   values like strings, floats, integers or booleans, or you can use complex objects such as lists or maps.\n2. Structured sections. `confection` uses a dot notation to build nested sections. If you have a section named\n   `[section.subsection]`, `confection` will parse that into a nested structure, placing subsection within section.\n3. References to registry functions. If a key starts with `@`, `confection` will interpret its value as the name of a\n   function registry, load the function registered for that name and pass in the rest of the block as arguments. If type\n   hints are available on the function, the argument values (and return value of the function) will be validated against\n   them. This lets you express complex configurations, like a training pipeline where `batch_size` is populated by a\n   function that yields floats.\n\nThere‚Äôs no pre-defined scheme you have to follow; how you set up the top-level sections is up to you. At the end of\nit, you‚Äôll receive a dictionary with the values that you can use in your script ‚Äì whether it‚Äôs complete initialized\nfunctions, or just basic settings.\n\nFor instance, let‚Äôs say you want to define a new optimizer. You'd define its arguments in `config.cfg` like so:\n\n```ini\n[optimizer]\n@optimizers = \"my_cool_optimizer.v1\"\nlearn_rate = 0.001\ngamma = 1e-8\n```\n\nTo load and parse this configuration:\n\n```python\nimport dataclasses\nfrom typing import Union, Iterable\nimport catalogue\nfrom confection import registry, Config\n\n# Create a new registry.\nregistry.optimizers = catalogue.create(\"confection\", \"optimizers\", entry_points=False)\n\n\n# Define a dummy optimizer class.\n@dataclasses.dataclass\nclass MyCoolOptimizer:\n    learn_rate: float\n    gamma: float\n\n\n@registry.optimizers.register(\"my_cool_optimizer.v1\")\ndef make_my_optimizer(learn_rate: Union[float, Iterable[float]], gamma: float):\n    return MyCoolOptimizer(learn_rate, gamma)\n\n\n# Load the config file from disk, resolve it and fetch the instantiated optimizer object.\nconfig = Config().from_disk(\"./config.cfg\")\nresolved = registry.resolve(config)\noptimizer = resolved[\"optimizer\"]  # MyCoolOptimizer(learn_rate=0.001, gamma=1e-08)\n```\n\nUnder the hood, `confection` will look up the `\"my_cool_optimizer.v1\"` function in the \"optimizers\" registry and then\ncall it with the arguments `learn_rate` and `gamma`. If the function has type annotations, it will also validate the\ninput. For instance, if `learn_rate` is annotated as a float and the config defines a string, `confection` will raise an\nerror.\n\nThe Thinc documentation offers further information on the configuration system:\n\n- [recursive blocks](https://thinc.ai/docs/usage-config#registry-recursive)\n- [defining variable positional arguments](https://thinc.ai/docs/usage-config#registries-args)\n- [using interpolation](https://thinc.ai/docs/usage-config#config-interpolation)\n- [using custom registries](https://thinc.ai/docs/usage-config#registries-custom)\n- [advanced type annotations with Pydantic](https://thinc.ai/docs/usage-config#advanced-types)\n- [using base schemas](https://thinc.ai/docs/usage-config#advanced-types-base-schema)\n- [filling a configuration with defaults](https://thinc.ai/docs/usage-config#advanced-types-fill-defaults)\n\n## üéõ API\n\n### <kbd>class</kbd> `Config`\n\nThis class holds the model and training [configuration](https://thinc.ai/docs/usage-config) and can load and save the\nINI-style configuration format from/to a string, file or bytes. The `Config` class is a subclass of `dict` and uses\nPython‚Äôs `ConfigParser` under the hood.\n\n#### <sup><kbd>method</kbd> `Config.__init__`</sup>\n\nInitialize a new `Config` object with optional data.\n\n```python\nfrom confection import Config\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\n```\n\n| Argument          | Type                                      | Description                                                                                                                                                 |\n| ----------------- | ----------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `data`            | `Optional[Union[Dict[str, Any], Config]]` | Optional data to initialize the config with.                                                                                                                |\n| `section_order`   | `Optional[List[str]]`                     | Top-level section names, in order, used to sort the saved and loaded config. All other sections will be sorted alphabetically.                              |\n| `is_interpolated` | `Optional[bool]`                          | Whether the config is interpolated or whether it contains variables. Read from the `data` if it‚Äôs an instance of `Config` and otherwise defaults to `True`. |\n\n#### <sup><kbd>method</kbd> `Config.from_str`</sup>\n\nLoad the config from a string.\n\n```python\nfrom confection import Config\n\nconfig_str = \"\"\"\n[training]\npatience = 10\ndropout = 0.2\n\"\"\"\nconfig = Config().from_str(config_str)\nprint(config[\"training\"])  # {'patience': 10, 'dropout': 0.2}}\n```\n\n| Argument      | Type             | Description                                                                                                          |\n| ------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------- |\n| `text`        | `str`            | The string config to load.                                                                                           |\n| `interpolate` | `bool`           | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          |\n| `overrides`   | `Dict[str, Any]` | Overrides for values and sections. Keys are provided in dot notation, e.g. `\"training.dropout\"` mapped to the value. |\n| **RETURNS**   | `Config`         | The loaded config.                                                                                                   |\n\n#### <sup><kbd>method</kbd> `Config.to_str`</sup>\n\nLoad the config from a string.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nprint(config.to_str()) # '[training]\\npatience = 10\\n\\ndropout = 0.2'\n```\n\n| Argument      | Type   | Description                                                                 |\n| ------------- | ------ | --------------------------------------------------------------------------- |\n| `interpolate` | `bool` | Whether to interpolate variables like `${section.key}`. Defaults to `True`. |\n| **RETURNS**   | `str`  | The string config.                                                          |\n\n#### <sup><kbd>method</kbd> `Config.to_bytes`</sup>\n\nSerialize the config to a byte string.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nconfig_bytes = config.to_bytes()\nprint(config_bytes)  # b'[training]\\npatience = 10\\n\\ndropout = 0.2'\n```\n\n| Argument      | Type             | Description                                                                                                          |\n| ------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------- |\n| `interpolate` | `bool`           | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          |\n| `overrides`   | `Dict[str, Any]` | Overrides for values and sections. Keys are provided in dot notation, e.g. `\"training.dropout\"` mapped to the value. |\n| **RETURNS**   | `str`            | The serialized config.                                                                                               |\n\n#### <sup><kbd>method</kbd> `Config.from_bytes`</sup>\n\nLoad the config from a byte string.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nconfig_bytes = config.to_bytes()\nnew_config = Config().from_bytes(config_bytes)\n```\n\n| Argument      | Type     | Description                                                                 |\n| ------------- | -------- | --------------------------------------------------------------------------- |\n| `bytes_data`  | `bool`   | The data to load.                                                           |\n| `interpolate` | `bool`   | Whether to interpolate variables like `${section.key}`. Defaults to `True`. |\n| **RETURNS**   | `Config` | The loaded config.                                                          |\n\n#### <sup><kbd>method</kbd> `Config.to_disk`</sup>\n\nSerialize the config to a file.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nconfig.to_disk(\"./config.cfg\")\n```\n\n| Argument      | Type               | Description                                                                 |\n| ------------- | ------------------ | --------------------------------------------------------------------------- |\n| `path`        | `Union[Path, str]` | The file path.                                                              |\n| `interpolate` | `bool`             | Whether to interpolate variables like `${section.key}`. Defaults to `True`. |\n\n#### <sup><kbd>method</kbd> `Config.from_disk`</sup>\n\nLoad the config from a file.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nconfig.to_disk(\"./config.cfg\")\nnew_config = Config().from_disk(\"./config.cfg\")\n```\n\n| Argument      | Type               | Description                                                                                                          |\n| ------------- | ------------------ | -------------------------------------------------------------------------------------------------------------------- |\n| `path`        | `Union[Path, str]` | The file path.                                                                                                       |\n| `interpolate` | `bool`             | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          |\n| `overrides`   | `Dict[str, Any]`   | Overrides for values and sections. Keys are provided in dot notation, e.g. `\"training.dropout\"` mapped to the value. |\n| **RETURNS**   | `Config`           | The loaded config.                                                                                                   |\n\n#### <sup><kbd>method</kbd> `Config.copy`</sup>\n\nDeep-copy the config.\n\n| Argument    | Type     | Description        |\n| ----------- | -------- | ------------------ |\n| **RETURNS** | `Config` | The copied config. |\n\n#### <sup><kbd>method</kbd> `Config.interpolate`</sup>\n\nInterpolate variables like `${section.value}` or `${section.subsection}` and return a copy of the config with interpolated\nvalues. Can be used if a config is loaded with `interpolate=False`, e.g. via `Config.from_str`.\n\n```python\nfrom confection import Config\n\nconfig_str = \"\"\"\n[hyper_params]\ndropout = 0.2\n\n[training]\ndropout = ${hyper_params.dropout}\n\"\"\"\nconfig = Config().from_str(config_str, interpolate=False)\nprint(config[\"training\"])  # {'dropout': '${hyper_params.dropout}'}}\nconfig = config.interpolate()\nprint(config[\"training\"])  # {'dropout': 0.2}}\n```\n\n| Argument    | Type     | Description                                    |\n| ----------- | -------- | ---------------------------------------------- |\n| **RETURNS** | `Config` | A copy of the config with interpolated values. |\n\n##### <sup><kbd>method</kbd> `Config.merge`</sup>\n\nDeep-merge two config objects, using the current config as the default. Only merges sections and dictionaries and not\nother values like lists. Values that are provided in the updates are overwritten in the base config, and any new values\nor sections are added. If a config value is a variable like `${section.key}` (e.g. if the config was loaded with\n`interpolate=False)`, **the variable is preferred**, even if the updates provide a different value. This ensures that variable\nreferences aren‚Äôt destroyed by a merge.\n\n> :warning: Note that blocks that refer to registered functions using the `@` syntax are only merged if they are\n> referring to the same functions. Otherwise, merging could easily produce invalid configs, since different functions\n> can take different arguments. If a block refers to a different function, it‚Äôs overwritten.\n\n```python\nfrom confection import Config\n\nbase_config_str = \"\"\"\n[training]\npatience = 10\ndropout = 0.2\n\"\"\"\nupdate_config_str = \"\"\"\n[training]\ndropout = 0.1\nmax_epochs = 2000\n\"\"\"\n\nbase_config = Config().from_str(base_config_str)\nupdate_config = Config().from_str(update_config_str)\nmerged = Config(base_config).merge(update_config)\nprint(merged[\"training\"])  # {'patience': 10, 'dropout': 0.1, 'max_epochs': 2000}\n```\n\n| Argument    | Type                            | Description                                         |\n| ----------- | ------------------------------- | --------------------------------------------------- |\n| `overrides` | `Union[Dict[str, Any], Config]` | The updates to merge into the config.               |\n| **RETURNS** | `Config`                        | A new config instance containing the merged config. |\n\n### Config Attributes\n\n| Argument          | Type   | Description                                                                                                                                                              |\n| ----------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `is_interpolated` | `bool` | Whether the config values have been interpolated. Defaults to `True` and is set to `False` if a config is loaded with `interpolate=False`, e.g. using `Config.from_str`. |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/explosion/confection",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "confection",
    "package_url": "https://pypi.org/project/confection/",
    "platform": null,
    "project_url": "https://pypi.org/project/confection/",
    "project_urls": {
      "Homepage": "https://github.com/explosion/confection"
    },
    "release_url": "https://pypi.org/project/confection/0.0.4/",
    "requires_dist": [
      "pydantic (!=1.8,!=1.8.1,<1.11.0,>=1.7.4)",
      "srsly (<3.0.0,>=2.4.0)",
      "typing-extensions (<4.5.0,>=3.7.4.1) ; python_version < \"3.8\""
    ],
    "requires_python": ">=3.6",
    "summary": "The sweetest config system for Python",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16374305,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ede632f079bbfc92a60db21b269bee49d442eb94acb54bd8ce30bdb3a8daeaa0",
          "md5": "f29cd924f8a43b922be0a93958db9304",
          "sha256": "e4b43ee84af1c2088726d7b91d4b6b958a6d6d5cc374108742a6db585b93ee44"
        },
        "downloads": -1,
        "filename": "confection-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f29cd924f8a43b922be0a93958db9304",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32585,
        "upload_time": "2022-08-24T08:52:49",
        "upload_time_iso_8601": "2022-08-24T08:52:49.683034Z",
        "url": "https://files.pythonhosted.org/packages/ed/e6/32f079bbfc92a60db21b269bee49d442eb94acb54bd8ce30bdb3a8daeaa0/confection-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca85a4b61e15eb41e253e19c2192cf0b5a576c20463d7a4c0ccdd38fa1b9ae5d",
          "md5": "df50910d43e45ecd120752cb05fa6f7d",
          "sha256": "5ff894a2bddd418881381612b2581e25edba22d921fa2fa66dc9b5082acf8ad3"
        },
        "downloads": -1,
        "filename": "confection-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "df50910d43e45ecd120752cb05fa6f7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35813,
        "upload_time": "2022-08-24T08:52:54",
        "upload_time_iso_8601": "2022-08-24T08:52:54.570888Z",
        "url": "https://files.pythonhosted.org/packages/ca/85/a4b61e15eb41e253e19c2192cf0b5a576c20463d7a4c0ccdd38fa1b9ae5d/confection-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c941a05cccafe74d2acc64dfdd5908a15dc2f502a5741d984ac3ce1abcfc217f",
          "md5": "3ddfb82f81506ea27e41c6c05fe24c0c",
          "sha256": "20663e54b472d77f2add23c2bc2ecad33b9fcb3c3679d303b74003ad45ff5927"
        },
        "downloads": -1,
        "filename": "confection-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ddfb82f81506ea27e41c6c05fe24c0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32790,
        "upload_time": "2022-09-28T09:49:50",
        "upload_time_iso_8601": "2022-09-28T09:49:50.246188Z",
        "url": "https://files.pythonhosted.org/packages/c9/41/a05cccafe74d2acc64dfdd5908a15dc2f502a5741d984ac3ce1abcfc217f/confection-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f8e25da8ed76724f265ac14ecc7a48d604d4c21ad7a3340acc414bcfbb3dd7f",
          "md5": "fafd3838910adf633773f168c2429724",
          "sha256": "1833a11052db95f212b447009e3d0dd6f09a9ad38228054cefe0daf540134792"
        },
        "downloads": -1,
        "filename": "confection-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fafd3838910adf633773f168c2429724",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35920,
        "upload_time": "2022-09-28T09:49:52",
        "upload_time_iso_8601": "2022-09-28T09:49:52.115565Z",
        "url": "https://files.pythonhosted.org/packages/1f/8e/25da8ed76724f265ac14ecc7a48d604d4c21ad7a3340acc414bcfbb3dd7f/confection-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "369f03c9137e34b3064f0eba298340d00a8dd4719c0b7021704187a7ddf1e382",
          "md5": "9d899ccbd7fac74c888cef4e7cd8e0fd",
          "sha256": "51af839c1240430421da2b248541ebc95f9d0ee385bcafa768b8acdbd2b0111d"
        },
        "downloads": -1,
        "filename": "confection-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d899ccbd7fac74c888cef4e7cd8e0fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32794,
        "upload_time": "2022-10-07T11:59:38",
        "upload_time_iso_8601": "2022-10-07T11:59:38.109667Z",
        "url": "https://files.pythonhosted.org/packages/36/9f/03c9137e34b3064f0eba298340d00a8dd4719c0b7021704187a7ddf1e382/confection-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bc7aee373825e3c66a75ee039a975c3a27a6f29b399d7b5a6d204d168c683bd",
          "md5": "653981a747bb3861759fa03410b65cd0",
          "sha256": "4fec47190057c43c9acbecb8b1b87a9bf31c469caa0d6888a5b9384432fdba5a"
        },
        "downloads": -1,
        "filename": "confection-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "653981a747bb3861759fa03410b65cd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 35914,
        "upload_time": "2022-10-07T11:59:39",
        "upload_time_iso_8601": "2022-10-07T11:59:39.357419Z",
        "url": "https://files.pythonhosted.org/packages/5b/c7/aee373825e3c66a75ee039a975c3a27a6f29b399d7b5a6d204d168c683bd/confection-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1c407291f4947d20f545eee76ef20d1eacfb1f80d1d6ab4792bfa6797e0578c",
          "md5": "d89d38484905c07762d12f2ef7581e70",
          "sha256": "aeac5919ba770c7b281aa5863bb6b0efed42568a7ad8ea26b6cb632154503fb2"
        },
        "downloads": -1,
        "filename": "confection-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d89d38484905c07762d12f2ef7581e70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 32798,
        "upload_time": "2023-01-10T12:08:08",
        "upload_time_iso_8601": "2023-01-10T12:08:08.065619Z",
        "url": "https://files.pythonhosted.org/packages/b1/c4/07291f4947d20f545eee76ef20d1eacfb1f80d1d6ab4792bfa6797e0578c/confection-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3503540079384d9665d752631724f578505ddf721b11a7d8318b964397a7a3b8",
          "md5": "a5b98b9f4038e9967d59570ddec0efc2",
          "sha256": "b1ddf5885da635f0e260a40b339730806dfb1bd17d30e08764f35af841b04ecf"
        },
        "downloads": -1,
        "filename": "confection-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a5b98b9f4038e9967d59570ddec0efc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36218,
        "upload_time": "2023-01-10T12:08:09",
        "upload_time_iso_8601": "2023-01-10T12:08:09.697367Z",
        "url": "https://files.pythonhosted.org/packages/35/03/540079384d9665d752631724f578505ddf721b11a7d8318b964397a7a3b8/confection-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1c407291f4947d20f545eee76ef20d1eacfb1f80d1d6ab4792bfa6797e0578c",
        "md5": "d89d38484905c07762d12f2ef7581e70",
        "sha256": "aeac5919ba770c7b281aa5863bb6b0efed42568a7ad8ea26b6cb632154503fb2"
      },
      "downloads": -1,
      "filename": "confection-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d89d38484905c07762d12f2ef7581e70",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 32798,
      "upload_time": "2023-01-10T12:08:08",
      "upload_time_iso_8601": "2023-01-10T12:08:08.065619Z",
      "url": "https://files.pythonhosted.org/packages/b1/c4/07291f4947d20f545eee76ef20d1eacfb1f80d1d6ab4792bfa6797e0578c/confection-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3503540079384d9665d752631724f578505ddf721b11a7d8318b964397a7a3b8",
        "md5": "a5b98b9f4038e9967d59570ddec0efc2",
        "sha256": "b1ddf5885da635f0e260a40b339730806dfb1bd17d30e08764f35af841b04ecf"
      },
      "downloads": -1,
      "filename": "confection-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a5b98b9f4038e9967d59570ddec0efc2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 36218,
      "upload_time": "2023-01-10T12:08:09",
      "upload_time_iso_8601": "2023-01-10T12:08:09.697367Z",
      "url": "https://files.pythonhosted.org/packages/35/03/540079384d9665d752631724f578505ddf721b11a7d8318b964397a7a3b8/confection-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}