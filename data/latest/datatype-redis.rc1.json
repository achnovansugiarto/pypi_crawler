{
  "info": {
    "author": "Peter Heiss",
    "author_email": "peter.heiss@uni-muenster.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "[![Maintainability](https://api.codeclimate.com/v1/badges/9945440b076661b87ccb/maintainability)](https://codeclimate.com/github/Heiss/py-datatype-redis/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/9945440b076661b87ccb/test_coverage)](https://codeclimate.com/github/Heiss/py-datatype-redis/test_coverage)\n\n# Redis for builtin-datatypes\n\nThis library implements all builtin datatypes from python3 with a redis backend.\n\n## Status\n\nWork in progress, not usable\n\n## Usage\n\n```python\nfrom datatype_redis import String\nfoo = String(\"bar\")\n```\n\n## Introduction\n\nAfter a lot of research to backup all my dict and lists to redis to use them in my microservice ecosystem, i was very disappointed about the current situation in the library environment for this purpose. There are a lot of libraries, which handle it, but no one includes everything i need. So i had to implement this by myself. You see here the results.\n\n## Inspiration\n\nThis library is heavily inspired by [hot-redis](https://github.com/stephenmcd/hot-redis) and [py-redis-pubsub-dict](https://github.com/Richard-Mathie/py-redis-pubsub-dict).\n\n## Options\n\nIn the following, the options of this library will be described.\n\n### Set redis as client\n\nAs default, the library use Redis from [redis-py](https://pypi.org/project/redis/) as implementation. If you want to use another implementation, you have to inherit from this class.\n\nIf you do not set the client-argument as follows, the library assumes to use a local installation on port 6379.\n\n```python\nfrom datatype_redis import String\nfoo = String(\"bar\", client={\"host\":\"myremotehost\", \"port\":6379})\n```\n\nYou can initialize the redis client by yourself, too.\n\n```python\nfrom datatype_redis import String\nfrom redis import Redis\nr = Redis(host='myremotehost', port=6379, db=0)\nfoo = String(\"bar\", client=r)\n```\n\n**Beware**: If the client is not compatible with this library, it will raise an `ValueError`.\n\nIf you want to use a redisCluster, you can do this with the client-parameter, too.\n\n```python\nfrom rediscluster import RedisCluster\nfrom datatype_redis import String\n# Requires at least one node for cluster discovery. Multiple nodes is recommended.\nstartup_nodes = [{\"host\": \"myremotehost\", \"port\": \"7000\"}]\nfoo = String(\"bar\", client=RedisCluster, startup_nodes=startup_nodes)\n```\n\nYou can overwrite the default behaviour with the following `configure` function.\n\n```python\nfrom datatype_redis import configure\nconfigure(host='myremotehost', port=6380, db=0)\n```\n\nOf course, you can use it to set your initialized client as default.\n\n```python\nfrom datatype_redis import configure\nfrom rediscluster import RedisCluster\n# Requires at least one node for cluster discovery. Multiple nodes is recommended.\nconfigure(client=RedisCluster, startup_nodes=startup_nodes)\n```\n\n**Beware**: If you set host and port and client at the same time, the library will take your client as default and ignore host and port.\n\nYou can use any implementation as client you want and set all parameters to configure. The library initialize your implementation with the given parameters for you threadsafe, so you will get a client for each thread you initialize. This behaviour helps to get a better performance in webservers etc.\n\n### Redis key\n\nRedis is a key-value-store, so it needs a key to store the values. To reduce the typing, you can use the default behaviour of this library, which uses unique identifier as keys. You can get the key with the `get_redis_key`-method to any datatype.\n\nBut if you want to use this library in a microservice, which should be duplicated over your cluster, this behaviour would be toxic to your implementation, so you can use the `key`-parameter to set an identifier.\n\n```python\nfrom datatype_redis import String\nfoo_uuid = String(\"bar\")\nfoo_key = String(\"bar\", key=\"foo\")\n\nprint(foo_uuid) # expect: \"bar\"\nprint(foo_uuid.get_redis_key()) # expect: similar to \"12345678-1234-5678-1234-567812345678\"\n\nprint(foo_key) # expect: \"bar\"\nprint(foo_key.get_redis_key()) # expect: \"foo\"\n```\n\nIf you query the uuid as key in your redis installation, you will not get the serialization of your data as you would expected, because this library uses a prefix per default to work with a big redis installation and to not interfere with any other implementations. You can get the key with prefix with `get_redis_key_full`-method and set this prefix in `configure`. The default value for prefix is `datatype-redis`.\n\n```python\nfrom datatype_redis import configure\nfoo_uuid = String(\"bar\", key=\"fooKey\")\nprint(foo_uuid.get_redis_key_full()) # expect: \"datatype-redis/fooKey\"\nprint(foo_uuid) # expect: \"bar\"\nconfigure(prefix=\"fooPrefix\")\nprint(foo_uuid.get_redis_key_full()) # expect: \"fooPrefix/fooKey\"\nprint(foo_uuid) # expect: \"bar\"\n```\n\n**Beware**: If you change your prefix, while you initialized a datatype, the library will rename all keys automatically with a matching filter. This will take some time on larger redis installations.\n\nIf you want to get the current prefix as string, you can call the `get_prefix`-method.\n\n```python\nfrom datatype_redis import get_prefix\nprint(get_prefix()) # expect default: \"datatype-redis\"\n```\n\n### Rename key\n\nIf you want to store your value in another key, you can do that with the `rename`-method.\n\n```python\nfrom datatype_redis import configure\nfoo_uuid = String(\"bar\", key=\"fooKey\")\nprint(foo_uuid.get_redis_key_full()) # expect: \"datatype-redis/fooKey\"\nfoo_uuid.rename(\"barKey\")\nprint(foo_uuid.get_redis_key_full()) # expect: \"datatype-redis/barKey\"\n```\n\n### Msgpack as serializer\n\nIf you want to store complex datatypes (like dict or list) in redis, you need to use a serializer. This library use [msgpack](https://pypi.org/project/msgpack/) for this purpose. If you want to use another implementation, your implementation needs a `dumps` and `loads` method.\n\nThe constructor of any datatype take your implementation with `serializer`-key.\n\nExample (use json as serializer):\n\n```python\nfrom datatype_redis import String\nimport json\n\nfoo = String(\"foo\", serializer=json)\n```\n\n**Beware**: If you want to use nested datatypes with redis backend from this library, you should use uuid-keys. Otherwise you could overwrite existing keys and your implementation does not work as you would expect.\n\n### PubSub Backend\n\nIf you need to get your results ASAP, but you change them rarely, you should take a look at the pubsub-cache implementation. This will reduce the latency for get-requests drastically, but you will get every problem with caches.\n\nIf you want to set a cache to an atomic datatype like String or Int, you can use the `PubSubCacheAtomic` class. You have to initialize a cache to store the values. Also, you have to use a specialized implementation of the corresponding datatype, called `PubSub*`. See the following example.\n\n```python\nfrom datatype_redis import PubSubCacheAtomic, PubSubString\nfrom pylru import lrucache\n\ncache = lrucache(1)\nstore = PubSubString(\"foo\")\nredcache = PubSubCacheAtomic(store, cache)\n```\n\nThe following table shows the PubSub classes of each atomic datatype.\n\n| atomic | PubSub       |\n| ------ | ------------ |\n| Bool   | PubSubBool   |\n| String | PubSubString |\n| Int    | PubSubInt    |\n| Float  | PubSubFloat  |\n\nFor complex datatypes (called datastructure) like Dict or List, you have to use the correspondig `PubSubCache*` classes (Do not use the `PubSubCacheAtomic` class for datastructures).\n\n| datastructure | PubSubCache*    |\n| ------------- | --------------- |\n| Dict          | PubSubCacheDict |\n| List          | PubSubCacheList |\n\nYou use them as follows.\n\n```python\nfrom datatype_redis import PubSubCacheDict, PubSubDict\nfrom pylru import lrucache\n\ncache = lrucache(10)\nstore = PubSubDict()\nredcache = PubSubCacheDict(store, cache)\n```\n\n## Examples and Demonstrations\n\n### Text Type\n#### Strings\n\n```python\nfrom datatype_redis import String\n\nfoo = String(\"bar\")\nprint(foo) # expect: \"bar\"\nfoo += \"foo\"\nprint(foo) # expect: \"barfoo\"\n```\n\n### Numeric Types\n#### Integer\n\n```python\nfrom datatype_redis import Int\n\nfoo = Int(3)\nprint(foo) # expect: \"3\"\nfoo += 7\nprint(foo) # expect: \"10\"\nfoo -= 11\nprint(foo) # expect: \"-1\"\n```\n\n#### Float\n\n```python\nfrom datatype_redis import Float\n\nfoo = Float(3.4)\nprint(foo) # expect: \"3.4\"\nfoo += 7\nprint(foo) # expect: \"10.4\"\nfoo -= 11\nprint(foo) # expect: \"-0.6\"\n```\n\n#### Complex\n\n### Sequence Types\n#### List\n\n```python\nfrom datatype_redis import List\n\nfoo = List()\nprint(foo) # expect: []\nfoo.append(\"foo\")\nprint(foo) # expect: [\"foo\"]\n(\"foo\" in foo) # expect: True\nfoo = List([\"bar\"])\nprint(foo) # expect: [\"bar\"]\n(\"foo\" in foo) # expect: False\n```\n\n#### Tuple\n\n#### Range\n\n### Mapping Type\n#### Dict\n\n```python\nfrom datatype_redis import Dict\n\nfoo = Dict()\nprint(foo) # expect: {}\nfoo[\"foo\"] = \"bar\nprint(foo[\"foo\"]) # expect: \"bar\"\nprint(foo[\"bar\"]) # expect: raise KeyError\nprint(foo) # expect: {\"foo\":\"bar\"}\nprint(foo.items()) # expect: [(\"foo\", \"bar\")]\nprint(foo.values()) # expect: [(\"bar\")]\nprint(foo.keys()) # expect: [(\"foo\")]\nfoo[\"bar\"] = [1,2,3]\nprint(foo[\"bar\"]) # expect: [1,2,3]\nprint(foo) # expect: {\"foo\":\"bar\", \"bar\":[1,2,3]}\n```\n\n### Set Types\n#### Set\n#### Frozen Set\n\n### Boolean Type\n#### bool\n\n### Binary Types\n#### Bytes\n#### Bytearray\n#### MemoryView\n\n## Microservices\n\nThe main purpose of this library is to use in a microservice ecosystem like a container in kubernetes. You have to run a redis instance in your cloud, configure your client with `configure()` for this library, so your microservice use redis as backend for your datatypes. This will make your values available on all your microservice implementations with same keys.\n\nFor redis in kubernetes, you should use a helm chart e.g. [redis-ha](https://github.com/DandyDeveloper/charts/tree/master/charts/redis-ha).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Heiss/py-datatype-redis",
    "keywords": "Redis,key-value store,Datatype,Datastructure",
    "license": "MIT",
    "maintainer": "Peter Heiss",
    "maintainer_email": "peter.heiss@uni-muenster.de",
    "name": "datatype-redis",
    "package_url": "https://pypi.org/project/datatype-redis/",
    "platform": "",
    "project_url": "https://pypi.org/project/datatype-redis/",
    "project_urls": {
      "Homepage": "https://github.com/Heiss/py-datatype-redis"
    },
    "release_url": "https://pypi.org/project/datatype-redis/0.1/",
    "requires_dist": [
      "pylru (==1.2.0)",
      "redis-py-cluster (==2.0.0)",
      "redis (==3.0.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Add redis to all python3 builtin datatypes to use in microservice ecosystems.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7875948,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d64a84d01242cd4388d74f915d515e2c565a2fd62a399d8f01514150c22f00d2",
          "md5": "72ff5c81ed4c2216c02bac248a6b34b8",
          "sha256": "26108ed3df7a943c23ce8d2491c40c9c0d55cc45348bc5cd470de831e34649fb"
        },
        "downloads": -1,
        "filename": "datatype_redis-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72ff5c81ed4c2216c02bac248a6b34b8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 7249,
        "upload_time": "2020-08-03T23:03:38",
        "upload_time_iso_8601": "2020-08-03T23:03:38.115806Z",
        "url": "https://files.pythonhosted.org/packages/d6/4a/84d01242cd4388d74f915d515e2c565a2fd62a399d8f01514150c22f00d2/datatype_redis-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa0f6c87fb73a2a5902abf81b34a8b3d701ca5b5bacef14c12a362c98bb0e683",
          "md5": "efa5c125fb1dcb6dc750d9a730b31595",
          "sha256": "28fab02433bca9709aa9210941bdb62c85a74837e25de88cd62258aba37454a5"
        },
        "downloads": -1,
        "filename": "datatype-redis-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "efa5c125fb1dcb6dc750d9a730b31595",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6982,
        "upload_time": "2020-08-03T23:03:40",
        "upload_time_iso_8601": "2020-08-03T23:03:40.163135Z",
        "url": "https://files.pythonhosted.org/packages/aa/0f/6c87fb73a2a5902abf81b34a8b3d701ca5b5bacef14c12a362c98bb0e683/datatype-redis-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d64a84d01242cd4388d74f915d515e2c565a2fd62a399d8f01514150c22f00d2",
        "md5": "72ff5c81ed4c2216c02bac248a6b34b8",
        "sha256": "26108ed3df7a943c23ce8d2491c40c9c0d55cc45348bc5cd470de831e34649fb"
      },
      "downloads": -1,
      "filename": "datatype_redis-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72ff5c81ed4c2216c02bac248a6b34b8",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 7249,
      "upload_time": "2020-08-03T23:03:38",
      "upload_time_iso_8601": "2020-08-03T23:03:38.115806Z",
      "url": "https://files.pythonhosted.org/packages/d6/4a/84d01242cd4388d74f915d515e2c565a2fd62a399d8f01514150c22f00d2/datatype_redis-0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa0f6c87fb73a2a5902abf81b34a8b3d701ca5b5bacef14c12a362c98bb0e683",
        "md5": "efa5c125fb1dcb6dc750d9a730b31595",
        "sha256": "28fab02433bca9709aa9210941bdb62c85a74837e25de88cd62258aba37454a5"
      },
      "downloads": -1,
      "filename": "datatype-redis-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "efa5c125fb1dcb6dc750d9a730b31595",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6982,
      "upload_time": "2020-08-03T23:03:40",
      "upload_time_iso_8601": "2020-08-03T23:03:40.163135Z",
      "url": "https://files.pythonhosted.org/packages/aa/0f/6c87fb73a2a5902abf81b34a8b3d701ca5b5bacef14c12a362c98bb0e683/datatype-redis-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}