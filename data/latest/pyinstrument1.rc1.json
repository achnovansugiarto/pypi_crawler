{
  "info": {
    "author": "Joe Rickerby",
    "author_email": "joerick@mac.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Testing"
    ],
    "description": "pyinstrument\n============\n\n [![PyPI version](https://badge.fury.io/py/pyinstrument.svg)](https://badge.fury.io/py/pyinstrument) [![Build Status](https://travis-ci.org/joerick/pyinstrument.svg?branch=master)](https://travis-ci.org/joerick/pyinstrument)\n\n[![Screenshot](screenshot.jpg)](https://raw.githubusercontent.com/joerick/pyinstrument/master/screenshot.jpg)\n\nPyinstrument is a Python profiler. A profiler is a tool to help you 'optimize'\nyour code - make it faster. It sounds obvious, but to get the biggest speed\nincrease you should [focus on the slowest part of your program](https://en.wikipedia.org/wiki/Amdahl%27s_law).\nPyinstrument helps you find it!\n\nDocumentation\n-------------\n\n* [Installation](#installation)\n* [How to use it](#how-to-use-it)\n  * [Python script](#profile-a-python-script)\n  * [Chunk of code](#profile-a-specific-chunk-of-code)\n  * [Django](#profile-a-web-request-in-django)\n  * [Flask](#profile-a-web-request-in-flask)\n* [How does it work?](#how-does-it-work)\n* [Changelog](#changelog)\n* [Contributing](#contributing)\n\nInstallation\n------------\n\n    pip install pyinstrument\n\nPyinstrument supports Python 2.7 and 3.3+.\n\n> To run Pyinstrument from a git checkout or from a source tarball, there's a build step.\nTake a look at [Contributing](#contributing) for more info.\n\nHow to use it\n-------------\n\n### Profile a Python script\n\nCall Pyinstrument directly from the command line. Instead of writing\n`python script.py`, type `pyinstrument script.py`. Your script will run as\nnormal, and at the end (or when you press `^C`), Pyinstrument will output a\ncolored summary showing where most of the time was spent.\n\nHere are the options you can use:\n\n    Usage: pyinstrument [options] scriptfile [arg] ...\n\n    Options:\n      --version             show program's version number and exit\n      -h, --help            show this help message and exit\n      --load-prev=ID        Instead of running a script, load a previous report\n      -m MODULE_NAME        run library module as a script, like 'python -m\n                            module'\n      -o OUTFILE, --outfile=OUTFILE\n                            save to <outfile>\n      -r RENDERER, --renderer=RENDERER\n                            how the report should be rendered. One of: 'text',\n                            'html', 'json', or python import path to a renderer\n                            class\n      -t, --timeline        render as a timeline - preserve ordering and don't\n                            condense repeated calls\n      --hide=EXPR           glob-style pattern matching the file paths whose\n                            frames to hide. Defaults to '*/lib/*'.\n      --hide-regex=REGEX    regex matching the file paths whose frames to hide.\n                            Useful if --hide doesn't give enough control.\n      --show-all            (text renderer only) show external library code\n      --unicode             (text renderer only) force unicode text output\n      --no-unicode          (text renderer only) force ascii text output\n      --color               (text renderer only) force ansi color text output\n      --no-color            (text renderer only) force no color text output\n\n**Protip:** `-r html` will give you a interactive profile report as HTML - you\ncan really explore this way!\n\n### Profile a specific chunk of code\n\nPyinstrument also has a Python API. Just surround your code with Pyinstrument,\nlike this:\n\n```python\nfrom pyinstrument import Profiler\n\nprofiler = Profiler()\nprofiler.start()\n\n# code you want to profile\n\nprofiler.stop()\n\nprint(profiler.output_text(unicode=True, color=True))\n```\n\n(You can omit the `unicode` and `color` flags if your output/terminal does\nnot support them.)\n\n**Protip:** To render the output as HTML, use `profiler.output_html()`\n\n### Profile a web request in Django\n\nTo profile Django web requests, add\n`pyinstrument.middleware.ProfilerMiddleware` to `MIDDLEWARE_CLASSES` in your\n`settings.py`.\n\nOnce installed, add `?profile` to the end of a request URL to activate the\nprofiler. Your request will run as normal, but instead of getting the response,\nyou'll get pyinstrument's analysis of the request in a web page.\n\nIf you're writing an API, it's not easy to change the URL when you want to\nprofile something. In this case, add  `PYINSTRUMENT_PROFILE_DIR = 'profiles'`\nto your `settings.py`. Pyinstrument will profile every request and save the\nHTML output to the folder `profiles` in your working directory.\n\nIf you want to show the profiling page depending on the request you can define \n`PYINSTRUMENT_SHOW_CALLBACK` as dotted path to a function used for determining \nwhether the page should show or not.\nYou can provide your own function callback(request) which returns True or False \nin your settings.py.\n\n```python\ndef custom_show_pyinstrument(request):\n    return request.user.is_superuser\n\n\nPYINSTRUMENT_SHOW_CALLBACK = \"%s.custom_show_pyinstrument\" % __name__\n```\n\n### Profile a web request in Flask\n\nA simple setup to profile a Flask application is the following:\n\n```python\nfrom flask import Flask, g, make_response, request\napp = Flask(__name__)\n\n@app.before_request\ndef before_request():\n    if \"profile\" in request.args:\n        g.profiler = Profiler()\n        g.profiler.start()\n\n\n@app.after_request\ndef after_request(response):\n    if not hasattr(g, \"profiler\"):\n        return response\n    g.profiler.stop()\n    output_html = g.profiler.output_html()\n    return make_response(output_html)\n```\n\nThis will check for the `?profile` query param on each request and if found,\nit starts profiling. After each request where the profiler was running it\ncreates the html output and returns that instead of the actual response.\n\n### Profile something else?\n\nI'd love to have more ways to profile using Pyinstrument - e.g. other\nweb frameworks. PRs are encouraged!\n\nHow is it different to `profile` or `cProfile`?\n-----------------------------------------------\n\n### Statistical profiling (not tracing)\n\nPyinstrument is a statistical profiler - it doesn't track every\nfunction call that your program makes. Instead, it's recording the call stack\nevery 1ms.\n\nThat gives some advantages over other profilers. Firstly, statistical\nprofilers are much lower-overhead than tracing profilers.\n\n|              | Django template render × 4000                      | Overhead\n| -------------|:---------------------------------------------------|---------:\n| Base         | `████████████████                       `  0.33s   | \n|              |                                                    |\n| pyinstrument | `████████████████████                   `  0.43s   |      30%\n| cProfile     | `█████████████████████████████          `  0.61s   |      84%\n| profile      | `██████████████████████████████████...██`  6.79s   |    2057%\n\nBut low overhead is also important because it can distort the results. When\nusing a tracing profiler, code that makes a lot of Python function calls\ninvokes the profiler a lot, making it slower. This distorts the \nresults, and might lead you to optimise the wrong part of your program!\n\n### Full-stack recording\n\nThe standard Python profilers [`profile`][1] and [`cProfile`][2] show you a\nbig list of functions, ordered by the time spent in each function.\nThis is great, but it can be difficult to interpret _why_ those functions are\ngetting called. It's more helpful to know why those functions are called, and\nwhich parts of user code were involved.\n\n[1]: http://docs.python.org/2/library/profile.html#module-profile\n[2]: http://docs.python.org/2/library/profile.html#module-cProfile\n\nFor example, let's say I want to figure out why a web request in Django is\nslow. If I use cProfile, I might get this:\n\n    151940 function calls (147672 primitive calls) in 1.696 seconds\n\n       Ordered by: cumulative time\n\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n            1    0.000    0.000    1.696    1.696 profile:0(<code object <module> at 0x1053d6a30, file \"./manage.py\", line 2>)\n            1    0.001    0.001    1.693    1.693 manage.py:2(<module>)\n            1    0.000    0.000    1.586    1.586 __init__.py:394(execute_from_command_line)\n            1    0.000    0.000    1.586    1.586 __init__.py:350(execute)\n            1    0.000    0.000    1.142    1.142 __init__.py:254(fetch_command)\n           43    0.013    0.000    1.124    0.026 __init__.py:1(<module>)\n          388    0.008    0.000    1.062    0.003 re.py:226(_compile)\n          158    0.005    0.000    1.048    0.007 sre_compile.py:496(compile)\n            1    0.001    0.001    1.042    1.042 __init__.py:78(get_commands)\n          153    0.001    0.000    1.036    0.007 re.py:188(compile)\n      106/102    0.001    0.000    1.030    0.010 __init__.py:52(__getattr__)\n            1    0.000    0.000    1.029    1.029 __init__.py:31(_setup)\n            1    0.000    0.000    1.021    1.021 __init__.py:57(_configure_logging)\n            2    0.002    0.001    1.011    0.505 log.py:1(<module>)\n\nIt's often hard to understand how your own code relates to these traces.\n\nPyinstrument records the entire stack, so tracking expensive calls is much\neasier. It also hides library frames by default, letting you focus on your\napp/module is affecting performance.\n\n```\n  _     ._   __/__   _ _  _  _ _/_   Recorded: 14:53:35  Samples:  131\n /_//_/// /_\\ / //_// / //_'/ //    Duration: 3.131     CPU time: 0.195\n/   _/                    v3.0.0b3\n\nProgram: examples/django_example/manage.py runserver --nothreading --noreload\n\n3.131 <module>  manage.py:2\n└─ 3.118 execute_from_command_line  django/core/management/__init__.py:378\n      [473 frames hidden]  django, socketserver, selectors, wsgi...\n         2.836 select  selectors.py:365\n         0.126 _get_response  django/core/handlers/base.py:96\n         └─ 0.126 hello_world  django_example/views.py:4\n```\n\n### 'Wall-clock' time (not CPU time)\n\nPyinstrument records duration using 'wall-clock' time. When you're writing a\nprogram that downloads data, reads files, and talks to databases, all that\ntime is *included* in the tracked time by pyinstrument.\n\nThat's really important when debugging performance problems, since Python is\noften used as a 'glue' language between other services. The problem might not\nbe in your program, but you should still be able to find why it's slow.\n\nHow does it work?\n-----------------\n\nPyinstrument interrupts the program every 1ms and records the entire stack at\nthat point. It does this using a C extension and `PyEval_SetProfile`, but only\ntaking readings every 1ms. Check out [this blog post](http://joerick.me/posts/2017/12/15/pyinstrument-20/) for more info.\n\nYou might be surprised at how few samples make up a report, but don't worry,\nit won't decrease accuracy. The default interval of 1ms is a lower bound for\nrecording a stackframe, but if there is a long time spent in a single function\ncall, it will be recorded at the end of that call. So effectively those\nsamples were 'bunched up' and recorded at the end.\n\nChangelog\n---------\n\n### v3.1.2\n\n- Fix `<__array_function__ internals>` frames appearing as app code in reports\n\n### v3.1.1\n\n- Added support for timeline mode on HTML and JSON renderers\n- Released as a tarball as well as a universal wheel\n\n### v3.1.0\n\n- Added PYINSTRUMENT_SHOW_CALLBACK option on the Django middleware to \n  add a condition to showing the profile (could be used to run pyinstrument\n  on a live server!)\n- Fixed bug in the Django middleware where file would not be written because\n  of a unicode error\n\n### v3.0.3\n\n- Fixed bug with the Django middleware on Windows where profiling would fail\n  because we were trying to put an illegal character '?' in the profile path.\n  (#66)\n\n### v3.0.2\n\n- Add `--show` and `--show-regex` options, to mark certain files to be\n  displayed. This helps to profile inside specific modules, while hiding\n  others. For example, `pyinstrument --show '*/sympy/*' script.py`.\n\n### v3.0.1\n\n- Fix #60: pass all arguments after -m module_name to the called module\n- Fix crash during HTML/JSON output when no frames were captured.\n\n### v3.0.0\n\n- Pyinstrument will now hide traces through libraries that you're using by default. So instead of showing you loads of frames going through the internals of something external e.g. urllib, it lets you focus on your code.\n\n    | Before | After |\n    | --- | ---\n    | ![image](https://user-images.githubusercontent.com/1244307/50928250-1e50db00-1452-11e9-9164-6050a3c950ed.png) | ![image](https://user-images.githubusercontent.com/1244307/50928326-4c361f80-1452-11e9-91e8-cea735584806.png) | \n\n  To go back to the old behaviour, use `--show-all` on the command line.\n\n- 'Entry' frames of hidden groups are shown, so you know which call is the problem\n- Really slow frames in the groups are shown too, e.g. the 'read' call on the socket\n- Application code is highlighted in the console\n- Additional metrics are shown at the top of the trace - timestamp, number of samples, duration, CPU time\n- Hidden code is controlled by the `--hide` or `--hide-regex` options - matching on the path of the code files. \n  ```\n    --hide=EXPR           glob-style pattern matching the file paths whose\n                          frames to hide. Defaults to '*/lib/*'.\n    --hide-regex=REGEX    regex matching the file paths whose frames to hide.\n                          Useful if --hide doesn't give enough control.\n  ```\n\n- Outputting a timeline is supported from the command line.\n\n  ```\n    -t, --timeline        render as a timeline - preserve ordering and don't\n                          condense repeated calls\n  ```\n\n- Because there are a few rendering options now, you can load a previous profiling session using `--load-prev` - pyinstrument keeps the last 10 sessions.\n\n- Hidden groups can also call back into application code, that looks like this:\n\n    ![image](https://user-images.githubusercontent.com/1244307/50928591-fca42380-1452-11e9-8320-3c851cf5210e.png)\n\n- (internal) When recording timelines, frame trees are completely linear now, allowing \n  for the creation of super-accurate frame charts.\n\n- (internal) The HTML renderer has been rewritten as a Vue.js app. All the console improvements apply to the HTML output too, plus it's interactive.\n\n- (internal) A lot of unit and integration tests added!\n\nYikes! See #49 for the gory details. I hope you like it.\n\n### v2.3.0\n\n-   Big refactor! \n    -   `Recorders` have been removed. The frame recording is now internal to the `Profiler` object.\n        This means the 'frame' objects are more general-purpose, which paves the way for...\n    -   Processors! These are functions that mutate the tree to sculpt the output.\n        They are used by the renderers to filter the output to the correct form. Now, instead of\n        a time-aggregating recorder, the profiler just uses timeline-style recording (this is \n        lower-overhead anyway) and the aggregation is done as a processing step.\n    -   The upshot of this is that it's now way easier to alter the tree to filter stuff out, and\n        do more advanced things like combining frames that we don't care about. More features to\n        come that use this in v3.0!\n-   Importlib frames are removed - you won't see them at all. Their children are retained, so\n    imports are just transparent.\n-   Django profile file name is now limited to a hundred of characters (#50)\n-   Fix bug with --html option (#53)\n-   Add `--version` command line option\n\n### v2.2.1\n\n-   Fix crash when using on the command line.\n\n### v2.2.0\n\n-   Added support for JSON output. Use `pyinstrument --renderer=json scriptfile.py`. \n    [PR](https://github.com/joerick/pyinstrument/pull/46)\n-   [@iddan](https://github.com/iddan) has put together an\n    [interactive viewer](https://python-flame-chart.netlify.com/) using the JSON output!\n\n    ![image](https://user-images.githubusercontent.com/1244307/44622790-3ca9a600-a8b8-11e8-8dc2-f33ce433c03d.png)\n\n-   When running `pyinstrument --html` and you don't pipe the output to a file, pyinstrument will write the console output to a temp file and open that in a browser.\n\n### v2.1.0\n\n-   Added support for running modules with pyinstrument via the command line. The new syntax\n    is the `-m` flag e.g. `pyinstrument -m module_name`! [PR](https://github.com/joerick/pyinstrument/pull/45#pullrequestreview-143383557) \n\n### v2.0.4 \n\n-   Fix crashes due to multi-threaded use of pyinstrument. The fix is in the C extension,\n    over at https://github.com/joerick/pyinstrument_cext/pull/3\n\n### v2.0.3\n\n-   Pyinstrument can now be used in a `with` block.\n\n    For example:\n\n\t\tprofiler = pyinstrument.Profiler()\n\t\twith profiler:\n\t\t    # do some work here...\n\t\tprint(profiler.output_text())\n-   Middleware fix for older versions of Django\n\n### v2.0.2\n\n-   Fix for max recursion error when used to profile programs with a lot of frames on the stack.\n\n### v2.0.1\n\n-   Ensure license is included in the sdist.\n\n### v2.0.0\n\n-   **Pyinstrument uses a new profiling mode**. Rather than using\n    signals, pyintrument uses a new statistical profiler built on\n    PyEval_SetProfile. This means no more main thread restriction, no more \n    IO errors when using Pyinstrument, and no need for a separate more \n    'setprofile' mode!\n\n-   **Renderers**. Users can customize Pyinstrument to use alternative renderers\n    with the `renderer` argument on `Profiler.output()`, or using the `--renderer`\n    argument on the command line.\n\n-   **Recorders**. To support other use cases of Pyinstrument (e.g. flame charts),\n    pyinstrument now has a 'timeline' recorder mode. This mode records captured\n    frames in a linear way, so the program execution can be viewed on a\n    timeline.\n\n### v0.13\n\n-   `pyinstrument` command. You can now profile python scripts from the shell\n    by running `$ pyinstrument script.py`. This is now equivalent to \n    `python -m pyinstrument`. Thanks @asmeurer!\n\n### v0.12\n\n-   Application code is highlighted in HTML traces to make it easier to spot\n\n-   Added `PYINSTRUMENT_PROFILE_DIR` option to the Django interface, which \n    will log profiles of all requests to a file the specified folder. Useful\n    for profiling API calls.\n\n-   Added `PYINSTRUMENT_USE_SIGNAL` option to the Django interface, for use\n    when signal mode presents problems.\n\nContributing\n------------\n\nTo run pyinstrument from the git repo or a source checkout, you must first run\n\n    python setup.py build\n\nThis compiles the Javascript code needed for the HTML output. You will need\n[node](https://nodejs.org/en/) installed (Node isn't required for the pip\ninstall as the Javascript is already pre-built in the wheel).\n\nTo setup a dev envronment, do:\n\n    virtualenv --python=python3 env\n    . env/bin/activate\n    pip install -r requirements-dev.txt\n\n> Note: if you get an SSL error doing the above, it might be due to setuptools trying\n> to install pytest-runner, since it's listed in setup_requires. The workaround is to \n> make sure your pip is up-to-date (`curl https://bootstrap.pypa.io/get-pip.py | python`)\n> and then install it first `pip install pytest-runner`. Then try \n> `pip install -r requirements-dev.txt`.\n\nTo get some sample output:\n\n    pyinstrument examples/wikipedia_article_word_count.py\n\nTo run the tests:\n\n    python setup.py test\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joerick/pyinstrument",
    "keywords": "profiling,profile,profiler,cpu,time,sampling",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyinstrument1",
    "package_url": "https://pypi.org/project/pyinstrument1/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyinstrument1/",
    "project_urls": {
      "Homepage": "https://github.com/joerick/pyinstrument"
    },
    "release_url": "https://pypi.org/project/pyinstrument1/3.1.3/",
    "requires_dist": [
      "pyinstrument-cext (>=0.2.2)"
    ],
    "requires_python": "",
    "summary": "Call stack profiler for Python. Shows you why your code is slow!",
    "version": "3.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7596748,
  "releases": {
    "3.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "065e020fddf03f91b94a3cee7893177087608abd7c6ace00ac6466dfe299272e",
          "md5": "b721cdfd23817b53172758813b29bd68",
          "sha256": "116063324f5925e76e6b9c0cce245090f2139a32ff2372fa17da03c5d5d05fb7"
        },
        "downloads": -1,
        "filename": "pyinstrument1-3.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b721cdfd23817b53172758813b29bd68",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 45103,
        "upload_time": "2020-06-30T14:16:35",
        "upload_time_iso_8601": "2020-06-30T14:16:35.797642Z",
        "url": "https://files.pythonhosted.org/packages/06/5e/020fddf03f91b94a3cee7893177087608abd7c6ace00ac6466dfe299272e/pyinstrument1-3.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6732bdf61f84c74da564d780bae373d6978addedc56d2f497bd97dd7336117db",
          "md5": "4adca8da18bbbf2c4c1fe3ca2931e19e",
          "sha256": "48b8433d9f381c04c34b96cf1a1b2794c5ee64ee21689edeb1ed3104790449c2"
        },
        "downloads": -1,
        "filename": "pyinstrument1-3.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4adca8da18bbbf2c4c1fe3ca2931e19e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46197,
        "upload_time": "2020-06-30T14:16:39",
        "upload_time_iso_8601": "2020-06-30T14:16:39.996285Z",
        "url": "https://files.pythonhosted.org/packages/67/32/bdf61f84c74da564d780bae373d6978addedc56d2f497bd97dd7336117db/pyinstrument1-3.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "065e020fddf03f91b94a3cee7893177087608abd7c6ace00ac6466dfe299272e",
        "md5": "b721cdfd23817b53172758813b29bd68",
        "sha256": "116063324f5925e76e6b9c0cce245090f2139a32ff2372fa17da03c5d5d05fb7"
      },
      "downloads": -1,
      "filename": "pyinstrument1-3.1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b721cdfd23817b53172758813b29bd68",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 45103,
      "upload_time": "2020-06-30T14:16:35",
      "upload_time_iso_8601": "2020-06-30T14:16:35.797642Z",
      "url": "https://files.pythonhosted.org/packages/06/5e/020fddf03f91b94a3cee7893177087608abd7c6ace00ac6466dfe299272e/pyinstrument1-3.1.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6732bdf61f84c74da564d780bae373d6978addedc56d2f497bd97dd7336117db",
        "md5": "4adca8da18bbbf2c4c1fe3ca2931e19e",
        "sha256": "48b8433d9f381c04c34b96cf1a1b2794c5ee64ee21689edeb1ed3104790449c2"
      },
      "downloads": -1,
      "filename": "pyinstrument1-3.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4adca8da18bbbf2c4c1fe3ca2931e19e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 46197,
      "upload_time": "2020-06-30T14:16:39",
      "upload_time_iso_8601": "2020-06-30T14:16:39.996285Z",
      "url": "https://files.pythonhosted.org/packages/67/32/bdf61f84c74da564d780bae373d6978addedc56d2f497bd97dd7336117db/pyinstrument1-3.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}