{
  "info": {
    "author": "xqk",
    "author_email": "xiaqiankun@outlook.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# sun\n基于FastAPI和gRPC轻量级微服务开发框架\n\n\n## Requirements\n\n    1. Python 3.7+\n    2. FastAPI 0.63+\n    3. grpcio>=1.32.0,<1.42\n\n\n## Install\n\n```bash\npip install sun-core\n```\n\n## Application \n\nCreate Application\n\n```python\nimport greeter_server\n# Initialized App \napp = Sun()\n# Updated settings\napp.settings(base_settings={'title': 'Sun App'})\n```\n\nLaunch \n\n```bash\n# lauch RPC \npython main.py --rpc\n# lauch HTTP\npython main.py --http\n```\n\nMore usage of `Application`: [example](examples/main.py)\n\n\n## Database \n\n### connect\n\n```python\nfrom sun.core import db\n# connect to database when app started\n# db is a sqla-wrapper instance\ndb.connect('DATABASE_URI')  \n  \n```\n\n### Declarative mode with sqla-wrapper\n\n```python\nclass User(db.Model):\n    __tablename__ \"users\"\n    id = db.Column(db.Integer, primary_key=True)\n    ...\ndb.create_all()\ndb.add(User(...))\ndb.commit()\ntodos = db.query(User).all()\n```\n\nMore convenient usage, ref to [SQLA-Wrapper](https://github.com/jpsca/sqla-wrapper)\n\n\n### Declare models inherit from convenient base models\n\n*BaseModel*\n\n```python\n# using BaseModel\nclass User(db.BaseModel):\n    __tablename__ \"users\"\n    id = db.Column(db.Integer, primary_key=True)\n    ...\n```\n\n```python\n# BaseModel's source code \nclass BaseModel(db.Model):\n    __abstract__ = True\n    created_time = Column(DateTime(timezone=True), default=datetime.utcnow)\n    updated_time = Column(\n        DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow\n    )\n    is_active = Column(Boolean(), default=True)\n```\n\n### Transaction\n\nSQLA-wrapper default model behavior is auto commit, auto commit will be disabled with `db.transaction` context. \n\n```python\nwith db.transaction():\n    item = Item.create(name='test1')\n```\n\n### Operators\n\nOperators provided `get_filters_expr` to transform filters (dict) to SQLAlchemy expressions.  \n\n```python\nfrom sun.db.operators import get_filters_expr\nfrom models import User\nusers = User.query().filter(*get_filters_expr(User, **filters)).all()\n```\n\n## Schema\n\n*model_to_schema*\n\n```python\n# generate pydantic schema from models\n# `User` is a db.Model or db.BaseModel instance \nfrom sun.schemas import model_to_schema\nUserSchema = model_to_schema(User)\n```\n\n### Generic HTTP/RPC Actions\n\nGeneric HTTP/RPC support actions:\n\n|Action |Route |Method | RPC  | Description|\n--- |--- | --- | --- | ---\n|get |/{id} |GET |Get{Resource} |Get an existing resource matching the given id |\n|list |/ |GET |List{Resource} |Get all the resources |\n|create |/ |POST |Create{Resource} |Create a new resource |\n|update |/{id} |PATCH |Update{Resource} |Update an existing resource matching the given id |\n|delete |/{id} |DELETE |Delete{Resource} |Delete an existing resource matching the given id |\n\nGeneric Actions examples:\n\n```python\n# 1. import `Resource` base class\nfrom sun.resources import Resource\n# 2. implementation actions inherited from Resource\nclass GreeterResource(Resource):\n    schema = Greeter\n    @action()\n    def get(self, pk=None):\n        return [g for g in GREETERS if g.get('id') == pk][0]\n    @action()\n    def list(self, schema_in: ListRequest):\n        return GREETERS[:schema_in.limit]\n    @action()\n    def create(self, schema_in: schema):\n        return {'id': schema_in.id, 'content': schema_in.content}\n    @action()\n    def update(self, schema_in: schema, pk=None):\n        return {'id': pk, 'content': schema_in.content}\n    @action()\n    def delete(self, pk=None):\n        return {'id': pk, 'result': True}  # using `id` instand of `result`\n```\n\n\n### Custom HTTP/RPC Actions\n\nCustom actions also decorated by `@action`, but `detail` signature is required.\n\n```python\n@action(detail=False)\ndef custom_action(self):\n    pass\n```\n\n`detail` has no default value.\n> `True` means action to single resource, url path is '/{resources}/{id}'.\n> \n> `False` means action set of resources, url path is '/{resources}'.\n> \n### Override HTTP Actions\n\nIf the default HTTP action template is not satisfied your request, you can override HTTP actions.\n\n```python\n# Get the origin router \nrouter = GreeterResource.as_router()\n# Override the actions using the FastAPI normal way\n@router.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n```\n\n> More usage of `Resource`: [GreeterResource](examples/resources/greeter.py)\n\n### ModelResource\n\n<i>New in version 2.1.</i>\n\n```python\nclass UserResource(ModelResource):\n    model = User\n    schema = UserSchema\n    filters = [\n        {'username': str},\n        {'age': Optional[str]},\n    ]  # yapf: disable\n    permission_classes = [IsAuthenticated]\n```\n\n\n## Service Mixin\n\n```python\n# import \nfrom sun.mixins import ServiceMixin\nclass Hello(hello_pb2_grpc.HelloServiceServicer, ServiceMixin):\n    pass\n```\n\n## Cache\n\n### Cache API\n\n```python\nfrom sun.core import cache\n# Usage example (API)\n# Read cache \ncache.get(key)\n# Set cache \ncache.set(key, value, timeout=10)\n```\n\n### cache memoize\n\n```python\n# Import the cache_memoize from sun core \nfrom sun.core import cache_memoize\n# Attach decorator to cacheable function with a timeout of 100 seconds.\n@cache_memoize(100)\ndef expensive_function(start, end):\n    return random.randint(start, end)\n```\n\n## Utils\n\n**dateparser** \n\n[dateparser docs](https://dateparser.readthedocs.io/en/v1.0.0/)\n\n**MessageToDict/ParseDict**\n\nOptimized MessageToDict/ParseDict from `google.protobuf.js_format`\n\n```python\nfrom sun.utils import MessageToDict, ParseDict\n```\n\n## Tests\n\n**gRPC service tests**\n\n```python\nfrom sun.tests import GRPCTestBase\nfrom service.demo import demo_service, demo_pb2, demo_pb2_grpc\nclass TestDemoRPC(GRPCTestBase):\n    server_class = demo_service.DemoService  # Provided service \n    pb2 = demo_pb2  # Provided pb2\n    pb2_grpc = demo_pb2_grpc  # Provided pb2 grpc\n    def setup_method(self):  # Pytest setup \n        pass\n    def teardown_method(self):  # Pytest teardown\n        pass\n    def test_demo(self):\n        pass\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xqk/sun",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sun-core",
    "package_url": "https://pypi.org/project/sun-core/",
    "platform": null,
    "project_url": "https://pypi.org/project/sun-core/",
    "project_urls": {
      "Homepage": "https://github.com/xqk/sun"
    },
    "release_url": "https://pypi.org/project/sun-core/0.1.7/",
    "requires_dist": [
      "aiomysql",
      "aiosqlite",
      "dateparser (>=1.1.0)",
      "decamelize (==0.1.2)",
      "fastapi[all] (<0.70,>=0.63.0)",
      "fastapi-pagination (<0.9,>=0.7.4)",
      "grpcio (<1.42,>=1.32.0)",
      "grpcio-tools (<1.42,>=1.32.0)",
      "grpc-interceptor (==0.13.0)",
      "kombu (<6.0,>=5.2.4)",
      "MarkupSafe (==2.0.1)",
      "PyMySQL (<=0.9.3,>=0.9)",
      "passlib[bcrypt] (==1.7.2)",
      "pillow (>=7.2.0)",
      "protobuf (<3.18,>=3.15)",
      "pydantic-sqlalchemy (<1,>=0.0.7)",
      "python-jose[cryptography] (==3.2.0)",
      "pytz (==2021.1)",
      "redis (==3.5.3)",
      "regex (==2022.1.18)",
      "sqla-wrapper (<5.6,>=5.0.0)",
      "typer (>=0.4)",
      "uvicorn (<=0.15,>=0.12.3)",
      "etcd3 (==0.12.0)"
    ],
    "requires_python": "",
    "summary": "基于FastAPI和gRPC轻量级微服务开发框架",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13974971,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75482f3ddf53d7d9cbe0679d00b737de2f74e6f7dbb5d1a8490554529214edf6",
          "md5": "ec1c374cccd5b5e609178b472c2bc2d2",
          "sha256": "efc945cd07df4e8101a80ba6e09901df2ca1cbda446eceb0592c4956d8e08637"
        },
        "downloads": -1,
        "filename": "sun_core-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec1c374cccd5b5e609178b472c2bc2d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37716,
        "upload_time": "2022-05-19T16:30:09",
        "upload_time_iso_8601": "2022-05-19T16:30:09.689269Z",
        "url": "https://files.pythonhosted.org/packages/75/48/2f3ddf53d7d9cbe0679d00b737de2f74e6f7dbb5d1a8490554529214edf6/sun_core-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b8ee9ee617a318fd7eb402eae9d7b96900e5708fdfd07d6761e0a33f892ee4a",
          "md5": "c961fc4635ee4dfb68cadd1036b68980",
          "sha256": "91f7f6d3e525deb86d843b5473bc7e5396217b2367c334908d3e60127248016f"
        },
        "downloads": -1,
        "filename": "sun_core-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c961fc4635ee4dfb68cadd1036b68980",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37709,
        "upload_time": "2022-05-20T04:19:52",
        "upload_time_iso_8601": "2022-05-20T04:19:52.145331Z",
        "url": "https://files.pythonhosted.org/packages/3b/8e/e9ee617a318fd7eb402eae9d7b96900e5708fdfd07d6761e0a33f892ee4a/sun_core-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9061bf96a3d27444f2aad13e8b5fa153e0c8e73acd8a60ad09130e584472045",
          "md5": "05f64e8367e768c8de3402bdd51ce2bb",
          "sha256": "10d2fecb2ce42fcd392a28a75594709145e19a6be986dd33fa9e770f79b72a21"
        },
        "downloads": -1,
        "filename": "sun_core-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05f64e8367e768c8de3402bdd51ce2bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37802,
        "upload_time": "2022-05-25T16:23:50",
        "upload_time_iso_8601": "2022-05-25T16:23:50.768834Z",
        "url": "https://files.pythonhosted.org/packages/c9/06/1bf96a3d27444f2aad13e8b5fa153e0c8e73acd8a60ad09130e584472045/sun_core-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9746c6cbaaafefcb8be8d069dbecdb2ff02f8fe19aa5b58ec2293abe55f2f4d4",
          "md5": "be8bf1b7b9ee210fe790c84bf868a2cd",
          "sha256": "714cee752247ea04b10531f8d5f0692caa2f2c2ec40ae53d64bbf22b8a4f6b91"
        },
        "downloads": -1,
        "filename": "sun_core-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be8bf1b7b9ee210fe790c84bf868a2cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37710,
        "upload_time": "2022-05-25T16:34:36",
        "upload_time_iso_8601": "2022-05-25T16:34:36.106123Z",
        "url": "https://files.pythonhosted.org/packages/97/46/c6cbaaafefcb8be8d069dbecdb2ff02f8fe19aa5b58ec2293abe55f2f4d4/sun_core-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6535092fef12a52bcc3250d90c47dd1791caefcb7984796f0d349c9599c6bb2c",
          "md5": "2476ea5851e3b15fe018ff9ebdf799f4",
          "sha256": "5ecdbef2c6059ce397e6eb3e50284f6838ccec241ecaf6686c1b2f69b684fadf"
        },
        "downloads": -1,
        "filename": "sun_core-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2476ea5851e3b15fe018ff9ebdf799f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38524,
        "upload_time": "2022-05-30T07:16:22",
        "upload_time_iso_8601": "2022-05-30T07:16:22.803913Z",
        "url": "https://files.pythonhosted.org/packages/65/35/092fef12a52bcc3250d90c47dd1791caefcb7984796f0d349c9599c6bb2c/sun_core-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6535092fef12a52bcc3250d90c47dd1791caefcb7984796f0d349c9599c6bb2c",
        "md5": "2476ea5851e3b15fe018ff9ebdf799f4",
        "sha256": "5ecdbef2c6059ce397e6eb3e50284f6838ccec241ecaf6686c1b2f69b684fadf"
      },
      "downloads": -1,
      "filename": "sun_core-0.1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2476ea5851e3b15fe018ff9ebdf799f4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 38524,
      "upload_time": "2022-05-30T07:16:22",
      "upload_time_iso_8601": "2022-05-30T07:16:22.803913Z",
      "url": "https://files.pythonhosted.org/packages/65/35/092fef12a52bcc3250d90c47dd1791caefcb7984796f0d349c9599c6bb2c/sun_core-0.1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}