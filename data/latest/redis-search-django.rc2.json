{
  "info": {
    "author": "Maksudul Haque",
    "author_email": "saad.mk112@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# redis-search-django\n\n[![Pypi Version](https://img.shields.io/pypi/v/redis-search-django.svg?style=flat-square)](https://pypi.org/project/redis-search-django/)\n[![Supported Python Versions](https://img.shields.io/pypi/pyversions/redis-search-django?style=flat-square)](https://pypi.org/project/redis-search-django/)\n[![Supported Django Versions](https://img.shields.io/pypi/frameworkversions/django/redis-search-django?color=darkgreen&style=flat-square)](https://pypi.org/project/redis-search-django/)\n[![License](https://img.shields.io/github/license/saadmk11/redis-search-django?style=flat-square)](https://github.com/saadmk11/redis-search-django/blob/main/LICENSE)\n\n![Django Tests](https://img.shields.io/github/workflow/status/saadmk11/redis-search-django/Django%20Tests?label=Test&style=flat-square)\n![Codecov](https://img.shields.io/codecov/c/github/saadmk11/redis-search-django?style=flat-square&token=ugjHXbEKib)\n![pre-commit.ci](https://img.shields.io/badge/pre--commit.ci-enabled-brightgreen?logo=pre-commit&logoColor=white&style=flat-square)\n![Changelog-CI](https://img.shields.io/github/workflow/status/saadmk11/redis-search-django/Changelog%20CI?label=Changelog%20CI&style=flat-square)\n![Code Style](https://img.shields.io/badge/Code%20Style-Black-black?style=flat-square)\n\n# About\n\nA Django package that provides **auto indexing** and **searching** capabilities for Django model instances using **[RediSearch](https://redis.io/docs/stack/search/)**.\n\n# Features\n\n- Management Command to create, update and populate the RediSearch Index.\n- Auto Index on Model object Create, Update and Delete.\n- Auto Index on Related Model object Add, Update, Remove and Delete.\n- Easy to create Document classes (Uses Django Model Form Class like structure).\n- Index nested models (e.g: `OneToOneField`, `ForeignKey` and `ManyToManyField`).\n- Search documents using `redis-om`.\n- Search Result Pagination.\n- Search Result Sorting.\n- RediSearch Result to Django QuerySet.\n- Faceted Search.\n\n# Requirements\n\n- Python: 3.7, 3.8, 3.9, 3.10\n- Django: 3.2, 4.0, 4.1\n- redis-om: >= 0.0.27\n\n# Redis\n\n## Downloading Redis\n\nThe latest version of Redis is available from [Redis.io](https://redis.io/). You can also install Redis with your operating system's package manager.\n\n## RediSearch and RedisJSON\n\n`redis-search-django` relies on the [RediSearch](https://redis.io/docs/stack/search/) and [RedisJSON](https://redis.io/docs/stack/json/) Redis modules to support rich queries and embedded models.\nYou need these Redis modules to use `redis-search-django`.\n\nThe easiest way to run these Redis modules during local development is to use the [redis-stack](https://hub.docker.com/r/redis/redis-stack) Docker image.\n\n## Docker Compose\n\nThere is a `docker-compose.yaml` file provided in the project's root directory.\nThis file will run Redis with RedisJSON and RediSearch modules during development.\n\nRun the following command to start the Redis container:\n\n```bash\ndocker compose up -d\n```\n\n# Example Project\n\nThere is an example project available at [Example Project](https://github.com/saadmk11/redis-search-django/tree/main/example).\n\n\n# Documentation\n\n## Installation\n\n```bash\npip install redis-search-django\n```\n\nThen add `redis_search_django` to your `INSTALLED_APPS`:\n\n```bash\nINSTALLED_APPS = [\n    ...\n    'redis_search_django',\n]\n```\n\n## Usage\n\n### Document Types\n\nThere are **3 types** of documents class available:\n\n- **JsonDocument:** This uses `RedisJSON` to store the document. If you want to use Embedded Documents (Required For `OneToOneField`, `ForeignKey` and `ManyToManyField`) then use `JsonDocument`.\n- **EmbeddedJsonDocument:** If the document will be embedded inside another document class then use this. Embedded Json Documents are used for `OneToOneField`, `ForeignKey` and `ManyToManyField` or any types of nested documents.\n- **HashDocument:** This uses `RedisHash` to store the documents. It can not be used for nested documents.\n\n### Creating Document Classes\n\nYou need to inherit from The Base Document Classes mentioned above to build a document class.\n\n#### Simple Example\n\n**1. For Django Model:**\n\n```python\n# models.py\n\nfrom django.db import models\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=30)\n    slug = models.SlugField(max_length=30)\n\n    def __str__(self) -> str:\n        return self.name\n```\n\n**2. You can create a document class like this:**\n\n**Note:** Document classes must be stored in `documents.py` file.\n\n```python\n# documents.py\n\nfrom redis_search_django.documents import JsonDocument\n\nfrom .models import Category\n\n\nclass CategoryDocument(JsonDocument):\n    class Django:\n        model = Category\n        fields = [\"name\", \"slug\"]\n```\n\n**3. Run Index Django Management Command to create the index on Redis:**\n\n```bash\npython manage.py index\n```\n\n**Note:** This will also populate the index with existing data from the database\n\nNow category objects will be indexed on create/update/delete.\n\n#### More Complex Example\n\n**1. For Django Models:**\n\n```python\n# models.py\n\nfrom django.db import models\n\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=30)\n\n    def __str__(self) -> str:\n        return self.name\n\n\nclass Vendor(models.Model):\n    name = models.CharField(max_length=30)\n    email = models.EmailField()\n    establishment_date = models.DateField()\n\n    def __str__(self) -> str:\n        return self.name\n\n\nclass Product(models.Model):\n    name = models.CharField(max_length=256)\n    description = models.TextField(blank=True)\n    vendor = models.OneToOneField(Vendor, on_delete=models.CASCADE)\n    tags = models.ManyToManyField(Tag, blank=True)\n    price = models.DecimalField(max_digits=6, decimal_places=2)\n\n    def __str__(self) -> str:\n        return self.name\n```\n\n**2. You can create a document classes like this:**\n\n**Note:** Document classes must be stored in `documents.py` file.\n\n```python\n# documents.py\n\nfrom typing import List\n\nfrom django.db import models\nfrom redis_om import Field\n\nfrom redis_search_django.documents import EmbeddedJsonDocument, JsonDocument\n\nfrom .models import Product, Tag, Vendor\n\n\nclass TagDocument(EmbeddedJsonDocument):\n    custom_field: str = Field(index=True, full_text_search=True)\n\n    class Django:\n        model = Tag\n        # Model Fields\n        fields = [\"name\"]\n\n    @classmethod\n    def prepare_custom_field(cls, obj):\n        return \"CUSTOM FIELD VALUE\"\n\n\nclass VendorDocument(EmbeddedJsonDocument):\n    class Django:\n        model = Vendor\n        # Model Fields\n        fields = [\"name\", \"establishment_date\"]\n\n\nclass ProductDocument(JsonDocument):\n    # OnetoOneField, with null=False\n    vendor: VendorDocument\n    # ManyToManyField\n    tags: List[TagDocument]\n\n    class Django:\n        model = Product\n        # Model Fields\n        fields = [\"name\", \"description\", \"price\"]\n        # Related Model Options\n        related_models = {\n            Vendor: {\n                \"related_name\": \"product\",\n                \"many\": False,\n            },\n            Tag: {\n                \"related_name\": \"product_set\",\n                \"many\": True,\n            },\n        }\n\n    @classmethod\n    def get_queryset(cls) -> models.QuerySet:\n        \"\"\"Override Queryset to filter out available products.\"\"\"\n        return super().get_queryset().filter(available=True)\n\n    @classmethod\n    def prepare_name(cls, obj):\n        \"\"\"Use this to update field value.\"\"\"\n        return obj.name.upper()\n```\n\n**Note:**\n\n- You can not inherit from `HashDocument` for documents that include nested fields.\n- You need to inherit from `EmbeddedJsonDocument` for document classes that will be embedded inside another document class.\n- You need to explicitly add `OneToOneField`, `ForeignKey` or `ManyToManyField` (e.g: `tags: List[TagDocument]`) with an embedded document class if you want to index them.\n  you can not add it in the `Django.fields` option.\n- For `related_models` option, you need to specify the fields `related_name` and if it is a `ManyToManyField` or a `ForeignKey` Field then specify `\"many\": True`.\n- `related_models` will be used when a related object is saved that contributes to the document.\n- You can define `prepare_{field_name}` method to update the value of a field before indexing.\n- If it is a custom field (not a model field) you must define a `prepare_{field_name}` method that returns the value of the field.\n- You can override `get_queryset` method to provide more filtering. This will be used while indexing a queryset.\n- Field names must match model field names or define a `prepare_{field_name}` method.\n\n\n**3. Run Index Django Management Command to create the index on Redis:**\n\n```bash\npython manage.py index\n```\n\n**Note:** This will also populate the index with existing data from the database\n\n\n### Management Command\n\nThis package comes with `index` management command that can be used to index all the model instances to Redis index if it has a Document class defined.\n\n**Note:** Make sure that Redis is running before running the command.\n\nRun the following command to index **all** models that have Document classes defined:\n\n```bash\npython manage.py index\n```\n\nYou can use `--migrate-only` option to **only** update the **index schema**.\n\n```bash\npython manage.py index --migrate-only\n```\n\nYou can use `--models` to **specify** which models to index (models must have a Document class defined to be indexed).\n\n```bash\npython manage.py index --models app_name.ModelName app_name2.ModelName2\n```\n\n### Views\n\nYou can use the `redis_search_django.mixin.RediSearchListViewMixin` with a Django Generic View to search for documents.\n`RediSearchPaginator` which helps paginate `ReadiSearch` results is also added to this mixin.\n\n#### Example\n\n```python\n# views.py\n\nfrom django.utils.functional import cached_property\nfrom django.views.generic import ListView\nfrom redis.commands.search import reducers\n\nfrom redis_search_django.mixins import RediSearchListViewMixin\n\nfrom .documents import ProductDocument\nfrom .models import Product\n\n\nclass SearchView(RediSearchListViewMixin, ListView):\n    paginate_by = 20\n    model = Product\n    template_name = \"core/search.html\"\n    document_class = ProductDocument\n\n    @cached_property\n    def search_query_expression(self):\n        query = self.request.GET.get(\"query\")\n        query_expression = None\n\n        if query:\n            query_expression = (\n                self.document_class.name % query\n                | self.document_class.description % query\n            )\n\n        return query_expression\n\n    @cached_property\n    def sort_by(self):\n        return self.request.GET.get(\"sort\")\n\n    def facets(self):\n        if self.search_query_expression:\n            request = self.document_class.build_aggregate_request(\n                self.search_query_expression\n            )\n        else:\n            request = self.document_class.build_aggregate_request()\n\n        result = self.document_class.aggregate(\n            request.group_by(\n                [\"@tags_name\"],\n                reducers.count().alias(\"count\"),\n            )\n        )\n        return result\n```\n\n### Search\n\nThis package uses `redis-om` to search for documents.\n\n#### Example\n\n```python\nfrom .documents import ProductDocument\n\n\ncategories = [\"category1\", \"category2\"]\ntags = [\"tag1\", \"tag2\"]\n\n# Search For Products That Match The Search Query (name or description)\nquery_expression = (\n    ProductDocument.name % \"Some search query\"\n    | ProductDocument.description % \"Some search query\"\n)\n\n# Search For Products That Match The Price Range\nquery_expression = (\n    ProductDocument.price >= float(10) & ProductDocument.price <= float(100)\n)\n\n# Search for Products that include following Categories\nquery_expression = ProductDocument.category.name << [\"category1\", \"category2\"]\n\n# Search for Products that include following Tags\nquery_expression = ProductDocument.tags.name << [\"tag1\", \"tag2\"]\n\n# Query expression can be passed on the `find` method\nresult = ProductDocument.find(query_expression).sort_by(\"-price\").execute()\n```\n\nFor more details checkout [redis-om docs](https://github.com/redis/redis-om-python/blob/main/docs/getting_started.md)\n\n### RediSearch Aggregation / Faceted Search\n\n`redis-om` does not support faceted search (RediSearch Aggregation). So this package uses `redis-py` to do faceted search.\n\n#### Example\n\n```python\nfrom redis.commands.search import reducers\n\nfrom .documents import ProductDocument\n\n\nquery_expression = (\n    ProductDocument.name % \"Some search query\"\n    | ProductDocument.description % \"Some search query\"\n)\n\n# First we need to build the aggregation request\nrequest1 = ProductDocument.build_aggregate_request(query_expression)\nrequest2 = ProductDocument.build_aggregate_request(query_expression)\n\n# Get the number of products for each category\nProductDocument.aggregate(\n    request1.group_by(\n        [\"@category_name\"],\n        reducers.count().alias(\"count\"),\n    )\n)\n# >> [{\"category_name\": \"Shoes\", \"count\": \"112\"}, {\"category_name\": \"Cloths\", \"count\": \"200\"}]\n\n\n# Get the number of products for each tag\nProductDocument.aggregate(\n    request2.group_by(\n        [\"@tags_name\"],\n        reducers.count().alias(\"count\"),\n    )\n)\n# >> [{\"tags_name\": \"Blue\", \"count\": \"14\"}, {\"tags_name\": \"Small\", \"count\": \"57\"}]\n```\n\nFor more details checkout [redis-py docs](https://redis.readthedocs.io/en/stable/examples/search_json_examples.html?highlight=aggregate#Aggregation) and\n[RediSearch Aggregation docs](https://redis.io/docs/stack/search/reference/aggregations/)\n\n### Settings\n\n#### Environment Variables\n\n- **`REDIS_OM_URL`** (Default: `redis://localhost:6379`): This environment variable follows the `redis-py` URL format. If you are using external redis server\nYou need to set this variable with the URL of the redis server following this pattern: `redis://[[username]:[password]]@[host]:[post]/[database number]`\n\n**Example:** `redis://redis_user:password@some.other.part.cloud.redislabs.com:6379/0`\n\nFor more details checkout [redis-om docs](https://github.com/redis/redis-om-python/blob/main/docs/getting_started.md#setting-the-redis-url-environment-variable)\n\n\n#### Django Document Options\n\nYou can add these options on the `Django` class of each Document class:\n\n```python\n# documents.py\n\nfrom redis_search_django.documents import JsonDocument\n\nfrom .models import Category, Product, Tag, Vendor\n\n\nclass ProductDocument(JsonDocument):\n    class Django:\n        model = Product\n        fields = [\"name\", \"description\", \"price\", \"created_at\"]\n        select_related_fields = [\"vendor\", \"category\"]\n        prefetch_related_fields = [\"tags\"]\n        auto_index = True\n        related_models = {\n            Vendor: {\n                \"related_name\": \"product\",\n                \"many\": False,\n            },\n            Category: {\n                \"related_name\": \"product_set\",\n                \"many\": True,\n            },\n            Tag: {\n                \"related_name\": \"product_set\",\n                \"many\": True,\n            },\n        }\n```\n\n- **`model`** (Required): Django Model class to index.\n- **`auto_index`** (Default: `True`, Optional): If True, the model instances will be indexed on create/update/delete.\n- **`fields`** (Default: `[]`, Optional): List of model fields to index. (Do not add `OneToOneField`, `ForeignKey` or `ManyToManyField` here. These need to be explicitly added to the Document class using `EmbeddedJsonDocument`.)\n- **`select_related_fields`** (Default: `[]`, Optional): List of fields to use on `queryset.select_related()`.\n- **`prefetch_related_fields`** (Default: `[]`, Optional): List of fields to use on `queryset.prefetch_related()`.\n- **`related_models`** (Default: `{}`, Optional): Dictionary of related models.\n  You need to specify the fields `related_name` and if it is a `ManyToManyField` or a `ForeignKey` Field then specify `\"many\": True`.\n  These are used to update the document data if any of the related model instances are updated.\n  `related_models` will be used when a related object is saved/added/removed/deleted that contributes to the document.\n\nFor `redis-om` specific options checkout [redis-om docs](https://github.com/redis/redis-om-python/blob/main/docs/models.md)\n\n#### Global Options\n\nYou can add these options to your Django `settings.py` File:\n\n- **`REDIS_SEARCH_AUTO_INDEX`** (Default: `True`): Enable or Disable Auto Index when model instance is created/updated/deleted for all document classes.\n\n\n# Example Application Screenshot\n\n![RediSearch Django](https://user-images.githubusercontent.com/24854406/185760315-4e12d02b-68a2-499a-a6d6-88d8162b5447.png)\n\n\n# License\n\nThe code in this project is released under the [MIT License](LICENSE).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/saadmk11/redis-search-django",
    "keywords": "Django,Redis,Search,RediSearch",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "redis-search-django",
    "package_url": "https://pypi.org/project/redis-search-django/",
    "platform": null,
    "project_url": "https://pypi.org/project/redis-search-django/",
    "project_urls": {
      "Homepage": "https://github.com/saadmk11/redis-search-django"
    },
    "release_url": "https://pypi.org/project/redis-search-django/0.1.0/",
    "requires_dist": [
      "django (>=3.2)",
      "redis-om (>=0.0.27)"
    ],
    "requires_python": ">=3.7",
    "summary": "Django Integration with Redis Search",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14823326,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ada14c3bb59ac01d19083478f00dbde7e40128c95739b93e1de00b5d6721d71",
          "md5": "edeea7d1a38787e1aa10f526331f293a",
          "sha256": "bc1498d2b32b3e99d72eae7b6b1d1695b3c667d0604d2654c9a250c52adb28ac"
        },
        "downloads": -1,
        "filename": "redis_search_django-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edeea7d1a38787e1aa10f526331f293a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12502,
        "upload_time": "2022-08-12T16:34:28",
        "upload_time_iso_8601": "2022-08-12T16:34:28.734249Z",
        "url": "https://files.pythonhosted.org/packages/9a/da/14c3bb59ac01d19083478f00dbde7e40128c95739b93e1de00b5d6721d71/redis_search_django-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee50974743999370a66befeb9ff95b0b7263a7c9e279483c19660c48cb4e377e",
          "md5": "d6d0b768464f1101fb1a2550f7facb47",
          "sha256": "d33bd74f2ad94d4b2cf38d2c43e5ee6b1b5e5c299d0409b2628fa333dfec848f"
        },
        "downloads": -1,
        "filename": "redis-search-django-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6d0b768464f1101fb1a2550f7facb47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10386,
        "upload_time": "2022-08-12T16:34:30",
        "upload_time_iso_8601": "2022-08-12T16:34:30.285202Z",
        "url": "https://files.pythonhosted.org/packages/ee/50/974743999370a66befeb9ff95b0b7263a7c9e279483c19660c48cb4e377e/redis-search-django-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c90694a9cb2caa3e1bacf5fec592c0922ac5ec42d333aaf6b1b218e9f5f314e6",
          "md5": "3a08b60c63e3ae2e24e403c2183b97cb",
          "sha256": "ccae23d3afa7bbcd911eea140f4b08893760584b9d00d6a3a8ad812df8ffbadf"
        },
        "downloads": -1,
        "filename": "redis_search_django-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a08b60c63e3ae2e24e403c2183b97cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18658,
        "upload_time": "2022-08-20T20:57:37",
        "upload_time_iso_8601": "2022-08-20T20:57:37.905780Z",
        "url": "https://files.pythonhosted.org/packages/c9/06/94a9cb2caa3e1bacf5fec592c0922ac5ec42d333aaf6b1b218e9f5f314e6/redis_search_django-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f93f4634a79a117a6ce0ee8da026501da5060853504b2ca7da9b1c7688d3030",
          "md5": "4ea02b88da0d5cd4a5422bc74dc98e85",
          "sha256": "47622d8398e77f78d1435e006243723652e9c625f5d56b6cfa202157eaedda16"
        },
        "downloads": -1,
        "filename": "redis-search-django-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4ea02b88da0d5cd4a5422bc74dc98e85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20734,
        "upload_time": "2022-08-20T20:57:39",
        "upload_time_iso_8601": "2022-08-20T20:57:39.224733Z",
        "url": "https://files.pythonhosted.org/packages/9f/93/f4634a79a117a6ce0ee8da026501da5060853504b2ca7da9b1c7688d3030/redis-search-django-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c90694a9cb2caa3e1bacf5fec592c0922ac5ec42d333aaf6b1b218e9f5f314e6",
        "md5": "3a08b60c63e3ae2e24e403c2183b97cb",
        "sha256": "ccae23d3afa7bbcd911eea140f4b08893760584b9d00d6a3a8ad812df8ffbadf"
      },
      "downloads": -1,
      "filename": "redis_search_django-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a08b60c63e3ae2e24e403c2183b97cb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18658,
      "upload_time": "2022-08-20T20:57:37",
      "upload_time_iso_8601": "2022-08-20T20:57:37.905780Z",
      "url": "https://files.pythonhosted.org/packages/c9/06/94a9cb2caa3e1bacf5fec592c0922ac5ec42d333aaf6b1b218e9f5f314e6/redis_search_django-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f93f4634a79a117a6ce0ee8da026501da5060853504b2ca7da9b1c7688d3030",
        "md5": "4ea02b88da0d5cd4a5422bc74dc98e85",
        "sha256": "47622d8398e77f78d1435e006243723652e9c625f5d56b6cfa202157eaedda16"
      },
      "downloads": -1,
      "filename": "redis-search-django-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4ea02b88da0d5cd4a5422bc74dc98e85",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 20734,
      "upload_time": "2022-08-20T20:57:39",
      "upload_time_iso_8601": "2022-08-20T20:57:39.224733Z",
      "url": "https://files.pythonhosted.org/packages/9f/93/f4634a79a117a6ce0ee8da026501da5060853504b2ca7da9b1c7688d3030/redis-search-django-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}