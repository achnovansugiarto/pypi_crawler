{
  "info": {
    "author": "Soren Kristiansen",
    "author_email": "sorenlind@mac.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# transferit\n\nThis repository contains a Python package that can help you train an image\nclassification model using transfer learning and serve the model with TensorFlow Serving\nand Docker.\n\nThe repo contains sample images you can use to train the model to tell a certain kind of\ncollectible playing card, namely _Magic: The Gathering_ cards from other objects. These,\nhowever, only serve as an example. You can easily use the transferit package to train\nmodels on your own data.\n\n## Installation\n\nInstall from PyPI:\n\n```shell\npip3 install transferit\n```\n\nTo get the example data and run the examples, you will need to check out the repository:\n\n```shell\ngit clone git@github.com:sorenlind/transferit.git\n```\n\n## Quick start\n\n1. Clone the repo\n2. Install the package either from source or from PyPI\n3. Download the [Caltech 256\n   dataset](http://www.vision.caltech.edu/Image_Datasets/Caltech256/) and store the\n   `.tar` file inside the `data/raw` folder.\n4. Run the `01 Create model.ipynb` notebook in the `notebooks` folder.\n5. Build the docker image: `docker build -t transferit .`\n6. Start the container: `docker run -t --rm -p 8501:8501 transferit`\n7. Run the `02 API Example usage.ipynb` notebook in the `notebooks` folder.\n\n## Introduction\n\nThe package provides a command line application, `transferit` which can help you prepare\ndate for training and evaluation as well as training the model. Finally, it can also\nwrap or package the trained model in way that makes it compatible with TensorFlow\nServing. The `transferit` command has four sub commands as briefly explained below:\n\n1. `create-class`: Copy and resize images in a specified folder (and its subfolders) to\n   another folder. This is handy if, for example you are training a binary image\n   classifier and you have a library of various kinds of images which you will use for\n   the negative class and a smaller set of custom images that you will use for the\n   positive class. Running this command twice (once for the positive and once for the\n   negative) class can create a complete data set for you.\n2. `split`: Creates a train / dev split using a dataset already prepared using the\n   `create-class` sub command.\n3. `train`: Train the actual model using the training and dev data created using the\n   `split` sub command.\n4. `wrap`: Wrap a trained model to make it compatible with TensorFlow Serving and ready\n   to be copied to a docker image.\n\nIn addition to running the command line application you can also call the relevant\nfunctions from your Python code such as a Jupyter notebook. The `notebooks` folder\ncontains a notebook `01 Create model.ipynb` which runs through the entire process of\npreparing data, training a model and wrapping it for serving. Note that before you can\nrun the notebook, you will have to download the [Caltech 256\ndataset](http://www.vision.caltech.edu/Image_Datasets/Caltech256/) and store the `.tar`\nfile inside the `data/raw` folder.\n\n### Preparing images\n\n```shell\ntransferit create-class ./raw/256_ObjectCategories/ ./prepared/full/negative --n-max 3000\ntransferit create-class ./raw/cards/ ./prepared/full/positive\n```\n\n### Creating train / dev split\n\n```shell\ntransferit split ./prepared/full/ ./prepared/\n```\n\n### Training model\n\n```shell\n transferit train ./prepared/train/ ./prepared/dev/ ./models/naked/\n```\n\n### Wrapping up model for TF Serving\n\n```shell\ntransferit wrap models/naked/models_best_loss.hdf5 ./models/wrapped/00000001/ -c Negative Positive\n```\n\n### Creating Dockerfile from the template\n\nThe repository contains a template for a Dockerfile called `Dockerfile.template`. You\ncan create a copy of this simply called `Dockerfile` and edit it to match your setup. If\nyou have been running the Jupyter notebook to train and wrap a model, you do not need to\nmake any changes to the Dockerfile.\n\n### Serving model locally using Docker\n\nBuild the image:\n\n```shell\ndocker build -t transferit .\n```\n\nOnce you have built the image, you can serve the model in a container as follows:\n\n```\ndocker run -t --rm -p 8501:8501 transferit\n```\n\nOnce the container is running, you can access it as shown in the example below. The\n`notebooks` folder contains a notebook called `02 API Example usage.ipynb` which has\nsimilar code and classifies two images from the dev dataset.\n\n```python\nimport base64\nimport json\nimport requests\n\nURL = \"http://localhost:8501/v1/models/transferit:classify\"\nHEADERS = {\"content-type\": \"application/json\"}\n\nwith open(img_filename, mode=\"rb\") as file:\n    img = file.read()\njpeg_bytes = base64.b64encode(img).decode(\"utf-8\")\n\nbody = {\n    \"signature_name\": \"serving_default\",\n    \"examples\": [\n        {\n            \"x\": {\"b64\": jpeg_bytes},\n        }\n    ],\n}\n\njson_response = requests.post(URL, data=json.dumps(body), headers=HEADERS)\njson_response.status_code\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "transferit",
    "package_url": "https://pypi.org/project/transferit/",
    "platform": "",
    "project_url": "https://pypi.org/project/transferit/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/transferit/0.1.0/",
    "requires_dist": [
      "tf-nightly",
      "matplotlib",
      "requests",
      "scikit-learn",
      "tqdm",
      "black ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "jupyter ; extra == 'dev'",
      "lxml-stubs ; extra == 'dev'",
      "matplotlib ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pycodestyle ; extra == 'dev'",
      "pydocstyle ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "rope ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "coverage ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "tox ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Train a model using transfer learning and serve it using TF Serving.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10199557,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8efeb7ee6c1d30cf9f5a8b61b9d246891071af5ce03d7f8b47ea8db53df5112f",
          "md5": "94308764ce95e37d7900e7e1380ebc95",
          "sha256": "cbffb39e68a69e9c280418900d8938548b0f0f302000544a3c0503b7b5114aaf"
        },
        "downloads": -1,
        "filename": "transferit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94308764ce95e37d7900e7e1380ebc95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12561,
        "upload_time": "2021-04-28T20:10:55",
        "upload_time_iso_8601": "2021-04-28T20:10:55.799071Z",
        "url": "https://files.pythonhosted.org/packages/8e/fe/b7ee6c1d30cf9f5a8b61b9d246891071af5ce03d7f8b47ea8db53df5112f/transferit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6edce4ba434d83d0557c0b20ed52edbab03d728e2d19223081431ba6baa31ddb",
          "md5": "a7d97032e1cad8e93197acb8294c22cb",
          "sha256": "8613725f81ead47e087ffc3678586c5a5fd8759749d76fda87e69c4043ff3817"
        },
        "downloads": -1,
        "filename": "transferit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a7d97032e1cad8e93197acb8294c22cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13133,
        "upload_time": "2021-04-28T20:10:57",
        "upload_time_iso_8601": "2021-04-28T20:10:57.112839Z",
        "url": "https://files.pythonhosted.org/packages/6e/dc/e4ba434d83d0557c0b20ed52edbab03d728e2d19223081431ba6baa31ddb/transferit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8efeb7ee6c1d30cf9f5a8b61b9d246891071af5ce03d7f8b47ea8db53df5112f",
        "md5": "94308764ce95e37d7900e7e1380ebc95",
        "sha256": "cbffb39e68a69e9c280418900d8938548b0f0f302000544a3c0503b7b5114aaf"
      },
      "downloads": -1,
      "filename": "transferit-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "94308764ce95e37d7900e7e1380ebc95",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12561,
      "upload_time": "2021-04-28T20:10:55",
      "upload_time_iso_8601": "2021-04-28T20:10:55.799071Z",
      "url": "https://files.pythonhosted.org/packages/8e/fe/b7ee6c1d30cf9f5a8b61b9d246891071af5ce03d7f8b47ea8db53df5112f/transferit-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6edce4ba434d83d0557c0b20ed52edbab03d728e2d19223081431ba6baa31ddb",
        "md5": "a7d97032e1cad8e93197acb8294c22cb",
        "sha256": "8613725f81ead47e087ffc3678586c5a5fd8759749d76fda87e69c4043ff3817"
      },
      "downloads": -1,
      "filename": "transferit-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a7d97032e1cad8e93197acb8294c22cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13133,
      "upload_time": "2021-04-28T20:10:57",
      "upload_time_iso_8601": "2021-04-28T20:10:57.112839Z",
      "url": "https://files.pythonhosted.org/packages/6e/dc/e4ba434d83d0557c0b20ed52edbab03d728e2d19223081431ba6baa31ddb/transferit-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}