{
  "info": {
    "author": "Michael Williamson",
    "author_email": "mike@zwobble.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "spur.py: Run commands and manipulate files locally or over SSH using the same interface\n=======================================================================================\n\nTo run echo locally:\n\n.. code-block:: python\n\n    import spur\n\n    shell = spur.LocalShell()\n    result = shell.run([\"echo\", \"-n\", \"hello\"])\n    print(result.output) # prints hello\n\nExecuting the same command over SSH uses the same interface -- the only\ndifference is how the shell is created:\n\n.. code-block:: python\n\n    import spur\n\n    shell = spur.SshShell(hostname=\"localhost\", username=\"bob\", password=\"password1\")\n    with shell:\n        result = shell.run([\"echo\", \"-n\", \"hello\"])\n    print(result.output) # prints hello\n\nInstallation\n------------\n\n``$ pip install spur``\n\nShell constructors\n------------------\n\nLocalShell\n~~~~~~~~~~\n\nTakes no arguments:\n\n.. code-block:: sh\n\n    spur.LocalShell()\n\nSshShell\n~~~~~~~~\n\nRequires a hostname. Also requires some combination of a username,\npassword and private key, as necessary to authenticate:\n\n.. code-block:: python\n\n    # Use a password\n    spur.SshShell(\n        hostname=\"localhost\",\n        username=\"bob\",\n        password=\"password1\"\n    )\n    # Use a private key\n    spur.SshShell(\n        hostname=\"localhost\",\n        username=\"bob\",\n        private_key_file=\"path/to/private.key\"\n    )\n    # Use a port other than 22\n    spur.SshShell(\n        hostname=\"localhost\",\n        port=50022,\n        username=\"bob\",\n        password=\"password1\"\n    )\n\nOptional arguments:\n\n* ``connect_timeout`` -- a timeout in seconds for establishing an SSH\n  connection. Defaults to 60 (one minute).\n\n* ``missing_host_key`` -- by default, an error is raised when a host\n  key is missing. One of the following values can be used to change the\n  behaviour when a host key is missing:\n   \n  - ``spur.ssh.MissingHostKey.raise_error`` -- raise an error\n  - ``spur.ssh.MissingHostKey.warn`` -- accept the host key and log a\n    warning\n  - ``spur.ssh.MissingHostKey.accept`` -- accept the host key\n\n* ``shell_type`` -- the type of shell used by the host. Defaults to\n  ``spur.ssh.ShellTypes.sh``, which should be appropriate for most Linux\n  distributions. If the host uses a different shell, such as simpler shells\n  often found on embedded systems, try changing ``shell_type`` to a more\n  appropriate value, such as ``spur.ssh.ShellTypes.minimal``. The following\n  shell types are currently supported:\n  \n  - ``spur.ssh.ShellTypes.sh`` -- the Bourne shell. Supports all features.\n  \n  - ``spur.ssh.ShellTypes.minimal`` -- a minimal shell. Several features\n    are unsupported:\n    \n    - Non-existent commands will not raise ``spur.NoSuchCommandError``.\n    \n    - The following arguments to ``spawn`` and ``run`` are unsupported unless\n      set to their default values:\n      ``cwd``, ``update_env``, and ``store_pid``.\n\n* ``look_for_private_keys`` -- by default, Spur will search for discoverable\n  private key files in ``~/.ssh/``.\n  Set to ``False`` to disable this behaviour.\n  \n* ``load_system_host_keys`` -- by default, Spur will attempt to read host keys\n  from the user's known hosts file, as used by OpenSSH, and no exception will\n  be raised if the file can't be read.\n  Set to ``False`` to disable this behaviour.\n\n* ``sock`` -- an open socket or socket-like object to use for communication to\n  the target host. For instance:\n\n  .. code-block:: python\n\n      sock=paramiko.proxy.ProxyCommand(\n          \"ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"\n          \"bob@proxy.example.com nc -q0 target.example.com 22\"\n      )\n\n  Examples of socket-like objects include:\n\n  * |paramiko.Channel|_\n  * |paramiko.proxy.ProxyCommand|_\n    (`unsupported in Python 3 <https://github.com/paramiko/paramiko/issues/673>`_ as of writing)\n\n.. |paramiko.Channel| replace:: ``paramiko.Channel``\n.. _paramiko.Channel: http://docs.paramiko.org/en/latest/api/channel.html\n\n.. |paramiko.proxy.ProxyCommand| replace:: ``paramiko.proxy.ProxyCommand``\n.. _paramiko.proxy.ProxyCommand: http://docs.paramiko.org/en/latest/api/proxy.html\n\nShell interface\n---------------\n\nrun(command, cwd, update\\_env, store\\_pid, allow\\_error, stdout, stderr, encoding)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRun a command and wait for it to complete. The command is expected to be\na list of strings. Returns an instance of ``ExecutionResult``.\n\n.. code-block:: python\n\n    result = shell.run([\"echo\", \"-n\", \"hello\"])\n    print(result.output) # prints hello\n\nNote that arguments are passed without any shell expansion. For\ninstance, ``shell.run([\"echo\", \"$PATH\"])`` will print the literal string\n``$PATH`` rather than the value of the environment variable ``$PATH``.\n\nRaises ``spur.NoSuchCommandError`` if trying to execute a non-existent\ncommand.\n\nOptional arguments:\n\n* ``cwd`` -- change the current directory to this value before\n  executing the command.\n* ``update_env`` -- a ``dict`` containing environment variables to be\n  set before running the command. If there's an existing environment\n  variable with the same name, it will be overwritten. Otherwise, it is\n  unchanged.\n* ``store_pid`` -- if set to ``True`` when calling ``spawn``, store the\n  process id of the spawned process as the attribute ``pid`` on the\n  returned process object. Has no effect when calling ``run``.\n* ``allow_error`` -- ``False`` by default. If ``False``, an exception\n  is raised if the return code of the command is anything but 0. If\n  ``True``, a result is returned irrespective of return code.\n* ``stdout`` -- if not ``None``, anything the command prints to\n  standard output during its execution will also be written to\n  ``stdout`` using ``stdout.write``.\n* ``stderr`` -- if not ``None``, anything the command prints to\n  standard error during its execution will also be written to\n  ``stderr`` using ``stderr.write``.\n* ``encoding`` -- if set, this is used to decode any output.\n  By default, any output is treated as raw bytes.\n  If set, the raw bytes are decoded before writing to\n  the passed ``stdout`` and ``stderr`` arguments (if set)\n  and before setting the output attributes on the result.\n\n``shell.run(*args, **kwargs)`` should behave similarly to\n``shell.spawn(*args, **kwargs).wait_for_result()``\n\nspawn(command, cwd, update\\_env, store\\_pid, allow\\_error, stdout, stderr, encoding)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBehaves the same as ``run`` except that ``spawn`` immediately returns an\nobject representing the running process.\n\nRaises ``spur.NoSuchCommandError`` if trying to execute a non-existent\ncommand.\n\nopen(path, mode=\"r\")\n~~~~~~~~~~~~~~~~~~~~\n\nOpen the file at ``path``. Returns a file-like object.\n\nBy default, files are opened in text mode.\nAppending `\"b\"` to the mode will open the file in binary mode.\n\nFor instance, to copy a binary file over SSH,\nassuming you already have an instance of ``SshShell``:\n\n.. code-block:: python\n\n    with ssh_shell.open(\"/path/to/remote\", \"rb\") as remote_file:\n        with open(\"/path/to/local\", \"wb\") as local_file:\n            shutil.copyfileobj(remote_file, local_file)\n\nProcess interface\n-----------------\n\nReturned by calls to ``shell.spawn``. Has the following attributes:\n\n* ``pid`` -- the process ID of the process. Only available if\n  ``store_pid`` was set to ``True`` when calling ``spawn``.\n\nHas the following methods:\n\n* ``is_running()`` -- return ``True`` if the process is still running,\n  ``False`` otherwise.\n* ``stdin_write(value)`` -- write ``value`` to the standard input of\n  the process.\n* ``wait_for_result()`` -- wait for the process to exit, and then\n  return an instance of ``ExecutionResult``. Will raise\n  ``RunProcessError`` if the return code is not zero and\n  ``shell.spawn`` was not called with ``allow_error=True``.\n* ``send_signal(signal)`` -- sends the process the signal ``signal``.\n  Only available if ``store_pid`` was set to ``True`` when calling\n  ``spawn``.\n\nClasses\n-------\n\nExecutionResult\n~~~~~~~~~~~~~~~\n\n``ExecutionResult`` has the following properties:\n\n* ``return_code`` -- the return code of the command\n* ``output`` -- a string containing the result of capturing stdout\n* ``stderr_output`` -- a string containing the result of capturing\n  stdout\n\nIt also has the following methods:\n\n* ``to_error()`` -- return the corresponding RunProcessError. This is\n  useful if you want to conditionally raise RunProcessError, for\n  instance:\n\n.. code-block:: python\n\n    result = shell.run([\"some-command\"], allow_error=True)\n    if result.return_code > 4:\n        raise result.to_error()\n\nRunProcessError\n~~~~~~~~~~~~~~~\n\nA subclass of ``RuntimeError`` with the same properties as\n``ExecutionResult``:\n\n* ``return_code`` -- the return code of the command\n* ``output`` -- a string containing the result of capturing stdout\n* ``stderr_output`` -- a string containing the result of capturing\n  stdout\n\nNoSuchCommandError\n~~~~~~~~~~~~~~~~~~\n\n``NoSuchCommandError`` has the following properties:\n\n* ``command`` -- the command that could not be found\n\nAPI stability\n-------------\n\nUsing the the terminology from `Semantic\nVersioning <http://semver.org/spec/v1.0.0.html>`_, if the version of\nspur is X.Y.Z, then X is the major version, Y is the minor version, and\nZ is the patch version.\n\nWhile the major version is 0, incrementing the patch version indicates a\nbackwards compatible change. For instance, if you're using 0.3.1, then\nit should be safe to upgrade to 0.3.2.\n\nIncrementing the minor version indicates a change in the API. This means\nthat any code using previous minor versions of spur may need updating\nbefore it can use the current minor version.\n\nUndocumented features\n~~~~~~~~~~~~~~~~~~~~~\n\nSome features are undocumented, and should be considered experimental.\nUse them at your own risk. They may not behave correctly, and their\nbehaviour and interface may change at any time.\n\nTroubleshooting\n---------------\n\nI get the error \"Connection refused\" when trying to connect to a virtual machine using a forwarded port on ``localhost``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTry using ``\"127.0.0.1\"`` instead of ``\"localhost\"`` as the hostname.\n\nI get the error \"Connection refused\" when trying to execute commands over SSH\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTry connecting to the machine using SSH on the command line with the\nsame settings. For instance, if you're using the code:\n\n.. code-block:: python\n\n    shell = spur.SshShell(\n            hostname=\"remote\",\n            port=2222,\n            username=\"bob\",\n            private_key_file=\"/home/bob/.ssh/id_rsa\"\n        )\n    with shell:\n        result = shell.run([\"echo\", \"hello\"])\n\nTry running:\n\n.. code-block:: sh\n\n    ssh bob@remote -p 2222 -i /home/bob/.ssh/id_rsa\n\nIf the ``ssh`` command succeeds, make sure that the arguments to\n``ssh.SshShell`` and the ``ssh`` command are the same. If any of the\narguments to ``ssh.SshShell`` are dynamically generated, try hard-coding\nthem to make sure they're set to the values you expect.\n\nI can't spawn or run commands over SSH\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you're having trouble spawning or running commands over SSH, try passing\n``shell_type=spur.ssh.ShellTypes.minimal`` as an argument to ``spur.SshShell``.\nFor instance:\n\n.. code-block:: python\n\n    import spur\n    import spur.ssh\n\n    spur.SshShell(\n        hostname=\"localhost\",\n        username=\"bob\",\n        password=\"password1\",\n        shell_type=spur.ssh.ShellTypes.minimal,\n    )\n\nThis makes minimal assumptions about the features that the host shell supports,\nand is especially well-suited to minimal shells found on embedded systems. If\nthe host shell is more fully-featured but only works with\n``spur.ssh.ShellTypes.minimal``, feel free to submit an issue.\n\nWhy don't shell features such as variables and redirection work?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCommands are run directly rather than through a shell.\nIf you want to use any shell features such as variables and redirection,\nthen you'll need to run those commands within an appropriate shell.\nFor instance:\n\n.. code-block:: python\n\n    shell.run([\"sh\", \"-c\", \"echo $PATH\"])\n    shell.run([\"sh\", \"-c\", \"ls | grep bananas\"])",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/mwilliamson/spur.py",
    "keywords": "shell subprocess process",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "spur.local",
    "package_url": "https://pypi.org/project/spur.local/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/spur.local/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/mwilliamson/spur.py"
    },
    "release_url": "https://pypi.org/project/spur.local/0.3.19/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Run commands and manipulate files locally",
    "version": "0.3.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2424912,
  "releases": {
    "0.3.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "998f296482ef8807764c0697f5355a3abeab04dcf58720fa2eb6018503ff9d40",
          "md5": "207b64ae12f091d485a6041f12b808fc",
          "sha256": "2aa7689c66198ac274e5c4531c4b6d60d11cf6d9140a8610404a05654df1c56f"
        },
        "downloads": -1,
        "filename": "spur.local-0.3.11.tar.gz",
        "has_sig": false,
        "md5_digest": "207b64ae12f091d485a6041f12b808fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10415,
        "upload_time": "2014-05-22T10:49:08",
        "upload_time_iso_8601": "2014-05-22T10:49:08.183621Z",
        "url": "https://files.pythonhosted.org/packages/99/8f/296482ef8807764c0697f5355a3abeab04dcf58720fa2eb6018503ff9d40/spur.local-0.3.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d68776c33b78ecb26493ce4c39a74a7329a8c42bca17a5659d148a2e50543fd",
          "md5": "650065fa160ea3855ed530349b4b608e",
          "sha256": "6350d7b825d1edc954683abe868cffd08eed8b30f4acdf5307ece5e943e49fa8"
        },
        "downloads": -1,
        "filename": "spur.local-0.3.19.tar.gz",
        "has_sig": false,
        "md5_digest": "650065fa160ea3855ed530349b4b608e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12193,
        "upload_time": "2016-10-26T20:49:24",
        "upload_time_iso_8601": "2016-10-26T20:49:24.639392Z",
        "url": "https://files.pythonhosted.org/packages/5d/68/776c33b78ecb26493ce4c39a74a7329a8c42bca17a5659d148a2e50543fd/spur.local-0.3.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "894c7115db19c4cc3fe4b031c6d6283ab7e755c0c8025909f997daa37369268b",
          "md5": "35dafeffe320642b1f41923ff8fd2aae",
          "sha256": "c08a65a3f28a14ad8cafbc9346bc409f80bcde87fb3e301796a4c2c0202e1d90"
        },
        "downloads": -1,
        "filename": "spur.local-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "35dafeffe320642b1f41923ff8fd2aae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9202,
        "upload_time": "2013-03-27T22:13:13",
        "upload_time_iso_8601": "2013-03-27T22:13:13.693335Z",
        "url": "https://files.pythonhosted.org/packages/89/4c/7115db19c4cc3fe4b031c6d6283ab7e755c0c8025909f997daa37369268b/spur.local-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d53db761c4e28a6d53ec8543dd279099f32d7d49f984d74d58f1cb3c7db73a9b",
          "md5": "e760f38c37af0448e20d1f917a40d651",
          "sha256": "ae7fd0a09721a03cc8aa65b93b80ee8da1851efe7ba51add1cf46cdc1d8178c2"
        },
        "downloads": -1,
        "filename": "spur.local-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e760f38c37af0448e20d1f917a40d651",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9309,
        "upload_time": "2013-10-11T18:11:50",
        "upload_time_iso_8601": "2013-10-11T18:11:50.416381Z",
        "url": "https://files.pythonhosted.org/packages/d5/3d/b761c4e28a6d53ec8543dd279099f32d7d49f984d74d58f1cb3c7db73a9b/spur.local-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23777d84789811f5906c808080bde32e808f6bd247a5db7dadbbde3acc249759",
          "md5": "18ee48c7087ecc10275bff0b3b293681",
          "sha256": "3b2d625d816e2a1bc9d8e657e6a0dc158c95837fd8ab4081d04d063ff401fa89"
        },
        "downloads": -1,
        "filename": "spur.local-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "18ee48c7087ecc10275bff0b3b293681",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9269,
        "upload_time": "2013-10-11T18:42:18",
        "upload_time_iso_8601": "2013-10-11T18:42:18.822328Z",
        "url": "https://files.pythonhosted.org/packages/23/77/7d84789811f5906c808080bde32e808f6bd247a5db7dadbbde3acc249759/spur.local-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3085062399b5936f8053cf26a57dcd39ebe8f0a1fcd887a9e1f94078e9505e6e",
          "md5": "084b7dd8f205185b2d17f5b4ecf2cce1",
          "sha256": "1aaa15471a1efeee2b35d87825e7d53b35999b58b1a242af62780bf12f02c16f"
        },
        "downloads": -1,
        "filename": "spur.local-0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "084b7dd8f205185b2d17f5b4ecf2cce1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9488,
        "upload_time": "2014-03-18T19:45:42",
        "upload_time_iso_8601": "2014-03-18T19:45:42.316790Z",
        "url": "https://files.pythonhosted.org/packages/30/85/062399b5936f8053cf26a57dcd39ebe8f0a1fcd887a9e1f94078e9505e6e/spur.local-0.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d68776c33b78ecb26493ce4c39a74a7329a8c42bca17a5659d148a2e50543fd",
        "md5": "650065fa160ea3855ed530349b4b608e",
        "sha256": "6350d7b825d1edc954683abe868cffd08eed8b30f4acdf5307ece5e943e49fa8"
      },
      "downloads": -1,
      "filename": "spur.local-0.3.19.tar.gz",
      "has_sig": false,
      "md5_digest": "650065fa160ea3855ed530349b4b608e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12193,
      "upload_time": "2016-10-26T20:49:24",
      "upload_time_iso_8601": "2016-10-26T20:49:24.639392Z",
      "url": "https://files.pythonhosted.org/packages/5d/68/776c33b78ecb26493ce4c39a74a7329a8c42bca17a5659d148a2e50543fd/spur.local-0.3.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}