{
  "info": {
    "author": "SPCL @ ETH Zurich",
    "author_email": "talbn@inf.ethz.ch",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![codecov](https://codecov.io/gh/spcl/pymlir/branch/master/graph/badge.svg)](https://codecov.io/gh/spcl/pymlir)\n\n\n# pyMLIR: Python Interface for the Multi-Level Intermediate Representation\n\npyMLIR is a full Python interface to parse, process, and output [MLIR](https://mlir.llvm.org/) files according to the\nsyntax described in the [MLIR documentation](https://github.com/llvm/llvm-project/tree/master/mlir/docs). pyMLIR \nsupports the basic dialects and can be extended with other dialects. It uses [Lark](https://github.com/lark-parser/lark)\nto parse the MLIR syntax, and mirrors the classes into Python classes. Custom dialects can also be implemented with a\nPython string-format-like syntax, or via direct parsing.\n\nNote that the tool *does not depend on LLVM or MLIR*. It can be installed and invoked directly from Python. \n\n## Instructions \n\n**How to install:** `pip install pymlir`\n\n**Requirements:** Python 3.6 or newer, and the requirements in `setup.py` or `requirements.txt`. To manually install the\nrequirements, use `pip install -r requirements.txt`\n\n**Problem parsing MLIR files?** Run the file through LLVM's `mlir-opt --mlir-print-op-generic` to get the generic form\nof the IR (instructions on how to build/install MLIR can be found [here](https://mlir.llvm.org/getting_started/)):\n```\n$ mlir-opt file.mlir --mlir-print-op-generic > output.mlir\n```\n\n**Found other problems parsing files?** Not all dialects and modes are supported. Feel free to send us an issue or\ncreate a pull request! This is a community project and we welcome any contribution.\n\n## Usage examples\n\n### Parsing MLIR files into Python\n\n```python\nimport mlir\n\n# Read a file path, file handle (stream), or a string\nast1 = mlir.parse_path('/path/to/file.mlir')\nast2 = mlir.parse_file(open('/path/to/file.mlir', 'r'))\nast3 = mlir.parse_string('''\nmodule {\n  func @toy_func(%tensor: tensor<2x3xf64>) -> tensor<3x2xf64> {\n    %t_tensor = \"toy.transpose\"(%tensor) { inplace = true } : (tensor<2x3xf64>) -> tensor<3x2xf64>\n    return %t_tensor : tensor<3x2xf64>\n  }\n}\n''')\n```\n\n### Inspecting MLIR files in Python\n\nMLIR files can be inspected by dumping their contents (which will print standard MLIR code), or by using the same tools\nas you would with Python's [ast](https://docs.python.org/3/library/ast.html) module.\n\n```python\nimport mlir\n\n# Dump valid MLIR files\nm = mlir.parse_path('/path/to/file.mlir')\nprint(m.dump())\n\nprint('---')\n\n# Dump the AST directly\nprint(m.dump_ast())\n\nprint('---')\n\n# Or visit each node type by implementing visitor functions\nclass MyVisitor(mlir.NodeVisitor):\n    def visit_Function(self, node: mlir.astnodes.Function):\n        print('Function detected:', node.name.value)\n        \nMyVisitor().visit(m)\n```\n\n### Transforming MLIR files\n\nMLIR files can also be transformed with a Python-like \n[NodeTransformer](https://docs.python.org/3/library/ast.html#ast.NodeTransformer) object.\n\n```python\nimport mlir\n\nm = mlir.parse_path('/path/to/file.mlir')\n\n# Simple node transformer that removes all operations with a result\nclass RemoveAllResultOps(mlir.NodeTransformer):\n    def visit_Operation(self, node: mlir.astnodes.Operation):\n        # There are one or more outputs, return None to remove from AST\n        if len(node.result_list) > 0:\n            return None\n            \n        # No outputs, no need to do anything\n        return self.generic_visit(node)\n        \nm = RemoveAllResultOps().visit(m)\n\n# Write back to file\nwith open('output.mlir', 'w') as fp:\n    fp.write(m.dump())\n```\n\n### Using custom dialects\n\nCustom dialects can be written and loaded as part of the pyMLIR parser. [See full tutorial here](doc/custom_dialect.rst).\n\n```python\nimport mlir\nfrom lark import UnexpectedCharacters\nfrom .mydialect import dialect\n\n# Try to parse as-is\ntry:\n    m = mlir.parse_path('/path/to/matrixfile.mlir')\nexcept UnexpectedCharacters:  # MyMatrix dialect not recognized\n    pass\n    \n# Add dialect to the parser\nm = mlir.parse_path('/path/to/matrixfile.mlir', \n                    dialects=[dialect])\n\n# Print output back\nprint(m.dump_ast())\n```\n\n### MLIR from scratch with the builder API\n\npyMLIR has a Builder API that can create MLIR ASTs on the fly within Python code.\n\n```python\nimport mlir.builder\n\nbuilder = mlir.builder.IRBuilder()\nmlirfile = builder.make_mlir_file()\nmodule = mlirfile.default_module\n\nwith builder.goto_block(builder.make_block(module.region)):\n    hello = builder.function(\"hello_world\")\n    block = builder.make_block(hello.region)\n    builder.position_at_entry(block)\n\n    x, y = builder.add_function_args(hello, [builder.F64, builder.F64], ['a', 'b'])\n\n    adder = builder.addf(x, y, builder.F64)\n    builder.ret([adder], [builder.F64])\n\nprint(mlirfile.dump())\n```\nprints:\n```mlir\nmodule {\n  func @hello_world(%a: f64, %b: f64) {\n    %_pymlir_ssa = addf %a , %b : f64\n    return %_pymlir_ssa : f64\n  }\n}\n```\n\nSee also [saxpy](tests/test_builder.py) for a full example that registers and uses a dialect in the builder.\n\n### Built-in dialect implementations and more examples\n\nAll dialect implementations can be found in the [dialects](mlir/dialects) subfolder. Additional uses\nof the library, including a custom dialect implementation, can be found in the [tests](tests)\nsubfolder.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/spcl/pymlir",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymlir",
    "package_url": "https://pypi.org/project/pymlir/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymlir/",
    "project_urls": {
      "Homepage": "https://github.com/spcl/pymlir"
    },
    "release_url": "https://pypi.org/project/pymlir/0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11805815,
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48955f0fe876cab1b047dd0f582530dc819b27628187814e6de3145b9eaeb6e7",
          "md5": "fcd33f85010e352289285967db1cd39e",
          "sha256": "7da86768f918dc8550ede91670bda037862fbb54de20482066a0752461c932da"
        },
        "downloads": -1,
        "filename": "pymlir-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcd33f85010e352289285967db1cd39e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23628,
        "upload_time": "2020-01-12T21:44:34",
        "upload_time_iso_8601": "2020-01-12T21:44:34.663273Z",
        "url": "https://files.pythonhosted.org/packages/48/95/5f0fe876cab1b047dd0f582530dc819b27628187814e6de3145b9eaeb6e7/pymlir-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b059ced6a67b15c78fb80270b3efd35803ab8ab693b2aaa54dfcbff8fd9d550",
          "md5": "8412083bf0bac7ab2473cd70942c691a",
          "sha256": "8202fe59c2fa8416098d8b6158a7c1e0965b94645076a9a0773c549f52aef9af"
        },
        "downloads": -1,
        "filename": "pymlir-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8412083bf0bac7ab2473cd70942c691a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16470,
        "upload_time": "2020-01-12T21:44:37",
        "upload_time_iso_8601": "2020-01-12T21:44:37.507224Z",
        "url": "https://files.pythonhosted.org/packages/3b/05/9ced6a67b15c78fb80270b3efd35803ab8ab693b2aaa54dfcbff8fd9d550/pymlir-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ef2702f857017470c6585a6b8e817e579503405cb966d3d63480c9736c002b0",
          "md5": "dedd64e24c459555aba32f5e11b1fa67",
          "sha256": "b67580df936598240c717309a8d0d3b2be63dd34dc514bc0b4c9c5856b686937"
        },
        "downloads": -1,
        "filename": "pymlir-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dedd64e24c459555aba32f5e11b1fa67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30834,
        "upload_time": "2021-10-22T16:55:04",
        "upload_time_iso_8601": "2021-10-22T16:55:04.758338Z",
        "url": "https://files.pythonhosted.org/packages/2e/f2/702f857017470c6585a6b8e817e579503405cb966d3d63480c9736c002b0/pymlir-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ef2702f857017470c6585a6b8e817e579503405cb966d3d63480c9736c002b0",
        "md5": "dedd64e24c459555aba32f5e11b1fa67",
        "sha256": "b67580df936598240c717309a8d0d3b2be63dd34dc514bc0b4c9c5856b686937"
      },
      "downloads": -1,
      "filename": "pymlir-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "dedd64e24c459555aba32f5e11b1fa67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30834,
      "upload_time": "2021-10-22T16:55:04",
      "upload_time_iso_8601": "2021-10-22T16:55:04.758338Z",
      "url": "https://files.pythonhosted.org/packages/2e/f2/702f857017470c6585a6b8e817e579503405cb966d3d63480c9736c002b0/pymlir-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}