{
  "info": {
    "author": "Andrew J. Page",
    "author_email": "andrew.page@quadram.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# PlasmidPredictor\nGiven some raw uncorrected long reads, such as those from PacBio or Oxford Nanopore, predict which plasmid should be present.  Assemblies of long read data can often miss out on plasmids, particularly if they are very small or have a copy number which is too high/low when compared to the chromosome. This software gives you an indication of which plasmids to expect, flagging potential issues with an assembly.\n\n[![Build Status](https://travis-ci.org/andrewjpage/plasmidpredictor.svg?branch=master)](https://travis-ci.org/andrewjpage/plasmidpredictor)\n\n# Paper\nComing soon.\n\nPlease remember to cite the plasmidFinder paper as their database makes this software work:\n\n\"In Silico Detection and Typing of Plasmids using PlasmidFinder and Plasmid Multilocus Sequence Typing\", Carattoli et. al, Antimicrob Agents Chemother. 2014 Jul; 58(7): 3895â€“3903. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4068535/\n\n\n# Installation\nThe only dependancy is Python3. Assuming you have python 3.3+ and pip installed, just run:\n```\npip3 install git+git://github.com/andrewjpage/plasmidpredictor.git\n```\n\n## Debian/Ubuntu (Trusty/Xenial)\nTo install Python3 on Ubuntu, as root run:\n```\napt-get update -qq\napt-get install -y git python3 python3-setuptools python3-biopython python3-pip\npip3 install git+git://github.com/andrewjpage/plasmidpredictor.git\n```\n\n## Windows\nLike virtually all Bioinformatics software, this software is unlikely to work on Windows. Try using a Linux virtual machine.\n\n# Usage\n## plasmidpredictor_database_downloader script\nFirst of all you need plasmid database from PlasmidFinder. There is a snapshot bundled with this repository for your convenience, or alternatively you can use the downloader script to get the latest data. You will need internet access for this step. Please remember to cite the PlasmidFinder paper.\n\n```\nusage: plasmidpredictor_database_downloader [options] output_prefix\n\nDownload PlasmidFinder database\n\npositional arguments:\n  output_prefix  Output prefix\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --verbose, -v  Turn on debugging (default: False)\n  --version      show program's version number and exit\n```\n\nJust run:\n```\nplasmidpredictor_database_downloader \n```\nYou will now have a file called 'plasmid_files.fa' which can be used with the main script.\n\n## plasmidpredictor script\nThis is the main script of the application. The mandatory inputs are a FASTQ file of long reads, which can be optionally gzipped.\n```\nusage: plasmidpredictor [options] input.fastq\n\nplasmid incompatibility group prediction from uncorrected long reads\n\npositional arguments:\n  input_fastq           Input FASTQ file (optionally gzipped)\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nOptional input arguments:\n  --plasmid_data PLASMID_DATA, -d PLASMID_DATA\n                        FASTA file containing plasmid data from downloader\n                        script, defaults to bundled database (default: None)\n  --kmer KMER, -k KMER  k-mer size (default: 13)\n\nOptional output arguments:\n  --filtered_reads_file FILTERED_READS_FILE, -f FILTERED_READS_FILE\n                        Filename to save matching reads to (default: None)\n  --output_file OUTPUT_FILE, -o OUTPUT_FILE\n                        Output file [STDOUT] (default: None)\n  --print_interval PRINT_INTERVAL, -p PRINT_INTERVAL\n                        Print results every this number of reads (default:\n                        None)\n  --verbose, -v         Turn on debugging [False]\n  --version             show program's version number and exit\n\nOptional advanced input arguments:\n  --max_gap MAX_GAP     Maximum gap for blocks to be contigous, measured in\n                        multiples of the k-mer size (default: 3)\n  --margin MARGIN       Flanking region around a block to use for mapping\n                        (default: 10)\n  --min_block_size MIN_BLOCK_SIZE\n                        Minimum block size in bases (default: 130)\n  --min_fasta_hits MIN_FASTA_HITS, -m MIN_FASTA_HITS\n                        Minimum No. of kmers matching a read (default: 10)\n  --min_perc_coverage MIN_PERC_COVERAGE, -c MIN_PERC_COVERAGE\n                        Minimum percentage coverage of typing sequence to\n                        report (default: 85)\n  --min_kmers_for_onex_pass MIN_KMERS_FOR_ONEX_PASS\n                        Minimum No. of kmers matching a read in 1st pass\n                        (default: 10)\n```\n\n### Required argument\n\n__input_fastq__: This is a single FASTQ file. It can be optionally gzipped. Alternatively input can be read from stdin by using the dash character (-) as the input file name. The file must contain long reads, such as those from PacBio or Oxford Nanopore. The quality scores are ignored.\n\n### Optional input arguments\n\n__plasmid_data__: This is a FASTA file containing all of the plasmid typing sequences. This is generated by the plasmidpredictor_database_downloader script. It comes from the PlasmidFinder website, so please be sure to cite their paper (citation gets printed every time you run the script).\n\n__kmer__:  The most important parameter. 13 works well for Nanopore, 15 works well for PacBio, but you may need to play around with it for your data. Long reads have a high error rate, so if you set this too high, nothing will match (because it will contain errors). If you set it too low, everything will match, which isnt much use to you. Thinking about your data, on average how long of a stretch of bases can you get in your read without errors? This is what you should set your kmer to. For example, if you have an average of 1 error every 10 bases, then the ideal kmer would be 9.\n\n### Optional output arguments\n\n__filtered_reads_file__: Save the reads which contain the rep/inc sequences to a new FASTQ file. This is useful if you want to undertake a further assembly just on the plasmids.This file should not already exist. \n\n__output_file OUTPUT_FILE__: By default the results are printed to STDOUT. If you provide an output filename (which must not exist already), it will print the results to the file.\n\n__print_interval__: By default the whole file is processed and the final results are printed out. However you can get intermediate results printed after every X number of reads, which is useful if you are doing real time streaming of data into the application and can halt when you have enough information. They are separated by \"****\". \n\n__verbose__: Enable debugging mode where lots of extra output is printed to STDOUT.\n\n__version__: Print the version number and exit.\n\n\n### Optional advanced input arguments\n\n__max_gap__: Maximum gap for blocks to be contigous, measured in multiples of the k-mer size. This allows for short regions of elevated errors in the reads to be spanned.\n\n__margin__:  Expand the analysis to look at a few bases on either side of where the sequence is predicted to be on the read. This allows for k-mers to overlap the ends.\n\n__min_block_size__:  This is the minimum sub read size of a read to consider for indepth analysis after matching k-mers have been identified in the read. This speeds up the analysis quite a bit, but there is the risk that some reads may be missed, particularly if they have partial rep/inc sequences.\n\n__min_fasta_hits__: This is the minimum number of matching kmers in a read, for the read to be considered for analysis. It is a hard minimum threshold to speed up analysis.\n\n__min_perc_coverage__: Only report rep/inc sequences above this percentage coverage. Coverage in this instance is kmer coverage of the underlying sequence (rather than depth of coverage).\n\n__min_kmers_for_onex_pass__: The number of k-mers that must be present in the read for the initial onex pass of the database to be considered for further analysis. This speeds up the analysis quite a bit, but there is the risk that some reads may be missed, particularly if they have partial rep/inc sequences.\n\n# Output\nThe output is tab delmited and printed to STDOUT by default. You can optionally print it to a file using the '-o' parameter. If you would like to see intermediate results, you can tell it to print every X reads with the '-p' parameter, separated by '****'.   An example of the output is:\n\n```\nGENE\tCOMPLETENESS\t%COVERAGE\tACCESSION\tDATABASE\tPRODUCT\nrep7.1\tFull\t100\tAB037671\tplasmidfinder\trep7.1_repC(Cassette)_AB037671\nrep7.5\tPartial\t99\tAF378372\tplasmidfinder\trep7.5_CDS1(pKC5b)_AF378372\nrep7.6\tPartial\t94\tSAU38656\tplasmidfinder\trep7.6_ORF(pKH1)_SAU38656\nrep7.9\tFull\t100\tNC007791\tplasmidfinder\trep7.9_CDS3(pUSA02)_NC007791\nrep7.10\tPartial\t91\tNC_010284.1\tplasmidfinder\trep7.10_repC(pKH17)_NC_010284.1\nrep7.12\tPartial\t93\tGQ900417.1\tplasmidfinder\trep7.12_rep(SAP060B)_GQ900417.1\nrep7.17\tFull\t100\tAM990993.1\tplasmidfinder\trep7.17_repC(pS0385-1)_AM990993.1\nrep20.11\tFull\t100\tAP003367\tplasmidfinder\trep20.11_repA(VRSAp)_AP003367\nrepUS14.\tFull\t100\tAP003367\tplasmidfinder\trepUS14._repA(VRSAp)_AP003367\n```\n\n__GENE__: The first column is the first part of the product name. \n\n__COMPLETENESS__: If all of the k-mers in the gene are found in the reads, the completeness is noted as 'Full', otherwise if there are some k-mers missing, it is noted as 'Partial'. \n\n__%COVERAGE__: The percentage coverage is the number of underlying k-mers in the gene where at least 1 matching k-mer has been found in the reads. 100 indicates that every k-mer in the gene is covered. Low coverage results are not shown (controlled by the --min_perc_coverage parameter).\n\n__ACCESSION__: This is the accession number from where the typing sequence originates. You can look this up at NCBI or EBI.\n\n__DATABASE__: This is where the data has come from, which is currently always plasmidfinder.\n\n__PRODUCT__: This is the full product of the gene as found in the database.\n\n# Resource usage\nFor an 800Mbyte FASTQ file (unzipped) of long reads from a Oxford Nanopore MinION containing Salmonella required 80MB of RAM and took under 1 minute.\n\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andrewjpage/plasmidpredictor",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plasmidpredictor",
    "package_url": "https://pypi.org/project/plasmidpredictor/",
    "platform": "",
    "project_url": "https://pypi.org/project/plasmidpredictor/",
    "project_urls": {
      "Homepage": "https://github.com/andrewjpage/plasmidpredictor"
    },
    "release_url": "https://pypi.org/project/plasmidpredictor/0.1.0/",
    "requires_dist": [
      "biopython (>=1.68)",
      "pyfastaq (>=3.12.0)",
      "cython"
    ],
    "requires_python": "",
    "summary": "plasmidpredictor: predict which plasmid should be present from uncorrected long read data",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4209051,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77594e179e3af364544457a4d1471b57a1a45e4691b4bc8113a5fc779e55977c",
          "md5": "d87a7ec19e0aa5b59ce35c978457f4bf",
          "sha256": "924154e058b37fdfc58a19e71440c83154559997faa44c2f175010ec398e14ed"
        },
        "downloads": -1,
        "filename": "plasmidpredictor-0.1.0-cp36-cp36m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "d87a7ec19e0aa5b59ce35c978457f4bf",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 91234,
        "upload_time": "2018-08-26T19:27:49",
        "upload_time_iso_8601": "2018-08-26T19:27:49.578048Z",
        "url": "https://files.pythonhosted.org/packages/77/59/4e179e3af364544457a4d1471b57a1a45e4691b4bc8113a5fc779e55977c/plasmidpredictor-0.1.0-cp36-cp36m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a343e46e17d9bb04ad09b36d6f1805c09a6d09cf3ed346145ce8976075c63f0",
          "md5": "8cf0c7226e777434f61bb1c651b23470",
          "sha256": "6c0d2bea5febbc0618417b20656fd8ff108e8d6647a8b7d57f793a45060ae86b"
        },
        "downloads": -1,
        "filename": "plasmidpredictor-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8cf0c7226e777434f61bb1c651b23470",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87215,
        "upload_time": "2018-08-26T19:27:50",
        "upload_time_iso_8601": "2018-08-26T19:27:50.907664Z",
        "url": "https://files.pythonhosted.org/packages/1a/34/3e46e17d9bb04ad09b36d6f1805c09a6d09cf3ed346145ce8976075c63f0/plasmidpredictor-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77594e179e3af364544457a4d1471b57a1a45e4691b4bc8113a5fc779e55977c",
        "md5": "d87a7ec19e0aa5b59ce35c978457f4bf",
        "sha256": "924154e058b37fdfc58a19e71440c83154559997faa44c2f175010ec398e14ed"
      },
      "downloads": -1,
      "filename": "plasmidpredictor-0.1.0-cp36-cp36m-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d87a7ec19e0aa5b59ce35c978457f4bf",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 91234,
      "upload_time": "2018-08-26T19:27:49",
      "upload_time_iso_8601": "2018-08-26T19:27:49.578048Z",
      "url": "https://files.pythonhosted.org/packages/77/59/4e179e3af364544457a4d1471b57a1a45e4691b4bc8113a5fc779e55977c/plasmidpredictor-0.1.0-cp36-cp36m-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a343e46e17d9bb04ad09b36d6f1805c09a6d09cf3ed346145ce8976075c63f0",
        "md5": "8cf0c7226e777434f61bb1c651b23470",
        "sha256": "6c0d2bea5febbc0618417b20656fd8ff108e8d6647a8b7d57f793a45060ae86b"
      },
      "downloads": -1,
      "filename": "plasmidpredictor-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8cf0c7226e777434f61bb1c651b23470",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 87215,
      "upload_time": "2018-08-26T19:27:50",
      "upload_time_iso_8601": "2018-08-26T19:27:50.907664Z",
      "url": "https://files.pythonhosted.org/packages/1a/34/3e46e17d9bb04ad09b36d6f1805c09a6d09cf3ed346145ce8976075c63f0/plasmidpredictor-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}