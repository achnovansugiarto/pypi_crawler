{
  "info": {
    "author": "Dr. Abiira Nathan",
    "author_email": "nabiira2by2@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "py3lite\n=======\n\nA light weight sqlite3 ORM for humans\n\nInstallation:\nInstall with pip\n\n```python\npip install py3lite\n```\n\nInstall from Git\n\n```bash\ngit clone https://github.com/abiiranathan/py3lite.git\n```\n\n```bash\ncd py3lite\npython setup.py install\n```\n\nProvides\n\n1. A Model base class you can inherit from to create diverse tables.\n2. A Connection class that handles you database connection.\n3. Lazy Query objects, dict factory, model factor, row factory\n4. API for custom functions written in python\n5. Forein Key support and reverse look up\n6. You can build your own Fields and plug them into the ORM.\n7. Much more...\n\nDocumentation\n\nSUBMODULES\n\n   1. models\n\nAvailable classes and modules\n\n   1. py3lite.py3lite.connection.Connection\n   2. py3lite.py3lite.decorators.multimethod\n   3. py3lite.py3lite.models.Model\n   4. py3lite.py3lite.signals.Signal\n\nPACKAGE CONTENTS\n    py3lite (package)\n    setup\n\nSUBMODULES\n    models\n\nCLASSES\n    py3lite.py3lite.connection.Connection\n    py3lite.py3lite.decorators.multimethod\n    py3lite.py3lite.models.Model\n    py3lite.py3lite.signals.Signal\n\n    class Connection(builtins.object)\n\n     |  Wrapper around an SQLite3 Connection object.\n     |  Provides convinient methods for working with sqlite databases\n     |  and is a part of py3lite pkg.\n     |\n     |  Best used a context manager.\n     |\n     |  Example Usage:\n     |  --------------\n     |\n     |      from py3lite import Connection\n     |\n     |      Connection.database = 'mydb.sqlite3'\n     |      Connection.migrate = True\n     |\n     |      with Connection() as conn:\n     |          cursor = conn.execute(...)\n     |          return cursor.fetchall()\n     |\n     |  Use the connection as dict factory\n     |  ----------------------------------\n     |  A dict factory returns a list of python dictionaries instead of tuples.\n     |\n     |  with Connection().as_dict() as conn:\n     |          cursor = conn.execute(...)\n     |          return cursor.fetchall()\n     |\n     |  Use the connection as sqlite3.Row factory\n     |  -----------------------------------------\n     |\n     |  with Connection().as_row() as conn:\n     |          cursor = conn.execute(...)\n     |          return cursor.fetchall()\n     |\n     |  Use the connection to return py3lite.Model instances\n     |  ----------------------------------------------------\n     |\n     |  from py3lite import Model, Connection, models\n     |\n     |  class Post(Model):\n     |      title = models.String()\n     |      content = models.Text()\n     |\n     |  post = Post(title='Post 1', content='py3lit3 is awesome!')\n     |  post.save()\n     |\n     |  In some other code:\n     |  with Connection().as_model(Post) as conn:\n     |      posts = Post().query.all()\n     |\n     |      posts will be a list of Post objects.\n     |\n     |  Methods defined here:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, exc_type, exc_val, tb)\n     |\n     |  __init__(self)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  as_dict(self)\n     |      Sets sqlite3.Row as the connection row_factory\n     |\n     |  as_model(self, model_class)\n     |      Sets a model factory. This is a context manager that makes queries\n     |      return model objects.\n     |\n     |  as_row(self)\n     |      Sets sqlite3.Row connection factory\n     |\n     |  backup(self, target, *, pages=0, progress=None, name='main', sleep=0.25)\n     |      This method makes a backup of a SQLite database even while itâ€™s being accessed by\n     |      other clients, or concurrently by the same connection. The copy will be written into the\n     |      mandatory argument target, that must be another Connection instance.\n     |      By default, or when pages is either 0 or a negative integer, the entire database is copied\n     |      in a single step; otherwise the method performs a loop copying up to pages pages at a\n     |      time.\n     |      If progress is specified, it must either be None or a callable object that will be executed at\n     |      each iteration with three integer arguments, respectively the status of the last iteration,\n     |      the remaining number of pages still to be copied and the total number of pages.\n     |      The name argument specifies the database name that will be copied: it must be a string\n     |      containing either \"main\", the default, to indicate the main database, \"temp\" to indicate\n     |      the temporary database or the name specified after the AS keyword in an ATTACH\n     |      DATABASE statement for an attached database.\n     |      The sleep argument specifies the number of seconds to sleep by between successive\n     |      attempts to backup remaining pages, can be specified either as an integer or a floating\n     |      point value.\n     |\n     |  close(self)\n     |      Closes the current connection\n     |\n     |  connect(self)\n     |      Connect to the sqlite database. Returns sqlite3.Connection singleton\n     |\n     |  cursor(self)\n     |      Returns the sqlite.Cursor object\n     |\n     |  dict_factory(self, cursor, row)\n     |      Sets the dictionary factory\n     |\n     |  execute(self, sql, *args)\n     |      Indirect method to excute an sql query. Returns a cursor object\n     |\n     |  json_extract(self, data, key)\n     |      Query for a key in a json column\n     |\n     |  set_authorizer(self, authorizer_callback)\n     |      This method routine registers a callback that is invoked for\n     |      each attempt to access a column of a table in the database.\n     |      The callback should return sqlite3.SQLITE_OK, sqlite3.SQLITE_DENY or\n     |      sqlite3.IGNORE\n     |\n     |  set_database(self, database:str)\n     |      Set the connection database. Returns None\n     |\n     |  set_options(self, *, WAL_MODE=False, foreign_keys='ON')\n     |\n     |  set_pragma(self)\n     |      Sets foreign keys ON or OFF and toggles WAL mode\n     |\n     |  set_progress_handler(self, handler, n)\n     |      This routine registers a callback.\n     |      The callback is invoked for every n instructions of the\n     |      SQLite virtual machine. This is useful if you want to get called from SQLite during long running\n     |      operations, for example to update a GUI.\n     |\n     |      If you want to clear any previously installed progress handler,\n     |      call the method with None for handler.\n     |      Returning a non - zero value from the handler function will terminate the currently\n     |      executing query and cause it to raise an OperationalError exception.\n     |\n     |  set_trace_callback(self, trace_callback)\n     |      Registers trace_callback to be called for each SQL statement that is actually executed\n     |      by the SQLite backend.\n     |      The only argument passed to the callback is the statement(as string) that is being\n     |      executed. The return value of the callback is ignored. Note that the backend does not\n     |      only run statements passed to the Cursor.execute() methods. Other sources include\n     |      the transaction management of the Python module and the execution of triggers defined\n     |      in the current database.\n     |      Passing None as trace_callback will disable the trace callback.\n     |\n     |  sql_function(self, num_params, name=None)\n     |      Creates a user-defined function that you can later use from within SQL statements under\n     |      the function name name. num_params is the number of parameters the function accepts\n     |      (if num_params is -1, the function may take any number of arguments), and func is a\n     |      Python callable that is called as the SQL function. If deterministic is true, the created\n     |      function is marked as deterministic, which allows SQLite to perform additional\n     |      optimizations. This flag is supported by SQLite 3.8.3 or higher, NotSupportedError will\n     |      be raised if used with older versions.(deterministic works only in python 3.8)\n     |      The function can return any of the types supported by SQLite: bytes, str, int, float and\n     |      None.\n     |\n     |  sqldump(self, filename)\n     |      Backs up the database to the specified filename\n     |      Uses: sqlite3.Connection.iterdump api\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods defined here:\n     |\n     |  db_exits() from py3lite.py3lite.connection.SingletonMeta\n     |      Returns True if the database exists else\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |\n     |  row_factory\n     |      Returns the current connection row factory\n     |\n     |  tables\n     |      Returns a list of tables in the current database\n     |\n     |  total_changes\n     |      Returns the total number of database rows that have been modified, inserted, or deleted\n     |      since the database connection was opened.\n     |\n     |  triggers\n     |      Returns a list of triggers in the current db\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  database = ':memory:'\n     |\n     |  migrate = False\n     |\n     |  user = <py3lite.py3lite.connection.AnonymousUser object>\n\n    class Model(builtins.object)\n     |  Methods defined here:\n     |\n     |  __init__(self, **kwargs)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  __repr__(self)\n     |      Return repr(self).\n     |\n     |  adapt_array(a)\n     |      Converts a list to a string for db storage\n     |\n     |  adapt_decimal(d)\n     |      Convertes a decimal.Decimal to a string\n     |\n     |  adapt_json(s)\n     |      Converts a dictinary, s to a json string\n     |\n     |  convert_array(s)\n     |      Converts a byte-string to a list using ast.literal_eval\n     |\n     |  convert_decimal(s)\n     |      Convertes a byte-string to decimal.Decimal\n     |\n     |  convert_json(s)\n     |      Decodes a byte-string, s and converts the json string back to a python dictionary\n     |\n     |  count(self)\n     |\n     |  create_triggers(self)\n     |\n     |  delete(self)\n     |\n     |  executemany(self, data, fields=None, exclude=None)\n     |\n     |  get(self, **kwargs)\n     |\n     |  post_delete(self)\n     |\n     |  post_delete_callback = call_back(*args, **kwargs)\n     |      # Default signals\n     |\n     |  post_save(self)\n     |\n     |  post_save_callback = call_back(*args, **kwargs)\n     |      # Default signals\n     |\n     |  post_update(self)\n     |\n     |  post_update_callback = call_back(*args, **kwargs)\n     |      # Default signals\n     |\n     |  pre_delete(self)\n     |\n     |  pre_delete_callback = call_back(*args, **kwargs)\n     |      # Default signals\n     |\n     |  pre_process_instance(self)\n     |\n     |  pre_save(self)\n     |      # py3lite signals\n     |\n     |  pre_save_callback = call_back(*args, **kwargs)\n     |      # Default signals\n     |\n     |  pre_update(self)\n     |\n     |  pre_update_callback = call_back(*args, **kwargs)\n     |      # Default signals\n     |\n     |  qualified_fields(self, fields=None)\n     |\n     |  rename(self, new_table)\n     |\n     |  save(self)\n     |\n     |  toDict(self, cursor)\n     |\n     |  update(self)\n     |\n     |  ----------------------------------------------------------------------\n     |  Class methods defined here:\n     |\n     |  __init_subclass__() from py3lite.py3lite.db.ModelMeta\n     |      This method is called when a class is subclassed.\n     |\n     |      The default implementation does nothing. It may be\n     |      overridden to extend subclasses.\n     |\n     |  add_index(column) from py3lite.py3lite.db.ModelMeta\n     |\n     |  add_multi_index(index_name, column_list) from py3lite.py3lite.db.ModelMeta\n     |\n     |  create_indexes() from py3lite.py3lite.db.ModelMeta\n     |\n     |  create_table() from py3lite.py3lite.db.ModelMeta\n     |\n     |  describe() from py3lite.py3lite.db.ModelMeta\n     |\n     |  drop() from py3lite.py3lite.db.ModelMeta\n     |\n     |  from_csv(filename, types, as_dict=False, as_obj=False) from py3lite.py3lite.db.ModelMeta\n     |      Import table data for a model from a csv filename.\n     |      types: tuple of callables that will cast each row into it's real datatype.\n     |      e.g [imt, float, str] etc.\n     |      Expects the first row to be a header. Failure to have a header in the csv will\n     |      cause the first row to be skipped.\n     |\n     |      if as_dict:\n     |          returns a list of dictionaries\n     |      if as_obj:\n     |          returns a list of instances created with the parsed data.\n     |\n     |  schema() from py3lite.py3lite.db.ModelMeta\n     |\n     |  table_info() from py3lite.py3lite.db.ModelMeta\n     |\n\n     |\n     |  pk\n     |\n     |  query\n     |      Query the database.\n     |\n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |\n     |  id = <py3lite.py3lite.models.Integer object>\n     |\n     |  Array = <class 'py3lite.py3lite.models.Array'>\n     |\n     |\n     |  CASCADE = 'CASCADE'\n     |\n     |  Date = <class 'py3lite.py3lite.models.Date'>\n     |\n     |\n     |  DateTime = <class 'py3lite.py3lite.models.DateTime'>\n     |\n     |\n     |  Decimal = <class 'py3lite.py3lite.models.Decimal'>\n     |\n     |\n     |  Descriptor = <class 'py3lite.py3lite.models.Descriptor'>\n     |\n     |\n     |  Enum = <class 'py3lite.py3lite.models.Enum'>\n     |\n     |\n     |  Float = <class 'py3lite.py3lite.models.Float'>\n     |\n     |\n     |  ForeignKey = <class 'py3lite.py3lite.models.ForeignKey'>\n     |\n     |\n     |  Integer = <class 'py3lite.py3lite.models.Integer'>\n     |\n     |\n     |  Json = <class 'py3lite.py3lite.models.Json'>\n     |\n     |\n     |  MIGRATE = False\n     |\n     |  MODELS = set()\n     |\n     |  Meta = <class 'py3lite.py3lite.db.Model.Meta'>\n     |\n     |\n     |  NO_ACTION = 'NO ACTION'\n     |\n     |  OneToOneField = <class 'py3lite.py3lite.models.OneToOneField'>\n     |      Same as foreign key except that reverse lookup\n     |      returns a sigle related object\n     |\n     |  Positive = <class 'py3lite.py3lite.models.Positive'>\n     |\n     |\n     |  PositiveFloat = <class 'py3lite.py3lite.models.PositiveFloat'>\n     |\n     |\n     |  PositiveInteger = <class 'py3lite.py3lite.models.PositiveInteger'>\n     |\n     |\n     |  RESTRICT = 'RESTRICT'\n     |\n     |  Real = <class 'py3lite.py3lite.models.Real'>\n     |\n     |\n     |  Regex = <class 'py3lite.py3lite.models.Regex'>\n     |\n     |\n     |  SET_DEFAULT = 'SET DEFAULT'\n     |\n     |  SET_NULL = 'SET NULL'\n     |\n     |  Sized = <class 'py3lite.py3lite.models.Sized'>\n     |\n     |\n     |  SizedRegexString = <class 'py3lite.py3lite.models.SizedRegexString'>\n     |\n     |\n     |  SizedString = <class 'py3lite.py3lite.models.SizedString'>\n     |\n     |\n     |  String = <class 'py3lite.py3lite.models.String'>\n     |\n     |\n     |  Text = <class 'py3lite.py3lite.models.Text'>\n     |\n     |\n     |  Time = <class 'py3lite.py3lite.models.Time'>\n     |\n     |\n     |  Typed = <class 'py3lite.py3lite.models.Typed'>\n     |\n     |\n     |  _fields = ['id']     |\n     |  columns = {'id': <py3lite.py3lite.models.Integer object>}\n     |\n     |  connection_class = <class 'py3lite.py3lite.connection.Connection'>\n     |      Wrapper around an SQLite3 Connection object.\n     |      Provides convinient methods for working with sqlite databases\n     |      and is a part of py3lite pkg.\n     |\n     |      Best used a context manager.\n     |\n     |      Example Usage:\n     |      --------------\n     |\n     |          from py3lite import Connection\n     |\n     |          Connection.database = 'mydb.sqlite3'\n     |          Connection.migrate = True\n     |\n     |          with Connection() as conn:\n     |              cursor = conn.execute(...)\n     |              return cursor.fetchall()\n     |\n     |      Use the connection as dict factory\n     |      ----------------------------------\n     |      A dict factory returns a list of python dictionaries instead of tuples.\n     |\n     |      with Connection().as_dict() as conn:\n     |              cursor = conn.execute(...)\n     |              return cursor.fetchall()\n     |\n     |      Use the connection as sqlite3.Row factory\n     |      -----------------------------------------\n     |\n     |      with Connection().as_row() as conn:\n     |              cursor = conn.execute(...)\n     |              return cursor.fetchall()\n     |\n     |      Use the connection to return py3lite.Model instances\n     |      ----------------------------------------------------\n     |\n     |      from py3lite import Model, Connection, models\n     |\n     |      class Post(Model):\n     |          title = models.String()\n     |          content = models.Text()\n     |\n     |      post = Post(title='Post 1', content='py3lit3 is awesome!')\n     |      post.save()\n     |\n     |      In some other code:\n     |      with Connection().as_model(Post) as conn:\n     |          posts = Post().query.all()\n     |\n     |          posts will be a list of Post objects.\n\n\n    class Signal(builtins.object)\n     |  Attach signals to models\n     |  Each signal takes two arguments.\n     |\n     |  sender: Model class to listen for the signal\n     |  receiver: callback function. The model passes it's instance to the receiver\n     |\n     |  Methods defined here:\n     |\n     |  post_delete(self, sender, receiver)\n     |\n     |  post_save(self, sender, receiver)\n     |\n     |  post_update(self, sender, receiver)\n     |\n     |  pre_delete(self, sender, receiver)\n     |\n     |  pre_save(self, sender, receiver)\n     |\n     |  pre_update(self, sender, receiver)\n     |\n\n    class multimethod(builtins.object)\n     |  Credits: David Beazley(Python Cookbook 3rd Edition)\n     |\n     |  multimethod is a class decorator that implements\n     |  singledispatch or method overloading on instance methods.\n     |\n     |  class Calc:\n     |      @multimethod\n     |      def area(self, l, b):\n     |          'Default method to run'\n     |          return l * b\n     |\n     |      @area.match(int)\n     |      def area(self, r):\n     |          'Method called with a single integer argument'\n     |          return r * r\n     |\n     |  Methods defined here:\n     |\n     |  __call__(self, *args)\n     |      Call self as a function.\n     |\n     |  __get__(self, instance, cls)\n     |\n     |  __init__(self, func)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |\n     |  match(self, *types)\n     |      Method called if parameters match specified types unsing\n     |      type annotations e.g match(name:str, age:int)\n\nFUNCTIONS\n    overload(fn)\n        Credits: <https://arpitbhayani.me/blogs/function-overloading>\n\n        overload is the decorator that wraps the function\n        and returns a callable object of type Function.\n        Note that this does not work on any methods inside a class.\n\n        If you want to overload instance menthods, use multimethod.\n\n        class Calc:\n            @multimethod\n            def area(self, l, b):\n                return l * b\n\n            @area.match(int)\n            def area(self, r):\n                return r * r\n\nDATA\n     __all__ = [ 'models', 'Model', 'Connection', 'multimethod', 'overload', 'Signal']\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abiiranathan/py3lite",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py3lite",
    "package_url": "https://pypi.org/project/py3lite/",
    "platform": null,
    "project_url": "https://pypi.org/project/py3lite/",
    "project_urls": {
      "Homepage": "https://github.com/abiiranathan/py3lite"
    },
    "release_url": "https://pypi.org/project/py3lite/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Light weight sqlite3 ORM for humans",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13975685,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9552cfcde514957bc6c335b783a21f9e9dbafc8c8373edbfc2c61c169ae27fc1",
          "md5": "24bcd086aefb556e273808f7b94c5dcb",
          "sha256": "80c89a978b035e766a348cd8352582e188c761f368c20867dd8d235e9f6ab50e"
        },
        "downloads": -1,
        "filename": "py3lite-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24bcd086aefb556e273808f7b94c5dcb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22670,
        "upload_time": "2022-05-30T09:14:26",
        "upload_time_iso_8601": "2022-05-30T09:14:26.046478Z",
        "url": "https://files.pythonhosted.org/packages/95/52/cfcde514957bc6c335b783a21f9e9dbafc8c8373edbfc2c61c169ae27fc1/py3lite-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9552cfcde514957bc6c335b783a21f9e9dbafc8c8373edbfc2c61c169ae27fc1",
        "md5": "24bcd086aefb556e273808f7b94c5dcb",
        "sha256": "80c89a978b035e766a348cd8352582e188c761f368c20867dd8d235e9f6ab50e"
      },
      "downloads": -1,
      "filename": "py3lite-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "24bcd086aefb556e273808f7b94c5dcb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22670,
      "upload_time": "2022-05-30T09:14:26",
      "upload_time_iso_8601": "2022-05-30T09:14:26.046478Z",
      "url": "https://files.pythonhosted.org/packages/95/52/cfcde514957bc6c335b783a21f9e9dbafc8c8373edbfc2c61c169ae27fc1/py3lite-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}