{
  "info": {
    "author": "Jonathan H",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img align=\"left\" src=\"https://github.com/gchq/annchor/raw/main/doc/images/logo.svg\" width=\"300\">\n\n# ANNchor\nA python library implementing ANNchor:<br>\n*k*-nearest neighbour graph construction for slow metrics.\n\n## User Guide\nFor user guide and documentation visit [gchq.github.io/annchor](https://gchq.github.io/annchor)\n\n<br></br>\n\n## What is ANNchor?\nANNchor is a python library which constructs approximate *k*-nearest neighbour graphs for slow metrics. \nThe *k*-NN graph is an extremely useful data structure that appears in a wide variety of applications, for example: clustering, dimensionality reduction, visualisation and exploratory data analysis (EDA). However, if we want to use a slow metric, these *k*-NN graphs can take an exceptionally long time to compute.\nTypical slow metrics include the Wasserstein metric (Earth Mover's distance) applied to images, and Levenshtein (Edit) distance on long strings, where the time taken to compute these distances is significantly longer than a typical Euclidean distance.\n\nANNchor uses Machine Learning methods to infer true distances between points in a data set from a variety of features derived from anchor points (aka landmarks/waypoints). In practice, this means that ANNchor does not make as many calls to the underlying metric as other state of the art *k*-NN graph generation techniques. This translates to quicker run times, especially when the metric is slow.\n\nResults from ANNchor can easily be combined with other popular libraries in the Data Science community. In the docs we give examples of how to use ANNchor in an EDA pipeline alongside [UMAP](https://github.com/lmcinnes/umap) and [HDBSCAN](https://github.com/scikit-learn-contrib/hdbscan).\n\n## Installation\nInstall via PyPI with pip:\n```bash\npip install annchor\n```\n\n## Basic Usage\n\n```python\nimport numpy as np\nimport annchor\n\nX =          #your data, list/np.array of items\ndistance =   #your distance function, distance(X[i],X[j]) = d\n\nann = annchor.Annchor(X,\n                      distance,\n                      n_anchors=15,\n                      n_neighbors=15,\n                      p_work=0.1)\nann.fit()\n\nprint(ann.neighbor_graph)\n\n```\n\n## Examples\n\nWe demonstrate ANNchor by example, using Levenshtein distance on a data set of long strings.\nThis data set is bundled with the annchor package for convenience.\n\nFirstly, we import some useful modules and load the data:\n```python\nimport os\nimport time\nimport numpy as np\n\nfrom annchor import Annchor, compare_neighbor_graphs\nfrom annchor.datasets import load_strings\n\nstrings_data = load_strings()\nX = strings_data['X']\ny = strings_data['y']\nneighbor_graph = strings_data['neighbor_graph']\n\nnx = X.shape[0]\n\nfor x in X[::100]:\n    print(x[:50]+'...')\n```\n```\ncuiojvfnseoksugfcbwzrcoxtjxrvojrguqttjpeauenefmkmv...\nuiofnsosungdgrxiiprvojrgujfdttjioqunknefamhlkyihvx...\ncxumzfltweskptzwnlgojkdxidrebonxcmxvbgxayoachwfcsy...\ncmjpuuozflodwqvkascdyeosakdupdoeovnbgxpajotahpwaqc...\nvzdiefjmblnumdjeetvbvhwgyasygrzhuckvpclnmtviobpzvy...\nnziejmbmknuxdhjbgeyvwgasygrhcpdxcgnmtviubjvyzjemll...\nyhdpczcjxirmebhfdueskkjjtbclvncxjrstxhqvtoyamaiyyb...\nyfhwczcxakdtenvbfctugnkkkjbcvxcxjwfrgcstahaxyiooeb...\nyoftbrcmmpngdfzrbyltahrfbtyowpdjrnqlnxncutdovbgabo...\ntyoqbywjhdwzoufzrqyltahrefbdzyunpdypdynrmchutdvsbl...\ndopgwqjiehqqhmprvhqmnlbpuwszjkjjbshqofaqeoejtcegjt...\nrahobdixljmjfysmegdwyzyezulajkzloaxqnipgxhhbyoztzn...\ndfgxsltkbpxvgqptghjnkaoofbwqqdnqlbbzjsqubtfwovkbsk...\npjwamicvegedmfetridbijgafupsgieffcwnmgmptjwnmwegvn...\novitcihpokhyldkuvgahnqnmixsakzbmsipqympnxtucivgqyi...\nxvepnposhktvmutozuhkbqarqsbxjrhxuumofmtyaaeesbeuhf...\n```\n\nWe see a data set consisting of long strings. A closer inspection may indicate some structure, but it is not obvious at this stage.\n\nWe use ANNchor to find the 25-nearest neighbour graph. Levenshtein distance is included in Annchor, and can be called by using the string 'levenshtein' \n(we could also define the levenshtein function beforehand and pass that to Annchor instead). We will specify that we want to do no more than 12% of the brute force work (since the data set is size 1600, brute force would be 1600x1599/2=1279200 calls to the metric, so we will make around ~153500 to the metric). To get accurate timing information, bear in mind that the first run will be slower than future runs due to the numba.jit compile time.\n\n```python\n\nstart_time = time.time()\nann = Annchor(X, 'levenshtein', n_neighbors=25, p_work=0.12)\n\nann.fit()\nprint('ANNchor Time: %5.3f seconds' % (time.time()-start_time))\n\n\n# Test accuracy\nerror = compare_neighbor_graphs(neighbor_graph,\n                                ann.neighbor_graph,\n                                k)\nprint('ANNchor Accuracy: %d incorrect NN pairs (%5.3f%%)' % (error,100*error/(k*nx)))\n```\n```\nANNchor Time: 34.299 seconds\nANNchor Accuracy: 0 incorrect NN pairs (0.000%)\n```\n\nNot bad! \n\nWe can continue to use ANNchor in a typical EDA pipeline. Let's find the UMAP projection of our data set:\n\n```\nfrom umap import UMAP\nfrom matplotlib import pyplot as plt\n\n# Extract the distance matrix\nD = ann.to_sparse_matrix()\n\nU = UMAP(metric='precomputed',n_neighbors=k-1)\nT = U.fit_transform(D)\n# T now holds the 2d UMAP projection of our data\n\n# View the 2D projection with matplotlib\nfig,ax = plt.subplots(figsize=(7,7))\nax.scatter(*T.T,alpha=0.1)\nplt.show()\n```\n<img align=\"center\" src=\"https://github.com/gchq/annchor/raw/main/doc/images/strings_no_col.png\" width=\"500\">\n\nFinally the structure of the data set is clear to us! There are 8 clusters of two distinct varieties: filaments and clouds.\n\nMore examples can be found in the Examples subfolder.\nExtra python packages will be required to run the examples.\nThese packages can be installed via:\n```bash\npip install -r annchor/Examples/requirements.txt\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gchq/annchor",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "annchor",
    "package_url": "https://pypi.org/project/annchor/",
    "platform": "",
    "project_url": "https://pypi.org/project/annchor/",
    "project_urls": {
      "Bug Tracker": "https://github.com/gchq/annchor/issues",
      "Homepage": "https://github.com/gchq/annchor"
    },
    "release_url": "https://pypi.org/project/annchor/1.0.0/",
    "requires_dist": [
      "joblib (>=1.0.1)",
      "numpy (>=1.21.0)",
      "numba (>=0.53.1)",
      "python-Levenshtein (>=0.12.2)",
      "pynndescent (>=0.5.4)",
      "scipy (>=1.7.0)",
      "scikit-learn (>=0.0)",
      "tqdm (>=4.61.2)"
    ],
    "requires_python": "",
    "summary": "Fast k-NN graph construction for slow metrics",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11253709,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1175fd0a9e74c898ef568e248412b9645d26cea6f7dad3a044a18f8827710822",
          "md5": "e391a8f9e742c47b74a1374238f36869",
          "sha256": "d1016b6ba77307a670d9ba2d2b85b55950f5f782baa85eea9efc09b4713e4573"
        },
        "downloads": -1,
        "filename": "annchor-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e391a8f9e742c47b74a1374238f36869",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9321586,
        "upload_time": "2021-08-23T16:01:01",
        "upload_time_iso_8601": "2021-08-23T16:01:01.158783Z",
        "url": "https://files.pythonhosted.org/packages/11/75/fd0a9e74c898ef568e248412b9645d26cea6f7dad3a044a18f8827710822/annchor-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b504394a97fcce285a79dc8f765c0a30c5da68c8ad66d9a8dc6cb339ccdfded",
          "md5": "1e3a881a272bf74e872c4217acddcf24",
          "sha256": "ad3f46e3189fcb45c01d1648ddd01d7b2b778c00411edacc3f76fe758934a016"
        },
        "downloads": -1,
        "filename": "annchor-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e3a881a272bf74e872c4217acddcf24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9237227,
        "upload_time": "2021-08-23T16:01:04",
        "upload_time_iso_8601": "2021-08-23T16:01:04.610782Z",
        "url": "https://files.pythonhosted.org/packages/5b/50/4394a97fcce285a79dc8f765c0a30c5da68c8ad66d9a8dc6cb339ccdfded/annchor-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1175fd0a9e74c898ef568e248412b9645d26cea6f7dad3a044a18f8827710822",
        "md5": "e391a8f9e742c47b74a1374238f36869",
        "sha256": "d1016b6ba77307a670d9ba2d2b85b55950f5f782baa85eea9efc09b4713e4573"
      },
      "downloads": -1,
      "filename": "annchor-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e391a8f9e742c47b74a1374238f36869",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9321586,
      "upload_time": "2021-08-23T16:01:01",
      "upload_time_iso_8601": "2021-08-23T16:01:01.158783Z",
      "url": "https://files.pythonhosted.org/packages/11/75/fd0a9e74c898ef568e248412b9645d26cea6f7dad3a044a18f8827710822/annchor-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b504394a97fcce285a79dc8f765c0a30c5da68c8ad66d9a8dc6cb339ccdfded",
        "md5": "1e3a881a272bf74e872c4217acddcf24",
        "sha256": "ad3f46e3189fcb45c01d1648ddd01d7b2b778c00411edacc3f76fe758934a016"
      },
      "downloads": -1,
      "filename": "annchor-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1e3a881a272bf74e872c4217acddcf24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9237227,
      "upload_time": "2021-08-23T16:01:04",
      "upload_time_iso_8601": "2021-08-23T16:01:04.610782Z",
      "url": "https://files.pythonhosted.org/packages/5b/50/4394a97fcce285a79dc8f765c0a30c5da68c8ad66d9a8dc6cb339ccdfded/annchor-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}