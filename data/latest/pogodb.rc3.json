{
  "info": {
    "author": "Polydojo, Inc.",
    "author_email": "8079593+sumukhbarve@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License"
    ],
    "description": "PogoDB\n=======\n\nSimple NoSQL wrapper around Postgres' JSONB type.\n\nInstallation\n--------------\nPogoDB is installable via pip, following a *two-step* process:\n1. `pip install pogodb`\n2. `pip install psycopg2` ***OR*** `pip install psycopg2-binary`\n\nSince the `psycopg2`/`psycopg2-binary` split, instead of forcing a dependency on either one, the choice is left to you. PogoDB should work with either. *Tip:*  If `pip install psycopg2` fails, try `pip install psycopg2-binary`.\n\nQuickstart\n--------------\nTo connect from a Python Shell, use `pogodb.shellConnect(.)`.\n```py\n>>> import pogodb\n>>> db = pogodb.shellConnect(\"postgres://..dsn..\")\nConnection opened. Call `.close()` to close.\n>>> db.insertOne({\"_id\": \"foo\", \"value\": \"foobar\"})\n>>> db.findOne(\"foo\")\n{'_id': 'foo', 'value': 'foobar'}\n>>> db.close()\nConnection committed & closed. Call `.reopen()` to resume.\n>>>\n```\n*Note:* `pogodb.shellConnect(.)` is meant only for *quick and dirty* shell connections. You need to explicitly call `db.close()` to commit the transaction and close the connection.\n\nConnecting Properly\n-------------------------\n\n**Context Manager:**\n\nUsing `with pogodb.connect(.) as db` is a better way to connect. On exiting the `with` block, the transaction is auto-committed and the connection is auto-closed.\n```py\nimport pogodb\nwith pogodb.connect(\"postgres://..dsn..\") as db:\n    db.insertOne({\"_id\": \"bar\", \"value\": \"foobar\"})\n    # etc. ...\n```\n\n**Connection Decorator:**\nFor frequently connecting to the same database, consider setting up a connection decorator as follows:\n```py\nimport pogodb\ndbConnect = pogodb.makeConnector(\"postgres://..dsn..\")\n\n@dbConnect\ndef yourLogic (db):\n    db.insertOne({\"_id\": \"baz\", \"value\": \"quax\"})\n    # etc. ...\n```\nThe decorator supplies the `db` parameter to the decorated function. The parameter is supplied by name, so it must be called `db`, not `myDb` or something else. That is, `@dbConnect` automatically passes `db` to `yourLogic`, on each call.\n\n**Parameter `skipSetup`:**  \nBoth `pogodb.connect(.)` and `pogodb.makeConnector(.)` accept `skipSetup` as a parameter, which defaults to `False`. By default, PogoDB runs some setup-code upon each connection.\n\n_After_ your first interaction with the the database through  PogoDB, to _avoid_ unnecessary setup, pass `skipSetup=True`.\n\n**Parameter `verbose`:**\nEach connection method accepts `verbose` as a parameter, defaulting to `False`. If `True`, details regarding connecting to Postgres and executing SQL are printed using `print(.)`.\n\nInserting Data\n------------------\n```py\n# Insert a single document:\ndb.insertOne({\n   \"_id\":\"a\", \"author\":\"Alice\", \"text\":\"AA\", \"rank\":0,\n})\n# Insert multiple documents:\ndb.insertMany([\n  {\"_id\":\"b\", \"author\":\"Becci\", \"text\":\"BB\", \"rank\":1},\n  {\"_id\":\"c\", \"author\":\"Cathy\", \"text\":\"CC\", \"rank\":2},\n  {\"_id\":\"d\", \"author\":\"Alice\", \"text\":\"DD\", \"rank\":1},\n]);\n```\n\n**Document Model:**  \nEach document must:\n- be a JSON-serializable `dict` or dict-like object, *and*\n- have a *unique string* value corresponding to the `\"_id\"` key.\n\nRetrieving Data\n-------------------\nIn continuation with the above code snippet ...\n```py\n# Find by _id:\ntaskA = db.findOne(\"a\");\nprint(taskA.author, \"-\", taskA.text)\n# Output: Alice - AA\n\n# Find by sub-document:\ntaskB = db.findOne({\"author\": \"Becci\"});\nprint(taskB.author, \"-\", taskB.text)\n# Output: Becci - BB\n\n# Find multiple:\naliceTasks = db.find({\"author\": \"Alice\"})\nassert aliceTasks[0] == taskA and len(aliceTasks) == 2\ntaskD = aliceTasks[1];\nprint(taskD.author, \"-\", taskD.text)\n# Output: Alice - DD\n```\nNote: If no matching document is found, `.findOne(.)` returns `None` while `.find(.)` returns an empty list.\n\nUpdating Data\n------------------\nIn continuation with the above code snippet ...\n```py\n# Replace document:\ntaskA.text = \"New AA\"           # <-- Update in-memory\ntaskA.x = {\"y\": 10, \"z\": 20}\ndb.replaceOne(taskA);           # <-- Propagate to db\nprint([db.findOne(taskA._id).text, taskA.x])\n# Output: ['New AA', {'y': 10, 'z': 20}]\n\n# Increment within document:\ndb.incr({\"_id\": \"a\"}, \"x.y\", 1) # Incr x.y by 1\nprint(db.findOne(\"a\").x)\n# Output: {'y': 11, 'z': 20}\n\n# Decrement:\ndb.decr({\"_id\": \"a\"}, \"x.z\", 1) # Decr x.z by 1\nprint(db.findOne(\"a\").x)\n# Output: {'y': 11, 'z': 19}\n```\n\nDeleting Data\n-----------------\nIn continuation with the above code snippet ...\n```py\n# Delete by _id:\ndb.deleteOne(\"a\");\nprint(db.findOne(\"a\"))\n# Output: None\n```\nAs of writing, you can only delete one document at a time, by `_id`.\n\nQuick Plug\n--------------\nPogoDB built and maintained by the folks at [Polydojo, Inc.](https://www.polydojo.com/), led by Sumukh Barve. If your team is looking for a simple project management tool, please check out our latest product: [BoardBell.com](https://www.boardbell.com/).\n\nType Identifiers\n-------------------\n\nPogoDB doesn't include buckets, collections or other such concepts for **logically grouping** different types of objects. But you can use a key for differentiating objects of various types.\n\n**Convention:**  \nKeeping things simple, we recommend using the `\"type\"` key for indicating the type of a document/object.\n\n**Example:**  \nIn a blogging app, you'll have to deal with users, posts, comments and other types of object. \n\n```py\n# Insert users:\ndb.insertMany([\n    {\"_id\": \"00\", \"type\":\"user\", \"name\": \"Alice\"},\n    {\"_id\": \"01\", \"type\":\"user\", \"name\": \"Becci\"},\n    {\"_id\": \"02\", \"type\":\"user\", \"name\": \"Cathy\"},\n]);\n\n# Insert posts:\ndb.insertMany([\n    {\"_id\": \"03\", \"type\":\"post\", \"authorId\": \"00\",\n        \"title\": \"Title X .. \", \"body\": \"Body X ..\"},\n    {\"_id\": \"04\", \"type\":\"post\", \"authorId\": \"01\",\n        \"title\": \"Title Y .. \", \"body\": \"Body Y ..\"},\n    {\"_id\": \"05\", \"type\":\"post\", \"authorId\": \"02\",\n        \"title\": \"Title Z .. \", \"body\": \"Body Z ..\"},\n    {\"_id\": \"06\", \"type\":\"post\", \"authorId\": \"00\",\n        \"title\": \"Title A .. \", \"body\": \"Body A ..\"},\n]);\n\n# Insert comments:\ndb.insertMany([\n    {\"_id\": \"07\", \"type\":\"comment\", \"authorId\": \"02\",\n        \"postId\": \"03\", \"text\": \"Comment P ..\"},\n    {\"_id\": \"08\", \"type\":\"comment\", \"authorId\": \"01\",\n        \"postId\": \"04\", \"text\": \"Comment Q ..\"},\n    {\"_id\": \"09\", \"type\":\"comment\", \"authorId\": \"00\",\n        \"postId\": \"05\", \"text\": \"Comment R ..\"},\n]);\n\n# Get all users:\ndb.find({\"type\": \"user\"});\n\n# Get all posts:\ndb.find({\"type\": \"post\"});\n\n# Get posts by a specific author:\ndef getPostByAuthor (userId):\n    return db.find({\"type\":\"post\", \"authorId\":userId})\n\n# Get comments on a specific post:\ndef getCommentsByPost (postId):\n    return db.find({\"type\":\"comment\", \"postId\":postId})\n\n# Get comments by a specific user:\ndef getCommentsByUser (userId):\n    return db.find({\"type\":\"user\", \"authorId\":userId})\n```\n\nAs you can see, using the `\"type\"` key allows us to limit our query to a specific type. In continuation with the above code snippet, consider ...\n```py\ndef typed_getPostById (postId):\n    return db.findOne({\"_id\": postId, \"type\": \"post\"});\n\ndef untyped_getPostById (postId):\n    return db.findOne({\"_id\": postId})\n\nprint(typed_getPostById(\"00\"))   # Correct result.\n# Output: None\n\nprint(untyped_getPostById(\"00\")) # Weird result.\n# Output: {'_id': '00', 'name': 'Alice', 'type': 'user'} \n```\n\nIn the above example, `\"00\"` corresponds to Alice's `\"user\"` object. It's not a `\"post\"`. Yet `untyped_getPostById(.)` (incorrectly) returns it because it is type-blind.\n\nSQL Familiarity\n-------------------\n\nFrom this point, the documentation assumes basic familiarity with SQL and Postgres' JSONB type. If you aren't familiar with these, you may safely skip most of the documentation below. However, please note that such familiarity would be required for running advanced, fine-grained queries.\n\nUnder The Hood\n---------------------\nUnder the hood, PogoDB creates a single table named `pogotbl` with a single `JSONB` column named `doc` (for document).\n\nWhen you call `db.find(.)`, PogoDB uses Postgres' `@>` to find and fetch the relevant documents. For example, calling `db.find({\"type\": \"post\"})` will result in the following underlying SQL query:\n```sql\nSELECT doc FROM pogotbl WHERE doc @> '{\"type\": \"post\"}';\n```\nThe above SQL will produce a list of records of type`psycopg2.extras.RealDictCursor`, each with just one column: `\"doc\"`. That is, the list of records is of the form:\n```json\n[   {\"doc\": {\"_id\": \"1..\", \"type\": \"post\", ...}},\n    {\"doc\": {\"_id\": \"2..\", \"type\": \"post\", ...}},\n    ...\n]\n```\nAfter executing the SQL, `db.find(.)` plucks the `\"doc\"` column from each record and returns the resultant list, which is (as expected,) of the form:\n```json\n[   {\"_id\": \"1..\", \"type\": \"post\", ...},\n    {\"_id\": \"2..\", \"type\": \"post\", ...},\n    ...\n]\n```\nAdditionally, `db.find(.)` ensures that each returned document is a dot-accessible dictionary, thanks to [Dotsi](https://github.com/polydojo/dotsi). That is, you can use dot-notation (like `post._id`) in addition to square-bracket notation (like `post[\"_id\"]`).\n\nCustom `WHERE` Clause\n------------------------------------\n\nLet's say you've stored the following exam-results using PogoDB:\n```json\n[   {\"_id\":\"1\", \"studentId\":\"X\", \"subjectId\":\"M\", \"score\": 70},\n    {\"_id\":\"2\", \"studentId\":\"Y\", \"subjectId\":\"M\", \"score\": 75},\n    {\"_id\":\"3\", \"studentId\":\"Z\", \"subjectId\":\"M\", \"score\": 80},\n    {\"_id\":\"4\", \"studentId\":\"X\", \"subjectId\":\"N\", \"score\": 85},\n    {\"_id\":\"5\", \"studentId\":\"Y\", \"subjectId\":\"N\", \"score\": 90},\n    {\"_id\":\"6\", \"studentId\":\"Z\", \"subjectId\":\"N\", \"score\": 95},\n]\n```\n\nTo find *all* results for *Subject M*, we'd write `db.find({\"subjectId\": \"M\"})`, which'd result in the underlying SQL query:\n```sql\nSELECT doc FROM pogotbl WHERE doc @> '{\"subjectId\": \"M\"}';\n```\n\nBut how about retrieving ***only those*** results for *Subject M*, where the *score* is `75` or higher? In raw SQL, we could've written:\n```sql\nSELECT doc FROM pogotbl\n  WHERE doc @> '{\"subjectId\": \"M\"}'\n    AND (doc->>'score')::int >= 75;\n```\n\nWith regard to the two SQL queries above, note that the `WHERE` clause additionally includes `AND (doc->>'score')::int >= 75`. You can pass this extra bit to `db.find(.)` using the `whereEtc` parameter:\n```py\ndb.find({\"subjectId\": \"M\"},\n    whereEtc=\"AND (doc->>'score')::int >= 75\"\n)\n```\n\nIn fact, `db.find(.)` is very flexible. Its full signature is documented below.\n\nFull `db.find(.)` Signature\n----------------------------------\n\n`db.find(.)` accepts 4 parameters:\n1. `subdoc` (required): The sub-document to match against.\n2. `whereEtc` (optional): Anything that should go ***after*** PogoDB's  default SQL `WHERE` clause.\n3. `argsEtc` (optional): Tuple (or list) for placeholder-substitution against `whereEtc`.\n4. `limit` (optional): The maximum number of results desired. (Either use this param or add the SQL `LIMIT` clause in `whereEtc`; don't do both.)\n\n**Note:** `db.findOne(.)` has the same signature as `db.find(.)`, except of course, that it doesn't have a `limit` parameter (and neither does it expect to see the `LIMIT` clause in `whereEtc`).\n\n`ORDER BY`, `LIMIT`  Etc.\n------------------------------\nEverything in `whereEtc` is placed directly in the executed SQL. (Of course, placeholder-substitution is performed carefully. More on this later.) Thus, by using `whereEtc`, not only can you specify additional matching conditions (like `AND (doc->>'score')::int >= 75`), but you can also include other SQL clauses such as `ORDER BY`, `LIMIT` etc.\n\n**SORTING:**\nContinuing the above exam-results example, to find results for *Subject M* sorted by *Student IDs* (lowest to highest):\n```py\ndb.find({\"subjectId\": \"M\"},\n    whereEtc=\"ORDER BY doc->>'studentId' ASC\"\n)\n```\nThe underlying SQL executed by PogoDB will be:\n```sql\nSELECT doc FROM pogotbl WHERE doc @> '{\"subjectId\": \"M\"}'\n    ORDER BY doc->>'studentId' ASC;\n```\n\n**LIMITING:**\nTo find the *top 2* results for *Subject M*, we can use:\n```py\ndb.find({\"subjectId\": \"M\"},\n    whereEtc=\"ORDER BY (doc->>'score')::int DESC\",\n    limit=2\n)\n```\nOr equivalently:\n```py\ndb.find({\"subjectId\": \"M\"},\n    whereEtc=\"ORDER BY (doc->>'score')::int DESC LIMIT 2\"\n)\n```\nIn either case, the underlying SQL executed by PogoDB will be:\n```sql\nSELECT doc FROM pogotbl WHERE doc @> '{\"subjectId\": \"M\"}'\n    ORDER BY (doc->>'score')::int DESC\n    LIMIT 2;\n```\n\n**PLACEHOLDERS:**\nLet's write a function for finding the top N (`n`) results for a given subject (`subjectId`), at or above a given threshold (`minScore`).\n```py\nimport pogodb;\ndbConnect = pogodb.makeConnector(\"postgres://..dsn..\");\n\n@dbConnect\ndef getTopN (n, subjectId, minScore, db):\n  return db.find({\"subjectId\": subjectId},\n    whereEtc=\"AND (doc->>'score')::int >= %s ORDER BY (doc->>'score')::int DESC\",\n    argsEtc=[minScore],\n    limit=n\n  );\n```\nAlternatively:\n```py\n@dbConnect\ndef getTopN (n, subjectId, minScore, db):\n  return db.find({\"subjectId\": subjectId},\n    whereEtc=\"AND (doc->>'score')::int >= %s ORDER BY (doc->>'score')::int DESC LIMIT %s\",\n    argsEtc=[minScore, n],\n  );\n```\nNote: Placeholder substitution is deferred to [Psycopg's `cursor.execute(.)` method](https://www.psycopg.org/docs/cursor.html#cursor.execute), which should prevent [SQL-injection](https://owasp.org/www-community/attacks/SQL_Injection).\n\n**Warning:** Do **NOT** use string concatenation (i.e. `+`, `str.join(.)`, etc.) or string interpolation (i.e. `%`, `str.format(.)`,  etc.) along with `whereEtc`. Pass `argsEtc` instead.\n\n\nExecuting Raw SQL\n------------------------\nIf you'd like to execute raw SQL, we recommend using [Psycopg](https://www.psycopg.org/) directly. We recommend *against* using `db._execute(.)`.\n\nTypically, `db._execute(.)` should only be relevant to PogoDB's maintainers. It accepts three parameters:\n1. `stmt` (required): The SQL statement to be executed.\n2. `args` (optional): Tuple (or list) for `%s` placeholder substitution.\n3. `fetch` (optional): Either `None` (optional), `\"one\"` or `\"all\"`.\n\nParameters `stmt` and `args` are passed directly to Psycopg's `cursor.execute(.)` method. Based on `fetch`, none, one or all records are fetched.\n\nA close cousin to `db._execute(.)` is `db._findSql(.)`, which is useful for executing `SELECT` queries. It only accepts `stmt` (required) and `args` (optional), as described above. It fetches all matching results, plucks the `doc` column, ensures dot-accessibility of dictionary objects, and returns the result.\n\nLicensing\n------------\nCopyright (c) 2020 Polydojo, Inc.\n\n**Software Licensing:**  \nThe software is released \"AS IS\" under the **Apache License 2.0**, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Kindly see [LICENSE.txt](https://github.com/polydojo/pogodb/blob/master/LICENSE.txt) for more details.\n\n**No Trademark Rights:**  \nThe above software licensing terms **do not** grant any right in the trademarks, service marks, brand names or logos of Polydojo, Inc.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/polydojo/pogodb",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pogodb",
    "package_url": "https://pypi.org/project/pogodb/",
    "platform": "",
    "project_url": "https://pypi.org/project/pogodb/",
    "project_urls": {
      "Homepage": "https://github.com/polydojo/pogodb"
    },
    "release_url": "https://pypi.org/project/pogodb/0.0.3/",
    "requires_dist": [
      "dotsi >=0.0.1"
    ],
    "requires_python": "",
    "summary": "PogoDB: Simple NoSQL wrapper around Postgres' JSONB type.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8626796,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3028034f48ebec082a856a3eb887066b15f3b50c241864a3bfee6156d2da8b67",
          "md5": "480057730b0e2bf4ea2cd9e492babe20",
          "sha256": "090157a75508d337f93daba7fa305f3c2bb38eeb2a1a75edb85aa824cc5ce252"
        },
        "downloads": -1,
        "filename": "pogodb-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "480057730b0e2bf4ea2cd9e492babe20",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10286,
        "upload_time": "2020-10-28T18:03:11",
        "upload_time_iso_8601": "2020-10-28T18:03:11.754377Z",
        "url": "https://files.pythonhosted.org/packages/30/28/034f48ebec082a856a3eb887066b15f3b50c241864a3bfee6156d2da8b67/pogodb-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4689c8bc7cd539c54627d3120a8110e810f8450a94ed0032e4ebfcf10b1eba7",
          "md5": "ff7f19e4440419306d8b854af1d0a73f",
          "sha256": "60baedab172b32ffdf66c8ea097ba531dfe998a38dc28ff4aea4774444d0bbca"
        },
        "downloads": -1,
        "filename": "pogodb-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff7f19e4440419306d8b854af1d0a73f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9388,
        "upload_time": "2020-10-28T18:03:20",
        "upload_time_iso_8601": "2020-10-28T18:03:20.249230Z",
        "url": "https://files.pythonhosted.org/packages/f4/68/9c8bc7cd539c54627d3120a8110e810f8450a94ed0032e4ebfcf10b1eba7/pogodb-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c35d44644fb49caa4d3013e6504485818b6202eb2f22fa8c163d942232e1d5fd",
          "md5": "4c22dd68fdaa208a667926abacb71dc7",
          "sha256": "65c9da655db489bfa9f0e558c67e1593c53a0fc6fa46fc10c9994e1c67be8909"
        },
        "downloads": -1,
        "filename": "pogodb-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c22dd68fdaa208a667926abacb71dc7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11314,
        "upload_time": "2020-10-29T19:37:45",
        "upload_time_iso_8601": "2020-10-29T19:37:45.531540Z",
        "url": "https://files.pythonhosted.org/packages/c3/5d/44644fb49caa4d3013e6504485818b6202eb2f22fa8c163d942232e1d5fd/pogodb-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85ed6e465dba8eadfbe21dbd0cf1d45e60ef3ee7e77e354fc8fa9a1a72307c12",
          "md5": "d645fa6982e73c08246fdcb3a70660bf",
          "sha256": "43d2dee7227afea2af6d897624795ae801e8c191e8d670034aa3f04330e22766"
        },
        "downloads": -1,
        "filename": "pogodb-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d645fa6982e73c08246fdcb3a70660bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11370,
        "upload_time": "2020-10-29T19:37:52",
        "upload_time_iso_8601": "2020-10-29T19:37:52.010818Z",
        "url": "https://files.pythonhosted.org/packages/85/ed/6e465dba8eadfbe21dbd0cf1d45e60ef3ee7e77e354fc8fa9a1a72307c12/pogodb-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61be3b6ebd9ba15649a1d62c809f811e90a96e6157506d89db60da45ae47251a",
          "md5": "2729511b5d3e777966ecc30d144ced70",
          "sha256": "91c2129f2b878bcd2e96cb276e2b412e558d728fca1886a53f4d96ce4b163ce7"
        },
        "downloads": -1,
        "filename": "pogodb-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2729511b5d3e777966ecc30d144ced70",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13911,
        "upload_time": "2020-11-10T20:40:41",
        "upload_time_iso_8601": "2020-11-10T20:40:41.221224Z",
        "url": "https://files.pythonhosted.org/packages/61/be/3b6ebd9ba15649a1d62c809f811e90a96e6157506d89db60da45ae47251a/pogodb-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9302a0d57c05740a38745e42b002c98ca43350506f31a1457afeb072d70f524d",
          "md5": "b3b055e3bb25a8a599df28d82aef6407",
          "sha256": "b058a1955f4ab099f8f2a749a9caa4455c95565e757ebaca3013f286b5c45e92"
        },
        "downloads": -1,
        "filename": "pogodb-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b3b055e3bb25a8a599df28d82aef6407",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14247,
        "upload_time": "2020-11-10T20:40:47",
        "upload_time_iso_8601": "2020-11-10T20:40:47.623790Z",
        "url": "https://files.pythonhosted.org/packages/93/02/a0d57c05740a38745e42b002c98ca43350506f31a1457afeb072d70f524d/pogodb-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61be3b6ebd9ba15649a1d62c809f811e90a96e6157506d89db60da45ae47251a",
        "md5": "2729511b5d3e777966ecc30d144ced70",
        "sha256": "91c2129f2b878bcd2e96cb276e2b412e558d728fca1886a53f4d96ce4b163ce7"
      },
      "downloads": -1,
      "filename": "pogodb-0.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2729511b5d3e777966ecc30d144ced70",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 13911,
      "upload_time": "2020-11-10T20:40:41",
      "upload_time_iso_8601": "2020-11-10T20:40:41.221224Z",
      "url": "https://files.pythonhosted.org/packages/61/be/3b6ebd9ba15649a1d62c809f811e90a96e6157506d89db60da45ae47251a/pogodb-0.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9302a0d57c05740a38745e42b002c98ca43350506f31a1457afeb072d70f524d",
        "md5": "b3b055e3bb25a8a599df28d82aef6407",
        "sha256": "b058a1955f4ab099f8f2a749a9caa4455c95565e757ebaca3013f286b5c45e92"
      },
      "downloads": -1,
      "filename": "pogodb-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b3b055e3bb25a8a599df28d82aef6407",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14247,
      "upload_time": "2020-11-10T20:40:47",
      "upload_time_iso_8601": "2020-11-10T20:40:47.623790Z",
      "url": "https://files.pythonhosted.org/packages/93/02/a0d57c05740a38745e42b002c98ca43350506f31a1457afeb072d70f524d/pogodb-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}