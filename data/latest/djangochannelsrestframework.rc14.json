{
  "info": {
    "author": "LostMoa Limited",
    "author_email": "info@lostmoa.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "==============================\nDjango Channels Rest Framework\n==============================\n\nDjango Channels Rest Framework provides a DRF like interface for building channels-v3_ websocket consumers.\n\n\nThis project can be used alongside HyperMediaChannels_ and ChannelsMultiplexer_ to create a Hyper Media Style api over websockets. However Django Channels Rest Framework is also a free standing framework with the goal of providing an api that is familiar to DRF users.\n\ntheY4Kman_ has developed a useful Javascript client library dcrf-client_ to use with DCRF.\n\nThanks to\n---------\n\n\nDCRF is based of a fork of `Channels Api <https://github.com/linuxlewis/channels-api>`_ and of course inspired by `Django Rest Framework <http://www.django-rest-framework.org/>`_.\n\nDocumentation\n-------------\nReadTheDocs_\n\n\nInstall\n-------\n\n.. code-block:: bash\n  \n  pip install djangochannelsrestframework\n\n\n.. warning ::\n\n            In your application definition when you declare your consumers it is very important to use the ``.as_asgi()`` class method (e.g. ``MyConsumer.as_asgi()``). You **should not** have any instances of ``MyConsumer()`` in your code base.\n\n\n\nA Generic Api Consumer\n----------------------\nIn DCRF you can create a ``GenericAsyncAPIConsumer`` that works much like a GenericAPIView_ in DRF: For a more indepth look into Rest-Like Websocket consumers read this blog post_.\n\n\n.. code-block:: python\n\n    from . import models\n    from . import serializers\n    from djangochannelsrestframework import permissions\n    from djangochannelsrestframework.generics import GenericAsyncAPIConsumer\n    from djangochannelsrestframework.mixins import (\n        ListModelMixin,\n        PatchModelMixin,\n        UpdateModelMixin,\n        CreateModelMixin,\n        DeleteModelMixin,\n    )\n\n    class LiveConsumer(ListModelMixin, GenericAsyncAPIConsumer):\n        queryset = models.Test.objects.all()\n        serializer_class = serializers.TestSerializer\n        permission_classes = (permissions.IsAuthenticated,)\n\n\nBecause this class uses the ``ListModelMixin``, one has access to the ``list`` action.\n\nOne may use the same exact querysets and ``serializer_class`` utilized in their DRF Views, but must omit the DRF permissions. Permissions are to be imported from ``djangochannelsrestframework``, which provides the standard ``AllowAny`` and ``IsAuthenticated`` permissions.\n\nTo call an action from the client send a websocket message: ``{action: \"list\", \"request_id\": 42}``\n\n\nThere are a selection of mixins that expose the common CRUD actions:\n\n* ``ListModelMixin`` - ``list``\n* ``PatchModelMixin`` - ``patch``\n* ``CreateModelMixin`` - ``create``\n* ``RetrieveModelMixin`` - ``retrieve``\n* ``UpdateModelMixin`` - ``update``\n* ``DeleteModelMixin`` - ``delete``\n\n\nObserving a Model instance\n--------------------------\n\nConsumer that let you subscribe to changes on an instance:\n\n.. code-block:: python\n\n   class TestConsumer(ObserverModelInstanceMixin, GenericAsyncAPIConsumer):\n       queryset = get_user_model().objects.all()\n       serializer_class = UserSerializer\n\nthis exposes the ``retrieve``, ``subscribe_instance`` and ``unsubscribe_instance`` actions.\n\nTo subscribe send:\n\n.. code-block:: python\n\n   {\n       \"action\": \"subscribe_instance\",\n       \"pk\": 42,  # the id of the instance you are subscribing to\n       \"request_id\": 4  # this id will be used for all result updates.\n   }\n\n\nActions will be sent down out from the server:\n\n.. code-block:: python\n\n  {\n    \"action\": \"update\",\n    \"errors\": [],\n    \"response_status\": 200,\n    \"request_id\": 4,\n    \"data\": {'email': '42@example.com', 'id': 42, 'username': 'thenewname'},\n  }\n\nAdding Custom actions\n---------------------\n\n\n.. code-block:: python\n\n   class UserConsumer(GenericAsyncAPIConsumer):\n       queryset = get_user_model().objects.all()\n       serializer_class = UserSerializer\n\n       @action()\n       async def send_email(self, pk=None, to=None, **kwargs):\n           user = await database_sync_to_async(self.get_object)(pk=pk)\n           # ... do some stuff\n           # remember to wrap all db actions in `database_sync_to_async`\n           return {}, 200  # return the context and the response code.\n\n       @action()  # if the method is not async it is already wrapped in `database_sync_to_async`\n       def publish(self, pk=None, **kwargs):\n           user = self.get_object(pk=pk)\n           # ...\n           return {'pk': pk}, 200\n\nConsumers that are not bound to Models\n--------------------------------------\n\nYou can also create consumers that are not at all related to any models.\n\n.. code-block:: python\n\n  from djangochannelsrestframework.decorators import action\n  from djangochannelsrestframework.consumers import AsyncAPIConsumer\n\n\n  class MyConsumer(AsyncAPIConsumer):\n\n      @action()\n      async def an_async_action(self, some=None, **kwargs):\n          # do something async\n          return {'response with': 'some message'}, 200\n      \n      @action()\n      def a_sync_action(self, pk=None, **kwargs):\n          # do something sync\n          return {'response with': 'some message'}, 200\n\nUsing your normal views over a websocket connection\n---------------------------------------------------\n\n.. code-block:: python\n  \n  from djangochannelsrestframework.consumers import view_as_consumer\n\n  application = ProtocolTypeRouter({\n      \"websocket\": AuthMiddlewareStack(\n          URLRouter([\n              url(r\"^front(end)/$\", view_as_consumer(YourDjangoView)),\n          ])\n      ),\n   })\n\n\n\nIn this situation if your view needs to read the `GET` query string values you can provides these using the `query` option.\nAnd if the view method reads parameters from the URL you can provides these with the `parameters`.\n\nSending the following over your WS connection will result in a GET request being evaluated on your View.\n\n.. code-block:: javascript\n\n    {\n      action: \"retrieve\",\n      query: {\"user_id\": 42}\n      parameters: {\"project_id\": 92}\n    }\n\n\n\nSubscribing to a signal.\n------------------------\n\nOne can subscribe to a custom ``Signal`` utilizing the ``observer`` decorator.\n\nHere we have a custom signal that will be triggered when a user join a chat.\n\n.. code-block:: python\n\n    # signals.py\n    from django.dispatch.dispatcher import Signal\n\n    joined_chat_signal = Signal()\n\nNow we will create the consumer with two actions, one for subscribing to our custom signal for specific chat, and another one \nfor manually trigger the signal.\n\n.. code-block:: python\n\n    # consumers.py\n    from djangochannelsrestframework.consumers import AsyncAPIConsumer\n    from djangochannelsrestframework.decorators import action\n    from djangochannelsrestframework.observer import observer\n    from rest_framework import status\n    from .signals import joined_chat_signal\n    from .serializers import UserSerializer\n\n\n    class TestConsumer(AsyncAPIConsumer):\n\n        @action()\n        def join_chat(self, chat_id, **kwargs):\n            serializer = UserSerializer(instance=self.scope['user'])\n            joined_chat_signal.send(sender='join_chat', data=serializer.data, **kwargs)\n            return {}, status.HTTP_204_NO_CONTENT\n\n        @observer(signal=joined_chat_signal)\n        async def joined_chat_handler(self, data, observer=None, action=None, subscribing_request_ids=[], **kwargs):\n            for request_id in subscribing_request_ids:\n                await self.reply(action='joined_chat', data=data, status=status.HTTP_200_OK, request_id=request_id)\n\n        @joined_chat_handler.serializer\n        def join_chat_handler(self, sender, data, **kwargs): # the data comes from the signal.send and will be available in the observer\n            return data\n\n        @joined_chat_handler.groups_for_signal\n        def joined_chat_handler(self, instance, **kwargs):\n            yield f'chat__{instance}'\n\n        @joined_chat_handler.groups_for_consumer\n        def joined_chat_handler(self, chat, **kwargs):\n            if chat:\n                yield f'chat__{chat}'\n\n        @action()\n        async def subscribe_joined(self, chat_id, request_id, **kwargs):\n            await self.joined_chat_handler.subscribe(chat_id, request_id=request_id)\n\n\nSubscribing to all instances of a model\n---------------------------------------\n\nOne can subscribe to all instances of a model by utilizing the ``model_observer``.\n\n.. code-block:: python\n\n    from djangochannelsrestframework.observer import model_observer\n\n    @model_observer(models.Test)\n    async def model_activity(self, message, observer=None, action=None, **kwargs):\n        # send activity to your frontend\n        await self.send_json(message)\n\nThis method will send messages to the client on all CRUD operations made through the Django ORM. The `action` arg here it will take values such as `create`, `delete` and `update` you should consider passing this to your frontend client.\n\nNote: These notifications do not include bulk updates, such as ``models.Test.objects.filter(name=\"abc\").update(name=\"newname\")``\n\n\n    **WARNING**\n    When using this to decorate a method to avoid the method firing multiple\n    times you should ensure that if there are multiple `@model_observer`\n    wrapped methods for the same model type within a single file that each\n    method has a different name.\n\n\nSubscribing to a `model_observer`\n=================================\n\nYou can do this in a few placed, a common example is in the ``websocket_connect`` method.\n\n.. code-block:: python\n\n    async def websocket_connect(self, message):\n\n        # Super Save\n        await super().websocket_connect(message)\n\n        # Initialized operation\n        await self.activities_change.subscribe()\n\n\nThis method utilizes the previously mentioned ``model_activity`` method to subscribe to all instances of the current Consumer's model.\n\nOne can also subscribe by creating a custom action\n\nAnother way is override ``AsyncAPIConsumer.accept(self, **kwargs)``\n\n.. code-block:: python\n\n    class ModelConsumerObserver(AsyncAPIConsumer):\n\n        async def accept(self, **kwargs):\n            await super().accept(** kwargs)\n            await self.model_change.subscribe()\n\n        @model_observer(models.Test)\n        async def model_change(self, message, action=None, **kwargs):\n            \"\"\"\n            This method is evaluated once for every user that subscribed,\n            here you have access to info about the user by reading `self.scope`\n\n            However it is best to avoid doing DB quires here since if you have lots of\n            subscribers to a given instance you will end up with a LOT of database traffic.\n            \"\"\"\n            await self.send_json(message)\n        \n        # If you want the data serialized instead of pk\n        @model_change.serializer\n        def model_serialize(self, instance, action, **kwargs):\n            \"\"\"\n            This block is evaluated before the data is sent over the channel layer\n            this means you are unable to access information\n            such as the user that it will be sent to.\n\n            If you need the user info when serializing then you can do the serialization\n            in the above method.\n            \"\"\"\n            return TestSerializer(instance).data\n\n.. note::\n\n    New Feature!\n    Now you can rewrite this as:\n    \n.. code-block:: python\n\n    class ModelConsumerObserver(AsyncAPIConsumer):\n\n        async def accept(self, **kwargs):\n            await super().accept(** kwargs)\n            await self.model_change.subscribe()\n\n        @model_observer(models.Test, serializer_class=TestSerializer)\n        async def model_change(self, message, action=None, **kwargs):\n            # in this case since we subscribe int he `accept` method\n            # we do not expect to have any `subscribing_request_ids` to loop over.\n            await self.reply(data=message, action=action)\n\n\n\nSubscribing to a filtered list of models\n========================================\n\nIn most situations you want to filter the set of models that you subscribe to.\n\nTo do this we need to split the model updates into `groups` and then in the consumer subscribe to the groups that we want/have permission to see.\n\n\n.. code-block:: python\n\n  class MyConsumer(AsyncAPIConsumer):\n    # This class MUST subclass `AsyncAPIConsumer` to use `@model_observer`\n\n    @model_observer(models.Classroom)\n    async def classroom_change_handler(\n        self,\n        message,\n        observer=None,\n        action=None,\n        subscribing_request_ids=[],\n        **kwargs\n    ):\n        # due to not being able to make DB QUERIES when selecting a group\n        # maybe do an extra check here to be sure the user has permission\n        # send activity to your frontend\n        for request_id in subscribing_request_ids:\n            # we can send a seperate message for each subscribing request\n            # this lets ws clients rout these messages.\n            await self.send_json(dict(body=message, action=action, request_id=request_id))\n        # note if we do not pass `request_id` to the `subscribe` method\n        # then `subscribing_request_ids` will be and empty list.\n\n    @classroom_change_handler.groups_for_signal\n    def classroom_change_handler(self, instance: models.Classroom, **kwargs):\n        # this block of code is called very often *DO NOT make DB QUERIES HERE*\n        yield f'-school__{instance.school_id}'\n        yield f'-pk__{instance.pk}'\n\n    @classroom_change_handler.groups_for_consumer\n    def classroom_change_handler(self, school=None, classroom=None, **kwargs):\n        # This is called when you subscribe/unsubscribe\n        if school is not None:\n            yield f'-school__{school.pk}'\n        if classroom is not None:\n            yield f'-pk__{classroom.pk}'\n\n    @action()\n    async def subscribe_to_classrooms_in_school(self, school_pk, request_id, **kwargs):\n        # check user has permission to do this\n        await self.classroom_change_handler.subscribe(school=school, request_id=request_id)\n\n    @action()\n    async def subscribe_to_classroom(self, classroom_pk, request_id, **kwargs):\n        # check user has permission to do this\n        await self.classroom_change_handler.subscribe(classroom=classroom, request_id=request_id)\n\n\n.. _ReadTheDocs: https://djangochannelsrestframework.readthedocs.io/en/latest/\n.. _post: https://lostmoa.com/blog/DjangoChannelsRestFramework/\n.. _GenericAPIView: https://www.django-rest-framework.org/api-guide/generic-views/\n.. _channels-v3: https://channels.readthedocs.io/en/latest/\n.. _dcrf-client: https://github.com/theY4Kman/dcrf-client\n.. _theY4Kman: https://github.com/theY4Kman\n.. _HyperMediaChannels: https://github.com/hishnash/hypermediachannels\n.. _ChannelsMultiplexer: https://github.com/hishnash/channelsmultiplexer\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lostmoa/djangochannelsrestframework",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangochannelsrestframework",
    "package_url": "https://pypi.org/project/djangochannelsrestframework/",
    "platform": null,
    "project_url": "https://pypi.org/project/djangochannelsrestframework/",
    "project_urls": {
      "Homepage": "https://github.com/lostmoa/djangochannelsrestframework"
    },
    "release_url": "https://pypi.org/project/djangochannelsrestframework/1.1.0/",
    "requires_dist": [
      "Django (>=2.2)",
      "channels (>=3.0)",
      "djangorestframework (>=3.0)",
      "pytest (>=7.0.1) ; extra == 'tests'",
      "pytest-django (>=4.5.2) ; extra == 'tests'",
      "pytest-asyncio (>=0.18.1) ; extra == 'tests'",
      "coverage (>=6.3.1) ; extra == 'tests'"
    ],
    "requires_python": ">=3.8",
    "summary": "RESTful API for WebSockets using django channels.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14388971,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ee0b0adcaab9bbacf18cc3616995a67f6f68782b782baf7e23ed52eb395264d",
          "md5": "aeacf2fd15c700c49ddc10c5c236ef45",
          "sha256": "69e929034073e41a42e69dfed7d04b6032d1dafc9769edb8003841ef587bab96"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aeacf2fd15c700c49ddc10c5c236ef45",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 17100,
        "upload_time": "2018-05-08T08:50:40",
        "upload_time_iso_8601": "2018-05-08T08:50:40.484484Z",
        "url": "https://files.pythonhosted.org/packages/6e/e0/b0adcaab9bbacf18cc3616995a67f6f68782b782baf7e23ed52eb395264d/djangochannelsrestframework-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13ef0af881781a5ab9da3486c3ee55a1e177b190b793ee55fbd7e36b9cbb3d2a",
          "md5": "cd751fbbdcb67b78186addd52af62c44",
          "sha256": "3205d807cbb516ffbf33cf88e907f9b0ce11883dfc2ec355018272ef7f7cf687"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd751fbbdcb67b78186addd52af62c44",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14975,
        "upload_time": "2018-08-18T14:35:33",
        "upload_time_iso_8601": "2018-08-18T14:35:33.715654Z",
        "url": "https://files.pythonhosted.org/packages/13/ef/0af881781a5ab9da3486c3ee55a1e177b190b793ee55fbd7e36b9cbb3d2a/djangochannelsrestframework-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c78cf7bdeb04bffeda5a8b5cd355b349a6b4425be2396bf9587d319d24ac543f",
          "md5": "25063f35f41d09671c2dce47f64d00f3",
          "sha256": "db218c3a1c410ac8bb84bc19fd50c49394693eb8bad34232afdb7ddd06433b69"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "25063f35f41d09671c2dce47f64d00f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13291,
        "upload_time": "2018-08-18T14:35:35",
        "upload_time_iso_8601": "2018-08-18T14:35:35.221293Z",
        "url": "https://files.pythonhosted.org/packages/c7/8c/f7bdeb04bffeda5a8b5cd355b349a6b4425be2396bf9587d319d24ac543f/djangochannelsrestframework-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5be4963653f7e5b529d0accbdd95399ff58d746481fb3f15aefa3df0e045f389",
          "md5": "b6dcd06f94d4f28c68eb1d3163394cac",
          "sha256": "7c7b1953575db732461632893d152e033a60df97fe412e6e56704cb8e78373ba"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6dcd06f94d4f28c68eb1d3163394cac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18840,
        "upload_time": "2020-04-09T21:43:26",
        "upload_time_iso_8601": "2020-04-09T21:43:26.829106Z",
        "url": "https://files.pythonhosted.org/packages/5b/e4/963653f7e5b529d0accbdd95399ff58d746481fb3f15aefa3df0e045f389/djangochannelsrestframework-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92a76a2561f2cfe1ee32b1851623e8ec67276768eec448ceec86825b7318a823",
          "md5": "280a9cf0b659ec3d9020a2c042a1c5a5",
          "sha256": "c814d37241b0c3906e9b2bac7e43bef5fc90705f42bfc1312230a715b183196c"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "280a9cf0b659ec3d9020a2c042a1c5a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17279,
        "upload_time": "2020-04-09T21:43:29",
        "upload_time_iso_8601": "2020-04-09T21:43:29.190231Z",
        "url": "https://files.pythonhosted.org/packages/92/a7/6a2561f2cfe1ee32b1851623e8ec67276768eec448ceec86825b7318a823/djangochannelsrestframework-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "759d35d04bd794c2c256ef5611add841c8017598b1080b086de39c293075712b",
          "md5": "ff0362facb14590895e77068b08d8f13",
          "sha256": "72605081f444dcf1e3b81de30c983e1be818a87d33ed0e771a918791318a7636"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff0362facb14590895e77068b08d8f13",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18842,
        "upload_time": "2020-04-09T22:15:35",
        "upload_time_iso_8601": "2020-04-09T22:15:35.866185Z",
        "url": "https://files.pythonhosted.org/packages/75/9d/35d04bd794c2c256ef5611add841c8017598b1080b086de39c293075712b/djangochannelsrestframework-0.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf2d8b83d6b8ae14be932e9a2cb87066e51586ff2ca3eacdd915b5cca7fe17db",
          "md5": "bc2854aba322f307fdae72c8d64e9aab",
          "sha256": "4757c073f620bff79305a6ec69af9f5b318ea711e08c9e70410420c20a6f7c79"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bc2854aba322f307fdae72c8d64e9aab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17268,
        "upload_time": "2020-04-09T22:15:37",
        "upload_time_iso_8601": "2020-04-09T22:15:37.492946Z",
        "url": "https://files.pythonhosted.org/packages/cf/2d/8b83d6b8ae14be932e9a2cb87066e51586ff2ca3eacdd915b5cca7fe17db/djangochannelsrestframework-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15012bb773fa062bcd058d7b16054512fe16fc54b992438c23004136a081f975",
          "md5": "6bd10d637bb014896cf5467e6312d134",
          "sha256": "f462255a789f9da5d7be38d8e0118c111ea7ebf5e6f8856cb124bbf683387a53"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bd10d637bb014896cf5467e6312d134",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18866,
        "upload_time": "2020-05-06T20:39:43",
        "upload_time_iso_8601": "2020-05-06T20:39:43.101903Z",
        "url": "https://files.pythonhosted.org/packages/15/01/2bb773fa062bcd058d7b16054512fe16fc54b992438c23004136a081f975/djangochannelsrestframework-0.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec7dbaad614d4c775fc71035df1bab917d8b4834e11bed3cd021c4c9c61adc33",
          "md5": "e5b44d57dff7bbe8ff5c870947ce12e8",
          "sha256": "e846cb44d464c34bea3af7fc137571aa9af398ce292b2800f98e5069bb493056"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e5b44d57dff7bbe8ff5c870947ce12e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17312,
        "upload_time": "2020-05-06T20:39:45",
        "upload_time_iso_8601": "2020-05-06T20:39:45.783168Z",
        "url": "https://files.pythonhosted.org/packages/ec/7d/baad614d4c775fc71035df1bab917d8b4834e11bed3cd021c4c9c61adc33/djangochannelsrestframework-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13a7c5cc49396cfb8f80447cb3acc34b76eae7a61445322b1375e3de5bd38bc8",
          "md5": "0964798bfbbaba1c2c81b628d6776836",
          "sha256": "0c1825fb9e2927f613da154a5ecc642c97d623acc0294de2a153abc07f4bfaf8"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0964798bfbbaba1c2c81b628d6776836",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19142,
        "upload_time": "2020-05-09T07:49:47",
        "upload_time_iso_8601": "2020-05-09T07:49:47.954004Z",
        "url": "https://files.pythonhosted.org/packages/13/a7/c5cc49396cfb8f80447cb3acc34b76eae7a61445322b1375e3de5bd38bc8/djangochannelsrestframework-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02ffce9a6e26b48258d78dc86ba96cd02d000f565e71bfb24d23c67d73e55455",
          "md5": "c7efcabc695a2f78bd659b1318ff32a7",
          "sha256": "b07dfab38c89e4cd73f360a5cb8e9e48556f910d9d1b48c62118c5e860b3db23"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c7efcabc695a2f78bd659b1318ff32a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17806,
        "upload_time": "2020-05-09T07:49:51",
        "upload_time_iso_8601": "2020-05-09T07:49:51.693983Z",
        "url": "https://files.pythonhosted.org/packages/02/ff/ce9a6e26b48258d78dc86ba96cd02d000f565e71bfb24d23c67d73e55455/djangochannelsrestframework-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "569ee2371fb7a11b0b7c0fad3f5d7d981ab7c94523286e0c533b38fa1540a3ef",
          "md5": "4c6eed54ae53edb097262038fc63c1a3",
          "sha256": "3c2b5ec16864b392c12da4ee0caab474f31aad380ff5e8e7555142013e063247"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c6eed54ae53edb097262038fc63c1a3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19615,
        "upload_time": "2020-08-12T09:15:12",
        "upload_time_iso_8601": "2020-08-12T09:15:12.765010Z",
        "url": "https://files.pythonhosted.org/packages/56/9e/e2371fb7a11b0b7c0fad3f5d7d981ab7c94523286e0c533b38fa1540a3ef/djangochannelsrestframework-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87218a32b79eaaaeb88a15ddf544eab52df138793ede82218a0b2bdbea70b092",
          "md5": "c6303c1cd55e0933bde6a971cfec139f",
          "sha256": "7e17a91e33409e157f9eb99dd3608ea9b6f99abb6dad7f4f6f1aa8b33b70ed8c"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c6303c1cd55e0933bde6a971cfec139f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18338,
        "upload_time": "2020-08-12T09:15:18",
        "upload_time_iso_8601": "2020-08-12T09:15:18.741657Z",
        "url": "https://files.pythonhosted.org/packages/87/21/8a32b79eaaaeb88a15ddf544eab52df138793ede82218a0b2bdbea70b092/djangochannelsrestframework-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbdf09f04f00cc5318b19e6de6d479513377f890fd2129cd3ddfd898ff320c8c",
          "md5": "570274b4770cf9ec13cb8a7956717200",
          "sha256": "9841bfc5ca3dd10e586df0a9ff347a5c0afcdc0ad00a75a032205c317cdd7b62"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "570274b4770cf9ec13cb8a7956717200",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19584,
        "upload_time": "2020-11-12T21:06:34",
        "upload_time_iso_8601": "2020-11-12T21:06:34.192827Z",
        "url": "https://files.pythonhosted.org/packages/cb/df/09f04f00cc5318b19e6de6d479513377f890fd2129cd3ddfd898ff320c8c/djangochannelsrestframework-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c91ef19d38eb821e5c66543f872e6251c9ff2a89ac62f6d152e8ae50a2e99ce2",
          "md5": "a8213acfae83fd9e8db7ff6af04e5deb",
          "sha256": "772340736a2e0d70ca4ec846c3115e6c112d0f1a7c555a739df1419094588168"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a8213acfae83fd9e8db7ff6af04e5deb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18347,
        "upload_time": "2020-11-12T21:06:35",
        "upload_time_iso_8601": "2020-11-12T21:06:35.843746Z",
        "url": "https://files.pythonhosted.org/packages/c9/1e/f19d38eb821e5c66543f872e6251c9ff2a89ac62f6d152e8ae50a2e99ce2/djangochannelsrestframework-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f07bcb9608e73715a30bbcaa39a8ed2889eadeb2d624e771db4d109609d4d8be",
          "md5": "75f4e502bb52d323987bdf8302c6f8de",
          "sha256": "f9bbf6a6419633619fd99efcbfd12fdd2f9385540ad04d2dd95f8cc01af136a1"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75f4e502bb52d323987bdf8302c6f8de",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19657,
        "upload_time": "2020-11-12T21:39:44",
        "upload_time_iso_8601": "2020-11-12T21:39:44.276626Z",
        "url": "https://files.pythonhosted.org/packages/f0/7b/cb9608e73715a30bbcaa39a8ed2889eadeb2d624e771db4d109609d4d8be/djangochannelsrestframework-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "822af7df4cb32e0dc060a8a47d06f0a3ff9bccc8a4e82666e4b564e998db60a4",
          "md5": "473ac3c6ef392f972a31139c495d838c",
          "sha256": "55009e7e336b9324b07e127e519f96dab516c4037ecef0998234f9d74bd9dfd6"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "473ac3c6ef392f972a31139c495d838c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18465,
        "upload_time": "2020-11-12T21:39:45",
        "upload_time_iso_8601": "2020-11-12T21:39:45.925326Z",
        "url": "https://files.pythonhosted.org/packages/82/2a/f7df4cb32e0dc060a8a47d06f0a3ff9bccc8a4e82666e4b564e998db60a4/djangochannelsrestframework-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf5860ecbce3a8e8b8678ceff7ecec8dc426ff4bdd2dc0105c856fcd2adb26c2",
          "md5": "2fc2afca66d236004afe5e0689ff50ed",
          "sha256": "d5a6462f9912e16eaf8c86aadd8bd82af5d37fbfe18960d9329040fb8455b8c1"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2fc2afca66d236004afe5e0689ff50ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19213,
        "upload_time": "2020-12-29T20:35:41",
        "upload_time_iso_8601": "2020-12-29T20:35:41.627466Z",
        "url": "https://files.pythonhosted.org/packages/cf/58/60ecbce3a8e8b8678ceff7ecec8dc426ff4bdd2dc0105c856fcd2adb26c2/djangochannelsrestframework-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cd5e8c9f5df91f656ca6fab2e96a665bd016bbda747354bef916a80b5c7ed38",
          "md5": "5dc0a90670234d4b355406329163b2c1",
          "sha256": "e774c1b087cd8f024a867ace05ec3be0e5efc1590a9ae5da1879a12d29ae3742"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5dc0a90670234d4b355406329163b2c1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20372,
        "upload_time": "2021-04-07T20:00:16",
        "upload_time_iso_8601": "2021-04-07T20:00:16.301350Z",
        "url": "https://files.pythonhosted.org/packages/0c/d5/e8c9f5df91f656ca6fab2e96a665bd016bbda747354bef916a80b5c7ed38/djangochannelsrestframework-0.2.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0c38ff9c6e21fb37dac4571b2a0c44fc53c0a84fbd7b6de8705076362f7db4e",
          "md5": "146c119d42519efdcea1e94a2e1ffdc4",
          "sha256": "8c38bfc1cb0cabb405bfb17b4c0dd36dc6bf34f8e4f0e9909ede0b67d03d1f8a"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "146c119d42519efdcea1e94a2e1ffdc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19410,
        "upload_time": "2021-04-07T20:00:18",
        "upload_time_iso_8601": "2021-04-07T20:00:18.130171Z",
        "url": "https://files.pythonhosted.org/packages/c0/c3/8ff9c6e21fb37dac4571b2a0c44fc53c0a84fbd7b6de8705076362f7db4e/djangochannelsrestframework-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d429d7ecacb92e5e86a6f45184baae2f6786b140f610d40e4626c26b927a324f",
          "md5": "9794042d3260908999977dd4f1efe441",
          "sha256": "20a44c67046a0c6396080f408a4988a0fde6cc7df3d07a7b2c3534ffd4f774ac"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9794042d3260908999977dd4f1efe441",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 25213,
        "upload_time": "2021-06-20T00:44:04",
        "upload_time_iso_8601": "2021-06-20T00:44:04.398458Z",
        "url": "https://files.pythonhosted.org/packages/d4/29/d7ecacb92e5e86a6f45184baae2f6786b140f610d40e4626c26b927a324f/djangochannelsrestframework-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "907252e7793db00fafbb8610951fa867cc89988a4c71a9ff1491ca581c869bf4",
          "md5": "4f03886fd502c222e42c071441c56ce1",
          "sha256": "e86ea105089eac55258041beedac2d10373133ab6479299c94290aaeb53ba65f"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4f03886fd502c222e42c071441c56ce1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22668,
        "upload_time": "2021-06-20T00:44:06",
        "upload_time_iso_8601": "2021-06-20T00:44:06.380166Z",
        "url": "https://files.pythonhosted.org/packages/90/72/52e7793db00fafbb8610951fa867cc89988a4c71a9ff1491ca581c869bf4/djangochannelsrestframework-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aea329a10fea5913cd57f7b9e82c84b585f799843ca501d7a8d61f260fe4a958",
          "md5": "05036286ea7bb537b5b177ed80d9f4ff",
          "sha256": "63ac99a95a9024143ecf992f434f3025cac10baeaa4203b46eff2c85fcc58a09"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05036286ea7bb537b5b177ed80d9f4ff",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 28206,
        "upload_time": "2022-02-21T01:31:38",
        "upload_time_iso_8601": "2022-02-21T01:31:38.479794Z",
        "url": "https://files.pythonhosted.org/packages/ae/a3/29a10fea5913cd57f7b9e82c84b585f799843ca501d7a8d61f260fe4a958/djangochannelsrestframework-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b17ab50cd6a5736cde1e7fa03a735b7f916025ed9d7508b1cc3825e06b149bf6",
          "md5": "d7276d3fa1c8dff7539e4efd536f8a9f",
          "sha256": "03f5fccb2fb41013ca6ccb11396cd23bcc83f35f24afa238eca2481de0a1fbc1"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d7276d3fa1c8dff7539e4efd536f8a9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 27294,
        "upload_time": "2022-02-21T01:31:40",
        "upload_time_iso_8601": "2022-02-21T01:31:40.643282Z",
        "url": "https://files.pythonhosted.org/packages/b1/7a/b50cd6a5736cde1e7fa03a735b7f916025ed9d7508b1cc3825e06b149bf6/djangochannelsrestframework-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "050d4684845d4233c101ac0c55374349267aef0d26bb95dc1ee0bcc39cb415df",
          "md5": "c0c44a5ccd21ab6561be94edc8e58c10",
          "sha256": "937260996b78fad66ddf4aa03dc61434b81b21a757897a899cd541d0f197c4ce"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0c44a5ccd21ab6561be94edc8e58c10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 29719,
        "upload_time": "2022-07-10T08:34:03",
        "upload_time_iso_8601": "2022-07-10T08:34:03.482926Z",
        "url": "https://files.pythonhosted.org/packages/05/0d/4684845d4233c101ac0c55374349267aef0d26bb95dc1ee0bcc39cb415df/djangochannelsrestframework-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "704d24b84bf6eb30b88c9afc3910d265d2dde46e3e618e9f0bba8ad7dbf31d7b",
          "md5": "a2c6f9ddf25360629b4b7b7481bf88cc",
          "sha256": "ca37fb96bb2f746129972a81dafed42d9785a37a2db36827dbf17848a0a9df96"
        },
        "downloads": -1,
        "filename": "djangochannelsrestframework-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a2c6f9ddf25360629b4b7b7481bf88cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 27944,
        "upload_time": "2022-07-10T08:34:06",
        "upload_time_iso_8601": "2022-07-10T08:34:06.569997Z",
        "url": "https://files.pythonhosted.org/packages/70/4d/24b84bf6eb30b88c9afc3910d265d2dde46e3e618e9f0bba8ad7dbf31d7b/djangochannelsrestframework-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "050d4684845d4233c101ac0c55374349267aef0d26bb95dc1ee0bcc39cb415df",
        "md5": "c0c44a5ccd21ab6561be94edc8e58c10",
        "sha256": "937260996b78fad66ddf4aa03dc61434b81b21a757897a899cd541d0f197c4ce"
      },
      "downloads": -1,
      "filename": "djangochannelsrestframework-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c0c44a5ccd21ab6561be94edc8e58c10",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 29719,
      "upload_time": "2022-07-10T08:34:03",
      "upload_time_iso_8601": "2022-07-10T08:34:03.482926Z",
      "url": "https://files.pythonhosted.org/packages/05/0d/4684845d4233c101ac0c55374349267aef0d26bb95dc1ee0bcc39cb415df/djangochannelsrestframework-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "704d24b84bf6eb30b88c9afc3910d265d2dde46e3e618e9f0bba8ad7dbf31d7b",
        "md5": "a2c6f9ddf25360629b4b7b7481bf88cc",
        "sha256": "ca37fb96bb2f746129972a81dafed42d9785a37a2db36827dbf17848a0a9df96"
      },
      "downloads": -1,
      "filename": "djangochannelsrestframework-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a2c6f9ddf25360629b4b7b7481bf88cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 27944,
      "upload_time": "2022-07-10T08:34:06",
      "upload_time_iso_8601": "2022-07-10T08:34:06.569997Z",
      "url": "https://files.pythonhosted.org/packages/70/4d/24b84bf6eb30b88c9afc3910d265d2dde46e3e618e9f0bba8ad7dbf31d7b/djangochannelsrestframework-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}