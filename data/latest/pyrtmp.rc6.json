{
  "info": {
    "author": "Eittipat.K",
    "author_email": "iammop@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# pyrtmp: Pure Python RTMP server    \n  \n- Pure python  \n- AsyncIO with uvloop support  \n- Easy to customize  \n- Support RTMP(s)  \n- Support RTMPT(s)  \n  \n## Announcement\n\nAfter using this package for years in production server. It runs flawlessly without any problem. \nSo I decided to switch the development status from **Beta** to **Production** since version 0.2.0. Also, \nI share my configuration at Deployment section below.\n\nIf you have any problems. Feel free to create issue on [GitHub](https://github.com/Eittipat/pyrtmp/issues).\n\n\n## Quickstart  \n  \nYou have to create your own rtmp controller to decide what to do when user connected or stream received.  The below example shows process to receive stream and write them to flv file using RTMP.\n\nIf you are looking for RTMPT, please look inside [pyrtmp/misc/rtmpt.py](https://github.com/Eittipat/pyrtmp/blob/master/pyrtmp/misc/rtmpt.py)\n\nP.S. Pull requests are welcome!\n\n[*Simple RTMP controller*](https://github.com/Eittipat/pyrtmp/blob/master/pyrtmp/rtmp.py)\n\n```python\nimport asyncio  \nimport logging  \nimport os  \nimport tempfile  \n\nfrom pyrtmp import StreamClosedException, RTMPProtocol  \nfrom pyrtmp.messages import SessionManager  \nfrom pyrtmp.messages.audio import AudioMessage  \nfrom pyrtmp.messages.command import NCConnect, NCCreateStream, NSPublish, NSCloseStream, NSDeleteStream  \nfrom pyrtmp.messages.data import MetaDataMessage  \nfrom pyrtmp.messages.protocolcontrol import WindowAcknowledgementSize, SetChunkSize, SetPeerBandwidth  \nfrom pyrtmp.messages.usercontrol import StreamBegin  \nfrom pyrtmp.messages.video import VideoMessage  \nfrom pyrtmp.misc.flvdump import FLVFile, FLVMediaType  \n  \nlogging.basicConfig(level=logging.DEBUG)  \nlogger = logging.getLogger(__name__)  \nlogger.setLevel(logging.DEBUG)  \n  \n\nasync def simple_controller(reader, writer):  \n    session = SessionManager(reader=reader, writer=writer)  \n    flv = None  \n    try:  \n        logger.debug(f'Client connected {session.peername}')  \n  \n        # do handshake  \n        await session.handshake()  \n  \n        # read chunks  \n        async for chunk in session.read_chunks_from_stream():\n            message = chunk.as_message()  \n            logger.debug(f\"Receiving {str(message)} {message.chunk_id}\")  \n            if isinstance(message, NCConnect):  \n                session.write_chunk_to_stream(WindowAcknowledgementSize(ack_window_size=5000000))  \n                session.write_chunk_to_stream(SetPeerBandwidth(ack_window_size=5000000, limit_type=2))  \n                session.write_chunk_to_stream(StreamBegin(stream_id=0))  \n                session.write_chunk_to_stream(SetChunkSize(chunk_size=8192))  \n                session.writer_chunk_size = 8192  \n                session.write_chunk_to_stream(message.create_response())  \n                await session.drain()  \n                logger.debug(\"Response to NCConnect\")  \n            elif isinstance(message, WindowAcknowledgementSize):  \n                pass  \n            elif isinstance(message, NCCreateStream):  \n                session.write_chunk_to_stream(message.create_response())  \n                await session.drain()  \n                logger.debug(\"Response to NCCreateStream\")  \n            elif isinstance(message, NSPublish):  \n                # create flv file at temp  \n                flv = FLVFile(os.path.join(tempfile.gettempdir(), message.publishing_name))  \n                session.write_chunk_to_stream(StreamBegin(stream_id=1))  \n                session.write_chunk_to_stream(message.create_response())  \n                await session.drain()  \n                logger.debug(\"Response to NSPublish\")  \n            elif isinstance(message, MetaDataMessage):  \n                # Write meta data to file  \n                flv.write(0, message.to_raw_meta(), FLVMediaType.OBJECT)  \n            elif isinstance(message, SetChunkSize):  \n                session.reader_chunk_size = message.chunk_size  \n            elif isinstance(message, VideoMessage):  \n                # Write video data to file  \n                flv.write(message.timestamp, message.payload, FLVMediaType.VIDEO)  \n            elif isinstance(message, AudioMessage):  \n                # Write data data to file  \n                flv.write(message.timestamp, message.payload, FLVMediaType.AUDIO)  \n            elif isinstance(message, NSCloseStream):  \n                pass  \n            elif isinstance(message, NSDeleteStream):  \n                pass  \n            else:  \n                logger.debug(f\"Unknown message {str(message)}\")  \n  \n    except StreamClosedException as ex:  \n        logger.debug(f\"Client {session.peername} disconnected!\")  \n    finally:  \n        if flv:  \n            flv.close()  \n  \n  \nasync def serve_rtmp(use_protocol=True):  \n    loop = asyncio.get_running_loop()  \n    if use_protocol is True:  \n        server = await loop.create_server(lambda: RTMPProtocol(controller=simple_controller, loop=loop), '0.0.0.0', 1935)  \n    else:  \n        server = await asyncio.start_server(simple_controller, '0.0.0.0', 1935)  \n    addr = server.sockets[0].getsockname()  \n    logger.info(f'Serving on {addr}')  \n    async with server:  \n        await server.serve_forever()  \n  \ndef wrapper(port: int):\n    asyncio.run(serve_rtmp(port=port))\n\n    \nIS_DEBUG=True\nNUM_PROCESS=2\n\nif __name__ == \"__main__\":\n    if IS_DEBUG is True:\n        wrapper(1935)\n    else:\n        from multiprocessing import Process\n        import uvloop\n        uvloop.install()\n        process = []\n        for i in range(NUM_PROCESS):\n            p = Process(target=wrapper, args=(1935 + i + 1,))\n            p.start()\n            process.append(p)\n        for p in process:\n            p.join()\n\n```\n\n\n \n\n## Deployment  \n\nI recommended nginx + uvloop in production environment.\n\nExample: You have 2 CPUs\n1. Set DEBUG=False and NUM_PROCESS=2\n2. Setup nginx to load balance between rtmp server as follows:\n\nnginx.conf\n```\nstream {\n\n    upstream stream_backend {\n        127.0.0.1:1936;\n        127.0.0.1:1937;\n    }\n\n    server {\n        listen     1935;\n        proxy_pass stream_backend;\n    }\n}\n```\nYou can test your server with simple ffmpeg command like this\n```\nffmpeg -i my_test_file.flv -c:v copy -c:a copy -f flv rtmp://127.0.0.1:1935/test/sample\n```\n\n\n## Roadmap  \n- Supported HTTP2/3\n- Support AMF3  \n- ReStream  \n- HLS Playback  \n- Documentation\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Eittipat/pyrtmp/releases/tag/v0.2.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Eittipat/pyrtmp.git",
    "keywords": "RTMP,RTMPT,asyncio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyrtmp",
    "package_url": "https://pypi.org/project/pyrtmp/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyrtmp/",
    "project_urls": {
      "Download": "https://github.com/Eittipat/pyrtmp/releases/tag/v0.2.0",
      "Homepage": "https://github.com/Eittipat/pyrtmp.git"
    },
    "release_url": "https://pypi.org/project/pyrtmp/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Pure python RTMP server",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12672316,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "493a953551154424b78f74ee616ced7e7f24b57ebc8123064c7a626533f78fc7",
          "md5": "165ca0a33d1a7fffd431b37705e2fa6c",
          "sha256": "fae783888ae81ffaa6670ccfb6a73f1f3939d34facf5d893cc1e58c7221ca140"
        },
        "downloads": -1,
        "filename": "pyrtmp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "165ca0a33d1a7fffd431b37705e2fa6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 14288,
        "upload_time": "2021-06-27T14:49:50",
        "upload_time_iso_8601": "2021-06-27T14:49:50.152391Z",
        "url": "https://files.pythonhosted.org/packages/49/3a/953551154424b78f74ee616ced7e7f24b57ebc8123064c7a626533f78fc7/pyrtmp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8817551b1c18f34c09fb6c200d89fb8f87b9c570b0923f37cabd236ad56aaa6",
          "md5": "d8f47cf0bae925486197f6678af6ead0",
          "sha256": "c824488d2672a33b966f1fde9a52dc5e9b7a7ea37f71462c54d834af6c7898d3"
        },
        "downloads": -1,
        "filename": "pyrtmp-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d8f47cf0bae925486197f6678af6ead0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 15224,
        "upload_time": "2021-06-27T14:53:30",
        "upload_time_iso_8601": "2021-06-27T14:53:30.323447Z",
        "url": "https://files.pythonhosted.org/packages/a8/81/7551b1c18f34c09fb6c200d89fb8f87b9c570b0923f37cabd236ad56aaa6/pyrtmp-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5d8b90dfb7cb5430336d91f841de3d8761bdb6addb91e841c8051dc8d47a5d5",
          "md5": "490f65bccd591a4f828433bde7eeeadf",
          "sha256": "be46227aeace284ab52399a29f00179e8ab384a8ff07723526692113f7e38882"
        },
        "downloads": -1,
        "filename": "pyrtmp-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "490f65bccd591a4f828433bde7eeeadf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 15245,
        "upload_time": "2021-06-27T15:05:33",
        "upload_time_iso_8601": "2021-06-27T15:05:33.848346Z",
        "url": "https://files.pythonhosted.org/packages/b5/d8/b90dfb7cb5430336d91f841de3d8761bdb6addb91e841c8051dc8d47a5d5/pyrtmp-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b4512d0d9728f16c5266fcff70bdb965d5b8554cd96e087847ebf45be2338b7",
          "md5": "cf7f12e03ae1f44616af5e0f9b49d378",
          "sha256": "4925b88dda7a87c8fa19d957937dc9ee200f92dd857120f3f143af1b09d4bd02"
        },
        "downloads": -1,
        "filename": "pyrtmp-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cf7f12e03ae1f44616af5e0f9b49d378",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 15154,
        "upload_time": "2021-06-30T23:24:01",
        "upload_time_iso_8601": "2021-06-30T23:24:01.640363Z",
        "url": "https://files.pythonhosted.org/packages/3b/45/12d0d9728f16c5266fcff70bdb965d5b8554cd96e087847ebf45be2338b7/pyrtmp-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c1fc9db4ee9d763eb461a2063f68d337a84cedc61b294c9db459a8f0d0bbc4d",
          "md5": "3dc0df36d8625f6ddf1e6ae2eb186900",
          "sha256": "9ec0700c7b411c01346b5657e7562c09c67ae0b360e781120cbc3ae73148e680"
        },
        "downloads": -1,
        "filename": "pyrtmp-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3dc0df36d8625f6ddf1e6ae2eb186900",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 15511,
        "upload_time": "2021-12-18T21:32:46",
        "upload_time_iso_8601": "2021-12-18T21:32:46.329555Z",
        "url": "https://files.pythonhosted.org/packages/2c/1f/c9db4ee9d763eb461a2063f68d337a84cedc61b294c9db459a8f0d0bbc4d/pyrtmp-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c76f8577f2b0369a69e8ae206956388d8fed8456d2f6ad5d43b330e75a13f7c1",
          "md5": "50527dfd7055742210bb95ecdb1c58e2",
          "sha256": "833fb71740ffaabed25c67cfa1d187ef6460a2b1e2b6dbd92b005674b296c51c"
        },
        "downloads": -1,
        "filename": "pyrtmp-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "50527dfd7055742210bb95ecdb1c58e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 16683,
        "upload_time": "2022-01-24T08:31:01",
        "upload_time_iso_8601": "2022-01-24T08:31:01.218647Z",
        "url": "https://files.pythonhosted.org/packages/c7/6f/8577f2b0369a69e8ae206956388d8fed8456d2f6ad5d43b330e75a13f7c1/pyrtmp-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c76f8577f2b0369a69e8ae206956388d8fed8456d2f6ad5d43b330e75a13f7c1",
        "md5": "50527dfd7055742210bb95ecdb1c58e2",
        "sha256": "833fb71740ffaabed25c67cfa1d187ef6460a2b1e2b6dbd92b005674b296c51c"
      },
      "downloads": -1,
      "filename": "pyrtmp-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "50527dfd7055742210bb95ecdb1c58e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 16683,
      "upload_time": "2022-01-24T08:31:01",
      "upload_time_iso_8601": "2022-01-24T08:31:01.218647Z",
      "url": "https://files.pythonhosted.org/packages/c7/6f/8577f2b0369a69e8ae206956388d8fed8456d2f6ad5d43b330e75a13f7c1/pyrtmp-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}