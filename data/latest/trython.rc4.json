{
  "info": {
    "author": "Cheskel Twersky",
    "author_email": "twerskycheskel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Trython\nThe main use for this package is when making requests with the requests module.\nSometimes the network might be unavailable, Or the server (the endpiont) might be temporarily down,\nWe don't want our script to quit just because of that (although we can put everything in a loop and catch error's, We don't want to do that because that will still lose the progress of the previous loop, and is a bit messy).\n\nThis is where *trython* comes in, it gives you two very approachable techniques to solve this.\n\nFrom here on I'll be using `requests.get` as the function we want to add error handling to.\n\n\n# Installation\n\n`pip3 install trython`\n\n\n## Approach 1\nReplacing `requests.get` with an alternitave error handled one.\n```python\nimport requests\nimport trython\nrequests.get = trython.wrap(requests.get)\n```\nNow when you call `requests.get` and it throws an error, we will catch that and try to run the request again - without you even knowing.\n\n## Approach 2\nDecorating your own function.\n```python\nimport requests\nimport trython\n\n@trython.wrap()\ndef requests_get(url):\n    return requests.get(url)\n```\nNow when you call `requests_get` the same logic will be applied.\n\n## Approach 3\nCreating a temporary function with a context manager.\n```python\nimport requests\nimport trython\nimport trython_validators\nwith trython.context_wrap(requests.get, validator=trython_validators.requests_json_validator, time_to_sleep=1) as get:\n    response = get('https://jsonplaceholder.typicode.com/posts').json()\n\nwith trython.context_wrap(requests.get, validator=trython_validators.requests_xml_validator, time_to_sleep=1) as get:\n    response = get('https://www.cs.utexas.edu/~mitra/csFall2015/cs329/lectures/xml/xslplanes.1.xml.txt').text\n\n```\nThis is very usefull if you want to have diffrent validators for the same function, as shown above.\n\n# Options\nThe wrap function takes in a couple of arguments:\n\n* `func`: (*callable*) This is the function that we are adding error handling to.\n* `number_of_attempts`: (*int*) **default=5** The number of times you want to retry before finally raising the error.\n* `time_to_sleep`: (*int*) **default=30** Time to sleep between retries.\n* `errors_to_catch`: (*tuple*) **default=(Exception, )** Which errors you want to handle.\n* `validator`: (*callable*)  **default=None** A function that will validate if the return of the function is valid, if the function throws an error or returns false - it will be treated as if the `func` thew an error.\n* `on_exception_callback`: (*callable*)  **default=None** A function to be called every time there's an exception raised by `func`, use this if you would like to not retry some errors - based on the error message.\n* `on_raise_callback`: (*callable*)  **default=None** A function to be called when we finaly raise the error, this function should take the exception as an argument.\n\n\n\n# More about validtators\nLet's take another look at validators, because without them this whole thing is useless.\n\nFirst you need to install it, to install run:\n\n```bash\npip install trython-validators\n```\n\nA very common reason that a script will quit is when you are hitting a api endpiont, and you expect a certain data type, and you go ahead and call some function and that data that will give you an error when it doesn't understand that data it got, without validators there's no way for us to know that.\n\nThat's when we create a validator - when we expect the result of a given function to be something, but might a times be something else entirely.\nWe create a function that takes in the func's return value and we check if it satisfies us, And if the validator function returns false or throws an error, then we retry, otherwise - we know we got the right data.\n\nI have included some predefined validators which you can import like this: `import trython_validators`.\nFeel free to make pr with some other helpful validators.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dermasmid/trython",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trython",
    "package_url": "https://pypi.org/project/trython/",
    "platform": "",
    "project_url": "https://pypi.org/project/trython/",
    "project_urls": {
      "Homepage": "https://github.com/dermasmid/trython"
    },
    "release_url": "https://pypi.org/project/trython/3.3.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Wrap functions that might fail some time, so it will retry to execute that function n times",
    "version": "3.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12416750,
  "releases": {
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "223768b455354a20cc908152c25f518222cdf622e3d3aa2a54db835d8330443b",
          "md5": "a868730f3139497cf4491564e160b782",
          "sha256": "7540195b725bac26369d92c77e00c45606e08712bde935a6755d33d3406aab07"
        },
        "downloads": -1,
        "filename": "trython-3.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a868730f3139497cf4491564e160b782",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6350,
        "upload_time": "2021-08-01T07:21:39",
        "upload_time_iso_8601": "2021-08-01T07:21:39.457399Z",
        "url": "https://files.pythonhosted.org/packages/22/37/68b455354a20cc908152c25f518222cdf622e3d3aa2a54db835d8330443b/trython-3.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e582f48781867c266638286e71bb2f2e1340ba3116c0a0de82ae060096af2ff",
          "md5": "7a43881581e2ebe82d203aed93414169",
          "sha256": "f8fe2c9b876a38cabef0de94915dfe4e796d0690d6000a809d653f12182ec1b7"
        },
        "downloads": -1,
        "filename": "trython-3.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a43881581e2ebe82d203aed93414169",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6476,
        "upload_time": "2021-08-01T08:49:01",
        "upload_time_iso_8601": "2021-08-01T08:49:01.843754Z",
        "url": "https://files.pythonhosted.org/packages/4e/58/2f48781867c266638286e71bb2f2e1340ba3116c0a0de82ae060096af2ff/trython-3.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "907718fb93775fbfb0e1d279fa8921c102097e14589aff6b3c9445f6fe941c52",
          "md5": "3e7b88c0007cdb2755cc6aa9a1f0d65a",
          "sha256": "c09cc70c3bb1debd607b47e840f295b5d97741072594f41ed348266c9a7b6b6a"
        },
        "downloads": -1,
        "filename": "trython-3.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e7b88c0007cdb2755cc6aa9a1f0d65a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6538,
        "upload_time": "2021-08-24T20:54:51",
        "upload_time_iso_8601": "2021-08-24T20:54:51.670784Z",
        "url": "https://files.pythonhosted.org/packages/90/77/18fb93775fbfb0e1d279fa8921c102097e14589aff6b3c9445f6fe941c52/trython-3.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a09483520e771e82798e7ede57697cd636f23d8c6ffaf78372568c0f7726ac6d",
          "md5": "1f1b9916cdba98eff225331d19144d0a",
          "sha256": "a24c3e3a2857609835d18c9d866fb34db9883f13e82e1bcdc8aba9581763400b"
        },
        "downloads": -1,
        "filename": "trython-3.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f1b9916cdba98eff225331d19144d0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6695,
        "upload_time": "2021-12-27T20:11:48",
        "upload_time_iso_8601": "2021-12-27T20:11:48.384627Z",
        "url": "https://files.pythonhosted.org/packages/a0/94/83520e771e82798e7ede57697cd636f23d8c6ffaf78372568c0f7726ac6d/trython-3.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a09483520e771e82798e7ede57697cd636f23d8c6ffaf78372568c0f7726ac6d",
        "md5": "1f1b9916cdba98eff225331d19144d0a",
        "sha256": "a24c3e3a2857609835d18c9d866fb34db9883f13e82e1bcdc8aba9581763400b"
      },
      "downloads": -1,
      "filename": "trython-3.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1f1b9916cdba98eff225331d19144d0a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6695,
      "upload_time": "2021-12-27T20:11:48",
      "upload_time_iso_8601": "2021-12-27T20:11:48.384627Z",
      "url": "https://files.pythonhosted.org/packages/a0/94/83520e771e82798e7ede57697cd636f23d8c6ffaf78372568c0f7726ac6d/trython-3.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}