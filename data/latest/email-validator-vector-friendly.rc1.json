{
  "info": {
    "author": "Bryce Merrill",
    "author_email": "brycelmerrill@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "email-validator-vector-friendly: Validate Email Addresses\n=========================================\n\nThis is a vectorization-friendly fork by [Bryce Merrill](https://github.com/bmerrill17) of the email-validator library\ncreated by Joshua Tauberer. This fork is intended for more efficient use of the library with large datasets; it replaces\nexception raising in the case of invalid emails with the simple return of a False boolean value stored in a .valid property\nand a detailed error description stored in a .error property.\n\nThe original email-validator README is below (with adjustments for replaced functionality):\n\nA robust email address syntax and deliverability validation library for\nPython 2.7/3.4+ by [Joshua Tauberer](https://joshdata.me).\n\nThis library validates that a string is of the form `name@example.com`. This is\nthe sort of validation you would want for an email-based login form on \na website.\n\nKey features:\n\n* Checks that an email address has the correct syntax --- good for\n  login forms or other uses related to identifying users.\n* Gives friendly error messages when validation fails (appropriate to show\n  to end users).\n* (optionally) Checks deliverability: Does the domain name resolve? And you can override the default DNS resolver.\n* Supports internationalized domain names and (optionally)\n  internationalized local parts.\n* Normalizes email addresses (super important for internationalized\n  addresses! see below).\n\nThe library is NOT for validation of the To: line in an email message\n(e.g. `My Name <my@address.com>`), which\n[flanker](https://github.com/mailgun/flanker) is more appropriate for.\nAnd this library does NOT permit obsolete forms of email addresses, so\nif you need strict validation against the email specs exactly, use\n[pyIsEmail](https://github.com/michaelherold/pyIsEmail).\n\nThis library was first published in 2015. The current version is 1.1.1\n(posted May 19, 2020). **Starting in version 1.1.0, the type of the value returned\nfrom `validate_email` has changed, but dict-style access to the validated\naddress information still works, so it is backwards compatible.**\n\nInstallation\n------------\n\nThis package [is on PyPI](https://pypi.org/project/email-validator/), so:\n\n```sh\npip install email-validator-vector-friendly\n```\n\n`pip3` also works.\n\nUsage\n-----\n\nTo add \"valid\" and \"error\" columns to a DataFrame containing potential email addresses:\n\n```python\nfrom email_validator import validate_email\nimport pandas as pd\n\nexamples = ['firstlast@gmail.', 'firstlast@gmail.com', '@gmail.com']\n\ndf = pd.DataFrame({'emails': examples})\n\ndf['valid'] = df.apply(lambda x: validate_email(x['emails']).valid, axis=1)\ndf['errors'] = df.apply(lambda x: validate_email(x['emails']).error, axis=1)\n\npd.set_option('display.expand_frame_repr', False)\n\nprint(df)\n\n```\nThis would result in the below DataFrame:\n```\n                emails  valid                                             errors\n0     firstlast@gmail.  False  The domain name gmail. is not valid. It is not...\n1  firstlast@gmail.com   True                                                   \n2           @gmail.com  False  The email address contains invalid characters ...\n\n```\n\nWhen validating many email addresses or to control the timeout (the default is 15 seconds), create a caching [dns.resolver.Resolver](https://dnspython.readthedocs.io/en/latest/resolver-class.html) to reuse in each call:\n\n```python\nfrom email_validator import validate_email, caching_resolver\n\nresolver = caching_resolver(timeout=10)\n\nwhile True:\n  valid = validate_email(email, dns_resolver=resolver)\n```\n\nThe validator will accept internationalized email addresses, but not all\nmail systems can send email to an addresses with non-ASCII characters in\nthe *local* part of the address (before the @-sign). See the `allow_smtputf8`\noption below.\n\n\nOverview\n--------\n\nThe module provides a function `validate_email(email_address)` which\ntakes an email address (either a `str` or ASCII `bytes`) and:\n\n- Returns an object information about the address, including the properties .valid (Bool) and .error (str error description)\n\nRegardless of validation result, an object is returned containing\na normalized form of the email address (which you should use!) and\nother information (such as validation status and error description).\n\nThe validator doesn't permit obsoleted forms of email addresses that no\none uses anymore even though they are still valid and deliverable, since\nthey will probably give you grief if you're using email for login. (See\nlater in the document about that.)\n\nThe validator checks that the domain name in the email address resolves.\nThere is nothing to be gained by trying to actually contact an SMTP\nserver, so that's not done here. For privacy, security, and practicality\nreasons servers are good at not giving away whether an address is\ndeliverable or not: email addresses that appear to accept mail at first\ncan bounce mail after a delay, and bounced mail may indicate a temporary\nfailure of a good email address (sometimes an intentional failure, like\ngreylisting).\n\nThe function also accepts the following keyword arguments (default as\nshown):\n\n`allow_smtputf8=True`: Set to `False` to prohibit internationalized addresses that would\n    require the\n    [SMTPUTF8](https://tools.ietf.org/html/rfc6531) extension.\n\n`check_deliverability=True`: Set to `False` to skip the domain name resolution check.\n\n`allow_empty_local=False`: Set to `True` to allow an empty local part (i.e.\n    `@example.com`), e.g. for validating Postfix aliases.\n    \n`dns_resolver=None`: Pass an instance of [dns.resolver.Resolver](https://dnspython.readthedocs.io/en/latest/resolver-class.html) to control the DNS resolver including setting a timeout and [a cache](https://dnspython.readthedocs.io/en/latest/resolver-caching.html). The `caching_resolver` function shown above is a helper function to construct a dns.resolver.Resolver with a [LRUCache](https://dnspython.readthedocs.io/en/latest/resolver-caching.html#dns.resolver.LRUCache). Reuse the same resolver instance across calls to `validate_email` to make use of the cache.\n\nIn non-production test environments, you may want to allow `@test` or `@mycompany.test` email addresses to be used as placeholder email addresses, which would normally not be permitted. In that case, pass `test_environment=True`. DNS-based deliverability checks will be disabled as well.\n\nInternationalized email addresses\n---------------------------------\n\nThe email protocol SMTP and the domain name system DNS have historically\nonly allowed ASCII characters in email addresses and domain names,\nrespectively. Each has adapted to internationalization in a separate\nway, creating two separate aspects to email address\ninternationalization.\n\n### Internationalized domain names (IDN)\n\nThe first is [internationalized domain names (RFC\n5891)](https://tools.ietf.org/html/rfc5891), a.k.a IDNA 2008. The DNS\nsystem has not been updated with Unicode support. Instead, internationalized\ndomain names are converted into a special IDNA ASCII \"[Punycode](https://www.rfc-editor.org/rfc/rfc3492.txt)\"\nform starting with `xn--`. When an email address has non-ASCII\ncharacters in its domain part, the domain part is replaced with its IDNA\nASCII equivalent form in the process of mail transmission. Your mail\nsubmission library probably does this for you transparently. Note that\nmost web browsers are currently in transition between IDNA 2003 (RFC\n3490) and IDNA 2008 (RFC 5891) and [compliance around the web is not\nvery\ngood](http://archives.miloush.net/michkap/archive/2012/02/27/10273315.html)\nin any case, so be aware that edge cases are handled differently by\ndifferent applications and libraries. This library conforms to IDNA 2008\nusing the [idna](https://github.com/kjd/idna) module by Kim Davies.\n\n### Internationalized local parts\n\nThe second sort of internationalization is internationalization in the\n*local* part of the address (before the @-sign). These email addresses\nrequire that your mail submission library and the mail servers along the\nroute to the destination, including your own outbound mail server, all\nsupport the [SMTPUTF8 (RFC 6531)](https://tools.ietf.org/html/rfc6531)\nextension. Support for SMTPUTF8 varies.\n\n### If you know ahead of time that SMTPUTF8 is not supported by your mail submission stack\n\nBy default all internationalized forms are accepted by the validator.\nBut if you know ahead of time that SMTPUTF8 is not supported by your\nmail submission stack, then you must filter out addresses that require\nSMTPUTF8 using the `allow_smtputf8=False` keyword argument (see above).\nThis will cause the validation function to return a False if\ndelivery would require SMTPUTF8. That's just in those cases where\nnon-ASCII characters appear before the @-sign. If you do not set\n`allow_smtputf8=False`, you can also check the value of the `smtputf8`\nfield in the returned object.\n\nIf your mail submission library doesn't support Unicode at all --- even\nin the domain part of the address --- then immediately prior to mail\nsubmission you must replace the email address with its ASCII-ized form.\nThis library gives you back the ASCII-ized form in the `ascii_email`\nfield in the returned object, which you can get like this:\n\n```python\nvalid = validate_email(email, allow_smtputf8=False)\nemail = valid.ascii_email\n```\n\nThe local part is left alone (if it has internationalized characters\n`allow_smtputf8=False` will force validation to fail) and the domain\npart is converted to [IDNA ASCII](https://tools.ietf.org/html/rfc5891).\n(You probably should not do this at account creation time so you don't\nchange the user's login information without telling them.)\n\n### UCS-4 support required for Python 2.7\n\nNote that when using Python 2.7, it is required that it was built with\nUCS-4 support (see\n[here](https://stackoverflow.com/questions/29109944/python-returns-length-of-2-for-single-unicode-character-string));\notherwise emails with unicode characters outside of the BMP (Basic\nMultilingual Plane) will not validate correctly.\n\nNormalization\n-------------\n\nThe use of Unicode in email addresses introduced a normalization\nproblem. Different Unicode strings can look identical and have the same\nsemantic meaning to the user. The `email` field returned on successful\nvalidation provides the correctly normalized form of the given email\naddress:\n\n```python\nvalid = validate_email(\"me@Ｄｏｍａｉｎ.com\")\nemail = valid.ascii_email\nprint(email)\n# prints: me@domain.com\n```\n\nBecause an end-user might type their email address in different (but\nequivalent) un-normalized forms at different times, you ought to\nreplace what they enter with the normalized form immediately prior to\ngoing into your database (during account creation), querying your database\n(during login), or sending outbound mail. Normalization may also change\nthe length of an email address, and this may affect whether it is valid\nand acceptable by your SMTP provider.\n\nThe normalizations include lowercasing the domain part of the email\naddress (domain names are case-insensitive), [Unicode \"NFC\"\nnormalization](https://en.wikipedia.org/wiki/Unicode_equivalence) of the\nwhole address (which turns characters plus [combining\ncharacters](https://en.wikipedia.org/wiki/Combining_character) into\nprecomposed characters where possible, replacement of [fullwidth and\nhalfwidth\ncharacters](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms)\nin the domain part, possibly other\n[UTS46](http://unicode.org/reports/tr46) mappings on the domain part,\nand conversion from Punycode to Unicode characters.\n\n(See [RFC 6532 (internationalized email) section\n3.1](https://tools.ietf.org/html/rfc6532#section-3.1) and [RFC 5895\n(IDNA 2008) section 2](http://www.ietf.org/rfc/rfc5895.txt).)\n\nExamples\n--------\n\nFor the email address `test@joshdata.me`, the returned object is:\n\n```python\nValidatedEmail(\n  email='test@joshdata.me',\n  local_part='test',\n  domain='joshdata.me',\n  ascii_email='test@joshdata.me',\n  ascii_local_part='test',\n  ascii_domain='joshdata.me',\n  smtputf8=False,\n  mx=[(10, 'box.occams.info')],\n  mx_fallback_type=None,\n  valid=True,\n  error=\"\")\n```\n\nFor the fictitious address `example@ツ.life`, which has an\ninternationalized domain but ASCII local part, the returned object is:\n\n```python\nValidatedEmail(\n  email='example@ツ.life',\n  local_part='example',\n  domain='ツ.life',\n  ascii_email='example@xn--bdk.life',\n  ascii_local_part='example',\n  ascii_domain='xn--bdk.life',\n  smtputf8=False,\n  valid=True,\n  error=\"\")\n```\n\nNote that `smtputf8` is `False` even though the domain part is\ninternationalized because\n[SMTPUTF8](https://tools.ietf.org/html/rfc6531) is only needed if the\nlocal part of the address is internationalized (the domain part can be\nconverted to IDNA ASCII Punycode). Also note that the `email` and `domain`\nfields provide a normalized form of the email address and domain name\n(casefolding and Unicode normalization as required by IDNA 2008).\n\nCalling `validate_email` with the ASCII form of the above email address,\n`example@xn--bdk.life`, returns the exact same information (i.e., the\n`email` field always will contain Unicode characters, not Punycode).\n\nFor the fictitious address `ツ-test@joshdata.me`, which has an\ninternationalized local part, the returned object is:\n\n```python\nValidatedEmail(\n  email='ツ-test@joshdata.me',\n  local_part='ツ-test',\n  domain='joshdata.me',\n  ascii_email=None,\n  ascii_local_part=None,\n  ascii_domain='joshdata.me',\n  smtputf8=True,\n  valid=True,\n  error=\"\")\n```\n\nNow `smtputf8` is `True` and `ascii_email` is `None` because the local\npart of the address is internationalized. The `local_part` and `email` fields\nreturn the normalized form of the address: certain Unicode characters\n(such as angstrom and ohm) may be replaced by other equivalent code\npoints (a-with-ring and omega).\n\nReturn value\n------------\n\nWhen an email address passes validation, the fields in the returned object\nare:\n\n| Field | Value |\n| -----:|-------|\n| `email` | The normalized form of the email address that you should put in your database. This merely combines the `local_part` and `domain` fields (see below). |\n| `ascii_email` | If set, an ASCII-only form of the email address by replacing the domain part with [IDNA](https://tools.ietf.org/html/rfc5891) [Punycode](https://www.rfc-editor.org/rfc/rfc3492.txt). This field will be present when an ASCII-only form of the email address exists (including if the email address is already ASCII). If the local part of the email address contains internationalized characters, `ascii_email` will be `None`. If set, it merely combines `ascii_local_part` and `ascii_domain`. |\n| `local_part` | The local part of the given email address (before the @-sign) with Unicode NFC normalization applied. |\n| `ascii_local_part` | If set, the local part, which is composed of ASCII characters only. |\n| `domain` | The canonical internationalized Unicode form of the domain part of the email address. If the returned string contains non-ASCII characters, either the [SMTPUTF8](https://tools.ietf.org/html/rfc6531) feature of your mail relay will be required to transmit the message or else the email address's domain part must be converted to IDNA ASCII first: Use `ascii_domain` field instead. |\n| `ascii_domain` | The [IDNA](https://tools.ietf.org/html/rfc5891) [Punycode](https://www.rfc-editor.org/rfc/rfc3492.txt)-encoded form of the domain part of the given email address, as it would be transmitted on the wire. |\n| `smtputf8` | A boolean indicating that the [SMTPUTF8](https://tools.ietf.org/html/rfc6531) feature of your mail relay will be required to transmit messages to this address because the local part of the address has non-ASCII characters (the local part cannot be IDNA-encoded). If `allow_smtputf8=False` is passed as an argument, this flag will always be false because an exception is raised if it would have been true. |\n| `mx` | A list of (priority, domain) tuples of MX records specified in the DNS for the domain (see [RFC 5321 section 5](https://tools.ietf.org/html/rfc5321#section-5)). May be `None` if the deliverability check could not be completed because of a temporary issue like a timeout. |\n| `mx_fallback_type` | `None` if an `MX` record is found. If no MX records are actually specified in DNS and instead are inferred, through an obsolete mechanism, from A or AAAA records, the value is the type of DNS record used instead (`A` or `AAAA`). May be `None` if the deliverability check could not be completed because of a temporary issue like a timeout. |\n| `valid` | `True` if email address is valid, `False` if it is not |\n| `error` | `\"\"` if email address is valid, a detailed error (string) if it is not |\n\nAssumptions\n-----------\n\nBy design, this validator does not pass all email addresses that\nstrictly conform to the standards. Many email address forms are obsolete\nor likely to cause trouble:\n\n* The validator assumes the email address is intended to be\n  deliverable on the public Internet. The domain part\n  of the email address must be a resolvable domain name.\n  [Special Use Domain Names](https://www.iana.org/assignments/special-use-domain-names/special-use-domain-names.xhtml)\n  and their subdomains are always considered invalid (except see\n  the `test_environment` parameter above).\n* The \"quoted string\" form of the local part of the email address (RFC\n  5321 4.1.2) is not permitted --- no one uses this anymore anyway.\n  Quoted forms allow multiple @-signs, space characters, and other\n  troublesome conditions.\n* The \"literal\" form for the domain part of an email address (an\n  IP address) is not accepted --- no one uses this anymore anyway.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bmerrill17/python-email-validator",
    "keywords": "email address validator",
    "license": "CC0 (copyright waived)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "email-validator-vector-friendly",
    "package_url": "https://pypi.org/project/email-validator-vector-friendly/",
    "platform": null,
    "project_url": "https://pypi.org/project/email-validator-vector-friendly/",
    "project_urls": {
      "Homepage": "https://github.com/bmerrill17/python-email-validator"
    },
    "release_url": "https://pypi.org/project/email-validator-vector-friendly/1.1.4/",
    "requires_dist": [
      "dnspython (>=1.15.0)",
      "idna (>=2.0.0)"
    ],
    "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7",
    "summary": "A robust email syntax and deliverability validation library for Python 2.x/3.x forked for vectorization",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13367533,
  "releases": {
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2a18b530b2ca2d5b6a562e9dcb12000b444197e0093169120302580cb30f4d3",
          "md5": "14774fca5cc6cac049ebfd35047498ce",
          "sha256": "a07bf19d1882f6254fe2ecac58f840bfe695cd5f2963d3dc43bec9f57485b266"
        },
        "downloads": -1,
        "filename": "email_validator_vector_friendly-1.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14774fca5cc6cac049ebfd35047498ce",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7",
        "size": 20142,
        "upload_time": "2022-04-01T00:22:39",
        "upload_time_iso_8601": "2022-04-01T00:22:39.447121Z",
        "url": "https://files.pythonhosted.org/packages/c2/a1/8b530b2ca2d5b6a562e9dcb12000b444197e0093169120302580cb30f4d3/email_validator_vector_friendly-1.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a965ffc7627d2a86ad9adc30e7d7a07154aa154ff30f897788fe7d9aaf95130",
          "md5": "9a46002d195f1560987809e4cbfe7c1f",
          "sha256": "72cd7f071e2820f170bf407920add50507a3b893ea3aee74d74b88b72581cea2"
        },
        "downloads": -1,
        "filename": "email_validator_vector_friendly-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9a46002d195f1560987809e4cbfe7c1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7",
        "size": 25083,
        "upload_time": "2022-04-01T00:22:40",
        "upload_time_iso_8601": "2022-04-01T00:22:40.869717Z",
        "url": "https://files.pythonhosted.org/packages/8a/96/5ffc7627d2a86ad9adc30e7d7a07154aa154ff30f897788fe7d9aaf95130/email_validator_vector_friendly-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2a18b530b2ca2d5b6a562e9dcb12000b444197e0093169120302580cb30f4d3",
        "md5": "14774fca5cc6cac049ebfd35047498ce",
        "sha256": "a07bf19d1882f6254fe2ecac58f840bfe695cd5f2963d3dc43bec9f57485b266"
      },
      "downloads": -1,
      "filename": "email_validator_vector_friendly-1.1.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14774fca5cc6cac049ebfd35047498ce",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7",
      "size": 20142,
      "upload_time": "2022-04-01T00:22:39",
      "upload_time_iso_8601": "2022-04-01T00:22:39.447121Z",
      "url": "https://files.pythonhosted.org/packages/c2/a1/8b530b2ca2d5b6a562e9dcb12000b444197e0093169120302580cb30f4d3/email_validator_vector_friendly-1.1.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a965ffc7627d2a86ad9adc30e7d7a07154aa154ff30f897788fe7d9aaf95130",
        "md5": "9a46002d195f1560987809e4cbfe7c1f",
        "sha256": "72cd7f071e2820f170bf407920add50507a3b893ea3aee74d74b88b72581cea2"
      },
      "downloads": -1,
      "filename": "email_validator_vector_friendly-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9a46002d195f1560987809e4cbfe7c1f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7",
      "size": 25083,
      "upload_time": "2022-04-01T00:22:40",
      "upload_time_iso_8601": "2022-04-01T00:22:40.869717Z",
      "url": "https://files.pythonhosted.org/packages/8a/96/5ffc7627d2a86ad9adc30e7d7a07154aa154ff30f897788fe7d9aaf95130/email_validator_vector_friendly-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}