{
  "info": {
    "author": "Martin Aspeli",
    "author_email": "optilude@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "JIRA Cycle Data extract utility\n===============================\n\nThis utility helps extract data from JIRA for processing with the\nActionableAgile™ Analytics tool (https://www.actionableagile.com/analytics-tools/),\nas well as ad-hoc analysis using Excel.\n\nIt will produce a CSV file with one row for each JIRA issue matching a set of\nfilter criteria, containing basic information about the issue as well as the\ndate the issue entered each step in the main cycle workflow.\n\nThis data can be used to produce a Cumulative Flow Diagram, a cycle time\nscatterplot, a cycle time histogram, and other analytics based on cycle time.\n\nInstallation\n------------\n\nInstall Python 2.7 and pip. See http://pip.readthedocs.org/en/stable/installing/.\n\nInstall using `pip`::\n\n    $ pip install actionable-agile-extract\n\nIf you get errors, try to install `numpy` and `pandas` separately first::\n\n    $ pip install numpy pandas\n    $ pip install actionable-agile-extract\n\nConfiguration\n-------------\n\nWrite a YAML configuration file like so, calling it e.g. `config.yaml`::\n\n    # How to connect to JIRA?\n    Connection:\n        Domain: https://myserver.atlassian.net\n        Username: myusername # If missing, you will be prompted at runtime\n        Password: secret     # If missing, you will be prompted at runtime\n\n    # What to search for?\n    Criteria:\n        Project: ABC # JIRA project key to search\n        Issue types: # Which issue types to include\n            - Story\n            - Defect\n        Valid resolutions: # Which resolution statuses to include (unresolved is always included)\n            - Done\n            - Closed\n        JQL: labels != \"Spike\" # Additional filter as raw JQL, optional\n\n    # Describe the workflow. Each step can be mapped to either a single JIRA\n    # status, or a list of statuses that will be treated as equivalent\n    Workflow:\n        Open: Open\n        Analysis IP: Analysis in Progress\n        Analysis Done: Analysis Done\n        Development IP: Development in Progress\n        Development Done: Development Done\n        Test IP: Test in Progress\n        Test Done: Test Done\n        Done:\n            - Closed\n            - Done\n\n    # Map field names to additional attributes to extract\n    Attributes:\n        Components: Component/s\n        Priority: Priority\n        Release: Fix version/s\n\nThe sections for `Connection`, `Criteria` and `Workflow` are required.\n\nUnder `Conection`, only `Domain` is required. If not specified, the script will\nprompt for both or either of username and password when run.\n\nUnder `Criteria`, all fields are technically optional, but you should specify\nat least some of them to avoid an unbounded query.\n\nUnder `Workflow`, at least two steps are required. Specify the steps in order.\nYou may either specify a single workflow value or a list (as shown for `Done`\nabove), in which case multiple JIRA statuses will be collapsed into a single\nstate for analytics purposes.\n\nThe file, and values for things like workflow statuses and attributes, are case\ninsensitive.\n\nWhen specifying attributes, use the *name* of the field (as rendered on screen\nin JIRA), not its id (as you might do in JQL), so e.g. use `Component/s` not\n`components`.\n\nThe attributes `Type` (issue type), `Status` and `Resolution` are always\nincluded.\n\nWhen specifying fields like `Component/s` or `Fix version/s` that may have\nlists of values, only the first value set will be used.\n\nRunning\n-------\n\nRun the binary with::\n\n    $ jira-cycle-extract config.yaml data.csv\n\nThis will extract a CSV file called `data.csv` with cycle data based on the\nconfiguration in `config.yaml`.\n\nUse the `-v` option to print more information during the extract process.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/optilude/jira-cycle-extract",
    "keywords": "agile jira analytics",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "actionable-agile-extract",
    "package_url": "https://pypi.org/project/actionable-agile-extract/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/actionable-agile-extract/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/optilude/jira-cycle-extract"
    },
    "release_url": "https://pypi.org/project/actionable-agile-extract/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Extract cycle time analytics data from JIRA",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1761664,
  "releases": {
    "0.1": []
  },
  "urls": [],
  "vulnerabilities": []
}