{
  "info": {
    "author": "Enis Getmez",
    "author_email": "enis@enisgetmez.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "\nRovpy is a simplified python library for ardusub based robots. rovpy contains pymavlink, opencv, numpy, imutils, serial libraries.\n\nrovpy is divided into two as rovpyimage and rovpy.\n\nRovpy: includes basic rov control and rov communication tools. these operations are based on the pymavlink library.\nrovpyimage: It contains ready-made image processing tools.\n\nRovpy Commands:\n\n**connectrov()** command is the part where you specify your rov driving mode and the connection address to your vehicle. In short, it initializes your vehicle.\nExample Using:\nconnectrov(mode=\"STABILIZE\",connect=\"/dev/ttyACM0\") # for serial connection\nconnectrov(mode=\"ACRO\",connect=\"udpin:0.0.0.0:14550\") # for companion connect\n(Default mode=\"STABILIZE\",connect=\"/dev/ttyACM0\")\n**arm()** # arm your robot\n\n**disarm()** # disarmarm your robot\n\n**hiz()** # Converts the pwm signal to a value between -1 and 1.\n*return speed value*\n\n**control(rcinput,speed)** #  rc input takes speed value. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse. For RC inputs you can check here: [https://www.ardusub.com/operators-manual/rc-input-and-output.html](https://www.ardusub.com/operators-manual/rc-input-and-output.html)\n\n**pitch(speed)** # It makes your robot pitch move. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse.\n\n**roll(speed)**  # It makes your robot roll move. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse.\n\n**throttle(speed)**  # It makes your robot throttle move. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse.\n\n**yaw(speed)** # It makes your robot yaw move. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse.\n\n**forward(speed)** # It makes your robot forward move. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse.\n\n**lateral(speed)** # It makes your robot lateral move. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse.\n\n**camerapan(speed)** # Turns the servo connected to your camera to the right or left. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse.\n\n**cameratilt(speed)** # Turns the servo attached to your camera down or up. speed value must be between 1 and -1. 1 = maximum forward -1 represents maximum reverse.\n\n**light1level(power)** #adjusts the light level. It takes values between 1 and -1. 0 = off 1 and -1 = full power\n\n**light2level(power)** #adjusts the light level. It takes values between 1 and -1. 0 = off 1 and -1 = full power\n**videoswitch(speed)** # It can take values between 1 and -1.\n\n**sendgps(timestamp,idd,flags,gpstime,gpsweeknumber,dgps,lat,lon,alt,gpshdop,gpsvdop,northvelocity,eastvelocity,downvelocity,gpsspeed,gpshorizontal,gpsvertical,numberofsattalities)** # Allows you to send a GPS value.\n\n**rovinfo()** # Allows you to receive ahrs data such as gyro, speed, altitude.\n\nRov Image\n**colordetect(frame,color,w=320,h=240)** #It allows you to detect already defined colors. frame = image, color = color, w = image width default 320, h = image height default 240\n*Returns frame, x, y, radius values to you. frame = marked image, x = x coordinate of the detected object, y = y coordinate of the detected image, radius = radius of the detected image*\n**Defined Colors:**\n\n\n\n\n    \"blue\": {\"upper\": \"126, 255, 255\",\n            \"lower\":\"94, 80, 2\"},\n\n     \"red\": {\"upper\": \"255, 255, 255\",\n            \"lower\":\"171, 160, 60\"},\n\n    \"brown\": {\"upper\": \"30,255,255\", \n            \"lower\":\"20,100,100\"},\n\n    \"green\": {\"upper\": \"102, 255, 255\",\n            \"lower\":\"25, 52, 72\"},\n\n    \"orange\": {\"upper\": \"25, 255, 255\",\n            \"lower\":\"10, 100, 20\"},\n\n    \"pink\": {\"upper\": \"11,255,255\",\n            \"lower\":\"10,100,100\"},\n\n    \"black\": {\"upper\": \"50,50,100\",\n            \"lower\":\"0,0,0\"},\n\n    \"purple\": {\"upper\": \"120, 255, 255\",\n            \"lower\":\"80, 10, 10]\"},\n\n    \"yellow\": {\"upper\": \"44, 255, 255\",\n            \"lower\":\"24, 100, 100\"},\n\n    \"white\": {\"upper\": \"0,0,255\",\n            \"lower\":\"0,0,0\"},\n\n**circledetect(frame,param1=35,param2=50,minRadius=0,maxRadius=0,w=320,h=240)** ##It allows you to detect circles. frame = marked image , param1 = Gradient value used to handle edge detection in the Yuen et al. method(Default = 35). param2 = Accumulator threshold value for the `cv2.HOUGH_GRADIENT` method. The smaller the threshold is, the more circles will be detected (including false circles). The larger the threshold is, the more circles will potentially be returned(Default = 50). minRadius = minimum radius of the circle to be detected(Default = 0). maxradius = maximum radius of the circle to be detected(Default = 0). w =image width (default 320). h= image height (default 240)\n\n*Returns frame, x, y, radius values to you. frame = marked image, x = x coordinate of the detected object, y = y coordinate of the detected image, radius = radius of the detected image*\n\n**Examples :** \n\nDetect Red Colors :\n\n    from rovpy import rovpy\n    import cv2\n\n    camera = cv2.VideoCapture(0) # for webcams\n\n    while True: \n         (grabbed, frame) = camera.read() \n         frame, x ,y, radius = rovpy.colordetect(frame,\"red\") # default = colordetect(frame,\"color\",w=320,h=240)\n         cv2.imshow(\"Color Detect\", frame)\n         cv2.waitKey(1)\n\nDetect Circles : \n\n    from rovpy import rovpy\n    import cv2\n\n    camera = cv2.VideoCapture(0) # for webcams\n\n    while True: \n         (grabbed, frame) = camera.read() \n         frame, x ,y, radius = rovpy.circledetect(frame,30,50) # default = circledetect(image,param1=35,param2=50,minRadius=0,maxRadius=0,weight=320,height=240)\n         print(x,y)\n         cv2.imshow(\"CircleDetect\", frame)\n         cv2.waitKey(1)\nRov Control :\n\n    from rovpy import rovpy\n\n    rovpy.connectrov(\"STABILIZE\",\"/dev/ttyACM0\") #connectrov(mode,port or udp url)\n\n    rovpy.arm()\n    a = 0\n    while(a < 1000):\n    \ta+1\n    \trovpy.forward(0.5) # forward(speed) 0.5 is half speed\n    \t''' if you can want use this commands\n    \trovpy.pitch(speed)\n    \trovpy.roll(speed):\n    \trovpy.throttle(speed)\n    \trovpy.yaw(speed)\n    \trovpy.forward(speed)\n    \trovpy.lateral(speed)\n    \trovpy.camerapan(speed)\n    \trovpy.cameratilt(speed)\n    \trovpy.light1level(power)\n    \trovpy.light2level(power)\n    \trovpy.videoswitch(speed)\n    \t'''\n    \trovpy.disarm()\n\nArming Rov\n\n    from rovpy import rovpy\n\n    rovpy.connectrov(\"STABILIZE\",\"/dev/ttyACM0\") #connectrov(mode,port or udp url)\n\n    rovpy.arm()\n\nGet ahrs data :\n\n    from rovpy import rovpy\n\n    rovpy.connectrov(\"STABILIZE\",\"/dev/ttyACM0\") #connectrov(mode,port or udp url)\n\n    rovpy.rovinfo()\n    '''\n    Output:\n    {'mavpackettype': 'AHRS2', 'roll': -0.11364290863275528, 'pitch': -0.02841472253203392, 'yaw': 2.0993032455444336, 'altitude': 0.0, 'lat': 0, 'lng': 0}\n    {'mavpackettype': 'AHRS3', 'roll': 0.025831475853919983, 'pitch': 0.006112074479460716, 'yaw': 2.1514968872070312, 'altitude': 0.0, 'lat': 0, 'lng': 0, 'v1': 0.0, 'v2': 0.0, 'v3': 0.0, 'v4': 0.0}\n    {'mavpackettype': 'VFR_HUD', 'airspeed': 0.0, 'groundspeed': 0.0, 'heading': 123, 'throttle': 0, 'alt': 3.129999876022339, 'climb': 3.2699999809265137}\n    {'mavpackettype': 'AHRS', 'omegaIx': 0.0014122836291790009, 'omegaIy': -0.022567369043827057, 'omegaIz': 0.02394154854118824, 'accel_weight': 0.0, 'renorm_val': 0.0, 'error_rp': 0.08894175291061401, 'error_yaw': 0.0990816056728363}\n\n    '''\nSend GPS Data :\n\n    from rovpy import rovpy\n    import time\n    timestam = time.time()\n    rovpy.connectrov(\"STABILIZE\",\"/dev/ttyACM0\") #connectrov(mode,port or udp url)\n\n    rovpy.sendgps(timestamp,0,8|16|32,0,0,3,0,0,0,1,1,0,0,0,0,0,0,7)\n\nFor your thoughts and suggestions: enis@enisgetmez.com , http://enisgetmez.com https://instagram.com/enisgetmez\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/enisgetmez",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rovpy",
    "package_url": "https://pypi.org/project/rovpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/rovpy/",
    "project_urls": {
      "Homepage": "https://github.com/enisgetmez"
    },
    "release_url": "https://pypi.org/project/rovpy/0.0.7/",
    "requires_dist": [
      "numpy",
      "pymavlink",
      "imutils",
      "opencv-python",
      "serial"
    ],
    "requires_python": "",
    "summary": "Ardusub based Rov Library",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7264968,
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e89e17905de7199bbf18c1e2f33bc3aae72b407f4428b950ae86b9eb275f3b78",
          "md5": "3cb1cd99a25dc9d47a86f4ebec26a8dd",
          "sha256": "047ad23fa98629824cf5e4c990d4f9b37e3d3c9ea0f256ca65effbbe79910a91"
        },
        "downloads": -1,
        "filename": "rovpy-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3cb1cd99a25dc9d47a86f4ebec26a8dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7223,
        "upload_time": "2020-05-18T01:57:59",
        "upload_time_iso_8601": "2020-05-18T01:57:59.080857Z",
        "url": "https://files.pythonhosted.org/packages/e8/9e/17905de7199bbf18c1e2f33bc3aae72b407f4428b950ae86b9eb275f3b78/rovpy-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f888dfee8a6e0beba0cb3c42d3048b1bf8b44d93a6570cc04318ee59fe5ea89a",
          "md5": "a56256d3235759f74a5654287de2f1de",
          "sha256": "fe60ebb2108430d9955d8dcb6b70ca9fd9ad70cebf7c6c7d7aa66c002c00afa6"
        },
        "downloads": -1,
        "filename": "rovpy-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a56256d3235759f74a5654287de2f1de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6434,
        "upload_time": "2020-05-18T01:58:00",
        "upload_time_iso_8601": "2020-05-18T01:58:00.573797Z",
        "url": "https://files.pythonhosted.org/packages/f8/88/dfee8a6e0beba0cb3c42d3048b1bf8b44d93a6570cc04318ee59fe5ea89a/rovpy-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e89e17905de7199bbf18c1e2f33bc3aae72b407f4428b950ae86b9eb275f3b78",
        "md5": "3cb1cd99a25dc9d47a86f4ebec26a8dd",
        "sha256": "047ad23fa98629824cf5e4c990d4f9b37e3d3c9ea0f256ca65effbbe79910a91"
      },
      "downloads": -1,
      "filename": "rovpy-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3cb1cd99a25dc9d47a86f4ebec26a8dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7223,
      "upload_time": "2020-05-18T01:57:59",
      "upload_time_iso_8601": "2020-05-18T01:57:59.080857Z",
      "url": "https://files.pythonhosted.org/packages/e8/9e/17905de7199bbf18c1e2f33bc3aae72b407f4428b950ae86b9eb275f3b78/rovpy-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f888dfee8a6e0beba0cb3c42d3048b1bf8b44d93a6570cc04318ee59fe5ea89a",
        "md5": "a56256d3235759f74a5654287de2f1de",
        "sha256": "fe60ebb2108430d9955d8dcb6b70ca9fd9ad70cebf7c6c7d7aa66c002c00afa6"
      },
      "downloads": -1,
      "filename": "rovpy-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "a56256d3235759f74a5654287de2f1de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6434,
      "upload_time": "2020-05-18T01:58:00",
      "upload_time_iso_8601": "2020-05-18T01:58:00.573797Z",
      "url": "https://files.pythonhosted.org/packages/f8/88/dfee8a6e0beba0cb3c42d3048b1bf8b44d93a6570cc04318ee59fe5ea89a/rovpy-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}