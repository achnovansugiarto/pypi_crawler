{
  "info": {
    "author": "Chen BAI",
    "author_email": "baichen.bai@alibaba-inc.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ICCAD Contest Platform\n\n\nThe official contest platform for Problem C: Microarchitecture Design Space Exploration of [ICCAD Contest](http://iccad-contest.org/).\n\nThe problem formulation is illustrated in [Problem C](http://iccad-contest.org/Problems/CADContest_2022_Problem_C_20220218.pdf).\n\n\n2022/07/11 The updated part is highlighted in <span style=\"background-color: #FFFF00\"><b>yellow</b></span>.\n\n2022/07/30 The updated part is highlighted in <span style=\"background-color: #00FF00\"><b>green</b></span>.\n\n2022/08/18 The updated part is highlighted in <span style=\"background-color: #00FFFF\"><b>blue</b></span>.\n\n2022/08/18 The updated part is highlighted in <span style=\"background-color: #808080\"><b>gray</b></span>.\n\n\n## Instructions for using the platform\n\n\n### Installation\n\nWe recommend you use Python 3.5+ for your environment.\n\nInstall the latest version (<span style=\"background-color: #808080\"><b>0.0.9</b></span>) of the platform to your machines.\n```\n$ pip3 install iccad_contest\n```\nor\n```\n$ pip3 install iccad-contest==0.0.9\n```\n\nDownload the example cases, i.e., **Problem C_cases_0622.zip**, from [the official ICCAD Contest problem website](http://iccad-contest.org/Problems.html).\n\n\n### Get started with a simple case of the random search\n\n\nUnzip example cases downloaded following [Installation](#installation), and you can receive files containing example cases and configurations.\n```\nProblem\\ C\\ data\n├── gp-configs.json\n├── gp-optimizer.py\n├── lr-offline-optimizer.py\n├── lr-online-optimizer.py\n├── random-search-optimizer.py\n└── random-search-w-early-stopping-optimizer.py\n```\n```\n$ cd Problem\\ C\\ data\n```\n\nReceive the help menu\n```\n$ python3 random-search-optimizer.py -h\n```\n\n```\nusage: random-search-optimizer.py [-h] [-o OUTPUT_PATH] [-u UUID]\n                                  [-s SOLUTION_SETTINGS] [-q NUM_OF_QUERIES]\n\nICCAD'22 Contest Platform - solutions evaluation\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT_PATH, --output-path OUTPUT_PATH\n                        contest output path specification\n  -u UUID, --uuid UUID  universally unique identifier (UUID) specification\n  -s SOLUTION_SETTINGS, --solution-settings SOLUTION_SETTINGS\n                        solution submission specification\n  -q NUM_OF_QUERIES, --num-of-queries NUM_OF_QUERIES\n                        the number of queries specification\n```\n`--output-path`: specifies a directory path to store all output information.\n\n`--uuid`: specifies an [universally unique identifier (UUID)](https://en.wikipedia.org/wiki/Universally_unique_identifier) as a random seed.\n\n`--solution-settings`: if your implementation contains some `<dict>`-like mapping settings, you need to organize these settings as a JSON file.\nYou specify the file path with `--solution-settings` (please see [Get started with a simple case of building a Gaussian process regression model](#get-started-with-a-simple-case-of-building-a-gaussian-process-regression-model)).\n\n`--num-of-queries`: specify how many times to issue an access to the dataset.\n\nNotice that you should specify `--num-of-queries` for your submission.\n`--num-of-queries` is related to tuning your model with good convergence.\nMore `--num-of-queries` can incur more overall running time (ORT).\n\nThe only parameter related to your quality of solution results is `--num-of-queries`.\nA good algorithm can find better Pareto frontiers with less `--num-of-queries`, i.e., your solution uses less time cost.\n\nA simple case to start the random search\n```\n$ python3 random-search-optimizer.py -o output -u \"00ef538e88634ddd9810d034b748c24d\" -q 10\n```\n\nThe command specifies `output` as the directory path to store all generated information.\nIt uses `00ef538e88634ddd9810d034b748c24d` as a random seed.\nIt issues 10 times to access the dataset.\nThe results are generated to `output` directory.\nYou can check the summary reports for the random search in `output/summary`, and log information in `output/log`.\n\n<span style=\"background-color: #FFFF00\">\n    <b>\n        We compare the <span style=\"background-color: #00FF00\">Pareto hypervolume</span> and the overall running time (ORT) for your submissions with a set of pre-determined UUIDs.\n    </b>\n</span>\n\nA better solution pertains <span style=\"background-color: #FFFF00\"><b>higher <span style=\"background-color: #00FF00\">Pareto hypervolume</span> and ORT</b></span>.\nPlease refer it to [Evaluation of your submission](#evaluation-of-your-submission).\n\n\n### Get started with a simple case of building a simple linear regression model\n\n\nWe can build a simple model to do the exploration.\n\nThe online algorithm can dynamically update the simple model through exploration.\n\nWe can experimence an online algorithm with a simple linear regression model.\n\n```\n$ python3 lr-online-optimizer.py -o output -u \"00ef538e88634ddd9810d034b748c24d\" -q 10\n```\n\nSince the codes `lr-online-optimizer.py` is only for demonstration, so no advanced optimization techniques are utilized.\n\nThe offline algorithm cannot update the simple model through exploration, i.e., it is frozen.\nHowever, it is often trained on a larger initial dataset, and we can evaluate the model's accuracy using collected data.\nSo the initialization algorithm could be critical for such algorithm design.\n\nWe can also experimence an offline algorithm with a simple linear regression model.\n\n```\n$ python3 lr-offline-optimizer.py -o output -u \"00ef538e88634ddd9810d034b748c24d\" -q 2\n```\n\nIn the offline algorithm, `-q` or `--num-of-queries` is set to 2 since it often sweeps the design space and conducts only one exploration.\nMore `-q` or `--num-of-queries` does no good help improve the <span style=\"background-color: #00FF00\">Pareto hypervolume</span> except for degrading ORT.\n\n\n### Get started with a simple case of building a Gaussian process regression model\n\n\nThe example can be executed with\n\n```\n$ python3 gp-optimizer.py -o output -s gp-configs.json -u \"00ef538e88634ddd9810d034b748c24d\" -q 10\n```\n\nIn the command, `-s` or `--solution-settings` should be specified.\nThe application program interface (API) of `GaussianProcessRegressorOptimizer` is defined shown below,\n```\nclass GaussianProcessRegressorOptimizer(AbstractOptimizer):\n    primary_import = \"iccad_contest\"\n\n    def __init__(self, design_space, optimizer, random_state):\n    \t...\n\n```\n`optimizer`, `random_state`, etc. are corporated into the initialization function, and they can be specified through a JSON file, i.e., `gp-configs.json`.\n```\n{\n\t\"optimizer\": \"fmin_l_bfgs_b\",\n\t\"random_state\": 2022\n}\n```\nSuch design will provide you with a convenient coding and algorithm tuning experience, i.e., if your solution contains many hyper-parameters, you can specify a set of those hyper-parameters with a single JSON file.\nBe careful that you need to specify which JSON file to use via the experiment command.\n\n\n### Get started with a simple case of the random search when applying the early stopping criterion.\n\n```\n$ python3 random-search-w-early-stopping-optimizer.py -o output -u \"00ef538e88634ddd9810d034b748c24d\" -q 100\n```\nYou can set `self.early_stopping = True` in *random-search-w-early-stopping-optimizer.py* to early stop your optimizer. Hence, the ORT is determined by your early stopping criterion if your early stopping condition is satisfied instead of `--num-of-queries`.\n\n\n### Prepare your submission\n\n\nRefer to the random search example, i.e., `random-search-optimizer.py`.\n```\n\"\"\"\n    random search optimizer performs random search.\n    the code is only for example demonstration.\n    ``` \n        python random-search-optimizer.py \\\n            -o [your experiment outputs directory] \\\n            -q [the number of your queries]\n    ```\n    you can specify more options to test your optimizer. please use\n    ```\n        python random-search-optimizer.py -h\n    ```\n    to check.\n\"\"\"\n\n\nimport numpy as np\nfrom iccad_contest.abstract_optimizer import AbstractOptimizer\nfrom iccad_contest.design_space_exploration import experiment\n\n\nclass RandomSearchOptimizer(AbstractOptimizer):\n    primary_import = \"iccad_contest\"\n\n    def __init__(self, design_space):\n        \"\"\"\n            build a wrapper class for an optimizer.\n\n            parameters\n            ----------\n            design_space: <class \"MicroarchitectureDesignSpace\">\n        \"\"\"\n        AbstractOptimizer.__init__(self, design_space)\n        self.n_suggestions = 1\n\n    def suggest(self):\n        \"\"\"\n            get a suggestion from the optimizer.\n\n            returns\n            -------\n            next_guess: <list> of <list>\n                list of `self.n_suggestions` suggestion(s).\n                each suggestion is a microarchitecture embedding.\n        \"\"\"\n        x_guess = np.random.choice(\n            range(1, self.design_space.size + 1),\n            size=self.n_suggestions\n        )\n        return [\n            self.design_space.vec_to_microarchitecture_embedding(\n                self.design_space.idx_to_vec(_x_guess)\n            ) for _x_guess in x_guess\n        ]\n\n    def observe(self, x, y):\n        \"\"\"\n            send an observation of a suggestion back to the optimizer.\n\n            parameters\n            ----------\n            x: <list> of <list>\n                the output of `suggest`.\n            y: <list> of <list>\n                corresponding values where each `x` is mapped to.\n        \"\"\"\n        pass\n\n\nif __name__ == \"__main__\":\n    experiment(RandomSearchOptimizer)\n\n```\n\nYou need to implement `suggest`, and `observe` functions after you inherit `AbstractOptimizer` from `iccad_contest.abstract_optimizer`.\n`suggest`, as the function name shows intuitively, is to provide a suggestion.\n`observe` takes action after your optimizer sees the suggestion and corresponding objective values.\nYou can train a surrogate model, adjust your optimization strategy, etc.\n`x` and `y` are `<list>` in `observe`.\n`x` corresponds to your previous suggestions, and `y` are the objective values corresponding to `x`.\n**The operations of how each element of `x` is mapped to each element `y` are hidden by the platform, so you do not need to care about the details.**\nNevertheless, you need to ensure that each element of `x` is valid, i.e., each element of `x` is in the design space.\nAn 'out of the design space' error prompts if an element of `x` is not in the design space, and the platform will fall back to generate random suggestions in that case.\nThe design space exploration engine will frequently call your `suggest`, and `observe` to find better microarchitectures.\nIf you have organized some hyper-parameters to a JSON file and passed the JSON file to the platform, you can check [Get started with a simple case of building a Gaussian process regression model](#get-started-with-a-simple-case-of-building-a-gaussian-process-regression-model) for more information about how to use a JSON file to organize your codes.\nThe submission includes\n- your implemented Python scripts,\n- the execution commands,\n- related JSON configurations leveraged by your algorithm, if any, and\n- dependency packages list for supporting your algorithm execution, if any.\n\n\n## Microarchitecture Design Space\n\n\n### Definition of the design space\n\n\nThe design space is extracted from RISC-V BOOM.\nWe will release dataset step by step.\nThe current dataset only includes one design set called `sub-design-1`, and it is defined using a sheet with `xlsx` format.\nThe sheet is located at `iccad_contest/contest-dataset`.\nThe sheet comprises two sub sheets, i.e., `Microarchitecture Design Space` and `Components`.\nIn `Microarchitecture Design Space`, each component is chosen by an index, which is mapped to a kind of structure defined in `Components`.\nThe number at the end column of `Microarchitecture Design Space` is the size of the design space.\n`Components` holds different definitions of each component.\nWithin each component, `idx` denotes the index of a kind of structure with respect to the component.\nA member `design_space` defined in `AbstractOptimizer` specifies the microarchitecture design space.\n`design_space.descriptions` define the descriptions of parameterized components for the microarchitecture, and `design_space.components_mappings` define each component's structure parameters mappings.\nFor more information about the data structure, please refer to `MicroarchitectureDesignSpace` defined in `iccad_contest/functions/design_space.py`.\n\nSome data structures are helpful that you might frequently leverage.\n```\ndescriptions = {\n\t\"sub-design-1\": {\n\t\t\"Fetch\": [1],\n\t\t\"Decoder\": [1],\n\t\t\"ISU\": [1, 2, 3],\n\t\t\"IFU\": [1, 2, 3],\n\t\t...\n\t}\n}\n\ncomponents_mappings = {\n\t\"Fetch\": {\n\t\t\"description\": [\"FetchWidth\"],\n\t\t\"1\": [4]\n\t},\n\t\"Decoder\": {\n\t\t\"description\": [\"DecodeWidth\"],\n\t\t\"1\": [1]\n\t},\n\t\"ISU\": {\n\t\t\"description\": [\n\t\t\t\"MEM_INST.DispatchWidth\", \"MEM_INST.IssueWidth\"\n\t\t\t\"MEM_INST.NumEntries\", \"INT_INST.DispatchWidth\",\n\t\t\t\"INT_INST.IssueWidth\", \"INT_INST.NumEntries\",\n\t\t\t\"FP_INST.DispatchWidth\", \"FP_INST.IssueWidth\",\n\t\t\t\"FP_INST.NumEntries\"\n\t\t],\n\t\t\"1\": [1, 1, 8, 1, 1, 8, 1, 1, 8],\n\t\t\"2\": [1, 1, 6, 1, 1, 6, 1, 1, 6],\n\t\t\"3\": [1, 1, 10, 1, 1, 12, 1, 1, 12]\n\t},\n\t\"IFU\": {\n\t\t\"description\": [\"BranchTag\", \"FetchBufferEntries\", \"FetchTargetQueue\"]\n\t\t\"1\": [8, 8, 16],\n\t\t\"2\": [6, 6, 14],\n\t\t\"3\": [10, 12, 20]\n\t},\n\t...\n}\n\n```\n`descriptions` and `components_mappings` help to define the design space.\nWe index each design with one integer.\nThe first design is indexed with 1.\nThe second is indexed with 2.\nThe same logic goes for others. \n\nSome functions are helpful that you might frequently leverage.\n```\ndef idx_to_vec(self, idx):\n\t...\n```\n\n`idx_to_vec` transforms an index to an index vector, then used to specify a combination defined in `Microarchitecture Design Space`.\n\n\n```\ndef vec_to_microarchitecture_embedding(self, vec):\n\t...\n```\n`vec_to_microarchitecture_embedding` transforms an index vector to a microarchitecture embedding, i.e., a feature vector with each element defines a structure of a component for the processor.\n\nIf you want to operate with the design space using functions that are not supported by the contest platform, you need to implement them yourself.\n\n\n### Dataset\n\n\nThe released dataset is a two-dimensional matrix with the shape of (number of designs for `sub-design-1`, *CONCAT*(`microarchitecture embedding`, `performance`, `power`, `area`, `time of the VLSI flow`)).\n\nThe dataset is a **dummy**, helping you familiarize yourself with the platform.\n\nThe dummy dataset is in `iccad_contest/contest-dataset/contest.csv`\n\n`microarchitecture embedding`: a vector concatenated from structure representations of all components.\n\n`performance`: a scalar value denotes the performance of the design.\n\n`power`: a scalar value denotes the power of the design.\n\n`area`: a scalar value denotes the area of the design.\n\n`time of the VLSI flow`: a scalar value denotes the time cost spent to evaluate accurate performance, power, and area values via the VLSI flow.\n\nWe will evaluate your submission with the real dataset, measured with commonly-used benchmarks and commercial electronic design automation (EDA) tools.\n<span style=\"background-color: #00FFFF\">You can evaluate your optimizers with the real dataset, following the guideline of the [<b>submission kit</b>](http://iccad-contest.org/Problems/testcase/Problem%20C_submission%20kit_0722.zip).\nThe submission kit guides you through submitting to our online submission and ranking platform.\nOn a real dataset, you can see your results, i.e., <span style=\"background-color: #FFFF00\">Pareto hypervolume difference</span> or <span style=\"background-color: #00FF00\">Pareto hypervolume</span> and ORT.\nFurthermore, a ranking list is also provided to you.\nYou can modify and tune your solutions with respect to the released results of your previous submission.\n</span>\n\n## Evaluation of your submission\n\nSince the average distance to reference set (ADRS) cannot reflect the true performance of an optimizer in previous versions in some rare circumstances, we replace ADRS with the Pareto hypervolume difference or <span style=\"background-color: #00FF00\">Pareto hypervolume</span>.\n\nPareto hypervolume difference is a more fair indicator to evaluate the performance of optimizers for this contest.\n\n***We compare the <span style=\"background-color: #00FF00\">Pareto hypervolume</span> and the overall running time (ORT) for your submissions with a set of pre-determined UUIDs.***\n\nFor a fair comparison of <span style=\"background-color: #FFFF00\">Pareto hypervolume difference</span> or <span style=\"background-color: #00FF00\">Pareto hypervolume</span>, the platform automatically normalized the performance, power, and area values, and the <span style=\"background-color: #FFFF00\">Pareto hypervolume difference</span> or <span style=\"background-color: #00FF00\">Pareto hypervolume</span> is calculated based on such manipulated values.\nHence, it is normal to see some negative normalized PPA values.\nAs [Dataset](#dataset) introduces, we will evaluate your solution with the actual dataset.\n\nThe final score is calculated based on your optimizer's average <span style=\"background-color: #00FF00\">Pareto hypervolume</span> and ORT on a pre-determined series of hidden UUIDs.\nThe calculation is via\n\n![the score function](misc/score.png),\n\nwhere ![alpha](misc/alpha.png) is an ORT score baseline, equal to 6, and ![theta](misc/theta.png) is a pre-defined ORT budget, equivalent to 2625000.\nThe constants are set to align with the de facto microarchitecture design space exploration flow.\nIt is worth noting that if your ORT is six times larger than ![theta](misc/theta.png), then your final score will be negative.\nHence, a better solution has <span style=\"background-color: #FFFF00\">lower Pareto hypervolume difference (<span style=\"background-color: #00FF00\">or higher  Pareto hypervolume</span>) and ORT</span> as much as possible.\n\n\n## Notice\n\n\nThe ICCAD Contest includes alpha, beta, and final test submissions.\nWe will release a dataset each round, and you need to use the released dataset to test your implementations.\nAt the final stage, we have hidden cases to test your implementations, and we compare the results of all contestants based on hidden cases.\n\n* ~~Alpha test submission\t2022/06/13 17:00:00 (GTM+8)~~\n\n* ~~Beta test submission\t2022/07/25 17:00:00 (GTM+8)~~\n\n* <span style=\"background-color: #808080\">Final submission 2022/09/5 17:00:00 (GTM+8)</span>\n\n\n## Contact\n\n\nPlease contact **cad.contest.iccad@gmail.com** or DAMO Academy for any question, comment, or bug report.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://code.aone.alibaba-inc.com/ctl-research/iccad-contest-platform",
    "keywords": "",
    "license": "Apache v2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iccad-contest",
    "package_url": "https://pypi.org/project/iccad-contest/",
    "platform": "any",
    "project_url": "https://pypi.org/project/iccad-contest/",
    "project_urls": {
      "Homepage": "https://code.aone.alibaba-inc.com/ctl-research/iccad-contest-platform"
    },
    "release_url": "https://pypi.org/project/iccad-contest/0.0.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "ICCAD'22 Contest @ Microarchitecture Design Space Exploration",
    "version": "0.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14836746,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5916e4e03885065c7f79423c4751375065f8f9a16c076cdb1363f9bc49c8b70d",
          "md5": "1c2b6ea1f36ddfb49695a43aab467dab",
          "sha256": "d6ee6f2b93b0c706ef565d645c7bf355ed74b383bf9b5ed4400fb59075f01ef4"
        },
        "downloads": -1,
        "filename": "iccad-contest-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1c2b6ea1f36ddfb49695a43aab467dab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 156043,
        "upload_time": "2022-05-31T09:21:39",
        "upload_time_iso_8601": "2022-05-31T09:21:39.093069Z",
        "url": "https://files.pythonhosted.org/packages/59/16/e4e03885065c7f79423c4751375065f8f9a16c076cdb1363f9bc49c8b70d/iccad-contest-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4af9787c520b0571b27461ab2ff6845a31e2cb926dbeb14ac59ff9bebf89030",
          "md5": "49e161a2204bf115a49125e0eab99b87",
          "sha256": "fc71e78ad27cc0adc2c4844441ac7c8c9fc421e081d4987c62d175f87764c049"
        },
        "downloads": -1,
        "filename": "iccad-contest-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "49e161a2204bf115a49125e0eab99b87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 156172,
        "upload_time": "2022-06-09T15:46:19",
        "upload_time_iso_8601": "2022-06-09T15:46:19.951304Z",
        "url": "https://files.pythonhosted.org/packages/f4/af/9787c520b0571b27461ab2ff6845a31e2cb926dbeb14ac59ff9bebf89030/iccad-contest-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "544ec2050545dab696435f17de8b5eb1558fd1ffcebeadeaf9e71d0d900a949f",
          "md5": "8ecaff33fac079f2637c82435808d8c4",
          "sha256": "116f0b9f7df31c001361b72a5d8000a3ead194ae0255c0d6ce844ccd17384329"
        },
        "downloads": -1,
        "filename": "iccad-contest-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8ecaff33fac079f2637c82435808d8c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 156933,
        "upload_time": "2022-06-22T03:39:46",
        "upload_time_iso_8601": "2022-06-22T03:39:46.927948Z",
        "url": "https://files.pythonhosted.org/packages/54/4e/c2050545dab696435f17de8b5eb1558fd1ffcebeadeaf9e71d0d900a949f/iccad-contest-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7727c6b544cfdca94dcb5dc7fc2196b294ddea5ea67c492baadc5c7bdcd25e71",
          "md5": "c2466b11bf168e8de632eae0df8ee31e",
          "sha256": "5d2061250c9ea1660a9e4a40100a498169fe4c40b572c5c542f2330f2f7e19d0"
        },
        "downloads": -1,
        "filename": "iccad-contest-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c2466b11bf168e8de632eae0df8ee31e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 157298,
        "upload_time": "2022-06-28T03:34:48",
        "upload_time_iso_8601": "2022-06-28T03:34:48.882163Z",
        "url": "https://files.pythonhosted.org/packages/77/27/c6b544cfdca94dcb5dc7fc2196b294ddea5ea67c492baadc5c7bdcd25e71/iccad-contest-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9478939c3500d0774a4d31faa5c6ad2c9b74512c86211a974188a1ec250eb02",
          "md5": "aaa5837ae1882fb64cab30481ece462d",
          "sha256": "83a8d3ab5d163095da1bd59e5f3d26b36bc83a23b6805449aba9c4e8ca0bf8f9"
        },
        "downloads": -1,
        "filename": "iccad-contest-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "aaa5837ae1882fb64cab30481ece462d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 160199,
        "upload_time": "2022-07-11T08:14:00",
        "upload_time_iso_8601": "2022-07-11T08:14:00.169439Z",
        "url": "https://files.pythonhosted.org/packages/b9/47/8939c3500d0774a4d31faa5c6ad2c9b74512c86211a974188a1ec250eb02/iccad-contest-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "660fb0db864f05680be97ba81ccead290c8da6e796d8e6c5708d2939d77407a3",
          "md5": "061d91a98f8472a5d491b9028bbb646c",
          "sha256": "b54232227882a2ee901a6589ddb7159b855452bd6ecbca18637c81c8a8113dc5"
        },
        "downloads": -1,
        "filename": "iccad-contest-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "061d91a98f8472a5d491b9028bbb646c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 316237,
        "upload_time": "2022-08-01T05:41:33",
        "upload_time_iso_8601": "2022-08-01T05:41:33.767943Z",
        "url": "https://files.pythonhosted.org/packages/66/0f/b0db864f05680be97ba81ccead290c8da6e796d8e6c5708d2939d77407a3/iccad-contest-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79f03b0c7a0042d325a11417814cbf0a558da28f91c6af7de5d9a1dd13d576f3",
          "md5": "27e24de4e45107d1c2388dbee9430d80",
          "sha256": "969e05186d33adf2fba672f1e79058e3455cc81fc17fe709fa7f81a5ba4365bc"
        },
        "downloads": -1,
        "filename": "iccad-contest-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "27e24de4e45107d1c2388dbee9430d80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 432115,
        "upload_time": "2022-08-18T08:12:51",
        "upload_time_iso_8601": "2022-08-18T08:12:51.515665Z",
        "url": "https://files.pythonhosted.org/packages/79/f0/3b0c7a0042d325a11417814cbf0a558da28f91c6af7de5d9a1dd13d576f3/iccad-contest-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1628dc22184d4f93c97bce7aab532cf7f2202b2aab2b9226513ce324e55881a",
          "md5": "21b5cd4c6ccbb523f928136e8209c490",
          "sha256": "ce3d3d076f1dce739e1a41147c31d304a900c2aa3e01244c51ab6d3bb95729c2"
        },
        "downloads": -1,
        "filename": "iccad-contest-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "21b5cd4c6ccbb523f928136e8209c490",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 432163,
        "upload_time": "2022-08-22T14:08:03",
        "upload_time_iso_8601": "2022-08-22T14:08:03.470708Z",
        "url": "https://files.pythonhosted.org/packages/f1/62/8dc22184d4f93c97bce7aab532cf7f2202b2aab2b9226513ce324e55881a/iccad-contest-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1628dc22184d4f93c97bce7aab532cf7f2202b2aab2b9226513ce324e55881a",
        "md5": "21b5cd4c6ccbb523f928136e8209c490",
        "sha256": "ce3d3d076f1dce739e1a41147c31d304a900c2aa3e01244c51ab6d3bb95729c2"
      },
      "downloads": -1,
      "filename": "iccad-contest-0.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "21b5cd4c6ccbb523f928136e8209c490",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 432163,
      "upload_time": "2022-08-22T14:08:03",
      "upload_time_iso_8601": "2022-08-22T14:08:03.470708Z",
      "url": "https://files.pythonhosted.org/packages/f1/62/8dc22184d4f93c97bce7aab532cf7f2202b2aab2b9226513ce324e55881a/iccad-contest-0.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}