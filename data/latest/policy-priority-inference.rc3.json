{
  "info": {
    "author": "Omar A. Guerrero",
    "author_email": "oguerrer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Policy Priority Inference\n\nThis package contains all the code of PPI's agent-computing model, as well as helper functions to parallelise the Monte Carlo simulations, and the calibration algorithm.\n\n\nFUNCTIONS:\n\n\n    calibrate(I0, IF, success_rates, A=None, R=None, bs=None, qm=None, rl=None, Bs=None, B_dict=None, T=None, threshold=0.8, parallel_processes=None, verbose=False, low_precision_counts=101, increment=1000)\n        Function to calibrate the model parameters.\n        \n        Parameters\n        ----------\n            I0: numpy array \n                See run_ppi function.\n            IF: numpy array \n                Vector with final values of the development indicators. These are\n                used to compute one type of error: whether the simulated values\n                end at the same levels as the empirical ones.\n            success_rates: numpy array \n                Vector with the empirical rate of growth of the development indicators.\n                A growth rate, for an indicator, is the number of times a positive \n                change is observed, divided by the the total number of changes \n                (which should be the number of observations in a time series minus one).\n                These rates must be greater than zero and less or equal to 1.\n                If an indicator does not show positive changes, it is suggested\n                to assign a rate close to zero. If success_rates contains values \n                that are zero (or less) or ones, they will be automatically replaced\n                by 0.01 and 1.0 respectively. This input is used to compute another \n                type of error: whether the endogenous probability of success of \n                each indicator matches its empirical rate of growth.\n            A:  2D numpy array (optional)\n                See run_ppi function.\n            R:  numpy array (optional)\n                See run_ppi function.\n            bs: numpy array (optional)\n                See run_ppi function.\n            qm: A floating point, an integer, or a numpy array (optional)\n                See run_ppi function.\n            rl: A floating point, an integer, or a numpy array (optional)\n                See run_ppi function.\n            Bs: numpy ndarray (optional)\n                See run_ppi function.\n            B_dict: dictionary (optional)\n                See run_ppi function.\n            T: int (optional)\n                See run_ppi function.\n            threshold: float (optional)\n                The goodness-of-fit threshold to stop the calibration routine. This\n                consists of the worst goodness-of-fit metric (across indicators) that\n                the user would like to obtain. The best possible metric is 1, but it\n                is impossible to achieve due to the model's stochasticity. Higher\n                thresholds demand more computing because more Monte Carlo simulations \n                are necessary to achieve high precision. If not provided, the default\n                value is 0.8.\n            parallel_processes: integer (optional)\n                The number of processes to be run in parallel. Each process carries\n                a work load of multiple Monte Carlo simulations of PPI. Parallel\n                processing is optional and requires the JobLib library. \n                If not provided, the Monte Carlo simulations are run in a serial fashion.\n            verbose: boolean (optional)\n                Whether to print the calibration progress. If not provided, the\n                default value is False.\n            low_precision_counts: integer (optional)\n                A hyperparameter of how many low-precision iterations will be run.\n                Low precision means that only 10 Monte Carlo simulations are performed\n                for each evaluation. Once low_precision_counts has been met,\n                the number of Monte Carlo simulations increases in each iteration\n                by the amount specified in the hyperparameter: increment. If not\n                provided, the default value is 100.\n            increment: integer (optional)\n                A hyperparameter that sets the number of Montecarlo Simulations to\n                increase with each iteration, once low_precision_counts has been\n                reached. If not provided, the default value is 1000.\n            \n        Returns\n        -------\n            output: 2D numpy array\n                A matrix with the calibration results, organised in the following \n                columns (the matrix includes the column titles):\n                    - alpha: The structural parameter of each indicator associated\n                        with positive changes.\n                    - alpha_prime: The structural parameter of each indicator associated\n                        with negative changes.\n                    - beta: The normalising constant of each parameter that helps \n                        mapping the expenditure and spillovers into a probability.\n                    - T: The number of simulation periods ran in in each Monte Carlo \n                        simulation. It only appears in the first row of the column, \n                        while the rest remain empty.\n                    - error_alpha: The indicator-specific error related to the \n                        final value.\n                    - error_beta: The indicator-specific error related to the \n                        rate of positive changes.\n                    - GoF_alpha: The indicator-specific goodness-of-fit metric \n                        related to the final value.\n                    - GoF_beta: The indicator-specific goodness-of-fit metric \n                        related to the rate of positive changes.\n    \n    compute_error(I0, IF, success_rates, alphas, alphas_prime, betas, A=None, R=None, bs=None, qm=None, rl=None, Bs=None, B_dict=None, G=None, T=None, parallel_processes=None, sample_size=1000)\n        Function to evaluate the model and compute the errors.\n        \n        Parameters\n        ----------\n            I0: numpy array \n                See run_ppi function.\n            IF: numpy array \n                See calibrate function.\n            success_rates: numpy array \n                See calibrate function.\n            alphas: numpy array\n                See run_ppi function.\n            alphas_prime: numpy array\n                See run_ppi function.\n            betas: numpy array\n                See run_ppi function.\n            A:  2D numpy array (optional)\n                See run_ppi function.\n            R:  numpy array (optional)\n                See run_ppi function.\n            bs: numpy array (optional)\n                See run_ppi function.\n            qm: A floating point, an integer, or a numpy array (optional)\n                See run_ppi function.\n            rl: A floating point, an integer, or a numpy array (optional)\n                See run_ppi function.\n            Bs: numpy ndarray (optional)\n                See run_ppi function.\n            B_dict: dictionary (optional)\n                See run_ppi function.\n            T: int (optional)\n                See run_ppi function.\n            parallel_processes: integer (optional)\n                See calibrate function.\n            sample_size: integer (optional)\n                Number of Monte Carlo simulations to be ran.\n            \n        Returns\n        -------\n            errors: 2D numpy array\n                A matrix with the error of each parameter. The first column contains\n                the errors associated to the final values of the indicators. The second\n                provides the errors related to the empirical probability of growth.\n            TF: integer\n                The number of periods that the model ran in each Monte Carlo simulation.\n    \n    run_ppi(I0, alphas, alphas_prime, betas, A=None, R=None, bs=None, qm=None, rl=None, Imax=None, Imin=None, Bs=None, B_dict=None, G=None, T=None, frontier=None)\n        Function to run one simulation of the Policy Priority Inference model.\n        \n        Parameters\n        ----------\n            I0: numpy array \n                Vector with the initial values of the development indicators.\n            alphas: numpy array\n                Vector with parameters representing the size of a positive change \n                in the indicators.\n            alphas_prime: numpy array\n                Vector with parameters representing the size of a negative change \n                in the indicators.\n            betas: numpy array\n                Vector with parameters that normalise the contribution of public \n                expenditure and spillovers to the probability of a positive change\n                in the indicators.\n            A:  2D numpy array (optional)\n                The adjacency matrix of the interdependency network of development \n                indicators. The rows denote the origins of dependencies and the columns\n                their destinations. Self-loops are not allowed, so PPI turns A's\n                diagonal into zeros. If not provided, the default value is a matrix \n                full of zeros.\n            R:  numpy array (optional)\n                Vector that specifies whether an indicator is instrumental\n                or collateral. Instrumental indicators have value 1 and collateral\n                ones have zero. If not provided, the default value is\n                a vector of ones.\n            bs: numpy array (optional)\n                Vector with modulating factors for the budgetary allocation of\n                each instrumental indicator. Its size should be equal to the number\n                of instrumental indicators. If not provided, the default value is\n                a vector of ones.\n            qm: A floating point, an integer, or a numpy array (optional)\n                Captures the quality of the monitoring mechanisms that procure \n                public governance. There are three options to specify qm:\n                    - A floating point: it assumes that the quality of monitoring is\n                    the same for every indicator, that it is exogenous, \n                    and that it remains constant through time. In this case, qm \n                    should have a value between 0 and 1.\n                    - An integer: it assumes that the quality of monitoring is captured \n                    by one of the indicators, so qm gives the index in I0 where such \n                    indicator is located. Here, the quality of monitoring is endogenous, \n                    dynamic, and homogenous across the indicators.\n                    - A vector: it assumes that the quality of monitoring is\n                    heterogeneous across indicators, exogenous, and constant. Thus,\n                    qm must have a size equal to the number of instrumental\n                    indicators. Each entry in qm denotes the quality of monitoring\n                    related to a particular indicator. Each value in this vector should be\n                    between 0 and 1.\n                If not provided, the default values is qm=0.5.\n            rl: A floating point, an integer, or a numpy array (optional)\n                Captures the quality of the rule of law. There are three options to\n                specify rl:\n                    - A floating point: it assumes that the quality of the rule of law \n                    is the same for every indicator, that it is exogenous, \n                    and that it remains constant through time. In this case, rl \n                    should have a value between 0 and 1.\n                    - An integer: it assumes that the quality of the rule of law is \n                    captured by one of the indicators, so rl gives the index in I0 \n                    where such indicator is located. Here, the quality of the rule \n                    of law is endogenous, dynamic, and homogenous across the indicators.\n                    - A vector: it assumes that the quality of the rule of law is\n                    heterogeneous across indicators, exogenous, and constant. Thus,\n                    rl has to have a size equal to the number of instrumental\n                    indicators. Each entry in rl denotes the quality of monitoring\n                    in a particular indicator. Each value in this vector should be\n                    between 0 and 1.\n                If not provided, the default values is rl=0.5.\n            Imax: numpy array (optional)\n                Vector with the theoretical upper bound of the indicators. If an entry\n                contains a missing value (NaN), then there is no upper bound defined\n                for that indicator and it will grow indefinitely. If not provided,\n                no indicator will have upper bound.\n            Imin: numpy array (optional)\n                Vector with the theoretical lower bound of the indicators. If an entry\n                contains a missing value (NaN), then there is no lower bound defined\n                for that indicator and it will decrease indefinitely. If not provided,\n                no indicator will have lower bound.\n            Bs: numpy ndarray\n                Disbursement schedule across expenditure programs. There are three \n                options to specify Bs:\n                    - A matrix: this is a disaggregated specification of the \n                    disbursement schedule across expenditure programs and time. \n                    The rows correspond to expenditure programs and the columns\n                    to simulation periods. Since there may be more or less expenditure \n                    programs than indicators, the number of rows in Bs should be\n                    consistent with the information contained in parameter B_dict,\n                    otherwise PPI will throw and exception. Since the number of \n                    columns denotes the number of simulation periods, parameter T\n                    will be overridden.\n                    - A vector: this would be equivalent to a matrix with a single\n                    row, i.e. to having a single expenditure program. This representation\n                    is useful when there is no information available across programs,\n                    but there is across time. Like in the matrix representation, \n                    this input should be consistent with B_dict.\n                If not provided, the default value is Bs=100 in every period.\n            B_dict: dictionary (optional)\n                A dictionary that maps the indices of every indicator into the \n                expenditure program(s) designed to affect them. Since there may be\n                multiple programs designed to impact and indicator, or multiple\n                indicators impacted by the same program, this mapping is not \n                one to one. To account for this, B_dict has, as keys, the indices \n                of the instrumental indicators and, as values, lists containing\n                the indices of the expenditure programs designed to impact them.\n                The indices of the programmes correspond to the rows of parameter \n                Bs in its matrix form.  The user should make sure that the keys are \n                consistent with the indices of those indicators that are instrumental. \n                Likewise, the indices of the expenditure programs should be consistent \n                with the number of rows in Bs, otherwise PPI will throw an exception.\n                Providing B_dict is necessary if Bs is a matrix with more than one \n                row.\n            G: numpy array (optional)\n                The development goals to be achieved for each indicator. These are\n                used only to calculate the initial development gaps, which affect \n                the allocation decision of the government agent. If not provided,\n                the default initial allocations are determined randomly.\n            T: int (optional)\n                The maximum number of simulation periods. If Bs is provided, then T\n                is overridden by the number of columns in Bs. If not provided, the\n                default value in T=50.\n            frontier: numpy array (optional)\n                A vector with exogenous probabilities of positive growth for each\n                indicator. If an entry contains NaN, then the corresponding\n                probability is endogenous. This vector is typically used to perform\n                analysis on the budgetary frontier, in which the probability of \n                success of the instrumental indicators is set to 1. Alternatively,\n                the 'relaxed' frontier consists of imposing a high (but less than 1)\n                probability of growth. If not provided, the default behaviour is that\n                all the probabilities of success are endogenous. It is recommended\n                to not provide this parameter unless the user understands the\n                budgetary frontier analysis and idiosyncratic bottlenecks.\n                \n            \n        Returns\n        -------\n            tsI: 2D numpy array\n                Matrix with the time series of the simulated indicators. Each row\n                corresponds to an indicator and each column to a simulation step.\n            tsC: 2D numpy array\n                Matrix with the time series of the simulated contributions. Each row\n                corresponds to an indicator and each column to a simulation step.\n            tsF: 2D numpy array\n                Matrix with the time series of the simulated benefits. Each row\n                corresponds to an indicator and each column to a simulation step.\n            tsP: 2D numpy array\n                Matrix with the time series of the simulated allocations. Each row\n                corresponds to an indicator and each column to a simulation step.\n            tsS: 2D numpy array\n                Matrix with the time series of the simulated spillovers. Each row\n                corresponds to an indicator and each column to a simulation step.\n            tsG: 2D numpy array\n                Matrix with the time series of the simulated growth probabilities. \n                Each row corresponds to an indicator and each column to a simulation step.\n    \n    run_ppi_parallel(I0, alphas, alphas_prime, betas, A=None, R=None, bs=None, qm=None, rl=None, Imax=None, Imin=None, Bs=None, B_dict=None, G=None, T=None, frontier=None, parallel_processes=4, sample_size=1000)\n        Function to run a sample of evaluations in parallel. As opposed to the function\n        run_ppi, which returns the output of a single realisation, this function returns\n        a set of time series (one for each realisation) of each output type.\n        \n        Parameters\n        ----------\n            I0: numpy array \n                See run_ppi function.\n            IF: numpy array \n                See calibrate function.\n            success_rates: numpy array \n                See calibrate function.\n            alphas: numpy array\n                See run_ppi function.\n            alphas_prime: numpy array\n                See run_ppi function.\n            betas: numpy array\n                See run_ppi function.\n            A:  2D numpy array (optional)\n                See run_ppi function.\n            R:  numpy array (optional)\n                See run_ppi function.\n            bs: numpy array (optional)\n                See run_ppi function.\n            qm: A floating point, an integer, or a numpy array (optional)\n                See run_ppi function.\n            rl: A floating point, an integer, or a numpy array (optional)\n                See run_ppi function.\n            Bs: numpy ndarray (optional)\n                See run_ppi function.\n            B_dict: dictionary (optional)\n                See run_ppi function.\n            G: numpy array (optional)\n                See run_ppi function.\n            T: int (optional)\n                See run_ppi function.\n            frontier: boolean\n                See run_ppi function.\n            parallel_processes: integer (optional)\n                See calibrate function.\n            sample_size: integer (optional)\n                Number of Monte Carlo simulations to be ran.\n            \n        Returns\n        -------\n            tsI: list\n                A list with multiple matrices, each one containing the time series \n                of multiple realisations of the simulated indicators. In each matrix, \n                each row corresponds to an indicator and each column to a simulation step.\n            tsC: list\n                A list with multiple matrices, each one containing the time series \n                of multiple realisations of the simulated indicators. In each matrix, \n                each row corresponds to an indicator and each column to a simulation step.\n            tsF: list\n                A list with multiple matrices, each one containing the time series \n                of multiple realisations of the simulated indicators. In each matrix, \n                each row corresponds to an indicator and each column to a simulation step.\n            tsP: list\n                A list with multiple matrices, each one containing the time series \n                of multiple realisations of the simulated indicators. In each matrix, \n                each row corresponds to an indicator and each column to a simulation step.\n            tsS: list\n                A list with multiple matrices, each one containing the time series \n                of multiple realisations of the simulated indicators. In each matrix, \n                each row corresponds to an indicator and each column to a simulation step.\n            tsG: list\n                A list with multiple matrices, each one containing the time series \n                of multiple realisations of the simulated indicators. In each matrix, \n                each row corresponds to an indicator and each column to a simulation step.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oguerrer/ppi",
    "keywords": "ppi,policy priority inference,SDGs",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "policy-priority-inference",
    "package_url": "https://pypi.org/project/policy-priority-inference/",
    "platform": null,
    "project_url": "https://pypi.org/project/policy-priority-inference/",
    "project_urls": {
      "Homepage": "https://github.com/oguerrer/ppi"
    },
    "release_url": "https://pypi.org/project/policy-priority-inference/3.0.2/",
    "requires_dist": [
      "numpy",
      "joblib"
    ],
    "requires_python": ">=3.7, <4",
    "summary": "Library to run the agent-computing model of the Policy Priority Inference research programme.",
    "version": "3.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17008667,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "775d354c56615115853526caaac615e0d7a1edc1c85ce4693fb5c8c81dba81b1",
          "md5": "b73c1c4781173c38bf412b98c6644be5",
          "sha256": "452e7db289388199351914c46d3b6bae06f79dad02cb7e1b53d26256d5278018"
        },
        "downloads": -1,
        "filename": "policy_priority_inference-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b73c1c4781173c38bf412b98c6644be5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 5662,
        "upload_time": "2023-02-22T11:53:22",
        "upload_time_iso_8601": "2023-02-22T11:53:22.331440Z",
        "url": "https://files.pythonhosted.org/packages/77/5d/354c56615115853526caaac615e0d7a1edc1c85ce4693fb5c8c81dba81b1/policy_priority_inference-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31c909627f738adad8ca866127726f5220d6b5b617e83f90074d4b1b2fc48393",
          "md5": "f8913dcbdd49d1c136c280949fb237b4",
          "sha256": "141c914d28231c6158f9b01075f5d85884241dca22e1ccb9ac9485bc7b7120b9"
        },
        "downloads": -1,
        "filename": "policy_priority_inference-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f8913dcbdd49d1c136c280949fb237b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 9056,
        "upload_time": "2023-02-22T12:15:32",
        "upload_time_iso_8601": "2023-02-22T12:15:32.663684Z",
        "url": "https://files.pythonhosted.org/packages/31/c9/09627f738adad8ca866127726f5220d6b5b617e83f90074d4b1b2fc48393/policy_priority_inference-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85870aed0fb27e6fb3967ac989b0a7ffe03c3b88447d459cbd8cc324194e1c12",
          "md5": "ca6f2acf7d49a2d01b64d1c01c459a85",
          "sha256": "262051b7d062786ad444fa42aa08d99804080d9340d6a073b52f0361695f9836"
        },
        "downloads": -1,
        "filename": "policy_priority_inference-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca6f2acf7d49a2d01b64d1c01c459a85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 5639,
        "upload_time": "2023-02-22T12:23:18",
        "upload_time_iso_8601": "2023-02-22T12:23:18.268843Z",
        "url": "https://files.pythonhosted.org/packages/85/87/0aed0fb27e6fb3967ac989b0a7ffe03c3b88447d459cbd8cc324194e1c12/policy_priority_inference-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6b1883c3cb9dd38b1d1df0b0f0f7e1950d5efffd046f5a18f26d9d45b207d43",
          "md5": "e5eb11eb4c371a0ebc2afa324b789e22",
          "sha256": "034d2cb7df3f5c1f06399b233b8b3883524d6a934ba6d7cb3316bf27178911fd"
        },
        "downloads": -1,
        "filename": "policy_priority_inference-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5eb11eb4c371a0ebc2afa324b789e22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 9054,
        "upload_time": "2023-02-22T12:23:19",
        "upload_time_iso_8601": "2023-02-22T12:23:19.543175Z",
        "url": "https://files.pythonhosted.org/packages/d6/b1/883c3cb9dd38b1d1df0b0f0f7e1950d5efffd046f5a18f26d9d45b207d43/policy_priority_inference-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0237114a20194efba4bbb85c18550ce0bdc23f68d1d4fe8751bf857bcdfb2fe1",
          "md5": "19b1efd91674db95ecd8a2c86a5541cc",
          "sha256": "f5de9b24da714e532b19b656c293b7e2e99875a40a12a630f1bb32b70a31f8a0"
        },
        "downloads": -1,
        "filename": "policy_priority_inference-3.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19b1efd91674db95ecd8a2c86a5541cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 5638,
        "upload_time": "2023-02-24T09:49:44",
        "upload_time_iso_8601": "2023-02-24T09:49:44.087145Z",
        "url": "https://files.pythonhosted.org/packages/02/37/114a20194efba4bbb85c18550ce0bdc23f68d1d4fe8751bf857bcdfb2fe1/policy_priority_inference-3.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc1b50d1711c41a9a9c24707c024bbc901d202dfdffcb9597bb23b0b2df788d6",
          "md5": "b3669248a9298200c42346a080e6706a",
          "sha256": "4c819a1475c6f498221e6d78a9960f2c1404242c692f11f8613b2d6ebe52a22a"
        },
        "downloads": -1,
        "filename": "policy_priority_inference-3.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b3669248a9298200c42346a080e6706a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 9055,
        "upload_time": "2023-02-24T09:49:45",
        "upload_time_iso_8601": "2023-02-24T09:49:45.583130Z",
        "url": "https://files.pythonhosted.org/packages/bc/1b/50d1711c41a9a9c24707c024bbc901d202dfdffcb9597bb23b0b2df788d6/policy_priority_inference-3.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0237114a20194efba4bbb85c18550ce0bdc23f68d1d4fe8751bf857bcdfb2fe1",
        "md5": "19b1efd91674db95ecd8a2c86a5541cc",
        "sha256": "f5de9b24da714e532b19b656c293b7e2e99875a40a12a630f1bb32b70a31f8a0"
      },
      "downloads": -1,
      "filename": "policy_priority_inference-3.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19b1efd91674db95ecd8a2c86a5541cc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <4",
      "size": 5638,
      "upload_time": "2023-02-24T09:49:44",
      "upload_time_iso_8601": "2023-02-24T09:49:44.087145Z",
      "url": "https://files.pythonhosted.org/packages/02/37/114a20194efba4bbb85c18550ce0bdc23f68d1d4fe8751bf857bcdfb2fe1/policy_priority_inference-3.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc1b50d1711c41a9a9c24707c024bbc901d202dfdffcb9597bb23b0b2df788d6",
        "md5": "b3669248a9298200c42346a080e6706a",
        "sha256": "4c819a1475c6f498221e6d78a9960f2c1404242c692f11f8613b2d6ebe52a22a"
      },
      "downloads": -1,
      "filename": "policy_priority_inference-3.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b3669248a9298200c42346a080e6706a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 9055,
      "upload_time": "2023-02-24T09:49:45",
      "upload_time_iso_8601": "2023-02-24T09:49:45.583130Z",
      "url": "https://files.pythonhosted.org/packages/bc/1b/50d1711c41a9a9c24707c024bbc901d202dfdffcb9597bb23b0b2df788d6/policy_priority_inference-3.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}