{
  "info": {
    "author": "Kalmat",
    "author_email": "palookjones@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: MacOS X",
      "Environment :: Win32 (MS Windows)",
      "Environment :: X11 Applications",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PyWinCtl <a name=\"pywinctl\"></a>\r\n\r\nCross-Platform module to get info on and control windows on screen.\r\n\r\nThis module is a Python 3 fork from [asweigart's PyGetWindow module](https://github.com/asweigart/PyGetWindow), which adds Linux and macOS support to the MS Windows-only original module, in the hope others can use it, test it or contribute.\r\n\r\nWith PyWinCtl you can retrieve info or control windows from other open applications, as well as use it as a cross-platform toolkit to manipulate your own application windows.\r\n\r\nMy most sincere thanks and acknowledgement to [Avasam](https://github.com/Avasam), [macdeport](https://github.com/macdeport) and [holychowders](https://github.com/holychowders) for their help and moral boost.\r\n\r\n1. [Window Features](#window-features)\r\n   1. [Important macOS notice](#macos-notice)\r\n   2. [Important Linux notice](#linux-notice)\r\n2. [Window Change Notifications](#watchdog])\r\n   1. [Important comments](#watchdog-comments)\r\n   2. [Important macOS Apple Script version notice](#watchdog-macos-comments)\r\n3. [Menu Features](#menu-features)\r\n4. [Install](#install)\r\n5. [Support](#support)\r\n6. [Using this code](#using)\r\n7. [Test](#test)\r\n\r\n## Window Features <a name=\"window-features\"></a>\r\n\r\nYou need a Window object to manipulate/control the target window on screen. It's possible to get a Window object by using any of the general methods (e.g. getActiveWidow() or getWindowsWithTitle()). You can also use windows id, as returned by PyQt's self.winId() or tkinter's root.frame(), which is very handy to get the Window object for your own application.\r\n\r\nThese functions are available at the moment, in all three platforms (Windows, Linux and macOS):\r\n\r\n|  General, independent functions:  |  Window class methods:  |  Window class properties:  |\r\n|  :---:  |  :---:  |  :---:  |  \r\n|  getActiveWindow  |  close  |  title  |  \r\n|  getActiveWindowTitle  |  minimize  |  updatedTitle (MacOSWindow only)  |  \r\n|  getAllWindows  |  maximize  |  isMaximized  |  \r\n|  getAllTitles  |  restore  |  isMinimized  |  \r\n|  getWindowsWithTitle  |  hide  |  isActive  |  \r\n|  getAllAppsNames  |  show  |  isVisible  |  \r\n|  getAppsWithName  |  activate  |  isAlive  |  \r\n|  getAllAppsWindowsTitles  |  resize / resizeRel  |  |  \r\n|  getWindowsAt  |  resizeTo  |  |  \r\n|  getAllScreens  |  move / moveRel  |  |  \r\n|  getMousePos |  moveTo  |  |  \r\n|  getScreenSize  |  raiseWindow  |    |  \r\n|  getWorkArea  |  lowerWindow  |    |  \r\n|  version  |  alwaysOnTop  |    |  \r\n|  checkPermissions (macOS only)  |  alwaysOnBottom  |    |\r\n|  |  sendBehind  |    |  \r\n|  |  acceptInput  |    |  \r\n|  |  getAppName  |    |  \r\n|  |  getHandle  |    |  \r\n|  |  getParent  |    |  \r\n|  |  getChildren  |    |  \r\n|  |  isParent  |    |  \r\n|  |  isChild  |    |  \r\n|  |  getDisplay  |    |  \r\n|  |  getExtraFrame  |    |  \r\n|  |  getClientFrame  |    |  \r\n\r\n***Important macOS notice <a name=\"macos-notice\"></a>***\r\n\r\nmacOS doesn't \"like\" controlling windows from other apps, so there are two separate classes you can use:\r\n- To control your own application's windows: MacOSNSWindow() is based on NSWindow Objects (you have to pass the NSApp() Object reference).\r\n- To control other applications' windows: MacOSWindow() is based on Apple Script, so it is non-standard, slower and, in some cases, tricky (uses window name as reference, which may change or be duplicate), but it's working fine in most cases. You will likely need to grant permissions on Settings -> Security&Privacy -> Accessibility. ***Notice some applications will have limited Apple Script support or no support at all, so some or even all methods may fail!***\r\n\r\n***Important Linux notice <a name=\"linux-notice\"></a>***\r\n\r\nThe enormous variety of Linux distributions, Desktop Environments, Window Managers, and their combinations, make it impossible to test in all scenarios.\r\n\r\nThis module has been tested OK in Ubuntu/Gnome, Ubuntu/KDE, Ubuntu/Unity, Mint/Cinnamon and Raspbian/LXDE. Except for Mint/Cinnamon and Ubuntu 22.04+, `sendBehind()` method doesn't properly work!\r\n\r\nIn case you find problems in other configs, please [open an issue](https://github.com/Kalmat/PyWinCtl/issues). Furthermore, if you have knowledge in these other configs, do not hesitate to contribute!\r\n\r\n## Window Change Notifications <a name=\"watchdog\"></a>\r\n\r\nwatchdog sub-class, running in a separate Thread, will allow you to define hooks and its callbacks to be notified when some window states change. Accessible through 'watchdog' submodule.\r\n\r\nThe watchdog will automatically stop when window doesn't exist anymore or main program quits.\r\n\r\n    isAliveCB:      callback to invoke when window is not alive anymore. Set to None to not to watch this\r\n                    Passes the new alive status value (False)\r\n    \r\n    isActiveCB:     callback to invoke if window changes its active status. Set to None to not to watch this\r\n                    Passes the new active status value (True/False)\r\n    \r\n    isVisibleCB:    callback to invoke if window changes its visible status. Set to None to not to watch this\r\n                    Passes the new visible status value (True/False)\r\n\r\n    isMinimizedCB:  callback to invoke if window changes its minimized status. Set to None to not to watch this\r\n                    Passes the new minimized status value (True/False)\r\n\r\n    isMaximizedCB:  callback to invoke if window changes its maximized status. Set to None to not to watch this\r\n                    Passes the new maximized status value (True/False)\r\n    \r\n    resizedCB:      callback to invoke if window changes its size. Set to None to not to watch this\r\n                    Passes the new size (width, height)\r\n    \r\n    movedCB:        callback to invoke if window changes its position. Set to None to not to watch this\r\n                    Passes the new position (x, y)\r\n    \r\n    changedTitleCB: callback to invoke if window changes its title. Set to None to not to watch this\r\n                    Passes the new title (as string)\r\n                    IMPORTANT: In MacOS AppScript version, if title changes, watchdog will stop unless using setTryToFind(True)\r\n\r\n    changedDisplayCB: callback to invoke if window changes display. Set to None to not to watch this\r\n                      Passes the new display name (as string)\r\n\r\n|  watchdog sub-module methods:  |\r\n|  :---:  |\r\n|  start  |\r\n|  updateCallbacks  |\r\n|  updateInterval  |\r\n|  setTryToFind  |\r\n|  isAlive  |\r\n|  stop  |\r\n\r\nExample:\r\n\r\n    import pywinctl as pwc\r\n    import time\r\n\r\n    def activeCB(active):\r\n        print(\"NEW ACTIVE STATUS\", active)\r\n\r\n    def movedCB(pos):\r\n        print(\"NEW POS\", pos)\r\n\r\n    npw = pwc.getActiveWindow()\r\n    npw.watchdog.start(isActiveCB=activeCB)\r\n    npw.watchdog.setTryToFind(True)\r\n    print(\"Toggle focus and move active window\")\r\n    print(\"Press Ctl-C to Quit\")\r\n    i = 0\r\n    while True:\r\n        try:\r\n            if i == 50:\r\n                npw.watchdog.updateCallbacks(isActiveCB=activeCB, movedCB=movedCB)\r\n            if i == 100:\r\n                npw.watchdog.updateInterval(0.1)\r\n                npw.watchdog.setTryToFind(False)\r\n            time.sleep(0.1)\r\n        except KeyboardInterrupt:\r\n            break\r\n        i += 1\r\n    npw.watchdog.stop()\r\n\r\n\r\n***Important comments <a name=\"watchdog-comments\"></a>***\r\n\r\n- The callbacks definition MUST MATCH their invocation params (boolean, string or (int, int))\r\n- The watchdog is asynchronous, so notifications won't be immediate (adjust interval value to your needs). Use window object properties instead (e.g. isAlive)\r\n- Position and size notifications will trigger several times between initial and final values\r\n- When updating callbacks, remember to set ALL desired callbacks. Non-present (None) callbacks will be deactivated\r\n\r\n***Important macOS Apple Script version notice <a name=\"watchdog-macos-comments\"></a>***\r\n\r\n- Might be very slow and resource-consuming\r\n- It uses the title to identify the window, so if it changes, the watchdog will consider it is not available anymore and will stop\r\n- To avoid this, use ''tryToFind(True)'' method to try to find the new title (not fully guaranteed since it uses a similarity check, so the new title might not be found or correspond to a different window)\r\n\r\n\r\n## Menu Features <a name=\"menu-features\"></a>\r\n\r\n#### Available in: MS-Windows and macOS Apple Script version (Win32Window() and MacOSWindow() classes)\r\n\r\nmenu sub-class for Menu info and control methods, accessible through 'menu' submodule.\r\n\r\n|  menu sub-module methods:  |\r\n|  :---:  |\r\n|  getMenu  |\r\n|  getMenuInfo  |\r\n|  getMenuItemCount  |\r\n|  getMenuItemInfo  |\r\n|  getMenuItemRect  |\r\n|  clickMenuItem  |\r\n\r\nMS-Windows example (notice it is language-dependent):\r\n\r\n    import pywinctl as pwc\r\n    import subprocess\r\n    # import json\r\n\r\n    subprocess.Popen('notepad')\r\n    windows = pwc.getWindowsWithTitle('notepad', condition=pwc.Re.CONTAINS, flags=pwc.Re.IGNORECASE)\r\n    if windows:\r\n        win = windows[0]\r\n        menu = win.menu.getMenu()\r\n        # print(json.dumps(menu, indent=4, ensure_ascii=False))  # Prints menu dict in legible format\r\n        ret = win.menu.clickMenuItem([\"File\", \"Exit\"])           # Exit program\r\n        if not ret:\r\n            print(\"Option not found. Check option path and language\")\r\n    else:\r\n        print(\"Window not found. Check application name and language\")\r\n\r\nMenu dictionary (returned by getMenu() method) will likely contain all you may need to handle application menu:\r\n\r\n    Key:            item title\r\n    Values:\r\n      \"parent\":     parent sub-menu handle\r\n      \"hSubMenu\":   item handle (!= 0 for sub-menus only)\r\n      \"wID\":        item ID (required for other actions, e.g. clickMenuItem())\r\n      \"rect\":       Rect struct of the menu item. (Windows: It is relative to window position, so it won't likely change if window is moved or resized)\r\n      \"item_info\":  [Optional] Python dictionary (macOS) / MENUITEMINFO struct (Windows)\r\n      \"shortcut\":   shortcut to menu item, if any (macOS: only if item_info is included)\r\n      \"entries\":    sub-items within the sub-menu (or not present otherwise)\r\n                    these sub-items will have this very same format, in a nested struct.\r\n\r\nNote not all windows/applications will have a menu accessible by these methods.\r\n\r\n## INSTALL <a name=\"install\"></a>\r\n\r\nTo install this module on your system, you can use pip: \r\n\r\n    pip install pywinctl\r\n\r\nor\r\n\r\n    python3 -m pip install pywinctl\r\n\r\nAlternatively, you can download the wheel file (.whl) available in the [Download page](https://pypi.org/project/PyWinCtl/#files) and the [dist folder](https://github.com/Kalmat/PyWinCtl/tree/master/dist), and run this (don't forget to replace 'x.x.xx' with proper version number):\r\n\r\n    pip install PyWinCtl-x.x.xx-py3-none-any.whl\r\n\r\nYou may want to add `--force-reinstall` option to be sure you are installing the right dependencies version.\r\n\r\nThen, you can use it on your own projects just importing it:\r\n\r\n    import pywinctl as pwc\r\n\r\n## SUPPORT <a name=\"support\"></a>\r\n\r\nIn case you have a problem, comments or suggestions, do not hesitate to [open issues](https://github.com/Kalmat/PyWinCtl/issues) on the [project homepage](https://github.com/Kalmat/PyWinCtl)\r\n\r\n## USING THIS CODE <a name=\"using\"></a>\r\n\r\nIf you want to use this code or contribute, you can either:\r\n\r\n* Create a fork of the [repository](https://github.com/Kalmat/PyWinCtl), or \r\n* [Download the repository](https://github.com/Kalmat/PyWinCtl/archive/refs/heads/master.zip), uncompress, and open it on your IDE of choice (e.g. PyCharm)\r\n\r\nBe sure you install all dependencies described on \"docs/requirements.txt\" by using pip\r\n\r\n## TEST <a name=\"test\"></a>\r\n\r\nTo test this module on your own system, cd to \"tests\" folder and run:\r\n\r\n    pytest -vv test_pywinctl.py\r\n\r\nor, in case you get an import error, try this:\r\n\r\n    python3 -m pytest -vv test_pywinctl.py\r\n\r\nMacOSNSWindow class and methods can be tested by running this, also on \"tests\" folder:\r\n\r\n    python3 test_MacNSWindow.py\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kalmat/PyWinCtl",
    "keywords": "gui window control menu title name geometry size position move resize minimize maximize restore hide show activate raise lower close screen-size mouse-position",
    "license": "BSD 3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyWinCtl",
    "package_url": "https://pypi.org/project/PyWinCtl/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyWinCtl/",
    "project_urls": {
      "Homepage": "https://github.com/Kalmat/PyWinCtl"
    },
    "release_url": "https://pypi.org/project/PyWinCtl/0.0.43/",
    "requires_dist": [
      "PyRect (>=0.2)",
      "pyobjc (>=8.1) ; sys_platform == \"darwin\"",
      "python-xlib (>=0.21) ; sys_platform == \"linux\"",
      "ewmh (>=0.1) ; sys_platform == \"linux\"",
      "pywin32 (>=302) ; sys_platform == \"win32\""
    ],
    "requires_python": "",
    "summary": "Cross-Platform toolkit to get info on and control windows on screen",
    "version": "0.0.43",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16839223,
  "releases": {
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5360626403190fcad7d9de8a717891e386365a6aec8c49b70d1bba473679a46",
          "md5": "afa79283d7b98a3dd995101622fe5645",
          "sha256": "9d945a908a41983174a64d2b41267c7130a4271ef4340a2ea9c25613b76d555d"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "afa79283d7b98a3dd995101622fe5645",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86881,
        "upload_time": "2022-02-26T20:23:58",
        "upload_time_iso_8601": "2022-02-26T20:23:58.936668Z",
        "url": "https://files.pythonhosted.org/packages/b5/36/0626403190fcad7d9de8a717891e386365a6aec8c49b70d1bba473679a46/PyWinCtl-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e42fa802b5e5f7654d5dc4c4c01cbcdeb95f1acdf3af61979c17b8fa2bddd0e",
          "md5": "d06f9cb133d9b9c4f47422d505e08b6d",
          "sha256": "67e8b1b1876e843b50bec5b911609040473a08ba1afcc1406402ff704506d4db"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "d06f9cb133d9b9c4f47422d505e08b6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73116,
        "upload_time": "2022-02-27T11:40:03",
        "upload_time_iso_8601": "2022-02-27T11:40:03.074637Z",
        "url": "https://files.pythonhosted.org/packages/9e/42/fa802b5e5f7654d5dc4c4c01cbcdeb95f1acdf3af61979c17b8fa2bddd0e/PyWinCtl-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "829a743c6803db6a277c65725a6f47003234712e36fd8e8cde4640c5a314ab8a",
          "md5": "f9040307624752eec496fdaa9c1cf5cf",
          "sha256": "874522d2d2f11e464177e33ef1a8412771e697602e8b40c29870b6036a0ae4ae"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9040307624752eec496fdaa9c1cf5cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34330,
        "upload_time": "2022-02-27T23:13:48",
        "upload_time_iso_8601": "2022-02-27T23:13:48.266723Z",
        "url": "https://files.pythonhosted.org/packages/82/9a/743c6803db6a277c65725a6f47003234712e36fd8e8cde4640c5a314ab8a/PyWinCtl-0.0.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e956749a110fc16b8e4fd0ea1016cd35161d0db8b6c6cda0976c8ada611917d9",
          "md5": "c659f2032a69f59fc7401a3295ecbac4",
          "sha256": "8a6e880fe294e57dea508bc76453b98364d89d0bd8bb455a19b912e644539f90"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c659f2032a69f59fc7401a3295ecbac4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34402,
        "upload_time": "2022-02-28T09:39:00",
        "upload_time_iso_8601": "2022-02-28T09:39:00.442876Z",
        "url": "https://files.pythonhosted.org/packages/e9/56/749a110fc16b8e4fd0ea1016cd35161d0db8b6c6cda0976c8ada611917d9/PyWinCtl-0.0.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd0a67fbebcec953dc4ae7b7769a27f7f3e6b3a49c4b13b1b2ce5f7cf330c7d4",
          "md5": "178027fc7df7d265e82d4c4571571279",
          "sha256": "5e9231f540f8cbaba89f995b3d8f3139f12ef4e1fc8f7325cbf97de3d74010ae"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "178027fc7df7d265e82d4c4571571279",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35373,
        "upload_time": "2022-03-02T15:12:56",
        "upload_time_iso_8601": "2022-03-02T15:12:56.177193Z",
        "url": "https://files.pythonhosted.org/packages/fd/0a/67fbebcec953dc4ae7b7769a27f7f3e6b3a49c4b13b1b2ce5f7cf330c7d4/PyWinCtl-0.0.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e94bcca7c69df036d4433ea6dd8e681040926d5d48658608763942f4ac857d09",
          "md5": "dc33d6c337e84f79408bd94b5384282f",
          "sha256": "677b3c31997971d9cddfcd0ec0945ee9a672259db33268816f89218ca1268390"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.23-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc33d6c337e84f79408bd94b5384282f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38225,
        "upload_time": "2022-03-05T19:33:03",
        "upload_time_iso_8601": "2022-03-05T19:33:03.418101Z",
        "url": "https://files.pythonhosted.org/packages/e9/4b/cca7c69df036d4433ea6dd8e681040926d5d48658608763942f4ac857d09/PyWinCtl-0.0.23-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01628ddc5c8de45c64aedb2c2e7b72f92f826772482820834d37e4dc3e6af2e6",
          "md5": "e490dda5c121b44addb1f51f46495ff2",
          "sha256": "fcae181d83eabd295cee423cba3e5c9d6c1b151782595d25853470a8fe34c758"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.24-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e490dda5c121b44addb1f51f46495ff2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38621,
        "upload_time": "2022-03-06T18:00:47",
        "upload_time_iso_8601": "2022-03-06T18:00:47.929708Z",
        "url": "https://files.pythonhosted.org/packages/01/62/8ddc5c8de45c64aedb2c2e7b72f92f826772482820834d37e4dc3e6af2e6/PyWinCtl-0.0.24-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fae4a0e7a341acd979e483c665abc04055e2e3514b4105f44e5a4bf5dedd0a09",
          "md5": "612c9897c20dfb111c1b5e1229b87314",
          "sha256": "4ed9880fb3c0f63cae97674e12786c3c04d5ae19b2e7d5033b2eab817c87aac0"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.26-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "612c9897c20dfb111c1b5e1229b87314",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40314,
        "upload_time": "2022-03-09T19:29:03",
        "upload_time_iso_8601": "2022-03-09T19:29:03.555243Z",
        "url": "https://files.pythonhosted.org/packages/fa/e4/a0e7a341acd979e483c665abc04055e2e3514b4105f44e5a4bf5dedd0a09/PyWinCtl-0.0.26-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4e9e0e49b590105c8d5a772c241ad47ddabb6147601f0167ec9b0ac32777a0c",
          "md5": "c7e633ba81d5f1d8eb2b8a7e58a82929",
          "sha256": "1432a75dc8e23a9862e6dccf77566b28fa85b19f77eedbbb21c93ba98a5a010e"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.27-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7e633ba81d5f1d8eb2b8a7e58a82929",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40325,
        "upload_time": "2022-03-09T22:38:26",
        "upload_time_iso_8601": "2022-03-09T22:38:26.506326Z",
        "url": "https://files.pythonhosted.org/packages/c4/e9/e0e49b590105c8d5a772c241ad47ddabb6147601f0167ec9b0ac32777a0c/PyWinCtl-0.0.27-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fd571390262e55702a7828016bc9866134ebe12856c97221bf34030541f9318",
          "md5": "1721f3aefce9b2f0025af9110861d6ff",
          "sha256": "45763bcf2226bb1410119f8585c1bb310e4da7c16645a36d92bdff9e8162d30d"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.28-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1721f3aefce9b2f0025af9110861d6ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40314,
        "upload_time": "2022-03-11T21:01:03",
        "upload_time_iso_8601": "2022-03-11T21:01:03.590454Z",
        "url": "https://files.pythonhosted.org/packages/0f/d5/71390262e55702a7828016bc9866134ebe12856c97221bf34030541f9318/PyWinCtl-0.0.28-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1dd8c47a6d7ecd8b73516f78d8ee37178c0cb955f856221ac2f8d6329c94b15",
          "md5": "c9b5e5bc448f6fc36dc3591b06036160",
          "sha256": "2515fe4d13f1e0cf8ce0b7a9647b4cc1bca4cc900ea13c6cbef04fead88554c2"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.31-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9b5e5bc448f6fc36dc3591b06036160",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 58321,
        "upload_time": "2022-03-29T08:08:02",
        "upload_time_iso_8601": "2022-03-29T08:08:02.114561Z",
        "url": "https://files.pythonhosted.org/packages/a1/dd/8c47a6d7ecd8b73516f78d8ee37178c0cb955f856221ac2f8d6329c94b15/PyWinCtl-0.0.31-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adb6a69e52551e579f379823b756c192884c0d98b9466709a07670e3aa6f08eb",
          "md5": "e08fb11d614bd90370f9aa141a4d2ebf",
          "sha256": "ada801efb5f467ca086d924193aeba2ae33b1e1adc2be7e7626c09f162db4cd7"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.32-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e08fb11d614bd90370f9aa141a4d2ebf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 68359,
        "upload_time": "2022-04-04T14:46:40",
        "upload_time_iso_8601": "2022-04-04T14:46:40.296076Z",
        "url": "https://files.pythonhosted.org/packages/ad/b6/a69e52551e579f379823b756c192884c0d98b9466709a07670e3aa6f08eb/PyWinCtl-0.0.32-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa778980e4458b155843a3cbe346128c7f72fcb59410654c7f1d5eafac50f0e1",
          "md5": "d545660f81b02b5cecd10713d3d6fbb3",
          "sha256": "4833a6570d8f53720ec54c9b52f4a916d75bbcc162d08f9e2aa58c4a62a28d7c"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.33-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d545660f81b02b5cecd10713d3d6fbb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 68356,
        "upload_time": "2022-04-04T14:48:16",
        "upload_time_iso_8601": "2022-04-04T14:48:16.892256Z",
        "url": "https://files.pythonhosted.org/packages/aa/77/8980e4458b155843a3cbe346128c7f72fcb59410654c7f1d5eafac50f0e1/PyWinCtl-0.0.33-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd0b5b658d98d75424d23c3f31d3d8c9347c7dd3c3e4cfa4e08629f6638224aa",
          "md5": "bad444687d81ffd6c81bca96624744f8",
          "sha256": "b434d47853d93a15f8efcba4bb15bbd62515685f52dad656dd68ef17897f66e7"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.34-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bad444687d81ffd6c81bca96624744f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60285,
        "upload_time": "2022-04-18T11:18:39",
        "upload_time_iso_8601": "2022-04-18T11:18:39.438630Z",
        "url": "https://files.pythonhosted.org/packages/dd/0b/5b658d98d75424d23c3f31d3d8c9347c7dd3c3e4cfa4e08629f6638224aa/PyWinCtl-0.0.34-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d45a4e3ba7a6f0ee5129ba276f3a5e03e1110d6636eeac42dc191e47924af953",
          "md5": "30d9e97ac617c2747ab81fb2af1babd0",
          "sha256": "e349cd360dce107a71164c3000f3474b95f4c943f707f43119175edd784f60f5"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.35-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30d9e97ac617c2747ab81fb2af1babd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61684,
        "upload_time": "2022-04-27T13:48:42",
        "upload_time_iso_8601": "2022-04-27T13:48:42.494089Z",
        "url": "https://files.pythonhosted.org/packages/d4/5a/4e3ba7a6f0ee5129ba276f3a5e03e1110d6636eeac42dc191e47924af953/PyWinCtl-0.0.35-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcd06f07eee61da2a058edf3238cbe3b055ec09cd219b29f4f8d93cc5912cd8b",
          "md5": "c87bc72bd1a7eb9ab2a5bb5aa4e15694",
          "sha256": "42570eadbc1edaeead6411ca2417a542e8dfcb8b95410d7a41e1040eaa3bffcb"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.36-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c87bc72bd1a7eb9ab2a5bb5aa4e15694",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61373,
        "upload_time": "2022-05-19T18:41:56",
        "upload_time_iso_8601": "2022-05-19T18:41:56.236838Z",
        "url": "https://files.pythonhosted.org/packages/fc/d0/6f07eee61da2a058edf3238cbe3b055ec09cd219b29f4f8d93cc5912cd8b/PyWinCtl-0.0.36-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.37": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28da6ddb0d722e90766218faa65f1396adf9d24ae15ea3f1678411c15749d63c",
          "md5": "d16c2627c262960effdacfaa196f56c8",
          "sha256": "05670b905a0f4cb746992b5bf9f5e3ab5a62f93530df1cb9a062f29d83247f83"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.37-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d16c2627c262960effdacfaa196f56c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 62070,
        "upload_time": "2022-05-26T10:16:10",
        "upload_time_iso_8601": "2022-05-26T10:16:10.851247Z",
        "url": "https://files.pythonhosted.org/packages/28/da/6ddb0d722e90766218faa65f1396adf9d24ae15ea3f1678411c15749d63c/PyWinCtl-0.0.37-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.38": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d3a62f27f4922dcdb666e26dbcabb35b992bd17391f393691511b3d8817c569",
          "md5": "e2564d20b982b7f2355ca1c981bf2f1a",
          "sha256": "881bed6d08fbcd50b80ec051da9a0be5cc6b08253185b91e0339056b803fe504"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.38-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2564d20b982b7f2355ca1c981bf2f1a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 62034,
        "upload_time": "2022-05-29T09:25:16",
        "upload_time_iso_8601": "2022-05-29T09:25:16.772570Z",
        "url": "https://files.pythonhosted.org/packages/8d/3a/62f27f4922dcdb666e26dbcabb35b992bd17391f393691511b3d8817c569/PyWinCtl-0.0.38-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.40": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02e45e5e3351a222deed764f01da0c9d9645bd7843575d04a21592f10945f383",
          "md5": "465254d88deefcea9c15ea259bed8d21",
          "sha256": "de053cd51ad6d8f3a63ca6456efe34f76ba6ec26d260d224f0bf382ec8f07077"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.40-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "465254d88deefcea9c15ea259bed8d21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67380,
        "upload_time": "2022-12-07T12:07:56",
        "upload_time_iso_8601": "2022-12-07T12:07:56.584758Z",
        "url": "https://files.pythonhosted.org/packages/02/e4/5e5e3351a222deed764f01da0c9d9645bd7843575d04a21592f10945f383/PyWinCtl-0.0.40-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.41": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0807fdf704fe2d7ae2b1a17411c56f80a6a93967064054b0c6e716857e338ec5",
          "md5": "5d398919b072cbc993c4cd1fb7f27d70",
          "sha256": "dbc99e53a4cb589e49423dae17d4a1a5c97c0f2646353e13b1cf50d92282611d"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.41-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d398919b072cbc993c4cd1fb7f27d70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67641,
        "upload_time": "2022-12-09T19:49:54",
        "upload_time_iso_8601": "2022-12-09T19:49:54.228395Z",
        "url": "https://files.pythonhosted.org/packages/08/07/fdf704fe2d7ae2b1a17411c56f80a6a93967064054b0c6e716857e338ec5/PyWinCtl-0.0.41-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.42": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d5aaf86320f87907cbaa50c919bc3b35707869a7ad8858678a4750b48a1203c",
          "md5": "b0ab231aee2e14a64e0e05a96baec2b2",
          "sha256": "2aed60310a5cb2a54f8e1b4805e4bfb97fba34fa0138eb162a931cd7e33997a2"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.42-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0ab231aee2e14a64e0e05a96baec2b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67837,
        "upload_time": "2022-12-10T19:21:42",
        "upload_time_iso_8601": "2022-12-10T19:21:42.874311Z",
        "url": "https://files.pythonhosted.org/packages/6d/5a/af86320f87907cbaa50c919bc3b35707869a7ad8858678a4750b48a1203c/PyWinCtl-0.0.42-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.43": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d9d3ab2c05cfd5a6cabaa3bafab875739b0172a64ae0e4672806daae8df8856",
          "md5": "5a9ca30d1c0bde611fb73fa37b905056",
          "sha256": "c02caf9c320f3365308245ba216154d3afeddcbfcd1c34c412df632f50c2dd1f"
        },
        "downloads": -1,
        "filename": "PyWinCtl-0.0.43-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a9ca30d1c0bde611fb73fa37b905056",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 94080,
        "upload_time": "2023-02-13T14:59:03",
        "upload_time_iso_8601": "2023-02-13T14:59:03.529215Z",
        "url": "https://files.pythonhosted.org/packages/1d/9d/3ab2c05cfd5a6cabaa3bafab875739b0172a64ae0e4672806daae8df8856/PyWinCtl-0.0.43-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d9d3ab2c05cfd5a6cabaa3bafab875739b0172a64ae0e4672806daae8df8856",
        "md5": "5a9ca30d1c0bde611fb73fa37b905056",
        "sha256": "c02caf9c320f3365308245ba216154d3afeddcbfcd1c34c412df632f50c2dd1f"
      },
      "downloads": -1,
      "filename": "PyWinCtl-0.0.43-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a9ca30d1c0bde611fb73fa37b905056",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 94080,
      "upload_time": "2023-02-13T14:59:03",
      "upload_time_iso_8601": "2023-02-13T14:59:03.529215Z",
      "url": "https://files.pythonhosted.org/packages/1d/9d/3ab2c05cfd5a6cabaa3bafab875739b0172a64ae0e4672806daae8df8856/PyWinCtl-0.0.43-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}