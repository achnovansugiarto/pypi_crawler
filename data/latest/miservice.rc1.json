{
  "info": {
    "author": "Yonsm",
    "author_email": "Yonsm@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MiService\nXiaoMi Cloud Service for mi.com\n\n## Install\n```\npip3 install miservice\n```\n\n## Library\n```\nMiService：XiaoMi Cloud Service\n  |\n  |-- MiAccount：Account Srvice\n  |-- MiBaseService：(TODO if needed)\n  |     |\n  |     |-- MiIOService：MiIO Service (sid=xiaomiio)\n  |     |     |\n  |     |     |-- MIoT_xxx：MIoT Service, Based on MiIO\n  |     |\n  |     |-- MiNAService：MiAI Service (sid=micoapi)\n  |     |\n  |     |-- MiAPIService：(TODO)\n  |-- MiIOCommand：MiIO Command Style Interface\n```\n\n## Command Line\n```\nUsage: The following variables must be set:\n           export MI_USER=<Username>\n           export MI_PASS=<Password>\n           export MI_DID=<Device ID|Name>\n\nGet Props: /usr/local/bin/micli.py <siid[-piid]>[,...]\n           /usr/local/bin/micli.py 1,1-2,1-3,1-4,2-1,2-2,3\nSet Props: /usr/local/bin/micli.py <siid[-piid]=[#]value>[,...]\n           /usr/local/bin/micli.py 2=#60,2-2=#false,3=test\nDo Action: /usr/local/bin/micli.py <siid[-piid]> <arg1|#NA> [...] \n           /usr/local/bin/micli.py 2 #NA\n           /usr/local/bin/micli.py 5 Hello\n           /usr/local/bin/micli.py 5-4 Hello #1\n\nCall MIoT: /usr/local/bin/micli.py <cmd=prop/get|/prop/set|action> <params>\n           /usr/local/bin/micli.py action '{\"did\":\"267090026\",\"siid\":5,\"aiid\":1,\"in\":[\"Hello\"]}'\n\nCall MiIO: /usr/local/bin/micli.py /<uri> <data>\n           /usr/local/bin/micli.py /home/device_list '{\"getVirtualModel\":false,\"getHuamiDevices\":1}'\n\nDevs List: /usr/local/bin/micli.py list [name=full|name_keyword] [getVirtualModel=false|true] [getHuamiDevices=0|1]\n           /usr/local/bin/micli.py list Light true 0\n\nMIoT Spec: /usr/local/bin/micli.py spec [model_keyword|type_urn] [format=text|python|json]\n           /usr/local/bin/micli.py spec\n           /usr/local/bin/micli.py spec speaker\n           /usr/local/bin/micli.py spec xiaomi.wifispeaker.lx04\n           /usr/local/bin/micli.py spec urn:miot-spec-v2:device:speaker:0000A015:xiaomi-lx04:1\n\nMIoT Decode: /usr/local/bin/micli.py decode <ssecurity> <nonce> <data> [gzip]\n```\n\n## 套路，例子：\n\n`请在 Mac OS 或 Linux 下执行，Windows 下要支持也应该容易但可能需要修改？`\n\n### 1. 先设置账号\n\n```\nexport MI_USER=<Username>\nexport MI_PASS=<Password>\n```\n\n### 2. 查询自己的设备\n\n```\nmicli.py list\n```\n可以显示自己账号下的设备列表，包含名称、类型、DID、Token 等信息。\n\n### 3. 设置 DID\n\n为了后续操作，请设置 Device ID（来自上面这条命令的结果）。\n\n```\nexport MI_DID=<Device ID|Name>\n```\n\n### 4. 查询设备的接口文档\n\n查询设备的 MIoT 接口能力描述：\n```\nmicli.py spec xiaomi.wifispeaker.lx04\n```\n其中分为属性获取、属性设置、动作调用三种描述。\n\n### 5. 查询音量属性\n\n```\nmicli.py 2-1\n```\n其中 `2` 为 `siid`，`1` 为 `piid`（如果是 `1` 则可以省略），可从 spec 接口描述中查得。\n\n### 6. 设置音量属性\n\n```\nmicli.py 2=#60\n```\n`siid` 和 `piid` 规则同属性查询命令。注意 `#` 号的意思是整数类型，如果不带则默认是文本字符串类型，要根据接口描述文档来确定类型。\n\n### 7. 动作调用：TTS 播报和执行文本\n\n以下命令执行后小爱音箱会播报“您好”：\n```\nmicli.py 5 您好\n```\n其中，5 为 `siid`，此处省略了 `1` 的 `aiid`。\n\n以下命令执行后相当于直接对对音箱说“小爱同学，查询天气”是一个效果：\n```\nmicli.py 5-4 查询天气 #1\n```\n\n其中 `#1` 表示设备语音回应，如果要执行默默关灯（不要音箱回应），可以如下：\n```\nmicli.py 5-4 关灯 #0\n```\n\n### 8. 其它应用\n\n在扩展插件中使用，比如，参考 [ZhiMsg 小爱同学 TTS 播报/执行插件](https://github.com/Yonsm/ZhiMsg)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Yonsm/MiService",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miservice",
    "package_url": "https://pypi.org/project/miservice/",
    "platform": null,
    "project_url": "https://pypi.org/project/miservice/",
    "project_urls": {
      "Homepage": "https://github.com/Yonsm/MiService"
    },
    "release_url": "https://pypi.org/project/miservice/2.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "XiaoMi Cloud Service",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15208844,
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b6ffb1bf1191c687475dd62ea5bac4f7ac62c42ee70b23b6ef387e9f6a01e89",
          "md5": "e29c9df9a04d7810fa971577a95c1fe9",
          "sha256": "0989bee3d364d6079235648960fa65e00fd69e7a315e21e51fbf5b2fa892e75f"
        },
        "downloads": -1,
        "filename": "miservice-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e29c9df9a04d7810fa971577a95c1fe9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12246,
        "upload_time": "2022-09-26T01:40:05",
        "upload_time_iso_8601": "2022-09-26T01:40:05.106379Z",
        "url": "https://files.pythonhosted.org/packages/1b/6f/fb1bf1191c687475dd62ea5bac4f7ac62c42ee70b23b6ef387e9f6a01e89/miservice-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b6ffb1bf1191c687475dd62ea5bac4f7ac62c42ee70b23b6ef387e9f6a01e89",
        "md5": "e29c9df9a04d7810fa971577a95c1fe9",
        "sha256": "0989bee3d364d6079235648960fa65e00fd69e7a315e21e51fbf5b2fa892e75f"
      },
      "downloads": -1,
      "filename": "miservice-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e29c9df9a04d7810fa971577a95c1fe9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12246,
      "upload_time": "2022-09-26T01:40:05",
      "upload_time_iso_8601": "2022-09-26T01:40:05.106379Z",
      "url": "https://files.pythonhosted.org/packages/1b/6f/fb1bf1191c687475dd62ea5bac4f7ac62c42ee70b23b6ef387e9f6a01e89/miservice-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}