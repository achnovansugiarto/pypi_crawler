{
  "info": {
    "author": "Romain Fournier (PalamaraLab, Department of Statistics, Oxford University)",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: MacOS",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "# HapNe\nHaplotype-based inference of recent effective population size in modern and ancient DNA samples\n\n## Summary \n1. Prerequisites \n2. HapNe-LD\n3. HapNe-IBD\n4. Analyses of ancient samples \n5. How to cite\n\n## 1. Prerequisites\nSome pre-processing features require plink1.9 and plink2 to be installed. \nHapNe assumes that the commands `plink` and `plink2` work in the terminal.\n\nAll functionalities have been tested on macOS and Linux within the following conda environment: \n\n```yml\nname: HapNe\nchannels:\n  - conda-forge\n  - bioconda\n  - defaults\ndependencies:\n  - python\n  - pytest\n  - numpy\n  - pandas\n  - plink\n  - plink2\n  - flake8\n  - numba\n```\nWe strongly encourage to install HapNe within this environment by running: \n`conda env create --file conda_environment.yml`\n\n## 2. HapNe-LD\nHapNe-LD can be run by adapting the following config file:\n```\n[CONFIG]\nvcf_file=data\nkeep=data.keep\nmap=genetic_map_chr@_combined_b37.txt\npseudo_diploid=False\noutput_folder=HapNe/data\npopulation_name=POP\n```\n* vcf_file: path to the vcf file (without the .vcf.gz extension)\n* keep (facultative): samples to keep, useful to filter out relatives \n* map: path to the genetic maps\n* pseudo_diploid: False for modern data, true for ancient ones\n* output_folder: folder where the results will be saved\n* population_name: name of the analysis\n\nThe analysis can be run using a script like this one:\n```python\nfrom configparser import ConfigParser\nimport argparse\n\nfrom hapne.convert.tools import split_convert_vcf\nfrom hapne.ld import compute_ld, compute_ccld\nfrom hapne import hapne_ld\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='HapNe-LD pipeline')\n    parser.add_argument('--config_file',\n                    help='configfile')\n    args = parser.parse_args()\n\n    config = ConfigParser()\n    config.read(args.config_file)\n    print(\"Starting stage 1\")\n    split_convert_vcf(config)\n    print(\"Starting stage 2\")\n    compute_ld(config)\n    compute_ccld(config)\n    print(\"Starting stage 3\")\n    hapne_ld(config)\n```\n\n# 3. Running HapNe-IBD\nStarting from a vcf file, HapNe starts by splitting the file into different genomic regions and convert them into FastSMC's input format:\n\n```python\nfrom configparser import ConfigParser\nimport pandas as pd\nimport argparse\n\nfrom hapne.convert.tools import vcf2fastsmc\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='HapNe-IBD preprocessing pipeline')\n    parser.add_argument('--config_file',\n                    help='configfile')\n    args = parser.parse_args()\n\n    config = ConfigParser()\n    config.read(args.config_file)\n    print(\"Starting stage 1\")\n    vcf2fastsmc(config)\n```\n\nFastSMC can then be run on the 39 ```.haps``` files generated by the previous command. \n\nIt is then required to add the location of the FastSMC output in the config file\n```\n[CONFIG]\nvcf_file=data\nkeep=data.keep\nmap=genetic_map_chr@_combined_b37.txt\npseudo_diploid=False\noutput_folder=HapNe/data\npopulation_name=POP\nibd_files=FASTSMC_OUTPUT_FOLDER\n```\n\nUsing this config file, HapNe-IBD can be run using the following script:\n```python\nfrom configparser import ConfigParser\nfrom hapne.ibd import build_hist\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='HapNe-IBD preprocessing pipeline')\n    parser.add_argument('--config_file',\n                    help='configfile')\n    args = parser.parse_args()\n\n    config = ConfigParser()\n    config.read(args.config_file)\n    build_hist(config)\n    hapne_ibd(config)\n```\n\n## 4. aDNA analyses\nHapNe provides a pipeline to easily study samples from the [\"Allen Ancient DNA Resource\" data set](https://reich.hms.harvard.edu/allen-ancient-dna-resource-aadr-downloadable-genotypes-present-day-and-ancient-dna-data).\nAfter downloading the data, HapNe can take a file with the indices of samples to study as input (Caribbean_Ceramic_recent.keep in the following example).\n\nNote that it is assumed that samples present in the keep file are unrelated. Kinship information is usually present in the anno file. \n\nTo perform the analysis, create the following configuration file:\n\n```\n[CONFIG]\neigen_root=DATA/v50.0_1240k_public\nanno_file=DATA/v50.0_1240k_public.anno\nkeep=CONFIG/Caribbean_Ceramic_recent.keep\npseudo_diploid=True\noutput_folder=RESULTS/Caribbean_Ceramic_recent\npopulation_name=Caribbean_Ceramic_recent\n```\neigen_root describes the location to the main data set, anno_file points to the annotation file, keep refers to as a file containing the indices of the individuals to study (one index per row).\n\nThe output will be written in a new output_folder folder. pseudo_diploid must be set to true when studying ancient data. Finally, population_name will be used to name the output files. \n\nNext, the following pipeline.py script can be run using\npython pipeline.py --config_file config.ini \n \n```python\nfrom configparser import ConfigParser\nimport pandas as pd\nimport argparse\n\nfrom hapne.convert.eigenstrat2vcf import eigenstrat2vcf\nfrom hapne.convert.eigenstrat2vcf import split_convert_vcf\nfrom hapne.ld import compute_ld, compute_ccld, create_cc_file\nfrom hapne.utils import get_age_from_anno\nfrom hapne import hapne_ld\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='HapNe-LD pipeline')\n    parser.add_argument('--config_file',\n                    help='configfile')\n    args = parser.parse_args()\n\n    config = ConfigParser()\n    config.read(args.config_file)\n    print(\"Starting stage 1\")\n    eigenstrat2vcf(config)\n    print(\"Starting stage 2\")\n    split_convert_vcf(config)\n    print(\"Starting stage 3\")\n    compute_ld(config)\n    compute_ccld(config)\n    print(\"Starting stage 4\")\n    get_age_from_anno(config)\n    hapne_ld(config)\n```\n# 5. How to cite? \n\nIf you use this software, please cite:\n\nR. Fournier, D. Reich, P. Palamara. Haplotype-based inference of recent effective population size in modern and ancient DNA samples. (preprint) bioRxiv, 2022.\n# Acknowledgments  \nTwo scripts of the `convert` module were downloaded from the following repositories and edited to fit into this package:\n- \"https://github.com/mathii/pyEigenstrat\" \n- \"https://github.com/mathii/gdc\"\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PalamaraLab/HapNe",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "HapNe",
    "package_url": "https://pypi.org/project/HapNe/",
    "platform": null,
    "project_url": "https://pypi.org/project/HapNe/",
    "project_urls": {
      "Bug Tracker": "https://github.com/PalamaraLab/HapNe/issues",
      "Homepage": "https://github.com/PalamaraLab/HapNe"
    },
    "release_url": "https://pypi.org/project/HapNe/1.20220920/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Haplotype-based inference of recent effective population size in modern and ancient DNA samples",
    "version": "1.20220920",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15156106,
  "releases": {
    "1.20220802": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df0ee4ae142c99addce603145ee51bc27e59e44f712785f099673d09ae6a53a1",
          "md5": "96d435ebbdce5c44922a897b94fde62f",
          "sha256": "010584ca32addfbaa5442a1b83fd16072357d8f8e53cea6e830c77d1c106a1c6"
        },
        "downloads": -1,
        "filename": "HapNe-1.20220802.tar.gz",
        "has_sig": false,
        "md5_digest": "96d435ebbdce5c44922a897b94fde62f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41468,
        "upload_time": "2022-08-02T17:29:34",
        "upload_time_iso_8601": "2022-08-02T17:29:34.282980Z",
        "url": "https://files.pythonhosted.org/packages/df/0e/e4ae142c99addce603145ee51bc27e59e44f712785f099673d09ae6a53a1/HapNe-1.20220802.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.20220920": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63a326839bf27146e65ac859e2cd23e9d9437628d26d04351a9fd2c86f769569",
          "md5": "e2626221c3d60f066facb199ab209b23",
          "sha256": "d465909ef390557b29368ea2e2a0b46fda59b0e74990ad1507cb45b6ca1d201c"
        },
        "downloads": -1,
        "filename": "HapNe-1.20220920.tar.gz",
        "has_sig": false,
        "md5_digest": "e2626221c3d60f066facb199ab209b23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41556,
        "upload_time": "2022-09-20T15:51:57",
        "upload_time_iso_8601": "2022-09-20T15:51:57.376289Z",
        "url": "https://files.pythonhosted.org/packages/63/a3/26839bf27146e65ac859e2cd23e9d9437628d26d04351a9fd2c86f769569/HapNe-1.20220920.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63a326839bf27146e65ac859e2cd23e9d9437628d26d04351a9fd2c86f769569",
        "md5": "e2626221c3d60f066facb199ab209b23",
        "sha256": "d465909ef390557b29368ea2e2a0b46fda59b0e74990ad1507cb45b6ca1d201c"
      },
      "downloads": -1,
      "filename": "HapNe-1.20220920.tar.gz",
      "has_sig": false,
      "md5_digest": "e2626221c3d60f066facb199ab209b23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 41556,
      "upload_time": "2022-09-20T15:51:57",
      "upload_time_iso_8601": "2022-09-20T15:51:57.376289Z",
      "url": "https://files.pythonhosted.org/packages/63/a3/26839bf27146e65ac859e2cd23e9d9437628d26d04351a9fd2c86f769569/HapNe-1.20220920.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}