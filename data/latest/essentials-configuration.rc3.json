{
  "info": {
    "author": "RobertoPrevato",
    "author_email": "roberto.prevato@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![Build](https://github.com/Neoteroi/essentials-configuration/workflows/Build/badge.svg)\n[![pypi](https://img.shields.io/pypi/v/essentials-configuration.svg)](https://pypi.python.org/pypi/essentials-configuration)\n[![versions](https://img.shields.io/pypi/pyversions/essentials-configuration.svg)](https://github.com/Neoteroi/essentials-configuration)\n[![codecov](https://codecov.io/gh/Neoteroi/essentials-configuration/branch/main/graph/badge.svg?token=VzAnusWIZt)](https://codecov.io/gh/Neoteroi/essentials-configuration)\n[![license](https://img.shields.io/github/license/Neoteroi/essentials-configuration.svg)](https://github.com/Neoteroi/essentials-configuration/blob/main/LICENSE)\n\n# Python configuration utilities\nImplementation of key-value pair based configuration for Python applications.\n\n**Features:**\n* support for most common sources of application settings\n* support for overriding settings in sequence\n* support for nested structures and lists, using attribute notation\n* strategy to use environment specific settings\n\nThis library is freely inspired by .NET Core `Microsoft.Extensions.Configuration` (_ref. [MSDN documentation](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.1), [Microsoft Extensions Configuration Deep Dive](https://www.paraesthesia.com/archive/2018/06/20/microsoft-extensions-configuration-deep-dive/)_).\n\nThe main class is influenced by Luciano Ramalho`s example of\nJSON structure explorer using attribute notation, in his book [Fluent Python](http://shop.oreilly.com/product/0636920032519.do).\n\n## Overview\n\n`essentials-configuration` provides a way to handle configuration roots\ncomposed of different layers, such as configuration files and environment\nvariables. Layers are applied in order and can override each others' values,\nenabling different scenarios like configuration by environment and system\ninstance.\n\n## Supported sources:\n* **toml** files\n* **yaml** files\n* **json** files\n* **ini** files\n* environment variables\n* dictionaries\n* keys and values\n* [Azure Key Vault](https://docs.microsoft.com/en-us/azure/key-vault/general/basic-concepts), using [essentials-configuration-keyvault](https://github.com/Neoteroi/essentials-configuration-keyvault)\n* custom sources, implementing the `ConfigurationSource` interface\n\n## Installation\n\n```bash\npip install essentials-configuration\n```\n\nTo install with support for `YAML` configuration files:\n\n```\npip install essentials-configuration[yaml]\n```\n\n## Extensions\n\n* Azure Key Vault secrets configuration source:\n  [essentials-configuration-keyvault](https://github.com/Neoteroi/essentials-configuration-keyvault)\n\n\n# Examples\n\n### TOML file\n\n```python\nfrom configuration.common import ConfigurationBuilder\nfrom configuration.toml import TOMLFile\nfrom configuration.env import EnvVars\n\nbuilder = ConfigurationBuilder(\n    TOMLFile(\"settings.toml\"),\n    EnvVars(prefix=\"APP_\")\n)\n\nconfig = builder.build()\n```\n\nFor example, if the TOML file contains the following contents:\n\n```json\ntitle = \"TOML Example\"\n\n[owner]\nname = \"Tom Preston-Werner\"\n```\n\nAnd the environment has a variable named `APP_OWNER__NAME=AAA`:\n\n```python\n>>> config\n<Configuration {'title': '...', 'owner': '...'}>\n>>> config.title\n'TOML Example'\n>>> config.owner.name\n'AAA'\n```\n\n### JSON file and environment variables\n\nIn the following example, configuration values will include the structure\ninside the file `settings.json` and environment variables whose name starts\nwith \"APP_\". Settings are applied in order, so environment variables with\nmatching name override values from the `json` file.\n\n```python\nfrom configuration.common import ConfigurationBuilder\nfrom configuration.json import JSONFile\nfrom configuration.env import EnvVars\n\nbuilder = ConfigurationBuilder(\n    JSONFile(\"settings.json\"),\n    EnvVars(prefix=\"APP_\")\n)\n\nconfig = builder.build()\n```\n\nFor example, if the JSON file contains the following contents:\n\n```json\n{\n    \"logging\": {\n        \"level\": \"INFO\"\n    },\n    \"example\": \"Hello World\",\n    \"foo\": \"foo\"\n}\n```\n\nAnd the environment has a variable named `APP_foo=AAA`:\n\n```python\n>>> config\n<Configuration {'logging': '...', 'example': '...', 'foo': '...'}>\n>>> config.foo\n'AAA'\n>>> config.logging.level\n'INFO'\n```\n\n### YAML file and environment variables\n\nIn this example, configuration will include anything inside a file\n`settings.yaml` and environment variables. Settings are applied in order, so\nenvironment variables with matching name override values from the `yaml` file\n(using the `yaml` source requires also `PyYAML` package).\n\n\n```python\nfrom configuration.common import ConfigurationBuilder\nfrom configuration.env import EnvVars\nfrom configuration.yaml import YAMLFile\n\nbuilder = ConfigurationBuilder()\n\nbuilder.add_source(YAMLFile(\"settings.yaml\"))\nbuilder.add_source(EnvVars())\n\nconfig = builder.build()\n```\n\n### YAML file, optional file by environment\n\nIn this example, if an environment variable with name `APP_ENVIRONMENT` and\nvalue `dev` exists, and a configuration file with name `settings.dev.yaml` is\npresent, it is read to override values configured in `settings.yaml` file.\n\n```python\nimport os\n\nfrom configuration.common import ConfigurationBuilder\nfrom configuration.env import EnvVars\nfrom configuration.yaml import YAMLFile\n\nenvironment_name = os.environ[\"APP_ENVIRONMENT\"]\n\nbuilder = ConfigurationBuilder()\n\nbuilder.add_source(YAMLFile(\"settings.yaml\"))\n\nbuilder.add_source(YAMLFile(f\"settings.{environment_name}.yaml\", optional=True))\n\nbuilder.add_source(EnvVars(prefix=\"APP_\"))\n\nconfig = builder.build()\n```\n\n### Filtering environment variables by prefix\n\n```python\nfrom configuration.common import ConfigurationBuilder\nfrom configuration.env import EnvVars\n\nbuilder = ConfigurationBuilder()\n\nbuilder.add_source(EnvVars(prefix=\"APP_\"))\n\nconfig = builder.build()\n```\n\n### INI files\n\nINI files are parsed using the built-in `configparser` module, therefore\nsupport `[DEFAULT]` section; all values are kept as strings.\n\n```python\nfrom configuration.common import ConfigurationBuilder\nfrom configuration.ini import INIFile\n\nbuilder = ConfigurationBuilder()\n\nbuilder.add_source(INIFile(\"settings.ini\"))\n\nconfig = builder.build()\n```\n\n### Dictionaries\n\n```python\nfrom configuration.common import ConfigurationBuilder\n\nbuilder = ConfigurationBuilder()\n\nbuilder.add_map({\"host\": \"localhost\", \"port\": 8080})\n\nbuilder.add_map({\"hello\": \"world\", \"example\": [{\"id\": 1}, {\"id\": 2}]})\n\nconfig = builder.build()\n\nassert config.host == \"localhost\"\nassert config.port == 8080\nassert config.hello == \"world\"\nassert config.example[0].id == 1\nassert config.example[1].id == 2\n```\n\n### Keys and values\n\n```python\nfrom configuration.common import ConfigurationBuilder\n\nbuilder = ConfigurationBuilder()\n\nbuilder.add_map({\"host\": \"localhost\", \"port\": 8080})\n\nbuilder.add_value(\"port\", 44555)\n\nconfig = builder.build()\n\nassert config.host == \"localhost\"\nassert config.port == 44555\n```\n\n### Overriding nested values\n\nIt is possible to override nested values by environment variables or\ndictionary keys using the following notation for sub properties:\n\n* keys separated by colon \":\", such as `a:d:e`\n* keys separated by \"__\", such as `a__d__e`\n\n```python\nfrom configuration.common import ConfigurationBuilder, MapSource\n\n\nbuilder = ConfigurationBuilder(\n    MapSource(\n        {\n            \"a\": {\n                \"b\": 1,\n                \"c\": 2,\n                \"d\": {\n                    \"e\": 3,\n                    \"f\": 4,\n                },\n            }\n        }\n    )\n)\n\nconfig = builder.build()\n\nassert config.a.b == 1\nassert config.a.d.e == 3\nassert config.a.d.f == 4\n\nbuilder.add_value(\"a:d:e\", 5)\n\nconfig = builder.build()\n\nassert config.a.d.e == 5\nassert config.a.d.f == 4\n\n```\n\n### Overriding nested values using env variables\n\n```python\nimport os\n\nbuilder = ConfigurationBuilder(\n    MapSource(\n        {\n            \"a\": {Env\n                \"b\": 1,\n                \"c\": 2,\n                \"d\": {\n                    \"e\": 3,\n                    \"f\": 4,\n                },\n            }\n        }\n    )\n)\n\nconfig = builder.build()\n\nassert config.a.b == 1\nassert config.a.d.e == 3\nassert config.a.d.f == 4\n\n# NB: if an env variable such as:\n# a:d:e=5\n# or...\n# a__d__e=5\n#\n# is defined, it overrides the value  from the dictionary\n\nos.environ[\"a__d__e\"] = \"5\"\n\nbuilder.sources.append(EnvVars())\n\nconfig = builder.build()\n\nassert config.a.d.e == \"5\"\n```\n\n### Overriding values in list items using env variables\n\n```python\nbuilder = ConfigurationBuilder(\n    MapSource(\n        {\n            \"b2c\": [\n                {\"tenant\": \"1\"},\n                {\"tenant\": \"2\"},\n                {\"tenant\": \"3\"},\n            ]\n        }\n    )\n)\n\nbuilder.add_value(\"b2c:1:tenant\", \"4\")\n\nconfig = builder.build()\n\nassert config.b2c[0].tenant == \"1\"\nassert config.b2c[1].tenant == \"4\"\nassert config.b2c[2].tenant == \"3\"\n\n```\n\n### Goal and non-goals\n\nThe goal of this package is to provide a way to handle configuration roots,\nfetching and composing settings from different sources, usually happening\nonce at application's start.\n\nThe library implements only a synchronous API and fetching of application\nsettings atomically (it doesn't support generators), like application settings\nfetched from INI, JSON, or YAML files that are read once in memory entirely.\nAn asynchronous API is currently out of the scope of this library, since its\nprimary use case is to fetch configuration values once at application's start.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Neoteroi/essentials-configuration",
    "keywords": "configuration root environment",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "essentials-configuration",
    "package_url": "https://pypi.org/project/essentials-configuration/",
    "platform": null,
    "project_url": "https://pypi.org/project/essentials-configuration/",
    "project_urls": {
      "Homepage": "https://github.com/Neoteroi/essentials-configuration"
    },
    "release_url": "https://pypi.org/project/essentials-configuration/1.0.0/",
    "requires_dist": [
      "tomli ; python_version < \"3.11\"",
      "PyYAML ; extra == 'yaml'"
    ],
    "requires_python": "",
    "summary": "Implementation of key-value pair based configuration for Python applications.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15669147,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "622319467bcfc9fae226f86670e6f655b392b7396be43dd8febff047e307af78",
          "md5": "4a667e3da5d0f17de836cbb025ffec27",
          "sha256": "e4cc0f5894be9fa72c779dd62ea5ed2d671ee38bce461d73b6da2884aa83559a"
        },
        "downloads": -1,
        "filename": "essentials_configuration-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a667e3da5d0f17de836cbb025ffec27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8944,
        "upload_time": "2021-08-09T20:13:37",
        "upload_time_iso_8601": "2021-08-09T20:13:37.116345Z",
        "url": "https://files.pythonhosted.org/packages/62/23/19467bcfc9fae226f86670e6f655b392b7396be43dd8febff047e307af78/essentials_configuration-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbf79a68c5a80b30d1ef648ffff17d79a2e62a6cc5018ff1c1f2989d4c74c5e2",
          "md5": "11bcf522738e53091d42f8b7ebceaaf1",
          "sha256": "00301702270b6133abb749918b68dad35a4805dbd16d5502dcd365b5447e97e1"
        },
        "downloads": -1,
        "filename": "essentials-configuration-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "11bcf522738e53091d42f8b7ebceaaf1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9387,
        "upload_time": "2021-08-09T20:13:39",
        "upload_time_iso_8601": "2021-08-09T20:13:39.022783Z",
        "url": "https://files.pythonhosted.org/packages/fb/f7/9a68c5a80b30d1ef648ffff17d79a2e62a6cc5018ff1c1f2989d4c74c5e2/essentials-configuration-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8545f5cc79fa5225be1f28853a136676cb3fd460a2c145ff6382d5f02ba1e05c",
          "md5": "f1a454dfcc818c3dc16068af14b60357",
          "sha256": "6e62a4822c5eecdfebb1e6e8fd6791cba9e66b50dc85b2fa6ff752f9ae021d62"
        },
        "downloads": -1,
        "filename": "essentials_configuration-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1a454dfcc818c3dc16068af14b60357",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10397,
        "upload_time": "2021-08-11T21:31:29",
        "upload_time_iso_8601": "2021-08-11T21:31:29.366132Z",
        "url": "https://files.pythonhosted.org/packages/85/45/f5cc79fa5225be1f28853a136676cb3fd460a2c145ff6382d5f02ba1e05c/essentials_configuration-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f75b4f4813f9becf87cdb990c126f20c44f973d93244733dba372ed0e991ded",
          "md5": "555351affa381d251122d96c9fae8464",
          "sha256": "5e2c81ea521d2c0bd41a956fd95c8041c2bc68d71a0d96784833adf317111170"
        },
        "downloads": -1,
        "filename": "essentials-configuration-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "555351affa381d251122d96c9fae8464",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10813,
        "upload_time": "2021-08-11T21:31:30",
        "upload_time_iso_8601": "2021-08-11T21:31:30.382523Z",
        "url": "https://files.pythonhosted.org/packages/2f/75/b4f4813f9becf87cdb990c126f20c44f973d93244733dba372ed0e991ded/essentials-configuration-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1253917c02d5779fc16ca44fe28fd15ee97f4f83b3611df4c830a99b521db8ef",
          "md5": "7e0c559bd2ee0cb5b931914ee3dfd3ed",
          "sha256": "ba4021d4cde25750ed16811b56d99e312804b51111305c6fba70e7a86f2fcf57"
        },
        "downloads": -1,
        "filename": "essentials_configuration-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e0c559bd2ee0cb5b931914ee3dfd3ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11131,
        "upload_time": "2022-11-05T20:18:45",
        "upload_time_iso_8601": "2022-11-05T20:18:45.425170Z",
        "url": "https://files.pythonhosted.org/packages/12/53/917c02d5779fc16ca44fe28fd15ee97f4f83b3611df4c830a99b521db8ef/essentials_configuration-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd20a014d906baa95aadde166f6db5a493d080f21d864e3af1b5a28b679a3a8e",
          "md5": "96883e293ed99f4d543c7f036c39aacb",
          "sha256": "adda64fe3642125e1994b9edea69f14607e59a96a31c7d2cedba133d1cadfadc"
        },
        "downloads": -1,
        "filename": "essentials-configuration-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "96883e293ed99f4d543c7f036c39aacb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11096,
        "upload_time": "2022-11-05T20:18:47",
        "upload_time_iso_8601": "2022-11-05T20:18:47.301556Z",
        "url": "https://files.pythonhosted.org/packages/bd/20/a014d906baa95aadde166f6db5a493d080f21d864e3af1b5a28b679a3a8e/essentials-configuration-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1253917c02d5779fc16ca44fe28fd15ee97f4f83b3611df4c830a99b521db8ef",
        "md5": "7e0c559bd2ee0cb5b931914ee3dfd3ed",
        "sha256": "ba4021d4cde25750ed16811b56d99e312804b51111305c6fba70e7a86f2fcf57"
      },
      "downloads": -1,
      "filename": "essentials_configuration-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7e0c559bd2ee0cb5b931914ee3dfd3ed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11131,
      "upload_time": "2022-11-05T20:18:45",
      "upload_time_iso_8601": "2022-11-05T20:18:45.425170Z",
      "url": "https://files.pythonhosted.org/packages/12/53/917c02d5779fc16ca44fe28fd15ee97f4f83b3611df4c830a99b521db8ef/essentials_configuration-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd20a014d906baa95aadde166f6db5a493d080f21d864e3af1b5a28b679a3a8e",
        "md5": "96883e293ed99f4d543c7f036c39aacb",
        "sha256": "adda64fe3642125e1994b9edea69f14607e59a96a31c7d2cedba133d1cadfadc"
      },
      "downloads": -1,
      "filename": "essentials-configuration-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "96883e293ed99f4d543c7f036c39aacb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11096,
      "upload_time": "2022-11-05T20:18:47",
      "upload_time_iso_8601": "2022-11-05T20:18:47.301556Z",
      "url": "https://files.pythonhosted.org/packages/bd/20/a014d906baa95aadde166f6db5a493d080f21d864e3af1b5a28b679a3a8e/essentials-configuration-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}