{
  "info": {
    "author": "George Zhang",
    "author_email": "geetransit@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Text Processing :: General"
    ],
    "description": "# pegpog\n\nA simple PEG parser\n\n## Quickstart\n\nRun `python quicktest.py`, put the following in the Grammar textbox, put a\nsimple math expression in the Input textbox, and hit the Parse button.\n\n    start <- _ expression _ !.;\n    expression <- { `expression` factor (_ '+-' _ factor)+ } | factor;\n    factor <- { `factor` term (_ '*/' _ term)+ } | term;\n    term <- :\"(\" _ expression _ \":)\" | { `num` ~'0123456789'+ };\n    _ <- :\" \"*;\n\n## Tutorial\n\nLet's create a simple calculator. We'll try to parse `\"6 + 9*42 - (0)\"`.\nHere are the rules that we would start with:\n\n    expression <- factor ('+-' factor)+ | factor;\n    factor <- term ('*/' term)+ | term;\n    term <- \"(\" expression \")\" | '0123456789'+;\n\nIf we create a grammar out of this and try to parse our expression, it returns\n(6,). What? The reason it's doing this is because it could only parse up to 6\nwithout failing. We want it to parse the whole input, so let's add a start rule\nthat ends in `!.`. This rule only succeeds at the end of the string, so we can\nuse it to force the rule to parse until the end or fail otherwise.\n\n    start <- expression !.;\n\nAw, we still get an error. the `.` in our `start` rule still succeeds, which\nmakes the `!.` fail, thus failing the whole rule. However, if we remove all\nspaces from the expression, we get `\"6+9*42-(0)\"`, and this succeeds. It was\nfailing before because there were spaces in the input, so let's add spaces\nwhere necessary. I like to put them in a rule named `_` so it doesn't stand out\nin the rules where it's used.\n\n    start <- _ expression _ !.;\n    expression <- factor (_ '+-' _ factor)+ | factor;\n    factor <- term (_ '*/' _ term)+ | term;\n    term <- \"(\" _ expression _ \")\" | '0123456789'+;\n    _ <- \" \"*;\n\nNow it can parse the original input! However, the result is pretty useless.\n\n    ('6', ' ', '+', ' ', '9', '*', '4', '2', ' ', '-', ' ', '(', '0', ')')\n\nThis is the same as `tuple(\"6 + 9*42 - (0)\")`. Let's first start by ignoring\nthe spaces. We'll prefix a `:` on the `_` rule to ignore whatever `\" \"*` gave.\n\n    _ <- :\" \"*;\n\nThis gives us\n\n    ('6', '+', '9', '*', '4', '2', '-', '(', '0', ')')\n\nBetter than before, but still pretty useless. It's the same as\n`tuple(\"6 + 9*42 - (0)\".replace(\" \", \"\"))`. Our next move is to give our result\nsome depth. Let's add some `{}` around some operations and see what it does.\n\n    start <- _ expression _ !.;\n    expression <- { factor (_ '+-' _ factor)+ } | factor;\n    factor <- { term (_ '*/' _ term)+ } | term;\n    term <- { \"(\" _ expression _ \")\" } | '0123456789'+;\n    _ <- :\" \"*;\n\nNice. Now we have some more useful output. I'll format it for readability.\n\n    ( ( '6',\n        '+',\n        ( '9',\n          '*',\n          '4', '2'),\n        '-',\n        ( '(',\n          '0',\n          ')')),)\n\nStill kinda cluttered. How about now?\n\n    '6'\n    '+'\n        '9'\n        '*'\n        '4', '2'\n    '-'\n        '('\n        '0'\n        ')'\n\nPretty neat. Our parser already knows the order of operations as shown by the\n`9*42` being indented together, rather than say `6+9` being together. This is\ndue to expression being defined as factors separated by `+` or `-` and factors\ndefined as terms separated by `*` or `/`. The factor would be parsed together,\nthen the expression would connect them a level up.\n\nIt's possible to create a function that walks through this and evaluates the\nanswer, though it requires quite a bit of effort.\n\nOne way to make it simpler for the walker is to use the `~` prefix which joins\nthe expression into a single string. The `42` is current represented as\n`('4', '2')` which makes finding where the number ends harder than necessary.\nLet's prefix our rule for a number with the fuse operator.\n\n    term <- { \"(\" _ expression _ \")\" } | ~'0123456789'+;\n\nNow when we parse, the `42` is in a single string.\n\n    '6'\n    '+'\n        '9'\n        '*'\n        '42'\n    '-'\n        '('\n        '0'\n        ')'\n\nHow about we also remove the brackets? They were only there to \"override\"\noperator precedence so that it would act on the expression inside as a single\nnumber. They have no use in the final parse tree, so let's prefix them with a\n`:`, same as what we did to spaces. For the same reason, we can also remove the\ncurly brackets.\n\n    term <- :\"(\" _ expression _ :\")\" | ~'0123456789'+;\n\nNow we have an even cleaner tree.\n\n    '6'\n    '+'\n        '9'\n        '*'\n        '42'\n    '-'\n    '0'\n\nHere is my walker function for this step as reference. Note that you need to\npass in the first item inside the result because the expression rule packs the\nresult inside a tuple.\n\n    def walk(node):\n        if isinstance(node, str):\n            return int(node)\n        node = list(node)\n        value = walk(node.pop(0))\n        while node:\n            op = node.pop(0)\n            other = walk(node.pop(0))\n            if op == \"+\":\n                value += other\n            elif op == \"-\":\n                value -= other\n            elif op == \"*\":\n                value *= other\n            elif op == \"/\":\n                value /= other\n        return value\n\nThe answer's 384 by the way. Anyways, this walker function works, but\nimprovements can be made. Instead of an `isinstance` check, we can pack it in\nanother tuple and use the inject syntax to our advantage. Take a look:\n\n    term <- :\"(\" _ expression _ :\")\" | { `num` ~'0123456789'+ };\n\nWhen we parse our expression, all numbers are now actually a two-tuple of the\nform `('num', string)`.\n\n    'num', '6'\n    '+'\n        'num', '9'\n        '*'\n        'num', '42'\n    '-'\n    'num', '0'\n\nOur walker function can now check whether the first item is `num` and act\naccordingly.\n\n    if node[0] == \"num\":\n        return int(node[1])\n\nWe can extend this to our expressions and factors too. Instead of checking the\noperator, we can have the first item be either `expression` or `factor` and\nthen act on them separately.\n\n    expression <- { `expression` factor (_ '+-' _ factor)+ } | factor;\n    factor <- { `factor` term (_ '*/' _ term)+ } | term;\n\nOur walker function can now look like this:\n\n    if node[0] == \"expression\":\n        node = list(node[1:])\n        value = walk(node.pop(0))\n        while node:\n            op = node.pop(0)\n            other = walk(node.pop(0))\n            if op == \"+\":\n                value += other\n            elif op == \"-\":\n                value -= other\n        return value\n    if node[0] == \"factor\":\n        node = list(node[1:])\n        value = walk(node.pop(0))\n        while node:\n            op = node.pop(0)\n            other = walk(node.pop(0))\n            if op == \"*\":\n                value *= other\n            elif op == \"/\":\n                value /= other\n        return value\n\nThis creates a parallel between the parsing and the walking and ensures that\nthe operators inside each type of rule are actually the correct ones.\n\n    'expression'\n        'num', '6'\n        '+'\n        'factor'\n            'num', '9'\n            '*'\n            'num', '42'\n        '-'\n        'num', '0'\n\nHere's the result with all syntax `(,)` for reference:\n\n    (('expression',\n        ('num', '6'),\n        '+',\n        ('factor',\n            ('num', '9'),\n            '*',\n            ('num', '42')),\n        '-',\n        ('num', '0')),)\n\nOne can turn the walker function into a class that uses getattr to act on\ndifferent nodes but I'm content with the walker being a function.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GeeTransit/pegpog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pegpog",
    "package_url": "https://pypi.org/project/pegpog/",
    "platform": "",
    "project_url": "https://pypi.org/project/pegpog/",
    "project_urls": {
      "Homepage": "https://github.com/GeeTransit/pegpog"
    },
    "release_url": "https://pypi.org/project/pegpog/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Parse strings",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11685987,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96900eba4624c3da4ca3489fedc809587a6945147789c1428aa23df1c712423c",
          "md5": "26b25a72e3b6313a0ceca3c6ca71f442",
          "sha256": "8bddc1ec140c64c5fd72ae14720ce6648ba94c9bb85dc695f2332b25868ba96d"
        },
        "downloads": -1,
        "filename": "pegpog-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26b25a72e3b6313a0ceca3c6ca71f442",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12902,
        "upload_time": "2021-10-11T09:30:08",
        "upload_time_iso_8601": "2021-10-11T09:30:08.040883Z",
        "url": "https://files.pythonhosted.org/packages/96/90/0eba4624c3da4ca3489fedc809587a6945147789c1428aa23df1c712423c/pegpog-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6412fb540a8036dbdf8404422dd6fbca1f45cccabf0c542ec225f71504fac49",
          "md5": "f7676aeea49a0b68612ec16d95fee0f5",
          "sha256": "c403102d11ddf40cb4dafee8f7f8de400d32c2dfde6b4f0626bbe2e5436ec607"
        },
        "downloads": -1,
        "filename": "pegpog-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7676aeea49a0b68612ec16d95fee0f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29788,
        "upload_time": "2021-10-11T09:30:10",
        "upload_time_iso_8601": "2021-10-11T09:30:10.010909Z",
        "url": "https://files.pythonhosted.org/packages/b6/41/2fb540a8036dbdf8404422dd6fbca1f45cccabf0c542ec225f71504fac49/pegpog-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96900eba4624c3da4ca3489fedc809587a6945147789c1428aa23df1c712423c",
        "md5": "26b25a72e3b6313a0ceca3c6ca71f442",
        "sha256": "8bddc1ec140c64c5fd72ae14720ce6648ba94c9bb85dc695f2332b25868ba96d"
      },
      "downloads": -1,
      "filename": "pegpog-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "26b25a72e3b6313a0ceca3c6ca71f442",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12902,
      "upload_time": "2021-10-11T09:30:08",
      "upload_time_iso_8601": "2021-10-11T09:30:08.040883Z",
      "url": "https://files.pythonhosted.org/packages/96/90/0eba4624c3da4ca3489fedc809587a6945147789c1428aa23df1c712423c/pegpog-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6412fb540a8036dbdf8404422dd6fbca1f45cccabf0c542ec225f71504fac49",
        "md5": "f7676aeea49a0b68612ec16d95fee0f5",
        "sha256": "c403102d11ddf40cb4dafee8f7f8de400d32c2dfde6b4f0626bbe2e5436ec607"
      },
      "downloads": -1,
      "filename": "pegpog-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f7676aeea49a0b68612ec16d95fee0f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29788,
      "upload_time": "2021-10-11T09:30:10",
      "upload_time_iso_8601": "2021-10-11T09:30:10.010909Z",
      "url": "https://files.pythonhosted.org/packages/b6/41/2fb540a8036dbdf8404422dd6fbca1f45cccabf0c542ec225f71504fac49/pegpog-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}