{
  "info": {
    "author": "chernecov_ev",
    "author_email": "chernecov.ev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\nCодержит классы **SdgDevMaster** и **SdgDevAsync** для обмена командами, через\nСКБ-шный интерфейс ввода/вывода. https://pypi.org/project/sdg-io/\n\n`SdgDevMaster` умеет только передавать команды, т.е. выполняет работу `Главного устройства`.\n\n`SdgDevAsync` предназначен как для передачи так и для приема команд, т.е позволяет\nорганизовать работу как `Главного` так и `Подчиненного устройства`.\nДля работы SdgDevAsync создается поток, в котором выполняется переодическое\nчтение данных из интерфейса ввода/вывода и их обработка на предмет получения команд.\nВходящие команды должны быть заранее добавлены методом `add_incmd()` с указанием кода команды,\nформатом ожидаемых данных и callback функции, которой будет передано управление при\nпоступлении команды с нужным кодом и форматом данных.\n`Внимание` callback функция вызывается из внутреннего потока SdgDevAsync и не должна его\nблокировать! Для безопасного обмена данными должны быть приняты меры!\n\n`SdgDevMaster` и `SdgDevAsync` могут автоматически определять порт к которому подключено\nподчиненное устройство. Для этого нужно:\n1. Переопределить функцию `check_id()`, которая будет запрашивать `уникальный идентификатор`\nу `подчиненного` и при получении адекватного ответа, возвращать True.\n2. Использовать ф-ю `search_port()` для поиска `подчиненного` по всем доступным портам системы,\nили search_port(portlist) для поиска по заранее подготовленному списоку портов.\n\nПри необходимости подключить какой-то другой интерфейс ввода/вывода нужно\nиспользовать классы **DevMaster** и **DevAsync**.\nИнтерфейс ввода/вывода должен иметь методы `read/write` и вызывать\nисключение `IOError` при ошибках чтения/записи.\n\nФормат обмена:\n-------------\n`АА СС D0 D1 .. DX` - команда\n`AA CA D0 D1 .. DX` - ответ\n* `АА`: адрес устройства. Возможна работа без адреса (точка -точка).\n* `СС`: код команды, любой в диапазоне 0x00 - 0x7F, кроме 0x70\n* `CA`: код ответа = код команды с установленным старшим битом 0x80 - 0xFF, кроме 0xF0\n* `D0-DX`: данные команды/ответа опционально.\nНа широковещательные команды с адресом `АА=0х00` ответ подчиненным(и) не выдается.\nВозможен ответ подчиненного с кодом `0xF0` `Недопустимая команда` это означает,\nчто он не смог выполнить данныую команду. Формат такого ответа:\n`AA 0xF0 CC EE`, где `EE` - код ошибки выполнения. (см. class DevBadCode)\n\nПример использования (example.py):\n-------------\n```python\nfrom struct import pack\nfrom sdg_utils import log_open\nfrom sdg_dev import SdgDevMaster, DevException, SdgDevAsync\n\nlog = log_open()\n\n\nclass MyMaster(SdgDevMaster):\n    def __init__(self):\n        super().__init__(port='', log=log.getChild('mastr'))\n\n    def check_id(self):\n        return self.send(b'\\x00', ackfrmt='H') == 0xAAAA\n\n    def send_val(self, val):\n        return self.send(b'\\x31' + pack('I', val), ackfrmt='')\n\n    def request_val(self):\n        return self.send(b'\\x32', ackfrmt='I', timeout=.1, remix=0)\n\n\nclass MySlave(SdgDevAsync):\n    def __init__(self, port):\n        super().__init__(port, log=log.getChild('slave'))\n        self.val = 0x04030201\n        self.ID = 0xAAAA\n        self.add_incmd(b'\\x00', '', self._getid)\n        self.add_incmd(b'\\x31', 'I', self._setval)\n        self.add_incmd(b'\\x32', '', self._getval)\n        self.add_incmd(b'\\x33', '', lambda: pack('BBBB', 5, 6, 7, 8))\n\n    def _setval(self, val):\n        self.val = val\n        return b''\n\n    def _getval(self):\n        return pack('I', self.val)\n\n    def _getid(self):\n        return pack('H', self.ID)\n\n\nif __name__ == \"__main__\":\n    print('Порт для master-a будет определен автопоиском по всем доступным портам системы.')\n    PORT = input(\"Ведите название порта для slave-a или нажмите Enter(по умочанию 'COM26'):\")\n    if not PORT:\n        PORT = 'COM26'\n\n    slave = MySlave(PORT)\n    master = MyMaster()\n    master.search_port()\n\n    try:\n        val = master.request_val()\n        log.info(f\"request_val 0x{val:08x}\")\n\n        log.info(f\"send new val 0x01020304\")\n        master.send_val(0x01020304)\n\n        val = master.request_val()\n        log.info(f\"request_val 0x{val:08x}\")\n\n        a, b, c, d = master.send(b'\\x33', ackfrmt='BBBB')\n        log.info(f\"{a}, {b}, {c}, {d}\")\n\n    except DevException as e:\n        log.error(e)\n\n    master.close()\n    slave.close()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sdg-dev",
    "package_url": "https://pypi.org/project/sdg-dev/",
    "platform": "",
    "project_url": "https://pypi.org/project/sdg-dev/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/sdg-dev/1.32/",
    "requires_dist": [
      "sdg-io (>=2.3)",
      "sdg-utils (>=0.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "master and slave over sdg_io",
    "version": "1.32",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8785371,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e12314642604efa988acf98f8986f2f46aeef181e8a41ccba47cb44e2063c91",
          "md5": "a0ec2a8602495a989a6d19a4fa0b9ef7",
          "sha256": "8905c5b5cb87b879fbb732171b9694cdbea10039cbac94349489315b8998ad61"
        },
        "downloads": -1,
        "filename": "sdg_dev-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0ec2a8602495a989a6d19a4fa0b9ef7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18615,
        "upload_time": "2020-01-21T06:03:50",
        "upload_time_iso_8601": "2020-01-21T06:03:50.185698Z",
        "url": "https://files.pythonhosted.org/packages/1e/12/314642604efa988acf98f8986f2f46aeef181e8a41ccba47cb44e2063c91/sdg_dev-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e34a5780135becc71a6a5f4ccd047d5818462ec44340a60e549e035a3d9e40e9",
          "md5": "f4601b67b326cd5078f8a5723f63daa8",
          "sha256": "c26124ef80e5f0bca7f4bc9162ec57a5020c1f1afd75e22fb3c7902568d4763f"
        },
        "downloads": -1,
        "filename": "sdg_dev-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4601b67b326cd5078f8a5723f63daa8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21601,
        "upload_time": "2020-02-20T07:23:51",
        "upload_time_iso_8601": "2020-02-20T07:23:51.054783Z",
        "url": "https://files.pythonhosted.org/packages/e3/4a/5780135becc71a6a5f4ccd047d5818462ec44340a60e549e035a3d9e40e9/sdg_dev-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18aa82dc02633c0e56a09ecbf2195de5f3dc5387db9bfa07e695b88cf97bae45",
          "md5": "c7204e3566da83592af3389ade734fd6",
          "sha256": "5a7c99d861a6d11f19272b597811acb9a9d8cbc8a62377aa13fe01bd58c97ac7"
        },
        "downloads": -1,
        "filename": "sdg_dev-1.31-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7204e3566da83592af3389ade734fd6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21836,
        "upload_time": "2020-09-11T10:20:55",
        "upload_time_iso_8601": "2020-09-11T10:20:55.527836Z",
        "url": "https://files.pythonhosted.org/packages/18/aa/82dc02633c0e56a09ecbf2195de5f3dc5387db9bfa07e695b88cf97bae45/sdg_dev-1.31-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "537b5163fdb9e54e51a6302c449746f03731ddcbfbd73d42f9213524cb1dc295",
          "md5": "19aaa3c6c4302bccc6a758f633be24dd",
          "sha256": "a013e2c546ab7fb9a0326da8a073d225e16a763fe56dde94a155d066d9e07258"
        },
        "downloads": -1,
        "filename": "sdg_dev-1.32-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19aaa3c6c4302bccc6a758f633be24dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21808,
        "upload_time": "2020-12-01T03:22:43",
        "upload_time_iso_8601": "2020-12-01T03:22:43.054813Z",
        "url": "https://files.pythonhosted.org/packages/53/7b/5163fdb9e54e51a6302c449746f03731ddcbfbd73d42f9213524cb1dc295/sdg_dev-1.32-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "537b5163fdb9e54e51a6302c449746f03731ddcbfbd73d42f9213524cb1dc295",
        "md5": "19aaa3c6c4302bccc6a758f633be24dd",
        "sha256": "a013e2c546ab7fb9a0326da8a073d225e16a763fe56dde94a155d066d9e07258"
      },
      "downloads": -1,
      "filename": "sdg_dev-1.32-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19aaa3c6c4302bccc6a758f633be24dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21808,
      "upload_time": "2020-12-01T03:22:43",
      "upload_time_iso_8601": "2020-12-01T03:22:43.054813Z",
      "url": "https://files.pythonhosted.org/packages/53/7b/5163fdb9e54e51a6302c449746f03731ddcbfbd73d42f9213524cb1dc295/sdg_dev-1.32-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}