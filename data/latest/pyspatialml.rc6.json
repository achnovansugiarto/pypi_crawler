{
  "info": {
    "author": "Steven Pawley",
    "author_email": "steven.pawley@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Codecov test coverage](https://codecov.io/gh/stevenpawley/pyspatialml/branch/master/graph/badge.svg)](https://codecov.io/gh/stevenpawley/pyspatialml?branch=master)\n\n# Pyspatialml\nMachine learning classification and regression modelling for spatial raster data.\n\n## Description\n`Pyspatialml` is a Python module for applying scikit-learn machine learning models to 'stacks' of raster datasets.\nPyspatialml includes functions and classes for working with multiple raster datasets and performing a typical machine\nlearning workflow consisting of extracting training data and applying the predict or predict_proba methods of\nscikit-learn estimators to a stack of raster datasets. Pyspatialml is built upon the `rasterio` Python module for\nall of the heavy lifting, and is also designed for working with vector data using the `geopandas` module.\n\nFor more information read the documents page at: https://stevenpawley.github.io/Pyspatialml/\n\n## Rationale\nA typical supervised machine-learning workflow involving raster datasets consists of several steps:\n\n1. Using vector features or labelled pixels to extract training data from a stack of raster-based predictors (e.g.\nspectral bands, terrain derivatives, or climate grids). The training data represent locations when some \nproperty/state/concentration is already established, and might comprise point locations of arsenic concentrations, or\nlabelled pixels with integer-encoded values that correspond to known landcover types.\n\n2. Developing a machine learning classification or regression model on the training data. Pyspatialml is designed to use\nscikit-learn compatible api's for this purpose.\n\n3. Applying the fitted machine learning model to make predictions on all of the pixels in the stack of raster data.\n\nPyspatialml is designed to make it easy to develop spatial prediction models on stacks of 2D raster datasets that are\nheld on disk. Unlike using python's `numpy` module directly where raster datasets need to be held in memory, \nthe majority of functions within pyspatialml work with raster datasets that are stored on disk and allow processing\noperations to be performed on datasets that are too large to be loaded into memory.  \n\n## Design\n\n### Raster and RasterLayer objects\n\nThe main class that facilitates working with multiple raster datasets is the `Raster` class, which is inspired by\nthe famous  ```raster``` package in the R statistical programming language. The `Raster` object takes a list of file\npaths to GDAL-supported raster datasets and 'stacks' them into a single Raster object. The underlying file-based raster\ndatasets are not physically-stacked, but rather the Raster object internally represents each band within the datasets as\na `RasterLayer`. This means that metadata regarding what each raster dataset represents (e.g. the dataset's name)\ncan be retained, and additional raster datasets can be added or removed from the stack without physical on disk changes.\n\nNote these raster datasets need to be spatially aligned in terms of their extent, resolution and coordinate reference\nsystem.\n\n### Usage\n\nThere are four methods of creating a new Raster object:\n\n1. `Raster([raster1.tif, raster2.tif, raster3.tif])` creates a Raster object from existing file-based\nGDAL-supported datasets.\n\n2. `Raster(new_numpy_array, crs=crs, transform=transform)` creates a Raster object from a 3D numpy array (band,\nrow, column). The `crs` and `transform` arguments are optional but are required to provide coordinate reference\nsystem information to the Raster object. The crs argument has to be represented by `rasterio.crs.CRS` object, and\nthe transform parameter requires a `affine.Affine` object.\n\n3. `Raster([RasterLayer1, RasterLayer2, RasterLayer3])` creates a Raster object from a single or list of\nRasterLayer objects. RasterLayers are a thin wrapper around rasterio.Band objects with additional methods. This is\nmostly used internally. A RasterLayer itself is initiated directly from a rasterio.Band object.\n\n4. `Raster([src0, src1, src2])` where the list elements are `rasterio.io.datasetreader` objects, i.e. raster\ndatasets that have been opened using the `rasterio.open` method.\n\nGenerally, pyspatialml intends users to work with the Raster object. However, access to individual RasterLayer\nobjects, or the underlying rasterio.band datasets can be useful if pyspatialml is being used in conjunction with other\nfunctions and methods in the Rasterio package.\n\n## Installation\n\nThe package is now available on PyPI, but can also be installed from GitHub directly via:\n\n```\npip install git+https://github.com/stevenpawley/Pyspatialml\n```\n\n## Quickstart\n\nThis is an example using the imagery data that is bundled with the package. This data is derived from the GRASS GIS\nNorth Carolina dataset and comprises Landsat 7 VNIR and SWIR bands along with some land cover training data that were\nderived from a land cover classification from an earlier date.\n\nFirst, import the extract and predict functions:\n\n```\nfrom pyspatialml import Raster\nfrom copy import deepcopy\nimport os\nimport tempfile\nimport geopandas\nimport rasterio.plot\nimport matplotlib.pyplot as plt\n```\n\n### Stacking \n\nWe are going to use a set of Landsat 7 bands contained within the nc_dataset:\n\n```\nimport pyspatialml.datasets.nc as nc\npredictors = [nc.band1, nc.band2, nc.band3, nc.band4, nc.band5, nc.band7]\n```\n\nThese raster datasets are aligned in terms of their extent and coordinate reference systems. We can 'stack' these into a\nRaster class so that we can perform machine learning related operations on the set of rasters:\n\n```\nstack = Raster(predictors)\n```\n\nUpon 'stacking', syntactically-correct names for each RasterLayer are automatically generated from the file_paths.\n\n### Indexing\n\nIndexing of Raster objects is provided by several methods:\n\n- Raster[keys] : subsets a Raster using key-based indexing based on the names of the RasterLayers. If a single key is\nsupplied then a RasterLayer is returned, otherwise a Raster object is returned contained the subsetted layers.\n- Raster.iloc[int, list, tuple, slice] : subsets a Raster using integer-based indexing or slicing. If a single key is\nsupplied then a RasterLayer is returned, otherwise a Raster object is returned contained the subsetted layers.\n- Raster.name : attribute names can be used directly, and always returns a single RasterLayer object.\n\nRasterLayer indexing which returns a RasterLayer:\n\n```\n# index by integer position\nrasterlayer = stack.iloc[0]\nrasterstack = stack.iloc[0:3]\n\n# index by name\nrasterlayer = stack['lsat7_2000_10']\nrasterstack = stack[('lsat7_2000_10', 'lsat7_2000_20')]\n\n# index by atttribute\nrasterlayer = stack.lsat7_2000_10\n```\n\nIterate through RasterLayers:\n\n```\nfor name, layer in stack:\n    print(layer)\n```\n\nSubset a Raster object:\n\n```\nsubset_raster = stack[['lsat7_2000_10', 'lsat7_2000_70']]\nsubset_raster.names\n```\n\nReplace a RasterLayer with another:\n\n```\nstack.iloc[0] = Raster(nc.band7).iloc[0]\n```\n\nAppend layers from another Raster to the stack. Note that this occurs in-place. Duplicate names are automatically given\na suffix:\n\n```\nstack.append(Raster(nc.band7))\nstack.names\n```\n\nRename RasterLayers using a dict of old_name : new_name pairs:\n\n```\nstack.names\nstack.rename({'lsat7_2000_30': 'new_name'}, in_place=True)\nstack.names\nstack.new_name\nstack['new_name']\nstack.loc['new_name']\n```\n\nWe can also change all of the column names by replacing them:\n\n```\nstack.names = [\"band1\", \"band2\", \"band3\", \"band4\", \"band5\", \"band7\"]\n```\n\nDrop a RasterLayer:\n\n```\nstack.names\nstack.drop(labels='band1', in_place=True)\nstack.names\n```\n\nSave a Raster:\n\n```\ntmp_tif = tempfile.NamedTemporaryFile().name + '.tif'\nnewstack = stack.write(file_path=tmp_tif, nodata=-9999)\nnewstack.band2.read()\n```\n\n### Plotting\n\nBasic plotting has been added to as a method to RasterLayer and Raster options. More controls on plotting will be added\nin the future. Currently you can set a matplotlib cmap for each RasterLayer using the RasterLayer.cmap attribute. \n\nPlot a single RasterLayer:\n\n```\nfrom matplotlib.colors import Normalize\n\nstack = Raster(predictors)\nstack.lsat7_2000_10.cmap = 'plasma'\nstack.lsat7_2000_10.norm = Normalize(20, 210)\nstack.lsat7_2000_10.plot()\n```\n\nPlot all RasterLayers in a Raster object:\n\n```\nstack.plot()\n```\n\n### Integration with Pandas\n\nData from a Raster object can converted into a Pandas dataframe, with each pixel representing by a row, and columns\nreflecting the x, y coordinates and the values of each RasterLayer in the Raster object:\n\n```\ndf = stack.to_pandas(max_pixels=50000, resampling='nearest')\ndf.head()\n```\n\nThe original raster is up-sampled based on max_pixels and the resampling method, which uses all of resampling methods\navailable in the underlying rasterio library for decimated reads. The Raster.to_pandas method can be useful for plotting\ndatasets, or combining with a library such as plotnine to create ggplot2-style plots of stacks of RasterLayers:\n\n```\nfrom plotnine import *\n(ggplot(df.melt(id_vars=['x', 'y']), aes(x='x', y='y', fill='value')) +\ngeom_tile() + facet_wrap('variable'))\n```\n\n## A Machine Learning Workflow\n\n### Extract Training Data\n\nLoad some training data in the form of polygons, points and labelled pixels in geopandas GeoDataFrame objects. We will\nalso generate some line geometries by converting the polygon boundaries into linestrings. All of these geometry types\ncan be used to spatially query pixel values in a Raster object, however each GeoDataFrame must contain only one type of\ngeometry (i.e. either shapely points, polygons or linestrings).\n\n```\ntraining_py = geopandas.read_file(nc.polygons)\ntraining_pt = geopandas.read_file(nc.points)\ntraining_px = rasterio.open(nc.labelled_pixels)\ntraining_lines = deepcopy(training_py)\ntraining_lines['geometry'] = training_lines.geometry.boundary\n```\n\nShow training data points and a single raster band using numpy and matplotlib:\n\n```\nstack = Raster(predictors)\nplt.imshow(stack.lsat7_2000_70.read(masked=True),\n           extent=rasterio.plot.plotting_extent(stack.lsat7_2000_70))\nplt.scatter(x=training_pt.bounds.iloc[:, 0],\n            y=training_pt.bounds.iloc[:, 1],\n            s=2, color='black')\nplt.show()\n```\n\nPixel values in the Raster object can be spatially queried using the `extract_vector` and `extract_raster`\nmethods. In addition, the `extract_xy` method can be used to query pixel values using a 2d array of x and y\ncoordinates.\n\nThe `extract_vector` method accepts a Geopandas GeoDataFrame as the `gdf` argument. For\nGeoDataFrames containing shapely point geometries, the closest pixel to each point is sampled. For shapely polygon\ngeometries, all pixels whose centres are inside the polygon are sampled. For shapely linestring geometries, every pixel\ntouched by the line is sampled. For all geometry types, pixel values are queries for each geometry separately. This\nmeans that overlapping polygons or points that fall within the same pixel with cause the same pixel to be sampled\nmultiple times.\n\nBy default, the extract functions return a Geopandas GeoDataFrame of point geometries and the DataFrame containing the\nextracted pixels, with the column names set by the names of the raster datasets in the Raster object. The user can also\nuse the `return_array=True` argument, which instead of returning a DataFrame will return three masked numpy arrays\n(id, X, coordinates) containing geodataframe indices, the extracted pixel values, and the spatial coordinates of the sampled\npixels. These arrays are masked arrays with nodata values in the RasterStack datasets being masked.\n\nThe `extract_raster` method can also be used to spatially query pixel values from a Raster object using another\nraster containing labelled pixels. This raster has to be spatially aligned with the Raster object. This method also returns\nthe values of the labelled pixels along with the queried pixel values.\n\n```\n# Create a training dataset by extracting the raster values at the training point locations:\ndf_points = stack.extract_vector(training_pt)\ndf_polygons = stack.extract_vector(training_py)\ndf_lines = stack.extract_vector(training_lines)\ndf_raster = stack.extract_raster(training_px)\n\ndf_points.head()\n\n# join the extracted pixel data back with the training data\ndf_points = df_points.droplevel(0).merge(\n    training_pt.loc[:, (\"id\")], \n    left_index=True, \n    right_index=True\n)\ndf_points = df_points.dropna()\n```\n\n### Model Training\n\nNext we can train a logistic regression classifier:\n\n```\n# Next we can train a logistic regression classifier:\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_validate\n\n# define the classifier with standardization of the input features in a pipeline\nlr = Pipeline(\n    [('scaling', StandardScaler()),\n     ('classifier', LogisticRegressionCV(n_jobs=-1))])\n\n# fit the classifier\nX = df_points.drop(columns=[\"geometry\", \"id\"])\ny = df_points.id\nlr.fit(X, y)\n````\n\nAfter defining a classifier, a typical step consists of performing a cross-validation to evaluate the performance of the\nmodel. Scikit-learn provides the cross_validate function for this purpose. In comparison to non-spatial data, spatial\ndata can be spatially correlated, which potentially can mean that geographically proximal samples may not represent\nindependent samples if they are within the autocorrelation range of some of the predictors. This will lead to overly\noptimistic performance measures if samples in the training dataset / cross-validation partition are strongly spatially\ncorrelated with samples in the test dataset / cross-validation partition.\n\nIn this case, performing cross-validation using groups is useful, because these groups can represent spatial clusters of\ntraining samples, and samples from the same group will never occur in both the training and test partitions of a\ncross-validation. An example of creating random spatial clusters from point coordinates is provided here:\n\n```\n# spatial cross-validation\nfrom sklearn.cluster import KMeans\n\n# create 10 spatial clusters based on clustering of the training data point x,y coordinates\nclusters = KMeans(n_clusters=34, n_jobs=-1)\nclusters.fit(df_points.geometry.bounds.iloc[:, 0:2])\n\n# cross validate\nscores = cross_validate(\n  lr, X, y, groups=clusters.labels_,\n  scoring='accuracy',\n  cv=3,  n_jobs=1)\nscores['test_score'].mean()\n```\n\n### Raster Prediction\n\nPrediction on the Raster object is performed using the `predict` and `predict_proba` methods. The `estimator` is the only required\nargument. If the `file_path` argument is not specified then the result is automatically written to a temporary file.\nThe predict method returns an rasterio.io.DatasetReader object which is open. For probability prediction,\n`indexes` can also be supplied if you only want to output the probabilities for a particular class, or list of\nclasses, by supplying the indices of those classes:\n\n```\n# prediction\nresult = stack.predict(estimator=lr, dtype='int16', nodata=0)\nresult_probs = stack.predict_proba(estimator=lr)\n\n# plot classification result\nresult.plot()\nplt.show()\n\n# plot class probabilities\nresult_probs.plot()\nplt.show()\n```\n\n## Sampling Tools\n\nFor many spatial models, it is common to take a random sample of the predictors to represent a single class (i.e. an\nenvironmental background or pseudo-absences in a binary classification model). The sample function is supplied in the\nsampling module for this purpose:\n```\n# extract training data using a random sample\ndf_rand = stack.sample(size=100, random_state=1)\ndf_rand.plot()\n```\n\nThe sample function also enables stratified random sampling based on passing a categorical raster dataset to the strata\nargument. The categorical raster should spatially overlap with the dataset to be sampled, but it does not need to be of\nthe same grid resolution. This raster should be passed as another `Raster` dataset containing a single categorical layer:\n\n```\nstrata = Raster(nc.strata)\ndf_strata = stack.sample(size=5, strata=strata, random_state=1)\ndf_strata = df_strata.dropna()\n\nfig, ax = plt.subplots()\nax.imshow(strata.read(1, masked=True), extent=rasterio.plot.plotting_extent(strata), cmap='tab10')\ndf_strata.plot(ax=ax, markersize=20, color='white')\nplt.show()\n```\n\n## Vector Data Tools\n\nIn some cases, we don't need all of the training data, but rather would spatially thin a point dataset. The\nfilter_points function performs point-thinning based on a minimum distance buffer on a geopandas dataframe containing\npoint geometries:\n\n```\nfrom pyspatialml.vector import filter_points\n\nthinned_points = filter_points(training_pt, min_dist=500, remove='first')\nthinned_points.shape\n```\n\nWe can also generate random points within polygons using the get_random_point_in_polygon function. This requires a\nshapely POLYGON geometry as an input, and returns a shapely POINT object:\n\n```\nfrom pyspatialml.vector import get_random_point_in_polygon\n\n# generate 5 random points in a single polygon\nrandom_points = [get_random_point_in_polygon(training_py.geometry[0]) for i in range(5)]\n\n# convert to a GeoDataFrame\nrandom_points = geopandas.GeoDataFrame(\n  geometry=geopandas.GeoSeries(random_points))\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stevenpawley/pyspatialml",
    "keywords": "GIS",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyspatialml",
    "package_url": "https://pypi.org/project/pyspatialml/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyspatialml/",
    "project_urls": {
      "Homepage": "https://github.com/stevenpawley/pyspatialml"
    },
    "release_url": "https://pypi.org/project/pyspatialml/0.21/",
    "requires_dist": [
      "numpy (>=1.10.0)",
      "scipy (>1.0.0)",
      "tqdm (>=4.20)",
      "rasterio (>=1.0)",
      "pandas (>=0.20)",
      "shapely (>=1.6)",
      "geopandas (>=0.3)",
      "matplotlib (>=2.2.4)",
      "scikit-learn (>=0.22)"
    ],
    "requires_python": ">=3.7",
    "summary": "Machine learning for GIS spatial modelling",
    "version": "0.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14675368,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4acb00a1a6c299acd2b967a033cfa3784f145cf74b90d38ac4978ecc3ffdbfc6",
          "md5": "d9a3a73fb5e51dd0e390325feb565c6b",
          "sha256": "31874e8fd48211faa380b41d50acda71b972ddd32fe579282a465754b535ead0"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d9a3a73fb5e51dd0e390325feb565c6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 2518769,
        "upload_time": "2020-11-27T06:50:19",
        "upload_time_iso_8601": "2020-11-27T06:50:19.087035Z",
        "url": "https://files.pythonhosted.org/packages/4a/cb/00a1a6c299acd2b967a033cfa3784f145cf74b90d38ac4978ecc3ffdbfc6/pyspatialml-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb2407ffe1a62850f48f0737b0ccfad8819e59fc3a01cf7eecc1e68c341c2dd9",
          "md5": "1cf554dc677bc1fc5b95cf85acd4686d",
          "sha256": "888932165f15a275d6f944b32665aaa211f584e7dd9b1bfaa32c77995ed2d797"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1cf554dc677bc1fc5b95cf85acd4686d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 2322910,
        "upload_time": "2020-11-27T06:50:24",
        "upload_time_iso_8601": "2020-11-27T06:50:24.699109Z",
        "url": "https://files.pythonhosted.org/packages/fb/24/07ffe1a62850f48f0737b0ccfad8819e59fc3a01cf7eecc1e68c341c2dd9/pyspatialml-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03baa0e7f2c6b36990b96ab6152093712748ef5c1cb4d4417acc45d8f653e79f",
          "md5": "5fec4fe29b515c175fc1b369e3ae9631",
          "sha256": "7bf919897bf79481148109a6bfaebf75f6af4125309139b6f47e9200d9752dc9"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fec4fe29b515c175fc1b369e3ae9631",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 2513247,
        "upload_time": "2021-02-15T18:26:29",
        "upload_time_iso_8601": "2021-02-15T18:26:29.174439Z",
        "url": "https://files.pythonhosted.org/packages/03/ba/a0e7f2c6b36990b96ab6152093712748ef5c1cb4d4417acc45d8f653e79f/pyspatialml-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c4ead13dcc02aa05a0266fa47e80d461cbdf874f0b5aee85464f0ba3e0a706d",
          "md5": "ccf52d3f3b7597005042779f81e4f731",
          "sha256": "14f069eb158f972e7dfa489b50be396dce922d2d12bcb66d93772a8618dbb211"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ccf52d3f3b7597005042779f81e4f731",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 2316426,
        "upload_time": "2021-02-15T18:26:33",
        "upload_time_iso_8601": "2021-02-15T18:26:33.695609Z",
        "url": "https://files.pythonhosted.org/packages/7c/4e/ad13dcc02aa05a0266fa47e80d461cbdf874f0b5aee85464f0ba3e0a706d/pyspatialml-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9c513a51463c96c04d61820d1031d754d222333a1f0b034623cec2c89e4ffc5",
          "md5": "8ee2c91e9fd5c13778ddadad5bb09458",
          "sha256": "b71d7528dbf7903949df2afb828a6df7b5d227e7f1f174a5b7f0604d1533f263"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ee2c91e9fd5c13778ddadad5bb09458",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 2519995,
        "upload_time": "2021-03-12T17:32:26",
        "upload_time_iso_8601": "2021-03-12T17:32:26.290782Z",
        "url": "https://files.pythonhosted.org/packages/c9/c5/13a51463c96c04d61820d1031d754d222333a1f0b034623cec2c89e4ffc5/pyspatialml-0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "983f0783f3b79f5be26897eb52239a20849aec7b69029eeeeb45fadd2598879f",
          "md5": "7b4ed01ab2ad9ecce7759fcc8364bda8",
          "sha256": "04e76dd59eac490c64787bc97b14e9de1cc2660766e4a0737654a3a927e7f226"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "7b4ed01ab2ad9ecce7759fcc8364bda8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 2317270,
        "upload_time": "2021-03-12T17:32:33",
        "upload_time_iso_8601": "2021-03-12T17:32:33.330695Z",
        "url": "https://files.pythonhosted.org/packages/98/3f/0783f3b79f5be26897eb52239a20849aec7b69029eeeeb45fadd2598879f/pyspatialml-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89c9fcd2c36904e351b82b46345e7a67a33ad210c4a838e6d0391434cb0d9c5f",
          "md5": "fb43399f829b439f0cbadc5825fc7f64",
          "sha256": "339555e09042179f951f279c2e41974575d3a46dd2d0b2fd06d49d978d98fe1c"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb43399f829b439f0cbadc5825fc7f64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 2522124,
        "upload_time": "2021-05-07T23:21:25",
        "upload_time_iso_8601": "2021-05-07T23:21:25.700485Z",
        "url": "https://files.pythonhosted.org/packages/89/c9/fcd2c36904e351b82b46345e7a67a33ad210c4a838e6d0391434cb0d9c5f/pyspatialml-0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63abece9e855aed7fbf9719f771fd2a1b30b2f5f56d0e0641287fc843f55ca3e",
          "md5": "f5c60aa0768760d4238c2c5b93752b8e",
          "sha256": "c16eb86d0b3c51de7a7c677c8baec40d80c52b8d5604e405ba258b61edab84aa"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "f5c60aa0768760d4238c2c5b93752b8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 29419666,
        "upload_time": "2021-05-07T23:21:45",
        "upload_time_iso_8601": "2021-05-07T23:21:45.563074Z",
        "url": "https://files.pythonhosted.org/packages/63/ab/ece9e855aed7fbf9719f771fd2a1b30b2f5f56d0e0641287fc843f55ca3e/pyspatialml-0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35ced3dc8455a9f94c992b0b49def8d57034f397ff9c9dfd913070ee083bdc85",
          "md5": "b658c00282f472727919043b75ac31b8",
          "sha256": "4a25615f92a6d4541fba41edc98733037c6361cb95a86f97b8c26600294d37ed"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b658c00282f472727919043b75ac31b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2518846,
        "upload_time": "2022-08-06T16:54:06",
        "upload_time_iso_8601": "2022-08-06T16:54:06.891044Z",
        "url": "https://files.pythonhosted.org/packages/35/ce/d3dc8455a9f94c992b0b49def8d57034f397ff9c9dfd913070ee083bdc85/pyspatialml-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31c20b7341d24352d604a352b329df59485de0c56fbca1e852ac5066f6cadadb",
          "md5": "14d34f743dcfc94efb4c156dc8bccc0e",
          "sha256": "61fe74b5430d4009ac2abf111b14690f39e7334ccc07b167894f4cb27647aa1c"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "14d34f743dcfc94efb4c156dc8bccc0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2331558,
        "upload_time": "2022-08-06T16:54:14",
        "upload_time_iso_8601": "2022-08-06T16:54:14.262094Z",
        "url": "https://files.pythonhosted.org/packages/31/c2/0b7341d24352d604a352b329df59485de0c56fbca1e852ac5066f6cadadb/pyspatialml-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa9b65e4f7fed2bdafea6862afc6c80d6514bcb2430da4ec6742f7638b969a46",
          "md5": "fe28d422847f22747673198a5ea9b206",
          "sha256": "800cfa8beb28c43237e57620097d36878f408ff54bc4fa15005cd2ed88a75dce"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe28d422847f22747673198a5ea9b206",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2518857,
        "upload_time": "2022-08-06T16:58:58",
        "upload_time_iso_8601": "2022-08-06T16:58:58.252972Z",
        "url": "https://files.pythonhosted.org/packages/aa/9b/65e4f7fed2bdafea6862afc6c80d6514bcb2430da4ec6742f7638b969a46/pyspatialml-0.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d9b94ee3f80283260d608891f2e86cd4c8c9d16c86b61191d9e6bfe7861f3fe",
          "md5": "d4b022a3760ffe02084f2f899a203f90",
          "sha256": "c229612f6c8f10f8f7609e88681cf0db702b2cddb79b1c77baf9ed4b07c73666"
        },
        "downloads": -1,
        "filename": "pyspatialml-0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "d4b022a3760ffe02084f2f899a203f90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2331575,
        "upload_time": "2022-08-06T16:59:15",
        "upload_time_iso_8601": "2022-08-06T16:59:15.805427Z",
        "url": "https://files.pythonhosted.org/packages/8d/9b/94ee3f80283260d608891f2e86cd4c8c9d16c86b61191d9e6bfe7861f3fe/pyspatialml-0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa9b65e4f7fed2bdafea6862afc6c80d6514bcb2430da4ec6742f7638b969a46",
        "md5": "fe28d422847f22747673198a5ea9b206",
        "sha256": "800cfa8beb28c43237e57620097d36878f408ff54bc4fa15005cd2ed88a75dce"
      },
      "downloads": -1,
      "filename": "pyspatialml-0.21-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe28d422847f22747673198a5ea9b206",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 2518857,
      "upload_time": "2022-08-06T16:58:58",
      "upload_time_iso_8601": "2022-08-06T16:58:58.252972Z",
      "url": "https://files.pythonhosted.org/packages/aa/9b/65e4f7fed2bdafea6862afc6c80d6514bcb2430da4ec6742f7638b969a46/pyspatialml-0.21-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d9b94ee3f80283260d608891f2e86cd4c8c9d16c86b61191d9e6bfe7861f3fe",
        "md5": "d4b022a3760ffe02084f2f899a203f90",
        "sha256": "c229612f6c8f10f8f7609e88681cf0db702b2cddb79b1c77baf9ed4b07c73666"
      },
      "downloads": -1,
      "filename": "pyspatialml-0.21.tar.gz",
      "has_sig": false,
      "md5_digest": "d4b022a3760ffe02084f2f899a203f90",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 2331575,
      "upload_time": "2022-08-06T16:59:15",
      "upload_time_iso_8601": "2022-08-06T16:59:15.805427Z",
      "url": "https://files.pythonhosted.org/packages/8d/9b/94ee3f80283260d608891f2e86cd4c8c9d16c86b61191d9e6bfe7861f3fe/pyspatialml-0.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}