{
  "info": {
    "author": "BuongiornoTexas",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Topic :: Games/Entertainment"
    ],
    "description": ".. cSpell:ignore venv, Analyzer, userdata, remotecache, PRFLDB, pypi, profilemanager\n.. cSpell:ignore docstrings, dict, CDLCs, tuple, stats, simplejson, importrsm\n.. cSpell:ignore faves, newlist\n\n**rsrtools** is a package for creating and saving Rocksmith 2014 songlists **to** \nRocksmith save files (profiles). Incidentally, it also provides tools for managing\nRocksmith profiles.\n\n.. contents::\n\nAcknowledgements\n================\n\n**@0x0L** for `rs-utils <https://github.com/0x0L/rs-utils>`_ and \n`rocksmith <https://github.com/0x0L/rocksmith>`_ Rocksmith \ntools. All of the save file and data file handling routines are based on this code.\n\n**@sandiz** for `rs-manager <https://github.com/sandiz/rs-manager>`_, which is an \nawesome set listing tool. This package also gave me a deeper understanding of the \nRocksmith PSARC structure.\n\nNews and Breaking Changes\n==========================\n\n**1.0.0** First full release. No major changes from 0.3.5.\n\n**0.3.0** Feature complete release (barring a GUI in the longer term future).\nThe main feature added in this release is welder/welder.py for packing and unpacking \nPSARC files, and the integration of the song scanner into the song list module. This\nmeans rsrtools can now operate in stand alone mode. This also allows improved \npath (lead/rhythm/bass) filters for song list creation.\n\n**0.2.0**  As of version \n`2.1.3 <https://github.com/sandiz/rs-manager/releases/tag/v2.1.3>`_,  \nrs-manager integrates rsrtools support out of the box. This means you can install \nrs-manager and rsrtools, and then export set lists/song list directly from rs-manager \ninto your Rocksmith profile.\n\n**0.2.0** This release provides a command line tool for importing song lists/set lists\nexported from `rs-manager <https://github.com/sandiz/rs-manager>`_. With this\nfunctionality, you can take advantage of rs-manager's flexible GUI to generate set lists,\nexport them to file, and then save them to a Rocksmith profile using rsrtools. Unless\nyou have a particular desire to roll your own rsrtools filters, I'd suggest this as \na recommended use case. The documentation below provides further details on importrsm. \n\nWarnings\n========\n\nAs this package is all about editing game saves, here are a couple of warnings.\n\n0. This package is in Beta. I've been using it for more than a year, and\n   it has been robust for my application. However, until this warning disappears,\n   please assume that you are the second ever user and that you will find bugs.   \n   Please report these to me via github issues so I can implement fixes.\n\n1. This package edits Rocksmith profiles. Use at your own risk and with the \n   understanding that this package carries the risk of corrupting your save files\n   (to date it has worked fine for me - YMMV, and it will definitely stop working if\n   Ubisoft make any changes to the Rocksmith save file format). However, the package\n   includes many self checks and tries to make backups of profiles before making\n   changes, so the risk of profile loss or corruption should be low.\n\n2. This package is (obviously) not endorsed by Ubisoft - if you use this package and run\n   into problems with your save files, Ubisoft will not be very interested in helping\n   you. If this happens, I will try to help, but will be limited by my available time\n   and the complexity of your problem. So, in effect repeating the previous warning: use\n   this package at your own risk.\n\n3. **Don't run this package at the same time as  Rocksmith is running.** You'll end up \n   crossing the save files and nobody will be happy (mostly you though).\n\n4. This package will only work on Windows and Mac OS X at the moment. I have no idea\n   what would be needed for Linux/PS4/XBox song lists.\n\n\nTL:DNR\n======\n\nIf you know what you are doing with python, here are the recommended quick start steps.\n\nInstallation and Basic Set Up\n------------------------------\n\n0. The package only works on Windows and Mac OS X for now.\n\n1. Install python 3.7.x (I'm on 3.7.3, and you will need some 3.7 features).\n\n2. Create a virtual environment (for easy step by step instructions, see \n   `Installation and Set Up`_). \n\n3. Install rsrtools into your virtual environment with::\n\n    pip install rsrtools\n\n4. Create a working folder/directory.\n\n5. **READ** the section on setting up a test profile (`Set up a Testing Profile!`_). \n   Until you are familiar with the package, this will be your best safeguard against \n   damaging your precious save game(s).\n\n6. **SET UP** a Rocksmith test profile. Open Rocksmith, create a new profile named e.g.\n   'Testing', and run through the profile set up (unavoidable).\n\n7. Optional, but highly recommended: **Clone your save game into the test profile** and\n   do all of your testing on this test profile until you are comfortable that the\n   package is working and doing what you want it to do (`Clone Profile`_). The following\n   command provides a short cut for profile cloning::\n\n      profilemanager --clone-profile <path_to_your_working_directory>\n\n   Profile cloning is destructive - make sure you get your source and your target\n   correct! \n\nRunning importrsm from rs-manager\n----------------------------------\n\nGo to settings and check that the path to importrsm is correct. After that, you should\nbe able to use the rs-manager export buttons to save set lists/song lists to a Rocksmith\nprofile.\n\nRunning importrsm Stand Alone\n-------------------------------\n\nYou can get help for the rs-manager importer by running either of::\n\n    importrsm -h\n    python3 -m rsrtools.importrsm -h\n\nIf you have two song list JSON files ``faves.json`` and ``newlist1.json`` that you want\nto import into Favorites and song list 3, the following command will get you started::\n\n    importrsm <path_to_your_working_directory> -sl F faves.json -sl 3 newlist1.json\n\nThis will perform basic checks on the JSON files and will prompt you for a Steam \naccount and a Rocksmith profile (remember to use your test profile while you are trying\nthings out!), and finally will ask you to confirm the file write. Most of these steps\ncan be automated and the logging silenced - refer to the help for more details.\n\nUsing rsrtools\n---------------\n\nIf you'd like to use rsrtools filters, the steps are:\n\n1. Start your virtual environment and run the package (with appropriate substitution for\n   ``<path_to_your_working_directory>``)::\n\n        songlists <path_to_your_working_directory>\n\n   Or, if you'd rather not use an entry point::\n\n        python3 -m rsrtools.songlists.songlists <path_to_your_working_directory>\n\n   If you start in the working directory, you could use::\n\n    songlists .\n\n2. Try out the test filters, reports and song lists, and then move on to creating your\n   own in ``config.toml``. Remember to use your test profile!\n\nPython Entry Points\n====================\n\n**New in 0.2.0**. The package supports, and this documents assumes, use of python entry\npoints for the profile manager, the song list creator, and the song list importer.\n\nThis means you can run these tools by specifying an explicit path to the location you\nhave installed them into. For example, for a Windows install to ``D\\RS_Stuff\\Env``, the\ncommands are::\n\n        D:\\RS_Stuff\\Env\\songlists.exe\n        D:\\RS_Stuff\\Env\\profilemanager.exe\n        D:\\RS_Stuff\\Env\\importrsm.exe\n\nOr, for a Mac OS X install to ``~/Documents/RS_Stuff/Env``::\n\n        ~/Documents/RS_Stuff/Env/songlists.exe\n        ~/Documents/RS_Stuff/Env/profilemanager.exe\n        ~/Documents/RS_Stuff/Env/importrsm.exe\n\nIf you'd rather use python directly, or if you don't want to type command paths, you\nwill need to *activate your virtual environment* and use one of the following command\nforms. For Windows::\n\n        py -m rsrtools.songlists.songlists\n        songlists\n        songlists.exe\n\n        py -m rsrtools.files.profilemanager\n        profilemanager\n        profilemanager.exe\n\n        py -m rsrtools.importrsm\n        importrsm\n        importrsm.exe\n\nFor Mac OS X::\n\n        python3 -m rsrtools.songlists.lists\n        songlists\n\n        python3 -m rsrtools.files.profilemanager\n        profilemanager\n\n        python3 -m rsrtools.importrsm\n        importrsm\n\nThe sections on `Installation and Set Up`_, \n`Importing Song Lists Created by rs-manager`_, \nand `Creating Song Lists with rsrtools`_ explain how to set up and activate virtual\nenvironments. \n\nYou can use whichever approach works better for you. The remainder of the document \nassumes environment activation and commands without paths, but in practice, I tend to \nalternate depending on what I'm doing. \n\nMotivation\n==========\n\nHopefully this section doesn't read too much like a food blog.\n\nI've implemented this package because, while I really enjoy Rocksmith 2014 Remastered as\na learning tool, I've had ongoing frustration with creating custom play lists. I \nthought there had to be a better way (and I also wanted a project I could use to learn\npython). My initial goal for this package was to be able to easily create song lists for\na specific tuning and play counts - I break my practice sessions up into new stuff,\nmoderately new and old - and it's a real pain in the backside scrolling through 500 \nodd tracks. And it's also a pain in the backside setting up custom song lists in\nRocksmith. So that's the motivation for this project. During implementation, I realised\nit would be possible to create much more varied song lists (not so useful for me, but\nmaybe so for others).\n\nIntroduction\n============\n\nThe purpose of this package is to provide an improved song list creator for Rocksmith.\nThis package allows creation of song lists based on a variety of criteria, and allows\nthe criteria to be built up hierarchically. Here is an incomplete list of the type of \nsong lists you can create with this package.\n\n- All lead arrangements with E Standard tunings (not very exciting).\n\n- All songs with E Standard tunings at 440 pitch (still not exciting).\n\n- All lead D standard 440 songs with a played count between 12 and 18 (getting somewhere\n  now).\n\n- All bass Eb standard 440 songs with a mastery between 40 and 65%.\n\n- All E standard songs that I have played at least once on score attack, but haven't got\n  a platinum badge (yet).\n\n- All easy E Standard songs that I haven't yet got a platinum badge for (OK. So it's a\n  long list for me, but something to work on).\n\n- All rhythm songs with an alternative or bonus arrangement, but no songs that have no\n  alternative or bonus arrangement.\n\nI'm simplifying a bit here, but it gives an idea of the type of thing that this\npackage is intended to do. \n\nCriteria that can be used for song list creation include:\n\n* List criteria:\n\n  - Tuning\n\n  - Path (Lead, Rhythm, Bass)\n\n  - Sub-Path (Representative - the default track for a path, Bonus or Alternative)\n\n  - ArrangementName (Bass, Lead, Lead1, Lead2, Lead3, Rhythm, Rhythm1, Rhythm2, Combo,\n    Combo1, Combo2, Combo3)\n\n  - Song key (typically the unique part of DLC/song file names)\n\n  - ArrangementId (expert functionality)\n\n  - Artist Name\n\n  - Track Title\n\n  - Album Name\n\n* Range criteria:\n\n  - Album Year\n\n  - Pitch (A440 or otherwise)\n\n  - Tempo\n\n  - Note Count\n\n  - Played Count\n\n  - Mastery Peak\n\n  - SA Easy Badges\n\n  - SA Medium Badges\n\n  - SA Hard Badges\n\n  - SA Master Badges\n\n  - Song Length\n\n  - and a few more.\n\nFiltering can be by inclusion or exclusion. A more complicated example would be: all \nE Standard, D Standard and C Standard lead tracks, but nothing by the Foo Fighters or\nGreen Day and nothing in the decade 2000-2010, only tracks I haven't completed a hard\nplatinum score attack, and only tracks I've played at least 4 times. (I can't imagine\nusing this filter myself, but somebody with a grudge against Dave Grohl might care).\n\nIf you want a particular type of song list and can't see how to build it from the help, \nask me and I'll see if I can either come up with a solution or add the needed \nfunctionality.\n\nAlternatives\n============\n\n1. The Customs Forge Song Manager (CFSM) provides a different \n   mechanism for creating song lists based on moving files in and out of directories.\n   My approach provides some of the same functionality, with the following variations:\n\n   - I don't move song files, but rather edit the song lists directly in the Rocksmith\n     profiles/save files.\n\n   - I support building song lists based on data in save files (played counts, score \n     attack performance, mastery, etc.). \n     \n   The CFSM approach is very actively supported, \n   so if you aren't interested in the specific functionality my approach provides, I'd\n   go with their tool, which is available from: http://customsforge.com/.\n\n2. rs-manager (https://github.com/sandiz/rs-manager) is a GUI application that can \n   create set lists manually or from procedural filtering similar to rsrtools. It is a\n   much friendlier way to generate song/set lists than rsrtools. @sandiz, the \n   rs-manager developer, has implemented functionality to run rsrtools from within \n   rs-manager. This process is described below (`rs-manager Song List Export`_), and is\n   likely to be the recommended use case for most people.\n   \n   Alternatively, rs-manager can export set lists in a format that can be used by \n   rsrtools. As of 0.2.0, rsrtools allows loading of these set lists into Rocksmith save\n   files. This allows a work flow where set lists can be generated using the rs-manager\n   GUI and then exported for loading into Rocksmith by rsrtools (bypassing the joys of\n   setting up text filters for rsrtools). This process is a manual version of the \n   process used by rs-manager, so is only of interest to those who want fine grained\n   control of the process.\n\nThat's the Long Intro over. \n\nDocumentation and Tutorial\n==========================\n\nThe documentation provided here is fairly detailed. I've done this on the basis that\na significant portion of users will be interested in using the system, but not \ninterested in the details of the python. Consequently, there is a lot of step by step\ndetail included. If you know your way around python, you should be able to skim through\na lot of the content very quickly (and you can modify the set up to match your own\nenvironment).\n\nThis package provides:\n\n- A command line tool for reading song lists created by rs-manager and writing these \n  song lists into a Rocksmith profile. The work flow for this process is described below.\n\n- A command line tool for creating Rocksmith song lists from a series of filters, and\n  writing the resulting song lists into a Rocksmith profile. The command line work flow\n  is described below.\n\n- A set of routines that can be used to implement a GUI version of the command line\n  tools (I have not implemented a GUI, as the command line is sufficient for my\n  requirements - see the section on `Alternatives`_ for more GUI oriented solutions).\n\nRepeated warning (`Warnings`_): this package is currently only supported on Windows \n(tested on Windows 10) and Mac OS X (tested on High Sierra).\n\nInstallation and Set Up\n========================\n\n* Download and install Python 3.7+ from www.python.org. (I'd recommend 3.7.3, which is \n  what I'm using).\n\n* Create a folder/directory for running rsrtools. For this tutorial, I'm assuming this \n  is: ``D:\\RS_Stuff``, and create an environment sub-directory ``Env`` and a working \n  sub-directory ``Working`` in the rsrtools directory. At the end of this step, my \n  folders are::\n\n       D:\\RS_Stuff\n       D:\\RS_Stuff\\Env\n       D:\\RS_Stuff\\Working\n\n  For a Mac OS X user working in ``~/Documents``, this might look like::\n\n       ~/Documents/RS_Stuff\n       ~/Documents/RS_Stuff/Env\n       ~/Documents/RS_Stuff/Working\n\nI will continue to use these directory paths for the remainder of this document. Please\nadjust your paths to reflect your own set up.\n\n* Set up a python virtual environment for rsrtools and install the package via pip. If\n  you are unfamiliar with python, follow these steps:\n  \n  1. Open a command window (cmd.exe).\n\n  2. Type the following commands. The hashed lines are comments that explain what each\n     command does and can be ignored::\n        \n        # Change paths as required to match your rsrtools directory\n        # Create the environment in D:\\RS_Stuff\\Env\n        python -m venv \"d:\\RS_Stuff\\Env\"\n\n        # Activate the python environment\n        \"d:\\RS_Stuff\\Env\\Scripts\\activate.bat\"\n\n        # install rsrtools and supporting libraries\n        pip install rsrtools\n\n     Or, for a Mac OS X user::\n\n        python3 -m venv ~/Documents/RS_Stuff/Env\n        . ~/Documents/RS_Stuff/Env/scripts/activate\n        pip install rsrtools\n\n  3. Exit the command window.\n\nSet up a Testing Profile!\n===========================\n\nUntil you are confident that this package is working properly, I **strongly** suggest\nyou use a temporary testing Rocksmith profile. I'd also suggest trying all new song list\nimports/filters on the testing profile before applying them to your main profile.\n\nThe process I follow for testing changes before applying them to my main profile is:\n\n- Create the Testing profile (described in this section).\n\n- Clone my profile into the Testing profile. This is very useful if you want to test \n  song lists based on played counts, score attack, mastery, etc. The next section\n  explains how to clone your profile.\n\n- Try out the song list filters/imports on the Testing profile.\n\nThe process for setting up a temporary profile is about as easy as it gets:\n\na. Start Rocksmith.\n\nb. At the Select Profile Menu, click New Profile, name the profile and go through set up\n   (the set up step can't be avoided unfortunately).\n\nClone Profile\n==================\n\n**Optional, but recommended**. Clone data into the Testing profile. If you clone data\nfrom your main profile, you can test out the song list filters/imports before \noverwriting the song lists in your main profile.\n\nI'll assume we are cloning data in the Steam account with description \n``'12345678', (HalfABee [eric])`` and we want to clone the profile \n``'Eric the Half a Bee'`` into ``'Testing'``. This will replace all data in the \nTesting profile.\n\nThere are two ways to access profile cloning. Both require that you activate your python\nenvironment first. As ever, adjust paths to reflect your own set up.\n\n1. From the profile manager command line for Windows::\n\n        Call \"D:\\RS_Stuff\\Env\\Scripts\\Activate.bat\"\n        profilemanager --clone-profile \"D:\\RS_Stuff\\Working\n\n   Or, for Mac OS X::\n\n        . ~/Documents/RS_Stuff/Env/scripts/activate\n        profilemanager --clone-profile ~/Documents/RS_Stuff/Working\n\n   Select Steam account '12345678' for profile cloning.\n\n2. From the songlists command line for Windows::\n\n        Call \"D:\\RS_Stuff\\Env\\Scripts\\Activate.bat\"\n        songlists \"D:\\RS_Stuff\\Working\"\n\n   Or, for Mac OS X::\n\n        . ~/Documents/RS_Stuff/Env/scripts/activate\n        songlists ~/Documents/RS_Stuff/Working\n\n   If this is the first time you have run songlists, you will need to wait for a\n   a scan of your songs to complete (30 seconds to a couple of minutes depending on how\n   many songs you own and the speed of your computer).\n\n   Select the 'Change/select Steam account id' menu option, and then select Steam\n   account '12345678' for profile cloning.\n\n   Select the 'Utilities' option, and then select the 'Clone profile' option. \n\nIn either case, you should now have the profile cloning menu up.\n\n**Make sure you get the next two right**. Cloning destroys data in the profile you are\ncopying to (the target).\n\nSelect the source profile for cloning. For the tutorial, I'm copying **FROM** \n'Eric the Half a Bee'.\n\nSelect the target profile for cloning. For the tutorial, I'm copying **TO** \n'Testing'.\n\nA yes/non confirmation message will pop up. Check that the cloning operation is\ndoing what you expect, and if so choose y.\n\nReturn to the main menu and exit the program. If you are asked, there is no need to save\nconfig changes this time.\n\nNow is a good time to start up Rocksmith and check the Testing profile:\n\n* To see that it still works after cloning.\n\n* To check that the data from your main profile has been copied in correctly.\n\nrs-manager Song List Export\n=============================\n\nThis section describes using `rs-manager <https://github.com/sandiz/rs-manager>`_\nto export a set list/song list directly into a Rocksmith profile. I am expecting this\nwill be the main use case use for most rsrtools users. \n\n0. Install both rsrtools and rs-manager.\n\n1. Start rs-manager.\n\n2. Go to settings and check that the path to importrsm is correct. \n\n3. Go to Set Lists, pick a set list, hit the export button, and follow the prompts\n\nThat's it!\n\nImporting Song Lists Created by rs-manager\n===========================================\n\nThis section explains how to use the importrsm command line program to read\nsong lists created and exported by `rs-manager <https://github.com/sandiz/rs-manager>`_,\nand then write these song lists to a Rocksmith profile.\n\nRepeating an important warning (`Warnings`_): **Don't run this package at the same time\nas  Rocksmith is running.** You'll end up crossing the save files and nobody will be\nhappy (mostly you though).\n\nFor this section, I'll assume you have created a couple of song lists with rs-manager,\nand that the files ``list1.json``, ``list2.json``, ``list3.json`` have been saved to\nyour working directory (and as before this is either ``D:\\RS_Stuff\\Working`` or \n``~/Documents/RS_Stuff/Working``).\n\nRunning the rs-manager importer is straightforward - you need to activate your python\nenvironment and run importrsm with a working directory and a set of command line\noptions. For Windows, this looks like::\n\n        Call \"D:\\RS_Stuff\\Env\\Scripts\\Activate.bat\"\n        importrsm \"D:\\RS_Stuff\\Working\" <options>\n\nOr, for Mac OS X::\n\n        . ~/Documents/RS_Stuff/Env/scripts/activate\n        importrsm ~/Documents/RS_Stuff/Working <options>\n    \nI'll go through each of the options in turn. First up, you can specify one or more song\nlists to import. Each song list is specified as either::\n\n      -sl <destination> <filename>\n      --song-list <destination> <filename>\n\n<destination> is the destination for the song list, and must be F for Favorites or a\nnumber from 1-6 for those song lists, and <filename> is the name of the rs-manager\nsong list/set list file. For example::\n\n    -sl F list2.json -sl 3 list3.json -sl 2 list1.json\n\nwill write the songs in list2.json to Favorites, list3.json to song list 3 and \nlist1.json to song list 2. If you don't supply any additional arguments, importrsm will\nstart an interactive process to select a Steam account and the Rocksmith profile that\nwill be updated with the new song lists.\n\nIf you'd rather not deal with the interactive account process, you can use the following\noptions to specify a Steam account and Rocksmith profile::\n\n    -a <Steam_account_identifier>\n    --account-id <Steam_account_identifier>\n    -p <profile_name>\n    --profile <profile_name>\n\nimportrsm is relatively smart about Steam_account_identifier - this can be an account\nname, and account alias, an 8 digit account id or a 17 digit Steam id. Profile name\nmust the be name as used in Rocksmith.\n\nFinally, you can use ``--silent`` to disable logging and interactive prompts (but then\nyou must provide at least one song list specification and Steam account and Rocksmith\nprofile arguments), and ``--no-check`` to disable checking of song key strings. \n\nFor more details on these options, consult the help for importrsm::\n\n    importrsm -h\n\nCreating Song Lists with rsrtools\n=====================================\n\nThis section explains how to use the songlists command line program to generate\nsong lists from pre-defined filters, and how to write these song lists to a Rocksmith\nprofile. The following sections explain how to set up these filters.\n\nRepeating an important warning (`Warnings`_): **Don't run this package at the same time\nas  Rocksmith is running.** You'll end up crossing the save files and nobody will be\nhappy (mostly you though).\n\nPreliminaries\n-------------\n\n1. Create a working directory that will contain working copies of Rocksmith files, the \n   arrangement database, and the song list configuration file. For this tutorial I will \n   use the folder/directory set up in the previous section::\n\n       D:\\RS_Stuff\\Working\n\n2. Optional, but strongly recommended: Create a temporary/testing profile and clone your\n   main profile into it - see `Set up a Testing Profile!`_ and `Clone Profile`_ for \n   details.\n\n3. Because I'm lazy, at this point I put together a batch file in the working \n   directory. Let's call it 'song_lists.bat' and put the following lines in it::\n\n        echo on\n        Call \"D:\\RS_Stuff\\Env\\Scripts\\Activate.bat\"\n        songlists \"D:\\RS_Stuff\\Working\"\n        Deactivate.bat\n\n   Or, for a Mac OS X user, create a shell script containing::\n\n        . ~/Documents/RS_Stuff/Env/scripts/activate\n        songlists ~/Documents/RS_Stuff/Working\n        deactivate\n\n   You will need to edit your paths to match where you have put your python environment\n   and your working directory.\n\n   When I say run the batch file below, I suggest that you do this initially from a \n   command shell (cmd.exe). This will allow you to see any errors (otherwise if you \n   double click on the batch file, the screen will flash up and close before you have a \n   chance to read anything). Once you are confident everything is working, you can run\n   it with a double click.\n\n4. Run the batch file to set up the default configuration. If this is the first time\n   you have run songlists, you will need to wait 30s to a couple of minutes while it \n   scans your song library. After this, you should see a text menu something like the\n   following::\n\n      Rocksmith song list generator main menu.\n\n          Steam account id:    'not set'\n          Rocksmith profile:   'not set'\n          Reporting to:        Standard output/console\n          Working directory:   D:\\RS_Stuff\\Working\n\n      Please choose from the following options:\n\n        1) Change/select Steam account id. This also clears the profile selection.\n        2) Change/select Rocksmith player profile.\n        3) Toggle the report destination.\n        4) Choose a single filter and create a song list report.\n        5) Choose a song list set and create a song list report.\n        6) Choose a song list set and write the list(s) to Song Lists in the Rocksmith profile.\n        7) Choose a filter and write the resulting song list to Favorites in the Rocksmith profile.\n        8) Utilities (database reports, profile management.)\n        0) Exit program.\n        h) Help.\n\n      Choose>\n\n   All of the text menus and text prompts will ask you to either select a number or \n   select y/n (followed by enter to action).\n\n7. At this menu, you first need to select a Steam account id, so choose 1 to start a\n   text menu for selecting from the available Steam account ids. For this tutorial, our \n   selection options look like this::\n\n      Please select a Steam account id/Rocksmith file set from the following options.\n\n      1) Steam user '12345678', (HalfABee [eric]), most recent Steam login. (Sun Apr 4 15:32:52 2019).\n      0) Do nothing and raise error.\n\n   We get a bit of help here - only one Steam id is available, and it is the user most\n   recently logged into steam with a profile name/alias of HalfABee and a steam account\n   name of eric. So we choose 1 to select user ``12345678``.\n\n   Most people will only have one account id available - if you have more than one, you \n   may need a bit of trial and error to work out which one in is yours. The easiest way\n   to do this is select an id and then check if the Testing profile can be selected\n   (next step). If not, you have the wrong Steam id and need to try another one.\n\n8. After selecting a Steam id, you need to select a user profile for song list creation.\n   Choose 2 to start this process, and then choose a profile ('Testing' for this\n   tutorial). After completing this process, the first two information lines of the \n   song list menu should be similar to::\n\n            Steam account id:    '12345678', (HalfABee [eric]), most recent Steam login.\n            Rocksmith profile:   'Testing'\n\n9. At this point, it's worth saving the changes you have made.\n\n   Select 0 to exit the program.\n\n   You will then be offered the option to save changes to the configuration file. Choose y.\n\n   After this, your working directory should contain the following files and \n   sub-directories::\n\n     ArrangementsGrid.xml    - If you put this file in the working directory.\n     RS_Arrangements.sqlite  - The song list arrangements database.\n     config.toml             - The default configuration file. Heart and brains of the \n                               system. More on this below.\n     song_lists.bat          - If you created it.\n     .\\RS_backup             - Backups of Rocksmith save files will be stored here.\n     .\\RS_update             - Changed save files will be stored here before copying\n                               back to Steam.\n     .\\RS_working            - Save files will be copied from Steam to this folder \n                               before working on them.\n\n   If your working directory doesn't match this, try this step again.\n\n\nGenerating and Saving Song Lists\n-----------------------------------\n\nThe package is now set up with a default configuration, which you can use for some\nbasic testing before creating your own song list filters - or you can skip this step\nand go straight to making your own.\n\nRun the batch file and check that the Steam account id and profile are as expected::\n\n        Steam account id:     '12345678'\n        Rocksmith profile:    'Testing'\n\nExperiment with the reporting options:\n\n- Toggle between reporting to file and console (File reports are saved in the \n  working directory).\n\n- Test out reports on a single filter and on a filter set.\n\nIf you are reporting to the console, you will almost certainly need to scroll up to \nsee the report output, as the song list menu takes up most of the normal console \nwindow.\n\nAlso experiment with the reporting options in the utility sub-menu. These reports \nmay be useful when developing your own filters.\n\nIf you are happy with the reporting, you can try writing one of the default song list \nsets to Rocksmith - either ``\"E Standard\"`` for lead players or ``\"Bass or Rhythm\"``\nfor bass and rhythm players. Before you do this, I would recommend doing a text report\nfor the song list set and checking it looks sensible. And finally, before writing\nto Rocksmith, please remember that this is going to **replace** existing song lists\nin the profile (use a test profile for testing!).\n\nThe default E Standard song list for lead players will create the following song lists:\n\n1. E Standard 440 leads that have been played 0-12 times in Learn a song.\n\n2. E Standard 440 leads that have been played 13-27 times in Learn a song.\n\n3. E Standard 440 leads that have been played 27 or more times in Learn a song.\n\n4. E Standard songs with an off concert pitch (i.e. not A440) that have been played \n   once.\n\n5. E Standard lead tracks that have a bonus or alternative arrangement.\n\n6. All E Standard songs that you have played in easy score attack, but haven't \n   yet got a platinum pick.\n  \nThe bass or rhythm song list set generates a similar set of song lists.\n\nOnce you have written a song list set to Rocksmith, exit the package, open up Rocksmith,\nload the test profile and check the song lists to see if they match expectation (song\nlists 1, 2 or 3 may be empty you if haven't played any songs that match the filter\ncriteria. \n\nIf you are happy with all of this, the next step is to edit ``config.toml`` to \ncreate your own song list filters.\n\nThe Configuration File\n======================\n\nAll song lists are driven by the ``config.toml`` file in the working directory. This \nsection describes the structure of this file. If you end up with major problems with\nthis file, I suggest renaming the problem file and creating a new config file by\nfollowing the set up steps in the tutorial (you can also try contacting me for help).\n\nTOML is somewhat similar to windows .ini files. I've used it because it is a human \nreadable/editable text form that \"just works\" and because python appears to be leaning \ntowards it as a standard for configuration files. It's a bit fiddly to edit \nfor the data structures used in rsrtools, but it's nowhere near as bad as JSON (which\nwas the likely alternative).\n\nUnfortunately, if any of the the TOML is malformed, the song list creator will throw an\nerror and exit.  However, when this happens, you will (hopefully) get an informative \nerror message that will help you track the problem down. And a gotcha - the input is \nvalidated in two stages - some checking when loading, and some checking values when \ncreating the song lists. So your debugging may need to be two stage as well. I'd also\nsuggesting setting up one song list at a time to minimise your pain.\n\nTODO I'm planning to put together some form of primitive filter builder as part of the \nnext round of updates\n\nI suggest that you open and look at ```config.toml``` while reading the rest of this\nsection.\n\nThe configuration file is broken into three sections::\n\n      [settings]\n      ...\n      \n      [filters]\n      ...\n\n      [song_list_sets]\n      ...\n\nNote that correct parenthesis type and double quoting is vital, and ``...`` shows \nsomething I will fill in more detail on later. For this section, text should be typed\nas shown with the exception of text in angle brackets ``<>``, which represents user\ndefined names and input. You should replace both the angle brackets and the guide text \nwith your own text. For example:\n\n- ``\"<filter name>\"`` would become ``\"E Standard\"``.\n- ``\"<value 1>\"`` would become ``\"David Bowie\"``.\n- ``<list field name>`` would become ``Tuning``.\n\nNote that double quoting is typically required where shown -- this provides protection\nfor fields with spaces and non-standard characters. The only fields that do not need\ndouble quoting are ``<list field name>`` and ``<range field name>``\nas these have a limited set of valid values, and none of them contain spaces or special\ncharacters. The values for ``include`` (true or false) and ``ranges`` (numbers) must not\nbe quoted, and the values for ``mode`` (``\"AND\"``, ``\"OR\"``) should be quoted.\n\nSettings\n--------\n\nThe settings section is the simplest of the three, describing the location of the CFSM \nxml file (this will disappear in future), the default Steam account id, the default\nprofile name, and the date of the most recent song dlc scanned::\n\n      [settings]\n      CFSM_file_path: \"D:\\\\RS_Stuff\\\\Working\\\\ArrangementsGrid.xml\"\n      steam_account_id\": \"12345678\"\n      player_profile\": \"Testing\"\n      version = \"x.x.x\"\n      dlc_mtime = 1553292870.944582\n\nVersion is for future functionality.\n\nSong List Sets\n---------------\n\nThe song list sets section is just about this simple as the settings - each song list \nset is a named list containing up to six filter names that will be used to create the \nsong lists in the Rocksmith profile (the next part of this section describes\nfilter definitions). The following example shows the structure::\n\n    [song_list_sets]\n    \"E Standard\" = [ \"E Std Low Plays\", \"E Std Mid Plays\", \"E Std High Plays\", \n        \"E Std Non Concert\", \"\", \"Easy E Std Plat Badge in progress\",]\n    \"Non E Std Tunings\" = [ \"Drop D\", \"Eb Standard\", \"Eb Drop Db\", \"D Standard\", \n        \"D Drop C\", \"Other Tunings\",]\n    Testing = [ \"Artist test\", \"Played Count of 1 to 15\",]\n\nThe song list set names are \"E Standard\", \"Non E Std Tunings\", and \"Testing\". You can\nchoose your own unique names for filter sets when you add them. The \"E Standard\" song \nlist set consists of five unique filters - three filters for E 440 with differing play\ncounts, an E standard non 440, and an easy platinum score attack in progress filter. It\nalso includes \"\" for the fifth filter - this tells the song list creator to leave the \nfifth song list in the profile unchanged.\n\nIn summary, the format of a song list set is::\n\n    \"<set name>\" = [ \"<filter 1>\", \"<filter 2>\", \"<filter 3>\", ... \"<filter 6>\"]\n\nwhere the values in <> are the song list set names, the filter names or empty to skip\na song list (``\"\"``).\n\nThe song list creator will only modify as many song lists as there are filters defined\n(up to six), and will not change any list with \"\" specified for the filter. \nSo the \"Testing\" filter set will only modify song list one and two and will leave lists\n3-6 unchanged.\n\nFilters\n--------\n\nThe filters section consists of a list of named filters, where each named filter is made\nup of the following elements:\n\n- The basic filter definition (one only per filter).\n- One or more sub-filters, which in turn may be either list type or range type.\n\nThe following sections detail these elements.\n\nBasic Filter Definition\n++++++++++++++++++++++++\n\nA basic filter definition has the form::\n\n      [filters.\"<filter name>\"]\n      base = \"<base filter name>\"\n      mode = \"<mode value>\"\n\nThe filter can either have a base filter, in which case the filter criteria will be\napplied to records generated from the base filter, or if base filter is the empty string\n(``\"\"``) the filter will be applied to all records in the arrangements database. \nThat is, the base filter is an optional field that allows building of nested or\nhierarchical filters. \n\nMode must be either ``\"AND\"`` or ``\"OR\"``, and specifies the way that sub-filters will\nbe combined. For ``\"AND\"``, the filter will only return the records that match all of the\nsub-filters, while for ``\"OR\"``, the filter will return all records that match at least\none of the sub-filters (i.e. AND narrows, while OR is inclusive).\n\nList Type Sub-filter\n+++++++++++++++++++++\n\nThe list type sub-filter is of the form::\n\n        [filters.\"<filter name>\".sub_filters.<list field name>]\n        include = <true or false>\n        values = [ \"<value 1>\", \"<value 2>\", ... , \"<value N>\",]\n\n``<list field name>`` must be one of the list type field names::\n\n          SongKey\n          Tuning\n          ArrangementName\n          ArrangementId\n          Artist\n          Title\n          Album\n          Path\n          SubPath\n   \nThe utilities menu includes an option to list all of these field names.\n\nSubPath has three valid values: Representative, Alternative and Bonus.\n\n``include`` must be ``true`` or ``false``. If ``true``, the filter will return the\nrecords for song arrangements whose field value matches any of the values in the list. If \n``false``, the filter will return the records for song arrangements whose field value \ndoes not match any of the values in the list. E.g. if the field name is Artist and \nthe values are \"Queen\" and \"Roxette\", then an include value of true will return only \nsong arrangements by Queen and Roxette. If include is false, then all arrangements\nexcept songs by Queen and Roxette will be returned.\n\nThe list values must match values in the arrangements data and must be double quoted - \nthe easiest way to check on validity is to run the relevant reports in the utilities\nmenu of the song list creator (e.g. Tunings, Arrangement Types, Artists, Album Names\nand Track Titles).\n\n**GOTCHA**: Values must be exact matches on content and case. So \"E Standard\" works,\nbut \"e standard\" doesn't, likewise it must be \"Foo Fighters\", and not \"Foo f\" or \n\"foo fighters\". I may add wild card support at some point in the future if there is\nstrong support for it.\n\nRange Type Sub-filter\n++++++++++++++++++++++\n\nThe range type sub-filter is of the form::\n\n        [filters.\"<filter name>\".sub_filters.<range field name>]\n        include = <true or false>\n        ranges  = [ [<low1>, <high1>], [<low2>, <high2>] ]\n\n``<range field name>`` must be one of the range type field names::\n\n        Pitch\n        Tempo\n        NoteCount\n        Year\n        PlayedCount\n        MasteryPeak\n        SAEasyCount\n        SAMediumCount\n        SAHardCount\n        SAMasterCount\n        SAPlayedCount\n        SAEasyBadges\n        SAMediumBadges\n        SAHardBadges\n        SAMasterBadges\n        SongLength\n\nThe utilities menu includes an option to list all of these field names.\n\nA note of caution: I'm pretty sure the MasteryPeak values are *not quite right*. At the\nmoment, I'm calculating these by multiplying the raw mastery peak value from the player\nprofile by 100. However, this value doesn't quite match the reported value in Rocksmith.\nI can fix this quickly if anybody knows the correct calculation.\n\nSA stands for score attack, SA*Count is the score attack play account at the level, and\nSAPlayedCount is the total score attack play count. \n\nThe SA*Badges values have the following meanings:\n\n- 0 No badge/not played yet. \n- 1 Strike out/three red crosses.\n- 2 Bronze/two red crosses\n- 3 Silver/one red cross\n- 4 Gold\n- 5 Platinum\n\nWhen I set up a badge filter, I'm normally only interested in songs I have played and \nhaven't yet got a a platinum badge for, so I use a range value of  [[1, 4]]. I generally\nfilter zero out, as otherwise the filter returns all un-played arrangements.\n\n``include`` must be ``true`` or ``false``. If ``true``, the filter will return only\nthose song arrangement records that have field values in the ranges specified in the \n``ranges`` list. If false, the filter will return those song arrangement records that\nhave field values that do not appear in any of ranges in the ``ranges`` list.\n\n``ranges`` is a list of numeric low/high value pairs. The only constraint on the values \nis that they must be greater than or equal to zero. Note that the number values are not\ndouble quoted. If you enter a low value that is greater than the high value, the\npackage will assume you have your numbers backward and will swap them silently.\n\nFor example, for a field name of ``PlayedCount`` and ``ranges = [[1,10],[18,19]]`` and\n``include = true``, the filter will return all arrangements with Learn a Song play count\nin the range 1 to 10 or 18 to 19. If ``include`` is ``false``, the filter will\nreturn all arrangements that have a play count that is either: 0, in the range 11 to 17,\nor greater than or equal to 20.\n\nFilter Examples\n---------------\n\nThe following examples taken from the default set of filters illustrate most of the\nfilter features.\n\nFirst up, a filter for songs with (mostly) lead arrangements::\n\n        [filters.\"Lead-ish\"]\n        base = \"\"\n        mode = \"OR\"\n\n        [filters.\"Lead-ish\".sub_filters.Path]\n        include = true\n        values = [ \"Lead\", ]\n\n        [filters.\"Lead-ish\".sub_filters.Title]\n        include = true\n        values = [ \"Should I Stay or Should I Go\", \"Blister in the Sun\",]\n\nThis filter is interpreted as follows:\n\n- The filter is named \"Lead-ish\".\n\n- It does not have a base filter, so it will apply the filter to the entire record set\n  in the arrangement database.\n\n- There are two sub-filters. The first filter includes all arrangements that are on \n  the lead path. The second filter includes the arrangements for two songs: Should I\n  Stay or Should I go by the Clash, and Blister in the Sun by the Violent Femmes.\n\n- The ``\"OR\"`` mode combines the results of the sub-filters. \n\nIn effect, this filter results in the records for all arrangements that are lead type\nalong with the arrangements for the named songs. This filter ensures that I can see all\nlead tracks and the two named tracks, which only have bass and rhythm arrangements, but\nI still want them to appear in my song lists.\n\nThe following filter narrows the lead-ish filter to E Standard tunings::\n\n    [filters.\"E Standard\"]\n    base = \"Lead-ish\"\n    mode = \"AND\"\n\n    [filters.\"E Standard\".sub_filters.Tuning]\n    include = true\n    values = [ \"E Standard\",]\n\nThis nested filter is interpreted as taking the records generated by the \n\"Lead-ish\" filter and keeping only those arrangements with an E Standard tuning.\n\nThe final filter generates a list of E Standard tunings which are off concert pitch \n(i.e. not A440 tunings)::\n\n        [filters.\"E Std Non Concert\"]\n        base = \"E Standard\"\n        mode = \"AND\"\n\n        [filters.\"E Std Non Concert\".sub_filters.Pitch]\n        include = false\n        ranges = [ [ 439.5, 440.5,],]\n\n        [filters.\"E Std Non Concert\".sub_filters.PlayedCount]\n        include = true\n        ranges = [ [ 1.0, 5000.0,],]\n\nThis filter builds on the results of the \"E Standard filter\" by keeping only records\nwhich:\n\n- Have a pitch outside the range 439.5 to 440.5 Hz (``include = false``). That is, this \n  removes all A440 tunings, \n- **AND** (mode = ``\"AND\"``) have a play count between 1 and 5000 (i.e. this removes\n  tracks with a play count of zero - at least if like me, none of your play counts are\n  within any sort of distance of 5000).\n\nNested vs. Flat Filters\n-----------------------\n\nThe examples in the previous section demonstrate how to build up filters using a nested\nor hierarchical approach. \n\nThis nesting capability improves re-usability of filter logic and makes assembling \ncomplex filters quite a lot simpler. (This mechanism could definitely be improved \nfurther still, but hey, it's only a simple play list creator.)\n\nYou can build also build up a complex filters by using multiple sub-filters in a single\nfilter. For example, something close to the nested filters for the off concert pitch \nE Standard arrangements could have been built in with a single filter applying the\nfollowing sub-filters::\n\n        [filters.\"One Step E Std Non Concert\"]\n        base = \"\"\n        mode = \"AND\"\n\n        [filters.\"One Step E Std Non Concert\".sub_filters.Path]\n        include = true\n        values = [ \"Lead\",]\n\n        [filters.\"One Step E Std Non Concert\".sub_filters.Tuning]\n        include = true\n        values = [ \"E Standard\",]        \n\n        [filters.\"One Step E Std Non Concert\".sub_filters.Pitch]\n        include = false\n        ranges = [ [ 439.5, 440.5,],]\n\n        [filters.\"One Step E Std Non Concert\".sub_filters.PlayedCount]\n        include = true\n        ranges = [ [ 1.0, 5000.0,],]\n\n(This is something close, because it's not possible to build a one shot filter like this\nthat also capture the Clash and Violent Femmes arrangements).\n\n\nTo date I have always found the most effective way to build the filters is to \nuse simpler filters based on one or two sub-filters, and then build complexity by \nnesting. (Either way is fine of course, so go with whatever works best for you.)\n\nSomething Went Wrong!\n======================\n\nSomething unexpected has happened with loading a profile in Rocksmith? All is (probably)\nnot lost. Before rsrtools writes files to the Rocksmith Steam folders, it creates a \nzip archive of **all** of the key files associated with the Steam account id. These\nbackups are kept in the working directory under ``RS_backup``.\n\nTo restore a backup, extract the contents of the zip file and copy the contents into\nyour Steam Rocksmith save folder. For most people, this should be in your Steam\ninstall directory under::\n\n    <Steam directory>\\userdata\\<steam_account_id>\\221680\n\n``<steam_account_id>`` is the same Steam account id used in the rsrtools songlists menu.\n\nAs a check, this folder should contain a ``remotecache.vdf`` file and a ``remote``\nsub-directory. The ``remote`` subdirectory should contain a file named \n``LocalProfiles.json`` and one or or more files with names ending in ``_PRFLDB``.\n\nDatabase Structure\n===================\n\nFor those who are interested, the database is structured as two tables, which contain\nsong arrangement data and player performance data. The filters are executed on a join\nof these two tables.\n\nThe string fields are the same fields defined in the `List Type Sub-filter`_ section, \nand the numeric fields are those defined in the `Range Type Sub-filter`_ section.\n\nPackage Caveats\n===============\n\nBe aware that the package currently has a couple of irritating quirks:\n\n- It can't distinguish between the representative (default) arrangement on a path and \n  the alternative/bonus arrangements on that path (i.e. it can't tell which of the leads\n  is the default).\n\n- A related issue. It can't tell which path Rocksmith (OG) combo tracks should be\n  allocated to.\n\nI know how to resolve the issue, but it is waiting on the song scanner implementation. \nThe way I work around this is to play all of the tracks that I want to show up in a \nfilter at least once, and then apply a minimum play count criteria. For my use case, \nthis is mainly an issue for E standard arrangements - I don't tend to worry about this\nfor the alternate tunings.\n\nSidebar: Rocksmith Save File Editing\n======================================\n\nThe primary purpose of this package is to provide facilities for customising Rocksmith \nsong lists. However, along the way I needed to develop classes for opening, editing\nand saving Rocksmith save files (profiles). \n\nIf you are interested in using this functionality, you should start with \nRSProfileManager in profilemanager.py, which is the primary class for managing\nRocksmith profiles and their associated steam *and* Rocksmith metadata. The class\nmethods are currently only documented in their docstrings, although I plan to provide\nmore detail in this document in the future (and I'm happy to answer questions via\ngithub issues).\n\nProfile Editing Examples\n--------------------------\n\nThe best example of a save file editor is importrsm.py - I deliberately structured this\nmodule to act as sample/template for editors using the RSProfileManager class. The \nmain() function is structured as follows:\n\n- Argument parsing.\n\n- Loading and validating data.\n\n- Selecting Steam account and Rocksmith profile.\n\n- Calls to functions that demonstrate the two ways of modifying save data (detailed in\n  the next section).\n\n- Writing updates to the working folder, and then moving the updated files to steam.\n\nThe RSProfileManager class provides two more simple examples of profile editing:\n\n- ``RSProfileManager.cl_edit_action()`` and ``RSProfileManager.set_play_counts()``, \n  which provide a command line mechanism for setting the 'Learn a Song' play counts for\n  one or more song arrangements.\n- ``RSProfileManager.cl_clone_profile()``, which is a command line mechanism for\n  cloning a player data from one profile into another (a destructive copy). \n\n(For a more brutal edit style, command line arrangement id deletion is implemented by:\n``RSProfileManager.cl_edit_action()`` and \n``RSProfileManager.delete_profile_arrangements()``.)\n\nBoth of these routines can be run from the command line. For further details see the\nprofile manager help, which can be obtained from the command line::\n\n    profilemanager -h\n\nThe song list creator also uses the profile manager to obtain player data and to write\nsong lists into player profiles.\n\nAside from importrsm, these methods either a) implement very small changes to save files\nwith a lot of care to maintain Rocksmith formats (see `Notes on Formats`_), or b) \nreplace Rocksmith data with Rocksmith data. Consequently their implementations are\nburied within classes used by the profile manager.\n\nRoll Your Own Editor\n----------------------\n\nIf you want to make more general changes to Rocksmith profiles, you can use the \nmethods::\n\n    RSProfileManager.get_json_subtree()\n    RSProfileManager.set_json_subtree()\n    RSProfileManager.mark_as_dirty()\n\n``importrsm.py`` illustrates how to use these methods in the functions: \n``import_faves_by_replace`` and ``import_song_lists_by_mutable``. To date, this is the\nonly place I have used (and tested) these get/set json routines. As these routines are\nvery simple, I would expect them to work without problem in other applications. However,\ngiven the limited testing, bugs are possible, so please be careful with your save files\n(in case you haven't heard it before - use a Testing profile!). \n\n(If you want a somewhat safer path for changes to Rocksmith save files, please make a\nfeature request on github and we'll see what we can work up. )\n\nI also suggest you review the `Notes on Formats`_ section which discusses how to ensure\nany edits you make conform as closely as possible to the Ubisoft file format (and hence\nmaximise your chances of profile edits loading successfully).\n\nWith those warnings out of the way, onto the approach. The general steps are:\n\n0. Export a profile in JSON format so that you can work out which fields and data\n   you want to work with in your editor. To this end, rsrtools includes a handy profile \n   export feature described in `Exporting Human Readable Profiles`_.\n\n1. Create a profile manager instance (pm), which will need a working directory.\n\n2. Read json data from a profile using::\n\n     pm.get_json_subtree(profile_name, json_path).\n   \n   Keep in mind this may return a mutable (list, dict), in which case, editing the\n   json data is effectively editing the profile data. (My preferred approach is to edit\n   a copy and write the copy back using ``set_json_subtree``). If you do choose to edit\n   a mutable json object, you need to let the profile manager know that you have done\n   this by calling::\n   \n      pm.mark_as_dirty(profile_name)\n\n3. If you are working on new data, a copy of data obtained from get_json_subtree, or a \n   non-mutable value, replace the instance data in the profile manager with the new\n   data by::\n   \n      pm.set_json_subtree(profile_name, json_path, new_values)\n\n   This approach will automatically mark the instance data for profile_name as dirty.\n\n4. Write the files to the update folder (and generate backups along the way)::\n\n      pm.write_files()\n\n5. Move the updated files to the Steam folder::\n\n      pm.move_update_to_steam(steam_account_id)\n \n   Note that it's up to you to ensure that the save files match up with the\n   steam account id (the method doesn't check this).\n\nAnd finally, a brief explanation of json_path: the get/set_subtree methods use a JSON \npath to navigate save data elements in the Rocksmith profile JSON dictionary. A JSON\npath is a list or tuple of the elements used to locate a specific value or subtree in\nthe save data. E.g. the json_path to song list 2 is::\n\n        ('SongListsRoot', 'SongLists', 1)\n\nand the Learn a song play count for Take Me Out is::\n\n      (\"Stats\", \"Songs\", \"AB6880DBE00E6E059A5B8449873BE187\", \"PlayedCount\")\n\n(I grabbed the Take Me Out Arrangement Id of AB6880DBE00E6E059A5B8449873BE187 from\nan rsrtools report.)\n\nExporting Human Readable Profiles\n----------------------------------\n\nIn their raw form, Rocksmith profiles are human readable(-ish) JSON objects. Rocksmith\ncompresses and encrypts these objects before saving the profiles to disk (distinctly\nnot human readable). \n\nrsrtools includes facilities to export the JSON objects as text. The simplest method\nis to do the export from the utilities menu of rsrtools. Alternatively, you can also\nrun a command line tool::\n\n        profilemanager --dump-profile <path_to_your_working_directory>\n\nThis tool will ask you to select a steam account and a Rocksmith profile and then\nwill export the profile data into the working directory as '<profile_name>.json'.\n\nNotes on formats\n------------------\n\nAs a general principle, I recommend using the JSON exported from a save file created by\n**Rocksmith** (and not one created by rsrtools!) as a template for any editing that you\nwant to apply to save files. \n\nThe things that I pay particular attention to are:\n\n- Strings vs values. In particular, integers are sometimes treated as string values, and\n  sometimes treated as numbers with six decimal places. Make sure you follow whatever \n  Rocksmith does!\n- From the checking I've done so far, Rocksmith appears to treat *all* numeric values as\n  real numbers with six decimal digits. I use code on the following lines to ensure\n  integers are presented in this format::\n\n    from decimal import Decimal\n\n    json_6d_value = Decimal(\n      integer_value\n    ) + Decimal(\"0.000000\")\n\n  This method converts the integer to a Decimal and forces the 6 digit precision used\n  by Rocksmith. You will need to apply a similar approach to convert floats to a \n  6 digit Decimal (I haven't needed to do this yet). \n\n  For an implementation example, see ``set_arrangement_play_count()`` in the \n  ``RSProfileManager`` class.\n\nNote that rsrtools imports all numeric values as Decimal types, and I would recommend\nthat you ensure any edits you apply to numeric values in the JSON dictionary also have\na Decimal type to ensure decimal precision is maintained in the profile (rsrtools\nimplements this via the simplejson library, which has handles for Decimal objects).\n\nPSARC Handling\n================\n\nThe entry point executable welder(.exe) supports the following PSARC functions:\n\n- Extract: extract single or multiple files from a PSARC archive.\n\n- List: List files in a PSARC.\n\n- Pack: Pack the contents of a directory into a PSARC file.\n\n- Unpack: Unpack a PSARC.\n\n- Verify: Verify a PSARC.\n\nFor further options, run ``welder -h`` (many of the options relate to debugging and \nverification). \n\nIn general, I would recommend using other tools for working with PSARC files (e.g. \nthe Rocksmith Custom Song Tool Kit). I implemented this module to allow scanning of\nPSARC files for metadata and out of curiosity about how the files work. I've done a\nreasonable amount of testing for my purposes, but this is probably insufficient for\nanybody who wants to work on CDLCs. \n\nTODO\n=====\n\n- Remove deprecated CFSM functions.\n\n- Convert major TODO items to issues.\n\n- Add more substantial documentation on profile manager (for Rocksmith file editing),\n  database, and song lists (hooks for GUI implementations).\n\nChangelog\n==========\n\n**1.0.0** First full release based on no issues being reported for a significant period.\nIncludes a minor update to allow underscore and dash characters in importrsm song list\nnames (this addresses a bug identified in\n`rs-manager issue 68 <https://github.com/sandiz/rs-manager/issues/68#issuecomment-604780122>`_).\n\n**0.3.5beta 2019-05-21** Song list filters will now pick up songs that have never\nbeen played (previously a song needed to have been played at least once for the database\nqueries to fire). Fixed spurious detection of new DLC in songlists.\n\n**0.3.0beta 2019-05-21** Welder module for PSARC packing/unpacking. Scanner built into\nsonglists.\n\n**0.2.2beta 2019-05-08** Arrangement deletion cli.\n\n**0.2.1beta 2019-05-05** Minor bug fixes, added profile db path option to importrsm.\n\n**0.2.0beta 2019-05-01** \n\n- Added field reports to song list cli, moved steam.py.\n\n- Fixed a major oversight and added an export profile as json method to profile manager.\n\n- Added a command line importer for song lists/set lists exported from rs-manager.\n\n- Added entry points for profilemanager, songlists and importrsm.\n\n**0.1.2beta 2019-04-26** Mac OS X support added. \n\n**0.1.1beta 2019-04-26** Minor updates to refer to Steam account id and Steam user id \ncorrectly. All Steam support functions moved to steam.py. Some Windows specific Steam\nfunctions removed and replaced with methods based on Steam vdf files.\n\n**0.1.0beta 2019-04-22** First functional beta release for rsrtools. Windows only.\n\n**0.0.1 2019-03-12** Place holder release to lock package name down in pypi.\n\nDevelopment notes\n=================\n\n20190421 Song list creator and database modules functional, first draft of documentation\ncomplete. 0.1 release imminent.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BuongiornoTexas/rsrtools",
    "keywords": "Rocksmith,Songlists",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rsrtools",
    "package_url": "https://pypi.org/project/rsrtools/",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/rsrtools/",
    "project_urls": {
      "Homepage": "https://github.com/BuongiornoTexas/rsrtools"
    },
    "release_url": "https://pypi.org/project/rsrtools/1.0.1/",
    "requires_dist": [
      "pycryptodome (>=3.7.3)",
      "simplejson (>=3.16)",
      "toml (>=0.10.0)",
      "pydantic (>=0.23)"
    ],
    "requires_python": ">=3.7",
    "summary": "Tools for creating Rocksmith 2014 songlists and managing Rocksmith save files",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12500342,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3147b36527efe4fd7c98c4dcd8f60932b2c7d4e07d4f91e8f7d53b8b26b279e5",
          "md5": "e0920b2389201d6073f7ea93ca1d33f1",
          "sha256": "98454345d603b537fb4a9116a5d5ba2fb67536083038b5c9cb5b4eec92f6687d"
        },
        "downloads": -1,
        "filename": "rsrtools-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0920b2389201d6073f7ea93ca1d33f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.6",
        "size": 4700,
        "upload_time": "2019-03-12T09:37:26",
        "upload_time_iso_8601": "2019-03-12T09:37:26.150513Z",
        "url": "https://files.pythonhosted.org/packages/31/47/b36527efe4fd7c98c4dcd8f60932b2c7d4e07d4f91e8f7d53b8b26b279e5/rsrtools-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba54b7e514a3181a00261db0743e6cfb4e4be4eea1f78704b00375dc87eae2d0",
          "md5": "c727227325209d5bfe39be7feee4cd2e",
          "sha256": "2ccb8e6fc2c5ad9f433e14258e9e4299407e925a329b8afe752b9b0412b285bd"
        },
        "downloads": -1,
        "filename": "rsrtools-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c727227325209d5bfe39be7feee4cd2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 4139,
        "upload_time": "2019-03-12T09:37:28",
        "upload_time_iso_8601": "2019-03-12T09:37:28.302190Z",
        "url": "https://files.pythonhosted.org/packages/ba/54/b7e514a3181a00261db0743e6cfb4e4be4eea1f78704b00375dc87eae2d0/rsrtools-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edea04418daf29f17273a88b811cf1769d65ac4b8a4936b452896f824aa9cc1b",
          "md5": "8c7ebbad699063be1b1ae55d79a14697",
          "sha256": "37de7e48ebe86f15a0372c4d628ffca0e7c67b765b591c5c8e57214cdc2f44e6"
        },
        "downloads": -1,
        "filename": "rsrtools-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c7ebbad699063be1b1ae55d79a14697",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 78156,
        "upload_time": "2019-04-22T04:23:11",
        "upload_time_iso_8601": "2019-04-22T04:23:11.236313Z",
        "url": "https://files.pythonhosted.org/packages/ed/ea/04418daf29f17273a88b811cf1769d65ac4b8a4936b452896f824aa9cc1b/rsrtools-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0d0717749747d8504e6e0aad0c7b91f133bb9941377e8dd86fcc944710b0a90",
          "md5": "69bd1d644b81c285973f0d00105cb251",
          "sha256": "45d7e4f74a48976f3beaefe628e90c9cad56ae08131ed758ebd4ed01cd2e457e"
        },
        "downloads": -1,
        "filename": "rsrtools-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69bd1d644b81c285973f0d00105cb251",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 99024,
        "upload_time": "2019-04-22T04:23:13",
        "upload_time_iso_8601": "2019-04-22T04:23:13.942433Z",
        "url": "https://files.pythonhosted.org/packages/a0/d0/717749747d8504e6e0aad0c7b91f133bb9941377e8dd86fcc944710b0a90/rsrtools-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69441b1224f549be794efbfc78e337f89c0705869f911cda44915a97d857d2d7",
          "md5": "da7f9f2f15166113f56eb274060b0484",
          "sha256": "dde63c0ad5e9edcbafd819eb2f6e40778fb60a742f5de54e97626ccef71d32a6"
        },
        "downloads": -1,
        "filename": "rsrtools-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da7f9f2f15166113f56eb274060b0484",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 84534,
        "upload_time": "2019-04-26T05:40:56",
        "upload_time_iso_8601": "2019-04-26T05:40:56.846653Z",
        "url": "https://files.pythonhosted.org/packages/69/44/1b1224f549be794efbfc78e337f89c0705869f911cda44915a97d857d2d7/rsrtools-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05a7cfa25a1f0626e3002d33df6cfe1018f67f80a09062100c6edb6299609aa5",
          "md5": "6635914c7be08ff236dc1e7cd8c32ea9",
          "sha256": "5692b566d6acc08a8fef6c4de5994ae9623a8117ba9fa1c8b7c7333be97c4293"
        },
        "downloads": -1,
        "filename": "rsrtools-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6635914c7be08ff236dc1e7cd8c32ea9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 107489,
        "upload_time": "2019-04-26T05:41:00",
        "upload_time_iso_8601": "2019-04-26T05:41:00.006116Z",
        "url": "https://files.pythonhosted.org/packages/05/a7/cfa25a1f0626e3002d33df6cfe1018f67f80a09062100c6edb6299609aa5/rsrtools-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "302dcb11ce53509928782236675d7664bf0d22838d5f5333a5cb92106d1325c8",
          "md5": "4309386c35ac3385b668070d66da2b64",
          "sha256": "c2b4a5520d36086d098c6581a56a6c500764c12b40184e4e2512df608c0862e4"
        },
        "downloads": -1,
        "filename": "rsrtools-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4309386c35ac3385b668070d66da2b64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 84504,
        "upload_time": "2019-04-26T05:55:22",
        "upload_time_iso_8601": "2019-04-26T05:55:22.895146Z",
        "url": "https://files.pythonhosted.org/packages/30/2d/cb11ce53509928782236675d7664bf0d22838d5f5333a5cb92106d1325c8/rsrtools-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e104d99c66ef68332ac77aae77f66c6f9ecbf98e9ae45c22bc763306d6e567ca",
          "md5": "0b06bd1c1da18826e3089fe202eb4b60",
          "sha256": "ab7b0cb80de1b041398171fa558a999732d7267c7a4e96aef8ca85e19467b216"
        },
        "downloads": -1,
        "filename": "rsrtools-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0b06bd1c1da18826e3089fe202eb4b60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 107385,
        "upload_time": "2019-04-26T05:55:25",
        "upload_time_iso_8601": "2019-04-26T05:55:25.970778Z",
        "url": "https://files.pythonhosted.org/packages/e1/04/d99c66ef68332ac77aae77f66c6f9ecbf98e9ae45c22bc763306d6e567ca/rsrtools-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc474b2a89bdd24ef63c9ec30b8bff65333062b658ab8bf43cd1e09231adce74",
          "md5": "d94ca5cbef549bf90818f9e3bda13ce5",
          "sha256": "604444f998b8e85596749855c040c07ae234a26e955b8dacdfd3150dab7f6129"
        },
        "downloads": -1,
        "filename": "rsrtools-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d94ca5cbef549bf90818f9e3bda13ce5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 95144,
        "upload_time": "2019-05-01T02:50:53",
        "upload_time_iso_8601": "2019-05-01T02:50:53.546497Z",
        "url": "https://files.pythonhosted.org/packages/bc/47/4b2a89bdd24ef63c9ec30b8bff65333062b658ab8bf43cd1e09231adce74/rsrtools-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a27c989cc8c6e77e00b1c9807abb332589356da242ebd3e3c7a4f0214a893fbf",
          "md5": "bcdbc4400ee88501db25e1facb59d962",
          "sha256": "2c921acfff1683246e520198c9e8d40c65c8252fbe46646c49939e33de9fd5d8"
        },
        "downloads": -1,
        "filename": "rsrtools-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bcdbc4400ee88501db25e1facb59d962",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 124185,
        "upload_time": "2019-05-01T02:50:57",
        "upload_time_iso_8601": "2019-05-01T02:50:57.078966Z",
        "url": "https://files.pythonhosted.org/packages/a2/7c/989cc8c6e77e00b1c9807abb332589356da242ebd3e3c7a4f0214a893fbf/rsrtools-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e11fc32ddf29d02bc9d323f0bfb958c58b2d0de38ef20cc875a4b9bfd82dba7",
          "md5": "7c2651191afa040fb5a737a7055cb668",
          "sha256": "7937fb9804755172dc478a2bee6d6dc5ffb26f9f3912227b23ffd7d0ec812749"
        },
        "downloads": -1,
        "filename": "rsrtools-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c2651191afa040fb5a737a7055cb668",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 96980,
        "upload_time": "2019-05-05T00:19:07",
        "upload_time_iso_8601": "2019-05-05T00:19:07.262959Z",
        "url": "https://files.pythonhosted.org/packages/7e/11/fc32ddf29d02bc9d323f0bfb958c58b2d0de38ef20cc875a4b9bfd82dba7/rsrtools-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d569453c7d77c5cf4c91f975afa4482c1fb808879cf2b3b682a4285beefac5f9",
          "md5": "423147d71b1d45aef294a13cba037065",
          "sha256": "387deb799fdce53de40d076ffc233fe7b9b778888c66ca85f5524290107c6574"
        },
        "downloads": -1,
        "filename": "rsrtools-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "423147d71b1d45aef294a13cba037065",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 127333,
        "upload_time": "2019-05-05T00:19:10",
        "upload_time_iso_8601": "2019-05-05T00:19:10.324172Z",
        "url": "https://files.pythonhosted.org/packages/d5/69/453c7d77c5cf4c91f975afa4482c1fb808879cf2b3b682a4285beefac5f9/rsrtools-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fc3e092bc4344f43633b96e6b9c7798fef2119ad9c07fab5e923861fabf20d3",
          "md5": "d1b27e11303cba21383bf2eb9a3c1cd0",
          "sha256": "ab322fa8094ac01863cecf88d1b56f81fa8e636de0fcfbecb4874779f060453d"
        },
        "downloads": -1,
        "filename": "rsrtools-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1b27e11303cba21383bf2eb9a3c1cd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 98620,
        "upload_time": "2019-05-08T04:10:44",
        "upload_time_iso_8601": "2019-05-08T04:10:44.237348Z",
        "url": "https://files.pythonhosted.org/packages/3f/c3/e092bc4344f43633b96e6b9c7798fef2119ad9c07fab5e923861fabf20d3/rsrtools-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb2ae1e14cebf53339e70109d99d657a257fad714780b4aea25e86671fa8a670",
          "md5": "f2926d2e1b708b584e4554e0c86193b4",
          "sha256": "614a6c2fd448ef4ca7846d250a2c9ade246eea707095c1cd882ce4a5302fbd62"
        },
        "downloads": -1,
        "filename": "rsrtools-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f2926d2e1b708b584e4554e0c86193b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 129163,
        "upload_time": "2019-05-08T04:10:47",
        "upload_time_iso_8601": "2019-05-08T04:10:47.304034Z",
        "url": "https://files.pythonhosted.org/packages/cb/2a/e1e14cebf53339e70109d99d657a257fad714780b4aea25e86671fa8a670/rsrtools-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "157c234fa167ce9ab859d86d1f5de984e1cab7b2a1e87498157f0594d8056663",
          "md5": "116a5e3b3fde11a517c02792af586c95",
          "sha256": "304bb400cf311d715a3b7e990e4815d1722480e26e6ed3dee242c023906a0675"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "116a5e3b3fde11a517c02792af586c95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 119597,
        "upload_time": "2019-05-27T01:47:58",
        "upload_time_iso_8601": "2019-05-27T01:47:58.102723Z",
        "url": "https://files.pythonhosted.org/packages/15/7c/234fa167ce9ab859d86d1f5de984e1cab7b2a1e87498157f0594d8056663/rsrtools-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b787e3cd847f4f0bc301caf9c857163095a50a6bf6bf61725cf35b206a20353",
          "md5": "14b31f08c5042b85831c9fe6ea04aa93",
          "sha256": "a456f5373fad95486eeb31580bf086da1c8f939aeaa7488908cb46542b208e10"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "14b31f08c5042b85831c9fe6ea04aa93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 148561,
        "upload_time": "2019-05-27T01:48:01",
        "upload_time_iso_8601": "2019-05-27T01:48:01.925879Z",
        "url": "https://files.pythonhosted.org/packages/5b/78/7e3cd847f4f0bc301caf9c857163095a50a6bf6bf61725cf35b206a20353/rsrtools-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "261b937dde675a43f422ff5a78929e4fd167cd0e99670d33b51a7faf1c584e65",
          "md5": "f85514b5cd9e9893ee3701f51c00db17",
          "sha256": "5cac6b15121bb1e391696baf12ff2a833a20d59301b47a51ea160c0bfd3d0b7f"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f85514b5cd9e9893ee3701f51c00db17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 119801,
        "upload_time": "2019-05-27T09:37:55",
        "upload_time_iso_8601": "2019-05-27T09:37:55.061187Z",
        "url": "https://files.pythonhosted.org/packages/26/1b/937dde675a43f422ff5a78929e4fd167cd0e99670d33b51a7faf1c584e65/rsrtools-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d59ff8cbd390663dc561a71e44d5e5d7da1404f05e750cfed8a8eacec2fd396",
          "md5": "2b133f4bfe8d3b38f32870918a5ed9b9",
          "sha256": "bdb1318b97ca7476d567b58882ed4d9bd051b8ba8c72177059f7bc38154fc6b5"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b133f4bfe8d3b38f32870918a5ed9b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 148765,
        "upload_time": "2019-05-27T09:37:58",
        "upload_time_iso_8601": "2019-05-27T09:37:58.819818Z",
        "url": "https://files.pythonhosted.org/packages/4d/59/ff8cbd390663dc561a71e44d5e5d7da1404f05e750cfed8a8eacec2fd396/rsrtools-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b64ada68222ff7995ad69b78c36fb25da7ead24bc5d51382ef7855ed8b8a59f9",
          "md5": "e2bb3dbc3b403f3d0364648d6d847e17",
          "sha256": "5b43b453838aedd76ef48b767948e1daa14b80f7f28ea8a8d01da00251cf8954"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2bb3dbc3b403f3d0364648d6d847e17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 119817,
        "upload_time": "2019-05-28T23:22:50",
        "upload_time_iso_8601": "2019-05-28T23:22:50.394932Z",
        "url": "https://files.pythonhosted.org/packages/b6/4a/da68222ff7995ad69b78c36fb25da7ead24bc5d51382ef7855ed8b8a59f9/rsrtools-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25d699e675011f44794def97930f005b3fe7908c1d74d47e4c19900f9aa756e1",
          "md5": "94288bb1696dc42fe03aab4d75cc1c10",
          "sha256": "eff271d6f936c61c5c4a6af84c7a0c6cebe16ede76402e265fbe428bbdb84af4"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "94288bb1696dc42fe03aab4d75cc1c10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 148777,
        "upload_time": "2019-05-28T23:22:54",
        "upload_time_iso_8601": "2019-05-28T23:22:54.332732Z",
        "url": "https://files.pythonhosted.org/packages/25/d6/99e675011f44794def97930f005b3fe7908c1d74d47e4c19900f9aa756e1/rsrtools-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c704f3f7a5c317f7d9ba6783e0641b440fed400fe9223d92c97267a767006a0",
          "md5": "d1d9db68a06d228fb2f50e8984b2cff5",
          "sha256": "6bede5a1776c63302b58b3dec2a76bf499695926a718680c48abfb1b40d954ad"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1d9db68a06d228fb2f50e8984b2cff5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 120368,
        "upload_time": "2019-06-10T07:06:01",
        "upload_time_iso_8601": "2019-06-10T07:06:01.900989Z",
        "url": "https://files.pythonhosted.org/packages/0c/70/4f3f7a5c317f7d9ba6783e0641b440fed400fe9223d92c97267a767006a0/rsrtools-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2ab911d2e7f07558efef0efbe3731981c87d6ca4e9538e86389c6ab5249e56c",
          "md5": "7de6776df1cebfe212b118be6739aa03",
          "sha256": "132c0e37628f8c98dea6d9061c6685268376e8b74e63f48b3bdb3d731551ca89"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7de6776df1cebfe212b118be6739aa03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 149659,
        "upload_time": "2019-06-10T07:06:06",
        "upload_time_iso_8601": "2019-06-10T07:06:06.018798Z",
        "url": "https://files.pythonhosted.org/packages/e2/ab/911d2e7f07558efef0efbe3731981c87d6ca4e9538e86389c6ab5249e56c/rsrtools-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50e4c3d325df3a1714eade32cf9f664945ed24241a73c5b96b9649cec996c4ed",
          "md5": "e6b2957ec61fb4fd0a07c86b344f1638",
          "sha256": "64c8eaf822cfabc4aba1082fc63683daabc2b7521ff628cf8f5aa676bf0be446"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6b2957ec61fb4fd0a07c86b344f1638",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 120982,
        "upload_time": "2019-07-01T01:50:41",
        "upload_time_iso_8601": "2019-07-01T01:50:41.562452Z",
        "url": "https://files.pythonhosted.org/packages/50/e4/c3d325df3a1714eade32cf9f664945ed24241a73c5b96b9649cec996c4ed/rsrtools-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "336c15658526c0b5c424ca5159ddbb34e5ffd59fa3e0c7f83cec272814dd174e",
          "md5": "c0dab7bb5964ea0ff0c4988e2896ce91",
          "sha256": "c08f2d17ec8caca53011ac915390d3d8b878553288611d6da3f8d14ee6428497"
        },
        "downloads": -1,
        "filename": "rsrtools-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c0dab7bb5964ea0ff0c4988e2896ce91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 150441,
        "upload_time": "2019-07-01T01:50:45",
        "upload_time_iso_8601": "2019-07-01T01:50:45.345983Z",
        "url": "https://files.pythonhosted.org/packages/33/6c/15658526c0b5c424ca5159ddbb34e5ffd59fa3e0c7f83cec272814dd174e/rsrtools-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15f3c6d8eabbc97381cafbfc9638b3167ea6eb707d6675695b8aa2e1efaa6e65",
          "md5": "6650787e866be6a7875d1f7c6c652051",
          "sha256": "b73b855c07a471a11c57bda531474da0183c844c771ebd2e85c735afaf85c139"
        },
        "downloads": -1,
        "filename": "rsrtools-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6650787e866be6a7875d1f7c6c652051",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 121231,
        "upload_time": "2020-05-16T03:44:49",
        "upload_time_iso_8601": "2020-05-16T03:44:49.858321Z",
        "url": "https://files.pythonhosted.org/packages/15/f3/c6d8eabbc97381cafbfc9638b3167ea6eb707d6675695b8aa2e1efaa6e65/rsrtools-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aea1aece747fc160db076aeaed1c49a7358e1a5013f4996d0f6dea97ff5026a5",
          "md5": "cfeb49a5ddfd8d67ac7a97ffed7024c8",
          "sha256": "8634b8a3c23dd66394573ec6337bd7b3615d759b2febadc6ca792f1e7b72cdb9"
        },
        "downloads": -1,
        "filename": "rsrtools-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cfeb49a5ddfd8d67ac7a97ffed7024c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 151024,
        "upload_time": "2020-05-16T03:44:53",
        "upload_time_iso_8601": "2020-05-16T03:44:53.326429Z",
        "url": "https://files.pythonhosted.org/packages/ae/a1/aece747fc160db076aeaed1c49a7358e1a5013f4996d0f6dea97ff5026a5/rsrtools-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23732fb55fc2a52eefe74f82608c87de049400c848ebf1544fba5c43a69ea89e",
          "md5": "6d7841554ef9f1b52d41b5dfad36a5a5",
          "sha256": "b04c171c38f1e10af64d3f203951fa0102f7a2d4d9dd7dbb6eaf25f3919da46d"
        },
        "downloads": -1,
        "filename": "rsrtools-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d7841554ef9f1b52d41b5dfad36a5a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 122246,
        "upload_time": "2022-01-07T03:34:04",
        "upload_time_iso_8601": "2022-01-07T03:34:04.081865Z",
        "url": "https://files.pythonhosted.org/packages/23/73/2fb55fc2a52eefe74f82608c87de049400c848ebf1544fba5c43a69ea89e/rsrtools-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deefbae734ce2a08a2a16e03da828015c521ca47bd05056317e4c85ccef39804",
          "md5": "9b3ac63a5f94b799d370be725b7a00a0",
          "sha256": "1b77c93f3a88a95200bd838147170d767c616a99436455d95ca738bc95384ff1"
        },
        "downloads": -1,
        "filename": "rsrtools-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9b3ac63a5f94b799d370be725b7a00a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 151399,
        "upload_time": "2022-01-07T03:34:06",
        "upload_time_iso_8601": "2022-01-07T03:34:06.616595Z",
        "url": "https://files.pythonhosted.org/packages/de/ef/bae734ce2a08a2a16e03da828015c521ca47bd05056317e4c85ccef39804/rsrtools-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23732fb55fc2a52eefe74f82608c87de049400c848ebf1544fba5c43a69ea89e",
        "md5": "6d7841554ef9f1b52d41b5dfad36a5a5",
        "sha256": "b04c171c38f1e10af64d3f203951fa0102f7a2d4d9dd7dbb6eaf25f3919da46d"
      },
      "downloads": -1,
      "filename": "rsrtools-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6d7841554ef9f1b52d41b5dfad36a5a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 122246,
      "upload_time": "2022-01-07T03:34:04",
      "upload_time_iso_8601": "2022-01-07T03:34:04.081865Z",
      "url": "https://files.pythonhosted.org/packages/23/73/2fb55fc2a52eefe74f82608c87de049400c848ebf1544fba5c43a69ea89e/rsrtools-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "deefbae734ce2a08a2a16e03da828015c521ca47bd05056317e4c85ccef39804",
        "md5": "9b3ac63a5f94b799d370be725b7a00a0",
        "sha256": "1b77c93f3a88a95200bd838147170d767c616a99436455d95ca738bc95384ff1"
      },
      "downloads": -1,
      "filename": "rsrtools-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9b3ac63a5f94b799d370be725b7a00a0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 151399,
      "upload_time": "2022-01-07T03:34:06",
      "upload_time_iso_8601": "2022-01-07T03:34:06.616595Z",
      "url": "https://files.pythonhosted.org/packages/de/ef/bae734ce2a08a2a16e03da828015c521ca47bd05056317e4c85ccef39804/rsrtools-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}