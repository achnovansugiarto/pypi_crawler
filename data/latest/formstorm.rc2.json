{
  "info": {
    "author": "Travis Dart",
    "author_email": "git@travisdart.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# FormStorm (v1.0.0)\n\nFormStorm is a Python library that easily creates unit tests for Django forms by defining valid/invalid values for each field. All combinations of the fields' predefined values are submitted to the form to validate each field and test for unintended interdependence between fields. In addition to testing single- and multi-field validation, FormStorm can also test single-field uniqueness constraints by double-submitting a valid submission and checking which fields become invalid on the 2nd submission.\n\n## Example:\n\nSuppose we have a form to create a Book object. The book's name is mandatory,\nbut the subtitle is optional. A `FormTest` is created that provides examples \nof valid and invalid values for each field:\n\n\n    from django.forms import ModelForm\n    from formstorm import FormTest, FormElement\n    from django.test import TestCase\n\n\n    class Book(models.Model):\n        title = models.CharField(max_length=100, blank=False, null=False)\n        subtitle = models.CharField(max_length=100, blank=True, default=\"\")\n\n\n    class BookForm(ModelForm):\n        class Meta:\n            model = Book\n            exclude = []\n\n\n    class BookFormTest(FormTest):\n    \tform = BookForm\n    \ttitle = FormElement(\n    \t\tgood = [\"Moby Dick\"],\n    \t\tbad = [None, \"\", \"A\"*101],\n    \t)\n    \tsubtitle = FormElement(\n    \t\tgood = [None, \"\", \"or The Whale\"],\n    \t\tbad = [\"A\"*101]\n    \t)\n\n\n    class BookTestCase(TestCase):\n        def setUp(self):\n            self.theBookFormTest = BookFormTest()\n\n        def test_book_form(self):\n            self.theBookFormTest.run()\n\n\nWhen the `FormTest` runs, the form will be tested with every combination of \neach field's possible values. Namely, the form will be tested with these values:\n\n\n|  title    | subtitle     | result  | \n|-----------|--------------|---------| \n| Moby Dick | \"\"           | Valid   | \n| Moby Dick | None         | Valid   | \n| None      | None         | Invalid | \n| \"\"        | None         | Invalid | \n| AA[...]AA | None         | Invalid | \n| None      | \"\"           | Invalid | \n| \"\"        | \"\"           | Invalid | \n| AA[...]AA | \"\"           | Invalid | \n| Moby Dick | or The Whale | Valid   | \n| None      | or The Whale | Invalid | \n| \"\"        | or The Whale | Invalid | \n| AA[...]AA | or The Whale | Invalid | \n| Moby Dick | AA[...]AA    | Invalid | \n| None      | AA[...]AA    | Invalid | \n| \"\"        | AA[...]AA    | Invalid | \n| AA[...]AA | AA[...]AA    | Invalid | \n\nWithout something like FormStorm, you either have to tediously create test cases\nfor each possible input value, or you have to just trust that the form behaves\nhow you intend it to.\n\n(A runnable implementation of the example above can be found in [tests/minimalapp/](tests/minimalapp/).)\n\n## Advanced Example:\n\nAn example showing how to use different field types can be found in [tests/fstestapp/test.py](tests/fstestapp/test.py).\n\nBasically, all fields work as above, with the exception of ForeignKey and Many2Many fields whose values must be specified with `Q()` objects. Also, example values for multi-valued fields (such as Many2Many) can be created with the `every_combo()` function which returns every combination of the Many2Many options.\n\nValidating multi-field constraints can be tested by specifying the values (as a dictionary) along with the expected results. For example, if the \"title\" and \"subtitle\" fields can't have a combined length greater than 150 characters, we can test this constraint like so:\n\n    additional_values = [\n        ({'title': \"A\"*100, 'subtitle': \"A\"*50}, True),\n        ({'title': \"A\"*50, 'subtitle': \"A\"*100}, True),\n        ({'title': \"A\"*100, 'subtitle': \"A\"*51}, False),\n        ({'title': \"A\"*51, 'subtitle': \"A\"*100}, False),\n    ]\n\n## Install:\n\n    pip install formstorm\n\n## TODO:\n\n\n- End-to-end testing (with Selenium): This is partially implemented, and most of the necessary FormStorm functions have been abstracted. Just need to subclass FormTest and fully implement.\n- Tests for DRF Serializers. \"SerializerStorm\"\n- Set up CI\n- Handle the obscure, \"long tail\" cases by implementing a framework to define tests for any type of constraint (such as multi-column uniqueness constraints). To do this, a \"sub-test\" would define one or more form submissions and the (boolean) result expected. Sub-tests would be combined with each other and with the standard combinatorial mix of good/bad values so that all fields are tested simultaneously.\n\n\nA tentative definition of the sub-tests is below:\n\n    sub_tests = [\n        { # Sub-test 1\n            field_names=[\"field1\",\"field2\",...\"fieldN\"],\n            submissions = [ Each sub-test consists of multilpe submissions.\n                (  # Submission 1 \n                    value1,  # the value for field1\n                    value2,  # the value for field2\n                    ...\n                    valueN,  # the value for fieldN\n                    result,  # the expected result of the submission\n                ),\n                (...), # Submission 2\n                ...\n                (...)  # Submission N\n            ]\n        },\n        {...}, # Sub-test 2\n        ...\n        {...}  # Sub-test N\n    ]\n\nFor example, suppose a model has two fields that have a multi-column uniqueness constraint:\n\n    class SomeModel(models.Model):\n        field1 = models.TextField()\n        field2 = models.TextField()\n        field3 = models.TextField()\n        ...\n        fieldN = models.TextField()\n\n        class Meta:\n            constraints = [\n                UniqueConstraint(\n                    fields=['field1', 'field2'], name='unique_together'\n                )\n            ] \n\nThe sub-test to test this constraint would be defined like this:\n\n    class SomeModelFormTest(FormTest):\n    \tform = SomeModelForm\n        sub_tests = [\n            {\n                field_names=[\"field1\",\"field2\"],\n                submissions = [\n                    (\"a\",\"a\", True),\n                    (\"a\",\"b\", True),  # Duplicate values in one column are fine\n                    (\"b\",\"a\", True),  # ... as are duplicates in the other column\n                    (\"a\",\"a\", False)  # ... but the same values again should fail\n                ]\n            }\n        ]\n        field3 = FormElement(good=[...], bad=[...])\n        ...\n        fieldN = FormElement(good=[...], bad=[...])\n\nThe advantage of this is that we can define a test only for the fields affected by a constraint, and have values for the other fields supplied by the normal good/bad value tests.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TravisDart/formstorm/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "formstorm",
    "package_url": "https://pypi.org/project/formstorm/",
    "platform": "",
    "project_url": "https://pypi.org/project/formstorm/",
    "project_urls": {
      "Homepage": "https://github.com/TravisDart/formstorm/"
    },
    "release_url": "https://pypi.org/project/formstorm/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "FormStorm is a library that easily creates unit tests for Django forms.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7710923,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2933ab9f1119370fa20244150f7569147bb6af9424ebc6d354d211389c69fde7",
          "md5": "04a2fef99d9c976b486ecf42beba8b2f",
          "sha256": "250ff746bb9012b98e4547344e00e2ac66bf3472106a3e61e9022d4f971b6ec3"
        },
        "downloads": -1,
        "filename": "formstorm-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04a2fef99d9c976b486ecf42beba8b2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8313,
        "upload_time": "2020-07-16T03:24:41",
        "upload_time_iso_8601": "2020-07-16T03:24:41.176549Z",
        "url": "https://files.pythonhosted.org/packages/29/33/ab9f1119370fa20244150f7569147bb6af9424ebc6d354d211389c69fde7/formstorm-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b73517057824706c740580636efd88d16c857a746baba7e9b0fe8c79a309165d",
          "md5": "ceaac7621bb7a11997d1668d60e05f21",
          "sha256": "4572135af9f46b344a2436dad52028bf9a3236cbefe58b88a5eca5e27659290c"
        },
        "downloads": -1,
        "filename": "formstorm-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ceaac7621bb7a11997d1668d60e05f21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8089,
        "upload_time": "2020-07-16T03:24:47",
        "upload_time_iso_8601": "2020-07-16T03:24:47.753665Z",
        "url": "https://files.pythonhosted.org/packages/b7/35/17057824706c740580636efd88d16c857a746baba7e9b0fe8c79a309165d/formstorm-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0e04a3191cba9fec52d4b8345794d47d1f69cd21a9790b9665ac7fe96e0cc52",
          "md5": "d9e21d92173191da81be7453d14d6ac9",
          "sha256": "7f6f3d805ff51fd4a5f596874116d8dcfc7b09095f237d27bf5382cbd4668466"
        },
        "downloads": -1,
        "filename": "formstorm-1.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "d9e21d92173191da81be7453d14d6ac9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4625,
        "upload_time": "2018-08-20T04:21:15",
        "upload_time_iso_8601": "2018-08-20T04:21:15.130590Z",
        "url": "https://files.pythonhosted.org/packages/d0/e0/4a3191cba9fec52d4b8345794d47d1f69cd21a9790b9665ac7fe96e0cc52/formstorm-1.0.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2933ab9f1119370fa20244150f7569147bb6af9424ebc6d354d211389c69fde7",
        "md5": "04a2fef99d9c976b486ecf42beba8b2f",
        "sha256": "250ff746bb9012b98e4547344e00e2ac66bf3472106a3e61e9022d4f971b6ec3"
      },
      "downloads": -1,
      "filename": "formstorm-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "04a2fef99d9c976b486ecf42beba8b2f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8313,
      "upload_time": "2020-07-16T03:24:41",
      "upload_time_iso_8601": "2020-07-16T03:24:41.176549Z",
      "url": "https://files.pythonhosted.org/packages/29/33/ab9f1119370fa20244150f7569147bb6af9424ebc6d354d211389c69fde7/formstorm-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b73517057824706c740580636efd88d16c857a746baba7e9b0fe8c79a309165d",
        "md5": "ceaac7621bb7a11997d1668d60e05f21",
        "sha256": "4572135af9f46b344a2436dad52028bf9a3236cbefe58b88a5eca5e27659290c"
      },
      "downloads": -1,
      "filename": "formstorm-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ceaac7621bb7a11997d1668d60e05f21",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8089,
      "upload_time": "2020-07-16T03:24:47",
      "upload_time_iso_8601": "2020-07-16T03:24:47.753665Z",
      "url": "https://files.pythonhosted.org/packages/b7/35/17057824706c740580636efd88d16c857a746baba7e9b0fe8c79a309165d/formstorm-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}