{
  "info": {
    "author": "José Manuel Gómez Soriano",
    "author_email": "jmgomez.soriano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Multivalued BTree\nA multivalued BTree that allows to store several values in the same node.\nThis is based on [Python BTrees 4.10 module](https://pypi.org/project/BTrees/).\n\n# How to use\n\nIt is very easy to use. You only have a MultivaluedBTree() class that has two optional parameters _reverse_ and \n_queue_type_ to define how the elements are extracted with pop(), popitem() or get() methods.\nThis class is thought to implement an ordered queue in a BTree structure that can have several values\nfor each key. Therefore, the assignment operator does not replace the previous value but add a new one\nwhen the tree has already that key. Therefore, if you do:\n\n```python\nfrom multivaluedbtree import MultivaluedBTree\n\ntree = MultivaluedBTree()\ntree['a'] = 1  # Set 1 in the key 'a'\ntree['a'] = 2 # Added 2 to the key 'a'\n```\n\nThe tree will have the list [1, 2] for the key 'a' and its length will be 2.\nThe keys are ordered in increase order, but this order can be changed with _reverse_ parameter.\nBy default, the values in the same key are stored with LIFO (Last In, First Out),\nbut this order can be changed with the _queue_type_ parameter.\n\nExample of use without parameters (keys in incremental order and values in LIFO queues):\n\n```python\nfrom multivaluedbtree import MultivaluedBTree\n\ntree = MultivaluedBTree()\ntree['a'] = 1  # Set 1 in the key 'a'\nr1 = tree['a']  # Gets [1]\ntree['a'] = 2  # Add 2 to the key 'a'\nr2 = tree['a']  # Gets [1, 2]\nlen(tree)  # Returns 2 although it only has 1 key\ntree['b'] = 3  # Set 3 to the key 'b'\nlen(tree)  # Returns 3 although it only has 2 key\ntree['c'] = 4  # Sets 3 to the key 'c'\n# Adds 5 and 6 to the key 'd'\ntree['d'] = 5\ntree['d'] = 6\ntree.values()  # Returns [1, 2, 3]\ntree.values('b', 'c')  # Returns [3, 4]\ntree.values('c', 'd')  # Returns [4, 5, 6]\nr3 = tree.popitem()  # Returns ('a', 2) and remove the item 2 from 'a'\nr4 = tree['a']  # Returns [1]\nr5 = tree.pop('a')  # Returns 1\nr6 = tree.pop('a')  # Raises an KeyError because the key 'a' has no values.\nr7 = tree.pop('a', 10)  # Returns 10 because is the default value if the key 'a' does not exist.\n```\n\nExample with FIFO queues as values:\n\n```python\nfrom multivaluedbtree import MultivaluedBTree, QueueType\n\ntree = MultivaluedBTree(queue_type=QueueType.FIFO)\ntree['a'] = 1\ntree['a'] = 2\ntree['b'] = 3\nr1 = tree['a']  # Returns [2, 1]\nlen(tree)  # Returns 3\nr2 = tree.values()  # Returns [2, 1, 3]\ntree['c'] = 4\ntree['d'] = 5\ntree['d'] = 6\nr3 = tree.values('b', 'c')  # Returns [3, 4]\nr4 = tree.values('c', 'd'), # Returns [4, 6, 5]\nr5 = tree.popitem()  # Returns ('a', 1))\nr6 = tree['a']  # Returns [2]\nr7 = tree.pop('a')  # Returns 2\ntree.pop('a')  # Raises an KeyError because the key 'a' has no values.\ntree.pop('a', 10)  # Returns 10 because is the default value if the key 'a' does not exist.\n```\n\nExample in decremental key order and LIFO queues:\n\n```python\nfrom multivaluedbtree import MultivaluedBTree\n\ntree = MultivaluedBTree(reverse=True)\ntree['a'] = 1\ntree['a'] = 2\ntree['b'] = 3\ntree['c'] = 4\ntree['d'] = 5\ntree['d'] = 6\nr1 = tree['a']  # Returns [1, 2]\nr2 = tree['b']  # Returns [3]\nlen(tree)  # Returns 6\nr3 = tree.values()  # Returns [6, 5, 4, 3, 2, 1]\nr4 = tree.values('b', 'c')  # Returns [4, 3]\nr5 = tree.values('c', 'd')  # Returns [6, 5, 4]\n```\nExample in decremental key order and LIFO queues:\n\n```python\nfrom multivaluedbtree import MultivaluedBTree, QueueType\n\ntree = MultivaluedBTree(reverse=True, queue_type=QueueType.FIFO)\ntree['a'] = 1\ntree['a'] = 2\ntree['b'] = 3\ntree['c'] = 4\ntree['d'] = 5\ntree['d'] = 6\nr1 = tree['a']  # Returns [2, 1]\nr2 = tree['b']  # Returns [3]\nlen(tree)  # Returns 6\nr3 = tree.values()  # Returns [5, 6, 4, 3, 1, 2]\nr4 = tree.values('b', 'c')  # Returns [4, 3]\nr5 = tree.values('c', 'd')  # Returns [5, 6, 4]\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jmgomezsoriano/multivaluedbtree",
    "keywords": "",
    "license": "LGPL2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "multivaluedbtree",
    "package_url": "https://pypi.org/project/multivaluedbtree/",
    "platform": null,
    "project_url": "https://pypi.org/project/multivaluedbtree/",
    "project_urls": {
      "Homepage": "https://github.com/jmgomezsoriano/multivaluedbtree"
    },
    "release_url": "https://pypi.org/project/multivaluedbtree/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A multivalued BTree.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14114758,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d5ede64290e993b5676c27d73378e6fc7e440930823999b4f3aead7c9527416",
          "md5": "45ec4618c0d62bd5f24a6bb6c39cee11",
          "sha256": "35537f85fe8bb2b24f2622ac899b36fabcb3cbe61b24174b76e15affd7deb3ad"
        },
        "downloads": -1,
        "filename": "multivaluedbtree-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "45ec4618c0d62bd5f24a6bb6c39cee11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17073,
        "upload_time": "2022-06-13T12:14:23",
        "upload_time_iso_8601": "2022-06-13T12:14:23.685611Z",
        "url": "https://files.pythonhosted.org/packages/9d/5e/de64290e993b5676c27d73378e6fc7e440930823999b4f3aead7c9527416/multivaluedbtree-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d5ede64290e993b5676c27d73378e6fc7e440930823999b4f3aead7c9527416",
        "md5": "45ec4618c0d62bd5f24a6bb6c39cee11",
        "sha256": "35537f85fe8bb2b24f2622ac899b36fabcb3cbe61b24174b76e15affd7deb3ad"
      },
      "downloads": -1,
      "filename": "multivaluedbtree-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "45ec4618c0d62bd5f24a6bb6c39cee11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17073,
      "upload_time": "2022-06-13T12:14:23",
      "upload_time_iso_8601": "2022-06-13T12:14:23.685611Z",
      "url": "https://files.pythonhosted.org/packages/9d/5e/de64290e993b5676c27d73378e6fc7e440930823999b4f3aead7c9527416/multivaluedbtree-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}