{
  "info": {
    "author": "Lorenzo Giambagli",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![GitHub version](https://badge.fury.io/gh/Jamba15%2FSpectralTools.svg)](https://badge.fury.io/gh/Jamba15%2FSpectralTools)\r\n[![PyPI version](https://badge.fury.io/py/spectraltools.svg)](https://badge.fury.io/py/spectraltools)\r\n\r\n# spectraltools\r\n*spectraltools* is a package for spectral training and analysis of fully connected feedforward NN.<br>\r\nAccording to our test it is well integrated in Tensorflow 2.3 \r\n\r\n## Installation\r\nActivate the environment where the package is to be installed.<br>\r\n```bash\r\n$ pip install spectraltools\r\n```\r\n# Usage\r\n## Spectral layer\r\nThe package contains the spectral fully connected layer that can be imported as follows:\r\n~~~\r\nfrom spectraltools import Spectral\r\n~~~\r\nIt is a representation in the reciprocal space of a fully connected layer.<br>\r\nThe layer can be used inside a Tensorflow model and has three main attributes:\r\n~~~python\r\nfrom spectraltools import Spectral\r\nSpectral(\r\n    units=300,\r\n    activation=None,\r\n    is_base_trainable=True,\r\n    is_diag_start_trainable=False,\r\n    is_diag_end_trainable=True,\r\n    use_bias=False\r\n)\r\n~~~\r\nIt implements the operation: <code> output = activation(dot(input, spectral_kernel) + bias) </code> where \r\n<code>spectral_kernel = dot(base, diag_in) - dot(diag_out, base)</code>.\r\n<code>diag_in</code> and <code>diag_out</code> are the eigenvalues of the adjacency matrix representing the layer and\r\nbase are the nontrivial components of its eigenvectors. `bias` is a bias vector created by the layer \r\n(only applicable if `use_bias` is `True`).\r\n\r\n### Attributes description\r\nIf `is_base_trainable=True` the eigenvectors of the adjacency matrix will be trained. Those are `input_dim x output_dim`\r\ntrainable parameters.<br>\r\nis_diag_start_trainable train the first input_dim eigenvalues of the matrix and is_diag_end_trainable trains the last \r\noutput_dim eigenvalues. The total number of trainable parameters is therefore `input_dim x output_dim + input_dim + output_dim`.\r\nIf only the eigenvalues are trained the number of free parameters drops but the learning still occurs. A \r\nsuboptimal loss minimum is reached but overfitting is less likely to occur. If also eigenvectors are trained the layer\r\nis, from a training point of view, the same as the Dense.<br>\r\n\r\n## Spectral Pruning\r\nThe pruning function should work regardless of the model and of hte topology. It can be called as follows:\r\n```python\r\nfrom spectraltools import spectral_pruning\r\npruned_model = spectral_pruning(model,\r\n                                percentile)\r\n```\r\nmodel: `Sequential` or `Functional` model, employing one or more Spectral layers, that needs to be pruned.\r\npercentile: the percentile (1-100) of nodes that the model should try to prune. The prunable nodes are the one with \r\ntrainable eigenvalues.\r\n\r\n#### Example:\r\n```python\r\nfrom tensorflow.keras.layers import Dense, Input\r\nfrom spectraltools import Spectral\r\n\r\ninputs = Input(shape=(784,))\r\nx = Dense(100, \r\n          activation='relu')(inputs)\r\nx = Spectral(80, \r\n            is_diag_start_trainable=True,\r\n            is_diag_end_trainable=True,\r\n            activation='relu')(x)\r\n```\r\n\r\nIn this case the prunable nodes will be 100 (`is_diag_start_trainable=True`) and 80 (`is_diag_end_trainable=True`)<br>\r\nIf 2 spectral layers are one next to each other the \"end\" eigenvalues of the preceding and the \"start\" fo the following\r\nare both taken into account.\r\nThe function removes, if it can, a certain percentile of the nodes in every spectral layer. At the moment it only prunes \r\nif the Spectral layer is followed or follows a Dense or Spectral layer. The nodes are removed according to the eigenvalues\r\ndistribution which has been empirically and heuristically proven to be an indicator of node relevance inside the network.\r\nIf two or more Spectral layers inbounds on the same layer, their eigenvalues, and therefore their nodes, will NOT be pruned.\r\n\r\n### Spectral Pre-train\r\n\r\nThis function aims at finding the must efficient subnetwork due to random initialization with a pre-training of only \r\nthe eigenvalues inside every spectral layer in the network. *At the moment* all the parameters of the others layers will\r\nNot be modified and therefore every `trainable=True` weight will be trained.<br>\r\nThe function trains only the eigenvalues of every spectral layers according to the fit_dictionary passed. \r\nAfter that an increasing percentile of the nodes is pruned, until the accuracy or the loss has dropped (or risen) \r\nby a max_delta percent.\r\n\r\n```python\r\nfrom spectraltools import spectral_pretrain\r\n\r\npruned_model = spectral_pretrain(model, \r\n                                 fit_dictionary, \r\n                                 eval_dictionary,\r\n                                 max_delta, \r\n                                 compare_with='acc' )\r\n```\r\n`model`: the untrained model to be pruned.<br>\r\n`fit_dictionary`: the dictionary with the arguments to be passed to the `fit` method of the model.<br>\r\n`eval_dictionary`: the dictionary with the arguments to be passed to the `fit` method of the model.<br>\r\n`max_delta`: maximal variation of the given indicator at which break the pruning process.<br>\r\n`compare_with`: indicator to be used: `'loss'` or `'acc'`.<br>\r\n\r\n### Spectral Distillation\r\nThis function realize a two step training procedure. In step 1) a *pre train* using only eigenvalues is done.\r\nAfter that a fixed percentile of network (in terms of nodes) is removed according to the eigenvalues magnitude criteria.<br>\r\nThe step 2) consist, then, in a *full training* of the leftover network, namely employing also eigenvectors. Again, at the moment,\r\nall the parameters of the others layers will Not be modified and therefore every `trainable=True` weight will be trained.\r\n\r\n```python\r\nfrom spectraltools import spectral_distiller\r\n\r\npruned_model = spectral_distiller(model, \r\n                                  fit_dictionary, \r\n                                  percentile=85)\r\n```\r\n\r\n`model`: the untrained model to be pruned.<br>\r\n`fit_dictionary`: the dictionary with the arguments to be passed to the `fit` method of the model.<br>\r\n`percentile`: which percentage of nodes to be removed after the eigenvalue-only training and before the full training\r\nof the leftover network.<br>\r\n\r\n## Contributing\r\n\r\nInterested in contributing? Check out the contributing guidelines. Please note that this project is released with a Code of Conduct. \r\nBy contributing to this project, you agree to abide by its terms.\r\n\r\n## License\r\n\r\n`spectraltools` was created by Lorenzo Giambagli. It is licensed under the terms of the MIT license.\r\n\r\n## Credits\r\n\r\n`spectraltools` was created with [`cookiecutter`] (https://cookiecutter.readthedocs.io/en/latest/) and the `py-pkgs-cookiecutter` [template](https://github.com/py-pkgs/py-pkgs-cookiecutter).\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pypa/sampleproject",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spectraltools",
    "package_url": "https://pypi.org/project/spectraltools/",
    "platform": null,
    "project_url": "https://pypi.org/project/spectraltools/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pypa/sampleproject/issues",
      "Homepage": "https://github.com/pypa/sampleproject"
    },
    "release_url": "https://pypi.org/project/spectraltools/0.4.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Tools for train and prune in the dual space a fully connected layer.",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15142681,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac538fec691e0e029f3f07747bdedb8ec73aa3ccc90c0b0ede83f9bd69831494",
          "md5": "c8dfe9e90fcb71d0e65244ed854a896b",
          "sha256": "b66c0c91aa51b6485c0fcb6ea21746db4cf21917a6a680f3493d5b44aad77760"
        },
        "downloads": -1,
        "filename": "spectraltools-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c8dfe9e90fcb71d0e65244ed854a896b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8613,
        "upload_time": "2022-04-27T14:52:01",
        "upload_time_iso_8601": "2022-04-27T14:52:01.402632Z",
        "url": "https://files.pythonhosted.org/packages/ac/53/8fec691e0e029f3f07747bdedb8ec73aa3ccc90c0b0ede83f9bd69831494/spectraltools-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e09617a6bb8b6d06bbb9d049337f31a911df0d399b51bb98579a58e027da1dc9",
          "md5": "0413885cd30fd0e2002ac383d0e3e3f9",
          "sha256": "8b47fc7041344a8dc8c5568498872436ad773f041082dc10edca3836174f0ec0"
        },
        "downloads": -1,
        "filename": "spectraltools-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0413885cd30fd0e2002ac383d0e3e3f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8606,
        "upload_time": "2022-04-27T14:55:50",
        "upload_time_iso_8601": "2022-04-27T14:55:50.913379Z",
        "url": "https://files.pythonhosted.org/packages/e0/96/17a6bb8b6d06bbb9d049337f31a911df0d399b51bb98579a58e027da1dc9/spectraltools-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "938c0c0af3af698982821a9ac58f5ebe56db220c327c116822b50a0adeb85783",
          "md5": "05b4aee9112cb2a9093ae4c7e1a9c5bc",
          "sha256": "5530560b7871ce90835e85446ddc247b629cd9e4b3c66937bde058d569e06047"
        },
        "downloads": -1,
        "filename": "spectraltools-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "05b4aee9112cb2a9093ae4c7e1a9c5bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8682,
        "upload_time": "2022-05-26T13:17:02",
        "upload_time_iso_8601": "2022-05-26T13:17:02.075725Z",
        "url": "https://files.pythonhosted.org/packages/93/8c/0c0af3af698982821a9ac58f5ebe56db220c327c116822b50a0adeb85783/spectraltools-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f9f9558eb2bdc6639dda92fdb6e72944284a840ecdea0468b223c9bc046894f",
          "md5": "2af257392cac724aa7584e12ef21231d",
          "sha256": "19f389b00dd1fe2b73ece59c4c2e7b60232ce4f2aecfb0c9ac85e2f42c6efaae"
        },
        "downloads": -1,
        "filename": "spectraltools-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2af257392cac724aa7584e12ef21231d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8671,
        "upload_time": "2022-09-19T08:57:22",
        "upload_time_iso_8601": "2022-09-19T08:57:22.605865Z",
        "url": "https://files.pythonhosted.org/packages/1f/9f/9558eb2bdc6639dda92fdb6e72944284a840ecdea0468b223c9bc046894f/spectraltools-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0bf3bc15a3b7dedd2ad28b4cc5c9836f3151cf9a7a7f6b118b2d0322e4d9806",
          "md5": "110704922a5c2dec7eefca1befcd1f23",
          "sha256": "80af55a46e80062d969c4bb55c327df6bc250f319ba021ca87deed197ea73a0f"
        },
        "downloads": -1,
        "filename": "spectraltools-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "110704922a5c2dec7eefca1befcd1f23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10999,
        "upload_time": "2022-09-19T12:07:40",
        "upload_time_iso_8601": "2022-09-19T12:07:40.611470Z",
        "url": "https://files.pythonhosted.org/packages/c0/bf/3bc15a3b7dedd2ad28b4cc5c9836f3151cf9a7a7f6b118b2d0322e4d9806/spectraltools-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0bf3bc15a3b7dedd2ad28b4cc5c9836f3151cf9a7a7f6b118b2d0322e4d9806",
        "md5": "110704922a5c2dec7eefca1befcd1f23",
        "sha256": "80af55a46e80062d969c4bb55c327df6bc250f319ba021ca87deed197ea73a0f"
      },
      "downloads": -1,
      "filename": "spectraltools-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "110704922a5c2dec7eefca1befcd1f23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10999,
      "upload_time": "2022-09-19T12:07:40",
      "upload_time_iso_8601": "2022-09-19T12:07:40.611470Z",
      "url": "https://files.pythonhosted.org/packages/c0/bf/3bc15a3b7dedd2ad28b4cc5c9836f3151cf9a7a7f6b118b2d0322e4d9806/spectraltools-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}