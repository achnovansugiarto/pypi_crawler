{
  "info": {
    "author": "Ajitomi Daisuke",
    "author_email": "dajiaji@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python CWT - A Python implementation of CWT/COSE\n\n[![PyPI version](https://badge.fury.io/py/cwt.svg)](https://badge.fury.io/py/cwt)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/cwt)\n[![Documentation Status](https://readthedocs.org/projects/python-cwt/badge/?version=latest)](https://python-cwt.readthedocs.io/en/latest/?badge=latest)\n![Github CI](https://github.com/dajiaji/python-cwt/actions/workflows/python-package.yml/badge.svg)\n[![codecov](https://codecov.io/gh/dajiaji/python-cwt/branch/main/graph/badge.svg?token=QN8GXEYEP3)](https://codecov.io/gh/dajiaji/python-cwt)\n\n\nPython CWT is a CBOR Web Token (CWT) and CBOR Object Signing and Encryption (COSE)\nimplementation compliant with:\n- [RFC9052: CBOR Object Signing and Encryption (COSE): Structures and Process](https://www.rfc-editor.org/rfc/rfc9052.html)\n- [RFC9053: CBOR Object Signing and Encryption (COSE): Initial Algorithms](https://www.rfc-editor.org/rfc/rfc9053.html)\n- [RFC9338: CBOR Object Signing and Encryption (COSE): Countersignatures](https://www.rfc-editor.org/rfc/rfc9338.html) - experimental\n- [RFC8392: CWT (CBOR Web Token)](https://tools.ietf.org/html/rfc8392)\n- [draft-04: Use of HPKE with COSE](https://www.ietf.org/archive/id/draft-ietf-cose-hpke-04.html) - experimental\n- and related various specifications. See [Referenced Specifications](#referenced-specifications).\n\nIt is designed to make users who already know about [JWS](https://tools.ietf.org/html/rfc7515)/[JWE](https://tools.ietf.org/html/rfc7516)/[JWT](https://tools.ietf.org/html/rfc7519)\nbe able to use it in ease. Little knowledge of [CBOR](https://tools.ietf.org/html/rfc7049)/[COSE](https://tools.ietf.org/html/rfc8152)/[CWT](https://tools.ietf.org/html/rfc8392)\nis required to use it.\n\nYou can install Python CWT with pip:\n\n\n```sh\n$ pip install cwt\n```\n\nAnd then, you can use it as follows:\n\n**COSE API**\n\n```py\nfrom cwt import COSE, COSEKey\n\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\n\n# The sender side:\nsender = COSE.new()\nencoded = sender.encode(\n    b\"Hello world!\",\n    mac_key,\n    protected={\"alg\": \"HS256\"},\n    unprotected={\"kid\": \"01\"},\n)\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, mac_key)\n```\n\n**CWT API**\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\n\n# The sender side:\ntoken = encode({1: \"coaps://as.example\", 2: \"dajiaji\", 7: b\"123\"}, mac_key)\n\n# The recipient side:\ndecoded = decode(token, mac_key)\n# decoded == {1: 'coaps://as.example', 2: 'dajiaji', 7: b'123', 4: 1620088759, 5: 1620085159, 6: 1620085159}\n```\n\nVarious usage examples are shown in this README.\n\nSee [Documentation](https://python-cwt.readthedocs.io/en/stable/) for details of the APIs.\n\n## Index\n\n- [Installation](#installation)\n- [COSE Usage Examples](#cose-usage-examples)\n    - [COSE MAC0](#cose-mac0)\n        - [MAC with HMAC with SHA256](#mac-with-hmac-with-sha256)\n        - [Countersign (MAC0)](#countersign-mac0)\n    - [COSE MAC](#cose-mac)\n        - [Direct Key Distribution](#direct-key-distribution-for-mac)\n        - [Direct Key with KDF](#direct-key-with-kdf-for-mac)\n        - [AES Key Wrap](#aes-key-wrap-for-mac)\n        - [Direct key Agreement](#direct-key-agreement-for-mac)\n        - [Key Agreement with Key Wrap](#key-agreement-with-key-wrap-for-mac)\n        - [Countersign (MAC)](#countersign-mac)\n        - [COSE-HPKE (MAC)](#cose-hpke-mac)\n    - [COSE Encrypt0](#cose-encrypt0)\n        - [Encryption with ChaCha20/Poly1305](#encryption-with-chacha20-poly1305)\n        - [Countersign (Encrypt0)](#countersign-encrypt0)\n        - [COSE-HPKE (Encrypt0)](#cose-hpke-encrypt0)\n    - [COSE Encrypt](#cose-encrypt)\n        - [Direct Key Distribution](#direct-key-distribution-for-encryption)\n        - [Direct Key with KDF](#direct-key-with-kdf-for-encryption)\n        - [AES Key Wrap](#aes-key-wrap-for-encryption)\n        - [Direct key Agreement](#direct-key-agreement-for-encryption)\n        - [Key Agreement with Key Wrap](#key-agreement-with-key-wrap-for-encryption)\n        - [Countersign (Encrypt)](#countersign-encrypt)\n        - [COSE-HPKE (Encrypt)](#cose-hpke-encrypt)\n    - [COSE Signature1](#cose-signature1)\n        - [Sign1 with EC P-256](#sign1-with-ec-p-256)\n        - [Countersign (Sign1)](#countersign-sign1)\n    - [COSE Signature](#cose-signature)\n        - [Sign with EC P-256](#sign-with-ec-p-256)\n        - [Countersign (Sign)](#countersign-sign)\n- [CWT Usage Examples](#cwt-usage-examples)\n    - [MACed CWT](#maced-cwt)\n    - [Signed CWT](#signed-cwt)\n    - [Encrypted CWT](#encrypted-cwt)\n    - [Nested CWT](#nested-cwt)\n    - [CWT with User Settings (e.g., expires\\_in)](#cwt-with-user-settings)\n    - [CWT with User-Defined Claims](#cwt-with-user-defined-claims)\n    - [CWT with PoP Key](#cwt-with-pop-key)\n    - [CWT with Private CA](#cwt-with-private-ca)\n    - [CWT for EUDCC (EU Digital COVID Certificate)](#cwt-for-eudcc-eu-digital-covid-certificate)\n- [API Reference](#api-reference)\n- [Supported CWT Claims](#supported-cwt-claims)\n- [Supported COSE Algorithms](#supported-cose-algorithms)\n- [Referenced Specifications](#referenced-specifications)\n- [Tests](#tests)\n- [Contributing](#contributing)\n\n## Installation\n\nInstall with pip:\n\n```\npip install cwt\n```\n\n## COSE Usage Examples\n\nFollowings are typical and basic examples which encode various types of COSE messages and decode them.\n\nSee [API Reference](https://python-cwt.readthedocs.io/en/stable/api.html#cwt.COSE).\n\n### COSE MAC0\n\n#### MAC with HMAC with SHA256\n\nCreate a COSE MAC0 message, verify and decode it as follows:\n\n```py\nfrom cwt import COSE, COSEKey\n\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\n\n# The sender side:\nsender = COSE.new()\nencoded = sender.encode(\n    b\"Hello world!\",\n    mac_key,\n    protected={\"alg\": \"HS256\"},\n    unprotected={\"kid\": \"01\"},\n)\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, mac_key)\n```\n\nFollowing two samples are other ways of writing the above example.\n\nCBOR object can be used for `protected` and `unprotected` header parameters as follows:\n\n```py\nfrom cwt import COSE, COSEKey\n\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\n\n# The sender side:\nsender = COSE.new()\nencoded = sender.encode(\n    b\"Hello world!\",\n    mac_key,\n    protected={1: 5},\n    unprotected={4: b\"01\"},\n)\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, mac_key)\n```\n\n`alg_auto_inclusion` and `kid_auto_inclusion` can be used to omit to specify `alg` and `kid` header parameters respectively as follows:\n\n```py\nfrom cwt import COSE, COSEKey\n\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\n\n# The sender side:\nsender = COSE.new(alg_auto_inclusion=True, kid_auto_inclusion=True)\nencoded = sender.encode(\n    b\"Hello world!\",\n    mac_key,\n    # protected={\"alg\": \"HS256\"},\n    # unprotected={\"kid\": \"01\"},\n)\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, mac_key)\n```\n\n#### Countersign (MAC0)\n\n`python-cwt` supports [RFC9338: COSE Countersignatures](https://www.rfc-editor.org/rfc/rfc9338.html).\nThe notary below adds a countersignature to a MACed COSE message.\nThe recipinet has to call `counterverify` to verify the countersignature explicitly.\n\n```py\nfrom cwt import COSE, COSEKey, COSEMessage\n\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\n\n# The sender side:\nsender = COSE.new(alg_auto_inclusion=True, kid_auto_inclusion=True)\nencoded = sender.encode(b\"Hello world!\", mac_key)\n\n# The notary side:\nnotary = Signer.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n        \"d\": \"L8JS08VsFZoZxGa9JvzYmCWOwg7zaKcei3KZmYsj7dc\",\n    },\n)\ncountersigned = COSEMessage.loads(encoded).countersign(notary).dumps()\n\n# The recipient side:\npub_key = COSEKey.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n    },\n)\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(countersigned, mac_key)\ntry:\n    sig = COSEMessage.loads(countersigned).counterverify(pub_key)\nexcept Exception as err:\n    pytest.fail(f\"failed to verify: {err}\")\ncountersignature = COSEMessage.from_cose_signature(sig)\nassert countersignature.protected[1] == -8  # alg: \"EdDSA\"\nassert countersignature.unprotected[4] == b\"01\"  # kid: b\"01\"\n```\n\n### COSE MAC\n\n#### Direct Key Distribution for MAC\n\nThe direct key distribution shares a MAC key between the sender and the recipient that is used directly.\nThe follwing example shows the simplest way to make a COSE MAC message, verify and decode it with the direct\nkey distribution method.\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS512\", kid=\"01\")\n\n# The sender side:\nr = Recipient.new(unprotected={\"alg\": \"direct\", \"kid\": mac_key.kid})\n\nsender = COSE.new()\nencoded = sender.encode(b\"Hello world!\", mac_key, protected={\"alg\": \"HS512\"}, recipients=[r])\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, mac_key)\n```\n\n#### Direct Key with KDF for MAC\n\n\n```py\nfrom secrets import token_bytes\nfrom cwt import COSE, COSEKey, Recipient\n\nshared_material = token_bytes(32)\nshared_key = COSEKey.from_symmetric_key(shared_material, kid=\"01\")\n\n# The sender side:\nr = Recipient.new(\n    unprotected={\n        \"alg\": \"direct+HKDF-SHA-256\",\n        \"salt\": \"aabbccddeeffgghh\",\n    },\n    context={\"alg\": \"HS256\"},\n)\nsender = COSE.new(alg_auto_inclusion=True)\nencoded = sender.encode(\n    b\"Hello world!\",\n    shared_key,\n    recipients=[r],\n)\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, shared_key, context={\"alg\": \"HS256\"})\n```\n\n#### AES Key Wrap for MAC\n\nThe AES key wrap algorithm can be used to wrap a MAC key as follows:\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\nenc_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"oct\",\n        \"kid\": \"01\",\n        \"alg\": \"A128KW\",\n        \"k\": \"hJtXIZ2uSN5kbQfbtTNWbg\",  # A shared wrapping key\n    }\n)\n\n# The sender side:\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS512\")\nr = Recipient.new(unprotected={\"alg\": \"A128KW\"}, sender_key=enc_key)\nsender = COSE.new(alg_auto_inclusion=True)\nencoded = sender.encode(b\"Hello world!\", mac_key, recipients=[r])\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, enc_key)\n```\n\n#### Direct Key Agreement for MAC\n\nThe direct key agreement methods can be used to create a shared secret. A KDF (Key Distribution Function) is then\napplied to the shared secret to derive a key to be used to protect the data.\nThe follwing example shows a simple way to make a COSE Encrypt message, verify and decode it with the direct key\nagreement methods.\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\n# The sender side:\n# The following key is provided by the recipient in advance.\npub_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\",\n        \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n    }\n)\nr = Recipient.new(\n    unprotected={\"alg\": \"ECDH-ES+HKDF-256\"},\n    recipient_key=pub_key,\n    context={\"alg\": \"HS256\"},\n)\nsender = COSE.new()\nencoded = sender.encode(\n    b\"Hello world!\",\n    protected={\"alg\": \"HS256\"},\n    recipients=[r],\n)\n\n# The recipient side:\n# The following key is the private key of the above pub_key.\npriv_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"alg\": \"ECDH-ES+HKDF-256\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\",\n        \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n        \"d\": \"r_kHyZ-a06rmxM3yESK84r1otSg-aQcVStkRhA-iCM8\",\n    }\n)\nrecipient = COSE.new()\n# The enc_key will be derived in decode() with priv_key and\n# the sender's public key which is conveyed as the recipient\n# information structure in the COSE Encrypt message (encoded).\nassert b\"Hello world!\" == recipient.decode(encoded, priv_key, context={\"alg\": \"HS256\"})\n```\n\n#### Key Agreement with Key Wrap for MAC\n\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\n# The sender side:\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\")\npub_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"alg\": \"ECDH-ES+A128KW\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\",\n        \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n    }\n)\nr = Recipient.new(\n    unprotected={\"alg\": \"ECDH-ES+A128KW\"},\n    recipient_key=pub_key,\n    context={\"alg\": \"HS256\"},\n)\nsender = COSE.new(alg_auto_inclusion=True)\nencoded = sender.encode(\n    b\"Hello world!\",\n    mac_key,\n    recipients=[r],\n)\n\n# The recipient side:\nrecipient = COSE.new()\npriv_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"alg\": \"ECDH-ES+A128KW\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\",\n        \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n        \"d\": \"r_kHyZ-a06rmxM3yESK84r1otSg-aQcVStkRhA-iCM8\",\n    }\n)\nassert b\"Hello world!\" == recipient.decode(encoded, priv_key, context={\"alg\": \"HS256\"})\n```\n\n#### Countersign (MAC)\n\n`python-cwt` supports [RFC9338: COSE Countersignatures](https://www.rfc-editor.org/rfc/rfc9338.html).\nThe notary below adds a countersignature to a MACed COSE message.\nThe recipinet has to call `counterverify` to verify the countersignature explicitly.\n\n\n```py\nfrom cwt import COSE, COSEKey, COSEMessage, Recipient\n\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\n\n# The sender side:\nr = Recipient.new(unprotected={\"alg\": \"direct\", \"kid\": mac_key.kid})\nsender = COSE.new()\nencoded = sender.encode(b\"Hello world!\", mac_key, protected={\"alg\": \"HS256\"}, recipients=[r])\n\n# The notary side:\nnotary = Signer.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n        \"d\": \"L8JS08VsFZoZxGa9JvzYmCWOwg7zaKcei3KZmYsj7dc\",\n    },\n)\ncountersigned = COSEMessage.loads(encoded).countersign(notary).dumps()\n\n# The recipient side:\npub_key = COSEKey.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n    },\n)\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(countersigned, mac_key)\ntry:\n    sig = COSEMessage.loads(countersigned).counterverify(pub_key)\nexcept Exception as err:\n    pytest.fail(f\"failed to verify: {err}\")\ncountersignature = COSEMessage.from_cose_signature(sig)\nassert countersignature.protected[1] == -8  # alg: \"EdDSA\"\nassert countersignature.unprotected[4] == b\"01\"  # kid: b\"01\"\n```\n\n\n#### COSE-HPKE (MAC)\n\n**Experimental Implementation. DO NOT USE for production.**\n\nCreate a COSE-HPKE MAC message, verify and decode it as follows:\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\n# The sender side:\nmac_key = COSEKey.generate_symmetric_key(alg=\"HS256\")\nrpk = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n    }\n)\nr = Recipient.new(\n    protected={\n        1: -1,  # alg: \"HPKE\"\n    },\n    unprotected={\n        4: b\"01\",  # kid: \"01\"\n        -4: [  # HPKE sender information\n            0x0010,  # kem: DHKEM(P-256, HKDF-SHA256)\n            0x0001,  # kdf: HKDF-SHA256\n            0x0001,  # aead: AES-128-GCM\n        ],\n    },\n    recipient_key=rpk,\n)\nsender = COSE.new()\nencoded = sender.encode(\n    b\"This is the content.\",\n    mac_key,\n    protected={1: 5},  # alg: HS256\n    recipients=[r],\n)\n\n# The recipient side:\nrsk = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n        \"d\": \"V8kgd2ZBRuh2dgyVINBUqpPDr7BOMGcF22CQMIUHtNM\",\n    }\n)\nrecipient = COSE.new()\nassert b\"This is the content.\" == recipient.decode(encoded, rsk)\n```\n\n### COSE Encrypt0\n\n#### Encryption with ChaCha20/Poly1305\n\nCreate a COSE Encrypt0 message and decrypt it as follows:\n\n```py\nfrom cwt import COSE, COSEKey\n\nenc_key = COSEKey.generate_symmetric_key(alg=\"ChaCha20/Poly1305\", kid=\"01\")\n\n# The sender side:\nnonce = enc_key.generate_nonce()\nsender = COSE.new(alg_auto_inclusion=True, kid_auto_inclusion=True)\nencoded = sender.encode(b\"Hello world!\", enc_key, unprotected={5: nonce})\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, enc_key)\n```\n\nThe following sample is another way of writing the above:\n\n```py\nfrom cwt import COSE, COSEKey\n\nenc_key = COSEKey.generate_symmetric_key(alg=\"ChaCha20/Poly1305\", kid=\"01\")\n\n# The sender side:\nnonce = enc_key.generate_nonce()\nsender = COSE.new()\nencoded = sender.encode(\n    b\"Hello world!\",\n    enc_key,\n    protected={\"alg\": \"ChaCha20/Poly1305\"},\n    unprotected={\"kid\": \"01\", \"iv\": nonce},\n)\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, enc_key)\n```\n\n#### Countersign (Encrypt0)\n\n`python-cwt` supports [RFC9338: COSE Countersignatures](https://www.rfc-editor.org/rfc/rfc9338.html).\nThe notary below adds a countersignature to an encrypted COSE message.\nThe recipinet has to call `counterverify` to verify the countersignature explicitly.\n\n```py\nfrom cwt import COSE, COSEKey, COSEMessage\n\nenc_key = COSEKey.generate_symmetric_key(alg=\"ChaCha20/Poly1305\", kid=\"01\")\n\n# The sender side:\nnonce = enc_key.generate_nonce()\nsender = COSE.new(alg_auto_inclusion=True, kid_auto_inclusion=True)\nencoded = sender.encode(b\"Hello world!\", enc_key, unprotected={5: nonce})\n\n# The notary side:\nnotary = Signer.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n        \"d\": \"L8JS08VsFZoZxGa9JvzYmCWOwg7zaKcei3KZmYsj7dc\",\n    },\n)\ncountersigned = COSEMessage.loads(encoded).countersign(notary).dumps()\n\n# The recipient side:\npub_key = COSEKey.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n    },\n)\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(countersigned, enc_key)\ntry:\n    sig = COSEMessage.loads(countersigned).counterverify(pub_key)\nexcept Exception as err:\n    pytest.fail(f\"failed to verify: {err}\")\ncountersignature = COSEMessage.from_cose_signature(sig)\nassert countersignature.protected[1] == -8  # alg: \"EdDSA\"\nassert countersignature.unprotected[4] == b\"01\"  # kid: b\"01\"\n```\n\n#### COSE-HPKE (Encrypt0)\n\n**Experimental Implementation. DO NOT USE for production.**\n\nCreate a COSE-HPKE Encrypt0 message and decrypt it as follows:\n\n```py\nfrom cwt import COSE, COSEKey\n\n# The sender side:\nrpk = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n    }\n)\n\nsender = COSE.new()\nencoded = sender.encode(\n    b\"This is the content.\",\n    rpk,\n    protected={\n        1: -1,  # alg: \"HPKE\"\n    },\n    unprotected={\n        4: b\"01\",  # kid: \"01\"\n        -4: [  # HPKE sender information\n            0x0010,  # kem: DHKEM(P-256, HKDF-SHA256)\n            0x0001,  # kdf: HKDF-SHA256\n            0x0001,  # aead: AES-128-GCM\n        ],\n    },\n)\n\n# The recipient side:\nrsk = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n        \"d\": \"V8kgd2ZBRuh2dgyVINBUqpPDr7BOMGcF22CQMIUHtNM\",\n    }\n)\nrecipient = COSE.new()\nassert b\"This is the content.\" == recipient.decode(encoded, rsk)\n```\n\n### COSE Encrypt\n\n#### Direct Key Distribution for encryption\n\nThe direct key distribution shares a MAC key between the sender and the recipient that is used directly.\nThe follwing example shows the simplest way to make a COSE MAC message, verify and decode it with the direct\nkey distribution method.\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\nenc_key = COSEKey.generate_symmetric_key(alg=\"ChaCha20/Poly1305\", kid=\"01\")\n\n# The sender side:\nnonce = enc_key.generate_nonce()\nr = Recipient.new(unprotected={\"alg\": \"direct\"})\n# r = Recipient.new(unprotected={1: -6}) # is also acceptable.\n\nsender = COSE.new()\nencoded = sender.encode(\n    b\"Hello world!\",\n    enc_key,\n    protected={\"alg\": \"ChaCha20/Poly1305\"},\n    # protected={1: 24},  # is also acceptable.\n    unprotected={\"kid\": enc_key.kid, \"iv\": nonce},\n    # unprotected={4: enc_key.kid, 5: nonce},  # is also acceptable.\n    recipients=[r],\n)\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, enc_key)\n```\n\n#### Direct Key with KDF for encryption\n\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\nshared_material = token_bytes(32)\nshared_key = COSEKey.from_symmetric_key(shared_material, kid=\"01\")\n\n# The sender side:\nr = Recipient.new(\n    unprotected={\n        \"alg\": \"direct+HKDF-SHA-256\",\n        \"salt\": \"aabbccddeeffgghh\",\n    },\n    context={\"alg\": \"A256GCM\"},\n)\nsender = COSE.new(alg_auto_inclusion=True)\nencoded = sender.encode(\n    b\"Hello world!\",\n    shared_key,\n    recipients=[r],\n)\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, shared_key, context={\"alg\": \"A256GCM\"})\n```\n\n#### AES Key Wrap for encryption\n\nThe AES key wrap algorithm can be used to wrap a MAC key as follows:\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\nwrapping_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"oct\",\n        \"alg\": \"A128KW\",\n        \"kid\": \"01\",\n        \"k\": \"hJtXIZ2uSN5kbQfbtTNWbg\",  # A shared wrapping key\n    }\n)\n\n# The sender side:\nenc_key = COSEKey.generate_symmetric_key(alg=\"ChaCha20/Poly1305\")\nr = Recipient.new(\n    unprotected={\"alg\": \"A128KW\"},\n    sender_key=wrapping_key,\n)\nsender = COSE.new(alg_auto_inclusion=True)\nencoded = sender.encode(b\"Hello world!\", key=enc_key, recipients=[r])\n\n# The recipient side:\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, wrapping_key)\n```\n\n#### Direct Key Agreement for encryption\n\nThe direct key agreement methods can be used to create a shared secret. A KDF (Key Distribution Function) is then\napplied to the shared secret to derive a key to be used to protect the data.\nThe follwing example shows a simple way to make a COSE Encrypt message, verify and decode it with the direct key\nagreement methods.\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\n# The sender side:\npub_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\",\n        \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n    }\n)\nr = Recipient.new(\n  unprotected={\"alg\": \"ECDH-ES+HKDF-256\"},\n  recipient_key=pub_key,\n  context={\"alg\": \"A128GCM\"},\n)\nsender = COSE.new(alg_auto_inclusion=True)\nencoded = sender.encode(\n    b\"Hello world!\",\n    recipients=[r],\n)\n\n# The recipient side:\nrecipient = COSE.new()\npriv_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"alg\": \"ECDH-ES+HKDF-256\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\",\n        \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n        \"d\": \"r_kHyZ-a06rmxM3yESK84r1otSg-aQcVStkRhA-iCM8\",\n    }\n)\nassert b\"Hello world!\" == recipient.decode(encoded, priv_key, context={\"alg\": \"A128GCM\"})\n```\n\n#### Key Agreement with Key Wrap for encryption\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\n# The sender side:\nenc_key = COSEKey.generate_symmetric_key(alg=\"A128GCM\")\nnonce = enc_key.generate_nonce()\nr_pub_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"crv\": \"P-256\",\n        \"kid\": \"meriadoc.brandybuck@buckland.example\",\n        \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\",\n        \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n    }\n)\ns_priv_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"crv\": \"P-256\",\n        \"alg\": \"ECDH-SS+A128KW\",\n        \"x\": \"7cvYCcdU22WCwW1tZXR8iuzJLWGcd46xfxO1XJs-SPU\",\n        \"y\": \"DzhJXgz9RI6TseNmwEfLoNVns8UmvONsPzQDop2dKoo\",\n        \"d\": \"Uqr4fay_qYQykwcNCB2efj_NFaQRRQ-6fHZm763jt5w\",\n    }\n)\nr = Recipient.new(\n  unprotected={\"alg\": \"ECDH-SS+A128KW\"},\n  sender_key=s_priv_key,\n  recipient_key=r_pub_key,\n  context={\"alg\": \"A128GCM\"},\n)\nsender = COSE.new(alg_auto_inclusion=True)\nencoded = sender.encode(\n    b\"Hello world!\",\n    key=enc_key,\n    unprotected={5: nonce},\n    recipients=[r],\n)\n\n# The recipient side:\nrecipient = COSE.new()\nr_priv_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"crv\": \"P-256\",\n        \"alg\": \"ECDH-SS+A128KW\",\n        \"kid\": \"meriadoc.brandybuck@buckland.example\",\n        \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\",\n        \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n        \"d\": \"r_kHyZ-a06rmxM3yESK84r1otSg-aQcVStkRhA-iCM8\",\n    }\n)\nassert b\"Hello world!\" == recipient.decode(encoded, r_priv_key, context={\"alg\": \"A128GCM\"})\n```\n\n#### Countersign (Encrypt)\n\n`python-cwt` supports [RFC9338: COSE Countersignatures](https://www.rfc-editor.org/rfc/rfc9338.html).\nThe notary below adds a countersignature to an encrypted COSE message.\nThe recipinet has to call `counterverify` to verify the countersignature explicitly.\n\n```py\nfrom cwt import COSE, COSEKey, COSEMessage, Recipient\n\nenc_key = COSEKey.generate_symmetric_key(alg=\"ChaCha20/Poly1305\", kid=\"01\")\n\n# The sender side:\nnonce = enc_key.generate_nonce()\nr = Recipient.new(unprotected={\"alg\": \"direct\"})\n\nsender = COSE.new()\nencoded = sender.encode(\n    b\"Hello world!\",\n    enc_key,\n    protected={\"alg\": \"ChaCha20/Poly1305\"},\n    unprotected={\"kid\": enc_key.kid, \"iv\": nonce},\n    recipients=[r],\n)\n\n# The notary side:\nnotary = Signer.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n        \"d\": \"L8JS08VsFZoZxGa9JvzYmCWOwg7zaKcei3KZmYsj7dc\",\n    },\n)\ncountersigned = COSEMessage.loads(encoded).countersign(notary).dumps()\n\n# The recipient side:\npub_key = COSEKey.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n    },\n)\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(countersigned, enc_key)\n\ntry:\n    sig = COSEMessage.loads(countersigned).counterverify(pub_key)\nexcept Exception as err:\n    pytest.fail(f\"failed to verify: {err}\")\ncountersignature = COSEMessage.from_cose_signature(sig)\nassert countersignature.protected[1] == -8  # alg: \"EdDSA\"\nassert countersignature.unprotected[4] == b\"01\"  # kid: b\"01\"\n```\n\n#### COSE-HPKE (Encrypt)\n\n**Experimental Implementation. DO NOT USE for production.**\n\nCreate a COSE-HPKE Encrypt message and decrypt it as follows:\n\n```py\nfrom cwt import COSE, COSEKey, Recipient\n\n# The sender side:\nenc_key = COSEKey.generate_symmetric_key(alg=\"A128GCM\")\nrpk = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n    }\n)\nr = Recipient.new(\n    protected={\n        1: -1,  # alg: \"HPKE\"\n    },\n    unprotected={\n        4: b\"01\",  # kid: \"01\"\n        -4: [  # HPKE sender information\n            0x0010,  # kem: DHKEM(P-256, HKDF-SHA256)\n            0x0001,  # kdf: HKDF-SHA256\n            0x0001,  # aead: AES-128-GCM\n        ],\n    },\n    recipient_key=rpk,\n)\nsender = COSE.new()\nencoded = sender.encode(\n    b\"This is the content.\",\n    enc_key,\n    protected={\n        1: 1,  # alg: \"A128GCM\"\n    },\n    recipients=[r],\n)\n\n# The recipient side:\nrsk = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n        \"d\": \"V8kgd2ZBRuh2dgyVINBUqpPDr7BOMGcF22CQMIUHtNM\",\n    }\n)\nrecipient = COSE.new()\nassert b\"This is the content.\" == recipient.decode(encoded, rsk)\n```\n\n### COSE Signature1\n\n#### Sign1 with EC P-256\n\nCreate a COSE Signature1 message, verify and decode it as follows:\n\n```py\nfrom cwt import COSE, COSEKey, Signer\n\n# The sender side:\npriv_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n        \"d\": \"V8kgd2ZBRuh2dgyVINBUqpPDr7BOMGcF22CQMIUHtNM\",\n    }\n)\nsender = COSE.new(alg_auto_inclusion=True, kid_auto_inclusion=True)\nencoded = sender.encode(b\"Hello world!\", priv_key)\n\n# The recipient side:\npub_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n    }\n)\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, pub_key)\n```\n\n#### Countersign (Sign1)\n\n`python-cwt` supports [RFC9338: COSE Countersignatures](https://www.rfc-editor.org/rfc/rfc9338.html).\nThe notary below adds a countersignature to a signed COSE message.\nThe recipinet has to call `counterverify` to verify the countersignature explicitly.\n\n```py\nfrom cwt import COSE, COSEKey, COSEMessage\n\n# The sender side:\npriv_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n        \"d\": \"V8kgd2ZBRuh2dgyVINBUqpPDr7BOMGcF22CQMIUHtNM\",\n    }\n)\nsender = COSE.new(alg_auto_inclusion=True, kid_auto_inclusion=True)\nencoded = sender.encode(b\"Hello world!\", priv_key)\n\n# The notary side:\nnotary = Signer.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n        \"d\": \"L8JS08VsFZoZxGa9JvzYmCWOwg7zaKcei3KZmYsj7dc\",\n    },\n)\ncountersigned = COSEMessage.loads(encoded).countersign(notary).dumps()\n\n# The recipient side:\npub_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n    }\n)\nnotary_pub_key = COSEKey.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n    },\n)\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(countersigned, pub_key)\ntry:\n    sig = COSEMessage.loads(countersigned).counterverify(notary_pub_key)\nexcept Exception as err:\n    pytest.fail(f\"failed to verify: {err}\")\ncountersignature = COSEMessage.from_cose_signature(sig)\nassert countersignature.protected[1] == -8  # alg: \"EdDSA\"\nassert countersignature.unprotected[4] == b\"01\"  # kid: b\"01\"\n```\n\n### COSE Signature\n\n#### Sign with EC P-256\n\nCreate a COSE Signature message, verify and decode it as follows:\n\n```py\nfrom cwt import COSE, COSEKey, Signer\n\n# The sender side:\nsigner = Signer.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n        \"d\": \"V8kgd2ZBRuh2dgyVINBUqpPDr7BOMGcF22CQMIUHtNM\",\n    },\n)\nsender = COSE.new()\nencoded = sender.encode(b\"Hello world!\", signers=[signer])\n\n# The recipient side:\nrecipient = COSE.new()\npub_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n    }\n)\nassert b\"Hello world!\" == recipient.decode(encoded, pub_key)\n```\n\n#### Countersign (Sign)\n\n`python-cwt` supports [RFC9338: COSE Countersignatures](https://www.rfc-editor.org/rfc/rfc9338.html).\nThe notary below adds a countersignature to a signed COSE message.\nThe recipinet has to call `counterverify` to verify the countersignature explicitly.\n\n```py\nfrom cwt import COSE, COSEKey, COSEMessage, Signer\n\n# The sender side:\nsigner = Signer.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n        \"d\": \"V8kgd2ZBRuh2dgyVINBUqpPDr7BOMGcF22CQMIUHtNM\",\n    },\n)\nsender = COSE.new()\nencoded = sender.encode(b\"Hello world!\", signers=[signer])\n\n# The notary side:\nnotary = Signer.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n        \"d\": \"L8JS08VsFZoZxGa9JvzYmCWOwg7zaKcei3KZmYsj7dc\",\n    },\n)\ncountersigned = COSEMessage.loads(encoded).countersign(notary).dumps()\n\n# The recipient side:\npub_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"kid\": \"01\",\n        \"crv\": \"P-256\",\n        \"x\": \"usWxHK2PmfnHKwXPS54m0kTcGJ90UiglWiGahtagnv8\",\n        \"y\": \"IBOL-C3BttVivg-lSreASjpkttcsz-1rb7btKLv8EX4\",\n    }\n)\nnotary_pub_key = COSEKey.from_jwk(\n    {\n        \"kid\": \"01\",\n        \"kty\": \"OKP\",\n        \"crv\": \"Ed25519\",\n        \"alg\": \"EdDSA\",\n        \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n    },\n)\nrecipient = COSE.new()\nassert b\"Hello world!\" == recipient.decode(encoded, pub_key)\n\ntry:\n    sig = COSEMessage.loads(countersigned).counterverify(notary_pub_key)\nexcept Exception as err:\n    pytest.fail(f\"failed to verify: {err}\")\ncountersignature = COSEMessage.from_cose_signature(sig)\nassert countersignature.protected[1] == -8  # alg: \"EdDSA\"\nassert countersignature.unprotected[4] == b\"01\"  # kid: b\"01\"\n```\n\n## CWT Usage Examples\n\nFollowings are typical and basic examples which encode various types of CWTs, verify and decode them.\n\n[CWT API](https://python-cwt.readthedocs.io/en/stable/api.html) in the examples are built\non top of [COSE API](https://python-cwt.readthedocs.io/en/stable/api.html#cwt.COSE).\n\nSee [API Reference](https://python-cwt.readthedocs.io/en/stable/api.html).\n\n### MACed CWT\n\nCreate a MACed CWT with `HS256`, verify and decode it as follows:\n\n```py\nimport cwt\nfrom cwt import Claims, COSEKey\n\ntry:\n    key = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\n    token = {\"iss\": \"coaps://as.example\", \"sub\": \"dajiaji\", \"cti\": \"123\"}, key)\n    decoded = decode(token, key)\n\n    # If you want to treat the result like a JWT;\n    readable = Claims.new(decoded)\n    assert readable.iss == 'coaps://as.example'\n    assert readable.sub == 'dajiaji'\n    assert readable.cti == '123'\n    # readable.exp == 1620088759\n    # readable.nbf == 1620085159\n    # readable.iat == 1620085159\n\nexcept Exception as err:\n    # All the other examples in this document omit error handling but this CWT library\n    # can throw following errors:\n    #   ValueError: Invalid arguments.\n    #   EncodeError: Failed to encode.\n    #   VerifyError: Failed to verify.\n    #   DecodeError: Failed to decode.\n    print(err)\n```\n\nA raw CWT structure (Dict[int, Any]) can also be used as follows:\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\nkey = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\ntoken = cwt.encode({1: \"coaps://as.example\", 2: \"dajiaji\", 7: b\"123\"}, key)\ndecoded = decode(token, key)\n```\n\nMAC algorithms other than `HS256` are listed in\n[Supported COSE Algorithms](https://python-cwt.readthedocs.io/en/stable/algorithms.html).\n\n### Signed CWT\n\nCreate an `Ed25519` key pair:\n\n```sh\n$ openssl genpkey -algorithm ed25519 -out private_key.pem\n$ openssl pkey -in private_key.pem -pubout -out public_key.pem\n```\n\nCreate a Signed CWT with `Ed25519`, verify and decode it with the key pair as follows:\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\n# The sender side:\nwith open(\"./private_key.pem\") as key_file:\n    private_key = COSEKey.from_pem(key_file.read(), kid=\"01\")\ntoken = encode(\n    {\"iss\": \"coaps://as.example\", \"sub\": \"dajiaji\", \"cti\": \"123\"}, private_key\n)\n\n# The recipient side:\nwith open(\"./public_key.pem\") as key_file:\n    public_key = COSEKey.from_pem(key_file.read(), kid=\"01\")\ndecoded = decode(token, public_key)\n```\n\nJWKs can also be used instead of the PEM-formatted keys as follows:\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\n# The sender side:\nprivate_key = COSEKey.from_jwk({\n    \"kid\": \"01\",\n    \"kty\": \"OKP\",\n    \"key_ops\": [\"sign\"],\n    \"alg\": \"EdDSA\",\n    \"crv\": \"Ed25519\",\n    \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n    \"d\": \"L8JS08VsFZoZxGa9JvzYmCWOwg7zaKcei3KZmYsj7dc\",\n})\ntoken =\n    {\"iss\": \"coaps://as.example\", \"sub\": \"dajiaji\", \"cti\": \"123\"}, private_key\n)\n\n# The recipient side:\npublic_key = COSEKey.from_jwk({\n    \"kid\": \"01\",\n    \"kty\": \"OKP\",\n    \"key_ops\": [\"verify\"],\n    \"crv\": \"Ed25519\",\n    \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n})\ndecoded = decode(token, public_key)\n```\n\nSigning algorithms other than `Ed25519` are listed in\n[Supported COSE Algorithms](https://python-cwt.readthedocs.io/en/stable/algorithms.html).\n\n### Encrypted CWT\n\nCreate an encrypted CWT with `ChaCha20/Poly1305` and decrypt it as follows:\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\nenc_key = COSEKey.generate_symmetric_key(alg=\"ChaCha20/Poly1305\", kid=\"01\")\ntoken = {\"iss\": \"coaps://as.example\", \"sub\": \"dajiaji\", \"cti\": \"123\"}, enc_key)\ndecoded = decode(token, enc_key)\n```\n\nEncryption algorithms other than `ChaCha20/Poly1305` are listed in\n[Supported COSE Algorithms](https://python-cwt.readthedocs.io/en/stable/algorithms.html).\n\n### Nested CWT\n\nCreate a signed CWT and encrypt it, and then decrypt and verify the nested CWT as follows.\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\n# A shared encryption key.\nenc_key = COSEKey.generate_symmetric_key(alg=\"ChaCha20/Poly1305\", kid=\"enc-01\")\n\n# Creates a CWT with ES256 signing.\nwith open(\"./private_key.pem\") as key_file:\n    private_key = COSEKey.from_pem(key_file.read(), kid=\"sig-01\")\ntoken =\n    {\"iss\": \"coaps://as.example\", \"sub\": \"dajiaji\", \"cti\": \"123\"}, private_key\n)\n\n# Encrypts the signed CWT.\nnested = token, enc_key)\n\n# Decrypts and verifies the nested CWT.\nwith open(\"./public_key.pem\") as key_file:\n    public_key = COSEKey.from_pem(key_file.read(), kid=\"sig-01\")\ndecoded = decode(nested, [enc_key, public_key])\n```\n\n### CWT with User Settings\n\nThe `cwt` in `cwt.encode()` and `cwt.decode()` above is a global `CWT` class instance created\nwith default settings in advance. The default settings are as follows:\n- `expires_in`: `3600` seconds. This is the default lifetime in seconds of CWTs.\n- `leeway`: `60` seconds. This is the default leeway in seconds for validating `exp` and `nbf`.\n\nIf you want to change the settings, you can create your own `CWT` class instance as follows:\n\n```py\nfrom cwt import COSEKey, CWT\n\nkey = COSEKey.generate_symmetric_key(alg=\"HS256\", kid=\"01\")\nmycwt = CWT.new(expires_in=3600*24, leeway=10)\ntoken = my{\"iss\": \"coaps://as.example\", \"sub\": \"dajiaji\", \"cti\": \"123\"}, key)\ndecoded = mydecode(token, key)\n```\n\n### CWT with User-Defined Claims\n\nYou can use your own claims as follows:\n\nNote that such user-defined claim's key should be less than -65536.\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\n# The sender side:\nwith open(\"./private_key.pem\") as key_file:\n    private_key = COSEKey.from_pem(key_file.read(), kid=\"01\")\ntoken =\n    {\n        1: \"coaps://as.example\",  # iss\n        2: \"dajiaji\",  # sub\n        7: b\"123\",  # cti\n        -70001: \"foo\",\n        -70002: [\"bar\"],\n        -70003: {\"baz\": \"qux\"},\n        -70004: 123,\n    },\n    private_key,\n)\n\n# The recipient side:\nwith open(\"./public_key.pem\") as key_file:\n    public_key = COSEKey.from_pem(key_file.read(), kid=\"01\")\nraw = decode(token, public_key)\nassert raw[-70001] == \"foo\"\nassert raw[-70002][0] == \"bar\"\nassert raw[-70003][\"baz\"] == \"qux\"\nassert raw[-70004] == 123\n\nreadable = Claims.new(raw)\nassert readable.get(-70001) == \"foo\"\nassert readable.get(-70002)[0] == \"bar\"\nassert readable.get(-70003)[\"baz\"] == \"qux\"\nassert readable.get(-70004) == 123\n```\n\nUser-defined claims can also be used with JSON-based claims as follows:\n\n```py\nimport cwt\nfrom cwt import Claims, COSEKey\n\nwith open(\"./private_key.pem\") as key_file:\n    private_key = COSEKey.from_pem(key_file.read(), kid=\"01\")\n\nmy_claim_names = {\n    \"ext_1\": -70001,\n    \"ext_2\": -70002,\n    \"ext_3\": -70003,\n    \"ext_4\": -70004,\n}\n\nset_private_claim_names(my_claim_names)\ntoken =\n    {\n        \"iss\": \"coaps://as.example\",\n        \"sub\": \"dajiaji\",\n        \"cti\": b\"123\",\n        \"ext_1\": \"foo\",\n        \"ext_2\": [\"bar\"],\n        \"ext_3\": {\"baz\": \"qux\"},\n        \"ext_4\": 123,\n    },\n    private_key,\n)\n\nwith open(\"./public_key.pem\") as key_file:\n    public_key = COSEKey.from_pem(key_file.read(), kid=\"01\")\n\nraw = decode(token, public_key)\nreadable = Claims.new(\n    raw,\n    private_claims_names=my_claim_names,\n)\nassert readable.get(\"ext_1\") == \"foo\"\nassert readable.get(\"ext_2\")[0] == \"bar\"\nassert readable.get(\"ext_3\")[\"baz\"] == \"qux\"\nassert readable.get(\"ext_4\") == 123\n```\n\n\n### CWT with PoP Key\n\nPython CWT supports [Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)](https://tools.ietf.org/html/rfc8747).\nA CWT can include a PoP key as follows:\n\nOn the issuer side:\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\n# Prepares a signing key for CWT in advance.\nwith open(\"./private_key_of_issuer.pem\") as key_file:\n    private_key = COSEKey.from_pem(key_file.read(), kid=\"issuer-01\")\n\n# Sets the PoP key to a CWT for the presenter.\ntoken =\n    {\n        \"iss\": \"coaps://as.example\",\n        \"sub\": \"dajiaji\",\n        \"cti\": \"123\",\n        \"cnf\": {\n            \"jwk\": {  # Provided by the CWT presenter.\n                \"kty\": \"OKP\",\n                \"use\": \"sig\",\n                \"crv\": \"Ed25519\",\n                \"kid\": \"presenter-01\",\n                \"x\": \"2E6dX83gqD_D0eAmqnaHe1TC1xuld6iAKXfw2OVATr0\",\n                \"alg\": \"EdDSA\",\n            },\n        },\n    },\n    private_key,\n)\n\n# Issues the token to the presenter.\n```\n\nOn the CWT presenter side:\n\n```py\nimport cwt\nfrom cwt import COSEKey\n\n# Prepares a private PoP key in advance.\nwith open(\"./private_pop_key.pem\") as key_file:\n    pop_key_private = COSEKey.from_pem(key_file.read(), kid=\"presenter-01\")\n\n# Receives a message (e.g., nonce)  from the recipient.\nmsg = b\"could-you-sign-this-message?\"  # Provided by recipient.\n\n# Signs the message with the private PoP key.\nsig = pop_key_private.sign(msg)\n\n# Sends the msg and the sig with the CWT to the recipient.\n```\n\nOn the CWT recipient side:\n\n```py\nimport cwt\nfrom cwt import Claims, COSEKey\n\n# Prepares the public key of the issuer in advance.\nwith open(\"./public_key_of_issuer.pem\") as key_file:\n    public_key = COSEKey.from_pem(key_file.read(), kid=\"issuer-01\")\n\n# Verifies and decodes the CWT received from the presenter.\nraw = decode(token, public_key)\ndecoded = Claims.new(raw)\n\n# Extracts the PoP key from the CWT.\nextracted_pop_key = COSEKey.new(decoded.cnf)  # = raw[8][1]\n\n# Then, verifies the message sent by the presenter\n# with the signature which is also sent by the presenter as follows:\nextracted_pop_key.verify(msg, sig)\n```\n\n[Usage Examples](https://python-cwt.readthedocs.io/en/stable/cwt_usage.html#cwt-with-pop-key)\nshows other examples which use other confirmation methods for PoP keys.\n\n### CWT with Private CA\n\nPython CWT supports the case of using an arbitrary private CA as a root of trust.\nIn this case, a COSE message sender needs to specify the trust relationship chaining up to the root CA by using `x5chain` header parameter.\nOn the other hand, a COSE message receiver needs to specify trusted root CAs by using `ca_certs` parameter of CWT/COSE constructor (`CWT.new()` or `COSE.new()`).\n\n```py\nimport cwt\nfrom cwt import Claims, COSEKey\n\n# The sernder side:\nwith open(\"./private_key_of_cert.pem\")) as f:\n    private_key = COSEKey.from_pem(f.read(), kid=\"01\")\n\ntoken =\n    {\"iss\": \"coaps://as.example\", \"sub\": \"dajiaji\", \"cti\": \"123\"}, private_key\n)\n\n# The recipient side:\npublic_key = COSEKey.from_jwk(\n    {\n        \"kty\": \"EC\",\n        \"use\": \"sig\",\n        \"crv\": \"P-256\",\n        \"kid\": \"P-256-01\",\n        \"x\": \"oONCv1QoiajIbcW21Dqy6EnGvBTuF26GU7dy6JzOfXk\",\n        \"y\": \"sl6k77K0TS36FW-TyEGLHY14ovZfdZ9DZWsbA8BTHGc\",\n        \"x5c\": [\n          # The DER formatted X509 certificate which pairs with the private_key_of_cert.pem above.\n          \"MIIClDCCAXygAwIBAgIBBDANBgkqhkiG9w0BAQsFADBmMQswCQYDVQQGEwJKUDEOMAwGA1UECAwFVG9reW8xEDAOBgNVBAoMB2RhamlhamkxEzARBgNVBAMMCnB5dGhvbi1jd3QxIDAeBgkqhkiG9w0BCQEWEWRhamlhamlAZ21haWwuY29tMB4XDTIxMTAwMzEzMDE1MFoXDTMxMTAwMTEzMDE1MFowZDELMAkGA1UEBhMCSlAxDjAMBgNVBAgMBVRva3lvMQ0wCwYDVQQKDAR0ZXN0MRUwEwYDVQQDDAx0ZXN0LmV4YW1wbGUxHzAdBgkqhkiG9w0BCQEWEHRlc3RAZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASg40K_VCiJqMhtxbbUOrLoSca8FO4XboZTt3LonM59ebJepO-ytE0t-hVvk8hBix2NeKL2X3WfQ2VrGwPAUxxnoxowGDAJBgNVHRMEAjAAMAsGA1UdDwQEAwIE8DANBgkqhkiG9w0BAQsFAAOCAQEAZFfvFbaDk_DmG2cPGTwqwnFok1QnH2Tzkjk7p4vs1ycWzEDltkhyzcJxTSHoQGdykf7fG8NCrEqfi1G3hOyAtGxVIVcqsI-KIJCESp43zrNz5HsbwEY8l5rvcwohKGlE_idIFt5IuDTv7vsg_FaCIDeruw0NrXAACnLTwksawsxaCvtY12U0wsI2aC2Sb6V3HL-OLgcN6ZWzZ054L88JllckYnqJB8wCVBzzX2K2sZH3yeS39oRWZOVG6fwXsX4k0fHFx-Fn6KlrBU15pbjMLMn0ow0X3Y8e7FOgfkkph-N7e2SxceXNjrLiumOdclPm9yGSWoGsOJdId53dPvqAsQ\",\n          # The root certificate which is used for signing the above certificate (optional).\n          \"MIIDrzCCApegAwIBAgIUIK_CYzdq4BLLVXqSclNBgXy6mgswDQYJKoZIhvcNAQELBQAwZjELMAkGA1UEBhMCSlAxDjAMBgNVBAgMBVRva3lvMRAwDgYDVQQKDAdkYWppYWppMRMwEQYDVQQDDApweXRob24tY3d0MSAwHgYJKoZIhvcNAQkBFhFkYWppYWppQGdtYWlsLmNvbTAgFw0yMTEwMDIyMzU0NTZaGA8yMDcxMDkyMDIzNTQ1NlowZjELMAkGA1UEBhMCSlAxDjAMBgNVBAgMBVRva3lvMRAwDgYDVQQKDAdkYWppYWppMRMwEQYDVQQDDApweXRob24tY3d0MSAwHgYJKoZIhvcNAQkBFhFkYWppYWppQGdtYWlsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANFg4sw-uPWbPBbkJuohXc89O0gaqG1H2i1wzxxka32XNKIdwrxOJvsB2eALo3q7dTqLKCgzrjdd5N07gi0KzqjoIXIXqKpV5tm0fP5gCzEOWgxySCfBJOJyyvO6WvYXdvukEBnL-48D8RSjQH9fQEju5RG0taFZE-0nQ7n3P0J-Q-OfBUEoRiHvCd8oUx0s-fBpKdfhMAbD1sGAQ9CokUFeWc49em8inNqia5xljBtSYo6_2Zx9eb7B53wvBC0EmtS4SRyksR2emlr6GxMj_EZW7hcTfZCM4V2JYXliuAEdxA0sB7q-WqLg4OvltBQxCBgTTEXRCzxj3XXZy7QyUacCAwEAAaNTMFEwHQYDVR0OBBYEFA9id2cL_Chjv6liRN3HD849TARsMB8GA1UdIwQYMBaAFA9id2cL_Chjv6liRN3HD849TARsMA8GA1UdEwEB_wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAArIej5eJN1OmD3l3ef9QzosCxKThNwqNY55CoSSC3IRl-IAXy9Lvx7cgiliwBgCv99RbXZ1ZnptTHC_1kzMzPhPg9pGKDowFP-rywaB9-NTuHTWQ4hkKDsru5dpf75ILNI5PTUi1iiBM7TdgSerpEVroUWZiOpGAdlKkmE1h4gkR6eQY9Q0IvVXwagy_PPoQ1XO1i5Hyg3aXeDZBgkE7AuW9uxtYQHzg8JG2TNko_yp497yf_Ew4t6KzGDhSa8L1euMPtclALDWFhgl6WmYsHOqAOsyZOLwpsifWa533wI9mtTvLEg8TFKMOdU0sbAoQSbrrI9m4QS7mzDLchngj3E\"\n        ],\n        \"alg\": \"ES256\"\n    })\n\n# The recipient can specify trusted CAs as follows:\ndecoder = CWT.new(ca_certs=\"/path/to/cacerts.pem\")\ndecoded = decoder.decode(token, public_key)\nassert 1 in decoded and decoded[1] == \"coaps://as.example\"\n```\n\n### CWT for EUDCC (EU Digital COVID Certificate)\n\nPython CWT supports [Electronic Health Certificate Specification](https://github.com/ehn-dcc-development/hcert-spec/blob/main/hcert_spec.md)\nand [EUDCC (EU Digital COVID Certificate)](https://ec.europa.eu/info/live-work-travel-eu/coronavirus-response/safe-covid-19-vaccines-europeans/eu-digital-covid-certificate_en) compliant with [Technical Specifications for Digital Green Certificates Volume 1](https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_v1_en.pdf)\n\nA following example shows how to verify an EUDCC:\n\n```py\nimport cwt\nfrom cwt import load_pem_hcert_dsc\n\n# A DSC(Document Signing Certificate) issued by a CSCA\n# (Certificate Signing Certificate Authority) quoted from:\n# https://github.com/eu-digital-green-certificates/dgc-testdata/blob/main/AT/2DCode/raw/1.json\ndsc = \"-----BEGIN CERTIFICATE-----\\nMIIBvTCCAWOgAwIBAgIKAXk8i88OleLsuTAKBggqhkjOPQQDAjA2MRYwFAYDVQQDDA1BVCBER0MgQ1NDQSAxMQswCQYDVQQGEwJBVDEPMA0GA1UECgwGQk1TR1BLMB4XDTIxMDUwNTEyNDEwNloXDTIzMDUwNTEyNDEwNlowPTERMA8GA1UEAwwIQVQgRFNDIDExCzAJBgNVBAYTAkFUMQ8wDQYDVQQKDAZCTVNHUEsxCjAIBgNVBAUTATEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASt1Vz1rRuW1HqObUE9MDe7RzIk1gq4XW5GTyHuHTj5cFEn2Rge37+hINfCZZcozpwQKdyaporPUP1TE7UWl0F3o1IwUDAOBgNVHQ8BAf8EBAMCB4AwHQYDVR0OBBYEFO49y1ISb6cvXshLcp8UUp9VoGLQMB8GA1UdIwQYMBaAFP7JKEOflGEvef2iMdtopsetwGGeMAoGCCqGSM49BAMCA0gAMEUCIQDG2opotWG8tJXN84ZZqT6wUBz9KF8D+z9NukYvnUEQ3QIgdBLFSTSiDt0UJaDF6St2bkUQuVHW6fQbONd731/M4nc=\\n-----END CERTIFICATE-----\"\n\n# An EUDCC (EU Digital COVID Certificate) quoted from:\n# https://github.com/eu-digital-green-certificates/dgc-testdata/blob/main/AT/2DCode/raw/1.json\neudcc = bytes.fromhex(\n    \"d2844da20448d919375fc1e7b6b20126a0590133a4041a61817ca0061a60942ea001624154390103a101a4617681aa62646e01626d616d4f52472d3130303033303231356276706a313131393334393030376264746a323032312d30322d313862636f624154626369783155524e3a555643493a30313a41543a31303830373834334639344145453045453530393346424332353442443831332342626d706c45552f312f32302f31353238626973781b4d696e6973747279206f66204865616c74682c20417573747269616273640262746769383430353339303036636e616da463666e74754d5553544552465241553c474f455353494e47455262666e754d7573746572667261752d47c3b6c39f696e67657263676e74684741425249454c4562676e684761627269656c656376657265312e302e3063646f626a313939382d30322d323658405812fce67cb84c3911d78e3f61f890d0c80eb9675806aebed66aa2d0d0c91d1fc98d7bcb80bf00e181806a9502e11b071325901bd0d2c1b6438747b8cc50f521\"\n)\n\npublic_key = load_pem_hcert_dsc(dsc)\ndecoded = decode(eudcc, keys=[public_key])\nclaims = Claims.new(decoded)\n# claims.hcert[1] ==\n# {\n#     'v': [\n#         {\n#             'dn': 1,\n#             'ma': 'ORG-100030215',\n#             'vp': '1119349007',\n#             'dt': '2021-02-18',\n#             'co': 'AT',\n#             'ci': 'URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B',\n#             'mp': 'EU/1/20/1528',\n#             'is': 'Ministry of Health, Austria',\n#             'sd': 2,\n#             'tg': '840539006',\n#         }\n#     ],\n#     'nam': {\n#         'fnt': 'MUSTERFRAU<GOESSINGER',\n#         'fn': 'Musterfrau-Gößinger',\n#         'gnt': 'GABRIELE',\n#         'gn': 'Gabriele',\n#     },\n#     'ver': '1.0.0',\n#     'dob': '1998-02-26',\n# }\n```\n\n## API Reference\n\nSee [Documentation](https://python-cwt.readthedocs.io/en/stable/api.html).\n\n## Supported CWT Claims\n\nSee [Documentation](https://python-cwt.readthedocs.io/en/stable/claims.html).\n\n## Supported COSE Algorithms\n\nSee [Documentation](https://python-cwt.readthedocs.io/en/stable/algorithms.html).\n\n## Referenced Specifications\n\nPython CWT is (partially) compliant with following specifications:\n\n- [RFC9052: CBOR Object Signing and Encryption (COSE): Structures and Process](https://www.rfc-editor.org/rfc/rfc9052.html)\n- [RFC9053: CBOR Object Signing and Encryption (COSE): Initial Algorithms](https://www.rfc-editor.org/rfc/rfc9053.html)\n- [RFC9338: CBOR Object Signing and Encryption (COSE): Countersignatures](https://www.rfc-editor.org/rfc/rfc9338.html) - experimental\n- [RFC8812: COSE and JOSE Registrations for Web Authentication (WebAuthn) Algorithms](https://tools.ietf.org/html/rfc8812)\n- [RFC8747: Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)](https://tools.ietf.org/html/rfc8747)\n- [RFC8392: CWT (CBOR Web Token)](https://tools.ietf.org/html/rfc8392)\n- [RFC8230: Using RSA Algorithms with COSE Messages](https://tools.ietf.org/html/rfc8230)\n- [RFC8152: CBOR Object Signing and Encryption (COSE)](https://tools.ietf.org/html/rfc8152)\n- [draft-04: Use of HPKE with COSE](https://www.ietf.org/archive/id/draft-ietf-cose-hpke-04.html) - experimental\n- [Electronic Health Certificate Specification](https://github.com/ehn-dcc-development/hcert-spec/blob/main/hcert_spec.md)\n- [Technical Specifications for Digital Green Certificates Volume 1](https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_v1_en.pdf)\n\n## Tests\n\nYou can run tests from the project root after cloning with:\n\n```sh\n$ tox\n```\n\n## Contributing\n\nWe welcome all kind of contributions, filing issues, suggesting new features or sending PRs.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dajiaji/python-cwt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cwt",
    "package_url": "https://pypi.org/project/cwt/",
    "platform": null,
    "project_url": "https://pypi.org/project/cwt/",
    "project_urls": {
      "Homepage": "https://github.com/dajiaji/python-cwt",
      "Repository": "https://github.com/dajiaji/python-cwt"
    },
    "release_url": "https://pypi.org/project/cwt/2.3.1/",
    "requires_dist": [
      "asn1crypto (>=1.4.0,<2.0.0)",
      "cbor2 (>=5.4.2,<6.0.0)",
      "certvalidator (>=0.11.1,<0.12.0)",
      "cryptography (>=36,<40)",
      "Sphinx[docs] (>=4.3.1,<6.0.0) ; extra == \"docs\"",
      "sphinx-autodoc-typehints[docs] (>=1.12.0,<2.0.0) ; extra == \"docs\"",
      "sphinx-rtd-theme[docs] (>=1.0.0,<2.0.0) ; extra == \"docs\"",
      "pyhpke (>=0.4.1,<1.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "A Python implementation of CWT/COSE.",
    "version": "2.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17446202,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0101d6aa0f80b343a83e91c9c51e9725604a04d9062fa07560730310e3fe88d7",
          "md5": "2e76cae67bbad4e26f7e149b77fe6ee7",
          "sha256": "a6ed469eef2359f0c1cd3e372e6c4c0c5bebbd8c12e8c6575ccd072d4f9405df"
        },
        "downloads": -1,
        "filename": "cwt-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e76cae67bbad4e26f7e149b77fe6ee7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15030,
        "upload_time": "2021-04-17T16:07:51",
        "upload_time_iso_8601": "2021-04-17T16:07:51.723029Z",
        "url": "https://files.pythonhosted.org/packages/01/01/d6aa0f80b343a83e91c9c51e9725604a04d9062fa07560730310e3fe88d7/cwt-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ff0e9910c689559538d7bffa0d5708719efecadb53e7ae1292f80faa73480c9",
          "md5": "9edef6d7f257a9afc221179febbeb326",
          "sha256": "4f113663ee8b5e109c67f00766fb42eb92f98826e9dfcc00a33c53af5a4c2570"
        },
        "downloads": -1,
        "filename": "cwt-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9edef6d7f257a9afc221179febbeb326",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15023,
        "upload_time": "2021-04-17T16:29:41",
        "upload_time_iso_8601": "2021-04-17T16:29:41.555347Z",
        "url": "https://files.pythonhosted.org/packages/6f/f0/e9910c689559538d7bffa0d5708719efecadb53e7ae1292f80faa73480c9/cwt-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "310efb8d0cce92be6789d44112ab68a53553753be830fa09aadc26b871721be1",
          "md5": "bd31d64b04e3d88bf4c7bb2649a592ec",
          "sha256": "d359b27c07e5a82bbf7ebf7131617c41e853a00678e933baa33f5f67f1f217ac"
        },
        "downloads": -1,
        "filename": "cwt-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd31d64b04e3d88bf4c7bb2649a592ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45729,
        "upload_time": "2021-06-13T13:55:18",
        "upload_time_iso_8601": "2021-06-13T13:55:18.478653Z",
        "url": "https://files.pythonhosted.org/packages/31/0e/fb8d0cce92be6789d44112ab68a53553753be830fa09aadc26b871721be1/cwt-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "992cf0af0080425be15031daaa8192b093346a12c12d75e482a7cc0fc8f4455e",
          "md5": "ca41f29355ba9fdbd449b1df51343bde",
          "sha256": "d28e82aa86f3eebd1f13ff09c68a72db41870afc91be9ab8ee16e86f0430ca70"
        },
        "downloads": -1,
        "filename": "cwt-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ca41f29355ba9fdbd449b1df51343bde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 99037,
        "upload_time": "2021-06-13T13:55:20",
        "upload_time_iso_8601": "2021-06-13T13:55:20.214927Z",
        "url": "https://files.pythonhosted.org/packages/99/2c/f0af0080425be15031daaa8192b093346a12c12d75e482a7cc0fc8f4455e/cwt-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45e54ba9728fd2b1c4eab342114c6c01a06caed2aabecc3858d2dadfacf6e30f",
          "md5": "fa829ac20fe00f32a208a11bfbdad863",
          "sha256": "e18ddc09c6fa3a24e560388213d8746a2c6444cfb8c315edd3d1bd9d132ace9c"
        },
        "downloads": -1,
        "filename": "cwt-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa829ac20fe00f32a208a11bfbdad863",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15593,
        "upload_time": "2021-04-18T12:57:03",
        "upload_time_iso_8601": "2021-04-18T12:57:03.113265Z",
        "url": "https://files.pythonhosted.org/packages/45/e5/4ba9728fd2b1c4eab342114c6c01a06caed2aabecc3858d2dadfacf6e30f/cwt-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35c702a81a87ad3560a34be3c280c3dedbd059a8a77a20a0a3898086f94890be",
          "md5": "4591b9570ce6cc7d8b79626f83cd3816",
          "sha256": "a0a9b6a4cb721cbf42b5729047c7670086083caa43089f6739a0ffbd06b31ac6"
        },
        "downloads": -1,
        "filename": "cwt-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4591b9570ce6cc7d8b79626f83cd3816",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26662,
        "upload_time": "2021-04-18T12:57:04",
        "upload_time_iso_8601": "2021-04-18T12:57:04.383540Z",
        "url": "https://files.pythonhosted.org/packages/35/c7/02a81a87ad3560a34be3c280c3dedbd059a8a77a20a0a3898086f94890be/cwt-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42b5d62e4408481d12e5815ecaa9f0c79e2a6eaae526531296cd8cc557b1d065",
          "md5": "7b87dd404733ae0ab37119e042f1316d",
          "sha256": "423e4c6795cb2a1f83d93e008249f9f2c7af739cf9de37d435a0071f6ac6cd8d"
        },
        "downloads": -1,
        "filename": "cwt-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b87dd404733ae0ab37119e042f1316d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15750,
        "upload_time": "2021-04-19T12:41:00",
        "upload_time_iso_8601": "2021-04-19T12:41:00.239053Z",
        "url": "https://files.pythonhosted.org/packages/42/b5/d62e4408481d12e5815ecaa9f0c79e2a6eaae526531296cd8cc557b1d065/cwt-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "483385f0f680d2f552b7005eb9d2a2f38c96782db272ea5005d5007e5c4b3505",
          "md5": "5fa752cb35764b353de0db11821aed60",
          "sha256": "731e1c42f474af877973f21e07b073036d4edce951183782213035bdb0c481fa"
        },
        "downloads": -1,
        "filename": "cwt-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5fa752cb35764b353de0db11821aed60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27979,
        "upload_time": "2021-04-19T12:41:01",
        "upload_time_iso_8601": "2021-04-19T12:41:01.636918Z",
        "url": "https://files.pythonhosted.org/packages/48/33/85f0f680d2f552b7005eb9d2a2f38c96782db272ea5005d5007e5c4b3505/cwt-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22d0fa24481104d8b2c59b5ffe5ecb5edb5b07374bc60709958de932886685e9",
          "md5": "e6f483daa89a3363eb94bd06e91b817a",
          "sha256": "b4dc5cbe19553875ba98bd79009c784daee3ad497ff1df886c3c67cdd19c4032"
        },
        "downloads": -1,
        "filename": "cwt-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6f483daa89a3363eb94bd06e91b817a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17290,
        "upload_time": "2021-04-23T14:09:08",
        "upload_time_iso_8601": "2021-04-23T14:09:08.116839Z",
        "url": "https://files.pythonhosted.org/packages/22/d0/fa24481104d8b2c59b5ffe5ecb5edb5b07374bc60709958de932886685e9/cwt-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc10edb8baf33e83d5842005503b5f404de425971905913ff74100c121877c5d",
          "md5": "d3a2a162991339045b5899e043180d3e",
          "sha256": "3215b96e6169094ec5f383a1cf3e8f333c61ffaaa2ce58178a8eb588d7535c7e"
        },
        "downloads": -1,
        "filename": "cwt-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d3a2a162991339045b5899e043180d3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34006,
        "upload_time": "2021-04-23T14:09:10",
        "upload_time_iso_8601": "2021-04-23T14:09:10.012174Z",
        "url": "https://files.pythonhosted.org/packages/bc/10/edb8baf33e83d5842005503b5f404de425971905913ff74100c121877c5d/cwt-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb2c6d2a3e71646f649cc8bbbe77ebbc66c96b98ecad7ab9b39b6cc2bd1a8240",
          "md5": "97275c806b8e775ecbab8a83c2e0808a",
          "sha256": "20e493adf537e2fc9f245fcaf8014b2eb3d0deba860b710d4d7967b4e719853d"
        },
        "downloads": -1,
        "filename": "cwt-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97275c806b8e775ecbab8a83c2e0808a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21017,
        "upload_time": "2021-04-29T05:03:53",
        "upload_time_iso_8601": "2021-04-29T05:03:53.231812Z",
        "url": "https://files.pythonhosted.org/packages/fb/2c/6d2a3e71646f649cc8bbbe77ebbc66c96b98ecad7ab9b39b6cc2bd1a8240/cwt-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79c1661937f05c82b643d3e4e3bf20b1de7581b0f60706628388ee28eed84e06",
          "md5": "99095b6c4f9a9b88ede6b707867ab477",
          "sha256": "853c1a3aadbfb73919c7df478ab2e8e0eefa0a390f12425628d45ae1b926b8dd"
        },
        "downloads": -1,
        "filename": "cwt-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99095b6c4f9a9b88ede6b707867ab477",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40014,
        "upload_time": "2021-04-29T05:03:54",
        "upload_time_iso_8601": "2021-04-29T05:03:54.689166Z",
        "url": "https://files.pythonhosted.org/packages/79/c1/661937f05c82b643d3e4e3bf20b1de7581b0f60706628388ee28eed84e06/cwt-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8102754172a75f9d831a9bdafffe4bc04f78542dd883d74d80936e74b7cc67c",
          "md5": "8bf813329043a89da209c686152956fd",
          "sha256": "2f310399a5acf48934477b93fad5659bf10fbcf1ded245ff74b14a22808163ab"
        },
        "downloads": -1,
        "filename": "cwt-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bf813329043a89da209c686152956fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23423,
        "upload_time": "2021-04-30T13:20:18",
        "upload_time_iso_8601": "2021-04-30T13:20:18.449125Z",
        "url": "https://files.pythonhosted.org/packages/a8/10/2754172a75f9d831a9bdafffe4bc04f78542dd883d74d80936e74b7cc67c/cwt-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92d6b4fb1f17b59111da1b561a392db755d51ed2a2f3362fffe89e9826286c36",
          "md5": "6dfdc8e839739366e6b9d4ad72eaf977",
          "sha256": "25b2f497e8f8c0fa6d7594f14439e26e0a3448730e47fc149815ce9e3b5e44e1"
        },
        "downloads": -1,
        "filename": "cwt-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6dfdc8e839739366e6b9d4ad72eaf977",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44021,
        "upload_time": "2021-04-30T13:20:19",
        "upload_time_iso_8601": "2021-04-30T13:20:19.878803Z",
        "url": "https://files.pythonhosted.org/packages/92/d6/b4fb1f17b59111da1b561a392db755d51ed2a2f3362fffe89e9826286c36/cwt-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0a0ca959cec36a84497a0b0f424b859a1438b2da9634d07c504a11e53fa7fc8",
          "md5": "adbbcfcfb0f4eb9185199e8ab54fc0f0",
          "sha256": "092bb9b0b4cd1156fc64b06851adefc7114addf1a3397f0e752a03b45a42387c"
        },
        "downloads": -1,
        "filename": "cwt-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "adbbcfcfb0f4eb9185199e8ab54fc0f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29326,
        "upload_time": "2021-05-04T01:45:51",
        "upload_time_iso_8601": "2021-05-04T01:45:51.831039Z",
        "url": "https://files.pythonhosted.org/packages/d0/a0/ca959cec36a84497a0b0f424b859a1438b2da9634d07c504a11e53fa7fc8/cwt-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23cb770c474f6c08cc68fbd11b74609b3287b8243a6b031bca8a3ff08cd41495",
          "md5": "7ea7c536f969c3afa08f218cac332310",
          "sha256": "de60e6ba20055315f39e665dfa2dd0ba83f03d645ce7a589bf5471a0bdf183ef"
        },
        "downloads": -1,
        "filename": "cwt-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ea7c536f969c3afa08f218cac332310",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 65856,
        "upload_time": "2021-05-04T01:45:54",
        "upload_time_iso_8601": "2021-05-04T01:45:54.457020Z",
        "url": "https://files.pythonhosted.org/packages/23/cb/770c474f6c08cc68fbd11b74609b3287b8243a6b031bca8a3ff08cd41495/cwt-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3c6abdb6ae608e0847553c8b657e1f481a24cb4541a1b641fc15c26f0928a30",
          "md5": "8a6fac0d837f832103fde71b91bc182e",
          "sha256": "1ff24dea7e72c55b237c2626d5debc4afa6f14cbe85831795665b74fcb34cafd"
        },
        "downloads": -1,
        "filename": "cwt-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a6fac0d837f832103fde71b91bc182e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30626,
        "upload_time": "2021-05-04T13:52:59",
        "upload_time_iso_8601": "2021-05-04T13:52:59.637734Z",
        "url": "https://files.pythonhosted.org/packages/c3/c6/abdb6ae608e0847553c8b657e1f481a24cb4541a1b641fc15c26f0928a30/cwt-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8623eb677e7c0c13fc8ba6f7ccccfb1ee59bbd312e8f793b6e97a11b0fda6f5",
          "md5": "6f54eafb63da28b827f4c7b721dd5a4c",
          "sha256": "8b826a17e701dc846d4a059f04859e49965b5d13a52905b7fb9cea20158c41e8"
        },
        "downloads": -1,
        "filename": "cwt-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f54eafb63da28b827f4c7b721dd5a4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 68798,
        "upload_time": "2021-05-04T13:53:00",
        "upload_time_iso_8601": "2021-05-04T13:53:00.957412Z",
        "url": "https://files.pythonhosted.org/packages/e8/62/3eb677e7c0c13fc8ba6f7ccccfb1ee59bbd312e8f793b6e97a11b0fda6f5/cwt-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e6f90047cac44ffce56384e411adb6b317187ff6ef3079b458fcfeb4919c507",
          "md5": "d15f07494d43ed5f1ef1c54252150325",
          "sha256": "3dbfa9d742cd0ddfd67e8338032ee6bff0dd3cfd3abd88720372c2db331acd9e"
        },
        "downloads": -1,
        "filename": "cwt-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d15f07494d43ed5f1ef1c54252150325",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31011,
        "upload_time": "2021-05-07T21:02:17",
        "upload_time_iso_8601": "2021-05-07T21:02:17.751476Z",
        "url": "https://files.pythonhosted.org/packages/7e/6f/90047cac44ffce56384e411adb6b317187ff6ef3079b458fcfeb4919c507/cwt-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1d856d733e2d38d944bbb7ace38b63b80520ac76e63e166dc91188c63ff96a0",
          "md5": "9de62dfc6713e495da0528114cf9a6f2",
          "sha256": "52fe35667ed766eef04a86be86d8355754a1bdb9104fe6c27b1400d9574313da"
        },
        "downloads": -1,
        "filename": "cwt-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9de62dfc6713e495da0528114cf9a6f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 69759,
        "upload_time": "2021-05-07T21:02:19",
        "upload_time_iso_8601": "2021-05-07T21:02:19.317925Z",
        "url": "https://files.pythonhosted.org/packages/f1/d8/56d733e2d38d944bbb7ace38b63b80520ac76e63e166dc91188c63ff96a0/cwt-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fa62e2a6c11448118631f3404d047ddb72f184089f670f47463afbb810cf594",
          "md5": "14bc5a537cb6da5fe8477620e9dde261",
          "sha256": "31ebc8a301db4095cf9a3b7c4058d32f5cd22ba7bff3691dc886e3044413338f"
        },
        "downloads": -1,
        "filename": "cwt-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14bc5a537cb6da5fe8477620e9dde261",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31514,
        "upload_time": "2021-05-09T09:04:04",
        "upload_time_iso_8601": "2021-05-09T09:04:04.554122Z",
        "url": "https://files.pythonhosted.org/packages/8f/a6/2e2a6c11448118631f3404d047ddb72f184089f670f47463afbb810cf594/cwt-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "700aaa10a023331fca9dda9d4852607c91545b510e2336fa2f8e6d2c3a8e72f1",
          "md5": "97d706a224b841b53af2312d53078df8",
          "sha256": "7c406d2276b7eb6a4b82b5c95d59908e7452a0d4ff0b9ac69db30f661a264869"
        },
        "downloads": -1,
        "filename": "cwt-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "97d706a224b841b53af2312d53078df8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72398,
        "upload_time": "2021-05-09T09:04:07",
        "upload_time_iso_8601": "2021-05-09T09:04:07.546078Z",
        "url": "https://files.pythonhosted.org/packages/70/0a/aa10a023331fca9dda9d4852607c91545b510e2336fa2f8e6d2c3a8e72f1/cwt-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df7ac3b1da4623c82f448859ad37c8d8a3ce306b5b1dfc2f28100d572eebe2e4",
          "md5": "60870a6f8d8a67447a76bca23238ca46",
          "sha256": "ff8949fb32cac031802addc532b1fa95342c310cd4644be552be8e9a709a0b26"
        },
        "downloads": -1,
        "filename": "cwt-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60870a6f8d8a67447a76bca23238ca46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31617,
        "upload_time": "2021-05-11T10:00:16",
        "upload_time_iso_8601": "2021-05-11T10:00:16.918553Z",
        "url": "https://files.pythonhosted.org/packages/df/7a/c3b1da4623c82f448859ad37c8d8a3ce306b5b1dfc2f28100d572eebe2e4/cwt-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67c738a2fe01d498c3a6b5b82a61544bee24652ff3cc0fdf40b5e323c1f8cf33",
          "md5": "4f2b5cbb0bed688a7175542fbe5f32b8",
          "sha256": "c43c4568959955eec08c77f4796fb74d4eb2949cdffaadcccaece86ae511c1b2"
        },
        "downloads": -1,
        "filename": "cwt-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f2b5cbb0bed688a7175542fbe5f32b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 73733,
        "upload_time": "2021-05-11T10:00:18",
        "upload_time_iso_8601": "2021-05-11T10:00:18.527257Z",
        "url": "https://files.pythonhosted.org/packages/67/c7/38a2fe01d498c3a6b5b82a61544bee24652ff3cc0fdf40b5e323c1f8cf33/cwt-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "996ba3e8ac45717248693bd3d3542ec1932e3cb23aca8e24db8ad2c015dc1098",
          "md5": "68896f1f9a59100e82df9c47aea08377",
          "sha256": "be0a1917d61c5f39c3c331acd0069f3644f10cefe25cde65d780115ace067a42"
        },
        "downloads": -1,
        "filename": "cwt-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68896f1f9a59100e82df9c47aea08377",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38932,
        "upload_time": "2021-05-30T02:16:43",
        "upload_time_iso_8601": "2021-05-30T02:16:43.066303Z",
        "url": "https://files.pythonhosted.org/packages/99/6b/a3e8ac45717248693bd3d3542ec1932e3cb23aca8e24db8ad2c015dc1098/cwt-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8134b14d13b6165d2056263601529eba88bff136304c2a396565e0e60acb64d8",
          "md5": "fbcb139db6f48492f9bb42826ff1db07",
          "sha256": "cdd3b3e3eb33efecb4ff27e6a7af3b31b12b73df7081ed5be6bb94dc7b8b6b07"
        },
        "downloads": -1,
        "filename": "cwt-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fbcb139db6f48492f9bb42826ff1db07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 84251,
        "upload_time": "2021-05-30T02:16:44",
        "upload_time_iso_8601": "2021-05-30T02:16:44.703809Z",
        "url": "https://files.pythonhosted.org/packages/81/34/b14d13b6165d2056263601529eba88bff136304c2a396565e0e60acb64d8/cwt-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "078bc19a2efd1a84d963cc888adc370519a90e53a2e660d2d4e8cdc054091139",
          "md5": "328260893fd631f8a319561a974be3c0",
          "sha256": "11ec04436a4450f8995ccb5a7f6c47aeb555ec89956611765f9e13dc7695649a"
        },
        "downloads": -1,
        "filename": "cwt-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "328260893fd631f8a319561a974be3c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39517,
        "upload_time": "2021-05-31T12:41:56",
        "upload_time_iso_8601": "2021-05-31T12:41:56.966651Z",
        "url": "https://files.pythonhosted.org/packages/07/8b/c19a2efd1a84d963cc888adc370519a90e53a2e660d2d4e8cdc054091139/cwt-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1424654dd3efcb4e915fb7edbae5474442cb505abd56fafbab799b61571757ab",
          "md5": "85a5f8cdf1b029192ea6d1ca24e24fe0",
          "sha256": "794807d23b4c2ebc1eb0eec2035f1efbf049a6a5ba5bf426271d54e2eff0fe8b"
        },
        "downloads": -1,
        "filename": "cwt-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "85a5f8cdf1b029192ea6d1ca24e24fe0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 86600,
        "upload_time": "2021-05-31T12:41:58",
        "upload_time_iso_8601": "2021-05-31T12:41:58.504005Z",
        "url": "https://files.pythonhosted.org/packages/14/24/654dd3efcb4e915fb7edbae5474442cb505abd56fafbab799b61571757ab/cwt-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e2e503c1dec11cae0e702ba8583e2b20276774c121cefd7c6909c9666d98de5",
          "md5": "248f51f43a6a4e2b5cd47eae4efa3eb6",
          "sha256": "07992fc56eea905347f73f4fc97d0d9851f57d97a77f9794e53fe41a2a9c7e26"
        },
        "downloads": -1,
        "filename": "cwt-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "248f51f43a6a4e2b5cd47eae4efa3eb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 41944,
        "upload_time": "2021-06-04T06:44:19",
        "upload_time_iso_8601": "2021-06-04T06:44:19.694344Z",
        "url": "https://files.pythonhosted.org/packages/5e/2e/503c1dec11cae0e702ba8583e2b20276774c121cefd7c6909c9666d98de5/cwt-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3626f59ef14703a38ee3f9882e81ee3ee7a7e5b069d8935ac81bc6f626f586d3",
          "md5": "651420af2cb6dd01bd3f0d5040972db5",
          "sha256": "45890da22de49cf83c906c8dd49ecb1787fcedd2ef8a2a7fd1153a36ad9dd069"
        },
        "downloads": -1,
        "filename": "cwt-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "651420af2cb6dd01bd3f0d5040972db5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 90774,
        "upload_time": "2021-06-04T06:44:21",
        "upload_time_iso_8601": "2021-06-04T06:44:21.203054Z",
        "url": "https://files.pythonhosted.org/packages/36/26/f59ef14703a38ee3f9882e81ee3ee7a7e5b069d8935ac81bc6f626f586d3/cwt-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "270cf51ea022185100e029a896871f90b2a7a02b6118ef0b5cbe6a17e037fda5",
          "md5": "a2e4a933d7bfdea4995c2b14963fa3bc",
          "sha256": "3c9012b2372c4777e4c3b03e42526ce9b892c721224497b51cb02ce04953c733"
        },
        "downloads": -1,
        "filename": "cwt-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2e4a933d7bfdea4995c2b14963fa3bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50325,
        "upload_time": "2021-06-24T14:45:49",
        "upload_time_iso_8601": "2021-06-24T14:45:49.218946Z",
        "url": "https://files.pythonhosted.org/packages/27/0c/f51ea022185100e029a896871f90b2a7a02b6118ef0b5cbe6a17e037fda5/cwt-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06491531cc28847b4de877103a2dbcffe1c40c6835a24a2908f96dc806e379c8",
          "md5": "b6f952b179c31bce38ba5c6a9f671584",
          "sha256": "8986cae074fadcbbcb0fd0852e94fa6c097b8f4fbff78105c9493588bfbbbc61"
        },
        "downloads": -1,
        "filename": "cwt-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b6f952b179c31bce38ba5c6a9f671584",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 111822,
        "upload_time": "2021-06-24T14:45:51",
        "upload_time_iso_8601": "2021-06-24T14:45:51.779730Z",
        "url": "https://files.pythonhosted.org/packages/06/49/1531cc28847b4de877103a2dbcffe1c40c6835a24a2908f96dc806e379c8/cwt-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "627765d312c51abf7881645a7f95e95ec22cfdeba4cf70af6efd5f9946cb0670",
          "md5": "3a71b38915b42c115c9e1926e7a659f9",
          "sha256": "fdd1793ddac84d0dd919d3c7ffe0a53edcf211c1bd5ff1db9c25074de6f1114c"
        },
        "downloads": -1,
        "filename": "cwt-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a71b38915b42c115c9e1926e7a659f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51314,
        "upload_time": "2021-06-27T00:55:04",
        "upload_time_iso_8601": "2021-06-27T00:55:04.159554Z",
        "url": "https://files.pythonhosted.org/packages/62/77/65d312c51abf7881645a7f95e95ec22cfdeba4cf70af6efd5f9946cb0670/cwt-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdc01a83844d1866842fa398f7fbe9dcedfb1ce79daa97dc8b6f18745337b119",
          "md5": "6face82ee0eea005eec7a39df9f50e59",
          "sha256": "078ba3cb043d6df7ebaeb45c3a20fa3d4ae66f6df550cdb8a5b0a8b2ab74b320"
        },
        "downloads": -1,
        "filename": "cwt-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6face82ee0eea005eec7a39df9f50e59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 113124,
        "upload_time": "2021-06-27T00:55:06",
        "upload_time_iso_8601": "2021-06-27T00:55:06.350052Z",
        "url": "https://files.pythonhosted.org/packages/fd/c0/1a83844d1866842fa398f7fbe9dcedfb1ce79daa97dc8b6f18745337b119/cwt-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6499dfbdf2c1c2cf53fbead232447ef9a7fbd3fd4479ef325f7db52432d14d0c",
          "md5": "04f5dee9b4075f5bacf5694af4799ead",
          "sha256": "ef7f96b9881d22d7bf80500f2f5a364c2a0905cfb5a6d5108ff120a00afd82d9"
        },
        "downloads": -1,
        "filename": "cwt-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04f5dee9b4075f5bacf5694af4799ead",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 53754,
        "upload_time": "2021-06-30T23:52:42",
        "upload_time_iso_8601": "2021-06-30T23:52:42.955230Z",
        "url": "https://files.pythonhosted.org/packages/64/99/dfbdf2c1c2cf53fbead232447ef9a7fbd3fd4479ef325f7db52432d14d0c/cwt-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a31fd80bfadb4cf3ae5bba82ef482761c7e9b694a66c7fd52ecf3980253251c",
          "md5": "7d6b307f6cc0db774a414050006e3370",
          "sha256": "8eaeed00c1252f956b4aafd877872edc9529ed6e80bff29a4a3fe7b814438794"
        },
        "downloads": -1,
        "filename": "cwt-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d6b307f6cc0db774a414050006e3370",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 125241,
        "upload_time": "2021-06-30T23:52:45",
        "upload_time_iso_8601": "2021-06-30T23:52:45.254243Z",
        "url": "https://files.pythonhosted.org/packages/5a/31/fd80bfadb4cf3ae5bba82ef482761c7e9b694a66c7fd52ecf3980253251c/cwt-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dc8afd7708785d9ac9ae493af960e34491f7f3d11a47cc81e0bf2ed56003f99",
          "md5": "9af1cb84860d146d8f1c4104b932c66f",
          "sha256": "ee71516f31d7024773ad75ea5566e035f411d822052f87c227622a3319493fdd"
        },
        "downloads": -1,
        "filename": "cwt-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9af1cb84860d146d8f1c4104b932c66f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 54460,
        "upload_time": "2021-07-03T14:08:04",
        "upload_time_iso_8601": "2021-07-03T14:08:04.294153Z",
        "url": "https://files.pythonhosted.org/packages/9d/c8/afd7708785d9ac9ae493af960e34491f7f3d11a47cc81e0bf2ed56003f99/cwt-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7cafdb49bd06461ac5cbfca4cc474ccdd272e7235341dff22a5f1682d6f9361",
          "md5": "b75604409f568180aa9d051baea7ff8d",
          "sha256": "a858134a598ea932d33b287d9521231625e907339e227b2087c76afed1c34b29"
        },
        "downloads": -1,
        "filename": "cwt-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b75604409f568180aa9d051baea7ff8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 125132,
        "upload_time": "2021-07-03T14:08:06",
        "upload_time_iso_8601": "2021-07-03T14:08:06.761482Z",
        "url": "https://files.pythonhosted.org/packages/f7/ca/fdb49bd06461ac5cbfca4cc474ccdd272e7235341dff22a5f1682d6f9361/cwt-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82cab704bb0799de018a78e9ca437b04ed769c9eda3c7301ca57b6e2895ded79",
          "md5": "1f12a774fa8a63ecdb42e2557bc8bbfc",
          "sha256": "34828d371b74010080f181bceb71e5be52c36dd0d5dc8d26a7c283550e47c460"
        },
        "downloads": -1,
        "filename": "cwt-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f12a774fa8a63ecdb42e2557bc8bbfc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 55216,
        "upload_time": "2021-07-07T12:59:42",
        "upload_time_iso_8601": "2021-07-07T12:59:42.966044Z",
        "url": "https://files.pythonhosted.org/packages/82/ca/b704bb0799de018a78e9ca437b04ed769c9eda3c7301ca57b6e2895ded79/cwt-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20f77a376a4094b75277346077aad307913b1f6dce0fb480739a6f786a9f8daf",
          "md5": "3c5f17e0f4fa7fe7bbb70d0d3c3f47cb",
          "sha256": "d924514bd22d78d960e705f99c1b965a5ac1b0b05b958c10c42cbb5ca18cf0c3"
        },
        "downloads": -1,
        "filename": "cwt-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3c5f17e0f4fa7fe7bbb70d0d3c3f47cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 127516,
        "upload_time": "2021-07-07T12:59:45",
        "upload_time_iso_8601": "2021-07-07T12:59:45.260652Z",
        "url": "https://files.pythonhosted.org/packages/20/f7/7a376a4094b75277346077aad307913b1f6dce0fb480739a6f786a9f8daf/cwt-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8d137a6f9074fdea67aa9af3ea8554e6002eb6830dced429dfa36b046f363f1",
          "md5": "c9fa9d122c2887490187a366aa8eb3c4",
          "sha256": "4122c604b3c6edda6102a5643a31c953ee83988554116c729a54ffe65a42d1f1"
        },
        "downloads": -1,
        "filename": "cwt-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9fa9d122c2887490187a366aa8eb3c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 60452,
        "upload_time": "2021-08-09T01:40:19",
        "upload_time_iso_8601": "2021-08-09T01:40:19.858079Z",
        "url": "https://files.pythonhosted.org/packages/e8/d1/37a6f9074fdea67aa9af3ea8554e6002eb6830dced429dfa36b046f363f1/cwt-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84de0fdbd6a63c20b0566d823d6e5fd81cf6ea88f59e3f96461c98c42fcdb4f0",
          "md5": "627931d179aeb98e2fedd6d89c6b168e",
          "sha256": "7f26c6299b47966c55beb36924615bfabf1d243388fff04fe1bcee078cf22093"
        },
        "downloads": -1,
        "filename": "cwt-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "627931d179aeb98e2fedd6d89c6b168e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 130330,
        "upload_time": "2021-08-09T01:40:22",
        "upload_time_iso_8601": "2021-08-09T01:40:22.013718Z",
        "url": "https://files.pythonhosted.org/packages/84/de/0fdbd6a63c20b0566d823d6e5fd81cf6ea88f59e3f96461c98c42fcdb4f0/cwt-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1aca66f2ecbae558dc6657b37c114dc317e30496fdcf646cbe7168b22972036f",
          "md5": "c6f9a10911ec745f94687f31909783cf",
          "sha256": "1cbb027ed9c219a47f707f84fabaaf135fce10084b98970391d8a78d928bf6b5"
        },
        "downloads": -1,
        "filename": "cwt-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6f9a10911ec745f94687f31909783cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 61969,
        "upload_time": "2021-10-03T15:15:56",
        "upload_time_iso_8601": "2021-10-03T15:15:56.605695Z",
        "url": "https://files.pythonhosted.org/packages/1a/ca/66f2ecbae558dc6657b37c114dc317e30496fdcf646cbe7168b22972036f/cwt-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56c6bf08e6f327163a06489bfbbdd62b7ce1648f8903f002661f935e45172af3",
          "md5": "5abe0b11028853a51316fb7ce843956f",
          "sha256": "fdfccc9da0c2d6e6cf5e253f068e19170224bd7de89dc30896e4c3bcac7354c7"
        },
        "downloads": -1,
        "filename": "cwt-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5abe0b11028853a51316fb7ce843956f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 135035,
        "upload_time": "2021-10-03T15:15:58",
        "upload_time_iso_8601": "2021-10-03T15:15:58.825048Z",
        "url": "https://files.pythonhosted.org/packages/56/c6/bf08e6f327163a06489bfbbdd62b7ce1648f8903f002661f935e45172af3/cwt-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2eb91a0b65470c0c341689f2c540889ab8a9e96a2548cb8096ae45c043776417",
          "md5": "ed276d1e480071a7c60e2c1d95283986",
          "sha256": "c25a20f2b45f2e756b3d50624c47248193ac7614b39731d22a98403147cb402b"
        },
        "downloads": -1,
        "filename": "cwt-1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed276d1e480071a7c60e2c1d95283986",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64156,
        "upload_time": "2021-10-11T03:06:33",
        "upload_time_iso_8601": "2021-10-11T03:06:33.470849Z",
        "url": "https://files.pythonhosted.org/packages/2e/b9/1a0b65470c0c341689f2c540889ab8a9e96a2548cb8096ae45c043776417/cwt-1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e57475fe649082dfdc83742e1d227df5a0ed785160ba56c53e11e752f2eee192",
          "md5": "78bd1eef236dcd3e5127aad074c76f79",
          "sha256": "004f6af362018044c46be92751ad3b4c101d27b1831e71ca9c50a4a5389aecc9"
        },
        "downloads": -1,
        "filename": "cwt-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78bd1eef236dcd3e5127aad074c76f79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 141513,
        "upload_time": "2021-10-11T03:06:35",
        "upload_time_iso_8601": "2021-10-11T03:06:35.488263Z",
        "url": "https://files.pythonhosted.org/packages/e5/74/75fe649082dfdc83742e1d227df5a0ed785160ba56c53e11e752f2eee192/cwt-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "004f91c0b91e5dc826002f067257a3c41d5524d5c50b546005337b3fa492fa78",
          "md5": "a44701a74cd4e5a3bfa6060d56a42529",
          "sha256": "e1ec214212723c4e0ecc393e1b731983a7179832696e0830962f85fe3b2a8c53"
        },
        "downloads": -1,
        "filename": "cwt-1.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a44701a74cd4e5a3bfa6060d56a42529",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64162,
        "upload_time": "2021-10-16T06:38:46",
        "upload_time_iso_8601": "2021-10-16T06:38:46.712585Z",
        "url": "https://files.pythonhosted.org/packages/00/4f/91c0b91e5dc826002f067257a3c41d5524d5c50b546005337b3fa492fa78/cwt-1.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0096ad4c472b1a15198c6d13221f1c85e87f5093490cc75d3d4108de3538a0e0",
          "md5": "916816279a5abd1377c5c0605226deae",
          "sha256": "bf9b3e32168ccdc926cca64a4e4b3529f0c22ccc11065b51f6ce9b10a36136df"
        },
        "downloads": -1,
        "filename": "cwt-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "916816279a5abd1377c5c0605226deae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 141542,
        "upload_time": "2021-10-16T06:38:49",
        "upload_time_iso_8601": "2021-10-16T06:38:49.601121Z",
        "url": "https://files.pythonhosted.org/packages/00/96/ad4c472b1a15198c6d13221f1c85e87f5093490cc75d3d4108de3538a0e0/cwt-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae38b74652d3a23c82ddaf88cc4fee02a250790d385e9c021c796742933dd188",
          "md5": "c539b6b2e2829c7b62ff783229b2457f",
          "sha256": "f26a0ba716dc9b9e9e8f4311a1726f750a35a0af7692840aa133c6aa67e89425"
        },
        "downloads": -1,
        "filename": "cwt-1.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c539b6b2e2829c7b62ff783229b2457f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 64450,
        "upload_time": "2021-12-11T07:56:16",
        "upload_time_iso_8601": "2021-12-11T07:56:16.396737Z",
        "url": "https://files.pythonhosted.org/packages/ae/38/b74652d3a23c82ddaf88cc4fee02a250790d385e9c021c796742933dd188/cwt-1.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40542c29bdca4ba21960286b8f70d99233c2b38605b73fabfda0036d0643ed24",
          "md5": "4b634992ba704fe4d04545d0795dece1",
          "sha256": "2f7a6139ed6b08dc883c3bdd1757944172daf2f97a85a6af99c04ab9324df035"
        },
        "downloads": -1,
        "filename": "cwt-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b634992ba704fe4d04545d0795dece1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 65877,
        "upload_time": "2021-12-11T07:56:18",
        "upload_time_iso_8601": "2021-12-11T07:56:18.598862Z",
        "url": "https://files.pythonhosted.org/packages/40/54/2c29bdca4ba21960286b8f70d99233c2b38605b73fabfda0036d0643ed24/cwt-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c639142a4a8dd92b11a997e9b59c0b4aa4a581065f816031ba93929a2e9af3c",
          "md5": "e2874bf774a17aacbd6154c2da2c234b",
          "sha256": "12ee71edd9dd8d75e52239d9758b2334c559cfdb516172f96f21ff3621ccf9a4"
        },
        "downloads": -1,
        "filename": "cwt-1.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2874bf774a17aacbd6154c2da2c234b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 64580,
        "upload_time": "2021-12-15T09:54:36",
        "upload_time_iso_8601": "2021-12-15T09:54:36.467804Z",
        "url": "https://files.pythonhosted.org/packages/5c/63/9142a4a8dd92b11a997e9b59c0b4aa4a581065f816031ba93929a2e9af3c/cwt-1.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0688147ce18bc94efe7c7fc3e016b529731197bbe20eb4ef8d83cc32d4829e88",
          "md5": "a0bedb462bb6f5dc037fea28e8e63866",
          "sha256": "bfa0b563bcdc27ffef0adcdd16456324823c97fad690ed94bf705a1f3c3c452a"
        },
        "downloads": -1,
        "filename": "cwt-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a0bedb462bb6f5dc037fea28e8e63866",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 66120,
        "upload_time": "2021-12-15T09:54:39",
        "upload_time_iso_8601": "2021-12-15T09:54:39.391088Z",
        "url": "https://files.pythonhosted.org/packages/06/88/147ce18bc94efe7c7fc3e016b529731197bbe20eb4ef8d83cc32d4829e88/cwt-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55d03cd36cd556d096852ec866730cbcb178bcae2f025234d8bedb2672ac4f3f",
          "md5": "4c49d312aa9b5b88c73647339bba33b1",
          "sha256": "9c3a843f63f3d8bd2bfbb4693f8f4e967ebbdb2ac6874c8aec803e68f96a97b4"
        },
        "downloads": -1,
        "filename": "cwt-1.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c49d312aa9b5b88c73647339bba33b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 85880,
        "upload_time": "2021-12-31T01:11:00",
        "upload_time_iso_8601": "2021-12-31T01:11:00.271540Z",
        "url": "https://files.pythonhosted.org/packages/55/d0/3cd36cd556d096852ec866730cbcb178bcae2f025234d8bedb2672ac4f3f/cwt-1.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f28286dafbf6b8c2696226a4e6f3e163383f94f80d5b21649ac2889a1cabd42b",
          "md5": "f5d293e91bb9cc8ca026c52ff77c8ee8",
          "sha256": "f13c482c8cc20c415d1e23df433f42473b2ff1e53548f152a6bfb100a9f30499"
        },
        "downloads": -1,
        "filename": "cwt-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f5d293e91bb9cc8ca026c52ff77c8ee8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 163108,
        "upload_time": "2021-12-31T01:11:02",
        "upload_time_iso_8601": "2021-12-31T01:11:02.901569Z",
        "url": "https://files.pythonhosted.org/packages/f2/82/86dafbf6b8c2696226a4e6f3e163383f94f80d5b21649ac2889a1cabd42b/cwt-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c6705820c2325269066978f8e3703b510f93c84085275ca5a36b333a240b5a6",
          "md5": "2b1c91caa46ad01e02502bc900372cae",
          "sha256": "a6ecbe45e55cbff8d221e78736d10c23d1179fa7911ec44dd1a2891e48d5591b"
        },
        "downloads": -1,
        "filename": "cwt-1.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b1c91caa46ad01e02502bc900372cae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 85995,
        "upload_time": "2022-01-01T21:49:14",
        "upload_time_iso_8601": "2022-01-01T21:49:14.110254Z",
        "url": "https://files.pythonhosted.org/packages/5c/67/05820c2325269066978f8e3703b510f93c84085275ca5a36b333a240b5a6/cwt-1.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72fb6c27db8effeaa50c69d7fe5653e943d66a09298f2396b5bf9e773d669a33",
          "md5": "8388308d211c2b9e152717904d26884f",
          "sha256": "b8d3291027ff4db8ae5e21f995cde2c999d761575d0dc4ada34af27be5410507"
        },
        "downloads": -1,
        "filename": "cwt-1.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8388308d211c2b9e152717904d26884f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 163259,
        "upload_time": "2022-01-01T21:49:16",
        "upload_time_iso_8601": "2022-01-01T21:49:16.223053Z",
        "url": "https://files.pythonhosted.org/packages/72/fb/6c27db8effeaa50c69d7fe5653e943d66a09298f2396b5bf9e773d669a33/cwt-1.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60aac771dd58d5f876896ca7f586be0319e9f932a5563bd4a544e3f708b2e333",
          "md5": "81d76cb5154c7b6ef3ef0c68f2b87496",
          "sha256": "4d613077eacc2b87e5053deb00ce0a0f56d2aae6da763b1cd4cf9643da955928"
        },
        "downloads": -1,
        "filename": "cwt-1.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81d76cb5154c7b6ef3ef0c68f2b87496",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 84499,
        "upload_time": "2022-04-03T06:15:19",
        "upload_time_iso_8601": "2022-04-03T06:15:19.450822Z",
        "url": "https://files.pythonhosted.org/packages/60/aa/c771dd58d5f876896ca7f586be0319e9f932a5563bd4a544e3f708b2e333/cwt-1.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "073b0a190fee54c2a0a8b0254757b663b748beaaa219d056072971716e696026",
          "md5": "9ffee2193d18fe571bc3cb3b8defb842",
          "sha256": "50e245b7ffff59f5d6b89b5575699c987830b36426e8ecc630ae9d012f2c3c41"
        },
        "downloads": -1,
        "filename": "cwt-1.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9ffee2193d18fe571bc3cb3b8defb842",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 161563,
        "upload_time": "2022-04-03T06:15:22",
        "upload_time_iso_8601": "2022-04-03T06:15:22.058252Z",
        "url": "https://files.pythonhosted.org/packages/07/3b/0a190fee54c2a0a8b0254757b663b748beaaa219d056072971716e696026/cwt-1.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb5d70060de7b822421baa1fabfe2749f3a040c730f8dc28709aa67537a04ad5",
          "md5": "4363ef4a9118da5448b838a095396d72",
          "sha256": "25ff1d3cdc85704102bf67061784ffac31f601c391caba761c22522d9c1889d7"
        },
        "downloads": -1,
        "filename": "cwt-1.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4363ef4a9118da5448b838a095396d72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 84685,
        "upload_time": "2022-06-18T02:10:12",
        "upload_time_iso_8601": "2022-06-18T02:10:12.482995Z",
        "url": "https://files.pythonhosted.org/packages/bb/5d/70060de7b822421baa1fabfe2749f3a040c730f8dc28709aa67537a04ad5/cwt-1.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ba89fe485fdcc9a9f5a116ebfd296ef4bf860124ba02b173413091243109a65",
          "md5": "b36a36b54995d867bb2d7a8a133e6142",
          "sha256": "f9a3ee00c135afa14ed7e17b826454b60ca7332d133d8959d2cd28dd9da2bc75"
        },
        "downloads": -1,
        "filename": "cwt-1.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b36a36b54995d867bb2d7a8a133e6142",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 161819,
        "upload_time": "2022-06-18T02:10:14",
        "upload_time_iso_8601": "2022-06-18T02:10:14.993146Z",
        "url": "https://files.pythonhosted.org/packages/2b/a8/9fe485fdcc9a9f5a116ebfd296ef4bf860124ba02b173413091243109a65/cwt-1.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d22379998f17ccb34532cee87a93b0e736f3cc970cdec6d9770735854111e7e",
          "md5": "12ee06d17a4287251a5622a7e2d55dbe",
          "sha256": "abff876ac54ea65c54772319b5ab9eda1db33164142b88f3645a0d67668d2739"
        },
        "downloads": -1,
        "filename": "cwt-1.5.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12ee06d17a4287251a5622a7e2d55dbe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 84820,
        "upload_time": "2022-08-10T06:28:37",
        "upload_time_iso_8601": "2022-08-10T06:28:37.080404Z",
        "url": "https://files.pythonhosted.org/packages/6d/22/379998f17ccb34532cee87a93b0e736f3cc970cdec6d9770735854111e7e/cwt-1.5.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ce31f0974fe81bf396e214dae2c5d9f725b018cc2e8e2235860e46f7c8da1c0",
          "md5": "5ec309aaeb02cb43617ff25c2245eebb",
          "sha256": "b619224abfa0ad36a6ba2751a1e1da434d6987a96ad5603cf4fb72a91ad0d028"
        },
        "downloads": -1,
        "filename": "cwt-1.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5ec309aaeb02cb43617ff25c2245eebb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 161934,
        "upload_time": "2022-08-10T06:28:40",
        "upload_time_iso_8601": "2022-08-10T06:28:40.028919Z",
        "url": "https://files.pythonhosted.org/packages/0c/e3/1f0974fe81bf396e214dae2c5d9f725b018cc2e8e2235860e46f7c8da1c0/cwt-1.5.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5b46248fcc08cb25234dad48c7c3262dab09c9902513032a31300f7ae1694b5",
          "md5": "97e129e043bcff89ce7a4e3126569dcc",
          "sha256": "27239d0b240d45d63888ef54483f1781eb16054af68cd0f0b75b72c8575c3461"
        },
        "downloads": -1,
        "filename": "cwt-1.5.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97e129e043bcff89ce7a4e3126569dcc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 85419,
        "upload_time": "2022-10-08T09:01:21",
        "upload_time_iso_8601": "2022-10-08T09:01:21.308305Z",
        "url": "https://files.pythonhosted.org/packages/c5/b4/6248fcc08cb25234dad48c7c3262dab09c9902513032a31300f7ae1694b5/cwt-1.5.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c94552b110fed4dad13b2de301619b7e6b3af335389559df994f625de6b6e2e0",
          "md5": "26432fbb759698d6750fdc0fb3d21127",
          "sha256": "86d55123bca8166799a5354e5f80ac8fc935af8c3bba7cf2b2be9321277912c1"
        },
        "downloads": -1,
        "filename": "cwt-1.5.7.tar.gz",
        "has_sig": false,
        "md5_digest": "26432fbb759698d6750fdc0fb3d21127",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 162189,
        "upload_time": "2022-10-08T09:01:24",
        "upload_time_iso_8601": "2022-10-08T09:01:24.019130Z",
        "url": "https://files.pythonhosted.org/packages/c9/45/52b110fed4dad13b2de301619b7e6b3af335389559df994f625de6b6e2e0/cwt-1.5.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e36641642b70261d7e6c3441a1236692752015bdd3aebc94ba8e75ca2e1cab54",
          "md5": "1b35ac2dbd33e456852454197450aad8",
          "sha256": "ffca8b5d7efbcfa212fe50bc1bf6f40b67a18be52624f7ac12e6cfbeda7192ee"
        },
        "downloads": -1,
        "filename": "cwt-1.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b35ac2dbd33e456852454197450aad8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 77283,
        "upload_time": "2022-10-23T09:37:10",
        "upload_time_iso_8601": "2022-10-23T09:37:10.191878Z",
        "url": "https://files.pythonhosted.org/packages/e3/66/41642b70261d7e6c3441a1236692752015bdd3aebc94ba8e75ca2e1cab54/cwt-1.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0db6b11412b9c89115e76617ae8a470358e5fca3429af166b29dd6c2fbf95308",
          "md5": "b8e97df50c36b4c36d146385087a67ad",
          "sha256": "848f12dfaeb6616e8e688579cc547b6b793a283efde99c8a02396769b5dec298"
        },
        "downloads": -1,
        "filename": "cwt-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b8e97df50c36b4c36d146385087a67ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 156649,
        "upload_time": "2022-10-23T09:37:12",
        "upload_time_iso_8601": "2022-10-23T09:37:12.779487Z",
        "url": "https://files.pythonhosted.org/packages/0d/b6/b11412b9c89115e76617ae8a470358e5fca3429af166b29dd6c2fbf95308/cwt-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c44acb4480a70a5ce7d3d4e74ce84c6a3a4127f65b699be8a13d63979967e215",
          "md5": "168b0943464394bddc91bc552ce2ee9a",
          "sha256": "4e95aefe422d14a10709c2d2bd542853bb349f897adcf8d19a8cce664c13e38e"
        },
        "downloads": -1,
        "filename": "cwt-1.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "168b0943464394bddc91bc552ce2ee9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 89818,
        "upload_time": "2022-11-02T13:14:27",
        "upload_time_iso_8601": "2022-11-02T13:14:27.957731Z",
        "url": "https://files.pythonhosted.org/packages/c4/4a/cb4480a70a5ce7d3d4e74ce84c6a3a4127f65b699be8a13d63979967e215/cwt-1.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b370f3e1e9e38153a9900560f8ed0322002b50c7a35b76511b73008cda2de83",
          "md5": "75d2683d74d5d08ec738a34b86249de4",
          "sha256": "21cbe0846c0c635a9670ce57a45581bed61a53cf7998bb5fdae0023619911dc6"
        },
        "downloads": -1,
        "filename": "cwt-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "75d2683d74d5d08ec738a34b86249de4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 170024,
        "upload_time": "2022-11-02T13:14:30",
        "upload_time_iso_8601": "2022-11-02T13:14:30.755150Z",
        "url": "https://files.pythonhosted.org/packages/5b/37/0f3e1e9e38153a9900560f8ed0322002b50c7a35b76511b73008cda2de83/cwt-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c09b780641dc1d077bb4d8264d9ad3cd6868bcd2621a6dda24c0279e781c8536",
          "md5": "c15a292b08701184e13239c627184766",
          "sha256": "0e465446f4ee2e4d379cd5298dcef4f522d6603d2ec9fe0f657d5cde56a22b78"
        },
        "downloads": -1,
        "filename": "cwt-1.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c15a292b08701184e13239c627184766",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 76995,
        "upload_time": "2022-11-16T13:09:55",
        "upload_time_iso_8601": "2022-11-16T13:09:55.637511Z",
        "url": "https://files.pythonhosted.org/packages/c0/9b/780641dc1d077bb4d8264d9ad3cd6868bcd2621a6dda24c0279e781c8536/cwt-1.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93fbf7fc600eb186c46f8f0b3658a15df6eb08aafa377665db069033ec3dbcec",
          "md5": "ed269ea486fc7461c885f39ec9a01d68",
          "sha256": "a7fa5079ac1d692b916dac1e3e32fec3acfa5d1b7db37077a9d34a72a8f3b012"
        },
        "downloads": -1,
        "filename": "cwt-1.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ed269ea486fc7461c885f39ec9a01d68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 156236,
        "upload_time": "2022-11-16T13:09:58",
        "upload_time_iso_8601": "2022-11-16T13:09:58.223830Z",
        "url": "https://files.pythonhosted.org/packages/93/fb/f7fc600eb186c46f8f0b3658a15df6eb08aafa377665db069033ec3dbcec/cwt-1.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a8ab90c14bcb25f96f5efd52a079acc28b885cfcf0b9bdaecb35c223ceead9b",
          "md5": "49c94ef1b329c1866dcf1f96df69530d",
          "sha256": "1282625a926e0cdce8023ce9f24b956a8a3b014b4e5787ba1a95ff76a35b8add"
        },
        "downloads": -1,
        "filename": "cwt-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49c94ef1b329c1866dcf1f96df69530d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 77018,
        "upload_time": "2022-11-28T21:07:20",
        "upload_time_iso_8601": "2022-11-28T21:07:20.637372Z",
        "url": "https://files.pythonhosted.org/packages/5a/8a/b90c14bcb25f96f5efd52a079acc28b885cfcf0b9bdaecb35c223ceead9b/cwt-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5983b8c321c33a79d602c540ea5e2163cad6abf79558d474219f5629c787b999",
          "md5": "3e33d6613ca83951b8fcf64e4a5e7be8",
          "sha256": "75d0dcdaf96b24aeb35beda01abb48e6a0c6b3c35db50d8aef24eed774582646"
        },
        "downloads": -1,
        "filename": "cwt-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3e33d6613ca83951b8fcf64e4a5e7be8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 151512,
        "upload_time": "2022-11-28T21:07:23",
        "upload_time_iso_8601": "2022-11-28T21:07:23.577701Z",
        "url": "https://files.pythonhosted.org/packages/59/83/b8c321c33a79d602c540ea5e2163cad6abf79558d474219f5629c787b999/cwt-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2986ef495b963c173b3eba892159ca5d5a69dcab6cba4f1ba82a8139e79d66f7",
          "md5": "610b2194f47ba6f307a3e54a2dad4001",
          "sha256": "ca59cf8f66022a8b47f6d2cbb973be0b9fa6ffa5340c5ee302191cd2c73c06ca"
        },
        "downloads": -1,
        "filename": "cwt-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "610b2194f47ba6f307a3e54a2dad4001",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 77301,
        "upload_time": "2022-11-29T12:00:28",
        "upload_time_iso_8601": "2022-11-29T12:00:28.732201Z",
        "url": "https://files.pythonhosted.org/packages/29/86/ef495b963c173b3eba892159ca5d5a69dcab6cba4f1ba82a8139e79d66f7/cwt-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41c4c99097fa5370c045a29cbac9fed981921f1a7e5dc15066ac49266e5313ab",
          "md5": "7089878358ee587dda5ecf3d58caa0fa",
          "sha256": "2c208b07b000868cc36000caa4d23ab6ba59f98f298cfc2b46fe42397b460eee"
        },
        "downloads": -1,
        "filename": "cwt-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7089878358ee587dda5ecf3d58caa0fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 152431,
        "upload_time": "2022-11-29T12:00:31",
        "upload_time_iso_8601": "2022-11-29T12:00:31.978982Z",
        "url": "https://files.pythonhosted.org/packages/41/c4/c99097fa5370c045a29cbac9fed981921f1a7e5dc15066ac49266e5313ab/cwt-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63afba99aa07bac04eff73e80f2fd38c0e1f15ff4c0397ced8321bcf3bebe28a",
          "md5": "9a68bae0faaf18e7f73f8d8a3c3d9167",
          "sha256": "308191897c17d14c01db1d8365758d6573ac0ac38b88f39a5ecd2b2697c9f32f"
        },
        "downloads": -1,
        "filename": "cwt-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a68bae0faaf18e7f73f8d8a3c3d9167",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 80942,
        "upload_time": "2023-01-01T05:21:16",
        "upload_time_iso_8601": "2023-01-01T05:21:16.569729Z",
        "url": "https://files.pythonhosted.org/packages/63/af/ba99aa07bac04eff73e80f2fd38c0e1f15ff4c0397ced8321bcf3bebe28a/cwt-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10740b384351c1529511e0604c40fb2a72567b5e06db6415e06b29528c21c312",
          "md5": "add017feca836810c5f5b92c75a0f29d",
          "sha256": "447dc8c5b61cf2dfe3e04559a218fa13803be7e8b1795b3ebbad2a39ba1e8c59"
        },
        "downloads": -1,
        "filename": "cwt-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "add017feca836810c5f5b92c75a0f29d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 159816,
        "upload_time": "2023-01-01T05:21:18",
        "upload_time_iso_8601": "2023-01-01T05:21:18.784111Z",
        "url": "https://files.pythonhosted.org/packages/10/74/0b384351c1529511e0604c40fb2a72567b5e06db6415e06b29528c21c312/cwt-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5d840ed676f3bff069d031397c9686beb385e8740c4cab94b5907d4c18c5863",
          "md5": "67241aa2254d68c218b5f83f453e04c5",
          "sha256": "e5f216a1396c92013a771295922679e5542bf865f1613cea3550caeb7115e6a1"
        },
        "downloads": -1,
        "filename": "cwt-2.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67241aa2254d68c218b5f83f453e04c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 98806,
        "upload_time": "2023-02-18T12:47:41",
        "upload_time_iso_8601": "2023-02-18T12:47:41.471394Z",
        "url": "https://files.pythonhosted.org/packages/d5/d8/40ed676f3bff069d031397c9686beb385e8740c4cab94b5907d4c18c5863/cwt-2.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b6d1cafd345bfec08fe43d49e60b5a5b98a5d67f9c7c710b61d9b7957ca5d98",
          "md5": "0dd5ff7a23f69f7a95a408585b2949fc",
          "sha256": "a60e8b0267a5ae398e33530197baf771d773a741087062c4ab00f94197d93aa4"
        },
        "downloads": -1,
        "filename": "cwt-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0dd5ff7a23f69f7a95a408585b2949fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 177796,
        "upload_time": "2023-02-18T12:47:44",
        "upload_time_iso_8601": "2023-02-18T12:47:44.230007Z",
        "url": "https://files.pythonhosted.org/packages/9b/6d/1cafd345bfec08fe43d49e60b5a5b98a5d67f9c7c710b61d9b7957ca5d98/cwt-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82c24ce9a80ab86481c5003d782be04d93ef82d82503badcffef8da260f9ae67",
          "md5": "93aa1759c058f8fa33e1f05afd5af39b",
          "sha256": "8884f754681ac295b04646337cf5d68f770ba20b8b7cd00e30fb5ea36ed02182"
        },
        "downloads": -1,
        "filename": "cwt-2.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93aa1759c058f8fa33e1f05afd5af39b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 98954,
        "upload_time": "2023-03-26T01:19:06",
        "upload_time_iso_8601": "2023-03-26T01:19:06.198206Z",
        "url": "https://files.pythonhosted.org/packages/82/c2/4ce9a80ab86481c5003d782be04d93ef82d82503badcffef8da260f9ae67/cwt-2.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdf6b7cedc66fd2c51d1dafd739385dfde8ea86247ce9447195ea266e86caa5a",
          "md5": "25bfefc0e6983b84b06116dfdc854359",
          "sha256": "bad7b1970b2a298d7cbfd26dd111cbeb1f03a7eaa0f990735d8de2365b556d44"
        },
        "downloads": -1,
        "filename": "cwt-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25bfefc0e6983b84b06116dfdc854359",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 167680,
        "upload_time": "2023-03-26T01:19:08",
        "upload_time_iso_8601": "2023-03-26T01:19:08.821683Z",
        "url": "https://files.pythonhosted.org/packages/fd/f6/b7cedc66fd2c51d1dafd739385dfde8ea86247ce9447195ea266e86caa5a/cwt-2.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82c24ce9a80ab86481c5003d782be04d93ef82d82503badcffef8da260f9ae67",
        "md5": "93aa1759c058f8fa33e1f05afd5af39b",
        "sha256": "8884f754681ac295b04646337cf5d68f770ba20b8b7cd00e30fb5ea36ed02182"
      },
      "downloads": -1,
      "filename": "cwt-2.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "93aa1759c058f8fa33e1f05afd5af39b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 98954,
      "upload_time": "2023-03-26T01:19:06",
      "upload_time_iso_8601": "2023-03-26T01:19:06.198206Z",
      "url": "https://files.pythonhosted.org/packages/82/c2/4ce9a80ab86481c5003d782be04d93ef82d82503badcffef8da260f9ae67/cwt-2.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fdf6b7cedc66fd2c51d1dafd739385dfde8ea86247ce9447195ea266e86caa5a",
        "md5": "25bfefc0e6983b84b06116dfdc854359",
        "sha256": "bad7b1970b2a298d7cbfd26dd111cbeb1f03a7eaa0f990735d8de2365b556d44"
      },
      "downloads": -1,
      "filename": "cwt-2.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "25bfefc0e6983b84b06116dfdc854359",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 167680,
      "upload_time": "2023-03-26T01:19:08",
      "upload_time_iso_8601": "2023-03-26T01:19:08.821683Z",
      "url": "https://files.pythonhosted.org/packages/fd/f6/b7cedc66fd2c51d1dafd739385dfde8ea86247ce9447195ea266e86caa5a/cwt-2.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}