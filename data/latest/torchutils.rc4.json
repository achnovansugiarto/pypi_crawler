{
  "info": {
    "author": "Anjandeep Singh Sahni",
    "author_email": "sahni.anjandeep@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "==========\nTorchUtils\n==========\n\n.. image:: https://img.shields.io/pypi/v/torchutils?color=success\n    :target: https://img.shields.io/pypi/v/torchutils\n    :alt: PyPI\n\n.. image:: https://travis-ci.org/anjandeepsahni/torchutils.svg?branch=master\n    :target: https://travis-ci.org/anjandeepsahni/torchutils\n    :alt: Build Status\n\n.. image:: https://codecov.io/gh/anjandeepsahni/torchutils/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/anjandeepsahni/torchutils\n    :alt: Code Coverage\n\n.. image:: https://img.shields.io/github/release-date/anjandeepsahni/torchutils?color=informational&label=release%20date\n    :target: https://img.shields.io/github/release-date/anjandeepsahni/torchutils\n    :alt: Release Date\n\n.. image:: https://img.shields.io/github/license/anjandeepsahni/torchutils?color=informational\n    :target: https://img.shields.io/github/license/anjandeepsahni/torchutils\n    :alt: License\n\n.. image:: https://pepy.tech/badge/torchutils\n    :target: https://pepy.tech/badge/torchutils\n    :alt: Downloads\n\n|\n\n**TorchUtils** is a Python package providing helpful utility APIs for your\nPyTorch projects.\n\nFeatures\n--------\n\n* Save/load checkpoints_.\n* Calculate dataset statistics_ (mean, std, var). Also calculate and track running statistics of data.\n* Get/set `learning rate`_.\n* Track `evaluation metrics`_ such as accuracy, running loss, hamming loss.\n* Print `model summary`_. Supports: Linear/MLP, Convolution Network, Recurrent Network (RNN/LSTM/GRU), Recursive Network.\n* Calculate `model FLOPs`_.\n* Calculate total `model parameters`_.\n* Set `random seed`_.\n* Visualize `gradient flow`_ in your network.\n\nRequirements\n------------\n\n* PyTorch >= 1.0.0\n* Numpy >= 1.16.2\n* Matplotlib >= 3.0.3\n\nInstallation\n------------\n\nPyPi::\n\n    $ pip install torchutils\n\nConda::\n\n    $ conda install -c sahni torchutils\n\nDocumentation\n-------------\nDetailed API documentation is available here_.\n\n.. _here: https://anjandeepsahni.github.io/torchutils/readme.html\n\nExamples\n--------\n\n.. _checkpoints:\n\nCheckpoint:\n^^^^^^^^^^^\n\n.. code:: python\n\n    import torchvision\n    import torchutils as tu\n    import torch.optim as optim\n\n    model = torchvision.models.alexnet()\n    optimizer = optim.Adam(model.parameters())\n    scheduler = optim.lr_scheduler.ExponentialLR(optimizer, 0.1)\n    print('Original learning rate:', tu.get_lr(optimizer))\n\n    # load checkpoint\n    start_epoch = tu.load_checkpoint(model_path='.',\n                            ckpt_name='model_20190814-212442_e0_0.7531.pt',\n                            model=model, optimizer=optimizer,\n                            scheduler=scheduler)\n\n    print('Checkpoint learning rate:', tu.get_lr(optimizer))\n    print('Start from epoch:', start_epoch)\n\nOutput ::\n\n    Original learning rate: 0.001\n    Checkpoint learning rate: 0.1234\n    Start epoch: 1\n\n.. _statistics:\n\nStatistics:\n^^^^^^^^^^^\n\n.. code:: python\n\n    import torch\n    import torchutils as tu\n\n    # define your dataset and dataloader\n    dataset = MyDataset()\n    trainloader = torch.utils.data.DataLoader(dataset, batch_size=1,\n                                              num_workers=1,\n                                              shuffle=False)\n\n    # get statistics\n    stats = tu.get_dataset_stats(trainloader, verbose=True)\n    print('Mean:', stats['mean'])\n    print('Std:', stats['std'])\n\nOutput ::\n\n    Calculating dataset stats...\n    Batch 100/100\n    Mean: tensor([10000.0098,  9999.9795,  9999.9893])\n    Std: tensor([0.9969, 1.0003, 0.9972])\n\n.. _`learning rate`:\n\nLearning Rate:\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import torchvision\n    import torchutils as tu\n    import torch.optim as optim\n\n    model = torchvision.models.alexnet()\n    optimizer = optim.Adam(model.parameters())\n\n    # get learning rate\n    current_lr = tu.get_lr(optimizer)\n    print('Current learning rate:', current_lr)\n\n    # set learning rate\n    optimizer = tu.set_lr(optimizer, current_lr*0.1)\n    revised_lr = tu.get_lr(optimizer)\n    print('Revised learning rate:', revised_lr)\n\nOutput ::\n\n    Current learning rate: 0.001\n    Revised learning rate: 0.0001\n\n.. _`evaluation metrics`:\n\nEvaluation Metrics:\n^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import torch\n    import torch.nn as nn\n    import torch.optim as optim\n    import torchvision\n    import torchvision.transforms as transforms\n    import torchutils as tu\n\n    # define your network\n    model = MyNet()\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.Adam(model.parameters())\n    trainset = torchvision.datasets.MNIST(root='./data/', train=True,\n                                        download=True,\n                                        transform=transforms.ToTensor())\n    trainloader = torch.utils.data.DataLoader(trainset, batch_size=60,\n                                            shuffle=True, num_workers=2,\n                                            drop_last=True)\n    n_epochs = 1\n    model.train()\n    for epoch in range(n_epochs):\n        print('Epoch: %d/%d' % (epoch + 1, n_epochs))\n        # define loss tracker\n        loss_tracker = tu.RunningLoss()\n        for batch_idx, (data, target) in enumerate(trainloader):\n            optimizer.zero_grad()\n            outputs = model(data)\n            loss = criterion(outputs, target)\n            # update loss tracker with latest loss\n            loss_tracker.update(loss.item())\n            loss.backward()\n            optimizer.step()\n            if batch_idx % 100 == 0:\n                # easily print latest and average loss\n                print(loss_tracker)\n\nOutput ::\n\n    Epoch: 1/1\n    Loss - Val: 2.2921 Avg: 2.2921\n    Loss - Val: 0.5084 Avg: 0.9639\n    Loss - Val: 0.6027 Avg: 0.6588\n    Loss - Val: 0.1817 Avg: 0.5255\n    Loss - Val: 0.1005 Avg: 0.4493\n    Loss - Val: 0.2982 Avg: 0.3984\n    Loss - Val: 0.3103 Avg: 0.3615\n    Loss - Val: 0.0940 Avg: 0.3296\n    Loss - Val: 0.0957 Avg: 0.3071\n    Loss - Val: 0.0229 Avg: 0.2875\n\n.. _`model summary`:\n\nModel Summary:\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import torch\n    import torchvision\n    import torchutils as tu\n\n    model = torchvision.models.alexnet()\n    # easily print model summary\n    tu.get_model_summary(model, torch.rand((1, 3, 224, 224)))\n\nOutput ::\n\n    =========================================================================================\n    Layer                           Kernel             Output          Params           FLOPs\n    =========================================================================================\n    0_features.Conv2d_0         [3, 64, 11, 11]    [1, 64, 55, 55]       23,296    70,470,400\n    1_features.ReLU_1                         -    [1, 64, 55, 55]            0             0\n    2_features.MaxPool2d_2                    -    [1, 64, 27, 27]            0             0\n    3_features.Conv2d_3         [64, 192, 5, 5]   [1, 192, 27, 27]      307,392   224,088,768\n    4_features.ReLU_4                         -   [1, 192, 27, 27]            0             0\n    5_features.MaxPool2d_5                    -   [1, 192, 13, 13]            0             0\n    6_features.Conv2d_6        [192, 384, 3, 3]   [1, 384, 13, 13]      663,936   112,205,184\n    7_features.ReLU_7                         -   [1, 384, 13, 13]            0             0\n    8_features.Conv2d_8        [384, 256, 3, 3]   [1, 256, 13, 13]      884,992   149,563,648\n    9_features.ReLU_9                         -   [1, 256, 13, 13]            0             0\n    10_features.Conv2d_10      [256, 256, 3, 3]   [1, 256, 13, 13]      590,080    99,723,520\n    11_features.ReLU_11                       -   [1, 256, 13, 13]            0             0\n    12_features.MaxPool2d_12                  -     [1, 256, 6, 6]            0             0\n    13_classifier.Dropout_0                   -          [1, 9216]            0             0\n    14_classifier.Linear_1         [9216, 4096]          [1, 4096]   37,752,832    75,493,376\n    15_classifier.ReLU_2                      -          [1, 4096]            0             0\n    16_classifier.Dropout_3                   -          [1, 4096]            0             0\n    17_classifier.Linear_4         [4096, 4096]          [1, 4096]   16,781,312    33,550,336\n    18_classifier.ReLU_5                      -          [1, 4096]            0             0\n    19_classifier.Linear_6         [4096, 1000]          [1, 1000]    4,097,000     8,191,000\n    =========================================================================================\n    Total params: 61,100,840\n    Trainable params: 61,100,840\n    Non-trainable params: 0\n    Total FLOPs: 773,286,232 / 773.29 MFLOPs\n    -----------------------------------------------------------------------------------------\n    Input size (MB): 0.57\n    Forward/backward pass size (MB): 8.31\n    Params size (MB): 233.08\n    Estimated Total Size (MB): 241.96\n    =========================================================================================\n\n.. _`model FLOPs`:\n\nModel FLOPs:\n^^^^^^^^^^^^\n\n.. code:: python\n\n    import torch\n    import torchvision\n    import torchutils as tu\n\n    model = torchvision.models.alexnet()\n    # calculate model FLOPs\n    total_flops = tu.get_model_flops(model, torch.rand((1, 3, 224, 224)))\n    print('Total model FLOPs: {:,}'.format(total_flops))\n\nOutput ::\n\n    Total model FLOPs: 773,304,664\n\n.. _`model parameters`:\n\nModel Parameters:\n^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import torchvision\n    import torchutils as tu\n\n    model = torchvision.models.alexnet()\n    # calculate total model parameters\n    total_params = tu.get_model_param_count(model)\n    print('Total model params: {:,}'.format(total_params))\n\nOutput ::\n\n    Total model params: 61,100,840\n\n.. _`random seed`:\n\nRandom Seed:\n^^^^^^^^^^^^\n\n.. code:: python\n\n    import torchutils as tu\n\n    # set numpy, torch and cuda seed\n    tu.set_random_seed(2222)\n\n.. _`gradient flow`:\n\nGradient Flow:\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import torch\n    import torchvision\n    import torchutils as tu\n\n    criterion = torch.nn.CrossEntropyLoss()\n    net = torchvision.models.alexnet(num_classes=10)\n    out = net(torch.rand(1, 3, 224, 224))\n    ground_truth = torch.randint(0, 10, (1, ))\n    loss = criterion(out, ground_truth)\n    loss.backward()\n\n    # save model gradient flow to image\n    tu.plot_gradients(net, './grad_figures/grad_01.png', plot_type='line')\n\nSaved File\n\n.. image:: https://raw.githubusercontent.com/anjandeepsahni/torchutils/master/docs/_static/example_gradient_flow.png\n    :alt: Example Gradient Flow \n\nLicense\n-------\nTorchUtils is distributed under the MIT license, see LICENSE.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anjandeepsahni/torchutils.git",
    "keywords": "machine-learning deep-learning pytorch neuralnetwork",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchutils",
    "package_url": "https://pypi.org/project/torchutils/",
    "platform": "",
    "project_url": "https://pypi.org/project/torchutils/",
    "project_urls": {
      "Homepage": "https://github.com/anjandeepsahni/torchutils.git"
    },
    "release_url": "https://pypi.org/project/torchutils/0.0.4/",
    "requires_dist": [
      "torch (>=1.0.0)",
      "numpy (>=1.16.2)",
      "matplotlib (>=3.0.3)"
    ],
    "requires_python": "",
    "summary": "PyTorch utility APIs.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6506884,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da81e089225a52737e7f3551946d47ed7259e393dfcdf9121f74424caa6d7e3e",
          "md5": "965275ca87e9bdad0d7eb17e5df13509",
          "sha256": "6447289cc9c630f393f4368536698cb41a3c9e86fbbedae6e4445dc7ecd67995"
        },
        "downloads": -1,
        "filename": "torchutils-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "965275ca87e9bdad0d7eb17e5df13509",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4687,
        "upload_time": "2019-07-20T00:47:48",
        "upload_time_iso_8601": "2019-07-20T00:47:48.228099Z",
        "url": "https://files.pythonhosted.org/packages/da/81/e089225a52737e7f3551946d47ed7259e393dfcdf9121f74424caa6d7e3e/torchutils-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66303f2412f104da2d654a29ba536f758592202c3bb5d780d6730047cb1bea47",
          "md5": "c59384fb8e0243c9b1b8263840eef6aa",
          "sha256": "3118932cb9f854dc6b0591e9c17a856a7f390530ca1cb94eb51373dc7fe7dbc3"
        },
        "downloads": -1,
        "filename": "torchutils-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c59384fb8e0243c9b1b8263840eef6aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2587,
        "upload_time": "2019-07-20T00:47:50",
        "upload_time_iso_8601": "2019-07-20T00:47:50.472722Z",
        "url": "https://files.pythonhosted.org/packages/66/30/3f2412f104da2d654a29ba536f758592202c3bb5d780d6730047cb1bea47/torchutils-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5649e3ca846d4c7862d79200dd9a03fee40a023e1c83f7bb73aa1fde1ec46920",
          "md5": "ba08ab71d6ec36c04b4750f5176216d1",
          "sha256": "c6bfac7a2a0c7d44982b6c946c4df5f778a99f560fef73ec4cd1980b7294501c"
        },
        "downloads": -1,
        "filename": "torchutils-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba08ab71d6ec36c04b4750f5176216d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14275,
        "upload_time": "2019-08-25T03:38:19",
        "upload_time_iso_8601": "2019-08-25T03:38:19.255086Z",
        "url": "https://files.pythonhosted.org/packages/56/49/e3ca846d4c7862d79200dd9a03fee40a023e1c83f7bb73aa1fde1ec46920/torchutils-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "391844bf3e2ca4011aae3487ca1bbad3f580db74e462da28e8fbe91060f13749",
          "md5": "aef54b6816e4190ca828153f52b7ae97",
          "sha256": "fb63a2f4fa98ddda5efe267d9cba934dd1121e8d6acf95518fd7f8bf3bc5ca37"
        },
        "downloads": -1,
        "filename": "torchutils-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "aef54b6816e4190ca828153f52b7ae97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10532,
        "upload_time": "2019-08-25T03:38:21",
        "upload_time_iso_8601": "2019-08-25T03:38:21.796466Z",
        "url": "https://files.pythonhosted.org/packages/39/18/44bf3e2ca4011aae3487ca1bbad3f580db74e462da28e8fbe91060f13749/torchutils-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e644976e99710312e1e39992fc539e2e9e034c9185f080c56a0758f88148357",
          "md5": "edad126d5cd3d5a551309296d27c5c8d",
          "sha256": "f222898b7c6e940dfca939468b752699ed20e9d704ba71458be2fe8f5776d3d0"
        },
        "downloads": -1,
        "filename": "torchutils-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edad126d5cd3d5a551309296d27c5c8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20532,
        "upload_time": "2020-01-20T20:34:05",
        "upload_time_iso_8601": "2020-01-20T20:34:05.654979Z",
        "url": "https://files.pythonhosted.org/packages/1e/64/4976e99710312e1e39992fc539e2e9e034c9185f080c56a0758f88148357/torchutils-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5de37db4187e12c0b19b03648784b14669d0e0f2bb79114c45d4e846661874cd",
          "md5": "53325485d1de4df5735a98b9828d43f1",
          "sha256": "dd286afa211a63e1642bc214f955696a4109e3659896e978622b15f461574cdd"
        },
        "downloads": -1,
        "filename": "torchutils-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "53325485d1de4df5735a98b9828d43f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18904,
        "upload_time": "2020-01-20T20:34:07",
        "upload_time_iso_8601": "2020-01-20T20:34:07.799778Z",
        "url": "https://files.pythonhosted.org/packages/5d/e3/7db4187e12c0b19b03648784b14669d0e0f2bb79114c45d4e846661874cd/torchutils-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13df9aeb5d58faec3f07f6babe54eaa51dbd8ded4c267976c9ce95889b085e4d",
          "md5": "e87eff6f26ed2281a046dc26baec17b0",
          "sha256": "95cda304172e39d5861b0c2ad0689fe6d53a7bf198fc64fe74a50640f822d176"
        },
        "downloads": -1,
        "filename": "torchutils-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e87eff6f26ed2281a046dc26baec17b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20792,
        "upload_time": "2020-01-23T14:36:19",
        "upload_time_iso_8601": "2020-01-23T14:36:19.823998Z",
        "url": "https://files.pythonhosted.org/packages/13/df/9aeb5d58faec3f07f6babe54eaa51dbd8ded4c267976c9ce95889b085e4d/torchutils-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75a39a89e6bd461929c92b46a5f27f7603ed84c4e41a0d0cdb2c6ee42324fe95",
          "md5": "e2dfa9a888c6af88ead7dcc07cd57bf5",
          "sha256": "3bfa65c0c6a22a8ae39c96d8e1c9252b6fb5a64a8f24f66d9e6cefb92783cb07"
        },
        "downloads": -1,
        "filename": "torchutils-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e2dfa9a888c6af88ead7dcc07cd57bf5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19616,
        "upload_time": "2020-01-23T14:36:21",
        "upload_time_iso_8601": "2020-01-23T14:36:21.766399Z",
        "url": "https://files.pythonhosted.org/packages/75/a3/9a89e6bd461929c92b46a5f27f7603ed84c4e41a0d0cdb2c6ee42324fe95/torchutils-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13df9aeb5d58faec3f07f6babe54eaa51dbd8ded4c267976c9ce95889b085e4d",
        "md5": "e87eff6f26ed2281a046dc26baec17b0",
        "sha256": "95cda304172e39d5861b0c2ad0689fe6d53a7bf198fc64fe74a50640f822d176"
      },
      "downloads": -1,
      "filename": "torchutils-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e87eff6f26ed2281a046dc26baec17b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20792,
      "upload_time": "2020-01-23T14:36:19",
      "upload_time_iso_8601": "2020-01-23T14:36:19.823998Z",
      "url": "https://files.pythonhosted.org/packages/13/df/9aeb5d58faec3f07f6babe54eaa51dbd8ded4c267976c9ce95889b085e4d/torchutils-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75a39a89e6bd461929c92b46a5f27f7603ed84c4e41a0d0cdb2c6ee42324fe95",
        "md5": "e2dfa9a888c6af88ead7dcc07cd57bf5",
        "sha256": "3bfa65c0c6a22a8ae39c96d8e1c9252b6fb5a64a8f24f66d9e6cefb92783cb07"
      },
      "downloads": -1,
      "filename": "torchutils-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e2dfa9a888c6af88ead7dcc07cd57bf5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19616,
      "upload_time": "2020-01-23T14:36:21",
      "upload_time_iso_8601": "2020-01-23T14:36:21.766399Z",
      "url": "https://files.pythonhosted.org/packages/75/a3/9a89e6bd461929c92b46a5f27f7603ed84c4e41a0d0cdb2c6ee42324fe95/torchutils-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}