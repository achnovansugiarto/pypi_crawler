{
  "info": {
    "author": "Palani-SN",
    "author_email": "psn396@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# IdaiKuri (Generic Simple Template Engine)\n\n- A Generic Simple Template Engine which maps Function Calls and Variables in templates(based on regex pattern) with code to create Files as variants of the Template Choosen.\n- Check out the example code in repo ( https://github.com/Palani-SN/IdaiKuri ) for reference\n\n## Filler\n\n- To be used to fill a template from code using \n   - variables and function definitions in code and\n   - function calls in template\n- Sample usage of the file is as given below (Refer TemplateFiles for template examples)\n\n```python\nfrom IdaiKuri.Filler import FillerTemplateEngine as TemplateEngine\nfrom IdaiKuri.Filler import Interface\n\nTE = TemplateEngine();\nTE.InFile(\"TemplateFiles/Template_DefaultCase1.html\", True); \ntemp_vars = TE.VARS();\n\ntemp_vars.Portrait = \"images/GuidoVanRossum.png\";\ntemp_vars.Logo = \"images/PythonLogo.png\";\ntemp_vars.FullName = \"Guido Van Rossum\";\ntemp_vars.Position = \"Python's Benevolent Dictator for life\";\ntemp_vars.Quote = \"In Python, every symbol you type is essential.\";\ntemp_vars.Author = \"Guido van Rossum\";\nresult_dict = TE.OutFile(temp_vars, \"GeneratedFiles/GuidoVanRossum_DefaultCase1.html\");\n```\n### CodeFlow\n\n![](https://github.com/Palani-SN/IdaiKuri/blob/master/FillerCodeflow.PNG?raw=true)\n\n### Interface (Decorator)\n\n- Interface is the decorator to be used to define methods in child class extended from Filler.py/TemplateEngine class\n- Sample code for using Interface decorator is shown below (Refer Examples for more understanding)\n\n```python\nfrom IdaiKuri.Filler import FillerTemplateEngine as TemplateEngine\nfrom IdaiKuri.Filler import Interface\n\nclass AdvancedTemplate(TemplateEngine):\n    @Interface\n    def get_portrait(self, name):\n        return \"images/\"+name.replace(\" \",\"\")+\".png\";\n    @Interface\n    def get_logo(self, contrib):\n        return \"images/\"+contrib+\"Logo.png\"\n```\n### TemplateEngine (class from Filler.py)\n\n- Initialising class helps to configure the RegexEdges and it also validates the pattern based on the second parameter FuncCallTemplate\n- Arguments\n  - Arg1 - RegexEdges (a tuple with start and end delimiters)\n  - Arg2 - FuncCallTemplate is the sample string with \"self.FUNC_CALL()\" keyword to validate the RegexEdges\n- Sample regex configurations in TemplateEngine Initialisation is shown below.\n\n```python\n## Default RegexEdges=(\"{{\", \"}}\"),\n## FuncCallTemplate=\"{{self.FUNC_CALL()}}\"\nTE1 = TemplateEngine();\n\n## RegexEdges=(\"_StArT_\", \"_eNd_\"),\n## FuncCallTemplate=\"_StArT_self.FUNC_CALL()_eNd_\"\nTE2 = TemplateEngine((\"_StArT_\", \"_eNd_\"), \"_StArT_self.FUNC_CALL()_eNd_\");\n\n## RegexEdges=(\"<<\", \">>\"),\n## FuncCallTemplate=\"<<self.FUNC_CALL()>>\"\nTE3 = TemplateEngine((\"<<\", \">>\"), \"<<self.FUNC_CALL()>>\");\n\n## RegexEdges=(\"\\\\[\\\\[\", \"\\\\]\\\\]\"),\n## FuncCallTemplate=\"[[self.FUNC_CALL()]]\"\nTE4 = TemplateEngine((\"\\\\[\\\\[\", \"\\\\]\\\\]\"), \"[[self.FUNC_CALL()]]\");\n\n## RegexEdges=(\"{\\\\[<{\\\\[\", \"}\\\\]>}\\\\]\"),\n## FuncCallTemplate=\"{[<{[self.FUNC_CALL()}]>}]\"\nTE5 = TemplateEngine((\"{\\\\[<{\\\\[\", \"}\\\\]>}\\\\]\"), \"{[<{[self.FUNC_CALL()}]>}]\");\n```\n#### InFile()\n\n- Gets the Template Name/Path of the template function calls that is going to be used.\n- Will initialize the MapDict for updating the function calls in the template.\n\n```python\n## Definition\ndef InFile(self, TemplateName, DebugTokens=False):\n```\n- Arguments\n  - Arg1 - TemplateName (a String that contains the Path/Name of the template)\n  - Arg2 - DebugTokens (If True prints the function calls of template, If false doesnt print)\n\n#### VARS()\n\n- Returns an Instance of the an empty class, for argument variables storage.\n\n#### OutFile()\n\n- Defines the file Name/Path that needs to be generated with the filled content from the template.\n- It edits the template based on the dependencies/arguments of the template function calls.\n\n```python\n## Definition\ndef OutFile(self, FuncArgVars, UniqueName):\n```\n- Arguments\n  - Arg 1 - FuncArgVars (an instance of class with appropriate members filled)\n  - Arg 2 - UniqueName (filename to be generated with the edited template content)\n- Returns \n  - MapDict -  the result as a dictionary ( keys : func_calls and values : Return_values)\n\n## Parser\n\n- To be used to parse a file by comparing\n  - function calls in a template and\n  - file that is generated using the template\n- Sample usage of the file is as given below (Refer TemplateFiles for template examples)\n\n```python\nfrom IdaiKuri.Parser import ParserTemplateEngine as TemplateEngine\n\nPE = TemplateEngine();\nprint(\"\\n\", \"Template_DefaultCase1.html\", \"GuidoVanRossum_DefaultCase1.html\", \"\\n\");\ndiffdict = PE.Root(\"TemplateFiles/Template_DefaultCase1.html\", \"GeneratedFiles/GuidoVanRossum_DefaultCase1.html\");\nfor key in diffdict.keys():\n    print(\"   \", key, \"->\", diffdict[key]);\n```\n### CodeFlow\n\n![](https://github.com/Palani-SN/IdaiKuri/blob/master/ParserCodeflow.PNG?raw=true)\n\n### TemplateEngine (class from Parser.py)\n\n- Initialising class helps to configure the RegexEdges and it also validates the pattern based on the second parameter FuncCallTemplate\n- Arguments\n  - Arg1 - RegexEdges (a tuple with start and end delimiters)\n  - Arg2 - FuncCallTemplate is the sample string with \"self.FUNC_CALL()\" keyword to validate the RegexEdges\n- Sample regex configurations in TemplateEngine Initialisation is shown below\n\n```python\n## Default RegexEdges=(\"{{\", \"}}\"),\n## FuncCallTemplate=\"{{self.FUNC_CALL()}}\"\nTE1 = TemplateEngine();\n\n## RegexEdges=(\"_StArT_\", \"_eNd_\"),\n## FuncCallTemplate=\"_StArT_self.FUNC_CALL()_eNd_\"\nTE2 = TemplateEngine((\"_StArT_\", \"_eNd_\"), \"_StArT_self.FUNC_CALL()_eNd_\");\n\n## RegexEdges=(\"<<\", \">>\"),\n## FuncCallTemplate=\"<<self.FUNC_CALL()>>\"\nTE3 = TemplateEngine((\"<<\", \">>\"), \"<<self.FUNC_CALL()>>\");\n\n## RegexEdges=(\"\\\\[\\\\[\", \"\\\\]\\\\]\"),\n## FuncCallTemplate=\"[[self.FUNC_CALL()]]\"\nTE4 = TemplateEngine((\"\\\\[\\\\[\", \"\\\\]\\\\]\"), \"[[self.FUNC_CALL()]]\");\n\n## RegexEdges=(\"{\\\\[<{\\\\[\", \"}\\\\]>}\\\\]\"),\n## FuncCallTemplate=\"{[<{[self.FUNC_CALL()}]>}]\"\nTE5 = TemplateEngine((\"{\\\\[<{\\\\[\", \"}\\\\]>}\\\\]\"), \"{[<{[self.FUNC_CALL()}]>}]\");\n```\n#### Root()\n\n- Parses the template Name/Path and file Name/Path.\n- Returns the differences between them as a dict.\n\n```python\n## Definition\ndef Root(self, TemplateName, FileName):\n```\n- Arguments\n  - Arg 1 - TemplateName (Name of the template to be edited)\n  - Arg 2 - FileName (filename to be generated with the edited template content)\n- Returns \n  - RootDict - the result as a dictionary (keys : func_calls and values : Return_values)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Palani-SN/IdaiKuri",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "IdaiKuri",
    "package_url": "https://pypi.org/project/IdaiKuri/",
    "platform": null,
    "project_url": "https://pypi.org/project/IdaiKuri/",
    "project_urls": {
      "Homepage": "https://github.com/Palani-SN/IdaiKuri"
    },
    "release_url": "https://pypi.org/project/IdaiKuri/1.0.0/",
    "requires_dist": [
      "blessings (~=1.7)",
      "pytest (>=3.7) ; extra == 'dev'",
      "check-manifest ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Generic Simple Template Engine for Filling and Parsing",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13265178,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e02c6ab2f9d4b90447cc066d4fb9cd9f8bcd8fa06eb45e4488c91662e009ed55",
          "md5": "3b9a72569a2d0167aff31d06b653661b",
          "sha256": "f78134deb76d03610f27f2778b00827e66f6126f329cd8222cafc06129773c4b"
        },
        "downloads": -1,
        "filename": "IdaiKuri-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b9a72569a2d0167aff31d06b653661b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19366,
        "upload_time": "2021-09-19T12:41:59",
        "upload_time_iso_8601": "2021-09-19T12:41:59.575166Z",
        "url": "https://files.pythonhosted.org/packages/e0/2c/6ab2f9d4b90447cc066d4fb9cd9f8bcd8fa06eb45e4488c91662e009ed55/IdaiKuri-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab3edbe005aefe2a9829b1021654e77bb448fff7016a2c3b2bddb0ccce634174",
          "md5": "84d4d95d2c62505e5246e0449c6d61c3",
          "sha256": "1ee847d939d78b9c761102db71be91654b9c849197ec2aa54caced5c169ed160"
        },
        "downloads": -1,
        "filename": "IdaiKuri-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "84d4d95d2c62505e5246e0449c6d61c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 94097,
        "upload_time": "2021-09-19T12:42:01",
        "upload_time_iso_8601": "2021-09-19T12:42:01.379917Z",
        "url": "https://files.pythonhosted.org/packages/ab/3e/dbe005aefe2a9829b1021654e77bb448fff7016a2c3b2bddb0ccce634174/IdaiKuri-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6ef9d48094ebfe2c82f0aa096d08e41aa74d901909737e0bb529fb917b1485f",
          "md5": "04b89808d422be959b691e79783e08ec",
          "sha256": "eda0dda8b87a011c1ce1833a4d7b5b706fde8a1965c5c2406a7be85fcb6175e7"
        },
        "downloads": -1,
        "filename": "IdaiKuri-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04b89808d422be959b691e79783e08ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19394,
        "upload_time": "2021-09-19T14:24:47",
        "upload_time_iso_8601": "2021-09-19T14:24:47.951153Z",
        "url": "https://files.pythonhosted.org/packages/b6/ef/9d48094ebfe2c82f0aa096d08e41aa74d901909737e0bb529fb917b1485f/IdaiKuri-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7ecea672411c01e722ceb6c9d6ca68d35d47b1f94da0beb4f668f951859f5a2",
          "md5": "44edec3e7b08709df25a84e3ee3d0a79",
          "sha256": "855c5280b6ee330df58129beae2b08ae7bb4e0371269b4169b4bb23d787b5058"
        },
        "downloads": -1,
        "filename": "IdaiKuri-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "44edec3e7b08709df25a84e3ee3d0a79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 94132,
        "upload_time": "2021-09-19T14:24:49",
        "upload_time_iso_8601": "2021-09-19T14:24:49.892244Z",
        "url": "https://files.pythonhosted.org/packages/c7/ec/ea672411c01e722ceb6c9d6ca68d35d47b1f94da0beb4f668f951859f5a2/IdaiKuri-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e17d02fa1c809f41f2a49e607997fbdb90c0ad0bd92b3572dae19bdbb8668908",
          "md5": "23a348d0857e96aa3b389d724f3a41d9",
          "sha256": "6575a8a5bdf47cabf7bd19e2b906421d9d41bffeed16f0dd68e9603d4d4165e9"
        },
        "downloads": -1,
        "filename": "IdaiKuri-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23a348d0857e96aa3b389d724f3a41d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19423,
        "upload_time": "2021-09-19T15:15:30",
        "upload_time_iso_8601": "2021-09-19T15:15:30.820840Z",
        "url": "https://files.pythonhosted.org/packages/e1/7d/02fa1c809f41f2a49e607997fbdb90c0ad0bd92b3572dae19bdbb8668908/IdaiKuri-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2b9325d102372ec9d1d324b069a1654b698de0802012312b1f1cdaa03b5ffb9",
          "md5": "492f74eac8e71d1a7e5a4fb5bd20f051",
          "sha256": "c6107203e1c6bcac38d5e33ae75804d54e0c0ea0d4d3493e892f4fd71374ec58"
        },
        "downloads": -1,
        "filename": "IdaiKuri-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "492f74eac8e71d1a7e5a4fb5bd20f051",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 94193,
        "upload_time": "2021-09-19T15:15:32",
        "upload_time_iso_8601": "2021-09-19T15:15:32.460112Z",
        "url": "https://files.pythonhosted.org/packages/f2/b9/325d102372ec9d1d324b069a1654b698de0802012312b1f1cdaa03b5ffb9/IdaiKuri-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccab9b0d7bf8c29bf7306528f6f449bec9b6b9f567449ac159979ab31816631e",
          "md5": "ae9a128d75e434a48017338e4bd0de8b",
          "sha256": "a990547d5be8dbb3a08c500b2be5a74e8fb7fac8c0e0f30b70a934536b0c0bde"
        },
        "downloads": -1,
        "filename": "IdaiKuri-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae9a128d75e434a48017338e4bd0de8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19419,
        "upload_time": "2022-03-23T06:45:01",
        "upload_time_iso_8601": "2022-03-23T06:45:01.941016Z",
        "url": "https://files.pythonhosted.org/packages/cc/ab/9b0d7bf8c29bf7306528f6f449bec9b6b9f567449ac159979ab31816631e/IdaiKuri-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95b03275c7bf8105c42d2a6325bab1aee7a7b4f875de38f21ce3aa1dbb98daaa",
          "md5": "3e2cdddfa32f21ad71760923f6d0c5f7",
          "sha256": "ac466749742ff4f5625d7289c4f40e63d36342ca60ddbcad5165875302621ad9"
        },
        "downloads": -1,
        "filename": "IdaiKuri-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3e2cdddfa32f21ad71760923f6d0c5f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 93746,
        "upload_time": "2022-03-23T06:45:04",
        "upload_time_iso_8601": "2022-03-23T06:45:04.268887Z",
        "url": "https://files.pythonhosted.org/packages/95/b0/3275c7bf8105c42d2a6325bab1aee7a7b4f875de38f21ce3aa1dbb98daaa/IdaiKuri-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccab9b0d7bf8c29bf7306528f6f449bec9b6b9f567449ac159979ab31816631e",
        "md5": "ae9a128d75e434a48017338e4bd0de8b",
        "sha256": "a990547d5be8dbb3a08c500b2be5a74e8fb7fac8c0e0f30b70a934536b0c0bde"
      },
      "downloads": -1,
      "filename": "IdaiKuri-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ae9a128d75e434a48017338e4bd0de8b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19419,
      "upload_time": "2022-03-23T06:45:01",
      "upload_time_iso_8601": "2022-03-23T06:45:01.941016Z",
      "url": "https://files.pythonhosted.org/packages/cc/ab/9b0d7bf8c29bf7306528f6f449bec9b6b9f567449ac159979ab31816631e/IdaiKuri-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95b03275c7bf8105c42d2a6325bab1aee7a7b4f875de38f21ce3aa1dbb98daaa",
        "md5": "3e2cdddfa32f21ad71760923f6d0c5f7",
        "sha256": "ac466749742ff4f5625d7289c4f40e63d36342ca60ddbcad5165875302621ad9"
      },
      "downloads": -1,
      "filename": "IdaiKuri-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3e2cdddfa32f21ad71760923f6d0c5f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 93746,
      "upload_time": "2022-03-23T06:45:04",
      "upload_time_iso_8601": "2022-03-23T06:45:04.268887Z",
      "url": "https://files.pythonhosted.org/packages/95/b0/3275c7bf8105c42d2a6325bab1aee7a7b4f875de38f21ce3aa1dbb98daaa/IdaiKuri-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}