{
  "info": {
    "author": "Taku Kudo",
    "author_email": "taku@google.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# SentencePiece Python Wrapper\n\nPython wrapper for SentencePiece. This API will offer the encoding, decoding and training of Sentencepiece.\n\n## Build and Install SentencePiece\nFor Linux (x64/i686), macOS, and Windows(win32/x64) environment, you can simply use pip command to install SentencePiece python module.\n\n```\n% pip install sentencepiece\n```\n\nTo build and install the Python wrapper from source, please install [SentencePiece C++](https://github.com/google/sentencepiece#c-from-source) and try the following commands:\n```\n% python setup.py build\n% sudo python setup.py install\n```\n\nIf you don’t have write permission to the global site-packages directory or don’t want to install into it, please try:\n```\n% python setup.py install --user\n```\n\n## Usage\n\nSee [this google colab page](https://github.com/google/sentencepiece/blob/master/python/sentencepiece_python_module_example.ipynb) to run sentencepiece interactively. (Note: this sample is written in old interface.)\n\n### Segmentation\n```\n% python\n>>> import sentencepiece as spm\n>>> sp = spm.SentencePieceProcessor(model_file='test/test_model.model')\n>>> sp.encode('This is a test')\n[284, 47, 11, 4, 15, 400]\n>>> sp.encode(['This is a test', 'Hello world'], out_type=int)\n[[284, 47, 11, 4, 15, 400], [151, 88, 21, 887]]\n>>> sp.encode('This is a test', out_type=str)\n['▁This', '▁is', '▁a', '▁', 't', 'est']\n>>> sp.encode(['This is a test', 'Hello world'], out_type=str)\n[['▁This', '▁is', '▁a', '▁', 't', 'est'], ['▁He', 'll', 'o', '▁world']]\n>>> for _ in range(10):\n...     sp.encode('This is a test', out_type=str, enable_sampling=True, alpha=0.1, nbest_size=-1)\n... \n['▁', 'This', '▁', 'is', '▁a', '▁', 't', 'e', 'st']\n['▁T', 'h', 'i', 's', '▁is', '▁a', '▁', 'te', 's', 't']\n['▁T', 'h', 'is', '▁', 'is', '▁', 'a', '▁', 't', 'est']\n['▁', 'This', '▁is', '▁', 'a', '▁', 't', 'e', 'st']\n['▁', 'This', '▁', 'is', '▁', 'a', '▁', 't', 'e', 's', 't']\n['▁This', '▁is', '▁a', '▁', 'te', 's', 't']\n['▁This', '▁is', '▁', 'a', '▁', 't', 'e', 'st']\n['▁', 'T', 'h', 'is', '▁', 'is', '▁', 'a', '▁', 'te', 'st']\n['▁', 'This', '▁', 'i', 's', '▁a', '▁', 't', 'e', 'st']\n['▁This', '▁', 'is', '▁a', '▁', 't', 'est']\n>>> sp.decode([284, 47, 11, 4, 15, 400])\n'This is a test'\n>>> sp.decode([[284, 47, 11, 4, 15, 400], [151, 88, 21, 887]])\n['This is a test', 'Hello world']\n>>> sp.decode(['▁', 'This', '▁', 'is', '▁a', '▁', 't', 'e', 'st'])\n'This is a test'\n>>> sp.decode([['▁This', '▁is', '▁a', '▁', 't', 'est'], ['▁He', 'll', 'o', '▁world']])\n['This is a test', 'Hello world']\n>>> sp.get_piece_size()\n1000\n>>> sp.id_to_piece(2)\n'</s>'\n>>> sp.id_to_piece([2, 3, 4])\n['</s>', '\\r', '▁']\n>>> sp.piece_to_id('<s>')\n1\n>>> sp.piece_to_id(['</s>', '\\r', '▁'])\n[2, 3, 4]\n>>> len(sp)\n1000\n>>> sp['</s>']\n2\n```\n\n### Model Training\nTraining is performed by passing parameters of [spm_train](https://github.com/google/sentencepiece#train-sentencepiece-model) to  SentencePieceTrainer.train() function.\n\n```\n>>> import sentencepiece as spm\n>>> spm.SentencePieceTrainer.train(input='test/botchan.txt', model_prefix='m', vocab_size=1000, user_defined_symbols=['foo', 'bar'])\nsentencepiece_trainer.cc(73) LOG(INFO) Starts training with : \ntrainer_spec {\n  input: test/botchan.txt\n  .. snip\nunigram_model_trainer.cc(500) LOG(INFO) EM sub_iter=1 size=1188 obj=10.2839 num_tokens=32182 num_tokens/piece=27.0892\nunigram_model_trainer.cc(500) LOG(INFO) EM sub_iter=0 size=1100 obj=10.4269 num_tokens=33001 num_tokens/piece=30.0009\nunigram_model_trainer.cc(500) LOG(INFO) EM sub_iter=1 size=1100 obj=10.4069 num_tokens=33002 num_tokens/piece=30.0018\ntrainer_interface.cc(595) LOG(INFO) Saving model: m.model\ntrainer_interface.cc(619) LOG(INFO) Saving vocabs: m.vocab\n>>>\n```\n\n### Training without local filesystem\nSentencepiece trainer can receive any iterable object to feed training sentences. You can also pass a file object (instance with write() method) to emit the output model to any devices. These features are useful to run sentencepiece on environment that have limited access to the local file system (e.g., Google colab.)\n\n```\nimport urllib.request\nimport io\nimport sentencepiece as spm\n\n# Loads model from URL as iterator and stores the model to BytesIO.\nmodel = io.BytesIO()\nwith urllib.request.urlopen(\n    'https://raw.githubusercontent.com/google/sentencepiece/master/data/botchan.txt'\n) as response:\n  spm.SentencePieceTrainer.train(\n      sentence_iterator=response, model_writer=model, vocab_size=1000)\n\n# Serialize the model as file.\n# with open('out.model', 'wb') as f:\n#   f.write(model.getvalue())\n\n# Directly load the model from serialized model.\nsp = spm.SentencePieceProcessor(model_proto=model.getvalue())\nprint(sp.encode('this is test'))\n```\n\n\n### Segmentation (old interface)\n```\n% python\n>>> import sentencepiece as spm\n>>> sp = spm.SentencePieceProcessor()\n>>> sp.Load(\"test/test_model.model\")\nTrue\n>>> sp.EncodeAsPieces(\"This is a test\")\n['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'est']\n>>> sp.EncodeAsIds(\"This is a test\")\n[284, 47, 11, 4, 15, 400]\n>>> sp.DecodePieces(['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'est'])\n'This is a test'\n>>> sp.NBestEncodeAsPieces(\"This is a test\", 5)\n[['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'est'], ['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 'te', 'st'], ['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 'te', 's', 't'], ['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'e', 'st'], ['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'es', 't']]\n>>> for x in range(10):\n...     sp.SampleEncodeAsPieces(\"This is a test\", -1, 0.1)\n...\n['\\xe2\\x96\\x81', 'T', 'h', 'i', 's', '\\xe2\\x96\\x81', 'is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'e', 's', 't']\n['\\xe2\\x96\\x81T', 'h', 'is', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81', 'a', '\\xe2\\x96\\x81', 't', 'est']\n['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81', 'a', '\\xe2\\x96\\x81', 't', 'e', 'st']\n['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'e', 'st']\n['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'e', 's', 't']\n['\\xe2\\x96\\x81T', 'h', 'is', '\\xe2\\x96\\x81', 'i', 's', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 'te', 's', 't']\n['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81', 'is', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 'te', 's', 't']\n['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81', 'i', 's', '\\xe2\\x96\\x81a', '\\xe2\\x96\\x81', 't', 'e', 'st']\n['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81', 'is', '\\xe2\\x96\\x81', 'a', '\\xe2\\x96\\x81', 't', 'e', 'st']\n['\\xe2\\x96\\x81This', '\\xe2\\x96\\x81', 'i', 's', '\\xe2\\x96\\x81', 'a', '\\xe2\\x96\\x81', 'te', 's', 't']\n>>> sp.DecodeIds([284, 47, 11, 4, 15, 400])\n'This is a test'\n>>> sp.GetPieceSize()\n1000\n>>> sp.IdToPiece(2)\n'</s>'\n>>> sp.PieceToId('</s>')\n2\n>>> len(sp)\n1000\n>>> sp['</s>']\n2\n```\n\n### Model Training (old interface)\nTraining is performed by passing parameters of [spm_train](https://github.com/google/sentencepiece#train-sentencepiece-model) to  SentencePieceTrainer.Train() function.\n\n```\n>>> import sentencepiece as spm\n>>> spm.SentencePieceTrainer.Train('--input=test/botchan.txt --model_prefix=m --vocab_size=1000')\nunigram_model_trainer.cc(494) LOG(INFO) Starts training with : \ninput: \"test/botchan.txt\"\nmodel_prefix: \"m\"\nmodel_type: UNIGRAM\n..snip..\nunigram_model_trainer.cc(529) LOG(INFO) EM sub_iter=0 size=1239 obj=10.4055 num_tokens=36256 num_tokens/piece=29.2623\nunigram_model_trainer.cc(529) LOG(INFO) EM sub_iter=1 size=1239 obj=10.3187 num_tokens=36256 num_tokens/piece=29.2623\nunigram_model_trainer.cc(529) LOG(INFO) EM sub_iter=0 size=1100 obj=10.5285 num_tokens=37633 num_tokens/piece=34.2118\nunigram_model_trainer.cc(529) LOG(INFO) EM sub_iter=1 size=1100 obj=10.4973 num_tokens=37630 num_tokens/piece=34.2091\ntrainer_interface.cc(284) LOG(INFO) Saving model: m.model\ntrainer_interface.cc(293) LOG(INFO) Saving vocabs: m.vocab\n>>>\n```\n\n## Python2/3 String/Unicode compatibility\nSentencepiece python wrapper accepts both Unicode string and legacy byte string.\nThe output string type is determined by the input string type.\nThe output type of IdToPiece/DecodeIds methods is *str*, but note that it is a legacy byte string in Python2 and Unicode string in Python3 respectively.\n\n* Python2:\n```\n>>> sp.EncodeAsPieces('吾輩は猫である')\n['\\xe2\\x96\\x81', '\\xe5\\x90\\xbe', '\\xe8\\xbc\\xa9', '\\xe3\\x81\\xaf', '\\xe7\\x8c\\xab', '\\xe3\\x81\\xa7\\xe3\\x81\\x82\\xe3\\x82\\x8b']\n>>> sp.EncodeAsPieces(u'吾輩は猫である')\n[u'\\u2581', u'\\u543e', u'\\u8f29', u'\\u306f', u'\\u732b', u'\\u3067\\u3042\\u308b']\n>>> sp.EncodeAsPieces(u'吾輩は猫である'.encode('utf-8'))\n['\\xe2\\x96\\x81', '\\xe5\\x90\\xbe', '\\xe8\\xbc\\xa9', '\\xe3\\x81\\xaf', '\\xe7\\x8c\\xab', '\\xe3\\x81\\xa7\\xe3\\x81\\x82\\xe3\\x82\\x8b']\n>>> sp.IdToPiece(10)\n'\\xe3\\x81\\xab'\n>>> type(sp.IdToPiece(10))\n<type 'str'>\n```\n\n* Python3:\n```\n>>> sp.EncodeAsPieces('吾輩は猫である')\n['▁', '吾', '輩', 'は', '猫', 'である']\n>>> sp.EncodeAsPieces('吾輩は猫である'.encode('utf-8'))\n[b'\\xe2\\x96\\x81', b'\\xe5\\x90\\xbe', b'\\xe8\\xbc\\xa9', b'\\xe3\\x81\\xaf', b'\\xe7\\x8c\\xab', b'\\xe3\\x81\\xa7\\xe3\\x81\\x82\\xe3\\x82\\x8b']\n>>>\n>>> sp.IdToPiece(10)\n'に'\n>>> type(sp.IdToPiece(10))\n<class 'str'>\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marian-nmt/sentencepiece",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marian-sentencepiece",
    "package_url": "https://pypi.org/project/marian-sentencepiece/",
    "platform": "Unix",
    "project_url": "https://pypi.org/project/marian-sentencepiece/",
    "project_urls": {
      "Homepage": "https://github.com/marian-nmt/sentencepiece"
    },
    "release_url": "https://pypi.org/project/marian-sentencepiece/0.1.94/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python wrapper for Marian NMT version of SentencePiece",
    "version": "0.1.94",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17301288,
  "releases": {
    "0.1.94": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c08ed9888f7b284c5488e1216d4e82ca8af974df634fe728482b8918769acc95",
          "md5": "e1c30261bd8122d975dc8339f78ddbd2",
          "sha256": "2ac53973477e9220a350b6f666e437f1f448a1c6cc09ef6802d0e91015004b07"
        },
        "downloads": -1,
        "filename": "marian-sentencepiece-0.1.94.tar.gz",
        "has_sig": false,
        "md5_digest": "e1c30261bd8122d975dc8339f78ddbd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 504352,
        "upload_time": "2023-03-15T09:41:18",
        "upload_time_iso_8601": "2023-03-15T09:41:18.829241Z",
        "url": "https://files.pythonhosted.org/packages/c0/8e/d9888f7b284c5488e1216d4e82ca8af974df634fe728482b8918769acc95/marian-sentencepiece-0.1.94.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c08ed9888f7b284c5488e1216d4e82ca8af974df634fe728482b8918769acc95",
        "md5": "e1c30261bd8122d975dc8339f78ddbd2",
        "sha256": "2ac53973477e9220a350b6f666e437f1f448a1c6cc09ef6802d0e91015004b07"
      },
      "downloads": -1,
      "filename": "marian-sentencepiece-0.1.94.tar.gz",
      "has_sig": false,
      "md5_digest": "e1c30261bd8122d975dc8339f78ddbd2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 504352,
      "upload_time": "2023-03-15T09:41:18",
      "upload_time_iso_8601": "2023-03-15T09:41:18.829241Z",
      "url": "https://files.pythonhosted.org/packages/c0/8e/d9888f7b284c5488e1216d4e82ca8af974df634fe728482b8918769acc95/marian-sentencepiece-0.1.94.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}