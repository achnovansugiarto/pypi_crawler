{
  "info": {
    "author": "Antoine Perrin",
    "author_email": "antoineperrin.pro1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![](https://github.com/ahgperrin/PyCurve/blob/master/logo.png?raw=true)\n\n-----------------\n# PyCurve - Python Yield Curve Toolkit\n\n-----------------\n## What is it ? \n\n*PyCurve* is a Python package that provides to user high level \nyield curve usefull tool. For example you can istanciate a Curve \nand get a d_rate, a discount factor, even forward d_rate given multiple\nmethodology from Linear Interpolation to parametrization methods \nas Nelson Siegel or Bjork-Christenssen. PyCurve is also able to provide\nsolutions in order to build yield curve or price Interest rates derivatives \nvia Vasicek or Hull and White.\n\n-----------------\n\n## Features \n\nBelow this is the features that this package tackle :\n- Curve Smoothing:\n  - Create Curve Object with two numpy array (t,rt)\n  - Linear interpolation given a Curve \n  - Cubic interpolation given a Curve \n  - Nelson Siegel and Svensson model creation and components plotting\n  - Nelson Siegel and Svensson calibration given a Curve\n  - Bjork Christensen and Augmented (6 factors) model creation and components plotting\n- Stochastic Modelling:\n  - Vasicek Model Simulation\n  - Hull and White one factor Model Simulation\n\n\n-----------------\n\n## How to install\nFrom pypi\n```sh\npip install PyCurve\n```\n\nFrom pypi specific version \n```sh\npip install PyCurve==0.0.5\n```\n\nFrom Git \n```sh\ngit clone https://github.com/ahgperrin/PyCurve.git\npip install -e . \n```\n\n# Objects\n\n## Curve Object\n\nThis object consists in a simple yield curve encapsulation. This object is used by others class to encapsulate results\nor in order to directly create a curve with data obbserved in the market.\n\n| Attributes  | Type    | Description                                 |\n| :----------:|:--------| :-------------------------------------------|\n| rt          | Private | Interest rates as float in a numpy.ndarray  |\n| t           | Private | Time  as float or int in a numpy.ndarray    |\n\n\n| Methods             | Type    | Description               | Return\n| :------------------:|:--------| :-------------------------| :----------|\n| get_rate            | Public  | rt getter                 | _rt        |\n| get_time            | Public  | rt getter                 | _t         |\n| set_rate            | Public  | rt getter                 | None       |\n| set_time            | Public  | rt getter                 | None       |\n| is_valid_attr(attr) | Private | Check attributes validity | attribute  |\n| plot_curve()        | Public  | Plot Yield curve          | None       |\n\n### Example\n\n```sh\nfrom PyCurve.curve import Curve\ntime = np.array([0.25, 0.5, 0.75, 1., 2., \n        3., 4., 5., 10., 15., \n        20.,25.,30.])\nrate = np.array([-0.63171, -0.650322, -0.664493, -0.674608, -0.681294,\n        -0.647593, -0.587828, -0.51251, -0.101804,  0.182851,\n        0.32962,0.392117,  0.412151])\ncurve = Curve(rate,time)\ncurve.plot_curve()\nprint(curve.get_rate)\nprint(curve.get_time)\n```\n```yaml\n[ 0.25  0.5   0.75  1.    2.    3.    4.    5.   10.   15.   20.   25.\n 30.  ]\n\n[-0.63171  -0.650322 -0.664493 -0.674608 -0.681294 -0.647593 -0.587828\n -0.51251  -0.101804  0.182851  0.32962   0.392117  0.412151]\n\n\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/curve.png?raw=true)\n\n## Simulation Object \n\nThis object consists in a simple simulation encapsulation. This object is used by others class to encapsulate results\nof monte carlo simulation. This Object has build in method that could perform the conversion from a simulation to \na yield curve or to a discount factor curve.\n\n| Attributes  | Type    | Description                                      |\n| :----------:|:--------| :------------------------------------------------|\n| sim         | Private | Simulated paths matrix numpy.ndarray             |\n| dt          | Private | delta_time  as float or int in a numpy.ndarray   |\n\n| Methods                       | Type    | Description & Params                                                        | Return       |\n|-------------------------------|---------|-----------------------------------------------------------------------------|--------------|    \n| get_sim                       | Public  | sim getter                                                                  | _rt          |\n| get_nb_sim                    | Public  | nb_sim getter                                                               | sim.shape[0] |\n| get_steps                     | Public  | steps getter                                                                | sim.shape[1] |\n| get_dt                        | Public  | dt getter                                                                   | _dt          |\n| is_valid_attr(attr)           | Private | Check attributes validity                                                   | attribute    |\n| yield_curve()                 | Public  | Create a yield curve from simulated paths                                   | Curve        |\n| discount_factor()             | Public  | Convert d_rate simulation to discount factor                                  | np.ndarray   |\n| plot_discount_curve(average)  | Public  | Plot discount factor (average :bool False plot all paths True Plot estimate)| None         |\n| plot_simulation()             | Public  | Plot Yield curve                                                            | None         |\n| plot_yield_curve()            | Public  | Plot Yield curve                                                            | None         |\n| plot_model()                  | Public  | Plot Yield curve                                                            | None         |\n\n### Example\nUsing Vasicek to Simulate\n```sh\nfrom PyCurve.vasicek import Vasicek\nvasicek_model = Vasicek(0.02, 0.04, 0.001, -0.004, 50, 30 / 365)\nsimulation = vasicek_model.simulate_paths(2000) #Return a Simulation and then we can apply Simulation Methods\nsimulation.plot_yield_curve()\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/simulated_curve.png?raw=true)\n\n```sh\nsimulation.plot_model()\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/simulation_example.png?raw=true)\n\n\n\n-----------------\n\n# Yield Curve Construction Tools\nThis section is the description with examples of what you can do with this package\nPlease note that for all the examples in this section curve is referring to the curve below\nyou can see example regarding Curve Object in the dedicated section.\n\n```sh\nfrom PyCurve import Curve\ntime = np.array([0.25, 0.5, 0.75, 1., 2., \n        3., 4., 5., 10., 15., \n        20.,25.,30.])\nd_rate = np.array([-0.63171, -0.650322, -0.664493, -0.674608, -0.681294,\n        -0.647593, -0.587828, -0.51251, -0.101804,  0.182851,\n        0.32962,0.392117,  0.412151])\ncurve = Curve(time,d_rate)\n```\n\n## linear\nInterpolate any d_rate from a yield curve using linear interpolation. THis module is build using scipy.interpolate\n\n| Attributes  | Type    | Description                                       |\n| :----------:|:--------| :------------------------------------------------ |\n| curve       | Private | Curve Object to be intepolated                    |\n| func_rate   | Private | interp1d Object used to interpolate               |\n\n| Methods                       | Type    | Description & Params                                                        | Return       |\n|-------------------------------|---------|-----------------------------------------------------------------------------|--------------|    \n| d_rate(t)                     | Public  | d_rate interpolation t: float, array,int                                      | float        |\n| df_t(t)                       | Public  | discount factor interpolation  t: float, array,int                          | float        |\n| forward(t1,t2)                | Public  | forward d_rate between t1 and t2     t1,t2: float, array,int                  | float        |\n| create_curve(t_array)         | Public  | create a Curve object for t values t:array                                  | Curve        |\n| is_valid_attr(attr)           | Private | Check attributes validity                                                   | attribute    |\n\n\n### Example\n\n```sh\nfrom PyCurve.linear import LinearCurve\nlinear_curve = LinearCurve(curve)\nprint(\"7.5-year d_rate : \"+str(linear_curve.d_rate(7.5)))\nprint(\"7.5-year discount d_rate : \"+str(linear_curve.df_t(7.5)))\nprint(\"Forward d_rate between 7.5 and 12.5 years : \"+str(linear_curve.forward(7.5,12.5)))\n```\n\n```yaml\n7.5-year d_rate : -0.307157\n7.5-year discount d_rate : 1.0233404498400862\nForward d_rate between 7.5 and 12.5 years : 0.5620442499999999\n```\n\n\n## cubic\n\nInterpolate any d_rate from a yield curve using linear interpolation. THis module is build using scipy.interpolate\n\n| Attributes  | Type    | Description                                       |\n| :----------:|:--------| :------------------------------------------------ |\n| curve       | Private | Curve Object to be intepolated                    |\n| func_rate   | Private | PPoly Object used to interpolate               |\n\n| Methods                       | Type    | Description & Params                                                        | Return       |\n|-------------------------------|---------|-----------------------------------------------------------------------------|--------------|    \n| d_rate(t)                     | Public  | d_rate interpolation t: float, array,int                                      | float        |\n| df_t(t)                       | Public  | discount factor interpolation  t: float, array,int                          | float        |\n| forward(t1,t2)                | Public  | forward d_rate between t1 and t2     t1,t2: float, array,int                  | float        |\n| create_curve(t_array)         | Public  | create a Curve object for t values t:array                                  | Curve        |\n| is_valid_attr(attr)           | Private | Check attributes validity                                                   | attribute    |\n\n\n### Example\n\n```sh\nfrom PyCurve.cubic import CubicCurve\ncubic_curve = CubicCurve(curve)\nprint(\"10-year d_rate : \"+str(cubic_curve.d_rate(7.5)))\nprint(\"10-year discount d_rate : \"+str(cubic_curve.df_t(7.5)))\nprint(\"Forward d_rate between 10 and 20 years : \"+str(cubic_curve.forward(7.5,12.5)))\n```\n\n```yaml\n10-year d_rate : -0.3036366057950627\n10-year discount d_rate : 1.0230694659050514\nForward d_rate between 10 and 20 years : 0.6078001168478189\n```\n\n## Nelson-Siegel\n\n| Attributes  | Type    | Description                                       |\n| :----------:|:--------| :------------------------------------------------ |\n| beta0       | Private | Model Coefficient Beta0                           |\n| beta1       | Private | Model Coefficient Beta1                           |\n| beta2       | Private | Model Coefficient Beta2                           |\n| tau         | Private | Model Coefficient tau                             |\n| attr_list   | Private | Coefficient list                                  |\n\n\n| Methods                      | Type    | Description & Params                                                        | Return            |\n|------------------------------|---------|-----------------------------------------------------------------------------|-------------------|    \n| get_attr(str(attr))          | Public  | attributes getter                                                           | attribute         |\n| set_attr(attr)               | Public  | attributes setter                                                           | None              |\n| print_model()                | Public  | print the Ns model set                                                      | None              |\n| _calibration_func(x,curve)   | Private | Private method used for calibration method                                  | float:sqr_err     |\n| _is_positive_attr(attr)      | Private | Check attributes positivity (beta0 and tau                                  | attribute         |\n| _is_valid_curve(curve)       | Private | Check if the curve given for calibration is a Curve Object                  | Curve             |\n| _print_fitting()             | Private | Print the result after the calibration                                      | None              |\n| calibrate(curve)             | Public  | Minimize _calibration_func(x,curve)                                         | sco.OptimizeResult|\n| _time_decay(t)               | Private | Compute the time decay part of the model t (float or array)                 | float,array       |\n| _hump(t)                     | Private | Compute the hump part of the model given t (float or array)                 | float,array       |\n| d_rate(t)                      | Public  | Get d_rate from the model for a given time t (float or array)                 | float,array       |\n| plot_calibrated()            | Public  | Plot Model curve against Curve                                              | None              |\n| plot_model_params()          | Public  | Plot Model parameters                                                       | None              |\n| plot_model()                 | Public  | Plot Model Components                                                       | None              |\n| df_t(t)                      | Public  | Get the discount factor from the model for a given time t (float or array)  | float,array       |\n| cdf_t(t)                     | Public  | Get the continuous df from the model for a given time t (float or array)    | float,array       |\n| forward_rate(t1,t2)          | Public  | Get the forward d_rate for a given time t1,t2 (float or array)                | float,array       |\n\n\n### Example\nCreation of a model and calibration \n\n```sh\nfrom PyCurve.nelson_siegel import NelsonSiegel\nns = NelsonSiegel(0.3,0.4,12,1)\nns.calibrate(curve)\n\n```\n\n```yaml\nNelson Siegel Model\n============================\nbeta0 = 0.751506062319988\nbeta1 = -1.3304971868997248\nbeta2 = -2.2203178895179176\ntau = 2.5493056203052005\n____________________________\n============================\nCalibration Results\n============================\nCONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL\nMean Squared Error 0.0042367306926415285\nNumber of Iterations 20\n____________________________\nOut[19]:\n      fun: 0.0042367306926415285\n hess_inv: <4x4 LbfgsInvHessProduct with dtype=float64>\n      jac: array([-2.40077054e-06,  9.51322360e-07, -2.33927462e-07,  7.97278914e-07])\n  message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n     nfev: 105\n      nit: 20\n     njev: 21\n   status: 0\n  success: True\n        x: array([ 0.75150606, -1.33049719, -2.22031789,  2.54930562])\n```\nPlotting and analyse\n\n```sh\nns.plot_calibrated()\n\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/plot_calibrated.png?raw=true)\n\n```sh\nns.plot_model_params()\n\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/model_component.png?raw=true)\n\n```sh\nns.plot_model()\n\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/plot_model.png?raw=true)\n\n## nelson-siegel-svensson\n\n| Attributes  | Type    | Description                                       |\n| :----------:|:--------| :------------------------------------------------ |\n| beta0       | Private | Model Coefficient Beta0                           |\n| beta1       | Private | Model Coefficient Beta1                           |\n| beta2       | Private | Model Coefficient Beta2                           |\n| beta3       | Private | Model Coefficient Beta3                           |\n| tau         | Private | Model Coefficient tau                             |\n| tau2        | Private | Model Coefficient tau2                            |\n| attr_list   | Private | Coefficient list                                  |\n\n\n| Methods                      | Type    | Description & Params                                                        | Return            |\n|------------------------------|---------|-----------------------------------------------------------------------------|-------------------|    \n| get_attr(str(attr))          | Public  | attributes getter                                                           | attribute         |\n| set_attr(attr)               | Public  | attributes setter                                                           | None              |\n| print_model()                | Public  | print the Ns model set                                                      | None              |\n| _calibration_func(x,curve)   | Private | Private method used for calibration method                                  | float:sqr_err     |\n| _is_positive_attr(attr)      | Private | Check attributes positivity (beta0 and tau                                  | attribute         |\n| _is_valid_curve(curve)       | Private | Check if the curve given for calibration is a Curve Object                  | Curve             |\n| _print_fitting()             | Private | Print the result after the calibration                                      | None              |\n| calibrate(curve)             | Public  | Minimize _calibration_func(x,curve)                                         | sco.OptimizeResult|\n| _time_decay(t)               | Private | Compute the time decay part of the model t (float or array)                 | float,array       |\n| _hump(t)                     | Private | Compute the hump part of the model given t (float or array)                 | float,array       |\n| _second_hump(t)              | Private | Compute the second hump part of the model given t (float or array)          | float,array       |\n| d_rate(t)                      | Public  | Get d_rate from the model for a given time t (float or array)                 | float,array       |\n| plot_calibrated()            | Public  | Plot Model curve against Curve                                              | None              |\n| plot_model_params()          | Public  | Plot Model parameters                                                       | None              |\n| plot_model()                 | Public  | Plot Model Components                                                       | None              |\n| df_t(t)                      | Public  | Get the discount factor from the model for a given time t (float or array)  | float,array       |\n| cdf_t(t)                     | Public  | Get the continuous df from the model for a given time t (float or array)    | float,array       |\n| forward_rate(t1,t2)          | Public  | Get the forward d_rate for a given time t1,t2 (float or array)                | float,array       |\n\n### Example\nCreation of a model and calibration \n\n```sh\nfrom PyCurve.svensson_nelson_siegel import NelsonSiegelAugmented\nnss = NelsonSiegelAugmented(0.3,0.4,12,12,1,1)\nnss.calibrate(curve)\n\n```\n```yaml\nAugmented Nelson Siegel Model\n============================\nbeta0 = 0.7515069899513361\nbeta1 = -1.3304984652740972\nbeta2 = -1.3582175270153745\nbeta3 = -0.8621237370245594\ntau = 2.5492666085730384\ntau2 = 2.5493745447283485\n____________________________\n============================\nCalibration Results\n============================\nCONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL\nMean Squared Error 0.004236730702075479\nNumber of Iterations 31\n____________________________\nOut[31]:\n      fun: 0.004236730702075479\n hess_inv: <6x6 LbfgsInvHessProduct with dtype=float64>\n      jac: array([-8.70041881e-06, -3.48375844e-06, -1.71824361e-06, -1.71911096e-06,\n        1.00535900e-06,  3.23178986e-07])\n  message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n     nfev: 245\n      nit: 31\n     njev: 35\n   status: 0\n  success: True\n        x: array([ 0.75150699, -1.33049847, -1.35821753, -0.86212374,  2.54926661,\n        2.54937454])\n```\nPlotting possibilities are the same as for the Nelson-Siegel model for example\n```sh\nnss.plot_model_params()\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/nss_compo.png?raw=true)\n## bjork-christensen\n\n| Attributes  | Type    | Description                                       |\n| :----------:|:--------| :------------------------------------------------ |\n| beta0       | Private | Model Coefficient Beta0                           |\n| beta1       | Private | Model Coefficient Beta1                           |\n| beta2       | Private | Model Coefficient Beta2                           |\n| beta3       | Private | Model Coefficient Beta3                           |\n| tau         | Private | Model Coefficient tau                             |\n| attr_list   | Private | Coefficient list                                  |\n\n\n| Methods                      | Type    | Description & Params                                                        | Return            |\n|------------------------------|---------|-----------------------------------------------------------------------------|-------------------|    \n| get_attr(str(attr))          | Public  | attributes getter                                                           | attribute         |\n| set_attr(attr)               | Public  | attributes setter                                                           | None              |\n| print_model()                | Public  | print the Ns model set                                                      | None              |\n| _calibration_func(x,curve)   | Private | Private method used for calibration method                                  | float:sqr_err     |\n| _is_positive_attr(attr)      | Private | Check attributes positivity (beta0 and tau                                  | attribute         |\n| _is_valid_curve(curve)       | Private | Check if the curve given for calibration is a Curve Object                  | Curve             |\n| _print_fitting()             | Private | Print the result after the calibration                                      | None              |\n| calibrate(curve)             | Public  | Minimize _calibration_func(x,curve)                                         | sco.OptimizeResult|\n| _time_decay(t)               | Private | Compute the time decay part of the model t (float or array)                 | float,array       |\n| _hump(t)                     | Private | Compute the hump part of the model given t (float or array)                 | float,array       |\n| _second_hump(t)              | Private | Compute the second hump part of the model given t (float or array)          | float,array       |\n| d_rate(t)                      | Public  | Get d_rate from the model for a given time t (float or array)                 | float,array       |\n| plot_calibrated()            | Public  | Plot Model curve against Curve                                              | None              |\n| plot_model_params()          | Public  | Plot Model parameters                                                       | None              |\n| plot_model()                 | Public  | Plot Model Components                                                       | None              |\n| df_t(t)                      | Public  | Get the discount factor from the model for a given time t (float or array)  | float,array       |\n| cdf_t(t)                     | Public  | Get the continuous df from the model for a given time t (float or array)    | float,array       |\n| forward_rate(t1,t2)          | Public  | Get the forward d_rate for a given time t1,t2 (float or array)                | float,array       |\n\n### Example\nCreation of a model and calibration \n\n```sh\nfrom PyCurve.bjork_christensen import BjorkChristensen\nbjc = BjorkChristensen(0.3,0.4,12,12,1)\nbjc.calibrate(curve)\n\n```\n```yaml\nBjork & Christensen Model\n============================\nbeta0 = 0.7241026361747042\nbeta1 = 1.2630412759302045\nbeta2 = -4.075775255903699\nbeta3 = -2.61578890758314\ntau = 2.0454907238894267\n____________________________\n============================\nCalibration Results\n============================\nCONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL\nMean Squared Error 0.002575936865445517\nNumber of Iterations 37\n____________________________\nOut[36]:\n      fun: 0.002575936865445517\n hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n      jac: array([-1.34584183e-06,  7.22165387e-07, -9.63335320e-07,  1.34501786e-06,\n        4.57750160e-07])\n  message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n     nfev: 252\n      nit: 37\n     njev: 42\n   status: 0\n  success: True\n        x: array([ 0.72410264,  1.26304128, -4.07577526, -2.61578891,  2.04549072])\n```\nPlotting possibilities are the same as for the Nelson-Siegel model for example\n```sh\nbjc.plot_model()\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/bjc_compo.png?raw=true)\n\n## bjork-christensen-augmented\n| Attributes  | Type    | Description                                       |\n| :----------:|:--------| :------------------------------------------------ |\n| beta0       | Private | Model Coefficient Beta0                           |\n| beta1       | Private | Model Coefficient Beta1                           |\n| beta2       | Private | Model Coefficient Beta2                           |\n| beta3       | Private | Model Coefficient Beta3                           |\n| beta4       | Private | Model Coefficient Beta4                           |\n| tau         | Private | Model Coefficient tau                             |\n| attr_list   | Private | Coefficient list                                  |\n\n\n| Methods                      | Type    | Description & Params                                                        | Return            |\n|------------------------------|---------|-----------------------------------------------------------------------------|-------------------|    \n| get_attr(str(attr))          | Public  | attributes getter                                                           | attribute         |\n| set_attr(attr)               | Public  | attributes setter                                                           | None              |\n| print_model()                | Public  | print the Ns model set                                                      | None              |\n| _calibration_func(x,curve)   | Private | Private method used for calibration method                                  | float:sqr_err     |\n| _is_positive_attr(attr)      | Private | Check attributes positivity (beta0 and tau                                  | attribute         |\n| _is_valid_curve(curve)       | Private | Check if the curve given for calibration is a Curve Object                  | Curve             |\n| _print_fitting()             | Private | Print the result after the calibration                                      | None              |\n| calibrate(curve)             | Public  | Minimize _calibration_func(x,curve)                                         | sco.OptimizeResult|\n| _time_decay(t)               | Private | Compute the time decay part of the model t (float or array)                 | float,array       |\n| _hump(t)                     | Private | Compute the hump part of the model given t (float or array)                 | float,array       |\n| _second_hump(t)              | Private | Compute the second hump part of the model given t (float or array)          | float,array       |\n| _third_hump(t)               | Private | Compute the third hump part of the model given t (float or array)           | float,array       |\n| d_rate(t)                      | Public  | Get d_rate from the model for a given time t (float or array)                 | float,array       |\n| plot_calibrated()            | Public  | Plot Model curve against Curve                                              | None              |\n| plot_model_params()          | Public  | Plot Model parameters                                                       | None              |\n| plot_model()                 | Public  | Plot Model Components                                                       | None              |\n| df_t(t)                      | Public  | Get the discount factor from the model for a given time t (float or array)  | float,array       |\n| cdf_t(t)                     | Public  | Get the continuous df from the model for a given time t (float or array)    | float,array       |\n| forward_rate(t1,t2)          | Public  | Get the forward d_rate for a given time t1,t2 (float or array)                | float,array       |\n\n### Example\nCreation of a model and calibration \n\n```sh\nfrom PyCurve.bjork_christensen_augmented import BjorkChristensenAugmented\nbjc_a = BjorkChristensenAugmented(0.3,0.4,12,12,12,1)\nbjc_a.calibrate(curve)\n\n```\n```yaml\nBjork & Christensen Augmented Model\n============================\nbeta0 = 1.5954945516202643\nbeta1 = -0.1362673420894012\nbeta2 = -1.921347491829477\nbeta3 = -3.100138400789165\nbeta4 = -0.2790540854856497\ntau = 3.3831338085688625\n____________________________\n============================\nCalibration Results\n============================\nCONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH\nMean Squared Error 4.6222147406189135e-05\nNumber of Iterations 45\n____________________________\nOut[39]:\n      fun: 4.6222147406189135e-05\n hess_inv: <6x6 LbfgsInvHessProduct with dtype=float64>\n      jac: array([-3.13922277e-05, -1.14224797e-04, -3.47444433e-05,  2.07803821e-05,\n        7.91378953e-06,  6.50288949e-06])\n  message: 'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n     nfev: 357\n      nit: 45\n     njev: 51\n   status: 0\n  success: True\n        x: array([ 1.59549455, -0.13626734, -1.92134749, -3.1001384 , -0.27905409,\n        3.38313381])\n\n```\nPlotting possibilities are the same as for the Nelson-Siegel model for example\n```sh\nbjc_a.plot_calibrated(curve)\n```\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/bjc_a_calib.png?raw=true)\n\n# Stochastic Tools\n\n## vasicek\n\n| Attributes  | Type    | Description                                       |\n| :----------:|:--------| :------------------------------------------------ |\n| alpha       | Private | Model Coefficient alpha (mean reverting speed)    |\n| beta        | Private | Model Coefficient Beta (long term mean)           |\n| sigma       | Private | Short rate Volatility                             |\n| rt          | Private | Initial Short Rate                                |\n| time        | Params  | Time in years                                     |\n| dt          | Private | time for each period                              |\n| steps       | Private | calculated with dt & time as time/dt              |\n\n\n| Methods                      | Type    | Description & Params                                  | Return            |\n|------------------------------|---------|-------------------------------------------------------|-------------------|    \n| get_attr(str(attr))          | Public  | attributes getter                                     | attribute         |\n| sigma_part(n)                | Private | compute n sigma part                                  | float             |\n| mu_dt(rt)                    | Private | compute drift part                                    | float             |\n| simulate_paths(n)            | Public  | Simulate  n Short rate paths                          | np.ndarray        |\n| plot_calibrated(simul,curve) | Public  | Plot yield curve against simulate curve               | None              |\n\n```sh\ntime = np.array([0.25, 0.5, 0.75, 1., 2.,\n                 3., 4., 5., 10., 15.,\n                 20., 25., 30.])\nrate = np.array([-0.0063171, -0.00650322, -0.00664493, -0.00674608, -0.00681294,\n                 -0.00647593, -0.00587828, -0.0051251, -0.00101804, 0.00182851,\n                 0.0032962, 0.0030092117, 0.00412151])\ncurve = Curve(time,rate)\nvasicek_model = Vasicek(0.5, 0.0040, 0.001, -0.0067, 30, 1 / 365)\nsimulation = vasicek_model.simulate_paths(200)\nvasicek_model.plot_calibrated(simulation,curve)\n\n```\nAll the tools for graphing from simulation could be applied to vasicek simulation results.\n\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/plot_cal_vasi.png?raw=true)\n\n## hull & white\n\n| Attributes  | Type    | Description                                       |\n| :----------:|:--------| :------------------------------------------------ |\n| alpha       | Private | Model Coefficient alpha (mean reverting speed)    |\n| sigma       | Private | Short rate Volatility                             |\n| rt          | Private | Initial Short Rate                                |\n| time        | Params  | Time in years                                     |\n| dt          | Private | time for each period                              |\n| steps       | Private | calculated with dt & time as time/dt              |\n| f_curve     | Private | Curve : Initial instantaneous forward structure   |\n| method      | Private | method used in order to interpolate f_curve       |\n\n\n| Methods                      | Type    | Description & Params                                       | Return            |\n|------------------------------|---------|------------------------------------------------------------|-------------------|    \n| get_attr(str(attr))          | Public  | attributes getter                                          | attribute         |\n| _is_valid_curve(curve)       | Private | Check if the curve given for calibration is a Curve Object | Curve             |\n| sigma_part(n)                | Private | compute n sigma part                                       | float             |\n| interp_forward(t)            | Private | interpolate forward curve for maturity t                   | float             |\n| theta_part(t)                | Private | compute theta(t)                                           | float             |\n| mu_dt(rt,t)                  | Private | compute drift part at time t                               | float             |\n| simulate_paths(n)            | Public  | Simulate  n Short rate paths                               | np.ndarray        |\n| plot_calibrated(simul)       | Public  | Plot yield curve against simulate curve                    | None              |\n\n### Example\n\n```sh\nfrom PyCurve.bjork_christensen_augmented import BjorkChristensenAugmented\nfrom PyCurve.hull_white import HullWhite\nimport numpy as np\nfrom PyCurve.curve import Curve\n\n# Instance of curve : Spot Rates\ntime = np.array([0.25, 0.5, 0.75, 1., 2.,\n                 3., 4., 5., 10., 15.,\n                 20., 25., 30.])\nrate = np.array([-0.0063171, -0.00650322, -0.00664493, -0.00674608, -0.00681294,\n                 -0.00647593, -0.00587828, -0.0051251, -0.00101804, 0.00182851,\n                 0.0032962, 0.00392117, 0.00412151])\ncurve = Curve(time, rate)\n\n# Deduce Forward rate via Bjork Christensen (as example but you can directly create an instance of Curve with values)\n\nbjc_a = BjorkChristensenAugmented(0.3, 0.4, 12, 12, 12, 1)\nbjc_a.calibrate(curve)\nforward_curve = [-0.006301821217413436379]\nforward_curve_t = [0]\nfor i in range(12):\n    forward_curve.append(bjc_a.forward_rate(time[i], time[i + 1]))\n    forward_curve_t.append(time[i])\ninstantaneous_forward = Curve(forward_curve_t, forward_curve)\n\n\n# Hull and white model  with High Volatility\nhull_white_model = HullWhite(1, 0.02, -0.0063, 25, 1 / 365, instantaneous_forward, 'linear')\nsimulation = hull_white_model.simulate_paths(1000)\nhull_white_model.plot_calibrated(simulation,curve)\n\n```\n\n```yaml\nBjork & Christensen Augmented Model\n============================\nbeta0 = 0.0003242320890548229\nbeta1 = 0.00042283628067360974\nbeta2 = 0.014729859086888815\nbeta3 = -0.03083749691652102\nbeta4 = -0.020626731632810553\ntau = 1.137911384276111\n____________________________\n============================\nCalibration Results\n============================\nCONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH\nMean Squared Error 3.084012924460394e-06\nNumber of Iterations 24\n____________________________\n```\nAll the tools for graphing from simulation could be applied to Hull-White simulation results.\n\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/plot_cal_hw.png?raw=true)\n\n```sh\n# Hull and white model  with High Volatility\nhull_white_model_low_vol = HullWhite(1, 0.00002, -0.0063, 25, 1 / 365, instantaneous_forward, 'cubic')\nsimulation = hull_white_model_low_vol.simulate_paths(1000)\nsimulation.plot_model()\nhull_white_model_low_vol.plot_calibrated(simulation,curve)\n```\n\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/hw_model.png?raw=true)\n![](https://github.com/ahgperrin/PyCurve/blob/master/example_screenshot/plot_cal_hw_low.png?raw=true)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ahgperrin/PyCurve",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyCurve",
    "package_url": "https://pypi.org/project/PyCurve/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyCurve/",
    "project_urls": {
      "Homepage": "https://github.com/ahgperrin/PyCurve"
    },
    "release_url": "https://pypi.org/project/PyCurve/0.1.4/",
    "requires_dist": [
      "matplotlib",
      "pandas",
      "numpy",
      "scipy",
      "typing"
    ],
    "requires_python": "",
    "summary": "Interest Rate Yield Curve Toolkit",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11300861,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d33dffaa3586163fedce02099e33fa26723aa2062aa9afdb631141aaaadab327",
          "md5": "d5ff2efc1e0b2f237e071c171c369d5d",
          "sha256": "0e2af4ee929633b62591bf47ff1117925605f56cf6756ee3284fd4dcfaeb2fad"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5ff2efc1e0b2f237e071c171c369d5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21457,
        "upload_time": "2021-08-23T12:23:24",
        "upload_time_iso_8601": "2021-08-23T12:23:24.750879Z",
        "url": "https://files.pythonhosted.org/packages/d3/3d/ffaa3586163fedce02099e33fa26723aa2062aa9afdb631141aaaadab327/PyCurve-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2832970acc6131908bd815d1e69a7a4e10c1fabc868435e606d2a514ee06330",
          "md5": "275d102c45de406f5ba80997eb82dc6d",
          "sha256": "da04bab27da0b80bbe465c518508e7c50759c756d9948489d4cc9bc96f577121"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "275d102c45de406f5ba80997eb82dc6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36263,
        "upload_time": "2021-08-23T12:23:27",
        "upload_time_iso_8601": "2021-08-23T12:23:27.160341Z",
        "url": "https://files.pythonhosted.org/packages/b2/83/2970acc6131908bd815d1e69a7a4e10c1fabc868435e606d2a514ee06330/PyCurve-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f97cce6dda9a39748b8235afa290a53df5ac381f2ed587113a8353052453dcfe",
          "md5": "8b5191adde5c99f462f799f3b92c217e",
          "sha256": "a208a46c450b6d846c99408fdac5fefe0ea2f72dbc960e85d2d4d631a8fc3f00"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b5191adde5c99f462f799f3b92c217e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14052,
        "upload_time": "2021-07-07T17:30:14",
        "upload_time_iso_8601": "2021-07-07T17:30:14.978548Z",
        "url": "https://files.pythonhosted.org/packages/f9/7c/ce6dda9a39748b8235afa290a53df5ac381f2ed587113a8353052453dcfe/PyCurve-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb6a8423c83a4139f1b9ded20abfd14d365cef2c8c1c3ffd8c57f1285b291c9f",
          "md5": "6d957a1f1012a12913146fa7550b2255",
          "sha256": "0eeed04dab66f9e402891adf665de2b723c386488f3600dfabb58d096c2cc96c"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6d957a1f1012a12913146fa7550b2255",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20183,
        "upload_time": "2021-07-07T17:30:16",
        "upload_time_iso_8601": "2021-07-07T17:30:16.182782Z",
        "url": "https://files.pythonhosted.org/packages/bb/6a/8423c83a4139f1b9ded20abfd14d365cef2c8c1c3ffd8c57f1285b291c9f/PyCurve-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d734c57bafe60f709721238e97a0e8b05e9f7a69f0f5ef153e270b325343ab85",
          "md5": "66b90c154225d6cd9340cdd85e47df52",
          "sha256": "843c771f49957601c82358d84549be718d35abd4c517df0fdf46731c6d992ff8"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66b90c154225d6cd9340cdd85e47df52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19891,
        "upload_time": "2021-07-09T12:13:28",
        "upload_time_iso_8601": "2021-07-09T12:13:28.680717Z",
        "url": "https://files.pythonhosted.org/packages/d7/34/c57bafe60f709721238e97a0e8b05e9f7a69f0f5ef153e270b325343ab85/PyCurve-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f31500a0d166b1967a0c9bfda0655a968c4b7d96532afbc8d6e32e2592704cc9",
          "md5": "83f51f67f4b0c2d72cb688279140a825",
          "sha256": "a3d881a9f354b6364b96cfed94c9f8e2d3e7d54c3b36179b59dfade5ecfdb4af"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "83f51f67f4b0c2d72cb688279140a825",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33171,
        "upload_time": "2021-07-09T12:13:30",
        "upload_time_iso_8601": "2021-07-09T12:13:30.485163Z",
        "url": "https://files.pythonhosted.org/packages/f3/15/00a0d166b1967a0c9bfda0655a968c4b7d96532afbc8d6e32e2592704cc9/PyCurve-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fd06b1bcacbd9a0cea78b350f0681c5a82cd65598b567d7b3575c1b6772079f",
          "md5": "8ba2d7f654217fc8c4cf7b484431d41a",
          "sha256": "d68e88e7615f2c12495c3d88dc5e21228a7204e12032238f29e7d962abe6fe87"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ba2d7f654217fc8c4cf7b484431d41a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20259,
        "upload_time": "2021-07-10T19:11:07",
        "upload_time_iso_8601": "2021-07-10T19:11:07.635128Z",
        "url": "https://files.pythonhosted.org/packages/7f/d0/6b1bcacbd9a0cea78b350f0681c5a82cd65598b567d7b3575c1b6772079f/PyCurve-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b3d8d80506fb6f58b00925b06b3518f5e6120611f339cd6412bbbf81e37adbb",
          "md5": "de5a5ad473e9c4411150a5493fd23896",
          "sha256": "cb451017caa3852a19af15d0a952cd500abfc826d51c18a890249abbe67e4814"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "de5a5ad473e9c4411150a5493fd23896",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33103,
        "upload_time": "2021-07-10T19:11:09",
        "upload_time_iso_8601": "2021-07-10T19:11:09.700092Z",
        "url": "https://files.pythonhosted.org/packages/2b/3d/8d80506fb6f58b00925b06b3518f5e6120611f339cd6412bbbf81e37adbb/PyCurve-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fc6e91ac3b00dc80f0aa498bca3da38221290f2fc76ca6da023acec30fac162",
          "md5": "6085f37720edce4e65b5d81ff17d435a",
          "sha256": "7ac3b143e4bd5a7e71faba850e3986160c50cf794996b96ad947bfa853bce5bf"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6085f37720edce4e65b5d81ff17d435a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21415,
        "upload_time": "2021-07-11T10:25:52",
        "upload_time_iso_8601": "2021-07-11T10:25:52.264816Z",
        "url": "https://files.pythonhosted.org/packages/2f/c6/e91ac3b00dc80f0aa498bca3da38221290f2fc76ca6da023acec30fac162/PyCurve-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "904a147f20f9fb622c0c454b2b279f07218cc9a768ebc2ae6ba896de21324658",
          "md5": "b6e072dc581dc2c0f4eac3878db08373",
          "sha256": "e4c964264b59be2fb5cd8fd7760abc2067322dfcb3fd2538658a838b247a6431"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b6e072dc581dc2c0f4eac3878db08373",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36177,
        "upload_time": "2021-07-11T10:25:54",
        "upload_time_iso_8601": "2021-07-11T10:25:54.118407Z",
        "url": "https://files.pythonhosted.org/packages/90/4a/147f20f9fb622c0c454b2b279f07218cc9a768ebc2ae6ba896de21324658/PyCurve-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0dcf5844ca03ba50048213ac0ef65ecdee77aa1d4ad6bfc8d5b2e02a0ad1a88",
          "md5": "f7b7e9a79a6bb5b3ca2b778268f0038a",
          "sha256": "ebc445c98309c38b144872043cfb17473f8cb574d1d768346b60701ef88a56a7"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7b7e9a79a6bb5b3ca2b778268f0038a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21430,
        "upload_time": "2021-07-11T10:43:56",
        "upload_time_iso_8601": "2021-07-11T10:43:56.703933Z",
        "url": "https://files.pythonhosted.org/packages/f0/dc/f5844ca03ba50048213ac0ef65ecdee77aa1d4ad6bfc8d5b2e02a0ad1a88/PyCurve-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32e193a7ff4f06621c069624d13b46e9106ec6f543e3c3e48ffdb7c85b42d555",
          "md5": "99dbf199d2ea919a0040f98b6149f617",
          "sha256": "48cc5ddcfc21fbe5efc5095a14a15949d9e17138bb9eeb1617641b5d667d4d6f"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "99dbf199d2ea919a0040f98b6149f617",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36245,
        "upload_time": "2021-07-11T10:43:58",
        "upload_time_iso_8601": "2021-07-11T10:43:58.852916Z",
        "url": "https://files.pythonhosted.org/packages/32/e1/93a7ff4f06621c069624d13b46e9106ec6f543e3c3e48ffdb7c85b42d555/PyCurve-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f6d8e490c695904e873fd02d92e47174928f3853373efe72f5938d34ef3e067",
          "md5": "bf51150bda77bfcff3dd4bbd1b9d25ce",
          "sha256": "6085fd3a619f829651dd2281c83979d34920f1a540f118452b1d6de1b180a6aa"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf51150bda77bfcff3dd4bbd1b9d25ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21456,
        "upload_time": "2021-08-23T11:48:03",
        "upload_time_iso_8601": "2021-08-23T11:48:03.706782Z",
        "url": "https://files.pythonhosted.org/packages/6f/6d/8e490c695904e873fd02d92e47174928f3853373efe72f5938d34ef3e067/PyCurve-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c058bf714edc96142440fe3b6c515bbe0718164679bf624858b829058b67097",
          "md5": "0d62509822f541d581ca5cdd86e7e93e",
          "sha256": "60a1f7233dc79c468b9a07f2262f52307f2a6364213f659fa89b28090bd0a227"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0d62509822f541d581ca5cdd86e7e93e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36277,
        "upload_time": "2021-08-23T11:48:05",
        "upload_time_iso_8601": "2021-08-23T11:48:05.970785Z",
        "url": "https://files.pythonhosted.org/packages/5c/05/8bf714edc96142440fe3b6c515bbe0718164679bf624858b829058b67097/PyCurve-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a68b5c706f65c0b922d564871b59b0b8f47fdfd6b4ddf42d05ed64dec6fd0b4",
          "md5": "8298437c6ee105ed7ba5e4635c347a51",
          "sha256": "de63e096ca01b30fcdb09cfc65759ec454227c1226d4d6c11e89c6ebe4b84b08"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8298437c6ee105ed7ba5e4635c347a51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21455,
        "upload_time": "2021-08-23T12:15:58",
        "upload_time_iso_8601": "2021-08-23T12:15:58.707244Z",
        "url": "https://files.pythonhosted.org/packages/1a/68/b5c706f65c0b922d564871b59b0b8f47fdfd6b4ddf42d05ed64dec6fd0b4/PyCurve-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99c49a2a4668b8dedf4b33b05e55170d804ce5a0aa2cde47a16472d412a221d1",
          "md5": "7cfe78ef34ab4cc5a49575561362db3c",
          "sha256": "50349514963543387cfbf5d615550d8415e21a9fce5df062de483cbba692f227"
        },
        "downloads": -1,
        "filename": "PyCurve-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "7cfe78ef34ab4cc5a49575561362db3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36301,
        "upload_time": "2021-08-23T12:16:00",
        "upload_time_iso_8601": "2021-08-23T12:16:00.922787Z",
        "url": "https://files.pythonhosted.org/packages/99/c4/9a2a4668b8dedf4b33b05e55170d804ce5a0aa2cde47a16472d412a221d1/PyCurve-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bf3423c3c3e46809f4c71bfb587141251aab97143f8058cd834d4e8a8e53c6a",
          "md5": "9ef8beecd04fd120261db7d59df77363",
          "sha256": "d5c59ae9a764bf907832ebed583b3d9781a6ad61dc4bc022cddf78760348b691"
        },
        "downloads": -1,
        "filename": "PyCurve-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ef8beecd04fd120261db7d59df77363",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21428,
        "upload_time": "2021-08-25T08:36:16",
        "upload_time_iso_8601": "2021-08-25T08:36:16.344403Z",
        "url": "https://files.pythonhosted.org/packages/0b/f3/423c3c3e46809f4c71bfb587141251aab97143f8058cd834d4e8a8e53c6a/PyCurve-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c9caeacdaca4038c289164cc56075caed6c2c3978b2cb9bf5e06e83d2495134",
          "md5": "af95cdff85994197c5b3b73f0f32a639",
          "sha256": "df721fddfcfb94fde49b8eb8be71fc9c42dfd37a5160aa71f9661841f751e325"
        },
        "downloads": -1,
        "filename": "PyCurve-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "af95cdff85994197c5b3b73f0f32a639",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36300,
        "upload_time": "2021-08-25T08:36:18",
        "upload_time_iso_8601": "2021-08-25T08:36:18.384572Z",
        "url": "https://files.pythonhosted.org/packages/6c/9c/aeacdaca4038c289164cc56075caed6c2c3978b2cb9bf5e06e83d2495134/PyCurve-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a00ac1b12edc48626a42f677f7cf0c5b252b7fb6bd40f5882f906f52227a40af",
          "md5": "0baef9852e2959c6fb7c470fe3c3fc6e",
          "sha256": "883a81ea7dbd2eb6a5b7149c7201f5639f5c639653b4fef84f97f3b3061b07c6"
        },
        "downloads": -1,
        "filename": "PyCurve-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0baef9852e2959c6fb7c470fe3c3fc6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21263,
        "upload_time": "2021-08-27T20:30:53",
        "upload_time_iso_8601": "2021-08-27T20:30:53.918789Z",
        "url": "https://files.pythonhosted.org/packages/a0/0a/c1b12edc48626a42f677f7cf0c5b252b7fb6bd40f5882f906f52227a40af/PyCurve-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe4d416bb60ece91ec65961e552dde8aab5bdc71ec6f5d7db1f4dbff9c95418c",
          "md5": "680346aa5552f4fcba36dce322932e47",
          "sha256": "8f36cc805afd10c05454f064f2bfa696defd62eccd4154bdccb528d7f10b425a"
        },
        "downloads": -1,
        "filename": "PyCurve-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "680346aa5552f4fcba36dce322932e47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36219,
        "upload_time": "2021-08-27T20:30:56",
        "upload_time_iso_8601": "2021-08-27T20:30:56.579237Z",
        "url": "https://files.pythonhosted.org/packages/fe/4d/416bb60ece91ec65961e552dde8aab5bdc71ec6f5d7db1f4dbff9c95418c/PyCurve-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c3b12a9ad4303038accae91677ca4a2db2a5c69e6fed44e0951b0bd645f4107",
          "md5": "9c75cded77a3f30c12bbf44430f513cb",
          "sha256": "801a4b600474abd9b61179936a90b4674413aaced4696fb632d9658caa578d2f"
        },
        "downloads": -1,
        "filename": "PyCurve-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c75cded77a3f30c12bbf44430f513cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21270,
        "upload_time": "2021-08-28T08:27:07",
        "upload_time_iso_8601": "2021-08-28T08:27:07.908415Z",
        "url": "https://files.pythonhosted.org/packages/2c/3b/12a9ad4303038accae91677ca4a2db2a5c69e6fed44e0951b0bd645f4107/PyCurve-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2627504f194e734a9b9faf58ed9c3e1b763a3d11942df546623952e771a0d99f",
          "md5": "59cd74be23e5f4065287129f6ee887dd",
          "sha256": "7acc102eb64c5c019a17ff2433e3c844f6d40e921aa8582745a1d459b34ac257"
        },
        "downloads": -1,
        "filename": "PyCurve-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "59cd74be23e5f4065287129f6ee887dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36264,
        "upload_time": "2021-08-28T08:27:09",
        "upload_time_iso_8601": "2021-08-28T08:27:09.356335Z",
        "url": "https://files.pythonhosted.org/packages/26/27/504f194e734a9b9faf58ed9c3e1b763a3d11942df546623952e771a0d99f/PyCurve-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41fd8f7b2c77417a9ae12ab9be3e27ff8acb6628d748162015f06055f05884e4",
          "md5": "e3c378d2d47441c65924ffc937396db5",
          "sha256": "879f4822b40017d67f7b3044dee34c1f6e1db9d0ead3d1a2591c2fc0dde16773"
        },
        "downloads": -1,
        "filename": "PyCurve-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3c378d2d47441c65924ffc937396db5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21303,
        "upload_time": "2021-08-28T08:43:45",
        "upload_time_iso_8601": "2021-08-28T08:43:45.603463Z",
        "url": "https://files.pythonhosted.org/packages/41/fd/8f7b2c77417a9ae12ab9be3e27ff8acb6628d748162015f06055f05884e4/PyCurve-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3977d837d7d9afa78bb30322300d6e65058366f6c3e17a0637afe55fdb8b1a91",
          "md5": "fcdb77c11069172d77d690c12c2e1034",
          "sha256": "b2cb68d6fd17f39a0536343d0fb905c9c40e57ac6787eb7a2780f27754924464"
        },
        "downloads": -1,
        "filename": "PyCurve-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fcdb77c11069172d77d690c12c2e1034",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36257,
        "upload_time": "2021-08-28T08:43:47",
        "upload_time_iso_8601": "2021-08-28T08:43:47.456521Z",
        "url": "https://files.pythonhosted.org/packages/39/77/d837d7d9afa78bb30322300d6e65058366f6c3e17a0637afe55fdb8b1a91/PyCurve-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41fd8f7b2c77417a9ae12ab9be3e27ff8acb6628d748162015f06055f05884e4",
        "md5": "e3c378d2d47441c65924ffc937396db5",
        "sha256": "879f4822b40017d67f7b3044dee34c1f6e1db9d0ead3d1a2591c2fc0dde16773"
      },
      "downloads": -1,
      "filename": "PyCurve-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e3c378d2d47441c65924ffc937396db5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21303,
      "upload_time": "2021-08-28T08:43:45",
      "upload_time_iso_8601": "2021-08-28T08:43:45.603463Z",
      "url": "https://files.pythonhosted.org/packages/41/fd/8f7b2c77417a9ae12ab9be3e27ff8acb6628d748162015f06055f05884e4/PyCurve-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3977d837d7d9afa78bb30322300d6e65058366f6c3e17a0637afe55fdb8b1a91",
        "md5": "fcdb77c11069172d77d690c12c2e1034",
        "sha256": "b2cb68d6fd17f39a0536343d0fb905c9c40e57ac6787eb7a2780f27754924464"
      },
      "downloads": -1,
      "filename": "PyCurve-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "fcdb77c11069172d77d690c12c2e1034",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36257,
      "upload_time": "2021-08-28T08:43:47",
      "upload_time_iso_8601": "2021-08-28T08:43:47.456521Z",
      "url": "https://files.pythonhosted.org/packages/39/77/d837d7d9afa78bb30322300d6e65058366f6c3e17a0637afe55fdb8b1a91/PyCurve-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}