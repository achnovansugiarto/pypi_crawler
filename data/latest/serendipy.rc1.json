{
  "info": {
    "author": "jqy",
    "author_email": "jiaqiyuejqy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "This is a package of Bi-level optimization designed for `gurobi`\n\n## How to Install\n\n```bash\npip install serendipy\n```\n\n## How to Use\n\nIt can automatically write the KKT condition of the lower problem, for example:\n\n```\nmin    f(x, y) \ns.t    g(x) >= 0 \n       y = argmin  h(x, y) \n              s.t  u(x,y) >= 0\n```\n\nKKT condition is composed with **Complementary slackness**, **Primal feasibility**,**Dual feasibility**,and **Stationarity condition**, more  information about **`Karush‚ÄìKuhn‚ÄìTucker`** conditions can be found at https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions . \n\nwe can get the first three conditions of lower problem simply as :\n\n```python\nfrom serendipy import Complementary_great, Complementary_equal, MyExpr, tonp, to_value\n# build model\nmodel = gurobi.Model()\nDual_expression = []\nDual_objective = []\n# build lower objective and variables\nlower_objective = xxx\nall_lower_level_vars = [xxx]\n# build lower constraints\nexpr = u(x, y)\ndual_var = Complementary_great(expr, model, Dual_expression, Dual_objective, 'name')\n```\n\n> Note: the key function is `Complementary_great`, its similar pair is `Complementary_equal`, `Complementary_great` and its pair both have same signature. Take `Complementary_great` for example, the first parameter is `gurobi.Expr`, which denotes the Primal constraint, and the expression is expected to be greater than zero(`Complementary_equal` expect its expr to be equal to zero). The second parameter `gurobi.Model` denotes the model which the `expr` belongs to. The third parameter `Dual_expression` is a list, which collects the Lagrange term constraint by constraint. The forth parameter `Dual_objective` is a list, which collects the dual object constraint by constraint. The last parameter is the name of the constraint. After add all the constraints, `Dual_expression` contains all the constraint-related Lagrange terms, and  `Dual_objective`  contains all the dual objective terms.\n\n> Note: In `Complementary_great`, the **Complementary slackness** is handled by the big M method. Specifically, \n>\n> ```\n> A E = 0\n> ```\n>\n> is linearized as \n>\n> ```\n> A <= M * B \n> E <= M * (1-B)\n> ```\n>\n> where B is a binary variable.\n\nafter add all the constraints, we can get the **Stationarity condition** through \"automatic derivation\"\n\n```python\nmy_expr = MyExpr(Dual_expression + lower_objective)\nfor var in all_lower_level_vars:\n    expr = my_expr.getCoeff(var)\n    my_expr.addConstr(expr, model)\n```\n\nAs the snippet shows, we first construct the Lagrange expression as  `my_expr` , then for all the lower level variables, we get the derivation through  `my_expr.getCoeff(var)` as `expr`, then we add `expr = 0` to `model` as the last line.\n\nNow, we have got all the KKT conditions of lower problem, combined with the upper constraints and objective, we can solve the whole program !\n\n## A complete example\n\nNow let look at a complete example, the original example comes from  https://static1.squarespace.com/static/5492d7f4e4b00040889988bd/t/57c06dfdd482e91c235c418b/1472229009395/9_PyomoBilevel.pdf page 6:\n\n```python\ndef example():\n    model = gurobi.Model()\n\n    x = model.addVar(name='x')\n    y = model.addVar(lb=-1 * INF, ub= INF, name='y')\n\n    lower_obj = y + 0\n    DE = []\n    Dobj = []\n    expr1 = -3 + x + y\n    expr2 = 0 + 2 * x - y\n    expr3 = 12 - 2 * x - y\n    expr4 = -4 + 3*x - 2 * y\n    expr5 = y\n\n    Complementary_great(expr1, model, DE, Dobj, 'e1')\n    Complementary_great(expr2, model, DE, Dobj, 'e2')\n    Complementary_great(expr3, model, DE, Dobj, 'e3')\n    Complementary_great(expr4, model, DE, Dobj, 'e4')\n    Complementary_great(expr5, model, DE, Dobj, 'e5')\n\n    model.update()\n\n    lagrange = lower_obj + sum(DE)\n    myExpr = MyExpr(lagrange)\n    for var in [y]:\n        exp = myExpr.getCoeff(var)\n        myExpr.addConstr(exp, model, '[Lagrange]' + var.VarName)\n\n    # model.setParam(\"IntegralityFocus\", 1)\n    model.setObjective(x - 4 * y)\n    model.optimize()\n```\n\nIt has same result with the code written by `yalmip`, Coolüêí!\n\n## Utility functions\n\nBeside the KKT-related function, this package also provide three utility function as `tonp`,`to_value`,`to_value_np` , because the variables got from `model.addVars()` don't support slice as `numpy`, so `tonp` can convert a value of `gurobi.tuple_dict` to `numpy.narray` to support such slice, and `to_value` support convert a variable with type `gurobi.tuple_dict` to its value which is  stored as `numpy.narray`, `to_value_np` can convert a variable with type `gurobi.narray` to its value which is stored as `numpy.narray`.\n\nLet's look at an example.\n\n```bash\nIn [1]: import gurobipy as gurobi\nIn [2]: model = gurobi.Model()\nIn [3]: var33 = model.addVars(3,3)\nIn [4]: var33[:,1]\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-4-87bcf4f6f185> in <module>\n----> 1 var33[:,1]\nTypeError: unhashable type: 'slice'\n```\n\nIn order to maintain compatibility with `numpy`, we can rewrite the code as :\n\n```python\nIn [1]: model = gurobi.Model()\nIn [2]: var33 = tonp(model.addVars(3,3))\nIn [3]: var33[:,1]\nOut[3]:\narray([<gurobi.Var *Awaiting Model Update*>,\n       <gurobi.Var *Awaiting Model Update*>,\n       <gurobi.Var *Awaiting Model Update*>], dtype=object)\n```\n\nThat all.\n\n\n\nMaybe you will be curious about the name of this package `serendipy`, because I just write this package for one of my XUE MEI  `serendipity`üëß LOL!  God bless her to be admitted to her ideal university.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "serendipy",
    "package_url": "https://pypi.org/project/serendipy/",
    "platform": "",
    "project_url": "https://pypi.org/project/serendipy/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/serendipy/0.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Bi-level optimization for gurobi",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10226983,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43363ee56f3a01184dc42be0ff0f3b77375de3672fe6cfeb7ff651938d34d9d3",
          "md5": "317bba552e33249eb1659a4ece107534",
          "sha256": "03595dd5fb54fefea9ea3a5be44a8f3943e6f3e5b0b1c4f9cc625300cf3407d2"
        },
        "downloads": -1,
        "filename": "serendipy-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "317bba552e33249eb1659a4ece107534",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4869,
        "upload_time": "2021-05-01T10:21:44",
        "upload_time_iso_8601": "2021-05-01T10:21:44.627184Z",
        "url": "https://files.pythonhosted.org/packages/43/36/3ee56f3a01184dc42be0ff0f3b77375de3672fe6cfeb7ff651938d34d9d3/serendipy-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43363ee56f3a01184dc42be0ff0f3b77375de3672fe6cfeb7ff651938d34d9d3",
        "md5": "317bba552e33249eb1659a4ece107534",
        "sha256": "03595dd5fb54fefea9ea3a5be44a8f3943e6f3e5b0b1c4f9cc625300cf3407d2"
      },
      "downloads": -1,
      "filename": "serendipy-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "317bba552e33249eb1659a4ece107534",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4869,
      "upload_time": "2021-05-01T10:21:44",
      "upload_time_iso_8601": "2021-05-01T10:21:44.627184Z",
      "url": "https://files.pythonhosted.org/packages/43/36/3ee56f3a01184dc42be0ff0f3b77375de3672fe6cfeb7ff651938d34d9d3/serendipy-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}