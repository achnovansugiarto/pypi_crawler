{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Education",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<h1 align=\"center\">\n  packaged ultralytics/yolov5\n</h1>\n\n<h4 align=\"center\">\n  pip install yolov5\n</h4>\n\n<div align=\"center\">\n  <a href=\"https://pepy.tech/project/yolov5\"><img src=\"https://pepy.tech/badge/yolov5\" alt=\"total downloads\"></a>\n  <a href=\"https://pepy.tech/project/yolov5\"><img src=\"https://pepy.tech/badge/yolov5/month\" alt=\"monthly downloads\"></a>\n  <a href=\"https://twitter.com/fcakyon\"><img src=\"https://img.shields.io/twitter/follow/fcakyon?color=blue&logo=twitter&style=flat\" alt=\"fcakyon twitter\"></a>\n  <br>\n  <a href=\"https://badge.fury.io/py/yolov5\"><img src=\"https://badge.fury.io/py/yolov5.svg\" alt=\"pypi version\"></a>\n  <a href=\"https://github.com/fcakyon/yolov5-pip/actions/workflows/ci.yml\"><img src=\"https://github.com/fcakyon/yolov5-pip/actions/workflows/ci.yml/badge.svg\" alt=\"ci testing\"></a>\n  <a href=\"https://github.com/fcakyon/yolov5-pip/actions/workflows/package_testing.yml\"><img src=\"https://github.com/fcakyon/yolov5-pip/actions/workflows/package_testing.yml/badge.svg\" alt=\"package testing\"></a>\n</div>\n\n## <div align=\"center\">Overview</div>\n\n<div align=\"center\">\nYou can finally install <a href=\"https://github.com/ultralytics/yolov5\">YOLOv5 object detector</a> using <a href=\"https://pypi.org/project/yolov5/\">pip</a> and integrate into your project easily.\n\n<img src=\"https://user-images.githubusercontent.com/26833433/136901921-abcfcd9d-f978-4942-9b97-0e3f202907df.png\" width=\"1000\">\n</div>\n\n<br>\nThis yolov5 package contains everything from ultralytics/yolov5 <a href=\"https://github.com/ultralytics/yolov5/tree/177da7f348181abdf4820ad26707eb8b3dd4fdc9\">at this commit</a> plus:\n<br>\n1. Easy installation via pip: `pip install yolov5`\n<br>\n2. Full CLI integration with <a href=\"https://github.com/google/python-fire\">fire</a> package\n<br>\n3. COCO dataset format support (for training)\n<br>\n4. <a href=\"https://aws.amazon.com/s3/\">S3</a> support (model and dataset upload)\n<br>\n5. <a href=\"https://neptune.ai/\">NeptuneAI</a> logger support (metric, model and dataset logging)\n<br>\n6. Classwise AP logging during experiments\n\n\n\n## <div align=\"center\">Install</div>\n\n<details open>\n<summary>Install yolov5 using pip (for Python >=3.7)</summary>\n\n```console\npip install yolov5\n```\n\n</details>\n\n<details closed>\n<summary>Install yolov5 using pip `(for Python 3.6)`</summary>\n\n```console\npip install \"numpy>=1.18.5,<1.20\" \"matplotlib>=3.2.2,<4\"\npip install yolov5\n```\n\n</details>\n\n## <div align=\"center\">Use from Python</div>\n\n\n<details open>\n<summary>Basic</summary>\n\n```python\nimport yolov5\n\n# load model\nmodel = yolov5.load('yolov5s')\n  \n# set model parameters\nmodel.conf = 0.25  # NMS confidence threshold\nmodel.iou = 0.45  # NMS IoU threshold\nmodel.agnostic = False  # NMS class-agnostic\nmodel.multi_label = False  # NMS multiple labels per box\nmodel.max_det = 1000  # maximum number of detections per image\n\n# set image\nimg = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\n\n# perform inference\nresults = model(img)\n\n# inference with larger input size\nresults = model(img, size=1280)\n\n# inference with test time augmentation\nresults = model(img, augment=True)\n\n# parse results\npredictions = results.pred[0]\nboxes = predictions[:, :4] # x1, y1, x2, y2\nscores = predictions[:, 4]\ncategories = predictions[:, 5]\n\n# show detection bounding boxes on image\nresults.show()\n\n# save results into \"results/\" folder\nresults.save(save_dir='results/')\n\n```\n\n</details>\n\n<details closed>\n<summary>Alternative</summary>\n\n```python\nfrom yolov5 import YOLOv5\n\n# set model params\nmodel_path = \"yolov5/weights/yolov5s.pt\"\ndevice = \"cuda:0\" # or \"cpu\"\n\n# init yolov5 model\nyolov5 = YOLOv5(model_path, device)\n\n# load images\nimage1 = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\nimage2 = 'https://github.com/ultralytics/yolov5/blob/master/data/images/bus.jpg'\n\n# perform inference\nresults = yolov5.predict(image1)\n\n# perform inference with larger input size\nresults = yolov5.predict(image1, size=1280)\n\n# perform inference with test time augmentation\nresults = yolov5.predict(image1, augment=True)\n\n# perform inference on multiple images\nresults = yolov5.predict([image1, image2], size=1280, augment=True)\n\n# parse results\npredictions = results.pred[0]\nboxes = predictions[:, :4] # x1, y1, x2, y2\nscores = predictions[:, 4]\ncategories = predictions[:, 5]\n\n# show detection bounding boxes on image\nresults.show()\n\n# save results into \"results/\" folder\nresults.save(save_dir='results/')\n```\n\n</details>\n\n<details closed>\n<summary>Train/Detect/Test/Export</summary>\n\n- You can directly use these functions by importing them:\n\n```python\nfrom yolov5 import train, val, detect, export\n\ntrain.run(imgsz=640, data='coco128.yaml')\nval.run(imgsz=640, data='coco128.yaml', weights='yolov5s.pt')\ndetect.run(imgsz=640)\nexport.run(imgsz=640, weights='yolov5s.pt')\n```\n\n- You can pass any argument as input:\n\n```python\nfrom yolov5 import detect\n\nimg_url = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\n\ndetect.run(source=img_url, weights=\"yolov5s6.pt\", conf_thres=0.25, imgsz=640)\n\n```\n\n</details>\n\n## <div align=\"center\">Use from CLI</div>\n\nYou can call `yolov5 train`, `yolov5 detect`, `yolov5 val` and `yolov5 export` commands after installing the package via `pip`:\n\n<details open>\n<summary>Training</summary>\n\n- Finetune one of the pretrained YOLOv5 models using your custom `data.yaml`:\n\n```bash\n$ yolov5 train --data data.yaml --weights yolov5s.pt --batch-size 16 --img 640\n                                          yolov5m.pt              8\n                                          yolov5l.pt              4\n                                          yolov5x.pt              2\n```\n\n- Start a training using a COCO formatted dataset:\n\n```yaml\n# data.yml\ntrain_json_path: \"train.json\"\ntrain_image_dir: \"train_image_dir/\"\nval_json_path: \"val.json\"\nval_image_dir: \"val_image_dir/\"\n```\n\n```bash\n$ yolov5 train --data data.yaml --weights yolov5s.pt\n```\n\n- Visualize your experiments via [Neptune.AI](https://neptune.ai/) (neptune-client>=0.10.10 required):\n\n```bash\n$ yolov5 train --data data.yaml --weights yolov5s.pt --neptune_project NAMESPACE/PROJECT_NAME --neptune_token YOUR_NEPTUNE_TOKEN\n```\n\n- Automatically upload weights and datasets to AWS S3 (with Neptune.AI artifact tracking integration):\n\n```bash\nexport AWS_ACCESS_KEY_ID=YOUR_KEY\nexport AWS_SECRET_ACCESS_KEY=YOUR_KEY\n```\n\n```bash\n$ yolov5 train --data data.yaml --weights yolov5s.pt --s3_upload_dir YOUR_S3_FOLDER_DIRECTORY --upload_dataset\n```\n\n- Add `yolo_s3_data_dir` into `data.yaml` to match Neptune dataset with a present dataset in S3.\n\n```yaml\n# data.yml\ntrain_json_path: \"train.json\"\ntrain_image_dir: \"train_image_dir/\"\nval_json_path: \"val.json\"\nval_image_dir: \"val_image_dir/\"\nyolo_s3_data_dir: s3://bucket_name/data_dir/\n```\n\n</details>\n\n<details open>\n<summary>Inference</summary>\n\nyolov5 detect command runs inference on a variety of sources, downloading models automatically from the [latest YOLOv5 release](https://github.com/ultralytics/yolov5/releases) and saving results to `runs/detect`.\n\n```bash\n$ yolov5 detect --source 0  # webcam\n                         file.jpg  # image\n                         file.mp4  # video\n                         path/  # directory\n                         path/*.jpg  # glob\n                         rtsp://170.93.143.139/rtplive/470011e600ef003a004ee33696235daa  # rtsp stream\n                         rtmp://192.168.1.105/live/test  # rtmp stream\n                         http://112.50.243.8/PLTV/88888888/224/3221225900/1.m3u8  # http stream\n```\n\n</details>\n\n<details open>\n<summary>Export</summary>\n\nYou can export your fine-tuned YOLOv5 weights to any format such as `torchscript`, `onnx`, `coreml`, `pb`, `tflite`, `tfjs`:\n\n```bash\n$ yolov5 export --weights yolov5s.pt --include 'torchscript,onnx,coreml,pb,tfjs'\n```\n\n</details>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SethWen/yolov5-pip.git",
    "keywords": "machine-learning,deep-learning,ml,pytorch,YOLO,object-detection,vision,YOLOv3,YOLOv4,YOLOv5",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yolov5-thin",
    "package_url": "https://pypi.org/project/yolov5-thin/",
    "platform": null,
    "project_url": "https://pypi.org/project/yolov5-thin/",
    "project_urls": {
      "Homepage": "https://github.com/SethWen/yolov5-pip.git"
    },
    "release_url": "https://pypi.org/project/yolov5-thin/6.1.3/",
    "requires_dist": [
      "matplotlib (>=3.2.2)",
      "numpy (>=1.18.5)",
      "opencv-python (>=4.1.2)",
      "Pillow (>=7.1.2)",
      "PyYAML (>=5.3.1)",
      "requests (>=2.23.0)",
      "scipy (>=1.4.1)",
      "torch (>=1.7.0)",
      "torchvision (>=0.8.1)",
      "tqdm (>=4.41.0)",
      "tensorboard (>=2.4.1)",
      "pandas (>=1.1.4)",
      "seaborn (>=0.11.0)",
      "thop",
      "fire",
      "boto3 (>=1.19.1)",
      "sahi (>=0.9.1)",
      "pytest ; extra == 'tests'"
    ],
    "requires_python": ">=3.6",
    "summary": "Packaged version of the Yolov5 object detector",
    "version": "6.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17475072,
  "releases": {
    "6.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "853c8a2c6a8e124493f3fe2b2d3c98f7e95d8f1894c19eb49c66edbcde0cbfb6",
          "md5": "905e4f6f02fedabe4f610eaeb5719ff8",
          "sha256": "34eedd88af2d6d3c264c18684f3eb8be7c1be515df3abe687aa918cf30f0cee5"
        },
        "downloads": -1,
        "filename": "yolov5_thin-6.1.3-py36.py37.py38-none-any.whl",
        "has_sig": false,
        "md5_digest": "905e4f6f02fedabe4f610eaeb5719ff8",
        "packagetype": "bdist_wheel",
        "python_version": "py36.py37.py38",
        "requires_python": ">=3.6",
        "size": 834327,
        "upload_time": "2023-03-28T08:40:21",
        "upload_time_iso_8601": "2023-03-28T08:40:21.274406Z",
        "url": "https://files.pythonhosted.org/packages/85/3c/8a2c6a8e124493f3fe2b2d3c98f7e95d8f1894c19eb49c66edbcde0cbfb6/yolov5_thin-6.1.3-py36.py37.py38-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e76dd2be7ad475e8f3e454c9a591ea30d8f5b382fb593a9ea9545462263d4468",
          "md5": "d024c8fdc3ccbd2fbae4cbd4e2f05026",
          "sha256": "35539ef447e6cbc08cc4a62780146b88658f842ab1e9eebfbf65fde48c211c6b"
        },
        "downloads": -1,
        "filename": "yolov5-thin-6.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d024c8fdc3ccbd2fbae4cbd4e2f05026",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 798648,
        "upload_time": "2023-03-28T08:40:24",
        "upload_time_iso_8601": "2023-03-28T08:40:24.764502Z",
        "url": "https://files.pythonhosted.org/packages/e7/6d/d2be7ad475e8f3e454c9a591ea30d8f5b382fb593a9ea9545462263d4468/yolov5-thin-6.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "853c8a2c6a8e124493f3fe2b2d3c98f7e95d8f1894c19eb49c66edbcde0cbfb6",
        "md5": "905e4f6f02fedabe4f610eaeb5719ff8",
        "sha256": "34eedd88af2d6d3c264c18684f3eb8be7c1be515df3abe687aa918cf30f0cee5"
      },
      "downloads": -1,
      "filename": "yolov5_thin-6.1.3-py36.py37.py38-none-any.whl",
      "has_sig": false,
      "md5_digest": "905e4f6f02fedabe4f610eaeb5719ff8",
      "packagetype": "bdist_wheel",
      "python_version": "py36.py37.py38",
      "requires_python": ">=3.6",
      "size": 834327,
      "upload_time": "2023-03-28T08:40:21",
      "upload_time_iso_8601": "2023-03-28T08:40:21.274406Z",
      "url": "https://files.pythonhosted.org/packages/85/3c/8a2c6a8e124493f3fe2b2d3c98f7e95d8f1894c19eb49c66edbcde0cbfb6/yolov5_thin-6.1.3-py36.py37.py38-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e76dd2be7ad475e8f3e454c9a591ea30d8f5b382fb593a9ea9545462263d4468",
        "md5": "d024c8fdc3ccbd2fbae4cbd4e2f05026",
        "sha256": "35539ef447e6cbc08cc4a62780146b88658f842ab1e9eebfbf65fde48c211c6b"
      },
      "downloads": -1,
      "filename": "yolov5-thin-6.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d024c8fdc3ccbd2fbae4cbd4e2f05026",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 798648,
      "upload_time": "2023-03-28T08:40:24",
      "upload_time_iso_8601": "2023-03-28T08:40:24.764502Z",
      "url": "https://files.pythonhosted.org/packages/e7/6d/d2be7ad475e8f3e454c9a591ea30d8f5b382fb593a9ea9545462263d4468/yolov5-thin-6.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}