{
  "info": {
    "author": "Vassily Lyutsarev",
    "author_email": "vassilyl@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# msrc-appconfig\n\nType safe composable configuration management in Python\n\nThe package orchestrates application configuration from multiple sources: \nbuilt-in application defaults; .ini, JSON and YAML configuration files;\nshell environment variables; command line arguments.\n\nAll configuration values are checked and converted to proper type allowing for\nsafer use in application code.\n\nThe module allows to set up a configuration as a global shared configuration object\neasily accessible from different parts of application code.\n\nThe configuration object can also be serialized and shared across processes\nlocally and in the Cloud.\n\n## Getting started\n\nInstall the package with `pip install msrc-appconfig`.\n\nConfiguration schema is a class definition with typed attributes and built-in defaults.\n```python\nimport typing\n\nclass AppConfig(typing.NamedTuple):\n    app_name: str = \"Sample\"\n    repeat: int = 1\n```\n\nTo compile configuration object from this schema use `gather_config` function.\n```python\nfrom msrc.appconfig import gather_config\n\ndef main(app_config: AppConfig):\n    for i in range(app_config.repeat):\n        print(\"Hello from\", app_config.app_name)\n\n\nif __name__ == '__main__':\n    app_config = gather_config(AppConfig, arg_aliases=dict(n='app_name'))\n    main(app_config)\n```\n\nIf the above code is in a file named `getting_started.py`, then you may already run it:\n```\n>python getting_started.py \nINFO:msrc.appconfig:logging level set to INFO.\nHello from Sample\n```\n\nNow try the following commands:\n```\n>python sample.py -h\nusage: getting_started.py [-h [OPTION]] [-l LEVEL|FILE]\n                          [-c CONF_FILE [CONF_FILE ...]] [-e PREFIX]\n\noptional arguments:\n  -h [OPTION], --help [OPTION]\n                        Prints this help message and optionally description of an     \n                        option.\n  -l LEVEL|FILE         Either logging level or a path to a logging configuration     \n                        file.\n  -c CONF_FILE [CONF_FILE ...]\n                        Additional configuration files. Allowed formats are JSON or   \n                        YAML.\n  -e PREFIX             Prefix for shell variables to look at. If environment\n                        contains <PREFIX>_<ELEMENT_NAME>=VALUE the VALUE\n                        overrides corresponding configuration element. The\n                        default prefix is GETTING_STARTED_. A prefix of sole\n                        dash disables the environment lookup.\nAdditionally, you may specify the following options. Use '--help OPTION_NO_DASHES' to \nget help on an option marked (*).\n-n STR, --app_name STR, --app-name STR\n--repeat INT\n\n>GETTING_STARTED_REPEAT=3 python getting_started.py -l debug -n \"another example\"\nINFO:msrc.appconfig:logging level set to DEBUG.\nDEBUG:msrc.appconfig:Examining shell variables starting with GETTING_STARTED_.\nDEBUG:msrc.appconfig:Shell variable GETTING_STARTED_repeat=3.\nDEBUG:msrc.appconfig:discovered app_name = 'another example' from argv\nINFO:msrc.appconfig:final repeat = 3 from env > GETTING_STARTED_repeat\nINFO:msrc.appconfig:final app_name = 'another example' from argv\nHello from another example\nHello from another example\nHello from another example\n```\nThe last command shows you may use environment variables to set configuration values.\nOn Windows the example should be run with two commands. First, set the environment\nvariable with `SET GETTING_STARTED_REPEAT=3`, and then run python script as shown.\n\nYou may also place configuration values in files and specify these file names in\ncode or on command line. For example, create a file named `sample.yaml`:\n```yaml\napp_name: getting started\nrepeat: 2\n``` \nand continue the command line session (on Windows, first unset the environment\nvariable with `SET GETTING_STARTED_REPEAT=`):\n```\n>python getting_started.py -l warn -c sample.yaml\nHello from getting started\nHello from getting started\n```\nNote also that with `-l` argument you control the amount of details being logged.\nThe optional function argument `gather_config(log_level=logging.WARN,...)` has\nsimilar effect.\n\n## Configuration Schema\n\nA schema is a class definition that serves as a template for application configuration.\nThe package uses introspection to build a list of configuration schema elements\nand then reads configuration data from different sources.\n\nOut of the box the package accepts configuration schema created with `typing.NamedTuple`.\nThe example above shows that for each of its elements configuration schema contains a name,\na type and a default value. The default value is optional, although you should be cautious\nmixixng elements with and without default values. For named tuples all elements without\ndefault values must come before elements with default values.\nIf an element doesn't have a default, its value must be present in one of configuration sources.\nOtherwise `gather_config()` stops running the script.\n\nThe package accepts elements of the following types only:\n\n* Simple types: `str`, `int`, `float`, `bool`, any [enumeration](https://docs.python.org/3/library/enum.html).\n* Uniform tuples of simple types. These are annotated with [`typing.Tuple`](https://docs.python.org/3/library/typing.html#typing.Tuple) generic type.\n  E.g., `Tuple[int, int]` is a pair of integers, `Tuple[str, ...]` is a tuple of strings\n  of any length including empty tuple.\n* Other application configuration schema class. This allows composition of schemas.\n\nAll other types will raise an error in call to `gather_config()`\nand other package functions requiring introspection.\n\n### Optional metadata\nMetadata field | Description\n------|------------\nhelp | Description of the element used in UI.\nis_secret | If True, the element value is obfuscated in logs.\n\n### Available plugins\n\nAppconfig plugins allow alternative mechanisms to declare application configuration\nschema in addition to named tuples.\n\n#### Dataclasses\n\n`msrc.appconfig.dataclasses` is available for python version 3.7 and above. \nIt allows for more flexible configuration declaration using [`@dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass) decorator. \nCompared to named tuples this approach allows building inheritance trees\nof application configuration. It's a good practice to declare application configuration\nas a \"frozen\" object. This prevents accidentally changing configuration values\nalong the application run.\nHere is a sample declaration of an appconfig schema using `dataclasses`:\n\n```python\nfrom dataclasses import dataclass, field\n\n@dataclass(frozen=True)\nclass AppConfig:\n    no_default: str\n    with_default: repeat = 3\n    with_help: bool = field(default=False, metadata=dict(help=\"description of the flag\"))\n    secret_password: str = attr.id(repr=False)\n```\n\nTo use `dataclasses` schema specify the extra when installing msrc.appconfig:\n\n    >pip install msrc-appconfig[dataclasses]\n\nAlternatively, install `msrc-appconfig-dataclasses` as a separate package.\n\n#### Attrs\n\n`msrc.appconfig.attrs` takes additional external dependency on [attrs](https://www.attrs.org/).\n\nThis package is a predecessor of `dataclasses`. It works on all versions of Python\nand is even more flexible. Here is a way to declare an appconfig schema using `attrs`:\n\n```python\nimport attrs\n\n@attr.s(frozen=True, kw_only=True, auto_attribs=True)\nclass AppConfig:\n    no_default: str\n    with_default: repeat = 3\n    with_help: bool = attr.ib(default=False, metadata=dict(help=\"description of the flag\"))\n    secret_password: str = attr.id(repr=False)\n```\n\nTo use `attrs` schema specify the extra when installing msrc.appconfig:\n\n    >pip install msrc-appconfig[attrs]\n\nAlternatively, install `msrc-appconfig-attrs` as a separate package.\n\n#### Param\n\n`msrc.appconfig.param` takes additional external dependency on [`param`](https://pypi.org/project/param) package.\nApplication configuration classes must inherit from `param.Parameterized`.\nFor fixed size tuples the `param` package have support for `float` type only (`ParamNumeric()`). \nTuples of unbound size are encoded as `ParamList(class_=<type>)`.\n\nTo use `param` schema specify the extra when installing msrc.appconfig:\n\n    >pip install msrc-appconfig[param]\n\nAlternatively, install `msrc-appconfig-param` as a separate package.\n\n\n## Configuration sources\n\nThe default configuration source is the schema itself where you define default values.\nThe values are overriden with the following order:\n- `override_defaults` dictionary in `gather_config()` arguments;\n- configuration files;\n- shell variables a.k.a. environment variables;\n- command line arguments.\n\n### Files\n\nThe module reads `configparser` (`.ini`), JSON (`.json`) and YAML (`.yaml`, `.yml`) files.\n\nThe list of files to be read can be specified using `config_files` optional\nargument: `gather_config(config_files=[...], ...)`, and with `-c` command line option which\ntake one or more file paths. Note though that relative paths are resolved against\nmain script directory for `config_files=` and against current working directory for `-c`.\n\nYou may enable a default configuration file with a utility function:\n`gather_config(config_files=script_config_file(), ...)`\nIf you now run `python sample.py` the default configuration file can\nbe `sample.yaml` (or `.json`, or `.ini`, or `.yml`) \nin the same directory as the `sample.py` script.\nIf you run `python -m msrc.example` the file can be `example.json` (or `.yaml`, or `.ini`)\nin current directory.\n\nAnother utility function makes it easy to use hierarchical configurations. If you start a script\n`/foo/bar/script.py`, and the script calls\n`gather_config(config_files=config_files_in_parents('config.json'), ...)`, then the function\nwill look for `/config.json`,`/foo/config.json`,`/foo/bar/config.json` and will read these\nfiles in this order if they exist.\n\nIn any configuration file you may also reference other configuration files\nusing `_include` element. The value of this element is a path or a list of paths to read.\nRelative paths are resolved againsth the location of the including file.\nThe included files are read before processing the rest of the parent file,\ni.e. other elements in the file may override values from those mentioned in `_include`.\n\n### Shell variables\n\nShell variables with names like `<prefix><element> = <value>` override a value\nof a configuration element `<element>`.\nIf you run `python sample.py` then the default prefix is `SAMPLE_`.\nIf you run `python -m msrc.example` then the prefix is `EXAMPLE_`.\nYou can also specify another prefix with `env_var_prefix=` function argument \nor `-e` command line option. A single hyphen sign has a special meaning,\nit disables the use of environment variables. \n\nFor tuples shell variable value should contain all tuple values separated by space.\nE.g. for a script `script.py` to specify a pair of numbers \nas a value of a configuration element named `limits`\nthe environment variable may look like `script_limits=-1.5 2.56`.\nIf the tuple type is str, and a string value must have a space in it\nput the value in double quotes, quoting double quotes themselves with `'\\\"'`\nand the backslash with `'\\\\'`, e.g.\n`script_paths=C:\\Windows \"\\\"C:\\\\Program Files\\\"\"`\n\n\n### Command line arguments\n\nFor floating point values any valid positive number works ok as well as special values\n`nan` and `inf`. Negative numbers start with minus sign, `argparse` considers them\nan option rather than a value. A workaround is to place space in front of the value,\ne.g. `python script.py --interval \" -1.5\" 2.5`.\n\nFor enums you may supply either a enum name or it value, preference given to names.\n\nFor tuples the option expects multiple arguments.\n\nBoolean elements whith `False` as default value may be used as flags,\ni.e. if the option is present with no arguments, the value of the element is set to `True`.\nIn any case you may also supply an argument. \nAny string that starts with 't' or 'y' is interpreted as `True`, for example `'true'` or `'Yes'`.\nAny string that starts with 'f' or 'n' is interpreted as `False`, for example `'F'` or `'no'`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/microsoft/msrc-appconfig",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "msrc-appconfig",
    "package_url": "https://pypi.org/project/msrc-appconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/msrc-appconfig/",
    "project_urls": {
      "Homepage": "https://github.com/microsoft/msrc-appconfig"
    },
    "release_url": "https://pypi.org/project/msrc-appconfig/0.5.5/",
    "requires_dist": [
      "ruamel.yaml",
      "typing-extensions",
      "msrc-appconfig-attrs (==0.5.5) ; extra == 'attrs'",
      "msrc-appconfig-dataclasses (==0.5.5) ; extra == 'dataclasses'",
      "msrc-appconfig-param (==0.5.5) ; extra == 'param'"
    ],
    "requires_python": ">=3.7",
    "summary": "Orchestrates application configuration from config files, shell variables and command line arguments.",
    "version": "0.5.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9846722,
  "releases": {
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ad1ca73aa218f97679902f38d8b7db3732e1e4db68126a35c65394858bee141",
          "md5": "c6d16a728a35e1df2a9b70b1bea26d58",
          "sha256": "764a0268ed2a4f467638daafbe5ec8e6ff112d0f89d9697f17e4b365bfb72636"
        },
        "downloads": -1,
        "filename": "msrc_appconfig-0.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6d16a728a35e1df2a9b70b1bea26d58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25154,
        "upload_time": "2020-12-30T20:54:07",
        "upload_time_iso_8601": "2020-12-30T20:54:07.723627Z",
        "url": "https://files.pythonhosted.org/packages/7a/d1/ca73aa218f97679902f38d8b7db3732e1e4db68126a35c65394858bee141/msrc_appconfig-0.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ad1ca73aa218f97679902f38d8b7db3732e1e4db68126a35c65394858bee141",
        "md5": "c6d16a728a35e1df2a9b70b1bea26d58",
        "sha256": "764a0268ed2a4f467638daafbe5ec8e6ff112d0f89d9697f17e4b365bfb72636"
      },
      "downloads": -1,
      "filename": "msrc_appconfig-0.5.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c6d16a728a35e1df2a9b70b1bea26d58",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25154,
      "upload_time": "2020-12-30T20:54:07",
      "upload_time_iso_8601": "2020-12-30T20:54:07.723627Z",
      "url": "https://files.pythonhosted.org/packages/7a/d1/ca73aa218f97679902f38d8b7db3732e1e4db68126a35c65394858bee141/msrc_appconfig-0.5.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}