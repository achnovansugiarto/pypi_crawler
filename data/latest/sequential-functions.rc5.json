{
  "info": {
    "author": "Thomas Rowntree",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Sequential Functions\nCompose functions into a sequence that are called sequentially.  \nThis project is designed for fast readable code.  \nBreak your problem into small functional steps and let sequential functions run them sequentially.   \nWant to go faster? Simply increase the number of threads or processes.\n\n# Examples\n\n## Toy Example\nToy example that highlights the syntax.\n```python\nimport sequential_functions as sf\n\ndef main():\n    # Compose an easy to read list of steps\n    sequence = sf.Compose(\n        square,\n        plus_one,\n    )\n\n    # Use list to pull items through the sequence\n    outputs = list(sequence(range(5)))\n\n    print(outputs)\n\ndef square(x):\n    return x*x\n\ndef plus_one(x):\n    return x + 1\n\nif __name__ == \"__main__\":\n    main()\n```\nOutput\n```shell\n[1, 2, 5, 10, 17]\n```\n## Under the Hood\nCompose uses generator chaining to run items through each of the functions.\nBoth of these methods produce the same output\n```python\nimport sequential_functions as sf\n\ndef main():\n    # Method 1\n    sequence = sf.Compose(\n        square,\n        plus_one,\n    )\n    outputs = list(sequence(range(5)))\n    print(outputs,\"Method 1 - Composed Sequence\")\n\n    # Method 2\n    generator_chain = range(5)\n    generator_chain = (square(x) for x in generator_chain)\n    generator_chain = (plus_one(x) for x in generator_chain)\n    output = list(generator_chain)\n    print(outputs,\"Method 2 - Generator Chain\")\n\ndef square(x):\n    return x*x\n\ndef plus_one(x):\n    return x + 1\n\nif __name__ == \"__main__\":\n    main()\n```\nOutput\n```shell\n[1, 2, 5, 10, 17] Method 1 - Composed Sequence\n[1, 2, 5, 10, 17] Method 2 - Generator Chain\n```\n## Best Practice\nIt's best practice to pass a dict in and out of each function.\nEach function can modify the dict as they complete their computation.\nThis design seems the most readable and extensible.\n```python\nimport sequential_functions as sf\n\ndef main():\n    sequence = sf.Compose(\n        create_item_dict,\n        load_image,\n        preprocess_image,\n        detect_objects,\n    )\n\n    paths = [\"cat.jpg\",\"dog.jpg\"]\n    for item in sequence(paths):\n        print(f\"Results: {item['image_path']}\")\n        print(item[\"detections\"])\n        print()\n\ndef create_item_dict(path):\n    print(f\"Item Dict: {path}\")\n    item = { \"image_path\": path}\n    return item\n\ndef load_image(item):\n    print(f\"Loading: {item['image_path']}\")\n    item[\"image\"] = \"e.g. numpy array\"\n    return item\n\ndef preprocess_image(item):\n    print(f\"Preprocessing: {item['image_path']}\")\n    item[\"tensor\"] = \"e.g. torch tensor\"\n    return item\n\ndef detect_objects(item):\n    print(f\"Detecting: {item['image_path']}\")\n    item[\"detections\"] = [\"box 1\", \"box 2\"]\n    return item\n\nif __name__ == \"__main__\":\n    main()\n```\nOutput\n```shell\nItem Dict: cat.jpg\nLoading: cat.jpg\nPreprocessing: cat.jpg\nDetecting: cat.jpg\nResults: cat.jpg\n['box 1', 'box 2']\n\nItem Dict: dog.jpg\nLoading: dog.jpg\nPreprocessing: dog.jpg\nDetecting: dog.jpg\nResults: dog.jpg\n['box 1', 'box 2']\n\n```\n## Multi Processing\nIt's trivial to distribute work to multiple processes by providing the num_processes argument.\nWork is still completed in order.\nUse multiprocessing when computation is the bottle neck.\n```python\nimport sequential_functions as sf\nimport time\nimport os\n\ndef main():\n    sequence = sf.Compose(\n        slow_task,\n        record_process_id,\n        num_processes=5, # Simply choose the number of processes\n    )\n\n    start_time = time.perf_counter()\n\n    for x in sequence(range(5)):\n        print(x)\n\n    end_time = time.perf_counter()\n\n    print(f\"total time: {end_time-start_time}\")\n\ndef slow_task(x):\n    time.sleep(1) # sleep 1 second\n    return x\n\ndef record_process_id(x):\n    return f\"Task {x} completed by process {os.getpid()}\"\n\nif __name__ == \"__main__\":\n    main()\n```\nOutput\n```shell\nTask 0 completed by process 19228\nTask 1 completed by process 19229\nTask 2 completed by process 19230\nTask 3 completed by process 19231\nTask 4 completed by process 19232\ntotal time: 1.0112877849987854\n```\n## Multi Threading\nIt's trivial to distribute work to multiple threads by providing the num_threads argument.\nWork is still completed in order.\nUse threading when IO is the bottle neck. e.g loading urls.\n```python\nimport sequential_functions as sf\nimport time\nimport threading\n\ndef main():\n    sequence = sf.Compose(\n        slow_task,\n        record_thread_name,\n        num_threads=5, # Simply choose the number of thread\n    )\n\n    start_time = time.perf_counter()\n\n    for x in sequence(range(5)):\n        print(x)\n\n    end_time = time.perf_counter()\n\n    print(f\"total time: {end_time-start_time}\")\n\ndef slow_task(x):\n    time.sleep(1) # sleep 1 second\n    return x\n\ndef record_thread_name(x):\n    name = threading.current_thread().name\n    return f\"Task {x} completed by thread {name}\"\n\nif __name__ == \"__main__\":\n    main()\n```\nOutput\n```shell\nTask 0 completed by thread ThreadPoolExecutor-0_0\nTask 1 completed by thread ThreadPoolExecutor-0_1\nTask 2 completed by thread ThreadPoolExecutor-0_2\nTask 3 completed by thread ThreadPoolExecutor-0_3\nTask 4 completed by thread ThreadPoolExecutor-0_4\ntotal time: 1.0028790479991585\n```\n## Nesting\nCompose returns a callable that can be nesting inside another Compose.\nEach compose can use threads and processes independently.\n```python\nimport sequential_functions as sf\nimport threading\nimport time\nimport os\n\ndef main():\n    sequence = sf.Compose(\n        function_a,\n\n        sf.Compose(\n            function_b,\n            num_threads=3,\n        ),\n\n        sf.Compose(\n            function_c,\n            num_processes=3,\n        ),\n    )\n    outputs=list(sequence(range(3)))\n    print(outputs)\n\ndef function_a(x):\n    print(f\"function_a({x}) ran in main thread\")\n    return x\n\ndef function_b(x):\n    time.sleep(1) # sleep 1 second\n    print(f\"function_b({x}) ran in thread {threading.current_thread().name}\")\n    return x\n\ndef function_c(x):\n    time.sleep(1) # sleep 1 second\n    print(f\"function_c({x}) ran in process {os.getpid()}\")\n    return x\n\nif __name__ == \"__main__\":\n    main()\n```\nOutput\n```shell\nfunction_a(0) ran in main thread\nfunction_a(1) ran in main thread\nfunction_a(2) ran in main thread\nfunction_b(0) ran in thread ThreadPoolExecutor-0_0\nfunction_b(1) ran in thread ThreadPoolExecutor-0_1\nfunction_b(2) ran in thread ThreadPoolExecutor-0_2\nfunction_c(0) ran in process 19245\nfunction_c(1) ran in process 19246\nfunction_c(2) ran in process 19247\n[0, 1, 2]\n```\n## Callables\nFunctions can be any type of callable.\nUse closures and callable objects to change the behaviour of functions\n```python\nimport sequential_functions as sf\n\ndef main():\n    sequence = sf.Compose(\n        to_string,\n        append_string(\" Hello\"),\n        append_string(\" World!\"),\n        EncloseString(\"**\"),\n        EncloseString(\"..\"),\n    )\n\n    for x in sequence(range(5)):\n        print(x)\n\ndef to_string(x):\n    return str(x)\n\ndef append_string(s):\n    # create new function on the fly\n    def closure(x):\n        return x + s\n    # return this new function\n    return closure\n\nclass EncloseString():\n    # Callable class\n    def __init__(self,s):\n        self.s = s\n    def __call__(self,x):\n        return self.s + x + self.s\n\nif __name__ == \"__main__\":\n    main()\n```\nOutput\n```shell\n..**0 Hello World!**..\n..**1 Hello World!**..\n..**2 Hello World!**..\n..**3 Hello World!**..\n..**4 Hello World!**..\n```\n## Item Growth\nFunctions can yield out more items than they take in.\n```python\nimport sequential_functions as sf\n\ndef main():\n    sequence = sf.Compose(\n        yield_video_frames,\n        detect_objects,\n    )\n    for x in sequence(range(3)):\n        print(x)\n\ndef yield_video_frames(x):\n    num_frames = 3\n    for i in range(num_frames):\n        yield f\"Video {x}, Frame {i}\"\n\ndef detect_objects(x):\n    return f\" Detecting objects in {x}\"\n\nif __name__ == \"__main__\":\n    main()\n```\nOutput\n```shell\n Detecting objects in Video 0, Frame 0\n Detecting objects in Video 0, Frame 1\n Detecting objects in Video 0, Frame 2\n Detecting objects in Video 1, Frame 0\n Detecting objects in Video 1, Frame 1\n Detecting objects in Video 1, Frame 2\n Detecting objects in Video 2, Frame 0\n Detecting objects in Video 2, Frame 1\n Detecting objects in Video 2, Frame 2\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sequential-functions",
    "package_url": "https://pypi.org/project/sequential-functions/",
    "platform": null,
    "project_url": "https://pypi.org/project/sequential-functions/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ChainBreak/sequential_functions/issues",
      "Homepage": "https://github.com/ChainBreak/sequential_functions"
    },
    "release_url": "https://pypi.org/project/sequential-functions/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Compose functions and sequentially call them. Run sequence in multiple threads or processes!",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17082903,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f3a2a0419789669b9e9635bbec8f838362a153c768686d1248845b01be5bee",
          "md5": "d3729755d1f46ce78d344ba4ec426012",
          "sha256": "e60446da6c7852668673d6beb597cf49d27fb4bd4f2dfa0d8d949ae3949f3352"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3729755d1f46ce78d344ba4ec426012",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 3203,
        "upload_time": "2023-01-19T02:42:46",
        "upload_time_iso_8601": "2023-01-19T02:42:46.693981Z",
        "url": "https://files.pythonhosted.org/packages/80/f3/a2a0419789669b9e9635bbec8f838362a153c768686d1248845b01be5bee/sequential_functions-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72b531fe1b901591d8756ed6ae0568f6672c5ec99a20cc5736b99c92a45900b9",
          "md5": "a5a12e51d3f4bb59119ae65aa31e32cf",
          "sha256": "b2e8d85a08bb15da262ef5880964c6bc59e39992e696c91399ecf62aa291525d"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a5a12e51d3f4bb59119ae65aa31e32cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2634,
        "upload_time": "2023-01-19T02:42:48",
        "upload_time_iso_8601": "2023-01-19T02:42:48.730148Z",
        "url": "https://files.pythonhosted.org/packages/72/b5/31fe1b901591d8756ed6ae0568f6672c5ec99a20cc5736b99c92a45900b9/sequential_functions-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "594b8fb63c590693f5a1c09bb91d65f7e7ed8dc6f639dc7a4841b99e5d48d675",
          "md5": "533162eeae9ce8f3eb361cb47e62cf65",
          "sha256": "007a8f0ad20e2e3ed3d273fa3d2a24bd6349e49ed2273f0a75334e14a6471358"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "533162eeae9ce8f3eb361cb47e62cf65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4504,
        "upload_time": "2023-01-21T06:56:45",
        "upload_time_iso_8601": "2023-01-21T06:56:45.805318Z",
        "url": "https://files.pythonhosted.org/packages/59/4b/8fb63c590693f5a1c09bb91d65f7e7ed8dc6f639dc7a4841b99e5d48d675/sequential_functions-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e47b4b27e0d1ec0a6e9bc1d0b48f2e16a576786407df0d927089e32384cd311",
          "md5": "0613b9781fd390d1de4f61c0dedb30a3",
          "sha256": "b84e4555b3aaeb9657afb430a23705a03a741d9563392ed05a1dac28f1ae802d"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0613b9781fd390d1de4f61c0dedb30a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4016,
        "upload_time": "2023-01-21T06:56:48",
        "upload_time_iso_8601": "2023-01-21T06:56:48.688511Z",
        "url": "https://files.pythonhosted.org/packages/0e/47/b4b27e0d1ec0a6e9bc1d0b48f2e16a576786407df0d927089e32384cd311/sequential_functions-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0797ff7c80ce30d0cb2e444f48876565aa7e8b4482e6fd6df41145426f0d82da",
          "md5": "04f04bb9eb0fa31c94cc9d0ccea1630b",
          "sha256": "5059881e04cac2340021b31838a4818aae829ee93693327572dd57492633c7c1"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04f04bb9eb0fa31c94cc9d0ccea1630b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5222,
        "upload_time": "2023-01-22T00:50:48",
        "upload_time_iso_8601": "2023-01-22T00:50:48.299458Z",
        "url": "https://files.pythonhosted.org/packages/07/97/ff7c80ce30d0cb2e444f48876565aa7e8b4482e6fd6df41145426f0d82da/sequential_functions-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad9487833ddb2ac66f281b8fe2e28c487706fbf6568961112d4811511e05be90",
          "md5": "99c509080d319c8bcc97dc3683c294b5",
          "sha256": "b46bb187a3ac76e219ed736e0b5a1aa128628d2ee468a73eaf7e98dd8b9ac18f"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "99c509080d319c8bcc97dc3683c294b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4971,
        "upload_time": "2023-01-22T00:50:50",
        "upload_time_iso_8601": "2023-01-22T00:50:50.147463Z",
        "url": "https://files.pythonhosted.org/packages/ad/94/87833ddb2ac66f281b8fe2e28c487706fbf6568961112d4811511e05be90/sequential_functions-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8bd2f36b8e143d83f57a6c6d705ddc1c6a097f7e130023e041133a12055cf82",
          "md5": "496f3efa6b79697e9db53d04ea17402e",
          "sha256": "114b79c353477b53a18309f05e3cf16c79ee547533fafcf3ca7b760e3abb60be"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "496f3efa6b79697e9db53d04ea17402e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5488,
        "upload_time": "2023-01-24T03:38:17",
        "upload_time_iso_8601": "2023-01-24T03:38:17.504690Z",
        "url": "https://files.pythonhosted.org/packages/d8/bd/2f36b8e143d83f57a6c6d705ddc1c6a097f7e130023e041133a12055cf82/sequential_functions-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62b8d171bb0d5587729fc4a50f512be148291ebaf8b93a7a3693d78072fb1022",
          "md5": "392ddafecb35843ca266bf58bc7c5464",
          "sha256": "4f1f2f883428696ba9afa8e4372e491e0964c016a46e209e46659a3109466ed3"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "392ddafecb35843ca266bf58bc7c5464",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5236,
        "upload_time": "2023-01-24T03:38:19",
        "upload_time_iso_8601": "2023-01-24T03:38:19.547388Z",
        "url": "https://files.pythonhosted.org/packages/62/b8/d171bb0d5587729fc4a50f512be148291ebaf8b93a7a3693d78072fb1022/sequential_functions-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "707eeeaaa2c88df53ec396bed83d598e2ec458e3ba29119aed89ec632634442b",
          "md5": "d949437dcd33647d12afb1e77edd3a18",
          "sha256": "6ec223e08910578ba6aa72dd76bb6dd084e4a4e4ae23638006e1dc6246818de6"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d949437dcd33647d12afb1e77edd3a18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5541,
        "upload_time": "2023-02-28T11:48:12",
        "upload_time_iso_8601": "2023-02-28T11:48:12.074097Z",
        "url": "https://files.pythonhosted.org/packages/70/7e/eeaaa2c88df53ec396bed83d598e2ec458e3ba29119aed89ec632634442b/sequential_functions-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ba3ff73c0cd328639c843ed7afadc00d07eef777b66de2fc2744e1f5f207cfb",
          "md5": "9acd64e47fb706a627217d9d977f79f9",
          "sha256": "813419a75687955474c179919b3e96a868505cc0f71f2b2416df1bf8b6325143"
        },
        "downloads": -1,
        "filename": "sequential_functions-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9acd64e47fb706a627217d9d977f79f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6086,
        "upload_time": "2023-02-28T11:48:46",
        "upload_time_iso_8601": "2023-02-28T11:48:46.550183Z",
        "url": "https://files.pythonhosted.org/packages/2b/a3/ff73c0cd328639c843ed7afadc00d07eef777b66de2fc2744e1f5f207cfb/sequential_functions-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "707eeeaaa2c88df53ec396bed83d598e2ec458e3ba29119aed89ec632634442b",
        "md5": "d949437dcd33647d12afb1e77edd3a18",
        "sha256": "6ec223e08910578ba6aa72dd76bb6dd084e4a4e4ae23638006e1dc6246818de6"
      },
      "downloads": -1,
      "filename": "sequential_functions-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d949437dcd33647d12afb1e77edd3a18",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5541,
      "upload_time": "2023-02-28T11:48:12",
      "upload_time_iso_8601": "2023-02-28T11:48:12.074097Z",
      "url": "https://files.pythonhosted.org/packages/70/7e/eeaaa2c88df53ec396bed83d598e2ec458e3ba29119aed89ec632634442b/sequential_functions-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ba3ff73c0cd328639c843ed7afadc00d07eef777b66de2fc2744e1f5f207cfb",
        "md5": "9acd64e47fb706a627217d9d977f79f9",
        "sha256": "813419a75687955474c179919b3e96a868505cc0f71f2b2416df1bf8b6325143"
      },
      "downloads": -1,
      "filename": "sequential_functions-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "9acd64e47fb706a627217d9d977f79f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6086,
      "upload_time": "2023-02-28T11:48:46",
      "upload_time_iso_8601": "2023-02-28T11:48:46.550183Z",
      "url": "https://files.pythonhosted.org/packages/2b/a3/ff73c0cd328639c843ed7afadc00d07eef777b66de2fc2744e1f5f207cfb/sequential_functions-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}