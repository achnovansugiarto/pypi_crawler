{
  "info": {
    "author": "Cody Yu",
    "author_email": "comaniac0422@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Lorien: A Hyper-Automated Tuning System for Tensor Operators\n============================================================\n[![Build Status](https://github.com/comaniac/lorien/workflows/Ubuntu/badge.svg)](https://github.com/comaniac/lorien/actions?query=workflow%3AUbuntu)\n\nLorien is a system built on the top of TVM to massively explore/benchmark the best schedule configs\nof TOPI schedules.\n\n## Motivation\n\nAlthough TVM already has a TOPI (TVM Operator Inventory) with the implementations of algorithm\nand schedules for commonly used operators such as conv2d and dense, there is a challenge makes \nTOPI hard to be improved efficiently.\n\nThe best schedule of TOPI is stored in\n[TopHub](https://github.com/uwsampl/tvm-distro/tree/master/tophub),\nwhich is a JSON file in GitHub. However, it has the following problems.\n\n1. Storing all schedules in a single text file has low accessibility and scalability.\n   Every time AutoTVM has to load an entire JSON file in order to find only one\n   schedule config for a workload. \n\n2. The coverage of workloads and platforms are insufficient in the current version.\n   For example, the latest TopHub covers only 690 workloads for\n   [CUDA backend](https://github.com/uwsampl/tvm-distro/blob/master/tophub/cuda_v0.06.log), \n   including conv2, depthwise conv2d, and 5 GPU models.\n\n3. Comparing to TVM that has several commits everyday, TopHub is not frequently updated.\n   As a result, some schedule configs are out-of-date and cannot achieve\n   good performance anymore.\n\nSince it is impractical to use TVM CI to benchmark the performance for every pull request, we need\na separate system to regularly benchmark and update the stored schedule configs.\n\n## Commandline Interface and Example Usages\n\nThe system has a complete CLI with hierarchical commands. All commands can also be\nspecified in a config file in YAML format, and use a prefix \"@\" to expand them.\nSee the following examples for CLI usages, and `configs/samples` for example configurations.\nNote the the complete description of each command can be retrieved by the help command:\n\n```bash\npython3 -m lorien <commands> -h\n```\n\n* Extract workloads from a Gluon CV model.\n\n```bash\npython3 -m lorien generate extract gcv --model alexnet --target llvm\n```\n\n* Extract workloads from a TF model.\n\n```bash\npython3 -m lorien generate extract tf --model ./mobilenet.pb --target llvm\n```\n\n* Extract workloads from a Gluon CV model and mutate them to generate new workloads.\n\n```bash\npython3 -m lorien generate mutate modelzoo rules.yaml --model alexnet --target llvm\n```\n\n* Tune workloads with RPC servers.\n\n```\n# tune.yaml\nrpc:\n    llvm -mcpu=skylake-avx512:\n      - localhost:18871\ndb:\n    endpoint_url:\n        http://localhost:10020\nlog-s3-bucket: saved-tuning-logs\nntrial: 3000\n```\n\n```bash\npython3 -m lorien tune @tune.yaml @gcv_workloads_llvm.yaml\n```\n\n## System Requirements\n\n* Python 3.6+\n\n* **Amazon DynamoDB (local or aws)**: DynamoDB is used for storing and maintain the tuned schedules.\nYou can choose to either 1) launch a [local version](https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.zip)\nand specify endpoint URL (e.g. `--db \"endpoint_url: http://<your IP>:8000\"`), 2) or launch an AWS service, configure\nAWS CLI in your machine, and specify the region name (e.g., `--db \"region_name: us-west-1\"`) when invoking the tuning.\n\n* **AWS S3 (optional)**: S3 is used to store the full tuning logs (JSON files generated by AutoTVM). This is an optional requirement,\nso if you did not specify `--log-s3-bucket bucket_name`, then the full tuning logs will not be uploaded but only the best\nschedule config will be submitted to the DynamoDB.\n\n\n## Documentation\n\nTBA",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/comaniac/lorien",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lorien",
    "package_url": "https://pypi.org/project/lorien/",
    "platform": "",
    "project_url": "https://pypi.org/project/lorien/",
    "project_urls": {
      "Homepage": "https://github.com/comaniac/lorien"
    },
    "release_url": "https://pypi.org/project/lorien/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Hyper-Automated Tuning System for Tensor Operators",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6434480,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd6a30f402d230f95fef273046fb0cf341d0dcca3d19a9fb8fb65dc7f984e134",
          "md5": "949ecbb729cc0113ef0a48aafd53441b",
          "sha256": "d824e3bbe8e01a74e02281c304579fa4cb4ba3b6a2326a57064ed939dfcf2592"
        },
        "downloads": -1,
        "filename": "lorien-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "949ecbb729cc0113ef0a48aafd53441b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34575,
        "upload_time": "2020-01-11T01:01:57",
        "upload_time_iso_8601": "2020-01-11T01:01:57.403705Z",
        "url": "https://files.pythonhosted.org/packages/cd/6a/30f402d230f95fef273046fb0cf341d0dcca3d19a9fb8fb65dc7f984e134/lorien-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd6a30f402d230f95fef273046fb0cf341d0dcca3d19a9fb8fb65dc7f984e134",
        "md5": "949ecbb729cc0113ef0a48aafd53441b",
        "sha256": "d824e3bbe8e01a74e02281c304579fa4cb4ba3b6a2326a57064ed939dfcf2592"
      },
      "downloads": -1,
      "filename": "lorien-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "949ecbb729cc0113ef0a48aafd53441b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34575,
      "upload_time": "2020-01-11T01:01:57",
      "upload_time_iso_8601": "2020-01-11T01:01:57.403705Z",
      "url": "https://files.pythonhosted.org/packages/cd/6a/30f402d230f95fef273046fb0cf341d0dcca3d19a9fb8fb65dc7f984e134/lorien-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}