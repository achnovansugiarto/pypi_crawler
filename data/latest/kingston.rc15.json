{
  "info": {
    "author": "Jacob Oscarson",
    "author_email": "jacob@414soft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "Kingston README\n===============\n\nI use the excellent `Funcy <https://funcy.readthedocs.io/>`__ library\nfor Python a lot. This is my collection of extras that I have designed\nto work closely together with funcy. Funcy Kingston (Reference, see\n`here <https://youtu.be/U79o7qwul48>`__).\n\n`Run on Repl.it <https://repl.it/@jacob414/kingston>`__\n\nKingston is auto-formatted using\n`yapf <https://github.com/google/yapf>`__.\n\nPattern matching using extended ``dict``'s\n------------------------------------------\n\n``match.Match`` objects are callable objects using a ``dict`` semantic\nthat also matches calls based on the type of the calling parameters:\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> foo = match.TypeMatcher({\n   ...     int: lambda x: x*100,\n   ...     str: lambda x: f'Hello {x}'\n   ... })\n   >>> foo(10)\n   1000\n   >>> foo('bar')\n   'Hello bar'\n   >>>\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> foo = match.TypeMatcher({\n   ...     int: lambda x: x * 100,\n   ...     str: lambda x: f'Hello {x}',\n   ...     (int, int): lambda a, b: a + b\n   ... })\n   >>> foo(10)\n   1000\n   >>> foo('bar')\n   'Hello bar'\n   >>>\n   >>> foo(1, 2)\n   3\n   >>>\n\nYou can use ``typing.Any`` as a wildcard:\n\n.. code:: python\n\n   >>> from typing import Any\n   >>> from kingston import match\n   >>> foo = match.TypeMatcher({\n   ...     int: lambda x: x * 100,\n   ...     str: (lambda x: f\"Hello {x}\"),\n   ...     (int, Any): (lambda num, x: num * x)\n   ... })\n   >>> foo(10)\n   1000\n   >>> foo('bar')\n   'Hello bar'\n   >>> foo(3, 'X')\n   'XXX'\n   >>> foo(10, 10)\n   100\n   >>>\n\nYou can also subclass type matchers and use a decorator to declare cases\nas methods:\n\n.. code:: python\n\n   >>> from kingston.match import Matcher, TypeMatcher, case\n   >>> from numbers import Number\n   >>> class NumberDescriber(TypeMatcher):\n   ...    @case\n   ...    def describe_one_int(self, one:int) -> str:\n   ...        return \"One integer\"\n   ...\n   ...    @case\n   ...    def describe_two_ints(self, one:int, two:int) -> str:\n   ...        return \"Two integers\"\n   ...\n   ...    @case\n   ...    def describe_one_float(self, one:float) -> str:\n   ...        return \"One float\"\n   >>> my_num_matcher:Matcher[Number, str] = NumberDescriber()\n   >>> my_num_matcher(1)\n   'One integer'\n   >>> my_num_matcher(1, 2)\n   'Two integers'\n   >>> my_num_matcher(1.0)\n   'One float'\n   >>>\n\nTyping pattern matchers\n~~~~~~~~~~~~~~~~~~~~~~~\n\n``match.Match`` objects can be typed using Python's standard\n`typing <https://docs.python.org/3/library/typing.html>`__ mechanism. It\nis done using\n`Generics <https://mypy.readthedocs.io/en/stable/generics.html>`__:\n\nThe two subtypes are *[argument type, return type]*.\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> foo:match.Matcher[int, int] = match.TypeMatcher({\n   ...    int: lambda x: x+1,\n   ...    str: lambda x: 'hello'})\n   >>> foo(10)\n   11\n   >>> foo('bar')  # fails on mypy but would be ok at runtime\n   'hello'\n   >>>\n\nMatch by value(s)\n~~~~~~~~~~~~~~~~~\n\n``match.ValueMatcher`` will use the *values* of the parameters to do the\nsame as as ``match.Match``:\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> foo = match.ValueMatcher({'x': (lambda: 'An x!'), ('x', 'y'): (lambda x,y: 3*(x+y))})\n   >>> foo('x')\n   'An x!'\n   >>> foo('x', 'y')\n   'xyxyxy'\n   >>>\n\nSame as with the type matcher above, ``typing.Any`` works as a wildcard\nwith the value matcher as well:\n\n.. code:: python\n\n   >>> from kingston import match\n   >>> from typing import Any\n   >>> foo = match.ValueMatcher({\n   ...     'x': lambda x: 'An X!',\n   ...     ('y', Any): lambda x, y: 3 * (x + y)\n   ... })\n   >>> foo('x')\n   'An X!'\n   >>> foo('y', 'x')\n   'yxyxyx'\n   >>>\n\nYou can also declare cases as methods in a custom ``ValueMatcher``\nsubclass.\n\nUse the function ``value_case()`` to declare value cases. **Note:**\n*imported as a shorthand*:\n\n.. code:: python\n\n   >>> from kingston.match import Matcher, ValueMatcher\n   >>> from kingston.match import value_case as case\n   >>> class SimplestEval(ValueMatcher):\n   ...     @case(Any, '+', Any)\n   ...     def _add(self, a, op, b) -> int:\n   ...         return a + b\n   ...\n   ...     @case(Any, '-', Any)\n   ...     def _sub(self, a, op, b) -> int:\n   ...         return a - b\n   >>> simpl_eval = SimplestEval()\n   >>> simpl_eval(1, '+', 2)\n   3\n   >>> simpl_eval(10, '-', 5)\n   5\n   >>>\n\nAspect Oriented Programming with terse syntax\n---------------------------------------------\n\nKingston also implement a technique to do\n`AOP <https://en.wikipedia.org/wiki/Aspect-oriented_programming>`__ with\nan opinionated terse syntax that I like. It lives in the\n``kingston.aop`` module.\n\nIt's used in two main ways:\n\nWith decorators\n~~~~~~~~~~~~~~~\n\nDefine an ``=Aspects=`` object as an empty object:\n\n.. code:: python\n\n   >>> from kingston.aop import Aspects\n   >>> when = Aspects()\n   >>>\n\nThen declare your aspects using the object as a decorator:\n\n.. code:: python\n\n   >>> @when(lambda x: x == 1, y=lambda y: y == 1)\n   ... def labbo(x, y=1):\n   ...     return 11\n   >>> @when(lambda x: x == 1, z=lambda z: z == 2)\n   ... def labbo(x, z=2):\n   ...     return 12\n   >>>\n\nAspect 1 above will be triggered if you call it with positional\nparameter 0 as ``1`` and a keyword parameter ``y=1``:\n\n.. code:: python\n\n   >>> labbo(1, y=1)\n   11\n   >>>\n\nAspect 2 is triggered by parameters ``1, z=2``:\n\n.. code:: python\n\n   >>> labbo(1, z=2)\n   12\n   >>>\n\nAny other combination of parameters will raise a ``AspectNotFound``\nexception:\n\n.. code:: python\n\n   >>> labbo(123) # doctest: +IGNORE_EXCEPTION_DETAIL\n   Traceback (most recent call last):\n   AspectNotFound\n   >>>\n   >>>\n\nWith a mapping of aspects\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou might find this better if you want brievity and/or point free style.\n\n.. code:: python\n\n   >>> given = Aspects({\n   ...     (lambda x: x == 1,): lambda x: 1,\n   ...     (lambda x: x > 1,): lambda x: x * x\n   ... })\n   >>>\n\nCalls work the same as above:\n\n.. code:: python\n\n   >>> given(1)\n   1\n   >>> given(2)\n   4\n   >>> given(0) # doctest: +IGNORE_EXCEPTION_DETAIL\n   Traceback (most recent call last):\n   AspectNotFound\n   >>>\n\nNice things\n-----------\n\ndig()\n~~~~~\n\nDeep value grabbing from almost any object. Somewhat inspired by CSS\nselectors, but not very complete. This part of the API is unstable â€” it\nwill (hopefully) be developed further in the future.\n\n.. code:: python\n\n   >>> from kingston import dig\n   >>> dig.xget((1, 2, 3), 1)\n   2\n   >>> dig.xget({'foo': 'bar'}, 'foo')\n   'bar'\n   >>> dig.dig({'foo': 1, 'bar': [1,2,3]}, 'bar.1')\n   2\n   >>> dig.dig({'foo': 1, 'bar': [1,{'baz':'jox'},3]}, 'bar.1.baz')\n   'jox'\n   >>>\n\nThe difference between ``dig.dig()`` and ``funcy.get_in()`` is that you\ncan use shell-like blob patterns to get several values keyed by similar\nnames:\n\n.. code:: python\n\n   >>> from kingston import dig\n   >>> res = dig.dig({'foo': 1, 'foop': 2}, 'f*')\n   >>> res\n   [foo=1:int, foop=2:int]\n   >>> # (textual representation of an indexable object)\n   >>> res[0]\n   foo=1:int\n   >>> res[1]\n   foop=2:int\n   >>>\n\nTesting tools\n-------------\n\nKingston has some testing tools as well. Also, due to Kingston's\nopinionated nature, they are only targeted towards\n`pytest <https://pytest.org>`__.\n\nShortform for pytest.mark.parametrize\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nI tend to use pytest.mark.parametrize in the same form everywhere. Thus\nI have implemented this short-form:\n\n.. code:: python\n\n   >>> from kingston.testing import fixture\n   >>> @fixture.params(\n   ...     \"a, b\",\n   ...     (1, 1),\n   ...     (2, 2),\n   ... )\n   ... def test_dummy_compare(a, b):\n   ...     assert a == b\n   >>>\n\nDoctests as fixtures\n~~~~~~~~~~~~~~~~~~~~\n\nThere is a test decorator that generates pytest fixtures from a function\nor an object. Use it like this:\n\n.. code:: python\n\n   >>> def my_doctested_func():\n   ...   \"\"\"\n   ...   >>> 1 + 1\n   ...   2\n   ...   >>> mystring = 'abc'\n   ...   >>> mystring\n   ...   'abc'\n   ...   \"\"\"\n   ...   pass\n   >>> from kingston.testing import fixture\n   >>> @fixture.doctest(my_doctested_func)\n   ... def test_doctest_my_doctested(doctest):  # fixture name always 'doctest'\n   ...     res = doctest()\n   ...     assert res == '', res\n   >>>",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jacob414/kingston",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kingston",
    "package_url": "https://pypi.org/project/kingston/",
    "platform": "",
    "project_url": "https://pypi.org/project/kingston/",
    "project_urls": {
      "Homepage": "https://github.com/jacob414/kingston"
    },
    "release_url": "https://pypi.org/project/kingston/0.7.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Some Python nicieties",
    "version": "0.7.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9773179,
  "releases": {
    "0.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28f58bd6e394e268c21e4c6b315e877cc71880111f217e6c2b1a0271529aa53c",
          "md5": "bf7de0b1aa147c207178447dd8cc4f28",
          "sha256": "a5c874688e38a4e115985c398bc481e0d9f217a99b7ef065ed97f40620b63184"
        },
        "downloads": -1,
        "filename": "kingston-0.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bf7de0b1aa147c207178447dd8cc4f28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15792,
        "upload_time": "2020-03-24T15:35:34",
        "upload_time_iso_8601": "2020-03-24T15:35:34.766817Z",
        "url": "https://files.pythonhosted.org/packages/28/f5/8bd6e394e268c21e4c6b315e877cc71880111f217e6c2b1a0271529aa53c/kingston-0.6.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e81f7cdf1010756fe1ad076bafe4bd52d1420f668d1473e70e8c533fc350086",
          "md5": "4637e5c54edd3c6075e758d690be162a",
          "sha256": "8b6a7e84b48d09849a2f9e92334240435a3d7b9d2ecfa71f8952fd3fe3a2dc27"
        },
        "downloads": -1,
        "filename": "kingston-0.6.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4637e5c54edd3c6075e758d690be162a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17563,
        "upload_time": "2020-04-01T15:11:50",
        "upload_time_iso_8601": "2020-04-01T15:11:50.221457Z",
        "url": "https://files.pythonhosted.org/packages/4e/81/f7cdf1010756fe1ad076bafe4bd52d1420f668d1473e70e8c533fc350086/kingston-0.6.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a619f91c0d429c1fcd108bfc87050efab468ee1972691c3e178dbe2ec189ad4",
          "md5": "acd908358a65183ad460997a9b85bd34",
          "sha256": "5de331282880c0374d1d183baedc7c8355109e69ccfb394f0453fa1132ac6db1"
        },
        "downloads": -1,
        "filename": "kingston-0.6.5.tar.gz",
        "has_sig": false,
        "md5_digest": "acd908358a65183ad460997a9b85bd34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21421,
        "upload_time": "2020-06-10T12:23:10",
        "upload_time_iso_8601": "2020-06-10T12:23:10.604281Z",
        "url": "https://files.pythonhosted.org/packages/2a/61/9f91c0d429c1fcd108bfc87050efab468ee1972691c3e178dbe2ec189ad4/kingston-0.6.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0049d380eeee62a31277ca6eba0a339d4568443704ec568c61a29d97b3a127a",
          "md5": "cb74da55f49dbc6866da8347a1d40afc",
          "sha256": "e236c6847a2044ca55ea35265e06bc24f257e49935c2e44d4d070825814280aa"
        },
        "downloads": -1,
        "filename": "kingston-0.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cb74da55f49dbc6866da8347a1d40afc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21313,
        "upload_time": "2020-06-12T09:11:06",
        "upload_time_iso_8601": "2020-06-12T09:11:06.520568Z",
        "url": "https://files.pythonhosted.org/packages/c0/04/9d380eeee62a31277ca6eba0a339d4568443704ec568c61a29d97b3a127a/kingston-0.6.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c9ff1c8e6c7c9aa2377d6946d5e72802d34fa6d45e8edad55969bb2cdd73f3e",
          "md5": "f6a3a0715de42b48c171c10ad5c3528a",
          "sha256": "7e7ea58a6e5139b3e35eba2a4d33c236431195b495c75e4d94a0bf78494a8a03"
        },
        "downloads": -1,
        "filename": "kingston-0.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f6a3a0715de42b48c171c10ad5c3528a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21335,
        "upload_time": "2020-06-17T20:23:40",
        "upload_time_iso_8601": "2020-06-17T20:23:40.480526Z",
        "url": "https://files.pythonhosted.org/packages/5c/9f/f1c8e6c7c9aa2377d6946d5e72802d34fa6d45e8edad55969bb2cdd73f3e/kingston-0.6.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71aa7e05f838744af0325689d4db86cb9502a7a6bb0dd777a5c6ecd00a0b26ca",
          "md5": "e497c3bfb9cb645bd39ec3bc96ddbe36",
          "sha256": "2ca9745f4a47c40664b80c497031be1b5c08eacf5b71a0ba6a98aa79917672ec"
        },
        "downloads": -1,
        "filename": "kingston-0.6.8.tar.gz",
        "has_sig": false,
        "md5_digest": "e497c3bfb9cb645bd39ec3bc96ddbe36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18491,
        "upload_time": "2020-07-05T16:22:36",
        "upload_time_iso_8601": "2020-07-05T16:22:36.707172Z",
        "url": "https://files.pythonhosted.org/packages/71/aa/7e05f838744af0325689d4db86cb9502a7a6bb0dd777a5c6ecd00a0b26ca/kingston-0.6.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a05cd58354f3e57e0e43a0d97c7426eff829c40b33a98dee4d4d3304761da9a1",
          "md5": "29f066d10e19de3a620a0267e31282e1",
          "sha256": "bcef41529aa238791ef6aae42e6ea5a46575aad2ee15a7ba28d66b2afa0bb726"
        },
        "downloads": -1,
        "filename": "kingston-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "29f066d10e19de3a620a0267e31282e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19898,
        "upload_time": "2020-10-20T18:28:29",
        "upload_time_iso_8601": "2020-10-20T18:28:29.370781Z",
        "url": "https://files.pythonhosted.org/packages/a0/5c/d58354f3e57e0e43a0d97c7426eff829c40b33a98dee4d4d3304761da9a1/kingston-0.7.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Invalid homepage URL in setup.py"
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2835d066e262bdb09e216a1c87b6ff46ede4ce73e2edb1e107210a44fa1b4288",
          "md5": "d2b9c319e493b8cc2fe5b8984b52c811",
          "sha256": "00f021f923336eb966516ebc0e238214b9c8ca21143388daf1f420d7e609d9ca"
        },
        "downloads": -1,
        "filename": "kingston-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d2b9c319e493b8cc2fe5b8984b52c811",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19907,
        "upload_time": "2020-10-20T18:37:55",
        "upload_time_iso_8601": "2020-10-20T18:37:55.735268Z",
        "url": "https://files.pythonhosted.org/packages/28/35/d066e262bdb09e216a1c87b6ff46ede4ce73e2edb1e107210a44fa1b4288/kingston-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa017326ec949c72400bc86ed9baedaa9b8e2e397f8ad4c494ce2746116f669e",
          "md5": "4718a0b60dec50634be50de1052b1a4e",
          "sha256": "3dc0897a2c2529e5174d92def681c097155f90847f9c69bda0e21c09bab4e1fc"
        },
        "downloads": -1,
        "filename": "kingston-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4718a0b60dec50634be50de1052b1a4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19968,
        "upload_time": "2020-11-11T10:48:08",
        "upload_time_iso_8601": "2020-11-11T10:48:08.920815Z",
        "url": "https://files.pythonhosted.org/packages/fa/01/7326ec949c72400bc86ed9baedaa9b8e2e397f8ad4c494ce2746116f669e/kingston-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7163acffe36025fdeedfca7a96cdd2f4e84a42431ae3c5820227aa2733a7dc6f",
          "md5": "7b6570286076d632cd480d7afcb977fc",
          "sha256": "0cde710dfeba8d74da2fa7c4f03c23365ea01335a0a3595054b49f5ea746d1bf"
        },
        "downloads": -1,
        "filename": "kingston-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7b6570286076d632cd480d7afcb977fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21344,
        "upload_time": "2020-11-19T15:37:59",
        "upload_time_iso_8601": "2020-11-19T15:37:59.587363Z",
        "url": "https://files.pythonhosted.org/packages/71/63/acffe36025fdeedfca7a96cdd2f4e84a42431ae3c5820227aa2733a7dc6f/kingston-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ded2e0f92f584551aa8e3855e8d6b4c908a93323cfe2ca9b01dd6e5af5836fc",
          "md5": "9e8af82b9c04708a7fce07d57457262c",
          "sha256": "6acedb1f0ec92345052a3927e20c4acb820c7f9cebd774f0c3094c8c97b3b342"
        },
        "downloads": -1,
        "filename": "kingston-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9e8af82b9c04708a7fce07d57457262c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21548,
        "upload_time": "2020-12-07T14:20:36",
        "upload_time_iso_8601": "2020-12-07T14:20:36.329520Z",
        "url": "https://files.pythonhosted.org/packages/5d/ed/2e0f92f584551aa8e3855e8d6b4c908a93323cfe2ca9b01dd6e5af5836fc/kingston-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af1e0b1126e7a5a77b4569f6db21e4e7c5d14f1a23958deb33ecf31cb5490b53",
          "md5": "be824773b241c6d8b11e6596c8a827b8",
          "sha256": "ca5fee596e6774821fb9298725d39f27ee4e83736c45bb1b47c963b0dd839a7d"
        },
        "downloads": -1,
        "filename": "kingston-0.7.5.tar.gz",
        "has_sig": false,
        "md5_digest": "be824773b241c6d8b11e6596c8a827b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22810,
        "upload_time": "2020-12-22T11:50:08",
        "upload_time_iso_8601": "2020-12-22T11:50:08.428936Z",
        "url": "https://files.pythonhosted.org/packages/af/1e/0b1126e7a5a77b4569f6db21e4e7c5d14f1a23958deb33ecf31cb5490b53/kingston-0.7.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d2145769d34fe1be05ab4f80b93230e236e1ef4d33438a67aacaa5bd3556593",
          "md5": "dbf41f40d7e1ce108717c23dab210ab4",
          "sha256": "5e1603f02c591b258b77ec382bc0dd767c4bd06250669891c2adb6a584ecd4b5"
        },
        "downloads": -1,
        "filename": "kingston-0.7.6.tar.gz",
        "has_sig": false,
        "md5_digest": "dbf41f40d7e1ce108717c23dab210ab4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23877,
        "upload_time": "2021-01-20T11:24:19",
        "upload_time_iso_8601": "2021-01-20T11:24:19.298252Z",
        "url": "https://files.pythonhosted.org/packages/2d/21/45769d34fe1be05ab4f80b93230e236e1ef4d33438a67aacaa5bd3556593/kingston-0.7.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b36ef43eb326aafc253d85e4bb23acbfa8900cc2b6bf8efe67456ad7e286803",
          "md5": "29f6f941ecf0a5871b3ab5ec55d9dc39",
          "sha256": "086369c3b8469bb47da2a09f93b96e51a5b6a127d4a2fa867a3ad17ea42c5c85"
        },
        "downloads": -1,
        "filename": "kingston-0.7.7.tar.gz",
        "has_sig": false,
        "md5_digest": "29f6f941ecf0a5871b3ab5ec55d9dc39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23904,
        "upload_time": "2021-01-21T13:09:44",
        "upload_time_iso_8601": "2021-01-21T13:09:44.056688Z",
        "url": "https://files.pythonhosted.org/packages/3b/36/ef43eb326aafc253d85e4bb23acbfa8900cc2b6bf8efe67456ad7e286803/kingston-0.7.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fe72b5edaeec04b9bb49e5a4cf3aa209c432ecf08c486623ae5e4f43a0d50c6",
          "md5": "e8582cb32fe7a29557c2d00a611a67ea",
          "sha256": "d2c80eebcb1066be2782afd975df3b04b0cc285d9afdf48b10e81914fe228aaf"
        },
        "downloads": -1,
        "filename": "kingston-0.7.8.tar.gz",
        "has_sig": false,
        "md5_digest": "e8582cb32fe7a29557c2d00a611a67ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24824,
        "upload_time": "2021-03-15T12:34:47",
        "upload_time_iso_8601": "2021-03-15T12:34:47.086486Z",
        "url": "https://files.pythonhosted.org/packages/7f/e7/2b5edaeec04b9bb49e5a4cf3aa209c432ecf08c486623ae5e4f43a0d50c6/kingston-0.7.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fe72b5edaeec04b9bb49e5a4cf3aa209c432ecf08c486623ae5e4f43a0d50c6",
        "md5": "e8582cb32fe7a29557c2d00a611a67ea",
        "sha256": "d2c80eebcb1066be2782afd975df3b04b0cc285d9afdf48b10e81914fe228aaf"
      },
      "downloads": -1,
      "filename": "kingston-0.7.8.tar.gz",
      "has_sig": false,
      "md5_digest": "e8582cb32fe7a29557c2d00a611a67ea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24824,
      "upload_time": "2021-03-15T12:34:47",
      "upload_time_iso_8601": "2021-03-15T12:34:47.086486Z",
      "url": "https://files.pythonhosted.org/packages/7f/e7/2b5edaeec04b9bb49e5a4cf3aa209c432ecf08c486623ae5e4f43a0d50c6/kingston-0.7.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}