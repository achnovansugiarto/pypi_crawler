{
  "info": {
    "author": "Alex SÃ¡enz Rojas",
    "author_email": "cnca@cenat.ac.cr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Framework :: Sphinx",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "<!-- @format -->\n\n# ASGARD\n\n# User Manual for Asgard\n\nASGARD is a configuration file created by the Costa Rica National High Technology Center to automate the identification of antibiotic resistance genes in bacterias like Salmonella. ASGARD provides an easy to use interface to process big batches of fastq files with little to no configuration. It also provides a CPU optimization algorithm that reduces the processing time. This tool is based on the ARIBA software that was developed by Sanger-Pathogens.\n\nSAGA is a compiled workflow of programs that enables the alignment, indexing and mapping of genes samples against a reference genome. Multiple reference genomes are available in different databases using the NCBI API as fasta files. SAGA provides an easy to use way to select the reference genome and analyze a series of samples to obtain a Phylogenetic tree using RAxML.\n\nUsage\n\nPython asgard.py \\&lt;options\\&gt;\n\nRequired Arguments:\n\n--config_dir: Path to the directory containing the configuration files. All .ajson configuration files contained in this directory will be executed in alphabetical order.\n\n## AJSON specification\n\nASGARD json files are an extension of the JavaScript Object Notation that provides references to internal and external properties of the objects. Certain elements must be present in the configuration file for the program to work.\n\n### Syntax\n\nFiles contained in the config_dir directory with the .ajson extension are treated as configuration files for the execution of ASGARD\n\nThe configuration file is read from top to bottom and any reference values are resolved in the same manner.\n\n-   Internal Objects\n    -   Internal references are defined using double braces. The referenced property must be assigned before it is referenced. In this example the value of the color key inside the motorcycle object would be lightblue after the evaluation.\n\n```json\n{\n    \"motorcycle\": {\n        \"variant\": \"light\",\n\n        \"color\": \"{{variant}}blue\",\n\n        \"year\": 2010\n    }\n}\n```\n\n-   External Objects\n    -   References to external objects are defined using double braces and using dot to navigate the object depth, all external references must be made from the top object and are case sensitive, in this example the color of the helmet will match the color of the motorcycle.\n\n```json\n\n{\n\n    \"motorcycle\":{\n        \"color\": \"blue\",\n        \"year\": 2010\n    },\n\n    \"helmet\":{\n        \"color\":\"{{motorcycle.color}}\"\n    }\n```\n\nIt is possible to create composite values from multiple references and strings.\n\nThe definition of the name/value pair must be defined before it is referenced so that it can be resolved properly.\n\n| Object    | Description                                                                                                                                                           | Key                 | Description                                                                                                                                                                                                          |\n| --------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| constants | Contains non changing configuration parameters that can be referenced by other objects. Properties inside the \"constant\" object must not contain external references. | name                | Name of the script that will be executed, this name is used to generate the output directory.                                                                                                                        |\n|           |                                                                                                                                                                       | input_directory     | Directory with the fastq gz files forward and reverse. Each fastq file must have its pair in the same directory. Each pair is composed of a name and a suffix specified in the forward and reverse properties.       |\n|           |                                                                                                                                                                       | output_directory    | Directory where the output of each configuration file will be created. Each execution creates a new directory with an unique name at start of its execution, resulting files are then created inside this directory. |\n|           |                                                                                                                                                                       | input_extension     | All files in the input directory ending with the input extension are listed and used for the execution of the commands.                                                                                              |\n|           |                                                                                                                                                                       | reference_accession | Accession number of the genomes to be downloaded and analysed. This file is downloaded with the fasta extension using NCBI efetch utility.                                                                           |\n|           |                                                                                                                                                                       | accessory_accession | Accession number of the genome to be appended to the reference_accession fasta file.                                                                                                                                 |\n|           |                                                                                                                                                                       | entrez_database     | Database from where the fasta file will be searched and downloaded                                                                                                                                                   |\n|           |                                                                                                                                                                       | workers             | Specifies the number of parallel jobs created of each command, each time a task finishes a new job is spawned with the next iteration.                                                                               |\n|           |                                                                                                                                                                       | forward             | Suffix of the forward files in the input directory.                                                                                                                                                                  |\n|           |                                                                                                                                                                       | reverse             | Suffix of the matching pair of the input fastq files.                                                                                                                                                                |\n|           |                                                                                                                                                                       | iterator            | Expandable bash expression that represents a list of files to iterate with the workflow. This expression can be a composite value. Other wildcards can be used for the filename expansion.                           |\n| dynamic   | This object contains information that is variable at run time, this enables it to iterate through the files present in the input directory.                           | prefix_regex        | Regular expressions that define the pattern of the valid filename without extension nor suffix.                                                                                                                      |\n|           |                                                                                                                                                                       | placeholder         | Symbol used as a placeholder for the fastq file names before its evaluation at runtime.                                                                                                                              |\n|           |\n|           |                                                                                                                                                                       |                     |                                                                                                                                                                                                                      |\n\n### Execution Modes\n\nEach command can be executed in different modes depending on the number of iterations required.\n\n| Object  | Description                                                                                                                                                                                                                                                                                              | Execution mode     | Description                                                                                                                                                                                                                                                                     |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| execute | Each key and value pair describe the execution mode of each of the commands within the configuration file. The objects that describe the tasks of each command must have the same name as the key in the execute object. All commands with its respective task must be written after the execute object. | single             | The object will be evaluated and will be executed one single time. Dynamic values should not be used in this command since these will not be evaluated.                                                                                                                         |\n|         |                                                                                                                                                                                                                                                                                                          | iterate-parallel   | The object will be executed in a new process created by the subprocess library, the number of parallel processes is determined by the workers constant. Dynamic placeholders will be evaluated when the new process is spawned. Filenames will be replaced in no logical order. |\n|         |                                                                                                                                                                                                                                                                                                          | iterate-sequential | The command object will be iterative but only one process is run at a time. Dynamic placeholders will be evaluated the same way as in iterate-parallel.                                                                                                                         |\n|         |                                                                                                                                                                                                                                                                                                          | false              | The task is disabled and will be ignored.                                                                                                                                                                                                                                       |\n\n### Command Types\n\nObjects declared at the root level are checked for the \\&lt;\\&lt;command\\&gt;\\&gt; property, if this property is defined the program will queue its execution in the same order it&#39;s been read.\n\nSAGA\n\n-   Simple\n\nThese are simple commands designed to manipulate and download files and directories.\n\n| Command         | Description                                                                                                                                                                                                                                                                                                                                                  |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| create_file     | Creates an empty text file in the specified in the _file_ parameter. Absolute path to the file is recommended.<br/> <b>Required parameters:</b><br/><tb/> file: Symbolic link to the new file to be created.                                                                                                                                                 |\n| check_directory | Verifies that the directory exists, if not it creates one with the specified name, recursive creation of directories is enabled.<br/> <b>Required parameters: </b><br/>directory: Absolute path to be checked or created.                                                                                                                                    |\n| entrez_download | This command downloads the fasta files using its accession number in the NCBI database. HTTPS GET request is used for the download.<br/> <b>Required parameters:</b><br/> url: https URL to the fasta file in the NCBI database. Use the constant accession variable. <br/>file: Symbolic link to the new file to be created.                                |\n| merge           | The merge command enables the program to concatenate two or more text files into a new file. A new line is added between each file listed. <br/> <b>Required parameters:</b><br/> files: JSON list of the absolute or relative paths to the files to be merged.<br/> output_file: Path to the file to be created. If the file exists it will be overwritten. |\n| replace         | Replaces all occurrences of a text value with a new string. <br/> <b>Required parameters:</b><br/> file: Path to the file where the text fragment will be replaced.<br/> old_data: Text to be replaced.<br/> new_data: The new text that will replace the old text fragment.                                                                                 |\n|                 |                                                                                                                                                                                                                                                                                                                                                              |\n\nComplex commands are specified using a json array, dynamically generated items are evaluated and then executed sequentially. These commands are run using the subprocess library of python. If POSIX is being used, the path to the program must be the first parameter of the list.\n\nIt is possible to add extra parameters, these will be evaluated by the program to be executed. If the expansion of bash parameters is necessary, it is possible to use the &quot;shell&quot; property to specify whether it should be executed by the shell interpreter. These types of complex commands can be used to iterate over multiple files with similar names. To iterate these files, the placeholders defined in the &quot;dynamic&quot; object must be used, these placeholders will be replaced by the real values at runtime. In order to enable file iteration, it is necessary to select the &quot;iterate-parallel&quot; or &quot;iterate-sequential&quot; execution modes.\n\nExample:\n\nIn this case the program samtools must be accessible from the directory where ASGARD is being run, this can be achieved by setting the environmental variables or specifying the full path to the executable.\n\nThe values in the command list can be composite, constant, or strings.\n\n```json\n\n\"sam_view\": {\n    \"extension\": \".bam\",\n    \"file\": \"{{dynamic.output_file}}{{extension}}\",\n    \"output_pipeline\": \"{{file}}\",\n    \"command\": [\"samtools\",\"view\",\"-bS\",\"-q\",\"15\",\"{{bwa_mem.file}}\"]\n\n},\n```\n\nDefault Configuration files.\n\nTwo different configuration files are provided with the software one corresponding to ASGARD and the other one for SAGA. These configuration files implement the following pipeline.\n\n![](https://drive.google.com/uc?export=view&id=1oR0NXd_xv7YMc_FV3T-CcSLfrENcJ6nS)\n\n# TODO\n\nASGARD\n\n| Task | Command | Parameters | Description |\n| ---- | ------- | ---------- | ----------- |\n\n|\nSAGA\n\n| Task | Command | Parameters | Description |\n| ---- | ------- | ---------- | ----------- |\n\n|\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/CNCA_CeNAT/asgard",
    "keywords": "",
    "license": "GNU General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asgard-saga",
    "package_url": "https://pypi.org/project/asgard-saga/",
    "platform": "",
    "project_url": "https://pypi.org/project/asgard-saga/",
    "project_urls": {
      "Homepage": "https://gitlab.com/CNCA_CeNAT/asgard"
    },
    "release_url": "https://pypi.org/project/asgard-saga/0.9.0a0.dev0/",
    "requires_dist": [
      "colorama (>=0.4.4)",
      "executing (>=0.8.1)",
      "icecream (>=2.1.1)",
      "jsonschema (>=3.2.0)",
      "munch (>=2.5.0)",
      "numpy (>=1.20.2)",
      "pydocstyle (>=5.1.1)",
      "Pygments (>=2.10.0)",
      "pyrsistent (>=0.17.3)",
      "requests (>=2.24.0)",
      "six (>=1.15.0)",
      "snowballstemmer (>=2.1.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "A tool for genomic sequential analysis automation.",
    "version": "0.9.0a0.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11588507,
  "releases": {
    "0.9.0a0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32db5c347b30cff8398e8a9ebd8b952de2cf80154fcd4734af776c903235773d",
          "md5": "9f223cd98811d8abacef908af9b9e20b",
          "sha256": "14a4f2386f2c6f9be835b3701bbf6b3fbe84f18f0f58e5a08ab6e4ce4fa8c5a4"
        },
        "downloads": -1,
        "filename": "asgard_saga-0.9.0a0.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f223cd98811d8abacef908af9b9e20b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31188,
        "upload_time": "2021-09-30T00:18:00",
        "upload_time_iso_8601": "2021-09-30T00:18:00.856699Z",
        "url": "https://files.pythonhosted.org/packages/32/db/5c347b30cff8398e8a9ebd8b952de2cf80154fcd4734af776c903235773d/asgard_saga-0.9.0a0.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0a47eab7243dd48d59c9bf31097e86808659a42562bc21cff96135f263ff872",
          "md5": "029eadfe8fd1298046e68c4fbebcf12d",
          "sha256": "aa7afd4689785600524d2b6d7a929d1f3da06ca009eba7d7321d1bc20b5534f9"
        },
        "downloads": -1,
        "filename": "asgard-saga-0.9.0a0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "029eadfe8fd1298046e68c4fbebcf12d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16840,
        "upload_time": "2021-09-30T00:18:02",
        "upload_time_iso_8601": "2021-09-30T00:18:02.538207Z",
        "url": "https://files.pythonhosted.org/packages/a0/a4/7eab7243dd48d59c9bf31097e86808659a42562bc21cff96135f263ff872/asgard-saga-0.9.0a0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32db5c347b30cff8398e8a9ebd8b952de2cf80154fcd4734af776c903235773d",
        "md5": "9f223cd98811d8abacef908af9b9e20b",
        "sha256": "14a4f2386f2c6f9be835b3701bbf6b3fbe84f18f0f58e5a08ab6e4ce4fa8c5a4"
      },
      "downloads": -1,
      "filename": "asgard_saga-0.9.0a0.dev0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f223cd98811d8abacef908af9b9e20b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 31188,
      "upload_time": "2021-09-30T00:18:00",
      "upload_time_iso_8601": "2021-09-30T00:18:00.856699Z",
      "url": "https://files.pythonhosted.org/packages/32/db/5c347b30cff8398e8a9ebd8b952de2cf80154fcd4734af776c903235773d/asgard_saga-0.9.0a0.dev0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0a47eab7243dd48d59c9bf31097e86808659a42562bc21cff96135f263ff872",
        "md5": "029eadfe8fd1298046e68c4fbebcf12d",
        "sha256": "aa7afd4689785600524d2b6d7a929d1f3da06ca009eba7d7321d1bc20b5534f9"
      },
      "downloads": -1,
      "filename": "asgard-saga-0.9.0a0.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "029eadfe8fd1298046e68c4fbebcf12d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16840,
      "upload_time": "2021-09-30T00:18:02",
      "upload_time_iso_8601": "2021-09-30T00:18:02.538207Z",
      "url": "https://files.pythonhosted.org/packages/a0/a4/7eab7243dd48d59c9bf31097e86808659a42562bc21cff96135f263ff872/asgard-saga-0.9.0a0.dev0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}