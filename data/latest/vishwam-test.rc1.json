{
  "info": {
    "author": "Vishwam",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# RazorpayX Python Client\n\n[![PyPI Version](https://img.shields.io/pypi/v/razorpay.svg)](https://pypi.python.org/pypi/razorpay) [![Build Status](https://travis-ci.org/razorpay/razorpay-python.svg?branch=master)](https://travis-ci.org/razorpay/razorpay-python) [![Coverage Status](https://coveralls.io/repos/github/razorpay/razorpay-python/badge.svg?branch=master)](https://coveralls.io/github/razorpay/razorpay-python?branch=master) [![PyPI](https://img.shields.io/pypi/pyversions/razorpay.svg)]() [![License](https://img.shields.io/:license-mit-blue.svg)](https://opensource.org/licenses/MIT)\n\nPython bindings for interacting with the RazorpayX API\n\nThis is primarily meant for merchants who wish to perform interactions with the RazorpayX API programatically.\n\n## Installation\n\n```sh\n$ pip install razorpay\n```\n\n## Usage\n\nYou need to setup your key and secret using the following:\nYou can find your API keys at <https://dashboard.razorpay.com/#/app/keys>.\n\n```py\nimport razorpay\nclient = razorpay.Client(auth=(\"<YOUR_API_KEY>\", \"<YOUR_API_SECRET>\"))\n```\n\n## App Details\n\nAfter setting up client, you can set your app details before making any request\nto Razorpay using the following:\n\n```py\nclient.set_app_details({\"title\" : \"<YOUR_APP_TITLE>\", \"version\" : \"<YOUR_APP_VERSION>\"})\n```\n\nFor example, you can set the title to `Django` and version to `1.8.17`. Please ensure\nthat both app title and version are strings.\n\n### Payments\n\n- Fetch all payments\n\n    ```py\n    client.payment.all()\n    ```\n\n- Fetch a particular payment\n\n    ```py\n    client.payment.fetch(\"<PAYMENT_ID>\")\n    ```\n\n- Capture a payment\n\n    ```py\n    client.payment.capture(\"<PAYMENT_ID>\", \"<AMOUNT>\")\n    Note: <AMOUNT> should be same as the original amount while creating the payment\n    ```\n\n- Refund a payment\n\n    ```py\n    client.payment.refund(\"<PAYMENT_ID>\", \"<AMOUNT>\")\n    # for full refund\n\n    client.payment.refund(\"<PAYMENT_ID>\", \"<AMOUNT_TO_BE_REFUNDED>\")\n    # for particular amount\n\n    Note: <AMOUNT_TO_BE_REFUNDED> should be equal/less than the original amount\n    ```\n\n- Get Bank Transfer Entity for given payment\n\n    ```py\n    client.payment.bank_transfer(\"<PAYMENT_ID>\")\n    ```\n\n- Create transfer for given payment id\n\n    ```py\n    client.payment.transfer(\"<PAYMENT_ID>\")\n    ```\n    For List of params refer to the API guide :\n    https://razorpay.com/docs/route/api-reference/#creating-payments\n\n- Fetch all transfers associated with the payment\n\n    ```py\n    client.payment.transfers(\"<PAYMENT_ID>\")\n    ```\n\n### Refunds\n\n- Fetch a particular refund\n\n    ```py\n    client.refund.fetch(\"<refund_id>\")\n    ```\n\n- Fetch all refunds\n\n    ```py\n    client.refund.all()\n    ```\n\n### Orders\n\n- Create a new order\n\n    ```py\n    client.order.create(data=DATA)\n    DATA should contain these keys\n        amount           : amount of order\n        currency         : currency of order\n        receipt          : receipt id of order\n        payment_capture  : 1 if capture should be done automatically or else 0\n        notes(optional)  : optional notes for order\n    ```\n\n- fetch a particular order\n\n    ```py\n    client.order.fetch(\"<ORDER_ID>\")\n    ```\n\n- fetch all orders\n\n    ```py\n    client.order.all()\n    ```\n\n- fetch Payments of order\n\n    ```py\n    client.order.payments(\"<ORDER_ID>\")\n    ```\n\n\n### Payment Link\n\n- Create payment link\n\n    Refer [api docs](https://razorpay.com/docs/payment-links/api/#creating-payment-links) for allowed request parameters.\n    ```py\n    DATA = {\n        \"customer\": {\n            \"name\": \"Test Customer\",\n            \"email\": \"test@example.com\",\n            \"contact\": \"+919999888877\"\n        },\n        \"type\": \"link\",\n        \"amount\": 100,\n        \"currency\": \"INR\",\n        \"description\": \"Payment link for this purpose - xyz\"\n    }\n    client.invoice.create(data=DATA)\n    ```\n\n- Fetch payment link's details by id\n\n    ```py\n    client.invoice.fetch(\"<INVOICE_ID>\")\n    ```\n\n- Fetch all payment link\n\n    Refer [api docs](https://razorpay.com/docs/payment-links/api/#fetching-get-multiple-payment-links) for allowed query parameters.\n    ```py\n    client.invoice.all()\n    ```\n\n- Cancel a payment link by id\n\n    ```py\n    client.invoice.cancel(\"<INVOICE_ID>\")\n    ```\n\n- Send/resend notifications for a payment link by id\n\n    ```py\n    client.invoice.notify_by(\"<INVOICE_ID>\", \"<MEDIUM>\")\n    # MEDIUM - sms/email\n    ```\n\n### Invoices\n\n- Create a new invoice\n\n    Refer [api docs](https://razorpay.com/docs/invoices/api/#creating-an-invoice) for allowed request parameters in detail.\n    ```py\n    client.invoice.create(data=DATA)\n    ```\n\n- Fetch a invoice by id\n\n    ```py\n    client.invoice.fetch(\"<INVOICE_ID>\")\n    ```\n\n- Fetch all invoices\n\n    Refer [api docs](https://razorpay.com/docs/invoices/api/#fetching-multiple-invoices) for allowed query parameters.\n    ```py\n    client.invoice.all()\n    ```\n\n- Cancel an invoice by id\n\n    ```py\n    client.invoice.cancel(\"<INVOICE_ID>\")\n    ```\n\n- Send/resend notifications for an invoice by id\n\n    ```py\n    client.invoice.notify_by(\"<INVOICE_ID>\", \"<MEDIUM>\")\n    # MEDIUM - sms/email\n    ```\n\n- Issue an invoice in draft status by id\n\n    ```py\n    client.invoice.issue(\"<INVOICE_ID>\")\n    ```\n\n- Delete an invoice by id\n\n    ```py\n    client.invoice.delete(\"<INVOICE_ID>\")\n    ```\n\n- Edit an invoice by id\n\n    Refer [api docs](https://razorpay.com/docs/invoices/api/#updating-an-invoice) for allowed request parameters in detail.\n    ```py\n    client.invoice.edit(invoice_id=invoice_id,data=DATA)\n    ```\n\n\n### Settlements\n\n- fetch a particular settlement detail\n\n    ```py\n    client.settlement.fetch(\"<SETTLEMENT_ID>\")\n    ```\n\n- fetch all settlement detail\n\n    ```py\n    client.settlement.all()\n    ```\n\n### Card\n\n- fetch a particular card data\n\n    ```py\n    client.card.fetch(card_id=card_id)\n    ```\n\n### Customer\n\n- fetch a particular customer Info\n\n    ```py\n    client.customer.fetch(customer_id=customer_id)\n    ```\n\n- Create a customer\n\n    ```py\n    client.customer.create(data=data)\n    ```\n\n- Edit a customer info\n\n    ```py\n    client.customer.edit(customer_id=customer_id, data=data)\n    ```\n\n### Token\n\n- fetch a token associated with a customer\n\n    ```py\n    client.token.fetch(customer_id=customer_id, token_id=token_id)\n    ```\n\n- fetch all tokens associated with customer\n\n    ```py\n    client.token.all(customer_id=customer_id)\n    ```\n\n- Delete a given token assicated with a customer\n\n    ```py\n    client.token.delete(customer_id=customer_id, token_id=token_id)\n    ```\n\n### Virtual Account\n\n- fetch all virtual account entities\n\n    ```py\n    client.virtual_account.all()\n    ```\n\n- fetch single virtual account details\n\n    ```py\n    client.virtual_account.fetch(virtual_account_id=virtual_account_id)\n    ```\n\n- create virtual account\n\n    ```py\n    client.virtual_account.create(data=DATA)\n    DATA should contain these keys\n        receiver_types        : ['bank_account']\n        description           : 'Random Description'\n        customer_id(optional) : <CUSTOMER_ID>\n    ```\n\n- close virtual account\n\n    ```py\n    client.virtual_account.close(virtual_account_id=virtual_account_id)\n    ```\n\n- fetch all payments for virtual account id\n\n    ```py\n    client.virtual_account.payments(virtual_account_id=virtual_account_id)\n    ```\n\n### Utility\n\n- Verify Payment Signature\n\n    `params_dict` should have `razorpay_order_id`, `razorpay_payment_id`, `razorpay_signature` which are received in the callback\n\n    ```py\n    client.utility.verify_payment_signature(params_dict)\n    ```\n\n- Verify Webhook Signature\n\n    `webhook_signature` is the signature you receive under `X-Razorpay-Signature` in the webhook, while `webhook_secret` is the secret you used when creating the webhook on dashboard.\n\n    ```py\n    client.utility.verify_webhook_signature(webhook_body, webhook_signature, webhook_secret)\n    ```\n\n### Subscriptions\n\n- Create a new subscription\n\n    ```py\n    client.subscription.create(data=DATA)\n    DATA should contain these keys\n        plan_id           : plan_id of subscription\n        customer_id       : id of customer\n        total_count       : number of subscriptions\n    ```\n\n- Fetch a particular subscription\n\n    ```py\n    client.subscription.fetch(\"<SUBSCRIPTION_ID>\")\n    ```\n\n- Fetch all subscriptions\n\n    ```py\n    client.subscription.all()\n    ```\n\n- Cancel subscription\n\n    ```py\n    client.subscription.cancel(\"<SUBSCRIPTION_ID>\")\n    ```\n\n- Create an addon for subscription\n    ```\n    client.subscription.createAddon(\"<SUBSCRIPTION_ID>\", data=DATA)\n    DATA should have these keys\n        item               : dict with keys amount, name and currency\n        quantity           : number of items\n    ```\n\n- Fetch a particular addon Info\n\n    ```py\n    client.addon.fetch(addon_id=addon_id)\n    ```\n\n- Delete an addon\n\n    ```py\n    client.addon.delete(addon_id=addon_id)\n    ```\n\n### Plans\n\n- Create a new plan\n\n    ```py\n    client.plan.create(data=DATA)\n    DATA should contain these keys\n        item_id           : corresponding item_id\n    ```\n\n- Fetch a particular plan\n\n    ```py\n    client.plan.fetch(\"<PLAN_ID>\")\n    ```\n\n- Fetch all plans\n\n    ```py\n    client.plan.all()\n    ```\n\n### Transfers\n\n- Fetch all Transfers\n\n    ```py\n    client.transfer.all()\n    ```\n\n- Fetch transfer by ID\n\n    ```py\n    client.transfer.fetch(\"<TRANSFER_ID>\")\n    ```\n\n- Create Transfer from given data\n\n    ```py\n    client.transfer.create(data=DATA)\n    DATA should contain these keys\n        amount   : 100\n        currency : INR\n        account  : acc_865rdfghu7632\n    ```\n\n- Edit Transfer from given data\n\n    ```py\n    client.transfer.edit(transfer_id=transfer_id, data=DATA)\n    DATA may contain these keys\n        on_hold       : True/False\n        on_hold_until : 15678903127\n    ```\n    For details on Transfer edit, please refer to the API guide:\n    https://razorpay.com/docs/route/api-reference/#examples\n\n- Reverse a given Transfer\n\n    ```py\n    client.transfer.reverse(transfer_id=transfer_id)\n    ```\n\n- Fetch all reversals for a given Transfer\n\n    ```py\n    client.transfer.reversals(transfer_id=transfer_id)\n    ```\n\n## Bugs? Feature requests? Pull requests?\n\nAll of those are welcome. You can [file issues][issues] or [submit pull requests][pulls] in this repository.\n\n[issues]: https://github.com/razorpay/razorpay-python/issues\n[pulls]: https://github.com/razorpay/razorpay-python/pulls\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vishwamshuklaRazorpay/vishwam_test",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vishwam-test",
    "package_url": "https://pypi.org/project/vishwam-test/",
    "platform": "",
    "project_url": "https://pypi.org/project/vishwam-test/",
    "project_urls": {
      "Homepage": "https://github.com/vishwamshuklaRazorpay/vishwam_test"
    },
    "release_url": "https://pypi.org/project/vishwam-test/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "squares the number",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12403635,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75c1f6c29f2385ccaab5530fbebfe24cf7ac1335b2e83da8c42d797cb1f60e3f",
          "md5": "3c004584bb89b12e77a07d6e0810e63b",
          "sha256": "658184e49303fc4f9771fd273250b56cfcd017522e68a6c9e34360e9be75030f"
        },
        "downloads": -1,
        "filename": "vishwam_test-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c004584bb89b12e77a07d6e0810e63b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5443,
        "upload_time": "2021-12-25T13:13:34",
        "upload_time_iso_8601": "2021-12-25T13:13:34.871419Z",
        "url": "https://files.pythonhosted.org/packages/75/c1/f6c29f2385ccaab5530fbebfe24cf7ac1335b2e83da8c42d797cb1f60e3f/vishwam_test-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d873376bde008eead584d7000c8954752bae7b5a65ed93a9165201d87f128d20",
          "md5": "a5ce516ce49fe34162664a3be181bfa5",
          "sha256": "a0cf4d4bf47d2a95a654f9dfa17e8acf8ca8e17e46121ff903c9b8a8798f9a9b"
        },
        "downloads": -1,
        "filename": "vishwam_test-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5ce516ce49fe34162664a3be181bfa5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5356,
        "upload_time": "2021-12-25T13:13:36",
        "upload_time_iso_8601": "2021-12-25T13:13:36.523374Z",
        "url": "https://files.pythonhosted.org/packages/d8/73/376bde008eead584d7000c8954752bae7b5a65ed93a9165201d87f128d20/vishwam_test-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75c1f6c29f2385ccaab5530fbebfe24cf7ac1335b2e83da8c42d797cb1f60e3f",
        "md5": "3c004584bb89b12e77a07d6e0810e63b",
        "sha256": "658184e49303fc4f9771fd273250b56cfcd017522e68a6c9e34360e9be75030f"
      },
      "downloads": -1,
      "filename": "vishwam_test-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c004584bb89b12e77a07d6e0810e63b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5443,
      "upload_time": "2021-12-25T13:13:34",
      "upload_time_iso_8601": "2021-12-25T13:13:34.871419Z",
      "url": "https://files.pythonhosted.org/packages/75/c1/f6c29f2385ccaab5530fbebfe24cf7ac1335b2e83da8c42d797cb1f60e3f/vishwam_test-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d873376bde008eead584d7000c8954752bae7b5a65ed93a9165201d87f128d20",
        "md5": "a5ce516ce49fe34162664a3be181bfa5",
        "sha256": "a0cf4d4bf47d2a95a654f9dfa17e8acf8ca8e17e46121ff903c9b8a8798f9a9b"
      },
      "downloads": -1,
      "filename": "vishwam_test-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a5ce516ce49fe34162664a3be181bfa5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5356,
      "upload_time": "2021-12-25T13:13:36",
      "upload_time_iso_8601": "2021-12-25T13:13:36.523374Z",
      "url": "https://files.pythonhosted.org/packages/d8/73/376bde008eead584d7000c8954752bae7b5a65ed93a9165201d87f128d20/vishwam_test-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}