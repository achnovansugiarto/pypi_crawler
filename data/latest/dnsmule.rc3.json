{
  "info": {
    "author": "joniumGit",
    "author_email": "52005121+joniumGit@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Internet"
    ],
    "description": "# DNSMule\n\n[![codecov](https://codecov.io/gh/joniumGit/dnsmule/branch/master/graph/badge.svg?token=54DPREJIFU)](https://codecov.io/gh/joniumGit/dnsmule)\n\nPackage for rule based dependency scanning and service fingerprinting via DNS.\n\nThis package provides utilities for writing and evaluating verbose and easy to read rule definitions in _YAML_-format.\nThere are two builtin rule formats with more available as plugins.\n\n## Overview\n\nThe DNSMule tool is composed in the following way:\n\n- DNSMule\n    - Backend\n    - Rules\n        - Rule\n    - Plugins\n\n#### Backends\n\nAny backend can be used and registered in YAML, the only requirement is extending the `dnsmule.backends.Backend` class.\nA backend is responsible for creating `dnsmule.definition.Record` instances for processing with `dnsmule.rules.Rules`.\n\n#### Plugins\n\nPlugins provide DNSMule with additional functionality and/or rule(types).\nPlugins can be registered in YAML.\nIt is required that all plugins extend the `dnsmule.plugins.Plugin` class.\n\n#### Rules\n\nThis class is responsible for processing every`Record` and producing a `dnsmule.definition.Result` for them.\nThe actual processing happens in individual `dnsmule.rules.Rule` instances that are ordered and orchestrated by this\nclass.\n\n#### Rule\n\nThese are user defined rules that process individual `Record` instances and append information to `record.data`\nor `record.tags`. The `record.data` is a storage for result metadata and additional information. The `record.tags` set\nis a collection of identifications for an input `Record`.\n\n#### Current State\n\nStates (Complete, Testing, Developing, Refining) for every feature planned at this moment.\n\n- (Complete) Backends\n    - (Complete) DNSPythonBackend\n    - (Complete) YAML definition\n- (Complete) Rules\n    - (Complete) Builtin types\n    - (Complete) Custom rules\n    - (Complete) Custom rule factories\n    - (Complete) YAML definition\n- (Testing) Plugins\n    - (Complete) Registration in program\n    - (Complete) Registration in YAML\n    - (Complete) YAML definition\n    - (Developing) Increasing test coverage\n- (Refining) Result Storage\n    - (Refining) Registration in program\n    - (Refining) Registration in YAML\n    - (Refining) YAML definition\n- (Developing) DNSMule\n    - (Complete) Rules from YAML\n    - (Complete) Backend from YAML\n    - (Testing) Plugins from YAML\n    - (Developing) Processing and gathering results\n    - (Refining) Result storage\n    - (Refining) Result storage from YAML\n    - (Refining) Combined YAML definition\n\n#### Example server\n\nThe repo has a `Dockerfile` for easily running the tool using an example server in Docker:\n\n```shell\n$ ./build-image\n$ ./run-server\n```\n\n#### Notice\n\nThis package is under active development.\n\n#### Additional\n\n- RnD Scripts under [scripts](scripts)\n- Example server under [server](server) \n\n# Rules\n\n## Summary\n\nThe tool configuration is done through one or multiple rule configuration files. The file structure is defined in the\n[schema file](rules-schema.yml). In addition to some builtin rule types, it is possible to create new types by\nregistering handlers or rules programmatically.\n\nRules support registration per DNS record type and priority for controlling invocation order.\n\n```yaml\nversion: '0.0.1'\nrules:\n  - name: o365\n    priority: 10\n    type: dns.regex\n    record: txt\n    config:\n      pattern: '^MS=ms'\n      identification: MICROSOFT::O365\n  - name: ses\n    type: dns.regex\n    record: txt\n    config:\n      pattern: '^amazonses:'\n      identification: AMAZON::SES\n```\n\n#### Example\n\n```python\nfrom dnsmule.definitions import Record, Result\nfrom dnsmule.rules import Rules, Rule\n\nrules: Rules\n\n...\n\n\n@rules.add.A[10]\nasync def my_scan(record: Record) -> Result:\n    from dnsmule.config import get_logger\n    get_logger().info('Address %s', record)\n    return record.identify('MY::SCAN')\n\n\n@rules.register('my.rule')\ndef create_my_rule(**arguments) -> Rule:\n    ...\n```\n\nHere the `add` is used to directly register a new rule into the ruleset with a given priority. The `register` call\ncreates a new handler for rules of type `my.rule`. Any future `my.rule` creations from `yml` or code would be routed to\nthis factory function.\n\n## Other Components in YAML\n\n#### Plugins\n\nIt is possible to register plugins using the YAML file:\n\n```yaml\nplugins:\n  - name: dnsmule_plugins.CertCheckPlugin\n    config:\n      callback: false\n```\n\nThese are required to extend the `dnsmule.plugins.Plugin` class.\nPlugins are evaluated and initialized before rules.\nAny rules requiring a plugin should list their plugin in this block.\nPlugins are only initialized once and if a plugin already exists in the receiving DNSMule instance\nit will be ignored.\n\n#### Backends\n\nIt is possible to define a single backend in a YAML file:\n\n```yaml\nbackend:\n  name: 'dnspython.DNSPythonBackend'\n  config:\n    timeout: 5.5\n    resolver: 8.8.8.8\n```\n\nThe backend must extend the `dnsmule.backends.Backend` class.\nThis declaration is ignored if this is not used in `DNSMule.load` or `DNSMule(file=file)`.\n\n## Editor Support\n\n#### Type Hints and JSON Schema (IntelliJ IDEA, PyCharm, etc.)\n\nIt is possible to register the schema file as a custom JSON schema in IntelliJ editors.\nThis will give access to typehints and schema validation inside rule files and is especially nice for dynamic rule\ndefinitions as you get full editor features for python inside the snippets.\n\n- settings...\n- Languages & Frameworks > Schemas and DTDs > JSON Schema Mappings\n- Add a new mapping with the schema file and specified file or pattern\n\nThis is configured in the schema using the custom intellij language injection tag:\n\n```yml\nx-intellij-language-injection:\n  language: Python\n  prefix: |+0\n    from dnsmule.rules.entities import Type, Record, Result\n\n    def add_rule(record_type: Any, rule_type: str, name: str, priority: int = 0, **options) -> None:\n        pass\n\n  suffix: ''\n```\n\nCurrently, this supports `dns.regex` pattern regex language injection and `dns.dynamic` rule code language injection.\nType hints and quick documentation are available.\n\n## Builtin types\n\n#### Regex rules\n\nRegex rules can be defined with either one `pattern` or multiple `patterns`.\nAn example is in the following snippet:\n\n```yml\nrules:\n  - name: test\n    type: dns.regex\n    record: txt\n    config:\n      pattern: '^.*\\.hello_world\\.'\n      identification: HELLO::WORLD\n      flags:\n        - UNICODE\n        - DOTALL\n  - name: generic_verification\n    type: dns.regex\n    record: txt\n    priority: 10\n    description: Generic Site Regex Collection\n    config:\n      patterns:\n        - '^(.+)(?:-(?:site|domain))?-verification='\n        - '^(.+)(?:site|domain)verification'\n        - '^(.+)_verify_'\n        - '^(\\w+)-code:'\n      group: 1\n```\n\nThe full definition is available from the schema file.\n\n#### Dynamic Rules\n\nDynamic rules are defined as code snippets with one or two methods\n\nAn init method that is invoked once after creation\n\n```python\ndef init() -> None:\n    add_rule(...)\n```\n\nA process function that is invoked once for each record\n\n```python\ndef process(record: Record) -> Result:\n    add_rule(...)\n    return record.result()\n```\n\nBoth of these functions have access to the following rule creation method:\n\n```python\ndef add_rule(\n        record_type: Any,\n        rule_type: str,\n        name: str,\n        priority: int = 0,\n        **options,\n) -> None:\n    \"\"\"\n    :param record_type: Valid DNS record type as text, int, or type\n    :param rule_type:   Valid rule type factory e.g. dns.regex\n    :param name:        Name of the created rule\n    :param priority:    Priority for the created rule, default 0\n    :param options:     Any additional options for the rule factory\n    \"\"\"\n    pass\n```\n\nThe only globals passed to these methods are:\n\n- \\_\\_builtins\\_\\_\n- from dnsmule.definitions import RRType, Record, Result\n- add_rule\n- Any additional globals created by the code itself\n\nWhen the code is exec'd the result is inspected for:\n\n- init function without parameters\n- process function with a single parameter\n\nSome notes:\n\n- The init function is invoked exactly once.\n- The process function is invoked exactly once for every single Record.\n- Any rules created from the init method will be invoked for every suitable record.\n- Any rules created from the process method will be invoked for suitable records found after creation.\n- Creating DynamicRules from init or process is considered undefined behaviour and care should be taken\n    - The user should call init manually and include fail-safes for only calling it once\n    - The add_rule callback might not be available so you need to pass it manually to the rule\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joniumGit/dnsmule",
    "keywords": "DNS,Dependency,DNSMule",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnsmule",
    "package_url": "https://pypi.org/project/dnsmule/",
    "platform": null,
    "project_url": "https://pypi.org/project/dnsmule/",
    "project_urls": {
      "Bug Reports": "https://github.com/joniumGit/dnsmule/issues",
      "Homepage": "https://github.com/joniumGit/dnsmule",
      "Source": "https://github.com/joniumGit/dnsmule"
    },
    "release_url": "https://pypi.org/project/dnsmule/0.1.0.post1/",
    "requires_dist": [
      "dnspython",
      "pyyaml",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Rule based dependency scanning and service fingerprinting via DNS",
    "version": "0.1.0.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17272037,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6b2724a9442396a0aa00c33af03332eac81d0286f2d99099f42f0bb14644f2b",
          "md5": "a69966e41ac4886c3edce67d08ee55de",
          "sha256": "c76ca40771adb5eaf36d66758d95cc7536e5291dc19170500a13824878c4440e"
        },
        "downloads": -1,
        "filename": "dnsmule-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a69966e41ac4886c3edce67d08ee55de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24418,
        "upload_time": "2023-03-07T09:49:30",
        "upload_time_iso_8601": "2023-03-07T09:49:30.170994Z",
        "url": "https://files.pythonhosted.org/packages/f6/b2/724a9442396a0aa00c33af03332eac81d0286f2d99099f42f0bb14644f2b/dnsmule-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "288d4529fc98ac2afdeaf4dc508654b48c9d5600dab941e46c0bdb3b5d4f1666",
          "md5": "7ce45371975aea8820d01c4f4138bf92",
          "sha256": "3ac8bf2293e87f482a446e96c979b0fa6607c4592062b6fa6f0176d641aa2ffc"
        },
        "downloads": -1,
        "filename": "dnsmule-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7ce45371975aea8820d01c4f4138bf92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31770,
        "upload_time": "2023-03-07T09:49:31",
        "upload_time_iso_8601": "2023-03-07T09:49:31.766048Z",
        "url": "https://files.pythonhosted.org/packages/28/8d/4529fc98ac2afdeaf4dc508654b48c9d5600dab941e46c0bdb3b5d4f1666/dnsmule-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee49e26a5be964c7d9d43ecd0de1120c7333e698541297b729f9f57a2ba181ca",
          "md5": "c958991b48ac3293e72ef9d40212b2cb",
          "sha256": "bea272fbb8cbb022bcbf3480bb2a3cc1193e89a83fa01ac5ca37f6cc1f127969"
        },
        "downloads": -1,
        "filename": "dnsmule-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c958991b48ac3293e72ef9d40212b2cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26633,
        "upload_time": "2023-03-13T13:14:49",
        "upload_time_iso_8601": "2023-03-13T13:14:49.094805Z",
        "url": "https://files.pythonhosted.org/packages/ee/49/e26a5be964c7d9d43ecd0de1120c7333e698541297b729f9f57a2ba181ca/dnsmule-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e084c1d4fa92a29a7140fe6b2ac382160c09573db8f62f57857baad04e6ccf1",
          "md5": "e595ff617a60f7ea9ca7ede89d412eaa",
          "sha256": "74f40c5a0d29a082952ce9c261d18752d4535859494e4a508f261a073bc8b70a"
        },
        "downloads": -1,
        "filename": "dnsmule-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e595ff617a60f7ea9ca7ede89d412eaa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33990,
        "upload_time": "2023-03-13T13:14:50",
        "upload_time_iso_8601": "2023-03-13T13:14:50.820695Z",
        "url": "https://files.pythonhosted.org/packages/9e/08/4c1d4fa92a29a7140fe6b2ac382160c09573db8f62f57857baad04e6ccf1/dnsmule-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5027440100fa14e849dca509b58baa40708e5a712d424eba4c4e005d43228d0",
          "md5": "3790c4094355e92fc3d0f06b4626641f",
          "sha256": "f47cecb5e7b0bfa7147d84345b6ca5c8346ebea05bbe9929939dee616ef17ab5"
        },
        "downloads": -1,
        "filename": "dnsmule-0.1.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3790c4094355e92fc3d0f06b4626641f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27383,
        "upload_time": "2023-03-13T14:11:37",
        "upload_time_iso_8601": "2023-03-13T14:11:37.920371Z",
        "url": "https://files.pythonhosted.org/packages/e5/02/7440100fa14e849dca509b58baa40708e5a712d424eba4c4e005d43228d0/dnsmule-0.1.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb14dcedf6bfdff84547ca791964fec06a16b3447549cc44dd7e797c0e2578d9",
          "md5": "41aab413c50be2f8034a05607abc1d43",
          "sha256": "8932b6c89953475cd84bf2311bac0ad67904a795611d45b3065dfabf297bd6a2"
        },
        "downloads": -1,
        "filename": "dnsmule-0.1.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "41aab413c50be2f8034a05607abc1d43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34919,
        "upload_time": "2023-03-13T14:11:39",
        "upload_time_iso_8601": "2023-03-13T14:11:39.703532Z",
        "url": "https://files.pythonhosted.org/packages/fb/14/dcedf6bfdff84547ca791964fec06a16b3447549cc44dd7e797c0e2578d9/dnsmule-0.1.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5027440100fa14e849dca509b58baa40708e5a712d424eba4c4e005d43228d0",
        "md5": "3790c4094355e92fc3d0f06b4626641f",
        "sha256": "f47cecb5e7b0bfa7147d84345b6ca5c8346ebea05bbe9929939dee616ef17ab5"
      },
      "downloads": -1,
      "filename": "dnsmule-0.1.0.post1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3790c4094355e92fc3d0f06b4626641f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 27383,
      "upload_time": "2023-03-13T14:11:37",
      "upload_time_iso_8601": "2023-03-13T14:11:37.920371Z",
      "url": "https://files.pythonhosted.org/packages/e5/02/7440100fa14e849dca509b58baa40708e5a712d424eba4c4e005d43228d0/dnsmule-0.1.0.post1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb14dcedf6bfdff84547ca791964fec06a16b3447549cc44dd7e797c0e2578d9",
        "md5": "41aab413c50be2f8034a05607abc1d43",
        "sha256": "8932b6c89953475cd84bf2311bac0ad67904a795611d45b3065dfabf297bd6a2"
      },
      "downloads": -1,
      "filename": "dnsmule-0.1.0.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "41aab413c50be2f8034a05607abc1d43",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 34919,
      "upload_time": "2023-03-13T14:11:39",
      "upload_time_iso_8601": "2023-03-13T14:11:39.703532Z",
      "url": "https://files.pythonhosted.org/packages/fb/14/dcedf6bfdff84547ca791964fec06a16b3447549cc44dd7e797c0e2578d9/dnsmule-0.1.0.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}