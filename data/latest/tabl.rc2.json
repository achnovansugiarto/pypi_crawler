{
  "info": {
    "author": "Stephen Boesch",
    "author_email": "javadba@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "About Tabel\n============\n\nLightweight, intuitive and fast data-tables.\n\n*Tabel* data-tables are tables with columns and column names, rows and row\nnumbers. Indexing and slicing your data is analogous to numpy array's. The\nonly real difference is that each column can have its own data type.\n\n\nDesign objectives\n-----------------\n\nI got frustrated with pandas: it's complicated slicing syntax (.loc, .x,\n.iloc, .. etc), it's enforced index column and the Series objects I get when I\nwant a numpy array. With Tabel I created the simplified pandas I need for many\nof my data-jobs. Just focussing on simple slicing of multi-datatype tables and\nbasic table tools.\n\n* Intuitive simple slicing.\n\n* Using numpy machinery, for best performance, integration with other tools\n  and future support.\n\n* Store data by column numpy arrays (column store).\n\n* No particular index column, all columns can be used as the index, the choice\n  is up to the user.\n\n* Fundamental necessities for sorting, grouping, joining and appending tables.\n\n\nInstall\n========\n\npip install tabel\n\nQuickstart\n===========\n\ninit\n----\n\nTo setup a Tabel:\n\n>>> from tabel import Tabel\n>>> tabl = Tabel([ [\"John\", \"Joe\", \"Jane\"],\n...                [1.82,1.65,2.15],\n...                [False,False,True]], columns = [\"Name\", \"Height\", \"Married\"])\n>>> tabl\n Name   |   Height |   Married\n--------+----------+-----------\n John   |     1.82 |         0\n Joe    |     1.65 |         0\n Jane   |     2.15 |         1\n3 rows ['<U4', '<f8', '|b1']\n\nAlternatively, Tabels can be setup from dictionaries, numpy arrays, pandas\nDataFrames, or no data at all. Database connectors usually return data as a list\nof records, the module provides a convenience function to transpose this into a\nlist of columns.\n\nslice\n-----\n\nSlicing can be done the numpy way, always returning Tabel objects:\n\n>>> tabl[1:3,[0,2]]\n Name   |   Married\n--------+-----------\n Joe    |         0\n Jane   |         1\n2 rows ['<U4', '|b1']\n\nSlices will always return a Tabel except in three distinct cases, when:\n\n1. explicitly one column is requested, a numpy array is returned:\n\n>>> tabl[1:3,'Name']       # doctest: +SKIP\narray(['Joe', 'Jane'],\n      dtype='<U4')\n\n2. explicitly one row is requested, a tuple is returned:\n\n>>> tabl[0,:]\n('John', 1.82, False)\n\n3. explicitly one element is requested:\n\n>>> tabl[0,'Name']\n'John'\n\nIn general, slicing is intuitive and does not deviate from what would expect\nfrom numpy. With the one addition that columns can be referred to by names as\nwell as numbers.\n\nset\n----\n\nSetting elements works the same as slicing:\n\n>>> tabl = Tabel({'Name' : [\"John\", \"Joe\", \"Jane\"], 'Height' : [1.82,1.65,2.15], 'Married': [False,False,True]})\n>>> tabl[0,\"Name\"] = \"Jos\"\n>>> tabl\n Name   |   Height |   Married\n--------+----------+-----------\n Jos    |     1.82 |         0\n Joe    |     1.65 |         0\n Jane   |     2.15 |         1\n3 rows ['<U4', '<f8', '|b1']\n\nThe datatype that the value is expected to have, is the same as the datatype a\nslice would result into.\n\nAdding columns, works the same as setting elements, just give it a new name:\n\n>>> tabl = Tabel({'Name' : [\"John\", \"Joe\", \"Jane\"], 'Height' : [1.82,1.65,2.15], 'Married': [False,False,True]})\n>>> tabl['new'] = [1,2,3]\n>>> tabl\n Name   |   Height |   Married |   new\n--------+----------+-----------+-------\n John   |     1.82 |         0 |     1\n Joe    |     1.65 |         0 |     2\n Jane   |     2.15 |         1 |     3\n3 rows ['<U4', '<f8', '|b1', '<i8']\n\nOr set the whole column to the same value:\n\n>>> tabl = Tabel({'Name' : [\"John\", \"Joe\", \"Jane\"], 'Height' : [1.82,1.65,2.15], 'Married': [False,False,True]})\n>>> tabl['new'] = 13\n>>> tabl\n Name   |   Height |   Married |   new\n--------+----------+-----------+-------\n John   |     1.82 |         0 |    13\n Joe    |     1.65 |         0 |    13\n Jane   |     2.15 |         1 |    13\n3 rows ['<U4', '<f8', '|b1', '<i8']\n\nJust like numpy, slices are not actual copies of the data, rather they are\nreferences.\n\nappend Tabel and row\n---------------------\n\nTabels can be appended with other Tabels:\n\n>>> tabl = Tabel({'Name' : [\"John\", \"Joe\", \"Jane\"], 'Height' : [1.82,1.65,2.15], 'Married': [False,False,True]})\n>>> tabl += tabl\n>>> tabl\n Name   |   Height |   Married\n--------+----------+-----------\n John   |     1.82 |         0\n Joe    |     1.65 |         0\n Jane   |     2.15 |         1\n John   |     1.82 |         0\n Joe    |     1.65 |         0\n Jane   |     2.15 |         1\n6 rows ['<U4', '<f8', '|b1']\n\nOr append rows as dictionary:\n\n>>> tabl = Tabel({'Name' : [\"John\", \"Joe\", \"Jane\"], 'Height' : [1.82,1.65,2.15], 'Married': [False,False,True]})\n>>> tabl.row_append({'Height':1.81, 'Name':\"Jack\", 'Married':True})\n>>> tabl\n Name   |   Height |   Married\n--------+----------+-----------\n John   |     1.82 |         0\n Joe    |     1.65 |         0\n Jane   |     2.15 |         1\n Jack   |     1.81 |         1\n4 rows ['<U4', '<f8', '|b1']\n\n\ninstance properties\n--------------------\n\nYour data is simply stored as a list of numpy arrays and can be accessed or\nmanipulated like that (just don't make a mess):\n\n>>> tabl = Tabel({'Name' : [\"John\", \"Joe\", \"Jane\"], 'Height' : [1.82,1.65,2.15], 'Married': [False,False,True]})\n>>> tabl.columns\n['Name', 'Height', 'Married']\n>>> tabl.data        # doctest: +SKIP\n[array(['John', 'Joe', 'Jane'],\n      dtype='<U4'), array([ 1.82,  1.65,  2.15]), array([False, False,  True], dtype=bool)]\n\nFurther the basic means to asses the size of your data:\n\n>>> tabl.shape\n(3, 3)\n>>> len(tabl)\n3\n\npandas\n-------\n\nFor for interfacing with the popular datatable framework, going back and forth\nis easy:\n\n>>> import pandas as pd\n>>> df = pd.DataFrame({'a':range(3),'b':range(10,13)})\n>>> df\n   a   b\n0  0  10\n1  1  11\n2  2  12\n\nTo make a Tabel from a DataFrame, just supply it to the initialize:\n\n>>> tabl = Tabel(df)\n>>> tabl\n   a |   b\n-----+-----\n   0 |  10\n   1 |  11\n   2 |  12\n3 rows ['<i8', '<i8']\n\nThe dict property of Tabel provides a way to make a DataFrame from a Tabel:\n\n>>> df = pd.DataFrame(tabl.dict)\n>>> df\n   a   b\n0  0  10\n1  1  11\n2  2  12\n\n\nResources & getting help\n==========================\n\n* See for the full API and more examples the documentation on `RTD <https://tabel.readthedocs.io/en/stable/index.html>`_.\n* The repository on `Github <https://github.com/BastiaanBergman/tabel>`_.\n* Installables on `pip <https://pypi.org/project/tabel/>`_.\n* Questions and answers on `StackOverflow <https://stackoverflow.com/>`_, I\n  will try to monitor for it.\n\nStable releases\n================\n* tabel 1.2.3\n\n  * Added __delitem__ feature to delete row(s) or a column.\n\n* tabel 1.2.2\n\n  * Added argument to save and read methods for csv and gz formats to specify\n    whether or not to write/read a header with the column names. For reading\n    header can be left to None for automatic sniffing of the header. Default is\n    True for both read and save methods.\n\n* tabel 1.2.1\n\n  * Removed unicode characters from description to fix pip install\n    `issue <https://github.com/BastiaanBergman/tabel/issues/6#issue-440282452>`.\n\n* tabel 1.2.0\n\n  * Fix for numpy 1.15.5 \"warnings\"\n  * Fix for outerjoin to raise an error in case of unsupported datatypes\n\n* tabel 1.1\n\n  * Added join and group_by methods\n  * September 27, 2018\n\n* tabel 1.0\n\n  * First release\n  * September 8, 2018\n\n\nDependencies\n============\n\n* numpy\n* tabulate (optional, recommended)\n* pandas (optional, for converting back and forth to DataFrames)\n\nTested on:\n----------\n\n* Python 3.6.4;  numpy 1.15.4\n* Python 3.6.4;  numpy 1.14.3\n* Python 2.7.14; numpy 1.14.0\n\n\nContributing to Tabel\n=====================\nTabel is perfect already, no more contributions needed. Just kidding!\n\nSee the repository for filing issues and proposing enhancements.\n\ngit:\n----\n\n* Using master as the development branch\n* Every new version is branched of of master (after its finished) into its own\n  \"v1.2.3\" named branch. Subsequent version specific fixes can be done in the\n  version branches.\n\n\nI'm using pytest, pylint, doctest, sphynx and setuptools.\n\n - git ::\n\n    git checkout master\n    git pull\n\n - pytest ::\n\n    cd tabel/test\n    conda activate py3_6\n    pytest\n    conda activate py2_7\n    pytest\n\n - pylint ::\n\n    cd tabel/\n    ./pylint.sh\n\n - doctest ::\n\n    cd tabel/docs\n    make doctest\n\n - sphynx ::\n\n    cd tabel/docs\n    make html\n\n - setuptools/pypi ::\n\n    python setup.py sdist bdist_wheel\n    twine upload dist/tabel-1.1.0.*\n\n - git ::\n\n    git add .\n    git commit -m\n    git push\n    git checkout v1.2.3 -b\n    git push --set-upstream origin v1.2.3\n\n\n\nContributors\n============\nJust me, Bastiaan Bergman [Bastiaan.Bergman@gmail.com].\n\n\nWhat's in the name?\n===================\n\n*Tabel* is Dutch for table (two-dimensional enlisting), `wiktionary\n<https://nl.wiktionary.org/wiki/tabel>`_. The english word table, as in \"dinner\ntable\", translates in Dutch to *tafel*. The Dutch word *tafel* is an old\nfashioned word for data-table, mostly used for calculation tables which itself\nis old fashioned as well.\n\n\nToDo\n=====\n\n* polish error messages and validity checking and add testing for it.\n* cache buffers for faster appending: store temp in list and concatenate to\n  array only once we use another method\n* allow for (sparse) numpy arrays as an element\n* adjust & limit __repr__ width for very wide Tabels in jupyter cell\n* items() and row_items() and keys() and values() method\n* pop_column method\n* tox - environment testing\n* set subsets of tabels with (subsets) of other tabels, seems logic as __setitem__ is\n  allowed to provide the datatype that should have come from a __getitem__\n* datetime column support\n* add disk datalogger",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/javadba/tabl",
    "keywords": "data table",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tabl",
    "package_url": "https://pypi.org/project/tabl/",
    "platform": "",
    "project_url": "https://pypi.org/project/tabl/",
    "project_urls": {
      "Documentation": "https://tabl.readthedocs.io/en/stable/",
      "Homepage": "https://github.com/javadba/tabl",
      "Source Code": "https://github.com/javadba/tabl"
    },
    "release_url": "https://pypi.org/project/tabl/1.2.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Lightweight, intuitive and fast data-tables. Forked from github.com/BastiaanBergman/tabel",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6801620,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d2f16dd9466e0e02c1a00b7b41e162b4fb0a2ba5026adccc7a87b2268b9c71e",
          "md5": "0b25f9d17c3c1ebdfdf7e645d9e5d3b0",
          "sha256": "15f6c90af6b4977586124d25265d1184272db555c7c6d5c2d34dc9f71d4a320d"
        },
        "downloads": -1,
        "filename": "tabl-0.1.0-py3.8.egg",
        "has_sig": false,
        "md5_digest": "0b25f9d17c3c1ebdfdf7e645d9e5d3b0",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": ">=3.8",
        "size": 36159,
        "upload_time": "2020-03-12T20:30:16",
        "upload_time_iso_8601": "2020-03-12T20:30:16.633954Z",
        "url": "https://files.pythonhosted.org/packages/4d/2f/16dd9466e0e02c1a00b7b41e162b4fb0a2ba5026adccc7a87b2268b9c71e/tabl-0.1.0-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5058f00952050d1077eff5573951a16deadd46fdad4ffd7faa1043781784e7fe",
          "md5": "52885066a1c860bbae0a9f1140612bcc",
          "sha256": "6ab10733a91aeeb1ef7de7d6cda431ebd369965309f5dfa381183689233845a1"
        },
        "downloads": -1,
        "filename": "tabl-1.2.3-py3.8.egg",
        "has_sig": false,
        "md5_digest": "52885066a1c860bbae0a9f1140612bcc",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": ">=3.8",
        "size": 36159,
        "upload_time": "2020-03-12T20:28:12",
        "upload_time_iso_8601": "2020-03-12T20:28:12.506444Z",
        "url": "https://files.pythonhosted.org/packages/50/58/f00952050d1077eff5573951a16deadd46fdad4ffd7faa1043781784e7fe/tabl-1.2.3-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5058f00952050d1077eff5573951a16deadd46fdad4ffd7faa1043781784e7fe",
        "md5": "52885066a1c860bbae0a9f1140612bcc",
        "sha256": "6ab10733a91aeeb1ef7de7d6cda431ebd369965309f5dfa381183689233845a1"
      },
      "downloads": -1,
      "filename": "tabl-1.2.3-py3.8.egg",
      "has_sig": false,
      "md5_digest": "52885066a1c860bbae0a9f1140612bcc",
      "packagetype": "bdist_egg",
      "python_version": "3.8",
      "requires_python": ">=3.8",
      "size": 36159,
      "upload_time": "2020-03-12T20:28:12",
      "upload_time_iso_8601": "2020-03-12T20:28:12.506444Z",
      "url": "https://files.pythonhosted.org/packages/50/58/f00952050d1077eff5573951a16deadd46fdad4ffd7faa1043781784e7fe/tabl-1.2.3-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}