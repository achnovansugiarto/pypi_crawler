{
  "info": {
    "author": "Brian Carlsen <carlsen.bri@gmail.com>, C. Marcus Chuang <marcus.chchuang@gmail.com>",
    "author_email": "carlsen.bri@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Shockley Queisser limit : \n## Theoretical Solar Cell Efficiencies calculator and visualizer\n> Based off of [marcus-cmc/Shockley-Queisser-limit](https://github.com/marcus-cmc/Shockley-Queisser-limit), updated for Python 3 and PyPI.\n\n> pip install sqlimit\n\nIt calculates the theoretical solar cell parameters with options to change temperature, light intensity, and radiative efficiency, provides visualization tools. \n\nThe calculation is based on the radiative limit or the Shockley Queisser limit\n\n[Wikipedia: Shockley–Queisser limit] (https://en.wikipedia.org/wiki/Shockley–Queisser_limit)\n\n\n#  Example Outputs\n## Bandap vs Efficiencies of a single junction solar cell\n\nCreate a `SQlim` object, which calculates all the parameters and then call the method `plot('PCE')` to generate the bandgap vs efficiency plot. PCE: power conversion efficiency.\n```python\nSQ = SQlim()\nSQ.plot('PCE')\n```\n\n<img src=\"/ExampleOutputFig/PCE.png\" width=\"600\">\n\n\nThe efficiencies will be in the `SQ.PCE` attribute, an numpy array. There's also a dictionary `SQ.paras` that stores all the characteristics as a key (string): characteristics (numpy array) pairs.\n\n\n## Four important parameters in a single figure: \n\nCalling the method `plotall()` will generate a plot containing the 4 most important characteristics of a solar cell in the subplots\n```python\nSQ.plotall()\n```\n* Voc: Open-circuit voltage,\n* Jsc: Short-circuit current density,\n* FF: Fill factor\n\n<img src=\"/ExampleOutputFig/ALL.png\" width=\"800\">\n\nA method `get_paras(self, Eg, toPrint=True)` can be used to look up the results. For example, the following call would print the theoretical parameters for a 1.337 eV solar cell.\n```python\nSQ.get_paras(Eg=1.337)\n```\nwould print the following lines like these in the colsole:\n```python\n\"\"\"\nBandgap: 1.337 eV ; J0 = 2.64e-17 mA/cm^2\n\nVoc = 1.079      V\nJsc = 35.14      mA/cm^2\nFF  = 88.88      %\nPCE = 33.703     %\n\"\"\"\n```\n\n\n\n## Plot other characteristics\n\nThe `plot(para)` method can be used to generate different plots. Valid input `para` are `\"Voc\"`, `\"Jsc\"`, ``\"FF\"`, `\"PCE\"`, and `J0` (dark saturation current)\n```python\nSQ.plot('J0') # dark saturation current\nSQ.plot('Voc') \n```\n\n<img src=\"/ExampleOutputFig/J0.png\" width=\"450\"> \n<img src=\"/ExampleOutputFig/Voc.png\" width=\"450\">\n\n\n# Calculate and plot the J-V curves\n\nThe `simulate_JV()` method can be used to calculate the J-V curve with an option to plot it.\n\n```python\nSQ.simulate_JV(Eg=1.337, plot=True) # calculate the J-V curve of solar cell, plot it, and return the J-V data\n```\n\n<img src=\"/ExampleOutputFig/JVcurve_1pt337eV.png\" width=\"450\">\n\n\n##  Savedata\nThe data (Voc, Jsc, FF, PCE, J0 as a function of bandgap) can be saved as a single .csv file\n```python\nSQ.saveall(savename=\"SQ lim\") # save data as \"SQ lim.csv\"\n```\n\n##  The data can be accessed here: [SQ limit data](/SQ%20limit.csv)\n\n#\n#\n# Visualize more interesting results\n\n## Break down of the theoretical efficiency and the energy loss\n\nThe method `SQ.E_loss(Eg)`, which takes bandgap `Eg` as an input, can be used to visualize the break down of energy loss. \n\n```python\nSQ.E_loss(Eg=1.337)\n```\n\nShown here are the break down for a 1.337 eV solar cell, which has the maximum theoretical efficiency of 33.7 %.\n\n<img src=\"/ExampleOutputFig/E_loss_1pt337eV.png\" width=\"800\">\n\n\n##  Available Energies\n\nThe mathod SQ.available_E(Egs) can be used to calculate and plot theoretical maximum available energies from a series of (mechanically stacked) solar cells with different Egs.\n\n### Single-junction solar cell, 1.337 eV\n\n```python\nSQ.available_E(Egs=1.337)\n```\n\nThis is the similar to the one above but without the break down of energy loss.\n\n<img src=\"/ExampleOutputFig/E_avail_1pt337eV.png\" width=\"800\">\n\n  \n    \n      \n## Multi-junction solar cells\n\nThe theoretical efficiencies of multijunction solar cells can be higher than single junction solar cells. The method `SQ.available_E` can actually take a list of different bandgaps and calculate the maximum possible efficiencies by using materials with these bandgaps. \n\n**Note** : In this calculation, we ignore the fact that the bottom cells (lower bandgaps) could absorb the 'excess' emission from the top cells (higher bandgaps)--when the top cells are operated at their maximum power point with finite voltage, there would be some excess emission. This phenomenon has a very minor effect on the calculated efficiencies for multi-junction cells.\n\n### Two bandgaps: 1.1 eV and 1.8 eV\n```python\nSQ.available_E(Egs=[1.1, 1.8])\n```\nThe sum of the two sub-cells are higher than any single-junction solar cells.\n<img src=\"/ExampleOutputFig/E_avail_2cells.png\" width=\"800\">\n\n### Three bandgaps: 0.95 eV, 1.37 eV, 1.90 eV\n\n```python\nSQ.available_E(Egs=[0.95, 1.37, 1.90])\n```\nThe sum of the efficiency are even higher.\n<img src=\"/ExampleOutputFig/E_avail_3cells.png\" width=\"800\">\n\n\n### Three bandgaps: Ge(0.65 eV), InGaAs (1.40 eV), InGaP (1.86 eV)\n\n####  This bandgap-material combination is the example you can find on [Wikipedia's Multi-Junction Solar Cell] (https://en.wikipedia.org/wiki/Multi-junction_solar_cell) page\n\n<img src=\"/ExampleOutputFig/E_avail_3cells_InGaP_InGaAs_Ge.png\" width=\"800\">\n\n## Efficiency Limit: \"Infinite\" number of junctions\n\nThe theoretical limit for tandem cells with a infinite number of junctions is about ~68%. (This number may be derived analytically, see [Wikipedia's page] (https://en.wikipedia.org/wiki/Multi-junction_solar_cell#Theoretical_Limiting_Efficiency) and the references therein.) But we can also use this `SQ.available_E()`method to numerically approximate it. And we don't actually need an \"infinite\" amount of junctions. 50 junctions is close enough to get the job done:\n\n```python\n# 50 subcells, 0.496 eV (2500nm) to 4.2 eV with equal energy spacing\nSQ.available_E(np.linspace(0.496, 4.2, 50), legend=False) \n```\n### A hypothetical multi-junction solar cell consisting of 50 sub-cells\n\nIts overall power conversion efficiency is 67.1% \n\n<img src=\"/ExampleOutputFig/MJ496to4200meV_50J.png\" width=\"800\">\n\n\n# Different Conditions\n\nThe default conditions for calculating the theoretical limits are the standard conditions : Temperature `T = 300` K, 1-sun condition `intensity = 1.0`, and radiative efficiency `EQE_EL = 1.0` (100% external quantum efficiency for electroluminescence). \n```python\nclass SQlim(object):\n    def __init__(self, T=300, EQE_EL=1.0, intensity=1.0):\n        \"\"\"\n        T: temperature in K\n        EQE_EL: radiative efficiency (EL quantum yield)\n        intensity: light concentration, 1.0 = one Sun, 100 mW/cm^2\n        \"\"\"\n```\n\nWe can calculate the efficiencies in different conditions by simply changing the input. \n\nBecause of this flexibility, we can easily get an idea of how the change of these factors affect the theoretical efficiencies (or other characteristics fo interest).\n\n## Different Temperature\n\n#### The *theoretical* maximum possible efficiencies of solar cells could be higher at lower temperature.\nThe classmethod `vary_temp()` can do this calculation and plot the results.\n\n```python\nSQlim.vary_temp(T=[150, 200, 250, 300, 350, 400])\n```\n\n<img src=\"/ExampleOutputFig/VaryT.png\" width=\"800\">\n\n\n## Different Light intensity (Solar concentrator)\n\n####  The efficiencies are higher when the incident light intensity is higher. \nThe classmethod `vary_suns` does that caculation. \n```python\nSQlim.vary_suns(Suns=[1, 10, 100, 1000])\n```\n\n<img src=\"/ExampleOutputFig/VaryIntensity.png\" width=\"800\">\n\n\n## Different radiative efficiency\n\n####  The lower the EQE_EL (radiative efficiency), the lower the power conversion efficiency.\n```python\nSQlim.vary_EQE_EL(EQE_EL=[1, 1E-2, 1E-4, 1E-6])\n```\n<img src=\"/ExampleOutputFig/VaryEQEEL.png\" width=\"800\">\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bicarlsen/Shockley-Queisser-limit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlimit",
    "package_url": "https://pypi.org/project/sqlimit/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqlimit/",
    "project_urls": {
      "Homepage": "https://github.com/bicarlsen/Shockley-Queisser-limit"
    },
    "release_url": "https://pypi.org/project/sqlimit/0.0.1.post1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "matplotlib",
      "scipy"
    ],
    "requires_python": "",
    "summary": "Shockley-Quiesser limit calculations.",
    "version": "0.0.1.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13978088,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e6eaeea3dc1347827fe7a8f9f9c55704833d44aadb21cb695c38a70e05f6f47",
          "md5": "7e726b70c3c63e4287cdd5c63e0bfb67",
          "sha256": "ba9a43d612a5135bd1093f4c2b19b061bac76ae7876cf424bfd17cdabd92855c"
        },
        "downloads": -1,
        "filename": "sqlimit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e726b70c3c63e4287cdd5c63e0bfb67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 111342,
        "upload_time": "2022-05-30T13:44:12",
        "upload_time_iso_8601": "2022-05-30T13:44:12.364875Z",
        "url": "https://files.pythonhosted.org/packages/0e/6e/aeea3dc1347827fe7a8f9f9c55704833d44aadb21cb695c38a70e05f6f47/sqlimit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bb2c858dcd42f48238324bd2535ce2cd3e113acda87f8fe5cd9b912b62dec8b",
          "md5": "7f8afbecaf44884f75516f4c60e32b97",
          "sha256": "5dfef1808ae38bcb47d9ad6426e5ebb69c06307efb8133a51e0e28d69c951392"
        },
        "downloads": -1,
        "filename": "sqlimit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7f8afbecaf44884f75516f4c60e32b97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 115174,
        "upload_time": "2022-05-30T13:44:15",
        "upload_time_iso_8601": "2022-05-30T13:44:15.381900Z",
        "url": "https://files.pythonhosted.org/packages/0b/b2/c858dcd42f48238324bd2535ce2cd3e113acda87f8fe5cd9b912b62dec8b/sqlimit-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75b331fb4830462c9167b73851aa56c30bfc40d34aa938795eeb46685ebac4d9",
          "md5": "98a00701ba544746542bf2999fadd64c",
          "sha256": "e1c68264d834ddc7fa0ba58c722e8b6bffa6c76c85098f5c1a0cdb5e9027355a"
        },
        "downloads": -1,
        "filename": "sqlimit-0.0.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98a00701ba544746542bf2999fadd64c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 111411,
        "upload_time": "2022-05-30T13:53:15",
        "upload_time_iso_8601": "2022-05-30T13:53:15.168527Z",
        "url": "https://files.pythonhosted.org/packages/75/b3/31fb4830462c9167b73851aa56c30bfc40d34aa938795eeb46685ebac4d9/sqlimit-0.0.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2e252372174345faca1723f22a5c91a1f3ae80f941431a7cef99c3febe46197",
          "md5": "b61ed61c1f8c5f1bfe800c81c73d73e2",
          "sha256": "268e75c396de774029aac98b335c56e958ac2452939bc095636be92b556c9f6f"
        },
        "downloads": -1,
        "filename": "sqlimit-0.0.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "b61ed61c1f8c5f1bfe800c81c73d73e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 115206,
        "upload_time": "2022-05-30T13:53:17",
        "upload_time_iso_8601": "2022-05-30T13:53:17.364694Z",
        "url": "https://files.pythonhosted.org/packages/a2/e2/52372174345faca1723f22a5c91a1f3ae80f941431a7cef99c3febe46197/sqlimit-0.0.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75b331fb4830462c9167b73851aa56c30bfc40d34aa938795eeb46685ebac4d9",
        "md5": "98a00701ba544746542bf2999fadd64c",
        "sha256": "e1c68264d834ddc7fa0ba58c722e8b6bffa6c76c85098f5c1a0cdb5e9027355a"
      },
      "downloads": -1,
      "filename": "sqlimit-0.0.1.post1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "98a00701ba544746542bf2999fadd64c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 111411,
      "upload_time": "2022-05-30T13:53:15",
      "upload_time_iso_8601": "2022-05-30T13:53:15.168527Z",
      "url": "https://files.pythonhosted.org/packages/75/b3/31fb4830462c9167b73851aa56c30bfc40d34aa938795eeb46685ebac4d9/sqlimit-0.0.1.post1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2e252372174345faca1723f22a5c91a1f3ae80f941431a7cef99c3febe46197",
        "md5": "b61ed61c1f8c5f1bfe800c81c73d73e2",
        "sha256": "268e75c396de774029aac98b335c56e958ac2452939bc095636be92b556c9f6f"
      },
      "downloads": -1,
      "filename": "sqlimit-0.0.1.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "b61ed61c1f8c5f1bfe800c81c73d73e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 115206,
      "upload_time": "2022-05-30T13:53:17",
      "upload_time_iso_8601": "2022-05-30T13:53:17.364694Z",
      "url": "https://files.pythonhosted.org/packages/a2/e2/52372174345faca1723f22a5c91a1f3ae80f941431a7cef99c3febe46197/sqlimit-0.0.1.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}