{
  "info": {
    "author": "Kenneth Reitz",
    "author_email": "me@kennethreitz.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\nPipenv: Python Development Workflow for Humans\n==============================================\n\n**This is Thoth's fork of Pipenv, use on your own risk. See [this issue](https://github.com/pypa/pipenv/issues/4058) for more info why this fork was created.**\n\n[![image](https://img.shields.io/pypi/v/pipenv.svg)](https://python.org/pypi/pipenv)\n[![image](https://img.shields.io/pypi/l/pipenv.svg)](https://python.org/pypi/pipenv)\n[![Azure Pipelines Build Status](https://dev.azure.com/pypa/pipenv/_apis/build/status/Pipenv%20CI?branchName=master)](https://dev.azure.com/pypa/pipenv/_build/latest?definitionId=16&branchName=master)\n[![image](https://img.shields.io/pypi/pyversions/pipenv.svg)](https://python.org/pypi/pipenv)\n[![image](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/kennethreitz)\n\n------------------------------------------------------------------------\n\n**Pipenv** is a tool that aims to bring the best of all packaging worlds\n(bundler, composer, npm, cargo, yarn, etc.) to the Python world.\n*Windows is a first-class citizen, in our world.*\n\nIt automatically creates and manages a virtualenv for your projects, as\nwell as adds/removes packages from your `Pipfile` as you\ninstall/uninstall packages. It also generates the ever-important\n`Pipfile.lock`, which is used to produce deterministic builds.\n\n![GIF demonstrating Pipenv's usage](https://gist.githubusercontent.com/jlusk/855d611bbcfa2b159839db73d07f6ce9/raw/7f5743401809f7e630ee8ff458faa980e19924a0/pipenv.gif)\n\nThe problems that Pipenv seeks to solve are multi-faceted:\n\n-   You no longer need to use `pip` and `virtualenv` separately. They\n    work together.\n-   Managing a `requirements.txt` file [can be\n    problematic](https://www.kennethreitz.org/essays/a-better-pip-workflow),\n    so Pipenv uses the upcoming `Pipfile` and `Pipfile.lock` instead,\n    which is superior for basic use cases.\n-   Hashes are used everywhere, always. Security. Automatically expose\n    security vulnerabilities.\n-   Give you insight into your dependency graph (e.g. `$ pipenv graph`).\n-   Streamline development workflow by loading `.env` files.\n\nYou can quickly play with Pipenv right in your browser:\n\n[![Try in browser](https://cdn.rawgit.com/rootnroll/library/assets/try.svg)](https://rootnroll.com/d/pipenv/)\n\nInstallation\n------------\n\nIf you\\'re on MacOS, you can install Pipenv easily with Homebrew:\n\n    $ brew install pipenv\n\nOr, if you\\'re using Debian Buster+:\n\n    $ sudo apt install pipenv\n\nOr, if you\\'re using Fedora:\n\n    $ sudo dnf install pipenv\n\nOr, if you\\'re using FreeBSD:\n\n    # pkg install py36-pipenv\n\nOtherwise, refer to the [documentation](https://pipenv.kennethreitz.org/en/latest/#install-pipenv-today) for instructions.\n\n‚ú®üç∞‚ú®\n\n‚ò§ User Testimonials\n-------------------\n\n**David Gang**---\n\n:   *This package manager is really awesome. For the first time I know\n    exactly what my dependencies are which I installed and what the\n    transitive dependencies are. Combined with the fact that installs\n    are deterministic, makes this package manager first class, like\n    cargo*.\n\n**Justin Myles Holmes**---\n\n:   *Pipenv is finally an abstraction meant to engage the mind instead\n    of merely the filesystem.*\n\n‚ò§ Features\n----------\n\n-   Enables truly *deterministic builds*, while easily specifying *only\n    what you want*.\n-   Generates and checks file hashes for locked dependencies.\n-   Automatically install required Pythons, if `pyenv` is available.\n-   Automatically finds your project home, recursively, by looking for a\n    `Pipfile`.\n-   Automatically generates a `Pipfile`, if one doesn\\'t exist.\n-   Automatically creates a virtualenv in a standard location.\n-   Automatically adds/removes packages to a `Pipfile` when they are\n    un/installed.\n-   Automatically loads `.env` files, if they exist.\n\nThe main commands are `install`, `uninstall`, and `lock`, which\ngenerates a `Pipfile.lock`. These are intended to replace\n`$ pip install` usage, as well as manual virtualenv management (to\nactivate a virtualenv, run `$ pipenv shell`).\n\n### Basic Concepts\n\n-   A virtualenv will automatically be created, when one doesn\\'t exist.\n-   When no parameters are passed to `install`, all packages\n    `[packages]` specified will be installed.\n-   To initialize a Python 3 virtual environment, run\n    `$ pipenv --three`.\n-   To initialize a Python 2 virtual environment, run `$ pipenv --two`.\n-   Otherwise, whatever virtualenv defaults to will be the default.\n\n### Other Commands\n\n-   `shell` will spawn a shell with the virtualenv activated.\n-   `run` will run a given command from the virtualenv, with any\n    arguments forwarded (e.g. `$ pipenv run python`).\n-   `check` asserts that PEP 508 requirements are being met by the\n    current environment.\n-   `graph` will print a pretty graph of all your installed\n    dependencies.\n\n### Shell Completion\n\nFor example, with fish, put this in your\n`~/.config/fish/completions/pipenv.fish`:\n\n    eval (pipenv --completion)\n\nAlternatively, with bash, put this in your `.bashrc` or `.bash_profile`:\n\n    eval \"$(pipenv --completion)\"\n\nMagic shell completions are now enabled! There is also a [fish\nplugin](https://github.com/fisherman/pipenv), which will automatically\nactivate your subshells for you!\n\nFish is the best shell. You should use it.\n\n‚ò§ Usage\n-------\n\n    $ pipenv\n    Usage: pipenv [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n      --where          Output project home information.\n      --venv           Output virtualenv information.\n      --py             Output Python interpreter information.\n      --envs           Output Environment Variable options.\n      --rm             Remove the virtualenv.\n      --bare           Minimal output.\n      --completion     Output completion (to be eval'd).\n      --man            Display manpage.\n      --three / --two  Use Python 3/2 when creating virtualenv.\n      --python TEXT    Specify which version of Python virtualenv should use.\n      --site-packages  Enable site-packages for the virtualenv.\n      --version        Show the version and exit.\n      -h, --help       Show this message and exit.\n\n\n    Usage Examples:\n       Create a new project using Python 3.7, specifically:\n       $ pipenv --python 3.7\n\n       Remove project virtualenv (inferred from current directory):\n       $ pipenv --rm\n\n       Install all dependencies for a project (including dev):\n       $ pipenv install --dev\n\n       Create a lockfile containing pre-releases:\n       $ pipenv lock --pre\n\n       Show a graph of your installed dependencies:\n       $ pipenv graph\n\n       Check your installed dependencies for security vulnerabilities:\n       $ pipenv check\n\n       Install a local setup.py into your virtual environment/Pipfile:\n       $ pipenv install -e .\n\n       Use a lower-level pip command:\n       $ pipenv run pip freeze\n\n    Commands:\n      check      Checks for security vulnerabilities and against PEP 508 markers\n                 provided in Pipfile.\n      clean      Uninstalls all packages not specified in Pipfile.lock.\n      graph      Displays currently‚Äìinstalled dependency graph information.\n      install    Installs provided packages and adds them to Pipfile, or (if no\n                 packages are given), installs all packages from Pipfile.\n      lock       Generates Pipfile.lock.\n      open       View a given module in your editor.\n      run        Spawns a command installed into the virtualenv.\n      shell      Spawns a shell within the virtualenv.\n      sync       Installs all packages specified in Pipfile.lock.\n      uninstall  Un-installs a provided package and removes it from Pipfile.\n\nLocate the project:\n\n    $ pipenv --where\n    /Users/kennethreitz/Library/Mobile Documents/com~apple~CloudDocs/repos/kr/pipenv/test\n\nLocate the virtualenv:\n\n    $ pipenv --venv\n    /Users/kennethreitz/.local/share/virtualenvs/test-Skyy4vre\n\nLocate the Python interpreter:\n\n    $ pipenv --py\n    /Users/kennethreitz/.local/share/virtualenvs/test-Skyy4vre/bin/python\n\nInstall packages:\n\n    $ pipenv install\n    Creating a virtualenv for this project...\n    ...\n    No package provided, installing all dependencies.\n    Virtualenv location: /Users/kennethreitz/.local/share/virtualenvs/test-EJkjoYts\n    Installing dependencies from Pipfile.lock...\n    ...\n\n    To activate this project's virtualenv, run the following:\n    $ pipenv shell\n\nInstalling from git:\n\nYou can install packages with pipenv from git and other version control systems using URLs formatted according to the following rule:\n\n    <vcs_type>+<scheme>://<location>/<user_or_organization>/<repository>@<branch_or_tag>#<package_name>\n\nThe only optional section is the `@<branch_or_tag>` section.  When using git over SSH, you may use the shorthand vcs and scheme alias `git+git@<location>:<user_or_organization>/<repository>@<branch_or_tag>#<package_name>`. Note that this is translated to `git+ssh://git@<location>` when parsed.\n\nValid values for `<vcs_type>` include `git`, `bzr`, `svn`, and `hg`.  Valid values for `<scheme>` include `http,`, `https`, `ssh`, and `file`.  In specific cases you also have access to other schemes: `svn` may be combined with `svn` as a scheme, and `bzr` can be combined with `sftp` and `lp`.\n\nNote that it is **strongly recommended** that you install any version-controlled dependencies in editable mode, using `pipenv install -e`, in order to ensure that dependency resolution can be performed with an up to date copy of the repository each time it is performed, and that it includes all known dependencies.\n\nBelow is an example usage which installs the git repository located at `https://github.com/requests/requests.git` from tag `v2.19.1` as package name `requests`:\n\n    $ pipenv install -e git+https://github.com/requests/requests.git@v2.19#egg=requests\n    Creating a Pipfile for this project...\n    Installing -e git+https://github.com/requests/requests.git@v2.19.1#egg=requests...\n    [...snipped...]\n    Adding -e git+https://github.com/requests/requests.git@v2.19.1#egg=requests to Pipfile's [packages]...\n    [...]\n\nYou can read more about [pip's implementation of vcs support here](https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support).\n\nInstall a dev dependency:\n\n    $ pipenv install pytest --dev\n    Installing pytest...\n    ...\n    Adding pytest to Pipfile's [dev-packages]...\n\nShow a dependency graph:\n\n    $ pipenv graph\n    requests==2.18.4\n      - certifi [required: >=2017.4.17, installed: 2017.7.27.1]\n      - chardet [required: >=3.0.2,<3.1.0, installed: 3.0.4]\n      - idna [required: >=2.5,<2.7, installed: 2.6]\n      - urllib3 [required: <1.23,>=1.21.1, installed: 1.22]\n\nGenerate a lockfile:\n\n    $ pipenv lock\n    Assuring all dependencies from Pipfile are installed...\n    Locking [dev-packages] dependencies...\n    Locking [packages] dependencies...\n    Note: your project now has only default [packages] installed.\n    To install [dev-packages], run: $ pipenv install --dev\n\nInstall all dev dependencies:\n\n    $ pipenv install --dev\n    Pipfile found at /Users/kennethreitz/repos/kr/pip2/test/Pipfile. Considering this to be the project home.\n    Pipfile.lock out of date, updating...\n    Assuring all dependencies from Pipfile are installed...\n    Locking [dev-packages] dependencies...\n    Locking [packages] dependencies...\n\nUninstall everything:\n\n    $ pipenv uninstall --all\n    No package provided, un-installing all dependencies.\n    Found 25 installed package(s), purging...\n    ...\n    Environment now purged and fresh!\n\nUse the shell:\n\n    $ pipenv shell\n    Loading .env environment variables‚Ä¶\n    Launching subshell in virtual environment. Type 'exit' or 'Ctrl+D' to return.\n    $ ‚ñØ\n\n‚ò§ Documentation\n---------------\n\nDocumentation resides over at [pipenv.org](https://pipenv.kennethreitz.org/en/latest/).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pypa/pipenv",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "thoth-pipenv",
    "package_url": "https://pypi.org/project/thoth-pipenv/",
    "platform": "",
    "project_url": "https://pypi.org/project/thoth-pipenv/",
    "project_urls": {
      "Homepage": "https://github.com/pypa/pipenv"
    },
    "release_url": "https://pypi.org/project/thoth-pipenv/2020.1.29/",
    "requires_dist": [
      "pip (>=18.0)",
      "certifi",
      "setuptools (>=36.2.1)",
      "virtualenv-clone (>=0.2.5)",
      "virtualenv",
      "enum34 ; python_version < \"3\"",
      "typing ; python_version < \"3.5\"",
      "towncrier ; extra == 'dev'",
      "bs4 ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "sphinx (<2) ; extra == 'dev'",
      "flake8 (<4.0,>=3.3.0) ; extra == 'dev'",
      "parver ; extra == 'dev'",
      "invoke ; extra == 'dev'",
      "black ; (python_version >= \"3.6\") and extra == 'dev'",
      "pytest (<5.0) ; extra == 'tests'",
      "pytest-tap ; extra == 'tests'",
      "pytest-xdist ; extra == 'tests'",
      "flaky ; extra == 'tests'",
      "mock ; extra == 'tests'"
    ],
    "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
    "summary": "Python Development Workflow for Humans.",
    "version": "2020.1.29",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6537407,
  "releases": {
    "2018.12.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2066184183f659a34f3048b8854f77cd4ee7f4aeff415fd6335090347314e580",
          "md5": "b1766958427c5a61756ef4c4f37bc2f4",
          "sha256": "52f029137f957846601fd517cb85404687b117c82150f97db47de2716128aa76"
        },
        "downloads": -1,
        "filename": "thoth_pipenv-2018.12.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1766958427c5a61756ef4c4f37bc2f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
        "size": 5408730,
        "upload_time": "2019-12-16T09:37:28",
        "upload_time_iso_8601": "2019-12-16T09:37:28.569283Z",
        "url": "https://files.pythonhosted.org/packages/20/66/184183f659a34f3048b8854f77cd4ee7f4aeff415fd6335090347314e580/thoth_pipenv-2018.12.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2933b070392fb9b652422a94dddb3bc931f4872355d6b50d73358bb9b73d87e",
          "md5": "dc6f07876b0290f22555f9bc17c5b562",
          "sha256": "d4cee11b349068007097e4bbcc6b22153f4ec5c14df9a4b61db30b05a5845ec5"
        },
        "downloads": -1,
        "filename": "thoth-pipenv-2018.12.16.tar.gz",
        "has_sig": false,
        "md5_digest": "dc6f07876b0290f22555f9bc17c5b562",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
        "size": 6738688,
        "upload_time": "2019-12-16T09:37:34",
        "upload_time_iso_8601": "2019-12-16T09:37:34.023463Z",
        "url": "https://files.pythonhosted.org/packages/d2/93/3b070392fb9b652422a94dddb3bc931f4872355d6b50d73358bb9b73d87e/thoth-pipenv-2018.12.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2018.12.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "241b18edcb2c999683d46b1c1da4e69d255a0d85c9545f924fe58a5389c06e0f",
          "md5": "2dbc2ac033345faefe8e9a50ac1537ff",
          "sha256": "ceef466a619160974f952577b8679ad5035c028917aa78f746a9de5fb6491b6d"
        },
        "downloads": -1,
        "filename": "thoth_pipenv-2018.12.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dbc2ac033345faefe8e9a50ac1537ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
        "size": 5408748,
        "upload_time": "2019-12-16T10:03:33",
        "upload_time_iso_8601": "2019-12-16T10:03:33.752480Z",
        "url": "https://files.pythonhosted.org/packages/24/1b/18edcb2c999683d46b1c1da4e69d255a0d85c9545f924fe58a5389c06e0f/thoth_pipenv-2018.12.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c3d4261278051cd8e1750fac2bf6a02cd1ead68b3cfa987e26c9a154e83a482",
          "md5": "3dc1c7287c93125dc8fef499071f7f75",
          "sha256": "316c2b5ddc8459a57c6d1af5de3cd7f4516ffa08d8d5a5aa7576c359eebb1344"
        },
        "downloads": -1,
        "filename": "thoth-pipenv-2018.12.17.tar.gz",
        "has_sig": false,
        "md5_digest": "3dc1c7287c93125dc8fef499071f7f75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
        "size": 6738737,
        "upload_time": "2019-12-16T10:03:37",
        "upload_time_iso_8601": "2019-12-16T10:03:37.147921Z",
        "url": "https://files.pythonhosted.org/packages/3c/3d/4261278051cd8e1750fac2bf6a02cd1ead68b3cfa987e26c9a154e83a482/thoth-pipenv-2018.12.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2020.1.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f98dd9eb8923a3e1c6c044fdd78b903b5f73ad8f4d03d78c69ac6d96404540b",
          "md5": "85920b712e5183e1bc451d0ef2cdc40c",
          "sha256": "77ddc944d4edb010bf327cb5780cb645d3dfd1a7221dd5ef937de8d4a8b531b9"
        },
        "downloads": -1,
        "filename": "thoth_pipenv-2020.1.29-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85920b712e5183e1bc451d0ef2cdc40c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
        "size": 5410410,
        "upload_time": "2020-01-29T11:47:23",
        "upload_time_iso_8601": "2020-01-29T11:47:23.391608Z",
        "url": "https://files.pythonhosted.org/packages/3f/98/dd9eb8923a3e1c6c044fdd78b903b5f73ad8f4d03d78c69ac6d96404540b/thoth_pipenv-2020.1.29-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d71f78408860a6aea4f7222bf3f420e42dc166acf75d3b88f677691bd0102fcd",
          "md5": "b6e82200a0d1483cd0d39a3a419f89dd",
          "sha256": "bb18be75d22ba82a154149eb7177f911c5be44dd88ce805f6a536929c7f23b0b"
        },
        "downloads": -1,
        "filename": "thoth-pipenv-2020.1.29.tar.gz",
        "has_sig": false,
        "md5_digest": "b6e82200a0d1483cd0d39a3a419f89dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
        "size": 6739340,
        "upload_time": "2020-01-29T11:47:27",
        "upload_time_iso_8601": "2020-01-29T11:47:27.529028Z",
        "url": "https://files.pythonhosted.org/packages/d7/1f/78408860a6aea4f7222bf3f420e42dc166acf75d3b88f677691bd0102fcd/thoth-pipenv-2020.1.29.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f98dd9eb8923a3e1c6c044fdd78b903b5f73ad8f4d03d78c69ac6d96404540b",
        "md5": "85920b712e5183e1bc451d0ef2cdc40c",
        "sha256": "77ddc944d4edb010bf327cb5780cb645d3dfd1a7221dd5ef937de8d4a8b531b9"
      },
      "downloads": -1,
      "filename": "thoth_pipenv-2020.1.29-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "85920b712e5183e1bc451d0ef2cdc40c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 5410410,
      "upload_time": "2020-01-29T11:47:23",
      "upload_time_iso_8601": "2020-01-29T11:47:23.391608Z",
      "url": "https://files.pythonhosted.org/packages/3f/98/dd9eb8923a3e1c6c044fdd78b903b5f73ad8f4d03d78c69ac6d96404540b/thoth_pipenv-2020.1.29-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d71f78408860a6aea4f7222bf3f420e42dc166acf75d3b88f677691bd0102fcd",
        "md5": "b6e82200a0d1483cd0d39a3a419f89dd",
        "sha256": "bb18be75d22ba82a154149eb7177f911c5be44dd88ce805f6a536929c7f23b0b"
      },
      "downloads": -1,
      "filename": "thoth-pipenv-2020.1.29.tar.gz",
      "has_sig": false,
      "md5_digest": "b6e82200a0d1483cd0d39a3a419f89dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
      "size": 6739340,
      "upload_time": "2020-01-29T11:47:27",
      "upload_time_iso_8601": "2020-01-29T11:47:27.529028Z",
      "url": "https://files.pythonhosted.org/packages/d7/1f/78408860a6aea4f7222bf3f420e42dc166acf75d3b88f677691bd0102fcd/thoth-pipenv-2020.1.29.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}