{
  "info": {
    "author": "Xiang Fu",
    "author_email": "gtaifu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# Python Quantum Control Architecture Simulator (PyQCAS)\n\nA Python-based, functional eQASM simulator without modeling timing behavior.\n\nPyQCAS was originally named as PyCACTUS.\n\n## Installation\n```\npip install pyqcas\n```\n\n## Usage\n```python\nfrom pyqcas.quantum_coprocessor import Quantum_coprocessor\nqcas = Quantum_coprocessor()\nqcas.upload_program(<path-to-eqasm_file>)\nqcas.execute()\nresult = qcas.read_result()\n```\nThe result returned is a binary block, which is the data in the memory of qcas.\n\nTo inspect the progress of the simulation, you can use the following method:\n```\nqcas.set_verbose(True)\n```\n\nTo inspect the execution trace, you can set the logging level:\n```\nqcas.set_log_level(log_level=logging.DEBUG)\n```\nAllowed logging levels include `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`.\n\n## A brief introduction to eQASM:\nPyQCAS supports the eQASM instruction set architecture with a floating-point extension.\nA formal definition of the eQASM architecture can be found at [eQASM Specification](https://arxiv.org/pdf/2006.09294).\n\nThe following rules applies to eQASM:\n- All characters are case **insensitive**, and extra blank is allowed between two identifiers.\n-  hash mark (`#`) starts the line comment.\n\nAn overview of eQASM instructions is listed in the following table:\n![](https://gitee.com/hpcl_quanta/pyqcas/raw/master/doc/eqasm_insn_overview.png)\n\n\n**NOTE**, being a functional simulator, PyQCAS does not model the timing of quantum instructions. All `QWAIT(R)` instructions and the pre-intervals of quantum bundles are omitted during the simulation.\n\nFor `Q_Op`s in the quantum bundle, PyQCAS also pre-defines a set of quantum operations as following:\n\n| Name       | Number of Target Qubits | Description                   |\n| ---------- | ----------------------- | ----------------------------- |\n| H          | 1                       | Hadamard gate                 |\n| X          | 1                       | $R_x(\\pi)$                    |\n| Y          | 1                       | $R_y(\\pi)$                    |\n| Z          | 1                       | $R_z(\\pi)$                    |\n| S          | 1                       | $R_z(\\frac{\\pi}{2})$          |\n| Sdg        | 1                       | $R_z(-\\frac{\\pi}{2})$         |\n| T          | 1                       | $R_z(\\frac{\\pi}{4})$          |\n| Tdg        | 1                       | $R_z(-\\frac{\\pi}{4})$         |\n| X$\\theta$  | 1                       | $R_x(\\frac{\\pi\\theta}{180})$  |\n| Y$\\theta$  | 1                       | $R_y(\\frac{\\pi\\theta}{180})$  |\n| Z$\\theta$  | 1                       | $R_z(\\frac{\\pi\\theta}{180})$  |\n| Xm$\\theta$ | 1                       | $R_x(-\\frac{\\pi\\theta}{180})$ |\n| Ym$\\theta$ | 1                       | $R_y(-\\frac{\\pi\\theta}{180})$ |\n| Zm$\\theta$ | 1                       | $R_z(-\\frac{\\pi\\theta}{180})$ |\n| RX$\\theta$ | 1                       | the same as X$\\theta$         |\n| RY$\\theta$ | 1                       | the same as Y$\\theta$         |\n| RZ$\\theta$ | 1                       | the same as Z$\\theta$         |\n| CZ         | 2                       | Controlled Phase gate         |\n| measure    | 1                       | Measure                       |\n\n`Note:` $\\theta$ is a floating point value in $[0, 180]$,  of which the decimal point is replaced by `_`. For example, `X175_5` represents $R_x(\\frac{\\pi\\cdot 175.5}{180})$, `Xm175_5` represents $R_x(-\\frac{\\pi\\cdot 175.5}{180})$.\n\nSince eQASM does not support floating point values, which might be required by the quantum program, PyQCAS also support an extension with the following FP instructions:\n\n| Format              | formal definition              | explanation                                                                                                                                                             |\n| ------------------- | ------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `FCVT.W.S rd, fs`   | `R[rd](31:0) = integer(F[fs])` | Convert the 32-bit FP number in fs into a 32-bit signed integer, and store it in rd.                                                                                    |\n| `FCVT.S.W fd, rs`   | `F[fd] = float(R[rs](31:0))`   | Convert a 32-bit signed integer in rs into a 32-bit FP number, and store it in fd.                                                                                      |\n| `FLW fd, imm(rs)`   | `F[fd] <- memory(R[rs] + imm)` | Load a 32-bit FP number from the memory address `imm + rs` and store it to the FPR `fd`.                                                                                |\n| `FSW fs, imm(rs)`   | `F[fs] -> memory(R[rs] + imm)` | Store a 32-bit FP number from the FPR `fs` to the memory address `imm + rs`.                                                                                            |\n| `FADD.S fd, fs, ft` | `F[fd] = F[fs] + F[ft]`        | Floating point addition.                                                                                                                                                |\n| `FSUB.S fd, fs, ft` | `F[fd] = F[fs] - F[ft]`        | Floating point subtraction.                                                                                                                                             |\n| `FMUL.S fd, fs, ft` | `F[fd] = F[fs] * F[ft]`        | Floating point multiplication.                                                                                                                                          |\n| `FDIV.S fd, fs, ft` | `F[fd] = F[fs] / F[ft]`        | Floating point division.                                                                                                                                                |\n| `FEQ.S rd, fs, ft`  | `R[rd] = F[fs] > F[ft]`        | Set rd when `fs` is equal to `ft`.                                                                                                                                      |\n| `FLT.S rd, fs, ft`  | `R[rd] = F[fs] < F[ft]`        | Set rd when `fs` is less than `ft`.                                                                                                                                     |\n| `FLE.S rd, fs, ft`  | `R[rd] = F[fs] <= F[ft]`       | Set rd when `fs` is less equal to `ft`.                                                                                                                                 |\n| `FMV.X.W rd, fs`    | `R[rd] = F[fs]`                | moves the single-precision value in FPR `fs` represented in IEEE 754-2008 encoding to the lower 32 bits of GPR `rd`.  NOTE: this is a direct, bit-wise move.            |\n| `FMV.W.X fd, rs`    | `F[fd] = R[rs]`                | moves the single-precision value encoded in IEEE 754-2008 standard encoding from the lower 32 bits of GPR `rs` to the FPR `fd`.  NOTE: this is a direct, bit-wise move. |\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/hpcl_quanta/pyqcas",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyqcas",
    "package_url": "https://pypi.org/project/pyqcas/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyqcas/",
    "project_urls": {
      "Bug Tracker": "https://gitee.com/hpcl_quanta/pyqcas/issues",
      "Homepage": "https://gitee.com/hpcl_quanta/pyqcas"
    },
    "release_url": "https://pypi.org/project/pyqcas/0.1.0b0/",
    "requires_dist": [
      "quantumsim (==0.2.0)",
      "bitstring",
      "ply"
    ],
    "requires_python": ">=3.7",
    "summary": "A functional eQASM simulator without timing modeling",
    "version": "0.1.0b0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12281353,
  "releases": {
    "0.1.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d002927adf9223f438db1b1ab0c4ada0b0837ff2b55df8bd31fdec749f663c43",
          "md5": "a4bd1027efaebb6625a92c11ea0e5ef1",
          "sha256": "fd75103f798a9f4c3950d8136401973ba6bbdc814d2f3b5943a55fe9bbc35b14"
        },
        "downloads": -1,
        "filename": "pyqcas-0.1.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4bd1027efaebb6625a92c11ea0e5ef1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 34769,
        "upload_time": "2021-12-12T14:12:59",
        "upload_time_iso_8601": "2021-12-12T14:12:59.577572Z",
        "url": "https://files.pythonhosted.org/packages/d0/02/927adf9223f438db1b1ab0c4ada0b0837ff2b55df8bd31fdec749f663c43/pyqcas-0.1.0b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c35d5ec16eb2848a62eb7833bd03f3303de717d5ee1b13ccafe90a8f642fd2ac",
          "md5": "6b2d04749bcd5c8d624eca3c11e3a53a",
          "sha256": "dd2adf3459e6382539024576cd4cc510ff1ee08e828d611cfefd5bf97eb4ea70"
        },
        "downloads": -1,
        "filename": "pyqcas-0.1.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b2d04749bcd5c8d624eca3c11e3a53a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31443,
        "upload_time": "2021-12-12T14:13:02",
        "upload_time_iso_8601": "2021-12-12T14:13:02.333736Z",
        "url": "https://files.pythonhosted.org/packages/c3/5d/5ec16eb2848a62eb7833bd03f3303de717d5ee1b13ccafe90a8f642fd2ac/pyqcas-0.1.0b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d002927adf9223f438db1b1ab0c4ada0b0837ff2b55df8bd31fdec749f663c43",
        "md5": "a4bd1027efaebb6625a92c11ea0e5ef1",
        "sha256": "fd75103f798a9f4c3950d8136401973ba6bbdc814d2f3b5943a55fe9bbc35b14"
      },
      "downloads": -1,
      "filename": "pyqcas-0.1.0b0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a4bd1027efaebb6625a92c11ea0e5ef1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 34769,
      "upload_time": "2021-12-12T14:12:59",
      "upload_time_iso_8601": "2021-12-12T14:12:59.577572Z",
      "url": "https://files.pythonhosted.org/packages/d0/02/927adf9223f438db1b1ab0c4ada0b0837ff2b55df8bd31fdec749f663c43/pyqcas-0.1.0b0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c35d5ec16eb2848a62eb7833bd03f3303de717d5ee1b13ccafe90a8f642fd2ac",
        "md5": "6b2d04749bcd5c8d624eca3c11e3a53a",
        "sha256": "dd2adf3459e6382539024576cd4cc510ff1ee08e828d611cfefd5bf97eb4ea70"
      },
      "downloads": -1,
      "filename": "pyqcas-0.1.0b0.tar.gz",
      "has_sig": false,
      "md5_digest": "6b2d04749bcd5c8d624eca3c11e3a53a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 31443,
      "upload_time": "2021-12-12T14:13:02",
      "upload_time_iso_8601": "2021-12-12T14:13:02.333736Z",
      "url": "https://files.pythonhosted.org/packages/c3/5d/5ec16eb2848a62eb7833bd03f3303de717d5ee1b13ccafe90a8f642fd2ac/pyqcas-0.1.0b0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}