{
  "info": {
    "author": "",
    "author_email": "\"T.A. Programming Svcs.\" <tomasz.maciej.aniolowski@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Topic :: Database",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "\n# Mimeo (Mimeograph)\n\n**Mimeo** is a command line tool and python library generating custom data based on a template.\nIt can be used by developers, testers or even business analysts in their daily work.\n\n\n## Installation\n\nInstall Mimeo with pip\n\n```sh\npip install mimeograph\n```\n\n\n## Usage/Examples\n\n### Mimeo Configuration\n\nPrepare Mimeo Configuration first\n- for a command line tool: in a JSON file\n- for a `Mimeograph` python class: in a `dict`\n\n```json\n{\n  \"_templates_\": [\n    {\n      \"count\": 30,\n      \"model\": {\n        \"attributes\": {\n          \"xmlns\": \"http://mimeo.arch.com/default-namespace\",\n          \"xmlns:pn\": \"http://mimeo.arch.com/prefixed-namespace\"\n        },\n        \"SomeEntity\": {\n          \"ChildNode1\": 1,\n          \"ChildNode2\": \"value-2\",\n          \"ChildNode3\": true\n        }\n      }\n    }\n  ]\n}\n```\n_You can find more configuration examples in the `examples` folder._\n\n### Mimeograph\n\n#### Command line tool\n\n```sh\nmimeo SomeEntity-config.json\n```\n\n#### Python library\n\n```python\nfrom mimeo import Mimeograph\nfrom mimeo.config import MimeoConfig\n\nconfig = {\n    # Your configuration\n}\nmimeo_config = MimeoConfig(config)\nMimeograph(mimeo_config).produce()\n```\n***\nThe Mimeo Configuration above will produce 2 files:\n\n```xml\n<!-- mimeo-output/mimeo-output-1.xml-->\n<SomeEntity xmlns=\"http://mimeo.arch.com/default-namespace\" xmlns:pn=\"http://mimeo.arch.com/prefixed-namespace\">\n    <ChildNode1>1</ChildNode1>\n    <ChildNode2>value-2</ChildNode2>\n    <ChildNode3>true</ChildNode3>\n</SomeEntity>\n```\n```xml\n<!-- mimeo-output/mimeo-output-2.xml-->\n<SomeEntity xmlns=\"http://mimeo.arch.com/default-namespace\" xmlns:pn=\"http://mimeo.arch.com/prefixed-namespace\">\n    <ChildNode1>1</ChildNode1>\n    <ChildNode2>value-2</ChildNode2>\n    <ChildNode3>true</ChildNode3>\n</SomeEntity>\n```\n***\n\n### Mimeo Utils\n\nMimeo exposes several functions for data generation that will make it more useful for testing purposes.\n\n**Template**\n```json\n{\n  \"count\": 2,\n  \"model\": {\n    \"SomeEntity\": {\n      \"id\": \"{auto_increment()}\",\n      \"randomstring\": \"{random_str()}\",\n      \"randomint\": \"{random_int()}\",\n    }\n  }\n}\n```\n\n**XML Data**\n```xml\n<SomeEntity>\n    <id>00001</id>\n    <randomstring>mCApsYZprayYkmKnYWxe</randomstring>\n    <randomint>8</randomint>\n</SomeEntity>\n```\n```xml\n<SomeEntity>\n    <id>00002</id>\n    <randomstring>ceaPUqARUkFukZIPeuqO</randomstring>\n    <randomint>99</randomint>\n</SomeEntity>\n```\n\n\n## Documentation\n\n### Mimeo Configuration\n\nMimeo configuration is defined in a JSON file using internal settings and data templates.\n\n| Key                             |  Level   |      Required      |     Supported values     |    Default     | Description                                                                                                                                             |\n|:--------------------------------|:--------:|:------------------:|:------------------------:|:--------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `output_format`                 |  Config  |        :x:         |          `xml`           |     `xml`      | Defines output data format                                                                                                                              |\n| `output_details`                |  Config  |        :x:         |          object          |      ---       | Defines output details on how it will be consumed                                                                                                       |\n| `output_details/direction`      |  Config  |        :x:         | `file`, `stdout`, `http` |     `file`     | Defines how output will be consumed                                                                                                                     |\n| `output_details/directory_path` |  Config  |        :x:         |          string          | `mimeo-output` | For `file` direction - defines an output directory                                                                                                      |\n| `output_details/file_name`      |  Config  |        :x:         |          string          | `mimeo-output` | For `file` direction - defines an output file name                                                                                                      |\n| `output_details/method`         |  Config  |        :x:         |      `POST`, `PUT`       |     `POST`     | For `http` direction - defines a request method                                                                                                         |\n| `output_details/protocol`       |  Config  |        :x:         |     `http`, `https`      |     `http`     | For `http` direction - defines a url protocol                                                                                                           |\n| `output_details/host`           |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a url host                                                                                                               |\n| `output_details/port`           |  Config  |        :x:         |         integer          |     `null`     | For `http` direction - defines a url port (can be empty)                                                                                                |\n| `output_details/endpoint`       |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a url endpoint                                                                                                           |\n| `output_details/auth`           |  Config  |        :x:         |    `basic`, `digest`     |    `basic`     | For `http` direction - defines a auth method                                                                                                            |\n| `output_details/username`       |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a username                                                                                                               |\n| `output_details/password`       |  Config  | :heavy_check_mark: |          string          |      ---       | For `http` direction - defines a password                                                                                                               |\n| `indent`                        |  Config  |        :x:         |         integer          |     `null`     | Defines indent applied in output data                                                                                                                   |\n| `vars`                          |  Config  |        :x:         |          object          |      ---       | Defines variables to be used in a Mimeo Template (read more in next section)                                                                            |\n| `xml_declaration`               |  Config  |        :x:         |         boolean          |    `false`     | Indicates whether an xml declaration should be added to output data                                                                                     |\n| `_templates_`                   |  Config  | :heavy_check_mark: |          array           |      ---       | Stores templates for data generation                                                                                                                    |\n| `count`                         | Template | :heavy_check_mark: |         integer          |      ---       | Indicates number of copies                                                                                                                              |\n| `model`                         | Template | :heavy_check_mark: |          object          |      ---       | Defines data template to be copied                                                                                                                      |\n| `attributes`                    |  Model   |        :x:         |          object          |      ---       | Defines attributes applied on the root node (mostly used for namespaces)                                                                                |\n| `context`                       |  Model   |        :x:         |          object          |      ---       | Defines a context name that is internally used e.g. using `curr_iter()` and `get_key()` mimeo utils (by default model name is used as the context name) |\n\n#### Mimeo Vars\n\nMimeo allows you to define a list of variables.\nYou can use them in your Mimeo Config by wrapping them in curly brackets [`{VARIABLE}`].\n\nThere are only 2 rules for variable names:\n- Variable name can include upper-cased letters \\[`A-Z`\\], underscore \\[`_`\\] and digits \\{`0-9`\\} only\n- Variable name must start with a letter\n\nVariable can be defined with:\n- any atomic value\n- any other variable defined\n- any Mimeo Util\n\nYou can use Mimeo Vars as partial values (unless they are defined as Mimeo Utils).\n\nExample:\n```json\n{\n  \"vars\": {\n    \"CUSTOM_VAR_1\": \"custom-value-1\",\n    \"CUSTOM_VAR_2\": 1,\n    \"CUSTOM_VAR_3\": true,\n    \"CUSTOM_VAR_4\": \"{CUSTOM_VAR_2}\",\n    \"CUSTOM_VAR_5\": \"{auto_increment('{}')}\"\n  },\n  \"_templates_\": [\n    {\n      \"count\": 5,\n      \"model\": {\n        \"SomeEntity\": {\n          \"ChildNode1\": \"{CUSTOM_VAR_1}\",\n          \"ChildNode2\": \"{CUSTOM_VAR_2}\",\n          \"ChildNode3\": \"{CUSTOM_VAR_3}\",\n          \"ChildNode4\": \"{CUSTOM_VAR_4}\",\n          \"ChildNode5\": \"{CUSTOM_VAR_5}\",\n          \"ChildNode6\": \"{CUSTOM_VAR_1}-with-suffix\"\n        }\n      }\n    }\n  ]\n}\n```\n\n#### Mimeo Special Fields\n\nIn Mimeo Template you can use so-called _special fields_.\nEvery field in a template can be stored in memory (_provided_) and used later as a value of other fields (_injected_).\nTo provide and inject a special field use curly brackets and colons: [`{:SomeField:}`].\nYou provide a field when you use this format in a field name (JSON property name),\nand inject by applying it in a field value.  \nThey can be injected as partial values, similarly to Mimeo Vars.\n\nExample\n```json\n{\n  \"_templates_\": [\n    {\n      \"count\": 5,\n      \"model\": {\n        \"SomeEntity\": {\n          \"{:ChildNode1:}\": \"custom-value\",\n          \"ChildNode2\": \"{:ChildNode1:}\",\n          \"ChildNode3\": \"{:ChildNode1:}-with-suffix\"\n        }\n      }\n    }\n  ]\n}\n```\n\n### Mimeo CLI\n\nWhen using Mimeo command line tool you can overwrite Mimeo Configuration properties:\n\n| Short option | Long option       | Description                                            |\n|:------------:|:------------------|:-------------------------------------------------------|\n|      -x      | --xml-declaration | overwrite the `xml_declaration` property               |\n|      -i      | --indent          | overwrite the `indent` property                        |\n|      -o      | --output          | overwrite the `output_details/direction` property      |\n|      -d      | --directory       | overwrite the `output_details/directory_path` property |\n|      -f      | --file            | overwrite the `output_details/file_name` property      |\n\n### Mimeo Utils\n\nYou can use several predefined functions to generate data by using them within curly braces:\n```xml\n<id>{auto_increment()}</id>\n```\n\n| Function                                                                   | Example                                 | Data                                                                                                                       |\n|:---------------------------------------------------------------------------|:----------------------------------------|:---------------------------------------------------------------------------------------------------------------------------|\n| `auto_increment()`                                                         |                                         | Generates next integer in context of a model (in nested templates it will use a separated context)                         |\n| `auto_increment(<STRING_PATTERN>)`                                         | `auto_increment('MYID{:010d}')`         | Same as `auto_increment()` but the integer is used in a string pattern provided                                            |\n| `curr_iter()`                                                              |                                         | Generates a value of the current iteration in a Mimeo Template context                                                     |\n| `curr_iter(<CONTEXT_NAME>)`                                                | `curr_iter('SomeEntity')`               | Generates a value of the current iteration in a specific Mimeo Model context (model name when `context` is not configured) |\n| `key()`                                                                    |                                         | Generates a key unique across all Mimeo Models and being the same within a single Mimeo Model context                      |\n| `get_key(<CONTEXT_NAME>)`                                                  | `get_key('SomeEntity')`                 | Retrieves the last key from a specific context  (model name when `context` is not configured)                              |\n| `get_key(<CONTEXT_NAME>, <ITERATION>)`                                     | `get_key('SomeEntity', 5)`              | Retrieves a key from a specific context (model name when `context` is not configured) and from a specific iteration        |\n| `random_str()`                                                             |                                         | Generates a random string value of the default length: 20 characters                                                       |\n| `random_str(<LENGTH>)`                                                     | `random_str(2)`                         | Generates a random string value of the customized length                                                                   |\n| `random_int()`                                                             |                                         | Generates a random integer value within the default range: 0-99                                                            |\n| `random_int(<LIMIT>)`                                                      | `random_int(10)`                        | Generates a random integer value within the custom range: 0-<LIMIT>                                                        |\n| `random(<ITEMS>)`                                                          | `random(['value', 1, True])`            | Generates a random value from <ITEMS> provided                                                                             |\n| `date()`                                                                   |                                         | Generates a today's date in format YYYY-MM-DD                                                                              |\n| `date(<DAYS_DELTA>)`                                                       | `date(-1)`                              | Generates a date with customized days in format YYYY-MM-DD                                                                 |\n| `date_time()`                                                              |                                         | Generates a current date time in format YYYY-MM-DD'T'HH:mm:SS                                                              |\n| `date_time(<DAYS_DELTA>, <HOURS_DELTA>, <MINUTES_DELTA>, <SECONDS_DELTA>)` | `date(hours=5, minutes=-3)`             | Generates a date time with customized time in format YYYY-MM-DD'T'HH:mm:SS                                                 |\n| `city()`                                                                   | `city()`                                | Generates a city name                                                                                                      |\n| `city(<ALLOW_DUPLICATES>)`                                                 | `city(True)`                            | Generates a city name allowing for duplicates within a context                                                             |\n| `city_of(<COUNTRY>)`                                                       | `city('GBR')`                           | Generates a city name of a specific country (name, iso3 or iso2)                                                           |\n| `city_of(<COUNTRY>, <ALLOW_DUPLICATES>)`                                   | `city('United Kingdom', True)`          | Generates a city name of a specific country (name, iso3 or iso2) allowing for duplicates within a context                  |\n| `country()`                                                                | `country()`                             | Generates a country name                                                                                                   |\n| `country(<ALLOW_DUPLICATES>)`                                              | `country(True)`                         | Generates a country name allowing for duplicates within a context                                                          |\n| `country(<ALLOW_DUPLICATES>, <COUNTRY>)`                                   | `country(False, 'GBR')`                 | Generates a country name of a specific country (iso3 / iso2) (`<ALLOW_DUPLICATES>` parameter is ignored)                   |\n| `country_iso3()`                                                           | `country_iso3()`                        | Generates a country iso3 code                                                                                              |\n| `country_iso3(<ALLOW_DUPLICATES>)`                                         | `country_iso3(True)`                    | Generates a country iso3 code allowing for duplicates within a context                                                     |\n| `country_iso3(<ALLOW_DUPLICATES>, <COUNTRY>)`                              | `country_iso3(False, 'GB')`             | Generates a country iso3 code of a specific country (name / iso2) (`<ALLOW_DUPLICATES>` parameter is ignored)              |\n| `country_iso2()`                                                           | `country_iso2()`                        | Generates a country iso2 code                                                                                              |\n| `country_iso2(<ALLOW_DUPLICATES>)`                                         | `country_iso2(True)`                    | Generates a country iso2 code allowing for duplicates within a context                                                     |\n| `country_iso2(<ALLOW_DUPLICATES>, <COUNTRY>)`                              | `country_iso2(False, 'United Kingdom')` | Generates a country iso2 code of a specific country (name / iso3) (`<ALLOW_DUPLICATES>` parameter is ignored)              |\n\n\n## License\n\nMIT\n\n\n## Authors\n\n- [@TomaszAniolowski](https://www.github.com/TomaszAniolowski)\n\n\n## Acknowledgements\n\n - [SimpleMaps.com](https://simplemaps.com/data/world-cities) (Cities & countries data)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "mimeograph,mimeo,generate,generator",
    "license": "MIT License  Copyright (c) 2023 Tomasz Aniołowski  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mimeograph",
    "package_url": "https://pypi.org/project/mimeograph/",
    "platform": null,
    "project_url": "https://pypi.org/project/mimeograph/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mimeograph/0.1.1/",
    "requires_dist": [
      "requests",
      "pandas",
      "pyyaml",
      "haggis",
      "bumpver ; extra == 'dev'",
      "build ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "responses ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Generate data based on a simple template",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17506296,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8657d331f06777055fb447961f390cdcbfe59bf5071fd463a3f5278d4d009061",
          "md5": "a2b9a7833c9c2db00f8d9925e36ec915",
          "sha256": "537521a56997a092a360b8a0765c1d5713801c941a108c28eb137e122eb9c33f"
        },
        "downloads": -1,
        "filename": "mimeograph-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2b9a7833c9c2db00f8d9925e36ec915",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 542191,
        "upload_time": "2023-03-30T05:59:42",
        "upload_time_iso_8601": "2023-03-30T05:59:42.573373Z",
        "url": "https://files.pythonhosted.org/packages/86/57/d331f06777055fb447961f390cdcbfe59bf5071fd463a3f5278d4d009061/mimeograph-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2b9de11b8b28ae1136fb100db70652a44993e4513ab02c9d4c2668b21336d84",
          "md5": "9db6e3b062722757f560f74ed511d269",
          "sha256": "a3cca37d1e916a21371d47b11403f0a437cd2858443e960db4b31d743b08b627"
        },
        "downloads": -1,
        "filename": "mimeograph-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9db6e3b062722757f560f74ed511d269",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 543246,
        "upload_time": "2023-03-30T05:59:45",
        "upload_time_iso_8601": "2023-03-30T05:59:45.564826Z",
        "url": "https://files.pythonhosted.org/packages/a2/b9/de11b8b28ae1136fb100db70652a44993e4513ab02c9d4c2668b21336d84/mimeograph-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5dd9cb890e5f5bed5662551396afde466b844ecf8a556659a7030a6da915983",
          "md5": "447528270d5bc500568661e4a6355d6b",
          "sha256": "f9363d83733a9a04a7658b432d62ab677b6a6f4b7adf53e384169cb28706ea82"
        },
        "downloads": -1,
        "filename": "mimeograph-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "447528270d5bc500568661e4a6355d6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 542644,
        "upload_time": "2023-03-30T07:37:57",
        "upload_time_iso_8601": "2023-03-30T07:37:57.343479Z",
        "url": "https://files.pythonhosted.org/packages/e5/dd/9cb890e5f5bed5662551396afde466b844ecf8a556659a7030a6da915983/mimeograph-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8419bc0ba513bd2550381aa92492b0e4b28bbbcfbf8feeadda9f7ddc9707d43",
          "md5": "2b39a3c9304396e7e53636b3d1bb66eb",
          "sha256": "e3d6f02917c503c380d3f7763f539b6e5c02594ef0986e7c16551f059ecef606"
        },
        "downloads": -1,
        "filename": "mimeograph-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b39a3c9304396e7e53636b3d1bb66eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 543498,
        "upload_time": "2023-03-30T07:38:00",
        "upload_time_iso_8601": "2023-03-30T07:38:00.313851Z",
        "url": "https://files.pythonhosted.org/packages/f8/41/9bc0ba513bd2550381aa92492b0e4b28bbbcfbf8feeadda9f7ddc9707d43/mimeograph-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5dd9cb890e5f5bed5662551396afde466b844ecf8a556659a7030a6da915983",
        "md5": "447528270d5bc500568661e4a6355d6b",
        "sha256": "f9363d83733a9a04a7658b432d62ab677b6a6f4b7adf53e384169cb28706ea82"
      },
      "downloads": -1,
      "filename": "mimeograph-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "447528270d5bc500568661e4a6355d6b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 542644,
      "upload_time": "2023-03-30T07:37:57",
      "upload_time_iso_8601": "2023-03-30T07:37:57.343479Z",
      "url": "https://files.pythonhosted.org/packages/e5/dd/9cb890e5f5bed5662551396afde466b844ecf8a556659a7030a6da915983/mimeograph-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8419bc0ba513bd2550381aa92492b0e4b28bbbcfbf8feeadda9f7ddc9707d43",
        "md5": "2b39a3c9304396e7e53636b3d1bb66eb",
        "sha256": "e3d6f02917c503c380d3f7763f539b6e5c02594ef0986e7c16551f059ecef606"
      },
      "downloads": -1,
      "filename": "mimeograph-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2b39a3c9304396e7e53636b3d1bb66eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 543498,
      "upload_time": "2023-03-30T07:38:00",
      "upload_time_iso_8601": "2023-03-30T07:38:00.313851Z",
      "url": "https://files.pythonhosted.org/packages/f8/41/9bc0ba513bd2550381aa92492b0e4b28bbbcfbf8feeadda9f7ddc9707d43/mimeograph-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}