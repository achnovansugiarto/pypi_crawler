{
  "info": {
    "author": "Mohammad Razavi",
    "author_email": "mrazavi64@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Logging",
      "Topic :: System :: Systems Administration"
    ],
    "description": "..\n  This description is automatically generated from README.org file.\n\nPyMongoWatch\n============\n\n``pymongowatch`` is an extension for the MongoDB's Python driver\n`pymongo <https://pymongo.readthedocs.io/en/stable/>`__ which enable\nwatching and auditing the underlying operations.\n\nMongoDB Community Server doesn't support\n`auditing <https://docs.mongodb.com/manual/core/auditing/>`__ and the\n`database\nprofiler <https://docs.mongodb.com/manual/tutorial/manage-the-database-profiler/>`__\nis not very flexible. Basically your only option for filtering is to\ncollect operations that take longer than a certain value. You can't\neasily separate the insert log from the query log or you cannot extract\nthe operations only for a certain collection or a certain set of\nqueries.\n\nFurthermore, operations at database level are not always the same as\noperations in an application. A very simple operation like fetching\ndocuments with\n`find <https://pymongo.readthedocs.io/en/stable/api/pymongo/collection.html#pymongo.collection.Collection.find>`__\nmay be translated to several\n`getMore <https://docs.mongodb.com/manual/reference/command/getMore/>`__\noperations at database level.\n\nTherefore, if you want to analyze the user behavior by studying the\ndatabase queries, a very simple auditing log for each user search\ncontaining the query itself (possibly with deleting value fields to\nprotect the users' privacy), the number of the documents read from the\ndatabase and its time is all you need.\n\nDoing this at database level is not always feasible and doing it\nmanually at application level may not be very desirable for the\ndevelopers. This is when an intermediate tool at library level comes\nhandy.\n\n``pymongowatch`` can detect and audit operations at application level\nwithout any modifications to existing applications.\n\nQuick Setup\n-----------\n\nFirst you have to install ``pymongowatch``. It is available at `Python\nPackage Index (PyPI) <https://pypi.org/project/pymongowatch/>`__ and can\nbe installed with `pip <https://pip.pypa.io/en/stable/>`__. At a\n`virtual environment <https://docs.python.org/3/tutorial/venv.html>`__\nor system-wide:\n\n.. code:: shell\n\n   pip install pymongowatch\n\n`Other installation\noptions <https://github.com/admirito/pymongowatch#other-installation-options>`__\nsuch as Debian packages are available, too.\n\nAfter basic installation, ``pymongo.watcher`` sub-package will be\navailable and you have two options to go on:\n\nOption 1: Call the watcher at application startup\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis approach is recommended if you have no restrictions on modifying\nthe pymongo-based application and you don't want any hacks on the\n``pymongo`` itself.\n\n.. code:: python\n\n   from pymongo import watcher\n\n   watcher.patch_pymongo()\n   watcher.add_logging_handlers()  # Adds a logging.StreamHandler by default\n\nOf course, you can pass your own customized logging handlers to\n``add_logging_handlers`` and add filters and formatters as you wish. See\nthe following sections for more information.\n\nOption 2: No application modification\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you don't own the application or you don't want to even add a single\nline of code to your existing application, ``pymongo_mask`` which is\nincluded in the ``pymongowatch`` package comes handy.\n\n``pymongo_mask`` is a directory with a module ``pymongo.py`` which\nemulates the ``pymongo`` package by using the real installed\n``pymongo``; So if you add ``pymongo_mask`` directory in your Python\napplication `search path for\nmodules <https://docs.python.org/3/library/sys.html#sys.path>`__–in\nsomewhere with more priority than where the real ``pymongo`` is\ninstalled–the mask will be imported in your application instead of the\nreal ``pymongo``. Nevertheless the mask will work as a proxy to the real\ninstalled ``pymongo`` and your application should work as usual.\n\nThe importation of the pymongo mask will also trigger\n``watcher.patch_pymongo()`` automatically, so the watchers will be\nenabled without any need to change your application source code or even\n``pymongo`` library itself.\n\nFurthermore, the pymongo mask will apply the configuration at\n``etc/pymongowatch.yaml`` with\n`logging.config.dictConfig <https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig>`__\nto the loggers of the watchers. A sample\n`etc/pymongowatch.yaml <https://github.com/admirito/pymongowatch/blob/master/etc/pymongowatch.yaml>`__\nis included in the ``pymongowatch`` package but you can modify it as\nneeded. The `yaml <https://en.wikipedia.org/wiki/YAML>`__ configuration\nfollows the `logging dictionary\nschema <https://docs.python.org/3/library/logging.config.html#dictionary-schema-details>`__.\n\nFinally, ``pymongowatch`` package includes a\n``pymongowatch-install-mask`` script which can help you enable the\npymongo mask with ease:\n\n.. code:: shell\n\n   pymongowatch-install-mask  # follow the interactive instructions\n\nUsage\n-----\n\n``pymongowatch`` implements classes such as ``WatchCursor`` (a subclass\nof pymongo's ``cursor``) which if used instead of pymongo's ``cursor``\ncan emit logs as specified. To do so, you need some workaround to make\npymongo's methods to use ``pymongowatch`` classes instead of its\ndefaults. The ``patch_pymongo`` function is the method that will call\nall the patch methods in ``pymongowatch`` classes to replace the default\npymongo underlying classes:\n\n.. code:: python\n\n   from pymongo import watcher\n\n   watcher.patch_pymongo()\n\nAll the ``pymongowatch`` watcher classes will use the logger retrieved\nwith ``pymongo.watcher.logger.get_log_emitter()`` to emit their logs.\nEach module will emit the logs with their\n`name <https://docs.python.org/3/tutorial/modules.html>`__. So for\nexample, all the cursor logs will be emitted under the\n``pymongo.watcher.cursor``. So you can apply specific logging\nconfiguration for each module or as all the logs has the prefix\n``pymongo.watcher`` as their logger name you can apply global\nconfiguration with that name.\n\n.. code:: python\n\n   import logging\n\n   # The following code is not the recommended method for adding handlers\n   # to the pymongowatch loggers and is for illustrative purposes only\n\n   global_logger = logging.getLogger(\"pymongo.watcher\")\n   # add a stream log handler globally to watch all the logs on the\n   # console\n   global_logger.addHandler(logging.StreamHandler())\n\n   cursor_logger = logging.getLogger(\"pymongo.watcher.cursor\")\n   # add a file handler specifically for cursor logs to store them in\n   # file, too.\n   cursor_logger.addHandler(logging.FileHandler(\"/tmp/watch.log\"))\n\nOf course you can apply\n`filters <https://docs.python.org/3/library/logging.html#filter-objects>`__\nand\n`formatters <https://docs.python.org/3/library/logging.html#formatter-objects>`__\nor add more\n`handlers <https://docs.python.org/3/library/logging.html#handler-objects>`__\nas you wish but there are some details that you should take care of. The\neasiest way to achieve this is by leveraging the\n``add_logging_handlers`` method:\n\n.. code:: python\n\n   from pymongo import watcher\n\n   # Add two handlers to get all the watcher logs both in file and\n   # console\n   console_handler = logging.StreamHandler()\n   global_handler = logging.FileHanlder(\"/tmp/watcher-all.log\")\n   watcher.add_logging_handlers(console_handler, global_handler)\n\n   # Add a more customized handler for cursor logs\n   cursor_simple_handler = logging.FileHanlder(\"/tmp/watcher-cursor-simple.log\")\n   watcher.add_logging_handlers(\n       cursor_simple_handler,\n       logger_name=\"pymongo.watcher.cursor\",\n       formatter=\"{name} - {watch}\")\n\n   # Add a more customized handler for cursor logs\n   cursor_customized_handler = logging.FileHanlder(\n       \"/tmp/watcher-cursor-customized.log\")\n   watcher.add_logging_handlers(\n       cursor_customized_handler,\n       logger_name=\"pymongo.watcher.cursor\",\n       formatter=\"{asctime} {name}.{watch.Collection} - {watch.Query} fetched \"\n                 \"{watch.RetrievedCount} in {watch.RetrieveTime} seconds\")\n\n   # Add another handler to log the full information for cursors in csv\n   cursor_csv_handler = logging.FileHanlder(\n       \"/tmp/watcher-cursor-csv.log\")\n   watcher.add_logging_handlers(\n       cursor_csv_handler,\n       logger_name=\"pymongo.watcher.cursor\",\n       formatter=\"{asctime},{name},{watch.csv}\")\n\nNote that using ``add_logging_handlers`` has not only the advantage of\nsimplicity for adding formatters, but also take care of automatically\nadding an extra\n`logging.handlers.QueueHandler <https://docs.python.org/3/library/logging.handlers.html#queuehandler>`__\nand\n`logging.handlers.QueueListener <https://docs.python.org/3/library/logging.handlers.html#queuelistener>`__\nfor each handler to overcome some log mutation issues we discuss later.\nIt will also add a couple of customized\n`filters <https://docs.python.org/3/library/logging.html#filter-objects>`__\nto the ``QueueHandler`` that are necessary to fully take advantage of\n``pymongowatch``.\n\nYou can set the log format by using\n`formatters <https://docs.python.org/3/library/logging.html#formatter-objects>`__\neither by passing a string as the ``formatter`` option to the\n``add_logging_handlers`` or by creating a ``formatter`` object and using\nthe handler's\n`setFormatter <https://docs.python.org/3/library/logging.html#logging.Handler.setFormatter>`__\nmethod directly. In either case the recommended way is to use ``{``\n`style <https://docs.python.org/3/library/logging.html#logging.Formatter>`__.\nSpecially if you want to access inner values with dot notation e.g.\n``watch.Query`` or ``watch.Collection`` other styles such as ``%`` and\n``$`` (e.g. ``%(watch.Query)s`` or ``${watch.Query}``) will **NOT**\nwork.\n\nAnother useful feature of Python ``logging`` module is its\n`filters <https://docs.python.org/3/library/logging.html#filter-objects>`__.\nYou can use ``filter`` objects not only to filter unwanted logs but also\nto modify the ones that you want. ``add_logging_handlers`` will\nautomatically add some basic filters (such as ``AddPymongoResults``\nwhich will extract information about ``pymongo`` operations results and\nadd them to the related log), but you can also add your own filters.\n\n``pymongo.watcher.filters`` module implements a couple of useful\nconfigurable filters such as ``ExpressionFilter``, ``ExecuteFilter`` and\n``RateFilter``. The `etc/pymongowatch.yaml <./etc/pymongowatch.yaml>`__\nhas some examples on how to use them.\n\nYou can also develop your own logging filters by sub-classing\n`logging.Filter <https://docs.python.org/3/library/logging.html#filter-objects>`__\nas usual and access the ``record.watch`` in\n`filter <https://docs.python.org/3/library/logging.html#logging.Filter.filter>`__\nmethod for investigating or modifying the watcher attributes such as\n``DB``, ``Collection``, ``Query``, etc.\n\n.. code:: python\n\n   import logging\n\n   class SlowQueriesOnNewsCollectionFilter(logging.Filter):\n       def filter(self, record):\n           watch = getattr(record, \"watch\", {})\n           return (watch.get(\"Collection\") == \"news\" and\n                   watch.get(\"RetrieveTime\", 0) > 10)\n\nOr you can add filters to modify the logs:\n\n.. code:: python\n\n   import logging\n\n   def remove_private_data(data):\n       if isinstance(data, dict):\n           return {k: remove_private_data(v) for k, v in data.items()}\n       elif isinstance(data, list):\n           return [remove_private_data(i) for i in data]\n       return None\n\n   class UserPrivacyFilter(logging.Filter):\n       def filter(self, record):\n           watch = getattr(record, \"watch\", {})\n           watch.update(remove_private_data(watch))\n           return True\n\nDon't forget to add the defined filters to you handlers:\n\n.. code:: python\n\n   my_handler.addFilter(SlowQueriesOnNewsCollectionFilter)\n   my_handler.addFilter(UserPrivacyFilter)\n\nLastly, you can use Python's great\n`logging.conig <https://docs.python.org/3/library/logging.config.html#module-logging.config>`__\nmodule and specially the new flexible\n`logging.config.dictConfig <https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig>`__\nmethod to apply all the ``handlers``, ``formatters`` and ``filters`` in\na single configuration file. Custom ``pymongowatch`` configuration can\nalso be applied in the same dictionary.\n\n``pymongowatch`` has even the required filters implemented in\n``pymongo.watcher.filters`` module. To see the examples for the\n``dictConfig`` configuration with watcher filters refer to the\n``etc/pymongowatch.yaml`` file which will be installed via\n``pymongowatch`` (if you are using a virtual environment, it would be\ninside the venv directory).\n\ndictConfig configuration\n------------------------\n\nThere is a ``pymongo.watcher.dictConfig`` method that accepts a\nconfiguration dictionary with almost `the same\nspecification <https://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema>`__\nas ``logging.config.dictConfig``. But it will apply custom configuration\nrequired by ``pymongowatch`` itself.\n\nThe ``pymongo.watcher.dictConfig`` will not apply the intended logging\nconfigurations such as ``handlers`` and ``formatters``. Instead, it\nreads the special key ``watchers`` from the dictionary and apply the\nrelated configuration for ``pymongowatch``. Although you can use the a\nsingle dictionary with both logging configuration and ``watchers`` key\nand apply both ``pymongo.watcher.dictConfig`` and\n``logging.config.dictConfig``.\n\nFor more information about the ``pymongowatch`` configurations please\nrefer to the ``watchers`` key inside the example\n``etc/pymongowatch.yaml`` file that will be installed alongside the\npackage.\n\nMutable vs Immutable Logs\n-------------------------\n\nMutable Logs? Is that a thing?\n\nUsually the good thing about logs is that they are immutable. So if you\nsee a log you can trust it. This is always true when some atomic\noperation happens and you have no concerns about the start and end time\nof the operation (and you don't have access to a time machine to travel\nto the past and change what happened).\n\nBut what if you start an operation which we have no idea when will it\nend? Suppose we have queried a very large database for a very slow query\nthat may take some time to get back the full results. Also, we may use a\ncursor in our application to fetch data and the application has some\ndelays itself and we don't want the slowness of the application to\naffect the database auditing.\n\nThese are the sort of challenges that ``pymongo.watcher.WatchQueue``\ntries to fix.\n\n``pymongowatch`` uses ``pymongo.watcher.logger.WatchMessage`` instead of\nstrings as log messages as described in `using arbitrary objects as\nmessages <https://docs.python.org/3/howto/logging.html#using-arbitrary-objects-as-messages>`__\nin Python's logging HOWTO. ``WatchMessage`` is a sub-class of Python's\ndictionaries which are mutable objects.\n\n``WatchMessage`` instances are the ``{watch}`` templates in the format\nstrings that we saw earlier. They are a ``dict`` so you can access log\nattributes with ``[]`` access e.g. ``watch[\"Query\"]``. For more\nconvenience while using log formatters ``WatchMessage`` provides\nattribute access with dot notation e.g. ``watch.Query`` and one of the\nreasons why ``{`` style formatting (which let you use dot notation\naccess) is recommended for logging formatters.\n\nA ``WatchMessage`` is a mutable object and the watcher classes need to\nmodify the logs from time to time. For example if you fetch more items\nfrom a cursor, they can update the attributes such as ``RetrieveTime``\nor ``RetrievedCount``. So we have flexibility and it is ``pymongowatch``\nusers decision when to emit the final immutable log with the logger\nhandlers.\n\nIn the old versions of ``pymongowatch``, the watcher classes modified\nthe ``WatchMessage`` even after the emitting the log, leaving the entire\nburden for consistency on the ``WatchQueue``. This approach soon became\nproblematic in multiprocessing environments where the ``WatchMessage``\nin the emitter process differs from the one in the queue process.\n\nIn the newer versions, ``WatchMessage`` has a unique identifier\n``WatchID`` for the ongoing operation. The watcher classes will not only\nmutate the previous ``WatchMessage`` but also re-emit the log again and\nagain on each update (with an incremental meta-data named\n``Iteration``). In this way, even if the log has already stored\nsomewhere as an immutable object (for example in a file as a log record\nor in a separate process as an object that cannot see the modifications\nto the original ``WatchMessage``) can still receive the updates.\n\nThe pitfall is now we may have thousands of updates and consequently\nthousands of logs for each operation. But this problem can easily be\nhandled by ``WatchQueue`` or an external tool such as\n``pymongowatch-csv``.\n\n``WatchQueue`` alongside a\n`QueueHandler <https://docs.python.org/3/library/logging.handlers.html#queuehandler>`__\nis the right tool to make sure we handle logs at right time. A\n``WatchQueue`` works like a priority queue in which the earliest logs\nhas the higher priority but it can also aggregate the updates for each\noperation based on the ``WatchID``.\n\n``WatchQueue`` will update the old iterations with the newer ones and\nreleases the logs when they have the ``final`` iteration mark or when\nthey have expired. The ``final`` mark is a special case of ``Iteration``\nmeta-data in each log that indicates the database operation has finished\nand the watcher class will not modify this ``WatchMessage`` (with the\nspecified ``WatchID``) anymore.\n\nAlso it is important to note that the highest priority item (for\nretrieval) in the ``WatchQueue`` is not always the earliest generated\nlog. First, the different operations may take different times, and\nsecond, the watcher classes may assign different expiration times to\neach operation.\n\nFinally you can set a ``forced_delay_sec`` to add delay to all the logs\nin the queue (for example if you are using logging for analytics and you\ndo care more about accuracy than delay for the logs). This is an\noptional keyword arguments that both ``WatchQueue`` constructor and\n``add_logging_handlers`` method that we saw earlier accepts.\n\nThe ``add_logging_handlers`` has a ``with_queue`` optional argument\nwhich if is ``True`` (the default), will use\n``pymongo.watcher.setup_queue_handler`` to setup a\n`QueueHandler <https://docs.python.org/3/library/logging.handlers.html#queuehandler>`__\nalongside a started\n`QueueListener <https://docs.python.org/3/library/logging.handlers.html#queuelistener>`__\nfor each handler you specify with a ``WatchQueue`` so you usually don't\nhave to worry about log mutation if you use ``add_logging_handlers`` to\nadd your handlers to watcher loggers.\n\nA ``pymongowatch-csv`` script is also available after the\n``pymongowatch`` installation that can be used to aggregate all the\niterations of a single operation into a single row when you use the\n``csv`` format:\n\n.. code:: shell\n\n   pymongowatch-csv aggr /tmp/watch.csv > /tmp/aggregated-watch.csv\n\nMultiprocessing\n---------------\n\nAnother useful application of\n`QueueHandler <https://docs.python.org/3/library/logging.handlers.html#queuehandler>`__\nis its use in `logging to a single file from multiple\nprocesses <https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes>`__.\nFor this application you have to use a multiprocessing ``Queue``\nalongside the ``QueueHandler``. Fortunately ``WatchQueue`` also supports\nmultiprocessing. All you have to do is to pass ``True`` as the\n``enable_multiprocessing`` argument.\n\nThis is useful for example when you have a ``pymongo`` based web\napplication with several web server processes and you need a process\nsafe method to store the logs in a single file. Its worth noting that in\nsuch environments using the default value for ``enable_multiprocessing``\ni.e. ``False`` will result in total failure in logging because the\ndefault ``Queue`` is not multiprocessing and the ``QueueHandler`` and\nthe ``QueueListener`` will use different queues in different processes.\n\nPassing ``True`` as ``enable_multiprocessing`` in ``WatchQueue``\nconstructor will makes the constructor to build and return a `proxy\nobject <https://docs.python.org/3/library/multiprocessing.html#proxy-objects>`__\nfrom a `customized\nmanager <https://docs.python.org/3/library/multiprocessing.html#customized-managers>`__\nwhich has its own dedicated process. You can also pass\n``enable_multiprocessing`` to ``setup_queue_handler`` and\n``add_logging_handlers``:\n\n.. code:: python\n\n   # Extra keyword arguments of `add_logging_handlers` will be passed to\n   # the newly created WatchQueue for each handler.\n   watcher.add_logging_handlers(enable_multiprocessing=True)\n\nPymongo Versions\n----------------\n\n``pymongowatch`` is not a standalone MongoDB library and it relies on\nthe the MongoDB's Python driver\n`pymongo <https://pymongo.readthedocs.io/en/stable/>`__. But does the\npymongo's version matter?\n\n``pymongowatch`` has been tested with the recent versions of ``pymongo``\ni.e. ``3.10`` and the newer ``4`` series but you can use it for other\nversions at your own risk. If you have any problems you can open an\nissue at the `project's issue\ntracker <https://github.com/admirito/pymongowatch/issues>`__.\n\nOne known difference between ``pymongo`` versions is that they handle\noperation closing differently. For example, ``4`` series close the\ncursors more intelligently and you can usually see the ``cursor`` logs\nvery fast without any need to a explicit timeout whereas any ``3``\nseries usually an explicit timeout is required.\n\nOther Installation Options\n--------------------------\n\nDebian Packages\n~~~~~~~~~~~~~~~\n\nIf you are a `Debian <https://www.debian.org/>`__-based GNU/Linux\ndistribution user you are in luck! There is a Debian package maintained\nin the `project's debian\nbranch <https://github.com/admirito/pymongowatch/tree/debian>`__ that\ncan make your installation even easier.\n\nYou can find the binary packages at `mrazavi's pymongowatch\nPPA <https://launchpad.net/~mrazavi/+archive/ubuntu/pymongowatch>`__ and\nto install it on Ubuntu:\n\n.. code:: shell\n\n   sudo add-apt-repository ppa:mrazavi/pymongowatch\n   sudo apt update\n\n   sudo apt install python3-pymongowatch\n\nRoadmap\n-------\n\nThe project `issue\ntracker <https://github.com/admirito/pymongowatch/issues>`__ is the main\nlocation to maintain the details for the future development. But here\nthe cardinal points will be reviewed briefly.\n\nNOTE\n   If you see an ugly TODO list below with oversize items, it's not even\n   clear which items are DONE and which ones are still TODO, maybe that\n   is because this document is written in\n   `org-mode <https://orgmode.org/>`__ but you are seeing a bad render\n   e.g. in\n   `GitHub <https://github.com/github/markup/blob/master/README.md#markups>`__\n   or a converted reStructuredText format e.g. because `the lack of\n   org-mode support in\n   PyPI <https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/>`__.\n\n   That doesn't make org-mode less lovable or inferior. Anyway `org-mode\n   is one of the most reasonable markup languages to use for\n   text <https://karl-voit.at/2017/09/23/orgmode-as-markup-only/>`__.\n   Why not to use it and brag about it?\n\nDONE Support queries with find\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDONE Support for basic collection operations `#3 <https://github.com/admirito/pymongowatch/issues/3>`__\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTODO Support for CommandCursor `#4 <https://github.com/admirito/pymongowatch/issues/4>`__\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDONE Packaging\n~~~~~~~~~~~~~~\n\n#. DONE Implement pip package\n\n#. DONE Implement debian package\n\n#. TODO Automatic execution of tests\n\nDOING Tests\n~~~~~~~~~~~\n\n#. DOING Unit Tests\n\n   #. DONE Old Implementation\n\n   #. TODO Update with the latest code\n\nDOING Deployment Tests\n~~~~~~~~~~~~~~~~~~~~~~\n\n#. DONE Basic Implementation\n\n#. TODO Add more complex tests\n\nDONE Support for multiprocessing\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDONE Improve mutable logs `#2 <https://github.com/admirito/pymongowatch/issues/2>`__: add a unique ID for each operation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTODO Documentation\n~~~~~~~~~~~~~~~~~~\n\n#. DONE Add a README\n\n#. TODO Add Sphinx generated documents\n\n#. TODO Create an online API reference\n\nAbout\n-----\n\nThe ``pymongowatch`` has developed mainly by `Mohammad\nRazavi <https://github.com/admirito/>`__.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/admirito/pymongowatch",
    "keywords": "mongo,mongodb,pymongo,log,logging",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymongowatch",
    "package_url": "https://pypi.org/project/pymongowatch/",
    "platform": null,
    "project_url": "https://pypi.org/project/pymongowatch/",
    "project_urls": {
      "Homepage": "https://github.com/admirito/pymongowatch"
    },
    "release_url": "https://pypi.org/project/pymongowatch/1.0.0/",
    "requires_dist": [
      "pymongo",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "A pymongo extension for auditing the database operations",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13329908,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1087f2f3ac5b311950a255b055fd520008c606c75aaacb30710ad17f2fd75e45",
          "md5": "385a6057fe829340ab967d40ecd9e2f3",
          "sha256": "e5bc0f92b49c0bb79154726ed2367750440f8e0d2ed9f11bfbd7b0c534e06ffd"
        },
        "downloads": -1,
        "filename": "pymongowatch-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "385a6057fe829340ab967d40ecd9e2f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25490,
        "upload_time": "2022-02-22T13:10:13",
        "upload_time_iso_8601": "2022-02-22T13:10:13.986981Z",
        "url": "https://files.pythonhosted.org/packages/10/87/f2f3ac5b311950a255b055fd520008c606c75aaacb30710ad17f2fd75e45/pymongowatch-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c5ec705b6a740b05653ff83d4c42c2b72cb1d4e7496dd4beeed6c923bd30d78",
          "md5": "1aa112e0d4d19afe298c28368469a2b5",
          "sha256": "58e18b337be04d8b26c1ab22158e3b768aa99434215dcf155c9eddae3cbe65df"
        },
        "downloads": -1,
        "filename": "pymongowatch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1aa112e0d4d19afe298c28368469a2b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32022,
        "upload_time": "2022-02-22T13:10:16",
        "upload_time_iso_8601": "2022-02-22T13:10:16.694132Z",
        "url": "https://files.pythonhosted.org/packages/8c/5e/c705b6a740b05653ff83d4c42c2b72cb1d4e7496dd4beeed6c923bd30d78/pymongowatch-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3478031b961d3097e3e1d4621530eb0e3831dd81a5c1b6c075fb899d3ad668f",
          "md5": "48eb112a689a367264f7f6620bbd6145",
          "sha256": "0d82ce34c4d1468ecaca151b29736eae1c569d84b6363a6d05abcd37f7fad24e"
        },
        "downloads": -1,
        "filename": "pymongowatch-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48eb112a689a367264f7f6620bbd6145",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42025,
        "upload_time": "2022-03-01T08:57:42",
        "upload_time_iso_8601": "2022-03-01T08:57:42.278504Z",
        "url": "https://files.pythonhosted.org/packages/f3/47/8031b961d3097e3e1d4621530eb0e3831dd81a5c1b6c075fb899d3ad668f/pymongowatch-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7080c1c729c173f9037ccefbd4647af575b8b6a0c6fb7048b72b9d6d07d1a561",
          "md5": "39eb5934e58d184af599f344d16764bf",
          "sha256": "5c693f48fe048b1564adfd46426e9e756161bb1d36ca3631f719e7dfbcc2fc7e"
        },
        "downloads": -1,
        "filename": "pymongowatch-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "39eb5934e58d184af599f344d16764bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49784,
        "upload_time": "2022-03-01T08:57:44",
        "upload_time_iso_8601": "2022-03-01T08:57:44.008758Z",
        "url": "https://files.pythonhosted.org/packages/70/80/c1c729c173f9037ccefbd4647af575b8b6a0c6fb7048b72b9d6d07d1a561/pymongowatch-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c87caab14191c957a9faaba5a89ed2efc63b763f501f4197af938d32b890991c",
          "md5": "9b9025e4b93527606b13063c56c7cf19",
          "sha256": "967dba9d4bfaa3258057b91ac123b53b20afa60ccaaccb14d46a498301071da1"
        },
        "downloads": -1,
        "filename": "pymongowatch-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b9025e4b93527606b13063c56c7cf19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47601,
        "upload_time": "2022-03-06T18:48:13",
        "upload_time_iso_8601": "2022-03-06T18:48:13.082303Z",
        "url": "https://files.pythonhosted.org/packages/c8/7c/aab14191c957a9faaba5a89ed2efc63b763f501f4197af938d32b890991c/pymongowatch-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cc673f715d0dc1cbb30f00a3fd968226588bb5570ecce6e92b6e4d366171ed7",
          "md5": "d71ed650721e37811a354139a321a395",
          "sha256": "a37a804572519437ad1830eceedc2d674effa1742d33108a5798749337919cf1"
        },
        "downloads": -1,
        "filename": "pymongowatch-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d71ed650721e37811a354139a321a395",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56102,
        "upload_time": "2022-03-06T18:48:15",
        "upload_time_iso_8601": "2022-03-06T18:48:15.353881Z",
        "url": "https://files.pythonhosted.org/packages/3c/c6/73f715d0dc1cbb30f00a3fd968226588bb5570ecce6e92b6e4d366171ed7/pymongowatch-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e560425587fd8addafc3e727f9ac276737fea1b96665b655fadcabc81623b081",
          "md5": "554eb0f6d355963a63055fc1653c0432",
          "sha256": "9b653c9c2f3cb968fa1c29f73fcef75ffd54a372750a4a2c4acd5e46f0bfe211"
        },
        "downloads": -1,
        "filename": "pymongowatch-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "554eb0f6d355963a63055fc1653c0432",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 59105,
        "upload_time": "2022-03-29T06:34:08",
        "upload_time_iso_8601": "2022-03-29T06:34:08.022923Z",
        "url": "https://files.pythonhosted.org/packages/e5/60/425587fd8addafc3e727f9ac276737fea1b96665b655fadcabc81623b081/pymongowatch-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d80a79f00aa9e95836396ff989bf674f73cf3bdccdea18edde4eee4e7fc1f46c",
          "md5": "01206906095befad540c12ed7484687a",
          "sha256": "c6634465fc3624b8562b5ca392b703a6ffbc31631cbe297ed37959f50e85b702"
        },
        "downloads": -1,
        "filename": "pymongowatch-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "01206906095befad540c12ed7484687a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66503,
        "upload_time": "2022-03-29T06:34:11",
        "upload_time_iso_8601": "2022-03-29T06:34:11.046356Z",
        "url": "https://files.pythonhosted.org/packages/d8/0a/79f00aa9e95836396ff989bf674f73cf3bdccdea18edde4eee4e7fc1f46c/pymongowatch-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e560425587fd8addafc3e727f9ac276737fea1b96665b655fadcabc81623b081",
        "md5": "554eb0f6d355963a63055fc1653c0432",
        "sha256": "9b653c9c2f3cb968fa1c29f73fcef75ffd54a372750a4a2c4acd5e46f0bfe211"
      },
      "downloads": -1,
      "filename": "pymongowatch-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "554eb0f6d355963a63055fc1653c0432",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 59105,
      "upload_time": "2022-03-29T06:34:08",
      "upload_time_iso_8601": "2022-03-29T06:34:08.022923Z",
      "url": "https://files.pythonhosted.org/packages/e5/60/425587fd8addafc3e727f9ac276737fea1b96665b655fadcabc81623b081/pymongowatch-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d80a79f00aa9e95836396ff989bf674f73cf3bdccdea18edde4eee4e7fc1f46c",
        "md5": "01206906095befad540c12ed7484687a",
        "sha256": "c6634465fc3624b8562b5ca392b703a6ffbc31631cbe297ed37959f50e85b702"
      },
      "downloads": -1,
      "filename": "pymongowatch-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "01206906095befad540c12ed7484687a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 66503,
      "upload_time": "2022-03-29T06:34:11",
      "upload_time_iso_8601": "2022-03-29T06:34:11.046356Z",
      "url": "https://files.pythonhosted.org/packages/d8/0a/79f00aa9e95836396ff989bf674f73cf3bdccdea18edde4eee4e7fc1f46c/pymongowatch-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}