{
  "info": {
    "author": "Thomas Weholt",
    "author_email": "thomas@weholt.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Utilities"
    ],
    "description": "Photofile\n=========\n\nVersion : 0.1.0\nAuthor : Thomas Weholt <thomas@weholt.org>\nLicense : GPL v3.0\nWWW : https://bitbucket.org/weholt/django-photofile\nStatus : Experimental\n\n\nAbout\n-----\n* Templatetags for thumbnail generation, supports automatic rotation based on EXIF.Orientation.\n* Planned routines for metadata handling (EXIF/IPTC/XMP).\n\nHow\n---\n<img src=\"{% generate_thumbnail imagefile 100x100 crop %}\"/>\n\nProvides a templatetag called generate_thumbnail which takes two or three parameters:\n\nParam #1 : an object (imagefile), like a model instance, with a property/field called unique_filename, complete_filename or filename.\nPhotofile will check in that order.\n\nParam #2: resolution, specified as <width>x<height>, like 320x280.\n\nParam #3: optional \"crop\" - which will enforce cropping of the photo.\n\nThe thumbnail will be written in a dir called \"thumbs\" in your STATICFILES_DIRS or STATIC_ROOT. If no dir exists\ncalled thumbs, it will be created.\n\nThe generated thumbnail will be named <filename>_<width>x<height>.<extension>. When cropping is used it will be named\n<filename>_<width>x<height>_crop.<extension>. For instance, thumbnail for test.jpg in resolution 200x300 will be named\ntest_200x300.jpg.\n\nPhotofile will try to use caching if enabled, but it caches the url to the thumbnail, not the image itself so it's not\nvery efficient yet.\n\nNB! It's highly recommended to have some way of ensuring that the filename given to photofile is unique. That's why it will\nlook for a property called unique_filename first. \n\nWhy another thumbnail app for django?\n-------------------------------------\nI've looked at sorl-thumbnail and others, and initially I wanted to use an existing project, but none of them supported\nautomatic rotation based on EXIF.Orientation.\n\nInstallation\n------------\nAlternative a) pip install django-photofile.\nAlternative b) download source, unpack and do python setup.py install.\nAlternative c) hg clone https://bitbucket.org/weholt/django-photofile and do python setup.py install.\n\nUsage\n-----\nIn settings.py:\n1. Add 'photofile' to your INSTALLED_APPS.\n2. Set up caching if you want.\n3. Add a dir to your STATICFILES_DIRS or set STATIC_ROOT.\n\nIn your template:\n{% load photofile_tags %}\n\n<img src=\"{% generate_thumbnail imagefile 200x300 %}\"/>\nor\n<img src=\"{% generate_thumbnail imagefile 100x100 crop %}\"/>\n\nWhere imagefile is an object with at a property/field called:\na) unique_filename or\nb) complete_filename or\nc) filename\n\nResolution is specified as <width>x<height>, for instance 640x480 and if you want to crop the photo add crop as shown in\nthe example over.\n\nRequirements\n------------\n* django\n* PIL",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/weholt/django-photofile",
    "keywords": "photo thumbnail generation django metadata",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Photofile",
    "package_url": "https://pypi.org/project/Photofile/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Photofile/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/weholt/django-photofile"
    },
    "release_url": "https://pypi.org/project/Photofile/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Templatetags for thumbnail generation, with automatic rotation based on EXIF.Orientation.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 784905,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4592870d2cb64b835693b1a1844a6530cf7bb48a0ba96f18e40a58565bbfa005",
          "md5": "e6f34c2a59156cb67e235d29069f7c0c",
          "sha256": "4e0c4b47ef558be1b963462efdaee64d73633d2873dd456d0ebe4d36c04220e4"
        },
        "downloads": -1,
        "filename": "Photofile-0.1.0.zip",
        "has_sig": false,
        "md5_digest": "e6f34c2a59156cb67e235d29069f7c0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21407,
        "upload_time": "2011-05-09T15:58:50",
        "upload_time_iso_8601": "2011-05-09T15:58:50.168268Z",
        "url": "https://files.pythonhosted.org/packages/45/92/870d2cb64b835693b1a1844a6530cf7bb48a0ba96f18e40a58565bbfa005/Photofile-0.1.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4592870d2cb64b835693b1a1844a6530cf7bb48a0ba96f18e40a58565bbfa005",
        "md5": "e6f34c2a59156cb67e235d29069f7c0c",
        "sha256": "4e0c4b47ef558be1b963462efdaee64d73633d2873dd456d0ebe4d36c04220e4"
      },
      "downloads": -1,
      "filename": "Photofile-0.1.0.zip",
      "has_sig": false,
      "md5_digest": "e6f34c2a59156cb67e235d29069f7c0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21407,
      "upload_time": "2011-05-09T15:58:50",
      "upload_time_iso_8601": "2011-05-09T15:58:50.168268Z",
      "url": "https://files.pythonhosted.org/packages/45/92/870d2cb64b835693b1a1844a6530cf7bb48a0ba96f18e40a58565bbfa005/Photofile-0.1.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}