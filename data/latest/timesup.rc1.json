{
  "info": {
    "author": null,
    "author_email": "Bobronium <appkiller16@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# timesup\n\nðŸš§ There's no source code available yet. Stay tuned.\n\nLibrary that handles all boilerplate when it comes to measuring performance and showcasing the difference between results.\n---\n\n### Why?\nI was tired of writing benchmarks that not only measured performance, but also output it in an accessible and intuitive way ([like this one](https://github.com/Bobronium/fastenum/tree/master/benchmark)), but also easy to reproduce.\nSo I decided to abstract all that away so the only thing left is to write the actual code you want to measure.\n\nI believe that by making benchmarking more accessible (and fun), I can create incentive to build faster software. \n\n\n### Features\n- Output is a Python code that contains the benchmark itself and ready to be published\n- Effortless comparisons of results\n- Compare current implementation to one in any given git revision\n- Compare interpreted CPython code to compiled code it produces via cython or mypyc\n- Profiling support for expressions\n- HTML output for viewing individual profiling results by expanding expressions\n- Automatically selects the appropriate number of runs and repeats, if they weren't provided\n- Out-of-the-box support for multiline expressions\n\n\n## Showcase \n###### All snippets are self-contained\n### Comparing within the same process \n`cat benchmark.py`\n```py\nimport copy\nimport duper\nimport timesup\n\n@timesup.it(number=100000, repeats=3)\ndef duper_vs_deepcopy():\n    x = {\"a\": 1, \"b\": [(1, 2, 3), (4, 5, 6)], \"c\": []}  # i\n    copy.deepcopy(x)  # t deepcopy\n    dup = duper.Duper(x)  # t duper_init deepcopy\n    dup.deep()  # t duper deepcopy\n```\n`python benchmark.py`\n```py\nimport copy\nimport duper\nimport timesup\n\n@timesup.it(number=100000, repeats=3)\ndef reconstruction():\n    x = {\"a\": 1, \"b\": [(1, 2, 3), (4, 5, 6)], \"c\": []} \n    copy.deepcopy(x)        # ~0.00643 ms (deepcopy)\n    dup = duper.Duper(x)    # ~0.00009 ms (duper_init): 69.44 times faster than deepcopy\n    dup.deep()              # ~0.00014 ms (duper): 44.76 times faster than deepcopy\n```\n\n### Interpreted vs compiled code\n<details>\n<summary>cat fib.py</summary>\n\n```py\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)\n```\n`mypyc fib.py`\n```\nbuilding 'compiled_test' extension\n...\ncopying build/lib.macosx-12.0-arm64-cpython-310/fib.cpython-310-darwin.so -> \n```\n</details>\n\n`cat benchmark.py`\n```py\nimport timesup\nfrom fib import fib\n\n@timesup.compare(to_interpreted=True)\ndef cpython_vs_mypyc():\n    fib(32)\n```\n`python benchmark.py`\n```python\nimport timesup\nfrom fib import fib\n\n@timesup.compare(to_interpreted=True)\ndef cpython_vs_mypyc():\n    fib(32)     # ~510.73292 ms (interpreted)\n    #|_________ # ~21.72464 ms (compiled): 23.51 times faster than interpreted\n```\n\n\n### Existing vs new code\nConsider you're trying to improve performance of `app.used_to_be_slow` function.\n\nIt's crucial to have a baseline that you can compare your changes to.\n\nBy allowing to pass a target revision that changes need to be compared to, `timesup`:\n- removes the need to capture the baseline beforehand\n- since baseline is calculated each time automatically, you're not limited to the input you've got your baseline results with\n- creates a perfect code snippet to include in PR with the changes âœ¨\n- this snipped can be run by any of reviewers without them needing to manually download any benchmarks, measuring the baseline and testing the results\n\n\n`cat benchmark.py`\n```py\nimport timesup\nfrom app import used_to_be_slow\n\n@timesup.compare(to_revision=\"main\")\ndef measure_improvement():\n    used_to_be_slow()\n```\n`python benchmark.py`\n```python\nimport timesup\nfrom app import used_to_be_slow\n\n@timesup.compare(to_revision=\"main\")\ndef measure_improvement():\n    used_to_be_slow()     # ~0.00106 ms (34dc8225)\n    #|___________________ # ~0.00035 ms (changes): 2.99 times faster than 34dc8225 \n```\n\n### ðŸš§ Status\n\nIf you have any feedback, you can [open the issue](https://github.com/Bobronium/timesup/issues), or  contact me directly via [bobronium@gmail.com](mailto:bobronium@gmail.com) or [Telegram](https://t.me/Bobronium).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "timesup",
    "package_url": "https://pypi.org/project/timesup/",
    "platform": null,
    "project_url": "https://pypi.org/project/timesup/",
    "project_urls": {
      "Documentation": "https://github.com/Bobronium/timesup#readme",
      "Issues": "https://github.com/Bobronium/timesup/issues",
      "Source": "https://github.com/Bobronium/timesup"
    },
    "release_url": "https://pypi.org/project/timesup/0.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": null,
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16527804,
  "releases": {
    "0.0.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d04d4cccafe51e782124ae8fff3778a735a4d7fc37f94cd6fb194d38e6da52d8",
          "md5": "7cf33e75a8f51b56be9d9b001ebc61b9",
          "sha256": "c59896c43583f040eeeb6b39decfdbc18bc41b1f38ded1e3ddf1696c3d9ce15d"
        },
        "downloads": -1,
        "filename": "timesup-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cf33e75a8f51b56be9d9b001ebc61b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 3099,
        "upload_time": "2023-01-23T04:13:19",
        "upload_time_iso_8601": "2023-01-23T04:13:19.751999Z",
        "url": "https://files.pythonhosted.org/packages/d0/4d/4cccafe51e782124ae8fff3778a735a4d7fc37f94cd6fb194d38e6da52d8/timesup-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ff0cec993bbe50e4112a4044344b8471ed6d061f7f3c1bf75cc840ae0b68142e",
          "md5": "17044c68f389bd25bb62d0fb29fe61d7",
          "sha256": "09b35a81589219a37f5d026099c1bda58233b850173115035a52117673c8a0c0"
        },
        "downloads": -1,
        "filename": "timesup-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "17044c68f389bd25bb62d0fb29fe61d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1174473,
        "upload_time": "2023-01-23T04:13:23",
        "upload_time_iso_8601": "2023-01-23T04:13:23.592927Z",
        "url": "https://files.pythonhosted.org/packages/ff/0c/ec993bbe50e4112a4044344b8471ed6d061f7f3c1bf75cc840ae0b68142e/timesup-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d04d4cccafe51e782124ae8fff3778a735a4d7fc37f94cd6fb194d38e6da52d8",
        "md5": "7cf33e75a8f51b56be9d9b001ebc61b9",
        "sha256": "c59896c43583f040eeeb6b39decfdbc18bc41b1f38ded1e3ddf1696c3d9ce15d"
      },
      "downloads": -1,
      "filename": "timesup-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7cf33e75a8f51b56be9d9b001ebc61b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 3099,
      "upload_time": "2023-01-23T04:13:19",
      "upload_time_iso_8601": "2023-01-23T04:13:19.751999Z",
      "url": "https://files.pythonhosted.org/packages/d0/4d/4cccafe51e782124ae8fff3778a735a4d7fc37f94cd6fb194d38e6da52d8/timesup-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "ff0cec993bbe50e4112a4044344b8471ed6d061f7f3c1bf75cc840ae0b68142e",
        "md5": "17044c68f389bd25bb62d0fb29fe61d7",
        "sha256": "09b35a81589219a37f5d026099c1bda58233b850173115035a52117673c8a0c0"
      },
      "downloads": -1,
      "filename": "timesup-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "17044c68f389bd25bb62d0fb29fe61d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 1174473,
      "upload_time": "2023-01-23T04:13:23",
      "upload_time_iso_8601": "2023-01-23T04:13:23.592927Z",
      "url": "https://files.pythonhosted.org/packages/ff/0c/ec993bbe50e4112a4044344b8471ed6d061f7f3c1bf75cc840ae0b68142e/timesup-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}