{
  "info": {
    "author": "Antonio Di Mariano",
    "author_email": "antonio.dimariano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![CircleCI](https://circleci.com/gh/antoniodimariano/websites_metrics_collector/tree/master.svg?style=svg&circle-token=809ef5a8af2efd28ede2d0385c31666146570ac5)](https://circleci.com/gh/antoniodimariano/websites_metrics_collector/tree/master)\n# Websites Metrics Collector\n\n#### Author: Antonio Di Mariano - antonio.dimariano@gmail.com\n\n# Description\n\nThis service is part of the Websites Monitoring Application, a small distributed application that periodically produces and collects metrics about the availability of one or more websites.\nThis service is responsible for fetching and collecting the information from a list of URLs. The information collected is\n\n* HTTP Status returned\n* HTTP response time\n* regexp pattern that is expected to be found on the HTML content\n\nFor each record, a message is produced to an Apache Kafka Topic. This service exposes a REST API Service with a `POST`\nmethod to accept a list of URLs to fetch and process.\n\n\n## Infra Requirements\n\nThis service requires an Apache Kafka Broker with the Schema Registry and AVRO support. \nIn the `terraform` directory you will find the necessary scripts to create a token and a schema registry on Aiven ( https://aiven.com )\n\nIf you want to automate the creation of topics and schemas, you can use Terraform. Otherwise, you can do it yourself from the console.\n\n### Steps to follow to use terraform:\n\n1. Install terraform (https://www.terraform.io/downloads.html)\n2. Edit the terraform.tfvars. You will need an API key from the Aiven console. Please follow instructions in https://help.aiven.io/en/articles/2059201-authentication-tokens to paste into the terraform.tfvars file. \n\nthen run \n```shell\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n(\"init\" sets up the working directory and downloads the Aiven provider, \"plan\" shows you what changes will be made and \"apply\" actually makes the changes.)\nFor the full documentation of Aiven Terraform go https://github.com/aiven/terraform-provider-aiven/blob/master/docs/index.md. \nGo here for a lot of examples https://github.com/aiven/terraform-provider-aiven/tree/master/examples\n\n\n###  Manually create your own Avro Schema\n\n\nThe default topic `websites_metrics` has the following schemas \n\n`websites_metrics-values`\n\n```json\n{\n    \"type\": \"record\",\n    \"name\": \"example\",\n    \"namespace\": \"example\",\n    \"fields\": [\n        {\n            \"type\": \"string\",\n            \"name\": \"url\",\n            \"doc\": \"The checked URL\"\n        },\n        {\n            \"type\": \"int\",\n            \"name\": \"http_status\",\n            \"doc\": \"The HTTP status \"\n        },\n        {\n            \"type\": \"float\",\n            \"name\": \"elapsed_time\",\n            \"doc\": \"The elapsed_time of the request \"\n        },\n        {\n            \"type\": \"boolean\",\n            \"name\": \"pattern_verified\",\n            \"doc\": \"\"\n        }\n    ],\n    \"doc\": \"example\"\n}\n```\n\n`websites_metrics-key`\n\n```json\n{\n    \"doc\": \"example\",\n    \"fields\": [\n        {\n            \"name\": \"service_name\",\n            \"type\": \"string\"\n        }\n    ],\n    \"name\": \"example\",\n    \"namespace\": \"example\",\n    \"type\": \"record\"\n}\n```\n\n\n\n# Requirements\n\n* Python >=3.8\n\n# Run\n\nIf you want to run from the source code, go to the directory websites_metrics_collector and run `python main`\n\nIf you want to use it as package (suggested method) install pip3 install websites_metrics_collector\n\nThen\n\n1. Set the ENV variables as show in this README.md\n2. Then use it this way\n\n```python\ndef start_service():\n    from websites_metrics_collector.main import start\n    start()\n```\n\n\n# Dependencies\n\n* requests==2.26.0\n* confluent-kafka-producers-wrapper==0.0.6  ( More information on https://github.com/antoniodimariano/confluent_kafka_producers_wrapper )\n* aiohttp==3.7.4.post0\n\n# Run test\n\n**NOTE**: for simplicity, I am assuming you have a running Kafka broker for testing purposes\n\n\n`python -m unittest tests/test_driver_class.py`\n\n`python -m unittest test/test_fetching_info_from_websites.py`\n\n`python -m unittest test/test_kafka_producer.py`\n\n`python -m unittest test/test_patterns_in_text.py`\n\n`python -m unittest test/test_rest_server.py`\n\n**NOTE** In order to run the `test_rest_api` you have to start the service first\n\n\n\n## Rest APIs\n\n# Method to get metrics from a list of URLs a\n\n* **POST http://SERVER\\_URI:SERVER\\_PORT/api/v1/websites_metrics**\n\n### Header Fields\n\n| HEADER FIELD  | VALUE                                                                                    |\n|---------------|------------------------------------------------------------------------------------------|\n| Content-Type  | Required. application/json                                                               |\n\n### Payload Fields\n\nA concatenated list with the following format\n`[['http://urltofetch.com'],['optional 1st pattern to verify in the html','optional 2nd pattern to verify in the html',''optional Nth pattern to verify in the html']]`\n\nExample\n\n```json\n[\n  [\n    \"http://cloudbased.me\",\n    [\n      \"Microservices\",\n      \"Antonio\"\n    ]\n  ],\n  [\n    \"http://ferrari.com\",\n    [\n      \"ferrari\",\n      \"italia\"\n    ]\n  ]\n]\n```\n\n### Responses\n\n* HTTP Status Code : 201\n\n```json\n{\n  \"urls\": [\n    [\n      \"http://cloudbased.me\",\n      [\n        \"Microservices\",\n        \"Antonio\"\n      ]\n    ],\n    [\n      \"http://ferrari.com\",\n      [\n        \"ferrari\",\n        \"italia\"\n      ]\n    ]\n  ],\n  \"submitted\": true\n}\n```\n\n* HTTP Status Code : 400 Bad or Wrong payload\n\nResponse:\n\n```json\n{\n  \"message\": \"Bad format! You need to send me a list of URLS [['http://urltofetch.com'],['optional 1st pattern to verify in the html','optional 2nd pattern to verify in the html',''optional Nth pattern to verify in the html']]. See the example.\",\n  \"example\": [\n    [\n      \"http://cloudbased.me\",\n      [\n        \"Microservices\",\n        \"Antonio\"\n      ]\n    ],\n    [\n      \"http://ferrari.com\",\n      [\n        \"ferrari\",\n        \"italia\"\n      ]\n    ],\n    [\n      \"http://motoguzzi.com\",\n      [\n        \"italia\"\n      ]\n    ]\n  ]\n}\n```\n\n* HTTP Status Code : 403 An error occurred.\n\nResponse\n\n```json\n{\n  \"message\": \"An Error occurred and the request or the payload cannot be processed. =..= No squealing, remember that it's all in your head =..=\"\n}\n```\n\n\n# Service ENV configuration\n\nIf you are using a Broker that uses `SSL`, like Aiven.com, you need to download the following certificates files and\ncopy them to a folder\n\n* Access Key\n* Access Certificate\n* CA Certificate\n\nfor more information about SSL and Kafka please read https://docs.confluent.io/3.0.0/kafka/ssl.html\n\n| ENV Variable  | VALUE | DESCRIPTION                                                                       |\n|---------------|------|------------------------------------------------------------------------------------|\n| SERVICE_HOST    | string   | Optional. The hostname where to bind the REST server. The default value is `0.0.0.0`  |\n| SERVICE_LISTEN_PORT    | string   | Optional. The port where to bind the REST server. The default value is `8080`  |\n| brokers    | string   | Required. The FQDN of the Apache Kafka Brokers.|\n| schema_registry    | string   | Required. The FQDN of the Service Registry.|\n| ssl_ca_location    | string   | Required. he relative path to your ca.pem|\n| ssl_certificate_location    | string   | Required. The relative path to your service.cert|\n| ssl_key_location    | string   | Required. The relative path to your service.key |\n| security_protocol    | string   | Required. SSL.|\n| topic_for_producing_metrics    | string   | Optional. The Kafka Avro Topic where to produce messages to. The default value is `websites_metrics` |\n| logging_level    | string   | Optional. The level of logging to use for the built-in `logging` package. The default is `logging.INFO`  |\n\n**Example of mandatory ENV variables to use**\n\n* brokers=kafka-xxx-yyy-abc.com:12026\n* schema_registry=https://user:password@kafka-xxx-yyy-abc.com:12029\n* ssl_ca_location=configuration/ca.pem\n* ssl_certificate_location=configuration/service.cert\n* ssl_key_location=configuration/service.key\n* security_protocol=SSL\n* persistence_conf=postgres://user:password@mydbhost.com:12024/metrics?sslmode=require\n\nIf your broker requires SASL authentication, like Confluent Cloud, these are the ENV variables to include\n\n| ENV Variable  | VALUE | DESCRIPTION                                                                       |\n|---------------|------|------------------------------------------------------------------------------------|\n| SERVICE_HOST    | string   | Optional. The hostname where to bind the REST server. The default value is `0.0.0.0`  |\n| SERVICE_LISTEN_PORT    | string   | Optional. The port where to bind the REST server. The default value is `8080`  |\n| brokers    | string   | Required. The FQDN of the Apache Kafka Brokers.|\n| schema_registry    | string   | Required. The FQDN of the Service Registry.|\n| sasl_username    | string   | Required. YOUR USERNAME HERE|\n| sasl_password    | string   | Required. YOUR PASSWORD HERE|\n| schema_registry_basic_auth_user_info    | string   | Required. AUTH HERE |\n| schema_registry_basic_auth_credentials_source    | string   | Required. USER_INFO.|\n| sasl_mechanisms    | string   | Required. PLAIN.|\n| security_protocol    | string   | Required. SASL_SSL.|\n| persistence_conf    | string   | Required. The full string for connecting to your PostgreSQL database.|\n| topic_for_producing_metrics    | string   | Optional. The Kafka Avro Topic where to produce messages to. The default value is `websites_metrics` |\n| logging_level    | string   | Optional. The level of logging to use for the built-in `logging` package. The default is `logging.INFO`  |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antoniodimariano/websites_metrics_collector",
    "keywords": "",
    "license": "License :: OSI Approved :: Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "websites-metrics-collector",
    "package_url": "https://pypi.org/project/websites-metrics-collector/",
    "platform": "",
    "project_url": "https://pypi.org/project/websites-metrics-collector/",
    "project_urls": {
      "Homepage": "https://github.com/antoniodimariano/websites_metrics_collector"
    },
    "release_url": "https://pypi.org/project/websites-metrics-collector/0.0.1/",
    "requires_dist": [
      "requests",
      "confluent-kafka-producers-wrapper",
      "aiohttp"
    ],
    "requires_python": ">=3.6",
    "summary": "An application that collects metrics from websites and produce results as messages to Kafka",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11659373,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ba183e9d5471b0c756dff58577a54cf36de9f045f24b67083188146c8fd4e18",
          "md5": "fc3a25eb78b9eb6201a0d7e45770eb08",
          "sha256": "2e08b3c0522f5b847bb33366880ff85ca56a7893b7152572c3850ab99d576539"
        },
        "downloads": -1,
        "filename": "websites_metrics_collector-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc3a25eb78b9eb6201a0d7e45770eb08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18463,
        "upload_time": "2021-10-07T20:55:38",
        "upload_time_iso_8601": "2021-10-07T20:55:38.785433Z",
        "url": "https://files.pythonhosted.org/packages/1b/a1/83e9d5471b0c756dff58577a54cf36de9f045f24b67083188146c8fd4e18/websites_metrics_collector-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f12c48d38fe59f2fc8a649faab1367717aa7aa15a113ff605eff239290547727",
          "md5": "6bbe6da2bbb1b4ff7d4af03539fbd01c",
          "sha256": "cc426e9edde7e89d482daf0284e309760948991b9876136928dddea840dae7ce"
        },
        "downloads": -1,
        "filename": "websites_metrics_collector-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6bbe6da2bbb1b4ff7d4af03539fbd01c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19064,
        "upload_time": "2021-10-07T20:55:40",
        "upload_time_iso_8601": "2021-10-07T20:55:40.313428Z",
        "url": "https://files.pythonhosted.org/packages/f1/2c/48d38fe59f2fc8a649faab1367717aa7aa15a113ff605eff239290547727/websites_metrics_collector-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ba183e9d5471b0c756dff58577a54cf36de9f045f24b67083188146c8fd4e18",
        "md5": "fc3a25eb78b9eb6201a0d7e45770eb08",
        "sha256": "2e08b3c0522f5b847bb33366880ff85ca56a7893b7152572c3850ab99d576539"
      },
      "downloads": -1,
      "filename": "websites_metrics_collector-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fc3a25eb78b9eb6201a0d7e45770eb08",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18463,
      "upload_time": "2021-10-07T20:55:38",
      "upload_time_iso_8601": "2021-10-07T20:55:38.785433Z",
      "url": "https://files.pythonhosted.org/packages/1b/a1/83e9d5471b0c756dff58577a54cf36de9f045f24b67083188146c8fd4e18/websites_metrics_collector-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f12c48d38fe59f2fc8a649faab1367717aa7aa15a113ff605eff239290547727",
        "md5": "6bbe6da2bbb1b4ff7d4af03539fbd01c",
        "sha256": "cc426e9edde7e89d482daf0284e309760948991b9876136928dddea840dae7ce"
      },
      "downloads": -1,
      "filename": "websites_metrics_collector-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6bbe6da2bbb1b4ff7d4af03539fbd01c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19064,
      "upload_time": "2021-10-07T20:55:40",
      "upload_time_iso_8601": "2021-10-07T20:55:40.313428Z",
      "url": "https://files.pythonhosted.org/packages/f1/2c/48d38fe59f2fc8a649faab1367717aa7aa15a113ff605eff239290547727/websites_metrics_collector-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}