{
  "info": {
    "author": "Xia Tian",
    "author_email": "xsumner@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# FireHole  :fire::hole:\n\n[中文](https://github.com/xSumner/firehole/tree/master/doc/doc_zh/README.md) | docker\n\nFireHole is a Python package customized for data analysts.\n\n- Website (intranet): \n- Source: [https://github.com/xSumner/firehole]()\n- Bug reports: [https://github.com/xSumner/firehole/issues]()\n\n\n\n## Installation\n\n```\npip install firehole\n```\n\nFireHole requires Python 3.4 or later\n\n\n\n## Quick Start\n\n### Introducing FireHole\n\n```python\nimport firehole as fh\n# FireHole is based on numpy, so we also import it\nimport numpy as np\n```\n\n\n\n### Scoring  of Comprehensive System\n\nEvaluate and score systems according to the following methods:\n\n- Analytic Hierarchy Process (AHP)\n- Entropy Weight Method\n- Coefficient of Variation Method\n- ......\n\n#### 1. AHP\n\n```python\nimport json\nimport firehole as fh\n\nmodel = {\n    \"name\": \"Sample Model\",\n    \"method\": \"approximate\",\n    \"criteria\": [\"critA\", \"critB\", \"critC\"],\n    \"subCriteria\": {\n        \"critA\": [\"subCritA\", \"subCritB\"]\n    },\n    \"alternatives\": [\"altA\", \"altB\", \"altC\"],\n    \"preferenceMatrices\": {\n        \"criteria\": [\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]\n        ],\n        \"subCriteria:critA\": [\n            [1, 1],\n            [1, 1]\n        ],\n        \"alternatives:subCritA\": [\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]\n        ],\n        \"alternatives:subCritB\": [\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]\n        ],\n        \"alternatives:critB\": [\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]\n        ],\n        \"alternatives:critC\": [\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]\n        ]\n    }\n}\n\nahp_model = fh.parse(model)\npriorities = ahp_model.get_priorities()\n```\n\n\n\n#### 2. Entropy Weight Method\n\n```python\n>>> li = [[100, 90, 100, 84, 90, 100, 100, 100, 100],\n          [100, 100, 78.6, 100, 90, 100, 100, 100, 100],\n          [75, 100, 85.7, 100, 90, 100, 100, 100, 100],\n          [100, 100, 78.6, 100, 90, 100, 94.4, 100, 100],\n          [100, 90, 100, 100, 100, 90, 100, 100, 80],\n          [100, 100, 100, 100, 90, 100, 100, 85.7, 100],\n          [100, 100, 78.6, 100, 90, 100, 55.6, 100, 100],\n          [87.5, 100, 85.7, 100, 100, 100, 100, 100, 100],\n          [100, 100, 92.9, 100, 80, 100, 100, 100, 100],\n          [100, 90, 100, 100, 100, 100, 100, 100, 100],\n          [100, 100, 92.9, 100, 90, 100, 100, 100, 100]]\n>>> # convert list into numpy array\n>>> li = np.array(li)\n>>> # calculation by entropy method\n>>> entropy = fh.Entropy()\n>>> rlt = entropy.entropy(li)\n>>> \n>>> print(rlt['entropy'])\n[0.9912947 0.99752157 0.98629816 0.99731237 0.9946718 0.99902487 0.95993528 0.9978992 0.99556829]\n>>> print(rlt['weight'])\n[0.10817562 0.03079802 0.17026463 0.03339765 0.06621039 0.0121174 0.49786068 0.02610541 0.0550702 ]\n>>> print(rlt['score'])\n[1.09856723 0.31796876 1.4625885 0.35533899 0.59410402 0.1305623 4.91581354 0.27875173 0.58096578]\n```\n\n\n\n#### 3. Coefficient of Variation Mehtod\n\n```python\n>>> a = [[3051, 20.4, 30.1, 0.5250, 31.1, 9.5, 70.1, 82.8, 6, 2],\n         [20763, 0.1, 84.1, 0.9969, 100, -1.7, 78.6, 92.9, 28, 1.3],\n         [2407, 16.7, 39.9, 0.5504, 38.8, 15.6, 65.6, 85.7, 7, 0.2],\n         [5121, 24.9, 38.4, np.nan, 60.6, 16.5, 69.5, 74.6, 18, 0.9],\n         [16861, np.nan, np.nan, 0.9769, 91, 15.7, 77.9, 95.7, 44, 4.6],\n         [23592, 1.9, 60.3, 0.9473, 78.5, 2.1, 80, 99, 43, 1.8],\n         [4317, 12.8, 60.3, np.nan, 56.4, 4.4, 67.9, 99, 32, 3.5],\n         [13286, 5.8, 51.2, 0.8824, 80.4, 8.7, 72.6, 97.5, 60, 1.1],\n         [7699, 12.6, 42, 0.8120, 55.9, 20.5, 72.2, 86.4, 11, 0.5],\n         [3725, 20.6, 47.3, 0.6012, 56.8, 22.3, 68.6, 94.8, 35, 0.6],\n         [25295, 0.2, 65.2, 0.9979, 100, 8.6, 77.3, 91.8, 39, 1.7],\n         [2945, 22.4, 51.1, 0.5843, 23, 11.5, 73.3, 91.1, 5, 4.2],\n         [5524, 9.6, 49.5, 0.4875, 21, 10.2, 68.9, 95, 21, 2.9],\n         [6594, 17.4, 54.7, 0.5658, 72.9, 14.8, 69.3, 84, 18, 1.5],\n         [3146, 17.3, 51.1, np.nan, 44.9, 17.2, 66.7, 53.7, np.nan, 2.1],\n         [8296, 4.2, 62.2, np.nan, 52.9, 15.9, 53.2, 84.6, 19, 0.6],\n         [22814, np.nan, np.nan, 0.9651, 76.9, 4.4, 79.1, 99, 90, 2.1],\n         [7450, 5.5, 68.6, 0.8021, 74, 22.4, 72.3, 90.8, 16, 1.2],\n         [29240, 1.8, 71.8, 0.9733, 76.8, 5.8, 76.8, 99, 81, 2.6],\n         [11728, 6, 65.6, 0.9849, 89.3, 11.7, 73.1, 96.7, 42, 2.7],\n         [6460, 8.3, 62.3, 0.7581, 80.1, 13.0, 67, 84.5, 12, 1.3],\n         [5706, 4.2, 49.3, 0.8921, 86.3, 20.5, 72.6, 92, 25, 2.4],\n         [6314, 16, 44, np.nan, 70.6, -4.3, 68.1, 99.5, 44, 4.3],\n         [4683, 14.5, 57, np.nan, 69, -6.4, 71.3, 98.2, 41, 3.5],\n         [12197, 4.3, 58, 0.9535, 74.6, -1.8, 74.1, 99, 23, 2.9],\n         [21214, 2.3, 71.5, np.nan, 75.2, 3.4, 78.2, 99, 52, 2.9],\n         [22026, 1.1, 44.2, 0.9717, 87.1, -0.7, 77.3, 99, 45, 3.4],\n         [20365, 2.8, 66.4, np.nan, 66.8, -0.1, 78.3, 98.3, 43, 5.5],\n         [22325, np.nan, np.nan, 0.9681, 89.2, 3.1, 78, 99, 50, 2.6],\n         [7543, 5.6, 61.6, 0.8089, 64.8, 0.6, 72.7, 99.7, 24, 2.3],\n         [5572, 19.5, 36.1, 0.6003, 55.7, -1.3, 70.2, 97.9, 23, 1.8],\n         [6180, 7.5, 55.7, np.nan, 77, -4.7, 66.7, 99.5, 41, 4.6],\n         [15960, 3.5, 25.1, 0.9239, 77.2, 0.1, 78.1, 97.4, 51, 4.2],\n         [20314, 1.8, 66.7, 0.9835, 89.4, 1.3, 77.3, 99, 50, 1.6],\n         [3130, 13.8, 48.4, 0.7388, 67.8, -6.3, 69.1, 99.6, 42, 4.5],\n         [21795, 3.2, 70.6, 0.9524, 84.7, 6.5, 78.3, 99, 76, 2.5],\n         [16084, np.nan, np.nan, 0.9148, 85.6, 7.9, 77.1, 99, 59, 2.1]]\n>>> a = np.array(a)\n>>> target = np.array([22930, 2, 63, 0.9580, 76, 4, 77, 97.5, 58, 2.5], dtype='float')\n>>> pos_neg = np.array([1, -1, 1, 1, 1, -1, 1, 1, 1, 1], dtype='float')\n>>> cov = fh.COV()\n>>> result = cov.comprehensive(data=a, target=target, pos_neg=pos_neg, decimals=2)\n>>> print(result)\n[ 0.35  3.3   0.25  0.3   0.63  1.18  0.64  0.62  0.32  0.33  2.36  0.45\n  0.46  0.4   0.3   0.39  0.81  0.43  1.04  0.64  0.43  0.52  0.25  0.28\n -0.03  0.98 -0.54 -9.31  0.85  2.12 -0.45  0.31 10.72  1.48  0.35  0.88\n  0.6 ]\n```\n\n\n\n### Keyword Extraction\n\nExtract keywords from text based on **Trie dicitonary data structure**.\n\n#### 1. Extract keywords\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_processor.add_keyword('Big Apple', 'New York')\n>>> keyword_processor.add_keyword('Bay Area')\n>>> keywords_found = keyword_processor.extract_keywords('I love Big Apple and Bay Area.')\n>>> keywords_found\n>>> # ['New York', 'Bay Area']\n```\n\n```python\nimport firehole as fh\nkeyword_processor = fh.KeywordProcessor()\nkeyword_processor.add_keyword('口号')\nkeyword_processor.add_keyword('横幅')\nkeywords_found = keyword_processor.extract_keywords('他边喊口号边走近了那个建筑，并拉起了横幅。')\nkeywords_found\n# ['口号', '横幅']\n```\n\n#### 2. Replace keywords\n\n```python\n>>> keyword_processor.add_keyword('New Delhi', 'NCR region')\n>>> new_sentence = keyword_processor.replace_keywords('I love Big Apple and new delhi.')\n>>> new_sentence\n>>> # 'I love New York and NCR region.'\n```\n\n#### 3. Case Sensitive example\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor(case_sensitive=True)\n>>> keyword_processor.add_keyword('Big Apple', 'New York')\n>>> keyword_processor.add_keyword('Bay Area')\n>>> keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.')\n>>> keywords_found\n>>> # ['Bay Area']\n```\n\n#### 4. Span of keywords extracted\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_processor.add_keyword('Big Apple', 'New York')\n>>> keyword_processor.add_keyword('Bay Area')\n>>> keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.', span_info=True)\n>>> keywords_found\n>>> # [('New York', 7, 16), ('Bay Area', 21, 29)]\n```\n\n#### 5. Get Extra information with keywords extracted\n\n```python\n>>> import firehole as fh\n>>> kp = fh.KeywordProcessor()\n>>> kp.add_keyword('Taj Mahal', ('Monument', 'Taj Mahal'))\n>>> kp.add_keyword('Delhi', ('Location', 'Delhi'))\n>>> kp.extract_keywords('Taj Mahal is in Delhi.')\n>>> # [('Monument', 'Taj Mahal'), ('Location', 'Delhi')]\n>>> # NOTE: replace_keywords feature won't work with this.\n```\n\n#### 6. No clean name for Keywords\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_processor.add_keyword('Big Apple')\n>>> keyword_processor.add_keyword('Bay Area')\n>>> keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.')\n>>> keywords_found\n>>> # ['Big Apple', 'Bay Area']\n```\n\n#### 7. Add Multiple Keywords simultaneously\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_dict = {\n>>>     \"java\": [\"java_2e\", \"java programing\"],\n>>>     \"product management\": [\"PM\", \"product manager\"]\n>>> }\n>>> # {'clean_name': ['list of unclean names']}\n>>> keyword_processor.add_keywords_from_dict(keyword_dict)\n>>> # Or add keywords from a list:\n>>> keyword_processor.add_keywords_from_list([\"java\", \"python\"])\n>>> keyword_processor.extract_keywords('I am a product manager for a java_2e platform')\n>>> # output ['product management', 'java']\n```\n\n#### 8. To Remove keywords\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_dict = {\n>>>     \"java\": [\"java_2e\", \"java programing\"],\n>>>     \"product management\": [\"PM\", \"product manager\"]\n>>> }\n>>> keyword_processor.add_keywords_from_dict(keyword_dict)\n>>> print(keyword_processor.extract_keywords('I am a product manager for a java_2e platform'))\n>>> # output ['product management', 'java']\n>>> keyword_processor.remove_keyword('java_2e')\n>>> # you can also remove keywords from a list/ dictionary\n>>> keyword_processor.remove_keywords_from_dict({\"product management\": [\"PM\"]})\n>>> keyword_processor.remove_keywords_from_list([\"java programing\"])\n>>> keyword_processor.extract_keywords('I am a product manager for a java_2e platform')\n>>> # output ['product management']\n```\n\n#### 9. To check Number of terms in KeywordProcessor\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_dict = {\n>>>     \"java\": [\"java_2e\", \"java programing\"],\n>>>     \"product management\": [\"PM\", \"product manager\"]\n>>> }\n>>> keyword_processor.add_keywords_from_dict(keyword_dict)\n>>> print(len(keyword_processor))\n>>> # output 4\n```\n\n#### 10. To check if term is present in KeywordProcessor\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_processor.add_keyword('j2ee', 'Java')\n>>> 'j2ee' in keyword_processor\n>>> # output: True\n>>> keyword_processor.get_keyword('j2ee')\n>>> # output: Java\n>>> keyword_processor['colour'] = 'color'\n>>> keyword_processor['colour']\n>>> # output: color\n```\n\n#### 11. Get all keywords in dictionary\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_processor.add_keyword('j2ee', 'Java')\n>>> keyword_processor.add_keyword('colour', 'color')\n>>> keyword_processor.get_all_keywords()\n>>> # output: {'colour': 'color', 'j2ee': 'Java'}\n```\n\n#### 12. To set or add characters as part of word characters\n\n```python\n>>> import firehole as fh\n>>> keyword_processor = fh.KeywordProcessor()\n>>> keyword_processor.add_keyword('Big Apple')\n>>> print(keyword_processor.extract_keywords('I love Big Apple/Bay Area.'))\n>>> # ['Big Apple']\n>>> keyword_processor.add_non_word_boundary('/')\n>>> print(keyword_processor.extract_keywords('I love Big Apple/Bay Area.'))\n>>> # []\n```\n\n\n\n### Text Similarity\n\nCalculate the similarity between different sentence.\n\n#### 1. BM25\n\n- OKapi BM25\n- BM25L\n- BM25+\n\n```python\n>>> import firehole as fh\n>>> corpus = [\"Hello there good man!\", \n              \"It is quite windy in London\", \n              \"How is the weather today?\"]\n>>> tokenized_corpus = [doc.split(\" \") for doc in corpus]\n>>> bm25 = fh.BM25_okapi(tokenized_corpus)\n<firehole.algorithms.similarity.rank_bm25.BM25Okapi at 0x13a49c88>\n>>> query = \"windy London\"\n>>> tokenized_query = query.split(\" \")\n>>> doc_scores = bm25.get_scores(tokenized_query)\n# array([0.    , 0.93729472, 0.    ])\n>>> bm25.get_top_n(tokenized_query, corpus, n=1)\n# ['It is quite windy in London']\n```\n\n```python\nimport firehole as fh\nimport jieba\ncorpus = [\"他手执横幅走了进来\", \n          \"他走了进来\", \n          \"横幅上写着很多的字\"]\ntokenized_corpus = [jieba.lcut(doc, cut_all=False, HMM=True) for doc in corpus]\nbm25 = fh.BM25Okapi(tokenized_corpus)\nquery = \"他有一个横幅\"\ntokenized_query = jieba.lcut(query, cut_all=False, HMM=True)\ndoc_scores = bm25.get_scores(tokenized_query)\nprint(doc_scores)\n# [0.04147104 0.02453117 0.01924653]\nbm25.get_top_n(tokenized_query, corpus, n=1)\n# ['他手执横幅走了进来']\n```\n\n\n\n#### 2. Simhash\n\nView simhash value:\n\n```python\nimport re\nimport firehole as fh\n\ndef get_features(s):\n    width = 3\n    s = s.lower()\n    s = re.sub(r'[^\\w]+', '', s)\n    return [s[i:i + width] for i in range(max(len(s) - width + 1, 1))]\n\ntext1 = 'How are you? I am fine. Thanks.'\ntext2 = 'How are u, I am fine. Thanks.'\ntext3 = 'How r u?I am fine. Thanks.'\n\nprint('%x' % fh.Simhash(get_features(text1)).value)\nprint('%x' % fh.Simhash(get_features(text2)).value)\nprint('%x' % fh.Simhash(get_features(text3)).value)\n```\n\n```python\nimport re\nimport firehole as fh\n\ndef get_features(s):\n    width = 3\n    s = re.sub(r'[^\\w]+', '', s)\n    return [s[i:i + width] for i in range(max(len(s) - width + 1, 1))]\n\ntext1 = '他手执横幅走了进来。'\ntext2 = '他走了进来。'\ntext3 = '横幅上写着很多的字'\n\nprint('%x' % fh.Simhash(get_features(text1)).value)\nprint('%x' % fh.Simhash(get_features(text2)).value)\nprint('%x' % fh.Simhash(get_features(text3)).value)\n# f8b6c362c7552669\n# fa377b62e7d9a81c\n# 98965516240442ee\n```\n\n\n\nGet distance of two simhash:\n\n```python\nimport re\nimport firehole as fh\n\nprint(fh.Simhash('aa').distance(fh.Simhash('bb')))\nprint(fh.Simhash('aa').distance(fh.Simhash('aa')))\n\nhash1 = fh.Simhash(u'I am very happy'.split())\nhash2 = fh.Simhash(u'I am very sad'.split())\nprint(hash1.distance(hash2))\n```\n\n```python\nimport re\nimport firehole as fh\n\nprint(fh.Simhash('政府').distance(fh.Simhash('大楼')))\nprint(fh.Simhash('政府').distance(fh.Simhash('政府')))\n\nhash1 = fh.Simhash(jieba.lcut(\"我很开心\", cut_all=False, HMM=True))\nhash2 = fh.Simhash(jieba.lcut(\"我很忧伤\", cut_all=False, HMM=True))\nprint(hash1.distance(hash2))\n```\n\n\n\nUse the SimhashIndex to query near duplicates objects in a very efficient way:\n\n```python\nimport re\nimport firehole as fh\n\ndef get_features(s):\n    width = 3\n    s = s.lower()\n    s = re.sub(r'[^\\w]+', '', s)\n    return [s[i:i + width] for i in range(max(len(s) - width + 1, 1))]\n\ndata = {\n    1: u'How are you? I Am fine. blar blar blar blar blar Thanks.',\n    2: u'How are you i am fine. blar blar blar blar blar than',\n    3: u'This is simhash test.',\n}\nobjs = [(str(k), fh.Simhash(get_features(v))) for k, v in data.items()]\nindex = fh.SimhashIndex(objs, k=3)\n\nprint(index.bucket_size())\n\ns1 = fh.Simhash(get_features(u\"How are you i am fine. blar blar blar blar blar thank\"))\nprint(index.get_near_dups(s1))\n\nindex.add(\"4\", s1)\nprint(index.get_near_dups(s1))\n```\n\n\n\n### Format Converter\n\n#### 1. ID converter (between 15 & 18 digits)\n\nConvert single ID number between 15 digits and 18 digits format:\n\n```python\nimport firehoe as fh\nconverter = fh.ConvertID()\n# ID number of 18 digits\ntest_id1 = \"130701199310302288\"\n# ID number of 15 digits\ntest_id2 = \"320311770706001\"\n# convert from 15 digits to 18 digits\nnew_18 = converter.up_to_eighteen(test_id2)\nprint(\"Convered to 18 digits: \", new_18)\n# convert from 18 digits to 15 digits\nnew_15 = converter.down_to_fifteen(test_id1)\nprint(\"Convered to 18 digits: \", new_18)\n```\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xSumner/firehole",
    "keywords": "Data Analysis,AHP",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "firehole",
    "package_url": "https://pypi.org/project/firehole/",
    "platform": "",
    "project_url": "https://pypi.org/project/firehole/",
    "project_urls": {
      "Homepage": "https://github.com/xSumner/firehole"
    },
    "release_url": "https://pypi.org/project/firehole/0.4.2/",
    "requires_dist": [
      "numpy (>=1.13.0)",
      "scipy (>=1.0.0)"
    ],
    "requires_python": ">=3",
    "summary": "FireHole (fh) is a Python package for Data Analyst.",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7613989,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c41bcfe71aa199d16a2c85ed4a879e03a29c3d8c4e6eb1ef77c81fcf787ecbdb",
          "md5": "ac3721fe4ed39a0db66c07daf6839d2a",
          "sha256": "87d6cfb5e1fe7c50fab58ccef7f1511cb50ece7cac3d1ee46bbe5ddc88547d9d"
        },
        "downloads": -1,
        "filename": "firehole-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac3721fe4ed39a0db66c07daf6839d2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 32874,
        "upload_time": "2020-06-22T10:32:04",
        "upload_time_iso_8601": "2020-06-22T10:32:04.241903Z",
        "url": "https://files.pythonhosted.org/packages/c4/1b/cfe71aa199d16a2c85ed4a879e03a29c3d8c4e6eb1ef77c81fcf787ecbdb/firehole-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "275890876825bd8460fe9e579dda694814b18c5066e4852876c09aee118bee47",
          "md5": "c52ce4c81af40828f6b80de759a83809",
          "sha256": "fcc8a9be38943eb61bc845c73331d697b82cec56c77c376b32bdc528adac429c"
        },
        "downloads": -1,
        "filename": "firehole-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c52ce4c81af40828f6b80de759a83809",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27763,
        "upload_time": "2020-06-22T10:32:06",
        "upload_time_iso_8601": "2020-06-22T10:32:06.832566Z",
        "url": "https://files.pythonhosted.org/packages/27/58/90876825bd8460fe9e579dda694814b18c5066e4852876c09aee118bee47/firehole-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c8af1d4b321d8416c7bc6fb451e029117c17d6dde60ed76cee55869c1002bf3",
          "md5": "9070d6e1c778405ee244dc4c6c61b8cf",
          "sha256": "eb57dfcbaca4a430d752b908a190c79e7db4059f9928c823b9d696864849084d"
        },
        "downloads": -1,
        "filename": "firehole-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9070d6e1c778405ee244dc4c6c61b8cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 32874,
        "upload_time": "2020-06-22T11:18:41",
        "upload_time_iso_8601": "2020-06-22T11:18:41.748818Z",
        "url": "https://files.pythonhosted.org/packages/7c/8a/f1d4b321d8416c7bc6fb451e029117c17d6dde60ed76cee55869c1002bf3/firehole-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98a2e6001842fdfc66ef4b02f8646eaeb6419ec2178669eb1e819fdc261e5be2",
          "md5": "0e2c0942fe2c021d87cf1b192305132e",
          "sha256": "d982d79f3c4c39ac8ee3cec2fecc9b6a47256ac32e9d2bf0187a14f2d0ee7fb2"
        },
        "downloads": -1,
        "filename": "firehole-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e2c0942fe2c021d87cf1b192305132e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27736,
        "upload_time": "2020-06-22T11:18:43",
        "upload_time_iso_8601": "2020-06-22T11:18:43.382877Z",
        "url": "https://files.pythonhosted.org/packages/98/a2/e6001842fdfc66ef4b02f8646eaeb6419ec2178669eb1e819fdc261e5be2/firehole-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3349df6fa2b1a98a0d4eb7fe3e239e0b42219e80646b730d48f36d7fe63dd25d",
          "md5": "81eb99ebd87ca777d63e249bcfe84112",
          "sha256": "55ecd9b23f1d907faafa9693ff595a83bab8cb88f50d08cae028c57538c2b5df"
        },
        "downloads": -1,
        "filename": "firehole-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81eb99ebd87ca777d63e249bcfe84112",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 34037,
        "upload_time": "2020-07-02T11:37:29",
        "upload_time_iso_8601": "2020-07-02T11:37:29.164408Z",
        "url": "https://files.pythonhosted.org/packages/33/49/df6fa2b1a98a0d4eb7fe3e239e0b42219e80646b730d48f36d7fe63dd25d/firehole-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d502f7871468b135a8a1638065c071ee671c573228c7f84e5113c4600c5476f0",
          "md5": "8614a51610d8d6fe7a2b66a8541487e0",
          "sha256": "331f9aae7b3b162b90e3d824492994bca498472cc7876e38885b1dbad13b0429"
        },
        "downloads": -1,
        "filename": "firehole-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8614a51610d8d6fe7a2b66a8541487e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 28751,
        "upload_time": "2020-07-02T11:37:33",
        "upload_time_iso_8601": "2020-07-02T11:37:33.578288Z",
        "url": "https://files.pythonhosted.org/packages/d5/02/f7871468b135a8a1638065c071ee671c573228c7f84e5113c4600c5476f0/firehole-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3349df6fa2b1a98a0d4eb7fe3e239e0b42219e80646b730d48f36d7fe63dd25d",
        "md5": "81eb99ebd87ca777d63e249bcfe84112",
        "sha256": "55ecd9b23f1d907faafa9693ff595a83bab8cb88f50d08cae028c57538c2b5df"
      },
      "downloads": -1,
      "filename": "firehole-0.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81eb99ebd87ca777d63e249bcfe84112",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 34037,
      "upload_time": "2020-07-02T11:37:29",
      "upload_time_iso_8601": "2020-07-02T11:37:29.164408Z",
      "url": "https://files.pythonhosted.org/packages/33/49/df6fa2b1a98a0d4eb7fe3e239e0b42219e80646b730d48f36d7fe63dd25d/firehole-0.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d502f7871468b135a8a1638065c071ee671c573228c7f84e5113c4600c5476f0",
        "md5": "8614a51610d8d6fe7a2b66a8541487e0",
        "sha256": "331f9aae7b3b162b90e3d824492994bca498472cc7876e38885b1dbad13b0429"
      },
      "downloads": -1,
      "filename": "firehole-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8614a51610d8d6fe7a2b66a8541487e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 28751,
      "upload_time": "2020-07-02T11:37:33",
      "upload_time_iso_8601": "2020-07-02T11:37:33.578288Z",
      "url": "https://files.pythonhosted.org/packages/d5/02/f7871468b135a8a1638065c071ee671c573228c7f84e5113c4600c5476f0/firehole-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}