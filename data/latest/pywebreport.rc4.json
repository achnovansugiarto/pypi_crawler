{
  "info": {
    "author": "Yongchin",
    "author_email": "yongchin39@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pytest",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# PyWebReport\n\nGenerate html reports by sources such as unittest、pytest and any more  \n\nlike allure but as do-one-thing-do-it-well for **python community**.  \n\n## Current progress\n\n- [x] Feasibility Study.(it seems feasible)  \n- [ ] Report designing 🚧👷(you can see progress [here](https://yongchin0821.github.io/pywebreport/))  \n- [x] pytest adaptation  \n- [x] unittest adaptation  \n\n## My initial idea\n\nWe may extract results in different formats from pytest、unittest. if there have a formatter to format results into the  \ncommon datas,then we can use this datas to make html report.  \n\n![](./idea.png)  \n\n## Installation\n\n```\n# pip install pywebreport\n```\n\nor you can clone this rep, and run the command to install\n\n```\n# python setup.py install\n```\n\n## Usage\n\n### pytest\n\njust run the command\n\n```shell\n# pytest -q --report result/report.html\n```\n\nor in **.py** you can run script like:\n\n```python\nimport pytest\n\nif __name__ == '__main__':\n    args = ['./', '-q', '--report', 'result/report.html']\n    pytest.main(args)\n```\n\n### unitest\n\n**import the WebReportRunner**, and just give the TestSuite to WebReportRunner  \nno matter how TestSuite is collected  \n**just give the suites to WebReportRunner**  \n\nlike this:\n\n```python\nimport unittest\nfrom test_success import UnitTestSuccessCase\nfrom pywebreport import WebReportRunner\n\n\nif __name__ == '__main__':\n    suite = unittest.TestSuite()\n    loader = unittest.TestLoader()\n\n    # suite.addTest(UnitTestSuccessCase(\"test_case2\"))\n    # suite.addTest(UnitTestSuccessCase(\"test_err_print\"))\n    # suite.addTest(loader.loadTestsFromTestCase(UnitTestCase))\n    # suite = loader.loadTestsFromTestCase(UnitTestCase)\n\n    suite.addTest(loader.discover(\".\"))\n\n    runner = WebReportRunner(report=\"result/report.html\")\n    test_result = runner.run(suite)\n```\n\n### other\n\nNo matter what testing framework you use, just give the formatted result datas like this:\n\n```json\n{\n  \"title\": \"PyWebReport\",\n  \"path\": \"/Users/yongchin/someplace/pytest/result/report.html\",\n  \"result\": {\n    \"total\": \"8\",\n    \"passed\": \"4\",\n    \"failed\": \"3\",\n    \"warnings\": \"1\",\n    \"error\": \"1\",\n    \"skipped\": \"1\",\n    \"duration\": \"0.09765386581420898\",\n    \"deselected\": \"0\",\n    \"rate_passed\": \"50.00%\",\n    \"rate_failed\": \"37.50%\",\n    \"rate_warnings\": \"12.50%\",\n    \"rate_skipped\": \"12.50%\"\n  },\n  \"suites\": {\n    \"test/testsuites/pytest/test_fail.py\": {\n      \"cases\": {\n        \"test_case1\": {\n          \"id\": \"test/testsuites/pytest/test_fail.py::test_case1\",\n          \"desc\": \"test fail\",\n          \"status\": \"failed\",\n          \"duration\": 0.0,\n          \"className\": \"\",\n          \"consoleLog\": [],\n          \"errMsg\": \"def test_case1():\\n        \\\"\\\"\\\"test fail\\\"\\\"\\\"\\n>       assert 0\\nE       assert 0\\n\\ntest_fail.py:10: AssertionError\",\n          \"execTime\": \"2022-07-20 10:33:54\"\n        },\n        \"test_case2\": {\n          \"id\": \"test/testsuites/pytest/test_fail.py::test_case2\",\n          \"desc\": \"\\u3053\\u3093\\u306b\\u3061\\u306f\\u4e16\\u754c\",\n          \"status\": \"failed\",\n          \"duration\": 0.0,\n          \"className\": \"\",\n          \"consoleLog\": [],\n          \"errMsg\": \"def test_case2():\\n        \\\"\\\"\\\"\\u3053\\u3093\\u306b\\u3061\\u306f\\u4e16\\u754c\\\"\\\"\\\"\\n>       raise IOError(123)\\nE       OSError: 123\\n\\ntest_fail.py:15: OSError\",\n          \"execTime\": \"2022-07-20 10:33:54\"\n        },\n        \"test_case3\": {\n          \"id\": \"test/testsuites/pytest/test_fail.py::test_case3\",\n          \"desc\": \"test error\",\n          \"status\": \"failed\",\n          \"duration\": 0.0,\n          \"className\": \"\",\n          \"consoleLog\": [],\n          \"errMsg\": \"@pytest.fixture()\\n    def user():\\n        a = \\\"yoyo\\\"\\n>       assert a == \\\"yoyo123\\\"  # fixture failed with error\\nE       AssertionError: assert 'yoyo' == 'yoyo123'\\nE         - yoyo123\\nE         + yoyo\\n\\ntest_fail.py:21: AssertionError\",\n          \"execTime\": \"2022-07-20 10:33:54\"\n        }\n      },\n      \"results\": {\n        \"counts\": 3,\n        \"passed\": 0,\n        \"failed\": 3,\n        \"warnings\": 0,\n        \"error\": 0,\n        \"skipped\": 0,\n        \"rate_passed\": \"0.00%\"\n      },\n      \"duration\": 0.0\n    },\n    \"test/testsuites/pytest/test_success.py\": {\n      \"cases\": {\n        \"test_case1\": {\n          \"id\": \"test/testsuites/pytest/test_success.py::TestA::test_case1\",\n          \"desc\": \"test pass\",\n          \"status\": \"passed\",\n          \"duration\": 0.0,\n          \"className\": \"TestA\",\n          \"consoleLog\": [],\n          \"errMsg\": \"\",\n          \"execTime\": \"2022-07-20 10:33:54\"\n        },\n      },\n      \"results\": {\n        \"counts\": 5,\n        \"passed\": 4,\n        \"failed\": 0,\n        \"warnings\": 0,\n        \"error\": 0,\n        \"skipped\": 1,\n        \"rate_passed\": \"80.00%\"\n      },\n      \"duration\": 0.0\n    }\n  }\n}\n```\n\nthen, use the pywebreport's API, report will be generated\n\n```python\nfrom pywebreport import mkrepot\n\ndatas = {\n  \"title\": \"PyWebReport\",\n  \"path\": \"report.html\",\n  \"result\": {...},\n  \"suites\": {...}\n}\n\nmkrepot(datas)\n```\n\n## Recruitment\n\nThis is an incubation project  \n\nhope and invite you to join me if you are interested in this project  \n\n- [ ] a contributor who can design the report style  \n- [ ] a contributor who is familiar with pytest\\unittest\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yongchin0821/pywebreport",
    "keywords": "pytest,unittest,htmlreport,reporter,report,pytest report",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pywebreport",
    "package_url": "https://pypi.org/project/pywebreport/",
    "platform": null,
    "project_url": "https://pypi.org/project/pywebreport/",
    "project_urls": {
      "Bug Tracker": "https://github.com/yongchin0821/pywebreport/issues",
      "Homepage": "https://github.com/yongchin0821/pywebreport"
    },
    "release_url": "https://pypi.org/project/pywebreport/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Generates a static html report based on pytest framework",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14759202,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "052efbe353ef68c76637b4f17da096f810460d71f95a0531bc6438c4c48ba75d",
          "md5": "12cc11978361988efe539560d66f4425",
          "sha256": "5fb96b4c7ed434de326c57b2bfa38fe779505eafb7a0b9bef56299da60117cb3"
        },
        "downloads": -1,
        "filename": "pywebreport-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "12cc11978361988efe539560d66f4425",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 187275,
        "upload_time": "2022-07-10T10:00:42",
        "upload_time_iso_8601": "2022-07-10T10:00:42.017727Z",
        "url": "https://files.pythonhosted.org/packages/05/2e/fbe353ef68c76637b4f17da096f810460d71f95a0531bc6438c4c48ba75d/pywebreport-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2717da37243cc623b1a0c1c70841fd57ab0c3f19df98b2ed6fba3bf2dfe300ee",
          "md5": "6df3eec4b18036e457a3e47decd284b2",
          "sha256": "1a4f746b771611f2115fcd1c4d9b1c218678866bdea28bccd71e18d7e6f3b95f"
        },
        "downloads": -1,
        "filename": "pywebreport-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6df3eec4b18036e457a3e47decd284b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 106699,
        "upload_time": "2022-07-20T09:11:13",
        "upload_time_iso_8601": "2022-07-20T09:11:13.748028Z",
        "url": "https://files.pythonhosted.org/packages/27/17/da37243cc623b1a0c1c70841fd57ab0c3f19df98b2ed6fba3bf2dfe300ee/pywebreport-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "677ce0dcc09a91a76e21197d66dc9001bf5e5f3ce5cc79bb723496b33e9a9eb4",
          "md5": "29bda37ea8bca664302d6bfb6c4dbb37",
          "sha256": "31a682ec6c9ce15f659c24eaecc1cb8c026af023c67aa0fde4831afc97629a14"
        },
        "downloads": -1,
        "filename": "pywebreport-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "29bda37ea8bca664302d6bfb6c4dbb37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 106877,
        "upload_time": "2022-08-03T01:50:10",
        "upload_time_iso_8601": "2022-08-03T01:50:10.306315Z",
        "url": "https://files.pythonhosted.org/packages/67/7c/e0dcc09a91a76e21197d66dc9001bf5e5f3ce5cc79bb723496b33e9a9eb4/pywebreport-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b861cb17ec511da2b8943f870578ccf885040f6629d682b212b1aa64c6f9e4d",
          "md5": "4e81763b6486e2f5444f8e87756d15ed",
          "sha256": "3bafbf239d3400b5d33acaf938c6fad9a667020fca891d021063120fdb206c2c"
        },
        "downloads": -1,
        "filename": "pywebreport-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4e81763b6486e2f5444f8e87756d15ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 305115,
        "upload_time": "2022-08-15T01:00:39",
        "upload_time_iso_8601": "2022-08-15T01:00:39.475828Z",
        "url": "https://files.pythonhosted.org/packages/8b/86/1cb17ec511da2b8943f870578ccf885040f6629d682b212b1aa64c6f9e4d/pywebreport-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b861cb17ec511da2b8943f870578ccf885040f6629d682b212b1aa64c6f9e4d",
        "md5": "4e81763b6486e2f5444f8e87756d15ed",
        "sha256": "3bafbf239d3400b5d33acaf938c6fad9a667020fca891d021063120fdb206c2c"
      },
      "downloads": -1,
      "filename": "pywebreport-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4e81763b6486e2f5444f8e87756d15ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 305115,
      "upload_time": "2022-08-15T01:00:39",
      "upload_time_iso_8601": "2022-08-15T01:00:39.475828Z",
      "url": "https://files.pythonhosted.org/packages/8b/86/1cb17ec511da2b8943f870578ccf885040f6629d682b212b1aa64c6f9e4d/pywebreport-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}