{
  "info": {
    "author": "Matthias Urlichs",
    "author_email": "matthias@urlichs.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "====================================\n``aevent``: an asyncronizing library\n====================================\n\n``aevent`` lets you call boring synchronous Python from async code.\nWithout blocking or splatting ``async`` and ``await`` onto it.\nIdeally, this works without modifying the synchronous code.\n\nPut another way,\n``aevent`` is to ``gevent`` what ``anyio`` is to ``greenlet``.\n\nThat is, it replaces standard Python functions with calls to `anyio`_\ninstead of ``gevent``.\n\nSome limitations apply.\n\nUsage\n=====\n\n**Before any other imports**, insert this code block into your main code::\n\n   import aevent\n   aevent.setup('trio')  # or asyncio, if you must\n   \nThis will annoy various code checkers, but that can't be helped.\n\n**Start your main loop** using ``aevent.run``, or call ``await aevent.per_task()``\nin the task(s) that need to use patched code.\n\nThe ``aevent.native`` and ``aevent.patched`` context managers can be used to\ntemporarily disable or re-enable ``aevent``'s patches.\n\n\nSupport functions\n-----------------\n\n``aevent`` monkey-patches ``anyio``'s ``TaskGroup.spawn`` in two ways.\n\n* the child task is instrumented to support `greenback`.\n\n* ``spawn`` returns a cancel scope. You can use it to cancel the new task.\n\nCall ``aevent.per_task`` in your child task if you start tasks some other way.\n\n\nThreading\n---------\n\nThreads are translated to tasks. In order for that to work, you must start\nyour program with `aevent.run`, or run the sync code in question within an\n`aevent.runner` async context manager. Runners may be nested.\n\n\nSupported modules\n=================\n\n* time\n\n  * sleep\n\n* threading\n* queue\n* atexit\n* socket\n* select\n\n  * poll\n\nNot yet supported\n-----------------\n\n* select\n\n  * anything else\n\n* dns\n* os\n\n  * read\n\n  * write\n\n* ssl\n* subprocess\n* signal\n\n\nSubclassing patched classes\n---------------------------\n\nDirectly subclassing one of the classes patched by ``aevent`` does not\nwork and requires special consideration. Consider this code::\n\n   class my_thread(threading.Thread):\n      def run(self):\n          ...\n\nFor use with ``aevent`` you can choose the original ``Thread``\nimplementation::\n\n    orig_Thread = getattr(threading.Thread, \"_aevent_orig\", threading.Thread)\n    class my_thread(orig_Thread):\n      ...\n\nor the ``aevent``-ified version::\n\n    new_Thread = threading.Thread._aevent_new # fails when aevent is not loaded\n    class my_thread(new_Thread):\n      ...\n\nor you might want to create two separate implementations, and switch based\non the aevent context::\n\n    class _orig_my_thread(threading.Thread._aevent_orig):\n       ...\n    class _new_my_thread(threading.Thread._aevent_new):\n       ...\n    my_thread = aevent.patch__new_my_thread, name=\"my_thread\", orig=_orig_my_thread)\n\nIf you generate local subclasses on the fly, you can simplify this to::\n\n    def some_code():\n        class my_thread(threading.Thread._aevent_select()):\n            def run(self):\n                ...\n        job = my_tread()\n        my_thread.start()\n\n\nOther affected modules\n----------------------\n\nYou need to import any module which requires non-patched code before\nimporting ``aevent``.\n\nModules which are known to be affected:\n\n* multiprocessing\n\n\nInternals\n=========\n\n``aevent``'s monkey patching is done mainly on the module/class level.\n``gevent`` prefers to patch individual methods. This may cause some\nreduced compatibility compared to ``gevent``.\n\n``aevent`` works by prepending its local ``_monkey`` directory to the import path.\nThese modules try to afford the same public interface as the ones they're\nreplacing while calling the corresponding ``anyio`` functions through\n`greenback_`.\n\nContext switching back to async-flavored code is done by way of `greenback`_.\n\n``aevent`` runs on Python 3.7 ff.\n\nTesting\n-------\n\nThe test suite runs with `trio`_ as backend. Due to ``aevent``'s monkeypatching,\nswitching backends around is not supported. However, you can set the\nenvironment variable ``AEVENT_BACKEND`` to `asyncio`_ to run the test\nsuite with that.\n\nThe test suite pulls in a copy of `pyroute2`_ (no changes, other than fixing\nbugs unrelated to ``aevent``) and tests against its test suite, thereby\n(mostly) ensuring that this particular package works with ``aevent``.\n\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _trio: https://github.com/python-trio/trio\n.. _anyio: https://github.com/agronholm/anyio\n.. _greenback: https://github.com/oremanj/greenback\n.. _pyroute2: https://github.com/svinota/pyroute2",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aevent",
    "package_url": "https://pypi.org/project/aevent/",
    "platform": "",
    "project_url": "https://pypi.org/project/aevent/",
    "project_urls": {
      "Issue tracker": "https://github.com/M-o-a-T/aevent/issues",
      "Source code": "https://github.com/M-o-a-T/aevent"
    },
    "release_url": "https://pypi.org/project/aevent/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7.0",
    "summary": "Call synchronous Python from async code, without blocking",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9395329,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efb2f68b666edd65f9daf6a49ba431010de94208ad9978a1443dd28876c17bfa",
          "md5": "404be3ea0eabbe3eeafd358a5056dd78",
          "sha256": "90fbe38211f778413879b0d8f1342cf9583414b88513a814bbfff768356cb232"
        },
        "downloads": -1,
        "filename": "aevent-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "404be3ea0eabbe3eeafd358a5056dd78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 5459,
        "upload_time": "2021-01-26T13:16:23",
        "upload_time_iso_8601": "2021-01-26T13:16:23.184324Z",
        "url": "https://files.pythonhosted.org/packages/ef/b2/f68b666edd65f9daf6a49ba431010de94208ad9978a1443dd28876c17bfa/aevent-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e317f9a90849cfb6999a9afc176087298a54b2388d4e6f941f8994e3c86a5fbc",
          "md5": "7ec66a6bcc1a0fa72d3b7d49742d8e34",
          "sha256": "5aff8e9f532eac150fbb4b93ba983d5d8527508e40df9743faf24492e7c3a872"
        },
        "downloads": -1,
        "filename": "aevent-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7ec66a6bcc1a0fa72d3b7d49742d8e34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 19359,
        "upload_time": "2021-02-01T12:46:35",
        "upload_time_iso_8601": "2021-02-01T12:46:35.105992Z",
        "url": "https://files.pythonhosted.org/packages/e3/17/f9a90849cfb6999a9afc176087298a54b2388d4e6f941f8994e3c86a5fbc/aevent-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b22f0e27e1dd69725b802be89b2022fc2940dcf594bd29ee80692dcbe3205750",
          "md5": "a52d81c678940bd413024b0cd2381217",
          "sha256": "8f54df25454dbae1585f80ce9d193852fc243704c88551b343545f6687e07103"
        },
        "downloads": -1,
        "filename": "aevent-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a52d81c678940bd413024b0cd2381217",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 19787,
        "upload_time": "2021-02-12T07:35:10",
        "upload_time_iso_8601": "2021-02-12T07:35:10.762920Z",
        "url": "https://files.pythonhosted.org/packages/b2/2f/0e27e1dd69725b802be89b2022fc2940dcf594bd29ee80692dcbe3205750/aevent-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b22f0e27e1dd69725b802be89b2022fc2940dcf594bd29ee80692dcbe3205750",
        "md5": "a52d81c678940bd413024b0cd2381217",
        "sha256": "8f54df25454dbae1585f80ce9d193852fc243704c88551b343545f6687e07103"
      },
      "downloads": -1,
      "filename": "aevent-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a52d81c678940bd413024b0cd2381217",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 19787,
      "upload_time": "2021-02-12T07:35:10",
      "upload_time_iso_8601": "2021-02-12T07:35:10.762920Z",
      "url": "https://files.pythonhosted.org/packages/b2/2f/0e27e1dd69725b802be89b2022fc2940dcf594bd29ee80692dcbe3205750/aevent-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}