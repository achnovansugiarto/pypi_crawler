{
  "info": {
    "author": "Dataloop Team",
    "author_email": "info@dataloop.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# uPipe #\n[![pypi](https://img.shields.io/pypi/v/dataloop-upipe.svg)](https://pypi.org/project/dataloop-upipe/)\n[![versions](https://img.shields.io/pypi/pyversions/dataloop-upipe.svg)](https://github.com/dataloop-ai/dtlpy-upipe)\n\nMicro-pipe is asyncio based framework for running **simple**,high performance, parallel and synchronized python\nprocesses within a single machine.  \nuPipe comes with auto-scaler for maximum throughput and hardware utilization and a monitoring tool.\n\n```python\na = Processor('a', entry='./a.py', config=config)\nb = Processor('b', entry='./b.py', config=config)\npipe = Pipe('plus-one')\npipe.add(a).add(b)\nawait pipe.start()\nawait pipe.wait_for_completion()\nprint(\"Running\")\n```\n\n## Why uPipe ? ##\n\nIn the world of machine learning python has taken the stage as the go-to programming language, yet python has few\nfundamental issues preventing it from being production friendly\n\n### Parallel processing ###\n\nPython has a built-in weakness for parallel data processing, this weakness is sourced in the core of python at\nthe [GIL](https://wiki.python.org/moin/GlobalInterpreterLock)\n\nThe GlobalInterpreterLock prevents from different threads to access memory (and therefore variables) in parallel. This\nessentially means that a multi-threaded python program executes slower compared to single thread on CPU intensive\nworkloads. Python also offers multiprocessing capabilities that are not blocked by GIL since the workloads are running\nin different processes, yet using multiprocessor does not allow sharing memory and communication between process\nimplicitly uses [Pickling](https://docs.python.org/3/library/pickle.html) for data sharing, which in turn significantly\ndegrades data throughput.\n\n### Parallel optimization ###\n\nAny given processing workload is bounded by critical hardware resources where the leading resources are I/O (Network and\ndisk), Memory and CPU. Machine learning also introduces additional resources like GPU cores, CPU memory and other AI\nspecific accelerators. Optimizing the overall data on a given machine is a process of trial and error, often includes\nnon-trivial technical challenges.uPipe implements [AutoScaling](https://en.wikipedia.org/wiki/Autoscaling) by process\ninto the single machine with maximum pipeline throughput as goal.\n\n### Simple ###\n\nuPipe exposes a simple API for creating data pipelines from existing packages and library's run with fews line of code.\n\nThe basics entities:\n\n* DataFrame: Arbitrary binary data that is shared between processors.\n* Processor: A python code that can receive, process and generate(emit) data frames. Processor is a logical entities\n  that can encapsulate many (os) processes of the same processor code.\n* Queue: Two processors will communicate DataFrames using queue, usually memory based queue.  \n* Pipe: The Pipeline the defines the data flow between Processors and manages the processing execution.\n\n### Read more ###\n\n* [uPipe basics](docs/basics/basics.md)\n* [uPipe API](docs/api/api.md)\n* [uPipe architecture](docs/architecture/architecture.md)\n* [uPipe design](docs/design/design.md)\n\n### Install ###\n\n```shell\npip install dataloop-upipe\n```\n\n### Import ###\n\n    from dataloop.upipe import Processor, Pipe\n\n## Usage ##\n\n### Processor declaration ###\n\nProcessor can be defined inline methods(_func_) or as external scripts (_entry_) in order to be used in pipeline\ndefinition, the name for each processor must be a unique string and used to identify the processor.\n\n```python\na = Processor('my name is A', func=processor_a)\nb = Processor('b', entry='./b.py')\n```\n\n### Pipe definition ###\n\nProcessor can be chained to pipe and to each other by the _add_ method\n```python\npipe = Pipe('some-pipe') \npipe.add(a).add(b) #a,b are processors \n```\n\n### Joining a Processor to a pipe###\n\nThis code is declaring the Worker's code and _join_ in order to be able to receive and emit data frames.\n\n```python\nproc = Worker(\"b\")\nawait proc.join()\n# Processor is now ready to ingest and emit data \n```\n### Acquiring data by processor ###\n\nWorker can get data using the _get_  and _get_sync_ methods\n```python\nproc = Worker(\"b\")\nawait proc.join()\n# Processor is now ready to ingest and emit data \n#get data frame, return None if no data available \ndata_frame = await proc.get()\n#get data frame, wait until data available \ndata_frame = await proc.get_sync()\n```\n### Emitting data by processor ###\n\nWorker can emit data frame for the next Processor in Pipe using the _emit_  and _emit_sync_ methods\n```python\nproc = Worker(\"b\")\nawait proc.join()\n# Processor is now ready to ingest and emit data \n#emit data frame, return None if no space (back pressure from next processor) \nawait proc.emit()\n#emit data frame, wait if no space (back pressure) \nawait proc.emit_sync()\n```\n### start pipe ###\n```python\nawait pipe.start()\nawait pipe.wait_for_completion()\n```\n### terminate pipe ###\n```python\nawait pipe.terminate()\nawait pipe.wait_for_completion() # wait for existing data to complete\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dataloop-upipe",
    "package_url": "https://pypi.org/project/dataloop-upipe/",
    "platform": null,
    "project_url": "https://pypi.org/project/dataloop-upipe/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dataloop-upipe/0.2.0/",
    "requires_dist": [
      "numpy (<=1.22.*)",
      "fastapi (<=0.70.0)",
      "uvicorn (<=0.15.0)",
      "httpx (<=0.20.0)",
      "websockets (<=10.0)",
      "pydantic (<=1.8.2)",
      "python-multipart",
      "aiohttp (<=3.7.4.post0)",
      "psutil (<=5.8.0)",
      "starlette (<=0.16.0)",
      "opencv-python (<=4.5.3.56)",
      "colorama (<=0.4.4)",
      "websocket-client (<=1.2.1)",
      "requests (<=2.26.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Micro Pipelines for Dataloop platform",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14078708,
  "releases": {
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67b1b473cc8216376f334a178b6587f66c1312dab7d2256c070a358872869ea1",
          "md5": "8c48ebbabbc6d621c6a75ee1b0de4538",
          "sha256": "ba76f08fa2426a8cdd7bd583ef2846ace71fcf4c4fac35bcad5c5b3a3be9ae6e"
        },
        "downloads": -1,
        "filename": "dataloop_upipe-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c48ebbabbc6d621c6a75ee1b0de4538",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 56036,
        "upload_time": "2022-05-30T09:52:19",
        "upload_time_iso_8601": "2022-05-30T09:52:19.180807Z",
        "url": "https://files.pythonhosted.org/packages/67/b1/b473cc8216376f334a178b6587f66c1312dab7d2256c070a358872869ea1/dataloop_upipe-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "359051b2ef383417c9e536cb1cca0a0bb72ed15b42379de5ed4559a9f37afa80",
          "md5": "4adec049b870dcb65250b3872f17bf26",
          "sha256": "7d7cd0cec934cd7cd40b872f771bfa24f58d8d4b56637b167bd8e8efb19fa492"
        },
        "downloads": -1,
        "filename": "dataloop_upipe-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4adec049b870dcb65250b3872f17bf26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 56024,
        "upload_time": "2022-05-30T09:47:20",
        "upload_time_iso_8601": "2022-05-30T09:47:20.927370Z",
        "url": "https://files.pythonhosted.org/packages/35/90/51b2ef383417c9e536cb1cca0a0bb72ed15b42379de5ed4559a9f37afa80/dataloop_upipe-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9df74f66c1ef6841d6e3dd480440f7da94a9acc1cb2028c7ebe4514d958aaadb",
          "md5": "6dc539cd14bedfcba87d92e59c286afd",
          "sha256": "df7bb43c3e8ce2ce3c142f9d2fe58d67b88cf62d898c09bab801a0a9a055db99"
        },
        "downloads": -1,
        "filename": "dataloop_upipe-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6dc539cd14bedfcba87d92e59c286afd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 1017462,
        "upload_time": "2022-06-06T15:21:13",
        "upload_time_iso_8601": "2022-06-06T15:21:13.147508Z",
        "url": "https://files.pythonhosted.org/packages/9d/f7/4f66c1ef6841d6e3dd480440f7da94a9acc1cb2028c7ebe4514d958aaadb/dataloop_upipe-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9df74f66c1ef6841d6e3dd480440f7da94a9acc1cb2028c7ebe4514d958aaadb",
        "md5": "6dc539cd14bedfcba87d92e59c286afd",
        "sha256": "df7bb43c3e8ce2ce3c142f9d2fe58d67b88cf62d898c09bab801a0a9a055db99"
      },
      "downloads": -1,
      "filename": "dataloop_upipe-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6dc539cd14bedfcba87d92e59c286afd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 1017462,
      "upload_time": "2022-06-06T15:21:13",
      "upload_time_iso_8601": "2022-06-06T15:21:13.147508Z",
      "url": "https://files.pythonhosted.org/packages/9d/f7/4f66c1ef6841d6e3dd480440f7da94a9acc1cb2028c7ebe4514d958aaadb/dataloop_upipe-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}