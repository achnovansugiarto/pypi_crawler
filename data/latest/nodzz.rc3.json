{
  "info": {
    "author": "Dusk Forge",
    "author_email": "duskforge@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![PyPI](https://img.shields.io/pypi/v/nodzz)](https://pypi.python.org/pypi/nodzz)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/nodzz)](https://www.python.org)\n[![GitHub](https://img.shields.io/github/license/duskforge/nodzz)](https://github.com/duskforge/nodzz/blob/main/LICENSE)\n\n# Nodzz: pure Python behavior trees framework\n\nNodzz is a Python open-source library which provides a framework for behavior trees creation and management. You can use\nit to implement behavior of your Arduino based robot, chat-bot or whatever else has its own behavior.\n\n## Key features\n\n* Nodzz provides implementations of typical behavior trees components (like selector and sequence nodes) and base classes \n  for creating your own;\n* Behavior trees can be assembled and configured from components by using Python API or\n  [pydantic](https://pydantic-docs.helpmanual.io/) and JSON friendly configs;\n* Supports both synchronous and asynchronous development.\n  \n## Future plans\n\n* Documentation and tutorials will be available soon. For now, you can refer docstrings: [state and components](nodzz/core.py),\n  [nodes base classes](nodzz/nodes/base.py), [controller nodes implementations](nodzz/nodes/controllers.py),\n  [task nodes implementations](nodzz/nodes/tasks.py), [configuration](nodzz/config.py), [tree management](nodzz/tree.py)\n  and [asynchronous development](nodzz/async_nodes/base.py).\n* Graphic behavior trees design tool is planned to be implemented.\n* The current set of implemented nodes (both controllers and tasks) is not final, more nodes implementations will be constantly\n  added.\n  \n\n## Tutorial\n\n### Installation\n\n```\npip install nodzz\n```\n\n### Theory \n\nBehavior tree is a model of process execution planning. It is mainly applied in robotics and gaming AI. Here are some\nreferences for understanding behavior trees basics:\n[Wikipedia article](https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control)) and\n[Introduction to Behavior Trees by Bj√∂rn Knafla](https://web.archive.org/web/20131209105717/http://www.altdevblogaday.com/2011/02/24/introduction-to-behavior-trees/).\n\nFrom here on, we assume that you are familiar with behavior tree core concepts. Also, here is Nodzz terms agreement: \n* **Controller node** - a standard name for control flow nodes;\n* **Task node** - a standard name for leaf nodes;\n* **Behavior agent** - an entity which behavior is programmed by behavior tree;\n* **State** - set of variables which represents snapshot of behavior agent \"consciousness\" in any given moment: it contains\n  both inputs from the interaction with the external environment and results of these inputs processing.\n\n### Basic Use\n\nLet's fast forward 40k years and imagine distant planet where one imperial guardsman is serving his dangerous duty of\ndefending the Imperium of Man from its numerous enemies. We will try to model his behavior with Nodzz behavior tree.\n\nOur brave guardsman behavior depends on number of enemies he encounters:\n* No (zero) enemies: he will continue watching;\n* One enemy: he will ruthlessly fight it;\n* Many (more than one) enemies: hi will bravely run away (into the warm embraces of Commissar).\n\nOnce we described guardsman behavior model, we can start implementing it in behavior tree.\n\nWe must first determine how our character interacts with the external environment. In this particular case he will be\nawaiting only one input: enemies number. This is the only parameter affecting guardsman behavior. Let's create node which\nreads enemies number from the command prompt and writes it to the state variable:\n\nAll necessary imports:\n\n```\nfrom nodzz.core import State\nfrom nodzz.nodes.base import NodeBase, NodeStatus\nfrom nodzz.nodes.controllers import SelectorNode, SequenceNode\nfrom nodzz.nodes.tasks import EvaluationNode, EvaluationNodeConfig, More, Less, Equal\n```\n\nCommand prompt reading node:\n\n```\nclass InputNode(NodeBase):\n    \"\"\"Initialises node.\n\n    Args:\n          config: A dict with the following template: {'enemies_num_var': <state_variable_name>}.\n    \"\"\"\n    def __init__(self, config):\n        super().__init__(config=config)\n\n    def execute(self, state):\n        input_str = input('\\nType enemies number or \"exit\" for exit: ')\n\n        # Graceful exit\n        if input_str == 'exit':\n            exit()\n\n        # Parsing input\n        if input_str.isnumeric():\n            input_int = int(input_str)\n        else:\n            input_int = 0  # Default value for any non-numeric input.\n\n        state.vars[self.config['enemies_num_var']] = input_int\n\n        # execute() method should ALWAYS return node NodeStatus\n        return NodeStatus.SUCCESS\n```\n\nAlso, our guardsman needs to notice his external environment (in this particular case - us) about the decisions he makes.\nWe will create simple node which prints a text that was set in its config:\n\n```\nclass OutputNode(NodeBase):\n    def __init__(self, config):\n        \"\"\"Initialises node.\n\n        Args:\n              config: A dict with the following template: {'output': <text_that_node_instance_will_print>}.\n        \"\"\"\n        super().__init__(config=config)\n\n    def execute(self, state):\n        print(self.config['output'])\n\n        return NodeStatus.SUCCESS\n```\n\nLet's set name of the state variable where number of detected enemies will be stored:\n\n```\nvar_name = 'enemies_num'\n```\n\nEach behavior scenario of the guardsman will be a sequence of two actions: 1. Estimate enemies number; 2. Tell us about\nthe decision he made.\n\nEnemies number estimation will be implemented by initialising of properly configured `EvaluationNode`. Evaluation node\nimplements one of the typical decision tree tasks: state variable value evaluation. It allows setting basic evaluation\noperation with config without any additional code writing. Notification will be implemented via `OutputNode`. The whole\nbehavior scenario (branch) will be implemented as an instance of `SequenceNode` initialised with the instances of `EvaluationNode`\nand `OutputNode` given in the order of their execution.\n\nZero enemies scenario implementation:\n\n```\nzero_enemies_check_cfg = EvaluationNodeConfig(conditions={var_name: Less(value=1)})\nzero_enemies_check = EvaluationNode(config=zero_enemies_check_cfg)\nzero_enemies_behavior = OutputNode(config={'output': 'No enemies detected, keeping watching.'})\nzero_enemies_sequence = SequenceNode(zero_enemies_check, zero_enemies_behavior)\n```\n\nOne enemy scenario implementation:\n\n```\none_enemy_check_cfg = EvaluationNodeConfig(conditions={var_name: Equal(value=1)})\none_enemy_check = EvaluationNode(config=one_enemy_check_cfg)\none_enemy_behavior = OutputNode(config={'output': 'An enemy detected, fight!'})\none_enemy_sequence = SequenceNode(one_enemy_check, one_enemy_behavior)\n```\n\nMany enemies scenario implementation:\n\n```\nmany_enemies_check_cfg = EvaluationNodeConfig(conditions={var_name: More(value=1)})\nmany_enemies_check = EvaluationNode(config=many_enemies_check_cfg)\nmany_enemies_behavior = OutputNode(config={'output': 'Many enemies detected, run away!'})\nmany_enemies_sequence = SequenceNode(many_enemies_check, many_enemies_behavior)\n```\n\nAll initialised scenarios nodes will be composed in the scenario selector - an instance of `SelectorNode`. We will need\nto fill enemies number state variable before starting traversing scenarios, so the root node of the guardsman behavior\ntree will be `SequenceNode` instance initialised with the scenario selector instance `InputNode` instance given in the\norder of their execution.\n\n```\nbehavior_selector = SelectorNode(zero_enemies_sequence, one_enemy_sequence, many_enemies_sequence)\ninput_node = InputNode(config={'enemies_num_var': var_name})\nroot_sequence = SequenceNode(input_node, behavior_selector)\n```\n\nThere are some final steps to finish behavior tree initialisation, get state instance and start tree execution:\n\n```\nroot_sequence.prepare(node_id='root')\nnew_state = State()\n\nwhile True:\n    root_sequence.execute(state=new_state)\n```\n\nThe whole snippet will be (this script is complete, it should run \"as is\"):\n\n```\nfrom nodzz.core import State\nfrom nodzz.nodes.base import NodeBase, NodeStatus\nfrom nodzz.nodes.controllers import SelectorNode, SequenceNode\nfrom nodzz.nodes.tasks import EvaluationNode, EvaluationNodeConfig, More, Less, Equal\n\n\nclass InputNode(NodeBase):\n    \"\"\"Initialises node.\n\n    Args:\n          config: A dict with the following template: {'enemies_num_var': <state_variable_name>}.\n    \"\"\"\n    def __init__(self, config):\n        super().__init__(config=config)\n\n    def execute(self, state):\n        input_str = input('\\nType enemies number or \"exit\" for exit: ')\n\n        # Graceful exit\n        if input_str == 'exit':\n            exit()\n\n        # Parsing input\n        if input_str.isnumeric():\n            input_int = int(input_str)\n        else:\n            input_int = 0  # Default value for any non-numeric input.\n\n        state.vars[self.config['enemies_num_var']] = input_int\n\n        # execute() method should ALWAYS return node NodeStatus\n        return NodeStatus.SUCCESS\n\n\nclass OutputNode(NodeBase):\n    def __init__(self, config):\n        \"\"\"Initialises node.\n\n        Args:\n              config: A dict with the following template: {'output': <text_that_node_instance_will_print>}.\n        \"\"\"\n        super().__init__(config=config)\n\n    def execute(self, state):\n        print(self.config['output'])\n\n        return NodeStatus.SUCCESS\n\n\nvar_name = 'enemies_num'\n\n\nzero_enemies_check_cfg = EvaluationNodeConfig(conditions={var_name: Less(value=1)})\nzero_enemies_check = EvaluationNode(config=zero_enemies_check_cfg)\nzero_enemies_behavior = OutputNode(config={'output': 'No enemies detected, keeping watching.'})\nzero_enemies_sequence = SequenceNode(zero_enemies_check, zero_enemies_behavior)\n\none_enemy_check_cfg = EvaluationNodeConfig(conditions={var_name: Equal(value=1)})\none_enemy_check = EvaluationNode(config=one_enemy_check_cfg)\none_enemy_behavior = OutputNode(config={'output': 'An enemy detected, fight!'})\none_enemy_sequence = SequenceNode(one_enemy_check, one_enemy_behavior)\n\nmany_enemies_check_cfg = EvaluationNodeConfig(conditions={var_name: More(value=1)})\nmany_enemies_check = EvaluationNode(config=many_enemies_check_cfg)\nmany_enemies_behavior = OutputNode(config={'output': 'Many enemies detected, run away!'})\nmany_enemies_sequence = SequenceNode(many_enemies_check, many_enemies_behavior)\n\nbehavior_selector = SelectorNode(zero_enemies_sequence, one_enemy_sequence, many_enemies_sequence)\ninput_node = InputNode(config={'enemies_num_var': var_name})\nroot_sequence = SequenceNode(input_node, behavior_selector)\n\nroot_sequence.prepare(node_id='root')\nnew_state = State()\n\nwhile True:\n    root_sequence.execute(state=new_state)\n```\n\nThe result will be:\n\n```\nType enemies number or \"exit\" for exit: 0\nNo enemies detected, keeping watching.\n\nType enemies number or \"exit\" for exit: 1\nAn enemy detected, fight!\n\nType enemies number or \"exit\" for exit: 2\nMany enemies detected, run away!\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/duskforge/nodzz",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nodzz",
    "package_url": "https://pypi.org/project/nodzz/",
    "platform": "",
    "project_url": "https://pypi.org/project/nodzz/",
    "project_urls": {
      "Bug Tracker": "https://github.com/duskforge/nodzz/issues",
      "Homepage": "https://github.com/duskforge/nodzz"
    },
    "release_url": "https://pypi.org/project/nodzz/0.2.0/",
    "requires_dist": [
      "pydantic (>=1.8.2)",
      "pyyaml (>=5.4.1)"
    ],
    "requires_python": ">=3.8",
    "summary": "Pure Python behavior trees framework",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11021946,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d72809651d6a8c1afe0e629867c83525739940c0b4eef9ce1e131c8f12696443",
          "md5": "1a3f4f064a73635978fc67d73ad728b8",
          "sha256": "ce81c54842be58fd481443f50263bd29f16b4ec657595a0c40b7590722bc073d"
        },
        "downloads": -1,
        "filename": "nodzz-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a3f4f064a73635978fc67d73ad728b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13997,
        "upload_time": "2021-07-16T13:00:45",
        "upload_time_iso_8601": "2021-07-16T13:00:45.591981Z",
        "url": "https://files.pythonhosted.org/packages/d7/28/09651d6a8c1afe0e629867c83525739940c0b4eef9ce1e131c8f12696443/nodzz-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63cbaa43dbe62179d234e27d2bfa3cba56b02ad7c036e13feec3e3e960547742",
          "md5": "bda293a105f1e707b8f6e5b17201d39d",
          "sha256": "9d2775fd56ca6ab3d03289d14af9fe2ed3408df3c4f1c85ae6aa7044d2d960ba"
        },
        "downloads": -1,
        "filename": "nodzz-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bda293a105f1e707b8f6e5b17201d39d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15403,
        "upload_time": "2021-07-16T13:00:46",
        "upload_time_iso_8601": "2021-07-16T13:00:46.719827Z",
        "url": "https://files.pythonhosted.org/packages/63/cb/aa43dbe62179d234e27d2bfa3cba56b02ad7c036e13feec3e3e960547742/nodzz-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c13fe1da6b3265d54ae91f14dbca235b8b0f1b62bb410cccac394fa7c5e6a2c",
          "md5": "96e3c7d95d6d8cd99b4b3d078d6b7ca4",
          "sha256": "b6c5276af949fc01d11c37a5f8ef9fd50ed73cf1e18c079d49c7747c772f0b9c"
        },
        "downloads": -1,
        "filename": "nodzz-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96e3c7d95d6d8cd99b4b3d078d6b7ca4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21782,
        "upload_time": "2021-07-19T20:41:08",
        "upload_time_iso_8601": "2021-07-19T20:41:08.133555Z",
        "url": "https://files.pythonhosted.org/packages/8c/13/fe1da6b3265d54ae91f14dbca235b8b0f1b62bb410cccac394fa7c5e6a2c/nodzz-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbcd6a13c0e584908c8cb601e98729c9a1a42c89218d0a5149af6fc75672a2f5",
          "md5": "bbc9742370426f1a7c0adcd6a27663b1",
          "sha256": "cdc87c99ffad5d9fcb5c7ff4ecb32458cc32edb8e38b51d7461db73fe697c710"
        },
        "downloads": -1,
        "filename": "nodzz-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bbc9742370426f1a7c0adcd6a27663b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21593,
        "upload_time": "2021-07-19T20:41:09",
        "upload_time_iso_8601": "2021-07-19T20:41:09.256985Z",
        "url": "https://files.pythonhosted.org/packages/cb/cd/6a13c0e584908c8cb601e98729c9a1a42c89218d0a5149af6fc75672a2f5/nodzz-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a44d700c152cfca2f43ad0ec5816fcc6625ccbc5cf5d242c3d5b037e371f4c3",
          "md5": "8814ad177515367845ace3bf7a180589",
          "sha256": "c9dcd261488ef618bd62977cdeda8e014e002ce9fde72aae069d4c21c74af424"
        },
        "downloads": -1,
        "filename": "nodzz-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8814ad177515367845ace3bf7a180589",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25093,
        "upload_time": "2021-07-27T23:49:35",
        "upload_time_iso_8601": "2021-07-27T23:49:35.663421Z",
        "url": "https://files.pythonhosted.org/packages/6a/44/d700c152cfca2f43ad0ec5816fcc6625ccbc5cf5d242c3d5b037e371f4c3/nodzz-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2125e4e2d722299534e1cc9cc62c36586de1fe636b14a043a7c49100187d82fa",
          "md5": "1353f03bb50f38dcac5e5f133f7e3371",
          "sha256": "03fc72b0528fc431b8ce84994151173f5291076ad02e65b3e4937a543076391f"
        },
        "downloads": -1,
        "filename": "nodzz-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1353f03bb50f38dcac5e5f133f7e3371",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24216,
        "upload_time": "2021-07-27T23:49:37",
        "upload_time_iso_8601": "2021-07-27T23:49:37.396828Z",
        "url": "https://files.pythonhosted.org/packages/21/25/e4e2d722299534e1cc9cc62c36586de1fe636b14a043a7c49100187d82fa/nodzz-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a44d700c152cfca2f43ad0ec5816fcc6625ccbc5cf5d242c3d5b037e371f4c3",
        "md5": "8814ad177515367845ace3bf7a180589",
        "sha256": "c9dcd261488ef618bd62977cdeda8e014e002ce9fde72aae069d4c21c74af424"
      },
      "downloads": -1,
      "filename": "nodzz-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8814ad177515367845ace3bf7a180589",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 25093,
      "upload_time": "2021-07-27T23:49:35",
      "upload_time_iso_8601": "2021-07-27T23:49:35.663421Z",
      "url": "https://files.pythonhosted.org/packages/6a/44/d700c152cfca2f43ad0ec5816fcc6625ccbc5cf5d242c3d5b037e371f4c3/nodzz-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2125e4e2d722299534e1cc9cc62c36586de1fe636b14a043a7c49100187d82fa",
        "md5": "1353f03bb50f38dcac5e5f133f7e3371",
        "sha256": "03fc72b0528fc431b8ce84994151173f5291076ad02e65b3e4937a543076391f"
      },
      "downloads": -1,
      "filename": "nodzz-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1353f03bb50f38dcac5e5f133f7e3371",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 24216,
      "upload_time": "2021-07-27T23:49:37",
      "upload_time_iso_8601": "2021-07-27T23:49:37.396828Z",
      "url": "https://files.pythonhosted.org/packages/21/25/e4e2d722299534e1cc9cc62c36586de1fe636b14a043a7c49100187d82fa/nodzz-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}