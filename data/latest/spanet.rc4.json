{
  "info": {
    "author": "Alexander Shmakov",
    "author_email": "Alexanders101@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: GPU :: NVIDIA CUDA :: 11.3",
      "Environment :: GPU :: NVIDIA CUDA :: 11.6",
      "Environment :: GPU :: NVIDIA CUDA :: 11.7",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Physics",
      "Typing :: Typed"
    ],
    "description": "# Symmetry Preserving Attention Networks\n\nA library for training and evaluation SPANets on jet reconstruction tasks. \nOriginally developed for `ttbar` analysis,\nthis library now supports arbitrary event topologies and symmetry groups.\n\n## Version 2 Update\n\nWe recently pushed an updated version 2 of this library which adds several new features.\n1. New configuration file format with more options on inputs and event topology.\n2. Allow for several different inputs, including global inputs for additional context.\n3. New Regression and Classification output heads for performing per-event or per-particle predictions.\n4. Gated transformers and linear layers for more robust networks. Less hyperparameter optimization.\n\nAn example demonstrating these new features may be found here: [docs/TTH.md](docs/TTH.md).\n\n## Installation\nYou can install this package to use it outside of the repository after cloning.\n\n```bash\ngit clone https://github.com/Alexanders101/SPANet\ncd SPANet\npip install .\n```\n\nAlternatively, you can use `pip install -e .` to install in an editable mode.\n\n### Note\nThe configuration `ini` has been deprecated into a configuration `yaml`. The conversion should just be to change the syntax a bit, the values should remain the same. A conversion script is in the works.\n\nThe dataset format has also changed slighty, but old style datasets can be converted into a new style dataset using [`utils/convert_dataset.py`](utils/convert_dataset.py).\n\nThe old codebase may always be accesed here: [https://github.com/Alexanders101/SPANet/tree/v1.0](https://github.com/Alexanders101/SPANet/tree/v1.0)\n\n## Dependencies\n\nA list of the libraries necessary to fully train and evaluate SPANets. \nThese are only the minimum versions that we tested, other versions might work.\n\n| Library                                                 | Minimum Version |\n| ------------------------------------------------------- |-----------------|\n| python                                                  | 3.9             |\n| [numpy](https://pypi.org/project/numpy/)                | 1.22.1          |\n| [sympy](https://www.sympy.org/en/index.html)            | 1.11            |\n| [scikit_learn](https://scikit-learn.org/stable/)        | 1.1             |\n| [pytorch](https://pytorch.org/)                         | 1.12            |\n| [pytorch-lightning](https://www.pytorchlightning.ai/)   | 1.7             |\n| [opt_einsum](https://github.com/dgasmith/opt_einsum)    | 3.3.0           |\n| [h5py](https://pypi.org/project/h5py/)                  | 2.10            |\n| [numba](https://numba.pydata.org/)                      | 0.53.1          |\n\nWe have updated to using an anaconda environment for simpler dependency management.\nYou can create the environment locally with the following conda / mamba commands:\n```bash\nconda env create -p ./environment --file environment.yaml\nconda activate ./environment\n```\n\n## Example\nWe have provided a simple `ttbar` example in order to demonstrate how to\ndefine events, construct datasets, and train & evaluate a network.\n\n\n[Refer to this page for a detailed walk-through \nfor the `ttbar` example](docs/TTBar.md).\n\nThe full `ttbar` dataset may be downloaded here: http://mlphysics.ics.uci.edu/data/2021_ttbar/.\n\nWe also have a more advanced example demonstrating some of the additinoal inputs and outputs available on a semi-leptonic `ttH` event. [Refer to this page for a detailed walk-through \nfor the `ttH` example](docs/TTH.md).\n\n## Usage\nUsing this library requires setting up several components. \nRefer to the following documentation pages in order to learn about the\nthe different setup components, or just follow the ttbar example.\n\n1. [Defining the event topology](docs/EventInfo.md).\n2. [Creating a training dataset](docs/Dataset.md).\n3. [Configuring training options](docs/Options.md).\n\n\n### Training\n\nOnce those steps are complete, you can begin training by \ncalling `spanet.train` with your chosen parameters. For more information\nsimply run `python -m spanet.train --help`\n\nYou can experiment with the provided example configuration and dataset\nfor some `ttbar` events by calling \n`python -m spanet.train -of options_files/full_hadronic_ttbar/example.json --gpus NUM_GPUS` \nwhere `NUM_GPUS` is the number of gpus available on your machine.\n\n### Evaluation\n\nOnce training is complete, you may evalute a network on\na testing dataset by running `spanet.test` with a path to your previously\ntrained network and a file on which to evalute on.\n\nFor example, after running the previous training run on `ttbar_example`, \nyou can evaluate the network again on the example dataset by running.\n`python -m spanet.test ./spanet_output/version_0 -tf data/full_hadronic_ttbar/example.h5`\n\nNote that the included example file is very small and you will likely not\nsee very good performance on it.\n\n### Exporting\n\nOnce you are happy with your model, you can export it to an [ONNX](https://onnxruntime.ai/) file to use in external applications. This can be done by running `spanet.export` with the log directory and the desired output file. For example: `python -m spanet.export ./spanet_output/version_0 spanet.onnx`.\n\nNote that only the neural network is able to be exported, and this network outputs the full reconstruction distributions for every event. Unfortunately, the reconstruction algorithm defined [here](spanet/network/prediction_selection.py) cannot be exported as part of the ONNX graph. If your target application uses python, then you can simply use SPANet's selection algorithm, but non-python applications must define their own selection algorithm.\n\nYou may examine all of the inputs and outputs with the following snippet:\n```python\nimport onnxruntime    # to inference ONNX models, we use the ONNX Runtime\n\nsession = onnxruntime.InferenceSession(\n    \"./spanet.onnx\", \n    providers=['CUDAExecutionProvider', 'CPUExecutionProvider']\n)\n\nprint(\"Inputs:\", [input.name for input in session.get_inputs()])\nprint(\"Outputs:\", [output.name for output in session.get_outputs()])\n```\n\n#### Inputs\n\n| Input                     | Shape       | DType |\n|---------------------------|-------------|-------|\n| {sequential_input_1}_data | (B, N1, D1) | float |\n| {sequential_input_1}_mask | (B, N1)     | bool  |\n| {sequential_input_2}_data | (B, N2, D2) | float |\n| {sequential_input_2}_mask | (B, N2)     | bool  |\n| {global_input_1}_data     | (B, 1, D1)  | float |\n| {global_input_1}_mask     | (B, 1)      | bool  |\n| {global_input_2}_data     | (B, 1, D2)  | float |\n| {global_input_2}_mask     | (B, 1)      | bool  |\n\nThe ONNX model expects two inputs for every `INPUT` defined in the event file. Replace the values in the braces with their appropriate names. The data contains the features for each input. The features must be provided in the **exact order** that they are defined in the event file. Notice that global inputs require a dummy axis to be added to match the overall shape of the sequential inputs. \n\n**Log Features:** Any features marked either `log` or `log_normalize` must have the following preprocessing transformation applied `f(x) -> log(x + 1)`. You can skip this log preprocessing and have it performed by the network if you specify `--input-log-transform`. However, this operation is expensive to perform by the graph, so we recommend you apply it during your data pipeline for maximum efficiency.\n\n#### Outputs\n| Output                                    | Shape          | DType |\n|-------------------------------------------|----------------|-------|\n| {event_particle_1}_assignment_probability | (B, N, N, ...) | float |\n| {event_particle_2}_assignment_probability | (B, N, N, ...) | float |\n| {event_particle_1}_detection_probability  | (B)            | float |\n| {event_particle_2}_detection_probability  | (B)            | float |\n| {regression_target_1}                     | (B)            | float |\n| {regression_target_2}                     | (B)            | float |\n| {classification_target_1}                 | (B, C)         | float |\n| {classification_target_2}                 | (B, C)         | float |\n\nThe ONNX model may produce any of the valid output heads. Each event partile defined produces an assignment distribution for its reconstruction. This distribution with be a singlet/doublet/triplet/etc. joint distribution depending on the number of decay products defined for each particle. The shape will reflect this number of products. For example, if a particle has two decay products, then its `assignment_log_probability` will have a shape of `(B, N, N)`. Each particle also has associated with it a `detection probability` which indicates how likely the particle is to be reconstructable.\n\nThe additional outputs will only be present if you define any `REGRESSION` or `CLASSIFICATION` outputs in the event file. Each of the definitions will be add an extra output. The regression outputs simply contain the predicted value for each regression target. The classification outputs contain a distribution over possible classes for each target.\n\n**Log Probability vs. Probability** For additional numerical stability, you may choose to output the log distributions, `log P(x)`, for all probability outputs instead. If you specify `--output-log-transform` in the export script, then the `*_assignment_probability` and `*_detection_probability` outputs will be replaced with `*_assignment_log_probability` and `*_detection_log_probability`. The classification outputs will also be represented as log-probabilities, although the name will not change.\n\n## Citation\nIf you use this software for a publication, please cite the following:\n```bibtex\n@Article{10.21468/SciPostPhys.12.5.178,\n\ttitle={{SPANet: Generalized permutationless set assignment for particle physics  using symmetry preserving attention}},\n\tauthor={Alexander Shmakov and Michael James Fenton and Ta-Wei Ho and Shih-Chieh Hsu and Daniel Whiteson and Pierre Baldi},\n\tjournal={SciPost Phys.},\n\tvolume={12},\n\tpages={178},\n\tyear={2022},\n\tpublisher={SciPost},\n\tdoi={10.21468/SciPostPhys.12.5.178},\n\turl={https://scipost.org/10.21468/SciPostPhys.12.5.178},\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Alexanders101/SPANet",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spanet",
    "package_url": "https://pypi.org/project/spanet/",
    "platform": null,
    "project_url": "https://pypi.org/project/spanet/",
    "project_urls": {
      "Homepage": "https://github.com/Alexanders101/SPANet"
    },
    "release_url": "https://pypi.org/project/spanet/2.1.1/",
    "requires_dist": [
      "torch (>=1.12)",
      "numpy (>=1.22)",
      "h5py (>=3.7)",
      "numba (>=0.55)",
      "pytorch-lightning",
      "tqdm",
      "sympy",
      "pyyaml",
      "opt-einsum",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "Symmetry Preserving Attention Networks",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17197319,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb1bf8154de174f7edbcc76e222eb5a44f3289e35cd243e4af0cf1323ab31003",
          "md5": "262bd54ef12fa14e6c74c05dce0a924d",
          "sha256": "aafdc2ae1d7709bce42ffdb4a1ad715b0df2e9bd5c14d9bea4735f02f7969a93"
        },
        "downloads": -1,
        "filename": "spanet-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "262bd54ef12fa14e6c74c05dce0a924d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 91119,
        "upload_time": "2022-10-31T19:56:23",
        "upload_time_iso_8601": "2022-10-31T19:56:23.267268Z",
        "url": "https://files.pythonhosted.org/packages/eb/1b/f8154de174f7edbcc76e222eb5a44f3289e35cd243e4af0cf1323ab31003/spanet-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61068c01621f234ccafc9ece74c14eaf1d5fed5d00571f01e09d666aea9816f8",
          "md5": "82f3bc04d704d4445cfb351f58832b2d",
          "sha256": "4b41da504f07c32529b6ce06bcf0b985c4354b70b4267a5277a5bd1694ec2c28"
        },
        "downloads": -1,
        "filename": "spanet-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "82f3bc04d704d4445cfb351f58832b2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61199,
        "upload_time": "2022-10-31T19:56:25",
        "upload_time_iso_8601": "2022-10-31T19:56:25.050129Z",
        "url": "https://files.pythonhosted.org/packages/61/06/8c01621f234ccafc9ece74c14eaf1d5fed5d00571f01e09d666aea9816f8/spanet-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83dde6c394a5f940318f5cfa50aa1ed028f2941467c5932e485e808e00190375",
          "md5": "627df511068e5da33ab1e31d4dc4cb96",
          "sha256": "1b339d246e1b1bafd6f7be5157093baad06cfb1880b15ec14b31ccdf47824d3f"
        },
        "downloads": -1,
        "filename": "spanet-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "627df511068e5da33ab1e31d4dc4cb96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 93869,
        "upload_time": "2022-11-04T17:56:47",
        "upload_time_iso_8601": "2022-11-04T17:56:47.170218Z",
        "url": "https://files.pythonhosted.org/packages/83/dd/e6c394a5f940318f5cfa50aa1ed028f2941467c5932e485e808e00190375/spanet-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cae4c3d45bde61a445e1f27b5824e803f7d1f43fd523258572238308b0600a1",
          "md5": "e84e44a294757e50039911e697ea4af6",
          "sha256": "a8a568d2e7d4cf70603e2f4c2fdc9ff6e5e147053c02a3b16c9fc566ab8e42fa"
        },
        "downloads": -1,
        "filename": "spanet-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e84e44a294757e50039911e697ea4af6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63896,
        "upload_time": "2022-11-04T17:56:49",
        "upload_time_iso_8601": "2022-11-04T17:56:49.421568Z",
        "url": "https://files.pythonhosted.org/packages/3c/ae/4c3d45bde61a445e1f27b5824e803f7d1f43fd523258572238308b0600a1/spanet-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e59db769f824108199ef2dd408aaecbabfad02a09ee5d25fdda30195d511fd3c",
          "md5": "096c5f667697a196f233519f738c9813",
          "sha256": "83affe1bd12d8d45acab3a9f7c3233b41b6c67417bd003362a5ed869d84f8436"
        },
        "downloads": -1,
        "filename": "spanet-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "096c5f667697a196f233519f738c9813",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97861,
        "upload_time": "2023-03-01T17:27:04",
        "upload_time_iso_8601": "2023-03-01T17:27:04.993593Z",
        "url": "https://files.pythonhosted.org/packages/e5/9d/b769f824108199ef2dd408aaecbabfad02a09ee5d25fdda30195d511fd3c/spanet-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "953eaf5b92e627ad0ac75d7231fcd275019ce5f675d24c44a73e3e4a9e408d59",
          "md5": "dbd45a2b33729494572e6587e6c0e5d8",
          "sha256": "5f4a0819135823e8608204988a5868fd77cad96c76fdcd3f6f8c381c8db44161"
        },
        "downloads": -1,
        "filename": "spanet-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dbd45a2b33729494572e6587e6c0e5d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69467,
        "upload_time": "2023-03-01T17:23:47",
        "upload_time_iso_8601": "2023-03-01T17:23:47.616564Z",
        "url": "https://files.pythonhosted.org/packages/95/3e/af5b92e627ad0ac75d7231fcd275019ce5f675d24c44a73e3e4a9e408d59/spanet-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9e296d5a6c2d8d9d3ec5b0375b025086857303752d1bc641a869a6808d7a6ab",
          "md5": "006201bfbc62e182aafb6ea82d62e359",
          "sha256": "3c3997df921f2948d3c864fecf213dd4f1ca6ea9e918019247838b33722a5ff0"
        },
        "downloads": -1,
        "filename": "spanet-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "006201bfbc62e182aafb6ea82d62e359",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97855,
        "upload_time": "2023-03-07T22:44:18",
        "upload_time_iso_8601": "2023-03-07T22:44:18.117661Z",
        "url": "https://files.pythonhosted.org/packages/c9/e2/96d5a6c2d8d9d3ec5b0375b025086857303752d1bc641a869a6808d7a6ab/spanet-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8c77702aaf4df05f8f9c4bf5e5b32f6ce75710f41716d5e889ab3cb48370938",
          "md5": "a3ec1d70ea522894dddd15897fc19d58",
          "sha256": "1c979dde16a9cd9ffb642306edf581b5c3f8db92dd8699666f92836cf6596e64"
        },
        "downloads": -1,
        "filename": "spanet-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a3ec1d70ea522894dddd15897fc19d58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69015,
        "upload_time": "2023-03-07T22:44:19",
        "upload_time_iso_8601": "2023-03-07T22:44:19.964319Z",
        "url": "https://files.pythonhosted.org/packages/b8/c7/7702aaf4df05f8f9c4bf5e5b32f6ce75710f41716d5e889ab3cb48370938/spanet-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9e296d5a6c2d8d9d3ec5b0375b025086857303752d1bc641a869a6808d7a6ab",
        "md5": "006201bfbc62e182aafb6ea82d62e359",
        "sha256": "3c3997df921f2948d3c864fecf213dd4f1ca6ea9e918019247838b33722a5ff0"
      },
      "downloads": -1,
      "filename": "spanet-2.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "006201bfbc62e182aafb6ea82d62e359",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 97855,
      "upload_time": "2023-03-07T22:44:18",
      "upload_time_iso_8601": "2023-03-07T22:44:18.117661Z",
      "url": "https://files.pythonhosted.org/packages/c9/e2/96d5a6c2d8d9d3ec5b0375b025086857303752d1bc641a869a6808d7a6ab/spanet-2.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8c77702aaf4df05f8f9c4bf5e5b32f6ce75710f41716d5e889ab3cb48370938",
        "md5": "a3ec1d70ea522894dddd15897fc19d58",
        "sha256": "1c979dde16a9cd9ffb642306edf581b5c3f8db92dd8699666f92836cf6596e64"
      },
      "downloads": -1,
      "filename": "spanet-2.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a3ec1d70ea522894dddd15897fc19d58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 69015,
      "upload_time": "2023-03-07T22:44:19",
      "upload_time_iso_8601": "2023-03-07T22:44:19.964319Z",
      "url": "https://files.pythonhosted.org/packages/b8/c7/7702aaf4df05f8f9c4bf5e5b32f6ce75710f41716d5e889ab3cb48370938/spanet-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}