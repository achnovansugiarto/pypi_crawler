{
  "info": {
    "author": "Soumil Nitin Shah",
    "author_email": "soushah@my.bridgeport.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "----------------------------------------\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)]\n---------------------------\n\n\n# Elastic Search Query Generator  \n\n#### what is Elastic Search Query Generator ?\n* While i was working with Elastic Search i found it very difficult to write complex queries as most of query are deep Nested \n*  Thats the reason i decided to make a helper class that can generate complex Elastic Search query in Seconds \n* Library can be used to generate complex aggregation  Query , Geo location Query (AND | OR | NOT ) any set of combination is possible \n* in addition to all mentioned above you can also generate auto complete query in matter of seconds \n* please see examples below on how to use this module.\n* if you have any questions or suggestion please drop me an email at shahsoumil519@gmail.com\n\n\n* Learn More : https://www.youtube.com/watch?v=C-JKcMM6IXE&t=2548s\n\n## documentation :\n* UML Diagram \n\n\n![Capture](https://user-images.githubusercontent.com/39345855/96332462-17e19100-1032-11eb-930e-8deb98f94675.JPG)\n\n*  Constructor: \n    * Size: How Many Documents should the Query Return\n    * BucketName: is optional pass a name for Aggregation \n    * Source: Basically what fields you want to return takes a List Argument source= [“f1”, “f2”, …..]\n    * Min_score: used for filtering large documents average threshold is set to 0.5\n\n* Field:\n    * This is column or field you would like to search\n\n* Boost:\n    * If you want to Boost certain field pass a integer value \n\n\n* Operation\n    * There are four main operation you can pass \n            * Should         ( OR Operation)\n            * Must \t      (AND operation)\n            * Filter           (FILTER Result )\n            * Must_not   (NOT Operation )\n * Analyzer:  \n    * you can specify various analyzer such as stop etc \n\n## Installation\n\n```bash\npip install elasticsearchquerygenerator\n```\n## Usage\n\n\n```python\nfrom elasticsearchquerygenerator.elasticsearchquerygenerator import ElasticSearchQuery\nimport json\n\ndef main():\n    helper = ElasticSearchQuery(size=100, BucketName=\"MyBuckets\")\n\n    # match phrase\n    query=helper.match_phrase(field=\"myfeild\", value=\"myvalue\", operation='must')\n\n    # terms\n    query=helper.terms(field=\"myfeild\", value=\"myvalue\", operation='must')\n\n    # Feild Exists\n    query = helper.exists(field='comp feild', operation=\"must\")\n\n    #Match\n    query=helper.match(field=\"MMMMM\", value=\"myvalue\", operation='must')\n\n    # Geo Queires\n    query = helper.add_geoqueries(radius=\"100\", lat=\"22\", lon=\"33\")\n\n    # Aggreation\n    helper.add_aggreation(aggregate_name=\"FirstName\", field=\"field1\",type='terms',sort='desc', size=3)\n    helper.add_aggreation(aggregate_name=\"SecondName\", field=\"field2\",type='terms',sort='desc', size=3)\n    helper.add_aggreation(aggregate_name=\"ThirdName\", field=\"field3\",type='terms',sort='desc', size=3)\n    query = helper.complete_aggreation()\n    query = helper.query_string(default_field=\"DEFAULT\",query=\"X OR  Y\",operation='must')\n\n    query = helper.add_geo_aggreation(field=\"AAAA\", lat=\"22\", lon=\"43\",aggregate_name=\"my_distance\")\n\n    print(json.dumps(query, indent=3))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n```\n```json\n{\n   \"_source\": [],\n   \"size\": 100,\n   \"min_score\": 0.5,\n   \"query\": {\n      \"bool\": {\n         \"must\": [\n            {\n               \"match_phrase\": {\n                  \"myfeild\": {\n                     \"query\": \"myvalue\"\n                  }\n               }\n            },\n            {\n               \"match_phrase\": {\n                  \"myfeild\": {\n                     \"query\": \"myvalue\"\n                  }\n               }\n            },\n            {\n               \"term\": {\n                  \"myfeild\": \"myvalue\"\n               }\n            },\n            {\n               \"exists\": {\n                  \"field\": \"comp feild\"\n               }\n            },\n            {\n               \"match\": {\n                  \"MMMMM\": {\n                     \"query\": \"myvalue\"\n                  }\n               }\n            },\n            {\n               \"match\": {\n                  \"MMMMM\": {\n                     \"query\": \"myvalue\"\n                  }\n               }\n            },\n            {\n               \"query_string\": {\n                  \"default_field\": \"DEFAULT\",\n                  \"query\": \"X OR  Y\"\n               }\n            }\n         ],\n         \"filter\": [\n            {\n               \"geo_distance\": {\n                  \"distance\": \"100mi\",\n                  \"null\": {\n                     \"lat\": \"22\",\n                     \"lon\": \"33\"\n                  }\n               }\n            }\n         ],\n         \"should\": [],\n         \"must_not\": []\n      }\n   },\n   \"aggs\": {\n      \"FirstName\": {\n         \"terms\": {\n            \"field\": \"field1\",\n            \"order\": {\n               \"_count\": \"desc\"\n            },\n            \"size\": 3\n         }\n      },\n      \"SecondName\": {\n         \"terms\": {\n            \"field\": \"field2\",\n            \"order\": {\n               \"_count\": \"desc\"\n            },\n            \"size\": 3\n         }\n      },\n      \"ThirdName\": {\n         \"terms\": {\n            \"field\": \"field3\",\n            \"order\": {\n               \"_count\": \"desc\"\n            },\n            \"size\": 3\n         }\n      },\n      \"my_distance\": {\n         \"geo_distance\": {\n            \"field\": \"AAAA\",\n            \"origin\": \"22,43\",\n            \"unit\": \"mi\",\n            \"ranges\": [\n               {\n                  \"to\": 0\n               },\n               {\n                  \"from\": 0,\n                  \"to\": 25\n               },\n               {\n                  \"from\": 25,\n                  \"to\": 50\n               },\n               {\n                  \"from\": 50,\n                  \"to\": 75\n               },\n               {\n                  \"from\": 75,\n                  \"to\": 100\n               },\n               {\n                  \"from\": 100\n               }\n            ]\n         }\n      }\n   }\n}\n\n```\n\n\n### Example 2\n\n```python\nfrom elasticsearchquerygenerator.elasticsearchquerygenerator import ElasticSearchQuery\nimport json\n\ndef autocomplete():\n    helper = ElasticSearchQuery(size=0, BucketName=\"MyBuckets\")\n    query  = helper.autocomplete_1(field=\"title\",value=\"n\", size=25,sort='desc')\n    print(json.dumps(query, indent=3))\n\n\nif __name__ == \"__main__\":\n    main(autocomplete\n\n```\n```json\n{\n   \"_source\": [],\n   \"size\": 0,\n   \"min_score\": 0.5,\n   \"query\": {\n      \"bool\": {\n         \"must\": [\n            {\n               \"match_phrase_prefix\": {\n                  \"title\": {\n                     \"query\": \"n\"\n                  }\n               }\n            }\n         ],\n         \"filter\": [],\n         \"should\": [],\n         \"must_not\": []\n      }\n   },\n   \"aggs\": {\n      \"auto_complete\": {\n         \"terms\": {\n            \"field\": \"title\",\n            \"order\": {\n               \"_count\": \"desc\"\n            },\n            \"size\": 25\n         }\n      }\n   }\n}\n```\n\n\n##### i would be adding more examples and making it better and better \n\n## Authors\n\n## Soumil Nitin Shah\n#### Contributor \n**  sasirajpuvvada ** \n\n\n----------------------------------------------------------\n\n\n* Excellent experience of building scalable and high-performance Software Applications combining distinctive skill sets in Internet of Things (IoT), Machine Learning and Full Stack Web Development in Python.\n\nBachelor in Electronic Engineering |\nMasters in Electrical Engineering | \nMaster in Computer Engineering |\n\n* Website : https://soumilshah.herokuapp.com\n* Github: https://github.com/soumilshah1995\n* Linkedin: https://www.linkedin.com/in/shah-soumil/\n* Blog: https://soumilshah1995.blogspot.com/\n* Youtube : https://www.youtube.com/channel/UC_eOodxvwS_H7x2uLQa-svw?view_as=subscriber\n* Facebook Page : https://www.facebook.com/soumilshah1995/\n* Email : shahsoumil519@gmail.com\n\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.me/soumilshah1995)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/soumilshah1995/elasticsearchquerygenerator.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "elasticsearchquerygenerator",
    "package_url": "https://pypi.org/project/elasticsearchquerygenerator/",
    "platform": "",
    "project_url": "https://pypi.org/project/elasticsearchquerygenerator/",
    "project_urls": {
      "Homepage": "https://github.com/soumilshah1995/elasticsearchquerygenerator.git"
    },
    "release_url": "https://pypi.org/project/elasticsearchquerygenerator/5.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": " Create Complex Elastic Search Query in Seconds Please see documentation for more details",
    "version": "5.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9306454,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f02fb9524831509df508a9a8b528137475b96d5de6a581af81bb176843feb7d",
          "md5": "4483d661217236c54cf708c7da5a4587",
          "sha256": "7031767359fe930d6d27901e1979835cf72b57998afba7705fb9614fb35757bc"
        },
        "downloads": -1,
        "filename": "elasticsearchquerygenerator-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4483d661217236c54cf708c7da5a4587",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17719,
        "upload_time": "2020-10-17T05:14:32",
        "upload_time_iso_8601": "2020-10-17T05:14:32.743544Z",
        "url": "https://files.pythonhosted.org/packages/5f/02/fb9524831509df508a9a8b528137475b96d5de6a581af81bb176843feb7d/elasticsearchquerygenerator-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dc1d629b6130aeb554289afc5cc2c0052af38aa8bff4a5b7ff6136eecc4063d",
          "md5": "14cb76acd7958e3e8dc6cac53b90b0e9",
          "sha256": "6ac377ae8a14797fc370c3d903c99f976d7e5b6feda4063e7fa0bdc1b650a87e"
        },
        "downloads": -1,
        "filename": "elasticsearchquerygenerator-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14cb76acd7958e3e8dc6cac53b90b0e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17724,
        "upload_time": "2020-10-17T05:17:27",
        "upload_time_iso_8601": "2020-10-17T05:17:27.421765Z",
        "url": "https://files.pythonhosted.org/packages/9d/c1/d629b6130aeb554289afc5cc2c0052af38aa8bff4a5b7ff6136eecc4063d/elasticsearchquerygenerator-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69c9c5febf2506ebe5891f0801c7cefb0baaf196b4d34ad92329aeb16038ba34",
          "md5": "feaac24eb8585fe4a3a8912e094dbb85",
          "sha256": "45d47ba5345ce3a71c012c73b6311bde9bbba4c965d11d6ef3780368c66db167"
        },
        "downloads": -1,
        "filename": "elasticsearchquerygenerator-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "feaac24eb8585fe4a3a8912e094dbb85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18260,
        "upload_time": "2020-10-17T08:53:13",
        "upload_time_iso_8601": "2020-10-17T08:53:13.140065Z",
        "url": "https://files.pythonhosted.org/packages/69/c9/c5febf2506ebe5891f0801c7cefb0baaf196b4d34ad92329aeb16038ba34/elasticsearchquerygenerator-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99f4560b10b999df7e971b7d0c1f8673807642677077c0a671298f0b72737bc0",
          "md5": "647f51828bbe50f218664eba6a815b48",
          "sha256": "765703a89e79cecbfffdb4b10c224e98ff5154cc23e053e87f394d78ca67ec00"
        },
        "downloads": -1,
        "filename": "elasticsearchquerygenerator-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "647f51828bbe50f218664eba6a815b48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18260,
        "upload_time": "2020-10-17T08:53:14",
        "upload_time_iso_8601": "2020-10-17T08:53:14.742727Z",
        "url": "https://files.pythonhosted.org/packages/99/f4/560b10b999df7e971b7d0c1f8673807642677077c0a671298f0b72737bc0/elasticsearchquerygenerator-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f03ee1fc9d43db2b426e6f96a97db78ee375b4c9212ab1b9ca941609aa0b6a2c",
          "md5": "16d1703c6db605d00d3cc8185c6c1453",
          "sha256": "d9ef26a288089373e2e3ac7230f182d04f356375b04819c1720d28c7d02955dc"
        },
        "downloads": -1,
        "filename": "elasticsearchquerygenerator-5.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16d1703c6db605d00d3cc8185c6c1453",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18658,
        "upload_time": "2021-02-03T14:02:16",
        "upload_time_iso_8601": "2021-02-03T14:02:16.186382Z",
        "url": "https://files.pythonhosted.org/packages/f0/3e/e1fc9d43db2b426e6f96a97db78ee375b4c9212ab1b9ca941609aa0b6a2c/elasticsearchquerygenerator-5.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f03ee1fc9d43db2b426e6f96a97db78ee375b4c9212ab1b9ca941609aa0b6a2c",
        "md5": "16d1703c6db605d00d3cc8185c6c1453",
        "sha256": "d9ef26a288089373e2e3ac7230f182d04f356375b04819c1720d28c7d02955dc"
      },
      "downloads": -1,
      "filename": "elasticsearchquerygenerator-5.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16d1703c6db605d00d3cc8185c6c1453",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18658,
      "upload_time": "2021-02-03T14:02:16",
      "upload_time_iso_8601": "2021-02-03T14:02:16.186382Z",
      "url": "https://files.pythonhosted.org/packages/f0/3e/e1fc9d43db2b426e6f96a97db78ee375b4c9212ab1b9ca941609aa0b6a2c/elasticsearchquerygenerator-5.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}