{
  "info": {
    "author": "Bas Wijnen",
    "author_email": "wijnen@debian.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Networking"
    ],
    "description": "python-network\n==============\n\nEasy tcp, unix socket and avahi networking from python.\n\nThis module provides 4 clases for networking support from Python:\n\nSocket\nServer\n\nAdditionally, there are two convenience functions, bgloop and fgloop, which\nwill enter the glib main loop.  Before that, bgloop will fork, so it returns\ncontrol of the terminal to the calling application.  When starting servers this\nis useful: it will only return after the server is running, so there is no race\ncondition for \"the server was started, but not accepting connections yet\".\n\nInstances of the Socket class are the connection objects. Server objects wait\nfor connections and create the corresponding sockets as calls come in.\n\nSocket addresses can have several types. For connecting (client side), they may\nbe:\n\nport\t\tconnect to port on localhost.\nhost:port\tconnect to port on host.\nservice|\tconnect to first avahi service with name (strictly,\n\t\t_service._tcp).\nservice|regex\tconnect to the first avahi service for which the long name\n\t\tmatches regular expression.\n/path/to/socket\tconnect to a unix domain socket. The name must include at least\n\t\tone forward slash.\n\nFor listening (server side), they may be:\nport\t\t\tlisten on port on localhost.\nservice|name\t\tlisten on random port, publish service with long name.\nservice|name|port\tlisten on port, publish avahi service.\n/path/to/socket\t\tlisten on a unix domain socket, which must not exist.\n\t\t\tThe name must include at least one forward slash.\n\nIn all cases, port may be a number or a service name from /etc/services.\n\nInterface:\n\ns = network.Socket (address, tls = True, disconnect_cb = None)\n\t# Create a socket, connect to address.\n\t# If tls is True, TLS will be used to create a secure socket.\n\t# If disconnect_cb is a function, it is called (with leftover data as\n\t# \targument) when the socket is closed.  If not set, it will\n\t# \traise EOFError when the socket closes.\ns.disconnect_cb(cb)\n\t# Set or change disconnect_cb.  Set to None to raise EOFError on close.\ns.close()\n\t# Close connection.\ns.send(data)\n\t# Send a string of data.\ndata = s.recv(maxsize = 4096)\n\t# Receive at most maxsize bytes.\ns.read(callback, maxsize = 4096)\n\t# Let the main loop wait for data, read it, and call the callback when it arrives.\ns.rawread(callback)\n\t# Like read, but don't read the data.\ns.readlines(callback, maxsize = 4096):\n\t# Like read, but the data is buffered and the callback is called once\n\t# per received line ('\\n'-separated).\n\t# The newline is not passed to the callback.\ndata = s.unread()\n\t# Stop read callback; return any unparsed data from the readlines buffer.\n\ns = network.Server(port, obj, address = '', backlog = 5, tls = None, disconnect_cb = None)\n\t# Start a server. When a new connection is accepted, obj is called with\n\t# the resulting socket.  You will normally want obj to be a class, so a\n\t# new object is constructed for each connection.  In its constructor,\n\t# you should then set a read callback.\n\t# address is the address to listen on (default everything; it can be\n\t# set to '0.0.0.0' to disable IPv6, to '127.0.0.1' to limit connections\n\t# to localhost, etc.)\n\t# backlog is the number of connections to allow in the queue while the\n\t# server didn't accept them yet.\n\t# If tls is False, the connection will not be encrypted.  Otherwise it\n\t# will be; a certificate will be created if there is none in the\n\t# configuration directory (normally ~/.local/share/network/*/).\ns.disconnect_cb(cb)\n\t# Set a new disconnect callback.\ns.close()\n\t# Stop the server.\n\nCallback signatures:\nSocket.read: cb(bytes)\nSocket.rawread: cb()\nSocket.readlines: cb(str)\t# does not contain newline.\nServer.obj: cb(Socket)\n\nWhen a socket is disconnected, the remote end calls disconnect_cb if set,\notherwise it raises EOFError.  Disconnect_cb can be unset by calling it with\nNone.\n\nAll callbacks (listening, client receiving) are triggered by the glib main\nloop, so that must be running to receive the events.  {fg,bg}loop() are\nprovided so programs using this module don't need to import glib itself.  Gtk\nuses the same main loop, so any gtk program will not need to do anything\nspecial.\n\nThe server and avahi code will be disabled if the respective modules are not\navailable.\n\nSimple example for the servers.\n------------------------------------------------------------------------------\n#!/usr/bin/env python\n# example for network servers.\nimport network\n\nclass Object:\n\tdef __init__(self, socket):\n\t\tself.socket = socket\n\t\tself.socket.send('Welcome to this server!')\n\t\tself.socket.readlines(line)\n\tdef line(self, l):\n\t\tprint('data received: %s' % l)\n\t\tself.socket.send('This is a reply.')\n\nserver = network.Server(1234, Object)\n\nnetwork.fgloop()\n------------------------------------------------------------------------------\n\nAnd for the clients.\n------------------------------------------------------------------------------\n#!/usr/bin/env python\n# example for network clients.\nimport network\n\nclient = network.Socket('localhost:1234')\nclient.send('This is data.')\nprint('The server replied: %s' % client.recv())\n------------------------------------------------------------------------------\n",
    "description_content_type": "text/plain",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wijnen/python-network",
    "keywords": "",
    "license": "AGPL3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "network-wrapper",
    "package_url": "https://pypi.org/project/network-wrapper/",
    "platform": null,
    "project_url": "https://pypi.org/project/network-wrapper/",
    "project_urls": {
      "Bug Tracker": "https://github.com/wijnen/python-network/issues",
      "Homepage": "https://github.com/wijnen/python-network"
    },
    "release_url": "https://pypi.org/project/network-wrapper/0.4/",
    "requires_dist": [
      "fhs-paths"
    ],
    "requires_python": ">=3",
    "summary": "module for easy networking",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16925716,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25afa6bd4c0b6811fccbc313150a62d97281890a33931f8c167c1ed511183f28",
          "md5": "3b3c30575c73b49b56ce6f835f888867",
          "sha256": "595021335b673bd0796e6099ef4b969b40618b7d708690614526caf41fb952f2"
        },
        "downloads": -1,
        "filename": "network_wrapper-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b3c30575c73b49b56ce6f835f888867",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 23138,
        "upload_time": "2022-04-21T21:34:42",
        "upload_time_iso_8601": "2022-04-21T21:34:42.009720Z",
        "url": "https://files.pythonhosted.org/packages/25/af/a6bd4c0b6811fccbc313150a62d97281890a33931f8c167c1ed511183f28/network_wrapper-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88b9972abe274208e979138c435596405163886ca7ec8eb5c681e705b56177ab",
          "md5": "f20c61436959815596d5f639cc0a8fa9",
          "sha256": "10821631ef0f70b3c4fb8d448713e9b0d21f3aea82c1903b8db119343eda4bca"
        },
        "downloads": -1,
        "filename": "network-wrapper-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f20c61436959815596d5f639cc0a8fa9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 24529,
        "upload_time": "2022-04-21T21:34:43",
        "upload_time_iso_8601": "2022-04-21T21:34:43.438176Z",
        "url": "https://files.pythonhosted.org/packages/88/b9/972abe274208e979138c435596405163886ca7ec8eb5c681e705b56177ab/network-wrapper-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e2b4a5a1ce26935a31aaba78f1881383b64370cbbf774d7d8b7a69fdf330d3e",
          "md5": "d6b3c148d9705efd48b8482b21a439c4",
          "sha256": "775cce96567e871cf996f8945e410b82f419c7b15c42e0060bb1e9d9974e442d"
        },
        "downloads": -1,
        "filename": "network_wrapper-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6b3c148d9705efd48b8482b21a439c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 23123,
        "upload_time": "2022-05-31T11:27:58",
        "upload_time_iso_8601": "2022-05-31T11:27:58.040783Z",
        "url": "https://files.pythonhosted.org/packages/4e/2b/4a5a1ce26935a31aaba78f1881383b64370cbbf774d7d8b7a69fdf330d3e/network_wrapper-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "326ff245a3cf03a4d7056cef18125e71951cdbfce3b5620e3486fb7a58d3c715",
          "md5": "431637285154f7c5873de54bd12791f3",
          "sha256": "bf60f6db324df532d947a4f6d3d09b450e86a9204f79b2939ba99cddb4e5390d"
        },
        "downloads": -1,
        "filename": "network-wrapper-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "431637285154f7c5873de54bd12791f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 24511,
        "upload_time": "2022-05-31T11:27:59",
        "upload_time_iso_8601": "2022-05-31T11:27:59.512304Z",
        "url": "https://files.pythonhosted.org/packages/32/6f/f245a3cf03a4d7056cef18125e71951cdbfce3b5620e3486fb7a58d3c715/network-wrapper-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9a902fe8947500c02c8e5b179fd66338a0bbcaf8702097d7012c7008a575836",
          "md5": "61c9d0c9fa785ad6718b5d13a9c2969a",
          "sha256": "fe0f38ab32c9f1822bb735ec8847f8f401af3ed31efa058a99322ee3882e9532"
        },
        "downloads": -1,
        "filename": "network_wrapper-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61c9d0c9fa785ad6718b5d13a9c2969a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 23482,
        "upload_time": "2023-02-19T07:42:00",
        "upload_time_iso_8601": "2023-02-19T07:42:00.361359Z",
        "url": "https://files.pythonhosted.org/packages/f9/a9/02fe8947500c02c8e5b179fd66338a0bbcaf8702097d7012c7008a575836/network_wrapper-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a609a73658ff0bd4447387677dc36c5ac239890a85fdbbce601a6aea8cb09f2",
          "md5": "3e9a000deff9deff3be8dbc6feb45a4d",
          "sha256": "76963b200355c265519b33580110c0d899067cce9d5ce04c762cd5b4416ad98d"
        },
        "downloads": -1,
        "filename": "network-wrapper-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3e9a000deff9deff3be8dbc6feb45a4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 24834,
        "upload_time": "2023-02-19T07:42:02",
        "upload_time_iso_8601": "2023-02-19T07:42:02.203382Z",
        "url": "https://files.pythonhosted.org/packages/8a/60/9a73658ff0bd4447387677dc36c5ac239890a85fdbbce601a6aea8cb09f2/network-wrapper-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9a902fe8947500c02c8e5b179fd66338a0bbcaf8702097d7012c7008a575836",
        "md5": "61c9d0c9fa785ad6718b5d13a9c2969a",
        "sha256": "fe0f38ab32c9f1822bb735ec8847f8f401af3ed31efa058a99322ee3882e9532"
      },
      "downloads": -1,
      "filename": "network_wrapper-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "61c9d0c9fa785ad6718b5d13a9c2969a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 23482,
      "upload_time": "2023-02-19T07:42:00",
      "upload_time_iso_8601": "2023-02-19T07:42:00.361359Z",
      "url": "https://files.pythonhosted.org/packages/f9/a9/02fe8947500c02c8e5b179fd66338a0bbcaf8702097d7012c7008a575836/network_wrapper-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a609a73658ff0bd4447387677dc36c5ac239890a85fdbbce601a6aea8cb09f2",
        "md5": "3e9a000deff9deff3be8dbc6feb45a4d",
        "sha256": "76963b200355c265519b33580110c0d899067cce9d5ce04c762cd5b4416ad98d"
      },
      "downloads": -1,
      "filename": "network-wrapper-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "3e9a000deff9deff3be8dbc6feb45a4d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 24834,
      "upload_time": "2023-02-19T07:42:02",
      "upload_time_iso_8601": "2023-02-19T07:42:02.203382Z",
      "url": "https://files.pythonhosted.org/packages/8a/60/9a73658ff0bd4447387677dc36c5ac239890a85fdbbce601a6aea8cb09f2/network-wrapper-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}