{
  "info": {
    "author": "Siddhesh Chavan",
    "author_email": "siddheshchavan2020@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyEventLogger v1.1\r\n\r\npyEventLogger is a simple Python Library for making customized Logs of certain events that occur in a program. The logs\r\ncan be fully customized and can be printed in colored format or can be stored in a file.\r\n\r\n**Note: Your software or the console in which you are going to print _colored logs_ should support the ANSI Escape\r\nSequences or the _colored logs_ feature may not work!**\r\n\r\n## Installation\r\n\r\nTo install this library, type:\r\n\r\n```bash\r\npip install pyEventLogger\r\n```\r\n\r\nin the Command Prompt or Terminal\r\n\r\n## Import\r\n\r\nTo import this library, use the following code:\r\n\r\n```python\r\nfrom pyEventLogger import pyLogger\r\n```\r\n\r\n## Logging Levels:\r\n\r\nThere are 6 different types of logs in this library. In order of increasing importance, they are:\r\n\r\n* Debug\r\n* Info\r\n* Warning\r\n* Success\r\n* Error\r\n* Critical\r\n\r\n## Print basic logs:\r\n\r\nUse the following program to print basic logs in the Console:\r\n\r\n```python\r\nfrom pyEventLogger import pyLogger  # Import the library\r\n\r\nlogger = pyLogger(colored_output=True)  # Make an object of the pyLogger Class\r\n# Note: If your console doesn't support the ANSI Escape Sequences then use: colored_output=False\r\n\r\nlogger.debug(message=\"This is Debug Message!\")  # Debug Log\r\nlogger.info(message=\"This is Information Message!\")  # Information Log\r\nlogger.warn(message=\"This is Warning Message!\")  # Warning Log\r\nlogger.success(message=\"This is Success Message!\")  # Success Log\r\nlogger.error(message=\"This is Error Message!\")  # Error Log\r\nlogger.critical(message=\"This is Critical Message!\")  # Critical Log\r\n```\r\n\r\n## The pyLogger Class\r\n\r\n### Parameters\r\n\r\nThe pyLogger Class has the following Parameters:\r\n\r\n* ```colored_output``` --> Set it to ```True``` if you want colored output\r\n* ```print_log``` --> Set it to ```True``` if you want your log to be printed out into the Console\r\n* ```make_file``` --> Set it to ```True``` if you want your log to be stored in a file\r\n* ```file_name``` --> If you set the ```make_file``` parameter to ```True```, then you can use this parameter to change\r\n  the file name\r\n* ```rewrite_file``` --> Set it to ```True``` if you want your log file to be rewritten after you run the program\r\n* ```file_logs``` --> If you want only the specified log messages in your file then pass this parameter with a list\r\n  containing the log types you want. Example: If you want only the errors and critical messages in file then you pass\r\n  the value of the parameter as ```python ['ERROR', 'CRITICAL']```\r\n\r\n## Customizing the Logs:\r\n\r\n### Customizing the Log text:\r\n\r\nTo customize a log, use the ```format_log(log_type, format_string)``` function. For example, if you want to customize\r\nthe log type of Debug, then use the following code:\r\n\r\n```python\r\nfrom pyEventLogger import pyLogger\r\n\r\nlogger = pyLogger()\r\n\r\ndebug_format_string = \"[log_type] [time] [message]\"  # Define a variable for the format string\r\n\r\nlogger.format_log(log_type='DEBUG', format_string=debug_format_string)  # Use this function to format a log\r\n\r\nlogger.debug(message=\"This is Debug Message!\")\r\n```\r\n\r\nSee the above example. It has a variable called ```debug_format_string``` which defines how the contents of the Log\r\nshould be.\r\n\r\n#### Rules for format strings:\r\n\r\nThe format string should have a format like ```\"[time] [log_type] [message]\"```. Where the contents in the squared\r\nbraces ```[]``` will be replaced with the values of the parameters you pass to that function. You can give any number of\r\nspaces you like between the contents. Example:\r\n```\"[log_type]     [time]      [message]\"```. The log will be printed in the same format and also can be written in a\r\nfile in the same format.\r\n\r\nThere are some special meanings to some parameters like ```log_type```. The program automatically adds the log type even\r\nif the user doesn't pass that parameter's value to a function, also the ```time``` parameter will be given a default\r\nvalue of the time that function is called.\r\n\r\nYou can add any number of contents in a log. Example Code:\r\n\r\n```python\r\nfrom pyEventLogger import pyLogger\r\n\r\nlogger = pyLogger()\r\n\r\ndebug_format_string = \"[log_type] [time] [message] [file_name]\"  # Add a 'file_name' content\r\n\r\nlogger.format_log(log_type='DEBUG', format_string=debug_format_string)\r\n\r\nlogger.debug(message=\"This is Debug Message!\", file_name=\"main.py\")  # Set a value to the added content\r\n```\r\n\r\n### Customizing the Log text color/style:\r\n\r\nTo customize a log's color, use the ```format_log_color(log_type, format_string)``` function. For example, if you want\r\nto customize the log type of Debug, then use the following code:\r\n\r\n```python\r\nfrom pyEventLogger import pyLogger\r\n\r\nlogger = pyLogger(colored_output=True)  # Set the colored output to True\r\n\r\ndebug_format_string = \"[log_type] [time] [file_name] [message]\"  # Define a variable for the format string\r\ndebug_format_color = \"[bold cyan black] [normal yellow black] [italic magenta black] [normal white black]\"  # Define a variable for the format color\r\n\r\nlogger.format_log(log_type='DEBUG', format_string=debug_format_string)  # Format the log\r\nlogger.format_log_color(log_type='DEBUG', format_string=debug_format_color)  # Format the color\r\n\r\nlogger.debug(message=\"This is Debug Message!\", file_name=\"main.py\")\r\n```\r\n\r\nIn the above example, you can see that there is a variable defined for the log color.\r\n\r\n#### Rules for format color:\r\n\r\nThe format of color string should be the same as text string.\r\n\r\nThe contents should be seperated by space.\r\n\r\nThe first content in square braces should be the text style like ```normal```, ```bold```,```italic```,etc.\r\n\r\nThe second content should be the text color and the third should be background color. You can also use HEX values for\r\ncolors too!\r\n\r\nThese three elements should be seperated by a space.\r\n\r\nThe first content will be the style for first item in log and so on...\r\n\r\n### Changing the format of time:\r\n\r\nTo change the format of time, use the ```format_time``` variable of the ```pyLogger``` class It should be in string\r\nformat and is the same format as used in Python ```time.strftime()``` function.\r\n\r\n### Including error messages in error and critical log:\r\n\r\nTo include the error messages along with the log message in error and critical logs, set the ```include_error_message```\r\nparameter of the error and critical functions to ```True```\r\n\r\n## Example Code:\r\n\r\n```python\r\nimport time\r\nimport random\r\nfrom pyEventLogger import pyLogger\r\n\r\nlogger = pyLogger(colored_output=False, make_file=True, file_name='math', rewrite_file=True)\r\n\r\nlogger.format_log(log_type=\"INFO\", format_string=\"[time] [log_type] [message] [answer]\")\r\nlogger.format_log_color(log_type=\"INFO\",\r\n                        format_string=\"[bold yellow black][bold magenta black][normal #FFFFFF black][italic green black]\")\r\n\r\nwhile True:\r\n    try:\r\n        logger.debug(message=\"Taking two random numbers...\")\r\n        n1 = random.randint(-10, 10)\r\n        n2 = random.randint(-10, 10)\r\n        logger.debug(message=\"Successfully found two random numbers!\")\r\n\r\n        logger.info(message=f\"Two numbers are {n1} and {n2}\")\r\n\r\n        logger.debug(message=\"Starting operations with two numbers...\")\r\n        addition = n1 + n2\r\n        logger.info(message=\"Added two numbers:\", answer=addition)\r\n        subtraction = n2 - n1\r\n        logger.info(message=\"Subtracted two numbers:\", answer=subtraction)\r\n        multiplication = n1 * n2\r\n        logger.info(message=\"Multiplied two numbers:\", answer=multiplication)\r\n        division = n2 / n1\r\n        logger.info(message=\"Divided two numbers:\", answer=division)\r\n\r\n        logger.success(message=\"Successfully completed operations with two numbers!\")\r\n    except ZeroDivisionError:\r\n        logger.error(message=\"An Error Occurred!\", include_error_message=True)\r\n    time.sleep(10)\r\n\r\n```\r\n\r\n## Contributors\r\n\r\nThanks to all the contributors(on github):\r\n\r\n* Sid72020123\r\n* Quantum-Codes\r\n\r\n## Change Log:\r\n\r\n* 15/01/2022(v0.1) - First made this library and updated it\r\n* 15/01/2022(v0.1.2) - Updated and added many features\r\n* 21/01/2022(v0.5.0) - Updated and added some other features\r\n* 23/01/2022(v0.7) - Added Exceptions\r\n* 27/01/2022(v0.9) - Added features to error and critical logs\r\n* 28/01/2022(v1.0) - Added doc-strings to code\r\n* 29/01/2022(v1.0) - First Release!\r\n* 11/09/2022(v1.1) -  Added some new things! Thanks to Quantum-Codes\r\n\r\n## Thank You!\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sid72020123/pyEventLogger/",
    "keywords": "log event log-event",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyEventLogger",
    "package_url": "https://pypi.org/project/pyEventLogger/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyEventLogger/",
    "project_urls": {
      "Homepage": "https://github.com/Sid72020123/pyEventLogger/"
    },
    "release_url": "https://pypi.org/project/pyEventLogger/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple Python Library for making customized Logs of certain events that occur in a program.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15057182,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44993be3a19987325b1df8ab3c76d808818a7f68219fad283331b4eefddd7274",
          "md5": "f4f30dd94210d2464bac107d24f123e7",
          "sha256": "e3c66ca6a31b985f8173d61c3e26ad3d282808663b50f5f6456901b6db296685"
        },
        "downloads": -1,
        "filename": "pyEventLogger-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f4f30dd94210d2464bac107d24f123e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6403,
        "upload_time": "2022-01-29T12:43:11",
        "upload_time_iso_8601": "2022-01-29T12:43:11.099102Z",
        "url": "https://files.pythonhosted.org/packages/44/99/3be3a19987325b1df8ab3c76d808818a7f68219fad283331b4eefddd7274/pyEventLogger-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdfac65154015c75269b1b1f41ab35cafc65ff6986fe2e3ae22e8e38774f1ff4",
          "md5": "98e9c2a77b9ee407aecaf06f6ffa228a",
          "sha256": "1960919dfaa8dec9c824dea3ea234af30ad619fd3a43ae29445d8b4f4e00e479"
        },
        "downloads": -1,
        "filename": "pyEventLogger-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "98e9c2a77b9ee407aecaf06f6ffa228a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6428,
        "upload_time": "2022-01-29T12:44:41",
        "upload_time_iso_8601": "2022-01-29T12:44:41.856671Z",
        "url": "https://files.pythonhosted.org/packages/bd/fa/c65154015c75269b1b1f41ab35cafc65ff6986fe2e3ae22e8e38774f1ff4/pyEventLogger-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bc605d800eecb6a79a72210a605a93f7cca38b59d74565c0a250fef0e4dd33b",
          "md5": "5cc2ec4df21fb560313d9015069fc386",
          "sha256": "0430706f8069c1ae7c78503281f3dfc4f643246f0d836efc302bdfd784c0aaa1"
        },
        "downloads": -1,
        "filename": "pyEventLogger-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5cc2ec4df21fb560313d9015069fc386",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6598,
        "upload_time": "2022-09-11T10:20:52",
        "upload_time_iso_8601": "2022-09-11T10:20:52.001879Z",
        "url": "https://files.pythonhosted.org/packages/3b/c6/05d800eecb6a79a72210a605a93f7cca38b59d74565c0a250fef0e4dd33b/pyEventLogger-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bc605d800eecb6a79a72210a605a93f7cca38b59d74565c0a250fef0e4dd33b",
        "md5": "5cc2ec4df21fb560313d9015069fc386",
        "sha256": "0430706f8069c1ae7c78503281f3dfc4f643246f0d836efc302bdfd784c0aaa1"
      },
      "downloads": -1,
      "filename": "pyEventLogger-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5cc2ec4df21fb560313d9015069fc386",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6598,
      "upload_time": "2022-09-11T10:20:52",
      "upload_time_iso_8601": "2022-09-11T10:20:52.001879Z",
      "url": "https://files.pythonhosted.org/packages/3b/c6/05d800eecb6a79a72210a605a93f7cca38b59d74565c0a250fef0e4dd33b/pyEventLogger-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}