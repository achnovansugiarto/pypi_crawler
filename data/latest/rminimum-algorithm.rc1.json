{
  "info": {
    "author": "Julian Lorenz",
    "author_email": "jfk.lorenz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# RMinimum-Algorithm\n\n![GitHub status](https://img.shields.io/badge/status-release-success) ![GitHub top language](https://img.shields.io/github/languages/top/jfklorenz/python-rminimum) ![Travis](https://travis-ci.org/jfklorenz/RMinimum-Algorithm.svg?branch=master) ![GitHub](https://img.shields.io/github/license/jfklorenz/python-rminimum)\n\nA **Python** implementation of the **RMinimum algorithm**.\n\nThe algorithm is presented in the paper **Fragile Complexity of Comparison-Based Algorithms** by Prof. Dr. Ulrich Meyer and others in 2018. \nA reworked version of it can can be found on [arXiv.org](https://arxiv.org/abs/1901.02857 \"arXiv\").\n\nIt introduces the algorithms *RMinimum* and *RMedian* and also the concept of *fragile complexity*, i.e. the amount of times an element has been compared during the process of the algorithm.\n\nThe package was published on **PyPI** and tested on **Travis CI**.\n\n---\n\nFolder | Content\n--- | ---\ndata | all experimental data as *.csv* files\ndocs | scientific paper presenting the algorithm (from arXiv)\njupyter | *Jupyter Notebook* validation and test files  \nsrc | *Python* source code\ntests | *PyTest* test files\n\n---\n\n## Algorithm\nIn the following we present RMinimum, a randomized recursive algorithm for finding the min-\nimum among n distinct elements. The algorithm has a tuning parameter k(n) controlling the\ntrade-off between the expected fragile complexity f_min(n) of the minimum element and the maxi-\nmum expected fragile complexity f_rem(n) of the remaining none-minimum elements; if n is clear\nfrom the context, we use k instead of k(n). Depending on the choice of k, we obtain interest-\ning trade-offs for the pair hE [fmin (n)] , max E [frem (n)]i ranging from <O(ε−1loglog(n)), O(n_ε)> to\n<O(log(n)/loglog(n)), O(log(n)/loglog(n))>. Given a total ordered set X of n distinct elements,\nRMinimum performs the following steps:\n\n1. Randomly group the elements into n/2 pairwise-disjoint pairs and use one comparison for each pair to partition X into two sets L and W of equal size: W contains all winners, i.e. elements that are smaller than their partner. Set L gets the losers, who are larger than their partner and hence cannot be the global minimum.\n2. Partition L into n/k random disjoint subsets L_1 , . . . , L_n/k each of size k and find the minimum element mi in each Li using a perfectly balanced tournament tree (see Theorem 1).\n3. Partition W into n/k random disjoint subsets W_1 , . . . , W_n/k each of size k and filter out all elements in W_i larger than mi to obtain W_0 = U_i {w|w ∈ Wi ∧ w < mi }.\n4. If |W_0| ≤ log2 (n_0) where n0 is the initial problem size, find and return the minimum using a perfectly balanced tournament tree (see Theorem 1). Otherwise recurse on W_0.\n\n---\n\n## Complexity \n1. *Runtime:* RMinimum requires linear work w(n) = O(n).\n2. Let k(n) = n_ε for 0 < ε ≤ 1/2. Then RMinimum requires E(f_min) = O(ε−1loglogn) comparisons for the minimum and E(f_rem) = O(n_ε) for the remaining elements.\n3. Let k(n) = logn/loglogn. Then RMinimum requires E(f_min) = O(logn/loglogn) comparisons for the minimum and E(f_rem) = O(logn/loglogn) for the remaining elements.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jfklorenz/RMinimum-Algorithm",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RMinimum-Algorithm",
    "package_url": "https://pypi.org/project/RMinimum-Algorithm/",
    "platform": "",
    "project_url": "https://pypi.org/project/RMinimum-Algorithm/",
    "project_urls": {
      "Homepage": "https://github.com/jfklorenz/RMinimum-Algorithm"
    },
    "release_url": "https://pypi.org/project/RMinimum-Algorithm/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Package for the RMinimum algorithm",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8608485,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5f1045c78384ffd03e6e104e442f6a1475941bc0675c0bf3039b836e1a9b0c9",
          "md5": "fa285f44f4b70d981183cb823ed34f82",
          "sha256": "3f438468191adce0e9d07a7c0cc447ad9bb57d1478343b572d5341c16808aa91"
        },
        "downloads": -1,
        "filename": "RMinimum_Algorithm-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa285f44f4b70d981183cb823ed34f82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3485,
        "upload_time": "2020-11-08T16:53:32",
        "upload_time_iso_8601": "2020-11-08T16:53:32.794778Z",
        "url": "https://files.pythonhosted.org/packages/d5/f1/045c78384ffd03e6e104e442f6a1475941bc0675c0bf3039b836e1a9b0c9/RMinimum_Algorithm-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53f6115832f5acb62c7ddaa1af088c83621e6b27d85bd9f21932a63633de1cd2",
          "md5": "76b8a2472f80c184ce002c8b287e0ef1",
          "sha256": "a0b782a05884956f9b8e9eb119e3cc61e4c19171a10ce29f8626aba223c39284"
        },
        "downloads": -1,
        "filename": "RMinimum-Algorithm-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "76b8a2472f80c184ce002c8b287e0ef1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2803,
        "upload_time": "2020-11-08T16:53:42",
        "upload_time_iso_8601": "2020-11-08T16:53:42.727744Z",
        "url": "https://files.pythonhosted.org/packages/53/f6/115832f5acb62c7ddaa1af088c83621e6b27d85bd9f21932a63633de1cd2/RMinimum-Algorithm-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5f1045c78384ffd03e6e104e442f6a1475941bc0675c0bf3039b836e1a9b0c9",
        "md5": "fa285f44f4b70d981183cb823ed34f82",
        "sha256": "3f438468191adce0e9d07a7c0cc447ad9bb57d1478343b572d5341c16808aa91"
      },
      "downloads": -1,
      "filename": "RMinimum_Algorithm-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa285f44f4b70d981183cb823ed34f82",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3485,
      "upload_time": "2020-11-08T16:53:32",
      "upload_time_iso_8601": "2020-11-08T16:53:32.794778Z",
      "url": "https://files.pythonhosted.org/packages/d5/f1/045c78384ffd03e6e104e442f6a1475941bc0675c0bf3039b836e1a9b0c9/RMinimum_Algorithm-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53f6115832f5acb62c7ddaa1af088c83621e6b27d85bd9f21932a63633de1cd2",
        "md5": "76b8a2472f80c184ce002c8b287e0ef1",
        "sha256": "a0b782a05884956f9b8e9eb119e3cc61e4c19171a10ce29f8626aba223c39284"
      },
      "downloads": -1,
      "filename": "RMinimum-Algorithm-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "76b8a2472f80c184ce002c8b287e0ef1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 2803,
      "upload_time": "2020-11-08T16:53:42",
      "upload_time_iso_8601": "2020-11-08T16:53:42.727744Z",
      "url": "https://files.pythonhosted.org/packages/53/f6/115832f5acb62c7ddaa1af088c83621e6b27d85bd9f21932a63633de1cd2/RMinimum-Algorithm-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}