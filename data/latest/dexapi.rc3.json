{
  "info": {
    "author": "Kayra Uygun",
    "author_email": "kayrauygun@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dexapi\n\nPython wrapper for bitquery.io DEX API\n\n## Installation\nInstall the latest version from PyPI is by using pip:\n```\npip install dexapi\n```\nAlternatively, install directly from the GitHub repository:\n```\npip install git+https://github.com/kayrauygun/dexapi.git\n```\n## Functions\n\nCreate `dexAPI` object using following code:\n```python\nimport  dexapi\napi = dexapi.dexAPI(\"API_KEY\", network=\"NETWORK_NAME\")\n```\nAvailable networks are \"ethereum\" and \"bsc\".\n\n### List of Exchanges\n`get_exchanges` function returns DEXs with highest volume (in USD)  in network between two datetimes.\n```python\ndexapi.dexAPI.get_exchanges(start_time, end_time, limit)\n```\n`start_time`: *str | datetime, optional, default = first day of current year, format = \"YYYY-MM-DD\",\ndatetime.date(YYYY,MM,DD), \"YYYY-MM-DDTHH:MM:SS\" (ISO8601DateTime), datetime.datetime(YYYY,MM,DD,HH,MM,SS),\nif hours, minutes, seconds are not specified it will be taken as 00:00:00*\n\n`end_time`: *str | datetime, optional, default = now, format = \"YYYY-MM-DD\",\ndatetime.date(YYYY,MM,DD), \"YYYY-MM-DDTHH:MM:SS\" (ISO8601DateTime), datetime.datetime(YYYY,MM,DD,HH,MM,SS),\nif hours, minutes, seconds are not specified it will be taken as 23:59:59*\n\n`limit`: *int, optional, default = 20, maximum number of entries function returns*\n\n`return`:* dataframe, columns = [\n        \"exchange\": DEX name,\n        \"protocol\": protocol DEX uses,\n        \"count\": number of trades,\n        \"tradeAmount\": total volume in USD,\n        \"exchangeAddress\": address of exchange on network\n        ]*\n\nExample usage:\n```python\nimport  dexapi\napi = dexapi.dexAPI(\"API_KEY\", network=\"ethereum\")\napi.get_exchanges(\"2022-03-01\", \"2022-03-15\", 20 )\n```\n### List of Pairs\n`get_pairs` function returns pairs with highest volume (in USD) in the DEX between two datetimes.\n```python\ndexapi.dexAPI.get_pairs(exchange_address, start_time, end_time, limit)\n```\n`exchange_address`: *str, address of exchange on network*\n\n`start_time`: *str | datetime, optional, default = first day of current year, format = \"YYYY-MM-DD\",\ndatetime.date(YYYY,MM,DD), \"YYYY-MM-DDTHH:MM:SS\" (ISO8601DateTime), datetime.datetime(YYYY,MM,DD,HH,MM,SS),\nif hours, minutes, seconds are not specified it will be taken as 00:00:00*\n\n`end_time`: *str | datetime, optional, default = now, format = \"YYYY-MM-DD\",\ndatetime.date(YYYY,MM,DD), \"YYYY-MM-DDTHH:MM:SS\" (ISO8601DateTime), datetime.datetime(YYYY,MM,DD,HH,MM,SS),\nif hours, minutes, seconds are not specified it will be taken as 23:59:59*\n\n`limit`: *int, optional, default = 20, maximum number of entries function returns*\n\n`return`: *dataframe, columns = [\n        \"exchange\": DEX name,\n        \"protocol\": protocol DEX uses,\n        \"currency1\": first leg of swaps,\n        \"currency2\": second leg of swap,\n        \"smartContract\": address of smart contract trades pair on network\n        ]*\n\nExample usage:\n```python\nimport  dexapi\napi = dexapi.dexAPI(\"API_KEY\", network=\"ethereum\")\napi.get_exchanges(\"0x1f98431c8ad98523631ae4a59f267346ea31f984\", \"2022-03-01\", \"2022-03-15\", 50 )\n```\n### List of Trades\n`get_trades` function returns most recent trades use the smart contract between two times.\n```python\ndexapi.dexAPI.get_trades(smart_contract, start_time, end_time, limit)\n```\n`smart_contract`: *str, address of smart contract on network*\n\n`start_time`: *str | datetime, optional, default = today 00:00:00, format = \"YYYY-MM-DD\",\ndatetime.date(YYYY,MM,DD), \"YYYY-MM-DDTHH:MM:SS\" (ISO8601DateTime), datetime.datetime(YYYY,MM,DD,HH,MM,SS),\nif hours, minutes, seconds are not specified it will be taken as 00:00:00*\n\n`end_time`: *str | datetime, optional, default = now, format = \"YYYY-MM-DD\",\ndatetime.date(YYYY,MM,DD), \"YYYY-MM-DDTHH:MM:SS\" (ISO8601DateTime), datetime.datetime(YYYY,MM,DD,HH,MM,SS),\nif hours, minutes, seconds are not specified it will be taken as 23:59:59*\n\n`limit`: *int, optional, default = 1000, maximum number of entries function returns*\n\n`return`: *dataframe, columns = [\n        \"exchange\": DEX name,\n        \"protocol\": protocol DEX uses,\n        \"timestamp\": timestamp of block,\n        \"block\": block height,\n        \"buyCurrency\": currency DEX buys,\n        \"sellCurrency\": currency DEX sells,\n        \"price\": price of \"buyCurrency\" in terms of \"sellCurrency\",\n        \"tradeAmount\": volume in USD\n        \"transaction\": transaction hash\n        ]*\n\nExample usage:\n```python\nimport  dexapi\napi = dexapi.dexAPI(\"API_KEY\", network=\"ethereum\")\napi.get_trades(\"0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640\", \"2022-03-15\", \"2022-03-15\", 1500 )\n```\n### Historical Balance\n`get_balances` function returns the balance of the smart contract address at a specific time.\n```python\ndexapi.dexAPI.get_balances(address, time)\n```\n`address`: *str, address of the smart contract on network\n\n`time`: *str | datetime, optional, default = now, format = \"YYYY-MM-DD\",\ndatetime.date(YYYY,MM,DD), \"YYYY-MM-DDTHH:MM:SS\" (ISO8601DateTime), datetime.datetime(YYYY,MM,DD,HH,MM,SS),\nif hours, minutes, seconds are not specified it will be taken as 23:59:59*\n\n`return`: *dataframe, columns = [\n        \"currency\": currency symbol,\n        \"value\": number of tokens owned by address,\n        \"currencyAddress\": address of currency,\n        ]*\n\nExample usage:\n```python\nimport  dexapi\napi = dexapi.dexAPI(\"API_KEY\", network=\"ethereum\")\napi.get_trades(\"0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640\", \"2022-03-15T14:55:55\")\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kayrauygun/dexapi",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dexapi",
    "package_url": "https://pypi.org/project/dexapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/dexapi/",
    "project_urls": {
      "Homepage": "https://github.com/kayrauygun/dexapi"
    },
    "release_url": "https://pypi.org/project/dexapi/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python wraper for bitquery.io DEX API",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13197375,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6c6f33d814f194a1a04a139b6689b2cf67c178461526e8894aaf16738a2c282",
          "md5": "e9521048b6799ee9e201cbc0cb055901",
          "sha256": "8dc1c81dbb3993a034c1555477277473c12dd38014bbdab95cfcdba6bdb1a1aa"
        },
        "downloads": -1,
        "filename": "dexapi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e9521048b6799ee9e201cbc0cb055901",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3493,
        "upload_time": "2022-03-16T15:17:41",
        "upload_time_iso_8601": "2022-03-16T15:17:41.127776Z",
        "url": "https://files.pythonhosted.org/packages/d6/c6/f33d814f194a1a04a139b6689b2cf67c178461526e8894aaf16738a2c282/dexapi-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79ff1a38292dd8d975fa9cf00a0a4c2c1bbfcc8064a7b4c3e734ecda3f4be9f0",
          "md5": "d294272a6037eaaca3a740c286b027c1",
          "sha256": "690f2362dd79a9cdaf656509cdbdaf60dc8f994f3b74cfe2389f7905eae09dec"
        },
        "downloads": -1,
        "filename": "dexapi-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d294272a6037eaaca3a740c286b027c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5043,
        "upload_time": "2022-03-16T20:40:13",
        "upload_time_iso_8601": "2022-03-16T20:40:13.044722Z",
        "url": "https://files.pythonhosted.org/packages/79/ff/1a38292dd8d975fa9cf00a0a4c2c1bbfcc8064a7b4c3e734ecda3f4be9f0/dexapi-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cf4df15d00d3eb97f00f9528f232f8b5ba0d84074320fde1b29003baa6c25df",
          "md5": "7c36be3a3b25a4c07b49f10ab6bcead7",
          "sha256": "c9441a3173cc0b21bbc436ef8295a4f7ade63439846294de847d18bd2b3eccef"
        },
        "downloads": -1,
        "filename": "dexapi-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7c36be3a3b25a4c07b49f10ab6bcead7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5041,
        "upload_time": "2022-03-16T20:58:04",
        "upload_time_iso_8601": "2022-03-16T20:58:04.298280Z",
        "url": "https://files.pythonhosted.org/packages/0c/f4/df15d00d3eb97f00f9528f232f8b5ba0d84074320fde1b29003baa6c25df/dexapi-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cf4df15d00d3eb97f00f9528f232f8b5ba0d84074320fde1b29003baa6c25df",
        "md5": "7c36be3a3b25a4c07b49f10ab6bcead7",
        "sha256": "c9441a3173cc0b21bbc436ef8295a4f7ade63439846294de847d18bd2b3eccef"
      },
      "downloads": -1,
      "filename": "dexapi-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7c36be3a3b25a4c07b49f10ab6bcead7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5041,
      "upload_time": "2022-03-16T20:58:04",
      "upload_time_iso_8601": "2022-03-16T20:58:04.298280Z",
      "url": "https://files.pythonhosted.org/packages/0c/f4/df15d00d3eb97f00f9528f232f8b5ba0d84074320fde1b29003baa6c25df/dexapi-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}