{
  "info": {
    "author": "Roberto Abdelkader Martínez Pérez, Charles Brunet",
    "author_email": "robertomartinezp@gmail.com, charles.brunet@optelgroup.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Embedded Systems",
      "Topic :: System :: Archiving"
    ],
    "description": "acidfile\n========\n\nThis project was forked from https://github.com/nilp0inter/acidfile\nto fix issues with more recent versions of Python.\n\n`acidfile` module provides the ACIDFile object. This object can be used as a\nregular file object but instead of write one copy of the data, it will write\nseveral copies to disk in an ACID manner.\n\nThis algorithm was explained by `Elvis Pfützenreuter`_ in his blog post\n`Achieving ACID transactions with common files`_.\n\nLatest stable version can be found on `PyPI`_.\n\n.. image:: https://img.shields.io/pypi/v/acidfile-optelgroup.svg\n    :target: https://pypi.python.org/pypi/acidfile-optelgroup\n    :alt: Latest PyPI version\n\n`acidfile` is compatible with python 2.7, 3.6 and up, and pypy\n\n\nInstallation\n------------\n\nLatest version can be installed via `pip`\n\n.. code-block:: bash\n\n   $ pip install --upgrade acidfile-optelgroup\n\n\nRunning the tests\n-----------------\n\nClone this repository and install the develop requirements.\n\n.. code-block:: bash\n\n   $ git clone https://gitlab.com/optelgroup-public/acidfile.git\n   $ cd acidfile\n   $ pip install -r requirements/develop.txt\n   $ python setup.py develop\n   $ tox\n\n\nUsage examples\n--------------\n\n\nBasic usage\n+++++++++++\n\n.. code-block:: python\n\n   >>> from acidfile import ACIDFile\n\n   >>> myfile = ACIDFile('/tmp/myfile.txt', 'w')\n   >>> myfile.write(b'Some important data.')\n   >>> myfile.close()\n\nAt the close invocation two copies will be written to disk: *myfile.txt.0* and\nbelow *myfile.txt.1*. Each one will have an creation timestamp and a HMAC\nsignature.\n\n.. code-block:: python\n\n   >>> myfile = ACIDFile('/tmp/myfile.txt', 'r')\n   >>> print myfile.read()\n   'Some important data.'\n   >>> myfile.close()\n\nIf any of the files is damaged due to turning off without proper shutdown or\ndisk failure, manipulation, etc. It will be detected by the internal HMAC and\nthe other's file data would be used instead.\n\n.. note:: If you want to read an `acidfile`, never pass the full path of the\n   real file, instead use the file name that you use in the creation step.\n\n   | ✗ ACIDFile('/tmp/myfile.txt.0', 'r')\n   | ✗ ACIDFile('/tmp/myfile.txt.1', 'r')\n   | ✓ ACIDFile('/tmp/myfile.txt', 'r')\n\n\nContext manager\n+++++++++++++++\n\nACIDFile can (and should) be used as a regular context manager:\n\n.. code-block:: python\n\n   >>> with ACIDFile('/tmp/myfile.txt', 'w') as myfile:\n   ...     myfile.write(b'Some important data.')\n\n\nNumber of copies\n++++++++++++++++\n\nThe number of inner copies of the data can be configured through the **copies**\nparameter.\n\n\nChecksum Key\n++++++++++++\n\nThe key used for compute and check the internal HMAC signature can be setted\nby the **key** parameter.\n\nIt's recommended to change that key in order to protect against fraud, making\nmore difficult for a tamperer to put a fake file in place of the legitimate\none.\n\n.. _PyPI: https://pypi.python.org/pypi/acidfile-optelgroup\n.. _Elvis Pfützenreuter: epx@epx.com.br\n.. _Achieving ACID transactions with common files: http://epx.com.br/artigos/arqtrans_en.php\n\n\n.. This is your project NEWS file which will contain the release notes.\n.. Example: http://www.python.org/download/releases/2.6/NEWS.txt\n.. The content of this file, along with README.rst, will appear in your\n.. project's PyPI page.\n\nNews\n====\n\n1.2.2 (fork)\n------------\n\n* Fix missing parameter in hmac\n* Add support to Python 3.6 - 3.10\n* Rewrote the ci/cd pipeline using gitlab-ci\n\n\n1.2.1\n-----\n\n* Using io.open in setup.py to read README and NEWS. This fix some\n  problems installing the package.\n* Python 3.4 support.\n\n\n1.2.0\n-----\n\n* Python 2.6 support.\n* Added Python 3.2 and pypy to tox tests.\n* Added flattr button :D\n* Fixed flake8 and pylint warnings.\n\n\n1.1.0\n-----\n\n* Python 3 support.\n* Changed testing framework to `behave` because python 3 support.\n* Using `tox` for multiple python version testing.\n\n\n1.0.0\n-----\n\n* First stable release.\n* Documentation.\n\n\n0.0.1\n-----\n\n* Initial development.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/optelgroup-public/acidfile/",
    "keywords": "ACID,transactional file",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "acidfile-optelgroup",
    "package_url": "https://pypi.org/project/acidfile-optelgroup/",
    "platform": "",
    "project_url": "https://pypi.org/project/acidfile-optelgroup/",
    "project_urls": {
      "Homepage": "https://gitlab.com/optelgroup-public/acidfile/",
      "Original Project": "https://pypi.org/project/acidfile/",
      "Source": "https://gitlab.com/optelgroup-public/acidfile/"
    },
    "release_url": "https://pypi.org/project/acidfile-optelgroup/1.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "ACID transaction with common files",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12114993,
  "releases": {
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b88836d52ad611a5704f0eada0f5a093b8a38819f1058164fc2454aea9210276",
          "md5": "ccd13596d32e5e05d9b2be6d92db22c7",
          "sha256": "955acb1e1ea1458a7f55c7481327d4cf515776c9a7e4705a641cf298119ea998"
        },
        "downloads": -1,
        "filename": "acidfile_optelgroup-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ccd13596d32e5e05d9b2be6d92db22c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7879,
        "upload_time": "2021-11-24T16:57:50",
        "upload_time_iso_8601": "2021-11-24T16:57:50.120363Z",
        "url": "https://files.pythonhosted.org/packages/b8/88/36d52ad611a5704f0eada0f5a093b8a38819f1058164fc2454aea9210276/acidfile_optelgroup-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b88836d52ad611a5704f0eada0f5a093b8a38819f1058164fc2454aea9210276",
        "md5": "ccd13596d32e5e05d9b2be6d92db22c7",
        "sha256": "955acb1e1ea1458a7f55c7481327d4cf515776c9a7e4705a641cf298119ea998"
      },
      "downloads": -1,
      "filename": "acidfile_optelgroup-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ccd13596d32e5e05d9b2be6d92db22c7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7879,
      "upload_time": "2021-11-24T16:57:50",
      "upload_time_iso_8601": "2021-11-24T16:57:50.120363Z",
      "url": "https://files.pythonhosted.org/packages/b8/88/36d52ad611a5704f0eada0f5a093b8a38819f1058164fc2454aea9210276/acidfile_optelgroup-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}