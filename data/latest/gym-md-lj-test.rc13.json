{
  "info": {
    "author": "\"ganyariya, LJArendse\"",
    "author_email": "ganariya2525@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Natural Language :: Japanese",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# gym-md\n## 日本語のREADME.md\nThe original Japanese README can be found [here](https://github.com/ganyariya/gym-md/blob/main/README/japan/README.md).\n\n## Contents\n* [Overview](#overview)\n* [Installation](#installation)\n    + [Installing from PyPI](#installing-from-pypi)\n    + [Running build and tests](#running-build-and-tests)\n      - [Prerequisites](#prerequisites)\n      - [Running the build and tests](#running-the-build-and-tests)\n* [Usage](#usage)\n* [The MiniDungeons Gym Environment](#the-minidungeons-gym-environment)\n    + [Overview](#overview-1)\n    + [Actions](#actions)\n    + [Environment](#environment)\n      - [env object](#env-object)\n      - [env.step method](#envstep-method)\n* [Levels and Settings](#levels-and-settings)\n\n## Overview\ngym-md is a python reimplementation[^1] of the dungeon exploration game [MiniDungeons](http://minidungeons.com/)[^2] created as an [OpenAI Gym](https://gym.openai.com/)[^3] environment. \nMiniDungeons[^2] is a roguelike dungeon exploration game created as a benchmark research domain for modeling decision-making styles of human players[^4]. A Java implementation of MiniDungeons can be found [here](https://github.com/sentientdesigns/minidungeons).\n\n<p align=\"center\">\n    <img src=\"https://github.com/ganyariya/gym-md/blob/main/README/resources/md_stages_screenshots/md-test-v0_step0.jpg?raw=true\" width=\"250px\">\n</p>\n\n[^1]: Y. Iwasaki. and K. Hasebe., “A framework for generating playstyles\nof game ai with clustering of play logs,” in Proceedings of the 14th\nInternational Conference on Agents and Artificial Intelligence - Volume\n3: ICAART,, INSTICC. SciTePress, 2022, pp. 605–612.\n\n[^2]: C. Holmgård, A. Liapis, J. Togelius, and G. N. Yannakakis, “Evolving\npersonas for player decision modeling,” in 2014 IEEE Conference on\nComputational Intelligence and Games, 2014, pp. 1–8.\n\n[^3]: G. Brockman, V. Cheung, L. Pettersson, J. Schneider, J. Schulman, J. Tang, and W. Zaremba, “Openai gym,” arXiv preprint\narXiv:1606.01540, 2016.\n\n[^4]: A. Liapis, “Minidungeons”, website, 2022. Accessed on: Mar. 27, 2022. [Online].\nAvailable: http://antoniosliapis.com/projects/project_minidungeons.php\n\n## Installation\n### Installing from PyPI\nThe gym-md python package can be found on [pypi](https://pypi.org/project/gym-md/).\nTo install the latest gym-md package run:\n```bash\npip install gym-md\n```\n### Running build and tests\n#### Prerequisites \nThe gym-md project makes use of [pipenv](https://pypi.org/project/pipenv/) for the overall project's package management.\nIn order to build the project's documentation and run the respective tests pipenv will need to be installed.\nPlease see the 'Installation' section on the [pipenv](https://pypi.org/project/pipenv/) PyPI page.\nIf you face any issues with the pipenv installation, you can also try installing pipenv using pip (see [source](https://www.codegrepper.com/code-examples/shell/pipenv+not+found+after+pip3+install)).\n\nFurthermore, several additional tests and code linting is orchestrated using [tox](https://tox.wiki/en/latest/),\ndefined in the [tox.ini](tox.ini) file.\nPlease see [tox installation](https://tox.wiki/en/latest/install.html#tox-installation) for more detail.\n\n#### Running the build and tests\nIf you would like to build and install gym-md from source, please run the following commands:\n```bash\ngit clone https://github.com/Ganariya/gym-md.git\ncd gym-md\n\n# create the pipenv gym-md build and testing environment\npipenv install\n\n# launch the pipenv environment\npipenv shell\n\n# build gym-md documentation\npipenv run build\n\n# run gym-md tests\npipenv run test\n\n# start the tox testing orchestration\ntox\n\n# to build and upload your own gym-md wheel (.whl) file, please see the upload.sh file.\n# your custom .whl can be locally installed using: pip install <path to .whl>\nrm -f -r gym_md.egg-info/* dist/*\npython setup.py bdist_wheel\ntwine upload dist/*\n```\n\n## Usage\n```python\nimport gym\nimport gym_md\nimport random\n\nenv = gym.make('md-test-v0')\n\nLOOP: int = 100\nTRY_OUT: int = 100\n\nfor _ in range(TRY_OUT):\n    observation = env.reset()\n    reward_sum = 0\n    for i in range(LOOP):\n        env.render(mode='human')\n        actions = [random.random() for _ in range(7)]\n        observation, reward, done, info = env.step(actions)\n\n        reward_sum += reward\n\n        if done:\n            env.render()\n            break\n\n    print(reward_sum)\n```\n\n## The MiniDungeons Gym Environment\n### Overview\n\n<p align=\"center\">\n    <img src=\"https://github.com/ganyariya/gym-md/blob/main/README/resources/gym-md-env-action-loop.drawio.svg?raw=true\" width=\"600px\">\n</p>\n\nClick [here](https://gym.openai.com/docs/) for a _Getting Started with Gym_ overview.\n\n### Actions\nAn action within the gym-md environment (_env_) is represented as a python _list_ containing seven (7) floating point values, for example:\n```python\nactions_eg = [0.7603953105618472,\n              0.954037518265538,\n              0.7224447519623062,\n              0.35121023208759905,\n              0.4878166326111911,\n              0.6166020008598004,\n              0.48734265188517545]\n```\nEach index in the _actions_ list corresponds to a specific action available for the game agent to take:\n- index 0: Head to the monster\n- index 1: Head to the treasure\n- index 2: Head to the treasure (avoid monsters)\n- index 3: Head to the potion\n- index 4: Head to the potion (avoid monsters)\n- index 5: Head to the exit\n- index 6: Head to the exit (avoid monsters)\n\nThe environment (_env_) selects the action, within the action float list, which has the highest value.\n\nIn the `actions_eg` list example, the action with the highest value is 'Head to the treasure'\n(which is index 1, with a value of 0.954037518265538).\nHowever, if the selected highest action is not a valid action within the given state, then the next highest action value is taken.\n\nIn the `actions_eg` list example, if the original highest action 'Head to the treasure' (index 1, with a value of 0.954037518265538) cannot be performed (e.g. there is no more treasure to collect) then the next highest action 'Head to the monster'\n(which is index 0, with a value of 0.7603953105618472) is chosen. This action selection process is repeated until a valid action can be\nperformed within the given state. Furthermore, if the desired values are the same, an action is randomly selected.\n\n### Environment\n#### env object\nThe _env_ object created using `env = gym.make('md-test-v0')` is based on the `MdEnvBase` class defined within [md_env.py](gym_md/envs/md_env.py).\nThe _env_ object contains several objects and methods (only a subset is discussed here, please see [md_env.py](gym_md/envs/md_env.py) for more).\nThe  _env_ object contains:\n- The current stage name\n  - `env.stage_name` \n- An internal settings object of the _Setting_ class defined within [setting.py](gym_md/envs/setting.py). This object contains all the stage specific information and configuration. \n  - `env.setting`\n    - helpful stage specific info can be accessed within the setting object:\n      - `env.setting.PLAYER_MAX_HP`: agent's max hit points.\n      - `env.setting.REWARDS`: reward values obtained.\n      - `env.setting.ACTIONS`: actions available in the stage.\n      - For the full list of setting values please see [setting.py](gym_md/envs/setting.py).\n\n- An internal grid object of the _Grid_ class defined within [grid.py](gym_md/envs/grid.py). This grid object is a grid world representation of the world stage.\n  - `env.grid`\n    - helpful grid world info can be accessed within the grid object:\n      - `env.grid.H`: grid world's height.\n      - `env.grid.W`: grid world's width.\n      - `env.grid.g`: grid world represented as a 2D list.\n      - For the full list of attributes please see [grid.py](gym_md/envs/grid.py).\n\n- An internal agent object of the _Agent_ class defined within [agent.py](gym_md/envs/agent/agent.py). When an action is passed into the env.step method, this internal agent object is used to carry out the action.\n  - `env.agent`\n    - helpful agent info can be accessed within the agent object:\n      - `env.agent.hp`: agent's hit points.\n      - `env.agent.y`: agent's y-position in grid world.\n      - `env.agent.x`: agent's x-position in grid world.\n      - For the full list of attributes please see [agent.py](gym_md/envs/agent/agent.py).\n\nThe [OpenAI Gym environment](https://gym.openai.com/docs/) specific methods are discussed as part of the [env.step method](#envstep-method) subsection.\n\n#### env.step method\nThe gym-md environment's step method returns the following values:\n```python\nobservation, reward, done, info = env.step(actions)\n```\n- observation (list): the resultant observation of the environment is represented as a list of integers of length eight (8).\n  - an example output observation is:\n    ```python\n    [4, 4, 4, 10, 1000, 8, 8, 30]\n    ```\n  - each index in the _observation_ list represents the following:\n    - index 0: Distance to the monster\n    - index 1: Distance to the treasure\n    - index 2: Distance to treasure (avoid monsters)\n    - index 3: Distance to potion\n    - index 4: Distance to potion (avoid monsters)\n    - index 5: Distance to the exit\n    - index 6: Distance to the exit (avoid monsters)\n    - index 7: Agent's physical strength (i.e. _Hit Points (HP)_)\n  - some of the observation values received is level specific and can be adjusted/set by modifying the respective level `.json` file, found within the [props](gym_md/envs/props) folder.\n    - for example, the 1000 value for index 4 (Distance to potion) corresponds to the \"DISTANCE_INF\" value set within the [test.json](gym_md/envs/props/test.json) level file.  \n- reward (float): amount of reward achieved by the previous action.\n  - the reward received is level specific and can be adjusted/set by modifying the respective level `.json` file, found within the [props](gym_md/envs/props) folder.\n  - for example, the rewards set in the test level ([test.json](gym_md/envs/props/test.json)) are: \n    ```python\n      \"REWARDS\": {\n        \"TURN\": 1,\n        \"EXIT\": 20,\n        \"KILL\": 4,\n        \"TREASURE\": 3,\n        \"POTION\": 1,\n        \"DEAD\": -20\n      }\n    ```\n- done (boolean): indicated whether the episode has terminated or not. In other words, `True` indicates 'yes, the level has ended', whilst `False` indicates 'no, the level has not yet ended'.\n- info (dict): a dictionary containing play data, each action taken by the agent is tracked by this dictionary.\n  - an example info output is:\n    ```python\n    defaultdict(<class 'int'>, {'POTION': 7, '.': 38, 'MONSTER': 9, 'EXIT_SAFELY': 4, 'TREASURE': 3, 'TREASURE_SAFELY': 9, 'EXIT': 6})\n    ```\n    \n## Levels and Settings\nNew levels can be created by creating your own class which inherits from the [MdEnvBase](gym_md/envs/md_env.py) class. The below example, along with others, can be found within the [md_env_list.py](gym_md/envs/md_env_list.py) script.\n```python\nfrom typing import Final\n\nfrom gym_md.envs.md_env import MdEnvBase\n\nclass TestMdEnv(MdEnvBase):\n    \"\"\"TestMdEnv Class.\"\"\"\n\n    def __init__(self):\n        stage_name: Final[str] = \"test\"\n        super(TestMdEnv, self).__init__(stage_name=stage_name)\n```\nYou will also need to set the respective level's json file and txt file, found respectively within the [props](gym_md/envs/props) and [stages](gym_md/envs/stages) folders.\nFurthermore, you will then need to add the additional levels to the [gym_md.\\_\\_init\\_\\_.py](gym_md/__init__.py) and [gym_md.envs.\\_\\_init\\_\\_.py](gym_md/envs/__init__.py) files.\n\nFor a list of the current available gym_md environment _levels_, please see [Stages README.md](README/resources/md_stages_screenshots/README.md). For a simpler level list view please see [env_levels.txt](README/resources/env_levels.txt).\nBoth the _Stages README.md_ and _env_levels.txt_ files contains the env levels registered within the [gym_md.\\_\\_init\\_\\_.py](gym_md/__init__.py).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ganyariya/gym-md",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gym-md-lj-test",
    "package_url": "https://pypi.org/project/gym-md-lj-test/",
    "platform": null,
    "project_url": "https://pypi.org/project/gym-md-lj-test/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ganyariya/gym-md/issues",
      "Documentation": "https://github.com/ganyariya/gym-md/blob/main/README.md",
      "Homepage": "https://github.com/ganyariya/gym-md",
      "Source Code": "https://github.com/ganyariya/gym-md"
    },
    "release_url": "https://pypi.org/project/gym-md-lj-test/0.5.15/",
    "requires_dist": [
      "gym (==0.24.1)",
      "matplotlib (==3.5.2)",
      "pydantic (==1.9.1)"
    ],
    "requires_python": "",
    "summary": "OpenAI Gym Environment for MiniDungeons",
    "version": "0.5.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15115441,
  "releases": {
    "0.5.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69e68bf12635be6a2c3ef9fa34844dadd19dea8f08f6a0d0cfa5e2f4209e66b3",
          "md5": "42712c84379395d53bab0468db8c6aa5",
          "sha256": "920308e6197ea842616f09a89f338fc2a090bbab0e22457c3e1a9da202866c74"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42712c84379395d53bab0468db8c6aa5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101934,
        "upload_time": "2022-09-12T19:35:04",
        "upload_time_iso_8601": "2022-09-12T19:35:04.439951Z",
        "url": "https://files.pythonhosted.org/packages/69/e6/8bf12635be6a2c3ef9fa34844dadd19dea8f08f6a0d0cfa5e2f4209e66b3/gym_md_lj_test-0.5.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "388a4b2a49e3e2a9460c344a6a68943cdf36ed170a54c08dc5ee5ab904e301ae",
          "md5": "33828a6e7b72e8a3804cd253e426dbc7",
          "sha256": "54ca3ba0969468e602feedc0d92a826553cf03b87c49afd80b50e5252ba46835"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33828a6e7b72e8a3804cd253e426dbc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101904,
        "upload_time": "2022-09-12T19:40:21",
        "upload_time_iso_8601": "2022-09-12T19:40:21.627400Z",
        "url": "https://files.pythonhosted.org/packages/38/8a/4b2a49e3e2a9460c344a6a68943cdf36ed170a54c08dc5ee5ab904e301ae/gym_md_lj_test-0.5.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "847c5e46b970544dbd619c7cae4a380ffcb331fbbd2f82757cd73a848582f7ba",
          "md5": "daef2834c92346733ac5fdd91b2fc0c6",
          "sha256": "4f8779db9ec012609201d0862287a0bc18ba5a16437087c25310279b30105569"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "daef2834c92346733ac5fdd91b2fc0c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101904,
        "upload_time": "2022-09-12T19:43:07",
        "upload_time_iso_8601": "2022-09-12T19:43:07.687651Z",
        "url": "https://files.pythonhosted.org/packages/84/7c/5e46b970544dbd619c7cae4a380ffcb331fbbd2f82757cd73a848582f7ba/gym_md_lj_test-0.5.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7ef64436f5c2690a99d0a51b46111c5110c9b532f72a6ff65fbe66bd2d54b45",
          "md5": "ad68e0cd717b00ee29a12efdb40f2a60",
          "sha256": "2d4d34247ddbb62e2790cf0c6deb107e82a9337155a31762b36e4b54155285db"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad68e0cd717b00ee29a12efdb40f2a60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101903,
        "upload_time": "2022-09-12T19:45:28",
        "upload_time_iso_8601": "2022-09-12T19:45:28.745536Z",
        "url": "https://files.pythonhosted.org/packages/a7/ef/64436f5c2690a99d0a51b46111c5110c9b532f72a6ff65fbe66bd2d54b45/gym_md_lj_test-0.5.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5a5b9a528c09919d5fb73f6ed10088d0fb0e7bfac6172d9418ef4de914f7dce",
          "md5": "dc66aa0c56cdf5a1d066a255336e8cba",
          "sha256": "48008bbd3312c4990a4bc9f0e4f5cc262d43ca0737ed6a478a0650ba8940d67d"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc66aa0c56cdf5a1d066a255336e8cba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101968,
        "upload_time": "2022-09-12T19:51:47",
        "upload_time_iso_8601": "2022-09-12T19:51:47.551748Z",
        "url": "https://files.pythonhosted.org/packages/b5/a5/b9a528c09919d5fb73f6ed10088d0fb0e7bfac6172d9418ef4de914f7dce/gym_md_lj_test-0.5.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39dfdc4cb89e093fbf870b3d56ff20da6c6d23b9750b791244ebaa12839aa36b",
          "md5": "76662484f05d3cba898ad9e663bc9d19",
          "sha256": "0bdd24b0fd69262011faa7c2c14a7a9d9bb9fbc091221b9dd15b66e68c8f805e"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76662484f05d3cba898ad9e663bc9d19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 108262,
        "upload_time": "2022-09-16T08:54:14",
        "upload_time_iso_8601": "2022-09-16T08:54:14.700267Z",
        "url": "https://files.pythonhosted.org/packages/39/df/dc4cb89e093fbf870b3d56ff20da6c6d23b9750b791244ebaa12839aa36b/gym_md_lj_test-0.5.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6992243593219c16817ac98fcea13e80aaf2f2d22e8c0dfafe20c614a0f7d7a",
          "md5": "e966e2851a110e691bbce8b74c72f25b",
          "sha256": "f084322456bd90daadc67bdfa07d081308d091f69b3243f01f87a1ea0698c163"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e966e2851a110e691bbce8b74c72f25b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103099,
        "upload_time": "2022-07-22T14:14:14",
        "upload_time_iso_8601": "2022-07-22T14:14:14.544886Z",
        "url": "https://files.pythonhosted.org/packages/f6/99/2243593219c16817ac98fcea13e80aaf2f2d22e8c0dfafe20c614a0f7d7a/gym_md_lj_test-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4a8fe6218462d7a1cc6bb93a885fdf058350701738f8abbf6b30598cafcbe6f",
          "md5": "9845fd7f7b344a561be51eeef9367f99",
          "sha256": "df2cba3a1fd2c55f58dfa71584b3314d7e0224b9feb5ad795f660d331f86186c"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9845fd7f7b344a561be51eeef9367f99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103097,
        "upload_time": "2022-08-03T14:00:59",
        "upload_time_iso_8601": "2022-08-03T14:00:59.266322Z",
        "url": "https://files.pythonhosted.org/packages/d4/a8/fe6218462d7a1cc6bb93a885fdf058350701738f8abbf6b30598cafcbe6f/gym_md_lj_test-0.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7d3e2877be111ef40c100e890c6cca2c89b98abbac1907213cda48a5520c461",
          "md5": "bd2f999fa35b83c22d7b16d38d7ac891",
          "sha256": "f803fa404de203554e5e04fffdc61b9f3c0b02b23e8d96e7e7c324f4fc0dd1f8"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd2f999fa35b83c22d7b16d38d7ac891",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103079,
        "upload_time": "2022-08-03T14:13:42",
        "upload_time_iso_8601": "2022-08-03T14:13:42.453916Z",
        "url": "https://files.pythonhosted.org/packages/a7/d3/e2877be111ef40c100e890c6cca2c89b98abbac1907213cda48a5520c461/gym_md_lj_test-0.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b31527f8ba1cfdbdaac24817d0be10c65c7fef031ac807d432127ad2d16aa85a",
          "md5": "dbcb43886c5ba26625b87be7c47f4e8c",
          "sha256": "7074d90721ae02d6a7b92d5e775d21663adfedf4c07335d2283049ad0c24a733"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbcb43886c5ba26625b87be7c47f4e8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103079,
        "upload_time": "2022-08-03T14:18:22",
        "upload_time_iso_8601": "2022-08-03T14:18:22.235549Z",
        "url": "https://files.pythonhosted.org/packages/b3/15/27f8ba1cfdbdaac24817d0be10c65c7fef031ac807d432127ad2d16aa85a/gym_md_lj_test-0.5.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81b8235e8f9e3f8207036fb1122ba385c6bac1858b708f7027ca2f401cf5b203",
          "md5": "5410b8e7cac21e9eb749eaf27f6cd850",
          "sha256": "c85df529e5fe6640061acac8774f200bfaef3f92137afa652305caae3dfa93aa"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5410b8e7cac21e9eb749eaf27f6cd850",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103064,
        "upload_time": "2022-09-04T13:26:21",
        "upload_time_iso_8601": "2022-09-04T13:26:21.855283Z",
        "url": "https://files.pythonhosted.org/packages/81/b8/235e8f9e3f8207036fb1122ba385c6bac1858b708f7027ca2f401cf5b203/gym_md_lj_test-0.5.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a38781ecf943a94406d6f9b233aa88b6d65fc8ba851864e65e2351d4ce4d3374",
          "md5": "a112274873c69dd09788b5b07fabe881",
          "sha256": "d39d6157339c101254c25896f84673eaa0574a3d6fd3175f6cb71cc8f53cfae3"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a112274873c69dd09788b5b07fabe881",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103099,
        "upload_time": "2022-09-04T13:31:15",
        "upload_time_iso_8601": "2022-09-04T13:31:15.870570Z",
        "url": "https://files.pythonhosted.org/packages/a3/87/81ecf943a94406d6f9b233aa88b6d65fc8ba851864e65e2351d4ce4d3374/gym_md_lj_test-0.5.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "382ece0e709b79ead0e7ebefd0a0e4454a69045062c273b0e7427e9c8e138df7",
          "md5": "c0a7e892c625d96d076386d7f5d6c964",
          "sha256": "be8e7ce4f4188594233e1daa92e94d982d9e3b2763036fd59dd8b5af55a36fc9"
        },
        "downloads": -1,
        "filename": "gym_md_lj_test-0.5.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0a7e892c625d96d076386d7f5d6c964",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103109,
        "upload_time": "2022-09-04T13:48:23",
        "upload_time_iso_8601": "2022-09-04T13:48:23.361401Z",
        "url": "https://files.pythonhosted.org/packages/38/2e/ce0e709b79ead0e7ebefd0a0e4454a69045062c273b0e7427e9c8e138df7/gym_md_lj_test-0.5.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39dfdc4cb89e093fbf870b3d56ff20da6c6d23b9750b791244ebaa12839aa36b",
        "md5": "76662484f05d3cba898ad9e663bc9d19",
        "sha256": "0bdd24b0fd69262011faa7c2c14a7a9d9bb9fbc091221b9dd15b66e68c8f805e"
      },
      "downloads": -1,
      "filename": "gym_md_lj_test-0.5.15-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76662484f05d3cba898ad9e663bc9d19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 108262,
      "upload_time": "2022-09-16T08:54:14",
      "upload_time_iso_8601": "2022-09-16T08:54:14.700267Z",
      "url": "https://files.pythonhosted.org/packages/39/df/dc4cb89e093fbf870b3d56ff20da6c6d23b9750b791244ebaa12839aa36b/gym_md_lj_test-0.5.15-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}