{
  "info": {
    "author": "David Dale",
    "author_email": "dale.david@mail.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# word-mover-grammar\nThis package implements a context-free grammar parser with rather flexible\n matching of terminals. The supported matching modes are:\n* standard exact matching (like e.g. in [NLTK](https://www.nltk.org/book/ch08.html)); \n* regex matching (like e.g. in [Lark](https://github.com/lark-parser/lark));\n* lemma matching (like e.g. in [Yandex Alice](https://yandex.ru/dev/dialogs/alice/doc/nlu-docpage/));\n* word embedding matching (no known Python implementation).\n\nThe mission of this package is to enable easy creation of custom\ngrammars for various NLU problems, such as sentence classification\nor extraction of semantic slots.\n\nIt is called \"word mover grammar\", because, just like word-mover-distance,\nit applies word embeddings to sentence templates, \nbut in a more structured way.\n\n#### Table of Contents\n1. [Installation](#installation)\n1. [Basic parsing](#basic-parsing)\n1. [Ambiguous phrases](#ambiguous-phrases)\n1. [Inexact matcing](#inexact-matching)\n1. [Forms and slots](#forms-and-slots)\n1. [Future plans](#future-plans)\n\n## Installation\n\n`pip install word-mover-grammar`\n\n## Basic parsing\nWMG production rules can be described in a text file with the following syntax:\n\n- Lowercase tokens represent terminals, and capitalized tokens - terminals. \nYou can also prepend non-terminals with `$` symbol\nand/or put terminals into single brackets. \n- Left- and right-hand sides of productions can be separated \nwith `:` or `->` tokens.\n- Different right-hand-sides of the same production can be separated \nwith `|` symbol or with newline followed by several whitespaces.\nIn the latter case, each RHS can be prepended with `-`, which makes\nthe format YAML-compatible.\n- One-line comments can start with `#` symbol.\n\nThe snippet below shows how to create a simple grammar and parser:\n```python\nimport word_mover_grammar as wmg\nrules = \"\"\"\nS : NP VP\nNP: N | A NP\nVP: V | VP NP | VP PP\nPP: P NP\nN: fruit | flies | bananas\nA: fruit\nV: like | flies | are\nP: like\n\"\"\"\ngrammar = wmg.text_to_grammar.load_granet(rules)\nparser = wmg.earley.EarleyParser(grammar, root_symbol='S')\n```\nThe main inference method is `parser.parse(tokens)`, where `tokens` \nis a list of strings. This method returns a `ParseResult` object, \nthat stores the parse trees.\n```python\nresult = parser.parse('bananas are fruit'.split())\nprint(result.success)\nfor tree in result.iter_trees():\n    wmg.earley.print_tree(tree, result.final_state)\n    print('=======')\n```\nThe output of the code above is given below. \nThe parser has correctly inferred that the sentence \"bananas are fruit\"\nconsists of the noun phrase \"bananas\" and the verb phrase \"are fruit\",\nwhich in turn consists of the verb \"are\" and the noun \"fruit\".\n```\nTrue\n|                     .                      |\n|                     S                      |\n|      NP      |             VP              |\n|      N       |      VP      |      NP      |\n|   bananas    |      V       |      N       |\n|              |     are      |    fruit     |\n|   bananas    |     are      |    fruit     |\n=======\n```\nIf the phrase cannot be parsed, `result.success` will be \n`False` - e.g. here:\n```python\nresult = parser.parse('bananas bananas bananas'.split())\nprint(result.success)  # False\n```\n\n## Ambiguous phrases\nSome phrases can be parsed in more that one way. In this case, \n`result.success` will still be `True`, but the number of trees will be\nmore than one. \n```python\nresult = parser.parse('fruit flies like bananas'.split())\nprint(result.success)\nfor tree in result.iter_trees():\n    wmg.earley.print_tree(tree, result.final_state)\n    print('=======')\n```\nThe phrase above can be understood in two ways: \n* that particular insects are fond of bananas;\n* that the style of flying of some fruit resembles that of bananas.\nThe parsing result has trees for both interpretations:\n```\n|                             .                             |\n|                             S                             |\n|      NP      |                     VP                     |\n|      N       |      VP      |             PP              |\n|    fruit     |      V       |      P       |      NP      |\n|              |    flies     |     like     |      N       |\n|              |              |              |   bananas    |\n|    fruit     |    flies     |     like     |   bananas    |\n=======\n|                             .                             |\n|                             S                             |\n|             NP              |             VP              |\n|      A       |      NP      |      VP      |      NP      |\n|    fruit     |      N       |      V       |      N       |\n|              |    flies     |     like     |   bananas    |\n|    fruit     |    flies     |     like     |   bananas    |\n=======\n```\n\n## Inexact matching\nBy default, WMG uses only exact matching of tokens.\nHowever, several more matching ways can be activated by special directives:\n* `%w2v`: words are considered equal, \nif the dot product of their embeddings is above the threshold \n(default one is `0.5`). If this mode is used, parser constructor\nrequires one more argument `w2v` - a callable that transforms a word\ninto a vector.\n* `%lemma`: words are considered equal, if at least some of their\nnormal forms coincide. If this mode is used, parser constructor\nrequires one more argument `lemmer` - a callable that transforms a word\ninto a list of normal forms.\n* `%regex`: a word is matched, if it can be parsed by the regular expression.\n* `%exact`: words are considered equal, only if they are the same word.\n\nIf a directive is inserted within a non-terminal, it is active\nuntil the end of this non-terminal. \nIf a directive is inserted outside of non-terminals, it is active until \nthe next directive outside of non-terminals, but can be temporarily \noverridden within non-terminals.\n\nThe code below shows an example of inexact matching \nfor a simple Russian grammar.\n```python\ngrammar = wmg.text_to_grammar.load_granet(\"\"\"\nroot:\n    включи $What $Where\n$What:\n    %w2v\n    свет | кондиционер\n    %regex\n    .+[аеиюя]т[ое]р\n$Where:\n    в $Room\n    на $Room\n$Room:\n    %lemma\n    ванна | кухня | спальня\n\"\"\")\n```\n\nAs a lemmer, we can use pymorphy2\n```python\nfrom pymorphy2 import MorphAnalyzer\n\nanalyzer = MorphAnalyzer()\n\ndef lemmer(text):\n    return [p.normal_form for p in analyzer.parse(text)]\n```\n\nFor embeddings, we can use a compressed FastText model\n```python\nimport compress_fasttext\n\nsmall_model = compress_fasttext.models.CompressedFastTextKeyedVectors.load(\n    'https://github.com/avidale/compress-fasttext/releases/download/v0.0.1/ft_freqprune_100K_20K_pq_100.bin'\n)\nsmall_model.init_sims()\n\ndef w2v(text):\n    return small_model.word_vec(text, use_norm=True)\n```\n\nThe parser combines all the objects from above:\n```python\nparser = wmg.earley.EarleyParser(grammar, w2v=w2v, w2v_threshold=0.5, lemmer=lemmer)\n```\nThe phrase below contains an OOV word `пылесос`, but its embedding is\n close to that of `вентилятор`, so the match succeeds. \nAnother problem\nis that `спальне` is not equal to `спальня`, but their normal forms\ncoinside and therefore match is possible.\n```python\ntokens = 'включи пылесос в спальне'.split()\nresult = parser.parse(tokens)\nprint(result.success)\nfor tree in result.iter_trees():\n    wmg.earley.print_tree(tree, result.final_state, w=16)\n    print('=======')\n```\nThe output is following:\n```\nTrue\n|                               .                               |\n|                             root                              |\n|    включи     |     $What     |            $Where             |\n|               |  кондиционер  |       в       |     $Room     |\n|               |               |               |    спальня    |\n|    включи     |    пылесос    |       в       |    спальне    |\n=======\n```\n\n## Forms and slots\nIn dialogue systems, phrases are often viewed as *forms* - containers of information.\nEach meaningful piece of information can be stored in a typed *slot*. \nYou can think of them as of \n[named groups](https://www.regular-expressions.info/refext.html)\nin regular expressions, or as extended \n[named entities](https://en.wikipedia.org/wiki/Named-entity_recognition).\n\nIn WMG, each slot is associated with some non-terminal symbol. \nThis association can be configured in the same file as the production rules.\n\n```python\nimport word_mover_grammar as wmg\ncfg = \"\"\"\nroot:\n    turn the $What $Where on\n    turn on the $What $Where\n$What: light | conditioner\n$Where: in the $Room\n$Room: bathroom | kitchen | bedroom | living room\nslots:\n    what:\n        source: $What                   \n    room:\n        source: $Room\n\"\"\"\ngrammar = wmg.text_to_grammar.load_granet(cfg)\nparser = wmg.earley.EarleyParser(grammar)\nresult = parser.parse('turn on the light in the living room'.split())\nprint(result.slots)\n```\nThe result will be a \n[yandex-compatible](https://yandex.ru/dev/dialogs/alice/doc/nlu-docpage/#data_to_skill) \nmap of slot names to the slots found in the phrase.\n```\n{'what': {'type': 'string', 'value': 'light', 'text': 'light', 'tokens': {'start': 3, 'end': 4}},\n 'room': {'type': 'string', 'value': 'living room', 'text': 'living room', 'tokens': {'start': 6, 'end': 8}}}\n```\nA few caveats:\n- currently, in ambiguous prhases the slots are taken just from the first parse tree.\nIf you want to extract slots from an arbitrary tree, \nyou can call `result.extract_slots(tree)`.\n- each slot is filled only once. If the non-terminal occurs several times in the phrase,\nthe corresponding slot will be filled with the first occurrence.\n\n\n## Future plans\nIn the future, we plan to enhance the library in the following ways:\n* Conversion to and from NLTK grammars\n* Support of quantifiers and brackets\n* Probabilistic parsing\n* Extraction of intents and slots from parse trees\n* Full compatibility with Yandex Alice syntax\n* You name it!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/avidale/word-mover-grammar",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "word-mover-grammar",
    "package_url": "https://pypi.org/project/word-mover-grammar/",
    "platform": "",
    "project_url": "https://pypi.org/project/word-mover-grammar/",
    "project_urls": {
      "Homepage": "https://github.com/avidale/word-mover-grammar"
    },
    "release_url": "https://pypi.org/project/word-mover-grammar/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A constituency grammar parser with support of morphology and word embeddings",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7150722,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d8e46645449353f9c6fc0570870593ab9d21bdce74282171af5e8a8957ef46f",
          "md5": "a3a4acb9ddf617520ad43b1890f7bb3e",
          "sha256": "26e5f4040979c1a5ad015d147db008c3757b34570e7a65bfbb3ef748df94b1f2"
        },
        "downloads": -1,
        "filename": "word-mover-grammar-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a3a4acb9ddf617520ad43b1890f7bb3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11464,
        "upload_time": "2020-04-28T12:40:48",
        "upload_time_iso_8601": "2020-04-28T12:40:48.447495Z",
        "url": "https://files.pythonhosted.org/packages/3d/8e/46645449353f9c6fc0570870593ab9d21bdce74282171af5e8a8957ef46f/word-mover-grammar-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a69dd8984587acef7c85a90c04fb24a51a356384404f950164bfc4e8f1d03dd2",
          "md5": "339414b3ad8fd77ee3c2c4b19c3d88d7",
          "sha256": "848719c22b319e71af5d5dd24ae4fadc11d911e7966b1d66d6b6f127c353d37a"
        },
        "downloads": -1,
        "filename": "word-mover-grammar-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "339414b3ad8fd77ee3c2c4b19c3d88d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14475,
        "upload_time": "2020-05-02T10:21:39",
        "upload_time_iso_8601": "2020-05-02T10:21:39.609558Z",
        "url": "https://files.pythonhosted.org/packages/a6/9d/d8984587acef7c85a90c04fb24a51a356384404f950164bfc4e8f1d03dd2/word-mover-grammar-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a69dd8984587acef7c85a90c04fb24a51a356384404f950164bfc4e8f1d03dd2",
        "md5": "339414b3ad8fd77ee3c2c4b19c3d88d7",
        "sha256": "848719c22b319e71af5d5dd24ae4fadc11d911e7966b1d66d6b6f127c353d37a"
      },
      "downloads": -1,
      "filename": "word-mover-grammar-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "339414b3ad8fd77ee3c2c4b19c3d88d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14475,
      "upload_time": "2020-05-02T10:21:39",
      "upload_time_iso_8601": "2020-05-02T10:21:39.609558Z",
      "url": "https://files.pythonhosted.org/packages/a6/9d/d8984587acef7c85a90c04fb24a51a356384404f950164bfc4e8f1d03dd2/word-mover-grammar-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}