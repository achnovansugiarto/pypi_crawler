{
  "info": {
    "author": "Coumes Quentin",
    "author_email": "coumes.quentin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![Python package](https://github.com/qcoumes/sandbox-api/workflows/Python%20package/badge.svg)](https://github.com/qcoumes/sandbox-api/actions/)\n[![codecov](https://codecov.io/gh/qcoumes/sandbox-api/branch/master/graph/badge.svg)](https://codecov.io/gh/qcoumes/sandbox-api)\n[![CodeFactor](https://www.codefactor.io/repository/github/qcoumes/sandbox-api/badge)](https://www.codefactor.io/repository/github/qcoumes/sandbox-api)\n[![PyPI Version](https://badge.fury.io/py/sandbox-api.svg)](https://badge.fury.io/py/sandbox-api)\n[![Python 3.7+](https://img.shields.io/badge/python-3.7+-brightgreen.svg)](#)\n[![License MIT](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://github.com/qcoumes/sandbox-api/blob/master/LICENSE)\n\n# Python API for WIMS' adm/raw module\n\nA Python 3 interface to communicate with a [sandbox](https://github.com/PremierLangage/sandbox)\n\n\n## Installation\n\nThe latest stable version is available on [PyPI](https://pypi.org/project/sandbox-api/) :\n\n```bash\npip install sandbox-api\n```\n\nor from sources:\n\n```bash\ngit clone https://github.com/qcoumes/sandbox-api\ncd sandbox-api\npython3 setup.py install\n```\n \n \n## Usage\n \nSandbox-api is pretty straightforward to use, you just need to import Sandbox and create\nan instance with the url of the server :\n \n```python\nfrom sandbox_api import Sandbox\n\nsandbox = Sandbox(\"http://www.my-sandbox.com\")\n```\n\nDefault request timeout is 60 seconds, use the `timeout` argument to override :\n\n```python\nsandbox = Sandbox(\"http://www.my-sandbox.com\", timeout=2.5)\n```\n\n### Specifications\n\nYou can obtain the sandbox' host and container with the `.specifications()` method :\n\n```python\n>>> pprint.pp(sandbox.specifications())\n{'host': {'cpu': {'core': 6,\n                  'logical': 12,\n                  'freq_min': 800.0,\n                  'freq_max': 4700.0},\n          'memory': {'ram': 16723701760,\n                     'swap': 9448923136,\n                     'storage': {'/dev/sda2': 225603444736,\n                                 '/dev/sda1': 313942016,\n                                 '/dev/sdc1': 2000396288000}},\n          'docker_version': '19.03.8-ce',\n          'sandbox_version': '3.0.0'},\n 'container': {'count': 20,\n               'cpu': {'count': 1, 'period': 1000, 'shares': 1024, 'quota': 0},\n               'memory': {'ram': 100000000, 'swap': 100000000, 'storage': -1},\n               'io': {'read_iops': {},\n                      'read_bps': {},\n                      'write_iops': {},\n                      'write_bps': {}},\n               'process': -1,\n               'working_dir_device': '/dev/sda2'}}\n```\n\n### Sandbox' Usage\n\nYou can obtain the sandbox' usage with the `.usage()` method :\n\n```python\n>>> pprint.pp(sandbox.usage())\n{'cpu': {'frequency': 800.0504166666668,\n         'usage': 0.085,\n         'usage_avg': [0.10416666666666667, 0.09000000000000001, 0.0775]},\n 'memory': {'ram': 5376819200,\n            'swap': 0,\n            'storage': {'/dev/sda2': 60275105792,\n                        '/dev/sda1': 286720,\n                        '/dev/sdc1': 1294363865088}},\n 'io': {'read_iops': {'/dev/sdc1': 0, '/dev/sda1': 0, '/dev/sda2': 0},\n        'read_bps': {'/dev/sdc1': 0, '/dev/sda1': 0, '/dev/sda2': 0},\n        'write_iops': {'/dev/sdc1': 0, '/dev/sda1': 0, '/dev/sda2': 0},\n        'write_bps': {'/dev/sdc1': 0, '/dev/sda1': 0, '/dev/sda2': 2048}},\n 'network': {'sent_bytes': 514,\n             'received_bytes': 526,\n             'sent_packets': 6,\n             'received_packets': 6},\n 'process': 326,\n 'container': 0}\n\n```\n\n### Downloading environments and files\n\nYou can download files or environments through the `download(uuid, path=None)` method. `uuid`\ncorrespond to the ID of the environment on the sandbox.\n\nIf only uuid is provided the whole environment will be downloading, if path is also provided, only\nthe file corresponding to path inside the environment will be downloaded.\n\nThe downloaded object is returned as a `io.BytesIO`.\n\n\n### Executing commands\n\nUse the `execute(config, environ=None)` method to execute commands on the sandbox. Config\nmust be a dictionary corresponding to a valid config as defined\n[here](https://documenter.getpostman.com/view/7955851/S1a915EG?version=latest#872b604c-9cce-42e2-8888-9a0311f3a724),\nenviron, if provided, must be a binary object implementing the `.read()` (I.G. `file object` or\n`io.BytesIO`) at position 0 corresponding to a valid environment (again, more information\n[here](https://documenter.getpostman.com/view/7955851/S1a915EG?version=latest#872b604c-9cce-42e2-8888-9a0311f3a724)).\n\nThe returned value is a dictionary corresponding to the response's json :\n\nYou can check a config dictionnary by calling `sandbox_api.utils.validate(config)`.\n\n```python\n>>> pprint.pp(sandbox.execute({\n     \"commands\": [\n             \"echo $((2+2))\"\n     ]\n}))\n\n{'status': 0,\n 'execution': [ {'command': 'echo $((2+2))',\n                 'exit_code': 0,\n                 'stdout': '4',\n                 'stderr': '',\n                 'time': 0.28589797019958496\n        }\n    ],\n 'total_time': 0.2871053218841553}\n```\n\n## Asynchronous API\n\nSince requests may take sometime before a response is available, an asynchronous interface is available\nthrough the class `ASandbox` : \n\n ```python\nfrom sandbox_api import ASandbox\n\nsandbox = ASandbox(\"http://www.my-sandbox.com\")\n```\n\n`ASandbox` use [*aiohttp*](https://docs.aiohttp.org/en/stable/index.html), so timeout works\ndifferently. The default total timeout is still 60 seconds, but you're able to set differents\ntimeout for different part of the process with the following arguments :\n\n* `total` : The whole operation time including connection\n        establishment, request sending and response reading.\n* `connect` : The time consists connection establishment for a new\n        connection or waiting for a free connection from a pool if\n        pool connection limits are exceeded.\n* `sock_connect` : A timeout for connecting to a peer for a new\n        connection, not given from a pool.\n* `sock_read` : The maximum allowed timeout for period between reading\n        a new data portion from a peer.\n\n```python\nsandbox = ASandbox(\"http://www.my-sandbox.com\", total=2.5, connect=0.5)\n```\n\nAll parameters are `floats`. `None` or `0` disables a particular timeout check, see the\n[*aiohttp's ClientTimeout*](https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientTimeout)\nreference for defaults and additional details.\n\nTo send requests, `ASandbox` uses a session that must be closed once done with the instance :\n\n```python\nsandbox = ASandbox(\"http://www.my-sandbox.com\", total=2.5, connect=0.5)\n\n# do stuff with sandbox\n\nawait sandbox.close()\n```\n\nYou can also use a context manager to automatically close the session once done :\n\n```python\nasync with ASandbox(\"http://www.my-sandbox.com\") as sandbox:\n    # do stuff with sandbox\n```\n\nApart from the above, all the methods are the same than `Sandbox` but are all declared with the\n`async` keyword and must be awaited :\n\n```python\nasync with ASandbox(\"http://my-sandbox.com\") as sandbox:\n    usage, specs, execution = await asyncio.gather(\n        sandbox.usage(),\n        sandbox.specifications(),\n        sandbox.execute({\n            \"commands\": [\n                \"echo $((2+2))\"\n            ]\n        })\n    )\n```\n\n\n## Exceptions\n\nSince sandbox-api rely on HTTP, any response with a status code greater or equal to 300 will raise\na corresponding exception `Sanbox{STATUS}` the response (a `requests.Response` object) received is\navailable in the `response` attribute of the exception.\n\nAll of these exceptions inherit `SandboxError`.\n\n```python\nfrom sandbox_api import SandboxError, Sandbox404\n\ntry:\n    file = s.download(\"872b604c-9cce-42e2-8888-9a0311f3a724\", \"unknown\")\nexcept Sandbox404:\n    print(\"'unknown' does not exists in environment '872b604c-9cce-42e2-8888-9a0311f3a724'\")\nexcept SandboxError as e:\n    print(\"Sandbox responded with a '%d' status code\" % e.response.status_code)\n```\n\n\n______\n\n# Changelog\n\n### 1.1.0\n\n* `Sandbox.check()` now return the size of the environment / file, 0 if not\n    found. It should not break backward compatibility because of how int are\n    evaluated as boolean.\n* Added an `async` implementation of the api using the class `ASandbox`.\n* `async` implementation depends on `aiohttp`.\n* Drop support for Python 3.5 & 3.6\n\n#### 1.0.1\n\n* Update README.md\n\n## 1.0.0\n\n* Now compatible with Sandbox 3.0.0\n\n#### 0.0.7\n\n* Now use Github Action for testing and deployment to PyPI\n\n#### 0.0.6\n\n* Added method `Sandbox451`\n* Added python 3.8 tp test matrix\n\n#### 0.0.5\n\n* Added method `check()` to `Sandbox` to check if an environment/file exists on the sandbox.\n\n\n#### 0.0.4\n\n* Added function `validate()` to check a config dict in `sandbox_api.utils`.\n\n\n#### 0.0.3\n\n* Added missing type hints `cpu` for `Sandbox`\n\n\n#### 0.0.2\n\n* Added type hints for `Sandbox`'s attributes.\n\n\n#### 0.0.1\n\n* Initial release",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/qcoumes/sandbox-api",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pl-sandbox-api",
    "package_url": "https://pypi.org/project/pl-sandbox-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/pl-sandbox-api/",
    "project_urls": {
      "Homepage": "https://github.com/qcoumes/sandbox-api"
    },
    "release_url": "https://pypi.org/project/pl-sandbox-api/1.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Provide a Python 3 interface to communicate with a sandbox (https://github.com/PremierLangage/sandbox)",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10794745,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b51dfa58a6a9b94a0ffa3f96068df0649b8db3a70f7814684e7fd8ecb1c1c0a0",
          "md5": "02bcf5a12696300ce73d2cd19f0c9605",
          "sha256": "104f944c47e35f31631f2e18475d1808fbb4bf0aeb6bfcbdacd76b5f47b24b01"
        },
        "downloads": -1,
        "filename": "pl_sandbox-api-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "02bcf5a12696300ce73d2cd19f0c9605",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10090,
        "upload_time": "2021-06-01T18:53:38",
        "upload_time_iso_8601": "2021-06-01T18:53:38.580138Z",
        "url": "https://files.pythonhosted.org/packages/b5/1d/fa58a6a9b94a0ffa3f96068df0649b8db3a70f7814684e7fd8ecb1c1c0a0/pl_sandbox-api-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb296f0021ddda4696a4e884dd742aecc29a019ba7d069dc90ee31e5418007ca",
          "md5": "275ded1329a953a5471ee34a5bcd96bb",
          "sha256": "745460ab090b01668dbebefd50a02af39f4251b0d1e1084d42a665daccf2ddb5"
        },
        "downloads": -1,
        "filename": "pl-sandbox-api-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "275ded1329a953a5471ee34a5bcd96bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10298,
        "upload_time": "2021-07-01T08:51:14",
        "upload_time_iso_8601": "2021-07-01T08:51:14.313426Z",
        "url": "https://files.pythonhosted.org/packages/cb/29/6f0021ddda4696a4e884dd742aecc29a019ba7d069dc90ee31e5418007ca/pl-sandbox-api-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb296f0021ddda4696a4e884dd742aecc29a019ba7d069dc90ee31e5418007ca",
        "md5": "275ded1329a953a5471ee34a5bcd96bb",
        "sha256": "745460ab090b01668dbebefd50a02af39f4251b0d1e1084d42a665daccf2ddb5"
      },
      "downloads": -1,
      "filename": "pl-sandbox-api-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "275ded1329a953a5471ee34a5bcd96bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10298,
      "upload_time": "2021-07-01T08:51:14",
      "upload_time_iso_8601": "2021-07-01T08:51:14.313426Z",
      "url": "https://files.pythonhosted.org/packages/cb/29/6f0021ddda4696a4e884dd742aecc29a019ba7d069dc90ee31e5418007ca/pl-sandbox-api-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}