{
  "info": {
    "author": "Mikael Schultz",
    "author_email": "bitcanon@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Elna SmartMeter Library\nHi and welcome! Click the button below if you enjoy this library and want to support my work. A lot of coffee is consumed as a software developer you know üòÅ\n\n<a href=\"https://www.buymeacoffee.com/bitcanon\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" ></a>\n\n>Needless to say, this is completely voluntary.\n\n## Introduction\nA simple library for the [E.ON Elna](https://www.eon.se/kundservice/vara-tjanster/e-on-elna) API written in Python 3. Elna is a smart power meter that is plugged in to the HAN (Home Area Network) port of the electricity meter using an RJ12 connector. \n\nThis library is using the built-in API in the Elna device to gather information, about your power **consumption** and/or **production**, directly from the device itself.\n\n> Elna is based on hardware from Net2Grid so it's probably also compatible with more devices from the Net2Grid family. Any feedback is welcome.\n\n## Demo\nHere is a small command-line demo application showing the information that can be obtained by the library.\n\n![SmartMeter CLI Demo](https://github.com/bitcanon/elnasmartmeter/blob/main/docs/img/elna-cli-application.gif)\n\nCheck out the source code to the demo here: [smartmeter-demo.py](https://github.com/bitcanon/elnasmartmeter/blob/master/examples/smartmeter-demo.py).\n\n## Installation\nSetup the virtual environment:\n```\nvirtualenv venv\nsource venv/bin/activate\n```\n\nInstall the latest version with `pip`:\n```\npip install elnasmartmeter\n```\n\n## Basics\n### Setup\nIn order to use the library you need to know the IP address of the Elna device. You can find it in the DHCP server of your router (or wherever you are running your DHCP server). The MAC address of Elna is printed on the back of the device.\n\n```python\nfrom elna import smartmeter\n\n# Connect the library to the Elna device\nmeter = smartmeter.Connect('192.168.0.10')\n\n# Get general information\ninfo = meter.get_info()\n\n# Get power readings\nelectricity = meter.get_electricity()\n```\nIt's as simple as that to fetch the power consuption/production of your household. In a moment we will be looking at how to access the information via the `info` and `electricity` objects.\n\n### Exceptions\nAll of the methods callable from the library will throw exceptions on failure. A full list of exceptions can be found [here](https://github.com/bitcanon/elnasmartmeter/blob/master/elnasmartmeter/exceptions.py).\n```python\nfrom elna import smartmeter\nfrom elna.exceptions import *\n...\ntry:\n    info = meter.get_info()\nexcept NewConnectionError as e:\n    print(e)\n```\n\n### Printing Objects and Properties\nThe objects representing various entities in the library can be output with the `print()` method for easy inspection of its properties.\n\nAs an example, you can output the properties of an `Information` object by passing it to the `print()` method:\n```python\nprint(info)\n# Output: <class 'elna.classes.Information'>: {'id': '01ab:0200:00cd:03ef', 'manufacturer': 'NET2GRID', 'model': 'SBWF4602', 'firmware': '1.7.14', 'hardware': 1, 'batch': 'HMX-P0D-123456'}\n```\nAlso, the properties are easily accessed from the object:\n```python\nprint(f\"Model    : {info.model}\")\nprint(f\"Firmware : {info.firmware}\")\n```\nThe same goes for all object classes in the library: `Information`, `Electricity`, `Power` and `WLANInformation`.\n\n## Access the Data\nThere are two pieces of data that can be fetched with this library: general device `Information` and `Power` statistics.\n\n### Device Information\nTo get the general device information we just call the `get_info()` method.\n\n```python\ninfo = meter.get_info()\n```\nAccess the values via the class properties:\n```python\ninfo.id                         # Returns the device ID        : '01ab:0200:00cd:03ef'  (for example).\ninfo.manufacturer               # Returns the manufacturer     : 'NET2GRID'\ninfo.model                      # Returns the model            : 'SBWF4602'\ninfo.firmware                   # Returns the firmware version : '1.7.14'\ninfo.hardware                   # Returns the hardware version : 1\ninfo.batch                      # Returns the batch number     : 'HMX-P0D-123456'\n```\n### Power Readings\nTo get the power readings we call the `get_electricity()` method. These readings are a bit more complex since the information gathered from the Elna device is divided in to sub-classes, but it's not that complicated:\n\n```python\nelectricity = meter.get_electricity()\n```\n\n#### Now\nGet the **current** power consumption:\n```python\nelectricity.now.key             # Returns the string  : 'now'\nelectricity.now.value           # Returns the power   : 453  (for example).\nelectricity.now.unit            # Returns the unit    : 'W'  (as in Watt)\nelectricity.now.timestamp       # Returns a timestamp : '2022-12-24 13:37:00'\n```\n\n#### Minimum\nGet the **minimum** power consumption in the period:\n```python\nelectricity.minimum.key         # Returns the string  : 'minimum'\nelectricity.minimum.value       # Returns the power   : 202  (for example).\nelectricity.minimum.unit        # Returns the unit    : 'W'  (as in Watt)\nelectricity.minimum.timestamp   # Returns a timestamp : '2022-12-13 13:37:00'\n```\n\n#### Maximum\nGet the **maximum** power consumption in the period:\n```python\nelectricity.maximum.key         # Returns the string  : 'maximum'\nelectricity.maximum.value       # Returns the power   : 14320  (for example).\nelectricity.maximum.unit        # Returns the unit    : 'W'  (as in Watt)\nelectricity.maximum.timestamp   # Returns a timestamp : '2022-12-31 13:37:00'\n```\n> The time frame (period) of which the **minimum** and **maximum** values has been recorded is unknown (to me).\n\n#### Imported\nGet the **imported** power. This would be total power coming **into** the household:\n```python\nelectricity.imported.key         # Returns the string  : 'imported'\nelectricity.imported.value       # Returns the power   : 12345678  (for example).\nelectricity.imported.unit        # Returns the unit    : 'Wh'  (as in Watt hours)\nelectricity.imported.timestamp   # Returns a timestamp : '2022-12-31 13:37:00'\n```\n\n#### Exported\nGet the **exported** power. This would be total power coming **out of** the household:\n```python\nelectricity.exported.key         # Returns the string  : 'exported'\nelectricity.exported.value       # Returns the power   : 87654321  (for example).\nelectricity.exported.unit        # Returns the unit    : 'Wh'  (as in Watt hours)\nelectricity.exported.timestamp   # Returns a timestamp : '2022-12-31 13:37:00'\n```\n> Check out the smartmeter demo at the top to try it out.\n\n### WLAN Information\nWe can also get the WLAN information of the device by calling the `get_wlan_info()` method. The device can act as both a Wireless Client (Station) and an Access Point (AP) depending on if it has been connected to you WiFi network or not.\n\n```python\nwlan = meter.get_wlan_info()\n```\n\nAccess the WLAN information via the class properties of the object:\n```python\nwlan.mode           # Returns the current WLAN mode\nwlan.ap_ssid        # Returns the Access Point SSID\nwlan.ap_key         # Returns the Access Point Password\nwlan.client_ssid    # Returns the SSID of the AP Elna is connected to\nwlan.join_status    # Returns the number of clients joined to the Elna AP\nwlan.mac            # Returns the MAC address currently in use\nwlan.ip             # Returns the IP address\nwlan.subnet         # Returns the Subnet mask\nwlan.gateway        # Returns the Default gateway\nwlan.dns            # Returns the Primary DNS server\nwlan.dnsalt         # Returns the Secondary DNS server\nwlan.n2g_id         # Returns the Net2Grid ID number\nwlan.sta_mac        # Returns the MAC address of the WLAN Station\nwlan.ap_mac         # Returns the MAC address of the Access Point\nwlan.eth_mac        # Returns the Ethernet MAC address (?)\n```\n> Note: The descriptions following the WLAN properties above are estimated guesses.\n\n## Legal Disclaimer\n\nThe product names, trademarks and registered trademarks in this repository, are property of their respective owners, and are used by the author for identification purposes only. The use of these names, trademarks and brands, do not imply endorsement or affiliation.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bitcanon/elnasmartmeter",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "elnasmartmeter",
    "package_url": "https://pypi.org/project/elnasmartmeter/",
    "platform": null,
    "project_url": "https://pypi.org/project/elnasmartmeter/",
    "project_urls": {
      "Homepage": "https://github.com/bitcanon/elnasmartmeter"
    },
    "release_url": "https://pypi.org/project/elnasmartmeter/1.1.1/",
    "requires_dist": [
      "requests",
      "python-dateutil"
    ],
    "requires_python": ">=3.6",
    "summary": "A simple library for the E.ON Elna API written in Python 3.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16128953,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c27f0e4c47bf398e365972239308c88e0c797de57a0ba7afdf7cd85973ac3a4f",
          "md5": "7771cf6316945d0c075494b00055ed44",
          "sha256": "aac4adfaef3cf82a5334c3e87e0999d52fe7c715026b8c15f1bae277c502443d"
        },
        "downloads": -1,
        "filename": "elnasmartmeter-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7771cf6316945d0c075494b00055ed44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8363,
        "upload_time": "2022-12-16T13:35:12",
        "upload_time_iso_8601": "2022-12-16T13:35:12.268894Z",
        "url": "https://files.pythonhosted.org/packages/c2/7f/0e4c47bf398e365972239308c88e0c797de57a0ba7afdf7cd85973ac3a4f/elnasmartmeter-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc66e39dd4472129b43c6712baa08e164713c04e4e4d2e4531da0a732f76a3fd",
          "md5": "6538e0aef63f737d0fd8067d44344f98",
          "sha256": "ceae4a1714812efa9e40555ea1601af38d9a6816f49959bb64f11d0aadac25f4"
        },
        "downloads": -1,
        "filename": "elnasmartmeter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6538e0aef63f737d0fd8067d44344f98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8349,
        "upload_time": "2022-12-16T13:35:14",
        "upload_time_iso_8601": "2022-12-16T13:35:14.200780Z",
        "url": "https://files.pythonhosted.org/packages/cc/66/e39dd4472129b43c6712baa08e164713c04e4e4d2e4531da0a732f76a3fd/elnasmartmeter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a8046052840f984fd82949b0d7b44e719a909368683461a663f64fcb6f2e03e",
          "md5": "c3e8266fffcc4184c9b1abb732657c4e",
          "sha256": "abfe44c584b9d90883ee8ec9d2be927c56da377de32bd1bf71bdb6129060f09e"
        },
        "downloads": -1,
        "filename": "elnasmartmeter-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3e8266fffcc4184c9b1abb732657c4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9692,
        "upload_time": "2022-12-16T18:00:40",
        "upload_time_iso_8601": "2022-12-16T18:00:40.716090Z",
        "url": "https://files.pythonhosted.org/packages/8a/80/46052840f984fd82949b0d7b44e719a909368683461a663f64fcb6f2e03e/elnasmartmeter-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e0ba41ecb347c016c553922e7df331e7d1ea6c0b43ba3ea439672cf424b8a2e",
          "md5": "207d39763b9f33f583e0027def3f986f",
          "sha256": "c4e97785207d36e5ece2f3e7bc2dda47c1d766a62c4c1c3f01afd7a8fdba8098"
        },
        "downloads": -1,
        "filename": "elnasmartmeter-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "207d39763b9f33f583e0027def3f986f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12105,
        "upload_time": "2022-12-16T18:00:42",
        "upload_time_iso_8601": "2022-12-16T18:00:42.546026Z",
        "url": "https://files.pythonhosted.org/packages/3e/0b/a41ecb347c016c553922e7df331e7d1ea6c0b43ba3ea439672cf424b8a2e/elnasmartmeter-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eadef1a71d27931c5da8487fc976743e3f4bd71add3c5a926bda3d9c3662f97a",
          "md5": "ee2fbfc1f952a1a527feec8e2f92afab",
          "sha256": "47a7d5c88da64ed3a3ff5d21d5ce1b0a60ed4ac726b15f390a0efdc52c59fd63"
        },
        "downloads": -1,
        "filename": "elnasmartmeter-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee2fbfc1f952a1a527feec8e2f92afab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9691,
        "upload_time": "2022-12-16T18:02:34",
        "upload_time_iso_8601": "2022-12-16T18:02:34.470860Z",
        "url": "https://files.pythonhosted.org/packages/ea/de/f1a71d27931c5da8487fc976743e3f4bd71add3c5a926bda3d9c3662f97a/elnasmartmeter-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd7a97c961885ff7603b1e43a382de6c2cf748958eadaea426646bd07dbe3f8f",
          "md5": "8ee2e3be2be003b2f1b4de32da8d940f",
          "sha256": "aa683d8d68a55f281b7fbf88db0e0aaab11bc856bc04e0c81a09440b9c3ecefb"
        },
        "downloads": -1,
        "filename": "elnasmartmeter-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ee2e3be2be003b2f1b4de32da8d940f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12106,
        "upload_time": "2022-12-16T18:02:36",
        "upload_time_iso_8601": "2022-12-16T18:02:36.445314Z",
        "url": "https://files.pythonhosted.org/packages/cd/7a/97c961885ff7603b1e43a382de6c2cf748958eadaea426646bd07dbe3f8f/elnasmartmeter-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eadef1a71d27931c5da8487fc976743e3f4bd71add3c5a926bda3d9c3662f97a",
        "md5": "ee2fbfc1f952a1a527feec8e2f92afab",
        "sha256": "47a7d5c88da64ed3a3ff5d21d5ce1b0a60ed4ac726b15f390a0efdc52c59fd63"
      },
      "downloads": -1,
      "filename": "elnasmartmeter-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ee2fbfc1f952a1a527feec8e2f92afab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9691,
      "upload_time": "2022-12-16T18:02:34",
      "upload_time_iso_8601": "2022-12-16T18:02:34.470860Z",
      "url": "https://files.pythonhosted.org/packages/ea/de/f1a71d27931c5da8487fc976743e3f4bd71add3c5a926bda3d9c3662f97a/elnasmartmeter-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd7a97c961885ff7603b1e43a382de6c2cf748958eadaea426646bd07dbe3f8f",
        "md5": "8ee2e3be2be003b2f1b4de32da8d940f",
        "sha256": "aa683d8d68a55f281b7fbf88db0e0aaab11bc856bc04e0c81a09440b9c3ecefb"
      },
      "downloads": -1,
      "filename": "elnasmartmeter-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8ee2e3be2be003b2f1b4de32da8d940f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12106,
      "upload_time": "2022-12-16T18:02:36",
      "upload_time_iso_8601": "2022-12-16T18:02:36.445314Z",
      "url": "https://files.pythonhosted.org/packages/cd/7a/97c961885ff7603b1e43a382de6c2cf748958eadaea426646bd07dbe3f8f/elnasmartmeter-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}