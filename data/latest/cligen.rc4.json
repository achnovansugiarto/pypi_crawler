{
  "info": {
    "author": "Anthon van der Neut",
    "author_email": "a.van.der.neut@ruamel.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "\ncligen\n======\n\n.. image:: https://sourceforge.net/p/ruamel-cligen/code/ci/default/tree/_doc/_static/license.svg?format=raw\n     :target: https://opensource.org/licenses/MIT\n\n.. image:: https://sourceforge.net/p/ruamel-cligen/code/ci/default/tree/_doc/_static/pypi.svg?format=raw\n     :target: https://pypi.org/project/cligen\n\n.. image:: https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/oitnb.svg?format=raw\n   :target: https://bitbucket.org/ruamel/oitnb/\n\ncligen is is a utility to generate commandline parsing routines writing\nyour ``__main__.py`` from a specification in YAML.\n\nFor a commandline utility ``direction`` that needs the subcommands ``left`` and ``right`` and \nwhere the subcommand ``left`` can\nhave the option ``--u-turn`` (assuming you drive on the right side of the road), and \nboth subcommands could have a ``--verbose`` option  would look like::\n\n  !Cli 0:\n  - !Instance driving.Direction\n  - !Option [verbose, v, !Help increase verbosity level, !Action count]\n  - left:\n    - !Help turning to the left\n    - !Option [u-turn, U, !Action store_true, !Help make a U-turn]\n  - right:\n    - !H turning to the right\n\nwith the result that ``direction left -h`` will generate::\n\n  usage: direction left [-h] [--u-turn] [--verbose]\n\n  optional arguments:\n    -h, --help     show this help message and exit\n    --u-turn, -U   make a U-turn\n    --verbose, -v  increase verbosity level\n\nWhen ``direction left`` is called, the commandline parsing code will\ncreate an instance of the class ``Direction`` imported from ``driving.py``\nand call its method ``left_subcommand`` (and if not found its method ``left``). \n``cligen`` can alternatively generate code\nthat calls functions imported from a Python file, or call code inserted \nfrom the specification in ``__main__.py`` itself (in this case `..._subcommand` is not tried).\n\nThe YAML document can either be in file ``cli.yaml`` of its own or, if you want to diminish file clutter \nin your project root,\nit can be stored in the variable ``_cligen_data`` in ``__init__.py``. The YAML document uses various tags,\nmany of which have a short option (e.g. ``!H`` is equivalent to using ``!Help``).\n\nHaving the commandline options and argument data in a programmatically modifiable format\nlike YAML, makes it easy to check or manipulate all your utilities. E.g. if you want to\nmake sure that all utilities that have a ``--verbose`` that option also have a ``--quit``\noption that decreases the verbosity level.\n\nFeature list\n++++++++++++\n\n- no dependencies on anything but the Python standard library. That is unless your config file is \n  in a format that requires some installed library ( YAML -> ruamel.yaml )\n- allow aliases for tagged scalars to be used by other tags::\n\n    - !Help &xhelp text1 text2 text3  # this is the same as: \"&xhelp !Help text1 text2 text3\"\n    - !Prolog [*xhelp]                # xhelp is a tagged scalar, \"!Prolog *xhelp\" would error\n\nvalues that are sequences\n+++++++++++++++++++++++++\n\n``cligen`` will add elements of subparser definitions that are key-value pairs to the\ninvocation of ``.add_parser()``, **unless the value is a sequence**. This\nallows for some arguments to be added, without using a tag (the sequence restriction is in order\nto allow nested subparsers, although this currently has not been implemented). \n\nThis means you cannot add ``- aliases: [altsubp]`` (you should use\n``- !Alias altsubp`` or ``- !Alias [altsubp]``), but you can use ``-\ndescription: some subparser description text``\n\nShorthand\n+++++++++\n\nA subparser can have a ``- !Shorthand xyz`` element. If the command is invoked using ``xyz`` (e.g. \nif there is a soft link from xyz to the normal executable/entry_point name), then\nthe subparser name will be inserted in the argument list. That way if your normal command\nname is ``hg`` and you often use the subcommand ``commit``, you can link ``hgc`` to ``hg`` and \nlet ``hgc -m message`` be a shorthand for ``hg commit -m message``.\n\nUsing !Config\n+++++++++++++\n\nIn its most explicit form the tag ``!Config`` can takes a two element sequence as value. The first\nelement indicates the *type* (``pon``, ``yaml``, ``ini``, TBI: ``json``), the second the *path* to\nthe file. A path starting with a tilde (``~``) will be expanded. A path not starting with tilde, or \n(forward-)slash (``/``),\nwill be appended to your users config directory.\n\nIf ``!Config`` is followed by a scalar that looks like a path (i.e. the\nvalue starts with ``~`` or includes a ``/``) the extension of the path is taken to be\nthe *type*. In other cases ``!Config`` is assumed to be followed by a *type* and the basename is\nderived from the package name (``_package_data['full_package_name']``) in your users config directory.\n\nA user config directory is based on XDG config locations \n(on Windows, the config information is expected under ``%APPDATA%``)\n\nWhen ``!Config`` is specified the inserted code will check for ``--config some_explicit_path`` on the\ncommandline and load the config data from the path specified.\n\nconfig file format\n^^^^^^^^^^^^^^^^^^\n\nConfig files are assumed to contain a dictionary at the root level (for formats like ``.ini``\nthe data is converted to a dictionary during loading).  This dictionary contains keys that correspond to\nthe various subparsers. A section ``global`` (or optionally ``glbl`` in PON to prevent use of\na reserved keyword, renamed to ``global`` after loading), is used for defaults for options\nthat come before the subparser as well as for global options.  Each section consists of\nkey-value pairs, where the key corresponds to a long option (``--verbose``) or if that\nis not available the short option (``-v``), either without the leading dashes.\n\nAssuming you have the following configuration::\n\n   !Cli 0:\n   - !Opt [verbose, v, !H increase verbosity, !Action count]\n   - !Config [pon, /usr/local/etc/myutil.pon]\n   - subp1: []\n\nyour ``myutil.pon`` can use::\n\n   dict(glbl=dict(verbose=2))\n\nto set the verbosity (you might want to format your PON somewhat nicer.\n\n\nBackground\n++++++++++\n\nWhen you create commandline utilities in Python, that have options and arguments, you need\nto include code that processes ``sys.argv`` or use some (standard) library that does that\nfor you.\n\nWhen I started writing utilities in Python (1.5.2) only ``getopt`` was available, and\nsimlarity with the C library made that an easy transition. Relatively soon I implemented\na way to have sub-commands, and had some boilerplate code that could be inserted in the\nvarious utilities that I wanted to have subcommands.\n\nA few years later I switched to using ``optparse`` (which started shipping with Python 2.3),\nfor a brief period of time before settling on ``argparse`` (shipped with 3.2 and 2.7 but\navailable before that). ``argparse`` covers almost all of needs (single depth sub-commands,\nargument checking), but is a bit verbose, so I used a wrapper around ``argparse`` using\ndecorators on methods of a \"command class\" defined in ``__main__.py`` which was populated\nfrom a boilerplate and then extended with copy and paste. The implementation for this,\nincluding special ``!Action`` handlers, is available in the package ``ruamel.std.argparse``,\nwhich needed to be installed with all commandline utilities, and was made into a package\ndependency. The \"command class\" is a subclass of one imported from ``ruamel.std.argparse``\nand normally instantiates a class with parse_args result then calls corresponding methods\nof \"real\" code in that code.\n\nUsing a package ``ruamel.std.argparse`` has the advantage that it is possible to add\nfunctionality relevant for most or all utilties depended upon it. E.g. you could make\nan subcommand ``version``, or adapt the option ``--version``, to not only list the\nversion of the commandline utility itself, but also that of Python or any other packages\nrequired by the subcommand. However, not all such things were possible by upgrading\n``ruamel.std.argparse`` and would not only need updating of the boilerplate, but also all\nthe existing ``__main__.py`` of the (100+) commandline utilities. The former was easy,\nthe latter of course only done partially.  Regenerating these automatically would not\ntake care of the copy-and-paste parts without writing routines that would analyse and\nupdate Python source. Doable but non-trivial.\n\nOptions and arguments from function specification\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor various languages, including Python, there are commandline parsing libraries that will\nautomatically generate options and arguments from one or more function specfications. \n\nI have used these, but invariably for any use beyond a simple example, some things have to be \nadded to the functions (help, special\nactions, short versions for options that cannot be derived automatically) that make this approach \na cludgy hybrid.\n\nYAML\n++++\n\nSwitching to a specification in YAML for the commandline interpreting code has several advantages:\n\n- You no longer need a dependency on ``ruamel.std.argparse``, all relevant (i.e. used) code is\n  copied into the generated `__main__.py`\n- If there are changes that require updating all of the specifications this can be more easily \n  automated for YAML than for Python source. \n- The YAML can be easily implemented with version numbers that allow for backward incompatible changes\n  in the format if necessary. Breaking changes in ``ruamel.std.argparse`` would require fixing\n  all dependend commandline utilities, consistently from the start, on some major/minor version\n  number (which was not done, but could be done in an automated way).\n\nthere are also some disadvantages of using YAML:\n\n- The ``__main__.py`` is currently written from scratch\n  every time cligen runs, so manual changes to that file will be overwritten. \n  However it is possible to include code in the YAML specification that will go into ``__main__.py`` (so\n  some changes could be put there). If necessary ``cligen`` could be adapted to supportsome updating mechanism, preserving\n  manual changes.\n- Less easy to make one off quick fixes in the ``__main__.py``, these might require extending the\n  specfication and updating ``cligen`` (thereby enforcing more consitency)\n- To get additional \"global\" functionality into a commandline utility a new ``__main__.py`` needs\n  to be created and a new version pushed to PyPI (or your local store), instead of \"just\"\n  running ``pip install -U ruamel.std.argparse``.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://sourceforge.net/p/ruamel-cligen",
    "keywords": "pypi statistics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cligen",
    "package_url": "https://pypi.org/project/cligen/",
    "platform": null,
    "project_url": "https://pypi.org/project/cligen/",
    "project_urls": {
      "Homepage": "https://sourceforge.net/p/ruamel-cligen"
    },
    "release_url": "https://pypi.org/project/cligen/0.3.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "generate __main__.py with argparse setup generated from YAML",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15358151,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3917699b9f82048de5fefb64e89fbdf0df82b61bbfb97c2578022d5b081d62cc",
          "md5": "27a4014a7c045df42a2345ce8e27b6db",
          "sha256": "a25851e7ad5b0c957865152c31c5b4eb570ad6a735a21359b187d1876262cfcd"
        },
        "downloads": -1,
        "filename": "cligen-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27a4014a7c045df42a2345ce8e27b6db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 26065,
        "upload_time": "2021-12-30T10:19:33",
        "upload_time_iso_8601": "2021-12-30T10:19:33.467141Z",
        "url": "https://files.pythonhosted.org/packages/39/17/699b9f82048de5fefb64e89fbdf0df82b61bbfb97c2578022d5b081d62cc/cligen-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0569274125e99798b3804d9481ca10bdb19bca33822d3a18baca159e03c27d7e",
          "md5": "9de626cc903aca4d7f49c63b88c30b68",
          "sha256": "160d47d3c725efe6a829adb7472b96c18467320ca32e7ec94ace7f26f806c3e7"
        },
        "downloads": -1,
        "filename": "cligen-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9de626cc903aca4d7f49c63b88c30b68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 35673,
        "upload_time": "2021-12-30T10:19:31",
        "upload_time_iso_8601": "2021-12-30T10:19:31.011615Z",
        "url": "https://files.pythonhosted.org/packages/05/69/274125e99798b3804d9481ca10bdb19bca33822d3a18baca159e03c27d7e/cligen-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d2a85af9b6245e92bf536555e53869725033db9663995d860a2b87efa048b7d",
          "md5": "621e72491a1724e2ad70d804be0ff3f0",
          "sha256": "b4f62a8967038ad9842205c3f0a91338bd2231fa8fa10d1bc58a6b5ae59e58e1"
        },
        "downloads": -1,
        "filename": "cligen-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "621e72491a1724e2ad70d804be0ff3f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 23953,
        "upload_time": "2022-10-09T10:51:14",
        "upload_time_iso_8601": "2022-10-09T10:51:14.480010Z",
        "url": "https://files.pythonhosted.org/packages/7d/2a/85af9b6245e92bf536555e53869725033db9663995d860a2b87efa048b7d/cligen-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5500df0427c855baabaacba824f18abb7d6f0e254352247eb443dbae114d7bd",
          "md5": "a007c291a095a24722375a6148f9d069",
          "sha256": "63ba54e35670df2d97978230ee9322aec461713dfe9b4fe8ed8ca48245c37f29"
        },
        "downloads": -1,
        "filename": "cligen-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a007c291a095a24722375a6148f9d069",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 29445,
        "upload_time": "2022-10-09T10:51:12",
        "upload_time_iso_8601": "2022-10-09T10:51:12.462569Z",
        "url": "https://files.pythonhosted.org/packages/f5/50/0df0427c855baabaacba824f18abb7d6f0e254352247eb443dbae114d7bd/cligen-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de8b3fad83a6e80d4b19e0f3d92925fa7a3d7a5c1a7ed602867e58775878ac40",
          "md5": "a32ad7e8679200c0e76556ac70f579c9",
          "sha256": "fc2a5bc4dcde10a11006c5e23fd1aed99f2af9cab90a1f52c25236f64e5a77de"
        },
        "downloads": -1,
        "filename": "cligen-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a32ad7e8679200c0e76556ac70f579c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 31954,
        "upload_time": "2022-10-10T06:00:50",
        "upload_time_iso_8601": "2022-10-10T06:00:50.375453Z",
        "url": "https://files.pythonhosted.org/packages/de/8b/3fad83a6e80d4b19e0f3d92925fa7a3d7a5c1a7ed602867e58775878ac40/cligen-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b98ebd79e23e44095e26027948be5d519c6633fd888e650655eb89e6d69f79e",
          "md5": "000aae4221f5d0855497cc38a59c23c0",
          "sha256": "677e8c73dcf3d6729825628efc38aea2f2664ea33fb3887119966bf749586063"
        },
        "downloads": -1,
        "filename": "cligen-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "000aae4221f5d0855497cc38a59c23c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 40375,
        "upload_time": "2022-10-10T06:00:47",
        "upload_time_iso_8601": "2022-10-10T06:00:47.457530Z",
        "url": "https://files.pythonhosted.org/packages/4b/98/ebd79e23e44095e26027948be5d519c6633fd888e650655eb89e6d69f79e/cligen-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7556e03dc87c638a20b94ed46d7ff375db49c0660d2c75dd244cadaddc4dfc4e",
          "md5": "62adf01e1a671f4380b8ee03af86b0b8",
          "sha256": "448ad33215ebfd5c7a7e9e084118d5a7c6e01b30dc5058de6954e415a25a7f7b"
        },
        "downloads": -1,
        "filename": "cligen-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62adf01e1a671f4380b8ee03af86b0b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 31839,
        "upload_time": "2022-10-10T08:22:03",
        "upload_time_iso_8601": "2022-10-10T08:22:03.226025Z",
        "url": "https://files.pythonhosted.org/packages/75/56/e03dc87c638a20b94ed46d7ff375db49c0660d2c75dd244cadaddc4dfc4e/cligen-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a658619ba90cea571bafe339d2d615772f842b745311bb2e23e9ac47e48dca9b",
          "md5": "50bb4f4eb11fb4b118a65c090b7c976a",
          "sha256": "14825cfba572e9c20e46a5b9d373467e6950ab72c6ccaa95ac6f92985281c9e7"
        },
        "downloads": -1,
        "filename": "cligen-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "50bb4f4eb11fb4b118a65c090b7c976a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 40326,
        "upload_time": "2022-10-10T08:22:01",
        "upload_time_iso_8601": "2022-10-10T08:22:01.184814Z",
        "url": "https://files.pythonhosted.org/packages/a6/58/619ba90cea571bafe339d2d615772f842b745311bb2e23e9ac47e48dca9b/cligen-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7556e03dc87c638a20b94ed46d7ff375db49c0660d2c75dd244cadaddc4dfc4e",
        "md5": "62adf01e1a671f4380b8ee03af86b0b8",
        "sha256": "448ad33215ebfd5c7a7e9e084118d5a7c6e01b30dc5058de6954e415a25a7f7b"
      },
      "downloads": -1,
      "filename": "cligen-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62adf01e1a671f4380b8ee03af86b0b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 31839,
      "upload_time": "2022-10-10T08:22:03",
      "upload_time_iso_8601": "2022-10-10T08:22:03.226025Z",
      "url": "https://files.pythonhosted.org/packages/75/56/e03dc87c638a20b94ed46d7ff375db49c0660d2c75dd244cadaddc4dfc4e/cligen-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a658619ba90cea571bafe339d2d615772f842b745311bb2e23e9ac47e48dca9b",
        "md5": "50bb4f4eb11fb4b118a65c090b7c976a",
        "sha256": "14825cfba572e9c20e46a5b9d373467e6950ab72c6ccaa95ac6f92985281c9e7"
      },
      "downloads": -1,
      "filename": "cligen-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "50bb4f4eb11fb4b118a65c090b7c976a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 40326,
      "upload_time": "2022-10-10T08:22:01",
      "upload_time_iso_8601": "2022-10-10T08:22:01.184814Z",
      "url": "https://files.pythonhosted.org/packages/a6/58/619ba90cea571bafe339d2d615772f842b745311bb2e23e9ac47e48dca9b/cligen-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}