{
  "info": {
    "author": "Anthony Walker",
    "author_email": "walkanth@oregonstate.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyPlume\nThis package is intended to build reactor network models for exhaust plumes based on user input and incorporate some methods for analysis of the results.\n\n### Installation\n\n#### Conda\nThis package can be installed via [conda](https://anaconda.org/anthony-walker/pyplume) but the appropriate channels have to be available to conda or the install will fail. I suggest creating an environment via\n\n```shell\nconda create --name pyplume -c anthony-walker -c cantera -c conda-forge pyplume\n```\nThis should ensure that all the appropriate channels are accessible. If you know they are added, you can use\n```shell\nconda create --name pyplume -c anthony-walker pyplume\n```\nOtherwise, the package can be installed with `conda` as\n\n```shell\nconda install -c anthony-walker pyplume\n\n```\n#### Pip\nThis package can also be [pip](https://pypi.org/project/pyplume/) installed but `pip` will not install the necessary dependencies---so make sure they're installed first by whatever means.\n\n```shell\npip install pyplume\n```\n\n#### Troubleshooting installation\n\nThis package relies on [Cantera](https://cantera.org/) and other packages. If there is a failure in the `conda install` process be sure to check that the appropriate channels are added or add them to the install command, e.g.,\n\n```shell\nconda create --name pyplume -c anthony-walker -c cantera -c conda-forge pyplume\n```\n\n```shell\nconda config --add channels cantera\nconda config --add channels conda-forge\nconda config --add channels anthony-walker\n```\n\n### Mechanism management\nThe model generation two requires chemical mechanisms to run. Some of these mechanisms can be found within Cantera and exploited that way. Otherwise, mechanisms files that you want to use with this model generation software can be managed in two ways. The first way is through the command line interface (CLI). The `pyplume.mech` is the command which will be used to invoke the necessary commands to manage the mechanisms.\n\nTo list the functions, invoke the help menu.\n```shell\n  pyplume.mech -h\n```\n```shell\nusage: pyplume.mech [-h] [-r] [-l] [-a ADD] [-d DELETE] [-t]\n\nThis is the commandline interface for managing mechanism files of PyPlume.\n\noptional arguments:\n\n  -h, --help            show this help message and exit\n  -r, --restore         set this flag to restore mechanism files.\n  -l, --list            set this flag to list mechanism files.\n  -a ADD, --add ADD     this can be used to add a mechanism file to the codes internal data.\n  -d DELETE, --delete DELETE\n                        this can be used to delete a mechanism file to the codes internal data.\n  -t, --test            set this flag to run test functions.\n```\n\nAfter that there are only 5 other options: restore, list, add, delete, and test.\n\n`pyplume.mech -r` restores the original mechanisms from a backup folder. This will overwrite any mechanisms with the same name as the original set of mechanisms.\n\n`pyplume.mech -l` lists all the mechanisms currently available to the program.\n\n`pyplume.mech -a mySuperCoolMech.cti` will add `mySuperCoolMech.cti` to the mechanisms available to the program.\n\n`pyplume.mech -d mySuperCoolMech.cti` will delete `mySuperCoolMech.cti` from the mechanisms available to the program.\n\n`pyplume.mech -t` will run a set of test functions designed to test this module.\n\nThe second way of managing mechanism files is through a script. This can be done with internal functions as\n```python\nimport pyplume.mech\nimport pyplume.tests.testMechs\n\ncti = 'mySuperCoolMech.cti'\n\npyplume.mech.mechFileAdd(cti) #Add mechanism file\n\npyplume.mech.mechFileDelete(cti) #Delete mechanism file\n\npyplume.mech.mechFileRestore() #Restore mechanism files\n\npyplume.mech.mechFileList() #list mechanism files\n\npyplume.tests.testMechs.CLI() #Run tests for mech management\n\n```\n\n### Model generation tool\nThe model generation tool can be implemented with the most functionality in a script but there is also a command line interface. The code works by creating an object which represents a complex reactor network created by Cantera. This reactor network is made up of a three reservoirs, a combustor, and the desired exhaust network. One reservoir is for the fuel/air mixture, one is for atmosphere entrainment, and one is for the final exhaust stage. The combustor assumes the mechanism of the fuel/air reservoir and the exhaust is the focus of the model which has the most configurable options. The reactors in the system are connected via multiple `MassFlowController` objects based on an adjacency matrix of connections. The fuel/air reservoir is connected to the combustor with the mass flow function that follows.\n```python\n  def massFlow(t):\n    return combustor.mass/residenceTime\n```\nThe mass flow is then maintained to the first exhaust reactor with the same mass flow function to ensure continuity. Successive reactors then evenly divide their mass amongst their sinks as follows.\n```python\n  def mdot(t,fcn=None):\n    return (self.reactors[fcn.ridx].mass / self.residenceTime(t)) / fcn.sink\n```\nTerminal exhaust reactors are connected to an exhaust reservoir by the following mass flow function, which acts as the final stage of the process.\n```python\n  def mdot(t,fcn=None):\n    return (self.reactors[fcn.ridx].mass / self.residenceTime(t))\n```\nFinally, the entrainment functions are connected to the specified reactors via a provided entrainment function. These functions are ultimately controlled by the residence time function provided. The goal of this connection method was to implement and maintain a simple form of continuity that provided a less well mixed scenario.\n\n#### Creating model object\n\nA model can be generated in multiple ways. The first is by creating an adjacency matrix, specifying mechansims for air, fuel, and exhaust, providing mass flow functions, and setting other configuration options. Forming the adjacency matrix is the most cumbersome part of this so some class methods have been included for this task. These class methods take other parameters used in determination of the adjacency matrix as well as the remaining parameters of the class constructor.\n\n##### Class constructor\n\n```python\nclass PlumeModel(object):\n    \"\"\"PlumeModel class is used to generate a reactor network for modeling exhaust plume\"\"\"\n\n    def __init__(self, mechs, connects, residenceTime=lambda t: 0.1, entrainment=lambda t:0.1,setCanteraPath=None,build=False):\n        \"\"\"constructor for plume model.\n        Parameters:\n        mechs - an array like structure with at least 3 mechanisms, [fuelMech,atmMech,eMech1,eMech2,...,eMechN]\n        residenceTime - a function that specifies the residence time as a function of time---this is used to determine combustor and system mass flow rates.\n        entrainment - a function that specifies entrainment mass as a function of time.\n        connects - an 2d adjacency matrix with integer values corresponding to the appropriate mass flow function+1 in the list of mass flow functions.\n                    So, the first mass flow function, 0 index, will be represented as 1 in the matrix. This is because these values will be used for conditionals\n                    as well. A template matrix can be generated. The matrix should specifically\n        setCanteraPath - path variable to cantera mech files\n        build -  boolean that builds network strictly from configuration in mechanism files (T,P) if true.\n            default: build=false\n        \"\"\"\n```\n\n##### Simple model\n```python\n@classmethod\n  def simpleModel(cls,mechs=[\"gri30.cti\",\"air.cti\",\"gri30.cti\"],residenceTime=lambda t: 0.1, entrainment=lambda t:0.1,fpath=\"simple.hdf5\",setCanteraPath=None,build=False):\n    \"\"\"\n        Simple model:\n        This classmethod builds a 1 reactor exhaust model.\n\n        Network:\n        [fuel res]->[combustor]->[ex1]->[exRes]\n        [farfield]->[ex1]\n    \"\"\"\n```\n##### Linear Expansion Model\n```python\n@classmethod\n  def linearExpansionModel(cls,n=10,mechs=[\"gri30.cti\",\"air.cti\",\"gri30.cti\"],residenceTime=lambda t: 0.1, entrainment=lambda t:0.1,fpath=\"linear.hdf5\",setCanteraPath=None,build=False):\n    \"\"\"\n        Linear Expansion Model:\n        Use this function to generate an instance with linear expansion connects method. It takes all the parameters\n        that the class does except connects and replaces connects with n parameter.\n\n        Parameters:\n            n - number of reactors using linear expansion. e.g. at level 1 there is one reactor\n                at level two there are two and so on. n must result in an integer number of steps\n                based on the formula:steps=(-1+np.sqrt(1+8*n))/2\n\n        Network:\n        [fuel res]->[combustor]->[ex1]->[ex2]->[ex4]->[exRes]\n                                      ->[ex3]->[ex5]->[exRes]\n                                             ->[ex6]->[exRes]\n        [farfield]->[ex1,ex2,ex3,ex4,ex6]\n\n        Notes:\n        The farfield is connected as an inlet for each exterior reactor if you were to draw them as 2D blocks.\n    \"\"\"\n```\n\n##### Grid model\n```python\n@classmethod\n  def gridModel(cls,n=3,m=3,mechs=[\"gri30.cti\",\"air.cti\",\"gri30.cti\"],residenceTime=lambda t: 0.1, entrainment=lambda t:0.1,fpath=\"grid.hdf5\",setCanteraPath=None,build=False):\n    \"\"\"\n        Grid model:\n        Use this function to generate an instance with grid connects method. It takes all the parameters\n        that the class does except connects and replaces connects with n parameter.\n\n        Parameters:\n            n - Integer number of reactor rows\n            m - Integer number of reactor columns\n\n        Network:\n        [fuel res]->[combustor]->\n        [ex1]->[ex2]->[ex5]->[ex8]->[exRes]\n             ->[ex3]->[ex6]->[ex9]->[exRes]\n             ->[ex4]->[ex7]->[ex10]->[exRes]\n\n        [farfield]->[ex1,ex2,ex4,ex5,ex7,ex8,ex10]\n\n        Notes:\n        The farfield is connected as an inlet for each exterior reactor if you were to draw them as 2D blocks.\n    \"\"\"\n```\n\nThis looks something like\n\n```python\n  import pyplume.model.PlumeModel\n  plumeModel = PlumeModel.linearExpansionModel()\n```\n\n#### Setting Atmophere and Fuel conditions\nConfiguration can be important to any simulation, this can be skipped if you want to use the configuration inside the supplied mechanism files.\nOtherwise, `PlumeModel` has 3 attributes that it uses to maintain the conditions of the model.\n`fuel` which is a Cantera Solution object for the fuel,\n`atmosphere` which is a Cantera Solution object for the atmosphereic conditions, and `exhausts` which is a list of Cantera Solution object(s). The fuel an atmosphere conditions can be configured for each reactor as you would configure them for any other Cantera solution object. Note, that fuel is considered to be the fuel air mixture for the combustor. Since the focus on this project is the exhaust, the exhaust is produced by a single reactor which is fed into the exhaust system. The atmosphere is for entrainment purposes.\n\n##### In a script\n```python\nplumeModel.fuel.TPX = 300.0, 101325, 'CH4:1, O2:0.5' #K, Pa, Mole Fractions\nplumeModel.atmosphere.TPX = 300.0, 101325, 'O2:0.21, N2:0.78, AR:0.01' #K, Pa, Mole Fractions\nplumeModel.exhausts[3].TPX= 300.0, 101325, 'O2:0.21, N2:0.78, AR:0.01' #Set conditions for exhaust 3\n```\n\nNow that the `plumeModel`'s conditions are set, it can be built and advanced to a specific time or to steady state as\n\n```python\nplumeModel.buildNetwork() #Build reactor network based on conditions\nplumeModel(0.1) #advance to time=0.1 s\nplumeModel.steadyState()\n```\n\nThe data for the `plumeModel` can be viewed in one of two ways. If `fpath` is specified in the constructor or class methods then an `hdf5` file is produced which contains the data generated. The `plumeModel` can also be called with the `print` function.\n```python\n  plumeModel.ptype=True #True for sparse print, False for dense print\n  print(plumeModel)\n```\nThe sparse print produces the following. Dense printing adds mass fractions of each reactor.\n```\nPyPlume Network Model Summary:\nfuel: T: 300.00 K, V: 1.00 m^3, mass: 0.08 kg\natmosphere: T: 300.00 K, V: 1.00 m^3, mass: 1.18 kg\ncombustor: T: 300.00 K, V: 1.00 m^3, mass: 0.08 kg\nexhaust0: T: 300.00 K, V: 1.01 m^3, mass: 0.09 kg\nexhaust: T: 300.00 K, V: 1.00 m^3, mass: 1.18 kg\nReactor Network Mass Fractions:\n```\nIf you want to generate the file then manage it separately, the `h5Writer` class can be used for this purpose.\n```python\n  import output,numpy\n  h5w=output.h5Writer.existingFile('simple.hdf5')\n  file = h5w.f #this gets file object\n  h5w(numpy.ones(h5w.dshape[1])) #This appends a vector of ones to the hdf5 file.\n```\n\n##### On the command line\n\nThe command line is currently only set up to run class method models. This can be with `pyplume.model chosenModel`.\n\n```shell\nusage: pyplume.model [-h] [-ss] [-t0 [T0]] [-tf [TF]] [-dt [DT]] [-t] [-v]\n                     {simple,grid,linear}\n\nThis is the commandline interface for running an exhaust network.\n\n\npositional arguments:\n  {simple,grid,linear}  This is a required arguement that specifies the model\n                        which will be used. Currently implemented choices are\n                        simple, grid, and linear.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -ss, --steady         set this flag run to steady state after integration\n  -t0 [T0]              Initial integration time\n  -tf [TF]              Final integration time\n  -dt [DT]              Integration time interval\n  -t, --test            set this flag to run test functions.\n  -v, --verbose         set this flag to run print statements during the process.\n```\n\nAn example of this is\n```shell\n  pyplume.model simple -v -ss -t\n```\nwhich runs the `simple` model with the `--verbose, --steady, and --test` options.\nThis produces\n```\nCreating simple model and building network.\nAdvancing to time: 0.000.\nAdvancing to time: 0.100.\n.\n.\nAdvancing to time: 0.900.\nAdvancing to time: 1.000.\nAdvancing to steady state.\nRunning model test suite.\n========================================================= test session starts ==========================================================\nplatform linux -- Python 3.6.10, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /home/sokato/miniconda3/envs/pyplume/bin/python\ncachedir: .pytest_cache\nrootdir: /home/sokato\ncollected 5 items\n\n../../miniconda3/envs/pyplume/lib/python3.6/site-packages/pyplume/tests/testModel.py::test_linearExpansionModel PASSED           [ 20%]\n.\n.\n```\n\n### Plotting\nThe methods for plotting the generated data are contained in the an `hdf5` or in script are found in `pyplume.figures`\n\nBasic property plotting is currently implemented through scripting or the command line interface.\n\n#### In a script\n```python\nfgk = figureGenerationKit('simple.hdf5',save=True,show=True)\nfgk.plotProperty(['mass','CO2','H2O'])\n```\nThis will plot the specified properties of `simple.hdf5` as a function of time. It will also save the plots to pdf files and display them. The same functionality on the command line would look like:\n\n```bash\npyplume.figures \"simple.hdf5\" -w -d -p \"mass\" \"CO2\",\"H2O\"\n```\n\n### Statistical methods\nThe methods for plotting the generated data are contained in the an `hdf5` or in script are found in `pyplume.statistics`\n\n### Testing\nEach python file has an associated test file which contains unit test functions. As the package is developed, more functions will be added and integrated function tests will be added. Likewise, more information will be included here when possible.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SoftwareDevEngResearch/plume-generation-and-analysis",
    "keywords": "",
    "license": "BSD 3-clause \"New\" or \"Revised License\"",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyplume",
    "package_url": "https://pypi.org/project/pyplume/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyplume/",
    "project_urls": {
      "Homepage": "https://github.com/SoftwareDevEngResearch/plume-generation-and-analysis"
    },
    "release_url": "https://pypi.org/project/pyplume/0.0.6/",
    "requires_dist": [
      "pytest",
      "cantera",
      "h5py",
      "matplotlib",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "This package contains files to build models for exhaust plume analysis and methods to analyze the results.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7462927,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42ae1af5a70893c17b9652984aef1bf7291de827a8ec78679dcdeed018037010",
          "md5": "b85b7c628701ba5afc181f3aeaedabbf",
          "sha256": "1831c0f276786183ac724184b0da158a624024dfbbaf48abc63ea0161c104797"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b85b7c628701ba5afc181f3aeaedabbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 68035,
        "upload_time": "2020-06-01T20:25:59",
        "upload_time_iso_8601": "2020-06-01T20:25:59.940664Z",
        "url": "https://files.pythonhosted.org/packages/42/ae/1af5a70893c17b9652984aef1bf7291de827a8ec78679dcdeed018037010/pyplume-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a93ddad6c4df725ed16e9961700169e0801e76532e49baef4783b3a310d1f585",
          "md5": "de34e0c5f9b24be3eae8983341c61feb",
          "sha256": "421e56272058007ed97623b9d655718c1f009084557274674a5699554970ad9a"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "de34e0c5f9b24be3eae8983341c61feb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 66611,
        "upload_time": "2020-06-01T20:26:02",
        "upload_time_iso_8601": "2020-06-01T20:26:02.482991Z",
        "url": "https://files.pythonhosted.org/packages/a9/3d/dad6c4df725ed16e9961700169e0801e76532e49baef4783b3a310d1f585/pyplume-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "910091b43a3d45fbc6ea0416ddd30d14b4cfb20baba6747bd6717c064e42ec62",
          "md5": "8a17e1dd0eeb5ef5d854b25fcf11ebce",
          "sha256": "d5b557c41574a6b22fee38d8cd21487234265d011a99f6cfe9522b6e38978f36"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a17e1dd0eeb5ef5d854b25fcf11ebce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 70236,
        "upload_time": "2020-06-02T07:57:55",
        "upload_time_iso_8601": "2020-06-02T07:57:55.903460Z",
        "url": "https://files.pythonhosted.org/packages/91/00/91b43a3d45fbc6ea0416ddd30d14b4cfb20baba6747bd6717c064e42ec62/pyplume-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "665d01e044c34c7aa31ace0d0a35618e2bdbb4ae4463e96ce4c3fd8dfd58e9d9",
          "md5": "40fb8cb28925a008c578054e60aec504",
          "sha256": "88b546ed5492c3c7f4f7eb3a3b2366a0844df2fe7c0771ff0200ef5386ef4df6"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "40fb8cb28925a008c578054e60aec504",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 68064,
        "upload_time": "2020-06-02T07:57:57",
        "upload_time_iso_8601": "2020-06-02T07:57:57.782948Z",
        "url": "https://files.pythonhosted.org/packages/66/5d/01e044c34c7aa31ace0d0a35618e2bdbb4ae4463e96ce4c3fd8dfd58e9d9/pyplume-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f761754f839642d28f536b8dc61a439ecb9fd21e97b9e8c4ceeee180d4284d4a",
          "md5": "dd3c798aec3bb007e3db2383834c3ab2",
          "sha256": "b274195a3e87e652d7e6a6ffffba463c8d170d48d7f145c67d45e1e0e73fde22"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd3c798aec3bb007e3db2383834c3ab2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 76576,
        "upload_time": "2020-06-11T22:55:45",
        "upload_time_iso_8601": "2020-06-11T22:55:45.603130Z",
        "url": "https://files.pythonhosted.org/packages/f7/61/754f839642d28f536b8dc61a439ecb9fd21e97b9e8c4ceeee180d4284d4a/pyplume-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cad001380c6b1bda47d21a2afd80f71eb666b185faf957ca13e6ee7e2847283f",
          "md5": "956f88797a08829fd8baa4206bebc248",
          "sha256": "0e16927e35b9f0d998004bfce6477e0cd3a1f6ed988f3c126f41b263b882f3b3"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "956f88797a08829fd8baa4206bebc248",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70176,
        "upload_time": "2020-06-11T22:55:47",
        "upload_time_iso_8601": "2020-06-11T22:55:47.322844Z",
        "url": "https://files.pythonhosted.org/packages/ca/d0/01380c6b1bda47d21a2afd80f71eb666b185faf957ca13e6ee7e2847283f/pyplume-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1b42280728ab110d372f2c1d05a7ff57ce040758e677d2e135abb87326fbe37",
          "md5": "3f2a39220951c69280680c1e89952360",
          "sha256": "2519857a64a5319034856a326bd6d351474cca9e170bad2bdb3abc2456fdf6bd"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f2a39220951c69280680c1e89952360",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 79244,
        "upload_time": "2020-06-11T23:51:20",
        "upload_time_iso_8601": "2020-06-11T23:51:20.670050Z",
        "url": "https://files.pythonhosted.org/packages/b1/b4/2280728ab110d372f2c1d05a7ff57ce040758e677d2e135abb87326fbe37/pyplume-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23e57f397bad0bf231d152c413ed514987f9abf7ef9a19cb7bf402c390830bcc",
          "md5": "b27453ae67dc50247ca11d737ea546fc",
          "sha256": "3bd2956671bc5e45bf2a4037d74c623e0d5b980c4d595f241ac11919e2a186a7"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b27453ae67dc50247ca11d737ea546fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70222,
        "upload_time": "2020-06-11T23:51:22",
        "upload_time_iso_8601": "2020-06-11T23:51:22.364956Z",
        "url": "https://files.pythonhosted.org/packages/23/e5/7f397bad0bf231d152c413ed514987f9abf7ef9a19cb7bf402c390830bcc/pyplume-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf91e985ca4cfdaecf15ab4d42a0ee019931f44f2f191b003c97634cb465f695",
          "md5": "0d8a774f6bb7d90d79214a18215ec890",
          "sha256": "fa34c73259eae7271fb36c74bc592d81eb954513c043a99e470a430cf1b4dac9"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d8a774f6bb7d90d79214a18215ec890",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 70766,
        "upload_time": "2020-06-12T02:07:11",
        "upload_time_iso_8601": "2020-06-12T02:07:11.603656Z",
        "url": "https://files.pythonhosted.org/packages/bf/91/e985ca4cfdaecf15ab4d42a0ee019931f44f2f191b003c97634cb465f695/pyplume-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e40470581b9457c034b93675b7ebfdbbf024ca453a938b18f970f854f7669d3",
          "md5": "d415693df0ae0f7c36eaddf816cafc20",
          "sha256": "de27632a00acd99818960c203a4e54a20c96b948dd59e611bf3d9e8454642536"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d415693df0ae0f7c36eaddf816cafc20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70547,
        "upload_time": "2020-06-12T02:07:13",
        "upload_time_iso_8601": "2020-06-12T02:07:13.230445Z",
        "url": "https://files.pythonhosted.org/packages/4e/40/470581b9457c034b93675b7ebfdbbf024ca453a938b18f970f854f7669d3/pyplume-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "302b81b4ea5cca643f9e7f89e4b6c05ecd527cbb6474d0091d025a5f0e5d5204",
          "md5": "6b872a1eafaee75ea3dd34e71fe18528",
          "sha256": "1395782221fcd2eb7aba6d657ece93979fc29d12a2c2312ff55447a78c7a6a1b"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b872a1eafaee75ea3dd34e71fe18528",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 71139,
        "upload_time": "2020-06-12T17:59:59",
        "upload_time_iso_8601": "2020-06-12T17:59:59.241296Z",
        "url": "https://files.pythonhosted.org/packages/30/2b/81b4ea5cca643f9e7f89e4b6c05ecd527cbb6474d0091d025a5f0e5d5204/pyplume-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59e9c9cde301862dc5ecdb36eb506ae40a55f94647cbcc00dacef2bf2839eac2",
          "md5": "1ce173e7250080ed979f215206e99108",
          "sha256": "0fc28a5f400647d3a22ec5833dbc9151ae90960300578d38db1286ada2f402a8"
        },
        "downloads": -1,
        "filename": "pyplume-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1ce173e7250080ed979f215206e99108",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70879,
        "upload_time": "2020-06-12T18:00:00",
        "upload_time_iso_8601": "2020-06-12T18:00:00.968620Z",
        "url": "https://files.pythonhosted.org/packages/59/e9/c9cde301862dc5ecdb36eb506ae40a55f94647cbcc00dacef2bf2839eac2/pyplume-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "302b81b4ea5cca643f9e7f89e4b6c05ecd527cbb6474d0091d025a5f0e5d5204",
        "md5": "6b872a1eafaee75ea3dd34e71fe18528",
        "sha256": "1395782221fcd2eb7aba6d657ece93979fc29d12a2c2312ff55447a78c7a6a1b"
      },
      "downloads": -1,
      "filename": "pyplume-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b872a1eafaee75ea3dd34e71fe18528",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 71139,
      "upload_time": "2020-06-12T17:59:59",
      "upload_time_iso_8601": "2020-06-12T17:59:59.241296Z",
      "url": "https://files.pythonhosted.org/packages/30/2b/81b4ea5cca643f9e7f89e4b6c05ecd527cbb6474d0091d025a5f0e5d5204/pyplume-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59e9c9cde301862dc5ecdb36eb506ae40a55f94647cbcc00dacef2bf2839eac2",
        "md5": "1ce173e7250080ed979f215206e99108",
        "sha256": "0fc28a5f400647d3a22ec5833dbc9151ae90960300578d38db1286ada2f402a8"
      },
      "downloads": -1,
      "filename": "pyplume-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "1ce173e7250080ed979f215206e99108",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 70879,
      "upload_time": "2020-06-12T18:00:00",
      "upload_time_iso_8601": "2020-06-12T18:00:00.968620Z",
      "url": "https://files.pythonhosted.org/packages/59/e9/c9cde301862dc5ecdb36eb506ae40a55f94647cbcc00dacef2bf2839eac2/pyplume-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}