{
  "info": {
    "author": "Emil Buus Sauer-StrÃ¸mberg",
    "author_email": "emil.sauer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pytest",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Overview\n\n### __ASTEROID__: Automated, Solution for Testing Efficiently on Replicable, Operative, and Isolated Databases.\n\nThis pytest plugin is made for testing with MySQL docker images and is based on the great [lovely-pytest-docker](https://github.com/lovelysystems/lovely-pytest-docker \"lovely-pytest-docker GitHub\") plugin by Lovely Systems.\n\n__pytest-asteroid__ extends the lovely-pytest-docker plugin by adding:\n- an availability check to make sure the MySQL image is ready for connection before running the database test suite.\n- a simple reset state functionality to handle state dependency issues between tests.\n\n---\n## How do I get set up?\n\n### Dependencies\nMake sure your system has [Docker Engine](https://docs.docker.com/engine/install/) installed and that the docker daemon is running before executing your tests.\n\n### Installation\n\nInstall __pytest-asteroid__ using pip or poetry. We prefer to use [poetry](https://python-poetry.org/) as it reduces the amount of files needed in the project and simplifies dependency management and virtual environments.\n\n_Install with poetry:_\n```shell\n$ poetry add pytest-asteroid --dev\n```\n\n---\n## Examples of usage\n\nIn order to use ASTEROID make sure to have the following environmental variables set for the test DB docker image:\n* MYSQL_DATABASE\n* MYSQL_ROOT_PASSWORD\n\n#### Using the get_docker_db_port fixture\n```python\n# content from conftest.py\n\n###############################################################################\n# * Connection to test database\n# This fixture uses the ASTEROID fixture get_docker_db_port which, on first\n# session-scoped call, will envoke the docker_service startup.\n###############################################################################\n# Overwrite this fixture if a custom connection type is required\n###############################################################################\n\n\n# NOTE: Here we are using class fixture as we need the connection to close again\n# after each test class run if we want to reset state.\n# If attemting to reset state, while a connection is open,\n# we will have a deadlock.\n@pytest.fixture(scope=\"class\")\ndef get_connection(get_docker_db_port):\n    conn = pymysql.connect(\n        database=os.environ[\"MYSQL_DATABASE\"],\n        port=get_docker_db_port(\"mysql_db\", timeout=30.0),\n        user=\"root\",\n        password=os.environ[\"MYSQL_ROOT_PASSWORD\"],\n        cursorclass=pymysql.cursors.DictCursor,\n    )\n    # Start a transaction and rollback to reset state after each test class execution\n    yield conn\n    conn.close()\n\n```\n\n#### Using the get_connection and reset_or_save_db_state fixtures\n```python\n# content from test_state.py\n\nclass TestSaveState:\n    # Test cases to check reset state works\n\n    def test_connection_insert(self, get_connection, reset_or_save_db_state):\n        reset_or_save_db_state(\"mysql_db\", \"superheroes\")\n\n        conn = get_connection\n        # setup: insert new data\n        with conn.cursor() as cur:\n            cur.execute(\n                \"\"\"\n                INSERT INTO superheroes (name, cape, height_cm, weigth_kg)\n                VALUES('Dr. Strange', true, 188, 82)\n                \"\"\"\n            )\n            conn.commit()\n            cur.execute(\"SELECT * FROM superheroes WHERE name = 'Dr. Strange'\")\n            rows = cur.fetchall()\n            assert len(rows) == 1\n\n```\n\n### Clarification\nUse the examples in the project repository folder _*tests/*_ for inspiration on how to use __pytest-asteroid__ and to see examples of test file structure.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stabtazer/pytest-asteroid",
    "keywords": "pytest,testing,docker,compose,database,mysql",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-asteroid",
    "package_url": "https://pypi.org/project/pytest-asteroid/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-asteroid/",
    "project_urls": {
      "Homepage": "https://github.com/stabtazer/pytest-asteroid",
      "Repository": "https://github.com/stabtazer/pytest-asteroid"
    },
    "release_url": "https://pypi.org/project/pytest-asteroid/0.4.1/",
    "requires_dist": [
      "pytest (>=6.2.5,<8.0.0)",
      "lovely-pytest-docker (==0.3.0)",
      "poetry (>=1.0,<2.0)",
      "PyMySQL (>=1.0.2,<2.0.0)",
      "docker-compose (>=1.29.2,<2.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "PyTest plugin for docker-based testing on database images",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14764441,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f15760759474ac5d60e195124de0afba4538f7062040c21b7b2133e2b94ef9f6",
          "md5": "9bc817219e8affa2f6daea177184d253",
          "sha256": "c1e587a942112a5193e40e808175911016d58a34a0bee46c4a689dce8e95b2fc"
        },
        "downloads": -1,
        "filename": "pytest_asteroid-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bc817219e8affa2f6daea177184d253",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 13081,
        "upload_time": "2022-08-15T12:48:50",
        "upload_time_iso_8601": "2022-08-15T12:48:50.188152Z",
        "url": "https://files.pythonhosted.org/packages/f1/57/60759474ac5d60e195124de0afba4538f7062040c21b7b2133e2b94ef9f6/pytest_asteroid-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "614421c6dff7b207ac69ae18bc753143e8b18a7714d34125d08867fb438adac1",
          "md5": "11ecc651e7c4340d480d5ddfe8d0a8e1",
          "sha256": "83e042af7dbfc09a8708edfb7708be7cc0babfa4f54ce90b3d33c2c4488fa625"
        },
        "downloads": -1,
        "filename": "pytest-asteroid-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "11ecc651e7c4340d480d5ddfe8d0a8e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8757,
        "upload_time": "2022-08-15T12:48:48",
        "upload_time_iso_8601": "2022-08-15T12:48:48.598967Z",
        "url": "https://files.pythonhosted.org/packages/61/44/21c6dff7b207ac69ae18bc753143e8b18a7714d34125d08867fb438adac1/pytest-asteroid-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f15760759474ac5d60e195124de0afba4538f7062040c21b7b2133e2b94ef9f6",
        "md5": "9bc817219e8affa2f6daea177184d253",
        "sha256": "c1e587a942112a5193e40e808175911016d58a34a0bee46c4a689dce8e95b2fc"
      },
      "downloads": -1,
      "filename": "pytest_asteroid-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9bc817219e8affa2f6daea177184d253",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 13081,
      "upload_time": "2022-08-15T12:48:50",
      "upload_time_iso_8601": "2022-08-15T12:48:50.188152Z",
      "url": "https://files.pythonhosted.org/packages/f1/57/60759474ac5d60e195124de0afba4538f7062040c21b7b2133e2b94ef9f6/pytest_asteroid-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "614421c6dff7b207ac69ae18bc753143e8b18a7714d34125d08867fb438adac1",
        "md5": "11ecc651e7c4340d480d5ddfe8d0a8e1",
        "sha256": "83e042af7dbfc09a8708edfb7708be7cc0babfa4f54ce90b3d33c2c4488fa625"
      },
      "downloads": -1,
      "filename": "pytest-asteroid-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "11ecc651e7c4340d480d5ddfe8d0a8e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 8757,
      "upload_time": "2022-08-15T12:48:48",
      "upload_time_iso_8601": "2022-08-15T12:48:48.598967Z",
      "url": "https://files.pythonhosted.org/packages/61/44/21c6dff7b207ac69ae18bc753143e8b18a7714d34125d08867fb438adac1/pytest-asteroid-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}