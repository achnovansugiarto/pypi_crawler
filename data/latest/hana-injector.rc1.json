{
  "info": {
    "author": "Pascal Zimmermann",
    "author_email": "info@theiotstudio.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Hana Injector \n\nMQTT stream to SAP Hana database converter and forwarder API.\n\nThe following application was created by a project with the purpose to connect MQTT parts with the SAP HANA DB. The goal was to implement an application that is capable of transforming incoming MQTT topics to a SQL format that is compliant with the Hana DB, as the original data was streamed with MQTT, whereas the HANA database was only able to receive data sent in Hana SQL format.\n\n## Basic information about the application and key features\nThe Hana Injector is based on a Python Flask microservice architecture. Therefore, one of the key features of the application is the low consumption of resources, as the framework allows for the efficient distribution and usage of resources in general.\n\nFurthermore, the architecture includes multiple packages, such as the Python [MQTT Paho client](https://pypi.org/project/paho-mqtt/#description) and the [PyHDB](https://pypi.org/project/pyhdb/#description) library.\n\nThe features of this application are the conversion process in SQL, the element identification and the insertion into the HANA DB.\n\n## Architecture and functional principles of the Hana Injector\n### Architecture\nThe service based on a microservice architecture and the Python Flask framework. The application include a Prometheus metric endpoint and a code generator to produce the corresponding functions and transformation code to forward/ modify the incoming MQTT stream. \nAfter the transformation process, the core functionality of the tool is the injection of the modified and transformed MQTT stream and in the meantime already a Hana database query to the attached and configured SAP Hana database.\n\n### Process flow\nThe transformation process identify the elements and puts these variables in the SQL statement. For this process, the statements were defined before the application starts.  As soon as the transforming is done, the string is transformed to the HANA DB SQL format and can then be directly inserted to the HANA database.\n\n## Installation and configuration\n### Installation\n1. Please clone the injector code inside your local environment and install all required dependencies via `pip3 install -r requirements.txt` for the application.\n2. Modify the execution rights of the `app.py` file e.g. on Linux `chmod +x app.py`\n\n### Configuration\nBefore starting the application, you must ensure that both the MQTT server and the corresponding HANA DB server are running.\n\nIn case these preconditions are not set, the application will throw multiple errors and will eventually crash.\n\nYou set up all related configuration parameters like the Hana and MQTT credentials and channels inside the configuration YAML file. You can check out the predefined example configuration inside the next paragraph. To specify the used configuration file it's necessary to set up the env variable `HANA_INJECTOR_CONFIG_FILE_PATH` and to store the path of the configuration file inside the variable e.g. `HANA_INJECTOR_CONFIG_FILE_PATH=config/config.yml`.\nFor the startup of the application it's required to call the `app.py` script e.g. `python3 app.py`.\n\n#### Configuration Yaml\n\n```yaml\nhana_injector:\n  secret_key: \"test\"\n  log_mode: \"debug\"\n  template: \"injector/templates\"\n  host: \"localhost\"\n  port: 8080\n  threads: 4\n\nmqtt:\n  hostname: \"localhost\"\n  port: 3555\n  username: \"3555\"\n  password: \"3555\"\n  subscribed_topics:\n    - name: \"Test1\"\n      qos: 0\n    - name: \"Test2\"\n      qos: 0\n\nhana_database:\n  hostname: \"Test\"\n  port: 123\n  username: \"test\"\n  password: \"Test\"\n\ngenerator:\n  - method_name: \"Service1\"\n    mqtt_topic: \"Service11\"\n    mqtt_payload:\n      - OrderID: \"str\"\n      - OrderDate: \"generateDatetime\"\n      - Color: \"sep:ListDict(Name, Amount)|OrderID, OrderDate\"\n      - Color2: \"sep:ListDict(Name, Amount)|OrderID, OrderDate\"\n      - CustomerName: \"str\"\n    hana_sql_query:\n      - \"Test1\"\n    hana_sql_query_sep:\n      - \"Test1_sep\"\n      - \"Test2_sep\"\n\n  - method_name: \"Service2\"\n    mqtt_topic: \"Service21\"\n    mqtt_payload:\n      - OrderID: \"str\"\n      - OrderDate: \"generateDate\"\n      - CustomerName: \"str\"\n      - Color: \"List\"\n    hana_sql_query:\n      - \"Test2\"\n      - \"Test22\"\n\n  - method_name: \"Service3\"\n    mqtt_topic: \"Service31\"\n    mqtt_payload:\n      - OrderID: \"str\"\n      - DeviceID: \"str\"\n      - OrderDate: \"str\"\n      - StatusCode: \"str\"\n    hana_sql_query:\n      - \"Test3\"\n```\n\n#### Supported mapping types and function\n- **int** | Mapping value for a classical integer like `1`\n- **double**  | Mapping value for a classical double like `1.1`\n- **str**  | Mapping value for a classical string like `test`\n- **List**  | Mapping value for a classical list of values like `[\"test\", \"test1\"]`\n- **ListDict** | Mapping value for a list of dictionaries like `[{\"test\": \"test1\"}, {\"test1\": \"test2\"}]`\n- **sep:ListDict** | Mapping value the functionality to separate values from MQTT stream and accumulate existing values from configuration/ stream and forward both together to the HANA database via a separate methode and query `sep:ListDict(Name, Amount)|OrderID, OrderDate`. For this datatype it's also necessary to specify the `hana_sql_query_sep` configuration option and forward the queries in the right order to the generator functionality.\n- **Dict** | Mapping value for a dictionary like `{\"test\": \"test1\"}`\n- **generateDate** | Mapping value for the functionality to generate a date inside the following format `%Y-%m-%d`\n- **generateDatetime** | Mapping value for the functionality to generate a date time inside the following format `%Y-%m-%dT%H:%M:%SZ`\n\n### Api Endpoints\n#### Health\n\nThe corresponding app includes a health endpoint to check the status of the application. You can call the `/health` page to get the corresponding status of the app.\n\n#### Metrics\n\nThe corresponding app includes a Prometheus metric endpoint to get the metrics of the application. You can call the `/metrics` page to get the corresponding metrics of the app.\n\n#### Swagger\n\nThe corresponding app includes a documentation endpoint to check the documentation pages of the API. You can call the `/api/docs` page to get the corresponding documentation pages.\n\n## TODO\n\n- Think about an integration test concept\n\n## Contribution\n\nIf you would like to contribute, have an improvement request, or want to make a change inside the code, please open a pull request and write unit tests.\n\n## Support\n\nIf you need support, or you encounter a bug, please don't hesitate to open an issue.\n\n## Donations\n\nIf you would like to support my work, I ask you to take an unusual action inside the open source community. Donate the money to a non-profit organization like Doctors Without Borders or the Children's Cancer Aid. I will continue to build tools because I like it and it is my passion to develop and share applications.\n\n## License\n\nThis product is available under the Apache 2.0 [license](LICENSE).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ZPascal/hana-injector",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hana-injector",
    "package_url": "https://pypi.org/project/hana-injector/",
    "platform": null,
    "project_url": "https://pypi.org/project/hana-injector/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ZPascal/hana-injector/issues",
      "Documentation": "https://zpascal.github.io/hana-injector/",
      "Homepage": "https://github.com/ZPascal/hana-injector",
      "Source": "https://github.com/ZPascal/hana-injector"
    },
    "release_url": "https://pypi.org/project/hana-injector/0.0.1/",
    "requires_dist": [
      "appdirs (==1.4.4)",
      "bcrypt (==4.0.1)",
      "black (==22.10.0)",
      "cffi (==1.15.1)",
      "click (==8.1.3)",
      "distro (==1.8.0)",
      "Flask (==2.2.2)",
      "Flask-Bcrypt (==1.0.1)",
      "flask-prometheus-metrics (==1.0.0)",
      "Flask-WTF (==1.0.1)",
      "itsdangerous (==2.1.2)",
      "Jinja2 (==3.1.2)",
      "jsonformatter (==0.3.2)",
      "MarkupSafe (==2.1.1)",
      "mypy-extensions (==0.4.3)",
      "paho-mqtt (==1.6.1)",
      "pathspec (==0.10.1)",
      "platformdirs (==2.5.2)",
      "prometheus-client (==0.15.0)",
      "pycparser (==2.21)",
      "pyhdb (==0.3.4)",
      "regex (==2022.10.31)",
      "ruamel.yaml (==0.17.21)",
      "ruamel.yaml.clib (==0.2.7)",
      "six (==1.16.0)",
      "toml (==0.10.2)",
      "tomli (==2.0.1)",
      "typed-ast (==1.5.4)",
      "typing-extensions (==4.4.0)",
      "waitress (==2.1.2)",
      "Werkzeug (==2.2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "An MQTT stream to SAP HANA database injector",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15675536,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e9a071c97183d68bd04ba9982ff3b84735876ae3f94f9e9cc1ab92531d92f09",
          "md5": "e8fe57bb45d7f8a20d3864931ce760fb",
          "sha256": "869f7ce36330ee9e64ec81a195de502b7e2197ea7887bb3c0ec082b476cdc0b9"
        },
        "downloads": -1,
        "filename": "hana_injector-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8fe57bb45d7f8a20d3864931ce760fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9855,
        "upload_time": "2022-11-06T16:25:40",
        "upload_time_iso_8601": "2022-11-06T16:25:40.030135Z",
        "url": "https://files.pythonhosted.org/packages/5e/9a/071c97183d68bd04ba9982ff3b84735876ae3f94f9e9cc1ab92531d92f09/hana_injector-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf4298bcb5186bd48560411b39696e9cc26a97496dee31b199b0f33fcabf9074",
          "md5": "69850a54f26719c10969ba4a6935ecf1",
          "sha256": "3cb1403866c29079bca98d6d3a61a28d940da08c4d92d835c2a52b837a6b4143"
        },
        "downloads": -1,
        "filename": "hana-injector-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "69850a54f26719c10969ba4a6935ecf1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9501,
        "upload_time": "2022-11-06T16:25:41",
        "upload_time_iso_8601": "2022-11-06T16:25:41.704880Z",
        "url": "https://files.pythonhosted.org/packages/cf/42/98bcb5186bd48560411b39696e9cc26a97496dee31b199b0f33fcabf9074/hana-injector-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e9a071c97183d68bd04ba9982ff3b84735876ae3f94f9e9cc1ab92531d92f09",
        "md5": "e8fe57bb45d7f8a20d3864931ce760fb",
        "sha256": "869f7ce36330ee9e64ec81a195de502b7e2197ea7887bb3c0ec082b476cdc0b9"
      },
      "downloads": -1,
      "filename": "hana_injector-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e8fe57bb45d7f8a20d3864931ce760fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9855,
      "upload_time": "2022-11-06T16:25:40",
      "upload_time_iso_8601": "2022-11-06T16:25:40.030135Z",
      "url": "https://files.pythonhosted.org/packages/5e/9a/071c97183d68bd04ba9982ff3b84735876ae3f94f9e9cc1ab92531d92f09/hana_injector-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf4298bcb5186bd48560411b39696e9cc26a97496dee31b199b0f33fcabf9074",
        "md5": "69850a54f26719c10969ba4a6935ecf1",
        "sha256": "3cb1403866c29079bca98d6d3a61a28d940da08c4d92d835c2a52b837a6b4143"
      },
      "downloads": -1,
      "filename": "hana-injector-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "69850a54f26719c10969ba4a6935ecf1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9501,
      "upload_time": "2022-11-06T16:25:41",
      "upload_time_iso_8601": "2022-11-06T16:25:41.704880Z",
      "url": "https://files.pythonhosted.org/packages/cf/42/98bcb5186bd48560411b39696e9cc26a97496dee31b199b0f33fcabf9074/hana-injector-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}