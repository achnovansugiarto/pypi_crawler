{
  "info": {
    "author": "",
    "author_email": "Troy Comi <tcomi@princeton.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# abSENSE: a method to interpret undetected homologs\n\n[![Try Now!][pyodide-badge]][pyodide-link]\n[![Actions Status][actions-badge]][actions-link]\n[![Documentation Status][rtd-badge]][rtd-link]\n\n[![PyPI version][pypi-version]][pypi-link]\n[![PyPI platforms][pypi-platforms]][pypi-link]\n\n[pyodide-badge]:            https://img.shields.io/badge/Pyodide-Try%20It!-blue.svg\n[pyodide-link]:             https://potential-waffle-8b9309b7.pages.github.io/\n[actions-badge]:            https://github.com/PrincetonUniversity/abSENSE/workflows/CI/badge.svg\n[actions-link]:             https://github.com/PrincetonUniversity/abSENSE/actions\n[pypi-link]:                https://pypi.org/project/abSENSE/\n[pypi-platforms]:           https://img.shields.io/pypi/pyversions/abSENSE\n[pypi-version]:             https://badge.fury.io/py/abSENSE.svg\n[rtd-badge]:                https://readthedocs.org/projects/abSENSE/badge/?version=latest\n[rtd-link]:                 https://abSENSE.readthedocs.io/en/latest/?badge=latest\n\n## INTRODUCTION\nabSENSE is a method that calculates the probability that a homolog of a given\ngene would fail to be detected by a homology search (using BLAST or a similar\nmethod) in a given species, even if the homolog were present and evolving\nnormally.\n\nThe result of this calculation informs how one interprets the result of a\nhomology search failing to find homologs of a gene in some species. One\npossibility to explain such a result is that the gene is _actually absent_ from\nthe genome in that species: a biological, and potentially interesting (e.g. if\ndue to a gene loss or the birth of a new gene), result.\n\nA second explanation, often ignored, is that the homolog _is_ present in the\ngenome of that species, but that the homology search merely lacks statistical\npower to detect it. Here, the apparent absense of the homolog is a\ntechnical/statistical limitation, and does not reflect underlying biology.\n\nBy calculating the probability that your homology search would fail to detect a\nhomolog _even if one were present_ and _even if it were evolving normally_\n(e.g. no rate accelerations on a specific branch, potentially suggestive of\nbiologically interesting changes), abSENSE informs the interpretation of a\nnegative homology search result. If abSENSE finds that there is a high\nprobability of a homolog being undetected even if present, you may not be as\ninclined to invoke a biological explanation for the result: the null model of a\nfailure of the homology search is sufficient to explain what you observe.\n\n**The method is explained in complete detail in the paper in which it's\nintroduced. This is the paper that is referred to in the rest of this README:**\n\n**Weisman CM, Murray AW, Eddy SR (2020) Many, but not all, lineage-specific\ngenes can be explained by homology detection failure. PLoS Biol 18(11):\ne3000862. https://doi.org/10.1371/journal.pbio.3000862**\n\nThere, it is applied to the specific case of lineage-specific genes, for which\nhomologs appear absent in all species outside of a narrow lineage. The method\nitself is applicable to any case in which a homolog appears absent (e.g. a\nsingle species missing a homolog that one might interpret as a gene loss), and\nlikewise, this code is applicable to all such cases.\n\nThis is a rewrite of the [original repository](https://github.com/caraweisman/abSENSE/tree/c355c458e83722a0ffdf7284d4ea1f6f29ce205f)\n\n## Usage\n### abSENSE THE BASICS\n\n#### Quickstart: main analysis\n\nThe main analysis script, `Run_abSENSE.py`, calculates the probabilities of\nhomologs of genes from some \"focal\" species being undetected in a set of N\nother species. It can perform this analysis for an arbitrary number of genes in\nthe taxon at one time. It requires a minimum of two input files:\n\ni) A file containing the bitscores of homologs of each gene to be analyzed in\nat least three of the species (including the focal species itself, so two\nothers).\n\nii) A file containing the N evolutionary distances, in substitutions/site,\nbetween the focal species and each other species. The distance between the\nfocal species and itself should be 0. (If you don't already have such\ndistances, a description of how to calculate them relatively painlessly can be\nfound in Weisman et al 2020).\n\nExamples of both of these files for a subset of genes from S. cerevisiae and\ntheir orthologs 11 other fungal species (the same species analyzed in Weisman\net al 2020) can be found in the folder Quickstart\\_Examples: the bitscore file\nis Fungi\\_Example\\_Bitscores, and the distance file is Fungi\\_Distances. They\nexemplify the formatting required for abSENSE to run (explained in more detail\nbelow).\n\nTo run abSENSE on a given bitscore and distance file:\n\n```\npython Run_abSENSE.py \\\n    --distfile <distance_file> \\\n    --scorefile <score_file>\n```\n\nFor example, to run abSENSE on the example fungal genes, type:\n\n```\npython Run_abSENSE.py \\\n    --distfile Quickstart_Examples/Fungi_Distances \\\n    --scorefile Quickstart_Examples/Fungi_Example_Bitscores\n```\n\nFor each gene in the input bitscore file, the following will be computed:\n\na) The probabilities of a homolog being undetected in each species (in the file\n`Detection_Failure_Probabilities`);\n\nb) The expected bitscores of homologs in each species (in the file\n`Predicted_bitscores`);\n\nc) The 99% confidence interval around this bitscore in each species (low and\nhigh bounds listed in separate files: `Bitscore_99PI_lowerbound_predictions`\nand `Bitscore_99PI_higherbound_predictions`)\n\nThese results will be output to a set of tab-delimited files in a separate\ndirectory, by default named with the start time of the analysis. (You can\nspecify the name with a command line option, see below). Additional information\non output files is below.\n\n\n#### Quickstart: visualization\n\nA supplemental visualization script, `Plot_abSENSE.py`, performs the same\nanalysis as above, but for one gene at a time, and also produces a\nvisualization of the results (see Weisman et al 2020).  It is run in the same\nway, except that it also requires specifying which single gene in the bitscore\ninput file you wish to analyze.\n\nTo run abSENSE on gene GENEID contained in a given bitscore with a given\ndistance file:\n\n```\npython Plot_abSENSE.py \\\n    --distfile <distance_file> \\\n    --scorefile <score_file> \\\n    --gene <GENEID>\n```\n\nFor example, to analyze the S. cerevisiae gene Uli1, listed in the bitscore\nfile under its RefSeq ID (NP\\_116682.3), type:\n\n```\npython Plot_abSENSE.py \\\n    --distfile Quickstart_Examples/Fungi_Distances \\\n    --scorefile Quickstart_Examples/Fungi_Example_Bitscores \\\n    --gene NP_116682.3\n```\n\nThe same results as above will be computed, but now they will be output to the\nterminal, and then the visualization will be shown.\n\n\n### All Options\n\nYou can specify advanced options with the additional command line options. You\ncan view them all with `python Run_abSENSE.py --help`\n\nThey are:\n\n`--out`: The prefix of the directory to which your results will be output.\nDefault is the time at which you ran the analysis (to avoid overwriting of\nresults).\n\n`--Eval`: The E-value threshold to be used (above this value, homologs will\nbe considered undetected). Default is 0.001 (fairly permissive).\n\n`--genelenfile`: Allows you to specify a file containing the lengths (in aa)\nof all genes in the bitscore file to be analyzed. Default is 400 amino acids\n(~average protein size in many species) for all proteins.\n\nabSENSE predicts a bitscore, which is then converted to an E-value to determine\ndetectability; this conversation technically requires knowledge of both the\nsize of the database in which the search occurs (see below) and the length of\nthe gene being searched. Because the conversion between these values and\nE-value is logarithmic, though, only fairly large changes in these values\nsubstantially affect results.\n\nExamples of such files containing the lengths of all S. cerevisiae and D.\nmelanogaster genes can be found in Fungi\\_Data/S\\_cer\\_Protein\\_Lengths and\nInsect\\_Data/D\\_mel\\_Protein\\_Lengths. The format required is described more\nbelow.\n\n`--dblenfile`: Allows you to specify a file containing the sizes (in aa) of\nthe database in which the homology search for each of your N species is\nperformed. Default is 400 amino acids * 20,000 amino acids / gene = 8,000,000\namino acids (~average protein and proteome size in many species) for all\nspecies.\n\nabSENSE predicts a bitscore, which is then converted to an E-value to determine\ndetectability; this conversation technically requires knowledge of both the\nsize of the database in which the search occurs and the length of the gene\nbeing searched (see above). Because the conversion between these values and\nE-value is logarithmic, though, only fairly large changes in these values\nsubstantially affect results.\n\nExamples containing the lengths of all S. cerevisiae and D. melanogaster genes\ncan be found in Fungi\\_Data/Fungi_Database_Lengths and\nInsect\\_Data/Insect\\_Database\\_Lengths. The format required is described more\nbelow.\n\n`--predall`: Default is False. When True, Causes abSENSE to calculate the\nprobability of homologs being undetected, the expected bitscores, and 99\\%\nconfidence intervals not only in species in which homologs were actually\nundetected, but also for species in which homologs have been found. This is\nobviously not the main use case, and is especially uninformative when those\nhomologs and their bitscores have been used in the prediction itself (see\nbelow). May potentially be useful to see if a homolog in one species, although\ndetected, seems to be behaving anomalously compared to those in other species\n(eg due to rate acceleration).\n\n`--includeonly`: Allows you to restrict the species whose bitscores are used\nin predicting bitscores in other species. Mainly useful to do control-type\nanalyses, such as Figure 5 in Weisman et al 2020, to show that predictions made\nfrom only a subset of the data are nonetheless reliable. If not specified,\nabSENSE uses all available bitscores in the prediction. The format here should\nbe a list of the species names as they are written in the distance and bitscore\nfiles, separated by commas and NO SPACES. For example, to include only data\nfrom the yeasts S. cerevisiae, S. paradoxus, and S. kudriavzevii in an analysis\nbased on the files in `Fungal_Data,` you would type: `--includeonly\nS_cer,S_par,S_kud`\n\n\nFor example, to run an analysis on all S. cerevisiae proteins in the selected\nfungal species in which the lengths of each S. cerevisiae protein and the sizes\nof each species' search database (their annotated proteomes as indicated in the\nsupplement of Weisman et al 2020) are specified:\n\n```\npython Run_abSENSE.py \\\n    --distfile Fungi_Data/Fungi_Distances \\\n    --scorefile Fungi_Data/Fungi_Bitscores \\\n    --genelenfile Fungi_Data/S_cer_Protein_Lengths \\\n    --dblenfile Fungi_Data/Fungi_Database_Lengths\n```\n\n\nThe visualization script `Plot_abSENSE.py` takes all of the same options,\nwith the exception of again requiring that the gene to be analyzed is specified\nby the --gene option, and also that the --genelenfile option is instead\n--genelen, after which should be entered an integer corresponding to the length\nof the gene. (With a single gene, it's hardly worth requiring a whole file:\njust give the number.)\n\n\n### Output Files\n\n`Run_abSENSE.py` outputs six output files. Examples resulting from running\nabSENSE on the provided insect and fungal data can be found in\n`Fungi_Data/Fungi_abSENSE_Results/` and `Insect_Data/Insect_abSENSE_Results/`\nrespectively.\n\n#### `Detection_failure_probabilities`\n\nThe central output of the program. For each gene in the analysis, this contains\nthe predicted probability that a homolog in each species would be undetected at\nthe specified E-value by a homology search, even if the homolog were present.\n\nBy default, this is only calculated in species in which the gene was not\ndetected. Results for species in which homologs were detected are therefore\nlisted as \"detected\". The setting --predall will calculate this value for all\nspecies, even those in which a homolog was in fact detected.\n\nIf not enough data for a gene was provided to generate a bitscore prediction\n(bitscores of homologs from at least three species are needed), the results\nwill read \"not\\_enough\\_data\".\n\n#### `Predicted_bitscores`\n\nFor each gene in the analysis, this contains the predicted (maximum likelihood)\nbitscore of a homolog in each species.\n\nBy default, bitscores are only predicted in species in which the gene was not\ndetected. Results for species in which homologs were detected are therefore\nlisted as \"detected\". The setting --predall will calculates this value for all\nspecies, even those for which a homolog was in fact detected. Here, the known\nbitscore (often used in the prediction process; see the option --includeonly)\nwill be shown alongside the prediction. If the known bitscore was used in the\nfitting process, of course, these will usually be quite similar!\n\nIf not enough data for a gene was provided to generate a bitscore prediction\n(bitscores of homologs from at least three species are needed), the results\nwill read \"not\\_enough\\_data\".\n\n#### `Bitscore_99PI_upperbound_predictions`\n\nFor each gene in the analysis, this contains the upper bound of the 99\\%\nconfidence interval for the bitscore of a homolog in each species.\n\nBy default, this is only calculated in species in which the gene was not\ndetected. Results for species in which homologs were detected are therefore\nlisted as \"detected\". The setting --predall will calculates this value for all\nspecies, even those for which a homolog was in fact detected. Here, the known\nbitscore (often used in the prediction process; see the option --includeonly)\nwill be shown alongside the prediction. If the known bitscore was used in the\nfitting process, of course, these will usually be quite similar!\n\nIf not enough data for a gene was provided to generate a bitscore prediction\n(bitscores of homologs from at least three species are needed), the results\nwill read \"not\\_enough\\_data\".\n\n#### `Bitscore_99PI_lowerbound_predictions`\n\nFor each gene in the analysis, this contains the lower bound of the 99\\%\nconfidence interval for the bitscore of a homolog in each species.\n\nBy default, this is only calculated in species in which the gene was not\ndetected. Results for species in which homologs were detected are therefore\nlisted as \"detected\". The setting --predall will calculates this value for all\nspecies, even those for which a homolog was in fact detected. Here, the known\nbitscore (often used in the prediction process; see the option --includeonly)\nwill be shown alongside the prediction. If the known bitscore was used in the\nfitting process, of course, these will usually be quite similar!\n\nIf not enough data for a gene was provided to generate a bitscore prediction\n(bitscores of homologs from at least three species are needed), the results\nwill read \"not\\_enough\\_data\".\n\n#### `Parameter_values`\n\nFor each gene in the analysis, this contains the best-fit (maximum likelihood)\nvalues of the a and b parameters. (See Weisman et al 2020 for full\nexplanation.)\n\nThese a and b parameters are calculated from bitscores of homologs in species\nincluded in the prediction process. If the command line option --includeonly is\nused, this will be only the species specified by that option. By default, all\nprovided bitscores are used.\n\nIf not enough data for a gene was provided to generate a bitscore prediction\n(bitscores of homologs from at least three species are needed), the results\nwill read \"not\\_enough\\_data\".\n\n#### `Run_info`\n\nContains information about the analysis, including names of input files,\noptions/settings used, and the analysis time.\n\n### Input File Formats\n\nRequired files:\n\n#### The bitscore file\n\nFor an analysis of M genes in N species (including the focal species), the\nbitscore file should be a tab-delimited file of N+1 columns by M+1 rows.  The\nfirst row should begin with a blank entry, and should be followed by N entries\ncontaining the names of the N species in your analysis. These names should\nmatch those in the distance file (below) exactly.  The remaining M rows should\neach begin with the name/identifier of the gene from the focal species to be\nanalyzed, followed by the bitscore of that gene against its homolog in the\nspecies indicated at the top of the given column. For species in which homologs\nare undetected, this value should be __0__. For species in which a homolog is\ndetected, but the orthology is unclear and so you wish to exclude it from being\nused in the fit (see Weisman et al 2020), this value should be __'N/A'__.  Two\nexamples are provided: Fungi\\_Data/Fungi_\\Bitscores and\nInsect_\\Data/Insect\\_Bitscores.\n\n#### The distance file\n\nFor an analysis with N species (including the focal species), the distance file\nshould be a tab-delimited file of 2 columns by N rows.  Entries in the first\ncolumn should contain the name of each species in your analysis. These names\nshould match those in the bitscore file (above) exactly.  Entries in the second\ncolumn should contain the evolutionary distance between each species in the\nindicated column and the focal species. (The distance between the focal species\nand itself should always be 0.) Two examples are provided:\nFungi\\_Data/Fungi\\_Distances and Insect\\_Data/Insect\\_Distances.\n\n#### Optional files:\n\n##### The gene length file\n\nFor an analysis of M genes, the gene length file should be a tab-delimited file\nof 2 columns by M rows.  The first column should contain the names/identifiers\nof the gene from the focal species to be analyzed. These should match exactly\nthe names in the bitscore file (above).  The second column should contain the\nlength in amino acids of that gene.\n\nIf you don't already have such a file, here is a command to make one (named\nOUTPUTFILENAME), from a FASTA file (SEQFILENAME) containing all of the\nsequences: (It requires the easel package, which comes with the HMMER software,\navailable at http://hmmer.org/documentation.html.)\n\n```\nesl-seqstat -a (SEQFILENAME) | \\\n    awk '{print $2 \"\\t\" $3}' | \\\n    tac | \\\n    sed -e '1,7d' | \\\n    tac > (OUTFILENAME)\n```\n\n\n##### The database length file\n\nFor an analysis of N species, the database length file should be a\ntab-delimited file of 2 columns by N rows.  The first column should contain the\nnames of the N species. These should match exactly the names in the bitscore\nand distance files (above).  The second column should contain the sizes, in\namino acids, of the database in which the homology search for each species is\nperformed. For example, if you are searching for a gene in each of the species'\nannotated proteomes, it should be the size of that species' proteome in amino\nacids. If instead you are searching against a pan-specific database, like for\nexample NR, for all species, it should be the size of that database in amino\nacids.\n\nIf you don't already have such a file, you can make one easily if you have the\ndatabases themselves in eg FASTA format (again requiring the easel package,\ndownloadable with HMMER as in c) above: just run the command `esl-seqstat\n(FASTA FILE)` on each database; this will report the total length in aa of\neach database file. You can then put these into a tab-delimited file manually.\n\nIf your BLAST search is done on a nucleotide genome of the outgroup species via\nTBLASTN, the database length that you should use for each genome is 2N, where N\nis the genome length in nucleotides. (For a genome of N nucleotides, there are\n~N/3 codons in it, which can be read in each of 6 possible reading frames, for\na total of 6N/3 = 2N amino acids.)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "Troy Comi <tcomi@princeton.edu>",
    "name": "absense",
    "package_url": "https://pypi.org/project/absense/",
    "platform": null,
    "project_url": "https://pypi.org/project/absense/",
    "project_urls": {
      "homepage": "https://github.com/PrincetonUniversity/abSENSE"
    },
    "release_url": "https://pypi.org/project/absense/0.1.6/",
    "requires_dist": [
      "click>=8.1.2",
      "matplotlib>=3.5.1",
      "numpy>=1.21.1",
      "pandas>=1.1.5",
      "scipy>=1.6.1",
      "typing_extensions >=3.7; python_version<'3.8'",
      "pytest>=6; extra == \"dev\"",
      "pytest-mock>=3.7.0; extra == \"dev\"",
      "Sphinx>=4.0; extra == \"docs\"",
      "myst_parser>=0.13; extra == \"docs\"",
      "sphinx-book-theme>=0.1.0; extra == \"docs\"",
      "sphinx_copybutton; extra == \"docs\"",
      "pytest>=6; extra == \"test\"",
      "pytest-mock>=3.7.0; extra == \"test\""
    ],
    "requires_python": ">=3.7",
    "summary": "Perform homolog detectability",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15107561,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "287412bb2802d5fd0d096fa096a89dd1f0c729fb10ee30eff3f7bcbb2ee84877",
          "md5": "79f556a9bd6696f05a2cd67801497e59",
          "sha256": "26928a50737316cc9b93614ca59a8c2f55ef3be3c68ede596be0327fece9f00c"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79f556a9bd6696f05a2cd67801497e59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22736,
        "upload_time": "2022-09-13T16:24:19",
        "upload_time_iso_8601": "2022-09-13T16:24:19.446438Z",
        "url": "https://files.pythonhosted.org/packages/28/74/12bb2802d5fd0d096fa096a89dd1f0c729fb10ee30eff3f7bcbb2ee84877/abSENSE-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70759e45b11f998d69911f351b24dc939d771019bf234189d30331f1845f408e",
          "md5": "c20146cfb4fbbb035a6722e701777fc9",
          "sha256": "77bf6da25b30a20c74a830512f3770477047ac6434429a6ec8aa2290fd347857"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c20146cfb4fbbb035a6722e701777fc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31936,
        "upload_time": "2022-09-13T16:24:20",
        "upload_time_iso_8601": "2022-09-13T16:24:20.799311Z",
        "url": "https://files.pythonhosted.org/packages/70/75/9e45b11f998d69911f351b24dc939d771019bf234189d30331f1845f408e/abSENSE-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ff72487397aca742f95a57f385d1ff4e62579bd8fc1f1a1040171907854036a",
          "md5": "56062b7cc76e69fd4bfcb4d4b04201f2",
          "sha256": "786fae8f8a0d9a6a34bd5c5d50f13c555a9b7fa11a749b0c318b09edc6b47e50"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56062b7cc76e69fd4bfcb4d4b04201f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23577,
        "upload_time": "2022-09-13T18:18:14",
        "upload_time_iso_8601": "2022-09-13T18:18:14.543728Z",
        "url": "https://files.pythonhosted.org/packages/1f/f7/2487397aca742f95a57f385d1ff4e62579bd8fc1f1a1040171907854036a/abSENSE-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67a920c29d6e22cd22ff97c8053161c2b0ed008fbebc7651a88d9e3ca7884d5d",
          "md5": "736997322d0f6718484602a79fc152c0",
          "sha256": "3e69a9d50d22a20b470b4628ecb4f27fda43f49aca881efb8b119c2f2503cd3d"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "736997322d0f6718484602a79fc152c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33096,
        "upload_time": "2022-09-13T18:18:15",
        "upload_time_iso_8601": "2022-09-13T18:18:15.916747Z",
        "url": "https://files.pythonhosted.org/packages/67/a9/20c29d6e22cd22ff97c8053161c2b0ed008fbebc7651a88d9e3ca7884d5d/abSENSE-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e6274bed29747f6432ed95566ce85ea9295e0db5fb09e154b5ed490b46bd1a0",
          "md5": "72e7ce1beb8d863a0d3b3e125b9b326e",
          "sha256": "8fcd1850d6955930a976ae5e44cba9df8ad16a073acd6a8fb3fb022077727ddd"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72e7ce1beb8d863a0d3b3e125b9b326e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23803,
        "upload_time": "2022-09-14T15:46:25",
        "upload_time_iso_8601": "2022-09-14T15:46:25.872923Z",
        "url": "https://files.pythonhosted.org/packages/2e/62/74bed29747f6432ed95566ce85ea9295e0db5fb09e154b5ed490b46bd1a0/abSENSE-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "589a183906d1bc24fc219d8ddf602c15c08e262f04b2783386b518f23774b7ac",
          "md5": "09e53d8c944d8122421747c510ba4126",
          "sha256": "8e5a0981ebbc898f6ce96f57095a7ac01a36aba012937be5e6634d55f079f3ed"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "09e53d8c944d8122421747c510ba4126",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33388,
        "upload_time": "2022-09-14T15:46:27",
        "upload_time_iso_8601": "2022-09-14T15:46:27.375879Z",
        "url": "https://files.pythonhosted.org/packages/58/9a/183906d1bc24fc219d8ddf602c15c08e262f04b2783386b518f23774b7ac/abSENSE-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ee7fd2d516238a929dcff00d5cdaeea0c3db97f7541322a0f05351ca85bb1e9",
          "md5": "ee81f5b78df1450804ea873959396137",
          "sha256": "a4fff5034754b5db6b75ee70ec2144b43c2ffef8cd4189805aa2bcff5d2bdcf7"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee81f5b78df1450804ea873959396137",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23939,
        "upload_time": "2022-09-15T16:19:12",
        "upload_time_iso_8601": "2022-09-15T16:19:12.863052Z",
        "url": "https://files.pythonhosted.org/packages/0e/e7/fd2d516238a929dcff00d5cdaeea0c3db97f7541322a0f05351ca85bb1e9/abSENSE-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebf2bcdd6b2ee562528f4591c133bc95ef34a85d40c1740c22a5dc7c68ba12ec",
          "md5": "a02c50391ac74671b649ae75537d5444",
          "sha256": "e3b26ec8d9c70a671bc18269971306a4fcb387f4aa75a665faf4b1a8985f091c"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a02c50391ac74671b649ae75537d5444",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33530,
        "upload_time": "2022-09-15T16:19:14",
        "upload_time_iso_8601": "2022-09-15T16:19:14.304128Z",
        "url": "https://files.pythonhosted.org/packages/eb/f2/bcdd6b2ee562528f4591c133bc95ef34a85d40c1740c22a5dc7c68ba12ec/abSENSE-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a54fd018a9a56a3290b0b9589022b9f717b99bea79bd48caa244b20c89a696d",
          "md5": "d95dfee9ca0831c9e44bfc1c8634af37",
          "sha256": "96a5472aead289e82a60c1e7be241225968e552ababf8d70c1d71fe30ce0910b"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d95dfee9ca0831c9e44bfc1c8634af37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23940,
        "upload_time": "2022-09-15T16:27:08",
        "upload_time_iso_8601": "2022-09-15T16:27:08.366194Z",
        "url": "https://files.pythonhosted.org/packages/8a/54/fd018a9a56a3290b0b9589022b9f717b99bea79bd48caa244b20c89a696d/abSENSE-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24a19eae57826eb0a6f728d26946aa8c29796af4f4e3b7f77d3d6526e5535b4d",
          "md5": "09fffe804fdf88ed3403c43bf5b27d72",
          "sha256": "fbcb41756463f6bfa9b4006f2b3c4070e6b794d8c5e59df29250ba8596e158f1"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "09fffe804fdf88ed3403c43bf5b27d72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33512,
        "upload_time": "2022-09-15T16:27:09",
        "upload_time_iso_8601": "2022-09-15T16:27:09.747464Z",
        "url": "https://files.pythonhosted.org/packages/24/a1/9eae57826eb0a6f728d26946aa8c29796af4f4e3b7f77d3d6526e5535b4d/abSENSE-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78c6c0faf6c0a13bb740e4e6880cc647242a74caf04d6edc1b02c5a921aa6c18",
          "md5": "7b62164d689d76f5816ad6d426c52063",
          "sha256": "e85b393f49bb3f180e7d9ff12552699fbfd14d637b111ee679a4413c10b5b32b"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b62164d689d76f5816ad6d426c52063",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23938,
        "upload_time": "2022-09-15T16:39:18",
        "upload_time_iso_8601": "2022-09-15T16:39:18.390761Z",
        "url": "https://files.pythonhosted.org/packages/78/c6/c0faf6c0a13bb740e4e6880cc647242a74caf04d6edc1b02c5a921aa6c18/abSENSE-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19fdf01cdc590f5cf7f3d9e1dfc63a0df99eac263af87311690a68b22ef4510a",
          "md5": "77c149b9d0d25c642782982ff711c73a",
          "sha256": "baa827b7c51ed237d324d256bb35ad0294251db0cb642da0689e1befa35dabb9"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "77c149b9d0d25c642782982ff711c73a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33513,
        "upload_time": "2022-09-15T16:39:19",
        "upload_time_iso_8601": "2022-09-15T16:39:19.966136Z",
        "url": "https://files.pythonhosted.org/packages/19/fd/f01cdc590f5cf7f3d9e1dfc63a0df99eac263af87311690a68b22ef4510a/abSENSE-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10b857b586d34201c5cad5318d032606544cfa4e0bfd6c058e2821ad3e0532de",
          "md5": "a39c2d25b8d67437fced2350f28f6f95",
          "sha256": "0d5158b8d3d7ed1c1b30d10b8d65035020e3cb0e06fc9a518f47f5e163676127"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a39c2d25b8d67437fced2350f28f6f95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24078,
        "upload_time": "2022-09-15T17:51:51",
        "upload_time_iso_8601": "2022-09-15T17:51:51.969756Z",
        "url": "https://files.pythonhosted.org/packages/10/b8/57b586d34201c5cad5318d032606544cfa4e0bfd6c058e2821ad3e0532de/abSENSE-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b85b90f7e9ad179f64ecce17241bcfc46b9e5abfea4ca98806a46a4dfa59a56f",
          "md5": "5875288b662f9af75c17e037a1444fe2",
          "sha256": "95e0314188e6fd9b70e1d1baf95d4893eb3c7d8636997d51ec2169581680dc13"
        },
        "downloads": -1,
        "filename": "abSENSE-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5875288b662f9af75c17e037a1444fe2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33680,
        "upload_time": "2022-09-15T17:51:53",
        "upload_time_iso_8601": "2022-09-15T17:51:53.130735Z",
        "url": "https://files.pythonhosted.org/packages/b8/5b/90f7e9ad179f64ecce17241bcfc46b9e5abfea4ca98806a46a4dfa59a56f/abSENSE-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10b857b586d34201c5cad5318d032606544cfa4e0bfd6c058e2821ad3e0532de",
        "md5": "a39c2d25b8d67437fced2350f28f6f95",
        "sha256": "0d5158b8d3d7ed1c1b30d10b8d65035020e3cb0e06fc9a518f47f5e163676127"
      },
      "downloads": -1,
      "filename": "abSENSE-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a39c2d25b8d67437fced2350f28f6f95",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 24078,
      "upload_time": "2022-09-15T17:51:51",
      "upload_time_iso_8601": "2022-09-15T17:51:51.969756Z",
      "url": "https://files.pythonhosted.org/packages/10/b8/57b586d34201c5cad5318d032606544cfa4e0bfd6c058e2821ad3e0532de/abSENSE-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b85b90f7e9ad179f64ecce17241bcfc46b9e5abfea4ca98806a46a4dfa59a56f",
        "md5": "5875288b662f9af75c17e037a1444fe2",
        "sha256": "95e0314188e6fd9b70e1d1baf95d4893eb3c7d8636997d51ec2169581680dc13"
      },
      "downloads": -1,
      "filename": "abSENSE-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "5875288b662f9af75c17e037a1444fe2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 33680,
      "upload_time": "2022-09-15T17:51:53",
      "upload_time_iso_8601": "2022-09-15T17:51:53.130735Z",
      "url": "https://files.pythonhosted.org/packages/b8/5b/90f7e9ad179f64ecce17241bcfc46b9e5abfea4ca98806a46a4dfa59a56f/abSENSE-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}