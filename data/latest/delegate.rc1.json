{
  "info": {
    "author": "Robert Dick",
    "author_email": "dickrp@eecs.umich.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Python Software Foundation License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development"
    ],
    "description": "Class to automate delegation decisions based on inheritance graph.\n\nCopyright 2004, Robert Dick (dickrp@eecs.umich.edu).\n\nWhenever you need to delegate to something, inherit from delegate and use\nself.__<base>.<method()> to access the base.  If the delegation was\ninappropriate due to reconverging paths in the inheritance graph, the return\nvalue will be None.  In the case of reconverging paths, the left-most call in\nthe method resolution order will be honored.  The rest will be nulified.  You\ncan also check to see if the base is the no_delegation object.  Delegate to all\nyour bases if you need everything in the inheritance graph to be visited.  As\nlong as one of a class's (transitive) bases inherits from Delegate, that's\nenough.\n\nFor examples of use, please see the delegate.py file.\n\nPython doesn't yet automate meta-class instantiation.  If you need to inherit\nfrom Delegate and another class that does not have a 'type' metaclass, you'll\nneed to generate a shared derived metaclass and explicitly use that as your\nclass's metaclass.  For example:\n\n  import Delegate, qt\n\n  class sip_meta_join(type(Delegate), type(qt.QObject)):\n    def __init__(*args):\n      type(Delegate).__init__(*args)\n      type(qt.QObject).__init__(*args)\n\n  class MyClass(Delegate, qt.QObject):\n    __metaclass__ = sip_meta_join\n    ...\n\nPlease see the license file for legal information.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://robertdick.org/python/delegate-0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://robertdick.org/python/mods.html",
    "keywords": null,
    "license": "modified Python",
    "maintainer": null,
    "maintainer_email": null,
    "name": "delegate",
    "package_url": "https://pypi.org/project/delegate/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/delegate/",
    "project_urls": {
      "Download": "http://robertdick.org/python/delegate-0.1.tar.gz",
      "Homepage": "http://robertdick.org/python/mods.html"
    },
    "release_url": "https://pypi.org/project/delegate/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Class to automate delegation decisions based on inheritance graph.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 157270,
  "releases": {
    "0.1": []
  },
  "urls": [],
  "vulnerabilities": []
}