{
  "info": {
    "author": "",
    "author_email": "Aduneo <contact@aduneo.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Topic :: System :: Systems Administration :: Authentication/Directory"
    ],
    "description": "# aduneoclientfedid\r\nIdentity Federation Test Client by Aduneo\r\n\r\n## Quick view\r\n\r\n**aduneoclientfedid** is used to test OpenID Connect, OAuth 2 and SAML configurations. It acts as a federation client mimicking an application.\r\n\r\nAfter an initial configuration, various flows are tested. The application may obtain tokens and assertions that can be validated, then used for user info, introspection and exchange.\r\n\r\nIt is useful for:\r\n- testing a newly installed identity provider\r\n- learning how identity federation works\r\n- understanding a specific feature\r\n- debugging a faulty client configuration by replicating it\r\n- learning how to code OpenID Connect, OAuth 2 or SAML 2\r\n\r\n\r\n## Supported protocols\r\n\r\n**aduneoclientfedid** supports OpenID Connect, OAuth 2 and SAML.\r\n\r\n### OpenID Connect\r\n\r\nThe client is compatible with OpenID Connect Core 1.0 incorporating errata set 1 (https://openid.net/specs/openid-connect-core-1_0.html).\r\n\r\n### OAuth 2\r\n\r\nThe client is compatible with\r\n- RFC 6749 The OAuth 2.0 Authorization Framework (https://www.rfc-editor.org/rfc/rfc6749)\r\n- RFC 7662 OAuth 2.0 Token Introspection (https://www.rfc-editor.org/rfc/rfc7662)\r\n- RFC 8707 Resource Indicators for OAuth 2.0 (https://www.rfc-editor.org/rfc/rfc8707)\r\n- RFC 8693 OAuth 2.0 Token Exchange (https://www.rfc-editor.org/rfc/rfc8693)\r\n\r\n### SAML\r\n\r\nThe client is compatible with the essential parts of SAML V2.0 Specifications (http://saml.xml.org/saml-specifications)\r\n\r\nand its use with OAuth 2 :\r\n- RFC 7522 Security Assertion Markup Language (SAML) 2.0 Profile\r\n      for OAuth 2.0 Client Authentication and Authorization Grants (https://www.rfc-editor.org/rfc/rfc7522)\r\n\r\n\r\n## Installation\r\n\r\n**aduneoclientfedid** is a web server that is installed locally, most of the time on *localhost* and accessed with a web browser.\r\n\r\nPython must be installed on the system which will run the web server.\r\nIt is compatible with Python 3.6 and later.\r\n\r\nIt has been tested on Windows and various Linux systems. On Windows, it can be executed from a command line prompt\r\nor in a Powershell window.\r\n\r\nThe simpliest way to install it is to download it from PyPI.\r\n\r\nFirst, it is advisable to create a virtual environment in a directory where you want to install the software.\r\n```console\r\n$ mkdir clientfedid\r\n$ cd clientfedid\r\n$ python -m venv my-env\r\n```\r\n(depending on your operating system, you might have to use *python3* instead of *python*, or use a different command - *virtualenv -p python3 my-env* for instance)\r\n\r\nand activate it. Depending on the system:\r\n```console\r\n$ source my-env/bin/activate\r\n```\r\nor\r\n```console\r\n> my-env\\Script\\activate\r\n```\r\nthen install it with *pip*:\r\n```console\r\n$ pip install aduneoclientfedid\r\n```\r\nBy default, packages needed for SAML are not installed, because they are tricky on some systems. If you want to use SAML,\r\ninstall with the [saml] option:\r\n```console\r\n$ pip install aduneoclientfedid[saml]\r\n```\r\n\r\nYou may have to manually install some Linux packages. Please refer to the xmlsec documentation (https://pypi.org/project/xmlsec)\r\nfor more information.\r\n\r\n\r\n## Running aduneoclientfedid\r\n\r\nOnce the packages are successfully installed, create a root directory where the configuration and logs will be created. \r\nThis root directory can be located anywhere on the disk. The natural option is the directory where the Python\r\nvirtual environment (*venv*) has been created.\r\n\r\nIf you want to create a new root directory:\r\n```console\r\nmkdir clientfedid\r\ncd clientfedid\r\n```\r\n\r\nTwo directories will be created in this directory:\r\n- *conf* where a default configuration file is generated\r\n- *log*\r\n\r\nMake sure the current user is allowed to create these items.\r\n\r\nThere are several ways of launching the server:\r\n```console\r\nclientfedid\r\naduneoclientfedid\r\npython -m aduneoclientfedid\r\n```\r\nIf successfull, a similar line is displayed:\r\n```console\r\nFri Jan 6 18:15:52 2023 Server UP - https://localhost:443\r\n```\r\n\r\nOn Unix/Linux systems, non-administrative users are prevented by default to start a server on ports below 1024.\r\n\r\nHTTPS running on port 443, the server won't launch, with the following error:\r\n```console\r\nPermissionError: [Errno 13] Permission denied\r\n```\r\n\r\nThe easiest way out is to modify the port to a value larger than 1024, for instance 8443.\r\n\r\nTo change the port, just had the *-port <port>* argument. Launching the server on port 8443 becomes:\r\n```console\r\nclientfedid -port 8443\r\n```\r\n\r\nWhen you use the previous command to launch the client for the first time (when the *conf* directory has not yet been created), the port is configured in the configuration file (the file *clientfedid.cnf* in the *conf* directory).\r\nNow you don't have to specify the port in the command line for the next execution.\r\n\r\nYou can also change the listening interface, with the *-host <host>* argument.\r\n\r\nBy default, the server only listens on the *localhost* interface (127.0.0.1), meaning you can only reach it from the same computer\r\n(with a web browser on https://localhost).\r\nIf you want to access it from another computer, you have to change the listening network interface.\r\n\r\nTo listen on any interface, run the server with an empty host:\r\n```console\r\nclientfedid -host \"\"\r\n```\r\nNow you can point a browser to something like https://mycomputer.domain.com.\r\n\r\nOnce the server is running, stop it with Ctrl+C.\r\n\r\nThis server is only meant to be running for the time when the tests are conducted. It is not optimized to run for a long time.\r\nIt is not optimized to run as a demon. It is definitely not secure enough.\r\n\r\nIt is usually run on the tester's computer or on a computer controlled by the tester.\r\n\r\n\r\n## Running from sources\r\n\r\nThere are situations where it is not possible to install the server with pip.\r\n\r\nIt's still possible to run it from the sources.\r\n\r\nFirst, the following packages must be manually installed:\r\n- certifi\r\n- charset_normalizer (at the time of writing, urllib3 is only compatible with version 2, not the newer version 3)\r\n- idna\r\n- urllib3\r\n- requests\r\n- cffi\r\n- pycparser\r\n- cryptography\r\n- pyopenssl\r\n- deprecated\r\n- wrapt\r\n- jwcrypto\r\n\r\nAdditionaly (for SAML):\r\n- lxml\r\n- xmlsec\r\n\r\nSources are downloaded from https://github.com/Aduneo/aduneoclientfedid, usually as a ZIP download through the *Code* button.\r\n\r\nCreate a root directory.\r\n\r\nCreate a Python virtual environment, activate it and install all necessary packages, in the order given earlier.\r\n\r\nUnzip the sources, go to the directory containing the aduneoclientfedid folder and run:\r\n```console\r\npython -m aduneoclientfedid\r\n```\r\n\r\n\r\n## Testing OpenID Connect\r\n\r\n**aduneoclientfedid** acts as an OpenID Connect Relaying Party (RP). It triggers user authentications, receives ID Tokens and retrieves\r\nuser information through the *userinfo* endpoint.\r\n\r\nOnce an ID token is obtained, if the RP is compatible, the token can be exchanged for an access token\r\n(using OAuth 2.0 Token Exchange - RFC 8693).\r\nThis simulates a web application that authenticates users (OpenID Connect) and then connects to web services (OAuth 2).\r\n\r\n### How it works\r\n\r\nYou will need\r\n- *aduneoclientfedid* installed and started, usually on the local machine\r\n- access to the OpenID Provider (the identity server you want to test)\r\n- a test user created on the OpenID Provider (along with its password or any other authentication method)\r\n- both *aduneoclientfedid* and the OP configured (more on that later)\r\n\r\nWhen all of this is done, connect with a web browser to *aduneoclientfedid* main page. Usually https://localhost\r\n(it's possible to install it on a different machine, to change to port, and to deactivate HTTPS for testing purposes).\r\n\r\nThe browser will probably display a warning since loading a page from *localhost* is restricted when the connection is\r\nencrypted. Bypass the warning, or change the configuration to switch to unencrypted or to connect to a real IP address.\r\n\r\nOnce you have configured a flow with an *OpenID Provider* (as explained in the next part), you can click on the *Login* button next to the name of the configuration you wish to test.\r\n\r\nA page is displayed with the parameters and options from the configuration. You have the liberty to change whatever you need to\r\nperform your test. The changes only apply to the current session and leave configuration data as they are.\r\n\r\nThe authentication flow is started when you click on *Send to IdP*.\r\n\r\nThe browser is redirected to the IdP where authentication occurs. Then the browser is redirected back to *aduneoclientfedid*\r\nwith the result (success or error).\r\n\r\nA page is displayed with the ID Token and its validation parameters (if authentification was successful).\r\n\r\nYou can then start a userinfo flow to retrieve information in the ID token.\r\n\r\nThe userinfo request is added to the page and one again you change any value before hitting *Send request*.\r\n\r\nYou can also restart an authentification flow, with the exact same parameters as the first one.\r\n\r\n\r\n### Configuration\r\n\r\nA configuration represents a flow between an OP and a client. Once a configuration is defined, authentications can be started.\r\n\r\nYou can define as many configurations as you want, with different OPs or with the same OP.\r\n\r\nA new configuration is created with the *Add OIDC Client* button. A name is required. Choose any name that speaks to you, for it has\r\nno technical meaning. It is obviously advised that the name includes references to the OP and to what you are to test.\r\n\r\nSome parameters of the OIDC flow are configured in the OP and other in *aduneoclientfedid*.\r\n\r\n#### OpenID Provider configuration\r\n\r\nThe OP needs the minimum following information:\r\n- redirect URI: the *aduneoclientfedid* URL where the browser is directed after the user has been authenticated\r\n\r\nThis information is taken from the *Redirect URI* field on the *aduneoclientfedid* configuration page. The default URL is https://localhost/client/oidc/login/callback \r\n(varies depending on configuration specifics). You can change it to suit you need. Make sure any custom URL is not used in a configuration from a different protocol\r\n(OAuth 2 or SAML). To avoid that, it is better to add an indication about the protocol (oidc) in the URL.  \r\nBeware that you must enter the same URL in the configurations of the OP and *aduneoclientfedid*.\r\n\r\nSome OP software automatically generate a client ID and a client secret. You need this information to configure *aduneoclientfedid*.\r\nOther software require this information is manually entered.\r\n\r\nDepending on the OP, additional configuration is required, for example the definition of the allowed scopes, or the authentication methods allowed for the various endpoints.\r\n\r\n#### aduneoclientfedid configuration\r\n\r\n*aduneoclientfedid* needs the following information:\r\n- the OP endpoints: the URL where the browser is directed to authenticate the user and URLs for various OP web services (token retrieval, public keys, userinfo, etc.)\r\n- client ID, identifying the client in the OP\r\n- client secret (the password associated with the client ID)\r\n- the method used to authenticate the client\r\n\r\nWhile it is possible to detail every endpoint URL, the easiest way is to give the discovery URI, also known as the well known\r\nconfiguration endpoint that returns the *configuration document* with all necessary information.\r\n\r\nThis discovery URL is the following construct: issuer URL + */.well-known/openid-configuration*.\r\n\r\nHere are some examples:\r\n- Azure AD: https://login.microsoftonline.com/\\<IdP UID>/v2.0/.well-known/openid-configuration\r\n- Okta: https://\\<domain>.okta.com/.well-known/openid-configuration\r\n- ForgeRock AM: https://\\<server>/am/oauth2/\\<realm>/.well-known/openid-configuration\r\n- Keycloak: https://\\<server>/realms/\\<realm>/.well-known/openid-configuration\r\n\r\nThe client ID and client secret are either generated by the OP or entered in the OP configuration.\r\n\r\nThe authentication method describes how these credentials are transmitted:\r\n- POST: in the HTTP body (widely used)\r\n- Basic: in the HTTP headers\r\n\r\nSome OPs accept any authentication method while other must be precisely configured.\r\n\r\n#### Default parameters\r\n\r\nWhen configuring an OpenID Connect service, you also provide default values for flow parameters.\r\n\r\nThe *scopes* are keywords representing information that the OP should send alongside the identity after a successfull\r\nauthentication. Multiple scopes are separated by spaces.\r\n\r\nThe parameter MUST contain *openid* per OIDC’s flow configured in the client (it distinguishes an OpenID Connect flow and an OAuth 2 flow).\r\n\r\nThe OpenID Connect Specifications define several default scopes and additional ones which can be configured in the OP.\r\n\r\nThe most used scopes for testing purposes are \"openid email profile\" :\r\n- openid indicates an OpenID Connect flow\r\n- email is obviously the email address\r\n- profile returns basing information about the user: name, given name, gender, locale, birthdate, etc.\r\n\r\n*aduneoclientfedid* is only compatible with the *code* response type, the implicit flow being deprecated since 2018.\r\n\r\n#### Options\r\n\r\nOptions describe *aduneoclientfedid*'s behavior out of the OpenID Connect specifications.\r\n\r\nThe only option indicates is HTTPS certificates must be validated.\r\n\r\nWhen testing a production environment, it is advised to verify certificates, to replicate the exact flows.\r\n\r\nOther environments typically have specific certificates (self-signed or signed by an internal PKI). Since certificate verification will likely fail, it's best to disable it.\r\n\r\n\r\n### OpenID Connect Logout\r\n\r\n*aduneoclientfedid* implements *OpenID Connect RP-Initiated Logout 1.0*, but not yet either Front-Channel or Back-Channel.\r\n\r\nLogout is initiated from the home page.\r\n\r\n\r\n## Testing OAuth 2\r\n\r\n*aduneoclientfedid* acts both as a OAuth 2 client (a web app) and a resource server (RS, ie a web service).\r\n\r\nIn a first step *aduneoclientfedid* simulates a client, triggers a user authentication and receives an access token (AT).\r\nThen it takes the role of a resource server that would have been inkoved by the client. The RS would have received the access token and now has to validate it.\r\n\r\nThe validation method depends on the nature of the access token:\r\n- JWTs are validated by verifying the signature (not yet implemented by *aduneoclientfedid* for ATs)\r\n- opaque tokens must be *introspected* (presented to the introspection endpoint for validation and user information retrieval)\r\n\r\n*aduneoclientfedid* performs token exchanges (RFC 8693) to get other access tokens or ID tokens from an access token. At the time of writing very few AS have implemented this RFC.\r\n\r\nOAuth 2 flows (introspections and token exchanges) can also be initiated after a SAML authentication.\r\n\r\n### How it works\r\n\r\nYou will need\r\n- *aduneoclientfedid* installed and started, usually on the local machine\r\n- access to the Authorization Server (the identity server you want to test)\r\n- a test user created on the Authorization server (along with its password or any other authentication method)\r\n- both *aduneoclientfedid* and the OP configured (more on that later)\r\n\r\nWhen all of this is done, connect with a web browser to *aduneoclientfedid* main page. Usually https://localhost\r\n(it's possible to install it on a different machine, to change to port, and to deactivate HTTPS for testing purposes).\r\n\r\nThe browser will probably display a warning since loading a page from *localhost* is restricted when the connection is\r\nencrypted. Bypass the warning, or change the configuration to switch to unencrypted or to connect to a real IP address.\r\n\r\nOnce you have configured a flow with an *authorization server* (as explained in the next part), you can click on the *Login* button next to the name of the configuration you wish to test.\r\n\r\nA page is displayed with the parameters and options from the configuration. You have the liberty to change whatever you need to\r\nperform your test. The changes only apply to the current session and leave configuration data as they are.\r\n\r\nThe authentication flow is started when you click on *Send to IdP*.\r\n\r\nThe browser is redirected to the AS where authentication occurs. Then the browser is redirected back to *aduneoclientfedid*\r\nwith the result (success or error).\r\n\r\nA page is displayed with the Access Token.\r\n\r\nThen, you can start an introspection flow or a token exchange flow.\r\n\r\n### Configuration\r\n\r\nA configuration represents a flow between an Authorization Server and a client. Once a configuration is defined, authorizations can be started.\r\n\r\nYou can define as many configurations as you want, with different ASs or with the same AS.\r\n\r\nA new configuration is created with the *Add OAuth Client* button. A name is required. Choose any name that speaks to you, for it has\r\nno technical meaning. It is obviously advised that the name includes references to the OP and to what you are to test.\r\n\r\nSome parameters of the OAuth 2 flow are configured in the OP and other in aduneoclientfedid.\r\n\r\n#### Authorization Server configuration\r\n\r\nThe AS needs the minimum following information:\r\n- redirect URI: the *aduneoclientfedid* URL where the browser is directed after the user has been authenticated\r\n\r\nThis information is taken from the *Redirect URI* field on the *aduneoclientfedid* configuration page. The default URL is https://localhost/client/oidc/login/callback \r\n(varies depending on configuration specifics). You can change it to suit you need. Make sure any custom URL is not used in a configuration from a different protocol\r\n(OIDC or SAML). To avoid that, it is better to add an indication about the protocol (oidc) in the URL.  \r\nBeware that you must enter the same URL in the configurations of the OP and *aduneoclientfedid*.\r\n\r\nSome AS software automatically generate a client ID and a client secret. You need this information to configure *aduneoclientfedid*. Other software require this information is manually entered.\r\n\r\nDepending on the AS, additional configuration is required, for example the definition of the allowed scopes, or the authentication methods allowed for the various endpoints.\r\n\r\nIf introspection is used for validating the AT, you need to create a configuration for *aduneoclientfedid* acting as a resource server. All is needed is a login and a secret.\r\nEach authorization server software has its own configuration way\r\n- some have dedicated objects to represent a RS\r\n- others treat RS as clients with minimal configuration\r\nRefer to the software documentation to determine how to proceed.\r\n\r\n#### aduneoclientfedid configuration\r\n\r\nThe *aduneoclientfedid* configuration page is split in 2 sections:\r\n- \"Token request by the client\" is the configuration when it acts as a client\r\n- \"Token validation by the API (resource server)\" when it acts as a resource server\r\n\r\nTo obtain an Access Token, the following information is needed:\r\n- the AS endpoints: URL where the browser is directed to authenticate the user and URLs for various AS web services (token retrieval, introspection, etc.)\r\n- client ID, identifying the client in the AS\r\n- client secret (the password associated with the client ID)\r\n- the method used to authenticate the client\r\n\r\nOAuth does not have a discovery URI mechanism like OpenID Connect, where the client can retrieve all endpoints (and additional parameters).\r\nNormally, each individual endpoint must be provided.\r\n\r\nBut some AS software publish a discovery URI, which can be the same as OpenID Connect, or different. If it's different, make sure to enter the correct URI. Otherwise \r\nyou might have an unpredictable behavior.\r\n\r\nThis is the case with Okta :\r\n- https://\\<domain>.okta.com/.well-known/oauth-authorization-server\r\n\r\nForgeRock AM has the same discovery URI for OpenID Connect and OAuth 2.\r\n\r\nThe client ID and client secret are either generated by the AS or entered in the AS configuration.\r\n\r\nThe authentication method describes how these credentials are transmitted:\r\n- POST: in the HTTP body (widely used)\r\n- Basic: in the HTTP headers\r\n\r\nSome Authorization Servers accept any authentication method while other must be precisely configured.\r\n\r\nIf tokens are validated by introspection, you can configure how to perform it:\r\n- introspection endpoint (if not retrieved through the discovery URI)\r\n- resource server client ID: the login used by the web service that has received the Access Token\r\n- resource server secret: the corresponding secret (*aduneoclientfedid* is only compatible with a password at the moment)\r\n\r\n#### Default parameters\r\n\r\nWhen configuring an OAuth 2 service, you also provide default values for flow parameters.\r\n\r\nThe *scopes* are keywords representing the type of access that is requested. They are entirely dependent on your own installation. They usually represent access types (read, write, create, delete, etc.).\r\n\r\nThe *resource* parameter is defined by RFC 8707 but not implemented by many AS. Check compatibility before using it.\r\n\r\n*aduneoclientfedid* is only compatible with the *code* response type, the implicit flow being deprecated since 2018.\r\n\r\n#### Options\r\n\r\nOptions describe *aduneoclientfedid*'s behavior outside of the OAuth RFCs.\r\n\r\nThe only option indicates if HTTPS certificates must be validated.\r\n\r\nWhen testing a production environment, it is advised to verify certificates, to replicate the exact flows.\r\n\r\nOther environments typically have specific certificates (self-signed or signed by an internal PKI). Since certificate verification will likely fail, it's best to disable it.\r\n\r\n### Access Token Introspection\r\n\r\nAfter an access token has been obtained, it can be introspected.\r\n\r\nAfter clicking on the \"Introspect AT\" button, a form is displayed in two parts:\r\n- first the parameters defined by RFC 7662 (token and token type hint)\r\n- then the request as it is going to be sent to the authorization server: endpoint, data, authentication parameters\r\n\r\nAny change in the first part is reflected on the second (but not the other war around).\r\n\r\nDuring tests, you'll probably have to enter the same information many times (credentials for instance). To help you with that, you can use the internal clipboard.\r\nIt keeps all inputs that are entered so that you just have to select it when it's needed again.\r\nThe clipboard is opened when clicking the icon on the right of each form field.\r\nBy default, passwords are not stored in the clipboard, but a configuration parameter enables this feature.\r\n\r\n### Refreshing Access Tokens\r\n\r\nIf a refresh token (RT) was retrieved during OAuth flow, it can be used to get a new access token.\r\n\r\nAs with introspection, a two-part form is displayed:\r\n- top form: parameters defined by RFC 6749 (section 6)\r\n- bottom form: the request as it will be sent to the authorization server\r\n\r\n### Token Exchange\r\n\r\nRFC 8693 defines a way to obtain a new token (ID or access) from an existing valid token (ID or access).\r\n\r\nFew authorization servers have implemented it, so check it's available.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Testing SAML 2\r\n\r\n*aduneoclientfedid* is a SAML 2 Service Provider (SP). It simulates an application authenticating to an Identity Provider (IdP).\r\n\r\nSAML authentication is only available when the *xmlsec* Python module is installed. Refer to this page for instruction on how to install it: https://pypi.org/project/xmlsec/.\r\nSometimes it's easy (Windows) sometimes it requires some skills (Ubuntu).\r\n\r\nAfter a successful authentication an OAuth 2 Access Token can be obtained when the IdP is compatible with RFC 7522 \r\n(*Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants*).\r\n\r\n### How it works\r\n\r\nYou will need\r\n- *aduneoclientfedid* installed and started, usually on the local machine\r\n- access to the Identity Provider (the identity server you want to test)\r\n- a test user created on the IdP (along with its password or any other authentication method)\r\n- both *aduneoclientfedid* and the IdP correctly configured (more on that later)\r\n\r\nWhen all of this is done, connect with a web browser to *aduneoclientfedid* main page. Usually https://localhost\r\n(it's possible to install it on a different machine, to change to port, and to deactivate HTTPS for testing purposes).\r\n\r\nThe browser will probably display a warning since loading a page from *localhost* is restricted when the connection is\r\nencrypted. Bypass the warning, or change the configuration to switch to unencrypted or to connect to a real IP address.\r\n\r\nOnce you configured a flow in the client as explained in the next part, you can click on the *Login* button next to the name of the configuration you wish to test.\r\n\r\nA page is displayed with the default configuration and the default options. You have the liberty to change whatever you need to\r\nperform your test.\r\n\r\nThe authentication flow is started when you click on *Send to IdP*.\r\n\r\nThe browser is redirected to the IdP where authentication occurs. Then the browser is redirected to *aduneoclientfedid*.\r\n\r\nA page is displayed with the SAML assertion and its validation parameters.\r\n\r\nYou can then retrieve an access token if needed (and if the IdP is RFC 7522 compliant).\r\n\r\n### Configuration\r\n\r\nA configuration represents a flow between an Identity Provider and a client. Once a configuration is defined, authentications can be started.\r\n\r\nYou can define as many configurations as you want, with different IdPs or with the same IdP.\r\n\r\nA new configuration is created with the *Add SAML SP* button. A name is required. Choose any name that speaks to you, for it has\r\nno technical meaning. It is obviously advised that the name includes references to the OP and to what you are to test.\r\n\r\nA SAML configuration is an exchange of metadata files :\r\n- the SP generates an XML file that is uploaded to the IdP\r\n- the IdP generates an XML file that is uploaded to the SP\r\n\r\nWhile this is the easy way to proceed, it is still possible to enter each parameter individually.\r\n\r\nHaving gathered information from the IdP, you configure *aduneoclientfedid*\r\n- either by uploading the metadata file, which results in the parameter fields being automatically populated\r\n- or by manually entering it: entity ID, SSO URL and certificate (optionally Single Logout URL)\r\nThe certificate must be in PEM format, with or without a header and a footer.\r\n\r\n*aduneoclientfedid* generates an XML metadata file based on the information provided in the form:\r\n- SP Entity ID: references the SP. It must be a URI, it is recommended it is a URL\r\n- SP Assertion Consumer Service (ACS) URL: callback URL to *aduneoclientfedid* after authentication. Default is https://localhost/client/saml/login/acs, but you can change it (as long as it stays in the same domain).\r\n- keys and certificate: this information is used to sign the requests. You can either use the default key or provide your own \r\n(in case you want to replicate an exact real world behavior). Communicate the certificate but **NOT the private key**.\r\n- NameID policy: expected user identifier field returned in the SAML assertion\r\n- Authentication binding: method used to send an authentication request\r\n- Logout binding (optional): method used to send a logout request\r\n\r\nThose values are communicated to the IdP either manually or via a metadata file (downloaded through the *Download SP metadata* button)\r\n\r\nThere obviously needs to be a coherence between the configurations of the SP and the IdP.\r\n\r\nMany problems arise because of incompatible NameID policies. NameID is the field with the user's identity. SAML defines different formats and different values.\r\nThe easiest format to configure would be the email (*urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress*), but it is not always the best choice for an identifier\r\n(actually, it's a pretty terrible choice in most cases). A better option is an uid present in the identity repository of the organization, which has to be conveyed\r\nin the unspecified format (*urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified*). It often requires a specific configuration on the IdP part.\r\n\r\n### SAML Logout\r\n\r\n*aduneoclientfedid* implements Single Logout, with the POST or Redirect bindings.\r\n\r\nLogout is initiated from the home page.\r\n\r\n\r\n\r\n\r\n\r\n## General configuration\r\n\r\nSome configuration parameters affecting the server behaviour are modified in the configuration file, using your\r\nfavorite editor. There is no web console now for these parameters.\r\n\r\nThe configuration file is named clientfedid.cnf and is in the conf directory that has been created in the current folder\r\n(the one from which the python command has been issued).\r\n\r\nIt's a JSON file, so be careful of trailing commas. As a reminder, the following syntax is not permitted by JSON:\r\n```console\r\n{\r\n  \"param1\": \"value1\",\r\n  \"param2\": \"this will result in an error\",\r\n}\r\n```\r\n(remove the last comma to make it JSON compliant)\r\n\r\nThere are 6 main sections in the configuration file:\r\n- meta: information about the configuration file itself. It only contains the name of the file containing the key used to encrypt\r\n    passwords\r\n- server: HTTP server parameters (port, SSL, etc.)\r\n- preferences\r\n- oidc_clients, oauth_clients, saml_clients: these parts detail the various clients and configurations in the application\r\n\r\nAny manual change in thre configuration file requires the server to be restarted (Ctrl-C then clientfedid/aduneoclientfedid/python -m aduneoclientfedid).\r\n\r\n### meta/key: encryption key file name\r\n\r\nAll parameters with a name ending with an exclamation point (!) are automatically encrypted (client secrets), using a symmetric key.\r\n\r\nA key is automatically generated at first launch and store in a file named clientfedid.key.\r\n\r\nIt is a good practice to protect this file.\r\n\r\n### server/host\r\n\r\nIdentifies the network card used by the HTTP server.\r\n\r\nUsing the default localhost makes sure no other machine is (easily...) able to access it.\r\n\r\nAn empty value (\"\") opens it to anyone (depending on your local firewall settings).\r\n\r\nIt can be a name or an IP address.\r\n\r\n### server/port\r\n\r\nListening port for the HTTP server.\r\n\r\nDefault is 443. It might not work on Unix/Linux systems. The easiest fix is to choose a port number greater than 1024 (8443 is a good\r\ncandidate).\r\n\r\n### server/ssl\r\n\r\nActivates HTTPS. Possible values are *on* and *off*.\r\n\r\nSince most of the security of OpenID Connect/OAuth 2 relies on HTTPS, it is advisable to leave the default (*on*).\r\n\r\nBut you may have to turn it off for testing purposes.\r\n\r\n### server/ssl_key_file and server/ssl_cert_file\r\n\r\nWhen SSL is activated, these parameters contains the file with\r\n- the SSL private key (*ssl_key_file*), PEM format\r\n- the associated certificate (*ssl_cert_file*), PEM format\r\n\r\nIf those files are not referenced in the configuration file (which is the default), aduneoclientfedid will automatically create\r\na key and certificate. Those items are deleted after the server is stopped.\r\n\r\nThe certificate is self-signed, with server/host as the subject (the FQDN of the machine if server/host is empty).\r\n\r\n### preferences/logging/handler\r\n\r\nList of logging handlers:\r\n- console: displays logs in the window used to launch the server\r\n- file: adds logs in a file in a directory (*logs*) created alongside *conf* directory.\r\n- webconsole: displays logs in a browser window that can be opened by \"console\" button on the upper right side of the page, or\r\nautomatically when an authentication flow is started\r\n\r\nBy default, all handlers are activated.\r\n\r\n### preferences/open_webconsole:\r\n\r\n*on* if the browser window displaying logs is automatically opened every time an authentication flow is started (default).\r\n\r\n### preferences/clipboard/encrypt_clipboard\r\n\r\nThe clipboard stores all texts typed in application forms, to be easily used multiple times without having to enter them each time.\r\n\r\nIts content is stored in the *conf* directory.\r\n\r\nIf *encrypt_clipboard* is *on*, the file is encrypted using *clientfedid.key* as a key. This is the default.\r\n\r\nOtherwise, its content is in plain text.\r\n\r\n### preferences/clipboard/remember_secrets\r\n\r\nIndicates if secrets are stored in the clipboard (default is *off*).\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "identity,federation,openid connect,oidc,oauth,oauth 2,saml",
    "license": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION  1. Definitions.  \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.  2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.  3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.  4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:  (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.  5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.  6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.  7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.  8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.  9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.  END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.  To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.  Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aduneoclientfedid",
    "package_url": "https://pypi.org/project/aduneoclientfedid/",
    "platform": null,
    "project_url": "https://pypi.org/project/aduneoclientfedid/",
    "project_urls": {
      "homepage": "https://www.aduneo.com",
      "repository": "https://github.com/Aduneo/aduneoclientfedid"
    },
    "release_url": "https://pypi.org/project/aduneoclientfedid/1.0.2/",
    "requires_dist": [
      "requests",
      "jwcrypto",
      "pyopenssl",
      "xmlsec ; extra == 'saml'"
    ],
    "requires_python": ">=3.6",
    "summary": "Identity Federation Test Client",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17191350,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb9d467841b2a734aa4edececdce68600f2a9e46f0269d8900a2307aed4ccd4d",
          "md5": "bb9ff7a75cb5ba0adeb9b21a2540de83",
          "sha256": "a5999076c393f563ab7715873ac8adce661479598983c8e830f66a431d531ab5"
        },
        "downloads": -1,
        "filename": "aduneoclientfedid-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb9ff7a75cb5ba0adeb9b21a2540de83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 428668,
        "upload_time": "2023-02-15T14:17:02",
        "upload_time_iso_8601": "2023-02-15T14:17:02.331223Z",
        "url": "https://files.pythonhosted.org/packages/cb/9d/467841b2a734aa4edececdce68600f2a9e46f0269d8900a2307aed4ccd4d/aduneoclientfedid-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00b1cc2f4f625d2f33ae2208ae1544bb0a47f45aa98dd6de575c0ad084bd6613",
          "md5": "d670cc55035feb96c36d94312b5e6e8e",
          "sha256": "c6269bafd8aae9d06ab7a8e574b643974092ab670df7a343c561f224356cd0bd"
        },
        "downloads": -1,
        "filename": "aduneoclientfedid-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d670cc55035feb96c36d94312b5e6e8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 415474,
        "upload_time": "2023-02-15T14:17:05",
        "upload_time_iso_8601": "2023-02-15T14:17:05.270349Z",
        "url": "https://files.pythonhosted.org/packages/00/b1/cc2f4f625d2f33ae2208ae1544bb0a47f45aa98dd6de575c0ad084bd6613/aduneoclientfedid-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7860e0718166b2bee05f6229284288a4503fe0936b1c5e1cb2aeeeadbb8c89c9",
          "md5": "4939e4b7f7fd9767426e0d862fc2a1dc",
          "sha256": "941606f3c60c3ae2e21ffc05752a939e9d57028214b079ab9cc43553df16cf45"
        },
        "downloads": -1,
        "filename": "aduneoclientfedid-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4939e4b7f7fd9767426e0d862fc2a1dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 428670,
        "upload_time": "2023-02-21T09:20:13",
        "upload_time_iso_8601": "2023-02-21T09:20:13.768084Z",
        "url": "https://files.pythonhosted.org/packages/78/60/e0718166b2bee05f6229284288a4503fe0936b1c5e1cb2aeeeadbb8c89c9/aduneoclientfedid-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3f96c379115f1407fa3de60e5d90f575bb0df91dd2888f9abfeda1800ee6fe7",
          "md5": "ac95b3de6b6039c702accace3fb5c82b",
          "sha256": "bd737a040df585c368fe00f8cd2c460f0d0bb9e5ff426131cbfbcbfd0d778972"
        },
        "downloads": -1,
        "filename": "aduneoclientfedid-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac95b3de6b6039c702accace3fb5c82b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 415522,
        "upload_time": "2023-02-21T09:20:15",
        "upload_time_iso_8601": "2023-02-21T09:20:15.579591Z",
        "url": "https://files.pythonhosted.org/packages/e3/f9/6c379115f1407fa3de60e5d90f575bb0df91dd2888f9abfeda1800ee6fe7/aduneoclientfedid-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14334fa60d843f64d3c52a5b5a04801e007ee03d7839d39519f2a906a21b5873",
          "md5": "6f63a0d8b9080ae316773d875736b82e",
          "sha256": "3483424beb6d681711a0376632386feed3f6a13e78f2f7b5509ed3467e0a9b3b"
        },
        "downloads": -1,
        "filename": "aduneoclientfedid-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f63a0d8b9080ae316773d875736b82e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 432265,
        "upload_time": "2023-03-07T13:56:26",
        "upload_time_iso_8601": "2023-03-07T13:56:26.406649Z",
        "url": "https://files.pythonhosted.org/packages/14/33/4fa60d843f64d3c52a5b5a04801e007ee03d7839d39519f2a906a21b5873/aduneoclientfedid-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be6a884b28b295eeb3c467219064d482a9cffb42404bdfc5ac66efef12fb997f",
          "md5": "62e89bbe5f2d279f1434ac3db9d4725e",
          "sha256": "ba6345ef86e05e45a1064ecc8c0a7eef9015f7cff0af4a5bf0143198259af3f5"
        },
        "downloads": -1,
        "filename": "aduneoclientfedid-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "62e89bbe5f2d279f1434ac3db9d4725e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 417541,
        "upload_time": "2023-03-07T13:56:28",
        "upload_time_iso_8601": "2023-03-07T13:56:28.066105Z",
        "url": "https://files.pythonhosted.org/packages/be/6a/884b28b295eeb3c467219064d482a9cffb42404bdfc5ac66efef12fb997f/aduneoclientfedid-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14334fa60d843f64d3c52a5b5a04801e007ee03d7839d39519f2a906a21b5873",
        "md5": "6f63a0d8b9080ae316773d875736b82e",
        "sha256": "3483424beb6d681711a0376632386feed3f6a13e78f2f7b5509ed3467e0a9b3b"
      },
      "downloads": -1,
      "filename": "aduneoclientfedid-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f63a0d8b9080ae316773d875736b82e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 432265,
      "upload_time": "2023-03-07T13:56:26",
      "upload_time_iso_8601": "2023-03-07T13:56:26.406649Z",
      "url": "https://files.pythonhosted.org/packages/14/33/4fa60d843f64d3c52a5b5a04801e007ee03d7839d39519f2a906a21b5873/aduneoclientfedid-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be6a884b28b295eeb3c467219064d482a9cffb42404bdfc5ac66efef12fb997f",
        "md5": "62e89bbe5f2d279f1434ac3db9d4725e",
        "sha256": "ba6345ef86e05e45a1064ecc8c0a7eef9015f7cff0af4a5bf0143198259af3f5"
      },
      "downloads": -1,
      "filename": "aduneoclientfedid-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "62e89bbe5f2d279f1434ac3db9d4725e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 417541,
      "upload_time": "2023-03-07T13:56:28",
      "upload_time_iso_8601": "2023-03-07T13:56:28.066105Z",
      "url": "https://files.pythonhosted.org/packages/be/6a/884b28b295eeb3c467219064d482a9cffb42404bdfc5ac66efef12fb997f/aduneoclientfedid-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}