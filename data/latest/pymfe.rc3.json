{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "[![Build Status](https://travis-ci.org/ealcobaca/pymfe.svg?branch=master)](https://travis-ci.org/ealcobaca/pymfe)\n[![codecov](https://codecov.io/gh/ealcobaca/pymfe/branch/master/graph/badge.svg)](https://codecov.io/gh/ealcobaca/pymfe)\n[![Documentation Status](https://readthedocs.org/projects/pymfe/badge/?version=latest)](https://pymfe.readthedocs.io/en/latest/?badge=latest)\n[![PythonVersion](https://img.shields.io/pypi/pyversions/pymfe.svg)](https://www.python.org/downloads/release/python-370/)\n[![Pypi](https://badge.fury.io/py/pymfe.svg)](https://badge.fury.io/py/pymfe)\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# pymfe: Python Meta-Feature Extractor\nThe pymfe (**py**thon **m**eta-**f**eature **e**xtractor) provides a\ncomprehensive set of meta-features implemented in python. The package brings\ncutting edge meta-features, following recent literature propose. The pymfe\narchitecture was thought to systematically make the extraction, which can\nproduce a robust set of meta-features. Moreover, pymfe follows recent\nmeta-feature formalization aiming to make MtL reproducible.\n\nHere,  you can use different measures and summary functions, setting their\nhyperparameters, and also measuring automatically the elapsed time. Moreover,\nyou can extract meta-features from specific models, or even extract\nmeta-features with confidence intervals using bootstrap. There are a lot of\nother interesting features and you can see more about it looking at the\ndocumentation.\n\n\n## Meta-feature\n\nIn the Meta-learning (MtL) literature, meta-features are measures used to\ncharacterize data sets and/or their relations with algorithm bias.\n\n> \"Meta-learning is the study of principled methods that exploit meta-knowledge to obtain efficient models and solutions by adapting the machine learning and data mining process.\" - ([Brazdil et al. (2008)](https://www.springer.com/gp/book/9783540732624))\n\nMeta-features are used in MtL and AutoML tasks in general, to\nrepresent/understand a dataset,  to understanding a learning bias, to create\nmachine learning (or data mining) recommendations systems, and to create\nsurrogates models, to name a few.\n\n[Pinto et al. (2016)](https://link.springer.com/chapter/10.1007/978-3-319-31753-3_18) and\n[Rivolli et al. (2018)](https://arxiv.org/abs/1808.10406v2) defined a meta-feature as\nfollows. Let $D \\in \\mathcal{D}$ be a dataset, $m\\colon \\mathcal{D} \\to \\mathbb{R}^{k'}$\nbe a characterization measure, and $\\sigma\\colon \\mathbb{R}^{k'} \\to \\mathbb{R}^{k}$\nbe a summarization function. Both $m$ and $\\sigma$ have also hyperparameters associated,\n$h_m$ and $h_\\sigma$ respectively. Thus, a meta-feature $f\\colon \\mathcal{D} \\to \\mathbb{R}^{k}$\nfor a given dataset $D$ is\n\n$$\n    f\\big(D\\big) = \\sigma\\big(m(D,h_m), h_\\sigma\\big).\n$$\n\nThe measure $m$ can extract more than one value from each data set, i.e.,\n$k'$ can vary according to $D$, which can be mapped to a vector of fixed length\n$k$ using a summarization function $\\sigma$.\n\nIn this package, We provided the following meta-features groups:\n- **General**: General information related to the dataset, also known as simple\n  measures, such as the number of instances, attributes and classes;\n- **Statistical**: Standard statistical measures to describe the numerical\n  properties of data distribution;\n- **Information-theoretic**: Particularly appropriate to describe discrete\n  (categorical) attributes and their relationship with the classes;\n- **Model-based**: Measures designed to extract characteristics from simple\n  machine learning models;\n- **Landmarking**: Performance of simple and efficient learning algorithms.\n  - **Relative Landmarking**: Relative performance of simple and efficient\n    learning algorithms;\n  - **Subsampling Landmarking**: Performance of simple and efficient learning\n    algorithms from a subsample of the dataset;\n- **Clustering**: Clustering measures extract information about dataset based\n  on external validation indexes;\n- **Concept**: Estimate the variability of class labels among examples and the\n  examples density;\n- **Itemset**: Compute the correlation between binary attributes; and\n- **Complexity**: Estimate the difficulty in separating the data points into\n  their expected classes.\n\nIn the pymfe package, you can use different measures and summary functions,\nsetting their hyperparameters, and automatically measure the elapsed time.\nMoreover,  you can extract meta-features from specific models, or even obtain\nmeta-features with confidence intervals using bootstrap.\nThere are many other exciting features. You can see more about it looking at\nthe [documentation](https://pymfe.readthedocs.io/en/latest/api.html).\n\n## Dependencies\n\nThe main `pymfe` requirement is:\n* Python (>= 3.6)\n\n## Installation\n\nThe installation process is similar to other packages available on pip:\n\n```bash\npip install -U pymfe\n```\n\nIt is possible to install the development version using:\n\n```bash\npip install -U git+https://github.com/ealcobaca/pymfe\n```\n\nor\n\n```bash\ngit clone https://github.com/ealcobaca/pymfe.git\ncd pymfe\npython setup.py install\n```\n\n## Example of use\n\nThe simplest way to extract meta-features is by instantiating the `MFE` class.\nIt computes five meta-features groups by default using mean and standard\ndeviation as summary functions:  General, Statistical, Information-theoretic,\nModel-based, and Landmarking. The `fit` method can be called by passing the `X`\nand `y`. Then the `extract` method is used to extract the related measures.\nA simple example using `pymfe` for supervised tasks is given next:\n\n```python\n# Load a dataset\nfrom sklearn.datasets import load_iris\nfrom pymfe.mfe import MFE\n\ndata = load_iris()\ny = data.target\nX = data.data\n\n# Extract default measures\nmfe = MFE()\nmfe.fit(X, y)\nft = mfe.extract()\nprint(ft)\n\n# Extract general, statistical and information-theoretic measures\nmfe = MFE(groups=[\"general\", \"statistical\", \"info-theory\"])\nmfe.fit(X, y)\nft = mfe.extract()\nprint(ft)\n\n# Extract all available measures\nmfe = MFE(groups=\"all\")\nmfe.fit(X, y)\nft = mfe.extract()\nprint(ft)\n```\n\nYou can simply omit the target attribute for unsupervised tasks while fitting\nthe data into the `MFE` model. The `pymfe` package automatically finds and\nextracts only the metafeatures suitable for this type of task. Examples are\ngiven next:\n\n```python\n# Load a dataset\nfrom sklearn.datasets import load_iris\nfrom pymfe.mfe import MFE\n\ndata = load_iris()\ny = data.target\nX = data.data\n\n# Extract default unsupervised measures\nmfe = MFE()\nmfe.fit(X)\nft = mfe.extract()\nprint(ft)\n\n# Extract all available unsupervised measures\nmfe = MFE(groups=\"all\")\nmfe.fit(X)\nft = mfe.extract()\nprint(ft)\n```\n\nSeveral measures return more than one value. To aggregate the returned values,\nsummarization function can be used. This method can compute `min`, `max`,\n`mean`, `median`, `kurtosis`, `standard deviation`, among others. The default\nmethods are the `mean` and the `sd`. Next, it is possible to see an example of\nthe use of this method:\n\n```python\n## Extract default measures using min, median and max \nmfe = MFE(summary=[\"min\", \"median\", \"max\"])\nmfe.fit(X, y)\nft = mfe.extract()\nprint(ft)\n                          \n## Extract default measures using quantile\nmfe = MFE(summary=[\"quantiles\"])\nmfe.fit(X, y)\nft = mfe.extract()\nprint(ft)\n```\n\nYou can easily list all available metafeature groups, metafeatures, summary\nmethods and metafeatures filtered by groups of interest:\n```python\nfrom pymfe.mfe import MFE\n\n# Check all available meta-feature groups in the package\nprint(MFE.valid_groups())\n\n# Check all available meta-features in the package\nprint(MFE.valid_metafeatures())\n\n# Check available meta-features filtering by groups of interest\nprint(MFE.valid_metafeatures(groups=[\"general\", \"statistical\", \"info-theory\"]))\n\n# Check all available summary functions in the package\nprint(MFE.valid_summary())\n```\n\nIt is possible to pass custom arguments to every metafeature using `MFE`\n`extract` method kwargs. The keywords must be the target metafeature name, and\nthe value must be a dictionary in the format {`argument`: `value`}, i.e., each\nkey in the dictionary is a target argument with its respective value. In the\nexample below, the extraction of metafeatures `min` and `max`  happens as\nusual, but the metafeatures `sd,` `nr_norm` and `nr_cor_attr` will receive user\ncustom argument values, which will interfere in each metafeature result.\n\n```python\n# Extract measures with custom user arguments\nmfe = MFE(features=[\"sd\", \"nr_norm\", \"nr_cor_attr\", \"min\", \"max\"])\nmfe.fit(X, y)\nft = mfe.extract(\n    sd={\"ddof\": 0},\n    nr_norm={\"method\": \"all\", \"failure\": \"hard\", \"threshold\": 0.025},\n    nr_cor_attr={\"threshold\": 0.6},\n)\nprint(ft)\n```\n\nIf you want to extract metafeatures from a pre-fitted machine learning model\n(from `sklearn package`), you can use the `extract_from_model` method without\nneeding to use the training data:\n\n```python\nimport sklearn.tree\nfrom sklearn.datasets import load_iris\nfrom pymfe.mfe import MFE\n\n# Extract from model\niris = load_iris()\nmodel = sklearn.tree.DecisionTreeClassifier().fit(iris.data, iris.target)\nextractor = MFE()\nft = extractor.extract_from_model(model)\nprint(ft)\n\n# Extract specific metafeatures from model\nextractor = MFE(features=[\"tree_shape\", \"nodes_repeated\"], summary=\"histogram\")\n\nft = extractor.extract_from_model(\n    model,\n    arguments_fit={\"verbose\": 1},\n    arguments_extract={\"verbose\": 1, \"histogram\": {\"bins\": 5}})\n\nprint(ft)\n```\n\nYou can also extract your metafeatures with confidence intervals using\nbootstrap. Keep in mind that this method extracts each metafeature several\ntimes, and may be very expensive depending mainly on your data and the number\nof metafeature extract methods called.\n\n```python\n# Extract metafeatures with confidence interval\nmfe = MFE(features=[\"mean\", \"nr_cor_attr\", \"sd\", \"max\"])\nmfe.fit(X, y)\n\nft = mfe.extract_with_confidence(\n    sample_num=256,\n    confidence=0.99,\n    verbose=1,\n)\n\nprint(ft)\n```\n\n## Documentation\nWe write a great [Documentation](https://pymfe.readthedocs.io/en/latest/?badge=latest)\nto guide you on how to use the pymfe library.\nYou can find in the documentation interesting pages like:\n* [Getting started](https://pymfe.readthedocs.io/en/latest/install.html)\n* [API documentation](https://pymfe.readthedocs.io/en/latest/api.html)\n* [Examples](https://pymfe.readthedocs.io/en/latest/auto_examples/index.html)\n* [News about pymfe](https://pymfe.readthedocs.io/en/latest/new.html)\n\n## Developer notes\n\n* We are glad to accept any contributions, please check\n  [Contributing](https://github.com/ealcobaca/pymfe/blob/master/CONTRIBUTING.md)\n  and the [Documentation](https://pymfe.readthedocs.io/en/latest/?badge=latest).\n* To submit bugs and feature requests, report at\n  [project issues](https://github.com/ealcobaca/pymfe/issues).\n\n## License\n\nThis project is licensed under the MIT License - see the\n[License](https://github.com/ealcobaca/pymfe/blob/master/LICENCE) file for\ndetails.\n\n## Cite Us\n\nIf you use the `pymfe` in scientific publication, we would appreciate citations\nto the following paper:\n\n[Edesio Alcobaça, Felipe Siqueira, Adriano Rivolli, Luís P. F. Garcia,\nJefferson T. Oliva, & André C. P. L. F. de Carvalho (2020).\nMFE: Towards reproducible meta-feature extraction.\nJournal of Machine Learning Research, 21(111), 1-5.](http://jmlr.org/papers/v21/19-348.html)\n\nYou can also use the bibtex format:\n```bibtex\n@article{JMLR:v21:19-348,\n  author  = {Edesio Alcobaça and\n             Felipe Siqueira and\n             Adriano Rivolli and\n             Luís P. F. Garcia and\n             Jefferson T. Oliva and\n             André C. P. L. F. de Carvalho\n  },\n  title   = {MFE: Towards reproducible meta-feature extraction},\n  journal = {Journal of Machine Learning Research},\n  year    = {2020},\n  volume  = {21},\n  number  = {111},\n  pages   = {1-5},\n  url     = {http://jmlr.org/papers/v21/19-348.html}\n}\n```\n\n## Acknowledgments\nWe would like to thank every\n[Contributor](https://github.com/ealcobaca/pymfe/graphs/contributors)\nthat directly or indirectly has make this project to happen. Thank you all.\n\n## References\n1. [Brazdil, P., Carrier, C. G., Soares, C., & Vilalta, R. (2008). Metalearning:\nApplications to data mining. Springer Science\nand Business Media.](https://www.springer.com/gp/book/9783540732624)\n2. [Pinto, F., Soares, C., & Mendes-Moreira, J. (2016, April). Towards automatic\ngeneration of metafeatures. In Pacific-Asia Conference on Knowledge Discovery\nand Data Mining (pp. 215-226). Springer,\nCham.](https://link.springer.com/chapter/10.1007/978-3-319-31753-3_18)\n3. [Rivolli, A., Garcia, L. P. F., Soares, C., Vanschoren, J., and de Carvalho,\nA. C. P. L. F. (2018). Characterizing classification datasets: a study of\nmeta-features for meta-learning.\narXiv:1808.10406.](https://arxiv.org/abs/1808.10406v2)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ealcobaca/pymfe/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ealcobaca/pymfe",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Edesio Alcobaça, Felipe Alves Siqueira",
    "maintainer_email": "edesio@usp.br, felipe.siqueira@usp.br",
    "name": "pymfe",
    "package_url": "https://pypi.org/project/pymfe/",
    "platform": null,
    "project_url": "https://pypi.org/project/pymfe/",
    "project_urls": {
      "Download": "https://github.com/ealcobaca/pymfe/releases",
      "Homepage": "https://github.com/ealcobaca/pymfe"
    },
    "release_url": "https://pypi.org/project/pymfe/0.4.2/",
    "requires_dist": [
      "numpy",
      "scipy",
      "scikit-learn",
      "patsy",
      "pandas",
      "statsmodels",
      "texttable",
      "tqdm",
      "igraph (>=0.10.1)",
      "gower",
      "pytest ; extra == 'code-check'",
      "mypy ; extra == 'code-check'",
      "liac-arff ; extra == 'code-check'",
      "flake8 ; extra == 'code-check'",
      "pylint ; extra == 'code-check'",
      "sphinx ; extra == 'docs'",
      "sphinx-gallery ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "numpydoc ; extra == 'docs'",
      "liac-arff ; extra == 'docs'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "pytest-xdist ; extra == 'tests'",
      "liac-arff ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Meta-feature Extractor",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15791801,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5d857f2188b8bb8eb9badd5c141e0df4a2d53f4ff69544cbce08691e2d91800",
          "md5": "3b0a2eca0ce9050f7daa9d38bcad941f",
          "sha256": "f13caebc39d72b6b5a5fc8a389985d0e7424c267d652fd98941307ffa149d919"
        },
        "downloads": -1,
        "filename": "pymfe-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b0a2eca0ce9050f7daa9d38bcad941f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 151168,
        "upload_time": "2020-07-07T01:30:41",
        "upload_time_iso_8601": "2020-07-07T01:30:41.036454Z",
        "url": "https://files.pythonhosted.org/packages/c5/d8/57f2188b8bb8eb9badd5c141e0df4a2d53f4ff69544cbce08691e2d91800/pymfe-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6511696920d06e3f07115653d6a13494a6ad6e74bccb533ea8a1f1a5885601e1",
          "md5": "a59185ac73a8bec99c0e8ebd0c2beb7e",
          "sha256": "814481c5081933928e8b1fef035f20b54678c59b45eb72d6c5ad71ccf3b2136a"
        },
        "downloads": -1,
        "filename": "pymfe-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a59185ac73a8bec99c0e8ebd0c2beb7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 132437,
        "upload_time": "2020-07-07T01:30:42",
        "upload_time_iso_8601": "2020-07-07T01:30:42.981610Z",
        "url": "https://files.pythonhosted.org/packages/65/11/696920d06e3f07115653d6a13494a6ad6e74bccb533ea8a1f1a5885601e1/pymfe-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85d39997147dbc237e1c33773058deeb17c2adaa8913d27bbac863874ded0ae4",
          "md5": "1b4d7cf8531ad8595e9d2ed4c629bfb4",
          "sha256": "237befec88552b647bdd0eaffc57fe6bad02a1239f9ca5923472efeb384b81af"
        },
        "downloads": -1,
        "filename": "pymfe-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b4d7cf8531ad8595e9d2ed4c629bfb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 154230,
        "upload_time": "2021-03-19T00:56:01",
        "upload_time_iso_8601": "2021-03-19T00:56:01.754736Z",
        "url": "https://files.pythonhosted.org/packages/85/d3/9997147dbc237e1c33773058deeb17c2adaa8913d27bbac863874ded0ae4/pymfe-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16258668996da38a9bfc05d4b67a4af02c1375691dd5fdddfdd8f829606753ed",
          "md5": "7fecd736d54089c44002f8047800eeb3",
          "sha256": "8c3590da177273602d900781b0f11c0fb035698db66ee008e1107af6291b4333"
        },
        "downloads": -1,
        "filename": "pymfe-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7fecd736d54089c44002f8047800eeb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 137058,
        "upload_time": "2021-03-19T00:56:04",
        "upload_time_iso_8601": "2021-03-19T00:56:04.179661Z",
        "url": "https://files.pythonhosted.org/packages/16/25/8668996da38a9bfc05d4b67a4af02c1375691dd5fdddfdd8f829606753ed/pymfe-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6b16b485b0f00684adf4bd4ff138cf67c0184cdcc6bcbec81434255881c49f4",
          "md5": "54d5baade7c424e0fdc0be32049a6956",
          "sha256": "89e2e38386e65ccad69a0ef77cb67eced035cb51d54c0ca944e8770a9309c178"
        },
        "downloads": -1,
        "filename": "pymfe-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54d5baade7c424e0fdc0be32049a6956",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 155682,
        "upload_time": "2022-11-16T17:44:39",
        "upload_time_iso_8601": "2022-11-16T17:44:39.992501Z",
        "url": "https://files.pythonhosted.org/packages/e6/b1/6b485b0f00684adf4bd4ff138cf67c0184cdcc6bcbec81434255881c49f4/pymfe-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea07fd31135a5cb8e8ccf165dca5d42cfbe9576c2ed81aa61525a239ddcb7189",
          "md5": "e553997f25a9d44186d3d845b03dfef1",
          "sha256": "6241f692d81b18239978c72ac994bb96e9b60b0f6fc9b7e7df98fa116dcbff30"
        },
        "downloads": -1,
        "filename": "pymfe-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e553997f25a9d44186d3d845b03dfef1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 136138,
        "upload_time": "2022-11-16T17:44:43",
        "upload_time_iso_8601": "2022-11-16T17:44:43.322343Z",
        "url": "https://files.pythonhosted.org/packages/ea/07/fd31135a5cb8e8ccf165dca5d42cfbe9576c2ed81aa61525a239ddcb7189/pymfe-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6b16b485b0f00684adf4bd4ff138cf67c0184cdcc6bcbec81434255881c49f4",
        "md5": "54d5baade7c424e0fdc0be32049a6956",
        "sha256": "89e2e38386e65ccad69a0ef77cb67eced035cb51d54c0ca944e8770a9309c178"
      },
      "downloads": -1,
      "filename": "pymfe-0.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "54d5baade7c424e0fdc0be32049a6956",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 155682,
      "upload_time": "2022-11-16T17:44:39",
      "upload_time_iso_8601": "2022-11-16T17:44:39.992501Z",
      "url": "https://files.pythonhosted.org/packages/e6/b1/6b485b0f00684adf4bd4ff138cf67c0184cdcc6bcbec81434255881c49f4/pymfe-0.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea07fd31135a5cb8e8ccf165dca5d42cfbe9576c2ed81aa61525a239ddcb7189",
        "md5": "e553997f25a9d44186d3d845b03dfef1",
        "sha256": "6241f692d81b18239978c72ac994bb96e9b60b0f6fc9b7e7df98fa116dcbff30"
      },
      "downloads": -1,
      "filename": "pymfe-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e553997f25a9d44186d3d845b03dfef1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 136138,
      "upload_time": "2022-11-16T17:44:43",
      "upload_time_iso_8601": "2022-11-16T17:44:43.322343Z",
      "url": "https://files.pythonhosted.org/packages/ea/07/fd31135a5cb8e8ccf165dca5d42cfbe9576c2ed81aa61525a239ddcb7189/pymfe-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}