{
  "info": {
    "author": "",
    "author_email": "Jeyabalaji Subramanian <jeyabalaji.subramanian@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# simple-rule-engine\n\nA __lightweight__ yet __powerful__ rule engine that allows declarative specification of business rules and **saves tons of repeated development work**.\n\n- This library has been utilized in authoring & evaluation of a number of complex credit decisioning, upgrade/downgrade, and lender evaulation criteria rules at [FundsCorner](https://medium.com/fundscornertech)\n- This library can also be considered as a _Policy Framework_ for validating IaC (Infrastructure as Code).\n\n[![CodeFactor](https://www.codefactor.io/repository/github/jeyabalajis/simple-rule-engine/badge)](https://www.codefactor.io/repository/github/jeyabalajis/simple-rule-engine)\n[![CircleCI](https://dl.circleci.com/status-badge/img/gh/jeyabalajis/simple-rule-engine/tree/main.svg?style=shield)](https://dl.circleci.com/status-badge/redirect/gh/jeyabalajis/simple-rule-engine/tree/main)\n\n## At a glance\n\nsimple-rule-engine is a Python library that enables declarative specification of decision or scoring rules.\n\n### Example Decision matrix\n\n| Bureau Score | Marital Status | Decision\n| :----------: | :----------------: | --------:|\n| between 650 and 800        | in [Married, Unspecified]                | GO |\n\n### Rule specification\n\n```python\nfrom simpleruleengine.conditional.when_all import WhenAll\nfrom simpleruleengine.expression.expression import Expression\nfrom simpleruleengine.operator.between import Between\nfrom simpleruleengine.operator.string_in import In\nfrom simpleruleengine.rulerow.rule_row_decision import RuleRowDecision\nfrom simpleruleengine.ruleset.rule_set_decision import RuleSetDecision\nfrom simpleruleengine.token.numeric_token import NumericToken\nfrom simpleruleengine.token.string_token import StringToken\n\nif __name__ == \"__main__\":\n    cibil_score_between_650_800 = Expression(\n        NumericToken(\"cibil_score\"),\n        Between(floor=650, ceiling=800)\n    )\n    marital_status_in_married_unspecified = Expression(\n        StringToken(\"marital_status\"),\n        In(\"Married\", \"Unspecified\")\n    )\n\n    rule_row_decision_go = RuleRowDecision(\n        WhenAll(\n            cibil_score_between_650_800,\n            marital_status_in_married_unspecified\n        ),\n        \"GO\"\n    )\n    rule_set_decision = RuleSetDecision(rule_row_decision_go)\n\n    fact = dict(\n        cibil_score=700,\n        marital_status=\"Married\"\n    )\n    assert rule_set_decision.evaluate(fact) == \"GO\"\n```\n\n## Key Features\n1. Ability to __declaratively__ author both Scoring and Decision Rules. \n2. The library offers composable functional syntax that can be extended with various format adapters. See [here](https://github.com/jeyabalajis/simple-serverless-rule-engine) for an example of such an extension. \n2. Ability to __version control__ rule declarations thus enabling auditing of rule changes over a period of time.\n3. Ability to author **_chained rules_**. Evaluation of one rule can refer to the result of another rule, thus enabling \nmodular, hierarchical rules.\n\n## Installation\n\n[pypi repository](https://pypi.org/project/simpleruleengine/2.0.2/)\n\n```commandline\npip install simpleruleengine==2.0.2\n```\n\n## Source Code\n\n[simple-rule-engine GitHub Repository](https://github.com/jeyabalajis/simple-rule-engine)\n\n# Table of Contents\n- [Why Rule Engine](#why-rule-engine)\n- [Concepts](#concepts)\n- [Grammar](#grammar)\n- [Examples](#examples)\n\n# Why Rule Engine?\n\nDecision making has always been at the heart of any business. In certain industries (such as Lending), some of the decisions made are so dynamic & at a flux that programming these decisions by hand is counter-productive. See [here](https://martinfowler.com/bliki/RulesEngine.html) for additional context.\n\nTake the example of the decision of giving someone a loan. It primarily involves ascertaining two fundamental factors:\n- Ability to repay the loan.\n- Intent to repay the loan.\n\nWhen you start assessing a borrower based on above, you typically get all facts required to make a decision (such as Bureau score, bank statements etc.) and you will pass these facts through a decision matrix to arrive at \n- A composite score on a scale that gives an indication of _whether the borrower will repay the loan_ (**intent**)\n- A recommendation of _how much loan_ should be given to the borrower. (**ability**)\n\nThe aforementioned decisions involve evaluation of multiple parameters. You simply cannot write a program to solve such complex scoring or decision problems:\n - The evaluations and/or scores will _always_ change over a period of time to adjust to business needs \n- The _rules_ will also change based on the nature of the business product.\n\n> The simple-rule-engine solves such dynamic decision making problems by abstracting the scoring or decision making into a _framework_ and providing a standard rule template to author the rules. \n\n> The rules can be authored through a separate UI and stored as rule template in a database. The rule engine then _can be treated as a service_ and just by passing all the facts (a.k.a inputs), we get the the corresponding decisions or scores (output). \n\n> The caller of the rule engine is agnostic of the business logic behind rule evaluation.\n\n## Benefits\n\n- Declarative authoring of rules. This can be done by a business analyst, and can be facilitated through a UI. \n- Once composed, rules can be serialized as a json and persisted into database for repeated use.\n- The developer just focuses on extracting the facts that are required to be passed into the engine.\n- Ability to version a rule and audit rule changes over a period of time.\n- Segregate business logic from the data.\n\n# Concepts\n\nThe simple-rule-engine is composed of two parts:\n\n- A Rule template which enables one to declaratively specify a rule, which can either be a Decision (or) a Score. The rule template is uniquely identified by a name.\n- A parser engine which when passed with a rule name & facts, parses the rule template against the facts given and provides an output. The output can either be a score (numeric) or a decision (anything).\n\nThe simple-rule-engine allows the rules to be _“chained”_. I.e. you can build a small portion of the score as an independent rule and _“use”_ this rule in another rule. \n\n## Rule Declaration Language \n\n- At the heart of simple-rule-engine is the rule declaration language. \n- The rule declaration language supports two types of rules: Decision rule or a Score rule.  \n\n### Score rule:\n\n- A Score rule is composed of one or many rule sets. \n- Each rule-set computes a sub-score and is applied a weight. \n- The total score then would be the sum of all the individual scores of all the rule sets belonging to a rule.\n- A rule set is composed of one or many rule rows. \n- You can ‘roughly’ think of each Rule Row as a Conditional evaluation of the facts (a.k.a antecedent) & a score based on these conditions (a.k.a consequent).\n \n![image](https://user-images.githubusercontent.com/15995686/193492161-71f5faf5-e206-4543-a005-7681b79fe689.png)\n\n### Decision rule:\n\n- A Decision rule is always composed of only one rule set.\n- A rule set is composed of one or many rule rows. \n- You can ‘roughly’ think of each Rule Row as a Conditional evaluation of the facts (a.k.a antecedent) & a decision based on these conditions (a.k.a consequent).\n- A decision rule always arrives at a single decision at the end of parsing.\n- The decision can be anything (a numeric, a string such as YES/NO or even a JSON)\n- Once a Rule Row evaluates to True, the corresponding decision is returned immediately. \n\n![image](https://user-images.githubusercontent.com/15995686/193492209-52bfa8fa-eb27-4805-bf95-cc7723b26a51.png)\n\n### Antecedent and Consequent\n\n- An antecedent at the core is an evaluator. It evaluates one or many facts through an operator.\n- For evaluating numeric facts, a numeric operator is used. It can be one of (<=, <, >, >=, ==, <>, between, is_none)\n- For evaluating string facts, a string operator is used. It can be one of (in_list, contains, is_none, equals)\n- You can mix evaluation of more than one fact & combine the result with an “and” or “or” condition.\n- You can perform complex evaluations involving multiple facts combining AND and OR conditions recursively in the antecedent. See [Examples](#examples).\n- A rule can be part of another rule. See [Examples](#examples) \n\n# Grammar\n\n## Token: \n\nAn entity that is representative of a fact, and also guides clients on the data type of fact to be supplied.\n\nTypes of Tokens:\n- NumericToken\n- StringToken\n- BooleanToken\n- RuleToken: A rule itself, composed as a Token\n\nExample: \n- ```StringToken(\"pet\")``` represents a token _pet_ of type String.\n- ```NumericToken(\"age\")``` represents a token _age_ of type Numeric.\n\n> A rule can be a Token too. A RuleToken implements Token and composes a Rule. When asked for value, a RuleToken executes the rule it composes and provides the value.  \n## Operator: \n\nAn Operator composes a base value and evaluates against a value supplied. \n\nExample: ```Gte(35).evaulate(15)``` returns False. ```Gte(35.0).evaulate(40.0)``` returns True.\n\n## Expression:\n\nAn Expression composes a Token on the left hand side (LHS), Operator in the middle and the data to be evaulated on the right hand side (RHS).\n\nExample: \n```Expression(NumericToken(\"cibil_score\"), Between(floor=650, ceiling=800))``` represents an evaulation that compares whether the fact _cibil_score_ is between 650 and 800 or not. Specified in SQL terms, this translates to ```WHERE cibil_score between 650 and 800```.\n\n```Expression(NumericToken(\"cibil_score\"), Between(floor=650, ceiling=800)).evaluate(dict(cibil_score=700))``` evaluates to True.\n\n## Conditional: \n\n- A Conditional composes a list of Expressions. \n- WhenAll evaluates to True when _all_ expressions evaluate to True. \n- WhenAny evaluates to True when _any_ expression evaluates to True. \n- A Conditional can compose a Conditional - this enables clients to express complex conditions. \n- A Conditional can be further extended to implement NotWhenAll or NotWhenAny etc. as well.\n\nExample: \n```python\ncibil_score_between_650_800 = Expression(NumericToken(\"cibil_score\"), Between(floor=650, ceiling=800))\nmarital_status_in_married_unspecified = Expression(StringToken(\"marital_status\"), In(\"Married\", \"Unspecified\"))\nbusiness_owned_by_self_family = Expression(StringToken(\"business_ownership\"), In(\"Owned by Self\", \"Owned by Family\"))\n\nWhenAll(\n    cibil_score_between_650_800,\n    marital_status_in_married_unspecified,\n    business_owned_by_self_family\n)\n\n# A Conditional composing another Conditional. The below statement is equivalent of \n# WHERE applicant_age >= 35 AND ( business_ownership in ('SELF', 'FAMILY') OR applicant_ownership in ('SELF', 'FAMILY') )\nWhenAll(\n    applicant_age_gte_35,\n    WhenAny(\n        business_owned_by_self_family,\n        applicant_owned_by_self_family\n    )\n),\n```\n\n## RuleRowDecision/RuleRowScore: \n\n- A RuleRow composes a Conditional (as an antecedent) and specifies a consequent (result) when antecedent evaluates to True. \n- For a Score, consequent must be a float. \n- For a Decision, consequent can be anything.\n\n## RuleSetDecision/RuleSetScore: \n\n- A Rule Set composes a set of RuleRows. \n- For a score, each rule set carries a _weight_ and the total weight of all rule sets must be equal to 1.\n- For a decision, there must be only one rule set.\n\n## RuleDecision/RuleScore: \n\n- A rule composes one or many Rule sets.\n- For a score, the total score is calculated as sum(rule set score * weight).\n- A rule exposes `get_token_dict_structure` function that returns a dictionary of all facts required for the rule to be executed successfully.\n\n# Examples\n\n## A simple decision tree involving facts\n\n### Decision matrix\n\n| Bureau Score | Marital Status | Business Ownership | Decision\n| :----------: | :----------------: | :----------------: | --------:|\n| between 650 and 800        | in [Married, Unspecified]                | in [Owned by Self, Owned by Family] | GO       |\n\n### Rule specification\n```python\nfrom simpleruleengine.conditional.when_all import WhenAll\nfrom simpleruleengine.expression.expression import Expression\nfrom simpleruleengine.operator.between import Between\nfrom simpleruleengine.operator.string_in import In\nfrom simpleruleengine.rulerow.rule_row_decision import RuleRowDecision\nfrom simpleruleengine.ruleset.rule_set_decision import RuleSetDecision\nfrom simpleruleengine.token.numeric_token import NumericToken\nfrom simpleruleengine.token.string_token import StringToken\n\nif __name__ == \"__main__\":\n    cibil_score_between_650_800 = Expression(\n        NumericToken(\"cibil_score\"),\n        Between(floor=650, ceiling=800)\n    )\n    marital_status_in_married_unspecified = Expression(\n        StringToken(\"marital_status\"),\n        In(\"Married\", \"Unspecified\")\n    )\n    business_owned_by_self_family = Expression(\n        StringToken(\"business_ownership\"),\n        In(\"Owned by Self\", \"Owned by Family\")\n    )\n\n    rule_row_decision_go = RuleRowDecision(\n        WhenAll(\n            cibil_score_between_650_800,\n            marital_status_in_married_unspecified,\n            business_owned_by_self_family\n        ),\n        \"GO\"\n    )\n    rule_set_decision = RuleSetDecision(rule_row_decision_go)\n\n    fact = dict(\n        cibil_score=700,\n        marital_status=\"Married\",\n        business_ownership=\"Owned by Self\"\n    )\n    assert rule_set_decision.evaluate(fact) == \"GO\"\n```\n\n## A complex decision tree involving multiple AND  and OR conditions\n\n### Decision matrix\n\n| Applicant Age | Applicant Ownership| Business Ownership | Decision\n| :----------: | :----------------: | :----------------: | --------:|\n| >=35        | in [Owned by Self, Owned by Family]                | in [Owned by Self, Owned by Family] | GO       |\n| >=35        | in [Owned by Self, Owned by Family]                | in [Rented] | GO       |\n| >=35        | in [Rented]                | in [Owned by Self, Owned by Family] | GO       |\n| >=35        | in [Rented]                | in [Rented] | NO GO       |\n| <35        | in [Rented]                | in [Rented] | NO GO       |\n| <35        | in [Owned by Self, Owned by Family]                | in [Rented] | NO GO       |\n| <35        | in [Rented]                | in  [Owned by Self, Owned by Family] | NO GO       |\n| <35        | in [Owned by Self, Owned by Family]                | in [Owned by Self, Owned by Family] | GO       |\n\n\n- when the applicant age is >=35, either of applicant ownership or business ownership must be Owned.\n- When the applicant age is <35, both the applicant ownership and business ownership must be Owned.\n\n\n### Rule specification\n```python\nfrom simpleruleengine.conditional.when_all import WhenAll\nfrom simpleruleengine.conditional.when_any import WhenAny\nfrom simpleruleengine.expression.expression import Expression\nfrom simpleruleengine.operator.greater_than_equal import Gte\nfrom simpleruleengine.operator.string_in import In\nfrom simpleruleengine.rulerow.rule_row_decision import RuleRowDecision\nfrom simpleruleengine.ruleset.rule_set_decision import RuleSetDecision\nfrom simpleruleengine.token.numeric_token import NumericToken\nfrom simpleruleengine.token.string_token import StringToken\n\nif __name__ == \"__main__\":\n    applicant_age_gte_35 = Expression(\n        NumericToken(\"applicant_age\"),\n        Gte(35)\n    )\n    business_owned_by_self_family = Expression(\n        StringToken(\"business_ownership\"),\n        In(\"Owned by Self\", \"Owned by Family\")\n    )\n    applicant_owned_by_self_family = Expression(\n        StringToken(\"applicant_ownership\"),\n        In(\"Owned by Self\", \"Owned by Family\")\n    )\n\n    rule_row_decision_go = RuleRowDecision(\n        WhenAll(\n            applicant_age_gte_35,\n            WhenAny(\n                business_owned_by_self_family,\n                applicant_owned_by_self_family\n            )\n        ),\n        \"GO\"\n    )\n    rule_set_decision = RuleSetDecision(rule_row_decision_go)\n\n    fact_go = dict(\n        applicant_age=42,\n        applicant_ownership=\"Not Owned\",\n        business_ownership=\"Owned by Self\"\n    )\n    assert rule_set_decision.evaluate(fact_go) == \"GO\"\n\n    fact_no_go_1 = dict(\n        applicant_age=42,\n        applicant_ownership=\"Not Owned\",\n        business_ownership=\"Not Owned\"\n    )\n    assert rule_set_decision.evaluate(fact_no_go_1) != \"GO\"\n\n    fact_no_go_2 = dict(\n        applicant_age=25,\n        applicant_ownership=\"Owned by Self\",\n        business_ownership=\"Owned by Self\"\n    )\n    assert rule_set_decision.evaluate(fact_no_go_2) != \"GO\"\n```\n\n## A scoring rule involving multiple parameters\n|Rule set Name|Weightage|\n|:-----------:|:-------:|\n|no_of_running_bl_pl|0.5|\n|last_loan_drawn_in_months|0.5|\n\n### no_of_running_bl_pl\n|Condition|Score|\n|:-----------:|:-------:|\n|no_of_running_bl_pl >= 7 |-100|\n|no_of_running_bl_pl >= 4 |-40|\n|no_of_running_bl_pl >= 2 |30|\n|no_of_running_bl_pl >= 0 |100|\n|no_of_running_bl_pl is none |100|\n\n### last_loan_drawn_in_months\n|Condition|Score|\n|:-----------:|:-------:|\n|last_loan_drawn_in_months == 0 |30|\n|last_loan_drawn_in_months <3 |-30|\n|last_loan_drawn_in_months <= 12 |40|\n|last_loan_drawn_in_months >12 |100|\n|last_loan_drawn_in_months is none |100|\n\n### Rule Specification\n```python\nfrom simpleruleengine.conditional.when_all import WhenAll\nfrom simpleruleengine.operator.greater_than_equal import Gte\nfrom simpleruleengine.operator.greater_than import Gt\nfrom simpleruleengine.operator.equal import Eq\nfrom simpleruleengine.operator.less_than import Lt\nfrom simpleruleengine.operator.less_than_equal import Lte\nfrom simpleruleengine.rulerow.rule_row_score import RuleRowScore\nfrom simpleruleengine.ruleset.rule_set_score import RuleSetScore\nfrom simpleruleengine.rule.rule_score import RuleScore\nfrom simpleruleengine.token.numeric_token import NumericToken\nfrom simpleruleengine.expression.expression import Expression\n\nif __name__ == \"__main__\":\n    no_run_bl_pl_gte_7_score_minus_100 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"no_of_running_bl_pl\"), Gte(7))),\n        -100\n    )\n    no_run_bl_pl_gte_4_score_minus_40 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"no_of_running_bl_pl\"), Gte(4))),\n        -40\n    )\n    no_run_bl_pl_gte_2_score_30 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"no_of_running_bl_pl\"), Gte(2))),\n        30\n    )\n    no_run_bl_pl_gte_0_score_100 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"no_of_running_bl_pl\"), Gte(0))),\n        100\n    )\n\n    no_of_run_bl_pl_rule_set = RuleSetScore(\n        no_run_bl_pl_gte_7_score_minus_100,\n        no_run_bl_pl_gte_4_score_minus_40,\n        no_run_bl_pl_gte_2_score_30,\n        no_run_bl_pl_gte_0_score_100,\n        weight=0.5\n    )\n\n    fact_no_run_bl_pl_2 = dict(no_of_running_bl_pl=2)\n    assert no_of_run_bl_pl_rule_set.evaluate(fact_no_run_bl_pl_2) == 15.0\n\n    last_loan_drawn_in_months_eq_0_score_30 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"last_loan_drawn_in_months\"), Eq(0))),\n        30\n    )\n    last_loan_drawn_in_months_lt_3_score_minus_30 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"last_loan_drawn_in_months\"), Lt(3))),\n        -30\n    )\n    last_loan_drawn_in_months_lte_12_score_40 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"last_loan_drawn_in_months\"), Lte(12))),\n        40\n    )\n    last_loan_drawn_in_months_gt_12_score_100 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"last_loan_drawn_in_months\"), Gt(12))),\n        100\n    )\n\n    last_loan_drawn_in_months_rule_set = RuleSetScore(\n        last_loan_drawn_in_months_eq_0_score_30,\n        last_loan_drawn_in_months_lt_3_score_minus_30,\n        last_loan_drawn_in_months_lte_12_score_40,\n        last_loan_drawn_in_months_gt_12_score_100,\n        weight=0.5\n    )\n\n    fact_last_loan_drawn_in_months_lte_12 = dict(last_loan_drawn_in_months=6)\n    assert last_loan_drawn_in_months_rule_set.evaluate(\n        fact_last_loan_drawn_in_months_lte_12) == 20.0\n\n    fact_rule_score = dict(last_loan_drawn_in_months=6, no_of_running_bl_pl=2)\n    rule_score = RuleScore(\n        no_of_run_bl_pl_rule_set,\n        last_loan_drawn_in_months_rule_set\n    )\n    assert rule_score.execute(fact_rule_score) == 35.0\n\n    no_run_bl_pl_gte_7_score_minus_100 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"no_of_running_bl_pl\"), Gte(7))), -100)\n    no_run_bl_pl_gte_4_score_minus_40 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"no_of_running_bl_pl\"), Gte(4))), -40)\n    no_run_bl_pl_gte_2_score_30 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"no_of_running_bl_pl\"), Gte(2))), 30)\n    no_run_bl_pl_gte_0_score_100 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"no_of_running_bl_pl\"), Gte(0))), 100)\n\n    no_of_run_bl_pl_rule_set = RuleSetScore(\n        no_run_bl_pl_gte_7_score_minus_100,\n        no_run_bl_pl_gte_4_score_minus_40,\n        no_run_bl_pl_gte_2_score_30,\n        no_run_bl_pl_gte_0_score_100,\n        weight=0.5\n    )\n\n    fact_no_run_bl_pl_2 = dict(no_of_running_bl_pl=2)\n    assert no_of_run_bl_pl_rule_set.evaluate(fact_no_run_bl_pl_2) == 15.0\n\n    last_loan_drawn_in_months_eq_0_score_30 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"last_loan_drawn_in_months\"), Eq(0))),\n        30\n    )\n    last_loan_drawn_in_months_lt_3_score_minus_30 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"last_loan_drawn_in_months\"), Lt(3))),\n        -30\n    )\n    last_loan_drawn_in_months_lte_12_score_40 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"last_loan_drawn_in_months\"), Lte(12))),\n        40\n    )\n    last_loan_drawn_in_months_gt_12_score_100 = RuleRowScore(\n        WhenAll(Expression(NumericToken(\"last_loan_drawn_in_months\"), Gt(12))),\n        100\n    )\n\n    last_loan_drawn_in_months_rule_set = RuleSetScore(\n        last_loan_drawn_in_months_eq_0_score_30,\n        last_loan_drawn_in_months_lt_3_score_minus_30,\n        last_loan_drawn_in_months_lte_12_score_40,\n        last_loan_drawn_in_months_gt_12_score_100,\n        weight=0.5\n    )\n\n    fact_last_loan_drawn_in_months_lte_12 = dict(last_loan_drawn_in_months=6)\n    assert last_loan_drawn_in_months_rule_set.evaluate(\n        fact_last_loan_drawn_in_months_lte_12) == 20.0\n\n    fact_rule_score = dict(last_loan_drawn_in_months=6, no_of_running_bl_pl=2)\n    rule_score = RuleScore(\n        no_of_run_bl_pl_rule_set,\n        last_loan_drawn_in_months_rule_set\n    )\n    assert rule_score.execute(fact_rule_score) == 35.0\n```\n\n## A nested rule that involves another rule for evaulation\n\n### Rule\n\n- If cibil score is between 650 and 800, score is 100\n- If cibil score is less than 650, score is 0\n- Decide GO if pet in [dog, cat] and cibil score is greater than 0  \n\n### Rule Specification\n```python\nfrom simpleruleengine.conditional.when_all import WhenAll\nfrom simpleruleengine.expression.expression import Expression\nfrom simpleruleengine.operator.between import Between\nfrom simpleruleengine.operator.greater_than import Gt\nfrom simpleruleengine.operator.greater_than_equal import Gte\nfrom simpleruleengine.operator.string_in import In\nfrom simpleruleengine.operator.less_than_equal import Lte\nfrom simpleruleengine.operator.less_than import Lt\nfrom simpleruleengine.operator.string_not_in import NotIn\nfrom simpleruleengine.rulerow.rule_row_decision import RuleRowDecision\nfrom simpleruleengine.ruleset.rule_set_decision import RuleSetDecision\nfrom simpleruleengine.rulerow.rule_row_score import RuleRowScore\nfrom simpleruleengine.ruleset.rule_set_score import RuleSetScore\nfrom simpleruleengine.token.numeric_token import NumericToken\nfrom simpleruleengine.token.string_token import StringToken\nfrom simpleruleengine.token.rule_token import RuleToken\nfrom simpleruleengine.rule.rule_score import RuleScore\n\nif __name__ == \"__main__\":\n    cibil_score_between_650_800 = Expression(\n        NumericToken(\"cibil_score\"),\n        Between(floor=650, ceiling=800)\n    )\n\n    cibil_score_lt_650 = Expression(\n        NumericToken(\"cibil_score\"),\n        Lt(650)\n    )\n\n    rule_row_between_650_800 = RuleRowScore(\n        antecedent=WhenAll(cibil_score_between_650_800),\n        consequent=100\n    )\n\n    rule_row_between_lt_650 = RuleRowScore(\n        antecedent=WhenAll(cibil_score_lt_650),\n        consequent=0\n    )\n\n    rule_set_cibil_score = RuleSetScore(\n        rule_row_between_lt_650,\n        rule_row_between_650_800,\n        weight=1\n    )\n\n    rule_cibil_score = RuleScore(rule_set_cibil_score)\n\n    fact = dict(cibil_score=350)\n    assert rule_cibil_score.execute(fact) == 0\n\n    expression_pet_in_dog_cat = Expression(\n        StringToken(name=\"pet\"),\n        In(\"dog\", \"cat\")\n    )\n\n    expression_cibil_score_gt_0 = Expression(\n        RuleToken(name=\"cibil_rule\", rule=rule_cibil_score),\n        Gt(0)\n    )\n\n    when_all_cibil_and_pet = WhenAll(\n        expression_cibil_score_gt_0,\n        expression_pet_in_dog_cat\n    )\n\n    rule_row_go_cibil_and_pet = RuleRowDecision(\n        antecedent=when_all_cibil_and_pet,\n        consequent=\"GO\"\n    )\n\n    rule_set_decision_cibil_score_and_pet = RuleSetDecision(\n        rule_row_go_cibil_and_pet)\n\n    fact = dict(cibil_score=350, pet=\"dog\")\n    assert rule_set_decision_cibil_score_and_pet.evaluate(fact) != \"GO\"\n\n    fact = dict(cibil_score=725, pet=\"dog\")\n    assert rule_set_decision_cibil_score_and_pet.evaluate(fact) == \"GO\"\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simpleruleengine",
    "package_url": "https://pypi.org/project/simpleruleengine/",
    "platform": null,
    "project_url": "https://pypi.org/project/simpleruleengine/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jeyabalajis/simple-rule-engine/issues",
      "Homepage": "https://github.com/jeyabalajis/simple-rule-engine"
    },
    "release_url": "https://pypi.org/project/simpleruleengine/2.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A lightweight rule engine that allows declarative specification of business rules.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15612160,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f74fccdaa2b9f66755f74cf1983eac174ab56432fd0de6c0072add1568b04f9",
          "md5": "2aecb78b120bf80fb8c36516616152b3",
          "sha256": "698377b95622bdf4e62f48a9ae14667d9f00502c4a3e10a44f0f21dc4402143d"
        },
        "downloads": -1,
        "filename": "simpleruleengine-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2aecb78b120bf80fb8c36516616152b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27317,
        "upload_time": "2022-09-26T03:49:50",
        "upload_time_iso_8601": "2022-09-26T03:49:50.907661Z",
        "url": "https://files.pythonhosted.org/packages/2f/74/fccdaa2b9f66755f74cf1983eac174ab56432fd0de6c0072add1568b04f9/simpleruleengine-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba4b123f99b2a948158ab76805a260a060fc56459aad1c4787af76b28701f6ad",
          "md5": "87ea415e61632898066f35b5c3f805db",
          "sha256": "dde70a5f25bf40d2ff20da40d76f3a230559319058ed23fa572b797c615a0424"
        },
        "downloads": -1,
        "filename": "simpleruleengine-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "87ea415e61632898066f35b5c3f805db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16357,
        "upload_time": "2022-09-26T03:49:52",
        "upload_time_iso_8601": "2022-09-26T03:49:52.887454Z",
        "url": "https://files.pythonhosted.org/packages/ba/4b/123f99b2a948158ab76805a260a060fc56459aad1c4787af76b28701f6ad/simpleruleengine-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc73960eef6a2d97aad930d04e5d15220c0adad2c3e27b0aa4dddb4cec9597d5",
          "md5": "f111b2e1bdd8cd74d58070616b5995a0",
          "sha256": "12a4c06d4381227154edb23f83eda453a70e150cd4233018fd398f1eeb9695ff"
        },
        "downloads": -1,
        "filename": "simpleRuleEngine-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f111b2e1bdd8cd74d58070616b5995a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2407,
        "upload_time": "2019-04-16T10:45:09",
        "upload_time_iso_8601": "2019-04-16T10:45:09.134192Z",
        "url": "https://files.pythonhosted.org/packages/bc/73/960eef6a2d97aad930d04e5d15220c0adad2c3e27b0aa4dddb4cec9597d5/simpleRuleEngine-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5643455cf7adefddc6611c17f4657bee9a551fe5c9f8c24e476046822226181f",
          "md5": "34fdb31885f39e264445ebb369681704",
          "sha256": "bec59b318385ebf1207672d6a72528b1dee43024cd45b8903ff77bca7e0c3ab6"
        },
        "downloads": -1,
        "filename": "simpleRuleEngine-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "34fdb31885f39e264445ebb369681704",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6816,
        "upload_time": "2019-04-16T10:45:11",
        "upload_time_iso_8601": "2019-04-16T10:45:11.250892Z",
        "url": "https://files.pythonhosted.org/packages/56/43/455cf7adefddc6611c17f4657bee9a551fe5c9f8c24e476046822226181f/simpleRuleEngine-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d4c45bc0e101ae0319965c3ccdf5f6a5be487ab81bfa570936f9c4fbb8d34e4",
          "md5": "9f68620f406e3b88bcfc0e3d4ade039d",
          "sha256": "fe97d5f6548234e1bbcec60a2144388028d05eb401963ec4dd73b70532bed248"
        },
        "downloads": -1,
        "filename": "simpleruleengine-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f68620f406e3b88bcfc0e3d4ade039d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27314,
        "upload_time": "2022-09-26T03:53:49",
        "upload_time_iso_8601": "2022-09-26T03:53:49.695750Z",
        "url": "https://files.pythonhosted.org/packages/7d/4c/45bc0e101ae0319965c3ccdf5f6a5be487ab81bfa570936f9c4fbb8d34e4/simpleruleengine-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3466bb34427b12df3db704a7c6d215f5b5d699d3b697f7e984bea68f329b0281",
          "md5": "6772fcfdcb65aed79d0cf3c607a290df",
          "sha256": "22fdd08ff9985c01841e8b9e26a1d44f2fc2d88ddeb4f147b069856d258c68ed"
        },
        "downloads": -1,
        "filename": "simpleruleengine-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6772fcfdcb65aed79d0cf3c607a290df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16343,
        "upload_time": "2022-09-26T03:53:52",
        "upload_time_iso_8601": "2022-09-26T03:53:52.283449Z",
        "url": "https://files.pythonhosted.org/packages/34/66/bb34427b12df3db704a7c6d215f5b5d699d3b697f7e984bea68f329b0281/simpleruleengine-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09f5975ca7f2b9a6d6bdc0bc306919976c87cd2faeee514f0890c5844e4802be",
          "md5": "8256d0797eaf802bb41a23b94a479c2d",
          "sha256": "062a6d4fa8eeb1f70649134b9b8b7a57ccdf1ff1ecf7ac4fd9500eb7e496dfba"
        },
        "downloads": -1,
        "filename": "simpleruleengine-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8256d0797eaf802bb41a23b94a479c2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30529,
        "upload_time": "2022-11-01T13:59:30",
        "upload_time_iso_8601": "2022-11-01T13:59:30.526322Z",
        "url": "https://files.pythonhosted.org/packages/09/f5/975ca7f2b9a6d6bdc0bc306919976c87cd2faeee514f0890c5844e4802be/simpleruleengine-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d82d604d8a5190df51d3b6f11dcf4f053be5d7d636b82aac734591ae40ef57a",
          "md5": "485a0fa984a1cc6070087091d4d80937",
          "sha256": "3caea538d15b84e43518d20e9e103be7f7eb9835e4807b8a05be91a628940334"
        },
        "downloads": -1,
        "filename": "simpleruleengine-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "485a0fa984a1cc6070087091d4d80937",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20246,
        "upload_time": "2022-11-01T13:59:33",
        "upload_time_iso_8601": "2022-11-01T13:59:33.606261Z",
        "url": "https://files.pythonhosted.org/packages/9d/82/d604d8a5190df51d3b6f11dcf4f053be5d7d636b82aac734591ae40ef57a/simpleruleengine-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39c427490841b3227cbf68ddb94f038930ccedac6de3bc9fec5614d921fbf175",
          "md5": "2530afde79b393c20d592ac83d2db9bd",
          "sha256": "9a500201ec31ee4edb56bd6b26b189bf4087f10045940c16cb348ab61e42cc93"
        },
        "downloads": -1,
        "filename": "simpleruleengine-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2530afde79b393c20d592ac83d2db9bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29947,
        "upload_time": "2022-11-01T15:19:12",
        "upload_time_iso_8601": "2022-11-01T15:19:12.825789Z",
        "url": "https://files.pythonhosted.org/packages/39/c4/27490841b3227cbf68ddb94f038930ccedac6de3bc9fec5614d921fbf175/simpleruleengine-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91838c366ed33ec27a9c227ef6f2653b005111ffef4a2936c5d1189c51437112",
          "md5": "3b80034ce36e9c8b0fda0c409d29c4c8",
          "sha256": "1ac4d1310c996bebf4e747d6d1477f7cb41e07c24b29df0ae03d0d6d884e337f"
        },
        "downloads": -1,
        "filename": "simpleruleengine-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3b80034ce36e9c8b0fda0c409d29c4c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20127,
        "upload_time": "2022-11-01T15:19:17",
        "upload_time_iso_8601": "2022-11-01T15:19:17.247223Z",
        "url": "https://files.pythonhosted.org/packages/91/83/8c366ed33ec27a9c227ef6f2653b005111ffef4a2936c5d1189c51437112/simpleruleengine-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39c427490841b3227cbf68ddb94f038930ccedac6de3bc9fec5614d921fbf175",
        "md5": "2530afde79b393c20d592ac83d2db9bd",
        "sha256": "9a500201ec31ee4edb56bd6b26b189bf4087f10045940c16cb348ab61e42cc93"
      },
      "downloads": -1,
      "filename": "simpleruleengine-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2530afde79b393c20d592ac83d2db9bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 29947,
      "upload_time": "2022-11-01T15:19:12",
      "upload_time_iso_8601": "2022-11-01T15:19:12.825789Z",
      "url": "https://files.pythonhosted.org/packages/39/c4/27490841b3227cbf68ddb94f038930ccedac6de3bc9fec5614d921fbf175/simpleruleengine-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91838c366ed33ec27a9c227ef6f2653b005111ffef4a2936c5d1189c51437112",
        "md5": "3b80034ce36e9c8b0fda0c409d29c4c8",
        "sha256": "1ac4d1310c996bebf4e747d6d1477f7cb41e07c24b29df0ae03d0d6d884e337f"
      },
      "downloads": -1,
      "filename": "simpleruleengine-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3b80034ce36e9c8b0fda0c409d29c4c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 20127,
      "upload_time": "2022-11-01T15:19:17",
      "upload_time_iso_8601": "2022-11-01T15:19:17.247223Z",
      "url": "https://files.pythonhosted.org/packages/91/83/8c366ed33ec27a9c227ef6f2653b005111ffef4a2936c5d1189c51437112/simpleruleengine-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}