{
  "info": {
    "author": "",
    "author_email": "\"Adrian Zapa≈Ça, MSc\" <adrian.zapala@outlook.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Education",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.11",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Security :: Cryptography",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![Python Version](https://img.shields.io/badge/python-3.11-blue/)\r\n![aznt version](https://img.shields.io/badge/aznt-0.0.41-green)\r\n![Beta version](https://img.shields.io/badge/beta-ver.-green)\r\n\r\n# `aznt` - From A to Z Number Theory\r\n\r\n* Number Theory library for Python with prime numbers.\r\n* **Important:** requires Python >= 3.11.\r\n* You can pass to author's GitHub at\r\n[adrianzapala.github.io](https://adrianzapala.github.io/).\r\n\r\n# Install\r\n\r\n```python\r\npip install aznt\r\n```\r\n\r\n# Imports\r\n\r\nThe package `aznt` includes three modules: `azntnumbers`, `azntprimality` and `azntplots`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n\r\n```python\r\nimport aznt.azntnumbers as azn\r\nimport aznt.azntprimality as azpr\r\nimport aznt.azntplots as azpt\r\n```\r\n\r\n# General info about performance\r\nWhen working with numbers \r\nwith a large number of digits, calculation results slow down quickly. \r\nThis is especially true for algorithms such as factorization,\r\nsearching for dividers etc. So for many large numbers, \r\nit can take a very long time to get results.\r\n\r\n\r\n# Usage: `azntnumbers` module functions\r\n\r\n## `factorization(n)`\r\n\r\nReturn prime factors of a number from a function argument.<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> factorization(8)\r\n[2, 2, 2]\r\n>>> factorization(1123243)\r\n[11, 11, 9283]\r\n>>> factorization(20570952)\r\n[2, 2, 2, 3, 17, 127, 397]\r\n```\r\n\r\n## `dividers_naive(n)`\r\n\r\nReturns divisors of a number from a function argument. It returns \r\na list of these divisors.<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> dividers_naive(1123243)\r\n[1, 11, 121, 9283, 102113, 1123243]\r\n>>> dividers_naive(20570952)\r\n[1, 2, 3, 4, 6, 8, 12, 17, 24, 34, 51, 68, 102, 127, 136, 204, 254, 381, 397, 408, 508, 762, 794, 1016, 1191, 1524, 1588, 2159, 2382, 3048, 3176, 4318, 4764, 6477, 6749, 8636, 9528, 12954, 13498, 17272, 20247, 25908, 26996, 40494, 50419, 51816, 53992, 80988, 100838, 151257, 161976, 201676, 302514, 403352, 605028, 857123, 1210056, 1714246, 2571369, 3428492, 5142738, 6856984, 10285476, 20570952]\r\n```\r\n\r\n## `dividers_opt(n)`\r\n\r\nThis function calculates divisors in pairs, which multiplication product creates \r\na number from function argument. If the argument is default (`pairs=False`) \r\nand also if the numbers from these pairs are different it puts these pairs on the \r\nlist and then sort list (if the numbers are equal, it's placing only one number on the list). \r\nAlternatively, if the argument is `True`  it join pairs of divisors (may be \r\nequal) into tuples and then append them into a list.<br>\r\nThis function works pretty much faster than `dividers_naive()` function.<br>\r\nTime complexity: `O(sqrt(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\ndividers_opt(100)\r\n[1, 2, 4, 5, 10, 20, 25, 50, 100]\r\ndividers_opt(100, pairs=True)\r\n[(1, 100), (2, 50), (4, 25), (5, 20), (10, 10)]\r\n```\r\n\r\n## `tau(n)`\r\n\r\nCount the number of divisors of an integer (including 1 and the number itself).<br>\r\nTime complexity: `O(sqrt(n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> tau(6)\r\n4\r\n>>> tau(4356)\r\n27\r\n>>> tau(12499674)\r\n16\r\n```\r\n\r\n## `sigma(n)`\r\n\r\nReturn the sum of divisors of an integer \r\n(including 1 and the number itself).<br>\r\nTime complexity: `O(sqrt(n)))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> sigma(3)\r\n4\r\n>>> sigma(343532)\r\n687120\r\n```\r\n\r\n## `s(n)`\r\n\r\nReturn the sum of proper divisors of an integer \r\n(excluding `n` itself).<br>\r\nTime complexity: `O(sqrt(n)))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> s(3)\r\n1\r\n>>> s(4438)\r\n3194\r\n```\r\n\r\n## `gcd_mod(a, b)`\r\n\r\nReturn Greatest Common Divisor (GCD) of two positive integers using Euclidean algorithm \r\nwith division.<br>\r\nTime complexity: `O(log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> gcd_mod(36, 882)\r\n18\r\n>>> gcd_mod(363, 1287)\r\n33\r\n>>> gcd_mod(23, 3456)\r\n1\r\n>>> gcd_mod(484, 56)\r\n4\r\n```\r\n\r\n## `gcd_subtract(a, b)`\r\n\r\nReturn Greatest Common Divisor (GCD) of two positive integers using Euclidean algorithm \r\nwith subtraction.<br>\r\nTime complexity: `O(n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> gcd_subtract(36, 882)\r\n18\r\n>>> gcd_subtract(363, 1287)\r\n33\r\n>>> gcd_subtract(23, 3456)\r\n1\r\n>>> gcd_subtract(484, 56)\r\n4\r\n```\r\n\r\n## `lcm(a, b)`\r\n\r\nReturn Lowest Common Multiple (LCM) of two positive integers.<br>\r\nTime complexity: `O(log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> lcm(36, 882)\r\n1764\r\n>>> lcm(363, 1287)\r\n14157\r\n>>> lcm(23, 3456)\r\n79488\r\n>>> lcm(484, 56)\r\n6776\r\n```\r\n\r\n## `is_gcd_eq_1(n, floor, ceil)`\r\n\r\nReturn a tuple. First\r\nelement of a tuple is a quantity of pairs of numbers which\r\nare relatively prime to themselves, the second element is a density of them and \r\nthe third element is a list of nested lists of them.\r\nAll pairs are randomly generated from `floor`\r\nto `ceil` of numbers range (`n`). Based on that a variety of different \r\noutputs can be possible for the same parameters.<br>\r\nTime complexity: `O(n log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> is_gcd_eq_1(25, 100, 10000)\r\n(15, 0.6, [[1470, 8779], [8447, 5117], [7852, 5597], [8111, 7225], [5375, 6721], [9191, 4239], [7101, 6361], [1099, 211], [7036, 9515], [5281, 7212], [948, 2471], [3451, 4541], [3896, 9463], [8006, 845], [4448, 4803]])\r\n>>> is_gcd_eq_1(25, 100, 10000)\r\n(13, 0.52, [[7271, 5402], [9505, 5791], [8608, 1811], [6017, 9782], [1784, 3439], [8135, 9444], [3979, 9078], [2849, 2677], [888, 8171], [6399, 6145], [6647, 3679], [3697, 7051], [557, 553]])\r\n```\r\n\r\n## `totient(n)`\r\n\r\nReturn Euler's totient function (phi) which counts the positive integers up to \r\na given integer `n` that are relatively prime to `n`.<br>\r\nTime complexity: `O(log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> totient(4)\r\n2\r\n>>> totient(24)\r\n8\r\n>>> totient(424235)\r\n253440\r\n```\r\n\r\n## `pnt(n)`\r\n\r\nReturn the asymptotic distribution of the prime numbers among \r\nthe positive integers.<br>\r\nTime complexity: `O(log n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> pnt(1000)\r\n144.76482730108395 // Real value: 168\r\n>>> pnt(1000000)\r\n72382.41365054197 // Real value: 78498\r\n```\r\n\r\n## `prime_probability(n)`\r\n\r\nReturn probability if a random number is prime to a specific ceil given.<br>\r\nTime complexity: `O(log n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> prime_probability(100)\r\n0.21714724095162588\r\n>>> prime_probability(1000)\r\n0.14476482730108395\r\n```\r\n\r\n## `basel_problem(max, n=2)`\r\n\r\nReturn precise summation of the reciprocals of the squares of the \r\nnatural numbers, i.e. the precise sum of the infinite series. \r\nThe sum of the series is approximately \r\nequal to 1.644934 (pi^2 / 6 for `n` = 2).<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> basel_problem(345567)\r\n1.6449311730576142\r\n>>> basel_problem(2568, n=4)\r\n1.0823232336914694\r\n```\r\n\r\n## `is_mersenne(m)`\r\n\r\nCheck if a number is Mersenne number, M = 2^n - 1 (prime or composite). Returns a four-element tuple. First element is boolean value - `True` or `False`.\r\nIf `True`, then second argument is M with exponent, third is the number in exponent (scientific) notation and the last is whole number.<br>\r\nTime complexity: `O(log n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> is_mersenne(0)\r\nArgument: 0. Mersenne numbers starts from 1.\r\n>>> is_mersenne(1)\r\n(True, 'M1', '1.00e+00', 1)\r\n>>> is_mersenne(2)\r\nFalse\r\n>>> is_mersenne(7)\r\n(True, 'M3', '7.00e+00', 7)\r\n>>> is_mersenne(100)\r\nFalse\r\n>>> is_mersenne(255)\r\n(True, 'M8', '2.55e+02', 255)\r\n>>> is_mersenne(511)\r\n(True, 'M9', '5.11e+02', 511)\r\n>>> is_mersenne(1023)\r\n(True, 'M10', '1.02e+03', 1023)\r\n>>> is_mersenne(604462909807314587353087)\r\n(True, 'M79', '6.04e+23', 604462909807314587353087)\r\n```\r\n\r\n## `is_fermat(f)`\r\n\r\nCheck if a number is Fermat number, F = 2^2^n - 1 (prime or composite). Returns a four-element tuple. First element is boolean value - `True` or `False`.\r\nIf `True`, then second argument is F with exponent, third is the number in exponent (scientific) notation and the last is whole number.<br>\r\nTime complexity: `O(log (log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> is_fermat(-3)\r\nArgument: -3. Fermat numbers starts from 3.\r\n>>> is_fermat(1)\r\nArgument: 1. Fermat numbers starts from 3.\r\n>>> is_fermat(3)\r\n(True, 'F0', '3.00e+00', 3)\r\n>>> is_fermat(5)\r\n(True, 'F1', '5.00e+00', 5)\r\n>>> is_fermat(7)\r\nFalse\r\n>>> is_fermat(17)\r\n(True, 'F2', '1.70e+01', 17)\r\n>>> is_fermat(257)\r\n(True, 'F3', '2.57e+02', 257)\r\n>>> is_fermat(65537)\r\n(True, 'F4', '6.55e+04', 65537)\r\n>>> is_fermat(4294967297)\r\n(True, 'F5', '4.29e+09', 4294967297)\r\n>>> is_fermat(18446744073709551617)\r\n(True, 'F6', '1.84e+19', 18446744073709551617)\r\n>>> is_fermat(340282366920938463463374607431768211457)\r\n(True, 'F7', '3.40e+38', 340282366920938463463374607431768211457)\r\n>>> is_fermat(115792089237316195423570985008687907853269984665640564039457584007913129639937)\r\n(True, 'F8', '1.16e+77', 115792089237316195423570985008687907853269984665640564039457584007913129639937)\r\n>>> is_fermat(13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084097)\r\n(True, 'F9', '1.34e+154', 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084097)\r\n```\r\n## `is_perfect(n)`\r\n\r\nCheck if a number is perfect number. If so, returns True, False otherwise.<br>\r\nTime complexity: `O(sqrt(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> is_perfect(7)\r\nFalse\r\n>>> is_perfect(8128)\r\nTrue\r\n```\r\n\r\n## `zeta_trivial_value(s, n=10000)`\r\n\r\nReturn **trivial** (real) value of Riemann zeta function for given argument, where `s` is zeta\r\nfunction argument, and `n` is number of terms in the series of zeta.<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> zeta_trivial_value(-49)\r\n-1.5001733492153957e+23\r\n>>> zeta_trivial_value(-31)\r\n472384867.72163075\r\n>>> zeta_trivial_value(-19)\r\n26.45621212121214\r\n>>> zeta_trivial_value(-15)\r\n0.44325980392156883\r\n>>> zeta_trivial_value(-5)\r\n-0.003968253968253967\r\n>>> zeta_trivial_value(-4)\r\n0\r\n>>> zeta_trivial_value(0)\r\n0.5\r\n>>> zeta_trivial_value(.1)\r\n-0.6029256240132325\r\n>>> zeta_trivial_value(.5)\r\n-1.4482837427744006\r\n>>> zeta_trivial_value(1)\r\ninf\r\n>>> zeta_trivial_value(5)\r\n1.0369277551433702\r\n>>> zeta_trivial_value(33)\r\n1.0000000001164155\r\n>>> zeta_trivial_value(50)\r\n1.0000000000000009\r\n```\r\n\r\n## `nontrivial_zeros_dist(t)`\r\n\r\nReturn average distance between zeros on a critical line in Riemann zeta function.<br>\r\nTime complexity: `O(log n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> nontrivial_zeros_dist(20)\r\n5.426572570049043\r\n>>> nontrivial_zeros_dist(100)\r\n2.2705167236263177\r\n>>> nontrivial_zeros_dist(1000)\r\n1.2393168126993492\r\n```\r\n\r\n## `pstats1(data_rows=29)`\r\n\r\nReturn statistics of prime numbers up to `data_rows` which in default is equal `29`. \r\nThis value can be changed from a function argument, but it can't be greater \r\nthan that value. It can't be lower than 1 also. Rows statistics starts \r\nfrom 10 up to 10^29, and they are for prime numbers in these ranges.<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> pstats1()\r\n<Returns all table>\r\n>>> pstats1(-2)\r\nIncorrect argument\r\n>>> pstats1(5)\r\n    x                  œÄ(x)                      x/œÄ(x)                    logx            (x/œÄ(x) - logx) / x/œÄ(x) [%] \r\n1e+01     4                             2.5                      2.302585092994046        7.896596280238163             \r\n1e+02     25                            4.0                      4.605170185988092        15.129254649702295            \r\n1e+03     168                           5.9523809523809526       6.907755278982137        16.050288686899894            \r\n1e+04     1229                          8.136696501220504        9.210340371976184        13.195083171587305            \r\n1e+05     9592                          10.42535446205171        11.512925464970229       10.431981059994436            \r\n```\r\n\r\n## `pstats2(data_rows=29)`\r\n\r\nReturn statistics of prime numbers up to `data_rows` which in default is equal `29`. \r\nThis value can be changed from a function argument, but it can't be greater \r\nthan that value. It can't be lower than 1 also. Rows statistics starts \r\nfrom 10 up to 10^29, and they are for prime numbers in these ranges.<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> pstats2()\r\n<Returns all table>\r\n>>> pstats2(-2)\r\nIncorrect argument\r\n>>> pstats2(4)\r\n    x               PNT: Li(x)                       œÄ(x)                    PNT: x/logx       \r\n1e+01     6.165599504787298             4                             4.3429448190325175       \r\n1e+02     30.12614158407963             25                            21.71472409516259        \r\n1e+03     177.60965799015221            168                           144.76482730108395       \r\n1e+04     1246.1372158993884            1229                          1085.7362047581294\r\n```\r\n\r\n## `pstats3(data_rows=29)`\r\n\r\nReturn statistics of prime numbers up to `data_rows` which in default is equal `29`. \r\nThis value can be changed from a function argument, but it can't be greater \r\nthan that value. It can't be lower than 1 also. Rows statistics starts \r\nfrom 10 up to 10^29, and they are for prime numbers in these ranges.<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> pstats3()\r\n<Returns all table>\r\n>>> pstats3(-2)\r\nIncorrect argument\r\n>>> pstats3(3)\r\n    x                  œÄ(x)                       PNT: Li(x)                Li(x) - œÄ(x)         (Li(x) - œÄ(x)) / œÄ(x) [%]   \r\n1e+01     4                             6.165599504787298             2.165600                 54.139988                     \r\n1e+02     25                            30.12614158407963             5.126142                 20.504566                     \r\n1e+03     168                           177.60965799015221            9.609658                 5.720035\r\n```\r\n\r\n# Usage: `azntprimality` module functions\r\n\r\n## `is_prime_naive1(n)`\r\nReturn if number is a prime.\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> is_prime_naive1(7)\r\nTrue\r\n```\r\n\r\n## `is_prime_naive2(n)`\r\nReturn if number is a prime. This function is faster than `is_prime_naive1()` function.<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> is_prime_naive2(5)\r\nTrue\r\n```\r\n\r\n## `is_prime_sqrt(n)`\r\nReturn if number is a prime. This function is faster than `is_prime_naive2()` function.<br>\r\nTime complexity: `O(sqrt(n)))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> is_prime_sqrt(101)\r\nTrue\r\n```\r\n\r\n## `is_prime_sqrt_odd(n)`\r\nReturn if number is a prime. This function is faster than `is_prime_sqrt()` function.<br>\r\nTime complexity: `O(sqrt(n)))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> is_prime_sqrt(23)\r\nTrue\r\n```\r\n\r\n## `eratosthenes_sieve(n)`\r\nReturn list of prime numbers from 2 up to `n` range.<br>\r\nTime complexity: `O(n log n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n```python\r\n>>> eratosthenes_sieve(100)\r\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\r\n```\r\n\r\n# Usage: `azntplots` module functions\r\n\r\n## `critical_strip()`\r\n\r\nReturn a plot presenting critical strip and critical line of Riemann zeta.<br>\r\n\r\n## `riemann_zeta()`\r\n\r\nReturn a plot presenting Riemann zeta function for critical line arguments.<br>\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "aznt,numbers,number theory,primes,prime numbers,math",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aznt",
    "package_url": "https://pypi.org/project/aznt/",
    "platform": null,
    "project_url": "https://pypi.org/project/aznt/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/aznt/0.0.41/",
    "requires_dist": [
      "mpmath",
      "matplotlib",
      "numpy"
    ],
    "requires_python": ">=3.11",
    "summary": "From A to Z Number Theory",
    "version": "0.0.41",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17403977,
  "releases": {
    "0.0.41": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7170e40b6327292463db09bd2e760b0b1e0330aac1fa5e6f96f00d0dc2d31de7",
          "md5": "3ae7c34e26dd505ad3a5a3e70475cb7f",
          "sha256": "39d2f0142a0861f75fad0af43ab4d94a29ce0c37c7629ced1cd86e15fa2f478f"
        },
        "downloads": -1,
        "filename": "aznt-0.0.41-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ae7c34e26dd505ad3a5a3e70475cb7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 11642,
        "upload_time": "2023-03-22T20:33:22",
        "upload_time_iso_8601": "2023-03-22T20:33:22.617669Z",
        "url": "https://files.pythonhosted.org/packages/71/70/e40b6327292463db09bd2e760b0b1e0330aac1fa5e6f96f00d0dc2d31de7/aznt-0.0.41-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "676e3873587e66b9c02cd8f0ac418b1226ecc0b2561a9920737c41fc3d977615",
          "md5": "2d564d3de1e72cdd2d30f400c52b8dab",
          "sha256": "d4838965addf7fa885c4c3dc092b89edc480dfe7b940e140e8a2ed6561283c55"
        },
        "downloads": -1,
        "filename": "aznt-0.0.41.tar.gz",
        "has_sig": false,
        "md5_digest": "2d564d3de1e72cdd2d30f400c52b8dab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 14994,
        "upload_time": "2023-03-22T20:33:25",
        "upload_time_iso_8601": "2023-03-22T20:33:25.189003Z",
        "url": "https://files.pythonhosted.org/packages/67/6e/3873587e66b9c02cd8f0ac418b1226ecc0b2561a9920737c41fc3d977615/aznt-0.0.41.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7170e40b6327292463db09bd2e760b0b1e0330aac1fa5e6f96f00d0dc2d31de7",
        "md5": "3ae7c34e26dd505ad3a5a3e70475cb7f",
        "sha256": "39d2f0142a0861f75fad0af43ab4d94a29ce0c37c7629ced1cd86e15fa2f478f"
      },
      "downloads": -1,
      "filename": "aznt-0.0.41-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3ae7c34e26dd505ad3a5a3e70475cb7f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.11",
      "size": 11642,
      "upload_time": "2023-03-22T20:33:22",
      "upload_time_iso_8601": "2023-03-22T20:33:22.617669Z",
      "url": "https://files.pythonhosted.org/packages/71/70/e40b6327292463db09bd2e760b0b1e0330aac1fa5e6f96f00d0dc2d31de7/aznt-0.0.41-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "676e3873587e66b9c02cd8f0ac418b1226ecc0b2561a9920737c41fc3d977615",
        "md5": "2d564d3de1e72cdd2d30f400c52b8dab",
        "sha256": "d4838965addf7fa885c4c3dc092b89edc480dfe7b940e140e8a2ed6561283c55"
      },
      "downloads": -1,
      "filename": "aznt-0.0.41.tar.gz",
      "has_sig": false,
      "md5_digest": "2d564d3de1e72cdd2d30f400c52b8dab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11",
      "size": 14994,
      "upload_time": "2023-03-22T20:33:25",
      "upload_time_iso_8601": "2023-03-22T20:33:25.189003Z",
      "url": "https://files.pythonhosted.org/packages/67/6e/3873587e66b9c02cd8f0ac418b1226ecc0b2561a9920737c41fc3d977615/aznt-0.0.41.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}