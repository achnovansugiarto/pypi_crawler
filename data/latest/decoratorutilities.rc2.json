{
  "info": {
    "author": "ScalamandrÃ¨ Simone, Giovanni Cardamone",
    "author_email": "simone.scalamandre@sourcesense.com, giovanni.cardamone@sourcesense.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DecoratorUtilities\n\n### Readthedocs Reference\n\nPlease read our documentation here: [Readthedocs Reference](https://decoratorutilities.readthedocs.io/en/dev/)\n\n### Package Reference\n\nOur package reference link is: https://pypi.org/project/decoratorutilities\n\n## Menu\n\n- [Intro](#intro)\n- [Installation](#installation)\n- [Decorators](#decorators)\n    - [Check Type Decorator](#check_type_decorator)\n    - [Overloading Decorator](#overloading_decorator)\n    - [Mocking Decorator](#mocking-decorator)\n    - [Memoized Decorator](#memoized-decorator)\n    - [Timeit Decorator](#timeit-decorator)\n    - [Singleton Decorator](#singleton-decorator)\n\n## Intro\nDecoratorUtilities is a python library that provides different utilities for functions and class methods such as\nto check parameters and return type, allow overloading, to cache results to speed up them, instantiate a Singleton object\nand mocking at runtime\n\n## Installation\n\n```bash\npip install decoratorutilities\n```\n\n## Decorators\n\n### Check Type Decorator\n\nDecorate your own functions with **@checktype** decorator to check parameters type and return type too\n**Example:**\n\n```python\nfrom decoratorutilities import checktype\nimport pytest\n\n@checktype\ndef my_functon(a: int, b: int) -> int:\n    return 1\n\n# Valid usage: Integer parameters and return type\nmy_functon(5, 6)  # return 1\nassert my_functon(5, 6) == 1  # True\n\n# Invalid usage: String parameters and return type\nwith pytest.raises(TypeError):\n    my_functon(\"5\", \"6\")  # Raises TypeError Exception\nwith pytest.raises(TypeError):\n    my_functon(\"invalid\", b=\"Invalid\")  # Raises TypeError Exception\nwith pytest.raises(TypeError):\n    my_functon(a=\"invalid\", b=\"Invalid\")  # Raises TypeError Exception\nwith pytest.raises(TypeError):\n    assert my_functon(5, 6) == \"1\"  # Raises TypeError Exception\n```\n\nDecorate your own class methods with **@checktype** decorator to check parameters type and return type too\n**Example:**\n\n```python\nfrom decoratorutilities import checktype\nimport pytest\n\nclass X(object):\n\n    @checktype  # checktype decorator for classes methods\n    def my_function(self, value: int):\n        return value\n\n# Valid usage: Integer parameters and return type\nassert X().my_function(1) == 1  # True\n\n# Invalid usage: String parameters and return type\nwith pytest.raises(TypeError):\n    X().my_function('1')  # Raises TypeError Exception\nwith pytest.raises(TypeError):\n    X().my_function(1) == \"1\"  # Raises TypeError Exception\n```\n\n### Overloading Decorator\n\nDecorate your own function with **@overload** decorator to define multiple functions with same name but with different parameters  \n**Example:**\n\n```python\nfrom decoratorutilities import overload\n\n@overload\ndef my_functon(a:int):\n    return 1\n\n@overload\ndef my_functon(a:str):\n    return 2\n\n# Invoke first my_functon and return 1\nmy_functon(1)\n# Invoke second my_functon and return 2\nmy_functon('1')\n```\n\nDecorate your own class method with **@overload** decorator to define multiple class methods with same name but with different parameters  \n**Example:**\n\n```python\nfrom decoratorutilities import overload\n\nclass X(object):\n    @overload\n    def x(self, x: int):\n        return int\n\n    @overload\n    def x(self, x: str):\n        return str\n\nassert X().x(1) == int  # True\nassert X().x('1') == str  # True\n```\n\n\n### Mocking Decorator\n\nDecorate your own function with **@mocking** decorator to mock that function adding args in a tuple, kwargs in a dict and return value  \n**Example:**\n\n```python\nfrom decoratorutilities import mocking\n\n# Define args tuple, kwargs dict and return value\n@mocking([\n   ((1, 2, 3), {\"a\": 1}, 1),\n   ((4, 5, 6), {\"b\": 2}, 2)\n])\ndef a():\n   pass\n\n# Valid usage\nassert a(1, 2, 3, a=1) == 1  # return 1\nassert a(4, 5, 6, b=2) == 2  # return 2\n\n# Invalid usage\nassert a(7, 8, 9, c=1) == 1  # Raises KeyError Exception\n```\n\n### Memoized Decorator\n\nDecorate your own function or class method with **@memoized** decorator to speed up it by storing the results and returning the cached result when the same inputs occur again  \n**Example:**\n\n```python\nfrom decoratorutilities import memoized\nimport datetime\n\ndef util_run_function_with_time(fn, args, kwargs):\n    start_time = datetime.datetime.now()\n    tmp = fn(*args, **kwargs)\n    end_time = datetime.datetime.now()\n    return (end_time - start_time), tmp\n\n@memoized\ndef memoized_fibonacci(x):\n    if x == 0:\n        return 0\n\n    if x == 1:\n        return 1\n\n    return memoized_fibonacci(x - 1) + memoized_fibonacci(x - 2)\n\ndef fibonacci(x):\n    if x == 0:\n        return 0\n\n    if x == 1:\n        return 1\n\n    return fibonacci(x - 1) + fibonacci(x - 2)\n\nfib_value = 20\nmemoized_execution_time, memoized_value = util_run_function_with_time(memoized_fibonacci, (fib_value, ), {})  # Return execution time and value for memoized function\nunmemoized_execution_time, unmemoized_value = util_run_function_with_time(fibonacci, (fib_value, ), {})  # Return execution time and value for unmemoized function\n\nprint(f\"memoized_execution_time: {memoized_execution_time} - unmemoized_execution_time: {unmemoized_execution_time}\")\n\nassert memoized_execution_time < unmemoized_execution_time  # OK\nassert memoized_value == unmemoized_value  # OK\n```   \n\n### Timeit Decorator\n\nDecorate your own function with **@timeit** decorator to monitoring execution time  \n**Example:**\n\n```python\nfrom decoratorutilities import timeit\nimport time\n\n\n@timeit\ndef hello():\n    time.sleep(0.1)\n\n\nif __name__ == \"__main__\":\n    hello()  # print \"Execution time: 100.75 ms\"\n```\n\n\n### Debug Decorator\n\nDecorate your own function with **@debug** decorator to print in console more Exception details  \n**Example:**\n\n```python\nfrom decoratorutilities import debug\nimport pytest\n\n@debug\ndef a():\n    message = \"Hello \" + 5\n    return message\n\nwith pytest.raises(TypeError):\n    a() # Print in console: Found \"<class 'TypeError'>\" Exception in file \"('../tests', 'test_debug.py')\" on line \"9\"\n        # Error message: \"can only concatenate str (not \"int\") to str\"\n```\n\nDecorate your own class methods with **@debug** decorator to print in console more Exception details  \n**Example:**\n\n```python\nfrom decoratorutilities import debug\nimport pytest\n\nclass A(object):\n\n    @debug\n    def __init__(self):\n        self.message = \"Hello \" + 5\n\nwith pytest.raises(TypeError):\n    A()  # Raises TypeError Exception\n```\n\n### Singleton Decorator\n\nDecorate your own classes with **@singleton()** decorator to ensure that only one instance of the singleton class ever exists.\nNever invoke **@singleton()** decorator without brackets otherwise it will cause problems\nDefine your class method `__init__()` without parameters, pass them to the **@singleton()** decorator\n\n**Example with args and kwargs**\n\n```python\nimport pytest\nfrom decoratorutilities import singleton\n\n@singleton(10, message=\"Message to send\", email=[\"simone.scalamandre95@gmail.com\"])\nclass A(object):\n    def __init__(self):\n        self.x = 50  # Define constant class attribute\n\n    def print_hello(self):  # Custom method\n        return \"Hello World\"\n\n# Valid usage\nassert A[0] == 10  # True -> Get first arg\nassert A.x == 50  # True -> Get decorated class attribute\nassert A.print_hello() == \"Hello World\"  # True -> Get decorated class method \"print_hello()\"\nassert A.message == \"Message to send\"  # True -> Get kwarg \"message\" passed to Singleton decorator\nassert A.email == [\"simone.scalamandre95@gmail.com\"]  # True\n\nwith pytest.raises(TypeError):\n    # Invalid usage, brackets are missing\n    @singleton\n    class B(object):\n        def __init__(self):\n            self.x = 10\n\n    B()  # Raises TypeError Exception\n```\n\nWe can define our singleton class with or without args and kwargs parameters but we can only instantiate one\n**Example**\n\n```python\nimport pytest\nfrom decoratorutilities import singleton\n\n@singleton()\nclass A(object):\n    def __init__(self):\n        pass\n\n@singleton(x=10)\nclass B(object):\n    def __init__(self):\n        pass\n\nwith pytest.raises(TypeError) as e:\n    A()  # Raises TypeError Exception\n\nwith pytest.raises(TypeError):\n    B()  # Raises TypeError Exception\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/decoratorutilities/#files",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Symone95/decoratorutilities",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "decoratorutilities",
    "package_url": "https://pypi.org/project/decoratorutilities/",
    "platform": "",
    "project_url": "https://pypi.org/project/decoratorutilities/",
    "project_urls": {
      "Download": "https://pypi.org/project/decoratorutilities/#files",
      "Homepage": "https://github.com/Symone95/decoratorutilities"
    },
    "release_url": "https://pypi.org/project/decoratorutilities/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Python library to user type guard utilities to check parameters and return type, allow function overloading and function mocking at runtime",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8417516,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6c9a6ea2b84b36eec325697c4e125680e35a0a3548afcbcc4752da979c6ff18",
          "md5": "245460223d0d0d0d74a26389cb934fc3",
          "sha256": "39c3a28d83c201d6b24188e3658b41ea0f4399d2abf6f241efdca7692c122c2c"
        },
        "downloads": -1,
        "filename": "decoratorutilities-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "245460223d0d0d0d74a26389cb934fc3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6066,
        "upload_time": "2020-09-22T12:07:07",
        "upload_time_iso_8601": "2020-09-22T12:07:07.554783Z",
        "url": "https://files.pythonhosted.org/packages/b6/c9/a6ea2b84b36eec325697c4e125680e35a0a3548afcbcc4752da979c6ff18/decoratorutilities-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4649fc28c35954fd687ad873c9ced5d8d75b3dba08661b8e5c8f982202fe848f",
          "md5": "b5a3e35a934909c199c0a0f729f42d0c",
          "sha256": "2ecf3581011c4de0f6d62c69369f1d61add4e52a84de6a07ca781d8fd626f7a8"
        },
        "downloads": -1,
        "filename": "decoratorutilities-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5a3e35a934909c199c0a0f729f42d0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4129,
        "upload_time": "2020-09-22T12:07:10",
        "upload_time_iso_8601": "2020-09-22T12:07:10.859574Z",
        "url": "https://files.pythonhosted.org/packages/46/49/fc28c35954fd687ad873c9ced5d8d75b3dba08661b8e5c8f982202fe848f/decoratorutilities-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de5e800ead66b70f73d75c70c656c47e3054eddc20bf095cc02428e626bf29da",
          "md5": "d5651fd1530d1b12547beb6387cc8cae",
          "sha256": "70318ee16ed0ffdf211f04c8a4f76b35ae0258f8be4fa100fd407e36852cf8ff"
        },
        "downloads": -1,
        "filename": "decoratorutilities-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5651fd1530d1b12547beb6387cc8cae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13325,
        "upload_time": "2020-10-15T09:45:30",
        "upload_time_iso_8601": "2020-10-15T09:45:30.822702Z",
        "url": "https://files.pythonhosted.org/packages/de/5e/800ead66b70f73d75c70c656c47e3054eddc20bf095cc02428e626bf29da/decoratorutilities-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9231269a9595d0f3370c14cb73ae0ad2211ab2c2a89341173ec4de253a71974c",
          "md5": "94517801b3f470c1b027696f9c667964",
          "sha256": "51aec86c3d50050b9db0ef7684d500e334acf8a2a02e4077b547dbcd8bfc68aa"
        },
        "downloads": -1,
        "filename": "decoratorutilities-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "94517801b3f470c1b027696f9c667964",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9708,
        "upload_time": "2020-10-15T09:45:32",
        "upload_time_iso_8601": "2020-10-15T09:45:32.534800Z",
        "url": "https://files.pythonhosted.org/packages/92/31/269a9595d0f3370c14cb73ae0ad2211ab2c2a89341173ec4de253a71974c/decoratorutilities-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de5e800ead66b70f73d75c70c656c47e3054eddc20bf095cc02428e626bf29da",
        "md5": "d5651fd1530d1b12547beb6387cc8cae",
        "sha256": "70318ee16ed0ffdf211f04c8a4f76b35ae0258f8be4fa100fd407e36852cf8ff"
      },
      "downloads": -1,
      "filename": "decoratorutilities-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d5651fd1530d1b12547beb6387cc8cae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13325,
      "upload_time": "2020-10-15T09:45:30",
      "upload_time_iso_8601": "2020-10-15T09:45:30.822702Z",
      "url": "https://files.pythonhosted.org/packages/de/5e/800ead66b70f73d75c70c656c47e3054eddc20bf095cc02428e626bf29da/decoratorutilities-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9231269a9595d0f3370c14cb73ae0ad2211ab2c2a89341173ec4de253a71974c",
        "md5": "94517801b3f470c1b027696f9c667964",
        "sha256": "51aec86c3d50050b9db0ef7684d500e334acf8a2a02e4077b547dbcd8bfc68aa"
      },
      "downloads": -1,
      "filename": "decoratorutilities-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "94517801b3f470c1b027696f9c667964",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9708,
      "upload_time": "2020-10-15T09:45:32",
      "upload_time_iso_8601": "2020-10-15T09:45:32.534800Z",
      "url": "https://files.pythonhosted.org/packages/92/31/269a9595d0f3370c14cb73ae0ad2211ab2c2a89341173ec4de253a71974c/decoratorutilities-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}