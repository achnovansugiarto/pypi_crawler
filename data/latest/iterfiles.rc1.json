{
  "info": {
    "author": "Alexander Lukanin",
    "author_email": "alexander.lukanin.13@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "=========\niterfiles\n=========\n\n|pypi| |build| |coverage|\n\nFind and process files in a Pythonic way, without boilerplate code. Implements ``for_each_file`` and other common scenarios.\n\n.. code-block:: python\n\n    >>> from iterfiles import for_each_file\n    >>> for_each_file('example', print, pattern='*/*.txt')\n\nThis will print all ``*.txt`` file names in all first-level subdirectories of ``example``.\n\nLet's say we have following directory structure:\n\n.. code-block:: text\n\n    example/\n        shapes.txt\n        aa/\n            colors.dat    # not a txt!\n            numbers.txt\n            pets.txt\n        bb/\n            names.txt\n            cc/\n                cars.txt\n\nThe output will be:\n\n.. code-block:: text\n\n    example/aa/numbers.txt\n    example/aa/pets.txt\n    example/bb/names.txt\n\nFilter directories and files via glob()\n---------------------------------------\n\nAll syntax of `pathlib.Path.glob <https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob>`_ is supported.\n\nPrint all ``*.txt`` files in *all* subdirectories:\n\n.. code-block:: python\n\n    >>> for_each_file('example', print, pattern='**/*.txt')\n    example/shapes.txt\n    example/aa/numbers.txt\n    example/aa/pets.txt\n    example/bb/names.txt\n    example/bb/cc/cars.txt\n\nPrint all ``*.txt`` files only in a top-level directory:\n\n.. code-block:: python\n\n    >>> for_each_file('example', print, pattern='*.txt')\n    example/shapes.txt\n\n\nFiles as an iterable\n--------------------\n\nIterate over ``pathlib.Path`` objects:\n\n.. code-block:: python\n\n    >>> from iterfiles import iter_files\n    >>> [x.name for x in iter_files('example', '**/*.txt')]\n    ['shapes.txt', 'numbers.txt', 'pets.txt', 'names.txt', 'cars.txt']\n\n...or over text file contents directly, for example combine the first words from each file:\n\n.. code-block:: python\n\n    >>> from iterfiles import iter_texts\n    >>> ', '.join(x.split(' ')[0] for x in iter_texts('example', pattern='**/*.txt'))\n    'Square, One, Cat, Alice, Toyota'\n\nPasting all files together into corpus\n--------------------------------------\n\nUse ``for_each_text`` to work with plain text contents directly.\n\n.. code-block:: python\n\n    >>> with open('corpus.txt', 'w') as corpus:\n    ...   for_each_text('example', corpus.write, pattern='**/*.txt')\n\nConvert files from one directory to another directory\n-----------------------------------------------------\n\nLet's say you want to extract OCR text from a large collection of ``*.pdf`` into ``*.txt`` files.\n\nYou have a wonderful function ``pdftotext(pdf_filename, txt_filename)`` from another package,\nit does the job well, but how to apply it to a nested directory tree?\n\n.. code-block:: python\n\n    >>> from iterfiles import convert_files\n    >>> convert_files('input_pdfs', 'output_txts', pdftotext, pattern='**/*.pdf', rename=lambda p: p.with_suffix('.txt'))\n\nThat's all. You'll have the same directory structure in output, and same file names, but with ``*.txt`` suffix instead of ``*.pdf``.\n\nOf course, ``convert_files`` can be used for any kind of conversion.\n\nConvert text files\n------------------\n\nIf both input and output is plain text, use ``convert_texts`` and forget about reading and writing files.\nFor example, here's a snippet which transforms all files into uppercase:\n\n.. code-block:: python\n\n    >>> from iterfiles import convert_texts\n    >>> convert_texts('example', 'output', str.upper, pattern='**/*.txt')\n\n\nGotchas and Limitations\n-----------------------\n\n* Any unhandled exception raised from your function will break the loop.\n  Make sure to suppress exceptions which are tolerable.\n  Error handling (such as logging) is out of scope of this package.\n\n* Collecting list of files according to glob happens (almost) instantly before any processing takes place.\n  If you add files to directory during long processing, these new files will not be detected on the fly.\n  If you remove files during processing and before they had a chance to be processed, you will see an error.\n\n* Only files are considered. Directories are traversed in a search for files; and during conversion,\n  directories are created when necessary; but that's it. You can't do anything custom with directories.\n\n* Package was not tested with symlinks, and behavior with symlinks is undefined.\n\nRequirements\n------------\n\n* Python 3.6+\n\n* No dependencies\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/iterfiles.svg\n    :target: https://pypi.python.org/pypi/iterfiles\n    :alt: pypi\n\n.. |build| image:: https://api.travis-ci.org/alexanderlukanin13/iterfiles.svg?branch=master\n    :target: https://travis-ci.org/alexanderlukanin13/iterfiles?branch=master\n    :alt: build status\n\n.. |coverage| image:: https://coveralls.io/repos/alexanderlukanin13/iterfiles/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/alexanderlukanin13/iterfiles?branch=master\n    :alt: coverage\n\n.. |docs| image:: https://img.shields.io/readthedocs/iterfiles.svg\n    :target: http://iterfiles.readthedocs.io/en/latest/\n    :alt: documentation\n\n\n=======\nHistory\n=======\n\n0.1.0 (2021-02-02)\n------------------\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alexanderlukanin13/iterfiles",
    "keywords": "file,pattern,directory,tree,traverse,find,convert",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iterfiles",
    "package_url": "https://pypi.org/project/iterfiles/",
    "platform": "",
    "project_url": "https://pypi.org/project/iterfiles/",
    "project_urls": {
      "Homepage": "https://github.com/alexanderlukanin13/iterfiles"
    },
    "release_url": "https://pypi.org/project/iterfiles/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Find and process files in a Pythonic way, without boilerplate code.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9299785,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cac0318d3248847dcc61768066b1d93509ee9af7acad498f01dfcc558afb134a",
          "md5": "7d2891239ee8a83a2efc8dae72979369",
          "sha256": "f4ff293e75982b7063cb5a97f1bec7d79477297bb3a3b222ca2919ed03b2b76d"
        },
        "downloads": -1,
        "filename": "iterfiles-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d2891239ee8a83a2efc8dae72979369",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 5949,
        "upload_time": "2021-02-02T21:32:34",
        "upload_time_iso_8601": "2021-02-02T21:32:34.353292Z",
        "url": "https://files.pythonhosted.org/packages/ca/c0/318d3248847dcc61768066b1d93509ee9af7acad498f01dfcc558afb134a/iterfiles-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf31327174fc95bead497a4ddd29bc9b77989d4c9041e14972a3cc3d0ed2556e",
          "md5": "ffe15b220e3df6a79a0b590d6a0efb80",
          "sha256": "aed4f3ff614f13887ce623168c58ebd7e7d664d1b73bf8817fb3944d307b5665"
        },
        "downloads": -1,
        "filename": "iterfiles-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ffe15b220e3df6a79a0b590d6a0efb80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7786,
        "upload_time": "2021-02-02T21:32:36",
        "upload_time_iso_8601": "2021-02-02T21:32:36.053907Z",
        "url": "https://files.pythonhosted.org/packages/bf/31/327174fc95bead497a4ddd29bc9b77989d4c9041e14972a3cc3d0ed2556e/iterfiles-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cac0318d3248847dcc61768066b1d93509ee9af7acad498f01dfcc558afb134a",
        "md5": "7d2891239ee8a83a2efc8dae72979369",
        "sha256": "f4ff293e75982b7063cb5a97f1bec7d79477297bb3a3b222ca2919ed03b2b76d"
      },
      "downloads": -1,
      "filename": "iterfiles-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d2891239ee8a83a2efc8dae72979369",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 5949,
      "upload_time": "2021-02-02T21:32:34",
      "upload_time_iso_8601": "2021-02-02T21:32:34.353292Z",
      "url": "https://files.pythonhosted.org/packages/ca/c0/318d3248847dcc61768066b1d93509ee9af7acad498f01dfcc558afb134a/iterfiles-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf31327174fc95bead497a4ddd29bc9b77989d4c9041e14972a3cc3d0ed2556e",
        "md5": "ffe15b220e3df6a79a0b590d6a0efb80",
        "sha256": "aed4f3ff614f13887ce623168c58ebd7e7d664d1b73bf8817fb3944d307b5665"
      },
      "downloads": -1,
      "filename": "iterfiles-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ffe15b220e3df6a79a0b590d6a0efb80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7786,
      "upload_time": "2021-02-02T21:32:36",
      "upload_time_iso_8601": "2021-02-02T21:32:36.053907Z",
      "url": "https://files.pythonhosted.org/packages/bf/31/327174fc95bead497a4ddd29bc9b77989d4c9041e14972a3cc3d0ed2556e/iterfiles-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}