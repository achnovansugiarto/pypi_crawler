{
  "info": {
    "author": "Fausto Branco",
    "author_email": "fausto.branco@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Print Box\n\nClass with functions to delimit a box on screen (With a border or not) and print strictly inside the created box, with scroll to the new lines.\n\n### Prerequisites\n\nDeveloped and tested in Linux and Python 3.6\n\n\n### Installing\n\n    pip3 install ebx_printbox\n\nor from source:\n\n    python3 -m pip install [your_path]/ebx_printbox/\n\n\n\n## Functions\n### pyBox\n\npyBox(x, y, x2, y2, border=False, clear_screen=False):\n\n**Description**: Create a instance of a box, with sizes, border and information if will perform a clear screen\n\n|Parameter|Description|\n|---|---|\n|**x**:|Line of box beginning on screen|\n|**y**:|Column of box beginning on screen|\n|**x2**:|Line of box end on screen|\n|**y2**:|Column of box end on screen|\n|**border**:|Draw a border (will reduce 2 lines and 2 columns of useful box)|\n|**clear_screen**:|Clear screen before draw a box|\n\nReturn: Box object\n\n---\n\n\n### box_clear\n\nbox_clear()\n\n**Description**: Clear buffer. Necessary on new print calls\n\nReturn: None\n\n---\n\n### box_print\n\nbox_print(txt_String, new_Line=True):\n\n**Description**: Print anything on a delimited box created by pyBox()\n\n|Parameter|Description|\n|---|---|\n|**txt_String**:|Text to print (accept Text_Color contants)|\n|**new_Line**:|Print on new line (True) or over last line (False)|\n\nReturn: None\n\n\n## Examples of use\n\n**example1.py**\n\n```\nimport ebx_printbox\nfrom time import sleep\n\n# Box(Line:16, Column: 1 to Line: 52, Column: 120 - No Border, No Clear Screen)\nobj_Box1 = ebx_printbox.pyBox(16, 1, 52, 120, False, True)\nobj_Box1.create_box()\n\nfor i in range(501):\n    obj_Box1.box_print('Text: ' + str(\n        i) + ' Lorem ipsum dolor sit amet, ad suas sale eam, falli suavitate corrumpit an sit. Latine viderer ex vis. '\n             'Ex maiorum fuisset aliquando vix, in cum dicant gloriatur. Ei elit argumentum cum, quod blandit an eum.')\n    sleep(1)  # Time in seconds.\n\n```\n\n### Results:\n\n[![asciicast](https://asciinema.org/a/414005.svg)](https://asciinema.org/a/414005)\n\n---\n\n**example2.py**\n```\nimport ebx_printbox\nfrom time import sleep\n\n\nclass text_color:\n    fg_Black = \"\\033[0;30m\"\n    fg_Red = \"\\033[0;31m\"\n    fg_Green = \"\\033[0;32m\"\n    fg_Yellow = \"\\033[0;33m\"\n    fg_Blue = \"\\033[0;34m\"\n    fg_Magenta = \"\\033[0;35m\"\n    fg_Cyan = \"\\033[0;36m\"\n    fg_White = \"\\033[0;37m\"\n    fg_Bright_Black = \"\\033[0;90m\"\n    fg_Bright_Red = \"\\033[0;91m\"\n    fg_Bright_Green = \"\\033[0;92m\"\n    fg_Bright_Yellow = \"\\033[0;93m\"\n    fg_Bright_Blue = \"\\033[0;94m\"\n    fg_Bright_Magenta = \"\\033[0;95m\"\n    fg_Bright_Cyan = \"\\033[0;96m\"\n    fg_Bright_White = \"\\033[0;97m\"\n    text_reverse = \"\\033[;7m\"\n    text_underline = \"\\033[1;4m\"\n    text_reset_underline = \"\\033[1;24m\"\n    text_reset = \"\\033[0;0m\"\n    bg_Black = \"\\033[1;40m\"\n    bg_Red = \"\\033[1;41m\"\n    bg_Green = \"\\033[1;42m\"\n    bg_Yellow = \"\\033[1;43m\"\n    bg_Blue = \"\\033[1;44m\"\n    bg_Magenta = \"\\033[1;45m\"\n    bg_Cyan = \"\\033[1;46m\"\n    bg_White = \"\\033[1;47m\"\n    bg_Bright_Black = \"\\033[1;100m\"\n    bg_Bright_Red = \"\\033[1;101m\"\n    bg_Bright_Green = \"\\033[1;102m\"\n    bg_Bright_Yellow = \"\\033[1;103m\"\n    bg_Bright_Blue = \"\\033[1;104m\"\n    bg_Bright_Magenta = \"\\033[1;105m\"\n    bg_Bright_Cyan = \"\\033[1;106m\"\n    bg_Bright_White = \"\\033[1;107m\"\n\n\nobj_Box1 = ebx_printbox.pyBox(16, 1, 20, 120, False, True)\nobj_Box1.create_box()\n\nnum_IP = dict()\nnum_IP['DC'] = 'dc-1'\nnum_IP['IP'] = '192.168.1.1'\n\nfor i in range(15):\n    obj_Box1.box_print(\n        '[' + text_color.fg_Bright_Red + 'BACKUPING ' + text_color.text_reset + '] JVM on %s  -  %s \\r' % (\n            '192.168.1.' + str(i), num_IP['IP']), True)\n    sleep(1)  # Time in seconds.\n    obj_Box1.box_print(\n        '[' + text_color.fg_Bright_Red + 'CHANGING  ' + text_color.text_reset + '] JVM on %s  -  %s \\r' % (\n            '192.168.1.' + str(i), num_IP['IP']), False)\n    sleep(1)  # Time in seconds.\n    obj_Box1.box_print(\n        '[' + text_color.fg_Bright_Red + 'APPLYING  ' + text_color.text_reset + '] JVM on %s  -  %s \\r' % (\n            '192.168.1.' + str(i), num_IP['IP']), False)\n    sleep(1)  # Time in seconds.\n    obj_Box1.box_print(\n        '[' + text_color.fg_Green + 'RESTARTING' + text_color.text_reset + '] JVM on %s  -  %s \\r' % (\n            '192.168.1.' + str(i), num_IP['IP']), False)\n    sleep(1)  # Time in seconds.\n\n\n```\n\n### Results:\n\n[![asciicast](https://asciinema.org/a/414011.svg)](https://asciinema.org/a/414011)\n\n---\n\n##Multiprocessing\n**example3.py** - 2 Boxes with multiprocessing\n```\nimport ebx_printbox\nfrom multiprocessing import Process\nfrom time import sleep\nimport os\n\nlst_ObjBox = []\nlst_Process = []\n\n# Box(Line:30, Column: 10 to Line: 40, Column: 100 - No Border, Clear Screen)\nlst_ObjBox.append(ebx_printbox.pyBox(30, 10, 40, 100, False, True))\nlst_ObjBox[0].create_box()\n\n# Box(Line:10, Column: 70 to  Line: 25, Column: 120 - With Border, No Clear Screen)\nlst_ObjBox.append(ebx_printbox.pyBox(10, 70, 25, 120, True, False))\nlst_ObjBox[1].create_box()\n\n\ndef multi_Box(int_Box):\n    for i in range(50):\n        lst_ObjBox[int_Box].box_print('Texto: ' + str(i) + ' - Process: ' + str(\n            os.getpid()) + ' Lorem ipsum dolor sit amet, ad suas sale eam, falli suavitate corrumpit an sit. Latine '\n                           'viderer ex vis. Ex maiorum fuisset aliquando vix, in cum dicant gloriatur. Ei elit '\n                           'argumentum cum, quod blandit an eum.')\n        sleep(1)  # Time in seconds.\n\n\nfor index in range(2):\n    obj_Process = Process(target=multi_Box, args=(index,))\n    lst_Process.append(obj_Process)\n    obj_Process.start()\n\n# Exit the completed processes\nfor obj_Process in lst_Process:\n    obj_Process.join()\n\n\n```\n\n###Results:\n\n[![asciicast](https://asciinema.org/a/414012.svg)](https://asciinema.org/a/414012)\n\n---\n\n## Versioning\n```\n=======================================================================================\n== Log Changes:\n== Date:            2021-05-13\n== Author:          Fausto Branco\n== Version:         1.0.0\n== Description:     Initial Version\n=======================================================================================\n```\n\n## License\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/faustobranco/ebx_printbox",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ebx-printbox",
    "package_url": "https://pypi.org/project/ebx-printbox/",
    "platform": "",
    "project_url": "https://pypi.org/project/ebx-printbox/",
    "project_urls": {
      "Bug Tracker": "https://github.com/faustobranco/ebx_printbox/issues",
      "Homepage": "https://github.com/faustobranco/ebx_printbox"
    },
    "release_url": "https://pypi.org/project/ebx-printbox/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "functions to delimit a box on screen (With a border or not) and print strictly inside the created box, with scroll to the new lines.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10356147,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af3124bf6f32ce1f100cda8ea9d975783f993323745b1d602130153ad67fbd2e",
          "md5": "49b190c14bafec753eebb4ef7b29a72f",
          "sha256": "e4090e9335333f39599526b0abd3bbba9a742d432b8a8a40ffb5a66cbb721645"
        },
        "downloads": -1,
        "filename": "ebx_printbox-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49b190c14bafec753eebb4ef7b29a72f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16575,
        "upload_time": "2021-05-14T12:12:40",
        "upload_time_iso_8601": "2021-05-14T12:12:40.923141Z",
        "url": "https://files.pythonhosted.org/packages/af/31/24bf6f32ce1f100cda8ea9d975783f993323745b1d602130153ad67fbd2e/ebx_printbox-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6725b34e283c25610a9b11f27d2e818584049d846e28f6053c1f405b8593eb54",
          "md5": "0153274f55c24f17fafe483f990d17c4",
          "sha256": "9a6f88cc70d00ce5362ad7d152ea6d2167d317897c01a84a894d979321ee483e"
        },
        "downloads": -1,
        "filename": "ebx_printbox-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0153274f55c24f17fafe483f990d17c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19059,
        "upload_time": "2021-05-14T12:12:42",
        "upload_time_iso_8601": "2021-05-14T12:12:42.510321Z",
        "url": "https://files.pythonhosted.org/packages/67/25/b34e283c25610a9b11f27d2e818584049d846e28f6053c1f405b8593eb54/ebx_printbox-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af3124bf6f32ce1f100cda8ea9d975783f993323745b1d602130153ad67fbd2e",
        "md5": "49b190c14bafec753eebb4ef7b29a72f",
        "sha256": "e4090e9335333f39599526b0abd3bbba9a742d432b8a8a40ffb5a66cbb721645"
      },
      "downloads": -1,
      "filename": "ebx_printbox-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "49b190c14bafec753eebb4ef7b29a72f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16575,
      "upload_time": "2021-05-14T12:12:40",
      "upload_time_iso_8601": "2021-05-14T12:12:40.923141Z",
      "url": "https://files.pythonhosted.org/packages/af/31/24bf6f32ce1f100cda8ea9d975783f993323745b1d602130153ad67fbd2e/ebx_printbox-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6725b34e283c25610a9b11f27d2e818584049d846e28f6053c1f405b8593eb54",
        "md5": "0153274f55c24f17fafe483f990d17c4",
        "sha256": "9a6f88cc70d00ce5362ad7d152ea6d2167d317897c01a84a894d979321ee483e"
      },
      "downloads": -1,
      "filename": "ebx_printbox-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0153274f55c24f17fafe483f990d17c4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19059,
      "upload_time": "2021-05-14T12:12:42",
      "upload_time_iso_8601": "2021-05-14T12:12:42.510321Z",
      "url": "https://files.pythonhosted.org/packages/67/25/b34e283c25610a9b11f27d2e818584049d846e28f6053c1f405b8593eb54/ebx_printbox-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}