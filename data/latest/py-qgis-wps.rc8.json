{
  "info": {
    "author": "David Marteau",
    "author_email": "david.marteau@3liz.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "# Py-QGIS-WPS \n\n[![PyPi version badge](https://badgen.net/pypi/v/py-qgis-wps)](https://pypi.org/project/py-qgis-wps/)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/py-qgis-wps)](https://pypi.org/project/py-qgis-wps/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/py-qgis-wps)](https://pypi.org/project/py-qgis-wps/)\n\n**New in 1.8: OGC api `processes` support** \n\nPy-QGIS-WPS is an implementation of the [Web Processing Service](https://www.ogc.org/standards/wps)\nstandard from the Open Geospatial Consortium based on the QGIS Processing API.\n\nSince 1.8 Py-QGIS-WPS supports [OGC API REST processes api](https://ogcapi.ogc.org/processes/)\n\nThis implementation allows you to expose and run on a server:\n* QGIS Processing algorithms available on Desktop\n* QGIS Processing models and scripts\n* QGIS plugins having a Processing provider according to their `metadata.txt`file\n\nIt is written in Python and was originally a fork of [PyWPS](https://pywps.org/).\n\nRequirements and limitations :\n\n- Python 3.7 minimum\n- Windows not officially supported\n- Redis server \n\n# Documentation\n\nLatest documentation is available on [docs.3liz.org](https://docs.3liz.org/py-qgis-wps/)\n\n# Why Py-QGIS-WPS ?\n\nPy-QGIS-WPS differs from [PyWPS](https://pywps.org/) in the following: \n\n* QGIS centric\n* Handle all request in asynchronous way: all jobs run in a non-blocking way, even\n  when synchronous operation is requested.\n* Use multiprocessing Pool to handle task queue instead instantiating a new process each time.\n* Uniform Logging with the 'logging' module\n* Implements OGC `processes` api.\n* Use Redis for asynchronous status storage.\n* Support streamed/chunked requests for stored data\n* Add extensions to WPS: TIMEOUT and EXPIRE\n* No Windows support\n\nAll these changes where not easy to implement without some drastic changes of the original code and we think\nthat it  deviates too much from the PyWPS original intentions.\n\nThat is, we have decided to fork the original project and go along with it. \n\nSo, we are really grateful to the original authors of PyWPS for the nice piece of software that helped us very much\nto start quickly this project.   \n\n## Why moving to Tornado instead WSGI\n\n* We need to support asyncio: asyncio requires a blocking running loop. This cannot be achieved simply in a WSGI architecture.\n* Tornado is fully integrated with native python `asyncio` library and provide a great framework for developing a http server.\n\n## Extensions to WPS\n\n### TIMEOUT extension\n\nSpecify the timeout for a process: if the process takes more than TIMEOUT seconds to run, the worker is then killed and an \nerror status is returned.\n\nSet the `TIMEOUT=<seconds>` in  GET requests.\n\nIn POST requests, set the `timeout=<seconds>` attribut in the `<ResponseDocument>` tag.\n\nThe server may configure maximum timeout value.\n\n\n### EXPIRE extension\n\nSpecify the expiration time for stored results: after EXPIRE seconds after the end of the wps process, all results will be\nflushed from disks and local cache. Trying to request the results again will return a 404 HTTP  error.\n\nSet the `EXPIRE=<seconds>` in  GET requests.\n\nIn POST requests, set the `expire=<seconds>` attribut int the `<ResponseDocument>` tag.\n\nThe server may configure maximum expiration value.\n\n\n### Status API\n\nNow implemented with the processes api:\nThe status REST api will return the list of the stored status for all running and terminated wps processes.\n\nExample for returning all stored status:\n```\nhttp://localhost:8080/jobs\n```\n\nExample for returning status for one given job from its id:\n```\nhttp://localhost:8080/jobs/<job_id>\n```\n\n## Extensions to `processes` api:\n\n### Files\n\n```\nhttp://localhost:8080/jobs/<job_id>/files\n```\n\n# Running QGIS processing\n\n## WPS input/output layer mapping\n\nWith QGIS desktop, QGIS processing algorithms usually apply on a QGIS source project and computed layers are displayed in the same context as the source project. \n\nPy-qgis-wps works the same way: a qgis project will be used as a source of input layers. \nThe difference is that, when an algorithm runs, it creates a qgis project file associated to the current task and register computed layers to it.  \n\nThe created project may be used as OWS source with Qgis Server. Output layers are returned as complex objects\nholding a reference to a WMS/WFS uri that can be used directly with Qgis server. The uri template is configurable \nusing the `server/wms_response_uri` configuration setting.\n\n## Contextualized input parameters\n\nTasks parameters are contextualized using the `MAP` query param. If a `MAP` parameters is given when\ndoing a `DescripProcess` requests, allowed values for input layers will be taken from the qgis source project\naccording the type of the input layers.  \n\nQGIS project (.qgs) files and project stored in Postgres databases are both supported.\n\nThe best practice is to always provide a `MAP` parameters and include the possible input layer in a qgs project. This way you\nmay connect whatever data source supported by qgis and use them as input data in a safe way.\n\nIf you need to pass data to your algorithm from client-side, prefer inputs file parameter and small payloads.\n\n\n# Dependencies\n\nSee [requirements.txt](requirements.txt) file.\n\n\n# Installation from python package\n\n*ADVICE*: You should always install in a python virtualenv. If you want to use system packages, setup your environment\nwith the `--system-site-packages` option.\n\nSee the official documentation for how to setup a python virtualenv:  https://virtualenv.pypa.io/en/stable/.\n\n## From source\n\nInstall in development mode\n```bash\nmake build\npip install -e .\n```\n\n## From python package server\n\n```bash\npip install py-qgis-wps\n```\n\n# Running the server\n\nThe server from a command line interface:\n\nThe server does not run as a daemon by itself, there are several ways to run a command as a daemon.\n\nFor example:\n\n* Use Supervisor http://supervisord.org/ will give you full control over logs and server status notifications.\n* Use the `daemon` command.\n* Use Docker\n\n# Running the server\n\n## Usage\n\n```\nusage: wpsserver [-h] [-d] [-c [PATH]]\n                 [--version] [-p PORT] [-b IP] [-u SETUID]\n\nWPS server\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d, --debug           Set debug mode  \n  -c [PATH], --config [PATH]\n                        Configuration file\n  --version             Return version number and exit\n  -p PORT, --port PORT  http port\n  -b IP, --bind IP      Interface to bind to\n  -u SETUID, --setuid SETUID\n                        uid to switch to\n```\n\n### Requests to OWS services \n\nThe OWS requests use the following format:  `/ows/?<ows_query_params>`\n\nExample:\n\n```\nhttp://myserver:8080/ows/?SERVICE=WPS&VERSION=1.0.0&REQUEST=GetCapabilities\n```\n\n## Configuration\n\n### From config ini file\n\nBy default, the wps server is not using any config file, but one can be used with the `--config` option.\nA config file is a simple ini file, a sample config file is given with the sources.\n\n### From environment variables\n\nThe server can be configured with environnement variables:\n\nConfiguration is done with environment variables:\n\n- QGSWPS\\_SERVER\\_WORKDIR: set the current dir processes, all processes will be running in that directory.\n- QGSWPS\\_SERVER\\_HOST\\_PROXY: When the service is behind a reverse proxy, set this to the proxy entrypoint.\n- QGSWPS\\_SERVER\\_PARALLELPROCESSES: Number of parallel process workers\n- QGSWPS\\_SERVER\\_RESPONSE\\_TIMEOUT: The max response time before killing a process.\n- QGSWPS\\_SERVER\\_RESPONSE\\_EXPIRATION: The max time (in seconds) the response from a WPS process will be available.\n- QGSWPS\\_SERVER\\_WMS\\_SERVICE\\_URL: The base url for WMS service. Default to <hosturl>/wms. Responses from processing will\nbe retourned as WMS urls. This configuration variable set the base url for accessing results.\n- QGSWPS\\_SERVER\\_RESULTS\\_MAP\\_URI\n\n### Logging\n\n- QGSWPS\\_LOGLEVEL: the log level, should be `INFO` in production mode, `DEBUG` for debug output. \n\n### REDIS storage configuration\n\n- QGSWPS\\_REDIS\\_HOST: The redis host\n- QGSWPS\\_REDIS\\_PORT: The redis port. Default to 6379\n- QGSWPS\\_REDIS\\_DBNUM: The redis database number used. Default to 0\n\n\n### Qgis project Cache configuration\n\n- QGSWPS\\_CACHE\\_ROOTDIR: Absolute path to the qgis projects root directory, projects referenced with the MAP parameter will be searched at this location\n\n### Processing configuration\n\n- QGSWPS\\_PROCESSSING\\_PROVIDERS\\_MODULE\\_PATH: Path to look for processing algorithms provider to publish, algorithms from providers specified here will be runnable as WPS processes.\n\n# Exposing algorithms as WPS services\n\nNote that since 1.1 , the `__algorithms__.py` method for declaring providers is no longer supported.\n\nProcessing providers following the same rules as  Qgis regular plugin with a special factory entrypoint: `WPSClassFactory(iface)` in the `__init__.py` file.\n\n### The `metadata.txt` file\n\nAs regular QGIS plugin, a metadata.txt file must be present with a special entry `wps=True` indicating that\nthe plugin is available as a WPS service provider.\n\n### Registering providers\n\nThe `iface`  parameter is a instance of `WPSServerInterface` which provide a \n`registerProvider( provider: QgsAlgorithmProvider, expose: bool = True) -> Any` method.\n\nExposed providers as WPS services must be registered using the `registerProvider` method\n\nExample:\n\n```python\ndef WPSClassFactory(iface: WPSServerInterface) -> Any:\n\n    from TestAlgorithmProvider1 import  AlgorithmProvider1\n    from TestAlgorithmProvider2 import  AlgorithmProvider2\n\n    iface.registerProvider( AlgorithmProvider1() )\n    iface.registerProvider( AlgorithmProvider2() )\n\n``` \n\n## Controlling what is exposed:\n\nProcessing algorithm with the flag [FlagHideFromToolbox](https://qgis.org/pyqgis/latest/core/QgsProcessingAlgorithm.html#qgis.core.QgsProcessingAlgorithm.FlagHideFromToolbox) set will not be exposed as WPS process.\n\nParameters with the flag [FlagHidden](https://qgis.org/pyqgis/latest/core/QgsProcessingParameterDefinition.html#qgis.core.QgsProcessingParameterDefinition.FlagHidden) set won't be exposed in a `DescribeProcess` request\n\n# References\n\n* [OGC standards](https://www.ogc.org/standards)\n* [OGC Api processes](https://ogcapi.ogc.org/processes/)\n* [Introduction to WPS](http://opengeospatial.github.io/e-learning/wps/text/basic-index.html)\n* [Py-qgis-server at FOSS4G 2019](https://www.youtube.com/watch?v=YL1tdcJwimA).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/3liz/py-qgis-wps",
    "keywords": "QGIS WPS OGC processing",
    "license": "",
    "maintainer": "David Marteau",
    "maintainer_email": "david.marteau@3liz.com",
    "name": "py-qgis-wps",
    "package_url": "https://pypi.org/project/py-qgis-wps/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-qgis-wps/",
    "project_urls": {
      "Homepage": "https://github.com/3liz/py-qgis-wps"
    },
    "release_url": "https://pypi.org/project/py-qgis-wps/1.8.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Py-Qgis-WPS is an implementation of the Web Processing Service standard from the Open Geospatial Consortium. qgis-wps is written in Python and is a fork of PyWPS 4.0.",
    "version": "1.8.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17475837,
  "releases": {
    "1.6.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a87bb54abd77d96bce6afcd5b7dd64d5b0a348ff7156eac99f1153bb21b2be8",
          "md5": "2d0a46af45511225ad272b2cca4c965a",
          "sha256": "f4f17e5098571a425c0ff67ac99b52a33de9368cc82f6df487aa26d5caf5cada"
        },
        "downloads": -1,
        "filename": "py-qgis-wps-1.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "2d0a46af45511225ad272b2cca4c965a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 769987,
        "upload_time": "2022-02-02T14:08:02",
        "upload_time_iso_8601": "2022-02-02T14:08:02.370274Z",
        "url": "https://files.pythonhosted.org/packages/8a/87/bb54abd77d96bce6afcd5b7dd64d5b0a348ff7156eac99f1153bb21b2be8/py-qgis-wps-1.6.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58aa82bea6d70a684eed5e936503221831ee75bce9a076d1682d80e7c19694bb",
          "md5": "55fa36a0bf70ef29460b96a054ddfbec",
          "sha256": "60a5c4de3a26c3986e26b9066b354b59599df8922eb4ec357b1da0966f8ab032"
        },
        "downloads": -1,
        "filename": "py-qgis-wps-1.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "55fa36a0bf70ef29460b96a054ddfbec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 773373,
        "upload_time": "2022-05-17T09:42:05",
        "upload_time_iso_8601": "2022-05-17T09:42:05.327144Z",
        "url": "https://files.pythonhosted.org/packages/58/aa/82bea6d70a684eed5e936503221831ee75bce9a076d1682d80e7c19694bb/py-qgis-wps-1.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b89e406e26d6b5acef24749a386efa7affad40eff319f1c815dc5d4131da1a42",
          "md5": "ceedc7392b58ee8905ff376cefcb495a",
          "sha256": "88d6a074887b5275d3eb82b0b9ef548b12a88a4cc262792782b2c54125c1ef90"
        },
        "downloads": -1,
        "filename": "py-qgis-wps-1.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ceedc7392b58ee8905ff376cefcb495a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 115801,
        "upload_time": "2022-09-19T18:38:09",
        "upload_time_iso_8601": "2022-09-19T18:38:09.783663Z",
        "url": "https://files.pythonhosted.org/packages/b8/9e/406e26d6b5acef24749a386efa7affad40eff319f1c815dc5d4131da1a42/py-qgis-wps-1.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4481f6b561210e51f9e720c14e9290a86dceda2ccc36953f1da9315063a1852",
          "md5": "2d6737b3f9c918ec6edefd44ca988b51",
          "sha256": "3bc01e612e4dde14edcef0a616d6ef0d33bef768da75348fcccd5ebab5818a2b"
        },
        "downloads": -1,
        "filename": "py-qgis-wps-1.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2d6737b3f9c918ec6edefd44ca988b51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 116000,
        "upload_time": "2022-09-27T09:08:01",
        "upload_time_iso_8601": "2022-09-27T09:08:01.660393Z",
        "url": "https://files.pythonhosted.org/packages/a4/48/1f6b561210e51f9e720c14e9290a86dceda2ccc36953f1da9315063a1852/py-qgis-wps-1.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdc6ca9f7096916778127cd8248e1cb96e3d54abd25c18d5ced48cc99ccb9038",
          "md5": "bd8410ac8ae4d83a9a76d9b169455dd8",
          "sha256": "c3efe43604ea6e230d07a63e43f8777dc3906b2e4ed30da04d593e2ab7b36e67"
        },
        "downloads": -1,
        "filename": "py-qgis-wps-1.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bd8410ac8ae4d83a9a76d9b169455dd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 787177,
        "upload_time": "2022-09-28T17:42:36",
        "upload_time_iso_8601": "2022-09-28T17:42:36.488402Z",
        "url": "https://files.pythonhosted.org/packages/cd/c6/ca9f7096916778127cd8248e1cb96e3d54abd25c18d5ced48cc99ccb9038/py-qgis-wps-1.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81d20fee9314d08ffe61217d072c0e7b2152fed290f47793911750c6a8dd0349",
          "md5": "7ce9e13bec5df951947229d27b4c0d4b",
          "sha256": "125f3387198e9f8e25fa7f447e6cf097193cb56608cbb2aef20d6249240eb6f1"
        },
        "downloads": -1,
        "filename": "py-qgis-wps-1.8.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7ce9e13bec5df951947229d27b4c0d4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 787854,
        "upload_time": "2022-12-08T20:16:40",
        "upload_time_iso_8601": "2022-12-08T20:16:40.902357Z",
        "url": "https://files.pythonhosted.org/packages/81/d2/0fee9314d08ffe61217d072c0e7b2152fed290f47793911750c6a8dd0349/py-qgis-wps-1.8.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0834495360ad082798d81406b2e0fac5c33d600cc558accde4e7eaacaf54a29",
          "md5": "eeadd7a11e74162d244cf5ed1026a0d6",
          "sha256": "f0bdfd6d4550adaf98f0017e71d397a27496c8fad30dd16d1fca50989f466849"
        },
        "downloads": -1,
        "filename": "py-qgis-wps-1.8.4.tar.gz",
        "has_sig": false,
        "md5_digest": "eeadd7a11e74162d244cf5ed1026a0d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 786146,
        "upload_time": "2022-12-16T20:15:11",
        "upload_time_iso_8601": "2022-12-16T20:15:11.692903Z",
        "url": "https://files.pythonhosted.org/packages/f0/83/4495360ad082798d81406b2e0fac5c33d600cc558accde4e7eaacaf54a29/py-qgis-wps-1.8.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "111739d03909a6703cc4b686ff480e5d1e82486d284b1642f9d939d6d7d86306",
          "md5": "4186d411a3bc90da8dd659ba0370160b",
          "sha256": "a994000ba7811fe2ebbbf63f766916475eb6f863df404539cefc31ce16576e5c"
        },
        "downloads": -1,
        "filename": "py-qgis-wps-1.8.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4186d411a3bc90da8dd659ba0370160b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 786358,
        "upload_time": "2023-03-28T09:49:52",
        "upload_time_iso_8601": "2023-03-28T09:49:52.640272Z",
        "url": "https://files.pythonhosted.org/packages/11/17/39d03909a6703cc4b686ff480e5d1e82486d284b1642f9d939d6d7d86306/py-qgis-wps-1.8.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "111739d03909a6703cc4b686ff480e5d1e82486d284b1642f9d939d6d7d86306",
        "md5": "4186d411a3bc90da8dd659ba0370160b",
        "sha256": "a994000ba7811fe2ebbbf63f766916475eb6f863df404539cefc31ce16576e5c"
      },
      "downloads": -1,
      "filename": "py-qgis-wps-1.8.5.tar.gz",
      "has_sig": false,
      "md5_digest": "4186d411a3bc90da8dd659ba0370160b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 786358,
      "upload_time": "2023-03-28T09:49:52",
      "upload_time_iso_8601": "2023-03-28T09:49:52.640272Z",
      "url": "https://files.pythonhosted.org/packages/11/17/39d03909a6703cc4b686ff480e5d1e82486d284b1642f9d939d6d7d86306/py-qgis-wps-1.8.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}