{
  "info": {
    "author": "Jelle Zijlstra",
    "author_email": "jelle.zijlstra@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "embedly2\n========\n\nThis is a fork of the unmaintained\n`embedly-python <https://github.com/embedly/embedly-python>`_\nlibrary. It aims to keep the package installable and functional\non new versions of Python.\n\nThe original README follows:\n\nPython library for interacting with Embedly's API. To get started sign up for\na key at `embed.ly/signup <https://app.embed.ly/signup>`_.\n\nInstall\n-------\nInstall with `Pip <http://www.pip-installer.org>`_::\n\n  pip install embedly2\n\nThis library supports Python 3.6 through 3.10.\n\nGetting Started\n---------------\nThis library is meant to be a dead simple way to interact with the Embedly API.\nThere are only 2 main objects, the ``Embedly`` client and the ``Url`` response\nmodel. Here is a simple example and then we will go into the objects::\n\n  >>> from embedly import Embedly\n  >>> client = Embedly(:key)\n  >>> obj = client.oembed('http://instagram.com/p/BL7ti/')\n  >>> obj['type']\n  u'photo'\n  >>> obj['url']\n  u'http://images.ak.instagram.com/media/2011/01/24/cdd759a319184cb79793506607ff5746_7.jpg'\n\n  >>> obj = client.oembed('http://instagram.com/error/error/')\n  >>> obj['error']\n  True\n\nEmbedly Client\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThe Embedly client is a object that takes in a key and optional User Agent\nand timeout parameters then handles all the interactions and HTTP requests\nto Embedly. To initialize the object, you'll need the key that you got when\nyou signed up for Embedly.\n::\n\n  >>> from embedly import Embedly\n  >>> client = Embedly('key')\n  >>> client2 = Embedly('key', 'Mozilla/5.0 (compatible; example-org;)')\n  >>> client3 = Embedly('key', 'Mozilla/5.0 (compatible; example-org;)', 30)\n  >>> client4 = Embedly('key', timeout=10, user_agent='Mozilla/5.0 (compatible; example-org;)')\n\nThe client object now has a bunch of different methods that you can use.\n\n``oembed``\n  Corresponds to the `oEmbed endpoint\n  <http://embed.ly/docs/embed/api/endpoints/1/oembed>`_. Passes back an object\n  that allows you to retrieve a title, thumbnail, description and the embed\n  html::\n\n    >>> client.oembed('http://vimeo.com/18150336')\n    <embedly.models.Url at 0x10223d950>\n\n``extract``\n  Corresponds to the `Extract endpoint\n  <http://embed.ly/docs/extract/api/endpoints/1/extract>`_. Passes back an\n  object that allows you to retrieve a title, description, content, html and a\n  list of images.::\n\n    >>> client.extract('http://vimeo.com/18150336')\n    <embedly.models.Url at 0x10223d950>\n\n``preview``\n  **Preview is no longer available to new users and has been replaced by extract.**\n\n  Corresponds to the `Preview endpoint\n  <http://embed.ly/docs/endpoints/1/preview>`_. Passes back a simple object\n  that allows you to retrieve a title, description, content, html and a list of\n  images.::\n\n    >>> client.preview('http://vimeo.com/18150336')\n    <embedly.models.Url at 0x10223d950>\n\n``objectify``\n  **Objectify is no longer available to new users and has been replaced by extract.**\n\n  Corresponds to the `Objectify endpoint\n  <http://embed.ly/docs/endpoints/2/objectify>`_. Passes back a simple object\n  that allows you to retrieve pretty much everything that Embedly knows about a\n  URL.::\n\n    >>> client.objectify('http://vimeo.com/18150336')\n    <embedly.models.Url at 0x10223d950>\n\nThe above functions all take the same arguements, a URL or a list of URLs and\nkeyword arguments that correspond to Embedly's `query arguments\n<http://embed.ly/docs/endpoints/arguments>`_. Here is an example::\n\n  >>> client.oembed(['http://vimeo.com/18150336',\n    'http://www.youtube.com/watch?v=hD7ydlyhvKs'], maxwidth=500, words=20)\n\nThere are some supporting functions that allow you to limit URLs before sending\nthem to Embedly. Embedly can return metadata for any URL, these just allow a\ndeveloper to only pass a subset of Embedly `providers\n<http://embed.ly/providers>`_. Note that URL shorteners like bit.ly or t.co are\nnot supported through these regexes.\n\n``regex``\n\n  If you would like to only send URLs that returns embed HTML via Embedly you\n  can match the URL to the regex before making the call. The matching providers\n  are listed at `embed.ly/providers <http://embed.ly/providers>`_::\n\n    >>> url = 'http://vimeo.com/18150336'\n    >>> client.regex.match(url)\n    <_sre.SRE_Match at 0x1017ba718>\n\n``is_supported``\n\n  This is a simplified version of ``regex``::\n\n    >>> url = 'http://vimeo.com/18150336'\n    >>> client.is_supported(url)\n    True\n\nUrl Object\n\"\"\"\"\"\"\"\"\"\"\nThe ``Url`` object is basically a response dictionary returned from\none of the Embedly API endpoints.\n::\n\n  >>> response = client.oembed('http://vimeo.com/18150336', words=10)\n\nDepending on the method you are using, the response will have different\nattributes. We will go through a few, but you should read the `documentation\n<http://embed.ly/docs>`_ to get the full list of data that is passed back.\n::\n\n  >>> response['type']\n  u'video'\n  >>> response['title']\n  u'Wingsuit Basejumping - The Need 4 Speed: The Art of Flight'\n  >>> response['provider_name']\n  u'Vimeo'\n  >>> response['width']\n  1280\n\nAs you can see the ``Url`` object works like a dictionary, but it's slightly\nenhanced. It will always have ``method`` and ``original_url`` attributes,\nwhich represent the Embedly request type and the URL requested.\n::\n\n  >>> response.method\n  'oembed'\n  >>> response.original_url\n  'http://vimeo.com/18150336'\n\n  # useful because the response data itself may not have a URL\n  # (or it could have a redirected link, querystring params, etc)\n  >>> response['url']\n  ...\n  KeyError: 'url'\n\nFor the Preview and Objectify endpoints the sub-objects can also be accessed in\nthe same manner.\n::\n\n  >>> obj = client.preview('http://vimeo.com/18150336', words=10)\n  >>> obj['object']['type']\n  u'video'\n  >>> obj['images'][0]['url']\n  u'http://b.vimeocdn.com/ts/117/311/117311910_1280.jpg'\n\nError Handling\n--------------\nIf there was an error processing the request, the ``Url`` object will contain\nan error. For example if we use an invalid key, we will get a 401 response back\n::\n\n  >>> client = Embedly('notakey')\n  >>> obj = client.preview('http://vimeo.com/18150336')\n  >>> obj['error']\n  True\n  >>> obj['error_code']\n  401\n\nChangelog\n---------\n\nVersion 0.6.0 (May 25, 2022)\n\n- Declare support for Python 3.6 through 3.10; drop support for Python 2,\n  3.2, and 3.3.\n- Fix installation with recent versions of setuptools.\n\nCopyright\n---------\nCopyright (c) 2013 Embed.ly, Inc. See LICENSE for details.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JelleZijlstra/embedly2",
    "keywords": "",
    "license": " Copyright (c) 2011, Embed.ly, Inc. All rights reserved.  Released under the 3-clause BSD license.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "embedly2",
    "package_url": "https://pypi.org/project/embedly2/",
    "platform": null,
    "project_url": "https://pypi.org/project/embedly2/",
    "project_urls": {
      "Homepage": "https://github.com/JelleZijlstra/embedly2"
    },
    "release_url": "https://pypi.org/project/embedly2/0.6.0/",
    "requires_dist": [
      "httplib2"
    ],
    "requires_python": "",
    "summary": "Python Library for Embedly",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13939475,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a24d6a932663a6d14e4b6eac6a231218642e648e6a9db370aaa14cf4fd10ab8",
          "md5": "1061156dd7b3aeeb00b4ffb027757079",
          "sha256": "8d09c8b7f833ba24f47cdf3336f2b023b311d58a0abf8113862b8e73811b1084"
        },
        "downloads": -1,
        "filename": "embedly2-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1061156dd7b3aeeb00b4ffb027757079",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9240,
        "upload_time": "2022-05-25T23:58:17",
        "upload_time_iso_8601": "2022-05-25T23:58:17.166997Z",
        "url": "https://files.pythonhosted.org/packages/5a/24/d6a932663a6d14e4b6eac6a231218642e648e6a9db370aaa14cf4fd10ab8/embedly2-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e50ef401b723d9146cbea8151c51cdb5934984c5faf34933763c9a8aa76e375d",
          "md5": "8de9ca60eb0127b2e0e23a0bf872d717",
          "sha256": "4d74396a1839dd85a16428907cbfb2aa0e499736b8e4a82f9df9c6733a54ff46"
        },
        "downloads": -1,
        "filename": "embedly2-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8de9ca60eb0127b2e0e23a0bf872d717",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10895,
        "upload_time": "2022-05-25T23:58:19",
        "upload_time_iso_8601": "2022-05-25T23:58:19.218372Z",
        "url": "https://files.pythonhosted.org/packages/e5/0e/f401b723d9146cbea8151c51cdb5934984c5faf34933763c9a8aa76e375d/embedly2-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a24d6a932663a6d14e4b6eac6a231218642e648e6a9db370aaa14cf4fd10ab8",
        "md5": "1061156dd7b3aeeb00b4ffb027757079",
        "sha256": "8d09c8b7f833ba24f47cdf3336f2b023b311d58a0abf8113862b8e73811b1084"
      },
      "downloads": -1,
      "filename": "embedly2-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1061156dd7b3aeeb00b4ffb027757079",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9240,
      "upload_time": "2022-05-25T23:58:17",
      "upload_time_iso_8601": "2022-05-25T23:58:17.166997Z",
      "url": "https://files.pythonhosted.org/packages/5a/24/d6a932663a6d14e4b6eac6a231218642e648e6a9db370aaa14cf4fd10ab8/embedly2-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e50ef401b723d9146cbea8151c51cdb5934984c5faf34933763c9a8aa76e375d",
        "md5": "8de9ca60eb0127b2e0e23a0bf872d717",
        "sha256": "4d74396a1839dd85a16428907cbfb2aa0e499736b8e4a82f9df9c6733a54ff46"
      },
      "downloads": -1,
      "filename": "embedly2-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8de9ca60eb0127b2e0e23a0bf872d717",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10895,
      "upload_time": "2022-05-25T23:58:19",
      "upload_time_iso_8601": "2022-05-25T23:58:19.218372Z",
      "url": "https://files.pythonhosted.org/packages/e5/0e/f401b723d9146cbea8151c51cdb5934984c5faf34933763c9a8aa76e375d/embedly2-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}