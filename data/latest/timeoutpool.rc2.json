{
  "info": {
    "author": "Gyorgy Kovacs",
    "author_email": "gyuriofkovacs@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development"
    ],
    "description": ".. -*- mode: rst -*-\n\n|CircleCI|_ |GitHub|_ |Codecov|_ |pylint|_ |ReadTheDocs|_ |PythonVersion|_ |PyPi|_ |License|_\n\n.. |CircleCI| image:: https://circleci.com/gh/analyticalmindsltd/timeoutpool.svg?style=svg\n.. _CircleCI: https://circleci.com/gh/analyticalmindsltd/timeoutpool\n\n.. |GitHub| image:: https://github.com/analyticalmindsltd/timeoutpool/actions/workflows/pythonpackage.yml/badge.svg\n.. _GitHub: https://github.com/analyticalmindsltd/timeoutpool/actions/workflows/pythonpackage.yml/badge.svg\n\n.. |Codecov| image:: https://codecov.io/gh/analyticalmindsltd/timeoutpool/branch/main/graph/badge.svg?token=5BKgmoADMw\n.. _Codecov: https://codecov.io/gh/analyticalmindsltd/timeoutpool\n\n.. |pylint| image:: https://img.shields.io/badge/pylint-10.0-brightgreen\n.. _pylint: https://img.shields.io/badge/pylint-10.0-brightgreen\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/timeoutpool/badge/?version=latest\n.. _ReadTheDocs: https://timeoutpool.readthedocs.io/en/latest/?badge=latest\n\n.. |PythonVersion| image:: https://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9%20%7C%203.10-brightgreen\n.. _PythonVersion: https://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9%20%7C%203.10-brightgreen\n\n.. |PyPi| image:: https://badge.fury.io/py/timeoutpool.svg\n.. _PyPi: https://badge.fury.io/py/timeoutpool\n\n.. |License| image:: https://img.shields.io/badge/license-MIT-brightgreen\n.. _License: https://img.shields.io/badge/license-MIT-brightgreen\n\n\ntimeoutpool: a process-pool with timeout per process\n====================================================\n\nLatest News\n-----------\n\n- the 0.1.0 version of the `timeoutpool` package implementing a process pool with timeout is released\n- 100% test coverage\n- 10.0 PEP8 conformancy (by pylint)\n\nIntroduction\n------------\n\nThe package implements a distributed processing pool with the possibility to time-out each job independently.\n\nThe use-case to be solved by the package: there is an algorithm to be executed (potentially on various datasets) with various parameterizations. The goal is to discover the operation/limitations of the algorithm under various circumstances. Some parameterizations or some special datasets might lead to extremely long runtimes. The user is interested in the outcome of those cases when the algorithm finishes in N seconds.\n\nIn order to utilize all available resources (usually more than one CPU cores), some multiprocessing solution is needed, which continouosly monitors the execution time of the jobs, and if the runtime of a job exceeds the timeout limit, shuts it down and starts the next job immediately.\n\nFor various reasons, we found that this functionality is not available out-of-the-box in the popular distributed computing toolkits of Python, like `multiprocessing`, `joblib`, `concurrent.futures`. Although these packages have some timeout functionalities, they are not applied at the job/process level, but for an entire set or pool of jobs, timing out the entire batch even if one job times out.\n\nThe `timeoutpool` package implements the aforementioned functionality in terms of threads from the `threading` package and processes from `multiprocessing` package. The user can specify a list of jobs to be executed (through an iterator or generator), the number of worker processes (N) and the timeout limit (T). The `TimeoutPool` object then starts N threads pooling the jobs to N worker processes, each monitored by watchdog threads. If the runtime of a job exceeds T, the process is killed and `None` is returned or some predefined method is executed.\n\nFor a complete documentation see https://timeoutpool.readthedocs.io/en/latest/\n\nExamples\n--------\n\nUsing the `TimeoutJobBase` interface\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn this example the `TimeoutJobBase` interface is used to execute jobs in\nparallel, each subject to timeout.\n\nFirst we import the neccessary classes and the `time` module.\n\n.. code-block:: python\n\n    import time\n    from timeoutpool import TimeoutPool, TimeoutJobBase\n\nCreating a job which has one argument: the sleep time. The function `execute`\nimplements the job to be carried out, in this case sleeping until a specific\ntime. The return value of the execute function is the result of the job,\nin this case a dictionary, however, any return type can be used.\nThe function `timeout` is called when the function `execute` is timed out.\nThe role of the function `timeout` is to return some default result for the timed-out job.\n\n.. code-block:: python\n\n    class SleepJob(TimeoutJobBase):\n        def __init__(self, sleep):\n            \"\"\"\n            Constructor of the job\n\n            Args:\n                sleep (float): the time to sleep\n            \"\"\"\n            TimeoutJobBase.__init__(self)\n            self.sleep = sleep\n\n        def execute(self):\n            \"\"\"\n            The job to be executed.\n\n            Returns:\n                dict: the result of the job\n            \"\"\"\n            begin = time.time()\n\n            time.sleep(self.sleep)\n\n            return {'sleep': self.sleep, 'slept': f'{time.time() - begin:.2f}'}\n\n        def timeout(self):\n            \"\"\"\n            The default result returned when the job times out.\n\n            Returns:\n                dict: the default result\n            \"\"\"\n            return {'sleep': self.sleep, 'slept': None}\n\nThen, 4 jobs are instantiated. Alternatively, one could use a generator as well instead of a list.\n\n.. code-block:: python\n\n    jobs = [SleepJob(sleep) for sleep in range(1, 5)]\n\nThe `TimeoutPool` is created to execute jobs, in this case using\n2 worker processes, each one subject to timeout with 2.5 seconds.\n\n.. code-block:: python\n\n    tpool = TimeoutPool(n_jobs=2, timeout=2.5)\n\nFinally, the jobs are executed in parallel calling the `execute` method\nof the pool object.\n\n.. code-block:: python\n\n    begin = time.time()\n\n    results = tpool.execute(jobs)\n\n    print(results)\n\n    # [{'sleep': 1, 'slept': '1.00'}, {'sleep': 2, 'slept': '2.00'},\n    #  {'sleep': 3, 'slept': None}, {'sleep': 4, 'slept': None}]\n\n    print(f'runtime: {time.time() - begin:.2f}')\n\n    # runtime 4.52\n\nWhat happens here is that there are 2 worker processes, the first two jobs\nstart executing the first two jobs, with sleep parameter 1 and 2, these\nare finishing successfully as the sleep times are less than the timeout 2.5s.\nAs soon as the first job finishes after about 1s, another process is started\nto execute the job with the sleep parameter 3s, and similarly, after 2s when\nthe second job finishes successfully, the fourth job is started with the sleep\nparameter 4s. Both of these jobs time out after 2.5s, therefore, the complete\nruntime must be around 4.5 seconds. The results reflect that the first\ntwo jobs returned the dictionary by the function `execute`, while the\njobs that timed out returned the dictionary by the function `timeout`.\n\nUsing the `.apply` interface\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe `timeoutpool` package also offers an `apply`-like interface, that do not\nneed the definition of job classes. The drawback of this approach is that\nwhen timeout happens, the return value for the job is `None`, which, in many\ncases is less useful than returning similar objects for both successful and\ntimed out jobs.\n\nIn this example, we illustrate the use of the `apply` interface through the\nsame sleeping job example.\n\nAgain, we import the neccessary class and the `time` module.\n\n.. code-block:: python\n\n    import time\n    from timeoutpool import TimeoutPool\n\nIn this case the jobs are represented in a list, like a list of\nsleep parameters. Altenatively, one could use a generator as well.\n\n.. code-block:: python\n\n    jobs = list(range(1, 5))\n\nThen, we define the job as a function which can take one arbitrary parameter.\n\n.. code-block:: python\n\n    def job(sleep):\n    \"\"\"\n    The job to be executed\n\n    Returns:\n        dict: the result of the job\n    \"\"\"\n    begin = time.time()\n\n    time.sleep(sleep)\n\n    return {'sleep': sleep, 'slept': f'{time.time() - begin:.2f}'}\n\nThe `TimeoutPool` is created to execute jobs, in this case using\n2 worker processes, each one subject to timeout with 2.5 seconds.\n\n.. code-block:: python\n\n    tpool = TimeoutPool(n_jobs=2, timeout=2.5)\n\nFinally, the jobs are executed in parallel calling the `apply` method\nof the pool object.\n\n.. code-block:: python\n\n    begin = time.time()\n\n    results = tpool.apply(job, jobs)\n\n    print(results)\n\n    # [{'sleep': 1, 'slept': '1.00'}, {'sleep': 2, 'slept': '2.00'},\n    #  None, None]\n\n    print(f'runtime: {time.time() - begin:.2f}')\n\n    # runtime 4.52\n\nWhat happens in the background is similar to the case of using the `SleepJob`,\nhowever, in this case, the jobs timed out return simply `None`.\n\nCollecting PIDs with `apply` and a generator\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn this example we collect the PIDs (process ID) of the processes started, and use a generator\nto specify the jobs.\n\nFirst, the neccessary modules are imported.\n\n.. code-block:: python\n\n    import os\n    from timeoutpool import TimeoutPool\n\nThen, the job function (`worker`) is defined. Note that the job function always gets\nthe job specification as an argument, therefore, even if it does not use its\nargument, it needs to be able to get it.\n\n.. code-block:: python\n\n    def worker(*_args):\n        return os.getpid()\n\nFinally, the `TimeoutPool` is instantiated and the parallel execution of jobs is tarted.\n\n.. code-block:: python\n\n    tpool = TimeoutPool(n_jobs=2, timeout=1)\n\n    results = tpool.apply(worker, range(0, 10))\n\n    print(results)\n\n    # [29644, 29647, 29651, 29654, 29657, 29660, 29663, 29666, 29669, 29672]\n\nNaturally, all process IDs are different as each job is executed in a separate process.\n\n\nA real-life-ish example\n^^^^^^^^^^^^^^^^^^^^^^^\n\nIn this example random forests with various parameterizations are fitted to\na dummy dataset. This example is closely related to the use case the package is designed\nfor. Various parameterizations of a random forest can lead to extremely long, unacceptable\nexecution times. Testing the classifier with various parameterizations and a timeout\nlimit can rationalize the evaluation of the classifier on a dataset.\n\nFirst, we import the necessary packages.\n\n.. code-block:: python\n\n    import numpy as np\n    import pandas as pd\n\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.metrics import roc_auc_score\n\n    from timeoutpool import TimeoutJobBase, TimeoutPool\n\nThe dummy dataset consists of 1000 rows of 5 random features.\n\n.. code-block:: python\n\n    N = 1000\n    N_DIM = 5\n\n    X = np.random.random_sample((N, N_DIM))\n    y = np.random.randint(2, size=(N))\n\nWe intend to test 6 parameterizations. Note that the larger the depth parameter is\nand the more estimators are used, the longer it takes to fit the forest. These 6\nparameterizations are on the edge of 1 second, however, on larger datasets with\neven more estimators and deeper trees one can expect that some parameterizations\ncan fit in seconds, others in hours. For the experiment, the number of jobs the\nrandom forest uses is set to 1 in order to avoid to inefficiency of excessive\nparallelization.\n\n.. code-block:: python\n\n    rf_params = [\n        {'max_depth': 3, 'n_estimators': 10, 'n_jobs': 1, 'random_state': 5},\n        {'max_depth': 3, 'n_estimators': 100, 'n_jobs': 1, 'random_state': 5},\n        {'max_depth': 3, 'n_estimators': 1000, 'n_jobs': 1, 'random_state': 5},\n        {'max_depth': 5, 'n_estimators': 10, 'n_jobs': 1, 'random_state': 5},\n        {'max_depth': 5, 'n_estimators': 100, 'n_jobs': 1, 'random_state': 5},\n        {'max_depth': 5, 'n_estimators': 1000, 'n_jobs': 1, 'random_state': 5}]\n\nThe `RFJob` object carries out the fitting and evaluation. The use of the\n`timeout` function enables the returning of some well-formed responses. The benefit\nof the approach over the `.apply` interface is that timeout would return `None` when\nthe operation times out, which would require further operations to figure out which\njobs have timed out.\n\n.. code-block:: python\n\n    class RFJob(TimeoutJobBase):\n        \"\"\"\n        A job fitting and evaluating a random forest parameterization\n        \"\"\"\n        def __init__(self, params):\n            \"\"\"\n            The constructor of the job\n\n            Args:\n                params (dict): a random forest parameterization\n            \"\"\"\n            self.params = params\n\n        def execute(self):\n            \"\"\"\n            Executes the job\n\n            Returns:\n                dict: the result of the evaluation\n            \"\"\"\n            rf = RandomForestClassifier(**self.params)\n            preds = rf.fit(X, y).predict_proba(X)\n            return {'auc': roc_auc_score(y, preds[:, 1]),\n                    'timeout': False,\n                    'params': self.params}\n\n        def timeout(self):\n            \"\"\"\n            The method called when a job times out\n\n            Returns:\n                dict: the timeout result\n            \"\"\"\n            return {'auc': -1,\n                    'timeout': True,\n                    'params': self.params}\n\nFinally, the `TimeoutPool` is instantiated and the jobs are executed through\na generator. The timeout value of 1s is for the sake of a quick example, in real problems\nmany more parameterizations and higher timeout limit values could be used.\n\n.. code-block:: python\n\n    tpool = TimeoutPool(n_jobs=2, timeout=1)\n\n    results = tpool.execute((RFJob(param) for param in rf_params))\n\n    pd.set_option('display.max_colwidth', 200)\n    print(pd.DataFrame(results))\n\n    #        auc  timeout                                                                  params\n    #0  0.643166    False    {'max_depth': 3, 'n_estimators': 10, 'n_jobs': 1, 'random_state': 5}\n    #1  0.711018    False   {'max_depth': 3, 'n_estimators': 100, 'n_jobs': 1, 'random_state': 5}\n    #2 -1.000000     True  {'max_depth': 3, 'n_estimators': 1000, 'n_jobs': 1, 'random_state': 5}\n    #3  0.753508    False    {'max_depth': 5, 'n_estimators': 10, 'n_jobs': 1, 'random_state': 5}\n    #4  0.842643    False   {'max_depth': 5, 'n_estimators': 100, 'n_jobs': 1, 'random_state': 5}\n    #5 -1.000000     True  {'max_depth': 5, 'n_estimators': 1000, 'n_jobs': 1, 'random_state': 5}\n\nDue to the structured outcome in the timeout cases, the results can be summarized easily.\nThe entire operation took less then 3 seconds (executing 2 jobs in parallel 3 times),\neven though fitting with 1000 estimators could take several seconds.\n\n\nContribution\n------------\n\n\nAny contribution is welcome!\n\n    * fork the GitHub repository at http://github.com/gykovacs/timeoutpool,\n    * open a discussion on GitHub,\n    * or contact me at gyuriofkovacs@gmail.com.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/gykovacs/timeoutpool",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gykovacs/timeoutpool",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Gyorgy Kovacs",
    "maintainer_email": "gyuriofkovacs@gmail.com",
    "name": "timeoutpool",
    "package_url": "https://pypi.org/project/timeoutpool/",
    "platform": null,
    "project_url": "https://pypi.org/project/timeoutpool/",
    "project_urls": {
      "Download": "https://github.com/gykovacs/timeoutpool",
      "Homepage": "https://github.com/gykovacs/timeoutpool"
    },
    "release_url": "https://pypi.org/project/timeoutpool/0.1.1/",
    "requires_dist": [
      "sphinx ; extra == 'docs'",
      "sphinx-gallery ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "matplotlib ; extra == 'docs'",
      "pandas ; extra == 'docs'",
      "pytest ; extra == 'tests'"
    ],
    "requires_python": ">=3.5",
    "summary": "Process pool with timeout for each individual job.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14923945,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f13f09da82367ba2e7900e87d71f38052ba219f055a2dd32087a846ec8503dd",
          "md5": "23cad88a29d241fb3ce4295def32d5b1",
          "sha256": "6e38abf9cf4b73647dfa767084f544a5622b6c46b4e5a3d7c2a9f6fc3641d8f8"
        },
        "downloads": -1,
        "filename": "timeoutpool-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23cad88a29d241fb3ce4295def32d5b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11754,
        "upload_time": "2022-08-29T12:37:48",
        "upload_time_iso_8601": "2022-08-29T12:37:48.621786Z",
        "url": "https://files.pythonhosted.org/packages/1f/13/f09da82367ba2e7900e87d71f38052ba219f055a2dd32087a846ec8503dd/timeoutpool-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "257c204039552769b5168e0dc4c9865e7416b7c712d86707fcad4fd7d4d23fa0",
          "md5": "34e69c8e890d6f06b00186d1a66fb473",
          "sha256": "cc05066d66bb46d8f1e78764d893361a0328c362f8d8a0816721fc3673c77901"
        },
        "downloads": -1,
        "filename": "timeoutpool-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34e69c8e890d6f06b00186d1a66fb473",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15460,
        "upload_time": "2022-08-29T12:37:51",
        "upload_time_iso_8601": "2022-08-29T12:37:51.141107Z",
        "url": "https://files.pythonhosted.org/packages/25/7c/204039552769b5168e0dc4c9865e7416b7c712d86707fcad4fd7d4d23fa0/timeoutpool-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d352e8307d1a3e44cccd00d75d1a4b3a32ff2990508599789dcbafa9160faed6",
          "md5": "6538cbfa10823b41f26e622e62899b23",
          "sha256": "5fda8255b56a21359d6790f6a95f6c9cb8b9d6abf98a7974b38a9e0f4ca6b64a"
        },
        "downloads": -1,
        "filename": "timeoutpool-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6538cbfa10823b41f26e622e62899b23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11753,
        "upload_time": "2022-08-29T12:50:54",
        "upload_time_iso_8601": "2022-08-29T12:50:54.707253Z",
        "url": "https://files.pythonhosted.org/packages/d3/52/e8307d1a3e44cccd00d75d1a4b3a32ff2990508599789dcbafa9160faed6/timeoutpool-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f71a39713a89e0adfe0ff1a11c91df6d337caa9876b42be812389a60cdc003d",
          "md5": "575fe8168d4be31228e5ac892edc5d6d",
          "sha256": "342e2aa75474d137cd6874f01e7cf2386232d98e4bc32f3bd8cf6b0c2c2e4d64"
        },
        "downloads": -1,
        "filename": "timeoutpool-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "575fe8168d4be31228e5ac892edc5d6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15463,
        "upload_time": "2022-08-29T12:50:56",
        "upload_time_iso_8601": "2022-08-29T12:50:56.450909Z",
        "url": "https://files.pythonhosted.org/packages/6f/71/a39713a89e0adfe0ff1a11c91df6d337caa9876b42be812389a60cdc003d/timeoutpool-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d352e8307d1a3e44cccd00d75d1a4b3a32ff2990508599789dcbafa9160faed6",
        "md5": "6538cbfa10823b41f26e622e62899b23",
        "sha256": "5fda8255b56a21359d6790f6a95f6c9cb8b9d6abf98a7974b38a9e0f4ca6b64a"
      },
      "downloads": -1,
      "filename": "timeoutpool-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6538cbfa10823b41f26e622e62899b23",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 11753,
      "upload_time": "2022-08-29T12:50:54",
      "upload_time_iso_8601": "2022-08-29T12:50:54.707253Z",
      "url": "https://files.pythonhosted.org/packages/d3/52/e8307d1a3e44cccd00d75d1a4b3a32ff2990508599789dcbafa9160faed6/timeoutpool-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f71a39713a89e0adfe0ff1a11c91df6d337caa9876b42be812389a60cdc003d",
        "md5": "575fe8168d4be31228e5ac892edc5d6d",
        "sha256": "342e2aa75474d137cd6874f01e7cf2386232d98e4bc32f3bd8cf6b0c2c2e4d64"
      },
      "downloads": -1,
      "filename": "timeoutpool-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "575fe8168d4be31228e5ac892edc5d6d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 15463,
      "upload_time": "2022-08-29T12:50:56",
      "upload_time_iso_8601": "2022-08-29T12:50:56.450909Z",
      "url": "https://files.pythonhosted.org/packages/6f/71/a39713a89e0adfe0ff1a11c91df6d337caa9876b42be812389a60cdc003d/timeoutpool-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}