{
  "info": {
    "author": "Jonah Yolles-Murphy",
    "author_email": "jonahym@mitre.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# python-strictly\n\nA run-time tool to enforce strict typing in python using type hints.\n<br/>\nWrite type-safe python code with confidence, focus on the problem you need to solve.\n\n## Usage Example:\nAll you need to do is decorate your functions with `strictly`.\n```python\nfrom strictly import *\n\n@strictly\ndef my_func(a: int, b: int) -> int:\n    return a + b\n```\n\n<details>\n<summary> Longer Example </summary>\n\n```python\nfrom typing import *\nfrom strictly import *\n\n# just decorate your annotated function with 'strictly'\n@strictly\ndef heyey(name: str, greeting: str='hey', *, punctuation: Union[str, None]='!') -> None:\n    \"\"\"\n    print a greeting to say hey.\n    this is a strictly typed function, whenever it is called strictly will\n    check the inputs against the type hints above;\n    \"\"\"\n    if punctuation is None:\n        punctuation = ''\n    print(greeting, name+punctuation)\n\n# runs fine\nheyey('Dingo')\n# this will also be fine\nheyey('Zoot', 'oh no, bad bad')\n# this should error and be caught by strictly\nheyey(5)\n```\n<details>\n<summary>Show Traceback</summary>\n\n```\nhey Dingo!\noh no, bad bad Zoot!\nTraceback (most recent call last):\n  File \"/Users/jonahym/Documents/thoughts/py_static/negative_tests/simple.py\", line 21, in <module>\n    heyey(5)\n  File \"/Users/jonahym/Documents/thoughts/py_static/strictly.py\", line 79, in strict_func\n    raise TypingError( # this Error is from strictly\nstrictly.TypingError:\ninvalid argument type in call of 'heyey', <function heyey at 0x7fd160203c10>\n        argument 'name' must be of type <str>\n        found argument of type <int> from value 5\n```\n</details>\n</details>\n\n### Tracebacks\nWhen a strictly typed function is passed an argument of the wrong type, strictly will raise a `TypingError` with a formatted message.\nFor example, this:\n```python\nmy_func(5, 3) # returns 8, no issue\nmy_func('Not a number', 'Definitely not a number!') # TypingError\n```\nwill have this traceback below:\n```\nTraceback (most recent call last):\n  File \"/Users/jonahym/Documents/strictly/strictly.py\", line 118, in strict_func\n    raise TypingError(*_ # this line is from strictly\nstrictly.TypingError:\ninvalid positional argument type in call of 'my_func', <function my_func at 0x7fef9ae751e0>\n        positional argument 'a' must be of type <int>\n        found positional argument of type <str> from the value 'Not a number'\n```\n\n### Installation\nstrictly is available through pypi, just pip install it using the command line.\n```bash\n$pip3 install strictly\n```\n\n## Incremental Integration\nUnannotated arguments will not be checked, this is meant to make the strictly typed transition as easy as possible.\nJust decorate any function you want strictly typed and fill in the argument and return annotations later.\n```python\nfrom strictly import *\n\n@strictly\ndef add(unchecked, checked: int) -> int:\n    return unchecked+checked\n\n# this will be fine\nadd(1, 2)\n\n# foo only allows ints to be returned\nadd(3.0, 4) # TypingError\n# if returning 'float's is desired functionality the return annotation should\n#   be from the typing module, EX: `Union[int, float]`\n\n# this will not work b/c `str`s and 'int's cannot be added together\nadd('5', 6) # concatenation error\n# this type error was not caught by strictly b/c the 'unchecked' argument was not annotated\n```\n<details>\n<summary>Show TypingError Traceback</summary>\n\n```\nTraceback (most recent call last):\n  File \"/Users/jonahym/Documents/thoughts/py_static/negative_tests/mixed_checking.py\", line 11, in <module>\n    foo(3.0, 4)\n  File \"/Users/jonahym/Documents/thoughts/py_static/strictly.py\", line 99, in strict_func\n    raise TypingError( # this line is from strictly\nstrictly.TypingError:\nincorrect return type from <function foo at 0x7f8c101f2af0>\n        expected type <int>\n        found return of type <float> from value 7.0\n```\n</details>\n\n<details>\n<summary>Show Concatenation Traceback</summary>\n\n```\nTraceback (most recent call last):\n  File \"/Users/jonahym/Documents/thoughts/py_static/negative_tests/mixed_checking.py\", line 16, in <module>\n    foo('5', 6)\n  File \"/Users/jonahym/Documents/thoughts/py_static/strictly.py\", line 97, in strict_func\n    func( # this line is a pass-through from strictly\n  File \"/Users/jonahym/Documents/thoughts/py_static/negative_tests/mixed_checking.py\", line 5, in foo\n    return unchecked+checked\nTypeError: can only concatenate str (not \"int\") to str\n```\n</details>\n\n\n## Type Checking Custom Classes\nUse strictly with custom classes as you would with a builtin class. Strictly has full support for single class type hints and limited support for Union and Generic notation\n(See: \"Using the Typing Module\" below).\n```python\nfrom strictly import *\n\nclass Scene():\n    # any function (including methods) can by strictly typed\n    @strictly\n    def __init__(self, number: int):\n        # b/c this is a method the self argument is not annotated\n        # since this is '__init__' the return type isn't annotated either\n        self.number = number\n\n# Use any class in annotations\n@strictly\ndef narrate(scene: Scene):\n    print(f\"on to scene {scene.number}, which is a smashing scene with some\"\\\n        +\" lovely acting, in which Arthur discovers a vital clue.\")\n\n# let's test with good inputs\nthe_scene = Scene(24)\nnarrate(the_scene)\n# now let's add some bad inputs\nthe_scene = Scene('not a number') # 1st TypingError\nnarrate('nothing') # 2nd TypingError\n```\n<details>\n<summary>Show 1st Traceback</summary>\n\n```\non to scene 24, which is a smashing scene with some lovely acting, in which Arthur discovers a vital clue.\nTraceback (most recent call last):\n  File \"/Users/jonahym/Documents/thoughts/py_static/examples/simple_custom_classes.py\", line 21, in <module>\n    the_scene = Scene('not a number') # TypingError\n  File \"/Users/jonahym/Documents/thoughts/py_static/strictly.py\", line 78, in strict_func\n    raise TypingError( # this Error is from strictly\nstrictly.TypingError:\ninvalid argument type in call of '__init__', <function Scene.__init__ at 0x7fc2b801c9d0>\n        argument 'number' must be of type <int>\n        found argument of type <str> from value 'not a number'\n```\n</details>\n\n<details>\n<summary>Show 2nd Traceback</summary>\n\n```\non to scene 24, which is a smashing scene with some lovely acting, in which Arthur discovers a vital clue.\nTraceback (most recent call last):\n  File \"/Users/jonahym/Documents/thoughts/py_static/examples/simple_custom_classes.py\", line 22, in <module>\n    narrate('nothing') # 2nd TypingError\n  File \"/Users/jonahym/Documents/thoughts/py_static/strictly.py\", line 78, in strict_func\n    raise TypingError( # this Error is from strictly\nstrictly.TypingError:\ninvalid argument type in call of 'narrate', <function narrate at 0x7f8b1827e3a0>\n        argument 'scene' must be of type <Scene>\n        found argument of type <str> from value 'nothing'\n```\n</details>\n\n## Using the Typing Module\nCurrently, strictly has limited support for generic notation from the typing module;\nsupported generics include `Dict[T, S]`, `List[T]`, `Tuple[T]`,`Union[T, S...]`,and `Optional[T]` for non-generic inputs.\n\nWork on making strictly completely compatible with the typing module is on going (See: \"Possible Future Features\" below).\n\n#### Iterable Generics\nIterable generics are treated as normal variables, only the argument itself is checked for the proper type, not the contents .\nFor example:\n```python\nfrom typing import *\nfrom strictly import *\n\n@strictly\ndef find_max(nums : List[int]) -> int:\n    return max(nums)\n# will work, strictly check that the input is a list\nfind_max([7, 2, 5, 9, 3])\n# however, it will not check the the objects in the list\nfind_max([7, 2, 5, 9, '9000'])\n```\n<details>\n<summary>Show Traceback</summary>\n\n```\nTraceback (most recent call last):\n  File \"/Users/jonahym/Documents/thoughts/py_static/negative_tests/generic_check.py\", line 10, in <module>\n    find_max([7, 2, 5, 9, '9000'])\n  File \"/Users/jonahym/Documents/thoughts/py_static/strictly.py\", line 97, in strict_func\n    func( # this line is a pass-through from strictly\n  File \"/Users/jonahym/Documents/thoughts/py_static/negative_tests/generic_check.py\", line 6, in find_max\n    return max(nums)\nTypeError: '>' not supported between instances of 'str' and 'int'\n```\n</details>\n<br/>\nThis functionality was intentionally excluded to reduce run-time burden. Check this kind of error conventionally:\n\n```python\nassert all([isinstance(num, int) for num in nums]), \"the input must only contain 'int's\"\n```\n\n## Distribution / Production\nProcedurally type checking every input at run-time slows down performance,\ninorder to combat this strictly can be disbaled completely.\n```python\nstrictly.disable = True\n```\nWhen strictly is disabled functions will not be altered, meaning even if strictly\nis turned back on any functions made while strictly was disbaled will not be checked.\n<details>\n<summary>Longer Example</summary>\n\n```python\nfrom strictly import *\n\n@strictly\ndef foo(x: int) -> int:\n    return x\n\nstrictly.disable = True # from here on all functions are unaltered\n\n@strictly\ndef bar(y: str) -> str:\n    return y\n\nfoo(None) # this will be checked\nbar(None) # this won't be checked\n```\n</details>\n\n## Issues and Features:\n- For both Issues and proposed features please feel free to message me on discord: `TG-Techie#5402`.\n- __Bugs__: If you find a bug/issue in strictly please file an issue on github with an example and explanation.\n- __Features__: If you have a proposed feature please fork the [strictly repo](https://github.com/TG-Techie/strictly) and make a pull request with the code or without code make an issue to discuss the possible feature.\n\n### License\nStrictly is distributed freely under the MIT License.\n\n#### Possible Future Features (no promises):\n - support for `ForwardRef` Hint from the typing module.\n - Add a `strictly.disable_checks` flag so that every function gets altered but won't be checked at run-time.\n - A `strictly.require_hints` flag to ensure every argument has a type hint (defaulting False).\n - An opt-in option feature to programmatically check the content of generics.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TG-Techie/strictly",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "strictly",
    "package_url": "https://pypi.org/project/strictly/",
    "platform": "",
    "project_url": "https://pypi.org/project/strictly/",
    "project_urls": {
      "Homepage": "https://github.com/TG-Techie/strictly"
    },
    "release_url": "https://pypi.org/project/strictly/1.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A run-time tool to enforce strict typing in python using type hints",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11350097,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f7ca2bf6fc3be2599d80506842ec9999762819cf15dcc26895a4111afbdcc35",
          "md5": "4d8995f1d778edfe45f6a30ea6077219",
          "sha256": "2441ae5104729957324cd36a8f2a2d6d7e65c49ee57c517b136e4131100b8047"
        },
        "downloads": -1,
        "filename": "strictly-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d8995f1d778edfe45f6a30ea6077219",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6633,
        "upload_time": "2020-07-22T23:20:59",
        "upload_time_iso_8601": "2020-07-22T23:20:59.987575Z",
        "url": "https://files.pythonhosted.org/packages/4f/7c/a2bf6fc3be2599d80506842ec9999762819cf15dcc26895a4111afbdcc35/strictly-1.1.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "exposed personal information "
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5f982c7ceb9346f6ce432773085e735e8ee45f655bb57ed62594c63a2cd6bad",
          "md5": "76baaf39055842b9bafe96ec90a81f0e",
          "sha256": "13ef19658e495f1ecf1b4386a9bb0e645ad7f92b1ee2b396efdd2ce1f7fb6e3f"
        },
        "downloads": -1,
        "filename": "strictly-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "76baaf39055842b9bafe96ec90a81f0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6108,
        "upload_time": "2020-07-22T23:21:02",
        "upload_time_iso_8601": "2020-07-22T23:21:02.699853Z",
        "url": "https://files.pythonhosted.org/packages/d5/f9/82c7ceb9346f6ce432773085e735e8ee45f655bb57ed62594c63a2cd6bad/strictly-1.1.0.tar.gz",
        "yanked": true,
        "yanked_reason": "exposed personal information "
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96e7aef816baf310ea582f12c2116c3b9c4fcca6290996bc60ccd5a96e31ad5f",
          "md5": "ff985bc07c27dd2f23838634643ea528",
          "sha256": "050405a93b07386dec6dd6207bd5cd784a1c0c5820a587437e9938104dfa547a"
        },
        "downloads": -1,
        "filename": "strictly-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff985bc07c27dd2f23838634643ea528",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6626,
        "upload_time": "2020-07-22T23:36:10",
        "upload_time_iso_8601": "2020-07-22T23:36:10.206906Z",
        "url": "https://files.pythonhosted.org/packages/96/e7/aef816baf310ea582f12c2116c3b9c4fcca6290996bc60ccd5a96e31ad5f/strictly-1.1.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "exposed personal information "
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21024a1b7c285ab926a5bc648c23e474b31d686f0bfcdf10a91aba34eb04149c",
          "md5": "40f63d0dda22e7976ed83d95e4082f9d",
          "sha256": "8e6d4a5571768759f353672a4243f16facf6680ad9f5e4ce246c036e148d8822"
        },
        "downloads": -1,
        "filename": "strictly-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "40f63d0dda22e7976ed83d95e4082f9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6121,
        "upload_time": "2020-07-22T23:36:12",
        "upload_time_iso_8601": "2020-07-22T23:36:12.290782Z",
        "url": "https://files.pythonhosted.org/packages/21/02/4a1b7c285ab926a5bc648c23e474b31d686f0bfcdf10a91aba34eb04149c/strictly-1.1.1.tar.gz",
        "yanked": true,
        "yanked_reason": "exposed personal information "
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eef283b699724b6616ac7ba0dc8eaf2900efefddb4c0c0a219b076000e08f5f",
          "md5": "f01862feedc02c3a2d1454ba58fc2f3d",
          "sha256": "8fae355da34fff558934dac9d7714471af3f322a3bc1e6c8623640ec4aec3a02"
        },
        "downloads": -1,
        "filename": "strictly-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f01862feedc02c3a2d1454ba58fc2f3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7151,
        "upload_time": "2020-07-24T04:08:04",
        "upload_time_iso_8601": "2020-07-24T04:08:04.302269Z",
        "url": "https://files.pythonhosted.org/packages/1e/ef/283b699724b6616ac7ba0dc8eaf2900efefddb4c0c0a219b076000e08f5f/strictly-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ad1ce77e73f42fb133277506cd30b75c12e29e6690681052bce0e773b85534d",
          "md5": "7cf70429a1855eba9f37a04e1cc1580b",
          "sha256": "f8d3a667e968601bdc9af29f4bdf841da8fbf229f66fbeb8f478829560518929"
        },
        "downloads": -1,
        "filename": "strictly-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7cf70429a1855eba9f37a04e1cc1580b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6775,
        "upload_time": "2020-07-24T04:08:05",
        "upload_time_iso_8601": "2020-07-24T04:08:05.586215Z",
        "url": "https://files.pythonhosted.org/packages/9a/d1/ce77e73f42fb133277506cd30b75c12e29e6690681052bce0e773b85534d/strictly-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1eef283b699724b6616ac7ba0dc8eaf2900efefddb4c0c0a219b076000e08f5f",
        "md5": "f01862feedc02c3a2d1454ba58fc2f3d",
        "sha256": "8fae355da34fff558934dac9d7714471af3f322a3bc1e6c8623640ec4aec3a02"
      },
      "downloads": -1,
      "filename": "strictly-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f01862feedc02c3a2d1454ba58fc2f3d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7151,
      "upload_time": "2020-07-24T04:08:04",
      "upload_time_iso_8601": "2020-07-24T04:08:04.302269Z",
      "url": "https://files.pythonhosted.org/packages/1e/ef/283b699724b6616ac7ba0dc8eaf2900efefddb4c0c0a219b076000e08f5f/strictly-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ad1ce77e73f42fb133277506cd30b75c12e29e6690681052bce0e773b85534d",
        "md5": "7cf70429a1855eba9f37a04e1cc1580b",
        "sha256": "f8d3a667e968601bdc9af29f4bdf841da8fbf229f66fbeb8f478829560518929"
      },
      "downloads": -1,
      "filename": "strictly-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7cf70429a1855eba9f37a04e1cc1580b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6775,
      "upload_time": "2020-07-24T04:08:05",
      "upload_time_iso_8601": "2020-07-24T04:08:05.586215Z",
      "url": "https://files.pythonhosted.org/packages/9a/d1/ce77e73f42fb133277506cd30b75c12e29e6690681052bce0e773b85534d/strictly-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}