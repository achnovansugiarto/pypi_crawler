{
  "info": {
    "author": "Thomas Gl√§√üle",
    "author_email": "thomas@coldfix.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: X11 Applications",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "License :: OSI Approved :: The Unlicense (Unlicense)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Desktop Environment",
      "Topic :: Multimedia",
      "Topic :: Utilities"
    ],
    "description": "cecmap\n======\n\nMaps CEC events to arbitrary keybindings for controlling your raspberrypi desktop via TV remote.\n\n\nInstall\n-------\n\nYou can install *cecmap* as user or root:\n\n**as user:**\n\n::\n\n    pip3 install --user cecmap\n\nAlso, make sure to add ``~/.local/bin`` to your PATH.\n\n\n**as root:**\n\n::\n\n    sudo pip3 install cecmap\n\nIn order to see notifications when switching modes, it's also necessary to\nhave a notification daemon installed. I recommend ``xfce4-notifyd``::\n\n    sudo apt install xfce4-notifyd\n\nI also recommend installing an onscreen keyboard, e.g.::\n\n    sudo apt install matchbox-keyboard\n\n\nUsage\n-----\n\nLaunch::\n\n    cecmap\n\n    # or:\n\n    python -m cecmap\n\n\nRunning as service\n------------------\n\nEnable running at startup::\n\n    systemctl --user enable cecmap\n\nStart as service::\n\n    systemctl --user start cecmap\n\n\nDefault keybindings\n-------------------\n\n*cecmap* comes configured with default a *Keyboard* and *Mouse* mode to get\nyou started (see `cecmap/config/default.cfg`_). You can freely change these\nkeybindings and add or override modes using the config format, see\nConfiguration_. The default keybindings are as follows:\n\n.. list-table::\n    :header-rows: 1\n\n    * - Key\n      - *Mouse* mode\n      - *Keyboard* mode\n\n    * - üîµ F1 blue\n      - switch mode\n      - switch mode\n    * - üî¥ F2 red\n      - launch ``matchbox-keyboard``\n      - ``<Win>``\n    * - üü¢ F3 green\n      - mouse wheel up\n      - launch kodi\n    * - üü° F4 yellow\n      - mouse wheel down\n      - launch ``chromium-browser``\n\n    * - ü°Ö up\n      - move cursor up\n      - ``<up>``\n    * - ü°á down\n      - move cursor down\n      - ``<down>``\n    * - ü°Ñ left\n      - move cursor left\n      - ``<left>``\n    * - ü°Ü right\n      - move cursor right\n      - ``<right>``\n\n    * - üÜó select\n      - left click\n      - ``<enter>``\n    * - ‚ñ∂ play\n      - middle click\n      - ``<media_play_pause>``\n\n    * - ‚è∏ pause\n      - right click\n      - ``<media_play_pause>``\n    * - ‚Æ® exit\n      - ``<esc>``\n      - ``<esc>``\n\n\nConfiguration\n-------------\n\n*cecmap* uses a simple config format to set keycodes and keybindings. The\nconfig to be used can be specified on the command line using the ``-c\nFILE.cfg`` option. The format is as follows:\n\n.. code-block:: cfg\n\n    [keycode]\n    KEY = <NUMBER>\n    ...\n\n    [mode.NAME]\n    KEY = <command> [<args>...]\n    ...\n\ne.g.:\n\n.. code-block:: cfg\n\n    [keycode]\n    left = 123\n    yellow = 321\n    ...\n\n    [mode.Keyboard]\n    left = key left\n    yellow = launch kodi\n    ...\n\nFor a more realistic example, see `cecmap/config/default.cfg`_.\n\nIf multiple *modes* are defined, make sure to define a keybinding that\nexecutes the ``switch`` command. This is most easily done in the special\nsection ``[mode.*]`` that can be used to define fallbacks bindings that apply\nglobally to all modes. *cecmap* will be started in the topmost declared mode, and\ncycle through modes in the order of their appearance.\n\nMultiple config files can be passed. In this case the configuration is merged\nsequentially with later files overriding earlier ones. This can be used to\ne.g. load keycodes and keybindings from different files::\n\n    cecmap \\\n        -c keycodes.cfg \\\n        -c mousemode.cfg \\\n        -c keymode.cfg\n\nIf no ``-c CONFIG`` option is passed on the command line, *cecmap* checks user\nand system, or default configuration and uses the first that exists:\n\n- ``$XDG_CONFIG_HOME/cecmap.cfg`` (defaulting to ``~/.config/cecmap.cfg``)\n- ``/etc/cecmap.cfg``\n- `cecmap/config/default.cfg`_ (distributed with the package)\n\n\n.. _cecmap/config/default.cfg: https://github.com/coldfix/cecmap/blob/main/cecmap/config/default.cfg\n\nCommands\n~~~~~~~~\n\nCurrently, the following commands are supported as right hand sides of\nkeybindings:\n\n.. list-table:: Commands\n\n    * - ``launch <command> [<args>...]``\n      - Start the given program. You can use shell-like quoting to pass\n        arguments with spaces in them.\n\n    * - ``toggle <command> [<args>...]``\n      - Start the given program with command line options. If we have\n        previously started the program, terminate it. Useful for commands such\n        as ``matchbox-keyboard``.\n\n    * - ``key <name>|<keycode>|@<letter>``\n      - Type the specified key. For a list of key names, see Key_.\n\n    * - ``button left|middle|right|<number>``\n      - Perform a mouse click using the specified button. More button names\n        are available, see Button_.\n\n    * - ``scroll up|down|left|right [<ticks>]``\n      - Scroll the mouse wheel in the specified direction a specified number\n        of scroll ticks (default = 1).\n\n    * - ``motion up|down|left|right``\n      - Perform a mouse cursor motion along the given direction while the key\n        is pressed.\n\n    * - ``switch [<mode>]``\n      - Switch to the specified ``<mode>``, or if this optional argument is\n        omitted, cycle through modes in the order of their appearance in the\n        config files.\n\n.. _Key: https://pynput.readthedocs.io/en/latest/keyboard.html#pynput.keyboard.Key\n.. _Button: https://github.com/moses-palmer/pynput/blob/master/lib/pynput/mouse/_xorg.py\n\n\nKeycodes\n~~~~~~~~\n\nIf the default keycodes do not work as expected, you can configure the\nkeycodes specific to your setting. In order to determine which key corresponds\nto which keycode, open a terminal and execute::\n\n    cec-client\n\nWatch the output as you press buttons, and write down the keycodes for the\nconfig file.\n\n\nReloading\n~~~~~~~~~\n\n*cecmap* can be told to reload the config by sending ``SIGUSR1``, e.g.::\n\n    pkill -USR1 cecmap\n\nor, if started as a service::\n\n    systemctl --user reload cecmap\n\nChanges\n-------\n\nv1.0.0\n~~~~~~\nDate: 28.11.2021\n\n- rename to cecmap\n- switch default keybindings for F1 (blue) and F4 (yellow)\n- add keycodes for all user control codes defined by CEC\n\n\nv0.0.5\n~~~~~~\nDate: 27.11.2021\n\n- fix KeyError if a motion-bound key was already pressed before starting\n  picec but released afterwards\n- set/decrease notification timeout to 3s\n- move code to picec.cli submodule\n- remove ability to load .py config files\n- add ability to load .cfg config files\n- add ability to reload config on the fly using SIGUSR1\n- add ability to merge config from multiple .cfg files\n- document config format\n\n\nv0.0.4\n~~~~~~\nDate: 26.11.2021\n\n- fix: TypeError: __init__() missing 1 required positional argument: 'app_name'\n- fix: AttributeError: 'dict' object has no attribute 'setup'\n- fix: AttributeError: module 'os' has no attribute 'setpgrgp'\n\n\nv0.0.3\n~~~~~~\nDate: 25.11.2021\n\n- spawn subprocesses in new process group\n  (to avoid tearing them down with us when we are stopped)\n- execute via ``bash -l`` in .service file to ensure PATH customizations are\n  available. This may fix an error when autostarting the service, and will\n  be useful for launching locally installed applications.\n- move code to package structure\n- use entrypoint for creating the executable\n- rename executable from ``picec.py`` to ``picec``\n- add command line option to change config\n  (undocumented so far, and the API will change!)\n- load config from ``~/.config/picec/config.py`` if exists\n- simplify config\n- bind ``matchbox-keyboard`` to red button in mouse mode\n- add notification about mode changes using notify2\n\n\nv0.0.2\n~~~~~~\nDate: 22.11.2021\n\n- replace xdotool by ``pynput``\n- make .service restart on failure\n\n\nv0.0.1\n~~~~~~\nDate: 22.11.2021\n\nInitial prototype:\n\n- hard coded keybindings\n- for LG TV with magic remote\n- \"mouse\" and \"keyboard\" mode for controlling the mouse or cursor keys\n- based on xdotool\n- includes an example .service file\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coldfix/cecmap",
    "keywords": "cec keybindings raspberry pi raspberry-pi tv remote control",
    "license": "Unlicense",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cecmap",
    "package_url": "https://pypi.org/project/cecmap/",
    "platform": "",
    "project_url": "https://pypi.org/project/cecmap/",
    "project_urls": {
      "Homepage": "https://github.com/coldfix/cecmap"
    },
    "release_url": "https://pypi.org/project/cecmap/1.0.0/",
    "requires_dist": [
      "cec",
      "pynput",
      "notify2"
    ],
    "requires_python": ">=3.7",
    "summary": "Maps CEC events to arbitrary keybindings for controlling your raspberrypi desktop via TV remote.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12148743,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d769308ac44085e82e7a410e24b0479a10cb7d857ad85705569c6ee2b7daa35e",
          "md5": "22a67389e6a3ebc60423914ffc283b8e",
          "sha256": "2928bab5c08c835faf429572b3a7af0d0f324b810ba4e9f88f48726cbb8c5427"
        },
        "downloads": -1,
        "filename": "cecmap-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22a67389e6a3ebc60423914ffc283b8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13773,
        "upload_time": "2021-11-28T22:18:46",
        "upload_time_iso_8601": "2021-11-28T22:18:46.768385Z",
        "url": "https://files.pythonhosted.org/packages/d7/69/308ac44085e82e7a410e24b0479a10cb7d857ad85705569c6ee2b7daa35e/cecmap-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79064019e2ba9eb365c0e8a9707e314f6000d9c546e94686dd361cbbb0f609ac",
          "md5": "bd8e9c1c440457ab26b4993911fbb292",
          "sha256": "1950a3886e6ee715753cc9365450446e284551b9b4116795bf442145e698f7fc"
        },
        "downloads": -1,
        "filename": "cecmap-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd8e9c1c440457ab26b4993911fbb292",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14466,
        "upload_time": "2021-11-28T22:18:48",
        "upload_time_iso_8601": "2021-11-28T22:18:48.005580Z",
        "url": "https://files.pythonhosted.org/packages/79/06/4019e2ba9eb365c0e8a9707e314f6000d9c546e94686dd361cbbb0f609ac/cecmap-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d769308ac44085e82e7a410e24b0479a10cb7d857ad85705569c6ee2b7daa35e",
        "md5": "22a67389e6a3ebc60423914ffc283b8e",
        "sha256": "2928bab5c08c835faf429572b3a7af0d0f324b810ba4e9f88f48726cbb8c5427"
      },
      "downloads": -1,
      "filename": "cecmap-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "22a67389e6a3ebc60423914ffc283b8e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13773,
      "upload_time": "2021-11-28T22:18:46",
      "upload_time_iso_8601": "2021-11-28T22:18:46.768385Z",
      "url": "https://files.pythonhosted.org/packages/d7/69/308ac44085e82e7a410e24b0479a10cb7d857ad85705569c6ee2b7daa35e/cecmap-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79064019e2ba9eb365c0e8a9707e314f6000d9c546e94686dd361cbbb0f609ac",
        "md5": "bd8e9c1c440457ab26b4993911fbb292",
        "sha256": "1950a3886e6ee715753cc9365450446e284551b9b4116795bf442145e698f7fc"
      },
      "downloads": -1,
      "filename": "cecmap-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bd8e9c1c440457ab26b4993911fbb292",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14466,
      "upload_time": "2021-11-28T22:18:48",
      "upload_time_iso_8601": "2021-11-28T22:18:48.005580Z",
      "url": "https://files.pythonhosted.org/packages/79/06/4019e2ba9eb365c0e8a9707e314f6000d9c546e94686dd361cbbb0f609ac/cecmap-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}