{
  "info": {
    "author": "Fabian Barteld",
    "author_email": "fabian.barteld@rub.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Factory manager\n\n`factory-manager` is a python package to create objects with their dependencies\nfrom descriptions in the form of a dictionary.\n\n## Example usage\n\nGiven the following hierarchy of Vehicles with and without a motor:\n\n```python\n>>> import abc\n>>>\n>>> class Vehicle(metaclass=abc.ABCMeta):\n...     def __init__(self):\n...         pass\n...     @abc.abstractmethod\n...     def getVehicleType(self):\n...         pass\n...\n>>> class Bicycle(Vehicle):\n...     name = 'bicycle'\n...     def getVehicleType(self):\n...         return 'Bicycle'\n...\n>>> class Engine(metaclass=abc.ABCMeta):\n...     def __init__(self):\n...         self.engine_type = self.name\n...     def getEngineType(self):\n...         return self.engine_type\n...\n>>> class GasolineEngine(Engine):\n...     name = 'gasoline'\n...\n>>> class ElectroEngine(Engine):\n...     name = 'electro'\n...\n>>> class DieselEngine(Engine):\n...     name = 'diesel'\n...\n>>> class MotorizedVehicle(Vehicle):\n...     def __init__(self, engine: Engine, registered_drivers:set = None):\n...         self.engine = engine\n...         if registered_drivers is None:\n...             self.registered_drivers = set()\n...         else:\n...             self.registered_drivers = registered_drivers\n...\n>>> class Car(MotorizedVehicle):\n...     name = 'car'\n...     def getVehicleType(self):\n...         return 'Car' + ' with ' + self.engine.getEngineType() + ' engine'\n...\n>>> class Motorbike(MotorizedVehicle):\n...     name = 'motorbike'\n...     def getVehicleType(self):\n...         return 'Motorbike' + ' with ' + self.engine.getEngineType() + ' engine'\n```\n\nWe can now use a `FactoryManager` to create a factory for vehicles:  \n\n```python\n>>> from factory_manager import FactoryManager\n>>> my_factories = FactoryManager()\n>>> my_factories.add_object_hierarchy(\"vehicle\", Vehicle)\n```\n\nThe `FactoryManager` searches for subclasses of the given class (`Vehicle`) and\nuses the existence of the class attribute `name` as an indicator that the subclass should be a type of a vehicle that the factory provides.\nIn the given example `my_factories` can be used to create bicycles, cars and motorbikes.\n\nA bicycle can be instantiated as follows (either by using the bass class or the name given to `add_object_hierarchy` to select the factory):\n\n```python\n>>> my_factories.create_from_cls(Vehicle, {'type': 'bicycle'}).getVehicleType()\n'Bicycle'\n>>> my_factories.create_from_name('vehicle', {'type': 'bicycle'}).getVehicleType()\n'Bicycle'\n```\n\nWhen creating a car, an engine has to be provided:\n\n```python\n>>> my_factories.create_from_name('vehicle', {'type': 'car'}).getVehicleType()\nTraceback <...>\nValueError: Missing options [engine] for vehicle of type car\n>>> my_factories.create_from_name('vehicle', {'type': 'car', 'options': {\n...     'engine': ElectroEngine()}}).getVehicleType()\n'Car with electro engine'\n```\n\nNow we can also register `Engine` with the `FactoryManager`:\n\n```python\n>>> my_factories.add_object_hierarchy(\"engine\", Engine)\n```\n\nThis allows us to create an engine similar to vehicle:\n\n\n```python\n>>> my_factories.create_from_name('engine', {'type': 'electro'}).getEngineType()\n'electro'\n```\n\nBut it also allows us to create a vehicle and an engine in one step as `my_factories` knows from the type hint that a motorized vehicle needs an engine:\n\n```python\n>>> my_factories.create_from_name('vehicle', {'type': 'car', 'options': {\n...     'engine': {'type': 'electro'}}}).getVehicleType()\n'Car with electro engine'\n```\n\n`registered_drivers` does not need to be provided as it has a default value.\nBut it can be provided:\n\n```python\n>>> my_factories.create_from_name('vehicle', {'type': 'car', 'options': {\n...     'engine': {'type': 'electro'}}}).registered_drivers\nset()\n>>> sorted(\n...     my_factories.create_from_name('vehicle', {'type': 'car', 'options': {\n...         'engine': {'type': 'electro'},\n...         'registered_drivers': set(['driver1', 'driver2'])\n...     }}).registered_drivers)\n['driver1', 'driver2']\n```\n\nThere is no type checking, so the value for `registered_drivers` does not have to be a `set`:\n\n```python\n>>> my_factories.create_from_name('vehicle', {'type': 'car', 'options': {\n...    'engine': {'type': 'electro'},\n...    'registered_drivers': ['driver1', 'driver2', 'driver1']\n... }}).registered_drivers\n['driver1', 'driver2', 'driver1']\n```\n\nHowever, we can register a factory method for the type `set`.\nNow, the factory for `Vehicle` will call this factory for the provided\nattribute if it is not already a `set`:\n\n```python\n>>> my_factories.add_factory_method(set, lambda s: set(s))\n```\n\n```python\n>>> sorted(\n...     my_factories.create_from_name('vehicle', {'type': 'car', 'options': {\n...         'engine': {'type': 'electro'},\n...         'registered_drivers': ['driver1', 'driver2', 'driver1']\n...     }}).registered_drivers)\n['driver1', 'driver2']\n```\n\nThis is useful if the dictionary used to instantiate the object comes\nfrom json data.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fab-bar/factory-manager",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "factory-manager",
    "package_url": "https://pypi.org/project/factory-manager/",
    "platform": "",
    "project_url": "https://pypi.org/project/factory-manager/",
    "project_urls": {
      "Homepage": "https://github.com/fab-bar/factory-manager"
    },
    "release_url": "https://pypi.org/project/factory-manager/0.1.0/",
    "requires_dist": [
      "typing-inspect"
    ],
    "requires_python": ">=3.6",
    "summary": "A package to create objects with their dependencies from descriptions in the form of a dictionary",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7342727,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7464edc6121b57fa24ef1adad3b11c7f8fb19efdfe99d30ecddedfb950075802",
          "md5": "b02b1afed0d055539d9616c0dcc86936",
          "sha256": "4b3658b913e5fccc996fc426d4444e2335ef22b0ba1d648735c8c8af00a66aea"
        },
        "downloads": -1,
        "filename": "factory_manager-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b02b1afed0d055539d9616c0dcc86936",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5206,
        "upload_time": "2020-05-28T09:03:54",
        "upload_time_iso_8601": "2020-05-28T09:03:54.215075Z",
        "url": "https://files.pythonhosted.org/packages/74/64/edc6121b57fa24ef1adad3b11c7f8fb19efdfe99d30ecddedfb950075802/factory_manager-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c83654cb7a91b6cca80da5c8987eca92b397f7f3501c7ca9ca53a9f322ea7d8d",
          "md5": "4b06a7e40833008fe022cf5b80874003",
          "sha256": "84275a826cdd7efed289f2d49ffd46c57565cd1453edce1e5f50a81092952aba"
        },
        "downloads": -1,
        "filename": "factory-manager-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b06a7e40833008fe022cf5b80874003",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4180,
        "upload_time": "2020-05-28T09:03:56",
        "upload_time_iso_8601": "2020-05-28T09:03:56.778213Z",
        "url": "https://files.pythonhosted.org/packages/c8/36/54cb7a91b6cca80da5c8987eca92b397f7f3501c7ca9ca53a9f322ea7d8d/factory-manager-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7464edc6121b57fa24ef1adad3b11c7f8fb19efdfe99d30ecddedfb950075802",
        "md5": "b02b1afed0d055539d9616c0dcc86936",
        "sha256": "4b3658b913e5fccc996fc426d4444e2335ef22b0ba1d648735c8c8af00a66aea"
      },
      "downloads": -1,
      "filename": "factory_manager-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b02b1afed0d055539d9616c0dcc86936",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5206,
      "upload_time": "2020-05-28T09:03:54",
      "upload_time_iso_8601": "2020-05-28T09:03:54.215075Z",
      "url": "https://files.pythonhosted.org/packages/74/64/edc6121b57fa24ef1adad3b11c7f8fb19efdfe99d30ecddedfb950075802/factory_manager-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c83654cb7a91b6cca80da5c8987eca92b397f7f3501c7ca9ca53a9f322ea7d8d",
        "md5": "4b06a7e40833008fe022cf5b80874003",
        "sha256": "84275a826cdd7efed289f2d49ffd46c57565cd1453edce1e5f50a81092952aba"
      },
      "downloads": -1,
      "filename": "factory-manager-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4b06a7e40833008fe022cf5b80874003",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4180,
      "upload_time": "2020-05-28T09:03:56",
      "upload_time_iso_8601": "2020-05-28T09:03:56.778213Z",
      "url": "https://files.pythonhosted.org/packages/c8/36/54cb7a91b6cca80da5c8987eca92b397f7f3501c7ca9ca53a9f322ea7d8d/factory-manager-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}