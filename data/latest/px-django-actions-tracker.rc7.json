{
  "info": {
    "author": "Alex Tkachenko",
    "author_email": "preusx.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Actions tracking API\n\n## Installation\n\n```sh\npip install px-django-actions-tracker\n```\n\nIn `settings.py`:\n\n```python\nINSTALLED_APPS += [\n  'pxd_actions_tracker',\n  # If wouldn't use database storage - do not add this application here:\n  'pxd_actions_tracker.storages.db',\n]\n\nMIDDLEWARE = [\n  # Tracking key generation middleware should be \"as first as possible\" in your\n  # middlewares list. It generates base tracking code.\n  'pxd_actions_tracker.middleware.tracking_middleware',\n  *MIDDLEWARE,\n]\n\n# To configure tracker you my pass different values, instead of defaults here:\nPXD_ACTIONS_TRACKER = {\n  # Determines how to commit logs:\n  'OPERATE': 'straight', # 'straight' | 'threading'\n  # Method that used to save data.\n  'SAVER': 'pxd_actions_tracker.storages.db.storage.save',\n  # Set of fields that should be replaced with a placeholder:\n  'SENSITIVE_FIELDS': {\n    'api',\n    'token',\n    'key',\n    'secret',\n    'password',\n    'signature',\n    'authorization',\n  },\n  # Placeholder to replace sensitive data with.\n  'SENSITIVE_PLACEHOLDER': '*******',\n}\n```\n\n## Usage\n\n### Requests tracking\n\nWe have a builtin tracker for python `requests` library. As it is a commonly-used way to do something using http.\n\n```python\nimport requests\n\nfrom pxd_actions_tracker.trackers import track_requests\n\nfrom ..const import DOMAIN\n\n# It returns response object and newly created log identifier.\nresponse, log_id = track_requests.track(\n  # Any domain for request \"tagging\".\n  DOMAIN | 'SOME-URL-REQUEST',\n  # Resolver function that returns a `requests` library response instance.\n  lambda: requests.post(url, json={}, allow_redirects=True),\n  # Additional arguments for passed resolvers:\n  args=(),\n  # Additional keyword arguments for passed resolvers:\n  kwargs={},\n  # Message formatter function:\n  message_format=track_requests.MESSAGE_FORMAT,\n  # Resolver whether this response should be tracked or not:\n  # Be default it's logging only if response is not 200.\n  should_track=track_requests.should_track_non_200,\n  # There is also a built in checker to log every request:\n  should_track=track_requests.should_track_all,\n  # Function that parses response into a saved `detail` dict.\n  # You may replace it to save additional info or decrease that information.\n  detail_resolver=track_requests.resolve_log_detail,\n)\n```\n\n### Django view tracker\n\nThere are three ways of handling django views:\n\n#### 1. Most \"low-level\": `track`\n\nIt can be used manually whenever you need. But with a small cost of additional \"handling\" code.\n\n```python\nimport requests\n\nfrom pxd_actions_tracker.trackers import track_views\n\nfrom ..const import DOMAIN\n\n# It returns log identifier.\nlog_id = track_views.track(\n  # Any domain for request \"tagging\".\n  DOMAIN | 'SOME-REQUEST',\n  # Django's request.\n  request,\n  # Django's response. Optional.\n  response=response,\n  # Exception, if occurred.\n  error=None or Exception(),\n  # Additional arguments for passed resolvers:\n  args=(),\n  # Additional keyword arguments for passed resolvers:\n  kwargs={},\n  # Message formatter function:\n  message_format=track_views.MESSAGE_FORMAT,\n  # Resolver whether this action should be tracked or not:\n  # Be default it's logging only if response is not 200. And no `error` passed.\n  should_track=track_views.should_track_non_200,\n  # There is also a built in checker to log every request:\n  should_track=track_views.should_track_all,\n  # Function that parses response into a saved `detail` dict.\n  # You may replace it to save additional info or decrease that information.\n  detail_resolver=track_views.resolve_log_detail,\n)\n```\n\nOr without additional boilerplate code you may track is as `track_requests.track` mechanics with response resolver:\n\n\n```python\n# It returns log identifier.\nresponse, log_id = track_views.track_middleware(\n  # Any domain for request \"tagging\".\n  DOMAIN | 'SOME-REQUEST',\n  # Response resolver. It can be a view function, for example.\n  lambda request, *a, **k: HttpResponse(''),\n  # Django's request.\n  request,\n  # Other tracking function(for example with `partial` parameters).\n  tracker=track_views.track,\n  # Additional arguments for passed resolvers:\n  args=(),\n  # Additional keyword arguments for passed resolvers:\n  kwargs={},\n)\n```\n\n#### 2. Decorator: `decorate`\n\nJust a view function decorator:\n\n```python\n@track_views.decorate(\n  # Any domain for view \"tagging\".\n  DOMAIN | 'SOME-VIEW',\n  # Other tracking function(for example with `partial` parameters).\n  tracker=track_views.track,\n)\ndef view(request: HttpRequest):\n  return HttpResponse('')\n```\n\n#### 3. Middleware factory: `create_middleware`\n\nOr you may just create a middleware that will handle all your views:\n\n```python\nfrom px_domains import Domain\n\nview_request_logger_middleware = track_views.create_middleware(\n  # Base domain for a tracked views\n  Domain('VIEW'),\n  # Other tracking function(for example with `partial` parameters).\n  tracker=track_views.track,\n)\n```\n\nAnd in `settings.py`:\n```python\nMIDDLEWARE = [\n  *MIDDLEWARE,\n  'your_app.middleware.view_request_logger_middleware',\n]\n```\n\n### Tracking logger\n\nThere is also a built in logging class to track any log messages you need:\n\n```python\nLOGGING = {\n  'version': 1,\n  'disable_existing_loggers': False,\n  'handlers': {\n    # Adding handler class, for example for error logging:\n    'actions_tracker': {\n      'level': 'ERROR',\n      'class': 'pxd_actions_tracker.trackers.track_logs.ActionsTrackerHandler',\n    },\n  },\n  'root': {\n    'handlers': ['actions_tracker'],\n    'level': 'DEBUG',\n  },\n}\n```\n\n\n### Tracking codes\n\nYou may add additional tracking codes to understand better what user used to do before/after.\n\n```python\nfrom pxd_actions_tracker.cases import track, uuid_track\n\nwith track('TRACKING-CODE'):\n  do_something()\n\n# Same track but with uuid code:\nwith uuid_track():\n  do_something()\n```\n\n### Signals\n\n```python\n# General\n\n# Fires when new log entry created.\npxd_actions_tracker.signals.log_created\n\n# Fires when new tracking code added to a stack.\npxd_actions_tracker.signals.tracking_enter\n\n# Fires when new tracking code removed from a stack.\npxd_actions_tracker.signals.tracking_exit\n\n# DB storage\n\n# Fires when new log entry stored in database.\npxd_actions_tracker.storages.db.signals.log_stored\n```\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.1.6]\n### Fixed\n- Tracking middleware log_id return issue.\n\n## [0.1.5]\n### Fixed\n- Python 3.7 `lru_cache` compatibility with.\n\n## [0.1.4]\n### Fixed\n- Request data gathering issue on `RawPostDataException` exception.\n\n## [0.1.3]\n### Fixed\n- Admin `created at` field localization formatting.\n\n## [0.1.2]\n### Added\n- Logging handler class.\n### Fixed\n- Views tracker fixes.\n\n## [0.1.0]\nInitial version.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "px-django-actions-tracker",
    "package_url": "https://pypi.org/project/px-django-actions-tracker/",
    "platform": null,
    "project_url": "https://pypi.org/project/px-django-actions-tracker/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/px-django-actions-tracker/0.1.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Simple in-app actions tracker.",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17490770,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "259a3b9504964fdea87924fb847fa8cda5f8d8dcc33dda8d0ab0824ce6e2fe6f",
          "md5": "24aecc65d3e59deb03b10c4ec3deff4a",
          "sha256": "a34bc449cd360a455e155f5dbb536356baaad1cae3ca172d19a90f206bf5d27c"
        },
        "downloads": -1,
        "filename": "px-django-actions-tracker-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "24aecc65d3e59deb03b10c4ec3deff4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11998,
        "upload_time": "2021-12-29T11:57:52",
        "upload_time_iso_8601": "2021-12-29T11:57:52.494152Z",
        "url": "https://files.pythonhosted.org/packages/25/9a/3b9504964fdea87924fb847fa8cda5f8d8dcc33dda8d0ab0824ce6e2fe6f/px-django-actions-tracker-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ede7e862badc6024df5bf99485453b903806fdcd6d0cdfee721f6f8e7a8ed2ac",
          "md5": "0bbc3cd86e1fc5ca803d8b92542d6b78",
          "sha256": "ce3c7d9130c6b1280b9a4c0ad809174781705973b6c17e3413e645d21e57c3d1"
        },
        "downloads": -1,
        "filename": "px-django-actions-tracker-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0bbc3cd86e1fc5ca803d8b92542d6b78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12401,
        "upload_time": "2022-01-24T12:03:02",
        "upload_time_iso_8601": "2022-01-24T12:03:02.221048Z",
        "url": "https://files.pythonhosted.org/packages/ed/e7/e862badc6024df5bf99485453b903806fdcd6d0cdfee721f6f8e7a8ed2ac/px-django-actions-tracker-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d62d6f7dae8e7954cb41b978e8e5fc617a6ed782d5403045ed935776d29b64f9",
          "md5": "67bb31f8252b3dd9bf3f40ff9e4354d4",
          "sha256": "158b3a725128d4d3fd343a524508ef3816667b43c37be0d91e6740bdbced6109"
        },
        "downloads": -1,
        "filename": "px-django-actions-tracker-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67bb31f8252b3dd9bf3f40ff9e4354d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13238,
        "upload_time": "2022-12-27T13:46:50",
        "upload_time_iso_8601": "2022-12-27T13:46:50.139754Z",
        "url": "https://files.pythonhosted.org/packages/d6/2d/6f7dae8e7954cb41b978e8e5fc617a6ed782d5403045ed935776d29b64f9/px-django-actions-tracker-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dd8d8cda7b339c13043b49ee351f47a53bd660a8ab7a29389e3562213cf1937",
          "md5": "0028f5cd087bad43684473b9622e655d",
          "sha256": "fdba671bf9344c94dfc8cfa232fbe831d3125736f9528b58a751bbb0ce2a9ead"
        },
        "downloads": -1,
        "filename": "px-django-actions-tracker-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0028f5cd087bad43684473b9622e655d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13348,
        "upload_time": "2023-01-17T11:58:33",
        "upload_time_iso_8601": "2023-01-17T11:58:33.094645Z",
        "url": "https://files.pythonhosted.org/packages/1d/d8/d8cda7b339c13043b49ee351f47a53bd660a8ab7a29389e3562213cf1937/px-django-actions-tracker-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d26166cb08b6e57245f4fd3ba133caac3948c19e18dc802f519e4bc714363cb8",
          "md5": "768da9bf13f347efb6ce63735cf10ff7",
          "sha256": "56f3b27ed45477a6d7b325015c0110e749fa67ac780fb9698d8edab7a3c4639a"
        },
        "downloads": -1,
        "filename": "px-django-actions-tracker-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "768da9bf13f347efb6ce63735cf10ff7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13416,
        "upload_time": "2023-01-31T10:23:10",
        "upload_time_iso_8601": "2023-01-31T10:23:10.119547Z",
        "url": "https://files.pythonhosted.org/packages/d2/61/66cb08b6e57245f4fd3ba133caac3948c19e18dc802f519e4bc714363cb8/px-django-actions-tracker-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b867f26fbba96375c8a4e897bcdf004a4aeccfc0bee6a5cde4cb1c36c9b3cfc",
          "md5": "0e8e1d15febbd6ca2029a98d38220298",
          "sha256": "9f86bdb70f575a4fb0a5c4bcb3bad4e08fff018e49d34a048c9f8ce4a0fcc522"
        },
        "downloads": -1,
        "filename": "px-django-actions-tracker-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0e8e1d15febbd6ca2029a98d38220298",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13405,
        "upload_time": "2023-03-06T11:12:10",
        "upload_time_iso_8601": "2023-03-06T11:12:10.416297Z",
        "url": "https://files.pythonhosted.org/packages/0b/86/7f26fbba96375c8a4e897bcdf004a4aeccfc0bee6a5cde4cb1c36c9b3cfc/px-django-actions-tracker-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03a4cbf30d7ce6f83be324fe9bfab4beb7f5d803175da86b7aa028c97be682be",
          "md5": "d9311ff4558854f1586a5489629386d1",
          "sha256": "a8ff2b5156c6c3559e1a4d7ae580bd23e52f78af475b2c3983468197e60eee7b"
        },
        "downloads": -1,
        "filename": "px-django-actions-tracker-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d9311ff4558854f1586a5489629386d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13437,
        "upload_time": "2023-03-29T08:33:45",
        "upload_time_iso_8601": "2023-03-29T08:33:45.627020Z",
        "url": "https://files.pythonhosted.org/packages/03/a4/cbf30d7ce6f83be324fe9bfab4beb7f5d803175da86b7aa028c97be682be/px-django-actions-tracker-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03a4cbf30d7ce6f83be324fe9bfab4beb7f5d803175da86b7aa028c97be682be",
        "md5": "d9311ff4558854f1586a5489629386d1",
        "sha256": "a8ff2b5156c6c3559e1a4d7ae580bd23e52f78af475b2c3983468197e60eee7b"
      },
      "downloads": -1,
      "filename": "px-django-actions-tracker-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "d9311ff4558854f1586a5489629386d1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13437,
      "upload_time": "2023-03-29T08:33:45",
      "upload_time_iso_8601": "2023-03-29T08:33:45.627020Z",
      "url": "https://files.pythonhosted.org/packages/03/a4/cbf30d7ce6f83be324fe9bfab4beb7f5d803175da86b7aa028c97be682be/px-django-actions-tracker-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}