{
  "info": {
    "author": "Jakub Karbowski",
    "author_email": "jakub@namehash.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ENS Normalize Python\n\n![Tests](https://github.com/namehash/ens-normalize-python/actions/workflows/python-app.yml/badge.svg?branch=main)\n![PyPI](https://img.shields.io/pypi/v/ens-normalize)\n![Coverage](https://raw.githubusercontent.com/namehash/ens-normalize-python/main/coverage_badge.svg)\n\n* Python implementation of the [ENS Name Normalization Standard](https://github.com/adraffy/ensip-norm/blob/main/draft.md).\n  Thanks to [Adraffy](https://github.com/adraffy) for his leadership in coordinating the definition of this standard with the ENS community.\n* Passes **100%** of the [official validation tests](https://github.com/adraffy/ens-normalize.js/tree/main/validate) (validated automatically with pytest, see below).\n* Passes an [additional suite of further tests](/tools/updater/update-ens.js#L54) for compatibility with the official [Javascript reference implementation](https://github.com/adraffy/ens-normalize.js) and code testing coverage.\n* Based on [JavaScript implementation version 1.9.0](https://github.com/adraffy/ens-normalize.js/tree/4873fbe6393e970e186ab57860cc59cbbb1fa162).\n\n## Glossary\n\n* name - a full domain name, e.g. `nick.eth`\n* label - a part of a name separated by a dot, e.g. `nick` and `eth` are labels in `nick.eth`\n* normalized name - name that is already in normalized form according to the ENS Normalization Standard\n* normalizable name - name that is normalized or that can be converted into a normalized name using `ens_normalize`\n* disallowed name - name that is not normalized or normalizable\n* curable name - name that may be disallowed but can still be converted into a normalized name using `ens_cure`\n* fatal error - a `DisallowedNameError` object thrown by `ens_normalize` that contains only general information about the error and no possible fixes\n* curable error - a `CurableError` object (inherits from `DisallowedNameError`) thrown by `ens_normalize` that contains information about a possible fix for the error\n\n## Usage\n\nThe package is available on [pypi](https://pypi.org/project/ens-normalize/)\n\n```bash\npip install ens-normalize\n```\n\nNormalize an ENS name:\n\n```python\nfrom ens_normalize import ens_normalize\n# str -> str\n# raises DisallowedNameError for disallowed names\n# output ready for namehash\nens_normalize('Nick.ETH')\n# 'nick.eth'\n# note: does not enforce .eth TLD 3-character minimum\n```\n\nInspect issues with names that cannot be normalized:\n\n```python\nfrom ens_normalize import DisallowedNameError\n# added a hidden \"zero width joiner\" character\ntry:\n    ens_normalize('Ni‚Äçck.ETH')\n# Catch the first normalization error (the name we are attempting to normalize could have more than one error).\nexcept DisallowedNameError as e:\n    # error code\n    print(e.code)\n    # INVISIBLE\n\n    # a message about why the input is disallowed\n    print(e.general_info)\n    # Contains a disallowed invisible character\n\n    if isinstance(e, CurableError):\n        # information about the disallowed substring\n        print(e.disallowed_sequence_info)\n        # 'This invisible character is disallowed'\n\n        # starting index of the disallowed substring in the input string\n        # (counting in Unicode code points)\n        print(e.index)\n        # 2\n\n        # the disallowed substring\n        # (use repr() to \"see\" the invisible character)\n        print(repr(e.disallowed))\n        # '\\u200d'\n\n        # a suggestion for fixing the first error (there might be more errors)\n        print(repr(e.suggested))\n        # ''\n        # replacing the disallowed substring with this empty string represents that the disallowed substring should be removed\n\n        # You may be able to fix this error by replacing e.disallowed\n        # with e.suggested in the input string.\n        # Fields index, disallowed_sequence_info, disallowed, and suggested are not None only for fixable errors.\n        # Other errors might be found even after applying this suggestion.\n```\n\nYou can attempt conversion of disallowed names into normalized names:\n\n```python\nfrom ens_normalize import ens_cure\n# input name with disallowed zero width joiner and '?'\n# str -> str\nens_cure('Ni‚Äçck?.ETH')\n# 'nick.eth'\n# ZWJ and '?' are removed, no error is raised\n# note: this function is not a part of the ENS Normalization Standard\n\n# note: might still raise DisallowedNameError for certain names, which cannot be cured, e.g.\nens_cure('?')\n# DisallowedNameError: The name is empty\nens_cure('0œá—Ö0.eth')\n# DisallowedNameError: Contains visually confusing characters that are disallowed\n```\n\nFormat names with fully-qualified emoji:\n\n```python\nfrom ens_normalize import ens_beautify\n# works like ens_normalize()\n# output ready for display\nens_beautify('1‚É£2‚É£.eth')\n# '1Ô∏è‚É£2Ô∏è‚É£.eth'\n\n# note: normalization is unchanged:\n# ens_normalize(ens_beautify(x)) == ens_normalize(x)\n# note: in addition to beautifying emojis, ens_beautify converts the character 'Œæ' (Greek lowercase 'Xi') to 'Œû' (Greek uppercase 'Xi', a.k.a. the Ethereum symbol) in labels that contain no other Greek characters\n```\n\nGenerate detailed label analysis:\n\n```python\nfrom ens_normalize import ens_tokenize\n# str -> List[Token]\n# always returns a tokenization of the input\nens_tokenize('NaÃÄme‚Äçüßô‚Äç‚ôÇ.eth')\n# [TokenMapped(cp=78, cps=[110], type='mapped'),\n#  TokenNFC(input=[97, 768], cps=[224], type='nfc'),\n#  TokenValid(cps=[109, 101], type='valid'),\n#  TokenDisallowed(cp=8205, type='disallowed'),\n#  TokenEmoji(emoji=[129497, 8205, 9794, 65039],\n#             input=[129497, 8205, 9794],\n#             cps=[129497, 8205, 9794],\n#             type='emoji'),\n#  TokenStop(cp=46, type='stop'),\n#  TokenValid(cps=[101, 116, 104], type='valid')]\n```\n\nFor a normalizable name, you can find out how the input is transformed during normalization:\n\n```python\nfrom ens_normalize import ens_transformations\n# Returns a list of transformations (substring -> string)\n# that have been applied to the input during normalization.\n# NormalizationTransformation has the same fields as CurableError:\n# - code\n# - general_info\n# - disallowed_sequence_info\n# - index\n# - disallowed\n# - suggested\nens_transformations('N√†meüßô‚Äç‚ôÇÔ∏è.eth')\n# [NormalizationTransformation(code=\"MAPPED\", index=0, disallowed=\"N\", suggested=\"n\"),\n#  NormalizationTransformation(code=\"FE0F\", index=4, disallowed=\"üßô‚Äç‚ôÇÔ∏è\", suggested=\"üßô‚Äç‚ôÇ\")]\n```\n\nAn example normalization workflow:\n\n```python\nname = 'N√†meüßô‚Äç‚ôÇÔ∏è.eth'\ntry:\n    normalized = ens_normalize(name)\n    print('Normalized:', normalized)\n    # Normalized: n√†meüßô‚Äç‚ôÇ.eth\n    # Success!\n\n     # was the input transformed by the normalization process?\n    if name != normalized:\n        # Let's check how the input was changed:\n        for t in ens_transformations(name):\n            print(repr(t)) # use repr() to print more information\n        # NormalizationTransformation(code=\"MAPPED\", index=0, disallowed=\"N\", suggested=\"n\")\n        # NormalizationTransformation(code=\"FE0F\", index=4, disallowed=\"üßô‚Äç‚ôÇÔ∏è\", suggested=\"üßô‚Äç‚ôÇ\")\n        #                              invisible character inside emoji ^\nexcept DisallowedNameError as e:\n    # Even if the name is invalid according to the ENS Normalization Standard,\n    # we can try to automatically remove disallowed characters.\n    try:\n        print(ens_cure(name))\n    except DisallowedLabelError as e:\n        # The name cannot be automatically fixed.\n        print('Fatal error:', e)\n```\n\nYou can run many of the above functions at once. It is faster than running all of them sequentially.\n\n```python\nfrom ens_normalize import ens_process\n# use only the do_* flags you need\nens_process(\"N√†meüßô‚Äç‚ôÇÔ∏è1‚É£.eth\",\n    do_normalize=True,\n    do_beautify=True,\n    do_tokenize=True,\n    do_transformations=True,\n    do_cure=True,\n)\n# ENSProcessResult(\n#   normalized='n√†meüßô\\u200d‚ôÇ1‚É£.eth',\n#   beautified='n√†meüßô\\u200d‚ôÇÔ∏è1Ô∏è‚É£.eth',\n#   tokens=[...],\n#   cured='n√†meüßô\\u200d‚ôÇ1‚É£.eth',\n#   cures=[], # This is the list of cures that were applied to the input (in this case, none).\n#   error=None, # This is the exception raised by ens_normalize().\n#               # It is a DisallowedNameError or CurableError if the error is curable.\n#   transformations=[\n#     NormalizationTransformation(code=\"MAPPED\", index=0, disallowed=\"N\", suggested=\"n\"),\n#     NormalizationTransformation(code=\"FE0F\", index=4, disallowed=\"üßô‚Äç‚ôÇÔ∏è\", suggested=\"üßô‚Äç‚ôÇ\")\n#   ])\n```\n\n## List of all `DisallowedNameError` types\n\nFor fatal errors (not curable), it is challenging to communicate the normalization error as a problem with a specific substring.\n\n| `DisallowedNameErrorType` | General info |\n| ------------------------- | ------------ |\n| `EMPTY_NAME`   | The name is empty |\n| `NSM_REPEATED` | Contains a repeated non-spacing mark |\n| `NSM_TOO_MANY` | Contains too many consecutive non-spacing marks |\n| `CONF_WHOLE` | Contains visually confusing characters that are disallowed |\n\n## List of all `CurableError` types\n\nCurable errors contain additional information about the disallowed substring.\n\n| `CurableErrorType` | General info | Disallowed sequence info |\n| ------------------ | ------------ | ------------------------ |\n| `UNDERSCORE`  | Contains an underscore in a disallowed position | An underscore is only allowed at the start of a label |\n| `HYPHEN`      | Contains the sequence '--' in a disallowed position | Hyphens are disallowed at the 2nd and 3rd positions of a label |\n| `EMPTY_LABEL` | Contains a disallowed empty label | Empty labels are not allowed, e.g. abc..eth |\n| `CM_START`    | Contains a combining mark in a disallowed position at the start of the label | A combining mark is disallowed at the start of a label |\n| `CM_EMOJI`    | Contains a combining mark in a disallowed position after an emoji | A combining mark is disallowed after an emoji |\n| `DISALLOWED`  | Contains a disallowed character | This character is disallowed |\n| `INVISIBLE`   | Contains a disallowed invisible character | This invisible character is disallowed |\n| `FENCED_LEADING`  | Contains a disallowed character at the start of a label | This character is disallowed at the start of a label |\n| `FENCED_MULTI`    | Contains a disallowed consecutive sequence of characters | Characters in this sequence cannot be placed next to each other |\n| `FENCED_TRAILING` | Contains a disallowed character at the end of a label | This character is disallowed at the end of a label |\n| `CONF_MIXED` | Contains visually confusing characters from different scripts that are disallowed | This character is disallowed because it is visually confusing with another character from a different script |\n\n## List of all normalization transformations\n\n| `NormalizationTransformationType` | General info | Disallowed sequence info |\n| --------------------------------- | ------------ | ------------------------ |\n| `IGNORED`    | Contains disallowed \"ignored\" characters that have been removed | This character is ignored during normalization and has been automatically removed |\n| `MAPPED`     | Contains a disallowed character that has been replaced by a normalized sequence | This character is disallowed and has been automatically replaced by a normalized sequence |\n| `FE0F`       | Contains a disallowed variant of an emoji which has been replaced by an equivalent normalized emoji | This emoji has been automatically fixed to remove an invisible character |\n| `NFC`        | Contains a disallowed sequence that is not \"NFC normalized\" which has been replaced by an equivalent normalized sequence | This sequence has been automatically normalized into NFC canonical form |\n\n## Develop\n\n### Update this library to the latest ENS normalization specification *(optional)*\n\nThis library uses files defining the normalization standard\ndirectly from the [official Javascript implementation](https://github.com/adraffy/ens-normalize.js/tree/main/derive).\nWhen the standard is updated with new characters, this library can\nbe updated by running the following steps:\n\n1. Requirements:\n    * [Node.js](https://nodejs.org) >= 18\n    * [npm](https://www.npmjs.com)\n2. Set the hash of the latest commit from the [JavaScript library](https://github.com/adraffy/ens-normalize.js) inside [package.json](tools/updater/package.json)\n3. Run the updater:\n\n    ```bash\n    cd tools/updater\n    npm start\n    ```\n\n4. Update `NormalizationData.VERSION`:\\\n   This library keeps cache files in `$HOME/.cache/ens_normalize` to speed up loading.\n   To make sure existing users regenerate their cache after a version update,\n   please increment the `NormalizationData.VERSION` constant in [normalization.py](/ens_normalize/normalization.py).\n   The first import of the new version will automatically regenerate the cache.\n\n### Build and test\n\nInstalls dependencies, runs validation tests and builds the wheel.\n\n1. Install requirements:\n   * [Python](https://www.python.org)\n   * [Poetry](https://python-poetry.org)\n\n2. Install dependencies:\n\n    ```bash\n    poetry install\n    ```\n\n3. Run tests (including official validation tests):\n\n    ```bash\n    poetry run pytest\n    ```\n\n4. Build Python wheel:\n\n    ```bash\n    poetry build\n    ```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/namehash/ens-normalize-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "NameHash Team",
    "maintainer_email": "devops@namehash.io",
    "name": "ens-normalize",
    "package_url": "https://pypi.org/project/ens-normalize/",
    "platform": null,
    "project_url": "https://pypi.org/project/ens-normalize/",
    "project_urls": {
      "Homepage": "https://github.com/namehash/ens-normalize-python",
      "Repository": "https://github.com/namehash/ens-normalize-python"
    },
    "release_url": "https://pypi.org/project/ens-normalize/2.0.0/",
    "requires_dist": [
      "pyunormalize (>=15.0.0,<16.0.0)",
      "regex (>=2022.10.31,<2023.0.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "Ethereum Name Service (ENS) Name Normalizer",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17461536,
  "releases": {
    "1.8.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "226f82ad75bb3368291712d31d812399bb76c71ded3ab489343c8d7f19511432",
          "md5": "a69ad46d4f0ce44a4977cb0d685754f1",
          "sha256": "1e2f20a4c69b58328e3d43edf1463203072fd3731958393c7627a6c5ea808e0a"
        },
        "downloads": -1,
        "filename": "ens_normalize-1.8.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a69ad46d4f0ce44a4977cb0d685754f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 1130327,
        "upload_time": "2023-02-14T20:10:20",
        "upload_time_iso_8601": "2023-02-14T20:10:20.174562Z",
        "url": "https://files.pythonhosted.org/packages/22/6f/82ad75bb3368291712d31d812399bb76c71ded3ab489343c8d7f19511432/ens_normalize-1.8.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b0b7e606aa38256235e2a9a6ee1d7bbdd401d3e80d0f78b83e9a13ca8cc8798",
          "md5": "bd4cb0f0164e03bac5f09f069dcdd5d5",
          "sha256": "546c8d0cba28c662361bf8c62c2c305f327f2c553f0df458bf7fbe0a19c9998f"
        },
        "downloads": -1,
        "filename": "ens_normalize-1.8.9.tar.gz",
        "has_sig": false,
        "md5_digest": "bd4cb0f0164e03bac5f09f069dcdd5d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 1124255,
        "upload_time": "2023-02-14T20:10:22",
        "upload_time_iso_8601": "2023-02-14T20:10:22.290594Z",
        "url": "https://files.pythonhosted.org/packages/4b/0b/7e606aa38256235e2a9a6ee1d7bbdd401d3e80d0f78b83e9a13ca8cc8798/ens_normalize-1.8.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.9.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f73258c8e5381ef4d3a9b3469b021e30b787095dc763b4c216e17ad697d2c629",
          "md5": "9699aa8feaa75fa034236aeaa39921e3",
          "sha256": "49a5fcfb5275e7534b2a5edba16862c25a81454e880a1ec311d9cb44fbd178f0"
        },
        "downloads": -1,
        "filename": "ens_normalize-1.8.9.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9699aa8feaa75fa034236aeaa39921e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 1132604,
        "upload_time": "2023-02-20T15:57:58",
        "upload_time_iso_8601": "2023-02-20T15:57:58.737719Z",
        "url": "https://files.pythonhosted.org/packages/f7/32/58c8e5381ef4d3a9b3469b021e30b787095dc763b4c216e17ad697d2c629/ens_normalize-1.8.9.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "748260ed3034721ed471389d3537b3f660eb40f5bb3ed605d0a59993f5f0d2b4",
          "md5": "00f784662e2592638a856de3cd89db9f",
          "sha256": "3242adef5563cc178b5fc2b6bd8f9ea967cbc48ec72229232756ac47c76a7ecb"
        },
        "downloads": -1,
        "filename": "ens_normalize-1.8.9.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "00f784662e2592638a856de3cd89db9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 1128799,
        "upload_time": "2023-02-20T15:58:00",
        "upload_time_iso_8601": "2023-02-20T15:58:00.734717Z",
        "url": "https://files.pythonhosted.org/packages/74/82/60ed3034721ed471389d3537b3f660eb40f5bb3ed605d0a59993f5f0d2b4/ens_normalize-1.8.9.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec94ce9ad628f04ce4dccdd67902b50b8f038ada64570c81d1de251211403d0c",
          "md5": "c811a91e1bfbd78478b8280740b9538d",
          "sha256": "bd43c4bd7ab030d26a56cea0ef79d4c453e444758dc699c9ab9e00e9b4931617"
        },
        "downloads": -1,
        "filename": "ens_normalize-1.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c811a91e1bfbd78478b8280740b9538d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 1135972,
        "upload_time": "2023-03-13T12:33:27",
        "upload_time_iso_8601": "2023-03-13T12:33:27.160791Z",
        "url": "https://files.pythonhosted.org/packages/ec/94/ce9ad628f04ce4dccdd67902b50b8f038ada64570c81d1de251211403d0c/ens_normalize-1.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b407e888ec30476983a8279a69795d248f9a9282dbd2a7f62b59f3f1debe0423",
          "md5": "b84d8debd500ca81ff34527aec8fc1b6",
          "sha256": "2a0bc3c739f39c83e7dace8a61c138af39ec3bbc03253ed629a98197c56a6354"
        },
        "downloads": -1,
        "filename": "ens_normalize-1.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b84d8debd500ca81ff34527aec8fc1b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 1133673,
        "upload_time": "2023-03-13T12:33:28",
        "upload_time_iso_8601": "2023-03-13T12:33:28.955956Z",
        "url": "https://files.pythonhosted.org/packages/b4/07/e888ec30476983a8279a69795d248f9a9282dbd2a7f62b59f3f1debe0423/ens_normalize-1.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0264f63dba3ff906df15a886ee31ca6a9c8f188819aa72c62bce46f13c64429a",
          "md5": "80ed64b91ffe83c9e5299367e8025168",
          "sha256": "5a77347944886d7afa1dcc7721f6c6d6c69c515521c07c535e3ab42528c126eb"
        },
        "downloads": -1,
        "filename": "ens_normalize-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80ed64b91ffe83c9e5299367e8025168",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 1136375,
        "upload_time": "2023-03-27T13:57:53",
        "upload_time_iso_8601": "2023-03-27T13:57:53.273006Z",
        "url": "https://files.pythonhosted.org/packages/02/64/f63dba3ff906df15a886ee31ca6a9c8f188819aa72c62bce46f13c64429a/ens_normalize-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b0b8de79ef868b996a9d21f0c72f53dc64d452b89f6a35201a809fceeaf8bce",
          "md5": "9bf43a7ae15571b2cfebe782cf04ace6",
          "sha256": "74a02b72b03cb450613caa591b42a63df1c580e220a36d8e3861dd2fb6c5c2cd"
        },
        "downloads": -1,
        "filename": "ens_normalize-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9bf43a7ae15571b2cfebe782cf04ace6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 1134418,
        "upload_time": "2023-03-27T13:57:55",
        "upload_time_iso_8601": "2023-03-27T13:57:55.252759Z",
        "url": "https://files.pythonhosted.org/packages/3b/0b/8de79ef868b996a9d21f0c72f53dc64d452b89f6a35201a809fceeaf8bce/ens_normalize-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0264f63dba3ff906df15a886ee31ca6a9c8f188819aa72c62bce46f13c64429a",
        "md5": "80ed64b91ffe83c9e5299367e8025168",
        "sha256": "5a77347944886d7afa1dcc7721f6c6d6c69c515521c07c535e3ab42528c126eb"
      },
      "downloads": -1,
      "filename": "ens_normalize-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "80ed64b91ffe83c9e5299367e8025168",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 1136375,
      "upload_time": "2023-03-27T13:57:53",
      "upload_time_iso_8601": "2023-03-27T13:57:53.273006Z",
      "url": "https://files.pythonhosted.org/packages/02/64/f63dba3ff906df15a886ee31ca6a9c8f188819aa72c62bce46f13c64429a/ens_normalize-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b0b8de79ef868b996a9d21f0c72f53dc64d452b89f6a35201a809fceeaf8bce",
        "md5": "9bf43a7ae15571b2cfebe782cf04ace6",
        "sha256": "74a02b72b03cb450613caa591b42a63df1c580e220a36d8e3861dd2fb6c5c2cd"
      },
      "downloads": -1,
      "filename": "ens_normalize-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9bf43a7ae15571b2cfebe782cf04ace6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 1134418,
      "upload_time": "2023-03-27T13:57:55",
      "upload_time_iso_8601": "2023-03-27T13:57:55.252759Z",
      "url": "https://files.pythonhosted.org/packages/3b/0b/8de79ef868b996a9d21f0c72f53dc64d452b89f6a35201a809fceeaf8bce/ens_normalize-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}