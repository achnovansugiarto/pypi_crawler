{
  "info": {
    "author": "salexkidd",
    "author_email": "salexkidd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django Staskstore model\n=========================================================================================\n\n[![CircleCI](https://circleci.com/gh/salexkidd/django-stackstore-model.svg?style=svg)](https://circleci.com/gh/salexkidd/django-stackstore-model)\n\n`django-staskstore-model` is a library that can support model versioning in a minimal amount of steps.\n\n- Support Django 2 and 3\n- Support Python3.7, 3.8 (Maybe 2.7. Not tested)\n- Admin extensions are supported.\n\n# Usage\n\n## Model\n\n```\n# models.py\nfrom stackstore.models import AbstractStackModel\n\n\nclass MySampleModel(AbstractStackModel):\n    title = models.CharField(\n        max_length=100,\n        null=False,\n        blank=False,\n    )\n\n    body = models.TextField(\n        max_length=1000,\n        null=False,\n        blank=False,\n    )\n```\n\nPython shell\n```\n\n# Create First version instance\n>>> instance = MySampleModel.objects.create(title=\"Test\", body=\"This is test text\")\n>>> instance.pk\n1\n\n# If you save this instance, create new version instance\n>>> instance.title = \"Test (version2)\"\n>>> instance.save()\n>>> instance.pk\n2\n\n# If you can fetch previous version\n>>> previous_instance = instance.previous_instance()\n>>> previous_instance.pk\n1\n\n# You can get next version\n>>> previous_instance.next_instance().pk\n2\n```\n\n## Admin Extension\n\n###  Filter to show only the latest version of the object\n\n<img src=\"https://raw.githubusercontent.com/wiki/salexkidd/django-stackstore-model/images/latest_only.gif\" width=\"800px\">\n\n\n### Show only items with the same stackgroup_uuid\n\n<img src=\"https://raw.githubusercontent.com/wiki/salexkidd/django-stackstore-model/images/same_item.gif\" width=\"800px\">\n\n\n# API\n\n## QuerySet & Manager\n\n### latest_from_stack_group\n\nReturns a QuerySet of the most recent objects in each Stackgroup.\n\n```\n# Create instance\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> instance_lunch = MySampleModel.objects.create(title=\"Today's lunch\", body=\"Spam with Beacon\") # Create <MySampleModel: MySampleModel object (2)>\n\n# Save each instance\n>>> instance_breakfast.body = \"Fried Egg with bread\"\n>>> instance_breakfast.save() # Save method create new <MySampleModel: MySampleModel object (3)>\n\n>>> instance_lunch.body = \"Meat Pasta\"\n>>> instance_lunch.save() # Save method create new <MySampleModel: MySampleModel object (4)>\n\n>>> MySampleModel.objects.latest_from_stack_group() # You can fetch 3 & 4 My Sample Model\n<StackStoreQuerySet [<MySampleModel: MySampleModel object (3)>, <MySampleModel: MySampleModel object (4)>]>\n\n```\n### get_latest_from_stack_group\n\nReturns an object that matches the collation parameter from the latest set of objects in each Stackgroup.\n\n```\n# Create instance\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> instance_lunch = MySampleModel.objects.create(title=\"Today's lunch\", body=\"Spam with Beacon\") # Create <MySampleModel: MySampleModel object (2)>\n\n# Save each instance\n>>> instance_breakfast.body = \"Fried Egg with bread\"\n>>> instance_breakfast.save() # Save method create new <MySampleModel: MySampleModel object (3)>\n\n>>> MySampleModel.objects.get_latest_from_stack_group(body=\"Fried Egg with bread\")\n<MySampleModel: MySampleModel object (3)>\n```\n\n\n## model object\n\n### save\n\nWhen an object is saved, a new object is created and assigned the same stack_group_uuid as the object from which it was saved.\nThis means that a new version will be generated.\n\n```\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> instance_breakfast.body = \"Fried Egg with bread\"\n>>> instance_breakfast.save() # Save method create version object <MySampleModel: MySampleModel object (2)>\n>>> MySampleModel.objects.all()\n<StackStoreQuerySet [<MySampleModel: MySampleModel object (1)>, <MySampleModel: MySampleModel object (2)>]>\n```\n\nIf you want to save the overwrite without creating a new version, you should pass `False` to `__create_new_version` in the `save` method.\n\n```\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\")\n>>> instance_breakfast.save(__create_new_version=False)\n>>> instance_breakfast.pk\n1\n```\n\n### force_delete\n\nRemove the object.\n\n```\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> MySampleModel.objects.all()\n<StackStoreQuerySet [<MySampleModel: MySampleModel object (1)>]>\n>>> instance_breakfast.force_delete()\n>>> MySampleModel.objects.all()\n<StackStoreQuerySet []>\n```\n\nCalling the existing `delete` method will raise a NotImplementedError exception.\n\n### same_group_items\n\nReturns a QuerySet that returns all objects belonging to the same Stackgroup.\n\n```\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> [instance_breakfast.save() for i in range(2)]\n>>> instance_breakfast.same_group_items()\n<StackStoreQuerySet [<MySampleModel: MySampleModel object (3)>, <MySampleModel: MySampleModel object (2)>, <MySampleModel: MySampleModel object (1)>]>\n```\n\n### previous_instance\n\nReturns the previous version of the object.\n\n```\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> [instance_breakfast.save() for i in range(2)]\n>>> second_gen_instance = instance_breakfast.same_group_items().order_by(\"pk\")[1]\n>>> second_gen_instance.previous_instance()\n<MySampleModel: MySampleModel object (1)>\n```\n\nThrows a DoesNotExist exception if the object does not exist.\n\n\n### next_instance\n\nReturns the next version of the object.\n\n```\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> [instance_breakfast.save() for i in range(2)]\n>>> second_gen_instance = instance_breakfast.same_group_items()[1]\n>>> second_gen_instance.next_instance()\n<MySampleModel: MySampleModel object (3)>\n```\n\nThrows a DoesNotExist exception if the object does not exist.\n\n\n### latest_instance\n\nReturns the most recent object of the Stackgroup to which its own object belongs.\n\n```\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> [instance_breakfast.save() for i in range(2)]\n>>> first_gen_instance = instance_breakfast.same_group_items().order_by(\"pk\")[0]\n>>> first_gen_instance.latest_instance()\n<MySampleModel: MySampleModel object (3)>\n```\n\nThrows a DoesNotExist exception if the object does not exist.\n\n\n### earliest_instance\n\nReturns the oldest object in the Stackgroup to which its own object belongs.\n\n```\n>>> instance_breakfast = MySampleModel.objects.create(title=\"Today's breakfast\", body=\"Spam with Egg\") # Create <MySampleModel: MySampleModel object (1)>\n>>> [instance_breakfast.save() for i in range(2)]\n>>> third_gen_instance = instance_breakfast.same_group_items().order_by(\"pk\")[2]\n>>> third_gen_instance.earliest_instance()\n<MySampleModel: MySampleModel object (1)>\n```\n\nThrows a DoesNotExist exception if the object does not exist.\n\n\n# Demo\n\nThe Docker configuration is provided. Please use the following command to start it. Go to [http://localhost:8000](http://localhost:8000) when the launch is complete.\n\n```\n$ docker-compose up\n```\n\nLogin account is ID: `admin` Password: `admin`\n\n# License\n\nMIT License\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/salexkidd/django-stackstore-model",
    "keywords": "django,model,versioning",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-stackstore-model",
    "package_url": "https://pypi.org/project/django-stackstore-model/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-stackstore-model/",
    "project_urls": {
      "Homepage": "https://github.com/salexkidd/django-stackstore-model"
    },
    "release_url": "https://pypi.org/project/django-stackstore-model/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django stackstore model",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7342107,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1577acf54ebef8b14080d67b73bc52bbe7d5ef895fc4de2bca27e3922c47845d",
          "md5": "67070337cea2f958ec245a768f8e77cd",
          "sha256": "a864c8e5cb56357599883dea96dc0be33656b96e95dae9817fb877c631e136f8"
        },
        "downloads": -1,
        "filename": "django_stackstore_model-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67070337cea2f958ec245a768f8e77cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6496,
        "upload_time": "2020-05-28T06:52:01",
        "upload_time_iso_8601": "2020-05-28T06:52:01.039663Z",
        "url": "https://files.pythonhosted.org/packages/15/77/acf54ebef8b14080d67b73bc52bbe7d5ef895fc4de2bca27e3922c47845d/django_stackstore_model-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6d5261be6b91a1498d6ec20312b883ec566b4ada9889db5b2f38b915ff108ab",
          "md5": "bd6d5c9c9fe8bd1babcf643c693835c5",
          "sha256": "4bf279e87ed38e7845f8de7ea06625d4cdb4944f3bf06d4adf06d78e95c4659a"
        },
        "downloads": -1,
        "filename": "django-stackstore-model-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bd6d5c9c9fe8bd1babcf643c693835c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4728,
        "upload_time": "2020-05-28T06:52:03",
        "upload_time_iso_8601": "2020-05-28T06:52:03.542786Z",
        "url": "https://files.pythonhosted.org/packages/c6/d5/261be6b91a1498d6ec20312b883ec566b4ada9889db5b2f38b915ff108ab/django-stackstore-model-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1577acf54ebef8b14080d67b73bc52bbe7d5ef895fc4de2bca27e3922c47845d",
        "md5": "67070337cea2f958ec245a768f8e77cd",
        "sha256": "a864c8e5cb56357599883dea96dc0be33656b96e95dae9817fb877c631e136f8"
      },
      "downloads": -1,
      "filename": "django_stackstore_model-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67070337cea2f958ec245a768f8e77cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6496,
      "upload_time": "2020-05-28T06:52:01",
      "upload_time_iso_8601": "2020-05-28T06:52:01.039663Z",
      "url": "https://files.pythonhosted.org/packages/15/77/acf54ebef8b14080d67b73bc52bbe7d5ef895fc4de2bca27e3922c47845d/django_stackstore_model-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6d5261be6b91a1498d6ec20312b883ec566b4ada9889db5b2f38b915ff108ab",
        "md5": "bd6d5c9c9fe8bd1babcf643c693835c5",
        "sha256": "4bf279e87ed38e7845f8de7ea06625d4cdb4944f3bf06d4adf06d78e95c4659a"
      },
      "downloads": -1,
      "filename": "django-stackstore-model-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bd6d5c9c9fe8bd1babcf643c693835c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4728,
      "upload_time": "2020-05-28T06:52:03",
      "upload_time_iso_8601": "2020-05-28T06:52:03.542786Z",
      "url": "https://files.pythonhosted.org/packages/c6/d5/261be6b91a1498d6ec20312b883ec566b4ada9889db5b2f38b915ff108ab/django-stackstore-model-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}