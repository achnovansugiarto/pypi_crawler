{
  "info": {
    "author": "DragonMinded",
    "author_email": "dragonminded@dragonminded.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# naomi\n\nCollection of routines written in Python for manipulating Naomi ROM and EEPROM\nfiles. This is geared towards enthusiasts building their own netboot servers or\nRPI setups and provides libraries for examining ROM and manipulating ROM headers\nas well as attaching EEPROM settings to ROM files and manipulating their contents.\nIt is fully typed and requires a minimum of Python 3.6 to operate.\n\n## NaomiEEPRom\n\nThe NaomiEEPRom class provides high-level accessors to a 128-byte Naomi EEPROM\ndump as obtained through a ROM dumper or from an emulator's saved state. It handles\ncorrecting various CRCs as well as allowing high-level access to the duplicated\ngame and system settings sections. Use this to create or manipulate a raw EEPROM\ndata file.\n\n### Default Constructor\n\nTakes a single byte argument \"data\" and verifies that it is a valid 128-byte EEPROM\nbefore returning an instance of the `NaomiEEPRom` class used to manipulate that\ndata. If any of the CRCs do not match this will raise a `NaomiEEPRomException`.\n\n### NaomiEEPRom.default\n\nAn alternate constructor that takes a single byte argument \"serial\" and an optional\nbyte argument \"game_defaults\" and creates a valid EEPROM based on this data, returning\nan instance of the `NaomiEEPRom` class that can be used to manipulate this newly\ncreated EEPROM. The serial argument should be exactly bytes and begin with a \"B\",\nfollowed by two characters and finally a digit, as represented by a bytestring. This\nis a Naomi system restriction. Optionally, a string of bytes can be given in the\n\"game_defaults\" section which will be used to determine the length and default\nvalues of the game section of the EEPROM.\n\n### NaomiEEPRom.validate\n\nA static method that takes a byte argument \"data\" and checks it for validity. This\nincludes making sure the length is 128 bytes and that all CRCs are correct. Optionally\nyou can pass in the boolean keyword argument \"only_system\" set to True to only check\nthat the system section is valid. This is useful for validating EEPROMs where the BIOS\nhas written system settings but the game has not yet booted and created its own\ndefaults yet. You can use this function to ensure that passing data to the default\nconstructor will not result in an exception.\n\n### data property\n\nAn instance of NaomiEEPRom has the \"data\" property, which returns a bytes object\nrepresenting the current 128-byte EEPROM. This will have all CRC sections fixed.\nUse the \"data\" property to retrieve the EEPROM for writing to a file or sending to\na Naomi system after manipulating data using the NaomiEEPRom class. Note that this\nis read-only, you should not attempt to manipulate the raw data using this property.\n\n## serial property\n\nReturns the 4 byte serial that is found in the system section of the EEPROM. This\nwill match a serial given in the `NaomiEEPRom.default` constructor when it is used.\nUse this to help determine what game an EEPROM goes with. Note that this is read-only.\nTo modify the serial, create a new EEPROM with that serial. Game settings and system\nsettings are not compatible across games on the Naomi platform.\n\n## length property\n\nThe length in bytes as an integer of the game section of the EEPROM. If the game section\nis not valid this return 0 bytes. Otherwise it returns the length of the game section\nitself. This property is writeable. If you provide it a new value, the game section\nwill be resized to that length. Use this to determine the bounds of the `game` section\nas documented below, as well as to resize the `game` section.\n\n## system property\n\nReturns a bytes-like wrapper object representing the system section of the EEPROM.\nThis operates like a bytearray object in Python. That means you can access or mutate\nany byte or section in the system area using this property. Note that this wrapper\nobject takes care of reading from and writing to both mirrors of the system section in\nthe EEPROM file as well as ensuring that the CRC is correct. Note also that the system\nsection is hard-coded to 16 bytes in length which cannot be modified. This is a system\nrestriction on the Naomi platform. Much like bytes objects in python, accessing a single\nbyte returns an integer in the range of 0-255, but accessing a range returns a bytes\nobject.\n\nA simple example of reading bytes 6-8 of the system section:\n\n```\neeprom = NaomiEEPRom(somedata)\nprint(eeprom.system[6:8])  # Will print a bytes object of length 2.\n```\n\nA simple example of writing bytes 10-12 of the system section:\n\n```\neeprom = NaomiEEPRom(somedata)\neeprom.system[10:12] = b\"\\x12\\x34\"\n```\n\n## game property\n\nReturns a bytes-like wrapper object representing the game section of the EEPROM. This\noperates identically to the `system` property as documented above, only it accesses the\ngame section of the EEPROM. Note that for this to work properly, the game section needs\nto be initialized by setting the `length` property on the instance of `NaomiEEPRom`. If\nyou are manipulating an existing EEPROM file, this property will already be set for you.\n\nNote that this wrapper object includes a `valid` property which returns if the current\nsection is valid in the EEPROM you are manipulating. This will always be `True` for\nthe system section. However, if you access the game section on a newly-created EEPROM\nwithout setting defaults or a length, the game property's `valid` property will return\n`False`.\n\nAn example of verifying that the game section is valid:\n\n```\neeprom = NaomiEEPRom.default(serial=b\"BBG0\")\nprint(eeprom.game.valid)  # Will print \"False\" as the EEPROM was created without a game section default.\neeprom.length = 20\nprint(eeprom.game.valid)  # Will print \"True\" as the EEPROM game section was initialized to be 20 bytes long.\n```\n\n## NaomiRom\n\nThe NaomiRom class provides high-level accessors to a Naomi ROM header as found\nat the beginning of a ROM file suitable for netbooting. It handles decoding all\nsections of the ROM header as well as allowing modification and even creation of\nnew ROM header sections given valid data. Use this if you wish to manipulate or\ncreate your own Naomi ROM files form scratch.\n\n### Default Constructor\n\nTakes a single byte argument \"data\" and uses it as the ROM image where the header\nwill be extracted. Note that there is no CRC over the ROM header so any data that\nis 1280 bytes or longer will appear valid.\n\n### NaomiRom.default\n\nAn alternate constructor that creates an entirely blank Naomi ROM containing no\nloaded executable or test sections and no ROM name. Use this when you want to\nprogramatically construct a ROM image, such as when you are building a final ROM\nin a homebrew program you are building for the Naomi platform.\n\n### valid property\n\nAn instance of NaomiRom has the \"valid\" property which will be \"True\" when the ROM\npassed into the constructor is a valid Naomi ROM and \"False\" otherwise. This is a\nread-only property as the vailidity of a ROM is entirely dictated by the data\npassed into the constructor.\n\n### data property\n\nThe ROM data, as passed into the constructor for the instance of NaomiRom, or as\ncreated when using `NaomiRom.default` alternate constructor. Note that when any\nof the following properties are written, the `data` property will be changed to\nreflect those settings. Use this to retrieve the updated ROM after you've made\nadjustments to the values you wish to change.\n\n### publisher property\n\nThe publisher of this ROM, as a string. When read, grabs the current publisher\nof the ROM image. When written, updates the publisher to the new string provided.\n\n### names property\n\nA dictionary of names indexed by region. Given the current system region, the names\nthat show up here will also be the names that show up in the test menu for a given\ngame. Note that there are the following constants that can be used to index into the\nnames list: `NaomiRomRegionEnum.REGION_JAPAN`, `NaomiRomRegionEnum.REGION_USA`,\n`NaomiRomRegionEnum.REGION_EXPORT`, `NaomiRomRegionEnum.REGION_KOREA`, and finally\n`NaomiRomRegionEnum.REGION_AUSTRALIA`. Note that the last region, Australia, exists\nin many ROM files but is not accessible as there is no Australia BIOS for the Naomi\nplatform. When read, grabs a dictionary of names of the ROM given the region. When\nwritten, updates the ROM names by region using the dictionary provided.\n\n### sequencetexts property\n\nA list of 8 sequence texts that are used by the game for coin insertion messages.\nMany ROMs only have the first sequence set. When read, grabs all 8 sequence texts\nand returns a list of them. When written, updates the sequence texts to the new\nlist of strings provided.\n\n### defaults property\n\nA dictionary of NaomiEEPROMDefaults instance representing what defaults the BIOS will\nset in the system EEPROM section when initializing the EEPROM on first boot. Note\nthat this is indexed by the same enumeration as the \"names\" property. When read, grabs\nthe defaults and returns them. When written, extracts values from the provided\nNaomiEEPROMDefaults instances and updates the per-region defaults in the ROM accordingly.\n\n### date property\n\nA `datetime.date` instance representing what date the ROM was build and released.\nWhen read, returns the current date in the ROM header. When written, updates the\ndate of the ROM with the new `datetime.date` provided.\n\n### serial property\n\nA 4-byte bytestring representing the serial number of the ROM. This is used to tie\nEEPROM data to the ROM itself and lets the Naomi know when to reset certain defaults.\nWhen read, returns the current serial from the ROM header. When written, updates the\nserial in the ROM header.\n\n### regions property\n\nA list of NaomiRomRegionEnum values representing valid regions this ROM will run under.\nUses the same region constants as the `names` property. When read, returns a list of\nthe valid regions this ROM executes under. When written, updates the list of regions\nthe ROM is allowed to execute under. When booting, the Naomi BIOS will check the\ncurrent region against this list and show an error if the current region is not\nincluded in the list.\n\n### players property\n\nA list of integers representing the valid number of player configurations that this\nROM will boot under. Valid player numbers include 1, 2, 3 and 4. When read, returns\na list of all valid number of player configurations that this game will boot with.\nWhen written, updates the list of player configurations. When booting, the Naomi\nBIOS will check the \"Number of Players\" setting in the system assignments and see\nif that setting appears in this list.\n\n### frequencies property\n\nA list of frequencies that the monitor is allowed to run at for this ROM. This\nincludes the values 15 and 31. On read, returns the list of allowed frequencies.\nOn write, updates the list of allowed frequencies. On boot, the Naomi BIOS will\ncheck the current horizontal refresh rate of the system as controlled by a DIP\nswitch and show an error if it isn't in the list of allowed frequencies.\n\n### orientations property\n\nA list of strings representing the allowed orientations for the monitor for this\nROM. The includes the values \"horizontal\" and \"vertical\". On read, returns the\nlist of all acceptable orientations. On write, updates that list based on the\nprovided list of strings. On boot, the Naomi BIOS will check the current \"Monitor\nOrientation\" setting in the system assignments and see if that orientation is\non this list.\n\n### servicetype property\n\nA string value of either \"individual\" or \"common\" for the expected service button\ntype for the ROM. On read, returns either \"individual\" or \"common\" to represent\nthe current service type selected. On write, updates the service type to match\nthe string provided.\n\n### main_executable property\n\nAn instance of a NaomiExecutable including sections of the ROM that the Naomi\nBIOS will copy before executing the ROM, as well as the entrypoint in main RAM\nthat the BIOS will jump to after copying sections. On read, returns the current\nlist of sections to copy as well as the main entrypoint, as encapsulated as an\ninstance of NaomiExecutable. On write, it updates the ROM to the new executable\nconfiguration by unpacking the NaomiExecutable instance given.\n\n### test_executable property\n\nThis property is identical to the `main_executable` property, except for it\nrepresents the code and entrypoint that the Naomi BIOS will use when executing\nthe \"Game Test Mode\" section of the test menu. It can be similarly read and written.\n\n## NaomiSettingsPatcher\n\nThe NaomiSettingsPatcher class provides logic for attaching an EEPROM or SRAM configuration\nfile to a Naomi ROM so that it can be written to the EEPROM/SRAM when netbooting that\nROM. Note that this is not a supported feature of the Naomi platform, so it uses\nan executable stub that it attaches to the ROM in order to make this work. If you\ndo not care what executable stub is attached and only want to patch settings into\na ROM file, use the `get_default_trojan` function which will return a bytes\nobject suitable for passing into a `NaomiSettingsPatcher` constructor.\n\n### Default Constructor\n\nTakes a bytes \"rom\" argument and a bytes \"trojan\" argument creates an instance of\nNaomiSettingsPatcher which can attach or retrieve previously-attached EEPROM or SRAM settings\nin a Naomi ROM file suitable for netbooting. An example of how to initialize this\nis as follows:\n\n```\nfrom naomi import NaomiSettingsPatcher, get_default_trojan\n\npatcher = NaomiSettingsPatcher(somedata, get_default_trojan())\n```\n\n### data property\n\nThe same bytes as passed to the `NaomiSettingsPatcher` constructor. After calling\n`put_settings()` as documented below, this will be updated to the new ROM contents\nwith the settings applied. A recommended workflow is to patch ROMs on-the-fly when\nnetbooting by creating an instance of `NaomiSettingsPatcher` with the ROM data you\nwere about to send, calling `put_settings()` with the settings you wish to attach,\nand then getting the data using this property and sending it down the wire to the\nNaomi system. Note that you can attach either an EEPROM file (128 bytes) or an SRAM\nfile (32kb) but not both.\n\n### serial property\n\nAn instance of NaomiSettingsPatcher has the `serial` property. When read, this\nwill examine the serial of the Naomi ROM passed into the constructor and return the\n4 byte serial number, suitable for matching against an EEPROM's system serial. Note\nthat this property is read-only.\n\n### rom property\n\nReturns a `NaomiRom` instance that encapsulates the ROM passed into the patcher. This\ninstance should not be edited, as it will not be read again when performing the patches.\nNote that this property is read-only.\n\n### has_eeprom property\n\nReturns `True` if the ROM passed into the patcher has an attached EEPROM file. Returns\n`False` otherwise.\n\n### eeprom_info property\n\nReturns an optional instance of NaomiSettingsInfo if the ROM has a configured EEPROM\nsection. If the ROM does not have a configured EEPROM section, this returns `None`.\nThe NaomiSettingsInfo instance represents the configuration passed to `put_eeprom()`\non a previous invocation. Note that this property is read-only.\n\n### get_eeprom() method\n\nReturns a 128-byte EEPROM bytestring that was previously attached to the Naomi ROM,\nor `None` if this ROM does not include any EEPROM settings.\n\n### put_eeprom() method\n\ngiven a bytes \"eeprom\" argument which is a valid 128-byte EEPROM, ensures that it\nis attached to the Naomi ROM such that the settings are written when netbooting the\nROM image. If there are already EEPROM settings attached to the ROM, this overwrites\nthose with new settings. If there are not already settings attached, this does the\nwork necessary to attach the settings file as well as the writing trojan supplied to\nthe `NaomiSettingsPatcher` constructor.\n\nValid EEPROM files can be obtained form a number of places. If you use an emulator\nto set up system and game settings, then the EEPROM file that emulator writes can\nusually be supplied here to make your game boot to the same settings. If you use\nthe `NaomiEEPRom` class to manipulate an EEPROM, the data it produces can also be\nsupplied here to force the Naomi to use the same settings.\n\nOptionally, pass in the boolean keyword argument \"enable_sentinel\" set to True and\nthe Naomi ROM will re-initialize the settings when netbooting even if the last game\nnetbooted was this game. Use this when iterating over settings that you want to choose\nso that you can ensure the settings are written. If you do not provide this argument,\nthe default behavior is that settings will not be overwritten when we netboot a game\nthat is already running on the system.\n\nOptionally, pass in the boolean keyword argument \"enable_debugging\" set to True\nwhich forces the Naomi to display debugging information on the screen before booting\nthe game. Use this to see what is actually going on under the hood when using the\nsettings patching feature.\n\nOptionally, pass in the boolean keyword argument \"verbose\" set to True which forces\nthe `put_eeprom()` function to output progress text to stdout. Use this if you are\nmaking a command-line tool and wish to display information about the patch process\nto the user.\n\n### has_sram property\n\nReturns `True` if the ROM passed into the patcher has an attached SRAM file. Returns\n`False` otherwise.\n\n### get_sram() method\n\nReturns a 32k-byte SRAM bytestring that was previously attached to the Naomi ROM, or\n`None` if this ROM does not include any SRAM settings.\n\n### put_sram() method\n\ngiven a bytes \"settings\" argument which is a valid 32k-byte SRAM, ensures that it is\nattached to the Naomi ROM such that the settings are written when netbooting the ROM\nimage. If there are already SRAM settings attached to the ROM, this overwrites those\nwith new settings. If there are not already settings attached, this does the work\nnecessary to attach the settings file.\n\nValid SRAM files can be obtained from an emulator that is capable of writing an SRAM\nfile. This only makes sense to use in the context of atomiswave conversions and in\na select few Naomi games that store their settings in SRAM such as Ikaruga.\n\nOptionally, pass in the boolean keyword argument \"verbose\" set to True which forces\nthe `put_settings()` function to output progress text to stdout. Use this if you are\nmaking a command-line tool and wish to display information about the patch process\nto the user.\n\n# naomi.settings\n\nCollection of routines written in Python for safe manipulation of 128-byte\nNaomi EEPROM files using supplied system definition files. Essentially, given\na valid 128-byte EEPROM or a valid 4-byte Naomi ROM serial and a set of system\nand game definition files, `naomi.settings` will provide you a high-level\nrepresentation of valid settings including their defaults, valid values and\nrelationships to each other. Settings editors can be built using this module\nwhich work together with `naomi.NaomiEEPRom` and `naomi.NaomiSettingsPatcher`\nto make the settings available when netbooting a game on a Naomi system.\n\n## Setting\n\nA single setting, with its name, default, current value, possible allowed values,\nand any possible relationship to other settings. Note that any relationship,\nif it exists, will only be to other Setting objects inside a `Settings` class.\nNote that you should not attempt to construct an instance of this yourself.\nYou should only work with previously-constructed instances of it as found inside\nan instance of `Settings`.\n\n### name property\n\nThe name of this setting, as a string. This is what you should display to a user\nif you are developing a settings editor.\n\n### order property\n\nThe order that this setting showed up in the definition file that created it.\nNote that if you are implementing an editor, you can safely ignore this as the\nsettings will already be placed in the correct display order.\n\n### size property\n\nThe size of this setting, as an instance of SettingSizeEnum. The valid values\nfor this are `SettingSizeEnum.NIBBLE` and `SettingSizeEnum.BYTE`. Note that if\nyou are developing an editor, you can safely ignore this as the `values` property\nwill include all valid values that this setting can be set to. You do not have to\nunderstand or manipulate this in any way and it is only present so that other\nparts of the `naomi.settings` module can do their job properly.\n\n### length property\n\nThe length in bytes this setting takes up, if the `size` property is `SettingSizeEnum.BYTE`.\nIf the `size` property is instead `SettingSizeEnum.NIBBLE` then this will always\nbe set to 1. Note that much like the `size` property if you are implementing an\neditor you can safely ignore this property for the same rationale as above.\n\n### read_only property\n\nWhether this property is read-only or not. Some settings are not modifiable, such\nas the system serial number. Other settings are only modifiable if other settings\nare set to some value, such as the \"Continue\" setting on Marvel vs. Capcom 2 which\nis dependent on \"Event\" mode being off. If this property is \"False\" then this setting\nis user-editable under all circumstances. If this property is \"True\" then this setting\nis never user-editable. If this property is an instance of `ReadOnlyCondition` then\nit depends on some other settings for whether it is read-only. You can call the\n`evaluate()` method on the instance of `ReadOnlyCondition` which takes a list of\n`Setting` objects (this setting's siblings as found in a `Settings` object) and returns\na boolean. If that boolean is \"True\", then this setting is currently read-only because\nof some other setting's value. If the boolean is \"False\", then the setting is currently\neditable because of some other setting's value.\n\nIn the Naomi Test Mode, settings that are always read-only are hidden completely from\nthe user. Settings which are never read-only are displayed to the user. And settings\nwhich are conditionally read-only will be conditionally hidden based on whether they\nare read-only. It is recommended that your editor perform a similar thing when you\ndisplay settings. Settings whose `read_only` property is \"False\" should always be\ndisplayed. Settings whose `read_only` property is \"True\" should be completely hidden\nfrom the user. Settings whose `read_only` property is a `ReadOnlyCondition` should be\nevaluated and then the setting either grayed out when it is \"True\" or conditionally\nhidden from the user.\n\n### values property\n\nA dictionary whose keys are integers which the `current` property could be set\nto, and whose values are the strings which should be displayed to the user for\nthose value selections. Note that if a setting is always read-only this may instead\nbe None. It is guaranteed to be a dictionary with at least one value whenever a\nsetting is user-editable.\n\n### current property\n\nThe current integer value that the setting is set to. In order to display the correct\nthing to a user, you should use this as a key into the `values` property to look up\nthe correct string to display.\n\n### default property\n\nThe default value for this setting. Note that under some circumstances, this may\nnot be available and will return None. You can safely ignore this property if you are\ndeveloping an editor. If you wish to provide a \"defaults\" button in your editor, it\nis recommended to instead use the `from_serial()` or `from_rom()` method on an instance of\n`SettingsManager` which will return you a new `SettingsWrapper` with default values.\nThis will correctly handle system and game defaults as well as dependendent default\nsettings.\n\n## Settings\n\nA class which represents a collection of settings that can be used to manipulate\na section of an EEPROM file. Note that you should not attempt to construct\nthis yourself. You should only work with previously-constructed instances of\nit as found inside an instance of `SettingsWrapper`.\n\n### filename property\n\nThe name of the settings definition file that was used to create this collection.\nNote that this is not a fully qualified path, but instead just the name of\nthe file, like \"system.settings\" or \"BBG0.settings\". If you wish to look up\nthe actual file location given this property, use the `files` property on an\ninstance of `SettingsManager`.\n\n### type property\n\nAn instance of SettingType which specifies whether this collection of settings\nis a system settings section or a game settings section in an EEPROM. Valid\nvalues are `SettingType.SYSTEM` and `SettingType.GAME`.\n\n### settings property\n\nA python list of `Setting` objects, representing the list of settings that\ncan be mofidied or displayed. You should not assign to this property directly\nwhen modifying settings in a settings editor you are implementing. However,\nyou are welcome to modify the properties of each setting in this list directly.\n\n### length property\n\nAn integer representing how many bytes long the section of EEPROM represented\nby this collection is. For system settings, this will always be 16 since the\nsystem section is hardcoded at 16 bytes. For game settings, this will be\ndetermined by the settings definition file that was looked up for the game\nin question.\n\n## SettingsWrapper\n\nA class whose sole purpose is to encapsulate a group of system settings,\ngame settings and the serial number of the game that the system and game\nsettings go with. This is returned by many methods in `SettingsManager`\nand taken as a parameter of several more methods in `SettingsManager.\n\nNote that you should not attempt to construct this yourself. You should\nonly work with previously-constructed instances of it as returned by\nmethods in `SettingsManager`.\n\n### serial property\n\nThe 4-byte serial of the game this `SettingsWrapper` instance has been\ncreated for.\n\n### system\n\nA collection of settings that manipulate the system section of the EEPROM\nfor the game this instance has been created for. This is inside of a\n`Settings` wrapper object.\n\n### game\n\nA collection of settings that manipulate the game section of the EEPROM\nfor the game this instance has been created for. This is inside of a\n`Settings` wrapper object.\n\n### to_json() method\n\nConverts the current instance of `SettingsWrapper` to a dictionary suitable\nfor passing to `json.dumps`. This is provided as a convenience wrapper so\nthat if you are implementing a web interface you don't have to serialize\nanything yourself. To unserialize a dictionary that you get from this method,\ncall the `from_json` method on an instance of `SettingsManager`.\n\n## SettingsManager\n\nThe `SettingsManager` class manages the ability to parse a 128-byte EEPROM\nfile given a directory of settings definitions. It is responsible for\nidentifying the correct files for patching given an EEPROM or ROM serial.\nIt is also responsible for taking a modified list of settings and writing\na new EEPROM file.\n\nNote that default definitions are included with this module. To grab the\ndefault definitions directory, use the `get_default_settings_directory` function\nwhich will return a fully qualified path to the settings directory of this\nmodule.\n\nNote that since this is parsing user-supplied settings definitions files,\nthere can be errors in processing those files. In any function that returns\na `SettingsWrapper` instance, a `SettingsParseException` can be thrown.\nThis is a subclass of `Exception` so you can get the error message to\ndisplay to a user by calling `str()` on the exception instance. The instance\nwill also have a `filename` property which is the filename of the settings\ndefinition file that caused the problem.\n\nThere can also be problems in saving EEPROM settings given the same definitions\nfiles. In this case, a `SettingsSaveException` can be thrown. This is identical\nto `SettingsParseException` save for the source, so all of the above documentation\napplies.\n\nThere can also be problems in deserializing JSON data when calling the\n`from_json()` method. In this case, a `JSONParseException` can be thrown. Similar\nto the above two exceptions, calling `str()` on the instance will give you back\nan error message that can be displayed to a user. The instance will also have\na `context` property which is the exact location in the JSON where the failure\noccured as represented by a list of attributes that were dereferenced in the\nJSON to get to the section that had an error.\n\n### Default Constructor\n\nTakes a single string argument \"directory\" which points at the directory\nwhich contains settings definition files and returns an instance of the\n`SettingsManager` class. In this repository, that directory is\n`naomi/settings/definitions/`. Note that the settings definitions in this\nrepository can be found by using the `get_default_settings_directory` function.\nAn example of how to initialize this is as follows:\n\n```\nfrom naomi.settings import get_default_settings_directory, SettingsManager\n\ndir = get_default_settings_directory()\nman =  SettingsManager(dir)\n```\n\n### files property\n\nAn instance of `SettingsManager` has the \"files\" property, which returns\na dictionary of recognized settings definitions in the directory supplied to\nthe default constructor. The returned dictionary has keys representing the\nsettings definition file, such as \"system.settings\" or \"BBG0.settings\". The\nvalues of the dictionary are fully qualified system paths to the file in\nquestion.\n\n### from_serial() method\n\nTakes a single bytes argument \"serial\" as retrieved from Naomi ROM header\nand uses that to construct a `SettingsWrapper` class representing the\navailable settings for a game that has the serial number provided. This\ncan be used when you want to edit settings for a game but do not have an\nEEPROM already created. This will read the definitions files and create\na `SettingsWrapper` with default settings. This can be then passed to the\n`to_eeprom()` function to return a valid 128-byte EEPROM representing the\ndefault settings.\n\n### from_rom() method\n\nTakes a NaomiRom instance argument \"rom\" and a NaomiRomReginEnum argument\n\"region\" and retrieves any requested system defaults from the Naomi ROM\nheader. It uses that as well as the game's settings definition file to create\na default EEPROM that is then used to construct a `SettingsWrapper` class\nrepressenting the default settings as a Naomi would create them on first\nboot. This can then be edited or passed to the `to_eeprom()` function to\nreturn a valid 128-byte EEPROM representing the edited settings.\n\n### from_eeprom() method\n\nTakes a single bytes argument \"data\" as loaded from a valid 128-byte\nEEPROM file or as grabbed from the `data` property of an instance of\n`NaomiEEPRom` and constructs a `SettingsWrapper` class representing the\navailable settings for a game that matches the serial number provided in\nthe EEPROM file. This can be used when you want to edit the settings for\na game and you already have the EEPROM file created. This will read the\ndefinitions file and parse out the current settings in the EEPROM and\nreturn a `SettingsWrapper` with those settings. This can then be modified\nand passed to the `to_eeprom()` function to return a valid 128-byte EEPROM\nrepresenting the current settings.\n\n### from_json() method\n\nTakes a single dictionary argument \"jsondict\" and deserializes it to\na `SettingsWrapper` instance. The dictionary argument can be retrieved\nby calling the `to_json()` method on an existing `SettingsWrapper` instance.\nThis is provided specifically as a convenience method for code wishing to\nprovide web editor interfaces. A recommended workflow is to create an\ninstance of `SettingsManager`, request a `SettingsWrapper` by calling\neither `from_eeprom()` or `from_serial()` as appropriate, calling `to_json()`\non the resulting `SettingsWrapper` class and then passing that to\n`json.dumps` to get valid JSON that can be sent to a JS frontend app. After\nthe frontend app has manipulated the settings by modifying the current\nvalue of each setting, you can use `json.loads` to get back a dictionary\nthat can be passed to this function to get a deserialized `SettingsWrapper`\nclass. The deserialized `SettingsWrapper` instance can then be passed to\nthe `to_eeprom()` function to return a valid 128-byte EEPROM representing\nthe settings chosen by the JS frontend.\n\n### to_eeprom() method\n\nGiven an instance of `SettingsWrapper` returned by either `from_serial()`,\n`from_eeprom()` or `from_json()`, calculates and returns a valid 128-byte\nEEPROM file that represents the settings. Use this when you are finished\nmodifying system and game settings using code and wish to generate a valid\nEEPROM file that can be modified with `NaomiEEPRom`, placed in an emulator's\ndata directory to load those settings or attached to a Naomi ROM using the\n`naomi.NaomiSettingsPatcher` class so that the settings are written when\nnetbooting the rom on a Naomi system.\n\n# Settings Definitions Format\n\nSettings definition files are meant to be simple, human readable documentation\nfor a game's EEPROM settings. They are written in such a way that on top of\nbeing human-readable documentation, they can also be parsed by\n`naomi.settings.SettingsManager` to help with making settings editors for any\ngame on the Naomi platform. Each setting in a settings definition file represents\nhow to parse some number of bytes in a game's EEPROM. You'll notice that while\nthere is a size specifier for each setting there is no location specifier. That's\nbecause each setting is assumed to come directly after the previous setting in\nthe section.\n\nAll settings sections in an game's EEPROM are assumed to be little-endian, much\nlike the Naomi system itself. Defaults and valid values are specified as hex\ndigits as copied directly out of a hex editor. When specifying half-byte settings,\nthe first setting is assumed to be the top half of the byte (the first hex digit\nthat appears when reading the EEPROM in a hex editor) and the second setting is\nassumed to be the bottom half of the byte. All half-byte settings are expected\nto come in pairs.\n\nAside from the \"system.settings\" file, all settings files are named after the\nserial number of the game they are associated with. The serial number for the\ngame can be found by looking at the ROM header using a tool such as `rominfo`,\nor by looking at bytes 3-7 of an EEPROM that you got out of an emulator and\nloaded into a hex editor.\n\nThe only necessary parts of a setting are the name and the size. If the setting\nis user-editable, there should be at least one valid value that the setting is\nallowed to be. Optionally, you can specify the default value for any setting\nand whether the setting is read-only. Additionally, read-only and default values\ncan depend on the value of another setting.\n\nSettings are defined by writing any valid string name followed by a colon. Setting\nparts come after the colon and are either comma-separated or are placed one per\nline after the setting name. You can mix and match any number of comma-separated\nparts and parts on their own lines. Whatever makes the most sense and is the most\nreadable is allowed.  Settings parts can show up in any order after the setting\nname. You can define size, read-only, defaults and valid options in any order you\nwish. The only restriction is that the size part MUST appear before any default parts.\n\nAny line in a settings definition file that starts with a hashtag (`#`) is treated\nas a comment. You can write anything you want in comments so feel free to write\ndown any useful information about settings you think somebody else might care to\nknow.\n\n## A Simple Setting\n\nThe most basic setting is one that has a name, a size and some allowed values.\nAn example of such a setting is like so:\n\n```\nSample Setting: byte, values are 1 to 10\n```\n\nThis defines a setting named \"Sample Setting\" which is a single byte and can\nhave the hex values 01, 02, 03, 04, 05, 06, 07, 08, 09 and 0a. Editors that\ndisplay this setting will display a drop-down or selection box that includes\nthe decimal values \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", and \"10\".\nThe decimal values for each valid setting is automatically inferred based on\nthe range given in the setting.\n\nIf you want to specify some alternate text for each valid setting, you may\ndo so like so:\n\n```\nSample Setting: byte, 1 - On, 0 - Off\n```\n\nThis defines a setting named \"Sample Setting\" which is a single byte and can\nhave the hex values 01 and 00 applied to it. Editors that display this setting\nwill display a drop-down or selection box that includes the value \"On\" and\n\"Off\" and will select the correct one based on the value in the EEPROM when it\nis parsed.\n\nYou can mix and match how you define settings values if it is most convenient.\nFor example, the following setting mixes the two ways of specifying valid\nvalues:\n\n```\nSample Setting: byte, 0 - Off, 1 to 9, 10 - MAX\n```\n\nThis defines a setting named \"Sample Setting\" which is a single byte and\ncan have the hex values 00, 01, 02, 03, 04, 05, 06, 07, 08, 09 and 0a. Editors\nthat display this setting will display a drop-down or selection box that includes\nthe options \"Off\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"MAX\". The\ncorrect one will be selected based on the value in the EEPROM when it is parsed.\n\n## Changing the Setting Display\n\nNormally, if you have some number of values that a setting can be and you\nwant to control what an editor displays when selecting each value, you would\nlist each value out individually along with the text it should be displayed as.\nHowever, if you have a large range of values and you want to display them in\nhex instead of decimal, you can instead do the following:\n\n```\nSample Setting: byte, values are 1 to 10 in hex\n```\n\nThis defines a setting named \"Sample Setting\" which is a single byte and can\nhave the hex values 01, 02, 03, 04, 05, 06, 07, 08, 09 and 0a. This is identical\nto the simple setting in the previous section. However, editors that display this\nsetting will display a drop-down or selection box that includes the options\n\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\" and \"0a\". You could have\nwritten the settings out individually, but for large ranges that you want to\ndisplay in hex this is faster.\n\n## Changing the Setting Size\n\nIf your setting spans more than 1 byte, or it is only the top half or bottom\nhalf of a byte, you can specify that in the size part. For settings that occupy\nmore than 1 byte, you can simply write the number of bytes in the part section.\nIf a setting only occupies the top or bottom half of a byte, you can specify\na half-byte for the size.\n\nAn example of a setting that takes up 4 bytes is as follows:\n\n```\nBig Setting: 2 bytes, 12 34 - On, 56 78 - Off\n```\n\nThis defines a setting named \"Big Setting\" that takes up two bytes and has\nthe two hex values 12 34 and 56 78 as read in a hex editor as its options.\nEditors will display either \"On\" or \"Off\" as they would for 1 byte settings.\n\nAn example of a pair of settings that take up half a byte each is as follows:\n\n```\nSmall Setting 1: half-byte, values are 1 to 2\nSmall Setting 2: half-byte, values are 3 to 4\n```\n\nThis defines two settings named \"Small Setting 1\" and \"Small Setting 2\". Each\nsetting takes up half a byte. The first setting, \"Small Setting 1\", will take\nthe top half of the byte, and the second, \"Small Setting 2\", will take the\nbottom half of the byte. The hex values for each are the same as they would\nbe for all other documented settings. Note that the settings came in a pair\nbecause you have to specify both halves of the byte!\n\n## Specifying Read-Only Settings\n\nSometimes there is a setting that you can't figure out, or there's a setting\nthat the game writes when it initializes the EEPROM but never changes. In this\ncase you can mark the setting read-only and editors will not let people see\nor change the setting. However, the setting will still be created when somebody\nneeds to make a default EEPROM based on the settings definition file.\n\nAn example of how to mark a setting as read-only:\n\n```\nHidden Setting: byte, read-only\n```\n\nIn this case, there is a setting named \"Hidden Setting\" which is a single\nbyte. We specified that it was read-only, so editors will not display the\nsetting to the user. Also, since it was read-only, we didn't need to specify\nany allowed values. You can use this when there are parts of the EEPROM you\ndon't want people to mess with, or that you don't understand so you just need\nto skip it.\n\nSometimes there are settings that only display in some scenarios, such as when\nanother setting is set to a certain value. If you run into a setting such as\nthis, you can specify that relationship like so:\n\n```\nSometimes Hidden Setting: byte, read-only if Other Setting is 1, values are 0 to 2\n```\n\nThis defines a setting called \"Sometimes Hidden Setting\" which is a single byte\nand can have the hex values 00, 01 and 02. When another setting named \"Other\nSetting\" is set to 1, this setting becomes read-only and cannot be modified\nby the user. When that other setting named \"Other Setting\" is set to any other\nvalue, this setting becomes user-changeable.\n\nIf you want to specify that a setting is read-only unless another setting is\na certain value, you can do so like the following:\n\n```\nSometimes Hidden Setting: byte, read-only unless Other Setting is 1, values are 0 to 2\n```\n\nThis defines the same setting as the first example, but the read-only logic\nis reversed. This setting will be read-only when \"Other Setting\" is any value\nbut 1, and will be user-changeable when \"Other Setting\" is 1.\n\nIf you need to specify multiple values for the other setting, you can do so\nlike so:\n\n```\nSometimes Hidden Setting: byte, read-only if Other Setting is 1 or 2, values are 0 to 2\n```\n\nThis defines the same setting as the first example, but the read-only logic\nis changed. The setting will be read only when \"Other Setting\" is 1 or 2, and\nwill be user-changeable when \"Other Setting\" is any other value.\n\n## Specifying Defaults\n\nIts nice to specify what the default for each setting is. This way, editors\ncan make a new EEPROM from scratch for the game you are defining without needing\nan EEPROM to exist first. If you don't specify a default, the default for the\nsetting is assumed to be 0. If that isn't a valid value for a setting, you'll\nrun into problems so it is best to define defaults for settings when you can.\n\nTo specify a default, you can do the following:\n\n```\nDefault Setting: byte, default is 1, values are 1, 2\n```\n\nThis defines a setting named \"Defaut Setting\" which is a single byte and whose\nvalid values are 01 and 02. The default value when creating an EEPROM from\nscratch is 01.\n\nIf a setting is read-only, then when we an EEPROM is edited and saved, the\ndefault value will take precidence over the current value. If a setting is\nuser-editable, then the current value will take precidence over the default\nvalue. This is so that you can have settings which are optionally read-only\nbased on other settings and specify what value the setting should be when\nit is read-only. This isn't often necessary but it can come in handy in some\nspecific scenarios.\n\nFor example, in Marvel Vs. Capcom 2, the \"Continue\" setting is defaulted to\n\"On\". However, if event mode is turned on, then the \"Continue\" setting is\nforced to \"Off\" and becomes no longer user-editable. To represent such\na case as this, you can do something like the following:\n\n```\nEvent: byte, default is 0\n  0 - Off\n  1 - On\nContinue: byte, read-only if Event is 1, default is 1 if Event is 0, default is 0 if Event is 1\n  0 - Off\n  1 - On\n```\n\nThis can be a bit daunting to read at first, so let's break it down. First,\nit defines a setting named \"Event\" which is a byte and can have values 00 and 01.\nThose values are labelled \"Off\" and \"On\" respectively. Event mode is off by default.\nThen, it defines a setting named \"Continue\" which is a byte as well. It has values\n00 and 01 labelled \"Off\" and \"On\" respectively. It is user-editable when event mode\nis off, and it is read-only when event mode is on. When event mode is off, the default\nis 01, which corresponds to \"On\". When event mode is on, the default is \"00\" which\ncorresponds to \"Off\". Remember how settings that are read-only try to save the\ndefault first, and settings that are user-changeable try to save the current value\nfirst? That's where the magic happens. When the \"Event\" setting is set to \"On\"\nthen the \"Continue\" setting is read-only, so we will save the default hex value of 00!\nWhen the \"Event\" setting is set to \"Off\", the \"Continue\" setting is user-changeable so\nwe will save whatever value the user selected! When we create a new EEPROM from scratch,\nwe set \"Event\" to 00 which tells the \"Continue\" setting to default to 01. It all works\nperfectly!\n\n### Specifying Entirely-Dependent Defaults\n\nSometimes you might run into a setting that seems to be identical to another setting,\nor a setting that seems to be the same as another setting plus or minus some adjustment\nvalue. If you encounter such a relationship, you can represent it by doing something\nlike the following:\n\n```\nSetting: byte, default is 0, values are 1 to 10\nDependent Setting: byte, read-only, default is value of Setting\n```\n\nThis defines a setting named \"Setting\" which is a single byte that can have hex values\n01, 02, 03, 04, 05, 06, 07, 08, 09 and 0a. It defines a second setting named \"Dependent\nSetting\" which defaults to whatever \"Setting\" is set to. Since it is read-only, the\ndefault will take precidence over the current value, so when somebody edits \"Setting\"\nin an editor, both \"Setting\" and \"Dependent Setting\" will be saved with the same value!\n\nIn some cases, a setting will be dependent on another setting, but won't have the\nexact same value. If you wanted to, you could list out a whole bunch of default conditionals\nto represent all of the possibilities, like so:\n\n```\nSetting: byte, default is 0, values are 1 to 3\nDependent Setting: byte, read-only\n  default is 0 if Setting is 1\n  default is 1 if Setting is 2\n  default is 2 if Setting is 3\n```\n\nThis would work, and sets up \"Dependent Setting\" to be 00 when Setting is 01, 01 when\nSetting is 02, and 02 when Setting is 03. However, if there are a lot of possible values\nfor \"Setting\", this can get tedious. Instead, you can represent the relationship like so:\n\n```\nSetting: byte, default is 0, values are 1 to 3\nDependent Setting: byte, read-only, default is value of Setting - 1\n```\n\nThis defines the exact same pair of settings, with the exact same defaults!\n\n## Specifying an Alternate Display Order\n\nNormally settings are displayed in exactly the order the show up in the\nfile. Sometimes settings show up in a different order in a game's test\nmenu than they appear in the EEPROM file itself. You can't just rearrange\nthe order that the settings appear in the definition file since that\ndictates the order that the settings themselves are processed. So, instead\nyou can specify that a setting should be displayed before or after another\nsetting. Here is an example:\n\n```\nSimple Setting: byte, values are 1 to 10\nOther Setting: byte, values are 2 to 5, display before Simple Setting\n```\n\nThis defines two settings named \"Simple Setting\" and \"Other Setting\". While\n\"Simple Setting\" comes first when parsing the EEPROM itself, when it comes\ntime to display the settings in an editor, \"Other Setting\" will be displayed\nfirst and then \"Simple Setting\".\n\nSimilarly, you can specify that a setting come after another setting like so:\n\n```\nSimple Setting: byte, values are 1 to 10, display after Other Setting\nOther Setting: byte, values are 2 to 5\n```\n\nBoth the above examples produce the exact same list of settings in an editor.\n\n## Using \":\" or \",\" in Setting Names or Values\n\nSince these are special characters used to figure out where a setting name ends\nas well as separate sections, using one of these characters in a setting name or\nvalue description will result in an error. In order to have a setting that\nincludes one of these symbols, you can escale it like so:\n\n```\nSetting With A Colon\\: The Revengence: byte, 1 - Good\\, Very Good, 2 - Bad\\, Very Bad\n```\n\nThis defines a setting named \"Setting With a Colon: The Revengence\" that has two\nlabelled values consisting of \"Good, Very Good\" and \"Bad, Very Bad\". Whenever you\nneed to use a character that is special, prefix it with a \"\\\\\". This includes the\n\"\\\\\" character as it denotes that the next character should be escaped. So if you\nwant a \"\\\\\" character in your setting name or value, you should use two \"\\\\\" characters\nin a row.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DragonMinded/netboot",
    "keywords": "",
    "license": "Public Domain",
    "maintainer": "",
    "maintainer_email": "",
    "name": "naomiutils",
    "package_url": "https://pypi.org/project/naomiutils/",
    "platform": null,
    "project_url": "https://pypi.org/project/naomiutils/",
    "project_urls": {
      "Homepage": "https://github.com/DragonMinded/netboot"
    },
    "release_url": "https://pypi.org/project/naomiutils/0.5.4/",
    "requires_dist": [
      "arcadeutils",
      "dragoncurses"
    ],
    "requires_python": ">=3.6",
    "summary": "Code libraries for working with Naomi ROMs and EEPROMs.",
    "version": "0.5.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15206765,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58e3e2d60b0ed7904a696e6b0256e85a29ac23a831e72d0fa74523059fc30f61",
          "md5": "74dadda83d27f9773667dc628e94d66d",
          "sha256": "d49c7112198f5f2a782b32de7aac1cce8b6a3759617b1eac006b595623b464bf"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74dadda83d27f9773667dc628e94d66d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 58882,
        "upload_time": "2021-10-04T20:56:21",
        "upload_time_iso_8601": "2021-10-04T20:56:21.192202Z",
        "url": "https://files.pythonhosted.org/packages/58/e3/e2d60b0ed7904a696e6b0256e85a29ac23a831e72d0fa74523059fc30f61/naomiutils-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ddeaf459c3319de0d4965a85fba942a3277fb54b08dc962c68070420d95b368",
          "md5": "b93ff86a5574d7e505c28d236cdc6682",
          "sha256": "5983b593a92e169700f13360c4dba640bd851d835bf7e8b93cd1b5e0fd5f8aa7"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b93ff86a5574d7e505c28d236cdc6682",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72089,
        "upload_time": "2021-10-04T20:56:22",
        "upload_time_iso_8601": "2021-10-04T20:56:22.313488Z",
        "url": "https://files.pythonhosted.org/packages/7d/de/af459c3319de0d4965a85fba942a3277fb54b08dc962c68070420d95b368/naomiutils-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1304d4aec0e0e53534bafa11811802275262056a4f4f940d13cf7c904386556",
          "md5": "952d8a147578a9cfc248ecd5a959750a",
          "sha256": "7fa068d9562916847c258f508306625e86bfc89afb09e84d702abd585fffd46c"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "952d8a147578a9cfc248ecd5a959750a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 58906,
        "upload_time": "2021-10-04T21:05:40",
        "upload_time_iso_8601": "2021-10-04T21:05:40.564884Z",
        "url": "https://files.pythonhosted.org/packages/b1/30/4d4aec0e0e53534bafa11811802275262056a4f4f940d13cf7c904386556/naomiutils-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bba1209c10315a2090b9db2299de0d7f64085787f1dad3b1ea8fce77c9b1b864",
          "md5": "189d2a61367eb71b898bf014576a4776",
          "sha256": "bb2ec6ec460f0db384742d5790c643f09d1b196abe65598c9d2840ca560fa068"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "189d2a61367eb71b898bf014576a4776",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72100,
        "upload_time": "2021-10-04T21:05:41",
        "upload_time_iso_8601": "2021-10-04T21:05:41.647062Z",
        "url": "https://files.pythonhosted.org/packages/bb/a1/209c10315a2090b9db2299de0d7f64085787f1dad3b1ea8fce77c9b1b864/naomiutils-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cc2bda7e43bb97e168aea636424f9abf430c3e2a97c512e87ddbf14e2b77ead",
          "md5": "1bbfc6e2d6a84cb79221aa6d467e0764",
          "sha256": "54267d38184d43f309d7599507bbdbec8d1f37fcd6a9c612d7b6a13dc635c3d7"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bbfc6e2d6a84cb79221aa6d467e0764",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 61606,
        "upload_time": "2021-10-05T16:39:35",
        "upload_time_iso_8601": "2021-10-05T16:39:35.743839Z",
        "url": "https://files.pythonhosted.org/packages/4c/c2/bda7e43bb97e168aea636424f9abf430c3e2a97c512e87ddbf14e2b77ead/naomiutils-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8d70d570f0d5d8d1e8e736766bffa30aa0dbce12428dc00f5a7dfe91f5589fb",
          "md5": "997f9614a1a862e0eda1af21eef3bba8",
          "sha256": "dcb990722bb626a8f58e6389f2cbb0d5017c2c6a3a2c25f296c4f6a3e9a6f944"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "997f9614a1a862e0eda1af21eef3bba8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 75222,
        "upload_time": "2021-10-05T16:39:36",
        "upload_time_iso_8601": "2021-10-05T16:39:36.789442Z",
        "url": "https://files.pythonhosted.org/packages/f8/d7/0d570f0d5d8d1e8e736766bffa30aa0dbce12428dc00f5a7dfe91f5589fb/naomiutils-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dce1808d8f349b8da43df430eedf34517be7e25745b717eac3efbcc8af228a6",
          "md5": "a9ac11a4cd20be326d7e6ece7df668f3",
          "sha256": "c4b19b9d4d763c88d9e47647d8c1ae6c9634d9d773ba98fb9ac7cc8477f0b709"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9ac11a4cd20be326d7e6ece7df668f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 62796,
        "upload_time": "2021-10-05T20:31:49",
        "upload_time_iso_8601": "2021-10-05T20:31:49.464036Z",
        "url": "https://files.pythonhosted.org/packages/7d/ce/1808d8f349b8da43df430eedf34517be7e25745b717eac3efbcc8af228a6/naomiutils-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d09977004c52e962dead999ec9d369436e42e682c9460363525e1cb90195baf",
          "md5": "98a335088a0d60cce9bd7012add16049",
          "sha256": "1a8e57f5f9ffec6e47f43e222b0f90fc533d82f969d431ef9bacf5dfef01ecd6"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "98a335088a0d60cce9bd7012add16049",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 76534,
        "upload_time": "2021-10-05T20:31:50",
        "upload_time_iso_8601": "2021-10-05T20:31:50.629192Z",
        "url": "https://files.pythonhosted.org/packages/8d/09/977004c52e962dead999ec9d369436e42e682c9460363525e1cb90195baf/naomiutils-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84dd1271f91002b282f8fe156e7b03bee4ec5382fb0623e22d718fab179aac72",
          "md5": "33afd3692325b241a025b1b55c1a1a1e",
          "sha256": "d6e76c889ab15b12b69b4d48243873166c9e3a986ecff6ed0704e7953be41173"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33afd3692325b241a025b1b55c1a1a1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 65873,
        "upload_time": "2021-10-06T00:43:50",
        "upload_time_iso_8601": "2021-10-06T00:43:50.445142Z",
        "url": "https://files.pythonhosted.org/packages/84/dd/1271f91002b282f8fe156e7b03bee4ec5382fb0623e22d718fab179aac72/naomiutils-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f922769e4d36e20b30650ec1c50301b7c0630dac5470f8dfcb410d11a398b76",
          "md5": "e6e049fac2d1d3241164cfc8ad6667d0",
          "sha256": "41165975b6d0296618a5e78ab1745ed129043689dba77e7e9585f5f96a2357f0"
        },
        "downloads": -1,
        "filename": "naomiutils-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e6e049fac2d1d3241164cfc8ad6667d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 79434,
        "upload_time": "2021-10-06T00:43:52",
        "upload_time_iso_8601": "2021-10-06T00:43:52.113980Z",
        "url": "https://files.pythonhosted.org/packages/9f/92/2769e4d36e20b30650ec1c50301b7c0630dac5470f8dfcb410d11a398b76/naomiutils-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3054c66f183dd110adcfdf84f8268f65470ce647608d1c3278afbfe319c467d1",
          "md5": "bba31e8b6696dccad163e5fb4a4ed05d",
          "sha256": "627ec85084eeb7d6950009bba46703d5ee30b0de273f5ea734b853808ebd5647"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bba31e8b6696dccad163e5fb4a4ed05d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 67307,
        "upload_time": "2021-10-07T21:12:09",
        "upload_time_iso_8601": "2021-10-07T21:12:09.812032Z",
        "url": "https://files.pythonhosted.org/packages/30/54/c66f183dd110adcfdf84f8268f65470ce647608d1c3278afbfe319c467d1/naomiutils-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6f3ef52df076fbc997407a9a42ead1a27c70ef390dbd688332c490b8c22958c",
          "md5": "d876f3a6990a407ef7cdf1c709c8fbfb",
          "sha256": "83ffe356a4c4560e4cf64f40cf9b8c4edf4008afe259361907c16e6a08d22b28"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d876f3a6990a407ef7cdf1c709c8fbfb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 80777,
        "upload_time": "2021-10-07T21:12:11",
        "upload_time_iso_8601": "2021-10-07T21:12:11.379482Z",
        "url": "https://files.pythonhosted.org/packages/c6/f3/ef52df076fbc997407a9a42ead1a27c70ef390dbd688332c490b8c22958c/naomiutils-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "878423adaed79759f549623b410c1b85fc4812755d231a11a3da7066cbfae325",
          "md5": "fd4b13e2ed1cdcf01b06b8a6b35a07ea",
          "sha256": "fb31ef3156872c5f06c23467a764f9d42e5f21c70412e4547e4755456756527b"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd4b13e2ed1cdcf01b06b8a6b35a07ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 67751,
        "upload_time": "2021-10-07T21:23:52",
        "upload_time_iso_8601": "2021-10-07T21:23:52.705991Z",
        "url": "https://files.pythonhosted.org/packages/87/84/23adaed79759f549623b410c1b85fc4812755d231a11a3da7066cbfae325/naomiutils-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bb490d30796605e9b48525f52d720953c034b21f89eccada68202fb09db3c8c",
          "md5": "711bcd8ec268bf19b91287cd193be611",
          "sha256": "e452072f914af6083a297abf3e37f0a2d5c34b26b1241ba978c9440f80793d8c"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "711bcd8ec268bf19b91287cd193be611",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 81407,
        "upload_time": "2021-10-07T21:23:54",
        "upload_time_iso_8601": "2021-10-07T21:23:54.008728Z",
        "url": "https://files.pythonhosted.org/packages/8b/b4/90d30796605e9b48525f52d720953c034b21f89eccada68202fb09db3c8c/naomiutils-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c03da6608d2dac6ffd4845b82773ec1cc5fa231e110ca83a676ccd02b3ad5f27",
          "md5": "175cf5f8cd07b1b2d19c7a060d55977b",
          "sha256": "13f18dd6c91bb7f139b78d0fcd431b06a39010bd88f01324c3b347b957759026"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "175cf5f8cd07b1b2d19c7a060d55977b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 67833,
        "upload_time": "2021-10-12T02:17:22",
        "upload_time_iso_8601": "2021-10-12T02:17:22.280879Z",
        "url": "https://files.pythonhosted.org/packages/c0/3d/a6608d2dac6ffd4845b82773ec1cc5fa231e110ca83a676ccd02b3ad5f27/naomiutils-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16a7ebacadb702aef63c80c78809a14fddb4c307c44c8e42eeda25c154cb3f9e",
          "md5": "0ac3b1e029c98615ca7d9c48559c2e69",
          "sha256": "8d8708863af986b45bf7d92fd9209ec1097ccb1b8a65e4d98dc30a7bc7f083a7"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0ac3b1e029c98615ca7d9c48559c2e69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 81494,
        "upload_time": "2021-10-12T02:17:24",
        "upload_time_iso_8601": "2021-10-12T02:17:24.748995Z",
        "url": "https://files.pythonhosted.org/packages/16/a7/ebacadb702aef63c80c78809a14fddb4c307c44c8e42eeda25c154cb3f9e/naomiutils-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5d7355c38c090bdbc3859c307ee750bf2294fa78d517321b415560dc0a37df8",
          "md5": "831ae0e6c35b2fe5a9fd9357c358c388",
          "sha256": "5d4f6a15c0e639863ba71f2bb9e7097fa806101cbada8d1e3245235591136588"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "831ae0e6c35b2fe5a9fd9357c358c388",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 69472,
        "upload_time": "2021-10-12T20:01:16",
        "upload_time_iso_8601": "2021-10-12T20:01:16.246446Z",
        "url": "https://files.pythonhosted.org/packages/a5/d7/355c38c090bdbc3859c307ee750bf2294fa78d517321b415560dc0a37df8/naomiutils-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a126e3e3d4012ecd50bdfb83a06462d11fef6ea49bf51d6dd83a5b21fe60d6c7",
          "md5": "4c1de44bc89dd7d92971c9bd35d38c9a",
          "sha256": "fde1ce402eadddb7ca171f85c06584d3e8d2e74290cafa96e36f9bddde1de628"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4c1de44bc89dd7d92971c9bd35d38c9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 84323,
        "upload_time": "2021-10-12T20:01:17",
        "upload_time_iso_8601": "2021-10-12T20:01:17.997559Z",
        "url": "https://files.pythonhosted.org/packages/a1/26/e3e3d4012ecd50bdfb83a06462d11fef6ea49bf51d6dd83a5b21fe60d6c7/naomiutils-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "425c85f0ec822b2adad2f622e32e1353c5e7cbf87168d5be0eb01772e30b4193",
          "md5": "7eb76318b4f6359327cd28bd9c994e19",
          "sha256": "21905d9524ca0e4a6dc984a71ff4a0e22816d0e617e3ad4c9db09f545cbe01c4"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7eb76318b4f6359327cd28bd9c994e19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 94866,
        "upload_time": "2021-10-21T17:37:18",
        "upload_time_iso_8601": "2021-10-21T17:37:18.880108Z",
        "url": "https://files.pythonhosted.org/packages/42/5c/85f0ec822b2adad2f622e32e1353c5e7cbf87168d5be0eb01772e30b4193/naomiutils-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a23d21ff87e8a667b4eda1a202986eabfccedfb93988f2e683f2abb6ea8b47eb",
          "md5": "4824ade9434404bc933ec419d94513bb",
          "sha256": "79a1af7c00a346cb478a24dab1b6f83a4fda17eeaf2ec781439f840275fb0c6f"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4824ade9434404bc933ec419d94513bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 111053,
        "upload_time": "2021-10-21T17:37:23",
        "upload_time_iso_8601": "2021-10-21T17:37:23.057086Z",
        "url": "https://files.pythonhosted.org/packages/a2/3d/21ff87e8a667b4eda1a202986eabfccedfb93988f2e683f2abb6ea8b47eb/naomiutils-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c3a938e176d203d16a537ea0f5599d922c279d5b4c6c6e8c30100809d353104",
          "md5": "f1c1c77766ca4a66ee9c22acbe38629e",
          "sha256": "fbb748cd7c941ec016b78de6628fb8e105d83affba1b23636d6a9a3dff184869"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1c1c77766ca4a66ee9c22acbe38629e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 96042,
        "upload_time": "2021-10-28T02:50:54",
        "upload_time_iso_8601": "2021-10-28T02:50:54.944798Z",
        "url": "https://files.pythonhosted.org/packages/8c/3a/938e176d203d16a537ea0f5599d922c279d5b4c6c6e8c30100809d353104/naomiutils-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ce1af5c0f57342496bde64f657ad14b27ee92c8a642155f7fe5b3f7f66ea3d4",
          "md5": "dbee7d31a0dda416ede1e5456c10d558",
          "sha256": "9b45de1354e238d341f03f6c77df4dc77a6c33d11d6ebc8f9347cc877df1402e"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "dbee7d31a0dda416ede1e5456c10d558",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 112216,
        "upload_time": "2021-10-28T02:50:57",
        "upload_time_iso_8601": "2021-10-28T02:50:57.499099Z",
        "url": "https://files.pythonhosted.org/packages/3c/e1/af5c0f57342496bde64f657ad14b27ee92c8a642155f7fe5b3f7f66ea3d4/naomiutils-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ea2ff1c5e638681c8460683cabfecfb9df4134130ff7c1751db3a9113cc8f5f",
          "md5": "661d9e3f14bc3d88c632583c6516425e",
          "sha256": "d060ea66fa53fc26ebe2eff1dca61805fe8aa2ad055c67d3c9715c7483ef4b2a"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "661d9e3f14bc3d88c632583c6516425e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 96033,
        "upload_time": "2021-10-29T21:57:17",
        "upload_time_iso_8601": "2021-10-29T21:57:17.704795Z",
        "url": "https://files.pythonhosted.org/packages/3e/a2/ff1c5e638681c8460683cabfecfb9df4134130ff7c1751db3a9113cc8f5f/naomiutils-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abdcc4844de33b87bff073d72277aad125d839a755e1ed5c262dcb108c8bf620",
          "md5": "57302c72d981a378bcf6b5ed55499e88",
          "sha256": "14ea6355a69c9ab1f713011cafca3b9f6adb5a2e7217dbde261afaf6229e61a5"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "57302c72d981a378bcf6b5ed55499e88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 112224,
        "upload_time": "2021-10-29T21:57:19",
        "upload_time_iso_8601": "2021-10-29T21:57:19.562286Z",
        "url": "https://files.pythonhosted.org/packages/ab/dc/c4844de33b87bff073d72277aad125d839a755e1ed5c262dcb108c8bf620/naomiutils-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8418c456fb5ca553550f41e1d06ba5806ac79e2e742ca5245b6a8c85e9b82b3",
          "md5": "16a531f26bcbff06576fd8d461e75197",
          "sha256": "a9433fd525d3a7e267da86205281a6c3f0fc52df47224a67692fb222ce48bf16"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16a531f26bcbff06576fd8d461e75197",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 96032,
        "upload_time": "2021-10-29T22:18:24",
        "upload_time_iso_8601": "2021-10-29T22:18:24.311609Z",
        "url": "https://files.pythonhosted.org/packages/c8/41/8c456fb5ca553550f41e1d06ba5806ac79e2e742ca5245b6a8c85e9b82b3/naomiutils-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1ffa32d5131cc16fe9349046ad91889a107ac8b5a508767c684a40a43d43023",
          "md5": "28c0b826d312077ad608a3a7741bd76c",
          "sha256": "8ea5014581f56947905dc614f68e2b1fbefafc2d5ad74fc3b3a7c7a98fb1dba1"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "28c0b826d312077ad608a3a7741bd76c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 112233,
        "upload_time": "2021-10-29T22:18:26",
        "upload_time_iso_8601": "2021-10-29T22:18:26.533060Z",
        "url": "https://files.pythonhosted.org/packages/c1/ff/a32d5131cc16fe9349046ad91889a107ac8b5a508767c684a40a43d43023/naomiutils-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b68d9a402cd9ba25dc690ff09169e9f1719ae9ebf4970cbf48e4c17a35a09fc",
          "md5": "4dcde91ecfaf2518e5889566f6e15a14",
          "sha256": "7caa14e80cd28d6680c7a9d9ef8b141b121fdd51051981b45e6b77758ae2fc31"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4dcde91ecfaf2518e5889566f6e15a14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 93763,
        "upload_time": "2021-11-04T21:35:36",
        "upload_time_iso_8601": "2021-11-04T21:35:36.903397Z",
        "url": "https://files.pythonhosted.org/packages/2b/68/d9a402cd9ba25dc690ff09169e9f1719ae9ebf4970cbf48e4c17a35a09fc/naomiutils-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcee35018403c558eb028a64263e6c52cee133695ec5e3de4e3b06cf8c143948",
          "md5": "ee4989591aa863b5dbf480f1358dbe40",
          "sha256": "a0ce3e106ace911b4586783f164506e6efdd9f1b5ac465222710616c5fee0462"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ee4989591aa863b5dbf480f1358dbe40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 110534,
        "upload_time": "2021-11-04T21:35:39",
        "upload_time_iso_8601": "2021-11-04T21:35:39.571862Z",
        "url": "https://files.pythonhosted.org/packages/dc/ee/35018403c558eb028a64263e6c52cee133695ec5e3de4e3b06cf8c143948/naomiutils-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68c873263ead901041c82dfdcad912e9dfd369c66a2e9f2fb6128b7bf327fdbc",
          "md5": "bf4f4ad875f9286c54318133fa29a767",
          "sha256": "c3825c724aec5970f9da9cb0c9d363db270c4ac159d87a729fe4f43ee5049a9e"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf4f4ad875f9286c54318133fa29a767",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 87362,
        "upload_time": "2021-12-18T03:04:31",
        "upload_time_iso_8601": "2021-12-18T03:04:31.385902Z",
        "url": "https://files.pythonhosted.org/packages/68/c8/73263ead901041c82dfdcad912e9dfd369c66a2e9f2fb6128b7bf327fdbc/naomiutils-0.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19f5813ad6da6ecf73642ac582eed08eff8f23ee9dda8534eef7799e6db005f8",
          "md5": "0d909c151d73f5a2647bbd69757edaa0",
          "sha256": "d205cf8412294778ddf85bb521281e72e189090da747b97b8c8587fcabda6dae"
        },
        "downloads": -1,
        "filename": "naomiutils-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "0d909c151d73f5a2647bbd69757edaa0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 103390,
        "upload_time": "2021-12-18T03:04:34",
        "upload_time_iso_8601": "2021-12-18T03:04:34.209395Z",
        "url": "https://files.pythonhosted.org/packages/19/f5/813ad6da6ecf73642ac582eed08eff8f23ee9dda8534eef7799e6db005f8/naomiutils-0.2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b522567bd4a045f8f58df6efd919664d46cc2e26a1944d0756e5b5b1f964f460",
          "md5": "e711be57e32fd3e004f521a9f0cb8de6",
          "sha256": "be0731e3aff8f44489c3cbdaddaaed86378b603241e6176ef1750d9631b66274"
        },
        "downloads": -1,
        "filename": "naomiutils-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e711be57e32fd3e004f521a9f0cb8de6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 87361,
        "upload_time": "2021-12-18T20:46:53",
        "upload_time_iso_8601": "2021-12-18T20:46:53.833224Z",
        "url": "https://files.pythonhosted.org/packages/b5/22/567bd4a045f8f58df6efd919664d46cc2e26a1944d0756e5b5b1f964f460/naomiutils-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f614fa8447a13557051093eb9981a57ced616164a7b27e894b86ebd17342596b",
          "md5": "9e957fdb90f8b8d85dce20eeca456bd1",
          "sha256": "ba57ba8251df1c0fb771b074098607a64c6e85d23cfa48c6d6ee29faa2687e8f"
        },
        "downloads": -1,
        "filename": "naomiutils-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e957fdb90f8b8d85dce20eeca456bd1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 103382,
        "upload_time": "2021-12-18T20:46:56",
        "upload_time_iso_8601": "2021-12-18T20:46:56.640884Z",
        "url": "https://files.pythonhosted.org/packages/f6/14/fa8447a13557051093eb9981a57ced616164a7b27e894b86ebd17342596b/naomiutils-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2509c3f1c9787fd11485fee62dda664ddc632313dcc4779743c602d5376ee0e",
          "md5": "41583d71a5a9152ae1f5d5dac6582226",
          "sha256": "ec18e57fcb1b028a0dcb646e2a086bec107a96fa439bd0df1edff1ece1320cca"
        },
        "downloads": -1,
        "filename": "naomiutils-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41583d71a5a9152ae1f5d5dac6582226",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 87361,
        "upload_time": "2022-02-01T17:07:53",
        "upload_time_iso_8601": "2022-02-01T17:07:53.427223Z",
        "url": "https://files.pythonhosted.org/packages/b2/50/9c3f1c9787fd11485fee62dda664ddc632313dcc4779743c602d5376ee0e/naomiutils-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "757a58384db9cd63ec5d7f1d10332916f2ce84d6159a47dfe86d592fe8d6afa1",
          "md5": "848401572e14a9b956e3a50b3c945720",
          "sha256": "5fe9dabf2c60f3e6fb8ad6d0154bc2cf3f3d8a081040b55ef070f2a43992ee3e"
        },
        "downloads": -1,
        "filename": "naomiutils-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "848401572e14a9b956e3a50b3c945720",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 103392,
        "upload_time": "2022-02-01T17:07:56",
        "upload_time_iso_8601": "2022-02-01T17:07:56.197585Z",
        "url": "https://files.pythonhosted.org/packages/75/7a/58384db9cd63ec5d7f1d10332916f2ce84d6159a47dfe86d592fe8d6afa1/naomiutils-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5668342b37a93842339f531c1ad3e963b6e8c6d23972eb1b6f73d966e8a5c57b",
          "md5": "665b267dc9647bff0197923c4d3a9aed",
          "sha256": "3a41a9298bc741078fd863cd91171ba05c0fd77aa2d005ce58eaa24d53a9cb88"
        },
        "downloads": -1,
        "filename": "naomiutils-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "665b267dc9647bff0197923c4d3a9aed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 87361,
        "upload_time": "2022-02-04T16:41:06",
        "upload_time_iso_8601": "2022-02-04T16:41:06.279013Z",
        "url": "https://files.pythonhosted.org/packages/56/68/342b37a93842339f531c1ad3e963b6e8c6d23972eb1b6f73d966e8a5c57b/naomiutils-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e87d0a6103665248f19584cd5367e8f28980986372e692e0b2b977a003b8c3e4",
          "md5": "3ff52b0863ab3dde6d9b48d5fc90aaa2",
          "sha256": "ce0c003aa58ed3005e263e94b41c8ef45111974e58f18456c1fe70c8d29e7709"
        },
        "downloads": -1,
        "filename": "naomiutils-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3ff52b0863ab3dde6d9b48d5fc90aaa2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 103386,
        "upload_time": "2022-02-04T16:41:09",
        "upload_time_iso_8601": "2022-02-04T16:41:09.935498Z",
        "url": "https://files.pythonhosted.org/packages/e8/7d/0a6103665248f19584cd5367e8f28980986372e692e0b2b977a003b8c3e4/naomiutils-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63d0cc9aed5feec308a38f99dc74eba9c70e080ee8b32ef26689a56d356316f5",
          "md5": "65d02cfdba2f9f82f73272e51dd17448",
          "sha256": "2c812ce800618dd5959d55bdde1b5b552a443606e6247573dee394c2e447e956"
        },
        "downloads": -1,
        "filename": "naomiutils-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65d02cfdba2f9f82f73272e51dd17448",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 87519,
        "upload_time": "2022-02-20T16:49:15",
        "upload_time_iso_8601": "2022-02-20T16:49:15.580122Z",
        "url": "https://files.pythonhosted.org/packages/63/d0/cc9aed5feec308a38f99dc74eba9c70e080ee8b32ef26689a56d356316f5/naomiutils-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9053806c6ab55aa9c156170bdfc88bf124c2b6800a8c2a53fcf03fa0dd07bf59",
          "md5": "0d955e73cc79a3bf6d979bfecad58c66",
          "sha256": "4a77394dd51c62f935f51ea08f7708a66a05b6a68a61f8aac0c036ee75d1bb3d"
        },
        "downloads": -1,
        "filename": "naomiutils-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0d955e73cc79a3bf6d979bfecad58c66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 103546,
        "upload_time": "2022-02-20T16:49:18",
        "upload_time_iso_8601": "2022-02-20T16:49:18.090225Z",
        "url": "https://files.pythonhosted.org/packages/90/53/806c6ab55aa9c156170bdfc88bf124c2b6800a8c2a53fcf03fa0dd07bf59/naomiutils-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59a055edec3656d607da7ba6ab8aa895b642e28b849b69488aa84f479ead6b58",
          "md5": "1da739d1cb193433e7ad38b9be3b2ec4",
          "sha256": "af971a78e0a5c56819d1be01faabd3fa834cf94c66c3ed04d463d670ac9618e9"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1da739d1cb193433e7ad38b9be3b2ec4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88749,
        "upload_time": "2022-03-20T01:13:40",
        "upload_time_iso_8601": "2022-03-20T01:13:40.174015Z",
        "url": "https://files.pythonhosted.org/packages/59/a0/55edec3656d607da7ba6ab8aa895b642e28b849b69488aa84f479ead6b58/naomiutils-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fb69a49eb0fbcc3e49513edbe2ee1ba4b0f288e245c804bffe5f2379e2c39d8",
          "md5": "2ff6f9b3b430c289e22bf2d54cb99923",
          "sha256": "5a4b12a114e6aa3d6cffa98736dc66e65b694e914b8634f312d166b1757122db"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ff6f9b3b430c289e22bf2d54cb99923",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 104486,
        "upload_time": "2022-03-20T01:13:43",
        "upload_time_iso_8601": "2022-03-20T01:13:43.115169Z",
        "url": "https://files.pythonhosted.org/packages/5f/b6/9a49eb0fbcc3e49513edbe2ee1ba4b0f288e245c804bffe5f2379e2c39d8/naomiutils-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6426a9eef21ee2e338b65330474b5091d54ae36d54b3ecf8b8724c32850e5a5a",
          "md5": "6f0ca4a471137826b273cf768caa9ca5",
          "sha256": "9c4ca275de66533a971828e9ad21541e67a6e5978ccbba714c7fcd56be769e30"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f0ca4a471137826b273cf768caa9ca5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88746,
        "upload_time": "2022-03-21T23:41:21",
        "upload_time_iso_8601": "2022-03-21T23:41:21.549910Z",
        "url": "https://files.pythonhosted.org/packages/64/26/a9eef21ee2e338b65330474b5091d54ae36d54b3ecf8b8724c32850e5a5a/naomiutils-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1003feb6521206f03b7ba23946f8e1a566393ed385523d4180f654832cb4c69d",
          "md5": "d77202b5470c340c52316684c7bf6930",
          "sha256": "fcae54ff4f5b1cfbd00a0542543fa6edf9844dd98d3171f05bda61defaabe170"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d77202b5470c340c52316684c7bf6930",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 104758,
        "upload_time": "2022-03-21T23:41:23",
        "upload_time_iso_8601": "2022-03-21T23:41:23.640478Z",
        "url": "https://files.pythonhosted.org/packages/10/03/feb6521206f03b7ba23946f8e1a566393ed385523d4180f654832cb4c69d/naomiutils-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6b020d4ae5631d59e79d5b43bb3a65acf39834ada18bad2e31a98afada34f13",
          "md5": "926e4f56e0a56fb87ce612cf04ba6079",
          "sha256": "650adecfcbc3439211e8c3f8023322cfff596543486c686d4601efb3f99fe67a"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "926e4f56e0a56fb87ce612cf04ba6079",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88792,
        "upload_time": "2022-03-22T03:22:09",
        "upload_time_iso_8601": "2022-03-22T03:22:09.191984Z",
        "url": "https://files.pythonhosted.org/packages/e6/b0/20d4ae5631d59e79d5b43bb3a65acf39834ada18bad2e31a98afada34f13/naomiutils-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "177341ee3110e07ddf93174a0cb639076f6ea5a6b8433b60233047e06c7c9b3a",
          "md5": "60f697061ba63e6899fc7047a079eea0",
          "sha256": "4cc199974369f39cbce994c9497860494fd82ea20bb2537661658027aeeaab26"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "60f697061ba63e6899fc7047a079eea0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 104812,
        "upload_time": "2022-03-22T03:22:12",
        "upload_time_iso_8601": "2022-03-22T03:22:12.176780Z",
        "url": "https://files.pythonhosted.org/packages/17/73/41ee3110e07ddf93174a0cb639076f6ea5a6b8433b60233047e06c7c9b3a/naomiutils-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c7e00860956ef61faea56f471c0261d39c4060d77e34534934173d4b7321077",
          "md5": "fafb2a57eb8e883eb4ba0bdbb6dff095",
          "sha256": "d1142c543692001c58523cece2cc2c3c1176592beda45970990dc7cf882051a3"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fafb2a57eb8e883eb4ba0bdbb6dff095",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88793,
        "upload_time": "2022-03-24T23:25:19",
        "upload_time_iso_8601": "2022-03-24T23:25:19.103665Z",
        "url": "https://files.pythonhosted.org/packages/2c/7e/00860956ef61faea56f471c0261d39c4060d77e34534934173d4b7321077/naomiutils-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e5d4eb7f1a7a7bb9e1a9e405680a0b259502dbfc387af93da36b090ac229074",
          "md5": "730b7615979044a8d93a88c2cb6efb6f",
          "sha256": "20aace6b463ce2ca239ebbe3a17f76aa772c3b1a1c7fd5cf5261494b2f17ec3a"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "730b7615979044a8d93a88c2cb6efb6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 104797,
        "upload_time": "2022-03-24T23:25:21",
        "upload_time_iso_8601": "2022-03-24T23:25:21.201690Z",
        "url": "https://files.pythonhosted.org/packages/4e/5d/4eb7f1a7a7bb9e1a9e405680a0b259502dbfc387af93da36b090ac229074/naomiutils-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "924937e69d60f6b1a77dafc9d6ffce5977835efbe134580bcc51a7fe5b0f9dd8",
          "md5": "9a63f02d58e7cd082a96d2ae1a2fecf0",
          "sha256": "27fb898d7875237df8b444e8818799960eb398f4a7061145faed50ff422159ab"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a63f02d58e7cd082a96d2ae1a2fecf0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 88891,
        "upload_time": "2022-05-01T16:26:59",
        "upload_time_iso_8601": "2022-05-01T16:26:59.794760Z",
        "url": "https://files.pythonhosted.org/packages/92/49/37e69d60f6b1a77dafc9d6ffce5977835efbe134580bcc51a7fe5b0f9dd8/naomiutils-0.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64352246016295627d5511a0164b27c12d45a64cf4968d44706c7f62f8ac3cc6",
          "md5": "77fb42f28ba417cf1aaf1241434ef44b",
          "sha256": "127cc687e96293deb28eea0a3abf753bfdfc29b77ee078ab46cff80a172359b2"
        },
        "downloads": -1,
        "filename": "naomiutils-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "77fb42f28ba417cf1aaf1241434ef44b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 104933,
        "upload_time": "2022-05-01T16:27:02",
        "upload_time_iso_8601": "2022-05-01T16:27:02.642116Z",
        "url": "https://files.pythonhosted.org/packages/64/35/2246016295627d5511a0164b27c12d45a64cf4968d44706c7f62f8ac3cc6/naomiutils-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab079a446e0a9645735ec6c6a3fbd33dc31e9b56a0b2fdae23da8946d7b489ac",
          "md5": "83f8d18be34cb64e707679c3af535c27",
          "sha256": "61ee6766a52517235dff46d5d07e361f5b39d8c4ca9c9dc912e6a2759cd9f5ad"
        },
        "downloads": -1,
        "filename": "naomiutils-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83f8d18be34cb64e707679c3af535c27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 90334,
        "upload_time": "2022-08-05T04:21:48",
        "upload_time_iso_8601": "2022-08-05T04:21:48.663750Z",
        "url": "https://files.pythonhosted.org/packages/ab/07/9a446e0a9645735ec6c6a3fbd33dc31e9b56a0b2fdae23da8946d7b489ac/naomiutils-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "999dd7c238d3000193df96211a578177c397c8e936fdaa3ac44b580f777b52df",
          "md5": "79efa33ea42dcfcb5f64929a4079c823",
          "sha256": "bcbe3dfef2116f98002d73887ed2260643f381346094c8ee2d7459a21e8da0dc"
        },
        "downloads": -1,
        "filename": "naomiutils-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "79efa33ea42dcfcb5f64929a4079c823",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 106229,
        "upload_time": "2022-08-05T04:21:51",
        "upload_time_iso_8601": "2022-08-05T04:21:51.265146Z",
        "url": "https://files.pythonhosted.org/packages/99/9d/d7c238d3000193df96211a578177c397c8e936fdaa3ac44b580f777b52df/naomiutils-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dd30eb53d78714ad56d818146865f1df85a7cfc96878e402e8a34d92aecba3b",
          "md5": "61dbf2e5375bbe8aca8eb3a6e815f3ad",
          "sha256": "e8b0e80410481e105aa89d30607ec59aadee3a626e2f3f23bb380744f6e61723"
        },
        "downloads": -1,
        "filename": "naomiutils-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61dbf2e5375bbe8aca8eb3a6e815f3ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 90333,
        "upload_time": "2022-08-27T00:46:35",
        "upload_time_iso_8601": "2022-08-27T00:46:35.177843Z",
        "url": "https://files.pythonhosted.org/packages/9d/d3/0eb53d78714ad56d818146865f1df85a7cfc96878e402e8a34d92aecba3b/naomiutils-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2d0eb48f91395ccb8ec53265b6b5b89bfa9769ead7abae70b46e12cfe6152cb",
          "md5": "cc0c7e7ba87ff7b769ec17a35cd997a8",
          "sha256": "aaa960fa409922c3c62191f8f7574f8f2efc52c8373e2fa324fc671923dd7ac4"
        },
        "downloads": -1,
        "filename": "naomiutils-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cc0c7e7ba87ff7b769ec17a35cd997a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 106210,
        "upload_time": "2022-08-27T00:46:37",
        "upload_time_iso_8601": "2022-08-27T00:46:37.672929Z",
        "url": "https://files.pythonhosted.org/packages/c2/d0/eb48f91395ccb8ec53265b6b5b89bfa9769ead7abae70b46e12cfe6152cb/naomiutils-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bc887c1f80f8af4e582fcd0200c0de5760eb02cb599c52374568b44fc4861ae",
          "md5": "740f0f2bd0901436de892697c28dbf9a",
          "sha256": "08ef47051dc404848841fd7eff6970b26c9d1805f94154af742d9a8d253fa713"
        },
        "downloads": -1,
        "filename": "naomiutils-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "740f0f2bd0901436de892697c28dbf9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 90334,
        "upload_time": "2022-08-27T00:51:35",
        "upload_time_iso_8601": "2022-08-27T00:51:35.659710Z",
        "url": "https://files.pythonhosted.org/packages/3b/c8/87c1f80f8af4e582fcd0200c0de5760eb02cb599c52374568b44fc4861ae/naomiutils-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "059adc78d8dcc9643fe0f70ad2a566fd846b63d9a6a66af352b2ebfefcef18b4",
          "md5": "8185f1bdffcc2b5f1d7d9bfe72267df1",
          "sha256": "ed8a3425719d67b83a4493c58ebf3e85238c9e1f2ad36e2b26ee1f189bf2c900"
        },
        "downloads": -1,
        "filename": "naomiutils-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8185f1bdffcc2b5f1d7d9bfe72267df1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 106208,
        "upload_time": "2022-08-27T00:51:38",
        "upload_time_iso_8601": "2022-08-27T00:51:38.173981Z",
        "url": "https://files.pythonhosted.org/packages/05/9a/dc78d8dcc9643fe0f70ad2a566fd846b63d9a6a66af352b2ebfefcef18b4/naomiutils-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cf996747a4e17c277176c99ad3e96aa89e34e0536d6b965f04e210f468264ba",
          "md5": "7e55e1cdb32694737ffdd97b8df516d5",
          "sha256": "f67d633647d7bc0defe8d54455c76281a85d83787728510ad70acb95712b292b"
        },
        "downloads": -1,
        "filename": "naomiutils-0.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e55e1cdb32694737ffdd97b8df516d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 89818,
        "upload_time": "2022-09-25T19:23:31",
        "upload_time_iso_8601": "2022-09-25T19:23:31.884536Z",
        "url": "https://files.pythonhosted.org/packages/6c/f9/96747a4e17c277176c99ad3e96aa89e34e0536d6b965f04e210f468264ba/naomiutils-0.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d6255561f2251ae03ce004bcbca3d9e9e5f7cc56273badb4a5f46bd2fa2be2e",
          "md5": "5099ce17fd505aea5ad09a55db7f720b",
          "sha256": "1c5cbfea88bf7b9a1a2489e4dd214a16789115d0de600926fcdd65710aca2a96"
        },
        "downloads": -1,
        "filename": "naomiutils-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5099ce17fd505aea5ad09a55db7f720b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 105668,
        "upload_time": "2022-09-25T19:23:35",
        "upload_time_iso_8601": "2022-09-25T19:23:35.358394Z",
        "url": "https://files.pythonhosted.org/packages/1d/62/55561f2251ae03ce004bcbca3d9e9e5f7cc56273badb4a5f46bd2fa2be2e/naomiutils-0.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6cf996747a4e17c277176c99ad3e96aa89e34e0536d6b965f04e210f468264ba",
        "md5": "7e55e1cdb32694737ffdd97b8df516d5",
        "sha256": "f67d633647d7bc0defe8d54455c76281a85d83787728510ad70acb95712b292b"
      },
      "downloads": -1,
      "filename": "naomiutils-0.5.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7e55e1cdb32694737ffdd97b8df516d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 89818,
      "upload_time": "2022-09-25T19:23:31",
      "upload_time_iso_8601": "2022-09-25T19:23:31.884536Z",
      "url": "https://files.pythonhosted.org/packages/6c/f9/96747a4e17c277176c99ad3e96aa89e34e0536d6b965f04e210f468264ba/naomiutils-0.5.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d6255561f2251ae03ce004bcbca3d9e9e5f7cc56273badb4a5f46bd2fa2be2e",
        "md5": "5099ce17fd505aea5ad09a55db7f720b",
        "sha256": "1c5cbfea88bf7b9a1a2489e4dd214a16789115d0de600926fcdd65710aca2a96"
      },
      "downloads": -1,
      "filename": "naomiutils-0.5.4.tar.gz",
      "has_sig": false,
      "md5_digest": "5099ce17fd505aea5ad09a55db7f720b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 105668,
      "upload_time": "2022-09-25T19:23:35",
      "upload_time_iso_8601": "2022-09-25T19:23:35.358394Z",
      "url": "https://files.pythonhosted.org/packages/1d/62/55561f2251ae03ce004bcbca3d9e9e5f7cc56273badb4a5f46bd2fa2be2e/naomiutils-0.5.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}