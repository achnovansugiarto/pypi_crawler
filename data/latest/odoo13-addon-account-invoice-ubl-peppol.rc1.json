{
  "info": {
    "author": "Sunflower IT, Odoo Community Association (OCA)",
    "author_email": "support@odoo-community.org",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Odoo",
      "Framework :: Odoo :: 13.0",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python"
    ],
    "description": "==========================\nAccount Invoice UBL PEPPOL\n==========================\n\n.. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n   !! This file is generated by oca-gen-addon-readme !!\n   !! changes will be overwritten.                   !!\n   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n.. |badge1| image:: https://img.shields.io/badge/maturity-Beta-yellow.png\n    :target: https://odoo-community.org/page/development-status\n    :alt: Beta\n.. |badge2| image:: https://img.shields.io/badge/licence-AGPL--3-blue.png\n    :target: http://www.gnu.org/licenses/agpl-3.0-standalone.html\n    :alt: License: AGPL-3\n.. |badge3| image:: https://img.shields.io/badge/github-OCA%2Fedi-lightgray.png?logo=github\n    :target: https://github.com/OCA/edi/tree/13.0/account_invoice_ubl_peppol\n    :alt: OCA/edi\n.. |badge4| image:: https://img.shields.io/badge/weblate-Translate%20me-F47D42.png\n    :target: https://translation.odoo-community.org/projects/edi-13-0/edi-13-0-account_invoice_ubl_peppol\n    :alt: Translate me on Weblate\n.. |badge5| image:: https://img.shields.io/badge/runbot-Try%20me-875A7B.png\n    :target: https://runbot.odoo-community.org/runbot/226/13.0\n    :alt: Try me on Runbot\n\n|badge1| |badge2| |badge3| |badge4| |badge5| \n\nWith module `Account Invoice UBL`, invoices are generated according to generic UBL rules.\n\nIn Europe, some countries use the PEPPOL 3.0 BIS standard as a more strict subset of UBL.\n\nWith this module you can specify some or all of your invoices to be generated and validated\naccording to this stricter standard.\n\n**Table of contents**\n\n.. contents::\n   :local:\n\nConfiguration\n=============\n\n- Go to menu *Invoicing > Configuration > Settings > Invoicing*, under *Electronic Invoices*.\n\n- Formulate a domain for which invoices the dialect should become PEPPOL.\n  By default it is *[]*, so all UBL invoices will be PEPPOL.\n  If you want this only for Belgian partners, then you can fill here for example:\n  `[('partner_id.country_id.code', '=', 'BE')]`\n  Or you can choose to enable this only for selected partner ids.\n\n- You can configure a default tax to use in case an invoice line has no tax specified.\n  This is necessary for example in case of an NGO to satisfy business rule\n  BR-CO-18. Any tax you choose must also have a UNECE tax type (eg. VAT) and tax\n  category (eg. \"Services outside scope of tax\") defined.\n\n- You can configure a default unit of measure, of which the UNECE code will be used\n  in case an invoice line has no unit or product unit. A typical default unit could\n  be the Odoo 'unit', configured with a UNECE code of UN, XUN or C62. This is to\n  satisfy rule BR-23.\n\n- Go to menu *Contacts*\n  Fill the field `coc_registration_number` for your own company's partner record and for\n  those partners that you want to send e-invoices to.\n\n- Go to menu *Contacts > Configuration > Localization > Countries*\n  On any country relevant for invoice traffic, configure the correct PEPPOL EAS id.\n  For the Netherlands, this is for example `0106`, which stands for Dutch chamber of\n  commerce number.\n\n- Either: make sure that every invoice has a bank account filled in;\n  Or: make sure that your payment modes have a fixed connection to a bank account.\n  To do the latter:\n  Go to menu *Invoicing > Configuration > Management > Payment mode*\n  Per payment model, set the field `bank_account_link` to `fixed`\n\nUsage\n=====\n\nIn the invoice form click on button `Send & Print`.\n\nIf the invoice matches the configured domain for PEPPOL, the invoice will be generated\nand validated according to the stricter PEPPOL 3.0 BIS standard.\n\nThe validator on https://test.peppolautoriteit.nl/validate can be used to test the\nvalidity of the generated XML file. There are other online validators around as well.\n\nKnown issues / Roadmap\n======================\n\n* Currently, the user needs to configure the PEPPOL EAS id for each country. For the Netherlands, this is for example `0106`, which stands for Dutch chamber of commerce number. During review, it was noted that (defaults for) these codes could be mapped automatically upon installation of the module, using a post-init hook or a noupdate=1 XML file. This could still be done, saving the perhaps not so tech- or PEPPOL-savvy user some configuration.\n* Currently, this module defines allowed EAS codes from a CSV file. But, other modules could also benefit from this data. So the data could be moved to a separate module in the `community-data-files` repository.\n* When adding a delivery partner to an invoice, some PEPPOL warnings arise about `DeliveryParty` that should not be included. This is non blocking but it is nice if we could also add a clause in the module to remove this.\n* A unit test should be added that actually verifies against PEPPOL and not only against general UBL. This could consist of:\n\n   * Choose a default tax and UoM for this module in `res.config.settings`\n   * Create an outgoing invoice on the main company to some partner\n   * On the main company's partner record, choose any EU country, set a VAT number and a CoC number\n   * On the partner record that is being invoiced, do the same.\n   * On the `res.country` records that are being used by these partners, configure a valid PEPPOL EAS code.\n   * On both involved partners, configure a bank account.\n   * The payment mode that is selected on the invoice should have a `fixed` link to a bank journal.\n   * On this bank journal, select a bank account of type `IBAN`.\n   * Create a tax and selecting a UNECE tax category (eg. VAT) and a tax type (eg. S)\n   * The invoice lines should have this tax defined.\n   * Validate the invoice, generate the XML, and pass it through the validator.\n* This needs to be tested more thoroughly on credit/refund invoices, and purchase invoices.\n* Currently, the module fill in the due date under `PaymentTerms`, but we could prefer the Odoo payment terms field if it is filled.\n* Upon clicking Print and Send button on invoice, when an error is encountered, the popup will coincide with the `mail.compose` popup. Improve the UI experience to the user here.\n\nBug Tracker\n===========\n\nBugs are tracked on `GitHub Issues <https://github.com/OCA/edi/issues>`_.\nIn case of trouble, please check there if your issue has already been reported.\nIf you spotted it first, help us smashing it by providing a detailed and welcomed\n`feedback <https://github.com/OCA/edi/issues/new?body=module:%20account_invoice_ubl_peppol%0Aversion:%2013.0%0A%0A**Steps%20to%20reproduce**%0A-%20...%0A%0A**Current%20behavior**%0A%0A**Expected%20behavior**>`_.\n\nDo not contact contributors directly about support or help with technical issues.\n\nCredits\n=======\n\nAuthors\n~~~~~~~\n\n* Sunflower IT\n\nContributors\n~~~~~~~~~~~~\n\n* Tom Blauwendraat <tom@sunflowerweb.nl>\n\nMaintainers\n~~~~~~~~~~~\n\nThis module is maintained by the OCA.\n\n.. image:: https://odoo-community.org/logo.png\n   :alt: Odoo Community Association\n   :target: https://odoo-community.org\n\nOCA, or the Odoo Community Association, is a nonprofit organization whose\nmission is to support the collaborative development of Odoo features and\npromote its widespread use.\n\nThis module is part of the `OCA/edi <https://github.com/OCA/edi/tree/13.0/account_invoice_ubl_peppol>`_ project on GitHub.\n\nYou are welcome to contribute. To learn how please visit https://odoo-community.org/page/Contribute.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/OCA/edi",
    "keywords": "",
    "license": "AGPL-3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "odoo13-addon-account-invoice-ubl-peppol",
    "package_url": "https://pypi.org/project/odoo13-addon-account-invoice-ubl-peppol/",
    "platform": null,
    "project_url": "https://pypi.org/project/odoo13-addon-account-invoice-ubl-peppol/",
    "project_urls": {
      "Homepage": "https://github.com/OCA/edi"
    },
    "release_url": "https://pypi.org/project/odoo13-addon-account-invoice-ubl-peppol/13.0.1.1.0/",
    "requires_dist": [
      "odoo13-addon-account-invoice-ubl",
      "odoo13-addon-partner-coc",
      "odoo (<13.1dev,>=13.0a)"
    ],
    "requires_python": ">=3.5",
    "summary": "Generate invoices in PEPPOL 3.0 BIS dialect",
    "version": "13.0.1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16991021,
  "releases": {
    "13.0.1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b1d6bb6a0f45a8654a611e1fca79fe8e73554eb47b650920b2ecd1b1d4ada77",
          "md5": "4cd94e7666704aa7b232bb9c08ce6942",
          "sha256": "dab5cfca15b930f513e77b182a0149dcef256b1550a79d15b5a7c7d41a490679"
        },
        "downloads": -1,
        "filename": "odoo13_addon_account_invoice_ubl_peppol-13.0.1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cd94e7666704aa7b232bb9c08ce6942",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 48035,
        "upload_time": "2023-02-23T09:47:38",
        "upload_time_iso_8601": "2023-02-23T09:47:38.344260Z",
        "url": "https://files.pythonhosted.org/packages/4b/1d/6bb6a0f45a8654a611e1fca79fe8e73554eb47b650920b2ecd1b1d4ada77/odoo13_addon_account_invoice_ubl_peppol-13.0.1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b1d6bb6a0f45a8654a611e1fca79fe8e73554eb47b650920b2ecd1b1d4ada77",
        "md5": "4cd94e7666704aa7b232bb9c08ce6942",
        "sha256": "dab5cfca15b930f513e77b182a0149dcef256b1550a79d15b5a7c7d41a490679"
      },
      "downloads": -1,
      "filename": "odoo13_addon_account_invoice_ubl_peppol-13.0.1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4cd94e7666704aa7b232bb9c08ce6942",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 48035,
      "upload_time": "2023-02-23T09:47:38",
      "upload_time_iso_8601": "2023-02-23T09:47:38.344260Z",
      "url": "https://files.pythonhosted.org/packages/4b/1d/6bb6a0f45a8654a611e1fca79fe8e73554eb47b650920b2ecd1b1d4ada77/odoo13_addon_account_invoice_ubl_peppol-13.0.1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}