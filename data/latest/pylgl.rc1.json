{
  "info": {
    "author": "Alexander Feldman",
    "author_email": "alex@llama.gs",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Utilities"
    ],
    "description": "===========================================\npylgl: bindings to lingeling (a SAT solver)\n===========================================\n\nAuthors:\n--------\nA lot of Python binding code and documentation has been lifted from PycoSAT\n<https://pypi.python.org/pypi/pycosat>\n\nLingeling is owned by Armin Biere <http://fmv.jku.at/lingeling/>\n\nPylgl is distributed under the same terms as Lingeling.\n\nAbstract\n--------\n\n`Lingeling <http://fmv.jku.at/lingeling/>`_ is an efficient\n`SAT <http://en.wikipedia.org/wiki/Boolean_satisfiability_problem>`_ solver\nwritten by Armin Biere in pure C.\nThis package provides efficient Python bindings to Lingeling on the C level,\ni.e., when importing pylgl, the lingeling solver becomes part of the\nPython process itself. For ease of deployment, the lingeling source files\nare included in this project. These files have\nbeen extracted from lingeling version bbe-6fe9691-170131.\n\nUsage\n-----\n\nThe ``pylgl`` module has two functions ``solve`` and ``itersolve``,\nboth of which take an iterable of clauses as an argument. Each clause\nis itself represented as an iterable of (non-zero) integers.\n\nThe function ``solve`` returns one of the following:\n  * one solution (a list of integers)\n  * the string \"UNSAT\" (when the clauses are unsatisfiable)\n  * the string \"UNKNOWN\" (when a solution could not be determined within the\n    propagation limit)\n\nThe function ``itersolve`` returns an iterator over solutions.  When the\npropagation limit is specified, exhausting the iterator may not yield all\npossible solutions.\n\nBoth functions take the following keyword arguments:\n  * ``vars``: number of variables (integer)\n  * ``verbose``: the verbosity level (integer)\n  * ``simplify``: enable simplification (integer)\n  * ``seed``: random number generator seed (integer)\n  * ``randec``: enable random decisions order (integer)\n  * ``randecint``: random decision order interval (integer)\n  * ``randphase``: enable random decision phases (integer)\n  * ``randphaseint``: random decision phases interval (integer)\n\n\nExample\n-------\n\nLet us consider the following clauses, represented using\nthe DIMACS `cnf <http://en.wikipedia.org/wiki/Conjunctive_normal_form>`_\nformat::\n\n   p cnf 5 3\n   1 -5 4 0\n   -1 5 3 4 0\n   -3 -4 0\n\nHere, we have 5 variables and 3 clauses, the first clause being\n(x\\ :sub:`1`  or not x\\ :sub:`5` or x\\ :sub:`4`).\nNote that the variable x\\ :sub:`2` is not used in any of the clauses,\nwhich means that for each solution with x\\ :sub:`2` = True, we must\nalso have a solution with x\\ :sub:`2` = False.  In Python, each clause is\nmost conveniently represented as a list of integers.  Naturally, it makes\nsense to represent each solution also as a list of integers, where the sign\ncorresponds to the Boolean value (+ for True and - for False) and the\nabsolute value corresponds to i\\ :sup:`th` variable::\n\n   >>> import pylgl\n   >>> cnf = [[1, -5, 4], [-1, 5, 3, 4], [-3, -4]]\n   >>> pylgl.solve(cnf)\n   [1, -2, -3, -4, 5]\n\nThis solution translates to: x\\ :sub:`1` = x\\ :sub:`5` = True,\nx\\ :sub:`2` = x\\ :sub:`3` = x\\ :sub:`4` = False\n\nTo find all solutions, use ``itersolve``::\n\n   >>> for sol in pylgl.itersolve(cnf):\n   ...     print sol\n   ...\n   [1, -2, -3, -4, 5]\n   [1, -2, -3, 4, -5]\n   [1, -2, -3, 4, 5]\n   ...\n   >>> len(list(pylgl.itersolve(cnf)))\n   18\n\nIn this example, there are a total of 18 possible solutions, which had to\nbe an even number because x\\ :sub:`2` was left unspecified in the clauses.\n\nThe fact that ``itersolve`` returns an iterator, makes it very elegant\nand efficient for many types of operations.  For example, using\nthe ``itertools`` module from the standard library, here is how one\nwould construct a list of (up to) 3 solutions::\n\n   >>> import itertools\n   >>> list(itertools.islice(pylgl.itersolve(cnf), 3))\n   [[1, -2, -3, -4, 5], [1, -2, -3, 4, -5], [1, -2, -3, 4, 5]]\n\n\nImplementation of itersolve\n---------------------------\n\nHow does one go from having found one solution to another solution?\nThe answer is surprisingly simple.  One adds the *inverse* of the already\nfound solution as a new clause.  This new clause ensures that another\nsolution is searched for, as it *excludes* the already found solution.\nHere is basically a pure Python implementation of ``itersolve`` in terms\nof ``solve``::\n\n   def py_itersolve(clauses): # don't use this function!\n       while True:            # (it is only here to explain things)\n           sol = pylgl.solve(clauses)\n           if isinstance(sol, list):\n               yield sol\n               clauses.append([-x for x in sol])\n           else: # no more solutions -- stop iteration\n               return\n\nThis implementation has several problems.  Firstly, it is quite slow as\n``pylgl.solve`` has to convert the list of clauses over and over and over\nagain.  Secondly, after calling ``py_itersolve`` the list of clauses will\nbe modified.  In pylgl, ``itersolve`` is implemented on the C level,\nmaking use of the lingeling C interface (which makes it much, much faster\nthan the naive Python implementation above).",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abfeldman/pylgl",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pylgl",
    "package_url": "https://pypi.org/project/pylgl/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pylgl/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/abfeldman/pylgl"
    },
    "release_url": "https://pypi.org/project/pylgl/0.0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "bindings to lgl (a SAT solver)",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2612223,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1e4fb8cda37e5ed0540da2f6ac210a2352b2d962798bae15c37684288b00905",
          "md5": "8c353ec36025cc4f6440563c2affe9e4",
          "sha256": "857960e0629acd3a9802a4f921f6d68848c28cd7af3106223899ab3148b576ba"
        },
        "downloads": -1,
        "filename": "pylgl-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8c353ec36025cc4f6440563c2affe9e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 183990,
        "upload_time": "2017-02-01T17:58:38",
        "upload_time_iso_8601": "2017-02-01T17:58:38.504855Z",
        "url": "https://files.pythonhosted.org/packages/f1/e4/fb8cda37e5ed0540da2f6ac210a2352b2d962798bae15c37684288b00905/pylgl-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1e4fb8cda37e5ed0540da2f6ac210a2352b2d962798bae15c37684288b00905",
        "md5": "8c353ec36025cc4f6440563c2affe9e4",
        "sha256": "857960e0629acd3a9802a4f921f6d68848c28cd7af3106223899ab3148b576ba"
      },
      "downloads": -1,
      "filename": "pylgl-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8c353ec36025cc4f6440563c2affe9e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 183990,
      "upload_time": "2017-02-01T17:58:38",
      "upload_time_iso_8601": "2017-02-01T17:58:38.504855Z",
      "url": "https://files.pythonhosted.org/packages/f1/e4/fb8cda37e5ed0540da2f6ac210a2352b2d962798bae15c37684288b00905/pylgl-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}