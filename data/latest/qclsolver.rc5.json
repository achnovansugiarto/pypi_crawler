{
  "info": {
    "author": "Yuexun Huang & Ke Lin",
    "author_email": "yesunhuang@mail.ustc.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: C++",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# Quick guide to QCLS\nQCLS: Cluster Expansion Based Solver for Open Quantum System\n\n## Install\n\n### Requirement\n\n* C++ Build environment\n  (Simply download [VSBuildTools](https://visualstudio.microsoft.com/downloads/#other) and install C++ build tools if you don't know how to configure it.)\n\n* Python 3.7 and later version\n\n* Scipy 1.4.1 and later version\n\n* numpy 1.16.5 and later version\n\n  Quick install\n\n  ```\n  pip install -r requirements.txt\n  ```\n\n### Setup\n\n#### Install manually\n\nRun the following code under the path `./cluster_py`\n\n```\npython ./setup.py install\n```\n\n#### Install via pip\n\n```\npip install QCLSolver\n```\n\n#### Install via conda (python<3.9)\n\n```\nconda install -c yesunhuang qclsolver\n```\n\n#### Suggested way of import\n\n```python\nfrom QCLSolver.solver import Solve\nfrom QCLSolver.data import Data\nfrom QCLSolver.tool import*\n```\n\n\n\n## Genernal procedure\n\nUsing `QCLS` is quite similar to using the `mesolve` in `QuTip`, a quite simple procedure can be followed:\n\n* Create lists for representing the Hamiltonian, collapse operators and the initial state. Determine the tracking operators and the required cluster-expansion order.\n\n  (We are using the upper class English letters to represent creation operators and lower class ones to represent the annihilation operators. **The system will automatically detect how many different letters u have inputted and assume the same number of modes in the system**. )\n  \n* Derive the equations for the systems using the construct\n  function of `Data` class and store the instance.\n\n* Feed the `Data` instance into the `Solve` method and evolve the system.\n\n* Process the and visualize the result.\n\n## Quick Example\n\nThe following code shows how to use `QCLS` to simulate the *Janes-Cumming model*. (See also the same title notebooks from *Quantum mechanics lectures with QuTiP*)\n\nThe Hamiltonian can be expressed as\n\n![](http://latex.codecogs.com/svg.latex?\\hat{H}=\\hbar\\omega_c\\hat{a}^\\dagger\\hat{a}+\\frac{1}{2}\\hbar\\omega_a\\hat{\\sigma}_z+{\\hbar}g(\\hat{a}^\\dagger\\hat{\\sigma}_-+\\hat{a}\\hat{\\sigma}_+))\n\n```python\n#parameters\nwc = 1.0  * 2 * pi  # cavity frequency\nwa = 1.0  * 2 * pi  # atom frequency\ng  = 0.05 * 2 * pi  # coupling strength\nkappa = 0.005       # cavity dissipation rate\ngamma = 0.05  \n\n#Create the time list\ntlist = np.linspace(0,25,101) #numpy has been imported as np\n\n#Build up the Hamiltonian operators\nHamilton = [['Aa',wc],['Bb',wa],['Ab',g],['aB',g]]\n\n#Build up the Collapse operators\nCo_ps = [['a',kappa ],['b',gamma ]]\n\n#Define the inital states (Only folk states are supported now)\npsi0 = [0,1]\n\n#Add the tracking operators (The result will be returned at the same order of the operators in T_o)\nT_o = ['Aa','Bb']\n\n#Derive the equations under the expanson order of 2\ndata = Data(Hamilton ,Co_ps , T_o , 2)\n\n#Evolve the system (We are using the ODE solver `solve_vip` from scipy, thus the parameters and the output forms are almost identity  )\nsol = Solve(data , psi0, (0,25), t_eval = tlist )\n\n#Visualize the result via matplotlib\nfig, axes = plt.subplots(1, 1, figsize=(10,6))\n\naxes.plot(tlist, np.real(sol.y[0]),color='red',linestyle='--',label=\"Cavity(QCLS)\")\naxes.plot(tlist, np.real(sol.y[1]),color='blue',linestyle='--',label=\"Atom excited state(QCLS)\")\naxes.legend(loc=0)\naxes.set_xlabel('Time')\naxes.set_ylabel('Occupation probability')\n\nplt.show()\n```\n\n![Image text](https://github.com/yesunhuang/QCLS/blob/main/fig/example.png)\n## API\n\n### 1.Data Class\n\n#### 1.1 Constructor\n\n* Prototype\n\n  ```python\n  class Data:\n      def __init__(self, H, Co_ps, trackList, maxOPLen)\n  ```\n\n* Parameters\n  1. H: The list of Hamiltonian, the form should be of [['Operators','Coefficient']], Coefficient can be a complex number or **a function** \n  2. Co_ps: Collapse operators, the form is the same as Hamiltonian.\n  3. trackOp: The list of the operators whose mean value you are going to track.\n  4. maxOPLen: The order of cluster expansion\n\n#### 1.2 UpdateInitialState(...)\n\n* Prototype\n\n  ```python\n  def UpdateInitialState(self, initialState)\n  ```\n\n* Parameters\n\n  1. initialState: A list of  initial folk states. The order of mode is following the alphabet order of the letters u used to represent the operators.\n\n* Return\n\n  ​\tA list of new current mean value of tracking operators calculated based on the initial state.\n\n#### 1.3 Calculate(...)\n\n* Prototype\n\n  ```python\n  Calculate(self)\n  ```\n\n* Parameters\n\n  None\n\n* Return\n\n  ​\tA list of the slope values using to evolve the mean value of operators\n\n#### 1.4 SetCoefHOList(...) \n\n**Warning: this function is for advanced use and might still have bugs.**\n\n* Prototype\n\n  ```python\n  SetCoefHOList(self, coefHOList, args=None, t=0, ow=True)\n  ```\n\n* Parameters\n\n  \t1. coefHoList: New list of Hamiltonian' s coefficient.\n\n  ​    Other default parameters is for helper use. Plz do not modify them.\n\n* Important\n\n  Run `UpdateCoef` with `ForceUpdate=true`  after running this method. \n\n#### 1.5 SetCoefCOList(...)\n\n**Warning: this function is for advanced use and might still have bugs.**\n\n* Prototype\n\n  ```python\n  SetCoefCOList(self, coefCOList, args=None, t=0, ow=True)\n  ```\n\n* Parameters\n\n  1. coefCOList: New list of collapse operators' coefficient.\n\n  ​    Other default parameters is for helper use. Plz do not modify them.\n\n* Important\n\n  Run `UpdateCoef` with `ForceUpdate=true`  after running this method. \n\n#### 1.6 SetCurrentValue(...)\n\n**Warning: this function is for advanced use and might still have bugs.**\n\n* Prototype\n\n  ```python\n  def SetCurrentValue(self, curValueList)\n  ```\n\n* Parameters\n\n  1. curValueList: New list of the mean value of tracking operators. \n\n* Important\n\n  **Please be noted that after the deriving process, the `T_o` list not only contains the initial tracking operators but all the operators needed to calculate the evolution.**\n\n#### 1.7 GetCurrentValue(...)\n\n**Warning: this function is for advanced use and might still have bugs.**\n\n* Prototype\n\n  ```python\n  def GetCurrentValue(self)\n  ```\n\n* Important\n\n  **Please be noted that after the deriving process, the `T_o` list not only contains the initial tracking operators but all the operators needed to calculate the evolution.**\n\n#### 1.8 UpdateCoef(...)\n\n**Warning: this function is for advanced use and might still have bugs.**\n\n* Prototype\n\n  ```python\n  def UpdateCoef(self, t, args=None, ForceUpdate=False)\n  ```\n\n* Parameters\n\n  ​\t1.t: current time point.\n\n  ​\t2.ForceUpdate: Force an advanced update to the coefficient list.\n\n\n\n### 2.Solve method\n\n​\tThis function is simply connecting `QCLS` to outer solver.\n\n* Prototype\n\n  ```python\n  def Solve(ddata, Initial_State, t_span, user_args=None, method='RK45', t_eval=None, dense_output=False, events=None, vectorized=False, **options)\n  ```\n\n* Parameters\n\n  ​\t1.ddata: The `Data` instance.\n\n  ​\t2.Initial_State: A list for representing the initial state.\n\n  ​\t3.other paramters: the same as the parameters requested by `solve_ivp` from *Scipy*\n\n* Return:\n\n  The same as the parameters requested by `solve_ivp` from *Scipy*. The result of y will be returned at the same order of the operators in T_o.\n\n* Advanced\n  * If u wanna use another solver, u need to implement a convert function following the examples above.\n\n  ```python\n  def ConvertToSolver(t,y,data):\n      data.SetCurrentValue(y.tolist())\n      dy=np.asarray(data.Calculate())\n      return dy\n  ```\n\n  * Or if you are building your own solver.\n   ```python\n  def NaiveSolver(data,pace,t_range,initialState):\n      data.UpdateInitialState(initialState)\n      y0=data.GetCurrentValue()\n      n=int((t_range[1]-t_range[0])//pace)\n      tlist=np.linspace(t_range[0],t_range[1],n)\n      y=np.zeros([len(y0),n],dtype=complex)\n      for i in range(0,len(y0)):\n        y[i,0]=y0[i]\n      for i in range(1,n):\n          k1=np.asarray(data.Calculate())\n          y_s=y[...,i-1]+k1*pace*0.5\n          data.SetCurrentValue(y_s.tolist())\n          k2=np.asarray(data.Calculate())\n          y_s=y[...,i-1]+k2*pace*0.5\n          data.SetCurrentValue(y_s.tolist())\n          k3=np.asarray(data.Calculate())\n          y_s=y[...,i-1]+k3*pace\n          data.SetCurrentValue(y_s.tolist())\n          k4=np.asarray(data.Calculate())\n          dy=(k1+2*k2+2*k3+k4)/6\n          y[...,i]=y[...,i-1]+dy*pace\n          data.SetCurrentValue(y[...,i].tolist())\n      return (y,tlist)\n   ```\n  \n### 3.cluster_expansion method\n\nThis function is used to investigate cluster expansion.\n\n* Prototype\n\n  ```python\n  def cluster_expansion(op: str, max_op_len: int = 5) -> Tuple[List[int], Dict[str, int], List[Tuple[complex, Tuple[int]]]]:\n* Parameters\n\n  ​\t1.op: The string representation of operator.\n\n  ​\t2.max_op_len:order of cluster expansion(please be noted that the operator inputted will be expanded for at least one time.)\n\n* Return:\n\n  The information of the cluster expansion form of inputted operator.\n  \n## More Information\n\n* Check out the source codes and the jupyter notebook files.\n\n* See also the published paper.\n\n* If your are interesting in the implement, check up the *ImplementDetail* pdfs. (Warm prompt: those files are so messy and suck.)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "physics quantum optics",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "QCLSolver",
    "package_url": "https://pypi.org/project/QCLSolver/",
    "platform": "",
    "project_url": "https://pypi.org/project/QCLSolver/",
    "project_urls": {
      "Documentation": "https://github.com/yesunhuang/QCLS",
      "Source": "https://github.com/yesunhuang/QCLS",
      "Tracker": "https://github.com/yesunhuang/QCLS/issues"
    },
    "release_url": "https://pypi.org/project/QCLSolver/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A tool for cluster expansion solver.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10528596,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0981e9a7653c924cd9ef2d7d355985506177f07bfb7c2d3d9546d0e06f1c6f92",
          "md5": "bb84cba3db46c427c3f915a37474c949",
          "sha256": "d38d211eb99bd4538edd886d5bfbb18f8ab63487f5c6e126cceab7961aa315c1"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.1-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "bb84cba3db46c427c3f915a37474c949",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 70698,
        "upload_time": "2020-11-02T02:57:03",
        "upload_time_iso_8601": "2020-11-02T02:57:03.497417Z",
        "url": "https://files.pythonhosted.org/packages/09/81/e9a7653c924cd9ef2d7d355985506177f07bfb7c2d3d9546d0e06f1c6f92/QCLSolver-1.0.1-cp38-cp38-win_amd64.whl",
        "yanked": true,
        "yanked_reason": "linux install fail"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8be0daa3b77b09fc2168bc04ce2770703d4fc6af124d0a976558aacb4f074087",
          "md5": "b1ceefb5db34e8060b074fc9f2fec752",
          "sha256": "db32265a6c0f9ce56859738b57890587462a4e117fc496786d474dcf09a60131"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b1ceefb5db34e8060b074fc9f2fec752",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34710,
        "upload_time": "2020-11-02T02:57:06",
        "upload_time_iso_8601": "2020-11-02T02:57:06.954448Z",
        "url": "https://files.pythonhosted.org/packages/8b/e0/daa3b77b09fc2168bc04ce2770703d4fc6af124d0a976558aacb4f074087/QCLSolver-1.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "linux install fail"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51211b1b6ebeaf4278caf8ff28d56055e3fb5d8c83f157c45efc6c03ac1f28da",
          "md5": "700361a699cb8db25dce24bd5f473b75",
          "sha256": "1c8bdc57054845089e91f412de8ca3ebf1ff4ae3eb028eeed07eef0d4920cd20"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.2-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "700361a699cb8db25dce24bd5f473b75",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 70706,
        "upload_time": "2020-11-02T17:36:51",
        "upload_time_iso_8601": "2020-11-02T17:36:51.598177Z",
        "url": "https://files.pythonhosted.org/packages/51/21/1b1b6ebeaf4278caf8ff28d56055e3fb5d8c83f157c45efc6c03ac1f28da/QCLSolver-1.0.2-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20d10057e43f86730c3b9c3fdc618b5ea19b5a32fdd870bb6ad9d13ac0e0cc40",
          "md5": "b793c4a2b11ca6908a80599bd9884015",
          "sha256": "0c5b9ce8218bde75dd246a316963cc9fb2a0b7d6a2bfaca2c0ebe9c9c1b0418d"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b793c4a2b11ca6908a80599bd9884015",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 47149,
        "upload_time": "2020-11-02T17:36:52",
        "upload_time_iso_8601": "2020-11-02T17:36:52.998786Z",
        "url": "https://files.pythonhosted.org/packages/20/d1/0057e43f86730c3b9c3fdc618b5ea19b5a32fdd870bb6ad9d13ac0e0cc40/QCLSolver-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b97f2adee644aa422f4912c1d6b8dafe7e75d91cf4d3fdcd669751763cc0321",
          "md5": "c711cbd6cfc15cf562c64c5d166fe3dc",
          "sha256": "7eeb0eb7e50dcd4fd21fbe6a97a73d178af2dd6986b120a060d63869c144c337"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.3-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "c711cbd6cfc15cf562c64c5d166fe3dc",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 71941,
        "upload_time": "2020-12-12T11:56:54",
        "upload_time_iso_8601": "2020-12-12T11:56:54.500863Z",
        "url": "https://files.pythonhosted.org/packages/7b/97/f2adee644aa422f4912c1d6b8dafe7e75d91cf4d3fdcd669751763cc0321/QCLSolver-1.0.3-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9eebf9e6520e18599d771a5d71ea05ffa0cf9e6f562a7ac4c08b192b6a58f5e4",
          "md5": "c7acc63af8c4b032b3856fc6531cf992",
          "sha256": "5e499ec2414e02fe93afe0cc3d6f7f91d6b647f740739fec213c93e32947f19c"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c7acc63af8c4b032b3856fc6531cf992",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48365,
        "upload_time": "2020-12-12T11:56:57",
        "upload_time_iso_8601": "2020-12-12T11:56:57.154164Z",
        "url": "https://files.pythonhosted.org/packages/9e/eb/f9e6520e18599d771a5d71ea05ffa0cf9e6f562a7ac4c08b192b6a58f5e4/QCLSolver-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1954e721b394b12c14157206d465b54e91f0d53a842188dd225dbb53c2eeea40",
          "md5": "5200a906bb4c519b6b9a099f0bdbb0f1",
          "sha256": "1974551b6a8b22f92dcfd94226792e6f67b01b1828bc0c7346e476b2208d1beb"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.4-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5200a906bb4c519b6b9a099f0bdbb0f1",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 72950,
        "upload_time": "2020-12-12T16:24:05",
        "upload_time_iso_8601": "2020-12-12T16:24:05.069767Z",
        "url": "https://files.pythonhosted.org/packages/19/54/e721b394b12c14157206d465b54e91f0d53a842188dd225dbb53c2eeea40/QCLSolver-1.0.4-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a48a6344f13efbac84b8b00c116adbac56233146671f38ad3565615308a7738a",
          "md5": "6ce377496529c6f04756e1dd67617ae0",
          "sha256": "147651b48b248767ff074339d2c418a4fcf03b2974b4363b8dd42a36c63ce973"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6ce377496529c6f04756e1dd67617ae0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48968,
        "upload_time": "2020-12-12T16:24:08",
        "upload_time_iso_8601": "2020-12-12T16:24:08.370960Z",
        "url": "https://files.pythonhosted.org/packages/a4/8a/6344f13efbac84b8b00c116adbac56233146671f38ad3565615308a7738a/QCLSolver-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fc6f76f848ebbcb75f4c3a02caf17f75d02f6697137bd38933b49cb4b7fce15",
          "md5": "1b7f3c90569de9ea062207ca5a528ac7",
          "sha256": "7e28a363ef2b115c55b800da97cf1a79928b5cf898e2b68a56fee8b268db10db"
        },
        "downloads": -1,
        "filename": "QCLSolver-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1b7f3c90569de9ea062207ca5a528ac7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48738,
        "upload_time": "2021-06-01T15:08:39",
        "upload_time_iso_8601": "2021-06-01T15:08:39.234598Z",
        "url": "https://files.pythonhosted.org/packages/1f/c6/f76f848ebbcb75f4c3a02caf17f75d02f6697137bd38933b49cb4b7fce15/QCLSolver-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fc6f76f848ebbcb75f4c3a02caf17f75d02f6697137bd38933b49cb4b7fce15",
        "md5": "1b7f3c90569de9ea062207ca5a528ac7",
        "sha256": "7e28a363ef2b115c55b800da97cf1a79928b5cf898e2b68a56fee8b268db10db"
      },
      "downloads": -1,
      "filename": "QCLSolver-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1b7f3c90569de9ea062207ca5a528ac7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 48738,
      "upload_time": "2021-06-01T15:08:39",
      "upload_time_iso_8601": "2021-06-01T15:08:39.234598Z",
      "url": "https://files.pythonhosted.org/packages/1f/c6/f76f848ebbcb75f4c3a02caf17f75d02f6697137bd38933b49cb4b7fce15/QCLSolver-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}