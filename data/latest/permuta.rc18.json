{
  "info": {
    "author": "Permuta Triangle",
    "author_email": "permutatriangle@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Education",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "#######\npermuta\n#######\n\n.. image:: https://travis-ci.org/PermutaTriangle/Permuta.svg?branch=master\n    :alt: Travis\n    :target: https://travis-ci.org/PermutaTriangle/Permuta\n.. image:: https://img.shields.io/pypi/v/Permuta.svg\n    :alt: PyPI\n    :target: https://pypi.python.org/pypi/Permuta\n.. image:: https://img.shields.io/pypi/l/Permuta.svg\n    :target: https://pypi.python.org/pypi/Permuta\n.. image:: https://img.shields.io/pypi/pyversions/Permuta.svg\n    :target: https://pypi.python.org/pypi/Permuta\n.. image:: http://img.shields.io/badge/readme-tested-brightgreen.svg\n    :alt: Travis\n    :target: https://travis-ci.org/PermutaTriangle/Permuta\n.. image:: https://requires.io/github/PermutaTriangle/Permuta/requirements.svg?branch=master\n    :target: https://requires.io/github/PermutaTriangle/Permuta/requirements/?branch=master\n    :alt: Requirements Status\n.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.4725759.svg\n   :target: https://doi.org/10.5281/zenodo.4725759\n\nPermuta is a Python library for working with perms (short for permutations),\npatterns, and mesh patterns.\n\nIf this code is useful to you in your work, please consider citing it. To generate a\nBibTeX entry (or another format), click the \"DOI\" badge above and locate the \"Cite As\"\nsection.\n\nIf you need support, you can join us in our `Discord support server`_.\n\n.. _Discord support server: https://discord.gg/ngPZVT5\n\nInstalling\n==========\n\nTo install Permuta on your system, run:\n\n.. code-block:: bash\n\n    pip install permuta\n\nIt is also possible to install Permuta in development mode to work on the\nsource code, in which case you run the following after cloning the repository:\n\n.. code-block:: bash\n\n    ./setup.py develop\n\nTo run the unit tests:\n\n.. code-block:: bash\n\n    pip install -r test_requirements.txt\n    ./setup.py test\n\nUsing Permuta\n#############\n\nOnce you've installed Permuta, it can be imported by a Python script or an\ninteractive Python session, just like any other Python library:\n\n.. code-block:: python\n\n    >>> from permuta import *\n\nImporting ``*`` from it supplies you with the 'Perm' and 'PermSet'\nclasses along with the 'AvoidanceClass' class (with alias 'Av') for generating\nperms avoiding a set of patterns. It also gives you the 'MeshPatt' class\nand some other submodules which we will not discuss in this readme.\n\nCreating a single perm\n######################\n\nPermutations are zero-based in Permuta and can be created using any iterable.\n\n.. code-block:: python\n\n    >>> Perm()  # Empty perm\n    Perm(())\n    >>> Perm([])  # Another empty perm\n    Perm(())\n    >>> Perm((0, 1, 2, 3)) # The zero-based version of 1234\n    Perm((0, 1, 2, 3))\n    >>> Perm((2, 1, 3)) # Warning: it will initialise with any iterable\n    Perm((2, 1, 3))\n\nPermutations can also be created using some specific class methods.\n\n.. code-block:: python\n\n    >>> Perm.from_string(\"201\")  # strings\n    Perm((2, 0, 1))\n    >>> Perm.one_based((1, 3, 2, 4)) # one-based iterable of integers\n    Perm((0, 2, 1, 3))\n    >>> Perm.to_standard(\"a2gsv3\") # standardising any iterable using '<'\n    Perm((2, 0, 3, 4, 5, 1))\n    >>> Perm.from_integer(210) # an integer between 0 and 9876543210\n    Perm((2, 1, 0))\n    >>> Perm.from_integer(321) # any integer given is standardised\n    Perm((2, 1, 0))\n    >>> Perm.from_integer(201)\n    Perm((2, 0, 1))\n\nPrinting perms gives zero-based strings.\n\n.. code-block:: python\n\n    >>> print(Perm(()))\n    Îµ\n    >>> print(Perm((2, 1, 0)))\n    210\n    >>> print(Perm((6, 2, 10, 9, 3, 8, 0, 1, 5, 11, 4, 7)))\n    (6)(2)(10)(9)(3)(8)(0)(1)(5)(11)(4)(7)\n\nThe avoids, contains, and occurrence methods enable working with patterns:\n\n.. code-block:: python\n\n    >>> p = Perm((0,2,1,3))\n    >>> p.contains(Perm((2, 1, 0)))\n    False\n    >>> p.avoids(Perm((0, 1)))\n    False\n    >>> list(p.occurrences_of(Perm((1, 0))))\n    [(1, 2)]\n    >>> list(Perm((0, 1)).occurrences_in(p))\n    [(0, 1), (0, 2), (0, 3), (1, 3), (2, 3)]\n\nThe basic symmetries are implemented:\n\n.. code-block:: python\n\n    >>> [p.reverse(), p.complement(), p.inverse()]\n    [Perm((3, 1, 2, 0)), Perm((3, 1, 2, 0)), Perm((0, 2, 1, 3))]\n\nTo take direct sums and skew sums we use ``+`` and ``-``:\n\n.. code-block:: python\n\n    >>> q = Perm((0, 1, 2, 3, 4))\n    >>> p + q\n    Perm((0, 2, 1, 3, 4, 5, 6, 7, 8))\n    >>> p - q\n    Perm((5, 7, 6, 8, 0, 1, 2, 3, 4))\n\nThere are numerous practical methods available:\n\n.. code-block:: python\n\n    >>> list(p.fixed_points())\n    [0, 3]\n    >>> list(p.ascents())\n    [0, 2]\n    >>> list(p.descents())\n    [1]\n    >>> list(p.inversions())\n    [(1, 2)]\n    >>> p.major_index()\n    2\n\nCreating a perm class\n#####################\n\nPerm classes are specified with a basis:\n\n.. code-block:: python\n\n    >>> basis = Basis(Perm((1, 0, 2)), Perm((1, 2, 0)))\n    >>> basis\n    Basis((Perm((1, 0, 2)), Perm((1, 2, 0))))\n    >>> perm_class = Av(basis)\n    >>> perm_class\n    Av(Basis((Perm((1, 0, 2)), Perm((1, 2, 0)))))\n\nYou can ask whether a perm belongs to the perm class:\n\n.. code-block:: python\n\n    >>> Perm((3, 2, 1, 0)) in perm_class\n    True\n    >>> Perm((0, 2, 1, 3)) in perm_class\n    False\n\nYou can get its enumeration up to a fixed length.\n\n.. code-block:: python\n\n    >>> perm_class.enumeration(10)\n    [1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n    >>> perm_class.count(11)\n    1024\n\nYou can also look to see if some well know enumeration strategies apply to a\ngiven class.\n\n.. code-block:: python\n\n    >>> from permuta.enumeration_strategies import find_strategies\n    >>> basis = [Perm((3, 2, 0, 1)), Perm((1, 0, 2, 3))]\n    >>> for strat in find_strategies(basis):\n    ...     print(strat.reference())\n    The insertion encoding of permutations: Corollary 10\n    >>> basis = [Perm((1, 2, 0, 3)), Perm((2, 0, 1, 3)), Perm((0, 1, 2, 3))]\n    >>> for strat in find_strategies(basis):\n    ...     print(strat.reference())\n    Enumeration of Permutation Classes and Weighted Labelled Independent Sets: Corollary 4.3\n\nPermutation statistics\n######################\n\nWith the ``PermutationStatistic`` class we can look for distributions of statistics for\nclasses and look for statistics preservations (or transformation) either for two classes\nor given a bijection. First we need to import it.\n\n.. code-block:: python\n\n    >>> from permuta.permutils.statistics import PermutationStatistic\n\nTo see a distribution for a given statistic we grab its instance and provide a length\nand a class (no class will use the set of all permutations).\n\n.. code-block:: python\n\n    >>> PermutationStatistic.show_predefined_statistics() # Show all statistics with id\n    [0] Number of inversions\n    [1] Number of non-inversions\n    [2] Major index\n    [3] Number of descents\n    [4] Number of ascents\n    [5] Number of peaks\n    [6] Number of valleys\n    [7] Number of cycles\n    [8] Number of left-to-right minimas\n    [9] Number of left-to-right maximas\n    [10] Number of right-to-left minimas\n    [11] Number of right-to-left maximas\n    [12] Number of fixed points\n    [13] Order\n    [14] Longest increasing subsequence\n    [15] Longest decreasing subsequence\n    [16] Depth\n    [17] Number of bounces\n    [18] Maximum drop size\n    [19] Number of primes in the column sums\n    [20] Holeyness of a permutation\n    [21] Number of stack-sorts needed\n    [22] Number of pop-stack-sorts needed\n    [23] Number of pinnacles\n    [24] Number of cyclic peaks\n    [25] Number of cyclic valleys\n    [26] Number of double excedance\n    [27] Number of double drops\n    [28] Number of foremaxima\n    [29] Number of afterminima\n    [30] Number of aftermaxima\n    [31] Number of foreminima\n\n    >>> depth = PermutationStatistic.get_by_index(16)\n    >>> depth.distribution_for_length(5)\n    [1, 4, 12, 24, 35, 24, 20]\n    >>> depth.distribution_up_to(4, Av.from_string(\"123\"))\n    [[1], [1], [1, 1], [0, 2, 3], [0, 0, 3, 7, 4]]\n\nGiven a bijection as a dictionary, we can check which statistics are preserved with\n``check_all_preservations`` and which are transformed with ``check_all_transformed``\n\n.. code-block:: python\n\n    >>> bijection = {p: p.reverse() for p in Perm.up_to_length(5)}\n    >>> for stat in PermutationStatistic.check_all_preservations(bijection):\n    ...     print(stat)\n    Number of peaks\n    Number of valleys\n    Holeyness of a permutation\n    Number of pinnacles\n\nWe can find all (predefined) statistics equally distributed over two permutation\nclasses with ``equally_distributed``. We also support checks for joint distribution\nof more than one statistics with ``jointly_equally_distributed`` and transformation\nof jointly distributed stats with ``jointly_transformed_equally_distributed``.\n\n.. code-block:: python\n\n    >>> cls1 = Av.from_string(\"2143,415263\")\n    >>> cls2 = Av.from_string(\"3142\")\n    >>> for stat in PermutationStatistic.equally_distributed(cls1, cls2, 6):\n    ...     print(stat)\n    Major index\n    Number of descents\n    Number of ascents\n    Number of peaks\n    Number of valleys\n    Number of left-to-right minimas\n    Number of right-to-left maximas\n    Longest increasing subsequence\n    Longest decreasing subsequence\n    Number of pinnacles\n\nThe BiSC algorithm\n==================\n\nThe BiSC algorithm can tell you what mesh patterns are avoided by a set of\npermutations. Although the output of the algorithm is only guaranteed to\ndescribe the finite inputted set of permutations, the user usually hopes that\nthe patterns found by the algorithm describe an infinite set of permutatations.\nTo use the algorithm we first need to import it.\n\n.. code-block:: python\n\n    >>> from permuta.bisc import *\n\nA classic example of a set of permutations described by pattern avoidance are\nthe permutations sortable in one pass through a stack. We use the function\n``stack_sortable`` which returns ``True`` for permutations that satisfy this\nproperty. The user now has two choices: Run\n``auto_bisc(Perm.stack_sortable)`` and let the algorithm run\nwithout any more user input. It will try to use sensible values, starting by\nlearning small patterns from small permutations, and only considering longer\npatterns when that fails. If the user wants to have more control over what\nhappens that is also possible and we now walk through that: We input the\nproperty into ``bisc`` and ask it to search for patterns of length 3.\n\n.. code-block:: python\n\n    >>> bisc(Perm.stack_sortable, 3)\n    I will use permutations up to length 7\n    {3: {Perm((1, 2, 0)): [set()]}}\n\nWhen this command is run without specifying what length of permutations you\nwant to consider, ``bisc`` will create permutations up to length 7 that satisfy\nthe property of being stack-sortable. The output means: There is a single\nlength 3 pattern found, and its underlying classical pattern is the permutation\n``Perm((1, 2, 0))``. Ignore the ``[set()]`` in the output for now. We can use\n``show_me`` to get a better visualization of the patterns found. In this call\nto the algorithm we also specify that only permutations up to length 5 should\nbe considered.\n\n.. code-block:: python\n\n    >>> SG = bisc(Perm.stack_sortable, 3, 5)\n    >>> show_me(SG)\n    There are 1 underlying classical patterns of length 3\n    There are 1 different shadings on 120\n    The number of sets to monitor at the start of the clean-up phase is 1\n    <BLANKLINE>\n    Now displaying the patterns\n    <BLANKLINE>\n     | | |\n    -+-â-+-\n     | | |\n    -â-+-+-\n     | | |\n    -+-+-â-\n     | | |\n    <BLANKLINE>\n\nWe should ignore the ``The number of sets to monitor at the start of the clean-up phase\nis 1`` message for now.\n\nWe do not really need this algorithm for sets of permutations described by the\navoidance of classical patterns. Its main purpose is to describe sets with mesh\npatterns, such as the West-2-stack-sortable permutations\n\n.. code-block:: python\n\n    >>> SG = bisc(Perm.west_2_stack_sortable, 5, 7)\n    >>> show_me(SG)\n    There are 2 underlying classical patterns of length 4\n    There are 1 different shadings on 1230\n    There are 1 different shadings on 2130\n    The number of sets to monitor at the start of the clean-up phase is 1\n    There are 1 underlying classical patterns of length 5\n    There are 1 different shadings on 42130\n    <BLANKLINE>\n    Now displaying the patterns\n    <BLANKLINE>\n     | | | |\n    -+-+-â-+-\n     | | | |\n    -+-â-+-+-\n     | | | |\n    -â-+-+-+-\n     | | | |\n    -+-+-+-â-\n     | | | |\n    <BLANKLINE>\n     |â| | |\n    -+-+-â-+-\n     | | | |\n    -â-+-+-+-\n     | | | |\n    -+-â-+-+-\n     | | | |\n    -+-+-+-â-\n     | | | |\n    <BLANKLINE>\n     |â| | | |\n    -â-+-+-+-+-\n     | |â| | |\n    -+-+-+-â-+-\n     | | | | |\n    -+-â-+-+-+-\n     | | | | |\n    -+-+-â-+-+-\n     | | | | |\n    -+-+-+-+-â-\n     | | | | |\n    <BLANKLINE>\n\nThis is good news and bad news. Good because we quickly got a description of the\nset we were looking at, that would have taken a long time to find by hand. The bad news\nis that there is actually some redundancy in the output. To understand better what is\ngoing on we will start by putting the permutations under investigation in a dictionary,\nwhich keeps them separated by length.\n\n.. code-block:: python\n\n    >>> A, B = create_bisc_input(7, Perm.west_2_stack_sortable)\n\nThis creates two dictionaries with keys 1, 2, ..., 7 such that ``A[i]`` points\nto the list of permutations of length ``i`` that are West-2-stack-sortable, and\n``B[i]`` points to the complement. We can pass the A dictionary directly into\nBiSC since only the permutations satisfying the property are used to find the\npatterns. We can use the second dictionary to check whether every permutation\nin the complement contains at least one of the patterns we found.\n\n.. code-block:: python\n\n    >>> SG = bisc(A, 5, 7)\n    >>> patterns_suffice_for_bad(SG, 7, B)\n    Starting sanity check with bad perms\n    Now checking permutations of length 0\n    Now checking permutations of length 1\n    Now checking permutations of length 2\n    Now checking permutations of length 3\n    Now checking permutations of length 4\n    Now checking permutations of length 5\n    Now checking permutations of length 6\n    Now checking permutations of length 7\n    Sanity check passes for the bad perms\n    (True, [])\n\nIn this case it is true that every permutation in B, up to length 7, contains\nat least one of the patterns found. Had that not been the case a list of\npermutations would have been outputted (instead of just the empty list).\n\nNow, we claim that there is actually redundancy in the patterns we found, and\nthe length 4 mesh patterns should be enough to describe the set. This can occur\nand it can be tricky to theoretically prove that one mesh pattern is implied\nby another pattern (or a set of others, as is the case here). We use the dictionary\n``B`` again and run\n\n.. code-block:: python\n\n    >>> bases, dict_numbs_to_patts = run_clean_up(SG, B)\n    <BLANKLINE>\n    The bases found have lengths\n    [2]\n\nThere is one basis of mesh patterns found, with 2 patterns\n\n.. code-block:: python\n\n    >>> show_me_basis(bases[0], dict_numbs_to_patts)\n    <BLANKLINE>\n    Displaying the patterns in the basis\n    <BLANKLINE>\n     | | | |\n    -+-+-â-+-\n     | | | |\n    -+-â-+-+-\n     | | | |\n    -â-+-+-+-\n     | | | |\n    -+-+-+-â-\n     | | | |\n    <BLANKLINE>\n     |â| | |\n    -+-+-â-+-\n     | | | |\n    -â-+-+-+-\n     | | | |\n    -+-â-+-+-\n     | | | |\n    -+-+-+-â-\n     | | | |\n    <BLANKLINE>\n\nThis is the output we were expecting. There are several other properties of\npermutations that can be imported from ``permuta.bisc.perm_properties``, such\nas ``smooth``, ``forest-like``, ``baxter``, ``simsun``, ``quick_sortable``, etc.\n\nBoth ``bisc`` and ``auto_bisc`` can accept input in the form of a property,\nor a list of permutations (satisfying some property).\n\nLicense\n#######\n\nBSD-3: see the `LICENSE <https://github.com/PermutaTriangle/Permuta/blob/master/LICENSE>`_ file.\n\nCiting\n######\n\nIf you found this library helpful with your research and would like to cite us,\nyou can use the following `BibTeX`_ or go to `Zenodo`_ for alternative formats.\n\n.. _BibTex: https://zenodo.org/record/4725759/export/hx#.YImTibX7SUk\n\n.. _Zenodo: https://doi.org/10.5281/zenodo.4725759",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PermutaTriangle/Permuta",
    "keywords": "permutation perm mesh pattern patt avoid contain occurrencestatistic",
    "license": "BSD-3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "permuta",
    "package_url": "https://pypi.org/project/permuta/",
    "platform": "",
    "project_url": "https://pypi.org/project/permuta/",
    "project_urls": {
      "Homepage": "https://github.com/PermutaTriangle/Permuta",
      "Source": "https://github.com/PermutaTriangle/Permuta",
      "Tracker": "https://github.com/PermutaTriangle/Permuta/issues"
    },
    "release_url": "https://pypi.org/project/permuta/2.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A comprehensive high performance permutation library.",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11791008,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59783fd51751e4f246e42a69162b8b8d07bb076f795cd07d328ff25c43740806",
          "md5": "cc4177ffadc5e54a586e9dd5635b8f1b",
          "sha256": "65be04e9e306875a4b7238b0e23e8c057cbc9490d71502bca7e97b79ca2c6df4"
        },
        "downloads": -1,
        "filename": "permuta-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc4177ffadc5e54a586e9dd5635b8f1b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 159251,
        "upload_time": "2018-03-05T16:27:41",
        "upload_time_iso_8601": "2018-03-05T16:27:41.876168Z",
        "url": "https://files.pythonhosted.org/packages/59/78/3fd51751e4f246e42a69162b8b8d07bb076f795cd07d328ff25c43740806/permuta-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5c4e855dca0b57f4473dae16b177f67b351f7f998a85f9dfaad20583cc2af79",
          "md5": "cca0c78992ca5c42abcb4f6f80b6dddb",
          "sha256": "aa0fae2427b871e3822dfb3ddf7bad4ef0c462a83ee4e2568e6c2694f7c6fe52"
        },
        "downloads": -1,
        "filename": "permuta-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cca0c78992ca5c42abcb4f6f80b6dddb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62806,
        "upload_time": "2018-03-05T14:42:56",
        "upload_time_iso_8601": "2018-03-05T14:42:56.942779Z",
        "url": "https://files.pythonhosted.org/packages/f5/c4/e855dca0b57f4473dae16b177f67b351f7f998a85f9dfaad20583cc2af79/permuta-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3374acc86083e9f9dc7e0ae0b3a51aaed79813aac8930766cb00c176f61b883",
          "md5": "43eb8fdad41fc0c5a01e7cf088ba2c07",
          "sha256": "ea5d6300949ec6b62c100d35fefd07ad75fcff44ebe3775c5697fba0ea57a4fe"
        },
        "downloads": -1,
        "filename": "permuta-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43eb8fdad41fc0c5a01e7cf088ba2c07",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 159256,
        "upload_time": "2018-03-05T17:15:32",
        "upload_time_iso_8601": "2018-03-05T17:15:32.168627Z",
        "url": "https://files.pythonhosted.org/packages/b3/37/4acc86083e9f9dc7e0ae0b3a51aaed79813aac8930766cb00c176f61b883/permuta-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f286b62e4ed6ff8d25ce587f6814dfbdfd7a5d038dc2eb9cc7a392c8878b8be",
          "md5": "191bd6875eeed7a84cf8f98ff1f056ec",
          "sha256": "2a3a63adc1b3b07a2d753d4bbffd7d4b6b471fd565884e40570ac5f6ee675e01"
        },
        "downloads": -1,
        "filename": "permuta-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "191bd6875eeed7a84cf8f98ff1f056ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 63883,
        "upload_time": "2018-03-05T17:15:34",
        "upload_time_iso_8601": "2018-03-05T17:15:34.028277Z",
        "url": "https://files.pythonhosted.org/packages/0f/28/6b62e4ed6ff8d25ce587f6814dfbdfd7a5d038dc2eb9cc7a392c8878b8be/permuta-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88d75a7599800f0103b24c555eef7b07679e213fe4fef54d07e433adf85fa946",
          "md5": "9446afdbf9114d4db7b89840f0b4518c",
          "sha256": "19c48fc501a27649953827fbbbd9594d22cde408416f257fa038ffe666dfb0b5"
        },
        "downloads": -1,
        "filename": "permuta-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9446afdbf9114d4db7b89840f0b4518c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 58476,
        "upload_time": "2019-04-15T19:03:17",
        "upload_time_iso_8601": "2019-04-15T19:03:17.595159Z",
        "url": "https://files.pythonhosted.org/packages/88/d7/5a7599800f0103b24c555eef7b07679e213fe4fef54d07e433adf85fa946/permuta-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebbd7f3ed129ecbaf046b4ca3d38e0984d4f39b35fe825bd5601a44c2922378a",
          "md5": "19db5fd2b118505a8bf7a3e8d6f53308",
          "sha256": "17a225b2ec1fccf066068da6d718e168691d3ae06bde59c18d0e33ed16986c16"
        },
        "downloads": -1,
        "filename": "permuta-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "19db5fd2b118505a8bf7a3e8d6f53308",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 60871,
        "upload_time": "2019-08-26T12:21:07",
        "upload_time_iso_8601": "2019-08-26T12:21:07.698780Z",
        "url": "https://files.pythonhosted.org/packages/eb/bd/7f3ed129ecbaf046b4ca3d38e0984d4f39b35fe825bd5601a44c2922378a/permuta-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d20a5588b754accb87f6985d1dbb4fb56f2fe28bfd9fa5c6ad964900d8cc3753",
          "md5": "e68e5ef7fdf1f2a4d93bea667a4833eb",
          "sha256": "4fbbd80fbd92faa7c39288f259e3404d868069b3d8ec41b33375c854e6582216"
        },
        "downloads": -1,
        "filename": "permuta-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e68e5ef7fdf1f2a4d93bea667a4833eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 60945,
        "upload_time": "2019-09-05T18:41:03",
        "upload_time_iso_8601": "2019-09-05T18:41:03.102642Z",
        "url": "https://files.pythonhosted.org/packages/d2/0a/5588b754accb87f6985d1dbb4fb56f2fe28bfd9fa5c6ad964900d8cc3753/permuta-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a14b25b1bfce43e962a0a987a4ffde8e1c4703ff74112da99186984c937aa8f4",
          "md5": "433054fd17ec9ab78603f943f4a68896",
          "sha256": "87d9296f4188d6c411c60d8ca76c00bc3fb6cb6ac24f5c5d9305e32009ae9bdf"
        },
        "downloads": -1,
        "filename": "permuta-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "433054fd17ec9ab78603f943f4a68896",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 61158,
        "upload_time": "2019-09-10T11:26:12",
        "upload_time_iso_8601": "2019-09-10T11:26:12.178608Z",
        "url": "https://files.pythonhosted.org/packages/a1/4b/25b1bfce43e962a0a987a4ffde8e1c4703ff74112da99186984c937aa8f4/permuta-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8539cc0096d67ba834a854f4da03b2bb498781b5a0296954b69f821078d7698",
          "md5": "29d63fb06b84ece7fca849c14e28b58b",
          "sha256": "9df51f9646b276b67aadf6be2708ea92ae297793b3ac051a83e2054c2b3e7ded"
        },
        "downloads": -1,
        "filename": "permuta-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "29d63fb06b84ece7fca849c14e28b58b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 63961,
        "upload_time": "2020-01-20T10:30:47",
        "upload_time_iso_8601": "2020-01-20T10:30:47.339902Z",
        "url": "https://files.pythonhosted.org/packages/e8/53/9cc0096d67ba834a854f4da03b2bb498781b5a0296954b69f821078d7698/permuta-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d22fc068e711113e90dd3b1c0fdc022aab0225a4e0a94ed9c6ed51be162cbd47",
          "md5": "1541c4e4c072d3042e0e54b6fb948e5a",
          "sha256": "600d7d38de3a5e080e7fafed6423897ded035b8a57d83e16fc9ca06d6ffe9500"
        },
        "downloads": -1,
        "filename": "permuta-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1541c4e4c072d3042e0e54b6fb948e5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 80685,
        "upload_time": "2020-05-12T16:21:06",
        "upload_time_iso_8601": "2020-05-12T16:21:06.229151Z",
        "url": "https://files.pythonhosted.org/packages/d2/2f/c068e711113e90dd3b1c0fdc022aab0225a4e0a94ed9c6ed51be162cbd47/permuta-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45a6f2088334a4a366fed9f80c65973ef626360b1d3453c3397820998391d4e6",
          "md5": "6208f7f46709d0dbd3ed5c9af5eae196",
          "sha256": "4db94eb77b003b8c649e532ba12ce644e2544b7efeff9bbb1204b2aedc788250"
        },
        "downloads": -1,
        "filename": "permuta-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6208f7f46709d0dbd3ed5c9af5eae196",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 82583,
        "upload_time": "2020-06-12T16:14:43",
        "upload_time_iso_8601": "2020-06-12T16:14:43.351104Z",
        "url": "https://files.pythonhosted.org/packages/45/a6/f2088334a4a366fed9f80c65973ef626360b1d3453c3397820998391d4e6/permuta-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e8bb0804c03882f82d2b5f355d53f8bf90e5ce8dbf9b1b77178cdf9294bdb40",
          "md5": "bdeba02e62754c5c3a41d327d0066133",
          "sha256": "6271cc31b4b6deedf0b7fddee4b45ccd76d70c2140cb33305171a9376b7c8aa6"
        },
        "downloads": -1,
        "filename": "permuta-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bdeba02e62754c5c3a41d327d0066133",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 84284,
        "upload_time": "2020-06-17T10:30:34",
        "upload_time_iso_8601": "2020-06-17T10:30:34.141842Z",
        "url": "https://files.pythonhosted.org/packages/9e/8b/b0804c03882f82d2b5f355d53f8bf90e5ce8dbf9b1b77178cdf9294bdb40/permuta-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0eab6b8ab11dfed30ee9fe685364ecbd9f013c446fb29ba05b374e3b62ddbfa",
          "md5": "b20e0059513a0538a640d722575dac52",
          "sha256": "e57a7782ff411c52a74ef4f0750fcd202c846ff9101fcf248d0885e4387d583e"
        },
        "downloads": -1,
        "filename": "permuta-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b20e0059513a0538a640d722575dac52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 85410,
        "upload_time": "2020-06-23T09:52:08",
        "upload_time_iso_8601": "2020-06-23T09:52:08.766025Z",
        "url": "https://files.pythonhosted.org/packages/e0/ea/b6b8ab11dfed30ee9fe685364ecbd9f013c446fb29ba05b374e3b62ddbfa/permuta-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f6645ed19260a7faf454259064c8ad4f2d98235c5e94a6d4b95fbb66c8a3e34",
          "md5": "abc24fb9f3687fb4cbbd420ce6a2d849",
          "sha256": "6a194dfd224ab2b288c3345477529f42a8bdd0c76020c9c78df35c3fb274bbd2"
        },
        "downloads": -1,
        "filename": "permuta-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "abc24fb9f3687fb4cbbd420ce6a2d849",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4466947,
        "upload_time": "2020-07-20T14:15:10",
        "upload_time_iso_8601": "2020-07-20T14:15:10.922782Z",
        "url": "https://files.pythonhosted.org/packages/1f/66/45ed19260a7faf454259064c8ad4f2d98235c5e94a6d4b95fbb66c8a3e34/permuta-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33b150de21f1cfee8157c821e3d109069d722d3e3eb9fa9293357dde812c0e05",
          "md5": "14d9374c868b44cd2095fbb645709575",
          "sha256": "6bbac981828eed8be3bccb7cffd5c02fc18ce351003f2650dd7de9c044d923f9"
        },
        "downloads": -1,
        "filename": "permuta-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "14d9374c868b44cd2095fbb645709575",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4467145,
        "upload_time": "2020-07-23T11:27:19",
        "upload_time_iso_8601": "2020-07-23T11:27:19.042872Z",
        "url": "https://files.pythonhosted.org/packages/33/b1/50de21f1cfee8157c821e3d109069d722d3e3eb9fa9293357dde812c0e05/permuta-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d67422bc3ca54b2f4325b26586f0f2e06bd722453f1df182ad67d05bf3069cd4",
          "md5": "fef1be761c92534aae67c062038fe5fa",
          "sha256": "68ad57f6b2b52eb461d122698712aafd5722b12dc917139a7eea37cda868f175"
        },
        "downloads": -1,
        "filename": "permuta-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fef1be761c92534aae67c062038fe5fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4467170,
        "upload_time": "2020-08-06T15:56:17",
        "upload_time_iso_8601": "2020-08-06T15:56:17.700116Z",
        "url": "https://files.pythonhosted.org/packages/d6/74/22bc3ca54b2f4325b26586f0f2e06bd722453f1df182ad67d05bf3069cd4/permuta-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "536eed20a0ee80d1817acdec45d40206ab6e5e3f8413bc677fc0a6767c041a59",
          "md5": "5572d53a50cb543af2a38c35e235e575",
          "sha256": "ffbb215dfbc614630c5371ee055fcad2a0188e62cd1b2b6013d2425718edc3ea"
        },
        "downloads": -1,
        "filename": "permuta-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5572d53a50cb543af2a38c35e235e575",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4447187,
        "upload_time": "2021-04-28T16:26:24",
        "upload_time_iso_8601": "2021-04-28T16:26:24.742788Z",
        "url": "https://files.pythonhosted.org/packages/53/6e/ed20a0ee80d1817acdec45d40206ab6e5e3f8413bc677fc0a6767c041a59/permuta-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eed7e6700669333466fcbca5763f2052e143de87d7e8262d16cfa5e8885e2665",
          "md5": "983927cde3ff92fc69b87de84101bd4d",
          "sha256": "0840bcfba0c80181e7108e8faab7296ced1f0c423f439b8e61eb59a07f319d2e"
        },
        "downloads": -1,
        "filename": "permuta-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "983927cde3ff92fc69b87de84101bd4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4447205,
        "upload_time": "2021-04-28T16:43:26",
        "upload_time_iso_8601": "2021-04-28T16:43:26.403590Z",
        "url": "https://files.pythonhosted.org/packages/ee/d7/e6700669333466fcbca5763f2052e143de87d7e8262d16cfa5e8885e2665/permuta-2.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e6d2cb6310480292efd305419c8bb608ed5a07dd1283f56218866403b304944",
          "md5": "802fbd65c60c2097c1ffaa5c85f20828",
          "sha256": "c5c33a0d2f97cc8636ef25c2967568f47ffebfa5651fb53ec467a0c6257f6bd9"
        },
        "downloads": -1,
        "filename": "permuta-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "802fbd65c60c2097c1ffaa5c85f20828",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4451331,
        "upload_time": "2021-06-14T13:46:48",
        "upload_time_iso_8601": "2021-06-14T13:46:48.380241Z",
        "url": "https://files.pythonhosted.org/packages/1e/6d/2cb6310480292efd305419c8bb608ed5a07dd1283f56218866403b304944/permuta-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "806af4e241c4aaf7d13cbc4d14c40f9f976104742fe3b262cd5b6fcee3c0c7b0",
          "md5": "531c14a193fba5e4f8f87694c13f9d0a",
          "sha256": "a538c95f7037975abcf74a38a082243ecf7a1a1868078a31f311e2a3c3db0431"
        },
        "downloads": -1,
        "filename": "permuta-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "531c14a193fba5e4f8f87694c13f9d0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4457366,
        "upload_time": "2021-10-21T11:13:24",
        "upload_time_iso_8601": "2021-10-21T11:13:24.137186Z",
        "url": "https://files.pythonhosted.org/packages/80/6a/f4e241c4aaf7d13cbc4d14c40f9f976104742fe3b262cd5b6fcee3c0c7b0/permuta-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "806af4e241c4aaf7d13cbc4d14c40f9f976104742fe3b262cd5b6fcee3c0c7b0",
        "md5": "531c14a193fba5e4f8f87694c13f9d0a",
        "sha256": "a538c95f7037975abcf74a38a082243ecf7a1a1868078a31f311e2a3c3db0431"
      },
      "downloads": -1,
      "filename": "permuta-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "531c14a193fba5e4f8f87694c13f9d0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 4457366,
      "upload_time": "2021-10-21T11:13:24",
      "upload_time_iso_8601": "2021-10-21T11:13:24.137186Z",
      "url": "https://files.pythonhosted.org/packages/80/6a/f4e241c4aaf7d13cbc4d14c40f9f976104742fe3b262cd5b6fcee3c0c7b0/permuta-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}