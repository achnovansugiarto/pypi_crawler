{
  "info": {
    "author": "Oskar Jarczyk",
    "author_email": "oskar.jarczyk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Thresher - THRESHold EvaluatoR for Python\n\nA bare pandas implementation of a tool for finding the threshold which maximizes accuracy \nof `predict_proba` like-outputs (from e.g. `scikit-learn`), in regard to the provided ground truth (labels).\n\n_Note: you can jump directly to the sample usage [here](https://github.com/oskar-j/thresher#sample-usage)._\n\n## Project description\n\nMethod interesting for the user is `optimize_threshold(scores, actual_classes)`, which is available \nfrom the `Thresher` class. This method, for given _scores_ and _actual classes_, \nreturns a threshold that yields the _**highest fraction** of correctly classified_ samples.\n\n```\noptimize_threshold parameters:\n  scores​:list\n    The list of scores.\n  actual_classes​:list\n    The list of ground truth (correct) classes. \n    Classes are represented as -1 and 1.\nreturns:\n  threshold:​float\n    The threshold value that yields ​the highest fraction of correctly classified \n    samples​. If multiple thresholds give the optimal fraction, return any threshold.\n```\n\n### An oracle mechanism\n\nWe implemented a meta-optimizer - an 'oracle' mechanism, which chooses a proper algorithm in regard to the provided data. This is the default behaviour, and can be controlled by changing the `algorithm` param of the `Thresher` constructor. See the source code of [oracle.py](https://github.com/oskar-j/thresher/blob/main/thresher/oracle.py) and [interface.py](https://github.com/oskar-j/thresher/blob/main/thresher/interface.py) for more details.\n\n### Implemented algorithms\n\n### Linear search\n\nThis is the most basic, iterative approach. Recommended for smaller datasets. For every _threshold_ present in the input (in the _scores_ list), we evaluate it by calculating the exact accuracy of _split_ produced by such threshold. Then, return the threshold which produce the most accurate split. \n\nList of parameters to customize:\n* `n_jobs` (default: 1) - set to `-1` for using all available processors except one; any value of `2` or more \nenables multiprocessing, while the default value of `1` disables multiprocessing\n\n### 2-dim Stochastic Gradient Descent\n\ntbd\n\nList of parameters to customize:\n* `num_of_iters` (default: 200) - number of iterations during which algorithm tries to converge\n* `stop_thresh` (default: 0.001) - minimal value of improvement, below which algorithm stops\n* `alpha` (default: 0.01)\n\n### Evolutionary algorithm\n\nThis is a simulation approach which uses an evolutionary algorithm. It works by simulating multiple generations of a \"population\" of candidate solutions. During every iteration of a single generation, algorithm stochasticly evaluates the candidate solution. After the end of a single generation, we remove the from the population least fit agents (solutions), and do the _crossover_ between the left solitions to produce new \"offspring\" candidate solutions. Moreover, they may mutate to provide additional random chance. \n\nList of parameters to customize:\n* `population_size` (default: 30) - number of agents in the simulation\n* `number_of_generations` (default: 20) - number of generations\n* `number_of_iterations` (default: 10) - number of iterations per a generation\n* `sus_factor` (default: 2) - how many least-fit agents should be childless at the end of generation\n* `stoch_ratio` (default: 0.02) - percentage of data to evaluate fit of a single agent per iteration\n* `optimized_start` (default: True)\n* `mutation_chance` (default: 0.05)\n* `mutation_factor` (default: 0.10)\n\n### Grid search\n\nAdded in version `0.1.2`. This algorithm works by generate a grid of possible solutions, with a granularity set\nby parameter named `no_of_decimal_places`. All candidate solutions are evaluated thoroughly \nand the best one is chosen at the end.\n\nList of parameters to customize:\n* `no_of_decimal_places` (default: 2) - generate the grid by rounding the number to the given number of decimal places\n\n### Stochastic Grid search\n\nAdded in version `0.1.2`. This algorithm works similarly like the above-mentioned 'Grid search' method, with the difference, that\nevery single point generated by the grid is evaluated only partially (which can be controlled by the `stoch_ratio` parameter)\n\nList of parameters to customize:\n* `no_of_decimal_places` (default: 2) - generate the grid by rounding the number to the given number of decimal places\n* `stoch_ratio` (default: 0.05) - percentage of data to evaluate fit of a candidate number in the grid\n* `reshuffle` (default: False) - set whether the random projection should be calculated every step, or not\n\n## How to setup?\n\nThe process is rather straightforward, you just need to just whether to install \nfrom the sources (latest revision), or from the PyPI repository (stable release).\n\n### Requirements\n\nTested with Python `3.7+`, on a standard Unix environment\n\n### Installation\n\nInstallation from source:\n\n```\npip install git+https://github.com/oskar-j/thresher.git\n```\n\nStable release using the `pip` tool:\n\n```\npip install thresher-py\n```\n\n## Custom parameters\n\nIt's possible to provide additional parameters in the `Thresher` constructor. \n\n```python\nThresher(algorithm='auto',\n         allow_parallel=True,\n         verbose=False, \n         progress_bar=False,\n         labels=(0,1))\n```\n\nHere is a description of what does every particular parameter do:\n\n* **algorithm** (default value: `'auto'`) - allows to manually choose the algorithm from the list of available algorithms.\nSame effect can be achieved with running the method called `set_algorithm(algorithm_name)` on the `Thresher` instance. \nThe default value is 'auto', which means that the tool uses an oracle mechanism to manually choose a proper algorithm.\n* **allow_parallel** (default value: `True`) - enables/disabled multiprocessing for algorithms\n* **verbose** (default value: `False`) - enables verbosity\n* **progress_bar** (default value: `False`) - shows a progress bar in the terminal (if supported by the algorithm)\n* **labels** - necessary if your labels are different from `(-1, 1)` - first item from the tuple/list is a negative label, \nand the second item is a positive label\n\n### Control parameters for the algorithms\n\nSome of the above-mentioned algorithms allow to change their parameters. \nThey should be provided in a dictionary, inside the `algorithm_params` parameter. \nIf no such customs parameters are provided, default values apply.\n\nExamples:\n\n```python\nt = thresher.Thresher(algorithm_params={'n_jobs': 3})\n```\n\n```python\nt = thresher.Thresher(algorithm_params={'no_of_decimal_places': 3,\n                                        'stoch_ratio': 0.10})\n```\n\n## Sample usage\n\n```python\nimport thresher\n\nt = thresher.Thresher()\n\nprint('Currently supported algorithms:')\nprint(t.get_supported_algorithms())\n\ncases = [0.1, 0.3, 0.4, 0.7]\nactual_labels = [-1, -1, 1, 1]\n\nprint(f'Optimization result: {t.optimize_threshold(cases, actual_labels)}')\n```\n\nSee the [examples](https://github.com/oskar-j/thresher/tree/main/examples) directory for more sample code.\n\n## Performance tests\n\nA very basic performance test (with 10 repeats, on a real-world [anonymized data](https://github.com/oskar-j/thresher/blob/main/examples/performance_test/milion_samples.7z) consisting of `10^6` rows) can be found in the Notebook [located here](https://github.com/oskar-j/thresher/blob/main/examples/performance_test/TresherPerformanceTest.ipynb).\n\n## Future work\n\n* adding more algorithms,\n* publishing on conda,\n* more heavy test loads,\n* python docs,\n* CI/CD pipeline for automated tests.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/oskar-j/thresher/archive/v_01_2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oskar-j/thresher",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Oskar Jarczyk",
    "maintainer_email": "oskar.jarczyk@gmail.com",
    "name": "thresher-py",
    "package_url": "https://pypi.org/project/thresher-py/",
    "platform": "",
    "project_url": "https://pypi.org/project/thresher-py/",
    "project_urls": {
      "Download": "https://github.com/oskar-j/thresher/archive/v_01_2.tar.gz",
      "Homepage": "https://github.com/oskar-j/thresher"
    },
    "release_url": "https://pypi.org/project/thresher-py/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Find threshold for fine-tuning output from predict_proba",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8413292,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15156c475348179210ad402c7e6dec19b4c0fadd2827d7095b405693f9104da5",
          "md5": "a5a4f0615cd5cbfc3a5e578cc6f157f4",
          "sha256": "c0bf0fab824b89603d49a2981ac5e05f1e0f1d6e9f86cf55c7526c7dc95a5e90"
        },
        "downloads": -1,
        "filename": "thresher-py-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5a4f0615cd5cbfc3a5e578cc6f157f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6866,
        "upload_time": "2020-10-11T09:25:14",
        "upload_time_iso_8601": "2020-10-11T09:25:14.527951Z",
        "url": "https://files.pythonhosted.org/packages/15/15/6c475348179210ad402c7e6dec19b4c0fadd2827d7095b405693f9104da5/thresher-py-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "200d722221c4e9c39f6c6858c1ec7b88df126f4218763c23f111d2b47c0818f8",
          "md5": "64d9fe35914c57e1765c88b004896e61",
          "sha256": "24445414cf9b4b3e33d1fee60f4d08906019483a6d11fcf6005f727b78f84ae1"
        },
        "downloads": -1,
        "filename": "thresher-py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "64d9fe35914c57e1765c88b004896e61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7945,
        "upload_time": "2020-10-12T06:13:50",
        "upload_time_iso_8601": "2020-10-12T06:13:50.241228Z",
        "url": "https://files.pythonhosted.org/packages/20/0d/722221c4e9c39f6c6858c1ec7b88df126f4218763c23f111d2b47c0818f8/thresher-py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e18fcfed3c74dd9d290d1aece9364bc2ff0c34996db717a2ed526cb15c7ffb95",
          "md5": "b6291da65b7c6dbe5f48100c13c7ba2b",
          "sha256": "6e5442516e298377ba1ddb66c7172a43b926535ad18ba4fc63d6b1a9dadcf460"
        },
        "downloads": -1,
        "filename": "thresher-py-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b6291da65b7c6dbe5f48100c13c7ba2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13850,
        "upload_time": "2020-10-14T20:52:46",
        "upload_time_iso_8601": "2020-10-14T20:52:46.702605Z",
        "url": "https://files.pythonhosted.org/packages/e1/8f/cfed3c74dd9d290d1aece9364bc2ff0c34996db717a2ed526cb15c7ffb95/thresher-py-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e18fcfed3c74dd9d290d1aece9364bc2ff0c34996db717a2ed526cb15c7ffb95",
        "md5": "b6291da65b7c6dbe5f48100c13c7ba2b",
        "sha256": "6e5442516e298377ba1ddb66c7172a43b926535ad18ba4fc63d6b1a9dadcf460"
      },
      "downloads": -1,
      "filename": "thresher-py-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b6291da65b7c6dbe5f48100c13c7ba2b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13850,
      "upload_time": "2020-10-14T20:52:46",
      "upload_time_iso_8601": "2020-10-14T20:52:46.702605Z",
      "url": "https://files.pythonhosted.org/packages/e1/8f/cfed3c74dd9d290d1aece9364bc2ff0c34996db717a2ed526cb15c7ffb95/thresher-py-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}