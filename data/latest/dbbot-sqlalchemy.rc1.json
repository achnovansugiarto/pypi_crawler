{
  "info": {
    "author": "Robot Framework Developers, Pawel Bylicki",
    "author_email": "robotframework@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Testing"
    ],
    "description": "DbBot-SQLAlchemy\n=====\n\nDbBot is a Python script to serialize `Robot Framework`_  output files into\na SQLite database. This way the future `Robot Framework`_ related tools and\nplugins will have a unified storage for the test run results.\n\nDbBot-SQLAlchemy is a fork of DbBot project that is using SQLAlchemy in order\nto store test run results in any of the major supported database systems.\n\nThe goal is to support the following databases:\n-  PostgreSQL\n-  MySQL\n-  Oracle\n-  MS SQL\n-  SQLite\n\nRequirements\n------------\nDbBot-SQLAlchemy is tested on\n\n-  `Python`__ 3.5+\n-  `Robot Framework`_ 3.0+\n-  `SQLAlchemy`_ 1.2+\n\nIt may (though it is not guaranteed) work with older versions of dependencies.\n\nHow it works\n------------\n\nThe script takes one or more `output.xml` files as input, initializes the\ndatabase schema, and stores the respective results into a SQLite database\n(`robot\\_results.db` by default, can be changed by specifying SQLAlchemy\n database URL with options `-b` or `--database`).\nIf database schema is already existing, it will insert the new\nresults into that database.\n\nInstallation\n------------\n\nThis tool is installed with pip with command:\n\n::\n\n    $ pip install dbbot-sqlalchemy\n\nAlternatively you can download the `source distribution`__, extract it and\ninstall using:\n\n::\n\n    $ python setup.py install\n\nWhat is stored\n--------------\n\nBoth the test data (names, content) and test statistics (how many did pass or\nfail, possible errors occurred, how long it took to run, etc.) related to\nsuites and test cases are stored by default. However, keywords and related\ndata are not stored as it might take order of magnitude longer for massive\ntest runs. You can choose to store keywords and related data by using `-k` or\n`--also-keywords` flag.\n\nUsage examples\n--------------\n\nTypical usage with a single output.xml file:\n\n::\n\n    python -m dbbot.run atests/testdata/one_suite/test_output.xml\n\nIf the database does not already exist, it's created. Otherwise the test\nresults are just inserted into the existing database. Only new results are\ninserted.\n\nThe default database is SQLite database named `robot_results.db`.\n\nAdditional options are:\n\n+-------------------+---------------------------+--------------------------+\n| Short format      | Long format               | Description              |\n+===================+===========================+==========================+\n| `-k`              | `--also-keywords`         | Parse also suites' and   |\n|                   |                           | tests' keywords          |\n+-------------------+---------------------------+--------------------------+\n| `-v`              | `--verbose`               | Print output to the      |\n|                   |                           | console.                 |\n+-------------------+---------------------------+--------------------------+\n| `-b DB_URL`       | `--database=DB_URL`       | SQLAlchemy database URL  |\n|                   |                           | for test run results     |\n+-------------------+---------------------------+--------------------------+\n| `-d`              | `--dry-run`               | Do everything except     |\n|                   |                           | store the results.       |\n+-------------------+---------------------------+--------------------------+\n\n\nSpecifying custom database name:\n\n::\n\n    $ python -m dbbot.run  -b sqlite:///my_own_database.db atests/testdata/one_suite/test_output.xml\n    $ python -m dbbot.run  -b postgresql://postgres:postgres@localhost:5432/postgres atests/testdata/one_suite/test_output.xml\n\nParsing test run results with keywords and related data included:\n\n::\n\n    python -m dbbot.run -k atests/testdata/one_suite/test_output.xml\n\nGiving multiple test run result files at the same time:\n\n::\n\n    python -m dbbot.run atests/testdata/one_suite/test_output.xml atests/testdata/one_suite/output_latter.xml\n\nDatabase\n--------\n\nYou can inspect the created database using the `sqlite3`_ command-line tool:\n\n.. code:: sqlite3\n\n    $ sqlite3 robot_results.db\n\n    sqlite> .tables\n    arguments        suite_status     test_run_errors  tests\n    keyword_status   suites           test_run_status\n    keywords         tag_status       test_runs\n    messages         tags             test_status\n\n    sqlite> SELECT count(), tests.id, tests.name\n            FROM tests, test_status\n            WHERE tests.id == test_status.test_id AND\n            test_status.status == \"FAIL\"\n            GROUP BY tests.name;\n\nPlease note that when database is initialized, no indices are created by\nDbBot. This is to avoid slowing down the inserts. You might want to add\nindices to the database by hand to speed up certain queries in your own\nscripts.\n\nFor information about the database schema, see `doc/robot_database.md`__.\n\nUse case example: Most failing tests\n------------------------------------\n\nOne of the common use cases for DbBot is to get a report of the most commonly\nfailing suites, tests and keywords. There's an example for this purpose in\n`examples/FailBot/bin/failbot`.\n\nFailbot is a Python script used to produce a summary web page of the failing\nsuites, tests and keywords, using the information stored in the DbBot\ndatabase. Please adjust (the barebone) HTML templates in\n`examples/FailBot/templates` to your needs.\n\nWriting your own scripts\n------------------------\n\nPlease take a look at the modules in `examples/FailBot/failbot` as an example\non how to build on top of the classes provided by DbBot to satisfy your own\nscripting needs.\n\nLicense\n-------\n\nDbBot is released under the `Apache License, Version 2.0`__.\n\nSee LICENSE.TXT for details.\n\n__ https://www.python.org/\n__ https://pypi.python.org/pypi/dbbot-sqlalchemy\n__ https://github.com/pbylicki/DbBot-SQLAlchemy/blob/master/doc/robot_database.md\n__ http://www.tldrlegal.com/license/apache-license-2.0\n.. _`Robot Framework`: http://www.robotframework.org\n.. _`pip`: http://www.pip-installer.org\n.. _`sqlite3`: https://www.sqlite.org/sqlite.html\n.. _`SQLAlchemy`: http://www.sqlalchemy.org",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/dbbot-sqlalchemy",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pbylicki/DbBot-SQLAlchemy",
    "keywords": "robotframework testing testautomation atdd",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbbot-sqlalchemy",
    "package_url": "https://pypi.org/project/dbbot-sqlalchemy/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dbbot-sqlalchemy/",
    "project_urls": {
      "Download": "https://pypi.python.org/pypi/dbbot-sqlalchemy",
      "Homepage": "https://github.com/pbylicki/DbBot-SQLAlchemy"
    },
    "release_url": "https://pypi.org/project/dbbot-sqlalchemy/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A tool for inserting Robot Framework test run results into SQL database using SQLAlchemy.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3804500,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8c83be1ee87f2d263c55ef255d2847ed15e3b4c8ebc5c2d9667969ae26a4faa",
          "md5": "bee95e74ccf32d07050753446bf50b23",
          "sha256": "b8a0f6584311e1f89f83e79d3054f67e45974dcb26e30a36daf54c8b423e7b4b"
        },
        "downloads": -1,
        "filename": "dbbot-sqlalchemy-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bee95e74ccf32d07050753446bf50b23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8311,
        "upload_time": "2018-04-24T20:37:06",
        "upload_time_iso_8601": "2018-04-24T20:37:06.015087Z",
        "url": "https://files.pythonhosted.org/packages/c8/c8/3be1ee87f2d263c55ef255d2847ed15e3b4c8ebc5c2d9667969ae26a4faa/dbbot-sqlalchemy-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8c83be1ee87f2d263c55ef255d2847ed15e3b4c8ebc5c2d9667969ae26a4faa",
        "md5": "bee95e74ccf32d07050753446bf50b23",
        "sha256": "b8a0f6584311e1f89f83e79d3054f67e45974dcb26e30a36daf54c8b423e7b4b"
      },
      "downloads": -1,
      "filename": "dbbot-sqlalchemy-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "bee95e74ccf32d07050753446bf50b23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8311,
      "upload_time": "2018-04-24T20:37:06",
      "upload_time_iso_8601": "2018-04-24T20:37:06.015087Z",
      "url": "https://files.pythonhosted.org/packages/c8/c8/3be1ee87f2d263c55ef255d2847ed15e3b4c8ebc5c2d9667969ae26a4faa/dbbot-sqlalchemy-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}