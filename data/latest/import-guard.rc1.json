{
  "info": {
    "author": "Anexen",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# import-guard\n\nEnforce that some modules can't be imported from other modules. In runtime!\n\n> If you need a static analysis tools, take a look at [flake8-import-graph](https://pypi.org/project/flake8-import-graph/).\n\nFeatures:\n\n- works in runtime\n- checks dynamic imports\n- customizable rules\n\n> This library has some performance overhead.\n> In some cases it may lead to 1.5-2x slower import time (and startup time respectively).\n> It's recommended to enable import_guard only during the development.\n\n# Installation\n\n```bash\npip install import-guard\n```\n\n# Usage\n\n```python\nfrom import_guard import guard, mod\n\n\nguard.set_deny_rules({\n    # deny `csv` import from `test_proj` and submodules\n    \"test_proj\": \"csv\",  # the same as mod(\"csv\")\n    # deny `selenium` and top_level `test_proj.tasks` imports from test_proj.api\n    # but allow `test_proj.tasks` import inside the function (lazy import)\n    # the same as mod(\"selenium\") | (mod(\"test_proj.tasks\") & Flags.TopLevel)\n    \"test_proj.api\": [\"selenium\", mod.top_level(\"test_proj.tasks\")],\n    # deny `test_proj.api` and `test_proj.business_logic` imports from `test_proj.core`\n    \"test_proj.core\": mod.matches(r\"test_proj\\.(api|business_logic)\"),\n    # deny all imports except `logging` and `yaml`\n    \"test_proj.logging\": ~mod.explicit([\"logging\", \"yaml\"]),\n})\n\n# raise ForbiddenImportError\nguard.enable(strict=True)\n```\n\n# Rules\n\n> the code below is copy-pastable into the Python interpreter\n> and assumes the following imports:\n\n```python\nfrom importlib import reload\nfrom import_guard import guard, mod\n# enable guard in advance\nguard.enable()\n```\n\n#### Exact match\n\n```python\nguard.set_deny_rules({\"<stdin>\": \"decimal\"})\n# shortcut for mod(\"decimal\")\n\nfrom decimal import Decimal  # shows warning\n\nfrom enum import Enum  # ok\n```\n\n#### Explicit match\n\nConsider the following code:\n\n```python\nguard.set_deny_rules({\"<stdin>\": \"re\"})\n\nimport csv  # shows warning!\n```\n\nWhat happened?\n\n`csv` imports some modules under the hood, e.g. `re` or `io`.\nWe implicitly initiated loading of the `re` module through the `csv` module (rule matches at depth = 1).\nThis is the default behavior. You can check only explicit imports using `mod.explicit(\"re\")` function.\n\n```python\nguard.set_deny_rules({\"<stdin>\": mod.explicit(\"re\")})\nreload(csv)  # allowed\nimport re  # shows warning\n```\n\n#### Match multiple modules\n\n```python\nguard.set_deny_rules({\"<stdin>\": [\"logging\", \"json\"]})\n# the same as mod.any([\"logging\", \"json'])\n# the same as mod(\"logging\") | mod(\"json\")\n\n\nimport json  # shows warning\nfrom logging import getLogger  # shows warning\n```\n\n#### Match by regular expression\n\n```python\nguard.set_deny_rules({\"<stdin>\": mod.matches(\"log.*\")})\n\n# shows multiple warnings\nfrom logging.config import dictConfig\n```\n\n#### Inversion\n\n```python\nguard.set_deny_rules({\"<stdin>\": ~mod.matches(\"log.*\")})\n\nimport io # shows warning\n```\n\n#### Match only module-level imports\n\nIt's common practice doing a local import instead of a global one to break a\ncycle import or to postpone importing until you run code that actually needs\nthe module you're importing.\n\n```python\n# deny module-level imports\nguard.set_deny_rules({\"<stdin>\": mod.top_level(\"array\")})\n\ndef some_function():\n    import array  # allowed (lazy import)\n\nsome_function()\nimport array  # shows warning\n```\n\n#### Match star import\n\n```python\nguard.set_deny_rules({\"<stdin>\": mod.star(\"csv\")})\n\nfrom csv import *  # shows warning\n```\n\n#### Complex rules\n\nRules are very flexible. You can combine them together in a different ways\nand build very complex conditions.\n\n```python\nmod.explicit(\n    ~mod.top_level([\"math\", \"json\"])\n    | mod.matches(\"log.*\")\n)\n```\n\nNice examples:\n\n- deny non-lazy imports in some module:\n\n```python\nguard.set_deny_rules({\n    \"test_proj.business_logic\": mod.top_level(mod.matches(\".*\")),\n})\n```\n\n- deny start imports in project:\n\n```python\nguard.set_deny_rules({\n    \"test_proj\": mod.star(mod.explicit(mod.matches(\".*\"))),\n})\n```\n\n#### Non-strict mode\n\n```python\n# not enabled for `prod`\nif env == \"staging\":\n    # warn on forbidden import\n    guard.enable(strict=False)\nelif env == \"local\":\n    # raise ForbiddenImportError\n    guard.enable(strict=True)\n```\n\n#### Rules hierarchy\n\nThe set of deny rule for a module also affects its submodules.\n\n```python\nguard.set_deny_rules({\n    \"test_proj\": \"json\",\n    \"test_proj.api\": [\"selenum\", \"pandas\"],\n    \"test_proj.core\": \"celery\"\n})\n```\n\n`test_proj.core` disallows `json` and `celery` imports.\n`test_proj.api.views` disallows `json`, `selenium`, `pandas` imports.\n\n#### Lazy module\n\nConsider the following project structure:\n\n```python\n# main.py\nimport api\n\n# api.py\ndef view():\n    import tasks\n\n# tasks.py\nimport pandas\n```\n\nHere `main.py` imports `api`, which imports `tasks` lazily, which imports `pandas` at module level.\n`import_guard` handles this case as lazy module import and will think that pandas being imported lazily.\nThus, in this case, the following rules do not raise a warning:\n\n```python\nguard.set_deny_rules({\"tasks\": mod.top_level(\"pandas\")})\n```\n\n#### Custom module matcher\n\n```python\ndef is_relative_import(import_info, caller_info):\n    return import_info.level > 1\n\n# deny relative import\nguard.set_deny_rules({\"proj\": mod.hook(is_relative_import)})\n\nfrom .api import view  # shows warning\nfrom proj.api import view  # ok\n```\n\n# Testing\n\n### Rules\n\nTesting rules directly:\n\n```python\nrule = mod.top_level(mod.matches(\".*\"))\n# True; mod1 imported at the module level in mod2\nrule.test(\"mod1\", caller=\"mod2\")\n# False; mod1 doesn't match the top_level constraint\nrule.test(\"mod1\", caller=\"<stdin>\", top_level=False)\n```\n\nTesting deny rules through the guard:\n\n```python\nguard.is_import_allowed(\"csv\", caller=\"test_proj.api\")  # False\nguard.is_import_allowed(\"logging\", caller=\"test_proj.api\")  # True\nguard.is_import_allowed(\"selenium\", caller=\"test_proj.api\")  # False\nguard.is_import_allowed(\n    \"test_proj.tasks\", caller=\"test_proj.api\"\n)  # False\nguard.is_import_allowed(\n    \"test_proj.tasks\", caller=\"test_proj.api\", top_level=False\n)  # True\n```\n\n### Unit tests\n\nTesting with current Python interpreter:\n\n```bash\n$ python -m unittest discover tests -v\n```\n\nTesting with different Python versions and interpreters:\n\n```bash\n$ tox\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Anexen/import-guard",
    "keywords": "import,deny,guard,impguard",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "import-guard",
    "package_url": "https://pypi.org/project/import-guard/",
    "platform": "",
    "project_url": "https://pypi.org/project/import-guard/",
    "project_urls": {
      "Homepage": "https://github.com/Anexen/import-guard"
    },
    "release_url": "https://pypi.org/project/import-guard/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4",
    "summary": "Enforce that some modules can't be imported from other modules.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10725662,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2eb24991ddb748f80f112deed86873be92db32d16092d24e88c47d60fa6d67ba",
          "md5": "9cbb1896704f70db7c500f2954f9d654",
          "sha256": "c24fe73152120435d29464403d80d0cd77315b4565e07573c5cd941f91c91dda"
        },
        "downloads": -1,
        "filename": "import_guard-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cbb1896704f70db7c500f2954f9d654",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4",
        "size": 9821,
        "upload_time": "2021-06-23T21:34:26",
        "upload_time_iso_8601": "2021-06-23T21:34:26.978965Z",
        "url": "https://files.pythonhosted.org/packages/2e/b2/4991ddb748f80f112deed86873be92db32d16092d24e88c47d60fa6d67ba/import_guard-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb473c0062f39a9cdb37e53e6e3abee7b71caf6596218abb28101fb2f11102d1",
          "md5": "8dc90df44db22a7775b47e99bbe9186a",
          "sha256": "5450dad0b72254c67e0a3cf3fd1cd18837cec297f8a6d60a33705c70a1b44227"
        },
        "downloads": -1,
        "filename": "import-guard-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8dc90df44db22a7775b47e99bbe9186a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4",
        "size": 11819,
        "upload_time": "2021-06-23T21:34:28",
        "upload_time_iso_8601": "2021-06-23T21:34:28.562798Z",
        "url": "https://files.pythonhosted.org/packages/cb/47/3c0062f39a9cdb37e53e6e3abee7b71caf6596218abb28101fb2f11102d1/import-guard-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2eb24991ddb748f80f112deed86873be92db32d16092d24e88c47d60fa6d67ba",
        "md5": "9cbb1896704f70db7c500f2954f9d654",
        "sha256": "c24fe73152120435d29464403d80d0cd77315b4565e07573c5cd941f91c91dda"
      },
      "downloads": -1,
      "filename": "import_guard-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9cbb1896704f70db7c500f2954f9d654",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4",
      "size": 9821,
      "upload_time": "2021-06-23T21:34:26",
      "upload_time_iso_8601": "2021-06-23T21:34:26.978965Z",
      "url": "https://files.pythonhosted.org/packages/2e/b2/4991ddb748f80f112deed86873be92db32d16092d24e88c47d60fa6d67ba/import_guard-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb473c0062f39a9cdb37e53e6e3abee7b71caf6596218abb28101fb2f11102d1",
        "md5": "8dc90df44db22a7775b47e99bbe9186a",
        "sha256": "5450dad0b72254c67e0a3cf3fd1cd18837cec297f8a6d60a33705c70a1b44227"
      },
      "downloads": -1,
      "filename": "import-guard-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8dc90df44db22a7775b47e99bbe9186a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4",
      "size": 11819,
      "upload_time": "2021-06-23T21:34:28",
      "upload_time_iso_8601": "2021-06-23T21:34:28.562798Z",
      "url": "https://files.pythonhosted.org/packages/cb/47/3c0062f39a9cdb37e53e6e3abee7b71caf6596218abb28101fb2f11102d1/import-guard-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}