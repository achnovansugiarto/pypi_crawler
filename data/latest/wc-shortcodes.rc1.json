{
  "info": {
    "author": "WebCase",
    "author_email": "info@webcase.studio",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Text shortcodes resolver\n\n## Installation\n\n```sh\npip install wc-shortcodes\n```\n\n## Usage\n\nSimple usage:\n\n```python\nfrom wc_shortcodes.registry import CodesRegistry\nfrom wc_shortcodes.transformer import transform\n\n\nregistry = CodesRegistry()\n\n\n# Adding handler for a specific shortcode:\n@registry.register()\ndef shortcode(entity, context={}):\n  return entity.content\n\n\n# Transforming some content using registered resolvers.\ntransform(registry, '''\n[shortcode unhandled-parameter=\"it's value\"]\nContent.\n[/shortcode]\n''')\n# Result will be:\n# > 'Content.'\n```\n\nShortcode handler can also be defined with additional parameters:\n\n```python\n@registry.register(\n  # Shortcode custom name:\n  'name',\n  # Does this shortcode can handle multiple entities at a time.\n  # `False` by default.\n  multiple=False,\n  # Should entity's `content` property be parsed and resolved before it\n  # passed to this handler.\n  # Or you should do something with raw content instead.\n  # `True` by default.\n  autoresolve_content=True,\n)\n```\n\n### Multiresolver\n\nMultiresolver is not the same as singular one(duh..).\n\nThis configuration was made for performance reasons.\n\nFor example if there is, lets say, 10 same shortcuts with different parameters passed inside one text. It's obvious that whose 10 items will do same work for 10 times. So to prevent such unefficiency multihandlers had been added.\n\n```python\n@registry.register(multiple=True)\ndef shortcode(\n  # They receive all current entities as `*args`.\n  entities: List[Entity],\n  context={}\n) -> List[str]:\n  return [\n    # And must return result in the exact same order as they have been passed.\n    entity.content for entity in entities\n  ]\n```\n\n## Django\n\n### Installation\n\nIn `settings.py`:\n\n```python\nINSTALLED_APPS += [\n  'wc_shortcodes.contrib.django',\n]\n```\n\n### Usage\n\nSpecific implementation not yet ready. Can be used as described before.\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.1.0]\nInitial version.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wc-shortcodes",
    "package_url": "https://pypi.org/project/wc-shortcodes/",
    "platform": "",
    "project_url": "https://pypi.org/project/wc-shortcodes/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/wc-shortcodes/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Simple shortcodes resolver utility lib.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12804920,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f4e4a1c78725ac3425e314a9570164457df7754f2622f9fd4b3ebfe6a928c0d",
          "md5": "d27682bd5ac560016786a9f16546e237",
          "sha256": "e17fd8eeb1fad8e878678b38a6ec3a4af4aba9caa7a004d729bdce8137b06277"
        },
        "downloads": -1,
        "filename": "wc-shortcodes-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d27682bd5ac560016786a9f16546e237",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9746,
        "upload_time": "2022-02-06T19:39:28",
        "upload_time_iso_8601": "2022-02-06T19:39:28.600293Z",
        "url": "https://files.pythonhosted.org/packages/5f/4e/4a1c78725ac3425e314a9570164457df7754f2622f9fd4b3ebfe6a928c0d/wc-shortcodes-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f4e4a1c78725ac3425e314a9570164457df7754f2622f9fd4b3ebfe6a928c0d",
        "md5": "d27682bd5ac560016786a9f16546e237",
        "sha256": "e17fd8eeb1fad8e878678b38a6ec3a4af4aba9caa7a004d729bdce8137b06277"
      },
      "downloads": -1,
      "filename": "wc-shortcodes-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d27682bd5ac560016786a9f16546e237",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9746,
      "upload_time": "2022-02-06T19:39:28",
      "upload_time_iso_8601": "2022-02-06T19:39:28.600293Z",
      "url": "https://files.pythonhosted.org/packages/5f/4e/4a1c78725ac3425e314a9570164457df7754f2622f9fd4b3ebfe6a928c0d/wc-shortcodes-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}