{
  "info": {
    "author": "Vlad Apopei & Kary Främling",
    "author_email": "ioan-vlad.apopei@aalto.fi, kary.framling@aalto.fi",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Documentation"
    ],
    "description": "# CIU-Py\n\n*Explainable Machine Learning through Contextual Importance and Utility*\n\n**NOTE: This python implementation is currently a work in progress. As such some of the functionality present in the original R version is not quite yet available.**\n\nThe *CIU-Python* library provides methods to generate post-hoc explanations for\nmachine learning-based classifiers.\n\n# What is CIU?\n\n**Remark**: It seems like Github Markdown doesn’t show correctly the “{”\nand “}” characters in Latex equations, whereas they are shown correctly\nin Rstudio. Therefore, in most cases where there is an $i$ shown in\nGithub, it actually signifies `{i}` and where there is an $I$ it\nsignifies `{I}`.\n\nCIU is a model-agnostic method for producing outcome explanations of\nresults of any “black-box” model `y=f(x)`. CIU directly estimates two\nelements of explanation by observing the behaviour of the black-box\nmodel (without creating any “surrogate” model `g` of `f(x)`).\n\n**Contextual Importance (CI)** answers the question: *how much can the\nresult (or the utility of it) change as a function of feature* $i$ or a\nset of features $\\{i\\}$ jointly, in the context $x$?\n\n**Contextual Utility (CU)** answers the question: *how favorable is the\nvalue of feature* $i$ (or a set of features $\\{i\\}$ jointly) for a good\n(high-utility) result, in the context $x$?\n\nCI of one feature or a set of features (jointly) $\\{i\\}$ compared to a\nsuperset of features $\\{I\\}$ is defined as\n\n$$\n\\omega_{j,\\{i\\},\\{I\\}}(x)=\\frac{umax_{j}(x,\\{i\\})-umin_{j}(x,\\{i\\})}{umax_{j}(x,\\{I\\})-umin_{j}(x,\\{I\\})},  \n$$\n\nwhere $\\{i\\} \\subseteq \\{I\\}$ and $\\{I\\} \\subseteq \\{1,\\dots,n\\}$. $x$\nis the instance/context to be explained and defines the values of input\nfeatures that do not belong to $\\{i\\}$ or $\\{I\\}$. In practice, CI is\ncalculated as:\n\n$$\n\\omega_{j,\\{i\\},\\{I\\}}(x)= \\frac{ymax_{j,\\{i\\}}(x)-ymin_{j,\\{i\\}}(x)}{ ymax_{j,\\{I\\}}(x)-ymin_{j,\\{I\\}}(x)}, \n$$\n\nwhere $ymin_{j}()$ and $ymax_{j}()$ are the minimal and maximal $y_{j}$\nvalues observed for output $j$.\n\nCU is defined as\n\n$$\nCU_{j,\\{i\\}}(x)=\\frac{u_{j}(x)-umin_{j,\\{i\\}}(x)}{umax_{j,\\{i\\}}(x)-umin_{j,\\{i\\}}(x)}. \n$$\n\nWhen $u_{j}(y_{j})=Ay_{j}+b$, this can be written as:\n\n$$\nCU_{j,\\{i\\}}(x)=\\left|\\frac{ y_{j}(x)-yumin_{j,\\{i\\}}(x)}{ymax_{j,\\{i\\}}(x)-ymin_{j,\\{i\\}}(x)}\\right|, \n$$\n\nwhere $yumin=ymin$ if $A$ is positive and $yumin=ymax$ if $A$ is\nnegative.\n\n\n## Usage\n\nFirst, install the required dependencies. NOTE: this is to be run in your environment's terminal; some environments such as Google Colab might require an exclamation mark before the command, such as `!pip install`. \n\n```\npip install CIU_Py\n```\n\nImport the library:\n\n```python\nfrom ciu import determine_ciu\n```\n\nNow, we can call the ``determine_ciu`` function which takes the following parameters:\n\n* ``case``: A dictionary that contains the data of the case.\n\n\n* ``predictor``: The prediction function of the black-box model *py-ciu* should\n                 call.\n\n* ```dataset```: Dataset to deduct min_maxs from (dictionary).\n                            Defaults to ``None``.\n\n* ``min_maxs`` (optional): dictionary (``'feature_name': [min, max, is_int]`` for each feature),\n                    or infered from dataset. Defaults to ``None``\n* \n* ``samples`` (optional): The number of samples *py-ciu* will generate. Defaults\n                          to ``1000``.\n\n* ``prediction_index`` (optional): In case the model returns several\n                                   predictions, it is possible to provide the\n                                   index of the relevant prediction. Defaults to\n                                   ``None``.\n                                   \n* ``category_mapping`` (optional): A mapping of one-hot encoded categorical\n                                   variables to lists of categories and category\n                                   names. Defaults to ``None``.\n                                   \n* ``feature_interactions`` (optional): A list of ``{key: list}`` tuples of\n                                       features whose interactions should be\n                                       evaluated. Defaults to ``[]``.\n\nHere we can use a simple example with the well known Iris flower dataset\n```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\niris=datasets.load_iris()\n\ndf = pd.DataFrame(data = np.c_[iris['data'], iris['target']],\n              columns = iris['feature_names'] + ['target'])\ndf['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)\ndf.columns = ['s_length', 's_width', 'p_length', 'p_width', 'target', 'species']\n\nX = df[['s_length', 's_width', 'p_length', 'p_width']]\ny = df['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)\n```\n\nThen create and train a model, in this case an `LDA` model\n```python\nmodel = LinearDiscriminantAnalysis()\nmodel.fit(X_train, y_train)\n```\n\nNow simply use our Iris flower data and the model, following the parameter descriptions above\n```python\niris_df = df.apply(pd.to_numeric, errors='ignore')\n\niris_ciu = determine_ciu(\n    X_test.iloc[[42]],\n    model.predict_proba,\n    iris_df.to_dict('list'),\n    samples = 1000,\n    prediction_index = 2\n)\n```\n## Example Output\n\nLet's import a test from the ciu_tests file\n\n```python\nfrom ciu_tests.ciu_tests import get_boston_gbm_test\n```\n\nThe ```get_boston_gbm_test``` function returns a CIU Object that we can simply store and use as such\n```python\nboston_ciu = get_boston_gbm_test()\nboston_ciu.explain_tabular()\n```\n\nNow we can also plot the CI/CU values using the CIU Object's ``plot_ciu`` function\n\n```python\nboston_ciu.plot_ciu()\n```\n![](images/default_plot.png)\nLikewise there are also several options available using the following parameters:\n\n* ``plot_mode``: defines the type plot to use between 'default', 'overlap' and 'combined'.            \n* ``include``: defines whether to include interactions or not.                                        \n* ``sort``: defines the order of the plot bars by the 'ci' (default), 'cu' values or unsorted if None.\n* ``color_blind``: defines accessible color maps to use for the plots, such as 'protanopia',          \n                                   'deuteranopia' and 'tritanopia'.                           \n* ``color_edge_cu``: defines the hex or named color for the CU edge in the overlap plot mode.         \n* ``color_fill_cu``: defines the hex or named color for the CU fill in the overlap plot mode.         \n* ``color_edge_ci``: defines the hex or named color for the CI edge in the overlap plot mode.         \n* ``color_fill_ci``: defines the hex or named color for the CI fill in the overlap plot mode.         \n\nHere's quick example using some of these parameters to create a modified version of the above plot \n```python\nboston_ciu.plot_ciu(plot_mode=\"combined\", color_blind='tritanopia', sort='cu')\n```\n![](images/modified_plot.png)\n## Authors\n* [Vlad Apopei](https://github.com/vladapopei/)\n\n* [Kary Främling](https://github.com/KaryFramling)\n\nThis implementation replaces an older one, available at [https://github.com/TimKam/py-ciu](https://github.com/TimKam/py-ciu)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KaryFramling/py-ciu",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CIU-Py",
    "package_url": "https://pypi.org/project/CIU-Py/",
    "platform": "any",
    "project_url": "https://pypi.org/project/CIU-Py/",
    "project_urls": {
      "Code": "https://github.com/KaryFramling/py-ciu",
      "Homepage": "https://github.com/KaryFramling/py-ciu"
    },
    "release_url": "https://pypi.org/project/CIU-Py/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python documentation generator",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15880123,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "991fd4ba93506872a18fe5c5ad3e64c907047eedde4181213d5c367f23a5e1a5",
          "md5": "6e511f005020018cf02167425c591e63",
          "sha256": "d9557b36653bee36d3381f7a9a90895d72829d28587106112ce15f24090e5976"
        },
        "downloads": -1,
        "filename": "CIU_Py-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e511f005020018cf02167425c591e63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10653,
        "upload_time": "2022-11-24T15:00:40",
        "upload_time_iso_8601": "2022-11-24T15:00:40.593763Z",
        "url": "https://files.pythonhosted.org/packages/99/1f/d4ba93506872a18fe5c5ad3e64c907047eedde4181213d5c367f23a5e1a5/CIU_Py-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "991fd4ba93506872a18fe5c5ad3e64c907047eedde4181213d5c367f23a5e1a5",
        "md5": "6e511f005020018cf02167425c591e63",
        "sha256": "d9557b36653bee36d3381f7a9a90895d72829d28587106112ce15f24090e5976"
      },
      "downloads": -1,
      "filename": "CIU_Py-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6e511f005020018cf02167425c591e63",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10653,
      "upload_time": "2022-11-24T15:00:40",
      "upload_time_iso_8601": "2022-11-24T15:00:40.593763Z",
      "url": "https://files.pythonhosted.org/packages/99/1f/d4ba93506872a18fe5c5ad3e64c907047eedde4181213d5c367f23a5e1a5/CIU_Py-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}