{
  "info": {
    "author": "Giuseppe Pollio",
    "author_email": "polliog@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PrimeBots Python Wrapper\n****\n\nWrapper in Python per l'API di [prime bots](https://primebots.it/)\n\n# Indice\n***\n- [Installazione](#installazione)\n- [Documentazione](#documentazione)\n- [Esempi](#esempi)\n- [Meta](#meta)\n- [Contribuzione](#contribuzione)\n# Installazione\n***\n**Ãˆ richiesta la versione di Python 3.5.3 o maggiore**\n\nInstallazione tramite pip\n```bash\npip install pbpy\n```\n\nInstallazione tramite source\n```bash\npip3 install git+https://github.com/Polliog/primebots-py-wrapper\n```\n\n# Documentazione\n***\n>La documentazione verrÃ  aggiornata col susseguirsi delle versioni\n\n### Indice Documentazione\n\n- [Inizializzazione](#inizializzazione)\n- [Eventi](#eventi)\n- [Funzioni](#funzioni)\n- [Esempi](#esempi)\n\n## Inizializzazione\n```python\nimport pbpy\n\nfrom discord.ext import commands\nclass PBots(commands.Cog):\n    \"\"\"\n    Esempio di inizializzazione\n    \"\"\"\n\n    def __init__(self, client):\n        self.client = client\n        self.token = 'API Token' #Ottenibile accedendo alla sezione API nel pannello di modifica del bot\n        \n        self.pb_client = pbpy.PBclient(self.client, self.token)\n                \ndef setup(client):\n    client.add_cog(PBots(client))\n```\n\n**Parametri PBclient**\n\n Parametro |  Descrizione \n --------- | -----------\n `client` |  discord.Client\n `token` |  `[String]` primebots.it API Token\n `autoupdate`  | `[Bool]` Aggiornamento automatico dei server\n `logger` |  `[Bool]` Debug Logs\n\n\n## Eventi\n***\n>Per usare gli eventi si utilizza il decorator @commands.Cog.listener() sopra una funziona col nome dell'evento da controllare piu' eventuali parametri\n\n```python\nimport pbpy\n\nfrom discord.ext import commands\n\nclass PBots(commands.Cog):\n    \"\"\"\n    Esempio dell'utilizzo degli eventi all'interno di un cog\n    \"\"\"\n\n    def __init__(self, client):\n        self.client = client\n        self.token = 'API Token' #Ottenibile accedendo alla sezione API nel pannello di modifica del bot\n        \n        self.pb_client = pbpy.PBclient(self.client, self.token)\n        \n    @commands.Cog.listener()\n    async def on_count_update(self):\n        \"\"\"\n        Questo evento avviene ogni volta che la conta dei server viene aggiornata\n        \"\"\"\n        print(\"Conta dei server aggiornata\")\n        \n    @commands.Cog.listener()\n    async def on_socket_ready(self):\n        \"\"\"\n        Questo evento avviene ogni volta che il bot si collega con successo al server dell'API\n        \"\"\"\n        print(\"API pronta!\")\n        \n    @commands.Cog.listener()\n    async def on_vote(self, id):\n        \"\"\"\n        Questo evento avviene ogni volta che il bot viene votato\n        :param ID = id dell'utente che ha votato.\n        \"\"\"\n        \n        user = self.client.get_user(int(id))\n        \n        print(f\"{user.name} ha votato il bot!\")\n                \ndef setup(client):\n    client.add_cog(PBots(client))\n```\n\n## Funzioni\n***\n>**I nomi dei comandi usati nella documentazione sono soltanto da esempio**\n\n```python\nimport pbpy\nimport discord\n\nfrom discord.ext import commands\nclass PBots(commands.Cog):\n    \"\"\"\n    Questo esempio mostra come aggiornare manualmente il contatore dei server sul sito ogni ora.\n    \"\"\"\n\n    def __init__(self, client):\n        self.client = client\n        self.token = 'API Token' #Ottenibile accedendo alla sezione API nel pannello di modifica del bot\n        \n        self.pb_client = pbpy.PBclient(self.client, self.token)\n                \n    @commands.command()\n    async def update_guilds(self):\n        \"\"\"\n        Aggiorna manualmente il numero dei server in cui Ã¨ presente il bot\n        \"\"\"\n        \n        await self.pb_client.update_guilds() #Numero dei server preso automaticamente\n        \n    \n    @commands.command()\n    async def has_voted(self, ctx, user:discord.User):\n        \"\"\"\n        Controlla se un utente ha votato\n        \n        :param userID = ID dell'utente da controllare\n        :return bool\n        \"\"\"\n        \n        ha_votato = await self.pb_client.has_voted(user.id)\n        if ha_votato:\n            print(\"L'utente ha votato\")\n        else:\n            ...\n        \n    \n    \n    @commands.command()\n    async def get_votes(self):\n        \"\"\"\n        Questa funzione ti permette di ricavare una lista di tutti gli utenti che hanno votato il bot\n        \n        :return [ID, ID, ID]\n        \"\"\"\n        \n        lista_utenti = await self.pb_client.get_votes()\n        \ndef setup(client):\n    client.add_cog(PBots(client))\n```\n# Esempi\n***\n>Tutti gli esempi vengono eseguiti all'interno di cogs\n> >Attenzione: Il numero dei server mostrati potrebbe essere minore a quello in cui Ã¨ realmente il bot a causa dei nuovi limiti all'interno dell'API di discord, per attenuare il problema Ã¨ consigliato avere entrambi gli [Privileged Gateway Intents](https://discordpy.readthedocs.io/en/latest/intents.html)\n\nAggiornamento manuale della conta dei server ogni ora:\n\n```python\nfrom discord.ext import commands, tasks\n\nimport pbpy\n\nclass PBots(commands.Cog):\n    \"\"\"\n    Questo esempio mostra come aggiornare manualmente il contatore dei server sul sito ogni ora.\n    \"\"\"\n\n    def __init__(self, client):\n        self.client = client\n        self.token = 'API Token' #Ottenibile accedendo alla sezione API nel pannello di modifica del bot\n        self.pb_client = pbpy.PBclient(self.client, self.token)\n        \n        self.guild_count_update.start()\n        \n    @tasks.loop(hours=1)\n    async def guild_count_update(self):\n        \"\"\"Loop che aggiorna ogni ora automaticamente il contatore dei server sul sito\"\"\"\n        await self.client.wait_until_ready() #Aspetta che la cache del bot sia pronta, inizializzabile anche esternamente alla funzione\n        await self.pb_client.update_guilds() #Prende automaticamente i server in cui e' il bot.\n\ndef setup(client):\n    client.add_cog(PBots(client))\n```\n\nAggiornamento automatico tramite autoupdate:\n\n```python\nfrom discord.ext import commands\n\nimport pbpy\n\nclass PBots(commands.Cog):\n    \"\"\"\n    Questo esempio mostra come aggiornare automaticamente il contatore dei server sul sito tramite la funzione autoupdate.\n    \"\"\"\n\n    def __init__(self, client):\n        self.client = client\n        self.token = 'API Token' #Ottenibile accedendo alla sezione API nel pannello di modifica del bot\n        self.pb_client = pbpy.PBclient(self.client, self.toke, autoupdate=True) #Autoupdate = True: Aggiornamento automatico ogni ora\n        \n    @commands.Cog.listener()\n    async def on_count_update(self):\n        print(\"Conta dei server aggiornata\")\n\ndef setup(client):\n    client.add_cog(PBots(client))\n```\n\n# Meta\n***\nLibreria distribuita sotto licenza [MIT License](https://github.com/Polliog/primebots-py-wrapper/blob/master/LICENSE.txt). Consulta `LICENSE` per maggiori informazioni.\n\n# Contribuzione\n***\n1. **Fork** la repo (https://github.com/Polliog/primebots-py-wrapper/fork)\n2. **Clone** il progetto\n3. **Commit** usando il tuo branch\n4. **Push** il tuo lavoro nel tuo fork\n5. Invita una **Pull request** in modo da poter controllare i tuoi cambiamenti",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Polliog/primebots-py-wrapper",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/project/pbpy",
    "keywords": "primebots,pbpy",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pbpy",
    "package_url": "https://pypi.org/project/pbpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/pbpy/",
    "project_urls": {
      "Download": "https://github.com/Polliog/primebots-py-wrapper",
      "Homepage": "https://pypi.org/project/pbpy"
    },
    "release_url": "https://pypi.org/project/pbpy/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Wrapper per l'api di primebots.it",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10801858,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f30d510ad0dfc57a5766e5fa7ab09883ab25eadaa5cfa8ea77d675a8522c942",
          "md5": "49204dffc314758eae3710a69a76483f",
          "sha256": "245fc3c43e64c4d6646fb5acdc08afacec406688d2e6d93ef5494748bb769321"
        },
        "downloads": -1,
        "filename": "pbpy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49204dffc314758eae3710a69a76483f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5628,
        "upload_time": "2021-02-03T20:33:42",
        "upload_time_iso_8601": "2021-02-03T20:33:42.160031Z",
        "url": "https://files.pythonhosted.org/packages/8f/30/d510ad0dfc57a5766e5fa7ab09883ab25eadaa5cfa8ea77d675a8522c942/pbpy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ff9db6c7c18fdbbbcdb8978a4831b20d0cf60dea724c936afccd910b6a9cef6",
          "md5": "4ff9c8b60f3927df5409656112410ddb",
          "sha256": "c7fdc08b443a6a5df1c0a55deb397c2a0b8aaccfe5563348d44d66e5a545891a"
        },
        "downloads": -1,
        "filename": "pbpy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4ff9c8b60f3927df5409656112410ddb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3816,
        "upload_time": "2021-02-03T20:33:43",
        "upload_time_iso_8601": "2021-02-03T20:33:43.519633Z",
        "url": "https://files.pythonhosted.org/packages/1f/f9/db6c7c18fdbbbcdb8978a4831b20d0cf60dea724c936afccd910b6a9cef6/pbpy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76a93d4aef83a49ebc146fc1365845af633fc8acaaa5889c23af02e1cf291437",
          "md5": "cbd79e9c3ecd702e66560dd6d732de2d",
          "sha256": "cb909f304b9213e79d1fed031346194f67c71e85c4e104e6fdd05dba914214b4"
        },
        "downloads": -1,
        "filename": "pbpy-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbd79e9c3ecd702e66560dd6d732de2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7544,
        "upload_time": "2021-02-04T19:08:32",
        "upload_time_iso_8601": "2021-02-04T19:08:32.571615Z",
        "url": "https://files.pythonhosted.org/packages/76/a9/3d4aef83a49ebc146fc1365845af633fc8acaaa5889c23af02e1cf291437/pbpy-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8b4af96f30cb3ee7c7233bec6521054b7c7486864db8824fbb3361d062d655d",
          "md5": "34e9ce5e5e0e5ad558f2beb507be8868",
          "sha256": "11ea0fa8cc89649ddca936e4711883b12829ff3716c266800f0c7d8cb1a4c622"
        },
        "downloads": -1,
        "filename": "pbpy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "34e9ce5e5e0e5ad558f2beb507be8868",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6930,
        "upload_time": "2021-02-04T19:08:33",
        "upload_time_iso_8601": "2021-02-04T19:08:33.977669Z",
        "url": "https://files.pythonhosted.org/packages/b8/b4/af96f30cb3ee7c7233bec6521054b7c7486864db8824fbb3361d062d655d/pbpy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19dfb3abe2b93502190e7ac6d444e8557df6328ba7a5f3bc01e2efbc613b2d86",
          "md5": "d3bb3f3230f0235a1e388b5626cc33c1",
          "sha256": "777ea9fb51551ebd4652566b7b0a68d6062eaa8cc8f3cf3eef338b79e0bd6827"
        },
        "downloads": -1,
        "filename": "pbpy-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d3bb3f3230f0235a1e388b5626cc33c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6945,
        "upload_time": "2021-07-01T22:54:15",
        "upload_time_iso_8601": "2021-07-01T22:54:15.970425Z",
        "url": "https://files.pythonhosted.org/packages/19/df/b3abe2b93502190e7ac6d444e8557df6328ba7a5f3bc01e2efbc613b2d86/pbpy-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19dfb3abe2b93502190e7ac6d444e8557df6328ba7a5f3bc01e2efbc613b2d86",
        "md5": "d3bb3f3230f0235a1e388b5626cc33c1",
        "sha256": "777ea9fb51551ebd4652566b7b0a68d6062eaa8cc8f3cf3eef338b79e0bd6827"
      },
      "downloads": -1,
      "filename": "pbpy-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d3bb3f3230f0235a1e388b5626cc33c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6945,
      "upload_time": "2021-07-01T22:54:15",
      "upload_time_iso_8601": "2021-07-01T22:54:15.970425Z",
      "url": "https://files.pythonhosted.org/packages/19/df/b3abe2b93502190e7ac6d444e8557df6328ba7a5f3bc01e2efbc613b2d86/pbpy-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}