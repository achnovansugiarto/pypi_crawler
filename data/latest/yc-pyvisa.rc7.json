{
  "info": {
    "author": "Susunl",
    "author_email": "1253013130@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# YICHIP 仪器控制\n\nUPDATE:\n- 2022-02-17：第三次更新,修改示波器获取电压函数,现在更加精准\n- 2022-02-17：第二次更新,新增RIGOL DP832A三通道直流电源驱动\n- 2022-01-29：第一次更新,初始代码可对示波器(ZDS1104,ZDS2014),电源(AgilentE3649A,Agilent66319D),台式万用表(Agilent34410A)\n\n## YC-PYVISA介绍\n\nVISA，虚拟仪器软件架构，是对带有GPIB、VXI、PXI、串口(RS232/485)、以太网、USB和/或IEEE 1394接口的仪器系统进行配置、编程和故障排除的标准。简单的说就是两个人沟通，类似于语言的中介，VISA将你的语言转换变成仪器能听懂的命令.\n\nPyVisa是通过上述接口用来控制各种各样的测量仪器的Python包.\n\n本项目对YICHIP使用的部分仪器通过PyVisa进行了二次封装,以达到更方便的控制仪器,进行自动化测试的目的\n\n## 安装\n\nUsing pip:\n\n```cmd\npip3 install yc-pyvisa\n```\n\n## 物理接口\n\n前面说到visa是对带有GPIB、VXI、PXI、串口(RS232/485)、以太网、USB和/或IEEE 1394接口的仪器系统进行配置、编程和故障排除的标准,所以针对不同的接口,需要安装不同的驱动,不能直接安装使用.以下任意一个接口连接到电脑,且安装好驱动,都可直接被pyvisa控制.\n\n### GPIB接口\n\n比较通用的是GPIB接口,大概长这样\n<center>\n    <img src=\"https://qzxx.com/wp-content/uploads/2017/11/788e43dadc14671.jpg\" width=\"400\">\n    <center>GPIB控制器</center>\n</center>\n<center>\n    <img src=\"https://media.rs-online.com/t_large/F7600341-01.jpg\" width=\"400\">\n    <center>GPIB接口</center>\n</center>\n\n注意:一个GPIB控制器可以控制多个GPIB设备,通过以下线材可拓展多个接口\n\n<center>\n    <img src=\"https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=40cb661ad93f8794d3aa4028e22b22cc/a6efce1b9d16fdfa7ddf434cb98f8c5495ee7be5.jpg\" width=\"400\">\n</center>\n\n### USB接口\n\nUSB接口应该比较方便辨认,通常是type-B(2.0)接口,就我们平时电脑连接Jlink的线材,我就不贴图片了\n\n一般情况下USB设备的驱动都可以在对应的厂商的官网找到,但是个人觉得打驱动比较麻烦,所以如果仪器有GPIB接口并且你有GPIB控制器的话最好直接用GPIB去连接仪器,不过我发现我们公司的示波器都没有GPIB接口,而且我目前控制的ZLG的示波器,按照官网提供的方法是没有办法在Win10上安装驱动的,所以后面我会提供一篇教程,专门用于ZLG示波器的驱动安装\n\n### RS-232接口\n\n用串口来进行收发指令和数据,这也是我比较推荐的一种方式,毕竟打串口驱动是一件相对容易的事情,只需要一根RS-232的线就好了,大概长这样\n<center>\n    <img src=\"https://image-c.ehsy.com/uploadfile/opc/img/2018/09/10/20180910142455231.jpg\" width=\"400\">\n    <center>RS-232</center>\n</center>\n\n### 网口\n\n关于网口直接连接就行,一般仪器里面都可以直接设置,具体需要大家自己翻手册.\n\n## 驱动安装\n\n必要安装:下载[NI VISA](https://www.ni.com/zh-cn/support/downloads/drivers/download.ni-visa.html#442805),完成后直接一直下一步安装即可,里面集成了GPIB的控制器驱动,并可为部分仪器提供USB驱动,同时为pyvisa提供后端支持\n\nAgilent_34410A台式万用表USB驱动:\n\n由于安装文件巨大,所以这里不提供该驱动,在内网进行下载:\\\\192.168.2.16\\public\\xubo\\Agilent 34410A Driver.zip\n\n- 安装IntruiLinkApp，安装文件路径：CD1\\IntuiLinkApp\\Setup.exe\n- 安装IOLib，安装文件路径：CD2\\Autorun\\auto.exe\n- 安装IVI_COM，安装文件路径：CD1\\ivi-com\\Agilent34410.1.0.18.0.msi\n- 安装完后重启电脑即可通过USB控制台式万用表\n\nZLG示波器驱动USB驱动安装:\n\n目前只提供ZDS1104 和 ZDS2014 usb驱动文件,由于该驱动是通过`NI-VISA DRIVER WIZARD`生成,未经过签名,所以win10是不允许安装的,需要[禁用驱动程序强制签名](https://iknow.lenovo.com.cn/detail/dc_132524.html),然后双击安装文件即可\n\n串口驱动安装:\n\nRS232的线在公司是比较稀少的，里面的串口芯片是比较老的存在，直接插上win10 是不识别的，这个时候进驱动管理器会发现驱动已经安装，但是不能使用，这个时候只需要发动万能的BING就可以了[PL2303win10驱动安装教程](https://blog.csdn.net/wtf3505/article/details/104138727)，安装完之后就可以愉快的使用串口对仪器进行控制了，但是需要注意的是，串口仪器是不能直接使用的因为串口涉及到波特率的问题，所以我们还是需要设置一下波特率，一般仪器支持串口控制，波特率是可以修改的，如果无法找到就去官网下载手册看看哪里有问题。具体设置波特率的代码我已经在ZLG2014上进行体现了,如果你们用其他仪器的话，就复制粘贴这句话到它的对象初始化函数里面去，去设置对应的波特率就好了\n\n```python\nself.instr.baud_rate = 115200\n```\n\n网口:\n\n网口是不需要安装驱动的,只需要该电脑和设备处于同一网段即可(注意 ZLG系列的示波器LAN控制不稳定,不建议使用)\n\n## 代码控制\n\n在上面安装完模块过后直接导入本模块\n\n```python\nfrom yc-pyvisa import *\n```\n\n然后初始化对应的仪器,里面有默认的对应设备的仪器地址,若地址有变动在初始化的时候填入地址参数就好\n\n```python\noscilloscope = ZLG1104()#示波器\noscilloscope2 = ZLG2014()#示波器\nmultimeter  = Agilent_34410A()#台式万用表\npower = Agilent_66319d()#电源\npower2 = AgilentE3649A()#电源\n```\n\nGPIB的地址需要通过仪器自己去设置,也可通过在上面安装完 NI VISA之后出现的一个配置管理软件(`NI MAX`),遍历对应的设别地址，也可通过代码去遍历对应的设备地址。\n\n``` python\nrm = visa.ResourceManager()\nnew = rm.list_resources()#返回一个数组，里面包含了所有的地址\n```\n\n但是在我实践下来发现通过代码ZLG的示波器是不能够遍历到他的USB地址的，所以这个时候你只能通过`NI MAX`去遍历它的地址，同时ZLG示波器的USB地址都是完全一样的且无法更改，所以当你需要同时控制两台以上的示波器的时候，只能通过1个USB+n个串口去控制示波器。\n\n后面控制仪器就用对应的函数控制就好,比如:\n\n```python\nfre = oscilloscope.Get_Frequency(1)\n```\n\n就能够获取到对应示波器通道1的输入频率\n\n## 进阶\n\n如果我提供的库里面的函数无法满足需求，也不必担心，示波器的功能很多，由于时间原因只实现了目前用得到的一些函数和功能，可以通过去官网下载对应的手册，（同时这里也会提供一些我下载到的手册，在同目录下）去查找它对应的某些功能的SCIP指令，然后整理成函数就好。当然如果能通过gitee 提交上来就更好了，我会把每一次正确提交都发布上去，供大家使用，当然希望大家能够对自己提交的每一个对象（仪器），函数都写好注释，方便大家理解其功能（虽然第一版有很多函数都没写注释。。。，但是后面有时间会改的）\n\n## 完整样例代码\n\n下面是YC3122的应急筛片程序提供一个样例\n\n```python\nfrom ast import While\nfrom distutils import extension\nfrom email import charset\nimport os\nimport glob\nfrom pickle import FALSE, NONE, TRUE\nfrom time import sleep\nimport sys\nfrom webbrowser import get\nfrom yc_pyvisa import *\nimport openpyxl\nimport threading\nfrom logger import *\nmax_val = 0\notp_buff = []\ndef get_cmd_result(cmd):\n    result = os.popen(cmd)\n    res = result.read()\n    return res\ndef e_p():\n    while('CPU Stopped' not in get_cmd_result(\"e p\")):\n        continue\n    return\ndef e_c():\n    while('CPU Running' not in get_cmd_result(\"e c\")):\n        continue\n    return\ndef file_name(file_name):\n    global max_val\n    file_txt = glob.glob(file_name)\n    if(file_txt == []):\n        max_val = 0x100\n        return\n    for filename in file_txt:\n        try:\n            str1 = str(os.path.basename(filename))\n            str1 = str1.replace('.txt',\"\").replace(\"id\",\"\")\n            str1 = int(str1,16)\n            if(max_val < str1):\n                max_val = str1\n        except Exception as e:\n            print(e)\n            pass\n    max_val += 1\ndef count_bits_2(value):\n    count = 0\n    while(value):\n        value &= value - 1\n        count += 1\n    return count\ndef auto_set_fre():\n    get_cmd_result(\"e 20004 0155\")\n    sleep(0.2)\n    get_cmd_result(\"e 20000 02\")\n    sleep(1)\n    if(\"01\" not in get_cmd_result(\"e 20001\")):\n        return FALSE\n    fre1 = oscilloscope.Get_Frequency()\n    print(fre1)\n    get_cmd_result(\"e 20004 0165\")\n    get_cmd_result(\"e 20000 02\")\n    sleep(0.2)\n    if(\"01\" not in get_cmd_result(\"e 20001\")):\n        return FALSE\n    fre2 = oscilloscope.Get_Frequency()\n    print(fre2)\n    fer = int((fre2-fre1)/16)\n    result = int(0x155 + (24000000 - fre1)/fer)\n    get_cmd_result(\"e 20004 \" + hex(result).replace(\"0x\",\"\"))\n    get_cmd_result(\"e 20000 02\")\n    sleep(0.2)\n    if(\"01\" not in get_cmd_result(\"e 20001\")):\n        return FALSE\n    fre3 = oscilloscope.Get_Frequency()\n    print(fre3)\n    if(fre3 <24050000 and fre3 >23950000):\n        return result\n    while(fre3 >24050000):\n        result-=1\n        get_cmd_result(\"e 20004 \" + hex(result-30).replace(\"0x\",\"\"))\n        get_cmd_result(\"e 20000 02\")\n        sleep(0.2)\n        if(\"01\" not in get_cmd_result(\"e 20001\")):\n            return FALSE\n        fre3 = oscilloscope.Get_Frequency()\n        if(fre3 <24050000 and fre3 >23950000):\n            return result\n    while(fre3 < 23950000):\n        result+=1\n        get_cmd_result(\"e 20004 \" + hex(result).replace(\"0x\",\"\"))\n        get_cmd_result(\"e 20000 02\")\n        sleep(0.2)\n        if(\"01\" not in get_cmd_result(\"e 20001\")):\n            return FALSE\n        fre3 = oscilloscope.Get_Frequency()\n        if(fre3 <24050000 and fre3 >23950000):\n            return result\n    return result\n    # power.setVoltage(5,2)\n    # set_rc192_val(0x5c)\n    # power.setVoltage(0,2)\n    # sleep(0.1)\n    # power.setVoltage(5,2)\n    # fre1 = oscilloscope.Get_Frequency()\n    # print(fre1)\n    # set_rc192_val(0x65)\n    # power.setVoltage(0,2)\n    # sleep(0.1)\n    # power.setVoltage(5,2)\n    # fre2 = oscilloscope.Get_Frequency()\n    # print(fre2)\n    # fer = int((fre2-fre1)/16)\n    # result = int(0x55 + (24000000 - fre1)/fer)\n    # set_rc192_val(result)\n    # fre3 = oscilloscope.Get_Frequency()\n    # power.setVoltage(0,2)\n    # sleep(0.1)\n    # power.setVoltage(5,2)\n    # print(fre3)\n    # if(fre3 <24050000 and fre3 >23950000):\n    #     return result\n    # while(fre3 >24050000):\n    #     result-=1\n    #     set_rc192_val(result)\n    #     fre3 = oscilloscope.Get_Frequency()\n    #     power.setVoltage(0,2)\n    #     sleep(0.1)\n    #     power.setVoltage(5,2)\n    #     if(fre3 <24050000 and fre3 >23950000):\n    #         return result\n    # while(fre3 < 23950000):\n    #     result+=1\n    #     set_rc192_val(result)\n    #     fre3 = oscilloscope.Get_Frequency()\n    #     power.setVoltage(0,2)\n    #     sleep(0.1)\n    #     power.setVoltage(5,2)\n    #     if(fre3 <24050000 and fre3 >23950000):\n    #         return result\n    # return result\ndef set_rc192_val(input_val):\n    while(True):\n        if('CPU Stopped' in get_cmd_result(\"e p\")):\n            get_cmd_result(\"e f0c18 00000000\")\n            get_cmd_result(\"e f0c1c 00000000\")\n            get_cmd_result(\"e f0c49 30\")\n            get_cmd_result(\"e f8703 10\")\n            get_cmd_result(\"e faaa0 55\")\n            get_cmd_result(\"e faaa0 aa\")\n            get_cmd_result(\"e faaa0 17\")\n            get_cmd_result(\"e faaa4 01\")\n            get_cmd_result(\"e fa802 \" + hex(input_val).replace(\"0x\",\"\"))\n            print(\"input_val = %x\"%input_val)\n            break\n\ndef down_otp(cmd):\n    get_cmd_result(\"e 20000 \"+ cmd)\n    sleep(0.1)\n    while(\"01\" not in get_cmd_result(\"e 20001\")):\n        continue\n    # while(True):\n    #     if('CPU Stopped' in get_cmd_result(\"e p\")):\n    #         get_cmd_result(\"e f853c 88\")\n    #         if('f8530 :                                     88'in get_cmd_result(\"e f853c\")):\n    #             get_cmd_result(\"e r pc c0\")\n    #             if('read cm0 reg f = c0\\n'in get_cmd_result(\"e r pc\")):\n    #                 get_cmd_result(\"e otw 12c \" + hex(input_val).replace(\"0x\",\"\"))\n    #                 if(count_bits_2(input_val) % 2 == 1):\n    #                     get_cmd_result(\"e otw 12d 81\")\n    #                 elif(count_bits_2(input_val) % 2 == 0):\n    #                     get_cmd_result(\"e otw 12d c1\")\n    #                 break\n    return\ndef RC192_test():\n    cail_val = auto_set_fre()\n    if(cail_val == None):\n        error(\"RC192 cail_val ERROR \" + str(cail_val))\n    print(cail_val)\n    otp_buff.append(hex(cail_val))\n    down_otp(\"03\")\n\ndef down_ft_code():\n    e_p()\n    os.system(\"tool\\d.bat\")\n\ndef osc_32k_cal():\n    get_cmd_result(\"e 20000 04\")\n    sleep(0.1)\n    if(\"01\" not in get_cmd_result(\"e 20001\")):\n        return False\n    oscilloscope.Set_Timebase(\"10us\")\n    osc32k_cail_val = oscilloscope.Get_Frequency()\n    oscilloscope.Set_Timebase(\"100us\")\n    oscilloscope.write(\":CHANnel1:DISPlay OFF\")\n    print(osc32k_cail_val)\n    otp_buff.append((hex)(osc32k_cail_val))\n    get_cmd_result(\"e 20004 \" + to_hex(osc32k_cail_val))\n    down_otp(\"05\")\n    return osc32k_cail_val\ndef DVDD_test():\n    DVDD_V = oscilloscope.Get_Vol(2)\n    if(DVDD_V>1.3 or DVDD_V<1.15):\n        error(\"DVDD_V ERROR \"+str(DVDD_V))\ndef ft_test_init():\n    power.setVoltage(0,2)\n    sleep(1)\n    CURR_VUBT = multimeter.Read_Curr()\n    if(CURR_VUBT<1e-06 or CURR_VUBT>3e-06):\n        error(\"VBUT ERROR\"+ str(CURR_VUBT))\n    power.setVoltage(5,2)\n    power.setVoltage(3.3,1)\n    DVDD_test()\n    bist_test()\n    down_ft_code()\n    sleep(0.6)\n\ndef xw_toExcel(data,excelname):  # xlsxwriter库储存数据到excel\n    try:\n        workbook = openpyxl.load_workbook(excelname)  # 打开工作簿\n        worksheet1 = workbook.active  # 创建子表\n    except Exception as a:\n        print(a)\n        workbook = openpyxl.Workbook(excelname)\n        workbook.save(filename= excelname)  # 关闭表\n        workbook.close()\n        workbook = openpyxl.load_workbook(excelname)  # 打开工作簿\n        worksheet1 = workbook.active\n    rows = worksheet1.max_row\n    j = 0\n    for i in data:\n        j+=1\n        worksheet1.cell(row=rows+1,column = j).value = i\n    workbook.save(filename= excelname)  # 关闭表\n    workbook.close()\ndef Creat_Thread(thread,*args1):\n    thread_uart_read=threading.Thread(target=thread,args=args1)\n    thread_uart_read.setDaemon(True)\n    thread_uart_read.start()\ndef Check_CurrThread():\n    while True:\n        CURR_CHARG_IN = power.Get_Curr(2)\n        if(CURR_CHARG_IN > 0.02):\n            error(\"CURR_CHARG_IN ERROR \" + str(CURR_CHARG_IN))\n        sleep(1)\ndef read_id_txt(max_val):\n    with open(\".\\AB_NEW_ID\\id\"+ hex(max_val).replace(\"0x\",\"\") + \".txt\",\"r\") as f:\n        str = f.read().replace(\"\\n\",\"\")\n    return str\ndef Write_OtpBySelf():\n    power.setVoltage(5,2)\n    # val = int(otp_buff[6],16)\n    # xor_val = 0\n    # for i in range(0,4):\n    #     xor_val^=val>>i&0x1\n    # val|=0x80\n    # val|=xor_val<<6\n    # input_check = input(\"确认烧录otp？(y/n):\")\n    # if((input_check.lower() != 'y')):\n    #     sys.exit()\n    power.setVoltage(0,2)\n    sleep(0.5)\n    power.setVoltage(5,2)\n    xw_toExcel(otp_buff,\"3122_opt.xlsx\")\n    while(True):\n        if('CPU Stopped' in get_cmd_result(\"e p\")):\n            get_cmd_result(\"e f853c 88\")\n            if('f8530 :                                     88'in get_cmd_result(\"e f853c\")):\n                get_cmd_result(\"e r pc c0\")\n                if('read cm0 reg f = c0\\n'in get_cmd_result(\"e r pc\")):\n                    get_cmd_result(\"e otp .\\AB_NEW_ID\\id\"+ hex(max_val).replace(\"0x\",\"\") + \".txt 2\")\n                    sleep(0.1)\n                    get_cmd_result(\"e otp flash_178.txt 178\")\n                    sleep(0.1)\n                    get_cmd_result(\"e otw 139 8f\")\n                    break\ndef bist_test():\n    os.system(r\"tool\\bist.bat\")\n    str = get_cmd_result(\"e f8518l8\")\n    if(\"ff ff 03 00 00 00 00 00\" not in str):\n        error(\"bist test_error\")\ndef gen_id():\n    dir = (os.getcwd() + r\"\\AB_NEW_ID\\*.txt\")\n    file_name(dir)\n    str1 = \"python f_gen3122id.py \" + hex(max_val).replace(\"0x\",\"\")\n    get_cmd_result(str1)\n    otp_buff.append(read_id_txt(max_val))\ndef to_hex(val):\n    return hex(val).replace(\"0x\",\"\")\ndef HvLdo_test():\n    cail_val = 0x6\n    get_cmd_result(\"e 20004 06\")\n    sleep(0.2)\n    get_cmd_result(\"e 20000 0a\")\n    sleep(1)\n    if(\"01\" not in get_cmd_result(\"e 20001\")):\n        return FALSE\n    vol = oscilloscope.Get_Vol(3)\n    if(vol<=3.35 and vol >=3.25):\n        return cail_val\n    while(vol<=3.25):\n        cail_val-=1\n        get_cmd_result(\"e 20004 0\"+ to_hex(cail_val))\n        sleep(0.2)\n        get_cmd_result(\"e 20000 0a\")\n        sleep(1)\n        if(\"01\" not in get_cmd_result(\"e 20001\")):\n            return FALSE\n        vol = oscilloscope.Get_Vol(3)\n        if(vol<=3.35 and vol >=3.25):\n            return cail_val\n        if(cail_val <= 0x0):\n            return False\n    while(vol>=3.35):\n        cail_val+=1\n        get_cmd_result(\"e 20004 0\"+ to_hex(cail_val))\n        sleep(0.2)\n        get_cmd_result(\"e 20000 0a\")\n        sleep(1)\n        if(\"01\" not in get_cmd_result(\"e 20001\")):\n            return FALSE\n        vol = oscilloscope.Get_Vol(3)\n        if(vol<=3.35 and vol >=3.25):\n            return cail_val\n        if(cail_val >= 0xf):\n            return False\n    return cail_val\ndef Vcard_test(val):\n    cail_val = 0x4\n    if (val==0):\n        valmax = 1.85\n        valmin = 1.75\n    if(val == 1):\n        valmax = 3.05\n        valmin = 2.95\n    get_cmd_result(\"e 20004 010\"+to_hex(cail_val)+\"0\"+str(val))\n    sleep(0.2)\n    get_cmd_result(\"e 20000 0e\")\n    sleep(1)\n    if(\"01\" not in get_cmd_result(\"e 20001\")):\n        return FALSE\n    vol = oscilloscope.Get_Vol(4)\n    if(vol<valmax and vol >valmin):\n        return cail_val\n    while(vol<valmin):\n        cail_val+=1\n        get_cmd_result(\"e 20004 010\"+to_hex(cail_val)+\"0\"+str(val))\n        sleep(0.2)\n        get_cmd_result(\"e 20000 0e\")\n        sleep(1)\n        if(\"01\" not in get_cmd_result(\"e 20001\")):\n            return FALSE\n        vol = oscilloscope.Get_Vol(4)\n        if(vol<valmax and vol >valmin):\n            return cail_val\n        if(cail_val >= 0xf):\n            return False\n    while(vol>valmax):\n        cail_val-=1\n        get_cmd_result(\"e 20004 010\"+to_hex(cail_val)+\"0\"+str(val))\n        sleep(0.2)\n        get_cmd_result(\"e 20000 0e\")\n        sleep(1)\n        if(\"01\" not in get_cmd_result(\"e 20001\")):\n            return FALSE\n        vol = oscilloscope.Get_Vol(4)\n        if(vol<valmax and vol >valmin):\n            return cail_val\n        if(cail_val <= 0):\n            return False\n    return cail_val\ndef charg_test():\n    get_cmd_result(\"e fa820 321800\")\n    cail_val = 0x8\n    get_cmd_result(\"e fa823 0\"+to_hex(cail_val))\n    sleep(0.2)\n    vol = oscilloscope2.Get_Vol(1)\n    valmax = 4.25\n    valmin = 4.15\n    if(vol<valmax and vol >valmin):\n        return cail_val\n    while(vol<valmin):\n        cail_val+=1\n        get_cmd_result(\"e fa823 0\"+to_hex(cail_val))\n        sleep(0.2)\n        vol = oscilloscope2.Get_Vol(1)\n        if(vol<valmax and vol >valmin):\n            return cail_val\n        if(cail_val >= 0xf):\n            return False\n    while(vol>valmax):\n        cail_val-=1\n        get_cmd_result(\"e fa823 0\"+to_hex(cail_val))\n        sleep(0.2)\n        vol = oscilloscope2.Get_Vol(1)\n        if(vol<valmax and vol >valmin):\n            return cail_val\n        if(cail_val <= 0):\n            return False\n    return cail_val\noscilloscope = ZLG1104()\noscilloscope2 = ZLG2014()\nmultimeter  = Agilent_34410A()\npower = Agilent_66319d()\n# zlg_2014 = ZLG1104(\"USB0::0x04CC::0x121C::123456789::RAW\")\n# os.environ['BAUD']=\"320\"\nif __name__ == \"__main__\":\n    power.setVoltage(0,2)\n    sleep(0.1)\n    power.setVoltage(5,2)\n    while(True):\n        if('CPU Stopped' in get_cmd_result(\"e p\")):\n            get_cmd_result(\"e f853c 88\")\n            if('f8530 :                                     88'in get_cmd_result(\"e f853c\")):\n                get_cmd_result(\"e r pc c0\")\n                if('read cm0 reg f = c0\\n'in get_cmd_result(\"e r pc\")):\n                    get_cmd_result(\"e otw 0 1111\")\n                    break\n    ft_test_init()\n    Creat_Thread(Check_CurrThread)\n    gen_id()\n    RC192_test()\n    print(osc_32k_cal())\n\n    val = HvLdo_test()\n    otp_buff.append(val)\n    print(val)\n    down_otp(\"0b\")\n    val = Vcard_test(0)\n    otp_buff.append(val)\n    print(val)\n    down_otp(\"0f\")\n\n    val = Vcard_test(1)\n    otp_buff.append(val)\n    print(val)\n    down_otp(\"0f\")\n    # char_val = charg_test()\n    # otp_buff.append(char_val)\n    # print(char_val)\n\n    print(otp_buff)\n    Write_OtpBySelf()\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/susunl/yc_pyvisa",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yc-pyvisa",
    "package_url": "https://pypi.org/project/yc-pyvisa/",
    "platform": "any",
    "project_url": "https://pypi.org/project/yc-pyvisa/",
    "project_urls": {
      "Homepage": "https://gitee.com/susunl/yc_pyvisa"
    },
    "release_url": "https://pypi.org/project/yc-pyvisa/0.0.7/",
    "requires_dist": [
      "pyvisa (>=1.11.3)",
      "numpy (>=1.19.2)",
      "regex (>=2020.10.15)"
    ],
    "requires_python": ">=3.5",
    "summary": "=用于YICHIP内部仪器设备的控制",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14932596,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "870856197ddff3e26bc1f1d23c5fbfa6a1c1608eaf08510abcc0879d04a5925e",
          "md5": "20acb54f905b916be57545c55ef12d80",
          "sha256": "7616467e474108a5e1f6a772578e779388b21eaf9a7bc763549958a00f2f37e6"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20acb54f905b916be57545c55ef12d80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 6317,
        "upload_time": "2022-01-29T10:03:04",
        "upload_time_iso_8601": "2022-01-29T10:03:04.136429Z",
        "url": "https://files.pythonhosted.org/packages/87/08/56197ddff3e26bc1f1d23c5fbfa6a1c1608eaf08510abcc0879d04a5925e/yc_pyvisa-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1dcacfeff9b2ed03d11dbb03a7b772a2f416a0d1209909795cf0b5512580e4b",
          "md5": "22e30f7455ebe1ca2d9ccbb2b54493e5",
          "sha256": "33050b6481c6985d248b3ceb3db361a3354a01484801a4f003b2afcb766e06a1"
        },
        "downloads": -1,
        "filename": "yc-pyvisa-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "22e30f7455ebe1ca2d9ccbb2b54493e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 3751,
        "upload_time": "2022-01-29T10:03:05",
        "upload_time_iso_8601": "2022-01-29T10:03:05.472455Z",
        "url": "https://files.pythonhosted.org/packages/b1/dc/acfeff9b2ed03d11dbb03a7b772a2f416a0d1209909795cf0b5512580e4b/yc-pyvisa-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6ea11b76f0c970ac018b01dbd222b422a96586564cd081b68f02fb5e1597bb8",
          "md5": "e2e31c678cd4555296628f1152293790",
          "sha256": "6fcf5c588ded45073c3bc1c922550847c673ba071c9c71936efa971899d1df85"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2e31c678cd4555296628f1152293790",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 3845,
        "upload_time": "2022-01-30T04:01:14",
        "upload_time_iso_8601": "2022-01-30T04:01:14.329978Z",
        "url": "https://files.pythonhosted.org/packages/d6/ea/11b76f0c970ac018b01dbd222b422a96586564cd081b68f02fb5e1597bb8/yc_pyvisa-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dab8acc04aaf172d4b53185e907bde0ef2986b8f42237ded2044beefd0b6da7",
          "md5": "513fc4eac499819bccab33dcc864bb75",
          "sha256": "465ec08037fee9eca0a53c077f8bd351a5262116087e392fb4b0924305f4d6a2"
        },
        "downloads": -1,
        "filename": "yc-pyvisa-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "513fc4eac499819bccab33dcc864bb75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 3864,
        "upload_time": "2022-01-30T04:01:16",
        "upload_time_iso_8601": "2022-01-30T04:01:16.091176Z",
        "url": "https://files.pythonhosted.org/packages/6d/ab/8acc04aaf172d4b53185e907bde0ef2986b8f42237ded2044beefd0b6da7/yc-pyvisa-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01fbd494d7d19c36e252617c0822c2e0442112a86b62c16ba8be3c39a2e90a88",
          "md5": "ea2c3c7a68ae7ea7d544f04a9ef19813",
          "sha256": "2e4959d5fcf97085a5a94d044b479ba74cbd064bb349a8780fa17deb279958e4"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ea2c3c7a68ae7ea7d544f04a9ef19813",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 3869,
        "upload_time": "2022-01-30T09:41:13",
        "upload_time_iso_8601": "2022-01-30T09:41:13.959562Z",
        "url": "https://files.pythonhosted.org/packages/01/fb/d494d7d19c36e252617c0822c2e0442112a86b62c16ba8be3c39a2e90a88/yc_pyvisa-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03327703163f61b68d53743cac2158418852256fa5e62c37424c7964b188c135",
          "md5": "69e6eec3c9fefb200f99410b10769c34",
          "sha256": "40bd26db9bccf09503e898e8c5ded1e0864a11da926c5596038d475a520ab761"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69e6eec3c9fefb200f99410b10769c34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 10580,
        "upload_time": "2022-02-17T13:47:55",
        "upload_time_iso_8601": "2022-02-17T13:47:55.017950Z",
        "url": "https://files.pythonhosted.org/packages/03/32/7703163f61b68d53743cac2158418852256fa5e62c37424c7964b188c135/yc_pyvisa-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80bcdde2d99d01b25f8d1c524ec6efadd34d25090424f31c627372354d92a6c4",
          "md5": "9c51c97b98c06f08cf6fae8711e182a8",
          "sha256": "85c32ceb42a1570bb4761fdaf0d5832ada37a178a57a857b520cdc2d6a3a3dfc"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9c51c97b98c06f08cf6fae8711e182a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21469,
        "upload_time": "2022-02-17T13:47:57",
        "upload_time_iso_8601": "2022-02-17T13:47:57.130443Z",
        "url": "https://files.pythonhosted.org/packages/80/bc/dde2d99d01b25f8d1c524ec6efadd34d25090424f31c627372354d92a6c4/yc_pyvisa-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3eaebf120fa3177f74078cf5c3ac9dbd23f373a6dfb0ff5f2a16ef9ef2395a9",
          "md5": "5369a41a65abbb9ee8b389960096b75a",
          "sha256": "a4469005653791b4ee2078eb229f61ccdef0354a9317b2a88c89cdf9823c55e3"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5369a41a65abbb9ee8b389960096b75a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 10614,
        "upload_time": "2022-06-01T03:55:30",
        "upload_time_iso_8601": "2022-06-01T03:55:30.318277Z",
        "url": "https://files.pythonhosted.org/packages/e3/ea/ebf120fa3177f74078cf5c3ac9dbd23f373a6dfb0ff5f2a16ef9ef2395a9/yc_pyvisa-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df75b004cd3c2ce9cccc216d53a40e75b540054da0fe73f94a225ed8d806d045",
          "md5": "ca45322514d28a4d67cdfd7c6fd0c23b",
          "sha256": "7e5b4748c387993023b53f90d7919272d4a936ab61fa32650d4a64ad9d53844b"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ca45322514d28a4d67cdfd7c6fd0c23b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21574,
        "upload_time": "2022-06-01T03:55:34",
        "upload_time_iso_8601": "2022-06-01T03:55:34.002912Z",
        "url": "https://files.pythonhosted.org/packages/df/75/b004cd3c2ce9cccc216d53a40e75b540054da0fe73f94a225ed8d806d045/yc_pyvisa-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "946adaf073adaba50c79ba75e121d9e0e1c04426245a76b6ef3d31e18406727e",
          "md5": "83834c096eaa06bbd3acbbac5fe49646",
          "sha256": "f874bb81dc4201ac725d3b1e0cb2b945224721f03a884826fcb151857804779b"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83834c096eaa06bbd3acbbac5fe49646",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 10718,
        "upload_time": "2022-06-01T03:56:55",
        "upload_time_iso_8601": "2022-06-01T03:56:55.259143Z",
        "url": "https://files.pythonhosted.org/packages/94/6a/daf073adaba50c79ba75e121d9e0e1c04426245a76b6ef3d31e18406727e/yc_pyvisa-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1c07ff5eff00f08fa5d68f5541d87a6f1278af7a4402e1261ddf3927412c877",
          "md5": "69479581a239d207f74bc5227e1f17ae",
          "sha256": "5e7379163569013409fa856e62325b75f1b983f41cbbc164892d62bbe509bffd"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "69479581a239d207f74bc5227e1f17ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21687,
        "upload_time": "2022-06-01T03:57:00",
        "upload_time_iso_8601": "2022-06-01T03:57:00.072110Z",
        "url": "https://files.pythonhosted.org/packages/b1/c0/7ff5eff00f08fa5d68f5541d87a6f1278af7a4402e1261ddf3927412c877/yc_pyvisa-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "340f8c375f59a3715b6f8981111901a126f1bbaf1f1fac878db9d6bbff8252ab",
          "md5": "08c869992b860be47a34c197b1a1ca94",
          "sha256": "20fcf9b85c6aff81ac52704766f5f29d3596eff691c05f876deda260ecca598e"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08c869992b860be47a34c197b1a1ca94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 10634,
        "upload_time": "2022-08-30T08:10:16",
        "upload_time_iso_8601": "2022-08-30T08:10:16.472762Z",
        "url": "https://files.pythonhosted.org/packages/34/0f/8c375f59a3715b6f8981111901a126f1bbaf1f1fac878db9d6bbff8252ab/yc_pyvisa-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a559a1c601879932249b7fcdfd684a6dcc7c010fa108d7013bbc4f96286a045a",
          "md5": "490c85b507ee38e971368316393dddb5",
          "sha256": "e37350130b68057528491c6ed772e0a0822421c94649a23c8cd28a651c7305bd"
        },
        "downloads": -1,
        "filename": "yc_pyvisa-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "490c85b507ee38e971368316393dddb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21619,
        "upload_time": "2022-08-30T08:10:23",
        "upload_time_iso_8601": "2022-08-30T08:10:23.042033Z",
        "url": "https://files.pythonhosted.org/packages/a5/59/a1c601879932249b7fcdfd684a6dcc7c010fa108d7013bbc4f96286a045a/yc_pyvisa-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "340f8c375f59a3715b6f8981111901a126f1bbaf1f1fac878db9d6bbff8252ab",
        "md5": "08c869992b860be47a34c197b1a1ca94",
        "sha256": "20fcf9b85c6aff81ac52704766f5f29d3596eff691c05f876deda260ecca598e"
      },
      "downloads": -1,
      "filename": "yc_pyvisa-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "08c869992b860be47a34c197b1a1ca94",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 10634,
      "upload_time": "2022-08-30T08:10:16",
      "upload_time_iso_8601": "2022-08-30T08:10:16.472762Z",
      "url": "https://files.pythonhosted.org/packages/34/0f/8c375f59a3715b6f8981111901a126f1bbaf1f1fac878db9d6bbff8252ab/yc_pyvisa-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a559a1c601879932249b7fcdfd684a6dcc7c010fa108d7013bbc4f96286a045a",
        "md5": "490c85b507ee38e971368316393dddb5",
        "sha256": "e37350130b68057528491c6ed772e0a0822421c94649a23c8cd28a651c7305bd"
      },
      "downloads": -1,
      "filename": "yc_pyvisa-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "490c85b507ee38e971368316393dddb5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 21619,
      "upload_time": "2022-08-30T08:10:23",
      "upload_time_iso_8601": "2022-08-30T08:10:23.042033Z",
      "url": "https://files.pythonhosted.org/packages/a5/59/a1c601879932249b7fcdfd684a6dcc7c010fa108d7013bbc4f96286a045a/yc_pyvisa-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}