{
  "info": {
    "author": "Ginko Balboa",
    "author_email": "ginkobalboa3@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "# PerfStat\n\nPython program for capturing performance statistics\n\nThis is a simple module that can be run from a command line or\ninside another python program. \nThe program returns the measured times for program execution\nand statistics.\n\n# Installation \n\nInstallation is simple, over PyPI. Additional library needed\nis pandas\n\n``` console\npip install perfstat\n```\n\n# Running\n\nDefault configurations for running are set initially for two\nperformance recording programs (`likwid` and `perf`) for Linux.\n\nIf you use one of these two programs you can just supply the \ncommand for the performance of a program (here as an example is taken the `ls` command). \nThe metrics are auto-generated and the files with the results are saved at the given locations.\n\nThe most simple case is the default (the command requires sudo, so initially the system will ask \nfor credentials):\n\n``` console\nuser@pc:~/Documents$ python -m perfstat\nRun command: 'sudo likwid-perfctr -C 0 -g CLOCK ls'\nRun count: 10\nMeasuring: ['Runtime (RDTSC) [s]', 'Runtime unhalted [s]', 'Clock [MHz]', 'Uncore Clock [MHz]', 'CPI', 'Energy [J]', 'Power [W]']\nSeparator: '|'\nMeasurements file: ''\nStatistics file: ''\nFloat format: '%.4e'\n[sudo] password for user: \nDone: 100%\n        Runtime (RDTSC) [s]  Runtime unhalted [s]  Clock [MHz]  Uncore Clock [MHz]     CPI  Energy [J]  Power [W]\nRun ID                                                                                                           \n0                    0.0014                0.0002    3562.9367                 0.0  1.4209      0.0219    15.8320\n1                    0.0015                0.0002    2999.8756                 0.0  1.3766      0.0425    28.9588\n2                    0.0016                0.0002    2600.1929                 0.0  1.3642      0.0240    14.8284\n3                    0.0016                0.0002    2801.0958                 0.0  1.5310      0.0625    38.9571\n4                    0.0017                0.0002    2299.3991                 0.0  1.3631      0.0339    19.4133\n5                    0.0014                0.0002    3199.4962                 0.0  1.4354      0.0240    16.8569\n6                    0.0013                0.0002    3995.2261                 0.0  1.5017      0.0587    44.6264\n7                    0.0017                0.0002    2399.9842                 0.0  1.4123      0.0219    12.7339\n8                    0.0024                0.0002    1701.8149                 0.0  1.4640      0.0479    19.7376\n9                    0.0014                0.0002    3670.1753                 0.0  1.7845      0.0601    41.5754\n                        Runtime (RDTSC) [s]  Runtime unhalted [s]  Clock [MHz]  Uncore Clock [MHz]       CPI  Energy [J]  Power [W]\nMean                               0.001600                0.0002  2923.019680                 0.0  1.465370    0.039740  25.351980\nStd. dev.                          0.000313                0.0000   704.950781                 0.0  0.125495    0.016774  12.167161\nStd. error                         0.000099                0.0000   222.925011                 0.0  0.039685    0.005304   3.847594\nConf. inter. 90% (min)             0.001419                0.0002  2514.372960                 0.0  1.392623    0.030016  18.298905\nConf. inter. 90% (max)             0.001781                0.0002  3331.666400                 0.0  1.538117    0.049464  32.405055\nConf. inter. 95% (min)             0.001376                0.0002  2418.728270                 0.0  1.375597    0.027740  16.648117\nConf. inter. 95% (max)             0.001824                0.0002  3427.311090                 0.0  1.555143    0.051740  34.055843\nConf. inter. 99% (min)             0.001279                0.0002  2198.550056                 0.0  1.336401    0.022501  12.847931\nConf. inter. 99% (max)             0.001921                0.0002  3647.489304                 0.0  1.594339    0.056979  37.856029\n```\n\n## Flags\n\nThere are the following flags that can be supplied from the command line.\n\n- **-c \"command to run\"** The -c flag sets the command to run the performance metrics on. \n    (Default: `\"sudo likwid-perfctr -C 0 -g CLOCK ls\"`).\n\n- **-r num_of_runs** This flag sets the number of runs of the above-defined command. Affects \n    the metric's statistics. Run counts up to 30 are treated by the Student's t-distribution, \n    and above 30 are treated as a regular normal distribution (z-statistics). (Default: 10).\n\n- **-m \"measure1,measure2,measure3\"** Strings defining the measured values. These are keywords that\n    define lines that have value. The default values are set for the `likwid-perfctr`, also\n    a predefined set exists for the `perf stat` command. \n    (Default: `\"Runtime (RDTSC) [s], Runtime unhalted [s], Clock [MHz], Uncore Clock [MHz], CPI, Energy [J], Power [W]\"`. For the `perf stat` we have the following value: `\"task-clock, context-switches,cpu-migrations, page-faults, cycles, instructions, branches, branch-misses\"`.\n\n- **-s \"separator\"** Separator between measure and values from above. (Default: `\"|\"`).\n\n- **-fm \"measurements_file\"** Place where the measurements file will be recorded. (Default: `\"\"` - no  \n    file will be made ).\n\n- **-fs \"statistics_file\"** Place where the statistics file will be recorded. (Default: `\"\"` - no  \n    file will be made ).\n\n- **-g \"float_format\"** Format for the float value when recording files. (Default: `\"%.4e\"`).\n\n- **-po print_output** Int (bool) that defines if the program will throw some info. (Default: 1)\n\n- **-pc print_cmd_output** Int (bool) that defines if the program will print every stdout from calling the command. (Default: 0).\n\n- **-pv print_csv** Int (bool) that defines if the program will print the measurements and statistics on the standard output. (Default: 1).\n\n## Examples:\n\n1. We want to run the `sudo perf stat ls` 30 times, on a smaller set of metrics than the default, and save the results in files. We don't need to define a separator since it is automatically set when\nreading the command.\n\n``` console\nuser@pc:~/Documents$ python -m perfstat -c \"sudo perf stat ls\" -r 30 -m \"cycles,instructions\" -fm \"~/Documents/measurements.csv\" -fs \"~/Documents/stats.csv\"\nRun command: 'sudo perf stat ls'\nRun count: 30\nMeasuring: ['cycles', 'instructions']\nSeparator: ' '\nMeasurements file: '~/Documents/measurements.csv'\nStatistics file: '~/Documents/stats.csv'\nFloat format: '%.4e'\nDone: 100%\n           cycles  instructions\nRun ID                         \n0       2297607.0     1557603.0\n1       2409217.0     1550675.0\n2       2365400.0     1524057.0\n3       2400169.0     1557315.0\n4       2276937.0     1529382.0\n5       2210214.0     1545919.0\n6       2479832.0     1544244.0\n7       2263966.0     1542431.0\n8       2190710.0     1566473.0\n9       2330062.0     1563216.0\n10      2254009.0     1550485.0\n11      2316403.0     1550825.0\n12      2290797.0     1556676.0\n13      2245716.0     1564225.0\n14      1925554.0     1540289.0\n15      2223343.0     1552700.0\n16      2168010.0     1540918.0\n17      2150624.0     1516970.0\n18      2157178.0     1552543.0\n19      2232088.0     1553093.0\n20      2314820.0     1540224.0\n21      2153573.0     1555339.0\n22      2273797.0     1526145.0\n23      2334992.0     1570076.0\n24      2259947.0     1550779.0\n25      2293618.0     1559691.0\n26      2160072.0     1511287.0\n27      2360356.0     1547945.0\n28      1932100.0     1559604.0\n29      2217976.0     1558192.0\n                              cycles  instructions\nMean                    2.249636e+06  1.547977e+06\nStd. dev.               1.191917e+05  1.442241e+04\nStd. error              2.176133e+04  2.633160e+03\nConf. inter. 90% (min)  2.212661e+06  1.543503e+06\nConf. inter. 90% (max)  2.286611e+06  1.552451e+06\nConf. inter. 95% (min)  2.205129e+06  1.542592e+06\nConf. inter. 95% (max)  2.294143e+06  1.553363e+06\nConf. inter. 99% (min)  2.189654e+06  1.540719e+06\nConf. inter. 99% (max)  2.309619e+06  1.555235e+06\n```\n\n2. We want to print the results of `sudo likwid-perfctr -C 0 -g CLOCK ls` of 30 runs on screen:\n\n```console\nuser@pc:~/Documents$ python -m perfstat -r 30\nRun command: 'sudo likwid-perfctr -C 0 -g CLOCK ls'\nRun count: 30\nMeasuring: ['Runtime (RDTSC) [s]', 'Runtime unhalted [s]', 'Clock [MHz]', 'Uncore Clock [MHz]', 'CPI', 'Energy [J]', 'Power [W]']\nSeparator: '|'\nMeasurements file: ''\nStatistics file: ''\nFloat format: '%.4e'\nDone: 100%\n        Runtime (RDTSC) [s]  Runtime unhalted [s]  Clock [MHz]  Uncore Clock [MHz]     CPI  Energy [J]  Power [W]\nRun ID                                                                                                           \n0                    0.0018                0.0002    2226.0468                 0.0  1.3575      0.0349    19.2939\n1                    0.0017                0.0002    2500.0245                 0.0  1.3986      0.0365    21.4518\n2                    0.0015                0.0002    3581.5944                 0.0  1.4945      0.0455    29.8032\n3                    0.0014                0.0002    3695.8744                 0.0  1.4639      0.0620    45.6367\n4                    0.0014                0.0002    3994.0263                 0.0  1.8561      0.0469    33.3140\n5                    0.0014                0.0002    3998.6654                 0.0  1.7200      0.0428    31.3381\n6                    0.0016                0.0002    2800.4410                 0.0  1.5302      0.0183    11.2228\n7                    0.0018                0.0002    2200.9816                 0.0  1.3852      0.0361    19.6812\n8                    0.0015                0.0002    3001.8282                 0.0  1.3928      0.0435    28.8160\n9                    0.0020                0.0002    2100.6110                 0.0  1.5094      0.0496    25.2147\n10                   0.0016                0.0003    3888.9705                 0.0  1.0907      0.1007    62.9745\n11                   0.0016                0.0002    3987.8630                 0.0  1.9548      0.0450    27.4019\n12                   0.0019                0.0003    3848.1241                 0.0  1.7632      0.0914    48.0189\n13                   0.0014                0.0002    3985.7676                 0.0  1.5378      0.0959    70.0341\n14                   0.0014                0.0002    3900.1340                 0.0  1.6443      0.0457    33.6117\n15                   0.0014                0.0002    3995.9067                 0.0  1.4920      0.0273    19.6689\n16                   0.0023                0.0002    1900.0740                 0.0  1.1203      0.0399    17.4767\n17                   0.0016                0.0002    3011.0410                 0.0  1.6138      0.0610    37.4662\n18                   0.0013                0.0002    3987.2934                 0.0  1.5493      0.0955    71.1530\n19                   0.0013                0.0002    3998.0156                 0.0  1.5539      0.0461    36.8038\n20                   0.0016                0.0002    3998.0918                 0.0  1.9775      0.0359    22.0043\n21                   0.0015                0.0002    3100.6407                 0.0  1.4444      0.0491    33.0547\n22                   0.0016                0.0004    3933.7056                 0.0  1.9139      0.0477    29.5551\n23                   0.0019                0.0002    2399.5110                 0.0  1.6705      0.0358    19.1972\n24                   0.0021                0.0002    1833.1479                 0.0  1.3479      0.0303    14.5428\n25                   0.0019                0.0002    2200.1844                 0.0  1.5328      0.0358    18.5442\n26                   0.0018                0.0002    2300.1520                 0.0  1.4223      0.0354    19.6474\n27                   0.0020                0.0002    2099.6418                 0.0  1.5320      0.0303    15.1852\n28                   0.0015                0.0002    2899.9655                 0.0  1.4048      0.0470    30.4260\n29                   0.0026                0.0007    3800.3073                 0.0  4.0811      0.1438    56.0181\n                        Runtime (RDTSC) [s]  Runtime unhalted [s]  Clock [MHz]  Uncore Clock [MHz]       CPI  Energy [J]  Power [W]\nMean                               0.001680              0.000230  3172.287717                 0.0  1.625183    0.051857  31.618570\nStd. dev.                          0.000307              0.000099   806.962293                 0.0  0.509394    0.027188  16.089802\nStd. error                         0.000056              0.000018   147.330484                 0.0  0.093002    0.004964   2.937582\nConf. inter. 90% (min)             0.001585              0.000199  2921.954510                 0.0  1.467161    0.043422  26.627244\nConf. inter. 90% (max)             0.001775              0.000261  3422.620923                 0.0  1.783206    0.060291  36.609896\nConf. inter. 95% (min)             0.001565              0.000193  2870.963044                 0.0  1.434972    0.041704  25.610539\nConf. inter. 95% (max)             0.001795              0.000267  3473.612389                 0.0  1.815394    0.062009  37.626601\nConf. inter. 99% (min)             0.001526              0.000180  2766.188049                 0.0  1.368833    0.038174  23.521459\nConf. inter. 99% (max)             0.001834              0.000280  3578.387385                 0.0  1.881533    0.065539  39.715681\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "perfstat",
    "package_url": "https://pypi.org/project/perfstat/",
    "platform": null,
    "project_url": "https://pypi.org/project/perfstat/",
    "project_urls": {
      "github": "https://github.com/GinkoBalboa/perfstat"
    },
    "release_url": "https://pypi.org/project/perfstat/0.0.2/",
    "requires_dist": [
      "pandas"
    ],
    "requires_python": ">=3.7",
    "summary": "Capturing performance statistics",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14270364,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6870b7c3a14f51679852ea18f54507d88861d9ccbcbb8fc10dc588657e9b9a3f",
          "md5": "01f2e7dc0c0bf35484b4f380c7a14e42",
          "sha256": "6f88e1d929c3e8691be33d1efd5158f0258314701d30a623594cffc2d3060900"
        },
        "downloads": -1,
        "filename": "perfstat-0.0.1-py3-none-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "01f2e7dc0c0bf35484b4f380c7a14e42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7365,
        "upload_time": "2022-06-28T08:45:50",
        "upload_time_iso_8601": "2022-06-28T08:45:50.440623Z",
        "url": "https://files.pythonhosted.org/packages/68/70/b7c3a14f51679852ea18f54507d88861d9ccbcbb8fc10dc588657e9b9a3f/perfstat-0.0.1-py3-none-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b21465093c37b6783a21d4615485f82be7a53046184065c0b64785c85bf79ac7",
          "md5": "895515813155408b53b45a3cdf3d54f2",
          "sha256": "1be3fd3f739d021da6138b9d81d9c275531883277fe97dac61b154bb2b62042a"
        },
        "downloads": -1,
        "filename": "perfstat-0.0.2-py3-none-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "895515813155408b53b45a3cdf3d54f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8609,
        "upload_time": "2022-06-28T09:04:19",
        "upload_time_iso_8601": "2022-06-28T09:04:19.240900Z",
        "url": "https://files.pythonhosted.org/packages/b2/14/65093c37b6783a21d4615485f82be7a53046184065c0b64785c85bf79ac7/perfstat-0.0.2-py3-none-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b21465093c37b6783a21d4615485f82be7a53046184065c0b64785c85bf79ac7",
        "md5": "895515813155408b53b45a3cdf3d54f2",
        "sha256": "1be3fd3f739d021da6138b9d81d9c275531883277fe97dac61b154bb2b62042a"
      },
      "downloads": -1,
      "filename": "perfstat-0.0.2-py3-none-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "895515813155408b53b45a3cdf3d54f2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8609,
      "upload_time": "2022-06-28T09:04:19",
      "upload_time_iso_8601": "2022-06-28T09:04:19.240900Z",
      "url": "https://files.pythonhosted.org/packages/b2/14/65093c37b6783a21d4615485f82be7a53046184065c0b64785c85bf79ac7/perfstat-0.0.2-py3-none-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}