{
  "info": {
    "author": "Leonard Vorbeck",
    "author_email": "leomxyy@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# OSMEvolution 1.0 (stable)  🌍 📈\n\n[![Downloads](https://pepy.tech/badge/osmevolution)](https://pepy.tech/project/osmevolution)\n\nA package for receiving and restructuring OSM historic object time series data conveniently. Works for arbitrary OSM objects and all cities.\n\n\n## Installation\n\nInstall directly from source \n```bash\n$ python -m pip install git+https://github.com/le0x99/OSMEvolution\n```\n\n## Usage\n\n```python3\nfrom OSMEvolution.collect import DataCollector\n\n# Initialize the data collector for the desired city.\n\n>>> collector = DataCollector(city=\"Berlin\")  \n```\n\n\n#### Retrieve static data of the objects of interest (OOI).\nThe object is defined by\n1. its object type (according to the OSM spatial data model).\n2. its object properties, i.e. \"tags\".\n      \nAs an example, we request the data for restaurants in Berlin, whose \"amenity\"-key was valued as \"restaurant\".\n\n```python3\n>>> collector.get_objects(object_type=\"node\", properties=[\"amenity=restaurant\"])\n```\n\n- More granular queries can be done by adding properties to the properties list. For example, adding ```\"cuisine=italian\" ``` yields italian restaurants.\n\nThe descriptive (static) data of the objects of interest can now be accessed.\nThe static data is a pandas DataFrame object.\n\n```python3\n>>> static_data = collector.data.get(\"static\").copy()\n>>> static_data.head()\n\n         id  ...                  location\n0  26735749  ...   (52.506911, 13.3228214)\n1  26735759  ...  (52.5062119, 13.3180811)\n2  26735763  ...  (52.5073199, 13.3207804)\n3  29997724  ...  (52.5063184, 13.2846256)\n4  30020303  ...  (52.4907103, 13.3939814)\n```\n\nNow the historic data of the selected objects are requested, aggregated and restructured.\nTo construct a proper time series, we need to specify the frequency of the series, here we choose monthly data.\nNote that we query OSM in a gentle way, making the queries slow but safe.\n\n```python3\n>>> collector.build_timeseries(frequency=\"m\")     \n\nCollecting historic data: 100%|████████████| 4055/4055 [07:44<00:00,  5.30it/s]\nExtracting historic entries: 100%|█████████| 4010/4010 [00:14<00:00, 3931.60it/s]\n```\n\nThe historic data and all other data that was produced during restructuring can be accessed via\n\n```python3\n>>> collector.data.keys()\n\ndict_keys(['static_raw', 'static', 'raw_history', 'historic_entries', 'timeseries'])\n```\nAccessing the actual timeseries.\n```python3\n>>> timeseries = collector.data.get(\"timeseries\").copy()\n>>> timeseries\n\n            create  delete  modify  ...  loc_change  new_mapper  activity\n2007-03-31       3       0       0  ...           0           1         3\n2007-04-30       0       0       0  ...           0           0         0\n2007-05-31       0       0       0  ...           0           0         0\n2007-06-30       2       0       0  ...           0           1         2\n2007-07-31       0       0       0  ...           0           0         0\n           ...     ...     ...  ...         ...         ...       ...\n2020-01-31       9       0     124  ...          22          16       133\n2020-02-29      14       1     121  ...          27          10       137\n2020-03-31      28       0     183  ...          47          13       211\n2020-04-30       6       0     116  ...          22          16       122\n2020-05-31       1       0      39  ...           4           9        40\n\n[159 rows x 10 columns]\n\n```\nObtaining summary statistics\n\n```python3\n\n>>> timeseries.describe()\n\n           create      delete       modify  ...  loc_change  new_mapper     activity\ncount  159.000000  159.000000   159.000000  ...  159.000000  159.000000   159.000000\nmean    25.220126    0.163522   136.823899  ...   26.716981   14.842767   162.371069\nstd     13.986724    0.583249   166.205513  ...   17.304471    8.318452   170.133140\nmin      0.000000    0.000000     0.000000  ...    0.000000    0.000000     0.000000\n25%     16.000000    0.000000    69.000000  ...   16.500000    9.000000    98.000000\n50%     23.000000    0.000000   113.000000  ...   24.000000   14.000000   141.000000\n75%     32.500000    0.000000   156.500000  ...   34.500000   20.000000   184.000000\nmax     67.000000    5.000000  1690.000000  ...  127.000000   37.000000  1747.000000\n\n```\nPlotting, as usual using pandas.DataFrame methods.\nLooking at all timeseries'\n```python3\n>>> timeseries.plot(grid=True, title=\"monthly development\", ylim=(0, 1000))\n```\n\n![image.png](1.PNG)\n\nObject Evolution (created objects)\n```python3\n\n>>> timeseries[\"create\"].plot(grid=True, title=\"Created Objects per month\")\n>>> timeseries[\"create\"].cumsum().plot(grid=True, secondary_y=True)\n```\n\n![image.png](2.PNG)\n\nDelta distribution for the two major variables, create and modify\n\n```python3\n>>> timeseries[[\"create\", \"modify\"]].diff().hist(bins=15)\n```\n![image.png](3.png)\n\n## Further Examples\n\n#### Schools of New York\n\n```python3\n\nfrom OSMEvolution.collect import DataCollector\n\n>>> collector = DataCollector(city=\"New York\")\n\n>>> collector.get_objects(object_type=\"node\", properties=[\"amenity=school\"])\n\n>>> collector.build_timeseries(frequency=\"m\")\n\n```\n\n## How it works\n\n![image.png](44.PNG)\n\n## To Do and future work\n\n- buildin Forecasting methods\n- option to impute outliers\n- MultiObject requests\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/le0x99/OSMEvolution/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "OSMEvolution",
    "package_url": "https://pypi.org/project/OSMEvolution/",
    "platform": null,
    "project_url": "https://pypi.org/project/OSMEvolution/",
    "project_urls": {
      "Homepage": "https://github.com/le0x99/OSMEvolution/"
    },
    "release_url": "https://pypi.org/project/OSMEvolution/1.0/",
    "requires_dist": [
      "pandas (>=0.24.2)",
      "requests (>=2.22.0)",
      "tqdm (>=4.35.0)",
      "osmapi (>=1.2.2)"
    ],
    "requires_python": "",
    "summary": "A package for receiving and restructuring OSM historic data conveniently",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13762404,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1bf9cd1beac423657d2307530fdf36f5f92123815f105224d8f4bc56203c1e5",
          "md5": "da11b1a66990dcfc2de6547871535390",
          "sha256": "4e0fabb5e1f33f61e784a3385c924c94c4584796584fc6e7f03126a81df160e8"
        },
        "downloads": -1,
        "filename": "OSMEvolution-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da11b1a66990dcfc2de6547871535390",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4939,
        "upload_time": "2020-05-12T13:32:51",
        "upload_time_iso_8601": "2020-05-12T13:32:51.180231Z",
        "url": "https://files.pythonhosted.org/packages/b1/bf/9cd1beac423657d2307530fdf36f5f92123815f105224d8f4bc56203c1e5/OSMEvolution-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "908cbbb6688b6e376c6d37fab24b1d74d874c4db9b5e7937fa671f7f730513d3",
          "md5": "0a211786c6ca9b05c5e4ec1c8bd5f2a3",
          "sha256": "231d6d52a3334d0175ef55f72abd7e0a4515f0958286aff51691b0f7428e8389"
        },
        "downloads": -1,
        "filename": "OSMEvolution-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a211786c6ca9b05c5e4ec1c8bd5f2a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3192,
        "upload_time": "2020-05-12T13:32:53",
        "upload_time_iso_8601": "2020-05-12T13:32:53.104973Z",
        "url": "https://files.pythonhosted.org/packages/90/8c/bbb6688b6e376c6d37fab24b1d74d874c4db9b5e7937fa671f7f730513d3/OSMEvolution-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfae03a314a70a998191f5c736e87cde4034db3e219644202ab2455280e9a3a1",
          "md5": "98cce4e2cb8fee9c8f46d59762ce97b8",
          "sha256": "06c9f0896205fd249da7287b776a1d9977e34cabc9a9f466b4c06bb36cfa3560"
        },
        "downloads": -1,
        "filename": "OSMEvolution-1.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "98cce4e2cb8fee9c8f46d59762ce97b8",
        "packagetype": "bdist_egg",
        "python_version": "1.0",
        "requires_python": null,
        "size": 11351,
        "upload_time": "2022-05-09T19:23:11",
        "upload_time_iso_8601": "2022-05-09T19:23:11.485865Z",
        "url": "https://files.pythonhosted.org/packages/df/ae/03a314a70a998191f5c736e87cde4034db3e219644202ab2455280e9a3a1/OSMEvolution-1.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd68f684c89c53ee88e14e9ed16c691da778307867437601955cccfee9a1dc3c",
          "md5": "2f950a546ce4e32e2e77bf740295334b",
          "sha256": "732f0122ec1dd03bf4471fb19963d9cbcbe03635f0f1bd90e3a9e2372090ab76"
        },
        "downloads": -1,
        "filename": "OSMEvolution-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f950a546ce4e32e2e77bf740295334b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7682,
        "upload_time": "2022-05-09T19:23:09",
        "upload_time_iso_8601": "2022-05-09T19:23:09.511225Z",
        "url": "https://files.pythonhosted.org/packages/fd/68/f684c89c53ee88e14e9ed16c691da778307867437601955cccfee9a1dc3c/OSMEvolution-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ee987110970106828f7e48361d0ed36ef6f65b4926d76f014c997ea8b42dd34",
          "md5": "de61dd83b0838bbdf7a16694d81265b1",
          "sha256": "e517f04a38c9cee8d5cd41581e2cd50a848965eef31847683b626a46c996594d"
        },
        "downloads": -1,
        "filename": "OSMEvolution-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de61dd83b0838bbdf7a16694d81265b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6812,
        "upload_time": "2022-05-09T19:23:13",
        "upload_time_iso_8601": "2022-05-09T19:23:13.325734Z",
        "url": "https://files.pythonhosted.org/packages/7e/e9/87110970106828f7e48361d0ed36ef6f65b4926d76f014c997ea8b42dd34/OSMEvolution-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfae03a314a70a998191f5c736e87cde4034db3e219644202ab2455280e9a3a1",
        "md5": "98cce4e2cb8fee9c8f46d59762ce97b8",
        "sha256": "06c9f0896205fd249da7287b776a1d9977e34cabc9a9f466b4c06bb36cfa3560"
      },
      "downloads": -1,
      "filename": "OSMEvolution-1.0-py3.9.egg",
      "has_sig": false,
      "md5_digest": "98cce4e2cb8fee9c8f46d59762ce97b8",
      "packagetype": "bdist_egg",
      "python_version": "1.0",
      "requires_python": null,
      "size": 11351,
      "upload_time": "2022-05-09T19:23:11",
      "upload_time_iso_8601": "2022-05-09T19:23:11.485865Z",
      "url": "https://files.pythonhosted.org/packages/df/ae/03a314a70a998191f5c736e87cde4034db3e219644202ab2455280e9a3a1/OSMEvolution-1.0-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd68f684c89c53ee88e14e9ed16c691da778307867437601955cccfee9a1dc3c",
        "md5": "2f950a546ce4e32e2e77bf740295334b",
        "sha256": "732f0122ec1dd03bf4471fb19963d9cbcbe03635f0f1bd90e3a9e2372090ab76"
      },
      "downloads": -1,
      "filename": "OSMEvolution-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2f950a546ce4e32e2e77bf740295334b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7682,
      "upload_time": "2022-05-09T19:23:09",
      "upload_time_iso_8601": "2022-05-09T19:23:09.511225Z",
      "url": "https://files.pythonhosted.org/packages/fd/68/f684c89c53ee88e14e9ed16c691da778307867437601955cccfee9a1dc3c/OSMEvolution-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ee987110970106828f7e48361d0ed36ef6f65b4926d76f014c997ea8b42dd34",
        "md5": "de61dd83b0838bbdf7a16694d81265b1",
        "sha256": "e517f04a38c9cee8d5cd41581e2cd50a848965eef31847683b626a46c996594d"
      },
      "downloads": -1,
      "filename": "OSMEvolution-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "de61dd83b0838bbdf7a16694d81265b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6812,
      "upload_time": "2022-05-09T19:23:13",
      "upload_time_iso_8601": "2022-05-09T19:23:13.325734Z",
      "url": "https://files.pythonhosted.org/packages/7e/e9/87110970106828f7e48361d0ed36ef6f65b4926d76f014c997ea8b42dd34/OSMEvolution-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}