{
  "info": {
    "author": "Sam",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![PyPI - License](https://img.shields.io/pypi/l/pyfiletree?style=plastic)\n![PyPI](https://img.shields.io/pypi/v/pyfiletree)\n\n# What and why\nThis library's creation was motivated by my deep thirst to automate everything.\n\nIt enables you to programmatically read, change and write python files.\n## Short explanation\nIn simple words, an `FTree` object stores the .py file in a tree-like format\nfor simpler use with Python's indentation levels.\n\nYou can append different other .py files to your main one and\nkeep/adapt the levels of indentation.\n\nThis allows you to automatically change/create new python files and\ntransform them to your needs.\n\nThe root of this tree is the file name, with an indentation level of `-1`\nand is ignored in most of the transform/write/equality operations.\n\nChildren of root and other nodes are determined based of their level of indentation,\ntaken as a multiple of 4. (even blank line are treated as children)\n\n# Installation\nInstall using pip package manager\n\n```bash\npip install pyfiletree\n```\n\n# Usage\n#### Example 1\nSimple, but useless use of this library\n```python\nfrom pyfiletree.ftree import FTree\n\nfile = FTree(read_file_path)\nfile.write_to(write_file_path)\n```\n\n#### Example 2\nUsing the transformer parameter to change every line of the input file\n```python\nfrom pyfiletree.ftree import FTree\n\ntransformer = [\n    lambda x: x.replace(\" \", \"_\"),\n    lambda x: x.replace(\"self.\", \"MyClass.\"),\n    lambda x: x.lower(),\n]\nfile = FTree(read_file_path, transformer)\nfile.apply_transformer()\nfile.write_to(write_file_path)\n```\n\n#### Example 3\nConcatenating two python files.\n\nHere you have the option to append the second file at a certain line\nusing the `line` parameter of the `append` method.\n\nThis way of appending keeps the existing level of indentation intact.\n\n```python\nfrom pyfiletree.ftree import FTree\n\nfile = FTree(read_file_path)\nfile_to_append = FTree(append_file_path)\nfile.append(file_to_append, line=3)\nfile.write_to(write_file_path)\n```\n\n# How it works\n## FTree parameters\n#### `file_path`\nFile from which to read and create the code tree. \nYou have to ensure this is a `.py` file. For now, no restrictions are applied\nto the file type.\n\n#### `transformer`\nThis is the end goal I had in mind when developing this library.\nBased on this parameter, your file will change.\n\nThe `transformer` parameter takes a list of functions, i.e.:\n\n```python\ntransformer = [\n    lambda x: x.replace(\"3\", \"4\"),\n    before_declared_func,\n    lambda y: y.lower()\n]\n\nf = FTree(file_path, transformer=transformer)\n```\n\nBoth named functions and lambda functions are allowed.\n\nIn order for these changes to take place, the `apply_transformer` method\nneeds to be called.\n\n```f.apply_transformer()```\n\n*New Feature*\n\nIf your function returns a tuple as `(None, Boolean)`, that node\n will be deleted from the file tree, i.e.\n\n```python\ntransformer = [\n    lambda x: (None, True) if \"def\" in x else x,\n    lambda x: None if \"return\" in x else x\n]\n```\nThe boolean value is optional(defaults to `True`) and signals\nif the node's children should be deleted too or not.\nIf `True` then the children are appended to node's father.\n\n\n***Restriction***: The functions provided apply to each **line** in the file, hence the functions need to expect only\none parameter(the line).\n\n*Observations*: \n- Functions are applied in their appearance order.\n\n##### Incoming features\n\n- Specify list of lines/ threshold line for where to apply the transformer\n\n#### `debug`\n\nThis boolean value influences what is printed by the `print_tree` method.\n\nWhen `True`, the logs will show:\n\n- level of indentation\n- father node\n\n\n#### `test`\n\nThe same as `debug`, but it only shows the value of each node, without indent.\n\n\n## FTree methods\n\n#### `print_tree()`\nPrints tree to console, formatting is dependent on `debug` and `test` values.\n\n#### `get_node_by_line(line)`\n\nReturns the node at the line provided.\n\nIf no such node/line exists, an exception will be raised.\n\n\n#### `write_to(path, mode='a+', apply_transformer=False)`\nMethod to write the current tree to a said file path.\n\n- `path` is not restricted to only .py files **yet**, you have to handle this\n- `mode` -> mode in which the file is opened, default is to append\n- `apply_transformer` -> Boolean to apply the transformer before writing.\nConvenient to skip additional call to `apply_transformer()`\n\n#### `append(obj, line=-1, transformer=None)`\n\nUsing this method you can append another file to a certain line.\n\n- `line` is by default `-1` which appends at the end of file, under the root parent\n- When `line` is specified, `obj` will be appended at said line,\nbut under the parent of the current node that is found at that line\n- `obj` can be either an FTree instance or a file path to a .py(in which case\nan FTree object will automatically be created)\n- `transformer` -> transformer to be applied only to the appended file.\nThis function list is not appended to the existing `transformer`\n\n##### Example\n\nFile to append to -> path: `\"usr/file1\"`\n```python\nimport os  # line 1\n# line 2\ndef func():  # line 3\n    x = 1  # line 4\n    y = 0  # line 5\n    if x == 1:  # line 6\n        y = x + 2  # line 7\n    return x + y  # line 8\n```\n\nFile to be appended -> path: `\"usr/file2\"`\n```python\ny = 1\n```\n\nFTree code:\n```python\nfrom pyfiletree import FTree\n\nmain_file = FTree(\"usr/file1\")\nmain_file.append(\"usr/file2\", line=6)\nmain_file.write_to(\"usr/file3\")\n```\n\nThis example attempts to append `file2` at line 6, \nthis leads to `y = 1` getting assigned as the children\nof the father node of `if x == 1:`, which currently is at line 6.\nFather node being `def func():`\n\nFile after append -> path: `\"usr/file3\"`\n```python\nimport os  # line 1\n# line 2\ndef func():  # line 3\n    x = 1  # line 4\n    y = 0  # line 5\n    y = 1  # <- new line appended\n    if x == 1:  # line 7\n        y = x + 2  # line 8\n    return x + y  # line 9\n```\n\n##### Incoming features:\n\n- Append just a node\n- `apply_transformer=False` boolean to apply the current transformer to\njust the appended tree\n\n\n#### `apply_transformer()`\nApplies the functions in the `transformer` parameter to each line\nin the tree.\n\n\n#### `set_transformer(new_transformer)`\n`new_transformer` is **appended** to the existing `transformer`, if it\nexists, else acts like a basic setter.\n\n\n## Node class\nYou wouldn't want to use this class, since FTree does all the heavy\nlifting for you. \nBut I will add documentation for this as well later.\n\n\n# Contributing\nContributions are most welcome!!\n\nIf you want to change/implement something new, please \ncreate an issue first so we can talk about it!\n\n## Testing\nYou need to have `pytest==4.4.1` to run the tests in `tests/test_ftree.py`\n\nNavigate to root directory of the project and run with `pytest -vv` \nto get detailed result of each test.\n\nIf you implement a new feature, please write comprehensive tests for it.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfiletree",
    "package_url": "https://pypi.org/project/pyfiletree/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyfiletree/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyfiletree/0.1.6/",
    "requires_dist": [
      "pytest (>=4.4.1) ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Read/Write python files",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10511758,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79b87e417c17781e46028a05ce102d116be353facb88b640342e7c49e2f07156",
          "md5": "48a082994956755a32780224bc173082",
          "sha256": "7c035915b569d4930430c8026a5a3c4bf903724c59f662cb771d053f79dc5222"
        },
        "downloads": -1,
        "filename": "pyfiletree-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48a082994956755a32780224bc173082",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3553,
        "upload_time": "2021-03-29T17:10:58",
        "upload_time_iso_8601": "2021-03-29T17:10:58.486879Z",
        "url": "https://files.pythonhosted.org/packages/79/b8/7e417c17781e46028a05ce102d116be353facb88b640342e7c49e2f07156/pyfiletree-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40b3a966cb7e4da8ee3357cb0e6167ecdf4b69f129c30e70e669691495ea6a59",
          "md5": "e768884a2f1b8338869cbab0b63775ce",
          "sha256": "4d0e16eb8239c4693e74bd53bfc27a3cc9f99e457a15fc97aacd48072162e059"
        },
        "downloads": -1,
        "filename": "pyfiletree-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e768884a2f1b8338869cbab0b63775ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2116,
        "upload_time": "2021-03-29T17:11:01",
        "upload_time_iso_8601": "2021-03-29T17:11:01.420173Z",
        "url": "https://files.pythonhosted.org/packages/40/b3/a966cb7e4da8ee3357cb0e6167ecdf4b69f129c30e70e669691495ea6a59/pyfiletree-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d789ecbd3699b4c7b74a61d83a69199e7bf527e7161c2b4f47fff35e651bf3e6",
          "md5": "b695abc49938b186c975f6aa45d99048",
          "sha256": "37308d23223963ddb80ea78c3caaa0b5d27d91718a68b9898d9d04f7585a32b4"
        },
        "downloads": -1,
        "filename": "pyfiletree-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b695abc49938b186c975f6aa45d99048",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1351,
        "upload_time": "2021-03-29T17:10:59",
        "upload_time_iso_8601": "2021-03-29T17:10:59.998845Z",
        "url": "https://files.pythonhosted.org/packages/d7/89/ecbd3699b4c7b74a61d83a69199e7bf527e7161c2b4f47fff35e651bf3e6/pyfiletree-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3f165d18120b70b3c9ceefcfe507af508c3ba1d9e8a78232ee79a0356db6613",
          "md5": "79c7ba88cd73b206b36d3f75dcf42a4d",
          "sha256": "7cff27ef2ad361e5826c42de843cf9685693fb3791d0f77061039dcb07a96db1"
        },
        "downloads": -1,
        "filename": "pyfiletree-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79c7ba88cd73b206b36d3f75dcf42a4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5466,
        "upload_time": "2021-05-21T18:14:19",
        "upload_time_iso_8601": "2021-05-21T18:14:19.510833Z",
        "url": "https://files.pythonhosted.org/packages/b3/f1/65d18120b70b3c9ceefcfe507af508c3ba1d9e8a78232ee79a0356db6613/pyfiletree-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f4231f1b4fce05cc66bd1cd3e176f2f93a3ff685a7b9ab0bc3dc60711fed8f2",
          "md5": "2e502a34df616c01e9256ed3d0160261",
          "sha256": "3fe7b8dc71f52a67ec068ce2581306d81f1a62d8358c912eb867d55fa01cecf4"
        },
        "downloads": -1,
        "filename": "pyfiletree-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e502a34df616c01e9256ed3d0160261",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7971,
        "upload_time": "2021-05-22T11:36:44",
        "upload_time_iso_8601": "2021-05-22T11:36:44.057264Z",
        "url": "https://files.pythonhosted.org/packages/7f/42/31f1b4fce05cc66bd1cd3e176f2f93a3ff685a7b9ab0bc3dc60711fed8f2/pyfiletree-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4451a8aacb027bd98da29a24e0e5dac3cabbfde0d0aa5403aaac9fcd907a109",
          "md5": "0016da211d161682e4557c1c459e1a51",
          "sha256": "aa668abc90426b73b361c3c55dca6f5cb029c9f56625169b1d5658c0458bb380"
        },
        "downloads": -1,
        "filename": "pyfiletree-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0016da211d161682e4557c1c459e1a51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8536,
        "upload_time": "2021-05-28T21:45:54",
        "upload_time_iso_8601": "2021-05-28T21:45:54.438784Z",
        "url": "https://files.pythonhosted.org/packages/d4/45/1a8aacb027bd98da29a24e0e5dac3cabbfde0d0aa5403aaac9fcd907a109/pyfiletree-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6dce19243489358b3598145b4202850dd02c9f28bba8bf715d7b6c1b05d0c1b",
          "md5": "1ef8a3d97a1260d6bfdda2e3cf4a4d17",
          "sha256": "d6fefe18b781da4d4e6e44e08e322eb6f3d539e5578f051cf7e8f5319cb6a497"
        },
        "downloads": -1,
        "filename": "pyfiletree-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ef8a3d97a1260d6bfdda2e3cf4a4d17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8635,
        "upload_time": "2021-05-30T12:43:35",
        "upload_time_iso_8601": "2021-05-30T12:43:35.468083Z",
        "url": "https://files.pythonhosted.org/packages/a6/dc/e19243489358b3598145b4202850dd02c9f28bba8bf715d7b6c1b05d0c1b/pyfiletree-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "329e47c3243cf6f6643830588000edad249ba1e28edaf9ef219b261217934fda",
          "md5": "5fb6b26c254de8efad0d74b8833ca2fb",
          "sha256": "c08db20f15b4fe5e673c47dcbb9e27344da9354c19e8ecb7c9cb9d327c9cc57c"
        },
        "downloads": -1,
        "filename": "pyfiletree-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fb6b26c254de8efad0d74b8833ca2fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8704,
        "upload_time": "2021-05-30T14:30:12",
        "upload_time_iso_8601": "2021-05-30T14:30:12.037433Z",
        "url": "https://files.pythonhosted.org/packages/32/9e/47c3243cf6f6643830588000edad249ba1e28edaf9ef219b261217934fda/pyfiletree-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "329e47c3243cf6f6643830588000edad249ba1e28edaf9ef219b261217934fda",
        "md5": "5fb6b26c254de8efad0d74b8833ca2fb",
        "sha256": "c08db20f15b4fe5e673c47dcbb9e27344da9354c19e8ecb7c9cb9d327c9cc57c"
      },
      "downloads": -1,
      "filename": "pyfiletree-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5fb6b26c254de8efad0d74b8833ca2fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8704,
      "upload_time": "2021-05-30T14:30:12",
      "upload_time_iso_8601": "2021-05-30T14:30:12.037433Z",
      "url": "https://files.pythonhosted.org/packages/32/9e/47c3243cf6f6643830588000edad249ba1e28edaf9ef219b261217934fda/pyfiletree-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}