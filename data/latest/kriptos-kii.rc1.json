{
  "info": {
    "author": "Nelson Garzón",
    "author_email": "ngarzon@kriptos.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "## Kriptos Insight Ingestion Client\n\nEsta librería fue creada para utilizar el servicio de ingestión \nde insights de Kriptos.  El servicio recibe mensajes provenientes de\naplicaciones del ecosistema Kriptos que contienen información para\nser procesada (parsing), evaluada y distribuida según su naturaleza.\n\n### Modo de uso\n\nPara configurar el cliente *kii* instale la dependencia \ncorrespondiente usando el administrador de paquetes *pip*:\n\n```\npython3 -m pip install kriptos-kii \n```\n\nLuego, importe la librería de la siguiente manera:\n\n#### Asynchronously\n```\nfrom kii.domain.schemas.payloads import Log\nfrom kii.domain.schemas import Insight, InsightType\nfrom kii.asyn import Client as AioClient \n```\n\n#### Synchronously\n```\nfrom kii.domain.schemas.payloads import Log\nfrom kii.domain.schemas import Insight, InsightType\nfrom kii.syn import Client \n```\n\nLa primera línea importará la clase Log que podrá utilizar para construir\nsu payload.  Log es un tipo de payload, pero podrá encontrar más tipos \ndisponibles en el módulo **kii.domain.schemas.payloads**.\n\nPara construir un Insight de tipo Log, usted necesitará dos datos: el \nnivel (\"info\", \"warning\", \"error\") y el mensaje.\n\nLa segunda línea del anterior fragmento de código corresponde a la \nimportación de la clase Insight e Insight Type.  La primera es el objeto\nque enviaremos al servicio de ingestión.  La segunda, es una enumeración\nque define el tipo de insight con el que estamos trabajando.  \nEn este caso, trabajaremos con un insight de tipo log.\n\nEl siguiente ejemplo muestra la implementación de la librería *kii* en una\nfunción main:\n\n#### Asynchronously\n```\nasync def main():\n    log = Log(\"info\", \"Insight test message!\")\n    insight = Insight(\"7d2d1990-e733-44d2-a092-edec1cf3e2df\", InsightType.LOG, log)\n\n    client = await AioClient(api_key=\"23er231-2333!ss\").connect()\n    result = await client.write(insight)\n    print(result)\n```\n\n#### Synchronously\n```\ndef main():\n    log = Log(\"info\", \"Insight test message!\")\n    insight = Insight(\"4d231990-e389-92j3-h904-eujs4lk2f7ow\", InsightType.LOG, log)\n\n    client = Client(api_key=\"23er231-2333!ss\").connect()\n    result = client.write(insight)\n    print(result)\n```\n\nEl log es de nivel *info*, y tiene su correspondiente mensaje de prueba.  \nLuego, parametrizando el *Id de la empresa* a la que pertenece el insight,\nel tipo de insight (una opción de la enumeración) y el objeto payload \n(objeto log).\n\nLuego, haciendo una instancia del cliente, debemos parametrizar la API Key\nconexión.  Inmediatamente ejecutamos la función *connect* que nos permitirá \nabrir un canal de comunicación persistente con el servicio.\n\nFinalmente, se escribe el insight enviándolo al servicio de ingestión.\nEsta última operación devuelve un objeto donde se define el estado del\nproceso, si fue exitoso y el mensaje de error en caso de haberse presentado\nalgún problema en la comunicación con el servicio.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/kr-classifier-context/insight-ingestion-client-lib/src",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kriptos-kii",
    "package_url": "https://pypi.org/project/kriptos-kii/",
    "platform": null,
    "project_url": "https://pypi.org/project/kriptos-kii/",
    "project_urls": {
      "Bug Tracker": "https://kriptosteam.atlassian.net/jira/software/c/projects/KDT/boards/48/backlog?selectedIssue=ISS-316&epics=visible&issueLimit=100&selectedEpic=KDT-73",
      "Homepage": "https://bitbucket.org/kr-classifier-context/insight-ingestion-client-lib/src"
    },
    "release_url": "https://pypi.org/project/kriptos-kii/0.1.0/",
    "requires_dist": [
      "aiohttp (==3.8.1)",
      "requests (==2.27.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "Client for Kriptos Insight Ingestion API",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13325173,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f81fcd436112a68e27a52389529138a6f4114ff7369b98befa7a29ca4d33483d",
          "md5": "308c5ca9dcdfb302bd1dc630ef6820b0",
          "sha256": "473288606374d85b135cd06ca9bc31d56e81d4462062c113a5d6440971fe3b02"
        },
        "downloads": -1,
        "filename": "kriptos_kii-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "308c5ca9dcdfb302bd1dc630ef6820b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9453,
        "upload_time": "2022-03-28T18:34:21",
        "upload_time_iso_8601": "2022-03-28T18:34:21.576575Z",
        "url": "https://files.pythonhosted.org/packages/f8/1f/cd436112a68e27a52389529138a6f4114ff7369b98befa7a29ca4d33483d/kriptos_kii-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0459626eb75ff44a1cc73f1aa6282e08dd66a267affeb0957ffaaa598b5b28fd",
          "md5": "9765f9933d7e309db6928a94a4191726",
          "sha256": "0904ac9596de91336a971312cfaeea7c209c002a8d9e35c3b314a206e9333bda"
        },
        "downloads": -1,
        "filename": "kriptos-kii-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9765f9933d7e309db6928a94a4191726",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5969,
        "upload_time": "2022-03-28T18:34:22",
        "upload_time_iso_8601": "2022-03-28T18:34:22.939837Z",
        "url": "https://files.pythonhosted.org/packages/04/59/626eb75ff44a1cc73f1aa6282e08dd66a267affeb0957ffaaa598b5b28fd/kriptos-kii-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f81fcd436112a68e27a52389529138a6f4114ff7369b98befa7a29ca4d33483d",
        "md5": "308c5ca9dcdfb302bd1dc630ef6820b0",
        "sha256": "473288606374d85b135cd06ca9bc31d56e81d4462062c113a5d6440971fe3b02"
      },
      "downloads": -1,
      "filename": "kriptos_kii-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "308c5ca9dcdfb302bd1dc630ef6820b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9453,
      "upload_time": "2022-03-28T18:34:21",
      "upload_time_iso_8601": "2022-03-28T18:34:21.576575Z",
      "url": "https://files.pythonhosted.org/packages/f8/1f/cd436112a68e27a52389529138a6f4114ff7369b98befa7a29ca4d33483d/kriptos_kii-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0459626eb75ff44a1cc73f1aa6282e08dd66a267affeb0957ffaaa598b5b28fd",
        "md5": "9765f9933d7e309db6928a94a4191726",
        "sha256": "0904ac9596de91336a971312cfaeea7c209c002a8d9e35c3b314a206e9333bda"
      },
      "downloads": -1,
      "filename": "kriptos-kii-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9765f9933d7e309db6928a94a4191726",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5969,
      "upload_time": "2022-03-28T18:34:22",
      "upload_time_iso_8601": "2022-03-28T18:34:22.939837Z",
      "url": "https://files.pythonhosted.org/packages/04/59/626eb75ff44a1cc73f1aa6282e08dd66a267affeb0957ffaaa598b5b28fd/kriptos-kii-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}