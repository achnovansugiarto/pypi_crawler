{
  "info": {
    "author": "CrayLabs, a Hewlett Packard Enterprise OSS Organization",
    "author_email": "craylabs@hpe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "\n\n<div align=\"center\">\n    <a href=\"https://github.com/CrayLabs/SmartSim\"><img src=\"https://raw.githubusercontent.com/CrayLabs/SmartSim/master/doc/images/SmartSim_Large.png\" width=\"90%\"><img></a>\n    <br />\n    <br />\n<div display=\"inline-block\">\n    <a href=\"https://github.com/CrayLabs/SmartSim\"><b>Home</b></a>&nbsp;&nbsp;&nbsp;\n    <a href=\"https://www.craylabs.org/docs/installation.html\"><b>Install</b></a>&nbsp;&nbsp;&nbsp;\n    <a href=\"https://www.craylabs.org/docs/overview.html\"><b>Documentation</b></a>&nbsp;&nbsp;&nbsp;\n    <a href=\"https://join.slack.com/t/craylabs/shared_invite/zt-nw3ag5z5-5PS4tIXBfufu1bIvvr71UA\"><b>Slack Invite</b></a>&nbsp;&nbsp;&nbsp;\n    <a href=\"https://github.com/CrayLabs\"><b>Cray Labs</b></a>&nbsp;&nbsp;&nbsp;\n  </div>\n    <br />\n    <br />\n</div>\n\n\n[![License](https://img.shields.io/github/license/CrayLabs/SmartSim)](https://github.com/CrayLabs/SmartSim/blob/master/LICENSE.md)\n![GitHub last commit](https://img.shields.io/github/last-commit/CrayLabs/SmartSim)\n![GitHub deployments](https://img.shields.io/github/deployments/CrayLabs/SmartSim/github-pages?label=doc%20build)\n![PyPI - Wheel](https://img.shields.io/pypi/wheel/smartsim)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/smartsim)\n![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/CrayLabs/SmartSim)\n![Language](https://img.shields.io/github/languages/top/CrayLabs/SmartSim)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![codecov](https://codecov.io/gh/CrayLabs/SmartSim/branch/develop/graph/badge.svg?token=96HFI2F45E)](https://codecov.io/gh/CrayLabs/SmartSim)\n[![Downloads](https://static.pepy.tech/personalized-badge/smartsim?period=total&units=international_system&left_color=grey&right_color=orange&left_text=Downloads)](https://pepy.tech/project/smartsim)\n\n------------\n\n# SmartSim\n\nSmartSim is made up of two parts\n  1. SmartSim Infrastructure Library (This repository)\n  2. [SmartRedis](https://github.com/CrayLabs/SmartRedis)\n\nThe two library components are designed to work together, but can also be used\nindependently.\n\n*SmartSim* is a workflow library that makes it easier to use common Machine Learning (ML)\nlibraries, like PyTorch and TensorFlow, in High Performance Computing (HPC) simulations\nand applications. SmartSim launches ML infrastructure on HPC systems alongside user\nworkloads.\n\n*SmartRedis* provides an API to connect HPC workloads, particularly (MPI + X) simulations,\nto the ML infrastructure, namely the The [Orchestrator database](https://www.craylabs.org/docs/orchestrator.html),\nlaunched by SmartSim.\n\nApplications integrated with the SmartRedis clients, written in Fortran, C, C++ and Python,\ncan send data to and remotely request SmartSim infrastructure to execute ML models and scripts\non GPU or CPU. The distributed Client-Server paradigm allows for data to be seamlessly\nexchanged between applications at runtime without the utilization of MPI.\n\n----------\n\n**Table of Contents**\n- [SmartSim](#smartsim)\n- [Quick Start](#quick-start)\n- [SmartSim Infrastructure Library](#smartsim-infrastructure-library)\n  - [Experiments](#experiments)\n    - [Hello World](#hello-world)\n    - [Hello World MPI](#hello-world-mpi)\n  - [Experiments on HPC Systems](#experiments-on-hpc-systems)\n    - [Interactive Launch Example](#interactive-launch-example)\n    - [Batch Launch Examples](#batch-launch-examples)\n- [Infrastructure Library Applications](#infrastructure-library-applications)\n  - [Redis + RedisAI](#redis--redisai)\n    - [Local Launch](#local-launch)\n    - [Interactive Launch](#interactive-launch)\n    - [Batch Launch](#batch-launch)\n  - [Ray](#ray)\n    - [Ray on HPC](#ray-on-hpc)\n- [SmartRedis](#smartredis)\n  - [Tensors](#tensors)\n  - [Datasets](#datasets)\n- [SmartSim + SmartRedis Tutorials](#smartsim--smartredis-tutorials)\n  - [Run the Tutorials](#run-the-tutorials)\n  - [Online Analysis](#online-analysis)\n      - [Lattice Boltzmann Simulation](#lattice-boltzmann-simulation)\n  - [Online Processing](#online-processing)\n    - [Singular Value Decomposition](#singular-value-decomposition)\n  - [Online Inference](#online-inference)\n    - [PyTorch CNN Example](#pytorch-cnn-example)\n- [Publications](#publications)\n- [Cite](#cite)\n  - [bibtex](#bibtex)\n\n----\n\n# Quick Start\n\n\nThe documentation has a number of tutorials that make it easy to get used to SmartSim locally\nbefore using it on your system. Each tutorial is a Jupyter notebook that can be run through the\n[SmartSim Tutorials docker image](https://github.com/orgs/CrayLabs/packages?repo_name=SmartSim)\nwhich will run a jupyter lab with the tutorials, SmartSim, and SmartRedis installed.\n\n```bash\ndocker pull ghcr.io/craylabs/smartsim-tutorials:v0.4.1\ndocker run -p 8888:8888 ghcr.io/craylabs/smartsim-tutorials:v0.4.1\n# click on link to open jupyter lab\n```\n\n# SmartSim Infrastructure Library\n\nThe Infrastructure Library (IL), the ``smartsim`` python package,\nfacilitates the launch of Machine Learning and simulation\nworkflows. The Python interface of the IL creates, configures, launches and monitors\napplications.\n\n## Experiments\n\nThe [Experiment](https://www.craylabs.org/docs/api/smartsim_api.html#experiment) object\nis the main interface of SmartSim. Through the [Experiment](https://www.craylabs.org/docs/api/smartsim_api.html#experiment)\nusers can create references to user applications called ``Models``.\n### Hello World\n\nBelow is a simple example of a workflow that uses the IL to launch hello world\nprogram using the local launcher which is designed for laptops and single nodes.\n\n```python\nfrom smartsim import Experiment\n\nexp = Experiment(\"simple\", launcher=\"local\")\n\nsettings = exp.create_run_settings(\"echo\", exe_args=\"Hello World\")\nmodel = exp.create_model(\"hello_world\", settings)\n\nexp.start(model, block=True)\nprint(exp.get_status(model))\n```\n\n### Hello World MPI\n\nThe [Experiment.create_run_settings](https://www.craylabs.org/docs/api/smartsim_api.html#smartsim.experiment.Experiment.create_run_settings) method returns a ``RunSettings`` object which\ndefines how a model is launched. There are many types of ``RunSettings`` [supported by\nSmartSim](https://www.craylabs.org/docs/api/smartsim_api.html#settings).\n\n - ``RunSettings``\n - ``MpirunSettings``\n - ``SrunSettings``\n - ``AprunSettings``\n - ``JsrunSettings``\n\nThe following example launches a hello world MPI program using the local launcher\nfor single compute node, workstations and laptops.\n\n```Python\nfrom smartsim import Experiment\n\nexp = Experiment(\"hello_world\", launcher=\"local\")\nmpi_settings = exp.create_run_settings(exe=\"echo\",\n                                       exe_args=\"Hello World!\",\n                                       run_command=\"mpirun\")\nmpi_settings.set_tasks(4)\n\nmpi_model = exp.create_model(\"hello_world\", mpi_settings)\n\nexp.start(mpi_model, block=True)\nprint(exp.get_status(model))\n```\n\nIf an argument of `run_command=\"auto\"` (the default) is passed to\n`Experiment.create_run_settings`, SmartSim will attempt to find a run command on the\nsystem with which it has a corresponding `RunSettings` class. If one can be found,\n`Experiment.create_run_settings` will instance and return an object of that type.\n\n\n-----------\n## Experiments on HPC Systems\n\nSmartSim integrates with common HPC schedulers providing batch and interactive\nlaunch capabilities for all applications.\n\n - Slurm\n - LSF\n - PBSPro\n - Cobalt\n - Local (for laptops/single node, no batch)\n\n\n### Interactive Launch Example\n\nThe following launches the same ``hello_world`` model in an interactive allocation.\n\n```bash\n# get interactive allocation (Slurm)\nsalloc -N 3 --ntasks-per-node=20 --ntasks 60 --exclusive -t 00:10:00\n\n# get interactive allocation (PBS)\nqsub -l select=3:ncpus=20 -l walltime=00:10:00 -l place=scatter -I -q <queue>\n\n# get interactive allocation (LSF)\nbsub -Is -W 00:10 -nnodes 3 -P <project> $SHELL\n```\n\nThis same script will run on a SLURM, PBS, LSF, or Cobalt system as the ``launcher``\nis set to `auto` in the [Experiment](https://www.craylabs.org/docs/api/smartsim_api.html#experiment)\ninitialization. The run command like ``mpirun``,\n``aprun`` or ``srun`` will be automatically detected from what is available on the\nsystem.\n\n```python\n# hello_world.py\nfrom smartsim import Experiment\n\nexp = Experiment(\"hello_world_exp\", launcher=\"auto\")\nrun = exp.create_run_settings(exe=\"echo\", exe_args=\"Hello World!\")\nrun.set_tasks(60)\nrun.set_tasks_per_node(20)\n\nmodel = exp.create_model(\"hello_world\", run)\nexp.start(model, block=True, summary=True)\n\nprint(exp.get_status(model))\n```\n```bash\n# in interactive terminal\npython hello_world.py\n```\n\n\nThis script could also be launched in a batch file instead of an\ninteractive terminal. For example, for Slurm:\n\n```bash\n#!/bin/bash\n#SBATCH --exclusive\n#SBATCH --nodes=3\n#SBATCH --ntasks-per-node=20\n#SBATCH --time=00:10:00\n\npython /path/to/hello_world.py\n```\n```bash\n# on Slurm system\nsbatch run_hello_world.sh\n```\n\n\n### Batch Launch Examples\n\nSmartSim can also launch workloads in a batch directly from Python, without the need\nfor a batch script. Users can launch groups of ``Model`` instances in a ``Ensemble``.\n\nThe following launches 4 replicas of the the same ``hello_world`` model.\n\n```python\n# hello_ensemble.py\nfrom smartsim import Experiment\n\nexp = Experiment(\"hello_world_batch\", launcher=\"auto\")\n\n# define resources for all ensemble members\nbatch = exp.create_batch_settings(nodes=4, time=\"00:10:00\", account=\"12345-Cray\")\nbatch.set_queue(\"premium\")\n\n# define how each member should run\nrun = exp.create_run_settings(exe=\"echo\", exe_args=\"Hello World!\")\nrun.set_tasks(60)\nrun.set_tasks_per_node(20)\n\nensemble = exp.create_ensemble(\"hello_world\",\n                               batch_settings=batch,\n                               run_settings=run,\n                               replicas=4)\nexp.start(ensemble, block=True, summary=True)\n\nprint(exp.get_status(ensemble))\n```\n\n```bash\npython hello_ensemble.py\n```\n\nSimilar to the interactive example, this same script will run on a SLURM, PBS, LSF,\nor Cobalt system as the ``launcher`` is set to `auto` in the\n[Experiment](https://www.craylabs.org/docs/api/smartsim_api.html#experiment)\ninitialization. Local launching does not support batch workloads.\n\n\n--------\n\n# Infrastructure Library Applications\n - Orchestrator - In-memory data store and Machine Learning Inference (Redis + RedisAI)\n - Ray - Distributed Reinforcement Learning (RL), Hyperparameter Optimization (HPO)\n\n## Redis + RedisAI\n\nThe ``Orchestrator`` is an in-memory database that utilizes Redis and RedisAI to provide\na distributed database and access to ML runtimes from Fortran, C, C++ and Python.\n\nSmartSim provides classes that make it simple to launch the database in many\nconfigurations and optionally form a distributed database cluster. The examples\nbelow will show how to launch the database. Later in this document we will show\nhow to use the database to perform ML inference and processing.\n\n\n### Local Launch\n\nThe following script launches a single database using the local launcher.\n\n[Experiment.create_database](https://www.craylabs.org/docs/api/smartsim_api.html#smartsim.experiment.Experiment.create_database)\nwill initialize an ``Orchestrator`` instance corresponding to the specified launcher.\n\n```python\n# run_db_local.py\nfrom smartsim import Experiment\n\nexp = Experiment(\"local-db\", launcher=\"local\")\ndb = exp.create_database(port=6780,       # database port\n                         interface=\"lo\")  # network interface to use\n\n# by default, SmartSim never blocks execution after the database is launched.\nexp.start(db)\n\n# launch models, analysis, training, inference sessions, etc\n# that communicate with the database using the SmartRedis clients\n\n# stop the database\nexp.stop(db)\n```\n\n### Interactive Launch\n\nThe ``Orchestrator``, like ``Ensemble`` instances, can be launched locally, in interactive\nallocations, or in a batch.\n\nThe following example launches a distributed (3 node) database cluster\nin an interactive allocation.\n\n\n```bash\n# get interactive allocation (Slurm)\nsalloc -N 3 --ntasks-per-node=1 --exclusive -t 00:10:00\n\n# get interactive allocation (PBS)\nqsub -l select=3:ncpus=1 -l walltime=00:10:00 -l place=scatter -I -q queue\n\n# get interactive allocation (LSF)\nbsub -Is -W 00:10 -nnodes 3 -P project $SHELL\n\n```\n\n```python\n# run_db.py\nfrom smartsim import Experiment\n\n# auto specified to work across launcher types\nexp = Experiment(\"db-on-slurm\", launcher=\"auto\")\ndb_cluster = exp.create_database(db_nodes=3,\n                                 db_port=6780,\n                                 batch=False,\n                                 interface=\"ipogif0\")\nexp.start(db_cluster)\n\nprint(f\"Orchestrator launched on nodes: {db_cluster.hosts}\")\n# launch models, analysis, training, inference sessions, etc\n# that communicate with the database using the SmartRedis clients\n\nexp.stop(db_cluster)\n```\n```bash\n# in interactive terminal\npython run_db.py\n```\n\n### Batch Launch\n\nThe ``Orchestrator`` can also be launched in a batch without the need for an interactive allocation.\nSmartSim will create the batch file, submit it to the batch system, and then wait for the database\nto be launched. Users can hit CTRL-C to cancel the launch if needed.\n\n```Python\n# run_db_batch.py\nfrom smartsim import Experiment\n\nexp = Experiment(\"batch-db-on-pbs\", launcher=\"auto\")\ndb_cluster = exp.create_database(db_nodes=3,\n                                 db_port=6780,\n                                 batch=True,\n                                 time=\"00:10:00\",\n                                 interface=\"ib0\",\n                                 account=\"12345-Cray\",\n                                 queue=\"cl40\")\n\nexp.start(db_cluster)\n\nprint(f\"Orchestrator launched on nodes: {db_cluster.hosts}\")\n# launch models, analysis, training, inference sessions, etc\n# that communicate with the database using the SmartRedis clients\n\nexp.stop(db_cluster)\n```\n\n```bash\npython run_db_batch.py\n```\n\n-----\n## Ray\n\nRay is a distributed computation framework that supports a number of applications\n - RLlib - Distributed Reinforcement Learning (RL)\n - RaySGD - Distributed Training\n - Ray Tune - Hyperparameter Optimization (HPO)\n - Ray Serve - ML/DL inference\nAs well as other integrations with frameworks like Modin, Mars, Dask, and Spark.\n\nHistorically, Ray has not been well supported on HPC systems. A few examples exist,\nbut none are well maintained. Because SmartSim already has launchers for HPC systems,\nlaunching Ray through SmartSim is a relatively simple task.\n\n### Ray on HPC\n\nBelow is an example of how to launch a Ray cluster on an HPC system and connect to it.\nIn this example, we set `batch=True`, which means that the cluster will be started\nrequesting an allocation through the scheduler (Slurm, PBS, etc). If this code\nis run within a sufficiently large interactive allocation, setting `batch=False`\nwill spin the Ray cluster on the allocated nodes.\n\n```Python\nimport ray\n\nfrom smartsim import Experiment\nfrom smartsim.exp.ray import RayCluster\n\nexp = Experiment(\"ray-cluster\", launcher='auto')\n# 3 workers + 1 head node = 4 node-cluster\ncluster = RayCluster(name=\"ray-cluster\", run_args={},\n                     ray_args={\"num-cpus\": 24},\n                     launcher='auto', num_nodes=4, batch=True)\n\nexp.generate(cluster, overwrite=True)\nexp.start(cluster, block=False, summary=True)\n\n# Connect to the Ray cluster\nctx = ray.init(f\"ray://{cluster.get_head_address()}:10001\")\n\n# <run Ray tune, RLlib, HPO...>\n```\n\n*New in 0.4.0* the auto argument enables the Ray Cluster to be launched\nacross scheduler types. Both batch launch and interactive launch commands\nwill be automatically detected and used by SmartSim.\n\n------\n# SmartRedis\n\nThe SmartSim IL Clients ([SmartRedis](https://github.com/CrayLabs/SmartRedis))\nare implementations of Redis clients that implement the RedisAI\nAPI with additions specific to scientific workflows.\n\nSmartRedis clients are available in Fortran, C, C++, and Python.\nUsers can seamlessly pull and push data from the Orchestrator from different languages.\n\n## Tensors\n\nTensors are the fundamental data structure for the SmartRedis clients. The Clients\nuse the native array format of the language. For example, in Python, a tensor is\na NumPy array while the C/C++ clients accept nested and contiguous arrays.\n\nWhen stored in the database, all tensors are stored in the same format. Hence,\nany language can receive a tensor from the database no matter what supported language\nthe array was sent from. This enables applications in different languages to communicate\nnumerical data with each other at runtime.\n\nFor more information on the tensor data structure, see\n[the documentation](https://www.craylabs.org/docs/sr_data_structures.html#tensor)\n\n## Datasets\n\nDatasets are collections of Tensors and associated metadata. The ``Dataset`` class\nis a user space object that can be created, added to, sent to, and retrieved from\nthe Orchestrator.\n\nFor an example of how to use the ``Dataset`` class, see the [Online Analysis example](#online-analysis)\n\nFor more information on the API, see the\n[API documentation](https://www.craylabs.org/docs/sr_data_structures.html#dataset)\n\n# SmartSim + SmartRedis Tutorials\n\nSmartSim and SmartRedis were designed to work together. When launched through\nSmartSim, applications using the SmartRedis clients are directly connected to\nany Orchestrator launched in the same [Experiment](https://www.craylabs.org/docs/api/smartsim_api.html#experiment).\n\nIn this way, a SmartSim [Experiment](https://www.craylabs.org/docs/api/smartsim_api.html#experiment) becomes a driver for coupled ML and Simulation\nworkflows. The following are simple examples of how to use SmartSim and SmartRedis\ntogether.\n\n## Run the Tutorials\n\nEach tutorial is a Jupyter notebook that can be run through the\n[SmartSim Tutorials docker image](https://github.com/orgs/CrayLabs/packages?repo_name=SmartSim)\nwhich will run a jupyter lab with the tutorials, SmartSim, and SmartRedis installed.\n\n```bash\ndocker pull ghcr.io/craylabs/smartsim-tutorials:v1\ndocker run -p 8888:8888 ghcr.io/craylabs/smartsim-tutorials:v0.4.1\n```\nEach of the following examples can be found in the\n[SmartSim documentation](https://www.craylabs.org/docs/tutorials/getting_started/getting_started.html).\n\n## Online Analysis\n\nUsing SmartSim, HPC applications can be monitored in real time by streaming data\nfrom the application to the database. SmartRedis clients can retrieve the\ndata, process, analyze it, and finally store any updated data back to the database for\nuse by other clients.\n\nThe following is an example of how a user could monitor and analyze a simulation.\nThe example here uses the Python client; however, SmartRedis clients are also available\nfor C, C++, and Fortran. All SmartRedis clients implement the same API.\n\nThe example will produce [this visualization](https://user-images.githubusercontent.com/13009163/127622717-2c9e4cfd-50f4-4d94-88c4-8c05fa2fa616.mp4) while the simulation is running.\n\n#### Lattice Boltzmann Simulation\n\nUsing a [Lattice Boltzmann Simulation](https://en.wikipedia.org/wiki/Lattice_Boltzmann_methods),\nthis example demonstrates how to use the SmartRedis ``Dataset`` API to stream\ndata over the Orchestrator deployed by SmartSim.\n\nThe simulation will be composed of two parts: `fv_sim.py` which will generate data from\nthe Simulation and store it in the Orchestrator, and `driver.py`\nwhich will launch the Orchestrator, start `fv_sim.py` and check for data posted to the\nOrchestrator to plot updates in real-time.\n\nThe following code highlights the sections of `fv_sim.py` that are responsible for\ntransmitting the data needed to plot timesteps of the simulation to the Orchestrator.\n\n```Python\n# fv_sim.py\nfrom smartredis import Client\nimport numpy as np\n\n# initialization code omitted\n\n# save cylinder location to database\ncylinder = (X - x_res/4)**2 + (Y - y_res/2)**2 < (y_res/4)**2 # bool array\nclient.put_tensor(\"cylinder\", cylinder.astype(np.int8))\n\nfor time_step in range(steps): # simulation loop\n    for i, cx, cy in zip(idxs, cxs, cys):\n        F[:,:,i] = np.roll(F[:,:,i], cx, axis=1)\n        F[:,:,i] = np.roll(F[:,:,i], cy, axis=0)\n\n    bndryF = F[cylinder,:]\n    bndryF = bndryF[:,[0,5,6,7,8,1,2,3,4]]\n\n    rho = np.sum(F, 2)\n    ux  = np.sum(F * cxs, 2) / rho\n    uy  = np.sum(F * cys, 2) / rho\n\n    Feq = np.zeros(F.shape)\n    for i, cx, cy, w in zip(idxs, cxs, cys, weights):\n        Feq[:,:,i] = rho * w * ( 1 + 3*(cx*ux+cy*uy)  + 9*(cx*ux+cy*uy)**2/2 - 3*(ux**2+uy**2)/2 )\n    F += -(1.0/tau) * (F - Feq)\n    F[cylinder,:] = bndryF\n\n    # Create a SmartRedis dataset with vorticity data\n    dataset = Dataset(f\"data_{str(time_step)}\")\n    dataset.add_tensor(\"ux\", ux)\n    dataset.add_tensor(\"uy\", uy)\n\n    # Put Dataset in db at key \"data_{time_step}\"\n    client.put_dataset(dataset)\n```\n\nThe driver script, `driver.py`, launches the Orchestrator database and runs\nthe simulation in a non-blocking fashion. The driver script then uses the SmartRedis\nclient to pull the DataSet and plot the vorticity while the simulation is running.\n\n```Python\n# driver.py\ntime_steps, seed = 3000, 42\n\nexp = Experiment(\"finite_volume_simulation\", launcher=\"local\")\n\ndb = exp.create_database(port=6780,        # database port\n                         interface=\"lo\")   # network interface db should listen on\n\n# create the lb simulation Model reference\nsettings = exp.create_run_settings(\"python\",\n                                   exe_args=[\"fv_sim.py\",\n                                             f\"--seed={seed}\",\n                                             f\"--steps={time_steps}\"])\nmodel = exp.create_model(\"fv_simulation\", settings)\nmodel.attach_generator_files(to_copy=\"fv_sim.py\")\nexp.generate(db, model, overwrite=True)\n\nexp.start(db)\nclient = Client(address=db.get_address()[0], cluster=False)\n\n# start simulation (non-blocking)\nexp.start(model, block=False, summary=True)\n\n# poll until simulation starts and then retrieve data\nclient.poll_key(\"cylinder\", 200, 100)\ncylinder = client.get_tensor(\"cylinder\").astype(bool)\n\nfor i in range(0, time_steps):\n    client.poll_key(f\"data_{str(i)}\", 10, 1000)\n    dataset = client.get_dataset(f\"data_{str(i)}\")\n    ux, uy = dataset.get_tensor(\"ux\"), dataset.get_tensor(\"uy\")\n\n    # analysis/plotting code omitted\n\nexp.stop(db)\n```\n\nFor more examples of how to use SmartSim and SmartRedis together to perform\nonline analysis, please see the\n[online analsysis tutorial section](https://www.craylabs.org/docs/tutorials/online_analysis/lattice/online_analysis.html) of the\nSmartSim documentation.\n\n## Online Processing\n\nEach of the SmartRedis clients can be used to remotely execute\n[TorchScript](https://pytorch.org/docs/stable/jit.html) code on data\nstored within the database. The scripts/functions are executed in the Torch\nruntime linked into the database.\n\nAny of the functions available in the\n[TorchScript builtins](https://pytorch.org/docs/stable/jit_builtin_functions.html#builtin-functions)\ncan be saved as \"script\" or \"functions\" in the database and used directly by\nany of the SmartRedis Clients.\n\n### Singular Value Decomposition\n\nFor example, the following code sends the built-in\n[Singular Value Decomposition](https://pytorch.org/docs/stable/generated/torch.svd.html)\nto the database and execute it on a dummy tensor.\n\n```python\nimport numpy as np\nfrom smartredis import Client\n\n# don't even need to import torch\ndef calc_svd(input_tensor):\n    return input_tensor.svd()\n\n\n# connect a client to the database\nclient = Client(cluster=False)\n\n# get dummy data\ntensor = np.random.randint(0, 100, size=(5, 3, 2)).astype(np.float32)\n\nclient.put_tensor(\"input\", tensor)\nclient.set_function(\"svd\", calc_svd)\n\nclient.run_script(\"svd\", \"calc_svd\", \"input\", [\"U\", \"S\", \"V\"])\n# results are not retrieved immediately in case they need\n# to be fed to another function/model\n\nU = client.get_tensor(\"U\")\nS = client.get_tensor(\"S\")\nV = client.get_tensor(\"V\")\nprint(f\"U: {U}, S: {S}, V: {V}\")\n```\n\nThe processing capabilities make it simple to form computational pipelines of\nfunctions, scripts, and models.\n\nSee the full [TorchScript Language Reference](https://pytorch.org/docs/stable/jit.html#torchscript-language)\ndocumentation for more information on available methods, functions, and how\nto create your own.\n\n## Online Inference\n\nSmartSim supports the following frameworks for querying Machine Learning models\nfrom C, C++, Fortran and Python with the SmartRedis Clients:\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:center\">RedisAI Version</th>\n      <th style=\"text-align:center\">Libraries</th>\n      <th style=\"text-align:center\">Supported Version</th>\n    </tr>\n  </thead>\n  <tbody style=\"text-align:center\">\n    <tr>\n      <td rowspan=\"3\">1.2.3-1.2.4</td>\n      <td>PyTorch</td>\n      <td>1.7.x</td>\n    </tr>\n    <tr>\n      <td>TensorFlow\\Keras</td>\n      <td>2.4.x-2.5.x</td>\n    </tr>\n    <tr>\n      <td>ONNX</td>\n      <td>1.9.x</td>\n    </tr>\n      <td rowspan=\"3\">1.2.5</td>\n      <td>PyTorch</td>\n      <td>1.9.x</td>\n    </tr>\n    <tr>\n      <td>TensorFlow\\Keras</td>\n      <td>2.6.x</td>\n    </tr>\n    <tr>\n      <td>ONNX</td>\n      <td>1.9.x</td>\n    </tr>\n  </tbody>\n</table>\n\nA [number of other libraries](https://github.com/onnx/onnxmltools) are\nsupported through ONNX, like [SciKit-Learn](https://github.com/onnx/sklearn-onnx/)\nand [XGBoost](https://github.com/onnx/onnxmltools/tree/master/tests/xgboost).\n\n**Note:** It's important to remember that SmartSim utilizes a client-server model. To run\nexperiments that utilize the above frameworks, you must first start the Orchestrator\ndatabase with SmartSim.\n\n### PyTorch CNN Example\n\nThe example below shows how to spin up a database with SmartSim and\ninvoke a PyTorch CNN model using the SmartRedis clients.\n\n```python\n# simple_torch_inference.py\nimport io\nimport torch\nimport torch.nn as nn\nfrom smartredis import Client\nfrom smartsim import Experiment\n\nexp = Experiment(\"simple-online-inference\", launcher=\"local\")\ndb = exp.create_database(port=6780, interface=\"lo\")\n\nclass Net(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv = nn.Conv2d(1, 1, 3)\n\n    def forward(self, x):\n        return self.conv(x)\n\ntorch_model = Net()\nexample_forward_input = torch.rand(1, 1, 3, 3)\nmodule = torch.jit.trace(torch_model, example_forward_input)\nmodel_buffer = io.BytesIO()\ntorch.jit.save(module, model_buffer)\n\nexp.start(db, summary=True)\n\naddress = db.get_address()[0]\nclient = Client(address=address, cluster=False)\n\nclient.put_tensor(\"input\", example_forward_input.numpy())\nclient.set_model(\"cnn\", model_buffer.getvalue(), \"TORCH\", device=\"CPU\")\nclient.run_model(\"cnn\", inputs=[\"input\"], outputs=[\"output\"])\noutput = client.get_tensor(\"output\")\nprint(f\"Prediction: {output}\")\n\nexp.stop(db)\n```\n\nThe above python code can be run like any normal python script:\n```bash\npython simple_torch_inference.py\n```\n\nFor more examples of how to use SmartSim and SmartRedis together to perform\nonline inference, please see the\n[online inference tutorials section](https://www.craylabs.org/docs/tutorials/ml_inference/Inference-in-SmartSim.html) of the\nSmartSim documentation.\n\n--------\n\n# Publications\n\nThe following are public presentations or publications using SmartSim\n\n - [Collaboration with NCAR - CGD Seminar](https://www.youtube.com/watch?v=2e-5j427AS0)\n - [SmartSim: Using Machine Learning in HPC Simulations](https://arxiv.org/abs/2104.09355)\n - [SmartSim: Online Analytics and Machine Learning for HPC Simulations](https://www.youtube.com/watch?v=JsSgq-fq44w&list=PLuQQBBQFfpgq0OvjKbjcYgTDzDxTqtwua&index=11)\n - [PyTorch Ecosystem Day Poster](https://assets.pytorch.org/pted2021/posters/J8.png)\n\n\n--------\n# Cite\n\nPlease use the following citation when referencing SmartSim, SmartRedis, or any SmartSim related work:\n\nPartee et al., “Using Machine Learning at Scale in HPC Simulations with SmartSim:\nAn Application to Ocean Climate Modeling”, Journal of Computational Science, Volume 62, 2022, 101707, ISSN 1877-7503\n\nAvailable: https://doi.org/10.1016/j.jocs.2022.101707.\n\n## bibtex\n\n\n```latex\n@article{PARTEE2022101707,\n    title = {Using Machine Learning at scale in numerical simulations with SmartSim: An application to ocean climate modeling},\n    journal = {Journal of Computational Science},\n    volume = {62},\n    pages = {101707},\n    year = {2022},\n    issn = {1877-7503},\n    doi = {https://doi.org/10.1016/j.jocs.2022.101707},\n    url = {https://www.sciencedirect.com/science/article/pii/S1877750322001065},\n    author = {Sam Partee and Matthew Ellis and Alessandro Rigazzi and Andrew E. Shao and Scott Bachman and Gustavo Marques and Benjamin Robbins},\n    keywords = {Deep learning, Numerical simulation, Climate modeling, High performance computing, SmartSim},\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CrayLabs/SmartSim",
    "keywords": "scientific,ai,workflow,hpc,analysis",
    "license": "BSD 2-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "smartsim",
    "package_url": "https://pypi.org/project/smartsim/",
    "platform": null,
    "project_url": "https://pypi.org/project/smartsim/",
    "project_urls": {
      "Documentation": "https://www.craylabs.org",
      "Homepage": "https://github.com/CrayLabs/SmartSim",
      "Source": "https://github.com/CrayLabs/SmartSim"
    },
    "release_url": "https://pypi.org/project/smartsim/0.4.1/",
    "requires_dist": [
      "psutil (>=5.7.2)",
      "coloredlogs (==10.0)",
      "tabulate (>=0.8.9)",
      "redis-py-cluster (==2.1.3)",
      "redis (==3.5.3)",
      "tqdm (>=4.50.2)",
      "filelock (>=3.4.2)",
      "protobuf (==3.20)",
      "smartredis (>=0.3.1)",
      "black (>=20.8b1) ; extra == 'dev'",
      "isort (>=5.6.4) ; extra == 'dev'",
      "pylint (>=2.6.0) ; extra == 'dev'",
      "pytest (>=6.0.0) ; extra == 'dev'",
      "pytest-cov (>=2.10.1click==8.0.2) ; extra == 'dev'",
      "tensorflow (==2.5.2) ; extra == 'ml'",
      "onnx (==1.9.0) ; extra == 'ml'",
      "skl2onnx (==1.10.3) ; extra == 'ml'",
      "onnxmltools (==1.10.0) ; extra == 'ml'",
      "scikit-learn (==1.0.2) ; extra == 'ml'",
      "ray (>=1.6) ; extra == 'ray'"
    ],
    "requires_python": ">=3.7",
    "summary": "AI Workflows for Science",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14241889,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6e2480545596908f07f4ecc6daad606f6bc222f22797c551f8f00b26e07d091",
          "md5": "81752bad50541bbb9313e0176fb6e96d",
          "sha256": "d1790443d823243afd622adcb40543c21dfab201a8c8e318c2a4be4a443e33e7"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.1-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "81752bad50541bbb9313e0176fb6e96d",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 984298,
        "upload_time": "2021-05-08T01:56:20",
        "upload_time_iso_8601": "2021-05-08T01:56:20.961277Z",
        "url": "https://files.pythonhosted.org/packages/f6/e2/480545596908f07f4ecc6daad606f6bc222f22797c551f8f00b26e07d091/smartsim-0.3.1-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43c330c4862888213ea9ef7eff31868d90e3165d20e7c1aad18080237c66ec3a",
          "md5": "ddba8bcca00883495656db641079ed76",
          "sha256": "1863fa220652d1a89dda643cea67c05ed9867168cd96b8e7ece8564f8747c2e1"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.1-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ddba8bcca00883495656db641079ed76",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 2777691,
        "upload_time": "2021-05-08T01:56:22",
        "upload_time_iso_8601": "2021-05-08T01:56:22.970213Z",
        "url": "https://files.pythonhosted.org/packages/43/c3/30c4862888213ea9ef7eff31868d90e3165d20e7c1aad18080237c66ec3a/smartsim-0.3.1-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7237c034c9832cf59ff90c1369de001eb677d0b0d40610ddac5a9cbbec26b3cc",
          "md5": "1c275597532e76e248c8068c925b77a4",
          "sha256": "dc25e54c352c45d5f47aba8361fd62e4d1e395db2e96ec70a702fdc484b70087"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.1-cp38-cp38-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "1c275597532e76e248c8068c925b77a4",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 984289,
        "upload_time": "2021-05-08T01:56:24",
        "upload_time_iso_8601": "2021-05-08T01:56:24.167042Z",
        "url": "https://files.pythonhosted.org/packages/72/37/c034c9832cf59ff90c1369de001eb677d0b0d40610ddac5a9cbbec26b3cc/smartsim-0.3.1-cp38-cp38-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ea13ce5eb58ec8b31e4e80e7d317cfb01f17e720ae535a2ee544cfa079022d7",
          "md5": "a710fb4d931101f919266bd70af32ae3",
          "sha256": "40f88306ab45759bf6c1d5231b3cf8120249e8930ddc66bcc81dc9779883ece8"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.1-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "a710fb4d931101f919266bd70af32ae3",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 2777689,
        "upload_time": "2021-05-08T01:56:25",
        "upload_time_iso_8601": "2021-05-08T01:56:25.842247Z",
        "url": "https://files.pythonhosted.org/packages/3e/a1/3ce5eb58ec8b31e4e80e7d317cfb01f17e720ae535a2ee544cfa079022d7/smartsim-0.3.1-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c630a348abfdd60b5b7ec0d7b735f594d21d65252d18584cb6fb93a94cf3063b",
          "md5": "169046b73ea207f3f9c050a882cbdf68",
          "sha256": "1b0dfbbdc170b315c0edc34f19684e7c62eeb9ef1bff0ac24e901e110e3f37b4"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.1-cp39-cp39-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "169046b73ea207f3f9c050a882cbdf68",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 984284,
        "upload_time": "2021-05-08T01:56:27",
        "upload_time_iso_8601": "2021-05-08T01:56:27.599591Z",
        "url": "https://files.pythonhosted.org/packages/c6/30/a348abfdd60b5b7ec0d7b735f594d21d65252d18584cb6fb93a94cf3063b/smartsim-0.3.1-cp39-cp39-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "874bbc18bbbb77d2cf38f3a7e5b8bf52c55c1eb9411a86815b94bdf8a96c8bb0",
          "md5": "0c67533b01179e84ed75dd8aefdf88eb",
          "sha256": "247fe7b9914b8ae9430dc1b6c2e04de05aba9003ad7f94d6f0e0abd130552c0e"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.1-cp39-cp39-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "0c67533b01179e84ed75dd8aefdf88eb",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 2777641,
        "upload_time": "2021-05-08T01:56:29",
        "upload_time_iso_8601": "2021-05-08T01:56:29.277633Z",
        "url": "https://files.pythonhosted.org/packages/87/4b/bc18bbbb77d2cf38f3a7e5b8bf52c55c1eb9411a86815b94bdf8a96c8bb0/smartsim-0.3.1-cp39-cp39-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e08d5b9ba6f643b937ef831d787d32a77dcbe92ad519125f1fdba314b6a027c",
          "md5": "1a8b45b49cc587890aa289d649882685",
          "sha256": "0d163995630aa07630e7843b0805b9e44b0b2e869151beca22dbbacc5d4605d2"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a8b45b49cc587890aa289d649882685",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 132037,
        "upload_time": "2021-05-08T01:56:30",
        "upload_time_iso_8601": "2021-05-08T01:56:30.471893Z",
        "url": "https://files.pythonhosted.org/packages/1e/08/d5b9ba6f643b937ef831d787d32a77dcbe92ad519125f1fdba314b6a027c/smartsim-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c70eb9a693567a920891c125b5426ac742a48bc457df40880fc2ac3d2ae53f43",
          "md5": "88d4fa36a36e7aac64d7c50a340b98f1",
          "sha256": "04c7c923e397d5308215e7f8ba2ffe81c2185ac692a441264a688dead20d425d"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.2-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "88d4fa36a36e7aac64d7c50a340b98f1",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 1011790,
        "upload_time": "2021-08-12T01:18:02",
        "upload_time_iso_8601": "2021-08-12T01:18:02.026076Z",
        "url": "https://files.pythonhosted.org/packages/c7/0e/b9a693567a920891c125b5426ac742a48bc457df40880fc2ac3d2ae53f43/smartsim-0.3.2-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b3623868ac78c47d3dece1e675f0b9070c91d34af7deb9ae4a7e2f5c483dca8",
          "md5": "7617ae52646d2940e92d662cadb3efca",
          "sha256": "9ffae3b00dccc4db692aa417e9a49a9747c6823a1598f1afbc1e5facbb6a7ba4"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.2-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "7617ae52646d2940e92d662cadb3efca",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 2802224,
        "upload_time": "2021-08-12T01:18:04",
        "upload_time_iso_8601": "2021-08-12T01:18:04.322337Z",
        "url": "https://files.pythonhosted.org/packages/9b/36/23868ac78c47d3dece1e675f0b9070c91d34af7deb9ae4a7e2f5c483dca8/smartsim-0.3.2-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df5a52dfe71bbe669074b4700e67f15a32fcde2bc16ae2ea6b6df613ef0d50c5",
          "md5": "8e60939f2d2e895ead64b007bcf7be41",
          "sha256": "9dd915ad2666bc2c9be6fcfb80a069516281acd5f718d5887b1c1d78e9b0d89e"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.2-cp38-cp38-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "8e60939f2d2e895ead64b007bcf7be41",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 1011791,
        "upload_time": "2021-08-12T01:18:06",
        "upload_time_iso_8601": "2021-08-12T01:18:06.085998Z",
        "url": "https://files.pythonhosted.org/packages/df/5a/52dfe71bbe669074b4700e67f15a32fcde2bc16ae2ea6b6df613ef0d50c5/smartsim-0.3.2-cp38-cp38-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1c81aeb737d25facf401e576a4a2831008da880ea4f71863df57a905cd098c9",
          "md5": "45cfad012b3fee4d2afaa3cbde3b5829",
          "sha256": "602f8430fe6716c917dc1ae595919accd392943abbee823149da263f2c70cf2a"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.2-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "45cfad012b3fee4d2afaa3cbde3b5829",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 2802094,
        "upload_time": "2021-08-12T01:18:08",
        "upload_time_iso_8601": "2021-08-12T01:18:08.137468Z",
        "url": "https://files.pythonhosted.org/packages/f1/c8/1aeb737d25facf401e576a4a2831008da880ea4f71863df57a905cd098c9/smartsim-0.3.2-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85335654648ec60c334c66cb17ab874264c9c9f567eea9de0c9e0a154f95f73a",
          "md5": "13e8d4f36694b4e219e02fd5ac417f00",
          "sha256": "978b58dd3161ac4432eec45e3ac2b782ec04817cedb93b105c8407be0743c550"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.2-cp39-cp39-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "13e8d4f36694b4e219e02fd5ac417f00",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 1011788,
        "upload_time": "2021-08-12T01:18:10",
        "upload_time_iso_8601": "2021-08-12T01:18:10.112445Z",
        "url": "https://files.pythonhosted.org/packages/85/33/5654648ec60c334c66cb17ab874264c9c9f567eea9de0c9e0a154f95f73a/smartsim-0.3.2-cp39-cp39-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c9a2772e426dd22fd059a009fcbff2366e4109e6393ef9a1f493ce508f80dfe",
          "md5": "b91322a0e5844b1dbbdbe5765e2223b6",
          "sha256": "93b3935f30f700552098b163f3512624dcee6b433bdd5549d17f87b4fd35c72e"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.2-cp39-cp39-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b91322a0e5844b1dbbdbe5765e2223b6",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 2802111,
        "upload_time": "2021-08-12T01:18:11",
        "upload_time_iso_8601": "2021-08-12T01:18:11.766861Z",
        "url": "https://files.pythonhosted.org/packages/0c/9a/2772e426dd22fd059a009fcbff2366e4109e6393ef9a1f493ce508f80dfe/smartsim-0.3.2-cp39-cp39-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8264a5c242c9339e07400f205157195c5194d9401d2f792a7990911e6781d8e",
          "md5": "3692df24e022e59c8c4d385c0407b897",
          "sha256": "3e5296a24db2fc9365723362a13fccfdd66136817cd82b4b4574adb9d5de8299"
        },
        "downloads": -1,
        "filename": "smartsim-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3692df24e022e59c8c4d385c0407b897",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 165544,
        "upload_time": "2021-08-12T01:18:13",
        "upload_time_iso_8601": "2021-08-12T01:18:13.378831Z",
        "url": "https://files.pythonhosted.org/packages/d8/26/4a5c242c9339e07400f205157195c5194d9401d2f792a7990911e6781d8e/smartsim-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "353c99f5117fe0ee6a7d57ab7db6b8789c73cfc17513e5ed80f48b85f5b65537",
          "md5": "c4140d22d31a8fe7dc2cb4913200ad56",
          "sha256": "d3ef5d2f96d39e4f3de56ba9be5160fbd7270bec6023b01930ed112f00468fdc"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c4140d22d31a8fe7dc2cb4913200ad56",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 1069729,
        "upload_time": "2022-02-12T23:24:14",
        "upload_time_iso_8601": "2022-02-12T23:24:14.295270Z",
        "url": "https://files.pythonhosted.org/packages/35/3c/99f5117fe0ee6a7d57ab7db6b8789c73cfc17513e5ed80f48b85f5b65537/smartsim-0.4.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1783947c349b927d2bde65f129759d73fa3c26e1cb0f7bacb716e372f778aae",
          "md5": "d64821bd3dbe42b23fa30e9e4c1283b9",
          "sha256": "ac9b759f80ce538c9234e54011e222842d05df8aaa27e006233b5f2d8df119d4"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.0-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "d64821bd3dbe42b23fa30e9e4c1283b9",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 2859896,
        "upload_time": "2022-02-12T23:24:16",
        "upload_time_iso_8601": "2022-02-12T23:24:16.431485Z",
        "url": "https://files.pythonhosted.org/packages/c1/78/3947c349b927d2bde65f129759d73fa3c26e1cb0f7bacb716e372f778aae/smartsim-0.4.0-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a922b48d60275d0950881c0446843a4664d3def5c9261872af8e6f6edeb09ef0",
          "md5": "49c94bd143c1a72069335ef8406850d9",
          "sha256": "567379666bb121be7c33268012cd002935962715727e5aeb2020d9763f97ce63"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.0-cp38-cp38-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "49c94bd143c1a72069335ef8406850d9",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 1069878,
        "upload_time": "2022-02-12T23:24:18",
        "upload_time_iso_8601": "2022-02-12T23:24:18.442592Z",
        "url": "https://files.pythonhosted.org/packages/a9/22/b48d60275d0950881c0446843a4664d3def5c9261872af8e6f6edeb09ef0/smartsim-0.4.0-cp38-cp38-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f4a24b87d796c99036eec844957ae531e361d939b686952e686d6f05d56bba3",
          "md5": "756efb334e124fe6ad94f924af72713d",
          "sha256": "6d297269585ac068a9df692988da2103fba643cdce76f195ebb82a8c4109eb3c"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.0-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "756efb334e124fe6ad94f924af72713d",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 2860051,
        "upload_time": "2022-02-12T23:24:20",
        "upload_time_iso_8601": "2022-02-12T23:24:20.194833Z",
        "url": "https://files.pythonhosted.org/packages/2f/4a/24b87d796c99036eec844957ae531e361d939b686952e686d6f05d56bba3/smartsim-0.4.0-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2de243b4488a331a5ba6b7e1b8bd3f5b422e8ef0e62255523369eb4640b3af1f",
          "md5": "7af9fe87638f8e8265668602a5c905ee",
          "sha256": "6e835ca7a82c51ffacae2ba3c8b6d02a8d09b2ab45c2eec07dab32062957e9b1"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.0-cp39-cp39-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "7af9fe87638f8e8265668602a5c905ee",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 1069842,
        "upload_time": "2022-02-12T23:24:22",
        "upload_time_iso_8601": "2022-02-12T23:24:22.303101Z",
        "url": "https://files.pythonhosted.org/packages/2d/e2/43b4488a331a5ba6b7e1b8bd3f5b422e8ef0e62255523369eb4640b3af1f/smartsim-0.4.0-cp39-cp39-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1445d1d065249eec5aad8741a64b9118f5d8570e633df3dbc3436796b7e36277",
          "md5": "aa09c79f50ed2ad33a2f8d6a54e81601",
          "sha256": "6de81d4a1e607ebaf41e5718630251b9f8ed7636b6013d4c84c5a9f7ebed0f8d"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.0-cp39-cp39-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "aa09c79f50ed2ad33a2f8d6a54e81601",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 2859990,
        "upload_time": "2022-02-12T23:24:24",
        "upload_time_iso_8601": "2022-02-12T23:24:24.338093Z",
        "url": "https://files.pythonhosted.org/packages/14/45/d1d065249eec5aad8741a64b9118f5d8570e633df3dbc3436796b7e36277/smartsim-0.4.0-cp39-cp39-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42842efb8773c98d706ca956fcd2e5d7cf5a651459e7e4758be74684de8c9250",
          "md5": "92a9e4efef514ab7def946ef69f720f5",
          "sha256": "5b893f8c8ba9aa09d358e42983ab518f8e3de8137d05e5093d8d737f2139d74e"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "92a9e4efef514ab7def946ef69f720f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 216915,
        "upload_time": "2022-02-12T23:24:26",
        "upload_time_iso_8601": "2022-02-12T23:24:26.302139Z",
        "url": "https://files.pythonhosted.org/packages/42/84/2efb8773c98d706ca956fcd2e5d7cf5a651459e7e4758be74684de8c9250/smartsim-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "706358cabf334d94c58bcfaa0c72429d581f0b8db21613637c93a36186a89cf6",
          "md5": "405c71750781edbf596dd03ddc570eae",
          "sha256": "8764e016ac8aa87a1d5ec1a4e66ae2b439a12c902c357e92e1c9f88d6084a6f1"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.1-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "405c71750781edbf596dd03ddc570eae",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 1090327,
        "upload_time": "2022-06-25T00:39:07",
        "upload_time_iso_8601": "2022-06-25T00:39:07.600107Z",
        "url": "https://files.pythonhosted.org/packages/70/63/58cabf334d94c58bcfaa0c72429d581f0b8db21613637c93a36186a89cf6/smartsim-0.4.1-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "355d9fe2dee6f1044f606046180f1a827a704198cb086100821cc377ca5227d6",
          "md5": "f2b194031f16a79138ab652859588d4d",
          "sha256": "c7f303677938345635b15785c27ea38f247dc3cdd17b3029eb5bcbc7989ee885"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.1-cp37-cp37m-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "f2b194031f16a79138ab652859588d4d",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.7",
        "size": 2880316,
        "upload_time": "2022-06-25T00:39:10",
        "upload_time_iso_8601": "2022-06-25T00:39:10.084143Z",
        "url": "https://files.pythonhosted.org/packages/35/5d/9fe2dee6f1044f606046180f1a827a704198cb086100821cc377ca5227d6/smartsim-0.4.1-cp37-cp37m-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0148e42c7b47248d87f2dbde518a73f104c7bd43175134f6dfdbd23af86c4f66",
          "md5": "17f94acb15af613ea388bca9d8e1fe10",
          "sha256": "840d87110da3463205bd44ddbe2cfb9b25b387a4425b45a3ccb77a63bcc811fa"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.1-cp38-cp38-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "17f94acb15af613ea388bca9d8e1fe10",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 1090484,
        "upload_time": "2022-06-25T00:39:11",
        "upload_time_iso_8601": "2022-06-25T00:39:11.854775Z",
        "url": "https://files.pythonhosted.org/packages/01/48/e42c7b47248d87f2dbde518a73f104c7bd43175134f6dfdbd23af86c4f66/smartsim-0.4.1-cp38-cp38-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceff5bfc956fceab992a5e80201f2a1e9a54f8e6e754e559f592f7df5b9dbd4e",
          "md5": "534cee84890c48ce9fb8cb420227368e",
          "sha256": "6531e5088a9ff383ec16c408450e4d2c5262b1d09a97696a417bb7bda43912cd"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.1-cp38-cp38-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "534cee84890c48ce9fb8cb420227368e",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7",
        "size": 2880629,
        "upload_time": "2022-06-25T00:39:14",
        "upload_time_iso_8601": "2022-06-25T00:39:14.032894Z",
        "url": "https://files.pythonhosted.org/packages/ce/ff/5bfc956fceab992a5e80201f2a1e9a54f8e6e754e559f592f7df5b9dbd4e/smartsim-0.4.1-cp38-cp38-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "450907fc06e2e75ce3b0143ad33d96197642f8c7353970d623a59070e15cb52f",
          "md5": "7f0f5f819a5e4d9e23cdd0b3bb942e2f",
          "sha256": "99a46452640a815efaaf5c4bafdb3d01e25c21ca246e7fb869ce10228c8ab76a"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.1-cp39-cp39-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "7f0f5f819a5e4d9e23cdd0b3bb942e2f",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 1090464,
        "upload_time": "2022-06-25T00:39:15",
        "upload_time_iso_8601": "2022-06-25T00:39:15.928887Z",
        "url": "https://files.pythonhosted.org/packages/45/09/07fc06e2e75ce3b0143ad33d96197642f8c7353970d623a59070e15cb52f/smartsim-0.4.1-cp39-cp39-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dacc1fb1ee7097d2f6434596067c422759f6cdedf6b1924f977111c3f4aa2c2f",
          "md5": "dfd78670bdeb7fe47aa13c68f51b2bed",
          "sha256": "33002cc0764fdddf316d2d7dbc93f62b648b2cc305239a7eaf24c4c7a3446525"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.1-cp39-cp39-manylinux2010_x86_64.whl",
        "has_sig": false,
        "md5_digest": "dfd78670bdeb7fe47aa13c68f51b2bed",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.7",
        "size": 2880647,
        "upload_time": "2022-06-25T00:39:18",
        "upload_time_iso_8601": "2022-06-25T00:39:18.233083Z",
        "url": "https://files.pythonhosted.org/packages/da/cc/1fb1ee7097d2f6434596067c422759f6cdedf6b1924f977111c3f4aa2c2f/smartsim-0.4.1-cp39-cp39-manylinux2010_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a69b0410e8481bc536ddfdaacc50c426b34d9a14d7054b9074d63bdf48beaf0",
          "md5": "e8a37e33f918e55fa10c54b791e857e8",
          "sha256": "42203963442db726855e96817f01cb09bfc2d3975e055ade8b54d85da1e82fed"
        },
        "downloads": -1,
        "filename": "smartsim-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e8a37e33f918e55fa10c54b791e857e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 230470,
        "upload_time": "2022-06-25T00:39:19",
        "upload_time_iso_8601": "2022-06-25T00:39:19.844282Z",
        "url": "https://files.pythonhosted.org/packages/7a/69/b0410e8481bc536ddfdaacc50c426b34d9a14d7054b9074d63bdf48beaf0/smartsim-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "706358cabf334d94c58bcfaa0c72429d581f0b8db21613637c93a36186a89cf6",
        "md5": "405c71750781edbf596dd03ddc570eae",
        "sha256": "8764e016ac8aa87a1d5ec1a4e66ae2b439a12c902c357e92e1c9f88d6084a6f1"
      },
      "downloads": -1,
      "filename": "smartsim-0.4.1-cp37-cp37m-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "405c71750781edbf596dd03ddc570eae",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 1090327,
      "upload_time": "2022-06-25T00:39:07",
      "upload_time_iso_8601": "2022-06-25T00:39:07.600107Z",
      "url": "https://files.pythonhosted.org/packages/70/63/58cabf334d94c58bcfaa0c72429d581f0b8db21613637c93a36186a89cf6/smartsim-0.4.1-cp37-cp37m-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "355d9fe2dee6f1044f606046180f1a827a704198cb086100821cc377ca5227d6",
        "md5": "f2b194031f16a79138ab652859588d4d",
        "sha256": "c7f303677938345635b15785c27ea38f247dc3cdd17b3029eb5bcbc7989ee885"
      },
      "downloads": -1,
      "filename": "smartsim-0.4.1-cp37-cp37m-manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "f2b194031f16a79138ab652859588d4d",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 2880316,
      "upload_time": "2022-06-25T00:39:10",
      "upload_time_iso_8601": "2022-06-25T00:39:10.084143Z",
      "url": "https://files.pythonhosted.org/packages/35/5d/9fe2dee6f1044f606046180f1a827a704198cb086100821cc377ca5227d6/smartsim-0.4.1-cp37-cp37m-manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0148e42c7b47248d87f2dbde518a73f104c7bd43175134f6dfdbd23af86c4f66",
        "md5": "17f94acb15af613ea388bca9d8e1fe10",
        "sha256": "840d87110da3463205bd44ddbe2cfb9b25b387a4425b45a3ccb77a63bcc811fa"
      },
      "downloads": -1,
      "filename": "smartsim-0.4.1-cp38-cp38-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "17f94acb15af613ea388bca9d8e1fe10",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7",
      "size": 1090484,
      "upload_time": "2022-06-25T00:39:11",
      "upload_time_iso_8601": "2022-06-25T00:39:11.854775Z",
      "url": "https://files.pythonhosted.org/packages/01/48/e42c7b47248d87f2dbde518a73f104c7bd43175134f6dfdbd23af86c4f66/smartsim-0.4.1-cp38-cp38-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ceff5bfc956fceab992a5e80201f2a1e9a54f8e6e754e559f592f7df5b9dbd4e",
        "md5": "534cee84890c48ce9fb8cb420227368e",
        "sha256": "6531e5088a9ff383ec16c408450e4d2c5262b1d09a97696a417bb7bda43912cd"
      },
      "downloads": -1,
      "filename": "smartsim-0.4.1-cp38-cp38-manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "534cee84890c48ce9fb8cb420227368e",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7",
      "size": 2880629,
      "upload_time": "2022-06-25T00:39:14",
      "upload_time_iso_8601": "2022-06-25T00:39:14.032894Z",
      "url": "https://files.pythonhosted.org/packages/ce/ff/5bfc956fceab992a5e80201f2a1e9a54f8e6e754e559f592f7df5b9dbd4e/smartsim-0.4.1-cp38-cp38-manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "450907fc06e2e75ce3b0143ad33d96197642f8c7353970d623a59070e15cb52f",
        "md5": "7f0f5f819a5e4d9e23cdd0b3bb942e2f",
        "sha256": "99a46452640a815efaaf5c4bafdb3d01e25c21ca246e7fb869ce10228c8ab76a"
      },
      "downloads": -1,
      "filename": "smartsim-0.4.1-cp39-cp39-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "7f0f5f819a5e4d9e23cdd0b3bb942e2f",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7",
      "size": 1090464,
      "upload_time": "2022-06-25T00:39:15",
      "upload_time_iso_8601": "2022-06-25T00:39:15.928887Z",
      "url": "https://files.pythonhosted.org/packages/45/09/07fc06e2e75ce3b0143ad33d96197642f8c7353970d623a59070e15cb52f/smartsim-0.4.1-cp39-cp39-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dacc1fb1ee7097d2f6434596067c422759f6cdedf6b1924f977111c3f4aa2c2f",
        "md5": "dfd78670bdeb7fe47aa13c68f51b2bed",
        "sha256": "33002cc0764fdddf316d2d7dbc93f62b648b2cc305239a7eaf24c4c7a3446525"
      },
      "downloads": -1,
      "filename": "smartsim-0.4.1-cp39-cp39-manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "dfd78670bdeb7fe47aa13c68f51b2bed",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.7",
      "size": 2880647,
      "upload_time": "2022-06-25T00:39:18",
      "upload_time_iso_8601": "2022-06-25T00:39:18.233083Z",
      "url": "https://files.pythonhosted.org/packages/da/cc/1fb1ee7097d2f6434596067c422759f6cdedf6b1924f977111c3f4aa2c2f/smartsim-0.4.1-cp39-cp39-manylinux2010_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a69b0410e8481bc536ddfdaacc50c426b34d9a14d7054b9074d63bdf48beaf0",
        "md5": "e8a37e33f918e55fa10c54b791e857e8",
        "sha256": "42203963442db726855e96817f01cb09bfc2d3975e055ade8b54d85da1e82fed"
      },
      "downloads": -1,
      "filename": "smartsim-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e8a37e33f918e55fa10c54b791e857e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 230470,
      "upload_time": "2022-06-25T00:39:19",
      "upload_time_iso_8601": "2022-06-25T00:39:19.844282Z",
      "url": "https://files.pythonhosted.org/packages/7a/69/b0410e8481bc536ddfdaacc50c426b34d9a14d7054b9074d63bdf48beaf0/smartsim-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}