{
  "info": {
    "author": "Akshay Avvaru",
    "author_email": "avvaru@ccmb.res.in",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DiviSSR\n\n[![Build](https://img.shields.io/badge/Build-passing-brightgreen.svg)]()\n[![License](https://img.shields.io/badge/Licence-MIT-blue.svg)]()\n\nDiviSSR is a DNA tandem repeat identification tool. Tandem repeats are important \ngenomic sequences which have functional and evolutionary significance.\n\nDiviSSR is scripted in C++. \n\n### Working principle\n\nDiviSSR captures a mathematical property exhibited by binary number representations of DNA tandem repeats. In the binary number or the 2-bit format of DNA sequences, nucleotides are represented by 4 different combinations of 2 binary digits (bits). The binary number representations of DNA tandem repeats conform to a unique division rule. DiviSSR scans the genome in windows, converts each window sequence to a binary number and checks if the number qualifies the division rule. The detailed explanation of the algorithm is below and an overview of the method is depicted in the figure below.\n\n<img src=\"./divissr/lib/4097_figure1_v2.jpg\" alt=\"\"/>\nA) 2-bit representation for each nucleotide. B) Example repeat sequence of ACT motif with 2 complete units and a partial suffix of 2 bases. C) Binary representation of the repeat sequence generates a number denoted by S. A divisor (D) is built based on the length of the repeat, the motif and the partial suffix. The division of S with D yields a quotient which is equal to binary representation of the motif and the remainder equals binary representation of partial suffix.\n<br><br>\n\n\n### Installation\n\n```bash\n$ pip install divissr\n```\n\n### Usage\n\nThe help message and available options can be accessed using\n```bash\n$ divissr -h \n```\nwhich gives the following output\n```\nusage: divissr [-h] -i <FILE> [-o <FILE>] [-m <INT>] [-M <INT>] [-l <INT>] [-a] [-g <FILE>]\n                 [--anno-format <STR>] [--gene-key <STR>] [--up-promoter <INT>]\n                 [--down-promoter <INT>]\n\nRequired arguments:\n  -i, --input\t<FILE>\tInput sequence file. Fasta format.\n\nOptional arguments:\n  -o, --output\t\t\t<FILE>\tOutput file name. Default: Input file name + _divissr.tsv\n  -m, --min-motif-size\t<INT>\tMinimum size of a repeat motif in bp. Default: 1\n  -M, --max-motif-size\t<INT>\tMaximum size of a repeat motif in bp. Default: 6\n  -l, --min-length\t\t<INT>\tCutoff repeat length. Default: 2*M.\n \t\t\t\t\t\t\t\tShould at least be twice of maximum motif size.\n  -a, --analyse\t\t\t\t\tGenerate a summary HTML report.\n\nCompound repeat arguments:\n  --compound            Report compound repeats. The output of compound repeats is a separate file with the suffix \".compound\".\n  -d <INT>, --comp-dist <INT>\n                        Maximum distance between individual repeats of compound repeat. Use negative to denote overlap. Default: 0\n\nAnnotation arguments:\n  -g, --annotate\t\t<FILE>\tGenomic feature file to annotate repeats w.r.t genes.\n  \t\t\t\t\t\t\t\tBoth GFF and GTF can be processed.\n  --anno-format\t\t\t<STR>   Format of genomic feature file. \n  \t\t\t\t\t\t\t\tValid inputs: GFF, GTF. Default: GFF\n  --gene-key\t\t\t<STR>   Attribute used as unique identifier for gene name.\n  \t\t\t\t\t\t\t\tThe default identifier is \"gene\". \n  --up-promoter\t\t\t<INT>   Upstream distance(bp) from TSS to be considered as\n  \t\t\t\t\t\t\t\tpromoter region. Default: 1000\n  --down-promoter\t\t<INT>   Downstream distance(bp) from TSS to be considered as\n  \t\t\t\t\t\t\t\tpromoter region. Default: 1000\n```\n\n### `-i or --input`\n**Expects:** *STRING (to be used as filename)*<br>\n**Default:** *None*<br>\nThis is the only required argument for the program. The input file must be a \nvalid FASTA file. \n\n### `-o or --output`\n**Expects:** *STRING (to be used as filename)*<br>\n**Default:** *Input Filename + _divissr.tsv (see below)*<br>\nIf this option is not provided, the default output filename will be the same as the input filename, with its extension replaced with '_divissr.tsv'. For example, if the input filename is `my_seq.fa`, the default output filename will be `my_seq.fa_divissr.tsv`. If the input filename does not have any extension, `_divissr.tsv` will be appended to the filename. Please note that even in the case of no identified SSRs, the output file is still created (therefore overwriting any previous file of the same name) but with no content in the file.\n#### Output for fasta\nThe output is a tab-delimited file, with one SSR record per line. \nThe output columns follow the [BED](https://genome.ucsc.edu/FAQ/FAQformat.html) format. The details of the columns are given below:\n\n| S.No | Column | Description |\n|:----:| ------ | ----------- |\n| 1 | Chromosome | Chromosome or Sequence Name as specified by the first word in the FASTA header |\n| 2 | Repeat Start | 0-based start position of SSR in the Chromosome |\n| 3 | Repeat Stop | End position of SSR in the Chromosome |\n| 4 | Repeat Class | Class of repeat as grouped by their cyclical variations |\n| 5 | Repeat Length | Total length of identified repeat in nt |\n| 6 | Repeat Strand | Strand of SSR based on their cyclical variation |\n| 7 | Motif Number | Number of times the base motif is repeated |\n| 8 | Actual Repeat | Starting sequence of the SSR irrespective of Repeat class and strand|\n\nAn example output showing some of the largest repeats from *Drosophila melanogaster* is given below\n```\nX       22012826  22014795  ACTGGG  1969    -       328     TCCCAG\n2RHet   591337    591966    AATACT  629     -       104     ATTAGT\n4       1042143   1042690   AAATAT  547     +       91      AAATAT\n2RHet   598244    598789    AATACT  545     -       90      AGTATT\nXHet    122       663       AGAT    541     +       135     GATA\nX       22422335  22422827  AGAT    492     +       123     GATA\n3R      975265    975710    AAAT    445     -       111     TTAT\nX       15442288  15442724  ACAGAT  436     +       72      ACAGAT\n2L      22086818  22087152  AATACT  334     -       55      TATTAG\nYHet    137144    137466    AAGAC   322     -       64      CTTGT\n```\n\n### `-m or --min-motif-size`\n**Expects:** *INTEGER*<br>\n**Default:** *1*<br>\nMinimum length of motifs to be considered. By default, divissr ignores redundant \nmotifs. For example, a stretch of 12 A's is considered a monomer repeat of 12 \nA's rather than a dimer repeat of 6 AA's. \n\n### `-M or --max-motif-size`\n**Expects:** *INTEGER*<br>\n**Default:** *6*<br>\nMaximum length of motifs to be considered. Setting a large value of `-M` has a \nnon-trivial effect on both the runtime and memory usage of divissr.\n\n### `-l or --min-length`\n**Expects:** *INTEGER*<br>\n**Default:** *2* * *M*<br>\nMinimum length cut-off to be considered when finding an SSR. The same cut-off \nwill apply for SSRs of all motif lengths, even if the motif length is not a \ndivisor of this value. In such cases, SSRs that end with a partial motif are \nalso picked if they pass the length cut-off. This value should be at least twice\nof the maximum motif size.\n\n### `-a or --analyze`\n**Expects:** *None*<br>\n**Default:** *False*<br>\nIn addition to the default tab-separated output, DiviSSR can also generate a fully\ninteractive HTML report for easy downstream analysis of the repeat data. The \nfilename will be the same prefix as that of the main output. For example, if the\ninput filename was my_seq.fa, the analysis report will be my_seq_divissr.html. An \nexample HTML report, generated from the repeat data of Homo sapiens (build hg19),\ncan be accessed here (Right click -> Save As).\n\n### `--compound`\n**Expects:** *None*<br>\n**Default:** *False*<br>\nThis is flag which when set to true reports all compound repeats. Compound repeats\nare repeats which are either overlapping or separated by a small gap. Compound repeats\nare reported in a separate file with the extension \".compound\". The maximum distance\nbetween two individual repeats of a compound repeat can be set using the option `-d`.\nThe compoud repeat has four columns with first four denoting the sequence, start, \nend and length of the repeat. The fifth column denotes the repeat classes of individual\nrepeats of the compound repeat and the number of different cyclical variations that\nhave occured as compound repeat. The sixth column is the strand of the individual\nrepeats. The seventh column is denotes the actual motifs of individual repeats, \nrepeat length and the distance between the individual repeats. Below is an example\noutput reporting compound repeats.\n\n```\nchr1\t94808\t94847\t(AAAAG)1(A)1\t39\t-|-\t(CTTTT)20|D0|(T)23\nchr1\t113871\t113896\t(AGAGGG)1(AAAGAG)1\t25\t-|-\t(CCCTCT)13|D0|(TCTCTT)12\nchr1\t130955\t130977\t(AAAAAC)1(AAAAC)1\t22\t+|+\t(CAAAAA)12|D0|(AAAAC)13\nchr1\t147433\t147475\t(AAC)1(AAAAAC)1(AAC)1\t42\t+|+|+\t(CAA)21|D0|(AACAAA)17|D-2|(AAC)14\nchr1\t156944\t156967\t(AAAAAT)2\t23\t+|+\t(TAAAAA)12|D0|(AAAAAT)14\nchr1\t174902\t174957\t(A)1(AG)1(AAAG)1\t55\t+|+|+\t(A)31|D0|(AG)13|D-2|(AGAA)15\nchr1\t180444\t180472\t(ACCCTG)1(AACCCT)1\t28\t+|+\t(CCCTGA)16|D0|(TAACCC)12\nchr1\t180504\t180537\t(ACCCTC)1(AACCCT)1\t33\t+|+\t(CCTCAC)20|D0|(CCCTAA)15\nchr1\t180552\t180590\t(AACCCT)2(AACCC)1\t38\t+|+|+\t(AACCCT)14|D0|(AACCCT)14|D-2|(AACCC)12\nchr1\t180748\t180912\t(AACCCT)4\t164\t+|+|+|+\t(CCCTAA)55|D0|(ACCCTA)44|D-2|(AACCCT)21|D-7|(AACCCT)44\n```\n\n### `-d or --comp-dist`\n**Expects:** *INTEGER*<br>\n**Default:** *0*<br>\nMaximum distance between two individual repeats of a compound repeat. To report repeats overlapping by X bp use negative numbers i.e., -X. The default is 0bp. \n\n### `-g or --annotate`\n**Expects:** *FILE*<br>\n**Default:** *None*<br>\nInput a genomic feature file to annotate the repeats in the genomic context. \nDiviSSR accepts both GFF and GTF format genomic feature files. Each repeat is \nannotated w.r.t the closest gene and classified either as Genic, Exonic, \nIntronic and Intergenic according to the position of the repeat. Besides this, \nthe repeat is also checked if it falls in the promoter region of the gene. \nAnnotation adds 7 columns to the default divissr output which already consist 8 \ncolumns.\n\n| S.No | Column | Description |\n|:----:| ------ | ----------- |\n| 9 | Gene name | Name of the closest gene |\n| 10 | Gene Start | Start position of gene in the Chromosome |\n| 11 | Gene Stop | End position of gene in the Chromosome |\n| 12 | Strand | The strand orientation of the gene |\n| 13 | Genomic annotation | Annotation of the repeat w.r.t to the gene. Possible annotations are {Genic, Exonic, Intronic, Intergenic} |\n| 14 | Promoter annotation | If repeat falls in the promoter region of the closest gene. The default promoter region is 1Kb upstream and downstream of TSS. |\n| 15 | Distance from TSS | Distance of the repeat from the TSS of the gene. |\n\n### `--anno-format`\n**Expects:** *STRING*<br>\n**Default:** *GFF*<br>\nOption to specify the format of the input genomic feature file. Accepted inputs \nare GFF or GTF. More details about the GFF and GTF formats can be found \n[here](https://asia.ensembl.org/info/website/upload/gff.html).\n\n### `--gene-key`\n**Expects:** *STRING*<br>\n**Default:** *gene*<br>\nThe attribute key used for the name of the gene in the GFF/GTF file. In the \nbelow example GFF file, we have the location of a gene and it's mRNA and exon \nlocations. The last column of the file specifies attributes associated with each\nfeature, like ID, Parent, gene etc. DiviSSR uses on of the attribute to identify \nthe gene and also it's exons. In th below example the key \"gene\" can be used to \nidentify gene and the exons of the gene as they have the same gene name. Please \ncheck your GFF/GTF file for a robust attribute key which can identify all genes \nand their corresponding exons. We are actively working on better annotation \nwhere we can identify genes and their exons based on the ID and Parent.\n\n```\n# Sample GFF\nNC_004354.4\tRefSeq\tgene\t124370\t126714\t.\t-\t.\tID=gene1;Name=CG17636;gbkey=Gene;gene=CG17636;gene_biotype=protein_coding;gene_synonym=DmelCG17636,EG:23E12.1;\nNC_004354.4\tRefSeq\tmRNA\t124370\t126714\t.\t-\t.\tID=rna1;Parent=gene1;Name=NM_001103384.3;gbkey=mRNA;gene=CG17636;transcript_id=NM_001103384.3\nNC_004354.4\tRefSeq\texon\t126626\t126714\t.\t-\t.\tID=id13;Parent=rna1;gbkey=mRNA;gene=CG17636;transcript_id=NM_001103384.3\nNC_004354.4\tRefSeq\texon\t125495\t126259\t.\t-\t.\tID=id14;Parent=rna1;gbkey=mRNA;gene=CG17636;transcript_id=NM_001103384.3\n```\n\n### `--up-promoter`\n**Expects:** *INT*<br>\n**Default:** *1000*<br>\nUpstream distance(bp) from the TSS of the gene to be considered as promoter \nregion. Default 1000.\n\n### `--down-promoter`\n**Expects:** *INT*<br>\n**Default:** *1000*<br>\nDownstream distance(bp) from the TSS of the gene to be considered as promoter \nregion. Default 1000.\n\n## Change log\n### v 0.1.1\n\n### v 0.1.2\n- Solved compound repeat error for gzipped fasta input\n\n1. Handling error of non ACGTN nucleotides.\n\n## Contact\nFor queries or suggestions, please contact:\n\nAkshay Kumar Avvaru - <avvaru@ccmb.res.in><br>\nDivya Tej Sowpati - <tej@ccmb.res.in>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/avvaruakshay/divissr.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "divissr",
    "package_url": "https://pypi.org/project/divissr/",
    "platform": "",
    "project_url": "https://pypi.org/project/divissr/",
    "project_urls": {
      "Bug Tracker": "https://github.com/avvaruakshay/divissr/issues",
      "Homepage": "https://github.com/avvaruakshay/divissr.git"
    },
    "release_url": "https://pypi.org/project/divissr/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "DiviSSR is a DNA tandem repeat identification tool",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11867796,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1af3d901b9e23b725225fa947500a6e639be3b300b6d69d57cb07bb3f6a157dd",
          "md5": "98de10564d99e37a0a748826ad52c6de",
          "sha256": "938e679fa65baf94e11bb38b98f4718a57ccbd048e6172069b7ff05de675c702"
        },
        "downloads": -1,
        "filename": "divissr-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98de10564d99e37a0a748826ad52c6de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1436397,
        "upload_time": "2021-07-26T12:44:13",
        "upload_time_iso_8601": "2021-07-26T12:44:13.907816Z",
        "url": "https://files.pythonhosted.org/packages/1a/f3/d901b9e23b725225fa947500a6e639be3b300b6d69d57cb07bb3f6a157dd/divissr-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "007b2c8ebe039dbfc331092dda6dc8d4b6bcb4ffd456420a7f2926a1b36b3cba",
          "md5": "a80c342210bf602a6f72da5b5025e870",
          "sha256": "f99e5cdf10f0e384496ebdda39e6d21b652c0c03c6b80814e8532271c8ad319e"
        },
        "downloads": -1,
        "filename": "divissr-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a80c342210bf602a6f72da5b5025e870",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1418820,
        "upload_time": "2021-07-26T12:44:19",
        "upload_time_iso_8601": "2021-07-26T12:44:19.861609Z",
        "url": "https://files.pythonhosted.org/packages/00/7b/2c8ebe039dbfc331092dda6dc8d4b6bcb4ffd456420a7f2926a1b36b3cba/divissr-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "171721946522ecae5d8d124929afe7936e8d1f87c5863690f1ccaa7baf90004d",
          "md5": "ecd1426ed76ed6c6659c93921102b9e9",
          "sha256": "8b14d6616a8e09cdc9d5e76992708b090d8b5e7121a8b368a483014da9092cab"
        },
        "downloads": -1,
        "filename": "divissr-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ecd1426ed76ed6c6659c93921102b9e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1436382,
        "upload_time": "2021-07-29T05:14:38",
        "upload_time_iso_8601": "2021-07-29T05:14:38.765755Z",
        "url": "https://files.pythonhosted.org/packages/17/17/21946522ecae5d8d124929afe7936e8d1f87c5863690f1ccaa7baf90004d/divissr-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50aa555b3920c2d06b8a7b0b1bfa850a9124b90adf3159fec956f6d172557aac",
          "md5": "189191d72333e6e55d61135d7d8788dc",
          "sha256": "319bab79181d7b8ce1e32ebec1d27296e1495c474f80d6548dbe95eb905d6a7b"
        },
        "downloads": -1,
        "filename": "divissr-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "189191d72333e6e55d61135d7d8788dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1418884,
        "upload_time": "2021-07-29T05:14:48",
        "upload_time_iso_8601": "2021-07-29T05:14:48.868739Z",
        "url": "https://files.pythonhosted.org/packages/50/aa/555b3920c2d06b8a7b0b1bfa850a9124b90adf3159fec956f6d172557aac/divissr-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e0629ecc42796f03ee8bb755dbd8aca3d93e2c1090d6c0b67517060f07d5b41",
          "md5": "1a4c7e622c9157f6e31418e8ad487529",
          "sha256": "5e1ffecb087d45d1d9a7bacc36c3d85a2cf07e9f85b5d14b00194165f21e5295"
        },
        "downloads": -1,
        "filename": "divissr-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a4c7e622c9157f6e31418e8ad487529",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1436409,
        "upload_time": "2021-10-29T11:21:44",
        "upload_time_iso_8601": "2021-10-29T11:21:44.954317Z",
        "url": "https://files.pythonhosted.org/packages/5e/06/29ecc42796f03ee8bb755dbd8aca3d93e2c1090d6c0b67517060f07d5b41/divissr-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7bd3eb59cbab325c1c478ccda3c19e69185a697b1bcd0ec16369a409ef51aec",
          "md5": "6be664e117a08eef81c965852e929488",
          "sha256": "98914f4083f91b2dbe7f12e5fced65f04e563c873eec200c2c0a0e59c2975f97"
        },
        "downloads": -1,
        "filename": "divissr-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6be664e117a08eef81c965852e929488",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1418956,
        "upload_time": "2021-10-29T11:21:47",
        "upload_time_iso_8601": "2021-10-29T11:21:47.266048Z",
        "url": "https://files.pythonhosted.org/packages/a7/bd/3eb59cbab325c1c478ccda3c19e69185a697b1bcd0ec16369a409ef51aec/divissr-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e0629ecc42796f03ee8bb755dbd8aca3d93e2c1090d6c0b67517060f07d5b41",
        "md5": "1a4c7e622c9157f6e31418e8ad487529",
        "sha256": "5e1ffecb087d45d1d9a7bacc36c3d85a2cf07e9f85b5d14b00194165f21e5295"
      },
      "downloads": -1,
      "filename": "divissr-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1a4c7e622c9157f6e31418e8ad487529",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1436409,
      "upload_time": "2021-10-29T11:21:44",
      "upload_time_iso_8601": "2021-10-29T11:21:44.954317Z",
      "url": "https://files.pythonhosted.org/packages/5e/06/29ecc42796f03ee8bb755dbd8aca3d93e2c1090d6c0b67517060f07d5b41/divissr-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7bd3eb59cbab325c1c478ccda3c19e69185a697b1bcd0ec16369a409ef51aec",
        "md5": "6be664e117a08eef81c965852e929488",
        "sha256": "98914f4083f91b2dbe7f12e5fced65f04e563c873eec200c2c0a0e59c2975f97"
      },
      "downloads": -1,
      "filename": "divissr-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6be664e117a08eef81c965852e929488",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1418956,
      "upload_time": "2021-10-29T11:21:47",
      "upload_time_iso_8601": "2021-10-29T11:21:47.266048Z",
      "url": "https://files.pythonhosted.org/packages/a7/bd/3eb59cbab325c1c478ccda3c19e69185a697b1bcd0ec16369a409ef51aec/divissr-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}