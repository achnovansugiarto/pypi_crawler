{
  "info": {
    "author": "Naya Verdier",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# pbatch\n[![travis](https://travis-ci.com/nayaverdier/pbatch.svg?branch=main)](https://travis-ci.com/nayaverdier/pbatch)\n[![codecov](https://codecov.io/gh/nayaverdier/pbatch/branch/main/graph/badge.svg)](https://codecov.io/gh/nayaverdier/pbatch)\n[![pypi](https://img.shields.io/pypi/v/pbatch)](https://pypi.org/project/pbatch)\n[![license](https://img.shields.io/github/license/nayaverdier/pbatch.svg)](https://github.com/nayaverdier/pbatch/blob/main/LICENSE)\n\nParallel batch processing on top of regular python functions\n\n## Installation\n\nRequires python 3.7+\n\n```bash\npip install pbatch\n```\n\n## Usage\n\n### `pbatch.pmap`\n\nSimilar to built-in `map`, but executes the function in\nparallel. Number of concurrent executions can be limited through a\n`chunk_size` keyword argument.\n\n```python\nimport time\nimport pbatch\n\ndef long_square(x):\n    time.sleep(1)\n    print(x)\n    return x ** 2\n\nlist(map(long_square, [1, 2, 3]))\n# 1\n# 2\n# 3\n# => [1, 4, 9] (after 3 seconds)\n\nlist(pbatch.pmap(long_square, [1, 2, 3]))\n# 1\n# 2\n# 3\n# => [1, 4, 9] (after 1 second)\n\nlist(pbatch.pmap(long_square, [1, 2, 3], chunk_size=2))\n# 1\n# 2\n# 3\n# => [1, 4, 9] (after 2 seconds)\n```\n\nSupports multiple-arity functions exactly as `map` does:\n```python\nimport time\nimport pbatch\n\ndef multiple_args(a, b, c):\n    print(f\"a={a}, b={b}, c={c})\n    time.sleep(1)\n    return c\n\nlist(map(multiple_args, [1, 2], [60, 70], [1000, 2000]))\n# a=1, b=60, c=1000\n# a=2, b=70, c=2000\n# => [1000, 2000] (after 2 seconds)\n\nlist(pbatch.pmap(multiple_args, [1, 2], [60, 70], [1000, 2000]))\n# a=1, b=60, c=1000\n# a=2, b=70, c=2000\n# => [1000, 2000] (after 1 second)\n\nlist(pbatch.pmap(multiple_args, [1, 2], [60, 70], [1000, 2000], chunk_size=1))\n# a=1, b=60, c=1000\n# a=2, b=70, c=2000\n# => [1000, 2000] (after 2 second)\n```\n\nNote that if one iterable is shorter than the rest, remaining elements\nin the other iterators will be ignored.\n\nIf an exception is raised when processing an item, the remaining\nelements in the current chunk will be completed and then a\n`pbatch.PMapException` will be raised, including the results and\nexception from the _current_ chunk.\n\nIf any of the subtasks raises an exception, a `pbatch.PMapException`\nwill be raised:\n\n```python\ndef raise_on_two(x):\n    if x == 2:\n        raise ValueError(\"Number is two\")\n    return x\n\ntry:\n    list(pbatch.pmap(raise_on_two, [1, 2, 3]))\nexcept pbatch.PMapException as e:\n    e.results\n    # => [1, ValueError(\"Number is two\"), 3]\n\n    e.exceptions\n    # => [ValueError(\"Number is two\")]\n\n    str(e)\n    # => \"[1, ValueError('Number is two'), 3]\"\n\n    repr(e)\n    # => \"[1, ValueError('Number is two'), 3]\"\n```\n\nIf directly converting the results to a list, as above, and an\nexception is raised after the first chunk successfully completes, the\nresults from the first chunk will be forgotten. If such results are\nimportant, it is better to manually process each item out of the\ngenerator, as chunks are generated:\n\n```python\nresults = []\ntry:\n    for result in pbatch.pmap(...):\n        results.append(result)\nexcept pbatch.PMapException as e:\n    results.extend(e.results)\n```\n\nAfter executing, `results` will contain all results that were\nsuccessfully processed without raising an exception.\n\nAlternatively, wrap the function being mapped in a try/except block to\nhave more full control over when a `PMapException` will be raised.\n\n### `pbatch.postpone`\n\nBegin execution of a function without blocking code execution (until\n`.wait()` is called)\n\n```python\nimport time\nimport pbatch\n\ndef long_function(x, power=2):\n    time.sleep(1)\n    return x ** power\n\npostponement = pbatch.postpone(long_function, 3, power=3)\ntime.sleep(1)\nresult = postponement.wait()  # does not wait 1 second anymore\n```\n\n### `pbatch.partition`\n\nSplit up an iterable into fixed-sized chunks (except the final chunk\nin some cases)\n\nReturns a generator that yields lists of elements (chunks)\n\n```python\nimport pbatch\n\npartitions = list(pbatch.partition([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], chunk_size=4))\n# => [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n```\n\nChunks are lazily generated:\n```python\ndef print_return(x):\n    print(x)\n    return x\n\nnext(pbatch.partition(map(print_return, range(10)), 4))\n# 0\n# 1\n# 2\n# 3\n# => [0, 1, 2, 3]\n```\n\n## Development\n\nClone the repo, then from the project directory:\n\n```bash\npython3.7 -m venv .venv\n. .venv/bin/activate\n\nmake install-dev\n```\n\nTo run tests (and show coverage):\n```bash\nmake test\n```\n\nBefore making changes, fix formatting and check changes (isort, black, flake8, mypy:\n```bash\nmake format check\n```\n\n\n## 0.2.0 2020-09-22\n\n(not backwards compatible)\n\n- make `pmap` return a generator, so that the entire result set does\n  not necessarily have to be in memory at the same time\n\n## 0.1.1 2020-09-20\n\n- Remove deprecated `loop` argument from `asyncio.wait` (fixes warning)\n\n## 0.1.0 2020-09-20\n\n- Initial release\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nayaverdier/pbatch",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pbatch",
    "package_url": "https://pypi.org/project/pbatch/",
    "platform": "",
    "project_url": "https://pypi.org/project/pbatch/",
    "project_urls": {
      "Homepage": "https://github.com/nayaverdier/pbatch"
    },
    "release_url": "https://pypi.org/project/pbatch/0.2.0/",
    "requires_dist": [
      "black (==20.8b1) ; extra == 'dev'",
      "coverage (==5.2.1) ; extra == 'dev'",
      "flake8 (==3.8.3) ; extra == 'dev'",
      "flake8-bugbear (==20.1.4) ; extra == 'dev'",
      "isort (==5.5.1) ; extra == 'dev'",
      "mypy (==0.782) ; extra == 'dev'",
      "pytest (==6.0.1) ; extra == 'dev'",
      "pytest-cov (==2.10.1) ; extra == 'dev'",
      "twine (==3.2.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Parallel batch processing on top of regular python functions",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8250330,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "098bcf7314ed89c41a01f6a76c7644eb458343c7b19e70f27be1eaae29041c74",
          "md5": "e99a54084496956fcfbbef543084df58",
          "sha256": "fcc5f93a33a5dc00d34495711b06734596f3b26750235c9432b54085f4bab6c2"
        },
        "downloads": -1,
        "filename": "pbatch-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e99a54084496956fcfbbef543084df58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5857,
        "upload_time": "2020-09-21T07:13:08",
        "upload_time_iso_8601": "2020-09-21T07:13:08.536647Z",
        "url": "https://files.pythonhosted.org/packages/09/8b/cf7314ed89c41a01f6a76c7644eb458343c7b19e70f27be1eaae29041c74/pbatch-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53c1ce52df8b864eb02fa20c630003924b57a5b72b6bb515d0250c2aab19877b",
          "md5": "089ee194dd504eb8ff98b71995a9198f",
          "sha256": "15a2039a8f20825ab069d3f427fcbba51cc9c76b02da980dc1d3db4671012b9f"
        },
        "downloads": -1,
        "filename": "pbatch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "089ee194dd504eb8ff98b71995a9198f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6042,
        "upload_time": "2020-09-21T07:13:11",
        "upload_time_iso_8601": "2020-09-21T07:13:11.278781Z",
        "url": "https://files.pythonhosted.org/packages/53/c1/ce52df8b864eb02fa20c630003924b57a5b72b6bb515d0250c2aab19877b/pbatch-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "104281165cf2eb7fa378acee68e521dbbafb9b667c0b0c04314b3cb216d04ede",
          "md5": "50a6422b2b47b4d135c322588e97230e",
          "sha256": "d9aa7ad44fccab108065223ce1c159801cee0b5ae3a2e8dda8189bf110a30097"
        },
        "downloads": -1,
        "filename": "pbatch-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50a6422b2b47b4d135c322588e97230e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5900,
        "upload_time": "2020-09-21T07:49:45",
        "upload_time_iso_8601": "2020-09-21T07:49:45.162303Z",
        "url": "https://files.pythonhosted.org/packages/10/42/81165cf2eb7fa378acee68e521dbbafb9b667c0b0c04314b3cb216d04ede/pbatch-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd8e861d0e497f8339c7864c20f539a082576c557b99df667c4042c86e7153fd",
          "md5": "447b01ca07ceefcde7b06356875914dc",
          "sha256": "bc895f5c6bac6243ba5488755bc5b8a7ed0cba61655891d0ea1efc2062cb23e0"
        },
        "downloads": -1,
        "filename": "pbatch-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "447b01ca07ceefcde7b06356875914dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6078,
        "upload_time": "2020-09-21T07:49:46",
        "upload_time_iso_8601": "2020-09-21T07:49:46.502251Z",
        "url": "https://files.pythonhosted.org/packages/dd/8e/861d0e497f8339c7864c20f539a082576c557b99df667c4042c86e7153fd/pbatch-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d4a4156d87f4682e1048183cad493b244b0ecad5f012dc324a7301c46b278cf",
          "md5": "84929406e6d7a70adf977adf25a69dc0",
          "sha256": "0edfa0d6e6c960636b6ab9c2b15fb70e906318a205648ba5849009102b000528"
        },
        "downloads": -1,
        "filename": "pbatch-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "84929406e6d7a70adf977adf25a69dc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6412,
        "upload_time": "2020-09-23T05:47:33",
        "upload_time_iso_8601": "2020-09-23T05:47:33.129109Z",
        "url": "https://files.pythonhosted.org/packages/8d/4a/4156d87f4682e1048183cad493b244b0ecad5f012dc324a7301c46b278cf/pbatch-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47ec3029d1e16cb1e3866bab0720033c5a28c16ec6f63f46e29492da9ed888bc",
          "md5": "16df5ef5dc389e938bf4be82479ccfd5",
          "sha256": "56ee87c309f21a5c2968fbe5be21ec65cb029ea5b707e9e3c86e8540fa312361"
        },
        "downloads": -1,
        "filename": "pbatch-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "16df5ef5dc389e938bf4be82479ccfd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6491,
        "upload_time": "2020-09-23T05:47:34",
        "upload_time_iso_8601": "2020-09-23T05:47:34.446193Z",
        "url": "https://files.pythonhosted.org/packages/47/ec/3029d1e16cb1e3866bab0720033c5a28c16ec6f63f46e29492da9ed888bc/pbatch-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d4a4156d87f4682e1048183cad493b244b0ecad5f012dc324a7301c46b278cf",
        "md5": "84929406e6d7a70adf977adf25a69dc0",
        "sha256": "0edfa0d6e6c960636b6ab9c2b15fb70e906318a205648ba5849009102b000528"
      },
      "downloads": -1,
      "filename": "pbatch-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "84929406e6d7a70adf977adf25a69dc0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6412,
      "upload_time": "2020-09-23T05:47:33",
      "upload_time_iso_8601": "2020-09-23T05:47:33.129109Z",
      "url": "https://files.pythonhosted.org/packages/8d/4a/4156d87f4682e1048183cad493b244b0ecad5f012dc324a7301c46b278cf/pbatch-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47ec3029d1e16cb1e3866bab0720033c5a28c16ec6f63f46e29492da9ed888bc",
        "md5": "16df5ef5dc389e938bf4be82479ccfd5",
        "sha256": "56ee87c309f21a5c2968fbe5be21ec65cb029ea5b707e9e3c86e8540fa312361"
      },
      "downloads": -1,
      "filename": "pbatch-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "16df5ef5dc389e938bf4be82479ccfd5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6491,
      "upload_time": "2020-09-23T05:47:34",
      "upload_time_iso_8601": "2020-09-23T05:47:34.446193Z",
      "url": "https://files.pythonhosted.org/packages/47/ec/3029d1e16cb1e3866bab0720033c5a28c16ec6f63f46e29492da9ed888bc/pbatch-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}