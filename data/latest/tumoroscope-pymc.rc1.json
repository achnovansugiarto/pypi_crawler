{
  "info": {
    "author": null,
    "author_email": "Joshua Cook <joshuacook0023@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Typing :: Typed"
    ],
    "description": "<!-- Do NOT edit the Markdown file directly - generated from the Jupyter notebook. -->\n\n# Tumoroscope in PyMC\n\n[![python](https://img.shields.io/badge/Python-3.9+-3776AB.svg?style=flat&logo=python&logoColor=white)](https://www.python.org)\n[![Pytest](https://github.com/jhrcook/tumoroscope-pymc/actions/workflows/pytest.yaml/badge.svg)](https://github.com/jhrcook/tumoroscope-pymc/actions/workflows/pytest.yaml)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![pydocstyle](https://img.shields.io/badge/pydocstyle-enabled-AD4CD3)](http://www.pydocstyle.org/en/stable/)\n[![License: GPLv3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\nThis package builds the ['Tumoroscope'](https://www.biorxiv.org/content/10.1101/2022.09.22.508914v1) (Shafighi *et al.*, 2022, bioRxiv preprint) model with the probabilistic programming library [PyMC](https://www.pymc.io/welcome.html).\n'Tumoroscope' is a \"probabilistic model that accurately infers cancer clones and their high-resolution localization by integrating pathological images, whole exome sequencing, and spatial transcriptomics data.\"\n\n![Tumoroscope diagram](https://raw.githubusercontent.com/jhrcook/tumoroscope-pymc/master/tumoroscope-diagram.jpeg)\n\n## Installation\n\n> As this package provides a model produced using PyMC, I recommend first creating a virtual environment using `conda` and installing the PyMC library.\n> You can follow their instructions [here](https://www.pymc.io/projects/docs/en/latest/installation.html).\n\nYou can install this package using `pip` either from PyPI\n\n```bash\npip install tumoroscope-pymc\n```\n\nor from GitHub\n\n```\npip install git+https://github.com/jhrcook/tumoroscope-pymc.git\n```\n\n## Background\n\nBelow is the abstract of the paper the introduced the 'Tumoroscope' package:\n\n> Spatial and genomic heterogeneity of tumors is the key for cancer progression, treatment, and survival. However, a technology for direct mapping the clones in the tumor tissue based on point mutations is lacking. Here, we propose Tumoroscope, the first probabilistic model that accurately infers cancer clones and their high-resolution localization by integrating pathological images, whole exome sequencing, and spatial transcriptomics data. In contrast to previous methods, Tumoroscope explicitly addresses the problem of deconvoluting the proportions of clones in spatial transcriptomics spots. Applied to a reference prostate cancer dataset and a newly generated breast cancer dataset, Tumoroscope reveals spatial patterns of clone colocalization and mutual exclusion in sub-areas of the tumor tissue. We further infer clone-specific gene expression levels and the most highly expressed genes for each clone. In summary, Tumoroscope enables an integrated study of the spatial, genomic, and phenotypic organization of tumors.\n\nShadi Darvish Shafighi, Agnieszka Geras, Barbara Jurzysta, Alireza Sahaf Naeini, Igor Filipiuk, Łukasz Rączkowski, Hosein Toosi, Łukasz Koperski, Kim Thrane, Camilla Engblom, Jeff Mold, Xinsong Chen, Johan Hartman, Dominika Nowis, Alessandra Carbone, Jens Lagergren, Ewa Szczurek. \"Tumoroscope: a probabilistic model for mapping cancer clones in tumor tissues.\" *bioRxiv*. 2022.09.22.508914; doi: https://doi.org/10.1101/2022.09.22.508914\n\n\n## Use\n\n> *If viewing this package on PyPI, I apologize, but all images below are not viewable.\n> Please click on \"Home\" in the sidebar or [here](https://github.com/jhrcook/tumoroscope-pymc) to go to the GitHub repository to see the full demonstration of this package.*\n\nBelow is a simple example of using this library.\nA small dataset is simulated and used to construct the Tumoroscope model in PyMC.\nThe \"Inference Button\" of PyMC is then used to sample from the posterior distribution.\n\nFirst all of the necessary imports for this example are below.\n\n\n```python\nfrom math import ceil\nfrom pathlib import Path\n\nimport arviz as az\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport pymc as pm\nimport seaborn as sns\n\nfrom tumoroscope import TumoroscopeData, build_tumoroscope_model\nfrom tumoroscope.mock_data import generate_simulated_data\n```\n\n\n```python\n# %matplotlib inline\n%config InlineBackend.figure_format='retina'\n```\n\n### Simulated data\n\nThe input to `build_tumoroscope_model()` is a `TumoroscopeData` object.\nThis object contains all of the data size parameters, model hyperparameters, and the observed data.\nIt also has a `validate()` method for checking basic assumptions about the values and data.\nBelow is an example of constructing a `TumoroscopeData` object with random data.\n\n\n```python\nTumoroscopeData(\n    K=5,\n    S=10,\n    M=100,\n    F=np.ones(5) / 5,\n    cell_counts=np.random.randint(1, 20, size=10),\n    C=np.random.beta(2, 2, size=(100, 5)),\n    D_obs=np.random.randint(2, 20, size=(100, 10)),\n    A_obs=np.random.randint(2, 20, size=(100, 10)),\n)\n```\n\n\n\n\n    Tumoroscope Data\n     Data sizes:\n       K: 5  S: 10  M: 100\n     Hyperparameters:\n       zeta_s: 1.0  F_0: 1.0  l: 100  r: 0.1  p: 1.0\n     Counts data:\n       D: provided  A: provided\n\n\n\nFor this example, we'll use the provided `generate_simulated_data()` function to create a dataset with 5 clones, 10 spatial transcriptomic spots, and up to 50 mutation positions.\nIn this data-generation function, the number of reads per cell per mutation position are randomly sampled from a Poisson distribution.\nHere, I have provided a relatively high rate of $\\lambda = 2.5$ to ensure the read coverage is very high for demonstration purposes of Tumoroscope.\nThe default value, though, provides more realistic read coverage for a good spatial transcriptomic study.\nThis function returns a `SimulatedTumoroscopeData` object containing the true underlying data (including a table of cell labels in each spot) and the input `TumoroscopeData` object as the `sim_data` attribute.\n\n\n```python\nsimulation = generate_simulated_data(\n    K=5, S=10, M=50, total_read_rate=2.5, random_seed=8\n)\nsimulation.sim_data.validate()\nsimulation.true_labels.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>spot</th>\n      <th>cell</th>\n      <th>clone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nBelow is a visualization of the cells in each spot.\nThe spots are represented by the horizontally-arrange boxes and each point is a cell, colored by its clone label.\nTo be clear, this information is only known because we simulated the data and the point of 'Tumoroscope' is to figure out these labels.\n\n\n```python\nnp.random.seed(3)\nplot_df = (\n    simulation.true_labels.copy()\n    .assign(\n        y=lambda d: np.random.normal(0, 0.5, len(d)),\n        x=lambda d: d[\"spot\"] + np.random.uniform(-0.2, 0.2, len(d)),\n    )\n    .astype({\"clone\": \"category\"})\n)\n_, ax = plt.subplots(figsize=(7, 0.7))\nsns.scatterplot(\n    data=plot_df, x=\"x\", y=\"y\", hue=\"clone\", ax=ax, alpha=0.8, edgecolor=None, s=25\n)\nfor i in range(1, simulation.sim_data.S):\n    ax.axvline(i - 0.5, lw=1, color=\"k\")\nax.set_xlim(-0.5, simulation.sim_data.S - 0.5)\nax.set_xlabel(\"spot\")\nax.set_ylabel(None)\nax.set_yticks([])\nax.legend(\n    loc=\"lower left\", bbox_to_anchor=(0, 1), title=\"clone\", ncol=simulation.sim_data.K\n)\nplt.show()\n```\n\n\n\n![png](README_files/README_12_0.png)\n\n\n\nBelow are the mutations assigned to each clone.\nIn real-world applications, this information comes from the bulk DNA data.\nThe zygosity of each mutation for each clone is also known (not shown here).\n\n\n```python\ncg = sns.clustermap(\n    simulation.clone_mutations.T,\n    figsize=(6, 2),\n    dendrogram_ratio=(0.1, 0.15),\n    cmap=\"Greys\",\n)\ncg.ax_heatmap.set_xlabel(\"position\")\ncg.ax_heatmap.set_ylabel(\"clone\")\ncg.ax_heatmap.set_xticklabels([])\ncg.ax_heatmap.tick_params(\"x\", size=0)\ncg.ax_col_dendrogram.set_title(\"Mutations in clones\")\nplt.show()\n```\n\n\n\n![png](README_files/README_14_0.png)\n\n\n\nFinally, the heatmaps below show the total read counts (left) and number of alternative read counts (right) per spot and mutation position.\nThis is the data gathered from the spatial transcriptomics.\n\n\n```python\nfig, axes = plt.subplots(ncols=2, figsize=(8, 5))\nsns.heatmap(simulation.sim_data.D_obs, cmap=\"flare\", ax=axes[0])\naxes[0].set_title(\"Total read counts\")\nsns.heatmap(simulation.sim_data.A_obs, cmap=\"viridis\", ax=axes[1])\naxes[1].set_title(\"Alternative read counts\")\n\nfor ax in axes:\n    ax.tick_params(size=0)\n    ax.set_xlabel(\"spot\")\n    ax.set_ylabel(\"position\")\n\nplt.show()\n```\n\n\n\n![png](README_files/README_16_0.png)\n\n\n\n### Model\n\nThe model is built by passing a `TumoroscopeData` object to the `build_tumoroscope_model()` function.\nThis function has other arguments including the option for wether to use the \"fixed\" form of the model where the number of cells per position is assumed to be accurately known.\nAs in the paper, the \"unfixed\" form of the model is default (i.e. `fixed = False`).\nBy default, the input data is validated, though this can be skipped incase I have applied incorrect assumptions to the data (if you believe this is a the case, please open an [Issue](https://github.com/jhrcook/tumoroscope-pymc/issues) so I can adjust the validation method.)\n\nBelow, I build the model with the simulated data and show the model structure.\n\n\n```python\ntumoroscope_model = build_tumoroscope_model(simulation.sim_data)\npm.model_to_graphviz(tumoroscope_model)\n```\n\n\n\n\n\n![svg](README_files/README_18_0.svg)\n\n\n\n\nWith the model built, we can sample from the posterior distribution using PyMC's \"Inference Button\": `pm.sample()`.\nTo make development easier, I have cached the posterior trace object, but sampling for this simulation originally took about 5 minutes.\n\n\n```python\ncache_fp = Path(\".cache\") / \"tumoroscope-simulation-example.netcdf\"\nif not cache_fp.parent.exists():\n    cache_fp.parent.mkdir()\n\nif cache_fp.exists():\n    print(\"Retrieving from cache.\")\n    trace = az.from_netcdf(cache_fp)\nelse:\n    with tumoroscope_model:\n        trace = pm.sample(500, tune=500, chains=2, cores=2, random_seed=7)\n        _ = pm.sample_posterior_predictive(\n            trace, extend_inferencedata=True, random_seed=7\n        )\n    trace.to_netcdf(cache_fp)\n```\n\n    Retrieving from cache.\n\n\n### Posterior analysis\n\nWe can now inspect the model's results.\n(Of course you would also want to conduct various diagnostic checks on the MCMC sampling process, but I have skipped that here.)\nWe can look at the estimates for the proportion of each clone in each spot of the spatial transcriptomics by inspecting $H$.\n\n\n```python\nh_post = az.summary(trace, var_names=[\"H\"])\nh_post.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean</th>\n      <th>sd</th>\n      <th>hdi_3%</th>\n      <th>hdi_97%</th>\n      <th>mcse_mean</th>\n      <th>mcse_sd</th>\n      <th>ess_bulk</th>\n      <th>ess_tail</th>\n      <th>r_hat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>H[s0, c0]</th>\n      <td>0.399</td>\n      <td>0.067</td>\n      <td>0.281</td>\n      <td>0.527</td>\n      <td>0.005</td>\n      <td>0.004</td>\n      <td>157.0</td>\n      <td>412.0</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>H[s0, c1]</th>\n      <td>0.121</td>\n      <td>0.051</td>\n      <td>0.041</td>\n      <td>0.226</td>\n      <td>0.004</td>\n      <td>0.003</td>\n      <td>199.0</td>\n      <td>309.0</td>\n      <td>1.01</td>\n    </tr>\n    <tr>\n      <th>H[s0, c2]</th>\n      <td>0.267</td>\n      <td>0.060</td>\n      <td>0.162</td>\n      <td>0.379</td>\n      <td>0.005</td>\n      <td>0.003</td>\n      <td>156.0</td>\n      <td>521.0</td>\n      <td>1.02</td>\n    </tr>\n    <tr>\n      <th>H[s0, c3]</th>\n      <td>0.177</td>\n      <td>0.046</td>\n      <td>0.092</td>\n      <td>0.258</td>\n      <td>0.003</td>\n      <td>0.002</td>\n      <td>295.0</td>\n      <td>561.0</td>\n      <td>1.01</td>\n    </tr>\n    <tr>\n      <th>H[s0, c4]</th>\n      <td>0.036</td>\n      <td>0.033</td>\n      <td>0.000</td>\n      <td>0.094</td>\n      <td>0.002</td>\n      <td>0.001</td>\n      <td>315.0</td>\n      <td>538.0</td>\n      <td>1.01</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nThe plot below shows the posterior distribution for the estimated proportion of the cells in each spot that belong to each clone.\n\n\n```python\nh_post = trace.posterior[\"H\"].to_dataframe().reset_index()\n_, ax = plt.subplots(figsize=(8, 3))\nsns.violinplot(\n    data=h_post,\n    x=\"spot\",\n    y=\"H\",\n    hue=\"clone\",\n    dodge=True,\n    scale=\"width\",\n    inner=None,\n    linewidth=0.5,\n    ax=ax,\n)\nax.set_ylim(0, 1)\nfor i in range(simulation.sim_data.S):\n    ax.axvline(i + 0.5, c=\"grey\", lw=0.5)\n\nax.set_xlabel(\"spot\")\nax.set_ylabel(\"proportion of cells\")\nax.legend(loc=\"upper left\", bbox_to_anchor=(1, 1), title=\"clone\")\nplt.show()\n```\n\n\n\n![png](README_files/README_24_0.png)\n\n\n\nAnd finally, we can compare the model's estimates (in red for each chain with mean and 89% HDI)v against the known proportions in each spot (blue).\nIn this case, the model was quite successful.\n\n\n```python\ndef frac_clone(s: pd.Series, k: int) -> float:\n    \"\"\"Fraction of cells in `s` that are clone `k`.\"\"\"\n    return np.mean(s == k)\n\n\nfig, axes = plt.subplots(\n    nrows=ceil(simulation.sim_data.K / 2),\n    ncols=2,\n    figsize=(8, 1 * simulation.sim_data.K),\n    sharex=True,\n)\nfor ax, clone_i in zip(axes.flatten(), range(simulation.sim_data.K)):\n    clone = f\"c{clone_i}\"\n    ax.set_title(f\"clone {clone}\")\n\n    # Plot true fraction of clones at each spot.\n    true_clone_frac = simulation.true_labels.groupby([\"spot\"])[\"clone\"].apply(\n        frac_clone, k=clone_i\n    )\n    ax.scatter(\n        true_clone_frac.index.tolist(),\n        true_clone_frac.values.tolist(),\n        c=\"tab:blue\",\n        s=8,\n        zorder=10,\n    )\n\n    # Plot population fraction.\n    ax.axhline(simulation.sim_data.F[clone_i], lw=0.8, c=\"k\", ls=\"--\")\n\n    # Plot posterior.\n    H = trace.posterior[\"H\"].sel(clone=[clone])\n    dx = np.linspace(-0.1, 0.1, len(H.coords[\"chain\"]))\n    spot = np.arange(simulation.sim_data.S)\n    for chain in H.coords[\"chain\"]:\n        _x = spot + dx[chain]\n        ax.scatter(_x, H.sel(chain=chain).mean(axis=(0)), c=\"tab:red\", s=2, zorder=20)\n        _hdi = az.hdi(H, coords={\"chain\": [chain]})[\"H\"].values.squeeze()\n        ax.vlines(\n            x=_x, ymin=_hdi[:, 0], ymax=_hdi[:, 1], lw=0.5, zorder=10, color=\"tab:red\"\n        )\n    # ax.set_ylabel(\"proportion of cells\")\n    ax.set_ylabel(None)\n    ax.set_xlabel(None)\n\nfig.supxlabel(\"spot\", va=\"bottom\")\nfig.supylabel(\"proportion of cells\")\n\nfor ax in axes.flatten()[simulation.sim_data.K :]:\n    ax.axis(\"off\")\n\nfig.tight_layout()\nplt.show()\n```\n\n\n\n![png](README_files/README_26_0.png)\n\n\n\n## Development\n\nThe development environment can be set up with `conda` (or faster using `mamba`).\nThis will handle the installation of PyMC better than using `pip`.\n\n```bash\nmamba env create -f conda.yaml\nconda activate tumoroscope-pymc\n```\n\nThe test suite can be run manually using the `pytest` command or using `tox` which also manages the test environment.\n\n```bash\ntox\n```\n\nThis README is built from a Jupyter notebook and can be re-executed and converted to Markdown using another `tox` command.\n\n```bash\ntox -e readme\n```\n\nFeature requests and bugs are welcome in [Issues](https://github.com/jhrcook/tumoroscope-pymc/issues) and contributions are also welcome.\n\n---\n\n## Environment information\n\n\n\n```python\n%load_ext watermark\n%watermark -d -u -v -iv -b -h -m\n```\n\n    Last updated: 2022-10-25\n\n    Python implementation: CPython\n    Python version       : 3.10.6\n    IPython version      : 8.5.0\n\n    Compiler    : Clang 13.0.1\n    OS          : Darwin\n    Release     : 21.6.0\n    Machine     : x86_64\n    Processor   : i386\n    CPU cores   : 4\n    Architecture: 64bit\n\n    Hostname: JHCookMac.local\n\n    Git branch: master\n\n    pandas    : 1.5.1\n    numpy     : 1.23.4\n    pymc      : 4.2.2\n    matplotlib: 3.6.1\n    seaborn   : 0.12.0\n    arviz     : 0.13.0\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "pymc,bayesian,tumoroscope,model,spatial-transcriptomics",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "tumoroscope-pymc",
    "package_url": "https://pypi.org/project/tumoroscope-pymc/",
    "platform": null,
    "project_url": "https://pypi.org/project/tumoroscope-pymc/",
    "project_urls": {
      "Home": "https://github.com/jhrcook/tumoroscope-pymc"
    },
    "release_url": "https://pypi.org/project/tumoroscope-pymc/0.1.0/",
    "requires_dist": [
      "numpy >= 1.23.0",
      "pymc >= 4.0.0"
    ],
    "requires_python": ">=3.9",
    "summary": "'Tumoroscope' model built with PyMC.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15525743,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "82b79cc4cfb97f281e04daeac97bef85cb21fd29188adcc0c9e8780789129819",
          "md5": "3d544ad6845d71314f9ee28337aa0898",
          "sha256": "d01b4ded53eab8ebd6f19346e858e5cff5023a3af8d1db32044c398dca5587ca"
        },
        "downloads": -1,
        "filename": "tumoroscope_pymc-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d544ad6845d71314f9ee28337aa0898",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 23840,
        "upload_time": "2022-10-25T17:00:21",
        "upload_time_iso_8601": "2022-10-25T17:00:21.629698Z",
        "url": "https://files.pythonhosted.org/packages/82/b7/9cc4cfb97f281e04daeac97bef85cb21fd29188adcc0c9e8780789129819/tumoroscope_pymc-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7f4f17cb19cc758090f05e9e3feae7fc9eaf66db18c4a07ba0bbc845dedbf770",
          "md5": "800c5b563115d0c32b3e6c2c7422d5d1",
          "sha256": "be7859dcebad28a376e45acf5fc7e22355c23db9b80dc15546151497de36a50a"
        },
        "downloads": -1,
        "filename": "tumoroscope-pymc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "800c5b563115d0c32b3e6c2c7422d5d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 1022032,
        "upload_time": "2022-10-25T17:00:28",
        "upload_time_iso_8601": "2022-10-25T17:00:28.565864Z",
        "url": "https://files.pythonhosted.org/packages/7f/4f/17cb19cc758090f05e9e3feae7fc9eaf66db18c4a07ba0bbc845dedbf770/tumoroscope-pymc-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "82b79cc4cfb97f281e04daeac97bef85cb21fd29188adcc0c9e8780789129819",
        "md5": "3d544ad6845d71314f9ee28337aa0898",
        "sha256": "d01b4ded53eab8ebd6f19346e858e5cff5023a3af8d1db32044c398dca5587ca"
      },
      "downloads": -1,
      "filename": "tumoroscope_pymc-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d544ad6845d71314f9ee28337aa0898",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 23840,
      "upload_time": "2022-10-25T17:00:21",
      "upload_time_iso_8601": "2022-10-25T17:00:21.629698Z",
      "url": "https://files.pythonhosted.org/packages/82/b7/9cc4cfb97f281e04daeac97bef85cb21fd29188adcc0c9e8780789129819/tumoroscope_pymc-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "7f4f17cb19cc758090f05e9e3feae7fc9eaf66db18c4a07ba0bbc845dedbf770",
        "md5": "800c5b563115d0c32b3e6c2c7422d5d1",
        "sha256": "be7859dcebad28a376e45acf5fc7e22355c23db9b80dc15546151497de36a50a"
      },
      "downloads": -1,
      "filename": "tumoroscope-pymc-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "800c5b563115d0c32b3e6c2c7422d5d1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 1022032,
      "upload_time": "2022-10-25T17:00:28",
      "upload_time_iso_8601": "2022-10-25T17:00:28.565864Z",
      "url": "https://files.pythonhosted.org/packages/7f/4f/17cb19cc758090f05e9e3feae7fc9eaf66db18c4a07ba0bbc845dedbf770/tumoroscope-pymc-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}