{
  "info": {
    "author": "Wentao Li",
    "author_email": "clarmy.lee@seniverse.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# easydingbot\n[![Build Status](https://travis-ci.org/seniverse/easydingbot.svg?branch=main)](https://travis-ci.org/seniverse/easydingbot)\n[![PyPI version](https://badge.fury.io/py/easydingbot.svg)](https://badge.fury.io/py/easydingbot)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/seniverse/easydingbot/issues)\n\nEasydingbot is a package to make dingbot easily to use.\n\n## Installation\nYou can install easydingbot by `pip`\n```shell\n$ pip install easydingbot\n```\nor\n```\n$ pip install git+https://github.com/seniverse/easydingbot@main\n```\n## Configuration\nYou must inject your dingbot's **webhook** and **secret-code** into configuration before using easydingbot.   \nPlease see [dingbot's documentation](https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq) to learn how to get webhook and secret-code.   \nAfter that, you can inject them by `easydingbot add-dingbot` command:\n```shell\n$ easydingbot add-dingbot\nIt's first time to set dingbot, we will use \"default\" as the first dingbot id.\nPlease input the webhook string (\"q\" to quit) >\nPlease input the secret string (\"q\" to quit) > \n```\nThen you can list all dingbots already in configuration by `easydingbot ls-dingbot` command:\n```shell\n$ easydingbot ls-dingbot\nThere are 1 dingbots in config as follow:\n  * default\n```\nIf you want to check whether this configuration can work well, you can use `easydingbot touch` command to test for once:\n```\n$ easydingbot touch\nDingbot of default's status is normal.\n```\nThe command above is equal to `easydingbot touch default`.   \nIf you want another's dingbot config, you can pass a new name(dingbot id) to `easydingbot add-dingbot`:\n```shell\n$ easydingbot add-dingbot another\nPlease input the webhook string (\"q\" to quit) >\nPlease input the secret string (\"q\" to quit) > \n```\n\nThen you will have two dingbot in your configuration.\n```\n$ easydingbot ls-dingbot\nThere are 2 dingbots in config as follow:\n  * another\n  * default\n```\nAnd you can assign their ids to touch.\n```\n$ easydingbot touch another\nDingbot of another status is normal.\n```\nIf you find your touched result is abnormal and suspect you inputed wrong webhook or secret-code, you can use `easydingbot add-dingbot` again, type the same dingbot id to overwrite it.   \nIf you want to remove one of dingbot, you can use `easydingbot rm-dingbot` command:\n```shell\n$ easydingbot rm-dingbot\nThere are 2 dingbots in config as follow:\n  * another\n  * default\nPlease choose one of above to remove (\"q\" to quit) > another\nRemoved another from config\n```\nIn addition, you can pass their ids to remove directly:\n```\n$ easydingbot rm-dingbot another default\nRemoved another from config\nRemoved default from config\n```\n\n## Usage\nEasydingbot's purpose is to make dingbot more easily to use, therefore it has only two concise function for now: `inform` and `feedback`.   \nLet's start with the `inform` function. It is the most basic function to send specific message to specific dingbot. `inform` has three arguments of `dingbot_id`, `title` and `text`. You can assign `dingbot_id` to choose one of dingbots to send, `title` and `text` can decide the content you are sending.\n```python\n>>> from easydingbot import inform\n\n    # to \"default\" dingbot with default title and text\n>>> inform()\n    # to \"default\" dingbot with title of \"my inform\" and text of \"something\"\n>>> inform(title='my inform', text='something')\n    # to \"another\" dingbot with default title and text\n>>> inform(dingbot_id='another')\n    # to \"another\" dingbot with title of \"my inform\" and text of \"something\"\n>>> inform(dingbot_id='another', title='my inform', text='something')\n```\nIf your configuration is correct, then the messages would be sent to your dingtalk groups.    \nAfter that, let's see the `feedback` decorator. This decorator is design for some long-period manual task's feedback.    \n> For example, you run a program with `nohup python ... &`, you estimated this program would run for a long time and got away to do something else. No one can tell you the program's running status before you rechecking its log, in other words, no feedback. Think that you find it crashed at 6 hours ago when you recheck the log, maybe you are going mad. Or you find it already finished at 6 hours ago, you wasted 6 hours for subsequent processing. So you need someone to tell you the program's status regardless of finish or crash, `feedback` can do this.\n\n`feedback` decorator has only two arguments of `dingbot_id` and `title`, you can assign `dingbot_id` to choose which dingbot to send, and assign `title` to identify the task name.\n\n```python\n>>> import time\n>>> from easydingbot import feedback\n\n>>> @feedback()\n... def long_time_succeed():\n...     time.sleep(3)\n...\n\n>>> long_time_succeed()\n('{\"errcode\":0,\"errmsg\":\"ok\"}', '{\"errcode\":0,\"errmsg\":\"ok\"}')\n```\nFor this example, it will send 2 messages like:\n\n> **TASK NAME**   \n> **TIME** : 2020-11-26T15:07:20.738476+08:00   \n> **STATUS** : START RUNNING\n\n> **TASK NAME**   \n> **TIME** : 2020-11-26T15:07:22.861785+08:00   \n> **STATUS**: FINISHED   \n> **ELAPSED TIME**: 0:00:02.123238\n\nThe `long_time_succeed`'s return value will be modified by `feedback` to the message status, `('{\"errcode\":0,\"errmsg\":\"ok\"}', '{\"errcode\":0,\"errmsg\":\"ok\"}')` means the two messages have been sent to dingtalk's host. Since this feature, you should not add `feedback` to any return-value-matters function.\nFor a task going to crash.\n```python\n>>> @feedback(dingbot_id='another', title='ANOTHER TASK')\n... def long_time_failed():\n...     time.sleep(3)\n...     1 / 0\n...\n\n>>> long_time_failed()\n('{\"errcode\":0,\"errmsg\":\"ok\"}', '{\"errcode\":0,\"errmsg\":\"ok\"}', 'ZeroDivisionError: division by zero')\n```\nFor crashed task, it will return another value of the error's type.   \nIt will send 2 messages like:\n\n> **ANOTHER TASK**   \n> **TIME** : 2020-11-26T15:07:22.962419+08:00   \n> **STATUS** : START RUNNING\n\n\n> **ANOTHER TASK**   \n> **TIME** : 2020-11-26T15:07:25.056812+08:00   \n> **STATUS**: CRASHED   \n> **TRACKBACK**: \n> ```\n> Traceback (most recent call last):\n>  File \"/Users/clarmylee/SNV/LAB/easy-dingbot/easydingbot/main.py\", line 116, in wrapper\n>    result = function(*args, **kwargs)\n>  File \"/Users/clarmylee/SNV/LAB/easy-dingbot/tests/test_feedback.py\", line 50, in some_task_failed\n>    1 / 0\n>ZeroDivisionError: division by zero\n>```\n\nIn addition, you can pass custom arguments to show in result text, for example:\n```python\n>>> @feedback(title='CUSTOM', AUTHOR='CLARMY', PRIORITY=5)\n... def long_time_succeed():\n...     print('long time')\n... \n>>> long_time_succeed()\nlong time\n('{\"errcode\":0,\"errmsg\":\"ok\"}', '{\"errcode\":0,\"errmsg\":\"ok\"}')\n```\nThe result:\n> **CUSTOM**   \n> **AUTHOR**: CLARMY   \n> **PRIORITY**: 5   \n> **TIME**: 2020-11-28T03:18:49.143275+08:00   \n> **STATUS**: START RUNNING\n\n> **CUSTOM**   \n> **AUTHOR**: CLARMY   \n> **PRIORITY**: 5   \n> **TIME**: 2020-11-28T03:18:49.293935+08:00   \n> **STATUS**: FINISHED   \n> **ELAPSED TIME**: 0:00:00.150647\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/seniverse/easydingbot",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easydingbot",
    "package_url": "https://pypi.org/project/easydingbot/",
    "platform": "",
    "project_url": "https://pypi.org/project/easydingbot/",
    "project_urls": {
      "Homepage": "https://github.com/seniverse/easydingbot"
    },
    "release_url": "https://pypi.org/project/easydingbot/0.0.5/",
    "requires_dist": [
      "fire (==0.3.1)",
      "pytest (==6.1.2)",
      "requests (==2.25.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "A package to make dingbot easily to use",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8766591,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00e6dab9f0560cd5da3b52b21b73330eb1bc139cb285fe244a407d8bef720e7c",
          "md5": "c843b3876efa7da0be13ce78e7f65582",
          "sha256": "fe67c17b0bd7dd86d178ab25fb82c9c0908d0cf7622f40dd4d738514ebb3b907"
        },
        "downloads": -1,
        "filename": "easydingbot-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c843b3876efa7da0be13ce78e7f65582",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10789,
        "upload_time": "2020-11-26T15:23:15",
        "upload_time_iso_8601": "2020-11-26T15:23:15.587869Z",
        "url": "https://files.pythonhosted.org/packages/00/e6/dab9f0560cd5da3b52b21b73330eb1bc139cb285fe244a407d8bef720e7c/easydingbot-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c3df65cd4f0ccbde3707ac1d2dcdf70c089a691e0350bc3497ffb0cc6b03cdf",
          "md5": "1a9ce4503b1e2c4da06cf050771217b0",
          "sha256": "56ab675fba089a349ee1fab3a6f054e0dc7dd079d5a3943760147ca5a37a72bf"
        },
        "downloads": -1,
        "filename": "easydingbot-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a9ce4503b1e2c4da06cf050771217b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10942,
        "upload_time": "2020-11-27T06:40:25",
        "upload_time_iso_8601": "2020-11-27T06:40:25.098485Z",
        "url": "https://files.pythonhosted.org/packages/5c/3d/f65cd4f0ccbde3707ac1d2dcdf70c089a691e0350bc3497ffb0cc6b03cdf/easydingbot-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb241ee2f869d8391f804ad03263664ae59b2830734320ebd1aeb3bbb5bdb13e",
          "md5": "2c8daf18be3e959cf8f1ed037814327a",
          "sha256": "812536a4821e21ec24d9133c2f01505aa146c5fae05c1c8ebde8310520bd574d"
        },
        "downloads": -1,
        "filename": "easydingbot-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c8daf18be3e959cf8f1ed037814327a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9460,
        "upload_time": "2020-11-27T09:15:49",
        "upload_time_iso_8601": "2020-11-27T09:15:49.660297Z",
        "url": "https://files.pythonhosted.org/packages/eb/24/1ee2f869d8391f804ad03263664ae59b2830734320ebd1aeb3bbb5bdb13e/easydingbot-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e45724938fbd18c9ea63a6d78875642ad3d65d53e581bc18d2999358217b9a4",
          "md5": "9699187a1c7d5a53a2c81269a9617224",
          "sha256": "8780d011dfabd841f479abaf5ef5785cec04006e4a276622169fc7662b42c39c"
        },
        "downloads": -1,
        "filename": "easydingbot-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9699187a1c7d5a53a2c81269a9617224",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9518,
        "upload_time": "2020-11-27T13:36:44",
        "upload_time_iso_8601": "2020-11-27T13:36:44.208047Z",
        "url": "https://files.pythonhosted.org/packages/8e/45/724938fbd18c9ea63a6d78875642ad3d65d53e581bc18d2999358217b9a4/easydingbot-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "807939206e8d01ef3d87493ee96969252889de19a4aee5a8f800edf7c5408185",
          "md5": "ed6f4eb84e3614ddfddc26638cc7dad6",
          "sha256": "6422f00ccc01aa0852bc352b57254e59b6d8d6c42a229f54d05f9504e58488a4"
        },
        "downloads": -1,
        "filename": "easydingbot-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed6f4eb84e3614ddfddc26638cc7dad6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10026,
        "upload_time": "2020-11-28T03:51:41",
        "upload_time_iso_8601": "2020-11-28T03:51:41.366394Z",
        "url": "https://files.pythonhosted.org/packages/80/79/39206e8d01ef3d87493ee96969252889de19a4aee5a8f800edf7c5408185/easydingbot-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "807939206e8d01ef3d87493ee96969252889de19a4aee5a8f800edf7c5408185",
        "md5": "ed6f4eb84e3614ddfddc26638cc7dad6",
        "sha256": "6422f00ccc01aa0852bc352b57254e59b6d8d6c42a229f54d05f9504e58488a4"
      },
      "downloads": -1,
      "filename": "easydingbot-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ed6f4eb84e3614ddfddc26638cc7dad6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10026,
      "upload_time": "2020-11-28T03:51:41",
      "upload_time_iso_8601": "2020-11-28T03:51:41.366394Z",
      "url": "https://files.pythonhosted.org/packages/80/79/39206e8d01ef3d87493ee96969252889de19a4aee5a8f800edf7c5408185/easydingbot-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}