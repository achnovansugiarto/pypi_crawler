{
  "info": {
    "author": "Bartosz Wójcik",
    "author_email": "support@pelock.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Security",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Radio Code Calculator Online & SDK for Python\n\n**[Radio Code Calculator](https://www.pelock.com/products/radio-code-calculator)** is an online service along with [Web API & SDK](https://www.pelock.com/products/radio-code-calculator/sdk) for generating car radio unlock codes for popular vehicle brands.\n\nFollowing a breakdown or a disconnection of the car battery, most of the vehicle radio & navigation units will ask for an unlocking code. It's standard anti-theft protection.\n\nOur car Radio Code Calculator allows you to generate **100% valid** radio codes to unlock car radios & navigation without the need to use the expensive service of authorized dealers.\n\n![Radio Code Calculator](https://www.pelock.com/img/en/products/radio-code-calculator/car-radio-code-calculator-online-web-api-sdk.jpg)\n\nThe service is available through a simple online interface and `Web API`, with multiple `SDK` development libraries for popular programming languages.\n\nThanks to our solution, you can create, for instance, mobile or web applications that allow for easy generation of radio codes.\n\n## Supported car models and radios\n\nOur service is being continuously developed and new algorithms are gradually added for new car models and their radios.\n\nIf a new algorithm is added, you will get automatic and free access to it as part of your current license.\n\nIndividual calculators are available on our site as a paid service for end customers. You can verify them and see lists of supported radios on the relevant subpages:\n\n* [Renault & Dacia](https://www.pelock.com/products/renault-and-dacia-car-radio-code-calculator-generator)\n* [Toyota ERC](https://www.pelock.com/products/toyota-erc-calculator-radio-unlock-code-generator)\n* [Jeep Cherokee](https://www.pelock.com/products/jeep-cherokee-radio-unlock-code-calculator-generator)\n* [Ford M Serial](https://www.pelock.com/products/ford-radio-code-m-serial-calculator-generator)\n* [Ford V Serial](https://www.pelock.com/products/ford-radio-code-v-serial-calculator-generator)\n* [Ford TravelPilot EX, FX & NX](https://www.pelock.com/products/ford-travelpilot-ex-fx-nx-radio-code-generator-calculator)\n* [Chrysler Panasonic TM9](https://www.pelock.com/products/chrysler-panasonic-tm9-car-radio-code-calculator-generator)\n* [Fiat Stilo & Bravo Visteon](https://www.pelock.com/products/fiat-stilo-bravo-visteon-radio-code-calculator-generator)\n* [Fiat DAIICHI MOPAR](https://www.pelock.com/products/fiat-daiichi-radio-code-calculator-generator)\n* [Nissan Glove Box Immobiliser PIN](https://www.pelock.com/products/nissan-glove-box-pin-code-calculator)\n* [Eclipse ESN Unlock Code Calculator](https://www.pelock.com/products/eclipse-esn-unlock-code-calculator)\n\n## Use of radio code calculator\n\nWhere and who can use the radio code generation service and make money from code generation?\n\n### ![Android](https://www.pelock.com/img/en/icons/android-32.png) App developers \nThe main audience for our software is clearly developers and programmers, either of mobile or desktop applications.\n\n### ![Shoping cart](https://www.pelock.com/img/en/icons/cart-32.png) Online stores \nIf you run an online e-commerce store, you can sell radio codes through it using our software solutions.\n\n### ![Car](https://www.pelock.com/img/en/icons/car-32.png) Auto repair shops\nWe also encourage car repair shops whose customers often use car radio unlocking services.\n\n### ![Person](https://www.pelock.com/img/en/icons/user-32.png) Private individuals\nPrivate individuals will also profit from our solution by generating codes and selling them on car forums or auction sites such as eBay, Craigslist.\n\n### No limits!\n\nYou can generate codes **without limitation** with your purchased one year license.\n\nSet your own price for generating a single code and start earning by using **tried and tested** algorithms from a programming language you know.\n\nIf you are not a programmer - don't worry. Just use our [online calculator](https://www.pelock.com/products/radio-code-calculator/online).\n\n## Installation\n\nThe preferred way of Radio Code Calculator Web API interface installation is via [pip](https://pypi.org/project/pip/).\n\nRun:\n\n```\npip install radio-code-calculator\n```\n\nor \n\n```\npython3 -m pip install radio-code-calculator\n```\n\nAnd then add this import to your source code:\n\n```python\nfrom radio_code_calculator import *\n```\n\nThe installation package is available at https://pypi.org/project/radio-code-calculator/\n\n## Packages for other programming languages\n\nThe installation packages have been uploaded to repositories for several popular programming languages and their source codes have been published on GitHub:\n\n| Repository   | Language | Installation | Package | GitHub |\n| ------------ | ---------| ------------ | ------- | ------ |\n| ![Packagist repository for PHP and Composer](https://www.pelock.com/img/logos/repo-packagist-composer.png) | PHP | Add the following line to `require` section of your `composer.json` file `\"pelock/radio-code-calculator\": \"*\"` | [Packagist](https://packagist.org/packages/pelock/radio-code-calculator) | [Sources](https://github.com/PELock/Radio-Code-Calculator-PHP)\n| ![PyPI repository for Python](https://www.pelock.com/img/logos/repo-pypi.png) | Python | Run `pip install radio-code-calculator` | [PyPi](https://pypi.org/project/radio-code-calculator/) | [Sources](https://github.com/PELock/Radio-Code-Calculator-Python)\n| ![NPM repository for JavaScript and TypeScript](https://www.pelock.com/img/logos/repo-npm.png) | JavaScript, TypeScript | Run `npm i radio-code-calculator` or add the following to `dependencies` section of your `package.json` file `\"dependencies\": { \"radio-code-calculator\": \"latest\" },` | [NPM](https://www.npmjs.com/package/radio-code-calculator) | [Sources](https://github.com/PELock/Radio-Code-Calculator-JavaScript)\n\n## Usage examples\n\n### Radio code generation\n\nThis example demonstrates code generation for a selected radio model. All input parameter validation is done on the server side and if the radio serial number has an invalid length or pattern - the service will return an error.\n\n```python\n#!/usr/bin/env python\n\n###############################################################################\n#\n# Radio Code Calculator API - WebApi interface usage example\n#\n# In this example, we will demonstrate how to generate a code for a specific\n# type of car radio.\n#\n# Version        : v1.1.3\n# Language       : Python\n# Author         : Bartosz Wójcik\n# Project        : https://www.pelock.com/products/radio-code-calculator\n# Homepage       : https://www.pelock.com\n#\n###############################################################################\n\n#\n# include Radio Code Calculator API module\n#\nfrom radio_code_calculator import *\n\n#\n# create Radio Code Calculator API class instance (we are using our activation key)\n#\nmyRadioCodeCalculator = RadioCodeCalculator(\"ABCD-ABCD-ABCD-ABCD\")\n\n#\n# generate radio code (using Web API)\n#\nerror, result = myRadioCodeCalculator.calc(RadioModels.FORD_M_SERIES, \"123456\")\n\nif error == RadioErrors.SUCCESS:\n    print(f'Radio code is {result[\"code\"]}')\nelif error == RadioErrors.INVALID_RADIO_MODEL:\n    print(\"Invalid radio model (not supported)\")\nelif error == RadioErrors.INVALID_SERIAL_LENGTH:\n    print(f'Invalid serial number length (expected {result[\"serialMaxLen\"]} characters)')\nelif error == RadioErrors.INVALID_SERIAL_PATTERN:\n    print(f'Invalid serial number regular expression pattern (expected {result[\"serialRegexPattern\"][\"python\"]} regex pattern)')\nelif error == RadioErrors.INVALID_SERIAL_NOT_SUPPORTED:\n    print(\"This serial number is not supported\")\nelif error == RadioErrors.INVALID_EXTRA_LENGTH:\n    print(f'Invalid extra data length (expected {result[\"extraMaxLen\"]} characters)')\nelif error == RadioErrors.INVALID_EXTRA_PATTERN:\n    print(f'Invalid extra data regular expression pattern (expected {result[\"extraRegexPattern\"][\"python\"]} regex pattern)')\nelif error == RadioErrors.INVALID_INPUT:\n    print(\"Invalid input data\")\nelif error == RadioErrors.INVALID_COMMAND:\n    print(\"Invalid command sent to the Web API interface\")\nelif error == RadioErrors.INVALID_LICENSE:\n    print(\"Invalid license key\")\nelif error == RadioErrors.ERROR_CONNECTION:\n    print(\"Something unexpected happen while trying to login to the service.\")\nelse:\n    print(f'Unknown error {error}')\n```\n\n### Radio code generation with additional offline validation\n\nRadio codes are generated based on input parameters such as the **radio's serial number**, among others.\n\nRadio serial numbers are different for different radios, they have different lengths and different patterns, some may consist of just digits e.g. `1234`, while others may consist of digits and letters e.g. `AB1234XYZ`.\n\nValidation of this data is done on the server side. However, to make things more efficient, we can use the information about available limits and patterns of particular serial numbers to, for example, set these limits in controls in our own applications without unnecessary calls to the `Web API`.\n\n```python\n#!/usr/bin/env python\n\n###############################################################################\n#\n# Radio Code Calculator API - WebApi interface usage example\n#\n# In this example, we will demonstrate how to generate a code for a specific\n# type of car radio. This example shows how to use an extended offline\n# validation.\n#\n# Version        : v1.1.3\n# Language       : Python\n# Author         : Bartosz Wójcik\n# Project        : https://www.pelock.com/products/radio-code-calculator\n# Homepage       : https://www.pelock.com\n#\n###############################################################################\n\n#\n# include Radio Code Calculator API module\n#\nfrom radio_code_calculator import *\n\n#\n# create Radio Code Calculator API class instance (we are using our activation key)\n#\nmyRadioCodeCalculator = RadioCodeCalculator(\"ABCD-ABCD-ABCD-ABCD\")\n\n#\n# generate a single radio unlocking code\n#\nserial: str = \"123456\"\nextra: str = \"\"\n\n#\n# select a radio model\n#\nradioModel: RadioModel = RadioModels.FORD_M_SERIES\n\n#\n# display radio model information, you can use it to set limits in your controls e.g.\n#\n# textFieldRadioSerial.maxLength = radioModel.serial_max_len\n# textFieldRadioSerial.regEx = radioModel.serial_regex_pattern\n#\n# (if allowed by your controls)\n#\nprint(f'Radio model {radioModel.name} expects a serial number of {radioModel.serial_max_len}'\n      f' length and {radioModel.serial_regex_pattern} regex pattern')\n\n# additional information\nif radioModel.extra_max_len > 0:\n    print(f'Additionally an extra field is required with {radioModel.extra_max_len} and'\n          f' and {radioModel.extra_regex_pattern} regex pattern')\n\n#\n# validate the serial number (offline) before sending the Web API request\n#\nerror = radioModel.validate(serial, extra)\n\nif error != RadioErrors.SUCCESS:\n\n    if error == RadioErrors.INVALID_SERIAL_LENGTH:\n        print(f'Invalid serial number length (expected {radioModel.serial_max_len} characters)')\n    elif error == RadioErrors.INVALID_SERIAL_PATTERN:\n        print(f'Invalid serial number regular expression pattern (expected {radioModel.serial_regex_pattern} regex pattern)')\n    elif error == RadioErrors.INVALID_SERIAL_NOT_SUPPORTED:\n        print(\"This serial number is not supported\")\n    elif error == RadioErrors.INVALID_EXTRA_LENGTH:\n        print(f'Invalid extra data length (expected {radioModel.extra_max_len} characters)')\n    elif error == RadioErrors.INVALID_EXTRA_PATTERN:\n        print(f'Invalid extra data regular expression pattern (expected {radioModel.extra_regex_pattern} regex pattern)')\n    exit(1)\n\n#\n# generate radio code (using Web API)\n#\nerror, result = myRadioCodeCalculator.calc(radioModel, \"123456\")\n\nif error == RadioErrors.SUCCESS:\n    print(f'Radio code is {result[\"code\"]}')\nelif error == RadioErrors.INVALID_RADIO_MODEL:\n    print(\"Invalid radio model (not supported)\")\nelif error == RadioErrors.INVALID_SERIAL_LENGTH:\n    print(f'Invalid serial number length (expected {result[\"serialMaxLen\"]} characters)')\nelif error == RadioErrors.INVALID_SERIAL_PATTERN:\n    print(f'Invalid serial number regular expression pattern (expected {result[\"serialRegexPattern\"][\"python\"]} regex pattern)')\nelif error == RadioErrors.INVALID_SERIAL_NOT_SUPPORTED:\n    print(\"This serial number is not supported\")\nelif error == RadioErrors.INVALID_EXTRA_LENGTH:\n    print(f'Invalid extra data length (expected {result[\"extraMaxLen\"]} characters)')\nelif error == RadioErrors.INVALID_EXTRA_PATTERN:\n    print(f'Invalid extra data regular expression pattern (expected {result[\"extraRegexPattern\"][\"python\"]} regex pattern)')\nelif error == RadioErrors.INVALID_INPUT:\n    print(\"Invalid input data\")\nelif error == RadioErrors.INVALID_COMMAND:\n    print(\"Invalid command sent to the Web API interface\")\nelif error == RadioErrors.INVALID_LICENSE:\n    print(\"Invalid license key\")\nelif error == RadioErrors.ERROR_CONNECTION:\n    print(\"Something unexpected happen while trying to login to the service.\")\nelse:\n    print(f'Unknown error {error}')\n```\n\n### Download list of supported radio code calculators\n\nIf you would like to download information about all supported radio models and their parameters such as serial number length and pattern - you can do so.\n\n```python\n#!/usr/bin/env python\n\n###############################################################################\n#\n# Radio Code Calculator API - WebApi interface usage example\n#\n# In this example we will list all the available calculators and, their\n# parameters like name, maximum length of the radio serial number and its\n# regex pattern.\n#\n# Version        : v1.1.3\n# Language       : Python\n# Author         : Bartosz Wójcik\n# Project        : https://www.pelock.com/products/radio-code-calculator\n# Homepage       : https://www.pelock.com\n#\n###############################################################################\n\n#\n# include Radio Code Calculator API module\n#\nfrom radio_code_calculator import *\n\n#\n# create Radio Code Calculator API class instance (we are using our activation key)\n#\nmyRadioCodeCalculator = RadioCodeCalculator(\"ABCD-ABCD-ABCD-ABCD\")\n\n#\n# get the list of the supported radio calculators and their parameters (max. length, regex pattern)\n#\nerror, radio_models = myRadioCodeCalculator.list()\n\nif error == RadioErrors.SUCCESS:\n\n    print(f'Supported radio models {len(radio_models)}:\\n')\n\n    for radio_model in radio_models:\n\n        print(f'Radio model name - {radio_model.name}')\n\n        print(f'Max. length of the radio serial number - {radio_model.serial_max_len}')\n        print(f'Regex pattern for the radio serial number - {radio_model.serial_regex_pattern}')\n\n        # is extra field specified?\n        if radio_model.extra_max_len > 0:\n            print(f'Max. length of the radio extra data - {radio_model.extra_max_len}')\n            print(f'Regex pattern for the radio extra data - {radio_model.extra_regex_pattern}')\n\n        print()\n\nelif error == RadioErrors.INVALID_LICENSE:\n    print(\"Invalid activation key!\")\nelse:\n    print(f'Something unexpected happen while trying to login to the service (error code {error}).')\n```\n\n### Downloading the parameters of the selected radio calculator\n\nYou can download the parameters of the selected calculator.\n\n```python\n#!/usr/bin/env python\n\n###############################################################################\n#\n# Radio Code Calculator API - WebApi interface usage example\n#\n# In this example, we will demonstrate how to get information about the\n# specific radio calculator and its parameters (max. length & regex pattern).\n#\n# Version        : v1.1.3\n# Language       : Python\n# Author         : Bartosz Wójcik\n# Project        : https://www.pelock.com/products/radio-code-calculator\n# Homepage       : https://www.pelock.com\n#\n###############################################################################\n\n#\n# include Radio Code Calculator API module\n#\nfrom radio_code_calculator import *\n\n#\n# create Radio Code Calculator API class instance (we are using our activation key)\n#\nmyRadioCodeCalculator = RadioCodeCalculator(\"ABCD-ABCD-ABCD-ABCD\")\n\n#\n# query information about the radio model\n#\nerror, radioModel = myRadioCodeCalculator.info(\"ford-m-series\")\n\nif error == RadioErrors.SUCCESS:\n\n    print(f'Radio model name - {radioModel.name}')\n\n    print(f'Max. length of the radio serial number - {radioModel.serial_max_len}')\n    print(f'Regex pattern for the radio serial number - {radioModel.serial_regex_pattern}')\n\n    # is extra field specified?\n    if radioModel.extra_max_len > 0:\n        print(f'Max. length of the radio extra data - {radioModel.extra_max_len}')\n        print(f'Regex pattern for the radio extra data - {radioModel.extra_regex_pattern}')\n\n    print()\n\nelif error == RadioErrors.INVALID_LICENSE:\n    print(\"Invalid license key!\")\nelse:\n    print(f'Something unexpected happen while trying to login to the service (error code {error}).')\n```\n\n### Checking activation key\n\nBy checking the activation key status, we will get information about the license owner, license type and license expiration date.\n\n```python\n#!/usr/bin/env python\n\n###############################################################################\n#\n# Radio Code Calculator API - WebApi interface usage example\n#\n# In this example we will verify our activation key status.\n#\n# Version        : v1.1.3\n# Language       : Python\n# Author         : Bartosz Wójcik\n# Project        : https://www.pelock.com/products/radio-code-calculator\n# Homepage       : https://www.pelock.com\n#\n###############################################################################\n\n#\n# include Radio Code Calculator API module\n#\nfrom radio_code_calculator import *\n\n#\n# create Radio Code Calculator API class instance (we are using our activation key)\n#\nmyRadioCodeCalculator = RadioCodeCalculator(\"ABCD-ABCD-ABCD-ABCD\")\n\n#\n# login to the service\n#\nerror, result = myRadioCodeCalculator.login()\n\n#\n# result[] array holds the information about the license\n#\n# result[\"license\"][\"activationStatus\"] - True if license is active, False on invalid/expired keys\n# result[\"license\"][\"userName\"] - user name/company name of the license owner\n# result[\"license\"][\"type\"] - license type (0 - Personal License, 1 - Company License)\n# result[\"license\"][\"expirationDate\"] - license expiration date (in YYYY-MM-DD format)\n#\nif error == RadioErrors.SUCCESS:\n    print(f'License activation status - {\"True\" if result[\"license\"][\"activationStatus\"] else \"False\"}')\n    print(f'License owner - {result[\"license\"][\"userName\"]}')\n    print(f'License type - {\"Personal\" if result[\"license\"][\"type\"] == 0 else \"Company\"}')\n    print(f'Expiration date - {result[\"license\"][\"expirationDate\"]}')\n\nelif error == RadioErrors.INVALID_LICENSE:\n    print(\"Invalid license key!\")\nelse:\n    print(f'Something unexpected happen while trying to login to the service (error code {error}).')\n```\n\n## Got questions?\n\nIf you are interested in the Radio Code Calculator Web API or have any questions regarding radio code generator SDK packages, technical or legal issues, or if something is not clear, [please contact me](https://www.pelock.com/contact). I'll be happy to answer all of your questions.\n\nBartosz Wójcik\n\n* Visit my site at — https://www.pelock.com\n* Twitter — https://twitter.com/PELock\n* GitHub — https://github.com/PELock\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.pelock.com/products/radio-code-calculator",
    "keywords": "radio code navigation calculator generator vehicle car automotive radiocode radiocodes api",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "radio-code-calculator",
    "package_url": "https://pypi.org/project/radio-code-calculator/",
    "platform": null,
    "project_url": "https://pypi.org/project/radio-code-calculator/",
    "project_urls": {
      "Homepage": "https://www.pelock.com/products/radio-code-calculator"
    },
    "release_url": "https://pypi.org/project/radio-code-calculator/1.1.3/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "Radio Code Calculator is an online service along with Web API and SDK for generating car radio unlock codes for popular vehicle brands.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17347651,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe00772da6342cadb6c5c89d4985f1fd9db14822aa55d0e96d9a39757304d2a1",
          "md5": "9d5f966ae1445c5050885ee39da41ba1",
          "sha256": "92f9cfefe263c738ea0cd55938719db751112f6d775a3b0e12ec2e8ae5ec11e0"
        },
        "downloads": -1,
        "filename": "radio_code_calculator-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d5f966ae1445c5050885ee39da41ba1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8794,
        "upload_time": "2023-02-13T19:04:41",
        "upload_time_iso_8601": "2023-02-13T19:04:41.585569Z",
        "url": "https://files.pythonhosted.org/packages/fe/00/772da6342cadb6c5c89d4985f1fd9db14822aa55d0e96d9a39757304d2a1/radio_code_calculator-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4f223a486d65f041886feeb4a0ce8006eb7e5e23226357790e235609bcc0c9a",
          "md5": "418232e9f2c9e84de44b25b866b84b8e",
          "sha256": "ef6addf32edf40770f00a5088e051c8c7fc138f991882ae4997deb23a2eb1abd"
        },
        "downloads": -1,
        "filename": "radio_code_calculator-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "418232e9f2c9e84de44b25b866b84b8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12836,
        "upload_time": "2023-02-13T19:04:46",
        "upload_time_iso_8601": "2023-02-13T19:04:46.551833Z",
        "url": "https://files.pythonhosted.org/packages/f4/f2/23a486d65f041886feeb4a0ce8006eb7e5e23226357790e235609bcc0c9a/radio_code_calculator-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd717432e04b3058f37ae42220d208063bf9b4b4117d2f2b5ff96292b7650c7b",
          "md5": "202d5b891fc1b11e7195be46a003548f",
          "sha256": "c9d02caedc30f593f6bae4b16ae0e58051f54648ea163dc8ed937a84973521c7"
        },
        "downloads": -1,
        "filename": "radio_code_calculator-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "202d5b891fc1b11e7195be46a003548f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9274,
        "upload_time": "2023-02-27T00:34:08",
        "upload_time_iso_8601": "2023-02-27T00:34:08.539115Z",
        "url": "https://files.pythonhosted.org/packages/fd/71/7432e04b3058f37ae42220d208063bf9b4b4117d2f2b5ff96292b7650c7b/radio_code_calculator-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b92ce2181e04e151fac26b5c331f15bffc5844f803f6a4cb8bd13c8da676533f",
          "md5": "31c87b27c11353dbad8781643fd651e9",
          "sha256": "876688538595dbb22da2cc61d853e4040b77656dbdc67e148a9810b901b77722"
        },
        "downloads": -1,
        "filename": "radio_code_calculator-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "31c87b27c11353dbad8781643fd651e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13653,
        "upload_time": "2023-02-27T00:34:10",
        "upload_time_iso_8601": "2023-02-27T00:34:10.569798Z",
        "url": "https://files.pythonhosted.org/packages/b9/2c/e2181e04e151fac26b5c331f15bffc5844f803f6a4cb8bd13c8da676533f/radio_code_calculator-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c4f9c2739a564d4c37df7d4cade3c2114a3c0cfef9d01a50247a3de38e4d6a7",
          "md5": "bbf3c677d9112c398f66d42d848877e2",
          "sha256": "c5a4176a8d6f7a0417210cb210c3a4b75e760ac24d198a7f26ce9d815774bb29"
        },
        "downloads": -1,
        "filename": "radio_code_calculator-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bbf3c677d9112c398f66d42d848877e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9360,
        "upload_time": "2023-03-11T20:01:24",
        "upload_time_iso_8601": "2023-03-11T20:01:24.813886Z",
        "url": "https://files.pythonhosted.org/packages/4c/4f/9c2739a564d4c37df7d4cade3c2114a3c0cfef9d01a50247a3de38e4d6a7/radio_code_calculator-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4cad00dbf62ef2ff9670be4e1beaf32d42411835705b0a4752bd59c48f26d8b",
          "md5": "18b0b7762fc46bf196062e5c72a58419",
          "sha256": "66bb8428d7f3e4536cb08f167c74ee2aedad6f6d41c89034fad457bd7c83ab11"
        },
        "downloads": -1,
        "filename": "radio_code_calculator-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "18b0b7762fc46bf196062e5c72a58419",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13746,
        "upload_time": "2023-03-11T20:01:27",
        "upload_time_iso_8601": "2023-03-11T20:01:27.076832Z",
        "url": "https://files.pythonhosted.org/packages/f4/ca/d00dbf62ef2ff9670be4e1beaf32d42411835705b0a4752bd59c48f26d8b/radio_code_calculator-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3e2f567726792075402a28e3943ea0c8de838b61da61e0d80403665412a0f3e",
          "md5": "44b129315be2970f9c026753d8855919",
          "sha256": "7c4423baea3ea5187e9d6e532f8328dd79000be39b21da94feca9142b69f4154"
        },
        "downloads": -1,
        "filename": "radio_code_calculator-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44b129315be2970f9c026753d8855919",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9407,
        "upload_time": "2023-03-18T17:55:56",
        "upload_time_iso_8601": "2023-03-18T17:55:56.597931Z",
        "url": "https://files.pythonhosted.org/packages/e3/e2/f567726792075402a28e3943ea0c8de838b61da61e0d80403665412a0f3e/radio_code_calculator-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeb66ae126187893d592cd15c1fdd0bc185ff931914a8ac7e5b230493bb61965",
          "md5": "643a86d0667bd22f7e596bfca78fe839",
          "sha256": "ed62041507eaf1d59dfd43dbf9aceb0e752856e1caa5bb8593fecaf94e30d6b4"
        },
        "downloads": -1,
        "filename": "radio_code_calculator-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "643a86d0667bd22f7e596bfca78fe839",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13832,
        "upload_time": "2023-03-18T17:55:58",
        "upload_time_iso_8601": "2023-03-18T17:55:58.914282Z",
        "url": "https://files.pythonhosted.org/packages/ae/b6/6ae126187893d592cd15c1fdd0bc185ff931914a8ac7e5b230493bb61965/radio_code_calculator-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3e2f567726792075402a28e3943ea0c8de838b61da61e0d80403665412a0f3e",
        "md5": "44b129315be2970f9c026753d8855919",
        "sha256": "7c4423baea3ea5187e9d6e532f8328dd79000be39b21da94feca9142b69f4154"
      },
      "downloads": -1,
      "filename": "radio_code_calculator-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44b129315be2970f9c026753d8855919",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9407,
      "upload_time": "2023-03-18T17:55:56",
      "upload_time_iso_8601": "2023-03-18T17:55:56.597931Z",
      "url": "https://files.pythonhosted.org/packages/e3/e2/f567726792075402a28e3943ea0c8de838b61da61e0d80403665412a0f3e/radio_code_calculator-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aeb66ae126187893d592cd15c1fdd0bc185ff931914a8ac7e5b230493bb61965",
        "md5": "643a86d0667bd22f7e596bfca78fe839",
        "sha256": "ed62041507eaf1d59dfd43dbf9aceb0e752856e1caa5bb8593fecaf94e30d6b4"
      },
      "downloads": -1,
      "filename": "radio_code_calculator-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "643a86d0667bd22f7e596bfca78fe839",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13832,
      "upload_time": "2023-03-18T17:55:58",
      "upload_time_iso_8601": "2023-03-18T17:55:58.914282Z",
      "url": "https://files.pythonhosted.org/packages/ae/b6/6ae126187893d592cd15c1fdd0bc185ff931914a8ac7e5b230493bb61965/radio_code_calculator-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}