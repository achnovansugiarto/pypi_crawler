{
  "info": {
    "author": "Garcia Sylvain",
    "author_email": "garcia.6l20@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# cpppm\n> CPP Project Manager\n\n![master](https://github.com/Garcia6l20/cpppm/workflows/build-examples/badge.svg?branch=master) (master)  \n![devel](https://github.com/Garcia6l20/cpppm/workflows/build-examples/badge.svg?branch=devel) (devel)\n\n`cpppm` is a C/C++ build-system/package manager (through `conan`) that focus on flexibility.\n\nWhile (most of) other build systems are jailing you into a re-invented scripting\nlanguage, `cpppm` is nothing else but a python module that provides you some\nfacilities to build your software.\nThus, you can do everything you are able to do with python.\n\nThe `cpppm` API semantics is close to `CMake` (eg.: *link_libraries*, *compile_options*, etc...).\n\n### A basic example\n\nConsider following code:\n- *main.cpp*:\n```cpp\n#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\n#include <doctest/doctest.h>\n#include <fmt/format.h>\n\nTEST_CASE(\"cpppm loves conan\") {\n    CHECK(fmt::format(\"{1} loves {0} !!!\", \"conan\", \"cpppm\") == \"cpppm loves conan !!!\");\n}\n```\n- *project.py*:\n```python\n#!/usr/bin/env python3\nfrom cpppm import Project, main\n\nproject = Project('conan_requires')\nproject.requires = 'fmt/6.1.2', 'doctest/2.3.6'\nexe = project.main_executable()\nexe.sources = 'src/main.cpp'\nexe.link_libraries = 'fmt', 'doctest'\n\nif __name__ == '__main__':\n    main()\n```\nAt this point you'll be able to run:\n```bash\n$ ./project.py run conan_requires\n\n# Build output ommitted...\n\n[doctest] doctest version is \"2.3.6\"\n[doctest] run with \"--help\" for options\n===============================================================================\n[doctest] test cases:      1 |      1 passed |      0 failed |      0 skipped\n[doctest] assertions:      1 |      1 passed |      0 failed |\n[doctest] Status: SUCCESS!\n```\n\nCheck out the examples folder for more use cases.\n\n### Installation\n\n- By cloning this repository:\n```bash\ngit clone https://github.com/Garcia6l20/cpppm.git\ncd cpppm\npython setup.py install --user\n```\n- Available on [PyPi](https://pypi.org/project/cpppm/):\n```bash\npip install --user cpppm\n```\n\n### Commands\n\nDefault commands can be listed with a regular help request:\n```bash\n$ ./project.py -h\nUsage: project.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -v, --verbose             Let me talk about me.\n  -o, --out-directory TEXT  Build directory, generated files should go there.\n  -d, --debug               Print extra debug information.\n  -c, --clean               Remove all stuff before processing the following\n                            command.\n\n  -C, --config TEXT         Config name to use.\n  -h, --help                Show this message and exit.\n\nCommands:\n  build        Builds the project.\n  config       Project configuration command group.\n  install      Installs targets to destination.\n  interactive  Interactive python console with loaded project.\n  run          Runs the given TARGET with given ARGS.\n  shell        Interactive shell (cli commands in shell mode).\n  sync         Synchronize conan package recipe (conanfile.py).\n  test         Runs the unit tests.\n  toolchain    Toolchain command group.\n```\n\n### Conan biding\n\n`cpppm` is tidally coupled to `conan` and can be used as is to create\npackages.\n\nWhen you add requirements to your project a `conanfile.py` appears side by side\nwith you `project.py`.\nIt is used to install your dependencies or to allow conan to interact with your project.\n\nThe generated `conanfile.py` might not be edited or it should be automatically re-generated.\n\nSo, regular `conan` process applies directly to your project.\n\n```bash\ncd examples\nconan create .\nconan upload cpppm-examples -r my_repo\n```\n\nUser of your generated package should be able to use it with all build-systems\nhandled by conan and obviously with `cpppm` (see [test_package](./test_package)).\n\n### Shell\n\nAn interactive shell mode is provided with `click-shell`.\nTo enable interactive shell, install `cpppm` interactive mode:\n```bash\n$ python -m pip install cpppm[interactive]\n```\n\nThen enter interactive shell:\n```bash\n$ ./project.py shell\nEntering cpppm-examples shell...\ncpppm-examples $ help\nDocumented commands (type help <topic>):\n========================================\nbuild   install               interactive  shell  test     \nconfig  install-requirements  run          sync   toolchain\n\nUndocumented commands:\n======================\nexit  help  quit\n\ncpppm-examples $ build\n[... some output omitted ...]\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):building Executable[events]\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):compiling main.o (Executable[events])\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):linking events\ncpppm-examples $ run hello-cpppm\nSource directory: /home/sylvain/projects/cpppm/examples\nBuild directory: /home/sylvain/projects/cpppm/examples/build/gcc-11-x86_64-Release\nProject: cpppm-examples\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):using ccache\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):building Executable[hello-cpppm]\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):object /home/sylvain/projects/cpppm/examples/build/gcc-11-x86_64-Release/hello_cpppm/main.o is up-to-date\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):using ccache\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):building Executable[hello-cpppm]\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):object /home/sylvain/projects/cpppm/examples/build/gcc-11-x86_64-Release/hello_cpppm/main.o is up-to-date\nHello cpppm\ncpppm-examples $ quit\n```\n\n### Interactive console\n\nAn interactive console mode is provided with `IPython`, but not installed automatically.\nTo enable interactive console, install `cpppm` interactive mode:\n```bash\n$ python -m pip install cpppm[interactive]\n```\n\nThen enter interactive console:\n```bash\n$ ./project.py interactive\nPython 3.8.5 (default, Jul 28 2020, 12:59:40) \nType 'copyright', 'credits' or 'license' for more information\nIPython 7.19.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: await project.get_target('hello-cpppm').run('world')\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):using ccache\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):building Executable[hello-cpppm]\nINFO:cpppm.UnixCompiler(gcc-11-x86_64):object /home/sylvain/projects/cpppm/examples/build/gcc-11-x86_64-Release/hello_cpppm/main.o is up-to-date\nHello world\nOut[1]: (0, None, b'')\n\nIn [2]:\n```\n\n### Features\n\n- [ ] ~~CMakeLists.txt generation~~ (no more using CMake)\n- [x] Project compilation\n- [x] ~~Build events~~ (useless), generators (will probably be moved into generic Targets)\n- [x] Conan package dependencies management\n- [x] Executables invocation (automatically added to cli interface) \n- [x] Customizable (you can do anything you can do with python)\n- [x] Cli customization (cou can add any `@cpppm.cli.command` that you want to add, see [click](https://click.palletsprojects.com/))\n- [x] Unit testing (basic support)\n- [x] Conan package generation\n\n## Contributing\n\nWould be appreciated, no contribution guide, just [PEP-8 codding style](https://www.python.org/dev/peps/pep-0008/) and smart codding, fork/PR.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Garcia6l20/cpppm",
    "keywords": "c++,project-manager,cmake,conan",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cpppm",
    "package_url": "https://pypi.org/project/cpppm/",
    "platform": "",
    "project_url": "https://pypi.org/project/cpppm/",
    "project_urls": {
      "Homepage": "https://github.com/Garcia6l20/cpppm"
    },
    "release_url": "https://pypi.org/project/cpppm/1.0.0/",
    "requires_dist": [
      "Click (>=7.1.2)",
      "conan (>=1.31.2)",
      "jinja2 (>=2.11.2)",
      "nest-asyncio (>=1.4.3)",
      "semantic-version (>=2.8.5)",
      "IPython (>=7.19) ; extra == 'interactive'",
      "click-shell (>=2.0) ; extra == 'shell'"
    ],
    "requires_python": ">=3.8",
    "summary": "CPP Package Manager",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8821746,
  "releases": {
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75e20e0f5cd9222da42f92d33fa3392715d2e15a4e96cbea38f4ae422621f5ee",
          "md5": "ddb0eb35d9c9868134ac9a09ab0fc477",
          "sha256": "6060df3f1d7fa4d59c42eced8a107d0114a22cd26890ba4865c4926e0da294ac"
        },
        "downloads": -1,
        "filename": "cpppm-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ddb0eb35d9c9868134ac9a09ab0fc477",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25371,
        "upload_time": "2020-11-14T17:21:43",
        "upload_time_iso_8601": "2020-11-14T17:21:43.155035Z",
        "url": "https://files.pythonhosted.org/packages/75/e2/0e0f5cd9222da42f92d33fa3392715d2e15a4e96cbea38f4ae422621f5ee/cpppm-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7bfda4cb95a9b693d413371af2c260051ef1503bc475f10513c4170cacf2184",
          "md5": "80da055837e2116a619e7e19b19c8c2e",
          "sha256": "b54bfa1090f52b13a4f468c89857b6ca65aefe6849bf907c37f6997c7a620f58"
        },
        "downloads": -1,
        "filename": "cpppm-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "80da055837e2116a619e7e19b19c8c2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20946,
        "upload_time": "2020-11-14T17:21:44",
        "upload_time_iso_8601": "2020-11-14T17:21:44.411282Z",
        "url": "https://files.pythonhosted.org/packages/b7/bf/da4cb95a9b693d413371af2c260051ef1503bc475f10513c4170cacf2184/cpppm-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54292e6b1ca784dfdde14ad1bfe6ff17b1d6d78d73a080df7593117d99738114",
          "md5": "175bae017a94f5a66d820c0c6edd9ccb",
          "sha256": "059fa08d9e1dfe28747323b2e458481aff60cdf8f95da960210b6f3d8b978712"
        },
        "downloads": -1,
        "filename": "cpppm-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "175bae017a94f5a66d820c0c6edd9ccb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 37873,
        "upload_time": "2020-12-04T14:22:16",
        "upload_time_iso_8601": "2020-12-04T14:22:16.206293Z",
        "url": "https://files.pythonhosted.org/packages/54/29/2e6b1ca784dfdde14ad1bfe6ff17b1d6d78d73a080df7593117d99738114/cpppm-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be854dc1493558b668faeb8c168b167ae0e99ba10540a8428936fee585421a2f",
          "md5": "34dae010a8196d853da2d8392ef89500",
          "sha256": "7fba1c1974e2aa294f1c08c4852b286b9a90ad90a752136f541dfab41d331a63"
        },
        "downloads": -1,
        "filename": "cpppm-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34dae010a8196d853da2d8392ef89500",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 32449,
        "upload_time": "2020-12-04T14:22:17",
        "upload_time_iso_8601": "2020-12-04T14:22:17.262646Z",
        "url": "https://files.pythonhosted.org/packages/be/85/4dc1493558b668faeb8c168b167ae0e99ba10540a8428936fee585421a2f/cpppm-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54292e6b1ca784dfdde14ad1bfe6ff17b1d6d78d73a080df7593117d99738114",
        "md5": "175bae017a94f5a66d820c0c6edd9ccb",
        "sha256": "059fa08d9e1dfe28747323b2e458481aff60cdf8f95da960210b6f3d8b978712"
      },
      "downloads": -1,
      "filename": "cpppm-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "175bae017a94f5a66d820c0c6edd9ccb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 37873,
      "upload_time": "2020-12-04T14:22:16",
      "upload_time_iso_8601": "2020-12-04T14:22:16.206293Z",
      "url": "https://files.pythonhosted.org/packages/54/29/2e6b1ca784dfdde14ad1bfe6ff17b1d6d78d73a080df7593117d99738114/cpppm-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be854dc1493558b668faeb8c168b167ae0e99ba10540a8428936fee585421a2f",
        "md5": "34dae010a8196d853da2d8392ef89500",
        "sha256": "7fba1c1974e2aa294f1c08c4852b286b9a90ad90a752136f541dfab41d331a63"
      },
      "downloads": -1,
      "filename": "cpppm-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "34dae010a8196d853da2d8392ef89500",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 32449,
      "upload_time": "2020-12-04T14:22:17",
      "upload_time_iso_8601": "2020-12-04T14:22:17.262646Z",
      "url": "https://files.pythonhosted.org/packages/be/85/4dc1493558b668faeb8c168b167ae0e99ba10540a8428936fee585421a2f/cpppm-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}