{
  "info": {
    "author": "Ami Tavory",
    "author_email": "atavory at gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "====================\nUnittestRandGenState\n====================\n\n\n------------\nIntroduction\n------------\n\nRandomized unit tests are great. The inputs fed to your algorithm are not consistent across executions, and so each time the tests run successfully, your confidence in the algorithm grows. Unfortunately, when a test fails, this inconsistency makes it hard to duplicate the input until the problem is solved.\n\nThis library provides a simple metaclass for dropping into `unittest.TestCase`_ that addresses this. As long as a test fails, it will continue making the same random choices (via `random`_ or `numpy.random`_) each execution. Any test that passed the previous execution, will get a fresh set of random choices.\n\n.. _`unittest.TestCase`: http://docs.python.org/3/library/unittest.html#test-cases\n.. _`random`: http://docs.python.org/3/library/random.html\n.. _`numpy.random`: http://docs.scipy.org/doc/numpy-1.7.0/reference/routines.random.html\n\n\n-------\nExample\n-------\n\nConsider the following simplified example of a test case with three functions testing some algorithms. The first and third algorithms are OK, but the second has a bug when given a number that divides by 20 (the simplified  example asserts this directly).\n \n\n::\n\n    import random\n\n\n    class TestMyAlgs(unittest.TestCase):\n        # This \"algorithm\" is OK.\n        def test_ok(self):\n            i = random.randint(100, 200)\n            self.assertLess(i, i + 1)\n\n        # This \"algorithm\" fails for inputs that divide by 20.\n        def test_bad(self):\n            i = random.randint(100, 200)\n            self.assertNotEqual(i % 20, 0, i)\n\n        # This \"algorithm\" is OK too.\n        def test_another_ok(self):\n            i = random.randint(100, 200)\n            self.assertLess(i - 1, i)\n\nThe second function will fail approximately 5% of the executions. When it does so, it might be hard (especially in a real-life case) to reproduce the problem, and eventually solve it.\n\nUsing this library, a simple change makes things easier. Simply use\n``unittest_rand_gen_state.Saver`` as the metaclass:\n\n::\n\n    import random\n\n    import unittest_rand_gen_state\n\n\n    class TestMyAlgs(unittest.TestCase, metaclass = unittest_rand_gen_state.Saver):\n        ...\n\n\nor, using an older Python version:\n\n\n::\n\n    import random\n\n    import unittest_rand_gen_state\n\n\n    class TestMyAlgs(unittest.TestCase):\n        __metaclass__ = unittest_rand_gen_state.Saver\n        ...\n\nNothing else needs to be changed.\n\nOnce ``TestMyAlgs.test_bad`` first fails in some execution, then it will consistently fail in following executions. That is, say it fails the first time with\n::\n\n    ======================================================================\n    FAIL: test_bad (__main__.TestMyAlgs)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"/usr/local/lib/python2.7/dist-packages/unittest_rand_gen_state/__init__.py\", line 75, in wrapped\n        fn(*args, **kwargs)\n      File \"__init__.py\", line 21, in test_bad\n        self.assertNotEqual(i % 20, 0, i)\n    AssertionError: 140\n\n    ----------------------------------------------------------------------\n   \nthen every following execution will fail exactly the same way, until it is fixed.\n   \n\nThe two other tests, meanwhile, will run afresh all the while.\n\n\n---------------------------------------\nDownload, Installation, And Bugtracking\n---------------------------------------\n\n* The package is at PyPI_.\n\n    .. _PyPI: http://pypi.python.org/pypi/UnittestRandGenState\n\n* The usual setup for Python libraries is used. Type:\n   \n    ``$ pip install UnittestRandGenState``\n   \n    or\n\n    ``$ sudo pip install UnittestRandGenState``\n\n* Bugtracking is on `Google Code`_.\n\n    .. _`Google Code`: http://code.google.com/p/unittest-rand-state-bugtracker/issues/list?can=1&q=\n   \n   \n---------\nExtending\n---------\n\nThe metaclass supplied by this library deals with the states of `random`_ and `numpy.random`_, which should be sufficient for almost all tests. However, the library may be extended by dropping as a metaclass, a subclass of ``unittest_rand_gen_state.Saver`` supplying three class methods:\n   \n    * ``reset_state``: A method specifying the meaning of resetting the random-generation state (e.g., ``random.seed``)\n    * ``get_state``: A method specifying the query to call for getting the current random-generation state (e.g., ``random.getstate``)\n    * ``set_state``: A method specifying the function to call to restore the random-generation state using the value returned by ``get_state`` (e.g., ``random.setstate``)\n\nE.g., suppose a random-generation library, ``groovy_rng`` has the functions ``groovy_rng.seed`` (setting the state to some function determined by the current time), ``groovy_rng.get_state``, returning an int, and ``groovy_rng.set_state`` taking an int, then here is a metaclass for working with ``groovy_rng``:\n::\n\n    class GroovyRNGSaver(unittest_rand_gen_state.Saver):\n        reset_state = groovy_rng.seed\n        get_state = groovy_rng.get_state\n        set_state = groovy_rng.set_state\n\nThis metaclass can be used just like in the previous example.\n\n\n-------\nChanges\n-------\n\n.. csv-table:: Changes\n    :header: \"Version\", \"Date\", \"Description\"\n    :widths: 15, 15, 70\n    :delim: $\n\n    0.1.4.$ 15/03/2013 $ Duplicate class-name bugfix, Python 2/3 coexistance bugfix\n    0.1.3 $ 23/02/2013 $ Better test hashes, better support for extension\n    0.1.2 $ 22/02/2013 $ Doc bugfix\n    0.1.1 $ 20/02/2013 $ Less stateful design\n    0.1.0 $ 18/02/2013 $ Initial Release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/UnittestRandGenState",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "UnittestRandGenState",
    "package_url": "https://pypi.org/project/UnittestRandGenState/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/UnittestRandGenState/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/UnittestRandGenState"
    },
    "release_url": "https://pypi.org/project/UnittestRandGenState/0.1.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Smart random-generation state persistence for unittest",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 743538,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12878852359db3b9e467ab2caaeeed76678a6ac4c30c3792c5ab6e86caf91123",
          "md5": "b492bf818835eff253619ab66a35b531",
          "sha256": "79672259f0f9d857ac09aef5340db60ffb501dd98b51447c6fb4244c4934bfe2"
        },
        "downloads": -1,
        "filename": "UnittestRandGenState-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b492bf818835eff253619ab66a35b531",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4808,
        "upload_time": "2013-02-19T19:46:31",
        "upload_time_iso_8601": "2013-02-19T19:46:31.675393Z",
        "url": "https://files.pythonhosted.org/packages/12/87/8852359db3b9e467ab2caaeeed76678a6ac4c30c3792c5ab6e86caf91123/UnittestRandGenState-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ced04d71a00fefa5a749e56f96c4b469a58fe92c6e187dd3d411226577c8cc4",
          "md5": "cb55b21ceb802c5b90e06dd170e4c523",
          "sha256": "12b508c03a10076903bc8e2cbc008f49464a3b64e65320ef4c67d90da58e5eb2"
        },
        "downloads": -1,
        "filename": "UnittestRandGenState-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cb55b21ceb802c5b90e06dd170e4c523",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5212,
        "upload_time": "2013-02-20T22:25:28",
        "upload_time_iso_8601": "2013-02-20T22:25:28.659528Z",
        "url": "https://files.pythonhosted.org/packages/7c/ed/04d71a00fefa5a749e56f96c4b469a58fe92c6e187dd3d411226577c8cc4/UnittestRandGenState-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adab550d9bc2a2eb37911244270f4e86b4b84b8f89f636d11053d8383822f6b3",
          "md5": "504cf6fb50bf7c7f93d9d6e763802a44",
          "sha256": "bdb7564135ed2394e887ad61c052202652f1f78a5efe3eb36b7f39fd6f2b991f"
        },
        "downloads": -1,
        "filename": "UnittestRandGenState-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "504cf6fb50bf7c7f93d9d6e763802a44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5310,
        "upload_time": "2013-02-22T08:50:16",
        "upload_time_iso_8601": "2013-02-22T08:50:16.925630Z",
        "url": "https://files.pythonhosted.org/packages/ad/ab/550d9bc2a2eb37911244270f4e86b4b84b8f89f636d11053d8383822f6b3/UnittestRandGenState-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83cb35545c63be3e63062bd3e8970f678f9e56f7bc64048ae3fb0b5b7deb62c3",
          "md5": "f340a3d33a15f4a2752fa4e7e5ab8a41",
          "sha256": "746f22cdaf6104678b51c4a35f4cf1ccedd77db46481c6e956f116817fb99bb1"
        },
        "downloads": -1,
        "filename": "UnittestRandGenState-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f340a3d33a15f4a2752fa4e7e5ab8a41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5751,
        "upload_time": "2013-02-23T18:38:28",
        "upload_time_iso_8601": "2013-02-23T18:38:28.061550Z",
        "url": "https://files.pythonhosted.org/packages/83/cb/35545c63be3e63062bd3e8970f678f9e56f7bc64048ae3fb0b5b7deb62c3/UnittestRandGenState-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5570534f35a5d19e808a6875f140bff44cb265c5d6f9db21a58de8245bc22931",
          "md5": "39ac16950833f701c2de555d3b4b04e7",
          "sha256": "3d0c28c6c4ee3272e89a46ea7ca9252cccd1b04d64c0c84b4d74eb9cf8b55e44"
        },
        "downloads": -1,
        "filename": "UnittestRandGenState-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "39ac16950833f701c2de555d3b4b04e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6553,
        "upload_time": "2013-03-15T19:34:34",
        "upload_time_iso_8601": "2013-03-15T19:34:34.691658Z",
        "url": "https://files.pythonhosted.org/packages/55/70/534f35a5d19e808a6875f140bff44cb265c5d6f9db21a58de8245bc22931/UnittestRandGenState-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d83cb7ac8568640003463184e3dfcea73ef823687784f55dd1d08d0ecbd1d006",
          "md5": "f78854e1dc688d8c810528e02b35c528",
          "sha256": "62bec9d5fe53b4a05798276f9afc10121e0c6d93c15d4ed6438a85150e41b093"
        },
        "downloads": -1,
        "filename": "UnittestRandGenState-0.1.4.zip",
        "has_sig": false,
        "md5_digest": "f78854e1dc688d8c810528e02b35c528",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12671,
        "upload_time": "2013-03-15T20:07:56",
        "upload_time_iso_8601": "2013-03-15T20:07:56.170290Z",
        "url": "https://files.pythonhosted.org/packages/d8/3c/b7ac8568640003463184e3dfcea73ef823687784f55dd1d08d0ecbd1d006/UnittestRandGenState-0.1.4.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5570534f35a5d19e808a6875f140bff44cb265c5d6f9db21a58de8245bc22931",
        "md5": "39ac16950833f701c2de555d3b4b04e7",
        "sha256": "3d0c28c6c4ee3272e89a46ea7ca9252cccd1b04d64c0c84b4d74eb9cf8b55e44"
      },
      "downloads": -1,
      "filename": "UnittestRandGenState-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "39ac16950833f701c2de555d3b4b04e7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6553,
      "upload_time": "2013-03-15T19:34:34",
      "upload_time_iso_8601": "2013-03-15T19:34:34.691658Z",
      "url": "https://files.pythonhosted.org/packages/55/70/534f35a5d19e808a6875f140bff44cb265c5d6f9db21a58de8245bc22931/UnittestRandGenState-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d83cb7ac8568640003463184e3dfcea73ef823687784f55dd1d08d0ecbd1d006",
        "md5": "f78854e1dc688d8c810528e02b35c528",
        "sha256": "62bec9d5fe53b4a05798276f9afc10121e0c6d93c15d4ed6438a85150e41b093"
      },
      "downloads": -1,
      "filename": "UnittestRandGenState-0.1.4.zip",
      "has_sig": false,
      "md5_digest": "f78854e1dc688d8c810528e02b35c528",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12671,
      "upload_time": "2013-03-15T20:07:56",
      "upload_time_iso_8601": "2013-03-15T20:07:56.170290Z",
      "url": "https://files.pythonhosted.org/packages/d8/3c/b7ac8568640003463184e3dfcea73ef823687784f55dd1d08d0ecbd1d006/UnittestRandGenState-0.1.4.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}