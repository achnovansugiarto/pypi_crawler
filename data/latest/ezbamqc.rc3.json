{
  "info": {
    "author": "Ying Jin",
    "author_email": "yjin@cshl.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: Unix",
      "Programming Language :: C++",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "=======\r\nezBAMQC\r\n=======\r\n\r\n*\"ezBAMQC, a tool to check the quality of mapped next generation sequencing files.\"*\r\n\r\n:Codeology Icon:\r\n\r\n   .. image:: https://raw.githubusercontent.com/mhammell-laboratory/bamqc/master/doc/bamqc-icon.gif\r\n     :alt: generated at codeology.braintreepayments.com/mhammell-laboratory/bamqc\r\n     :align: right\r\n     :target: http://codeology.braintreepayments.com/mhammell-laboratory/bamqc\r\n\r\n:Description:\r\n\r\n   ezBAMQC is a tool to check the quality of either one or many mapped next-generation-sequencing datasets. It conducts comprehensive evaluations of aligned sequencing data from multiple aspects including: clipping profile, mapping quality distribution, mapped read length distribution, genomic/transcriptomic mapping distribution, inner distance distribution (for paired-end reads), ribosomal RNA contamination, transcript 5’ and 3’ end bias, transcription dropout rate, sample correlations, sample reproducibility, sample variations. It outputs a set of tables and plots and one HTML page that contains a summary of the results. Many metrics are designed for RNA-seq data specifically, but ezBAMQC can be applied to any mapped sequencing dataset such as RNA-seq, CLIP-seq, GRO-seq, ChIP-seq, DNA-seq and so on.\r\n\r\n:Links:\r\n\r\n    `Github Page <https://github.com/mhammell-laboratory/bamqc>`_\r\n\r\n    `Pypi Page <https://pypi.python.org/pypi/ezBAMQC>`_\r\n\r\n    `MHammell Lab <http://hammelllab.labsites.cshl.edu/software>`_\r\n\r\n:Authors:\r\n    Ying Jin, David Molik, and Molly Hammell\r\n\r\n:Version: 0.6.7\r\n\r\n:Contact:\r\n    Ying Jin (yjin@cshl.edu)\r\n\r\nInstallation guide for ezBAMQC for from source installs\r\n=======================================================\r\n\r\nWhen installing ezBAMQC there are several options, but the main point is: since ezBAMQC uses C++ STD 11 you'll need a version of GCC that can support that, this useally means 4.8 or 4.9. beyond that, you'll need Python, R and Corrplot for interfacing with the C code.\r\n\r\n:Intallation:\r\n   `Source Code <https://github.com/mhammell-laboratory/ezBAMQC/releases>`_\r\n\r\n   `Pypi <https://pypi.python.org/pypi?:action=display&name=ezBAMQC>`_\r\n\r\n:Prerequisites:\r\n    * `python2.7 <https://www.python.org/download/releases/2.7/>`_\r\n    * `R <https://www.r-project.org/>`_\r\n    * `corrplot <https://cran.r-project.org/web/packages/corrplot/>`_\r\n    * `GCC 4.8.1 or greater <https://gcc.gnu.org/gcc-4.8/>`_ GCC 4.9.1 or greater is recomended for PyPi install \r\n\r\n:Notes:\r\n    * While there are multiple methods of installing the prerequistes it may help to look at (if using a yum based linux distro):*\r\n    * `Devtoolset-3 <https://access.redhat.com/documentation/en-US/Red_Hat_Developer_Toolset/3/html/User_Guide/sect-Red_Hat_Developer_Toolset-Install.html>`_ for GCC compilers\r\n    * `IUS <https://ius.io/>`_ for Python2.7\r\n    * `Software Collections <https://www.softwarecollections.org/>`_ for collections of software (like devtoolset 3 or python)\r\n    * `rpmfinder <https://www.rpmfind.net/>`_ for searching rpms across mutliple systems\r\n\r\nSetup\r\n=====\r\n\r\n1) Make sure that the GCC comiler is in your PATH:\r\n\r\n::\r\n\r\n   export PATH=/path/to/gcc:$PATH\r\n\r\n2) Make sure that python2.7 is in your PYTHONPATH:\r\n\r\n::\r\n\r\n   export PYTHONPATH=/path/to/python2.7/site-packages:$PYTHONPATH\r\n\r\n3) There are three methods of installation of ezBAMQC, from source, from setup.py, and from pypi, once prequistes are setup. \r\n\r\nFrom Source\r\n~~~~~~~~~~~\r\n\r\n1) Download source \r\n\r\n2) Unpack tarball and go to the directory of the package: \r\n\r\n::\r\n\r\n   tar xvfz bamqc-0.6.7.tar.gz\r\n\r\n   cd bamqc-0.6.7\r\n\r\n3) Run make:\r\n\r\n::\r\n\r\n   make\r\n\r\nFrom Setup.py\r\n~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n   python2.7 setup.py install \r\n\r\nFrom Pypi\r\n~~~~~~~~~\r\n\r\n::\r\n\r\n   pip2.7 install BAMqc\r\n\r\nUsage\r\n=====\r\n\r\n::\r\n\r\n   ezBAMQC [-h] -i alignment_files [alignment_files ...] -r [refgene]\r\n   [-f [attrID]] [--rRNA [rRNA]] -o [dir] [--stranded [stranded]]\r\n   [-q [mapq]] [-l labels [labels ...]] [-t NUMTHREADS]\r\n\r\noptional arguments:\r\n\r\n::\r\n\r\n   -h, --help               show this help message and exit.\r\n   -i, --inputFile          alignment files. Could be multiple SAM/BAM files separated by space. Required.\r\n   -r, --refgene            gene annotation file in GTF format. Required\r\n   -f                       the read summation at which feature level in the GTF file. DEFAULT: gene_id.\r\n   --rRNA                   rRNA coordinates in BED format.\r\n   -o, --outputDir          output directory. Required.\r\n   --stranded               strandness of the library? \r\n                            yes : sense stranded\r\n                            reverse : reverse stranded\r\n                            no : not stranded\r\n                            DEFAULT: yes.\r\n   -q, --mapq               Minimum mapping quality (phred scaled) for an alignment to be called uniquely mapped. DEFAULT:30\r\n   -l, --label              Labels of input files. DEFAULT:smp1 smp2 ...\r\n   -t, --threads            Number of threads to use. DEFAULT:1\r\n\r\nExample: \r\n\r\n::\r\n\r\n   ezBAMQC -i test-data/exp_data/treat1.bam test-data/exp_data/treat2.bam test-data/exp_data/treat3.bam -r test-data/exp_data/hg9_refGene.gtf -q 30 --rRNA test-data/exp_data/hg19_rRNA.bed -o exp_output2\r\n\r\n   Please find the example output from folder test-data.\r\n\r\nDemo\r\n====\r\n\r\nWant to try ezBAMQC before trying it? you can now utilize our tool demo hosted on our `Yabi Demo <https://demo.bsr.tools/yabi>`_ to do so.\r\n\r\n+------------------------------------+\r\n|To login use username and password: |\r\n+====================================+\r\n|- username: **tdemo**               |\r\n|- password: **tdemo**               |\r\n+------------------------------------+\r\n\r\n.. image:: https://raw.githubusercontent.com/mhammell-laboratory/ezBAMQC/master/doc/demo-login.png\r\n  :alt: The BSR/MHammell lab yabi installation\r\n  :align: center\r\n  :target: https://demo.bsr.tools/yabi\r\n\r\nThe login screen, usernname and password go in the top right corner.\r\n\r\n.. image:: https://raw.githubusercontent.com/mhammell-laboratory/ezBAMQC/master/doc/demo-show-all.png\r\n  :alt: The BSR/MHammell lab yabi installation\r\n  :align: center\r\n  :target: https://demo.bsr.tools/yabi\r\n\r\nThe \"Design\" Frame, use the \"show all\" button to make visable the ezBAMQC tool.\r\n\r\n.. image:: https://raw.githubusercontent.com/mhammell-laboratory/ezBAMQC/master/doc/demo-show-files.png\r\n  :alt: The BSR/MHammell lab yabi installation\r\n  :align: center\r\n  :target: https://demo.bsr.tools/yabi\r\n\r\nThe ezBAMQC tool page, select appropriate files from the S3 instance or upload your own. \r\n\r\n  *A note on Yabi, Yabi was created by the Centre For Comparative Genomics, https://ccg.murdoch.edu.au/ . You can check our their more extensive Yabi Demo, https://ccgapps.com.au/yabi/ or their Yabi Wiki, https://bitbucket.org/ccgmurdoch/yabi/wiki/Home for more information.*\r\n\r\nFAQ\r\n===\r\nQ: Why use ezBAMQC?\r\n\r\nA: ezBAMQC is efficient and easy to use. With one command line, it reports a comprehensive evaluation of the data with a set of plots and tables.The ability to assess multiple samples together with high efficiency make it especially useful in cases where there are a large number of samples from the same condition, genotype, or treatment. ezBAMQC was written in C++ and supports multithreading. A mouse RNA-seq sample with 120M alignments can be done in 8 minutes with 5 threads.\r\n\r\nQ: Why the total number of reads reported by ezBAMQC does not match with samtools flagstat?\r\n\r\nA: The difference is because of non-uniquely mapped reads or multiply aligned reads (multi-reads). Samtools flagstat counts each multiple aligment as a different reads, but ezBAMQC counts reads accoriding to the read ID, i.e., each individual read will be counted once no matter that it is a uniquely mapped read or multi-read. \r\n\r\nQ: What is \"Low Quality Reads\" ?\r\n\r\nA: Reads marked as qc fail accoriding to SAM format or reads with mapping quality lower than the value set by the option -q will be considered as \"Low Quality Reads\".\r\n\r\nQ: How the setting of option -q alter the results? \r\n\r\nA: Reads with low quality, i.e., did not pass -q cutoff, are only counted in Total Reads, Mapped Reads, and Mappability by mapping quality plot. The rest of the report does not include low quality reads. \r\n\r\nQ: Do multi-reads (non-uniquely mapped reads) have been considered in Read distribution and gene quantification?\r\n\r\nA: No. Only uniquely mapped reads were counted. \r\n\r\n\r\nAcknowledgements\r\n================\r\n\r\n#) Samtools contributors\r\n#) Users' valuable feedback\r\n\r\nCopying & Distribution\r\n======================\r\n\r\nezBAMQC is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut *WITHOUT ANY WARRANTY*; without even the implied warranty of\r\n*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE*.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with ezBAMQC.  If not, see `this website <http://www.gnu.org/licenses/>`_",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://hammelllab.labsites.cshl.edu/software#BAMqc",
    "keywords": "Quality control BAM file",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ezBAMQC",
    "package_url": "https://pypi.org/project/ezBAMQC/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/ezBAMQC/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://hammelllab.labsites.cshl.edu/software#BAMqc"
    },
    "release_url": "https://pypi.org/project/ezBAMQC/0.6.7/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Quality control tools for NGS alignment file",
    "version": "0.6.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2053901,
  "releases": {
    "0.6.5": [],
    "0.6.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b699ac47337055b44c440a946cdc10ba639ae1756bff0500cf079a1a0c51450e",
          "md5": "b90bd45d2bff9234d61ab209b53136ef",
          "sha256": "435a812945a6f1cb43ea620f90a7ebbda08f69933b299c527eecbe09e2db728d"
        },
        "downloads": -1,
        "filename": "ezBAMQC-0.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b90bd45d2bff9234d61ab209b53136ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 983741,
        "upload_time": "2016-03-25T15:34:10",
        "upload_time_iso_8601": "2016-03-25T15:34:10.351439Z",
        "url": "https://files.pythonhosted.org/packages/b6/99/ac47337055b44c440a946cdc10ba639ae1756bff0500cf079a1a0c51450e/ezBAMQC-0.6.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebebea7db33f3d7cac11e837e82ddc4f238947b855a7ae99ec1e6d2206b1a070",
          "md5": "555b8b2911372b17d9f50474a86b44db",
          "sha256": "478560c3763bbca11e1dba3311eae83968fdcb7b8f0279801032466cf2cb7fed"
        },
        "downloads": -1,
        "filename": "ezBAMQC-0.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "555b8b2911372b17d9f50474a86b44db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2103533,
        "upload_time": "2016-03-28T14:30:19",
        "upload_time_iso_8601": "2016-03-28T14:30:19.796972Z",
        "url": "https://files.pythonhosted.org/packages/eb/eb/ea7db33f3d7cac11e837e82ddc4f238947b855a7ae99ec1e6d2206b1a070/ezBAMQC-0.6.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebebea7db33f3d7cac11e837e82ddc4f238947b855a7ae99ec1e6d2206b1a070",
        "md5": "555b8b2911372b17d9f50474a86b44db",
        "sha256": "478560c3763bbca11e1dba3311eae83968fdcb7b8f0279801032466cf2cb7fed"
      },
      "downloads": -1,
      "filename": "ezBAMQC-0.6.7.tar.gz",
      "has_sig": false,
      "md5_digest": "555b8b2911372b17d9f50474a86b44db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2103533,
      "upload_time": "2016-03-28T14:30:19",
      "upload_time_iso_8601": "2016-03-28T14:30:19.796972Z",
      "url": "https://files.pythonhosted.org/packages/eb/eb/ea7db33f3d7cac11e837e82ddc4f238947b855a7ae99ec1e6d2206b1a070/ezBAMQC-0.6.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}