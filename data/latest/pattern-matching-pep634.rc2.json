{
  "info": {
    "author": "MegaIng",
    "author_email": "trampchamp@hotmail.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development"
    ],
    "description": "# Pattern matching PEP 634\n\nThis is a python package implementing pattern-matching similar to what [PEP-634](https://www.python.org/dev/peps/pep-0634/) proposes.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install pattern-matching-pep634.\n\n```bash\npip install pattern-matching-pep634\n```\n\n## Usage\n\nThere are 4 different implementations of pattern matching in here.\n\nThe safest one is this:\n```python\nfrom pattern_matching import Matcher\n\nmatch = Matcher(Click, KeyPress, Quit)\n\nwith match(event.get()) as m:\n    if m.case('Click(position=(x, y))'):\n        handle_click_at(m.x, m.y)\n    elif m.case('KeyPress(key_name=\"Q\") | Quit()'):\n        m.game.quit()\n    elif m.case('KeyPress(key_name=\"up arrow\")'):\n        m.game.go_north()\n    elif m.case('KeyPress()'):\n        pass # Ignore other keystrokes\n    elif m.case('other_event'):\n        raise ValueError(f\"Unrecognized event: {m.other_event}\")\n```\n\n(This is based on an example in [PEP-636](https://www.python.org/dev/peps/pep-0636/))\n\nNote how you have to specify which names you will be using, and how you always have to use `m.` to access the capture values.\nThis is the so called `no_magic` implementation. This implementation will work even in Python3.7 and other implementations than CPython that support the same features as 3.7\n\n#### auto_lookup\n\nIf you don't want to specify which classes you will be using, but don't want to have the pattern matching messing with the locals, you can use `auto_lookup`\n\n```python\nfrom pattern_matching.auto_lookup import match\n\n\nwith match(event.get()) as m:\n    if m.case('Click(position=(x, y))'):\n        handle_click_at(m.x, m.y)\n    elif m.case('KeyPress(key_name=\"Q\") | Quit()'):\n        m.game.quit()\n    elif m.case('KeyPress(key_name=\"up arrow\")'):\n        m.game.go_north()\n    elif m.case('KeyPress()'):\n        pass # Ignore other keystrokes\n    elif m.case('other_event'):\n        raise ValueError(f\"Unrecognized event: {m.other_event}\")\n```\n\nYou still have to use `m.`, but at least you don't have to duplicate the class names and carry around a `Matcher` instance.\n\nNote that this might have weird edge cases and fail for some reason sometimes. (Most notably conflict between what you think is visible in a function vs. what really is)\n\n#### injecting\n\nThis is for those who don't want to type `m.` everywhere.\n```python\nfrom pattern_matching.injecting import match, case\n\n\nwith match(event.get()):\n    if case('Click(position=(x, y))'):\n        handle_click_at(x, y)\n    elif case('KeyPress(key_name=\"Q\") | Quit()'):\n        game.quit()\n    elif case('KeyPress(key_name=\"up arrow\")'):\n        game.go_north()\n    elif case('KeyPress()'):\n        pass # Ignore other keystrokes\n    elif case('other_event'):\n        raise ValueError(f\"Unrecognized event: {other_event}\")\n```\n\nThis will 'infect' the name space and put the captured names into it. It also does `auto_lookup`.\n\nThis is will only work on Python3.9. It might also randomly break with debuggers/coverage/tracing tools.\n\nNote that this heavily suffers from the problem of what locals are defined and what aren't, e.g. the problem of where names are looked up.\n\n\n#### full_magic\n\nThis is the one that is as close as possible to the syntax proposed in PEP-634\n\n```python\nfrom pattern_matching.full_magic import match\n\n\nwith match(event.get()):\n    if Click(position=(x, y)):\n        handle_click_at(x, y)\n    elif KeyPress(key_name=\"Q\") | Quit():\n        game.quit()\n    elif KeyPress(key_name=\"up arrow\"):\n        game.go_north()\n    elif KeyPress():\n        pass # Ignore other keystrokes\n    elif other_event:\n        raise ValueError(f\"Unrecognized event: {other_event}\")\n```\n\n(only differences to PEP-634 is `with match` instead of match, `if`/`elif` instead of `case` and `:=` instead of `as`)\n\nThis does source-code analysis to figure out what cases to take and which names do bind. This is also Python3.9 only, and might break with any minor release of python. But that is unlikely.\n\nNote: Sometimes, the small amount of optimization that python does can still break this:\n\n```python\nfrom pattern_matching.full_magic import match\n\n\nwith match(n):\n    if 1 | 2:\n        print(\"Smaller than three\")\n    elif 3:\n        print(\"Equal to three\")\n    elif _:\n        print(\"Bigger than three\")\n```\n\nPython's peephole optimizer will (normally) correctly figure out that only the first branch can be taken and throw away the rest of the code.\nThis means that `match` can not correctly jump to the other lines. To circumvent the optimizer, `c@` ('case') can be added to prevent the optimization\n\n```python\nfrom pattern_matching.full_magic import match\n\n\nwith match(n):\n    if c@ 1 | 2:\n        print(\"Smaller than three\")\n    elif c@ 3:\n        print(\"Equal to three\")\n    elif c@ _:\n        print(\"Bigger than three\")\n```\n This doesn't have to be done always, but it is a good first attempt if you get weird error messages.\n\n\n### Guards\n\nGuards are not directly implemented, but are supported via a simple `and` that can be added to a case:\n\n```python\nfrom pattern_matching.injecting import match, case\n\nwith match(p):\n    if case('(x, y)') and x == y:\n        print(\"X=Y, at\", x)\n    else:\n        print(\"Not on a diagonal\")\n```\n\nThis works similar for all options\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MegaIng/pattern-matching",
    "keywords": "pattern-matching,PEP-634,backport",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pattern-matching-pep634",
    "package_url": "https://pypi.org/project/pattern-matching-pep634/",
    "platform": "",
    "project_url": "https://pypi.org/project/pattern-matching-pep634/",
    "project_urls": {
      "Bug Reports": "https://github.com/MegaIng/pattern-matching/issues",
      "Homepage": "https://github.com/MegaIng/pattern-matching",
      "Source": "https://github.com/MegaIng/pattern-matching/"
    },
    "release_url": "https://pypi.org/project/pattern-matching-pep634/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Pattern matching, backport of PEP-634",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8616710,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bc2755520becfb9e947904ea9fe2c248b0c2f6656f6df2a14c719ab0984811c",
          "md5": "5847a632e226d83040374557acb448ec",
          "sha256": "1d3039264b85db29ec9ab764e6ccde933e6b55aae22bde6bb22f8466d7d44f77"
        },
        "downloads": -1,
        "filename": "pattern-matching-pep634-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5847a632e226d83040374557acb448ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14066,
        "upload_time": "2020-11-09T13:25:41",
        "upload_time_iso_8601": "2020-11-09T13:25:41.962779Z",
        "url": "https://files.pythonhosted.org/packages/1b/c2/755520becfb9e947904ea9fe2c248b0c2f6656f6df2a14c719ab0984811c/pattern-matching-pep634-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68f12687d1e04618f9af2ef9f6ce0da7a32c2bea130cdeffda145150c9bce966",
          "md5": "0b39653073c962d3f8c8ffb1250f80f7",
          "sha256": "5ee00433bdeaee3abb8fc2bd18f69ee69b5ea9b607e848a79c8bbfbd7c8e9b98"
        },
        "downloads": -1,
        "filename": "pattern-matching-pep634-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0b39653073c962d3f8c8ffb1250f80f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15811,
        "upload_time": "2020-11-09T19:55:51",
        "upload_time_iso_8601": "2020-11-09T19:55:51.006264Z",
        "url": "https://files.pythonhosted.org/packages/68/f1/2687d1e04618f9af2ef9f6ce0da7a32c2bea130cdeffda145150c9bce966/pattern-matching-pep634-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68f12687d1e04618f9af2ef9f6ce0da7a32c2bea130cdeffda145150c9bce966",
        "md5": "0b39653073c962d3f8c8ffb1250f80f7",
        "sha256": "5ee00433bdeaee3abb8fc2bd18f69ee69b5ea9b607e848a79c8bbfbd7c8e9b98"
      },
      "downloads": -1,
      "filename": "pattern-matching-pep634-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0b39653073c962d3f8c8ffb1250f80f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15811,
      "upload_time": "2020-11-09T19:55:51",
      "upload_time_iso_8601": "2020-11-09T19:55:51.006264Z",
      "url": "https://files.pythonhosted.org/packages/68/f1/2687d1e04618f9af2ef9f6ce0da7a32c2bea130cdeffda145150c9bce966/pattern-matching-pep634-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}