{
  "info": {
    "author": "Håkon Magne Holmen",
    "author_email": "haakonholmen@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Time-magics\n\niPython `%time` and `%timeit` magic command in normal Python files.\n\n```python\nimport time\nimport time_magics as tm\n\ndef foo(n):\n    time.sleep(0.1)\n    return sum(list(range(n)))\n\ntm.time(\"foo(1_000_000)\", ns={\"foo\": foo})\ntm.timeit(\"foo(1_000_000)\", ns={\"foo\": foo})\n\n>> CPU times: user 18.9 ms, sys: 23.8 ms, total: 42.7 ms\nWall time: 143 ms\n138 ms ± 1.46 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n\nTime-magics allows you to time code in a `.py` file with the same output and behavior as the\n[`%timeit`](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-timeit)\nand [`%time`](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-time)\ncommand in iPython and Jupyter Notebook.\n\nIt also provides the functions `time_` and `timeit_`, which allows you to time a function by\ndecorating it:\n\n```python\nimport time\nimport time_magics as tm\n\n@tm.timeit_\ndef foo(n):\n    return sum(list(range(n)))\n\n@tm.time_\ndef bar(n):\n    time.sleep(0.5)\n    return sum(list(range(n)))\n\n# Both timeit_ and timeit returns a TimeitResult object\nresult = foo(10_000)\nprint(\"timeit_ output:\", type(result), result.best)\n\n# While time_ and time returns the timed statement return value (if any)\nvalue = bar(10_000)\nprint(\"time_ output:\", value)\n\n>> 97.6 µs ± 825 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\ntimeit_ output: <TimeitResult> 9.643386240350083e-05\n\nCPU times: user 668 µs, sys: 2 µs, total: 670 µs\nWall time: 501 ms\ntime_ output: 49995000\n```\n\nIt should be noted that `timeit()` and `timeit_()` returns a `TimeitResult` object, while\n`time()` and `time_()` returns the statement return value.\n\nFor more usage information, consult the function docstrings.\n\n## Installation\n\nTime-magics is available on [PyPI](https://pypi.org/project/time-magics/):\n\n```console\npython -m pip install time-magics\n```\n\n## Usage\n\nThe `ns` parameter specifies a namespace in which to execute the code:\n\n```python\n>>> import time\n>>> import time_magics as tm\n\n>>> tm.timeit(\"time.sleep(0.5)\")\nNameError: name 'time' is not defined\n\n>>> tm.timeit(\"time.sleep(0.5)\", ns={'time': time})\n501 ms ± 24.9 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```\n\n`timeit()` and `timeit_()` has the two optional parameters `n` and `r` which does the same\nas in `%timeit`:\n\n- `n` - How many times to execute `stmt`. If `n` is not provided, it will determined so as\n to get sufficient accuracy.\n- `r` - Number of repeats, each consisting of `n` loops, and take the best result.\n\n```python\nimport time_magics as tm\n\ntm.timeit('sum(list(range(100)))')\ntm.timeit('sum(list(range(100)))', r=3, n=1000)\n\n>> 1.83 µs ± 17 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n1.84 µs ± 14 ns per loop (mean ± std. dev. of 3 runs, 1,000 loops each)\n```\n\n### Pitfalls\n\nFor multi-line statements `time()` and `timeit()` will run in cell mode (i.e. `%%time[it]`\ninstead of `%time[it]`). There is a subtle, but crucial difference in behavior between the\n two functions in cell mode:\n\n- `timeit()` will run the first line in the statement string as setup code and is executed, but not\ntimed. All lines after the setup line are considered the body of the cell and are timed.\n- `time()`, on the other hand, doesn't use the first line as setup code when running multiple\nlines. The first line will therefore be timed as normal.\n\nBoth functions behavior reflects their magic command equivalents.\n\n```python\nimport time\nimport time_magics as tm\n\nstmt = \"\"\"time.sleep(1)\ntime.sleep(1)\n\"\"\"\n\ntm.timeit(stmt, ns={'time': time})\ntm.time(stmt, ns={'time': time})\n\n>> 1 s ± 233 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)\n# Only the last time.sleep is timed, the first line is used as setup\nCPU times: user 216 µs, sys: 15 µs, total: 231 µs\nWall time: 2 s  # Both time.sleeps is timed\n```\n\nYou should pass `stmt` as a raw string if it contains strings with newline (`\\n`) characters.\nIf not, `stmt` may be incorrectly parsed. For example:\n\n```python\n>>> import time_magics as tm\n\n>>> tm.time(\"a = 'This \\n will \\n fail \\n to \\n run'\")\nSyntaxError: unterminated string literal (detected at line 1)\n\n>>> tm.time(r\"a = 'This \\n will \\n run \\n as \\n expected'\")\nCPU times: user 2 µs, sys: 0 ns, total: 2 µs\nWall time: 1.91 µs\n\n>>> tm.time(\"a = 'This \\\\n will \\\\n also \\\\n run \\\\n as \\\\n expected'\")\nCPU times: user 1 µs, sys: 0 ns, total: 1 µs\nWall time: 2.15 µs\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hakonmh/time-magics",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "time-magics",
    "package_url": "https://pypi.org/project/time-magics/",
    "platform": null,
    "project_url": "https://pypi.org/project/time-magics/",
    "project_urls": {
      "Homepage": "https://github.com/hakonmh/time-magics"
    },
    "release_url": "https://pypi.org/project/time-magics/0.5.1/",
    "requires_dist": [
      "ipython"
    ],
    "requires_python": ">=3.5",
    "summary": "iPython %time and %timeit magic command in normal Python files",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15738909,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0672d62b9d6f3d0fe9eb04c6945b4f993f601305b50ad9678302033654ecd33b",
          "md5": "9fabcd10bfb20ea704a1cdeeb9c1fdcd",
          "sha256": "eb8baf3751ba0f780e2b3f8f0c093b44cc5e946803f827ba22fe2e378d7afd61"
        },
        "downloads": -1,
        "filename": "time_magics-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fabcd10bfb20ea704a1cdeeb9c1fdcd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7605,
        "upload_time": "2022-09-22T20:39:10",
        "upload_time_iso_8601": "2022-09-22T20:39:10.879268Z",
        "url": "https://files.pythonhosted.org/packages/06/72/d62b9d6f3d0fe9eb04c6945b4f993f601305b50ad9678302033654ecd33b/time_magics-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51da22da107b5d1db8e0fe6ba7f82aa7e13d79e8772de8f3babed167b9bc374a",
          "md5": "baac619e938b18e787bde1ae3660ac08",
          "sha256": "e5157478df70d7353f0d6ba141edc59d39af3fa677616a243226a83eea0aee14"
        },
        "downloads": -1,
        "filename": "time_magics-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "baac619e938b18e787bde1ae3660ac08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7292,
        "upload_time": "2022-10-07T20:06:22",
        "upload_time_iso_8601": "2022-10-07T20:06:22.595525Z",
        "url": "https://files.pythonhosted.org/packages/51/da/22da107b5d1db8e0fe6ba7f82aa7e13d79e8772de8f3babed167b9bc374a/time_magics-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35924a6650a9c86d8d7ed898f46903cfe6f4af5f65ae917751e8085cf3ada298",
          "md5": "4375a57ee2c98371616a768099f829c0",
          "sha256": "9bc5d2873e194b909d5865d8033dd7962cabc7c0d9b51199dc663277dc1f54f6"
        },
        "downloads": -1,
        "filename": "time_magics-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4375a57ee2c98371616a768099f829c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 6289,
        "upload_time": "2022-11-03T21:23:54",
        "upload_time_iso_8601": "2022-11-03T21:23:54.288674Z",
        "url": "https://files.pythonhosted.org/packages/35/92/4a6650a9c86d8d7ed898f46903cfe6f4af5f65ae917751e8085cf3ada298/time_magics-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b39be1bd695a8d76231a92b90acf4bc972aa1eacdd8e99eba5e062e60d2d3c2",
          "md5": "d52cd19a56c348b28de071b23ec3889a",
          "sha256": "10fa2f5a230d2247be4d3c670b3638d310838c03ab10c500de3d9358957a9859"
        },
        "downloads": -1,
        "filename": "time_magics-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d52cd19a56c348b28de071b23ec3889a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 6293,
        "upload_time": "2022-11-11T19:38:31",
        "upload_time_iso_8601": "2022-11-11T19:38:31.839364Z",
        "url": "https://files.pythonhosted.org/packages/0b/39/be1bd695a8d76231a92b90acf4bc972aa1eacdd8e99eba5e062e60d2d3c2/time_magics-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b39be1bd695a8d76231a92b90acf4bc972aa1eacdd8e99eba5e062e60d2d3c2",
        "md5": "d52cd19a56c348b28de071b23ec3889a",
        "sha256": "10fa2f5a230d2247be4d3c670b3638d310838c03ab10c500de3d9358957a9859"
      },
      "downloads": -1,
      "filename": "time_magics-0.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d52cd19a56c348b28de071b23ec3889a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 6293,
      "upload_time": "2022-11-11T19:38:31",
      "upload_time_iso_8601": "2022-11-11T19:38:31.839364Z",
      "url": "https://files.pythonhosted.org/packages/0b/39/be1bd695a8d76231a92b90acf4bc972aa1eacdd8e99eba5e062e60d2d3c2/time_magics-0.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}