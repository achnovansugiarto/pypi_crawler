{
  "info": {
    "author": "ZinkLu",
    "author_email": "zinkworld@live.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# Flask-Serializer\n\n一个帮助你快速书写Restful的序列化器工具\n\n## 1. 简介\n\n后端程序员, 最基础也是最常做的事情就是定义数据库模型并进行增删改查, 而在一个Restful接口集合中, 对资源进行增删改查的也离不开参数的校验.\n\n从Json校验到持久化成数据库记录, 这个过程被我们成为反序列化(狭义), 而从数据库表到Json字符串, 这个过程我们成为序列化(狭义).\n\n本软件就是这样一个序列化工具, 它旨在让反序列化和反序列化更加快捷和方便, 让我们更关注业务逻辑(而不是参数校验和增删改查).\n\n## 2. 安装说明\n\n需求: \n\nflask-serializer 支持Python >= 2.7的版本.\n\n> python2.7: 使用Marshmallow2\n>\n> python 3: 使用Marshmallow3\n\n安装:\n\n```sh\npip install flask-serializer\n```\n\n## 3. 使用\n\n示例代码可以看[这里](\"examples/examples.py\")\n\n如果你已经十分熟悉了marshmallow的使用, 你可以直接跳过3.3\n\n### 3.1 初始化\n\n如同其他的flask插件, flask-serializer的初始化也很简单; \n\n> 注意: 由于依赖flask-SQLAlchemy, flask-serializer应该在其之后进行初始化\n\n```python\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_serializer import FlaskSerializer\n\napp = Flask(__name__)\n\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = 'postgresql://postgres@localhost:5432/test'\n\ndb = SQLAlchemy(app)\nsession = db.session\n\nfs = FlaskSerializer(app, strict=False)\n```\n\nkeyword arguments 将会转换为Marshmallow的`class Meta`, 详细看[这里](https://marshmallow.readthedocs.io/en/stable/quickstart.html#handling-unknown-fields)\n\n然后, 这样定义一个schema:\n\n```python\nclass BaseSchema(fs.Schema):\n    pass\n```\n\n### 3.2. 准备\n\n我们设计一系列模型: \n\n1. 模型基类, 提供所有模型的通用字段\n\n    ```python\n    now = datetime.datetime.now\n\n    class Status:\n        VALID = True\n        INVALID = False\n\n    class BaseModel(db.Model):\n        __abstract__ = True\n\n        id = Column(INTEGER, primary_key=True, autoincrement=True, nullable=False, comment=u\"主键\")\n        is_active = Column(BOOLEAN, nullable=False, default=Status.VALID)\n        create_date = Column(DATE, nullable=False, default=now)\n        update_date = Column(DATE, nullable=False, default=now, onupdate=now)\n\n        def delete(self):\n            self.is_active = Status.INVALID\n            return self.id\n\n        def __repr__(self):\n            return f\"<{self.__class__.__name__}:{self.id}>\"\n    ```\n\n2. 订单模型\n\n    ```python\n    class Order(BaseModel):\n        __tablename__ = \"order\"\n        order_no = Column(VARCHAR(32), nullable=False, default=now, index=True)\n\n        order_lines = relationship(\"OrderLine\", back_populates=\"order\")\n    ```\n\n3. 订单明细行, 与订单模型是多对一的关系, 记录了该订单包含的商品数量价格等信息\n\n    ```python\n    class OrderLine(BaseModel):\n        __tablename__ = \"order_line\"\n        order_id = Column(ForeignKey(\"order.id\", ondelete=\"CASCADE\"), nullable=False)\n        product_id = Column(ForeignKey(\"product.id\", ondelete=\"RESTRICT\"), nullable=False)\n\n        price = Column(DECIMAL(scale=2))\n        quantities = Column(DECIMAL(scale=2))\n\n        order = relationship(\"Order\", back_populates=\"order_lines\")\n\n        @property\n        def total_price(self):\n            return self.price * self.quantities\n    ```\n\n4. 商品模型, 与订单明细行是一对多的关系, 记录了商品的基本属性\n\n    ```python\n    class Product(BaseModel):\n        __tablename__ = \"product\"\n\n        product_name = Column(VARCHAR(255), index=True, nullable=False)\n        sku_name = Column(VARCHAR(64), index=True, nullable=False)\n        standard_price = Column(DECIMAL(scale=2), default=0.0)\n    ```\n\n### 3.3. 简单的Marshmallow演示\n\n更加高级的使用技巧, 请看: [Marshmallow文档](https://marshmallow.readthedocs.io/en/stable/)\n\n#### 3.2.1. 反序列化\n\n1. 假设我们现在要创建一条数据库记录, 创建一个schema来验证数据\n\n    ```python\n    from marshmallow import Schema, fields\n\n    class ProductSchema(Schema):\n        product_name = fields.String(required=True)\n        sku_name = fields.String(required=True)\n        standard_price = fields.Float()\n    ```\n\n    我们可以这样做\n\n    ```python\n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n        \"sku_name\": \"GP19930916\",\n        \"standard_price\": 100 ,\n    }\n\n    ps = ProductSchema()\n\n    instance_data = ps.validate(raw_data)  # marshmallow2 will return (data, error) tuple\n\n    product = Product(**instance_data)\n\n    session.add(product)\n    session.flush()\n    session.commit()\n    ```\n\n2. 或者使用marshmallow自带的post_load方法\n\n    ```python\n    from marshmallow import Schema, fields, post_load\n\n    class ProductSchema(Schema):\n        product_name = fields.String(required=True)\n        sku_name = fields.String(required=True)\n        standard_price = fields.Float()\n\n        @post_load\n        def make_instance(data, *args, **kwargs):\n            # data是通过验证的数据\n            product = Product(**data)\n            session.add(product)\n            session.commit()\n            session.flush()\n            return product\n    ```\n\n    然后\n\n    ```python\n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n        \"sku_name\": \"GP19930916\",\n        \"standard_price\": 100 ,\n    }\n\n    ps = ProductSchema()\n\n    product_instance = ps.load(raw_data)\n    ```\n\n#### 3.1.2. 序列化\n\n至于序列化, 也可以使用ProductSchema实例进行处理, 如:\n\n1. 序列化, 只会取非load_only的字段进行序列化\n\n    ```python\n    product_instance = session.query(Product).get(1)\n    data = ps.dump(product_instance)  # dumps will return json string; marshmallow2 will return (data, error) tuple\n    ```\n\n2. 也可以定义一些dump_only的filed用于序列化\n\n    ```python\n    class ProductSchemaAddDumpOnly(ProductSchema):\n        id = fields.Integer(dump_only=True)\n        create_date = fields.DateTime(dump_only=True)\n        update_date = fields.DateTime(dump_only=True)\n        is_active = fields.Boolean(dump_only=True)\n    \n    ps_with_meta = ProductSchemaAddDumpOnly()\n    data = ps_with_meta.dump(product_instance)\n    ```\n\n序列化可以直接使用marshmallow方法, 这里我们主要介绍反序列化方法\n\n### 3.4 使用DetailMixin进行反序列化\n\n上面我们看到, 第二种方法还是比较Nice的(官网文档中也有事例), 他直接使用了marshmallow post_load方法, 对结果进行后处理, 得到一个Product对象, 实际上DetailMix就是实现了这样方法的一个拓展类.\n\n1. 使用DetailMixin进行模型创建:\n   \n    很简单, 导入DetailMixIN后使得刚才的ProductSchema继承DetailMixIN, 然后为添加`__model__`到类中, 设置这个Schema需要绑定的对象.\n   \n    ```python\n    from marshmallow import Schema, fields\n\n    from flask_serializer.mixins.details import DetailMixin \n\n    class BaseSchema(fs.Schema):\n        id = fields.Integer()\n        create_date = fields.DateTime(dump_only=True)\n        update_date = fields.DateTime(dump_only=True)\n        is_active = fields.Boolean(dump_only=True)\n    \n    class ProductSchema(DetailMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(required=True)\n        sku_name = fields.String(required=True)\n        standard_price = fields.Float()\n    \n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n        \"sku_name\": \"GP19930916\",\n        \"standard_price\": 100,\n    }\n    \n    ps = ProductSchema()\n    product_instance = ps.load(raw_data)\n    session.commit()\n    ```\n\n    ```sh\n    <Product:1>\n    ```\n\n    > 注意: DetailMixin 会调用flush()方法, 除非session开启了autocommit, 否则不会提交你的事务(autocommit也是新创建了一个子事务, 不会提交当前主事务), 请开启flask_sqlalchemy的自动提交事务功能或者手动提交\n\n> `__model__`说明: 如果有导入问题, `__model__`支持设置字符串并在稍后的代码中自动读取SQLAlchemy的metadata并且自动设置对应的Model类\n>\n>    ```python\n>    class ProductSchema(DetailMixin, Schema):\n>        __model__ = \"Product\"\n>    ```\n\n2. 使用DetailMixin进行模型更新\n\n    既然有创建就有更新, DetailMixin能够自动读取`__model__`里面的主键(前提是model主键必须唯一), 当在读取到原始数据中的主键时, load方法会自动更新而不是创建这个模型. 当然, 也不要忘记在schema中定义你的主键字段.\n\n    ```python\n    raw_data = {\n        \"id\": 1,\n        \"standard_price\": 10000000,\n    }\n\n    ps = ProductSchema(partial=True)  # partial参数可以使得required的字段不进行验证, 适合更新操作\n\n    product_instance = ps.load(raw_data)\n    session.commit()\n    ```\n\n    ```sh\n    <Product:1>\n    ```\n\n    > 如果只是想读取这个模型, 而不想更新, 只需要传入主键值行就行\n    > \n    > TODO: 以后可以加入`ReadOnlyDetailMixIN`\n\n还有一些其他的特性, 我们在进阶中再看, 配合上SQLAlchemy的relationship, 还可以实现更多.\n\n### 3.5 使用ListMixin进行查询\n\nDetailMixin支持的是增改操作(实际上也支持删除, 但未来需要添加专门用来删除的Mixin), 而ListMixin支持查询的操作.\n\n下面是不同的ListMixin的使用\n\n#### 3.5.1 ListModelMixin\n\nListModelMixin 顾名思义是针对某个模型的查询, 其反序列化的结果自然是模型实例的列表\n\n为了让用户的输入能够转化成我们想要的查询, 这里使用`Filter`对象作为参数`filter`传入`Field`的初始化中\n\n1. 基本使用\n\n    ```python\n    from flask_serializer.mixins.lists import ListModelMixin\n    from sqlalchemy.sql.operators import eq as eq_op\n\n    class ProductListSchema(ListModelMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op))\n    ```\n\n    此时, 我们接口接收到输入的参数, 我们这样: \n\n    ```python\n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n    }\n\n    pls = ProductListSchema()\n\n    product_list = pls.load(raw_data)\n    ```\n\n    ```sh\n    Traceback (most recent call last):\n    ....\n    marshmallow.exceptions.ValidationError: {'_schema': ['分页信息错误, 必须提供limit/offset或者page/size']}\n    ```\n\n    阿偶, 报错了, 实际上, ListModelMixin中会去自动检查Limit/Offset或者Page/Size这样的参数, 如果你不想让数据库爆炸, 可别忘记传入这两个参数!\n\n    ```python\n    raw_data[\"page\"] = 1\n    raw_data[\"size\"] = 10\n    product_list = pls.load(raw_data)\n    ```\n\n    ```sh\n    [<Product:1>]\n    ```\n\n2. 排序\\*\n   \n    如果想使用排序, 可以重写这一个方法\n    \n    ```python\n    class ProductListSchema(ListModelMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op))\n\n        def order_by(self, data):\n            return self.model.update_date.desc()\n    ```\n\n    注意了, `self.model`可以安全的取到设置的`__model__`指代的对象, 无论它被设置成字符串还是Model类.\n\n    > \\* 这方方法可能需要重新设计一下, 我们可以将其变成一个属性而不是提供一个可重写的方法, 除非排序非常复杂\n\n#### 3.5.2 Filter类参数说明\n\n 1. `operator`, 这代表着将要对某一个字段做什么样的操作, 这个参数应该是`sqlalchemy.sql.operators`下提供的函数, Filter会自动套用这些函数, 将转化成对应的WHERE语句, 上面的例子中, 我们最终得到的SQL就是这样的\n\n     ```sql\n     SELECT * FROM product WHERE product_name = 'A-GREAT-PRODUCT' ORDER BY product.update_date DESC\n     ```\n\n 2. `field`, 如果不设置, 他将默认使用`__model__`下面的同名Column进行过滤, 所以, 当你的Schema和Model的Filed对不上时, 也可以这样搞\n\n     ```python\n     class ProductListSchema(ListModelMixin, BaseSchema):\n         __model__ = Product\n\n         name = fields.String(filter=Filter(eq_op, Product.product_name))\n     ```\n\n     这时, 我们的接口文档中还定义的是`product_name`, Schema将读不到该值, 所以, 接口文档, shecma, model中定义的字段名字可能都不一样, 但是他们指代的同一个东西是, 你还可以这么做: \n\n     ```python\n     class ProductListSchema(ListModelMixin, BaseSchema):\n         __model__ = Product\n\n         name = fields.String(data_key=\"product_name\", filter=Filter(eq_op, Product.product_name))\n     ```\n\n     `data_key`是marshmallow自带的参数, 他将告诉Field对象从哪里取值.\n\n     > 在Marshmallow2中, 这个参数叫`load_from`和`dump_from`, 现在合并了, 但实际上好像适用范围变小了.\n\n     同样的, `field`也可以被设置为字符串, 且可以省略model的名称\n\n     ```python\n     class ProductListSchema(ListModelMixin, BaseSchema):\n         __model__ = Product\n\n         name = fields.String(data_key=\"product_name\", filter=Filter(eq_op, \"product_name\"))\n    ```\n\n    对于`field`参数, 还可以设置为其他模型的Column, 我们放到进阶部分去讲吧\n\n3. `value_process`对即将进行查询的值进行处理, 一般情况下用在诸如`like`的操作上\n\n    `value_procee`支持传入一个`callable`对象, 并且只接受一个参数, 返回值该参数的处理.\n   \n    ```python\n    from sqlalchemy.sql.operator import like_op\n\n    class ProductListSchema(ListModelMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op, value_process=lambda x: f\"%{x}%\"))\n    \n    raw_data = {\n        \"product_name\": \"PRODUCT\",\n        \"limit\": 10,\n        \"offset\": 0\n    }\n\n    pls = ProductListSchema()\n\n    product_list = pls.load(raw_data)\n    print(product_list)\n    ```\n\n    ```sql\n    SELECT * FROM product WHERE product_name LIKE '%PRODUCT%'\n    ```\n\n    ```sh\n    [<Product:1>]\n    ```\n\n    > 事实上, `value_process`也有默认值, 如果你使用`like_op`或者`ilike_op`则会自动在value后面加上`%`(右模糊匹配)\n\n    > 其实`pre_load`装饰器也可以预处理值, 但是我认为不需要写太多了预处理方法\n\n4. `default`默认值.\n\n    有时可能会有不传值使用默认值进行过滤的情况, 可以设置`default`方法.\n\n    > 这个场景下不能设置marshmallow的Field对象的default参数, 因为这个default是给dump方法用的, 而不是load方法.\n\n    让我们先来删除刚才创建的product\n\n    ```python\n    # delete a product\n    for product in product_list:\n        product.delete()\n    \n    session.flush()\n    session.commit()\n    ```\n\n    然后我们创建这样一个Schema, 将自动过滤掉软删除的记录\n    \n    ```python\n    class ProductListSchema(ListModelMixin, BaseSchema):\n        __model__ = Product\n\n        is_active = fields.Boolean(filter=Filter(eq_op, default=True))\n\n        product_name = fields.String(filter=Filter(eq_op))\n\n\n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n        \"limit\": 10,\n        \"offset\": 0\n    }\n\n    pls = ProductListSchema()\n\n    print(pls.load(raw_data))\n    ```\n\n    ```sh\n    []\n    ```\n\n#### 3.5.3 ListMixin\n\n和ListModelMixin的差别就是这个方法这对一个`Model`进行全部查询, 而是会对指定的一些字段进行查询, 这样可以避免一些额外的性能开销, 只查询你感兴趣的字段. 并且可以完成跨模型的字段查询.\n\nListMixin需要一个`Query`对象来告诉他需要查询的字段\n\n1. 基本使用:\n\n    ```python\n    from flask_serializer.func_field.filter import Filter\n    from flask_serializer.func_filed.query import Query\n    from flask_serializer.mixins.lists import ListMixin\n    from sqlalchemy.sql.operators import eq as eq_op\n\n    class ProductListSchema(ListMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op), query=Query())\n    ```\n\n    同样的, 让我们输入参数\n\n    ```python\n    raw_data = {\n        \"page\": 1,\n        \"size\": 10,\n        \"product_name\": \"A-GREAT-PRODUCT\",\n    }\n\n    pls = ProductListSchema()\n\n    product_list = pls.load(raw_data)\n    ```\n\n    这是时候我们得到的不再是`Product`的实例列表, 而是`sqlalchemy.util._collections.result`对象, 这种数据结构有一点像具名元组, 可以进行下标索引和`.`操作, 但是他只包含你查询的字段, 不包含任何其他多余的字段, 因此:\n\n    ```python\n    product = product_list[0]  # 如果没有的话记得新建一条记录哦!\n\n    print(product.product_name)\n    print(product[0])\n    ```\n\n    ```sh\n    A-GREAT-PRODUCT\n    A-GREAT-PRODUCT\n    ```\n\n#### 3.5.4 Query的参数说明\n\n1. `field`\n   \n    可以是一个SQLAlchemy的Column对象, 也可以是能够被正确指向Column的字符串. 这个参数将会告诉Query查询的字段到底是什么, 如果不填写则直接使用当前`field`的名称对应`__model__`字段进行查询.\n\n    其实`field`完全可以设置另外一个模型的字段, 如果这两个模型之间有外键的关联, SQLAlchemy会自动为我们拼接上Join语句, 并且加上正确的On条件, 如果这两个模型没有直接外键的关联, 也可以重写`def modify_before_query(self, query, data)`方法来增加自己的Join条件, 我们放到高级部分去讲解.\n\n2. `label`\n\n    label参数相当于SQL语句中的`AS`\n\n    ```python\n    class ProductListSchema(ListMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op), query=Query(label=\"name\"))\n    \n    pls = ProductListSchema()\n\n    product = pls.load(raw_data)[0]\n\n    print(product.name)\n\n    product.product_name # raise a AttributeError\n    ```\n\n    ```sh\n    A-GREAT-PRODUCT\n\n    Traceback (most recent call last):\n    File xxxxxx\n        print(product.product_name)\n    AttributeError: 'result' object has no attribute 'product_name'\n    ```\n\n## 4 进阶\n\n### 3.6.1 结合Nest和relationship完成骚操作\n\n### 3.6.2 外键检查\n\n### 3.6.3 联合过滤\n\n## 已知问题\n\n1. DetailMixin不能兼容sqlite, sqlite不支持批量更新\n\n## TODO\n\n1. 可以读取Model中的Column, 根据Column自动生成Field.\n\n2. JsonSchema自动转换成Marshallmallow-Schema.\n\n3. DeleteMixIN, 支持批量删除的Serializer.\n\n4. ...",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ZinkLu/Flask-Serializer/archive/v0.0.5.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ZinkLu",
    "keywords": "Flask,extension,serializer,marshmallow,flask-sqlalchemy",
    "license": "MIT",
    "maintainer": "zinklu",
    "maintainer_email": "zinkworld@live.cn",
    "name": "flask-serializer",
    "package_url": "https://pypi.org/project/flask-serializer/",
    "platform": "",
    "project_url": "https://pypi.org/project/flask-serializer/",
    "project_urls": {
      "Code": "https://github.com/ZinkLu/Flask-Serializer",
      "Download": "https://github.com/ZinkLu/Flask-Serializer/archive/v0.0.5.tar.gz",
      "Homepage": "https://github.com/ZinkLu"
    },
    "release_url": "https://pypi.org/project/flask-serializer/0.0.5.1/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "A Flask serializer built with marshmallow and flask-sqlalchemy",
    "version": "0.0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7970878,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e08756059f52913c1b82bbb6cecea07e198a826b2a7b7d7e32666c692c9169c",
          "md5": "9c04c49eec8ee6e25115cc2e5a5c72cc",
          "sha256": "68e6c24b6d1d7bf409274e1ddae0714eef956232a373c9cc079936f077861bd1"
        },
        "downloads": -1,
        "filename": "flask_serializer-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9c04c49eec8ee6e25115cc2e5a5c72cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 11026,
        "upload_time": "2020-07-28T13:51:48",
        "upload_time_iso_8601": "2020-07-28T13:51:48.962780Z",
        "url": "https://files.pythonhosted.org/packages/8e/08/756059f52913c1b82bbb6cecea07e198a826b2a7b7d7e32666c692c9169c/flask_serializer-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb38f197b08ae382aa3fc47801f7447c64569231d8f134d3d68b1781a68aacea",
          "md5": "7ce59ff0f5c8765c5858a500afb8be4c",
          "sha256": "81768644858fa8b5f9bfb2f936514595f7ba9abe0026eba674d8b0372eea155b"
        },
        "downloads": -1,
        "filename": "flask_serializer-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7ce59ff0f5c8765c5858a500afb8be4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 16361,
        "upload_time": "2020-08-16T09:17:34",
        "upload_time_iso_8601": "2020-08-16T09:17:34.260835Z",
        "url": "https://files.pythonhosted.org/packages/bb/38/f197b08ae382aa3fc47801f7447c64569231d8f134d3d68b1781a68aacea/flask_serializer-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5c3215d2f063ee2135eb6b699d93ad84733629455c284c86c86cc685f78527c",
          "md5": "f9f480b72e2847929f251ed0d06dd551",
          "sha256": "7b25731a2986bd3d5fe1fda30a6c348d0caa8ab91334202307881572eae7e967"
        },
        "downloads": -1,
        "filename": "flask_serializer-0.0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f9f480b72e2847929f251ed0d06dd551",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 23618,
        "upload_time": "2020-08-16T09:20:51",
        "upload_time_iso_8601": "2020-08-16T09:20:51.957205Z",
        "url": "https://files.pythonhosted.org/packages/f5/c3/215d2f063ee2135eb6b699d93ad84733629455c284c86c86cc685f78527c/flask_serializer-0.0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5c3215d2f063ee2135eb6b699d93ad84733629455c284c86c86cc685f78527c",
        "md5": "f9f480b72e2847929f251ed0d06dd551",
        "sha256": "7b25731a2986bd3d5fe1fda30a6c348d0caa8ab91334202307881572eae7e967"
      },
      "downloads": -1,
      "filename": "flask_serializer-0.0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f9f480b72e2847929f251ed0d06dd551",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 23618,
      "upload_time": "2020-08-16T09:20:51",
      "upload_time_iso_8601": "2020-08-16T09:20:51.957205Z",
      "url": "https://files.pythonhosted.org/packages/f5/c3/215d2f063ee2135eb6b699d93ad84733629455c284c86c86cc685f78527c/flask_serializer-0.0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}