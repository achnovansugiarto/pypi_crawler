{
  "info": {
    "author": "Alexander Pletzer",
    "author_email": "alexander@gokliya.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# mumpy\nParallel computing in N dimensions made easy in Python\n\n## Overview\n\nmumpy is a very lightweight implementation of distributed arrays,\nwhich runs on architectures ranging from multi-core laptops to large\nMPI clusters.  mumpy is based on numpy and mpi4py and supports arrays in\nany number of dimensions. Processes can access remote data using a \"getData\" \nmethod. This can be used to access neighbor ghost data but is more \nflexible as it allows to access data from any process--not necessarily\na neighboring one. mumpy is designed to work seamlessly with numpy's \nslicing operators ufunc, etc., making it easy to transition your code\nto a parallel computing environment.\n\n![alt tag](https://raw.githubusercontent.com/pletzer/mumpy/master/pictures/exLaplacian3d.png)\nSpeedup of 512^3 Laplacian on a 4 core desktop\n\n## How to get mumpy\n\n```bash\ngit clone https://github.com/pletzer/mumpy.git\n```\n\n## How to build mumpy\n\nmumpy requires:\n\n * python 3.5 or later\n * numpy\n * MPI library (e.g. MPICH2) \n * mpi4py, e.g. 3.x\n\n\n```bash\npython setup.py install\n```\n\nor, if you need root access,\n\n```bash\nsudo python setup.py install\n```\n\nAlternatively you can use \n```python \npip install mumpy\n```\n\nor\n\n```python \npip install mumpy --user\n```\n\n## How to test mumpy\n\nRun any file under tests/, e.g.\n\n```bash\ncd tests\nmpiexec -n 4 python testDistArray.py\n```\n\n## How to use mumpy\n\nTo run script myScript.py in parallel use\n\n```python\nmpiexec -n numProcs python <myScript.py>\n```\n\nwhere numProcs is the number of processes.\n\n### A lightweight extension to numpy arrays\n\nThink of mumpy arrays as standard numpy arrays with additional data members and methods to access neighboring data. \n\nTo create a ghosted distributed array (gda) use:\n\n```python\nfrom mumpy import gdaZeros\nda = gdaZeros((4, 5), numpy.float32, numGhosts=1)\n```\n\nThe above creates a 4 x 5 float32 array filled with zeros -- the syntax should be familiar to anyone using \nnumpy arrays. \n\nAll numpy operations apply to mumpy distributed arrays with no change and this includes slicing. \nNote that slicing operations are with respect to local array indices.\n\nIn the above, _numGhosts_ describes the thickness of the halo region, i.e. the slice of \ndata inside the array that can be accessed by other processes. A value of numGhosts = 1 means \nthe halo has depth of one. The thicker the halo the more costly communication will be because \nmore data will need to be copied \nfrom one process to another.\n\nFor a 2D array, the halo can be broken into four regions: \n\n * da[:numGhosts, :] => west\n * da[-numGhosts:, :] => east\n * da[:, :numGhosts] => south\n * da[:, -numGhosts:] => north\n\n(In n-dimensions there are 2n regions.) mumpy identifies each halo region\n with a tuple: \n\n  * (-1, 0) => west\n  * (1, 0) => east\n  * (0, -1) => south\n  * (0, 1) => north\n\nTo access data on the south region of remote process otherRk, use\n```python\nsouthData = da.getData(otherRk, winID=(0, -1))\n```\n\n### Using a regular domain decomposition\n\nThe above will work for any domain decomposition, not necessarily a regular one. In the case where a global array is split into\nuniform chunks of data, otherRk can be inferred from the local rank and an offset vector:\n\n```python\nfrom mumpy import CubeDecomp\ndecomp = CubeDecomp(numProcs, dims)\n...\notherRk = decomp.getNeighborProc(self, da.getMPIRank(), offset=(0, 1), periodic=(True, False))\n```\n\nwhere numProcs is the number of processes, dims are the global array dimensions and periodic is a tuple of \nTrue/False values indicating whether the domain is periodic or not. In the case where there is no neighbour rank (because the\nlocal da.getMPIRank() rank lies at the boundary of the domain), then getNeighborProc may return None. In this case getData will also return None. \n\n### A very high level\n\nFor the Laplacian stencil, one may consider using \n\n```python\nfrom mumpy import Laplacian\nlapl = Laplacian(decomp, periodic=(True, False))\n```\n\nApplying the Laplacian stencil to any numpy-like array _inp_ then simply involves:\n```python\nout = lapl.apply(inp)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pletzer/mpinum.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mpinum",
    "package_url": "https://pypi.org/project/mpinum/",
    "platform": null,
    "project_url": "https://pypi.org/project/mpinum/",
    "project_urls": {
      "Homepage": "https://github.com/pletzer/mpinum.git"
    },
    "release_url": "https://pypi.org/project/mpinum/1.4.2/",
    "requires_dist": [
      "numpy",
      "mpi4py"
    ],
    "requires_python": "",
    "summary": "A very lightweight implementation of distributed arrays",
    "version": "1.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13859170,
  "releases": {
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f64710a6fa8a73170c1fb382cb4f55f749dc03d29e07d954a4bb82c675259d75",
          "md5": "6501e1b3fa45e5fb1562f39e272e77e2",
          "sha256": "4280e4e39683afb12e4cc8f1bb6f398c1ac7922aa376eb69b3e4f7cfa314dd00"
        },
        "downloads": -1,
        "filename": "mpinum-1.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6501e1b3fa45e5fb1562f39e272e77e2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 17751,
        "upload_time": "2022-05-19T00:13:14",
        "upload_time_iso_8601": "2022-05-19T00:13:14.173902Z",
        "url": "https://files.pythonhosted.org/packages/f6/47/10a6fa8a73170c1fb382cb4f55f749dc03d29e07d954a4bb82c675259d75/mpinum-1.4.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aae04148d3359fa63d1ec1bbc78a1044210a91582f439f44de2b862dccc2c87",
          "md5": "9b11f506b214d1ffc539e3954c94043b",
          "sha256": "9b5e8732c80b502cec81e92e72819501269d5450d0c0168f4df423ea105c34a0"
        },
        "downloads": -1,
        "filename": "mpinum-1.4.2-py3.10.egg",
        "has_sig": false,
        "md5_digest": "9b11f506b214d1ffc539e3954c94043b",
        "packagetype": "bdist_egg",
        "python_version": "1.4.2",
        "requires_python": null,
        "size": 37268,
        "upload_time": "2022-05-19T00:13:16",
        "upload_time_iso_8601": "2022-05-19T00:13:16.944699Z",
        "url": "https://files.pythonhosted.org/packages/5a/ae/04148d3359fa63d1ec1bbc78a1044210a91582f439f44de2b862dccc2c87/mpinum-1.4.2-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84e17fbaed2c1971a27f7d0ab64e1354c1a729a8b9be1a06cf48f5fd66cecff0",
          "md5": "111ded84705fabbcff431f906c4f6191",
          "sha256": "64bed643512aa0e8db41f1cae1d36b5a026fcb317b61581d0508624136a8353c"
        },
        "downloads": -1,
        "filename": "mpinum-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "111ded84705fabbcff431f906c4f6191",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13969,
        "upload_time": "2022-05-19T00:13:19",
        "upload_time_iso_8601": "2022-05-19T00:13:19.936887Z",
        "url": "https://files.pythonhosted.org/packages/84/e1/7fbaed2c1971a27f7d0ab64e1354c1a729a8b9be1a06cf48f5fd66cecff0/mpinum-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f64710a6fa8a73170c1fb382cb4f55f749dc03d29e07d954a4bb82c675259d75",
        "md5": "6501e1b3fa45e5fb1562f39e272e77e2",
        "sha256": "4280e4e39683afb12e4cc8f1bb6f398c1ac7922aa376eb69b3e4f7cfa314dd00"
      },
      "downloads": -1,
      "filename": "mpinum-1.4.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6501e1b3fa45e5fb1562f39e272e77e2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17751,
      "upload_time": "2022-05-19T00:13:14",
      "upload_time_iso_8601": "2022-05-19T00:13:14.173902Z",
      "url": "https://files.pythonhosted.org/packages/f6/47/10a6fa8a73170c1fb382cb4f55f749dc03d29e07d954a4bb82c675259d75/mpinum-1.4.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5aae04148d3359fa63d1ec1bbc78a1044210a91582f439f44de2b862dccc2c87",
        "md5": "9b11f506b214d1ffc539e3954c94043b",
        "sha256": "9b5e8732c80b502cec81e92e72819501269d5450d0c0168f4df423ea105c34a0"
      },
      "downloads": -1,
      "filename": "mpinum-1.4.2-py3.10.egg",
      "has_sig": false,
      "md5_digest": "9b11f506b214d1ffc539e3954c94043b",
      "packagetype": "bdist_egg",
      "python_version": "1.4.2",
      "requires_python": null,
      "size": 37268,
      "upload_time": "2022-05-19T00:13:16",
      "upload_time_iso_8601": "2022-05-19T00:13:16.944699Z",
      "url": "https://files.pythonhosted.org/packages/5a/ae/04148d3359fa63d1ec1bbc78a1044210a91582f439f44de2b862dccc2c87/mpinum-1.4.2-py3.10.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84e17fbaed2c1971a27f7d0ab64e1354c1a729a8b9be1a06cf48f5fd66cecff0",
        "md5": "111ded84705fabbcff431f906c4f6191",
        "sha256": "64bed643512aa0e8db41f1cae1d36b5a026fcb317b61581d0508624136a8353c"
      },
      "downloads": -1,
      "filename": "mpinum-1.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "111ded84705fabbcff431f906c4f6191",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13969,
      "upload_time": "2022-05-19T00:13:19",
      "upload_time_iso_8601": "2022-05-19T00:13:19.936887Z",
      "url": "https://files.pythonhosted.org/packages/84/e1/7fbaed2c1971a27f7d0ab64e1354c1a729a8b9be1a06cf48f5fd66cecff0/mpinum-1.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}