{
  "info": {
    "author": "Vanessa Sochat",
    "author_email": "vsoch@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: Unix",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Puzzles\n\nI've recently taken up a fondness for puzzles. Over a conversation one night,\nwe joked how cool it would be to have a digital puzzle. It actually\nwouldn't be such a crazy idea - each puzzle piece would need to have some sort of\ntiny sensor to understand it's location relative to the others, and some tiny\ndigital display that a mapped portion of an image would be shown on. Given that\nwe have something like the Kindle, the technology for \"long lasting and low power\nimages\" didn't seem that far off.\n\n| Pieces                          | Puzzle                                    |\n|---------------------------------|-------------------------------------------|\n|![examples/img/pieces.jpg](examples/img/pieces.jpg)| ![examples/img/background.jpg](examples/img/background.jpg) |\n\n> Sometimes, you just feel out of place.\n\nBut the use of sensors is a bit out of my budget and current knowledge base. But\nthat's okay, let's work up to that. As I usually do, I thought of breaking the \nproblem into smaller pieces (pun intended). Perhaps there is a similar problem \nI can solve that would be a step in the right  direction? \nHow about a robot that solves puzzles? \n\n## High Level Algorithm\n\nA \"robot puzzle solver\" means that we do the following\n\n 1. We start with pictures of separate images\n 2. The puzzle pieces are segmented.\n 3. We represented features and edges of the pieces.\n 4. Based on these features, the segmented pieces are put together by an algorithm. \n\nBut more realistically, we want to start with a simpler problem:\n\n 1. We start with an entire image and break it into N squares\n 2. We match sides based on colors\n 3. We represented features and edges of the pieces.\n 4. Based on these features, the segmented pieces are put together by an algorithm.\n\n\n## Variables\n\nSome things we would need to account for in the above (and these are general notes \nfor now).\n\n - the puzzle pieces would ideally have consistent lighting and all be turned with picture upwards.\n - the camera, even from the top down, would introduce a bit of skew, both for shape and for color.\n - we can't make any assumption about the shape or position of the pieces. This means that although we could represent an edge as some sort of curve, the second you introduce a weirdo pieces that doesn't work well with the assumption, the algorithm breaks. For this reason, we might consider a pixel-based approach.\n - It could be the case that the algorithm can solve a puzzle as would a human - perhaps the edge pieces are easiest to do first, and then work from corners in?\n - We could do a recursive backtracking approach, where we start with edges, then work inwards from the corners, and choose the most probable piece given each new location with two \"decided\" edges. But as soon as the probabilities of a correct piece drop below some threshold, we should turn back.\n - Puzzles are real, and thus inherently imperfect. There needs to be an allowed margin of error.\n\n## Applications\n\nAs silly as this is, there are some fun applications for a robot puzzle solver.\n\n - Puzzles are currently ranked on number of pieces, but I've found this isn't a good representation for how difficult they are. The robot puzzle solver could come up with a metric that represents difficulty based on the algorithm.\n - Has anyone ever wondered how much harder it is to solve a puzzle if you are color blind? Given a metric of difficulty, we can see how that changes with different variables removed. For example, if we remove color, how much longer does the algorithm take?\n\n# Puzzle Solver\n\nThe puzzle solver currently loads in a photo, and can shuffle it and then re-discover\nthe solution. I haven't tested this on a huge number of images so your mileage may vary,\nand note that I still consider the library under development. You can see a full\nnotebook [here on nbviewer](https://nbviewer.jupyter.org/github/vsoch/puzzles/blob/master/examples/avocado-puzzle.ipynb)\nor keep reading to see basic usage and screen shots. The notebook file is located at [examples/avocado-puzzle.ipynb](examples/avocado-puzzle.ipynb)\nin case you want to edit it.\n\n```python\nfrom puzzles.models import PhotoPuzzle\n\npuzzle = PhotoPuzzle(\"avocado-halves.jpeg\")\n\n# Show the original image\nfig = puzzle.get_image_figure()\n\n# Metrics about the puzzle calculated based on minimum piece size we requested\n\npuzzle.metrics()\n# Image file         : avocado-halves.jpeg\n# Minimum piece size : 30\n# Width              : 640\n# Height             : 360\n# Number pieces      : 252\n\n# Plot the original pieces\nfig = puzzle.get_puzzle_figure()\n\n# Shuffle the puzzle and show it\npuzzle.shuffle()\n\n# Now show the puzzle broken into pieces!\npuzfig = puzzle.get_puzzle_figure()\n\n# Solve the puzzle!\npuzzle.solve()\n\nsolved_fig = puzzle.get_solved_figure()\n```\n\nHere is the shuffled puzzle:\n\n![examples/shuffled-puzzle.png](examples/shuffled-puzzle.png)\n\nAnd then solved!\n\n![examples/solved-puzzle.png](examples/solved-puzzle.png)\n\nIn practice I've found that the original shuffle can lead to a different result\n(e.g., a slightly not perfect solution).\n\n## Changes\n\nIn case you want to contribute here are some ideas!\n\n### Puzzle Pieces\n\nI'd like there to be a model of a `PuzzlePiece` that holds the piece data, and then comparisons \nbetween pieces are done in this manner. Right now we have a `PlacedPiece` which really just\nholds an index into the array self.pieces and a location (x,y) in terms of coordinates\non the board. It would be cleaner to somehow combine these two.\n\n### Image Loading\n\nCurrently, if we display the image before shuffle it actually isn't perfect.\nBut I think it should be (and this is a bug) we would want to be able to\ndisplay the image, see that it's correct, and then shuffle.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vsoch/puzzles",
    "keywords": "python puzzle solver",
    "license": "LICENSE",
    "maintainer": "Vanessa Sochat",
    "maintainer_email": "vsoch@users.noreply.github.com",
    "name": "puzzles",
    "package_url": "https://pypi.org/project/puzzles/",
    "platform": "",
    "project_url": "https://pypi.org/project/puzzles/",
    "project_urls": {
      "Homepage": "https://github.com/vsoch/puzzles"
    },
    "release_url": "https://pypi.org/project/puzzles/0.0.13/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "solve puzzles with Python",
    "version": "0.0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10698181,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6b74c79bf0221f5d915dc957f4a9197c0e7892d36f41f7613f66b8f56b0ac31",
          "md5": "a532f42469e259eef01e133cffd63ce8",
          "sha256": "d911c182ec1f1b28c0c5e7aa0e7ae8e3ada9598d6a703aaa46f61fd78163749c"
        },
        "downloads": -1,
        "filename": "puzzles-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a532f42469e259eef01e133cffd63ce8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4347,
        "upload_time": "2018-10-21T00:01:48",
        "upload_time_iso_8601": "2018-10-21T00:01:48.417874Z",
        "url": "https://files.pythonhosted.org/packages/d6/b7/4c79bf0221f5d915dc957f4a9197c0e7892d36f41f7613f66b8f56b0ac31/puzzles-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c9f4e9839ef27e1d7b632aa599968df06f933c9a7632e025fad91ff5de8cca1",
          "md5": "0e1b5c973500f09b76a0aa6cb06aecc6",
          "sha256": "b0e081a9302f26ef9d070d8134c5f4181d811206c5be1896dab6ec73ec22aa8e"
        },
        "downloads": -1,
        "filename": "puzzles-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "0e1b5c973500f09b76a0aa6cb06aecc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13915,
        "upload_time": "2021-06-20T22:06:27",
        "upload_time_iso_8601": "2021-06-20T22:06:27.178264Z",
        "url": "https://files.pythonhosted.org/packages/1c/9f/4e9839ef27e1d7b632aa599968df06f933c9a7632e025fad91ff5de8cca1/puzzles-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec2bd962e25279f2e621072640f9d42f3ad3cee0d7a3e92d94b69770f2108e95",
          "md5": "62eaf3732a5b401b2b7aeb7cef0516aa",
          "sha256": "dd5e6f346f701b5b0334a1e1c21ce4926bec3729d8dfaf171b90f71fdeb8e5cf"
        },
        "downloads": -1,
        "filename": "puzzles-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "62eaf3732a5b401b2b7aeb7cef0516aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13964,
        "upload_time": "2021-06-20T22:12:45",
        "upload_time_iso_8601": "2021-06-20T22:12:45.758218Z",
        "url": "https://files.pythonhosted.org/packages/ec/2b/d962e25279f2e621072640f9d42f3ad3cee0d7a3e92d94b69770f2108e95/puzzles-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23c42028e0ca8fa9e088ed5ecae15bd9082fc8ce0b6c37d6041155fc440142f1",
          "md5": "4f1872fd817d4c0f3dd4efef96198947",
          "sha256": "f753858d72e4d1f091398d42f56ff86d064732bf62d2759f4fc8a6fd2a3ffebb"
        },
        "downloads": -1,
        "filename": "puzzles-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "4f1872fd817d4c0f3dd4efef96198947",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13737,
        "upload_time": "2021-06-21T02:48:59",
        "upload_time_iso_8601": "2021-06-21T02:48:59.601539Z",
        "url": "https://files.pythonhosted.org/packages/23/c4/2028e0ca8fa9e088ed5ecae15bd9082fc8ce0b6c37d6041155fc440142f1/puzzles-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23c42028e0ca8fa9e088ed5ecae15bd9082fc8ce0b6c37d6041155fc440142f1",
        "md5": "4f1872fd817d4c0f3dd4efef96198947",
        "sha256": "f753858d72e4d1f091398d42f56ff86d064732bf62d2759f4fc8a6fd2a3ffebb"
      },
      "downloads": -1,
      "filename": "puzzles-0.0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "4f1872fd817d4c0f3dd4efef96198947",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13737,
      "upload_time": "2021-06-21T02:48:59",
      "upload_time_iso_8601": "2021-06-21T02:48:59.601539Z",
      "url": "https://files.pythonhosted.org/packages/23/c4/2028e0ca8fa9e088ed5ecae15bd9082fc8ce0b6c37d6041155fc440142f1/puzzles-0.0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}