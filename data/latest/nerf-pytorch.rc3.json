{
  "info": {
    "author": "Brandon Trabucco",
    "author_email": "brandon@btrabucco.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Neural Radiance Fields (Re-Implementation)\n\nThis repository implements a minimal training and inference package around Neural Radiance Fields (NeRF). See the original paper \"NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis,\" by Ben Mildenhall, Pratul P. Srinivasan, Matthew Tancik, Jonathan T. Barron, Ravi Ramamoorthi, Ren Ng at ECCV 2020.\n\n<div style=\"background-color: white;\"><img src='examples/render.png'/></div>\n\n## Installation\n\nThe package may be installed via pip from my PyPI package:\n\n```bash\npip install nerf-pytorch\n```\n\n## Rendering\n\nThe NeRF class implements all core functionality for volume rendering of a neural radiance field. You can initialize your own NeRF model and render an image using your (untrained) model with the following snippet.\n\n```python\nfrom nerf.model import NeRF\nimport torch\n\n# build the NeRF model with default parameters\nmodel = NeRF(normalize_position=6.0).cuda()\n\n# select a pose for the camera in homogeneous coordinates\npose_o = torch.zeros(1, 3).unsqueeze(0)\npose_d = torch.eye(3).unsqueeze(0)\n\n# settings for the pinhole camera\nimage_h = 100\nimage_w = 100\nfocal_length = 130.0\n\n# settings for ray sampling and pose normalization\nnear = 2.0\nfar = 6.0\n\n# number of points sampled along the ray\nnum_samples_per_ray = 64\nmax_chunk_size = 1024\n\n# whether to sample points randomly\nrandomly_sample = True\n\n# standard deviation of gaussian noise added to density head\ndensity_noise_std = 1.0\n\n# render the image using volume rendering\nwith torch.no_grad():\n\n    image = model.render_image(\n        pose_o.cuda(), \n        pose_d.cuda(), \n        image_h, \n        image_w, \n        focal_length, \n        near, \n        far, \n        num_samples_per_ray, \n        max_chunk_size=max_chunk_size,\n        randomly_sample=randomly_sample, \n        density_noise_std=density_noise_std)\n        \n```\n\n## Training\n\nThis package provides several helpful utilities for training a NeRF model with supervised learning given image pose pairs. You can build a dataset for training a NeRF model using the provided PixelRayDataset class.\n\n```python\nfrom nerf.dataset import PixelRayDataset\nfrom nerf.model import NeRF\nimport torch.utils.data as data\n\n# build the NeRF model with default parameters\nmodel = NeRF(normalize_position=6.0).cuda()\n\n# distanced of the clipping planes along the cameta z axis\nnear = 2.0\nfar = 6.0\n\n# settings for the pinhole camera\nfocal_length = 130.0\n\n# number of points sampled along the ray\nnum_samples_per_ray = 64\n\n# whether to sample points randomly\nrandomly_sample = True\n\n# standard deviation of gaussian noise added to density head\ndensity_noise_std = 1.0\n\n# create a dataset of pixels and corresponding rays for NeRF\ndataset = PixelRayDataset(images, poses, focal_length)\ndata_loader = data.DataLoader(dataset, batch_size=1024, shuffle=True)\n\nfor target, rays_o, rays_d in data_loader:\n        \n    # render a pixel for each ray using NeRF\n    pixels = model.render_rays(\n        rays_o,\n        rays_d,  \n        near, \n        far, \n        num_samples_per_ray, \n        randomly_sample=randomly_sample, \n        density_noise_std=density_noise_std)\n\n    # mean squared error in pixels\n    loss = ((pixels - target) ** 2).mean()\n    \n```\n\n## Citation\n\nCredit for the idea of NeRF goes to the original authors in their 2020 paper.\n\n```\n@misc{mildenhall2020nerf,\n    title={NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis},\n    author={Ben Mildenhall and Pratul P. Srinivasan and Matthew Tancik and Jonathan T. Barron and Ravi Ramamoorthi and Ren Ng},\n    year={2020},\n    eprint={2003.08934},\n    archivePrefix={arXiv},\n    primaryClass={cs.CV}\n}\n```\n\nHowever, if you find this package helpful, please consider citing it!\n\n```\n@misc{trabucco2021nerf,\n  title={NeRF},\n  author={Trabucco, Brandon},\n  howpublished={\\url{https://github.com/brandontrabucco/nerf}},\n  year={2021}\n}\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/brandontrabucco/nerf/archive/v1_2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brandontrabucco/nerf",
    "keywords": "Deep Learning,Neural Networks,Vision",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nerf-pytorch",
    "package_url": "https://pypi.org/project/nerf-pytorch/",
    "platform": "",
    "project_url": "https://pypi.org/project/nerf-pytorch/",
    "project_urls": {
      "Download": "https://github.com/brandontrabucco/nerf/archive/v1_2.tar.gz",
      "Homepage": "https://github.com/brandontrabucco/nerf"
    },
    "release_url": "https://pypi.org/project/nerf-pytorch/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Neural Radiance Fields",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11853463,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "017a14b527a0e62bae0cc7cd380003f619083696b6ebcf47af2a9b8e26a36d57",
          "md5": "37e3e2c4080112f2fdd404a2fcf37f0e",
          "sha256": "b468ab040f53403455e6c7ba353e87f94e256be6cc58cd5e3c0b770f255a0178"
        },
        "downloads": -1,
        "filename": "nerf-pytorch-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "37e3e2c4080112f2fdd404a2fcf37f0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8994,
        "upload_time": "2021-10-11T02:09:19",
        "upload_time_iso_8601": "2021-10-11T02:09:19.787748Z",
        "url": "https://files.pythonhosted.org/packages/01/7a/14b527a0e62bae0cc7cd380003f619083696b6ebcf47af2a9b8e26a36d57/nerf-pytorch-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a361dfbc9843c16f76595df16e53933e5cfcfe8dcda4237454b6d33749af41f",
          "md5": "0dd501534f20518c16a4e6619c56f6ef",
          "sha256": "38c8a70e39c0379f8d548dc1b9ca059435b2d2a18d70d3a2241863b3098eb3f1"
        },
        "downloads": -1,
        "filename": "nerf-pytorch-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0dd501534f20518c16a4e6619c56f6ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11762,
        "upload_time": "2021-10-11T06:20:18",
        "upload_time_iso_8601": "2021-10-11T06:20:18.987978Z",
        "url": "https://files.pythonhosted.org/packages/7a/36/1dfbc9843c16f76595df16e53933e5cfcfe8dcda4237454b6d33749af41f/nerf-pytorch-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6660c74c9fd354bc4225dbf0e7548aa21b020cb31e94b0c938dbfbceda941f32",
          "md5": "a12828f99405db1be987b9b321b4520d",
          "sha256": "38ce97a918ae06c4f940356b9e2fc2860e126f0fb64dc60deecbf88b3628e215"
        },
        "downloads": -1,
        "filename": "nerf-pytorch-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a12828f99405db1be987b9b321b4520d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12220,
        "upload_time": "2021-10-28T04:16:51",
        "upload_time_iso_8601": "2021-10-28T04:16:51.083132Z",
        "url": "https://files.pythonhosted.org/packages/66/60/c74c9fd354bc4225dbf0e7548aa21b020cb31e94b0c938dbfbceda941f32/nerf-pytorch-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6660c74c9fd354bc4225dbf0e7548aa21b020cb31e94b0c938dbfbceda941f32",
        "md5": "a12828f99405db1be987b9b321b4520d",
        "sha256": "38ce97a918ae06c4f940356b9e2fc2860e126f0fb64dc60deecbf88b3628e215"
      },
      "downloads": -1,
      "filename": "nerf-pytorch-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a12828f99405db1be987b9b321b4520d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12220,
      "upload_time": "2021-10-28T04:16:51",
      "upload_time_iso_8601": "2021-10-28T04:16:51.083132Z",
      "url": "https://files.pythonhosted.org/packages/66/60/c74c9fd354bc4225dbf0e7548aa21b020cb31e94b0c938dbfbceda941f32/nerf-pytorch-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}