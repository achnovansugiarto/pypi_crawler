{
  "info": {
    "author": "Daniil Minukhin",
    "author_email": "ddddsa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Documentation",
      "Topic :: Utilities"
    ],
    "description": "[![](https://img.shields.io/pypi/v/foliantcontrib.utils.preprocessor_ext.svg)](https://pypi.org/project/foliantcontrib.utils.preprocessor_ext/) [![](https://img.shields.io/github/v/tag/foliant-docs/foliantcontrib.utils.preprocessor_ext.svg?label=GitHub)](https://github.com/foliant-docs/foliantcontrib.utils.preprocessor_ext)\n\n# Overview\n\nExtension for basic Preprocessor class with useful methods and functions.\n\n# Usage\n\nUsually when we create preprocessors we inherit from `BasePreprocessor`:\n\n```python\n\nclass Preprocessor(BasePreprocessor):\n  ...\n```\n\nTo use all features of preprocessor_ext we should inherit from `BasePreprocessorExt` instead:\n\n```python\n\nclass Preprocessor(BasePreprocessorExt):\n  ...\n```\n\n# Features\n\n## Simplified tag processing workflow\n\nUsually to process tags in Markdown-files we write something like this:\n\n```python\nclass Preprocessor(BasePreprocessor):\n  ...\n  def _process_tags(content):\n    def sub(match):\n      # process the tag\n      return processed_string\n\n    self.pattern.sub(sub, content)\n\n  def apply(self):\n    self.logger.info('Applying preprocessor')\n    for markdown_file_path in self.working_dir.rglob('*.md'):\n        with open(markdown_file_path, encoding='utf8') as markdown_file:\n            content = markdown_file.read()\n\n        processed_content = self._process_tags(content)\n\n        if processed_content:\n            with open(markdown_file_path, 'w') as markdown_file:\n                markdown_file.write(processed_content)\n        self.logger.info('Preprocessor applied')\n```\n\nBasePreprocessorExt saves us from writing these many lines of the code which appear unchanged in most preprocessors.\n\nSo now instead of all that code we will write:\n\n```python\nclass Preprocessor(BasePreprocessorExt):\n  ...\n  def _process_tag(match):\n    # process the tag\n    return processed_string\n\n  def apply(self):\n    self._process_tags_for_all_files(func=self._process_tag, buffer=False)\n        self.logger.info('Preprocessor applied')\n```\n\nNote the `buffer=False` parameter (which in this case is excessive because it is `False` by default). If `buffer=True`, markdown files processing will be buffered, e.g. they won't be updated until all of them are processed.\n\nAs a bonus when using this workflow we get additional capabilities of logging and outputting warnings.\n\n### Issuing warnings\n\nWhen using `_process_tags_for_all_files` method to process tags we can also take advantage of `_warning` method.\n\nWhat this method does:\n1. Prints warning message to user and adds the md-file name to this message.\n2. Logs this message.\n3. May also add to logged message context of the tag where the problem occured.\n4. May also add to logged message the error traceback.\n5. If debug=true, #3 and #4 are also added to the message which is printed to user.\n\nSimple example:\n\n```python\nclass Preprocessor(BasePreprocessorExt):\n  ...\n  def _process_tag(match):\n    try:\n      config = open(self.options.get('config'))\n    except FileNotFoundError as e:\n      self._warning('Config file not found! Using default', error=e)\n    ...\n```\n\nHere if the exception gets triggered, user will see something like this in console:\n\n```bash\nParsing config\nDone\n\nApplying preprocessor my_preprocessor\nWARNING: [index.md] Config file not found! Using default\n\nDone\n\nApplying preprocessor _unescape\nDone\n\n────────────────────\nResult: slug.pre\n\n```\n\nAs we see, we've only supplied the message, but the preprocessor also added the `WARNING:` prefix and current file name to console. If we'd run the make command in debug mode (with `-d --debug` flag), we would also see full traceback of the error. In any case, traceback is stored in log.\n\n### Getting tag context\n\nSometimes we want to show the context of the tag, where we met some problems. By context I mean some words before the tag, some contents of the tag body and some words after the tag. It's really useful for debugging large md-files, with context you usually can identify the place in the document which causes errors.\n\nFor this purpose `BasePreprocessorExt` class has a handy method called `get_tag_context`. Give it the match object you are currently working with and it will return you the string with tag context.\n\nFor example:\n\n```python\nclass Preprocessor(BasePreprocessorExt):\n  ...\n  def _process_tag(match):\n    try:\n      config = open(self.options.get('config'))\n    except FileNotFoundError as e:\n      context = self.get_tag_context(match)\n      print(f'Config not found, check the tag:\\n{context}')\n    ...\n```\n\nThis will print:\n\n```bash\nParsing config\nDone\n\nApplying preprocessor my_preprocessor\n\nConfig not found, check the tag:\n...amet, consectetur adipisicing elit. Dolores ipsum non nisi voluptatum alias.\n\n<my_tag param=\"value\" config=\"wrong/path\">\n    Tag body consectetur adipisicing elit. Voluptatem.\n</template>\n\nEnd of document.\n```\n\nNow user can easily understand where's the problem in his document.\n\n`get_tag_context` function accepts two parameters:\n\n`limit` (default: `100`) — number of characters included in context from before the tag, after the tag, and of the tag body;\n`full_tag` (default: `False`) — if this is True, the tag body is copied into context without cropping (useful for relatively small expected tag bodies).\n\n### Sending context to warning\n\nOne last thing to use the full power of `BasePreprocessorExt` warnings:\n\n`self._warning` accepts the context parameter. You can send there the context string. The context is only shown to user in the console if the debug mode is on, but it is always saved in the log file.\n\nExample:\n\n```python\nclass Preprocessor(BasePreprocessorExt):\n  ...\n  def _process_tag(match):\n    try:\n      config = open(self.options.get('config'))\n    except FileNotFoundError as e:\n      self._warning('Config file not found! Using default',\n                    context=self.get_context(match),\n                    error=e)\n    ...\n```\n\nNow if we catch this exception in normal mode, we will only get the md-filename and the message in the console. But if we run it in debug mode, we will get a full python traceback and the context of the tag. And a happy user.\n\n### allow_fail decorator\n\nOften we don't want the whole preprocessor to crash if there are some problems in just one tag of the document. We can easily achieve this using the `allow_fail` decorator, which is included in the `preprocessor_ext` module. Decorate your function, which is then sent to `_process_tags_for_all_files` method:\n\n```python\nfrom foliant.preprocessors.utils.preprocessor_ext import (BasePreprocessorExt,\n                                                          allow_fail)\n\n\nclass Preprocessor(BasePreprocessorExt):\n  ...\n  @allow_fail()\n  def _process_tag(match):\n    # process the tag\n    return processed_string\n\n  def apply(self):\n    self._process_tags_for_all_files(func=self._process_tag)\n        self.logger.info('Preprocessor applied')\n```\n\nNow in case _any_ error occurs in the `_process_tag` function, preprocessor will issue warning, show it to user, save it into log and skip the tag.\n\nThe `allow_fail` decorator accepts one argument, the error message, which will be shown to user in case of exception. It defaults to: _Failed to process tag. Skipping._\n\n## Simplified file processing workflow\n\nIf your preprocessor doesn't have tags, you're probably doing somehing like this:\n\n```python\nclass Preprocessor(BasePreprocessor):\n  ...\n  def _process_file(content):\n    processed = content\n    # do something with the content\n    return processed\n\n  def apply(self):\n    self.logger.info('Applying preprocessor')\n    for markdown_file_path in self.working_dir.rglob('*.md'):\n        with open(markdown_file_path, encoding='utf8') as markdown_file:\n            content = markdown_file.read()\n\n        processed_content = self._process_tags(content)\n\n        if processed_content:\n            with open(markdown_file_path, 'w') as markdown_file:\n                markdown_file.write(processed_content)\n        self.logger.info('Preprocessor applied')\n```\n\nBasePreprocessorExt saves us from writing these many lines of the code which appear unchanged in most preprocessors.\n\nSo now instead of all that code we will write:\n\n```python\nclass Preprocessor(BasePreprocessorExt):\n  ...\n  def _process_file(match):\n    processed = content\n    # do something with the content\n    return processed\n\n  def apply(self):\n    self._process_all_files(func=self._process_tag, buffer=False)\n        self.logger.info('Preprocessor applied')\n```\n\nNote the `buffer=False` parameter (which in this case is excessive because it is `False` by default). If `buffer=True`, markdown files processing will be buffered, e.g. they won't be updated until all of them are processed.\n\nAs a bonus we have `self.current_filepath` set to the path of currently processing file and `self.current_filename` — to the chapter name, as it is would be stated in `chapters` foliant.yml section.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/foliant-docs/foliantcontrib.utils.preprocessor_ext",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "foliantcontrib.utils.preprocessor-ext",
    "package_url": "https://pypi.org/project/foliantcontrib.utils.preprocessor-ext/",
    "platform": "any",
    "project_url": "https://pypi.org/project/foliantcontrib.utils.preprocessor-ext/",
    "project_urls": {
      "Homepage": "https://github.com/foliant-docs/foliantcontrib.utils.preprocessor_ext"
    },
    "release_url": "https://pypi.org/project/foliantcontrib.utils.preprocessor-ext/1.0.5/",
    "requires_dist": [
      "foliant (>=1.0.8)",
      "foliantcontrib.meta (>=1.2.3)",
      "PyYAML"
    ],
    "requires_python": "",
    "summary": "Extension to basic preprocessor class with useful methods and functions.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13654875,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77af2bc0407a06fdb4aff29de52da0a6d3bd36c4a5b702c5f2a60b40bbfe4f83",
          "md5": "b6c54b711159a4526182db85cdfe0552",
          "sha256": "0ce14b5ae2b447ebb185b95572988da7a7d15754a1eccb91cc50a8a7434a320c"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6c54b711159a4526182db85cdfe0552",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6898,
        "upload_time": "2019-05-20T09:22:02",
        "upload_time_iso_8601": "2019-05-20T09:22:02.910858Z",
        "url": "https://files.pythonhosted.org/packages/77/af/2bc0407a06fdb4aff29de52da0a6d3bd36c4a5b702c5f2a60b40bbfe4f83/foliantcontrib.utils.preprocessor_ext-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3d1b0ea88fd6a5c79077a4d1e2c18feedd3f71b67debf082dcf3510896775a0",
          "md5": "38d62241acb8883639fba343ce06cc96",
          "sha256": "94c574162a335a78cd54a1b95da7379a098493fc96a98f33d4dc1d54432e19e0"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "38d62241acb8883639fba343ce06cc96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5776,
        "upload_time": "2019-05-20T09:22:05",
        "upload_time_iso_8601": "2019-05-20T09:22:05.307292Z",
        "url": "https://files.pythonhosted.org/packages/a3/d1/b0ea88fd6a5c79077a4d1e2c18feedd3f71b67debf082dcf3510896775a0/foliantcontrib.utils.preprocessor_ext-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11ab1688bfd2661c36d05e8dcbe348b94e20e50eb83f1ff722a52b19946bb1bd",
          "md5": "5805229d739c260dc7ae3ff7688857c0",
          "sha256": "cf3f28bd50b2ad09e9ce850b73f232a22e0fd8c44f02fcd19502dce69fc37bf8"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5805229d739c260dc7ae3ff7688857c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6902,
        "upload_time": "2019-06-14T13:23:59",
        "upload_time_iso_8601": "2019-06-14T13:23:59.528106Z",
        "url": "https://files.pythonhosted.org/packages/11/ab/1688bfd2661c36d05e8dcbe348b94e20e50eb83f1ff722a52b19946bb1bd/foliantcontrib.utils.preprocessor_ext-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5cf8636787c1cec3e76441a18b62cf776aa1aad9908371bc4e46546aa8c250e",
          "md5": "eaef62dae6c33e9b0b7e15ec42995b69",
          "sha256": "5cb71d9852a81a52f2814df18016006ccb48cc6e8b0308e4efd76f1cd385d2bf"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eaef62dae6c33e9b0b7e15ec42995b69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5773,
        "upload_time": "2019-06-14T13:24:01",
        "upload_time_iso_8601": "2019-06-14T13:24:01.203200Z",
        "url": "https://files.pythonhosted.org/packages/f5/cf/8636787c1cec3e76441a18b62cf776aa1aad9908371bc4e46546aa8c250e/foliantcontrib.utils.preprocessor_ext-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7336b4b671e075084bfb97214cfdddc3f2e4498f83e38bf1d3ef9b3e51010f4e",
          "md5": "ee4176e9b0c24d8277da0ad73b978f09",
          "sha256": "e4f39de7090e0484f15a22149cafd3cbc988fb8637e1111b2a21adc2ef7cc143"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee4176e9b0c24d8277da0ad73b978f09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6654,
        "upload_time": "2019-07-29T10:17:18",
        "upload_time_iso_8601": "2019-07-29T10:17:18.498780Z",
        "url": "https://files.pythonhosted.org/packages/73/36/b4b671e075084bfb97214cfdddc3f2e4498f83e38bf1d3ef9b3e51010f4e/foliantcontrib.utils.preprocessor_ext-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e4a844e01cf4881924781a21b031f57a4fde71cea74256465e80fd9db50991c",
          "md5": "1a5bb8126b574d26a2969034232e4eb7",
          "sha256": "16a2882ccad40293f3a3a3eb5e113f4a4c3f6df9f92ac75304b8145b06cab3a1"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1a5bb8126b574d26a2969034232e4eb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5528,
        "upload_time": "2019-07-29T10:17:20",
        "upload_time_iso_8601": "2019-07-29T10:17:20.067233Z",
        "url": "https://files.pythonhosted.org/packages/1e/4a/844e01cf4881924781a21b031f57a4fde71cea74256465e80fd9db50991c/foliantcontrib.utils.preprocessor_ext-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c9576a450514b403e40bbf9ebae1a13562b6bde52fda11dfda51d796f987434",
          "md5": "ae5fe577c25923db17d04214778236d4",
          "sha256": "96c4bc2f8720cb13797ddf05ef5d82351b4059b0986403a9a572e3f4d60488c5"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae5fe577c25923db17d04214778236d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7218,
        "upload_time": "2020-04-02T09:08:02",
        "upload_time_iso_8601": "2020-04-02T09:08:02.208110Z",
        "url": "https://files.pythonhosted.org/packages/3c/95/76a450514b403e40bbf9ebae1a13562b6bde52fda11dfda51d796f987434/foliantcontrib.utils.preprocessor_ext-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6db07db282822e681f3045986b3177a2b68d2cdb7a4af77d52b248b95535816",
          "md5": "4c9e47801e27ab16d67287294234e05c",
          "sha256": "b7862a2467891eaf7c5a7091e9d0da54adc16ef1a6c7b1a53e3b5bd9ef3a197c"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4c9e47801e27ab16d67287294234e05c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6138,
        "upload_time": "2020-04-02T09:08:03",
        "upload_time_iso_8601": "2020-04-02T09:08:03.730452Z",
        "url": "https://files.pythonhosted.org/packages/d6/db/07db282822e681f3045986b3177a2b68d2cdb7a4af77d52b248b95535816/foliantcontrib.utils.preprocessor_ext-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d0eecae0462430074e10bf77a14c065caeaf6a847af0332fbe6095f6220911c",
          "md5": "63085b09c0f2583ba0ab6b1ad3466e1c",
          "sha256": "33cdb55eff76b7365ecb47b8e22b054ad9e13daf4b769b4c7300c36834c56e7d"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63085b09c0f2583ba0ab6b1ad3466e1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7560,
        "upload_time": "2020-08-25T13:11:16",
        "upload_time_iso_8601": "2020-08-25T13:11:16.142570Z",
        "url": "https://files.pythonhosted.org/packages/5d/0e/ecae0462430074e10bf77a14c065caeaf6a847af0332fbe6095f6220911c/foliantcontrib.utils.preprocessor_ext-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5940d1907d2a7158a4e1953bcbc656520b660ea73068f8bf8f7f8d1e9cbfd980",
          "md5": "bfef422940bc9b2ec8ac0280173f174a",
          "sha256": "b2157a281a611c951604cf519ddab4816473497874a80056efa05a3482931386"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bfef422940bc9b2ec8ac0280173f174a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7504,
        "upload_time": "2020-08-25T13:11:18",
        "upload_time_iso_8601": "2020-08-25T13:11:18.122783Z",
        "url": "https://files.pythonhosted.org/packages/59/40/d1907d2a7158a4e1953bcbc656520b660ea73068f8bf8f7f8d1e9cbfd980/foliantcontrib.utils.preprocessor_ext-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f8a07242a4d0b5cd176cffd1943737c99e454cf344a330228d726ca4b12a79b",
          "md5": "d0451fd7c6c191217971599c5dbd1f87",
          "sha256": "1d04dc591d96929b60dd77210c7fd5ee392d5f8f4677bb2592cb2a79809c913a"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0451fd7c6c191217971599c5dbd1f87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7609,
        "upload_time": "2020-11-16T12:35:20",
        "upload_time_iso_8601": "2020-11-16T12:35:20.129914Z",
        "url": "https://files.pythonhosted.org/packages/9f/8a/07242a4d0b5cd176cffd1943737c99e454cf344a330228d726ca4b12a79b/foliantcontrib.utils.preprocessor_ext-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "664131187e2f904f55fb7f994d39f1a818d9ecf65f681c64dab93ac22ded7b60",
          "md5": "7d922910d4bdc1d5bc6515f03e150050",
          "sha256": "347ddef715efe29595c0d7f3794dcadaad7b9fdf32806ebc045aa3a10ca9b0df"
        },
        "downloads": -1,
        "filename": "foliantcontrib.utils.preprocessor_ext-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7d922910d4bdc1d5bc6515f03e150050",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7554,
        "upload_time": "2020-11-16T12:35:21",
        "upload_time_iso_8601": "2020-11-16T12:35:21.665044Z",
        "url": "https://files.pythonhosted.org/packages/66/41/31187e2f904f55fb7f994d39f1a818d9ecf65f681c64dab93ac22ded7b60/foliantcontrib.utils.preprocessor_ext-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f8a07242a4d0b5cd176cffd1943737c99e454cf344a330228d726ca4b12a79b",
        "md5": "d0451fd7c6c191217971599c5dbd1f87",
        "sha256": "1d04dc591d96929b60dd77210c7fd5ee392d5f8f4677bb2592cb2a79809c913a"
      },
      "downloads": -1,
      "filename": "foliantcontrib.utils.preprocessor_ext-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0451fd7c6c191217971599c5dbd1f87",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7609,
      "upload_time": "2020-11-16T12:35:20",
      "upload_time_iso_8601": "2020-11-16T12:35:20.129914Z",
      "url": "https://files.pythonhosted.org/packages/9f/8a/07242a4d0b5cd176cffd1943737c99e454cf344a330228d726ca4b12a79b/foliantcontrib.utils.preprocessor_ext-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "664131187e2f904f55fb7f994d39f1a818d9ecf65f681c64dab93ac22ded7b60",
        "md5": "7d922910d4bdc1d5bc6515f03e150050",
        "sha256": "347ddef715efe29595c0d7f3794dcadaad7b9fdf32806ebc045aa3a10ca9b0df"
      },
      "downloads": -1,
      "filename": "foliantcontrib.utils.preprocessor_ext-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "7d922910d4bdc1d5bc6515f03e150050",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7554,
      "upload_time": "2020-11-16T12:35:21",
      "upload_time_iso_8601": "2020-11-16T12:35:21.665044Z",
      "url": "https://files.pythonhosted.org/packages/66/41/31187e2f904f55fb7f994d39f1a818d9ecf65f681c64dab93ac22ded7b60/foliantcontrib.utils.preprocessor_ext-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}