{
  "info": {
    "author": "",
    "author_email": "Pin People <tech@pinpeople.com.br>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# EventPeople\n\n[![CircleCI](https://dl.circleci.com/status-badge/img/gh/pin-people/event_people_python/tree/main.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/pin-people/event_people_python/tree/main)\n\nEventPeople is a tool to simplify the communication of event based services. It is an based on the [EventBus](https://github.com/EmpregoLigado/event_bus_rb) gem.\n\nThe main idea is to provide a tool that can emit or consume events based on its names, the event name has 4 words (`resource.origin.action.destination`) which defines some important info about what kind of event it is, where it comes from and who is eligible to consume it:\n\n- **resource:** Defines which resource this event is related like a `user`, a `product`, `company` or anything that you want;\n- **origin:** Defines the name of the system which emitted the event;\n- **action:** What action is made on the resource like `create`, `delete`, `update`, etc. PS: *It is recommended to use the Simple Present tense for actions*;\n- **destination (Optional):** This word is optional and if not provided EventPeople will add a `.all` to the end of the event name. It defines which service should consume the event being emitted, so if it is defined and there is a service whith the given name only this service will receive it. It is very helpful when you need to re-emit some events. Also if it is `.all` all services will receive it.\n\nAs of today EventPeople uses RabbitMQ as its datasource, but there are plans to add support for other Brokers in the future.\n\n## Installation\n\nAdd this line to your project's `requirements.txt` file:\n\n```text\nevent_people>=0.0.1\n```\n\nAnd then execute\n\n```bash\npython -m pip install -r requirements.txt\n```\n\nOr install it with:\n\n```bash\npython -m pip install event_people\n```\n\nAnd set env vars:\n```bash\nexport RABBIT_URL='amqp://guest:guest@localhost:5672'\nexport RABBIT_EVENT_PEOPLE_APP_NAME='service_name'\nexport RABBIT_EVENT_PEOPLE_VHOST='event_people'\nexport RABBIT_EVENT_PEOPLE_TOPIC_NAME='event_people'\n````\n\n## Usage\n\n### Events\n\nThe main component of `EventPeople` is the `Event` class which wraps all the logic of an event and whenever you receive or want to send an event you will use it.\n\nIt has 2 attributes `name` and `payload`:\n\n- **name:** The name must follow our conventions, being it 3 (`resource.origin.action`) or 4 words (`resource.origin.action.destination`);\n- **payload:** It is the body of the massage, it should be a Hash object for simplicity and flexibility.\n\n```python\nfrom event_people import Event\nfrom event_people import Emitter\n\nname = 'user.users.create'\nbody = { id: 42, name: 'John Doe', age: 35 }\n\nevent = Event(name, body)\n\n```\n\nThere are 3 main interfaces to use `EventPeople` on your project:\n\n- Calling `event_people.Emitter.trigger(event)` inside your project;\n- Calling `event_people.Listener.on(event_name)` inside your project;\n- Or extending `event_people.ListenersBase` and use it as a daemon.\n\n### Using the Emitter\nYou can emit events on your project passing an `event_people.event.Event` instance to the `event_people.emitter.trigger` method. Doing this other services that are subscribed to these events will receive it.\n\n```python\nfrom event_people import Event\nfrom event_people import Emitter\n\nevent_name = 'receipt.payments.pay.users'\nbody = { amount: 350.76 }\nevent = Event(event_name, body)\n\nEmitter.trigger(event)\n\n```\n[See more details](https://github.com/pin-people/event_people_python/blob/master/examples/emitter.rb)\n\n### Listeners\n\nYou can subscribe to events based on patterns for the event names you want to consume or you can use the full name of the event to consume single events.\n\nWe follow the RabbitMQ pattern matching model, so given each word of the event name is separated by a dot (`.`), you can use the following symbols:\n\n- `* (star):` to match exactly one word. Example `resource.*.*.all`;\n- `# (hash):` to match zero or more words. Example `resource.#.all`.\n\nOther important aspect of event consumming is the result of the processing we provide 3 methods so you can inform the Broker what to do with the event next:\n\n- `success!:` should be called when the event was processed successfuly and the can be discarded;\n- `fail!:` should be called when an error ocurred processing the event and the message should be requeued;\n- `reject!:` should be called whenever a message should be discarded without being processed.\n\nGiven you want to consume a single event inside your project you can use the `event_people.Listener.on` method. It consumes a single event, given there are events available to be consumed with the given name pattern.\n\n```python\nfrom event_people import Listener\nfrom event_people import Event\n\n\ndef callback_method(event, context):\n    print(\"\")\n    print(\"  - Received the %r message from %r:\", event.name, event.origin)\n    print(\"     Message: %r\", event.body)\n    print(\"\")\n\n    context.success()\n\n\nevent_name = 'resource.origin.action.all'\n\nListener.on(event_name, callback_method)\n```\n[See more details](https://github.com/pin-people/event_people_python/blob/master/examples/listener.rb)\n\nYou can also receive all available messages using a loop:\n\n```python\nfrom event_people import Listener\nfrom event_people import Event\n\nhas_events = true\n\ndef callback_method(event, context):\n    has_events = true\n    print(\"\")\n    print(\"  - Received the %r message from %r:\", event.name, event.origin)\n    print(\"     Message: %r\", event.body)\n    print(\"\")\n\n    context.success()\n\n\nevent_name = 'resource.origin.action.all'\n\n\nwhile(has_events):\n    has_events = false\n    Listener.on(event_name, callback_method)\n```\n\n#### Multiple events routing\n\nIf your project needs to handle lots of events you can extend `eventPeople.ListenersBase` class to bind how many events you need to instance methods, so whenever an event is received the method will be called automatically.\n\n```python\nfrom event_people import ListenersBase\nfrom event_people import Event\n\nclass CustomEventListener(Base):\n    self.bind('resource.custom.pay', self.pay)\n    self.bind('resource.custom.receive', self.receive)\n    self.bind('resource.custom.private.service', self.private_channel)\n\n    def pay(event):\n        print(\"Paid %r for %r ~> %r\", event.body['amount'], event.body['name'], event.name)\n\n        self.success()\n\n    def receive(event):\n        if (event.body.amount > 500):\n          print(\"Received %r from %r ~> %r\", event.body['amount'], event.body['name'], event.name)\n      else:\n          print(\"[consumer] Got SKIPPED message\")\n          return self.reject()\n\n          self.success();\n\n  def private_channel(event):\n    print(\"[consumer] Got a private message: \\\"%r\\\" ~> %r\", event.body['message'], event.name)\n\n    self.success();\n```\n[See more details](https://github.com/pin-people/event_people_python/blob/master/examples/daemon.rb)\n\n#### Creating a Daemon\n\nIf you have the need to create a deamon to consume messages on background you can use the `eventPeople.Daemon.start` method to do so with ease. Just remember to define or import all the event bindings before starting the daemon.\n\n```python\nfrom event_people import Daemon\nfrom event_people import BaseListener\n\nclass CustomEventListener(BaseListener):\n    def pay(self, event):\n        print(f\"Paid {event.body['amount']} for {event.body['name']} ~> {event.name}\")\n\n        self.success()\n\n    def receive(self, event):\n        if event.body['amount'] > 500:\n            print(f\"Received {event.body['amount']} from {event.body['name']} ~> {event.name}\")\n        else:\n            print('[consumer] Got SKIPPED message')\n\n            return self.reject()\n\n        self.success()\n\n    def private_channel(self, event):\n        print(f\"[consumer] Got a private message: \\\"{event.body['message']}\\\" ~> {event.name}\")\n\n        self.success()\n\n    def ignore_me(self, event):\n        print(f\"This should never be called...\")\n        print(f\"Spying on other systems: \\\"{event.body['message']}\\\" ~> {event.name}\")\n\n        self.success()\n\nCustomEventListener.bind_event('resource.*.pay', 'pay')\nCustomEventListener.bind_event('resource.custom.receive', 'receive')\nCustomEventListener.bind_event('resource.custom.private.service_name', 'private_channel')\nCustomEventListener.bind_event('resource.custom.ignored.other_service', 'ignore_me')\nCustomEventListener.bind_event('resource.custom.pay.all', 'receive')\n\nprint('****************** Daemon Ready ******************');\n\nDaemon.start()\n```\n[See more details](https://github.com/pin-people/event_people_python/blob/master/examples/daemon.rb)\n\n## Development\n\nAfter checking out the repo, run `bin/setup` to install dependencies. Then, run `bin/test` to run the tests.\n\nTo install this package onto your local machine, run `python -m pip install -e .`.\n\n## Contributing\n\n- Fork it\n- Create your feature branch (`git checkout -b my-new-feature`)\n- Commit your changes (`git commit -am 'Add some feature'`)\n- Push to the branch (`git push origin my-new-feature`)\n- Create new Pull Request\n\n## License\n\nThe package is available as open source under the terms of the [LGPL 3.0 License](https://www.gnu.org/licenses/lgpl-3.0.en.html).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "event-people",
    "package_url": "https://pypi.org/project/event-people/",
    "platform": null,
    "project_url": "https://pypi.org/project/event-people/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pin-people/event_people_python/issues",
      "Homepage": "https://github.com/pin-people/event_people_python"
    },
    "release_url": "https://pypi.org/project/event-people/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Tool to simplify the communication of event based services.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15537127,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "365d276937bfdf2b891b0c2beb8ba477fbb682ea21209ffc8a1354618aa6ad6c",
          "md5": "cec7b8b16faff351d20e0709aaab8928",
          "sha256": "5846e074a4dba048c6fbbeb21a58e842151e942247bfaaabbbc74d99dc824322"
        },
        "downloads": -1,
        "filename": "event_people-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cec7b8b16faff351d20e0709aaab8928",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13866,
        "upload_time": "2022-10-14T13:23:28",
        "upload_time_iso_8601": "2022-10-14T13:23:28.395132Z",
        "url": "https://files.pythonhosted.org/packages/36/5d/276937bfdf2b891b0c2beb8ba477fbb682ea21209ffc8a1354618aa6ad6c/event_people-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ce61660f1b86f5866c32eda6b06fc4b1ac17b608631e1605a8429d6b5675081",
          "md5": "097428de7741c57dda40f3481f4f0bc5",
          "sha256": "198715a2352dc5c5968ba1d1aeb7c941f2958966b2af32478133563073e923db"
        },
        "downloads": -1,
        "filename": "event_people-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "097428de7741c57dda40f3481f4f0bc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12326,
        "upload_time": "2022-10-14T13:23:30",
        "upload_time_iso_8601": "2022-10-14T13:23:30.550325Z",
        "url": "https://files.pythonhosted.org/packages/4c/e6/1660f1b86f5866c32eda6b06fc4b1ac17b608631e1605a8429d6b5675081/event_people-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fbd64bc884504f8aad77ef0b7d00905e51905d29b30db8c4d66c706f6f981e7",
          "md5": "655ca77a227744f5bbc53ec69614497a",
          "sha256": "2d2664043f14d26633b2f210b08988c12b5b594af787f5108ae8fcbb2ee3b402"
        },
        "downloads": -1,
        "filename": "event_people-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "655ca77a227744f5bbc53ec69614497a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14600,
        "upload_time": "2022-10-26T13:32:34",
        "upload_time_iso_8601": "2022-10-26T13:32:34.412818Z",
        "url": "https://files.pythonhosted.org/packages/8f/bd/64bc884504f8aad77ef0b7d00905e51905d29b30db8c4d66c706f6f981e7/event_people-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a19023c0528824acb0e644096f2486e5acda48af65864a9064dca16eb3d1955",
          "md5": "6833499cd7264bdde48e029998354f97",
          "sha256": "0d8389eb1fb43143052af94a717bad7ad7fc70681d0307290ec324296ba3dc0c"
        },
        "downloads": -1,
        "filename": "event_people-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6833499cd7264bdde48e029998354f97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13789,
        "upload_time": "2022-10-26T13:32:36",
        "upload_time_iso_8601": "2022-10-26T13:32:36.387512Z",
        "url": "https://files.pythonhosted.org/packages/1a/19/023c0528824acb0e644096f2486e5acda48af65864a9064dca16eb3d1955/event_people-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fbd64bc884504f8aad77ef0b7d00905e51905d29b30db8c4d66c706f6f981e7",
        "md5": "655ca77a227744f5bbc53ec69614497a",
        "sha256": "2d2664043f14d26633b2f210b08988c12b5b594af787f5108ae8fcbb2ee3b402"
      },
      "downloads": -1,
      "filename": "event_people-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "655ca77a227744f5bbc53ec69614497a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14600,
      "upload_time": "2022-10-26T13:32:34",
      "upload_time_iso_8601": "2022-10-26T13:32:34.412818Z",
      "url": "https://files.pythonhosted.org/packages/8f/bd/64bc884504f8aad77ef0b7d00905e51905d29b30db8c4d66c706f6f981e7/event_people-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a19023c0528824acb0e644096f2486e5acda48af65864a9064dca16eb3d1955",
        "md5": "6833499cd7264bdde48e029998354f97",
        "sha256": "0d8389eb1fb43143052af94a717bad7ad7fc70681d0307290ec324296ba3dc0c"
      },
      "downloads": -1,
      "filename": "event_people-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6833499cd7264bdde48e029998354f97",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13789,
      "upload_time": "2022-10-26T13:32:36",
      "upload_time_iso_8601": "2022-10-26T13:32:36.387512Z",
      "url": "https://files.pythonhosted.org/packages/1a/19/023c0528824acb0e644096f2486e5acda48af65864a9064dca16eb3d1955/event_people-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}