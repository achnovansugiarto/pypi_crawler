{
  "info": {
    "author": "Charlie Laughton",
    "author_email": "charles.laughton@nottingham.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Crosscore\n\n*Crosscore* is part of [Project Crossbow](https://bitbucket.org/claughton/crossbow). It\nallows you to create an autoscaling pool of instances in the cloud that can then be used with [crossflow](https://bitbucket.org/claughton/crossflow) to execute computational workflows.\n\nCurrently *Crosscore* supports [Amazon Web Services](https://aws.amazon.com) and \n[Google Cloud Platform](https://cloud.google.com).\n\n## 1. Installation\n### 1.1 Prerequisites\n\n#### 1.1.1 Python Version\n*Crosscore* requires Python 3.6 or higher. No version of Python 2 is supported.\n\n#### 1.1.2 Cloud Provider Configuration\n*Crosscore* supports both AWS and GCP. There are slightly different configuration processes depending on which you plan to use:\n\n**AWS**\n\nIt is assumed that you have done what is required to give you programmatic access to your AWS account. This\nwill involve generating your *AWS AccessKey ID* and *Secret Access Key*, and installing them with `aws configure`.\n\nIn addition you need to make sure your account has the following permissions:\n\n    Amazon EC2FullAccess\n\n**GCP**\n\nYou need to have downloaded a .json file with your service account credentials - see [here](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) for details. Then you need to decide on an availability zone for your cluster - \nbear in mind that this will affect the range of instance types (particularly GPU accelerators) you will be able to launch.\nWith these in hand, create two environment variables:\n\n    export GOOGLE_APPLICATION_CREDENTIALS=<path to credentials file>\n    export GOOGLE_DEFAULT_AVAILABILITY_ZONE=<availability zone>\n\n#### 1.1.3 Terraform\n*Crosscore* uses [Terraform](https://www.terraform.io) to do the heavy lifting of cloud infrastructure\ncreation and management. Before you can use *Crosscore* you must install terraform accoring to their \ninstructions. Once you can run:\n\n    terraform -version\n\nyou have done enough.\n\n#### 1.1.4 SSH\nYou will need an ssh public key (e.g., $HOME/.ssh/id_rsa.pub). If you don't already have this, use `ssh-keygen` to make it, then set an environment variable to\nits location:\n\n    export SSH_PUBLIC_KEY=<path to id_rsa.pub or equivalent>\n\n### 1.2 Install the Crosscore Python Package\n*Crosscore* is not currently in [pypi](https://pypi.org) so to install it use:\n\n    pip install git+https://bitbucket.org/claughton/crosscore.git\n\nIf all goes smoothly, you can then check the installation is OK by running `xcore -h`:\n    \n    usage: xcore [-h] [-V] {status,start,restart,shutdown,daemon} ...\n    \n    Crosscore: Cloud clusters for distributed computing.\n    \n    positional arguments:\n      {status,start,restart,shutdown,daemon}\n        status              status of crosscore cluster\n        start               create cloud resources\n        restart             recreate cloud resources\n        shutdown            terminate and delete all resources\n        daemon              control the xcore daemon\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -V, --version         show program's version number and exit\n\n### 1.3 Configuration\nProduce an initial default configuration for *xcore* using the command:\n\n    xcore-init <provider>\n\nwhere <provider> is \"aws\" or \"gcp\".\n\nThis will run some checks that you have all the prerequisites, and create some configuration and template\nfiles. These will be placed in $HOME/.xcore. \nThe process may take quite a time, as it involves terraform creating your base cloud infrastructure.\n\nOnce complete, check the default configuration in $HOME/.xcore/config.yaml. In particular you may want to change `image_name` - the name of the machine image\nused to create the worker instances, and the associated `image_owner`. Most other \"interesting\" parameters such as worker instance type and the maximum number of workers that can be launched, can be changed interactively so do not need editing here now.\n\n### 1.4 Start up\nOnce you are happy with the configuration, run `xcore start` to create the base cloud infrastructure and launch the **Crosscore** daemon. The base infrastructure consists of a small (default t2.small/f1-micro) instance that runs the scheduler, the daemon listens for job requests and autoscales the cluster as required.\n\n## 2. Run a test job\nCreate a small **crossflow** workflow, e.g.:\n\n    from crossflow.kernels import SubprocessKernel\n    from crossflow.clients import Client\n    from crosscore import cluster\n\n    sleeper = SubprocessKernel('sleep {n}; echo {n}')\n    sleeper.set_inputs(['n'])\n    sleeper.set_outputs(['STDOUT'])\n\n    client = Client(address=cluster.get_url())\n    result = client.submit(sleeper, 10)\n    print(result.result())\n\nIf you run this Python script interactively in one window, you can use \n`xcore status` from another to follow the process of worker creation, the \njob being run, and the worker being deleted after.\n         \n## 3. Shut down the cluster\nIf you are not going to use the cluster for a while, you can shut down the scheduler instance and stop the daemon:\n\n    xcore shutdown\n\nWhen you want to use it again, you run `xcore restart`\n\n## 4. Changing the instance type and cluster size\nWithin a script you can adjust the maximum number of instances that may be \nlaunched, and their instance type, before you submit the job, e.g.:\n\n    ...\n    # AWS example:\n    cluster.set_worker_type('c5.xlarge')\n    # GCP example:\n    # cluster.set_worker_type('n1-standard-4', accelerator_type='nvidia-tesla-t4')\n    cluster.set_max_workers(5)\n    client = Client(cluster.get_url())\n    ...\n\n## 5. Changing the machine image\n\nThe workflows you can run using **crossflow** depends on the software installed on your worker nodes. Though you may be able to do some provisioning \nof these on the fly (i.e., within **crossflow** kernel definitions) most likely you will want to prepare machine images with your favourite\nsoftware stack pre-installed. Examples of how this can be done using [Packer](https://www.packer.io) are available in the `Packer` folder.\n\nNote that if you change the machine image, you will need to restart **crosscore** (`crosscore shutdown; crosscore restart`).\n\n## 6. Authors:\n\n• Christian Suess\n• Charlie Laughton charles.laughton@nottingham.ac.uk\n\n## 7. Acknowlegements:\n\nEPSRC Grant [EP/P011993/1](https://gow.epsrc.ukri.org/NGBOViewGrant.aspx?GrantRef=EP/P011993/1)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/claughton/crosscore",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crosscore",
    "package_url": "https://pypi.org/project/crosscore/",
    "platform": "",
    "project_url": "https://pypi.org/project/crosscore/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/claughton/crosscore"
    },
    "release_url": "https://pypi.org/project/crosscore/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple cloud-based workflow system",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8043608,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a2ed484a076965f0d7b354dea3366fee99c8c6f334037af554cb65bc9f48eee",
          "md5": "067c77d74e28f7b69f24d5118fc0a60a",
          "sha256": "3c6521d9c41a6a983abbf44f79c1fa8ef1bd7ecfc8e51df693fbea2709bb35a1"
        },
        "downloads": -1,
        "filename": "crosscore-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "067c77d74e28f7b69f24d5118fc0a60a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17079,
        "upload_time": "2020-08-26T12:48:49",
        "upload_time_iso_8601": "2020-08-26T12:48:49.981225Z",
        "url": "https://files.pythonhosted.org/packages/0a/2e/d484a076965f0d7b354dea3366fee99c8c6f334037af554cb65bc9f48eee/crosscore-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a2ed484a076965f0d7b354dea3366fee99c8c6f334037af554cb65bc9f48eee",
        "md5": "067c77d74e28f7b69f24d5118fc0a60a",
        "sha256": "3c6521d9c41a6a983abbf44f79c1fa8ef1bd7ecfc8e51df693fbea2709bb35a1"
      },
      "downloads": -1,
      "filename": "crosscore-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "067c77d74e28f7b69f24d5118fc0a60a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17079,
      "upload_time": "2020-08-26T12:48:49",
      "upload_time_iso_8601": "2020-08-26T12:48:49.981225Z",
      "url": "https://files.pythonhosted.org/packages/0a/2e/d484a076965f0d7b354dea3366fee99c8c6f334037af554cb65bc9f48eee/crosscore-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}