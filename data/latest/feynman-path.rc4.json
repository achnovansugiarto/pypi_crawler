{
  "info": {
    "author": "Casey Duckering",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: IPython",
      "Framework :: Jupyter",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Feynman Path Sum Diagram for Quantum Circuits\n\nA visualization tool for the Feynman Path Sum applied to quantum circuits.\nThe [path integral formulation](https://en.wikipedia.org/wiki/Path_integral_formulation) is an interpretation of quantum mechanics that can aid in understanding superposition and interference.\n\nPath sum:\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/no-entanglement.png\" width=\"991.5\" />\n\nCircuit diagram:\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/no-entanglement-circuit.png\" width=\"388\" />\n\nHow to read a path sum diagram:\n- Time flows from left to right as gates are executed on qubits.\n- Arrows transition from one state to another and traversing the arrows gives a path to an output.\n- Two diverging arrows indicate a split into two potential outcomes.\n- An orange arrow indicates a negative sign is added to that outcome.\n- When two arrows converge, the amplitudes are summed.\n- Quantum interference is when positive and negative amplitudes cancel in this sum.\n- The rightmost column lists the possible measurement outcomes along with the final probability amplitudes of measuring each outcome.\n\nSee also: [Bloch sphere visualization](https://github.com/cduck/bloch_sphere)\n\n# Install\n\nfeynman\\_path is available on PyPI:\n\n```bash\npython3 -m pip install feynman_path\n```\n\n## Prerequisites\n\nSeveral non-python tools are used to generate the graphics and various output formats.\nThese non-python dependencies are listed below and platform-specific installation instructions can be found [here](https://github.com/cduck/latextools/#prerequisites).\n\n- LaTeX: A distribution of LaTeX that provides the `pdflatex` command needs to be installed separately.  Used to generate the gate and state labels.\n- [pdf2svg](https://github.com/dawbarton/pdf2svg): Used to convert the LaTeX expressions into SVG elements.\n- [Inkscape](https://inkscape.org/) (optional): Only required to convert the output to PDF format.\n- [Cairo](https://www.cairographics.org/download/) (optional): Only required to convert the output to PNG format.\n\n### Ubuntu\n\n```bash\nsudo apt install texlive pdf2svg inkscape libcairo2  # Or texlive-latex-recommended, or texlive-latex-extra\n```\n\n### macOS\n\nUsing [homebrew](https://brew.sh/):\n\n```bash\nbrew install --cask mactex inkscape\nbrew install pdf2svg cairo\n```\n\n\n# Usage\n\nThis package provides a command line tool to generate diagrams.\n\n### Examples\n```bash\nfeynman_path interference 2 h0 cnot0,1 z1 h0 h1 cnot1,0 h1\n```\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/interference.png\" width=\"1355\" />\n\n```bash\nfeynman_path interference 2 h0 cnot0,1 z1 h0 h1 cnot1,0 h1 --circuit\n```\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/interference-circuit.png\" width=\"488\" />\n\n### Command line options\n```\n$ feynman_path -h\nusage: feynman_path [-h] [--svg] [--png] [--pdf] [--sequence] [--circuit]\n                    [--scale SCALE] [--verbose]\n                    name n_qubits gate [gate ...]\n\nRenders a Feynman path sum diagram for a sequence of quantum gates.\n\npositional arguments:\n  name           The file name to save (excluding file extension)\n  n_qubits       The number of qubits in the quantum circuit\n  gate           List of gates to apply (e.g. h0 z1 cnot0,1)\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --svg          Save diagram as an SVG image (default)\n  --png          Save diagram as a PNG image\n  --pdf          Save diagram as a PDF document\n  --sequence     Save a sequence of images that build up the diagram from left\n                 to right as <name>-nn.svg/png/pdf\n  --circuit      Save a standard quantum circuit diagram named\n                 <name>-circuit.svg/png/pdf instead of a Feynman path diagram\n  --scale SCALE  Scales the resolution of the diagram when saved as a PNG\n  --verbose      Print extra progress information\n```\n\n### Python Package\nfeynman\\_path also provides a Python 3 package as an alternative to the command line tool.  Diagrams can be viewed directly in a Jupyter notebook or saved.\n\n```python\nimport feynman_path\n\nn_qubits = 3\nfont = 12\nws_label = 4+0.55*n_qubits  # Label width relative to font size\nw_time = 60+ws_label*font  # Diagram column width\nf = feynman_path.Diagram(\n    n_qubits, font=font, ws_label=ws_label, w_time=w_time)\n\nf.perform_h(0)\nf.perform_cnot(0, 1)\nf.perform_z(1)\nf.perform_cnot(1, 2, pre_latex=r'\\color{red!80!black}')\nf.perform_h(0)\nf.perform_h(1)\nf.perform_cnot(1, 0)\n\nf.draw()  # Display in Jupyter\n```\n```python\nf.draw().save_svg('output.svg')  # Save SVG\nf.draw().set_pixel_scale(2).save_png('output.png')  # Save PNG\nimport latextools\nlatextools.svg_to_pdf(f.draw()).save('output.pdf')  # Save PDF\n```\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/no-interference.png\" width=\"1626\" />\n\nSee [examples/render\\_examples.py](https://github.com/cduck/feynman_path/blob/master/examples/render_examples.py) for more example code.\n\n# Examples\n\n### Using the CNOT gate to entangle qubits\nThe [CNOT gate](https://en.wikipedia.org/wiki/Controlled_NOT_gate) (⋅–⨁) can be used to entangle two qubits, creating a [Bell pair](https://en.wikipedia.org/wiki/Bell_state), but for certain input qubit states, the CNOT will have no effect.\n\n**Create a Bell pair by using a CNOT on the |+0⟩ state (q0=|+⟩, q1=|0⟩):**\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/entanglement-circuit.png\" width=\"337.5\" />\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/entanglement.png\" width=\"810\" />\n\nNote the output (rightmost) column is an entangled state: |00⟩+|11⟩\n\n```bash\nfeynman_path no-entanglement 2 h0 cnot0,1 h0 h1\n```\n\n**Fail to create a bell pair by using a CNOT on the |++⟩ state (q0=|+⟩, q1=|+⟩):**\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/no-entanglement-circuit.png\" width=\"388\" />\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/no-entanglement.png\" width=\"991.5\" />\n\n```bash\nfeynman_path no-entanglement 2 h0 h1 cnot0,1 h0 h1\n```\n\nNote the output (rightmost) column is a separable state: |00⟩\n\n### Copying an intermediate qubit state onto an ancilla ruins interference\nIn classical computing, it is common to inspect intermediate steps of a computation.  This can be very useful for debugging.  In quantum computing however, this destroys the effect of interference.  We can use a [CNOT gate](https://en.wikipedia.org/wiki/Controlled_NOT_gate) (⋅–⨁) to copy an intermediate value onto another qubit to inspect later.  Shown below, copying the intermediate value of q1 to q2 changes the output of q0, q1.\n\n**Original circuit that compute the output q0=1, q1=0:**\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/interference-circuit.png\" width=\"488\" />\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/interference.png\" width=\"1355\" />\n\n```bash\nfeynman_path interference 2 h0 cnot0,1 z1 h0 h1 cnot1,0 h1\n```\n\n**The addition of CNOT1,2 to inspect the intermediate value of q1 changes the output of q0:**\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/no-interference-circuit.png\" width=\"538\" />\n\n<img src=\"https://raw.githubusercontent.com/cduck/feynman_path/master/examples/no-interference.png\" width=\"1626\" />\n\nNote how the path diagram is the same except the arrows at H1 are now split into the upper and lower halves of the diagram and don't interfere anymore.\n\n```bash\nfeynman_path no-interference 3 h0 cnot0,1 z1 cnot1,2 h0 h1 cnot1,0 h1\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/cduck/feynman_path/archive/0.2.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cduck/feynman_path",
    "keywords": "quantum computing,feynman path,path sum,jupyter",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "feynman-path",
    "package_url": "https://pypi.org/project/feynman-path/",
    "platform": null,
    "project_url": "https://pypi.org/project/feynman-path/",
    "project_urls": {
      "Download": "https://github.com/cduck/feynman_path/archive/0.2.0.tar.gz",
      "Homepage": "https://github.com/cduck/feynman_path"
    },
    "release_url": "https://pypi.org/project/feynman-path/0.2.0/",
    "requires_dist": [
      "drawSvg (~=2.0)",
      "latextools (~=0.5)",
      "sympy (~=1.7)"
    ],
    "requires_python": "",
    "summary": "Visualization tool for the Feynman Path Sum applied to quantum circuits",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17047400,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "713da06406e205d5ba91aa1fbbdaaab1e4e15e89baab0f781d55234d0b792c94",
          "md5": "d90bce5f6c9a3346ff0b05c9875eb557",
          "sha256": "66a3fe1dab231471cb862bb74f2078466c7b250b20aad1d307758770546fc3b4"
        },
        "downloads": -1,
        "filename": "feynman_path-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d90bce5f6c9a3346ff0b05c9875eb557",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10075,
        "upload_time": "2021-03-24T06:21:59",
        "upload_time_iso_8601": "2021-03-24T06:21:59.364207Z",
        "url": "https://files.pythonhosted.org/packages/71/3d/a06406e205d5ba91aa1fbbdaaab1e4e15e89baab0f781d55234d0b792c94/feynman_path-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b261f9f3ca36d511245be4d1c975c88725371d26b6ffbdbcfd7b8d27ffc09cf",
          "md5": "c6abe781efb1c5eb43a638aa6083adae",
          "sha256": "f4150fc371f538957242adc2ee716eadc92c52f6cb548921710823521c0eea1f"
        },
        "downloads": -1,
        "filename": "feynman_path-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6abe781efb1c5eb43a638aa6083adae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10083,
        "upload_time": "2021-05-12T22:27:27",
        "upload_time_iso_8601": "2021-05-12T22:27:27.289029Z",
        "url": "https://files.pythonhosted.org/packages/2b/26/1f9f3ca36d511245be4d1c975c88725371d26b6ffbdbcfd7b8d27ffc09cf/feynman_path-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e2fcc7460ca7746f2de7566299d3a8a73cbf9ede6e1ad3552b480da45332771",
          "md5": "f866a0b3a3b08e9b264835dbdc36b073",
          "sha256": "e4297ae165c4da5dd5be16d0c174e87bb8bad13e6bfb22b5c8852415f490c511"
        },
        "downloads": -1,
        "filename": "feynman_path-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f866a0b3a3b08e9b264835dbdc36b073",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10142,
        "upload_time": "2021-06-03T16:23:17",
        "upload_time_iso_8601": "2021-06-03T16:23:17.193612Z",
        "url": "https://files.pythonhosted.org/packages/0e/2f/cc7460ca7746f2de7566299d3a8a73cbf9ede6e1ad3552b480da45332771/feynman_path-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7108a9088c272db96d8272a8ccf5031823b9524a390a422f527e97b39dc3920",
          "md5": "924a6ae917774358719fe3b2d3dec970",
          "sha256": "32eca3a1dc603fceca9e160f7d1bb0fbfbbf023b8c94db192fff270b61334439"
        },
        "downloads": -1,
        "filename": "feynman_path-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "924a6ae917774358719fe3b2d3dec970",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10134,
        "upload_time": "2023-02-26T10:54:42",
        "upload_time_iso_8601": "2023-02-26T10:54:42.941764Z",
        "url": "https://files.pythonhosted.org/packages/a7/10/8a9088c272db96d8272a8ccf5031823b9524a390a422f527e97b39dc3920/feynman_path-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7108a9088c272db96d8272a8ccf5031823b9524a390a422f527e97b39dc3920",
        "md5": "924a6ae917774358719fe3b2d3dec970",
        "sha256": "32eca3a1dc603fceca9e160f7d1bb0fbfbbf023b8c94db192fff270b61334439"
      },
      "downloads": -1,
      "filename": "feynman_path-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "924a6ae917774358719fe3b2d3dec970",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10134,
      "upload_time": "2023-02-26T10:54:42",
      "upload_time_iso_8601": "2023-02-26T10:54:42.941764Z",
      "url": "https://files.pythonhosted.org/packages/a7/10/8a9088c272db96d8272a8ccf5031823b9524a390a422f527e97b39dc3920/feynman_path-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}