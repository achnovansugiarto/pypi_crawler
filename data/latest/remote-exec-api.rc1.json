{
  "info": {
    "author": "Evgeny Barbashov",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: MacOS X",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development"
    ],
    "description": "# Remote\n\n[![Code Quality](https://github.com/remote-cli/remote/workflows/Python%20Code%20Quality/badge.svg)](https://github.com/remote-cli/remote/actions?query=branch%3Amaster+workflow%3A%22Python+Code+Quality%22)\n[![pypi](https://img.shields.io/pypi/v/remote-exec-api.svg)](https://pypi.org/project/remote-exec-api)\n[![versions](https://img.shields.io/pypi/pyversions/remote-exec.svg)](https://github.com/remote-cli/remote)\n[![license](https://img.shields.io/github/license/remote-cli/remote.svg)](https://github.com/remote-cli/remote/blob/master/LICENSE)\n\nThe `remote` CLI lets you execute long or computation-heavy tasks (e.g., compilation, integration tests, etc.)\non a powerful remote host while you work on the source code locally.\nThis process is known as remote execution and can enable remote build capabilities, among other things.\n\nWhen you execute `remote <cmd>`, it will first sync your local workspace to the remote host you selected using `rsync`.\nIt will then execute the command `<cmd>` on this host using `ssh` and finally, bring all the created/modified files back to your local workspace.\n`remote` supports a host of configuration options to allow for complete customization of patterns for files and folders to include during the synchronization process in both directions.\n\n## System Requirements\n\nThe CLI supports **Linux** and **Mac OS X** operating systems\nwith **Python 3.6 or higher** installed. You can also use it on **Windows**\nif you have [WSL](https://docs.microsoft.com/en-us/windows/wsl/about) configured.\n\nThe remote host must also be running on **Linux** or **Mac OS X**. The local and remote hosts can be running different operating systems. The only requirement is that the remote host must be accessible using `ssh` from the local host.\n\n## Getting Started\n\n### Installing on Mac OS X\n\nIf you use Mac OS X, you can install `remote` using [Homebrew](https://brew.sh/)\nfrom our [custom tap](https://github.com/remote-cli/homebrew-remote):\n\n```bash\nbrew install remote-cli/remote/remote\n```\n\nThen, you will always be able to update it to the latest version:\n\n```bash\nbrew upgrade remote\n```\n\n### Installing on other systems\n\n`remote` doesn't support any package managers other than `brew` yet. However, it can be manually downloaded\nand installed. To do it, visit https://github.com/remote-cli/remote/releases and download the latest released `-shiv` archive, unpack it to some local directory (e.g., `~/.bin`) and add it to PATH:\n\n```bash\nmkdir -p ~/.bin\ntar -C ~/.bin -xzf ~/Downloads/remote-1.4.5-shiv.tgz\necho 'export PATH=$PATH:/home/username/.bin/remote/bin' >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\nDon't forget to replace the `/home/username` above with the actual path to your home directory.\n\n### Configuring the remote host\n\n`remote` CLI needs to be able to establish a passwordless SSH connection to the remote host.\nPlease run `ssh -o BatchMode=yes <your-host> echo OK` to confirm that everything is ready for you.\nIf this command fails, please go through [SSH guide](https://www.ssh.com/ssh/keygen/) to set up\nSSH keys locally and remotely.\n\n### First run\n\nAfter you are done with the configuration, switch the working directory to the root of your workspace in\nterminal and run `remote-init` to create a configuration file:\n\n```bash\ncd ~/path/to/workspace\nremote-init remote-host.example.com\n```\n\nThis will create a config file named `.remote.toml` in the workspace root\n(`~/path/to/workspace/.remote.toml`). This file controls the remote connection and synchronization options.\nYou can read more about this file in the Configuration section of this doc.\n\nAfter it, you can start using remote:\n\n```bash\n# This will sync workspace and run './gradlew build' remotely\nremote ./gradlew build\n\n# This will forcefully push all local files to the remote machine\nremote-push\n\n# This will bring in ./build directory from the remote machine to local even if\n# the CLI is configured to ignore it\nremote-pull build\n```\n\n## Distribution\n\n`remote`'s distribution comes with a set of executables:\n\n* `remote-init`: set up a local directory to point to a remote directory on a target host\n* `remote-ignore`: set up directories/files to ignore while pushing\n* `remote-push`: explicitly push local changes remote\n* `remote-pull`: pull a directory from remote to local\n* `remote`: execute a command remotely, after first syncing the local tree with the remote tree\n* `remote-explain`: explain your remote setup, explain what command actually will get run\n* `remote-quick`: execute a command remotely without syncing the trees\n* `remote-add`: add another remote host to the mirror list\n* `mremote`: execute a remote command on all the hosts, after first syncing the local tree with the remote trees\n\nYou can run each of these commands with `--help` flag to get a list of options and arguments they accept.\n\n## Configuration\n\nThree configuration files control the behavior of `remote`:\n\n* `~/.config/remote/defaults.toml` is a global config file. It sets options that affect all the workspaces\n  unless they are overwritten by `.remote.toml` file.\n* `.remote.toml` is a workspace config that is expected to be placed in the root of every workspace.\n  The `remote` CLI cannot execute any commands remotely until this file is present, or the global config\n  overwrites this with `allow_uninitiated_workspaces` option.\n* `.remoteignore.toml` is a workspace config that controls only sync exclude and include patterns\n  and has the highest priority. While the same settings can be specified in the `.remote.toml` file,\n  you can use this file to check in project-specific ignore settings in the VCS because it doesn't contain\n  host-specific information in it.\n\nBoth configs use [TOML](https://github.com/toml-lang/toml) format.\n\n**Workspace root** is a root directory of the project you're working on.\nIt is identified by the `.remote.toml` file. Each time you execute `remote` from workspace root or any of its\nsubdirectories, `remote` syncs everything under workspace root with the destination host before running the command.\n\n### Global Configuration File\n\nGlobal configuration file should be placed in `~/.config/remote/defaults.toml`. This config file is optional\nand the `remote` CLI will work with the default values if it is absent. This is the example of how it looks like:\n\n```toml\n[general]\nallow_uninitiated_workspaces = false\nuse_relative_remote_paths = false\nremote_root = \".remotes\"\n\n[[hosts]]\nhost = \"linux-host.example.com\"\nlabel = \"linux\"\n\n[[hosts]]\nhost = \"macos-host.example.com\"\nport = 2022\nsupports_gssapi_auth = false\ndefault = true\nlabel = \"mac\"\n\n[push]\nexclude = [\".git\"]\n\n[pull]\nexclude = [\"src/generated\"]\ninclude = [\"build/reports\"]\n\n[both]\ninclude_vcs_ignore_patterns = true\n```\n\n1. `[general]` block controls system-wide behavior for the `remote` CLI.\n\n   Reference:\n\n   * `allow_uninitiated_workspaces` (optional, defaults to `false`) - If this flag is set to `true` and\n     the global config contains at least one remote host, `remote` will treat its current working directory\n     as a workspace root even if it doesn't have `.remote.toml` file in it.\n\n     **Warning:** If this option is on and you run `remote` in the subdirectory of an already configured workspace,\n     `remote` will ignore workspaces configuration and treat subdirectory as a separate workspace root.\n\n   * `remote_root` (optional, defaults to `\".remotes\"`) - The default directory on the remote machine that\n     will be used to store synced workspaces. The path is expected to be relative to the remote user's home\n     directory, so `.remotes` will resolve in `/home/username/.remotes`.\n     If the workspace-level configuration sets the `directory` for a host, this setting will be ignored.\n\n   * `use_relative_remote_paths` (optional, defaults to `false`)\n     * If set to `false`, all the workspaces will be stored in the `remote_root` of the target host in a flat\n       structure. Each directory will have a name like `<workspace_name>_<workspace_path_hash>`.\n     * If set to `false`, the remote path will be placed in the `remote_root` tree like it was placed in the user's\n       home directory tree locally. Some examples:\n       * If the local path is `/home/username/projects/work/project_name`, the remote path will be\n         `/home/username/.remotes/projects/work/project_name`\n       * If the local path is `/tmp/project_name`, the remote path will be\n         `/home/username/.remotes/tmp/project_name`\n\n2. `[[hosts]]` block lists all the remote hosts available for the workspaces. Used when the workspace\n   configuration doesn't overwrite it.\n\n   You can provide multiple hosts in this block, but only one will be selected when you execute `remote`.\n   It would be either the host that is marked by `default = true` or the first one in the list if no\n   default was set explicitly.\n\n   You can run most of the commands with `--label label|number` or `-l label|number` option to run a\n   command on the non-default host. `label` here is the text label you put in the config file, `number` is\n   a number of required host in the hosts' list, starting from 1.\n\n   Reference:\n\n   * `host` - a hostname, IP address, or ssh alias of a remote machine that you want to use for remote execution.\n   * `port` (optional, defaults to `22`) - a port used by the ssh daemon on the host.\n   * `supports_gssapi_auth` (optional, defaults to `true`) - `true` if the remote host supports `gssapi-*` auth\n     methods. We recommend disabling it if the ssh connection to the host hangs for some time during establishing.\n   * `default` (optional, defaults to `false`) - `true` if this host should be used by default\n   * `label` (optional) - a text label that later can be used to identify the host when running the `remote` CLI.\n\n3. `[push]`, `[pull]`, and `[both]` blocks control what files are synced from local to a remote machine and back\n   before and after the execution. These blocks are used when the workspace configuration doesn't overwrite them.\n\n   `push` block controls the files that are uploaded from local machine to the remote one. `pull` block controls files that are downloaded from remote machine to local one. `both` block extends previous two.\n\n   Each one of these blocks supports the following options:\n\n   * `exclude` (optional, defaults to empty list) - a list of rsync-style patterns. Every file in the workspace\n     that matches these patterns won't be synced unless it is explicitly specified in `include`.\n   * `include` (optional, defaults to empty list) - a list of rsync-style patterns. Every file in the workspace\n     that matches these patterns will be synced even if it matches the `exclude`.\n   * `include_vcs_ignore_patterns` (optional, defaults to `false`) - if `true` and `.gitignore` is present,\n     all its patterns will be included in the `exclude` list.\n\n### Workspace Configuration File\n\nThis is the example of how standalone workspace-level `.remote.toml` configuration file looks like:\n\n```toml\n[[hosts]]\nhost = \"linux-host.example.com\"\ndirectory = \".remotes/workspace\"\nlabel = \"linux\"\nsupports_gssapi_auth = true\n\n[[hosts]]\nhost = \"macos-host.example.com\"\nport = 2022\ndirectory = \".remotes/other-workspace\"\nsupports_gssapi_auth = false\ndefault = true\nlabel = \"mac\"\n\n[push]\nexclude = [\".git\"]\n\n[pull]\nexclude = [\"src/generated\"]\ninclude = [\"build/reports\"]\n\n[both]\ninclude_vcs_ignore_patterns = true\n```\n\nAll the used blocks here are similar to the ones in the global config file. However, you cannot put\n`[general]` block in this file. Also, you can provide one more option in `[[hosts]]` block:\n\n* `directory` (optional) - a path relative to remote user's home. It will be used to store the workspace's\n  file on the remote machine.\n\nAlso, if you set at least one value for any of the blocks in the workspace-level config,\nall the values from this block in the global config will be ignored.\nThere is a way to change this behavior. You can use `[extends.*]` blocks to do it.\n\nHere is an example. Imagine, you have a following global config:\n\n```toml\n[[hosts]]\nhost = \"linux-host.example.com\"\nlabel = \"linux\"\ndefault = true\n\n[push]\nexclude = [\".git\"]\n\n[both]\ninclude_vcs_ignore_patterns = true\n```\n\nIf you want to be able to use the same Linux host in the workspace, but you want to add one more and modify some exclude patterns, you can create the following workspace config:\n\n```toml\n[[extends.hosts]]\nhost = \"mac-host.example.com\"\ndirectory = \".remotes/mac-workspace\"\nlabel = \"mac\"\ndefault = true\n\n[extends.push]\nexclude = [\"workspace-specific-dir\"]\ninclude = [\".git/hooks\"]\n\n[both]\ninclude_vcs_ignore_patterns = false\n```\n\nAs you can see, some block names start with `extends.`. This name tells remote to merge the\nworkspace and global settings.\n\nThere are a few things to note:\n\n* If both workspace-level and global configs define a default host, the workspace-level config wins\n* Hosts ordering is preserved, and globally configured hosts always go first.\n* If an option value is a list (e.g. `exclude`), it is extended. Otherwise, the value is overwritten.\n\n### Workspace Files Sync Configuration File\n\n`.remoteignore.toml` files is similar to `.remote.toml`, but only supports `push`, `pull`, `both`,\n`extends.push`, `extends.pull` and `extends.both` blocks. It also cannot be used to identify\nthe workspace root.\n\n### .remoteenv file\n\nSometimes you will need to do some action each time before you execute some remote command.\nA common example will be to execute `pytest` in the virtual environment: you need to activate it\nfirst, but the activation state won't be preserved between the `remote` runs.\n\nThere are two ways of solving this problem:\n\n1. Running both initiation logic and the command together:\n\n   ```bash\n   remote 'source env/bin/activate && pytest'\n   ```\n\n2. Creating a file called `.remoteenv` in the workspace root. If this file is present, `remote` will\n   always run `source .remoteenv` on the destination host before running the actual command. For example,\n   here is how you can run `remote`'s tests on the other hosts:\n\n   ```bash\n   git clone git@github.com:remote-cli/remote.git\n   cd remote\n   remote-init <remote-host-name>\n   remote python3 -m venv env\n   echo '. env/bin/activate' >> .remoteenv\n\n   # starting from this point, all python commands will be executed in virtualenv remotely\n   # This should print virtualenv's python path\n   remote which python\n   remote pip install -e .\n   remote pip install -r test_requirements.txt\n   remote pytest\n   ```\n\n   The `.remoteenv` file is guaranteed to sync to remote machine even if it is excluded by the workspace's\n   `.gitignore` file or other rules.\n\n## Development & Contribution\n\nTo bootstrap the development run:\n\n```bash\ngit clone git@github.com:remote-cli/remote.git\ncd remote\npython3 -m venv env\nsource env/bin/activate\npip install -e .\npip install -r test_requirements.txt\n```\n\nAfter it, you can open the code in any editor or IDE you like. If you prefer VSCode, the project contains the configuration file for it.\n\nBefore submitting your pull request, please check it by running:\n\n```bash\nflake8 src test && mypy -p remote && black --check -l 120 src test && isort --check-only src test && pytest\n```\n\nIf `black` or `isort` fails, you can fix it using the following command:\n\n```bash\nblack -l 120 src test && isort src test\n```\n\nDon't forget to add changed files to your commit after you do it.\n\n\nChangelog\n=========\n\n1.13.2\n------\n* Fix the shiv creation script\n\n1.13.1\n------\n* Move the pypi repo to remote-exec-api\n\n1.13.0\n------\n* Allow providing extra arguments for the SSH command\n\n1.12.0\n------\n* Allow providing paths for remote-push\n* Support spaces in paths and improve shell escaping\n\n1.11.0\n------\n* Change order of application of API-provided env and user-provided env\n\n1.10.1\n------\n* Enable tunelling in remote-quick\n\n1.10.0\n------\n* Allow providing multiple ports for tunneling\n\n1.9.1\n-----\n* fixed 1.9.0 release\n\n1.9.0\n-----\n* improve sync include/exclude API\n\n1.8.0\n-----\n* Introduce `.remoteignore.toml` file\n* Fix typo in `include_vcs_ignore_patterns` option name\n* Start using `shlex` to escape the shell command\n\n1.7.0\n-----\n* improve the internal port forwarding API\n\n1.6.1\n-----\n* add an API to set environment variables for the remote execution\n\n1.6.0\n-----\n* support source changes streaming with watchdog\n* add remote-explain CLI entry point\n* add --multi and --log flags to remote entry point\n* add --push and --pull flags to remote-ignore entyr point\n\n1.5.0\n-----\n* use TOML configs by default\n* new CLI option to select a host by label/index\n* new config option to provide custom port for SSH\n* .remoteenv usage fixes\n\n1.4.5\n-----\n* Select host by their label\n* Configure ssh connection options\n\n1.4.4\n-----\n* Add the host labeling in toml config files\n\n1.4.3\n-----\n* Fixed rsync bugs\n\n1.4.2\n-----\n* Add the possibility to start an ssh tunnel during the remote execution\n\n1.4.1\n-----\n* Fail ssh and rsync when password is requested by adding -o BatchMode=yes\n* add -K to rsync ssh command to make it homogenous with ssh\n* Support rsync's --include-from to make exclude overrides possible\n\n1.4.0\n-----\n* TOML config support\n* .gitignore files can be used as a source for sync ignore\n\n1.3.8\n-----\n* Unit tests\n* Releases with good versions\n\n1.3.7\n-----\n* Moving to pypi releases\n\n1.3.6\n-----\n* Fix reverse-sync breakage for remote-dirs without trailing /\n* Reverse-sync always, even when remote command fails\n\n1.3.5\n-----\n* Support for relative and absolute paths (including leading ~ and /) in remote directory\n* Support for global variables $RSHELL and $RSHELL_OPTS to configure remote shell invocation\n\n1.3.4\n-----\n* Support for choice of login shell and shell options for remote host in .remote file\n* Better initialization for mremote screen\n\n1.3.3\n-----\n* Fixing a bug in command execution for zsh based shells\n\n1.3.2\n-----\n* Fixing signal handling, cleanup of temp files\n* Fixing a bug in inferring verbose mode\n\n1.3.1\n-----\n* More comprehensive ignore rule specifications (push, pull, both) for .remoteignore files\n* Command-line argument improvements to remote, remote-push, remote-pull and remote-explain\n\n1.3.0\n-----\n* Adding command line flags for remote, remote-push\n* Dropping remote-push-dry since remote-push -n is an equivalent alternative.\n* Improving remote-explain output to include diff status\n\n1.2.7\n-----\n* remote-explain supports -c flag to test connection to the remote host\n\n1.2.6\n-----\n* Support for remote-explain, a tool to explain your remote setup\n\n1.2.5\n-----\n* Support for adding .remote related files to .gitignore\n\n1.2.4\n-----\n* More robust parameter parsing\n\n1.2.3\n-----\n* Support for initializing environment per remoted directory through .remoteenv file\n\n1.2.2\n-----\n* Fail fast when local directory is not setup for remote\n* Support kerberos auth (through ssh -K)\n\n1.2.1\n-----\n* New executables: remote-set, remote-host\n* mremote now uses screen\n\n1.2.0\n-----\n* Support for multiple-hosts\n* New executables: remote-add and mremote\n\n1.1.3\n-----\n* remote-pull: now pulls without syncing the trees\n* remote-quick: when you want to execute a command without syncing the trees\n\n1.1.2\n---\n* More fixes to md5 generation (verified to work on mac and linux)\n* Silent ssh connections for reduced verbosity\n\n1.1.1\n---\n* Robust in finding appropriate md5 utility\n\n1.1\n---\n* Added remote-pull\n* Moved remote-sync to remote-push\n\n1.0\n---\n* First drop\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/remote-cli/remote",
    "keywords": "",
    "license": "BSD-2-CLAUSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "remote-exec-api",
    "package_url": "https://pypi.org/project/remote-exec-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/remote-exec-api/",
    "project_urls": {
      "Homepage": "https://github.com/remote-cli/remote"
    },
    "release_url": "https://pypi.org/project/remote-exec-api/1.13.2/",
    "requires_dist": [
      "click (>=7.1.1)",
      "toml (>=0.10.0)",
      "pydantic (>=1.5.1)",
      "watchdog (>=0.10.3)",
      "dataclasses ; python_version <= \"3.6\""
    ],
    "requires_python": ">=3.6",
    "summary": "A CLI to sync codebases and execute commands remotely",
    "version": "1.13.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16793597,
  "releases": {
    "1.13.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90ca2b224c4c0b80f09db164f62023efa3887fed1d6df33078ad84db5014815c",
          "md5": "fbdb818fbe7fb2e90cfb52e4a7c7ee42",
          "sha256": "08a6ea99568fb6b3710b7acc8a03936a69efa0ca9255429d7bc60bf3c045c6b3"
        },
        "downloads": -1,
        "filename": "remote_exec_api-1.13.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbdb818fbe7fb2e90cfb52e4a7c7ee42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33088,
        "upload_time": "2023-02-10T17:19:12",
        "upload_time_iso_8601": "2023-02-10T17:19:12.497391Z",
        "url": "https://files.pythonhosted.org/packages/90/ca/2b224c4c0b80f09db164f62023efa3887fed1d6df33078ad84db5014815c/remote_exec_api-1.13.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6f7afba8806ca265fb3c0584c8758c007a16aaa45dc158db122e8584d6281c4",
          "md5": "e918d4d714e9d9286fd7f15580ed4173",
          "sha256": "9a5631434bf96945a1c34cc36e92441d7b179182d733253e16f9b1b552ca4d29"
        },
        "downloads": -1,
        "filename": "remote-exec-api-1.13.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e918d4d714e9d9286fd7f15580ed4173",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 45413,
        "upload_time": "2023-02-10T17:19:14",
        "upload_time_iso_8601": "2023-02-10T17:19:14.244996Z",
        "url": "https://files.pythonhosted.org/packages/f6/f7/afba8806ca265fb3c0584c8758c007a16aaa45dc158db122e8584d6281c4/remote-exec-api-1.13.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90ca2b224c4c0b80f09db164f62023efa3887fed1d6df33078ad84db5014815c",
        "md5": "fbdb818fbe7fb2e90cfb52e4a7c7ee42",
        "sha256": "08a6ea99568fb6b3710b7acc8a03936a69efa0ca9255429d7bc60bf3c045c6b3"
      },
      "downloads": -1,
      "filename": "remote_exec_api-1.13.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fbdb818fbe7fb2e90cfb52e4a7c7ee42",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 33088,
      "upload_time": "2023-02-10T17:19:12",
      "upload_time_iso_8601": "2023-02-10T17:19:12.497391Z",
      "url": "https://files.pythonhosted.org/packages/90/ca/2b224c4c0b80f09db164f62023efa3887fed1d6df33078ad84db5014815c/remote_exec_api-1.13.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6f7afba8806ca265fb3c0584c8758c007a16aaa45dc158db122e8584d6281c4",
        "md5": "e918d4d714e9d9286fd7f15580ed4173",
        "sha256": "9a5631434bf96945a1c34cc36e92441d7b179182d733253e16f9b1b552ca4d29"
      },
      "downloads": -1,
      "filename": "remote-exec-api-1.13.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e918d4d714e9d9286fd7f15580ed4173",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 45413,
      "upload_time": "2023-02-10T17:19:14",
      "upload_time_iso_8601": "2023-02-10T17:19:14.244996Z",
      "url": "https://files.pythonhosted.org/packages/f6/f7/afba8806ca265fb3c0584c8758c007a16aaa45dc158db122e8584d6281c4/remote-exec-api-1.13.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}