{
  "info": {
    "author": "Cybermaggedon",
    "author_email": "mark@cyberapocalypse.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyVera\n\n## Introduction\n\nPython library to allow communication with a MiCasaVerde Vera.  Operates in\nboth local and remote mode i.e. you can communicate directly with the Vera from\nyour home network, or interact with the Vera using your credentials on MCV's\nrelay servers if you are away from your home network.\n\nThe library provides Python API access, there are also some command-line\ntools, see below.\n\nNeeds to be running UI7 for remote mode, I believe.\n\nI'm using Linux, it may be possible use this stuff in Windows, perhaps.\n\n## Install\n\n```\npip3 install git+https://github.com/cybermaggedon/pyvera\n```\n\n## Examples: Writing code\n\n### Connect to Vera\n\n```\nimport vera\n\n# Local connection using IP address on local network.\nve = vera.VeraLocal(\"192.168.0.10\")\n\n# Remote connection - you need your username, password and device ID.\nve = vera.VeraRemote(\"username\", \"password\", \"1234123456\")\n```\n\n### Configure\n\nUsing a configuration file.  Create ```LUUP-AUTH.json```.  Example forms for\nlocal access:\n```\n{\n    \"local\": {\n         \"address\": \"192.168.0.10\"\n    }\n}\n````\nand for remote:\n```\n{\n  \"remote\": {\n    \"user\": \"USERNAME\",\n    \"password\": \"PASSWORD\",\n    \"device\": \"4321987654\"\n  }\n}\n```\nThen just..\n```\nve = vera.connect()\n```\n\n### Iterate over devices\n\n```\nfor i in ve.get_devices():\n    if i.room != None:\n        room = i.room.name\n    else:\n        room = \"n/a\"\n    print \"  %s: %s (%s)\" % (i.id, i.name, room)\n```\n\n### Interact with a single device\n\nFor switches:\n\n```\n# Get device by name\ndev = ve.get_device(\"Upstairs switch\")\n\n# Report status\nprint \"%s switch set to: %s\" % (dev.name, dev.get_switch())\n\n# Switch on\ndev.set_switch(True)\n```\n\nFor dimmers:\n\n```\n# Get device by name\ndev = ve.get_device(\"Lounge dimmer\")\n\n# Report status\nprint \"%s dimmer set to: %d\" % (dev.name, dev.get_dimmer())\n\n# Set dimmer\ndev.set_dimmer(75)\n```\n\nFor RGBW devices (like Aeotec ZW098):\n\n```\n# Get device by name\ndev = ve.get_device(\"Lamp1\")\n\n# Color returned is an RGB, Daylight or Warm object.\ncol = dev.get_color()\nprint(type(col), col)\n\n# Set color\ncol = vera.RGB(100, 50, 0)\n#col = vera.Daylight(50)\n#col = vera.Warm(150)\n\n# Set colour\ndev.set_color(col)\n```\n\nFor RGBController devices:\n\n```\n# Get device by name\ndev = ve.get_device(\"Conservatory RGB\")\n\n# Report status\nprint \"%s set to: %d\" % (dev.name, dev.get_rgb())\n\n# Set dimmer\ndev.set_rgb(vera.RGB(40, 50, 60))\n#dev.set_rgb(vera.Daylight(50))\n```\n\nThermostat example:\n```\n# Get the room\ndev = ve.get_room(\"Bathroom\")\n\n# Get device specifying room\ndev = ve.get_device(\"Bathroom stat\", room=room)\n\n# Report thermostat\nprint \"%s current temperature: %f\" % (dev.name, dev.get_temperature())\nprint \"%s is set to: %f\" % (dev.name, dev.get_setpoint())\n\n# Set thermostat to 7 degrees.  Assuming device is set to operate in Celsius.\ndev.set_setpoint(7.0)\n```\n\nA temperature/humidity sensor:\n```\ndev = ve.get_device(\"Sensor\")\nprint \"%s battery level: %d\" % (dev.name, dev.get_battery())\nprint \"%s temperature sensor: %f\" % (dev.name, dev.get_temperature())\nprint \"%s humidity sensor: %d\" % (dev.name, dev.get_humidity())\n```\n\n### Discover rooms\n\n```\nrooms = ve.get_rooms()\nfor i in rooms:\n    print \"  %s: %s\" % (i.id, i.name)\n```\n\n### Discover scenes\n\n```\nscenes = ve.get_scenes()\nfor i in scenes:\n    print \"  %s: %s\" % (i.id, i.name)\n```\n\n### Run scene\n\n```\n# Get room\nroom = ve.get_room(\"Heating\")\n\n# Iterate, find scene and execute it.\nscenes = ve.get_scenes()\nfor i in scenes:\n    if i.name == \"Hot water\":\n        i.run()\n```\n\n### Delete scenes\n\n```\n# Get room\nroom = ve.get_room(\"Heating\")\n\n# Iterate, find scenes in a room and delete them\nscenes = ve.get_scenes()\nfor i in scenes:\n    if i.room == room:\n        i.delete()\n```\n\n### Create a scene\n\n```\n# This is a complicated example, it doesn't have to be this complicated :)\n# Timer, on Mon, Weds, Thurs, 10:30.\nt1 = vera.DayOfWeekTimer(4, \"on\", \"1,3,4\", vera.Time(10, 30))\n\n# Every 12 minutes\nt2 = vera.IntervalTimer(5, \"switch on\", minutes=12)\n\n# 12:30 on 3/6/2016.\nt3 = vera.AbsoluteTimer(6, \"absolute time\", 2016, 6, 3, 12, 30)\n\n# 10:30 on 1st, 3rd, 4th and 21st of the month.\nt4 = vera.DayOfMonthTimer(1, \"some days\", \"1,3,4,21\", vera.Time(10, 30))\n\n# Scene only works in Home and Night modes.\nm = vera.Modes(home=True, night=True)\n\n# Get a device for a trigger\ndev1 = ve.get_device(\"Sensor\")\n\n# Room for the scene.\nr = ve.get_room(\"Heating\")\n\n# Create a trigger.  Template 1 for this device was a battery test.  Arguments\n# has number 12, so this would trigger when battery goes below 12%.\n# stop, start and days_of_week can optionally limit the time period when the\n# trigger is valid i.e. this is 10:30-11:30 on Mon, Fri, Sat.\ntr = vera.Trigger(id=41, name=\"trigger\", device=dev1, template=1, args=[12],\n                  start=vera.Time(10,30), stop=vera.Time(11, 30),\n                  days_of_week=\"1,5,6\")\n\n# Get a thermostat\ndev2 = ve.get_device(\"Attic stat\")\n\n# Get a switch\ndev3 = ve.get_device(\"Switch 4\")\n\n# Define a 'set point' action, which modifies thermostat setting.\nspa = vera.SetpointAction(dev2, 8.0)\n\n# Define a 'switch' action, operates a simple switch.\nsa = vera.SwitchAction(dev3, 1)\n\n# Create an action set of the two actions, which operates after a 10-second\n# delay.\nacts = vera.Group(10, [spa, sa])\n\n# Create scene definition, containing name, triggers, modes, timers, actions\n# and the room.\nsd = vera.SceneDefinition(\"My complicated scene\", [tr], m, [t1, t2, t3, t4],\n                          [acts], r)\n\n# Create the scene.\nve.create_scene(sd)\n```\n\n## Command-line utilites\n\nIt can be fiddly to manage a heating schedule for a large heating system\nthrough the web interface, so I've got some utilities that allow the schedule\nto be stored in a file, and pushed to the Vera.\n\n### Create a CSV file contain the schedule\n\nSee ```SCHEDULE.csv``` for a example format.\n\nFormat is:\n1. Scene name\n2. Device to manage.\n3. Type of action to take:\n--* ```heat``` to manage a heating controller.\n--* ```set``` to manage a thermostat.\n--* ```switch``` to operate a simple switch.\n4. Value to apply to the device:\n--* For ```heat``` use values ```HeatOn``` and ```Off```.\n--* For ```set``` using a floating point temperature value.\n--* For ```switch``` Use ```On``` and ```Off```.\n5. The rest of the fields are pairs of days in week, and times.\n   The days of week are a comma-separated list of digits representing\n   days 1=Monday etc.  Times are colon-separated 24-hour times.\n\ne.g.\n\n```\nGround floor on,Ground floor stat,set,11.0,\"1,2,3,4,5\",06:30,\"1,2,3,4,5\",17:30,\"6,7\",09:30\n```\n\n### Configure\n\nCreate a file e.g. ```AUTH.json```.  Example forms for local comms to Vera:\n```\n{\n    \"local\": {\n         \"address\": \"192.168.0.10\"\n    }\n}\n````\nand for remote:\n```\n{\n  \"remote\": {\n    \"user\": \"USERNAME\",\n    \"password\": \"PASSWORD\",\n    \"device\": \"4321987654\"\n  }\n}\n```\n\nAlso, using the web interface, make sure there's a room for the scenes to be\ncreated in.  When uploading, all scenes in the room get deleted, so you\nprobably want a separate room e.g. Heating.\n\n### Create scenes\n\nParameters to this utility are the configuration file, and the room name.  The\nschedule is read from the standard input.\n\n```\nvera-upload-scenes AUTH.json Heating < SCHEDULE.csv\n```\n\nIf all works, you should see a set of scenes appear in the web interface.\n\nThe `vera-upload-scenes` utility uses a restricted set of the\nscene features, so may get confused if you start creating your own\nscenes in the room.\n\nThe `vera-get-scenes` utility returns the scenes as a CSV file...\n\n```\nvera-get-scenes AUTH.json Heating\n```\n\nand the `vear-delete-scenes` utility deletes all scenes in a room...\n\n```\nvera-delete-scenes AUTH.json Heating\n```\n\n### Weather\n\nThe weather API is reverse-engineered, don't rely on this.\n\n```\nvera-get-weather AUTH.json\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/cybermaggedon/pyvera/archive/refs/tags/v1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cybermaggedon/pyvera",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-vera",
    "package_url": "https://pypi.org/project/python-vera/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-vera/",
    "project_urls": {
      "Download": "https://github.com/cybermaggedon/pyvera/archive/refs/tags/v1.1.tar.gz",
      "Homepage": "https://github.com/cybermaggedon/pyvera"
    },
    "release_url": "https://pypi.org/project/python-vera/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Python library to allow control of a Vera home automation hub",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10395116,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e537b9fa209b1935459becaa97939f7c08f4196247d6deef5e41e50422b8cb98",
          "md5": "0a54fdd16af2438e5bfedfdb37eded21",
          "sha256": "846966e01129e143f4cc8f3da4d5dd89e491f8d42a626b45d5b4a6ef24190e23"
        },
        "downloads": -1,
        "filename": "python-vera-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a54fdd16af2438e5bfedfdb37eded21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 18550,
        "upload_time": "2021-05-18T19:32:12",
        "upload_time_iso_8601": "2021-05-18T19:32:12.232245Z",
        "url": "https://files.pythonhosted.org/packages/e5/37/b9fa209b1935459becaa97939f7c08f4196247d6deef5e41e50422b8cb98/python-vera-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e537b9fa209b1935459becaa97939f7c08f4196247d6deef5e41e50422b8cb98",
        "md5": "0a54fdd16af2438e5bfedfdb37eded21",
        "sha256": "846966e01129e143f4cc8f3da4d5dd89e491f8d42a626b45d5b4a6ef24190e23"
      },
      "downloads": -1,
      "filename": "python-vera-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0a54fdd16af2438e5bfedfdb37eded21",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 18550,
      "upload_time": "2021-05-18T19:32:12",
      "upload_time_iso_8601": "2021-05-18T19:32:12.232245Z",
      "url": "https://files.pythonhosted.org/packages/e5/37/b9fa209b1935459becaa97939f7c08f4196247d6deef5e41e50422b8cb98/python-vera-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}