{
  "info": {
    "author": "Eimantas Jazonis, Robertas Sys, Emilija Lamanauskaite",
    "author_email": "eimant.jaz@gmail.com, robertas.sys@gmail.com, emilijalamanauskaite@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Logo](https://raw.githubusercontent.com/Eimisas/sinbadflow/master/img/logo.png)\n# Simple pipeline creation and execution tool\n\n![Tests](https://github.com/Eimisas/Sinbadflow/workflows/Tests/badge.svg)\n\nSinbadflow is a simple pipeline creation and execution tool. It was created having Databricks notebooks workflow in mind, however with flexible implementation options the tool can be customized to fit any task. Named after famous cartoon \"Sinbad: Legend of the Seven Seas\" the library provides ability to create and run agents with specific triggers and conditional functions in parallel or single mode. With the simple, yet intuitive, code based syntax we can create elaborative pipelines to help with any data engineering, data science or software development task.\n\n## Installation\n\nTo install use:\n\n```pip install sinbadflow```\n\n## Usage\n\nSinbadflow supports single or parallel run with different execution triggers. To build a pipeline use ```>>``` symbol between two agents. Example Databricks notebooks pipeline (one-by-one execution):\n\n```python\nfrom sinbadflow.agents.databricks import DatabricksAgent as dbr\nfrom sinbadflow import Trigger\n\npipeline = dbr('/path/to/notebook1') >> dbr('path/to/another/notebook')\n```\nParallel run pipeline (agents in list are executed in parallel mode):\n\n```python\npipeline = [dbr('/parallel_run_notebook'), dbr('/another_parallel_notebook')]\n```\n\nThe flow can be controlled by using triggers. Sinbadflow supports these triggers:\n\n* ```Trigger.DEFAULT``` - default trigger, the agent is always executed.\n* ```Trigger.OK_PREV``` - agent will be executed if previous agent finished successfully.\n* ```Trigger.OK_ALL``` - agent will be executed if so far no fails are recorded in the pipeline.\n* ```Trigger.FAIL_PREV``` - agent will be executed if previous agent run failed.\n* ```Trigger.FAIL_ALL``` - agent will be executed if all previous runs failed.\n\nAn example workflow would look like this:\n\n```python\nexecution = dbr('/execute')\nparallel_handles = [dbr('/handle_ok', Trigger.OK_PREV), dbr('/handle_fail', Trigger.FAIL_PREV)]\nsave = dbr('/save_all', Trigger.OK_ALL)\nfail_handling = dbr('/log_all_failed', Trigger.FAIL_ALL)\n\n\npipeline = execution >> parallel_handles >> save >> fail_handling\n```\nTo run the pipeline:\n\n```python\nfrom sinbadflow import Sinbadflow\n\nsf = Sinbadflow()\n\nsf.run(pipeline)\n```\nThe pipeline will be executed and results will be logged with selected method (```print/logging``` supported). Sinbadflow will always run the full pipeline, there is no implementation for early stoppage if the pipeline fails.\n\n## Conditional functions\n\nFor more flexible workflow control Sinbadflow also supports conditional functions check. This serves as more elaborative triggers for the agents. \n\n```python\nfrom sinbadflow.agents.databricks import DatabricksAgent as dbr\nfrom datetime import date\n\ndef is_monday():\n    return date.today().weekday() == 0\n\nnotebook1 = dbr('/notebook1', conditional_func=is_monday)\nnotebook2 = dbr('/notebook2', conditional_func=is_monday)\n\npipeline = notebook1 >> notebook2\n```\nIn the example above notebooks will be skipped if today is not Monday because of `conditional_fuc` function. Sinbadflow also provides ability to apply conditional function to the whole pipeline using `apply_conditional_func` method.\n\n```python\nfrom sinbadflow.utils import apply_conditional_func\n\npipeline = dbr('/notebook1') >> dbr('/notebook2') >> dbr('/notebook3')\n\npipeline = apply_conditional_func(pipeline, is_monday)\n```\n\n## Custom Agents\n\nSinbadflow provides ability to create your own agents. In order to do that, your agent must inherit from ```BaseAgent``` class, pass the ```data``` and `trigger` parameters to parent class (also `**kwargs` if you are planning to use conditional functions) and implement ```run()``` method. An example ```DummyAgent```:\n\n```python\nfrom sinbadflow.agents import BaseAgent\nfrom sinbadflow import Trigger\nfrom sinbadflow import Sinbadflow\n\n\nclass DummyAgent(BaseAgent):\n    def __init__(self, data=None, trigger=Trigger.DEFAULT, **kwargs):\n        super(DummyAgent, self).__init__(data, trigger, **kwargs)\n\n    def run(self):\n        print(f'        Running my DummyAgent with data: {self.data}')\n\ndef condition():\n    return False\n\nsecret_data = DummyAgent('secret_data')\n\nparallel_data = [DummyAgent('simple_data', conditional_func=condition),\n                 DummyAgent('important_data', Trigger.OK_ALL)]\n\npipeline =  secret_data >> parallel_data\n\nsf = Sinbadflow()\nsf.run(pipeline)\n\n```\n\n## DatabricksAgent - cluster modes\n\nOut of the box Sinbadflow comes with `DatabricksAgent` which can be used to run Databricks notebooks on interactive or job clusters. `DatabricksAgent` init arguments:\n\n```python\nnotebook_path                                    #Notebook location in the workspace\ntrigger = Trigger.DEFAULT                        #Trigger\ntimeout=1800                                     #Notebook run timeout\nargs={}                                          #Notebook arguments\ncluster_mode='interactive'                       #Cluster mode (interactive/job)\njob_args={)                                      #Job cluster parameters  \nconditional_func=default_func()                  #Conditional function\n```\nDefault `job_args` parameters for job cluster creation (more information about job_args <a href='https://docs.databricks.com/dev-tools/api/latest/jobs.html'>see here</a>):\n\n```python\n{\n    'spark_version': '6.4.x-scala2.11',\n    'node_type_id': 'Standard_DS3_v2',\n    'driver_node_type_id': 'Standard_DS3_v2',\n    'num_workers': 1\n}    \n```\n\nBy default the notebook will be executed on interactive cluster using `dbutils` library. To run notebook on separate job cluster use the following code:\n\n```python\nfrom sinbadflow.agents.databricks import DatabricksAgent as dbr, JobSubmitter\nfrom sinbadflow.executor import Sinbadflow\n\n#set new job_args\nnew_job_args = {\n    'num_workers':10,\n    'driver_node_type_id': 'Standard_DS3_v2'\n    }\n\njob_notebook = dbr('notebook1', job_args=new_job_args, cluster_mode='job')\ninteractive_notebook = dbr('notebook2')\n\npipeline = job_notebook >> interactive_notebook\n\n##Access token is used for job cluster creation and notebook submission\nJobSubmitter.set_access_token('<DATABRICKS ACCESS TOKEN>')\n\nsf = Sinbadflow()\nsf.run(pipeline)\n```\n\nAs shown in the example above you can mix and match agent runs on interactive/job clusters to achieve the optimal solution.\n\n## Additional help\nFull API docs can be found <a href='https://eimisas.github.io/sinbadflow_api_docs/index.html' target='_blank'>here</a>.\n\nUse built in ```help()``` method for additional information about the classes and methods. \n\nDo not hesitate to contact me with any question. Pull requests are encouraged!\n\n## Contributors\n\nSpecial thank you for everyone who contributed to the project:\n\n[Robertas Sys](https://github.com/rob-sys), [Emilija Lamanauskaite](https://github.com/emilijalamanauskaite)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Eimisas/sinbadflow",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sinbadflow",
    "package_url": "https://pypi.org/project/sinbadflow/",
    "platform": "",
    "project_url": "https://pypi.org/project/sinbadflow/",
    "project_urls": {
      "Homepage": "https://github.com/Eimisas/sinbadflow"
    },
    "release_url": "https://pypi.org/project/sinbadflow/0.7/",
    "requires_dist": [
      "mock (>=2)",
      "setuptools (>=40.8)",
      "forbiddenfruit (>=0.1.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "A simple pipeline creation and execution tool",
    "version": "0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7496923,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48f1a7bff061a5c8fcfd038cd79d909e4a0aef6ab5fb3a2e77de6ad96a6119fb",
          "md5": "a1947e89ae34f005bb7451faba285903",
          "sha256": "1c1a1cbe86c05eac74e3a89e0011e1c8922814fdbb2ae102d5ab151632b47eca"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1947e89ae34f005bb7451faba285903",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13627,
        "upload_time": "2020-06-14T12:37:05",
        "upload_time_iso_8601": "2020-06-14T12:37:05.491776Z",
        "url": "https://files.pythonhosted.org/packages/48/f1/a7bff061a5c8fcfd038cd79d909e4a0aef6ab5fb3a2e77de6ad96a6119fb/sinbadflow-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbc4d274b68c9f4e2c1206caeb50faf3fe3b9f5d925c2a3a636ff942b8a61a90",
          "md5": "2202b019d8bdcb138edd00d711478464",
          "sha256": "4a0d3723a8f46189032fb6ee0f02ec2b677c2b9777d1fb645acba211c76d963c"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2202b019d8bdcb138edd00d711478464",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12363,
        "upload_time": "2020-06-14T12:37:07",
        "upload_time_iso_8601": "2020-06-14T12:37:07.902489Z",
        "url": "https://files.pythonhosted.org/packages/fb/c4/d274b68c9f4e2c1206caeb50faf3fe3b9f5d925c2a3a636ff942b8a61a90/sinbadflow-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b4b5483a6101d2ba0d34828e25e06f9a239b2846051414bb94a02c5d9636282",
          "md5": "595c84376ba4ab8570dbab87d9627993",
          "sha256": "98f758291a60a8769b1686f13f4c919d5bce02baa3c813c6668ea35c134cfa24"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "595c84376ba4ab8570dbab87d9627993",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13574,
        "upload_time": "2020-06-14T13:50:09",
        "upload_time_iso_8601": "2020-06-14T13:50:09.301411Z",
        "url": "https://files.pythonhosted.org/packages/7b/4b/5483a6101d2ba0d34828e25e06f9a239b2846051414bb94a02c5d9636282/sinbadflow-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b38fbb2e3484415d6eb0616d7566da1019991c611cd44d208aad500a7331926",
          "md5": "faee1a79af7876a4521787e9fbe9d20b",
          "sha256": "4104d4444ef0e4c8db283b4acf8360b921a5feb0d4622e6c92d1f9f2a1c28c6f"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "faee1a79af7876a4521787e9fbe9d20b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12129,
        "upload_time": "2020-06-14T13:50:10",
        "upload_time_iso_8601": "2020-06-14T13:50:10.828056Z",
        "url": "https://files.pythonhosted.org/packages/8b/38/fbb2e3484415d6eb0616d7566da1019991c611cd44d208aad500a7331926/sinbadflow-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1591e61fac14e5bf6d81bc484d41367772973ee5a8a128d88cf070eec337d9d",
          "md5": "732b3523b234596ec6fe65e228f8008a",
          "sha256": "8328b4a9821ab45972c8c59c57a50070503705850e9246c1d251554c050ee794"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "732b3523b234596ec6fe65e228f8008a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14161,
        "upload_time": "2020-06-14T14:54:08",
        "upload_time_iso_8601": "2020-06-14T14:54:08.266786Z",
        "url": "https://files.pythonhosted.org/packages/c1/59/1e61fac14e5bf6d81bc484d41367772973ee5a8a128d88cf070eec337d9d/sinbadflow-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3950bbfea8ba1c48c6eb269108cb57cfc86922e9152813aefadd15f4851302f",
          "md5": "c86888a535e2a33407fe617fa43816dc",
          "sha256": "29161024d9b66cea4e394b66de7cf4d77f1c011cf2dfec3c027074f12455f301"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c86888a535e2a33407fe617fa43816dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12550,
        "upload_time": "2020-06-14T14:54:09",
        "upload_time_iso_8601": "2020-06-14T14:54:09.674075Z",
        "url": "https://files.pythonhosted.org/packages/d3/95/0bbfea8ba1c48c6eb269108cb57cfc86922e9152813aefadd15f4851302f/sinbadflow-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc923ec58321aad8a4d389c1ac9062838b3f68161e47c41540672cc26a75cdff",
          "md5": "ab89d719b7b2729fbc0ef5c949beb7ec",
          "sha256": "da6e458162589d5fa3b6173c112ed793006190f01ea983fa8ea1f974b324be3c"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab89d719b7b2729fbc0ef5c949beb7ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14720,
        "upload_time": "2020-06-14T15:40:09",
        "upload_time_iso_8601": "2020-06-14T15:40:09.002948Z",
        "url": "https://files.pythonhosted.org/packages/cc/92/3ec58321aad8a4d389c1ac9062838b3f68161e47c41540672cc26a75cdff/sinbadflow-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ba782fa3488127606a16283217cb1a477d3c6ef8e5fcd937abd73c3ff2f0bfa",
          "md5": "f96ce4e00acb2830c559177c4b819f40",
          "sha256": "b2ba5c0a9b5a59bf5275a81ff6365818e584f9c16ca9bb6c12d70852d1e20016"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f96ce4e00acb2830c559177c4b819f40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13025,
        "upload_time": "2020-06-14T15:40:10",
        "upload_time_iso_8601": "2020-06-14T15:40:10.293295Z",
        "url": "https://files.pythonhosted.org/packages/1b/a7/82fa3488127606a16283217cb1a477d3c6ef8e5fcd937abd73c3ff2f0bfa/sinbadflow-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abc580c23aa71bee6ac431fc642f7a5aa0555e51ca019bef1cdb88020694ad06",
          "md5": "88c5a207bffbd3b0b912f5eca1387dad",
          "sha256": "19516831b15ee3bb88c6985f7f82fa570f8aef0bd585d8645b79cbdb50221ab1"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88c5a207bffbd3b0b912f5eca1387dad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14956,
        "upload_time": "2020-06-15T16:17:52",
        "upload_time_iso_8601": "2020-06-15T16:17:52.102150Z",
        "url": "https://files.pythonhosted.org/packages/ab/c5/80c23aa71bee6ac431fc642f7a5aa0555e51ca019bef1cdb88020694ad06/sinbadflow-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "233f151934099bc84f93612954e97cff3d72cf79eb595703bb9f3043c3a57afe",
          "md5": "fce83629dd761003448de3f6ae361ba5",
          "sha256": "405233908586f2c5c2841ccc3b2161539c1600ef77f904e5efce95f049bdeb26"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fce83629dd761003448de3f6ae361ba5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13190,
        "upload_time": "2020-06-15T16:17:53",
        "upload_time_iso_8601": "2020-06-15T16:17:53.490851Z",
        "url": "https://files.pythonhosted.org/packages/23/3f/151934099bc84f93612954e97cff3d72cf79eb595703bb9f3043c3a57afe/sinbadflow-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdce097f6164c7597ff1e0b714af42bfa88276e432732a8f1c3acfc791c0b373",
          "md5": "60e1fc3d8dc3391721b30ab00a529125",
          "sha256": "fbcd2b9f11057fea71546c07cf219cb69a286a9b034789e15df8d71d7e0f325b"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60e1fc3d8dc3391721b30ab00a529125",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14982,
        "upload_time": "2020-06-16T18:12:41",
        "upload_time_iso_8601": "2020-06-16T18:12:41.238251Z",
        "url": "https://files.pythonhosted.org/packages/fd/ce/097f6164c7597ff1e0b714af42bfa88276e432732a8f1c3acfc791c0b373/sinbadflow-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f93e2ccc38638b792ed59d3d470be41ff444af5a08ccc7bcf6932eeda8ac214",
          "md5": "4ee112115232a66e71f7b2a173847776",
          "sha256": "e07b9429be4b8a2a35f70ba258280f1f562e0c3766c5b271ecbb6b83915b753d"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4ee112115232a66e71f7b2a173847776",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13271,
        "upload_time": "2020-06-16T18:12:42",
        "upload_time_iso_8601": "2020-06-16T18:12:42.851254Z",
        "url": "https://files.pythonhosted.org/packages/1f/93/e2ccc38638b792ed59d3d470be41ff444af5a08ccc7bcf6932eeda8ac214/sinbadflow-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd648fd414dc251f593818aa7e373ab973a4b5f220fe78df92c459354cd25265",
          "md5": "f1c1f54f1b1223adee836535a8c77a66",
          "sha256": "19fba27bec96e9633e539b421da0047d47dbb0dbd38dc61c098b24e98a960b7f"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1c1f54f1b1223adee836535a8c77a66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15576,
        "upload_time": "2020-06-17T13:15:31",
        "upload_time_iso_8601": "2020-06-17T13:15:31.038447Z",
        "url": "https://files.pythonhosted.org/packages/bd/64/8fd414dc251f593818aa7e373ab973a4b5f220fe78df92c459354cd25265/sinbadflow-0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d890d40dd2781ddd8234472b92504b74aca3f23ea4f44d16582068ca15b37eaa",
          "md5": "51c11738dc0a5bf8da47d92fa377b428",
          "sha256": "469bee37b33e73bf3e1221b10c059066247f148acf0912839b4aca7c440aa88d"
        },
        "downloads": -1,
        "filename": "sinbadflow-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "51c11738dc0a5bf8da47d92fa377b428",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13528,
        "upload_time": "2020-06-17T13:15:32",
        "upload_time_iso_8601": "2020-06-17T13:15:32.725408Z",
        "url": "https://files.pythonhosted.org/packages/d8/90/d40dd2781ddd8234472b92504b74aca3f23ea4f44d16582068ca15b37eaa/sinbadflow-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd648fd414dc251f593818aa7e373ab973a4b5f220fe78df92c459354cd25265",
        "md5": "f1c1f54f1b1223adee836535a8c77a66",
        "sha256": "19fba27bec96e9633e539b421da0047d47dbb0dbd38dc61c098b24e98a960b7f"
      },
      "downloads": -1,
      "filename": "sinbadflow-0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1c1f54f1b1223adee836535a8c77a66",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15576,
      "upload_time": "2020-06-17T13:15:31",
      "upload_time_iso_8601": "2020-06-17T13:15:31.038447Z",
      "url": "https://files.pythonhosted.org/packages/bd/64/8fd414dc251f593818aa7e373ab973a4b5f220fe78df92c459354cd25265/sinbadflow-0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d890d40dd2781ddd8234472b92504b74aca3f23ea4f44d16582068ca15b37eaa",
        "md5": "51c11738dc0a5bf8da47d92fa377b428",
        "sha256": "469bee37b33e73bf3e1221b10c059066247f148acf0912839b4aca7c440aa88d"
      },
      "downloads": -1,
      "filename": "sinbadflow-0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "51c11738dc0a5bf8da47d92fa377b428",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13528,
      "upload_time": "2020-06-17T13:15:32",
      "upload_time_iso_8601": "2020-06-17T13:15:32.725408Z",
      "url": "https://files.pythonhosted.org/packages/d8/90/d40dd2781ddd8234472b92504b74aca3f23ea4f44d16582068ca15b37eaa/sinbadflow-0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}