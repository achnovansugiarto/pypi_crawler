{
  "info": {
    "author": "Thomas Fletcher",
    "author_email": "T-Fletcher@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Graph-State-Machine\n===================\n\n.. image:: https://img.shields.io/pypi/v/Graph-State-Machine.svg\n    :target: https://pypi.python.org/pypi/Graph-State-Machine/\n    :alt: Latest PyPI version\n\n.. image:: https://pepy.tech/badge/Graph-State-Machine\n    :target: https://pepy.tech/project/Graph-State-Machine\n    :alt: Package Downloads\n\n.. image:: https://img.shields.io/pypi/pyversions/Graph-State-Machine.svg\n    :target: https://pypi.python.org/pypi/Graph-State-Machine/\n    :alt: Python Versions\n\n.. image:: https://github.com/T-Flet/Graph-State-Machine/workflows/Python%20package/badge.svg\n    :target: https://github.com/T-Flet/Graph-State-Machine/actions?query=workflow%3A%22Python+package%22\n    :alt: Build\n\n.. image:: https://img.shields.io/pypi/l/Graph-State-Machine.svg\n    :target: https://github.com/T-Flet/Graph-State-Machine/blob/master/LICENSE\n    :alt: License\n\nA simple library to build easily interpretable computational constructs similar to Turing machines\nover graphs, where states are combinations of a graph's (typed) nodes;\nan example use would be a transparent backend logic which navigates an ontology\n\n\nInstallation\n------------\n\n::\n\n    pip install Graph_State_Machine\n\n\n\nDescription\n-----------\n\nThis package implements a computational construct similar to a Turing machine over a graph,\nwhere states are node combinations (though more information may be stored) and where the arbitrary\ntransition function can update both state and graph.\nNote that this last arbitrariness makes the system Turing complete since it allows implementing\na Turing machine with it (achieved by defining the graph to be a linear array and the state as a tuple\nof node name and \"head\" state).\n\nGiven a graph with typed nodes and a state object from which a list of nodes can be extracted\n(by an optional ``Selector`` function), the construct applies two arbitrary functions to perform a step:\n\n``Scanner``\n  A generalised neighbourhood function, which scans the graph \"around\" the state nodes and returns a scored\n  list of nodes for further processing; additional and optional arguments can be included, e.g. to filter by type\n``Step``\n  A function to process the scan result and thus update the state and possibly the graph itself\n\nThis computational construct is different from a finite state machine on a graph and from a\ngraph cellular automaton, but it shares some similarities with both in that it generalises some of\ntheir features for the benefit of human ease of design and readability.\nFor example, a ``GSM``’s graph\ngeneralises a finite state machine’s state graph by allowing the combinations of nodes to represent\nstate, and the scanner function is just a generalisation of a graph cellular automaton’s neighbourhood\nfunction in both domain and codomain.\nAs previously mentioned, it is closer to a Turing machine on\na graph than either of the above, one whose programming is split between the internal state rules\nand the graph topology, thus allowing programs to be simpler and with a more easily readable state.\n\nBesides pure academic exploration of the construct, some possible uses of it are:\n\n- implementing backend logics which are best represented by graphs, e.g. an \"expert system\"\n- pathing through ontologies by entity proximity or similarity\n\n\n\nDesign\n------\n\n(Inspecting the package __init__.py imports is a quick and useful exercise in understanding the overall structure, while the following is a less concise version of the content of types.py)\n\nFormalising the above description using library terminology, the constructor of the main class\n(``GSM``) takes the following arguments:\n\n``Graph``\n  A graph object with typed nodes (wrapping a NetworkX graph),\n  with utility methods so that it can be built from shorthand\n  notation (structured edge lists), check its own consistency, self-display and extend itself by\n  joining up with another with common nodes (exact ontology matching)\n``State``\n  The initial state; the default type is a simple list of nodes (strings), but it can be anything as\n  long as the used ``Scanner`` function is designed to handle it and a function to extract a list of\n  strings from it is provided as the Selector argument\n``Scanner`` (``Graph -> List[Node] -> ... -> List[Tuple[Node, Any]]``)\n  A function taking in a list of state nodes to use to determine next-step candidates;\n  arbitrary additional arguments, optional or required, may be present after Graph and List[Node],\n  for example focussing the scan on specific node types;\n  these extra arguments can be passed through the step methods either named (dictionary) or unnamed (list)\n``Updater`` (``State -> Graph -> ScanResult -> Tuple[State, Graph]``)\n  A function taking in the current\n  state and graph along with the result of a node scan and returns the updated state and graph\n``Selector`` (``State -> List[Node]``)\n  A function to extract from the state the list of nodes which should\n  be fed to the Scanner\n\nA simple example of node-list state with non-identity Selector is a ``GSM`` which only takes the last\n\"visited\" node into account, and going one step further, an intuitive example of ``State`` which is not\na simple node-list is a dictionary of node-lists only some subsets of which are considered for graph\nexploration (and others for state updating), e.g. keeping track of which nodes were initial state and\nwhich ones were added by steps.\n\nSimple default constructor functions for this ``State`` type are provided:\n``dict_fields_getter`` (for ``selector``), which takes in the list of fields to concatenate, and ``list_in_dict_accumulator`` (for ``Updater``), which takes in the single field to update.\n\nNote: since the underlying object is a NetworkX graph, arbitrary node and edge attributes can be used to enhance the processing functions.\n\n\n\nSimple Example\n--------------\n\nA GSM which determines the appropriate R linear regression function and distribution family from labelled data features:\n\n- Define a numerical data-type ontology graph in the typed edge-list shorthand which ``Graph`` accepts along with ready-made Networkx graphs, making use of two simple notation helper functions\n- Create a default-settings ``GSM`` with it and a simple starting state\n- Ask it to perform steps focussing on the node types of 'Distribution', 'Methodology Function' and 'Family Implementation', which in this context just means finding the most appropriate of each\n\n.. figure:: graph.png\n    :align: center\n    :figclass: align-center\n\n    Default plot: gsm.plot()\n\n.. code-block:: Python\n\n    from Graph_State_Machine import *\n\n    _shorthand_graph = {\n        'Distribution': {\n            'Normal': ['stan_glm', 'glm', 'gaussian'],\n            'Binomial': ['stan_glm', 'glm', 'binomial'],\n            'Multinomial': ['stan_polr', 'polr_tolerant', 'multinom'],\n            'Poisson': ['stan_glm', 'glm', 'poisson'],\n            'Beta': ['stan_betareg', 'betareg'],\n            'gamma': ['stan_glm', 'glm', 'Gamma'],\n            'Inverse Gaussian': ['stan_glm', 'glm', 'inverse.gaussian']\n        },\n        'Family Implementation': strs_as_keys(['binomial', 'poisson', 'Gamma', 'gaussian', 'inverse.gaussian']),\n        'Methodology Function': strs_as_keys(['glm', 'betareg', 'polr_tolerant', 'multinom', 'stan_glm', 'stan_betareg', 'stan_polr']),\n        'Data Feature': adjacencies_lossy_reverse({ # Reverse-direction definition here since more readable i.e. defining the contents of the lists\n            'Binomial': ['Binary', 'Integer', '[0,1]', 'Boolean'],\n            'Poisson': ['Non-Negative', 'Integer', 'Consecutive', 'Counts-Like'],\n            'Multinomial': ['Factor', 'Consecutive', 'Non-Negative', 'Integer'],\n            'Normal': ['Integer', 'Real', '+ and -'],\n            'Beta': ['Real', '[0,1]'],\n            'gamma': ['Non-Negative', 'Integer', 'Real', 'Non-Zero'],\n            'Inverse Gaussian': ['Non-Negative', 'Integer', 'Real', 'Non-Zero'],\n            'polr_tolerant': ['Consecutive']\n        })\n    }\n\n    gsm = GSM(Graph(_shorthand_graph), ['Non-Negative', 'Non-Zero', 'Integer']) # Default function-arguments\n\n    gsm.plot()\n    # gsm.plot(layout = nx.shell_layout, radial_labels = True)\n    # gsm.plot(plotly = False)\n\n    gsm.consecutive_steps(dict(node_types = ['Distribution']), dict(node_types = ['Family Implementation']))\n        # Perform 2 steps, giving one optional argument (incidentally, the first one) for each step,\n        # i.e. the (singleton) list of types to focus on\n\n    # gsm.consecutive_steps([['Distribution']], [['Family Implementation']]) # Unnamed-arguments version of the above\n    # gsm.parallel_steps([['Distribution']], [['Family Implementation']]) # Parallel version, warning of failure for 'Family Implementation'\n    print(gsm.log[-2], '\\n') # Can check the log for details of the second-last step, where a tie occurs.\n                             # Ties are rare, and the default Updater only picks one result, but arbitrary action may be taken\n\n    print(gsm._scan(['Methodology Function']), '\\n') # Can also peek ahead at the intermediate value of a possible next step\n    gsm.step(['Methodology Function']) # Perform the step\n\n    gsm.step(['NON EXISTING TYPE']) # Trigger a warning and no State changes\n    print(gsm.log[-1], '\\n') # The failed step is also logged\n\n    print(gsm)\n\n\nThe 'Methodology Function' scan above is peeked at before its step to show that there is a tie between a Frequentist and a Bayesian method.\nThis is a trivial example (in that the simple addition could have been there from the beginning) of where a broader graph could be attached by ``gsm.extend_with(...)`` and new state introduced in order to resolve the tie.\n\nNote that ties need not really be resolved as long as the ``Updater`` function's behaviour is what the user expects since it is not limited in functionality; it could select a random option, all, some or none of them, it could adjust the graph itself or terminate execution.\n\n\nPlotting\n--------\n\nThe default plot layout and backend are Kamada-Kawai and Plotly (as in the image above),\nbut arbitrary layouts can be provided, and the NetworkX-generated pyplot plotting is also available.\nHere are some alternative plotting possibilities:\n\n.. figure:: shell_radial_graph.png\n    :align: center\n    :figclass: align-center\n\n    Shell plot with radial labels: gsm.plot(layout = nx.shell_layout, radial_labels = True)\n\n.. figure:: shell_graph.png\n    :align: center\n    :figclass: align-center\n\n    Shell plot with default labels: gsm.plot(layout = nx.shell_layout)\n\n\n.. figure:: no_plotly_graph.png\n    :align: center\n    :figclass: align-center\n\n    NetworkX-generated pyplot plot: gsm.plot(plotly = False)\n\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/T-Flet/Graph-State-Machine",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Graph-State-Machine",
    "package_url": "https://pypi.org/project/Graph-State-Machine/",
    "platform": null,
    "project_url": "https://pypi.org/project/Graph-State-Machine/",
    "project_urls": {
      "Homepage": "https://github.com/T-Flet/Graph-State-Machine"
    },
    "release_url": "https://pypi.org/project/Graph-State-Machine/2.1/",
    "requires_dist": [
      "networkx (>=2.5)",
      "pandas (>=1.1.1)",
      "matplotlib (>=3.3.2)",
      "plotly (>=5.1.0)"
    ],
    "requires_python": "",
    "summary": "A simple library to build easily interpretable computational constructs similar to a Turing machine over a graph, where states are combinations of a graph's (typed) nodes; an example use would be a transparent backend logic which navigates an ontology",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13681580,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a9fa6c053fa0d40463ff186b667365c8f1cfce2f8bb6bc2f1a65bcba9ed3cba",
          "md5": "9790f406cbf16db07bd31a4df3454603",
          "sha256": "032444f9d2f5ece237cc5fd1ad4a097f14d8a30fb7e745723922d1e5eb1c7cf7"
        },
        "downloads": -1,
        "filename": "Graph_State_Machine-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9790f406cbf16db07bd31a4df3454603",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18268,
        "upload_time": "2021-02-08T18:06:40",
        "upload_time_iso_8601": "2021-02-08T18:06:40.335190Z",
        "url": "https://files.pythonhosted.org/packages/7a/9f/a6c053fa0d40463ff186b667365c8f1cfce2f8bb6bc2f1a65bcba9ed3cba/Graph_State_Machine-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a2f6a71ce0fbd77c2aadea9672e328f391d805594b41d92a40401beac5e35e0",
          "md5": "cd9251717af442b782630f11bba09162",
          "sha256": "873916288bbddc577c4784147f05d265e9b6c62eebc749015144c0f43b388c87"
        },
        "downloads": -1,
        "filename": "Graph-State-Machine-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd9251717af442b782630f11bba09162",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12994,
        "upload_time": "2021-02-08T18:06:41",
        "upload_time_iso_8601": "2021-02-08T18:06:41.355864Z",
        "url": "https://files.pythonhosted.org/packages/5a/2f/6a71ce0fbd77c2aadea9672e328f391d805594b41d92a40401beac5e35e0/Graph-State-Machine-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cb3b3913ba2190faa17f9bbb901c121b871c83b869c8e38ab3d2e4bc1e6df72",
          "md5": "46d09b2acc60d0847e5bac76a24113f5",
          "sha256": "0901dcdc27dba6b74f8dac1416d79d64223fb957d6d63d55741d11ec4315fd4a"
        },
        "downloads": -1,
        "filename": "Graph_State_Machine-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46d09b2acc60d0847e5bac76a24113f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19346,
        "upload_time": "2021-07-28T18:28:01",
        "upload_time_iso_8601": "2021-07-28T18:28:01.701017Z",
        "url": "https://files.pythonhosted.org/packages/2c/b3/b3913ba2190faa17f9bbb901c121b871c83b869c8e38ab3d2e4bc1e6df72/Graph_State_Machine-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b8307072b6758a279b903d537087a37053fe6d4086f13ee75da8e0e94fc34f1",
          "md5": "b45f9e3ce0c262427cdb289bc4a36f52",
          "sha256": "4414b4779ef9120e880b8b48fd76123107177181fe7304aac9058b649e480e09"
        },
        "downloads": -1,
        "filename": "Graph-State-Machine-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b45f9e3ce0c262427cdb289bc4a36f52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15186,
        "upload_time": "2021-07-28T18:28:03",
        "upload_time_iso_8601": "2021-07-28T18:28:03.124862Z",
        "url": "https://files.pythonhosted.org/packages/1b/83/07072b6758a279b903d537087a37053fe6d4086f13ee75da8e0e94fc34f1/Graph-State-Machine-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bdba114bcaa7e3d280e4255f2c9693ff65e90815fcec0d90ce373181363e23c",
          "md5": "35ae6868e32ad6f4e59244bf2215159c",
          "sha256": "29028bb4a5086dc78deaa693c14e2f5555b65f357d6957ab81cec07b6424774c"
        },
        "downloads": -1,
        "filename": "Graph_State_Machine-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35ae6868e32ad6f4e59244bf2215159c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20639,
        "upload_time": "2021-09-23T13:03:51",
        "upload_time_iso_8601": "2021-09-23T13:03:51.738802Z",
        "url": "https://files.pythonhosted.org/packages/4b/db/a114bcaa7e3d280e4255f2c9693ff65e90815fcec0d90ce373181363e23c/Graph_State_Machine-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45d673e2699f98a7865ef225a20c64fca87c1bc1956adcf00d8131a53bbe7b9a",
          "md5": "7c9634ca81713571fc76cb83a2015fc1",
          "sha256": "30e79a44903185a655862d95e10c0a7ce3f7f9d846b02b7eede367dfef0a73bc"
        },
        "downloads": -1,
        "filename": "Graph-State-Machine-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c9634ca81713571fc76cb83a2015fc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15517,
        "upload_time": "2021-09-23T13:03:53",
        "upload_time_iso_8601": "2021-09-23T13:03:53.634674Z",
        "url": "https://files.pythonhosted.org/packages/45/d6/73e2699f98a7865ef225a20c64fca87c1bc1956adcf00d8131a53bbe7b9a/Graph-State-Machine-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26721151d1fba037ba2dbfac752c5a88309ab97f350108a20aa1366ebaa4c2bf",
          "md5": "48cfb2a437d676f100eae32cb31fba8b",
          "sha256": "759afff89ff6f4d1d7ad1da15770d7d4c325d290084981a6918d3356130b49e5"
        },
        "downloads": -1,
        "filename": "Graph_State_Machine-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48cfb2a437d676f100eae32cb31fba8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23380,
        "upload_time": "2022-05-01T16:13:58",
        "upload_time_iso_8601": "2022-05-01T16:13:58.200700Z",
        "url": "https://files.pythonhosted.org/packages/26/72/1151d1fba037ba2dbfac752c5a88309ab97f350108a20aa1366ebaa4c2bf/Graph_State_Machine-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b05e5e608df6b3bc11edd051087a9baa6aaab8cc5c9f6b68dbc38600cba0fbe",
          "md5": "6d43daad48b054501e39c7ffbaa0441f",
          "sha256": "d80cbde5230be452a94eb31b59f8de681b840863172f24dbe0131d15edbc43d8"
        },
        "downloads": -1,
        "filename": "Graph-State-Machine-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6d43daad48b054501e39c7ffbaa0441f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17890,
        "upload_time": "2022-05-01T16:14:00",
        "upload_time_iso_8601": "2022-05-01T16:14:00.429996Z",
        "url": "https://files.pythonhosted.org/packages/2b/05/e5e608df6b3bc11edd051087a9baa6aaab8cc5c9f6b68dbc38600cba0fbe/Graph-State-Machine-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26721151d1fba037ba2dbfac752c5a88309ab97f350108a20aa1366ebaa4c2bf",
        "md5": "48cfb2a437d676f100eae32cb31fba8b",
        "sha256": "759afff89ff6f4d1d7ad1da15770d7d4c325d290084981a6918d3356130b49e5"
      },
      "downloads": -1,
      "filename": "Graph_State_Machine-2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "48cfb2a437d676f100eae32cb31fba8b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23380,
      "upload_time": "2022-05-01T16:13:58",
      "upload_time_iso_8601": "2022-05-01T16:13:58.200700Z",
      "url": "https://files.pythonhosted.org/packages/26/72/1151d1fba037ba2dbfac752c5a88309ab97f350108a20aa1366ebaa4c2bf/Graph_State_Machine-2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b05e5e608df6b3bc11edd051087a9baa6aaab8cc5c9f6b68dbc38600cba0fbe",
        "md5": "6d43daad48b054501e39c7ffbaa0441f",
        "sha256": "d80cbde5230be452a94eb31b59f8de681b840863172f24dbe0131d15edbc43d8"
      },
      "downloads": -1,
      "filename": "Graph-State-Machine-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6d43daad48b054501e39c7ffbaa0441f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17890,
      "upload_time": "2022-05-01T16:14:00",
      "upload_time_iso_8601": "2022-05-01T16:14:00.429996Z",
      "url": "https://files.pythonhosted.org/packages/2b/05/e5e608df6b3bc11edd051087a9baa6aaab8cc5c9f6b68dbc38600cba0fbe/Graph-State-Machine-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}