{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Utilities"
    ],
    "description": "[简体中文](../zh-CN/whl_zh.md) | English\n# paddlevideo package\n\n## Get started quickly\n\n### install package\n\ninstall by pypi\n```bash\npip install paddlevideo==0.0.1\n```\n**note:** you may have difficulty in installing opencv-python,you can try:\n\n```\npip install opencv-python==4.2.0.32 -i https://pypi.doubanio.com/simple\n```\n\nbuild own whl package and install\n```bash\npython3 setup.py bdist_wheel\npip3 install dist/paddlevideo-x.x.x-py3-none-any.whl\n```\n\n### 1. Quick Start\n\n* Assign `video_file='data/example.mp4'`, Use inference model that Paddle provides `model_name='ppTSM'`\n\n\n```python\nfrom ppvideo import PaddleVideo\nclas = PaddleVideo(model_name='ppTSM',use_gpu=False,use_tensorrt=False)\nvideo_file='data/example.mp4.'\nresult=clas.predict(video_file)\nprint(result)\n```\n\n```\n    >>> result\n    [{'videoname': 'data/example.mp4', 'class_ids': [5], 'scores': [0.999963], 'label_names': ['archery']}]\n```\n\n* Using command line interactive programming\n```bash\nppvideo --model_name='ppTSM' --video_file='data/example.mp4'\n```\n\n```\n    >>> result\n    **********data/example.mp4**********\n    [{'videoname': 'data/example.mp4', 'class_ids': [5], 'scores': [0.999963], 'label_names': ['archery']}]\n```\n\n\n### 2. Definition of Parameters\n* model_name(str): model's name. If not assigning `model_file`and`params_file`, you can assign this param. If using inference model based on Kinectics-400 provided by Paddle, set as default='ppTSM'.\n* video_file(str): video's path. Support assigning single local video, internet video and folder containing series of videos. Also Support numpy.ndarray.\n* use_gpu(bool): Whether to use GPU or not, defalut=False.\n* num_seg(int): Number of segments while using the sample strategies proposed in TSN.\n* seg_len(int): Number of frames for each segment.\n* short_size(int): resize the minima between height and width into resize_short(int), default=256.\n* target_size(int): resize image into resize(int), default=224.\n* normalize(bool): whether normalize image or not, default=True.\n* model_file(str): path of inference.pdmodel. If not assign this param，you need assign `model_name` for downloading.\n* params_file(str): path of inference.pdiparams. If not assign this param，you need assign `model_name` for downloading.\n* batch_size(int): batch number, default=1.\n* use_fp16(bool): Whether to use float16 in memory or not, default=False.\n* use_tensorrt(bool): whether to open tensorrt or not. Using it can greatly promote predict preformance, default=False.\n* gpu_mem(int): GPU memory usages，default=8000.\n* top_k(int): Assign top_k, default=1.\n* enable_mkldnn(bool): whether enable MKLDNN or not, default=False.\n\n\n### 3. Different Usages of Codes\n\n**We provide two ways to use: 1. Python interative programming 2. Bash command line programming**\n\n* check `help` information\n```bash\nppvideo -h\n```\n\n* Use user-specified model, you need to assign model's path `model_file` and parameters's path`params_file`\n\n###### python\n```python\nfrom ppvideo import PaddleVideo\nclas = PaddleVideo(model_file='user-specified model path',\n    params_file='parmas path', use_gpu=False, use_tensorrt=False)\nvideo_file = ''\nresult=clas.predict(video_file)\nprint(result)\n```\n\n###### bash\n```bash\nppvideo --model_file='user-specified model path' --params_file='parmas path' --video_file='video path'\n```\n\n\n* Use inference model which PaddlePaddle provides to predict, you need to choose one of model when initializing ppvideo to assign `model_name`. You may not assign `model_file` , and the model you chosen will be download in `BASE_INFERENCE_MODEL_DIR` ,which will be saved in folder named by `model_name`,avoiding overlay different inference model.\n\n###### python\n```python\nfrom ppvideo import PaddleVideo\nclas = PaddleVideo(model_name='ppTSM',use_gpu=False, use_tensorrt=False)\nvideo_file = ''\nresult=clas.predict(video_file)\nprint(result)\n```\n\n###### bash\n```bash\nppvideo --model_name='ppTSM' --video_file='video path'\n```\n\n* You can assign input as format`np.ndarray` which has been preprocessed `--video_file=np.ndarray`.\n\n\n###### python\n```python\nfrom ppvideo import PaddleVideo\nclas = PaddleVideo(model_name='ppTSM',use_gpu=False, use_tensorrt=False)\nvideo_file =np.ndarray\nresult=clas.predict(video_file)\n```\n\n###### bash\n```bash\nppvideo --model_name='ppTSM' --video_file=np.ndarray\n```\n\n* You can assign `video_file` as a folder path containing series of videos, also can assign `top_k`.\n\n###### python\n```python\nfrom ppvideo import PaddleVideo\nclas = PaddleVideo(model_name='ppTSM',use_gpu=False, use_tensorrt=False,top_k=5)\nvideo_file = '' # it can be video_file folder path which contains all of videos you want to predict.\nresult=clas.predict(video_file)\nprint(result)\n```\n\n###### bash\n```bash\npaddleclas --model_name='ResNet50' --video_file='video path' --top_k=5\n```\n\n* You can assign `--label_name_path` as your own label_dict_file, format should be as(class_id<space>class_name<\\n>).\n\n```\n0 abseiling\n1 air_drumming\n2 answering_questions\n3 applauding\n4 applying_cream\n5 archery\n......\n```\n\n* If you use inference model that Paddle provides, you do not need assign `label_name_path`. Program will take `data/k400/Kinetics-400_label_list.txt` as defaults. If you hope using your own training model, you can provide `label_name_path` outputing 'label_name' and scores, otherwise no 'label_name' in output information.\n\n###### python\n```python\nfrom ppvideo import PaddleVideo\nclas = PaddleVideo(model_file= './inference.pdmodel',params_file = './inference.pdiparams',label_name_path='./data/k400/Kinetics-400_label_list.txt',use_gpu=False)\nvideo_file = '' # it can be video_file folder path which contains all of videos you want to predict.\nresult=clas.predict(video_file)\nprint(result)\n```\n###### bash\n```bash\nppvideo --model_file= './inference.pdmodel' --params_file = './inference.pdiparams' --video_file='video path' --label_name_path='./data/k400/Kinetics-400_label_list.txt'\n```\n###### python\n```python\nfrom ppvideo import PaddleVideo\nclas = PaddleVideo(model_name='ppTSM',use_gpu=False)\nvideo_file = '' # it can be video_file folder path which contains all of videos you want to predict.\nresult=clas.predict(video_file)\nprint(result)\n```\n###### bash\n```bash\nppvideo --model_name='ppTSM' --video_file='video path'\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/PaddlePaddle/PaddleVideo.git",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PaddlePaddle/PaddleVideo",
    "keywords": "A treasure chest for video understanding powered by PaddlePaddle.",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "paddlevideo",
    "package_url": "https://pypi.org/project/paddlevideo/",
    "platform": "",
    "project_url": "https://pypi.org/project/paddlevideo/",
    "project_urls": {
      "Download": "https://github.com/PaddlePaddle/PaddleVideo.git",
      "Homepage": "https://github.com/PaddlePaddle/PaddleVideo"
    },
    "release_url": "https://pypi.org/project/paddlevideo/0.0.1/",
    "requires_dist": [
      "paddlepaddle-gpu (>=2.0.0.rc)",
      "tqdm",
      "PyYAML (>=5.1)",
      "numpy",
      "decord",
      "pandas",
      "opencv-python (==4.2.0.32)"
    ],
    "requires_python": "",
    "summary": "Awesome Video toolkits based on PaddlePaddle",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9170038,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f8bb831e62d603938e4395f63aee1de14a26281ddb20c7cddcc92cd1dc103d1",
          "md5": "d7cab5e9c66ee96eadbda57b52bcd7cf",
          "sha256": "6252140575485c8b0b22be477f82977a63f92cee691742442b1ad97a67d45cc4"
        },
        "downloads": -1,
        "filename": "paddlevideo-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7cab5e9c66ee96eadbda57b52bcd7cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 151479,
        "upload_time": "2021-01-14T06:40:33",
        "upload_time_iso_8601": "2021-01-14T06:40:33.474969Z",
        "url": "https://files.pythonhosted.org/packages/8f/8b/b831e62d603938e4395f63aee1de14a26281ddb20c7cddcc92cd1dc103d1/paddlevideo-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2873bb064930f6fe9adfc74c47f8fe4d8c7045cb8d0625ccb1b053375f693246",
          "md5": "b25baf745fef030734a5b95f152d21d4",
          "sha256": "5c4b337852e77165972c84f9f3519b4f826fcd2cc5c67ef4d690e9be337b325c"
        },
        "downloads": -1,
        "filename": "paddlevideo-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b25baf745fef030734a5b95f152d21d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 146728,
        "upload_time": "2021-01-19T07:15:14",
        "upload_time_iso_8601": "2021-01-19T07:15:14.347347Z",
        "url": "https://files.pythonhosted.org/packages/28/73/bb064930f6fe9adfc74c47f8fe4d8c7045cb8d0625ccb1b053375f693246/paddlevideo-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2873bb064930f6fe9adfc74c47f8fe4d8c7045cb8d0625ccb1b053375f693246",
        "md5": "b25baf745fef030734a5b95f152d21d4",
        "sha256": "5c4b337852e77165972c84f9f3519b4f826fcd2cc5c67ef4d690e9be337b325c"
      },
      "downloads": -1,
      "filename": "paddlevideo-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b25baf745fef030734a5b95f152d21d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 146728,
      "upload_time": "2021-01-19T07:15:14",
      "upload_time_iso_8601": "2021-01-19T07:15:14.347347Z",
      "url": "https://files.pythonhosted.org/packages/28/73/bb064930f6fe9adfc74c47f8fe4d8c7045cb8d0625ccb1b053375f693246/paddlevideo-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}