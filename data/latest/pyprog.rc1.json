{
  "info": {
    "author": "BillK",
    "author_email": "bluesky42624@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Introduction\n\nPyProg is an Open-Source library for creating progress indicators (e.g. progress bars). It helps you create customizable progress indicators. This library is for Python.\n\n# Compatibility\n\nPyProg is compatible with both Python 3 and Python 2, and will also work on Qt Console.\n\n# Getting Started\n\n## Installation\n\nLatest Release: `pip install pyprog`\n\nLatest Development Release: `pip install git+https://github.com/Bill13579/pyprog.git@develop`\n\nAfter you have installed PyProg, you can test if it has been successfully installed by running `import pyprog` in python. If PyProg was installed successfully, it should show no errors.\n\n## How to use the PyProg Progress Bar\n\n### Basic PyProg Progress Bar\n\nTo create a basic progress bar, follow these steps:\n\n1. Install PyProg ([Guide](#installation \"How to install PyProg\"))\n2. Import PyProg: `import pyprog`\n3. Create a `ProgressBar` object: `prog = pyprog.ProgressBar(\"\", \"\")`\n4. Show the bar: `prog.update()`\n5. To update the status, use `prog.set_stat(<status>)` to set the status and then use `prog.update()` to actually show the change\n6. When finished, use `prog.end()` to make the Progress Bar last\n\nExample Code with Fake For loop:\n\n```python\nimport pyprog\nfrom time import sleep\n\n# Create a PyProg ProgressBar Object\nprog = pyprog.ProgressBar(\":-) \", \" OK!\")\n\n# Show the initial status\nprog.update()\n\n# Fake for loop\nfor i in range(0, 100):\n\n\t# Sleep for a while (This is just to slow down the for loop so that it won't end in an instant)\n\tsleep(0.1)\n\n\t# Update status\n\tprog.set_stat(i + 1)\n\n\t# Show (Update) the current status\n\tprog.update()\n\n# Make the Progress Bar final\nprog.end()\n```\n\nOutput:\n\n```\nInitial State:\n:-) Progress: 0% --------------------------------------------------  OK!\n\nWhen progress is 50:\n:-) Progress: 50% #########################-------------------------  OK!\n\nFinal State:\n:-) Progress: 100% ##################################################  OK!\n```\n\n#### What is the first two parameters?\n\nThe first two parameters in `prog = pyprog.ProgressBar(\"\", \"\")` is for telling PyProg what to put before and after the progress indicator.\n\nExample:\n\n```\n :-) Progress: 0% --------------------------------------------------  OK!\n  ^                                 ^                                  ^\nPrefix                             Bar                              Suffix\n```\n\n### Pretty Progress Bar\n\nYou can also add more options to make it look good.\n\nAdding options `complete_symbol=\"█\", not_complete_symbol=\"-\"` will change the original output to:\n\n```\nInitial State:\n:-) Progress: 0% --------------------------------------------------  OK!\n\nWhen progress is 50:\n:-) Progress: 50% █████████████████████████-------------------------  OK!\n\nFinal State:\n:-) Progress: 100% ██████████████████████████████████████████████████  OK!\n```\n\n### Auto calculate the percentage\n\nPyProg can also auto calculate the current percentage. You just need to tell PyProg the total number of things you need to process.\n\nChange the line `prog = pyprog.ProgressBar(\"\", \"\")` to `prog = pyprog.ProgressBar(\"\", \"\", <Total Number of things>)`, and PyProg will calculate the percentage for you based on the status that you give it.\n\nTo use it in our simple progress bar code, if we have 37 tasks to do, we can change this:\n\n```python\n# Create a PyProg ProgressBar Object\nprog = pyprog.ProgressBar(\":-) \", \" OK!\")\n```\n\nto this:\n\n```python\n# Create a PyProg ProgressBar Object\nprog = pyprog.ProgressBar(\":-) \", \" OK!\", 37)\n```\n\nAnd also change the fake for loop from `for i in range(0, 100):` to `for i in range(0, 37):`, and it will auto calculate the percentage and show it to the user.\n\n## How to use the PyProg Progress Indicator (Fraction)\n\n### Basic PyProg Progress Indicator (Fraction)\n\nTo create a basic progress indicator (fraction), follow these steps:\n\n1. Import PyProg: `import pyprog`\n2. Create a `ProgressIndicatorFraction` object: `prog = pyprog.ProgressIndicatorFraction(\"\", \"\", <Total number of things>)` (Replace \"<Total number of things>\" with the total number of tasks or things you need to process)\n3. Show the indicator: `prog.update()`\n4. To update the status, use `prog.set_stat(<status>)` to set the status and then use `prog.update()` to actually show the change\n5. When finished, use `prog.end()` to make the Progress Indicator (Fraction) last\n\nExample Code with Fake For loop (We are using 56 as the total in this example):\n\n```python\nimport pyprog\nfrom time import sleep\n\n# Create a PyProg ProgressIndicatorFraction Object\nprog = pyprog.ProgressIndicatorFraction(\":-) \", \" OK!\", 56)\n\n# Show the initial status\nprog.update()\n\n# Fake for loop\nfor i in range(0, 56):\n\n\t# Sleep for a while (This is just to slow down the for loop so that it won't end in an instant)\n\tsleep(0.1)\n\n\t# Update status\n\tprog.set_stat(i + 1)\n\n\t# Show (Update) the current status\n\tprog.update()\n\n# Make the Progress Indicator (Fraction) final\nprog.end()\n```\n\nOutput:\n\n```\nInitial State:\n:-) 0/56 OK!\n\nWhen half done:\n:-) 28/56 OK!\n\nFinal State:\n:-) 56/56 OK!\n```\n\n# Documentation\n\n## Progress Indicator Parameters\n\n### Options for ProgressBar\n\n#### prefix\n\nThe prefix of everything.\n\n#### suffix\n\nThe suffix of everything.\n\n#### total (default is 100)\n\nThis is the option that tells PyProg how many things or tasks you need to process. We used it in the [Auto calculate the percentage](#auto-calculate-the-percentage \"Auto calculate the percentage\") section.\n\n#### bar_length (default is 50)\n\nThis tells PyProg how long should the bar should be.\n\n#### initial (default is 0)\n\nInitial status to show on the bar.\n\n#### decimals (default is 0)\n\nHow many decimals should the percent have.\n\n#### complete_symbol (default is \"#\")\n\nThe complete symbol will be shown in the complete part of the bar. We used it in the [Pretty Progress Bar](#pretty-progress-bar \"Pretty Progress Bar\") section.\n\nExample Position of complete symbol:\nProgress: 59% <span style=\"background-color: #FFFF00\">#############################</span>---------------------&nbsp;\n\n#### not_complete_symbol (default is \"-\")\n\nThe not complete symbol will be shown in the not yet complete part of the bar. We used it in the [Pretty Progress Bar](#pretty-progress-bar \"Pretty Progress Bar\") section.\n\nExample Position of complete symbol:\nProgress: 59% #############################<span style=\"background-color: #FFFF00\">---------------------</span>&nbsp;\n\n#### progress_loc (default is 0)\n\nWhere the progress explanation (prefix) and the progress text should be shown.\n\nPossible Values:<br/>\n\tProgressBar.PROGRESS_LOC_START or 0 - Show both at the start<br/>\n\tProgressBar.PROGRESS_LOC_MIDDLE or 1 - Show both at the middle of the bar<br/>\n\tProgressBar.PROGRESS_LOC_END or 2 - Show both at the end<br/>\n\tProgressBar.PROGRESS_LOC_EXP_START_PROGRESS_MID or 3 - Show explanation (prefix) at the start and the progress text at the middle of the bar<br/>\n\tProgressBar.PROGRESS_LOC_EXP_END_PROGRESS_MID or 4 - Show explanation (prefix) at the end and the progress text at the middle of the bar\n\nPROGRESS_LOC_START:<br/>\n<span style=\"background-color: #FFFF00\">Progress: 32%</span> ################----------------------------------&nbsp;\n\nPROGRESS_LOC_MIDDLE:<br/>\n\\################ <span style=\"background-color: #FFFF00\">Progress: 32%</span> ------------------&nbsp;\n\nPROGRESS_LOC_END:<br/>\n\\################---------------------------------- <span style=\"background-color: #FFFF00\">Progress: 32%</span>\n\nPROGRESS_LOC_EXP_START_PROGRESS_MID:<br/>\n<span style=\"background-color: #FFFF00\">Progress:  </span>################----- <span style=\"background-color: #FFFF00\">32%</span> -----------------------&nbsp;\n\nPROGRESS_LOC_EXP_END_PROGRESS_MID:<br/>\n\\################----- <span style=\"background-color: #FFFF00\">32%</span> ----------------------- <span style=\"background-color: #FFFF00\">Progress: </span>\n\n#### progress_format (default is \"+p%\")\n\nFormat for the progress text. PyProg replaces special characters with actual values. Here is a list of special characters:\n\n\"+p\" -> Current percent<br/>\n\"+c\" -> Current status\n\n#### progress_explain (default is \"Progress: \")\n\nThis is the progress explanation (prefix).\n\nExample position of progress explanation:\n<span style=\"background-color: #FFFF00\">Progress: </span>32% ################----------------------------------&nbsp;\n\nExamples:<br/>\n\t\"Progress: \"<br/>\n\t\"Current Progress: \"\n\n#### wrap_bar_prefix (default is \" \")\n\nThe prefix of the bar.\n\n#### wrap_bar_suffix (default is \" \")\n\nThe suffix of the bar.\n\n### Options for ProgressIndicatorFraction\n\n#### prefix\n\nThe prefix of everything.\n\n#### suffix\n\nThe suffix of everything.\n\n#### total\n\nThis is the option that tells PyProg how many things or tasks you need to process.\n\n#### initial (default is 0)\n\nInitial status to show on the indicator.\n\n## Progress Indicator Functions\n\n### Functions for ProgressBar\n\n#### set_stat()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: current\n\nSet the current progress.\n\n#### stat()\n\nAvailable on: PyProg 1.1.0-0 ~<br/>\nParams: current<br/>\nNote: This function is currently only available on the ProgressBar. Support for ProgressIndicatorFraction will come soon.\n\nSet the current progress and update the progress bar.\n\n#### progress()\n\nAvailable on: PyProg 1.1.0-0 ~<br/>\nParams: progress<br/>\nNote: This function is currently only available on the ProgressBar. Support for ProgressIndicatorFraction will come soon.\n\nIncrease the progress by the given amount.\n\n#### update()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: (none)\n\nUpdate the progress bar so that it shows the current progress.<br/>\nNote: Also call this to initiate the bar.\n\n#### end()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: (none)\n\nEnd the progress bar.\n\n#### end_m()\n\nAvailable on: PyProg 1.1.0-0 ~<br/>\nParams: msg<br/>\nNote: This function is currently only available on the ProgressBar. Support for ProgressIndicatorFraction will come soon.\n\nEnd the progress bar with a message.\n\n#### set_prefix()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: prefix\n\nSet the prefix\n\n#### set_suffix()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: suffix\n\nSet the suffix\n\n#### set_total()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: total\n\nSet the total\n\n#### set_bar_length()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: bar_length\n\nSet the length of the bar\n\n#### set_decimals()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: decimals\n\nSet the number of decimals for the percent\n\n#### set_symbols()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: symbols\n\nSet the complete symbol and the not complete symbol. `symbols` has to be a tuple: (complete symbol, not complete symbol)\n\n#### set_progress_loc()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: progress_loc\n\nSet the progress explanation (prefix) and the progress text location. See [the progress_loc parameter](#user-content-progress_loc-default-is-0 \"progress_loc\") section for the possible values.\n\n#### set_progress_explain()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: progress_explain\n\nSet the progress explanation (prefix).\n\nExamples:<br/>\n\t\"Progress: \"<br/>\n\t\"Current Progress: \"\n\n#### set_wrap_bar_text()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: prefix, suffix\n\nSet the wrap bar text (the prefix and the suffix of the bar).\n\n#### set_progress_format()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: progress_format\n\nSet the format for the progress text. PyProg replaces special characters with actual values. Here is a list of special characters:\n\n\"+p\" -> Current percent<br/>\n\"+c\" -> Current status\n\n### Functions for ProgressIndicatorFunction\n\n#### set_stat()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: current\n\nSet the current progress.\n\n#### update()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: (none)\n\nUpdate the progress indicator so that it shows the current progress.\nNote: Also call this to initiate the indicator.\n\n#### end()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: (none)\n\nEnd the progress indicator.\n\n#### set_prefix()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: prefix\n\nSet the prefix\n\n#### set_suffix()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: suffix\n\nSet the suffix\n\n#### set_total()\n\nAvailable on: PyProg 1.0.0 ~<br/>\nParams: total\n\nSet the total\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Bill13579/pyprog",
    "keywords": "progress bar indicator pyprog",
    "license": "GNU AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyprog",
    "package_url": "https://pypi.org/project/pyprog/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyprog/",
    "project_urls": {
      "Homepage": "https://github.com/Bill13579/pyprog"
    },
    "release_url": "https://pypi.org/project/pyprog/1.1.0.post2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library for creating super customizable progress indicators.",
    "version": "1.1.0.post2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9779868,
  "releases": {
    "1.1.0.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e61193b512ed9939038a1afacb1c4bd28adf72bf24bdcaf8d08eeef1e589f178",
          "md5": "152888d162e2ef48cb61a5ad72bed4a6",
          "sha256": "0283c9d9cf73ab2d34eb63b586c2b0c675d88673357b049feca68c2dffaf6dde"
        },
        "downloads": -1,
        "filename": "pyprog-1.1.0.post2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "152888d162e2ef48cb61a5ad72bed4a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18297,
        "upload_time": "2021-03-16T02:12:21",
        "upload_time_iso_8601": "2021-03-16T02:12:21.653165Z",
        "url": "https://files.pythonhosted.org/packages/e6/11/93b512ed9939038a1afacb1c4bd28adf72bf24bdcaf8d08eeef1e589f178/pyprog-1.1.0.post2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a13f61254d7e503fb043cc7a822e9fc67d1eb49556c5c43d1f3501e0407f7db",
          "md5": "27384b593ce69755c89f6b6ea0d8eb9c",
          "sha256": "da289376872d9164da405076edc45d81b62766a4971ca6f31041a966bf32ef30"
        },
        "downloads": -1,
        "filename": "pyprog-1.1.0.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "27384b593ce69755c89f6b6ea0d8eb9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7497,
        "upload_time": "2021-03-16T02:12:22",
        "upload_time_iso_8601": "2021-03-16T02:12:22.716768Z",
        "url": "https://files.pythonhosted.org/packages/8a/13/f61254d7e503fb043cc7a822e9fc67d1eb49556c5c43d1f3501e0407f7db/pyprog-1.1.0.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e61193b512ed9939038a1afacb1c4bd28adf72bf24bdcaf8d08eeef1e589f178",
        "md5": "152888d162e2ef48cb61a5ad72bed4a6",
        "sha256": "0283c9d9cf73ab2d34eb63b586c2b0c675d88673357b049feca68c2dffaf6dde"
      },
      "downloads": -1,
      "filename": "pyprog-1.1.0.post2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "152888d162e2ef48cb61a5ad72bed4a6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18297,
      "upload_time": "2021-03-16T02:12:21",
      "upload_time_iso_8601": "2021-03-16T02:12:21.653165Z",
      "url": "https://files.pythonhosted.org/packages/e6/11/93b512ed9939038a1afacb1c4bd28adf72bf24bdcaf8d08eeef1e589f178/pyprog-1.1.0.post2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a13f61254d7e503fb043cc7a822e9fc67d1eb49556c5c43d1f3501e0407f7db",
        "md5": "27384b593ce69755c89f6b6ea0d8eb9c",
        "sha256": "da289376872d9164da405076edc45d81b62766a4971ca6f31041a966bf32ef30"
      },
      "downloads": -1,
      "filename": "pyprog-1.1.0.post2.tar.gz",
      "has_sig": false,
      "md5_digest": "27384b593ce69755c89f6b6ea0d8eb9c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7497,
      "upload_time": "2021-03-16T02:12:22",
      "upload_time_iso_8601": "2021-03-16T02:12:22.716768Z",
      "url": "https://files.pythonhosted.org/packages/8a/13/f61254d7e503fb043cc7a822e9fc67d1eb49556c5c43d1f3501e0407f7db/pyprog-1.1.0.post2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}