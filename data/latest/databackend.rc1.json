{
  "info": {
    "author": "Michael Chow",
    "author_email": "mc_al_github@fastmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n# databackend\n\nThe `databackend` package allows you to register a subclass, without\nneeding to import the subclass itself. This is useful for implementing\nactions over optional dependencies.\n\n## Example\n\nFor this example, we’ll implement a function, `fill_na()`, that fills in\nmissing values in a DataFrame. It works with DataFrame objects from two\npopular libraries: `pandas` and `polars`. Importantly, neither library\nneeds to be installed.\n\n### Setup\n\nThe code below defines “abstract” parent classes for each of the\nDataFrame classes in the two libraries.\n\n``` python\nfrom databackend import AbstractBackend\n\nclass AbstractPandasFrame(AbstractBackend):\n    _backends = [(\"pandas\", \"DataFrame\")]\n\n\nclass AbstractPolarsFrame(AbstractBackend):\n    _backends = [(\"polars\", \"DataFrame\")]\n```\n\nNote that the abstract classes can be used as stand-ins for the real\nthing in `issubclass()` and `isinstance`.\n\n``` python\nfrom pandas import DataFrame\n\nissubclass(DataFrame, AbstractPandasFrame)\nisinstance(DataFrame(), AbstractPandasFrame)\n```\n\n    True\n\n### Simple fill_na: isinstance to switch behavior\n\nThe `fill_na()` function below uses custom handling for pandas and\npolars.\n\n``` python\ndef fill_na(data, x):\n    if isinstance(data, AbstractPolarsFrame):\n        return data.fill_nan(x)\n    elif isinstance(data, AbstractPandasFrame):\n        return data.fillna(x)\n    else:\n        raise NotImplementedError()\n```\n\nNotice that neither `pandas` nor `polars` need to be imported when\ndefining `fill_na()`.\n\nHere is an example of calling `fill_na()` on both kinds of DataFrames.\n\n``` python\n# test polars ----\n\nimport polars as pl\n\ndf = pl.DataFrame({\"x\": [1, 2, None]})\nfill_na(df, 3)\n\n\n# test pandas ----\n\nimport pandas as pd\n\ndf = pd.DataFrame({\"x\": [1, 2, None]})\nfill_na(df, 3)\n```\n\n         x\n    0  1.0\n    1  2.0\n    2  3.0\n\nThe key here is that a user could have only pandas, or only polars,\ninstalled. Importantly, doing the isinstance checks do not import any\nlibraries!\n\n### Advanced fill_na: generic function dispatch\n\n`databackend` shines when combined with [generic function\ndispatch](https://mchow.com/posts/2020-02-24-single-dispatch-data-science/).\nThis is a programming approach where you declare a function\n(e.g. `fill_na()`), and then register each backend specific\nimplementation on the function.\n\nPython has a built-in function implementing this called\n`functools.singledispatch`.\n\nHere is an example of the previous `fill_na()` function written using\nit.\n\n``` python\nfrom functools import singledispatch\n\n@singledispatch\ndef fill_na2(data, x):\n    raise NotImplementedError(f\"No support for class: {type(data)}\")\n\n\n# handle polars ----\n\n@fill_na2.register\ndef _(data: AbstractPolarsFrame, x):\n    return data.fill_nan(x)\n\n\n# handle pandas ----\n\n@fill_na2.register\ndef _(data: AbstractPandasFrame, x):\n    return data.fillna(x)\n```\n\nNote two important decorators:\n\n-   `@singledispatch` defines a default function. This gets called if no\n    specific implementations are found.\n-   `@fill_na2.register` defines specific versions of the function.\n\nHere’s an example of it in action.\n\n``` python\n# example ----\n\nimport pandas as pd\nimport polars as pl\n\ndf = pl.DataFrame({\"x\": [1, 2, None]})\nfill_na2(df, 3)\n\ndf = pd.DataFrame({\"x\": [1, 2, None]})\nfill_na2(df, 3)\n```\n\n         x\n    0  1.0\n    1  2.0\n    2  3.0\n\n### How it works\n\nUnder the hood, `AbstractBackend` behaves similarly to python’s builtin\n[`abc.ABC` class](https://docs.python.org/3/library/abc.html#abc.ABC).\n\n``` python\nfrom abc import ABC\n\nclass MyABC(ABC):\n    pass\n\nfrom io import StringIO\n\nMyABC.register(StringIO)\n\n\n# StringIO is a \"virtual subclass\" of MyABC\nisinstance(StringIO(\"abc\"), MyABC)\n```\n\n    True\n\nThe key difference is that you can specify the virtual subclass using\nthe tuple `(\"<mod_name>\", \"<class_name>\")`.\n\nWhen `issubclass(SomeClass, AbstractBackend)` runs, then…\n\n-   The standard ABC caching mechanism is checked, and potentially\n    returns the answer immediately.\n-   Otherwise, a subclass hook cycles through registered backends.\n-   The hook runs the subclass check for any backends that are imported\n    (e.g. are in `sys.modules`).\n\nTechnically, `AbstractBackend` inherits all the useful metaclass things\nfrom `abc.ABCMeta`, so these can be used also.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/machow/databackend",
    "keywords": "data",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "databackend",
    "package_url": "https://pypi.org/project/databackend/",
    "platform": null,
    "project_url": "https://pypi.org/project/databackend/",
    "project_urls": {
      "Homepage": "https://github.com/machow/databackend"
    },
    "release_url": "https://pypi.org/project/databackend/0.0.1/",
    "requires_dist": [
      "pip-tools ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Abstract data dispatch",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14692504,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fb216e39a8f149f8f4e2776793951243f0f23c7fa5e76208524ad65444979df",
          "md5": "f4ffd837fbc8392f686178a51baf7460",
          "sha256": "f8b98bbef6f82ab3d4a9fa82b9259f3a054c0264a4067457f5301b3adf88b39d"
        },
        "downloads": -1,
        "filename": "databackend-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4ffd837fbc8392f686178a51baf7460",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 4796,
        "upload_time": "2022-08-08T18:45:13",
        "upload_time_iso_8601": "2022-08-08T18:45:13.324874Z",
        "url": "https://files.pythonhosted.org/packages/1f/b2/16e39a8f149f8f4e2776793951243f0f23c7fa5e76208524ad65444979df/databackend-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a87505e44df4463ffbe1da489823691b8d47de64a97d79de82d907f11e65594",
          "md5": "19e72c1615c451a2b37f95dac7e3621a",
          "sha256": "a9bed4fdb9d7d4cbab2172a47b50c8d029d731446d8a470b1fc8910794ba3f79"
        },
        "downloads": -1,
        "filename": "databackend-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "19e72c1615c451a2b37f95dac7e3621a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10097,
        "upload_time": "2022-08-08T18:45:15",
        "upload_time_iso_8601": "2022-08-08T18:45:15.684405Z",
        "url": "https://files.pythonhosted.org/packages/2a/87/505e44df4463ffbe1da489823691b8d47de64a97d79de82d907f11e65594/databackend-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fb216e39a8f149f8f4e2776793951243f0f23c7fa5e76208524ad65444979df",
        "md5": "f4ffd837fbc8392f686178a51baf7460",
        "sha256": "f8b98bbef6f82ab3d4a9fa82b9259f3a054c0264a4067457f5301b3adf88b39d"
      },
      "downloads": -1,
      "filename": "databackend-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f4ffd837fbc8392f686178a51baf7460",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 4796,
      "upload_time": "2022-08-08T18:45:13",
      "upload_time_iso_8601": "2022-08-08T18:45:13.324874Z",
      "url": "https://files.pythonhosted.org/packages/1f/b2/16e39a8f149f8f4e2776793951243f0f23c7fa5e76208524ad65444979df/databackend-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a87505e44df4463ffbe1da489823691b8d47de64a97d79de82d907f11e65594",
        "md5": "19e72c1615c451a2b37f95dac7e3621a",
        "sha256": "a9bed4fdb9d7d4cbab2172a47b50c8d029d731446d8a470b1fc8910794ba3f79"
      },
      "downloads": -1,
      "filename": "databackend-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "19e72c1615c451a2b37f95dac7e3621a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10097,
      "upload_time": "2022-08-08T18:45:15",
      "upload_time_iso_8601": "2022-08-08T18:45:15.684405Z",
      "url": "https://files.pythonhosted.org/packages/2a/87/505e44df4463ffbe1da489823691b8d47de64a97d79de82d907f11e65594/databackend-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}