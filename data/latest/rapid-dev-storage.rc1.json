{
  "info": {
    "author": "Michael Hall",
    "author_email": "michael@michaelhall.tech",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "### Why?\n\nBecause there are many situations in which a small app may need to store data and not want to commit to a full DB design from the outset.\nMany solutions for this incur tradeoffs, this one is one I would consider \"not terrible\"\n\nEverything in it is designed to be replacable, from how things get stored on disk, to what gets used for serialization, with defaults which should work reasonably well for the intended use.\n\n### What this isn't\n\nA replacement for a proper database and queries, or an ORM handling all of that for you\n\n### What this is\n\nAn abstraction around storing \"some number of identifiers\" mapping to \"some easily serialized types\" without a concrete schema.\n\nThis is great for not thinking about certain things specific to DBs, but it makes a few concessions and is less performant than using the right tool for the job. This is a tool for rapid development scaffolding.\n\n### Examples\n\n```py\n# Getting started with customizing use\nfrom rapid_dev_storage import SQLiteBackend, Storage, StorageGroup, StorageValue\n\n\nclass SpecificStorage(Storage):\n    \"\"\" This shows how a project can use the simple base design to advantage \"\"\"\n\n    @classmethod\n    async def new_storage(cls, location):\n        backend = await SQLiteBackend.create_backend_instance(location, \"main_store\", 42)\n        return cls(backend)\n\n    def user(self, user: User):\n        \"\"\" Returns a specific StorageValue corresponding to a user object \"\"\"\n        return self.get_group(\"USER\")[user.uuid]\n\n    async def all_users(self):\n        \"\"\" Yields user uuids and corresponding user data \"\"\"\n        async for user_uuid, user_data in self._backend.get_all_by_group(\"USER\"):\n            yield user_uuid, user_data\n```\n\n\n### I want to use it now!!\n\nIf you want to mess with this before it is fully documented, the below may be enough to get you started.\n\n\n```py\n# python3.8 -m asyncio\n>>> from rapid_dev_storage import SQLiteBackend, Storage\n>>> backend = await SQLiteBackend.create_backend_instance(\":memory:\", \"test\", 1)\n>>> store = Storage(backend)\n>>> await store.get_group(\"Test\")[\"some_id\", \"some_other_id\"].set_value(42)\n>>> await store.get_group(\"Test\")[\"some_id\", \"some_other_id\"].get_value()\n42\n```\n\nThere's more work to be done here, mostly documentation\nbut if you use it exactly as it's intended currently, it should work for you. \n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mikeshardmind/rapid_dev_storage",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rapid-dev-storage",
    "package_url": "https://pypi.org/project/rapid-dev-storage/",
    "platform": "",
    "project_url": "https://pypi.org/project/rapid-dev-storage/",
    "project_urls": {
      "Homepage": "https://github.com/mikeshardmind/rapid_dev_storage"
    },
    "release_url": "https://pypi.org/project/rapid-dev-storage/1.0.0/",
    "requires_dist": [
      "apsw-wheels",
      "msgpack"
    ],
    "requires_python": ">=3.8",
    "summary": "A simple, but effective storage mechanism for rapid development",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7178845,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af7b949fd768df257c46314c8d91ed6261e7b378692458bd46e3b9e3b55f4bb3",
          "md5": "18459ef8d94f1c153e095093881ce14a",
          "sha256": "842dddc12dbda53f3365b8654ae5471ddb7bb66453d7171481fad7e70f65e695"
        },
        "downloads": -1,
        "filename": "rapid_dev_storage-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18459ef8d94f1c153e095093881ce14a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9487,
        "upload_time": "2020-05-06T09:10:48",
        "upload_time_iso_8601": "2020-05-06T09:10:48.659448Z",
        "url": "https://files.pythonhosted.org/packages/af/7b/949fd768df257c46314c8d91ed6261e7b378692458bd46e3b9e3b55f4bb3/rapid_dev_storage-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af7b949fd768df257c46314c8d91ed6261e7b378692458bd46e3b9e3b55f4bb3",
        "md5": "18459ef8d94f1c153e095093881ce14a",
        "sha256": "842dddc12dbda53f3365b8654ae5471ddb7bb66453d7171481fad7e70f65e695"
      },
      "downloads": -1,
      "filename": "rapid_dev_storage-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18459ef8d94f1c153e095093881ce14a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9487,
      "upload_time": "2020-05-06T09:10:48",
      "upload_time_iso_8601": "2020-05-06T09:10:48.659448Z",
      "url": "https://files.pythonhosted.org/packages/af/7b/949fd768df257c46314c8d91ed6261e7b378692458bd46e3b9e3b55f4bb3/rapid_dev_storage-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}