{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: System :: Archiving :: Backup"
    ],
    "description": "# Coco to Custom Vision (in Azure)\n\n[![Build](https://github.com/rndazurescript/Coco2CustomVision/actions/workflows/ci.yml/badge.svg)](https://github.com/rndazurescript/Coco2CustomVision/actions/workflows/ci.yml)\n[![GitHub release](https://img.shields.io/github/release/rndazurescript/Coco2CustomVision/all.svg)](https://github.com/rndazurescript/Coco2CustomVision/releases)\n\nA simple utility to upload a [COCO dataset](https://cocodataset.org/) format to custom vision and vice versa. This can be used to backup your custom vision object detection projects into a storage account and restore it later or use AzureML to create a more custom CV model.\n\nCurrently the scripts work with Object Detection but can be easily updated to work with Classification.\n\n## Installation\n\nInstall from pip:\n\n```bash\npip install coco2customvision\n```\n\n## Usage\n\nTo export a custom vision project to an Azure storage account use the following:\n\n```bash\ncoco2customvision export -sk \"<storage_account_key>\" -sn <storage_account_name> -sc <storage_account_container_name> -cvk <custom_vision_key> -cve <custom_vision_endpoint> -cvp <custom_vision_project_name> coco_dataset_filename.json\n```\n\nTo import a coco dataset that is located in an Azure storage account container into a custom vision project (the project may not exist yet):\n\n```bash\ncoco2customvision import -sk \"<storage_account_key>\" -sn <storage_account_name> -sc <storage_account_container_name> -cvk <custom_vision_key> -cve <custom_vision_endpoint> -cvp <custom_vision_project_name> coco_dataset_filename.json\n```\n\nYou can get the parameters from:\n\n- [Custom vision](https://www.customvision.ai/projects#/settings): custom_vision_key, custom_vision_endpoint, custom_vision_project_name\n- [Azure portal](https://portal.azure.com/): storage_account_key, storage_account_name, storage_account_container_name\n\n## Code development\n\nIf you want to contribute to this code base, clone the repo and follow these instructions.\n\n### Development installation\n\nInstall module in [editable/develop mode](https://pip.pypa.io/en/stable/cli/pip_install/#install-editable) (`-e`) and include the development dependencies (the `[dev]` argument you see) using the following:\n\n```bash\npip install -e .[dev]\n```\n\nFor tests to complete, you need to configure some secrets. These secrets are retrieved from environment variables. To avoid adding these environment variables in your system, you need to create a `pytest.ini` file based on the `pytest.ini.template` template and fill in all needed values. Use the following links to retrieve the corresponding settings:\n\n- [Custom vision](https://www.customvision.ai/projects#/settings)\n- [Azure storage account](https://portal.azure.com/).\n\n> The `pytest.ini` file is in `.gitignore` to avoid pushing credentials accidentally.\n\nTo run all tests:\n\n```bash\npython -m pytest . -c pytest.ini\n```\n\nor use the [VSCode Test Explorer](https://code.visualstudio.com/docs/python/testing) to even debug your code.\n\n### [Optional] Invoking the dev code from command line\n\nIf you installed the module in develop mode you can use it directly as seen in the instructions above. You can also use the module reference, as seen bellow.\n\nTo export a custom vision project to an Azure storage account use the following:\n\n```bash\npython -m src.coco2customvision export -sk \"<storage_account_key>\" -sn <storage_account_name> -sc <storage_account_container_name> -cvk <custom_vision_key> -cve <custom_vision_endpoint> -cvp <custom_vision_project_name> coco_dataset_filename.json\n```\n\nTo import a coco dataset that is located in an Azure storage account container into a custom vision project (the project may not exist yet):\n\n```bash\npython -m src.coco2customvision import -sk \"<storage_account_key>\" -sn <storage_account_name> -sc <storage_account_container_name> -cvk <custom_vision_key> -cve <custom_vision_endpoint> -cvp <custom_vision_project_name> coco_dataset_filename.json\n```\n\n### Code quality practices\n\nBefore making any commit you can invoke the `pre-commit.bat` file which does the following:\n\n- Format the code using `black`:\n\n  ```bash\n  python -m black . \n  ```\n\n- Ensure that there is no `flake8` error:\n\n  ```bash\n  python -m flake8 .\n  ```\n\n- Ensure all test pass:\n\n  ```bash\n  python -m pytest . -c pytest.ini\n  ```\n\n- Ensure `setup.cfg` file is [consistently formatted](https://github.com/asottile/setup-cfg-fmt):\n\n  ```bash\n  setup-cfg-fmt setup.cfg\n  ```\n\n### Publishing to pypi\n\nTo create a release you need to create an annotated tag:\n\n```bash\ngit tag -a v0.1.0 -m \"First version of the tool\"\n```\n\nYou can view existing tags and their comments (`-n`) using:\n\n```bash\ngit tag -n\n```\n\nRun a build to create the corresponding version artifacts under the `dist` folder. Then push them to `testpypi` to verify:\n\n```bash\npip install --upgrade twine\ntwine upload --repository testpypi dist/*\n```\n\nVerify results in the [test Pypi](https://test.pypi.org/project/coco2customvision/) instance. You can try installing in a new python environment using:\n\n```bash\npip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple coco2customvision\n```\n\nIf you decide to make some more changes, you can delete a tag using the following:\n\n```bash\ngit tag -d v0.1.0\n```\n\n> Note: You will not be able to push the same version to the test Pypi instance. As a work around you can increase the prerelease 4th digit e.g. 0.1.0.1.\n\nWhen you are ready push changes to remote and let github actions publish the package to the production Pypi. Just push the tag to GitHub and the CD action will create the release:\n\n```bash\ngit push origin --tags\n```\n\n> Note that currently the CD process is kicked when you push the tag and it doesn't do the CI part. So make sure your code is passing the CI part before tagging and pushing the tag to GitHub.\n\n## References\n\nHere is a list of related projects and references to this effort:\n\n- [Custom vision blob connector](https://github.com/drcrook1/Azure_CustomVision_Blob_Connector) python tool to upload images to custom vision from blob storage.\n- [CustomVision.COCO](https://github.com/vladkol/CustomVision.COCO) C# tool to train models using a COCO definition file.\n- [VoTT2COCO](https://github.com/UAVVaste/VoTT2COCO) converts [VoTT](https://github.com/microsoft/VoTT) json files to COCO format.\n- [Azure cognitive services python SDK](https://docs.microsoft.com/samples/azure-samples/cognitive-services-python-sdk-samples/cognitive-services-python-sdk-samples/)\n- [Custom vision SDK](https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-customvision/)\n- [Description of the COCO format](https://www.immersivelimit.com/tutorials/create-coco-annotations-from-scratch)\n\nList of Python related references:\n\n- [Writing python in VSCode](https://code.visualstudio.com/docs/python/python-tutorial)\n- [Fixtures in pytest](https://docs.pytest.org/en/latest/how-to/fixtures.html)\n- [Click arguments parser](https://click.palletsprojects.com/)\n- [Packaging projects](https://packaging.python.org/tutorials/packaging-projects/)\n- [Dependency management](https://setuptools.readthedocs.io/en/latest/userguide/dependency_management.html)\n- [Docs authoring pack](https://marketplace.visualstudio.com/items?itemName=docsmsft.docs-authoring-pack), highly recommended collection of VSCode plugins.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rndazurescript/Coco2CustomVision",
    "keywords": "custom-vision,coco,blob-storage,backup,azure",
    "license": "MIT",
    "maintainer": "RnD Azure Script",
    "maintainer_email": "rndazurescript@users.noreply.github.com",
    "name": "coco2customvision",
    "package_url": "https://pypi.org/project/coco2customvision/",
    "platform": "any",
    "project_url": "https://pypi.org/project/coco2customvision/",
    "project_urls": {
      "Homepage": "https://github.com/rndazurescript/Coco2CustomVision"
    },
    "release_url": "https://pypi.org/project/coco2customvision/0.0.1/",
    "requires_dist": [
      "azure-cognitiveservices-vision-customvision (>=3)",
      "azure.storage.blob (>=12)",
      "click (>=8)",
      "tqdm (>=4)",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-env ; extra == 'dev'",
      "setup-cfg-fmt ; extra == 'dev'",
      "setuptools-scm ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Tool to backup custom vision projects to COCO files and vise versa",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10559471,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3976d08e4b646a99a4e06fd072716b6ac3ad73715c831bba8c6041fc035274a4",
          "md5": "f384948f7a21ef742102fe08aa123dbe",
          "sha256": "f359a98c064b5b3d057654a8132f7297df632abee27dbf949f05db7ca65f9449"
        },
        "downloads": -1,
        "filename": "coco2customvision-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f384948f7a21ef742102fe08aa123dbe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13980,
        "upload_time": "2021-06-04T16:03:26",
        "upload_time_iso_8601": "2021-06-04T16:03:26.156468Z",
        "url": "https://files.pythonhosted.org/packages/39/76/d08e4b646a99a4e06fd072716b6ac3ad73715c831bba8c6041fc035274a4/coco2customvision-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25a7a668655d0915365d8ca37de85cad23fe89fd6f22ec1aa87f4785fc66b09c",
          "md5": "ac7b2186d1efb756ac987dd17ca29773",
          "sha256": "dee7f1df44de4540b47e0590b27205e58d05f5da744c9125a369bd67eac99715"
        },
        "downloads": -1,
        "filename": "coco2customvision-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac7b2186d1efb756ac987dd17ca29773",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20143,
        "upload_time": "2021-06-04T16:03:27",
        "upload_time_iso_8601": "2021-06-04T16:03:27.508395Z",
        "url": "https://files.pythonhosted.org/packages/25/a7/a668655d0915365d8ca37de85cad23fe89fd6f22ec1aa87f4785fc66b09c/coco2customvision-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3976d08e4b646a99a4e06fd072716b6ac3ad73715c831bba8c6041fc035274a4",
        "md5": "f384948f7a21ef742102fe08aa123dbe",
        "sha256": "f359a98c064b5b3d057654a8132f7297df632abee27dbf949f05db7ca65f9449"
      },
      "downloads": -1,
      "filename": "coco2customvision-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f384948f7a21ef742102fe08aa123dbe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13980,
      "upload_time": "2021-06-04T16:03:26",
      "upload_time_iso_8601": "2021-06-04T16:03:26.156468Z",
      "url": "https://files.pythonhosted.org/packages/39/76/d08e4b646a99a4e06fd072716b6ac3ad73715c831bba8c6041fc035274a4/coco2customvision-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25a7a668655d0915365d8ca37de85cad23fe89fd6f22ec1aa87f4785fc66b09c",
        "md5": "ac7b2186d1efb756ac987dd17ca29773",
        "sha256": "dee7f1df44de4540b47e0590b27205e58d05f5da744c9125a369bd67eac99715"
      },
      "downloads": -1,
      "filename": "coco2customvision-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ac7b2186d1efb756ac987dd17ca29773",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20143,
      "upload_time": "2021-06-04T16:03:27",
      "upload_time_iso_8601": "2021-06-04T16:03:27.508395Z",
      "url": "https://files.pythonhosted.org/packages/25/a7/a668655d0915365d8ca37de85cad23fe89fd6f22ec1aa87f4785fc66b09c/coco2customvision-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}