{
  "info": {
    "author": "Andrew Blair Schenck",
    "author_email": "aschenck@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==============\n``anyencoder``\n==============\nHere's a little library that makes it easy to perform dynamic dispatch\nfor multiple object serializers.\n\n.. image:: https://api.travis-ci.org/andrewschenck/py-anyencoder.svg?branch=master\n   :target: https://www.github.com/andrewschenck/py-anyencoder\n\n\n--------\nOverview\n--------\n\nFeatures\n--------\n* Developed on Python 3.7 (and requires 3.7+, sorry not sorry.)\n* Tested-ish with ~90% code coverage.\n* You can create as many custom encoders as you want (as long as the\n  number of encoders you want is 128 or less.)\n* Types are associated with encoders via a registry or object\n  attribute inspection.\n\n\nGetting Started\n---------------\n\nInstall the package:\n\n.. code-block::\n\n    pip install anyencoder\n\nEncode a list:\n\n.. code-block:: python\n\n    >>> import anyencoder\n    >>> letters = ['a', 'b', 'c']\n    >>> anyencoder.encode(letters)\n    b'\\x05\\x80\\x00\\x00\\x01\\x80\\x04\\x95\\x11\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(\\x8c\\x01a\\x94\\x8c\\x01b\\x94\\x8c\\x01c\\x94e.'\n\nAbsent other parameters or method calls, the default encoder is used\n-- probably ``pickle``. I realize this isn't terribly useful. Let's dig\ndeeper.\n\n\n-----\nTypes\n-----\n\nBuiltin Types\n-------------\nInstantiate ``DynamicEncoder`` and register a ``TypeTag`` specifying that\nlist should be serialized using ``msgpack``:\n\n.. code-block:: python\n\n    >>> from anyencoder import DynamicEncoder, TypeTag\n    >>> type_tag = TypeTag(type_=list, evaluator=lambda _: 'msgpack')\n    >>> letters = ['a', 'b', 'c']\n    >>> encoder = DynamicEncoder()\n    >>> encoder.load_encoder_plugins()\n    >>> encoder.register(type_tag)\n    >>> encoder.encode(letters)\n    b'\\x05\\x83\\x00\\x00\\x01\\x93\\xa1a\\xa1b\\xa1c'\n\n\nTypes are associated with an evaluator. The evaluator is called\nagainst the object being serialized. This can be used to inspect\nthe object and choose the encoding scheme dynamically:\n\n.. code-block:: python\n\n    >>> from anyencoder import DynamicEncoder, TypeTag\n    >>> def i_care_about_keys(obj):\n    ...     \"\"\"\n    ...     If all the keys in the dictionary are strings, I want\n    ...     to store the dictionary as msgpack. Otherwise, I want to\n    ...     store it as bson. For some reason.\n    ...     \"\"\"\n    ...     if all(map(lambda x: isinstance(x, str), obj.keys())):\n    ...         return 'msgpack'\n    ...     else:\n    ...         return 'bson'\n    ...\n    >>> dict_tag = TypeTag(dict, i_care_about_keys)\n    >>> str_dict = dict(a=1, b=2, c=3)\n    >>> int_dict = {1: 'a', 2: 'b', 3: 'c'}\n    >>> encoder = DynamicEncoder()\n    >>> encoder.load_encoder_plugins()\n    >>> encoder.register(dict_tag)\n    >>> encoder.encode(str_dict)\n    b'\\x05\\x83\\x00\\x00\\x01\\x83\\xa1a\\x01\\xa1b\\x02\\xa1c\\x03'\n    >>> encoder.encode(int_dict)\n    b'\\x05\\x88\\x00\\x00\\x01 \\x00\\x00\\x00\\x021\\x00\\x02\\x00\\x00\\x00a\\x00\\x022\\x00\\x02\\x00\\x00\\x00b\\x00\\x023\\x00\\x02\\x00\\x00\\x00c\\x00\\x00'\n\n\nCustom Types\n------------\nClasses can implement a method to specify how they should be\nserialized. The method should return the name of the desired encoder:\n\n.. code-block:: python\n\n    >>> from anyencoder import DynamicEncoder\n    >>> class MyClass:\n    ...     z = False\n    ...\n    ...     def _encoder_id(self):\n    ...         if self.z:\n    ...             return 'cloudpickle'\n    ...         else:\n    ...             return 'dill'\n    >>> my_cls = MyClass()\n    ... with DynamicEncoder() as encoder:\n    ...     with_z_false = encoder.encode(my_cls)\n    ...     my_cls.z = True\n    ...     with_z_true = encoder.encode(my_cls)\n    ...\n    >>> with_z_false\n    b'\\x05\\x81\\x00\\x00\\x01\\x80\\x04\\x95\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\ndill._dill\\x94\\x8c\\x0c_create_type\\x94\\x93\\x94(h\\x00\\x8c\\n_load_type\\x94\\x93\\x94\\x8c\\tClassType\\x94\\x85\\x94R\\x94\\x8c\\x07MyClass\\x94h\\x04\\x8c\\x06object\\x94\\x85\\x94R\\x94\\x85\\x94}\\x94(\\x8c\\n__module__\\x94\\x8c\\x08__main__\\x94\\x8c\\x01z\\x94\\x89\\x8c\\x07__doc__\\x94N\\x8c\\r__slotnames__\\x94]\\x94ut\\x94R\\x94)\\x81\\x94}\\x94h\\x10\\x89sb.'\n    >>> with_z_true\n    b'\\x05\\x82\\x00\\x00\\x01\\x80\\x04\\x95\\xb8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x17cloudpickle.cloudpickle\\x94\\x8c\\x19_rehydrate_skeleton_class\\x94\\x93\\x94(\\x8c\\x08builtins\\x94\\x8c\\x04type\\x94\\x93\\x94\\x8c\\x07MyClass\\x94h\\x03\\x8c\\x06object\\x94\\x93\\x94\\x85\\x94}\\x94\\x8c\\x07__doc__\\x94Ns\\x87\\x94R\\x94}\\x94(\\x8c\\n__module__\\x94\\x8c\\x08__main__\\x94\\x8c\\x01z\\x94\\x89\\x8c\\r__slotnames__\\x94]\\x94utR)\\x81\\x94}\\x94h\\x11\\x88sb.'\n\nThis doesn't have to be a method; an attribute named ``encoder_id``\nwill also work.\n\n\nIf that sounds like too much work for you, try the ``encode_with``\ndecorator:\n\n.. code-block:: python\n\n    >>> from anyencoder import DynamicEncoder, encode_with\n    >>> @encode_with('dill')\n    ... class MyClass:\n    ...     pass\n    ...\n    ... my_cls = MyClass()\n    ... with DynamicEncoder() as encoder:\n    ...     encoded = encoder.encode(my_cls)\n    ...\n    >>> encoded\n    b'\\x05\\x81\\x00\\x00\\x01\\x80\\x04\\x95\\xb1\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\ndill._dill\\x94\\x8c\\x0c_create_type\\x94\\x93\\x94(h\\x00\\x8c\\n_load_type\\x94\\x93\\x94\\x8c\\tClassType\\x94\\x85\\x94R\\x94\\x8c\\x07MyClass\\x94h\\x04\\x8c\\x06object\\x94\\x85\\x94R\\x94\\x85\\x94}\\x94(\\x8c\\n__module__\\x94\\x8c\\x08__main__\\x94\\x8c\\x07__doc__\\x94N\\x8c\\x0b_encoder_id\\x94\\x8c\\x04dill\\x94\\x8c\\r__slotnames__\\x94]\\x94ut\\x94R\\x94)\\x81\\x94.'\n\n\n\nRather than implementing methods, classes can be registered like any\nother type:\n\n.. code-block:: python\n\n    >>> from anyencoder import DynamicEncoder, TypeTag\n    >>> def evaluate_class(obj):\n    ...     return 'cloudpickle' if obj.z else 'dill'\n    ...\n    >>> class MyClass:\n    ...     z = False\n    ...\n    >>> type_tag = TypeTag(MyClass, evaluate_class)\n    >>> my_cls = MyClass()\n    >>> encoder = DynamicEncoder()\n    >>> encoder.load_encoder_plugins()\n    >>> encoder.register(type_tag)\n    >>> encoder.encode(my_cls)\n    b'\\x05\\x81\\x00\\x00\\x01\\x80\\x04\\x95\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\ndill._dill < SNIP >\n    >>> my_cls.z = True\n    >>> encoder.encode(my_cls)\n    b'\\x05\\x82\\x00\\x00\\x01\\x80\\x04\\x95\\xb8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x17cloudpickle.cloudpickle < SNIP >\n\n\n--------\nEncoders\n--------\n\n\nBuiltin Encoders\n----------------\nSeveral pre-built encoders are included:\n\n* bson\n* bzip2\n* cloudpickle\n* dill\n* gzip\n* json\n* msgpack\n* orjson\n* pickle\n* strbyte\n* ujson\n* zlib\n\nCustom Encoders\n---------------\nCustom encoders can be defined and registered for use. To create\na custom encoder, subclass ``AbstractEncoder``:\n\n.. code-block:: python\n\n\n    >>> from anyencoder import DynamicEncoder, TypeTag, AbstractEncoder, EncoderTag\n    >>> class StrToUtf16(AbstractEncoder):\n    ...     encoder_id = 10\n    ...\n    ...     def encode(self, obj):\n    ...         return obj.encode('utf-16')\n    ...\n    ...     def decode(self, data):\n    ...         return data.decode('utf-16')\n    ...\n    >>> my_encoder = StrToUtf16()\n    >>> encoder_tag = EncoderTag('str-to-utf-16', my_encoder)\n    >>> encoder.register(encoder_tag)\n    >>> encoder.register(type_tag)\n    >>> encoder.encode('hello world')\n    b'\\x05\\n\\x00\\x00\\x01\\xff\\xfeh\\x00e\\x00l\\x00l\\x00o\\x00 \\x00w\\x00o\\x00r\\x00l\\x00d\\x00'\n\n\nNote\n****\nBy now you may have noticed that there's some extra data included\nin these outputs. More on that later.\n\nConsiderations for Custom Encoders\n**********************************\n* They must subclass ``AbstractEncoder`` and override\n  ``AbstractEncoder.encode`` and ``AbstractEncoder.decode``.\n* The ``encode`` method must return a ``str`` or ``bytes`` object.\n* Encoders must have a unique ``encoder_id``. This should be\n  an integer ``0 <= encoder_id <= 127``. If you find you need more\n  than 128 custom encoders, well, that's just crazy talk.\n* Encoders must be added to the registry and named by being\n  wrapped in a ``EncoderTag`` object.\n\n\nProxying Encoders\n-----------------\nThe ``AbstractEncoder`` class has a built-in proxy pattern which can\nbe utilized to build a proxy 'stack' of encoders in order to perform\nlogging, inspection, and multi-step object manipulation:\n\n.. code-block:: python\n\n    >>> from anyencoder import DynamicEncoder, EncoderTag, TypeTag\n    >>> from anyencoder.plugins.zlib import ZlibEncoder\n    >>> from anyencoder.plugins.strbyte import StrByteEncoder\n    >>> from anyencoder.plugins.ujson import UJsonEncoder\n    >>> zlib = ZlibEncoder()\n    >>> strbyte = StrByteEncoder(proxy_to=zlib)\n    >>> json_zlib = UJsonEncoder(encoder_id=1, proxy_to=strbyte)\n    >>> encoder_tag = EncoderTag('json-zlib', json_zlib)\n    >>> type_tag = TypeTag(dict, lambda _: 'json-zlib')\n    >>> data = dict(a=1, b=2, c=3)\n    >>> with DynamicEncoder() as encoder:\n    ...     encoder.register([encoder_tag, type_tag])\n    ...     result = encoder.encode(data)\n    ...\n    >>> result\n    b'\\x05\\x01\\x00\\x00\\x01x\\x9c\\xabVJT\\xb22\\xd4QJR\\xb22\\xd2QJV\\xb22\\xae\\x05\\x00-=\\x04\\x87'\n\n\nConsiderations for Proxying Encoders\n************************************\n* When building a proxy stack, the ``encoder_id`` is only relevant for\n  the bottom (first) encoder in the stack. The proxy stack counts as\n  a single encoder, and the first encoder in the stack needs a unique\n  ``encoder_id``. The ``encoder_id`` can be passed as an argument to\n  facilitate easily re-using existing classes in proxy stacks.\n\n* A proxy 'stack' is itself registered as a unique encoder with a\n  unique ``encoder_id``. Think of the whole stack as a single\n  encoder. As with other encoders, a proxy stack's ``encode``\n  method must return either ``bytes`` or ``str`` data. However,\n  individual encoders in the stack needn't do anything to manipulate\n  data at all, as long as the stacks's ``encode`` method provides\n  data and ``decode`` method can do something with that data.\n\n  This allows you to do other useful things with indivudal encoders\n  in the stack, such as implementing callbacks, logging, heuristics,\n  object inspection, etc...\n\n\nEncoder Plugin Loading\n----------------------\nSeveral pre-baked encoder plugins are included, and are loaded by the\n``load_encoder_plugins`` method. This method is called automatically\nwhen ``DynamicEncoder``'s context manager is invoked:\n\n.. code-block:: python\n\n    >>> from pprint import pprint\n    >>> from anyencoder import DynamicEncoder\n    >>> with DynamicEncoder() as encoder:\n    ...     types, encoders = encoder.registry.dump()\n    ...\n    >>> pprint(encoders)\n    [EncoderTag(name='bson',encoder=BSONEncoder(encode_kwargs={},decode_kwargs={},    encoder_id=136,proxy_to=None)),\n     EncoderTag(name='bzip2',encoder=Bzip2Encoder(encode_kwargs={},decode_kwargs={},    encoder_id=137,proxy_to=None)),\n     EncoderTag(name='cloudpickle',encoder=CloudPickleEncoder(encode_kwargs={},    decode_kwargs={},encoder_id=130,proxy_to=None)),\n     EncoderTag(name='dill',encoder=DillEncoder(encode_kwargs={'protocol': 4},    decode_kwargs={},encoder_id=129,proxy_to=None)),\n     EncoderTag(name='gzip',encoder=GzipEncoder(encode_kwargs={},decode_kwargs={},    encoder_id=144,proxy_to=None)),\n     EncoderTag(name='json',encoder=JSONEncoder(encode_kwargs={},decode_kwargs={},    encoder_id=133,proxy_to=None)),\n     EncoderTag(name='msgpack',encoder=MessagePackEncoder(encode_kwargs={'use_bin_type': True},decode_kwargs={'raw': False},encoder_id=131,proxy_to=None)),\n     EncoderTag(name='orjson',encoder=OrJsonEncoder(encode_kwargs={},decode_kwargs={},encoder_id=134,proxy_to=None)),\n     EncoderTag(name='pickle',encoder=PickleEncoder(encode_kwargs={'protocol': 4},decode_kwargs={},encoder_id=128,proxy_to=None)),\n     EncoderTag(name='strbyte',encoder=StrByteEncoder(encode_kwargs={},decode_kwargs={},encoder_id=132,proxy_to=None)),\n     EncoderTag(name='ujson',encoder=UJsonEncoder(encode_kwargs={},decode_kwargs={},encoder_id=135,proxy_to=None)),\n     EncoderTag(name='zlib',encoder=ZlibEncoder(encode_kwargs={},decode_kwargs={},encoder_id=145,proxy_to=None))]\n\n\nNote\n****\nSeveral of the plugins require third-party libraries in order to\nfunction.\n\n\n------------\nHow It Works\n------------\n\nLabels\n------\nAfter object encoding, ``anyencoder`` prepends a label to the data.\nAt decode time, the label is removed and read in order to determine\nhow to decode the data.\n\nFor binary data, the label is 5 bytes in length:\n``label_len|encoder_id|version_major|version_minor|version_micro``\n\nFor text data, the label is a small JSON dictionary.\n\nWarning\n*******\nBecause the data is modified to include the label, it *must* be decoded\nwith ``anyencoder`` in order to extract the label. Serializing an\nobject with ``anyencoder`` and then trying to decode the result with\nthe concrete serializer is *guaranteed* to fail.\n\n\nEncoder IDs\n-----------\nBecause ``encoder_id`` is limited to a single byte, it must be a\nvalue between ``0`` and ``255``. Values ``128`` through ``255`` are\nreserved for the library, and therefore you should choose a ``value``\nwhere ``0 <= value <= 127`` when choosing the ``encoder_id`` for a\ncustom encoder.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/andrewschenck/py-anyencoder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "anyencoder",
    "package_url": "https://pypi.org/project/anyencoder/",
    "platform": "",
    "project_url": "https://pypi.org/project/anyencoder/",
    "project_urls": {
      "Homepage": "https://www.github.com/andrewschenck/py-anyencoder"
    },
    "release_url": "https://pypi.org/project/anyencoder/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Dynamic dispatch for object serialization",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6205246,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb8c454d117b7809e710b2cb81cbd5a9404cd924378a39a2c539239e1efdc8fd",
          "md5": "1056e4d2606095d6d98b0baf99e4ac16",
          "sha256": "2707cc6149c3c12264c1d02db2c5b83ec62a5f34d895bbedf2cdce673400ce48"
        },
        "downloads": -1,
        "filename": "anyencoder-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1056e4d2606095d6d98b0baf99e4ac16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25859,
        "upload_time": "2019-11-25T14:51:02",
        "upload_time_iso_8601": "2019-11-25T14:51:02.039859Z",
        "url": "https://files.pythonhosted.org/packages/cb/8c/454d117b7809e710b2cb81cbd5a9404cd924378a39a2c539239e1efdc8fd/anyencoder-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44978f06b16df61403bd20887d5f1a7642a4c4164c689d72ace863bb376b8fa8",
          "md5": "dc89ad0ea4bf172550a11321a10ef3e6",
          "sha256": "06652a9a6d5f95be74122919e5b67ad60e24c9e170361c0c333309f016d402b2"
        },
        "downloads": -1,
        "filename": "anyencoder-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc89ad0ea4bf172550a11321a10ef3e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22023,
        "upload_time": "2019-11-25T14:51:04",
        "upload_time_iso_8601": "2019-11-25T14:51:04.558969Z",
        "url": "https://files.pythonhosted.org/packages/44/97/8f06b16df61403bd20887d5f1a7642a4c4164c689d72ace863bb376b8fa8/anyencoder-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a3e34415ae9fa08b87cb1c641051e7c516b90aff18b3d669cdd76e655c04abc",
          "md5": "5089fb76d6f671a2fe70676818f95477",
          "sha256": "1fbc5cbdf92168906d365d92c5829a9c01cac0f4890218aac26e7697ab2974e0"
        },
        "downloads": -1,
        "filename": "anyencoder-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5089fb76d6f671a2fe70676818f95477",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21758,
        "upload_time": "2019-11-25T17:24:54",
        "upload_time_iso_8601": "2019-11-25T17:24:54.472883Z",
        "url": "https://files.pythonhosted.org/packages/3a/3e/34415ae9fa08b87cb1c641051e7c516b90aff18b3d669cdd76e655c04abc/anyencoder-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59b01595eb8eef604bb7349584d15d55ff271a8b1bdf6243248099d538e31cc0",
          "md5": "628c687685bb6327819d842b942f3cf3",
          "sha256": "011353df7e08e7024c858474c8436af04c6e1b6970ccc611f0e13ed8d4343b7d"
        },
        "downloads": -1,
        "filename": "anyencoder-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "628c687685bb6327819d842b942f3cf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21806,
        "upload_time": "2019-11-27T01:05:09",
        "upload_time_iso_8601": "2019-11-27T01:05:09.217060Z",
        "url": "https://files.pythonhosted.org/packages/59/b0/1595eb8eef604bb7349584d15d55ff271a8b1bdf6243248099d538e31cc0/anyencoder-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59b01595eb8eef604bb7349584d15d55ff271a8b1bdf6243248099d538e31cc0",
        "md5": "628c687685bb6327819d842b942f3cf3",
        "sha256": "011353df7e08e7024c858474c8436af04c6e1b6970ccc611f0e13ed8d4343b7d"
      },
      "downloads": -1,
      "filename": "anyencoder-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "628c687685bb6327819d842b942f3cf3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21806,
      "upload_time": "2019-11-27T01:05:09",
      "upload_time_iso_8601": "2019-11-27T01:05:09.217060Z",
      "url": "https://files.pythonhosted.org/packages/59/b0/1595eb8eef604bb7349584d15d55ff271a8b1bdf6243248099d538e31cc0/anyencoder-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}