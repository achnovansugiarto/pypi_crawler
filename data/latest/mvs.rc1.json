{
  "info": {
    "author": "Monty Hindman",
    "author_email": "mhindman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: System :: Shells",
      "Topic :: Terminals",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "\n## mvs: Because one mv is rarely enough\n\n#### Motivation\n\nRenaming a bunch of files and directories can be tedious, error-prone work.\nCommand-line tools to perform such tasks are numerous. Perhaps the most classic\nexample was the Perl [rename][perl_rename] script, which has been available or\ninstallable on most Unix-inspired operating systems since the early 1990s.\n\nThe core idea of `rename` was excellent. The user supplied a snippet of Perl\ncode as a command-line argument, followed by the original paths. Each original\npath was pumped through the code snippet to generate the corresponding new\npath. Because Perl was designed to make it easy to manipulate strings with very\nlittle code, users could efficiently rename paths directly on the command line.\nEven if you hardly knew Perl but at least understood how to operate its compact\nregular-expression substitution syntax, you could become quite adept at bulk\npath renaming.\n\n```bash\n$ rename 's/foo/bar/' *\n```\n\nUnfortunately, the script was a chainsaw â€“ undeniably useful, but able to\ninflict devastation after a single false move. As a result, I rarely used\n`rename` directly for my bulk renaming needs, which were extensive on several\nprojects I worked on. Instead, I wrote my own Perl script to the job. Its\noperation was roughly the same, but it included precautions to help me avoid\ndisastrous mistakes. The most important were checking that the new paths did\nnot collide with existing paths on the file system and including an inspection\nand confirmation step by default.\n\nThe `mvs` library is an updated and enhanced version of those ideas, but\nimplemented in a language I use regularly (Python) rather than one in which\nI have become rusty (Perl).\n\n#### The mvs executable\n\nThe primary use case envisioned for the library is its executable. In broad\nterms, there are two ways to perform bulk renaming with the `mvs` command: (1)\nthe user provides original file paths and a snippet of Python code to perform\nthe original-to-new computation, or (2) the user provides both original paths\nand new paths directly.\n\nEither way, before any renaming occurs, the following checks occur: are the\noriginal paths different than their corresponding new paths; do all of the\noriginal paths exist; do any new paths already exist; do any new paths collide\nwith each other; and are the parent directories of any new paths missing? If\nthose checks look alright, the proposed renamings are listed for inspection by\nthe user, and renaming occurs only after confirmation.\n\nThe script provides command-line options to customize its behavior:\n\n- Supply input paths in various ways: positional arguments, STDIN, a text data\n  file, or the clipboard.\n\n- Specify the structure of the input paths data: a flat sequence, two\n  blank-delimited paragraphs, alternating pairs of lines, or delimited rows.\n\n- Use a snippet of Python code to filter out original paths before renaming,\n  which can be handy if you want to supply paths via a command-line glob\n  pattern but do not want to rename all of them.\n\n- Specify in advance how the program should respond to the validation problems\n  listed above: skip the item with the problem, rename in spite of the problem\n  (even it that means overwriting other paths), or take remedial action (create\n  a missing parent).\n\n- Customize the start and skip values for a sequence number that can be used in\n  the renaming code snippet.\n\n- Request dryrun mode, which executes the filtering, checking, and listing\n  behavior but does not rename anything.\n\n#### Installation and examples\n\nInstall the library in the usual way.\n\n```bash\n$ pip install mvs\n```\n\nGet help and additional details regarding the options summarized above.\n\n```bash\n$ mvs --help\n$ mvs --details\n```\n\nIn general terms, the executable has the following usage. Note that the default\nstructure is flat and that the `--rename` option is considered structural\nbecause it implies that the input path data consists solely of original paths.\n\n```text\nmvs SOURCE [STRUCTURE] [OTHER]\n\nPATHS     : positionals\nSOURCE    : PATHS | --stdin | --file PATH | --clipboard\nSTRUCTURE : --flat | --paragraphs | --pairs | --rows | --rename CODE\nOTHER     : other options\n```\n\nThe different input structures can be illustrated with a simple renaming\nscenario that adds a file extension to the original paths. Note that if the\npaths were supplied via a source other than positional arguments, each path\nshould be on its own line.\n\n```bash\n# The default: a flat sequence of paths.\n$ mvs a b a.new b.new\n$ mvs a b a.new b.new --flat\n\n# Alternating pairs: old, new, etc.\n$ mvs a a.new b b.new --pairs\n\n# Paragraphs delimited by at least one blank.\n$ mvs a b '' a.new b.new --paragraphs\n```\n\nThe same renaming scenario could also be performed via a code snippet. The\nsnippet will be compiled into a function that receives the original path as the\nlocal variable `o`. See the program's help text for additional details about\nuser-supplied code.\n\n```bash\n$ mvs a b --rename 'return r\"{o}.new\"'\n```\n\n#### Programmatic usage\n\nThe mvs package also supports bulk renaming via a programmatic API. The first\nstep is to configure a `RenamingPlan`. Initialization parameters and their\ndefaults are as follows.\n\n```python\nfrom mvs import RenamingPlan\n\nplan = RenamingPlan(\n    # Sequence of paths and their structure.\n    inputs,\n    structure = 'flat',\n\n    # User-supplied renaming and filtering code (str or callable).\n    # See mvs --details for additional information.\n    rename_code = None,\n    filter_code = None,\n\n    # Other parameters related to user-supplied code.\n    indent = 4,\n    seq_start = 1,\n    seq_step = 1,\n\n    # Problem controls. For each control mechanism, supply the\n    # names of the problems to be controlled via the mechanism,\n    # either as a sequence or space-delimited str.\n    # See mvs --details for the problem names.\n    skip = None,\n    clobber = None,\n    create = None,\n)\n\nplan.rename_paths()\n```\n\nIf you do not want to rename paths immediately but do want to prepare\neverything for renaming, including performing the checks for problems, you can\nuse the library in a more deliberative fashion: first prepare; then check the\ninformation provided by the plan; if desired, proceed with renaming; and in the\nevent of unexpected failure, get information about which item led to the\nexception.\n\n```python\n# The library's supported imports.\nfrom mvs import RenamingPlan, MvsError, __version__\n\n# Configure plan.\nplan = RenamingPlan(...)\n\n# Prepare for renaming.\nplan.prepare()\n\n# All relevant information about the plan and its original-new path pairs.\nprint(plan.as_dict)\n\n# Whether preparation failed due to problems and what they are.\nprint(plan.failed)\nprint(plan.uncontrolled_problems)\n\n# Try to rename.\ntry:\n    plan.rename_paths()\nexcept Exception as e:\n    # The index of the original-new pair that was being renamed\n    # when the exception occurred. Pairs before that index were\n    # renamed succesfully; pairs after it were not attempted.\n    print(plan.tracking_index)\n\n    # The offending original-new pair.\n    print(plan.tracking_rp)\n```\n\n--------\n\n[perl_rename]: https://metacpan.org/dist/File-Rename/view/source/rename\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hindman/mvs",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mvs",
    "package_url": "https://pypi.org/project/mvs/",
    "platform": null,
    "project_url": "https://pypi.org/project/mvs/",
    "project_urls": {
      "Homepage": "https://github.com/hindman/mvs"
    },
    "release_url": "https://pypi.org/project/mvs/1.0.0/",
    "requires_dist": [
      "kwexception",
      "pyperclip",
      "short-con",
      "invoke ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "pycodestyle ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "virtualenv ; extra == 'dev'",
      "virtualenvwrapper ; extra == 'dev'",
      "pytest-cov ; extra == 'test'",
      "tox ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Because one mv is rarely enough",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16756213,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29268fdaf6d90f107d0ea46191ca01bc981398b34d5a0ebadf0e1a34b5d6e18a",
          "md5": "c234573ced67d3e1deaa1b256dbec1b8",
          "sha256": "c1211f7c07e7230105c1de7e91a8da7fe20b2fad5be3a9120ebd953275436745"
        },
        "downloads": -1,
        "filename": "mvs-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c234573ced67d3e1deaa1b256dbec1b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21775,
        "upload_time": "2023-02-08T20:22:58",
        "upload_time_iso_8601": "2023-02-08T20:22:58.210813Z",
        "url": "https://files.pythonhosted.org/packages/29/26/8fdaf6d90f107d0ea46191ca01bc981398b34d5a0ebadf0e1a34b5d6e18a/mvs-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a2fbb403adc96ac25ab09ea31d38cebe76af41a0839bad1f39fa8bae6d25834",
          "md5": "487b89a58b115ae4e73e88cd965a35f7",
          "sha256": "352c3d086545a826480d2a68422ba1ab6ae55fc647db096acf67b57984189b2b"
        },
        "downloads": -1,
        "filename": "mvs-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "487b89a58b115ae4e73e88cd965a35f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23182,
        "upload_time": "2023-02-08T20:22:59",
        "upload_time_iso_8601": "2023-02-08T20:22:59.764041Z",
        "url": "https://files.pythonhosted.org/packages/7a/2f/bb403adc96ac25ab09ea31d38cebe76af41a0839bad1f39fa8bae6d25834/mvs-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29268fdaf6d90f107d0ea46191ca01bc981398b34d5a0ebadf0e1a34b5d6e18a",
        "md5": "c234573ced67d3e1deaa1b256dbec1b8",
        "sha256": "c1211f7c07e7230105c1de7e91a8da7fe20b2fad5be3a9120ebd953275436745"
      },
      "downloads": -1,
      "filename": "mvs-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c234573ced67d3e1deaa1b256dbec1b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21775,
      "upload_time": "2023-02-08T20:22:58",
      "upload_time_iso_8601": "2023-02-08T20:22:58.210813Z",
      "url": "https://files.pythonhosted.org/packages/29/26/8fdaf6d90f107d0ea46191ca01bc981398b34d5a0ebadf0e1a34b5d6e18a/mvs-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a2fbb403adc96ac25ab09ea31d38cebe76af41a0839bad1f39fa8bae6d25834",
        "md5": "487b89a58b115ae4e73e88cd965a35f7",
        "sha256": "352c3d086545a826480d2a68422ba1ab6ae55fc647db096acf67b57984189b2b"
      },
      "downloads": -1,
      "filename": "mvs-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "487b89a58b115ae4e73e88cd965a35f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23182,
      "upload_time": "2023-02-08T20:22:59",
      "upload_time_iso_8601": "2023-02-08T20:22:59.764041Z",
      "url": "https://files.pythonhosted.org/packages/7a/2f/bb403adc96ac25ab09ea31d38cebe76af41a0839bad1f39fa8bae6d25834/mvs-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}