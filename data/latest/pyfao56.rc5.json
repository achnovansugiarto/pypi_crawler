{
  "info": {
    "author": "Dr. Kelly R. Thorp",
    "author_email": "kelly.thorp@usda.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyfao56\nA Python implementation of the FAO-56 dual crop coefficient approach for crop water use estimation and irrigation scheduling\n\nThe pyfao56 Python package facilitates FAO-56 computations of daily soil water balance using the dual crop coefficient method to estimate crop evapotranspiration (ET).\n\nThe FAO-56 method is described in the following documentation:\n[Allen, R. G., Pereira, L. S., Raes, D., Smith, M., 1998.  FAO Irrigation and Drainage Paper No. 56. Crop Evapotranspiration: Guidelines for Computing Crop Water Requirements. Food and Agriculture Organization of the United Nations, Rome Italy.](http://www.fao.org/3/x0490e/x0490e00.htm)\n\nReference ET is computed using the ASCE Standardized Reference ET Equation, which is described in the following documentation:\n[ASCE Task Committee on Standardization of Reference Evapotranspiration (Walter, I. A., Allen, R. G., Elliott, R., Itenfisu, D., Brown, P., Jensen, M. E.,Mecham, B., Howell, T. A., Snyder, R., Eching, S., Spofford, T., Hattendorf, M., Martin, D., Cuenca, R. H., Wright, J. L.), 2005. The ASCE Standardized Reference Evapotranspiration Equation. American Society of Civil Engineers, Reston, VA.](https://ascelibrary.org/doi/book/10.1061/9780784408056)\n\n## Source Code\nThe main pyfao56 package contains the following modules:\n* irrigation.py - I/O tools to define irrigation management schedules\n* model.py - Equations for daily soil water balance computations\n* parameters.py - I/O tools for required input parameters\n* refet.py - Equations for computing ASCE Standardized Reference ET\n* soil_profile.py - I/O tools to define stratified soil layer properties\n* update.py - I/O tools and methods for state variable updating\n* weather.py - I/O tools for required weather information\n\nThe source code is available [here](http://github.com/kthorp/pyfao56/). It uses a basic object-oriented design with separate classes to make FAO-56 calculations and to manage parameter, weather, irrigation management, and soil profile data. [Pandas](https://pandas.pydata.org/) data frames are used for data storage and management. Further documentation of the class structure is contained in the source files.\n\nThe pyfao56 package contains a subpackage called [custom](https://github.com/kthorp/pyfao56/tree/main/src/pyfao56/custom). Here, users can add customized scripts to improve their personal pyfao56 workflows. For example, the [custom](https://github.com/kthorp/pyfao56/tree/main/src/pyfao56/custom) subpackage contains modules for development of customized weather files using data from the Arizona Meteorological Network ([AZMET](https://ag.arizona.edu/azmet/)) station at Maricopa, Arizona and from the National Digital Forecast Database ([NDFD](https://graphical.weather.gov/xml/rest.php)). These modules were developed to facilitate irrigation management for field studies conducted at the Maricopa Agricultural Center. Users can follow this example to create customized weather tools for other weather data sources. Additionally, the [custom](https://github.com/kthorp/pyfao56/tree/main/src/pyfao56/custom) subpackage contains a module for customizing the creation of soil files using ordered lists of soil water holding limits and initial soil water content data.\n\n## Install\n`pip install pyfao56`\n\n## Quickstart\n\n### Import the package\n`import pyfao56 as fao`\n\n### Specify the model parameters\n* Instantiate a Parameters class: `par = fao.Parameters()`\n* To print parameter values: `print(par)`\n* To adjust parameter values: `par.Kcbmid = 1.225`\n* To load values from a file: `par.loadfile('myfilename.par')`\n* To write values to a file: `par.savefile('myfilename.par')`\n\nAn example of the parameter file format is [here](https://github.com/kthorp/pyfao56/tree/main/tests/test1/cotton2013.par).\n\n### Specify the weather information\n* Instantiate a Weather data class: `wth = fao.Weather()`\n* To print weather data: `print(wth)`\n* To load data from a file: `wth.loadfile('myfilename.wth')`\n* To write data to a file: `wth.savefile('myfilename.wth')`\n* To compute daily reference ET for yyyy-ddd (4-digit year and day of year): `refet = wth.compute_etref('2021-150')`\n\nAn example of the weather file format is [here](https://github.com/kthorp/pyfao56/tree/main/tests/test1/cotton2013.wth).\n\nUsers can customize loading of weather data with wth.customload(). The azmet_maricopa.py module in the [custom](https://github.com/kthorp/pyfao56/tree/main/src/pyfao56/custom) subpackage provides an example for developing a custom weather data class that inherits from Weather and overrides its customload() function.\n\n### Specify the irrigation management information\n* Instantiate an Irrigation data class: `irr = fao.Irrigation()`\n* To print irrigation data: `print(irr)`\n* To load data from a file: `irr.loadfile('myfilename.irr')`\n* To write data to a file: `irr.savefile('myfilename.irr')`\n* To add an irrigation event (provide yyyy, ddd, depth in mm, and fw): `irr.addevent(2019, 249, 28.3, 1.00)`\n\nAn example of the irrigation file format is [here](https://github.com/kthorp/pyfao56/tree/main/tests/test1/cottondry2013.irr).\n\n### Run the daily soil water balance model\n* Instantiate a Model class (provide starting yyyy-ddd, ending yyyy-ddd, and classes for Parameters, Weather, and Irrigation): `mdl = fao.Model('2013-113','2013-312', par, wth, irr)`\n* To run the model: `mdl.run()`\n* To print the output: `print(mdl)`\n* To save the output to file: `mdl.savefile('myoutputfile.out')`\n\nAn example of the model output file is [here](https://github.com/kthorp/pyfao56/tree/main/tests/test1/cottondry2013.out).\n\n### Specify a layered soil profile (optional)\n* Instantiate a SoilProfile class: `sol = fao.SoilProfile()`\n* To load data from a file: `sol.loadfile('myfilename.sol')`\n* To write data to a file: `sol.savefile('myfilename.sol')`\n* Instantiate a Model class with stratified soil layer data (provide starting yyyy-ddd, ending yyyy-ddd, and classes for Parameters, Weather, Irrigation, and SoilProfile): `mdl = fao.Model('2019-108','2019-274', par, wth, irr, sol=sol)`\n* To run the model: `mdl.run()`\n\nAn example of the soil file format is [here](https://github.com/kthorp/pyfao56/tree/main/tests/test5/E12FF2022.sol).\n\nUsers can customize loading of soil profile data with sol.customload(). The example_soil.py module in the custom subpackage provides an example for developing a custom soil data class that inherits from SoilProfile and overrides its customload() function.\n\n### Update basal crop coefficients (Kcb), crop height (h), or crop cover (fc) (optional)\n* Instantiate an Update class: `upd = fao.Update()`\n* To load data from a file: `upd.loadfile('myfilename.upd')`\n* To write data to a file: `upd.savefile('myfilename.upd')`\n* Instantiate a model class with updating (provide starting yyyy-ddd, ending yyyy-ddd, and classes for Parameters, Weather, Irrigation, and Updates): `mdl = fao.Model('2019-108','2019-274', par, wth, irr, upd=upd)`\n* To run the model: `mdl.run()`\n\nAn example of the update file format is [here](https://github.com/kthorp/pyfao56/tree/main/tests/test3/cotton2019.upd).\n\n## Further examples\nFurther example scripts for setting up and running the model are [here](https://github.com/kthorp/pyfao56/tree/main/tests).\n\n[test1](https://github.com/kthorp/pyfao56/tree/main/tests/test1) - The cottondry2013.py  and cottonwet2013.py modules contain code to setup and run pyfao56 for the water-limited and well-watered treatments for a 2013 cotton field study at Maricopa, Arizona.\n\n[test2](https://github.com/kthorp/pyfao56/tree/main/tests/test2) - The refet_testA.py module contains a function to compare the short crop reference evapotranspiration (ETo) calculation from the pyfao56 refet.py module with ETo reported by the [AZMET](https://ag.arizona.edu/azmet/) station at Maricopa, Arizona for 2003 through 2020. The refet_testB.py module contains a function to compare the daily short crop reference evapotranspiration (ETo) and daily tall crop reference evapotranspiration (ETr) calculations from the pyfao56 refet.py module with ETo and ETr computed by [Ref-ET software](https://www.uidaho.edu/cals/kimberly-research-and-extension-center/research/water-resources/ref-et-software) based on weather data from the [AZMET](https://ag.arizona.edu/azmet/) station at Maricopa, Arizona for 2003 through 2020. The refet_testC.py module contains a function to compare the hourly ETo and hourly ETr from the pyfao56 refet.py module with ETo and ETr computed by [Ref-ET software](https://www.uidaho.edu/cals/kimberly-research-and-extension-center/research/water-resources/ref-et-software) based on weather data from the [AZMET](https://ag.arizona.edu/azmet/) station at Maricopa, Arizona for 2003 through 2020.\n\n[test3](https://github.com/kthorp/pyfao56/tree/main/tests/test3) - The updateKcb.py module contains a function to setup and run pyfao56 with basal crop coefficient (Kcb) updates for Zone 12-11 in a 2019 cotton field study at Maricopa, Arizona. The Kcb was estimated from fractional cover measurements based on weekly imagery from a small unoccupied aircraft system (sUAS).\n\n[test4](https://github.com/kthorp/pyfao56/tree/main/tests/test4) - The cotton2018.py module contains code to setup and run pyfao56 for water-limited and well-watered treatments for a 2018 cotton field study at Maricopa, Arizona.\n\n[test5](https://github.com/kthorp/pyfao56/tree/main/tests/test5) - The cornE12FF2022.py module contains code to setup and run several pyfao56 scenarios (including instances that use the SoilProfile class, the Update class, and both together) for a full-irrigation treatment in a 2022 maize study in Greeley, Colorado.\n\n## Detailed Startup Information\n### Core Functionality\nThe core pyfao56 model is designed to follow the [FAO-56](http://www.fao.org/3/x0490e/x0490e00.htm) methodology in the strictest and purest sense. To implement the model, users must first populate three pyfao56 classes with appropriate data: Parameters, Weather, and Irrigation. Together, these three classes represent the minimum data inputs that users must provide to conduct a simulation.\n\nAfter these three classes are created and populated, users must then instantiate a Model class by providing the simulation starting date ('yyyy-ddd'), simulation ending date ('yyyy-ddd'), and the instances of the Parameters, Weather, and Irrigation classes. Users can then run the daily soil water balance model by calling the \"run()\" method of the Model class.\n\nEach pyfao56 simulation is intended to model a single realization of the crop system (i.e., a single treatment, plot, sub-plot, or other homogenous area). Users can iterate simulations among different model realizations by instantiating multiple pyfao56 classes of a particular type (i.e., Parameters, Irrigation, SoilProfile, Model, etc.) and conducting iterative simulations with different input class combinations. The [test scripts](https://github.com/kthorp/pyfao56/tree/main/tests) provide simple examples of this, while more complex applications are possible.\n\n### Optional Functionality\nThe pyfao56 package also provides optional functionality that is intended to enhance the implementation of FAO-56 methodology. While the following enhancements may be beneficial for some users, their methodologies are not specifically described in FAO-56.\n\n* #### SoilProfile Class\nThe SoilProfile class enables input of stratified soil layer information to the model. If available, layered soil profile data should improve the estimates of total available water (TAW) and soil water depletion (Dr) in pyfao56. When including a SoilProfile class in the simulation, the model ignores the thetaFC, thetaWP, and theta0 inputs provided in the Parameters class. Because standard FAO-56 methodology considers only a single, homogenous soil layer, the SoilProfile class can enhance the representation of the soil profile when layered soil profile information is available.\n\n* #### Update Class\nThe Update class enables users to update key state variables during the model simulation. At this time, the following variables can be updated: basal crop coefficients (Kcb), crop height (h), and crop cover (fc). When the pyfao56 Update class is populated and provided as an input to the Model class, pyfao56 overwrites model state variables with the data provided in the Update class.\n\n* #### Constant Depletion Fraction\nThe pyfao56 Model class provides an argument to optionally set the TAW depletion fraction (p) to a constant value. FAO-56 specifies a methodology for varying the depletion fraction based on daily crop evapotranspiration (ETc) (see [FAO-56 page 162 and Table 22](https://www.fao.org/3/x0490e/x0490e0e.htm#readily%20available%20water%20(raw))). However, FAO-56 also discusses using constant values for depletion fraction (see [FAO-56 page 162](https://www.fao.org/3/x0490e/x0490e0e.htm#readily%20available%20water%20(raw)) and [Annex 8](https://www.fao.org/3/x0490e/x0490e0p.htm#annex%208.%20calculation%20example%20for%20applying%20the%20dual%20kc%20procedure%20in%20irrigation%20sc)). Annex 8 of FAO-56 suggests setting a constant depletion fraction equal to the management allowed depletion (MAD). Using a constant depletion fraction makes readily available water (RAW) vary only with rooting depth (Zr). Users can run the model with a constant depletion fraction by issuing `cons_p=True` at Model instantiation: `mdl = fao.Model('2019-108', '2019-274', par, wth, irr, cons_p=True)`. By default, the model is instantiated with `cons_p=False`, which leads to depletion fraction adjustments with ETc.\n\n## Further information\nThe pyfao56 package is further described in the following article:\n\nThorp, K. R., pyfao56: FAO-56 evapotranspiration in Python. SoftwareX 19, 101208. [doi:10.1016/softx.2022.101208](https://doi.org/10.1016/j.softx.2022.101208).\n\n\nAlso, the pyfao56 package was used to conduct the following research:\n\nThorp, K. R., Calleja, S., Pauli, D., Thompson, A. L., Elshikha, D. E., 2022. Agronomic outcomes of precision irrigation technologies with varying complexity. Journal of the ASABE. 65(1):135-150. [doi:10.13031/ja.14950](https://doi.org/10.13031/ja.14950)\n\nThorp, K. R., Thompson, A. L., Harders, S. J., French, A. N., Ward, R. W., 2018. High-throughput phenotyping of crop water use efficiency via multispectral drone imagery and a daily soil water balance model. Remote Sensing 10, 1682. [doi:10.3390/rs10111682](https://doi.org/10.3390/rs10111682)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/kthorp/pyfao56",
    "keywords": "",
    "license": "Public Domain",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfao56",
    "package_url": "https://pypi.org/project/pyfao56/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyfao56/",
    "project_urls": {
      "Bug Tracker": "http://github.com/kthorp/pyfao56/issues",
      "Homepage": "http://github.com/kthorp/pyfao56",
      "Source": "http://github.com/kthorp/pyfao56"
    },
    "release_url": "https://pypi.org/project/pyfao56/1.1.0/",
    "requires_dist": [
      "pandas",
      "numpy",
      "requests",
      "urllib3"
    ],
    "requires_python": ">=3.7",
    "summary": "FAO-56 Evapotranspiration in Python",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16092730,
  "releases": {
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f1692d53d0976ef2ed4adfe0019b4ec7c8e92daa17b57d172469bd048dc51d3",
          "md5": "5d07495d7e0a18e38ead093fca57e9cf",
          "sha256": "df2f21efadc3079c3ddc7392b8877c9eb7d5fb2befff8c67e3658a028cf5c625"
        },
        "downloads": -1,
        "filename": "pyfao56-1.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d07495d7e0a18e38ead093fca57e9cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25625,
        "upload_time": "2022-06-17T20:09:14",
        "upload_time_iso_8601": "2022-06-17T20:09:14.788888Z",
        "url": "https://files.pythonhosted.org/packages/9f/16/92d53d0976ef2ed4adfe0019b4ec7c8e92daa17b57d172469bd048dc51d3/pyfao56-1.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f4cb1be26d51c66a46e6b7418b33857a1956eab1d8d8ac59e3be785254db008",
          "md5": "5e30a57a1c91516da08d3b34c4f9afae",
          "sha256": "6c7603b30c4ac7fde3aff6a9f5d2594003e2827bb65ba5e24af026e47aee4856"
        },
        "downloads": -1,
        "filename": "pyfao56-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "5e30a57a1c91516da08d3b34c4f9afae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21735,
        "upload_time": "2022-06-17T20:09:17",
        "upload_time_iso_8601": "2022-06-17T20:09:17.896886Z",
        "url": "https://files.pythonhosted.org/packages/4f/4c/b1be26d51c66a46e6b7418b33857a1956eab1d8d8ac59e3be785254db008/pyfao56-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95d1399a56508317fdaf4bcfa1beaf5f31b86bee31ac8b9719284eaf89e610cd",
          "md5": "b1839cbe39afb03b980c7d740e07a6f3",
          "sha256": "e1adb53a82f269a4800813ab1416eff21f4d4048abef0191c1228862edc3c29a"
        },
        "downloads": -1,
        "filename": "pyfao56-1.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1839cbe39afb03b980c7d740e07a6f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26985,
        "upload_time": "2022-08-24T23:57:57",
        "upload_time_iso_8601": "2022-08-24T23:57:57.067318Z",
        "url": "https://files.pythonhosted.org/packages/95/d1/399a56508317fdaf4bcfa1beaf5f31b86bee31ac8b9719284eaf89e610cd/pyfao56-1.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8fcadc86ed6ed7d62c53fe276c1f448c49bb6b82965d1ea7f33f9028aadab2d",
          "md5": "224e7e8d31f11211caad9a690a499a96",
          "sha256": "11a0d20ea03cc2021f5a3dbdeef3f0d9a31d7e3f67e95695665dd15df525f872"
        },
        "downloads": -1,
        "filename": "pyfao56-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "224e7e8d31f11211caad9a690a499a96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23329,
        "upload_time": "2022-08-24T23:57:59",
        "upload_time_iso_8601": "2022-08-24T23:57:59.480322Z",
        "url": "https://files.pythonhosted.org/packages/c8/fc/adc86ed6ed7d62c53fe276c1f448c49bb6b82965d1ea7f33f9028aadab2d/pyfao56-1.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4efd50cc80fa745ab08e4cd2dbc081a5e4103256c6362b7d8c4fb6b4b700e1d8",
          "md5": "c3bff25c511f8a5c5455383ae6532920",
          "sha256": "f14ee89af2783a68c3af0ec73a190bdd66445f7daeac1aeacf3b5609f90d71a2"
        },
        "downloads": -1,
        "filename": "pyfao56-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3bff25c511f8a5c5455383ae6532920",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25092,
        "upload_time": "2022-01-28T00:26:12",
        "upload_time_iso_8601": "2022-01-28T00:26:12.749969Z",
        "url": "https://files.pythonhosted.org/packages/4e/fd/50cc80fa745ab08e4cd2dbc081a5e4103256c6362b7d8c4fb6b4b700e1d8/pyfao56-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ace114b2cc36eb43432c51283e280e56facd0059b123cbe8aadcec69382e8e1",
          "md5": "6f7ceaadfbfc5bbd23ed0b0e4ecab02b",
          "sha256": "e04b6ba07c34311c0ea13039abdb5f17796a78bdd5e5d0b7587f1694adbf2b16"
        },
        "downloads": -1,
        "filename": "pyfao56-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6f7ceaadfbfc5bbd23ed0b0e4ecab02b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20615,
        "upload_time": "2022-01-28T00:26:14",
        "upload_time_iso_8601": "2022-01-28T00:26:14.556573Z",
        "url": "https://files.pythonhosted.org/packages/6a/ce/114b2cc36eb43432c51283e280e56facd0059b123cbe8aadcec69382e8e1/pyfao56-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39f8132693be6855064bb7cc16c7ce4316014a2b602eb7c72873b3be3823ccad",
          "md5": "68d15bbdb0014b28a4e61afad3bd2a92",
          "sha256": "5cd7878a24021ec6cbd2fc4f8aa85a910f5fca11793b9b44ac5dc050a0b30392"
        },
        "downloads": -1,
        "filename": "pyfao56-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68d15bbdb0014b28a4e61afad3bd2a92",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25621,
        "upload_time": "2022-02-08T22:44:39",
        "upload_time_iso_8601": "2022-02-08T22:44:39.579214Z",
        "url": "https://files.pythonhosted.org/packages/39/f8/132693be6855064bb7cc16c7ce4316014a2b602eb7c72873b3be3823ccad/pyfao56-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2196083b997bb6d27db48c7868998425adfbda3d51a72d8050307ebfd5a47fe",
          "md5": "1148d9a7334ba97f4e6ae6660e4549c0",
          "sha256": "1266c1d3b9df320b0a3920f8eb7f6cfe3268f486b9798364d631fc1f9474d9e1"
        },
        "downloads": -1,
        "filename": "pyfao56-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "1148d9a7334ba97f4e6ae6660e4549c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21060,
        "upload_time": "2022-02-08T22:44:42",
        "upload_time_iso_8601": "2022-02-08T22:44:42.064728Z",
        "url": "https://files.pythonhosted.org/packages/b2/19/6083b997bb6d27db48c7868998425adfbda3d51a72d8050307ebfd5a47fe/pyfao56-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "691aa223a2622206a7e707b794dd2daa39fa9094b92db6162750353940a9854e",
          "md5": "cde1256112fdd70669eb52166e5263e0",
          "sha256": "2caa13f03c940d253c5a5077447f33f25cc58180a8b48c560079e60f859e45b7"
        },
        "downloads": -1,
        "filename": "pyfao56-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cde1256112fdd70669eb52166e5263e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33121,
        "upload_time": "2022-12-13T22:59:13",
        "upload_time_iso_8601": "2022-12-13T22:59:13.342336Z",
        "url": "https://files.pythonhosted.org/packages/69/1a/a223a2622206a7e707b794dd2daa39fa9094b92db6162750353940a9854e/pyfao56-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e913570e707c5aec6aa9f893457b7541cebd9d79d568eb3a3b92f3a2c86b6204",
          "md5": "e70ec18d6f81e03214370024cd9ae349",
          "sha256": "cc628c570adbdc5f70aaef457ab43b472bb78ad2d12d8e3a3a4f3d69c22a6b1a"
        },
        "downloads": -1,
        "filename": "pyfao56-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e70ec18d6f81e03214370024cd9ae349",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29939,
        "upload_time": "2022-12-13T22:59:15",
        "upload_time_iso_8601": "2022-12-13T22:59:15.803513Z",
        "url": "https://files.pythonhosted.org/packages/e9/13/570e707c5aec6aa9f893457b7541cebd9d79d568eb3a3b92f3a2c86b6204/pyfao56-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "691aa223a2622206a7e707b794dd2daa39fa9094b92db6162750353940a9854e",
        "md5": "cde1256112fdd70669eb52166e5263e0",
        "sha256": "2caa13f03c940d253c5a5077447f33f25cc58180a8b48c560079e60f859e45b7"
      },
      "downloads": -1,
      "filename": "pyfao56-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cde1256112fdd70669eb52166e5263e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 33121,
      "upload_time": "2022-12-13T22:59:13",
      "upload_time_iso_8601": "2022-12-13T22:59:13.342336Z",
      "url": "https://files.pythonhosted.org/packages/69/1a/a223a2622206a7e707b794dd2daa39fa9094b92db6162750353940a9854e/pyfao56-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e913570e707c5aec6aa9f893457b7541cebd9d79d568eb3a3b92f3a2c86b6204",
        "md5": "e70ec18d6f81e03214370024cd9ae349",
        "sha256": "cc628c570adbdc5f70aaef457ab43b472bb78ad2d12d8e3a3a4f3d69c22a6b1a"
      },
      "downloads": -1,
      "filename": "pyfao56-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e70ec18d6f81e03214370024cd9ae349",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29939,
      "upload_time": "2022-12-13T22:59:15",
      "upload_time_iso_8601": "2022-12-13T22:59:15.803513Z",
      "url": "https://files.pythonhosted.org/packages/e9/13/570e707c5aec6aa9f893457b7541cebd9d79d568eb3a3b92f3a2c86b6204/pyfao56-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}