{
  "info": {
    "author": "Nodar Gogoberidze",
    "author_email": "gnodar01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# ds-reify\n\n[![Tests](https://github.com/gnodar01/ds-reify/workflows/Tests/badge.svg)](https://github.com/gnodar01/ds-reify/actions?workflow=Tests)\n[![PyPI](https://img.shields.io/pypi/v/ds-reify.svg)](https://pypi.org/project/ds-reify/)\n\nA CLI helper tool for [Distributed-Something](https://distributedscience.github.io/Distributed-Something/introduction.html)\n\n## Development\n\n### Setup Virtual Environment\n\nSetup a python environment using the method of your choice.\n\nUsing the builtin `venv`:\n\n    python -m venv <ENV_NAME>\n    source <ENV_NAME>/bin/activate\n\nUsing `conda` (replace with any `python >= 3.8`):\n\n    conda create -n <ENV_NAME> python=3.8\n    conda activate <ENV_NAME>\n\nUsing whatever else you want, like [pyenv](https://github.com/pyenv/pyenv).\n\n### Install dev tools\n\nInstall [Poetry](https://python-poetry.org/)\n\n    curl -sSL https://install.python-poetry.org/ | python\n    source ~/.poetry/env\n\nInstall [Nox](https://nox.thea.codes/en/stable/)\n\n    pip install --user --upgrade nox\n\nSee [this post](https://medium.com/@cjolowicz/nox-is-a-part-of-your-global-developer-environment-like-poetry-pre-commit-pyenv-or-pipx-1cdeba9198bd) if you're curious as to why we don't install nox via Poetry.\n\nInstall [pre-commit](https://pre-commit.com/)\n\n    pip install --user --upgrade pre-commit\n\nLet Poetry install the rest from `pyproject.toml`\n\n    poetry install\n\n### Testing\n\n[Coverage.py](https://coverage.readthedocs.io/en/7.2.2/) is used for test coverage, alongside [pytest](https://docs.pytest.org/en/7.2.x/), via the [pytest-cov](https://pytest-cov.readthedocs.io/en/latest/) plugin.\n\nTo run the tests directly, in you virtual environment, run `pytest --cov`.\n\nTo let nox run across multiple isolated environments, run `nox`.\n\nTo avoid nox recreating the virtual environments from scratch on each invocation, run `nox -r`.\n\nRun a specific test with `nox -s tests -- tests/test_TESTNAME`.\n\n### Static analysis\n\nAutoformatting is performed with [Black](https://github.com/psf/black).\n\nRun formatting with `nox -s black` or specify files/directors with `nox -s black -- file1 dir1 ...`.\n\nBlack auto-formatting is not run by default when running `nox` in isolation, it must be specified.\n\n[Flake8](https://flake8.pycqa.org/en/latest/) is used for linting. Under the hood, it uses:\n\n- [pylint](https://www.pylint.org/)\n- [pyflakes](https://github.com/PyCQA/pyflakes) - invalid python code\n  - errors reported as `F`\n- [pycodestyle](https://github.com/pycqa/pycodestyle) - [PEP 8](https://peps.python.org/pep-0008/) style checking\n  - `W` for warnings, `E` for errors\n- [mccabe](https://github.com/PyCQA/mccabe) - code complexity\n  - errors reported as `C`.\n- [flake8-black](https://github.com/peterjc/flake8-black) plugin - adherence to Black code style\n  - erros reported as `BLK`.\n- [flake8-import-order](https://github.com/PyCQA/flake8-import-order) plugin - import grouping and ordering checked against the [Google styleguide](https://google.github.io/styleguide/pyguide.html?showone=Imports_formatting#313-imports-formatting)\n  - errors reported as `I`\n- [flake8-bugbear](https://github.com/PyCQA/flake8-bugbear) plugin - various miscellaneous bugs and design problems\n  - likely bugs reported as `B`\n  - opinionated bugs reported as `B9`\n  - `B950` replaces `E501` for max line length checking (adds tolerance margin of 10%)\n- [flake8-bandit](https://github.com/tylerwince/flake8-bandit) plugin - uses [Bandit](https://github.com/PyCQA/bandit) to find common security issues\n  - issues reported as `S`\n- [flake8-annotations](https://github.com/sco1/flake8-annotations) plugin - detects absence of type annotations for functions\n  - issues reported as `ANN`\n\nAll of these are configured in the `.flake8` file.\n\nRun linting with `nox -s lint` or specify files/directoriess with `nox -s lint -- file1 dir1 ...`.\n\nImport ordering is not auto-formatted although may in the future by migrating to [flake8-isort](https://github.com/gforcada/flake8-isort).\n\n[Safety](https://github.com/pyupio/safety) is uesd for checking project dependencies against known security violations. For example, [insecure-package](https://pypi.org/project/insecure-package/).\n\nRun it with `nox -s safety`.\n\n#### Pre-commit\n\nIf you would like to enable the pre-commit hooks, run `pre-commit install`.\n\nThe hooks will run on files changed by the commit in question. To trigger hooks automatically run `pre-commit run --all-files`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://distributedscience.github.io/Distributed-Something/introduction.html",
    "keywords": "Distributed-Something,DistributedScience",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ds-reify",
    "package_url": "https://pypi.org/project/ds-reify/",
    "platform": null,
    "project_url": "https://pypi.org/project/ds-reify/",
    "project_urls": {
      "Homepage": "https://distributedscience.github.io/Distributed-Something/introduction.html",
      "Repository": "https://github.com/gnodar01/ds-reify"
    },
    "release_url": "https://pypi.org/project/ds-reify/0.1.0/",
    "requires_dist": [
      "rich-click (>=1.6.1,<2.0.0)"
    ],
    "requires_python": ">=3.8.1,<4.0.0",
    "summary": "A CLI helper for [Distributed-Something](https://github.com/DistributedScience/Distributed-Something)",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17363152,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c7ce61eea119d174a74fb03c206b9a82835d8147841eb1e4392f656447f7417",
          "md5": "ed0e7213d9714aaf8582d9f4a7b988f5",
          "sha256": "4d0b0f98c877d1941aa8b54fbcdf34aed125b29e5ebb5b125c642681b862e2dc"
        },
        "downloads": -1,
        "filename": "ds_reify-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed0e7213d9714aaf8582d9f4a7b988f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1,<4.0.0",
        "size": 6012,
        "upload_time": "2023-03-20T12:35:46",
        "upload_time_iso_8601": "2023-03-20T12:35:46.048303Z",
        "url": "https://files.pythonhosted.org/packages/2c/7c/e61eea119d174a74fb03c206b9a82835d8147841eb1e4392f656447f7417/ds_reify-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a743997e9147ab5661980b2c3b944cc994510d38366fb055917606df51334705",
          "md5": "432a8eaacb9f9c0c1f7b1bc2d4880d29",
          "sha256": "69e85157810599b041f3ad4d76567693da6b4a730a8a711e48bc3e2c93ebd64f"
        },
        "downloads": -1,
        "filename": "ds_reify-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "432a8eaacb9f9c0c1f7b1bc2d4880d29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1,<4.0.0",
        "size": 5097,
        "upload_time": "2023-03-20T12:35:47",
        "upload_time_iso_8601": "2023-03-20T12:35:47.331839Z",
        "url": "https://files.pythonhosted.org/packages/a7/43/997e9147ab5661980b2c3b944cc994510d38366fb055917606df51334705/ds_reify-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c7ce61eea119d174a74fb03c206b9a82835d8147841eb1e4392f656447f7417",
        "md5": "ed0e7213d9714aaf8582d9f4a7b988f5",
        "sha256": "4d0b0f98c877d1941aa8b54fbcdf34aed125b29e5ebb5b125c642681b862e2dc"
      },
      "downloads": -1,
      "filename": "ds_reify-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ed0e7213d9714aaf8582d9f4a7b988f5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1,<4.0.0",
      "size": 6012,
      "upload_time": "2023-03-20T12:35:46",
      "upload_time_iso_8601": "2023-03-20T12:35:46.048303Z",
      "url": "https://files.pythonhosted.org/packages/2c/7c/e61eea119d174a74fb03c206b9a82835d8147841eb1e4392f656447f7417/ds_reify-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a743997e9147ab5661980b2c3b944cc994510d38366fb055917606df51334705",
        "md5": "432a8eaacb9f9c0c1f7b1bc2d4880d29",
        "sha256": "69e85157810599b041f3ad4d76567693da6b4a730a8a711e48bc3e2c93ebd64f"
      },
      "downloads": -1,
      "filename": "ds_reify-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "432a8eaacb9f9c0c1f7b1bc2d4880d29",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.1,<4.0.0",
      "size": 5097,
      "upload_time": "2023-03-20T12:35:47",
      "upload_time_iso_8601": "2023-03-20T12:35:47.331839Z",
      "url": "https://files.pythonhosted.org/packages/a7/43/997e9147ab5661980b2c3b944cc994510d38366fb055917606df51334705/ds_reify-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}