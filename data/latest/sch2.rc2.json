{
  "info": {
    "author": "Edouard BATIGA",
    "author_email": "dev@enyosolutions.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Monitoring"
    ],
    "description": "[![pypy badge](https://img.shields.io/pypi/v/sch.svg)](https://pypi.python.org/pypi/)\n\n# SmartCronHelper\n\n![sch logo](https://gitlab.science.ru.nl/uploads/-/system/project/avatar/3732/sch3.png)\n\nA cron shell wrapper for registering and updating cron jobs automatically in\n[healthchecks](https://healthchecks.io) or your [own hosted copy of Healthchecks](https://github.com/healthchecks/healthchecks).\n\n> WARNING: once setup and configured, the code in this package runs as user specified in the cron jobs and is wrapped around the cron job commands. Errors in this package could prevent your cron jobs from being executed.\n\n## Installation\n\nInstall sch system wide with pip\n\n```console\n$ sudo pip3 install sch2\n```\n\nA `sch` cli should now be available:\n\n```console\n$ which sch\n/usr/local/bin/sch\n```\n\n`sch --version` should return something like:\n\n```console\nsch, version 0.0.2\n```\n\n## Command line usage\n\nSee the `--help` option for usage:\n\n```console\nUsage: sch [OPTIONS] COMMAND [ARGS]...\n\n  sch - A cron shell wrapper for registering and updating cron jobs\n  automatically in Healthchecks. The Healthchecks project api_url and\n  api_key should be configured in ~/.sch.conf.\n\nOptions:\n  --version                 Show the version and exit.\n  -c, --shell_command TEXT  Command to execute. This how Cron executes 'sch'\n                            when it is set as SHELL.\n  --help                    Show this message and exit.\n\nCommands:\n  list  List checks for the configured Healthchecks project.\n```\n\n### `list` command\n\n```console\nUsage: sch list [OPTIONS]\n\n  List checks for the configured Healthchecks project.\n\nOptions:\n  -l, --localhost / -a, --all     List checks that originate from this host\n                                  (default) or list all checks.\n  -s, --status [up|down|grace|started|pause|new]\n                                  Show only checks that have the specified\n                                  status.\n  --help                          Show this message and exit.\n```\n\nExample output\n\n```console\n$ sch list\nStatus  Last ping       Name\n------- --------------- ----------------------------------------\nup      2 minutes ago   disk-check\nup      4 hours ago     restic\nup      5 days ago      restic_check\n```\n\n## Configuration\n\nCreate a configuration file `~/.sch.conf` that looks like:\n\n```ini\n[hc]\nhealthchecks_api_url = https://hc.example.com/api/v1/\nhealthchecks_api_key = xxmysecretkeyxx\n```\n\nAnd fill in the API URL and the key obtained from the Healthchecks project\nsettings block labeled \"API Access\".\n\nOptionally, specify the log level in the configuration file:\n\n```ini\n[sch]\nloglevel = DEBUG\n```\n\nPossible values for loglevel are explained [here](https://docs.python.org/3/library/logging.html#levels). The default log level is `ERROR`.\n\n## Monitoring cron jobs\n\nJust decorate your existing cron tabs by specifying the alternative `sch`:\n\n```\nSHELL=/usr/local/bin/sch\n```\n\nThis line should be above the cron lines you want to have monitored by Healthchecks.\n\nOnly jobs with the environment variable `JOB_ID`, ie:\n\n```\n*/5 * * * * root JOB_ID=some_id /path/to/some_command\n```\n\nThe value of `JOB_ID` should be unique for the host.\n\nThe combination of the `JOB_ID` environment variable and the `sch` shell is enough\nto have the job checked in Healthchecks.\n\nAt each run of the job, `sch` will take care that the schedule, description and\nother metadata is synchronized whenever there's a change in the cron job. Just\nmakes sure to not change the `JOB_ID` (or it will create a new check).\n\n### Per job configurable options\n\nJust like the `JOB_ID` environment described in the previous paragraph. There are\nother job specific environment variables that can be used to configure the behavior\nof the cron job or the associated Healthchecks check. These are described in the\ntable below:\n\n| Environment variable | Example value | Description                                                                                                                                                                                                                                                                      | Associated Healthchecks check setting |\n| :------------------- | :------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------- |\n| `JOB_ID*`            | `backup`      | Required for `sch` to interact with the Healthchecks API                                                                                                                                                                                                                         | check name, tags                      |\n| `JOB_TAGS`           | `foo,bar`     | Specify tag names separated by a comma                                                                                                                                                                                                                                           | tags                                  |\n| `JOB_GRACE`          | `5m`          | Grace time specified in seconds or use the time interval format described below. The grace time will be set to 1.2 times the execution time + `JOB_RNDWAIT` + 30 seconds. As per the Healthchecks API, the minimal grace time is 1 minute and the maximum grace time is 30 days. | grace time                            |\n| `JOB_RNDWAIT`        | `1m `         | Max. wait time in seconds or use the time interval format described below. Use this setting to introduce a random delay. `sch` will wait a random time between 0 and `JOB_RNDWAIT` before executing the job's command.                                                           | grace time                            |\n\n#### Interval format\n\nIf no suffixes are used, seconds are assumed.\nYou can make use of the following suffixes to specify an interval:\n\n| Suffix | Interval |\n| ------ | -------- |\n| s      | seconds  |\n| m      | minutes  |\n| h      | hours    |\n| D      | days     |\n| W      | weeks    |\n| M      | months   |\n| Y      | years    |\n\nAlthough days and weeks are accepted, you might want to limit the interval to several minutes ;-)\n\nExamples:\n\n| Interval |     Duration |\n| -------- | -----------: |\n| `5m`     |  300 seconds |\n| `120`    |  120 seconds |\n| `1h30m`  | 5400 seconds |\n\n### Other meta data\n\n- the cron lines' **comment** is used for the description of the check. The comment line just above a cron line or the inline comment is used\n- `$USER`: the current user running the cron command is used to create a tag named `user=$USER`\n\n### Some example cron jobs\n\nAn example of a cron file that touches most of the functionality would look like:\n\n```\nSHELL=/usr/local/bin/sch\n# if this check fails, the host is probably offline\n* * * * * root JOB_ID=true /bin/true\n```\n\nAlthough above cron job is useful, a more advanced configuration could look like:\n\n```\nSHELL=/usr/loca/bin/sch\n# super important backup, if this one fails: fix with top priority!\n10 8-20/2 * * mon-fri  backup  JOB_ID=db-backups JOB_TAGS=db,backup,my_project JOB_RNDWAIT=2m JOB_GRACE=5m /usr/local/bin/run-db-backups\n```\n\nResulting in the following check:\n![screenshot of a more advanced check](https://gitlab.science.ru.nl/bram/sch/-/raw/master/doc/hc-screenshot-advanced.png)\n\n![screenshot of a more advanced check with description](https://gitlab.science.ru.nl/bram/sch/-/raw/master/doc/hc-screenshot-advanced-description.png)\n\n### Job execution\n\n`sch` takes over the role of the shell. Jobs not containing the `JOB_ID` environment variable are directly executed with `os.system`.\nFor `sch` managed jobs:\n\n- `sch` will start with pinging `/start` endpoint of the check\n- os.system executes the command\n- depending on the exit code, it will ping for success or ping the `/fail` end point on failure\n\n### References\n\n- python-crontab <https://pypi.org/project/python-crontab/>\n- crab <https://github.com/grahambell/crab>\n\n## Notes\n\n### fully qualified domain name\n\n`sch` uses the FQDN to identify the hosts it's running on. You can check the FQDN with:\n\n```console\n$ hostname --fqdn\nhost.example.com\n```\n\nHowever, on some systems that don't know the domain part, it just returns the\n(short) hostname instead:\n\n```console\n$ hostname --fqdn\nhost\n```\n\nIf this is the case, you can fix that by editing the `/etc/hosts` file so look\nlike this:\n\n```\n127.0.0.1\tlocalhost\n127.0.1.1\thost.example.com host\n```\n\nAfterwards, `hostname --fqdn` should return the FQDN. Beware that `sch` will\ncreate new checks when the FQDN changes.\n\n\n## History\n\n#### release notes for 0.1\n- initial release\n- testing the code on a couple of servers\n\n### release notes for 0.2.x\n- changed file structure\n- first release on PyPI.\n- moved all code back into `sch.py`\n- previous released packages where broken...\n- setting the user-agent string to 'sch/{version}' when interacting with the\n  Healthchecks API\n- got rid of outdated development section in the readme\n\n### release notes for 0.3.0\n- added command and filtering options for listing Healthchecks status\n\n### release notes for 0.4.0\n- changed command line flags for list\n- improved table alignment for the list command\n\n### release notes for 0.5.x\n- when a command fails, include the command, exit code, stdout and stderr in\n  the request body of the /fail ping \n- got rid of ttictoc as it broke on ubuntu 16 for some reason, using time instead\n\n### release notes for 0.6.x\n- listing of check status sorted by `last_ping`\n- added configuration option sch:loglevel\n\n### release notes for 0.7.x\n- added `JOB_RNDWAIT` configuration option to introduce a random wait\n- fixed bug that keeps on creating new checks after an unknown failure\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/enyosolutions-team/health-check-sch.git",
    "keywords": "sch",
    "license": "GNU General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sch2",
    "package_url": "https://pypi.org/project/sch2/",
    "platform": null,
    "project_url": "https://pypi.org/project/sch2/",
    "project_urls": {
      "Homepage": "https://github.com/enyosolutions-team/health-check-sch.git"
    },
    "release_url": "https://pypi.org/project/sch2/0.0.2/",
    "requires_dist": [
      "arrow",
      "click (>=7.0)",
      "python-crontab",
      "requests",
      "configparser",
      "tzlocal"
    ],
    "requires_python": ">=3.5",
    "summary": "A cron shell wrapper for registering and updating cron jobs automatically in healthchecks",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15447786,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "590cb8b371000a21317c019545603a5af06d6a03b7b048bd20acaa0c49551d32",
          "md5": "4aed7eb6d9a063e518b43fb1bf220460",
          "sha256": "9db095e002ceb648ea47ded951a7805bbd756f04e42de869168230bf72e8df98"
        },
        "downloads": -1,
        "filename": "sch2-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4aed7eb6d9a063e518b43fb1bf220460",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 25630,
        "upload_time": "2022-10-18T11:45:36",
        "upload_time_iso_8601": "2022-10-18T11:45:36.332128Z",
        "url": "https://files.pythonhosted.org/packages/59/0c/b8b371000a21317c019545603a5af06d6a03b7b048bd20acaa0c49551d32/sch2-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e976806fe0988687bc49f3b4adad29855d0e7894aec435ef5bc5d334a26b9cfb",
          "md5": "720fb6c3696cfe5a4f871ae45928e8b8",
          "sha256": "a8125e3fe493c32f9616b75e9a34da68a7a61c9d78825134b4a4d0f25f2ff840"
        },
        "downloads": -1,
        "filename": "sch2-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "720fb6c3696cfe5a4f871ae45928e8b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 29031,
        "upload_time": "2022-10-18T11:45:38",
        "upload_time_iso_8601": "2022-10-18T11:45:38.573285Z",
        "url": "https://files.pythonhosted.org/packages/e9/76/806fe0988687bc49f3b4adad29855d0e7894aec435ef5bc5d334a26b9cfb/sch2-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c630f8b35ace6181ac81df535793329b009d20629160c5937a25bae8d626680",
          "md5": "904f964177bd304f334a3aa4e9e0233d",
          "sha256": "99001efcecfe0a9d60deeaaaf8972300d75e80e307511498b6a325950df3ce97"
        },
        "downloads": -1,
        "filename": "sch2-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "904f964177bd304f334a3aa4e9e0233d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 25629,
        "upload_time": "2022-10-18T11:54:13",
        "upload_time_iso_8601": "2022-10-18T11:54:13.165615Z",
        "url": "https://files.pythonhosted.org/packages/0c/63/0f8b35ace6181ac81df535793329b009d20629160c5937a25bae8d626680/sch2-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99bc4f4aaf7c6d7b7ab7c0e4078f941d92430df0d21eb5e023a03874c32b7d01",
          "md5": "98a87017baf2870cbc540f2a0f5237b8",
          "sha256": "9f4ee795cd5ad99b0204fd5bf0ac69ef65d99b7f55b6d6c341d999d11f1cbb3a"
        },
        "downloads": -1,
        "filename": "sch2-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "98a87017baf2870cbc540f2a0f5237b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 29030,
        "upload_time": "2022-10-18T11:54:15",
        "upload_time_iso_8601": "2022-10-18T11:54:15.185861Z",
        "url": "https://files.pythonhosted.org/packages/99/bc/4f4aaf7c6d7b7ab7c0e4078f941d92430df0d21eb5e023a03874c32b7d01/sch2-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c630f8b35ace6181ac81df535793329b009d20629160c5937a25bae8d626680",
        "md5": "904f964177bd304f334a3aa4e9e0233d",
        "sha256": "99001efcecfe0a9d60deeaaaf8972300d75e80e307511498b6a325950df3ce97"
      },
      "downloads": -1,
      "filename": "sch2-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "904f964177bd304f334a3aa4e9e0233d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 25629,
      "upload_time": "2022-10-18T11:54:13",
      "upload_time_iso_8601": "2022-10-18T11:54:13.165615Z",
      "url": "https://files.pythonhosted.org/packages/0c/63/0f8b35ace6181ac81df535793329b009d20629160c5937a25bae8d626680/sch2-0.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99bc4f4aaf7c6d7b7ab7c0e4078f941d92430df0d21eb5e023a03874c32b7d01",
        "md5": "98a87017baf2870cbc540f2a0f5237b8",
        "sha256": "9f4ee795cd5ad99b0204fd5bf0ac69ef65d99b7f55b6d6c341d999d11f1cbb3a"
      },
      "downloads": -1,
      "filename": "sch2-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "98a87017baf2870cbc540f2a0f5237b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 29030,
      "upload_time": "2022-10-18T11:54:15",
      "upload_time_iso_8601": "2022-10-18T11:54:15.185861Z",
      "url": "https://files.pythonhosted.org/packages/99/bc/4f4aaf7c6d7b7ab7c0e4078f941d92430df0d21eb5e023a03874c32b7d01/sch2-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}