{
  "info": {
    "author": "Damien \"dee\" Coureau",
    "author_email": "kabaret-dev@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# kabaret.flow_entities\n\nA `kabaret.flow` extension providing searchable large collections of entities, stored in a mongodb.\n\nCreate your Entities\n====================\n\nEntities are a queryable collection of objects. \n\nIn order to define an entity, you must inherit\nthe `Entity` class and add some `Property` in it:\n\n```python\nfrom kabaret.flow_entities.entities import Entity, Property\n\nclass Asset(Entity):\n\n    asset_type = Property()\n    asset_family = Property()\n    \n    status = Property()\n\n```\n\nYou can also add classic relations like `Param` and `Child` and build a whole branch\ninside your entity. But keep in mind that the `Propery` relations will be the only ones\nusable in your queries.\n\nOnce you have an Entity defined, you must use it in an `EntityCollection`:\n\n```python\nfrom kabaret.flow_entities.entities import EntityCollection, CreateEntitiesAction, DeleteEntitiesAction\n\nclass Assets(EntityCollection):\n\n    # Those actions are provided for convenience,\n    # you will probably want to define your owns:\n    create_assets = flow.Child(CreateEntitiesAction)\n    delete_assets = flow.Child(DeleteEntitiesAction)\n\n    @classmethod\n    def mapped_type(cls):\n        # This tells which entity is show in \n        # this collection:\n        return Asset\n```\n\nWhen using the `Assets` collection in your flow, the users will see a\ntable with \"Asset Type\", \"Asset Family\" and \"Status\" columns.\n\nThis table is more efficient than a `kabaret.flow.Map` and can retrieve thousands of items\nin a fraction of seconds.\n\nStill, the `EntityCollection` class inherits `kabaret.flow.DynamicMap` so you can use all the classic\ncustomization points (`columns()`, `_fill_row_style()`, etc...).\n\n\nFilter your Entities\n====================\n\nThe `EntityCollection.query_filter()` method can be overidden to return a mongodb filter and\nrestrict the list of displayed entities. You can for example decide to show only the Assets\nwith a \"WIP\" status:\n\n```python\nclass Assets(EntityCollection):\n\n    create_assets = flow.Child(CreateEntitiesAction)\n    delete_assets = flow.Child(DeleteEntitiesAction)\n\n    @classmethod\n    def mapped_type(cls):\n        return Asset\n\n    def query_filter(self):\n        \"\"\"\n        Listing only assets with a WIP status\n        \"\"\" \n        return {\"status\": \"WIP\"}\n```\n\nNow you can add some `Action` and `Param` on your collection to control \nthe returned value of `query_filter()`.\n\nNote that only the `Property` relations of your entity can be used \nin the filter !\n\nThe query filter must be a valid argument for a mongodb `collection.find()` call. Here is some documentation about it: https://docs.mongodb.com/manual/tutorial/query-documents/\n\n\nMultiple Entity Views\n=====================\n\nThe `EntityCollection.collection_name()` method can be overidden to point\nto another entity collection. This is usefull if you want to display some\nentities with a different query filter in different place of your flow.\n\nHere is an example of showing only unfinished tasks assigned to the\ncurrent user from a collection of tasks managed in an `admin` section of the\nproject:\n\n```python\n\nclass MyTodo(EntityCollection):\n\n    @classmethod\n    def mapped_type(cls):\n        # be sure to match the source\n        # collection here:\n        return AwesomeTask\n\n    def collection_name(self):\n        return self.root().project().admin.all_tasks.collection_name()\n    \n    def query_filter(self):\n        return {\n            \"assignee\": getpass.getuser(), \n            \"status\": {\"$in\": [\"NYS\", \"WIP\"]},\n        }\n```\n\nMongoDB Connection\n==================\n\nThe entities are stored as documents in collections of a `mongodb`.\n\nIn order for your `EntityCollection` to connect to the database, you\nmust add an `EntityStore` somewhere in your project and implement a `get_entity_store()` method on your project's root.\n\nA classic aproach is to use an `admin` group in your project:\n```python\n\nfrom kabaret.flow_entities.store import EntityStore\n\nclass Admin(flow.Object):\n\n    entity_store = flow.Child(EntityStore)\n    \nclass AwesomePipeline(flow.Object):\n\n    admin = flow.Child(Admin)\n\n    def get_entity_store(self):\n        return self.admin.entity_store\n\n\n```\n\nThe `EntityStore` has an `uri` param that you will need to \nset before showing or creating entity. The default value connects to a local mongodb database using the default port and options. Contact your beloved IT support team and ask them the value to use for production.\n\nHere is a detailed documentation of the URI syntaxe: https://docs.mongodb.com/manual/reference/connection-string/\n\nDemo\n====\n\nSee `kabaret.flow_entities.demo` for more demo code.\n\nCreate a project with the type `kabaret.flow_entities.demo.EntitiesDemo` to see it in action.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/kabaretstudio/kabaret.flow_entities",
    "keywords": "kabaret pipeline dataflow workflow mongodb",
    "license": "LGPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kabaret.flow-entities",
    "package_url": "https://pypi.org/project/kabaret.flow-entities/",
    "platform": "",
    "project_url": "https://pypi.org/project/kabaret.flow-entities/",
    "project_urls": {
      "Homepage": "https://gitlab.com/kabaretstudio/kabaret.flow_entities"
    },
    "release_url": "https://pypi.org/project/kabaret.flow-entities/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A kabaret.flow extension providing searchable large collections of entities.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9924366,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a617b4276fa19de9343323c414148f8306f109f643898fee5dfdde7dea4d420c",
          "md5": "303e6e0b1c5812ebbaba2ee0e81051f9",
          "sha256": "55d1a2d16088ab4b338b2f4c6d3410a73fb5b054761758bf609e7c8a35ed49ac"
        },
        "downloads": -1,
        "filename": "kabaret.flow_entities-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "303e6e0b1c5812ebbaba2ee0e81051f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26434,
        "upload_time": "2021-03-30T13:19:22",
        "upload_time_iso_8601": "2021-03-30T13:19:22.416091Z",
        "url": "https://files.pythonhosted.org/packages/a6/17/b4276fa19de9343323c414148f8306f109f643898fee5dfdde7dea4d420c/kabaret.flow_entities-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a617b4276fa19de9343323c414148f8306f109f643898fee5dfdde7dea4d420c",
        "md5": "303e6e0b1c5812ebbaba2ee0e81051f9",
        "sha256": "55d1a2d16088ab4b338b2f4c6d3410a73fb5b054761758bf609e7c8a35ed49ac"
      },
      "downloads": -1,
      "filename": "kabaret.flow_entities-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "303e6e0b1c5812ebbaba2ee0e81051f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26434,
      "upload_time": "2021-03-30T13:19:22",
      "upload_time_iso_8601": "2021-03-30T13:19:22.416091Z",
      "url": "https://files.pythonhosted.org/packages/a6/17/b4276fa19de9343323c414148f8306f109f643898fee5dfdde7dea4d420c/kabaret.flow_entities-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}