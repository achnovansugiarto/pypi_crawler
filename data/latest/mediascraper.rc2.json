{
  "info": {
    "author": "Tim232",
    "author_email": "author@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mediascraper\n\n## Scraper!!\n\n## Example : \n\n```python\n..\n\nfrom discord import Embed\nfrom discord.ext import commands\n\nimport mediascraper\n\nhh = mediascraper.HentaiHaven()\nph = mediascraper.PornHub()\nr34 = mediascraper.Rule34()\ngb = mediascraper.Gelbooru()\n\nclass Media(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n\n\n    @commands.command(aliases=['hh', 'hentai', 'hentaihaven'])\n    async def hentai_haven(self, ctx, *args):\n        video = await hh.category_search(str(\" \").join(args))\n        await ctx.send(video)\n\n    @commands.command(aliases=['ph', 'porn', 'pornhub'])\n    async def porn_hub(self, ctx, *args):\n        video = await ph.video_search(str(\" \").join(args))\n        await ctx.send(video)\n\n    @commands.command(alias=['r34', 'rule34'])\n    async def rule34(self, ctx, *args):\n        image = await r34.image_search(str(\" \").join(args))\n        await ctx.send(image)\n\n    @commands.command(alias=['r34all', 'rule34all'])\n    async def rule34all(self, ctx, *args):\n        images = await r34.image_searchall(str(\" \").join(args))\n        for image in images:\n            await ctx.send(image)\n\n    @commands.command(aliases=['gbooru', 'gb'])\n    async def gelbooru(self, ctx, *args):\n        image = await gb.image_search(str(\" \").join(args))\n        await ctx.send(image)\n\n\ndef setup(bot):\n    bot.add_cog(Media(bot))\n\n..    \n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PythonPb/mediascraper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediascraper",
    "package_url": "https://pypi.org/project/mediascraper/",
    "platform": "",
    "project_url": "https://pypi.org/project/mediascraper/",
    "project_urls": {
      "Homepage": "https://github.com/PythonPb/mediascraper"
    },
    "release_url": "https://pypi.org/project/mediascraper/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A small package for scraping medias.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8178380,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a03bf57f96b15bbe4fc0207f8eec10bdd833d7615a91a5316da0bea781afaa0d",
          "md5": "299b5d1af69f18db353c619a0f3cb8c2",
          "sha256": "63d08790e7afebd524bdfc57d7e8d72d8581787cb67ed206f870f43dce47649f"
        },
        "downloads": -1,
        "filename": "mediascraper-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "299b5d1af69f18db353c619a0f3cb8c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4365,
        "upload_time": "2020-09-14T01:08:56",
        "upload_time_iso_8601": "2020-09-14T01:08:56.790874Z",
        "url": "https://files.pythonhosted.org/packages/a0/3b/f57f96b15bbe4fc0207f8eec10bdd833d7615a91a5316da0bea781afaa0d/mediascraper-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abcb70ab5a0b65ec72384933b1ea36c99b48e1c6dfe689b525066335b691a171",
          "md5": "2322397d921aae936d2c000241d553db",
          "sha256": "cd5f278256163f8d34c056bd2e063b4a4024b29b00d297bd6abef5b4f3c16bcf"
        },
        "downloads": -1,
        "filename": "mediascraper-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2322397d921aae936d2c000241d553db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4874,
        "upload_time": "2020-09-14T02:15:32",
        "upload_time_iso_8601": "2020-09-14T02:15:32.378510Z",
        "url": "https://files.pythonhosted.org/packages/ab/cb/70ab5a0b65ec72384933b1ea36c99b48e1c6dfe689b525066335b691a171/mediascraper-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abcb70ab5a0b65ec72384933b1ea36c99b48e1c6dfe689b525066335b691a171",
        "md5": "2322397d921aae936d2c000241d553db",
        "sha256": "cd5f278256163f8d34c056bd2e063b4a4024b29b00d297bd6abef5b4f3c16bcf"
      },
      "downloads": -1,
      "filename": "mediascraper-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2322397d921aae936d2c000241d553db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4874,
      "upload_time": "2020-09-14T02:15:32",
      "upload_time_iso_8601": "2020-09-14T02:15:32.378510Z",
      "url": "https://files.pythonhosted.org/packages/ab/cb/70ab5a0b65ec72384933b1ea36c99b48e1c6dfe689b525066335b691a171/mediascraper-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}