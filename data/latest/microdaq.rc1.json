{
  "info": {
    "author": "Witczeko",
    "author_email": "witczenko@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Hardware :: Hardware Drivers"
    ],
    "description": "# Microdaq\n\nThis package allows users to use data acquisition under MicroDAQ hardware \nwith Python2.7 and Python 3. It provides an interface between the MLink driver \nand Python application. The package works with Windows x86/x64, Linux x86/x64, MacOS x64 \nand EABI ARM machines.\n\n## Installation\n\n`pip install microdaq`\n\nIf already installed, upgrading could be done by\\\n`pip install microdaq --upgrade `\n\n## Examples\n\nSample programs are located in `examples` directory. In order to run them,\nconnect MicroDAQ device to your computer and run chosen script without any \nadditional steps. For example: `python exmaples/ai-demo.py`\n\nScripts from **'examples/complex'** require additional packages to work.\\\nThey could be installed via `pip install -r requirements/examples.txt` command.\n\n<br>\n\n##### LED control example\nTurn on and turn off LED 1. \n\n    import time\n    import microdaq\n\n    mdaq = microdaq.Device(ip='10.10.1.1')\n    mdaq.led_write(led=1, state=True)\n    time.sleep(1.0)\n    mdaq.led_write(led=1, state=False)\n\n<br>\n\n##### Analog input \nRead analog input channels 1 and 2.\n\n    import microdaq\n\n    mdaq = microdaq.Device(ip='10.10.1.1')\n    data = mdaq.ai_read(channels=[1, 2], ai_range=[-10, 10])\n\n    for i, volt in enumerate(data):\n        print('Channel[%d]: %f V' % (i, volt))\n\n<br>\n\n##### Continuous data acquisition\nRead analog input from channel 1, 100 kHz sampling period for a 0.1 second.\nExpected 10 000 samples. \n\n    import microdaq\n\n    mdaq = microdaq.Device(\"10.10.1.1\")\n    mdaq.ai_scan_init(\n        channels=[1], \n        ai_range=[-10, 10], \n        is_differential=[False], \n        rate=100000, \n        duration=0.1)\n\n    data = mdaq.ai_scan(\n        scan_count=10000, \n        timeout=True)\n\n    for sample in data:\n        print('%f V' % sample)\n<br>\n\n##### Analog output\nSet 1.0V and 2.0V to analog output channels 1 and 2 respectively.\nUsed range 0-5 volts. \n\n    import microdaq\n\n    mdaq = microdaq.Device(ip='10.10.1.1')\n    mdaq.ao_write(\n        channels=[1, 2],\n        ao_range=microdaq.AORange.AO_5V_UNI,\n        data=[1.0, 2.0])\n\n<br>\n\n##### PWM\nGenerate PWM signal on two channels A and B (PWM module 1).\\\n![PWM](https://user-images.githubusercontent.com/6242229/98869909-bf57b500-2472-11eb-8047-2876c57fb702.png)\n\n    import microdaq\n\n    mdaq = microdaq.Device(ip='10.10.1.1')\n    mdaq.pwm_init(module=1, period=1000)\n    mdaq.pwm_write(module=1, duty_a=25, duty_b=50)\n\n<br>\n\n##### Encoder\nRead encoder position.\n\n    import time\n    import microdaq\n\n    mdaq = microdaq.Device(ip='10.10.1.1')\n    mdaq.enc_init(module=1, init_value=0)\n\n    for i in range(30):\n        time.sleep(0.1)\n        enc = mdaq.enc_read(module=1)\n        print('position: %d\\tdir: %d' % (enc[0], enc[1]))\n\n\n<br>\n\n\n##### DSP with Scilab XCOS model \nLoad and run application generated by MicroDAQ Toolbox for Scilab.\\\nToolbox available is here: https://atoms.scilab.org/toolboxes/microdaq/1.2.2\n\nApplication overview:\\\n![signal-model-view](https://user-images.githubusercontent.com/6242229/98870068-02198d00-2473-11eb-9988-56724c48a123.jpg)\n\n    import os\n    import microdaq\n\n    mdaq = microdaq.Device(ip='10.10.1.1')\n\n    model = os.path.join(\"resources\", \"signal-model.out\")\n    mdaq.dsp_init(dsp_application=model, rate=100, duration=-1)\n    mdaq.dsp_start()\n\n    print(\"DSP is running: %s\" % mdaq.dsp_is_done())\n    mdaq.dsp_stop()\n    print(\"DSP is running: %s\" % mdaq.dsp_is_done())\n\n<br>\n\n## Tests\nThis sections is meant to be for package's developers/contributors. Tests for API\nlayer which does not required connected MicroDAQ device could be triggered by \n`pytest tests/test_api.py`.\n\nAdditional requirements needed:\\\n`pip install -r requirements/tests.txt`\n\n## License\n\nThe BSD license. For more information read **LICENSE.md** file.  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.microdaq.org/software/python/using-microdaq-with-python.html",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "Witczeko",
    "maintainer_email": "witczenko@gmail.com",
    "name": "microdaq",
    "package_url": "https://pypi.org/project/microdaq/",
    "platform": "",
    "project_url": "https://pypi.org/project/microdaq/",
    "project_urls": {
      "Code": "https://github.com/microdaq/PyMLink",
      "Homepage": "http://www.microdaq.org/software/python/using-microdaq-with-python.html",
      "Issue tracker": "https://github.com/microdaq/PyMLink/issues"
    },
    "release_url": "https://pypi.org/project/microdaq/1.4.0/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "A Python programming interface for MicroDAQ DAQ devices.",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8795136,
  "releases": {
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cae2ae5bc7df5624c644d48e477b25bd704939b9aea414b7c6466535d8f33890",
          "md5": "efc504699cfc8fbfc12b0599a57d9dd5",
          "sha256": "4b2f314d4774df7a44a340cd28cc8cb1898d5c5d41e07998190dfff1a5219a12"
        },
        "downloads": -1,
        "filename": "microdaq-1.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efc504699cfc8fbfc12b0599a57d9dd5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 261064,
        "upload_time": "2020-12-01T23:24:38",
        "upload_time_iso_8601": "2020-12-01T23:24:38.495961Z",
        "url": "https://files.pythonhosted.org/packages/ca/e2/ae5bc7df5624c644d48e477b25bd704939b9aea414b7c6466535d8f33890/microdaq-1.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68255ffeb81b92d8119ba78246934858656b15c9007f2514e2ef80051bf84d59",
          "md5": "34faffd2e162372c90e3f254fed235f1",
          "sha256": "233ec4abab918cb1d6fce5bde63322205cce513f81bf04c89920ac24fa57ebda"
        },
        "downloads": -1,
        "filename": "microdaq-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34faffd2e162372c90e3f254fed235f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 18429,
        "upload_time": "2020-12-01T23:24:40",
        "upload_time_iso_8601": "2020-12-01T23:24:40.038804Z",
        "url": "https://files.pythonhosted.org/packages/68/25/5ffeb81b92d8119ba78246934858656b15c9007f2514e2ef80051bf84d59/microdaq-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cae2ae5bc7df5624c644d48e477b25bd704939b9aea414b7c6466535d8f33890",
        "md5": "efc504699cfc8fbfc12b0599a57d9dd5",
        "sha256": "4b2f314d4774df7a44a340cd28cc8cb1898d5c5d41e07998190dfff1a5219a12"
      },
      "downloads": -1,
      "filename": "microdaq-1.4.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efc504699cfc8fbfc12b0599a57d9dd5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7",
      "size": 261064,
      "upload_time": "2020-12-01T23:24:38",
      "upload_time_iso_8601": "2020-12-01T23:24:38.495961Z",
      "url": "https://files.pythonhosted.org/packages/ca/e2/ae5bc7df5624c644d48e477b25bd704939b9aea414b7c6466535d8f33890/microdaq-1.4.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68255ffeb81b92d8119ba78246934858656b15c9007f2514e2ef80051bf84d59",
        "md5": "34faffd2e162372c90e3f254fed235f1",
        "sha256": "233ec4abab918cb1d6fce5bde63322205cce513f81bf04c89920ac24fa57ebda"
      },
      "downloads": -1,
      "filename": "microdaq-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "34faffd2e162372c90e3f254fed235f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 18429,
      "upload_time": "2020-12-01T23:24:40",
      "upload_time_iso_8601": "2020-12-01T23:24:40.038804Z",
      "url": "https://files.pythonhosted.org/packages/68/25/5ffeb81b92d8119ba78246934858656b15c9007f2514e2ef80051bf84d59/microdaq-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}