{
  "info": {
    "author": "Jiaru Bai",
    "author_email": "jb2197@cam.ac.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Description #\n\nThe `pyasyncagent` package provides a python wrapper for asynchronous agents as part of [TheWorldAvatar](https://github.com/cambridge-cares/TheWorldAvatar) project. It is a python equivalent of `uk.ac.cam.cares.jps.base.agent.AsynAgent.java` but based on [Flask](https://flask.palletsprojects.com/en/2.0.x/) application behind a [gunicorn](https://gunicorn.org/) server, inspired by the [Example: Python agent](https://github.com/cambridge-cares/TheWorldAvatar/tree/develop/Deploy/examples/python_agent). `pyasyncagent` uses `py4jps>=1.0.15` to access asynchronous derivation operations provided in `uk.ac.cam.cares.jps.base.derivation.DerivationClient.java`. For technical details, below are a few useful links:\n- [`py4jps`](https://github.com/cambridge-cares/TheWorldAvatar/tree/develop/JPS_BASE_LIB/python_wrapper) - python wrapper for jps-base-lib\n- [`DerivationClient`](https://github.com/cambridge-cares/TheWorldAvatar/blob/develop/JPS_BASE_LIB/src/main/java/uk/ac/cam/cares/jps/base/derivation) - derivation framework\n- [`AsynAgent.java`](https://github.com/cambridge-cares/TheWorldAvatar/blob/develop/JPS_BASE_LIB/src/main/java/uk/ac/cam/cares/jps/base/agent/AsynAgent.java) - asynchronous java agent that uses methods provided in `DerivationClient`\n- [`DerivationAsynExample`](https://github.com/cambridge-cares/TheWorldAvatar/tree/develop/Agents/DerivationAsynExample) - example on chain of asynchronous derivations operated by asynchronous agents\n\n# Installation #\nFor development and testing reasons, follow below instructions to get a copy of the project up and running on your local system.\n\n## Virtual environment setup\n\nIt is highly recommended to install `pyasyncagent` packages in a [virtual environment](https://docs.python.org/3/tutorial/venv.html). The following steps can be taken to build a virtual environment:\n\n`(Windows)`\n\n```cmd\n$ python -m venv <venv_name>\n$ <venv_name>\\Scripts\\activate.bat\n(<venv_name>) $\n```\n\n`(Linux)`\n```sh\n$ python3 -m venv <venv_name>\n$ source <venv_name>/bin/activate\n(<venv_name>) $\n```\n\nThe above commands will create and activate the virtual environment `<venv_name>` in the current directory.\n\n## Installation via pip\n\nThe following command can be used to install the `pyasyncagent` package and `agentlogging` package. This is a workaround as PyPI does NOT allow install_requires direct links, so we could NOT add package agentlogging from 'agentlogging @ git+https://github.com/cambridge-cares/TheWorldAvatar@develop#subdirectory=Agents/utils/python-utils' as dependency, therefore, in order to make semi-automated release process working, we here introduce a workaround to install agentlogging to the virtual environment but NOT as dependency in the setup.py of `pyasyncagent`. A long term solution could be that we publish `agentlogging` in PyPI as well.\n\n```sh\n(<venv_name>) $ pip install pyasyncagent\n(<venv_name>) $ pip install \"git+https://github.com/cambridge-cares/TheWorldAvatar@develop#subdirectory=Agents/utils/python-utils\"\n```\n\n# How to use #\n\n## Develop asynchronous derivation agent\n\nWhen creating a new asynchronous derivation python agent, it's strongly advised to stick to the folder structure below:\n\n*Recommended python asynchronous agent folder layout*\n\n    .\n    ├── ...                         # other project files (README, LICENSE, etc..)\n    ├── src                         # project source files\n    │   ├── agent                   # module that contains the agent logic\n    │   │   ├── __init__.py\n    │   │   └── your_agent.py       # your asynchronous agent\n    │   ├── conf                    # module that specifies the configuration\n    │   │   ├── __init__.py\n    │   │   ├── agent_props.json    # json file that specifies the agent properties\n    │   │   └── agent_props.py      # read the property json\n    │   ├── data_model              # module that contains the dataclasses for concepts\n    │   │   ├── __init__.py\n    │   │   └── your_onto.py        # dataclasses for your ontology concepts \n    │   ├── kg_operations           # module that handles knowledge graph operations\n    │   │   ├── __init__.py\n    │   │   └── your_sparql.py      # sparql query and update strings for your agent\n    │   ├── other_modules           # other necessary modules for your agent\n    │   │   ├── __init__.py\n    │   │   ├── module1.py\n    │   │   └── module2.py\n    │   └── entry_point.py          # agent entry point\n    └── tests                       # tests files\n\n*Example code*\n\n`your_agent.py`\n\n```python\nfrom pyasyncagent import AsyncAgent\nfrom kg_operations import YourSparqlClient\nfrom data_model import YOUR_CONCEPT\n\nclass YourAgent(AsyncAgent):\n    def setupJob(self, agentInputs) -> list:\n        # Provide your agent logic that converts the agent inputs to a list of new created instances\n        # The agentInputs will be in the format of key-value pairs (python dict) with the concept as key and instance iri as value\n        # For example: \n        # {\n        #     \"https://www.example.com/triplestore/repository/Ontology.owl#Concept_1\": \"https://www.example.com/triplestore/repository/Concept_1/Instance_1\",\n        #     \"https://www.example.com/triplestore/repository/Ontology.owl#Concept_2\": \"https://www.example.com/triplestore/repository/Concept_2/Instance_2\",\n        #     \"https://www.example.com/triplestore/repository/Ontology.owl#Concept_3\":\n        #         [\"https://www.example.com/triplestore/repository/Concept_3/Instance_3_1\", \"https://www.example.com/triplestore/repository/Concept_3/Instance_3_2\"],\n        #     \"https://www.example.com/triplestore/repository/Ontology.owl#Concept_4\": \"https://www.example.com/triplestore/repository/Concept_4/Instance_4\"\n        # }\n\n        # You may want to create instance of YourSparqlClient for specific queries/updates you would like to perform\n        # YourSparqlClient is defined in your_sparql.py that will be introduced later in this README.md file\n        # This client can be initialised with the configuration you already initialised in YourAgent.__init__ method\n        self.sparql_client = YourSparqlClient(\n            self.kgUrl, self.kgUrl, self.kgUser, self.kgPassword\n        )\n\n        # Please note here we are accessing instance iri of class YOUR_CONCEPT within the provided agentInputs\n        response = self.sparql_client.your_sparql_query(agentInputs[YOUR_CONCEPT])\n\n        # You may want to log something during agent execution\n        self.logger.info(\"YourAgent has done something.\")\n\n        # The returned value should be a list of new created instance, even if only one instance was created\n        # For example: ['http://www.example.com/triplestore/repository/the_only_new_created_instance']\n        return []\n```\n\n`agent_props.json`\n\n```json\n{\n    \"KNOWLEDGE_GRAPH\": {\n        \"SPARQL_QUERY_ENDPOINT\": \"http://www.example.com/blazegraph/namespace/your_repo/sparql\",\n        \"SPARQL_UPDATE_ENDPOINT\": \"http://www.example.com/blazegraph/namespace/your_repo/sparql\",\n        \"KG_USERNAME\": null,\n        \"KG_PASSWORD\": null\n    },\n    \"ONTOAGENT\": {\n        \"ONTOAGENT_SERVICE\": \"http://www.example.com/resource/agents/Service__YourAgent#Service\"\n    },\n    \"DERIVATION_CLIENT\": {\n        \"PERIODIC_TIMESCALE\": 120,\n        \"DERIVATION_INSTANCE_BASE_URL\": \"http://www.example.com/triplestore/your_repo/\"\n    }\n}\n```\nPLEASE NEVER COMMIT YOUR KG_USERNAME AND KG_PASSWORD TO GITHUB. A BETTER WAY OF ENCODING CREDENTIALS WILL BE PROVIDED IN THE NEXT RELEASE.\n\n`agent_props.py`\n\nFor an example, please checkout: [`doeagent_properties.py`](https://github.com/cambridge-cares/TheWorldAvatar/blob/133-dev-design-of-experiment/Agents/DoEAgent/src/conf/doeagent_properties.py)\n\n`your_onto.py`\n\n```python\nfrom pydantic.dataclasses import dataclass\nfrom typing import Optional\n\n# Ideally IRI of all concepts and relationships should already be provided in pyasyncagent.data_model.iris.py\n# But just in case you are using some new concepts, you may define it here\nYOUR_CONCEPT = 'https://www.example.com/triplestore/repository/Ontology.owl#YOUR_CONCEPT'\n\n# You may also want to define dataclasses for some concepts you are working on\n# Please note you need to define the concept before it gets referenced by others, as python is a scripting language\n@dataclass\nclass YourOtherConcept():\n    instance_iri: str\n\n@dataclass\nclass YourConcept():\n    instance_iri: str\n    # Here you may want to declare an object relationship that points to YourOtherConcept\n    # However, you may want to make it Optional with a default None\n    example_object_relationship_to: Optional[YourOtherConcept] = None\n```\n\n`your_sparql.py`\n\n```python\nfrom pyasyncagent import PySparqlClient\nfrom data_model import YourConcept\n\nclass YourSparqlClient(PySparqlClient):\n    def your_sparql_query(self, your_instance_iri: str) -> YourConcept:\n        # Construct your SPARQL query string\n        query = \"\"\"SELECT ?target WHERE {# your sparql query logic to get the information}\"\"\"\n\n        # Perform SPARQL query with provided method performQuery in PySparqlClient class\n        response = self.performQuery(query)\n\n        # Instantiate TargetClass instances with query results\n        new_target_instance = YourConcept(response[0]['target'])\n\n        return new_target_instance\n\n    def your_sparql_update(self, your_instance_iri: str):\n        # Construct your SPARQL update string\n        update = \"\"\"INSERT DATA {# your sparql update logic to insert the triples}\"\"\"\n\n        # Perform SPARQL update with provided method performUpdate in PySparqlClient class\n        self.performUpdate(update)\n```\n\n`entry_point.py`\n\n```python\nfrom conf import AgentConfig\nfrom agent import YourAgent\n\nagent_config = AgentConfig(str(Path(__file__).absolute().parent) + '/conf/agent_props.json')\n\napp = YourAgent(agent_config.ONTOAGENT_SERVICE, agent_config.PERIODIC_TIMESCALE, agent_config.DERIVATION_INSTANCE_BASE_URL, agent_config.SPARQL_QUERY_ENDPOINT)\n\nif __name__ == '__main__':\n    app.run()\n```\n\nYou may refer to [DoEAgent](https://github.com/cambridge-cares/TheWorldAvatar/tree/133-dev-design-of-experiment/Agents/DoEAgent) for a concrete implementation of the above suggested folder structure based on `pyasyncagent`. The design of `pyasyncagent` is continually evolving, and as the project grows, we hope to make it more accessible to developers and users.\n\n# New features and package release #\n\nDevelopers who add new features to the python agent wrapper handle the distribution of package `pyasyncagent` on PyPI and Test-PyPI. If you want to add new features that suit your project and release the package independently, i.e. become a developer/maintainer, please contact the repository's administrator to indicate your interest.\n\nThe release procedure is currently semi-automated and requires a few items:\n\n- Your Test-PyPI and PyPI account and password\n- The version number x.x.x for the release\n- Clone of `TheWorldAvatar` repository on your local machine\n- Docker-desktop is installed and running on your local machine\n- You have access to the docker.cmclinnovations.com registry on your local machine, for more information regarding the registry, see: https://github.com/cambridge-cares/TheWorldAvatar/wiki/Docker%3A-Image-registry\n\nPlease create and checkout to a new branch from your feature branch once you are happy with the feature and above details are ready. The release process can then be started by using the commands below, depending on the operating system you're using. (REMEMBER TO CHANGE THE CORRECT VALUES IN THE COMMANDS BELOW!)\n\n`(Windows)`\n\n```cmd\n$ cd \\absolute_path_to\\TheWorldAvatar\\JPS_BASE_LIB\\python_async_agent\n$ release_pyasyncagent_to_pypi.sh -v x.x.x\n```\n\n`(Linux)`\n```sh\n$ cd /absolute_path_to/TheWorldAvatar/JPS_BASE_LIB/python_async_agent\n$ ./release_pyasyncagent_to_pypi.sh -v x.x.x\n```\n\nPlease follow the instructions presented in the console once the process has begun. If everything goes well, change the version number in `JPS_BASE_LIB/python_async_agent/release_pyasyncagent_to_pypi.sh` to the one you used for the script release.\n```sh\necho \"./release_pyasyncagent_to_pypi.sh -v 0.0.3   - release version 0.0.3\"\n```\n\nThe changes mentioned above should then be committed with the changes performed automatically during the release process, specifically in python script `JPS_BASE_LIB/python_async_agent/pyasyncagent/__init__.py`\n```\n__version__ = \"0.0.3\"\n```\n\nand `JPS_BASE_LIB/python_async_agent/setup.py`\n```\nversion='0.0.3',\n```\n\nFinally, merge the release branch back to the feature branch and make a Pull Request for the feature branch to be merged back into the `develop` branch.\n\n# Authors #\n\nJiaru Bai (jb2197@cam.ac.uk)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cambridge-cares/TheWorldAvatar/tree/142-dev-python-async-agent/JPS_BASE_LIB/python_async_agent",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyasyncagent",
    "package_url": "https://pypi.org/project/pyasyncagent/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyasyncagent/",
    "project_urls": {
      "Homepage": "https://github.com/cambridge-cares/TheWorldAvatar/tree/142-dev-python-async-agent/JPS_BASE_LIB/python_async_agent"
    },
    "release_url": "https://pypi.org/project/pyasyncagent/0.0.5/",
    "requires_dist": [
      "py4jps (>=1.0.17)",
      "flask (==1.1.2)",
      "gunicorn (==20.0.4)",
      "Flask-APScheduler",
      "rdflib",
      "testcontainers (>=3.4.2) ; extra == 'dev'",
      "pytest (>=6.2.3) ; extra == 'dev'"
    ],
    "requires_python": ">=3.5",
    "summary": "pyasyncagent is a python wrapper for asynchronous agents as part of The World Avatar project.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12680627,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "723a54e6b27b107cd8fa6014b015d6826db7f74ae8a653177e712e34b57e5049",
          "md5": "48b3a4230ce724864d4a532729122fb1",
          "sha256": "428ef232cb91ca52d2318eccb4d9ba10b9137c2d9d5989dd73a3dbddeb00fe73"
        },
        "downloads": -1,
        "filename": "pyasyncagent-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48b3a4230ce724864d4a532729122fb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 24711,
        "upload_time": "2022-01-21T19:11:01",
        "upload_time_iso_8601": "2022-01-21T19:11:01.168472Z",
        "url": "https://files.pythonhosted.org/packages/72/3a/54e6b27b107cd8fa6014b015d6826db7f74ae8a653177e712e34b57e5049/pyasyncagent-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6c413ffba3dd6b62db3e85ad6505a9cb552187109bb0aa3be064e8bb28439cf",
          "md5": "c88300312ac5ecb2acf4c36f13bf7f73",
          "sha256": "796840db140b305ff4e1ef91a96f96f2eda84de397c74e6e180dbaacf1939cc2"
        },
        "downloads": -1,
        "filename": "pyasyncagent-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c88300312ac5ecb2acf4c36f13bf7f73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 25292,
        "upload_time": "2022-01-21T19:11:03",
        "upload_time_iso_8601": "2022-01-21T19:11:03.598744Z",
        "url": "https://files.pythonhosted.org/packages/c6/c4/13ffba3dd6b62db3e85ad6505a9cb552187109bb0aa3be064e8bb28439cf/pyasyncagent-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d08c56f26d40e6db57434199139ce19403965aceac91b66b787964aeb50c3fd5",
          "md5": "46b9f7163e9a8340866769547cd82675",
          "sha256": "80f1d435025ddc41da1730052c1b2430527605311fd944d169c2141dd72e3463"
        },
        "downloads": -1,
        "filename": "pyasyncagent-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46b9f7163e9a8340866769547cd82675",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 24607,
        "upload_time": "2022-01-23T17:35:09",
        "upload_time_iso_8601": "2022-01-23T17:35:09.988147Z",
        "url": "https://files.pythonhosted.org/packages/d0/8c/56f26d40e6db57434199139ce19403965aceac91b66b787964aeb50c3fd5/pyasyncagent-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b62b46972ec71a747efc714340add8a22aaeb6b5b8d3d8da8aeeb61a123e78a1",
          "md5": "0de743dfc896623266d6e2a9831c1f50",
          "sha256": "6a143146b23e6bef9e528e03ad1a27cb3eb0e72c6b0dae9d030c306c53811d77"
        },
        "downloads": -1,
        "filename": "pyasyncagent-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0de743dfc896623266d6e2a9831c1f50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 25210,
        "upload_time": "2022-01-23T17:35:11",
        "upload_time_iso_8601": "2022-01-23T17:35:11.981447Z",
        "url": "https://files.pythonhosted.org/packages/b6/2b/46972ec71a747efc714340add8a22aaeb6b5b8d3d8da8aeeb61a123e78a1/pyasyncagent-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58193d15ae667f9b3b97de49e75bb20ec0abeb32cff6fc16db3b48e138968791",
          "md5": "6766924f7e3a076c9c523a93de500c7b",
          "sha256": "eb7fab77a49efc4c16aa4a4e99ce41fef8ee195c5684f10898b3045ec86551af"
        },
        "downloads": -1,
        "filename": "pyasyncagent-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6766924f7e3a076c9c523a93de500c7b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 24629,
        "upload_time": "2022-01-24T21:00:22",
        "upload_time_iso_8601": "2022-01-24T21:00:22.310616Z",
        "url": "https://files.pythonhosted.org/packages/58/19/3d15ae667f9b3b97de49e75bb20ec0abeb32cff6fc16db3b48e138968791/pyasyncagent-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea674bc81701437c738a9340d145368c5d191f137ad3749adb581270beaacf6c",
          "md5": "5478345b984531754e3717c270de90ab",
          "sha256": "44ec97c0cdc2b3c2d6f2c44aeb7fb374de3258cf79b1cb5253cc2264550571d1"
        },
        "downloads": -1,
        "filename": "pyasyncagent-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5478345b984531754e3717c270de90ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 24869,
        "upload_time": "2022-01-24T21:00:23",
        "upload_time_iso_8601": "2022-01-24T21:00:23.719236Z",
        "url": "https://files.pythonhosted.org/packages/ea/67/4bc81701437c738a9340d145368c5d191f137ad3749adb581270beaacf6c/pyasyncagent-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58193d15ae667f9b3b97de49e75bb20ec0abeb32cff6fc16db3b48e138968791",
        "md5": "6766924f7e3a076c9c523a93de500c7b",
        "sha256": "eb7fab77a49efc4c16aa4a4e99ce41fef8ee195c5684f10898b3045ec86551af"
      },
      "downloads": -1,
      "filename": "pyasyncagent-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6766924f7e3a076c9c523a93de500c7b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 24629,
      "upload_time": "2022-01-24T21:00:22",
      "upload_time_iso_8601": "2022-01-24T21:00:22.310616Z",
      "url": "https://files.pythonhosted.org/packages/58/19/3d15ae667f9b3b97de49e75bb20ec0abeb32cff6fc16db3b48e138968791/pyasyncagent-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea674bc81701437c738a9340d145368c5d191f137ad3749adb581270beaacf6c",
        "md5": "5478345b984531754e3717c270de90ab",
        "sha256": "44ec97c0cdc2b3c2d6f2c44aeb7fb374de3258cf79b1cb5253cc2264550571d1"
      },
      "downloads": -1,
      "filename": "pyasyncagent-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5478345b984531754e3717c270de90ab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 24869,
      "upload_time": "2022-01-24T21:00:23",
      "upload_time_iso_8601": "2022-01-24T21:00:23.719236Z",
      "url": "https://files.pythonhosted.org/packages/ea/67/4bc81701437c738a9340d145368c5d191f137ad3749adb581270beaacf6c/pyasyncagent-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}