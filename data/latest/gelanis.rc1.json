{
  "info": {
    "author": "pysparkling contributors",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/kbc-opensource/pysparkling/master/logo/logo-w100.png\n    :target: https://github.com/kbc-opensource/pysparkling\n\ngelanis\n=======\n\n**Gelanis** is an enhanced version of\n`pysparkling <https://github.com/svenkreiss/pysparkling>`_.\n\nList of improvements:\n\n* Data types of the resulting dataframes are equal to pyspark\n\nList of todos:\n\n* Implemented since/until + be able to target a certain pyspark version\n* Get a drop-in API compatibility with pyspark (auto-injector is written, but more tests are needed here).\n* Test the tests against both pyspark & pysparkling & compare the outputs so we're 100% certain both libraries are API equal.\n* Achieve API equality between pyspark & pysparkling (meaning that any public symbol should exist in both libraries).\n* Increase tests to ensure 100% compatibility with pyspark.\n\n\npysparkling\n===========\n\n**Pysparkling** provides a faster, more responsive way to develop programs\nfor PySpark. It enables code intended for Spark applications to execute\nentirely in Python, without incurring the overhead of initializing and\npassing data through the JVM and Hadoop. The focus is on having a lightweight\nand fast implementation for small datasets at the expense of some data\nresilience features and some parallel processing features.\n\n**How does it work?** To switch execution of a script from PySpark to pysparkling,\nhave the code initialize a pysparkling Context instead of a SparkContext, and\nuse the pysparkling Context to set up your RDDs. The beauty is you don't have\nto change a single line of code after the Context initialization, because\npysparkling's API is (almost) exactly the same as PySpark's. Since it's so easy\nto switch between PySpark and pysparkling, you can choose the right tool for your\nuse case.\n\n**When would I use it?** Say you are writing a Spark application because you\nneed robust computation on huge datasets, but you also want the same application\nto provide fast answers on a small dataset. You're finding Spark is not responsive\nenough for your needs, but you don't want to rewrite an entire separate application\nfor the *small-answers-fast* problem. You'd rather reuse your Spark code but somehow\nget it to run fast. Pysparkling bypasses the stuff that causes Spark's long startup\ntimes and less responsive feel.\n\nHere are a few areas where pysparkling excels:\n\n* Small to medium-scale exploratory data analysis\n* Application prototyping\n* Low-latency web deployments\n* Unit tests\n\n\nInstall\n=======\n\n.. code-block:: bash\n\n    pip install pysparkling[s3,hdfs,streaming]\n\n\n`Documentation <https://pysparkling.trivial.io>`_:\n\n.. image:: https://raw.githubusercontent.com/svenkreiss/pysparkling/master/docs/readthedocs.png\n   :target: https://pysparkling.trivial.io\n\n\nOther links:\n`Github <https://github.com/svenkreiss/pysparkling>`_,\n|pypi-badge|, |test-badge|, |docs-badge|\n\n.. |pypi-badge| image:: https://badge.fury.io/py/pysparkling.svg\n   :target: https://pypi.python.org/pypi/pysparkling/\n.. |test-badge| image:: https://github.com/svenkreiss/pysparkling/workflows/Tests/badge.svg\n   :target: https://github.com/svenkreiss/pysparkling/actions?query=workflow%3ATests\n.. |docs-badge| image:: https://readthedocs.org/projects/pysparkling/badge/?version=latest\n   :target: https://pysparkling.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n\nFeatures\n========\n\n* Supports URI schemes ``s3://``, ``hdfs://``, ``gs://``, ``http://`` and ``file://``\n  for Amazon S3, HDFS, Google Storage, web and local file access.\n  Specify multiple files separated by comma.\n  Resolves ``*`` and ``?`` wildcards.\n* Handles ``.gz``, ``.zip``, ``.lzma``, ``.xz``, ``.bz2``, ``.tar``,\n  ``.tar.gz`` and ``.tar.bz2`` compressed files.\n  Supports reading of ``.7z`` files.\n* Parallelization via ``multiprocessing.Pool``,\n  ``concurrent.futures.ThreadPoolExecutor`` or any other Pool-like\n  objects that have a ``map(func, iterable)`` method.\n* Plain pysparkling does not have any dependencies (use ``pip install pysparkling``).\n  Some file access methods have optional dependencies:\n  ``boto`` for AWS S3, ``requests`` for http, ``hdfs`` for hdfs\n\n\nExamples\n========\n\nSome demos are in the notebooks\n`docs/demo.ipynb <https://github.com/svenkreiss/pysparkling/blob/master/docs/demo.ipynb>`_\nand\n`docs/iris.ipynb <https://github.com/svenkreiss/pysparkling/blob/master/docs/iris.ipynb>`_\n.\n\n**Word Count**\n\n.. code-block:: python\n\n    from pysparkling import Context\n\n    counts = (\n        Context()\n        .textFile('README.rst')\n        .map(lambda line: ''.join(ch if ch.isalnum() else ' ' for ch in line))\n        .flatMap(lambda line: line.split(' '))\n        .map(lambda word: (word, 1))\n        .reduceByKey(lambda a, b: a + b)\n    )\n    print(counts.collect())\n\nwhich prints a long list of pairs of words and their counts.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kbc-opensource/pysparkling",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gelanis",
    "package_url": "https://pypi.org/project/gelanis/",
    "platform": "",
    "project_url": "https://pypi.org/project/gelanis/",
    "project_urls": {
      "Homepage": "https://github.com/kbc-opensource/pysparkling"
    },
    "release_url": "https://pypi.org/project/gelanis/0.6.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pure Python implementation of the Spark RDD interface.",
    "version": "0.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9793477,
  "releases": {
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7342254071fb89b7224517973c53833063fda2617329c49c6ef782f8ae4a6d56",
          "md5": "8aa8e56df50f898babc92407827e2d9d",
          "sha256": "8ca45aa644d6937eba3747e5f31e7340b42ce69228e4fc49aa5b789f7e75d623"
        },
        "downloads": -1,
        "filename": "gelanis-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8aa8e56df50f898babc92407827e2d9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 165320,
        "upload_time": "2021-03-17T05:27:41",
        "upload_time_iso_8601": "2021-03-17T05:27:41.699150Z",
        "url": "https://files.pythonhosted.org/packages/73/42/254071fb89b7224517973c53833063fda2617329c49c6ef782f8ae4a6d56/gelanis-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7342254071fb89b7224517973c53833063fda2617329c49c6ef782f8ae4a6d56",
        "md5": "8aa8e56df50f898babc92407827e2d9d",
        "sha256": "8ca45aa644d6937eba3747e5f31e7340b42ce69228e4fc49aa5b789f7e75d623"
      },
      "downloads": -1,
      "filename": "gelanis-0.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8aa8e56df50f898babc92407827e2d9d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 165320,
      "upload_time": "2021-03-17T05:27:41",
      "upload_time_iso_8601": "2021-03-17T05:27:41.699150Z",
      "url": "https://files.pythonhosted.org/packages/73/42/254071fb89b7224517973c53833063fda2617329c49c6ef782f8ae4a6d56/gelanis-0.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}