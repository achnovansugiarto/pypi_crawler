{
  "info": {
    "author": "zhuofalin",
    "author_email": "1822643111@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "## Chinese numerals and Arabic numerals conversion\r\n\r\nThere should be emojis here (●'◡'●)\r\n\r\nProject Description and Description [English Version](readme.md)  \r\n工程说明与描述[中文版本](readme_cn.md)\r\n\r\n♠ **`cnoan`** is a toolkit to quickly convert `Chinese numbers` and `Arabic numbers`! in  \r\n  **`cn`** refers to Chinese numerals  \r\n  **`an`** refers specifically to Arabic numerals  \r\n  **`o`** stands for reciprocal  \r\n\r\n♥ The Chinese `互` in the interchange is difficult to translate and shorthand /(ㄒoㄒ)/~~\r\nIf the first letter of `mutual` is used, then the name of this project will feel like 🐎 people  \r\n(spread bad speech 🔪, close the small black house❎);   \r\nRoughly, it means mutual rotation. The two are connected through __c__, which can only reflect the meaning of one-way or one-path 👉;   \r\nTherefore, `o` is used to connect in the middle, which can reflect the concept of `·mutual·` `·ring·` to a certain extent;  \r\n\r\n♦ This project is based on the ideas and guidance of [cn2an](https://github.com/Ailln/cn2an.git) to update the functions of the problems encountered or existing;\r\nWelcome to star and follow, everyone to maintain and improve together;   \r\n\r\n♣ Hey, it's great *★,°*:.☆(￣▽￣)/$:*.°★* .  \r\n\r\n-----\r\n\r\n## Directory Structure\r\n````\r\n   Catalog Name                 Function and Description                             What's New\r\n|--------------------------------------------------------------------------------------------------------\r\n|---an2cn.py         Convert Arabic numerals to Chinese numerals               Newly defined class names\r\n|--------------------------------------------------------------------------------------------------------\r\n|---base.py          This is the base class of the project,                             None\r\n                     which contains the base class of ConvertBase \r\n|--------------------------------------------------------------------------------------------------------\r\n|---cn2an.py         Convert Chinese numbers to Arabic numbers                 Newly defined class names\r\n|--------------------------------------------------------------------------------------------------------\r\n|---config.yaml      The configuration of the project,                         Add the abnormal field\r\n                     mainly the definition of the matching rules \r\n|--------------------------------------------------------------------------------------------------------\r\n|---setup.py         Project packaging and publishing                          Add my information\r\n|--------------------------------------------------------------------------------------------------------\r\n|---translate.py     Convert the content in the sentence                       Modified regular expression\r\n                     that determines the conversion\r\n                     With parameters\r\n|--------------------------------------------------------------------------------------------------------\r\n|---utils.py         Definition of basic functions in utils.py                          None\r\n|--------------------------------------------------------------------------------------------------------\r\n|---requirement.txt  The package required by the project                                None\r\n|--------------------------------------------------------------------------------------------------------\r\n````\r\n------\r\n\r\n## Project Function\r\n### basic function\r\n#### 1.1 `Chinese numbers` => `Arabic numbers`\r\n\r\n- Support `Chinese numbers` => `Arabic numbers`;\r\n- Support `Uppercase Chinese numbers` => `Arabic numbers`;\r\n- Support `Chinese numbers and Arabic numbers` => `Arabic numbers`;\r\n\r\n#### 1.2 `Arabic numbers` => `Chinese numbers`\r\n\r\n- Support `Arabic numbers` => `Chinese numbers`;\r\n- Support `Arabic numbers` => `Uppercase Chinese numbers`;\r\n- Support `Arabic numerals` => `Uppercase RMB`;\r\n\r\n#### 1.3 Sentence Transformation\r\n\r\n- Support `Chinese numbers` => `Arabic numbers`;\r\n    - support `date`;\r\n    - support `score`;\r\n    - support `percent`;\r\n    - support `Celsius`;\r\n\r\n- Support `Arabic numbers` => `Chinese numbers`;\r\n    - support `date`;\r\n    - support `score`;\r\n    - support `percent`;\r\n    - support `Celsius`;\r\n\r\n#### 1.4 Others\r\n\r\n- support `decimal`;\r\n- support `negative numbers`;\r\n- Support for `HTTP API`.\r\n\r\n### Function updates & Fixes\r\n- 🎈 Redefine the field position to be translated (translated) (●'◡'●)\r\n  The original project (transform+cn2en) will have the following situations\r\n    ````\r\n    七上八下 --> 7上8下\r\n    两人    --> 2人\r\n    一旦    --> 1旦\r\n    ````\r\n  In fact, in practical applications, we do not want it to be converted. Therefore, the premise of conversion is redefined in this project\r\n   ```python\r\n    'Original': \r\n        self.cn_pattern = f\"负?([零一二三四五六七八九十拾百佰千仟万亿]+点)?[零一二三四五六七八九十拾百佰千仟万亿]+\"\r\n    ```\r\n  ```python\r\n  'Now':\r\n        self.cn_pattern = f\"负?-?正?\\+?([零一二三四五六七八九十][\\s\\t]*[十拾百佰千仟万亿]+)(点[零一二三四五六七八九十]+)?\"\r\n  ```\r\n  Of course, I can't guarantee that this rule can help you solve the corresponding business needs. Therefore, you can redefine it in __self.cn_pattern__ of [translate](translate.py).\r\n\r\n- 🎈 Introduced isolation conversion and regression of abnormal words o(*￣▽￣*)ブ\r\nWhen the above redefinition criteria are defined, situations such as `Wanning`, `In case`, and `seven up and eight down` can be avoided, but it is still necessary to sigh the vastness and profoundness of Chinese  \r\n\r\n![1](https://img1.baidu.com/it/u=1108671039,3873010749&fm=253&fmt=auto&app=138&f=GIF?w=254&h=245)\r\n````python\r\n'E.g':\r\n    '一五一十'\r\n...\r\n````\r\nIf the word is thrown in directly, the following results will be obtained:\r\n````python\r\n:return: '一五10'\r\n````\r\nThis doesn't work. In this project, I classify this similar content as `abnormal words`, refer to [abnormal_words in config](config.yaml)\r\n````python\r\n'Thinking':\r\n# encoder\r\n  masks = ['1510', ''] # list[str, str, ...] define abnormal words\r\n  inputs = str('XXXxxx')\r\n  mask_contents = {}\r\n  for index, item in enumerate(masks):\r\n      if item in inputs:\r\n          mask = f'_MASK_{index}_'\r\n          mask_contents[mask] = item\r\n          inputs = inputs.replace(item, mask)\r\n# decoder\r\n  for contents in list(mask_contents.keys()):\r\n      if contents in output:\r\n          output = output.replace(contents, mask_contents[contents])\r\n````\r\n- 🎈 Modify a point in the original project\r\nThere is a situation in the original engineering quantity: when `两`、`甘`，`幺`, etc. appear in the text, and are not the content to be converted, when the following demo segment is executed,\r\n````python\r\n  inputs = str('XXXXxxx')\r\n  inputs = inputs.replace(\"twenty\", \"twenty\").replace(\"half\", \"0.5\").replace(\"two\", \"2\")\r\n````\r\nThese words will be converted in advance, so this project will do the corresponding conversion after regularization judgment.\r\n\r\n- 🎈 Do a little of detail\r\nWe often define an unwritten rule in our daily tasks and writing papers:\r\n10,000 has to be written in the style of 10,000, so this project is also 'forced' to join this rule 😔  \r\n\r\nAfter the above series of operations, the final effect is as follows:\r\n```python\r\nfrom cnoan.translate import Translate\r\ninputs = '这人坏滴很，王尼玛一五一十的收入为一万元, 而两人却告诉我是二千元'\r\nmode = 'cn2an'\r\ntans = Translate()\r\nprint(tans.convert(\"这人坏滴很，王尼玛一五一十的收入为一万元, 而两人却告诉我是二千元\", \"cn2an\"))\r\n# 这人坏滴很，王尼玛一五一十的收入为10,000元, 而两人却告诉我是2,000元\r\n```\r\n----\r\n## Project Installation & Usage\r\n### Install\r\n+ Method 1:\r\n    ```\r\n  pip install cnocn\r\n  ```\r\n+ Method 2:\r\n ```\r\ngit clone https://github.com/zhuofalin/cnoan.git\r\ncd cnoan\r\npython setup.py install\r\n```\r\n+ Method 3:\r\n  ```\r\n  git clone https://github.com/zhuofalin/cnoan.git\r\n  copy cnoan to your project\r\n  ```\r\n### Usage\r\n```python\r\n# import package which you need\r\nimport cnoan\r\n\r\n# View the current version number\r\nprint(cnoan.__version__)\r\n# 0.5.16  #  will be different\r\n```\r\n\r\n### 3.1 `Chinese numbers` => `Arabic numerals`\r\n\r\n> The maximum support is `10**16`, that is, `Terabillion`  \r\n> and the minimum support is `10**-16`.\r\n\r\n```python\r\nimport cnoan\r\n\r\noutput = cnoan.cn2an(\"一百二十三\")\r\n# or\r\noutput = cnoan.cn2an(\"一百二十三\", \"strict\")\r\n# output:\r\n# 123\r\n\r\noutput = cnoan.cn2an(\"一二三\", \"normal\")\r\n# output:\r\n# 123\r\n\r\noutput = cnoan.cn2an(\"1百23\", \"smart\")\r\n# output:\r\n# 123\r\n\r\n# The above three modes all support negative numbers\r\noutput = cnoan.cn2an(\"负一百二十三\", \"strict\")\r\n# output:\r\n# -123\r\n\r\n# All three modes above support decimals\r\noutput = cnoan.cn2an(\"一点二三\", \"strict\")\r\n# output:\r\n# 1.23\r\n```\r\n\r\n### 3.2 `Arabic numerals` => `Chinese numbers`\r\n\r\n> The maximum support is `10**16`, that is, `Terabillion`  \r\n> and the minimum support is `10**-16`.\r\n\r\n```python\r\nimport cnoan\r\n\r\noutput = cnoan.an2cn(\"123\")\r\n# or\r\noutput = cnoan.an2cn(\"123\", \"lower\")\r\n# output:\r\n# 一百二十三\r\n\r\noutput = cnoan.an2cn(\"123\", \"upper\")\r\n# output:\r\n# 壹佰贰拾叁\r\n\r\noutput = cnoan.an2cn(\"123\", \"rmb\")\r\n# output:\r\n# 壹佰贰拾叁元整\r\n\r\noutput = cnoan.an2cn(\"-123\", \"lower\")\r\n# output:\r\n# 负一百二十三\r\n\r\noutput = cnoan.an2cn(\"1.23\", \"low\")\r\n# output:\r\n# 一点二三\r\n```\r\n\r\n### 3.3 sentence transformation\r\n\r\n> ⚠️：Experimental feature that may cause undesired conversions.\r\n\r\n```python\r\nimport cnoan\r\n\r\noutput = cnoan.translate(\"小王捡了一百块钱\")\r\n# or\r\noutput = cnoan.translate(\"小王捡了一百块钱\", \"cn2an\")\r\n# output:\r\n# 小王捡了100块钱\r\n\r\noutput = cnoan.translate(\"小王捡了100块钱\", \"an2cn\")\r\n# output:\r\n# 小王捡了一百块钱\r\n\r\n\r\n## data\r\noutput = cnoan.translate(\"小王的生日是二零零一年三月四日\", \"cn2an\")\r\n# output:\r\n# 小王的生日是2001年3月4日\r\n\r\noutput = cnoan.translate(\"小王的生日是2001年3月4日\", \"an2cn\")\r\n# output:\r\n# 小王的生日是二零零一年三月四日\r\n\r\n## support score\r\noutput = cnoan.translate(\"抛出去的硬币为正面的概率是二分之一\", \"cn2an\")\r\n# output:\r\n# 抛出去的硬币为正面的概率是1/2\r\n\r\noutput = cnoan.translate(\"抛出去的硬币为正面的概率是1/2\", \"an2cn\")\r\n# output:\r\n# 抛出去的硬币为正面的概率是二分之一\r\n\r\n## support %\r\n## support ℃\r\n```\r\n-----------\r\n## License\r\n\r\n[![](https://award.dovolopor.com?lt=License&rt=MIT&rbc=green)](./LICENSE)\r\n[![](https://award.dovolopor.com?lt=Ailln's&rt=idea&lbc=lightgray&rbc=red&ltc=red)](https://github.com/Ailln/award)\r\n\r\n-----\r\n##  communicate\r\n\r\nIf you have any questions, you can communicate with me through [email] (1822643111@qq.com), and I will reply as soon as possible.\r\n\r\n-----\r\n## Thanks\r\n\r\n- [Thunder Bouble](https://github.com/sfyc23): A lot of useful feedback, including some bugs and new features;\r\n- [Damon Yu](https://github.com/20071313): Added support for full-width numbers and full-width symbols.\r\n\r\n##  Reference\r\n\r\n- [cn2an core code analysis](https://www.v2ai.cn/2020/06/30/python/8-cn2an/)\r\n- [How to publish your own package to pypi](https://www.v2ai.cn/2018/07/30/python/1-pypi/)\r\n- [Small traps in Python](https://www.v2ai.cn/2019/01/01/python/4-python-trap/)\r\n- [Chinese characters to Arabic numerals](https://www.zouyesheng.com/han-number-convert.html)\r\n- [Chinese Text Normalization for Speech Processing](https://github.com/speechio/chinese_text_normalization)\r\n- [The Best Tool of Chinese Number to Digits](https://github.com/Wall-ee/chinese2digits)\r\n- [Microsoft Recognizers Text Overview](https://github.com/microsoft/Recognizers-Text)\r\n- [process: data preprocessing pipeline](https://github.com/Ailln/proces)\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zhuofalin/cnoan.git",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cnoan",
    "package_url": "https://pypi.org/project/cnoan/",
    "platform": null,
    "project_url": "https://pypi.org/project/cnoan/",
    "project_urls": {
      "Homepage": "https://github.com/zhuofalin/cnoan.git"
    },
    "release_url": "https://pypi.org/project/cnoan/1.1.8/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Convert Chinese numerals and Arabic numerals.",
    "version": "1.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13779398,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fd137348a402bf71346caa347837a2f92acaa499784bccd1eca33444d60854b",
          "md5": "b3712eb9fe9912a74620e72dee9d5652",
          "sha256": "4d98fe5b28190931d368d16baec925a36e390cf922ba0c847866e4f9e27df234"
        },
        "downloads": -1,
        "filename": "cnoan-1.1.2-py3.9.egg",
        "has_sig": false,
        "md5_digest": "b3712eb9fe9912a74620e72dee9d5652",
        "packagetype": "bdist_egg",
        "python_version": "1.1.2",
        "requires_python": ">=3.6",
        "size": 5596,
        "upload_time": "2022-05-11T05:48:32",
        "upload_time_iso_8601": "2022-05-11T05:48:32.306699Z",
        "url": "https://files.pythonhosted.org/packages/3f/d1/37348a402bf71346caa347837a2f92acaa499784bccd1eca33444d60854b/cnoan-1.1.2-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2f6c9f110b645b9272918874495ccb99ea3f72bd1c9efb3e176b5e361a5ae46",
          "md5": "cdbe84c7a835d67855053c06e80f9f29",
          "sha256": "7a4b633b38bcc66b6012da2393ce66d855cc0c35ed2199ad270c4bd85fbebbe5"
        },
        "downloads": -1,
        "filename": "cnoan-1.1.8-py3.9.egg",
        "has_sig": false,
        "md5_digest": "cdbe84c7a835d67855053c06e80f9f29",
        "packagetype": "bdist_egg",
        "python_version": "1.1.8",
        "requires_python": ">=3.6",
        "size": 5391,
        "upload_time": "2022-05-11T07:19:38",
        "upload_time_iso_8601": "2022-05-11T07:19:38.293648Z",
        "url": "https://files.pythonhosted.org/packages/c2/f6/c9f110b645b9272918874495ccb99ea3f72bd1c9efb3e176b5e361a5ae46/cnoan-1.1.8-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2f6c9f110b645b9272918874495ccb99ea3f72bd1c9efb3e176b5e361a5ae46",
        "md5": "cdbe84c7a835d67855053c06e80f9f29",
        "sha256": "7a4b633b38bcc66b6012da2393ce66d855cc0c35ed2199ad270c4bd85fbebbe5"
      },
      "downloads": -1,
      "filename": "cnoan-1.1.8-py3.9.egg",
      "has_sig": false,
      "md5_digest": "cdbe84c7a835d67855053c06e80f9f29",
      "packagetype": "bdist_egg",
      "python_version": "1.1.8",
      "requires_python": ">=3.6",
      "size": 5391,
      "upload_time": "2022-05-11T07:19:38",
      "upload_time_iso_8601": "2022-05-11T07:19:38.293648Z",
      "url": "https://files.pythonhosted.org/packages/c2/f6/c9f110b645b9272918874495ccb99ea3f72bd1c9efb3e176b5e361a5ae46/cnoan-1.1.8-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}