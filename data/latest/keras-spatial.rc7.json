{
  "info": {
    "author": "Jeff Terstriep",
    "author_email": "jefft@illinois.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: University of Illinois/NCSA Open Source License",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "\n# Keras Spatial\nKeras Spatial includes data generators and tools designed to simplify \nthe preprocessing of spatial data for deep learning applications.\n\nKeras Spatial provides a data generator that reads samples directly\nfrom a raster data source and eliminates the need to create small, \nindividual raster files prior to model execution. The raster data \nsource may be local or remote service. Any necessary reprojections \nand scaling is handled automatically.\n\nCentral to the use of Keras Spatial is a GeoPandas GeoDataFrame which\ndefines a virtual sample set, a list of samples that drives the data\ngenerator. The dataframe can also be used to filter samples based\non different aspects such as the existance of nodata, handling \nimbalanced label distributions, and storing sample attributes used\nin normalization amoung other data augmentation functions.\n\nFeatures include:\n* Sample extraction from local or remote data sources -- no intermediate files\n* Automatic reprojection and resampling as needed\n* Sample augmentation using user-defined callback system\n* Flexible structure improves organization and data management\n\nTry Keras Spatial is avialble at [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/NCSA/keras-spatial/HEAD?filepath=examples%2Fquickstart.ipynb).\n\n## Installation\nTo install the package from PyPi repository you can execute the following command:\n\n```\npip install keras-spatial\n```\n\nor directly from GitHub\n\n```\n$ pip install git+https://github.com/ncsa/keras-spatial#egg=keras-spatial --process-dependency-links\n```\n\n## Quickstart\n\n1. Create a SpatialDataGen and set the source raster\n1. Create a geodataframe with 200x200 (in projection units) samples covering the spatial extent of the raster\n1. Create the generator producing arrays with shape [32, 128, 128, 1]\n1. Fit model\n\n```Python\nfrom keras_spatial.datagen import SpatialDataGenerator\n\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ngeodataframe = sdg.regular_grid(200, 200)\ngenerator = sdg.flow_from_dataframe(geodataframe, 128, 128, batch_size=32)\nmodel(generator, ...)\n```\n\n## Usage\n\nKeras Spatial provides a SpatialDataGenerator (SDG) modeled on the Keras \nImageDataGenerator. The SDG allows user to work in spatial coorindates rather\nthan pixels and easily integrate data from different coordinates systems. \nReprojection and resampling is handled automatically as needed. Because \nKeras Spatial is based on the rasterio package, raster data source may \neither local files or remote resources referenced by URL.\n\nBecause the SDG reads directly from larger raster data sources rather than\nsmall, preprocessed images files, SDG makes use of a GeoDataFrame to identify\neach sample area. The geometry associated with the datafame is expected to be\na polygon but extraction is done using a windowed read based on the bounds.\nAs with the ImageDataGenerator, the flow_from_dataframe method returns the \ngenerator that can be passed to the Keras model.\n\n### SpatialDataGenerator class\n\nThe SDG is similar to the ImageDataGenerator albeit missing the .flow and\nthe .flow_from_directory methods. SDG also moves more configutation\nand setting to the instance and with the .flow_from_dataframe having\nfew arguments.\n\n##### Arguments\n\n- source (path or url): raster source\n- width (int): array size produced by generator\n- height (int): array size produced by generator\n- indexes (int or tuple of ints): one or more raster bands to sampled\n- interleave (str): type of interleave 'band' or 'pixel' (default='pixel')\n- resampling (int): One of the values from rasterio.enums.Resampling \n(default=Resampling.nearest)\n\nRaises RasterioIOError when the source is set if the file does not exist\nor remote resource is not available.\n\n###### Examples\n\n```Python\nfrom keras_spatial import SpatialDataGenerator\n\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\nsdg.width, sdg.height = 128,128\n```\nThe source must be set prior to calling flow_from_dataframe. Width and \nheight can set as attributes to the SDG or as arguments to \nflow_from _dataframe but specifying as arguments to flow_from_dataframe\nis preferred.\n\nThe _indexes_ argument selects bands in a multiband raster. By default \nall bands are read and the _indexes_ argument is updated when the raster \n_source_ is set.\n\nIn multiband situations, if _interleave_ is set to 'band' (the default) \nthe numpy array will have the shape [batch_size, bands, height, width]\nand is compatible with TensorFlow. If _interleave_ is set to 'pixel', the \nshape will be [batch_size, height, width, bands] which is not generally\nwhat you want, use with care.\n\n```Python\n# file.tif is a 5 band raster\nsdg = SpatialDataGenerator('/path/to/file.tif')\nsdg.interleave, sdg.indexes = 'band', -1\narr = next(sdg.flow_from_dataframe(df, 128, 128, batch_size=1))\nprint(arr.shape)\n> [1, 5, 128, 128]\n\nsdg.interleave, sdg.indexes = 'band', 1\narr = next(sdg.flow_from_dataframe(df, 128, 128, batch_size=1))\nprint(arr.shape)\n> [1, 1, 128, 128]\n\nsdg.interleave, sdg.indexes = 'pixel', [1,2,3]\narr = next(sdg.flow_from_dataframe(df, 128, 128, batch_size=1))\nprint(arr.shape)\n> [1, 128, 128, 3]\n\nsdg.interleave, sdg.indexes = 'pixel', 1\narr = next(sdg.flow_from_dataframe(df, 128, 128, batch_size=1))\nprint(arr.shape)\n> [1, 128, 128]\n```\n\nBecause more than one SDG is expected to be used simultaneously and SDGs \nare expected to having matching spatial requirements, the SDG class \nprovides a profile attribute that can be easily share arguments across \ninstances as shown below. Note: source is not part of the profile.\n\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\nsdg2 = SpatialDataGenerator()\nsdg2.profile = sdg.profile\nsdg2.source = '/path/to/file2.tif'\n```\n\n### SpatialDataGenerator methods\n\n#### flow_from_dataframe\n```Python\nflow_from_dataframe(geodataframe, width, height, batch_size)\n```\n\nCreates a generator that returns a numpy ndarray of samples read from \nthe SDG source.\n\n##### Arguments\n- geodataframe (GeoDataFrame): a geodataframe with sample boundaries\n- width (int): width of array\n- height (int): height of array\n- batch_size (int): number of samples to returned by generator\n\n##### Returns\n\nA generator of numpy ndarrays of the shape [batch_size, height, width, bands].\n\n##### Example\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ngen = sdg.flow_from_dataframe(df, 128, 128)\narr = next(gen)\n```\n\n#### random_grid\n```Python\nrandom_grid(width, height, count, units='native')\n```\n\nCreates a geodataframe suitable to passing to the flow_from_dataframe \nmethod. The grid module provides a similar function using passed using \nspatial extents.\n\n##### Arguments\n- width (int): width in pixels\n- height (int): height in pixels\n- count (int): number of samples\n- units (str): units for width and height, either native (projection units) or in pixels\n\n##### Returns\nA GeoDataFrame defining the polygon boundary of each sample.\n\n##### Example\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ndf = sdg.random_grid(200, 200, 1000)\n```\n\n#### regular_grid\n```Python\nregular_grid(width, height, overlap=0.0, units='native')\n```\n\nCreates a geodataframe suitable to passing to the flow_from_dataframe \nmethod. The sample module provides a similar function using passed using \nspatial extents.\n\n##### Arguments\n- width (int): width in pixels\n- height (int): width in pixels\n- overlap (float): percentage of overlap (default=0.0)\n- units (str): units for width and height, either native or in pixels\n\n##### Returns\nA GeoDataFrame defining the polygon boundary of each sample.\n\n##### Example\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ndf = sdg.regular_grid(200, 200)\n```\n\n### File Generation and File Caching\n\nKeras Spatial provides tools to utilize SDGs and GeoDataFrames to\nsimplify the generation of individual samples in the form of numpy arrays.\nA FileCache class provides a flow_from_files method to create a generator\nthat reads directly from numpy files.\n\nThe following code will generate 10 samples from the source TIF file\nand save them as numpy arrays. The filenames is a pandas Series using the\nsame index as the initial GeoDataFrame so that it can be easily joined.\n\n```Python\nsdg = SpatialDataGenerator(source='/path/to/file.tif')\ndf = sdg.random_grid(200, 200, count=10)\nfilenames = keras_spatial.filecache.flow_to_numpy('/local/path')\n```\n\nThis second examples finds the files on the numpy files on the local \ndisk and create a generator.\n\n```Python\nfc = keras_spatial.filecache.FileCache('looal/path')\nfc.find_file()\nmodel(fc.flow_from_files())\n```\n\n## Full Example\n\n```python\nfrom keras_spatial import SpatialDataGenerator\nlabels = SpatialDataGenerator()\nlabels.source = '/path/to/labels.tif'\nlabels.width, labels.height = 128, 128\ndf = labels.regular_grid(200,200)\n\nsamples = SpatialDataGenerator()\nsamples.source = 'https://server.com/files/data.tif'\nsamples.width, samples.height = labels.width, label.height\n\ntrain_gen = zip(labels.flow_from_dataframe(df), patches.flow_from_dataframe(df))\nmodel(train_gen)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/IllinoisStateGeologicalSurvey/keras-spatial",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keras-spatial",
    "package_url": "https://pypi.org/project/keras-spatial/",
    "platform": "any",
    "project_url": "https://pypi.org/project/keras-spatial/",
    "project_urls": {
      "Homepage": "https://github.com/IllinoisStateGeologicalSurvey/keras-spatial"
    },
    "release_url": "https://pypi.org/project/keras-spatial/1.0.7/",
    "requires_dist": [
      "scipy",
      "rasterio",
      "geopandas",
      "netCDF4",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "Keras Data Generator class for remote spatial data.",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9062734,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b5461becacc2ea30febd340edb79585700121c9f9d4600e15c8da96fc9a74eb",
          "md5": "06685c5ace80f10f549ebeddbd8e3c55",
          "sha256": "b55ea7a5a1c37583339c8735c42c5a2004de31a262470796ee83006833ee1da0"
        },
        "downloads": -1,
        "filename": "keras-spatial-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "06685c5ace80f10f549ebeddbd8e3c55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14083,
        "upload_time": "2019-11-04T05:47:06",
        "upload_time_iso_8601": "2019-11-04T05:47:06.455213Z",
        "url": "https://files.pythonhosted.org/packages/2b/54/61becacc2ea30febd340edb79585700121c9f9d4600e15c8da96fc9a74eb/keras-spatial-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2734db6072e10b45d1e71b53db997af63f840c8589750c62a0afebb335c7cf83",
          "md5": "dfc67420d1902ec84d1b518037dbdec7",
          "sha256": "85abc80407c4a6b3331ea137f47992f88905fd41cc1285785caadfd83b5713b3"
        },
        "downloads": -1,
        "filename": "keras-spatial-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dfc67420d1902ec84d1b518037dbdec7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14120,
        "upload_time": "2019-11-04T14:23:30",
        "upload_time_iso_8601": "2019-11-04T14:23:30.248506Z",
        "url": "https://files.pythonhosted.org/packages/27/34/db6072e10b45d1e71b53db997af63f840c8589750c62a0afebb335c7cf83/keras-spatial-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db6c216a863712661f23cdcd0d86a686243249fe61e410d6bc742d7ce2cfc125",
          "md5": "680afc6c893c95f465b2cf5f251b3474",
          "sha256": "c767aace7e342076909a6ce75fa6680fe963e11e546ed76ecb16758e6d29f5da"
        },
        "downloads": -1,
        "filename": "keras-spatial-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "680afc6c893c95f465b2cf5f251b3474",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14398,
        "upload_time": "2019-11-04T17:55:55",
        "upload_time_iso_8601": "2019-11-04T17:55:55.836632Z",
        "url": "https://files.pythonhosted.org/packages/db/6c/216a863712661f23cdcd0d86a686243249fe61e410d6bc742d7ce2cfc125/keras-spatial-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a93fadd83f6dba96fa9feab63c60589c497409857808076d049a27232823bf07",
          "md5": "73235b1069ebc36ea694bc2051527b48",
          "sha256": "c7c7d8c06b709af3874d79a17df935e48dbeaafde6ce9b967731b802af7eef77"
        },
        "downloads": -1,
        "filename": "keras-spatial-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "73235b1069ebc36ea694bc2051527b48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17820,
        "upload_time": "2019-11-21T19:40:37",
        "upload_time_iso_8601": "2019-11-21T19:40:37.496160Z",
        "url": "https://files.pythonhosted.org/packages/a9/3f/add83f6dba96fa9feab63c60589c497409857808076d049a27232823bf07/keras-spatial-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54ed961b0e5b0941585077d07988871bf4f3c9faaf6eb159943c87fdf28e9579",
          "md5": "588ec43b8d8eb82fa8c85377fad7bb71",
          "sha256": "6b87b7c9b8ac3701e0c72889b753eab1098166f404fb666d69fc7a4045012188"
        },
        "downloads": -1,
        "filename": "keras_spatial-1.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "588ec43b8d8eb82fa8c85377fad7bb71",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22999,
        "upload_time": "2020-11-03T15:48:21",
        "upload_time_iso_8601": "2020-11-03T15:48:21.948456Z",
        "url": "https://files.pythonhosted.org/packages/54/ed/961b0e5b0941585077d07988871bf4f3c9faaf6eb159943c87fdf28e9579/keras_spatial-1.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7fc6dfb6b356eafc7fe4f18a08773b6a9813ea3b7b1396e75a8ec2b2e9d74b8",
          "md5": "43117d11389a841658c100e0030306c0",
          "sha256": "bea50f56813fe6c22290faf858fe2a4c1bf3adf17f0e96da2553425c70277df3"
        },
        "downloads": -1,
        "filename": "keras-spatial-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "43117d11389a841658c100e0030306c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 177078,
        "upload_time": "2020-11-03T15:48:23",
        "upload_time_iso_8601": "2020-11-03T15:48:23.274854Z",
        "url": "https://files.pythonhosted.org/packages/d7/fc/6dfb6b356eafc7fe4f18a08773b6a9813ea3b7b1396e75a8ec2b2e9d74b8/keras-spatial-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c491fb91f09a2ed718110e5a9cf5a67b38370fa0cf50910f561284e57784ac0",
          "md5": "52ebac8b377f40e691847c55d83f885f",
          "sha256": "f3f2ee9220e2ca1e3917ae0ecb25313cb895ad780c6a0acade220da3ea1af019"
        },
        "downloads": -1,
        "filename": "keras_spatial-1.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52ebac8b377f40e691847c55d83f885f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23146,
        "upload_time": "2021-01-05T21:26:55",
        "upload_time_iso_8601": "2021-01-05T21:26:55.059669Z",
        "url": "https://files.pythonhosted.org/packages/8c/49/1fb91f09a2ed718110e5a9cf5a67b38370fa0cf50910f561284e57784ac0/keras_spatial-1.0.6-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Bug in regular_grid."
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5c60d97ad7565c22a058c77e4d45179a7de57664439587996789fea1b731b0e",
          "md5": "12ed91c000a6e7ae58b3ccf38c460827",
          "sha256": "533040666012057efd40fe395ed8d53823bc4630912d5fd61678f549656e5e2a"
        },
        "downloads": -1,
        "filename": "keras-spatial-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "12ed91c000a6e7ae58b3ccf38c460827",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 177469,
        "upload_time": "2021-01-05T21:26:56",
        "upload_time_iso_8601": "2021-01-05T21:26:56.413767Z",
        "url": "https://files.pythonhosted.org/packages/f5/c6/0d97ad7565c22a058c77e4d45179a7de57664439587996789fea1b731b0e/keras-spatial-1.0.6.tar.gz",
        "yanked": true,
        "yanked_reason": "Bug in regular_grid."
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65660271332a691b1739409d7f7d67d45c94e407d6050bb89aef5d11ca57dd74",
          "md5": "04a7a4167a6d015b87ccfabd69aaab44",
          "sha256": "a7ab09640f1ccbcd6d53aaa61393fd1466b3ddcd1d0a1cdf650dfeeec5a5b561"
        },
        "downloads": -1,
        "filename": "keras_spatial-1.0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04a7a4167a6d015b87ccfabd69aaab44",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22461,
        "upload_time": "2021-01-06T00:24:48",
        "upload_time_iso_8601": "2021-01-06T00:24:48.256445Z",
        "url": "https://files.pythonhosted.org/packages/65/66/0271332a691b1739409d7f7d67d45c94e407d6050bb89aef5d11ca57dd74/keras_spatial-1.0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "257829cadb7877b03315caef4d94555741c1ae1edb30624d0c3d904353e2f944",
          "md5": "f7416f81e8eca0c3a0620b3bbeb5cd7d",
          "sha256": "6dead252bc2c4b36bd996321a7e73f7c705ff8f036d9efd0d4692248c2223334"
        },
        "downloads": -1,
        "filename": "keras-spatial-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f7416f81e8eca0c3a0620b3bbeb5cd7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 177172,
        "upload_time": "2021-01-06T00:24:49",
        "upload_time_iso_8601": "2021-01-06T00:24:49.535339Z",
        "url": "https://files.pythonhosted.org/packages/25/78/29cadb7877b03315caef4d94555741c1ae1edb30624d0c3d904353e2f944/keras-spatial-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65660271332a691b1739409d7f7d67d45c94e407d6050bb89aef5d11ca57dd74",
        "md5": "04a7a4167a6d015b87ccfabd69aaab44",
        "sha256": "a7ab09640f1ccbcd6d53aaa61393fd1466b3ddcd1d0a1cdf650dfeeec5a5b561"
      },
      "downloads": -1,
      "filename": "keras_spatial-1.0.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "04a7a4167a6d015b87ccfabd69aaab44",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 22461,
      "upload_time": "2021-01-06T00:24:48",
      "upload_time_iso_8601": "2021-01-06T00:24:48.256445Z",
      "url": "https://files.pythonhosted.org/packages/65/66/0271332a691b1739409d7f7d67d45c94e407d6050bb89aef5d11ca57dd74/keras_spatial-1.0.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "257829cadb7877b03315caef4d94555741c1ae1edb30624d0c3d904353e2f944",
        "md5": "f7416f81e8eca0c3a0620b3bbeb5cd7d",
        "sha256": "6dead252bc2c4b36bd996321a7e73f7c705ff8f036d9efd0d4692248c2223334"
      },
      "downloads": -1,
      "filename": "keras-spatial-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "f7416f81e8eca0c3a0620b3bbeb5cd7d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 177172,
      "upload_time": "2021-01-06T00:24:49",
      "upload_time_iso_8601": "2021-01-06T00:24:49.535339Z",
      "url": "https://files.pythonhosted.org/packages/25/78/29cadb7877b03315caef4d94555741c1ae1edb30624d0c3d904353e2f944/keras-spatial-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}