{
  "info": {
    "author": "Dacian Popute",
    "author_email": "dacian@kuwaitnet.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "=====\nDjVue\n=====\n\n*Handle Django forms with Vue.js and Django REST Framework*\n\n\nThis project aims to help to build hybrid views that handle both templates renders as well as the REST API. Useful when the client doesn't have a SPA for the frontend but does need mobile apps or an API or developing an API in an existing project that is required. I suggest checking the ``example`` app for seeing a concrete implementation.\n\nThe trade-off made is getting rid of `Django Forms <https://docs.djangoproject.com/en/3.0/topics/forms/>`_ and replace them with `Django REST Framework form renderer. <https://www.django-rest-framework.org/topics/html-and-forms/#rendering-forms>`_\n\n============\nRequirements\n============\n\n* `Django <https://www.djangoproject.com/>`__ (2.2+)\n* `DRF <https://www.django-rest-framework.org>`_\n\nFor the form validation and submission:\n\n* `Vue.js 2.6 <https://vuejs.org/>`_\n* `VeeValidate <https://logaretm.github.io/vee-validate/>`_\n\n\n============\nInstallation\n============\n\nInstall ``djvue`` (or `download from PyPI <http://pypi.python.org/pypi/djvue>`__):\n\n.. code-block:: bash\n\n    pip install djvue\n\nAdd ``djvue`` to ``INSTALLED_APPS`` in ``settings.py``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        # other apps\n        \"djvue\",\n    )\n\nEnable session authentication for DRF.\n\n.. warning::\n    Failing in doing this will make all your views csrf exempted.\n\n\n.. code-block:: python\n\n    REST_FRAMEWORK = {\n        # ...\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n            'rest_framework.authentication.SessionAuthentication',\n            # ...\n        ),\n        # ...\n    }\n\n\nIf there are files to be uploaded via forms, it's required to include ``djvue.urls`` in your root ``urls.py``:\n\n.. code-block:: python\n\n    # For Django >= 2.2\n    urlpatterns += [\n        path('', include('djvue.urls'))\n    ]\n\n\n============\nHow it works\n============\n\n***********************\nRendering a simple form\n***********************\n\n\n`DjVue` allows you to easily render straightforward forms.\n\nDefine the serializer.\n\n.. code-block:: python\n\n    class LoginSerializer(serializers.Serializer):\n        email = serializers.EmailField(required=True)\n        password = serializers.CharField(write_only=True, style={\"input_type\": \"password\"})\n\n\nYour views will require to return the serializer definition and the rendered template on the GET requests, exactly like Django CBVs are doing.\n\n.. code-block:: python\n\n    from rest_framework.generics import CreateAPIView\n    from rest_framework.renderers import TemplateHTMLRenderer, JSONRenderer\n    from rest_framework.response import Response\n\n    from .serializers import LoginSerializer\n\n\n    class LoginView(CreateAPIView):\n        renderer_classes = [TemplateHTMLRenderer, JSONRenderer]\n        serializer_class = LoginSerializer\n        template_name = \"login.html\"\n\n        def get(self, request, *args, **kwargs):\n            return Response({\"serializer\": self.get_serializer()})\n\n\nInclude the prerequisites at the bottom of ``base.html``\n\n.. code-block:: HTML\n\n     {% load vue_tags %}\n     .... other scripts\n     {% vue_starter %}\n\n\n*******\nVue app\n*******\n\n\nEach form is another Vue instance.\n\n.. code-block:: HTML\n\n    <div id=\"login-app\" hidden>\n        ...\n    </div>\n\n.. note::\n    Hide the div holding the Vue.js app to avoid showing to the user un-rendered HTML using the ``hidden`` HTML attribute. It can be removed once the DOM has loaded, placed usually at the end of the script.\n\n\n***************\nForm definition\n***************\n\nvalidation-observer\n-------------------\n\nDefine the form using VeeValidates's `ValidationObserver <https://logaretm.github.io/vee-validate/api/validation-observer.html#scoped-slot-props>`_ component.\n\nrender_vue_form\n---------------\n\nRender the serializer as an HTML form using ``render_vue_form``. This template tag is a wrapper around the original DRF `render_form <https://www.django-rest-framework.org/topics/html-and-forms/#rendering-forms>`_ template tag which changes the field style.\n\n\n.. code-block:: HTML\n\n    <validation-observer ref=\"form\" v-slot=\"{ handleSubmit }\" mode=\"lazy\">\n        <form @submit.prevent=\"handleSubmit(submit)\" novalidate=\"true\">\n            <div class=\"row\">\n                <div class=\"col-sm\">\n                    {% render_vue_form serializer %}\n                </div>\n            </div>\n            <button class=\"btn btn-primary\">Login</button>\n        </form>\n    </validation-observer>\n\nrender_vue_field\n----------------\n\nFor a more granular control ``render_vue_field`` template tag can be used.\n\n\n.. code-block:: HTML\n\n    <validation-observer ref=\"form\" v-slot=\"{ handleSubmit }\" mode=\"lazy\">\n        <form @submit.prevent=\"handleSubmit(submit)\" novalidate=\"true\">\n            <div class=\"row\">\n                <div class=\"col-sm\">\n                    {% render_vue_field serializer.username %}\n                    {% render_vue_field serializer.password %}\n                </div>\n            </div>\n            <button class=\"btn btn-primary\">Login</button>\n        </form>\n    </validation-observer>\n\n\n**********\ndjVueMixin\n**********\n\n* Create a new Vue app and use djVueMixin which handles the form validation, file upload, and submission.\n* Define the form fields inside ``data`` method ``form`` object. Note that you need to define manually every form field that has to be passed to the server, excepting file fields, which will cover in another example later.\n\n* **Mandatory implementation input**\n    * **actionURL**: defines where the form has to be sent via a POST request to the server.\n    * **success**: method is called when the server returns a success response (status 200).\n\n.. code-block:: javascript\n\n\n    new Vue({\n        el: '#login-app',\n        mixins: [djVueMixin],\n        data() {\n            return {\n                actionURL: '{% url \"login\" %}',\n                form: {\n                    email: null,\n                    password: null\n                }\n            }\n        },\n        methods: {\n            success(response) {\n                window.location.href = \"{% url 'user:dashboard' %}\"\n            }\n        }\n\n    })\n    // remove hidden\n    let appEl = document.getElementById('login-app');\n    appEl.removeAttribute(\"hidden\");\n\n\n\n*****************************\nDisplay the validation errors\n*****************************\n\n* At this step, live validation is setup. Each form field is validated individually in the partial HTML field. It can be customized by creating a new `template pack <https://www.django-rest-framework.org/topics/html-and-forms/#using-template-packs>`_. Add a placeholder anywhere on the page for rendering forms global validation error like ``Server Error`` or better use a `toastr <https://github.com//s4l1h/vue-toastr>`_ or SnackBar.\n* Displaying server side field errors is implemented only for one nesting level, if you need more you should override ``error`` method from ``djVueMixin``.\n\n.. code-block:: HTML\n\n    <p v-for=\"error in nonFieldErrors\" :key=\"error\" class=\"text-danger\">{( error )}</p>\n\n\n**************\nAdvanced usage\n**************\n\n.. code-block:: python\n\n    from djvue.fields import FileField\n\n    class WorkSerializer(serializers.Serializer):\n        CHOICES = (\n            (\"cc\", \"Chocolate Tested\"),\n            (\"dreamer\", \"Dreamer\"),\n            (\"sp\", \"Smokes packing\"),\n        )\n        job = serializers.ChoiceField(choices=CHOICES)\n        position = serializers.CharField(required=False)\n\n\n    class ProfileSerializer(serializers.ModelSerializer):\n        username = serializers.CharField(max_length=25, min_length=3, required=True,)\n        email = serializers.EmailField(required=True)\n        password1 = serializers.CharField(\n            write_only=True,\n            style={\"input_type\": \"password\", \"rules\": \"password:@password2\"},\n        )\n        password2 = serializers.CharField(write_only=True, style={\"input_type\": \"password\"})\n        file = FileField(required=True)\n        working_place = WorkSerializer(write_only=True)\n\n        class Meta:\n            model = Profile\n            fields = (\n                \"username\",\n                \"email\",\n                \"password1\",\n                \"password2\",\n                \"file\",\n                \"working_place\",\n            )\n\n\nFile upload\n-----------\n\n* File upload starts as soon as ``onchange`` DOM event occurs. Behind the scene, a global view is uploading the file to a temporary location and returns to the client the ``path`` and the original ``filename`` which will be sent together with the form data upon submission. If you want to enforce special validation, DjVue batteries can be subclasses to create your custom logic.\n* To enable file upload, it's required to use DjVue's ``FileField`` instead of the default one.\n\nFileField\n^^^^^^^^^\n\nA hybrid file field. Renders an input type, accepts as input a dictionary containing the filename and the file path and it serializes the representation like a native serializer.FileField.\n\n``serializers.py``\n\n.. code-block:: python\n\n    from django.core.validators import FileExtensionValidator\n\n    from djvue.serializers import FileUploadSerializer\n\n\n    class PDFUploadSerializer(FileUploadSerializer):\n        \"\"\"\n        Allows only PDF files to be uploaded\n        \"\"\"\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.fields[\"file\"].validators.append(FileExtensionValidator(allowed_extensions=['pdf']))\n\n``views.py``\n\n.. code-block:: python\n\n    from djvue.views import FileUploadView\n\n    class PDFUploadView(FileUploadView):\n        serializer_class = PDFUploadSerializer\n\n``urls.py``\n\n.. code-block:: python\n\n        urlpatterns = [\n            path('<scrambled-url>', PDFUploadView.as_view(), name=\"pdf_upload\")\n           ]\n\n\nOnce the backend is implemented, the Vue.js app is left to be updated and that's all.\n\n.. code-block:: javascript\n\n    new Vue({\n        // ...\n        uploadURL: \"{% url 'pdf_upload' %}\"\n        // ...\n    })\n\n\nUpon form submission, the uploaded files must be linked with some model or pushed somewhere else. Let's see a trivial example of how that can be done, ``filename`` and ``path`` are always returned by the view using ``FileUploadSerializer`` and ``djVueMixin`` does the job of POSTing them to the ``actionURL`` together with the rest of the form fields.\n\nThe current example considers one url for all files which belong to the same form, for handling different validations per file, each field can have it's own upload url by defining ``upload_url`` in field style.\n\n.. code-block:: python\n\n    any_file = FileField()  # uses the uploadURL defined in the Vue instance\n    pdf = FileField(style={\"upload_url\": reverse_lazy(\"pdf_upload\")})\n    image = FileField(style={\"upload_url\": reverse_lazy(\"image_upload\")})\n\n``serializers.py``\n\n.. code-block:: python\n\n    class ProfileSerializer(serializers.ModelSerializer):\n        def create(self, validated_data):\n            user_file = validated_data.pop(\"file\", None)\n            profile = Profile.objects.create(**validated_data)\n            # # fetch the file from temporary dir\n            if user_file is not None and all(\n                [user_file.get(\"path\", False), user_file.get(\"filename\", False)]\n            ):\n                with open(user_file[\"path\"], \"rb\") as f:\n                    profile.file.save(user_file[\"filename\"], f)\n            return profile\n\n\nListFileField\n^^^^^^^^^^^^^\nImplements `multiple <https://www.w3schools.com/tags/att_input_multiple.asp>`_ upload, a list of FileField, inheriting all its features.\nOnce a file has been uploaded, the filename will be rendered under it.\n\n.. code-block:: python\n\n    multiple_file = ListFileField()  # uses the uploadURL defined in the Vue instance\n    multiple_pdf = ListFileField(style={\"upload_url\": reverse_lazy(\"example:pdf_upload\")})\n\n``serializers.py``\n\n.. code-block:: python\n\n    from django.core.files.base import ContentFile\n\n    class ProfileSerializer(serializers.ModelSerializer):\n        def create(self, validated_data):\n            # ...\n            multiple_file = validated_data.pop(\"multiple_file\", None)\n            profile = Profile(**validated_data)\n            profile.save()\n            # fetch the file from temporary dir\n            if multiple_file is not None and all(\n                [a_file.get(\"path\", False) and a_file.get(\"filename\", False) for a_file in multiple_file]\n            ):\n                for a_file in multiple_file:\n                    with open(a_file[\"path\"], \"rb\") as f:\n                        ProfileAttachment.objects.create(profile=profile, file=ContentFile(f.read(), a_file[\"filename\"]))\n\n\n\nFieldsets\n---------\n\nBy default, DjVue can handle also nested serializers with one nesting level, though if you need more, this behavior can be easily changed. Child serializer fields will be rendered in the same format that parent fields are. The only adjustment required to support them is to modify the ``form`` key from the ``data`` method to include an object which defines the child serializer fields rather than a key-value pair.\n\n.. code-block:: javascript\n\n    new Vue({\n        // ...\n        data() {\n            return {\n                form: {\n                    // ...\n                    working_place: {\n                        job: null,\n                        position: null\n                    }\n                }\n            }\n    },\n\n        // ...\n    })\n\n\nFormsets\n--------\n\nAt this moment formset are indeed supported, but they have to be written by hand. It's on the road map to provide utilities for them also. Here's a naive implementation of how they can be done:\n\n``serializers.py``\n\n.. code-block:: python\n\n    class AddressSerializer(serializers.Serializer):\n        COUNTRY_CHOICES = ((\"ro\", \"Romania\"), (\"de\", \"Germany\"), (\"kw\", \"Kuwait\"))\n        country = serializers.ChoiceField(choices=COUNTRY_CHOICES)\n        zip_code = serializers.CharField()\n        address = serializers.CharField(required=False)\n\n        class Meta:\n            list_serializer_class = serializers.ListSerializer\n\n\n    class ProfileSerializer(serializers.ModelSerializer):\n        # ...\n        addresses = AddressSerializer(many=True)\n\n``script.js``\n\n.. code-block:: javascript\n\n        let addressIndex = 0\n\n        new Vue({\n            // ..\n            data() {\n                return {\n                    formsetReady: false,\n                    formsetDefinition: {},\n                    form: {\n                        // ..\n                        addresses: [\n                            {\n                                id: `address-${addressIndex}`,\n                                country: null,\n                                zip_code: null,\n                                address: null\n                            }\n                        ]\n                    },\n                }\n            },\n            watch: {\n                options() {\n                    // set the formset definitions\n                    this.formsetDefinition = this.options.addresses.child.children\n                    this.formsetReady = true\n                }\n            },\n            methods: {\n                addAddress() {\n                    addressIndex++\n                    this.form.addresses.push({\n                        id: `address-${addressIndex}`,\n                        country: null,\n                        zip_code: null,\n                        address: null,\n                    })\n                },\n                deleteAddress(index) {\n                    this.form.addresses.splice(index, 1)\n                },\n\n            }\n        })\n\nPlace the formset anywhere inside the form definition wrapped with its own ``validation-observer``.\n\n``index.html``\n\n.. code-block:: HTML\n\n    <validation-observer ref=\"addresses\">\n        <div class=\"card mb-3\" v-for=\"(address, index) in form.addresses\" :key=\"address.id\">\n            <div class=\"card-body\">\n                <span class=\"float-right\" style=\"cursor: pointer\"\n                      @click=\"deleteAddress(index)\">x</span>\n                <h4 class=\"card-title\">Address</h4>\n                <div class=\"address-form\">\n\n                    <validation-provider :name=\"`country-${index}`\" rules=\"required\"\n                                         v-slot=\"{ errors, valid, invalid, validated }\" tag=\"div\"\n                                         class=\"form-group\">\n                        <select v-model=\"address.country\"\n                                class=\"form-control\"\n                                name=\"country\"\n                                :class=\"{'is-invalid': validated && invalid, 'is-valid': valid}\"\n                        >\n                            <option disabled value=\"\">Select country</option>\n\n                            <option v-for=\"opt in formsetDefinition.country.choices\"\n                                    :value=\"opt.value\">\n                                {( opt.display_name )}\n                            </option>\n\n                        </select>\n                        <p v-for=\"error in errors\" :key=\"error\" class=\"text-danger\">{( error )}</p>\n                    </validation-provider>\n\n                    <validation-provider :name=\"`zip_code-${index}`\" rules=\"required\"\n                                         v-slot=\"{ errors, valid, invalid, validated }\" tag=\"div\"\n                                         class=\"form-group\">\n                        <input v-model=\"address.zip_code\"\n                               type=\"text\"\n                               class=\"form-control mb-2\"\n                               :class=\"{'is-invalid': validated && invalid, 'is-valid': valid}\"\n                               placeholder=\"Zip Code\">\n                        <p v-for=\"error in errors\" :key=\"error\" class=\"text-danger\">{( error )}</p>\n                    </validation-provider>\n\n                    <validation-provider :name=\"`address-${index}`\" rules=\"required\"\n                                         v-slot=\"{ errors, valid, invalid, validated }\" tag=\"div\"\n                                         class=\"form-group\">\n                        <textarea v-model=\"address.address\"\n                                  type=\"text\"\n                                  class=\"form-control mb-2\"\n                                  :class=\"{'is-invalid': validated && invalid, 'is-valid': valid}\"\n                                  placeholder=\"Address\"></textarea>\n                        <p v-for=\"error in errors\" :key=\"error\" class=\"text-danger\">{( error )}</p>\n                    </validation-provider>\n\n                </div>\n            </div>\n        </div>\n    </validation-observer>\n\n\ni18n and custom field error messages\n------------------------------------\n\nBy default, error messages are rendered in the English language. In order to change them, add in ``settings.py`` the path of the file where new messages are located.\n\n``settings.py``\n\n.. code-block:: python\n\n    LANGUAGE_CODE = \"en-us\"\n\n    DJVUE_VV_LOCALE_PATH = \"example.locale.djvue_messages\"\n\nThis file must contain a dictionary that matches the language codes defined in  `LANGUAGES <https://docs.djangoproject.com/en/3.0/ref/settings/#languages>`_ or if your project is not multilingual and if you need to override the default messages, define a dictionary with one key which is matching `LANGUAGE_CODE <https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-LANGUAGE_CODE>`_ value. The children key which holds the messages must match the `VeeValidate keys  <https://github.com/logaretm/vee-validate/tree/master/locale>`_.\n\n``djvue_messages.py``\n\n.. code-block:: python\n\n    vv_locale = {\n        \"en-us\": {\n            \"en\": {\n                \"messages\": {\n                    \"alpha\": \"This field may only contain alphabetic characters.\",\n                }\n            }\n        },\n    }\n\n\n=====\nTODOs\n=====\n\n* Generate form object from the serializer definition.\n* Provide utilities for dynamic formsets.\n* Handle unlimited levels of nested serializers?\n\n=======\nCredits\n=======\n\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackagetoin\n\n\n\n\n=======\nHistory\n=======\n\n******************\n0.2.1 (2020-11-07)\n******************\n\n* File upload now supports `multiple` via `ListFileField`\n* Ability to define different upload URL for each file input\n* Small bugs.\n\n******************\n0.1.1 (2020-08-01)\n******************\n\n* Reactive files object\n* Add docs for render_vue_field\n* Small bugs.\n\n******************\n0.1.0 (2020-07-21)\n******************\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KuwaitNET/djvue",
    "keywords": "djvue",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djvue",
    "package_url": "https://pypi.org/project/djvue/",
    "platform": "",
    "project_url": "https://pypi.org/project/djvue/",
    "project_urls": {
      "Homepage": "https://github.com/KuwaitNET/djvue"
    },
    "release_url": "https://pypi.org/project/djvue/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mix Vue.js with DRF form renderer in Django templates",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8602931,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20af8b78dcfc1756e2db56048be03f42d11c286bbfaea7eb5c471247ca31f064",
          "md5": "76724d2fc30d86452e4376faaeab22ae",
          "sha256": "141b70ea00a3f0d15b283a3bf95633cbe11c9b56bdbd11e8ce1977bbe255fe3f"
        },
        "downloads": -1,
        "filename": "djvue-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76724d2fc30d86452e4376faaeab22ae",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 241949,
        "upload_time": "2020-07-21T19:35:46",
        "upload_time_iso_8601": "2020-07-21T19:35:46.755672Z",
        "url": "https://files.pythonhosted.org/packages/20/af/8b78dcfc1756e2db56048be03f42d11c286bbfaea7eb5c471247ca31f064/djvue-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6ad789596f9b145ef8c6693dcd03fb8c49928abbbb6843e050213fb7b527cdb",
          "md5": "d0d1701f9f1e34656fc89b08719e4358",
          "sha256": "77dec260860ba7316f058f03bcb5c5d0fc6f36302695152867b9e95bf9313b85"
        },
        "downloads": -1,
        "filename": "djvue-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d0d1701f9f1e34656fc89b08719e4358",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 238008,
        "upload_time": "2020-07-21T19:35:49",
        "upload_time_iso_8601": "2020-07-21T19:35:49.738115Z",
        "url": "https://files.pythonhosted.org/packages/a6/ad/789596f9b145ef8c6693dcd03fb8c49928abbbb6843e050213fb7b527cdb/djvue-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe6dbb50d314f341e14439292049d725311842e3af2334de2b72bb4be61f80be",
          "md5": "2d745bd9eb64f170717f2604e9f7a0a9",
          "sha256": "1ca97b9361f9386aaaa2ff84002bc4f99a9032c76da9eba2aeef0fd9d9ca29b0"
        },
        "downloads": -1,
        "filename": "djvue-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d745bd9eb64f170717f2604e9f7a0a9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 242107,
        "upload_time": "2020-08-01T16:18:13",
        "upload_time_iso_8601": "2020-08-01T16:18:13.260450Z",
        "url": "https://files.pythonhosted.org/packages/fe/6d/bb50d314f341e14439292049d725311842e3af2334de2b72bb4be61f80be/djvue-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b84e325bfdcd08356847b5d30b09c069d79840b35ed27ede16604ca2bf7b41e3",
          "md5": "4c20743edb767f48d2709aad48a37616",
          "sha256": "c0dd95dcc564007193eefff775478f9acfa6806e30b3d1ba12db917d680471e4"
        },
        "downloads": -1,
        "filename": "djvue-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4c20743edb767f48d2709aad48a37616",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 238254,
        "upload_time": "2020-08-01T16:18:16",
        "upload_time_iso_8601": "2020-08-01T16:18:16.608135Z",
        "url": "https://files.pythonhosted.org/packages/b8/4e/325bfdcd08356847b5d30b09c069d79840b35ed27ede16604ca2bf7b41e3/djvue-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26d66a8c269142987940f06747db1866d66a0eaa83eb99ed65256aeb1476bb9a",
          "md5": "51cf5cedb56189e07f5b4397c1e1f37c",
          "sha256": "1bb6635c8e754e7be0332b920335d92601d07594d8babbb0c46d7c7af94933ff"
        },
        "downloads": -1,
        "filename": "djvue-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51cf5cedb56189e07f5b4397c1e1f37c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 242281,
        "upload_time": "2020-09-12T09:54:19",
        "upload_time_iso_8601": "2020-09-12T09:54:19.594380Z",
        "url": "https://files.pythonhosted.org/packages/26/d6/6a8c269142987940f06747db1866d66a0eaa83eb99ed65256aeb1476bb9a/djvue-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb9f80baa80ff0e714c775352f938d54312a4cceb5ef39b5a42f66e467f0dd8",
          "md5": "3ad44208ca57eea89a2371868e6e90a8",
          "sha256": "39f2e35619bf83558e289c9cc20c08a4b095ad9145f7302045a51870a894e34d"
        },
        "downloads": -1,
        "filename": "djvue-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3ad44208ca57eea89a2371868e6e90a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 238590,
        "upload_time": "2020-09-12T09:54:23",
        "upload_time_iso_8601": "2020-09-12T09:54:23.813288Z",
        "url": "https://files.pythonhosted.org/packages/3b/b9/f80baa80ff0e714c775352f938d54312a4cceb5ef39b5a42f66e467f0dd8/djvue-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a85412577ab3ed6f04166307068ba800c8957b4e1d5b3d082d6fcfa1f43bb8cc",
          "md5": "0ff18cde65736fc09f506b75a917007c",
          "sha256": "d454829e3642b73ea44d42035c828df24a6f85e6ae1750b8621c8e2fbc225b58"
        },
        "downloads": -1,
        "filename": "djvue-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ff18cde65736fc09f506b75a917007c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 243522,
        "upload_time": "2020-11-07T10:04:44",
        "upload_time_iso_8601": "2020-11-07T10:04:44.099007Z",
        "url": "https://files.pythonhosted.org/packages/a8/54/12577ab3ed6f04166307068ba800c8957b4e1d5b3d082d6fcfa1f43bb8cc/djvue-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61a4da4c878e60bce0b773f5839c2c007efe711c081ebc87fba9da37ce9fbebe",
          "md5": "37bd9322cf7a8e8978369b940feba6c8",
          "sha256": "4c50a43a7073a3156cf5c7ea7ef7705a924dc3bb2cc0c220f0f4d1da35ad9c47"
        },
        "downloads": -1,
        "filename": "djvue-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "37bd9322cf7a8e8978369b940feba6c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 244760,
        "upload_time": "2020-11-07T10:04:45",
        "upload_time_iso_8601": "2020-11-07T10:04:45.998044Z",
        "url": "https://files.pythonhosted.org/packages/61/a4/da4c878e60bce0b773f5839c2c007efe711c081ebc87fba9da37ce9fbebe/djvue-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a85412577ab3ed6f04166307068ba800c8957b4e1d5b3d082d6fcfa1f43bb8cc",
        "md5": "0ff18cde65736fc09f506b75a917007c",
        "sha256": "d454829e3642b73ea44d42035c828df24a6f85e6ae1750b8621c8e2fbc225b58"
      },
      "downloads": -1,
      "filename": "djvue-0.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0ff18cde65736fc09f506b75a917007c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 243522,
      "upload_time": "2020-11-07T10:04:44",
      "upload_time_iso_8601": "2020-11-07T10:04:44.099007Z",
      "url": "https://files.pythonhosted.org/packages/a8/54/12577ab3ed6f04166307068ba800c8957b4e1d5b3d082d6fcfa1f43bb8cc/djvue-0.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61a4da4c878e60bce0b773f5839c2c007efe711c081ebc87fba9da37ce9fbebe",
        "md5": "37bd9322cf7a8e8978369b940feba6c8",
        "sha256": "4c50a43a7073a3156cf5c7ea7ef7705a924dc3bb2cc0c220f0f4d1da35ad9c47"
      },
      "downloads": -1,
      "filename": "djvue-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "37bd9322cf7a8e8978369b940feba6c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 244760,
      "upload_time": "2020-11-07T10:04:45",
      "upload_time_iso_8601": "2020-11-07T10:04:45.998044Z",
      "url": "https://files.pythonhosted.org/packages/61/a4/da4c878e60bce0b773f5839c2c007efe711c081ebc87fba9da37ce9fbebe/djvue-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}