{
  "info": {
    "author": "Graham Beland",
    "author_email": "gbeland@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Hardware"
    ],
    "description": "Introduction\n============\n.. image:: https://readthedocs.org/projects/CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart/badge/?version=latest\n    :target: https://CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/discord/327254708534116352.svg\n    :target: https://adafru.it/discord\n    :alt: Discord\n.. image:: https://github.com/gbeland/CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart/workflows/Build%20CI/badge.svg\n    :target: https://github.com/gbeland/CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart/actions\n    :alt: Build Status\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: Code Style: Black\n\nCircuitPython library for DFROBOT Gravity: I2C to Dual UART Module\n\n.. image:: https://user-images.githubusercontent.com/70548834/187725830-5e979aee-c291-4bbb-9eaa-9b412f353efd.jpg\n    :width: 400\n    :target: https://www.dfrobot.com/product-2001.html\n    :alt: Gravity: I2C to Dual UART Module (SKU:DFR0627)\n\n* `Gravity: I2C to Dual UART Module (SKU:DFR0627) <https://www.dfrobot.com/product-2001.html>`_\n* `Extra Wiki information  <https://wiki.dfrobot.com/Gravity%3A%20IIC%20to%20Dual%20UART%20Module%20SKU%3A%20DFR0627>`_\n\nDependencies\n=============\nThis driver depends on:\n\n* `Adafruit CircuitPython <https://github.com/adafruit/circuitpython>`_\n* `Bus Device <https://github.com/adafruit/Adafruit_CircuitPython_BusDevice>`_\n* `DFROBOT Gravity: I2C to Dual UART Module Hardware <https://www.dfrobot.com/product-2001.html>`_\n\nPlease ensure all dependencies are available on the CircuitPython filesystem.\nThis is easily achieved by downloading\n`the Adafruit library and driver bundle <https://circuitpython.org/libraries>`_\nor individual libraries can be installed using\n`circup <https://github.com/adafruit/circup>`_.\n\nInstalling from PyPI\n=====================\nOn supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally `from\nPyPI <https://pypi.org/project/CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart/>`_.\nTo install for current user:\n\n.. code-block:: shell\n\n    pip3 install CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart\n\nTo install system-wide (this may be required in some cases):\n\n.. code-block:: shell\n\n    sudo pip3 install CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart\n\nTo install in a virtual environment in your current project:\n\n.. code-block:: shell\n\n    mkdir project-name && cd project-name\n    python3 -m venv .env\n    source .env/bin/activate\n    pip3 install CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart\n\n\n\nInstalling to a Connected CircuitPython Device with Circup\n==========================================================\n\nMake sure that you have ``circup`` installed in your Python environment.\nInstall it with the following command if necessary:\n\n.. code-block:: shell\n\n    pip3 install circup\n\nWith ``circup`` installed and your CircuitPython device connected use the\nfollowing command to install:\n\n.. code-block:: shell\n\n    circup install CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart\n\nOr the following command to update an existing version:\n\n.. code-block:: shell\n\n    circup update\n\nUsage Example\n=============\n.. code-block::\n\n    import time\n    import board\n    import CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart as DualUart\n\n    i2c = board.I2C()\n\n\n    iic_uart1 = DualUart.DFRobot_IIC_Serial(\n        i2c,\n        sub_uart_channel=DualUart.DFRobot_IIC_Serial.SUBUART_CHANNEL_1,\n        IA1=1,\n        IA0=1,\n    )\n\n    iic_uart2 = DualUart.DFRobot_IIC_Serial(\n        i2c,\n        sub_uart_channel=DualUart.DFRobot_IIC_Serial.SUBUART_CHANNEL_2,\n        IA1=1,\n        IA0=1,\n    )\n\n    try:\n        iic_uart1.begin(baud=9600, format=iic_uart1.IIC_Serial_8N1)\n        print(\"Opened: UART 1 \")\n    except Exception as e:\n        iic_uart1 = None\n        print(\"Error: Could not open UART 1 Exception: \" + str(e))\n\n    try:\n        iic_uart2.begin(baud=9600, format=iic_uart2.IIC_Serial_8N1)\n        print(\"Opened: UART 2\")\n    except Exception as e:\n        iic_uart2 = None\n        print(\"Error: Could not open UART 2 Exception: \" + str(e))\n\n    sendID = 1\n    sendDelayCount = 1\n\n    while True:\n        time.sleep(.3)\n        sendDelayCount -= 1\n        if sendDelayCount <= 0:\n            sendDelayCount = 10\n            iic_uart1.write(\"From1:\" + str(sendID))\n            iic_uart2.write(\"From2:\" + str(sendID))\n\n        if iic_uart1 is not None:\n            if iic_uart1.available():\n                s = \"\"\n                while iic_uart1.available():\n                    b = iic_uart1.read(1)\n                    s += chr(b[0])\n                print(\"<1:\" + s + \" len:\" + str(len(s)) + \">\")\n\n        if iic_uart2 is not None:\n            if iic_uart2.available():\n                s = \"\"\n                while iic_uart2.available():\n                    b = (iic_uart2.read(1))\n                    s += chr(b[0])\n                print(\"<2:\" + s + \" len:\" + str(len(s)) + \">\")\n\n\nAdditional connection information\n=================================\nThe DRF0627 comes with a cable that allows for connection to the CircuitPython hardware using a\nSparkFun STEMMA QT / Qwiic Breadboard Breakout Adapter Product ID: 4527 https://www.adafruit.com/product/4527\n\n.. image:: https://user-images.githubusercontent.com/70548834/187724117-4660a9b5-e877-4bf8-8dbe-a0c5a8d7ca6e.jpg\n    :width: 200\n    :target: https://www.adafruit.com/product/4527\n    :alt: SparkFun STEMMA QT / Qwiic Breadboard Breakout Adapter\n\nConnections:\n************\n.. code-block::\n\n    Black wire -> Stemma Ground\n    Red wire -> Stemma 3.3 V\n    Green wire -> Stemma SDA\n    Blue wire -> Stemma SCA\n\nTo test the connection the \"t\" and \"R\" pins can be connected together. If you tie the \"T\" and \"R\" pins between the same UART the data will echo back to you on the same port. If you tie the \"T\" and \"R\" pins from UART1 to UART 2 data will be send between the two ports.\n\nIf RS485 is desired you can use a RS485 adapter such as the \"SCM TTL to RS-485 Interface Module\"\n\n.. image:: https://user-images.githubusercontent.com/70548834/187728623-31a28fc7-3a15-42c7-ad91-6f9be4e81756.jpg\n    :width: 400\n    :target: https://protosupplies.com/product/scm-ttl-to-rs-485-interface-module/\n    :alt: SCM TTL to RS-485 Interface Module\n\nDocumentation\n=============\nAPI documentation for this library can be found on `Read the Docs <https://CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart.readthedocs.io/>`_.\n\nFor information on building library documentation, please check out\n`this guide <https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library/sharing-our-docs-on-readthedocs#sphinx-5-1>`_.\n\nContributing\n============\n\nContributions are welcome! Please read our `Code of Conduct\n<https://github.com/gbeland/CircuitPython_DFRobot_Gravity_DRF0627_I2C_Dual_Uart/blob/HEAD/CODE_OF_CONDUCT.md>`_\nbefore contributing to help this project stay welcoming.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gbeland/CircuitPython_DFRobot_Gravity_DRF0627_Dual_Uart.git",
    "keywords": "adafruit blinka circuitpython micropython rs232 uart serial rs485 serial communications i2c iot original uart rs232 rs485 qwiic stemma blinkaCircuit",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "circuitpython-dfrobot-gravity-drf0627-dual-uart",
    "package_url": "https://pypi.org/project/circuitpython-dfrobot-gravity-drf0627-dual-uart/",
    "platform": null,
    "project_url": "https://pypi.org/project/circuitpython-dfrobot-gravity-drf0627-dual-uart/",
    "project_urls": {
      "Homepage": "https://github.com/gbeland/CircuitPython_DFRobot_Gravity_DRF0627_Dual_Uart.git"
    },
    "release_url": "https://pypi.org/project/circuitpython-dfrobot-gravity-drf0627-dual-uart/1.0.14/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "CircuitPython library for the DF DFRobot_Gravity_DRF0627_Dual_Uart",
    "version": "1.0.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14954944,
  "releases": {
    "1.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4cdea01e92d9ceaa9d6975e1a676158065b5545718eafa3db15d7d899e2732b",
          "md5": "de7fcb50448c646a84fa1b372b06742e",
          "sha256": "fb704c069ad4da994706c2f53968c4b59b651d47fd229ea8e351fa793bc50c7e"
        },
        "downloads": -1,
        "filename": "circuitpython_dfrobot_gravity_drf0627_dual_uart-1.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "de7fcb50448c646a84fa1b372b06742e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34018,
        "upload_time": "2022-08-31T21:07:53",
        "upload_time_iso_8601": "2022-08-31T21:07:53.839857Z",
        "url": "https://files.pythonhosted.org/packages/c4/cd/ea01e92d9ceaa9d6975e1a676158065b5545718eafa3db15d7d899e2732b/circuitpython_dfrobot_gravity_drf0627_dual_uart-1.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14430d660606e21be9262bb33fd84f4d83f76a1e18d928f217a7e5e34f0de163",
          "md5": "d280074944c80f8b9a591bf2796c23cb",
          "sha256": "d40734332fef73b3e657d73dcfd1fc4bf30b77ec40789328cd43933cb2687b68"
        },
        "downloads": -1,
        "filename": "circuitpython_dfrobot_gravity_drf0627_dual_uart-1.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "d280074944c80f8b9a591bf2796c23cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34012,
        "upload_time": "2022-08-31T22:24:35",
        "upload_time_iso_8601": "2022-08-31T22:24:35.488056Z",
        "url": "https://files.pythonhosted.org/packages/14/43/0d660606e21be9262bb33fd84f4d83f76a1e18d928f217a7e5e34f0de163/circuitpython_dfrobot_gravity_drf0627_dual_uart-1.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14430d660606e21be9262bb33fd84f4d83f76a1e18d928f217a7e5e34f0de163",
        "md5": "d280074944c80f8b9a591bf2796c23cb",
        "sha256": "d40734332fef73b3e657d73dcfd1fc4bf30b77ec40789328cd43933cb2687b68"
      },
      "downloads": -1,
      "filename": "circuitpython_dfrobot_gravity_drf0627_dual_uart-1.0.14.tar.gz",
      "has_sig": false,
      "md5_digest": "d280074944c80f8b9a591bf2796c23cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34012,
      "upload_time": "2022-08-31T22:24:35",
      "upload_time_iso_8601": "2022-08-31T22:24:35.488056Z",
      "url": "https://files.pythonhosted.org/packages/14/43/0d660606e21be9262bb33fd84f4d83f76a1e18d928f217a7e5e34f0de163/circuitpython_dfrobot_gravity_drf0627_dual_uart-1.0.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}