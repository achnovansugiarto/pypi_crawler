{
  "info": {
    "author": "AVALDATA",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: Japanese",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "acapy package (Python bindings for AVALDATA AcapLib2 )\n\n# Index\n\n- [**Installation**](#Installation)\n- [**Requirment**](#Requirment)\n- [**LICENSE**](#LICENSE)\n- [**AcaPy Class**](#AcaPy-Class)\n  - [Examples](#Examples)\n  - [Constructors](#Constructors)\n  - [Properties](#Properties)\n  - [Methods](#Methods)\n- [**GraphicsBox Class**](#GraphicsBox-Class)\n  - [Constructors](#Constructors-2)\n  - [Properties](#Properties-2)\n  - [Methods](#Methods-2)\n- [**Changelog**](#Changelog)\n\n\n\n# Installation\n\n```\npip install acapy\n```\n\n\n\n# Requirment\n\n- AcapLib2 (AVALDATA SDK)\n- numpy\n- Pillow\n\n※サンプルの実行にはOepnCVが必要になります。\n\n<div style=\"page-break-after:always\"></div>\n\n# LICENSE\n\n```\nBSD 3-Clause License\n\nCopyright (c) 2021, AVALDATA\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n<div style=\"page-break-after:always\"></div>\n\n# AcaPy Class\n\nAcapLib2をPythonから使えるようにしたクラスです。\n\n\n\n## Examples\n\n### Snap sample\n\n画像１枚を繰り返し取得します。\n高速に画像を連続取込する場合は、[Grab sample](#Grab-sample)を参照下さい。\n\n```Python\nimport sys\n\nimport cv2\nimport acapy\n\n# AcaPyクラスのインスタンス\ncapture = acapy.AcaPy()\n\nif capture.is_opened == False:\n    # キャプチャボードが見つからない、別のアプリが起動しているときは終了\n    del(capture)\n    sys.exit(0)\n\n# iniファイル（ボード設定ファイル）の読込\n# iniファイルは実際に使用するカメラ用のファイルを指定してください。\ncapture.load_inifile(\"./AreaSensor_mono.ini\")\n\nwhile(True):\n    # 画像を１枚取得\n    ret, frame = capture.snap() # カラーのときはBGR(OpenCVの画像データと互換)\n    # 画像の表示\n    cv2.imshow (\"Image\", frame )\n\n    if cv2.waitKey(1) > 0:\n        # キー入力待ち\n        break\n\ncv2.destroyAllWindows()\n```\n\n<div style=\"page-break-after:always\"></div>\n\n### Grab sample\n\n連続的に画像を取り込みます。\n\n```python\nimport sys\n\nimport cv2\nimport acapy\n\n# AcaPyクラスのインスタンス\ncapture = acapy.AcaPy()\n\nif capture.is_opened == False:\n    # キャプチャボードが見つからない、別のアプリが起動しているときは終了\n    del(capture)\n    sys.exit(0)\n\n# iniファイル（ボード設定ファイル）の読込\n# iniファイルは実際に使用するカメラ用のファイルを指定してください。\ncapture.load_inifile(\"./AreaSensor_mono.ini\")\n\n# mem_numの変更例\n#capture.mem_num = 10\n\n# grab(連続画像取込)の開始\ncapture.grab_start()\n\nwhile(True):\n    \n    # 前回のフレームの次から今回のフレームまでを取得\n    ret, frames, count, frame_no = capture.read_frames()# カラーのときはBGR(OpenCVの画像データと互換)\n    if ret < 0:\n        # 画像メモリの上書きが発生している\n        # iniファイルのUSER_MEMORY_NUMの値、もしくはAcaPyクラスのmem_numプロパティの値を大きくすること\n        pass\n    elif ret == acapy.AcaPy.ERROR:\n        # フレームエンドのタイムアウト発生時、Grabのループ停止\n        break\n        \n    # 最後に取得した画像を表示\n    cv2.imshow (\"Image\", frames[count - 1] )\n\n    if cv2.waitKey(1) > 0:\n        # キー入力待ち\n        break\n\n# grab(連続画像取込)の停止\ncapture.grab_stop()\n\ncv2.destroyAllWindows()\n```\n\n<div style=\"page-break-after:always\"></div>\n\n## Constructors\n\nボード番号、チャンネル番号を指定して、画像入力ボードをオープンします。\n実際にボードがオープン出来たかどうかは、**is_opened**プロパティで確認してください。\n\n```\ndef __init__(self, board_id: int = 0, ch: int = 1, debug_print: bool = True):\n```\n\n ***パラメータ***\n\n| 名前        | 型   | 説明                                                         |\n| ----------- | ---- | ------------------------------------------------------------ |\n| board_id    | int  | 0以上のボード番号を指定します。                              |\n| ch          | int  | 1以上のチャンネル番号を指定します。                          |\n| debug_print | bool | Trueを指定した場合、AcaPyクラスメソッドにエラー等が発生した場合、コンソールにエラー情報が表示されます。Falseを指定すると何も表示されません。 |\n\n## Properties\n\nプロパティの値は、値を設定後、refrect_param()メソッドを実行すると設定が画像入力ボードに反映されます。\nrefrect_param()メソッドを実行し忘れた場合、grab_start()メソッド内でrefrect_param()メソッドが実行されます。\n\n| Properties                    | Descriptoin                                                  | Get/Set | ini  parameter                           |\n| ----------------------------- | ------------------------------------------------------------ | :-----: | ---------------------------------------- |\n| acaplib2_version              | AcapLib2のDLLバージョンを取得します。                        |   ●/-   |                                          |\n| a_cw_ccw                      | エンコーダA相の回転方向を取得します。                        |   ●/-   |                                          |\n| b_cw_ccw                      | エンコーダB相の回転方向を取得します。                        |   ●/-   |                                          |\n| bayer_enable                  | ベイヤー変換の有効／無効を取得・設定します。                 |   ●/●   | USER_BAYER_ENABLE                        |\n| bayer_grid                    | ベイヤー変換開始位置のパターンを取得・設定します。           |   ●/●   | USER_BAYER_GRID                          |\n| bayer_input_bit               | Bayer画像のBit数を取得・設定します。                         |   ●/●   | USER_BAYER_INPUT_BIT                     |\n| bayer_lut_data                | 編集するLUTデータ配列(リスト)を取得・設定します。            |   ●/●   |                                          |\n| bayer_lut_edit                | BayerLUTの編集を開始・停止します。                           |   ●/●   |                                          |\n| bayer_output_bit              | Bayer変換後のBit数を取得・設定します。                       |   ●/●   | USER_BAYER_OUTPUT_BIT                    |\n| board_bit                     | ボードで確保する画像用メモリのビット幅を取得します。         |   ●/-   | USER_GRABBER_BIT_DEPTH                   |\n| board_id                      | 初期化されたボードIDを取得します。                           |   ●/-   |                                          |\n| board_error                   | ボードエラーを取得・クリアします。                           |   ●/●   |                                          |\n| board_name                    | 初期化されたボード名を取得します。                           |   ●/-   |                                          |\n| board_temp                    | 基板温度を取得します。                                       |   ●/-   |                                          |\n| buffer_zero_fill              | 初期化時にバッファをゼロクリアするかを取得・設定します。     |   ●/●   |                                          |\n| camera_bit                    | カメラから入力する画像のビット数を取得・設定します。         |   ●/●   | USER_CAMERA_BIT_DEPTH                    |\n| camera_state                  | カメラの接続状態を取得します。                               |   ●/-   |                                          |\n| capture_flag                  | キャプチャ状況を取得します。                                 |   ●/-   |                                          |\n| cc_cycle                      | CC信号の周期[usec]を取得・設定します。                       |   ●/●   | USER_SW_TRIGGER_CYCLE                    |\n| cc_cycle_ex                   | CC信号の周期[100nsec]を取得・設定します。                    |   ●/●   | USER_SW_TRIGGER_CYCLE                    |\n| cc_delay                      | CC信号の出力遅延時間[usec]を取得・設定します。               |   ●/●   | USER_CC_DELAY                            |\n| cc_enable                     | CC信号出力の有効(1)／無効(0)を取得・設定します。             |   ●/●   | USER_SW_TRIGGER_ENABLE                   |\n| cc_out_no                     | CC信号の番号(1～4)を取得・設定します。                       |   ●/●   | USER_CL_CC_OUT_NO                        |\n| cc_polarity                   | CC信号の論理を取得・設定します。                             |   ●/●   | USER_SW_TRIGGER_POLARITY                 |\n| cc1_polarity                  | CC1信号の出力レベルを取得・設定します。                      |   ●/●   | USER_CL_CC1_POLARITY                     |\n| cc2_polarity                  | CC2信号の出力レベルを取得・設定します。                      |   ●/●   | USER_CL_CC2_POLARITY                     |\n| cc3_polarity                  | CC3信号の出力レベルを取得・設定します。                      |   ●/●   | USER_CL_CC3_POLARITY                     |\n| cc4_polarity                  | CC4信号の出力レベルを取得・設定します。                      |   ●/●   | USER_CL_CC4_POLARITY                     |\n| cc_stop                       | 画像入力停止後、CC出力を行うかの設定を取得・設定します。     |   ●/●   | USER_CC_STOP                             |\n| cancel_initialize             | 初期化と内部バッファ確保の設定を取得・設定します。           |   ●/●   | USER_CANCEL_INITIALIZE                   |\n| ch                            | 初期化されたチャンネル番号を取得します。                     |   ●/-   |                                          |\n| channel_num                   | ボードの総チャンネル数を取得します。                         |   ●/-   |                                          |\n| chatter_separate              | 外部トリガ検出無効時間の設定方法を取得・設定します。         |   ●/●   | USER_EXTERNAL_TRIGGER  _CHATTER_SEPARATE |\n| count_cc                      | CC信号の出力回数を取得します。                               |   ●/-   |                                          |\n| count_exttrig                 | EXTTRIG(外部トリガ)信号の入力回数を取得します。              |   ●/-   |                                          |\n| count_fval                    | FVAL信号の入力回数を取得します。                             |   ●/-   |                                          |\n| count_lval                    | LVAL信号の入力回数を取得します。                             |   ●/-   |                                          |\n| custom                        | FPGAカスタマイズが行われた番号を取得します。                 |   ●/-   |                                          |\n| cxp_acquision  _start_address | CXP規格のAcquisitionStartのアドレスを取得・設定します。      |   ●/●   | USER_CXP_ACQUISION  _START_ADDRESS       |\n| cxp_acquision  _start_value   | CXP規格のAcquisitionStartのアドレスに指定する値を取得・設定します。 |   ●/●   | USER_CXP_ACQUISION  _START_VALUE         |\n| cxp_acquision  _stop_address  | CXP規格のAcquisitionStopのアドレスを取得・設定します。       |   ●/●   | USER_CXP_ACQUISION  _STOP_ADDRESS        |\n| cxp_acquision  _stop_value    | CXP規格のAcquisitionStopのアドレスに指定する値を取得・設定します。 |   ●/●   | USER_CXP_ACQUISION  _STOP_VALUE          |\n| cxp_bitrate                   | CXPのビットレートを取得・設定します。                        |   ●/●   | USER_CXP_PHY_BITRATE                     |\n| cxp_link_speed                | CXPのリンク速度を取得・設定します。                          |   ●/●   | USER_CXP_PHY_LINKSPEED                   |\n| cxp_pixel_format              | CXP規格のPixelFormatアドレスに指定する値を取得・設定します。 |   ●/●   | USER_CXP_PIXEL_FORMAT                    |\n| cxp_pixel  _format_address    | CXP規格のPixelFormatアドレス値を取得・設定します。           |   ●/●   | USER_CXP_PIXEL  _FORMAT_ADDRESS          |\n| data_mask_lower               | カメラリンクポートA～Dのマスク値を取得・設定します。         |   ●/●   | USER_DATA_MASK_LOWER                     |\n| data_mask_upper               | カメラリンクポートE～Hのマスク値を取得・設定します。         |   ●/●   | USER_DATA_MASK_UPPER                     |\n| device                        | 実装されているデバイス名を取得します。                       |   ●/-   |                                          |\n| dval_enable                   | カメラデータ入力時のDVAL信号参照の有効(1)／無効(0)を取得・設定します。 |   ●/●   | USER_DVAL_SIGNAL_ENABLE                  |\n| encoder_abs_count             | エンコーダ絶対カウンタ値を取得します。                       |   ●/-   |                                          |\n| encoder_abs_start             | 絶多値エンコーダの開始／停止の制御値を取得・設定します。     |   ●/●   |                                          |\n| encoder_agr_count             | 相対位置エンコーダ使用時の一致パルス数を取得します。         |   ●/-   |                                          |\n| encoder_all_count             | 相対位置エンコーダ使用時の総カウント値を取得します。         |   ●/-   |                                          |\n| encoder_compare_reg_1         | エンコーダ比較レジスタ１の値を取得・設定します。             |   ●/●   | USER_ENCODER  _COMPARE_REG_1             |\n| encoder_compare_reg_2         | エンコーダ比較レジスタ2の値を取得・設定します。              |   ●/●   | USER_ENCODER  _COMPARE_REG_2             |\n| encoder_count                 | エンコーダ相対カウンタ値を取得します。                       |   ●/-   |                                          |\n| encoder_direction             | エンコーダ入力パルス方向を取得・設定します。                 |   ●/●   | USER_ENCODER_PULSE                       |\n| encoder_enable                | エンコーダの有効／無効／使用方法を取得・設定します。         |   ●/●   | USER_ENCODER_ENABLE                      |\n| encoder_mode                  | エンコーダ動作モードを取得・設定します。                     |   ●/●   | USER_ENCODER_MODE                        |\n| encoder_phase                 | エンコーダ入力パルス選択を取得・設定します。                 |   ●/●   | USER_ENCODER_PHASE                       |\n| encoder_start                 | 外部トリガをエンコーダで使用する方法を取得・設定します。     |   ●/●   | USER_ENCODER_START                       |\n| encoder_z_phase               | エンコーダ起動にZ相を使用するかの設定を取得・設定します。    |   ●/●   | USER_ENCODER_Z_PHASE                     |\n| exposure                      | CC信号の出力幅（露光時間）[usec]を取得・設定します。         |   ●/●   | USER_SW_TRIGGER_WIDTH                    |\n| exposure_ex                   | CC信号の出力幅（露光時間）[100nsec]を取得・設定します。      |   ●/●   | USER_SW_TRIGGER_WIDTH                    |\n| express_link                  | PCI-Expressバスに接続されているリンク幅を取得します。        |   ●/-   |                                          |\n| external_trigger_chatter      | 外部トリガ検出無効時間[usec]を取得・設定します。             |   ●/●   | USER_EXTERNAL_TRIGGER  _CHATTER          |\n| external_trigger_delay        | 外部トリガ検出遅延時間[usec]を取得・設定します。             |   ●/●   | USER_EXTERNAL_TRIGGER  _DELAY            |\n| external_trigger_enable       | 外部トリガに使用する信号選択を取得・設定します。             |   ●/●   | USER_EXTERNAL_TRIGGER  _ENABLE           |\n| external_trigger_mode         | 外部トリガを使用してCC信号を出力する方法を取得・設定します。 |   ●/●   | USER_EXTERNAL_TRIGGER  _POLARITY         |\n| fifo_full                     | FIFOステータスを取得します。                                 |   ●/-   |                                          |\n| fpga_temp                     | FPGA温度を取得します。                                       |   ●/-   |                                          |\n| fpga_version                  | FPGAバージョンを取得します。                                 |   ●/-   |                                          |\n| freq_a                        | エンコーダA相の周波数(Hz)を取得します。                      |   ●/-   |                                          |\n| freq_b                        | エンコーダB相の周波数(Hz)を取得します。                      |   ●/-   |                                          |\n| freq_fval                     | FVALの周波数(kHz)を取得します。                              |   ●/-   |                                          |\n| freq_lval                     | LVALの周波数(kHz)を取得します。                              |   ●/-   |                                          |\n| freq_ttl1                     | TTL1の周波数(Hz)を取得します。                               |   ●/-   |                                          |\n| freq_ttl2                     | TTL2の周波数(Hz)を取得します。                               |   ●/-   |                                          |\n| freq_z                        | エンコーダZ相の周波数(Hz)を取得します。                      |   ●/-   |                                          |\n| gpin_pol                      | GP_INのレベルをBit情報で取得します。                         |   ●/-   |                                          |\n| gpin_pin_sel                  | GP_INピン割込みピンを取得・設定します。                      |   ●/●   | USER_GPIN_SEL                            |\n| gpout_pol                     | GP_OUTピンの出力レベルを取得・設定します。                   |   ●/●   | USER_GPOUT_POL                           |\n| gpout_sel                     | GP_OUTピンの出力設定を取得・設定します。                     |   ●/●   | USER_GPOUT_SEL                           |\n| handle                        | 初期化されたボードハンドルを取得します。                     |   ●/-   |                                          |\n| height                        | 画像入力サイズの高さを取得・設定します。                     |   ●/●   | USER_Y_SIZE, USER_Y_TOTAL_SIZE           |\n| infrared_enable               | RGBIの有効／無効を取得・設定します。                         |   ●/●   | USER_INFRARED_ENABLE                     |\n| interval_exttrig_1            | 認識した外部トリガ間隔の時間（カウント値）の最新の値を取得します。 |   ●/-   |                                          |\n| interval_exttrig_2            | 認識した外部トリガ間隔の時間（カウント値）の２番目に新しい値を取得します。 |   ●/-   |                                          |\n| interval_exttrig_3            | 認識した外部トリガ間隔の時間（カウント値）の3番目に新しい値を取得します。 |   ●/-   |                                          |\n| interval_exttrig_4            | 認識した外部トリガ間隔の時間（カウント値）の4番目に新しい値を取得します。 |   ●/-   |                                          |\n| is_grab                       | Grab中かどうかを取得します。                                 |   ●/-   |                                          |\n| is_opened                     | ボードのOpenに成功したかどうかを取得します。                 |   ●/-   |                                          |\n| line_reverse                  | カメラから入力したラインデータの左右反転設定を取得・設定します。 |   ●/●   | USER_CAMERALINK  _LINE_REVERSE           |\n| interrupt_line                | １フレーム入力ライン数カウント間隔を取得・設定します。       |   ●/●   | USER_DATA_INTERRUT_LINE                  |\n| lval_delay                    | カメラから入力するLVALのX方向遅延量(clock)を取得・設定します。 |   ●/●   | USER_CAMERALINK  _LVAL_DELAY             |\n| lvds_cclk_sel                 | カメラ駆動クロックを取得・設定します。                       |   ●/●   | USER_LVDS_CCLK_SEL                       |\n| lvds_phase_sel                | 入力サンプリングの位相を取得・設定します。                   |   ●/●   | USER_LVDS_PAHSE_SEL                      |\n| lvds_synclt_sel               | SYNCLTピンの入出力を取得・設定します。                       |   ●/●   |                                          |\n| mem_num                       | リングバッファの画像面数を取得・設定します。                 |   ●/●   | USER_MEMORY_NUM                          |\n| narrow10bit_enable            | データ詰め転送の有効(1)／無効(0)を取得・設定します。         |   ●/●   | USER_NARROW10BIT_ENABLE                  |\n| pocl_lite_enable              | PoCL-Liteカメラ用設定の有効(1)／無効(0)を取得・設定します。  |   ●/●   | USER_POCL_LITE_ENABLE                    |\n| power_state                   | カメラ電源エラー状態を取得・クリアします。                   |   ●/●   |                                          |\n| power_supply                  | カメラへの給電状態を取得・設定します。                       |   ●/●   |                                          |\n| pix_shift                     | カメラから入力するデータを右シフトするビット数を取得・設定します。 |   ●/●   | USER_PIXEL_DATA_SHIFT                    |\n| reverse_dma_enable            | 上下反転DMAの有効(1)／無効(0)を取得・設定します。            |   ●/●   | USER_REVERSE_DMA_ENABLE                  |\n| rolling_shutter               | ローリングシャッタの有効(1)／無効(0)を取得・設定します。     |   ●/●   | USER_ROLLING_SHUTTER  _TRIGGER_ENABLE    |\n| scan_system                   | 取込を行うカメラの種類を取得・設定します。                   |   ●/●   | USER_INTERLACE_TYPE                      |\n| serial_no                     | ボードのシリアル番号を取得します。                           |   ●/-   |                                          |\n| start_frame_no                | 取込を開始するフレーム番号(1, 2, 3…)を取得・設定します。     |   ●/●   |                                          |\n| strobe_delay                  | ストロボ信号出力遅延時間[usec]を取得・設定します。           |   ●/●   | USER_STROBE_DELAY_COUNT                  |\n| strobe_enable                 | ストロボ出力信号の有効(1)／無効(0)を取得・設定します。       |   ●/●   | USER_STROBE_ENABLE                       |\n| strobe_pol                    | ストロボの極性を取得・設定します。                           |   ●/●   | USER_STROBE_POLALITY                     |\n| strobe_time                   | ストロボ信号出力時間[usec]を取得・設定します。               |   ●/●   | USER_STROBE_TIME_COUNT                   |\n| sync_ch                       | 指定チャンネルの取込をどのchに同期されるかを取得・設定します。 |   ●/●   | USER_SYNC_CH                             |\n| sync_lt                       | CC信号の出力をSYNCLT入力に同期されるかどうかを取得・設定します。 |   ●/●   | USER_SYNC_LT                             |\n| tap_arrange                   | カメラ入力タップの並べ替え方法を取得・設定します。           |   ●/●   | USER_CAMERALINK  _REARRANGEMENT_ENABLE   |\n| tap_arrange_x_size            | カメラが１ラインとして出力する総画素数を取得・設定します。   |   ●/●   | USER_CAMERALINK  _REARRANGEMENT_XSIZE    |\n| tap_direction1                | 複数のタップ入力を行う時、Tap1の入力方向を取得・設定します。 |   ●/●   | USER_CAMERALINK_TAP_DIRECTON_1           |\n| tap_direction2                | 複数のタップ入力を行う時、Tap2の入力方向を取得・設定します。 |   ●/●   | USER_CAMERALINK_TAP_DIRECTON_2           |\n| tap_direction3                | 複数のタップ入力を行う時、Tap3の入力方向を取得・設定します。 |   ●/●   | USER_CAMERALINK_TAP_DIRECTON_3           |\n| tap_direction4                | 複数のタップ入力を行う時、Tap4の入力方向を取得・設定します。 |   ●/●   | USER_CAMERALINK_TAP_DIRECTON_4           |\n| tap_direction5                | 複数のタップ入力を行う時、Tap5の入力方向を取得・設定します。 |   ●/●   | USER_CAMERALINK_TAP_DIRECTON_5           |\n| tap_direction6                | 複数のタップ入力を行う時、Tap6の入力方向を取得・設定します。 |   ●/●   | USER_CAMERALINK_TAP_DIRECTON_6           |\n| tap_direction7                | 複数のタップ入力を行う時、Tap7の入力方向を取得・設定します。 |   ●/●   | USER_CAMERALINK_TAP_DIRECTON_7           |\n| tap_direction8                | 複数のタップ入力を行う時、Tap8の入力方向を取得・設定します。 |   ●/●   | USER_CAMERALINK_TAP_DIRECTON_8           |\n| tap_num                       | 入力タップ数を取得・設定します。                             |   ●/●   | USER_X_TAPS_PER_CH                       |\n| timeout                       | grab_stop()メソッドのフレーム入力待ちタイムアウト時間をミリ秒単位で取得・設定します。 |   ●/●   | USER_TIMEOUT1                            |\n| trigger_enable                | CC信号出力の有効(1)／無効(0)を取得・設定します。             |   ●/●   | USER_SW_TRIGGER_ENABLE                   |\n| vertical_remap                | Y方向特殊DMAの設定／無効(0)を取得・設定します。              |   ●/●   | USER_VERTICAL_REMAP  _ENABLE             |\n| virtual_comport               | 仮想COMポート番号を取得します。                              |   ●/-   |                                          |\n| width                         | 画像入力サイズの幅を取得・設定します。                       |   ●/●   | USER_X_SIZE                              |\n| x_delay                       | カメラ入力のX方向遅延量を取得・設定します。                  |   ●/●   | USER_X_FRONT_PORCH                       |\n| y_delay                       | カメラ入力のY方向遅延行数を取得・設定します。                |   ●/●   | USER_Y_FRONT_PORCH                       |\n| y_total                       | カメラから入力する行数を取得・設定します。<br />y_totalを設定する場合は、必ずwidth→y_totalの順に設定してください。 |   ●/●   | USER_Y_TOTAL_SIZE                        |\n\n※設定値の詳細は、AcapLib2のマニュアル「SDK-AcapLib2 Library Manual for Windows(OM15018*).pdf」を参照願います。\n\n<div style=\"page-break-after:always\"></div>\n\n## Methods\n\n| Methods                                                      | Descriptoin                                                  | AcapLib2 Function                      |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | -------------------------------------- |\n| bgr2rgb(image)                                               | カラー画像のとき、BGRからRGBへ並びを入れ替えます。           |                                        |\n| count_reset()                                                | すべてのカウンタをリセットします。                           |                                        |\n| cxp_link_reset()                                             | CoaXPressカメラ、ボードに対してリンクリセットを行います。    |                                        |\n| get_boardInfo()                                              | PCに接続されているボード一覧の情報を取得します。(static method) |                                        |\n| get_encoder()                                                | エンコーダの設定を取得します。                               | AcapGetEncoder                         |\n| get_encoder_abs_multipoint(point_no)                         | 指定したエンコーダ絶対カウントのポイント番号の絶対カウント値を取得します。 |                                        |\n| get_external_trigger()                                       | 外部トリガの設定を取得します。                               | AcapGetExternalTrigger                 |\n| get_frame_no()                                               | 現在の画像取得枚数（1,2,3・・・）を取得します。              |                                        |\n| get_gpout()                                                  | 汎用出力(GPOUT)のレベルを取得します。                        | AcapGetGPOut                           |\n| get_image_data(index)                                        | リングバッファのIndex番号を指定して、画像データを取得します。 |                                        |\n| get_last_error([error_reset])                                | 最後に発生したエラー情報を取得します。                       |                                        |\n| get_line_trigger()                                           | ライントリガの設定を取得します。                             | AcapGetLineTrigger                     |\n| get_info(value_id[, memnum])                                 | 設定IDを指定してボードの設定値を取得します。                 |                                        |\n| get_shutter_trigger()                                        | エリアセンサシャッタトリガの設定を取得します。               | AcapGetShutterTrigger                  |\n| get_strobe()                                                 | ストロボの設定を取得します。                                 | AcapGetStrobe                          |\n| grab_abort()                                                 | 画像入力を強制停止します。                                   |                                        |\n| grab_start([input_num])                                      | 画像入力枚数を指定し、画像入力を開始します。                 |                                        |\n| grab_stop()                                                  | 画像入力を停止します。                                       |                                        |\n| load_inifile(filename)                                       | ボード設定ファイル(*.ini)を読込、ボードの設定を行います。    |                                        |\n| opt_link_reset()                                             | Opt-C:Linkボードに対してリンクリセットを行います。           |                                        |\n| print_acapy_values()                                         | ボードに設定されている値をコマンドプロンプトへ表示します。   |                                        |\n| print_last_error()                                           | 最後に発生したエラー情報をコマンドプロンプトへ表示します。   |                                        |\n| read([copy, wait_frame])                                     | grab_start()後、現在のフレーム画像を取得します。             |                                        |\n| read_frames([copy])                                          | 前回取得したフレームの次から、現在のフレームまでの画像を取得します。 |                                        |\n| refrect_param([force_execution])                             | プロパティで設定した値をボードへ反映させます。               |                                        |\n| save_inifile(inifilename)                                    | ボードに設定されている値をiniファイルに保存します。          |                                        |\n| serial_close()                                               | シリアル通信ポートを閉じます。                               | AcapSerialClose                        |\n| serial_get_parameter()                                       | シリアル通信のパラメータを取得します。                       | AcapSerialGetParameter                 |\n| serial_open([baud_rate, data_bit, parity, stop_bit, flow])   | シリアルポートをオープンし、シリアル通信のパラメータを設定します。 | AcapSerialOpen  AcapSerialSetParameter |\n| serial_read([asc, time_out, buffer_size, end_str])           | シリアル通信コマンドを受信します。<br />受信バッファが空になるまで受信します。 | AcapSerialRead                         |\n| serial_write(write_command[, asc, start_str, end_str])       | シリアル通信コマンドを送信します。                           | AcapSerialWrite                        |\n| set_encoder(enc_enable, enc_mode, enc_start, enc_phase, enc_direction, z_phase_enable, compare1, compare2) | エンコーダを設定します。                                     | AcapSetEncoder                         |\n| set_encoder_abs_multipoint(point_no, abs_count)              | エンコーダ絶対カウントのポイント番号を指定して、絶対カウント値を設定します。 |                                        |\n| set_external_trigger( exp_trg_en, ext_trg_mode, ext_trg_dly, ext_trg_chatter, timeout) | 外部トリガを設定します。                                     | AcapSetExternalTrigger                 |\n| set_gpout(output_level)                                      | 汎用出力(GPOUT)のレベルを設定します。                        | AcapSetGPOut                           |\n| set_info(value_id, value[, memnum])                          | ボードへ設定IDを指定して値を設定します。<br />プロパティに設定値がある場合は設定しないでください。 | AcapSetInfo                            |\n| set_line_trigger(exp_cycle, exposure, exp_pol)               | ライントリガを設定します。                                   | AcapSetLineTrigger                     |\n| set_power_supply(wait_time, value)                           | カメラクロック確認待機時間(waite_time)をmsecで指定し、給電のON(1)/OFF(0)をvalueに設定します。 |                                        |\n| set_shutter_trigger(exp_cycle, exposure, exp_pol, exp_unitt, cc_sel) | エリアセンサシャッタトリガを設定します。                     | AcapSetShutterTrigger                  |\n| set_strobe(strobe_en, strobe_delay, strobe_time)             | ストロボを設定します。                                       | AcapSetStrobe                          |\n| snap([copy])                                                 | １フレームの取込を行います。                                 |                                        |\n| wait_grab_start([timeout])                                   | Grab開始を待ちます。                                         |                                        |\n| wait_frame_end([timeout])                                    | 現在のフレームの入力完了を待ちます。                         |                                        |\n| wait_gpin([timeout])                                         | GPIN割込みを待ちます。                                       |                                        |\n| wait_grab_end([timeout])                                     | Grab(連続入力)の完了を待ちます。                             |                                        |\n\n※コールバック関数は対応していません。\n\n<div style=\"page-break-after:always\"></div>\n\n### bgr2rgbメソッド\n\nカラーデータのRGBの並びをB,G,RからR,G,Bへ入れ替えます。\n\n```\ndef bgr2rgb(bgr_image : np.ndarray) -> np.ndarray:\n```\n\n ***パラメータ***\n\n| 名前      | 型         | 説明                                                  |\n| --------- | ---------- | ----------------------------------------------------- |\n| bgr_image | np.ndarray | numpyのndarray形式のB,G,R順のカラー画像を指定します。 |\n\n ***戻り値***\n\nrgb_image\n\n| 名前      | 型         | 説明                                                  |\n| --------- | ---------- | ----------------------------------------------------- |\n| rgb_image | np.ndarray | numpyのndarray形式のR,G,B順のカラー画像を取得します。 |\n\n### count_resetメソッド\n\nFVAL/LVAL/外部トリガ/CC カウント回数及び、外部トリガ間隔カウンタ1～4 のカウンタをリセットしま\nす。\n\n```\ndef count_reset(self) -> bool:\n```\n\n ***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | bool | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### cxp_link_resetメソッド\n\n対象のポートに接続されているカメラに対し、カメラ接続確立(再初期化)を行います。\n※カメラ設定はデフォルトに戻りますので、LinkSpeed 等カメラ設定を再度実施する必要があります。\n\n```\ndef cxp_link_reset(self) -> bool:\n```\n\n ***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | bool | 成功時: 1<br />失敗時: 0 |\n\n### get_boardInfoメソッド\n\n接続されているボード情報をACAPBOARDINFOEX構造体で取得します。\n\nAcapLib2のAcapGetBoardInfoEx相当\n\n```\ndef get_boardInfo() -> Tuple[int, acaplib2.ACAPBOARDINFOEX]:\n```\n\n ***戻り値***\n\n(ret, board_info)\n\n| 名前       | 型                       | 説明                                   |\n| ---------- | ------------------------ | -------------------------------------- |\n| ret        | bool                     | 成功時: 1<br />失敗時: 0               |\n| board_info | acaplib2.ACAPBOARDINFOEX | 接続されたボード情報が格納された構造体 |\n\n<div style=\"page-break-after:always\"></div>\n\n### get_encoderメソッド\n\n接続されているボード情報をACAPBOARDINFOEX構造体で取得します。\n\nAcapLib2のAcapGetEncoder相当\n\n```\ndef get_encoder(self) -> Tuple[int, int, int, int, int, int, int, int, int, int]:\n```\n\n ***戻り値***\n\n(ret, enc_enable, enc_mode, enc_start, enc_phase, enc_direction, z_phase_enable, compare1, compare2, comp2_count)\n\n| 名前           | 型   | 説明                                                         |\n| -------------- | ---- | ------------------------------------------------------------ |\n| ret            | int  | 成功時: 1<br />失敗時: 0                                     |\n| enc_enable     | int  | エンコーダ使用設定                                           |\n| enc_mode       | int  | エンコーダモード                                             |\n| enc_start      | int  | エンコーダ起動方法                                           |\n| enc_phase      | int  | エンコーダパルス                                             |\n| enc_direction  | int  | エンコーダ回転方向                                           |\n| z_phase_enable | int  | Z 相使用設定                                                 |\n| compare1       | int  | 比較レジスタ1(遅延パルス設定)                                |\n| compare2       | int  | 比較レジスタ2(間隔パルス設定)                                |\n| comp2_count    | int  | エンコーダカウント値<br />相対カウント、有効時：総カウント数<br />絶対カウント、有効時：絶対カウント値 |\n\n<div style=\"page-break-after:always\"></div>\n\n### get_encoder_abs_multipointメソッド\n\n絶対カウント・マルチポイント値を取得します。\n\n```\ndef get_encoder_abs_multipoint(self, point_no : int) -> Tuple[int, int]:\n```\n\n ***パラメータ***\n\n| 名前     | 型   | 説明                                               |\n| -------- | ---- | -------------------------------------------------- |\n| point_no | int  | 設定するマルチポイントの番号を指定します。(0～255) |\n\n ***戻り値***\n\n(ret, abs_count)\n\n| 名前      | 型   | 説明                           |\n| --------- | ---- | ------------------------------ |\n| ret       | int  | 成功時: 1<br />失敗時: 0       |\n| abs_count | int  | 絶対カウント・マルチポイント値 |\n\n### get_external_triggerメソッド\n\n外部トリガの設定を取得します。\n\nAcapLib2のAcapGetExternalTrigger相当\n\n```\ndef get_external_trigger(self) -> Tuple[int, int, int, int, int, int]:\n```\n\n ***戻り値***\n\n(ret, exp_trg_en, ext_trg_mode, ext_trg_dly, ext_trg_chatter, timeout)\n\n| 名前            | 型   | 説明                               |\n| --------------- | ---- | ---------------------------------- |\n| ret             | int  | 成功時: 1<br />失敗時: 0           |\n| exp_trg_en      | int  | 外部トリガ 使用設定                |\n| ext_trg_mode    | int  | 外部トリガモード                   |\n| ext_trg_dly     | int  | 外部トリガ 検出遅延時間 (1us 単位) |\n| ext_trg_chatter | int  | 外部トリガ 検出無効時間 (1us 単位) |\n| timeout         | int  | 検出待機時間 (1ms 単位)            |\n\n<div style=\"page-break-after:always\"></div>\n\n### get_frame_noメソッド\n\n入力フレームの情報を取得します。\n\nAcapLib2のAcapGetFrameNo相当\n\n```\ndef get_frame_no(self) -> Tuple[int, int, int , int]:\n```\n\n ***戻り値***\n\n(ret, frame_no, line, index)\n\n| 名前     | 型   | 説明                                                     |\n| -------- | ---- | -------------------------------------------------------- |\n| ret      | int  | 成功時: 1<br />失敗時: 0                                 |\n| frame_no | int  | 入力が完了したフレーム数を取得します。                   |\n| line     | int  | フレーム内の入力が完了したライン数を取得します。         |\n| index    | int  | 最後に入力が完了したメモリ番号（1,2,3...）を取得します。 |\n\n### get_gpoutメソッド\n\nGPOUTの状態を取得します。\n\nAcapLib2のAcapGetGPOut相当\n\n```\ndef get_gpout(self) -> Tuple[int, int]:\n```\n\n ***戻り値***\n\n(ret, dwOutputLevel)\n\n| 名前          | 型   | 説明                                                         |\n| ------------- | ---- | ------------------------------------------------------------ |\n| ret           | int  | 成功時: 1<br />失敗時: 0                                     |\n| dwOutputLevel | int  | GPOUT 出力設定状態を対応するBit で格納します。<br/>0：OFF/1：ON<br/>Bit0：GPOUT[1]ピン (GP_OUT1)<br/>Bit1：GPOUT[2]ピン (GP_OUT2)<br/>：<br/>Bit7：GPOUT[8]ピン |\n\n<div style=\"page-break-after:always\"></div>\n\n### get_image_dataメソッド\n\nリングバッファのIndex番号(0, 1, 2...)を指定し、画像データを取得します。\n\n```\ndef get_image_data(self, index : int) -> Union[np.ndarray, None]:\n```\n\n ***パラメータ***\n\n| 名前  | 型   | 説明                                                  |\n| ----- | ---- | ----------------------------------------------------- |\n| index | int  | リングバッファのIndex番号(0, 1, 2...)を指定しリます。 |\n\n ***戻り値***\n\nimage\n\n| 名前  | 型         | 説明                                     |\n| ----- | ---------- | ---------------------------------------- |\n| image | np.ndarray | 画像データはnumpyのndarrayで取得します。 |\n\n### get_last_errorメソッド\n\n最後に発生したエラー情報を取得します。\n\nAcapLib2のAcapGetLastErrorCode相当\n\n```\ndef get_last_error(self, error_reset : bool = False) -> acaplib2.ACAPERRORINFO:\n```\n\n ***パラメータ***\n\n| 名前        | 型   | 説明                                                         |\n| ----------- | ---- | ------------------------------------------------------------ |\n| error_reset | bool | True: エラー情報をリセット<br />False: エラー情報をリセットしない |\n\n ***戻り値***\n\nerror_info\n\n| 名前       | 型                     | 説明                                            |\n| ---------- | ---------------------- | ----------------------------------------------- |\n| error_info | acaplib2.ACAPERRORINFO | エラーの内容をACAPERRORINFO構造体で取得します。 |\n\n<div style=\"page-break-after:always\"></div>\n\n### get_line_triggerメソッド\n\nライントリガの設定を取得します。\n\nAcapLib2のAcapGetLineTrigger相当\n\n```\ndef get_line_trigger(self) -> Tuple[int, int, int, int]:\n```\n\n ***戻り値***\n\n(ret, exp_cycle, exposure, exp_pol)\n\n| 名前      | 型   | 説明                                                   |\n| --------- | ---- | ------------------------------------------------------ |\n| ret       | int  | 成功時: 1<br />失敗時: 0                               |\n| exp_cycle | int  | 露光周期を1μsec単位で取得します。                      |\n| exposure  | int  | 露光時間を1μsec単位で取得します。                      |\n| exp_pol   | int  | 出力論理を取得します。<br />1:　正論理<br />0:　負論理 |\n\n### get_infoメソッド\n\n設定IDを指定して、設定値を取得します。\n\nAcapLib2のAcapGetInfo相当\n\n```\ndef get_info(self, value_id : int, mem_num : int = 0) -> Tuple[int, int]:\n```\n\n ***パラメータ***\n\n| 名前     | 型   | 説明                                                         |\n| -------- | ---- | ------------------------------------------------------------ |\n| value_id | int  | 設定ID                                                       |\n| mem_num  | int  | value_idの値により使用方法が異なります。<br />詳細はAcapLib2マニュアルのAcapGetInfo関数を参照ください。 |\n\n ***戻り値***\n\n(ret, value)\n\n| 名前  | 型   | 説明                     |\n| ----- | ---- | ------------------------ |\n| ret   | int  | 成功時: 1<br />失敗時: 0 |\n| value | int  | 取得した設定値           |\n\n<div style=\"page-break-after:always\"></div>\n\n### get_shutter_triggerメソッド\n\nシャッタトリガの設定を取得します。\n\nAcapLib2のAcapGetShutterTrigger相当\n\n```\ndef get_shutter_trigger(self) -> Tuple[int, int, int, int, int, int]:\n```\n\n ***戻り値***\n\n(ret, exp_cycle, exposure, exp_pol, exp_unit, cc_sel)\n\n| 名前      | 型   | 説明                                    |\n| --------- | ---- | --------------------------------------- |\n| ret       | int  | 成功時: 1<br />失敗時: 0                |\n| exp_cycle | int  | CC周期を1μsec単位で取得します。         |\n| exposure  | int  | CC出力幅を1μsec単位で取得します。       |\n| exp_pol   | int  | 出力論理を取得します。                  |\n| exp_unit  | int  | 未サポート                              |\n| cc_sel    | int  | 露光信号を出力するCC 番号を取得します。 |\n\n### get_strobeメソッド\n\nストロボの設定を取得します。\n\nAcapLib2のAcapGetStrobe相当\n\n```\ndef get_strobe(self) -> Tuple[int, int, int, int]:\n```\n\n ***戻り値***\n\n(ret, strobe_en, strobe_delay, strobe_time)\n\n| 名前         | 型   | 説明                                                         |\n| ------------ | ---- | ------------------------------------------------------------ |\n| ret          | int  | 成功時: 1<br />失敗時: 0                                     |\n| strobe_en    | int  | ストロボの有効(1)／無効(0)状態を取得します。                 |\n| strobe_delay | int  | ストロボパルスが出力されるまでの遅延時間(1μsec単位)を取得します。 |\n| strobe_time  | int  | ストロボを出力する時間(1μsec単位)を取得します。              |\n\n<div style=\"page-break-after:always\"></div>\n\n### grab_abortメソッド\n\n画像入力を強制停止します。\n\nAcapLib2のAcapGrabAbort相当\n\n```\ndef grab_abort(self) -> int:\n```\n\n ***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n### grab_startメソッド\n\n画像入力を開始します。\n\nAcapLib2のAcapGrabStart相当\n\n```\ndef grab_start(self, input_num : int = 0) -> int:\n```\n\n  ***パラメータ***\n\n| 名前      | 型   | 説明                                                         |\n| --------- | ---- | ------------------------------------------------------------ |\n| input_num | int  | 0: 連続入力<br />1: 一画面入力<br />2～0xFFFFFFFF: 指定枚入力 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### grab_stopメソッド\n\n画像入力を停止します。\n\nAcapLib2のAcapGrabStop相当\n\n```\ndef grab_stop(self) -> int:\n```\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n### load_inifileメソッド\n\nボード設定ファイル（iniファイル）を読込ます。\n\nAcapLib2のAcapSelectFile相当\n\n```\ndef load_inifile(self, inifilename : str) -> int:\n```\n\n  ***パラメータ***\n\n| 名前        | 型   | 説明                                  |\n| ----------- | ---- | ------------------------------------- |\n| inifilename | str  | iniファイルのファイル名を指定します。 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### opt_link_resetメソッド\n\nOpt-C:Link ボードに対してリンクリセット(再初期化)を行います。\n\n```\ndef opt_link_reset(self) -> bool:\n```\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n### print_acapy_valuesメソッド\n\nAcaPyクラスに設定されている値をコマンドラインに表示します。\n\n```\ndef print_acapy_values(self):\n```\n\n### print_last_errorメソッド\n\n最後に発生したエラー情報をコマンドラインに表示します。\n\n```\ndef print_last_error(self) -> acaplib2.ACAPERRORINFO:\n```\n\n***戻り値***\n\nerror_info\n\n| 名前       | 型                     | 説明                                            |\n| ---------- | ---------------------- | ----------------------------------------------- |\n| error_info | acaplib2.ACAPERRORINFO | エラーの内容をACAPERRORINFO構造体で取得します。 |\n\n<div style=\"page-break-after:always\"></div>\n\n### readメソッド\n\ngrab_startメソッドを実行後、grab_startメソッドを実行するまでの間で実行し、現在の画像データを１フレーム分取得します。\n\n```\ndef read(self, copy : bool = False, wait_frame : bool = True) -> Tuple[int, Union[np.ndarray, None], int, int]:\n```\n\n  ***パラメータ***\n\n| 名前       | 型   | 説明                                                         |\n| ---------- | ---- | ------------------------------------------------------------ |\n| copy       | bool | True: リングバッファから画像データをコピーして取得します。<br />False:リングバッファの画像データを取得します。この場合、画像データが上書きされる場合があります。 |\n| wait_frame | bool | True: １フレーム分の画像データ取得完了を待ってから画像データを取得します。<br />False:１フレーム分の画像データ取得完了を待たずに画像データを取得します。 |\n\n***戻り値***\n\n(ret, frame, frame_no, line)\n\n| 名前     | 型         | 説明                                                         |\n| -------- | ---------- | ------------------------------------------------------------ |\n| ret      | int        | 成功時: 1<br />失敗時: 0                                     |\n| frame    | np.ndarray | 取得した画像データ<br />カラー画像の場合、データの並びはB, G, Rとなります。（OpenCVと同等） |\n| frame_no | int        | grab_startから入力が完了したフレーム数（1, 2, 3...）         |\n| line     | int        | 入力が完了したライン数                                       |\n\n<div style=\"page-break-after:always\"></div>\n\n### read_framesメソッド\n\ngrab_startメソッドを実行後、grab_startメソッドを実行するまでの間で実行し、前回取得したフレームの次のフレームから現在取得したフレームまでの画像データをリストで取得します。\n\nカメラのフレームレートが速い場合、取得したフレーム画像が上書きされる場合があります。\nその場合、mem_numプロパティの値（リングバッファの画像面数）を大きくしてください。\n\n```\ndef read_frames(self, copy : bool = False) -> Tuple[int, Union[List[np.ndarray], None], int, int]:\n```\n\n  ***パラメータ***\n\n| 名前 | 型   | 説明                                                         |\n| ---- | ---- | ------------------------------------------------------------ |\n| copy | bool | True: リングバッファから画像データをコピーして取得します。<br />False:リングバッファの画像データを取得します。 |\n\n***戻り値***\n\n(ret, frames, count, frame_no)\n\n| 名前     | 型         | 説明                                                         |\n| -------- | ---------- | ------------------------------------------------------------ |\n| ret      | int        | 成功時: 1<br />失敗時: 0<br />データ上書き時: 上書きされた画像枚数を負にした値 |\n| frames   | np.ndarray | 前回取得したフレームの次のフレームから現在取得したフレームまでの画像データをリストで取得します。<br />カラー画像の場合、データの並びはB, G, Rとなります。（OpenCVと同等） |\n| count    | int        | 前回取得したフレームの次のフレームから現在取得したフレームまでのフレーム数 |\n| frame_no | int        | grab_startから入力が完了したフレーム数（1, 2, 3...）         |\n\n<div style=\"page-break-after:always\"></div>\n\n### refrect_paramメソッド\n\nプロパティで設定した値を画像入力ボードに反映します。\n\n```\ndef refrect_param(self, force_execution : bool = False) -> int:\n```\n\n  ***パラメータ***\n\n| 名前            | 型   | 説明                                                         |\n| --------------- | ---- | ------------------------------------------------------------ |\n| force_execution | bool | True: 強制的に実行します。<br />False:反映が必要な場合に、実行します。 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n### save_inifileメソッド\n\nボードに設定されている値をiniファイルに保存します。\n\nAcapLib2のAcapSelectFile相当\n\n```\ndef save_inifile(self, inifilename : str) -> int:\n```\n\n  ***パラメータ***\n\n| 名前        | 型   | 説明                              |\n| ----------- | ---- | --------------------------------- |\n| inifilename | str  | 保存するiniファイルのファイルパス |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### serial_closeメソッド\n\nシリアル通信のポートをクローズします。\n\nAcapLib2のAcapSerialClose相当\n\n```\ndef serial_close(self) -> int:\n```\n\n  ***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n### serial_get_parameterメソッド\n\nシリアル通信の設定を取得します。\n\nAcapLib2のAcapSerialGetParameter相当\n\n```\ndef serial_get_parameter(self) -> Tuple[int, int, int, int, int, int]:\n```\n\n  ***戻り値***\n\n(ret, baud_rate, data_bit, parity, stop_bit, flow)\n\n| 名前      | 型   | 説明                               |\n| --------- | ---- | ---------------------------------- |\n| ret       | int  | 成功時: 1<br />失敗時: 0           |\n| baud_rate | int  | ボーレートを以下の値を取得します。 |\n| data_bit  | int  | データビットを取得します。         |\n| parity    | int  | パリティを取得します。             |\n| stop_bit  | int  | ストップビットを取得します。       |\n| flow      | int  | フロー制御を取得します。           |\n\n### serial_openメソッド\n\nシリアル通信のポートをオープンします。\n\nAcapLib2のAcapSerialOpen、AcapSerialSetParameter相当\n\n```\ndef serial_open(self, baud_rate : int = 9600, data_bit : int = 8, parity : int = 0, stop_bit : int = 0, flow : int = 0) -> int:\n```\n\n  ***パラメータ***\n\n| 名前      | 型   | 説明                                                         |\n| --------- | ---- | ------------------------------------------------------------ |\n| baud_rate | int  | ボーレートを以下の値の中から設定します。<br />9600, 19200, 38400, 57600, 115200 |\n| data_bit  | int  | データビットを指定します。（現在、8 のみ設定可）             |\n| parity    | int  | パリティを指定します。（現在、「0 :なし」 のみ設定可）       |\n| stop_bit  | int  | ストップビットを指定します。（現在、「0: 1bit」 のみ設定可） |\n| flow      | int  | フロー制御を指定します。（現在、「0 :なし」 のみ設定可）     |\n\n  ***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### serial_readメソッド\n\nシリアル通信コマンドの受信を行います。\n受信はデータが空になるまで、stop_bitになるまで、タイムアウトになるまで行われます。\n\nAcapLib2のAcapSerialRead相当\n\n```\ndef serial_read(self, asc : bool = True, time_out : int = 100, buffer_size : int = 511, end_str : Union[str, None] = None) -> Tuple[int, str, int]:\n```\n\n  ***パラメータ***\n\n| 名前        | 型   | 説明                                                         |\n| ----------- | ---- | ------------------------------------------------------------ |\n| asc         | bool | シリアルに読込む(受信)文字のコードを指定します。<br />False: 16 進数(HEX)表記<br />True: ASCII |\n| time_out    | int  | データビットを指定します。（現在、8 のみ設定可）             |\n| buffer_size | int  | パリティを指定します。（現在、「0 :なし」 のみ設定可）       |\n| end_str     | int  | ストップビットを指定します。（現在、「0: 1bit」 のみ設定可） |\n\n  ***戻り値***\n\n(ret, read_command, read_bytes)\n\n| 名前         | 型   | 説明                     |\n| ------------ | ---- | ------------------------ |\n| ret          | int  | 成功時: 1<br />失敗時: 0 |\n| read_command | str  | 受信した文字列           |\n| read_bytes   | int  | 受信したデータのバイト数 |\n\n<div style=\"page-break-after:always\"></div>\n\n### serial_writeメソッド\n\n指定した文字コードでコマンドの書込み(送信)を行います。\nAcapLib2のAcapSerialWrite相当\n\n```\ndef serial_write(self, write_command : str, asc : bool = True, start_str : Union[str, None] = None, end_str : Union[str, None] = \"\\r\") -> int:\n```\n\n  ***パラメータ***\n\n| 名前          | 型   | 説明                                                         |\n| ------------- | ---- | ------------------------------------------------------------ |\n| write_command | str  | シリアルに送信するコマンド                                   |\n| asc           | bool | シリアルに書込む(送信)文字のコードを指定します。<br />False: 16 進数(HEX)表記<br />True: ASCII |\n| start_str     | str  | asc がTRUE の場合に指定できます。<br/>コマンドの開始文字列(ASCII 表記)<br/>使用しない場合は「None」を指定して下さい |\n| end_str       | str  | asc がTRUE の場合に指定できます。<br/>コマンドの終端文字列(ASCII 表記)<br/>使用しない場合は「None」を指定して下さい |\n\n  ***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_encoderメソッド\n\nエンコーダの設定を行います。\nAcapLib2のAcapSetEncoder相当\n\n```\ndef set_encoder(self, enc_enable : int, enc_mode : int, enc_start : int, enc_phase : int, enc_direction : int, z_phase_enable : int, compare1 : int, compare2 : int) -> int:\n```\n\n  ***パラメータ***\n\n| 名前           | 型   | 説明                                                         |\n| -------------- | ---- | ------------------------------------------------------------ |\n| enc_enable     | int  | エンコーダ使用設定<br />0: 無効<br />1: 有効（相対カウント）<br />2: 有効（絶対カウント） |\n| enc_mode       | int  | エンコーダモード<br />0: エンコーダスキャンモード<br />1: エンコーダライン選択モード |\n| enc_start      | int  | エンコーダの起動方法<br/>0: エンコーダをCPU で起動<br />1: エンコーダを外部トリガで起動<br />2: エンコーダをCPU で起動して、外部トリガを一致パルスとして使用 |\n| enc_phase      | int  | エンコーダパルス<br/>0: AB相<br/>1: A相                      |\n| enc_direction  | int  | エンコーダ回転方向<br />0: CW<br/>1: CCW                     |\n| z_phase_enable | int  | Z 相使用設定<br />0: 使用しない<br />1: 使用する             |\n| compare1       | int  | 比較レジスタ1(遅延パルス設定)<br />0 ～ 4,294,967,295        |\n| compare2       | int  | 比較レジスタ2(間隔パルス設定)<br />1 ～ 4,294,967,295        |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_encoder_abs_multipointメソッド\n\n絶対カウントマルチポイントの値を設定します。\n\n```\ndef set_encoder_abs_multipoint(self, point_no : int, abs_count : int) -> int:\n```\n\n  ***パラメータ***\n\n| 名前      | 型   | 説明                                                         |\n| --------- | ---- | ------------------------------------------------------------ |\n| point_no  | int  | 設定するマルチポイントの番号を指定します。(0～255)           |\n| abs_count | int  | 絶対カウント・マルチポイント値の設定を行います。<br />-2147483648 ～ 2147483647 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_external_triggerメソッド\n\n外部トリガの種別、検出方法などを設定します。\nAcapLib2のAcapSetExternalTrigger相当\n\n```\ndef set_external_trigger(self, exp_trg_en : int, ext_trg_mode : int, ext_trg_dly : int, ext_trg_chatter : int, timeout : int) -> int:\n```\n\n  ***パラメータ***\n\n| 名前            | 型   | 説明                                                         |\n| --------------- | ---- | ------------------------------------------------------------ |\n| exp_trg_en      | int  | 外部トリガとして使用する信号の選択<br />0 : 無効<br/>1 : TTL トリガ<br/>2 : 差動トリガ(エンコーダと共用)<br/>3 : 新規差動トリガ<br/>4 : OPT トリガ |\n| ext_trg_mode    | int  | 外部トリガモード<br />0 : 外部トリガ1 回でCC が1 回出力するモード(連続外部トリガモード)<br/>1 : 外部トリガ1 回でCC が周期出力するモード(単発外部トリガモード) |\n| ext_trg_dly     | int  | 外部トリガ 検出遅延時間 (1us 単位)                           |\n| ext_trg_chatter | int  | 外部トリガ 検出無効時間 (1us 単位)                           |\n| timeout         | int  | 検出待機時間 (1ms 単位)<br />1 ～ 4,294,967,295              |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_gpoutメソッド\n\nGPOUT ピンの出力を制御します。\nAcapLib2のAcapSetGPOut相当\n\n```\n def set_gpout(self, output_level : int) -> int:\n```\n\n  ***パラメータ***\n\n| 名前         | 型   | 説明                                                         |\n| ------------ | ---- | ------------------------------------------------------------ |\n| output_level | int  | 対応するBit のGPOUT ピンをON(High)/OFF(Low)します。<br />0：OFF/1：ON<br/>Bit0：GPOUT[1]ピン (GP_OUT1)<br/>Bit1：GPOUT[2]ピン (GP_OUT2)<br/>：<br/>Bit7：GPOUT[8]ピン |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_infoメソッド\n\n設定IDを指定して、設定値を設定します。\nプロパティに同様の設定値がある場合は設定しないでください。\n\nAcapLib2のAcapSetInfo相当\n\n```\ndef set_info(self, value_id : int, value : int, mem_num : int = -1) -> int:\n```\n\n  ***パラメータ***\n\n| 名前     | 型   | 説明                                                         |\n| -------- | ---- | ------------------------------------------------------------ |\n| value_id | int  | 設定ID                                                       |\n| value    | int  | 設定値                                                       |\n| mem_num  | int  | value_idの値により使用方法が異なります。<br />詳細はAcapLib2マニュアルのAcapSetInfo関数を参照ください。 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_line_triggerメソッド\n\nラインセンサへ出力するCC 信号の周期・幅を設定します。\nAcapLib2のAcapSetLineTrigger相当\n\n```\ndef set_line_trigger(self, exp_cycle : int, exposure : int, exp_pol : int) -> int:\n```\n\n  ***パラメータ***\n\n| 名前      | 型   | 説明                                                         |\n| --------- | ---- | ------------------------------------------------------------ |\n| exp_cycle | int  | CC 出力周期 (1us 単位) ※CoaXPress の場合はトリガパケットです。<br />0 ～ 4,294,967,295 |\n| exposure  | int  | CC 出力幅 (1us 単位)<br />0 ～ 4,294,967,295                 |\n| exp_pol   | int  | 出力論理<br />0 : 負論理<br/>1 : 正論理                      |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_power_supplyメソッド\n\nカメラへの電源供給を制御します。\n\n```\ndef set_power_supply(self, value : int, wait_time : int = 3000) -> int:\n```\n\n  ***パラメータ***\n\n| 名前      | 型   | 説明                                |\n| --------- | ---- | ----------------------------------- |\n| value     | int  | 電源のON/OFF<br />0: OFF<br />1: ON |\n| wait_time | int  | タイムアウト時間をmsで指定します。  |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_shutter_triggerメソッド\n\nエリアセンサシャッタトリガを設定します。\n\nAcapLib2のAcapSetShutterTrigger相当\n\n```\ndef set_shutter_trigger(self, exp_cycle : int, exposure : int, exp_pol : int, exp_unit : int, cc_sel : int) -> int:\n```\n\n  ***パラメータ***\n\n| 名前      | 型   | 説明                                                    |\n| --------- | ---- | ------------------------------------------------------- |\n| exp_cycle | int  | CC 出力周期 (1us 単位)<br />0 ～ 429,496,729            |\n| exposure  | int  | CC 出力幅 (1us 単位)<br />0 ～ 429,496,729              |\n| exp_pol   | int  | 出力論理<br />0 : 負論理<br/>1 : 正論理                 |\n| exp_unit  | int  | 未サポート                                              |\n| cc_sel    | int  | 出力する番号<br />1 : CC1 / 2 : CC2 / 3 : CC3 / 4 : CC4 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### set_strobeメソッド\n\nストロボを設定します。\n\nAcapLib2のAcapSetStrobe相当\n\n```\ndef set_strobe(self, strobe_en : int, strobe_delay : int, strobe_time : int) -> int:\n```\n\n  ***パラメータ***\n\n| 名前         | 型   | 説明                                                         |\n| ------------ | ---- | ------------------------------------------------------------ |\n| strobe_en    | int  | ストロボ 使用設定<br />0 : 無効 / 1 : 有効                   |\n| strobe_delay | int  | ストロボパルスが出力されるまでの遅延時間 (1us 単位)<br />0 ～ 65,535 |\n| strobe_time  | int  | ストロボパルスを出力する時間 (1us 単位)<br />0 ～ 65,535     |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### snapメソッド\n\n画像を１枚取込みます。\n\n高速に連続取込する場合は、grabをお使い下さい。（参照：[Grab sample](#Grab-sample)）\n\n```\ndef snap(self, copy : bool = False) -> Tuple[int, Union[np.ndarray, None]]:\n```\n\n  ***パラメータ***\n\n| 名前 | 型   | 説明                                                         |\n| ---- | ---- | ------------------------------------------------------------ |\n| copy | bool | True: リングバッファから画像データをコピーして取得します。<br/>False:リングバッファの画像データを取得します。この場合、画像デー<br/>タが上書きされる場合があります。 |\n\n***戻り値***\n\n(ret, frame)\n\n| 名前  | 型         | 説明                                                         |\n| ----- | ---------- | ------------------------------------------------------------ |\n| ret   | int        | 成功時: 1<br />失敗時: 0                                     |\n| frame | np.ndarray | 取得した画像データ<br/>カラー画像の場合、データの並びはB, G, Rとなります。<br/>（OpenCVと同等） |\n\n<div style=\"page-break-after:always\"></div>\n\n### wait_frame_endメソッド\n\n１フレーム分の画像取込完了を待ちます。\n\nAcapLib2のAcapWaitEventのACL_INT_FRAMEEND相当\n\n```\ndef wait_frame_end(self, timeout = -1) -> int:\n```\n\n  ***パラメータ***\n\n| 名前    | 型   | 説明                                                         |\n| ------- | ---- | ------------------------------------------------------------ |\n| timeout | int  | 待機時間をmsec単位で指定します。<br />値が負の場合、timeoutプロパティで指定された時間分待機します。 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n### wait_gpinメソッド\n\nGPIN 割り込みを待ちます。\n\nAcapLib2のAcapWaitEventのACL_INT_GPIN相当\n\n```\ndef wait_gpin(self, timeout = -1) -> int:\n```\n\n  ***パラメータ***\n\n| 名前    | 型   | 説明                                                         |\n| ------- | ---- | ------------------------------------------------------------ |\n| timeout | int  | 待機時間をmsec単位で指定します。<br />値が負の場合、timeoutプロパティで指定された時間分待機します。 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n### wait_grab_endメソッド\n\ngrabの入力停止を待ちます。\n\nAcapLib2のAcapWaitEventのACL_INT_GRABEND相当\n\n```\ndef wait_grab_end(self, timeout = -1) -> int:\n```\n\n  ***パラメータ***\n\n| 名前    | 型   | 説明                                                         |\n| ------- | ---- | ------------------------------------------------------------ |\n| timeout | int  | 待機時間をmsec単位で指定します。<br />値が負の場合、timeoutプロパティで指定された時間分待機します。 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n### wait_grab_startメソッド\n\ngrabの入力開始を待ちます。\n\nAcapLib2のAcapWaitEventのACL_INT_GRABSTART相当\n\n```\ndef  wait_grab_start(self, timeout = -1) -> int:\n```\n\n  ***パラメータ***\n\n| 名前    | 型   | 説明                                                         |\n| ------- | ---- | ------------------------------------------------------------ |\n| timeout | int  | 待機時間をmsec単位で指定します。<br />値が負の場合、timeoutプロパティで指定された時間分待機します。 |\n\n***戻り値***\n\nret\n\n| 名前 | 型   | 説明                     |\n| ---- | ---- | ------------------------ |\n| ret  | int  | 成功時: 1<br />失敗時: 0 |\n\n<div style=\"page-break-after:always\"></div>\n\n# GraphicsBox Class\n\ntkinterのCanvasクラスを継承した、tkinter用画像表示ウィジェットとなります。\n\n## Constructors\n\n| Constructors                             | Descriptoin                             |\n| ---------------------------------------- | --------------------------------------- |\n| GraphicsBox(parent, option = value, ...) | option設定はTkinterのCanvasクラスと同じ |\n\n## Properties\n\n| Properties       | Descriptoin                                                  | Get/Set |\n| ---------------- | ------------------------------------------------------------ | :-----: |\n| affine_matrix    | 画像表示に使用している3x3のアフィン変換行列を取得・設定します。 |   ●/●   |\n| bright_enabled   | 輝度値の表示(True)／非表示(False)の設定を取得・設定します。  |   ●/●   |\n| cross_beam_color | プロファイル用十字線の色を取得・設定します。                 |   ●/●   |\n| disp_scale       | 画像表示倍率を取得します。                                   |   ●/-   |\n| grid_color       | グリッド線の色を取得・設定します。                           |   ●/●   |\n| grid_disp_scale  | グリッド線を表示する画像の最小倍率を取得・設定します。       |   ●/●   |\n| grid_enabled     | 画像拡大時のグリッド線の表示(True)／非表示(False)の設定を取得・設定します。 |   ●/●   |\n| max_scale        | 画像の拡大時の最大倍率を取得・設定します。                   |   ●/●   |\n| min_scale        | 画像の縮小時の最小倍率を取得・設定します。                   |   ●/●   |\n| profile_enabled  | プロファイルの表示(True)／非表示(False)の設定を取得・設定します。 |   ●/●   |\n| profile_hight    | プロファイルグラフの高さを取得・設定します。                 |   ●/●   |\n| profile_x        | プロファイルを表示するX座標（ウィジェットの座標）を取得・設定します。 |   ●/●   |\n| profile_x_color  | モノクロ画像時の横方向のプロファイルの線色を取得・設定します。 |   ●/●   |\n| profile_y        | プロファイルを表示するY座標（ウィジェットの座標）を取得・設定します。 |   ●/●   |\n| profile_y_color  | モノクロ画像時の縦方向のプロファイルの線色を取得・設定します。 |   ●/●   |\n| zoomup_direction | 画像拡大時のホイールの回転方向を取得・設定します。  <br />-1:下へ回転、1:上へ回転 |   ●/●   |\n\n<div style=\"page-break-after:always\"></div>\n\n## Methods\n\n| Methods                             | Descriptoin                                                  |\n| ----------------------------------- | ------------------------------------------------------------ |\n| dest_to_src_xy(xy)                  | 現在の表示状態において、ウィジェット上の座標を画像上の座標へ変換します。 |\n| draw_image(image)                   | PillowのImage形式もしくはnumpyのndarray形式の画像をGraphicsBoxへ表示します。表示可能なのは8bit,24bit,32bitの画像のみです。 |\n| redraw_image()                      | 画像を再描画します。                                         |\n| reset_transform()                   | 画像表示を初期状態（左上に等倍率）に戻します。               |\n| scale_at(scale, cx, cy)             | 指定した点を中心に拡大縮小します。                           |\n| scale_transform(scale)              | 画像表示の相対倍率を指定し拡大縮小します。                   |\n| src_to_dest_xy(xy)                  | 現在の表示状態において、画像上の座標をウィジェット上の座標へ変換します。 |\n| translate(offset_x, offset_y)       | 画像表示位置を平行移動します。                               |\n| zoom_fit(image_width, image_height) | 画像の幅と高さを指定し、ウィジェット全体に画像を表示します。 |\n\n<div style=\"page-break-after:always\"></div>\n\n### dest_to_src_xyメソッド\n\n表示している画像のウィジェット上の座標（ウィジェットの左上が原点）から、画像の座標へ変換します。\n\n```\ndef dest_to_src_xy(self, xy : Tuple[float, float]) -> Tuple[float, float]:\n```\n\n  ***パラメータ***\n\n| 名前 | 型                  | 説明                                                         |\n| ---- | ------------------- | ------------------------------------------------------------ |\n| xy   | Tuple[float, float] | 表示している画像のウィジェット上のxy座標（ウィジェットの左上が原点）をfloat型のタプルで指定します。 |\n\n***戻り値***\n\n(x, y)\n\n| 名前   | 型                  | 説明                                            |\n| ------ | ------------------- | ----------------------------------------------- |\n| (x, y) | Tuple[float, float] | 画像上のxy座標がfloat型のタプルで取得されます。 |\n\n### draw_imageメソッド\n\n画像データをウィジェットに表示します。\n\n```\ndef draw_image(self, image : Union[Image.Image, np.ndarray])　-> int:\n```\n\n  ***パラメータ***\n\n| 名前  | 型                             | 説明                                                         |\n| ----- | ------------------------------ | ------------------------------------------------------------ |\n| image | Union[Image.Image, np.ndarray] | 表示する画像データ<br />データはPillowのImageオブジェクトもしくはnumpyのndarrayオブジェクトとなります。<br />カラー画像の場合、R,G,Bの順で指定してください。 |\n\n***戻り値***\n\nid\n\n| 名前 | 型   | 説明                                        |\n| ---- | ---- | ------------------------------------------- |\n| id   | int  | tkinterのcreate_imageの戻り値を取得します。 |\n\n### redraw_imageメソッド\n\n画像を再描画します。\n\n```\ndef redraw_image(self):\n```\n\n### reset_transformメソッド\n\nクラス内部で使用している画像表示用アフィン変換行列をセット（単位行列にする）します。\nリセット後に画像を表示すると、画像はウィジェットの左上に等倍（倍率が１）で表示されます。\n\n```\ndef reset_transform(self):\n```\n\n### scale_atメソッド\n\n指定した座標（ウィジェットの座標）を中心に画像を拡大縮小します。\n\n```\ndef scale_at(self, scale:float, cx:float, cy:float):\n```\n\n  ***パラメータ***\n\n| 名前  | 型    | 説明                                                         |\n| ----- | ----- | ------------------------------------------------------------ |\n| scale | float | 画像の表示倍率を指定します。<br />倍率は現在の表示状態からの相対倍率となります。 |\n| cx    | float | 拡大縮小の基点となる x 座標（ウィジェットの座標）を指定します。 |\n| cy    | float | 拡大縮小の基点となる y 座標（ウィジェットの座標）を指定します。 |\n\n### scale_transformメソッド\n\n原点（ウィジェットの左上）を中心に画像を拡大縮小します。\n\n```\ndef scale_transform(self, scale:float):\n```\n\n  ***パラメータ***\n\n| 名前  | 型    | 説明                                                         |\n| ----- | ----- | ------------------------------------------------------------ |\n| scale | float | 画像の表示倍率を指定します。<br />倍率は現在の表示状態からの相対倍率となります。 |\n\n<div style=\"page-break-after:always\"></div>\n\n### src_to_dest_xyメソッド\n\n表示している画像上の座標から、ウィジェット上の座標へ変換します。\n\n```\ndef src_to_dest_xy(self, xy : Tuple[float, float]) -> Tuple[float, float]:\n```\n\n  ***パラメータ***\n\n| 名前 | 型                  | 説明                                                      |\n| ---- | ------------------- | --------------------------------------------------------- |\n| xy   | Tuple[float, float] | 表示している画像上のxy座標をfloat型のタプルで指定します。 |\n\n***戻り値***\n\n(x, y)\n\n| 名前   | 型                  | 説明                                                    |\n| ------ | ------------------- | ------------------------------------------------------- |\n| (x, y) | Tuple[float, float] | ウィジェット上のxy座標がfloat型のタプルで取得されます。 |\n\n### translateメソッド\n\n画像の表示位置を指定した大きさ（ウィジェット上の距離）で平行移動します。\n\n```\ndef translate(self, offset_x : float, offset_y : float):\n```\n\n  ***パラメータ***\n\n| 名前     | 型    | 説明                                                    |\n| -------- | ----- | ------------------------------------------------------- |\n| offset_x | float | 画像のX方向の移動量をウィジェット上の距離で指定します。 |\n| offset_y | float | 画像のY方向の移動量をウィジェット上の距離で指定します。 |\n\n### zoom_fitメソッド\n\n画像全体がウィジェット全体に表示されるように表示位置、倍率を調整します。\n\n```\ndef zoom_fit(self, image_width : int, image_height : int):\n```\n\n  ***パラメータ***\n\n| 名前         | 型   | 説明                             |\n| ------------ | ---- | -------------------------------- |\n| image_width  | int  | 画像の幅の画素数を指定します。   |\n| image_height | int  | 画像の高さの画素数を指定します。 |\n\n\n\n# Changelog\n\n## Ver.1.0.0\n\n| モジュール  | バージョン | 備考 |\n| ----------- | ---------- | ---- |\n| acaplib2    | Ver.1.0.0  | 初版 |\n| acapy       | Ver.1.0.0  | 初版 |\n| graphicsbox | Ver.1.0.0  | 初版 |\n\n初版\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.avaldata.co.jp/contact",
    "keywords": "AVALDATA acapy AcapLib2",
    "license": "3-Clause BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "acapy",
    "package_url": "https://pypi.org/project/acapy/",
    "platform": "",
    "project_url": "https://pypi.org/project/acapy/",
    "project_urls": {
      "Homepage": "https://www.avaldata.co.jp/contact"
    },
    "release_url": "https://pypi.org/project/acapy/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "acapy package (Python bindings for AVALDATA AcapLib2 )",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12296977,
  "releases": {
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2474d15a80a08b28b05313feacecc0eaf0fb9701785d0a705d647ab388c901b4",
          "md5": "c1457bf7c24640d52c73c9b0c7594633",
          "sha256": "a56095801373736fd728ccfdd02cf11431a567bcc3d31ffc38f8ed4688353daf"
        },
        "downloads": -1,
        "filename": "acapy-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1457bf7c24640d52c73c9b0c7594633",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52016,
        "upload_time": "2021-04-12T05:44:13",
        "upload_time_iso_8601": "2021-04-12T05:44:13.833330Z",
        "url": "https://files.pythonhosted.org/packages/24/74/d15a80a08b28b05313feacecc0eaf0fb9701785d0a705d647ab388c901b4/acapy-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf7a12cad3ec4c787b115a1b85c6fe5de1d67d213be5e817ec9f36ec5da29861",
          "md5": "0827b6594bcd25a9bfc22d2ccb1d0b0b",
          "sha256": "356a609dcd68df6cd4620242031581246d609d73ec673cee0e80e1f586ee0ee3"
        },
        "downloads": -1,
        "filename": "acapy-0.0.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0827b6594bcd25a9bfc22d2ccb1d0b0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67254,
        "upload_time": "2021-07-13T04:31:30",
        "upload_time_iso_8601": "2021-07-13T04:31:30.232853Z",
        "url": "https://files.pythonhosted.org/packages/bf/7a/12cad3ec4c787b115a1b85c6fe5de1d67d213be5e817ec9f36ec5da29861/acapy-0.0.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82288055122e1b1d1ed30349538c73d45735d4987800f0e5a5ff36d9bcb9718a",
          "md5": "8a5925ff23ec8c2b09f61c28481287c0",
          "sha256": "8fb37e46e7d921c5c07249328c6b9831bae87c9d9d65532ed486a7079f909f13"
        },
        "downloads": -1,
        "filename": "acapy-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a5925ff23ec8c2b09f61c28481287c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2076,
        "upload_time": "2021-03-18T08:42:28",
        "upload_time_iso_8601": "2021-03-18T08:42:28.257150Z",
        "url": "https://files.pythonhosted.org/packages/82/28/8055122e1b1d1ed30349538c73d45735d4987800f0e5a5ff36d9bcb9718a/acapy-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05d6c38e47e3f3fdd3d35148be2311096439b8ebdb78bd62ded8aed83475e012",
          "md5": "cef17763023b78bc552b509aa4923a2b",
          "sha256": "18932b0649a8c11a8a647de5e4ddb592c6966d83f9af61d575912e3ebc17b2a0"
        },
        "downloads": -1,
        "filename": "acapy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cef17763023b78bc552b509aa4923a2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67279,
        "upload_time": "2021-12-14T05:10:38",
        "upload_time_iso_8601": "2021-12-14T05:10:38.353902Z",
        "url": "https://files.pythonhosted.org/packages/05/d6/c38e47e3f3fdd3d35148be2311096439b8ebdb78bd62ded8aed83475e012/acapy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18ce53958609d9a41aca49f04dcd2f2129b7968a790fcd37f7479bd189106474",
          "md5": "8f5c77d83a60f58404f066fac5f83b35",
          "sha256": "9293616764f74d616eac9f68985f367347b7dc9bd8a6065e81799eb8edf04478"
        },
        "downloads": -1,
        "filename": "acapy-1.0.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f5c77d83a60f58404f066fac5f83b35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67273,
        "upload_time": "2021-07-13T03:57:31",
        "upload_time_iso_8601": "2021-07-13T03:57:31.485189Z",
        "url": "https://files.pythonhosted.org/packages/18/ce/53958609d9a41aca49f04dcd2f2129b7968a790fcd37f7479bd189106474/acapy-1.0.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05d6c38e47e3f3fdd3d35148be2311096439b8ebdb78bd62ded8aed83475e012",
        "md5": "cef17763023b78bc552b509aa4923a2b",
        "sha256": "18932b0649a8c11a8a647de5e4ddb592c6966d83f9af61d575912e3ebc17b2a0"
      },
      "downloads": -1,
      "filename": "acapy-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cef17763023b78bc552b509aa4923a2b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 67279,
      "upload_time": "2021-12-14T05:10:38",
      "upload_time_iso_8601": "2021-12-14T05:10:38.353902Z",
      "url": "https://files.pythonhosted.org/packages/05/d6/c38e47e3f3fdd3d35148be2311096439b8ebdb78bd62ded8aed83475e012/acapy-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}