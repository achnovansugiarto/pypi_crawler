{
  "info": {
    "author": "Ra Systems",
    "author_email": "ramez@rasystems.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/django-slick-reporting.svg\n    :target: https://pypi.org/project/django-ra\n\n.. image:: https://img.shields.io/pypi/pyversions/django-slick-reporting.svg\n    :target: https://pypi.org/project/django-ra\n\n.. image:: https://img.shields.io/readthedocs/django-slick-reporting\n    :target: https://django-slick-reporting.readthedocs.io/\n\n.. image:: https://api.travis-ci.org/ra-systems/django-slick-reporting.svg?branch=master\n    :target: https://travis-ci.org/ra-systems/django-slick-reporting\n\n.. image:: https://img.shields.io/codecov/c/github/ra-systems/django-slick-reporting\n    :target: https://codecov.io/gh/ra-systems/django-slick-reporting\n\n\n\n\nDjango Slick Reporting\n======================\n\nA one stop reports engine with batteries included.\n\nWhat it does:\n-------------\n\nGiven a model that contains some data *(ex: an OrderLine Model)*; Slick Reporting allows you to compute any kind of stats\n(Sum, AVG, etc.. ) over any field using simple and intuitive analogy.\nIt also allow you to use those computation units in a time series and cross tab.\n\nFeatures\n--------\n\n- Preform Different computation grouping over the foreign keys.\n- Those computation can also be calculated on Time Series report *like monthly*, with custom dates ability.\n- Computation can be used on Cross tab reports\n- Create your Custom Calculation\n- Optimized for speed !\n- ... and much more\n\nInstallation\n------------\n\nUse the package manager `pip <https://pip.pypa.io/en/stable/>`_ to install django-slick-reporting.\n\n.. code-block:: console\n\n        pip install django-slick-reporting\n\n\nUsage\n-----\n\n**From high Level**,\n\nYou can use ``SampleReportView`` which is a subclass of ``django.views.generic.FormView`` like this\n\n.. code-block:: python\n\n    # in views.py\n    from slick_reporting.views import SampleReportView\n    from .models import MySalesItems\n\n    class TotalProductSales(SampleReportView):\n\n        # The model where you have the data\n        report_model = MySalesItems\n\n        # the main date to use if date filter is needed\n        date_field = 'date_placed' # or 'order__date_placed'\n        # date_field support traversing,\n        # date_field = 'order__date_placed'\n\n        # A foreign key to group calculation on\n        group_by = 'product'\n\n        # The columns you want to display\n        columns = ['title', '__total_quantity__', '__total__']\n\n    # in your urls.py\n    path('url-to-report', TotalProductSales.as_view())\n\nThis will return a page, with a table looking like\n\n+-----------+----------------+-------------+\n| Product   | Total Quantity | Total Value |\n+-----------+----------------+-------------+\n| Product 1 | 8              | 120         |\n+-----------+----------------+-------------+\n| Product 2 | 13             | 240         |\n+-----------+----------------+-------------+\n\nYou can also do a monthly time series :\n\n\n.. code-block:: python\n\n    # in views.py\n    from slick_reporting.views import SampleReportView\n    from .models import MySalesItems\n\n    class MonthlyProductSales(SampleReportView):\n        report_model = MySalesItems\n        date_field = 'date_placed'\n        group_by = 'product'\n        columns = ['name', 'sku']\n\n        # Analogy for time series\n        time_series_pattern = 'monthly'\n        time_series_columns = ['__total_quantity__']\n\n\nhook it into your ``urls.py`` , and it would return a page with a table looking something like this:\n\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n| Product Name | SKU                  | Total Quantity  | Total Quantity | Total Quantity in ... | Total Quantity in December 20 |\n|              |                      | in Jan 20       | in Feb 20      |                       |                               |\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n| Product 1    | <from product model> | 10              | 15             | ...                   | 14                            |\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n| Product 2    | <from product model> | 11              | 12             | ...                   | 12                            |\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n| Product 3    | <from product model> | 17              | 12             | ...                   | 17                            |\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n\n*This example code assumes your \"MySalesItems\" contains the fields `product` as foreign key,  `quantity` as number and `date_placed` as a date field. It also assumes your `Product` model has an SKU field..*\n--\n\n**On a low level**\n\nYou can interact with the `ReportGenerator` using same syntax as used with the `SampleReportView` .\n\n.. code-block:: python\n\n    from slick_reporting.generator import ReportGenerator\n    from . models import MySalesModel\n\n    report = ReportGenerator(report_model=MySalesModel,\n                            group_by='product',\n                            columns=['title', '__total__']\n    )\n    report.get_report_data() #-> [{'title':'Product 1', '__total__: 56}, {'title':'Product 2', '__total__: 43}, ]\n\n\nThis is just a scratch, for more please visit the documentation \n\n\nDocumentation\n-------------\n\nAvailable on `Read The Docs <https://django-slick-reporting.readthedocs.io/en/latest/>`_\n\n\n\nRunning tests\n-----------------\nCreate a virtual environment (maybe with `virtual slick_reports_test`), activate it; Then ,\n \n.. code-block:: console\n    \n    $ git clone git+git@github.com:ra-systems/django-slick-reporting.git\n    $ cd tests\n    $ python -m pip install -e ..\n\n    $ python runtests.py\n    #     Or for Coverage report\n    $ coverage run --include=../* runtests.py [-k]\n    $ coverage html\n\n\nContributing\n------------\n\nWe follow `Django's guidelines <https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/>`_ guidelines.\n\nAuthors\n--------\n\n* **Ramez Ashraf** - *Initial work* - `RamezIssac <https://github.com/RamezIssac>`_",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ra-systems/django-slick-reporting",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "slick-reporting",
    "package_url": "https://pypi.org/project/slick-reporting/",
    "platform": "",
    "project_url": "https://pypi.org/project/slick-reporting/",
    "project_urls": {
      "Documentation": "https://ra-framework.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/ra-systems/django-slick-reporting",
      "Source": "https://github.com/ra-systems/django-slick-reporting",
      "Travis CI": "https://travis-ci.org/ra-systems/RA/"
    },
    "release_url": "https://pypi.org/project/slick-reporting/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A one-stop report adn analytics generation and computation with batteries included",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7098268,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb4ee4f28d7f17e7a2c565b8de31cba99d5752ba59fcc241135889276d1aa835",
          "md5": "b8fdb772e7159fb46755fb42ebbad1d8",
          "sha256": "308b0892c57e574738a15bd900064a4277e4dd6b2d16cd13f1ca6bc9f5d2c2a7"
        },
        "downloads": -1,
        "filename": "slick-reporting-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b8fdb772e7159fb46755fb42ebbad1d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21627,
        "upload_time": "2020-04-25T07:19:30",
        "upload_time_iso_8601": "2020-04-25T07:19:30.621079Z",
        "url": "https://files.pythonhosted.org/packages/bb/4e/e4f28d7f17e7a2c565b8de31cba99d5752ba59fcc241135889276d1aa835/slick-reporting-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb4ee4f28d7f17e7a2c565b8de31cba99d5752ba59fcc241135889276d1aa835",
        "md5": "b8fdb772e7159fb46755fb42ebbad1d8",
        "sha256": "308b0892c57e574738a15bd900064a4277e4dd6b2d16cd13f1ca6bc9f5d2c2a7"
      },
      "downloads": -1,
      "filename": "slick-reporting-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b8fdb772e7159fb46755fb42ebbad1d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21627,
      "upload_time": "2020-04-25T07:19:30",
      "upload_time_iso_8601": "2020-04-25T07:19:30.621079Z",
      "url": "https://files.pythonhosted.org/packages/bb/4e/e4f28d7f17e7a2c565b8de31cba99d5752ba59fcc241135889276d1aa835/slick-reporting-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}