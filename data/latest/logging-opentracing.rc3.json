{
  "info": {
    "author": "Clemens Korner",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# opentracing-logging-python\nOpenTracing handler for the Python logging library\n\n**Information: This library is currently in a beta state**\n\n## Installation\n\nInstall the package with pip\n\n```\npip install logging-opentracing\n```\n\n## Usage\nWe use the mock tracer for the follwing examples but you can also use other OpenTracing compatible tracers.\n\nAn compatible tracer would be, for instance, [Jaeger](https://github.com/jaegertracing/jaeger-client-python)\n\n### Simple\nIn the first example we initialize the `OpenTracingHandler` for `logging` and create an active span with the name\n`hello-world`.\nIn this active span we make make an info-log and in the end we have a look if this log was forwarded to OpenTracing.\n\n```python\nimport logging\n\nfrom opentracing.mocktracer import MockTracer\n\nfrom logging_opentracing import OpenTracingHandler\n\n# initialize a mock tracer\ntracer = MockTracer()\n\n# prepare the logger\nlogger = logging.getLogger('mylogger')\nlogger.setLevel(logging.INFO)\n\n# create a new OpenTracing handler for the logging package\nhandler = OpenTracingHandler(tracer=tracer)\nlogger.addHandler(handler)\n\n# start an active span\nwith tracer.start_active_span('hello-world'):\n    # this log will be propagated to\n    logger.info('Hello World from Python logging to OpenTracing')\n\n# retrieve the finished span\nfinished_span = tracer.finished_spans()[0]\n# get the log line from\nlog = finished_span.logs[0]\n\n# print the key_values of the log\nprint(log.key_values)\n# {'event': 'info', 'message': 'Hello World from Python logging to OpenTracing'}\n```\n\nHere some additional explanation\n\n```python\n# initialize a mock tracer\ntracer = MockTracer()\n```\nInitialize the mock tracer from the OpenTracing library.\nAs mentioned before, instead you can use any OpenTracing compatible tracer.\n\n```python\n# prepare the logger\nlogger = logging.getLogger('mylogger')\nlogger.setLevel(logging.INFO)\n```\nPrepare a logger from the Python `logging` package.\nSet its logging level to `INFO` such that logs with the severity `INFO` are also captured.\n\n```python\n# create a new OpenTracing handler for the logging package\nhandler = OpenTracingHandler(tracer=tracer)\nlogger.addHandler(handler)\n```\nFirst, initialize the OpenTracing handler `OpenTracingHandler` for `logging`.\nIt needs an OpenTracing tracer as parameter.\nThen, add the handler to the logger.\n\n```python\n# start an active span\nwith tracer.start_active_span('hello-world'):\n    # this log will be propagated to\n    logger.info('Hello World from Python logging to OpenTracing')\n```\nStart a new active span with the name `hello-world`.\nWithin this active span, make a log with the severity info.\nIt is expected that this log will be captured by our handler for OpenTracing which should forward the log to our tracer.\n\n```python\n# retrieve the finished span\nfinished_span = tracer.finished_spans()[0]\n# get the log line from\nlog = finished_span.logs[0]\n\n# print the key_values of the log\nprint(log.key_values)\n# {'event': 'info', 'message': 'Hello World from Python logging to OpenTracing'}\n```\nThese lines are only used to check if the log has been successfully forwarder to out tracer.\n\n### Custom Formatter\nThe previous example showed how logs are forwarded to OpenTracing with the default formating option for logs.\nThereby, the defalt format is `{'info': <log severity>, 'message': <log format>}`.\n\nIn the case that a different formatting is required, in the constructor of `OpenTracingHandler` can be adjusted.\nTo do so, set the parameter `kv_format`.\nIt expects a dictionary, where each key-value pair represents a key value pair forwarded to the method `log_kv()` of\nOpenTracing. Thereby,\n\n- `key` is the key which will be directly used as key in the OpenTracing log\n- `value` is a string which can contain placeholders for %-stype formatting of the logging package. (See also [Format](#format) for more details)\n\nFor each key-value pair a new formatter `logging.Formatter` will be created.\n\nWhen we replace from the previous [simple example](#Simple) the lines\n```python\n# create a new OpenTracing handler for the logging package\nhandler = OpenTracingHandler(tracer=tracer)\n```\nwith the following lines\n```python\n# create a new formatter with a custom format\nformatter = OpenTracingFormatter(kv_format={\n    'event': '%(levelname_lower)s',\n    'message': '%(message)s',\n    'source': '%(filename)s:L%(lineno)d',\n})\n\n# create a new OpenTracing handler which uses the custom formatter\nhandler = OpenTracingHandler(tracer=tracer, formatter=formatter)\n```\nwe initialize a handler with a formatter with a custom format.\n\nThe expected output of the modified example is\n```\n{'event': 'info', 'message': 'Hello World from Python logging to OpenTracing', 'source': 'custom_formatter.py:L26'}\n```\n\nSee the full example [custom_formatter.py](examples/custom_formatter.py)\n\n### Manually pass a span\nThe OpenTracing logging handler tries to retrieve a span by accessing the current scope\n`scope = tracer.scope_manager.active` and an the case that a scope is available accessing its current span\n`span = scope.span`.\nHowever, such a scope is only available when a scope has been indirectly created through starting an active span\n`tracer.start_active_span()` or when a scope has been directly activated `tracer.scope_manager.activate()`.\n\nTherefore it is also possible to pass a span to a log with the `extra` parameter.\n```python\n# start a span\nwith tracer.start_span('hello-world') as span:\n    # the span is directly passed to the log with the \"extra\" parameter\n    logger.info('A span has been directly passed', extra={'span': span})\n```\n\nThe default key which is used to check if a span has been passed is `'span'`.\nHowever, it can be customized in the instantiation of the handler.\n```python\nhandler = OpenTracingHandler(tracer=tracer, span_key='sp')\n\n# ...\n\n# start a span\nwith tracer.start_span('hello-world') as span:\n    # the span is directly passed to the log with the \"extra\" parameter\n    # this time we have to use the key \"sp\" because we set span_key='sp' in the constructor\n    logger.info('A span has been directly passed', extra={'sp': span})\n```\n\nSee the full example [span_passed.py](examples/span_passed.py)\n\n### Exception\nThe OpenTracing handler can also be used to log exceptions.\nTo do so, just log with the the level `exception`.\n\n```python\ntry:\n    logger.info('This will be difficult')\n    # this statement will cause a ZeroDivisionError\n    1 / 0\nexcept ZeroDivisionError:\n    logger.exception('Oh no we have a ZeroDivision Error')\n```\n\nThis would result in the logs\n```\n{'event': 'info', 'message': 'This will be difficult'}\n{'event': 'error', 'message': 'Oh no we have a ZeroDivision Error', 'error.object': ZeroDivisionError('division by zero'), 'error.kind': <class 'ZeroDivisionError'>, 'stack': '  File \\\"<path_suffix>/logging_opentracing/examples/exception.py\\\" line 23, in <module>\\\\n    1 / 0\\\\n'}\n```\nwhere the same formatting is used like OpenTracing uses when an uncaught exception is created.\n\nSee the full example [exception.py](examples/exception.py)\n\n### Additional key-value pairs\nTo each logging call extra key-value pairs can be passed which should be included in a OpenTracing log.\nPass a dictionary with the key-value pairs to be added to the key `kv` of the extra parameter of a logging call.\n\n```python\n# add additional key-value pairs to the log by providing a dict to the key \"kv\" of the \"extra\" parameter\nlogger.info('Here we pass additional arguments to the log', extra={'kv': {'key a': [1, 2, 3], 'key b': 'foo'}})\n```\nwhich results in a log\n```\n{'event': 'info', 'message': 'Here we pass additional arguments to the log', 'key a': [1, 2, 3], 'key b': 'foo'}\n```\n\nPer default these additional key-value pairs are expected to have the key `kv`.\nHowever, this can be customized by setting the parameter `extra_kv_key` of the constructor of `OpenTracingHandler`.\n\n```python\nOpenTracingHandler(tracer=tracer, extra_kv_key='properties')\n\n# ...\n\n# add additional key-value pairs to the log by providing a dict to the customized key \"properties\" of the \"extra\" parameter\nlogger.info('Here we pass additional arguments to the log', extra={'properties': {'key a': [1, 2, 3], 'key b': 'foo'}})\n```\n\nSee the full example [extra_kv.py](examples/extra_kv.py)\n\n## Format\nThis library uses `logging.Formatter(fmt=fmt).format(logging_LogRecord)` for getting information from a\n`logging.LogRecord`, where `fmt` is the format specified in the\nvalues of the parameter `kv_format` in the constructor of `OpenTracingHandler`.\n`logging_LogRecord` is the variable which hold a `logging.logRecord`.\n\nTherefore, the format of `fmt` follows the formatting specification of\n[LogRecord attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes).\n\nFollowing, an excerpt of the official Python docs; use the format placeholders specified in the column `Format`.\n\n| Attribute name | Format | Description |\n|----------------|--------|-------------|\n| asctime | `%(asctime)s` | Human-readable time when the LogRecord was created. By default this is of the form ‘2003-07-08 16:49:45,896’ (the numbers after the comma are millisecond portion of the time). |\n| created | `%(created)f` | Time when the LogRecord was created (as returned by time.time()). |\n| filename | `%(filename)s` | Filename portion of `pathname`. |\n| funcName | `%(funcName)s` | Name of function containing the logging call. |\n| levelname | `%(levelname)s` | Text logging level for the message (`'DEBUG'`, `'INFO'`, `'WARNING'`, `'ERROR'`, `'CRITICAL'`). |\n| levelname_lower | `%(levelname_lower)s` | Lower case text logging level for the message (`'debug'`, `'info'`, `'warning'`, `'error'`, `'critical'`). This is a non-default attribute which will be automatically added by the OpenTracingFormatter. |\n| levelno | `%(levelno)s` | Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL). |\n| lineno | `%(lineno)d` | Source line number where the logging call was issued (if available). |\n| message | `%(message)s` | The logged message. This is set when Formatter.format() is invoked. |\n| module | `%(module)s` | Module (name portion of `filename`). |\n| msecs | `%(msecs)d` | Millisecond portion of the time when the LogRecord was created. |\n| name | `%(name)s` | Name of the logger used to log the call. |\n| pathname | `%(pathname)s` | Full pathname of the source file where the logging call was issued (if available). |\n| process | `%(process)d` | Process ID (if available). |\n| processName | `%(processName)s` | Process name (if available). |\n| relativeCreated | `%(relativeCreated)d` | Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded. |\n| thread | `%(thread)d` | Thread ID (if available). |\n| threadName | `%(threadName)s` | Thread name (if available). |",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kornerc/python-logging-opentracing",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logging-opentracing",
    "package_url": "https://pypi.org/project/logging-opentracing/",
    "platform": "any",
    "project_url": "https://pypi.org/project/logging-opentracing/",
    "project_urls": {
      "Homepage": "https://github.com/kornerc/python-logging-opentracing"
    },
    "release_url": "https://pypi.org/project/logging-opentracing/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "OpenTracing handler for the Python logging library",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9414619,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad657704b3e372404a69f604fbb3d1d4edb6f6fe7e73bf34356e397311c6bcbd",
          "md5": "93ca7ab7eac5180142cdb32b01168f0d",
          "sha256": "2d6eab9550bf6830294742edbe759de7189be99d824e7c4dffc8c2ff9f0bf56a"
        },
        "downloads": -1,
        "filename": "logging_opentracing-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "93ca7ab7eac5180142cdb32b01168f0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24281,
        "upload_time": "2021-02-14T10:35:41",
        "upload_time_iso_8601": "2021-02-14T10:35:41.564962Z",
        "url": "https://files.pythonhosted.org/packages/ad/65/7704b3e372404a69f604fbb3d1d4edb6f6fe7e73bf34356e397311c6bcbd/logging_opentracing-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1fad5e510692cd7f83b49a71df21add25f01c61cc2c1b37ebb3d72752b2274e",
          "md5": "be14b824eb39e2c4641c0506bdf63937",
          "sha256": "39a0c8f40e04b58727362e73ac4c59c1a4e3020f9cbd7fc9263bd42f0e1d850e"
        },
        "downloads": -1,
        "filename": "logging_opentracing-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "be14b824eb39e2c4641c0506bdf63937",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27976,
        "upload_time": "2021-02-14T11:04:44",
        "upload_time_iso_8601": "2021-02-14T11:04:44.600241Z",
        "url": "https://files.pythonhosted.org/packages/a1/fa/d5e510692cd7f83b49a71df21add25f01c61cc2c1b37ebb3d72752b2274e/logging_opentracing-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fc11e2ded91d7046f8e208281bc9b48cfec60c3b3caa4a0953cf1c66430c725",
          "md5": "19e4c2a3b3989c2dbeecd2d57fa6bc3e",
          "sha256": "39d17d7475167f7f5be485421c99917afc3fb4ae7ab74c4b924ea9147f215486"
        },
        "downloads": -1,
        "filename": "logging-opentracing-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "19e4c2a3b3989c2dbeecd2d57fa6bc3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27934,
        "upload_time": "2021-02-14T11:10:02",
        "upload_time_iso_8601": "2021-02-14T11:10:02.900094Z",
        "url": "https://files.pythonhosted.org/packages/5f/c1/1e2ded91d7046f8e208281bc9b48cfec60c3b3caa4a0953cf1c66430c725/logging-opentracing-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fc11e2ded91d7046f8e208281bc9b48cfec60c3b3caa4a0953cf1c66430c725",
        "md5": "19e4c2a3b3989c2dbeecd2d57fa6bc3e",
        "sha256": "39d17d7475167f7f5be485421c99917afc3fb4ae7ab74c4b924ea9147f215486"
      },
      "downloads": -1,
      "filename": "logging-opentracing-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "19e4c2a3b3989c2dbeecd2d57fa6bc3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27934,
      "upload_time": "2021-02-14T11:10:02",
      "upload_time_iso_8601": "2021-02-14T11:10:02.900094Z",
      "url": "https://files.pythonhosted.org/packages/5f/c1/1e2ded91d7046f8e208281bc9b48cfec60c3b3caa4a0953cf1c66430c725/logging-opentracing-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}