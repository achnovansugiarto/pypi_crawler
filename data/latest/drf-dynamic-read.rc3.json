{
  "info": {
    "author": "Girish Kotra",
    "author_email": "girish934@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "drf-dynamic-read\n===================================================\nA utility to improve and optimise read operations(querying and serialization of data) for Django Rest Framework based applications\n\n\nOfficial version support:\n\n- Django >=1.11\n- Supported REST Framework versions >= 3.6.4\n- Python >= 3.6\n\nCapabilities\n------------\n\n- Gives the ability to dynamically select required fields to be serialized\n\n    - We can specify required fields to be serialized for a GET request via query params\n    - This also reduces response size comparatively as we pick only necessary fields\n    - Ability to pick required fields through all kinds of nested relationships(many2one, many2many, reverse_lookups)\n\n- Improves querying and reduces overall I/O load by a very good factor\n\n    - reduces overall number of queries required to serve a generic GET Request by a `rest_framework.viewsets.ModelViewSet`\n\n- Plug and Play\n\n    - Simple API with minimal configurations\n\n\nWhat it provides\n----------------\nThis package provides following mixins:\n\n- ``DynamicReadSerializerMixin``\n\n    - provides an API on top of ``ModelSerializer`` to provide required fields to be serialized(via kwargs)\n    - following kwargs can be passed to a model serializer inheriting this mixin\n\n            - ``filter_fields`` : list of serializer field names which should be allowed for serialization\n            - ``omit_fields`` : list of serializer field names which should not be allowed for serialization\n    - ``DynamicReadSerializerMixin.optimize_queryset`` : a utility to return a optimized queryset by performing necessary select_related and prefetch_related based on ``fields`` and ``omit``, below are the arguments to be passed\n\n            - ``filter_fields`` : list of serializer field names which should be allowed for serialization\n            - ``omit_fields`` : list of serializer field names which should not be allowed for serialization\n            - ``queryset`` : input queryset object\n\n\n- ``DynamicReadViewMixin``\n\n    - provides support on top of `rest_framework.viewsets.ModelViewSet` to pick required fields to be serialized via query params of a GET request, these required fields are internally forwarded to ``DynamicReadSerializerMixin``\n    - ``optimize_queryset`` : static boolean attribute which decides whether to perform queryset optimization steps via ``DynamicReadSerializerMixin.optimize_queryset``\n    - following query params can be passed for any GET request which is served by a model viewset inheriting this mixin:\n\n        - ``fields`` : serializer field names as comma seperated values which should be considered for serialization\n        - ``omit`` : serializer field names as comma seperated values which should not be considered for serialization\n\n\nInstalling\n----------\n\n    pip install drf-dynamic-read\n\n\nUsage\n------------\nExample Entity Relationship:\n\n.. sourcecode:: python\n\n    from django.db import models\n\n    class User(models.Model)\n        username = models.CharField()\n\n\n    class EventType(models.Model)\n        name = models.CharField()\n        created_by = models.ForeignKey(User)\n\n\n    class EventCause(models.Model)\n        name = models.CharField()\n        created_by = models.ForeignKey(User)\n\n\n    class Event(models.Model):\n        type = models.ForeignKey(EventType)\n        causes = models.ManyToManyField(EventCause)\n        owner = models.OneToOneField(User)\n\n\nExample serializers for above ER:\n\n.. sourcecode:: python\n\n    from rest_framework import serializers\n    from dynamic_read.serializers import DynamicReadSerializerMixin\n\n\n    class UserSerializer(DynamicReadSerializerMixin, serializers.ModelSerializer):\n        class Meta:\n            model = models.User\n            fields = \"__all__\"\n\n\n    class EventTypeSerializer(DynamicReadSerializerMixin, serializers.ModelSerializer):\n        created_by_id = serializers.PrimaryKeyRelatedField(\n            queryset=EventType.objects.all(), write_only=True, source=\"created_by\",\n        )\n        created_by = UserSerializer(read_only=True)\n\n        class Meta:\n            model = EventType\n            fields = \"__all__\"\n\n\n    class EventCauseSerializer(DynamicReadSerializerMixin, serializers.ModelSerializer):\n        created_by_id = serializers.PrimaryKeyRelatedField(\n            queryset=EventCause.objects.all(), write_only=True, source=\"created_by\",\n        )\n        created_by = UserSerializer(read_only=True)\n\n        class Meta:\n            model = EventCause\n            fields = \"__all__\"\n\n\n    class EventSerializer(DynamicReadSerializerMixin, serializers.ModelSerializer):\n        type_id = serializers.PrimaryKeyRelatedField(\n            queryset=EventType.objects.all(), write_only=True, source=\"type\",\n        )\n        cause_ids = serializers.PrimaryKeyRelatedField(\n            queryset=EventCause.objects.all(), write_only=True, source=\"cause\", many=True\n        )\n        type = EventTypeSerializer(read_only=True)\n        causes = EventCauseSerializer(read_only=True, many=True)\n        created_by = UserSerializer(read_only=True)\n\n        class Meta:\n            model = Event\n            fields = \"__all__\"\n\nExample views for above ER:\n\n.. sourcecode:: python\n\n    from dynamic_read.views import DynamicReadBaseViewMixin\n    from rest_framework import viewsets\n    from rest_framework.routers import DefaultRouter\n\n    class EventModelViewSet(viewsets.ModelViewSet, DynamicReadBaseViewMixin):\n        queryset = Event.objects.all()\n        serializer_class = EventSerializer\n\n\n    router = DefaultRouter()\n    router.register(\"/api/event_basic/\", EventModelViewSet)\n\n\nA regular request returns all fields:\n\n``GET /api/event_basic/``\n\nResponse:\n\n.. sourcecode:: json\n\n    [\n      {\n        \"id\": 1,\n        \"type\": {\n          \"id\": 2,\n          \"name\": \"Type2\",\n          \"created_by\": {\n            \"id\": 1,\n            \"username\": \"user1\"\n          }\n        },\n        \"cause\": [\n          {\n            \"id\": 1,\n            \"name\": \"Cause1\",\n            \"created_by\": {\n              \"id\": 1,\n              \"username\": \"user1\"\n            }\n          },\n          {\n            \"id\": 2,\n            \"name\": \"Cause2\",\n            \"created_by\": {\n              \"id\": 2,\n              \"username\": \"user2\"\n            }\n          }\n        ],\n        \"created_by\": {\n          \"id\": 2,\n          \"username\": \"user2\"\n        }\n      },\n    ]\n\n\nA `GET` request with the `fields` parameter returns only a subset of\nthe fields:\n\n``GET /api/event_basic/?fields=id,type``\n\nResponse:\n\n.. sourcecode:: json\n\n    [\n      {\n        \"id\": 1,\n        \"type\": {\n          \"id\": 2,\n          \"name\": \"Type2\",\n          \"created_by\": {\n            \"id\": 1,\n            \"username\": \"user1\"\n          }\n        }\n      },\n      {\n        \"id\": 2,\n        \"type\": {\n          \"id\": 1,\n          \"name\": \"Type1\",\n          \"created_by\": {\n            \"id\": 1,\n            \"username\": \"user1\"\n          }\n        }\n      }\n    ]\n\n`fields` parameter can spawn through the relationships also:\n\n``GET /api/event_basic/?fields=id,type__name,cause__name,created_by__username``\n\nResponse:\n\n.. sourcecode:: json\n\n    [\n      {\n        \"id\": 1,\n        \"type\": {\n          \"name\": \"Type2\"\n        },\n        \"cause\": [\n          {\n            \"name\": \"Cause1\"\n          },\n          {\n            \"name\": \"Cause2\"\n          }\n        ],\n        \"created_by\": {\n          \"username\": \"user2\"\n        }\n      },\n    ]\n\n\nA `GET` request with the `omit` parameter excludes specified fields(can also spawn through relationships just like the above example for `fields`).\n\n``GET /api/event_basic/?omit=type,cause__created_by,created_by__id``\n\nResponse:\n\n.. sourcecode:: json\n\n    [\n      {\n        \"id\": 1,\n        \"cause\": [\n          {\n            \"id\": 1,\n            \"name\": \"Cause1\",\n          },\n          {\n            \"id\": 2,\n            \"name\": \"Cause2\",\n          }\n        ],\n        \"created_by\": {\n          \"username\": \"user2\"\n        }\n      },\n    ]\n\nAll the above examples work in the same mechanism for detail routes\n\nQuery Optimization\n------------------\n\nNow first let's consider this general request which returns all the fields:\n``GET /api/event_basic/``\n\nTotal number of queries would be: 51\n\n-   1 (Base query to return all the event objects)\n-   10 x 1 (fetch type for an event)\n-   10 x 1 (fetch created_by for an each type)\n-   10 x 1 (fetch all causes for an event)\n-   10 x 1 (fetch created_by for an event cause)\n-   10 x 1 (fetch owner for an event)\n\n\nNow let's define a new view in views.py:\n\n.. sourcecode:: python\n\n    from dynamic_read.views import DynamicReadViewMixin\n    from rest_framework import viewsets\n    from rest_framework.routers import DefaultRouter\n\n    class EventModelViewSet(DynamicReadViewMixin, viewsets.ModelViewSet):\n        queryset = Event.objects.all()\n        serializer_class = EventSerializer\n\n\n    class EventOptimizedModelViewSet(DynamicReadViewMixin, viewsets.ModelViewSet)\n        optimize_queryset = True\n        queryset = Event.objects.all()\n        serializer_class = EventSerializer\n\n    router = DefaultRouter()\n    router.register(\"/api/event_basic/\", EventModelViewSet)\n    router.register(\"/api/event_enhanced/\", EventOptimizedModelViewSet)\n\nNow let's try the optimized version: ``GET /api/event_enhanced/``\n\nTotal number of queries would be: 3\n\n- ``.select_related(\"type\", \"owner__created_by\")``\n\n    - 1 (Query which gets all events inner joined with event types(inner joined with users), users)\n\n- ``.prefetch_related(\"causes__created_by\")``\n\n    - 1 (Query to get all required event causes separately)\n    - 1 (Query to get all users(created_by) for event causes)\n\n\nNow first let's consider the above example with ``fields``: ``GET /api/event_enhanced/?fields=type__name,owner__created_by``\n\nTotal number of queries would be: 1\n\n- ``.select_related(\"type\", \"owner__created_by\")``\n\n    - 1 (Query which gets all events inner joined with event types, users)\n\n\nTesting\n-------\n\nYet to write :)\n\n\nPlanned features\n----------------\n\n- API aliasing, single view serving extended url patterns, each url pattern is an alias mapped to specific fields,omit values\n- Restricting the scope of fields,omit w.r.t user defined permissions per API\n\n\nCredits\n-------\n\n- This implementation is inspired from `drf-dynamic-fields` by ``dbrgn``\n- Thanks to Rishab Jain for implementing caching in evaluation of ``select_related``, ``prefetch_related`` for a ``QuerySet`` w.r.t fields, omit\n- Thanks to Martin Garrix for his amazing music, sourcing all the necessary dopamine\n\n\nLicense\n-------\n\nMIT license, see ``LICENSE`` file.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GirishKotra/drf-dynamic-read",
    "keywords": "drf restframework rest_framework django_rest_framework serializers",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-dynamic-read",
    "package_url": "https://pypi.org/project/drf-dynamic-read/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-dynamic-read/",
    "project_urls": {
      "Homepage": "https://github.com/GirishKotra/drf-dynamic-read"
    },
    "release_url": "https://pypi.org/project/drf-dynamic-read/0.1.1/",
    "requires_dist": [
      "Django (>=1.11.16)",
      "djangorestframework (>=3.6.4)"
    ],
    "requires_python": ">=3.6",
    "summary": "A utility to improve and optimise read operations(querying and serialization of data) for Django Rest Framework based applications",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12297455,
  "releases": {
    "0.0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "797441ee1f780caf9ce3d454b2ab3e825efaab2c5c528c007a3d6620b2334d84",
          "md5": "61a2a8570ccab897472fc1f3dab7b90e",
          "sha256": "0ff0eeb2302a2d4473a650387c670216d79958a84ed45d489617c06acf136489"
        },
        "downloads": -1,
        "filename": "drf_dynamic_read-0.0.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61a2a8570ccab897472fc1f3dab7b90e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9344,
        "upload_time": "2021-10-01T09:15:30",
        "upload_time_iso_8601": "2021-10-01T09:15:30.562889Z",
        "url": "https://files.pythonhosted.org/packages/79/74/41ee1f780caf9ce3d454b2ab3e825efaab2c5c528c007a3d6620b2334d84/drf_dynamic_read-0.0.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d28ad7f470cfe23e2d7d59d0881709188d7707c53b0066042d2949aecdbb1fd",
          "md5": "82513a96d41b7f4a8f85354253ada7bd",
          "sha256": "19639876d81424b83aad6921aa775c16031f64096f03514c5ae69d431153a036"
        },
        "downloads": -1,
        "filename": "drf_dynamic_read-0.0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "82513a96d41b7f4a8f85354253ada7bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10487,
        "upload_time": "2021-10-01T09:15:32",
        "upload_time_iso_8601": "2021-10-01T09:15:32.305705Z",
        "url": "https://files.pythonhosted.org/packages/4d/28/ad7f470cfe23e2d7d59d0881709188d7707c53b0066042d2949aecdbb1fd/drf_dynamic_read-0.0.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3a21d85b43fce08b93721d04eb86c464f4337b16f4ca62c99cba6cd981fcb98",
          "md5": "ea465d82a6f8f434d07d6814b0363ac6",
          "sha256": "c19c189713bb381e64d6554970faeb1bb2f4faeccef41926f637733d910418f3"
        },
        "downloads": -1,
        "filename": "drf_dynamic_read-0.0.2a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea465d82a6f8f434d07d6814b0363ac6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9316,
        "upload_time": "2021-10-07T05:38:18",
        "upload_time_iso_8601": "2021-10-07T05:38:18.224408Z",
        "url": "https://files.pythonhosted.org/packages/d3/a2/1d85b43fce08b93721d04eb86c464f4337b16f4ca62c99cba6cd981fcb98/drf_dynamic_read-0.0.2a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93f7b820cbb818c27a281a9581736666a98476c7f63edd1a0f59a1733dea5a0b",
          "md5": "900f5e3dca0a55e36ab4a689ec1c882b",
          "sha256": "a56d8af5898e0913dec569bb08377eca7fb13ab19fb959c49df5117d6cf3a3f0"
        },
        "downloads": -1,
        "filename": "drf_dynamic_read-0.0.2a0.tar.gz",
        "has_sig": false,
        "md5_digest": "900f5e3dca0a55e36ab4a689ec1c882b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10451,
        "upload_time": "2021-10-07T05:38:19",
        "upload_time_iso_8601": "2021-10-07T05:38:19.881430Z",
        "url": "https://files.pythonhosted.org/packages/93/f7/b820cbb818c27a281a9581736666a98476c7f63edd1a0f59a1733dea5a0b/drf_dynamic_read-0.0.2a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "750d9559387e836ae1e4396e52b7237ed4933b9d1df464ea22f7778ac8d7f3a7",
          "md5": "72221edc6d44f27988453ec799c8fe7c",
          "sha256": "8bce2cdddc6c6cb964cc156ec02cafb87a2d225e05200227ace497d13331adca"
        },
        "downloads": -1,
        "filename": "drf_dynamic_read-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72221edc6d44f27988453ec799c8fe7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9259,
        "upload_time": "2021-12-14T07:03:49",
        "upload_time_iso_8601": "2021-12-14T07:03:49.282868Z",
        "url": "https://files.pythonhosted.org/packages/75/0d/9559387e836ae1e4396e52b7237ed4933b9d1df464ea22f7778ac8d7f3a7/drf_dynamic_read-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddc45a673f094f90a65278ef7f3978ae0ed58c8cfbe3de968694eef3b2bd6b38",
          "md5": "2751ce00939ecc609f9563ca2d917957",
          "sha256": "59b647c25aff4d2decc9c1e603777f4f7052e1d460d3895180ffc573975fc896"
        },
        "downloads": -1,
        "filename": "drf_dynamic_read-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2751ce00939ecc609f9563ca2d917957",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10539,
        "upload_time": "2021-12-14T07:03:51",
        "upload_time_iso_8601": "2021-12-14T07:03:51.383660Z",
        "url": "https://files.pythonhosted.org/packages/dd/c4/5a673f094f90a65278ef7f3978ae0ed58c8cfbe3de968694eef3b2bd6b38/drf_dynamic_read-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "750d9559387e836ae1e4396e52b7237ed4933b9d1df464ea22f7778ac8d7f3a7",
        "md5": "72221edc6d44f27988453ec799c8fe7c",
        "sha256": "8bce2cdddc6c6cb964cc156ec02cafb87a2d225e05200227ace497d13331adca"
      },
      "downloads": -1,
      "filename": "drf_dynamic_read-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72221edc6d44f27988453ec799c8fe7c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9259,
      "upload_time": "2021-12-14T07:03:49",
      "upload_time_iso_8601": "2021-12-14T07:03:49.282868Z",
      "url": "https://files.pythonhosted.org/packages/75/0d/9559387e836ae1e4396e52b7237ed4933b9d1df464ea22f7778ac8d7f3a7/drf_dynamic_read-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddc45a673f094f90a65278ef7f3978ae0ed58c8cfbe3de968694eef3b2bd6b38",
        "md5": "2751ce00939ecc609f9563ca2d917957",
        "sha256": "59b647c25aff4d2decc9c1e603777f4f7052e1d460d3895180ffc573975fc896"
      },
      "downloads": -1,
      "filename": "drf_dynamic_read-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2751ce00939ecc609f9563ca2d917957",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10539,
      "upload_time": "2021-12-14T07:03:51",
      "upload_time_iso_8601": "2021-12-14T07:03:51.383660Z",
      "url": "https://files.pythonhosted.org/packages/dd/c4/5a673f094f90a65278ef7f3978ae0ed58c8cfbe3de968694eef3b2bd6b38/drf_dynamic_read-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}