{
  "info": {
    "author": "",
    "author_email": "Enes Safak <safakenes@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pygameChart\n\n## Introduction\n\nWelcome to pygameChart! This package provides a simple and flexible way to create charts and plots within a pygame application. With pygameChart, you can easily visualize data and display in your applications in an appealing way. Its structure to define figure parameters and charts is similar to matplotlib for ease of use.\n- Support for line plots, bar charts, and scatter plots (more on the way)\n- Customization options for chart appearanve and behavior\n- Easy integration within pygame event loop, therefore ability to change content during the game and/or app\nI hope pygameChart will be useful addition to your pyhame projects. Continue reading for installation and use of the package\n\n## Installation\n\nPlease consider project page on Github, https://github.com/enessafak/pygameChart.\nThe module requires python>=3.9.10 and pygame>=2.1.2\n\n## Quickstart\n\npygameChart provides a simple use (similar to matplotlib) to create figure, set properties (like title, label names, chart limits etc.) and add several charts. In this phase it supports line plot, scatter plot and bar charts. Also in this phase, it accepts x and y axis data as two separate lists. I will add support for accepting different datatypes like dictionary numpy arrays or pandas series and dataframes.\n\nBasic use of the package creates following result.\n\n### Basic figure with line chart\n\n```python\nimport pygame, sys\nimport pygame_chart as pyc\n\n# pygame app for figure to run\npygame.init()\nscreen = pygame.display.set_mode((800,600))\n\n# Figure instance on screen with position and size\nfigure = pyc.Figure(screen, 50, 50, 700, 500)\n\nwhile True:\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # add a line chart. First argument \"name\" should be unique for every chart\n    figure.line('Chart1', [1,2,3,4,6,20,24],[3,5,7,2,7,9,1])\n    # draw figure with specified properties\n    figure.draw()    \n    pygame.display.update()\n```\n<img src=\"https://user-images.githubusercontent.com/57540559/210799934-c8a39935-b797-4947-8579-8c84ce25d882.jpeg\" alt=\"Basic figure with line chart\" height=500>\n\n\n\n### Figure with several charts and properties\n\n```python\nimport pygame, sys\nimport pygame_chart as pyc\n\n# pygame app for figure to run\npygame.init()\nscreen = pygame.display.set_mode((800,600))\n\n# Figure instance on screen with position and size\nfigure = pyc.Figure(screen, 50, 50, 700, 500)\n\nwhile True:\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n    # Add chart title with a title\n    figure.add_title('pygameChart Example')\n    # Add legend and gridlimes\n    figure.add_legend()\n    figure.add_gridlines()\n    # add a line chart. First argument \"name\" should be unique for every chart\n    figure.line('LineChart', [1,2,3,4,6,20,24],[3,5,7,2,7,9,1])\n    figure.bar('BarChart', [1,2,3,4,10,18,24],[4,3,9,2,7,12,5])\n    figure.scatter('ScatterChart', [-4,3,6,8,12,16,20],[2,4,12,5,6,3,8])\n    # draw figure with specified properties\n    figure.draw()    \n    pygame.display.update()\n```\n\n<img src=\"https://user-images.githubusercontent.com/57540559/210801090-0e6781e8-12ab-4dcb-940d-5c14a862f3ac.jpeg\" alt=\"Figure with properties\" height=500>\n\n\n## Documentation\n\nThis documentation provides classes in pygameChart with relative methods and attributes. Default values for initiations are given as global variables and can be modified in settings.py.\nOnly class the end user should use is Figure class. For the rest, only relevant method or attributes will be mentioned.\n\n### Figure class\n\n```python\npygameChart.Figure(screen, x, y, width, height, bg_color=BG_COLOR)\n```\n\n#### Parameters\n| Parameter | Type              | Explanation                           |\n| --------- | ----------------- | -------------------------------       |\n| screen    | pygame.display    | Main display for figure to be drawn   |\n| x         | number            | Position of figure at x axis          |\n| y         | number            | Position of figure at y axis          |\n| width     | number            | Width of the figure                   |\n| height    | number            | Height of the figure                  |\n|bg_color   | RGB tuple (r,g,b) | Background color of the figure        |\n\n#### Methods\n\n- set_xlim(xlim) : Sets xmin and xmax for all charts. Drawings out of these limits are unvisible\n    - *xlim : tuple* : (xmin, xmax)\n- set_ylim(ylim) : Sets ymin and ymax for all charts. Drawings out of these limits are unvisible \\\n    - *ylim : tuple* : (ymin, ymax)\n- add_title(title) : Adds chart title to the top of the figure\n    - *title : string* : chart title\n- add_legend() : Adds legend to the bottom of the figure \n- add_yaxis_label(label) : Adds label for y-axis \n    - *label : string* : y-axis label\n- add_xaxis_label(label) : Adds label for x-axis \n    - *label : string* : x-axis label\n- add_gridlines() : Adds gridlines to the figure\n- line(name, xdata, ydata, color=None, line_width=2) : Adds line chart to the figure\n    - *name : string* : Name of the chart. Name of each chart should be unique to be drawn.\n                        Otherwise, former chart data is updated with the latter\n    - *xdata : list* : x-axis data. List must be all numbers or all strings\n    - *ydata : list* : y-axis data. List must be all numbers\n    - *color : tuple* : RGB tuple (r,g,b). Default value chooses the next unused \n                        color from settings.py\n    - *line_width : int* : Width of the line\n- bar(name, xdata, ydata, color=None, bar_width=None) : Adds bar chart to the figure\n    - *name : string* : Name of the chart. Name of each chart should be unique to be drawn.\n                        Otherwise, former chart data is updated with the latter\n    - *xdata : list* : x-axis data. List must be all numbers or all strings\n    - *ydata : list* : y-axis data. List must be all numbers\n    - *color : tuple* : RGB tuple (r,g,b). Default value chooses the next unused \n                        color from settings.py\n    - *bar_width : int* : Width of the bar. If none, bar width is calculated according to \n                        figure size and x data range\n- scatter(name, xdata, ydata, color=None, radius=3): Adds scatter chart to the figure\n    - *name : string* : Name of the chart. Name of each chart should be unique to be drawn.\n                        Otherwise, former chart data is updated with the latter\n    - *xdata : list* : x-axis data. List must be all numbers or all strings\n    - *ydata : list* : y-axis data. List must be all numbers\n    - *color : tuple* : RGB tuple (r,g,b). Default value chooses the next unused \n                        color from settings.py\n    - *radius : int* : Radius of the circle\n- draw() : Draws the figure with set properties and charts. Final method to draw and show the figure on screen\n\n### Area class\n\nBase object for figure areas: title, legend, x-y axis labels, x-y axis ticks and chart area\n```python\npygameChart.Area(figure)\n```\n#### Attributes\n| Attribute | Type                  | Explanation                                   |\n| --------- | -----------------     | -------------------------------               |\n| figure    | pygame.Chart.Figure   | Main Figure object                            |\n| x         | number                | Position of area at x axis (rel. to figure)   |\n| y         | number                | Position of area at y axis (rel. to figure)   |\n| width     | number                | Width of the area                             |\n| height    | number                | Height of the area                            |\n| innerx    | number                | Inner x position for padding                  |\n| innery    | number                | Inner x position for padding                  |\n| innerwidth    | number            | Inner width for padding                       |\n| innerheight   | number            | Inner height for padding                      |\n| show      | boolean               | draw condition for the area                   |\n\n#### Methods\n- draw_area() : Draws the area on figure background, with figure.bg_color fill\n- draw_area_border(): Draws the area on figure background, with border, without fill\n\n### Title(Area) Class\n\nClass for adding and writing chart title\n\n### Legend(Area) Class\n\nClass for calculating legend position, content and writing\n\n### yAxisLabel(Area) Class\n\nClass for adding and writing y-axis label\n\n### xAxisLabel(Area) Class\n\nClass for adding and writing x-axis label\n\n### yAxisTick(Area) Class\n\nClass for calculating x-tick position, content and writing\n\n#### Attributes\n| Attribute | Type      | Explanation                                   |\n| --------- | --------  | -------------------------------               |\n| ymin      | number    | Min value for y-ticks. Might be different than chart data. Overwritten by Figure.ylim|\n| ymax      | number    | Min value for y-ticks. Might be different than chart data. Overwritten by Figure.ylim|\n\n### xAxisTick(Area) Class\n\nClass for calculating y-tick position, content and writing\n\n#### Attributes\n| Attribute | Type      | Explanation                                   |\n| --------- | --------  | -------------------------------               |\n| xmin      | number    | Min value for xx-ticks. Might be different than chart data. Overwritten by Figure.xlim|\n| xmax      | number    | Min value for x-ticks. Might be different than chart data. Overwritten by Figure.xlim|\n\n### ChartArea(Area) Class\n\nClass for calculating chart positioning and drawing\n\n#### Attributes\n| Attribute     | Type      | Explanation                                   |\n| ---------     | --------  | -------------------------------               |\n| charts        | list      | List of chart objects added to the figure     |\n| chart_names   | list      | List of chart names added to the figure       |\n| chart_margin  | int       | Padding for left and right border             |\n| xdata_type    | str       | Indicates the type of xdata (number or string). If figure.xlim is set, it becomes number. Otherwise, it is determined by the first chart to be added. Charts with other type of xdata cannot be added later |\n| gridlines     | boolean   | If gridlines will be added to the figure      |\n\n### ChartType Class\n\nBase class for all chart types\n\n### LineChart(ChartType) Class\n\nClass for keeping properties of line chart. Drawing is done within Figure.ChartArea\n\n#### Parameters\n| Parameter     | Type              | Explanation                                           |\n| ---------     | ----------------- | -------------------------------                       |\n| name          | string            | Name of the chart                                     |\n| xdata         | list              | x-axis data. List must be all numbers or all strings  |\n| ydata         | list              | y-axis data. List must be all numbers                 |\n| color         | tuple             | RGB tuple (r,g,b). Default value chooses the next unused color from settings.py |\n| line_width    | int               | Width of the line                                     |\n\n### BarChart(ChartType) Class\n\nClass for keeping properties of bar chart. Drawing is done within Figure.ChartArea\n\n#### Parameters\n| Parameter     | Type              | Explanation                                           |\n| ---------     | ----------------- | -------------------------------                       |\n| name          | string            | Name of the chart                                     |\n| xdata         | list              | x-axis data. List must be all numbers or all strings  |\n| ydata         | list              | y-axis data. List must be all numbers                 |\n| color         | tuple             | RGB tuple (r,g,b). Default value chooses the next unused color from settings.py |\n| bar_width     | int               | Width of the bar. If none, bar width is calculated according to figure size and x data range |\n\n### ScatterChart(ChartType) Class\n\nClass for keeping properties of scatter chart. Drawing is done within Figure.ChartArea\n\n#### Parameters\n| Parameter     | Type              | Explanation                                           |\n| ---------     | ----------------- | -------------------------------                       |\n| name          | string            | Name of the chart                                     |\n| xdata         | list              | x-axis data. List must be all numbers or all strings  |\n| ydata         | list              | y-axis data. List must be all numbers                 |\n| color         | tuple             | RGB tuple (r,g,b). Default value chooses the next unused color from settings.py |\n| radius        | int               | Radius of the circle |\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2023 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygame-chart",
    "package_url": "https://pypi.org/project/pygame-chart/",
    "platform": null,
    "project_url": "https://pypi.org/project/pygame-chart/",
    "project_urls": {
      "Homepage": "https://github.com/enessafak/pygame-chart"
    },
    "release_url": "https://pypi.org/project/pygame-chart/1.0.0/",
    "requires_dist": [
      "pygame (>=2.1.2)"
    ],
    "requires_python": ">=3.9.10",
    "summary": "A package for drawing charts in pygame apps",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16358430,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7dfbf27d1c24322e4c1744e56bca7064ac44aae34cd16b976029a5a2da9091f",
          "md5": "c8ef9aaa675478a27920c29ac9a4c63f",
          "sha256": "24feef89f7eb820288d3c9c81b1c8359a829a9ed1f6be0711a96cf4be065d1bb"
        },
        "downloads": -1,
        "filename": "pygame_chart-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8ef9aaa675478a27920c29ac9a4c63f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9.10",
        "size": 14102,
        "upload_time": "2023-01-09T10:46:21",
        "upload_time_iso_8601": "2023-01-09T10:46:21.557208Z",
        "url": "https://files.pythonhosted.org/packages/e7/df/bf27d1c24322e4c1744e56bca7064ac44aae34cd16b976029a5a2da9091f/pygame_chart-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d194006a4e6e3a6a1005ca0048a777485b88547fbba0d5292a3abaf548db9c33",
          "md5": "4b29f17531de4c6e0c21cb8a8878d5c6",
          "sha256": "714db86556ced592cdfc2b5c5255faf5c1c8c6a761bbd785d5428cdfd94d392b"
        },
        "downloads": -1,
        "filename": "pygame_chart-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b29f17531de4c6e0c21cb8a8878d5c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.10",
        "size": 16517,
        "upload_time": "2023-01-09T10:46:23",
        "upload_time_iso_8601": "2023-01-09T10:46:23.379460Z",
        "url": "https://files.pythonhosted.org/packages/d1/94/006a4e6e3a6a1005ca0048a777485b88547fbba0d5292a3abaf548db9c33/pygame_chart-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7dfbf27d1c24322e4c1744e56bca7064ac44aae34cd16b976029a5a2da9091f",
        "md5": "c8ef9aaa675478a27920c29ac9a4c63f",
        "sha256": "24feef89f7eb820288d3c9c81b1c8359a829a9ed1f6be0711a96cf4be065d1bb"
      },
      "downloads": -1,
      "filename": "pygame_chart-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8ef9aaa675478a27920c29ac9a4c63f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9.10",
      "size": 14102,
      "upload_time": "2023-01-09T10:46:21",
      "upload_time_iso_8601": "2023-01-09T10:46:21.557208Z",
      "url": "https://files.pythonhosted.org/packages/e7/df/bf27d1c24322e4c1744e56bca7064ac44aae34cd16b976029a5a2da9091f/pygame_chart-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d194006a4e6e3a6a1005ca0048a777485b88547fbba0d5292a3abaf548db9c33",
        "md5": "4b29f17531de4c6e0c21cb8a8878d5c6",
        "sha256": "714db86556ced592cdfc2b5c5255faf5c1c8c6a761bbd785d5428cdfd94d392b"
      },
      "downloads": -1,
      "filename": "pygame_chart-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4b29f17531de4c6e0c21cb8a8878d5c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.10",
      "size": 16517,
      "upload_time": "2023-01-09T10:46:23",
      "upload_time_iso_8601": "2023-01-09T10:46:23.379460Z",
      "url": "https://files.pythonhosted.org/packages/d1/94/006a4e6e3a6a1005ca0048a777485b88547fbba0d5292a3abaf548db9c33/pygame_chart-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}