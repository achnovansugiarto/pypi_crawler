{
  "info": {
    "author": null,
    "author_email": "Emir Karamehmetoglu <emirkmo@github.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)"
    ],
    "description": "# Island graph solutions (grid graphs) with python\n\nConnected grids can be thought of as **grid graphs**, where each grid point is a **node**\neither positive (island) or negative (void/water), although the categories can be\nreadily inverted so in practice only one of the above is defined as the positive node. \nConnections between each grid point (node) is then an **edge**. For a given valid\nconnection type (say up down left right, or including diagonals) each positive \nnode gets defined between 0 and maximum direction number of edges.\n\nCommon problems are:\n - count the number of islands\n - find the size of largest, smallest, average, median, mode island.\n - Use **depth-first** or **breadth-first** traversal. \n\nThe code is fully typed and makes use of composition with Protocol classes so that valid \ndirections, traversal strategies, and even 2D graph types can be readily exchanged with \nminimal refactoring.\n\nRequires Python > 3.10.   \nOnly dependency is a new version of `numpy` for convenience (and typing support),\nalthough the operations are mostly in base python data structures like `list` and `set`.\n\n# To run\n\nClone and run: `python -m main.py`\n\n# Some details and possible expansion\n\nGrid graphs in this code can all be considered undirected but are **not** acyclical,\ntherefore visited nodes are marked to avoid infinite recursion. In practice, directed 2D grid\ngraphs are also possible to make. In that case, the neighbors should be pre-calculated as a\npython dict of `{node: [list of connected nodes]}` using the provided `get_neighbors` function,\nwhich can be done by specifying per node valid Directions, instead of a global valid_directions per graphs.\n\nThe two exploration algorithms, Depth-first and Breadth-first, also known as BFS and DFS, will always \ngive the same end-result but with different algorithmic time and space complexity, \nand are good for different usecases. For the island questions answered here, depth first is\nideal but breadth first is also provided. However, for example, depth-first can be particularly poor for \nchecking if a connection exists between given node and destination node,\nespecially if the graph tree is big and the destination is relatively close \n(yet by chance we go off in another direction). So while their worst case senarios are equal,\nthe average for breadth-first will be much better for has path problems. In comparison, \nusing the call-stack depth-first traversal algorithms can be very fast, although this code is in\npure python so both could have been further optimized using lower-level (or other) languages. \n\n### Depth-first traversal\n\nUsing recursion and a first in first out (stack) data structure, each connected node is explored \ngoing as far as possible in one direction first. \n\n\n### Breadth-first traversal\n\nUsing iteration and a first in last out (queue) data structure, each connected node is explored\ngoing to its nearest neighbors first, then the nearest neighbors of the nearest neighbors, and so on.\n\n\n\nWe make use of list comprehension, dataclasses, enums, protocols, and structural typing so the code may\nbe unfamiliar to some. Finally, the breadh-first algorithm, and the neighbor-tree generation algorithm can\nbe made faster by pre-computing the neighbors and having the algorithm explore the pre-computed neighbors\n(edges) instead of the current version. The code for doing this is provided but unused in `grid_graph.py`\nto lower coupling (as neighbors cannot be calculated without knowing valid directions, which your graph\nideally is independent of).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "gridgraphs",
    "package_url": "https://pypi.org/project/gridgraphs/",
    "platform": null,
    "project_url": "https://pypi.org/project/gridgraphs/",
    "project_urls": {
      "Home": "https://github.com/emirkmo/Grid-graphs-with-python"
    },
    "release_url": "https://pypi.org/project/gridgraphs/0.1.0/",
    "requires_dist": [
      "numpy>=1.20"
    ],
    "requires_python": ">=3.10",
    "summary": "Grid graphs and island solutions in 2D and 3D, object-oriented and pure python/numpy.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15962804,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0a554f4e970c4ccb8cd1d514efbeedd144e0683864fd3c11e5dca34ed10f1602",
          "md5": "aabae08b0ce82fcb6f3a08b9c1202e6b",
          "sha256": "d475cb1ff7c1a7788fda038a1c64257c1c78d7ef5d0435b9597d2f9769f85fa6"
        },
        "downloads": -1,
        "filename": "gridgraphs-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aabae08b0ce82fcb6f3a08b9c1202e6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 7781,
        "upload_time": "2022-12-01T23:59:43",
        "upload_time_iso_8601": "2022-12-01T23:59:43.614627Z",
        "url": "https://files.pythonhosted.org/packages/0a/55/4f4e970c4ccb8cd1d514efbeedd144e0683864fd3c11e5dca34ed10f1602/gridgraphs-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e5cb3b786c36c3a27faa7d7845e576c46c3ba1e42d68f96a5e19ab796cb61fb5",
          "md5": "bed5bc467d11c87705e11a1725b6c625",
          "sha256": "bd66d26b05d82334c7340fbe7336217f442c66ef8c186dc9173b63206211e747"
        },
        "downloads": -1,
        "filename": "gridgraphs-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bed5bc467d11c87705e11a1725b6c625",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 6037,
        "upload_time": "2022-12-01T23:59:45",
        "upload_time_iso_8601": "2022-12-01T23:59:45.931832Z",
        "url": "https://files.pythonhosted.org/packages/e5/cb/3b786c36c3a27faa7d7845e576c46c3ba1e42d68f96a5e19ab796cb61fb5/gridgraphs-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "0a554f4e970c4ccb8cd1d514efbeedd144e0683864fd3c11e5dca34ed10f1602",
        "md5": "aabae08b0ce82fcb6f3a08b9c1202e6b",
        "sha256": "d475cb1ff7c1a7788fda038a1c64257c1c78d7ef5d0435b9597d2f9769f85fa6"
      },
      "downloads": -1,
      "filename": "gridgraphs-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aabae08b0ce82fcb6f3a08b9c1202e6b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 7781,
      "upload_time": "2022-12-01T23:59:43",
      "upload_time_iso_8601": "2022-12-01T23:59:43.614627Z",
      "url": "https://files.pythonhosted.org/packages/0a/55/4f4e970c4ccb8cd1d514efbeedd144e0683864fd3c11e5dca34ed10f1602/gridgraphs-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "e5cb3b786c36c3a27faa7d7845e576c46c3ba1e42d68f96a5e19ab796cb61fb5",
        "md5": "bed5bc467d11c87705e11a1725b6c625",
        "sha256": "bd66d26b05d82334c7340fbe7336217f442c66ef8c186dc9173b63206211e747"
      },
      "downloads": -1,
      "filename": "gridgraphs-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bed5bc467d11c87705e11a1725b6c625",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 6037,
      "upload_time": "2022-12-01T23:59:45",
      "upload_time_iso_8601": "2022-12-01T23:59:45.931832Z",
      "url": "https://files.pythonhosted.org/packages/e5/cb/3b786c36c3a27faa7d7845e576c46c3ba1e42d68f96a5e19ab796cb61fb5/gridgraphs-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}