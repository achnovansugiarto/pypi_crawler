{
  "info": {
    "author": "Eric Bezzam",
    "author_email": "ebezzam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# waveprop: Diffraction-based wave propagation simulator with PyTorch support\n\nPython simulator for optical wave propagation based on scalar diffraction theory. Multiple propagation models are \nsupported, with the desired propagation distance / complexity determining which one may be best. PyTorch support enables GPU acceleration\nand end-to-end training of arbitrary apertures.\n\n![lcav](/data/lcav.gif)\n\n## Features\n\n- Multiple scalar diffraction models: Fraunhofer, Fresnel, angular spectrum method, direct integration.\n- Polychromatic through CIE color matching functions.\n- Off-axis propagation and rescaling.\n- PyTorch support (for GPU acceleration and end-to-end training).\n- Arbitrary amplitude or phase masks.\n- Spatial light modulator (SLM) simulator which incorporates deadspace and color filter.\n\n## Installation\n\n```sh\npip install waveprop\n```\n\nTo develop locally and/or play with examples, we recommend the following steps:\n```sh\n# create virtual environment\nconda create -n waveprop python=3.9\nconda activate waveprop\n\n# install\npip install -e .\n\n# for CUDA, check docs for appropriate command: https://pytorch.org/\nconda install pytorch torchvision cudatoolkit=11.3 -c pytorch\n\n# for some examples (e.g. holography.py)\npip install joblib imageio click\n\n# run tests\npytest tests/\n```\n\n# New release and upload to PyPi\n\nFrom master branch of original repo, and using the appropriate value for `X.X.X`:\n\n```\n# Create tag and upload\ngit tag -a vX.X.X -m \"Description.\"\ngit push origin vX.X.X\n\n# Change version number in setup.py\npython setup.py sdist\n\n# Create package and upload to Pypi\ntwine upload dist/waveprop-X.X.X.tar.gz   \n```\n\nYou will need a username and password for uploading to PyPi.\n\nFinally, [on GitHub](https://github.com/ebezzam/waveprop/tags) set the new tag as the latest release by pressing the three dots to the right and selecting \"Edit release, at top right selecting \"Edit tag\", and then publishing it!\n\n## Examples\n\nIn the [`examples`] folder are various scripts demonstrating the features of `waveprop`. It is recommended to run them from the repository root, as shown below.\n\n#### Comparing propagation models\n\n#### Polychromatic simulation\n\n#### Off-axis and rescaling\n\n#### PyTorch support\n\n#### Spatial light modulator\n\n#### Holography\n\nThe above GIF showing the propagation of a holography pattern was generated with the following command:\n\n```\npython examples/holography.py --target data/lcav.png --invert\n```\n\nThe file path can be set to any local path, however the target will be reshaped to a square.\n\nIf only interested in the holography pattern at a single distance, e.g. the focal plane, the following command can be run, which will produce a GIF with a single image\n\n```\npython examples/holography.py --target data/lcav.png --invert --f_lens 0.5 --z_start 0.5 --nz 1\n```\n\n\nScripts and functions to simulate free-space optical propagation. \n\nIn the `examples` folder:\n- `holography.py`: determing phase pattern for holography and propagating over distances with angular spectrum method.\n- `adafruit_slm.py`: polychromatric simulation of amplitude SLM with or without deadspace.\n- `adafruit_slm_mono_pytorch.py`: monochromatric simulation of amplitude SLM with PyTorch support.\n- `square_ap_video.py`: to compare various propagation approaches while varying the distance.\n- `square_ap_poly_video.py`: polychromatic simulation of square aperture while varying the distance.\n- `circ_ap_fraunhofer.py`: simulate circular aperture in the Fraunhofer regime.\n- `square_ap_fresnel.py`: simulate square aperture in the Fresnel regime.\n- `bandlimiting_angular_spectrum.py`: show benefit of band-limiting angular spectrum method.\n- `off_axis.py`: comparing off-axis simulation with Fresnel, angular spectrum, and direct integration.\n- `rescale.py`: comparing off-axis, rescaled simulation with Fresnel and angular spectrum.\n- `circ_ap_lab.py`: simulate circular aperture with command-line defined arguments. Default is our lab setup.\n- `rect_ap_lab.py`: simulate rectangular aperture with command-line defined arguments. Default is our lab setup.\n- `single_slit_lab.py` (WIP): simulate single-slit with command-line defined arguments. Default is our lab setup.\n\nNB: `click` is required for some scripts for parsing command-line arguments.\n\nFollowing propagation models are implemented. All make use of FFT unless otherwise noted.\n- Fraunhofer.\n- Fresnel (one-step, two-step, multi-step, angular spectrum).\n- Angular spectrum, with evanescent waves and option to bandlimit.\n- Direct integration (no FFT), \"brute force\" numerical integration.\n- FFT-DI, linearizes circular convolution of direction integration in DFT domain.\n- Shifted Fresnel, uses three-FFT to model propagation off of optical axis with arbitrary input and\noutput sampling.\n  \nNote that dimensions `y` corresponds to the first dimension (rows) while `x`\ncorresponds to the second dimension (columns).\n\n## Literature and references\n\nFraunhofer and Fresnel numerical approaches come from the textbook [\"Numerical Simulation of Optical \nWave Propagation with Examples in MATLAB\" (2010)](https://www.spiedigitallibrary.org/ebooks/PM/Numerical-Simulation-of-Optical-Wave-Propagation-with-Examples-in-MATLAB/eISBN-9780819483270/10.1117/3.866274?SSO=1).\nIt is a very nicely-written book with code examples that are easy to follow. \n\nA more rigorous treatment and derivation of Fraunhofer and Fresnel approximations analytic \nexpressions, and conditions can be found in the following textbooks (we reference the following\nversions in the docstrings):\n- \"Introduction to Fourier Optics\" by Goodman (Second Edition).\n- \"Fundamentals of Photonics\" by Saleh and Teich (Third Edition).\n- \"Principles of Optics\" by Born and Wolf (Seventh Edition).\n\nA description of the Direct Integration (DI) method and its FFT version can be found in \n[\"Fast-Fourier-transform based numerical integration method for the Rayleigh–Sommerfeld diffraction \nformula\" (2006)](https://www.osapublishing.org/ao/fulltext.cfm?uri=ao-45-6-1102&id=87971). This \nserves as a good baseline as it is an approximation of the Rayleigh-Sommerfeld diffraction integral \nvia a Riemann sum (Eq 9). Main drawbacks are computational load, as DI directly performs the \ndiscrete convolution and FFT-DI requires three FFTs. Moreover, FFT-DI is only practical for small\noutput windows.\n\nThe angular spectrum (AS) approach is another well-known formulation that is directly derived from \nthe Rayleigh-Sommerfeld equation. However, it tends to have issues outside of the scenarios of\nsmall apertures and in the near-field. [\"Band-Limited Angular Spectrum Method for\nNumerical Simulation of Free-Space Propagation in Far and Near Fields\"](https://www.osapublishing.org/oe/fulltext.cfm?uri=oe-17-22-19662&id=186848)\noffers a solution to this problem by limiting the bandwidth of the propagation field. An \nimplementation of this approach has been largely replicated from [the code](https://github.com/computational-imaging/neural-holography/blob/d2e399014aa80844edffd98bca34d2df80a69c84/propagation_ASM.py#L22)\nof [\"Neural holography with camera-in-the-loop training\"](https://dl.acm.org/doi/abs/10.1145/3414685.3417802). \nTheir index-to-frequency mapping and FFT shifting seemed to be off, and they did not include evanescent waves; both of which were modified for the implementation found here.\n\nShifted Fresnel allows for the simulation off of the optical-axis and for arbitrary input and output\nsampling. A description of this approach can be found in [\"Shifted Fresnel diffraction for \ncomputational holography\"](https://www.osapublishing.org/oe/fulltext.cfm?uri=oe-15-9-5631&id=132698).\n\n## TODO\n\nPropagation models:\n- Interpolation of angular spectrum with FS coefficients (ours).\n- Rectangular tiling, Section 4 of \"Shifted Fresnel diffraction for computational holography\".\n- Circ aperture and single slit exp from \"Fast-Fourier-transform based numerical integration\nmethod for the Rayleigh–Sommerfeld diffraction formula\"\n\nExamples:\n- For single slit, something terribly wrong. Compare with following results:\n    - https://core.ac.uk/download/pdf/233057112.pdf\n    - https://www.osapublishing.org/josa/fulltext.cfm?uri=josa-59-3-293&id=53644\n    - https://www.osapublishing.org/josa/fulltext.cfm?uri=josa-59-3-293&id=53644\n- Double slit\n\nAnalytic forms of (see Born book):\n- Fresnel circular aperture\n- Fresnel rectangular aperture\n- Circular aperture from \"Fast-Fourier-transform based numerical integration\nmethod for the Rayleigh–Sommerfeld diffraction formula\", Eq 36\n\nCompare / mention complexity of different approaches\n\n## Other libraries\n\n- Diffractio: https://diffractio.readthedocs.io/en/latest/readme.html\n    - Cite \"Applied Optics\" vol 45 num 6 pp. 1102-1110 (2006) for Rayleigh Sommerfeld propagation.\n- LightPipes: https://opticspy.github.io/lightpipes/manual.html#free-space-propagation\n- AOtools: https://aotools.readthedocs.io/en/v1.0.1/opticalpropagation.html\n    - Ported scripts from \"Numerical Simulation of Optical Wave Propagation with Examples in MATLAB\".\n- PyOptica: https://gitlab.com/pyoptica/pyoptica\n    - Free-space propagation: https://gitlab.com/pyoptica/pyoptica/-/blob/master/pyoptica/optical_elements/free_space.py\n    - Gerschberg-Saxton: https://gitlab.com/pyoptica/pyoptica/-/blob/master/notebooks/gerchberg_saxton.ipynb\n- DeepOptics: https://github.com/vsitzmann/deepoptics\n    - Differentiable free-space propagation: https://github.com/vsitzmann/deepoptics/blob/defbb975309a6a3f3d2a86b92e82d02156ab213e/src/layers/optics.py#L386\n- Angular Spectum: https://github.com/rafael-fuente/Diffraction-Simulations--Angular-Spectrum-Method\n    - Monochromatic: https://github.com/rafael-fuente/Diffraction-Simulations--Angular-Spectrum-Method/blob/5b3610643b97ab6b81c80ef4c8aa5b0d9501f314/diffractsim/monochromatic_simulator.py#L191\n    - Polychromatic: https://github.com/rafael-fuente/Diffraction-Simulations--Angular-Spectrum-Method/blob/5b3610643b97ab6b81c80ef4c8aa5b0d9501f314/diffractsim/polychromatic_simulator.py#L190\n  \n\n## License\n\nMIT\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ebezzam/waveprop",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "waveprop",
    "package_url": "https://pypi.org/project/waveprop/",
    "platform": null,
    "project_url": "https://pypi.org/project/waveprop/",
    "project_urls": {
      "Homepage": "https://github.com/ebezzam/waveprop"
    },
    "release_url": "https://pypi.org/project/waveprop/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Functions and scripts to simulate free-space optical wave propagation.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16332849,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe95204f8f5555c103b2f94f29dcddc5fff33f3c4733167fa5b8615e713f62f4",
          "md5": "31eabb45354f58854281b259f4d4361b",
          "sha256": "155e0fbe688a3f39b269170fdcc5267cac1402c2ad76c6e06e6b767fee2854ba"
        },
        "downloads": -1,
        "filename": "waveprop-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "31eabb45354f58854281b259f4d4361b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33940,
        "upload_time": "2022-08-29T10:49:23",
        "upload_time_iso_8601": "2022-08-29T10:49:23.439233Z",
        "url": "https://files.pythonhosted.org/packages/fe/95/204f8f5555c103b2f94f29dcddc5fff33f3c4733167fa5b8615e713f62f4/waveprop-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e64315bd5729830066c313483e12f2209261c6c6d701e96b7d7e74cf9fbbd624",
          "md5": "594c153ca2a373d8f211785ac183cec8",
          "sha256": "d1ca2c33ba6fbf2fa26ee4e42ed0c8ab23d3830819e8b1e43d5ebe3ca2d19f41"
        },
        "downloads": -1,
        "filename": "waveprop-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "594c153ca2a373d8f211785ac183cec8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 42225,
        "upload_time": "2022-09-07T22:21:09",
        "upload_time_iso_8601": "2022-09-07T22:21:09.592918Z",
        "url": "https://files.pythonhosted.org/packages/e6/43/15bd5729830066c313483e12f2209261c6c6d701e96b7d7e74cf9fbbd624/waveprop-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08dd688c21969aa45c67dbdc7e9a73cf9480ba2a46196bc1a276140c3831171e",
          "md5": "35c621fccf83cfdfd8bdcda3bd8bb2b9",
          "sha256": "d5ad866f78a02ed6222aad79a2dfd5ca39d6d99c1d6b0105743b0cac881d6b68"
        },
        "downloads": -1,
        "filename": "waveprop-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "35c621fccf83cfdfd8bdcda3bd8bb2b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46725,
        "upload_time": "2023-01-06T16:42:25",
        "upload_time_iso_8601": "2023-01-06T16:42:25.433141Z",
        "url": "https://files.pythonhosted.org/packages/08/dd/688c21969aa45c67dbdc7e9a73cf9480ba2a46196bc1a276140c3831171e/waveprop-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08dd688c21969aa45c67dbdc7e9a73cf9480ba2a46196bc1a276140c3831171e",
        "md5": "35c621fccf83cfdfd8bdcda3bd8bb2b9",
        "sha256": "d5ad866f78a02ed6222aad79a2dfd5ca39d6d99c1d6b0105743b0cac881d6b68"
      },
      "downloads": -1,
      "filename": "waveprop-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "35c621fccf83cfdfd8bdcda3bd8bb2b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 46725,
      "upload_time": "2023-01-06T16:42:25",
      "upload_time_iso_8601": "2023-01-06T16:42:25.433141Z",
      "url": "https://files.pythonhosted.org/packages/08/dd/688c21969aa45c67dbdc7e9a73cf9480ba2a46196bc1a276140c3831171e/waveprop-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}