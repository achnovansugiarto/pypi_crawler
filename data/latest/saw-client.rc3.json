{
  "info": {
    "author": "Galois, Inc.",
    "author_email": "saw@galois.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# SAW Python Client\n\nIn-development Python client for SAW. Currently tested on Linux and MacOS -- at present there may be some minor issues running the Python Client in a Windows environment that needs addressed (e.g., some Python process management methods are not cross-OS-compatible).\n\nThis SAW client depends on the [saw-remote-api](https://github.com/GaloisInc/saw-script/tree/master/saw-remote-api) server.\n\n# TL;DR Steps to running SAW Python scripts\n\n1. Clone the repo \n```\ngit clone https://github.com/GaloisInc/saw-script.git\n```\n2. Enter the repo\n```\ncd saw-script\n```\n3. Initialize git submodules \n```\ngit submodule update --init\n```\n4. Navigate to the python client\n```\ncd saw-remote-api/python\n```\n5. Install and setup some version of the `saw-remote-api` server and update any\n   relevant environment variables as needed (see `saw_client.connect()` documentation\n   for the various ways a server can be connected to).\n   E.g., here is how the docker image of the server might be used:\n```\n$ docker run --name=saw-remote-api -d \\\n  -v $PWD/tests/saw/test-files:/home/saw/tests/saw/test-files \\\n  -p 8080:8080 \\\n  galoisinc/saw-remote-api:nightly\n$ export SAW_SERVER_URL=\"http://localhost:8080/\"\n```\n6. Install the Python client (requires Python v3.8 or newer -- we recommend using [`poetry`](https://python-poetry.org/docs/#installation) to install the package):\n```\n$ poetry install \n```\n7. Run tests or individual scripts:\n```\n$ poetry run python -m unittest discover tests/saw\n$ poetry run python tests/saw/test_salsa20.py\n```\n\n(We're aware the tests currently emit some `ResourceWarning`s regarding\nsubprocesses when run via `unittest` even though they pass and successfully\nverify the goals. It's on our to-do list.)\n\n# Python Client Installation (via Poetry)\n\nFirst, clone the repository and submodules.\n\n```\n$ git clone https://github.com/GaloisInc/saw-script.git\n$ cd saw-script\n$ git submodule update --init\n```\n\nThen, use [`poetry`](https://python-poetry.org/docs/#installation) to install\nthe python client from the `saw-remote-api/python` directory:\n\n```\n$ cd saw-remote-api/python\n$ poetry install\n```\n\n# SAW server\n\nTo run the verification scripts a `saw-remote-api` server must be available,\neither as a local executable or running in docker image listening on a port.\n\n## Connecting with a server in a script\n\nConnecting to a server in a Python script is accomplished via the `saw_client.connect`\nmethod. Its accompanying Python doc strings describe the various ways it can be\nused. Below is a brief summary:\n\n`saw_client.connect()`, when provided no arguments, will attempt the following in order:\n\n1. If the environment variable ``SAW_SERVER`` is set and refers to an\n   executable, it is assumed to be a `saw-remote-api` executable and will be\n   used for the duration of the script.\n2. If the environment variable ``SAW_SERVER_URL`` is set, it is assumed to be\n   the URL for a running SAW server in ``http`` mode and will be connected to.\n   (N.B., this can be a local server or a server running in a docker image.)\n3. If an executable ``saw-remote-api`` is available on the ``PATH`` it is\n    assumed to be a SAW server and will be used for the duration of the script.\n\nAdditional arguments and options are documented with the function.\n\nNotable, the `reset_server` keyword can be used to connect to a running server\nand reset it, ensuring states from previous scrips have been cleared. E.g.,\n`saw_client.connect(reset_server=True)`.\n\n\n## Acquiring a SAW Server\n\nThere are several ways a server executable can be obtained.\n\n### Server executables\n\nAn executable of the server is included in the SAW release/nightly tarballs.\n\nIf using a SAW [release](https://github.com/GaloisInc/saw-script/releases), it\nis recommended to use `v0.8` or greater if possible. (`v0.7` _does_ include the\nserver and may work for individual use cases, but running repeated scripts\nagainst the same persistent server will not work as intended.)\n\nNightly server builds can be found as `Artifacts` of the [Nightly\nBuilds](https://github.com/GaloisInc/saw-script/actions/workflows/nightly.yml)\ngithub action. I.e., go to the `Nightly Builds` Github Action, click on a\nsuccessful build, scroll to the bottom and under `Artifacts` a Linux, Windows,\nand MacOS tarball will be listed. (Apologies... we need to make these easier to\nfind...)\n\n### Server docker images\n\nDocker images for the SAW server are currently uploaded to\n[DockerHub](https://hub.docker.com/r/galoisinc/saw-remote-api).\n\nThese images are set up to run as HTTP `saw-remote-api` servers, e.g.:\n\n```\ndocker run --name=saw-remote-api -d \\\n  -p 8080:8080 \\\n  galoisinc/saw-remote-api:TAG\n```\n\n(where `TAG` is either `latest` or `nightly`) will launch a server listening at\n`http://localhost:8080/`. (As of March 2020, `nightly` is recommended, as the\nserver in the last official release (i.e., the one accompanying SAW `v0.7`)\ncontains some non-trivial bugs that greatly limit its utility.)\n\nThe `-v` option to `docker run` can be used to load files into the docker\nserver's working directory so they can be loaded into the server at the request\nof python scripts. E.g., `-v PATH_TO_FILES:/home/saw/files/` will upload the\ncontents of the host machine's directory `PATH_TO_FILES` to the\n`/home/saw/files/` directory in the docker container, which corresponds to the\nrelative path `files/` for the SAW server. (If desired, it can be useful to\nplace files in a location in the Docker container such that the same relative\npaths in scripts refer to the same files in the host machine and docker\ncontainer.)\n\n### Building from Source\n\nIf this repository is checked out and the build directions are successfully run,\n`cabal v2-exec which saw-remote-api` should indicate where the server executable has\nbeen stored by `cabal`.\n\nAlternatively `cabal v2-install saw-remote-api` should install the server\nexecutable into the user's `~/.cabal/bin` directory (or similar), which (if\nconfigured properly) should then appear as `saw-remote-api` in a user's `PATH`.\n\n\n# Running Python SAW verification scripts\n\nOnce the server is setup and any path variables are setup as desired, the\nPython (>= v3.8) client can be installed using\n[`poetry`](https://python-poetry.org/docs/#installation) as follows:\n\n```\n$ cd saw-remote-api/python\n$ poetry install\n```\n\nThen the tests or individual scripts can be run as follows:\n```\n$ poetry run python -m unittest discover tests/saw\n$ poetry run python tests/saw/test_salsa20.py\n```\n\nIf leveraging environment variables is undesirable, the scripts themselves can\nspecify a command to launch the server, e.g.:\n\n```\nsaw_client.connect(COMMAND)\n```\n\nwhere `COMMAND` is a command to launch a new SAW server in socket mode.\n\nOr a server URL can be specified directly in the script, e.g.:\n\n```\nsaw_client.connect(url=URL)\n```\n\nwhere `URL` is a URL for a running SAW server in HTTP mode.\n\n## Running Verification Scripts from a clean state\n\nTo ensure any previous server state is cleared when running a SAW Python script\nagainst a persistent server (e.g., one running in HTTP mode in a different process),\nthe `reset_server` keyword can be passed to `saw_client.connect()`. E.g.,\n\n```\nsaw_client.connect(url=\"http://localhost:8080/\", reset_server=True)\n```\n\nwill connect to a SAW server running at `http://localhost:8080/` and will\nguarantee any previous state on the server is cleared.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "saw-client",
    "package_url": "https://pypi.org/project/saw-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/saw-client/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/saw-client/0.9.0/",
    "requires_dist": [
      "requests (>=2.25.1,<3.0.0)",
      "BitVector (>=3.4.9,<4.0.0)",
      "cryptol (==2.12.0)",
      "argo-client (>=0.0.6,<0.1.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "SAW client for the SAW 0.9 RPC server",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13845448,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4129241ad72f4f61caae2216a039a75e2cd48894c6da6d6b01151c97a3e382c2",
          "md5": "b1ec8ade7d948fe40c3d94e406ac12e7",
          "sha256": "08b72b501378f42d9f38c50e14382e406bd5ea939a629d4c951d11a2a71ebae1"
        },
        "downloads": -1,
        "filename": "saw_client-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1ec8ade7d948fe40c3d94e406ac12e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 21173,
        "upload_time": "2021-04-21T17:46:51",
        "upload_time_iso_8601": "2021-04-21T17:46:51.656272Z",
        "url": "https://files.pythonhosted.org/packages/41/29/241ad72f4f61caae2216a039a75e2cd48894c6da6d6b01151c97a3e382c2/saw_client-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c2d2ae81fe6d88ae21ceee6a4eb4ae45a2e2472b288caa3f839be1efd53af17",
          "md5": "cbdd43bf29b1ae870c13690e5796528c",
          "sha256": "358e72c34864749f8d806809b65eded35f26560ffa6c1c09f46be293446ba11c"
        },
        "downloads": -1,
        "filename": "saw-client-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cbdd43bf29b1ae870c13690e5796528c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 18048,
        "upload_time": "2021-04-21T17:46:50",
        "upload_time_iso_8601": "2021-04-21T17:46:50.202794Z",
        "url": "https://files.pythonhosted.org/packages/8c/2d/2ae81fe6d88ae21ceee6a4eb4ae45a2e2472b288caa3f839be1efd53af17/saw-client-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e99a391510e882013bcf2b1fbc4430b70ad52fbc8289a5bd0b1c5e2009fd26fb",
          "md5": "eeef8b9bb694100f6e5c170014287dd3",
          "sha256": "4b2c6a19493f8322461f19936483ee84de08f34149c296f6c9f8a678720ed47e"
        },
        "downloads": -1,
        "filename": "saw_client-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eeef8b9bb694100f6e5c170014287dd3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 24304,
        "upload_time": "2021-04-21T19:17:27",
        "upload_time_iso_8601": "2021-04-21T19:17:27.034704Z",
        "url": "https://files.pythonhosted.org/packages/e9/9a/391510e882013bcf2b1fbc4430b70ad52fbc8289a5bd0b1c5e2009fd26fb/saw_client-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2705c1425e32438990918f826e4074ff1db693b6da1b0ab52565cc693e535155",
          "md5": "98f14038c02f050411430a7400f97d26",
          "sha256": "6597526e516b46f4aec10b8f3dd5637745fcfec867863bdb95ba09d059aeec94"
        },
        "downloads": -1,
        "filename": "saw-client-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "98f14038c02f050411430a7400f97d26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 24252,
        "upload_time": "2021-04-21T19:17:25",
        "upload_time_iso_8601": "2021-04-21T19:17:25.558054Z",
        "url": "https://files.pythonhosted.org/packages/27/05/c1425e32438990918f826e4074ff1db693b6da1b0ab52565cc693e535155/saw-client-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c06ab92d8b11c13af8f651de91092fb0a3e98a25603c18403c3c6887b5935959",
          "md5": "379087c5b66cbfd629d73bceddfe978f",
          "sha256": "4d5d9bd5e77d2646fab9d4e03c3c9c8e0aa410c00c2ef90fd7c75a587bb27d02"
        },
        "downloads": -1,
        "filename": "saw_client-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "379087c5b66cbfd629d73bceddfe978f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 26871,
        "upload_time": "2021-11-19T23:59:05",
        "upload_time_iso_8601": "2021-11-19T23:59:05.264160Z",
        "url": "https://files.pythonhosted.org/packages/c0/6a/b92d8b11c13af8f651de91092fb0a3e98a25603c18403c3c6887b5935959/saw_client-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ab230bdf486f439517edbb3a98361905b1aabace7351ec3843851b922ed398f",
          "md5": "8b92efdf82dcb9ec43346b58d88500d0",
          "sha256": "bf4098acdf1e1216bc0986f0de3960475f11480fa32ee598267e6988a5de0d8b"
        },
        "downloads": -1,
        "filename": "saw-client-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8b92efdf82dcb9ec43346b58d88500d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 25846,
        "upload_time": "2021-11-19T23:59:03",
        "upload_time_iso_8601": "2021-11-19T23:59:03.550621Z",
        "url": "https://files.pythonhosted.org/packages/9a/b2/30bdf486f439517edbb3a98361905b1aabace7351ec3843851b922ed398f/saw-client-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c06ab92d8b11c13af8f651de91092fb0a3e98a25603c18403c3c6887b5935959",
        "md5": "379087c5b66cbfd629d73bceddfe978f",
        "sha256": "4d5d9bd5e77d2646fab9d4e03c3c9c8e0aa410c00c2ef90fd7c75a587bb27d02"
      },
      "downloads": -1,
      "filename": "saw_client-0.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "379087c5b66cbfd629d73bceddfe978f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 26871,
      "upload_time": "2021-11-19T23:59:05",
      "upload_time_iso_8601": "2021-11-19T23:59:05.264160Z",
      "url": "https://files.pythonhosted.org/packages/c0/6a/b92d8b11c13af8f651de91092fb0a3e98a25603c18403c3c6887b5935959/saw_client-0.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ab230bdf486f439517edbb3a98361905b1aabace7351ec3843851b922ed398f",
        "md5": "8b92efdf82dcb9ec43346b58d88500d0",
        "sha256": "bf4098acdf1e1216bc0986f0de3960475f11480fa32ee598267e6988a5de0d8b"
      },
      "downloads": -1,
      "filename": "saw-client-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8b92efdf82dcb9ec43346b58d88500d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 25846,
      "upload_time": "2021-11-19T23:59:03",
      "upload_time_iso_8601": "2021-11-19T23:59:03.550621Z",
      "url": "https://files.pythonhosted.org/packages/9a/b2/30bdf486f439517edbb3a98361905b1aabace7351ec3843851b922ed398f/saw-client-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}