{
  "info": {
    "author": "Tiago Coutinho",
    "author_email": "coutinhotiago@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Instrument Simulator\n\n![Pypi python versions][pypi-python-versions]\n![Pypi version][pypi-version]\n![Pypi status][pypi-status]\n![License][license]\n\nA simulator for real hardware. This project provides a server able to spawn\nmultiple simulated devices and serve requests concurrently.\n\nThis project provides only the required infrastructure to launch a server from\na configuration file (YAML, TOML or json) and a means to register third-party device plugins through the python entry point mechanism.\n\nSo far, the project provides transports for TCP, UDP and serial line.\nSupport for new transports (ex: USB, GPIB or SPI) is being implemented on a\nneed basis.\n\nPRs are welcome!\n\n## Installation\n\n(**TL;DR**: `pip install sinstruments[all]`)\n\nFrom within your favorite python environment:\n\n```\n$ pip install sinstruments\n```\n\nAdditionally, if you want to write YAML configuration files in YAML:\n\n```\n$ pip install sinstruments[yaml]\n```\n\n...or, for TOML based configuration:\n\n```\n$ pip install sinstruments[toml]\n```\n\n## Execution\n\nOnce installed the server can be run with:\n\n```\n$ sinstruments-server -c <config file name>\n```\n\nThe configuration file describes which devices the server should instantiate\nalong with a series of options like the transport(s) each device listens for\nrequests on.\n\n### Example\n\nImagine you need to simulate 2 [GE Pace 5000](https://github.com/tiagocoutinho/gepace)\nreachable through a TCP port each and a [CryoCon 24C](https://github.com/tiagocoutinho/cryocon) accessible through the serial line.\n\nFirst, make sure the dependencies are installed with:\n```\n$ pip install gepace[simulator] cryoncon[simulator]\n```\n\nNow we can prepare a YAML configuration called `simulator.yml`:\n\n```YAML\ndevices:\n- class: Pace\n  name: pace-1\n  transports:\n  - type: tcp\n    url: :5000\n- class: Pace\n  name: pace-2\n  transports:\n  - type: tcp\n    url: :5001\n- class: CryoCon\n  name: cryocon-1\n  transports:\n  - type: serial\n    url: /tmp/cryocon-1\n```\n\nWe are now ready to launch the server:\n```\n$ sinstruments-server -c simulator.yml\n```\n\nThat's it! You should now be able to connect to any of the Pace devices through\nTCP or the CryoCon using the local emulated serial line.\n\nLet's try connecting to the first Pace with the *nc* (aka netcat) linux command\nline tool and ask for the well known `*IDN?` SCPI command:\n\n```\n$ nc localhost 5000\n*IDN?\nGE,Pace5000,204683,1.01A\n```\n\n## Device catalog\n\nThis is a summary of the known third-party instrumentation libraries which\nprovide their own simulators.\n\n\n* [cryocon](https://github.com/tiagocoutinho/cryocon)\n* [fast-spinner](https://github.com/tiagocoutinho/fast-spinner)\n* [gepace](https://github.com/tiagocoutinho/gepace)\n* [icepap](https://github.com/ALBA-Synchrotron/pyIcePAP)\n* [julabo](https://github.com/tiagocoutinho/julabo)\n* [vacuubrand](https://github.com/tiagocoutinho/vacuubrand)\n* [xia-pfcu](https://github.com/tiagocoutinho/xia-pfcu)\n* Mythen detector (from Dectris) - not publicly available yet\n\nIf you wrote a publicly available device feel free complete the above list by\ncreating a PR.\n\n*Hint*: `sinstruments-server ls` shows a list of available plugins.\n\n\n## Configuration\n\nThe configuration file can be a YAML, TOML or JSON file as long as it translates to a dictionary with the description given below.\n\nIn this chapter we will use YAML as a reference example.\n\nThe file should contain at least a top-level key called `devices`.\nThe value needs to be a list of device descriptions:\n\n```YAML\ndevices:\n  - class: Pace\n    name: pace-1\n    transports:\n    - type: tcp\n      url: :5000\n```\n\nEach device description must contain:\n\n* **class**: Each third-party plugin should describe which text\n  identify itself\n* **name**: a unique name. Each device must be given a unique name at\n  your choice\n* **transports**: a list of transports from where the device is accessible.\n  Most devices provide only one transport.\n  * **type**: Each transport must define its type (supported are `tcp`, `udp`, `serial`)\n  * **url**: the url where the device is listening on\n\nAny other options given to each device are passed directly to the specific\nplugin object at runtime. Each plugin should describe which additional options\nit supports and how to use them.\n\n### TCP and UDP\n\nFor TCP and UDP transports, the **url** has the `<host>:<port>` format.\n\nAn empty host (like in the above example) is interpreted as `0.0.0.0` (which\nmeans listen on all network interfaces). If host is `127.0.0.1` or `localhost`\nthe device will only be accessible from the machine where the simulator is\nrunning.\n\nA port value of 0 means ask the OS to assign a free port (useful for running\na test suite). Otherwise must be a valid TCP or UDP port.\n\n### Serial line\n\nThe **url** represents a special file which is created by the simulator to\nsimulate a serial line accessible like a `/dev/ttyS0` linux serial line file.\n\nThis feature is only available in linux and systems for which the pseudo\nterminal `pty` is implemented in python.\n\nThe **url** is optional. The simulator will always create a non deterministic\nname like `/dev/pts/4` and it will log this information in case you need to\naccess. This feature is most useful when running a test suite.\n\nYou are free to choose any **url** path you like (ex: `/dev/ttyRP10`) as long\nas you are sure the simulator has permissions to create the symbolic file.\n\n### Simulating communication delays\n\nFor any of the transports (TCP, UDP and serial line) is is possible to do basic\nsimulation of the communication channel speed by providing an additional\n`baudrate` parameter to the configuration. Example:\n\n```YAML\n- class: CryoCon\n  name: cryocon-1\n  transports:\n  - type: serial\n    url: /tmp/cryocon-1\n    baudrate: 9600\n```\n\n\n### Back door\n\nThe simulator provides a gevent back door python console which you can activate\nif you want to access a running simulator process remotely. To activate this\nfeature simply add to the top-level of the configuration the following:\n\n```YAML\nbackdoor: [\"localhost\": 10001]\ndevices:\n  - ...\n```\n\nYou are free to choose any other TCP port and bind address. Be aware that this\nbackdoor provides no authentication and makes no attempt to limit what\nremote users can do. Anyone that can access the server can take any action that\nthe running python process can. Thus, while you may bind to any interface, for\nsecurity purposes it is recommended that you bind to one only accessible to the\nlocal machine, e.g., 127.0.0.1/localhost.\n\n**Usage**\n\nOnce the backdoor is configured and the server is running, in a another\nterminal, connect with:\n\n```\n$ nc 127.0.0.1 10001\nWelcome to Simulator server console.\nYou can access me through the 'server()' function. Have fun!\n>>> print(server())\n...\n```\n\n## Develop a new simulator\n\nWritting a new device is simple. Let's imagine you want to simulate a SCPI\noscilloscope. The only thing you need to do is write a class inheriting\nfrom BaseDevice and implement the `handle_message(self, message)` where you\nshould handle the different commands supported by your device:\n\n\n```python\n# myproject/simulator.py\n\nfrom sinstruments.simulator import BaseDevice\n\nclass Oscilloscope(BaseDevice):\n\n    def handle_message(self, message):\n        self._log.info(\"received request %r\", message)\n        message = message.strip().decode()\n        if message == \"*IDN?\":\n            return b\"ACME Inc,O-3000,23l032,3.5A\"\n        elif message == \"*RST\":\n            self._log.info(\"Resetting myself!\")\n        ...\n```\n\nDon't forget to always return `bytes`! The simulator doesn't make any guesses\non how to encode `str`\n\nAssuming this file `simulator.py` is part of a python package called `myproject`,\nthe second thing to do is register your simulator plugin in your setup.py:\n\n```python\nsetup(\n    ...\n    entry_points={\n        \"sinstruments.device\": [\n            \"Oscilloscope=myproject.simulator:Oscilloscope\"\n        ]\n    }\n)\n```\n\nYou should now be able to launch your simulator by writing a configuration\nfile:\n\n```YAML\n# oscilo.yml\n\ndevices:\n- class: Oscilloscope\n  name: oscilo-1\n  transports:\n  - type: tcp\n    url: :5000\n```\n\nNow launch the server with\n```\n$ sinstruments-server -c oscillo.yml\n```\n\nand you should be able to connect with:\n\n```\n$ nc localhost 5000\n*IDN?\nACME Inc,O-3000,23l032,3.5A\n```\n\n### Configuring message terminator\n\nBy default the `eol` is set to `\\n`. You can change it to any character with:\n\n```python\nclass Oscilloscope(BaseDevice):\n\n    newline = b\"\\r\"\n\n```\n\n### Request with multiple answers\n\nIf your device implements a protocol which answers with multiple (potentially\ndelayed) answers to a single request, you can support this by\nconverting the `handle_message()` into a generator:\n\n```python\nclass Oscilloscope(BaseDevice):\n\n    def handle_message(self, message):\n        self._log.info(\"received request %r\", message)\n        message = message.strip().decode()\n        if message == \"*IDN?\":\n            yield b\"ACME Inc,O-3000,23l032,3.5A\"\n        elif message == \"*RST\":\n            self._log.info(\"Resetting myself!\")\n        elif message == \"GIVE:ME 10\":\n            for i in range(1, 11):\n                yield f\"Here's {i}\\n\".encode()\n        ...\n```\nDon't forget to always yield `bytes`! The simulator doesn't make any guesses\non how to encode `str`\n\n### Support for specific configuration options\n\nIf your simulated device requires additional configuration, it can be supplied\nthrough the same YAML file.\n\nLet's say you want to be able to configure if your device is in `CONTROL` mode\nat startup. Additionally, if no initial value is configured, it should default\nto 'OFF'.\n\nFirst lets add this to our configuration example:\n\n```YAML\n# oscilo.yml\n\ndevices:\n- class: Oscilloscope\n  name: oscilo-1\n  control: ON\n  transports:\n  - type: tcp\n    url: :5000\n```\n\nThen, we re-implement our Oscilloscope `__init__()` to intercept this new\nparameter and we handle it in `handle_message()`:\n\n```python\nclass Oscilloscope(BaseDevice):\n\n    def __init__(self, name, **opts):\n        self._control = opts.pop(\"control\", \"OFF\").upper()\n        super().__init__(name, **opts)\n\n    def handle_message(self, message):\n        ...\n        elif message == \"CONTROL\":\n            return f\"CONTROL {self._control}\\n\".encode()\n        ...\n```\n\nYou are free to add as many options as you want as long as they don't conflict\nwith the reserved keys `name`, `class` and `transports`.\n\n### Writing a specific message protocol\n\nSome instruments implement protocols that are not suitably managed by a EOL\nbased message protocol.\n\nThe simulator allows you to write your own message protocol. Here is an example:\n\n```python\nfrom sinstruments.simulator import MessageProtocol\n\n\nclass FixSizeProtocol(MessageProtocol):\n\n    Size = 32\n\n    def read_messages(self):\n        transport = self.transport\n        buff = b''\n        while True:\n            buff += transport.read(self.channel, size=4096)\n            if not buff:\n                return\n            for i in range(0, len(buff), self.Size):\n                message = buff[i:i+self.Size]\n                if len(message) < self.Size:\n                    buff = message\n                    break\n                yield message\n\n\nclass Oscilloscope(BaseDevice):\n\n    protocol = FixSizeProtocol\n\n    ...\n```\n\n## Pytest fixture\n\nIf you are developing a python library that provides access to an instrument\naccessible through socket or serial line and you wrote a simulator for it, you\nmight be interested in testing your library against the simulator.\n\nsinstruments provides a pair of pytest helpers that spawn a simulator in a\nseparate thread.\n\n### `server_context`\nThe first usage is simply using the `server_context` helper.\nThere is actually nothing pytest speficic about this helper so you could\nimagine using it in other scenarios as well.\n\nHere is an example:\n\n```python\nimport pytest\n\nfrom sinstruments.pytest import server_context\n\ncfg = {\n    \"devices\": [{\n        \"name\": \"oscillo-1\",\n        \"class\": \"Oscilloscope\",\n        \"transports\": [\n            {\"type\": \"tcp\", \"url\": \"localhost:0\"}\n        ]\n    }]\n}\n\ndef test_oscilloscope_id():\n    with server_context(cfg) as server:\n        # put here code to perform your tests that need to communicate with\n        # the simulator. In this example an oscilloscope client\n        addr = server.devices[\"oscillo-1\"].transports[0].address\n        oscillo = Oscilloscope(addr)\n        assert oscillo.idn().startswith(\"ACME Inc,O-3000\")\n```\n\nYou might notice that in the configuration we use port `0`. This is telling\nthe simulator to listen on any free port provided by the OS.\n\nThe actual test retrieves the current address assigned by the OS and uses it in\nthe test.\n\nAs you can see, the tests are not dependent of the availability of one specific\nport which makes them portable.\n\nHere is a suggestion on how you could write your own fixture using the\n`server_context` helper. The aim was to reduce the amount of boilerplate\ncode you need to write your test:\n\n```python\n@pytest.fixture\ndef oscillo_server():\n    with server_context(config) as server:\n        server.oscillo1 = server.devices[\"oscillo-1\"]\n        server.oscillo1.addr = server.oscillo1.transports[0].address\n        yield server\n\n\ndef test_oscilloscope_current(oscillo_server):\n    oscillo = Oscilloscope(oscillo_server.oscillo1.addr)\n    assert .05 < oscillo.current() < 0.01\n```\n\n### `server`\n\nA second helper is the `server` fixture. This fixture depends on an existing\n`config` feature that must be present in your module. Here is an example\nfollowing the previous code:\n\n```python\nfrom sinstruments.pytest import server\n\n@pytest.fixture\ndef config()\n    yield cfg\n\ndef test_oscilloscope_voltage(server):\n    addr = server.devices[\"oscillo-1\"].transports[0].address\n    oscillo = Oscilloscope(addr)\n    assert 5 < oscillo.voltage() < 10\n```\n\n[pypi-python-versions]: https://img.shields.io/pypi/pyversions/sinstruments.svg\n[pypi-version]: https://img.shields.io/pypi/v/sinstruments.svg\n[pypi-status]: https://img.shields.io/pypi/status/sinstruments.svg\n[license]: https://img.shields.io/pypi/l/sinstruments.svg",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tiagocoutinho/sinstruments",
    "keywords": "sinstruments",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sinstruments",
    "package_url": "https://pypi.org/project/sinstruments/",
    "platform": "",
    "project_url": "https://pypi.org/project/sinstruments/",
    "project_urls": {
      "Homepage": "https://github.com/tiagocoutinho/sinstruments"
    },
    "release_url": "https://pypi.org/project/sinstruments/1.3.3/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A simulator for real hardware which is accessible via TCP, UDP or serial line",
    "version": "1.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10559928,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72da4958e465ee63fb35c565159a031f89f15b2bdda26fb43051a8dfb33f09ea",
          "md5": "600f345586fd2a451e7ea97dced6d896",
          "sha256": "03d0da4990ecbdc75126ae46a389841619a5808d979a007606b86bef482068b7"
        },
        "downloads": -1,
        "filename": "sinstruments-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "600f345586fd2a451e7ea97dced6d896",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12120,
        "upload_time": "2019-01-02T14:15:21",
        "upload_time_iso_8601": "2019-01-02T14:15:21.235371Z",
        "url": "https://files.pythonhosted.org/packages/72/da/4958e465ee63fb35c565159a031f89f15b2bdda26fb43051a8dfb33f09ea/sinstruments-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d51e3e79d80cd05db5d7b407c993b130adade5eda6c286a105cf2f7b7c80959",
          "md5": "3747ba6fa3c6dc149550cb79c8bba509",
          "sha256": "be3097abb52e0c43f411905f0a74346c6c15c21a774835a682ec26c7d4dbde52"
        },
        "downloads": -1,
        "filename": "sinstruments-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3747ba6fa3c6dc149550cb79c8bba509",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 412685,
        "upload_time": "2020-05-24T09:37:09",
        "upload_time_iso_8601": "2020-05-24T09:37:09.498261Z",
        "url": "https://files.pythonhosted.org/packages/8d/51/e3e79d80cd05db5d7b407c993b130adade5eda6c286a105cf2f7b7c80959/sinstruments-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de16473f4df7ff14503c4adb45e1946de5bea3e828fc2cd6fe8cced9d6e71b7c",
          "md5": "96cfc3815aba4fb4e3397e4a73bc547c",
          "sha256": "ca66bd81b4e08b693d2a89eb1d62d3eabacf728b67a315e18e966c67200cb9b6"
        },
        "downloads": -1,
        "filename": "sinstruments-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "96cfc3815aba4fb4e3397e4a73bc547c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 412562,
        "upload_time": "2020-06-04T14:48:08",
        "upload_time_iso_8601": "2020-06-04T14:48:08.290315Z",
        "url": "https://files.pythonhosted.org/packages/de/16/473f4df7ff14503c4adb45e1946de5bea3e828fc2cd6fe8cced9d6e71b7c/sinstruments-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d990db07f62963f841904ad3956ae6978397ff94cc22aa53a15465e824b58cf",
          "md5": "b9824330524673a814ae41142c1aee1c",
          "sha256": "8e17866dbde7d3dde24d8babd9e31cbaf3d43c5d7c8c1e32a24bbad16da81e14"
        },
        "downloads": -1,
        "filename": "sinstruments-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b9824330524673a814ae41142c1aee1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 412762,
        "upload_time": "2020-07-28T08:56:29",
        "upload_time_iso_8601": "2020-07-28T08:56:29.169979Z",
        "url": "https://files.pythonhosted.org/packages/9d/99/0db07f62963f841904ad3956ae6978397ff94cc22aa53a15465e824b58cf/sinstruments-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35292005207554653ea36503352b80ea048d54e2f5e3ad6b3e3560dec9379973",
          "md5": "5470e47f96e092c1c7081d6d1fa50019",
          "sha256": "6974ad25052e172b9b6a33e4f3daa4d6b1f1a16554e2c142509859bd6b8dec7f"
        },
        "downloads": -1,
        "filename": "sinstruments-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5470e47f96e092c1c7081d6d1fa50019",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18144,
        "upload_time": "2021-02-08T20:45:38",
        "upload_time_iso_8601": "2021-02-08T20:45:38.796125Z",
        "url": "https://files.pythonhosted.org/packages/35/29/2005207554653ea36503352b80ea048d54e2f5e3ad6b3e3560dec9379973/sinstruments-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0669047915267abf3e1015cd117c6bb9b045008fd03bb29cb6c68e4e6663e394",
          "md5": "8683a7eb58f3614360d15d4b255bb457",
          "sha256": "901c63a0dc7a5c64b0c61251cae99a96cee1248343242ee8b1346045c3f2e95d"
        },
        "downloads": -1,
        "filename": "sinstruments-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8683a7eb58f3614360d15d4b255bb457",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 30045,
        "upload_time": "2021-02-09T18:03:28",
        "upload_time_iso_8601": "2021-02-09T18:03:28.798641Z",
        "url": "https://files.pythonhosted.org/packages/06/69/047915267abf3e1015cd117c6bb9b045008fd03bb29cb6c68e4e6663e394/sinstruments-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fa71a6adeb6965f2b9f23797b3db22e1980266e577b7a2ff84aaa5e30324541",
          "md5": "7a19e2928ec60d657cdd0f09fb524701",
          "sha256": "aa026f8b07108f50768d15ac00f0b5672c106b376b5a4527c132f185153b7b13"
        },
        "downloads": -1,
        "filename": "sinstruments-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a19e2928ec60d657cdd0f09fb524701",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 30859,
        "upload_time": "2021-02-26T17:47:45",
        "upload_time_iso_8601": "2021-02-26T17:47:45.129094Z",
        "url": "https://files.pythonhosted.org/packages/4f/a7/1a6adeb6965f2b9f23797b3db22e1980266e577b7a2ff84aaa5e30324541/sinstruments-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57f899abb17e29052060d1b52a620d4ed23c0cad857a388b55bb7c658eb763d0",
          "md5": "06a195b3f6801997e2b6dbc814a69761",
          "sha256": "242e3de65c2f70ca8a6b37c98690627b4286cb9e46edb5c815d2442935e5b3f4"
        },
        "downloads": -1,
        "filename": "sinstruments-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "06a195b3f6801997e2b6dbc814a69761",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 30879,
        "upload_time": "2021-06-04T17:03:36",
        "upload_time_iso_8601": "2021-06-04T17:03:36.745700Z",
        "url": "https://files.pythonhosted.org/packages/57/f8/99abb17e29052060d1b52a620d4ed23c0cad857a388b55bb7c658eb763d0/sinstruments-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57f899abb17e29052060d1b52a620d4ed23c0cad857a388b55bb7c658eb763d0",
        "md5": "06a195b3f6801997e2b6dbc814a69761",
        "sha256": "242e3de65c2f70ca8a6b37c98690627b4286cb9e46edb5c815d2442935e5b3f4"
      },
      "downloads": -1,
      "filename": "sinstruments-1.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "06a195b3f6801997e2b6dbc814a69761",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 30879,
      "upload_time": "2021-06-04T17:03:36",
      "upload_time_iso_8601": "2021-06-04T17:03:36.745700Z",
      "url": "https://files.pythonhosted.org/packages/57/f8/99abb17e29052060d1b52a620d4ed23c0cad857a388b55bb7c658eb763d0/sinstruments-1.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}