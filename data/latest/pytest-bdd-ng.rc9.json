{
  "info": {
    "author": "Oleg Pidsadnyi, Anatoly Bubenkov and others",
    "author_email": "kostya.goloveshko@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "BDD library for the pytest runner\n=================================\n\n.. image:: http://img.shields.io/pypi/v/pytest-bdd-ng.svg\n    :target: https://pypi.python.org/pypi/pytest-bdd-ng\n.. image:: https://codecov.io/gh/elchupanebrej/pytest-bdd-ng/branch/default/graph/badge.svg\n    :target: https://app.codecov.io/gh/elchupanebrej/pytest-bdd-ng\n.. image:: https://readthedocs.org/projects/pytest-bdd-ng/badge/?version=default\n    :target: https://pytest-bdd-ng.readthedocs.io/en/default/?badge=default\n    :alt: Documentation Status\n.. image:: https://badgen.net/badge/stand%20with/UKRAINE/?color=0057B8&labelColor=FFD700\n    :target: https://savelife.in.ua/en/\n\n**pytest-bdd-ng** combine descriptive clarity of `Gherkin <https://cucumber.io/docs/gherkin/reference/>`_ language\nwith power and fullness of `pytest <https://docs.pytest.org/>`_ infrastructure\nIt enables unifying unit and functional\ntests, reduces the burden of continuous integration server configuration and allows the reuse of\ntest setups.\n\nPytest fixtures written for unit tests can be reused for setup and actions\nmentioned in feature steps with dependency injection. This allows a true BDD\njust-enough specification of the requirements without obligatory maintaining any context object\ncontaining the side effects of Gherkin imperative declarations.\n\n.. _behave: https://pypi.python.org/pypi/behave\n.. _pytest-splinter: https://github.com/pytest-dev/pytest-splinter\n\nInstall pytest-bdd-ng\n---------------------\n\n::\n\n    pip install pytest-bdd-ng\n\n\nExample\n-------\n\nAn example test for a blog hosting software could look like this.\nNote that pytest-splinter_ is used to get the browser fixture.\n\npublish_article.feature:\n\n.. code-block:: gherkin\n\n    Feature: Blog\n        A site where you can publish your articles.\n\n        Scenario: Publishing the article\n            Given I'm an author user\n            And I have an article\n\n            When I go to the article page\n            And I press the publish button\n\n            Then I should not see the error message\n            And the article should be published  # Note: will query the database\n\nNote that only one feature is allowed per feature file.\n\ntest_publish_article.py:\n\n.. code-block:: python\n\n    from pytest_bdd import scenario, given, when, then\n\n    @scenario('publish_article.feature', 'Publishing the article')\n    def test_publish():\n        pass\n\n\n    @given(\"I'm an author user\")\n    def author_user(auth, author):\n        auth['user'] = author.user\n\n\n    @given(\"I have an article\", target_fixture=\"article\")\n    def article(author):\n        return create_test_article(author=author)\n\n\n    @when(\"I go to the article page\")\n    def go_to_article(article, browser):\n        browser.visit(urljoin(browser.url, '/manage/articles/{0}/'.format(article.id)))\n\n\n    @when(\"I press the publish button\")\n    def publish_article(browser):\n        browser.find_by_css('button[name=publish]').first.click()\n\n\n    @then(\"I should not see the error message\")\n    def no_error_message(browser):\n        with pytest.raises(ElementDoesNotExist):\n            browser.find_by_css('.message.error').first\n\n\n    @then(\"the article should be published\")\n    def article_is_published(article):\n        article.refresh()  # Refresh the object in the SQLAlchemy session\n        assert article.is_published\n\n\nScenario decorator\n------------------\n\nFunctions decorated with the `scenario` decorator behave like a normal test function,\nand they will be executed after all scenario steps.\n\n\n.. code-block:: python\n\n    from pytest_bdd import scenario, given, when, then\n\n    @scenario('publish_article.feature', 'Publishing the article')\n    def test_publish(browser):\n        assert article.title in browser.html\n\n\n.. NOTE:: It is however encouraged to try as much as possible to have your logic only inside the Given, When, Then steps.\n\n\nStep aliases\n------------\n\nSometimes, one has to declare the same fixtures or steps with\ndifferent names for better readability. In order to use the same step\nfunction with multiple step names simply decorate it multiple times:\n\n.. code-block:: python\n\n    @given(\"I have an article\")\n    @given(\"there's an article\")\n    def article(author, target_fixture=\"article\"):\n        return create_test_article(author=author)\n\nNote that the given step aliases are independent and will be executed\nwhen mentioned.\n\nFor example if you associate your resource to some owner or not. Admin\nuser canâ€™t be an author of the article, but articles should have a\ndefault author.\n\n.. code-block:: gherkin\n\n    Feature: Resource owner\n        Scenario: I'm the author\n            Given I'm an author\n            And I have an article\n\n\n        Scenario: I'm the admin\n            Given I'm the admin\n            And there's an article\n\n\nLiberal step decorator\n----------------------\nSometimes you want use same step for all types of steps without re-defining alias;\nthis step could be used with any keyword:\n\n.. code-block:: python\n\n    from pytest_bdd import step\n\n    @step(\"I'm an author user\", liberal=True)\n    def author_user(auth, author):\n        auth['user'] = author.user\n\nOther steps also could be used as wildcard steps without aliases:\n\n.. code-block:: python\n\n    from pytest_bdd import given\n\n    @given(\"I'm an author user\", liberal=True)\n    def author_user(auth, author):\n        auth['user'] = author.user\n\n\nThis behavior could be set globally by defining `--liberal-steps` cli option or by `liberal_steps` pytest.ini option\n\nSteps without keyword\n---------------------\n\nFor the next feature:\n\n\n.. code-block:: gherkin\n\n    Feature: Resource owner\n        Scenario: I'm the author\n            * I'm an author\n            * I have an article\n\nNext step definitions have to be used (or just use liberal steps):\n\n.. code-block:: python\n\n    from pytest_bdd import step\n\n    @step(\"I'm an author\")\n    def author_user(auth, author):\n        auth['user'] = author.user\n\n    @step(\"I have an article\")\n    def author_user(auth, article):\n        auth['article'] = article\n\n\n\nStep arguments\n--------------\n\nOften it's possible to reuse steps giving them a parameter(s).\nThis allows to have single implementation and multiple use, so less code.\nAlso opens the possibility to use same step twice in single scenario and with different arguments!\nAnd even more, there are several types of step parameter parsers at your disposal\n(idea taken from behave_ implementation):\n\n.. _pypi_parse: http://pypi.python.org/pypi/parse\n.. _pypi_parse_type: http://pypi.python.org/pypi/parse_type\n\n**string** (the default)\n    This is the default and can be considered as a `null` or `exact` parser. It parses no parameters\n    and matches the step name by equality of strings.\n**parse** (based on: pypi_parse_)\n    Provides a simple parser that replaces regular expressions for\n    step parameters with a readable syntax like ``{param:Type}``.\n    The syntax is inspired by the Python builtin ``string.format()``\n    function.\n    Step parameters must use the named fields syntax of pypi_parse_\n    in step definitions. The named fields are extracted,\n    optionally type converted and then used as step function arguments.\n    Supports type conversions by using type converters passed via `extra_types`\n**cfparse** (extends: pypi_parse_, based on: pypi_parse_type_)\n    Provides an extended parser with \"Cardinality Field\" (CF) support.\n    Automatically creates missing type converters for related cardinality\n    as long as a type converter for cardinality=1 is provided.\n    Supports parse expressions like:\n    * ``{values:Type+}`` (cardinality=1..N, many)\n    * ``{values:Type*}`` (cardinality=0..N, many0)\n    * ``{value:Type?}``  (cardinality=0..1, optional)\n    Supports type conversions (as above).\n**re**\n    This uses full regular expressions to parse the clause text. You will\n    need to use named groups \"(?P<name>...)\" to define the variables pulled\n    from the text and passed to your ``step()`` function.\n    Type conversion can only be done via `converters` step decorator argument (see example below).\n\nThe default parser is `string`, so just plain one-to-one match to the keyword definition.\nParsers except `string`, as well as their optional arguments are specified like:\n\nfor `cfparse` parser:\n\n.. code-block:: python\n\n    from pytest_bdd import parsers\n\n    @given(\n        parsers.cfparse(\"there are {start:Number} cucumbers\",\n        extra_types=dict(Number=int)),\n        target_fixture=\"start_cucumbers\",\n    )\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\nor the same:\n\n.. code-block:: python\n\n    from parse_type.cfparse import Parser as cfparse\n\n    @given(\n        cfparse(\"there are {start:Number} cucumbers\",\n        extra_types=dict(Number=int)),\n        target_fixture=\"start_cucumbers\",\n    )\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\nfor `re` parser\n\n.. code-block:: python\n\n    from pytest_bdd import parsers\n\n    @given(\n        parsers.re(r\"there are (?P<start>\\d+) cucumbers\"),\n        converters=dict(start=int),\n        target_fixture=\"start_cucumbers\",\n    )\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\nor the same:\n\n.. code-block:: python\n\n    from re import compile as parse_re\n\n    @given(\n        parse_re(r\"there are (?P<start>\\d+) cucumbers\"),\n        converters=dict(start=int),\n        target_fixture=\"start_cucumbers\",\n    )\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\nExample:\n\n.. code-block:: gherkin\n\n    Feature: Step arguments\n        Scenario: Arguments for given, when, then\n            Given there are 5 cucumbers\n\n            When I eat 3 cucumbers\n            And I eat 2 cucumbers\n\n            Then I should have 0 cucumbers\n\n\nThe code will look like:\n\n.. code-block:: python\n\n    import re\n    from parse import Parser as parse\n    from pytest_bdd import scenario, given, when, then\n\n\n    @scenario(\"arguments.feature\", \"Arguments for given, when, then\")\n    def test_arguments():\n        pass\n\n\n    @given(parse(\"there are {start:d} cucumbers\"), target_fixture=\"start_cucumbers\")\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\n\n    @when(parse(\"I eat {eat:d} cucumbers\"))\n    def eat_cucumbers(start_cucumbers, eat):\n        start_cucumbers[\"eat\"] += eat\n\n\n    @then(parse(\"I should have {left:d} cucumbers\"))\n    def should_have_left_cucumbers(start_cucumbers, start, left):\n        assert start_cucumbers['start'] == start\n        assert start - start_cucumbers['eat'] == left\n\nExample code also shows possibility to pass argument converters which may be useful if you need to postprocess step\narguments after the parser.\n\nYou can implement your own step parser. It's interface is quite simple. The code can looks like:\n\n.. code-block:: python\n\n    import re\n    from pytest_bdd import given, parsers\n\n\n    class MyParser(parsers.StepParser):\n        \"\"\"Custom parser.\"\"\"\n\n        def __init__(self, name, **kwargs):\n            \"\"\"Compile regex.\"\"\"\n            super().__init__(name)\n            self.regex = re.compile(re.sub(\"%(.+)%\", \"(?P<\\1>.+)\", self.name), **kwargs)\n\n        def parse_arguments(self, name):\n            \"\"\"Get step arguments.\n\n            :return: `dict` of step arguments\n            \"\"\"\n            return self.regex.match(name).groupdict()\n\n        def is_matching(self, name):\n            \"\"\"Match given name with the step name.\"\"\"\n            return bool(self.regex.match(name))\n\n\n    @given(parsers.parse(\"there are %start% cucumbers\"), target_fixture=\"start_cucumbers\")\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\nStep arguments could be defined without parsing\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nIf you want specify some default values for parameters without parsing them, you could do\n\n.. code-block:: python\n\n    @given(\"I have default defined param\", param_defaults={'default_param': 'foo'}, target_fixture='foo_fixture')\n    def save_fixture(default_param):\n        return default_param\n\n\nStep arguments are fixtures as well!\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nStep arguments are injected into pytest `request` context as normal fixtures with the names equal to the names of the\narguments by default. This opens a number of possibilities:\n\n* you can access step's argument as a fixture in other step function just by mentioning it as an argument (just like any other pytest fixture)\n* if the name of the step argument clashes with existing fixture, it will be overridden by step's argument value; this way you can set/override the value for some fixture deeply inside of the fixture tree in a ad-hoc way by just choosing the proper name for the step argument.\n\nThis behavior is same to:\n\n.. code-block:: python\n\n    @given('I have a \"{foo}\", \"{bar}\", \"{fizz}\", \"{buzz}\" parameters few of which are accepted by wild pattern',\n        params_fixtures_mapping={...: ...})\n    def step(foo, bar, fizz, buzz):\n        ...\n\nBut this behavior could be changed; For example you want to rename some parameters and left other as-is\n\n.. code-block:: python\n\n    @given('I have a \"{foo}\", \"{bar}\", \"{fizz}\", \"{buzz}\" parameters few of which are accepted by wild pattern',\n               params_fixtures_mapping={'foo': 'cool_foo', 'bar': 'nice_bar', ...: ...})\n    def step(cool_foo, nice_bar, fizz, buzz):\n        ...\n\nOr don't inject parameters at all\n\n.. code-block:: python\n\n    @given('I have a \"{foo}\", \"{bar}\", \"{fizz}\", \"{buzz}\" parameters few of which are accepted by wild pattern',\n               params_fixtures_mapping={...: None})\n    def step(foo, bar, fizz, buzz):\n        ...\n\nParameters still could be used in steps, but they are not injected!\nIf you would like to inject just some subset of parameters - set of parameters could be used:\n\n.. code-block:: python\n\n    @given('I have a \"{foo}\", \"{bar}\", \"{fizz}\", \"{buzz}\" parameters few of which are accepted by wild pattern',\n               params_fixtures_mapping={'fizz', 'buzz'})\n    def step(foo, bar, fizz, buzz):\n        ...\n\nOverride fixtures by outgoing step results\n------------------------------------------\n\nDependency injection is not a panacea if you have complex structure of your test setup data. Sometimes there's a need\nsuch a given step which would imperatively change the fixture only for certain test (scenario), while for other tests\nit will stay untouched. To allow this, special parameter `target_fixture` exists in the decorator:\n\n.. code-block:: python\n\n    from pytest_bdd import given\n\n    @pytest.fixture\n    def foo():\n        return \"foo\"\n\n\n    @given(\"I have injecting given\", target_fixture=\"foo\")\n    def injecting_given():\n        return \"injected foo\"\n\n\n    @then('foo should be \"injected foo\"')\n    def foo_is_foo(foo):\n        assert foo == 'injected foo'\n\n\n.. code-block:: gherkin\n\n    Feature: Target fixture\n        Scenario: Test given fixture injection\n            Given I have injecting given\n            Then foo should be \"injected foo\"\n\n\nIn this example existing fixture `foo` will be overridden by given step `I have injecting given` only for scenario it's\nused in.\n\nSometimes it is also useful to let `when` and `then` steps to provide a fixture as well.\nA common use case is when we have to assert the outcome of an HTTP request:\n\n.. code-block:: python\n\n    # test_blog.py\n\n    from pytest_bdd import scenarios, given, when, then\n\n    from my_app.models import Article\n\n    scenarios(\"blog.feature\")\n\n\n    @given(\"there is an article\", target_fixture=\"article\")\n    def there_is_an_article():\n        return Article()\n\n\n    @when(\"I request the deletion of the article\", target_fixture=\"request_result\")\n    def there_should_be_a_new_article(article, http_client):\n        return http_client.delete(f\"/articles/{article.uid}\")\n\n\n    @then(\"the request should be successful\")\n    def article_is_published(request_result):\n        assert request_result.status_code == 200\n\n\n.. code-block:: gherkin\n\n    # blog.feature\n\n    Feature: Blog\n        Scenario: Deleting the article\n            Given there is an article\n\n            When I request the deletion of the article\n\n            Then the request should be successful\n\nAlso it's possible to override multiple fixtures in one step using `target_fixtures` parameter:\n\n.. code-block:: python\n\n    @given(\"some compound fixture\", target_fixtures=[\"fixture_a\",\"fixture_b\"])\n    def __():\n        return \"fixture_a_value\", \"fixture_b_value\"\n\n\nMultiline steps\n---------------\n\n**Note!** This possibility not a part of Gherkin standard and is supported for legacy parser. Let use Gherkin docstrings and custom step matcher.\n\nAs Gherkin, pytest-bdd-ng supports multiline steps\n(aka `PyStrings <http://behat.org/en/v3.0/user_guide/writing_scenarios.html#pystrings>`_).\nBut in much cleaner and powerful way:\n\n.. code-block:: gherkin\n\n    Feature: Multiline steps\n        Scenario: Multiline step using sub indentation\n            Given I have a step with:\n                Some\n                Extra\n                Lines\n            Then the text should be parsed with correct indentation\n\nStep is considered as multiline one, if the **next** line(s) after it's first line, is indented relatively\nto the first line. The step name is then simply extended by adding further lines with newlines.\nIn the example above, the Given step name will be:\n\n.. code-block:: python\n\n    'I have a step with:\\nSome\\nExtra\\nLines'\n\nYou can of course register step using full name (including the newlines), but it seems more practical to use\nstep arguments and capture lines after first line (or some subset of them) into the argument:\n\n.. code-block:: python\n\n    import re\n\n    from pytest_bdd import given, then, scenario, parsers\n\n\n    @scenario(\n        'multiline.feature',\n        'Multiline step using sub indentation',\n    )\n    def test_multiline():\n        pass\n\n\n    @given(parsers.parse(\"I have a step with:\\n{text}\"), target_fixture=\"i_have_text\")\n    def i_have_text(text):\n        return text\n\n\n    @then(\"the text should be parsed with correct indentation\")\n    def text_should_be_correct(i_have_text, text):\n        assert i_have_text == text == 'Some\\nExtra\\nLines'\n\nNote that `then` step definition (`text_should_be_correct`) in this example uses `text` fixture which is provided\nby a `given` step (`i_have_text`) argument with the same name (`text`). This possibility is described in\nthe `Step arguments are fixtures as well!`_ section.\n\n\nLoading whole feature files\n---------------------------\n\nIf you have relatively large set of feature files, it's boring to manually bind scenarios to the tests using the\nscenario decorator. Of course with the manual approach you get all the power to be able to additionally parametrize\nthe test, give the test function a nice name, document it, etc, but in the majority of the cases you don't need that.\nInstead you want to bind `all` scenarios found in the `feature` folder(s) recursively automatically.\n\nScenarios shortcut\n^^^^^^^^^^^^^^^^^^\n\nFirst option is `scenarios` helper.\n\n.. code-block:: python\n\n    from pytest_bdd import scenarios\n\n    # assume 'features' subfolder is in this file's directory\n    scenarios('features')\n\nThat's all you need to do to bind all scenarios found in the `features` folder!\nNote that you can pass multiple paths, and those paths can be either feature files or feature folders.\n\n\n.. code-block:: python\n\n    from pytest_bdd import scenarios\n\n    # pass multiple paths/files\n    scenarios('features', 'other_features/some.feature', 'some_other_features')\n\nBut what if you need to manually bind certain scenario, leaving others to be automatically bound?\nJust write your scenario in a `normal` way, but ensure you do it `AFTER` the call of `scenarios` helper.\n\n\n.. code-block:: python\n\n    from pytest_bdd import scenario, scenarios\n\n    # assume 'features' subfolder is in this file's directory\n    scenarios('features')\n\n    @scenario('features/some.feature', 'Test something')\n    def test_something():\n        pass\n\nIn the example above `test_something` scenario binding will be kept manual, other scenarios found in the `features`\nfolder will be bound automatically.\n\nScenarios registered by `scenario` or `scenarios` are registered once per test module (and re-registered by\nlatest inclusions, so keep it wisely).\n\nBoth `scenario` or `scenarios` could be used as decorators or as operator calls. Also they could be inlined:\n\n.. code-block:: python\n\n    from pytest_bdd import scenario, scenarios\n\n    test_features = scenarios('features', return_test_decorator=False)\n\n    test_specific_scenario = scenario('features/some.feature', 'Test something', return_test_decorator=False)\n\n\nFeatures autoload\n^^^^^^^^^^^^^^^^^\n\nAnother possibility to load features is usage of `--feature-autoload` cli option or `feature_autoload` ini option.\nIn this case feature files (\\*.gherkin or \\*.feature) have to be stored in same structure as origin pytest tests.\nSteps from lower directory layers overriding higher ones if step parsing collision occurs.\n\nTest project layout part could be (pay attention to symlinks):\n\n::\n\n    features/\n        User login.feature\n        User creates order.feature\n    steps/\n        user/\n            given.py\n            when.py\n            then.py\n        order/\n            given.py\n            when.py\n            then.py\n        browser/\n            given.py\n            when.py\n            then.py\n        .../\n    tests/\n        conftest.py\n        integration/\n            conftest.py\n            User login.feature           # -> ../../features/User login.feature\n            User creates order.feature   # -> ../../features/User creates order.feature\n            ...\n        unit/\n            ...\n\ntests/conftest.py:\n\n.. code-block:: python\n\n    from steps.users.given import *\n    from steps.users.when import *\n    from steps.users.then import *\n\n    from steps.order.given import *\n    from steps.order.when import *\n    from steps.order.then import *\n\n    from steps.browser.given import *\n    from steps.browser.when import *\n    from steps.browser.then import *\n\n\ntests/integration/conftest.py:\n\n.. code-block:: python\n\n    # Other steps specific only for integration scenarios\n    ...\n\nScenario outlines\n-----------------\n\nScenarios can be parametrized to cover few cases. In Gherkin the variable\ntemplates are written using corner braces as ``<somevalue>``.\n`Gherkin scenario outlines <http://behat.org/en/v3.0/user_guide/writing_scenarios.html#scenario-outlines>`_ are supported by pytest-bdd\nexactly as it's described in be behave_ docs.\n\nExample:\n\n.. code-block:: gherkin\n\n    Feature: Scenario outlines\n        Scenario Outline: Outlined given, when, then\n            Given there are <start> cucumbers\n            When I eat <eat> cucumbers\n            Then I should have <left> cucumbers\n\n            Examples:\n            | start | eat | left |\n            |  12   |  5  |  7   |\n\npytest-bdd feature file format also supports example tables in different way:\n\n\n.. code-block:: gherkin\n\n    Feature: Scenario outlines\n        Scenario Outline: Outlined given, when, then\n            Given there are <start> cucumbers\n            When I eat <eat> cucumbers\n            Then I should have <left> cucumbers\n\n            Examples: Vertical\n            | start | 12 | 2 |\n            | eat   | 5  | 1 |\n            | left  | 7  | 1 |\n\nThis form allows to have tables with lots of columns keeping the maximum text width predictable without significant\nreadability change.\n\nThe code will look like:\n\n.. code-block:: python\n\n    from pytest_bdd import given, when, then, scenario, parsers\n\n\n    @scenario(\n        \"outline.feature\",\n        \"Outlined given, when, then\",\n    )\n    def test_outlined():\n        pass\n\n\n    @given(parsers.parse(\"there are {start:d} cucumbers\"), target_fixture=\"start_cucumbers\")\n    def start_cucumbers(start):\n        assert isinstance(start, int)\n        return dict(start=start)\n\n\n    @when(parsers.parse(\"I eat {eat:g} cucumbers\"))\n    def eat_cucumbers(start_cucumbers, eat):\n        assert isinstance(eat, float)\n        start_cucumbers[\"eat\"] = eat\n\n\n    @then(parsers.parse(\"I should have {left} cucumbers\"))\n    def should_have_left_cucumbers(start_cucumbers, start, eat, left):\n        assert isinstance(left, str)\n        assert start - eat == int(left)\n        assert start_cucumbers[\"start\"] == start\n        assert start_cucumbers[\"eat\"] == eat\n\nExample code also shows possibility to pass example converters which may be useful if you need parameter types\ndifferent than strings.\n\n\nFeature examples\n^^^^^^^^^^^^^^^^\n\n**Note!** This possibility not a part of Gherkin standard and is supported for legacy parser.\n\nIt's possible to declare example table once for the whole feature, and it will be shared\namong all the scenarios of that feature:\n\n.. code-block:: gherkin\n\n    Feature: Outline\n\n        Examples:\n        | start | eat | left |\n        |  12   |  5  |  7   |\n        |  5    |  4  |  1   |\n\n        Scenario Outline: Eat cucumbers\n            Given there are <start> cucumbers\n            When I eat <eat> cucumbers\n            Then I should have <left> cucumbers\n\n        Scenario Outline: Eat apples\n            Given there are <start> apples\n            When I eat <eat> apples\n            Then I should have <left> apples\n\nFor some more complex case, you might want to parametrize on both levels: feature and scenario.\nThis is allowed as long as parameter names do not clash:\n\n\n.. code-block:: gherkin\n\n    Feature: Outline\n\n        Examples:\n        | start | eat | left |\n        |  12   |  5  |  7   |\n        |  5    |  4  |  1   |\n\n        Scenario Outline: Eat fruits\n            Given there are <start> <fruits>\n            When I eat <eat> <fruits>\n            Then I should have <left> <fruits>\n\n            Examples:\n            | fruits  |\n            | oranges |\n            | apples  |\n\n        Scenario Outline: Eat vegetables\n            Given there are <start> <vegetables>\n            When I eat <eat> <vegetables>\n            Then I should have <left> <vegetables>\n\n            Examples:\n            | vegetables |\n            | carrots    |\n            | tomatoes   |\n\nTo not repeat steps as in example above you could want store your data in sequent Examples sections:\n\n\n.. code-block:: gherkin\n\n    Feature: Outline\n\n        Examples:\n        | start | eat | left |\n        |  12   |  5  |  7   |\n        |  5    |  4  |  1   |\n\n        Scenario Outline: Eat food\n            Given there are <start> <food>\n            When I eat <eat> <food>\n            Then I should have <left> <food>\n\n            Examples: Fruits\n            | food    |\n            | oranges |\n            | apples  |\n\n            Examples: Vegetables\n            | food       |\n            | carrots    |\n            | tomatoes   |\n\n\nOrganizing your scenarios\n-------------------------\n\nThe more features and scenarios you have, the more important becomes the question about their organization.\nThe things you can do (and that is also a recommended way):\n\n* organize your feature files in the folders by semantic groups:\n\n::\n\n    features\n    â”‚\n    â”œâ”€â”€frontend\n    â”‚  â”‚\n    â”‚  â””â”€â”€auth\n    â”‚     â”‚\n    â”‚     â””â”€â”€login.feature\n    â””â”€â”€backend\n       â”‚\n       â””â”€â”€auth\n          â”‚\n          â””â”€â”€login.feature\n\nThis looks fine, but how do you run tests only for certain feature?\nAs pytest-bdd uses pytest, and bdd scenarios are actually normal tests. But test files\nare separate from the feature files, the mapping is up to developers, so the test files structure can look\ncompletely different:\n\n::\n\n    tests\n    â”‚\n    â””â”€â”€functional\n       â”‚\n       â””â”€â”€test_auth.py\n          â”‚\n          â”” \"\"\"Authentication tests.\"\"\"\n            from pytest_bdd import scenario\n\n            @scenario('frontend/auth/login.feature')\n            def test_logging_in_frontend():\n                pass\n\n            @scenario('backend/auth/login.feature')\n            def test_logging_in_backend():\n                pass\n\n\nFor picking up tests to run we can use\n`tests selection <http://pytest.org/latest/usage.html#specifying-tests-selecting-tests>`_ technique. The problem is that\nyou have to know how your tests are organized, knowing only the feature files organization is not enough.\n`cucumber tags <https://github.com/cucumber/cucumber/wiki/Tags>`_ introduce standard way of categorizing your features\nand scenarios, which pytest-bdd supports. For example, we could have:\n\n.. code-block:: gherkin\n\n    @login @backend\n    Feature: Login\n\n      @successful\n      Scenario: Successful login\n\n\npytest-bdd uses `pytest markers <http://pytest.org/latest/mark.html#mark>`_ as a `storage` of the tags for the given\nscenario test, so we can use standard test selection:\n\n.. code-block:: bash\n\n    pytest -m \"backend and login and successful\"\n\nThe feature and scenario markers are not different from standard pytest markers, and the ``@`` symbol is stripped out\nautomatically to allow test selector expressions. If you want to have bdd-related tags to be distinguishable from the\nother test markers, use prefix like `bdd`.\nNote that if you use pytest `--strict` option, all bdd tags mentioned in the feature files should be also in the\n`markers` setting of the `pytest.ini` config. Also for tags please use names which are python-compatible variable\nnames, eg starts with a non-number, underscore alphanumeric, etc. That way you can safely use tags for tests filtering.\n\nYou can customize how tags are converted to pytest marks by implementing the\n``pytest_bdd_convert_tag_to_marks`` hook and returning list of resulting marks from it:\n\n.. code-block:: python\n\n   def pytest_bdd_convert_tag_to_marks(feature, scenario, tag):\n       if tag == 'todo':\n           marker = pytest.mark.skip(reason=\"Not implemented yet\")\n           return [marker]\n\n\nTest setup\n----------\n\nTest setup is implemented within the Given section. Even though these steps\nare executed imperatively to apply possible side-effects, pytest-bdd is trying\nto benefit of the PyTest fixtures which is based on the dependency injection\nand makes the setup more declarative style.\n\n.. code-block:: python\n\n    @given(\"I have a beautiful article\", target_fixture=\"article\")\n    def article():\n        return Article(is_beautiful=True)\n\nThe target PyTest fixture \"article\" gets the return value and any other step can depend on it.\n\n.. code-block:: gherkin\n\n    Feature: The power of PyTest\n        Scenario: Symbolic name across steps\n            Given I have a beautiful article\n            When I publish this article\n\nWhen step is referring the article to publish it.\n\n.. code-block:: python\n\n    @when(\"I publish this article\")\n    def publish_article(article):\n        article.publish()\n\n\nMany other BDD toolkits operate a global context and put the side effects there.\nThis makes it very difficult to implement the steps, because the dependencies\nappear only as the side-effects in the run-time and not declared in the code.\nThe publish article step has to trust that the article is already in the context,\nhas to know the name of the attribute it is stored there, the type etc.\n\nIn pytest-bdd you just declare an argument of the step function that it depends on\nand the PyTest will make sure to provide it.\n\nStill side effects can be applied in the imperative style by design of the BDD.\n\n.. code-block:: gherkin\n\n    Feature: News website\n        Scenario: Publishing an article\n            Given I have a beautiful article\n            And my article is published\n\nFunctional tests can reuse your fixture libraries created for the unit-tests and upgrade\nthem by applying the side effects.\n\n.. code-block:: python\n\n    @pytest.fixture\n    def article():\n        return Article(is_beautiful=True)\n\n\n    @given(\"I have a beautiful article\")\n    def i_have_a_beautiful_article(article):\n        pass\n\n\n    @given(\"my article is published\")\n    def published_article(article):\n        article.publish()\n        return article\n\n\nThis way side-effects were applied to our article and PyTest makes sure that all\nsteps that require the \"article\" fixture will receive the same object. The value\nof the \"published_article\" and the \"article\" fixtures is the same object.\n\nFixtures are evaluated only once within the PyTest scope and their values are cached.\n\n\nBackgrounds\n-----------\n\nIt's often the case that to cover certain feature, you'll need multiple scenarios. And it's logical that the\nsetup for those scenarios will have some common parts (if not equal). For this, there are `backgrounds`.\npytest-bdd implements `Gherkin backgrounds <http://behat.org/en/v3.0/user_guide/writing_scenarios.html#backgrounds>`_ for\nfeatures.\n\n.. code-block:: gherkin\n\n    Feature: Multiple site support\n\n      Background:\n        Given a global administrator named \"Greg\"\n        And a blog named \"Greg's anti-tax rants\"\n        And a customer named \"Wilson\"\n        And a blog named \"Expensive Therapy\" owned by \"Wilson\"\n\n      Scenario: Wilson posts to his own blog\n        Given I am logged in as Wilson\n        When I try to post to \"Expensive Therapy\"\n        Then I should see \"Your article was published.\"\n\n      Scenario: Greg posts to a client's blog\n        Given I am logged in as Greg\n        When I try to post to \"Expensive Therapy\"\n        Then I should see \"Your article was published.\"\n\nIn this example, all steps from the background will be executed before all the scenario's own given\nsteps, adding possibility to prepare some common setup for multiple scenarios in a single feature.\nAbout background best practices, please read\n`here <https://github.com/cucumber/cucumber/wiki/Background#good-practices-for-using-background>`_.\n\n.. NOTE:: There is only step \"Given\" should be used in \"Background\" section,\n          steps \"When\" and \"Then\" are prohibited, because their purpose are\n          related to actions and consuming outcomes, that is conflict with\n          \"Background\" aim - prepare system for tests or \"put the system\n          in a known state\" as \"Given\" does it.\n          The statement above is applied for strict Gherkin mode, which is\n          enabled by default.\n\n\nReusing fixtures\n----------------\n\nSometimes scenarios define new names for the existing fixture that can be\ninherited (reused). For example, if we have pytest fixture:\n\n\n.. code-block:: python\n\n    @pytest.fixture\n    def article():\n       \"\"\"Test article.\"\"\"\n       return Article()\n\n\nThen this fixture can be reused with other names using given():\n\n\n.. code-block:: python\n\n    @given('I have beautiful article')\n    def i_have_an_article(article):\n       \"\"\"I have an article.\"\"\"\n\n\nReusing steps\n-------------\n\nIt is possible to define some common steps in the parent conftest.py and\nsimply expect them in the child test file.\n\ncommon_steps.feature:\n\n.. code-block:: gherkin\n\n    Scenario: All steps are declared in the conftest\n        Given I have a bar\n        Then bar should have value \"bar\"\n\nconftest.py:\n\n.. code-block:: python\n\n    from pytest_bdd import given, then\n\n\n    @given(\"I have a bar\", target_fixture=\"bar\")\n    def bar():\n        return \"bar\"\n\n\n    @then('bar should have value \"bar\"')\n    def bar_is_bar(bar):\n        assert bar == \"bar\"\n\ntest_common.py:\n\n.. code-block:: python\n\n    @scenario(\"common_steps.feature\", \"All steps are declared in the conftest\")\n    def test_conftest():\n        pass\n\nThere are no definitions of the steps in the test file. They were\ncollected from the parent conftest.py.\n\n\nDefault steps\n-------------\n\nHere is the list of steps that are implemented inside of the pytest-bdd:\n\ngiven\n    * trace - enters the `pdb` debugger via `pytest.set_trace()`\nwhen\n    * trace - enters the `pdb` debugger via `pytest.set_trace()`\nthen\n    * trace - enters the `pdb` debugger via `pytest.set_trace()`\n\n\nFeature file paths\n------------------\n\nBy default, pytest-bdd will use current module's path as base path for finding feature files, but this behaviour can be changed in the pytest configuration file (i.e. `pytest.ini`, `tox.ini` or `setup.cfg`) by declaring the new base path in the `bdd_features_base_dir` key. The path is interpreted as relative to the working directory when starting pytest.\nYou can also override features base path on a per-scenario basis, in order to override the path for specific tests.\n\npytest.ini:\n\n.. code-block:: ini\n\n    [pytest]\n    bdd_features_base_dir = features/\n\ntests/test_publish_article.py:\n\n.. code-block:: python\n\n    from pytest_bdd import scenario\n\n\n    @scenario(\"foo.feature\", \"Foo feature in features/foo.feature\")\n    def test_foo():\n        pass\n\n\n    @scenario(\n        \"foo.feature\",\n        \"Foo feature in tests/local-features/foo.feature\",\n        features_base_dir=\"./local-features/\",\n    )\n    def test_foo_local():\n        pass\n\n\nThe `features_base_dir` parameter can also be passed to the `@scenario` decorator.\n\n\nAvoid retyping the feature file name\n------------------------------------\n\nIf you want to avoid retyping the feature file name when defining your scenarios in a test file, use ``functools.partial``.\nThis will make your life much easier when defining multiple scenarios in a test file. For example:\n\ntest_publish_article.py:\n\n.. code-block:: python\n\n    from functools import partial\n\n    import pytest_bdd\n\n\n    scenario = partial(pytest_bdd.scenario, \"/path/to/publish_article.feature\")\n\n\n    @scenario(\"Publishing the article\")\n    def test_publish():\n        pass\n\n\n    @scenario(\"Publishing the article as unprivileged user\")\n    def test_publish_unprivileged():\n        pass\n\n\nYou can learn more about `functools.partial <http://docs.python.org/2/library/functools.html#functools.partial>`_\nin the Python docs.\n\n\nLocalization\n------------\n\npytest-bdd supports all localizations which Gherkin `does <https://cucumber.io/docs/gherkin/languages/>`_\n\n\nHooks\n-----\n\npytest-bdd exposes several `pytest hooks <http://pytest.org/latest/plugins.html#well-specified-hooks>`_\nwhich might be helpful building useful reporting, visualization, etc on top of it:\n\n* pytest_bdd_before_scenario(request, feature, scenario) - Called before scenario is executed\n* pytest_bdd_run_scenario(request, feature, scenario) - Execution scenario protocol\n* pytest_bdd_after_scenario(request, feature, scenario) - Called after scenario is executed\n  (even if one of steps has failed)\n* pytest_bdd_before_step(request, feature, scenario, step, step_func) - Called before step function\n  is executed and it's arguments evaluated\n* pytest_bdd_run_step(request, feature, scenario, step, previous_step) - Execution step protocol\n* pytest_bdd_before_step_call(request, feature, scenario, step, step_func, step_func_args) - Called before step\n  function is executed with evaluated arguments\n* pytest_bdd_after_step(request, feature, scenario, step, step_func, step_func_args) - Called after step function\n  is successfully executed\n* pytest_bdd_step_error(request, feature, scenario, step, step_func, step_func_args, exception) - Called when step\n  function failed to execute\n* pytest_bdd_step_func_lookup_error(request, feature, scenario, step, exception) - Called when step lookup failed\n* pytest_bdd_match_step_definition_to_step(request, feature, scenario, step, previous_step) - Called to match step to step definition\n* pytest_bdd_get_step_caller(request, feature, scenario, step, step_func, step_func_args, step_definition) - Called to get step caller. For example could be used to make steps async\n* pytest_bdd_get_step_dispatcher(request, feature, scenario) - Provide alternative approach to execute scenario steps\n\nFixtures\n--------\n\npytest-bdd exposes several plugin fixtures to give more testing flexibility\n\n* bdd_example - The current scenario outline parametrization.\n* step_registry - Contains registry of all user-defined steps\n* step_matcher- Contains matcher to help find step definition for selected step of scenario\n* steps_left - Current scenario steps left to execute; Allow inject steps to execute:\n\n.. code-block:: python\n\n    from collections import deque\n\n    from pytest_bdd.model import UserStep\n    from pytest_bdd import when\n\n    @when('I inject step \"{keyword}\" \"{step_text}')\n    def inject_step(steps_left: deque, keyword, step_text, scenario):\n        steps_left.appendleft(UserStep(text=step_text, keyword=keyword, scenario=scenario))\n\nStructBDD\n---------\nGherkin itself isn't a perfect tool to describe complex Data Driven Scenarios with alternative paths to execute test.\nFor example it doesn't support next things:\n\n* Few backgrounds per scenario\n* Alternative flows for scenario to setup same state\n* Alternative flows to describe same behavior defined by different steps\n* Usage of parameters inside Backgrounds\n* Joining of parameter tables, so full Cartesian product of parameters has to be listed in Examples\n* Example tables on different scenario levels\n\nFor such scenarios StructBDD DSL was developed. It independent on underlying data format, but supports most common\nformats for DSL development: YAML, Hocon, TOML, JSON5, HJSON out the box.\n\nSteps could be defined as usual, and scenarios have different options. Let see.\n\nsteps.bdd.yaml\n\n.. code-block:: yaml\n\n    Name: Steps are executed one by one\n    Description: |\n        Steps are executed one by one. Given and When sections\n        are not mandatory in some cases.\n    Steps:\n        - Step:\n            Name: Executed step by step\n            Description: Scenario description\n            Steps:\n                - I have a foo fixture with value \"foo\"\n                - And: there is a list\n                - When: I append 1 to the list\n                - Step:\n                    Action: I append 2 to the list\n                    Type: And\n                - Alternative:\n                    - Step:\n                        Steps:\n                            - And: I append 3 to the list\n                            - Then: foo should have value \"foo\"\n                            - But: the list should be [1, 2, 3]\n                    - Step:\n                        Steps:\n                            - And: I append 4 to the list\n                            - Then: foo should have value \"foo\"\n                            - But: the list should be [1, 2, 4]\n\n\nAlternative steps produce separate test launches for every of flows. If alternative steps are defined on different\nlevels - there would be Cartesian product of tests for every alternative step.\n\nScenario could be imported as usual, but with specified parser:\n\n.. code-block:: python\n\n    from textwrap import dedent\n    from pytest_bdd import given, when, then, scenario\n    from pytest_bdd.parser import StructBDDParser\n\n    kind = StructBDDParser.KIND.YAML\n\n    @scenario(f\"steps.bdd.{kind}\", \"Executed step by step\", parser=StructBDDParser(kind=kind))\n    def test_steps(feature):\n        pass\n\n\nAnother option is to inject built scenario directly:\n\n.. code-block:: python\n\n    from pytest_bdd.struct_bdd.model import Step, Table\n\n    step = Step(\n        name=\"Examples are substituted\",\n        steps=[\n            Step(type='Given', action='I have <have> cucumbers'),\n            Step(type='And', action='I eat <eat> cucumbers'),\n            Step(type='Then', action='I have <left> cucumbers')\n        ],\n        examples=[\n            Table(\n                parameters=['have', 'eat', 'left'],\n                values=[\n                    ['12', 5, 7.0],\n                    [\"8.0\", 3.0, \"5\"]\n                ]\n            )\n        ]\n    )\n\n    step.inject_test()\n\nThere is also an option to build Step from dict(and use your own file format/preprocessor)\n\n.. code-block:: python\n\n    from pytest_bdd.struct_bdd.model import Step\n\n    step = Step.from_dict(\n            dict(\n                Name=\"Examples are substituted\",\n                Steps=[\n                    dict(Given='I have <have> cucumbers'),\n                    dict(And='I eat <eat> cucumbers'),\n                    dict(Then='I have <left> cucumbers')\n                ],\n                Examples=[\n                    dict(\n                        Table=dict(\n                            Parameters=['have', 'eat', 'left'],\n                            Values=[\n                                ['12', 5, 7.0],\n                                [\"8.0\", 3.0, \"5\"]\n                            ]\n                        )\n                    )\n                ]\n            )\n        )\n\n    @step.build_test_decorator()\n    def test(feature:Feature, scenario):\n        assert feature.name == \"Examples are substituted\"\n\n\nExample tables could be joined:\n\n.. code-block:: yaml\n\n    Tags:\n      - TopTag\n    Name: StepName\n    Action: \"Do first <HeaderA>, <HeaderB>, <HeaderC>\"\n    Examples:\n      - Join:\n        - Table:\n            Tags:\n              - ExampleTagA\n            Parameters:\n              [ HeaderA, HeaderB ]\n            Values:\n              - [ A1, B1]\n              - [ A2, B2]\n        - Table:\n            Tags:\n              - ExampleTagB\n            Parameters:\n              [ HeaderB, HeaderC ]\n            Values:\n              - [ B1, C1 ]\n              - [ B2, C2 ]\n              - [ B3, C3 ]\n    Steps: []\n\nInstall StructBDD:\n\n::\n\n    pip install pytest-bdd-ng[struct_bdd]\n\nReporting\n---------\n\nIt's important to have nice reporting out of your bdd tests. Cucumber introduced some kind of standard for\n`json format <https://www.relishapp.com/cucumber/cucumber/docs/json-output-formatter>`_\nwhich can be used for, for example, by `this <https://plugins.jenkins.io/cucumber-testresult-plugin/>`_ Jenkins\nplugin.\n\nTo have an output in json format:\n\n::\n\n    pytest --cucumberjson=<path to json report>\n\nThis will output an expanded (meaning scenario outlines will be expanded to several scenarios) cucumber format.\n\nTo enable gherkin-formatted output on terminal, use\n\n::\n\n    pytest --gherkin-terminal-reporter\n\nAllure reporting is also in place https://docs.qameta.io/allure and based on\n`allure-pytest` https://pypi.org/project/allure-pytest/ plugin. Usage is same\nTo install plugin\n\n::\n\n    pip install pytest-bdd-ng[allure]\n\n\nTest code generation helpers\n----------------------------\n\nFor newcomers it's sometimes hard to write all needed test code without being frustrated.\nTo simplify their life, simple code generator was implemented. It allows to create fully functional\nbut of course empty tests and step definitions for given a feature file.\nIt's done as a separate console script provided by pytest-bdd package:\n\n::\n\n    pytest-bdd generate <feature file name> .. <feature file nameN>\n\nIt will print the generated code to the standard output so you can easily redirect it to the file:\n\n::\n\n    pytest-bdd generate features/some.feature > tests/functional/test_some.py\n\n\nAdvanced code generation\n------------------------\n\nFor more experienced users, there's smart code generation/suggestion feature. It will only generate the\ntest code which is not yet there, checking existing tests and step definitions the same way it's done during the\ntest execution. The code suggestion tool is called via passing additional pytest arguments:\n\n::\n\n    pytest --generate-missing --feature features tests/functional\n\nThe output will be like:\n\n::\n\n    ============================= test session starts ==============================\n    platform linux2 -- Python 2.7.6 -- py-1.4.24 -- pytest-2.6.2\n    plugins: xdist, pep8, cov, cache, bdd, bdd, bdd\n    collected 2 items\n\n    Scenario is not bound to any test: \"Code is generated for scenarios which are not bound to any tests\" in feature \"Missing code generation\" in /tmp/pytest-552/testdir/test_generate_missing0/tests/generation.feature\n    --------------------------------------------------------------------------------\n\n    Step is not defined: \"I have a custom bar\" in scenario: \"Code is generated for scenario steps which are not yet defined(implemented)\" in feature \"Missing code generation\" in /tmp/pytest-552/testdir/test_generate_missing0/tests/generation.feature\n    --------------------------------------------------------------------------------\n    Please place the code above to the test file(s):\n\n    @scenario('tests/generation.feature', 'Code is generated for scenarios which are not bound to any tests')\n    def test_Code_is_generated_for_scenarios_which_are_not_bound_to_any_tests():\n        \"\"\"Code is generated for scenarios which are not bound to any tests.\"\"\"\n\n\n    @given(\"I have a custom bar\")\n    def I_have_a_custom_bar():\n        \"\"\"I have a custom bar.\"\"\"\n\nAs as side effect, the tool will validate the files for format errors, also some of the logic bugs, for example the\nordering of the types of the steps.\n\n\nLicense\n-------\n\nThis software is licensed under the `MIT license <http://en.wikipedia.org/wiki/MIT_License>`_.\n\nÂ© 2013-2022 Oleg Pidsadnyi, Anatoly Bubenkov, Konstantin Goloveshko and others\n\nAuthors\n=======\n\n`Oleg Pidsadnyi <oleg.pidsadnyi@gmail.com>`_\n    original idea, initial implementation and further improvements\n`Anatoly Bubenkov <bubenkoff@gmail.com>`_\n    key implementation idea and realization, many new features and improvements\n\nThese people have contributed to `pytest-bdd`, in alphabetical order:\n\n* `Adam Coddington <me@adamcoddington.net>`_\n* `Albert-Jan Nijburg <albertjan@curit.com>`_\n* `Alessio Bogon <youtux>`_\n* `Andrey Makhnach <andrey.makhnach@gmail.com>`_\n* `Aron Curzon <curzona@gmail.com>`_\n* `Dmitrijs Milajevs <dimazest@gmail.com>`_\n* `Dmitry Kolyagin <pauk-slon>`_\n* `Florian Bruhin <me@the-compiler.org>`_\n* `Floris Bruynooghe <flub@devork.be>`_\n* `Harro van der Klauw <hvdklauw@gmail.com>`_\n* `Hugo van Kemenade <https://github.com/hugovk>`_\n* `Konstantin Goloveshko <kostya.goloveshko@gmail.com>`_\n* `Laurence Rowe <l@lrowe.co.uk>`_\n* `Leonardo Santagada <santagada@github.com>`_\n* `Milosz Sliwinski <sliwinski-milosz>`_\n* `Michiel Holtkamp <github@elfstone.nl>`_\n* `Robin Pedersen <ropez@github.com>`_\n* `Sergey Kraynev <sergejyit@gmail.com>`_\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/elchupanebrej/pytest-bdd-ng",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-bdd-ng",
    "package_url": "https://pypi.org/project/pytest-bdd-ng/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-bdd-ng/",
    "project_urls": {
      "Homepage": "https://github.com/elchupanebrej/pytest-bdd-ng"
    },
    "release_url": "https://pypi.org/project/pytest-bdd-ng/1.2.3/",
    "requires_dist": [
      "attrs",
      "gherkin-official (>=24)",
      "Mako",
      "marshmallow",
      "marshmallow-polyfield",
      "ordered-set",
      "packaging",
      "parse",
      "parse-type (>=0.6.0)",
      "py",
      "pytest (>=5.0)",
      "setuptools (>=58)",
      "importlib-metadata ; python_version < \"3.10.0\"",
      "typing-extensions ; python_version < \"3.10.0\"",
      "six (>=1.16) ; python_version ~= \"3.8\"",
      "allure-python-commons ; extra == 'allure'",
      "allure-pytest ; extra == 'allure'",
      "hjson ; extra == 'struct_bdd'",
      "json5 ; extra == 'struct_bdd'",
      "pyhocon ; extra == 'struct_bdd'",
      "tomli ; extra == 'struct_bdd'",
      "PyYAML ; extra == 'struct_bdd'",
      "types-PyYAML ; extra == 'struct_bdd'",
      "execnet ; extra == 'test'",
      "packaging ; extra == 'test'",
      "PyHamcrest ; extra == 'test'",
      "allure-python-commons-test ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "BDD for pytest",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15326037,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82fdf9df6c704591905656c19cc6895d88de59597a2e9a061c0371b2b084cb05",
          "md5": "c442798c31fefcd8e56813b07761c244",
          "sha256": "41d731feb04c78b446f60059e68bf22670778c96907dd40eff2fa3db9e54394b"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c442798c31fefcd8e56813b07761c244",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 56524,
        "upload_time": "2022-05-24T14:09:05",
        "upload_time_iso_8601": "2022-05-24T14:09:05.580879Z",
        "url": "https://files.pythonhosted.org/packages/82/fd/f9df6c704591905656c19cc6895d88de59597a2e9a061c0371b2b084cb05/pytest_bdd_ng-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f095901d4724e200e190475ca1ad5de21d0da6072d06cf3ddebb8c85fcc7583",
          "md5": "cf1f806e78ce3755cb80b307191f1d48",
          "sha256": "ff7911230e63ff552e69f2d24daf4e8184fb7235f72a02984c2a02c4a03a0b8c"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf1f806e78ce3755cb80b307191f1d48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 78421,
        "upload_time": "2022-05-24T14:09:09",
        "upload_time_iso_8601": "2022-05-24T14:09:09.069845Z",
        "url": "https://files.pythonhosted.org/packages/4f/09/5901d4724e200e190475ca1ad5de21d0da6072d06cf3ddebb8c85fcc7583/pytest-bdd-ng-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef2139ad7115d81e1080d6b50842b5bdcdfb51f2049f9e0e03ba99a00502de0f",
          "md5": "69a6ae51f0f7a2854f539bf6545c275e",
          "sha256": "43f6e7f6e2667ece7b0b65b346e7fa66a11d2f3c6be3580e768ee958bd039b20"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69a6ae51f0f7a2854f539bf6545c275e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 56495,
        "upload_time": "2022-05-24T17:17:13",
        "upload_time_iso_8601": "2022-05-24T17:17:13.331242Z",
        "url": "https://files.pythonhosted.org/packages/ef/21/39ad7115d81e1080d6b50842b5bdcdfb51f2049f9e0e03ba99a00502de0f/pytest_bdd_ng-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7823f06305491de98634a01710a73b47aa23fddd9d7c5fb70ae77928bcf81539",
          "md5": "c31510cdaf01e202e41ee0abd79e2fcb",
          "sha256": "f048e765b56ed4d9c9bbaf0e8bb820bea9cde5c9a04ac34e4cc52b64e1c7161c"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c31510cdaf01e202e41ee0abd79e2fcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 77907,
        "upload_time": "2022-05-24T17:17:15",
        "upload_time_iso_8601": "2022-05-24T17:17:15.903604Z",
        "url": "https://files.pythonhosted.org/packages/78/23/f06305491de98634a01710a73b47aa23fddd9d7c5fb70ae77928bcf81539/pytest-bdd-ng-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9887c9f2fb1dacf3cf496399f25e61b8dd6c1f472196800cbdd27d372bdb8884",
          "md5": "ebf3c1b15b894174f76944061ce27e2a",
          "sha256": "893da502506eeae8f31f24d362f78cf8acfa945c1c80db4e832baa28d2f1c51e"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebf3c1b15b894174f76944061ce27e2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 65829,
        "upload_time": "2022-05-25T14:18:00",
        "upload_time_iso_8601": "2022-05-25T14:18:00.042475Z",
        "url": "https://files.pythonhosted.org/packages/98/87/c9f2fb1dacf3cf496399f25e61b8dd6c1f472196800cbdd27d372bdb8884/pytest_bdd_ng-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7695d430ebcfe71fb0570e682395ef86fdc2df5893d142ce47b64dc0b16dc8f0",
          "md5": "110942bde7948b5fabc1daf825e13cc8",
          "sha256": "428789fc13c3b96cd9681560a23cc6e246a46ea220e76d7a7b0d49c5e36ccc71"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "110942bde7948b5fabc1daf825e13cc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 88055,
        "upload_time": "2022-05-25T14:18:02",
        "upload_time_iso_8601": "2022-05-25T14:18:02.854770Z",
        "url": "https://files.pythonhosted.org/packages/76/95/d430ebcfe71fb0570e682395ef86fdc2df5893d142ce47b64dc0b16dc8f0/pytest-bdd-ng-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0968c32ec70f1dee2fa3aed57f76957379067357d4fa796669f9be5eff72a30",
          "md5": "29d494c7bb8c572942035c1e5cbe227b",
          "sha256": "1e56b5c664e4148397fa2c6bd4c3f165e0fccf028089220f7cfe6e0b8a6b1acb"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29d494c7bb8c572942035c1e5cbe227b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 65984,
        "upload_time": "2022-05-25T18:31:41",
        "upload_time_iso_8601": "2022-05-25T18:31:41.374065Z",
        "url": "https://files.pythonhosted.org/packages/d0/96/8c32ec70f1dee2fa3aed57f76957379067357d4fa796669f9be5eff72a30/pytest_bdd_ng-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e436f2fbe6a78355c7453b9cc2974b8790d8db7134db1d2c83099546e86c444",
          "md5": "bc278317130b90680f83ff5aa1473663",
          "sha256": "bf090125e6c5a50449a6b0b12077d5726cc18b49daf21645df541a6a8e7dd744"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bc278317130b90680f83ff5aa1473663",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 88220,
        "upload_time": "2022-05-25T18:31:44",
        "upload_time_iso_8601": "2022-05-25T18:31:44.285224Z",
        "url": "https://files.pythonhosted.org/packages/6e/43/6f2fbe6a78355c7453b9cc2974b8790d8db7134db1d2c83099546e86c444/pytest-bdd-ng-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ea1405a6307ae1cf895a27d0bba2d81f12923562b327cf0d42c6e2c8e525975",
          "md5": "e080e5764dd925660f8838fcff9cee59",
          "sha256": "124c58653c997d4f2884ddeeb6ccf82eea5234c941904f3cd9d81d9be8ae5b43"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e080e5764dd925660f8838fcff9cee59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 66021,
        "upload_time": "2022-07-14T13:19:58",
        "upload_time_iso_8601": "2022-07-14T13:19:58.472990Z",
        "url": "https://files.pythonhosted.org/packages/1e/a1/405a6307ae1cf895a27d0bba2d81f12923562b327cf0d42c6e2c8e525975/pytest_bdd_ng-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd4f210a3fec55df5bfb068ba64a27d1aa80ed48d3b89dfa49781e6a1a926632",
          "md5": "e84784f76aa75bede920c3c35c776059",
          "sha256": "eec2695a5462cab8b64a8e2a6611d4a1ff8db0d3d7b7cb0ea7308560de175a0f"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e84784f76aa75bede920c3c35c776059",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 88251,
        "upload_time": "2022-07-14T13:20:01",
        "upload_time_iso_8601": "2022-07-14T13:20:01.594061Z",
        "url": "https://files.pythonhosted.org/packages/dd/4f/210a3fec55df5bfb068ba64a27d1aa80ed48d3b89dfa49781e6a1a926632/pytest-bdd-ng-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63eb69bd8a3805d56e7e8f3a2069fc20215c9316c1bfbc9aafae3b27daf88bc6",
          "md5": "5496bf7643eab44c1272b64f2e2de9ed",
          "sha256": "f425b7ca55862f9221d8b217f22108e451dd8903ef1564613b28e16437080a19"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5496bf7643eab44c1272b64f2e2de9ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 66480,
        "upload_time": "2022-07-14T22:55:02",
        "upload_time_iso_8601": "2022-07-14T22:55:02.104143Z",
        "url": "https://files.pythonhosted.org/packages/63/eb/69bd8a3805d56e7e8f3a2069fc20215c9316c1bfbc9aafae3b27daf88bc6/pytest_bdd_ng-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e0e4ea16089fc706412305af3498639dd8abe0bc6250acc053c7042472677cd",
          "md5": "645e62ef7942a799acc23a100b07f83d",
          "sha256": "dca9bbefd290039d98e5fbf95e030dddf7b49f0890c3f061683a558b9647f0d7"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "645e62ef7942a799acc23a100b07f83d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 89063,
        "upload_time": "2022-07-14T22:55:05",
        "upload_time_iso_8601": "2022-07-14T22:55:05.448658Z",
        "url": "https://files.pythonhosted.org/packages/3e/0e/4ea16089fc706412305af3498639dd8abe0bc6250acc053c7042472677cd/pytest-bdd-ng-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cf1ee150c50f8924d68e2082432f7c7ec51afbde777539121e0fc322d5110c8",
          "md5": "a4af0e31fd8dfa41101958309e12444f",
          "sha256": "5b5a1cedaf84248a5630130ca3846c2d13d5397046dc6a7c7010e715ffb8db27"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4af0e31fd8dfa41101958309e12444f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 66516,
        "upload_time": "2022-07-15T08:02:37",
        "upload_time_iso_8601": "2022-07-15T08:02:37.281441Z",
        "url": "https://files.pythonhosted.org/packages/3c/f1/ee150c50f8924d68e2082432f7c7ec51afbde777539121e0fc322d5110c8/pytest_bdd_ng-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dabef7991048d97191f8ae87c55c5619ed0ef936208b38bb6210e68ffc0f374f",
          "md5": "d0101e45cd00cde2d6e37c60c410c960",
          "sha256": "9b3e0dd3975a4d3ac053a184b7656feac69f7b4e39552c1d4865445b09896acf"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d0101e45cd00cde2d6e37c60c410c960",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 89148,
        "upload_time": "2022-07-15T08:02:40",
        "upload_time_iso_8601": "2022-07-15T08:02:40.133114Z",
        "url": "https://files.pythonhosted.org/packages/da/be/f7991048d97191f8ae87c55c5619ed0ef936208b38bb6210e68ffc0f374f/pytest-bdd-ng-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab23233aae2a51a71719ec599826da25a436afd21ec7393d5ceff6645105ca6f",
          "md5": "29be9ce8b0a5a5c13d7a8b4fd4096954",
          "sha256": "aad892fcf2c171ab45107e1aaa98490333e63bb4996e6ee33c59bbbbb0ee23a6"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29be9ce8b0a5a5c13d7a8b4fd4096954",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 67143,
        "upload_time": "2022-07-24T01:44:31",
        "upload_time_iso_8601": "2022-07-24T01:44:31.039486Z",
        "url": "https://files.pythonhosted.org/packages/ab/23/233aae2a51a71719ec599826da25a436afd21ec7393d5ceff6645105ca6f/pytest_bdd_ng-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "243677f840314c706bd8fc1e962c023e420e43ab077d485a7aa73374d4fb3dd0",
          "md5": "d8819124ac372829ae8436dae21509a5",
          "sha256": "8e2ebb75d5243d08f58365ebcebaf29ab89db4067e85d6e7a8fae3853cd94ac4"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d8819124ac372829ae8436dae21509a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 90111,
        "upload_time": "2022-07-24T01:44:33",
        "upload_time_iso_8601": "2022-07-24T01:44:33.820459Z",
        "url": "https://files.pythonhosted.org/packages/24/36/77f840314c706bd8fc1e962c023e420e43ab077d485a7aa73374d4fb3dd0/pytest-bdd-ng-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a831bfe637fea8189a32e2d3779ddcd10164ba9022914999fb829125021980ee",
          "md5": "10e8e88ae0890ea54ffa06479de2b448",
          "sha256": "64b575e8a5843090872f1917a29383f173e14c83dc02ce6e4ff5faac8002f530"
        },
        "downloads": -1,
        "filename": "pytest_bdd_ng-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10e8e88ae0890ea54ffa06479de2b448",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 68078,
        "upload_time": "2022-10-06T16:47:29",
        "upload_time_iso_8601": "2022-10-06T16:47:29.842009Z",
        "url": "https://files.pythonhosted.org/packages/a8/31/bfe637fea8189a32e2d3779ddcd10164ba9022914999fb829125021980ee/pytest_bdd_ng-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38491b109e8dd0ece5490f72a5b00f0473f754c9054676db1fa61b738804d71b",
          "md5": "744ef373cf2241dfa85aaadeadd3764f",
          "sha256": "a7e621af9b08f761b41c576eb6c57eb21c4f04f0ed8961efab059efe89b04922"
        },
        "downloads": -1,
        "filename": "pytest-bdd-ng-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "744ef373cf2241dfa85aaadeadd3764f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 89482,
        "upload_time": "2022-10-06T16:47:32",
        "upload_time_iso_8601": "2022-10-06T16:47:32.918611Z",
        "url": "https://files.pythonhosted.org/packages/38/49/1b109e8dd0ece5490f72a5b00f0473f754c9054676db1fa61b738804d71b/pytest-bdd-ng-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a831bfe637fea8189a32e2d3779ddcd10164ba9022914999fb829125021980ee",
        "md5": "10e8e88ae0890ea54ffa06479de2b448",
        "sha256": "64b575e8a5843090872f1917a29383f173e14c83dc02ce6e4ff5faac8002f530"
      },
      "downloads": -1,
      "filename": "pytest_bdd_ng-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10e8e88ae0890ea54ffa06479de2b448",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 68078,
      "upload_time": "2022-10-06T16:47:29",
      "upload_time_iso_8601": "2022-10-06T16:47:29.842009Z",
      "url": "https://files.pythonhosted.org/packages/a8/31/bfe637fea8189a32e2d3779ddcd10164ba9022914999fb829125021980ee/pytest_bdd_ng-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38491b109e8dd0ece5490f72a5b00f0473f754c9054676db1fa61b738804d71b",
        "md5": "744ef373cf2241dfa85aaadeadd3764f",
        "sha256": "a7e621af9b08f761b41c576eb6c57eb21c4f04f0ed8961efab059efe89b04922"
      },
      "downloads": -1,
      "filename": "pytest-bdd-ng-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "744ef373cf2241dfa85aaadeadd3764f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 89482,
      "upload_time": "2022-10-06T16:47:32",
      "upload_time_iso_8601": "2022-10-06T16:47:32.918611Z",
      "url": "https://files.pythonhosted.org/packages/38/49/1b109e8dd0ece5490f72a5b00f0473f754c9054676db1fa61b738804d71b/pytest-bdd-ng-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}