{
  "info": {
    "author": "Jeremy Lain√©",
    "author_email": "jeremy.laine@m4x.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "aiortc\n======\n\n|rtd| |pypi-v| |pypi-pyversions| |pypi-l| |tests| |codecov| |gitter|\n\n.. |rtd| image:: https://readthedocs.org/projects/aiortc/badge/?version=latest\n   :target: https://aiortc.readthedocs.io/\n\n.. |pypi-v| image:: https://img.shields.io/pypi/v/aiortc.svg\n    :target: https://pypi.python.org/pypi/aiortc\n\n.. |pypi-pyversions| image:: https://img.shields.io/pypi/pyversions/aiortc.svg\n    :target: https://pypi.python.org/pypi/aiortc\n\n.. |pypi-l| image:: https://img.shields.io/pypi/l/aiortc.svg\n    :target: https://pypi.python.org/pypi/aiortc\n\n.. |tests| image:: https://github.com/aiortc/aiortc/workflows/tests/badge.svg\n    :target: https://github.com/aiortc/aiortc/actions\n\n.. |codecov| image:: https://img.shields.io/codecov/c/github/aiortc/aiortc.svg\n    :target: https://codecov.io/gh/aiortc/aiortc\n\n.. |gitter| image:: https://img.shields.io/gitter/room/aiortc/Lobby.svg\n    :target: https://gitter.im/aiortc/Lobby\n\nWhat is ``aiortc``?\n-------------------\n\n``aiortc`` is a library for `Web Real-Time Communication (WebRTC)`_ and\n`Object Real-Time Communication (ORTC)`_ in Python. It is built on top of\n``asyncio``, Python's standard asynchronous I/O framework.\n\nThe API closely follows its Javascript counterpart while using pythonic\nconstructs:\n\n- promises are replaced by coroutines\n- events are emitted using ``pyee.EventEmitter``\n\nTo learn more about ``aiortc`` please `read the documentation`_.\n\n.. _Web Real-Time Communication (WebRTC): https://webrtc.org/\n.. _Object Real-Time Communication (ORTC): https://ortc.org/\n.. _read the documentation: https://aiortc.readthedocs.io/en/latest/\n\nWhy should I use ``aiortc``?\n----------------------------\n\nThe main WebRTC and ORTC implementations are either built into web browsers,\nor come in the form of native code. While they are extensively battle tested,\ntheir internals are complex and they do not provide Python bindings.\nFurthermore they are tightly coupled to a media stack, making it hard to plug\nin audio or video processing algorithms.\n\nIn contrast, the ``aiortc`` implementation is fairly simple and readable. As\nsuch it is a good starting point for programmers wishing to understand how\nWebRTC works or tinker with its internals. It is also easy to create innovative\nproducts by leveraging the extensive modules available in the Python ecosystem.\nFor instance you can build a full server handling both signaling and data\nchannels or apply computer vision algorithms to video frames using OpenCV.\n\nFurthermore, a lot of effort has gone into writing an extensive test suite for\nthe ``aiortc`` code to ensure best-in-class code quality.\n\nImplementation status\n---------------------\n\n``aiortc`` allows you to exchange audio, video and data channels and\ninteroperability is regularly tested against both Chrome and Firefox. Here are\nsome of its features:\n\n- SDP generation / parsing\n- Interactive Connectivity Establishment, with half-trickle and mDNS support\n- DTLS key and certificate generation\n- DTLS handshake, encryption / decryption (for SCTP)\n- SRTP keying, encryption and decryption for RTP and RTCP\n- Pure Python SCTP implementation\n- Data Channels\n- Sending and receiving audio (Opus / PCMU / PCMA)\n- Sending and receiving video (VP8 / H.264)\n- Bundling audio / video / data channels\n- RTCP reports, including NACK / PLI to recover from packet loss\n\nInstalling\n----------\n\nSince release 0.9.28 binary wheels are available on PyPI for Linux, Mac and\nWindows. The easiest way to install ``aiortc`` is to run:\n\n.. code:: bash\n\n    pip install aiortc\n\nBuilding from source\n--------------------\n\nIf there are no wheels for your system or if you wish to build aiortc from\nsource you will need a couple of libraries installed on your system:\n\n- OpenSSL 1.0.2 or greater\n- FFmpeg 4.0 or greater\n- LibVPX for video encoding / decoding\n- Opus for audio encoding / decoding\n\nLinux\n.....\n\nOn Debian/Ubuntu run:\n\n.. code:: bash\n\n    apt install libavdevice-dev libavfilter-dev libopus-dev libvpx-dev pkg-config\n\n`pylibsrtp` comes with binary wheels for most platforms, but if it needs to be\nbuilt from you will also need to run:\n\n.. code:: bash\n\n    apt install libsrtp2-dev\n\nOS X\n....\n\nOn OS X run:\n\n.. code:: bash\n\n    brew install ffmpeg opus libvpx pkg-config\n\nLicense\n-------\n\n``aiortc`` is released under the `BSD license`_.\n\n.. _BSD license: https://aiortc.readthedocs.io/en/latest/license.html\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aiortc/aiortc",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crosslab-aiortc",
    "package_url": "https://pypi.org/project/crosslab-aiortc/",
    "platform": null,
    "project_url": "https://pypi.org/project/crosslab-aiortc/",
    "project_urls": {
      "Homepage": "https://github.com/aiortc/aiortc"
    },
    "release_url": "https://pypi.org/project/crosslab-aiortc/1.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An implementation of WebRTC and ORTC",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16558709,
  "releases": {
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b01358818acabe9c0ae6ac6d4643200a8b2129b029e66ee94b4cd1be51d9d2e",
          "md5": "ce49ec81a4d9d460bbe72ceadbc66402",
          "sha256": "36659b632d1a61be225fe2b338be2e2b672cdf11c3dddf4a882c92a7a84be2c9"
        },
        "downloads": -1,
        "filename": "crosslab-aiortc-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ce49ec81a4d9d460bbe72ceadbc66402",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1168827,
        "upload_time": "2023-01-25T08:51:17",
        "upload_time_iso_8601": "2023-01-25T08:51:17.350905Z",
        "url": "https://files.pythonhosted.org/packages/3b/01/358818acabe9c0ae6ac6d4643200a8b2129b029e66ee94b4cd1be51d9d2e/crosslab-aiortc-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b01358818acabe9c0ae6ac6d4643200a8b2129b029e66ee94b4cd1be51d9d2e",
        "md5": "ce49ec81a4d9d460bbe72ceadbc66402",
        "sha256": "36659b632d1a61be225fe2b338be2e2b672cdf11c3dddf4a882c92a7a84be2c9"
      },
      "downloads": -1,
      "filename": "crosslab-aiortc-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ce49ec81a4d9d460bbe72ceadbc66402",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1168827,
      "upload_time": "2023-01-25T08:51:17",
      "upload_time_iso_8601": "2023-01-25T08:51:17.350905Z",
      "url": "https://files.pythonhosted.org/packages/3b/01/358818acabe9c0ae6ac6d4643200a8b2129b029e66ee94b4cd1be51d9d2e/crosslab-aiortc-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}