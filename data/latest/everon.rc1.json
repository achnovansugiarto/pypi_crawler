{
  "info": {
    "author": "Victor Dao",
    "author_email": "daongocthang.vn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# EVERON (Python Library)\n\nThis module makes easier to write user command-line interfaces.\n\n`everon.BaseCommand` makes use of the [argparse](https://docs.python.org/3/library/argparse.html), which is part of Python library.\n\n`everon.MixinFontColor` is a mixin class, which allows to render color fonts in terminal.\n\n## Basic Example\n\n\n\nBelow, a basic example of what the custom command should look like:\n\n```python\n# whats_time.py\nfrom datetime import datetime\nimport everon\n\n\nclass WhatsTime(everon.BaseCommand):\n    help = 'Display current time'\n\n    def handle(self, *args, **kwargs):\n        current_time = datetime.now().strftime('%X')\n        print(\"It's now {}\".format(current_time))\n\n\nif __name__ == '__main__':\n    whatstime = WhatsTime()\n    whatstime.run()\n```\n\nSee how we named our module `whatstime.py`.\n\nThis command can be executed as:\n\n```\npython -m whats_time\n```\n\nOutput:\n\n```\nIt's now 11:54:19\n```\n\n## Handling Arguments\n\n To handle arguments in command, we should define a method named `add_args`.\n\n```python\n# rand_str.py\nimport argparse\nimport random\nimport string\n\nfrom everon import BaseCommand\n\n\nclass RandString(BaseCommand):\n\n    def add_args(self, parser: argparse.ArgumentParser):\n        parser.add_argument('length', type=int, help='Indicates length of string')\n        parser.add_argument('-l', '--lowercase', action='store_true', help='Only get lowercase letters')\n\n    def handle(self, *args, **kwargs):\n        string_length = kwargs.get('length')\n        allow_lowercase = kwargs.get('lowercase')\n        letters = string.ascii_lowercase if allow_lowercase else string.ascii_letters\n        print(\"Random String is {}\".format(\n            ''.join(random.choice(letters) for _ in range(string_length)))\n        )\n\n\nif __name__ == '__main__':\n    rand_str = RandString()\n    rand_str.run()\n```\n\n\n\n#### Usage:\n\n```\npython -m rand_str 10 -l\n```\n\nOr\n\n```\npython -m rand_str 10 --lower\n```\n\nOutput\n\n```\nRandom String is wjaehxsnxc\n```\n\n## Font Color\n\nWe could setting an appropriate color to the out message with the example\n\n```python\n# say_hello.py\nfrom everon import BaseCommand, MixinFontColor\n\n\nclass SayHello(BaseCommand, MixinFontColor):\n    def __init__(self):\n        MixinFontColor.__init__(self)\n\n    def handle(self, *args, **kwargs):\n        self.print_ok('Printing text ok')\n        self.print_err('Printing text error')\n        print(self.text_as_link('Printing text as link'))\n        print(self.color.LIGHTMAGENTA_EX + 'Printing text with custom color')\n\n\nif __name__ == '__main__':\n    foo = SayHello()\n    foo.run()\n```\n\nChecking with the following command\n\n```\npython -m say_hello\n```\n\nOutput\n\n\n\n![](https://github.com/wayfar3/everon/blob/master/res/MixinFontColor.jpg)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wayfar3/everon",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "everon",
    "package_url": "https://pypi.org/project/everon/",
    "platform": "",
    "project_url": "https://pypi.org/project/everon/",
    "project_urls": {
      "Homepage": "https://github.com/wayfar3/everon"
    },
    "release_url": "https://pypi.org/project/everon/0.0.1/",
    "requires_dist": [
      "colorama"
    ],
    "requires_python": "",
    "summary": "It makes easier to build user command-line interface",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6834650,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffbd7245f30eddf223bd27fe31f7d9840f6e4504c1036b6358892ed077a8ffc2",
          "md5": "0739e457fc9c1d4c0e83494c04401dd9",
          "sha256": "82dcafb53036cf171edf6ba36f762e7afcb9111113908fa9815ae2387489b9cd"
        },
        "downloads": -1,
        "filename": "everon-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0739e457fc9c1d4c0e83494c04401dd9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4194,
        "upload_time": "2020-03-18T09:45:13",
        "upload_time_iso_8601": "2020-03-18T09:45:13.132317Z",
        "url": "https://files.pythonhosted.org/packages/ff/bd/7245f30eddf223bd27fe31f7d9840f6e4504c1036b6358892ed077a8ffc2/everon-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88a20425d3cbf64a15c9752eee16f1d3369339510faee4fe001fcefcad124ccf",
          "md5": "95fba3a96fab52fffd22c38343a6a1a5",
          "sha256": "de28f554886c98ae2444b82186a48bf27ad67d04733881a225421844e22810dc"
        },
        "downloads": -1,
        "filename": "everon-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "95fba3a96fab52fffd22c38343a6a1a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3633,
        "upload_time": "2020-03-18T09:45:15",
        "upload_time_iso_8601": "2020-03-18T09:45:15.552855Z",
        "url": "https://files.pythonhosted.org/packages/88/a2/0425d3cbf64a15c9752eee16f1d3369339510faee4fe001fcefcad124ccf/everon-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffbd7245f30eddf223bd27fe31f7d9840f6e4504c1036b6358892ed077a8ffc2",
        "md5": "0739e457fc9c1d4c0e83494c04401dd9",
        "sha256": "82dcafb53036cf171edf6ba36f762e7afcb9111113908fa9815ae2387489b9cd"
      },
      "downloads": -1,
      "filename": "everon-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0739e457fc9c1d4c0e83494c04401dd9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4194,
      "upload_time": "2020-03-18T09:45:13",
      "upload_time_iso_8601": "2020-03-18T09:45:13.132317Z",
      "url": "https://files.pythonhosted.org/packages/ff/bd/7245f30eddf223bd27fe31f7d9840f6e4504c1036b6358892ed077a8ffc2/everon-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88a20425d3cbf64a15c9752eee16f1d3369339510faee4fe001fcefcad124ccf",
        "md5": "95fba3a96fab52fffd22c38343a6a1a5",
        "sha256": "de28f554886c98ae2444b82186a48bf27ad67d04733881a225421844e22810dc"
      },
      "downloads": -1,
      "filename": "everon-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "95fba3a96fab52fffd22c38343a6a1a5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3633,
      "upload_time": "2020-03-18T09:45:15",
      "upload_time_iso_8601": "2020-03-18T09:45:15.552855Z",
      "url": "https://files.pythonhosted.org/packages/88/a2/0425d3cbf64a15c9752eee16f1d3369339510faee4fe001fcefcad124ccf/everon-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}