{
  "info": {
    "author": "",
    "author_email": "RetiredWizard <PyDOS@RetiredWizard.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## PyDOS, PyBASIC, edit... All the functionality of the 1981 IBM PC on a PI Pico?\n\n**MicroPython/CircuitPython DOS-like shell for microcontroller (RP2040, ESP32-S2/S3) boards**   \n**Check out the demo video at https://www.youtube.com/watch?v=Az_oiq8GE4Y**\n\nTo start the shell type **import PyDOS** at the micropython REPL prompt.\n\n**setup.bat** in the root folder will prompt the user to indicate Circuit Python or Micropython and then the board they are using.\nThe setup batch file will then copy the programs and libraries appropriate for the user's platform to the root folder of the\nMicrocontroller flash.\n\nExternal programs included:\n\n**pydospins.py** - Displays the GPIO pins for sound output and I2C for the particular board PyDOS is running on.\n\n**runasthread.py** (Micropython only) - This program will attempt to launch a python program on the second RP2040 core. Threading is\nexperimental on Micropython so it's not difficult to crash the microcontroller using this program. I have not found a way to kill\na thread started on the second core so be sure any threads you launch will shutdown on their own or monitor a global variable or\nthread.lock to respond to a shutdown request (see the badblink.py for an example).\n\n**runvm.py** (Circuitpython only) - This program will use the **supervisor.set_next_code_file** method to configure the microcontroller\nboard to launch the specfied python script after the next soft reboot. The program then uses the **supervisor.reload()** method to \nperform a reboot and launch the target script. The target script is \"wrapped\" in some code that passes any specified arguments and the\nPyDOS environment variables to the newly booted environment as well as code that causes a second soft reboot after the script has completed\nto return control to PyDOS.\n\n**edit.py** - line editor inspired by DOS edlin. Intial program structure of line editor by Joesph Long\n    https://github.com/j-osephlong/Python-Text-Editor\n    \n**fsedit.py** - shell to load full screen editor from https://github.com/robert-hh/Micropython-Editor\n\n**fileview.py** - scrollable text file viewer\n\n**sdmount.py** (Micropython ThingPlus or Circuitpython Keyboard Featherwing) - mounts an sd card to the file system\n\n**sdumount.py** (Micropython ThingPlus only) - dismounts an sd card from the file system\n\n**setdate.py** (Micropython only) - initalizes the RP2040 real time clock to an entered date\n\n**settime.py** (Micropython only) - initalizes the RP2040 real time clock to an entered time\n\n**diff.py** - performs a file comparison\n\n**sound.py** - outputs a sound to a speaker cicruit connected to GPIO 19\n\n**lcdprint.py** - displays text on an I2C LCD display\n\n**PyBasic.py** - a Basic interpreter from https://github.com/richpl/PyBasic. Tweaked and modified to run on Micropython.\n\tbasicparser.py, basictoken.py, flowsignal.py, lexer.py, program.py, basicdata.py\n\nAt the DOS prompt a python program (.py) or batch (.bat) file can be run by simply entering the filename with or without\nthe extension\n\n## Installation\n\nIf the board you're using has limited flash storage you can delete either the **cpython** (if you're not using CircuitPython) or **mpython**\n(if you're not using MicroPython) folder from the downloaded repository files. Within the remaining Python folder (**cpython** or **mpython**) are folders\nfor specific micro controller boards,\nyou can free up further space by deleting anything other than the board you are using. Finally, after running the **setup.bat** file in PyDOS you can\ndelete both the **cpython** and **mpython** folders as they are only used by the **setup.bat** script.\n\n**Building custom CircuitPython firmware**\n\nFor CircuitPython the first thing you should do is compile a custom CircuitPython image, the steps for doing so are described in the Adafruit learning guide\nat: https://learn.adafruit.com/building-circuitpython/build-circuitpython.  Upon downloading the latest version of CircuitPython from the github repository,\nmodify the **py/circuitpy_mpconfig.h** file and change the value on the line that reads \"#**define MICROPY_ENABLE_PYSTACK**\" from \"(1)\" to \"(0)\". On an \nESP32S2 microcontroller it's also necessary to modify the **py/mpconfig.h** file and change the value on the line that reades \"**#define MICROPY_STACKLESS**\"\nfrom \"(0)\" to \"(1)\".\n\nAn earlier version of the build process is demonstrated in the YouTube video at: https://www.youtube.com/watch?v=sWy5_B3LL8c, but be sure to check the Adafruit\nguide and use the updated instructions.\n\n**PyDOS will run without using this custom CircuitPython image however PyBasic and some of the other applications will not run as well since PyDOS will be memory limited.**\n\n**CircuitPython Setup**\n\nTo install the custom CircuitPython image, put your microcontroller board in \"bootloader\" mode and copy the compiled .UF2 file to the USB mass storage device that\nshows up on your host computer.\n\nAfter the .UF2 file is copied to the microcontroller board it should re-boot and a new USB mass storage device should appear. \n\nTo copy PyDOS to the Microcontroller, simply drag the PyDOS directory structure\n(after removing the **mpython** folder if space is a concern) to the root directory of the device that appears on the host computer.\nYour microcontroller now has PyDOS installed.\n\nAt this point the microcontroller file system is set to allow computer Read/Write access, however the boot.py file that you copied\nwith PyDOS will switch the mode so that\nPyDOS has Read/Write access and the host computer will only have ReadOnly access. This change won't take effect until you power cycle the micro controller board so **be\nsure that the PyDOS files are all copied before turning the power off on your microcontroller board**. If the copy is interrupted for any reason you can delete the boot.py\nfile in the root of the microcontroller flash, to be sure the file system doesn't\nswitch modes and try the copy again. \n\nIf you do find your self locked out of the flash from the host computer and PyDOS is not running, the easiest way to recover is to\nconnect to the REPL, remove the boot.py file and then power cycle the microcontroller board. \n\n        import os\n        os.remove(\"boot.py\")\n\nIf the copy worked without any errors, you should power cycle the microcontroller board so that the file system is configured to allow\nthe microcontroller to have Read/Write access.\n\nTo interact with the microcontroller you will need to connect using a terminal program. On a PC you can use putty and on linux minicom works well. To start minicom\non linux type the command:\n\n          Term=linux minicom -b 115200 -o -D /dev/ttyACM0\n\t  \nYou should be presented with the REPL prompt (>>>), if not, press return or Ctrl-C.\n\nAt the REPL prompt type \"**import PyDOS**\" to start PyDOS and then type **setup** to run the customization script.\n\n--------------------------------------------------------------------------------------------------------------------\n**Building custom Micropython firmware**\n\nAlthough you can use a standard Micropython image downloaded from Micropython.org to run PyDOS, there are two reasons you may want to build a custom\nMicropython firmware file. \n\nThe first is if you wan to connect up an old school serial terminal to the REPL rather than the standard serial over USB connection. Instructions for building \nMicropython with this modification can be found in section 2.2 of the Raspberry Pi Pico Python SDK at https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-python-sdk.pdf.\n\nThe second is that PyDOS uses a recursive routine to process wildcard operations and the default stack in Micropython limits the recursion depth that can be obtained.\nThis means that PyDOS has to limit wildcard operations to files of 16 characters or less, one impact of this is that files with longer file names will not appear\nin directory listings when wildcards are used. To mitigate this issue the MICROPY_STACKLESS parameter in **py/circuitpy_mpconfig.h** can be changed from **0** to **1**. If\nMicropython frimware is used with this modification the **wildcardLen** varaible in the PyDOS.py program file can be changed from 16 to 65 which will increase the\nlength of files that can be processed using wildcards.\n\n**MicroPython Setup**\n\nOnce your microcontroller has Micropython installed and running the best way\nto copy the PyDOS files and interact with the repl is to use MPRemote. Detailed documentation on installing and using MPRemote can be found \nat https://docs.micropython.org/en/latest/reference/mpremote.html.\n\nTo install PyDOS on the microcontroller board download PyDOS from github repository and after deleting the **cpython** folder if space is an issue, set your current\ndirectory to the root folder of the downloaded PyDOS repository and use the following command:\n\n\tmpremote fs cp -r * :\n\t\nTo interact with the microcontroller you can connect to the REPL by simply typing **mpremote** and pressing return several times until the REPL prompt\n(>>>) is displayed.\n\nAt the REPL prompt type \"**import PyDOS*** to start PyDOS and then type **setup** to run the customization script.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License Copyright (c) [year] [fullname] Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uPyDOS",
    "package_url": "https://pypi.org/project/uPyDOS/",
    "platform": null,
    "project_url": "https://pypi.org/project/uPyDOS/",
    "project_urls": {
      "Bug Tracker": "https://github.com/RetiredWizard/PyDOS/issues",
      "Homepage": "https://github.com/RetiredWizard/PyDOS"
    },
    "release_url": "https://pypi.org/project/uPyDOS/1.10/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "micro PyDOS - Dos like shell for microcontrollers",
    "version": "1.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14501357,
  "releases": {
    "1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "169ac559609b804369a439c45c3b0faa72b59c482f040eefc92bd0d0c1ed2db7",
          "md5": "0a341c972ffd282deacc90d4c5f5c69b",
          "sha256": "dff44a2b1c6135572603e50cf226fb10bbe8c59e84aab3194e0960c1e09527e3"
        },
        "downloads": -1,
        "filename": "uPyDOS-1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a341c972ffd282deacc90d4c5f5c69b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 135103,
        "upload_time": "2022-07-21T03:56:47",
        "upload_time_iso_8601": "2022-07-21T03:56:47.375309Z",
        "url": "https://files.pythonhosted.org/packages/16/9a/c559609b804369a439c45c3b0faa72b59c482f040eefc92bd0d0c1ed2db7/uPyDOS-1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d8805e4ee3c446e69161246d9834362139015e61e4d696743b5fff8ccb627db",
          "md5": "0535623eadd408a7cb492c34f0606599",
          "sha256": "b2448db83c3fde1d64310449a2badf371ca65a325ead0436ec6b4187087799e7"
        },
        "downloads": -1,
        "filename": "uPyDOS-1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "0535623eadd408a7cb492c34f0606599",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 102023,
        "upload_time": "2022-07-21T03:56:48",
        "upload_time_iso_8601": "2022-07-21T03:56:48.895687Z",
        "url": "https://files.pythonhosted.org/packages/9d/88/05e4ee3c446e69161246d9834362139015e61e4d696743b5fff8ccb627db/uPyDOS-1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "169ac559609b804369a439c45c3b0faa72b59c482f040eefc92bd0d0c1ed2db7",
        "md5": "0a341c972ffd282deacc90d4c5f5c69b",
        "sha256": "dff44a2b1c6135572603e50cf226fb10bbe8c59e84aab3194e0960c1e09527e3"
      },
      "downloads": -1,
      "filename": "uPyDOS-1.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a341c972ffd282deacc90d4c5f5c69b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 135103,
      "upload_time": "2022-07-21T03:56:47",
      "upload_time_iso_8601": "2022-07-21T03:56:47.375309Z",
      "url": "https://files.pythonhosted.org/packages/16/9a/c559609b804369a439c45c3b0faa72b59c482f040eefc92bd0d0c1ed2db7/uPyDOS-1.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d8805e4ee3c446e69161246d9834362139015e61e4d696743b5fff8ccb627db",
        "md5": "0535623eadd408a7cb492c34f0606599",
        "sha256": "b2448db83c3fde1d64310449a2badf371ca65a325ead0436ec6b4187087799e7"
      },
      "downloads": -1,
      "filename": "uPyDOS-1.10.tar.gz",
      "has_sig": false,
      "md5_digest": "0535623eadd408a7cb492c34f0606599",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 102023,
      "upload_time": "2022-07-21T03:56:48",
      "upload_time_iso_8601": "2022-07-21T03:56:48.895687Z",
      "url": "https://files.pythonhosted.org/packages/9d/88/05e4ee3c446e69161246d9834362139015e61e4d696743b5fff8ccb627db/uPyDOS-1.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}