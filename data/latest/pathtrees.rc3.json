{
  "info": {
    "author": "Bea Steers",
    "author_email": "bea.steers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pathtrees\n\n[![pypi](https://badge.fury.io/py/pathtrees.svg)](https://pypi.python.org/pypi/pathtrees/)<!-- ![tests](https://github.com/beasteers/pathtrees/actions/workflows/ci.yaml/badge.svg) -->\n[![docs](https://readthedocs.org/projects/pathtrees/badge/?version=latest)](http://pathtrees.readthedocs.io/?badge=latest)\n[![License](https://img.shields.io/pypi/l/pathtrees.svg)](https://github.com/beasteers/pathtrees/blob/main/LICENSE.md)\n\n\nDefine your path structure at the top, then just fill in the variables later.\n\n## Install\n\n```bash\npip install pathtrees\n```\n\n## Usage\n\n```python\nimport pathtrees as pt\n\n\n\n# define your file structure.\n\n# a simple ML experiment structure\npaths = Paths.define('./logs', {\n    '{log_id}': {\n        'model.h5': 'model',\n        'model_spec.pkl': 'model_spec',\n        'plots': {\n            'epoch_{step:.4d}': {\n                '{plot_name}.png': 'plot',\n                '': 'plot_dir',\n            }\n        },\n        # a path join hack that gives you: log_dir > ./logs/{log_id}\n        '', 'log_dir',\n    }\n})\npaths.update(log_id='test1', step=-1)\n\n\n\n# for example, a keras callback that saves a matplotlib plot every epoch\n\nclass MyCallback(Callback):\n    def on_epoch_end(self, epoch, logs):\n        # creates a copy of the path tree that has step_name=epoch\n        epoch_paths = paths.specify(step=epoch)\n        ...\n        # save one plot\n        plt.imsave(epoch_paths.plot.specify(plot_name='confusion_matrix'))\n        ...\n        # save another plot\n        plt.imsave(epoch_paths.plot.specify(plot_name='auc'))\n\n# you can glob over any missing data (e.g. step => '*')\n# equivalent to: glob(\"logs/test1/plots/{step}/auc.png\")\nfor path in paths.plot.specify(plot_name='auc').glob():\n    print(path)\n```\n\n### Path Formatting\n\n```python\npath = pathtrees.Path('data/{sensor_id}/raw/{date}/temperature_{file_id:04d}.csv')\npath.update(sensor_id='aaa')\n\ntry:\n    path.format()\nexcept KeyError: \n    print(\"oops gotta provide more data!\")\n\nassert path.partial_format() == 'data/aaa/raw/{date}/temperature_{file_id:04d}.csv'\nassert path.glob_format() == 'data/aaa/raw/*/temperature_*.csv'\n\ntry:\n    path.format(date='111')\nexcept KeyError: \n    print(\"oops gotta provide more data!\")\n\nassert path.partial_format(date='111') == 'data/aaa/raw/111/temperature_{file_id:04d}.csv'\nassert path.glob_format(date='111') == 'data/aaa/raw/111/temperature_*.csv'\n\n# fully specified path - all data provided\nassert path.format(date='111', fild_id=2) == 'data/aaa/raw/111/temperature_0002.csv'\nassert path.partial_format(date='111', fild_id=2) == 'data/aaa/raw/111/temperature_0002.csv'\nassert path.glob_format(date='111', fild_id=2) == 'data/aaa/raw/111/temperature_0002.csv'\n\n# passing arguments to format() doesn't update the original object.\n\n# you can either create a copy of the path and update it's data\npath2 = path.specify(date='111')\n# or you can update the data in place using update()\npath2.update(date='222', fild_id=2)\n\n# and now you don't need to pass that info to format()\n\nimport os\n\nassert os.fspath(path) == path.format()\nassert str(path) == path.partial_format()\n```\n\nTODO:\n - docstrings and examples !!!\n - decide what I want to do about `format_path`, `partial_format_path`, etc. (too verbose)\n - publish RTD",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/beasteers/pathtrees",
    "keywords": "path directory tree structure partial format",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pathtrees",
    "package_url": "https://pypi.org/project/pathtrees/",
    "platform": null,
    "project_url": "https://pypi.org/project/pathtrees/",
    "project_urls": {
      "Homepage": "https://github.com/beasteers/pathtrees"
    },
    "release_url": "https://pypi.org/project/pathtrees/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Define named directory structure using placeholders",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14751604,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d532fc379c13cd5e6b5876f7f03d602f0dfd8632d5fe76d1882586111cf49f8",
          "md5": "7db3f43a420ff7465802e59e28df4770",
          "sha256": "a00d76197c7924321d21791f3b27d85aa1c21d6b377dc88b0ce225e5c7b7cade"
        },
        "downloads": -1,
        "filename": "pathtrees-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7db3f43a420ff7465802e59e28df4770",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10348,
        "upload_time": "2022-02-05T05:49:02",
        "upload_time_iso_8601": "2022-02-05T05:49:02.463350Z",
        "url": "https://files.pythonhosted.org/packages/5d/53/2fc379c13cd5e6b5876f7f03d602f0dfd8632d5fe76d1882586111cf49f8/pathtrees-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d37bbea01c60494d07a9a7f749c3c916c9cc0d11f6a653520839834df0d9bdbc",
          "md5": "94d8d3f82e314a6e0b0aee2511e2da75",
          "sha256": "215160d4532020fbf5774cb77a61584d41307cab7e49944ef5634298268d56d5"
        },
        "downloads": -1,
        "filename": "pathtrees-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "94d8d3f82e314a6e0b0aee2511e2da75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10340,
        "upload_time": "2022-03-17T20:56:59",
        "upload_time_iso_8601": "2022-03-17T20:56:59.466091Z",
        "url": "https://files.pythonhosted.org/packages/d3/7b/bea01c60494d07a9a7f749c3c916c9cc0d11f6a653520839834df0d9bdbc/pathtrees-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7eb4607b298979d89372825df78abd24f51e655852d8d6907b4e9cad614932db",
          "md5": "41dd9c8801276b7145565c945515e1d8",
          "sha256": "cb12c61784b0dfd84383ccbdf9fdc9ca26d42fbb6f03e7d34bf31b04a319adfc"
        },
        "downloads": -1,
        "filename": "pathtrees-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "41dd9c8801276b7145565c945515e1d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9351,
        "upload_time": "2022-08-13T20:46:57",
        "upload_time_iso_8601": "2022-08-13T20:46:57.945978Z",
        "url": "https://files.pythonhosted.org/packages/7e/b4/607b298979d89372825df78abd24f51e655852d8d6907b4e9cad614932db/pathtrees-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7eb4607b298979d89372825df78abd24f51e655852d8d6907b4e9cad614932db",
        "md5": "41dd9c8801276b7145565c945515e1d8",
        "sha256": "cb12c61784b0dfd84383ccbdf9fdc9ca26d42fbb6f03e7d34bf31b04a319adfc"
      },
      "downloads": -1,
      "filename": "pathtrees-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "41dd9c8801276b7145565c945515e1d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9351,
      "upload_time": "2022-08-13T20:46:57",
      "upload_time_iso_8601": "2022-08-13T20:46:57.945978Z",
      "url": "https://files.pythonhosted.org/packages/7e/b4/607b298979d89372825df78abd24f51e655852d8d6907b4e9cad614932db/pathtrees-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}