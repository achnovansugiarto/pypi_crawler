{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# CannerFlow Jupyter Contents\n\nAn S3, GCS, Blob backed ContentsManager implementation for Jupyter. Based on [s3Contens](http://github.com/danielfrg/s3contents)\n\n## Installation\n\n```\n$ pip install cannerflow-jupyter-contents\n```\n\n## Jupyter config\n\nEdit `~/.jupyter/jupyter_notebook_config.py` based on the backend you want to\nbased on the examples below. Replace credentials as needed.\n\n## AWS S3\n\n```python\nfrom s3contents import S3ContentsManager\n\nc = get_config()\n\n# Tell Jupyter to use S3ContentsManager for all storage.\nc.NotebookApp.contents_manager_class = S3ContentsManager\nc.S3ContentsManager.access_key_id = \"{{ AWS Access Key ID / IAM Access Key ID }}\"\nc.S3ContentsManager.secret_access_key = \"{{ AWS Secret Access Key / IAM Secret Access Key }}\"\nc.S3ContentsManager.session_token = \"{{ AWS Session Token / IAM Session Token }}\"\nc.S3ContentsManager.bucket = \"{{ S3 bucket name }}\"\n\n# Optional settings:\nc.S3ContentsManager.prefix = \"this/is/a/prefix/on/the/s3/bucket\"\nc.S3ContentsManager.sse = \"AES256\"\nc.S3ContentsManager.signature_version = \"s3v4\"\nc.S3ContentsManager.init_s3_hook = init_function  # See AWS key refresh\n```\n\nExample for `play.minio.io:9000`:\n\n```python\nfrom s3contents import S3ContentsManager\n\nc = get_config()\n\n# Tell Jupyter to use S3ContentsManager for all storage.\nc.NotebookApp.contents_manager_class = S3ContentsManager\nc.S3ContentsManager.access_key_id = \"Q3AM3UQ867SPQQA43P2F\"\nc.S3ContentsManager.secret_access_key = \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"\nc.S3ContentsManager.endpoint_url = \"http://play.minio.io:9000\"\nc.S3ContentsManager.bucket = \"s3contents-demo\"\nc.S3ContentsManager.prefix = \"notebooks/test\"\n```\n\n### AWS EC2 role auth setup\n\nIt also possible to use IAM Role-based access to the S3 bucket from an Amazon EC2 instance.\n\nTo do that just leave `access_key_id` and `secret_access_key` set to their default values (`None`),\nand ensure that the EC2 instance has an IAM role which provides sufficient permissions for the bucket and the operations necessary.\n\n### AWS key refresh\n\nThe optional `init_s3_hook` configuration can be used to enable AWS key rotation (described [here](https://dev.to/li_chastina/auto-refresh-aws-tokens-using-iam-role-and-boto3-2cjf) and [here](https://www.owenrumney.co.uk/2019/01/15/implementing-refreshingawscredentials-python/)) as follows:\n\n```python\nfrom s3contents import S3ContentsManager\nfrom botocore.credentials import RefreshableCredentials\nfrom botocore.session import get_session\nimport botocore\nimport boto3\nfrom configparser import ConfigParser\n\ndef refresh_external_credentials():\n    config = ConfigParser()\n    config.read('/home/jovyan/.aws/credentials')\n    return {\n        \"access_key\": config['default']['aws_access_key_id'],\n        \"secret_key\": config['default']['aws_secret_access_key'],\n        \"token\": config['default']['aws_session_token'],\n        \"expiry_time\": config['default']['aws_expiration']\n    }\n\nsession_credentials = RefreshableCredentials.create_from_metadata(\n        metadata = refresh_external_credentials(),\n        refresh_using = refresh_external_credentials,\n        method = 'custom-refreshing-key-file-reader'\n)\n\ndef make_key_refresh_boto3(this_s3contents_instance):\n    refresh_session =  get_session() # from botocore.session\n    refresh_session._credentials = session_credentials\n    my_s3_session =  boto3.Session(botocore_session=refresh_session)\n    this_s3contents_instance.boto3_session = my_s3_session\n\n# Tell Jupyter to use S3ContentsManager for all storage.\nc.NotebookApp.contents_manager_class = S3ContentsManager\n\nc.S3ContentsManager.init_s3_hook = make_key_refresh_boto3\n```\n\n## GCP Cloud Storage\n\n```python\nfrom s3contents import GCSContentsManager\n\nc = get_config(\n\nc.NotebookApp.contents_manager_class = GCSContentsManager\nc.GCSContentsManager.project = \"{{ your-project }}\"\nc.GCSContentsManager.token = \"~/.config/gcloud/application_default_credentials.json\"\nc.GCSContentsManager.bucket = \"{{ GCP bucket name }}\"\n```\n\nNote that the file `~/.config/gcloud/application_default_credentials.json` assumes a posix system\nwhen you did `gcloud init`\n\n## Azure blob storage with SAS\nimport os\n\nfrom s3contents import BlobContentsManager\nfrom s3contents.blobmanager import auth_shared_access_signature\ntoken = auth_shared_access_signature(\n   account_key=os.environ[\"AZURE_ACCOUNT_KEY\"],\n   account_name=os.environ[\"AZURE_ACCOUNT_NAME\"]\n)\nc.NotebookApp.contents_manager_class = BlobContentsManager\nc.BlobContentsManager.credential=token\nc.BlobContensManager.account_key=os.environ[\"AZURE_ACCOUNT_KEY\"]\nc.BlobContentsManager.container_name=os.environ[\"AZURE_CONTAINER_NAME\"]\nc.BlobContentsManager.account_name=os.environ[\"AZURE_ACCOUNT_NAME\"]\n\n## Access local files\n\nTo access local file as well as remote files in S3 you can use [hybridcontents](https://github.com/viaduct-ai/hybridcontents).\n\nFirst install it:\n\n```\npip install hybridcontents\n```\n\nUse a configuration similar to this:\n\n```python\nfrom s3contents import S3ContentsManager\nfrom hybridcontents import HybridContentsManager\nfrom IPython.html.services.contents.filemanager import FileContentsManager\n\nc = get_config()\n\nc.NotebookApp.contents_manager_class = HybridContentsManager\n\nc.HybridContentsManager.manager_classes = {\n    # Associate the root directory with an S3ContentsManager.\n    # This manager will receive all requests that don\"t fall under any of the\n    # other managers.\n    \"\": S3ContentsManager,\n    # Associate /directory with a FileContentsManager.\n    \"local_directory\": FileContentsManager,\n}\n\nc.HybridContentsManager.manager_kwargs = {\n    # Args for root S3ContentsManager.\n    \"\": {\n        \"access_key_id\": \"{{ AWS Access Key ID / IAM Access Key ID }}\",\n        \"secret_access_key\": \"{{ AWS Secret Access Key / IAM Secret Access Key }}\",\n        \"bucket\": \"{{ S3 bucket name }}\",\n    },\n    # Args for the FileContentsManager mapped to /directory\n    \"local_directory\": {\n        \"root_dir\": \"/Users/danielfrg/Downloads\",\n    },\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "jupyter,blob,azure,contents-manager",
    "license": "Apache License, Version 2.0",
    "maintainer": "Leo",
    "maintainer_email": "leo@canner.io",
    "name": "cannerflow-jupyter-contents",
    "package_url": "https://pypi.org/project/cannerflow-jupyter-contents/",
    "platform": "",
    "project_url": "https://pypi.org/project/cannerflow-jupyter-contents/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/cannerflow-jupyter-contents/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Azure Contents Manager for Jupyter",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8454205,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbda46b3d994c7cd127cd98a3b481d7727bb7ce6236dff08253a351154b1ff62",
          "md5": "59d293f5631881a4f2d5150c6bd8f2d1",
          "sha256": "904274a38619059f45fbaecf49c4ded88d2b883cd9c95c08e125044a34c5d54c"
        },
        "downloads": -1,
        "filename": "cannerflow-jupyter-contents-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "59d293f5631881a4f2d5150c6bd8f2d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23445,
        "upload_time": "2020-07-14T03:44:24",
        "upload_time_iso_8601": "2020-07-14T03:44:24.641512Z",
        "url": "https://files.pythonhosted.org/packages/cb/da/46b3d994c7cd127cd98a3b481d7727bb7ce6236dff08253a351154b1ff62/cannerflow-jupyter-contents-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c580ec1e3e97812390512a38d5758854bddedb8ec054a0b9edfa5d5a245f3214",
          "md5": "84d95b5f1898a2e071c7b628e949f427",
          "sha256": "97f0a970f450af84b630d8db97b4e4e055acd8751bc1d27894eb35d3dcf89129"
        },
        "downloads": -1,
        "filename": "cannerflow-jupyter-contents-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84d95b5f1898a2e071c7b628e949f427",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23453,
        "upload_time": "2020-07-15T18:00:06",
        "upload_time_iso_8601": "2020-07-15T18:00:06.938798Z",
        "url": "https://files.pythonhosted.org/packages/c5/80/ec1e3e97812390512a38d5758854bddedb8ec054a0b9edfa5d5a245f3214/cannerflow-jupyter-contents-1.1.0.tar.gz",
        "yanked": true,
        "yanked_reason": "test-yank"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "769b4821501ed85802995ceafab56de1f7fbaf594d3217f173fe2d1eee8fbe79",
          "md5": "78c2ca6ff1059f50bc42445f4c9f4fa1",
          "sha256": "71b098c109030bd29ff645b3c8ecb2e600b31277afe8a8f26bae9c705bf33097"
        },
        "downloads": -1,
        "filename": "cannerflow-jupyter-contents-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78c2ca6ff1059f50bc42445f4c9f4fa1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23463,
        "upload_time": "2020-07-15T18:07:53",
        "upload_time_iso_8601": "2020-07-15T18:07:53.250589Z",
        "url": "https://files.pythonhosted.org/packages/76/9b/4821501ed85802995ceafab56de1f7fbaf594d3217f173fe2d1eee8fbe79/cannerflow-jupyter-contents-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48ee4e054c73a9a4efa1587f0a194b2192b0ca9e418708fb85d583276bbed0f1",
          "md5": "766c770072ff9b64eb81f6a68b7d2d29",
          "sha256": "54616db8edc69048c435ff754cea0b317eb677c88c0441c376db9750bab42fe1"
        },
        "downloads": -1,
        "filename": "cannerflow-jupyter-contents-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "766c770072ff9b64eb81f6a68b7d2d29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23475,
        "upload_time": "2020-07-17T02:43:48",
        "upload_time_iso_8601": "2020-07-17T02:43:48.055937Z",
        "url": "https://files.pythonhosted.org/packages/48/ee/4e054c73a9a4efa1587f0a194b2192b0ca9e418708fb85d583276bbed0f1/cannerflow-jupyter-contents-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48ee4e054c73a9a4efa1587f0a194b2192b0ca9e418708fb85d583276bbed0f1",
        "md5": "766c770072ff9b64eb81f6a68b7d2d29",
        "sha256": "54616db8edc69048c435ff754cea0b317eb677c88c0441c376db9750bab42fe1"
      },
      "downloads": -1,
      "filename": "cannerflow-jupyter-contents-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "766c770072ff9b64eb81f6a68b7d2d29",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23475,
      "upload_time": "2020-07-17T02:43:48",
      "upload_time_iso_8601": "2020-07-17T02:43:48.055937Z",
      "url": "https://files.pythonhosted.org/packages/48/ee/4e054c73a9a4efa1587f0a194b2192b0ca9e418708fb85d583276bbed0f1/cannerflow-jupyter-contents-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}