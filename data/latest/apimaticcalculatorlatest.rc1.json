{
  "info": {
    "author": "APIMatic SDK Generator",
    "author_email": "support@apimatic.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Getting started\n\n![example image](https://i.ibb.co/7bqPkGJ/PMS-integration-workflow.png \"An exemplary image\")\n\n**Before beginning work it is necessary that:**\n\n  * Your organization is registered and activated\n  * You have participated in a kick­off meeting\n  * The opening questionnaire has been filled out\n  * You have your login and password. (Using it you get a unique session `token` that must be used in every request to API as param `jwt`)\n\n[Contact us](https://bookingpal.com/en/contact-us/) to be registered and get your credentials.\n\nAll responses are returned as JSON.\n\nThis document covers all the API calls and other methods that can be used to complete Razor-Cloud integration. It is important to note that all parameters are **case sensitive** in this document and should be used as documented.\n\n**Responses:**\nWhen a request is successful, a response body will typically be sent back in the form of a JSON object. An exception to this is when a DELETE request is processed, which will result in a successful `200` status and an empty response body.\n\n## How to Build\n\n\nYou must have Python ```2 >=2.7.9``` or Python ```3 >=3.4``` installed on your system to install and run this SDK. This SDK package depends on other Python packages like nose, jsonpickle etc. \nThese dependencies are defined in the ```requirements.txt``` file that comes with the SDK.\nTo resolve these dependencies, you can use the PIP Dependency manager. Install it by following steps at [https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/).\n\nPython and PIP executables should be defined in your PATH. Open command prompt and type ```pip --version```.\nThis should display the version of the PIP Dependency Manager installed if your installation was successful and the paths are properly defined.\n\n* Using command line, navigate to the directory containing the generated files (including ```requirements.txt```) for the SDK.\n* Run the command ```pip install -r requirements.txt```. This should install all the required dependencies.\n\n![Building SDK - Step 1](https://apidocs.io/illustration/python?step=installDependencies&workspaceFolder=Channel%20Management%20API-Python)\n\n\n## How to Use\n\nThe following section explains how to use the Apimaticcalculatorlatest SDK package in a new project.\n\n### 1. Open Project in an IDE\n\nOpen up a Python IDE like PyCharm. The basic workflow presented here is also applicable if you prefer using a different editor or IDE.\n\n![Open project in PyCharm - Step 1](https://apidocs.io/illustration/python?step=pyCharm)\n\nClick on ```Open``` in PyCharm to browse to your generated SDK directory and then click ```OK```.\n\n![Open project in PyCharm - Step 2](https://apidocs.io/illustration/python?step=openProject0&workspaceFolder=Channel%20Management%20API-Python)     \n\nThe project files will be displayed in the side bar as follows:\n\n![Open project in PyCharm - Step 3](https://apidocs.io/illustration/python?step=openProject1&workspaceFolder=Channel%20Management%20API-Python&projectName=apimaticcalculatorlatest)     \n\n### 2. Add a new Test Project\n\nCreate a new directory by right clicking on the solution name as shown below:\n\n![Add a new project in PyCharm - Step 1](https://apidocs.io/illustration/python?step=createDirectory&workspaceFolder=Channel%20Management%20API-Python&projectName=apimaticcalculatorlatest)\n\nName the directory as \"test\"\n\n![Add a new project in PyCharm - Step 2](https://apidocs.io/illustration/python?step=nameDirectory)\n\nAdd a python file to this project with the name \"testsdk\"\n\n![Add a new project in PyCharm - Step 3](https://apidocs.io/illustration/python?step=createFile&workspaceFolder=Channel%20Management%20API-Python&projectName=apimaticcalculatorlatest)\n\nName it \"testsdk\"\n\n![Add a new project in PyCharm - Step 4](https://apidocs.io/illustration/python?step=nameFile)\n\nIn your python file you will be required to import the generated python library using the following code lines\n\n```Python\nfrom apimaticcalculatorlatest.apimaticcalculatorlatest_client import ApimaticcalculatorlatestClient\n```\n\n![Add a new project in PyCharm - Step 4](https://apidocs.io/illustration/python?step=projectFiles&workspaceFolder=Channel%20Management%20API-Python&libraryName=apimaticcalculatorlatest.apimaticcalculatorlatest_client&projectName=apimaticcalculatorlatest&className=ApimaticcalculatorlatestClient)\n\nAfter this you can write code to instantiate an API client object, get a controller object and  make API calls. Sample code is given in the subsequent sections.\n\n### 3. Run the Test Project\n\nTo run the file within your test project, right click on your Python file inside your Test project and click on ```Run```\n\n![Run Test Project - Step 1](https://apidocs.io/illustration/python?step=runProject&workspaceFolder=Channel%20Management%20API-Python&libraryName=apimaticcalculatorlatest.apimaticcalculatorlatest_client&projectName=apimaticcalculatorlatest&className=ApimaticcalculatorlatestClient)\n\n\n## How to Test\n\nYou can test the generated SDK and the server with automatically generated test\ncases. unittest is used as the testing framework and nose is used as the test\nrunner. You can run the tests as follows:\n\n  1. From terminal/cmd navigate to the root directory of the SDK.\n  2. Invoke ```pip install -r test-requirements.txt```\n  3. Invoke ```nosetests```\n\n## Initialization\n\n### Authentication\nIn order to setup authentication and initialization of the API client, you need the following information.\n\n| Parameter | Description |\n|-----------|-------------|\n| jwt | Token which need to be passed in every request as GET parameter. You will get this token in authorization response. Token is valid 1 hour. |\n\n\n\nAPI client can be initialized as following.\n\n```python\n# Configuration parameters and credentials\njwt = 'jwt' # Token which need to be passed in every request as GET parameter. You will get this token in authorization response. Token is valid 1 hour.\n\nclient = ApimaticcalculatorlatestClient(jwt)\n```\n\n\n\n# Class Reference\n\n## <a name=\"list_of_controllers\"></a>List of Controllers\n\n* [ProductController](#product_controller)\n* [LOSPricingController](#los_pricing_controller)\n* [MessagingController](#messaging_controller)\n* [PropertyManagersController](#property_managers_controller)\n* [RequestToBookController](#request_to_book_controller)\n* [ImagesController](#images_controller)\n* [FeeAndTaxMandatoryAtThePropertyLevelController](#fee_and_tax_mandatory_at_the_property_level_controller)\n* [YieldsController](#yields_controller)\n* [FeeAndTaxController](#fee_and_tax_controller)\n* [ValidationController](#validation_controller)\n* [PushNotificationController](#push_notification_controller)\n* [RatesAndAvailabilityController](#rates_and_availability_controller)\n* [ReservationNotificationsController](#reservation_notifications_controller)\n* [TestingOfMessageAPICallsController](#testing_of_message_api_calls_controller)\n* [AuthorizationController](#authorization_controller)\n\n## <a name=\"product_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".ProductController\") ProductController\n\n### Get controller instance\n\nAn instance of the ``` ProductController ``` class can be accessed from the API Client.\n\n```python\n product_controller = client.product\n```\n\n### <a name=\"updateproduct\"></a>![Method: ](https://apidocs.io/img/method.png \".ProductController.updateproduct\") updateproduct\n\n> This function allows a logged in user to update product details.\n> \n> Request parameters and request example will be the same as in the create product API. The only field that must be added is the product id.\n> \n> You need to have all other parameters which were used in the create API call that you want to keep (AltID can’t be updated). Everything that you do not send as an update will be deleted (overwritten).\n> \n> Response parameters and response examples are the same as in the create product API.\n\n```python\ndef updateproduct(self,\n                      content_type,\n                      body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreateUpdatePropertyRequest()\n\nresult = product_controller.updateproduct(content_type, body)\n\n```\n\n\n### <a name=\"createproduct\"></a>![Method: ](https://apidocs.io/img/method.png \".ProductController.createproduct\") createproduct\n\n> This function allows a logged in user to create new product. You can only send one product in each request. \n> \n> \n\n```python\ndef createproduct(self,\n                      content_type,\n                      body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreateUpdatePropertyRequest()\n\nresult = product_controller.createproduct(content_type, body)\n\n```\n\n\n### <a name=\"deletelistproduct\"></a>![Method: ](https://apidocs.io/img/method.png \".ProductController.deletelistproduct\") deletelistproduct\n\n> This function allows logged in user to delete list of products.\n> \n> \n\n```python\ndef deletelistproduct(self,\n                          content_type,\n                          body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = PropertyListRequest()\n\nresult = product_controller.deletelistproduct(content_type, body)\n\n```\n\n\n### <a name=\"create_activationlistproduct\"></a>![Method: ](https://apidocs.io/img/method.png \".ProductController.create_activationlistproduct\") create_activationlistproduct\n\n> This function allows logged in user to activate a list of products in BookingPal. Products MUST be activated successfully before they can be distributed to any channel. \n> \n> Note: When a product is successfully activated it will be queued for the internal BP validation function and you will receive async push messages when the validation is completed - like it is described in the Validation section.\n\n```python\ndef create_activationlistproduct(self,\n                                     content_type,\n                                     body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = PropertyListRequest()\n\nresult = product_controller.create_activationlistproduct(content_type, body)\n\n```\n\n\n### <a name=\"deleteproduct\"></a>![Method: ](https://apidocs.io/img/method.png \".ProductController.deleteproduct\") deleteproduct\n\n> This function allows the logged in user to delete product.\n\n```python\ndef deleteproduct(self,\n                      product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| productId |  ``` Required ```  | Property ID |\n\n\n\n#### Example Usage\n\n```python\nproduct_id = 'productId'\n\nresult = product_controller.deleteproduct(product_id)\n\n```\n\n\n### <a name=\"getproductlist\"></a>![Method: ](https://apidocs.io/img/method.png \".ProductController.getproductlist\") getproductlist\n\n> This API call will return a list of properties that belong to the current user. This means that a user has to be logged in with products created already.\n> Every API call in this section should be with PM credentials.\n\n```python\ndef getproductlist(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = product_controller.getproductlist()\n\n```\n\n\n### <a name=\"create_deactivationlistproduct\"></a>![Method: ](https://apidocs.io/img/method.png \".ProductController.create_deactivationlistproduct\") create_deactivationlistproduct\n\n> This function allows the logged in user to deactivate a list of products. This function will also close the calendars on every channel the products have been listed on.\n\n```python\ndef create_deactivationlistproduct(self,\n                                       content_type,\n                                       body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = PropertyListRequest()\n\nresult = product_controller.create_deactivationlistproduct(content_type, body)\n\n```\n\n\n### <a name=\"getproductby_id\"></a>![Method: ](https://apidocs.io/img/method.png \".ProductController.getproductby_id\") getproductby_id\n\n> This function allows logged in user to get a specific product.\n\n```python\ndef getproductby_id(self,\n                        product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| productId |  ``` Required ```  | Id of the property |\n\n\n\n#### Example Usage\n\n```python\nproduct_id = 'productId'\n\nresult = product_controller.getproductby_id(product_id)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"los_pricing_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".LOSPricingController\") LOSPricingController\n\n### Get controller instance\n\nAn instance of the ``` LOSPricingController ``` class can be accessed from the API Client.\n\n```python\n los_pricing_controller = client.los_pricing\n```\n\n### <a name=\"createandupdate_los_lengthof_stay_pricing\"></a>![Method: ](https://apidocs.io/img/method.png \".LOSPricingController.createandupdate_los_lengthof_stay_pricing\") createandupdate_los_lengthof_stay_pricing\n\n> Introduction: You can use this function if you would like to send BookingPal different prices for various Length of Stays with the same starting date.\n> \n> \n> \n> LOS Pricing will be a different method in sending rates to BookingPal and is defined as pricing sent for a specific “Stay ranges”, In the LOS  method you are setting specific rates based on the Length of Stay. (This is a different way to push rates to BookingPal. )\n> \n> \n> \n> For date periods of 1 to 30 days a specific rate need to enter check-in date and a rate for every possible reservation starting at that date (i.e. 1 day, 2 days, up to 30 days, 30 days is the maximum value allowed for this field) you will need to send BookingPal total rate value for that period. \n> \n> \n> \n> Maximum LOS number of days is 30. All other LOS values after 30 will not be saved. If you do not support reservation for some specific number of dates - send value 0.00 for this LOS number of days. Keep in mind that all values not sent for any specific check-in date will be considered as 0, and reservation for this number of days will not be possible.\n> \n> Field maxGuests allows you to set different rates per different number of guests. If you do not have different rate values per number of guests - you can send the value for maximum number of guests, and all others will have the same rate.\n> \n> \n> \n> For MLT properties which supported LOS price for update number of count you can use it rates and availability API.\n> \n> \n> \n> It is suggested to manage availability over “rates and availability” API call, and to close/open dates over this call.\n> \n> \n> \n> Note: this API call can be used only if you set supportedLosRates = true on the product. Otherwise using this API for specific product is not possible.\n> \n> \n\n```python\ndef createandupdate_los_lengthof_stay_pricing(self,\n                                                  content_type,\n                                                  body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreateandupdateLOSRequest()\n\nresult = los_pricing_controller.createandupdate_los_lengthof_stay_pricing(content_type, body)\n\n```\n\n\n### <a name=\"getlospriceslistbyproduct_id\"></a>![Method: ](https://apidocs.io/img/method.png \".LOSPricingController.getlospriceslistbyproduct_id\") getlospriceslistbyproduct_id\n\n> This function allows the logged in user to get a LOS rate for property.\n\n```python\ndef getlospriceslistbyproduct_id(self,\n                                     product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| productId |  ``` Required ```  | Property ID in BookingPal |\n\n\n\n#### Example Usage\n\n```python\nproduct_id = 'productId'\n\nresult = los_pricing_controller.getlospriceslistbyproduct_id(product_id)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"messaging_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".MessagingController\") MessagingController\n\n### Get controller instance\n\nAn instance of the ``` MessagingController ``` class can be accessed from the API Client.\n\n```python\n messaging_controller = client.messaging\n```\n\n### <a name=\"getmessagethreads\"></a>![Method: ](https://apidocs.io/img/method.png \".MessagingController.getmessagethreads\") getmessagethreads\n\n> This function allows the logged in user to get all message threads or message threads with unresponded message from guest for whole PM. You need to use PM credentials. There is also paging as optional values. If you do not pass this value, we will return first page and 10 threads per page. And in heading you will get a link for the next page.\n\n```python\ndef getmessagethreads(self,\n                          page,\n                          limit,\n                          thread_type)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| page |  ``` Required ```  | Number of current page |\n| limit |  ``` Required ```  | Limit of how many threads will be showed at one page |\n| threadType |  ``` Required ```  | Request all threads or only threads with  unanswered message {new,all} |\n\n\n\n#### Example Usage\n\n```python\npage = 73\nlimit = 73\nthread_type = 'threadType'\n\nresult = messaging_controller.getmessagethreads(page, limit, thread_type)\n\n```\n\n\n### <a name=\"postnewmessageforspecificthread\"></a>![Method: ](https://apidocs.io/img/method.png \".MessagingController.postnewmessageforspecificthread\") postnewmessageforspecificthread\n\n> This function will allow PM to post new messages in already existing threads.\n\n```python\ndef postnewmessageforspecificthread(self,\n                                        content_type,\n                                        body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = PostnewmessageforspecificthreadRequest()\n\nresult = messaging_controller.postnewmessageforspecificthread(content_type, body)\n\n```\n\n\n### <a name=\"getmessagelistforspecificthread\"></a>![Method: ](https://apidocs.io/img/method.png \".MessagingController.getmessagelistforspecificthread\") getmessagelistforspecificthread\n\n> This function allows the logged in user to get a list of all messages from passed thread Id. You need to use PM credentials.\n> \n> \n\n```python\ndef getmessagelistforspecificthread(self,\n                                        thread_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| threadId |  ``` Required ```  | ID of the thread |\n\n\n\n#### Example Usage\n\n```python\nthread_id = 'threadId'\n\nresult = messaging_controller.getmessagelistforspecificthread(thread_id)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"property_managers_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".PropertyManagersController\") PropertyManagersController\n\n### Get controller instance\n\nAn instance of the ``` PropertyManagersController ``` class can be accessed from the API Client.\n\n```python\n property_managers_controller = client.property_managers\n```\n\n### <a name=\"get_p_mslist\"></a>![Method: ](https://apidocs.io/img/method.png \".PropertyManagersController.get_p_mslist\") get_p_mslist\n\n> This API call will return a list of property managers (PM) that have been created in the BookingPal platform that is associated with your PMS.\n> In all requests in this API section, you need to use your PMS credentials.\n\n```python\ndef get_p_mslist(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = property_managers_controller.get_p_mslist()\n\n```\n\n\n### <a name=\"update_property_managerdetails\"></a>![Method: ](https://apidocs.io/img/method.png \".PropertyManagersController.update_property_managerdetails\") update_property_managerdetails\n\n> This function will update a property manager’s details. In case of an update you do not need to pass all information, but if you have values in one section - all fields inside are mandatory.\n\n```python\ndef update_property_managerdetails(self,\n                                       content_type,\n                                       body,\n                                       id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n| id |  ``` Required ```  | Property Manager ID |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreatenewUpdatePropertyManagerRequest()\nid = 'id'\n\nresult = property_managers_controller.update_property_managerdetails(content_type, body, id)\n\n```\n\n\n### <a name=\"createnew_property_manager\"></a>![Method: ](https://apidocs.io/img/method.png \".PropertyManagersController.createnew_property_manager\") createnew_property_manager\n\n> This API call will allow the PMS to pass all data to BookingPal that is required for registering a new PM (Property Manager). All fields are mandatory - PMS must pass this data in order for a PM account to be created. You need to use PMS credentials for this request.\n\n```python\ndef createnew_property_manager(self,\n                                   content_type,\n                                   body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreatenewUpdatePropertyManagerRequest()\n\nresult = property_managers_controller.createnew_property_manager(content_type, body)\n\n```\n\n\n### <a name=\"get_property_managerdetaildata\"></a>![Method: ](https://apidocs.io/img/method.png \".PropertyManagersController.get_property_managerdetaildata\") get_property_managerdetaildata\n\n> This function will return a property manager’s details that belong to the current user. You need to use your PMS API credentials. \n> \n> Request Body parameters are the same as for creating PM.\n> \n> Response is the same as in creating a Property Manager function. Here you do not need to pass all root level fields, but if some are used - all fields inside are mandatory:\n> - in CompanyDetails Model you can pass any field, and none of them is mandatory\n> - in Policies Model - you can pass any field,  and none of them is mandatory\n> - if you do use PaymentPolicy - all fields inside are mandatory\n> - if you do use CancellationPolicy - all fields inside are mandatory\n> - if you use Payment Model - all fields inside are mandatory\n\n```python\ndef get_property_managerdetaildata(self,\n                                       content_type,\n                                       id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| id |  ``` Required ```  | Property Manager ID |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nid = 'id'\n\nresult = property_managers_controller.get_property_managerdetaildata(content_type, id)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"request_to_book_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".RequestToBookController\") RequestToBookController\n\n### Get controller instance\n\nAn instance of the ``` RequestToBookController ``` class can be accessed from the API Client.\n\n```python\n request_to_book_controller = client.request_to_book\n```\n\n### <a name=\"create_requestto_book_test\"></a>![Method: ](https://apidocs.io/img/method.png \".RequestToBookController.create_requestto_book_test\") create_requestto_book_test\n\n> Since you can not get the request to book on our test environment (since this first needs to be created on the channel) We provide the possibility for PMS to test this request with some random filled data in our system. So when you call this API function - we will send you push notification for the request to book for a provided property ID.\n\n```python\ndef create_requestto_book_test(self,\n                                   body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\nbody = RequesttoBookTestRequest()\n\nresult = request_to_book_controller.create_requestto_book_test(body)\n\n```\n\n\n### <a name=\"create_requestto_book_answerfrom_pms\"></a>![Method: ](https://apidocs.io/img/method.png \".RequestToBookController.create_requestto_book_answerfrom_pms\") create_requestto_book_answerfrom_pms\n\n> This is an API call which you should use for accepting on avoiding requests to book.\n\n```python\ndef create_requestto_book_answerfrom_pms(self,\n                                             content_type,\n                                             body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = RequesttoBookAnswerfromPMSRequest()\n\nresult = request_to_book_controller.create_requestto_book_answerfrom_pms(content_type, body)\n\n```\n\n\n### <a name=\"create_requestto_book_request\"></a>![Method: ](https://apidocs.io/img/method.png \".RequestToBookController.create_requestto_book_request\") create_requestto_book_request\n\n> *Tags:*  ``` Skips Authentication ``` \n\n> This will be a request which we will send to PMS when we get a request to book from the channel.\n> So when BookingPal gets a new request to book request - we will push this POST request to the link which you set in BookingPal for your PMS (in Push Notification section - \"requestToBook\"). \n> \n> Important note: In this doc to be able to test this - you need to set a full URL on the Configure button in the right section.\n\n```python\ndef create_requestto_book_request(self,\n                                      body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\nbody = RequestToBookRequestModel()\n\nresult = request_to_book_controller.create_requestto_book_request(body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"images_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".ImagesController\") ImagesController\n\n### Get controller instance\n\nAn instance of the ``` ImagesController ``` class can be accessed from the API Client.\n\n```python\n images_controller = client.images\n```\n\n### <a name=\"createimages\"></a>![Method: ](https://apidocs.io/img/method.png \".ImagesController.createimages\") createimages\n\n> This function allows the logged in user to upload images for the existing product. Every new image will be sorted to the end. The first image sent will be used as the “Main Image”. (Image re-ordering can also be done within the BookingPal platform manually by users)\n\n```python\ndef createimages(self,\n                     content_type,\n                     body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreateimagesRequest()\n\nresult = images_controller.createimages(content_type, body)\n\n```\n\n\n### <a name=\"getimagelistbyproduct_id\"></a>![Method: ](https://apidocs.io/img/method.png \".ImagesController.getimagelistbyproduct_id\") getimagelistbyproduct_id\n\n> This function allows logged in user to get image list for the existing product\n\n```python\ndef getimagelistbyproduct_id(self,\n                                 product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| productId |  ``` Required ```  | ID of the property |\n\n\n\n#### Example Usage\n\n```python\nproduct_id = 'productId'\n\nresult = images_controller.getimagelistbyproduct_id(product_id)\n\n```\n\n\n### <a name=\"deleteallimagesperproperty\"></a>![Method: ](https://apidocs.io/img/method.png \".ImagesController.deleteallimagesperproperty\") deleteallimagesperproperty\n\n> This function allows logged in user to delete images.\n\n```python\ndef deleteallimagesperproperty(self,\n                                   content_type,\n                                   product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| productId |  ``` Required ```  | ID of property for which you want to delete all images |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nproduct_id = 'productId'\n\nresult = images_controller.deleteallimagesperproperty(content_type, product_id)\n\n```\n\n\n### <a name=\"deletelistofimages\"></a>![Method: ](https://apidocs.io/img/method.png \".ImagesController.deletelistofimages\") deletelistofimages\n\n> This function allows the logged in user to delete image(s) from the existing product.\n\n```python\ndef deletelistofimages(self,\n                           content_type,\n                           body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = DeletelistofimagesRequest()\n\nresult = images_controller.deletelistofimages(content_type, body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"fee_and_tax_mandatory_at_the_property_level_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".FeeAndTaxMandatoryAtThePropertyLevelController\") FeeAndTaxMandatoryAtThePropertyLevelController\n\n### Get controller instance\n\nAn instance of the ``` FeeAndTaxMandatoryAtThePropertyLevelController ``` class can be accessed from the API Client.\n\n```python\n fee_and_tax_mandatory_at_the_property_level_controller = client.fee_and_tax_mandatory_at_the_property_level\n```\n\n### <a name=\"getfeeandtaxmandatory\"></a>![Method: ](https://apidocs.io/img/method.png \".FeeAndTaxMandatoryAtThePropertyLevelController.getfeeandtaxmandatory\") getfeeandtaxmandatory\n\n> This function allows the logged in user to get info about current set for all PM properties are fees/taxes set to be mandatory or not.\n> \n> \n\n```python\ndef getfeeandtaxmandatory(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = fee_and_tax_mandatory_at_the_property_level_controller.getfeeandtaxmandatory()\n\n```\n\n\n### <a name=\"create_importorupdatefeeandtaxmandatory\"></a>![Method: ](https://apidocs.io/img/method.png \".FeeAndTaxMandatoryAtThePropertyLevelController.create_importorupdatefeeandtaxmandatory\") create_importorupdatefeeandtaxmandatory\n\n> This function allows the logged in user to import or update a fee and tax mandatory.\n\n```python\ndef create_importorupdatefeeandtaxmandatory(self,\n                                                content_type,\n                                                body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = SetfeeandtaxvalidationsettingRequest()\n\nresult = fee_and_tax_mandatory_at_the_property_level_controller.create_importorupdatefeeandtaxmandatory(content_type, body)\n\n```\n\n\n### <a name=\"create_remove_validation_settings\"></a>![Method: ](https://apidocs.io/img/method.png \".FeeAndTaxMandatoryAtThePropertyLevelController.create_remove_validation_settings\") create_remove_validation_settings\n\n> This function allows the logged in user to remove any setup on property level and to return on default (which is that fee/taxes are mandatory). This API call will accept a list of properties.\n> \n> \n\n```python\ndef create_remove_validation_settings(self,\n                                          content_type,\n                                          body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = PropertyListRequest()\n\nresult = fee_and_tax_mandatory_at_the_property_level_controller.create_remove_validation_settings(content_type, body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"yields_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".YieldsController\") YieldsController\n\n### Get controller instance\n\nAn instance of the ``` YieldsController ``` class can be accessed from the API Client.\n\n```python\n yields_controller = client.yields\n```\n\n### <a name=\"get_ym_rlistbyproduct_id\"></a>![Method: ](https://apidocs.io/img/method.png \".YieldsController.get_ym_rlistbyproduct_id\") get_ym_rlistbyproduct_id\n\n> This function allows the logged in user to get yield management rules list of the specific product.\n> \n> \n\n```python\ndef get_ym_rlistbyproduct_id(self,\n                                 product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| productId |  ``` Required ```  | ID of the property |\n\n\n\n#### Example Usage\n\n```python\nproduct_id = 'productId'\n\nresult = yields_controller.get_ym_rlistbyproduct_id(product_id)\n\n```\n\n\n### <a name=\"create_ymr\"></a>![Method: ](https://apidocs.io/img/method.png \".YieldsController.create_ymr\") create_ymr\n\n> This function allows the logged-in user to add yield management rules for the specific product. Yield management rules can affect the final price of the property depending on some special conditions (like the length of stay, early booking, etc.). These rules automate price manipulations, on an inquiry by inquiry basis. When set criteria are met, they help maximize revenue and occupancy.\n> \n> How is the price calculated?\n> The price for a night is calculated based on the basic price and the yield management rules.\n> \n> - If no YMR:\n> {basic price per night} = price per night\n> - If YMR is set it can Increase/decrease percent or increase/decrease amount:\n> \t{basic price per night} + {yield amount} = {price per night}\n> \tor\n> \t{basic price per night} - {yield amount} = {price per night}\n> \n> The below examples will use the scenario to walk you step by step and explain how the price is calculated based on different YMRs. \n> Let’s say that the basic price per night for 2016 is 100 USD.\n> \n> This function is used also for updating yield. So if you already create a specific yield for some date - and you send a new one - we will update the yield for this date.\n> If you need to delete a specific yield type - you can send an empty list for that type.\n> \n> Important: The maximum allowed end date is 3 years in the future.\n\n```python\ndef create_ymr(self,\n                   content_type,\n                   body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreateYieldRequest()\n\nresult = yields_controller.create_ymr(content_type, body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"fee_and_tax_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".FeeAndTaxController\") FeeAndTaxController\n\n### Get controller instance\n\nAn instance of the ``` FeeAndTaxController ``` class can be accessed from the API Client.\n\n```python\n fee_and_tax_controller = client.fee_and_tax\n```\n\n### <a name=\"getfeeandtaxlistbyproduct_id\"></a>![Method: ](https://apidocs.io/img/method.png \".FeeAndTaxController.getfeeandtaxlistbyproduct_id\") getfeeandtaxlistbyproduct_id\n\n> This function allows the logged in user to get a fee list for the specific product.\n\n```python\ndef getfeeandtaxlistbyproduct_id(self,\n                                     product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| productId |  ``` Required ```  | ID of the property |\n\n\n\n#### Example Usage\n\n```python\nproduct_id = 'productId'\n\nresult = fee_and_tax_controller.getfeeandtaxlistbyproduct_id(product_id)\n\n```\n\n\n### <a name=\"createfeeandtax\"></a>![Method: ](https://apidocs.io/img/method.png \".FeeAndTaxController.createfeeandtax\") createfeeandtax\n\n> This function allows the logged in user to set fees (i.e. cleaning fee, damage waiver, extra bed, extra person etc.) and taxes for the specific product. Here, you always need to send all fees and taxes for one property. All fees or taxes which were in our system for that property and which are not in the new request will be deleted. Taxes in the BookingPal system will always have percent value. \n> \n> If you want to delete all fees and/or taxes for one property (if you do not have fees and taxes in your system for one property) send an empty list of fees and.or taxes. In short when you use this request you need to always send us a full list of fees and taxes per property, since we will do a full update.\n\n```python\ndef createfeeandtax(self,\n                        content_type,\n                        body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreatefeeandtaxRequest()\n\nresult = fee_and_tax_controller.createfeeandtax(content_type, body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"validation_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".ValidationController\") ValidationController\n\n### Get controller instance\n\nAn instance of the ``` ValidationController ``` class can be accessed from the API Client.\n\n```python\n validation_controller = client.validation\n```\n\n### <a name=\"get_booking_pal_validationjob_full_pm\"></a>![Method: ](https://apidocs.io/img/method.png \".ValidationController.get_booking_pal_validationjob_full_pm\") get_booking_pal_validationjob_full_pm\n\n> This function will allow the PMC to call the BookingPal property validation job for all properties identified which belong to the current user. Authorization token should be on PM level. \n> Also we will run validation only for properties which are activated. If you deactivate property - we will not validate this property.\n> \n> After the request you will get a response indicating if messages were processed or not. If the request is good your request for the validator job will be put into a queue. Once the request is processed, BookingPal will send an async push message per property informing the user if a property is valid or not, and if it is not valid - with reasons why the validation failed. This message will be sent on the endpoint which was entered in section Push Notifications, field asyncPush.\n> \n> Note: If the property is distributed already on some channel - this property will not be moved to an Incomplete state. Also if you have property on Incomplete state because of some reason, and you update this data which causes that property is on ‘Incomplete’ property will not be moved automatically to a valid state. Instead, you should run a Validation job manually for that property or wait for our automatic validation job which we are running once per day. \n> \n> To make the property ready for Onboarding you should run validation first. if the property is valid - it will be ready for onboarding. Otherwise - the property will be in Incomplete state. Also, we will run validation only for properties that are activated. If you deactivate property - we will not validate this property.\n\n```python\ndef get_booking_pal_validationjob_full_pm(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = validation_controller.get_booking_pal_validationjob_full_pm()\n\n```\n\n\n### <a name=\"create_booking_pal_validationjob_listofproperties\"></a>![Method: ](https://apidocs.io/img/method.png \".ValidationController.create_booking_pal_validationjob_listofproperties\") create_booking_pal_validationjob_listofproperties\n\n> This function will allow the PMS to call the BookingPal property validation job for a list of properties from request. These properties must belong to the current user and authorization token should be on PM level.\n> Also, we will run validation only for properties that are activated. If you deactivate property - we will not validate this property.\n\n```python\ndef create_booking_pal_validationjob_listofproperties(self,\n                                                          content_type,\n                                                          body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = ValidationforListofpropertiesRequest()\n\nresult = validation_controller.create_booking_pal_validationjob_listofproperties(content_type, body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"push_notification_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".PushNotificationController\") PushNotificationController\n\n### Get controller instance\n\nAn instance of the ``` PushNotificationController ``` class can be accessed from the API Client.\n\n```python\n push_notification_controller = client.push_notification\n```\n\n### <a name=\"get_notification_links\"></a>![Method: ](https://apidocs.io/img/method.png \".PushNotificationController.get_notification_links\") get_notification_links\n\n> This will return all notification URLs which are set. It will work on PMS level, so use PMS credentials.\n> \n> \n\n```python\ndef get_notification_links(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = push_notification_controller.get_notification_links()\n\n```\n\n\n### <a name=\"create_push_notification_links\"></a>![Method: ](https://apidocs.io/img/method.png \".PushNotificationController.create_push_notification_links\") create_push_notification_links\n\n> Provide the links on which the requests about new reservation and cancel reservation will be sent. Links should be https.\n> \n> These links should be set on PMS level, so please use your PMS credentials. \n> \n> \n\n```python\ndef create_push_notification_links(self,\n                                       content_type,\n                                       body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = PushNotificationLinksRequest()\n\nresult = push_notification_controller.create_push_notification_links(content_type, body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"rates_and_availability_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".RatesAndAvailabilityController\") RatesAndAvailabilityController\n\n### Get controller instance\n\nAn instance of the ``` RatesAndAvailabilityController ``` class can be accessed from the API Client.\n\n```python\n rates_and_availability_controller = client.rates_and_availability\n```\n\n### <a name=\"getratesandavailabilityproduct_id\"></a>![Method: ](https://apidocs.io/img/method.png \".RatesAndAvailabilityController.getratesandavailabilityproduct_id\") getratesandavailabilityproduct_id\n\n> This function allows logged in users to get rates and availability for the specific product.\n> Every API call in this section should be with PM credentials.\n\n```python\ndef getratesandavailabilityproduct_id(self,\n                                          content_type,\n                                          product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| productId |  ``` Required ```  | ID of the property |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nproduct_id = 'productId'\n\nresult = rates_and_availability_controller.getratesandavailabilityproduct_id(content_type, product_id)\n\n```\n\n\n### <a name=\"createandupdateratesandavailability\"></a>![Method: ](https://apidocs.io/img/method.png \".RatesAndAvailabilityController.createandupdateratesandavailability\") createandupdateratesandavailability\n\n> Create and update calls are the same. When data is sent, if the data already exists in BookingPal - that data will be updated. Otherwise it will be created (inserted). If you want to update data for some period, you should just send data for these dates. All other data (for other dates) will remain untouched. This allows you to update only changed periods and we will not delete previously sent data for other periods.\n> \n> In the case of a first data push, all data for one property should be sent in one request.  When making updates or changes to existing data, then all changed data should be sent in one request.\n> \n> Note: if property is set to use LOS rates (supportedLosRates) - only field leadTime, array availableCount and availability can be updated in this API call (for MLT property). For SGL property only leadTime and availability can be updated. This API call can not be used for OWN properties.\n> Important: Maximum allowed end date in any data type is 3 years in future.\n> \n> Every API call in this section should be with PM credentials.\n\n```python\ndef createandupdateratesandavailability(self,\n                                            content_type,\n                                            body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| contentType |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\ncontent_type = 'Content-Type'\nbody = CreateandupdateratesandavailabilityRequest()\n\nresult = rates_and_availability_controller.createandupdateratesandavailability(content_type, body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"reservation_notifications_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".ReservationNotificationsController\") ReservationNotificationsController\n\n### Get controller instance\n\nAn instance of the ``` ReservationNotificationsController ``` class can be accessed from the API Client.\n\n```python\n reservation_notifications_controller = client.reservation_notifications\n```\n\n### <a name=\"get_reservationby_product\"></a>![Method: ](https://apidocs.io/img/method.png \".ReservationNotificationsController.get_reservationby_product\") get_reservationby_product\n\n> This function allows logged-in users to get all reservations for the specific product.\n\n```python\ndef get_reservationby_product(self,\n                                  product_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| productId |  ``` Required ```  | Product ID |\n\n\n\n#### Example Usage\n\n```python\nproduct_id = 'productId'\n\nresult = reservation_notifications_controller.get_reservationby_product(product_id)\n\n```\n\n\n### <a name=\"get_reservationby_pm\"></a>![Method: ](https://apidocs.io/img/method.png \".ReservationNotificationsController.get_reservationby_pm\") get_reservationby_pm\n\n> This API call will return a list of reservations that belong to the current user.\n\n```python\ndef get_reservationby_pm(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = reservation_notifications_controller.get_reservationby_pm()\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"testing_of_message_api_calls_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".TestingOfMessageAPICallsController\") TestingOfMessageAPICallsController\n\n### Get controller instance\n\nAn instance of the ``` TestingOfMessageAPICallsController ``` class can be accessed from the API Client.\n\n```python\n testing_of_message_api_calls_controller = client.testing_of_message_api_calls\n```\n\n### <a name=\"get_testmessagelistforspecificthread\"></a>![Method: ](https://apidocs.io/img/method.png \".TestingOfMessageAPICallsController.get_testmessagelistforspecificthread\") get_testmessagelistforspecificthread\n\n> Since API calls for messages depend on channel connections and these values will exist in BookingPal only if guests on channel create some message, these calls can work only on production. So for testing purposes, we’ve built an additional endpoint with the same API calls where you will be able to test these calls.\n> \n> This function allows the logged-in user to get a list of all messages from passed thread Id. You need to use PM credentials\n> \n> Note: To be able to test these calls, you need to have at least 1 property, since we will in response return you messages for 1 property from your PM.\n\n```python\ndef get_testmessagelistforspecificthread(self,\n                                             thread_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| threadId |  ``` Required ```  | ID of thread |\n\n\n\n#### Example Usage\n\n```python\nthread_id = 'threadId'\n\nresult = testing_of_message_api_calls_controller.get_testmessagelistforspecificthread(thread_id)\n\n```\n\n\n### <a name=\"get_testmessagethreads\"></a>![Method: ](https://apidocs.io/img/method.png \".TestingOfMessageAPICallsController.get_testmessagethreads\") get_testmessagethreads\n\n> This function allows the logged in user to get all message threads or message threads with an unresponded message from guest for the whole PM. You need to use PM credentials. There is also paging as optional values. If you do not pass this value, we will return the first page and 10 threads per page.\n> \n> Since API calls for messages depend on channel connections and these values will exist in BookingPal only if guests on channel create some message, these calls can work only on production. So for testing purposes we’ve  built an additional endpoint with the same API calls where you will be able to test these calls.\n> \n> Note: To be able to test these calls, you need to have at least 1 property, since we will in response return you messages for 1 property from your PM.\n\n```python\ndef get_testmessagethreads(self,\n                               page,\n                               limit,\n                               thread_type)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| page |  ``` Required ```  | TODO: Add a parameter description |\n| limit |  ``` Required ```  | TODO: Add a parameter description |\n| threadType |  ``` Required ```  | Request all threads or only threads with unanswered message {new,all} |\n\n\n\n#### Example Usage\n\n```python\npage = 237\nlimit = 237\nthread_type = 'threadType'\n\nresult = testing_of_message_api_calls_controller.get_testmessagethreads(page, limit, thread_type)\n\n```\n\n\n### <a name=\"postnew_testmessageforspecificthread\"></a>![Method: ](https://apidocs.io/img/method.png \".TestingOfMessageAPICallsController.postnew_testmessageforspecificthread\") postnew_testmessageforspecificthread\n\n> This function will allow PM to post new messages in already existing threads. Since this call is only for testing - we will not actually save these passed values.\n> \n> Since API calls for messages depend on channel connections and these values will exist in BookingPal only if guests on channel create some message, these calls can work only on production. So for testing purposes, we’ve built an additional endpoint with the same API calls where you will be able to test these calls.\n> \n> Note: To be able to test these calls, you need to have at least 1 property, since we will in response return to you messages for 1 property from your PM.\n\n```python\ndef postnew_testmessageforspecificthread(self,\n                                             body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\nbody = PostnewmessageforspecificthreadRequest()\n\nresult = testing_of_message_api_calls_controller.postnew_testmessageforspecificthread(body)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"authorization_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".AuthorizationController\") AuthorizationController\n\n### Get controller instance\n\nAn instance of the ``` AuthorizationController ``` class can be accessed from the API Client.\n\n```python\n authorization_controller = client.authorization\n```\n\n### <a name=\"get_login\"></a>![Method: ](https://apidocs.io/img/method.png \".AuthorizationController.get_login\") get_login\n\n> *Tags:*  ``` Skips Authentication ``` \n\n> In order to begin utilizing the platform APIs, your application must be authenticated and authorized to access domain resources. Follow the URL with your credentials and obtain an authorization token which is used in every request.\n> You will have 2 types of tokens. One is on the PMS level, and this one should be used when you send requests related to PMS/PM data. For managing properties, you will need a token on PM level, with PM credentials. For every API call it will be noted which API credentials you should use.\n\n```python\ndef get_login(self,\n                  username,\n                  password)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| username |  ``` Required ```  | Your account email address (for PMS or PM) |\n| password |  ``` Required ```  | Your password |\n\n\n\n#### Example Usage\n\n```python\nusername = 'username'\npassword = 'password'\n\nresult = authorization_controller.get_login(username, password)\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://apimatic.io",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "apimaticcalculatorlatest",
    "package_url": "https://pypi.org/project/apimaticcalculatorlatest/",
    "platform": "",
    "project_url": "https://pypi.org/project/apimaticcalculatorlatest/",
    "project_urls": {
      "Homepage": "https://apimatic.io"
    },
    "release_url": "https://pypi.org/project/apimaticcalculatorlatest/4.0.0/",
    "requires_dist": [
      "requests (<3.0,>=2.9.1)",
      "jsonpickle (<1.0,>=0.7.1)",
      "cachecontrol (<1.0,>=0.11.7)",
      "python-dateutil (<3.0,>=2.5.3)"
    ],
    "requires_python": "",
    "summary": "Python client library for Channel Management API",
    "version": "4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9170963,
  "releases": {
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc802f30ea393a7c6ad3551cc69541eebd8a121dc301bddc9f2ad0e0df255570",
          "md5": "2dfd07a7c926f7bfd7ea10ff95c38498",
          "sha256": "43f4d977278875a624eb065de0ff31b0bb2126d8a4b03be7a4cb1b49f7c55ea6"
        },
        "downloads": -1,
        "filename": "apimaticcalculatorlatest-4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dfd07a7c926f7bfd7ea10ff95c38498",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 189788,
        "upload_time": "2021-01-19T09:56:44",
        "upload_time_iso_8601": "2021-01-19T09:56:44.156762Z",
        "url": "https://files.pythonhosted.org/packages/bc/80/2f30ea393a7c6ad3551cc69541eebd8a121dc301bddc9f2ad0e0df255570/apimaticcalculatorlatest-4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4be8b65ce72b37a7b99247d48e19dd088832a45230f810dcc853b9efca14896e",
          "md5": "5e5adda34d4e4d0919cc404125ca9029",
          "sha256": "399f45cdd3689f5f9ee0e4a744f188902acf93f1143bccf2fdcc0ad29f37bd09"
        },
        "downloads": -1,
        "filename": "apimaticcalculatorlatest-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5e5adda34d4e4d0919cc404125ca9029",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 93951,
        "upload_time": "2021-01-19T09:56:46",
        "upload_time_iso_8601": "2021-01-19T09:56:46.207759Z",
        "url": "https://files.pythonhosted.org/packages/4b/e8/b65ce72b37a7b99247d48e19dd088832a45230f810dcc853b9efca14896e/apimaticcalculatorlatest-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc802f30ea393a7c6ad3551cc69541eebd8a121dc301bddc9f2ad0e0df255570",
        "md5": "2dfd07a7c926f7bfd7ea10ff95c38498",
        "sha256": "43f4d977278875a624eb065de0ff31b0bb2126d8a4b03be7a4cb1b49f7c55ea6"
      },
      "downloads": -1,
      "filename": "apimaticcalculatorlatest-4.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2dfd07a7c926f7bfd7ea10ff95c38498",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 189788,
      "upload_time": "2021-01-19T09:56:44",
      "upload_time_iso_8601": "2021-01-19T09:56:44.156762Z",
      "url": "https://files.pythonhosted.org/packages/bc/80/2f30ea393a7c6ad3551cc69541eebd8a121dc301bddc9f2ad0e0df255570/apimaticcalculatorlatest-4.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4be8b65ce72b37a7b99247d48e19dd088832a45230f810dcc853b9efca14896e",
        "md5": "5e5adda34d4e4d0919cc404125ca9029",
        "sha256": "399f45cdd3689f5f9ee0e4a744f188902acf93f1143bccf2fdcc0ad29f37bd09"
      },
      "downloads": -1,
      "filename": "apimaticcalculatorlatest-4.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5e5adda34d4e4d0919cc404125ca9029",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 93951,
      "upload_time": "2021-01-19T09:56:46",
      "upload_time_iso_8601": "2021-01-19T09:56:46.207759Z",
      "url": "https://files.pythonhosted.org/packages/4b/e8/b65ce72b37a7b99247d48e19dd088832a45230f810dcc853b9efca14896e/apimaticcalculatorlatest-4.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}