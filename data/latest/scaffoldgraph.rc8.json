{
  "info": {
    "author": "Oliver Scott",
    "author_email": "oliver.scott.17@ucl.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Chemistry"
    ],
    "description": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/img/scaffoldgraph.jpg?raw=true\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n\n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n\n    For example, if a user would like to generate a network from two files:\n\n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n\n    They would first use the commands:\n\n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n\n    Further options:\n\n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n\n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n\n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n\n    The final network is now available in 'file.tsv'. Output formats are explained below.\n\n    Further options:\n\n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n\n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n\n    This command can only be performed on an aggregated graph (Not SDF).\n\n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n\n    Options:\n\n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n\n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n\n    Example SMILES file:\n\n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n\n    - ##### SDF Format:\n\n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n\n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n\n- #### Output Formats\n\n    - ##### TSV Format (default)\n\n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n\n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n\n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n\n    - ##### SDF Format\n\n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n\n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n\n\n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n\n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n\n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n\n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n\n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n\n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n\n  network = sg.utils.aggregate(graphs)\n  ```\n\n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n\n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n\n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n\n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n\n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n\n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n\n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n\n      @property\n      def name(self):\n          return 'custom rule 01'\n\n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n\n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n\n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n\n      @property\n      def name(self):\n          return 'custom rule 02'\n\n\n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n\n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n\n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n\n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n\n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n\n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n\n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887–2893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47–58. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528–1538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581–583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:  Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/UCLCheminformatics/scaffoldgraph/archive/1.1.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/UCLCheminformatics/scaffoldgraph",
    "keywords": "rdkit,networkx,cheminformatics,scaffolds,scaffold tree,scaffold network",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ScaffoldGraph",
    "package_url": "https://pypi.org/project/ScaffoldGraph/",
    "platform": "",
    "project_url": "https://pypi.org/project/ScaffoldGraph/",
    "project_urls": {
      "Download": "https://github.com/UCLCheminformatics/scaffoldgraph/archive/1.1.2.tar.gz",
      "Homepage": "https://github.com/UCLCheminformatics/scaffoldgraph"
    },
    "release_url": "https://pypi.org/project/ScaffoldGraph/1.1.2/",
    "requires_dist": [
      "networkx",
      "tqdm",
      "loguru",
      "scipy (>=1.3.1)",
      "matplotlib (>=2.2.2)",
      "pytest",
      "rdkit-pypi ; extra == 'rdkit'",
      "ipycytoscape (>=1.2.0) ; extra == 'vis'"
    ],
    "requires_python": ">=3.6",
    "summary": "ScaffoldGraph is an open-source cheminformatics library, built using RDKit and NetworkX for generating scaffold networks and scaffold trees.",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10672868,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0caa8cc903a44ada4e3eb23abc8ac5116078a8f98604b82439ece750c919e96e",
          "md5": "f9815d3f4310930cc182da167618ab09",
          "sha256": "7d64f1db61997f04ac4607701cdf1b1db978085cb56b1ec87cbda1a7b58ed11a"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f9815d3f4310930cc182da167618ab09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35336,
        "upload_time": "2019-12-16T14:19:56",
        "upload_time_iso_8601": "2019-12-16T14:19:56.348212Z",
        "url": "https://files.pythonhosted.org/packages/0c/aa/8cc903a44ada4e3eb23abc8ac5116078a8f98604b82439ece750c919e96e/ScaffoldGraph-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "527ee7ca1417e5b0a7e84f2d774ee16b412e248d372f1bdfdd1b0a11a29b6b5c",
          "md5": "9304c541052dedb8a8ab9defed3a42b4",
          "sha256": "cdeb123b2e0fb9ef084ff888643f78322cf299b22dc5c28fac9002dc17a1dfc8"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9304c541052dedb8a8ab9defed3a42b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38119,
        "upload_time": "2020-03-20T13:14:49",
        "upload_time_iso_8601": "2020-03-20T13:14:49.498560Z",
        "url": "https://files.pythonhosted.org/packages/52/7e/e7ca1417e5b0a7e84f2d774ee16b412e248d372f1bdfdd1b0a11a29b6b5c/ScaffoldGraph-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0c5fedea8fb753ebea7563308380e03032885cdf391e162c495de164724d5ea",
          "md5": "351213150b1630139c9e54179f32ab79",
          "sha256": "f4a0389fd6c130b818faff2f7e12515b8ce5813a34de6b4565ba8a60e952a70f"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "351213150b1630139c9e54179f32ab79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41393,
        "upload_time": "2020-05-15T14:27:09",
        "upload_time_iso_8601": "2020-05-15T14:27:09.487671Z",
        "url": "https://files.pythonhosted.org/packages/c0/c5/fedea8fb753ebea7563308380e03032885cdf391e162c495de164724d5ea/ScaffoldGraph-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50187c8951c92d1a17ada5c4cb3c7eb1a6ff5ba0141b9b807b7ed54d7d7520b8",
          "md5": "d347471b5451507804d9f664041d12a4",
          "sha256": "5b0f28d6e52977792ba00fdb8f2acdba66e35e616117752e45c434c19253fd4a"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d347471b5451507804d9f664041d12a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72518,
        "upload_time": "2020-09-15T12:23:59",
        "upload_time_iso_8601": "2020-09-15T12:23:59.644933Z",
        "url": "https://files.pythonhosted.org/packages/50/18/7c8951c92d1a17ada5c4cb3c7eb1a6ff5ba0141b9b807b7ed54d7d7520b8/ScaffoldGraph-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b14850a03cc23b0d0edb37a62165c70e968d8098d3e7463f4980d46abf21dee1",
          "md5": "cfde261465474710031810fa9bc9eb88",
          "sha256": "bb8577f22f92cab13a760c1087a79c7eaf543b6ea2b1fe77c7c778976d0cc333"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cfde261465474710031810fa9bc9eb88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62060,
        "upload_time": "2020-09-15T12:24:01",
        "upload_time_iso_8601": "2020-09-15T12:24:01.107843Z",
        "url": "https://files.pythonhosted.org/packages/b1/48/50a03cc23b0d0edb37a62165c70e968d8098d3e7463f4980d46abf21dee1/ScaffoldGraph-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83c5b1894494406c55e3c70419454bf1246abc19ccc76d520dfff07f0855daa0",
          "md5": "5958d7bfe7f829b0bb72e3e7231719a6",
          "sha256": "036fe64b15f01a56579fd33edbded42a65e7034177792ce42173a774d23b0db4"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5958d7bfe7f829b0bb72e3e7231719a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60408,
        "upload_time": "2020-11-18T12:38:28",
        "upload_time_iso_8601": "2020-11-18T12:38:28.387679Z",
        "url": "https://files.pythonhosted.org/packages/83/c5/b1894494406c55e3c70419454bf1246abc19ccc76d520dfff07f0855daa0/ScaffoldGraph-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26a3045ca57000ab9faa3cc83b06b9fef5adb09bf7cf967703859563a57b332d",
          "md5": "d81f5fa3b0d2335a8b310c748d0f98b5",
          "sha256": "8c026e7d048fc4ddb5a5b11aa7ef8cc8648dbe0988b47ee2626087a548a7064f"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d81f5fa3b0d2335a8b310c748d0f98b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52965,
        "upload_time": "2020-11-18T12:38:30",
        "upload_time_iso_8601": "2020-11-18T12:38:30.021406Z",
        "url": "https://files.pythonhosted.org/packages/26/a3/045ca57000ab9faa3cc83b06b9fef5adb09bf7cf967703859563a57b332d/ScaffoldGraph-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8e955fde8167fbf8f718aad988412eb056d0042c18c68118ff57b2bd1cfb0a3",
          "md5": "ec44ee0ab31b958ecf674b0c28c09332",
          "sha256": "8d8d262d59ca01d5fd59d18987c1bfa32f778e6b58b10784d590402b4c45e55d"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec44ee0ab31b958ecf674b0c28c09332",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 75976,
        "upload_time": "2021-02-01T13:18:02",
        "upload_time_iso_8601": "2021-02-01T13:18:02.538187Z",
        "url": "https://files.pythonhosted.org/packages/a8/e9/55fde8167fbf8f718aad988412eb056d0042c18c68118ff57b2bd1cfb0a3/ScaffoldGraph-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16c0b02fd8c395e105373491279517794a59a6ecb0906c2dcd72072c4c20c50e",
          "md5": "ff59b981ab35971708a7a4bb410f4c94",
          "sha256": "3e1ac1def06b92c673eb83152427c56b8553d3f6cc02738dbc1563ea833f1ca7"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ff59b981ab35971708a7a4bb410f4c94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 66798,
        "upload_time": "2021-02-01T13:18:03",
        "upload_time_iso_8601": "2021-02-01T13:18:03.856920Z",
        "url": "https://files.pythonhosted.org/packages/16/c0/b02fd8c395e105373491279517794a59a6ecb0906c2dcd72072c4c20c50e/ScaffoldGraph-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "896609eb1f924d50ecf7bd3e58bf1c7bd7bef351a99eba81202cf7debf3c8a37",
          "md5": "d0539039ed1631f7b7fc7d30049e7117",
          "sha256": "e1c752d0713ae326f3355edda99875a8c2458f3c2247dc1c6f7ab3e6fa9e4bcb"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0539039ed1631f7b7fc7d30049e7117",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 76997,
        "upload_time": "2021-02-15T12:13:27",
        "upload_time_iso_8601": "2021-02-15T12:13:27.556094Z",
        "url": "https://files.pythonhosted.org/packages/89/66/09eb1f924d50ecf7bd3e58bf1c7bd7bef351a99eba81202cf7debf3c8a37/ScaffoldGraph-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "527067271666e939230e6ce76327f8f4361eac840884155879593141b9e8d218",
          "md5": "57fd8efb9b199a1b42eca8c4a467dec3",
          "sha256": "f7db27f7f09d72b8453bab56c8d1094655e89094e33a9840af2d0dcad3b3c0c1"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "57fd8efb9b199a1b42eca8c4a467dec3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 82467,
        "upload_time": "2021-02-15T12:13:28",
        "upload_time_iso_8601": "2021-02-15T12:13:28.846822Z",
        "url": "https://files.pythonhosted.org/packages/52/70/67271666e939230e6ce76327f8f4361eac840884155879593141b9e8d218/ScaffoldGraph-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e415eab91a15a390b82ef3b80894f012ec021f7cf766033e2a66874355d1908",
          "md5": "893ddf30c8f459b5ac26aeedc0a6e925",
          "sha256": "a9cfc06bd46f36142cf22c9a94a3c8343bb178e3257beab76945162f4a32a0c3"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "893ddf30c8f459b5ac26aeedc0a6e925",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 77784,
        "upload_time": "2021-06-17T11:02:58",
        "upload_time_iso_8601": "2021-06-17T11:02:58.149751Z",
        "url": "https://files.pythonhosted.org/packages/6e/41/5eab91a15a390b82ef3b80894f012ec021f7cf766033e2a66874355d1908/ScaffoldGraph-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1a899af54810e150e54137f95993d1a02c028465897e3dbfa37f77b56cfc0cf",
          "md5": "4c59d1eaf4f7cd52443d4e464515f2d2",
          "sha256": "53bb45b59302c4f0fca8b6b380d79a8cd82f954727e22ec08015f4c6f3ea7640"
        },
        "downloads": -1,
        "filename": "ScaffoldGraph-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4c59d1eaf4f7cd52443d4e464515f2d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 83436,
        "upload_time": "2021-06-17T11:03:00",
        "upload_time_iso_8601": "2021-06-17T11:03:00.048627Z",
        "url": "https://files.pythonhosted.org/packages/e1/a8/99af54810e150e54137f95993d1a02c028465897e3dbfa37f77b56cfc0cf/ScaffoldGraph-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e415eab91a15a390b82ef3b80894f012ec021f7cf766033e2a66874355d1908",
        "md5": "893ddf30c8f459b5ac26aeedc0a6e925",
        "sha256": "a9cfc06bd46f36142cf22c9a94a3c8343bb178e3257beab76945162f4a32a0c3"
      },
      "downloads": -1,
      "filename": "ScaffoldGraph-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "893ddf30c8f459b5ac26aeedc0a6e925",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 77784,
      "upload_time": "2021-06-17T11:02:58",
      "upload_time_iso_8601": "2021-06-17T11:02:58.149751Z",
      "url": "https://files.pythonhosted.org/packages/6e/41/5eab91a15a390b82ef3b80894f012ec021f7cf766033e2a66874355d1908/ScaffoldGraph-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1a899af54810e150e54137f95993d1a02c028465897e3dbfa37f77b56cfc0cf",
        "md5": "4c59d1eaf4f7cd52443d4e464515f2d2",
        "sha256": "53bb45b59302c4f0fca8b6b380d79a8cd82f954727e22ec08015f4c6f3ea7640"
      },
      "downloads": -1,
      "filename": "ScaffoldGraph-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4c59d1eaf4f7cd52443d4e464515f2d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 83436,
      "upload_time": "2021-06-17T11:03:00",
      "upload_time_iso_8601": "2021-06-17T11:03:00.048627Z",
      "url": "https://files.pythonhosted.org/packages/e1/a8/99af54810e150e54137f95993d1a02c028465897e3dbfa37f77b56cfc0cf/ScaffoldGraph-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}