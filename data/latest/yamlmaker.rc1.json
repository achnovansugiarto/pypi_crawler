{
  "info": {
    "author": "Anthony Hawkins",
    "author_email": "ahawkins.mail@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# YAMLmaker\n**Stop Templating. Start Generating.**\n\nYAMLmaker is a simple utility module to help you *generate* YAML using pure python.\n## Hello World\n`pip install yamlmaker`\n```python\n#hello_world.py\nfrom yamlmaker import generate\n\nconfig = {\n  \"hello\": \"world\"\n}\n\ngenerate(config)\n```\n\n```\npython hello_world.py\n```\n```yaml\n#hello_world.yml\nhello: world\n```\n## Background\nYAML is being used for many of the cool new tools in technology. Kubernetes, Concourse, Salt, Ansible etc. all use YAML but building complex configurations can be a real pain.\n\nIt all starts with trying to interpolate a few variables into a YAML config, but before you know it, you're adding if statements, looping, and developing custom macros. perhaps you're using jinja2, YTT, spruce, or kustomize. These tools all try to work within the YAML document itself and can only offer so much control.  \n\nAt some point you need to ask yourself if it's easier adding a programing language within a data structure or working with a data structure within a programing language.  That's where YAMLmaker's approach comes from.  This isn't a new tool or CLI utility, it's simply a helper module which allows you to simply generate YAML using pure python.\n\n## Python 3.9 Caveat\nThis module strictly works with python `3.9+`. The reason being is that 3.9 introduces the new [dictionary union operator](https://www.python.org/dev/peps/pep-0584/) `dict1 | dict2`.\n\n\n## Utilities\n### generate(list | dictionary)\nThe `generate()` function is the core of YAMLmaker. Under the cover it wraps the PyYAML's `yaml.dump()` function. In addition to just dumping to a YAML file it does the following.\n\n1. Creates a YAML file with the same name as the Python file. i.e. `python my_config.py` will produce a file called `my_config.yml`\n2. Handles multiline content using the yaml `|- `. For example, if you include a certificate it will display nicely on multiple lines.\n3. Does not include anchors or pointers in the yaml `& and *` etc. \n4. Preserves Sorting.  The order in which you write your configuration will be the same order when generated into YAML.\n#### Example\n```python\n#example.py\nfrom yamlmaker import generate\nconfig = {\n  \"hello\": \"world\"\n}\n\ngenerate(config)\n```\n```yaml\n#example.yml\nhello: world\n```\n\n### env(string)\nThe `env()` utility returns the value of the name of an environment variable, passed, as a string.\n\nIf the environment variable does not exist it will return an empty string, `\"\"`.\n\n#### Example\n```bash\n#bash\nexport FOO=\"bar\"\n```\n\n```python\n#example.py\nfrom yamlmaker import generate, env\nconfig = {\n  \"foo\": env(\"FOO\")\n}\n\ngenerate(config)\n```\n```yaml\n#example.yml\nfoo: bar\n```\n\n### cmd(string)\nThe `cmd()` function will return the value for the command passed to it as string. For instance, if you have to pluck a secret from vault or require the output of a bash/powershell command. \n\n#### Powershell Example\n```python\n#example.py\nfrom yamlmaker import generate, cmd\nconfig = {\n  \"foo\": cmd(\"powershell Write-Host 'bar'\")\n}\ngenerate(config)\n```\n```yaml\n#example.yml\nfoo: bar\n```\n#### Bash Example\n```python\n#example.py\nfrom yamlmaker import generate, cmd\nconfig = {\n  \"foo\": cmd(\"echo bar\") #*\n}\ngenerate(config)\n```\n```yaml\n#example.yml\nfoo: bar\n```\n***Note:** When passing bash commands, remove the quotes around strings to ensure the value is returned properly.  If you need to use an environment variable within the command you can do this: \n```python\ncmd(\"echo \" + env('FOO'))\n```\n\n### Sources(dictionary)\nThe `Sources` class helps with sourcing in external YAML data, such as variable files.\n\nSources works by instantiating a new instance of `Sources` and passing it dictionary where the labels are the keys and the file_paths are the values.  This ensures that the files are only loaded once, and it provides an alias that the file can go by to avoid referencing long path names every time a value is needed from the source file.\n\n#### Example\n```python\nfrom yamlmaker import Sources\n\nsources = Sources({\n  \"foo-vars\": \"some/path/to/foo-vars.yml\",\n  \"bar-vars\": \"some/path/to/bar-vars.yml\"\n})\n```\n\n### Sources.grab(label, path)\nOnce an instance of sources has been created, you can then use the `grab()` method to pluck out values.\n\nThe grab method takes the label of the source to grab from and the path to the value using dot notation.  Using integers will reference the position of a list item.  \n\n#### Examples\n```yaml\n# foo-vars.yml\nfoo: bar\nbiz: baz\nbuz:\n  - boo\n  - goo\n  - doo\n```\n```yaml\n# bar-vars.yml\nalpha:\n  beta:\n    - one: 1\n      two: 2\n      three: 3\n    - ten: 10\n      twenty: 20\n```\n\n```python\n#example.py\nfrom yamlmaker import generate, Sources\n\nsources = Sources({\n  \"foo-vars\": \"some/path/to/foo-vars.yml\",\n  \"bar-vars\": \"some/path/to/bar-vars.yml\"\n})\n\nconfig = {\n  \"thing-one\": sources.grab(\"foo-vars\",\"biz\") ,\n  \"thing-two\": sources.grab(\"foo-vars\", \"buz.1\")\n  \"thing-three\": sources.grab(\"bar-vars\", \"alpha.beta.1.ten\")\n}\n\ngenerate(config)\n```\n\n```yaml\n#example.yml\nthing-one: baz\nthing-two: goo\nthing-three: 10\n```\n\n### Files(dictionary)\nThe `Files` class helps with sourcing in external file content, such as pem files, etc.  \n\nSources works by instantiating a new instance of `Files` and passing it dictionary where the labels are the keys and the file_paths are the values.  This ensures that the files are only loaded once, and it provides an alias that the file can go by to avoid referencing long path names every time the contents of a file is needed.\n\n#### Example\n```python\nfrom yamlmaker import Files\n\nfiles = Files({\n  \"pub-key\": \"some/path/to/pubkey.cert\"\n})\n```\n### Files.grab(label)\nOnce an instance of files has been created, you can then use the `grab()` method to retrieve the contents of a file by its label.\n\n\n#### Examples\n```\n#pubkey.cert\n\n-----BEGIN CERTIFICATE-----\nMIINMDCCDBigAwIBAgIQFwVvbgUxBFQFAAAAAIfenTANBgkqhkiG9w0BAQsFADBC\nMQswCQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZpY2VzMRMw\nEQYDVQQDEwpHVFMgQ0EgMU8xMB4XDTIxMDUyNDAxMzYwMFoXDTIxMDgxNjAxMzU1\nOVowZjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcT\nDU1vdW50YWluIFZpZXcxEzARBgNVBAoTCkdvb2dsZSBMTEMxFTATBgNVBAMMDCou\n...\nU2mUhTIelGiXuuurDjTQD11oCR2jrp6hi4aToQ+yG3b1Kv82JBcZxRhUggLVbGJM\nktsuqVkVli8n7gmjGH5pP27T/JqAam4ej/Gqd+6SklI9xE0+DHI2bkB0IGTdzTPR\n8dt6A10e5tlmXsAb/8HCyUuNwqtUrgQN4zKmigZG8SdTYqlfy1mXHvPO6b/qZ0jF\nZUKuCmlAJryMEsyJdcX6yl4Hvub6/O7QUoaxr6L3Kr3UJ8hIy8GdmqLP2YWVt9Au\nUz4hDpQ9cE705FYs43M7S/40IeI=\n-----END CERTIFICATE-----\n```\n```python\n#example.py\nfrom yamlmaker import generate, Files\n\nfiles = Files({\n  \"pub-key\": \"some/path/to/pubkey.cert\"\n})\n\nconfig = {\n  \"some-pub-key\": files.grab(\"pub-key\")\n}\n\ngenerate(config)\n```\n```yaml\nsome-pub-key: |-\n  -----BEGIN CERTIFICATE-----\n  MIINMDCCDBigAwIBAgIQFwVvbgUxBFQFAAAAAIfenTANBgkqhkiG9w0BAQsFADBC\n  MQswCQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZpY2VzMRMw\n  EQYDVQQDEwpHVFMgQ0EgMU8xMB4XDTIxMDUyNDAxMzYwMFoXDTIxMDgxNjAxMzU1\n  OVowZjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcT\n  DU1vdW50YWluIFZpZXcxEzARBgNVBAoTCkdvb2dsZSBMTEMxFTATBgNVBAMMDCou\n  ...\n  U2mUhTIelGiXuuurDjTQD11oCR2jrp6hi4aToQ+yG3b1Kv82JBcZxRhUggLVbGJM\n  ktsuqVkVli8n7gmjGH5pP27T/JqAam4ej/Gqd+6SklI9xE0+DHI2bkB0IGTdzTPR\n  8dt6A10e5tlmXsAb/8HCyUuNwqtUrgQN4zKmigZG8SdTYqlfy1mXHvPO6b/qZ0jF\n  ZUKuCmlAJryMEsyJdcX6yl4Hvub6/O7QUoaxr6L3Kr3UJ8hIy8GdmqLP2YWVt9Au\n  Uz4hDpQ9cE705FYs43M7S/40IeI=\n  -----END CERTIFICATE-----\n```\n\n### Include\nThe `Include` helper class acts like an if statement and is useful when you need to append to or merge additional data into a data structure.  \n\n### Include.when(statement, if_block, else_block)\nThe Include class contains one method, called, `when` which implements an if-else block.\n\nThe `if_block` and `else_block` simply return the value passed to them if the expression is `True` or `False`.  By default, the `else_block` will return an empty for the `Type` of the value passed in for the `if_block`. i.e. `\"\"`, `[]`, or `{}`.\n\n#### Examples with Dictionaries\n**When True**\n```python\n#example.py\nfrom yamlmaker import generate, Include\n\nconfig = {\n  \"foo\": \"bar\"\n} | Include.when(\"x\" == \"x\", {\n  \"biz\": \"baz\"\n})\n\ngenerate(config)\n```\n```yaml\n#example.yml\nfoo: bar\nbiz: baz\n```\n**When False**\n```python\n#example.py\nfrom yamlmaker import generate, Include\n\nconfig = {\n  \"foo\": \"bar\"\n} | Include.when(\"x\" == \"y\", {\n  \"biz\": \"baz\"\n})\n\ngenerate(config)\n```\n```yaml\n#example.yml\nfoo: bar\n```\n**Use of Else Block**\n```python\n#example.py - using positional args\nfrom yamlmaker import generate, Include\n\nconfig = {\n  \"foo\": \"bar\"\n} | Include.when(\"x\" == \"y\", {\n  \"biz\": \"baz\"\n}, {\n  \"biz\": \"zub\"\n})\n\ngenerate(config)\n```\n```python\n#example.py - using keyword args\nfrom yamlmaker import generate, Include\n\nconfig = {\n  \"foo\": \"bar\"\n} | Include.when(\"x\" == \"y\", if_block={\n  \"biz\": \"baz\"\n}, else_block={\n  \"biz\": \"zub\"\n})\n\ngenerate(config)\n```\n\n```yaml\n#example.yml\nfoo: bar\nbiz: zub\n```\n#### Examples with Lists\n```python\n#example.py\nfrom yamlmaker import generate, Include\n\nconfig = {\n  \"foos\": [\n    \"biz\",\n    \"baz\",\n  ] + Include.when(\"x\" == \"x\", [\n    \"bin\",\n    \"zub\"\n  ])\n}\ngenerate(config)\n```\n```yaml\n#example.yml\nfoos:\n- biz\n- baz\n- bin\n- zub\n\n```\n#### In-line List Examples\nInstead of using the concat operator, `+` you can also specify the Include to be used in-line within the data-structure. \n\nHowever, this will produce empty values within the list. see `prune_empty()` for how to deal with this.\n\n**When True**\n```python\nfrom yamlmaker import generate, Include\n\nconfig = {\n  \"foos\": [\n    \"biz\",\n    Include.when(\"x\" == \"x\", \"baz\")\n  ]\n}\ngenerate(config)\n```\n```yaml\n#example.yml\nfoos:\n- biz\n- baz\n```\n**When False**\n```python\nfrom yamlmaker import generate, Include\n\nconfig = {\n  \"foos\": [\n    \"biz\",\n    Include.when(\"x\" == \"y\", \"baz\")\n  ]\n}\ngenerate(config)\n```\n```yaml\n#example.yml\nfoos:\nfoos:\n- biz\n- \"\"\n```\n\n### prune_empty()\nAs seen above, when using `Include.when()` in-line, within a list, it will leave a blank value where the `Include` statement was. To solve this you can wrap the list with `prune_empty()` which will eliminate the empty values.\n\n```python\n#example.py\nfrom yamlmaker import generate, Include, prune_empty\n\nconfig = {\n  \"foos\": prune_empty([\n    \"biz\",\n    Include.when(\"x\" == \"y\", \"baz\")\n  ])\n}\ngenerate(config)\n```\n```yaml\n#example.yml\nfoos:\n- biz\n```\n\n## Pure Python Examples\nSome examples using just Python and generate.\n### For Loop\nYAMLmaker doesn't include things like looping etc. But here is an example using Python and the `for` loop to help generate a list.\n```python\n#example.py\nfrom yamlmaker import generate\n\nconfig = {\n  \"things\": [\n    {\n      \"foo\": item\n    } for item in [\n      \"bar\",\n      \"biz\",\n      \"baz\"\n    ]\n  ]\n}\ngenerate(config)\n```\n```yaml\n#example.yml\nthings:\n- foo: bar\n- foo: biz\n- foo: baz\n```\n### Merging Dictionaries\nIn Python 3.9 and in the examples above, the union operator `|` is used heavily to merge multiple dictionaries together.  Just be aware that the behavior is to always override an existing key rather than perform a deep merge.\n```python\n#example.py\nfrom yamlmaker import generate\n\nconfig_one = {\n  \"foo\": \"bar\"\n}\n\nconfig_two = {\n  \"biz\": \"bar\",\n  \"things\": [\n    \"one\",\n    \"two\"\n  ]\n}\n\nconfig_three = {\n  \"foo\": \"notbar\",\n  \"things\": [\n    \"three\"\n  ]\n}\n\nconfig = config_one | config_two | config_three\ngenerate(config)\n```\n```yaml\n#example.yml\nfoo: notbar\nbiz: bar\nthings:\n- three\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anthonyhawkins/yamlmaker",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yamlmaker",
    "package_url": "https://pypi.org/project/yamlmaker/",
    "platform": "",
    "project_url": "https://pypi.org/project/yamlmaker/",
    "project_urls": {
      "Bug Tracker": "https://github.com/anthonyhawkins/yamlmaker/issues",
      "Homepage": "https://github.com/anthonyhawkins/yamlmaker"
    },
    "release_url": "https://pypi.org/project/yamlmaker/0.0.8/",
    "requires_dist": [
      "pyyaml"
    ],
    "requires_python": ">=3.9",
    "summary": "YAML Generator Utilities",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10931598,
  "releases": {
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e2d593ba9d459b4957419533d5d4eb41b1f314bc10c73f255d2702d08a0467f",
          "md5": "33f89f8866a545b27b0d16f5a978cd30",
          "sha256": "99532c5bac88db64589b64ab69a8ded41943258c4f065814313a0334fc501617"
        },
        "downloads": -1,
        "filename": "yamlmaker-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33f89f8866a545b27b0d16f5a978cd30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7874,
        "upload_time": "2021-07-16T20:47:10",
        "upload_time_iso_8601": "2021-07-16T20:47:10.614888Z",
        "url": "https://files.pythonhosted.org/packages/2e/2d/593ba9d459b4957419533d5d4eb41b1f314bc10c73f255d2702d08a0467f/yamlmaker-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8625b58bfc6a3727acf5c5ca32d8eda62fe862a8decf972f4a0019ee85c228a",
          "md5": "a43152a4b9a0323558abf816eeaaaef1",
          "sha256": "af359f2cae0b386215cf662e3e673e1300ecbceb2d801510bd4712634ccffb45"
        },
        "downloads": -1,
        "filename": "yamlmaker-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a43152a4b9a0323558abf816eeaaaef1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 8012,
        "upload_time": "2021-07-16T20:47:12",
        "upload_time_iso_8601": "2021-07-16T20:47:12.443423Z",
        "url": "https://files.pythonhosted.org/packages/d8/62/5b58bfc6a3727acf5c5ca32d8eda62fe862a8decf972f4a0019ee85c228a/yamlmaker-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e2d593ba9d459b4957419533d5d4eb41b1f314bc10c73f255d2702d08a0467f",
        "md5": "33f89f8866a545b27b0d16f5a978cd30",
        "sha256": "99532c5bac88db64589b64ab69a8ded41943258c4f065814313a0334fc501617"
      },
      "downloads": -1,
      "filename": "yamlmaker-0.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "33f89f8866a545b27b0d16f5a978cd30",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 7874,
      "upload_time": "2021-07-16T20:47:10",
      "upload_time_iso_8601": "2021-07-16T20:47:10.614888Z",
      "url": "https://files.pythonhosted.org/packages/2e/2d/593ba9d459b4957419533d5d4eb41b1f314bc10c73f255d2702d08a0467f/yamlmaker-0.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8625b58bfc6a3727acf5c5ca32d8eda62fe862a8decf972f4a0019ee85c228a",
        "md5": "a43152a4b9a0323558abf816eeaaaef1",
        "sha256": "af359f2cae0b386215cf662e3e673e1300ecbceb2d801510bd4712634ccffb45"
      },
      "downloads": -1,
      "filename": "yamlmaker-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "a43152a4b9a0323558abf816eeaaaef1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 8012,
      "upload_time": "2021-07-16T20:47:12",
      "upload_time_iso_8601": "2021-07-16T20:47:12.443423Z",
      "url": "https://files.pythonhosted.org/packages/d8/62/5b58bfc6a3727acf5c5ca32d8eda62fe862a8decf972f4a0019ee85c228a/yamlmaker-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}