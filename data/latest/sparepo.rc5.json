{
  "info": {
    "author": "Josh Borrow",
    "author_email": "josh@joshborrow.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "SpAREPO\n=======\n\n[![PyPI version](https://badge.fury.io/py/sparepo.svg)](https://badge.fury.io/py/sparepo)\n\nSpatial hasthtable building for AREPO. Built to be extremely lightweight\nand low-code, with an easily understandable hashtable file.\n\nPurpose\n-------\n\nThe AREPO snapshots are stored by halo, rather than by spatial region. This\nmakes it complex to load _spatially_, for instance getting all particles within a\n10 Mpc radius of a given point. To do so typically requires loading all data in all\nsnapshot chunks, and rejecting the vast majority of the data. It also means that\neven if you just want some particle property (like e.g. the internal energies), you\nstill need to load all of the co-ordinates.\n\n`sparepo` solves this by building a 'hashtable' file, which coarse-grains the\nparticles onto a top-level grid, by interating through the file once. Then, at\nany point afterwards, you can request any set of cells to be read out\nof the snapshot, already 'knowing' which files (and which positions in file!)\nthat the particles are in.\n\n`sparepo` provides utilities to build the hashtables, but also provides the\nutilities to read said hashtables in python. The file format, described below,\nfor the hashtable is simple so it can be used in other\nimplementations if required.\n\nRequirements\n------------\n\nIt is recommended that you use a recent version of python for `sparepo`,\nat least 3.8 (as that is the lowest that we will test on), and no effort is\nmade to maintain compatibility with any versions of python before this.\n`sparepo` requires:\n\n+ `numba` (and hence `llvmlite`)\n+ `numpy`\n+ `h5py`\n+ `attrs`\n\nFile formatting is taken care of by `black` and `isort`.\n\nFile Format\n-----------\n\nThe spatial hashtable that is created has the following file\nstructure:\n\n```\nHeader/\n    Attrs: {\n        BoxSize: The box size in given units including h factors.\n        NumberOfChunks: M\n        Units: Units that length scales are in\n        HubbleParam: Hubble parameter\n        HubbleParamScaling: For the length units, the exponent of h\n    }\nCells/\n    Centrers: Nx3 Array of Cell Centers\n    Counts/\n        PartTypeX : NxM length array of total counts, with M the number of chunks.\n    Attrs: {\n        Size: 1D size of the cells\n        NumberOfCells: N, Total number of cells\n        CellsPerAxis: cbrt(N), number of cells per axis.\n    }\nPartTypeX/\n    CellY/\n        FileZ: Length O array of indicies.\n            Attrs: {\n                FileName: Pathless filename of this file.\n                FileNumber: Integer file number of this file, helpful\n                            for indexing the arrays.\n            }\n```\n\nwith the indexing into the cell array being specified as:\n\n```python\nx_cell * (number_of_cells)**2 + y_cell * number_of_cells + z_cell\n```\n\n\nHashtable Creation\n------------------\n\nCreating a hashtable can be done using the `create_hashtable` function,\n\n```python\nfrom sparepo import create_hashtable\n\ncreate_hashtable(\n    snapshot=\"snapdir_099/snapshot_099.0.hdf5\",\n    cells_per_axis=14,\n    hashtable=\"snapdir_099/spatial_hashtable_099.hdf5\"\n)\n```\nThis may take some time, as you might expect. For a `240^3` box, it takes\na few seconds and should _in principle_ scale linearly.\n\n\nHashtable Reading\n-----------------\n\nReading from the hashtable is again designed to be simple. Currently\ntwo loading strategies are implemented:\n\n+ `CartesianSpatialRegion(x=[low, high], y=[low, high], z=[low, high])`\n+ `SphericalSpatialRegion(center=[x, y, z], radius=r)`\n\nThese can then be used with the `SpatialLoader` object to load particles\nfrom file. Note that the majority of the data (the post-processed\nhashtables read from file) are stored in the region objects.\n\n```python\nfrom sparepo import SphericalSpatialRegion, SpatialLoader, ParticleType\n\nregion = SphericalSpatialRegion(\n    center=[16000.0, 16000.0, 16000.0],\n    radius=6000.0\n)\n\nloader = SpatialLoader(\n    hashtable=\"snapdir_099/spatial_hashtable_099.hdf5\",\n    snapshot=\"snapdir_099/snapshot_099.0.hdf5\",\n)\n\nstart = time.time()\n\nx, y, z = loader.read_dataset(\n    ParticleType.GAS, field_name=\"Coordinates\", region=region\n).T\n\n\n```\n\nThis will load cells containing _at least_ the particles in a sphere\ncentered on `[16000.0, 16000.0, 16000.0]` with radius `6000.0`. Additional\nparticles will definitel be loaded, as the loading is cell-by-cell rather\nthan particle-by-particle for performance reasons. If you require a strict\nmask, we encourage you to do that by post-processing the co-ordinates.\n\nThe main thing to note here is that particle types are accesed through\nthe `ParticleType` enum, rather than the usual passing of 'magical'\nintegers.\n\nThe second thing to note is that the first time that `read_dataset` is\ncalled it builds a compressed hashtable and reads the required data\nfrom the hashtable from file (which is then cached), though the time\nto do this is typically shorter than the time required to read the\ndata from file.\n\nNote that the reading performance here is actually limited by the\nloop over indicies (and having to call a h5py read for each of them).\nContiguous ranges are read together, which improves performance\nsignificantly, so the read performance is actually entirely limited\nby the data locality. More complex reading schemes may be able\nto vastly improve the speed of data loading. By default, we use\n`brutal=True` in `read_dataset`. This enables loading of the whole\nchunk at once, and then post-read masking for anything other than\nthe smallest ranges. If you are extremely memory constrained, you\ncan use `brutal=False`, but this will lead to significantly longer\nread times. `brutal_fallback_percentage=1.0` controls the\npercentage of the file that must be read before really using this\nstrategy. \n\nIf you would like the field to be automatically box-wrapped,\nyou can use the `wrap=True` option, which by default is \ndisabled. Spatial loading automatically includes cells that\noverlap with the wrapped _region_, so loading a region\ncentered on `[-5000.0, -5000.0, -5000.0]` with radius `1000.0`\nis valid.\n\n\nHashtable Reading with Units\n----------------------------\n\nIt is also possible to read data including units, in physical space,\nand with h-factors removed. You can do this with the `read_dataset_with_units`\nfunction, taking the exact same data as the `read_dataset` one.\n\n```python\ncoordinates = loader.read_dataset_with_units(\n    ParticleType.GAS, field_name=\"Coordinates\", region=region\n).T\n```\n\nWhere `coordinates` is now a fully filled-out `unyt` array, including\nthe name `\"Gas Coordinates (Physical, h-free)\"`. Note that\n`read_dataset_with_units` also takes all the same parameters\nas `read_dataset`, such as `brutal`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jborrow/sparepo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sparepo",
    "package_url": "https://pypi.org/project/sparepo/",
    "platform": "",
    "project_url": "https://pypi.org/project/sparepo/",
    "project_urls": {
      "Homepage": "https://github.com/jborrow/sparepo"
    },
    "release_url": "https://pypi.org/project/sparepo/0.3.0/",
    "requires_dist": [
      "numba (>0.50.0)",
      "attrs",
      "h5py (>3.0.0)",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Spatial loading for AREPO.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12818939,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1e2932a3a815aa927ba5450e97d643def1de431cc5ae45a2c29cfacdcb0c227",
          "md5": "ca422d9310b6f7d9b2e09c3e67aa62ee",
          "sha256": "d6147448b33e75990305aa352cc9874fee983777e2885e729b3ac8e468e1e7f1"
        },
        "downloads": -1,
        "filename": "sparepo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca422d9310b6f7d9b2e09c3e67aa62ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12975,
        "upload_time": "2021-10-02T14:09:17",
        "upload_time_iso_8601": "2021-10-02T14:09:17.436992Z",
        "url": "https://files.pythonhosted.org/packages/e1/e2/932a3a815aa927ba5450e97d643def1de431cc5ae45a2c29cfacdcb0c227/sparepo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfbcc613caa5466f87547b4a86089f65bd27b0955ed4d788a354e7e5a58b2b7b",
          "md5": "e68d16541bc4b3c2a4a84a6e452c1a00",
          "sha256": "5e57f279c48a5b5756073af976bf05a1b6abcc7bd0506f201e6e9c238d9ea6ac"
        },
        "downloads": -1,
        "filename": "sparepo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e68d16541bc4b3c2a4a84a6e452c1a00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13037,
        "upload_time": "2021-10-02T14:25:03",
        "upload_time_iso_8601": "2021-10-02T14:25:03.132313Z",
        "url": "https://files.pythonhosted.org/packages/cf/bc/c613caa5466f87547b4a86089f65bd27b0955ed4d788a354e7e5a58b2b7b/sparepo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "673115104cecef19c1c6e9227adfc1f6a6bf2d84925d1f9660b001d0e0ebbeff",
          "md5": "2cadcfb5b37d68115ebf8d4bff68eea6",
          "sha256": "56a6df50b39c85d79f22a2e3e7dc367572caa63dcd52ec003e13e2a9a364cb8d"
        },
        "downloads": -1,
        "filename": "sparepo-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cadcfb5b37d68115ebf8d4bff68eea6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13058,
        "upload_time": "2021-10-04T12:50:11",
        "upload_time_iso_8601": "2021-10-04T12:50:11.303199Z",
        "url": "https://files.pythonhosted.org/packages/67/31/15104cecef19c1c6e9227adfc1f6a6bf2d84925d1f9660b001d0e0ebbeff/sparepo-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d01d1d5484a099fd476de4bb6dece0d8c5cf938e88fb3f5584890bb1a090cf1",
          "md5": "aa3e52f2a3dcad7ab334469ef6a6b515",
          "sha256": "871b84b77f374d1e9f1191b2c3f975baebbc830bb4e7f86a254262c4eb0da102"
        },
        "downloads": -1,
        "filename": "sparepo-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa3e52f2a3dcad7ab334469ef6a6b515",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17039,
        "upload_time": "2021-10-19T15:08:19",
        "upload_time_iso_8601": "2021-10-19T15:08:19.280880Z",
        "url": "https://files.pythonhosted.org/packages/2d/01/d1d5484a099fd476de4bb6dece0d8c5cf938e88fb3f5584890bb1a090cf1/sparepo-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b54950be3b7401b88c57bc2079a886b130bcf01f44cf54df7389af4fffda4e1b",
          "md5": "81e448b83618cb4a64a9ad582abc7857",
          "sha256": "41d3723c4fcfdd73875a3e71ba8f27460312ea0f2672e9b7c48bb2f14053b6de"
        },
        "downloads": -1,
        "filename": "sparepo-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81e448b83618cb4a64a9ad582abc7857",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17650,
        "upload_time": "2022-02-07T21:49:12",
        "upload_time_iso_8601": "2022-02-07T21:49:12.360916Z",
        "url": "https://files.pythonhosted.org/packages/b5/49/50be3b7401b88c57bc2079a886b130bcf01f44cf54df7389af4fffda4e1b/sparepo-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b54950be3b7401b88c57bc2079a886b130bcf01f44cf54df7389af4fffda4e1b",
        "md5": "81e448b83618cb4a64a9ad582abc7857",
        "sha256": "41d3723c4fcfdd73875a3e71ba8f27460312ea0f2672e9b7c48bb2f14053b6de"
      },
      "downloads": -1,
      "filename": "sparepo-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81e448b83618cb4a64a9ad582abc7857",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17650,
      "upload_time": "2022-02-07T21:49:12",
      "upload_time_iso_8601": "2022-02-07T21:49:12.360916Z",
      "url": "https://files.pythonhosted.org/packages/b5/49/50be3b7401b88c57bc2079a886b130bcf01f44cf54df7389af4fffda4e1b/sparepo-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}