{
  "info": {
    "author": "Nina Kudryashova",
    "author_email": "nkudryas@ed.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Parametric Copula-GP framework\n\nThis is the GPyTorch-based package that infers copula parameters using a latent Gaussian Process model.\nThe package contains 4 copula families (Gaussian, Frank, Clayton, Gumbel) + linear combinations of copulas from same or different families.\nThe models are constructed with the greedy or heuristic algorithm and the best model is selected based on WAIC. \nBoth greedy and heuristic algorithms perform well on synthetic data (see tests/integration).\nThe bivariate models can be then organised into a C-Vine.\nA number of methods for computing information measures (e.g. vine.entropy, vine.inputMI) are implemented.\nFor a complete description of our method, see our paper (link below).\n\n# Installing the package from PyPI\n\n```\npip install copulagp\n```\n\n# Installing the package from Github repo\n\nIn a virtual environment (e.g. [virtualenv](https://pypi.org/project/virtualenv/)), install all the dependencies and the package using the following commands:\n```\npip install -r requirements.txt\npip install .\n```\n\n# Getting started\n\nLet us start with importing pytorch and loading some data (e.g. the synthetic neuronal data generated with a GLM model, Fig3 in our pre-print):\n```\nimport torch\nimport pickle as pkl\nwith open(\"./notebooks/started/GLM_generated_data.pkl\",\"rb\") as f:\n    data = pkl.load(f)\n```\n\nNext, we use fastKDE to transform the marginals:\n```\nimport copulagp.marginal as mg\ny = torch.zeros(data['Y'].shape)\nfor i in range(2):\n    y[i] = torch.tensor(mg.fast_signal2uniform(data['Y'][i],data['X']))\n```\n\nNext, let us try a Clayton copula model on this data (optionally: on a GPU; should take around 30 seconds)\n```\nimport copulagp.bvcopula\ndevice='cuda:0'\ntrain_x = torch.tensor(data['X']).float().to(device=device)\ntrain_y = y.T.float().to(device=device)\n\nlikelihoods = [bvcopula.ClaytonCopula_Likelihood(rotation='90Â°')]\n(waic, model) = bvcopula.infer(likelihoods,train_x,train_y,device=device, prior_rbf_length=2.0)\nprint(f\"WAIC: {waic}\") # waic = -0.119\n```\n\nLet us plot the results, using a plot helper Plot_Fit for this:\n```\nfrom copulagp.utils import Plot_Fit\nPlot_Fit(model, data['X'], y.numpy().T,'Excitatory', 'Inhibitory', device);\n```\n![Clayton copula fit](notebooks/started/clayton.png)\n\nWe can then sample from the GP model and calculate the conditional entropy of the copula model. This copula entropy is equivalent to the mutual information between two variables. Using sampling from a GP, we obtain confidence intervals for this mutual information:\n```\nimport matplotlib.pyplot as plt\ntest_x = torch.linspace(0,1,200).float().to(device=device)\nentropies = torch.zeros(10,200)\nfor i in range(10): \n    f = model.gp_model(test_x).rsample(torch.Size([1])) # sample from a GP\n    copula = model.likelihood.get_copula(f.squeeze()) # initialize a copula, parameterized by that GP sample\n    entropies[i] = copula.entropy(sem_tol=0.01, mc_size=1000).cpu() # calculate entropy\nentropies = entropies.numpy()\n\nplt.plot(test_x.cpu().numpy(),entropies.mean(0))\nplt.fill_between(test_x.cpu().numpy(),entropies.mean(0)-entropies.std(0),entropies.mean(0)+entropies.std(0),alpha=0.2)\n```\n![Clayton copula entropy](notebooks/started/clayton_entropy.png)\n\nNote, that Clayton copula is not the best fitting model for this example. We can find the best one by using one of the model selection algorithms (e.g. heuristic):\n\n```\nimport copulagp.select_copula\n(store, waic) = select_copula.select_with_heuristics(data['X'],y.numpy().T,device,'cond',\\\n                                            './','Excitatory','Inhibitory',train_x=train_x,train_y=train_y)\nprint(f\"Best model: {store.name_string}, WAIC: {waic}\") # best_waic = -0.139\n```\n\nThe best copula found by the heuristic algorithm is a mixture of Frank and Clayton. We can visualize this model and calculate it's entropy using the same code as for the Clayton copula (see the results in notebooks/Getting_started.ipynb).\n\nMore notebooks with examples and the code that generated the figures for our paper can be found in notebooks/.\n\n# Citation\n\nIf you find our Copula-GP package useful, please consider citing our work:\n\n```\n@article{kudryashova2022parametric,\n  title={Parametric Copula-GP model for analyzing multidimensional neuronal and behavioral relationships},\n  author={Kudryashova, Nina and Amvrosiadis, Theoklitos and Dupuy, Nathalie and Rochefort, Nathalie and Onken, Arno},\n  journal={PLoS computational biology},\n  volume={18},\n  number={1},\n  pages={e1009799},\n  year={2022},\n  publisher={Public Library of Science San Francisco, CA USA}\n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NinelK/CopulaGP",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "copulagp",
    "package_url": "https://pypi.org/project/copulagp/",
    "platform": null,
    "project_url": "https://pypi.org/project/copulagp/",
    "project_urls": {
      "Bug Tracker": "https://github.com/NinelK/CopulaGP/issues",
      "Homepage": "https://github.com/NinelK/CopulaGP"
    },
    "release_url": "https://pypi.org/project/copulagp/0.0.5/",
    "requires_dist": [
      "fastkde (>=1.0.14)",
      "gpytorch (>=1.2.0)",
      "matplotlib (>=3.3.1)",
      "numpy (>=1.19.1)",
      "pytest (>=5.3.2)",
      "scipy (>=1.5.2)",
      "torch (>=1.6)"
    ],
    "requires_python": ">=3.6",
    "summary": "A Copula-GP (Gaussian Process) package",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13103919,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be3d6ff6629317bffdca49e3975f2943c632324a112a96c03eae64207d8dd2f",
          "md5": "c70a80c0fc7320296408de6521f8766d",
          "sha256": "d5e29a95eeaa26e37805a6af6491ec39f5820202f845d84e4d5971e044bede66"
        },
        "downloads": -1,
        "filename": "copulagp-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c70a80c0fc7320296408de6521f8766d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 71996,
        "upload_time": "2022-03-07T17:07:05",
        "upload_time_iso_8601": "2022-03-07T17:07:05.412098Z",
        "url": "https://files.pythonhosted.org/packages/3b/e3/d6ff6629317bffdca49e3975f2943c632324a112a96c03eae64207d8dd2f/copulagp-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ed7ba3be52ae5da0fd7b251aeb4ceab24a950445dd9c52dc6da90098c5c89b1",
          "md5": "e6ed0d3eb67430fe041b813041682ff7",
          "sha256": "a411e052d1a3e987a315f84e687815a3fc40de01b46264356fce8c06cdb50aa1"
        },
        "downloads": -1,
        "filename": "copulagp-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e6ed0d3eb67430fe041b813041682ff7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 59551,
        "upload_time": "2022-03-07T17:07:08",
        "upload_time_iso_8601": "2022-03-07T17:07:08.089201Z",
        "url": "https://files.pythonhosted.org/packages/5e/d7/ba3be52ae5da0fd7b251aeb4ceab24a950445dd9c52dc6da90098c5c89b1/copulagp-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3be3d6ff6629317bffdca49e3975f2943c632324a112a96c03eae64207d8dd2f",
        "md5": "c70a80c0fc7320296408de6521f8766d",
        "sha256": "d5e29a95eeaa26e37805a6af6491ec39f5820202f845d84e4d5971e044bede66"
      },
      "downloads": -1,
      "filename": "copulagp-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c70a80c0fc7320296408de6521f8766d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 71996,
      "upload_time": "2022-03-07T17:07:05",
      "upload_time_iso_8601": "2022-03-07T17:07:05.412098Z",
      "url": "https://files.pythonhosted.org/packages/3b/e3/d6ff6629317bffdca49e3975f2943c632324a112a96c03eae64207d8dd2f/copulagp-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ed7ba3be52ae5da0fd7b251aeb4ceab24a950445dd9c52dc6da90098c5c89b1",
        "md5": "e6ed0d3eb67430fe041b813041682ff7",
        "sha256": "a411e052d1a3e987a315f84e687815a3fc40de01b46264356fce8c06cdb50aa1"
      },
      "downloads": -1,
      "filename": "copulagp-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "e6ed0d3eb67430fe041b813041682ff7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 59551,
      "upload_time": "2022-03-07T17:07:08",
      "upload_time_iso_8601": "2022-03-07T17:07:08.089201Z",
      "url": "https://files.pythonhosted.org/packages/5e/d7/ba3be52ae5da0fd7b251aeb4ceab24a950445dd9c52dc6da90098c5c89b1/copulagp-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}