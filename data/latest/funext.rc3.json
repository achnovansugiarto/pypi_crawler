{
  "info": {
    "author": "Jonas Reinhardt",
    "author_email": "jonas@reinhardt.ai",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Functional Extensions\n**for Python**\n\nhttps://pypi.org/project/funext/\n\nThis repository aims to extend the Python programming language by adding some\nuseful (functional) extensions to objects, functions and data structures. Some\nof those extensions include:\n\n- being able to chain pure (and mutating) functions by calling them directly \n  on objects. Most of those functions are known from the built-in functions.\n\n- applying functions to objects and chaining them through a pipe-function\n\n- composing functions \n\n## Usage\n\n```python\nfrom functional_extensions import l_, s_, d_, t_, f_\n\nregular_list = [1, 2, 3, 4]\nextended_list = l_(1, 2, 3, 4)\n\n# all extended classes have a simple initializer function. Containers can either\n# take individual values as *args, or a regular collection\nextended_list = l_([1, 2, 3, 4]) # or\nextended_list = l_(1, 2, 3, 4)\n\nextended_set = s_(1, 2, 3, 4) # or\nextended_set = s_(set(1, 2, 3, 4))\n\nextended_dict = d_({'key': 'value'})\n\nextended_tuple = t_(1, 2, 3, 4) # or\nextended_tuple = t_((1, 2, 3, 4))\n\ndef add(a, b): return a + b\nextended_function = f_(add)\n```\n## Available functions\n### Object\n\n\n```python\npipe_(self, function, *args, **kwargs)\n``` \n\nApplies the object `self` to a function `function` with the arguments from `*args` \nand `**kwarngs` and returns the result.\n\n---\n\n```python\ncopy_(self) \ndeepcopy_(self)\n``` \n\nCopies `self`, either shallowly or deeply, and returns the result.\n\n---\n\n```python\ntype_(self)\n```\n\nReturns `type(self)`.\n\n### Sequences and Containers\n\n#### Iterable\n```python\nto_list_(self)\nto_set_(self)\nto_tuple_(self)\n```\n\nConverts the iterable `self` into the desired object.\n\n---\n\n```python\nmap_(self, function, *args, **kwargs)\n```\n\nApplies every element of `self` to `function` and returns an iterable of the new\nelements. Passes `*args` and `**kwargs` to the map-`function`.\n\nReturns an object of the same type as that of `self`.\n\n---\n\n```python\nfor_each_(self, apply, *args, **kwargs)\n```\n\nFor every element in `self`, `function` is called with said element, as well\nas `*args` and `**kwargs`. The list is then returned.\n\n---\n\n```python\nmin_(self)\nmax_(self)\nsum_(self)\nall_(self)\nany_(self)\n```\n\n\nReturns `min(self)`, `max(self)`, `sum(self)`, `all(self)` and `any(self)` respectively.\n\n--- \n\n```python\nsort_(self, key=None, reverse=False)\n```\n\nSorts all elements from the iterable `self` in a new list and returns it. Calls\nthe `sorted`-function under the hood with `key` and `reverse`.\n\n---\n\n```python\nenumerate_(self, start=0)\n``` \n\nReturns an enumerate object from the iterable `self`.\n\n--- \n\n```python\nzip_(self, *iterables)\n```\n\nIterates over `self` and all iterables in `*iterables`, producing tuples with\nan item from each one.\n\n--- \n\n```python\nfilter_(self, condition)\nfilterfalse_(self, condition)\n```\n\n`filter_` returns a new instance of this iterable with only the elements that\n`condition` returns true.\n\n`filterfalse_`returns a new instance of this iterable\nwith only the elements that `condition` returns false.\n\n#### Reversible\n\n```python\nreverse_(self)\n```\n\nReturns a new instance of the reversed iterable `self`.\n\n#### Sized\n\n```python\nlen_(self)\n```\n\nReturns `len(self)`\n\n#### MutableSequence\n\n```python\nmap_inplace_(self, apply, *args, **kwargs)\n```\n\nApplies every element of `self` to `function` and overwrites this element with\nthe new value.\n\n\n#### List\n\n\n```python\nsort_inplace_(self, key=None, reverse=False)\n```\n\nSorts the list in-place and returns the sorted list\n\n### Functions\n\n```python\ncompose_(self, function)\n```\n\nComposes a function\n\n---\n\n```python\nand_(self, other_function)\nor_(self, other_function)\nnot_(self)\n```\n\nComposes two predicates.\n\n---\n\n```python\npartial_(self, *args, **kwargs)\n```\n\nPartially applys `*args`, and `**kwargs` to `self` and returns the partial \nfunction.\n\n---\n\n```python\ncurry_(self, n=EMPTY)\n```\n\nCurries `self`.\n\n---\n\n```python\ncomplement_(self)\n```\n\nCunstructs a negation of `self`.\n\n---\n\n```python\nall_fn_(self, *fs)\nany_fn_(self, *fs)\nnone_fn_(self, *fs)\none_fn_(self, *fs)\n```\n\nConstruct a predicate returning `True` when all, any, none or exactly one of \n`self` and `fs` return True. \n\n## Examples\n\nMost of those functions should not need additional examples, as they are a mere\nre-phrasing of some basic concepts and functions of the Python programming \nlanguage and funcy.\n\nIf you need an example anyway, you should consider looking at the test\nclasses, which cover every function.\n\n\n## The why\nAn excerpt of the \"zen of python\":\n\n> Beautiful is better than ugly\n\nA simple exercise. Initialize a list with the numbers `[4, 1, 2, 3]`, take the negative\nsquare of these numbers, sort the list and print every element individually.\n\nWhich one of the following code pieces is more beautiful?\n```python\ninput = [4, 1, 2, 3]\nsquared = [-(x ** 2) for x in input]\nsquared.sort()\nfor element in squared:\n  print(x)\n```\n\n```python\ndef negative_square(x): return - (x ** 2)\n\nl_(4, 1, 2, 3) \\\n    .map_inplace_(negative_square) \\\n    .sort_() \\\n    .for_each_(print) \n```\n\nThere are 4 things happening. In the top example, all things are expressed via\na slightly different syntax. Initialization with a list literal, mapping by a \nlist comprehension, calling the sort-function on the list and then printing all\nelements \n\nIn the bottom example, every \"thing\" that is happening, is expressed in a \ncoherent way - by calling a function.\n\n| Requirement                                       | Corresponding Function                        |\n|---------------------------------------------------|-----------------------------------------------|\n| Initialize a list with the numbers `[4, 1, 2, 3]` | `l_(4, 1, 2, 3)`                              |\n| Take the negative square                          | `.map_inplace_(negative_square)` <sup>1</sup> |\n| Sort the list                                     | `.sort_()`                                    |\n| Print every element individually                  | `.for_each_(print)`                           |\n\n<sup>1</sup> we could also use a lambda-function in-place to avoid having to\ndeclare an own function for this case. However, the code might become slightly\nless expressive. Which brings us to the next \"principle\"\n\n> Explicit is better than implicit\n\nThis principle means, that there shouldn't be anything unexpected happening under\nthe hood, which is often the case in high-level codebases. Metaprogramming,\nmaking use of inheritance or just not choosing proper variable names can make\nthe code hard to read and understand, making it more easy to make mistakes.\n\nThese extensions might make things more complex at first glance, but the naming\nis chosen quite carefully. If a function name corresponds to a name of a\nbuilt-in function, this functions will not do more or less than exactly that\nfunction.\n\nAll other functions are designed to be pure, and not cause anything to happen\noutside of their little scope.\n\nAll function that are not pure, are explicitly named like that, for example\n`map_inplace_`\n\nAll functions that have similar names than built-in functions, have an \nexplicit \"_\"-postfix to denote that they do things differently, for example\n`sort_`, which adheres to the rule that functions are pure, unlike the `sort()`-\nfunction from the builtin `list`-class.\n\n> Simple is better than complex\n\nand\n\n> Readability counts\n\nOne might argue, that any code which doesn't directly solves a certain use case\nis, by definition, not simple. It might be correct to define complexity like that.\nBut you can also define complexity by how much time it takes you to read and \nunderstand code. This library tries to help reduce complexity of the code itself,\non a less abstract layer than the use-case-specific solutions are written in. By\nthat, hopefully those solutions also become less complex.\n\n> There should be one-- and preferably only one --obvious way to do it.\n\nYes, in an attempt to fulfill other principles, this principle is arguably \nbroken. Now there is one more way to write a for-loop or call a map-function.\nAt least I try to keep this rule fulfilled within this library. There should\nbe one obvious way to do one thing by using functional extensions.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ReinhardtJ/Functional-Extensions",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "funext",
    "package_url": "https://pypi.org/project/funext/",
    "platform": null,
    "project_url": "https://pypi.org/project/funext/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ReinhardtJ/Functional-Extensions/issues",
      "Homepage": "https://github.com/ReinhardtJ/Functional-Extensions"
    },
    "release_url": "https://pypi.org/project/funext/0.2.0/",
    "requires_dist": [
      "funcy (>=1.17)"
    ],
    "requires_python": ">=3.7",
    "summary": "Functional extensions for Python objects",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13331989,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c0eb1719103eb94de383bcfac27ca5022b5c16305fa50bdad1d22d636b49d0e",
          "md5": "1d8c4f51fb0db29dbd0edccad32c4a88",
          "sha256": "f63c8e6733e8b8b0f76ff65a2ec7b4efa2ae5b9c4e89c80f3d7dc60286a449b8"
        },
        "downloads": -1,
        "filename": "funext-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d8c4f51fb0db29dbd0edccad32c4a88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9249,
        "upload_time": "2022-02-23T23:20:17",
        "upload_time_iso_8601": "2022-02-23T23:20:17.421332Z",
        "url": "https://files.pythonhosted.org/packages/1c/0e/b1719103eb94de383bcfac27ca5022b5c16305fa50bdad1d22d636b49d0e/funext-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "655ff541eabf5902ccaea60033341946d3bfe628fcbc80f44fd24ce2396c8a59",
          "md5": "d4cbfab415bc02131bc426dc1b2516a8",
          "sha256": "3be61e1973735d7dff5d503f4e8b139a23019f9b7a16761044aa06db0fb677c9"
        },
        "downloads": -1,
        "filename": "funext-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4cbfab415bc02131bc426dc1b2516a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12601,
        "upload_time": "2022-02-23T23:20:19",
        "upload_time_iso_8601": "2022-02-23T23:20:19.303855Z",
        "url": "https://files.pythonhosted.org/packages/65/5f/f541eabf5902ccaea60033341946d3bfe628fcbc80f44fd24ce2396c8a59/funext-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5e924f16ca2d46d72087b1bf099863d7bd98c5ec848c9bbc1b3207511587e5c",
          "md5": "0dacc4b0a79804bb75443e365b584c06",
          "sha256": "076b9352090e5eff7e4f5aad2df6daf34daf55f7a523500bb24c4c5095b995e9"
        },
        "downloads": -1,
        "filename": "funext-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0dacc4b0a79804bb75443e365b584c06",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9344,
        "upload_time": "2022-02-27T21:31:01",
        "upload_time_iso_8601": "2022-02-27T21:31:01.273303Z",
        "url": "https://files.pythonhosted.org/packages/b5/e9/24f16ca2d46d72087b1bf099863d7bd98c5ec848c9bbc1b3207511587e5c/funext-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32b480e6cab0d67f61810b899a5a38512a727a3961a85ea7ef50211afef2041e",
          "md5": "b2f1c97963fd8589d105bbfb6396a3b8",
          "sha256": "4ec6a6ab8bbbc69bfb5157de177cbbce10d52e3bb95d878ce2b94b8e747de2f9"
        },
        "downloads": -1,
        "filename": "funext-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2f1c97963fd8589d105bbfb6396a3b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12725,
        "upload_time": "2022-02-27T21:31:02",
        "upload_time_iso_8601": "2022-02-27T21:31:02.714124Z",
        "url": "https://files.pythonhosted.org/packages/32/b4/80e6cab0d67f61810b899a5a38512a727a3961a85ea7ef50211afef2041e/funext-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6c33b7f0bdbd2622f4badf29717abbebb975fcd73563dfae9aa96011f2bd19b",
          "md5": "d550e4a0c3c834f2aae673916ac455be",
          "sha256": "5585c5cf3d748ed4ccf78c72a0821bd7db733723ea800789c301e39eb4d72e7e"
        },
        "downloads": -1,
        "filename": "funext-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d550e4a0c3c834f2aae673916ac455be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9458,
        "upload_time": "2022-03-29T11:11:42",
        "upload_time_iso_8601": "2022-03-29T11:11:42.245766Z",
        "url": "https://files.pythonhosted.org/packages/c6/c3/3b7f0bdbd2622f4badf29717abbebb975fcd73563dfae9aa96011f2bd19b/funext-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22252f07cd2f39399ad13485585f9856570edb34e9447dcd069f0dcd0e8c8c00",
          "md5": "d5c7ab6af4679a440a9b7305b8306729",
          "sha256": "c0b8a3e83426e8c87c6c4cf1e6bcc6e894c421825c5dea0e22b16d77e67ab07c"
        },
        "downloads": -1,
        "filename": "funext-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d5c7ab6af4679a440a9b7305b8306729",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12842,
        "upload_time": "2022-03-29T11:11:44",
        "upload_time_iso_8601": "2022-03-29T11:11:44.191708Z",
        "url": "https://files.pythonhosted.org/packages/22/25/2f07cd2f39399ad13485585f9856570edb34e9447dcd069f0dcd0e8c8c00/funext-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6c33b7f0bdbd2622f4badf29717abbebb975fcd73563dfae9aa96011f2bd19b",
        "md5": "d550e4a0c3c834f2aae673916ac455be",
        "sha256": "5585c5cf3d748ed4ccf78c72a0821bd7db733723ea800789c301e39eb4d72e7e"
      },
      "downloads": -1,
      "filename": "funext-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d550e4a0c3c834f2aae673916ac455be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9458,
      "upload_time": "2022-03-29T11:11:42",
      "upload_time_iso_8601": "2022-03-29T11:11:42.245766Z",
      "url": "https://files.pythonhosted.org/packages/c6/c3/3b7f0bdbd2622f4badf29717abbebb975fcd73563dfae9aa96011f2bd19b/funext-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22252f07cd2f39399ad13485585f9856570edb34e9447dcd069f0dcd0e8c8c00",
        "md5": "d5c7ab6af4679a440a9b7305b8306729",
        "sha256": "c0b8a3e83426e8c87c6c4cf1e6bcc6e894c421825c5dea0e22b16d77e67ab07c"
      },
      "downloads": -1,
      "filename": "funext-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d5c7ab6af4679a440a9b7305b8306729",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12842,
      "upload_time": "2022-03-29T11:11:44",
      "upload_time_iso_8601": "2022-03-29T11:11:44.191708Z",
      "url": "https://files.pythonhosted.org/packages/22/25/2f07cd2f39399ad13485585f9856570edb34e9447dcd069f0dcd0e8c8c00/funext-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}