{
  "info": {
    "author": "Denis Zalivin",
    "author_email": "zalivindenis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# Log Correlation ASGI\n\nASGI middleware and a set of filters to trace requests between microservices.\n\nLog Correlation ASGI aims to help you and your QA team in case you have a pipeline\nof microservices with request transmitting from one to another.\n\nFor every incoming request Log Correlation ASGI checks request headers for correlation\nheader and logs your request and response with that identifier. Also, it allows you\neasily to add that header to all outgoing requests you make.\n\n\n## Installation\n\nLog Correlation ASGI can be installed by running\n\n    pip install log-correlation-asgi\n\nIt requires Python 3.6+ to run.\n\n## Usage\n\nFor a quick dive you can see an example from `examples/example_fastapi.py`.\nYou can run it with\n\n    uvicorn examples.example_fastapi:app\n\nBefore running example you should install:\n\n    pip install fastapi uvicorn websockets httpx\n\nThe usage is simple. You should create a middleware and add it to your ASGI\napplication:\n\n```python\nfrom log_correlation_asgi import LogCorrelationMiddleware\n\n\nCORRELATION_ID_HEADER_NAME = \"correlation_id\"  # how you name your header\n\nasgi_application.add_middleware(  # FastAPI syntax\n    LogCorrelationMiddleware,\n    correlation_id_header=CORRELATION_ID_HEADER_NAME,\n    get_remote_addr=\"remoteaddr\",\n    logger_name=\"some_logger\",\n)\n```\n\nadd a filter and desired fields to log:\n\n```python\nimport logging.config\n\n\nlogging_config = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"default\": {\n            \"()\": \"uvicorn.logging.DefaultFormatter\",\n            # Here we add %(correlation_id)s %(ip_address)s %(user)s %(method)s %(path)s %(query_string)s %(body)s fields\n            \"fmt\": \"%(asctime)s %(levelname)s %(correlation_id)s %(ip_address)s \"\n            \"%(user)s %(method)s %(path)s %(message)s %(query_string)s %(body)s\",\n        },\n    },\n    \"filters\": {  # Add filter\n        \"log_correlation_filter\": {\n            \"()\": \"log_correlation_asgi.ContextDataFilter\",\n        },\n    },\n    \"handlers\": {\n        \"console\": {\n            \"filters\": [\"log_correlation_filter\"],  # And use it\n            \"formatter\": \"default\",\n            \"class\": \"logging.StreamHandler\",\n            \"stream\": \"ext://sys.stderr\",\n        },\n    },\n    \"loggers\": {\n        \"middleware_logger\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"INFO\",\n            \"propagate\": True,\n        },\n    },\n}\nlogging.config.dictConfig(logging_config)\n```\n\nThat's all!\n\nif you start the server and make a request to some view, in your console you will see\nsomething like the following log:\n\n```console\n2021-12-08 03:14:15,926 INFO 7c7bffaa-5bba-48e3-bc42-02423818c2a4 - test_user GET /some/path/ Got request {\"q\": [\"Life\", \"Universe\", \"Everything\"]} -\n2021-12-08 03:14:15,926 INFO 7c7bffaa-5bba-48e3-bc42-02423818c2a4 - test_user GET /some/path/ Sent response - 42\n```\n\nIf you make an outgoing request from your code, it is easy to add correlation id further:\n\n```python\nimport httpx\nfrom log_correlation_asgi import get_logging_dict\n\n\nCORRELATION_ID_HEADER_NAME = \"correlation_id\"  # how you name your header\n\n@app.get(\"/plain/\")\nasync def get_plain():\n    # get if of current request\n    headers = {CORRELATION_ID_HEADER_NAME: get_logging_dict()[\"correlation_id\"]}\n\n    # and send it further\n    async with httpx.AsyncClient(base_url=\"http://example.com\", headers=headers) as client:\n        await client.get(\"/external/request/\")\n    ...\n```\n\n## Documentation\n\nThe module defines the following items:\n\n#### class LogCorrelationMiddleware\n```python\napp,\nservice_name: Optional[str] = None,\ncorrelation_id_header: str = \"Correlation-Id\",\nget_remote_addr: Union[str, Callable, None] = None,\nget_username: Optional[Callable] = None,\nlogger_name: Optional[str] = None,\nexcluded_paths: Optional[List[str]] = None,\nno_args_paths: Optional[List[str]] = None,\nget_request_message: Optional[str] = \"Got request\",\nsend_response_message: Optional[str] = \"Sent response\",\n```\n\nCreates an ASGI correlation middleware instance. Adds new attributes to your logs format:\n- %(service_name)s - Name of service.\n- %(correlation_id)s - ID unique between different microservices.\n- %(request_id)s - UUID of current request unique only for this microservice.\n- %(method)s - HTTP method of current request.\n- %(path)s - Path part of URL.\n- %(body)s - Body of the request or response.\n- %(query_string)s - Query string part of request.\n- %(ip_address)s - User IP address.\n- %(user)s - User that made the request.\n\n#### def get_logging_dict() -> dict\n\nReturns a dictionary containing mentioned above request-specific data.\n\n#### class ContextDataFilter\n\nFilter class to add mentioned above request-specific data to logs.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shaihulud/log-correlation-asgi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "log-correlation-asgi",
    "package_url": "https://pypi.org/project/log-correlation-asgi/",
    "platform": "",
    "project_url": "https://pypi.org/project/log-correlation-asgi/",
    "project_urls": {
      "Homepage": "https://github.com/shaihulud/log-correlation-asgi"
    },
    "release_url": "https://pypi.org/project/log-correlation-asgi/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Log correlation middleware and filters for ASGI frameworks.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12255303,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bec795196b888b4535e914deea8dbe8bb7d6e52fa8bd96a565626d7800d8e131",
          "md5": "3b3e03e8bcd70cb58e93f3fba3c4be5d",
          "sha256": "ec03b06e6a3611c0146e476011f1881aca48381fe94d459e2574277c2cc1850f"
        },
        "downloads": -1,
        "filename": "log-correlation-asgi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b3e03e8bcd70cb58e93f3fba3c4be5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5756,
        "upload_time": "2021-12-09T12:57:14",
        "upload_time_iso_8601": "2021-12-09T12:57:14.332424Z",
        "url": "https://files.pythonhosted.org/packages/be/c7/95196b888b4535e914deea8dbe8bb7d6e52fa8bd96a565626d7800d8e131/log-correlation-asgi-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bec795196b888b4535e914deea8dbe8bb7d6e52fa8bd96a565626d7800d8e131",
        "md5": "3b3e03e8bcd70cb58e93f3fba3c4be5d",
        "sha256": "ec03b06e6a3611c0146e476011f1881aca48381fe94d459e2574277c2cc1850f"
      },
      "downloads": -1,
      "filename": "log-correlation-asgi-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3b3e03e8bcd70cb58e93f3fba3c4be5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5756,
      "upload_time": "2021-12-09T12:57:14",
      "upload_time_iso_8601": "2021-12-09T12:57:14.332424Z",
      "url": "https://files.pythonhosted.org/packages/be/c7/95196b888b4535e914deea8dbe8bb7d6e52fa8bd96a565626d7800d8e131/log-correlation-asgi-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}