{
  "info": {
    "author": "Martin Wacker",
    "author_email": "martas@imm.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Topic :: Utilities"
    ],
    "description": "# promexp\n\nPromexp is a stand-alone service (Windows/Linux), which acts as a simplified replacement of Prometheus node exporter.\nAlong with basic system metrics, it provides information useful in a broadcast environment. \n\nConfiguration\n-------------\n\nMost of the features should work out of the box, but you may tweak the settings using a `settings.json`\nfile stored in the same directory as the application. All of the variables are optional.\n\n```json\n{\n    \"host\" : \"localhost\",\n    \"port\" : 8080,\n    \"hostname\" : \"thismachinehasanothername\",\n    \"prefix\" : \"system\",\n    \"tags\" : {\n        \"site_name\" : \"TV1\"\n    },\n    \"provider_settings\" : {}\n}\n```\n\n### Listening address\n\nBy default, the built-in HTTP server listens on all interfaces on port 9731.\nWhen needed, you may override this using `host` and `port` variables.\n\n### Hostname\n\nThe software automatically attaches a `hostname` tag to each published metrics.\nYou may disable this behavior by setting the `hostname` variable to `null` or \noverride the machine name by setting it to a string value. \n\n\n### Prefix\n\nBy default, all metric names are prefixed with the string `nebula_`. \nIt is possible to change the prefix by setting the `prefix` to a string value. \nA trailing underscore of the prefix is added automatically.\n\n### Additional tags\n\nUsing the `tags` dictionary, you may specify additional tags to be appended to each metric.\nFor example to create a server group or specify a client name in a multitenant environment.\n\nProviders\n---------\n\nEach provider returns a set of metrics. By default, all providers are enabled, when supported on the platform.\nYou may explicitly disable a provider by setting its configuration to `null`:\n\n```json\n{\n   \"provider_settings\" : {\n       \"nvidia\" : null,\n       \"casparcg\" : {\"host\" : \"10.0.1.15\"}\n   } \n}\n```\n\n\n### psutil\n\nThis provider returns basic machine metrics such as CPU and RAM usage.\n\nName                 | Type    | Unit    | Description\n---------------------|---------|---------|-------------\n`uptime_seconds`     | counter | seconds | ...\n`cpu_usage`          | gauge   | percent | ...\n`memory_bytes_total` | gauge   | bytes   | ...\n`memory_bytes_free`  | gauge   | bytes   | ...\n`memory_usage`       | gauge   | percent | ...\n`swap_bytes_total`   | gauge   | bytes   | ...\n`swap_bytes_free`    | gauge   | bytes   | ...\n`swap_usage`         | gauge   | percent | ...\n`disk_read_bytes`    | counter | bytes   | ...\n`disk_write_bytes`   | counter | bytes   | ...\n\n### network\n\n#### Settings\n\nName              | Type    | Default | Description\n------------------|---------|---------|------------\n`ignore_inactive` | boolean | `true`  | Do not export metrics for interfaces without traffic\n\n#### Exported metrics\n\nName                       | Type    | Unit  | Description\n---------------------------|---------|-------|-------------\n`network_sent_bytes_total` | Counter | bytes | ...\n`network_recv_bytes_total` | Counter | bytes | ...\n\n### nvidia\n\nUses `nvidia-smi` to obtain and return metrics of NVIDIA GPUs\n\n#### Settings\n\nName       | Type   | Default             | Description\n-----------|--------|---------------------|------------\n`smi_path` | string | `null` (autodetect) | Path to the `nvidia-smi` application binary\n\n#### Exported metrics\n\nName              | Type  | Unit           | Description\n------------------|-------|----------------|-------------\n`gpu_usage`       | gauge | percent        | Current utilization of the GPU core\n`gpu_memory`      | gauge | percent        | Current GPU RAM usage\n`gpu_encoder`     | gauge | percent        | Utilization of the nvenc video encoder\n`gpu_decoder`     | gauge | percent        | Utilization of the nvdec video decoder\n`gpu_fan_speed`   | gauge | percent        | Current fan speed\n`gpu_temperature` | gauge | Degree Celsius | GPU core temperature \n`gpu_power_draw`  | gauge | Watt           | Current power consumption of the card\n\n### storage\n\nReturns storage utilization information for each mountpoint/drive.\n\n#### Exported metrics\n\nName | Type | Unit | Description\n-----|------|------|-------------\n`storage_bytes_total` | gauge | bytes   | ...\n`storage_bytes_free`  | gauge | bytes   | ...\n`storage_usage`       | gauge | percent | ...\n\n### storagespaces\n\nOn Windows, this provider shows a health status of each configured storage space.\n\n#### Exported metrics\n\nName                  | Type  | Unit    | Description\n----------------------|-------|---------|-------------\nstorage_space_healthy | gauge | boolean | While `1` indicates nominal status, `0` indicates a problem (typically a degraded array)\n\n`storage_space_healthy` metric contains two tags `name` and `mode`, which may be used for filtering.\n\n### casparcg\n\n#### Settings\n\nName       | Type    | Default       | Description\n-----------|---------|---------------|------------\n`host`     | string  | `\"127.0.0.1\"` | IP address or a hostname of the target CasparCG instance\n`port`     | integer | `5250`        | AMCP port of the target CasparCG instance\n`osc_port` | integer | `6250`        | OSC listening port (server listens on all interfaces)\n`force`    | boolean | `false`       | Do not disable the provider when CasparCG is not available during startup (keep retrying to connect)\n`heartbeat_interval` | float | `10`  | Number of seconds after which the provider sends a heartbeat `VERSION` command\n\n\n#### Exported metrics\n\nName                    | Type    | Unit    | Description\n------------------------|---------|---------|-------------\ncasparcg_connected      | Gauge   | boolean | Returns `1` when CasparCG connection is estabilished\ncasparcg_idle_seconds   | Gauge   | seconds | Time elapsed since last OSC message. Shouldn't be much higher than 1/FPS\ncasparcg_dropped_total  | Counter | none    | A number of dropped frames per channel since the application started\ncasparcg_peak_volume    | Gauge   | Percent | Audio peak value per channel since the last request\n\n`casparcg_peak_volume` may either help you determine whether the channel playback is stalled \n(assuming audio should always play, you may check for zero values)\nor to find out there is an audio channel with a posibility of clipping audio (check for 100%).\n\n`casparcg_dropped_frames` metric is not available with CasparCG &gt;2.2\n\nBuilding on Windows\n-------------------\n\nWe use Nuitka to build the application. You may as well:\n\n 1. Download and install [Python 3.8](https://www.python.org/ftp/python/3.8.7/python-3.8.7-amd64.exe) (any version &gt;3.6 should work should work)\n 2. When asked, select \"install for all users\" and \"install pip\"\n 3. Start a terminal (cmd) as an administrator\n 4. Run `pip install psutil nuitka nxtools`\n 5. Install [MinGW](https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download)\n 6. Create an environment variable called `CC` containing a path to `gcc.exe` binary from the MinGW package \n 7. Run `build.bat` from the `promexp` directory\n 8. After a while, resulting binary should be located in `promexp.dist`\n\n\nAcknowledgements\n----------------\n\n### Prometheus\n\nThanks to [Prometheus](https://prometheus.io) developers for their great work!\n\n### psutil\n\nAs a system metrics source, [psutil](https://github.com/giampaolo/psutil) module by giampaolo is used.\n\n### python-osc\n\nCasparCG provider uses public domain [python-osc](https://github.com/attwad/python-osc) module by attwad.\n\n### nuitka\n\nWindows binary is built using [nuitka](https://nuitka.net).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/immstudios/promexp",
    "keywords": "metrics devops prometheus",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "promexp",
    "package_url": "https://pypi.org/project/promexp/",
    "platform": "",
    "project_url": "https://pypi.org/project/promexp/",
    "project_urls": {
      "Homepage": "https://github.com/immstudios/promexp"
    },
    "release_url": "https://pypi.org/project/promexp/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple system metrics exporter for Prometheus",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10461421,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "410867f2abbc356e83aa73f7d5173e6381e19055246453e781a495f3924064f5",
          "md5": "39afdf0beaf019b4cecd7f01d2344ac9",
          "sha256": "8e9e22fc63d48a61558923bfe63ff07bb970f3b7db9c6a78acbad930074c9996"
        },
        "downloads": -1,
        "filename": "promexp-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "39afdf0beaf019b4cecd7f01d2344ac9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15079,
        "upload_time": "2021-04-14T15:11:18",
        "upload_time_iso_8601": "2021-04-14T15:11:18.291927Z",
        "url": "https://files.pythonhosted.org/packages/41/08/67f2abbc356e83aa73f7d5173e6381e19055246453e781a495f3924064f5/promexp-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e9b3c45d6925a2348c2c82c2662cf84521f35e8f14787835566fe4675bb1acd",
          "md5": "ec5810d432d648958be8d5984ed5f885",
          "sha256": "0136ea6b1bbbcd50ae936fe757f33c9a26891b4c2e04560069485b221f1b3e2f"
        },
        "downloads": -1,
        "filename": "promexp-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ec5810d432d648958be8d5984ed5f885",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15229,
        "upload_time": "2021-05-25T07:37:10",
        "upload_time_iso_8601": "2021-05-25T07:37:10.249073Z",
        "url": "https://files.pythonhosted.org/packages/9e/9b/3c45d6925a2348c2c82c2662cf84521f35e8f14787835566fe4675bb1acd/promexp-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e9b3c45d6925a2348c2c82c2662cf84521f35e8f14787835566fe4675bb1acd",
        "md5": "ec5810d432d648958be8d5984ed5f885",
        "sha256": "0136ea6b1bbbcd50ae936fe757f33c9a26891b4c2e04560069485b221f1b3e2f"
      },
      "downloads": -1,
      "filename": "promexp-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ec5810d432d648958be8d5984ed5f885",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15229,
      "upload_time": "2021-05-25T07:37:10",
      "upload_time_iso_8601": "2021-05-25T07:37:10.249073Z",
      "url": "https://files.pythonhosted.org/packages/9e/9b/3c45d6925a2348c2c82c2662cf84521f35e8f14787835566fe4675bb1acd/promexp-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}