{
  "info": {
    "author": "Lewi Lie Uberg",
    "author_email": "lewi@uberg.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "<!--\n---\njupyter:\n  jupytext:\n    encoding: '# -*- coding: utf-8 -*-'\n    formats: ipynb,py:light,md\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.3'\n      jupytext_version: 1.11.1\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3\n---\n-->\n# Visual Automata\n\n[![Latest Version](https://img.shields.io/pypi/v/visual-automata.svg)](https://pypi.python.org/pypi/visual-automata/)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/visual-automata.svg)](https://pypi.python.org/pypi/visual-automata/)\n[![Downloads](https://pepy.tech/badge/visual-automata)](https://pepy.tech/project/visual-automata)\n[![Coverage](https://img.shields.io/codecov/c/github/lewiuberg/visual-automata-demo?color=blue)](https://app.codecov.io/gh/lewiuberg/visual-automata-demo)\n\nCopyright 2021 [Lewi Lie Uberg](https://uberg.me/)\\\n_Released under the MIT license_\n\nVisual Automata is a Python 3 library built as a wrapper for the [Automata](https://github.com/caleb531/automata) library to add more visualization features.\n\n## Contents\n\n- [Visual Automata](#visual-automata)\n  - [Contents](#contents)\n  - [Prerequisites](#prerequisites)\n  - [Installing](#installing)\n  - [Finite Automaton (FA)](#finite-automaton-fa)\n    - [VisualDFA](#visualdfa)\n      - [Importing](#importing)\n      - [Instantiating DFAs](#instantiating-dfas)\n      - [Converting](#converting)\n      - [Transition Table](#transition-table)\n      - [Minimal-DFA](#minimal-dfa)\n      - [Check input strings](#check-input-strings)\n      - [Show Diagram](#show-diagram)\n    - [VisualNFA](#visualnfa)\n      - [Importing](#importing-1)\n      - [Instantiating NFAs](#instantiating-nfas)\n      - [Converting](#converting-1)\n      - [Transition Table](#transition-table-1)\n      - [Eliminate lambda/epsilon](#eliminate-lambdaepsilon)\n      - [Check input strings](#check-input-strings-1)\n      - [Show Diagram](#show-diagram-1)\n  - [Authors](#authors)\n  - [License](#license)\n  - [Acknowledgments](#acknowledgments)\n\n## Prerequisites\n\n[`pip install automata-lib`](https://github.com/caleb531/automata)\\\n[`pip install pandas`](https://github.com/pandas-dev/pandas)\\\n[`pip install graphviz`](https://github.com/xflr6/graphviz)\\\n[`pip install colormath`](https://github.com/gtaylor/python-colormath)\\\n[`pip install jupyterlab`](https://github.com/jupyterlab/jupyterlab)\n\n## Installing\n\n[`pip install visual-automata`](https://pypi.org/project/visual-automata/)\n\n## Finite Automaton (FA)\n\n### VisualDFA\n\n#### Importing\n\nImport needed classes.\n\n```python\nfrom automata.fa.dfa import DFA\n\nfrom visual_automata.fa.dfa import VisualDFA\n```\n\n#### Instantiating DFAs\n\nDefine an visual_automata DFA that can accept any string ending with 00 or 11.\n\n```python\ndfa = VisualDFA(\n    states={\"q0\", \"q1\", \"q2\", \"q3\", \"q4\"},\n    input_symbols={\"0\", \"1\"},\n    transitions={\n        \"q0\": {\"0\": \"q3\", \"1\": \"q1\"},\n        \"q1\": {\"0\": \"q3\", \"1\": \"q2\"},\n        \"q2\": {\"0\": \"q3\", \"1\": \"q2\"},\n        \"q3\": {\"0\": \"q4\", \"1\": \"q1\"},\n        \"q4\": {\"0\": \"q4\", \"1\": \"q1\"},\n    },\n    initial_state=\"q0\",\n    final_states={\"q2\", \"q4\"},\n)\n```\n\n#### Converting\n\nAn automata-lib DFA can be converted to a VisualDFA.\n\nDefine an automata-lib DFA that can accept any string ending with 00 or 11.\n\n```python\ndfa = DFA(\n    states={\"q0\", \"q1\", \"q2\", \"q3\", \"q4\"},\n    input_symbols={\"0\", \"1\"},\n    transitions={\n        \"q0\": {\"0\": \"q3\", \"1\": \"q1\"},\n        \"q1\": {\"0\": \"q3\", \"1\": \"q2\"},\n        \"q2\": {\"0\": \"q3\", \"1\": \"q2\"},\n        \"q3\": {\"0\": \"q4\", \"1\": \"q1\"},\n        \"q4\": {\"0\": \"q4\", \"1\": \"q1\"},\n    },\n    initial_state=\"q0\",\n    final_states={\"q2\", \"q4\"},\n)\n```\n\nConvert automata-lib DFA to VisualDFA.\n\n```python\ndfa = VisualDFA(dfa)\n```\n\n#### Transition Table\n\nOutputs the transition table for the given DFA.\n\n```python\ndfa.table\n```\n\n```text\n       0    1\n→q0   q3   q1\nq1    q3  *q2\n*q2   q3  *q2\nq3   *q4   q1\n*q4  *q4   q1\n```\n\n#### Minimal-DFA\n\nCreates a minimal DFA which accepts the same inputs as the old one. Unreachable states are removed and equivalent states are merged. States are renamed by default.\n\n```python\nnew_dfa = VisualDFA(\n    states={'q0', 'q1', 'q2'},\n    input_symbols={'0', '1'},\n    transitions={\n        'q0': {'0': 'q0', '1': 'q1'},\n        'q1': {'0': 'q0', '1': 'q2'},\n        'q2': {'0': 'q2', '1': 'q1'}\n    },\n    initial_state='q0',\n    final_states={'q1'}\n)\n```\n\n```python\nnew_dfa.table\n```\n\n```text\n      0    1\n→q0  q0  *q1\n*q1  q0   q2\nq2   q2  *q1\n```\n\n```python\nnew_dfa.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/new_dfa.png?raw=true \"new_dfa\")\n\n```python\nminimal_dfa = VisualDFA.minify(new_dfa)\nminimal_dfa.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/minimal_dfa.png?raw=true \"minimal_dfa\")\n\n```python\nminimal_dfa.table\n```\n\n```text\n                0        1\n→{q0,q2}  {q0,q2}      *q1\n*q1       {q0,q2}  {q0,q2}\n```\n\n#### Check input strings\n\n`1001` does not end with `00` or `11`, and is therefore `Rejected`\n\n```python\ndfa.input_check(\"1001\")\n```\n\n```text\n          [Rejected]                         \nStep: Current state: Input symbol: New state:\n1                →q0             1         q1\n2                 q1             0         q3\n3                 q3             0        *q4\n4                *q4             1         q1\n```\n\n`10011` does end with `11`, and is therefore `Accepted`\n\n```python\ndfa.input_check(\"10011\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1                →q0             1         q1\n2                 q1             0         q3\n3                 q3             0        *q4\n4                *q4             1         q1\n5                 q1             1        *q2\n```\n\n#### Show Diagram\n\nFor IPython `dfa.show_diagram()` may be used.\\\nFor a python script `dfa.show_diagram(view=True)` may be used to automatically view the graph as a PDF file.\n\n```python\ndfa.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/dfa.png?raw=true \"dfa\")\n\nThe `show_diagram` method also accepts input strings, and will return a graph with gradient `red` arrows for `Rejected` results, and gradient `green` arrows for `Accepted` results. It will also display a table with transitions states stepwise. The steps in this table will correspond with the `[number]` over each traversed arrow.\n\nPlease note that for visual purposes additional arrows are added if a transition is traversed more than once.\n\n```python\ndfa.show_diagram(\"1001\")\n```\n\n```text\n          [Rejected]                         \nStep: Current state: Input symbol: New state:\n1                →q0             1         q1\n2                 q1             0         q3\n3                 q3             0        *q4\n4                *q4             1         q1\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/dfa_1001.png?raw=true \"dfa_1001\")\n\n```python\ndfa.show_diagram(\"10011\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1                →q0             1         q1\n2                 q1             0         q3\n3                 q3             0        *q4\n4                *q4             1         q1\n5                 q1             1        *q2\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/dfa_10011.png?raw=true \"dfa_10011\")\n\n### VisualNFA\n\n#### Importing\n\nImport needed classes.\n\n```python\nfrom automata.fa.nfa import NFA\n\nfrom visual_automata.fa.nfa import VisualNFA\n```\n\n#### Instantiating NFAs\n\nDefine an visual_automata NFA that can accept any string with the pattern 10, 1010, 101010.\n\n```python\nnfa = VisualNFA(\n    states={\"q0\", \"q1\", \"q2\"},\n    input_symbols={\"0\", \"1\"},\n    transitions={\n        \"q0\": {\"\": {\"q2\"}, \"1\": {\"q1\"}},\n        \"q1\": {\"1\": {\"q2\"}, \"0\": {\"q0\", \"q2\"}},\n        \"q2\": {},\n    },\n    initial_state=\"q0\",\n    final_states={\"q0\"},\n)\n```\n\n#### Converting\n\nAn automata-lib NFA can be converted to a VisualNFA.\n\nDefine an automata-lib NFA that can accept any string with the pattern 10, 1010, 101010.\n\n```python\nnfa = NFA(\n    states={\"q0\", \"q1\", \"q2\"},\n    input_symbols={\"0\", \"1\"},\n    transitions={\n        \"q0\": {\"\": {\"q2\"}, \"1\": {\"q1\"}},\n        \"q1\": {\"1\": {\"q2\"}, \"0\": {\"q0\", \"q2\"}},\n        \"q2\": {},\n    },\n    initial_state=\"q0\",\n    final_states={\"q0\"},\n)\n```\n\nConvert automata-lib NFA to VisualNFA.\n\n```python\nnfa = VisualNFA(nfa)\n```\n\n#### Transition Table\n\nOutputs the transition table for the given DFA.\n\n```python\nnfa.table\n```\n\n```text\n             0   1   λ\n→*q0         ∅  q1  q2\nq1    {*q0,q2}  q2   ∅\nq2           ∅   ∅   ∅\n```\n\n#### Eliminate lambda/epsilon\n\nCreates a NFA with lambda transitions removed.\n\n```python\nnfa_eliminated = VisualNFA.eliminate_lambda(nfa)\n```\n\n```python\nnfa_eliminated.table\n```\n\n```text\n             0   1\n→*q0         ∅  q1\nq1    {*q0,q2}  q2\nq2           ∅   ∅\n```\n\n```python\nnfa_eliminated.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/eliminated_nfa.png?raw=true \"eliminated_nfa\")\n\n#### Check input strings\n\n`101` does not correspond with the pattern `10`, `1010`, `101010`, and is therefore `Rejected`\n\n```python\nnfa.input_check(\"101\")\n```\n\n```text\n          [Rejected]                         \nStep: Current state: Input symbol: New state:\n1               →*q0             1         q1\n2                 q1             0         q2\n3                 q2             1          ∅\n```\n\n`1010` does correspond with the pattern `10`, `1010`, `101010`, and is therefore `Accepted`\n\n```python\nnfa.input_check(\"1010\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1               →*q0             1         q1\n2                 q1             0       →*q0\n3               →*q0             1         q1\n4                 q1             0       →*q0\n```\n\n#### Show Diagram\n\nFor IPython `nfa.show_diagram()` may be used.\\\nFor a python script `nfa.show_diagram(view=True)` may be used to automatically view the graph as a PDF file.\n\n```python\nnfa.show_diagram()\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/nfa.png?raw=true \"nfa\")\n\nThe `show_diagram` method also accepts input strings, and will return a graph with gradient `red` arrows for `Rejected` results, and gradient `green` arrows for `Accepted` results. It will also display a table with transitions states stepwise. The steps in this table will correspond with the `[number]` over each traversed arrow.\n\nPlease note that for visual purposes additional arrows are added if a transition is traversed more than once.\n\n```python\nnfa.show_diagram(\"101\")\n```\n\n```text\n          [Rejected]                         \nStep: Current state: Input symbol: New state:\n1               →*q0             1         q1\n2                 q1             0         q2\n3                 q2             1          ∅\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/nfa_101.png?raw=true \"nfa_101\")\n\n```python\nnfa.show_diagram(\"1010\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1               →*q0             1         q1\n2                 q1             0       →*q0\n3               →*q0             1         q1\n4                 q1             0       →*q0\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/nfa_1010.png?raw=true \"nfa_1010\")\n\nPlease note that for long input strings, the path calculations may take some time.\n\n```python\nbig_nfa = VisualNFA(\n    states={\"q1\", \"q2\", \"q3\", \"q4\", \"q5\", \"q6\", \"q7\", \"q8\"},\n    input_symbols={\"A\", \"C\", \"G\", \"T\"},\n    transitions={\n        \"q1\": {\"A\": {\"q7\"}, \"C\": {\"q4\"}, \"G\": {\"q4\", \"q2\"}, \"T\": {\"q4\"}},\n        \"q2\": {\"A\": {\"q3\", \"q6\"}, \"C\": {\"q2\", \"q4\"}, \"G\": {\"q3\", \"q6\"}, \"T\": {\"q6\"}},\n        \"q3\": {\"A\": {\"q8\"}, \"C\": {\"q8\"}, \"T\": {\"q8\"}},\n        \"q4\": {\"A\": {\"q5\"}, \"C\": {\"q4\"}, \"G\": {\"q5\"}, \"T\": {\"q2\", \"q4\", \"q5\"}},\n        \"q5\": {\"A\": {\"q3\", \"q8\"}, \"C\": {\"q3\", \"q8\"}, \"G\": {\"q8\"}, \"T\": {\"q3\", \"q8\"}},\n        \"q6\": {\"A\": {\"q8\"}, \"C\": {\"q8\"}, \"G\": {\"q8\"}, \"T\": {\"q8\"}},\n        \"q7\": {\"A\": {\"q7\", \"q8\"}, \"C\": {\"q7\", \"q8\"}, \"G\": {\"q8\"}, \"T\": {\"q3\", \"q8\"}},\n        \"q8\": {},\n    },\n    initial_state=\"q1\",\n    final_states={\"q8\"},\n)\n```\n\n```python\nbig_nfa.table\n```\n\n```python\nbig_nfa.show_diagram(\"CGC\")\n```\n\n```text\n          [Accepted]                         \nStep: Current state: Input symbol: New state:\n1                →q1             C         q4\n2                 q4             G         q5\n3                 q5             C        *q8\n```\n\n![alt text](https://github.com/lewiuberg/visual-automata/blob/master/images/big_nfa.png?raw=true \"big_nfa\")\n\n## Authors\n\n- **[Lewi Lie Uberg](https://github.com/lewiuberg)** - [uberg.me](https://uberg.me/)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](https://github.com/lewiuberg/visual-automata/blob/master/LICENSE.txt) file for details\n\n## Acknowledgments\n\n- [Caleb Evans](https://github.com/caleb531) for his work on automata-lib.\n- [Geir Arne Hjelle](https://github.com/gahjelle), [Michal Porteš](https://github.com/mportesdev), and [Bart Willems](https://github.com/bart-r-willems) for their general counsel.\n- [Dr. Seifedine Kadry](https://www.noroff.no/en/contact/staff/53-academic/423-seifedine-kadry). My _Further Discrete Mathematics_ professor at **Noroff University College**, for teaching me Automata.\n- [JFLAP](http://www.jflap.org) for their work on a GUI based Automata application.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lewiuberg/visual-automata-demo",
    "keywords": "automata",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "visual-automata-demo",
    "package_url": "https://pypi.org/project/visual-automata-demo/",
    "platform": "",
    "project_url": "https://pypi.org/project/visual-automata-demo/",
    "project_urls": {
      "Homepage": "https://github.com/lewiuberg/visual-automata-demo"
    },
    "release_url": "https://pypi.org/project/visual-automata-demo/0.0.4/",
    "requires_dist": [
      "automata-lib",
      "pandas",
      "graphviz",
      "colormath",
      "jupyterlab",
      "forbiddenfruit"
    ],
    "requires_python": "",
    "summary": "Visual Automata is a Python 3 library built as a wrapper for the Automata library to add more visualization features.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10084207,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af6b258779061f76e487521bab97579cb910bb1ad6ffc1e3f497eba45193f841",
          "md5": "b69377ac9a52a1e400c5183506242ba1",
          "sha256": "2fde0eaf795a41103897b9ca520c1f8fba03f1091366e548a44089f46a38f895"
        },
        "downloads": -1,
        "filename": "visual_automata_demo-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b69377ac9a52a1e400c5183506242ba1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15956,
        "upload_time": "2021-04-15T20:05:36",
        "upload_time_iso_8601": "2021-04-15T20:05:36.931053Z",
        "url": "https://files.pythonhosted.org/packages/af/6b/258779061f76e487521bab97579cb910bb1ad6ffc1e3f497eba45193f841/visual_automata_demo-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93eb2b68390ad15f20e371903aaf7b69f0b542c95e9f94922b58658d6b9fde13",
          "md5": "f7e90c0540caae4d0dc7dcb09a0fee9a",
          "sha256": "05ce62f6800eaa0b295e65bf80c2046bf706be6f5b53f4c7f9b64a0b9e5a32e6"
        },
        "downloads": -1,
        "filename": "visual-automata-demo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7e90c0540caae4d0dc7dcb09a0fee9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16489,
        "upload_time": "2021-04-15T20:05:38",
        "upload_time_iso_8601": "2021-04-15T20:05:38.763199Z",
        "url": "https://files.pythonhosted.org/packages/93/eb/2b68390ad15f20e371903aaf7b69f0b542c95e9f94922b58658d6b9fde13/visual-automata-demo-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cf6ebad512b4a123f79d1ff53c50c5a50e06ab94c05355f109c662478369a6b",
          "md5": "6673434b597680cf46a485d954bda3ae",
          "sha256": "f0e219a3fa05b668d5f98554285d18cc1122e3e4521c94b978c36ce75d6856b6"
        },
        "downloads": -1,
        "filename": "visual_automata_demo-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6673434b597680cf46a485d954bda3ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15951,
        "upload_time": "2021-04-16T06:03:03",
        "upload_time_iso_8601": "2021-04-16T06:03:03.342849Z",
        "url": "https://files.pythonhosted.org/packages/3c/f6/ebad512b4a123f79d1ff53c50c5a50e06ab94c05355f109c662478369a6b/visual_automata_demo-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae16cc02e37d49acb51b52b7711bd4e2a6e821c02b6bb60740b870bfe262941b",
          "md5": "bd35b0db416f91aaf9e909c3efb34587",
          "sha256": "43eb58d3a1a77ee962d3b807cc1ad768927b2881515649dd023f77a9f8250be3"
        },
        "downloads": -1,
        "filename": "visual-automata-demo-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bd35b0db416f91aaf9e909c3efb34587",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16097,
        "upload_time": "2021-04-16T06:03:04",
        "upload_time_iso_8601": "2021-04-16T06:03:04.431935Z",
        "url": "https://files.pythonhosted.org/packages/ae/16/cc02e37d49acb51b52b7711bd4e2a6e821c02b6bb60740b870bfe262941b/visual-automata-demo-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99ba5a592cdbb06d6bda3a143e7740bb1947b30307e8b2b2577630744e6c8055",
          "md5": "9f5ab26f944120e6c27f4aab2284e501",
          "sha256": "eed87ef4921fc8d3db9588f7f2434d34614c565c8557c2d4569cae10ae8f89c6"
        },
        "downloads": -1,
        "filename": "visual_automata_demo-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f5ab26f944120e6c27f4aab2284e501",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15951,
        "upload_time": "2021-04-16T13:24:01",
        "upload_time_iso_8601": "2021-04-16T13:24:01.905544Z",
        "url": "https://files.pythonhosted.org/packages/99/ba/5a592cdbb06d6bda3a143e7740bb1947b30307e8b2b2577630744e6c8055/visual_automata_demo-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f679109f1fac7309f53f5d59e11b5334ff76966aa41e9016968553ad06214f1d",
          "md5": "1ab656405796e525b7f43f7c3de27607",
          "sha256": "055d6de7c78e9cb6e17c3bed355dc88ca35d343aeb578c2acc5305c39e6f9df7"
        },
        "downloads": -1,
        "filename": "visual-automata-demo-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1ab656405796e525b7f43f7c3de27607",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16106,
        "upload_time": "2021-04-16T13:24:03",
        "upload_time_iso_8601": "2021-04-16T13:24:03.105228Z",
        "url": "https://files.pythonhosted.org/packages/f6/79/109f1fac7309f53f5d59e11b5334ff76966aa41e9016968553ad06214f1d/visual-automata-demo-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99ba5a592cdbb06d6bda3a143e7740bb1947b30307e8b2b2577630744e6c8055",
        "md5": "9f5ab26f944120e6c27f4aab2284e501",
        "sha256": "eed87ef4921fc8d3db9588f7f2434d34614c565c8557c2d4569cae10ae8f89c6"
      },
      "downloads": -1,
      "filename": "visual_automata_demo-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f5ab26f944120e6c27f4aab2284e501",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15951,
      "upload_time": "2021-04-16T13:24:01",
      "upload_time_iso_8601": "2021-04-16T13:24:01.905544Z",
      "url": "https://files.pythonhosted.org/packages/99/ba/5a592cdbb06d6bda3a143e7740bb1947b30307e8b2b2577630744e6c8055/visual_automata_demo-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f679109f1fac7309f53f5d59e11b5334ff76966aa41e9016968553ad06214f1d",
        "md5": "1ab656405796e525b7f43f7c3de27607",
        "sha256": "055d6de7c78e9cb6e17c3bed355dc88ca35d343aeb578c2acc5305c39e6f9df7"
      },
      "downloads": -1,
      "filename": "visual-automata-demo-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1ab656405796e525b7f43f7c3de27607",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16106,
      "upload_time": "2021-04-16T13:24:03",
      "upload_time_iso_8601": "2021-04-16T13:24:03.105228Z",
      "url": "https://files.pythonhosted.org/packages/f6/79/109f1fac7309f53f5d59e11b5334ff76966aa41e9016968553ad06214f1d/visual-automata-demo-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}