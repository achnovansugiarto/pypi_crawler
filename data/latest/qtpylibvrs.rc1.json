{
  "info": {
    "author": "Ran Aroussi",
    "author_email": "ran@aroussi.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Office/Business :: Financial",
      "Topic :: Office/Business :: Financial :: Investment",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "QTPyLib, Pythonic Algorithmic Trading\r\n=====================================\r\n\r\n.. image:: https://img.shields.io/badge/python-3.4+-blue.svg?style=flat\r\n    :target: https://pypi.python.org/pypi/qtpylib\r\n    :alt: Python version\r\n\r\n.. image:: https://img.shields.io/pypi/v/qtpylib.svg?maxAge=60\r\n    :target: https://pypi.python.org/pypi/qtpylib\r\n    :alt: PyPi version\r\n\r\n.. image:: https://img.shields.io/pypi/status/qtpylib.svg?maxAge=60\r\n    :target: https://pypi.python.org/pypi/qtpylib\r\n    :alt: PyPi status\r\n\r\n.. image:: https://img.shields.io/travis/ranaroussi/qtpylib/main.svg?maxAge=1\r\n    :target: https://travis-ci.org/ranaroussi/qtpylib\r\n    :alt: Travis-CI build status\r\n\r\n.. image:: https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat\r\n    :target: http://qtpylib.io/docs/latest/?badge=latest\r\n    :alt: Documentation Status\r\n\r\n.. image:: https://img.shields.io/badge/Chat-Discord-%237289d6.svg?style=flat&logo=discord&maxAge=60\r\n    :target: https://discord.gg/7wEzsuV\r\n    :alt: Chat on Discord\r\n\r\n.. image:: https://img.shields.io/github/stars/ranaroussi/qtpylib.svg?style=social&label=Star&maxAge=60\r\n    :target: https://github.com/ranaroussi/qtpylib\r\n    :alt: Star this repo\r\n\r\n.. image:: https://img.shields.io/twitter/follow/aroussi.svg?style=social&label=Follow&maxAge=60\r\n    :target: https://twitter.com/aroussi\r\n    :alt: Follow me on twitter\r\n\r\n\\\r\n\r\nQTPyLib (**Q**\\ uantitative **T**\\ rading **Py**\\ thon **Lib**\\ rary)\r\nis a simple, **event-driven algorithmic trading library** written in Python,\r\nthat supports backtesting, as well as paper and live trading via\r\n`Interactive Brokers <https://www.interactivebrokers.com>`_.\r\n\r\nI developed QTPyLib because I wanted for a simple,\r\nyet powerful, trading library that will let me focus on the\r\ntrading logic itself and ignore everything else.\r\n\r\n`Full Documentation » <http://www.qtpylib.io/>`_\r\n\r\n`Changelog » <./CHANGELOG.rst>`_\r\n\r\n-----\r\n\r\n**Read about the future of QTPyLib here:**\r\nhttps://aroussi.com/post/the-future-of-qtpylib\r\n\r\n-----\r\n\r\nFeatures\r\n========\r\n\r\n- A continuously-running Blotter that lets you capture market data even when your algos aren't running.\r\n- Tick, Bar and Trade data is stored in MySQL for later analysis and backtesting.\r\n- Using pub/sub architecture using `ØMQ <http://zeromq.org>`_ (ZeroMQ) for communicating between the Algo and the Blotter allows for a single Blotter/multiple Algos running on the same machine.\r\n- **Support for Order Book, Quote, Time, Tick or Volume based strategy resolutions**.\r\n- Includes many common indicators that you can seamlessly use in your algorithm.\r\n- **Market data events use asynchronous, non-blocking architecture**.\r\n- Have orders delivered to your mobile via SMS (requires a `Nexmo <https://www.nexmo.com/>`_ or `Twilio <https://www.twilio.com/>`_ account).\r\n- Full integration with `TA-Lib <http://ta-lib.org>`_ via dedicated module (`see documentation <http://qtpylib.io/docs/latest/indicators.html#ta-lib-integration>`_).\r\n- Ability to import any Python library (such as `scikit-learn <http://scikit-learn.org>`_ or `TensorFlow <https://www.tensorflow.org>`_) to use them in your algorithms.\r\n\r\n-----\r\n\r\nQuickstart\r\n==========\r\n\r\nThere are 5 main components to QTPyLib:\r\n\r\n1. ``Blotter`` - handles market data retrieval and processing.\r\n2. ``Broker`` - sends and process orders/positions (abstracted layer).\r\n3. ``Algo`` - (sub-class of ``Broker``) communicates with the ``Blotter`` to pass market data to your strategies, and process/positions orders via ``Broker``.\r\n4. ``Reports`` - provides real-time monitoring of trades and open positions via Web App, as well as a simple REST API for trades, open positions, and market data.\r\n5. Lastly, **Your Strategies**, which are sub-classes of ``Algo``, handle the trading logic/rules. This is where you'll write most of your code.\r\n\r\n\r\n1. Get Market Data\r\n------------------\r\n\r\nTo get started, you need to first create a Blotter script:\r\n\r\n.. code:: python\r\n\r\n    # blotter.py\r\n    from qtpylib.blotter import Blotter\r\n\r\n    class MainBlotter(Blotter):\r\n        pass # we just need the name\r\n\r\n    if __name__ == \"__main__\":\r\n        blotter = MainBlotter()\r\n        blotter.run()\r\n\r\nThen, with IB TWS/GW running, run the Blotter from the command line:\r\n\r\n.. code:: bash\r\n\r\n    $ python blotter.py\r\n\r\nIf your strategy needs order book / market depth data, add the ``--orderbook`` flag to the command:\r\n\r\n.. code:: bash\r\n\r\n    $ python blotter.py --orderbook\r\n\r\n\r\n2. Write your Algorithm\r\n-----------------------\r\n\r\nWhile the Blotter running in the background, write and execute your algorithm:\r\n\r\n.. code:: python\r\n\r\n    # strategy.py\r\n    from qtpylib.algo import Algo\r\n\r\n    class CrossOver(Algo):\r\n\r\n        def on_start(self):\r\n            pass\r\n\r\n        def on_fill(self, instrument, order):\r\n            pass\r\n\r\n        def on_quote(self, instrument):\r\n            pass\r\n\r\n        def on_orderbook(self, instrument):\r\n            pass\r\n\r\n        def on_tick(self, instrument):\r\n            pass\r\n\r\n        def on_bar(self, instrument):\r\n            # get instrument history\r\n            bars = instrument.get_bars(window=100)\r\n\r\n            # or get all instruments history\r\n            # bars = self.bars[-20:]\r\n\r\n            # skip first 20 days to get full windows\r\n            if len(bars) < 20:\r\n                return\r\n\r\n            # compute averages using internal rolling_mean\r\n            bars['short_ma'] = bars['close'].rolling(window=10).mean()\r\n            bars['long_ma']  = bars['close'].rolling(window=20).mean()\r\n\r\n            # get current position data\r\n            positions = instrument.get_positions()\r\n\r\n            # trading logic - entry signal\r\n            if bars['short_ma'].crossed_above(bars['long_ma'])[-1]:\r\n                if not instrument.pending_orders and positions[\"position\"] == 0:\r\n\r\n                    # buy one contract\r\n                    instrument.buy(1)\r\n\r\n                    # record values for later analysis\r\n                    self.record(ma_cross=1)\r\n\r\n            # trading logic - exit signal\r\n            elif bars['short_ma'].crossed_below(bars['long_ma'])[-1]:\r\n                if positions[\"position\"] != 0:\r\n\r\n                    # exit / flatten position\r\n                    instrument.exit()\r\n\r\n                    # record values for later analysis\r\n                    self.record(ma_cross=-1)\r\n\r\n\r\n    if __name__ == \"__main__\":\r\n        strategy = CrossOver(\r\n            instruments = [ (\"ES\", \"FUT\", \"GLOBEX\", \"USD\", 201609, 0.0, \"\") ], # ib tuples\r\n            resolution  = \"1T\", # Pandas resolution (use \"K\" for tick bars)\r\n            tick_window = 20, # no. of ticks to keep\r\n            bar_window  = 5, # no. of bars to keep\r\n            preload     = \"1D\", # preload 1 day history when starting\r\n            timezone    = \"US/Central\" # convert all ticks/bars to this timezone\r\n        )\r\n        strategy.run()\r\n\r\n\r\nTo run your algo in a **live** enviroment, from the command line, type:\r\n\r\n.. code:: bash\r\n\r\n    $ python strategy.py --logpath ~/qtpy/\r\n\r\n\r\nThe resulting trades be saved in ``~/qtpy/STRATEGY_YYYYMMDD.csv`` for later analysis.\r\n\r\n\r\n3. Viewing Live Trades\r\n----------------------\r\n\r\nWhile the Blotter running in the background, write the dashboard:\r\n\r\n.. code:: python\r\n\r\n    # dashboard.py\r\n    from qtpylib.reports import Reports\r\n\r\n    class Dashboard(Reports):\r\n        pass # we just need the name\r\n\r\n    if __name__ == \"__main__\":\r\n        dashboard = Dashboard(port = 5000)\r\n        dashboard.run()\r\n\r\n\r\nTo run your dashboard, run it from the command line:\r\n\r\n.. code:: bash\r\n\r\n    $ python dashboard.py\r\n\r\n    >>> Dashboard password is: a0f36d95a9\r\n    >>> Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\r\n\r\nNow, point your browser to http://localhost:5000 and use the password generated to access your dashboard.\r\n\r\n-----\r\n\r\n\r\n.. note::\r\n\r\n    You can find other examples in the ``qtpylib/examples directory``.\r\n    Please refer to the `Full Documentation <http://www.qtpylib.io/>`_ to learn\r\n    how to enable SMS notifications, use the bundled Indicators, and more.\r\n\r\n\r\n\r\nInstallation\r\n============\r\n\r\nInstall using ``pip``:\r\n\r\n.. code:: bash\r\n\r\n    $ pip install qtpylib --upgrade --no-cache-dir\r\n\r\n\r\nRequirements\r\n------------\r\n\r\n* `Python <https://www.python.org>`_ >=3.4\r\n* `Pandas <https://github.com/pydata/pandas>`_ (tested to work with >=0.18.1)\r\n* `Numpy <https://github.com/numpy/numpy>`_ (tested to work with >=1.11.1)\r\n* `PyZMQ <https://github.com/zeromq/pyzmq>`_ (tested to work with >=15.2.1)\r\n* `PyMySQL <https://github.com/PyMySQL/PyMySQL>`_ (tested to work with >=0.7.6)\r\n* `pytz <http://pytz.sourceforge.net>`_ (tested to work with >=2016.6.1)\r\n* `dateutil <https://pypi.python.org/pypi/python-dateutil>`_ (tested to work with >=2.5.1)\r\n* `Nexmo-Python <https://github.com/Nexmo/nexmo-python>`_ for SMS support (tested to work with >=1.2.0)\r\n* `Twilio-Python <https://github.com/twilio/twilio-python>`_ for SMS support (tested to work with >=5.4.0)\r\n* `Flask <http://flask.pocoo.org>`_ for the Dashboard (tested to work with >=0.11)\r\n* `Requests <https://github.com/kennethreitz/requests>`_ (tested to work with >=2.10.0)\r\n* `IbPy2 <https://github.com/blampe/IbPy>`_ (tested to work with >=0.8.0)\r\n* `ezIBpy <https://github.com/ranaroussi/ezibpy>`_ (IbPy wrapper, tested to work with >=1.12.66)\r\n* Latest Interactive Brokers’ `TWS <https://www.interactivebrokers.com/en/index.php?f=15875>`_ or `IB Gateway <https://www.interactivebrokers.com/en/index.php?f=16457>`_ installed and running on the machine\r\n* `MySQL Server <https://www.mysql.com/>`_ installed and running with a database for QTPyLib\r\n\r\n-----\r\n\r\nLegal Stuff\r\n===========\r\n\r\nQTPyLib is licensed under the **Apache License, Version 2.0**. A copy of which is included in LICENSE.txt.\r\n\r\nQTPyLib is not a product of Interactive Brokers, nor is it affiliated with Interactive Brokers.\r\n\r\n\r\n\r\nP.S.\r\n----\r\n\r\nI'm very interested in your experience with QTPyLib. Please drop me a note with any feedback you have.\r\n\r\n**Ran**\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ranaroussi/qtpylib",
    "keywords": "qtpylib qtpy algotrading algo trading interactive brokers tws ibgw ibpy ezibpy",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "QTPyLibVRS",
    "package_url": "https://pypi.org/project/QTPyLibVRS/",
    "platform": "any",
    "project_url": "https://pypi.org/project/QTPyLibVRS/",
    "project_urls": {
      "Homepage": "https://github.com/ranaroussi/qtpylib"
    },
    "release_url": "https://pypi.org/project/QTPyLibVRS/1.5.85/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Quantitative Trading Python Library with VRS edits",
    "version": "1.5.85",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14544914,
  "releases": {
    "1.5.85": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "030baf06a4e94f9d565e949e3d828eec843eb7606503f24b7bb19169fc1bb557",
          "md5": "2cc0ca4fb65b4a46bf26e529e80b24fd",
          "sha256": "bd92939e1424cfe42c6ee65f2464d0e3cf91436592123500c3cca8078821d441"
        },
        "downloads": -1,
        "filename": "QTPyLibVRS-1.5.85.tar.gz",
        "has_sig": false,
        "md5_digest": "2cc0ca4fb65b4a46bf26e529e80b24fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 118990,
        "upload_time": "2022-07-25T19:35:57",
        "upload_time_iso_8601": "2022-07-25T19:35:57.458596Z",
        "url": "https://files.pythonhosted.org/packages/03/0b/af06a4e94f9d565e949e3d828eec843eb7606503f24b7bb19169fc1bb557/QTPyLibVRS-1.5.85.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "030baf06a4e94f9d565e949e3d828eec843eb7606503f24b7bb19169fc1bb557",
        "md5": "2cc0ca4fb65b4a46bf26e529e80b24fd",
        "sha256": "bd92939e1424cfe42c6ee65f2464d0e3cf91436592123500c3cca8078821d441"
      },
      "downloads": -1,
      "filename": "QTPyLibVRS-1.5.85.tar.gz",
      "has_sig": false,
      "md5_digest": "2cc0ca4fb65b4a46bf26e529e80b24fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 118990,
      "upload_time": "2022-07-25T19:35:57",
      "upload_time_iso_8601": "2022-07-25T19:35:57.458596Z",
      "url": "https://files.pythonhosted.org/packages/03/0b/af06a4e94f9d565e949e3d828eec843eb7606503f24b7bb19169fc1bb557/QTPyLibVRS-1.5.85.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}