{
  "info": {
    "author": "Theo Walker",
    "author_email": "theo.ca.walker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PandasBox\n\n[![tests Actions Status](https://github.com/manimino/pandasbox/workflows/tests/badge.svg)](https://github.com/manimino/pandasbox/actions)\n[![performance Actions Status](https://github.com/manimino/pandasbox/workflows/performance/badge.svg)](https://github.com/manimino/pandasbox/actions)\n\nContainers for finding Python objects by attribute. Backed by Pandas.\n\n`pip install pandasbox`\n\n⚠️ This project is not being maintained. It's unclear if it's actually got a use case.\n\n____\n\n### Usage\n```\nfrom pandasbox import PandasBox\ntb = PandasBox(\n    [{'item': 1, 'size': 1000, 'shape': 'square'}],  # provide a list of objects or dicts \n    {'size': int, 'shape': str})                     # specify attributes to store\ntb.find('size >= 1000 and shape == \"square\"')        # find by attribute value\n```\n\nThe objects can be any container of `class`, `dataclass`, `namedtuple`, or `dict` objects.\n\nThere are two classes available.\n - `PandasBox`: SQLite-backed container. Faster when finding a few of your objects (< 10%).\n - `PandasBox`: Pandas-backed container. Faster when finding many of your objects (>= 10%). \n\nYou can `add()`, `add_many()`, `update()`, and `remove()` items from a PandasBox or PandasBox.\n\n____\n\n### How it works\n\nWhen you do: `PandasBox(list_of_objects, on={'size': int, 'shape': string})` or `PandasBox(...)`\n\nA table or dataframe is created with 3 columns:\n - size\n - shape\n - Python object reference\n\nOn `find()`, a query will run to find the matching objects.\n\nOnly the relevant attributes of the object are copied into the table. The rest of the object remains in memory.\n\nAn ideal use case is when you have \"heavy\" objects containing images / audio / large texts, plus some small\nmetadata fields that you want to find by. Just make a PandasBox or PandasBox on the metadata, and use it to find\nthe object without needing to serialize / deserialize the heavy stuff.\n\nThe `pandasbox` containers are especially good when finding by `<` and `>`. If you only need `==`, consider \n[filtered](https://pypi.org/project/filtered/) -- it is based on dict lookups which are faster in that case. \n\n____\n\n## API\n\nThe API is largely the same across PandasBox and PandasBox. The only difference is initialization.\n\n### PandasBox Init \n\n```\nPandasBox(\n        objs: Optional[Iterable[Any]] = None,\n        on: Optional[Dict[str, Any]] = None,\n        index: Optional[List[ Union[Tuple[str], str]]] = None\n)\n```\n\nCreates a PandasBox.\n\n - `objs` is optional. It can be any container of class, dataclass, dict, or namedtuple objects.\n - `on` is required. It specifies the attributes and types to index. The allowed types are float, int, bool, and str.\n - `index` specifies the indices to create on the SQLite table. If unspecified, a single-column index is made on each\nattribute. \n\nThe `index` parameter is the key to getting good performance. A multi-column index can often speed up `find()` \noperations. `index=[('a', 'b', 'c'), 'd']` will create a multi-column index on `(a, b, c)` and a single-column index \non `d`.  Conversely, some columns such as those containing string data may perform better without an index.\n\nSee [SQLite index documentation](https://www.sqlite.org/queryplanner.html) for more insights.\n\n### PandasBox Init\n\nCreates a PandasBox.\n\n```\nPandasBox(\n        objs: Optional[Iterable[Any]] = None,\n        on: Optional[Dict[str, Any]] = None,\n        : Optional[List[ Union[Tuple[str], str]]] = None\n)\n```\n\n## Other API functions\n\nThe remaining functions are the same for both PandasBox and PandasBox; exceptions as noted.\n\n### find()\n\n`find(where: Optional[str]) -> List` finds objects matching the query string in `where`.\n\nExamples: \n - `tb.find('b == True and string == \"okay\"')`\n - `tb.find('(x == 0 and y >= 1000.0) or x == 9')`\n\nIf `where` is unspecified, all objects in the container are returned. \n\nThe syntax of `where` is nearly identical between pandas and sqlite. Exceptions:\n - In sqlite, use `find('x is null')` / `find('x is not null')`. \n - In pandas, use `find('x != x')` to match nulls, or `find('x == x')` for non-nulls. \n - Sqlite accepts either `=` or `==` for equality; pandas accepts only `==`.\n \nConsult the syntax for [SQLite queries](https://www.sqlite.org/lang_select.html) or \n[pandas queries](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html) as needed.\n\n### add(), add_many()\n\n```\nadd(obj:Any)\nadd_many(objs:Iterable[Any])\n```\n\nThe `add()` method adds a single object. If you have many objects, it is much faster to `add_many()` than it is to\ncall `add()` on each one.\n\nIf an added object is missing an attribute, the object will still be added. The missing attribute will be given a \n`None` value.\n\n### update()\n\n`update(self, obj: Any, updates: Dict[str, Any])` updates attributes of a single object in the index.\n\n`updates` is a dict containing the new values for each changed attribute, e.g. `{'x': 5.5, 'b': True}`.\n\nIf you change an indexed object's attributes without calling `update()`, the PandasBox will be out of sync and\nreturn inaccurate results. \n\n`update()` will changes both the value in the PandasBox table and the object's value.\n\nUpdate is fast (less than 1 ms), it's O(log n) in both sqlite and pandas.\n\n### remove()\n\n`remove(self, obj: Any)` removes an object. \n\nRemove is fast (less than 1ms) in SQLite but slower (tens of ms) in Pandas. \nThis is because removing an item requires rebuilding arrays there.\n\n### Container methods\n\nYou can do the usual container things:\n - Length: `len(tb)`\n - Contains: `obj in tb`\n - Iteration: `for obj in tb: ...`\n\n____\n\n## Performance\n\n|                 | Baseline | SqliteBox  | PandasBox |\n|-----------------|----------|------------|-----------|\n| Find 1 item     | 0.9s     | 0.2ms      | 43.1ms    |\n| Find 10 items   | 0.9s     | 0.7ms      | 44.9ms    |\n| Find 100 items  | 1.0s     | 1.9ms      | 43.8ms    |\n| Find 1K items   | 1.0s     | 6.7ms      | 43.9ms    |\n| Find 10K items  | 1.1s     | 27.2ms     | 47.6ms    |\n| Find 100K items | 1.2s     | 0.18s      | 88.3ms    |\n| Find 1M items   | 1.7s     | 1.37s      | 0.24s     |\n| Find 10M items  | 2.9s     | 10.6s      | 0.45s     |\n\nThis is a benchmark on random range queries against a dataset of 10 million (10^7) objects indexed on two numeric \nfields. `Baseline` is a Python list comprehension.\n\n\n![Benchmark: sqlite does well on small queries, other engines do better on large queries.](notebooks/benchmark.png)\n\nThis is the same data as a graph, showing relative speedup. Each line is divided by `baseline`. \nNote that both axis labels are powers of 10. So `10^3` on the Y-axis indicates a 1000X speedup.\n\nSee [examples](/examples) for more performance tests.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/manimino/pandasbox/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pandasbox",
    "package_url": "https://pypi.org/project/pandasbox/",
    "platform": null,
    "project_url": "https://pypi.org/project/pandasbox/",
    "project_urls": {
      "Documentation": "https://pypi.org/project/pandasbox/",
      "Homepage": "https://github.com/manimino/pandasbox/",
      "Repository": "https://github.com/manimino/pandasbox/"
    },
    "release_url": "https://pypi.org/project/pandasbox/0.2.0/",
    "requires_dist": [
      "pandas (>=1.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14596637,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bf31c68a0eff996ea989597067ed6f6a7e4c93f5e426abceafe675e70dd6f64",
          "md5": "d69a186947a049316ba4b02551f8f53b",
          "sha256": "26d29165734ff3bc341bdc0fbd55f43405bf11a72ed2b32698f5eebdfac66ddc"
        },
        "downloads": -1,
        "filename": "pandasbox-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d69a186947a049316ba4b02551f8f53b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10188,
        "upload_time": "2022-07-30T02:49:44",
        "upload_time_iso_8601": "2022-07-30T02:49:44.208407Z",
        "url": "https://files.pythonhosted.org/packages/7b/f3/1c68a0eff996ea989597067ed6f6a7e4c93f5e426abceafe675e70dd6f64/pandasbox-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5073b6fac6ca857db0431b3db5d24bee0ae73af4dcf4c95e147d023850aacd8b",
          "md5": "4612b0f3fa142788891d9457b1fc82dd",
          "sha256": "71ec0ae5beff0cf1cf9c6be761b90ae76260a718ea60da08c7a9bf90db8ee41d"
        },
        "downloads": -1,
        "filename": "pandasbox-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4612b0f3fa142788891d9457b1fc82dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11488,
        "upload_time": "2022-07-30T02:49:46",
        "upload_time_iso_8601": "2022-07-30T02:49:46.324590Z",
        "url": "https://files.pythonhosted.org/packages/50/73/b6fac6ca857db0431b3db5d24bee0ae73af4dcf4c95e147d023850aacd8b/pandasbox-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bf31c68a0eff996ea989597067ed6f6a7e4c93f5e426abceafe675e70dd6f64",
        "md5": "d69a186947a049316ba4b02551f8f53b",
        "sha256": "26d29165734ff3bc341bdc0fbd55f43405bf11a72ed2b32698f5eebdfac66ddc"
      },
      "downloads": -1,
      "filename": "pandasbox-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d69a186947a049316ba4b02551f8f53b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 10188,
      "upload_time": "2022-07-30T02:49:44",
      "upload_time_iso_8601": "2022-07-30T02:49:44.208407Z",
      "url": "https://files.pythonhosted.org/packages/7b/f3/1c68a0eff996ea989597067ed6f6a7e4c93f5e426abceafe675e70dd6f64/pandasbox-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5073b6fac6ca857db0431b3db5d24bee0ae73af4dcf4c95e147d023850aacd8b",
        "md5": "4612b0f3fa142788891d9457b1fc82dd",
        "sha256": "71ec0ae5beff0cf1cf9c6be761b90ae76260a718ea60da08c7a9bf90db8ee41d"
      },
      "downloads": -1,
      "filename": "pandasbox-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4612b0f3fa142788891d9457b1fc82dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 11488,
      "upload_time": "2022-07-30T02:49:46",
      "upload_time_iso_8601": "2022-07-30T02:49:46.324590Z",
      "url": "https://files.pythonhosted.org/packages/50/73/b6fac6ca857db0431b3db5d24bee0ae73af4dcf4c95e147d023850aacd8b/pandasbox-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}