{
  "info": {
    "author": "",
    "author_email": "Mathis Gerdes <mathisgerdes@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Tests](https://github.com/mathisgerdes/progeval/actions/workflows/python-test.yml/badge.svg)](https://github.com/mathisgerdes/progeval/actions/workflows/python-test.yml)\n[![Documentation Status](https://readthedocs.org/projects/progeval/badge/?version=latest)](https://progeval.readthedocs.io/en/latest/?badge=latest)\n\n# Progressive evaluation\n\n[**Documentation**](https://progeval.readthedocs.io/)\n| [**Installation**](#installation)\n| [**Examples**](#examples)\n| [**Related**](#related)\n\nThis package lets the user define a computation such that:\n1. Depending on the requested output, only the required (partial) computations are executed.\n2. Intermediate quantities can be overriden by the user such that dependent values are recomputed.\n\nThe computational graph can either be defined as a class, or is constructed dynamically by registering nodes.\n\n## Installation\n\nTo use progeval, it can be installed with pip:\n\n```bash\n(.venv) $ pip install progeval\n```\n\n## Examples\nConsider the following toy computation:\n```\nalpha = x * y\nbeta = x + y\ntotal = alpha + beta\n```\n\nWe can define this computational graph in multiple ways, all via the computational graph class `ProgEval`.\nThe first is by dynamically adding nodes corresponding to the computable objects:\n\n```python\nfrom progeval import ProgEval\n\ngraph = ProgEval()\ngraph.alpha = lambda x, y: x * y\ngraph.beta = lambda x, y: x + y\ngraph.total = lambda alpha, beta: alpha + beta\n\n# we can then set inputs ...\ngraph.x, graph.y = 3, 6\n# ... and evaluate any (intermediate) value\ngraph.total == 27\n```\n\nThe above example relies on the fact that the inputs (`x`, `alpha`, etc.) can be read from the function signatures.\nIf we want to reuse some external function this is not possible.\nThe following syntax allows one to (optionally) specify the input arguments:\n\n```python\nfrom progeval import ProgEval\n\n\ndef add(x, y):\n    return x + y\n\n\ngraph = ProgEval()\ngraph.register('alpha', lambda x, y: x * y)\ngraph.register('beta', add)\n# here the inputs we want are different from the names \n# in the function definition of `add`\ngraph.register('total', add, ['alpha', 'beta'])\n```\n\nAnother way to define the computational graph is by collecting all parts of the computation as methods of a class:\n\n```python\nfrom progeval import ProgEval\n\n\nclass Computation(ProgEval):\n\n    def __init__(self, x, y):\n        super().__init__(x=x, y=y)\n\n    @staticmethod\n    def alpha(x, y):\n        return x * y\n\n    @staticmethod\n    def beta(x, y):\n        return x + y\n\n    @staticmethod\n    def total(alpha, beta):\n        return alpha + beta\n\n# The class then acts almost like a normal function\nComputation(3, 8).total == 35\n```\n\n## Related\nA similar functionality of delayed evaluation of a computational graph is provided by [Dask delayed](https://docs.dask.org/en/stable/delayed.html).\nHowever, the construction is slightly different.\nThere, the graph is built dynamically by replacing intermediate quantities with `Delayed` objects and wrapping functions.\nThe functionality of `Dask`, which is intended for computational parallelism, can even be combined with the structures here, as shown in the how-to section of the documentation.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "progeval",
    "package_url": "https://pypi.org/project/progeval/",
    "platform": null,
    "project_url": "https://pypi.org/project/progeval/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/progeval/1.0.0/",
    "requires_dist": [
      "importlib-metadata ; python_version < \"3.8\""
    ],
    "requires_python": ">=3.7",
    "summary": "Cached lazy evaluation of computational trees",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15486941,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a849fe957cbb0100af93ccba3ed13a5c2531a9d4a91e2336de22f933d0067087",
          "md5": "d0e93a86c2b8989e15283a8c367bc4fd",
          "sha256": "0576a65ae7016109ad5bc8e10f221fc731b691c55f01a3464096980343b5cc3e"
        },
        "downloads": -1,
        "filename": "progeval-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0e93a86c2b8989e15283a8c367bc4fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7829,
        "upload_time": "2022-10-21T13:32:27",
        "upload_time_iso_8601": "2022-10-21T13:32:27.135524Z",
        "url": "https://files.pythonhosted.org/packages/a8/49/fe957cbb0100af93ccba3ed13a5c2531a9d4a91e2336de22f933d0067087/progeval-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c9fb694fc121af9d12632540be8817748217006fc973cbcf699e586f0d63a54",
          "md5": "2a19924857e2cc3bab7dfcf47f1d5ad8",
          "sha256": "9e3a7b08af4194fe6a771156f7e35efeb3fd2ff462aed0432f175e966be8f886"
        },
        "downloads": -1,
        "filename": "progeval-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2a19924857e2cc3bab7dfcf47f1d5ad8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7331,
        "upload_time": "2022-10-21T13:32:28",
        "upload_time_iso_8601": "2022-10-21T13:32:28.397005Z",
        "url": "https://files.pythonhosted.org/packages/2c/9f/b694fc121af9d12632540be8817748217006fc973cbcf699e586f0d63a54/progeval-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a849fe957cbb0100af93ccba3ed13a5c2531a9d4a91e2336de22f933d0067087",
        "md5": "d0e93a86c2b8989e15283a8c367bc4fd",
        "sha256": "0576a65ae7016109ad5bc8e10f221fc731b691c55f01a3464096980343b5cc3e"
      },
      "downloads": -1,
      "filename": "progeval-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0e93a86c2b8989e15283a8c367bc4fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7829,
      "upload_time": "2022-10-21T13:32:27",
      "upload_time_iso_8601": "2022-10-21T13:32:27.135524Z",
      "url": "https://files.pythonhosted.org/packages/a8/49/fe957cbb0100af93ccba3ed13a5c2531a9d4a91e2336de22f933d0067087/progeval-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c9fb694fc121af9d12632540be8817748217006fc973cbcf699e586f0d63a54",
        "md5": "2a19924857e2cc3bab7dfcf47f1d5ad8",
        "sha256": "9e3a7b08af4194fe6a771156f7e35efeb3fd2ff462aed0432f175e966be8f886"
      },
      "downloads": -1,
      "filename": "progeval-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2a19924857e2cc3bab7dfcf47f1d5ad8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7331,
      "upload_time": "2022-10-21T13:32:28",
      "upload_time_iso_8601": "2022-10-21T13:32:28.397005Z",
      "url": "https://files.pythonhosted.org/packages/2c/9f/b694fc121af9d12632540be8817748217006fc973cbcf699e586f0d63a54/progeval-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}