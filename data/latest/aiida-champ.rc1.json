{
  "info": {
    "author": "Ravindra Shinde",
    "author_email": "r.l.shinde@utwente.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AiiDA",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python"
    ],
    "description": "[![Build Status](https://github.com/neelravi/aiida-champ/workflows/ci/badge.svg?branch=master)](https://github.com/neelravi/aiida-champ/actions)\n[![Coverage Status](https://coveralls.io/repos/github/neelravi/aiida-champ/badge.svg?branch=master)](https://coveralls.io/github/neelravi/aiida-champ?branch=master)\n[![Docs status](https://readthedocs.org/projects/aiida-champ/badge)](http://aiida-champ.readthedocs.io/)\n[![PyPI version](https://badge.fury.io/py/aiida-champ.svg)](https://badge.fury.io/py/aiida-champ)\n\n<img src=\"docs/source/images/AiiDA_transparent_logo.png\" width=\"250\">  <img src=\"docs/source/images/logo_champ_reduced.png\" height=\"100\">\n\n# aiida-champ\n\nAiiDA plugin that wraps the `vmc` executable of the CHAMP code for computing the total energy of a molecular system.\n\n\n## Repository contents\n\n* [`.github/`](.github/): [Github Actions](https://github.com/features/actions) configuration\n  * [`ci.yml`](.github/workflows/ci.yml): runs tests, checks test coverage and builds documentation at every new commit\n  * [`publish-on-pypi.yml`](.github/workflows/publish-on-pypi.yml): automatically deploy git tags to PyPI - just generate a [PyPI API token](https://pypi.org/help/#apitoken) for your PyPI account and add it to the `pypi_token` secret of your github repository\n* [`aiida_champ/`](aiida_champ/): The main source code of the plugin package\n  * [`data/`](aiida_champ/data/): A new `CHAMPParameters` data class, used as input to the `CHAMPCalculation` `CalcJob` class\n  * [`calculations.py`](aiida_champ/calculations.py): A new `CHAMPCalculation` `CalcJob` class\n  * [`cli.py`](aiida_champ/cli.py): Extensions of the `verdi data` command line interface for the `champParameters` class\n  * [`helpers.py`](aiida_champ/helpers.py): Helpers for setting up an AiiDA code for `champ` automatically\n  * [`parsers.py`](aiida_champ/parsers.py): A new `Parser` for the `CHAMPCalculation`\n* [`docs/`](docs/): A documentation template ready for publication on [Read the Docs](http://aiida-champ.readthedocs.io/en/latest/)\n* [`examples/`](examples/): An example of how to submit a calculation using this plugin\n* [`tests/`](tests/): Basic regression tests using the [pytest](https://docs.pytest.org/en/latest/) framework (submitting a calculation, ...). Install `pip install -e .[testing]` and run `pytest`.\n* [`.coveragerc`](.coveragerc): Configuration of [coverage.py](https://coverage.readthedocs.io/en/latest) tool reporting which lines of your plugin are covered by tests\n* [`.gitignore`](.gitignore): Telling git which files to ignore\n* [`.pre-commit-config.yaml`](.pre-commit-config.yaml): Configuration of [pre-commit hooks](https://pre-commit.com/) that sanitize coding style and check for syntax errors. Enable via `pip install -e .[pre-commit] && pre-commit install`\n* [`.readthedocs.yml`](.readthedocs.yml): Configuration of documentation build for [Read the Docs](https://readthedocs.org/)\n* [`LICENSE`](LICENSE): License for your plugin\n* [`MANIFEST.in`](MANIFEST.in): Configure non-Python files to be included for publication on [PyPI](https://pypi.org/)\n* [`README.md`](README.md): This file\n* [`conftest.py`](conftest.py): Configuration of fixtures for [pytest](https://docs.pytest.org/en/latest/)\n* [`pytest.ini`](pytest.ini): Configuration of [pytest](https://docs.pytest.org/en/latest/) test discovery\n* [`setup.json`](setup.json): Plugin metadata for registration on [PyPI](https://pypi.org/) and the [AiiDA plugin registry](https://aiidateam.github.io/aiida-registry/) (including entry points)\n* [`setup.py`](setup.py): Installation script for pip / [PyPI](https://pypi.org/)\n\n\nSee also the following video sequences from the 2019-05 AiiDA tutorial:\n\n * [aiida-champ setup.json](https://www.youtube.com/watch?v=2CxiuiA1uVs&t=240s)\n * [run aiida-champ example calculation](https://www.youtube.com/watch?v=2CxiuiA1uVs&t=403s)\n * [aiida-champ CalcJob plugin](https://www.youtube.com/watch?v=2CxiuiA1uVs&t=685s)\n * [aiida-champ Parser plugin](https://www.youtube.com/watch?v=2CxiuiA1uVs&t=936s)\n * [aiida-champ computer/code helpers](https://www.youtube.com/watch?v=2CxiuiA1uVs&t=1238s)\n * [aiida-champ input data (with validation)](https://www.youtube.com/watch?v=2CxiuiA1uVs&t=1353s)\n * [aiida-champ cli](https://www.youtube.com/watch?v=2CxiuiA1uVs&t=1621s)\n * [aiida-champ tests](https://www.youtube.com/watch?v=2CxiuiA1uVs&t=1931s)\n * [Adding your plugin to the registry](https://www.youtube.com/watch?v=760O2lDB-TM&t=112s)\n * [pre-commit hooks](https://www.youtube.com/watch?v=760O2lDB-TM&t=333s)\n\nFor more information, see the [developer guide](https://aiida-champ.readthedocs.io/en/latest/developer_guide) of your plugin.\n\n\n## Features\n\n * Add input files using `SinglefileData`:\n   ```python\n   SinglefileData = DataFactory('singlefile')\n   filemain = SinglefileData(file='vmc.inp')\n   molecule = SinglefileData(file='butadiene.xyz')\n   orbitals = SinglefileData(file='cas44.lcao')\n   determinants = SinglefileData(file='cas44.det')\n   ```\n\n\n\n## Installation\n\n```shell\npip install aiida-champ\nverdi quicksetup  # better to set up a new profile\nverdi plugin list aiida.calculations  # should now show your calclulation plugins\n```\n\n\n## Usage\n\nHere goes a complete example of how to submit a test calculation using this plugin.\n\nA quick demo of how to submit a calculation:\n```shell\nverdi daemon start     # make sure the daemon is running\ncd examples\npython example_01.py        # run test calculation\nverdi process list -a  # check record of calculation\n```\n\nThe plugin also includes verdi commands to inspect its data types:\n```shell\nverdi data champ list\nverdi data champ export <PK>\n```\n\n## Development\n\n```shell\ngit clone https://github.com/neelravi/aiida-champ .\ncd aiida-champ\npip install -e .[pre-commit,testing]  # install extra dependencies\npre-commit install  # install pre-commit hooks\npytest -v  # discover and run all tests\n```\n\nSee the [developer guide](http://aiida-champ.readthedocs.io/en/latest/developer_guide/index.html) for more information.\n\n## License\n\nMIT\n\n\n## Author\n\nName  :: Ravindra Shinde  (TREX-CoE)\nEmail :: r.l.shinde@utwente.nl\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/neelravi/aiida-champ",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiida-champ",
    "package_url": "https://pypi.org/project/aiida-champ/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiida-champ/",
    "project_urls": {
      "Homepage": "https://github.com/neelravi/aiida-champ"
    },
    "release_url": "https://pypi.org/project/aiida-champ/1.2.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "AiiDA plugin that wraps the vmc executable of CHAMP code for computing the total energy and much more stuff.",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12413742,
  "releases": {
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8064a1058e32f817aaea1ccd3b91afc2b4d094db1d9cadc42984d2b988275ff2",
          "md5": "48da09f8d7f4d9ff269cd097e1cf0d49",
          "sha256": "e38a8bb8d802bac52f8a130f097acca52b35c38a89641c80edf6a492c0817e8d"
        },
        "downloads": -1,
        "filename": "aiida-champ-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "48da09f8d7f4d9ff269cd097e1cf0d49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10561,
        "upload_time": "2021-12-27T10:48:17",
        "upload_time_iso_8601": "2021-12-27T10:48:17.387940Z",
        "url": "https://files.pythonhosted.org/packages/80/64/a1058e32f817aaea1ccd3b91afc2b4d094db1d9cadc42984d2b988275ff2/aiida-champ-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8064a1058e32f817aaea1ccd3b91afc2b4d094db1d9cadc42984d2b988275ff2",
        "md5": "48da09f8d7f4d9ff269cd097e1cf0d49",
        "sha256": "e38a8bb8d802bac52f8a130f097acca52b35c38a89641c80edf6a492c0817e8d"
      },
      "downloads": -1,
      "filename": "aiida-champ-1.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "48da09f8d7f4d9ff269cd097e1cf0d49",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10561,
      "upload_time": "2021-12-27T10:48:17",
      "upload_time_iso_8601": "2021-12-27T10:48:17.387940Z",
      "url": "https://files.pythonhosted.org/packages/80/64/a1058e32f817aaea1ccd3b91afc2b4d094db1d9cadc42984d2b988275ff2/aiida-champ-1.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}