{
  "info": {
    "author": "Alex Huszagh",
    "author_email": "ahuszagh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: The Unlicense (Unlicense)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Compilers",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# xcross\n\n\"Zero setup\" cross-compilation for a wide variety of architectures. xcross includes compact docker [images](https://hub.docker.com/r/ahuszagh/cross) and a build utility for minimal setup C/C++ cross-compiling, inspired by [rust-embedded/cross](https://github.com/rust-embedded/cross). xcross provides toolchains for a wide variety of architectures and C libraries, and targets both bare-metal and Linux-based systems, making it ideal for:\n\n- Testing cross-platform support in CI pipelines.\n- Building and deploying cross-compiled programs.\n\nEach Docker image comes pre-installed with:\n\n- C and C++ cross compiler and standard library\n- Autotools\n- Binutils\n- CMake\n- Ninja\n\nIn addition, each xcross provides [images](https://hub.docker.com/r/ahuszagh/pkgcross) pre-installed with popular C/C++ package managers and addition build tools:\n\n- Conan\n- vcpkg\n- Meson\n\nNote that this project is similar to [dockcross](https://github.com/dockcross/dockcross), however, xcross supports more targets and build tools than dockcross. If you need Docker images of common architectures, dockcross should have better support.\n\n**Table of Contents**\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n  - [Installing](#installing)\n  - [xcross](#xcross)\n  - [Build Tools](#build-tools)\n  - [run](#run)\n  - [Docker](#docker)\n- [Travis CI Example](#travis-ci-example)\n- [Sandboxing](#sandboxing)\n- [Package Managers](#package-managers)\n- [Using xcross](#using-xcross)\n- [Other Utilities](#other-utilities)\n- [Building/Running Dockerfiles](#building-running-dockerfiles)\n- [Images](#images)\n- [Development Dependencies](#development-dependencies)\n- [Toolchain Files](#toolchain-files)\n- [Developing New Toolchains](#developing-new-toolchains)\n- [Platform Support](#platform-support)\n- [License](#license)\n- [Contributing](#contributing)\n\n# Motivation\n\nUnlike 10 years ago, we no longer live in an x86 world. ARM architectures are nearly ubiquitous in mobile devices, and popular in embedded devices, servers, and game systems. IBM's POWER and z/Architecture can run some high-end servers. PowerPC systems are popular in embedded devices, and used to be popular architectures for game systems, desktops, and servers. MIPS has been integral to autonomous driving systems and other embedded systems. RISC-V is rapidly being adopted for a wide variety of use-cases. The IoT market has lead to an explosion in embedded devices.\n\nAt the same time, modern software design builds upon a body of open source work. It is more important than ever to ensure that foundational libraries are portable, and can run on a wide variety of devices. However, few open source developers can afford a large selection of hardware to test code on, and most pre-packaged cross-compilers only support a few, common architectures.\n\nNormally, cross compilers are limited by long compile times (to build the cross-compiler) and non-portable toolchain files, since the toolchain cannot be added to the path. Docker images pre-installed with cross-compiler toolchains solve this, by isolating the toolchain from the host, enabling building, testing, and deploying cross-compiled code in seconds, rather than hours. Each toolchain is installed on-path, and cross-compilation configurations are injected for each build system, enabling out-of-the-box cross-compilation for CMake, Autotools, Makefiles, and Meson. Finally, a Python script [xcross](https://pypi.org/project/xcross/) handles all Docker configurations to make cross-compiling as easy as compiling on the host machine.\n\nIt just works.\n\n# Getting Started\n\nThis shows a simple example of building and running a C++ project on DEC Alpha, a 64-bit little-endian system.\n\n## Installing\n\nxcross may be installed via [PyPi](https://pypi.org/project/xcross/):\n\n```bash\npip install xcross --user\n```\n\nOr xcross may be installed via git:\n\n```bash\ngit clone https://github.com/Alexhuszagh/xcross\ncd xcross\npip install . --user\n```\n\n## xcross\n\nxcross is a Python script to provide \"zero-setup\" cross-compiling, similar to Rust's [cross](https://github.com/rust-embedded/cross). To use it, merely add `xcross` before any command along with a valid target. To configure, build, and make a CMake project, run:\n\n```bash\nexport CROSS_TARGET=alpha-unknown-linux-gnu\nxcross cmake ..\nxcross make -j 5\n```\n\n## run\n\nxcross includes a `run` command for most images, which uses Qemu to run the cross-compiled binaries.\n\n```rust\nxcross run path/to/file\n```\n\n`run` works for both statically and dynamically-linked binaries, ensuring linked libraries are in Qemu's search path.\n\n## Docker\n\nFor more fine-tuned control, you can also run an interactive session within a container. An extended example is:\n\n```bash\n# Pull the Docker image, and run it interactively, entering the container.\nxcross --target alpha-unknown-linux-gnu\n\n# Clone the repository, build and run the code in the container using CMake.\ngit clone https://github.com/Alexhuszagh/cpp-helloworld.git\ncd cpp-helloworld\nmkdir build && cd build\n\n# Build a default executable: no toolchain file required.\ncmake ..\nmake\n# Just works, as long as `add_custom_target` uses\n# `${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:..>`\n# This uses Qemu as a wrapper, so running the executable\n# only works on some architectures.\nmake run\n# Can also run executables manually.\nrun hello\n\n# Build a statically-linked executable.\nrm -rf ./*\ncmake .. -DCMAKE_TOOLCHAIN_FILE=/toolchains/static.cmake\nmake\nmake run\nrun hello\n\n# Clean, and build a dynamically-linked executable.\nrm -rf ./*\ncmake .. -DCMAKE_TOOLCHAIN_FILE=/toolchains/shared.cmake\nmake\n# Just works, since `run` has the proper library search path.\nmake run\nrun hello\n\n# Can also use Makefiles normally. Here we prefer shared linking. \n# This environment only adds or removes the `-static` flag when \n# compiling: nothing else is modified.\ncd ..\nsource /toolchains/shared\nmake\nrun helloworld\n\n# Can also use static linking.\nsource /toolchains/static\nmake clean\nmake\nrun helloworld\n\n# We can also invoke `c++` and `cc` commands directly.\n# It's really that simple.\nc++ helloworld.cc -fPIC\nrun a.out\n\nc++ helloworld.cc -static\nrun a.out\n```\n\n# Travis CI Example\n\nA simple example of integrating cross images is as follows:\n\n```yaml\nlanguage: cpp\ndist: bionic\nservices:\n  - docker\n\naddons:\n  apt:\n    update: true\n    packages:\n      - python3\n      - python3-pip\n\n# Use a matrix with both native toolchains and cross-toolchain images.\nmatrix:\n  include:\n    - arch: amd64\n      os: linux\n\n    - arch: amd64\n      os: linux\n      env:\n        - TARGET=\"mips64\"\n\nbefore_install:\n  - |\n    if [ \"$TARGET\" != \"\" ] ; then\n      pip install xcross\n      docker pull ahuszagh/cross:\"$TARGET\"\n    fi\n\nscript:\n  - |\n    mkdir build && cd build\n    build=\n    if [ \"$TARGET\" != \"\" ] ; then\n      build=xcross --target=\"$TARGET\"\n    fi\n    $build cmake ..\n    $build make -j 5\n    $build run tests/test\n```\n\n# Sandboxing\n\nBy default, xcross shares your root directory with the image, running with the same permissions as the current user. However, you can limit the shared directories with the `--dir` option, allowing you to limit the build system to only the project files. This is useful for compiling untrusted code, providing an extra layer of security relative to running it on the host computer.\n\nFor these reasons, commands run via xcross are not given root access. If you need to install build dependencies, there a few options:\n\n1. Get a non-root package manager such as [junest](https://github.com/fsquillace/junest) or [homebrew](https://docs.brew.sh/Homebrew-on-Linux).\n2. Install dependencies locally via `apt download` and `apt-rdepends`, to install to a local prefix with `dpkg -force-not-root --root=$HOME`.\n3. Creating a new Docker image that uses an xcross toolchain as a base image, for example `FROM ahuszagh/cross:<TARGET>`.\n\n# Package Managers\n\nWhen using xcross with the `--with-package-managers` option, xcross will run images that come pre-installed with vcpkg and Conan. \n\nIf run in detached mode (via `--detach`), no limitations exist. Otherwise, a new Docker container is run for each command, losing any changes outside the shared volume, so the following caveats apply:\n\n- `conan install` installs packages relative to the CWD. Changing the CWD may lead to missing dependencies.\n- `vcpkg install` only works with manifests, not with global installs.\n\nSee [test/zlib](https://github.com/Alexhuszagh/xcross/tree/main/test/zlib) for an example project for the following code samples:\n\nAn example of using xcross with vcpkg is:\n\n```bash\nexport CROSS_TARGET=alpha-unknown-linux-gnu\nexport CROSS_WITH_PACKAGE_MANAGERS=1\nexport CROSS_DETACH=1\nxcross vcpkg install\nxcross cmake ..\nxcross cmake --build .\nxcross --stop\n```\n\nAn example of using xcross with conan is:\n\n```bash\nexport CROSS_TARGET=alpha-unknown-linux-gnu\nexport CROSS_WITH_PACKAGE_MANAGERS=1\nexport CROSS_DETACH=1\nxcross conan install ..\nxcross cmake ..\nxcross cmake --build .\nxcross --stop\n```\n\n**Conan Issue:** Note that Conan with CMake must be used with conan_define_targets()` and `target_link_libraries(<TARGET> CONAN_PKG::<PKG-NAME>)`. With global defines, Conan fails to link the desired libraries. With target defines, it fails to find the include directories. Therefore, both must be used in conjunction.\n\n# Using xcross\n\nMost of the magic happens via xcross, which allows you to transparently execute commands in a Docker container. Although xcross provides simple, easy-to-use defaults, it has more configuration options for extensible cross-platform builds. Most of these command-line arguments may be provided as environment variables.\n\n> **WARNING** By default, the root directory is shared with the Docker container, for maximum compatibility. In order to mitigate any security vulnerabilities, we run any build commands as a non-root user, and escape input in an attempt to avoid any script injections. If you are worried about a malicious build system, you may further restrict this using the `--dir` option.\n\n## Arguments\n\n**Fallthrough**\n\nAll arguments that are not xcross-specific are passed into the container. \n\n- Any trivial arguments can be passed through without issue.\n\n```bash\n# Just works\nxcross make -j 5\n```\n\n- To avoid shell expansion, pass entire complex commands as a single, quoted string.\n\nPlease note that due to shell expansion, some things may evaluate on the host, and therefore may not work as expected. For example:\n\n```bash\n# This does not work in POSIX shells, since it evaluates `$CXX` in the local shell.\nxcross -E CXX=cpp $CXX main.c -o main\n```\n\nIn order to mitigate this, we only allow characters that could be expanded by the local shell to be passed as a single string to the container:\n\n```bash\n# Although this is escaped, we can't tell if we want a literal `$CXX`\n# or want to expand it. xcross rejects this.\nxcross -E CXX=cpp '$CXX' main.c -o main\n\n# Instead, pass it as a single string. Works now.\nxcross -E CXX=cpp '$CXX main.c -o main'\n```\n\n- Any environment variables and paths should be passed in POSIX style.\n\nAlthough non-trivial paths that exist on Windows will be translated to POSIX style, ideally you should not rely on this.\n\n```bash\n# Doesn't work, since we use a Windows-style path to an output file.\nxcross c++ main.c -o test\\basic\n\n# This does work, since it uses a POSIX-style path for the output.\nxcross c++ main.c -o test/basic\n\n# This won't work, since we use a Windows-style environment variable.\n# We don't know what this is used for, so we can't convert this.\nxcross -E VAR1=cpp \"^%VAR1^% main.c -o main\"\n\n# Works in Windows CMD, since $X doesn't expand.\nxcross -E VAR1=cpp \"$VAR1 main.c -o main\"\n```\n\n**xcross Arguments**\n\n- `--target`, `CROSS_TARGET`: The target architecture to compile to.\n\n```bash\n# These two are identical, and build for Alpha on Linux/glibc\nxcross --target=alpha-unknown-linux-gnu ...\nCROSS_TARGET=alpha-unknown-linux-gnu xcross ...\n```\n\n- `--dir`, `CROSS_DIR`: The directory to share to the container as a volume.\n\n```bash\n# These two are identical, and share only from the \n# current working directory.\nxcross --dir=. ...\nCROSS_DIR=. xcross ...\n```\n\n- `-E`, `--env`: Pass environment variables to the container.\n\nIf no value is passed for the variable, it exports the variable from the current environment.\n\n```bash\n# These are all identical.\nxcross -E VAR1 -E VAR2=x -E VAR3=y\nxcross -E VAR1 -E VAR2=x,VAR3=y\nxcross -E VAR1,VAR2=x,VAR3=y\n```\n\n- `--cpu`, `CROSS_CPU`: Set the CPU model to compile/run code for.\n\nIf not provided, it defaults to a generic processor model for the architecture. If provided, it will set the register usage and instruction scheduling parameters in addition to the generic processor model.\n\n```bash\n# Build for the PowerPC e500mc CPU.\nexport CROSS_TARGET=ppc-unknown-linux-gnu\nxcross --cpu=e500mc c++ helloworld.cc -o hello\nxcross --cpu=e500mc run hello\nCROSS_CPU=e500mc xcross run hello\n```\n\nIn order to determine valid CPU model types for the cross-compiler, you may use either of the following commands:\n\n```bash\n# Here, we probe GCC for valid CPU names for the cross-compiler.\nexport CROSS_TARGET=ppc-unknown-linux-gnu\nxcross cc-cpu-list\n# 401 403 405 405fp ... e500mc ... rs64 titan\n\n# Here, we probe Qemu for the valid CPU names for the emulation.\nxcross run-cpu-list\n# 401 401a1 401b2 401c2 ... e500mc ... x2vp50 x2vp7\n```\n\nThese are convenience functions around `gcc -mcpu=unknown` and `qemu-ppc -cpu help`, listing only the sorted CPU types. Note that the CPU types might not be identical for both, so it's up to the caller to properly match the CPU types.\n\n `--server`, `CROSS_SERVER`: The server to fetch container images from.\n\nThis defaults to `docker.io` if not provided, however, it may be explicit set to an empty string. If the server is not empty, the server is prepended to the image name.\n\n```bash\n# These are all identical.\nxcross --server=docker.io ...\nCROSS_SERVER=docker.io xcross ...\n```\n\n- `--username`, `CROSS_USERNAME`: The Docker Hub username for the Docker image.\n\nThis defaults to `ahuszagh` if not provided, however, it may be explicit set to an empty string. If the username is not empty, the image has the format `$username/$repository:$target`, otherwise, it has the format `$repository:$target`.\n\n```bash\n# These are all identical.\nxcross --username=ahuszagh ...\nCROSS_USERNAME=ahuszagh xcross ...\n```\n\n- `--repository`, `CROSS_REPOSITORY`: The name of the repository for the image.\n\nThis defaults to `cross` if not provided or is empty.\n\n```bash\n# These are all identical.\nxcross --repository=cross ...\nCROSS_REPOSITORY=cross xcross ...\n```\n\n- `--image-version`, `CROSS_VERSION`: The version of the image to use.\n\nIf not provided, this will always use the latest version.\n\n```bash\n# These are all identical.\nxcross --image-version=0.1 ...\nCROSS_VERSION=cross xcross ...\n```\n\n- `--with-package-managers`, `CROSS_WITH_PACKAGE_MANAGERS`: Use images pre-installed with package managers.\n\nBy default, xcross uses minimal images, with a basic set of build tools and utilities. If `--with-package-managers` is provided, then xcross will instead use images with Conan and vcpkg pre-installed, at the cost of larger image sizes.\n\n```bash\n# These are all identical.\nxcross --with-package-managers ...\nCROSS_WITH_PACKAGE_MANAGERS=1 xcross ...\n```\n\n- `--engine`, `CROSS_ENGINE`: The command for the container engine executable.\n\nIf not provided or empty, this searches for `docker` then `podman`.\n\n```bash\n# These are all identical.\nxcross --engine=docker ...\nCROSS_ENGINE=docker xcross ...\n```\n\n- `--non-interactive`, `CROSS_NONINTERACTIVE`: Disable interactive shells.\n\nThis defaults to using interactive shells if `--non-interactive` is not provided and if `CROSS_NONINTERACTIVE` does not exist, or is set to an empty string.\n\n```bash\n# These are all identical.\nxcross --non-interactive ...\nCROSS_NONINTERACTIVE=1 xcross ...\n```\n\n- `--detach`, `CROSS_DETACH`: Start an image in detached mode and run command in image.\n\nThis allows multiple commands to be run without losing any non-local changes after command. After running all commands, you can stop the image via `--stop`.\n\n```bash\n# These are all identical.\nxcross --detach ...\nCROSS_DETACH=1 xcross ...\n```\n\n- `--stop`: Stop an image started in detached mode.\n\n```bash\nxcross --stop --target=alpha-unknown-linux-gnu\n```\n\n- `--update-image`, `CROSS_UPDATE_IMAGE`: Update the container image before running.\n\nThis defaults to using the existing container version if not `--update-image` is not provided and if `CROSS_UPDATE_IMAGE` does not exist, or is set to an empty string.\n\n```bash\n# These are all identical.\nxcross --update-image ...\nCROSS_UPDATE_IMAGE=1 xcross ...\n```\n\n- `--remove-image`, `CROSS_REMOVE_IMAGE`: Remove the container image from local storage after running the command.\n\n```bash\n# These are all identical.\nxcross --remove-image ...\nCROSS_REMOVE_IMAGE=1 xcross ...\n```\n\n- `--quiet`, `CROSS_QUIET`: Silence any warnings when running the image.\n\n```bash\n# These are all identical.\nxcross --quiet ...\nCROSS_QUIET=1 xcross ...\n```\n\n- `--verbose`, `CROSS_VERBOSE`: Print verbose debugging output when running the image.\n\n```bash\n# These are all identical.\nxcross --verbose ...\nCROSS_VERBOSE=1 xcross ...\n```\n\n# Other Utilities\n\nEach image also contains a few custom utilities to probe image configurations:\n\n- **cc-cpu-list**: List the valid CPU values to pass to `--cpu` for the C/C++ compiler.\n- **run-cpu-list**: List the valid CPU values to pass to `--cpu` for Qemu.\n- **target-specs**: Print basic specifications about the target architecture.\n- **target-specs-full**: Print extensive specifications about the target architecture.\n\n```bash\n$ export CROSS_TARGET=ppc-unknown-linux-gnu\n$ xcross target-specs\n{\n  \"arch\": \"ppc\",\n  \"os\": \"linux\",\n  \"eh-frame-header\": true,\n  \"linker-is-gnu\": true,\n  \"target-endian\": \"big\",\n  \"pic\": null,\n  \"pie\": null,\n  \"char-is-signed\": false,\n  \"data-model\": \"ilp32\"\n}\n```\n\n# Building/Running Dockerfiles\n\nTo build all Docker images, run `python3 setup.py build_imagesn--with-package-managers=1`. Note that can it take up to a week to build all images. To build and run a single docker image, use:\n\n```bash\nimage=ppcle-unknown-linux-gnu\npython3 setup.py configure\npython3 setup.py build_image --target \"$image\"\n# Runs the image without the xcross abstraction.\ndocker run -it \"ahuszagh/cross:$image\" /bin/bash\n# Runs the image using xcross, for a simpler interface.\nxcross bash --target \"$image\"\n```\n\n# Images\n\nFor a list of pre-built images, see [ahuszagh/cross](https://hub.docker.com/r/ahuszagh/cross) and [ahuszagh/pkgcross](https://hub.docker.com/r/ahuszagh/pkgcross). To remove local, installed images from the pre-built, cross toolchains, run:\n\n```bash\n# On a POSIX shell.\nimages=$(docker images | grep -E 'ahuszagh/(pkg)?cross')\nimages=$(echo \"$images\" | tr -s ' ' | cut -d ' ' -f 1,2 | tr ' ' :)\ndocker rmi $images\n```\n\n**Image Types**\n\nThere are two types of images:\n- Images with an OS layer, such as `ppcle-unknown-linux-gnu`.\n- Bare metal images, such as `ppcle-unknown-elf`.\n\nThe bare metal images use the newlib C-runtime, and are useful for compiling for resource-constrained embedded systems. Please note that not all bare-metal images provide complete startup routines (crt0), and therefore might need to be linked against standalone flags (`-nostartfiles`, `-nostdlib`, `-nodefaultlibs`, or `-ffreestanding`) with a custom startup.\n\nOther images use a C-runtime for POSIX-like build environment (such as Linux, FreeBSD, or MinGW for Windows), and include:\n\n- musl (`*-musl`)\n- glibc (`*-gnu`)\n- uClibc-ng (`*-uclibc`)\n- android (`*-android`, only available on some architectures)\n- mingw (`*-w64-mingw32`, only available on x86)\n\nIf you would like to test if the code compiles (and optionally, runs) for a target architecture, you should generally use a `linux-gnu` image.\n\n**Triples**\n\nAll images are named as `ahuszagh/cross:$triple` or `ahuszagh/pkgcross:$triple`, where `$triple` is the target triple. The target triple consists of:\n\n- `arch`, the CPU architecture (mandatory).\n- `vendor`, the CPU vendor.\n- `os`, the OS the image is built on.\n- `system`, the system type, which can comprise both the C-runtime and ABI.\n\nFor example, the following image names decompose to the following triples:\n\n- `avr`, or `(avr, unknown, -, -)`\n- `i386-w64-mingw32`, or `(i386, unknown, w64, mingw32)`\n- `mips-unknown-o32`, `(mips, unknown, -, o32)`\n- `mips-unknown-linux-gnu`, `(mips, unknown, linux, gnu)`\n\nIf an `$arch-unknown-linux-gnu` is available, then `$arch` is an alias for `$arch-unknown-linux-gnu`.\n\n**OS/Architecture Support**\n\nIn general, the focus of these images is to provide support for a wide variety of architectures, not operating systems. We will gladly accept Dockerfiles/scripts to support more operating systems, like FreeBSD. We do not support Darwin/iOS for licensing reasons, since reproduction of the macOS SDK is expressly forbidden. If you would like to build a Darwin cross-compiler, see [osxcross](https://github.com/tpoechtrager/osxcross). We also do not support certain cross-compilers for popular architectures, like Hexagon, due to proprietary linkers (which would be needed for LLVM support).\n\n**Versioning**\n\nImage names have an optional, trailing version, which will always use a compatible host OS, GCC, and C-runtime version. Images without a version will always use the latest available version.\n\n- **No Version**: Alias for the latest version listed.\n- **0.1**: GCC 10.x, glibc 2.31+, musl 1.2.2, uCLibc-NG 1.0.31, Android r22b, and Ubuntu 20.04.\n\nPre-1.0, minor versions signify backwards-incompatible changes to toolchains. Patch increments signify bug fixes, and build increments signify the addition of new toolchains.\n\n# Dependencies\n\nIn order to use `xcross` or build toolchains, you must have:\n\n- python (3.6+)\n- docker or podman\n\nEverything else runs in the container.\n\n# Toolchain Files\n\nThese cross-compilation configurations are automatically injected if not provided. Manually overriding these defaults allows finer control over the build process.\n\n**CMake Toolchain Files**\n\n- `/toolchains/toolchain.cmake`, which contains the necessary configurations to cross-compile.\n- `/toolchains/shared.cmake`, for building dynamically-linked binaries.\n- `/toolchains/static.cmake`, for building statically-linked binaries.\n\nTo include an additional toolchain in addition to the default, pass `CROSS_CHAINLOAD_TOOLCHAIN_FILE` during configuration.\n\n**Bash Environment Files**\n\n- `/env/base`, base environment variables for cross-compiling.\n- `/env/shared`, for building dynamically-linked binaries.\n- `/env/static`, for building statically-linked binaries.\n\n**Meson Cross Files**\n\n- `/toolchains/cross.meson`, which contains the necessary configurations to cross-compile.\n\n**Conan Settings**\n\n- `~/.conan/settings.yml`, default base settings for Conan.\n- `~/.conan/profiles/default`, default Conan profile.\n\n# Developing New Toolchains\n\nTo add your own toolchain, the general workflow (for crosstool-NG or buildroot) is as follows:\n\n1. List toolchain samples.\n2. Configure your toolchain.\n3. Move the config file to `ct-ng` or `buildroot`.\n4. Patch the config file.\n5. Add the image to `config/images.json`.\n\nAfter the toolchain is created, this shows a sample image configuration to auto-generate the relevant Dockerfile, CMake toolchains, and toolchain symlinks:\n\n**config/images.json**\n\n```jsonc\n[\n    // ...\n    {\n        // COMMON CONFIGURATIONS\n\n        // Image type (mandatory). Valid values are:\n        //  1. android\n        //  2. crosstool\n        //  3. debian\n        //  4. musl-cross\n        //  5. riscv\n        //  6. other\n        //\n        // The following values are for crosstool images,\n        // which are by far the most prevalent.\n        \"type\": \"crosstool\",\n        // The name of the target, resembling an LLVM triple (mandatory).\n        \"target\": \"alphaev4-unknown-linux-gnu\",\n        // Actual LLVM triple name, which will be the compiler prefix.\n        // For example, gcc will be `alphaev4-unknown-linux-gnu-gcc`.\n        // Optional, and defaults to `target`.\n        \"triple\": \"alphaev4-unknown-linux-gnu\",\n        // The crosstool-NG target to use. This is useful\n        // when the same configuration for a multilib compiler\n        // can be reused. Optional, defaults to `target`.\n        \"config\": \"alphaev4-unknown-linux-gnu\",\n        // Enable qemu userspace emulation (optional). Default false.\n        \"qemu\": true,\n        // Flags to provide to the C compiler (optional).\n        // This is useful when targeting a specific ABI,\n        // or for example, to skip the default start code\n        // to provide your own crt0.\n        \"flags\": \"-nostartfiles\",\n        // Optional flags to provide to the C compiler (optional).\n        // These are flags that will not clobber existing settings,\n        // for example, if `march=armv6` is provided as an optional\n        // flag, then passing `-march=armv6z` will override that setting.\n        \"optional_flags\": \"\",\n        // Name of the processor for Qemu user-space emulation\n        // and for setting the toolchain alias.\n        \"processor\": \"alpha\"\n\n        // OTHER CONFIGURATIONS\n\n        // Numerous other configurations are also supported, such as:\n        //  * `cpulist` - A hard-coded list of valid CPU values.\n        //    This will override any values from `run-cpu-list` and `cc-cpu-list`.\n        //    For example, on HPPA, `\"cpulist\": \"1.0\"`.\n        //\n        //  * `system` - Override the system component of a triple.\n        //    For example, `\"system\": \"gnuabi64\"`.\n        //\n        //  * `os` - Override the OS component of a triple.\n        //    For example, `\"os\": \"linux\"`.\n        //\n        //  * `vendor` - Override the vendor component of a triple.\n        //    For example, `\"vendor\": \"unknown\"`.\n        //\n        //  * `arch` - Override the arch component of a triple.\n        //    In almost all cases, it's preferable to use `processor`,\n        //    which exists for this purpose.\n        //\n        //  * `extensions` - Specify hardware extensions for the architecture.\n        //    Not available for all targets.\n        //    For example, `\"extensions\": \"imadc\"`.\n        //\n        //  * `abi` - Specify ABI details for the architecture.\n        //    Not available for all targets.\n        //    For example, `\"abi\": \"lp64d\"`.\n        //\n        //  * `library_path` - Specify the `LD_LIBRARY_PATH` variable for Qemu.\n        //    When the C-library differs but the host and target architecture\n        //    are the same, it can be necessary to set this value. You may\n        //    use the `$LIBPATH` variable, which specifies the sysroot for\n        //    Qemu's library search path.\n        //    For example, `\"library_path\": \"$LIBPATH/lib64\"`.\n        //\n        //  * `preload` - Specify the `LD_PRELOAD` variable for Qemu.\n        //    For example, `\"preload\": \"$LIBPATH/lib64/libstdc++.so.6\"`.\n    },\n    // ...\n]\n```\n\nFor an example bare-metal crosstool-NG config file, see `ct-ng/ppcle-unknown-elf.config`. For a Linux example, see `ct-ng/ppcle-unknown-linux-gnu.config`. Be sure to add your new toolchain to `config/images.json`, and run the test suite with the new toolchain image.\n\n# Platform Support\n\nFor a complete list of targets, see [here](https://github.com/Alexhuszagh/xcross/blob/main/TARGETS.md). For a complete list of images, see [ahuszagh/cross](https://hub.docker.com/r/ahuszagh/cross) and [ahuszagh/pkgcross](https://hub.docker.com/r/ahuszagh/pkgcross).\n\nCurrently, we only create images that are supported by:\n\n- crosstool-NG with official sources\n- Debian packages\n- Android NDK's\n- musl-cross-make.\n- buildroot\n- RISCV GNU utils.\n\nWe therefore support:\n\n- ARM32 + Thumb (Linux, Android, Bare-Metal)\n- ARM32-BE + Thumb (Linux, Android, Bare-Metal)\n- ARM64 (Linux, Android, Bare-Metal)\n- ARM64-BE (Linux, Android, Bare-Metal)\n- alpha (Linux)\n- ARC (Linux, Bare-Metal)\n- ARC-BE (Linux, Bare-Metal)\n- AVR (Bare-Metal)\n- CSKY (Linux)\n- HPPA (Linux)\n- i386-i686 (Bare-Metal)\n- i686 (Linux, MinGW, Android)\n- m68k (Linux)\n- MicroBlaze (Linux)\n- MicroBlaze-LE (Linux)\n- MIPS (Linux, Bare-Metal)\n- MIPS-LE (Linux, Bare-Metal)\n- MIPS64 (Linux, Bare-Metal)\n- MIPS64-LE (Linux, Bare-Metal)\n- Moxie (Bare-Metal: Moxiebox and ELF)\n- Moxie-BE (Bare-Metal: ELF-only)\n- NIOS2 (Linux, Bare-Metal)\n- PowerPC (Linux, Bare-Metal)\n- PowerPC-LE (Linux, Bare-Metal)\n- PowerPC64 (Linux, Bare-Metal)\n- PowerPC64-LE (Linux, Bare-Metal)\n- OpenRISC (Linux)\n- RISCV32 (Linux, Bare-Metal)\n- RISCV64 (Linux, Bare-Metal)\n- s390 (Linux)  \n- s390x (Linux) \n- SH1-4 (Linux, Bare-Metal)\n- Sparc (LEON3 and v8, Linux)\n- Sparc64 (Linux)\n- x86_64 (Linux, MinGW, Android, Bare-Metal)\n- xtensa-BE (Linux)\n- wasm\n\nPlatform-specific details:\n\n- Xtensa does not support newlib, glibc, or musl.\n\n# License\n\nThe code contained within the repository, except when another license exists for a directory, is unlicensed. This is free and unencumbered software released into the public domain.\n\nHowever, this only pertains to the actual code contained in the repository: this project derives off of numerous other projects which use different licenses, and the images of the resulting toolchains contain software, such as Linux, GCC, glibc, and more that are under different licenses.\n\nFor example, projects used by xcross and their licenses include:\n\n- [crosstool-NG](https://github.com/crosstool-ng/crosstool-ng): GNU GPLv2\n- [musl-cross-make](https://github.com/richfelker/musl-cross-make): MIT\n- [buildroot](https://buildroot.org): GNU GPLv2\n- [Android NDK](https://android.googlesource.com/platform/prebuilts/ndk/+/master/NOTICE): BSD 3-Clause\n- [newlib](https://www.sourceware.org/newlib/): MIT and BSD-like licenses\n- [GCC](https://gcc.gnu.org/): GNU GPLv3\n- [glibc](https://www.gnu.org/software/libc/): GNU LGPLv2.1 or later\n- [musl](https://musl.libc.org/): MIT\n- [musl](https://musl.libc.org/): MIT\n- [uClibc-ng](https://www.uclibc-ng.org/): GNU LGPLv2.1\n- [emscripten](https://emscripten.org/): MIT or University of Illinois/NCSA\n- [LLVM](https://llvm.org/): Apache 2.0\n- [binutils](https://www.gnu.org/software/binutils/): GNU GPLv2\n- [Linux](https://www.linux.org/): GNU GPLv2\n- [MinGW](https://osdn.net/projects/mingw/): BSD 3-Clause and GNU GPLv2\n- [Ubuntu](https://ubuntu.com/): A variety of FOSS licenses\n\nLikewise, the diffs used to patch the toolchains are subject to the licensed of the original software. See [diff/README.md](https://github.com/Alexhuszagh/xcross/blob/main/diff/README.md) for detailed license information.\n\nThe test suites for bare-metal toolchains also derive from other projects, including:\n\n- [newlib-examples](https://github.com/cirosantilli/newlib-examples): GNU GPLv3\n- [ppc_hw](https://github.com/ara4711/ppc_hw): BSD 3-Clause\n- [x86-bare-metal-examples](https://github.com/cirosantilli/x86-bare-metal-examples): GNU GPLv3\n\nThese licenses are only relevant if you distribute a toolchain or you redistribute the software used to build these images: for merely compiling and linking code as part of a standard toolchain, the usual linking exceptions apply.\n\n# Contributing\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in xcross by you, will be unlicensed (free and unencumbered software released into the public domain).\n\nPlease note that due to licensing issues, you may not submit code that uses Github Copilot, even though Github deceptively claims you retain ownership of generated code.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Alexhuszagh/xcross",
    "keywords": "compilers cross-compilation embedded",
    "license": "Unlicense",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xcross",
    "package_url": "https://pypi.org/project/xcross/",
    "platform": "",
    "project_url": "https://pypi.org/project/xcross/",
    "project_urls": {
      "Homepage": "https://github.com/Alexhuszagh/xcross"
    },
    "release_url": "https://pypi.org/project/xcross/0.1.7/",
    "requires_dist": null,
    "requires_python": ">3.6.0",
    "summary": "Zero-setup cross compilation.",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10889522,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a93924dac6dbabc01d33faeda38aaf5f36ea2c3d50b79e81b2fe34334ecaf4c8",
          "md5": "7b71f99f913f411a51b9839e337cd8c6",
          "sha256": "bd73356bbe37ee710f3e7455f42863e31adc50c2dac42f9f3f41358ebd0bb90f"
        },
        "downloads": -1,
        "filename": "xcross-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b71f99f913f411a51b9839e337cd8c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.6.0",
        "size": 13159,
        "upload_time": "2021-06-08T18:21:30",
        "upload_time_iso_8601": "2021-06-08T18:21:30.832565Z",
        "url": "https://files.pythonhosted.org/packages/a9/39/24dac6dbabc01d33faeda38aaf5f36ea2c3d50b79e81b2fe34334ecaf4c8/xcross-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1929fd58aad3112af50ee03af307268edb041f56c113e3ab8ce4a665923ae3c3",
          "md5": "6ae74b9590fcd5758ce2c92ee5108ca9",
          "sha256": "d2eafc4ae3be2631182d6c6d73718fc26dfe85a0a0ad002a5935a4ab1fd3462b"
        },
        "downloads": -1,
        "filename": "xcross-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ae74b9590fcd5758ce2c92ee5108ca9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 19744,
        "upload_time": "2021-06-08T18:21:32",
        "upload_time_iso_8601": "2021-06-08T18:21:32.623543Z",
        "url": "https://files.pythonhosted.org/packages/19/29/fd58aad3112af50ee03af307268edb041f56c113e3ab8ce4a665923ae3c3/xcross-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56ddb3cce44a1340d3cecfaee3fc329c99a97c44c1cccca5fa10f82fe2f2bc96",
          "md5": "9710bb927f2c5c12e62df776861f1954",
          "sha256": "a3a1b71125be36115b8d83dbe7e52eef964b48467f1276d8b9cc4973230085eb"
        },
        "downloads": -1,
        "filename": "xcross-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9710bb927f2c5c12e62df776861f1954",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.6.0",
        "size": 13779,
        "upload_time": "2021-06-10T20:02:38",
        "upload_time_iso_8601": "2021-06-10T20:02:38.248085Z",
        "url": "https://files.pythonhosted.org/packages/56/dd/b3cce44a1340d3cecfaee3fc329c99a97c44c1cccca5fa10f82fe2f2bc96/xcross-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e38b9ce2334641fbfe548b18aa67d4a42acc5a6ad3c9d995fd71951909cef68a",
          "md5": "e275aa925f8bc7f1310557795b1d1172",
          "sha256": "9a56fcd8f64933e48f7758bd8992e4bbef0bda3bc02203e422db35754f29ee15"
        },
        "downloads": -1,
        "filename": "xcross-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e275aa925f8bc7f1310557795b1d1172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 23911,
        "upload_time": "2021-06-10T20:02:39",
        "upload_time_iso_8601": "2021-06-10T20:02:39.688551Z",
        "url": "https://files.pythonhosted.org/packages/e3/8b/9ce2334641fbfe548b18aa67d4a42acc5a6ad3c9d995fd71951909cef68a/xcross-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c772e5e6a6155da82074af5cff5426a85fa9c7d6c083c7713abf0c6696977c6",
          "md5": "e5cad6af0404877507a55d19cd3898ae",
          "sha256": "71824e398022def02aa5cb9ddcd8e9fafa1a3b770ba89e1b199e32772ee351be"
        },
        "downloads": -1,
        "filename": "xcross-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5cad6af0404877507a55d19cd3898ae",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.6.0",
        "size": 14631,
        "upload_time": "2021-06-14T22:00:08",
        "upload_time_iso_8601": "2021-06-14T22:00:08.099272Z",
        "url": "https://files.pythonhosted.org/packages/3c/77/2e5e6a6155da82074af5cff5426a85fa9c7d6c083c7713abf0c6696977c6/xcross-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "414fcb8e9a72599ebb7cf76fb35b886a50e3dba514c36256f43038029a370e2f",
          "md5": "0ef38f2682390f4d3faa063d148f6e1d",
          "sha256": "a985e543108a1850ccfd701eb6788193e244059d3e073615c1c79a3f4d27773b"
        },
        "downloads": -1,
        "filename": "xcross-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ef38f2682390f4d3faa063d148f6e1d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.6.0",
        "size": 14778,
        "upload_time": "2021-06-18T07:26:00",
        "upload_time_iso_8601": "2021-06-18T07:26:00.736820Z",
        "url": "https://files.pythonhosted.org/packages/41/4f/cb8e9a72599ebb7cf76fb35b886a50e3dba514c36256f43038029a370e2f/xcross-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4868da4b8cc059a576139701237e9f556f3c23405d3a6b49dbabc440ac46d77d",
          "md5": "fba31b6851112e81b4fd0259ccd635b5",
          "sha256": "a3187beb3065d2a796ea744dbb06abe3c4e898d1119d0405c066a9f100dd3809"
        },
        "downloads": -1,
        "filename": "xcross-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fba31b6851112e81b4fd0259ccd635b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 36141,
        "upload_time": "2021-06-18T07:26:02",
        "upload_time_iso_8601": "2021-06-18T07:26:02.435027Z",
        "url": "https://files.pythonhosted.org/packages/48/68/da4b8cc059a576139701237e9f556f3c23405d3a6b49dbabc440ac46d77d/xcross-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd9540c1ad0424bc9f88ce5a253111f35e797782ed40545fa9e81cd1cf9ab98a",
          "md5": "1f7427d205e7c9d6600af8fa98aa485f",
          "sha256": "bc802ba4865ae04e2a2f9a8d293205b55de95e03693c9f7279547ad18de174ae"
        },
        "downloads": -1,
        "filename": "xcross-0.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f7427d205e7c9d6600af8fa98aa485f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.6.0",
        "size": 15939,
        "upload_time": "2021-06-18T22:08:45",
        "upload_time_iso_8601": "2021-06-18T22:08:45.654920Z",
        "url": "https://files.pythonhosted.org/packages/dd/95/40c1ad0424bc9f88ce5a253111f35e797782ed40545fa9e81cd1cf9ab98a/xcross-0.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dd0c7f1f0092b4f3d4cff6b744f2584a354d225d528614c85fdc1fa9ff1ce65",
          "md5": "8b2340ce63cab630914b9591419c92fc",
          "sha256": "88bd75ce41bd533dbafc9f1434bd7730b7dba5575d1a48beafcd240fc62d6302"
        },
        "downloads": -1,
        "filename": "xcross-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8b2340ce63cab630914b9591419c92fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 37756,
        "upload_time": "2021-06-18T22:08:47",
        "upload_time_iso_8601": "2021-06-18T22:08:47.336823Z",
        "url": "https://files.pythonhosted.org/packages/7d/d0/c7f1f0092b4f3d4cff6b744f2584a354d225d528614c85fdc1fa9ff1ce65/xcross-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f151bd9cd75666156338cb3a1d1a99c40ba3605504b12bc50877949b5003bd5c",
          "md5": "48e1772dccbeb33accdade379cc4d6da",
          "sha256": "d09bac4c4ea11b16a5e9ecd9357f02b8e37a81adf3904daef996987ceb9f6fab"
        },
        "downloads": -1,
        "filename": "xcross-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48e1772dccbeb33accdade379cc4d6da",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.6.0",
        "size": 17981,
        "upload_time": "2021-06-27T18:46:45",
        "upload_time_iso_8601": "2021-06-27T18:46:45.090170Z",
        "url": "https://files.pythonhosted.org/packages/f1/51/bd9cd75666156338cb3a1d1a99c40ba3605504b12bc50877949b5003bd5c/xcross-0.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a87908d450e9d258991edd65eb9b56e4e4d55d9630680e55c5b35290d2a10e8",
          "md5": "604f22eedd9e3b1f22e7b8214dc64288",
          "sha256": "a62da0e17f5dd1396b624376e1843ed806b533ca95c441e1a666dc0c68bfb168"
        },
        "downloads": -1,
        "filename": "xcross-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "604f22eedd9e3b1f22e7b8214dc64288",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 52917,
        "upload_time": "2021-06-27T18:46:46",
        "upload_time_iso_8601": "2021-06-27T18:46:46.894782Z",
        "url": "https://files.pythonhosted.org/packages/0a/87/908d450e9d258991edd65eb9b56e4e4d55d9630680e55c5b35290d2a10e8/xcross-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "152ddc39f92bca90800a4d75538c48e5d034afe9b73618760018e0f48a95be64",
          "md5": "4e599cae49959b383780748cc7125fe8",
          "sha256": "b8179cdaa854c37d8cc5c3bbc73934bc25900f6f974dac7d94bcb540aa6021ca"
        },
        "downloads": -1,
        "filename": "xcross-0.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e599cae49959b383780748cc7125fe8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.6.0",
        "size": 19703,
        "upload_time": "2021-07-10T17:07:46",
        "upload_time_iso_8601": "2021-07-10T17:07:46.409007Z",
        "url": "https://files.pythonhosted.org/packages/15/2d/dc39f92bca90800a4d75538c48e5d034afe9b73618760018e0f48a95be64/xcross-0.1.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81182de5b984154df2649e04bf5cb225b151511e429ecaee00bb4f4f1366ae3a",
          "md5": "91ae73f27a60bb8bd00dc3f9963e0235",
          "sha256": "112a763c5edc0a545f6893fc2312f006c31043e8de8c9499b8cd98da97167907"
        },
        "downloads": -1,
        "filename": "xcross-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "91ae73f27a60bb8bd00dc3f9963e0235",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 61171,
        "upload_time": "2021-07-10T17:07:48",
        "upload_time_iso_8601": "2021-07-10T17:07:48.049807Z",
        "url": "https://files.pythonhosted.org/packages/81/18/2de5b984154df2649e04bf5cb225b151511e429ecaee00bb4f4f1366ae3a/xcross-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd959b88b8196dd28f49c59bc7e736457acdce4f603dd48755f6eeaa4a354291",
          "md5": "25778152f0f82b3db705305cf71fb22b",
          "sha256": "62624822d5fa89c5081ea61cfb636f1088bf6f8d6a20ca64086c86f83ee477a8"
        },
        "downloads": -1,
        "filename": "xcross-0.1.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25778152f0f82b3db705305cf71fb22b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.6.0",
        "size": 21721,
        "upload_time": "2021-07-12T20:11:21",
        "upload_time_iso_8601": "2021-07-12T20:11:21.781713Z",
        "url": "https://files.pythonhosted.org/packages/bd/95/9b88b8196dd28f49c59bc7e736457acdce4f603dd48755f6eeaa4a354291/xcross-0.1.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0003c22e81f08c02f20523be980613d63527c401f3caedba6cd652e76ccc1daa",
          "md5": "186caaa773bc346a5b982f711f084c02",
          "sha256": "2ed606a6edb66c920490ac837e2f85448256a05fb380988dd2bf04b8de73907b"
        },
        "downloads": -1,
        "filename": "xcross-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "186caaa773bc346a5b982f711f084c02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.6.0",
        "size": 66549,
        "upload_time": "2021-07-12T20:11:23",
        "upload_time_iso_8601": "2021-07-12T20:11:23.605647Z",
        "url": "https://files.pythonhosted.org/packages/00/03/c22e81f08c02f20523be980613d63527c401f3caedba6cd652e76ccc1daa/xcross-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd959b88b8196dd28f49c59bc7e736457acdce4f603dd48755f6eeaa4a354291",
        "md5": "25778152f0f82b3db705305cf71fb22b",
        "sha256": "62624822d5fa89c5081ea61cfb636f1088bf6f8d6a20ca64086c86f83ee477a8"
      },
      "downloads": -1,
      "filename": "xcross-0.1.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "25778152f0f82b3db705305cf71fb22b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">3.6.0",
      "size": 21721,
      "upload_time": "2021-07-12T20:11:21",
      "upload_time_iso_8601": "2021-07-12T20:11:21.781713Z",
      "url": "https://files.pythonhosted.org/packages/bd/95/9b88b8196dd28f49c59bc7e736457acdce4f603dd48755f6eeaa4a354291/xcross-0.1.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0003c22e81f08c02f20523be980613d63527c401f3caedba6cd652e76ccc1daa",
        "md5": "186caaa773bc346a5b982f711f084c02",
        "sha256": "2ed606a6edb66c920490ac837e2f85448256a05fb380988dd2bf04b8de73907b"
      },
      "downloads": -1,
      "filename": "xcross-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "186caaa773bc346a5b982f711f084c02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.6.0",
      "size": 66549,
      "upload_time": "2021-07-12T20:11:23",
      "upload_time_iso_8601": "2021-07-12T20:11:23.605647Z",
      "url": "https://files.pythonhosted.org/packages/00/03/c22e81f08c02f20523be980613d63527c401f3caedba6cd652e76ccc1daa/xcross-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}