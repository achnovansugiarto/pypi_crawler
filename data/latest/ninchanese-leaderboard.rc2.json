{
  "info": {
    "author": "David Czarnecki",
    "author_email": "dczarnecki@agoragames.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "# leaderboard\n\nLeaderboards backed by [Redis](http://redis.io) in Python.\n\nBuilds off ideas proposed in http://www.agoragames.com/blog/2011/01/01/creating-high-score-tables-leaderboards-using-redis/.\n\n## Installation\n\n`pip install leaderboard`\n\nMake sure your redis server is running! Redis configuration is outside the scope of this README, but\ncheck out the [Redis documentation](http://redis.io/documentation).\n\n## Usage\n\n### Creating a leaderboard\n\nBe sure to require the leaderboard library:\n\n```python\nfrom leaderboard.leaderboard import Leaderboard\n```\n\nCreate a new leaderboard or attach to an existing leaderboard named 'highscores':\n\n```python\nhighscore_lb = Leaderboard('highscores')\n```\n\n### Defining leaderboard options\n\nThe default options are as follows:\n\n```python\n    DEFAULT_PAGE_SIZE = 25\n    DEFAULT_REDIS_HOST = 'localhost'\n    DEFAULT_REDIS_PORT = 6379\n    DEFAULT_REDIS_DB = 0\n    DEFAULT_MEMBER_DATA_NAMESPACE = 'member_data'\n    DEFAULT_GLOBAL_MEMBER_DATA = False\n    ASC = 'asc'\n    DESC = 'desc'\n    MEMBER_KEY = 'member'\n    MEMBER_DATA_KEY = 'member_data'\n    SCORE_KEY = 'score'\n    RANK_KEY = 'rank'\n```\n\nYou would use the option, `order=Leaderboard.ASC`, if you wanted a leaderboard sorted from lowest-to-highest score. You may also set the `order` option on a leaderboard after you have created a new instance of a leaderboard. The various `..._KEY` options above control what data is returned in the hash of leaderboard data from calls such as `leaders` or `around_me`. Finally, the `global_member_data` option allows you to control whether optional member data is per-leaderboard (`False`) or global (`True`).\n\n### Ranking members in the leaderboard\n\nAdd members to your leaderboard using `rank_member`:\n\n```python\nfor index in range(1, 11):\n  highscore_lb.rank_member('member_%s' % index, index)\n```\n\nYou can call `rank_member` with the same member and the leaderboard will be updated automatically.\n\nGet some information about your leaderboard:\n\n```python\nhighscore_lb.total_members()\n10\n\nhighscore_lb.total_pages()\n1\n```\n\nGet some information about a specific member(s) in the leaderboard:\n\n```python\nhighscore_lb.score_for('member_4')\n4.0\n\nhighscore_lb.rank_for('member_4')\n7\n\nhighscore_lb.rank_for('member_10')\n1\n```\n\n### Retrieving members from the leaderboard\n\nGet page 1 in the leaderboard:\n\n```python\nhighscore_lb.leaders(1)\n\n[{'member': 'member_10', 'score': 10.0, 'rank': 1}, {'member': 'member_9', 'score': 9.0, 'rank': 2}, {'member': 'member_8', 'score': 8.0, 'rank': 3}, {'member': 'member_7', 'score': 7.0, 'rank': 4}, {'member': 'member_6', 'score': 6.0, 'rank': 5}, {'member': 'member_5', 'score': 5.0, 'rank': 6}, {'member': 'member_4', 'score': 4.0, 'rank': 7}, {'member': 'member_3', 'score': 3.0, 'rank': 8}, {'member': 'member_2', 'score': 2.0, 'rank': 9}, {'member': 'member_1', 'score': 1.0, 'rank': 10}]\n```\n\nAdd more members to your leaderboard:\n\n```python\nfor index in range(50, 96):\n  highscore_lb.rank_member('member_%s' % index, index)\n\nhighscore_lb.total_pages()\n3\n```\n\nGet an \"Around Me\" leaderboard page for a given member, which pulls members above and below the given member:\n\n```python\nhighscore_lb.around_me('member_53')\n\n[{'member': 'member_65', 'score': 65.0, 'rank': 31}, {'member': 'member_64', 'score': 64.0, 'rank': 32}, {'member': 'member_63', 'score': 63.0, 'rank': 33}, {'member': 'member_62', 'score': 62.0, 'rank': 34}, {'member': 'member_61', 'score': 61.0, 'rank': 35}, {'member': 'member_60', 'score': 60.0, 'rank': 36}, {'member': 'member_59', 'score': 59.0, 'rank': 37}, {'member': 'member_58', 'score': 58.0, 'rank': 38}, {'member': 'member_57', 'score': 57.0, 'rank': 39}, {'member': 'member_56', 'score': 56.0, 'rank': 40}, {'member': 'member_55', 'score': 55.0, 'rank': 41}, {'member': 'member_54', 'score': 54.0, 'rank': 42}, {'member': 'member_53', 'score': 53.0, 'rank': 43}, {'member': 'member_52', 'score': 52.0, 'rank': 44}, {'member': 'member_51', 'score': 51.0, 'rank': 45}, {'member': 'member_50', 'score': 50.0, 'rank': 46}, {'member': 'member_10', 'score': 10.0, 'rank': 47}, {'member': 'member_9', 'score': 9.0, 'rank': 48}, {'member': 'member_8', 'score': 8.0, 'rank': 49}, {'member': 'member_7', 'score': 7.0, 'rank': 50}, {'member': 'member_6', 'score': 6.0, 'rank': 51}, {'member': 'member_5', 'score': 5.0, 'rank': 52}, {'member': 'member_4', 'score': 4.0, 'rank': 53}, {'member': 'member_3', 'score': 3.0, 'rank': 54}, {'member': 'member_2', 'score': 2.0, 'rank': 55}]\n```\n\nGet rank and score for an arbitrary list of members (e.g. friends) from the leaderboard:\n\n```python\nhighscore_lb.ranked_in_list(['member_1', 'member_62', 'member_67'])\n\n[{'member': 'member_1', 'score': 1.0, 'rank': 56}, {'member': 'member_62', 'score': 62.0, 'rank': 34}, {'member': 'member_67', 'score': 67.0, 'rank': 29}]\n```\n\nRetrieve members from the leaderboard in a given score range:\n\n```python\nhighscore_lb.members_from_score_range(4, 19)\n\n[{'member': 'member_10', 'score': 10.0, 'rank': 47}, {'member': 'member_9', 'score': 9.0, 'rank': 48}, {'member': 'member_8', 'score': 8.0, 'rank': 49}, {'member': 'member_7', 'score': 7.0, 'rank': 50}, {'member': 'member_6', 'score': 6.0, 'rank': 51}, {'member': 'member_5', 'score': 5.0, 'rank': 52}, {'member': 'member_4', 'score': 4.0, 'rank': 53}]\n```\n\nRetrieve a single member from the leaderboard at a given position:\n\n```python\nhighscore_lb.member_at(4)\n\n{'member': 'member_92', 'score': 92.0, 'rank': 4}\n```\n\nRetrieve a range of members from the leaderboard within a given rank range:\n\n```python\nhighscore_lb.members_from_rank_range(1, 5)\n\n[{'member': 'member_95', 'score': 95.0, 'rank': 1}, {'member': 'member_94', 'score': 94.0, 'rank': 2}, {'member': 'member_93', 'score': 93.0, 'rank': 3}, {'member': 'member_92', 'score': 92.0, 'rank': 4}, {'member': 'member_91', 'score': 91.0, 'rank': 5}]\n```\n\n#### Optional member data notes\n\nIf you use optional member data, the use of the `remove_members_in_score_range` or `remove_members_outside_rank` methods\nwill leave data around in the member data hash. This is because the internal Redis method, `zremrangebyscore`,\nonly returns the number of items removed. It does not return the members that it removed.\n\n#### Leaderboard request options\n\nYou can pass various options to the calls `leaders`, `all_leaders`, `around_me`, `members_from_score_range`, `members_from_rank_range` and `ranked_in_list`. Valid options are:\n\n* `with_member_data` - `true` or `false` to return the optional member data.\n* `page_size` - An integer value to change the page size for that call.\n* `members_only` - `true` or `false` to return only the members without their score and rank.\n* `sort_by` - Valid values for `sort_by` are `score` and `rank`.\n\n### Conditionally rank a member in the leaderboard\n\nYou can pass a function to the `rank_member_if` method to conditionally rank a member in the leaderboard. The function is passed the following 5 parameters:\n\n* `member`: Member name.\n* `current_score`: Current score for the member in the leaderboard. May be `nil` if the member is not currently ranked in the leaderboard.\n* `score`: Member score.\n* `member_data`: Optional member data.\n* `leaderboard_options`: Leaderboard options, e.g. 'reverse': Value of reverse option\n\n```python\ndef highscore_check(self, member, current_score, score, member_data, leaderboard_options):\n  if (current_score is None):\n    return True\n  if (score > current_score):\n    return True\n  return False\n\nhighscore_lb.rank_member_if(highscore_check, 'david', 1337)\nhighscore_lb.score_for('david')\n\n1337.0\n\nhighscore_lb.rank_member_if(highscore_check, 'david', 1336)\nhighscore_lb.score_for('david')\n\n1337.0\n\nhighscore_lb.rank_member_if(highscore_check, 'david', 1338)\nhighscore_lb.score_for('david')\n\n1338.0\n```\n\n### Ranking a member across multiple leaderboards\n\n```python\nhighscore_lb.rank_member_across(['highscores', 'more_highscores'], 'david', 50000, str({'member_name': 'david'}))\n```\n\n### Alternate leaderboard types\n\nThe leaderboard library offers 3 styles of ranking. This is only an issue for members with the same score in a leaderboard.\n\nDefault: The `Leaderboard` class uses the default Redis sorted set ordering, whereby different members having the same score are ordered lexicographically. As per the Redis documentation on Redis sorted sets, \"The lexicographic ordering used is binary, it compares strings as array of bytes.\"\n\nTie ranking: The `TieRankingLeaderboard` subclass of `Leaderboard` allows you to define a leaderboard where members with the same score are given the same rank. For example, members in a leaderboard with the associated scores would have the ranks of:\n\n```\n| member     | score | rank |\n-----------------------------\n| member_1   | 50    | 1    |\n| member_2   | 50    | 1    |\n| member_3   | 30    | 2    |\n| member_4   | 30    | 2    |\n| member_5   | 10    | 3    |\n```\n\nThe `TieRankingLeaderboard` accepts one additional option, `ties_namespace` (default: ties), when initializing a new instance of this class. Please note that in its current implementation, the `TieRankingLeaderboard` class uses an additional sorted set to rank the scores, so please keep this in mind when you are doing any capacity planning for Redis with respect to memory usage.\n\nCompetition ranking: The `CompetitionRankingLeaderboard` subclass of `Leaderboard` allows you to define a leaderboard where members with the same score will have the same rank, and then a gap is left in the ranking numbers. For example, members in a leaderboard with the associated scores would have the ranks of:\n\n```\n| member     | score | rank |\n-----------------------------\n| member_1   | 50    | 1    |\n| member_2   | 50    | 1    |\n| member_3   | 30    | 3    |\n| member_4   | 30    | 3    |\n| member_5   | 10    | 5    |\n```\n\n## Performance Metrics\n\nYou can view [performance metrics](https://github.com/agoragames/leaderboard#performance-metrics) for the\nleaderboard library at the original Ruby library's page.\n\n## Ports\n\nThe following ports have been made of the [leaderboard gem](https://github.com/agoragames/leaderboard).\n\nOfficially supported:\n\n* CoffeeScript: https://github.com/agoragames/leaderboard-coffeescript\n* Python: https://github.com/agoragames/leaderboard-python\n* Ruby: https://github.com/agoragames/leaderboard\n\nUnofficially supported (they need some feature parity love):\n\n* Java: https://github.com/agoragames/java-leaderboard\n* PHP: https://github.com/agoragames/php-leaderboard\n* Scala: https://github.com/agoragames/scala-leaderboard\n\n## Contributing to leaderboard\n\n* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet\n* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it\n* Fork the project\n* Start a feature/bugfix branch\n* Commit and push until you are happy with your contribution\n* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.\n* Please try not to mess with the version or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\n\n## Copyright\n\nCopyright (c) 2011-2018 Ola Mork, David Czarnecki. See LICENSE.txt for further details.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/agoragames/leaderboard-python",
    "keywords": "python,redis,leaderboard",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ninchanese-leaderboard",
    "package_url": "https://pypi.org/project/ninchanese-leaderboard/",
    "platform": "",
    "project_url": "https://pypi.org/project/ninchanese-leaderboard/",
    "project_urls": {
      "Homepage": "https://github.com/agoragames/leaderboard-python"
    },
    "release_url": "https://pypi.org/project/ninchanese-leaderboard/3.7.4/",
    "requires_dist": [
      "redis (>=3)"
    ],
    "requires_python": "",
    "summary": "Leaderboards backed by Redis in Python",
    "version": "3.7.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9892042,
  "releases": {
    "3.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a10db22c553abdf504347124a4efcb9e63eb0d431a682c55b58c0c50b035b83e",
          "md5": "b930d236893ac76a7cd0543402c84645",
          "sha256": "daf0ab6bdbd178fa76332eec0932e42e5bbde2185265431ae34940d03b83eac2"
        },
        "downloads": -1,
        "filename": "ninchanese_leaderboard-3.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b930d236893ac76a7cd0543402c84645",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16087,
        "upload_time": "2021-03-26T16:48:19",
        "upload_time_iso_8601": "2021-03-26T16:48:19.010484Z",
        "url": "https://files.pythonhosted.org/packages/a1/0d/b22c553abdf504347124a4efcb9e63eb0d431a682c55b58c0c50b035b83e/ninchanese_leaderboard-3.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9343a165fb0274e80e2a19e7b46bddabd2088fdc0536e2cc0dd3869d5aaaece0",
          "md5": "63911759f109e32226e132eaf6f2a792",
          "sha256": "8fec2d2eb16859bf5cd3dbc87297013d39d50e3232c78c54f9b280e0c8dcb82b"
        },
        "downloads": -1,
        "filename": "ninchanese-leaderboard-3.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "63911759f109e32226e132eaf6f2a792",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19752,
        "upload_time": "2021-03-26T16:48:20",
        "upload_time_iso_8601": "2021-03-26T16:48:20.978784Z",
        "url": "https://files.pythonhosted.org/packages/93/43/a165fb0274e80e2a19e7b46bddabd2088fdc0536e2cc0dd3869d5aaaece0/ninchanese-leaderboard-3.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99710daa5e6b43af1c953484c5fa6328c1fa534b32fb27af8356a0f0218c88c6",
          "md5": "6e5d1a2894967f141501dc7590ddc12a",
          "sha256": "713afdca24cc54b2456e78e6fc8573e224f9cf8f6c96944b91b54c0007e24a20"
        },
        "downloads": -1,
        "filename": "ninchanese_leaderboard-3.7.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e5d1a2894967f141501dc7590ddc12a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16089,
        "upload_time": "2021-03-26T16:49:47",
        "upload_time_iso_8601": "2021-03-26T16:49:47.380583Z",
        "url": "https://files.pythonhosted.org/packages/99/71/0daa5e6b43af1c953484c5fa6328c1fa534b32fb27af8356a0f0218c88c6/ninchanese_leaderboard-3.7.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f48fdbed082a6d53e749ec96cf089b9e725066e3e5e93dc57a7f69bad12a9a9f",
          "md5": "f9dd04f1402b249775250b0e2b2647f8",
          "sha256": "744bd87b514da90d0a695c31bd31eed41cb3e81fd1cd39511a3a7fdacd409793"
        },
        "downloads": -1,
        "filename": "ninchanese-leaderboard-3.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f9dd04f1402b249775250b0e2b2647f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19753,
        "upload_time": "2021-03-26T16:49:48",
        "upload_time_iso_8601": "2021-03-26T16:49:48.762431Z",
        "url": "https://files.pythonhosted.org/packages/f4/8f/dbed082a6d53e749ec96cf089b9e725066e3e5e93dc57a7f69bad12a9a9f/ninchanese-leaderboard-3.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99710daa5e6b43af1c953484c5fa6328c1fa534b32fb27af8356a0f0218c88c6",
        "md5": "6e5d1a2894967f141501dc7590ddc12a",
        "sha256": "713afdca24cc54b2456e78e6fc8573e224f9cf8f6c96944b91b54c0007e24a20"
      },
      "downloads": -1,
      "filename": "ninchanese_leaderboard-3.7.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e5d1a2894967f141501dc7590ddc12a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16089,
      "upload_time": "2021-03-26T16:49:47",
      "upload_time_iso_8601": "2021-03-26T16:49:47.380583Z",
      "url": "https://files.pythonhosted.org/packages/99/71/0daa5e6b43af1c953484c5fa6328c1fa534b32fb27af8356a0f0218c88c6/ninchanese_leaderboard-3.7.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f48fdbed082a6d53e749ec96cf089b9e725066e3e5e93dc57a7f69bad12a9a9f",
        "md5": "f9dd04f1402b249775250b0e2b2647f8",
        "sha256": "744bd87b514da90d0a695c31bd31eed41cb3e81fd1cd39511a3a7fdacd409793"
      },
      "downloads": -1,
      "filename": "ninchanese-leaderboard-3.7.4.tar.gz",
      "has_sig": false,
      "md5_digest": "f9dd04f1402b249775250b0e2b2647f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19753,
      "upload_time": "2021-03-26T16:49:48",
      "upload_time_iso_8601": "2021-03-26T16:49:48.762431Z",
      "url": "https://files.pythonhosted.org/packages/f4/8f/dbed082a6d53e749ec96cf089b9e725066e3e5e93dc57a7f69bad12a9a9f/ninchanese-leaderboard-3.7.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}