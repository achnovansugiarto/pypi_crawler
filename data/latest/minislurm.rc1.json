{
  "info": {
    "author": "S.V. Matsievskiy",
    "author_email": "matsievskiysv@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering"
    ],
    "description": "Opposed to [slurm](https://slurm.schedmd.com/), minislurm is a single node workload manager.\nIt is intended for repeated program execution with different parameters on a single machine\n(e.g. physical process simulation with different boundary conditions).\nDifferent processes should be put in different [systemd](https://systemd.io/) service files so\nappropriate resource restrictions may be applied.\n\n# Installation\n\nTo install simply issue the command\n```bash\npip3 install --user minislurm\n```\n\n# Configuration\n\nFull configuration file is\n```ini\n[SERVER]\nSOCKET = /tmp/minislurm.socket\nTIMEZONE_OFFSET = +3\nMAX_PARALLEL = 4\nQUEUE_SIZE = 100\nUPDATE_TIME = 1\nLOG_LEVEL = INFO\nCALLBACK =\n[PROGRAM]\nCOMMAND = sleep {}\nTIMEOUT = 1h 30m\nKILL_TIMEOUT = 10m\n```\n  * `SERVER` section contains configuration related to server itself\n    * `SOCKET` is a [UNIX socket](https://en.wikipedia.org/wiki/Unix_domain_socket) file\n      location. Use a descriptive name in a writable folder (e.g. `/tmp/minislurm_openfoam.socket`).\n    * `TIMEZONE_OFFSET` is used for displaying time with specified offset\n    * `MAX_PARALLEL` controls how many processes may run simultaneously\n    * `QUEUE_SIZE` specifies job queue size. New processes cannot be added is all queue slots are\n      occupied and all jobs are either running or waiting to be executed.\n    * `UPDATE_TIME` controls how frequently processes are probed for status. There's not much point\n      in changing this value.\n    * `LOG_LEVEL` sets the logging level. When running server using systemd, log file may be\n      examined using `journalctl --user -u minislurm@<instance>.service` command, where `<instance>`\n      is a server instance name (for details read below).\n    * `CALLBACK` may be used to run a callback command with arguments `job_name`, `job_id`, `job_status`\n      when job finishes execution. One example of such a callback is a\n      [DBUS](https://www.freedesktop.org/wiki/Software/dbus/) notification.\n      ```ini\n      CALLBACK = dbus-send --session --type=method_call --dest=org.freedesktop.Notifications / org.freedesktop.Notifications.Notify string:'' uint32:0 string:'' string:MiniSlurm string:\"Job {} ID {} stopped with status {}\" array:string:\"\" dict:string:string:'' int32:5000\n      ```\n      Configuration presented above spawns DBUS notification for 5 seconds after job is complete.\n  * `PROGRAM` section configures spawned processes\n    * `COMMAND` is a command to be spawned by server. It uses [Python\n      `str.format`](https://docs.python.org/3.8/library/stdtypes.html#str.format) syntax to supply\n      command arguments.\n\t  In simpler words, each curly brace pair `{}` will be substituted with the arguments, specified\n      by `minislurm_client` program (use `list --command` command to inspect a command template of a\n      server instance).\n    * `TIMEOUT` determines how much time is given to the process to finish. It this time is\n      exceeded, process will be terminated. May be overriden by a user.\n    * `TIMEOUT_KILL` determines much time is given to the process to terminate (to save data,\n      cleanup etc.). It this time is exceeded, process will be killed.\n\nEach configuration may be overriden by environment variables with name\n`MINISLURM_<SECTION>_<CONFIG>` (e.g. `MINISLURM_SERVER_MAX_PARALLEL`, `MINISLURM_PROGRAM_COMMAND`).\n\n## Systemd\n\nSystemd template file <minislurm@.service> may be used to start server instances and control\nresources.\nIt should be placed inside `~/.config/systemd/user` folder to be used as a local user.\nThis configuration assumes that minislurm configuration files are placed in users `$HOME` directory\nand named `.minislurm_<instance_name>.ini`.\nFor example, for the configuration file `~/.minislurm_openfoam.ini` server instance may be start\nwith command `systemctl --user start minislurm@openfoam.service`.\nNote, that `SOCKET` configuration in `~/.minislurm_openfoam.ini` should be adjusted to use different\nname in order to avoid instance collisions.\nMinislurm service instance may be started using command\n```bash\nsystemctl start --user minislurm@openfoam\n```\n\nAdjusting `CPUQuota` and `MemoryMax` limits should be done on per-instance basis.\nAfter starting the service create a drop-in override by issuing the command\n```bash\nsystemctl edit --user minislurm@openfoam\n```\nIn the opened text file add lines\n```ini\n[Service]\nMemoryMax=10G\nCPUQuota=800%\n```\nThis particular configuration will limit memory usage to 10Gb and allow using up to 8 CPU threads.\n\nEnable service to start minislurm service automatically on system startup\n```bash\nsystemctl enable --user minislurm@openfoam\n```\n\nNote that running server as root is extremely dangerous. Instead, create a dedicated user and group for global\nminislurm instance.\n\n# Job submission\n\n## Socket selection\n\n`minislurm_client` command is used to submit jobs to server.\nFirstly, client should know server socket location.\nIt may be supplied directly using `socket` argument or be read from configuration file pointed to by\n`config` argument.\n\nExamples:\n  * Connect to socket at specific location\n  ```bash\n  minislurm_client socket /tmp/minislurm.socket list --all\n  ```\n  * Read socket location from configuration file\n  ```bash\n  minislurm_client config ~/.minislurm_test.ini list --all\n  ```\n\nIt may be handy to define shell aliases for server instances\n```bash\nalias minislurm_openfoam=\"minislurm_client config ~/.minislurm_openfoam.ini\"\n```\nThis allows quick access to specific server instance\n```bash\nminislurm_openfoam list --all\n```\n\n## Add job\n\nJob submission syntax\n```bash\nminislurm_client (socket <socket>|config <config>) add [--path=<path> --name=<name> --stdout=<stdout> --stderr=<stderr> --timeout=<timeout>] -- <args>...\n```\n\nMandatory mutually exclusive options `<socket>` and `<config>` are explained in a section above.\n\nTo submit job user must at least supply a list of arguments `<args>` to fill a command template.\nUse quotes `\"\"` and `''` to group space separated words together.\nFor example, supplying command template `echo There are {} apples in the {}` with arguments `thirty\ntwo basket` would expand as `echo There are thirty apples in the two`.\nWhen wrapping word group in quotes `\"thirty two\" basket` expansion result `There are thirty two\napples in the basket` makes much more sense.\n\nOther options are:\n  * `<path>` is a path to run program from. Defaults to the directory, from which call was made.\n  * `<name>` is a name of a process or a process group. Multiple processes may share the name, which\n    may be used remove/pause/continue them all.\n  * `<timeout>` overrides global `TIMEOUT` setting for job cancellation.\n  * `<stdout>` and `<stderr>` specify files to which write program's stdout and stderr streams.\n\nThere's another version of the add command\n```bash\nminislurm_client (socket <socket>|config <config>) add <base_name> [--path=<path> --timeout=<timeout>] -- <args>...\n```\nIn this shortcut version `<base_name>` will be used as a `<name>` of a job;\nstdout and stderr files will be called `<base_name>.out` and `<base_name>.err`.\n\nExamples:\n  * `minislurm_client config ~/.minislurm_test.ini add --stdout /tmp/1.out --name $USER --timeout\n    \"1m 1second\" -- 'thirty two' basket`\n  * `minislurm_client socket /tmp/minislurm_test.socket add take1 -- arg1 arg2`\n  * `minislurm_client config ~/.minislurm_test.ini add --stdout /tmp/1.out --name $USER --timeout\n    \"1m 1second\" -- 'thirty two' basket`\n\n## Remove/pause/continue jobs\n\nRemove, pause and continue commands remove, pause and continue specified job respectively.\nTheir syntax is similar.\n```bash\nminislurm_client (socket <socket>|config <config>) rm (--all | --id=<id> | --name <name>)\nminislurm_client (socket <socket>|config <config>) pause (--all | --id=<id> | --name <name>)\nminislurm_client (socket <socket>|config <config>) continue (--all | --id=<id> | --name=<name>)\n```\n\nMandatory mutually exclusive options `<socket>` and `<config>` are explained in a section above.\n\nOption `--all` does required action for all jobs in queue.\nNote that if job is paused while waiting for the execution, it will get a new ID when continued.\n`<id>` and `<name>` arguments allow selecting job by id or name respectively.\nThis arguments allow using\n[regex](https://docs.python.org/3/library/re.html#regular-expression-syntax) to select multiple\njobs.\nStrings are matched partially from the beginning of the string.\nFor example, selector `1` would match all IDs or names beginning with `1`.\nIf you want to match string exactly, terminate selector with `$` character.\n\nExamples:\n  * Remove all jobs\n    `minislurm_client config ~/.minislurm_test.ini rm --all`\n  * Stop jobs with IDs ending with 1, 2, 3 or 4\n    `minislurm_client config ~/.minislurm_test.ini stop --id '.*[1234]$'`\n  * Continue execution of jobs with name containing string `unit` and number `1` maybe separated by\n    non-numeric character; matching is case insensitive\n    `minislurm_client config ~/.minislurm_test.ini continue --name \"(?i).*unit[^\\d]?1\"`\n\n## List jobs\n\nJob list syntax\n```bash\nminislurm_client (socket <socket>|config <config>) list (--all | --command | --ids | --names | --id=<id> | --name=<name>)\n```\n\nMandatory mutually exclusive options `<socket>` and `<config>` are explained in a section above.\n\nOption `--all` lists all jobs in queue.\n`<id>` and `<name>` arguments allow selecting job by id or name respectively using regex selectors.\nOptions `--ids` and `--names` will list all IDs and unique names in queue.\n\nExamples:\n  * List all jobs\n    `minislurm_client config ~/.minislurm_test.ini list --all`\n  * List jobs with IDs ending with 1, 2, 3 or 4\n    `minislurm_client config ~/.minislurm_test.ini list --id '.*[1234]$'`\n  * List jobs with name containing string `unit` and number `1` maybe separated by\n    non-numeric character; matching is case insensitive\n    `minislurm_client config ~/.minislurm_test.ini list --name \"(?i).*unit[^\\d]?1\"`\n\n# Job status\n\nTable of possible job states\n| State | Description |\n|:--|:--|\n| QUEUED | Job is waiting to be executed |\n| RUNNING | Job is running |\n| COMPLETED | Job is completed |\n| FAILED | Job is completed with non-zero exit status |\n| TERMINATING | Server is terminating a job |\n| TERMINATED | Job is terminated |\n| KILLED | Job exceeded termination time and was killed |\n| PAUSED | Job was running and now its execution is paused |\n| HELD | Job was waiting and now its execution is deferred |\n\n# Setup example\n\nSimulations using [DolfinX](https://fenicsproject.org/) FEM library might be quite resource heavy so it makes sense to\nmanage simulation jobs and machine resources using systemd and minislurm.\n\nFirstly, we copy sample systemd service file `minislurm@.service` to the `~.config/systemd/user/` directory.\nAssuming that `dolfinx` C++ library files are located in `/opt/dolfinx/usr/` directory,\nand the python virtual environment is in `/opt/dolfinx/dolfinx_env`, we override\nenvironment variables for our service instance\n```bash\nsystemctl edit --user minislurm@dolfinx.service\n```\nAnd set required envvars and limits for CPU and Memory\n```ini\n[Service]\nEnvironment=PETSC_DIR=/usr/lib/petscdir/petsc-complex\nEnvironment=SLEPC_DIR=/usr/lib/slepcdir/slepc-complex\nEnvironment=PETSC_ARCH=linux-gnu-complex-64\nEnvironment=LD_LIBRARY_PATH=/opt/dolfinx/usr/lib\nEnvironment=PKG_CONFIG_PATH=/opt/dolfinx/usr/lib/pkgconfig\nEnvironment=VIRTUAL_ENV=/opt/dolfinx/dolfinx_env\nEnvironment=PATH=/opt/dolfinx/usr/bin:/opt/dolfinx/dolfinx_env/bin:/usr/local/bin:/usr/bin:/bin\nEnvironment=PYTHONPATH=/usr/lib/petscdir/petsc-complex/lib/python3/dist-packages:/usr/lib/slepcdir/slepc-complex/lib/python3/dist-packages:/opt/dolfinx/dolfinx_env/lib/python3.9/site-packages\nMemoryMax=10G\nCPUQuota=400%\n```\nSimply closing the file editor to apply these settings.\n\nNext, we copy `config.ini.sample` file to ~/.minislurm_dolfinx.ini and adjusting it\n```ini\n[SERVER]\nSOCKET = /tmp/minislurm_dolfinx.socket\t# server socket\nTIMEZONE_OFFSET = +3\t\t# timezone offset\nMAX_PARALLEL = 1\t\t# number of running processes\nQUEUE_SIZE = 100\t\t# queue size\nUPDATE_TIME = 1\t\t\t# queue update period in seconds\nLOG_LEVEL = INFO                # server log level\n[PROGRAM]\nCOMMAND = python3 {}\t\t# command arguments in curly braces are set by client\nTIMEOUT = 2h\t\t\t# execution timeout. awailable units are s,m,h,d,w\nKILL_TIMEOUT = 10m\t\t# soft stop timeout. awailable units are s,m,h,d,w\n```\n\nNow out service is ready to be started\n```bash\nsystemctl start --user minislurm@dolfinx.service\n```\nOptionally enabling service autostart\n```bash\nsystemctl enable --user minislurm@dolfinx.service\n```\nFor convenience adding command alias to the `~/.profile` file\n```bash\nalias minislurm_dolfinx=\"minislurm_client config ~/.minislurm_dolfinx.ini\"\n```\n\nThat is it.\nNow adding a dolfinx script to job queue simply by typing\n```\nminislurm_dolfinx add testrun -- script.py\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/matsievskiysv/minislurm",
    "keywords": "job queue",
    "license": "AGPLv3+",
    "maintainer": "S.V. Matsievskiy",
    "maintainer_email": "matsievskiysv@gmail.com",
    "name": "minislurm",
    "package_url": "https://pypi.org/project/minislurm/",
    "platform": "",
    "project_url": "https://pypi.org/project/minislurm/",
    "project_urls": {
      "Homepage": "https://gitlab.com/matsievskiysv/minislurm"
    },
    "release_url": "https://pypi.org/project/minislurm/21.11/",
    "requires_dist": [
      "docopt"
    ],
    "requires_python": "",
    "summary": "Single machine resource manager",
    "version": "21.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12274742,
  "releases": {
    "21.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf80cd8f4214fdf3cd150c7df9c2b191c6b0b123605a4416ea49aea7d3cb813f",
          "md5": "9944fa120645721aca3a54ed6fdce63c",
          "sha256": "3a2e87915f09bad40fdcd318aa74d17ea84cdc9d288e8e6abc8c3376859c30b8"
        },
        "downloads": -1,
        "filename": "minislurm-21.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9944fa120645721aca3a54ed6fdce63c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24982,
        "upload_time": "2021-12-11T10:25:23",
        "upload_time_iso_8601": "2021-12-11T10:25:23.194281Z",
        "url": "https://files.pythonhosted.org/packages/bf/80/cd8f4214fdf3cd150c7df9c2b191c6b0b123605a4416ea49aea7d3cb813f/minislurm-21.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c33bfa474de6a3ad7cd7a569cbc01c988344af726ce4635d41d7e91b88c7cc6",
          "md5": "7e9999e6aa0880170d0225dc82e08ea6",
          "sha256": "2e82b825a3837d9524faaa5583c1c21a4da06182c5671735542a4fe8e09e02d4"
        },
        "downloads": -1,
        "filename": "minislurm-21.11.tar.gz",
        "has_sig": false,
        "md5_digest": "7e9999e6aa0880170d0225dc82e08ea6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28769,
        "upload_time": "2021-12-11T10:25:25",
        "upload_time_iso_8601": "2021-12-11T10:25:25.381006Z",
        "url": "https://files.pythonhosted.org/packages/3c/33/bfa474de6a3ad7cd7a569cbc01c988344af726ce4635d41d7e91b88c7cc6/minislurm-21.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf80cd8f4214fdf3cd150c7df9c2b191c6b0b123605a4416ea49aea7d3cb813f",
        "md5": "9944fa120645721aca3a54ed6fdce63c",
        "sha256": "3a2e87915f09bad40fdcd318aa74d17ea84cdc9d288e8e6abc8c3376859c30b8"
      },
      "downloads": -1,
      "filename": "minislurm-21.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9944fa120645721aca3a54ed6fdce63c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24982,
      "upload_time": "2021-12-11T10:25:23",
      "upload_time_iso_8601": "2021-12-11T10:25:23.194281Z",
      "url": "https://files.pythonhosted.org/packages/bf/80/cd8f4214fdf3cd150c7df9c2b191c6b0b123605a4416ea49aea7d3cb813f/minislurm-21.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c33bfa474de6a3ad7cd7a569cbc01c988344af726ce4635d41d7e91b88c7cc6",
        "md5": "7e9999e6aa0880170d0225dc82e08ea6",
        "sha256": "2e82b825a3837d9524faaa5583c1c21a4da06182c5671735542a4fe8e09e02d4"
      },
      "downloads": -1,
      "filename": "minislurm-21.11.tar.gz",
      "has_sig": false,
      "md5_digest": "7e9999e6aa0880170d0225dc82e08ea6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28769,
      "upload_time": "2021-12-11T10:25:25",
      "upload_time_iso_8601": "2021-12-11T10:25:25.381006Z",
      "url": "https://files.pythonhosted.org/packages/3c/33/bfa474de6a3ad7cd7a569cbc01c988344af726ce4635d41d7e91b88c7cc6/minislurm-21.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}