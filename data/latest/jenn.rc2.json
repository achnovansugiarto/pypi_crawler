{
  "info": {
    "author": "Steven H. Berguin",
    "author_email": "stevenberguin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Jacobian-Enhanced Neural Network (JENN)\n\nJacobian-Enhanced Neural Networks (JENN) are fully connected multi-layer\nperceptrons, whose training process was modified to account for gradient\ninformation. Specifically, the parameters are learned by minimizing the Least\nSquares Estimator (LSE), modified to minimize prediction error of both \nresponse values and partial derivatives. \n\nThe chief benefit of gradient-enhancement is better accuracy with\nfewer training points, compared to full-connected neural nets without\ngradient-enhancement. JENN applies to regression, but not classification since there is no gradient in that case.\n\nThis particular implementation is fully vectorized and uses Adam optimization,\nmini-batch, and L2-norm regularization. Batch norm is not implemented and,\ntherefore, very deep networks might suffer from exploding and vanishing\ngradients. This would be a useful addition for those who would like to\ncontribute. \n\nThe core algorithm was written in Python 3 and requires only numpy. However, \nMatplotlib is required for plotting, some examples \ndepend on pyDOE2 for generating synthetic data, and example notebooks \nrequire Jupyter to run. For now, documentation only exists in the form of a \n[PDF](https://github.com/shb84/JENN/blob/master/docs/theory.pdf) with the \ntheory and [jupyter notebook examples](https://github.com/shb84/JENN/tree/master/demo) on the project website. \n\nJacobian-Enhanced Neural Net            |  Standard Neural Net\n:-------------------------:|:-------------------------:\n![](pics/JENN.png)  |  ![](pics/NN.png)\n\n> NOTE: this project was originally called GENN, but was renamed since a pypi package of that name already exists.\n\n----\n\n# Main Features\n\n* Multi-Task Learning : predict more than one output with same model Y = f(X) where Y = [y1, y2, ...]\n* Jacobian prediction : analytically compute the Jacobian (_i.e._ forward propagation of dY/dX)\n* Gradient-Enhancement: minimize prediction error of partials during training (_i.e._ back-prop accounts for dY/dX)\n\n----\n\n# Installation\n\n# Users\n\n    pip install jenn\n\n# Developers\n\nClone the repo: \n\n    git clone https://github.com/shb84/JENN.git \n\nFrom inside the repo, create a new conda environment for the project (called `jenn` by default): \n\n    conda env create -f environment.yml \n    conda activate JENN \n\nTest that your environment is working by running unit tests. From the root directory of the repo, type: \n\n    pytest \n\nAll tests should pass. You should also try running the notebooks in `demo/` and the the usage example below. \n\n> NOTE: If jupyter throws `ModuleNotFoundError: No module named` but the package is installed, \n> then Jupyter might be running a different kernel then the one associated \n> with your conda env. To fix this, add your conda environment as kernel so that it can \n> be selected when running Jupyter: \n>\n    ipython kernel install --user --name=<env_name>\n\n----\n\n# Usage\n\n**Checkout demo for more detailed tutorials in the form of jupyter notebooks**\n\n    import numpy as np\n    from jenn import JENN\n    import pickle\n\n    def synthetic_data(): \n        f = lambda x: x * np.sin(x)\n        df_dx = lambda x: np.sin(x) + x * np.cos(x) \n\n        # Domain \n        lb = -np.pi\n        ub = np.pi\n\n        # Training data \n        m = 4    # number of training examples\n        n_x = 1  # number of inputs\n        n_y = 1  # number of outputs\n        X_train = np.linspace(lb, ub, m).reshape((m, n_x))\n        Y_train = f(X_train).reshape((m, n_y))\n        J_train = df_dx(X_train).reshape((m, n_y, n_x))\n\n        # Test data \n        m = 30  # number of test examples\n        X_test = lb + np.random.rand(m, 1).reshape((m, n_x)) * (ub - lb)\n        Y_test = f(X_test).reshape((m, n_y))\n        J_test = df_dx(X_test).reshape((m, n_y, n_x))\n\n        return X_train, Y_train, J_train, X_test, Y_test, J_test\n\n    # Generate synthetic data for this example \n    X_train, Y_train, J_train, X_test, Y_test, J_test = synthetic_data() \n\n    # Initialize model (gamma = 1 implies gradient enhancement)\n    model = JENN(hidden_layer_sizes=(12,), activation='tanh',\n                 num_epochs=1, max_iter=200, batch_size=None,\n                 learning_rate='backtracking', random_state=None, tol=1e-6,\n                 learning_rate_init=0.05, alpha=0.1, gamma=1, verbose=False)\n\n    # Train neural net \n    model.fit(X_train, Y_train, J_train) \n\n    # Plot training history \n    history = model.training_history()\n\n    # Visualize fit quality \n    r_square = model.goodness_fit(X_test, Y_test)\n\n    # Predict\n    Y_pred = model.predict(X_train)\n    J_pred = model.jacobian(X_train)\n\n    # Save as pkl file for re-use\n    file = open('model.pkl', 'wb')\n    pickle.dump(model, file)\n    file.close()\n\n    # Assume you are starting a new script and want to reload a previously trained model:\n    pkl_file = open('model.pkl', 'rb')\n    model = pickle.load(pkl_file)\n    pkl_file.close()\n\n----\n\n# Limitations\n\nGradient-enhanced methods requires responses to be continuous and smooth (_i.e._ gradient is \ndefined everywhere), but is only beneficial when  the cost of obtaining the gradient \nis not excessive in the first place or the need for accuracy outweighs the cost of \ncomputing partials. The user should therefore carefully weigh the benefit of \ngradient-enhanced methods relative to the needs of the application.\n\n----\n\n# Use Case\n\nJENN is unlikely to apply to real-world data since real data is usually\ndiscrete, incomplete, and gradients are not available. However, in the field of\ncomputer aided design, there exist a well known use case: the need to replace\ncomputationally expensive computer models with so-called “surrogate models” in\norder to save time for further analysis down the line. The field of aerospace\nengineering and, more specifically, multi-disciplinary analysis and optimization\nis rich in examples. In this scenario, the process typically consists of\ngenerating a small Design Of Experiment (DOE), running the computationally\nexpensive computer model for each DOE point, and using the results as training\ndata to train a “surrogate model” (such as JENN). Since the “surrogate model”\nemulates the original physics-based model accurately in real time, it offers a\nspeed benefit that can be used to carry out additional analysis such as\nuncertainty quantification by means of Monte Carlo simulation, which would’ve\nbeen computationally inefficient otherwise. Moreover, in the very special case\nof computational fluid dynamics, adjoint design methods provide a scalable and \nefficient way to compute the gradient, making gradient-enhanced methods \nattractive (if not compelling). Otherwise, the cost of generating the gradient \nwill have to be weighed against the benefit of improved accuracy depending on \nthe needs of the application. \n\n----\n\n# Acknowledgement\n\nThis code used the code by Prof. Andrew Ng in the\n[Coursera Deep Learning Specialization](https://www.coursera.org/specializations/deep-learning)\nas a starting point. It then built upon it to include additional features such\nas line search or plotting, but most of all, it fundamentally changed the software architecture\nfrom pure functional programming to object oriented programming and modified the formulation \nto include a gradient-enhancement. The author would like to thank Andrew Ng for\noffering the fundamentals of deep learning on Coursera, which took a complicated\nsubject and explained it in simple terms that made it accessible to laymen, such as the present author.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shb84/GENN.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jenn",
    "package_url": "https://pypi.org/project/jenn/",
    "platform": "",
    "project_url": "https://pypi.org/project/jenn/",
    "project_urls": {
      "Bug Tracker": "https://github.com/shb84/GENN.git/issues",
      "Homepage": "https://github.com/shb84/GENN.git"
    },
    "release_url": "https://pypi.org/project/jenn/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Jacobian-Enhanced Neural Network (JENN)",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9931092,
  "releases": {
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d19195a117e0acc05a153af0f32ab866cd66dcd85bc141961ebea5f0df381b7",
          "md5": "c645541e81370f65cda741dfe763325e",
          "sha256": "facf55502ac098da12c1e6d7baa0167e24ab2f0f6fecd3e4b4ecddb91a913ef3"
        },
        "downloads": -1,
        "filename": "jenn-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c645541e81370f65cda741dfe763325e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31399,
        "upload_time": "2021-03-30T23:30:33",
        "upload_time_iso_8601": "2021-03-30T23:30:33.740858Z",
        "url": "https://files.pythonhosted.org/packages/0d/19/195a117e0acc05a153af0f32ab866cd66dcd85bc141961ebea5f0df381b7/jenn-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "546a3426c70704941c621efde9c582f5269cfca49d3fc6298b1b5c05a275c312",
          "md5": "d39a7ac667a88672a5167d4ee25e66c5",
          "sha256": "48085ab1abc7dbd1856568f07f9d328839b7558be5a251a59110d618faa9ff22"
        },
        "downloads": -1,
        "filename": "jenn-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "d39a7ac667a88672a5167d4ee25e66c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28032,
        "upload_time": "2021-03-30T23:30:34",
        "upload_time_iso_8601": "2021-03-30T23:30:34.893373Z",
        "url": "https://files.pythonhosted.org/packages/54/6a/3426c70704941c621efde9c582f5269cfca49d3fc6298b1b5c05a275c312/jenn-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "747593fe9b7eb13c05e79d08f29daabacf5dae32c3e4fd80db6863e6680d4c38",
          "md5": "65fd73b8629e4bbe245dde6e68bf4f2d",
          "sha256": "69e2ed562c5aadb4d28d454e6ae43c55ba659cc45a22be744e69e217214ae15d"
        },
        "downloads": -1,
        "filename": "jenn-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65fd73b8629e4bbe245dde6e68bf4f2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31344,
        "upload_time": "2021-03-30T23:31:48",
        "upload_time_iso_8601": "2021-03-30T23:31:48.558530Z",
        "url": "https://files.pythonhosted.org/packages/74/75/93fe9b7eb13c05e79d08f29daabacf5dae32c3e4fd80db6863e6680d4c38/jenn-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aadde0d2ada15b107ce74e7d7649fe5c15e2f523a5cfd8df10dc3e6e7a601d49",
          "md5": "ce020e70ded440dd7e119b64e3fa66a0",
          "sha256": "5b03ef8a64db50e34dfee7b5c7de4db974f2a4a020dee20091ccc811bf198c62"
        },
        "downloads": -1,
        "filename": "jenn-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ce020e70ded440dd7e119b64e3fa66a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27916,
        "upload_time": "2021-03-30T23:31:50",
        "upload_time_iso_8601": "2021-03-30T23:31:50.171000Z",
        "url": "https://files.pythonhosted.org/packages/aa/dd/e0d2ada15b107ce74e7d7649fe5c15e2f523a5cfd8df10dc3e6e7a601d49/jenn-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "747593fe9b7eb13c05e79d08f29daabacf5dae32c3e4fd80db6863e6680d4c38",
        "md5": "65fd73b8629e4bbe245dde6e68bf4f2d",
        "sha256": "69e2ed562c5aadb4d28d454e6ae43c55ba659cc45a22be744e69e217214ae15d"
      },
      "downloads": -1,
      "filename": "jenn-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "65fd73b8629e4bbe245dde6e68bf4f2d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 31344,
      "upload_time": "2021-03-30T23:31:48",
      "upload_time_iso_8601": "2021-03-30T23:31:48.558530Z",
      "url": "https://files.pythonhosted.org/packages/74/75/93fe9b7eb13c05e79d08f29daabacf5dae32c3e4fd80db6863e6680d4c38/jenn-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aadde0d2ada15b107ce74e7d7649fe5c15e2f523a5cfd8df10dc3e6e7a601d49",
        "md5": "ce020e70ded440dd7e119b64e3fa66a0",
        "sha256": "5b03ef8a64db50e34dfee7b5c7de4db974f2a4a020dee20091ccc811bf198c62"
      },
      "downloads": -1,
      "filename": "jenn-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ce020e70ded440dd7e119b64e3fa66a0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 27916,
      "upload_time": "2021-03-30T23:31:50",
      "upload_time_iso_8601": "2021-03-30T23:31:50.171000Z",
      "url": "https://files.pythonhosted.org/packages/aa/dd/e0d2ada15b107ce74e7d7649fe5c15e2f523a5cfd8df10dc3e6e7a601d49/jenn-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}