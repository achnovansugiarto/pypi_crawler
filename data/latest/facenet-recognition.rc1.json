{
  "info": {
    "author": "Ishwar Sawale",
    "author_email": "ishwar.code@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Face Recognition\n================\n\nFace Recognition Based on Facenet\n\nBuilt using `Facenet <https://github.com/davidsandberg/facenet>`__'s\nstate-of-the-art face recognition built with deep learning. The model\nhas an accuracy of 99.2% on the `Labeled Faces in the\nWild <http://vis-www.cs.umass.edu/lfw/>`__ benchmark.\n\nFeatures\n--------\n\n-  Out of Box Working Face Recognition\n-  Choose Any Pre-Trained Model from Facenet\n-  For training just provide the proper folder structure\n-  Faster than other available solutions\n\nPrerequisites\n~~~~~~~~~~~~~\n\n-  You need Python(2.6 to 3.5) installed\n-  X-based System supported *(does work on Windows but not tested)*\n\nInstalling\n~~~~~~~~~~\n\n.. code:: python\n\n    pip install facenet_recognition\n\nSetup\n^^^^^\n\n**Create setup as follows:**\n\n1. Create input directory eg: input\\_images\n2. Create aligned images directory eg: aligned\\_images *Create this\n   directory we will store aligned images here*\n3. Create pre-trained model directory eg: pretrained\\_facenet\\_model\n   *Download Pre-Trained model from\n   `Facenet`* and keep it\n   in the pre\\_model directory\n4. Create my trained classifier directory eg: my\\_classifier *In this\n   directory we will save our trained model*\n\nLet's Begin\n-----------\n\nFor Facial Recognition we need to align images as follows:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import facenet_recognition\n    facenet_recognition.align_input('input_images','aligned_images')\n\n*Above command will create our input images into aligned format and save\nit in given aligned images folder*\n\nTrain & Test Classifier on Images\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAfter we have aligned images now we can train our classifier.\n\n.. code:: python\n\n    pre_model='./pretrained_facenet_model/20170511-185253.pb' #locaiton of pret-trained model from Facenet\n    my_class ='./my_classifier/my_classifier.pkl' #location where we want to save\n    test_classifier_type = 'svm' #type of model either svm or nn\n    weight= './my_classifier/model_small.yaml' #local stored weights\n\n    facenet_recognition.test_train_classifier(aligned_images,pre_model,my_class,weight,test_classifier_type,nrof_train_images_per_class=30, seed=102)\n\n*Mininum Required Image per person*: *1* *Number of Images for Training\nper Person*: *30 (configurable)*\n\nTrain Classifer on Images(only Training)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis API is used to Train our Classifier on Aligned Images\n\n.. code:: python\n\n    pre_model='./pretrained_facenet_model/20170511-185253.pb' #locaiton of pret-trained model from Facenet\n    my_class ='./my_classifier/my_classifier.pkl' #location where we want to save\n    test_classifier_type = 'nn' #type of model either svm or nn\n    weight= './my_classifier/model_small.yaml' #local stored weights\n\n    facenet_recognition.create_classifier(aligned_images,pre_model,my_class,weight,test_classifier_type)\n\n*Mininum Required Image per person*: *1* *Number of Images for Training\nper Person*: *30 (fixed)*\n\nTest Classifer on Images\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis API is used to test our Trained Classifer\n\n.. code:: python\n\n    pre_model='./pretrained_facenet_model/20170511-185253.pb' #locaiton of pret-trained model from Facenet\n    my_class ='./my_classifier/my_classifier.pkl' #location where we want to save\n    test_classifier_type = 'nn' #type of model either svm or nn\n    weight= './my_classifier/model_small.yaml' #local stored weights\n\n    facenet_recognition.test_classifier(aligned_images,pre_model,my_class,weight,test_classifier_type)\n\n*Mininum Required Image per person*: *1*\n\nAuthors\n-------\n\n-  **Ishwar Sawale** -- `Visit Portfolio <http://ishwarsawale.com>`__\n\nLicense\n-------\n\nThis project is licensed under the MIT License - see the\n`LICENSE.md <LICENSE.md>`__ file for details\n\nAcknowledgments\n---------------\n\n-  Big Thanks to David Sandberg for Facent\n-  Inspired by Dlib based library face\\_recognition\n\n\nHistory\n=======\n\n0.1.4 (2018-28-03)\n------------------\n\n* First beta release.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ishwarsawale/facenet_recognition",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "facenet_recognition",
    "package_url": "https://pypi.org/project/facenet_recognition/",
    "platform": "",
    "project_url": "https://pypi.org/project/facenet_recognition/",
    "project_urls": {
      "Homepage": "http://github.com/ishwarsawale/facenet_recognition"
    },
    "release_url": "https://pypi.org/project/facenet_recognition/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Face recognition based on Facenet",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3717224,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4cabc3517970eb7b2e1b5bad99603f1c0313d3a6bf1a0aeaf60edf7973ac821",
          "md5": "b7c1b2a51028a951c07483a1dbc6cd4a",
          "sha256": "756f8879990c33e07f6e78db258587e79bf7ee63097061691736b21ffd6633e4"
        },
        "downloads": -1,
        "filename": "facenet_recognition-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b7c1b2a51028a951c07483a1dbc6cd4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1884807,
        "upload_time": "2018-03-29T14:19:51",
        "upload_time_iso_8601": "2018-03-29T14:19:51.390368Z",
        "url": "https://files.pythonhosted.org/packages/f4/ca/bc3517970eb7b2e1b5bad99603f1c0313d3a6bf1a0aeaf60edf7973ac821/facenet_recognition-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4cabc3517970eb7b2e1b5bad99603f1c0313d3a6bf1a0aeaf60edf7973ac821",
        "md5": "b7c1b2a51028a951c07483a1dbc6cd4a",
        "sha256": "756f8879990c33e07f6e78db258587e79bf7ee63097061691736b21ffd6633e4"
      },
      "downloads": -1,
      "filename": "facenet_recognition-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b7c1b2a51028a951c07483a1dbc6cd4a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1884807,
      "upload_time": "2018-03-29T14:19:51",
      "upload_time_iso_8601": "2018-03-29T14:19:51.390368Z",
      "url": "https://files.pythonhosted.org/packages/f4/ca/bc3517970eb7b2e1b5bad99603f1c0313d3a6bf1a0aeaf60edf7973ac821/facenet_recognition-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}