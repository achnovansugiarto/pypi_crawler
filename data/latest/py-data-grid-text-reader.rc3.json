{
  "info": {
    "author": "Steve Whalen",
    "author_email": "sjwhalen@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Data Grid Text Reader\n\n``py-data-grid-text-reader`` is a library that reads a string representing a\ndatabase record set (that resembles the output of a call to the Apache Spark\nDataFrame.show() command) and converts it to a different representation, such\nas a list of dictionaries or a set of SQL CREATE TABLE and INSERT statements\nthat can be used to persist the data to a database.\n\nThis library is based on the `py-dataframe-show-reader` library\n(see https://github.com/internetsystemsgroup/py-dataframe-show-reader/) and\nreuses much code from that project. It is intended that this library can read\nand parse the same data record set strings that the `py-dataframe-show-reader`\nlibrary can.\n\nThe primary intended use of the functions in this library is to be used to\nenable writing more concise and easy-to-read tests of data transformations than\nwould otherwise be possible.\n\nImagine we are working on a database query, function or stored procedure that\nperforms a data transformation that is complex enough that we would like to\nquickly verify that it performs as intended, and also have tests to help ensure\nthat a developer modifying the query in the future does not inadvertently break\nthe query for an overlooked edge case.\n\n```sql\nSELECT  CAST(STRFTIME('%W', sale_date) AS INT) + 1 AS week_of_year,\n        AVG(units_sold) AS avg_units_sold,\n        SUM(gross_sales) AS gross_sales\nFROM    sales_by_day\nGROUP BY 1\nORDER BY 1\n```\n\nThis is not a complex query, but perhaps we would like to verify that:\n\n1. Dates are in fact grouped into different weeks.\n1. Units sold are truly averaged and not summed.\n1. Gross sales are truly summed and not averaged.\n\nA unit testing purist might argue that each of these assertions should be\ncovered by a separate test method, but there are at least two reasons why one\nmight choose not to do that.\n\n1. Practical experience tells us that detectable overhead is incurred for\neach separate database transformation test, so we may want to limit the number\nof separate tests in order to keep our full test suite running in a\nreasonable duration.\n\n1. When working with data sets in SQL, particularly when\nusing aggregate, grouping and window functions,\ninteractions between different rows can be easy to overlook. Tweaking a\nquery to fix an aggregate function like a summation might inadvertently break\nthe intended behavior of a windowing function in the query.\nA change to the query might allow a summation-only unit test to pass while\nleaving broken window function behavior undetected because we have neglected to\nupdate the window-function-only unit test.  \n\nIf we accept that we'd like to use a single test to verify the three\nrequirements of our query, we need three rows in our input data set.\n\nUsing unadorned pytest, our test might look like this:\n\n```python\ndef test_without_data_grid_text_reader():\n    with create_engine('sqlite://').connect() as connection:\n        connection.execute(\"\"\"\n        CREATE TABLE sales_by_day (\n            sale_date DATE,\n            units_sold INT,\n            gross_sales DOUBLE\n        );\"\"\")\n\n        connection.execute(\"\"\"\n        INSERT INTO sales_by_day\n        (sale_date, units_sold, gross_sales) VALUES\n        ('2019-01-01', 10, 100),\n        ('2019-01-02', 20, 200),\n        ('2019-01-08', 80, 800);\"\"\")\n\n        actual_rows = [dict(row) for row in connection.execute(\"\"\"\n        SELECT  CAST(STRFTIME('%W', sale_date) AS INT) + 1 AS week_of_year,\n                AVG(units_sold) AS avg_units_sold,\n                SUM(gross_sales) AS gross_sales\n        FROM    sales_by_day\n        GROUP BY 1\n        ORDER BY 1\n        \"\"\")]\n\n        assert 2 == len(actual_rows)  # Number of rows\n        assert 3 == len(actual_rows[0])  # Number of columns\n        assert 1 == actual_rows[0]['week_of_year']\n        assert 15 == actual_rows[0]['avg_units_sold']\n        assert 300 == actual_rows[0]['gross_sales']\n        assert 2 == actual_rows[1]['week_of_year']\n        assert 80 == actual_rows[1]['avg_units_sold']\n        assert 800 == actual_rows[1]['gross_sales']\n```\n\nUsing the Data Grid Text Reader, our test could instead look like this:\n\n```python\ndef test_using_data_grid_text_reader():\n    with create_engine('sqlite://').connect() as connection:\n        reader = DataGridTextReader()\n        reader.save_as_table('sales_by_day', \"\"\"\n        +----------+----------+-----------+\n        |sale_date |units_sold|gross_sales|\n        [date      |int       |double     |\n        +----------+----------+-----------+\n        |2019-01-01|10        |100        |\n        |2019-01-02|20        |200        |\n        |2019-01-08|80        |800        |\n        +----------+----------+-----------+\n        \"\"\", connection)\n\n        actual_rows = [dict(row) for row in connection.execute(\"\"\"\n        SELECT  CAST(STRFTIME('%W', sale_date) AS INT) + 1 AS week_of_year,\n                AVG(units_sold) AS avg_units_sold,\n                SUM(gross_sales) AS gross_sales\n        FROM    sales_by_day\n        GROUP BY 1\n        ORDER BY 1\n        \"\"\")]\n\n        expected_rows = reader.data_grid_text_to_list(\"\"\"\n        +------------+--------------+-----------+\n        |week_of_year|avg_units_sold|gross_sales|\n        [int         |int           |double     |\n        +------------+--------------+-----------+\n        |1           |15            |300        |\n        |2           |80            |800        |\n        +------------+--------------+-----------+\n        \"\"\")\n        assert_equal(expected_rows, actual_rows)\n```\n\nIn the second test example, the `save_as_table` function accepts some data grid\ntext and persists it to a table called `sales_by_day`. Then the\n`data_grid_text_to_list` function accepts some different data grid text and\ncreates a list of dict that can be compared to the `actual_rows` value\nreturned by executing the data transformation query.\n\nIn the first version, the setup portion of the test contains twelve lines,\nand it may take a few moments to digest the contents of the input rows.\nIn the second version, the setup portion contains eleven lines and displays the\ninput data in a more concise tabular form that may be easier for other\nprogrammers (and our future selves) to digest when we need to maintain this\ncode down the road.\n\nIf the method under test was more complicated and required more rows and/or\ncolumns in order to adequately test, the length of the first test format would\ngrow much more quickly than that of the test using the DataFrame Show Reader.\n\nThe `data_grid_text_to_list` function gives us a convenient way to create an\n`expected_rows` list to pass to the `assert_equal` function (to check\nlist equality) that is included in the package.\n\n## Running the Tests\n\n1. Clone the git repo.\n1. `cd` into the root level of the repo.\n1. At a terminal command line, run `python3 -m venv venv`\n1. Run `source venv/bin/activate`\n1. Run `pip install -r requirements_dev.txt`\n1. Run `pytest`\n1. When finished with your session, deactivate your virtual environment with\n   `deactivate`.\n\n## How to Build the Python Package for Distribution on PyPI\n\n`python setup.py sdist bdist_wheel`\n\n## How to Publish the Package to PyPI\n\nPublish to the PyPI test site:\n\n`twine upload --repository-url https://test.pypi.org/legacy/ dist/*`\n\nConfirm that the test is successfully uploaded:\n\n1. View the package at https://test.pypi.org/project/py-data-grid-text-reader/\n2. Try installing the project like so:\n   `pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple py-data-grid-text-reader`\n\nAfter confirming that the package has successfully been published to test.pypi,\npublish to the official PyPI:\n\n`twine upload dist/*`\n\nConfirm that the distribution package is successfully uploaded:\n\n1. View the package at https://pypi.org/project/py-data-grid-text-reader/\n2. Install the project like so:\n   `pip install py-data-grid-text-reader`\n\n## Installation\n\nTo install the package for use in your own package, run:\n\n`pip install py-data-grid-text-reader`\n\n## Who Maintains Data Grid Text Reader?\n\nData Grid Text Reader is the work of the community. The core committers and\nmaintainers are responsible for reviewing and merging PRs, as well as steering\nconversation around new feature requests. If you would like to become a\nmaintainer, please contact us.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/datagridreader/py-data-grid-text-reader/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-data-grid-text-reader",
    "package_url": "https://pypi.org/project/py-data-grid-text-reader/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-data-grid-text-reader/",
    "project_urls": {
      "Homepage": "https://github.com/datagridreader/py-data-grid-text-reader/"
    },
    "release_url": "https://pypi.org/project/py-data-grid-text-reader/1.0.4/",
    "requires_dist": [
      "sqlalchemy (>=1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Reads a string representing a database record set and converts it to a different representation, such as a list of dictionaries or a set of SQL CREATE TABLE and INSERT statements that can be used to persist the data to a database.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11233452,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e7e61d4650fc214c224ad017df561449cee2b46262271cc77883195b39bfe2f",
          "md5": "937d79334c0c08a8ba604a81b94c2f77",
          "sha256": "d1a0a234f8fbe67e496f337ff40a92bf5537672c1cda23ad0b2bdc257ca5f768"
        },
        "downloads": -1,
        "filename": "py_data_grid_text_reader-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "937d79334c0c08a8ba604a81b94c2f77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26073,
        "upload_time": "2021-06-08T16:06:46",
        "upload_time_iso_8601": "2021-06-08T16:06:46.983568Z",
        "url": "https://files.pythonhosted.org/packages/1e/7e/61d4650fc214c224ad017df561449cee2b46262271cc77883195b39bfe2f/py_data_grid_text_reader-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a64914a15c44686edb2da15897d0a07085bae4c1dc721e0a7dd460b09547213d",
          "md5": "d0bdc56716419dd7b4d383789e43883a",
          "sha256": "981098b2eda46c11ce5a275f8552707329ff928e23b63f8f78b9e84d6622f1e1"
        },
        "downloads": -1,
        "filename": "py-data-grid-text-reader-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d0bdc56716419dd7b4d383789e43883a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15173,
        "upload_time": "2021-06-08T16:06:48",
        "upload_time_iso_8601": "2021-06-08T16:06:48.724413Z",
        "url": "https://files.pythonhosted.org/packages/a6/49/14a15c44686edb2da15897d0a07085bae4c1dc721e0a7dd460b09547213d/py-data-grid-text-reader-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9b5fcc2567cb756e9f51e3a1e2d0d951531dfb2defc134f058146908c7ca8c6",
          "md5": "c2489affad68f08bf30c5a29ed67f1e2",
          "sha256": "c3313cc49ca493394b69e9105830990ce9768ee976d2a004f98cace78b386e57"
        },
        "downloads": -1,
        "filename": "py_data_grid_text_reader-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2489affad68f08bf30c5a29ed67f1e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27960,
        "upload_time": "2021-08-19T16:29:57",
        "upload_time_iso_8601": "2021-08-19T16:29:57.421227Z",
        "url": "https://files.pythonhosted.org/packages/b9/b5/fcc2567cb756e9f51e3a1e2d0d951531dfb2defc134f058146908c7ca8c6/py_data_grid_text_reader-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf2b14a160cbbbd10ad0d89b4619e97eb1733255a8318e043b7b5eb4356a09b7",
          "md5": "61dfa3a14044e26d3c8098a6b8bfb638",
          "sha256": "7f45fc0228d21244da78ce67e7c8d6e90c332b20ffc8b58fdf548f830466706f"
        },
        "downloads": -1,
        "filename": "py-data-grid-text-reader-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "61dfa3a14044e26d3c8098a6b8bfb638",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16168,
        "upload_time": "2021-08-19T16:29:58",
        "upload_time_iso_8601": "2021-08-19T16:29:58.966949Z",
        "url": "https://files.pythonhosted.org/packages/cf/2b/14a160cbbbd10ad0d89b4619e97eb1733255a8318e043b7b5eb4356a09b7/py-data-grid-text-reader-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fff92fc24fa5232308753e4ff4632d3e6c3d23e8b95e68da909ef5f9daa9a4b7",
          "md5": "670104f225e01f6ec3c1dd82f403b2fe",
          "sha256": "0973a878252d4b9c04bf9c1c78008cb7d15645e0878494984d1016d1b893e0ac"
        },
        "downloads": -1,
        "filename": "py_data_grid_text_reader-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "670104f225e01f6ec3c1dd82f403b2fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28235,
        "upload_time": "2021-08-20T15:45:50",
        "upload_time_iso_8601": "2021-08-20T15:45:50.093744Z",
        "url": "https://files.pythonhosted.org/packages/ff/f9/2fc24fa5232308753e4ff4632d3e6c3d23e8b95e68da909ef5f9daa9a4b7/py_data_grid_text_reader-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "901a764814829f0f42b8d0fd2bc7d2672d5b18b8e5e31d9710e774b72776a90e",
          "md5": "a6d624c2c64463d2714b97b2d5b5a1fd",
          "sha256": "27dc7a2caa0c75e439e1bddce4581f19937650a36ffe72d6cc25383de68f470c"
        },
        "downloads": -1,
        "filename": "py-data-grid-text-reader-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a6d624c2c64463d2714b97b2d5b5a1fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16428,
        "upload_time": "2021-08-20T15:45:51",
        "upload_time_iso_8601": "2021-08-20T15:45:51.340625Z",
        "url": "https://files.pythonhosted.org/packages/90/1a/764814829f0f42b8d0fd2bc7d2672d5b18b8e5e31d9710e774b72776a90e/py-data-grid-text-reader-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fff92fc24fa5232308753e4ff4632d3e6c3d23e8b95e68da909ef5f9daa9a4b7",
        "md5": "670104f225e01f6ec3c1dd82f403b2fe",
        "sha256": "0973a878252d4b9c04bf9c1c78008cb7d15645e0878494984d1016d1b893e0ac"
      },
      "downloads": -1,
      "filename": "py_data_grid_text_reader-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "670104f225e01f6ec3c1dd82f403b2fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28235,
      "upload_time": "2021-08-20T15:45:50",
      "upload_time_iso_8601": "2021-08-20T15:45:50.093744Z",
      "url": "https://files.pythonhosted.org/packages/ff/f9/2fc24fa5232308753e4ff4632d3e6c3d23e8b95e68da909ef5f9daa9a4b7/py_data_grid_text_reader-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "901a764814829f0f42b8d0fd2bc7d2672d5b18b8e5e31d9710e774b72776a90e",
        "md5": "a6d624c2c64463d2714b97b2d5b5a1fd",
        "sha256": "27dc7a2caa0c75e439e1bddce4581f19937650a36ffe72d6cc25383de68f470c"
      },
      "downloads": -1,
      "filename": "py-data-grid-text-reader-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a6d624c2c64463d2714b97b2d5b5a1fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16428,
      "upload_time": "2021-08-20T15:45:51",
      "upload_time_iso_8601": "2021-08-20T15:45:51.340625Z",
      "url": "https://files.pythonhosted.org/packages/90/1a/764814829f0f42b8d0fd2bc7d2672d5b18b8e5e31d9710e774b72776a90e/py-data-grid-text-reader-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}