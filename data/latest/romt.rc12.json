{
  "info": {
    "author": "Michael Henry",
    "author_email": "drmikehenry@drmikehenry.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "*******************************\nROMT - Rust Offline Mirror Tool\n*******************************\n\nRomt (Rust Offline Mirror Tool) aids in using the Rust programming language in\nan offline context.  Instructions and tooling are provided for:\n\n- Mirroring of Rust ecosystem artifacts:\n\n  - Toolchains (Rustc, Cargo, libraries, etc.)\n  - Rustup (toolchain multiplexer)\n  - Crates.io (community-supplied Crates)\n\n- Incremental artifact downloading (with a configurable number of simultaneous\n  download jobs).\n\n- Incremental artifact transfer to offline network.\n\n- Artifact serving in offline context (offline computer, disconnected network).\n\nScenarios\n=========\n\nRomt support two main mirroring scenarios:\n\n- Development laptop scenario:  Download Rust artifacts to the laptop when\n  connected to the Internet, then serve the artifacts from the laptop when\n  offline.\n\n- Disconnected network scenario:  Download Rust artifacts on an\n  Internet-connected \"Export\" machine, transfer them to an offline network, then\n  serve the artifacts from an offline \"Import\" machine.\n\nInstructions are provided for serving the artifacts using Romt itself via\nunencrypted HTTP or via the nginx web server.\n\nAlternative Tooling\n===================\n\n- Panamax is an alternative to Romt, written in Rust:\n  https://github.com/panamax-rs/panamax\n\nRequirements\n============\n\n- Python 3.6+ for running ``romt`` (requires some packages from pypi.org).\n- Git is required for manipulating the crates.io-index repository.\n- Internet-connected computer for initial downloading (Linux, Windows, Mac\n  [#]_).\n- Offline computer for serving artifacts (Linux, Windows, Mac).\n- [Optional] Gnu Privacy Guard (GPG), if installed, is used used for signature\n  checking.\n\n.. [#] Note: the author does not have access to a Mac, so support for Romt on\n   Mac is untested but hopefully close to working.  Pull requests for\n   Mac-specific fixes are welcome.\n\nRomt installation\n=================\n\n.. note::\n\n  Take note of the instructions for upgrading from Romt versions before 0.4.0\n  if you have existing crate mirrors created from older Romt versions.\n\nInstall prerequisites\n---------------------\n\nFirst install prerequisites for Romt:\n\n- Ensure Git is installed; it is required for proper manipulation of the\n  crates.io-index repository.\n\n- For signature checking, GNU Privacy Guard (gpg) should be installed as well.\n  If gpg is not available, signature files (``*.asc``) will still be transferred\n  but signature checking will be skipped.\n\nNext, choose an option for installation of Romt itself.\n\nOption 1: Install a pre-built executable\n----------------------------------------\n\nThe simplest method of installation is to use a pre-built self-contained\nexecutable from the Github release area:\nhttps://github.com/drmikehenry/romt/releases\n\nOption 2: Install from Python Package Index\n-------------------------------------------\n\nRomt is also available in the Python Package Index (PyPI).  For machines with\ndirect Internet access, installation is straightforward; for machines on a\ndisconnected network, more steps are required.\n\nFirst ensure that the ``PATH`` contains the directory that holds installed\nPython packages::\n\n    # For Linux:\n    ~/.local/bin\n\n    # For Windows with Python version X.Y:\n    %APPDATA%\\Python\\PythonXY\\Scripts\n\nNext, choose installation method based on access to the Internet:\n\n- With direct Internet access:\n\n  - Install directly from PyPI:\n\n    .. code-block:: sh\n\n      pip install --user romt\n\n- On a disconnected Network:\n\n  - Download ``romt`` with dependencies (from Internet-connected machine):\n\n    .. code-block:: sh\n\n      mkdir romt\n      cd romt\n      pip download romt\n\n  - Transfer the ``romt`` directory to a machine on the disconnected network.\n\n  - Install from the ``romt`` directory:\n\n    .. code-block:: sh\n\n      cd romt\n      pip install --user --no-index --find-links . romt\n\nOption 3: Work with source\n--------------------------\n\nIf desired, the source may be cloned from Github and installed into a virtual\nenvironment.\n\n- Clone source:\n\n  .. code-block:: sh\n\n    git clone https://github.com/drmikehenry/romt\n    cd romt\n\n- Create and activate a virtual environment for your platform:\n\n  - Linux:\n\n  .. code-block:: sh\n\n    python -m venv envs/linux\n    . envs/linux/bin/activate\n\n  - Windows:\n\n  .. code-block:: sh\n\n    py -3 -m venv envs\\windows\n    envs\\windows\\Scripts\\activate.bat\n\n  - Mac:\n\n  .. code-block:: sh\n\n    python -m venv envs/darwin\n    . envs/darwin/bin/activate\n\n- Install Romt in development mode:\n\n  .. code-block:: sh\n\n    pip install -e \".[dev]\"\n\n- Optionally build an executable for your platform:\n\n  - Linux:\n\n  .. code-block:: sh\n\n    ./make-exec-linux.sh\n\n  - Windows:\n\n  .. code-block:: sh\n\n    make-exec-windows.bat\n\n  - Mac:\n\n  .. code-block:: sh\n\n    ./make-exec-darwin.sh\n\n  Find executables at::\n\n    dist/linux/romt\n    dist/windows/romt.exe\n    dist/darwin/romt\n\nRomt usage overview\n===================\n\nRomt is a Python-based command-line tool with several commands:\n\n- ``romt toolchain``: mirror and manage Rust toolchains.\n- ``romt rustup``: mirror and manage Rustup.\n- ``romt crate``: mirror and manage crate files from crates.io.\n- ``romt serve``: simple HTTP server for toolchains, rustup, and crates.\n\nSee ``romt --help`` for overall usage help.\n\nIn particular, note that ``romt --readme`` will display the contents of this\nREADME file for reference.\n\nQuick-start development-laptop server\n=====================================\n\nFor the development-laptop scenario, follow these steps to get a working server\nconfiguration with mirrored Rust content.\n\n- Ensure the laptop has Internet access.\n\n- Install Romt (as above).\n\n- Create area for mirrored artifacts:\n\n  .. code-block:: sh\n\n    mkdir mirror\n    cd mirror\n\n- Download latest stable toolchain:\n\n  .. code-block:: sh\n\n    # Change ``linux`` to ``windows`` or ``darwin`` as appropriate:\n    romt toolchain -v -s stable -t linux download\n\n- Download latest stable rustup version:\n\n  .. code-block:: sh\n\n    # Change ``linux`` to ``windows`` or ``darwin`` as appropriate:\n    romt rustup -v -s stable -t linux download\n\n- Setup crate mirror (one-time only):\n\n  .. code-block:: sh\n\n    romt crate init\n\n- Download full crates.io mirror:\n\n  .. code-block:: sh\n\n    romt crate -v --keep-going update\n\n  .. note::\n\n    A few crates have been removed from crates.io and are therefore not\n    available, so a few download failures (``403 Client Error: Forbidden``)\n    should be expected.  The ``--keep-going`` option allows romt to continue\n    in the face of these missing crates.\n\n    Currently (April 2022), versions of the following crates are missing:\n\n    - bork\n    - css-modules\n    - css-modules-macros\n    - deploy\n    - doccy\n    - etch\n    - glib-2-0-sys\n    - glue\n    - gobject-2-0-sys\n    - peek\n    - pose\n\n- Configure crate mirror to be served from localhost (one-time only):\n\n  .. code-block:: sh\n\n    romt crate config\n\n- Start Romt as a server on http://localhost:8000:\n\n  .. code-block:: sh\n\n    romt serve\n\n  .. note::\n\n    Leave the server running in this dedicated terminal.\n\nQuick-start disconnected-network server\n=======================================\n\nSetting up a server for the disconnected-network scenario is similar to that for\nthe development-laptop scenario above; explanations that overlap that scenario\nare omitted below.\n\n- On Internet-connected Export machine:\n\n  - Install Romt (as above).\n\n  - Create area for mirrored artifacts:\n\n    .. code-block:: sh\n\n      mkdir mirror\n      cd mirror\n\n  - Download latest stable toolchain and create ``toolchain.tar.gz``:\n\n    .. code-block:: sh\n\n      # Change ``linux`` to ``windows`` or ``darwin`` as appropriate:\n      romt toolchain -v -s stable -t linux download pack\n\n  - Download latest stable rustup version and create ``rustup.tar.gz``:\n\n    .. code-block:: sh\n\n      # Change ``linux`` to ``windows`` or ``darwin`` as appropriate:\n      romt rustup -v -s stable -t linux download pack\n\n  - Setup crate mirror (one-time only):\n\n    .. code-block:: sh\n\n      romt crate init\n\n  - Download and create ``crates.tar.gz``:\n\n    .. code-block:: sh\n\n      romt crate -v --keep-going export\n\n  - Transfer ``toolchain.tar.gz, ``rustup.tar.gz``, and ``crates.tar.gz`` to\n    Import machine.\n\n- On Disconnected network Import machine:\n\n  - Install Romt (as above).\n\n  - Create area for mirrored artifacts (one-time only):\n\n    .. code-block:: sh\n\n      mkdir mirror\n\n  - Place exported ``toolchain.tar.gz, ``rustup.tar.gz``, and ``crates.tar.gz``\n    files into this ``mirror/`` directory, and enter the directory at a prompt:\n\n    .. code-block:: sh\n\n      cd mirror\n\n  - Import toolchain and rustup:\n\n    .. code-block:: sh\n\n      romt toolchain -v unpack\n      romt rustup -v unpack\n\n  - Setup crate mirror (one-time only):\n\n    .. code-block:: sh\n\n      romt crate init-import\n\n  - Import ``crates.tar.gz``:\n\n    .. code-block:: sh\n\n      romt crate -v --keep-going import\n\n  - Configure crate mirror to be served from localhost (one-time only):\n\n    .. code-block:: sh\n\n      romt crate config\n\n  - Start Romt as a server on http://localhost:8000:\n\n    .. code-block:: sh\n\n      romt serve\n\n    .. note::\n\n      Leave the server running in this dedicated terminal.\n\nQuick-start client setup\n========================\n\nFollow these steps to configure Rust tooling for use with a mirror server on\nlocalhost using either Quick-start server configuration above.\n\n- Setup environment variables to point to the server.  By default, this will be\n  at http://localhost:8000; adjust all uses of ``localhost:8000`` below for\n  different server address:port combinations:\n\n  .. code-block:: sh\n\n    # For Linux/Mac:\n    export RUSTUP_DIST_SERVER=http://localhost:8000\n    export RUSTUP_UPDATE_ROOT=http://localhost:8000/rustup\n\n    # For Windows:\n    set RUSTUP_DIST_SERVER=http://localhost:8000\n    set RUSTUP_UPDATE_ROOT=http://localhost:8000/rustup\n\n  .. note::\n\n    These variables must be set in each terminal window before using the mirror\n    server.\n\n- Download the ``rustup-init`` installer for your platform from the Romt server\n  using the appropriate URL below, saving it into the current directory:\n\n  - Linux:\n    http://localhost:8000/rustup/dist/x86_64-unknown-linux-gnu/rustup-init\n\n  - Windows:\n    http://localhost:8000/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\n\n  - Mac:\n    http://localhost:8000/rustup/dist/x86_64-apple-darwin/rustup-init\n\n- Run the installer, accepting the defaults:\n\n  .. code-block:: sh\n\n    # Linux/Mac:\n    chmod +x rustup-init\n    ./rustup-init\n\n    # Windows\n    rustup-init\n\n- Ensure environment changes take place in current shell:\n\n  .. code-block:: sh\n\n    # For Linux/Mac:\n    source $HOME/.cargo/env\n\n    # For Windows:\n    PATH %USERPROFILE%\\.cargo\\bin;%PATH%\n\n- Try out some rustup commands::\n\n    rustup self update\n    rustup component add rust-src\n\n- Create the text file ``~/.cargo/config`` (``%USERPROFILE%\\.cargo\\config`` on\n  Windows) with the following content::\n\n    [source.crates-io]\n    registry = 'http://localhost:8000/git/crates.io-index'\n\n    # Disable cert revocation checking (necessary only on Windows):\n    [http]\n    check-revoke = false\n\n- Create a sample project to demonstrate crate usage:\n\n  .. code-block:: sh\n\n    cargo new rand_test\n    cd rand_test\n\n- Append the following line to ``Cargo.toml`` (just below the\n  ``[dependencies]`` line)::\n\n    rand = \"\"\n\n- Fetch ``rand`` and its dependencies::\n\n    cargo fetch\n\nUpgrading from Romt versions before 0.4.0\n=========================================\n\nWhen upgrading Romt, it's recommended to use the same version of Romt on both\nthe Internet-connected and offline hosts.\n\nRomt 0.4.0 changes how crate files are stored on-disk by default, in order to\nfix problems using a mirror with case-sensitive and case-insensitive filesystems\nsimultaneously.  Older Romt stores crates in directories based on the prefix of\neach crate's mixed-case name (e.g., ``MyCrate-0.1.0.crate`` would have a prefix\nof ``My/Cr/``).  This works for filesystems that are either case-sensitive or\ncase-insensitive, but it does not allow a tree of crate files created with one\ncase sensitivity to be accessed using the opposite case sensitivity.  Romt 0.4.0\nnow defaults to making prefix directories in lowercase, allowing a crate mirror\nto be used via arbitrary case sensitivity.\n\nFor backward compatibility, Romt 0.4.0 supports the use of existing mirror trees\ntransparently.  Newly created mirror trees will use lowercase prefixes by\ndefault (usable on all filesystems); mixed-case prefixes may be requested via\nthe ``--prefix=mixed`` flag (permitted only with case-sensitive filesystems).\n\nRomt 0.4.0 generates crate archives (``crates.tar.gz``) using mixed-case\nprefixes by default for backward compatibility, but it can also use lowercase\nprefixes for consistency with the preferred on-disk prefix format.  To\ndistinguish the prefix style, Romt 0.4.0 adds an ``ARCHIVE_FORMAT`` file to the\ncrate archive.  Format ``1`` is compatible with old Romt except for the addition\nof the ``ARCHIVE_FORMAT`` file.  Old Romt will see this file as an error and\nrefuse to unpack the archive by default, but processing will succeed using the\ninvocation ``romt crate unpack --keep-going``.  To avoid corrupting\nan existing crate mirror by unpacking a new crate archive with old Romt,\nnew archives currently default to format ``1``, but it's recommended to upgrade\nRomt to ensure proper processing of all crate archive formats.\n\nConverting crate mirror to lowercase prefixes\n---------------------------------------------\n\nTo convert an existing crate mirror (using mixed-case prefixes) to the new\nformat (using lowercase prefixes), the easiest method is to make a crate archive\nof the old mirror, then unpack the archive using the new format.  For example:\n\n.. code-block:: sh\n\n  # Pack up existing crate mirror into ``crates.tar.gz``:\n  romt crate -v --keep-going --start 0 --end master pack\n\n  # Rename the old crate tree out of the way:\n  mv crates crates.old\n\n  # Initialize for importing with a temporary index area:\n  romt crate --index index-tmp init-import\n\n  # Unpack crates from crates.tar.gz into new crates/ tree:\n  romt crate -v --index index-tmp unpack\n\n  # Verify conversion:\n  romt crate verify -v --start 0\n\n  # Cleanup:\n  rm -rf index-tmp crates.old\n\nNote that the above steps eliminate the unpredictable-case prefixes that are\ncreated with old Romt using a case-insensitive filesystem (such as on Windows).\n\nCommonalities\n=============\n\nRomt has some features that are shared across two or more commands.\n\nTARGET\n------\n\nThe TARGET specifies the platform for executables using standard tuple values\n(e.g., ``x86_64-unknown-linux-gnu``).  Any tuples supported by Rust are valid.\nTypical values are shown below; in parentheses are aliases Romt provides for\nease of typing these common targets:\n\n- ``x86_64-unknown-linux-gnu`` (alias ``linux``)\n- ``x86_64-pc-windows-msvc`` (alias ``windows``)\n- ``x86_64-apple-darwin`` (alias ``darwin``)\n\nTARGET values are given by the option ``--target TARGET``.  Multiple TARGET\noptions may be given, and each TARGET will be split at commas and whitespace to\nproduce a list of desired TARGET values, e.g.::\n\n  --target linux,windows --target 'darwin i686-pc-windows-msvc'\n\nA TARGET may be a literal ``all`` that expands to all known targets.  For ``romt\ntoolchain``, this list comes from the manifest file.  For ``romt rustup``, it\ncomes from a hard-code list within Romt; this is an ever-changing list that may\nbe out-of-date in an old release of Romt.\n\nA TARGET may be a literal ``*`` (asterisk) that expands to all targets with at\nleast one on-disk file for the given SPEC.\n\nSHA256 hashes\n-------------\n\n- Each file named ``{file}.sha256`` contains the SHA256 hash of the\n  corresponding file named ``{file}``.  Romt verifies all hashes to ensure file\n  integrity.\n\nCommand-line option details\n---------------------------\n\n- The option ``--num-jobs`` controls how many simultaneous download jobs Romt\n  may use at a time.  By default, ``--num-jobs=4``, which should be a\n  conservative value that won't stress the servers heavily.\n\n- The option ``--timeout`` controls the timeout in seconds for downloading.\n  A value of zero disables the timeout functionality altogether.\n\n- The option ``--assume-ok`` instructs Romt that all files already on-disk are\n  to be assumed OK; no hashes or signatures are checked for such files.\n\n``toolchain`` operation\n=======================\n\nThe ``toolchain`` operation deals with Rust toolchains.\n\nSPEC\n----\n\nEach toolchain is identified by a SPEC value which takes on one of the below\nforms::\n\n  {channel}\n  {channel}-{date}\n  {date}\n\nIn the above SPEC forms:\n\n- ``{channel}`` is typically one of the channel names ``nightly``, ``beta``,\n  ``stable``.  It may also be a version number of the form ``X.Y.Z`` or a\n  literal ``*`` (asterisk) as a wildcard that expands to the set\n  ``nightly,beta,stable``.\n\n- ``{date}`` is typically of the form ``YYYY-MM-DD`` (e.g., ``2020-04-30``).  It\n  may also be a literal ``*`` (asterisk) as a wildcard that expands to all\n  toolchain dates on-disk, or a literal ``latest`` that expands to the most\n  recent toolchain date on-disk.\n\n- Note that a SPEC value consisting of a single ``*`` represents a wildcarded\n  ``{date}`` value, not a ``{channel}`` value.  It is equivalent to ``*-*``\n  (making both ``{channel}`` and ``{date}`` wild).\n\n- Wildcards (``*`` and ``latest``) may not be used when downloading, and the\n  ``{channel}`` is always required.  The ``{date}`` field may be omitted to\n  download the most recent toolchain for the given channel.\n\n- SPEC values are given by the option ``--select SPEC``.  Multiple SPEC options\n  may be given, and each SPEC will be split at commas and whitespace to produce\n  a list of desired SPEC values.  E.g.::\n\n    --select nightly,stable --select beta-2020-01-23\n\nTARGET\n------\n\nSee the TARGET section of Commonalities above for details.\n\nManifest file\n-------------\n\nA manifest file provides details about a toolchain for a given SPEC, enumerating\nvalid combinations of toolchain components and targets.\n\nThe manifest filename is of the form ``channel-rust-{channel}.toml``, where\n``{channel}`` is one of ``nightly``, ``beta``, or ``stable``.  For ``stable``\nmanifests, the manifest is duplicated into a file of the form\n``channel-rust-{version}.toml``, where ``{version}`` is a version number of the\nform ``X.Y.Z``.\n\nDownloading\n-----------\n\nDownloading is requested via the ``romt toolchain download`` command.\n\nA toolchain is specified by a SPEC/TARGET pair.  Both must be given.\nWildcarding (via ``*`` or ``latest``) is not permitted, though the ``{date}``\nmay be omitted from the SPEC value, and TARGET may be the literal ``all`` to\ndownload all known targets for the SPEC.\n\nFiles are downloaded from ``https://static.rust-lang.org/dist`` by default; this\nmay be changed via the option ``--url <URL>``.\n\nFiles are downloaded to the destination directory ``dist/`` by default; this\nmay be changed via the option ``--dest DEST``.\n\nWhen downloaded, the toolchain will be stored on-disk in the following layout::\n\n  dist/\n    YYYY-MM-DD/\n      channel-rust-{channel}.toml\n      channel-rust-{channel}.toml.asc\n      channel-rust-{channel}.toml.sha256\n      {component}-{channel}.tar.xz\n      {component}-{channel}.tar.xz.asc\n      {component}-{channel}.tar.xz.sha256\n      {component}-{channel}-{target}.tar.xz\n      {component}-{channel}-{target}.tar.xz.asc\n      {component}-{channel}-{target}.tar.xz.sha256\n\nWhere:\n\n- ``YYYY-MM-DD`` is the toolchain date.\n- ``{channel}`` is one of ``nightly``, ``beta``, or ``stable``.\n- ``{component}`` represents a toolchain component (e.g., ``rust``, ``cargo``,\n  ``rust-src``).\n- ``{target}`` represents a target tuple (e.g., ``x86_64-unknown-linux-gnu``).\n  Components lacking a ``{target}`` are common across all targets; currently\n  this is limited to the ``rust-src`` component.\n\n- Each file named ``{file}.asc`` contains the Gnu Privacy Guard (GPG) digital\n  signature of the corresponding file named ``{file}``.  Checking signature\n  requires GPG; if it is not installed, signature files won't be checked but\n  they will still be transferred.  The verification key is available at\n  https://static.rust-lang.org/rust-key.gpg.ascii; this key is built into Romt\n  itself for offline use.\n\nFor example, after downloading with this command:\n\n.. code-block:: sh\n\n  romt toolchain download --spec nightly-2020-04-30 --target linux\n\nThe tree would contain (among other files)::\n\n  dist/\n    2020-04-30/\n      channel-rust-nightly.toml\n      channel-rust-nightly.toml.asc\n      channel-rust-nightly.toml.sha256\n      rust-src-nightly.tar.xz\n      rust-src-nightly.tar.xz.asc\n      rust-src-nightly.tar.xz.sha256\n      rust-nightly-x86_64-unknown-linux-gnu.tar.xz\n      rust-nightly-x86_64-unknown-linux-gnu.tar.xz.asc\n      rust-nightly-x86_64-unknown-linux-gnu.tar.xz.sha256\n\nFor convenience, the most recently released toolchain for each channel\n(``nightly``, ``beta``, or ``stable``) will be copied directly into the\n``dist/`` directory.  This is especially helpful for ``stable`` and ``beta``\nbuilds so that the date of the most recent release need not be known in advance.\nFor ``stable`` manifests, the version-specific copy of the manifest is placed\ninto ``dist/`` as well.\n\nFor example, as of 2020-05-06, the most recent manifests were for SPEC values\nof:\n\n- ``nightly-2020-05-06``\n- ``beta-2020-04-26``\n- ``stable-2020-04-23`` (version ``1.43.0``)\n\nOn that date, performing a download with ``--target linux`` and ``--spec\nnightly,beta,stable`` would yield the following downloaded manifests::\n\n  dist/\n    channel-rust-beta.toml\n    channel-rust-nightly.toml\n    channel-rust-stable.toml\n    channel-rust-1.43.0.toml\n    2020-04-23/\n      channel-rust-stable.toml\n      channel-rust-1.43.0.toml\n    2020-04-26/\n      channel-rust-beta.toml\n    2020-05-06/\n      channel-rust-nightly.toml\n\nWhere the dateless manifests housed directly in ``dist/`` are copies of those\nfrom the dated directories.\n\nBecause the contents of dateless manifests are subject to change, cached copies\nof these files are re-downloaded during a ``download`` command.\n\nPacking/unpacking\n-----------------\n\nDownloaded toolchains may be packed into an ``ARCHIVE`` file using the ``romt\ntoolchain pack`` command.\n\nThe archive file may be moved to another machine and unpacked using the ``romt\ntoolchain unpack`` command.\n\nFor both ``pack`` and ``unpack``, the ``ARCHIVE`` file is named\n``toolchain.tar.gz`` by default; this may be changed via the option ``--archive\nARCHIVE``.\n\nAn ``unpack`` command automatically performs a ``verify`` (described below).  In\naddition, dateless manifests are reconstructed automatically during ``unpack``\nas part of a fixup operation (described below).\n\nAn archive file contains files from dated subdirectories only.  Given the\nexample above for the ``download`` command, the ``ARCHIVE`` would contain only\nthese manifests::\n\n  dist/\n    2020-04-23/\n      channel-rust-stable.toml\n    2020-04-26/\n      channel-rust-beta.toml\n    2020-05-06/\n      channel-rust-nightly.toml\n\nFixup\n-----\n\nEach toolchain identified by a SPEC has a canonical manifest file stored in the\ntoolchain's dated directory.  This file has a path of the form\n``YYYY-MM-DD/channel-rust-{channel}.toml``, where ``{channel}`` is one of the\nchannel names ``nightly``, ``beta``, or ``stable``.\n\nThe \"fixup\" operation is responsible for making any necessary copies of each\ncanonical manifest in the ``dist/`` tree.  If the given on-disk manifest is\nfound in the latest dated directory, it will be copied into the top-level\n``dist/`` directory.  In addition, for each SPEC on the ``stable`` channel a\nversion-specific manifest file of the form ``channel-rust-X.Y.Z.toml`` will be\ncopied into the dated directory and the top-level ``dist/`` directory.\n\nA fixup operation may be explicitly requested via the ``romt toolchain fixup``\ncommand, though that should rarely be required because it is automatically\nperformed after any ``download`` or ``unpack`` command.\n\nConsider the example above for the ``download`` command; it would generate an\narchive containing only these canonical manifests::\n\n  dist/\n    2020-04-23/\n      channel-rust-stable.toml\n    2020-04-26/\n      channel-rust-beta.toml\n    2020-05-06/\n      channel-rust-nightly.toml\n\nThe ``fixup`` command would copy these manifests to create::\n\n  dist/\n    channel-rust-beta.toml\n    channel-rust-nightly.toml\n    channel-rust-stable.toml\n    channel-rust-1.43.0.toml\n    2020-04-23/\n      channel-rust-stable.toml\n      channel-rust-1.43.0.toml\n    2020-04-26/\n      channel-rust-beta.toml\n    2020-05-06/\n      channel-rust-nightly.toml\n\nListing downloaded toolchains\n-----------------------------\n\nThe ``romt toolchain list`` command prints information about on-disk toolchains\nfor the provided SPEC values.  Wildcards are permitted.\n\nFor example, the most recent on-disk ``stable`` release can be shown via:\n\n.. code-block:: sh\n\n  romt toolchain list --select 'stable-latest'\n\nWith resulting output::\n\n  stable-2020-04-23(1.43.0)    targets[1/82]    packages[12/311]\n    x86_64-unknown-linux-gnu\n\nTo suppress information about targets, use ``--quiet``:\n\n.. code-block:: sh\n\n  romt toolchain list --select 'stable-latest' --quiet\n\nWith resulting output::\n\n  stable-2020-04-23(1.43.0)    targets[1/82]    packages[12/311]\n\nWith wildcards, Romt can provide a listing of all available toolchains for a\ngiven channel:\n\n.. code-block:: sh\n\n  romt toolchain list -s 'nightly-*'\n\nWith example resulting output::\n\n  nightly-2020-05-06(1.45.0)   targets[1/84]    packages[12/316]\n    x86_64-unknown-linux-gnu\n  nightly-2020-05-04(1.45.0)   targets[1/84]    packages[12/316]\n    x86_64-unknown-linux-gnu\n  nightly-2020-04-30(1.45.0)   targets[1/84]    packages[12/313]\n    x86_64-unknown-linux-gnu\n\nAfter toolchain importation, it may be useful to list toolchains for each\nchannel for reference:\n\n.. code-block:: sh\n\n  romt toolchain list -s 'nightly-*' > nightly.txt\n  romt toolchain list -s 'beta-*' > beta.txt\n  romt toolchain list -s 'stable-*' > stable.txt\n\n``toolchain`` scenarios\n-----------------------\n\nFor the laptop scenario, only the ``download`` command is needed.  After\ndownloading a toolchain, it will be available for serving via ``romt serve``\n(or other means).  For example, to download the latest stable toolchain for\nLinux:\n\n.. code-block:: sh\n\n    romt toolchain download --select stable --target linux\n\nFor the disconnected network scenario, toolchains are downloaded and packed on\nan Internet-connected Export machine, then unpacked on an Import machine, e.g.:\n\n- On the Export machine:\n\n  - First, download the latest stable toolchain for Linux into a local ``dist/``\n    directory and pack it into an archive for transfer:\n\n    .. code-block:: sh\n\n      romt toolchain download pack --select stable --target linux\n\n  - Transfer the resulting ``toolchain.tar.gz`` file onto the Import machine.\n\n- On the Import machine:\n\n  - Unpack the archive into a local ``dist/`` directory:\n\n    .. code-block:: sh\n\n      romt toolchain unpack\n\nMiscellaneous commands\n----------------------\n\nA few additional commands are provided for ``romt toolchain``.\n\n``romt toolchain fetch-manifest`` is the same as ``download``, but only the\nmanifest is downloaded.\n\n``romt toolchain verify`` validates the SHA256 hashes and GPG signatures of\non-disk toolchains.  It is implicitly done as part of ``download`` and\n``unpack``.\n\n``romt toolchain all-targets`` prints a list of all known targets mentioned in\nthe given SPEC.\n\nCommand-line option details\n---------------------------\n\nThe option ``--warn-signature`` instructs Romt to treat signature failures as\nwarnings instead of as failures.  Signature files will still be downloaded and\ntransferred.  This might be helpful in case the signing key changes.\n\nThe option ``--no-signature`` prevents both downloading and checking of GPG\nsignature files (``*.asc``).  This is mainly for testing.\n\n``rustup`` operation\n====================\n\nThe ``rustup`` operation deals with the Rustup toolchain multiplexer.\n\nSPEC\n----\n\nEach rustup version is identified by a SPEC value which takes on one of the\nbelow forms::\n\n  {version}\n  stable\n  latest\n  *\n\nIn the above SPEC forms:\n\n- ``{version}`` is a version number of the form ``X.Y.Z``.\n\n- A literal ``stable`` refers to the current stable version given in the\n  ``release-stable.toml`` file (described later).\n\n- A literal ``*`` (asterisk) is a wildcard that expands to all on-disk versions.\n\n- A literal ``latest`` is a wildcard that expands to the latest on-disk version.\n\n- Wildcards (``*`` and ``latest``) may not be used when downloading, but\n  ``stable`` is permitted.\n\n- SPEC values are given by the option ``--select SPEC``.  Multiple SPEC options\n  may be given, and each SPEC will be split at commas and whitespace to produce\n  a list of desired SPEC values.  E.g.::\n\n    --select stable,1.20.0 --select '1.19.0 1.20.1'\n\nTARGET\n------\n\nSee the TARGET section of Commonalities above for details.\n\nDownloading\n-----------\n\nDownloading is requested via the ``romt rustup download`` command.\n\nA rustup executable is specified by a SPEC/TARGET pair.  Both must be given.\nWildcarding (via ``*`` or ``latest``) is not permitted, though SPEC may be the\nliteral ``stable`` to download the latest stable release, and TARGET may be the\nliteral ``all`` to download all known targets for the SPEC.\n\nFiles are downloaded from ``https://static.rust-lang.org/rustup`` by default;\nthis may be changed via the option ``--url <URL>``.\n\nFiles are downloaded to the destination directory ``rustup/`` by default;\nthis may be changed via the option ``--dest DEST``.\n\nWhen downloaded, files will be stored on-disk in the following layout::\n\n  rustup/\n    release-stable.toml\n    archive/\n      {version}/\n        {target}/\n          {rustup}\n          {rustup}.sha256\n    dist/\n      {target}/\n\nWhere:\n\n- ``release-stable.toml`` is a configuration file that indicates the most recent\n  stable version of rustup.\n- ``{version}`` is a rustup version of the form ``X.Y.Z``.\n- ``{target}`` represents a target tuple (e.g., ``x86_64-unknown-linux-gnu``).\n- ``{rustup}`` is the name of the rustup executable.  On most platforms, this is\n  ``rustup-init``; on Windows, it's ``rustup-init.exe``.\n\nFor example, if version 1.21.1 were the most recent stable version, after\ndownloading with this command:\n\n.. code-block:: sh\n\n  romt rustup download --spec stable --target linux\n\nThe tree would contain::\n\n  rustup/\n    release-stable.toml\n    dist/\n      x86_64-unknown-linux-gnu/\n        rustup-init\n        rustup-init.sha256\n    archive/\n      1.21.1/\n        x86_64-unknown-linux-gnu/\n          rustup-init\n          rustup-init.sha256\n\nFor convenience, all targets found in the most recently released rustup version\nwill be copied directly into the ``rustup/dist/`` directory.\n\nBecause the ``release-stable.toml`` file is subject to change, this file will be\nre-downloaded during a ``download`` command when SPEC is ``stable``.\n\nPacking/unpacking\n-----------------\n\nDownloaded rustup executables may be packed into an ``ARCHIVE`` file using the\n``romt rustup pack`` command.\n\nThe archive file may be moved to another machine and unpacked using the\n``romt rustup unpack`` command.\n\nFor both ``pack`` and ``unpack``, the ``ARCHIVE`` file is named\n``rustup.tar.gz`` by default; this may be changed via the option ``--archive\nARCHIVE``.\n\nAn ``unpack`` command automatically performs a ``verify`` (described below).  In\naddition, the ``rustup/dist/`` tree is created automatically during ``unpack``\nas part of a fixup operation (described below).\n\nAn archive file contains files from ``rustup/archive/{version}`` subdirectories\nonly.  Given the example above for the ``download`` command, the ``ARCHIVE``\nwould contain only these files::\n\n  rustup/\n    archive/\n      1.21.1/\n        x86_64-unknown-linux-gnu/\n          rustup-init\n          rustup-init.sha256\n\nFixup\n-----\n\nEach rustup version is stored in a directory of the form\n``rustup/archive/{version}``.\n\nThe \"fixup\" operation is responsible for copying the most recent on-disk\nrustup version to ``rustup/dist/``, and for updating\n``rustup/release-stable.toml`` to contain the most recent version number.\n\nA fixup operation may be explicitly requested via the ``romt rustup fixup``\ncommand, though that should rarely be required because it is automatically\nperformed after any ``download`` or ``unpack`` command.\n\nConsider the example above for the ``download`` command that generated the\nfollowing archive contents::\n\n  rustup/\n    archive/\n      1.21.1/\n        x86_64-unknown-linux-gnu/\n          rustup-init\n          rustup-init.sha256\n\nAssuming this is the latest on-disk version, the ``fixup`` command would copy\n``rustup/archive/1.21.1`` to ``rustup/archive`` as shown below, and it would\ncreate ``release-stable.toml`` to point to version ``1.21.1``::\n\n  rustup/\n    release-stable.toml\n    archive/\n      1.21.1/\n        x86_64-unknown-linux-gnu/\n          rustup-init\n          rustup-init.sha256\n    dist/\n      x86_64-unknown-linux-gnu/\n        rustup-init\n        rustup-init.sha256\n\nListing downloaded rustup versions\n----------------------------------\n\nThe ``romt rustup list`` command prints information about on-disk rustup\nversions for the provided SPEC values.  Wildcards are permitted.\n\nFor example, the most recent on-disk version can be shown via:\n\n.. code-block:: sh\n\n  romt rustup list --select 'latest'\n\nWith resulting output::\n\n  List: 1.21.1\n  1.21.1   targets[1]\n    x86_64-unknown-linux-gnu\n\nTo suppress information about targets, use ``--quiet``:\n\n.. code-block:: sh\n\n  romt rustup list --select 'latest' --quiet\n\nWith resulting output::\n\n  1.21.1\n\nWith wildcards, Romt can provide a listing of all available rustup versions:\n\n.. code-block:: sh\n\n  romt rustup list -s '*'\n\nWith example resulting output::\n\n  List: 1.21.1\n  1.21.1   targets[1]\n    x86_64-unknown-linux-gnu\n  List: 1.21.0\n  1.21.0   targets[1]\n    x86_64-unknown-linux-gnu\n  List: 1.20.0\n  1.20.0   targets[1]\n    x86_64-unknown-linux-gnu\n\n``rustup`` scenarios\n--------------------\n\nFor the laptop scenario, only the ``download`` command is needed.  After\ndownloading a rustup executable, it will be available for serving via ``romt\nserve`` (or other means).  For example, to download the latest stable rustup for\nLinux:\n\n.. code-block:: sh\n\n    romt rustup download --select stable --target linux\n\nFor the disconnected network scenario, rustup versions are downloaded and packed\non an Internet-connected Export machine, then unpacked on an Import machine,\ne.g.:\n\n- On the Export machine:\n\n  - First, download the latest stable rustup for Linux into a local ``rustup/``\n    directory and pack it into an archive for transfer:\n\n    .. code-block:: sh\n\n      romt rustup download pack --select stable --target linux\n\n  - Transfer the resulting ``rustup.tar.gz`` file onto the Import machine.\n\n- On the Import machine:\n\n  - Unpack the archive into a local ``rustup/`` directory:\n\n    .. code-block:: sh\n\n      romt rustup unpack\n\nMiscellaneous commands\n----------------------\n\nA few additional commands are provided for ``romt rustup``.\n\n``romt rustup verify`` validates the SHA256 hashes of on-disk rustup\nexecutables.  It is implicitly done as part of ``download`` and ``unpack``.\n\n``romt rustup all-targets`` prints a list of all known targets in Romt's\nhard-coded list.\n\n``crate`` operation\n====================\n\nThe ``crate`` operation deals with crates (community-written packages of Rust\nsource code) from the server https://crates.io.\n\nCrates.io INDEX\n---------------\n\nIndividual crates are indexed via a Git repository called INDEX.  By default,\nINDEX is cloned from https://github.com/rust-lang/crates.io-index; this may be\nchanged with the option ``--index-url INDEX_URL``.\n\nThe INDEX contains one text file for each crate name, where each line of the\nfile is a JSON-formatted description of a single version of that crate.  When a\nnew crate file is uploaded, another line is appended to the file and a new\ncommit is made.\n\nThe on-disk INDEX directory defaults to ``git/crates.io-index``; it may be\nchanged via the option ``--index INDEX``.\n\nINDEX branches\n--------------\n\nINDEX is essentially a standard Git clone with some additional conventions.\nIt uses the following branches:\n\n- ``remotes/origin/master``\n\n    The ``master`` branch of the ``origin`` repository.  Typically this is the\n    repository on Github given by the default value of INDEX_URL.\n\n- ``master``\n\n    The local ``master`` branch.  This is based on ``remotes/origin/master``,\n    with possible changes to the ``config.json`` file (described later).\n\n- ``origin_master``\n\n    A local convenience branch that tracks ``remotes/origin/master``.  This\n    makes it easy to push ``master`` and ``remotes/origin/master`` to a server.\n\n- ``mark``\n\n    A branch for tracking progress (detailed later).\n\n- ``working``\n\n    A branch checked out to the working tree and used for merging and\n    modifying repository content; changes are then published atomically to the\n    ``master`` branch to avoid race conditions.\n\nINDEX file structure\n--------------------\n\nTo keep the number of files in each directory down to a manageable size, the\ntext files for each crate are distributed into subdirectories based on the first\nfew characters of the crate's name.  The path within INDEX for a crate named\n``{crate}`` is given by ``{prefix}/{crate}``, where ``{prefix}`` is calculated\nbased on the length of the crate's name; variations exist for 1-, 2-, 3-, and\n4-or-more characters:\n\n=========  =================  =========================\n{prefix}   crate name length  crate name (as lowercase)\n=========  =================  =========================\n1          1                  a\n2          2                  ab\n3/a        3                  abc\nab/cd      4 or more          abcd*\n=========  =================  =========================\n\nThe directory names are based on the crate name converted to lowercase so that\nthe repository may be cloned on case-insensitive filesystems (such as on\nWindows).\n\nFor example, the file for the ``serde`` crate would be found by default at\n``git/crates.io-index/se/rd/serde``.\n\nIn addition to per-crate files, there is a ``config.json`` file in the INDEX\nthat configures the URL for downloading crate files.\n\nINDEX range\n-----------\n\nA RANGE is defined by a START commit and an END commit.  The changes made to the\nINDEX between START and END represent the list of crates in RANGE that were\nuploaded to crates.io.\n\nBecause START and END represent Git commits, any valid Git commit reference may\nbe used.  In addition, START may be given the value ``0`` when there is no\nstarting commit, in which case all commits through END are in RANGE.\n\nThe START commit is selected via the option ``--start START``.\n\nThe END commit is selected via the option ``--end END``.\n\nIn general, START and END must both be valid commits in the INDEX; but because\nGit branches can't refer to an empty commit, there is no way to initialize a\nbranch name to a value (like ``0``) that means \"the start of the repository\".\nTo handle this case, the option ``--allow-missing-start`` indicates that Romt\nshould treat an unknown branch name for START to be the same as ``0``.\n\nCrate files\n-----------\n\nCrate files (``*.crate``) are tarballs containing Rust source code.  Filenames\nfollow the naming convention ``{crate}-{version}.crate``, where ``{crate}`` is\nthe name of the crate (e.g., ``serde``) and ``{version}`` is the crate's version\nnumber in the form ``X.Y.Z``.\n\nThe URL for a given crate file is given by the template CRATES_URL.  The default\nvalue is https://static.crates.io/crates/{crate}/{crate}-{version}.crate; it may\nbe changed with the option ``--crates-url CRATES_URL``.\n\nFor each crate, the CRATES_URL template will be expanded by replacing\n``{crate}`` with the name of the crate and ``{version}`` with its version.  For\nexample, the default URL for version ``1.0.99`` of the ``serde`` crate would be:\nhttps://static.crates.io/crates/serde/serde-1.0.99.crate\n\nAs an alternative, to use the crate.io API for downloading crates, set\nCRATES_URL to: https://crates.io/api/v1/crates/{crate}/{version}/download\n\nCRATES_ROOT\n-----------\n\nCrate files (``*.crate``) are stored on-disk in a directory tree rooted at\nCRATES_ROOT, which defaults to ``crates/`` and may be changed via the option\n``--crates CRATES_ROOT``.\n\nAs with the INDEX, crate files are distributed into subdirectories based on the\nfirst few characters of the crate's name.  By default, the prefixes are\nlowercase (unless forced to mixed-case via ``romt crate --prefix=mixed``).  Romt\nversions before 0.4.0 used mixed-case prefixes exclusively, as the author did\nnot know how to compute lowercase prefixes in nginx rules (this is now solved\nusing Perl with nginx).  Mixed-case prefixes caused problems when accessing a\ncrates mirror via both case-sensitive and case-insensitive shares\nsimultaneously, so lowercase prefixes are now preferred.\n\n=========  =================  ==========\n{prefix}   crate name length  crate name\n=========  =================  ==========\n1          1                  a\n2          2                  ab\n3/a        3                  abc\nab/cd      4 or more          abcd*\n=========  =================  ==========\n\nA crate with name ``{crate}`` and version ``{version}`` is found within\nCRATES_ROOT at ``{prefix}/{crate}/{crate}-{version}.crate``.\n\nFor example, version 1.0.99 of the ``serde`` crate would be found by default at\n``crates/se/rd/serde/serde-1.0.99.crate``.\n\nInitializing\n------------\n\nThe INDEX and CRATES_ROOT areas must be initialized before use.  The\ninitialization method depends on the use.\n\nThe ``romt crate init`` command creates the INDEX and CRATES_ROOT areas and\nprepares the INDEX as a Git repository with remote named ``origin`` that points\nto a Git remote given by INDEX_URL.  This is suitable for the laptop scenario\nand for the Export machine in the disconnected network scenario.\n\nThe ``romt crate init-import`` command is for use on the Import machine in the\ndisconnected scenario.  It's similar to ``init``, but instead of configuring\nINDEX's ``origin`` remote to INDEX_URL, it configures ``origin`` to be a local\nbundle file at BUNDLE_PATH that conveys INDEX commits sent from the Export\nmachine.  Subsequent ``unpack`` commands will query the ``url`` key for the\n``origin`` remote within INDEX to determine BUNDLE_PATH.  The default value of\nBUNDLE_PATH is ``origin.bundle`` within the INDEX directory; this may be changed\nvia ``--bundle-path BUNDLE_PATH``.\n\nBy default, crate files are stored on-disk using lowercase prefixes.  Using\n``romt crate --prefix=mixed`` forces the use of mixed-case prefixes (as used in\nRomt before version 0.4.0).  Lowercase prefixes are recommended.  Romt will not\npermit the use of ``--prefix=mixed`` when using case-insensitive filesystems\n(such as on Windows) to avoid creating unpredictable-case prefixes due to case\naliasing issues.\n\nRomt (as of version 0.4.0) creates a ``config.toml`` file in CRATES_ROOT as an\nimplementation detail to aid in the transition to lowercase crate prefixes;\nusers should generally not have to interact with it.  Future versions of Romt\nmay remove this configuration file and use lowercase prefixes exclusively.\n\nconfig\n------\n\nAfter initialization via ``init`` or ``init-import``, the local INDEX repository\nwill be properly setup.  If the INDEX contents will be served to clients\ndirectly (e.g., for the laptop scenario or the Import machine in the offline\nnetwork scenario), it must be configured for the URL of the offline server by\nediting the file ``config.json`` within the top-level directory of INDEX.  The\ndefault contents of ``config.json`` (as found on Github) are::\n\n  {\n    \"dl\": \"https://crates.io/api/v1/crates\",\n    \"api\": \"https://crates.io\"\n  }\n\nThe ``dl`` key in particular informs ``cargo`` and other INDEX consumers how to\ndownload crate files cataloged by INDEX.\n\nThe ``romt crate config`` command edits ``config.json`` based on the value of\nSERVER_URL; this defaults to ``http://localhost:8000`` (as used by ``romt\nserve``, described later).  It may be changed via the option ``--server-url\nSERVER_URL``.\n\nGiven SERVER_URL, the ``dl`` key will be set to::\n\n  SERVER_URL/crates/{crate}/{crate}-{version}.crate\n\nBy default, this will be::\n\n  http://localhost:8000/crates/{crate}/{crate}-{version}.crate\n\nRust tooling (e.g., Cargo) will start with the value of the ``dl`` key and\nsubstitute ``{crate}`` with the name of the crate and ``{version}`` with the\ncrate's version number to form the URL for a given crate file.\n\nOnly the SERVER_URL portion of the ``dl`` key is currently configurable; the\nrest of the URL is hard-coded to match the conventions of ``romt serve``.\nHowever, any changes manually committed to ``config.json`` will be preserved by\nsubsequent Romt operations.\n\nChanges to ``config.json`` are committed to the local ``working`` branch, and\nultimately published to the local ``master`` branch (via the ``mark`` command).\nAs upstream commits are merged into ``master``, Romt will ensure that the local\n``config.json`` changes take precedence over possible upstream changes.\n\n``mark``\n--------\n\nRomt uses a branch named ``mark`` as a commit placeholder within INDEX.  It\ntracks progress through the INDEX, marking one operation's END commit for use as\nthe next operation's START commit.\n\nThe ``romt crate mark`` command sets both the ``mark`` branch and the ``master``\nbranch to the commit indicated by END.  START defaults to ``mark`` such that\nsubsequent operations pick up where previous ones left off.  END defaults to\n``HEAD`` (generally the ``working`` branch) such that RANGE includes all\nunprocessed commits.\n\nNote that working copy modifications (merges and edits) are done on the\n``working`` branch.  Changes won't be visible on the ``master`` branch until\nafter the ``mark`` command is executed, ensuring clients won't see partially\ncomplete modifications while the repository is being updated.\n\nPulling INDEX commits\n---------------------\n\nBefore downloading crate files, the INDEX must be updated.  The ``romt crate\npull`` command fetches the latest commits from INDEX's ``origin`` remote into\nthe ``remotes/origin/master`` branch, then marks this location in the local\nbranch ``origin_master`` for convenience of reference.  The fetched commits are\nthen merged into the HEAD branch (typically ``working``), preserving any local\nmodifications that may have been made to ``config.json``.  If the merge\noperation fails, the working copy is reset to ``remotes/origin/master`` and any\nlocal changes to ``config.json`` that may have been present in ``HEAD`` before\nthe pull are re-applied.\n\nNote: In Romt version 0.1.3 and earlier, ``HEAD`` defaulted to ``master``,\nleaving a small race window where partial modifications to the repository could\nbe visible to clients (e.g., ``master`` might include mention of a crate that\nhasn't yet been downloaded).  Therefore, Romt now defaults to using the branch\n``working`` for merging and other modifications to the repository.  These\nchanges won't be visible on ``master`` until the ``mark`` command is invoked.\nAt each ``pull`` operation, Romt will upgrade the repository to use a\n``working`` branch if ``HEAD`` is not set to ``working`` and the ``working``\nbranch does not yet exist.  To avoid this, pre-create a ``working`` branch (with\narbitrary content) before executing a ``pull`` command, and Romt will not switch\n``HEAD`` to ``working``.\n\nDownloading\n-----------\n\nDownloading of crate files is requested via the ``romt crate download`` command.\n\nThe subset of crate files to download is determined by the RANGE of commits\n(from START through END) in the INDEX.  Each file is downloaded from the\nupstream location indicated by CRATES_URL as explained previously.  As part of\ndownloading, Romt verifies the SHA256 hash of each crate against the value\nstored in INDEX to ensure file integrity.\n\nEach crate file is stored below CRATES_ROOT using the prefix mechanism described\nearlier.\n\nSometimes individual crate files are removed from the upstream mirror.  Romt\nwarns about such failures and continues with the rest of the crates in the\nRANGE.  After attempting all crates in RANGE, by default Romt will abort if\nany crates failed to download.  The option ``--keep-going`` allows Romt to\ncontinue past download failures to subsequent steps (e.g., packing an archive\nfile).\n\nPacking/unpacking\n-----------------\n\nThe ``romt crate pack`` command creates a Git bundle file of the commits in\nRANGE, then packs the bundle file along with the downloaded crate files included\nin RANGE into an ``ARCHIVE`` file.\n\nThe archive file may be moved to another machine and unpacked using the\n``unpack`` command.\n\nFor both ``pack`` and ``unpack``, the ``ARCHIVE`` file is named\n``crates.tar.gz`` by default; this may be changed via the option ``--archive\nARCHIVE``.\n\nFor the ``pack`` command, a Git bundle file is written to disk at BUNDLE_PATH\nbefore being inserted into the ARCHIVE.  The default value of BUNDLE_PATH is\n``origin.bundle`` within the INDEX directory; this may be changed via\n``--bundle-path BUNDLE_PATH``.\n\nAn ``unpack`` command extracts the Git bundle file and all crate files, placing\nthe bundle at the BUNDLE_PATH value specified with the ``init-import`` command.\nCrate files are unpacked into CRATES_ROOT.  Note that crate files are not\nverified automatically as part of the ``unpack`` operation.\n\nAn archive file uses the directory structure of CRATES_ROOT for crate files and\nthe default on-disk location for the Git, and it places the Git bundle file into\nthe archive with the hard-coded path ``git/crates.io-index/origin.bundle``.  For\nexample::\n\n  git/crates.io-index/origin.bundle\n  crates/3/n/num/num-0.0.1.crate\n  crates/gl/ob/glob/glob-0.0.1.crate\n  crates/se/mv/semver/semver-0.1.0.crate\n  crates/uu/id/uuid/uuid-0.0.1.crate\n\nVerify\n------\n\nThe ``romt crate verify`` command checks the integrity of each downloaded crate\nincluded in RANGE within INDEX.  Using the SHA256 hash values contained in INDEX\nfor each crate file, Romt ensures that the downloaded crate files have not been\ncorrupted and that no files in RANGE are missing.\n\n``update``, ``export``, and ``import``\n--------------------------------------\n\nFor each of the three main use cases, there is short command name that implies\nthe needed steps:\n\n- ``update`` is the same as ``pull download mark``.  This is useful for the\n  laptop scenario.\n\n- ``export`` is the same as ``pull download pack mark``.  This is useful for the\n  Export machine in the disconnected network scenario.\n\n- ``import`` is the same as ``unpack pull verify mark``.  This is useful for the\n  Import machine in the disconnected network scenario.\n\nListing downloaded crate files\n------------------------------\n\nThe ``romt crate list`` command prints the filename for each crate\nincluded in RANGE within INDEX, independent of whether those crate files have\nbeen downloaded.\n\nFor example, to see what new crates are available, first ``pull`` the latest\nINDEX and then ``list``:\n\n.. code-block:: sh\n\n  romt crate pull list\n\nSample output might be::\n\n  pull...\n  list...\n  gc-0.3.4.crate\n  brs-0.2.0.crate\n  cxx-0.3.1.crate\n  irc-0.14.0.crate\n  scd-0.1.3.crate\n  [...]\n\n``crate`` scenarios\n--------------------\n\nFor the laptop scenario, only the ``update`` command is needed, after which\ncrates will be available for serving via ``romt serve`` (or other means).  For\nexample, to download the latest crates:\n\n.. code-block:: sh\n\n    romt crate update\n\nFor the disconnected network scenario, crate versions are downloaded and packed\non an Internet-connected Export machine, then unpacked on an Import machine,\ne.g.:\n\n- On the Export machine:\n\n  - First, download the latest crates and pack them into ``crates.tar.gz``:\n\n    .. code-block:: sh\n\n      romt crate export\n\n  - Transfer the resulting ``crates.tar.gz`` file onto the Import machine.\n\n- On the Import machine:\n\n  - Unpack the archive:\n\n    .. code-block:: sh\n\n      romt crate import\n\n``serve`` operation\n===================\n\nThe ``serve`` operation runs a local HTTP server exposing toolchain, rustup, and\ncrate artifacts.\n\n``serve`` URL\n-------------\n\nBy default, ``romt serve`` listens at the following URL::\n\n  http://localhost:8000\n\nTo use ``http://ADDR:PORT``, use the switches ``--bind ADDR`` and/or ``--port\nPORT``.\n\n``serve`` directory layout\n--------------------------\n\n``romt serve`` expects the current working directory (``$PWD``) to contain all\nartifacts being served.  Artifacts must be laid out in their default locations\ndescribed elsewhere, as follows::\n\n    $PWD/\n      dist/\n      rustup/\n      crates/\n      git/\n        crates.io-index/\n\nURLs of the form ``http://ADDR:PORT/{path}`` generally map directly to\n``$PWD/{path}``; exceptions are noted below.\n\nURLs with paths below ``/crates/`` are expected to be of the following form::\n\n  http://ADDR:PORT/crates/{crate}/{crate}-{version}.crate\n\n``romt serve`` will rewrite the URL to insert the expected ``{prefix}`` used in\nCRATES_ROOT, effectively transforming the URLs to::\n\n  http://ADDR:PORT/crates/{prefix}/{crate}/{crate}-{version}.crate\n\nURLs with paths below ``/git/`` refer to Git repositories.  Romt uses\n``git-http-backend`` as distributed with Git to serve these repositories.\nFor this purpose, ``romt serve`` uses a ``cgi-bin/`` directory in the current\nworking directory to interface via CGI with ``git-http-backend``.\n\nUpon launching ``romt serve``, Romt searches for one of the following files in\n``cgi-bin/`` (depending on the platform):\n\n  - On Windows::\n\n      git-http-backend.bat\n      git-http-backend.exe\n\n  - On non-Windows::\n\n      git-http-backend.sh\n      git-http-backend\n\nIf found, Romt will use that file for serving Git repositories via CGI.  If not\nfound, Romt will look in known locations for the ``git-http-backend`` executable\nand create a platform-dependent wrapper script in ``cgi-bin/`` to invoke the\nexecutable; the script is named ``git-http-backend.bat`` on Windows and\n``git-http-backend.sh`` on non-Windows.\n\nCurrently, Romt probes for the backend in these hard-coded locations (depending\non the platform):\n\n- On Windows:\n\n  - ``C:/Program Files/Git/mingw64/libexec/git-core/git-http-backend.exe``\n\n- On non-Windows:\n\n  - ``/usr/lib/git-core/git-http-backend`` (typical Linux)\n  - ``/usr/libexec/git-core/git-http-backend`` (Alpine Linux)\n\nTo manually setup the Git backend, create a script file in ``cgi-bin/`` with\ncontents similar to these examples (depending on platform):\n\n- On Windows, create ``cgi-bin/git-http-backend.bat`` with contents::\n\n    @echo off\n    \"C:\\Program Files\\Git\\mingw64\\libexec\\git-core\\git-http-backend.exe\"\n\n- On non-Windows, create ``cgi-bin/git-http-backend.sh`` with contents::\n\n    #!/bin/sh\n    exec '/usr/lib/git-core/git-http-backend'\n\n  Then make the script executable:\n\n  .. code-block:: sh\n\n    chmod +x cgi-bin/git-http-backend.sh\n\nnginx configuration\n===================\n\nRust artifacts may optionally be served via the nginx web server.  A simple\nexample for Ubuntu Linux is shown below.  If you change host or port values\nbelow, configure the index repository via:\n.. code-block:: sh\n\n  romt crate config --server-url <SERVER_URL>\n\nBelow is a sample nginx configuration.\n\nPlace the following content into ``/etc/nginx/sites-available/rust``.  Make\nadjustments as indicated by each ``TODO``.  These instructions assume crates\nare stored using lowercase prefixes; if using mixed-case prefixes, adjust as\ndirected by the ``TODO`` comments::\n\n  server {\n    listen 8000 default_server;\n    listen [::]:8000 default_server;\n\n    # TODO: Change to absolute path to mirror directory:\n    root /ABSOLUTE/PATH/TO/mirror;\n\n    server_name _;\n\n    location / {\n      autoindex on;\n    }\n\n    # Support serving of Git repositories via git-http-backend.\n    location ~ /git(/.*) {\n\n      # TODO: Change to absolute path to mirror/git directory:\n      fastcgi_param GIT_PROJECT_ROOT    /ABSOLUTE/PATH/TO/mirror/git;\n\n      include       fastcgi_params;\n      fastcgi_pass  unix:/var/run/fcgiwrap.socket;\n      fastcgi_param SCRIPT_FILENAME     /usr/lib/git-core/git-http-backend;\n      fastcgi_param GIT_HTTP_EXPORT_ALL \"\";\n      fastcgi_param PATH_INFO           $1;\n    }\n\n    # Rewrite URLs like /crates/{crate}/{crate}-{version}.crate to use\n    # a prefix based on the crate name.  Special cases for crate names\n    # with 1, 2, 3, and 4-or-more characters:\n    #   a/a-{version}.crate         -> 1/a/a-{version}.crate\n    #   ab/ab-{version}.crate       -> 2/aa/ab-{version}.crate\n    #   abc/abc-{version}.crate     -> 3/a/abc/abc-{version}.crate\n    #   abcd*/abcd*-{version}.crate -> ab/cd/abcd*-{version}.crate\n\n    # TODO: Comment out this line for mixed-case crate prefixes:\n    rewrite \"^/crates/.*$\" \"$crates_uri\"  last;\n\n    # TODO: Uncomment these four lines for mixed-case crate prefixes:\n    # rewrite \"^/crates/([^/])/([^/]+)$\"                     \"/crates/1/$1/$2\"  last;\n    # rewrite \"^/crates/([^/]{2})/([^/]+)$\"                  \"/crates/2/$1/$2\"  last;\n    # rewrite \"^/crates/([^/])([^/]{2})/([^/]+)$\"            \"/crates/3/$1/$1$2/$3\"  last;\n    # rewrite \"^/crates/([^/]{2})([^/]{2})([^/]*)/([^/]+)$\"  \"/crates/$1/$2/$1$2$3/$4\" last;\n\n  }\n\nServing crates with lowercase prefixes requires Perl support in nginx (on\nUbuntu, this requires the package ``nginx-extras`` instead of ``nginx-full``);\nPerl support is not required for mixed-case prefixes.  To serve crates with\nlowercase prefixes, create the file ``/etc/nginx/conf.d/perl.conf`` with the\nbelow contents::\n\n  # Reference: https://nginx.org/en/docs/http/ngx_http_perl_module.html\n  # Include the perl module\n  perl_modules perl/lib;\n\n  # The variable `$crates_uri` will be computed by the Perl subroutine\n  # below, adding a lowercase prefix as required based on the crate name.\n\n  perl_set $crates_uri 'sub {\n      my $r = shift;\n      my $uri = $r->uri;\n      # Remove all newline characters to avoid CRLF injection vulnerability\n      # (https://stackoverflow.com/questions/3666003/how-i-can-translate-uppercase-to-lowercase-letters-in-a-rewrite-rule-in-nginx-we/68054489#68054489):\n      $uri =~ s/\\R//g;\n\n      if ($uri =~ m@^/crates/([^/])/([^/]+)$@) {\n          $uri = \"/crates/1/\" . \"$1/$2\";\n      } elsif ($uri =~ m@^/crates/([^/]{2})/([^/]+)$@) {\n          $uri = \"/crates/2/\" . \"$1/$2\";\n      } elsif ($uri =~ m@^/crates/([^/])([^/]{2})/([^/]+)$@) {\n          $uri = lc(\"/crates/3/$1/\") . \"$1$2/$3\";\n      } elsif ($uri =~ m@^/crates/([^/]{2})([^/]{2})([^/]*)/([^/]+)$@) {\n          $uri = lc(\"/crates/$1/$2/\") . \"$1$2$3/$4\";\n      }\n      return $uri;\n  }';\n\nActivate the ``rust`` site via::\n\n  ln -s /etc/nginx/sites-available/rust /etc/nginx/sites-enabled/\n\nAmazon S3 storage\n=================\n\nCurrently static artifacts hosted on Rust CDNs are served via Amazon S3 buckets.\nAt times directly accessing the bucket can be helpful.\n\nA helpful command-line tool for use with S3 buckets is ``awscli``:\nhttps://github.com/aws/aws-cli\n\nRust https URLs map to S3 bucket URLs as follows:\n\n- https://static.rust-lang.org -> s3://static-rust-lang-org\n- https://static.crates.io -> s3://crates-io\n\nNote: unfortunately, the \"list\" privilege is disabled for the ``crates-io``\nbucket.\n\nHere are some common operations on S3 buckets:\n\n- List files beginning with PREFIX:\n\n  .. code-block:: sh\n\n    aws s3 ls --no-sign-request s3://BUCKET_NAME/PREFIX\n\n  Add ``--recursive`` flag to recurse into subdirectories.\n\n- Download a file:\n\n  .. code-block:: sh\n\n    aws s3 cp --no-sign-request s3://BUCKET_NAME/path/file local_file\n\nExamples:\n\n- List channel files for toolchain for 2020-04-30:\n\n  .. code-block:: sh\n\n    aws s3 ls --no-sign-request s3://static-rust-lang-org/dist/2020-04-30/chan\n\n  with output::\n\n    2020-04-29 20:23:44         10 channel-rust-nightly-date.txt\n    2020-04-29 20:23:44        833 channel-rust-nightly-date.txt.asc\n    2020-04-29 20:23:44         96 channel-rust-nightly-date.txt.sha256\n    2020-04-29 20:23:44         40 channel-rust-nightly-git-commit-hash.txt\n    ...\n\n- List ``rustup`` versions:\n\n  .. code-block:: sh\n\n    aws s3 ls --no-sign-request s3://static-rust-lang-org/rustup/archive/\n\n  with output::\n\n                           PRE 0.2.0/\n                           PRE 0.3.0/\n                           PRE 0.4.0/\n                           ...\n\n- Download ``serde-1.0.99.crate``:\n\n  .. code-block:: sh\n\n    aws s3 cp --no-sign-request s3://crates-io/crates/serde/serde-1.0.99.crate .\n\n  This is functionally equivalent to:\n\n  .. code-block:: sh\n\n    curl -O https://static.crates.io/crates/serde/serde-1.0.99.crate\n\nTroubleshooting\n===============\n\nProxy server troubleshooting\n----------------------------\n\nThe author has not tested Romt with a proxy server, but user feedback indicates\nit's possible (see https://github.com/drmikehenry/romt/issues/10).  The\n``httpx`` library's support for proxying is documented at:\nhttps://www.python-httpx.org/advanced/#http-proxying\n\n``httpx`` understands several environment variables (documented at the page\nabove) that may be used to influence proxy operation.  In addition, ``httpx``\nhas information about debugging proxy-related issues at:\nhttps://www.python-httpx.org/contributing/#development-proxy-setup\n\nAlso, ``httpx`` can produce more debugging information by setting the\nenvironment variable ``HTTPX_LOG_LEVEL`` to ``trace`` (as documented at\nhttps://www.python-httpx.org/environment_variables/).  As a sample invocation on\nLinux::\n\n  HTTPX_LOG_LEVEL=trace romt toolchain -v -s nightly -t all fetch-manifest\n\nDownload timeouts\n-----------------\n\nRomt 0.3.0 added support for simultaneous downloading based on the ``httpx``\nlibrary; this came with a a default timeout of five seconds which can lead to\n``ConnectTimeout`` or ``ReadTimeout`` errors depending on choice of\n``--num-jobs`` and network characteristics (see\nhttps://github.com/drmikehenry/romt/issues/16).\n\nRomt 0.4.0 adds a ``--timeout`` switch to control this timeout, and changed the\ndefault value to sixty seconds.  If timeouts are still occurring, use a larger\ntimeout value (or use ``--timeout 0`` to disable timeouts altogether).\n\nReference\n=========\n\n- \"Downloading all the crates on crates.io\" provides good reference information\n  on mirroring Rust artifacts:\n  https://www.pietroalbini.org/blog/downloading-crates-io/\n\n- More information on Rust checksumming, signatures, etc., can be found at:\n  https://internals.rust-lang.org/t/future-updates-to-the-rustup-distribution-format/4196\n\n- Information on the \"rustup\" project:\n  https://github.com/rust-lang/rustup\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/drmikehenry/romt",
    "keywords": "Rust mirror toolchain crates",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "romt",
    "package_url": "https://pypi.org/project/romt/",
    "platform": null,
    "project_url": "https://pypi.org/project/romt/",
    "project_urls": {
      "Homepage": "https://github.com/drmikehenry/romt"
    },
    "release_url": "https://pypi.org/project/romt/0.4.0/",
    "requires_dist": [
      "anyio (==3.3.0)",
      "async-generator (==1.10)",
      "attrs (==21.2.0)",
      "certifi (==2019.9.11)",
      "contextvars (==2.4)",
      "gitdb2 (==2.0.6)",
      "gitpython (==3.0.5)",
      "h11 (==0.12.0)",
      "httpcore (==0.13.6)",
      "httpx (==0.18.2)",
      "idna (==2.8)",
      "immutables (==0.15)",
      "outcome (==1.1.0)",
      "python-gnupg (==0.4.6)",
      "rfc3986[idna2008] (==1.5.0)",
      "smmap2 (==2.0.5)",
      "sniffio (==1.2.0)",
      "sortedcontainers (==2.4.0)",
      "toml (==0.10.0)",
      "trio (==0.19.0)",
      "typing-extensions (==3.10.0.0)",
      "dataclasses (==0.8.0) ; python_version < \"3.7\"",
      "pyinstaller (>=3.6) ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-gitignore ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "flake8 (>=3.3.0) ; extra == 'dev'",
      "pep8-naming (>=0.4.1) ; extra == 'dev'",
      "flake8-quotes (>=0.8.1) ; extra == 'dev'",
      "flake8-import-order (>=0.9.0) ; extra == 'dev'",
      "types-toml (==0.1.3) ; extra == 'dev'",
      "types-setuptools (==57.0.0) ; extra == 'dev'",
      "pypiwin32 (>=223) ; (platform_system == \"Windows\") and extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Romt (Rust Offline Mirror Tool) enables mirroring of Rust programming language tools and crates for use in an offline context.",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13637557,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3362c6cda0774e622b379d9027f8b8d3961d3b01ad57ab209887dbb57e0df7b1",
          "md5": "94fa7a38c22d5397dc7ecdb05fcb652a",
          "sha256": "bc93d9502de6ee493aacc4f6e32bc24a55f12d91206fc845a3eff5596a3499fd"
        },
        "downloads": -1,
        "filename": "romt-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94fa7a38c22d5397dc7ecdb05fcb652a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 48580,
        "upload_time": "2020-05-09T19:12:54",
        "upload_time_iso_8601": "2020-05-09T19:12:54.592145Z",
        "url": "https://files.pythonhosted.org/packages/33/62/c6cda0774e622b379d9027f8b8d3961d3b01ad57ab209887dbb57e0df7b1/romt-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75a0ae1813c2efcb09b4162c8a183db69ad1fc40c5c5501ba5ed63e95ff34408",
          "md5": "975da2d73e527a2412aa977a4effaf22",
          "sha256": "a6b8976b1c532bea289ceb4fb29225adddbadb974ec5d3fa0d1130bc6a4b9a21"
        },
        "downloads": -1,
        "filename": "romt-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "975da2d73e527a2412aa977a4effaf22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 72704,
        "upload_time": "2020-05-09T19:12:57",
        "upload_time_iso_8601": "2020-05-09T19:12:57.790966Z",
        "url": "https://files.pythonhosted.org/packages/75/a0/ae1813c2efcb09b4162c8a183db69ad1fc40c5c5501ba5ed63e95ff34408/romt-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "452506cd9d9e74e3f8f5caaf03750732888ac23d83701756bf961ba739665713",
          "md5": "62e63a7ce06cb8bb1445298b935d49ee",
          "sha256": "dc7eeed90bd9d4d608e430af7fe8e589f780f7eed25693970d450588633d26d3"
        },
        "downloads": -1,
        "filename": "romt-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62e63a7ce06cb8bb1445298b935d49ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 49174,
        "upload_time": "2020-05-11T21:46:29",
        "upload_time_iso_8601": "2020-05-11T21:46:29.029426Z",
        "url": "https://files.pythonhosted.org/packages/45/25/06cd9d9e74e3f8f5caaf03750732888ac23d83701756bf961ba739665713/romt-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "438686086c176ad6194ecead84a5073674f44e343504935867c12a58406291fb",
          "md5": "5e78c0db0e8873a0edc1fa8dd93ddf35",
          "sha256": "4c011b89a40a0bfa02b07b99d1efae664b8eb4c9f1caf77784f8d66fd23a0880"
        },
        "downloads": -1,
        "filename": "romt-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5e78c0db0e8873a0edc1fa8dd93ddf35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 74418,
        "upload_time": "2020-05-11T21:46:30",
        "upload_time_iso_8601": "2020-05-11T21:46:30.798782Z",
        "url": "https://files.pythonhosted.org/packages/43/86/86086c176ad6194ecead84a5073674f44e343504935867c12a58406291fb/romt-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "891ec4f5d60271c4c82c616ec0715c9aaa8e28df77cb816663c33e78b7f25440",
          "md5": "57429ac485e960eefd3a365fec2885b6",
          "sha256": "97c94bdfc8c2230a74efc82539454921038d6ae2136c52858988fb37c9e715d8"
        },
        "downloads": -1,
        "filename": "romt-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57429ac485e960eefd3a365fec2885b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 49687,
        "upload_time": "2020-05-24T17:37:51",
        "upload_time_iso_8601": "2020-05-24T17:37:51.106807Z",
        "url": "https://files.pythonhosted.org/packages/89/1e/c4f5d60271c4c82c616ec0715c9aaa8e28df77cb816663c33e78b7f25440/romt-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e5731a6b71f8057f37c0417ba180b7ab5fcb8df38396f12ad1a667b280b3f5f",
          "md5": "bb64e4ab16b907da5ffa1363c97b2f9e",
          "sha256": "e32ce9946b369ef3a8a046c789e348008ab0258660beb7bf9424cf149d35804b"
        },
        "downloads": -1,
        "filename": "romt-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb64e4ab16b907da5ffa1363c97b2f9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 75606,
        "upload_time": "2020-05-24T17:37:53",
        "upload_time_iso_8601": "2020-05-24T17:37:53.115505Z",
        "url": "https://files.pythonhosted.org/packages/6e/57/31a6b71f8057f37c0417ba180b7ab5fcb8df38396f12ad1a667b280b3f5f/romt-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab2efe853a5765012c3664df256e58254f20944ef2fb9ae63a1cc7180d8b591b",
          "md5": "9961f126c21ff90c12a81ec2b3a7634f",
          "sha256": "3a0f65a7bc8746ade556e9c2f1a3a788f6f44cd9ee2e6b537fd6d35d669dd53c"
        },
        "downloads": -1,
        "filename": "romt-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9961f126c21ff90c12a81ec2b3a7634f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 50399,
        "upload_time": "2020-06-15T16:22:46",
        "upload_time_iso_8601": "2020-06-15T16:22:46.379250Z",
        "url": "https://files.pythonhosted.org/packages/ab/2e/fe853a5765012c3664df256e58254f20944ef2fb9ae63a1cc7180d8b591b/romt-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab9a16ab048fb85c855e9476187f48f6cc77340496f25f9f371f891eb4d92102",
          "md5": "33ffdde73e8a2c921ae16edbc9079d4e",
          "sha256": "99fb3cfb95b53a546771001fd7fdf9e8e8534b21b78cb32ca21c8c299ad2d2c9"
        },
        "downloads": -1,
        "filename": "romt-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "33ffdde73e8a2c921ae16edbc9079d4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 77656,
        "upload_time": "2020-06-15T16:22:48",
        "upload_time_iso_8601": "2020-06-15T16:22:48.154826Z",
        "url": "https://files.pythonhosted.org/packages/ab/9a/16ab048fb85c855e9476187f48f6cc77340496f25f9f371f891eb4d92102/romt-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16420771b87eb1df761b0f97ecf2c9df40678dbc173579138beea1901ea7fe5f",
          "md5": "6ca598a88895d99f047948a688c90eb5",
          "sha256": "759c3561b81bd15b321a6844177eb122424390356d161e4c43ec756f9c185585"
        },
        "downloads": -1,
        "filename": "romt-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ca598a88895d99f047948a688c90eb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 50405,
        "upload_time": "2020-08-08T16:18:14",
        "upload_time_iso_8601": "2020-08-08T16:18:14.100829Z",
        "url": "https://files.pythonhosted.org/packages/16/42/0771b87eb1df761b0f97ecf2c9df40678dbc173579138beea1901ea7fe5f/romt-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6846066d7c5184da7f745fa510b3b98a742cb1893ec82f427f1fab17d2426dc",
          "md5": "d1cd1fbfab94e83bc47d84ceacc0076b",
          "sha256": "2e24ea83a52d10183c610c2ac264a217de289aaae92760825c8a95f3bc767124"
        },
        "downloads": -1,
        "filename": "romt-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1cd1fbfab94e83bc47d84ceacc0076b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 77876,
        "upload_time": "2020-08-08T16:18:16",
        "upload_time_iso_8601": "2020-08-08T16:18:16.380316Z",
        "url": "https://files.pythonhosted.org/packages/f6/84/6066d7c5184da7f745fa510b3b98a742cb1893ec82f427f1fab17d2426dc/romt-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1157ccd7deaee350fb369db2917ce36948a92ab2590a72513328aac18c6a324",
          "md5": "fec4345ef7874885583bef8ddd3c6113",
          "sha256": "da37a8aa2676ac9bcaf79d94898bdc2028f192e5d99a98ca05b96eb4f2ddeb7a"
        },
        "downloads": -1,
        "filename": "romt-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fec4345ef7874885583bef8ddd3c6113",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 50419,
        "upload_time": "2021-05-08T18:39:24",
        "upload_time_iso_8601": "2021-05-08T18:39:24.799921Z",
        "url": "https://files.pythonhosted.org/packages/e1/15/7ccd7deaee350fb369db2917ce36948a92ab2590a72513328aac18c6a324/romt-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6eb1061f2f3dc4d255cf87c223d071873a9fc3d63b37739221f88827ea8586b",
          "md5": "e0ec0dc19251fdada42bed3d34e4a84f",
          "sha256": "657fbf7663d57317ab11fe9c98ac0cf1c504c619acc1b7356d667b65fae6e5d9"
        },
        "downloads": -1,
        "filename": "romt-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e0ec0dc19251fdada42bed3d34e4a84f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 77953,
        "upload_time": "2021-05-08T18:39:26",
        "upload_time_iso_8601": "2021-05-08T18:39:26.950479Z",
        "url": "https://files.pythonhosted.org/packages/f6/eb/1061f2f3dc4d255cf87c223d071873a9fc3d63b37739221f88827ea8586b/romt-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "186e7e8489d23af3e6d70239f2c7e3e3b09dae3ea9d6b0593f73346cd0bbd057",
          "md5": "fc5ecc98baa023488784f39c5d455232",
          "sha256": "aac8835ea661574763092e77aac056643eaa1ca66828a9ea419470589c3f4e5e"
        },
        "downloads": -1,
        "filename": "romt-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc5ecc98baa023488784f39c5d455232",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51537,
        "upload_time": "2021-08-14T19:48:26",
        "upload_time_iso_8601": "2021-08-14T19:48:26.117467Z",
        "url": "https://files.pythonhosted.org/packages/18/6e/7e8489d23af3e6d70239f2c7e3e3b09dae3ea9d6b0593f73346cd0bbd057/romt-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5c2cf7424ed1391f2a0aaf259666178c14f0b50065346589a41237a9af55827",
          "md5": "677b66742d528a39d524b0b423c83c89",
          "sha256": "53533a7170c45df735ba8bc43efa5654884453a7d6ec0426f64e786791566382"
        },
        "downloads": -1,
        "filename": "romt-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "677b66742d528a39d524b0b423c83c89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 77852,
        "upload_time": "2021-08-14T19:48:28",
        "upload_time_iso_8601": "2021-08-14T19:48:28.315199Z",
        "url": "https://files.pythonhosted.org/packages/e5/c2/cf7424ed1391f2a0aaf259666178c14f0b50065346589a41237a9af55827/romt-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bbcea06dfdbb8fdc3dc1dfef685b05d16b961638d8c087cc7ced336d98db7b0",
          "md5": "060eaff45d9a5a7326e88a9c0a05b038",
          "sha256": "c445eed311d2f2964e6dc5996578116aa1ad7f10edc9e59c9e218dde6f11efd7"
        },
        "downloads": -1,
        "filename": "romt-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "060eaff45d9a5a7326e88a9c0a05b038",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51536,
        "upload_time": "2021-08-16T10:16:47",
        "upload_time_iso_8601": "2021-08-16T10:16:47.031426Z",
        "url": "https://files.pythonhosted.org/packages/8b/bc/ea06dfdbb8fdc3dc1dfef685b05d16b961638d8c087cc7ced336d98db7b0/romt-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e8132b8d12c8ed3cf779a9bdb020eaa1e6a035104625c642be2932b5a0e743e",
          "md5": "09090f3a08c1e5c0c787d79d54eb4114",
          "sha256": "293fb29822071c7d8470e555a4bf207d14396bc3a669391130c032d10316caca"
        },
        "downloads": -1,
        "filename": "romt-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09090f3a08c1e5c0c787d79d54eb4114",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 78144,
        "upload_time": "2021-08-16T10:16:49",
        "upload_time_iso_8601": "2021-08-16T10:16:49.276149Z",
        "url": "https://files.pythonhosted.org/packages/7e/81/32b8d12c8ed3cf779a9bdb020eaa1e6a035104625c642be2932b5a0e743e/romt-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a56b828c13b0ce6eb13a9e00a78ac6ec6f1ca41e03d610298dc201dad34e0403",
          "md5": "9cc779980a4aae8bfd4855fdf286c38d",
          "sha256": "e132d183ba5e19380df3efa68a30ed2d90c00892e9b00f1d305791e51e66f182"
        },
        "downloads": -1,
        "filename": "romt-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cc779980a4aae8bfd4855fdf286c38d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51983,
        "upload_time": "2022-03-05T15:47:04",
        "upload_time_iso_8601": "2022-03-05T15:47:04.067131Z",
        "url": "https://files.pythonhosted.org/packages/a5/6b/828c13b0ce6eb13a9e00a78ac6ec6f1ca41e03d610298dc201dad34e0403/romt-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a53ffd8e41713193be33c4b328d6dc2271602abbfc68bb5f6389687dc000b5f",
          "md5": "2791b39a55587d6fcccc48326f9b66b7",
          "sha256": "acc2730a13a6ca619f96d95bc83b227c8eedfadb8bacc6dea938419437995d10"
        },
        "downloads": -1,
        "filename": "romt-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2791b39a55587d6fcccc48326f9b66b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 80002,
        "upload_time": "2022-03-05T15:47:06",
        "upload_time_iso_8601": "2022-03-05T15:47:06.105215Z",
        "url": "https://files.pythonhosted.org/packages/1a/53/ffd8e41713193be33c4b328d6dc2271602abbfc68bb5f6389687dc000b5f/romt-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d86b886e6fb68bb6dfe54da23efe5a0777928f1605f44090d0c41482ef0b14f1",
          "md5": "2fb66b6aad940dbf856cf155a502fe8f",
          "sha256": "0a78e88dc692575907d0b6112f165aabad258600908e2723b0e653740351b7f0"
        },
        "downloads": -1,
        "filename": "romt-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fb66b6aad940dbf856cf155a502fe8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52187,
        "upload_time": "2022-03-19T20:36:46",
        "upload_time_iso_8601": "2022-03-19T20:36:46.399671Z",
        "url": "https://files.pythonhosted.org/packages/d8/6b/886e6fb68bb6dfe54da23efe5a0777928f1605f44090d0c41482ef0b14f1/romt-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08bc32e3f15a7e5321bdee55e63d440a5c29ba26701ded94edc3ad62b719bf04",
          "md5": "f43f69a9e57cbe728452025b100eb771",
          "sha256": "188a9c840df60a3d044d49b321c6ae037f33b035528918ec01029b3a0a789091"
        },
        "downloads": -1,
        "filename": "romt-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f43f69a9e57cbe728452025b100eb771",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 80359,
        "upload_time": "2022-03-19T20:36:48",
        "upload_time_iso_8601": "2022-03-19T20:36:48.691943Z",
        "url": "https://files.pythonhosted.org/packages/08/bc/32e3f15a7e5321bdee55e63d440a5c29ba26701ded94edc3ad62b719bf04/romt-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0715bcb98db6e52f203008102cb3e0436916a1d5a0062405da443888d29e8a79",
          "md5": "b2da4935e8c2e610f1a53e4d581bfa34",
          "sha256": "121e59d251ba767c77e5101655d22cb52bf2b0c4bc0b75be1245af2494001a24"
        },
        "downloads": -1,
        "filename": "romt-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2da4935e8c2e610f1a53e4d581bfa34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52438,
        "upload_time": "2022-03-23T21:30:35",
        "upload_time_iso_8601": "2022-03-23T21:30:35.236952Z",
        "url": "https://files.pythonhosted.org/packages/07/15/bcb98db6e52f203008102cb3e0436916a1d5a0062405da443888d29e8a79/romt-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b32075bd22885b6c032fac09c7828597a43d6b3524c01af0495381542d01b7de",
          "md5": "8c664ef412820b747090e097db994467",
          "sha256": "34976efab2576e7c97e47ee5ee82ab60c1ef49be9a2fdc3b6ac38130b9853a15"
        },
        "downloads": -1,
        "filename": "romt-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8c664ef412820b747090e097db994467",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 80850,
        "upload_time": "2022-03-23T21:30:37",
        "upload_time_iso_8601": "2022-03-23T21:30:37.333608Z",
        "url": "https://files.pythonhosted.org/packages/b3/20/75bd22885b6c032fac09c7828597a43d6b3524c01af0495381542d01b7de/romt-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93932c382376d9c9051b297f30f8770488dcaa1534ff1498461678701c9e9328",
          "md5": "ab5e06be561926c988bf9d3989d44911",
          "sha256": "36afe3fbb4f3366bdc62f02fdf49169031bc8912008c2fbbd4948cdde2716957"
        },
        "downloads": -1,
        "filename": "romt-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab5e06be561926c988bf9d3989d44911",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 56686,
        "upload_time": "2022-04-27T10:20:18",
        "upload_time_iso_8601": "2022-04-27T10:20:18.083126Z",
        "url": "https://files.pythonhosted.org/packages/93/93/2c382376d9c9051b297f30f8770488dcaa1534ff1498461678701c9e9328/romt-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d109313e17370c5753efdc90c9f4374424a8663bb8d037c6cdb5bbed5cd5492",
          "md5": "6a8cb3d683a7b26a16f1d0db5e7d7201",
          "sha256": "0cc97948d0afa19867c83f31b6b95776d72d2a18683715ad96581ea56719fe67"
        },
        "downloads": -1,
        "filename": "romt-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a8cb3d683a7b26a16f1d0db5e7d7201",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 90293,
        "upload_time": "2022-04-27T10:20:20",
        "upload_time_iso_8601": "2022-04-27T10:20:20.440683Z",
        "url": "https://files.pythonhosted.org/packages/7d/10/9313e17370c5753efdc90c9f4374424a8663bb8d037c6cdb5bbed5cd5492/romt-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93932c382376d9c9051b297f30f8770488dcaa1534ff1498461678701c9e9328",
        "md5": "ab5e06be561926c988bf9d3989d44911",
        "sha256": "36afe3fbb4f3366bdc62f02fdf49169031bc8912008c2fbbd4948cdde2716957"
      },
      "downloads": -1,
      "filename": "romt-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab5e06be561926c988bf9d3989d44911",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 56686,
      "upload_time": "2022-04-27T10:20:18",
      "upload_time_iso_8601": "2022-04-27T10:20:18.083126Z",
      "url": "https://files.pythonhosted.org/packages/93/93/2c382376d9c9051b297f30f8770488dcaa1534ff1498461678701c9e9328/romt-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d109313e17370c5753efdc90c9f4374424a8663bb8d037c6cdb5bbed5cd5492",
        "md5": "6a8cb3d683a7b26a16f1d0db5e7d7201",
        "sha256": "0cc97948d0afa19867c83f31b6b95776d72d2a18683715ad96581ea56719fe67"
      },
      "downloads": -1,
      "filename": "romt-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a8cb3d683a7b26a16f1d0db5e7d7201",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 90293,
      "upload_time": "2022-04-27T10:20:20",
      "upload_time_iso_8601": "2022-04-27T10:20:20.440683Z",
      "url": "https://files.pythonhosted.org/packages/7d/10/9313e17370c5753efdc90c9f4374424a8663bb8d037c6cdb5bbed5cd5492/romt-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}