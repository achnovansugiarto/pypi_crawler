{
  "info": {
    "author": "Hamza Bin Yusuff",
    "author_email": "hbyusuff@uwaterloo.ca",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Enigma-Python package\n\n# Available as PyEnigmatic in Pypi\n\nThis python package provides access to several encryption and hashing functions. It essentially allows the user to obtain hashes, keys and encrypted, as well as decrypted, text by exposing existing cryptographic ciphers and hashing algorithms. In addition to that, the API has three methods, which when given a certain number of parameters, provides the user with prime numbers of any length of bits.\n\nI have used PyNaCl cryptographic library, a Python binding to libsodium (fork of the Networking and Cryptography library), for some of the methods which provide symmetric key encryption and hashing, and for Advanced Encryption Standard (AES), I used the implementation of AES encryption cipher (CBC mode) in Pycryptodome library\n\nCurrently, this package provides the following cryptographic algorithms-\n\n- Vigener Cipher (Complete implementation on my own)\n- Caesar Cipher (Complete implementation on my own)\n- Symmetric Key Cipher of PyNacl library (uses XSAlsa20 stream cipher)\n- Advanced Encryption Standard (CBC Mode) of PyCryptodom library\n- RSA (Rivest–Shamir–Adleman) -- Assymetric Key Cipher (Complete = - - - implementation on my own, and have made some changes )\n- Password Hashing -- using key-stretching algos like argon2, argon2i and scrypt from PyNaCl library\n- Hashing using SHA 256 or SHA 512 as implemented in PyNaCl library\n- Prime Number Retrieval Algorithms - using the PyCryptodom library\n\n## Table of Contents\n\n- [Inspiration](#inspire)\n- [Why FastAPI](#fastapi)\n- [Usage](#usage)\n- [PyNacl Cryptography](#pynacl)\n- [PyCryptodome](#pycrypto)\n- [HRSA (My Implementation of RSA that supports encryption/decryption of all characters with an ascii value greater than 31)](#rsa)\n- [Caesar Cipher](#caesar)\n- [Vigenere Cipher](#vig)\n- [Primes](#prime)\n- [RSA Public and Private Keys](#keys)\n- [Improvements](#improvements)\n- [Disclaimer](#disclaimer)\n- [Author](#author)\n\n### Inspiration\n\n<a name=\"inspire\">\n\nMy first foray into the world of computer science was through the world of cryptography. To be more precise, the movie- The Imitation Game - initated my venture into this field. Ever since then, my interest gradually turned into a commitment to the subject of computer science. I have built this project to re-visit the world of cryptograhpy with a better skill-set and knowledge.\n\n## USAGE\n\n<a name='usage'>\n\n### PyNacl Cryptographic Algorithms\n\n<a name = 'pynacl'>\n\nPyNaCl is a Python binding to libsodium, which is a fork of the Networking and Cryptography library, and LibSodium is a modern, easy-to-use software library for encryption, decryption, signatures, password hashing and more. These libraries have a stated goal of improving usability, security and speed. More importantly, it does not require the developer to decide which encryption technique to use, and thus largely takes away the stress of knowing the underlying of a cipher and it’s potential vulnerabilities, making the process of encrypting/decrypting data more seamless. To summarize, it prevents the user from doing cryptography in an insecure way.\n\nIt by default provides the most secured and resistant mode of encryption, (for both symmetric and asymmetric) along with the required padding. Currently, it stands as one of the best libraries for cryptography. For more info - https://pynacl.readthedocs.io/en/stable/\n\n### PyNacl Symmetric Key Encryption and Decryption\n\nSymmetric Key Encryption is analogous to a locking/unlocking a safe. With the given key, you can encrypt and decrypt the data to view the contents. The implementation of this encryption is done through pynacl secret key encryption library, which uses XSalsa20 stream cipher to perform the algorithm with the given key. The decryption is also done using the same cipher.\n\nThe key passed in the request body must be of 32 bytes and should be kept secret. It is the combination to your “safe” and anyone with this key will be able to decrypt the data, or encrypt new data. To add a layer of randomness, I added some changes to the way the key gets used for the encryption at the end.\n\n### Encryption\n\n#### nacl_secret_key_encrypt_text(key,text)\n\nFor the encryption, the user must call the method nacl_secret_key_encrypt_text(key,text) where the key passed in should be of 32 bytes\n\n### Decryption\n\n#### nacl_secret_key_decrypt_text(key, text)\n\nSimilarly, for the decryption the user must call the method nacl_secret_key_decrypt_text(key, text) where the key passed in should be of 32 bytes and the text has to be the encrypted text returned\n\n### PyCryptodom\n\n<a name = 'pycrypto'>\n\nPyCryptodome is a self-contained Python package of low-level cryptographic primitives. PyCryptodome is a fork of PyCrypto. I have used pycrtodome to implement Advanced Standard Encryption ( CBC mode) , and for those who are unaware of the AES, it’s essentially a symmetric key encryption, which uses the given key and an initialization vector ( a 128 bit round key) followed by multiple rounds of permutation and substitution on a 4x4 block of array of bytes to generate the encrypted text. For more detailed explanation of AES, you can visit the link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n\n### Advanced Standard Encryption ( CBC mode)\n\n### Encryption\n\n#### AES_encrypt(key, message, mode=\"CBC\")\n\nFor using AES, this method - AES_encrypt(key, message, mode=\"CBC\") - needs to be called.\nThe key passed in must be either of 128 or 192 or 256 bits, and the key should be kept safe. The mode should be set to \"CBC\".\n\n### Decryption\n\n### Advanced Standard Encryption ( CBC mode)\n\n#### AES_decrypt(key, info,mode=\"CBC\")\n\nFor using AES decryption, this method - AES_decrypt(key, info,mode=\"CBC\") - needs to be called. The key passed in should be the same as the one passed for encryption. The info here is the dict that gets returned from the AES_encrypt function, and the dict contains the initialization vector used for the encryption and the encrypted text.\n\n### HRSA (Implementation of RSA)\n\n<a name = 'rsa'>\n\nRSA (Rivest–Shamir–Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym RSA comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977.\n\nI implemented this algorithm completely on my own and added changes to the original encryption so that only two prime numbers whose products happen to be larger than 100 would work. However, to ensure the maximum security, its best to use prime numbers of length more than 128 bits and the more the better. To get such HUGE prime numbers, you can use the prime number retrieval methods of this Enigma library. More information about the methods is given below. The Algroithm works for all characters with an ASCII value greater than 31, including all alphanumeric characters.\n\nThe prime numbers p1 and p2 used to obtain the private and public key for encryption must have a product of greater than 100. For the encryption method, you must provide the pubic key along with the product of p1 and p2 (n in this case), and for decryption method, you have to put the private key along with the product of p1 and p2 (n in this case) in the request body.\n\n### Encryption\n\n#### hrsa_encrypted(message,public,n)\n\nThis method - hrsa_encrypted(message,public,n) - needs to be called to encrypt any text using hrsa.\n\n### Decryption\n\n#### hrsa_decrypted(cipher,private,n)\n\nThis method - hrsa_decrypted(cipher,private,n) - needs to be called to decrypt the encrypted text obtained from the function above.\n\n### Hashing\n\n<a name = 'hashing'>\n\nCryptographic secure hash functions are irreversible transforms of input data to a fixed length digest.\n\nThe standard properties of a cryptographic hash make these functions useful both for standalone usage as data integrity checkers, as well as black-box building blocks of other kind of algorithms and data structures.\n\nThe methods below use hashing algorithms from the PyNacl libaray, and hence are well tested and safe to use. To know more, you can visit the two links below -\n\nhttps://pynacl.readthedocs.io/en/stable/hashing/\nhttps://pynacl.readthedocs.io/en/stable/password_hashing/\n\n### Normal Hashing\n\n#### nacl_hashing(message, sha=256)\n\nTo use this method, you must specifiy the type of hash function (SHA - 256 or 512) you would like to use for the given message. The hash functions available are sha 256 and 512. To know more - https://en.wikipedia.org/wiki/SHA-2\n\n### Password Hashing\n\n#### get_password_hash(password, algo=None)\n\nTo use this method, you must specify the desired key stretching algorithm and the ones available are - argon2id, argon2i, scrypt. The algo parameter\ntakes in the name of the algorithm to be used.\n\n### Password Hashing Verify\n\n#### verify_password_hash(password, hash)\n\nFor using this method, you have to provide the password/text along with its corresponding hash, generated from the method password hashing ( right above) . If the hashing provided is of the password/text given in as parameter, then the method returns true, otherwise returns false.\n\n### Caesar Cipher\n\n<a name = 'caesar'>\n\nImplemented the Caesar Cipher completely on my own, and exposed the algorithm with the following method below. It works on both positive and negative shift, and to use the method, you must provide the text to be encrypted and the shift to be used on the text.\n\n### Encryption\n\n#### caesar_encrypt(word, shift)\n\nThis method encrypts the message with the given Shift and Caesar Cipher\n\n### Decryption\n\n#### caesar_decrypt(cipher, shift)\n\nThis method decypts the message with the given Shift and Caesar Cipher.\nThe cipher paramater should be the encrypted text returned from the function above for encryption.\n\n### Vigenere Cipher\n\n<a name = 'vig'>\n\n#### vigenere_encrypt(string, key)\n\n#### vigenere_decrypt(string, key)\n\nImplemented the Vigenere Cipher completely on my own, and exposed the algorithm with the methods above for encryption and decryption. It works on key of any length, and to use the method, you must provide the text to be encrypted and the key to be used on the text. Howevere, the cipher implemented works best with lowercase letters only.\n\n### Prime Numbers\n\n<a name = 'prime'>\n\nThe mere existence of prime numbers has always been a mystery to me, and at this point, I can quite confidently say whoever is reading this would be aware of the importance of prime numbers in cryptography. If you need a refresher on the definition of a prime number, it's a number larger than 1 that's divisible only by itself and 1. If I had to put it simply, modern encryption algorithms exploit the fact that we can easily take two large primes and multiply them together to get a new, super-large number, but that no computer yet created can take that super-large number and quickly figure out which two primes went into making it. Using this particular complexity, public key cryptography, such as RSA, use prime numbers to encrypt/decrypt data. To know more, you can visit the link - https://math.berkeley.edu/~kpmann/encryption.pdf Below, the following methods would allow you to retrieve large prime numbers quickly, and all you have to do is just provide the length of prime number ( length in bits). You can use these methods to generate large primes for RSA.\n\n### Prime number generation using a unique ID\n\n#### hrsa_prime(unique_id)\n\nGenerates a prime number of length k bits by extracting a unique value from the ID given as parameter. To look into the algorithm I used, you can view the source code in the eucild_prime.py file.\n\n### Prime number generation using the desired length (n)\n\n#### generate_prime(n)\n\nGenerates a prime number of n bits ( n of the parameter)\n\n### List of k Prime number generation of specific lengths\n\n#### generate_kprimes(k, start, end)\n\nGenerates a list of k (length of list) prime numbers, which contains one prime number of all lengths starting from 'start' (length of bits) bits to 'end' bits (length of bits) K must be equal to the value start-end+1 . To look into the algorithm I used, you can view the source code in the eucild_prime.py file.\n\n### RSA Public and Private Keys\n\n<a name = 'keys'>\n\nImplemented the Extended Euclidean Algorithm, along with RSA cipher completely on my own to generate the desired public key and the corresponding private key. To look into the algorithm I used, you can view the source code in the keys.py and prime_euclid.py file.\n\n### Public Key RSA\n\n#### generate_public_key(prime1,prime2)\n\nComputes and returns the public key for RSA cipher using the prime numbers p1 and p2. Product of p1 and p2 must be greater than 100 for the algorithm to work correctly.\n\n### Private Key RSA\n\n#### generate_private_key(e,prime1,prime2)\n\nComputes and returns the private key for RSA cipher using the prime numbers p1,p2 and the public key e. Product of p1 and p2 must be greater than 100 for the algorithm to work correctly.\n\n## Improvements\n\n<a name = 'improvements'>\n\nIn the foreseeable future, I intend to add more cryptographic functions to this package.\n\n## Disclaimer\n\n<a name = 'disclaimer'>\n\nI have built this project to explore and learn about the world of cryptography, with a renewed sense of curosity. Hence, it's made purely for learning purposes. However, anyone willing to use this API is more than welcome to do so. Thanks!\n\n## Author\n\n<a name = 'author'>\n\nHamza Yusuff - Email: hbyusuff@uwaterloo.ca\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hamza-yusuff",
    "keywords": "python,enigma,cryptography,aes,rsa,caesar,vigenere,symmetric,assymetric,key,prime",
    "license": "MIT LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyEnigmatic",
    "package_url": "https://pypi.org/project/PyEnigmatic/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyEnigmatic/",
    "project_urls": {
      "Homepage": "https://github.com/hamza-yusuff"
    },
    "release_url": "https://pypi.org/project/PyEnigmatic/0.0.3/",
    "requires_dist": [
      "cryptography",
      "pynacl",
      "pycryptodome"
    ],
    "requires_python": "",
    "summary": "An enigmatic cryptographic library",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10296455,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4340e4b72e9c8dbc3e5489d18f1427c7bac175dc8a7d5255f0ff59bdb617bac3",
          "md5": "0f7cdd66ea080115293645251cd0c874",
          "sha256": "e444bc72b27a9e05d6124fd7128d2d6ad930b93ad0d6c0e241bd5ddc314d5e6a"
        },
        "downloads": -1,
        "filename": "PyEnigmatic-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f7cdd66ea080115293645251cd0c874",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12810,
        "upload_time": "2021-05-08T19:05:10",
        "upload_time_iso_8601": "2021-05-08T19:05:10.063501Z",
        "url": "https://files.pythonhosted.org/packages/43/40/e4b72e9c8dbc3e5489d18f1427c7bac175dc8a7d5255f0ff59bdb617bac3/PyEnigmatic-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d96dfb4f4851faac4e57bf0dff3b70c9bf2535c4246bc11549d38370e0d411d6",
          "md5": "32bf0dc5ab264f2d47b72ba61843d0df",
          "sha256": "b18fdf1dae8e25c25518348409f6a0be0ae62eecc953fcbe9f15093bc255e2eb"
        },
        "downloads": -1,
        "filename": "PyEnigmatic-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "32bf0dc5ab264f2d47b72ba61843d0df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11525,
        "upload_time": "2021-05-08T19:05:13",
        "upload_time_iso_8601": "2021-05-08T19:05:13.701736Z",
        "url": "https://files.pythonhosted.org/packages/d9/6d/fb4f4851faac4e57bf0dff3b70c9bf2535c4246bc11549d38370e0d411d6/PyEnigmatic-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e51ef3d2ad7a3c4bb14eaf7e407b912c3a852ed5cf585f84becb9653475aaffd",
          "md5": "dbcba354b579786f838302b378f85f18",
          "sha256": "0b73d6b9e8f8c1ded79ba11d77e752d3084182fd7129d04771df680ed22185ec"
        },
        "downloads": -1,
        "filename": "PyEnigmatic-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbcba354b579786f838302b378f85f18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12818,
        "upload_time": "2021-05-08T19:21:17",
        "upload_time_iso_8601": "2021-05-08T19:21:17.711042Z",
        "url": "https://files.pythonhosted.org/packages/e5/1e/f3d2ad7a3c4bb14eaf7e407b912c3a852ed5cf585f84becb9653475aaffd/PyEnigmatic-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e777ada45744631b5b09bd09c2b5728ab7589cd58434824525b911ac99ccca9",
          "md5": "c6dc875885d0a8fc0b15f286c45ac001",
          "sha256": "33a115cc59c6494111fb454dd58a87633651e943d027a75bb711351b4dbdc0bd"
        },
        "downloads": -1,
        "filename": "PyEnigmatic-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c6dc875885d0a8fc0b15f286c45ac001",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11542,
        "upload_time": "2021-05-08T19:21:19",
        "upload_time_iso_8601": "2021-05-08T19:21:19.929074Z",
        "url": "https://files.pythonhosted.org/packages/4e/77/7ada45744631b5b09bd09c2b5728ab7589cd58434824525b911ac99ccca9/PyEnigmatic-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "767dac4d2275f795e15834af863669b672be8a4bdef2c18d25540d27f4121470",
          "md5": "5cb64fee3b4ef5c4329510ece3c5b943",
          "sha256": "79499587b7e991e1e5bb5179e83468fe877f33dbebb01b585ed39aec326b9e3a"
        },
        "downloads": -1,
        "filename": "PyEnigmatic-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cb64fee3b4ef5c4329510ece3c5b943",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12822,
        "upload_time": "2021-05-08T19:29:55",
        "upload_time_iso_8601": "2021-05-08T19:29:55.145616Z",
        "url": "https://files.pythonhosted.org/packages/76/7d/ac4d2275f795e15834af863669b672be8a4bdef2c18d25540d27f4121470/PyEnigmatic-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7a008e8ca5f990a3efbbbddce82dfc7288913d3439357238a6e5d29e6ed7793",
          "md5": "49ba14a850082648c3884b6153364bf3",
          "sha256": "703efa4697e5fabdc7de60a0bcf1064f5fc34cf5550307e316e48994810a2696"
        },
        "downloads": -1,
        "filename": "PyEnigmatic-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "49ba14a850082648c3884b6153364bf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11544,
        "upload_time": "2021-05-08T19:29:58",
        "upload_time_iso_8601": "2021-05-08T19:29:58.726645Z",
        "url": "https://files.pythonhosted.org/packages/f7/a0/08e8ca5f990a3efbbbddce82dfc7288913d3439357238a6e5d29e6ed7793/PyEnigmatic-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "767dac4d2275f795e15834af863669b672be8a4bdef2c18d25540d27f4121470",
        "md5": "5cb64fee3b4ef5c4329510ece3c5b943",
        "sha256": "79499587b7e991e1e5bb5179e83468fe877f33dbebb01b585ed39aec326b9e3a"
      },
      "downloads": -1,
      "filename": "PyEnigmatic-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5cb64fee3b4ef5c4329510ece3c5b943",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12822,
      "upload_time": "2021-05-08T19:29:55",
      "upload_time_iso_8601": "2021-05-08T19:29:55.145616Z",
      "url": "https://files.pythonhosted.org/packages/76/7d/ac4d2275f795e15834af863669b672be8a4bdef2c18d25540d27f4121470/PyEnigmatic-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7a008e8ca5f990a3efbbbddce82dfc7288913d3439357238a6e5d29e6ed7793",
        "md5": "49ba14a850082648c3884b6153364bf3",
        "sha256": "703efa4697e5fabdc7de60a0bcf1064f5fc34cf5550307e316e48994810a2696"
      },
      "downloads": -1,
      "filename": "PyEnigmatic-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "49ba14a850082648c3884b6153364bf3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11544,
      "upload_time": "2021-05-08T19:29:58",
      "upload_time_iso_8601": "2021-05-08T19:29:58.726645Z",
      "url": "https://files.pythonhosted.org/packages/f7/a0/08e8ca5f990a3efbbbddce82dfc7288913d3439357238a6e5d29e6ed7793/PyEnigmatic-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}