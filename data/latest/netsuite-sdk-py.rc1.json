{
  "info": {
    "author": "Precanto",
    "author_email": "sagar@precanto.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# netsuite-sdk-py\n\nNetsuite-sdk-py is a Python SDK. It uses the SOAP client library zeep(https://python-zeep.readthedocs.io/en/master/) for accessing NetSuite resources via the NetSuite SOAP web service SuiteTalk(http://www.netsuite.com/portal/platform/developer/suitetalk.shtml), but hides the complexity from the SDK user.\n\n## Installation\n\n    $ pip install netsuite-sdk-py\n\n## Get Started\n\nThere are two ways to access a NetSuite account via web services:\n\n- Use token-based auth (TBA) (within each request). This is the mechanism supported by this SDK.\n- Use email, password, role and account id to login and start a session. This is not supported by this SDK\n\n### Token-based Auth\n\nFirst, setup TBA credentials using environment variables.\n\n```\n# TBA credentials\nexport NS_ACCOUNT=xxxx\nexport NS_CONSUMER_KEY=xxxx\nexport NS_CONSUMER_SECRET=xxxx\nexport NS_TOKEN_KEY=xxxx\nexport NS_TOKEN_SECRET=xxxx\n\n```\n\nThe following snippet shows how to use TBA to initialize the SDK.\n\n```python\nimport os\nimport itertools\nimport json\nfrom netsuitesdk import NetSuiteConnection\n\ndef connect_tba():\n    NS_ACCOUNT = os.getenv('NS_ACCOUNT')\n    NS_CONSUMER_KEY = os.getenv('NS_CONSUMER_KEY')\n    NS_CONSUMER_SECRET = os.getenv('NS_CONSUMER_SECRET')\n    NS_TOKEN_KEY = os.getenv('NS_TOKEN_KEY')\n    NS_TOKEN_SECRET = os.getenv('NS_TOKEN_SECRET')\n    nc = NetSuiteConnection(\n        account=NS_ACCOUNT,\n        consumer_key=NS_CONSUMER_KEY,\n        consumer_secret=NS_CONSUMER_SECRET,\n        token_key=NS_TOKEN_KEY,\n        token_secret=NS_TOKEN_SECRET\n    )\n    return nc\n\nnc = connect_tba()\n\n# Use get_all methods to get all objects of certain types\ncurrencies = nc.currencies.get_all()\nlocations = nc.locations.get_all()\ndepartments = nc.departments.get_all()\nclassifications = nc.classifications.get_all()\nsubsidiaries = nc.subsidiaries.get_all()\nexpense_categories = nc.expense_categories.get_all()\nemployees = nc.employees.get_all()\nall_accounts = list(itertools.islice(nc.accounts.get_all_generator(), 100))\naccounts = [a for a in all_accounts if a['acctType'] == '_expense']\nvendor_bills = list(itertools.islice(nc.vendor_bills.get_all_generator(), 10))\nvendors = list(itertools.islice(nc.vendors.get_all_generator(), 10))\nvendor_payments = nc.vendor_payments.get_all()\n\ndata = {\n  'accounts': accounts,\n  'classifications': classifications,\n  'departments': departments,\n  'locations': locations,\n  'currencies': currencies,\n  'vendors': vendors,\n  'vendor_bills': vendor_bills,\n  'subsidiaries': subsidiaries,\n  'expense_categories': expense_categories,\n  'employees': employees,\n  'vendor_payments': vendor_payments\n}\nwith open('/tmp/netsuite.json', 'w') as oj:\n\toj.write(json.dumps(data, default=str, indent=2))\n\n# There are also generator methods to iterate over potentially large lists\nfor c in nc.currencies.get_all_generator():\n    print(c)\n\n# Get a specific object\nnc.currencies.get(internalId='1')\n\n# Post operation is only supported on vendor_bills, expense_reports, journal_entries and vendor_payments currently (see tests on how to construct vendor bill, expense report and journal entry)\nvb = {...}\nnc.vendor_bills.post(vb)\n\ner = {...}\nnc.expense_reports.post(er)\n\nje = {...}\nnc.journal_entries.post(je)\n\nvp = {...}\nnc.vendor_payments.post(vp)\n\n### Upsert Files\nfile = open('receipt.pdf', 'rb').read()\n\ncreated_folder = nc.folders.post(\n    {\n        \"externalId\": 'new-folder',\n        \"name\": 'Receipts'\n    }\n)\n\nuploaded_file = nc.files.post({\n    \"externalId\": \"receipt 1\",\n    \"name\": 'receipt.pdf',\n    'content': file,\n    'fileType': '_PDF',\n    \"folder\": {\n                \"name\": None,\n                \"internalId\": 695,\n                \"externalId\": 'new-folder',\n                \"type\": \"folder\"\n            }\n    }\n)\n```\n\n<!-- ### Password-based Auth\n\nPassword-based auth is less preferred. You can set the following environment variables for convenience:\n\n```\nexport NS_EMAIL=xxxx\nexport NS_PASSWORD=xxxx\nexport NS_ROLE=xxx\nexport NS_ACCOUNT=xxxx\nexport NS_APPID=xxxx\n```\n\nHere's a snippet that shows how the client can be initialized.\n\n```python\nimport os\n\nfrom netsuitesdk import NetSuiteClient\n\ndef connect_password():\n    NS_EMAIL = os.getenv(\"NS_EMAIL\")\n    NS_PASSWORD = os.getenv(\"NS_PASSWORD\")\n    NS_ROLE = os.getenv(\"NS_ROLE\")\n    NS_ACCOUNT = os.getenv(\"NS_ACCOUNT\")\n    NS_APPID = os.getenv(\"NS_APPID\")\n\n    ns = NetSuiteClient(account=NS_ACCOUNT)\n    ns.login(email=NS_EMAIL, password=NS_PASSWORD, role=NS_ROLE, application_id=NS_APPID)\n    return ns\n\nns = connect_password()\n\n# Do things with ns..\n\nns.logout()\n``` -->\n\n### Remarks and possible errors regarding authentication\n\n**Note:** NetSuite requires two-factor authentication (2FA) for\nall Administrator and other highly privileged roles in all NetSuite accounts.\nInstead, you can login with a non-highly privileged role or use\ntoken based authentication (TBA) with your requests. For TBA, see below.\n\nIf login fails, a NetSuiteLoginError is thrown.\n\nFor more information about NetSuite authentication, see:\n(https://docs.oracle.com/cloud/latest/netsuitecs_gs/NSATH/NSATH.pdf)\n\n<!-- ### Get Request\nA basic example (`ns` is a reference to a `NetSuiteClient` instance):\n```python\nvendor = ns.get('vendor', internalId=ref.internalId)\nns.print_values(vendor)\n```\n\n### Search\nTo perform a search request, use `NetSuite.search`.\nThe SDK provides some utility functions/classes:\n\n- `basic_stringfield_search`: A basic example (`ns` is a reference to a `NetSuiteClient` instance):\n```python\nrecords = ns.basic_stringfield_search(type_name='Vendor',\n                                attribute='entityId',\n                                value='Alexander Valley Vineyards',\n                                operator='is')\nprint(records[0].internalId)\n```\n\n- `PaginatedSearch` (in utils.py):\nIts usage can be seen inside the utility function `NetSuiteClient.paginated_search`\n\n### Upsert\nBasic example(`ns` is a reference to a `NetSuiteClient` instance):\n```python\nvendor = ns.Vendor()\nvendor.externalId = 'test_vendor'\nvendor.companyName = 'Another Test Inc.'\nref = ns.upsert(record=vendor)\n```\n\n### UpsertList\nBasic example(`ns` is a reference to a `NetSuiteClient` instance):\n```python\ncustomer1 = ns.Customer(externalId='customer', email='test1@example.com')\ncustomer2 = ns.Customer(externalId='another_customer', email='test2@example.com')\nns.upsertList(records=[customer1, customer2])\n``` -->\n\n## Integration Tests\n\nTo run integration tests, you will set both login and TBA credentials for an actual Netsuite account with the right permissions.\n\n```\n# TBA credentials\nexport NS_ACCOUNT=xxxx\nexport NS_CONSUMER_KEY=xxxx\nexport NS_CONSUMER_SECRET=xxxx\nexport NS_TOKEN_KEY=xxxx\nexport NS_TOKEN_SECRET=xxxx\n\npython -m pytest test/integration\n```\n\n## Code coverage\n\nTo get code coverage report, run this command:\n\n```python\npython -m pytest --cov=netsuitesdk\n\n<snipped output>\nName                            Stmts   Miss  Cover\n---------------------------------------------------\nnetsuitesdk/__init__.py             5      0   100%\nnetsuitesdk/client.py             343    198    42%\nnetsuitesdk/constants.py            3      0   100%\nnetsuitesdk/exceptions.py          14      5    64%\nnetsuitesdk/netsuite_types.py       2      0   100%\nnetsuitesdk/utils.py               47     19    60%\n---------------------------------------------------\nTOTAL                             414    222    46%\n```\n\nTo get an html report, run this command:\n\n```python\npython -m pytest --cov=netsuitesdk --cov-report html:cov_html\n```\n\nWe want to maintain code coverage of more than 95% for this project at all times.\n\n## Documentation\n\nDocumentation can be found in the docs/\\_build/html folder (open index.html) and soon in readthedocs.\nFor contributors: to build the documentation (cd to /docs and) run `make buildapi`\nas well as `make html`\n\n## Contributions\n\nWe are actively accepting contributions. Please mail shwetabh.kumar@fylehq.com if you wish to collaborate on this.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Precanto/py-netsuite-sdk",
    "keywords": "netsuite,api,python,sdk",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netsuite-sdk-py",
    "package_url": "https://pypi.org/project/netsuite-sdk-py/",
    "platform": "",
    "project_url": "https://pypi.org/project/netsuite-sdk-py/",
    "project_urls": {
      "Homepage": "https://github.com/Precanto/py-netsuite-sdk"
    },
    "release_url": "https://pypi.org/project/netsuite-sdk-py/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python SDK for accessing the NetSuite SOAP webservice",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12421002,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1626a18ef5f98100a428884105888bfdfdf5fe08dd72c71329ac9d93c32e82d",
          "md5": "b1c0bafd7621e9f7d188f5bbd0b7fd4d",
          "sha256": "a8945d36747db7aeacefc9f1af49dbc87f5e5a3f26a10ff620f6d7d635dcce75"
        },
        "downloads": -1,
        "filename": "netsuite_sdk_py-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1c0bafd7621e9f7d188f5bbd0b7fd4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36183,
        "upload_time": "2021-12-28T08:54:03",
        "upload_time_iso_8601": "2021-12-28T08:54:03.769578Z",
        "url": "https://files.pythonhosted.org/packages/c1/62/6a18ef5f98100a428884105888bfdfdf5fe08dd72c71329ac9d93c32e82d/netsuite_sdk_py-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9010e5423a6f684f05f38e85eefe36bab40acb5f50e1e001a65fc9ecc607da6f",
          "md5": "e84fa87305d17e43074ed9b2df74de13",
          "sha256": "0b3a793661ae1b7f3ac36cba5b4bb9807dcfe519bb41ed4370d1d7eace02f19b"
        },
        "downloads": -1,
        "filename": "netsuite-sdk-py-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e84fa87305d17e43074ed9b2df74de13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22724,
        "upload_time": "2021-12-28T08:54:06",
        "upload_time_iso_8601": "2021-12-28T08:54:06.061489Z",
        "url": "https://files.pythonhosted.org/packages/90/10/e5423a6f684f05f38e85eefe36bab40acb5f50e1e001a65fc9ecc607da6f/netsuite-sdk-py-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1626a18ef5f98100a428884105888bfdfdf5fe08dd72c71329ac9d93c32e82d",
        "md5": "b1c0bafd7621e9f7d188f5bbd0b7fd4d",
        "sha256": "a8945d36747db7aeacefc9f1af49dbc87f5e5a3f26a10ff620f6d7d635dcce75"
      },
      "downloads": -1,
      "filename": "netsuite_sdk_py-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1c0bafd7621e9f7d188f5bbd0b7fd4d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 36183,
      "upload_time": "2021-12-28T08:54:03",
      "upload_time_iso_8601": "2021-12-28T08:54:03.769578Z",
      "url": "https://files.pythonhosted.org/packages/c1/62/6a18ef5f98100a428884105888bfdfdf5fe08dd72c71329ac9d93c32e82d/netsuite_sdk_py-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9010e5423a6f684f05f38e85eefe36bab40acb5f50e1e001a65fc9ecc607da6f",
        "md5": "e84fa87305d17e43074ed9b2df74de13",
        "sha256": "0b3a793661ae1b7f3ac36cba5b4bb9807dcfe519bb41ed4370d1d7eace02f19b"
      },
      "downloads": -1,
      "filename": "netsuite-sdk-py-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e84fa87305d17e43074ed9b2df74de13",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22724,
      "upload_time": "2021-12-28T08:54:06",
      "upload_time_iso_8601": "2021-12-28T08:54:06.061489Z",
      "url": "https://files.pythonhosted.org/packages/90/10/e5423a6f684f05f38e85eefe36bab40acb5f50e1e001a65fc9ecc607da6f/netsuite-sdk-py-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}