{
  "info": {
    "author": "StartIT",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Networking",
      "Topic :: Utilities"
    ],
    "description": "# 신경.py\n\nAn asynchronous client library for [신경](https://github.com/queer/singyeong), a dynamic metadata-oriented service mesh.\n\n## WARNING\n\nIf 신경 is alpha quality software, then Singyeong.py is pre-alpha quality software. Expect things to break spectacularly.\n\n## Installing\nYou can get the library directly from PyPI:\n```shell\npython3 -m pip install -U singyeong.py\n```\nIf you are using Windows, then the following should be used instead:\n```shell\npy -3 -m pip install -U singyeong.py\n```\n### Install with faster json support\n\n```shell\npip install singyeong.py[ujson]\n```\n\n### Install with msgpack support\n\n```shell\npip install singyeong.py[msgpack]\n```\n\n\n## Event Reference\nThis section outlines the different types of events listened by Client.\n\n### How to register event?\n\nThere are two ways to register an event, the first way is through the use of Client.event(). \n```python\nimport singyeong\n\nclient = singyeong.Client(\"singyeong://receiver@localhost:4567\")\n\n@client.event\nasync def on_ready():\n    print('Ready!')\n```\n\nThe second way is through subclassing Client and overriding the specific events. For example:\n\n```python\nimport singyeong\n\nclass SingyeongClient(singyeong.Client):\n    async def on_raw_packet(self, message):\n        print(message.payload)\n\nclient = SingyeongClient(\"singyeong://receiver@localhost:4567\")\n```\n\nIf an event handler raises an exception, on_error() will be called to handle it, which defaults to print a traceback and ignoring the exception.\n\n### List of available events\n\n#### Client.on_ready()\nCalled when the 신경 has accepted you, and will send you packets. Usually after login is successful.\n\n#### Client.on_raw_packet(message)\nCalled when the 신경 has sent to you BROADCAST or SEND event. Example below shows how to get all data from the packet:\n```python\nimport singyeong\n\nclient = ...\n\n@client.event\nasync def on_raw_packet(message: singyeong.Message):\n    nonce = message.nonce  # Optional nonce, used by clients for req-res queries\n    payload = message.payload  # Whatever data you want to pass\n    timestamp = message.timestamp  # Timestamp of the packet when it was sent on the server. Can be used for ex. latency calculations\n    event_name = message.event_name  # May be \"BROADCAST\" or \"SEND\"\n```\n\n\n#### Client.on_error()\nUsually when an event raises an uncaught exception, a traceback is printed to stderr and the exception is ignored.\n```python\nimport traceback\n\ndef on_error(exc):\n    traceback.print_exc()\n```\nIf you want to change this behaviour and handle the exception for whatever reason yourself, this event can be overridden. Which, when done, will suppress the default action of printing the traceback.\n\n## Sending data\n\n```python\nimport singyeong\n\nclient = ...\n\nasync def func():\n    target = singyeong.Target(\n        application=\"application id here\",\n        restricted=True,\n        key=\"1234567890\",\n        droppable=True,\n        optional=True,\n        selector=singyeong.Minimum(\"key\"),\n        operators=[\n            singyeong.Equal(\"/key\", \"value\"),\n            singyeong.LessThanEqual(\"/key2\", 1234),\n            singyeong.And(\n                singyeong.GreaterThan(\"/key3\", 10),\n                singyeong.LessThan(\"/key3\", 20),\n            ),\n            singyeong.In(\"/key4\", [\"123\", \"456\"])\n        ],\n    )\n\n    payload = {\"foo\": \"bar\"}\n\n    await client.send(target, payload)  # or await client.broadcast(...)\n```\n\n\n### Keyword arguments for singyeong.Target():\n\n**application**: ID of the application to query against \\\n**restricted**: Whether or not to allow restricted-mode clients in the query results \\\n**key**: The key used for consistent-hashing when choosing a client from the output \\\n**droppable**: Whether or not this payload can be dropped if it isn't routable \\\n**optional**: Whether or not this query is optional, ie. will be ignored and a client\nwill be chosen randomly if it matches nothing. \\\n**selector**: The selector used. May be None. \\\n**operators**: The ops used for querying.\n\n### Available operators \n\nComparisonOperator(path, to)\n - singyeong.Equal(...)\n - singyeong.NotEqual(...)\n - singyeong.GreaterThan(...)\n - singyeong.GreaterThanEqual(...)\n - singyeong.LessThan(...)\n - singyeong.LessThanEqual(...)\n - singyeong.In(...)\n - singyeong.Contains(...)\n - singyeong.NotContains(...)\n\nLogicalOperator(comparison_op1, comparison_op2, comparison_op3, ... )\n - singyeong.And(...)\n - singyeong.Or(...)\n - singyeong.Nor(...)\n\n### Available selectors\n\n - singyeong.Minimum(name)\n - singyeong.Maximum(name)\n - singyeong.Average(name)\n\n## Run 신경 client \n\nYou can run 신경 client in the main loop or in the separate task (if you have e.g. discord.py running).\n\n### Running 신경 in the loop (recommended)\n\n```python\nimport singyeong\n\nclient = singyeong.Client(\"dsn\")\n\n...\n\nclient.run()\n```\n\n### Running 신경 in the background\n```python\nimport singyeong\nimport asyncio\n\nloop = asyncio.get_event_loop()\nclient = singyeong.Client(\"dsn\")\n\n...\n\nsingyeong_task = loop.create_task(client.connect())\n\ntry:\n    loop.run_until_complete(main())  # <- Your async function here\nfinally:    \n    singyeong_task.cancel()\n    loop.run_until_complete(\n        asyncio.gather(singyeong_task, return_exceptions=True)\n    )\n\n```\n\n### Running 신경 along with discord.py\nIn some cases, it is not required to manually close the task. E.g. discord.py automatically closes all tasks gracefully on the shutdown.\n\n```python\nimport discord\nimport singyeong\nimport asyncio\n\nloop = asyncio.get_event_loop()\n\nbot = discord.Client()\nclient = singyeong.Client(\"dsn\")\n\n...\n\nloop.create_task(client.connect())\nbot.run(\"token\")\n```\n\n## Logging\n\n\n신경.py logs errors and debug information via the [logging](https://docs.python.org/3/library/logging.html) python\nmodule. It is strongly recommended that the logging module is\nconfigured, as no errors or warnings will be output if it is not set up.\nConfiguration of the ``logging`` module can be as simple as:\n\n```python\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n```\n\nPlaced at the start of the application. This will output the logs from\ndiscord as well as other libraries that use the ``logging`` module\ndirectly to the console.\n\nThe optional ``level`` argument specifies what level of events to log\nout and can be any of ``CRITICAL``, ``ERROR``, ``WARNING``, ``INFO``, and\n``DEBUG`` and if not specified defaults to ``WARNING``.\n\nMore advanced setups are possible with the [logging](https://docs.python.org/3/library/logging.html) module. For\nexample to write the logs to a file called ``error.log`` instead of\noutputting them to the console the following snippet can be used:\n\n```python\nimport logging\n\nlogger = logging.getLogger(\"singyeong\")\nlogger.setLevel(logging.ERROR)\nhandler = logging.FileHandler(filename=\"error.log\", encoding=\"utf-8\", mode=\"w\")\nhandler.setFormatter(logging.Formatter(\"%(asctime)s:%(levelname)s:%(name)s: %(message)s\"))\nlogger.addHandler(handler)\n```\n\nThis is recommended, especially at verbose levels such as ``INFO``\nand ``DEBUG``, as there are a lot of events logged and it would clog the\nstdout of your program.\n\n\n\nFor more information, check the documentation and tutorial of the\n[logging](https://docs.python.org/3/library/logging.html) module.\n\n# To-Do\n - Metadata support :)\n - Queues\n - Unit tests\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/StartITBot/singyeong.py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "singyeong.py",
    "package_url": "https://pypi.org/project/singyeong.py/",
    "platform": "any",
    "project_url": "https://pypi.org/project/singyeong.py/",
    "project_urls": {
      "Homepage": "https://github.com/StartITBot/singyeong.py",
      "Issue tracker": "https://github.com/StartITBot/singyeong.py/issues",
      "StartIT Bot": "https://startit.fun/"
    },
    "release_url": "https://pypi.org/project/singyeong.py/1.0.1/",
    "requires_dist": [
      "setuptools (~=53.0.0)",
      "websockets (~=8.1)",
      "msgpack ; extra == 'msgpack'",
      "ujson ; extra == 'ujson'"
    ],
    "requires_python": ">=3.6",
    "summary": "An asynchronous client for 신경.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9675919,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59d04fb8778858c17f81bffa3c5b21d4821d9762833855cae02bd4a234d64dac",
          "md5": "c4af676b833475c33158c2dc9944e17d",
          "sha256": "07999ee2a104ae38d4ed5dc62bf328ee862df89bda2c4be34dbc85717e854b41"
        },
        "downloads": -1,
        "filename": "singyeong.py-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4af676b833475c33158c2dc9944e17d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13491,
        "upload_time": "2021-02-15T00:47:33",
        "upload_time_iso_8601": "2021-02-15T00:47:33.530156Z",
        "url": "https://files.pythonhosted.org/packages/59/d0/4fb8778858c17f81bffa3c5b21d4821d9762833855cae02bd4a234d64dac/singyeong.py-1.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Not working"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd179405c3248cd33077f33d88c8c496b2e8b4181d4fecf723f35ddba5380d5d",
          "md5": "8ced840060ea17a417496b70d6c62a0e",
          "sha256": "0b84974db66ebd2632b1970ba4e7d338e771c052261c7675924f612145a40a41"
        },
        "downloads": -1,
        "filename": "singyeong.py-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8ced840060ea17a417496b70d6c62a0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10795,
        "upload_time": "2021-02-15T00:47:34",
        "upload_time_iso_8601": "2021-02-15T00:47:34.805217Z",
        "url": "https://files.pythonhosted.org/packages/cd/17/9405c3248cd33077f33d88c8c496b2e8b4181d4fecf723f35ddba5380d5d/singyeong.py-1.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Not working"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db7a59812142d27e963503c1dec8e50603a66fa87fcc6bc050dfc3fda551fe07",
          "md5": "dc8718f651fde36a300f1dca0c4aed82",
          "sha256": "a54ee713632c408e325541081557b6d47dea06f6e9341a9b590044bba6c61716"
        },
        "downloads": -1,
        "filename": "singyeong.py-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc8718f651fde36a300f1dca0c4aed82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13660,
        "upload_time": "2021-02-16T21:50:20",
        "upload_time_iso_8601": "2021-02-16T21:50:20.453422Z",
        "url": "https://files.pythonhosted.org/packages/db/7a/59812142d27e963503c1dec8e50603a66fa87fcc6bc050dfc3fda551fe07/singyeong.py-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3d059eb472290537bfe7f86b238d7982e12c0685222bb562a0c3649e319eea7",
          "md5": "f9a44c980bb3d1a2b2f3804323aecbcf",
          "sha256": "c9d5ffe0f82e3f848736e3f0704de533c52500aac0a5a0b39a847f082bd9795d"
        },
        "downloads": -1,
        "filename": "singyeong.py-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f9a44c980bb3d1a2b2f3804323aecbcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11081,
        "upload_time": "2021-02-16T21:50:21",
        "upload_time_iso_8601": "2021-02-16T21:50:21.581043Z",
        "url": "https://files.pythonhosted.org/packages/d3/d0/59eb472290537bfe7f86b238d7982e12c0685222bb562a0c3649e319eea7/singyeong.py-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db7a59812142d27e963503c1dec8e50603a66fa87fcc6bc050dfc3fda551fe07",
        "md5": "dc8718f651fde36a300f1dca0c4aed82",
        "sha256": "a54ee713632c408e325541081557b6d47dea06f6e9341a9b590044bba6c61716"
      },
      "downloads": -1,
      "filename": "singyeong.py-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dc8718f651fde36a300f1dca0c4aed82",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13660,
      "upload_time": "2021-02-16T21:50:20",
      "upload_time_iso_8601": "2021-02-16T21:50:20.453422Z",
      "url": "https://files.pythonhosted.org/packages/db/7a/59812142d27e963503c1dec8e50603a66fa87fcc6bc050dfc3fda551fe07/singyeong.py-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3d059eb472290537bfe7f86b238d7982e12c0685222bb562a0c3649e319eea7",
        "md5": "f9a44c980bb3d1a2b2f3804323aecbcf",
        "sha256": "c9d5ffe0f82e3f848736e3f0704de533c52500aac0a5a0b39a847f082bd9795d"
      },
      "downloads": -1,
      "filename": "singyeong.py-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f9a44c980bb3d1a2b2f3804323aecbcf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11081,
      "upload_time": "2021-02-16T21:50:21",
      "upload_time_iso_8601": "2021-02-16T21:50:21.581043Z",
      "url": "https://files.pythonhosted.org/packages/d3/d0/59eb472290537bfe7f86b238d7982e12c0685222bb562a0c3649e319eea7/singyeong.py-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}