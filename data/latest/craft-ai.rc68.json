{
  "info": {
    "author": "craft ai",
    "author_email": "contact@craft.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# **craft ai** API python client #\n\n[![PyPI](https://img.shields.io/pypi/v/craft-ai.svg?style=flat-square)](https://pypi.python.org/pypi?:action=display&name=craft-ai) [![Build Status](https://github.com/craft-ai/craft-ai-client-python/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/craft-ai/craft-ai-client-python/actions) [![License](https://img.shields.io/badge/license-BSD--3--Clause-42358A.svg?style=flat-square)](LICENSE) [![python](https://img.shields.io/pypi/pyversions/craft-ai.svg?style=flat-square)](https://pypi.python.org/pypi?:action=display&name=craft-ai)\n\n[**craft ai**'s Explainable AI API](http://craft.ai) enables product & operational teams to quickly deploy and run explainable AIs. craft ai decodes your data streams to deliver self-learning services.\n\n## Get Started!\n\n### 1 - Create a project\n\nOnce your account is setup, let's create your first **project**! Go in the 'Projects' tab in the **craft ai** control center at [`https://beta.craft.ai/inspector`](https://beta.craft.ai/inspector), and press **Create a project**.\n\nOnce it's done, you can click on your newly created project to retrieve its tokens. There are two types of tokens: **read** and **write**. You'll need the **write** token to create, update and delete your agent.\n\n### 2 - Setup\n\n#### Install ####\n\n#### [PIP](https://pypi.python.org/pypi/pip/) / [PyPI](https://pypi.python.org/pypi) ####\n\nLet's first install the package from pip.\n\n```sh\npip install --upgrade craft-ai\n```\n_Depending on your setup you may need to use `pip3` or `pipenv` instead of `pip`._\n\nThen import it in your code\n\n```python\nimport craft_ai\n```\n> This client also provides helpers to use it in conjuction with [pandas](#pandas-support)\n\n#### Initialize ####\n\n```python\nclient = craft_ai.Client({\n  \"token\": \"{token}\"\n})\n```\n\n### 3 - Create an agent\n\n**craft ai** is based on the concept of **agents**. In most use cases, one agent is created per user or per device.\n\nAn agent is an independent data set that stores the history of the **context** of its user or device's context, and learns which **prediction** to make based on the evolution of this context.\n\nIn this example, we will create an agent that learns the **predictive model** of a light bulb based on the time of the day and the number of people in the room. This dataset is treated as continuous context updates. If your data is more like events than context changes, please refer to the [Advanced Configuration section](#advanced-configuration) to know how to configure `operations_as_events` for your agent. Here, the agent's context has 4 properties or features:\n\n- `peopleCount` which is a `continuous` property,\n- `timeOfDay` which is a `time_of_day` property,\n- `timezone`, a property of type `timezone` needed to generate proper values for `timeOfDay` (cf. the [context properties type section](#context-properties-types) for further information),\n- and finally `lightbulbState` which is an `enum` property that is also the output.\n\n> :information_source: `timeOfDay` is auto-generated, you will find more information below.\n\n```python\nagent_id = \"my_first_agent\"\nconfiguration = {\n  \"context\": {\n    \"peopleCount\": {\n      \"type\": \"continuous\"\n    },\n    \"timeOfDay\": {\n      \"type\": \"time_of_day\"\n    },\n    \"timezone\": {\n      \"type\": \"timezone\"\n    },\n    \"lightbulbState\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"model_type\": \"decisionTree\",\n  \"output\": [\"lightbulbState\"]\n}\n\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n```\n\nPretty straightforward to test! Open [`https://beta.craft.ai/inspector`](https://beta.craft.ai/inspector), select you project and your agent is now listed.\n\nNow, if you run that a second time, you'll get an error: the agent `'my_first_agent'` was already created. Let's see how we can delete it before recreating it.\n\n```python\nagent_id = \"my_first_agent\"\nclient.delete_agent(agent_id)\nprint(\"Agent\", agent_id, \"no longer exists\")\n\nconfiguration = ...\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n```\n\n_For further information, check the ['create agent' reference documentation](#create)._\n\n### 4 - Add context operations\n\nWe have now created our first agent but it is not able to do much, yet. To learn a model it needs to be provided with data, in **craft ai** these are called context operations.\n\nIn the following we add 8 operations:\n\n1. The initial one sets the initial state of the agent, on July 25 2016 at 5:30, in Paris, nobody is there and the light is off;\n2. At 7:02, someone enters the room the light is turned on;\n3. At 7:15, someone else enters the room;\n4. At 7:31, the light is turned off;\n5. At 8:12, everyone leaves the room;\n6. At 19:23, 2 persons enter the room;\n7. At 22:35, the light is turned on;\n8. At 23:06, everyone leaves the room and the light is turned off.\n\n\n```python\nagent_id = \"my_first_agent\"\nclient.delete_agent(agent_id)\nprint(\"Agent\", agent_id, \"no longer exists\")\n\nconfiguration = ...\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\ncontext_list = [\n  {\n    \"timestamp\": 1469410200,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 0,\n      \"lightbulbState\": \"OFF\"\n    }\n  },\n  {\n    \"timestamp\": 1469415720,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 1,\n      \"lightbulbState\": \"ON\"\n    }\n  },\n  {\n    \"timestamp\": 1469416500,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 2,\n      \"lightbulbState\": \"ON\"\n    }\n  },\n  {\n    \"timestamp\": 1469417460,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 2,\n      \"lightbulbState\": \"OFF\"\n    }\n  },\n  {\n    \"timestamp\": 1469419920,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 0,\n      \"lightbulbState\": \"OFF\"\n    }\n  },\n  {\n    \"timestamp\": 1469460180,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 2,\n      \"lightbulbState\": \"OFF\"\n    }\n  },\n  {\n    \"timestamp\": 1469471700,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 2,\n      \"lightbulbState\": \"ON\"\n    }\n  },\n  {\n    \"timestamp\": 1469473560,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 0,\n      \"lightbulbState\": \"ON\"\n    }\n  }\n]\nclient.add_agent_operations(agent_id, context_list)\nprint(\"Successfully added initial operations to agent\", agent_id, \"!\")\n```\n\nIn real-world applications you will probably do the same kind of thing when the agent is created, and then regularly throughout the lifetime of the agent with newer data.\n\n_For further information, check the ['add context operations' reference documentation](#add-operations)._\n\n### 5 - Compute the decision tree\n\nThe agent has acquired a context history, we can now compute a model (in this case a decision tree) from it! A decision tree models the output, allowing us to estimate what the output would be in a given context.\n\nThe decision tree is computed at a given timestamp, which means it will consider the data from the creation of this agent up to this moment. Let's first try to compute the decision tree at midnight on July 26, 2016.\n\n```python\nagent_id = \"my_first_agent\"\n\nclient.delete_agent(agent_id)\nprint(\"Agent\", agent_id, \"no longer exists\")\n\nconfiguration = ...\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\ncontext_list = ...\nclient.add_agent_operations(agent_id, context_list)\nprint(\"Successfully added initial operations to agent\", agent_id, \"!\")\n\ndt_timestamp = 1469476800\ndecision_tree = client.get_agent_decision_tree(agent_id, dt_timestamp)\nprint(\"The full decision tree at timestamp\", dt_timestamp, \"is the following:\")\nimport json\nprint(json.dumps(decision_tree,indent=2))\n\"\"\" Outputted tree is the following\n  {\n    \"_version\":\"2.0.0\",\n    \"trees\":{\n      \"lightbulbState\":{\n        \"output_values\" : [\"OFF\", \"ON\"],\n        \"children\":[\n          {\n            \"children\":[\n              {\n                \"prediction\":{\n                  \"confidence\":0.6774609088897705,\n                  \"distribution\":[0.8, 0.2],\n                  \"value\":\"OFF\",\n                  \"nb_samples\": 5\n                },\n                \"decision_rule\":{\n                  \"operand\":0.5,\n                  \"operator\":\"<\",\n                  \"property\":\"peopleCount\"\n                }\n              },\n              {\n                \"prediction\":{\n                  \"confidence\":0.8630361557006836,\n                  \"distribution\":[0.1, 0.9],\n                  \"value\":\"ON\",\n                  \"nb_samples\": 10\n                },\n                \"decision_rule\":{\n                  \"operand\":0.5,\n                  \"operator\":\">=\",\n                  \"property\":\"peopleCount\"\n                }\n              }\n            ],\n            \"decision_rule\":{\n              \"operand\":[\n                5,\n                5.6666665\n              ],\n              \"operator\":\"[in[\",\n              \"property\":\"timeOfDay\"\n            }\n          },\n          {\n            \"children\":[\n              {\n                \"prediction\":{\n                  \"confidence\":0.9947378635406494,\n                  \"distribution\":[1.0, 0.0],\n                  \"value\":\"ON\",\n                  \"nb_samples\": 10\n                },\n                \"decision_rule\":{\n                  \"operand\":[\n                    5.6666665,\n                    20.666666\n                  ],\n                  \"operator\":\"[in[\",\n                  \"property\":\"timeOfDay\"\n                }\n              },\n              {\n                \"children\":[\n                  {\n                    \"prediction\":{\n                      \"confidence\":0.969236433506012,\n                      \"distribution\":[0.95, 0.05],\n                      \"value\":\"OFF\",\n                      \"nb_samples\": 10\n                    },\n                    \"decision_rule\":{\n                      \"operand\":1,\n                      \"operator\":\"<\",\n                      \"property\":\"peopleCount\"\n                    }\n                  },\n                  {\n                    \"prediction\":{\n                      \"confidence\":0.8630361557006836,\n                      \"distribution\":[0.2, 0.8],\n                      \"value\":\"ON\",\n                      \"nb_samples\": 15\n                    },\n                    \"decision_rule\":{\n                      \"operand\":1,\n                      \"operator\":\">=\",\n                      \"property\":\"peopleCount\"\n                    }\n                  }\n                ],\n                \"decision_rule\":{\n                  \"operand\":[\n                    20.666666,\n                    5\n                  ],\n                  \"operator\":\"[in[\",\n                  \"property\":\"timeOfDay\"\n                }\n              }\n            ],\n            \"decision_rule\":{\n              \"operand\":[\n                5.6666665,\n                5\n              ],\n              \"operator\":\"[in[\",\n              \"property\":\"timeOfDay\"\n            }\n          }\n        ]\n      }\n    },\n    \"configuration\":{\n      \"time_quantum\":600,\n      \"learning_period\":9000000,\n      \"context\":{\n        \"peopleCount\":{\n          \"type\":\"continuous\"\n        },\n        \"timeOfDay\":{\n          \"type\":\"time_of_day\",\n          \"is_generated\":True\n        },\n        \"timezone\":{\n          \"type\":\"timezone\"\n        },\n        \"lightbulbState\":{\n          \"type\":\"enum\"\n        }\n      },\n      \"output\":[\n        \"lightbulbState\"\n      ]\n    }\n  }\n\"\"\"\n```\n\nTry to retrieve the tree at different timestamps to see how it gradually learns from the new operations. To visualize the trees, use the [inspector](https://beta.craft.ai/inspector)!\n\n_For further information, check the ['compute decision tree' reference documentation](#compute)._\n\n### 6 - Make a decision\n\nOnce the decision tree is computed it can be used to make a decision or prediction. In our case it is basically answering this type of question: \"What is the anticipated **state of the lightbulb** at 7:15 if there are 2 persons in the room ?\".\n\n```python\nagent_id = \"my_first_agent\"\n\nclient.delete_agent(agent_id)\nprint(\"Agent\", agent_id, \"no longer exists\")\n\nconfiguration = ...\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\ncontext_list = ...\nclient.add_agent_operations(agent_id, context_list)\nprint(\"Successfully added initial operations to agent\", agent_id, \"!\")\n\ndt_timestamp = 1469476800\ndecision_tree = client.get_agent_decision_tree(agent_id, dt_timestamp)\nprint(\"The decision tree at timestamp\", dt_timestamp, \"is the following:\")\nprint(decision_tree)\n\ncontext = {\n  \"timezone\": \"+02:00\",\n  \"timeOfDay\": 7.25,\n  \"peopleCount\": 2\n}\nresp = client.decide(decision_tree, context)\nprint(\"The anticipated lightbulb state is:\", resp[\"output\"][\"lightbulbState\"][\"predicted_value\"])\n```\n\n_For further information, check the ['make decision' reference documentation](#make-decision)._\n\n### Python starter kit ###\n\nIf you prefer to get started from an existing code base, the official Python starter kit can get you there! Retrieve the sources locally and follow the \"readme\" to get a fully working **Wellness Coach** example using _real-world_ data.\n\n> [:package: _Get the **craft ai** Python Starter Kit_](https://github.com/craft-ai/craft-ai-starterkit-python)\n\n## API\n\n### Project\n\n**craft ai** agents belong to **projects**. In the current version, each identified users defines a owner and can create projects for themselves, in the future we will introduce shared projects.\n\n### Configuration\n\nEach agent has a configuration defining:\n\n- the context schema, i.e. the list of property keys and their type (as defined in the following section),\n- the output properties, i.e. the list of property keys on which the agent makes decisions,\n- the model type, either decision tree or gradient boosting.\n\n#### Context properties types\n\n##### Base types: `enum`, `continuous` and `boolean`\n\n`enum`, `continuous` and `boolean` are the three base **craft ai** types:\n\n- an `enum` property is a string;\n- a `continuous` property is a real number.\n- a `boolean` property is a boolean value: `true` or `false`\n\n> :warning: the absolute value of a `continuous` property must be less than 10<sup>20</sup>.\n\nHere is a simple example of configuration for decision tree:\n```json\n{\n  \"context\": {\n    \"timezone\": {\n      \"type\": \"enum\"\n    },\n    \"temperature\": {\n      \"type\": \"continuous\"\n    },\n    \"lightbulbState\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"model_type\": \"decisionTree\",\n  \"output\": [\"lightbulbState\"],\n  \"time_quantum\": 100,\n  \"learning_period\": 108000\n}\n```\n\nAnd another simple example of configuration for gradient boosting:\n```json\n{\n  \"context\": {\n    \"timezone\": {\n      \"type\": \"enum\"\n    },\n    \"temperature\": {\n      \"type\": \"continuous\"\n    },\n    \"lightbulbState\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"model_type\": \"boosting\",\n  \"output\": [\"lightbulbState\"],\n  \"learning_rate\": 1,\n  \"num_iterations\": 50,\n  \"time_quantum\": 100,\n  \"learning_period\": 108000\n}\n```\n\n##### Time types: `timezone`, `time_of_day`, `day_of_week`, `day_of_month` and `month_of_year`\n\n**craft ai** defines the following types related to time:\n\n- a `time_of_day` property is a real number belonging to **[0.0; 24.0[**, each value represents the number of hours in the day since midnight (e.g. 13.5 means 13:30),\n- a `day_of_week` property is an integer belonging to **[0, 6]**, each value represents a day of the week starting from Monday (0 is Monday, 6 is Sunday).\n- a `day_of_month` property is an integer belonging to **[1, 31]**, each value represents a day of the month.\n- a `month_of_year` property is an integer belonging to **[1, 12]**, each value represents a month of the year.\n- a `timezone` property can be:\n  * a string value representing the timezone as an offset from UTC, supported formats are:\n\n    - **±[hh]:[mm]**,\n    - **±[hh][mm]**,\n    - **±[hh]**,\n\n    where `hh` represent the hour and `mm` the minutes from UTC (eg. `+01:30`)), between `-12:00` and\n    `+14:00`.\n\n  * an integer belonging to **[-720, 840]** which represents the timezone as an offset from UTC:\n\n    - in hours if the integer belongs to **[-15, 15]**\n    - in minutes otherwise\n\n  * an abbreviation among the following:\n\n    - **UTC** or **Z** Universal Time Coordinated,\n    - **GMT** Greenwich Mean Time, as UTC,\n    - **BST** British Summer Time, as UTC+1 hour,\n    - **IST** Irish Summer Time, as UTC+1,\n    - **WET** Western Europe Time, as UTC,\n    - **WEST** Western Europe Summer Time, as UTC+1,\n    - **CET** Central Europe Time, as UTC+1,\n    - **CEST** Central Europe Summer Time, as UTC+2,\n    - **EET** Eastern Europe Time, as UTC+2,\n    - **EEST** Eastern Europe Summer Time, as UTC+3,\n    - **MSK** Moscow Time, as UTC+3,\n    - **MSD** Moscow Summer Time, as UTC+4,\n    - **AST** Atlantic Standard Time, as UTC-4,\n    - **ADT** Atlantic Daylight Time, as UTC-3,\n    - **EST** Eastern Standard Time, as UTC-5,\n    - **EDT** Eastern Daylight Saving Time, as UTC-4,\n    - **CST** Central Standard Time, as UTC-6,\n    - **CDT** Central Daylight Saving Time, as UTC-5,\n    - **MST** Mountain Standard Time, as UTC-7,\n    - **MDT** Mountain Daylight Saving Time, as UTC-6,\n    - **PST** Pacific Standard Time, as UTC-8,\n    - **PDT** Pacific Daylight Saving Time, as UTC-7,\n    - **HST** Hawaiian Standard Time, as UTC-10,\n    - **AKST** Alaska Standard Time, as UTC-9,\n    - **AKDT** Alaska Standard Daylight Saving Time, as UTC-8,\n    - **AEST** Australian Eastern Standard Time, as UTC+10,\n    - **AEDT** Australian Eastern Daylight Time, as UTC+11,\n    - **ACST** Australian Central Standard Time, as UTC+9.5,\n    - **ACDT** Australian Central Daylight Time, as UTC+10.5,\n    - **AWST** Australian Western Standard Time, as UTC+8.\n\n> :information_source: By default, the values of the `time_of_day` and `day_of_week`\n> properties are generated from the [`timestamp`](#timestamp) of an agent's\n> state and the agent's current `timezone`. Therefore, whenever you use generated\n> `time_of_day` and/or `day_of_week` in your configuration, you **must** provide a\n> `timezone` value in the context. There can only be one `timezone` property.\n>\n> If you wish to provide their values manually, add `is_generated: false` to the\n> time types properties in your configuration. In this case, since you provide the values, the\n> `timezone` property is not required, and you must update the context whenever\n> one of these time values changes in a way that is significant for your system.\n\n##### Examples\n\nLet's take a look at the following configuration. It is designed to model the **color** of a lightbulb (the `lightbulbColor` property, defined as an output) depending on the **outside light intensity** (the `lightIntensity` property), the **TV status** (the `TVactivated` property) the **time of the day** (the `time` property) and the **day of the week** (the `day` property).\n\n`day` and `time` values will be generated automatically, hence the need for\n`timezone`, the current Time Zone, to compute their value from given\n[`timestamps`](#timestamp).\n\nThe `time_quantum` is set to 100 seconds, which means that if the lightbulb\ncolor is changed from red to blue then from blue to purple in less that 1\nminutes and 40 seconds, only the change from red to purple will be taken into\naccount.\n\nThe `learning_period` is set to 108 000 seconds (one month) , which means that\nthe state of the lightbulb from more than a month ago can be ignored when learning\nthe decision model.\n\n```json\n{\n  \"context\": {\n    \"lightIntensity\": {\n      \"type\": \"continuous\"\n    },\n    \"TVactivated\": {\n      \"type\": \"boolean\"\n    },\n    \"time\": {\n      \"type\": \"time_of_day\"\n    },\n    \"day\": {\n      \"type\": \"day_of_week\"\n    },\n    \"timezone\": {\n      \"type\": \"timezone\"\n    },\n    \"lightbulbColor\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"model_type\": \"decisionTree\",\n  \"output\": [\"lightbulbColor\"],\n  \"time_quantum\": 100,\n  \"learning_period\": 108000\n}\n```\n\nIn this second example, the `time` property is not generated, no property of\ntype `timezone` is therefore needed. However values of `time` must be manually\nprovided continuously.\n\n```json\n{\n  \"context\": {\n    \"time\": {\n      \"type\": \"time_of_day\",\n      \"is_generated\": false\n    },\n    \"lightIntensity\": {\n      \"type\": \"continuous\"\n    },\n      \"TVactivated\": {\n      \"type\": \"boolean\"\n    },\n    \"lightbulbColor\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"model_type\": \"decisionTree\",\n  \"output\": [\"lightbulbColor\"],\n  \"time_quantum\": 100,\n  \"learning_period\": 108000\n}\n```\n\n### Timestamp\n\n**craft ai** API heavily relies on `timestamps`. A `timestamp` is an instant represented as a [Unix time](https://en.wikipedia.org/wiki/Unix_time), that is to say the amount of seconds elapsed since Thursday, 1 January 1970 at midnight UTC. Note that some programming languages use timestamps in milliseconds, but here we only refer to timestamps **in seconds**. In most programming languages this representation is easy to retrieve, you can refer to [**this page**](https://github.com/techgaun/unix-time/blob/master/README.md) to find out how.\n\n#### `craft_ai.Time` #####\n\nThe `craft_ai.Time` class facilitates the handling of time types in **craft ai**. It is able to extract the different **craft ai** formats from various _datetime_ representations, thanks to [datetime](https://docs.python.org/3.5/library/datetime.html).\n\n```python\n# From a unix timestamp and an explicit UTC offset\nt1 = craft_ai.Time(1465496929, \"+10:00\")\n\n# t1 == {\n#   utc: \"2016-06-09T18:28:49.000Z\",\n#   timestamp: 1465496929,\n#   day_of_week: 4,\n#   time_of_day: 4.480277777777778,\n#   timezone: \"+10:00\"\n# }\n\n# From a unix timestamp and using the local UTC offset.\nt2 = craft_ai.Time(1465496929)\n\n# Value are valid if in Paris !\n# t2 == {\n#   utc: \"2016-06-09T18:28:49.000Z\",\n#   timestamp: 1465496929,\n#   day_of_week: 3,\n#   time_of_day: 20.480277777777776,\n#   timezone: \"+02:00\"\n# }\n\n# From a ISO 8601 string. Note that here it should not have any \":\" in the timezone part\nt3 = craft_ai.Time(\"1977-04-22T01:00:00-0500\")\n\n# t3 == {\n#   utc: \"1977-04-22T06:00:00.000Z\",\n#   timestamp: 230536800,\n#   day_of_week: 4,\n#   time_of_day: 1,\n#   timezone: \"-05:00\"\n# }\n\n# Retrieve the current time with the local UTC offset\nnow = craft_ai.Time()\n\n# Retrieve the current time with the given UTC offset\nnowP5 = craft_ai.Time(timezone=\"+05:00\")\n```\n\n### Configuration parameters\n\nThe following configuration parameters can be set in specific cases.\n\n#### Common parameters\n\n- **`model_type`**, i.e. the selected model. Values can be `decisionTree` or `boosting`. If not set, the default value is `decisionTree`.\n- **`time_quantum`**, i.e. the minimum amount of time, in seconds, that is meaningful for an agent; context updates occurring faster than this quantum won't be taken into account. As a rule of thumb, you should always choose the largest value that seems right and reduce it, if necessary, after some tests. Default value is 600. This parameter is ignored if `operations_as_events` is set to `true`.\n- **`operations_as_events`** is a boolean, either `true` or `false`. The default value is `false`. If you are not sure what to do, set it to `true`. If it is set to false, context operations are treated as state changes, and models are based on the resulting continuous state including between data points, using `time_quantum` as the sampling step. If it is set to true, context operations are treated as observations or events, and models are based on these data points directly, as in most machine learning libraries. If `operations_as_events` is `true`, `max_training_samples` and `learning_period` for decision trees must be set, and `time_quantum` is ignored because events have no duration.\n- **`max_training_samples`** is a positive integer. It **can and must** be set only if `operations_as_events` is `true`. It defines the maximum number of events on which a model can be based. It is complementary to `learning_period` for decision trees, which limits the maximum age of data on which a model is based.\n- **`min_samples_per_leaf`** is a positive integer. It defines the minimum number of samples in a tree leaf. It is complementary to `tree_max_depth` in preventing the tree from overgrowing, hence limiting overfitting. By default, `min_samples_per_leaf` is set to 4.\n- **`tree_max_depth`** is a positive integer. It defines the maximum depth of decision trees, which is the maximum distance between the root node and a leaf (terminal) node. A depth of 0 means that the tree is made of a single root node. By default, `tree_max_depth` is set to 6 if the output is categorical (e.g. `enum`), or to 4 if the output is numerical (e.g. `continuous`) or if it's a boosting configuration.\n\n#### Decision tree parameters\n\n- **`learning_period`**, i.e. the maximum amount of time, in seconds, that matters for an agent; the agent's decision model can ignore context that is older than this duration. You should generally choose the smallest value that fits this description. Default value is 15000 time quantums and the maximum learning_period value is 55000 \\* time_quantum.\n\n#### Boosting parameters\n\n- **`learning_rate`** is a positive float. It defines the step size shrinkage used between tree updates to prevent overfitting. Its value must be in `]0;1]`.\n- **`num_iterations`** is a positive integer. It describes the number of trees that would be created for the forest.\n\n### Agent\n\n#### Create\n\nCreate a new agent, and define its [configuration](#configuration).\n\n> The agent's identifier is a case sensitive string between 1 and 36 characters long. It only accepts letters, digits, hyphen-minuses and underscores (i.e. the regular expression `/[a-zA-Z0-9_-]{1,36}/`).\n\n```python\nclient.create_agent(\n  { # The configuration\n    \"context\": {\n      \"peopleCount\": {\n        \"type\": \"continuous\"\n      },\n      \"timeOfDay\": {\n        \"type\": \"time_of_day\"\n      },\n      \"timezone\": {\n        \"type\": \"timezone\"\n      },\n      \"lightbulbState\": {\n        \"type\": \"enum\"\n      }\n    },\n    \"model_type\": \"decisionTree\",\n    \"output\": [ \"lightbulbState\" ],\n    \"time_quantum\": 100,\n    \"learning_period\": 108000\n  },\n  \"my_new_agent\" # id for the agent, if undefined a random id is generated\n)\n```\n\n#### Delete\n\n```python\nclient.delete_agent(\n  \"my_new_agent\" # The agent id\n)\n```\n\n#### Retrieve\n\n```python\nclient.get_agent(\n  \"my_new_agent\" # The agent id\n)\n```\n\n#### List\n\n```python\nclient.list_agents()\n# Return a list of agents' name\n# Example: [ \"my_new_agent\", \"joyful_octopus\", ... ]\n\n```\n\n#### Create and retrieve shared url\n\nCreate and get a shareable url to view an agent tree.\nOnly one url can be created at a time.\n\n```python\nclient.get_shared_agent_inspector_url(\n  \"my_new_agent\", # The agent id.\n  1464600256 # optional, the timestamp for which you want to inspect the tree.\n)\n```\n\n#### Delete shared url\n\nDelete a shareable url.\nThe previous url cannot access the agent tree anymore.\n\n```python\nclient.delete_shared_agent_inspector_url(\n  'my_new_agent' # The agent id.\n)\n```\n\n\n\n### Generator\n\nThe craft ai API lets you generate models built on data from one or several agents by creating a generator. It is useful to:\n  - test several hyper-parameters and features sets without reloading all the data for each try\n  - gather data from different agents to make new models based on several data sources, enhancing the possible data combinations and allowing you to inspect the global behavior across your agents\n\nThe data stream(s) used by a generator are defined by specifying a list of agents as a filter in its configuration. Other than the filter, the configuration of a generator is similar to an agent's configuration. But it has to verify some additional properties:\n\n- Every feature defined in the context configuration of the generator must be present in **all** the agent that match the filter, with the same context types.\n- The parameter `operations_as_events` must be set to `true`.\n- It follows that the parameters `max_training_samples`, and `learning_period` in the case of decision trees, must be set.\n- The agent names provided in the list must be valid agent identifiers.\n\n#### Create\n\nCreate a new generator, and define its [configuration](#configuration).\n\n> The generator's identifier is a case sensitive string between 1 and 36 characters long. It only accepts letters, digits, hyphen-minuses and underscores (i.e. the regular expression `/[a-zA-Z0-9_-]{1,36}/`).\n\n```python\nGENERATOR_NAME = \"smarthome_gen\"\nGENERATOR_FILTER = [\"smarthome\"]\nGENERATOR_CONFIGURATION = {\n  \"context\": {\n    \"light\": {\n      \"type\": \"enum\"\n    },\n    \"tz\": {\n      \"type\": \"timezone\"\n    },\n    \"movement\": {\n      \"type\": \"continuous\"\n    },\n    \"time\": {\n      \"type\": \"time_of_day\",\n      \"is_generated\": True\n    }\n  },\n  \"model_type\": \"decisionTree\",\n  \"output\": [\n    \"light\"\n  ],\n  \"learning_period\": 1500000,\n  \"max_training_samples\": 15000,\n  \"operations_as_events\": True,\n  \"filter\": GENERATOR_FILTER\n}\n\nclient.create_generator(\n  GENERATOR_CONFIGURATION, # A valid configuration.\n  GENERATOR_NAME # The generator id.\n)\n```\n\n#### Delete\n\n```python\nGENERATOR_NAME = 'smarthome_gen'\nclient.delete_generator(\n  GENERATOR_NAME\n)\n```\n\n#### Retrieve\n\n```python\nGENERATOR_NAME = 'smarthome_gen'\nclient.get_generator(\n  GENERATOR_NAME\n)\n\n### Ouputted info is the following\n\"\"\"\n{\n  \"_version\": \"2.0.0\"\n  \"id\": \"smarthome_gen\",\n  \"configuration\": {\n    \"operations_as_events\": True,\n    \"learning_period\": 1500000,\n    \"max_training_samples\": 15000,\n    \"context\": {\n      \"light\": {\n        \"type\": \"enum\"\n      },\n      \"tz\": {\n        \"type\": \"timezone\"\n      },\n      \"movement\": {\n        \"type\": \"continuous\"\n      },\n      \"time\": {\n        \"type\": \"time_of_day\",\n        \"is_generated\": True\n      }\n    },\n    \"output\": [\n      \"light\"\n    ],\n    \"filter\": [\n      \"smarthome\"\n    ]\n  },\n  \"firstTimestamp\": 1254836352,\n  \"lastTimestamp\": 1272721522,\n  \"agents\": [\n    \"smarthome\"\n  ],\n}\n\"\"\"\n###\n\n```\n\n#### Retrieve generators list\n\n```python\nclient.list_generators() # Return the list of generators in the project.\n```\n\n#### List operations in the generator\n\nRetrieve the context operations of agents matching the generator's filter. Each operation also contains the identifier of the agent for which it was added, in the `agent_id` property.\n\n```python\nGENERATOR_NAME = 'smarthome_gen'\nSTART_TIMESTAMP = 1478894153\nEND_TIMESTAMP = 1478895266\n\nclient.get_generator_operations(\n  GENERATOR_NAME,   # The generator id\n  START_TIMESTAMP,  # Optional, the **start** timestamp from which the\n                    # operations are retrieved (inclusive bound)\n  END_TIMESTAMP     # Optional, the **end** timestamp up to which the\n                    # operations are retrieved (inclusive bound)\n)\n```\n\n> This call can generate multiple requests to the craft ai API as results are paginated.\n\n### Context\n\n#### Add operations\n\n```python\nclient.add_agent_operations(\n  \"my_new_agent\", # The agent id\n  [ # The list of context operations\n    {\n      \"timestamp\": 1469410200,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 0,\n        \"lightbulbState\": \"OFF\"\n      }\n    },\n    {\n      \"timestamp\": 1469415720,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 1,\n        \"lightbulbState\": \"ON\"\n      }\n    },\n    {\n      \"timestamp\": 1469416500,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 2,\n        \"lightbulbState\": \"ON\"\n      }\n    },\n    {\n      \"timestamp\": 1469417460,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 2,\n        \"lightbulbState\": \"OFF\"\n      }\n    },\n    {\n      \"timestamp\": 1469419920,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 0,\n        \"lightbulbState\": \"OFF\"\n      }\n    },\n    {\n      \"timestamp\": 1469460180,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 2,\n        \"lightbulbState\": \"OFF\"\n      }\n    },\n    {\n      \"timestamp\": 1469471700,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 2,\n        \"lightbulbState\": \"ON\"\n      }\n    },\n    {\n      \"timestamp\": 1469473560,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 0,\n        \"lightbulbState\": \"ON\"\n      }\n    }\n  ]\n)\n```\n\n##### Missing Values\n\nIf the value of a base type property is **missing**, you can send a `null` value. **craft ai** will take into account as much information as possible from this incomplete context.\n\nA context operation with a missing value looks like:\n```json\n[\n  {\n    \"timestamp\": 1469415720,\n    \"context\": {\n      \"peopleCount\": \"OFF\",\n      \"lightbulbState\": null\n    }\n  },\n  ...\n]\n```\n\n##### Optional Values\n\nIf the value of an **optional** property is not filled at some point—as should be expected from an optional value—send the empty JSON Object `{}` to **craft ai**:\n\nA context with an optional value looks like:\n```json\n[\n  {\n    \"timestamp\": 1469415720,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"temperature\": {},\n      \"lightbulbState\": \"OFF\"\n    }\n  },\n  ...\n]\n```\n\n#### List operations\n\n```python\nclient.get_agent_operations(\n  \"my_new_agent\", # The agent id\n  1478894153, # Optional, the **start** timestamp from which the\n              # operations are retrieved (inclusive bound)\n  1478895266, # Optional, the **end** timestamp up to which the\n              # operations are retrieved (inclusive bound)\n)\n```\n\n> This call can generate multiple requests to the craft ai API as results are paginated.\n\n#### Retrieve state\n\n```python\nclient.get_context_state(\n  \"my_new_agent\", # The agent id\n  1469473600 # The timestamp at which the context state is retrieved\n)\n```\n\n#### Retrieve state history\n\n```python\nclient.get_agent_states(\n  \"my_new_agent\", # The agent id\n  1478894153, # Optional, the **start** timestamp from which the\n              # operations are retrieved (inclusive bound)\n  1478895266, # Optional, the **end** timestamp up to which the\n              # operations are retrieved (inclusive bound)\n)\n```\n\n### Gradient boosting\n\nModels can be generated with gradient boosting by setting the configuration parameter `model_type` to `boosting`. Models are based on training data within a provided timestamp window among data that was [added](#add-operations). You can only query predictions directly for gradient boosting models.\n\nThe implementation is based on LightGBM, but there are some parameters that differ from the ones used by default by LightGBM.\n\nFor classification:\n\n- **`max_bin`** = 255. Max number of bins that feature values will be bucketed in (https://lightgbm.readthedocs.io/en/latest/Parameters.html#max_bin).\n\nFor regression:\n\n- **`metric`** = L2 (alias mse). Metric(s) to be evaluated on the evaluation set(s) (https://lightgbm.readthedocs.io/en/latest/Parameters.html#metric).\n- **`feature_fraction`** = 0.9. Randomly select a subset of features on each iteration (https://lightgbm.readthedocs.io/en/latest/Parameters.html#feature_fraction).\n- **`bagging_freq`** = 5. Perform bagging at every k iteration. Every k-th iteration, LightGBM will randomly select `bagging_fraction` * 100% of the data to use for the next k iterations (https://lightgbm.readthedocs.io/en/latest/Parameters.html#bagging_freq).\n- **`bagging_fraction`** = 0.8. It will randomly select part of data without resampling (https://lightgbm.readthedocs.io/en/latest/Parameters.html#bagging_fraction).\n- **`min_sum_hessian_in_leaf`** = 5.0. It's the minimal sum hessian in one leaf (https://lightgbm.readthedocs.io/en/latest/Parameters.html#min_sum_hessian_in_leaf).\n\n See the [configuration](#configuration) section for parameters that you can set.\n\n#### Get decision using boosting for agent\n\n```python\nFROM_TIMESTAMP = 1469473600\nTO_TIMESTAMP = 1529473600\nPREDICTION_CONTEXT = {\n  \"tz\": \"+02:00\",\n  \"movement\": 2,\n  \"time\": 7.5\n}\n\nclient.get_agent_boosting_decision(\n  'impervious_kraken', // The generator id\n  FROM_TIMESTAMP,\n  TO_TIMESTAMP,\n  PREDICTION_CONTEXT\n)\n\"\"\"\n{\n  \"context\": {\n    \"tz\": \"+02:00\",\n    \"movement\": 2,\n    \"time\": 7.5\n  },\n  \"output\": {\n    \"predicted_value\": \"OFF\"\n  }\n}\n\"\"\"\n```\n\n#### Get decision using boosting for generator\n\n```python\nFROM_TIMESTAMP = 1469473600\nTO_TIMESTAMP = 1529473600\nPREDICTION_CONTEXT = {\n  \"tz\": \"+02:00\",\n  \"movement\": 2,\n  \"time\": 7.5\n}\n\nclient.compute_generator_boosting_decision(\n  'impervious_kraken', // The generator id\n  FROM_TIMESTAMP,\n  TO_TIMESTAMP,\n  PREDICTION_CONTEXT\n)\n\"\"\"\n{\n  \"context\": {\n    \"tz\": \"+02:00\",\n    \"movement\": 2,\n    \"time\": 7.5\n  },\n  \"output\": {\n    \"predicted_value\": \"OFF\"\n  }\n}\n\"\"\"\n```\n\n### Decision tree\n\nModels can be generated as single decision trees by setting the configuration parameter `model_type` to `decisionTree`. Decision trees are computed based on data up to a specific timestamp and dating back to the `learning_period` configuration parameter among data that was [added](#add-operations).\n\nWhen you [compute](#compute) a decision tree, **craft ai** returns an object containing:\n\n- the version of the model's format\n- the agent's configuration as specified during the agent's [creation](#create-agent)\n- the tree itself as a JSON object:\n\n  - Internal nodes are represented by a `\"decision_rule\"` object and a `\"children\"` array. The first one, contains the `\"property`, and the `\"property\"`'s value, to decide which child matches a context.\n  - Leaves have a `\"predicted_value\"`, `\"confidence\"` and `\"decision_rule\"` object for this value, instead of a `\"children\"` array. `\"predicted_value`\" is an estimation of the output in the contexts matching the node. `\"confidence\"` is a number between 0 and 1 that indicates how confident **craft ai** is that the output is a reliable prediction. When the output is a numerical type, leaves also have a `\"standard_deviation\"` that indicates a margin of error around the `\"predicted_value\"`.\n  - The root only contains a `\"children\"` array.\n\n#### Get decision tree for an agent\n\n```python\nclient.get_agent_decision_tree(\n  \"my_new_agent\", # The agent id\n  1469473600 # Optional the timestamp at which we want the decision\n             # tree, default behavior is to return the decision tree\n             # from the latest timestamp in context operations\n)\n```\n\n#### Get decision using a decision tree for an agent\n\n> :information_source: To make a decision (prediction) with decision tree, first compute the decision tree then use the **offline interpreter**.\n\n#### Get decision tree for a generator\n\n```python\nDECISION_TREE_TIMESTAMP = 1469473600\nGENERATOR_NAME = 'smarthome_gen'\nclient.get_generator_decision_tree(\n  GENERATOR_NAME, # The generator id\n  DECISION_TREE_TIMESTAMP # The timestamp at which the decision tree is retrieved\n)\n\n\"\"\" Outputted tree is the following\n{\n  \"_version\": \"2.0.0\",\n  \"trees\": {\n    \"light\": {\n      \"children\": [\n        {\n          \"predicted_value\": \"OFF\",\n          \"confidence\": 0.9966583847999572,\n          \"decision_rule\": {\n            \"operand\": [\n              7.25,\n              22.65\n            ],\n            \"operator\": \"[in[\",\n            \"property\": \"time\"\n          }\n        },\n        {\n          \"children\": [\n            {\n              \"predicted_value\": \"ON\",\n              \"confidence\": 0.9618390202522278,\n              \"decision_rule\": {\n                \"operand\": [\n                  22.65,\n                  0.06666667\n                ],\n                \"operator\": \"[in[\",\n                \"property\": \"time\"\n              }\n            },\n            {\n              \"children\": [\n                {\n                  \"predicted_value\": \"OFF\",\n                  \"confidence\": 0.9797198176383972,\n                  \"decision_rule\": {\n                    \"operand\": [\n                      0.06666667,\n                      0.6\n                    ],\n                    \"operator\": \"[in[\",\n                    \"property\": \"time\"\n                  }\n                },\n                {\n                  \"children\": [\n                    {\n                      \"predicted_value\": \"ON\",\n                      \"confidence\": 0.9585137963294984,\n                      \"decision_rule\": {\n                        \"operand\": [\n                          0.6,\n                          2.25\n                        ],\n                        \"operator\": \"[in[\",\n                        \"property\": \"time\"\n                      }\n                    },\n                    {\n                      \"children\": [\n                        {\n                          \"predicted_value\": \"OFF\",\n                          \"confidence\": 0.8077218532562256,\n                          \"decision_rule\": {\n                            \"operand\": [\n                              2.25,\n                              2.4666667\n                            ],\n                            \"operator\": \"[in[\",\n                            \"property\": \"time\"\n                          }\n                        }\n                      ],\n                      \"decision_rule\": {\n                        \"operand\": [\n                          2.25,\n                          7.25\n                        ],\n                        \"operator\": \"[in[\",\n                        \"property\": \"time\"\n                      }\n                    }\n                  ],\n                  \"decision_rule\": {\n                    \"operand\": [\n                      0.6,\n                      7.25\n                    ],\n                    \"operator\": \"[in[\",\n                    \"property\": \"time\"\n                  }\n                }\n              ],\n              \"decision_rule\": {\n                \"operand\": [\n                  0.06666667,\n                  7.25\n                ],\n                \"operator\": \"[in[\",\n                \"property\": \"time\"\n              }\n            }\n          ],\n          \"decision_rule\": {\n            \"operand\": [\n              22.65,\n              7.25\n            ],\n            \"operator\": \"[in[\",\n            \"property\": \"time\"\n          }\n        }\n      ]\n    }\n  },\n  \"configuration\": {\n    \"operations_as_events\": True,\n    \"learning_period\": 1500000,\n    \"max_training_samples\": 15000,\n    \"context\": {\n      \"light\": {\n        \"type\": \"enum\"\n      },\n      \"tz\": {\n        \"type\": \"timezone\"\n      },\n      \"movement\": {\n        \"type\": \"continuous\"\n      },\n      \"time\": {\n        \"type\": \"time_of_day\",\n        \"is_generated\": True\n      }\n    },\n    \"output\": [\n      \"light\"\n    ],\n    \"filter\": [\n      \"smarthome\"\n    ]\n  }\n}\n\"\"\"\n```\n\n#### Get decision using a decision tree for a generator\n\n```python\nconst CONTEXT_OPS = {\n  \"tz\": \"+02:00\",\n  \"movement\": 2,\n  \"time\": 7.5\n};\nconst DECISION_TREE_TIMESTAMP = 1469473600;\nconst GENERATOR_NAME = 'smarthome_gen';\n\nclient.computeGeneratorDecision(\n  GENERATOR_NAME, # The name of the generator\n  DECISION_TREE_TIMESTAMP, # The timestamp at which the decision tree is retrieved\n  CONTEXT_OPS # A valid context operation according to the generator configuration\n)\n\"\"\"\n{\n  \"_version\": \"2.0.0\",\n  \"context\": {\n    \"tz\": \"+02:00\",\n    \"movement\": 2,\n    \"time\": 7.5\n  },\n  \"output\": {\n    \"light\": {\n      \"predicted_value\": \"OFF\",\n      \"confidence\": 0.8386044502258301,\n      \"decision_rules\": [\n        {\n          \"operand\": [\n            2.1166666,\n            10.333333\n          ],\n          \"operator\": \"[in[\",\n          \"property\": \"time\"\n        },\n        {\n          \"operand\": [\n            2.1166666,\n            9.3\n          ],\n          \"operator\": \"[in[\",\n          \"property\": \"time\"\n        },\n        {\n          \"operand\": [\n            2.1166666,\n            8.883333\n          ],\n          \"operator\": \"[in[\",\n          \"property\": \"time\"\n        },\n        {\n          \"operand\": [\n            3.5333333,\n            8.883333\n          ],\n          \"operator\": \"[in[\",\n          \"property\": \"time\"\n        }\n      ],\n      \"nb_samples\": 442,\n      \"decision_path\": \"0-0-0-0-1\",\n      \"distribution\": [\n        0.85067874,\n        0.14932127\n      ]\n    }\n  }\n}\n\"\"\"\n```\n\n### Bulk\n\nThe craft ai API includes a bulk route which provides a programmatic option to perform multiple operations at once.\n\n> :warning: the bulk API comes on top of the basic routes described above, and requires an understanding of what they do. For more information, please refer to the basic routes that do the same operations one at a time.\n\n\n\n#### Bulk - Create agents\n\nTo create several agents at once, use the method `create_agents_bulk` as the following:\n\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\nconfiguration_1 = {\n  \"context\": {\n    \"peopleCount\": {\n      \"type\": \"continuous\"\n    },\n    \"timeOfDay\": {\n      \"type\": \"time_of_day\"\n    },\n    \"timezone\": {\n      \"type\": \"timezone\"\n    },\n    \"lightbulbState\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"output\": [\"lightbulbState\"]\n}\nconfiguration_2 = { ... }\n\ncreation_bulk_payload = [\n  {'id': agent_id_1, 'configuration': configuration_1},\n  {'id': agent_id_2, 'configuration': configuration_2}\n]\n\ncreated_agents = client.create_agents_bulk(creation_bulk_payload)\nprint(created_agents)\n```\n\nThe variable `created_agents` is an **array of responses**. If an agent has been successfully created, the corresponding response is an object similar to the classic `create_agent()` response. When there are **mixed results**, `created_agents` should looks like:\n\n```python\n[\n  {'_version': '2.0.0',                                 # creation succeeded\n   'configuration': {\n      'context': {\n        ...\n      },\n      'output': ...,\n      'learning_period': 1500000,\n      'time_quantum': 100\n   },\n   'id': 'my_first_agent'},\n  {'error': CraftAiBadRequestError('error-message'),    # creation failed\n   'id': 'my_second_agent'\n  }\n]\n```\n\n#### Bulk - Delete agents\n\nTo delete several agents at once, use the method `delete_agents_bulk` as the following:\n\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\ndeletion_bulk_payload = [\n  {'id': agent_id_1},\n  {'id': agent_id_2}\n]\n\ndeleted_agents = client.delete_agents_bulk(deletion_bulk_payload)\nprint(agents_deleted)\n```\n\nThe variable `deleted_agents` is an **array of responses**. If an agent has been successfully deleted, the corresponding response is an object similar to the classic `delete_agent()` response. When there are **mixed results**, `deleted_agents` should looks like:\n\n```python\n[\n  {'id': 'my_first_agent',                              # deletion succeeded\n   'creationDate': 1557492944277,\n   'lastContextUpdate': 1557492944277,\n   'lastTreeUpdate': 1557492944277,\n   'configuration': {\n      'context': {\n        ...\n      },\n      'output': ...,\n      'learning_period': 1500000,\n      'time_quantum': 100\n   },\n   '_version': '2.0.0'\n  },\n  {'error': CraftAiBadRequestError('error-message'),    # deletion failed\n   'id': 'my_second_agent'\n  },\n  {'id': 'my_unknown_agent'}                            # deletion succeeded\n]\n```\n\n#### Bulk - Add context operations\n\nTo add operations to several agents at once, use the method `add_agents_operations_bulk` as the following:\n\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\noperations_agent_1 = [\n  {\n    'timestamp': 1469410200,\n    'context': {\n      'timezone': '+02:00',\n      'peopleCount': 0,\n      'lightbulbState': 'OFF'\n    }\n  },\n  {\n    'timestamp': 1469410200,\n    'context': {\n      'timezone': '+02:00',\n      'peopleCount': 1,\n      'lightbulbState': 'ON'\n    }\n  },\n  {\n    'timestamp': 1469410200,\n    'context': {\n      'timezone': '+02:00',\n      'peopleCount': 2,\n      'lightbulbState': 'ON'\n    }\n  },\n  {\n    'timestamp': 1469410200,\n    'context': {\n      'timezone': '+02:00',\n      'peopleCount': 2,\n      'lightbulbState': 'OFF'\n    }\n  }\n]\noperations_agent_2 = [ ... ]\n\naddition_operations_bulk_payload = [\n  {'id': agent_id_1, 'operations': operations_agent_1},\n  {'id': agent_id_2, 'operations': operations_agent_2}\n]\n\nagents = client.addAgentContextOperationsBulk(addition_operations_bulk_payload)\n```\nThe variable `agents` is an **array of responses**. If an agent has successfully received operations, the corresponding response is an object similar to the classic `add_agent_operations()` response. When there are **mixed results**, `agents` should looks like:\n\n```python\n[\n  {\n    'status': 201,                                # Addition of operation succeeded\n    'message': 'message',\n    'id': 'my_first_agent'\n  }\n  {\n    'status': 500,                                 # Addition of operation failed\n    'error': CraftAiBadRequestError('error_message'),\n    'id': 'my_second_agent'\n  }\n]\n```\n\n#### Bulk - Compute decision trees for agents\n\nTo get several decision trees of agents at once, use the method `get_agents_decision_trees_bulk` as the following:\n\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\ndecision_tree_bulk_payload =  [\n  {'id': agent_id_1},\n  {'id': agent_id_2}\n]\n\ntrees = client.get_agents_decision_trees_bulk(decision_tree_bulk_payload)\n```\nThe variable `trees` is an **array of responses**. If a decision trees has successfully been retrieved, the corresponding response is an object similar to the classic `get_agent_decision_tree()` response. When there are **mixed results**, trees should looks like:\n\n```python\n[\n  {'id': 'my_first_agent',                              # Getting of the tree succeeded\n   'tree': {\n     'trees': { ... }\n     '_version': '1.1.0',\n     'configuration': { ... }\n   }\n   'timestamp': 1458741735\n   },\n   {\n   'error': CraftAiBadRequestError('error_message'),  # Getting of the tree failed\n   'id': 'my_second_agent'\n   }\n   {\n   'error': CraftAiNotFoundError('error_message'),    # Getting of the tree failed\n   'id': 'my_unknown_agent'\n   }\n]\n```\n\n#### Bulk - Compute boosting decisions for agents\n\nTo fetch several boosting predictions at once for agents, use the method `get_agent_bulk_boosting_decision` as the following:\n\n```python\nrequest_payload = [\n  {\n    \"entityName\": \"my_first_agent\",\n    \"timeWindow\": [1469415600, 1679415800],\n    \"context\": {\n      \"peopleCount\": 19,\n      \"timeOfDay\": 7.5,\n      \"timezone\": \"+02:00\"\n    }\n  },\n  {\n    \"entityName\": \"my_first_agent\",\n    \"timeWindow\": [1469415600, 1679415800],\n    \"context\": {\n      \"peopleCount\": 21,\n      \"timeOfDay\": 5,\n      \"timezone\": \"+02:00\"\n    }\n  },\n  {\n    \"entityName\": \"my_second_agent\",\n    \"timeWindow\": [1469415600, 1679415800],\n    \"context\": {\n      \"peopleCount\": 33,\n      \"timeOfDay\": 8,\n      \"timezone\": \"+01:00\"\n    }\n  }\n]\n\ndecisions = client.get_agent_bulk_boosting_decision(request_payload)\n```\nThe variable `decisions` is an **array of responses**. If a decision was successfully received, the corresponding response is an object similar to the classic `get_agent_boosting_decision()` response. When there are **mixed results**, `decisions` should looks like:\n\n```python\n[\n  {\n    \"context\": {\n      \"tz\": \"+02:00\",\n      \"movement\": 2,\n      \"time\": 7.5\n    },\n    \"output\": {\n      \"predicted_value\": \"OFF\"\n    }\n  },\n  {\n    \"error\": CraftAiBadRequestError('error_message')\n  }\n]\n```\n\n#### Bulk - Create generators\n\nTo create several generators at once, use the method `create_generators_bulk` as the following:\n\n```python\n\ngenerator_id_1 = \"my_first_generator\"\ngenerator_configuration_1 = {\n  \"context\": {\n    \"light\": {\n      \"type\": \"enum\"\n    },\n    \"tz\": {\n      \"type\": \"timezone\"\n    },\n    \"movement\": {\n      \"type\": \"continuous\"\n    },\n    \"time\": {\n      \"type\": \"time_of_day\",\n      \"is_generated\": True\n    }\n  },\n  \"model_type\": \"decisionTree\",\n  \"output\": [\n    \"light\"\n  ],\n  \"learning_period\": 1500000,\n  \"max_training_samples\": 15000,\n  \"operations_as_events\": True,\n  \"filter\": [\"smarthome\"]\n}\ngenerator_id_2 = \"my_second_generator\"\ngenerator_configuration_2 = {\n  \"context\": {\n    \"light\": {\n      \"type\": \"enum\"\n    },\n    \"tz\": {\n      \"type\": \"timezone\"\n    },\n    \"movement\": {\n      \"type\": \"continuous\"\n    },\n    \"time\": {\n      \"type\": \"time_of_day\",\n      \"is_generated\": True\n    }\n  },\n  \"model_type\": \"decisionTree\",\n  \"output\": [\n    \"light\"\n  ],\n  \"learning_period\": 1500000,\n  \"max_training_samples\": 15000,\n  \"operations_as_events\": True,\n  \"filter\": [\"smarthome\", \"cleverhouse\", \"cunningshed\"]\n}\n\ncreation_bulk_payload = [\n  {\"id\": generator_id_1, \"configuration\": generator_configuration_1},\n  {\"id\": generator_id_2, \"configuration\": generator_configuration_2}\n]\n\ncreated_generators = client.create_generators_bulk(creation_bulk_payload)\nprint(created_generators)\n```\n\nThe variable `created_generators` is an **array of responses**. If a generator has been successfully created, the corresponding response is an object similar to the classic `create_generator()` response. When there are **mixed results**, `created_generators` should looks like:\n\n```python\n[\n  {\n    \"_version\": \"2.0.0\",                                 # creation succeeded\n    \"configuration\": {\n      \"context\": {\n        ...\n      },\n      \"output\": ...,\n      \"learning_period\": 1500000,\n      \"time_quantum\": 100\n    },\n    \"id\": \"my_first_generator\"\n  },\n  {\n    \"error\": CraftAiBadRequestError(\"error-message\"),    # creation failed\n    \"id\": \"my_second_generator\"\n  }\n]\n```\n\n#### Bulk - Delete generators\n\nTo delete several generators at once, use the method `delete_generators_bulk` as the following:\n\n```python\ngenerator_id_1 = \"my_first_generator\"\ngenerator_id_2 = \"my_second_generator\"\n\ndeletion_bulk_payload = [\n  {\"id\": generator_id_1},\n  {\"id\": generator_id_2},\n  {\"id\": \"my_unknown_generator\"}\n]\n\ndeleted_generators = client.delete_generators_bulk(deletion_bulk_payload)\nprint(deleted_generators)\n```\n\nThe variable `deleted_generators` is an **array of responses**. If a generator has been successfully deleted, the corresponding response is an object similar to the classic `delete_generator()` response. When there are **mixed results**, `deleted_generators` should looks like:\n\n```python\n[\n  {\n    \"id\": \"my_first_generator\",                              # deletion succeeded\n    \"creationDate\": 1557492944277,\n    \"lastContextUpdate\": 1557492944277,\n    \"lastTreeUpdate\": 1557492944277,\n    \"configuration\": {\n       \"context\": {\n         ...\n       },\n       \"output\": ...,\n       \"learning_period\": 1500000,\n       \"time_quantum\": 100\n    },\n    \"_version\": \"2.0.0\"\n  },\n  {\n    \"error\": CraftAiBadRequestError(\"error-message\"),       # deletion failed\n    \"id\": \"my_second_generator\"\n  },\n  {\n    \"id\": \"my_unknown_generator\"                            # deletion succeeded\n  }\n]\n```\n\n#### Bulk - Compute decision trees for generators\n\nTo get several decision trees of generators at once, use the method `get_generators_decision_trees_bulk` as the following:\n\n```python\ngenerator_id_1 = \"my_first_generator\"\ngenerator_id_2 = \"my_second_generator\"\n\ndecision_tree_bulk_payload =  [\n  {\n    \"id\": generator_id_1,\n    \"timestamp\": 1458741735\n  },\n  {\n    \"id\": generator_id_2,\n    \"timestamp\": 1458741737\n  }\n]\n\ntrees = client.get_generators_decision_trees_bulk(decision_tree_bulk_payload)\n```\nThe variable `trees` is an **array of responses**. If a generator’s decision tree has successfully been retrieved, the corresponding response is an object similar to the classic `get_generator_decision_tree()` response. When there are **mixed results**, trees should looks like:\n\n```python\n[\n  {\n    \"id\": \"my_first_generator\",                              # Getting of the tree succeeded\n    \"tree\": {\n      \"trees\": { ... }\n      \"_version\": \"1.1.0\",\n      \"configuration\": { ... }\n    }\n    \"timestamp\": 1458741735\n   },\n   {\n     \"error\": CraftAiBadRequestError(\"error_message\"),  # Getting of the tree failed\n     \"id\": \"my_second_generator\"\n   }\n]\n```\n\n#### Bulk - Compute boosting decisions for generators\n\nTo fetch several boosting predictions at once for generators, use the method `get_generator_bulk_boosting_decision` as the following:\n\n```python\nrequest_payload = [\n  {\n    \"entityName\": \"my_firstgenerator\",\n    \"timeWindow\": [1469415600, 1679415800],\n    \"context\": {\n      \"peopleCount\": 19,\n      \"timeOfDay\": 7.5,\n      \"timezone\": \"+02:00\"\n    }\n  },\n  {\n    \"entityName\": \"my_firstgenerator\",\n    \"timeWindow\": [1469415600, 1679415800],\n    \"context\": {\n      \"peopleCount\": 21,\n      \"timeOfDay\": 5,\n      \"timezone\": \"+02:00\"\n    }\n  },\n  {\n    \"entityName\": \"my_secondgenerator\",\n    \"timeWindow\": [1469415600, 1679415800],\n    \"context\": {\n      \"peopleCount\": 33,\n      \"timeOfDay\": 8,\n      \"timezone\": \"+01:00\"\n    }\n  }\n]\n\ndecisions = client.get_generator_bulk_boosting_decision(request_payload)\n```\nThe variable `decisions` is an **array of responses**. If a decision was successfully received, the corresponding response is an object similar to the classic `get_generator_boosting_decision()` response. When there are **mixed results**, `decisions` should looks like:\n\n```python\n[\n  {\n    \"context\": {\n      \"tz\": \"+02:00\",\n      \"movement\": 2,\n      \"time\": 7.5\n    },\n    \"output\": {\n      \"predicted_value\": \"OFF\"\n    }\n  },\n  {\n    \"error\": CraftAiBadRequestError(\"error_message\")\n  }\n]\n```\n\n### Advanced client configuration ###\n\nThe simple configuration to create the `client` is just the token. For special needs, additional advanced configuration can be provided.\n\n#### Amount of operations sent in one chunk ####\n\n`client.add_agent_operations` and `client.decide_boosting_from_contexts_df` split the provided operations into chunks in order to limit the size of the http requests to the craft ai API. In the client configuration, `operationsChunksSize` can be increased in order to reduce the number of requests, or decreased when large http requests cause errors.\n\n```python\nclient = craft_ai.Client({\n    # Mandatory, the token\n    \"token\": \"{token}\",\n    # Optional, default value is 200\n    \"operationsChunksSize\": {max_number_of_operations_sent_at_once}\n})\n```\n\n#### Timeout duration for decision trees retrieval ####\n\nIt is possible to increase or decrease the timeout duration of `client.get_agent_decision_tree`, for exemple to account for especially long computations.\n\n```python\nclient = craft_ai.Client({\n    # Mandatory, the token\n    \"token\": \"{token}\",\n    # Optional, default value is 600000 (10 minutes)\n    \"decisionTreeRetrievalTimeout\": \"{timeout_duration_for_decision_trees_retrieval}\"\n})\n```\n\n#### Proxy ####\n\nIt is possible to provide proxy configuration in the `proxy` property of the client configuration. It will be used to call the craft ai API (through HTTPS). The expected format is a host name or IP and port, optionally preceded by credentials such as `http://user:pass@10.10.1.10:1080`.\n\n```python\nclient = craft_ai.Client({\n    # Mandatory, the token\n    \"token\": \"{token}\",\n    # Optional, no default value\n    \"proxy\": \"http://{user}:{password}@{host_or_ip}:{port}\"\n})\n```\n\n#### Advanced network configuration ####\n\nFor more advanced network configuration, it is possible to access the [Requests Session](http://docs.python-requests.org/en/master/user/advanced/#session-objects) used by the client to send requests to the craft ai API, through `client._requests_session`.\n\n```python\n# Disable SSL certificate verification\nclient._requests_session.verify = False\n```\n\n### Score\n\nThe following functions let you compute model scores.\n\n> :warning: At the moment, this is only available as bulk functions, for generators set to generate [decision trees](#decision-tree).\n\n#### Score - Sliding window\n\n`client.get_sliding_window_scores_bulk(body)`\n##### Body #####\n\nThe body should be an array of dictionaries containing the following keys:\n\n- **id** `string` (required)\n\n  The identifier of the generator whose model is evaluated.\n\n- **test_from** `number`\n\n  The beginning timestamp of the first test window (inclusive). 3 parameters among `test_from`, `test_to`, `step_size` and `nb_steps` must be defined.\n\n- **test_to** `number`\n\n  The end timestamp of the last test window (inclusive). 3 parameters among `test_from`, `test_to`, `step_size` and `nb_steps` must be defined.\n\n- **step_size** `number`\n\n  The timestamp difference between the beginning of a test window and the next. 3 parameters among `test_from`, `test_to`, `step` and `nb_steps` must be defined.\n\n- **nb_steps** `number`\n\n  The number of test windows. 3 parameters among `test_from`, `test_to`, `step_size` and `nb_steps` must be defined.\n\n- **test_size** `number`\n\n  The actual size of the test set from the beginning of a test window. If the size of a window (`step_size`) is larger than this, only the beginning of a window will be used to compute scores. If the size of a window is smaller than this, data in a window can be used in several score computations.\n\n- **gap_size** `number`\n\n  The timestamp difference between the end of a training window (data used in the model) and the beginning of a test window. The end of the training window is defined by the formula **`testWindowStart - gap_size - 1`**. By default `gap_size` is 0, in which case the test set starts directly after the end of the training set, i.e. the end of the training set is just before the beginning of the test window. A negative gap means that there is an overlap between the training and test data.\n\n- **metrics** `array`\n\n  Array of objects containing a `name` property with the name of a valid metric. The metrics are used to evaluate the ML model. For classification models, the available metrics are *accuracy* and *f1*; for regression models, *r2*, *mae* and *rmse*. By default all available metrics are computed.\n\n```http\n+ training data\n* test data\n                   gap_size test_size\n                      <-><------------>\nwindow 1  .+++++++++++...**************...................................\n                         |\n              window 1 start (test_from)\n                         <--------->\n                          step_size\nwindow 2  ............+++++++++++...**************........................\n                                    |\n                             window 2 start\n                                    <--------->\n                                     step_size\nwindow 3  .......................+++++++++++...**************.............\n                                               |\n                                         window 3 start\n```\n**Example:**\n```python\n  const sliding_window_scores_request_payload = [\n    {\n      \"id\": \"generator1\",\n      \"test_from\": 1461132001,\n      \"test_to\": 1462106220,\n      \"step_size\": 500000,\n      \"metrics\": [{ \"name\": \"accuracy\" }, { \"name\": \"f1\" }]\n    },\n    {\n      \"id\": \"generator2\",\n      \"test_from\": 1477000801,\n      \"test_to\": 1485385200,\n      \"step_size\": 5000000,\n      \"metrics\": [{ \"name\": \"r2\" }, { \"name\": \"mae\" }, { \"name\": \"rmse\" }]\n    }\n  ]\n\n  scores = client.get_sliding_window_scores_bulk(sliding_window_scores_request_payload)\n```\nThe variable `scores` is an **array of responses**. `scores` should look like:\n\n```python\n[\n  {\n    \"id\": \"generator1\",\n    \"scores\": [\n      {\n        \"from\": 1461132001,\n        \"to\": 1461632000,\n        \"modelTimestamp\": 1461132000,\n        \"nbSamples\": 15,\n        \"type\": \"classification\",\n        \"accuracy\": 0.467,\n        \"f1\": {\n          \"class_OPEN\": {\n            \"nbSamples\": 7,\n            \"score\": 0.636\n          }\n        },\n        \"f1_weighted\": 0.297\n      },\n      {\n        \"from\": 1461632001,\n        \"to\": 1462106220,\n        \"modelTimestamp\": 1461632000,\n        \"nbSamples\": 14,\n        \"type\": \"classification\",\n        \"accuracy\": 0.786,\n        \"f1\": {\n          \"class_CLOSED\": {\n            \"nbSamples\": 7,\n            \"score\": 0.8\n          },\n          \"class_OPEN\": {\n            \"nbSamples\": 7,\n            \"score\": 0.769\n          }\n        },\n        \"f1_weighted\": 0.785\n      }\n    ]\n  },\n  {\n    \"id\": \"generator2\",\n    \"scores\": [\n      {\n        \"from\": 1477000801,\n        \"to\": 1482000800,\n        \"modelTimestamp\": 1477000800,\n        \"nbSamples\": 57,\n        \"type\": \"regression\",\n        \"r2\": -0.864,\n        \"mae\": 2.186,\n        \"rmse\": 2.489\n      },\n      {\n        \"from\": 1482000801,\n        \"to\": 1485385200,\n        \"modelTimestamp\": 1482000800,\n        \"nbSamples\": 39,\n        \"type\": \"regression\",\n        \"r2\": 0.52,\n        \"mae\": 0.95,\n        \"rmse\": 1.164\n      }\n    ]\n  }\n]\n```\n\n#### Score - Single window\n\n`client.get_single_window_score_bulk(body)`\n##### Body #####\n\nThe body should be an array of dictionaries containing the following keys:\n\n- **id** `string` (required)\n\n  The identifier of the generator whose model is evaluated.\n\n- **test_from** `number` (required)\n\n  The beginning timestamp of the test window (inclusive).\n\n- **test_to** `number` (required)\n\n  The end timestamp of the test window (inclusive).\n\n- **model_timestamp** `number`\n\n  The last timestamp of the training data.\n\n- **metrics** `array`\n\n  Array of objects containing a `name` property with the name of a valid metric. The metrics are used to evaluate the ML model. For classification models, the available metrics are *accuracy* and *f1*; for regression models, *r2*, *mae* and *rmse*. By default all available metrics are computed.\n\n```http\n+ training data\n* test data\n            model_timestamp    test_from            test_to\nwindow  ++++++++++++|..............|*******************|..................\n```\n**Example:**\n```python\n  const single_window_score_request_payload = [\n    {\n      \"id\": \"generator1\",\n      \"test_from\": 1461132001,\n      \"test_to\": 1462106220,\n      \"step_size\": 500000,\n      \"metrics\": [{ \"name\": \"accuracy\" }, { \"name\": \"f1\" }]\n    },\n    {\n      \"id\": \"generator2\",\n      \"test_from\": 1477000801,\n      \"test_to\": 1485385200,\n      \"step_size\": 5000000,\n      \"metrics\": [{ \"name\": \"r2\" }, { \"name\": \"mae\" }, { \"name\": \"rmse\" }]\n    }\n  ]\n\n  scores = client.get_single_window_score_bulk(single_window_score_request_payload)\n```\nThe variable `scores` is an **array of responses**. `scores` should look like:\n\n```python\n[\n  {\n    \"id\": \"generator1\",\n    \"score\": {\n      \"from\": 1461132001,\n      \"to\": 1461632000,\n      \"modelTimestamp\": 1461132000,\n      \"nbSamples\": 15,\n      \"type\": \"classification\",\n      \"accuracy\": 0.467,\n      \"f1\": {\n        \"class_OPEN\": {\n          \"nbSamples\": 7,\n          \"score\": 0.636\n        }\n      },\n      \"f1_weighted\": 0.297\n    }\n  },\n  {\n    \"id\": \"generator2\",\n    \"score\": {\n      \"from\": 1477000801,\n      \"to\": 1485385200,\n      \"modelTimestamp\": 1477000800,\n      \"nbSamples\": 96,\n      \"type\": \"regression\",\n      \"r2\": -0.761,\n      \"mae\": 2.06,\n      \"rmse\": 2.356\n    }\n  }\n]\n```\n## Interpreter ##\n\nThe decision tree interpreter can be used offline from decisions tree computed through the API.\n\n### Make decision ###\n\nNote that the python interpreter takes an array of contexts.\n\n```python\ntree = { ... } # Decision tree as retrieved through the craft ai REST API\n\n# Compute the decision on a fully described context\ndecision = craft_ai.Interpreter.decide(\n  tree,\n  [{ # The context on which the decision is made\n    \"timezone\": \"+02:00\",\n    \"timeOfDay\": 7.5,\n    \"peopleCount\": 3\n  }]\n)\n\n# Or Compute the decision on a context created from the given one and filling the\n# `day_of_week`, `time_of_day` and `timezone` properties from the given `Time`\n\ndecision = craft_ai.Interpreter.decide(\n  tree,\n  [{\n    \"timezone\": \"+02:00\",\n    \"peopleCount\": 3\n  },\n  craft_ai.Time(\"2010-01-01T07:30:30+0200\")\n  ]\n)\n```\n\nA computed `decision` on an `enum` output type would look like:\n\n```python\n{\n  \"context\": { # In which context the decision was made\n    \"timezone\": \"+02:00\",\n    \"timeOfDay\": 7.5,\n    \"peopleCount\": 3\n  },\n  \"output\": { # The decision itself\n    \"lightbulbState\": {\n      \"predicted_value\": \"ON\"\n      \"confidence\": 0.9937745256361138, # The confidence in the decision\n      \"decision_rules\": [ # The ordered list of decision_rules that were validated to reach this decision\n        {\n          \"property\": \"timeOfDay\",\n          \"operator\": \">=\",\n          \"operand\": 6\n        },\n        {\n          \"property\": \"peopleCount\",\n          \"operator\": \">=\",\n          \"operand\": 2\n        }\n      ],\n      \"nb_samples\": 25,\n      \"distribution\": [0.05, 0.95],\n      \"decision_path\" \"0-1-1\"\n    },\n  }\n}\n```\n\nA `decision` for a numerical output type would look like:\n\n```python\n  \"output\": {\n    \"lightbulbIntensity\": {\n      \"predicted_value\": 10.5,\n      \"standard_deviation\": 1.25, # For numerical types, this field is returned in decisions.\n      \"min\": 8.0,\n      \"max\": 11,\n      \"nb_samples\": 25,\n      \"decision_rules\": [ ... ],\n      \"confidence\": ...,\n      \"decision_path\" ...\n    }\n  }\n```\n\nA `decision` for a categorical output type would look like:\n\n```python\n  \"output\": {\n    \"lightbulbState\": {\n      \"predicted_value\": \"OFF\",\n      \"nb_samples\": 25,\n      \"distribution\" : [ ... ], # Distribution of the output classes normalized by the number of samples in the reached node.\n      \"decision_rules\": [ ... ],\n      \"confidence\": ...,\n      \"decision_path\" ...\n    }\n  }\n```\n\nA `decision` in a case where the tree cannot make a prediction:\n\n```python\n  \"output\": {\n    \"lightbulbState\": {\n      \"predicted_value\": None,\n      \"distribution\" : [ ... ], # Distribution of the output classes normalized by the number of samples in the reached node.\n      \"confidence\": 0, # Zero confidence if the decision is null\n      \"decision_rules\": [ ... ],\n      \"decision_path\" ...\n    }\n  }\n```\n\n### Reduce decision rules ###\n\nFrom a list of decision rules, as retrieved when making a decision with a decision tree, compute an equivalent & minimal list of rules.\n\n```python\nfrom craft_ai import reduce_decision_rules\n\n# `decision` is the decision tree as retrieved from taking a decision\ndecision = craft_ai.Interpreter.decide( ... )\n\n# `decision_rules` is the decision rules that led to decision for the `lightBulbState` value\ndecision_rules = decision[\"output\"][\"lightBulbState\"][\"decision_rules\"]\n\n# `minimal_decision_rules` has the mininum list of rules strictly equivalent to `decision_rules`\nminimal_decision_rules = reduce_decision_rules(decisionRules)\n```\n\n### Format decision rules ###\n\nFrom a list of decision rules, compute a _human readable_ version of these rules, in english.\n\n```python\nfrom craft_ai import format_decision_rules\n\n# `decision` is the decision tree as retrieved from taking a decision\ndecision = craft_ai.Interpreter.decide( ... )\n\n# `decision_rules` is the decision rules that led to decision for the `lightBulbState` value\ndecision_rules = decision[\"output\"][\"lightbulbState\"][\"decision_rules\"]\n\n# `decision_rules_str` is a human readable string representation of the rules.\ndecision_rules_str = format_decision_rules(decision_rules)\n```\n\n## Error Handling ##\n\nWhen using this client, you should be careful wrapping calls to the API with `try/except` blocks, in accordance with the [EAFP](https://docs.python.org/3/glossary.html#term-eafp) principle.\n\nThe **craft ai** python client has its specific exception types, all of them inheriting from the `CraftAIError` type.\n\nAll methods which have to send an http request (all of them except `decide`) may raise either of these exceptions: `CraftAINotFoundError`, `CraftAIBadRequestError`, `CraftAICredentialsError` or `CraftAIUnknownError`.\n\nThe `decide` method only raises `CrafAIDecisionError` of `CraftAiNullDecisionError` type of exceptions. The latter is raised when no the given context is valid but no decision can be made.\n\n## Pandas support ##\n\nThe craft ai python client optionally supports [pandas](http://pandas.pydata.org/) a very popular library used for all things data.\n\nYou'll need to install `craft-ai` with its `pandas` [extra](https://packaging.python.org/tutorials/installing-packages/#installing-setuptools-extras)\n\n```sh\npip install --upgrade craft-ai[pandas]\n```\n\nThen, instead of importing the default module, do the following\n\n```python\nimport craft_ai.pandas\n\n# Most of the time you'll need the following\nimport numpy as np\nimport pandas as pd\n\n# Client must then be defined using craft_ai.pandas module\nclient = craft_ai.pandas.Client({\n  \"token\": \"{token}\"\n})\n```\n\nThe craft ai pandas module is derived for the _vanilla_ one, with the following methods are overriden to support pandas' [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html).\n\n#### `craft_ai.pandas.Client.get_agent_operations` #####\n\nRetrieves the desired operations as a `DataFrame` where:\n\n- each operation is a row,\n- each context property is a column,\n- the index is [_time based_](https://pandas.pydata.org/pandas-docs/stable/timeseries.html), [timezone-aware](https://pandas.pydata.org/pandas-docs/stable/timeseries.html#working-with-time-zones) and matching the operations timestamps,\n- `np.NaN` means no value were given at this property for this timestamp.\n\n```python\ndf = client.get_agent_operations(\"my_new_agent\")\n\n# `df` is a pd.DataFrame looking like\n#\n#                            peopleCount  lightbulbState   timezone\n# 2013-01-01 00:00:00+00:00   0            OFF              +02:00\n# 2013-01-02 00:00:00+00:00   1            ON               NaN\n# 2013-01-03 00:00:00+00:00   2            NaN              NaN\n# 2013-01-04 00:00:00+00:00   NaN          OFF              NaN\n# 2013-01-05 00:00:00+00:00   0            NaN              NaN\n```\n\n#### `craft_ai.pandas.Client.add_agent_operations` #####\n\nAdd a `DataFrame` of operations to the desired agent. The format is the same as above.\n\n```python\ndf = pd.DataFrame(\n  [\n    [0, \"OFF\", \"+02:00\"],\n    [1, \"ON\", np.nan], # timezone will be \"+02:00\"\n    [2, np.nan, np.nan],\n    [np.nan, \"OFF\", np.nan],\n    [0, np.nan, np.nan]\n  ],\n  columns=['peopleCount', 'lightbulbState', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n)\nclient.add_agent_operations(\"my_new_agent\", df)\n```\n\nGiven an object that is not a `DataFrame` this method behave like the _vanilla_ `craft_ai.Client.add_agent_operations`.\n\nFurthermore, missing values and optional values can be handled by the craft ai pandas client. To do so, we introduce two new types that are `craft_ai.pandas.MISSING_VALUE` for [missing values](#missing-values) and `craft_ai.pandas.OPTIONAL_VALUE` for [optional values](#optional-values).\nTo send your `DataFrame` with actual missing values or optional values, you must use one of these types:\n\n```python\nfrom craft_ai.pandas import MISSING_VALUE, OPTIONAL_VALUE\n\ndf = pd.DataFrame(\n  [\n    [0, \"+02:00\"],\n    [1, MISSING_VALUE],\n    [2, MISSING_VALUE],\n    [1, OPTIONAL_VALUE],\n    [0, np.nan]\n  ],\n  columns=['peopleCount', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n)\nclient.add_agent_operations(\"my_new_agent\", df)\n```\n\nTo ensure that all the missing values contained in your `DataFrame` are to the right format and can be handled by the craft ai pandas client, it is suggested to preprocess this latter by replacing all `na` values by the desired one:\n\n```python\ncontexts_df.fillna(MISSING_VALUE) # Or OPTIONAL_VALUE\n```\n\n#### `craft_ai.pandas.Client.get_agent_states` #####\n\nRetrieves the desired state history as a `DataFrame` where:\n\n- each state is a row,\n- each context property is a column,\n- the index is [_time based_](https://pandas.pydata.org/pandas-docs/stable/timeseries.html), [timezone-aware](https://pandas.pydata.org/pandas-docs/stable/timeseries.html#working-with-time-zones) and matching the operations timestamps.\n\n```python\ndf = client.get_agent_states(\"my_new_agent\")\n\n# `df` is a pd.DataFrame looking like\n#\n#                            peopleCount  lightbulbState   timezone\n# 2013-01-01 00:00:00+00:00   0            OFF              +02:00\n# 2013-01-02 00:00:00+00:00   1            ON               +02:00\n# 2013-01-03 00:00:00+00:00   2            ON               +02:00\n# 2013-01-04 00:00:00+00:00   2            OFF              +02:00\n# 2013-01-05 00:00:00+00:00   0            OFF              +02:00\n```\n\n#### `craft_ai.pandas.Client.decide_from_contexts_df` #####\n\nMake multiple decisions on a given `DataFrame` following the same format as above.\n\n```python\ndecisions_df = client.decide_from_contexts_df(tree, pd.DataFrame(\n  [\n    [0, \"+02:00\"],\n    [1, \"+02:00\"],\n    [2, \"+02:00\"],\n    [1, \"+02:00\"],\n    [0, \"+02:00\"]\n  ],\n  columns=['peopleCount', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n))\n# `decisions_df` is a pd.DataFrame looking like\n#\n#                            lightbulbState_predicted_value   lightbulbState_confidence  ...\n# 2013-01-01 00:00:00+00:00   OFF                              0.999449                  ...\n# 2013-01-02 00:00:00+00:00   ON                               0.970325                  ...\n# 2013-01-03 00:00:00+00:00   ON                               0.970325                  ...\n# 2013-01-04 00:00:00+00:00   ON                               0.970325                  ...\n# 2013-01-05 00:00:00+00:00   OFF                              0.999449                  ...\n```\n\nThis function also accepts craft ai missing values and optional values types, `craft_ai.pandas.MISSING_VALUE` and `craft_ai.pandas.OPTIONAL_VALUE`.\n\n```python\nfrom craft_ai.pandas import MISSING_VALUE, OPTIONAL_VALUE\n\ndecisions_df = client.decide_from_contexts_df(tree, pd.DataFrame(\n  [\n    [0, \"+02:00\"],\n    [MISSING_VALUE, \"+02:00\"],\n    [2, \"+02:00\"],\n    [MISSING_VALUE, \"+02:00\"],\n    [0, \"+02:00\"]\n  ],\n  columns=['peopleCount', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n))\n```\n\nThis function never raises `CraftAiNullDecisionError`, instead it inserts these errors in the result `Dataframe` in a specific `error` column.\n\n#### `craft_ai.pandas.utils.create_tree_html` #####\n\nReturns a HTML version of the given decision tree. If this latter is saved in a `.html` file, it can be opened in\na browser to be visualized.\n\n```python\n\nfrom  craft_ai.pandas.utils import create_tree_html\n\ntree = client.get_agent_decision_tree(\n  \"my_agent\", # The agent id\n  timestamp # The timestamp at which the decision tree is retrieved\n)\n\nhtml = create_tree_html(\n  tree, # The decision tree\n  decision_path, # (Optional) The path to a node. This will plot the tree with this node already selected. Default: \"\"\n  edge_type, # (Optional) The way the decision tree edges are plotted - (\"constant\", \"absolute\" or \"relative\"). Default: \"constant\"\n  folded_nodes, # (Optional) An array of nodes path to fold when the tree is plotted. Default: None\n  height # (Optional) The height in pixel of the created plot. Default: 500.\n)\n\n# ...\n# ... save the html string to visualize it in a browser\n# ...\n```\n\n#### `craft_ai.pandas.utils.display_tree` #####\n\nDisplay a decision tree in a Jupyter Notebook.\nThis function can be useful for analyzing the induced decision trees.\n\n```python\n\nfrom  craft_ai.pandas.utils import display_tree\n\ntree = client.get_agent_decision_tree(\n  \"my_agent\", # The agent id\n  timestamp # The timestamp at which the decision tree is retrieved\n)\n\ndisplay_tree(\n  tree, # The decision tree\n  decision_path, # (Optional) The path to a node. This will plot the tree with this node already selected. Default: \"\"\n  edge_type, # (Optional) The way the decision tree edges are plotted - (\"constant\", \"absolute\" or \"relative\"). Default: \"constant\"\n  folded_nodes, # (Optional) An array of nodes path to fold when the tree is plotted. Default: None\n  height # (Optional) The height in pixel of the created plot. Default: 500.\n)\n```\n\n#### `craft_ai.pandas.client.add_agents_operations_bulk` #####\n\nAdd operations to several agents at once.\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\noperations_agent_1 = pd.DataFrame(\n  [\n    [0, \"OFF\", \"+02:00\"],\n    [1, \"ON\", np.nan], # timezone will be \"+02:00\"\n    [2, np.nan, np.nan],\n    [np.nan, \"OFF\", np.nan],\n    [0, np.nan, np.nan]\n  ],\n  columns=['peopleCount', 'lightbulbState', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n)\noperations_agent_2 = pd.DataFrame([...])\n\naddition_operations_bulk_payload = [\n    {'id': agent_id_1, 'operations': operations_agent_1},\n    {'id': agent_id_2, 'operations': operations_agent_2}\n]\n\nclient.add_agents_operations_bulk(addition_operations_bulk_payload)\n```\nGiven an object that is not a `DataFrame` this method behave like the _vanilla_ `craft_ai.Client.add_agents_operations_bulk`.\n\n#### `craft_ai.pandas.client.decide_boosting_from_contexts_df` #####\nMake multiple boosting decisions on a given `DataFrame` on an agent.\n\n```python\nagent_id_1 = 'my_first_agent'\nFROM_TIMESTAMP = 1469473600\nTO_TIMESTAMP = 1529473600\n\ncontext_df = pd.DataFrame(\n  [\n    [0, \"+02:00\"],\n    [1, \"+02:00\"],\n    [2, \"+02:00\"],\n    [1, \"+02:00\"],\n    [0, \"+02:00\"]\n  ],\n  columns=['peopleCount', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n)\n\ndecisions_df = CLIENT.decide_boosting_from_contexts_df(\n    agent_id_1,\n    FROM_TIMESTAMP,\n    TO_TIMESTAMP,\n    context_df,\n)\n\n# `decisions_df` is a pd.DataFrame looking like\n#\n#                            lightbulbState_predicted_value\n# 2013-01-01 00:00:00+00:00   OFF\n# 2013-01-02 00:00:00+00:00   ON\n# 2013-01-03 00:00:00+00:00   ON\n# 2013-01-04 00:00:00+00:00   ON\n# 2013-01-05 00:00:00+00:00   OFF\n\n```\n\n#### `craft_ai.pandas.client.decide_generator_boosting_from_contexts_df` #####\nMake multiple boosting decisions on a given `DataFrame` on a generator.\n```python\ngenerator_id = 'my_generator'\n\nFROM_TIMESTAMP = 1469473600\nTO_TIMESTAMP = 1529473600\n\ncontext_df = pd.DataFrame(\n  [\n    [0, \"+02:00\"],\n    [1, \"+02:00\"],\n    [2, \"+02:00\"],\n    [1, \"+02:00\"],\n    [0, \"+02:00\"]\n  ],\n  columns=['peopleCount', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n)\n\ndecisions = CLIENT.decide_generator_boosting_from_contexts_df(\n    generator_id,\n    FROM_TIMESTAMP,\n    TO_TIMESTAMP,\n    context_df,\n)\n\n# `decisions_df` is a pd.DataFrame looking like\n#\n#                            lightbulbState_predicted_value\n# 2013-01-01 00:00:00+00:00   OFF\n# 2013-01-02 00:00:00+00:00   ON\n# 2013-01-03 00:00:00+00:00   ON\n# 2013-01-04 00:00:00+00:00   ON\n# 2013-01-05 00:00:00+00:00   OFF\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://craft.ai",
    "keywords": "ai,craft-ai",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "craft-ai",
    "package_url": "https://pypi.org/project/craft-ai/",
    "platform": "",
    "project_url": "https://pypi.org/project/craft-ai/",
    "project_urls": {
      "Homepage": "https://craft.ai",
      "Repository": "https://github.com/craft-ai/craft-ai-client-python/"
    },
    "release_url": "https://pypi.org/project/craft-ai/2.4.3/",
    "requires_dist": [
      "requests (>=2.20.1,<3.0.0)",
      "tzlocal (>=1.2.2,<2.0.0)",
      "semver (>=2.10.2,<3.0.0)",
      "python-dateutil (>=2.8.1,<3.0.0)",
      "pandas (>=1.0.1,<2.0.0); extra == \"pandas\"",
      "pytest (>=5.4.3,<6.0.0)",
      "pytest-subtests (>=0.3.1,<0.4.0)",
      "websockets (>=9.1,<10.0)",
      "nest-asyncio (>=1.5.1,<2.0.0)"
    ],
    "requires_python": ">=3.6.1,<4.0.0",
    "summary": "craft ai API python 3 client",
    "version": "2.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11495969,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8a78228880d36b7f4897b077df8b6d5ed19d56dfb87b6efef4b3c6246d5400f",
          "md5": "f1f361d77828a797f1d1d622b537770e",
          "sha256": "c7ea06000b1cf586271f6b64f19c7dbcb1dda6dcd142cf9cce6cc0c0fcf0fc92"
        },
        "downloads": -1,
        "filename": "craft_ai-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1f361d77828a797f1d1d622b537770e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 9013,
        "upload_time": "2016-08-04T11:11:12",
        "upload_time_iso_8601": "2016-08-04T11:11:12.691649Z",
        "url": "https://files.pythonhosted.org/packages/b8/a7/8228880d36b7f4897b077df8b6d5ed19d56dfb87b6efef4b3c6246d5400f/craft_ai-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "850a2df042f2e78de4cd8325fc2763dc5ee1419d48fbffcce6d4aa20e40105be",
          "md5": "959545c12d3b16695eeb2d5736a32925",
          "sha256": "667b5595b3ccd560feb0ff75483f02f4eab2f04707226616e0c9c2025541c6f5"
        },
        "downloads": -1,
        "filename": "craft_ai-0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "959545c12d3b16695eeb2d5736a32925",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16308,
        "upload_time": "2016-08-12T12:21:17",
        "upload_time_iso_8601": "2016-08-12T12:21:17.478222Z",
        "url": "https://files.pythonhosted.org/packages/85/0a/2df042f2e78de4cd8325fc2763dc5ee1419d48fbffcce6d4aa20e40105be/craft_ai-0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "190650d0820c73ff792b8d6bc93d151a0a9458661a20994cd1613b70270cb7c0",
          "md5": "b962b6c716b9429eb5909a46e6668494",
          "sha256": "18be2a81279ba24c99f26553a20fae5459b57b2421d6c1793a7ccbd3b4f9865d"
        },
        "downloads": -1,
        "filename": "craft_ai-0.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b962b6c716b9429eb5909a46e6668494",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16349,
        "upload_time": "2016-08-12T14:51:39",
        "upload_time_iso_8601": "2016-08-12T14:51:39.821881Z",
        "url": "https://files.pythonhosted.org/packages/19/06/50d0820c73ff792b8d6bc93d151a0a9458661a20994cd1613b70270cb7c0/craft_ai-0.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ef7f0ea8f0d22a91d34f727c08dc5c10ac668422aae4dbe4efe45b722efad0c",
          "md5": "f287e214116454734792f291858e54f7",
          "sha256": "96c168bac67693ca8a36fb1616ded3d8d48ac3cddf305c0352d35f63479ea881"
        },
        "downloads": -1,
        "filename": "craft_ai-0.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f287e214116454734792f291858e54f7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16403,
        "upload_time": "2016-08-12T16:45:47",
        "upload_time_iso_8601": "2016-08-12T16:45:47.131494Z",
        "url": "https://files.pythonhosted.org/packages/2e/f7/f0ea8f0d22a91d34f727c08dc5c10ac668422aae4dbe4efe45b722efad0c/craft_ai-0.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "698459e9260e424210096ac10587359018cdf0b878ab1a534089a2d785bae465",
          "md5": "5fe37eaebd6e26b8aef165ffe304a3c3",
          "sha256": "68eb85bdaa9ebcc55ea690b183fe655d4e3909a562bd8c1a6bc6f53789032a72"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fe37eaebd6e26b8aef165ffe304a3c3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 17912,
        "upload_time": "2016-08-23T14:57:42",
        "upload_time_iso_8601": "2016-08-23T14:57:42.226726Z",
        "url": "https://files.pythonhosted.org/packages/69/84/59e9260e424210096ac10587359018cdf0b878ab1a534089a2d785bae465/craft_ai-0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36ed554ab41adff92622a03c5b63938b57fa2681e47fc3c09d3b8e6dcf92e2b8",
          "md5": "44e63bc36cc83f818dfa86f0e886b372",
          "sha256": "0b6e51c35f58605d5c62de30a9c8b82c5a69fa4c5f2dbd3f2b591e41c6c3ebab"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44e63bc36cc83f818dfa86f0e886b372",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 21901,
        "upload_time": "2016-08-23T16:50:54",
        "upload_time_iso_8601": "2016-08-23T16:50:54.446807Z",
        "url": "https://files.pythonhosted.org/packages/36/ed/554ab41adff92622a03c5b63938b57fa2681e47fc3c09d3b8e6dcf92e2b8/craft_ai-0.4.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d6df0a984f561347ac0f9aee6e353a98cd09fe36b01a1be57aace650b80d3f9",
          "md5": "22c688bc210ee2b5320f25e1541075ab",
          "sha256": "7ba73a502447da5b85d44ccfd0ab560490f5e95a8b2cba91f5ac039c52b300af"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22c688bc210ee2b5320f25e1541075ab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24947,
        "upload_time": "2017-01-16T17:13:35",
        "upload_time_iso_8601": "2017-01-16T17:13:35.644118Z",
        "url": "https://files.pythonhosted.org/packages/7d/6d/f0a984f561347ac0f9aee6e353a98cd09fe36b01a1be57aace650b80d3f9/craft_ai-0.4.10-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "787033d1bd9ee515a0046caa38237d5a35edb0225de1c43126a5bc79accfeb5f",
          "md5": "055ebd700893d4386eaf737c30ecb5db",
          "sha256": "7e14f1b83b3ef5dbe048b1e2a722b8245a312564ac1ed109a1506ba32d917aa6"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "055ebd700893d4386eaf737c30ecb5db",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 25207,
        "upload_time": "2017-02-13T07:43:01",
        "upload_time_iso_8601": "2017-02-13T07:43:01.620271Z",
        "url": "https://files.pythonhosted.org/packages/78/70/33d1bd9ee515a0046caa38237d5a35edb0225de1c43126a5bc79accfeb5f/craft_ai-0.4.11-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b21329fcbabb9c298e6063638f054267f278bc3944417892fede73aa0605b46",
          "md5": "973ffd35a4df7339feac5a7e365db02d",
          "sha256": "4c29a2deeb18cacb3ffeb07835d35e2a97c1983a6f5c56503bdc400af6a96035"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.12-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "973ffd35a4df7339feac5a7e365db02d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26316,
        "upload_time": "2017-03-08T17:54:54",
        "upload_time_iso_8601": "2017-03-08T17:54:54.284975Z",
        "url": "https://files.pythonhosted.org/packages/2b/21/329fcbabb9c298e6063638f054267f278bc3944417892fede73aa0605b46/craft_ai-0.4.12-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71b941d1ff69fe883d3aa44f82dbee3e764b98f23984ddabaacb9b47ddc4f70e",
          "md5": "ab3544127939e1f91bf44a30e0d7e3d1",
          "sha256": "7a180d509f44b1546f3329ca0e1745d1cc667b9d540362f148d50daf824173a2"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab3544127939e1f91bf44a30e0d7e3d1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 21902,
        "upload_time": "2016-08-23T17:07:44",
        "upload_time_iso_8601": "2016-08-23T17:07:44.793874Z",
        "url": "https://files.pythonhosted.org/packages/71/b9/41d1ff69fe883d3aa44f82dbee3e764b98f23984ddabaacb9b47ddc4f70e/craft_ai-0.4.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3487f1e4bce82f2aebc1c08a389f745a03535370ee2cc376802c429d64957af",
          "md5": "bb249cc2ceb76507c199e277e3638f07",
          "sha256": "d6fcf6047febf5b973caad8f4e03990d1e38fe2a43804d851bdf9afcb840bb29"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb249cc2ceb76507c199e277e3638f07",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23502,
        "upload_time": "2016-08-25T12:17:21",
        "upload_time_iso_8601": "2016-08-25T12:17:21.728467Z",
        "url": "https://files.pythonhosted.org/packages/c3/48/7f1e4bce82f2aebc1c08a389f745a03535370ee2cc376802c429d64957af/craft_ai-0.4.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7b9069576721537a5ecdafc7358324215ba3a5f85c962dfe8399ce66aa58783",
          "md5": "6727626a3ed01c8cd3c86bee860ba146",
          "sha256": "754f7ae68522e854a4b6953e5a6e3cd92af891b50fda52ea2344a9af5a2d7bc1"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6727626a3ed01c8cd3c86bee860ba146",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23515,
        "upload_time": "2016-08-30T14:19:10",
        "upload_time_iso_8601": "2016-08-30T14:19:10.800148Z",
        "url": "https://files.pythonhosted.org/packages/f7/b9/069576721537a5ecdafc7358324215ba3a5f85c962dfe8399ce66aa58783/craft_ai-0.4.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87cc7bb5bcdd6a68f5121be170acc7bd0f959b46d7ccc544b177cc88fde34a64",
          "md5": "b761607f5b099d2e91c22ba8fd63476a",
          "sha256": "d5fb7fb793a9abc84de26333c6b66caccdc5bb07c8697f854f6b951b62c29466"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b761607f5b099d2e91c22ba8fd63476a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24818,
        "upload_time": "2016-10-14T13:21:01",
        "upload_time_iso_8601": "2016-10-14T13:21:01.037697Z",
        "url": "https://files.pythonhosted.org/packages/87/cc/7bb5bcdd6a68f5121be170acc7bd0f959b46d7ccc544b177cc88fde34a64/craft_ai-0.4.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac58e76c4442571998250e2acec069886a87266244694c4b6fdb6c3a31e0d33b",
          "md5": "3c28b4746785ec027bac675d66f73e1c",
          "sha256": "597c39b8cf286ccc9c2576b859d36065b68cb82fccf2d12f6ac1292341303af5"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c28b4746785ec027bac675d66f73e1c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24780,
        "upload_time": "2016-10-14T17:08:32",
        "upload_time_iso_8601": "2016-10-14T17:08:32.874475Z",
        "url": "https://files.pythonhosted.org/packages/ac/58/e76c4442571998250e2acec069886a87266244694c4b6fdb6c3a31e0d33b/craft_ai-0.4.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fd396c1981446c9a29762278a6bee8f890d881f101f91df595b9b5ae8f0bd7a",
          "md5": "ee30967e6145d38382a2e20fc53d1479",
          "sha256": "90dc842b2c67274ae98ff45c5daf453edb3c05fbfafd034ebeb37932598db9e7"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee30967e6145d38382a2e20fc53d1479",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24779,
        "upload_time": "2016-10-17T12:15:12",
        "upload_time_iso_8601": "2016-10-17T12:15:12.011172Z",
        "url": "https://files.pythonhosted.org/packages/6f/d3/96c1981446c9a29762278a6bee8f890d881f101f91df595b9b5ae8f0bd7a/craft_ai-0.4.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e766674e78229ddd4fe5065ee1ac63450e53f1b829883f88edb3c54c56662fa",
          "md5": "387d80db5b7f91a91a25f7ddbc9545be",
          "sha256": "efb87ee0a997b0e531d71617368b58f589bbcc87c7d0a9cb2da830cd92896cdd"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "387d80db5b7f91a91a25f7ddbc9545be",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24792,
        "upload_time": "2016-11-16T15:48:54",
        "upload_time_iso_8601": "2016-11-16T15:48:54.883616Z",
        "url": "https://files.pythonhosted.org/packages/8e/76/6674e78229ddd4fe5065ee1ac63450e53f1b829883f88edb3c54c56662fa/craft_ai-0.4.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b3d6d1d39f009ee0d52d8d9b38c1bb1750be54873345b9e9e926b19e39ad8cc",
          "md5": "2e4ff0b45fac494df51ea26c15c8f6fe",
          "sha256": "10bf5adc30637cdb6c223fe58c642b3d59e9775a9fb0b578b7371e33b6a658be"
        },
        "downloads": -1,
        "filename": "craft_ai-0.4.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e4ff0b45fac494df51ea26c15c8f6fe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24808,
        "upload_time": "2016-12-08T13:29:28",
        "upload_time_iso_8601": "2016-12-08T13:29:28.366917Z",
        "url": "https://files.pythonhosted.org/packages/5b/3d/6d1d39f009ee0d52d8d9b38c1bb1750be54873345b9e9e926b19e39ad8cc/craft_ai-0.4.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa1e09f73590fe35d585e3a81a54d5d1df27117a76bdd4cf97518dc5ff9380d5",
          "md5": "e7f756cd850ede5b3779811bfcb3db94",
          "sha256": "7f1fdaa31527491842de15902954226e11dd99e1df00f568c9d42c4fdb747f71"
        },
        "downloads": -1,
        "filename": "craft_ai-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7f756cd850ede5b3779811bfcb3db94",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26143,
        "upload_time": "2017-03-22T18:04:50",
        "upload_time_iso_8601": "2017-03-22T18:04:50.347817Z",
        "url": "https://files.pythonhosted.org/packages/fa/1e/09f73590fe35d585e3a81a54d5d1df27117a76bdd4cf97518dc5ff9380d5/craft_ai-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7edcc8d5b692eb3506d39dfca2346e2764be7e1d903f056a1a0ce4d315be1a83",
          "md5": "0481ab4eca3d6c4e0493dd54edfa9884",
          "sha256": "a978c6d0284cc62040f8768da62bc7f6963c164e0a018b02ef307450d9681f13"
        },
        "downloads": -1,
        "filename": "craft_ai-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0481ab4eca3d6c4e0493dd54edfa9884",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26144,
        "upload_time": "2017-03-23T09:19:19",
        "upload_time_iso_8601": "2017-03-23T09:19:19.209525Z",
        "url": "https://files.pythonhosted.org/packages/7e/dc/c8d5b692eb3506d39dfca2346e2764be7e1d903f056a1a0ce4d315be1a83/craft_ai-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2d7e58350fe3863158d966843966c411cfdc44bf1ff9703703db006b299d938",
          "md5": "4b4470cc1e361bfac73b79d108e0387a",
          "sha256": "19827d9a435986c4553002898fb7dc09d7149e9de1b9b098465c31eda615d309"
        },
        "downloads": -1,
        "filename": "craft_ai-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b4470cc1e361bfac73b79d108e0387a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26813,
        "upload_time": "2017-04-04T12:37:59",
        "upload_time_iso_8601": "2017-04-04T12:37:59.448375Z",
        "url": "https://files.pythonhosted.org/packages/e2/d7/e58350fe3863158d966843966c411cfdc44bf1ff9703703db006b299d938/craft_ai-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7358eff0c531f41b7a8de8062c730489ad76ca9b4dfaa2c3ac0406218e4c023a",
          "md5": "ec5f3d773269ad2d47c63004cc6f2e90",
          "sha256": "a26cf81c4fe10198f77bcfd8579e2aa0ee9c25d33f5ec481cc12e736b806d901"
        },
        "downloads": -1,
        "filename": "craft_ai-1.10.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec5f3d773269ad2d47c63004cc6f2e90",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 36098,
        "upload_time": "2018-02-14T16:10:05",
        "upload_time_iso_8601": "2018-02-14T16:10:05.677316Z",
        "url": "https://files.pythonhosted.org/packages/73/58/eff0c531f41b7a8de8062c730489ad76ca9b4dfaa2c3ac0406218e4c023a/craft_ai-1.10.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8ae9c0350a9e821730ae1511c8172bca089f534b8cec58858c97867bc81effd",
          "md5": "6529db1f24e848207bcfa59a786ae0ff",
          "sha256": "81f39ac3317f2c47bb2feb3759b9a201f0fc899fc45186f2539449294a4d4fbf"
        },
        "downloads": -1,
        "filename": "craft_ai-1.11.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6529db1f24e848207bcfa59a786ae0ff",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26694,
        "upload_time": "2018-04-13T15:45:05",
        "upload_time_iso_8601": "2018-04-13T15:45:05.523985Z",
        "url": "https://files.pythonhosted.org/packages/f8/ae/9c0350a9e821730ae1511c8172bca089f534b8cec58858c97867bc81effd/craft_ai-1.11.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c8c7fff79711954d99ab3887e4e5109d6767980d73acca679d417e692df315e",
          "md5": "4d8a756e5cdce6c42b45a66fde88f850",
          "sha256": "91ef763e731ea1bbd16f02502245e20a3324aac998225059e1013c1777b3cde6"
        },
        "downloads": -1,
        "filename": "craft_ai-1.12.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d8a756e5cdce6c42b45a66fde88f850",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 30280,
        "upload_time": "2018-04-25T08:19:44",
        "upload_time_iso_8601": "2018-04-25T08:19:44.079148Z",
        "url": "https://files.pythonhosted.org/packages/2c/8c/7fff79711954d99ab3887e4e5109d6767980d73acca679d417e692df315e/craft_ai-1.12.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.14.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36219a7cd18eb394454fcf7c407c1ee6659d5c141afde01c40cb6a0052554067",
          "md5": "6c7eafe72457bd20dbe3760c747d20d7",
          "sha256": "1c21feebca734a22a369ec2be053a27fdbd0aa36316700947a90ef3eb3a2f138"
        },
        "downloads": -1,
        "filename": "craft_ai-1.14.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c7eafe72457bd20dbe3760c747d20d7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 33440,
        "upload_time": "2018-11-28T08:26:24",
        "upload_time_iso_8601": "2018-11-28T08:26:24.769764Z",
        "url": "https://files.pythonhosted.org/packages/36/21/9a7cd18eb394454fcf7c407c1ee6659d5c141afde01c40cb6a0052554067/craft_ai-1.14.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "367f4fa21b318240129fc382c48e1399d429005aea4dc19dff8b878b079b7ec0",
          "md5": "8fc2c762f7811bdd6bc4f07ccec0a6bc",
          "sha256": "76f21abc09c10d5cce0f0d7197483c7e21679974b2c9c5d6af100b8a254e3bb4"
        },
        "downloads": -1,
        "filename": "craft_ai-1.15.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fc2c762f7811bdd6bc4f07ccec0a6bc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 37857,
        "upload_time": "2019-02-25T15:21:31",
        "upload_time_iso_8601": "2019-02-25T15:21:31.935049Z",
        "url": "https://files.pythonhosted.org/packages/36/7f/4fa21b318240129fc382c48e1399d429005aea4dc19dff8b878b079b7ec0/craft_ai-1.15.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a5bc946a11ad5cf9af786e19f335aeaf77b37bab9c746bd14fb869311edc12d",
          "md5": "c0732a47cc55af6afe0ddcbdf7a1bc28",
          "sha256": "2056af46a5af7546e0e7616f6e7dfda3aed7e64713f1b7d01bd7e07be2525d21"
        },
        "downloads": -1,
        "filename": "craft_ai-1.15.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0732a47cc55af6afe0ddcbdf7a1bc28",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 42446,
        "upload_time": "2019-07-03T09:01:10",
        "upload_time_iso_8601": "2019-07-03T09:01:10.436944Z",
        "url": "https://files.pythonhosted.org/packages/7a/5b/c946a11ad5cf9af786e19f335aeaf77b37bab9c746bd14fb869311edc12d/craft_ai-1.15.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51f9f4929278af282da557f99807c6ffa9d244f497902b4dd0ab7fa3bc01be25",
          "md5": "42530c60a1fdae4eff071d87000603bf",
          "sha256": "5b445c29c7f801946cb684ad6129f6f1d60691c74e4f1db2911b12e63432d06d"
        },
        "downloads": -1,
        "filename": "craft_ai-1.15.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42530c60a1fdae4eff071d87000603bf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 44924,
        "upload_time": "2019-08-14T16:32:04",
        "upload_time_iso_8601": "2019-08-14T16:32:04.384196Z",
        "url": "https://files.pythonhosted.org/packages/51/f9/f4929278af282da557f99807c6ffa9d244f497902b4dd0ab7fa3bc01be25/craft_ai-1.15.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "355d598ba400ded6bd10b33846307555049be35766be76d0a3fcf6557d66e2ec",
          "md5": "1ddcb4b0ba814f2a4fc851d3fcfa8f16",
          "sha256": "07f9931fe6bf0e970563a8696b4fe43ae6f6635ae3a9ef81cf19c4ed5cff3739"
        },
        "downloads": -1,
        "filename": "craft_ai-1.15.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ddcb4b0ba814f2a4fc851d3fcfa8f16",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 45568,
        "upload_time": "2019-09-02T12:23:37",
        "upload_time_iso_8601": "2019-09-02T12:23:37.435960Z",
        "url": "https://files.pythonhosted.org/packages/35/5d/598ba400ded6bd10b33846307555049be35766be76d0a3fcf6557d66e2ec/craft_ai-1.15.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f048fd9a622ea650a51177a577fc4ea2689f2d382c60108c0ff737949a084d9",
          "md5": "8bcb48ae64b646fbea8ecd832bc14156",
          "sha256": "64754cbdad9b898f38743f53a4fe9e56244fb46510aac9d47897261da523b421"
        },
        "downloads": -1,
        "filename": "craft_ai-1.15.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bcb48ae64b646fbea8ecd832bc14156",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 45850,
        "upload_time": "2019-09-05T08:27:07",
        "upload_time_iso_8601": "2019-09-05T08:27:07.885106Z",
        "url": "https://files.pythonhosted.org/packages/5f/04/8fd9a622ea650a51177a577fc4ea2689f2d382c60108c0ff737949a084d9/craft_ai-1.15.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "215580e78216c2dbf6e9037d1a8b35a9f45dcdb6cf061c1efbccc16545ba73d1",
          "md5": "c222a8a096b787eab41556f23cfde8b6",
          "sha256": "6e4b39edf53264b62e416d883664399b67de00f30b5e385de97aefc551b569d9"
        },
        "downloads": -1,
        "filename": "craft_ai-1.15.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c222a8a096b787eab41556f23cfde8b6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 46689,
        "upload_time": "2019-09-19T11:57:24",
        "upload_time_iso_8601": "2019-09-19T11:57:24.474586Z",
        "url": "https://files.pythonhosted.org/packages/21/55/80e78216c2dbf6e9037d1a8b35a9f45dcdb6cf061c1efbccc16545ba73d1/craft_ai-1.15.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "038fd267996b41a0cc7e056d9c982228e84973666f17cd24efdfad9eb27ce058",
          "md5": "f258734d1d0453149c462d231711f864",
          "sha256": "1e532135c448978d53e756a4fdcf69f9f557442c5fd2c2a755e8995ba2b2da3b"
        },
        "downloads": -1,
        "filename": "craft_ai-1.15.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f258734d1d0453149c462d231711f864",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 46693,
        "upload_time": "2019-10-29T10:11:28",
        "upload_time_iso_8601": "2019-10-29T10:11:28.429069Z",
        "url": "https://files.pythonhosted.org/packages/03/8f/d267996b41a0cc7e056d9c982228e84973666f17cd24efdfad9eb27ce058/craft_ai-1.15.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6e3ef4aaf3c3d520847369c5ed21ec3c18f3aa0f6c9d971095c2451dcbe0ce4",
          "md5": "3de0b9bc669ae7a289371b914b89d550",
          "sha256": "82a4619dd6b9702686fb3c2fcfb822775ebeac1690b94addf7d02ac60f17ccd5"
        },
        "downloads": -1,
        "filename": "craft_ai-1.15.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3de0b9bc669ae7a289371b914b89d550",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 46318,
        "upload_time": "2019-11-19T14:06:39",
        "upload_time_iso_8601": "2019-11-19T14:06:39.256989Z",
        "url": "https://files.pythonhosted.org/packages/e6/e3/ef4aaf3c3d520847369c5ed21ec3c18f3aa0f6c9d971095c2451dcbe0ce4/craft_ai-1.15.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.16.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3266eaa9a5d7a14e390f4788f075592d21a62f71a68dcaa4b166f3bb004925d5",
          "md5": "7e10d77faeffd0d8a1a5295699c59923",
          "sha256": "ad1504c8f553b5ed4f73c0ee3ac4c4f4d8914dea168ba9d787831a624f29e1d1"
        },
        "downloads": -1,
        "filename": "craft_ai-1.16.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e10d77faeffd0d8a1a5295699c59923",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 48690,
        "upload_time": "2020-02-21T15:06:46",
        "upload_time_iso_8601": "2020-02-21T15:06:46.041494Z",
        "url": "https://files.pythonhosted.org/packages/32/66/eaa9a5d7a14e390f4788f075592d21a62f71a68dcaa4b166f3bb004925d5/craft_ai-1.16.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92b6e8dd0e42585fe7deaefde1b96a64878bf30396faa85a2a057ebdb58ac684",
          "md5": "6c8bbf1862d0676b880d7d733a54aa6f",
          "sha256": "0264d88d81a1a779cb3ee933c2b02699757c73a75566ef8439b7aaad051e16bd"
        },
        "downloads": -1,
        "filename": "craft_ai-1.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c8bbf1862d0676b880d7d733a54aa6f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 27932,
        "upload_time": "2017-04-13T11:14:08",
        "upload_time_iso_8601": "2017-04-13T11:14:08.519957Z",
        "url": "https://files.pythonhosted.org/packages/92/b6/e8dd0e42585fe7deaefde1b96a64878bf30396faa85a2a057ebdb58ac684/craft_ai-1.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bc3001331bfb59c3e23b2d1c1c89947259a081d79b83e359a330c9f0d9d08c3",
          "md5": "974232dcd7dffcc9ba3b9292b022c012",
          "sha256": "65f97f54c3f1451fd1e7147083b27d33a552f0701c6f00202eee81f20c768227"
        },
        "downloads": -1,
        "filename": "craft_ai-1.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "974232dcd7dffcc9ba3b9292b022c012",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 27934,
        "upload_time": "2017-04-13T13:30:16",
        "upload_time_iso_8601": "2017-04-13T13:30:16.569437Z",
        "url": "https://files.pythonhosted.org/packages/8b/c3/001331bfb59c3e23b2d1c1c89947259a081d79b83e359a330c9f0d9d08c3/craft_ai-1.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60849ed9542a3fff3eb6f64c66aeac41e04913659aeadd21d5f9741261161875",
          "md5": "0cff4e9ce0e2e599a769e0946162dcfa",
          "sha256": "6b85a5e8e03cf2c9fa3b3cb8ff7c9f2f481a03a181f384c484fbf1c3032d3e14"
        },
        "downloads": -1,
        "filename": "craft_ai-1.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cff4e9ce0e2e599a769e0946162dcfa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 27996,
        "upload_time": "2017-06-06T16:43:31",
        "upload_time_iso_8601": "2017-06-06T16:43:31.100010Z",
        "url": "https://files.pythonhosted.org/packages/60/84/9ed9542a3fff3eb6f64c66aeac41e04913659aeadd21d5f9741261161875/craft_ai-1.2.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e06cfaac781add731fb2e49d79773de5cff7ae384995a1ad51c84f88a58a7702",
          "md5": "445c116e7e52f60782c510b161cab8e6",
          "sha256": "b35f71abff612a1aac618cbd3c8e6f21252cf7a5bcfeda62a7758f69ac05af62"
        },
        "downloads": -1,
        "filename": "craft_ai-1.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "445c116e7e52f60782c510b161cab8e6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 29777,
        "upload_time": "2017-07-10T07:00:04",
        "upload_time_iso_8601": "2017-07-10T07:00:04.172962Z",
        "url": "https://files.pythonhosted.org/packages/e0/6c/faac781add731fb2e49d79773de5cff7ae384995a1ad51c84f88a58a7702/craft_ai-1.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8716b69f363b0dfb57cf3dde4db4a395268903cc228776548ac2fc2e9f26fd66",
          "md5": "ef6e4e59c2680204b97114dbe07d8284",
          "sha256": "b00b81905a3441a557fa575e3b5d6fef5904c4ea2602d5da9e98a0bbe1ac8af2"
        },
        "downloads": -1,
        "filename": "craft_ai-1.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef6e4e59c2680204b97114dbe07d8284",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 31696,
        "upload_time": "2017-07-10T08:28:57",
        "upload_time_iso_8601": "2017-07-10T08:28:57.973562Z",
        "url": "https://files.pythonhosted.org/packages/87/16/b69f363b0dfb57cf3dde4db4a395268903cc228776548ac2fc2e9f26fd66/craft_ai-1.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "411e5ee603e676800e442403e3b63b2f92ffdca896a75ad586bda00bf0a32823",
          "md5": "4caab3c08081cbc40799485f5558b124",
          "sha256": "10ba142b21197719d0e73f573587720a6bef05bcc4bbc637364363911ddc35ad"
        },
        "downloads": -1,
        "filename": "craft_ai-1.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4caab3c08081cbc40799485f5558b124",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 33040,
        "upload_time": "2017-07-13T13:19:16",
        "upload_time_iso_8601": "2017-07-13T13:19:16.393617Z",
        "url": "https://files.pythonhosted.org/packages/41/1e/5ee603e676800e442403e3b63b2f92ffdca896a75ad586bda00bf0a32823/craft_ai-1.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a961258f89530308ad01c068e0f31fc3959c40bd956de5c9a237622607fe13d",
          "md5": "43da7cfeb570943da552ca08a6b5d6de",
          "sha256": "375741417917db4d39792081cf51ad93112997a8f90604698b0314748cbf442b"
        },
        "downloads": -1,
        "filename": "craft_ai-1.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43da7cfeb570943da552ca08a6b5d6de",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 33146,
        "upload_time": "2017-07-19T12:33:11",
        "upload_time_iso_8601": "2017-07-19T12:33:11.732485Z",
        "url": "https://files.pythonhosted.org/packages/6a/96/1258f89530308ad01c068e0f31fc3959c40bd956de5c9a237622607fe13d/craft_ai-1.4.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6e321dae690aa0217d417d59014e200782070a6ee598f03666b2ca46ac001b0",
          "md5": "55a1e35b91487c2348652d12a57f3a4a",
          "sha256": "75b3e737eb6d82c5ab6d225eba2734a138c733b727e0f046ec6fad7a6813d18a"
        },
        "downloads": -1,
        "filename": "craft_ai-1.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55a1e35b91487c2348652d12a57f3a4a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 33345,
        "upload_time": "2017-08-02T10:02:41",
        "upload_time_iso_8601": "2017-08-02T10:02:41.852047Z",
        "url": "https://files.pythonhosted.org/packages/d6/e3/21dae690aa0217d417d59014e200782070a6ee598f03666b2ca46ac001b0/craft_ai-1.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "332052592cbdd5e032cf28ffa5b1f67dcd60a7d7501a7807a735b52b1ea748ef",
          "md5": "ffef5b04ce8510f82a4d1708f34048e0",
          "sha256": "0deb93e4d05cae115984ac396212bddd72cf511b752df606a53f80b092eafe6b"
        },
        "downloads": -1,
        "filename": "craft_ai-1.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffef5b04ce8510f82a4d1708f34048e0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 33810,
        "upload_time": "2017-08-22T14:40:26",
        "upload_time_iso_8601": "2017-08-22T14:40:26.291102Z",
        "url": "https://files.pythonhosted.org/packages/33/20/52592cbdd5e032cf28ffa5b1f67dcd60a7d7501a7807a735b52b1ea748ef/craft_ai-1.6.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "119c4711331b75c1c65134b33f632ecf2bf4116c413d562f71d493069b6cd10f",
          "md5": "972309c6d8f89120ea25153139a27734",
          "sha256": "02e62f653776a015b4ea83cd8c62a42879d149649a016ace027954824dde8fce"
        },
        "downloads": -1,
        "filename": "craft_ai-1.7.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "972309c6d8f89120ea25153139a27734",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 34150,
        "upload_time": "2017-10-13T12:12:26",
        "upload_time_iso_8601": "2017-10-13T12:12:26.258952Z",
        "url": "https://files.pythonhosted.org/packages/11/9c/4711331b75c1c65134b33f632ecf2bf4116c413d562f71d493069b6cd10f/craft_ai-1.7.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "882cedabccd4d0926dadb33f5153a97920c0192b46557a7ac04c60a9c9e6df3d",
          "md5": "cd2b6d1d960af8cba295e879bf7decea",
          "sha256": "a421c24bd97fe7260f7ab56cfbdc6cee3584a8b9b1e5fc799af303b55e32b68b"
        },
        "downloads": -1,
        "filename": "craft_ai-1.7.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd2b6d1d960af8cba295e879bf7decea",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 34150,
        "upload_time": "2017-10-13T12:34:46",
        "upload_time_iso_8601": "2017-10-13T12:34:46.206057Z",
        "url": "https://files.pythonhosted.org/packages/88/2c/edabccd4d0926dadb33f5153a97920c0192b46557a7ac04c60a9c9e6df3d/craft_ai-1.7.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bd63901aad70b7f13a0fac36be93cc345688138bf805a533bbec52c01d3efe1",
          "md5": "243b6f4c69e3c5746b1daac139e73ec8",
          "sha256": "741cc14fae344ca9f6878ae542ca6414b507a896be05c38acaf7457d95428d8f"
        },
        "downloads": -1,
        "filename": "craft_ai-1.8.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "243b6f4c69e3c5746b1daac139e73ec8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 35462,
        "upload_time": "2017-10-24T09:24:49",
        "upload_time_iso_8601": "2017-10-24T09:24:49.678350Z",
        "url": "https://files.pythonhosted.org/packages/1b/d6/3901aad70b7f13a0fac36be93cc345688138bf805a533bbec52c01d3efe1/craft_ai-1.8.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "640a4b9bf12be927788f23b6b7ab8cf1834823d871506521e14285d0c40e99c5",
          "md5": "6f2fea50a075933f742a17087a67599c",
          "sha256": "45a8269d6b54291882899bdaebf44997dad52193c681ecfd3a083a6a0b89ee94"
        },
        "downloads": -1,
        "filename": "craft_ai-1.9.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f2fea50a075933f742a17087a67599c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 35952,
        "upload_time": "2017-11-06T16:50:17",
        "upload_time_iso_8601": "2017-11-06T16:50:17.558012Z",
        "url": "https://files.pythonhosted.org/packages/64/0a/4b9bf12be927788f23b6b7ab8cf1834823d871506521e14285d0c40e99c5/craft_ai-1.9.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6873a2a709dbd2a84f3675e3e40b7fdaf5df17e39b3c8e631aa4866aa1dac26e",
          "md5": "23b97c5c6226c551c75c9b62ab94c102",
          "sha256": "dcb2ce620c3d2c1b0beb39ce3fa063bce5e31a188d261f103be1cc27f413fb56"
        },
        "downloads": -1,
        "filename": "craft_ai-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23b97c5c6226c551c75c9b62ab94c102",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 55625,
        "upload_time": "2020-03-18T08:59:24",
        "upload_time_iso_8601": "2020-03-18T08:59:24.514437Z",
        "url": "https://files.pythonhosted.org/packages/68/73/a2a709dbd2a84f3675e3e40b7fdaf5df17e39b3c8e631aa4866aa1dac26e/craft_ai-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a6a2aad41a888a41270b74bd72c6a7068038c70eb9bc945a2f2bb51cf48ebda",
          "md5": "f090be016ab5d9d5d391040b18df1f2b",
          "sha256": "e4a6baa9b2767f6c2116e17db1f98af051129fd69e2ac307be3168852cfa1dbf"
        },
        "downloads": -1,
        "filename": "craft-ai-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f090be016ab5d9d5d391040b18df1f2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 77284,
        "upload_time": "2020-03-18T08:59:22",
        "upload_time_iso_8601": "2020-03-18T08:59:22.368713Z",
        "url": "https://files.pythonhosted.org/packages/3a/6a/2aad41a888a41270b74bd72c6a7068038c70eb9bc945a2f2bb51cf48ebda/craft-ai-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b879caac35ba581800f2a7d4ac72878d797b2449e2221093d776796ea3c0241",
          "md5": "340b87fff38200459db34d00d0bfdd81",
          "sha256": "61c6abddd90f44fed8d0327661200603bf7db940c312793515bc9cfaed965006"
        },
        "downloads": -1,
        "filename": "craft_ai-2.0.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "340b87fff38200459db34d00d0bfdd81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 51770,
        "upload_time": "2020-02-20T10:03:10",
        "upload_time_iso_8601": "2020-02-20T10:03:10.342029Z",
        "url": "https://files.pythonhosted.org/packages/5b/87/9caac35ba581800f2a7d4ac72878d797b2449e2221093d776796ea3c0241/craft_ai-2.0.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "057784a6550f5f450a59746f65dbb2f50d3e116b02f46cdbe2a315434f7cbd37",
          "md5": "4d488cfa7ad378ab8c732ba299d2c149",
          "sha256": "88cb1e430ed41dc88fdddb45ef69c39dc8088e3db083e3fb21f3e0205478691e"
        },
        "downloads": -1,
        "filename": "craft-ai-2.0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d488cfa7ad378ab8c732ba299d2c149",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 70207,
        "upload_time": "2020-02-20T10:03:08",
        "upload_time_iso_8601": "2020-02-20T10:03:08.267515Z",
        "url": "https://files.pythonhosted.org/packages/05/77/84a6550f5f450a59746f65dbb2f50d3e116b02f46cdbe2a315434f7cbd37/craft-ai-2.0.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42b18dfbf7966607850d5a6528a0da53ff31262a70f1c9938326e0d36eb0546f",
          "md5": "3e6f34f0c8995364921b3150250c850e",
          "sha256": "dc14eb05cb439475f3151ed386c9f001a0df1c91c7a6f7ec0713faf7ff6449e3"
        },
        "downloads": -1,
        "filename": "craft_ai-2.0.0rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e6f34f0c8995364921b3150250c850e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 52352,
        "upload_time": "2020-02-20T16:47:17",
        "upload_time_iso_8601": "2020-02-20T16:47:17.434940Z",
        "url": "https://files.pythonhosted.org/packages/42/b1/8dfbf7966607850d5a6528a0da53ff31262a70f1c9938326e0d36eb0546f/craft_ai-2.0.0rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "709d4b3573ea9510b07f6907c0221b5cc70ddd5b54c12f8c0f2e1179ee3e09b8",
          "md5": "e84bb4c3e793d1fc1efb5461fe9df45d",
          "sha256": "ef9b235d32f7fb253a9834b8d08cdb051957b1deb5a42af974d0fbba323ad914"
        },
        "downloads": -1,
        "filename": "craft-ai-2.0.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "e84bb4c3e793d1fc1efb5461fe9df45d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 70466,
        "upload_time": "2020-02-20T16:47:15",
        "upload_time_iso_8601": "2020-02-20T16:47:15.576322Z",
        "url": "https://files.pythonhosted.org/packages/70/9d/4b3573ea9510b07f6907c0221b5cc70ddd5b54c12f8c0f2e1179ee3e09b8/craft-ai-2.0.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67eecec0d4fc5168f976f8cbd8b5c76bd6c02763c817afc50c0eeef48a1cba7d",
          "md5": "fc48428741ef964a2f77bfe8ee43e21b",
          "sha256": "d2ffbf7d0064e2f111624de54e1e1501c2f2edc0c9cb598bb02dc0049a5e084b"
        },
        "downloads": -1,
        "filename": "craft_ai-2.0.0rc3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc48428741ef964a2f77bfe8ee43e21b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 54749,
        "upload_time": "2020-02-24T11:54:30",
        "upload_time_iso_8601": "2020-02-24T11:54:30.458193Z",
        "url": "https://files.pythonhosted.org/packages/67/ee/cec0d4fc5168f976f8cbd8b5c76bd6c02763c817afc50c0eeef48a1cba7d/craft_ai-2.0.0rc3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f32c5195e34f0f56e81faf2eebaf1f785011af140fdc0a4348b1b5b3f4a3014",
          "md5": "cbd7a309d9eacb5a361cff1204c58a4b",
          "sha256": "9f000f6afcb84e6443ff3c6b624a70ca60edb56dcae074d87ad8b39b7c90de8e"
        },
        "downloads": -1,
        "filename": "craft-ai-2.0.0rc3.tar.gz",
        "has_sig": false,
        "md5_digest": "cbd7a309d9eacb5a361cff1204c58a4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 76313,
        "upload_time": "2020-02-24T11:54:28",
        "upload_time_iso_8601": "2020-02-24T11:54:28.029190Z",
        "url": "https://files.pythonhosted.org/packages/0f/32/c5195e34f0f56e81faf2eebaf1f785011af140fdc0a4348b1b5b3f4a3014/craft-ai-2.0.0rc3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0afb786404f005c1c53084dd008da201922909f7697476a646e0317ea6b52eaa",
          "md5": "d41c8064f488f776d27f6aa3b108cb5d",
          "sha256": "7403ff302730495924c09302b733891bea28e4a6ff103ba62e15a60802e9d92b"
        },
        "downloads": -1,
        "filename": "craft_ai-2.0.0rc4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d41c8064f488f776d27f6aa3b108cb5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 54835,
        "upload_time": "2020-02-25T08:50:38",
        "upload_time_iso_8601": "2020-02-25T08:50:38.889146Z",
        "url": "https://files.pythonhosted.org/packages/0a/fb/786404f005c1c53084dd008da201922909f7697476a646e0317ea6b52eaa/craft_ai-2.0.0rc4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1f45905863e2b1f6778aaeb212e3d8b333ea8dd38fe24474e7d26ea1702ca78",
          "md5": "10a6354ae8dc4b7599482126af1f7bb8",
          "sha256": "9a088a1e0d27c5405a457680032aa06281d044405d1a60804c9f9dbff9c9cab1"
        },
        "downloads": -1,
        "filename": "craft-ai-2.0.0rc4.tar.gz",
        "has_sig": false,
        "md5_digest": "10a6354ae8dc4b7599482126af1f7bb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 76389,
        "upload_time": "2020-02-25T08:50:36",
        "upload_time_iso_8601": "2020-02-25T08:50:36.842783Z",
        "url": "https://files.pythonhosted.org/packages/d1/f4/5905863e2b1f6778aaeb212e3d8b333ea8dd38fe24474e7d26ea1702ca78/craft-ai-2.0.0rc4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba50836b68bf80d3d5eaee1e9e4840b0c59b7c253abc2cc2470e0585aaadd44e",
          "md5": "fec0563f3bd173bbee4e2585bb750e41",
          "sha256": "0767124880dc903a7584cef1c787f9b2786c096f014149e09537cefedced04eb"
        },
        "downloads": -1,
        "filename": "craft_ai-2.0.0rc5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fec0563f3bd173bbee4e2585bb750e41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 55529,
        "upload_time": "2020-03-02T14:52:23",
        "upload_time_iso_8601": "2020-03-02T14:52:23.418439Z",
        "url": "https://files.pythonhosted.org/packages/ba/50/836b68bf80d3d5eaee1e9e4840b0c59b7c253abc2cc2470e0585aaadd44e/craft_ai-2.0.0rc5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b04cc304532f7579f9c540dd16c88fa99293b60ee5769c1772abea1adb50926",
          "md5": "4b0b9fe4cde9afaf25650e485b74761a",
          "sha256": "e8beb3ea1b9e7d6ab66f3a6a91e5adc44e1e6188308cc48be0ff1f7b2e0852fe"
        },
        "downloads": -1,
        "filename": "craft-ai-2.0.0rc5.tar.gz",
        "has_sig": false,
        "md5_digest": "4b0b9fe4cde9afaf25650e485b74761a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 76952,
        "upload_time": "2020-03-02T14:52:21",
        "upload_time_iso_8601": "2020-03-02T14:52:21.163141Z",
        "url": "https://files.pythonhosted.org/packages/7b/04/cc304532f7579f9c540dd16c88fa99293b60ee5769c1772abea1adb50926/craft-ai-2.0.0rc5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0rc6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34a5fedec341c843248f1c8284612321a51deac832be8494d770b5557c71f2da",
          "md5": "8246401f551a0bf965a88a102199dcf4",
          "sha256": "5a6cc0cf921145a69b2739a1b74a60e5436c09f9296e374ef0e36b4854875eb3"
        },
        "downloads": -1,
        "filename": "craft_ai-2.0.0rc6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8246401f551a0bf965a88a102199dcf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 55543,
        "upload_time": "2020-03-17T14:48:27",
        "upload_time_iso_8601": "2020-03-17T14:48:27.276585Z",
        "url": "https://files.pythonhosted.org/packages/34/a5/fedec341c843248f1c8284612321a51deac832be8494d770b5557c71f2da/craft_ai-2.0.0rc6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee7637b1f161668a1e467832b0d51909c4e820b256989797fa20d880195f675b",
          "md5": "c421905fddfef6bf1623560a1af8090d",
          "sha256": "713d17007a6d213e1e21f2b4d4bacf101b1de50e9f0e0aaa9952fdbac9f2aadc"
        },
        "downloads": -1,
        "filename": "craft-ai-2.0.0rc6.tar.gz",
        "has_sig": false,
        "md5_digest": "c421905fddfef6bf1623560a1af8090d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 77002,
        "upload_time": "2020-03-17T14:48:25",
        "upload_time_iso_8601": "2020-03-17T14:48:25.222270Z",
        "url": "https://files.pythonhosted.org/packages/ee/76/37b1f161668a1e467832b0d51909c4e820b256989797fa20d880195f675b/craft-ai-2.0.0rc6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd1f5dcfb1519e2d41fd53677df088377324b32fd87cc1aa76a81bfe77791116",
          "md5": "b10534f237ed2c87ad85f82318c2d2ee",
          "sha256": "e10d36c70d5988449fcd9b5d782796cf24852eb056a971f2620f3eafb0d52cf7"
        },
        "downloads": -1,
        "filename": "craft_ai-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b10534f237ed2c87ad85f82318c2d2ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 56290,
        "upload_time": "2020-10-27T16:38:25",
        "upload_time_iso_8601": "2020-10-27T16:38:25.214789Z",
        "url": "https://files.pythonhosted.org/packages/bd/1f/5dcfb1519e2d41fd53677df088377324b32fd87cc1aa76a81bfe77791116/craft_ai-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fc9b373f3bbfaed3a05d006fcd032ef4193d96ba0085847842e76420c4f5a16",
          "md5": "0d5989cee1084215bac3c5a4246bffdf",
          "sha256": "3e32728ccbb020cee9513413ef7675dac3a880ada560c1b19080e6fcaa2c0f53"
        },
        "downloads": -1,
        "filename": "craft-ai-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d5989cee1084215bac3c5a4246bffdf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 77311,
        "upload_time": "2020-10-27T16:38:22",
        "upload_time_iso_8601": "2020-10-27T16:38:22.851870Z",
        "url": "https://files.pythonhosted.org/packages/4f/c9/b373f3bbfaed3a05d006fcd032ef4193d96ba0085847842e76420c4f5a16/craft-ai-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87cc5663ca1c16a999bc7fe19319cae8accd5a1cd6ccd336cd9c2af6fc86f8c8",
          "md5": "f65e9ce8801ce3a6ce6129ac262f639b",
          "sha256": "22544f13825e906b671706f5807aab1bd41cdbcf398c9cbf8098eb76556958a4"
        },
        "downloads": -1,
        "filename": "craft_ai-2.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f65e9ce8801ce3a6ce6129ac262f639b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 56818,
        "upload_time": "2021-02-25T14:52:07",
        "upload_time_iso_8601": "2021-02-25T14:52:07.626784Z",
        "url": "https://files.pythonhosted.org/packages/87/cc/5663ca1c16a999bc7fe19319cae8accd5a1cd6ccd336cd9c2af6fc86f8c8/craft_ai-2.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "084ed426b5cc85ce6aaf685f45fbd54c585a58d99e04ba679e9e29b632b08e9a",
          "md5": "6ff00b16ed82e938d017a75b7adfc470",
          "sha256": "28327510fc072d370d7ce75dc59148abd3bfd90f2ffe1e6c642291c84a489f8c"
        },
        "downloads": -1,
        "filename": "craft-ai-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ff00b16ed82e938d017a75b7adfc470",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 77772,
        "upload_time": "2021-02-25T14:52:05",
        "upload_time_iso_8601": "2021-02-25T14:52:05.471048Z",
        "url": "https://files.pythonhosted.org/packages/08/4e/d426b5cc85ce6aaf685f45fbd54c585a58d99e04ba679e9e29b632b08e9a/craft-ai-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b40cf5675cac827ddaa9010eafce244e9987941963655511573eb2bbdc4f4c1",
          "md5": "d301893d2386aa4ebd4a37da6884b38e",
          "sha256": "002050bef5ac3b6c8d913fac97a490ec7eef17ffea7b52efbae8e37199a5bc11"
        },
        "downloads": -1,
        "filename": "craft_ai-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d301893d2386aa4ebd4a37da6884b38e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 58565,
        "upload_time": "2021-04-06T14:30:18",
        "upload_time_iso_8601": "2021-04-06T14:30:18.099353Z",
        "url": "https://files.pythonhosted.org/packages/7b/40/cf5675cac827ddaa9010eafce244e9987941963655511573eb2bbdc4f4c1/craft_ai-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4687079e6fe380ff256af1fc5c9c4bf2050496690744c73abb4e1161ac9d839",
          "md5": "81f7c141416e4d8aca8d48958dca9d07",
          "sha256": "9fdd0f712686ed62cd0eedd44880798c6d42602a7b144c5438ab25467bb2900b"
        },
        "downloads": -1,
        "filename": "craft-ai-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "81f7c141416e4d8aca8d48958dca9d07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 80845,
        "upload_time": "2021-04-06T14:30:16",
        "upload_time_iso_8601": "2021-04-06T14:30:16.146990Z",
        "url": "https://files.pythonhosted.org/packages/b4/68/7079e6fe380ff256af1fc5c9c4bf2050496690744c73abb4e1161ac9d839/craft-ai-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "309b6f35251b298fb10f3b960b45d4e9ddaa92c7688d9339e4469985deca1677",
          "md5": "f4ba0f961f7c7a2812d64eb4694d41b1",
          "sha256": "089aac995b79ca54bbfc24337799da13e8b0c3707a6d61bd57cef147493ab13b"
        },
        "downloads": -1,
        "filename": "craft_ai-2.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4ba0f961f7c7a2812d64eb4694d41b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 59064,
        "upload_time": "2021-04-15T14:31:31",
        "upload_time_iso_8601": "2021-04-15T14:31:31.545137Z",
        "url": "https://files.pythonhosted.org/packages/30/9b/6f35251b298fb10f3b960b45d4e9ddaa92c7688d9339e4469985deca1677/craft_ai-2.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c629007cb22d6e3f33e7089653a9b6b0fd70523c967b8598270969cbde714ea9",
          "md5": "4a2c1aa5b886790388a210cea92c955d",
          "sha256": "a4064b3117e89d2db612c12951eacf07916e9ff99e63f83dd2e1199ea8a4e2a8"
        },
        "downloads": -1,
        "filename": "craft-ai-2.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4a2c1aa5b886790388a210cea92c955d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 81102,
        "upload_time": "2021-04-15T14:31:29",
        "upload_time_iso_8601": "2021-04-15T14:31:29.448403Z",
        "url": "https://files.pythonhosted.org/packages/c6/29/007cb22d6e3f33e7089653a9b6b0fd70523c967b8598270969cbde714ea9/craft-ai-2.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c45553e518f63dba405572b76b9af8c5fb9869a5a765348bac397f6d3ba22070",
          "md5": "94b67cae5a89db463c6fbb6dab8158ad",
          "sha256": "d8ec58b0dc8debe580bbe8ceb1ecabe5648ae2a801b1144c464f04b91326d794"
        },
        "downloads": -1,
        "filename": "craft_ai-2.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94b67cae5a89db463c6fbb6dab8158ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 59201,
        "upload_time": "2021-04-21T09:24:32",
        "upload_time_iso_8601": "2021-04-21T09:24:32.714800Z",
        "url": "https://files.pythonhosted.org/packages/c4/55/53e518f63dba405572b76b9af8c5fb9869a5a765348bac397f6d3ba22070/craft_ai-2.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f77717726047deba30553b07b60595b10eb52e99dbc26dfd9c435942d4160683",
          "md5": "2c7d2dfb15ebbeae68a822bc65678912",
          "sha256": "1e0ff187b8a0381556b53ff3ec5ad09de742ddc40f4ba69b8bc770bb7aad540a"
        },
        "downloads": -1,
        "filename": "craft-ai-2.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2c7d2dfb15ebbeae68a822bc65678912",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 81334,
        "upload_time": "2021-04-21T09:24:30",
        "upload_time_iso_8601": "2021-04-21T09:24:30.571198Z",
        "url": "https://files.pythonhosted.org/packages/f7/77/17726047deba30553b07b60595b10eb52e99dbc26dfd9c435942d4160683/craft-ai-2.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba0b2d84a40eb1341d0032353af6e05b76f5bc84fb3c7c78fd4e7806317ee904",
          "md5": "6dcfcc38ef6ef55748a063e643e9fdfc",
          "sha256": "a9013f0255f8676605660ceb97327b6ba3f9e96eb6cb64e7978d22e3f1c47a1e"
        },
        "downloads": -1,
        "filename": "craft_ai-2.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6dcfcc38ef6ef55748a063e643e9fdfc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 59237,
        "upload_time": "2021-04-26T13:28:53",
        "upload_time_iso_8601": "2021-04-26T13:28:53.545720Z",
        "url": "https://files.pythonhosted.org/packages/ba/0b/2d84a40eb1341d0032353af6e05b76f5bc84fb3c7c78fd4e7806317ee904/craft_ai-2.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb8d3e0cc71ba8a740c5c02c6ead5935378b17d8f58d574f3e61e9888fbb0498",
          "md5": "d273a3ce9a0cc95a878775de3b1a8caf",
          "sha256": "fff347ff97c9e6587cbebc443f56090463a27619ee2dfb95012a490988f9dfdd"
        },
        "downloads": -1,
        "filename": "craft-ai-2.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d273a3ce9a0cc95a878775de3b1a8caf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 81443,
        "upload_time": "2021-04-26T13:28:50",
        "upload_time_iso_8601": "2021-04-26T13:28:50.969308Z",
        "url": "https://files.pythonhosted.org/packages/eb/8d/3e0cc71ba8a740c5c02c6ead5935378b17d8f58d574f3e61e9888fbb0498/craft-ai-2.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65f674cccd442fb596f91ec5c91ff51134da7c35eeacd18a8b73663d8a8992db",
          "md5": "3f134db4e7659899bd7cb6976875a0b3",
          "sha256": "fb3438c6690fc51932b780dc3ea44b7caf3bef6ae50ac98f58788cdd07c97363"
        },
        "downloads": -1,
        "filename": "craft_ai-2.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f134db4e7659899bd7cb6976875a0b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 60414,
        "upload_time": "2021-04-29T10:14:40",
        "upload_time_iso_8601": "2021-04-29T10:14:40.509961Z",
        "url": "https://files.pythonhosted.org/packages/65/f6/74cccd442fb596f91ec5c91ff51134da7c35eeacd18a8b73663d8a8992db/craft_ai-2.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee10e891c237035822e6e568776343319e2df2efae799e44071e706395efe0c4",
          "md5": "81f21aa45f24bf12de08970a73e0a982",
          "sha256": "19e666651428137afc0f4fff5d621cb94f1284e4a0afb7a8263bd03387f5893b"
        },
        "downloads": -1,
        "filename": "craft-ai-2.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "81f21aa45f24bf12de08970a73e0a982",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 84575,
        "upload_time": "2021-04-29T10:14:38",
        "upload_time_iso_8601": "2021-04-29T10:14:38.219416Z",
        "url": "https://files.pythonhosted.org/packages/ee/10/e891c237035822e6e568776343319e2df2efae799e44071e706395efe0c4/craft-ai-2.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4807f64b6d401cfda8a1b6bb9a561422efb8cd761b9424e9c989f4bc4db65c6e",
          "md5": "6998c22d6a17faf1258dc220a5a17766",
          "sha256": "634fefd2d23cfd8ba52172a6a53d5187f3c7742373310838af8dae16136ccf34"
        },
        "downloads": -1,
        "filename": "craft_ai-2.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6998c22d6a17faf1258dc220a5a17766",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 60406,
        "upload_time": "2021-04-30T15:04:42",
        "upload_time_iso_8601": "2021-04-30T15:04:42.971953Z",
        "url": "https://files.pythonhosted.org/packages/48/07/f64b6d401cfda8a1b6bb9a561422efb8cd761b9424e9c989f4bc4db65c6e/craft_ai-2.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3767ca5556aa924600f4ac1f1e14dbc0d176ebb9393883beeb3d72eeafbf26c6",
          "md5": "1399315e8b59caf8b7accb9982ad2484",
          "sha256": "f46f11d75109d1c72197ec20d97d2ff8be5ad86036c411a9c95a7303264bc994"
        },
        "downloads": -1,
        "filename": "craft-ai-2.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1399315e8b59caf8b7accb9982ad2484",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 84586,
        "upload_time": "2021-04-30T15:04:40",
        "upload_time_iso_8601": "2021-04-30T15:04:40.851517Z",
        "url": "https://files.pythonhosted.org/packages/37/67/ca5556aa924600f4ac1f1e14dbc0d176ebb9393883beeb3d72eeafbf26c6/craft-ai-2.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af4867d77af0b1f8a54368dd64f7278ef40fb75c0e3aa9c1e4d16c014c7c974a",
          "md5": "072efde32a49423a5fd40a27aa1cb5b8",
          "sha256": "861e82b261418c4d362b56fdff465339a8881e43be149bb133bc5205be9340c3"
        },
        "downloads": -1,
        "filename": "craft_ai-2.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "072efde32a49423a5fd40a27aa1cb5b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 60430,
        "upload_time": "2021-05-04T12:44:39",
        "upload_time_iso_8601": "2021-05-04T12:44:39.306259Z",
        "url": "https://files.pythonhosted.org/packages/af/48/67d77af0b1f8a54368dd64f7278ef40fb75c0e3aa9c1e4d16c014c7c974a/craft_ai-2.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be98a822a8ebde8c4a89de2607424147453db27738d4a0d46edae12705cafad9",
          "md5": "8df83d4e38df9dd993e4c5110ff016bb",
          "sha256": "9a300cbb843cf8e6bd064db18cfc02473107aa7ac3103c86e6b134467b1745a2"
        },
        "downloads": -1,
        "filename": "craft-ai-2.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "8df83d4e38df9dd993e4c5110ff016bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 84585,
        "upload_time": "2021-05-04T12:44:37",
        "upload_time_iso_8601": "2021-05-04T12:44:37.087838Z",
        "url": "https://files.pythonhosted.org/packages/be/98/a822a8ebde8c4a89de2607424147453db27738d4a0d46edae12705cafad9/craft-ai-2.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9602c373aa0c044d02f2f8a208731ab71cfa49e086491a14d13cbb7ca6b3d2a",
          "md5": "608d3508d9f932db8de97789c904e87c",
          "sha256": "d3b9d4e23e2bf2f912397f18ebee49c0a5391766f3c819e6148b8a2c8b0658a7"
        },
        "downloads": -1,
        "filename": "craft_ai-2.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "608d3508d9f932db8de97789c904e87c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 60481,
        "upload_time": "2021-05-06T15:31:19",
        "upload_time_iso_8601": "2021-05-06T15:31:19.162781Z",
        "url": "https://files.pythonhosted.org/packages/b9/60/2c373aa0c044d02f2f8a208731ab71cfa49e086491a14d13cbb7ca6b3d2a/craft_ai-2.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04d1280cbbb7536b86cdf55c5117cf84bb4dfe2e00d2a929962adf8be132f3e6",
          "md5": "5f075a62150515feeec09e3a957c3b66",
          "sha256": "e55b0bc3120b12c8519220d3506a627d210a51474dc2f0e4372aa942a7b62e89"
        },
        "downloads": -1,
        "filename": "craft-ai-2.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5f075a62150515feeec09e3a957c3b66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 84634,
        "upload_time": "2021-05-06T15:31:16",
        "upload_time_iso_8601": "2021-05-06T15:31:16.686632Z",
        "url": "https://files.pythonhosted.org/packages/04/d1/280cbbb7536b86cdf55c5117cf84bb4dfe2e00d2a929962adf8be132f3e6/craft-ai-2.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0be9f32e0fbda4236084c9cefbaa7df8c724e652dbb2493a800829475755d3cf",
          "md5": "c167ade27116453cc9e1511af2b7c9b2",
          "sha256": "6880333ae0298b0c747ea69945ded105eb785bc9ab6d21e8838daa57a1ad628c"
        },
        "downloads": -1,
        "filename": "craft_ai-2.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c167ade27116453cc9e1511af2b7c9b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 62161,
        "upload_time": "2021-06-30T13:14:20",
        "upload_time_iso_8601": "2021-06-30T13:14:20.302703Z",
        "url": "https://files.pythonhosted.org/packages/0b/e9/f32e0fbda4236084c9cefbaa7df8c724e652dbb2493a800829475755d3cf/craft_ai-2.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfa1849cfc1a86237be706eca75fc88ba4ebdd7191114da91b616e172ac2275c",
          "md5": "698bc4fcc6b4fd667e4e6024661b329b",
          "sha256": "c958655aa18f4a9ce2e6a4269df6eab7d7856c554a92bf9a4fd74277f7d03892"
        },
        "downloads": -1,
        "filename": "craft-ai-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "698bc4fcc6b4fd667e4e6024661b329b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 89405,
        "upload_time": "2021-06-30T13:14:17",
        "upload_time_iso_8601": "2021-06-30T13:14:17.957653Z",
        "url": "https://files.pythonhosted.org/packages/bf/a1/849cfc1a86237be706eca75fc88ba4ebdd7191114da91b616e172ac2275c/craft-ai-2.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5836e2be58539a27facb7b1eae9f4b909b3990a101e2bdb1515ecfb5b4bbc9b",
          "md5": "eefc054844639470ab43a9949697955e",
          "sha256": "cabcf64901d7437768f4151c107fceaa2956d9fe592a6c2617a39d2f96d29452"
        },
        "downloads": -1,
        "filename": "craft_ai-2.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eefc054844639470ab43a9949697955e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 62383,
        "upload_time": "2021-07-23T08:41:24",
        "upload_time_iso_8601": "2021-07-23T08:41:24.125241Z",
        "url": "https://files.pythonhosted.org/packages/a5/83/6e2be58539a27facb7b1eae9f4b909b3990a101e2bdb1515ecfb5b4bbc9b/craft_ai-2.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35d480fd9b21e65347c2790b543cac0e043fff8bdd92aeb41c6eac027313f1d4",
          "md5": "868651b1cd2765db5ce63e2af7c72a4e",
          "sha256": "13488cfaa65678b15250ab2e4c64f3e40910eaa76f7a6d613e460db8deb647ea"
        },
        "downloads": -1,
        "filename": "craft-ai-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "868651b1cd2765db5ce63e2af7c72a4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 89676,
        "upload_time": "2021-07-23T08:41:21",
        "upload_time_iso_8601": "2021-07-23T08:41:21.338812Z",
        "url": "https://files.pythonhosted.org/packages/35/d4/80fd9b21e65347c2790b543cac0e043fff8bdd92aeb41c6eac027313f1d4/craft-ai-2.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f0fddc41eae60bb24e1635c5f00f0315b2ceb01dbed407e099579204ac5712c",
          "md5": "ab2097b9b8b2595e215e9bf665ede877",
          "sha256": "f929119f2721a9f7df0dbebc37ea41c389f55ef12d65a311f473bdbf9dc2dad0"
        },
        "downloads": -1,
        "filename": "craft_ai-2.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab2097b9b8b2595e215e9bf665ede877",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 63187,
        "upload_time": "2021-08-23T16:33:41",
        "upload_time_iso_8601": "2021-08-23T16:33:41.374781Z",
        "url": "https://files.pythonhosted.org/packages/0f/0f/ddc41eae60bb24e1635c5f00f0315b2ceb01dbed407e099579204ac5712c/craft_ai-2.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b45f6ebcd2b38c9f121fae25878b0c78c55db3c5f3a8fb22f1072db4b140282",
          "md5": "adfb1744d02501b1471b4f9e3a448842",
          "sha256": "c5bee54337f229a9bcbb038d3ad58b875455ece9e2a447eb7d08338e7f925502"
        },
        "downloads": -1,
        "filename": "craft-ai-2.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "adfb1744d02501b1471b4f9e3a448842",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 90459,
        "upload_time": "2021-08-23T16:33:37",
        "upload_time_iso_8601": "2021-08-23T16:33:37.773952Z",
        "url": "https://files.pythonhosted.org/packages/7b/45/f6ebcd2b38c9f121fae25878b0c78c55db3c5f3a8fb22f1072db4b140282/craft-ai-2.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27ed2a82bdb51685bafa5a8d89c44c3793f1b40f0730529c986a080209afb257",
          "md5": "9aa8f6222c6b8194c5db1e0cc25e90c4",
          "sha256": "184c8401b78f7f3b89b92960a12958a1a748a9fa4b1721d0cdaab8545d19900d"
        },
        "downloads": -1,
        "filename": "craft_ai-2.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9aa8f6222c6b8194c5db1e0cc25e90c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 63347,
        "upload_time": "2021-08-24T11:44:06",
        "upload_time_iso_8601": "2021-08-24T11:44:06.178780Z",
        "url": "https://files.pythonhosted.org/packages/27/ed/2a82bdb51685bafa5a8d89c44c3793f1b40f0730529c986a080209afb257/craft_ai-2.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3ab1530837a85c9abe9bdc021de552357645de8faf26cda3d9d4a8222b565d0",
          "md5": "21eee50cb36e4989cd6132d4fef1a863",
          "sha256": "eaf1bed06439f7b749a00d5120b758c6e0465cffa0a280be8a032ccb410d0e3a"
        },
        "downloads": -1,
        "filename": "craft-ai-2.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "21eee50cb36e4989cd6132d4fef1a863",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 90622,
        "upload_time": "2021-08-24T11:44:02",
        "upload_time_iso_8601": "2021-08-24T11:44:02.762779Z",
        "url": "https://files.pythonhosted.org/packages/d3/ab/1530837a85c9abe9bdc021de552357645de8faf26cda3d9d4a8222b565d0/craft-ai-2.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5341561c11137bb1616edeeb3012fb8e3ee3bc39de51ce72a2ee6c5636f58a1b",
          "md5": "9b0ac7afb51799ef679d04a034680f31",
          "sha256": "8ecc6e6d92ad562b5cea41b0c23ea13eafcf182226c916639a1aec0cd9de8171"
        },
        "downloads": -1,
        "filename": "craft_ai-2.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b0ac7afb51799ef679d04a034680f31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 64118,
        "upload_time": "2021-09-20T08:26:26",
        "upload_time_iso_8601": "2021-09-20T08:26:26.588722Z",
        "url": "https://files.pythonhosted.org/packages/53/41/561c11137bb1616edeeb3012fb8e3ee3bc39de51ce72a2ee6c5636f58a1b/craft_ai-2.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a70ac450cfda62080c60f513121da612af0d3589d325dc3242c7567a134d252d",
          "md5": "c850255c0ae1086abbf5bb57926794db",
          "sha256": "e6b78870f951feb20155845f03accbdb1a6d2cc0c19902294fbeef30efc62eda"
        },
        "downloads": -1,
        "filename": "craft-ai-2.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c850255c0ae1086abbf5bb57926794db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1,<4.0.0",
        "size": 91160,
        "upload_time": "2021-09-20T08:26:24",
        "upload_time_iso_8601": "2021-09-20T08:26:24.122301Z",
        "url": "https://files.pythonhosted.org/packages/a7/0a/c450cfda62080c60f513121da612af0d3589d325dc3242c7567a134d252d/craft-ai-2.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5341561c11137bb1616edeeb3012fb8e3ee3bc39de51ce72a2ee6c5636f58a1b",
        "md5": "9b0ac7afb51799ef679d04a034680f31",
        "sha256": "8ecc6e6d92ad562b5cea41b0c23ea13eafcf182226c916639a1aec0cd9de8171"
      },
      "downloads": -1,
      "filename": "craft_ai-2.4.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b0ac7afb51799ef679d04a034680f31",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 64118,
      "upload_time": "2021-09-20T08:26:26",
      "upload_time_iso_8601": "2021-09-20T08:26:26.588722Z",
      "url": "https://files.pythonhosted.org/packages/53/41/561c11137bb1616edeeb3012fb8e3ee3bc39de51ce72a2ee6c5636f58a1b/craft_ai-2.4.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a70ac450cfda62080c60f513121da612af0d3589d325dc3242c7567a134d252d",
        "md5": "c850255c0ae1086abbf5bb57926794db",
        "sha256": "e6b78870f951feb20155845f03accbdb1a6d2cc0c19902294fbeef30efc62eda"
      },
      "downloads": -1,
      "filename": "craft-ai-2.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c850255c0ae1086abbf5bb57926794db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1,<4.0.0",
      "size": 91160,
      "upload_time": "2021-09-20T08:26:24",
      "upload_time_iso_8601": "2021-09-20T08:26:24.122301Z",
      "url": "https://files.pythonhosted.org/packages/a7/0a/c450cfda62080c60f513121da612af0d3589d325dc3242c7567a134d252d/craft-ai-2.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}