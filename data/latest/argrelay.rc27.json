{
  "info": {
    "author": "uvsmtid",
    "author_email": "uvsmtid@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Framework :: Flask",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Human Machine Interfaces",
      "Topic :: System :: Shells",
      "Topic :: Terminals",
      "Topic :: Text Processing :: Indexing"
    ],
    "description": "\nProject status: working prototype\n\n<a name=\"argrelay-secreencast\"></a>\n[![asciicast](https://asciinema.org/a/LTHj0DHN2kfXJCHCGuJugNG4P.svg)](https://asciinema.org/a/LTHj0DHN2kfXJCHCGuJugNG4P)\n\n<!--\nSee: docs/dev_notes/screencast_notes.md\n-->\n\n<a name=\"argrelay-about\"></a>\n# What's this?\n\nAn integration framework to provide contextual Tab-auto-completion<br/>\nand search for command line interfaces (CLI) in Bash shell.\n\n<a name=\"argrelay-original-use-case\"></a>\n### Original use case\n\nAuto-complete based on arbitrary structured data sets (e.g. config or ref data)</br>\n**directly from standard shell**.[^1]\n\nThis requires data indexing for [responsive lookup][completion_perf_notes.md]<br/>\n(the client has to start and find relevant data on each Tab-request).\n\nThe straightforward approach to meet performance requirements taken by `argrelay` is<br/>\nto run a standby data server.\n> For example, with several thousands of service instances,<br/>\n> even if someone manages to generate Bash completion config,<br/>\n> it takes considerable time to load it for every shell instance.\n\nUnlike static|generated|offline index, standby server also naturally supports dynamic data updates.\n\n<!--\n<a name=\"argrelay-accidental-use-case\"></a>\n### Accidental use cases\n\nFamiliar terminal with:\n*   data-intensive CLI and seamless search through live data\n*   minimalistic enum-based query syntax\n*   catalogues of selectable functions with unified/redefined CLI\n-->\n\n<a name=\"argrelay-name\"></a>\n# What's in a name?\n\nEventually, `argrelay` will \"relay\" command line arguments (hence, the name)<br/>\nwith associated data to user domain-specific program.\n\nTo clarify, let's compare side-by-side<br/>\n(independent) `argparse` _library_ and `argrelay` _framework_:\n\n```mermaid\ngraph RL;\n\n    %% user --> library\n    %% user --> framework\n\n    subgraph `argparse` library\n\n        direction LR\n\n        some.py <--> argparse;\n\n    end\n\n    argrelay_client -. delegates = relays .-> some.py;\n\n    subgraph `argrelay` framework\n\n        direction TB\n\n        subgraph client\n\n            direction LR\n\n            relay2some --> argrelay_client[argrelay client];\n\n        end\n\n        subgraph server\n\n            direction TB\n\n            argrelay_server[argrelay server] <--> data[(data)];\n\n        end\n\n    end\n\n```\n\n| Category       | `argparse` is a library                                    | `argrelay` is a framework                                                      |\n|:---------------|:-----------------------------------------------------------|:-------------------------------------------------------------------------------|\n| Given:         | `some.py` is some script                                   | `relay2some` is a \"wrapper\" command<br/> configured in Bash to call `argrelay` |\n| In Bash:       | type `some.py` to execute it                               | type `relay2some` to let `argrelay` decide<br/> whether to execute `some.py`   |\n| Execution:     | `some.py` calls `argparse` library                         | `some.py` is called by the framework<br/> when `relay2some` is invoked         |\n| Function:      | `some.py` directly does<br/> domain-specific task          | `relay2some` directly only \"relays\"<br/> the command line to `argrelay`        |\n| CLI source:    | `some.py` defines its CLI<br/> itself via `argparse`       | CLI for `relay2some` is defined by<br/> the framework via configs/plugins/data |\n| CLI is:        | mostly code-driven                                         | mostly data-driven                                                             |\n| Modify CLI:    | modify `some.py`                                           | keep `some.py` intact,<br/> re-configure `argrelay` instead                    |\n| Prog lang:     | `some.py` has to be<br/> a Python script to use `argparse` | `some.py` can be anything<br/> somehow executable by `argrelay`                |\n| **Important:** | `some.py`/`argparse` have<br/> no domain data to query     | `relay2some` may access any<br/> domain data from `argrelay` server            |\n\n<a name=\"argrelay-includes\"></a>\n# What's missing?\n\n`argrelay` excludes:\n*   Any (real) domain-specific data\n*   Any (useful) domain-specific plugins\n\n<a name=\"argrelay-excludes\"></a>\n# What's in the package?\n\n`argrelay` includes:\n*   **Client** to be invoked by Bash hook on every Tab to<br/>\n    send command line arguments to the server.\n*   **Server** to parse command line and propose values from<br/>\n    pre-loaded data for the argument under the cursor.\n*   **Plugins** to customize:\n    *   actions the client can run\n    *   objects the server can search\n    *   grammar the command line can have\n*   **Interfaces** to bind these all together.\n*   **Demo** example to start from.\n*   **Testing** support and coverage.\n\n<a name=\"argrelay-focus\"></a>\n# CLI-friendly completion: primary focus\n\nGUI-s are secondary for `argrelay`'s niche because<br/>\nGUI-s do not have the restrictions CLI-s have:\n*   Technically, the server can handle requests from anywhere (GUI).\n*   But primary API-s are feature-tailored to support CLI (because everyone does GUI).\n\n<details>\n<summary>show example</summary>\nFor example, in GUI-s, typing a query into a search bar may easily be accompanied by<br/>\n(1) a separate (from the search bar) window area<br/>\n(2) with individually selectable<br/>\n(3) full-text-search results<br/>\n(4) populated **async-ly** with typing.<br/>\n\nIn CLI-s, `grep` does (3) full-text-search, but what about the rest (1), (2), (4)?\n\nTo facilitate selection of results,<br/>\ncatalogue-like navigation with auto-completion (rather than full-text-search)<br/>\nseems the answer.\n</details>\n\nNevertheless, GUI can also benefit from minimalist single line structured search queries.\n\n<a name=\"argrelay-story\"></a>\n# Syntax: origin story\n\nWhen an interface is limited...\n\nYou probably heard about research where<br/>\napes were taught to communicate with humans in sign language<br/>\n(their vocal apparatus cannot reproduce speech effectively).\n\nNaturally, with limited vocabulary,<br/>\nthey combined known words to describe unnamed things.\n\nFor example,<br/>\nto ask for a watermelon (without knowing the exact sign),<br/>\nthey used combination of known \"drink\" + \"sweet\".\n\nThe default `argrelay` CLI-interpretation plugin (see `FuncArgsInterp`)<br/>\nprompts for object properties to disambiguate search results until single one is found.\n\n<details>\n<summary>continue story</summary>\n\n### Narrow down options\n\nWithout any context, just two words \"drink\" + \"sweet\" leave<br/>\na lot of ambiguity to guess a watermelon (many drinks are sweet).\n\nA more clarified \"sentence\" could be:\n> drink striped red sweet fruit\n\nEach word narrows down matching object set<br/>\nto more specific candidates (including watermelon).\n\n### Avoid strict order\n\nNotice that the word order is not important -<br/>\nthis line provides (almost) equivalent hints for guessing:\n> striped sweet fruit red drink\n\nIt is not valid English grammar, but it somewhat works.\n\n### Use \"enum language\"\n\nThink of speaking \"enum language\":\n*   Each word is an enum value of some enum type:\n    *   Color: red, green, ...\n    *   Taste: sweet, salty, ...\n    *   Temperature: hot, cold, ...\n    *   Action: drink, play, ...\n*   Word order is irrelevant because _enum value spaces do not overlap_ (almost).\n*   To \"say\" something, one keeps clarifying meaning by more enum values.\n\nNow, imagine the enum types and values are not supposed to be memorized,<br/>\nthey are proposed to select from (based on the current context).\n\n### Address any object\n\nSuppose enums are binary = having only two values<br/>\n(cardinality = 2: black/white, hot/cold, true/false, ...).\n\nFor example,<br/>\n5 words could slice the object space to<br/>\nsingle out (identify exactly) up to 2^5 = 32 objects.\n\nTo \"address\" larger object spaces,<br/>\nlarger enum cardinalities or more word places are required.\n\n*   Each enum type ~ a dimension.\n*   Each specific enum value ~ a coordinate.\n*   Each object fills a slot in such multi-dimensional discrete space.\n\n### Apply to CLI\n\nCLI-s are used to write commands - imperative sentences:<br/>\nspecific actions on specific objects.\n\nThe \"enum language\" above covers searching both<br/>\nan action and any object it requires.\n\n### Suggest contextually\n\nNot every combination of enum values may point to an existing object.\n\nFor data with sparse object spaces,<br/>\nthe CLI-suggestion can be shaped by coordinates applicable to<br/>\nremaining (narrowed down) object sets.\n\n### Differentiate on purpose\n\nAll above may be an obvious approach to come up with,<br/>\nbut it is not ordinary for CLI-s of most common commands (due to lack of data):\n\n| Common commands (think `ls`, `git`, `ssh`, ...):                            | `argrelay`-wrapped actions:                           |\n|:----------------------------------------------------------------------------|:------------------------------------------------------|\n| have succinct syntax and prefer<br/> single-char switches (defined by code) | prefer explicit \"enum language\"<br/> defined by data  |\n| rely on humans to memorize syntax<br/> (options, ordering, etc.)            | assume humans have<br/> a loose idea about the syntax |\n| auto-complete only for objects<br/> known to the OS (hosts, files, etc.)    | auto-complete from<br/> a domain-specific data        |\n\n</details>\n\nLearn more about [how search works][how_search_works.md].\n\n<a name=\"argrelay-demo\"></a>\n# Quick demo\n\nThis is a non-intrusive demo<br/>\n(without permanent changes to user env, e.g. no `~/.bashrc` changes).\n\nClone this repo somewhere.\n\nIf `dev_shell.bash` is run for the first time,<br/>\nit will ask to provide `python_conf.bash` file - follow instruction on error.\n\nTo start both the server and the client,<br/>\ntwo terminal windows are required.\n\n*   Server:\n\n    Start the first sub-shell:\n\n    ```sh\n    ./dev_shell.bash\n    ```\n\n    In this sub-shell, start the server:\n\n    ```sh\n    # in server `dev_shell.bash`:\n    run_argrelay_server\n    ```\n\n*   Client:\n\n    Start the second sub-shell:\n\n    ```sh\n    ./dev_shell.bash\n    ```\n\n    While it is running (temporarily),<br/>\n    this sub-shell is configured for Bash Tab-completion for `relay_demo` command.\n\n*   Try to `Tab`-complete command `relay_demo` using [demo test data][TD_63_37_05_36.demo_services_data.md]:\n\n    ```sh\n    # in client `dev_shell.bash`:\n    relay_demo goto host            # press Tab one or multiple times\n    ```\n\n    ```sh\n    # in client `dev_shell.bash`:\n    relay_demo goto host dev        # press Alt+Shift+Q shortcut to describe command line args\n    ```\n\n*   Inspect how auto-completion binds to `relay_demo` command:\n\n    ```sh\n    # in client `dev_shell.bash`:\n    complete -p relay_demo\n    ```\n\n*   Inspect client and server config:\n\n    *   server config: `~/.argrelay.conf.d/argrelay.server.yaml`\n    *   client config: `~/.argrelay.conf.d/argrelay.client.json`\n\n*   To clean up, exit the sub-shells:\n\n    ```sh\n    # in client or server `dev_shell.bash`:\n    exit\n    ```\n\n<a name=\"argrelay-backend\"></a>\n# Data backend\n\nThere are two options at the moment - both using [MongoDB][MongoDB] API:\n\n| Category       | `mongomock` (default)                                                                   | `PyMongo`                                                                                        |\n|:---------------|:----------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------|\n| Data set size: | practical limit ~ 10K                                                                   | tested at 1M                                                                                     |\n| Pro:           | nothing else to install                                                                 | no practical data set size limit found (yet)<br/> for `argrelay` intended use cases              |\n| Con:           | understandably, does not meet<br/> non-functional requirements<br/> for large data sets | require some knowledge of MongoDB,<br/> additional setup,<br/> additional running processes<br/> |\n\n`PyMongo` connects to running MongoDB instance which has to be configured in `mongo_config`<br/>\nand `mongomock` should be disabled in `argrelay.server.yaml`:\n\n```diff\n-    use_mongomock_only: True\n+    use_mongomock_only: False\n```\n\n<a name=\"argrelay-next-steps\"></a>\n# What's next?\n\n*   After trying non-intrusive demo, try [intrusive one][dev_env_and_target_env_diff.md] for permanent setup.\n\n*   Modify [`ServiceLoader.py` plugin][link_to_load_data_envelopes] to provide data beyond [demo data set][TD_63_37_05_36.demo_services_data.md].\n\n    The data can be simply hard-coded with different `test_data` tag<br/>\n    (other than `TD_63_37_05_36` demo) and selected in `argrelay.server.yaml`:\n\n    ```diff\n        ServiceLoader:\n            plugin_module_name: argrelay.custom_integ.ServiceLoader\n            plugin_class_name: ServiceLoader\n            plugin_type: LoaderPlugin\n            plugin_config:\n                test_data_ids_to_load:\n                    #-   TD_70_69_38_46  # no data\n    -               -   TD_63_37_05_36  # demo\n    +               -   TD_NN_NN_NN_NN  # custom data\n                    #-   TD_38_03_48_51  # large generated\n    ```\n\n    If hard-coding is boring, soft-code to load it from external data source.\n\n*   Replace [redirect to `ErrorDelegator.py` plugin][link_to_redirect_to_error]<br/>\n    to execute something useful instead when use hits `Enter`.\n\n*   ...\n\n*   Many features and docs are actively taking their shape -<br/>\n    any (minimal, unfiltered, first-thought) feedback is welcome.\n\n    [Raise questions or suggestions as issues][repo_issues] to influence the dev direction.\n\n### [footnotes]\n\n[^1]: **Brief History**\n\n    Tab-completion with custom (domain-specific) arg values is<br/>\n    constantly on a dev wish list for complex backend.\n    *   DEC 2022: Attempts to find an adequate solution for sizeable data yielded no results.\n    *   JAN 2023: The [earlier question][earlier_stack_question] received zero activity for a month</br>\n        (with a single silent downvote, auto-deleted by a bot).<br/>\n        Request to restore it was &#127925; Shut Down In Flames.\n        <!--\n        It seeked recommendations which tend to be spammed by answers<br/>\n        (controversially, some spam once a month helps more than none).\n        -->\n    *   FEB 2023: The [explanation hangs on the appropriate site][later_stack_question] now -<br/>\n        recommendations are still very welcome there.<br/>\n        But, with some patience for integration, `argrelay` already became satisfying enough.\n\n<!-- refs ---------------------------------------------------------------------------------------------------------- -->\n\n[completion_perf_notes.md]: docs/dev_notes/completion_perf_notes.md\n[MongoDB]: https://www.mongodb.com/\n[dev_env_and_target_env_diff.md]: docs/dev_notes/dev_env_and_target_env_diff.md\n[TD_63_37_05_36.demo_services_data.md]: docs/test_data/TD_63_37_05_36.demo_services_data.md\n[earlier_stack_question]: https://stackoverflow.com/q/74996560/441652\n[later_stack_question]: https://softwarerecs.stackexchange.com/questions/85247/\n[how_search_works.md]: docs/dev_notes/how_search_works.md\n[link_to_redirect_to_error]: https://github.com/uvsmtid/argrelay/blob/v0.0.0.dev27/src/argrelay/custom_integ/ServiceInvocator.py#L148\n[link_to_load_data_envelopes]: https://github.com/uvsmtid/argrelay/blob/v0.0.0.dev27/src/argrelay/custom_integ/ServiceLoader.py#L111\n[repo_issues]: https://github.com/uvsmtid/argrelay/issues\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uvsmtid/argrelay",
    "keywords": "argparse,argcomplete,bash,complete",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argrelay",
    "package_url": "https://pypi.org/project/argrelay/",
    "platform": null,
    "project_url": "https://pypi.org/project/argrelay/",
    "project_urls": {
      "Bug Tracker": "https://github.com/uvsmtid/argrelay/issues",
      "Homepage": "https://github.com/uvsmtid/argrelay"
    },
    "release_url": "https://pypi.org/project/argrelay/0.0.0.dev39/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Tab-completion & data search server - total recall",
    "version": "0.0.0.dev39",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17548928,
  "releases": {
    "0.0.0.dev1": [],
    "0.0.0.dev10": [],
    "0.0.0.dev11": [],
    "0.0.0.dev12": [],
    "0.0.0.dev13": [],
    "0.0.0.dev14": [],
    "0.0.0.dev2": [],
    "0.0.0.dev27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9aa4a6d60aa39c70354310a60733e7acd7b7c08c7c38702b3b62b503648c849a",
          "md5": "118712ced2be0b039b68a724d29a4b38",
          "sha256": "11c4257c64503806544eba5855d44f5716a9fa562d63099449147e2017ec429c"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev27.tar.gz",
        "has_sig": false,
        "md5_digest": "118712ced2be0b039b68a724d29a4b38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 110666,
        "upload_time": "2023-03-09T17:32:38",
        "upload_time_iso_8601": "2023-03-09T17:32:38.901077Z",
        "url": "https://files.pythonhosted.org/packages/9a/a4/a6d60aa39c70354310a60733e7acd7b7c08c7c38702b3b62b503648c849a/argrelay-0.0.0.dev27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a94a52b8782a19de2cf59176b972d1d9a905fb09f7f7dd8ce32fc0bdae3fa92",
          "md5": "b794553377cd33805fadc4a826052282",
          "sha256": "466cbb3cc0b97dead4c544acdc708207d27ee2fe1c2fe182e51ecfa1cadc361c"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev28.tar.gz",
        "has_sig": false,
        "md5_digest": "b794553377cd33805fadc4a826052282",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 113742,
        "upload_time": "2023-03-12T18:42:13",
        "upload_time_iso_8601": "2023-03-12T18:42:13.517759Z",
        "url": "https://files.pythonhosted.org/packages/2a/94/a52b8782a19de2cf59176b972d1d9a905fb09f7f7dd8ce32fc0bdae3fa92/argrelay-0.0.0.dev28.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23199785f402169a2baeac04b8cbc1ed8a3bed2b4c6420cd1c21674527fcb757",
          "md5": "d4441ca315f6752ef715e8d6894ea9c8",
          "sha256": "329cdeca3ce2ccc28f79ab54f10a3ea115255d298c091165f8df54be8fd4f6df"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev29.tar.gz",
        "has_sig": false,
        "md5_digest": "d4441ca315f6752ef715e8d6894ea9c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 116867,
        "upload_time": "2023-03-19T11:04:22",
        "upload_time_iso_8601": "2023-03-19T11:04:22.814632Z",
        "url": "https://files.pythonhosted.org/packages/23/19/9785f402169a2baeac04b8cbc1ed8a3bed2b4c6420cd1c21674527fcb757/argrelay-0.0.0.dev29.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev3": [],
    "0.0.0.dev30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf3063efa245e7b9e8df20c798e9ae852f0c4086278125a7b7d5506d32d405a6",
          "md5": "30e2175a7bdfdb0c5e8cbecf1c5501f4",
          "sha256": "c1a747fbd614b05dc5efff8c60e8668c0427cd8c710708a38cab8dd9042c4045"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev30.tar.gz",
        "has_sig": false,
        "md5_digest": "30e2175a7bdfdb0c5e8cbecf1c5501f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 116837,
        "upload_time": "2023-03-19T14:05:51",
        "upload_time_iso_8601": "2023-03-19T14:05:51.479264Z",
        "url": "https://files.pythonhosted.org/packages/cf/30/63efa245e7b9e8df20c798e9ae852f0c4086278125a7b7d5506d32d405a6/argrelay-0.0.0.dev30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62f88ee308febdcf3c8cbb4f59ee3bfb85ae53f3a8327b101189372d30f15273",
          "md5": "e7d9b5b896f9a325531ba3b7f8221c85",
          "sha256": "c15d9ca84c49c5eb9aecd78c90be24780c3552f0dbfbc6c86f9e8678ed0f58d9"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev31.tar.gz",
        "has_sig": false,
        "md5_digest": "e7d9b5b896f9a325531ba3b7f8221c85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 117712,
        "upload_time": "2023-03-20T16:56:01",
        "upload_time_iso_8601": "2023-03-20T16:56:01.477231Z",
        "url": "https://files.pythonhosted.org/packages/62/f8/8ee308febdcf3c8cbb4f59ee3bfb85ae53f3a8327b101189372d30f15273/argrelay-0.0.0.dev31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9ac2e4623c1a712610680858f0bbb57fc26ae5ce8013f82f59bccfd47386904",
          "md5": "c8790c3d72641869078281e9f1ea8f34",
          "sha256": "dd65f01637d5a9d8a189304879a863f8744d0cfe676230b542141cb590a20297"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev32.tar.gz",
        "has_sig": false,
        "md5_digest": "c8790c3d72641869078281e9f1ea8f34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 117769,
        "upload_time": "2023-03-21T16:59:13",
        "upload_time_iso_8601": "2023-03-21T16:59:13.949331Z",
        "url": "https://files.pythonhosted.org/packages/f9/ac/2e4623c1a712610680858f0bbb57fc26ae5ce8013f82f59bccfd47386904/argrelay-0.0.0.dev32.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2350a3e6172fd05823fd39ca3f48625329096798b0e4ec4e50e64677b4a7cebc",
          "md5": "1e54fb95e0343e68f3f023d245824f03",
          "sha256": "ae000c097474960b85ed9ac471e78a57bcffee3e5a176fbdac5927b5a55170ba"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev33.tar.gz",
        "has_sig": false,
        "md5_digest": "1e54fb95e0343e68f3f023d245824f03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 117852,
        "upload_time": "2023-03-22T16:13:16",
        "upload_time_iso_8601": "2023-03-22T16:13:16.101454Z",
        "url": "https://files.pythonhosted.org/packages/23/50/a3e6172fd05823fd39ca3f48625329096798b0e4ec4e50e64677b4a7cebc/argrelay-0.0.0.dev33.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev34": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1938cdfea88aa01d3be19974005827cd915611f9fe7dd73042e6e7deaacdf0d",
          "md5": "2941bcdb7ce36bb04cf3ff6763dbc2c5",
          "sha256": "e6f9c4258858062748ceff9564c406fa721c49ce3f2784b9b70ea2c786b3c180"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev34.tar.gz",
        "has_sig": false,
        "md5_digest": "2941bcdb7ce36bb04cf3ff6763dbc2c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 117849,
        "upload_time": "2023-03-22T16:34:10",
        "upload_time_iso_8601": "2023-03-22T16:34:10.279942Z",
        "url": "https://files.pythonhosted.org/packages/c1/93/8cdfea88aa01d3be19974005827cd915611f9fe7dd73042e6e7deaacdf0d/argrelay-0.0.0.dev34.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77b1b77e97f04dcd5b403002855967242f650f57d0dcc1ad6d9295507c19c98d",
          "md5": "c7c1aca8259448707b66ec2f5422e441",
          "sha256": "49e0d63bb094bdb6590725576ccf151c4d7837f97801a34678320dc8a5170597"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev35.tar.gz",
        "has_sig": false,
        "md5_digest": "c7c1aca8259448707b66ec2f5422e441",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 118178,
        "upload_time": "2023-03-23T14:47:52",
        "upload_time_iso_8601": "2023-03-23T14:47:52.957668Z",
        "url": "https://files.pythonhosted.org/packages/77/b1/b77e97f04dcd5b403002855967242f650f57d0dcc1ad6d9295507c19c98d/argrelay-0.0.0.dev35.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "406df5a8efc8017daebbcc50e15f3d1f61e7c459f22840d33351af9ecb3334ac",
          "md5": "207a14ba65f25bb4e3b871198c03bfc1",
          "sha256": "b5618483f5e8c7a157495f5ac468651ce064ddc31b34a8f671114897b45013f2"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev36.tar.gz",
        "has_sig": false,
        "md5_digest": "207a14ba65f25bb4e3b871198c03bfc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 118174,
        "upload_time": "2023-03-23T15:09:18",
        "upload_time_iso_8601": "2023-03-23T15:09:18.197205Z",
        "url": "https://files.pythonhosted.org/packages/40/6d/f5a8efc8017daebbcc50e15f3d1f61e7c459f22840d33351af9ecb3334ac/argrelay-0.0.0.dev36.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev37": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "407609d71b6614b293d8eb49830c63dbe1255e284dc5b4d2ac1249c206b87d53",
          "md5": "453d97d68c045c7df59c6d0b99e92906",
          "sha256": "2d94776dc00a84a108b5518a866d4076bca9fa48b32f298aefcd0d76e6de9c95"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev37.tar.gz",
        "has_sig": false,
        "md5_digest": "453d97d68c045c7df59c6d0b99e92906",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 119194,
        "upload_time": "2023-03-26T16:14:53",
        "upload_time_iso_8601": "2023-03-26T16:14:53.191110Z",
        "url": "https://files.pythonhosted.org/packages/40/76/09d71b6614b293d8eb49830c63dbe1255e284dc5b4d2ac1249c206b87d53/argrelay-0.0.0.dev37.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev38": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81e454c1cef297767fcb355c3e6f904b4dc79b4685faec747559e78869c5f13e",
          "md5": "2266c98e23583d794ac2afd1ced38f1f",
          "sha256": "d8805a3bbbe2e6ea0102ae19da4bc43a430ecd74869c434017578d268a126a93"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev38.tar.gz",
        "has_sig": false,
        "md5_digest": "2266c98e23583d794ac2afd1ced38f1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 120256,
        "upload_time": "2023-04-02T15:42:40",
        "upload_time_iso_8601": "2023-04-02T15:42:40.335455Z",
        "url": "https://files.pythonhosted.org/packages/81/e4/54c1cef297767fcb355c3e6f904b4dc79b4685faec747559e78869c5f13e/argrelay-0.0.0.dev38.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev39": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c51071ff03bc611aa88470cab0fcaadaff25f91c882c9442af240a196b702c06",
          "md5": "7a1ed25fa51ae52c19fb341f47dbb835",
          "sha256": "b8bbfa60c9c3666e815da1f8c164fa917b5a7a992e67192317f7358138b76537"
        },
        "downloads": -1,
        "filename": "argrelay-0.0.0.dev39.tar.gz",
        "has_sig": false,
        "md5_digest": "7a1ed25fa51ae52c19fb341f47dbb835",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 125508,
        "upload_time": "2023-04-02T16:29:52",
        "upload_time_iso_8601": "2023-04-02T16:29:52.048269Z",
        "url": "https://files.pythonhosted.org/packages/c5/10/71ff03bc611aa88470cab0fcaadaff25f91c882c9442af240a196b702c06/argrelay-0.0.0.dev39.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev4": [],
    "0.0.0.dev5": [],
    "0.0.0.dev6": [],
    "0.0.0.dev7": [],
    "0.0.0.dev8": [],
    "0.0.0.dev9": []
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c51071ff03bc611aa88470cab0fcaadaff25f91c882c9442af240a196b702c06",
        "md5": "7a1ed25fa51ae52c19fb341f47dbb835",
        "sha256": "b8bbfa60c9c3666e815da1f8c164fa917b5a7a992e67192317f7358138b76537"
      },
      "downloads": -1,
      "filename": "argrelay-0.0.0.dev39.tar.gz",
      "has_sig": false,
      "md5_digest": "7a1ed25fa51ae52c19fb341f47dbb835",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 125508,
      "upload_time": "2023-04-02T16:29:52",
      "upload_time_iso_8601": "2023-04-02T16:29:52.048269Z",
      "url": "https://files.pythonhosted.org/packages/c5/10/71ff03bc611aa88470cab0fcaadaff25f91c882c9442af240a196b702c06/argrelay-0.0.0.dev39.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}