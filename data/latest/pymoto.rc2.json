{
  "info": {
    "author": "Arnoud Delissen",
    "author_email": "arnouddelissen+pymoto@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# pyMOTO\n\n* [Link to Documentation](https://pymoto.readthedocs.io)\n* [Link to GitHub](https://github.com/aatmdelissen/pyMOTO)\n\nModular topology optimization framework with semi-automatic derivatives. The two main types `Module` and `Signal`\nare used to implement a problem formulation to be optimized. The `Module` implements functionality (and design \nsensitivity calculations) and `Signal` carries data of both the variables and their derivatives. \n\nSensitivity calculations are done based on backpropagation. The final value of interest is seeded with sensitivity\nvalue $\\frac{\\textup{d}f}{\\textup{d}f}=1$. Then the modules are executed in reverse order, each applying the chain rule.\nAs example for a `Module` which maps $x\\rightarrow y$, only the following operation needs to be implemented:\n\n$$\n\\frac{\\textup{d}f}{\\textup{d}x} = \\frac{\\textup{d}f}{\\textup{d}y}\\frac{\\textup{d}y}{\\textup{d}x}\\text{.} \n$$\n\nIn this way, the order of modules can easily be adapted without having to worry about sensitivities, as these are \nautomatically calculated.\n\n# Quick start installation\n1. Make sure you have Python running in some kind of virtual environment (e.g. \n[conda](https://docs.conda.io/projects/conda/en/stable/), [miniconda](https://docs.conda.io/en/latest/miniconda.html),\n[venv](https://realpython.com/python-virtual-environments-a-primer/))\n2. Type `pip install pymoto` into your console to install\n3. Download one of the examples found in the repository's example folder \n([here](https://github.com/aatmdelissen/pyMOTO/tree/master/examples))\n4. Run the example by typing `python ex_....py` in the console\n\n\nA local installation for development in `pyMOTO` can be done by first downloading the entire git repo, and then calling \n`pip install -e .` in the `pyMOTO` folder (of course from within your virtual environment).\n\n## Dependencies\n* **NumPy** - Dense linear algebra and solvers\n* **SciPy** - Sparse linear algebra and solvers\n* **SymPy** - Symbolic differentiation for `MathGeneral` module\n* **Matplotlib** - Plotting and visualisation\n* (optional) **SAO** - Sequential approximated optimizers\n* (optional) **opt_einsum** - Optimized function for `EinSum` module\n\nFor fast linear solvers for sparse matrices:\n* (optional) **scikit-umfpack** - Fast LU linear solver based on UMFPACK\n* (optional) **sksparse** - Fast Cholesky solver based on CHOLMOD\n* (optional) **CVXopt** - Another fast Cholesky solver based on CHOLMOD\n* (optional) **Intel OneAPI** - Non-python library with a fast PARDISO solver\n\n__Note on linear solvers for sparse matrices:__ Scipy implements a version of LU which is quite slow. To increase the \nspeed of the optimization, `Intel OneAPI` is recommended as it contains a very robust and flexible solver for symmetric \nand asymmetric matrices. An alternative is `scikit-umfpack` which provides a fast LU factorization. For symmetric \nmatrices a Cholesky factorization is recommended (not provided with Scipy), which can be used by either installing \n`sksparse` or `cvxopt`.\n\n\n## How to make Python fast with Intel OneAPI\nIntel provides a toolkit with many fast math operations and solvers called OneAPI (basekit). \nIt can easily be installed on Linux by for instance following the steps described in https://www.intel.com/content/www/us/en/develop/documentation/installation-guide-for-intel-oneapi-toolkits-linux/top/installation/install-using-package-managers/apt.html\nFor other OSes installation can be found in https://www.intel.com/content/www/us/en/developer/articles/guide/installation-guide-for-oneapi-toolkits.html\n\nThe nice thing about OneAPI is that it also includes an optimized version of Python. To use it follow the next steps (Linux)\n\n1. `source <intel install location>/intel/oneapi/setvars.sh` (usually installed in `/opt/intel` or `/opt/ud/intel`). This loads the Intel OneAPI package.\n2. `conda create --name <venv_name> --clone base` to create a new conda virtual environment to work in.\n3. `conda activate <venv_name>` to activate the virtual environment.\n\n### Usage of multi-thread linear solvers\nIntel has a Pardiso type linear solver for fast solution of large systems.\nTo use it.....\n\n# License\npyMOTO is available under te [MIT License](https://opensource.org/licenses/MIT).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aatmdelissen/pyMOTO",
    "keywords": "topology optimization,generative design,structural,sensitivities,derivatives,framework,modular,blocks,pipeline",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyMOTO",
    "package_url": "https://pypi.org/project/pyMOTO/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyMOTO/",
    "project_urls": {
      "Homepage": "https://github.com/aatmdelissen/pyMOTO"
    },
    "release_url": "https://pypi.org/project/pyMOTO/1.0.1/",
    "requires_dist": [
      "numpy",
      "scipy (>=1.7)",
      "sympy",
      "matplotlib",
      "flake8 ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "cvxopt ; extra == 'dev'",
      "scikit-sparse ; extra == 'dev'",
      "pypardiso ; extra == 'dev'",
      "jax[cpu] ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Example package description",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17208038,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4a8abd77f8aa7ef41bdeec359a010832bc5af6142f89b959beb6ba7714ca901",
          "md5": "dc7f00a4d4e33309b3527195cd49db4b",
          "sha256": "f31ae8929566f5498c49deee38d14306d72ce7f2bf3c62c55a7674fe879001e4"
        },
        "downloads": -1,
        "filename": "pymoto-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc7f00a4d4e33309b3527195cd49db4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 49290,
        "upload_time": "2023-01-19T13:58:49",
        "upload_time_iso_8601": "2023-01-19T13:58:49.862229Z",
        "url": "https://files.pythonhosted.org/packages/d4/a8/abd77f8aa7ef41bdeec359a010832bc5af6142f89b959beb6ba7714ca901/pymoto-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01b0a7dd3a7fd7b0d698393de9533ce1284d8550811ce814cae2b3e57d9e27b1",
          "md5": "f1b07587b6768a68d075d2294d7933ee",
          "sha256": "ae980aada4f81c15116ac1b2b3979147e1858cd0e98fb1a1548392afbdd156f7"
        },
        "downloads": -1,
        "filename": "pymoto-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1b07587b6768a68d075d2294d7933ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45576,
        "upload_time": "2023-01-19T13:58:52",
        "upload_time_iso_8601": "2023-01-19T13:58:52.251483Z",
        "url": "https://files.pythonhosted.org/packages/01/b0/a7dd3a7fd7b0d698393de9533ce1284d8550811ce814cae2b3e57d9e27b1/pymoto-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf14caa590c3bdeebbd90513da6cbaaeec0b675385b9021c646771c93c0ee1f8",
          "md5": "fa67f077e839299a4610c029c21ec26d",
          "sha256": "3336bfe7afc6a9f868ac328cf390b6491e6da0e3ab8173b12e2d10876c6c49be"
        },
        "downloads": -1,
        "filename": "pyMOTO-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa67f077e839299a4610c029c21ec26d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 55180,
        "upload_time": "2023-03-08T14:52:42",
        "upload_time_iso_8601": "2023-03-08T14:52:42.823629Z",
        "url": "https://files.pythonhosted.org/packages/bf/14/caa590c3bdeebbd90513da6cbaaeec0b675385b9021c646771c93c0ee1f8/pyMOTO-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7c601f602f67f95254e69b73322c3760934a0e8b46ead082e1cbb5c9a0756cb",
          "md5": "367e63b0ec6956312004f4f28906461f",
          "sha256": "21c46bf15e640fbd001314fa0f4e6189df860ad40dc925ca5a362cc4d63f9094"
        },
        "downloads": -1,
        "filename": "pyMOTO-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "367e63b0ec6956312004f4f28906461f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63363,
        "upload_time": "2023-03-08T14:52:44",
        "upload_time_iso_8601": "2023-03-08T14:52:44.611158Z",
        "url": "https://files.pythonhosted.org/packages/e7/c6/01f602f67f95254e69b73322c3760934a0e8b46ead082e1cbb5c9a0756cb/pyMOTO-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf14caa590c3bdeebbd90513da6cbaaeec0b675385b9021c646771c93c0ee1f8",
        "md5": "fa67f077e839299a4610c029c21ec26d",
        "sha256": "3336bfe7afc6a9f868ac328cf390b6491e6da0e3ab8173b12e2d10876c6c49be"
      },
      "downloads": -1,
      "filename": "pyMOTO-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa67f077e839299a4610c029c21ec26d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 55180,
      "upload_time": "2023-03-08T14:52:42",
      "upload_time_iso_8601": "2023-03-08T14:52:42.823629Z",
      "url": "https://files.pythonhosted.org/packages/bf/14/caa590c3bdeebbd90513da6cbaaeec0b675385b9021c646771c93c0ee1f8/pyMOTO-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7c601f602f67f95254e69b73322c3760934a0e8b46ead082e1cbb5c9a0756cb",
        "md5": "367e63b0ec6956312004f4f28906461f",
        "sha256": "21c46bf15e640fbd001314fa0f4e6189df860ad40dc925ca5a362cc4d63f9094"
      },
      "downloads": -1,
      "filename": "pyMOTO-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "367e63b0ec6956312004f4f28906461f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 63363,
      "upload_time": "2023-03-08T14:52:44",
      "upload_time_iso_8601": "2023-03-08T14:52:44.611158Z",
      "url": "https://files.pythonhosted.org/packages/e7/c6/01f602f67f95254e69b73322c3760934a0e8b46ead082e1cbb5c9a0756cb/pyMOTO-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}