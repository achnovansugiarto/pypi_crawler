{
  "info": {
    "author": "Aminu Abdul Manaf",
    "author_email": "afolanyaaminu@gmai.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Finicky -  Data Validation Made Simple\n\n## Motivation \nThere are many libraries available for validating data in python but surprisingly, they all require too much boilerplate \nand code ceremony even for simple use cases. The goal of this library is to provide an easier to use alternative.\n\n\n## Getting Started\n\n```shell script\npip install finicky\n```\n\n```python\nfrom finicky import validate, is_str, is_int\n\nrepo = {\"name\":\"Finicky\", \"version\":\"0.0.1\", \"stars\":\"2000\"} \nrepo_schema = {\n    \"name\":is_str(min_len=3, max_len=8, required=True),\n    \"version\":is_str(required=True, pattern=r\"\\A\\d+\\.\\d+\\.\\d+\\Z\"),\n    \"stars\":is_int(required=False, min=0, default=0)\n}\nerrors, validated_repo = validate(schema=repo_schema, data=repo)\nif errors: \n    # handle errors\nelse:\n    # use validated data\n```\n\n### Schemas\nA schema is a case-sensitive mapping of field names to their corresponding validators. Finicky comes with a set\nof predefined validators that cover most use cases but you may define custom ones if the inbuilt validators don't work \nfor your use case. These validators are described in the validators section.\n\n**Example**\n```python\nrepo_schama = {\n    \"name\": name_validator,\n    \"version\": version_valdiator,  \n    \"stars\":stars_validator\n}\n```\n\n#### Validators\nA validator is a function that takes a single input and raises a `finicky.ValidationException` when its \nargument is invalid or returns the input upon successful validation. The input may be modified before returning it. \n\n**Example**\n```python\nimport re\nfrom finicky import ValidationException\n\ndef version_validator(input:any)-> str:\n    input = str(input).strip()\n    if re.match(r\"\\A\\d+\\.\\d+\\.\\d+\\Z\", input):\n        return input\n    raise ValidationException(\"validation failed\")\n```\n\n#### Hooks\nIn some situations, the validity of an input may depend on complex conditions and relationship between multiple fields.\nfinicky allows you to define a function that shall be invoked with the input data after all field level validations have\nsucceeded. This hook can then run the necessary validation returning the input on success or raise a\nValidationException on failure. Example, a price data may contain valid fields but you may want to ensure that\nselling price is always greater than cost rice. Hooks are useful for these kind of checks. \n\n**Example Usage**\n```python\nfrom finicky import ValidationException\ndef hook(price): \n    # hook will only be called if all fields have passed validation  \n    if price[\"selling_price\"] < price[\"cost_price\"]:\n        raise  ValidationException(\"selling price cannot be less than cost price\")\n    return price\n```\n\n#### Putting It All Together\n```python\nfrom finicky import  validate, is_int,is_float\n\ndata = {\"product_id\":2, \"cost_price\":1.2, \"selling_price\":1.8}\nschema = {\n    \"product_id\":is_int(min=1, required=True),\n    \"cost_price\":is_float(min=0.1, round_to=2, required=True), \n    \"selling_price\":is_float(min=0.1, round_to=2, required=True)\n}\nerrors, validated_price = validate(schema=schema, data=data, hook=price_hook)\nif errors:\n   print(f\"errors occurred {errors}\")\nelse:\n   use_price_data(validated_price)\n```\n\n\n### Built-in Validators\nfinicky comes with predefined validators that you can use right away. They are essentially factory functions that returns\nanother function that take in one argument (the data to be validated) and return the validated data on success or raise\n`ValidationException` on failure. \n\n#### is_str \nA factory function that returns a validator for validating texts.\n \nIt takes in the following arguments:\n1. `required`: `bool` - `True` when the field is required, `False` otherwise. `True` by default\n2. `default`: The default value. \n3. `min_len`: The minimum length allowed, defaults to 0 \n4. `max_len`: The maximum length allowed, defaults to `None`\n5. `pattern`: An optional regular expression to which the input must match. Pattern matching is accomplished with \n              the standard python `re` package.  _**Be careful when using this on untrusted input as you may expose**\n              _**yourself to regular expression DDos attacks**_. \n\n#### is_int\nA factory function that returns a validator for validating integers.\n\nIt takes in the following arguments:\n1. `required`: `True` when the field is required, `False` otherwise. `True` by default\n2. `default`: The default value.\n3. `min`: The minimum value allowed, defaults to 0 \n4. `max`: The maximum value allowed, defaults to `None`\n\n\n#### is_float\nA factory function that returns a validator for validating floating point numbers. \n\nIt takes in the following arguments:\n1. `required`: `True` when the field is required, `False` otherwise. `True` by default\n2. `default`: The default value.\n3. `min`: The minimum value allowed, defaults to 0 \n4. `max`: The maximum value allowed, defaults to `None`\n5. `round_to`: The number of decimal places to which the input must be rounded to. \n\n#### is_date\nA factory function that returns a validator for validating dates.\nThe date validator can work directly with `datetime.datetime` objects or date strings. \n\nIt takes in the following arguments:\n1. `required`: `True` when the field is required, `False` otherwise. `True` by default\n2. `default`: The default value. \n3. `min`: The minimum date allowed, defaults to `None` \n4. `max`: The maximum date allowed, defaults to `None`\n5. `format`: The format in which date is formatted. This is only used when the input is a string literal. It's \n             important to note that python's date formatter is not forgiving so all fields specified in \n             the format must be present in the input string. Example the format \"%Y-%m-%d %H:%M\" can't work with\n             \"2020-12-12 12:30:20\" because the format doesn't include a millisecond field\n\n#### is_list\nA validator factory that returns a function for validating lists. By default, all entries must pass the validation else\nthe field would be considered invalid. This can be overridden by setting `all` to `false` (see below). \n\nIt takes in the following arguments:\n1. `required`: `True` when the field is required, `False` otherwise. `True` by default\n2. `default`: The default value.\n3. `min_len`: The minimum number of entries allowed, defaults to 0\n4. `max_len`: The maximum number of entries, defaults to `None`\n5. `validator`: A validator for validating each entry in the list. \n6. `all`: When `True`, all fields must pass validation for this list to be considered valid. When `False` at least one\n           entry must pass validation for this list to be considered valid. Only entries that pass validation shall \n           be returned. \n\n#### is_dict\nA validator factory that returns a function for validating python dictionaries.\n\nIt takes in the following arguments:\n1. `required`: `True` when the field is required, `False` otherwise. `True` by default\n2. `default`: The default value.\n5. `schema`: A schema for validating this dictionary, same as the schema described above. \n\n   \n\n### Custom Validators\n\n#### A Note On Security \n_finicky is designed with adversarial users in mind and all built-in validators make no assumption about the input.\n When authoring custom validators, always make sure they're designed properly to handle malicious input_\n\nIn some situations where the built-in validators don't work for you, finicky allows you to define your own validator. \nValidators are essentially functions that take in a single input and return the newly validated input on success or \nraise a `finicky.ValidationException` for invalid input. A simple example maybe checking if a field is a valid\nip-address. \n```python\nimport re\nfrom finicky import validate,is_str, ValidationException \n\ndef is_ipv4_address(input):\n    if not input:\n        raise ValidationException(\"this field is required\")\n    input = str(input).strip()\n    if not re.match(r\"\\A\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\Z\", input):\n        raise ValidationException(\"This field must be an ipv4 address\")\n    parts = input.split(\".\") \n    assert len(parts) == 4 # this should produce 4 parts else the regex test should have failed\n    if any(int(part, base=10) > 255 for part in parts):\n        raise ValidationException(\"This field must be a valid ipv4 address\") \n    return input\n\nmy_schema = {\n    \"sender_ip\":is_ipv4_address, \n    \"message\":is_str(min_len=1, max_len=200) \n}\n\nerr, val = validate(schema=my_schema, data={\"sender_ip\":\"127.0.0.1\", \"message\":\"PING\"})\n## code continues\n```  \n\n### Handling Errors \n`finicky.validate` returns a tuple where the first element is an error and the second, the newly validated data. On successful \nvalidation, error is `None`. Errors are python dicts that follow exactly the structure of the schema so checking which field \nfailed validation is trivial (as shown below). There's an extra field on the returned error  named `___hook` that holds \nerrors raised by the optional hook function. \n\n**Example**\n```python\nfrom finicky import  validate, is_float, ValidationException\n\ndef hook(price):\n    if price.get(\"selling_price\") < price.get(\"cost_price\"):\n        raise ValidationException(\"selling_price cannot be less than cost_price\")\n    return price\n\nprice_schema = {\n    \"selling_price\":is_float(required=True,round_to=2, min=0.01),\n    \"cost_price\":is_float(required=True, round_to=2, min=0.01) \n}\n# scenario 1\nerrors, _ = validate(schema=price_schema,data=dict(selling_price=0, cost_price=8), hook=hook)\nprint(errors) # {\"selling_price\":\"'0' is less than minimum value required (0.1)\"}\n\n# scenario 2\nerrors, _ = validate(schema=price_schema,data=dict(selling_price=2, cost_price=8), hook=hook)\nprint(errors) # {\"__hook\":\"selling_price cannot be less than cost_price\"}\n\n# scenario 3\n_, validated_price = validate(schema=price_schema,data=dict(selling_price=12.159, cost_price=8.489), hook=hook)\nprint(validated_price) # {\"selling_price\":12.16, \"cost_price\":8.49}\n```\n\n### Testing \n```shell script\ncoverage run --source='.' -m pytest && coverage report \n```\n\n### License\nMIT\n\n### Contributing\nSpot a bug? feature request? want to improve documentation? Kindly open an issue or make a pull request, your feedback \nis welcome.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yaaminu/finicky",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Finicky",
    "package_url": "https://pypi.org/project/Finicky/",
    "platform": "",
    "project_url": "https://pypi.org/project/Finicky/",
    "project_urls": {
      "Homepage": "https://github.com/yaaminu/finicky"
    },
    "release_url": "https://pypi.org/project/Finicky/0.1.7/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Easy Data Validation",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10062072,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d614f13d1dd8d39ad4202783243c70f008d7adb4c72d0e71143b0bcb0a7cea4",
          "md5": "dcdf1361423cabb8d076a137517513a5",
          "sha256": "f7827bf16e8762e0e7495eba7f23a0d501a15783b4bfe3d66e186e66d219f93e"
        },
        "downloads": -1,
        "filename": "Finicky-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcdf1361423cabb8d076a137517513a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9628,
        "upload_time": "2021-02-12T16:11:07",
        "upload_time_iso_8601": "2021-02-12T16:11:07.585187Z",
        "url": "https://files.pythonhosted.org/packages/8d/61/4f13d1dd8d39ad4202783243c70f008d7adb4c72d0e71143b0bcb0a7cea4/Finicky-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0179590b475cb3b2b4edb561f4ad00031f0401bde3c1a04aeaf003e62269a58e",
          "md5": "85a81d35aa026694deb6dddde93017e1",
          "sha256": "3696e85898a21f0b05011ef9cc9fffa10f78172324ffb86013fd4deddaf49858"
        },
        "downloads": -1,
        "filename": "Finicky-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "85a81d35aa026694deb6dddde93017e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7857,
        "upload_time": "2021-02-12T16:11:09",
        "upload_time_iso_8601": "2021-02-12T16:11:09.885223Z",
        "url": "https://files.pythonhosted.org/packages/01/79/590b475cb3b2b4edb561f4ad00031f0401bde3c1a04aeaf003e62269a58e/Finicky-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fcdd3d764915d3c96ea9570a748eea4e2fbed7f48e279609b605aa9e45898db",
          "md5": "c6c1abcf2d2b0ae1d62262ab1133e07c",
          "sha256": "9a1e05c2c6a412578425b06b5db864accdaf731da644727c6bb4cb4681debe99"
        },
        "downloads": -1,
        "filename": "Finicky-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c6c1abcf2d2b0ae1d62262ab1133e07c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 7507,
        "upload_time": "2021-04-14T12:05:41",
        "upload_time_iso_8601": "2021-04-14T12:05:41.320983Z",
        "url": "https://files.pythonhosted.org/packages/3f/cd/d3d764915d3c96ea9570a748eea4e2fbed7f48e279609b605aa9e45898db/Finicky-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d3890e763c0deb207d78b9ff89e4fbc19619e580acf6d31bb011e4403f6f638",
          "md5": "a5e8bc988c2aea37cd18b3d88e605420",
          "sha256": "57f351af183bc3716aa06146e7545d19bc6e5801d4c11153a472a688a1f32a7b"
        },
        "downloads": -1,
        "filename": "Finicky-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a5e8bc988c2aea37cd18b3d88e605420",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 7526,
        "upload_time": "2021-04-14T12:22:18",
        "upload_time_iso_8601": "2021-04-14T12:22:18.191150Z",
        "url": "https://files.pythonhosted.org/packages/5d/38/90e763c0deb207d78b9ff89e4fbc19619e580acf6d31bb011e4403f6f638/Finicky-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb8d6414f9a8c389f994f4b9ffa11fd1dbcedd4e14095768393db9401233a0be",
          "md5": "091ad1e461363ca835a10fa6ea57ecb0",
          "sha256": "85a026b5e7e38bde05838ba06156398c9b0f4ad3252c78d81ad967664f1a7ac7"
        },
        "downloads": -1,
        "filename": "Finicky-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "091ad1e461363ca835a10fa6ea57ecb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 11414,
        "upload_time": "2021-04-14T12:57:12",
        "upload_time_iso_8601": "2021-04-14T12:57:12.538194Z",
        "url": "https://files.pythonhosted.org/packages/eb/8d/6414f9a8c389f994f4b9ffa11fd1dbcedd4e14095768393db9401233a0be/Finicky-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39bf2c3cce1df209e41811b22b9f07a2fb917c3adeb844eab751bcbe9b798a7d",
          "md5": "a99380a565ede7534b9a18e855b459c0",
          "sha256": "64090a6d76ee01b7a4a4cda9d592131991347f6466bc547454b7a50e8137af0a"
        },
        "downloads": -1,
        "filename": "Finicky-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a99380a565ede7534b9a18e855b459c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 11499,
        "upload_time": "2021-04-14T13:08:32",
        "upload_time_iso_8601": "2021-04-14T13:08:32.975967Z",
        "url": "https://files.pythonhosted.org/packages/39/bf/2c3cce1df209e41811b22b9f07a2fb917c3adeb844eab751bcbe9b798a7d/Finicky-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39bf2c3cce1df209e41811b22b9f07a2fb917c3adeb844eab751bcbe9b798a7d",
        "md5": "a99380a565ede7534b9a18e855b459c0",
        "sha256": "64090a6d76ee01b7a4a4cda9d592131991347f6466bc547454b7a50e8137af0a"
      },
      "downloads": -1,
      "filename": "Finicky-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "a99380a565ede7534b9a18e855b459c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 11499,
      "upload_time": "2021-04-14T13:08:32",
      "upload_time_iso_8601": "2021-04-14T13:08:32.975967Z",
      "url": "https://files.pythonhosted.org/packages/39/bf/2c3cce1df209e41811b22b9f07a2fb917c3adeb844eab751bcbe9b798a7d/Finicky-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}