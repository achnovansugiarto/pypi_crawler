{
  "info": {
    "author": "Kexin Huang, Tianfan Fu",
    "author_email": "kexinhuang@hsph.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\"><img src=\"figs/logo_deeppurpose_horizontal.png\" alt=\"logo\" width=\"400px\" /></p>\n\n\n<h3 align=\"center\">\n<p> A Deep Learning Library for Compound and Protein Modeling <br>DTI, Drug Property, PPI, DDI, Protein Function Prediction<br></h3>\n<h4 align=\"center\">\n<p> Applications in Drug Repurposing, Virtual Screening, QSAR, Side Effect Prediction and More </h4>\n\n---\n\n[![PyPI version](https://badge.fury.io/py/DeepPurpose.svg)](https://pypi.org/project/DeepPurpose/)\n[![Downloads](https://pepy.tech/badge/deeppurpose/month)](https://pepy.tech/project/deeppurpose)\n[![Downloads](https://pepy.tech/badge/deeppurpose)](https://pepy.tech/project/deeppurpose)\n[![GitHub Repo stars](https://img.shields.io/github/stars/kexinhuang12345/DeepPurpose)](https://github.com/kexinhuang12345/DeepPurpose/stargazers)\n[![GitHub Repo forks](https://img.shields.io/github/forks/kexinhuang12345/DeepPurpose)](https://github.com/kexinhuang12345/DeepPurpose/network/members)\n\nThis repository hosts DeepPurpose, a Deep Learning Based Molecular Modeling and Prediction Toolkit on Drug-Target Interaction Prediction, Compound Property Prediction, Protein-Protein Interaction Prediction, and Protein Function prediction (using PyTorch). We focus on DTI and its applications in Drug Repurposing and Virtual Screening, but support various other molecular encoding tasks. It allows very easy usage (several lines of codes only) to facilitate deep learning for life science research. \n\n### News!\n- [05/21] `0.1.2` Support 5 new graph neural network based models for compound encoding (DGL_GCN, DGL_NeuralFP, DGL_GIN_AttrMasking, DGL_GIN_ContextPred, DGL_AttentiveFP), implemented using [DGL Life Science](https://github.com/awslabs/dgl-lifesci)! An example is provided [here](DEMO/GNN_Models_Release_Example.ipynb)!\n- [12/20] DeepPurpose is now supported by TDC data loader, which contains a large collection of ML for therapeutics datasets, including many drug property, DTI datasets. Here is a [tutorial](https://github.com/mims-harvard/TDC/blob/master/tutorials/TDC_104_ML_Model_DeepPurpose.ipynb)!\n- [12/20] DeepPurpose can now be installed via `pip`!\n- [11/20] DeepPurpose is published in [Bioinformatics](https://doi.org/10.1093/bioinformatics/btaa1005)!\n- [11/20] Added 5 more pretrained models on BindingDB IC50 Units (around 1Million data points). \n- [10/20] Google Colab Installation Instructions are provided [here](https://colab.research.google.com/drive/1eF60BwGX6PnB91vpx5dRxFa72e6-MYuZ?usp=sharing). Thanks to @hima111997 ! \n- [10/20] Using DeepPurpose, we made a humans-in-the-loop molecular design web UI interface, check it out! \\[[Website](http://deeppurpose.sunlab.org/), [paper](https://arxiv.org/abs/2010.03951)\\]\n- [09/20] DeepPurpose has now supported three more tasks: DDI, PPI and Protein Function Prediction! You can simply call `from DeepPurpose import DDI/PPI/ProteinPred` to use, checkout examples below!\n- [07/20] A simple web UI for DTI prediction can be created under 10 lines using [Gradio](https://github.com/gradio-app/gradio)! A demo is provided [here](https://github.com/kexinhuang12345/DeepPurpose/blob/master/DEMO/web_ui_gradio.ipynb).\n- [07/20] A [blog](https://towardsdatascience.com/drug-discovery-with-deep-learning-under-10-lines-of-codes-742ee306732a) is posted on the Towards Data Science Medium column, check this out!\n- [07/20] Two tutorials are online to go through DeepPurpose's framework to do drug-target interaction prediction and drug property prediction ([DTI](Tutorial_1_DTI_Prediction.ipynb), [Drug Property](Tutorial_2_Drug_Property_Pred_Assay_Data.ipynb)). \n- [05/20] Support drug property prediction for screening data that does not have target proteins such as bacteria! An example using RDKit2D with DNN for training and repurposing for pseudomonas aeruginosa (MIT AI Cures's [open task](https://www.aicures.mit.edu/data)) is provided as a [demo](DEMO/Drug_Property_Prediction_Bacterial_Activity-RDKit2D_MIT_AiCures.ipynb).\n- [05/20] Now supports hyperparameter tuning via Bayesian Optimization through the [Ax platform](https://ax.dev/)! A demo is provided in [here](DEMO/Drug_Property_Pred-Ax-Hyperparam-Tune.ipynb). \n\n### Features\n\n- 15+ powerful encodings for drugs and proteins, ranging from deep neural network on classic cheminformatics fingerprints, CNN, transformers to message passing graph neural network, with 50+ combined models! Most of the combinations of the encodings are not yet in existing works. All of these under 10 lines but with lots of flexibility! Switching encoding is as simple as changing the encoding names!\n\n- Realistic and user-friendly design: \n\t- support DTI, DDI, PPI, molecular property prediction, protein function predictions!\n\t- automatic identification to do drug target binding affinity (regression) or drug target interaction prediction (binary) task.\n\t- support cold target, cold drug settings for robust model evaluations and support single-target high throughput sequencing assay data setup.\n\t- many dataset loading/downloading/unzipping scripts to ease the tedious preprocessing, including antiviral, COVID19 targets, BindingDB, DAVIS, KIBA, ...\n\t- many pretrained checkpoints.\n\t- easy monitoring of training process with detailed training metrics output such as test set figures (AUCs) and tables, also support early stopping.\n\t- detailed output records such as rank list for repurposing result.\n\t- various evaluation metrics: ROC-AUC, PR-AUC, F1 for binary task, MSE, R-squared, Concordance Index for regression task.\n\t- label unit conversion for skewed label distribution such as Kd.\n\t- time reference for computational expensive encoding.\n\t- PyTorch based, support CPU, GPU, Multi-GPUs.\n\t\n*NOTE: We are actively looking for constructive advices/user feedbacks/experiences on using DeepPurpose! Please open an issue or [contact us](mailto:kexinhuang@hsph.harvard.edu).*\n\n\n## Cite Us\n\nIf you found this package useful, please cite [our paper](https://doi.org/10.1093/bioinformatics/btaa1005):\n```\n@article{huang2020deeppurpose,\n  title={DeepPurpose: A Deep Learning Library for Drug-Target Interaction Prediction},\n  author={Huang, Kexin and Fu, Tianfan and Glass, Lucas M and Zitnik, Marinka and Xiao, Cao and Sun, Jimeng},\n  journal={Bioinformatics},\n  year={2020}\n}\n```\n\n## Installation\nTry it on [Binder](https://mybinder.org)! Binder is a cloud Jupyter Notebook interface that will install our environment dependency for you. \n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/kexinhuang12345/DeepPurpose/master)\n\n[Video tutorial](https://www.youtube.com/watch?v=ghUyZknxq5o) to install Binder.\n\nWe recommend to install it locally since Binder needs to be refreshed every time launching. To install locally, we recommend to install from `pip`:\n\n### `pip`\n\n```bash\nconda create -n DeepPurpose python=3.6\nconda activate DeepPurpose\nconda install -c conda-forge rdkit\nconda install -c conda-forge notebook\npip install git+https://github.com/bp-kelley/descriptastorus \npip install DeepPurpose\n```\n\n### Build from Source\n\nFirst time:\n```bash\ngit clone https://github.com/kexinhuang12345/DeepPurpose.git ## Download code repository\ncd DeepPurpose ## Change directory to DeepPurpose\nconda env create -f environment.yml  ## Build virtual environment with all packages installed using conda\nconda activate DeepPurpose ## Activate conda environment (use \"source activate DeepPurpose\" for anaconda 4.4 or earlier) \njupyter notebook ## open the jupyter notebook with the conda env\n\n## run our code, e.g. click a file in the DEMO folder\n... ...\n\nconda deactivate ## when done, exit conda environment \n```\n\nIn the future:\n```bash\ncd DeepPurpose ## Change directory to DeepPurpose\nconda activate DeepPurpose ## Activate conda environment\njupyter notebook ## open the jupyter notebook with the conda env\n\n## run our code, e.g. click a file in the DEMO folder\n... ...\n\nconda deactivate ## when done, exit conda environment \n```\n\n[Video tutorial](https://youtu.be/bqinehjnWvE) to install locally from source.\n\n\n## Example\n\n### Case Study 1(a): A Framework for Drug Target Interaction Prediction, with less than 10 lines of codes.\nIn addition to the DTI prediction, we also provide repurpose and virtual screening functions to rapidly generation predictions.\n\n<details>\n  <summary>Click here for the code!</summary>\n\n```python\nfrom DeepPurpose import DTI as models\nfrom DeepPurpose.utils import *\nfrom DeepPurpose.dataset import *\n\n# Load Data, an array of SMILES for drug, an array of Amino Acid Sequence for Target and an array of binding values/0-1 label.\n# e.g. ['Cc1ccc(CNS(=O)(=O)c2ccc(s2)S(N)(=O)=O)cc1', ...], ['MSHHWGYGKHNGPEHWHKDFPIAKGERQSPVDIDTH...', ...], [0.46, 0.49, ...]\n# In this example, BindingDB with Kd binding score is used.\nX_drug, X_target, y  = process_BindingDB(download_BindingDB(SAVE_PATH),\n\t\t\t\t\t y = 'Kd', \n\t\t\t\t\t binary = False, \n\t\t\t\t\t convert_to_log = True)\n\n# Type in the encoding names for drug/protein.\ndrug_encoding, target_encoding = 'MPNN', 'Transformer'\n\n# Data processing, here we select cold protein split setup.\ntrain, val, test = data_process(X_drug, X_target, y, \n                                drug_encoding, target_encoding, \n                                split_method='cold_protein', \n                                frac=[0.7,0.1,0.2])\n\n# Generate new model using default parameters; also allow model tuning via input parameters.\nconfig = generate_config(drug_encoding, target_encoding, transformer_n_layer_target = 8)\nnet = models.model_initialize(**config)\n\n# Train the new model.\n# Detailed output including a tidy table storing validation loss, metrics, AUC curves figures and etc. are stored in the ./result folder.\nnet.train(train, val, test)\n\n# or simply load pretrained model from a model directory path or reproduced model name such as DeepDTA\nnet = models.model_pretrained(MODEL_PATH_DIR or MODEL_NAME)\n\n# Repurpose using the trained model or pre-trained model\n# In this example, loading repurposing dataset using Broad Repurposing Hub and SARS-CoV 3CL Protease Target.\nX_repurpose, drug_name, drug_cid = load_broad_repurposing_hub(SAVE_PATH)\ntarget, target_name = load_SARS_CoV_Protease_3CL()\n\n_ = models.repurpose(X_repurpose, target, net, drug_name, target_name)\n\n# Virtual screening using the trained model or pre-trained model \nX_repurpose, drug_name, target, target_name = ['CCCCCCCOc1cccc(c1)C([O-])=O', ...], ['16007391', ...], ['MLARRKPVLPALTINPTIAEGPSPTSEGASEANLVDLQKKLEEL...', ...], ['P36896', 'P00374']\n\n_ = models.virtual_screening(X_repurpose, target, net, drug_name, target_name)\n\n```\n\n</details>\n\n\n### Case Study 1(b): A Framework for Drug Property Prediction, with less than 10 lines of codes.\nMany dataset is in the form of high throughput screening data, which have only drug and its activity score. It can be formulated as a drug property prediction task. We also provide a repurpose function to predict over large space of drugs. \n\n<details>\n  <summary>Click here for the code!</summary>\n\n```python\nfrom DeepPurpose import CompoundPred as models\nfrom DeepPurpose.utils import *\nfrom DeepPurpose.dataset import *\n\n# load AID1706 Assay Data\nX_drugs, _, y = load_AID1706_SARS_CoV_3CL()\n\ndrug_encoding = 'rdkit_2d_normalized'\ntrain, val, test = data_process(X_drug = X_drugs, y = y, \n\t\t\t    drug_encoding = drug_encoding,\n\t\t\t    split_method='random', \n\t\t\t    random_seed = 1)\n\nconfig = generate_config(drug_encoding = drug_encoding, \n                         cls_hidden_dims = [512], \n                         train_epoch = 20, \n                         LR = 0.001, \n                         batch_size = 128,\n                        )\nmodel = models.model_initialize(**config)\nmodel.train(train, val, test)\n\nX_repurpose, drug_name, drug_cid = load_broad_repurposing_hub(SAVE_PATH)\n\n_ = models.repurpose(X_repurpose, model, drug_name)\n\n```\n\n</details>\n\n### Case Study 1(c): A Framework for Drug-Drug Interaction Prediction, with less than 10 lines of codes.\nDDI is very important for drug safety profiling and the success of clinical trials. This framework predicts interaction based on drug pairs chemical structure.\n\n<details>\n  <summary>Click here for the code!</summary>\n\n```python\nfrom DeepPurpose import DDI as models\nfrom DeepPurpose.utils import *\nfrom DeepPurpose.dataset import *\n\n# load DB Binary Data\nX_drugs, X_drugs_, y = read_file_training_dataset_drug_drug_pairs()\n\ndrug_encoding = 'rdkit_2d_normalized'\ntrain, val, test = data_process(X_drug = X_drugs, X_drug_ = X_drugs_, y = y, \n\t\t\t    drug_encoding = drug_encoding,\n\t\t\t    split_method='random', \n\t\t\t    random_seed = 1)\n\nconfig = generate_config(drug_encoding = drug_encoding, \n                         cls_hidden_dims = [512], \n                         train_epoch = 20, \n                         LR = 0.001, \n                         batch_size = 128,\n                        )\n\nmodel = models.model_initialize(**config)\nmodel.train(train, val, test)\n\n```\n\n</details>\n\n### Case Study 1(d): A Framework for Protein-Protein Interaction Prediction, with less than 10 lines of codes.\nPPI is important to study the relations among targets. \n\n<details>\n  <summary>Click here for the code!</summary>\n\n```python\nfrom DeepPurpose import PPI as models\nfrom DeepPurpose.utils import *\nfrom DeepPurpose.dataset import *\n\n# load DB Binary Data\nX_targets, X_targets_, y = read_file_training_dataset_protein_proteins_pairs()\n\ntarget_encoding = 'CNN'\ntrain, val, test = data_process(X_target = X_targets, X_target_ = X_targets_, y = y, \n\t\t\t    target_encoding = target_encoding,\n\t\t\t    split_method='random', \n\t\t\t    random_seed = 1)\n\nconfig = generate_config(target_encoding = target_encoding, \n                         cls_hidden_dims = [512], \n                         train_epoch = 20, \n                         LR = 0.001, \n                         batch_size = 128,\n                        )\n\nmodel = models.model_initialize(**config)\nmodel.train(train, val, test)\n\n```\n\n</details>\n\n\n### Case Study 1(e): A Framework for Protein Function Prediction, with less than 10 lines of codes.\nProtein function prediction help predict various useful functions such as GO terms, structural classification and etc. Also, for biologics drugs, it is also useful for screening. \n\n<details>\n  <summary>Click here for the code!</summary>\n\n```python\nfrom DeepPurpose import ProteinPred as models\nfrom DeepPurpose.utils import *\nfrom DeepPurpose.dataset import *\n\n# load DB Binary Data\nX_targets, y = read_file_protein_function()\n\ntarget_encoding = 'CNN'\ntrain, val, test = data_process(X_target = X_targets, y = y, \n\t\t\t    target_encoding = target_encoding,\n\t\t\t    split_method='random', \n\t\t\t    random_seed = 1)\n\nconfig = generate_config(target_encoding = target_encoding, \n                         cls_hidden_dims = [512], \n                         train_epoch = 20, \n                         LR = 0.001, \n                         batch_size = 128,\n                        )\n\nmodel = models.model_initialize(**config)\nmodel.train(train, val, test)\n\n```\n\n</details>\n\n### Case Study 2 (a): Antiviral Drugs Repurposing for SARS-CoV2 3CLPro, using One Line.\n  Given a new target sequence (e.g. SARS-CoV2 3CL Protease), retrieve a list of repurposing drugs from a curated drug library of 81 antiviral drugs. The Binding Score is the Kd values. Results aggregated from five pretrained model on BindingDB dataset! (Caution: this currently is for educational purposes. The pretrained DTI models only cover a small dataset and thus cannot generalize to every new unseen protein. For best use case, train your own model with customized data.)\n\n<details>\n  <summary>Click here for the code!</summary>\n\n```python\nfrom DeepPurpose import oneliner\nfrom DeepPurpose.dataset import *\noneliner.repurpose(*load_SARS_CoV2_Protease_3CL(), *load_antiviral_drugs(no_cid = True))\n```\n```\n----output----\nDrug Repurposing Result for SARS-CoV2 3CL Protease\n+------+----------------------+------------------------+---------------+\n| Rank |      Drug Name       |      Target Name       | Binding Score |\n+------+----------------------+------------------------+---------------+\n|  1   |      Sofosbuvir      | SARS-CoV2 3CL Protease |     190.25    |\n|  2   |     Daclatasvir      | SARS-CoV2 3CL Protease |     214.58    |\n|  3   |      Vicriviroc      | SARS-CoV2 3CL Protease |     315.70    |\n|  4   |      Simeprevir      | SARS-CoV2 3CL Protease |     396.53    |\n|  5   |      Etravirine      | SARS-CoV2 3CL Protease |     409.34    |\n|  6   |      Amantadine      | SARS-CoV2 3CL Protease |     419.76    |\n|  7   |      Letermovir      | SARS-CoV2 3CL Protease |     460.28    |\n|  8   |     Rilpivirine      | SARS-CoV2 3CL Protease |     470.79    |\n|  9   |      Darunavir       | SARS-CoV2 3CL Protease |     472.24    |\n|  10  |      Lopinavir       | SARS-CoV2 3CL Protease |     473.01    |\n|  11  |      Maraviroc       | SARS-CoV2 3CL Protease |     474.86    |\n|  12  |    Fosamprenavir     | SARS-CoV2 3CL Protease |     487.45    |\n|  13  |      Ritonavir       | SARS-CoV2 3CL Protease |     492.19    |\n....\n```\n\n</details>\n\n\n### Case Study 2(b): Repurposing using Customized training data, with One Line.\nGiven a new target sequence (e.g. SARS-CoV 3CL Pro), training on new data (AID1706 Bioassay), and then retrieve a list of repurposing drugs from a proprietary library (e.g. antiviral drugs). The model can be trained from scratch or finetuned from the pretraining checkpoint!\n\n<details>\n  <summary>Click here for the code!</summary>\n\t\n```python\nfrom DeepPurpose import oneliner\nfrom DeepPurpose.dataset import *\n\noneliner.repurpose(*load_SARS_CoV_Protease_3CL(), *load_antiviral_drugs(no_cid = True),  *load_AID1706_SARS_CoV_3CL(), \\\n\t\tsplit='HTS', convert_y = False, frac=[0.8,0.1,0.1], pretrained = False, agg = 'max_effect')\n```\n```\n----output----\nDrug Repurposing Result for SARS-CoV 3CL Protease\n+------+----------------------+-----------------------+-------------+-------------+\n| Rank |      Drug Name       |      Target Name      | Interaction | Probability |\n+------+----------------------+-----------------------+-------------+-------------+\n|  1   |      Remdesivir      | SARS-CoV 3CL Protease |     YES     |     0.99    |\n|  2   |      Efavirenz       | SARS-CoV 3CL Protease |     YES     |     0.98    |\n|  3   |      Vicriviroc      | SARS-CoV 3CL Protease |     YES     |     0.98    |\n|  4   |      Tipranavir      | SARS-CoV 3CL Protease |     YES     |     0.96    |\n|  5   |     Methisazone      | SARS-CoV 3CL Protease |     YES     |     0.94    |\n|  6   |      Letermovir      | SARS-CoV 3CL Protease |     YES     |     0.88    |\n|  7   |     Idoxuridine      | SARS-CoV 3CL Protease |     YES     |     0.77    |\n|  8   |       Loviride       | SARS-CoV 3CL Protease |     YES     |     0.76    |\n|  9   |      Baloxavir       | SARS-CoV 3CL Protease |     YES     |     0.74    |\n|  10  |     Ibacitabine      | SARS-CoV 3CL Protease |     YES     |     0.70    |\n|  11  |     Taribavirin      | SARS-CoV 3CL Protease |     YES     |     0.65    |\n|  12  |      Indinavir       | SARS-CoV 3CL Protease |     YES     |     0.62    |\n|  13  |   Podophyllotoxin    | SARS-CoV 3CL Protease |     YES     |     0.60    |\n....\n```\n</details>\n\n\n## Demos\nCheckout 10+ demos & tutorials to start:\n\n| Name | Description |\n|-----------------|-------------|\n| [Dataset Tutorial](DEMO/load_data_tutorial.ipynb) | Tutorial on how to use the dataset loader and read customized data|\n| [Drug Repurposing for 3CLPro](DEMO/case-study-I-Drug-Repurposing-for-3CLPro.ipynb)| Example of one-liner repurposing for 3CLPro|\n| [Drug Repurposing with Customized Data](DEMO/case-study-III-Drug-Repurposing-with-Customized-Data.ipynb)| Example of one-liner repurposing with AID1706 Bioassay Data, training from scratch|\n| [Virtual Screening for BindingDB IC50](DEMO/case-study-II-Virtual-Screening-for-BindingDB-IC50.ipynb) | Example of one-liner virtual screening |\n|[Reproduce DeepDTA](DEMO/case-study-IV-Reproduce_DeepDTA.ipynb)|Reproduce [DeepDTA](https://arxiv.org/abs/1801.10193) with DAVIS dataset and show how to use the 10 lines framework|\n| [Virtual Screening for DAVIS and Correlation Plot](DEMO/Make-DAVIS-Correlation-Figure.ipynb) | Example of one-liner virtual screening and evaluate on unseen dataset by plotting correlation |\n| [Binary Classification for DAVIS using CNNs](DEMO/CNN-Binary-Example-DAVIS.ipynb)| Binary Classification for DAVIS dataset using CNN encodings by using the 10 lines framework.|\n| [Pretraining Model Tutorial](DEMO/load_pretraining_models_tutorial.ipynb)| Tutorial on how to load pretraining models|\n\nand more in the [DEMO](https://github.com/kexinhuang12345/DeepPurpose/tree/master/DEMO) folder!\n\n## Contact\nPlease contact kexinhuang@hsph.harvard.edu or tfu42@gatech.edu for help or submit an issue. \n\n## Encodings\nCurrently, we support the following encodings:\n\n| Drug Encodings  | Description |\n|-----------------|-------------|\n| Morgan | Extended-Connectivity Fingerprints |\n| Pubchem| Pubchem Substructure-based Fingerprints|\n| Daylight | Daylight-type fingerprints | \n| rdkit_2d_normalized| Normalized Descriptastorus|\n| ESPF | Explainable Substructure Partition Fingerprint |\n| ErG | 2D pharmacophore descriptions for scaffold hopping |\n| CNN | Convolutional Neural Network on SMILES|\n|CNN_RNN| A GRU/LSTM on top of a CNN on SMILES|\n|Transformer| Transformer Encoder on ESPF|\n|  MPNN | Message-passing neural network |\n| DGL_GCN | Graph Convolutional Network |\n| DGL_NeuralFP | Neural Fingerprint |\n| DGL_GIN_AttrMasking | Pretrained GIN with Attribute Masking |\n| DGL_GIN_ContextPred | Pretrained GIN with Context Prediction |\n| DGL_AttentiveFP | Attentive FP, Xiong et al. 2020 |\n\n\n| Target Encodings  | Description |\n|-----------------|-------------|\n| AAC | Amino acid composition up to 3-mers |\n| PseudoAAC| Pseudo amino acid composition|\n| Conjoint_triad | Conjoint triad features | \n| Quasi-seq| Quasi-sequence order descriptor|\n| ESPF | Explainable Substructure Partition Fingerprint |\n| CNN | Convolutional Neural Network on target seq|\n|CNN_RNN| A GRU/LSTM on top of a CNN on target seq|\n|Transformer| Transformer Encoder on ESPF|\n\n## Data\nDeepPurpose supports the following dataset loaders for now and more will be added:\n\n*Public Drug-Target Binding Benchmark Dataset*\n| Data  | Function |\n|-------|----------|\n|[BindingDB](https://www.bindingdb.org/bind/index.jsp)| ```download_BindingDB()``` to download the data and ```process_BindingDB()``` to process the data|\n|[DAVIS](http://staff.cs.utu.fi/~aatapa/data/DrugTarget/)|```load_process_DAVIS()``` to download and process the data|\n|[KIBA](https://jcheminf.biomedcentral.com/articles/10.1186/s13321-017-0209-z)|```load_process_KIBA()``` to download and process the data|\n\n*Repurposing Dataset*\n| Data  | Function |\n|-------|----------|\n|[Curated Antiviral Drugs Library](https://en.wikipedia.org/wiki/List_of_antiviral_drugs)|```load_antiviral_drugs()``` to load and process the data|\n|[Broad Repurposing Hub](https://www.broadinstitute.org/drug-repurposing-hub)|```load_broad_repurposing_hub()``` downloads and process the data|\n\n*Bioassay Data for COVID-19*\n(Thanks to [MIT AI Cures](https://www.aicures.mit.edu/data))\n| Data  | Function |\n|-------|----------|\n|[AID1706](https://pubchem.ncbi.nlm.nih.gov/bioassay/1706)|```load_AID1706_SARS_CoV_3CL()``` to load and process|\n\n*COVID-19 Targets*\n| Data  | Function |\n|-------|----------|\n|SARS-CoV 3CL Protease|```load_SARS_CoV_Protease_3CL()```|\n|SARS-CoV2 3CL Protease|```load_SARS_CoV2_Protease_3CL()```|\n|SARS_CoV2 RNA Polymerase|```load_SARS_CoV2_RNA_polymerase()```|\n|SARS-CoV2 Helicase|```load_SARS_CoV2_Helicase()```|\n|SARS-CoV2 3to5_exonuclease|```load_SARS_CoV2_3to5_exonuclease()```|\n|SARS-CoV2 endoRNAse|```load_SARS_CoV2_endoRNAse()```|\n\nDeepPurpose also supports to read from users' txt file. It assumes the following data format.\n\n<details>\n  <summary>Click here for the format expected!</summary>\n\nFor drug target pairs:\n```\nDrug1_SMILES Target1_Seq Score/Label\nDrug2_SMILES Target2_Seq Score/Label\n....\n```\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nX_drug, X_target, y = dataset.read_file_training_dataset_drug_target_pairs(PATH)\n```\n\nFor bioassay training data:\n```\nTarget_Seq\nDrug1_SMILES Score/Label\nDrug2_SMILES Score/Label\n....\n```\n\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nX_drug, X_target, y = dataset.read_file_training_dataset_bioassay(PATH)\n```\n\nFor drug property prediction training data:\n```\nDrug1_SMILES Score/Label\nDrug2_SMILES Score/Label\n....\n```\n\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nX_drug, y = dataset.read_file_compound_property(PATH)\n```\n\nFor protein function prediction training data:\n```\nTarget1_Seq Score/Label\nTarget2_Seq Score/Label\n....\n```\n\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nX_drug, y = dataset.read_file_protein_function(PATH)\n```\n\nFor drug drug pairs:\n```\nDrug1_SMILES Drug1_SMILES_ Score/Label\nDrug2_SMILES Drug2_SMILES_ Score/Label\n....\n```\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nX_drug, X_target, y = dataset.read_file_training_dataset_drug_drug_pairs(PATH)\n```\n\nFor protein protein pairs:\n```\nTarget1_Seq Target1_Seq_ Score/Label\nTarget2_Seq Target2_Seq_ Score/Label\n....\n```\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nX_drug, X_target, y = dataset.read_file_training_dataset_protein_proteins_pairs(PATH)\n```\n\nFor drug repurposing library:\n```\nDrug1_Name Drug1_SMILES \nDrug2_Name Drug2_SMILES\n....\n```\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nX_drug, X_drug_names = dataset.read_file_repurposing_library(PATH)\n```\n\nFor target sequence to be repurposed:\n```\nTarget_Name Target_seq \n```\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nTarget_seq, Target_name = dataset.read_file_target_sequence(PATH)\n```\n\nFor virtual screening library:\n```\nDrug1_SMILES Drug1_Name Target1_Seq Target1_Name\nDrug1_SMILES Drug1_Name Target1_Seq Target1_Name\n....\n```\nThen, use \n\n```python \nfrom DeepPurpose import dataset\nX_drug, X_target, X_drug_names, X_target_names = dataset.read_file_virtual_screening_drug_target_pairs(PATH)\n```\n</details>\n\nCheckout [Dataset Tutorial](DEMO/load_data_tutorial.ipynb).\n\n## Pretrained models\nWe provide more than 10 pretrained models. Please see [Pretraining Model Tutorial](DEMO/load_pretraining_models_tutorial.ipynb) on how to load them. It is as simple as \n\n```python\nfrom DeepPurpose import DTI as models\nnet = models.model_pretrained(model = 'MPNN_CNN_DAVIS')\nor\nnet = models.model_pretrained(FILE_PATH)\n```\nThe list of avaiable pretrained models:\n\nModel name consists of first the drug encoding, then the target encoding and then the trained dataset.\n\nNote that for DTI models, the BindingDB and DAVIS are trained on log scale. But DeepPurpose allows you to specify conversion between log scale (e.g. pIC50) and original scale by the variable `convert_y`.\n\n<details>\n  <summary>Click here for the models supported!</summary>\n\n|Model Name|\n|------|\n|CNN_CNN_BindingDB_IC50|\n|Morgan_CNN_BindingDB_IC50|\n|Morgan_AAC_BindingDB_IC50|\n|MPNN_CNN_BindingDB_IC50|\n|Daylight_AAC_BindingDB_IC50|\n|CNN_CNN_DAVIS|\n|CNN_CNN_BindingDB|\n|Morgan_CNN_BindingDB|\n|Morgan_CNN_KIBA|\n|Morgan_CNN_DAVIS|\n|MPNN_CNN_BindingDB|\n|MPNN_CNN_KIBA|\n|MPNN_CNN_DAVIS|\n|Transformer_CNN_BindingDB|\n|Daylight_AAC_DAVIS|\n|Daylight_AAC_KIBA|\n|Daylight_AAC_BindingDB|\n|Morgan_AAC_BindingDB|\n|Morgan_AAC_KIBA|\n|Morgan_AAC_DAVIS|\n\n</details>\n\n## Documentations\nhttps://deeppurpose.readthedocs.io is under active development.\n\n## Disclaimer\nThe output list should be inspected manually by experts before proceeding to the wet-lab validation, and our work is still in active developement with limitations, please do not directly use the drugs.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kexinhuang12345/DeepPurpose",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DeepPurpose",
    "package_url": "https://pypi.org/project/DeepPurpose/",
    "platform": "",
    "project_url": "https://pypi.org/project/DeepPurpose/",
    "project_urls": {
      "Homepage": "https://github.com/kexinhuang12345/DeepPurpose"
    },
    "release_url": "https://pypi.org/project/DeepPurpose/0.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "a Deep Learning Based Toolkit for Drug Discovery",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11832039,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b57c2b1fbc0a45bbe45754a6ac538ee233fc446721d4a5b3bbe67a910156bbb",
          "md5": "a15934827671288faae4c24c4667179a",
          "sha256": "fdcf3a284cde83ee84d793cd0b8080185213337b37addf9e36e24a82cb9bd64d"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a15934827671288faae4c24c4667179a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18217,
        "upload_time": "2020-12-25T01:24:52",
        "upload_time_iso_8601": "2020-12-25T01:24:52.722201Z",
        "url": "https://files.pythonhosted.org/packages/5b/57/c2b1fbc0a45bbe45754a6ac538ee233fc446721d4a5b3bbe67a910156bbb/DeepPurpose-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60647bdec02551191e00a4fde7d0c1a99f76f8c207abae77c3cc8369e9fde650",
          "md5": "4217a9392cdc367fd9195a599cfcf9fe",
          "sha256": "78f52e998f7847a4b5c54ddfed98616c7ca780a541a77919f4216c5492dd5841"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4217a9392cdc367fd9195a599cfcf9fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64843,
        "upload_time": "2020-12-25T01:48:05",
        "upload_time_iso_8601": "2020-12-25T01:48:05.491677Z",
        "url": "https://files.pythonhosted.org/packages/60/64/7bdec02551191e00a4fde7d0c1a99f76f8c207abae77c3cc8369e9fde650/DeepPurpose-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ae1318a0aab1549cf54281ebc69981deef75eaa91a09224ae72f66b808b07ad",
          "md5": "53d54ce4e316c389c430149389ad2f13",
          "sha256": "f9dba72fd8b3a6cddc52f4fee4945da16d9298ac30560abcbcd9ce3089d71570"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "53d54ce4e316c389c430149389ad2f13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 149994,
        "upload_time": "2020-12-25T02:01:37",
        "upload_time_iso_8601": "2020-12-25T02:01:37.395535Z",
        "url": "https://files.pythonhosted.org/packages/6a/e1/318a0aab1549cf54281ebc69981deef75eaa91a09224ae72f66b808b07ad/DeepPurpose-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55bb352a6b712ff91d6ab2e621df29a3cd50e2ad7e2a68deaca90826135b0330",
          "md5": "616ac3b9369452f6f706645dd1cc80b1",
          "sha256": "41205149a0021872a200d13134ef0de5bf9340d844af3b26183e046d475b17c3"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "616ac3b9369452f6f706645dd1cc80b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 152522,
        "upload_time": "2021-01-08T00:34:41",
        "upload_time_iso_8601": "2021-01-08T00:34:41.190258Z",
        "url": "https://files.pythonhosted.org/packages/55/bb/352a6b712ff91d6ab2e621df29a3cd50e2ad7e2a68deaca90826135b0330/DeepPurpose-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd237c0f8f1ace5e7674188e8c5c798cd4cd97567df52edf87e8e7d9daff8827",
          "md5": "fc06a18850306655121893b062e1dd4b",
          "sha256": "64d1f3921693d8e0e0b1cb1924635e192819f22df15c5a273b0b0341f3639791"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "fc06a18850306655121893b062e1dd4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 152693,
        "upload_time": "2021-01-12T03:27:56",
        "upload_time_iso_8601": "2021-01-12T03:27:56.208033Z",
        "url": "https://files.pythonhosted.org/packages/bd/23/7c0f8f1ace5e7674188e8c5c798cd4cd97567df52edf87e8e7d9daff8827/DeepPurpose-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6706a1055b6d391908bb59bafcc3c40da845b8358b4a722b79e96042161fd95d",
          "md5": "40b20170f730619b0399984b696fc7b2",
          "sha256": "33ca7c0fd236e206225e5935241a59765c29e15fea41e7e4438fff8e6eb6b2dd"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "40b20170f730619b0399984b696fc7b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 152952,
        "upload_time": "2021-01-22T06:41:15",
        "upload_time_iso_8601": "2021-01-22T06:41:15.176581Z",
        "url": "https://files.pythonhosted.org/packages/67/06/a1055b6d391908bb59bafcc3c40da845b8358b4a722b79e96042161fd95d/DeepPurpose-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6c97396a4fbaa07756643092d01950801ffdf9f09dd3fc0cd2c4362e9a0f722",
          "md5": "7ac13ac863af31a91dcb4872679b6213",
          "sha256": "b14bd5ca73ce4bf9bf055b928e38e46ae4b806fde53e822acf5571e37bb6faeb"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "7ac13ac863af31a91dcb4872679b6213",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 152961,
        "upload_time": "2021-01-22T08:02:02",
        "upload_time_iso_8601": "2021-01-22T08:02:02.190718Z",
        "url": "https://files.pythonhosted.org/packages/c6/c9/7396a4fbaa07756643092d01950801ffdf9f09dd3fc0cd2c4362e9a0f722/DeepPurpose-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9abee82f0b111a2c3c0a2c84cdef45b69e55bece226cf3a27d68608c110cb675",
          "md5": "75d65b7b1eb20347185701695b4dcdc4",
          "sha256": "bbc28bd1d65364944271337e8fbe0127e24e70eb6b573b5a542f3d1a73498c44"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "75d65b7b1eb20347185701695b4dcdc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 153177,
        "upload_time": "2021-04-23T22:04:34",
        "upload_time_iso_8601": "2021-04-23T22:04:34.737549Z",
        "url": "https://files.pythonhosted.org/packages/9a/be/e82f0b111a2c3c0a2c84cdef45b69e55bece226cf3a27d68608c110cb675/DeepPurpose-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14de4daf81b1895e81bd720ee042342952106255310bd1ce0e3c16240ddd823c",
          "md5": "b03df8e152a6ca7eddbcf0c8bcc2fb79",
          "sha256": "bca1b75d3b1a2410f3bc312bb3452ccfdd7946f19d1a6f07ca529d993f39981f"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b03df8e152a6ca7eddbcf0c8bcc2fb79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 153170,
        "upload_time": "2021-04-23T23:02:38",
        "upload_time_iso_8601": "2021-04-23T23:02:38.724522Z",
        "url": "https://files.pythonhosted.org/packages/14/de/4daf81b1895e81bd720ee042342952106255310bd1ce0e3c16240ddd823c/DeepPurpose-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e713e03bd0b24c71332ea79239a9103bff338c621ea9c6b6125c3169ec7f1a99",
          "md5": "ec1bc82c393996e83b925b4327d4cbda",
          "sha256": "fef15fd9906cadfe85224249753abe82f477354533e3cb89f7e2a3b92369ee6f"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ec1bc82c393996e83b925b4327d4cbda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 156753,
        "upload_time": "2021-05-03T18:24:03",
        "upload_time_iso_8601": "2021-05-03T18:24:03.261147Z",
        "url": "https://files.pythonhosted.org/packages/e7/13/e03bd0b24c71332ea79239a9103bff338c621ea9c6b6125c3169ec7f1a99/DeepPurpose-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c400e4de10a7d034e290047cbeff50b92924a8e34ba81d6eca9f1bafce630449",
          "md5": "0856d0d8d63704f732bce914e7ba02b9",
          "sha256": "f51f2f12ddcbff2bd2fb445a92b18366616c3e2cb24851a3e3cc8a21a4c79037"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0856d0d8d63704f732bce914e7ba02b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 156767,
        "upload_time": "2021-05-14T22:01:52",
        "upload_time_iso_8601": "2021-05-14T22:01:52.738202Z",
        "url": "https://files.pythonhosted.org/packages/c4/00/e4de10a7d034e290047cbeff50b92924a8e34ba81d6eca9f1bafce630449/DeepPurpose-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "979acda94fab698259f2d86a9068704476f02f731b0d46a34bcf0302399b88b5",
          "md5": "ff144e50a6146beb90d6ba03e2a84593",
          "sha256": "b096ccfa66f0aa0840c9be5992a87fc793ad45ede88e8bfe96b57213a6b9ff28"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ff144e50a6146beb90d6ba03e2a84593",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 156769,
        "upload_time": "2021-05-18T20:37:43",
        "upload_time_iso_8601": "2021-05-18T20:37:43.583811Z",
        "url": "https://files.pythonhosted.org/packages/97/9a/cda94fab698259f2d86a9068704476f02f731b0d46a34bcf0302399b88b5/DeepPurpose-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb45cb1eaa6cf8bb7f9595372fc66232e10b70c5dfc3191a3effc35c3e00d947",
          "md5": "5c651c7dcaca38f2b2f74e522b6fff88",
          "sha256": "a912300c004954d3b8a32d8ca7cec1ebfe021bfa11dbb7f1e653ebe00c124094"
        },
        "downloads": -1,
        "filename": "DeepPurpose-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5c651c7dcaca38f2b2f74e522b6fff88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 158529,
        "upload_time": "2021-10-26T05:12:14",
        "upload_time_iso_8601": "2021-10-26T05:12:14.617344Z",
        "url": "https://files.pythonhosted.org/packages/fb/45/cb1eaa6cf8bb7f9595372fc66232e10b70c5dfc3191a3effc35c3e00d947/DeepPurpose-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb45cb1eaa6cf8bb7f9595372fc66232e10b70c5dfc3191a3effc35c3e00d947",
        "md5": "5c651c7dcaca38f2b2f74e522b6fff88",
        "sha256": "a912300c004954d3b8a32d8ca7cec1ebfe021bfa11dbb7f1e653ebe00c124094"
      },
      "downloads": -1,
      "filename": "DeepPurpose-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5c651c7dcaca38f2b2f74e522b6fff88",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 158529,
      "upload_time": "2021-10-26T05:12:14",
      "upload_time_iso_8601": "2021-10-26T05:12:14.617344Z",
      "url": "https://files.pythonhosted.org/packages/fb/45/cb1eaa6cf8bb7f9595372fc66232e10b70c5dfc3191a3effc35c3e00d947/DeepPurpose-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}