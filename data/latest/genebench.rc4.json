{
  "info": {
    "author": "Radu Angelescu",
    "author_email": "raduangelescu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![Image logo](https://raw.githubusercontent.com/raduangelescu/GeneBench/main/logo.svg)\n\n## Overview\n\nGene Bench is a benchmark-ing framework used in analyzing methods that detect differentially expressed genes from biological samples.\nBesides being a benchmarking framework it also contains some commonly used Differential genes detection algorithms:\n\n  - [LIMMA](https://bioconductor.org/packages/release/bioc/html/limma.html) (R implementation)\n  - [Characteristic Direction Py](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-15-79) (a python characteristic direction that is good for big data, implementation using Nipals PCA)\n  - [Characteristic Direction](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-15-79) (R implementation **crashes on large data** with out of memory because of normal PCA )\n  - [T-Test](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html)\n  - [SAM](https://cran.r-project.org/web/packages/samr/index.html)\n\nOur own methods based on machine learning:\n  - **MIDGET-xgb** (2 variations)\n  - **MIDGET-neural** (6 variations)\nand a baseline random algorithm.\n\nThe framework also provides a base for calling methods from R (because most medical laboratories use R for statistical analysis). \n\nWe provide already implemented evaluation metrics:\n - **Kolmogorov** based visual evaluation\n - **F1** score\n - **ROC/AUC** curve analysis\n\nStorage providers:\n - [mongodb](https://www.mongodb.com/) usefull for sharing amongst resourcers and fully configurable \n - filesystem (via json files and folder structure)\n\nAnd a silico data generator that is based on an easy to understand linear method.\n\nYou can also provide your own implementations for\n - methods\n - evaluation metrics\n - silico data generators\n - storage providers\n\nYou may configure any combination of evaluation metrics, storage providers, silico data generators and methods for your analysis and benchmark.\n**Note 0** Please cites this framework in your papers if you plan to use it.\n**Note 1** The package was tested on Linux Ubuntu 20.0. It should work in Windows too but you need to install dependencies with the normal installers. \n**Note 2** If you want good performance in evaluating MIDGET Neural methods we advise you use a GPU with CUDA suport and [do the necessary steps to activate it with tensor flow](https://www.tensorflow.org/install/gpu)\n\n## Installation\nInstall using pip \n```bashs\npip install genebench\n```\n\nor install latest from github\n\n```bash\ngit clone https://github.com/raduangelescu/GeneBench.git\npython setup.py install\n\n```\n\n## Usage\nThe most important thing to note is that you need to have a correct config json file that describes what you are trying to do. The next sections will explain the code and config needed to access the framework features.\nFor easy usage, you may find the below examples in [this folder](https://github.com/raduangelescu/GeneBench/tree/main/examples)\n\n### Quick start\nTo get the default working you only need to install the package.\n- [Install MongoDb](https://docs.mongodb.com/manual/installation/)\n```bash\nwget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -\nsudo apt-get install gnupg\nwget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list\nsudo apt-get update\nsudo apt-get install -y mongodb-org\n```\n- Install R for the R-based methods (SAM, Limma)\n```bash\nsudo apt install r-base\n```\n\n-  Open R and Install packages\n\t- [Install Bioconductor](https://www.bioconductor.org/install/)\n\n\t```r\n \t\tinstall.packages(\"BiocManager\")\n\t```\n\n\t- [Install LIMMA in R](https://bioconductor.org/packages/release/bioc/html/limma.html)\n\t```r\n   \t\tBiocManager::install(\"limma\")\n\t```\n\t- [Install SAM in R and impute](http://www.sthda.com/english/articles/2-r/1-install-samr-package/)\n\t```r\n\t\tinstall.packages('samr')\n\t\tsource(\"http://bioconductor.org/biocLite.R\")\n\t\tbiocLite(\"impute\")\n\t```\n- Copy [this config.json](https://raw.githubusercontent.com/raduangelescu/GeneBench/main/examples/config.json) into your project folder\n- make a folder named \"data\"  in your project folder\n- Run startup function\n```python\nfrom genebench.startup import setup_default_data\nsetup_default_data(\"config.json\") \n```\n### Storage config\nAny benchmark run via this framework needs storage. You may use any of the storage providers implemented in the framework, or both. \nThe config file needs the **\"Storage\"** section in order to know how you will set and read the data. The below config is an example of using both providers.\n```json\n\"Storage\":{\n\t\"providers\":{\n\t\t\"mongo\": {\n\t\t\t\"host\":\"localhost\",\n\t\t\t\"port\":27017,\n\t\t\t\"anon\":true,\n\t\t\t\"user\":\"\",\n\t\t\t\"password\":\"\",\n\t\t\t\"database_name\":\"gene_expression_bench_test\",\n\t\t\t\"validation_collection_name\":\"validation\",\n\t\t\t\"geo_data_collection_name\":\"geo\",\n\t\t\t\"results_collection_name\":\"results\"\n\t\t},\n\t\t\"filesystem\": {\n\t\t\t\"base_path\":\"data/db_test\",\n\t\t\t\"validation_folder\":\"validation\",\n\t\t\t\"geo_folder\": \"geo\",\n\t\t\t\"results_folder\": \"results\"\n\t\t}\n\t},\n\t\"load_order\":[\n\t\t\"filesystem\",\n\t\t\"mongo\"\n\t]\n}\n```\nIf you only need to use one provider just remove the other from the above config form \"providers\" and \"load_order\". In most cases, when you don't have any mongodb installed you will probably only want to use the filesystem provider which should work locally.\n\n### Generating silico data\nThe silico data generator tries to mimick a biological experiment: it will generate fake genes and fake perturbation factors and then create links between them. Based on the above biological network it will use silico providers to generate the fake data.\n\nTo generate the silico data you need to have the **\"SilicoData\"** and **\"SilicoGenerators\"** config sections in your config.json file\n```json\n\"SilicoData\":{\n\t\"num_genes\":10000,\n\t\"num_experiments\":100,\n\t\"num_pfs\":100\n},\n\"SilicoGenerators\":{\n\t\"silico.linear\":{\n\t\t\"source\": \"silico_linear\",\n\t\t\"module_name\": \"genebench.silico.generators.linear\",\n\t\t\"class_name\":\"LinearDataGenerator\",\n\t\t\"params\": {\n\t\t\t\t\t\"diff_factor\":3.0,\n\t\t\t\t\t\"noise_factor\":0.5,\n\t\t\t\t\t\"num_replicates\":3\n\t\t}\n\t}\n}\n```\n\nAfter providing the correct config file you only need to run the below code:\n```python\n# examples/silicotest.py \nfrom genebench.generatesilico import GenerateSilicoData\n\ngenerate = GenerateSilicoData(\"config.json\")\ngenerate.run()\n```\nThe generator run will populate the data in the storage provider. The data itself will be in a generic format, the only way to know it was generated by a silico provider is the source name from the config. **Be sure to add an unique source name for all silico generators so you can identify experiments later**\n\n\n### Importing in vivo GEO data\n\nFor this feature you need the **GEOImporter** section in the config file:\nModifying the \"labeling\" section is not advised, and only required if you want to add new GEO data and filter it automatically.\nTo add new GEO input data you may create files similarly to **GEOdatasets_tf_perturbations.json** and add them into the input_data field, more details will be provided in the full documentation.\n```json\n\"GEOImporter\":{\n\t\"data_path\":\"data\",\n\t\"download_retry_count\": 10,\n\t\"download_wait_seconds_before_retry\": 5,\n\t\"geo_cache_folder_name\":\"cache\",\n\t\"input_data\":[\n\t\t{\n\t\t\t\"pf_field\": \"tf\",\n\t\t\t\"name\":\"tf_perturbations\",\n\t\t\t\"file\":\"data/default_experiments/GEOdatasets_tf_perturbations.json\"\n\t\t},\n\t\t{\n\t\t\t\"pf_field\": \"drug\",\n\t\t\t\"name\":\"drug_perturbations\",\n\t\t\t\"file\":\"data/default_experiments/GEOdatasets_drugs_perturbations.json\"\n\t\t}\n\t],\n\t\"labeling\":\n\t{\n\t\t\"control\":[\"control\",\"Control\", \"wild type\", \"wildtype\",\"Wild Type\",\"Wildtype\",\"wild-type\",\"baseline\", \"control virus\",\"uninduced\", \"untreated\", \"0 pM\", \"water\", \"Time of treatment 0 weeks\", \"none\",\"pretreatment\", \"vehicle\", \"control virus\"],\n\t\t\"type\":[\"genotype/variation\",\"disease state\", \"protocol\",\"growth protocol\",\"dose\", \"agent\", \"description\", \"time\"],\n\t\t\"gene_names\":\"IDENTIFIER\",\n\t\t\"no_column_control\":[\"MCF7/BUS, 0 pM\",\"baseline\", \"minus\", \"Resistant\", \"untreated\", \"Untreated\", \"Control\", \"control\", \"nonresponder\", \"resistant\", \"vehicle\", \"saline\",\"0 pM E2\",\"DMS\", \"AO \", \" AG\", \"_Veh_\",\"N1+2\",\"N3+4\",\"N5+6\"],\n\t\t\"no_column_title\": \"title\",\n\t\t\"no_column_accession\": \"geo_accession\"\n\t}\n}\n```\nIt is usually the case that you will not modify this config in a normal run so you can paste it from above, removing comments.\nTo generate and store the experiment data you just run the below code, using whatever file-name your config is to replace 'config.json'.\n```python\n# examples/importgeodata.py\nfrom genebench.geoimporter import GEOImporter\nimporter = GEOImporter('config.json')\nimporter.importGEOData()\n```\n\n### Importing validation data\nTo be able to test if the methods you create/benchmark are better on the set of data, we need to have some validation data. To do this we provided multiple validation sources and a way to import them. \nThe config section needed for this feature is **\"ValidationDataImporter\"**\n\n```json\n\"ValidationDataImporter\":{\n\t\"base_path\":\"data/validation_sources\",\n\t\"sources\":{\n\t\t\"ENCODE\":{\n\t\t\t\"data_file\":\"encode_gene_attribute_matrix.txt\",\n\t\t\t\"dict_file\":\"encode_attribute_list_entries.txt\"\n\t\t},\n\t\t\"CHEA\":{\n\t\t\t\"data_file\":\"chea_gene_attribute_matrix.txt\",\n\t\t\t\"dict_file\":\"chea_attribute_list_entries.txt\"\n\t\t},\n\t\t\"PP INTERACTION\":{\n\t\t\t\"data_file\":\"PPI_interaction.tsv\"\n\t\t},\n\t\t\"PPI STUDY\":{\n\t\t\t\"data_file\":\"PPI_transcription_factors.txt\"\n\t\t},\n\t\t\"DRUG GENE INTERACTION\":{\n\t\t\t\"data_file\":\"drug_gene_interaction_db.tsv\"\n\t\t}\n\n\t}\n}\n```\n\nAnd the coded to import the data:\n\n```python\n# examples/importvalidationdata.py\nfrom genebench.validationdataimporter import ValidationDataImporter\nimporter = ValidationDataImporter('config.json')\nimporter.importValidationData()\n```\n\n### Running benchmarks\nAfter you have all your validation and experiment data in your storage providers (general format) you will now configure the benchmarks you want to run via the **\"AccuracyMetrics\"**, **\"Methods\"** and **\"Benchmark\"** config sections:\n- In **AccuracyMetrics** we configure the metrics we want to generate for all benchmarks. Below we provide an example for using the default provided ones\n```json\n\"AccuracyMetrics\":{\n\t\"output_folder\":\"data/metrics\" ,\n\t\"metrics\":{\n\t\t\"Kolmogorov\": {\n\t\t\t\"name\": \"Kolmogorov\",\n\t\t\t\"module_name\": \"genebench.evaluationmetrics.kolmogorov\",\n\t\t\t\"class_name\":\"Kolmogorov\",\n\t\t\t\"params\":{\n\t\t\t}\n\t\t},\n\t\t\"ROC\": {\n\t\t\t\"name\": \"ROC\",\n\t\t\t\"module_name\": \"genebench.evaluationmetrics.roc\",\n\t\t\t\"class_name\":\"ROC\",\n\t\t\t\"params\":{}\n\t\t},\n\t\t\"F1\": {\n\t\t\t\"name\": \"F1\",\n\t\t\t\"module_name\": \"genebench.evaluationmetrics.f1\",\n\t\t\t\"class_name\":\"F1\",\n\t\t\t\"params\":{}\n\t\t}\n\t}\n}\n```\n-  In **Methods** we add all the methods we want to use for benchmarking: Each entry has: a key by which the program will address the code, module_name: the module in which the method relies, class_name: the actual method class name and a custom config field so you can use parameters in your own method implementation. Below we provide a config that accounts for all our currently supported methods:\n```json\n\"Methods\":{\n\t\"TTest\":{\n\t\t\"module_name\":\"genebench.diffmethods.ttest\",\n\t\t\"class_name\":\"TTest\",\n\t\t\"config\":{}\n\t},\n\t\"LIMMA\":{\n\t\t\"module_name\":\"genebench.diffmethods.limma\",\n\t\t\"class_name\":\"LIMMA\",\n\t\t\"config\":{}\n\t},\n\t\"SAM\":{\n\t\t\"module_name\":\"genebench.diffmethods.sam\",\n\t\t\"class_name\":\"SAM\",\n\t\t\"config\":{}\n\t},\n\t\"Random\":{\n\t\t\"module_name\":\"genebench.diffmethods.random\",\n\t\t\"class_name\":\"Random\",\n\t\t\"config\": {}\n\t},\n\t\"Characteristic direction py\":{\n\t\t\"module_name\":\"genebench.diffmethods.chdirpy\",\n\t\t\"class_name\":\"ChDirPy\",\n\t\t\"config\":{}\n\t},\n\t\"MIDGET Neural[n1]\":{\n\t\t\"module_name\":\"genebench.diffmethods.MIDGET.neural\",\n\t\t\"class_name\":\"MIDGETNeural\",\n\t\t\"config\": {\n\t\t\t\"data_split\": 0.25,\n\t\t\t\"method_name\":\"\",\n\t\t\t\"batch_size\": 40000,\n\t\t\t\"test_size\": 40000,\n\t\t\t\"number_of_epochs\": 1000,\n\t\t\t\"save_point_num_batches\": 10,\n\t\t\t\"model_name\": \"n1\",\n\t\t\t\"output_folder\":\"data/MIDGETNeural\" ,\n\t\t\t\"feature_file\":\"features.pkl\"\n\t\t}\n\t},\n\t\"MIDGET Neural[n2]\":{\n\t\t\"module_name\":\"genebench.diffmethods.MIDGET.neural\",\n\t\t\"class_name\":\"MIDGETNeural\",\n\t\t\"config\": {\n\t\t\t\"data_split\": 0.25,\n\t\t\t\"method_name\":\"\",\n\t\t\t\"batch_size\": 40000,\n\t\t\t\"test_size\": 40000,\n\t\t\t\"number_of_epochs\": 1000,\n\t\t\t\"save_point_num_batches\": 10,\n\t\t\t\"model_name\": \"n2\",\n\t\t\t\"output_folder\":\"data/MIDGETNeural\",\n\t\t\t\"feature_file\":\"features.pkl\"\n\t\t}\n\t},\n\t\"MIDGET Neural[n3]\":{\n\t\t\"module_name\":\"genebench.diffmethods.MIDGET.neural\",\n\t\t\"class_name\":\"MIDGETNeural\",\n\t\t\"config\": {\n\t\t\t\"data_split\": 0.25,\n\t\t\t\"method_name\":\"\",\n\t\t\t\"batch_size\": 40000,\n\t\t\t\"test_size\": 40000,\n\t\t\t\"number_of_epochs\": 1000,\n\t\t\t\"save_point_num_batches\": 10,\n\t\t\t\"model_name\": \"n3\",\n\t\t\t\"output_folder\":\"data/MIDGETNeural\",\n\t\t\t\"feature_file\":\"features.pkl\"\n\t\t}\n\t},\n\t\"MIDGET Neural[n4]\":{\n\t\t\"module_name\":\"genebench.diffmethods.MIDGET.neural\",\n\t\t\"class_name\":\"MIDGETNeural\",\n\t\t\"config\": {\n\t\t\t\"data_split\": 0.25,\n\t\t\t\"method_name\":\"\",\n\t\t\t\"batch_size\": 40000,\n\t\t\t\"test_size\": 40000,\n\t\t\t\"number_of_epochs\": 1000,\n\t\t\t\"save_point_num_batches\": 10,\n\t\t\t\"model_name\": \"n4\",\n\t\t\t\"output_folder\":\"data/MIDGETNeural\",\n\t\t\t\"feature_file\":\"features.pkl\"\n\t\t}\n\t},\n\t\"MIDGET Neural[n5]\":{\n\t\t\"module_name\":\"genebench.diffmethods.MIDGET.neural\",\n\t\t\"class_name\":\"MIDGETNeural\",\n\t\t\"config\": {\n\t\t\t\"data_split\": 0.25,\n\t\t\t\"method_name\":\"\",\n\t\t\t\"batch_size\": 40000,\n\t\t\t\"test_size\": 40000,\n\t\t\t\"number_of_epochs\": 1000,\n\t\t\t\"save_point_num_batches\": 10,\n\t\t\t\"model_name\": \"n5\",\n\t\t\t\"output_folder\":\"data/MIDGETNeural\",\n\t\t\t\"feature_file\":\"features.pkl\"\n\t\t}\n\t},\n\t\"MIDGET Neural[n6]\":{\n\t\t\"module_name\":\"genebench.diffmethods.MIDGET.neural\",\n\t\t\"class_name\":\"MIDGETNeural\",\n\t\t\"config\": {\n\t\t\t\"data_split\": 0.25,\n\t\t\t\"method_name\":\"\",\n\t\t\t\"batch_size\": 40000,\n\t\t\t\"test_size\": 40000,\n\t\t\t\"number_of_epochs\": 1000,\n\t\t\t\"save_point_num_batches\": 10,\n\t\t\t\"model_name\": \"n6\",\n\t\t\t\"output_folder\":\"data/MIDGETNeural\",\n\t\t\t\"feature_file\":\"features.pkl\"\n\t\t}\n\t},\n\t\"MIDGET XGB[xgb1]\":{\n\t\t\"module_name\":\"genebench.diffmethods.MIDGET.xgb\",\n\t\t\"class_name\":\"MIDGETXgBoost\",\n\t\t\"config\": {\n\t\t\t\"feature_file\":\"features.pkl\",\n\t\t\t\"data_split\": 0.25,\n\t\t\t\"num_round\": 1000,\n\t\t\t\"model_name\": \"xgb1\",\n\t\t\t\"model_folder\": \"data/MIDGETXGB\",\n\t\t\t\"param\": {\n\t\t\t\t\"verbosity\": 2,\n\t\t\t\t\"nthread\": 8,\n\t\t\t\t\"max_depth\":6, \n\t\t\t\t\"eta\":0.2, \n\t\t\t\t\"objective\":\"binary:logistic\"\n\t\t\t}\n\t\t}\n\t},\n\t\"MIDGET XGB[xgb2]\":{\n\t\t\"module_name\":\"genebench.diffmethods.MIDGET.xgb\",\n\t\t\"class_name\":\"MIDGETXgBoost\",\n\t\t\"config\": {\n\t\t\t\"feature_file\":\"features.pkl\",\n\t\t\t\"data_split\": 0.25,\n\t\t\t\"num_round\": 1000,\n\t\t\t\"model_name\": \"xgb2\",\n\t\t\t\"model_folder\": \"data/MIDGETXGB\",\n\t\t\t\"param\":{\n\t\t\t\t\"verbosity\": 2,\n\t\t\t\t\"nthread\": 8,\n\t\t\t\t\"max_depth\":12, \n\t\t\t\t\"lambda\": 0.7,\n\t\t\t\t\"eta\":0.2, \n\t\t\t\t\"objective\":\"binary:logistic\"\n\t\t\t}\n\t\t}\n\t}\n},\n```\n- in **Benchmark** we configure the method groups for which we want to generate the benchmarks and evaluations by using the **method_groups** field. In the **runs** field we specify which validation set and data set to use with on the provided method groups. Below you may find an example config which runs tests on 4 method groups separating **silico data** from **transcription factor** data and **drug-gene data**.\n```json\n\"Benchmark\":{\n\t\"method_groups\":\n\t\t{\n\t\t\t\"classic\":{\n\t\t\t\t\"name\":\"Transcription factor benchmark [classic]\",\n\t\t\t\t\"methods\":[\n\t\t\t\t\t\"TTest\",\n\t\t\t\t\t\"LIMMA\",\n\t\t\t\t\t\"SAM\",\n\t\t\t\t\t\"Random\",\n\t\t\t\t\t\"Characteristic direction py\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"original_neural\":{\n\t\t\t\t\"name\":\"Transcription factor benchmark [original neural]\",\n\t\t\t\t\"methods\":[\n\t\t\t\t\t\"MIDGET Neural[n1]\",\n\t\t\t\t\t\"MIDGET Neural[n2]\",\n\t\t\t\t\t\"MIDGET Neural[n3]\",\n\t\t\t\t\t\"MIDGET Neural[n4]\",\n\t\t\t\t\t\"MIDGET Neural[n5]\",\n\t\t\t\t\t\"MIDGET Neural[n6]\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"original_xgb\":{\n\t\t\t\t\"name\":\"Transcription factor benchmark [original xgb]\",\n\t\t\t\t\"methods\":[\n\t\t\t\t\t\"MIDGET XGB[xgb1]\",\n\t\t\t\t\t\"MIDGET XGB[xgb2]\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"best_methods\":{\n\t\t\t\t\"name\":\"Transcription factor benchmark [original xgb]\",\n\t\t\t\t\"methods\":[\n\t\t\t\t\t\"Characteristic direction py\",\n\t\t\t\t\t\"MIDGET XGB[xgb2]\",\n\t\t\t\t\t\"MIDGET Neural[n2]\",\n\t\t\t\t\t\"MIDGET Neural[n3]\",\n\t\t\t\t\t\"LIMMA\",\n\t\t\t\t\t\"TTest\"\n\t\t\t\t]\n\t\t\t}\n\t},\n\t\"runs\": [\n\t\t{\n\t\t\t\"name\":\"Silico\",\n\t\t\t\"data_sources\":[\"silico_linear\"],\n\t\t\t\"validation_sets\":[\"silico\"],\n\t\t\t\"method_group_ids\":[ \"classic\",\"original_neural\",\"original_xgb\", \"best_methods\"]\n\t\t},\n\t\t{\n\t\t\t\"name\":\"Transcription Factor\",\n\t\t\t\"data_sources\":[\"tf_perturbations\"],\n\t\t\t\"validation_sets\":[\n\t\t\t\t\"tf_encode\",\n\t\t\t\t\"tf_chea\",\n\t\t\t\t\"pp_interaction\",\n\t\t\t\t\"ppis_study\",\n\t\t\t\t\"all\"],\n\t\t\t\"method_group_ids\":[ \"classic\",\"original_neural\",\"original_xgb\",\"best_methods\"]\n\t\t},\n\t\t{\n\t\t\t\"name\":\"Drugs Gene Interaction\",\n\t\t\t\"data_sources\":[\"drug_perturbations\"],\n\t\t\t\"validation_sets\":[\"drug_gene_interaction\"],\n\t\t\t\"method_group_ids\":[ \"classic\",\"original_neural\",\"original_xgb\", \"best_methods\"]\n\t\t}\n\n\t]\n}\n```\n\n### Providing custom implementations\n- **Custom Method**\nTo use your own method with this framework you need to inherit from DiffMethod located in the diffmethods.base module\n\n```python\n# example for a random method implementation\nimport numpy as np\nfrom genebench.datatypes import GeneDiffInput, GeneMethodResult\nfrom genebench.diffmethods.base.diffmethod import DiffMethod\n\n\nclass CustomRandom(DiffMethod):\n\tdef setup(self, config):\n        # this code only runs once, used for configuration\n\t\tpass\n\n    def train(self, input: GeneDiffInput):\n\t\t# this code is used to train your method\n        pass\n\n    def run(self, input: GeneDiffInput) -> GeneMethodResult:\n\t\t# this is the actual method\n        rankings = np.random.rand(len(input.genes))\n        genes, scores = self.sort(input.genes, rankings)\n        return GeneMethodResult.from_separate_lists(genes, scores)\n  ```\nThen either add method in config specifying the correct module and class name.\n\n- **Custom Metric**\nTo use your own method with this framework you need to inherit from Metric located in the evaluationmetrics.base module\n\n```python\n# example of custom metric implementation\nfrom genebench.evaluationmetrics.base import Metric\nfrom genebench.datatypes import GeneDiffValidation, GeneMethodResult\nfrom genebench.utils import Utils\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import uniform\nfrom sklearn.metrics import f1_score\nimport os\n\n\nclass CustomMetric(Metric):\n\n    def __init__(self, config, output_folder):\n        self.name = \"F1\"\n        self.logger = Utils.get_logger(\"custom\")\n        self.config = config\n        self.output_folder = output_folder\n        self.custom_method = {}\n        pass\n\n\tdef __calculate_score(y_real, y_pred):\n\t\treturn y_real - y_pred\n\n    def add(self,\n            pf,\n            method_name,\n            validation: GeneDiffValidation,\n            result: GeneMethodResult):\n\t\t# this method is called for each experiment\n        if validation.source not in self.custom_method:\n            self.custom_method[validation.source] = {}\n\n        custom_method = self.custom_method[validation.source]\n        pf = pf.lower()\n        self.logger.info(f\"perturbation factor: {pf}\")\n        # we collect all results\n        if method_name not in custom_method:\n            custom_method[method_name] = {'y': [], 'pred': []}\n\n        result_data = result.result\n        valid_data = validation.data\n        if pf not in valid_data:\n            self.logger.error(f\"{pf} not found in set {validation.source}\")\n            return\n\n        genes = valid_data[pf]\n        valid_genes = set([x.lower() for x in genes])\n        real_class = []\n        pred = []\n        for gene_entry in result_data:\n            gene_name = gene_entry.gene_name.lower()\n            if gene_name in valid_genes:\n                real_class.append(1)\n            else:\n                real_class.append(0)\n            if gene_entry.score >= 0.5:\n                pred.append(1)\n            else:\n                pred.append(0)\n        custom_method[method_name]['y'].extend(real_class)\n        custom_method[method_name]['pred'].extend(pred)\n\n    def evaluate(self, group_name):\n\t\t# this method is called and aggregates all experiment results\n\t\t# to generate final score per data set\n        Utils.create_folder_if_not_exist(self.output_folder)\n        save_path = os.path.join(self.output_folder, self.name)\n        Utils.create_folder_if_not_exist(save_path)\n\n        for validation_source in self.method_f1.keys():\n            custom_method = self.custom_method[validation_source]\n            methods = []\n            for method_name, _val in custom_method.items():\n                pred = _val['pred']\n                pred = np.nan_to_num(pred, True, 0.0, 1.0, 0.0)\n                val = self.__calculate_score(_val['y'], pred)\n                methods.append(f\"{method_name} Custom Score: {f1:.4f}\")\n            name = f\"{group_name}_{validation_source}\"\n            path_file = f\"{name}.txt\"\n            path_method = os.path.join(save_path,\n                                       path_file)\n            with open(path_method, mode='wt', encoding='utf-8') as out_scores:\n                out_scores.write('\\n'.join(methods))\n        self.custom_method = {}\n        self.logger.info(\"done\")\n```\n\nThen add metric in config specifying the correct module and class name.\nFeel free to check the codebase in the evaluationmetrics folder to see example implementations\n\n- **Custom silico generator**\nTo use your own silico generator with this framework you need to inherit from SilicoDataGenerator located in the silico.generators.base module:\n\n```python\n# example of custom silico data generator\nfrom numpy.lib.function_base import diff\nfrom genebench.silico.generators.base import SilicoDataGenerator\nfrom genebench.datatypes import GeneData\nfrom genebench.datatypes import GeneDiffValidation\nfrom genebench.datatypes import GeoData\nfrom genebench.utils import Utils\nimport numpy as np\nimport random\n\n# this structure will contain the config from the \"config\" field\n# of the generator entry \nclass CustomDataGeneratorParam():\n    def __init__(self,\n                 diff_factor,\n                 noise_factor,\n                 num_replicates):\n        self.diff_factor = diff_factor\n        self.noise_factor = noise_factor\n        self.num_replicates = num_replicates\n        pass\n\n# this example is the actual LinearDataGenerator\nclass CustomDataGenerator(SilicoDataGenerator):\n    def __init__(self, config):\n        super().__init__(config)\n        self.param = LinearDataGeneratorParam(**self.config.params)\n        self.logger = Utils.get_logger('LinearDataGenerator')\n        pass\n\n    def generate_single(self, validation_data, id, num_genes) -> GeoData:\n        all_tfs = list(validation_data.data.keys())\n        picked_tf = random.choice(all_tfs)\n        perturbed_genes = set(validation_data.data[picked_tf])\n        genes = Utils.get_random_gene_names(num_genes)\n        mask = []\n        for gene in genes:\n            if gene in perturbed_genes:\n                mask.append(1)\n            else:\n                mask.append(0)\n        mask = np.array(mask)\n        df_factor = self.param.diff_factor\n        validation = []\n        for index, mask_value in enumerate(mask.tolist()):\n            if mask_value == 1:\n                validation.append(genes[index])\n        num_replicates = self.param.num_replicates\n        mask = np.array([mask])\n        mask = np.repeat(mask, num_replicates, axis=0).T\n        control = np.random.rand(num_genes, num_replicates)\n        effect = np.random.rand(num_genes, num_replicates) * df_factor\n        perturbation = control + np.multiply(mask, effect)\n\n        gene_data = GeoData({\n            \"name\": f\"CUSTOM_SIL_{id}\",\n            \"perturbed_series_names\": ['fakeseries'],\n            \"control_series_names\": ['fakeseries'],\n            \"extra_info\": {\"none\": \"none\"},\n            \"perturbed_array\": perturbation.tolist(),\n            \"control_array\": control.tolist(),\n            \"source\": self.config.source,\n            \"genes\": genes,\n            \"pf\": picked_tf\n        })\n\n        return gene_data\n\n    def generate_experiments(self,\n                             validation_data: GeneDiffValidation,\n                             num_experiments,\n                             num_genes):\n        experiments = []\n        for id in range(0, num_experiments):\n            experiments.append(self.generate_single(validation_data,\n                                                    id,\n                                                    num_genes))\n        return experiments\n```\n- **Training MIDGET and benching**\n  To do this you may check the train.py file in the examples folder. Note that training and benching may take a whole day with the default configurations.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/raduangelescu/GeneBench",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "genebench",
    "package_url": "https://pypi.org/project/genebench/",
    "platform": "",
    "project_url": "https://pypi.org/project/genebench/",
    "project_urls": {
      "Bug Tracker": "https://github.com/raduangelescu/GeneBench/issues",
      "Homepage": "https://github.com/raduangelescu/GeneBench"
    },
    "release_url": "https://pypi.org/project/genebench/0.0.4/",
    "requires_dist": [
      "GEOparse",
      "matplotlib",
      "numpy (==1.19.2)",
      "pandas",
      "pymongo",
      "rpy2",
      "scipy",
      "sklearn",
      "tensorflow-gpu",
      "xgboost"
    ],
    "requires_python": ">=3.8",
    "summary": "Benchmark-ing framework used in analyzing methods that detect deferentially expressed genes from biological samples",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9672327,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae93e21a982f1aa4fe0a935d9754a0eb1167b9364b7d377aff710b279dd624b1",
          "md5": "7d2a70ac810c28c80976ba388b466df9",
          "sha256": "dfd09444db589fe66809a805a432c2c0f28bedfaf7b591d1c057e972992685ef"
        },
        "downloads": -1,
        "filename": "genebench-0.0.1-py3.8.egg",
        "has_sig": false,
        "md5_digest": "7d2a70ac810c28c80976ba388b466df9",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": ">=3.8",
        "size": 101962,
        "upload_time": "2021-02-28T15:57:12",
        "upload_time_iso_8601": "2021-02-28T15:57:12.803458Z",
        "url": "https://files.pythonhosted.org/packages/ae/93/e21a982f1aa4fe0a935d9754a0eb1167b9364b7d377aff710b279dd624b1/genebench-0.0.1-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cd36b1df50e2f28105003c19f1bb1331156827c71045c7343bb05d339ce1e19",
          "md5": "c8bbe6e1a0c9a5f7b6cd8d76fa171f9d",
          "sha256": "a47a520a3d3e439d745464a26c5da767f3289c8d29691a3d6b84d1649d41aede"
        },
        "downloads": -1,
        "filename": "genebench-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8bbe6e1a0c9a5f7b6cd8d76fa171f9d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 57769,
        "upload_time": "2021-02-28T15:57:10",
        "upload_time_iso_8601": "2021-02-28T15:57:10.828130Z",
        "url": "https://files.pythonhosted.org/packages/6c/d3/6b1df50e2f28105003c19f1bb1331156827c71045c7343bb05d339ce1e19/genebench-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2068a129f457a3a40cb994259991687a7b6ce49dd05cc9ea0ecce144ea583e8",
          "md5": "9bc99ae139a8ca6b4504da054b606980",
          "sha256": "48ca3692b4caf91a0791702b5aa0639187f5a0a9fec09fedf504c824b90f2fe3"
        },
        "downloads": -1,
        "filename": "genebench-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9bc99ae139a8ca6b4504da054b606980",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 41901,
        "upload_time": "2021-02-28T15:57:13",
        "upload_time_iso_8601": "2021-02-28T15:57:13.905305Z",
        "url": "https://files.pythonhosted.org/packages/b2/06/8a129f457a3a40cb994259991687a7b6ce49dd05cc9ea0ecce144ea583e8/genebench-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54b1214f675313bd4ca9b0bdd5f3d5b85d7cfe3a566d0c97acd9e89bb8e06ad5",
          "md5": "bde384634ac2875e7ed819aa41b19a6c",
          "sha256": "5ce911d02267e90d5477943799a4ffd2123f5f951b9beda6d145155017891da7"
        },
        "downloads": -1,
        "filename": "genebench-0.0.2-py3.8.egg",
        "has_sig": false,
        "md5_digest": "bde384634ac2875e7ed819aa41b19a6c",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": ">=3.8",
        "size": 101996,
        "upload_time": "2021-02-28T15:57:15",
        "upload_time_iso_8601": "2021-02-28T15:57:15.618184Z",
        "url": "https://files.pythonhosted.org/packages/54/b1/214f675313bd4ca9b0bdd5f3d5b85d7cfe3a566d0c97acd9e89bb8e06ad5/genebench-0.0.2-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb1954ae5db91e028bc7c296daeeab77f513b2254d14ea5629b64e7eeaf93e97",
          "md5": "24bfcda3cc64c92dde11bab8923758af",
          "sha256": "4bef3611552f23554026e780786ae0038a68ca97d77f06e2b2d83b1466acbd46"
        },
        "downloads": -1,
        "filename": "genebench-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24bfcda3cc64c92dde11bab8923758af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 57771,
        "upload_time": "2021-02-28T15:58:27",
        "upload_time_iso_8601": "2021-02-28T15:58:27.220086Z",
        "url": "https://files.pythonhosted.org/packages/bb/19/54ae5db91e028bc7c296daeeab77f513b2254d14ea5629b64e7eeaf93e97/genebench-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36f3fcfe6ebd8c3d15d8690deaefb449f30fb608f07628970b5763ccfcc4c7f3",
          "md5": "90d482a25b5d5f16678c75e2f04fd4f0",
          "sha256": "546b055fe7123ceb3a828a701264a375648c394ca3d92c264ba6f17d12f36403"
        },
        "downloads": -1,
        "filename": "genebench-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "90d482a25b5d5f16678c75e2f04fd4f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 41900,
        "upload_time": "2021-02-28T15:58:31",
        "upload_time_iso_8601": "2021-02-28T15:58:31.215745Z",
        "url": "https://files.pythonhosted.org/packages/36/f3/fcfe6ebd8c3d15d8690deaefb449f30fb608f07628970b5763ccfcc4c7f3/genebench-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d330e4279547ff55387b773584a637706210cffea181ab188410b8a41009484",
          "md5": "ab65d8939ba524c2a2d458c8c5f33314",
          "sha256": "fb523d1b09af58abaab7e05fb4f22fe12bf1e19c94b4b8255804593989fa4c50"
        },
        "downloads": -1,
        "filename": "genebench-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab65d8939ba524c2a2d458c8c5f33314",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 57908,
        "upload_time": "2021-03-05T05:47:55",
        "upload_time_iso_8601": "2021-03-05T05:47:55.401053Z",
        "url": "https://files.pythonhosted.org/packages/3d/33/0e4279547ff55387b773584a637706210cffea181ab188410b8a41009484/genebench-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77d339e136f75eed06aa26d6c42bf20307c9f6db5abb42474d60544f1b79fbd8",
          "md5": "c7de2a5e20554a509bba4a948bf1f1a1",
          "sha256": "83b50f291dda36e7cb348882bfc22116a69c5a58b6ea300c16a337de29372859"
        },
        "downloads": -1,
        "filename": "genebench-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c7de2a5e20554a509bba4a948bf1f1a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 42134,
        "upload_time": "2021-03-05T05:47:57",
        "upload_time_iso_8601": "2021-03-05T05:47:57.161751Z",
        "url": "https://files.pythonhosted.org/packages/77/d3/39e136f75eed06aa26d6c42bf20307c9f6db5abb42474d60544f1b79fbd8/genebench-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d330e4279547ff55387b773584a637706210cffea181ab188410b8a41009484",
        "md5": "ab65d8939ba524c2a2d458c8c5f33314",
        "sha256": "fb523d1b09af58abaab7e05fb4f22fe12bf1e19c94b4b8255804593989fa4c50"
      },
      "downloads": -1,
      "filename": "genebench-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab65d8939ba524c2a2d458c8c5f33314",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 57908,
      "upload_time": "2021-03-05T05:47:55",
      "upload_time_iso_8601": "2021-03-05T05:47:55.401053Z",
      "url": "https://files.pythonhosted.org/packages/3d/33/0e4279547ff55387b773584a637706210cffea181ab188410b8a41009484/genebench-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77d339e136f75eed06aa26d6c42bf20307c9f6db5abb42474d60544f1b79fbd8",
        "md5": "c7de2a5e20554a509bba4a948bf1f1a1",
        "sha256": "83b50f291dda36e7cb348882bfc22116a69c5a58b6ea300c16a337de29372859"
      },
      "downloads": -1,
      "filename": "genebench-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c7de2a5e20554a509bba4a948bf1f1a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 42134,
      "upload_time": "2021-03-05T05:47:57",
      "upload_time_iso_8601": "2021-03-05T05:47:57.161751Z",
      "url": "https://files.pythonhosted.org/packages/77/d3/39e136f75eed06aa26d6c42bf20307c9f6db5abb42474d60544f1b79fbd8/genebench-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}