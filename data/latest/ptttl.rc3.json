{
  "info": {
    "author": "Erik Nyquist",
    "author_email": "eknyquist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "Polyphonic Tone Transfer Language\n#################################\n\n``ptttl`` is a command-line utility for converting PTTTL and\n`RTTTL <https://en.wikipedia.org/wiki/Ring_Tone_Transfer_Language>`_ files to\n.wav audio files. `ptttl` also provides an API for parsing PTTTL and\n`RTTTL <https://en.wikipedia.org/wiki/Ring_Tone_Transfer_Language>`_ files to convert them\ninto usable musical data.\n\nThe Polyphonic Tone Text Transfer Language (PTTTL) is a way to describe polyphonic\nmelodies, and is a superset of Nokia's\n`RTTTL <https://en.wikipedia.org/wiki/Ring_Tone_Transfer_Language>`_ format, extending\nit to enable polyphony and vibrato.\n\n\nAPI documentation\n#################\n\nAPI documentation `can be found here <https://ptttl.readthedocs.io/>`_\n\n\nInstall\n#######\n\nInstall from pip\n\n::\n\n    pip install -r ptttl\n\n\nUsage\n#####\n\nConverting PTTTL/RTTTL files to .wav files from the command line\n================================================================\n\n::\n\n   python -m ptttl input.ptttl -f output.wav\n\nRun ``python -m ptttl -h`` to see available options.\n\n\nParsing PTTTL/RTTTL files in a python script\n============================================\n\n::\n\n   >>> from ptttl.parser import PTTTLParser\n   >>> with open('input.pttl', 'r') as fh:\n   ...     ptttl_source = fh.read()\n   ...\n   >>> parser = PTTTLParser()\n   >>> ptttl_data = parser.parse(ptttl_source)\n   >>> ptttl_data\n   PTTTLData([PTTTLNote(pitch=195.9977, duration=0.5625), PTTTLNote(pitch=195.9977, duration=0.2812), ...], ...)\n\n\nConverting PTTTL/RTTTL files to .wav in a python script\n=======================================================\n\n::\n\n   >>> from ptttl.audio import ptttl_to_wav\n   >>> with open('input.pttl', 'r') as fh:\n   ...     ptttl_source = fh.read()\n   ...\n   >>> ptttl_to_wav(ptttl_source, 'output.wav')\n\nWhy?\n####\n\nI needed a good way to store simple tones and melodies for some project.\nRTTTL looked pretty good but only works for monophonic melodies.\nI needed polyphony.\n\nPTTTL format\n############\n\nValid RTTTL strings are also valid PTTTL strings. A parser that properly handles\nPTTTL can also handle RTTTL.\n\nA PTTTL string is made up of three colon-seperated sections; **name** section,\n**default values** section, and **data** section.\n\nWhitespace characters, empty lines, and lines beginning with a \"#\" character\nare ignored.\n\nThe initial \"name\" section is intended to contain the name of the ringtone\nin the original RTTTL format. PTTTL requires this field to be present, to\nmaintain backwards compatibility with RTTTL, but places no constraints on its\ncontents.\n\n*default values* section\n========================\n\nThe very first statement is the *default value* section and is the same as\nthe section of the same name from the RTTTL format.\n\n::\n\n  b=123, d=8, o=4, f=7, v=10\n\n* *b* - beat, tempo: tempo in BPM (Beats Per Minute)\n* *d* - duration: default duration of a note if none is specified\n* *o* - octave: default octave of a note if none is specified\n* *f* - frequency: default vibrato frequency if none is specified, in Hz\n* *v* - variance: default vibrato variance from the main pitch if none is specified, in Hz\n\n*data* section\n==============\n\nThe PTTTL data section is just like the RTTTL data section, in that a melody\nconsists of multiple comma-seperated notes to be played sequentially. *Unlike*\nRTTTL, PTTTL allows multiple melodys to be defined, separated by the vertical\npipe character ``|``, all of which will be played in unison.\n\nThe format of a note is identical to that described by the RTTTL format. Each\nnote includes, in sequence; a duration specifier, a standard music note, either\na, b, c, d, e, f or g (optionally followed by '#' or 'b' for sharps and flats),\nand an octave specifier. If no duration or octave specifier are present, the\ndefault applies.\n\nDurations\n---------\n\nValid values for note duration:\n\n* **1** - whole note\n* **2** - half note\n* **4** - quarter note\n* **8** - eighth note\n* **16** - sixteenth note\n* **32** - thirty-second note\n\nDotted rhythm patterns can be formed by adding a period \".\" either\nafter the note letter (e.g. ``c#.``, or ``c#.5``), or after the octave\nnumber (e.g. ``c#5.``)\n\nNotes\n-----\n\nValid values for note pitch (non case-sensitive):\n\n* **P** - rest or pause\n* **A**\n* **A#** / **Bb**\n* **B** / **Cb**\n* **C**\n* **C#** / **Db**\n* **D**\n* **D#** / **Eb**\n* **E** / **Fb**\n* **F** / **E#**\n* **F#** / **Gb**\n* **G**\n* **G#** / **Ab**\n\nOctave\n------\n\nValid values for note octave are between **0** and **8**.\n\nVibrato\n-------\n\nOptionally, vibrato maybe enabled and configured for an individual note. This is\ndone by adding a ``v`` at the end of the note, and optionally a frequency and variance\nvalue seperated by a ``-`` character. For example:\n\n* ``4c#v`` refers to a C# quarter note with vibrato enabled, using default settings\n* ``4c#v10`` refers to a C# quarter note with vibrato enabled, using a vibrato frequency of 10Hz,\n   and the default value for vibrato variance\n* ``4c#v10-15`` refers to a C# quarter note with vibrato enabled, using a vibrato frequency of 10Hz,\n  with a maximum vibrato variance of 15Hz from the main pitch.\n\nExample\n=======\n\nConsider the following PTTTL string:\n\n::\n\n    # 123 beats-per-minute, default quarter note, default 4th octave\n    Test Melody:\n    b=123, d=4, o=4:\n\n    16c, 8p, 16c | 16e, 8p, 16e | 16g5, 8p, 16g5\n\n\nThis would play 3 sixteenth notes simultaneously (C, octave 4; E, octave 4;\nG, octave 5), followed by an eighth note rest, followed by the same\nthree sixteenth notes again\n\nNote that the above sample is much easier to read if we put each melody on a new\nline and align the notes in columns. This is the recommended way to write\nPTTTL:\n\n::\n\n    # Nicely aligned\n    Test Melody:\n    b=123, d=4, o=4:\n\n    16c,  8p,  16c  |\n    16e,  8p,  16e  |\n    16g5, 8p,  16g5\n\nIn order to keep things readable for large PTTTL files with multiple\nconcurrent tracks, a semicolon character ``;`` can be used further break up\nmelodies into more practical blocks. Just as the veritcal pipe character ``|``\nseperates *concurrent* tracks within a single melody, the semicolon character\nseperates multiple *sequential* melodies within a single data section. Melodies\nseperated by semicolons will be stitched together, one after the other, in the\nfinal output.\n\nThe semicolon does not affect any of the timings or pitch of the generated\ntones; it just makes the PTTTL source a bit more readable. Have a look at this\nlarger PTTTL file, with 4 simultaneous melodies, for a good example of why the\nsemicolon is useful:\n\n::\n\n    All Star but it's a Bach chorale:\n    d=4,o=5,b=40:\n\n    #some   bo  -   dy      once    told    me      the     world   was     go -\n\n    16g3.,  32g3.,  32g3.,  16g3.,  32f#.,  32g.,   32g.,   16a3.,  32g#.,  32g#. |\n    16g.,   32g.,   32g.,   16d.,   32a3.,  32b3.,  32b3.,  16a.,   32b.,   32b.  |\n    16g4.,  32d.6,  32b.,   16g.,   32a.,   32d.,   32d.,   16e.,   32b3.,  32b3. |\n    16g4.,  32b.4,  32d.,   16b.,   32d.,   32d.,   32d.,   16c6.,  32d.,   32d.  ;\n\n\n\n    #-na    roll    me,     I       aint    the     sharp - est     tool    in\n\n    32a.,   32a.,   16g.,   32g.,   32g.,   32g.,   32g.,   32f#.,  32d#4., 32g.  |\n    32c4.,  32c4.,  16e.,   32c.,   32d6.,  32b.,   32d4.,  32d4.,  32f#.,  32e4. |\n    32e.,   32e.,   16e4.,  32c4.,  32b3.,  32c4.,  32b.,   32c.,   32a.,   32b.4 |\n    32e.,   32e.,   16c.,   32e.,   32d.,   32d.,   32d.,   32a.,   32c.,   32e.  ;\n\n\n\n    #the    she  -  ed,             she     was     loo  -  king    kind    of\n\n    32g.,   16c4.,  32a3.,  8p.,    32g.,   32g.,   32g3.,  32g3.,  32g3.,  32f#. |\n    32d4.,  16e.,   32d.,   8p.,    32g4.,  32g4.,  32g.,   32g.,   32g.,   32a3. |\n    32b.4,  16c.,   32f#4., 8p.,    32b3.,  32a3.,  32b4.,  32b.,   32b.,   32a.  |\n    32e.,   16g4.,  32a4.,  8p.,    32d.,   32d.,   32d6.,  32d.,   32d.,   32d.  ;\n\n\n\n    #dumb   with    her     fing  - er      and     her     thumb   in      the\n\n    32g.,   32g.,   32g.,   16a4.,  32b.,   32b.,   32a.,   32a3.,  32g.,   32g.  |\n    32a.,   32b3.,  32e4.,  16e.,   32g#4., 32g#4., 32c.,   32c.,   32b4.,  32c.  |\n    32b3.,  32d.,   32b4.,  16c6.,  32e.,   32e.,   32e.,   32a.,   32c4.,  32c4. |\n    32d.,   32d.,   32e.,   16c6.,  32d.,   32d.,   32a4.,  32e.,   32e.,   32e.  ;\n\n\n\n    #shape  of      an      L       on      her     for  -  head\n\n    16g.,   32g.,   32g.,   16a.,   32g.,   32g.,   16a.,   32a4. |\n    16d.,   32b.,   32d4.,  16f#.,  32e4.,  32e4.,  16a4.,  32d.  |\n    16d6.,  32c4.,  32b.,   16c.,   32b4.,  32b4.,  16f#.,  32e.  |\n    16b3.,  32d.,   32d.,   16d#4., 32e.,   32e.,   16c.,   32e.\n\nUsage\n-----\n\nInstall from pip\n\n::\n\n    pip install -r ptttl\n\nConvert a PTTTL file into audible tones in a .wav file:\n\n::\n\n   python -m ptttl input.ptttl -f output.wav\n\nAPI documentation `can be found here <https://ptttl.readthedocs.io/>`_\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/eriknyquist/ptttl",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ptttl",
    "package_url": "https://pypi.org/project/ptttl/",
    "platform": "",
    "project_url": "https://pypi.org/project/ptttl/",
    "project_urls": {
      "Homepage": "http://github.com/eriknyquist/ptttl"
    },
    "release_url": "https://pypi.org/project/ptttl/1.2.0/",
    "requires_dist": [
      "tones (==1.2.0)"
    ],
    "requires_python": "",
    "summary": "Parses PTTTL/RTTTL musical notation files",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9035325,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44416ea34d2e3a3fd2f793da6aef146dac1a7b89cca7e099f6239af299662052",
          "md5": "a2e561139dd6595c1691a12e47572ec2",
          "sha256": "e47b80c653808cb940002908e38220311b8018de1483ce3a8340ff2279dc855b"
        },
        "downloads": -1,
        "filename": "ptttl-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2e561139dd6595c1691a12e47572ec2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12386,
        "upload_time": "2020-12-01T03:49:31",
        "upload_time_iso_8601": "2020-12-01T03:49:31.838801Z",
        "url": "https://files.pythonhosted.org/packages/44/41/6ea34d2e3a3fd2f793da6aef146dac1a7b89cca7e099f6239af299662052/ptttl-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "705e333179cca77bcbdaafdf389fed8afaf5dd8ca3051c41ab310237d2e41673",
          "md5": "2be4bf24aae1bed13b4ed9f8f174faf5",
          "sha256": "a2e9524e2ae6d041f3225751e579d51ed637f2cee96320a043cb61f480e01a4d"
        },
        "downloads": -1,
        "filename": "ptttl-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2be4bf24aae1bed13b4ed9f8f174faf5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12976,
        "upload_time": "2020-12-01T06:40:43",
        "upload_time_iso_8601": "2020-12-01T06:40:43.507994Z",
        "url": "https://files.pythonhosted.org/packages/70/5e/333179cca77bcbdaafdf389fed8afaf5dd8ca3051c41ab310237d2e41673/ptttl-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bc397bd5c9f9b451dbdb28ffeb6ac597d4e7fa2ab22cc7dcdd15f4e685e0e08",
          "md5": "c8b2d5ab3b4108bd6373c1d697eb1979",
          "sha256": "7fb65afded6cd0b1cb493a1619199b0fbb7f6142b66663acaceeea3b7084e156"
        },
        "downloads": -1,
        "filename": "ptttl-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8b2d5ab3b4108bd6373c1d697eb1979",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14110,
        "upload_time": "2021-01-02T04:45:58",
        "upload_time_iso_8601": "2021-01-02T04:45:58.390377Z",
        "url": "https://files.pythonhosted.org/packages/4b/c3/97bd5c9f9b451dbdb28ffeb6ac597d4e7fa2ab22cc7dcdd15f4e685e0e08/ptttl-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bc397bd5c9f9b451dbdb28ffeb6ac597d4e7fa2ab22cc7dcdd15f4e685e0e08",
        "md5": "c8b2d5ab3b4108bd6373c1d697eb1979",
        "sha256": "7fb65afded6cd0b1cb493a1619199b0fbb7f6142b66663acaceeea3b7084e156"
      },
      "downloads": -1,
      "filename": "ptttl-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8b2d5ab3b4108bd6373c1d697eb1979",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14110,
      "upload_time": "2021-01-02T04:45:58",
      "upload_time_iso_8601": "2021-01-02T04:45:58.390377Z",
      "url": "https://files.pythonhosted.org/packages/4b/c3/97bd5c9f9b451dbdb28ffeb6ac597d4e7fa2ab22cc7dcdd15f4e685e0e08/ptttl-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}