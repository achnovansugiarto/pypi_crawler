{
  "info": {
    "author": "Nathan Juraj Michlo",
    "author_email": "NathanJMichlo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n<p align=\"center\">\n    <h1 align=\"center\">üßô‚Äç‚ôÇÔ∏è Magic The Gathering ‚ú®<br/>üßö‚Äç‚ôÄÔ∏è Dataset üßù‚Äç‚ôÄÔ∏è</h1>\n    <p align=\"center\">\n        With automated multithreaded image downloading,<br/>caching and optional dataset conversion.\n    </p>\n</p>\n\n<br/>\n\n<p align=\"center\">\n    <img align=\"center\" src=\"mtg-vae.png\" width=\"640\"/>\n    <p align=\"center\">\n        <i>Example reconstructions of dataset elements<br/>using a simple <a href=\"https://github.com/nmichlo/disent\">Beta-VAE</a></i>\n    </p>\n</p>\n\n<br/>\n\n## ‚ö°Ô∏è &nbsp;Quickstart\n\n1. Install `mtgdata` with `pip install mtgdata`\n\n2. Prepare or convert the MTG data using the command line with `python -m mtgdata --help`\n\n\n<br/>\n\n## üìã &nbsp;Features\n\n**MTG Card Face Dataset**\n- Automatically scrape and download card images from [Scryfall](https://scryfall.com)\n- Multithreaded download through a randomized proxy list\n- Only return valid images that are not placeholders\n- Return all the faces of a card\n- Normalise data, some images are incorrectly sized\n- **Cached**\n\n**Convert to HDF5**\n- Convert the data to an hdf5 dataset\n- Much faster than raw `jpg` or `png` image accesses\n- Metadata json file allows linking back to original scryfall information.\n\n**Pickle HD5F Dataset Class**\n- Load the converted HDF5 dataset from disk from multiple threads / processes\n\n<br/>\n\n## ‚¨áÔ∏è &nbsp;Download Images\n\n### Command Line\n\nYou can prepare (download) all the `normal` quality [images](https://scryfall.com/docs/api/images)\nfrom the `default` Scryfall [bulk](https://scryfall.com/docs/api/bulk-data) data\nby running `mtgdata/__main__.py`:\n\n```bash\npython3 mtgdata prepare --help\n```\n\nOtherwise, you can instead convert the downloaded images into an hdf5 dataset by running:\n\n```bash\npython3 mtgdata convert --help\n```\n\n\n### Programmatically\n\nAlternatively you can download the images from within python by simply instantiating\nthe `mtgdata.ScryfallDataset` object. Similar arguments can be specified as that of the\ncommand line approach.\n\n```python3\nfrom mtgdata import ScryfallDataset \n\ndata = ScryfallDataset(\n    img_type='border_crop',\n    bulk_type='default_cards',\n    transform=None,\n)\n\n# you can access the dataset elements like usual\n```\n\n### Proxy Issues?\n\nThe scrape logic used to obtain the proxy list for `mtgdata.utils.proxy.ProxyDownloader` will\nprobably go out of date. You can override the *default* scrape logic used by the Dataset download\nlogic  by registering a new scrape function.\n\n```python3\nfrom mtgdata.util.proxy import register_proxy_scraper\nfrom typing import List, Dict\n\n@register_proxy_scraper(name='my_proxy_source', is_default=True)\ndef custom_proxy_scraper(proxy_type: str) -> List[Dict[str, str]]:\n    # you should respect this setting, but we will just ignore it\n    assert proxy_type in ('all', 'http', 'https')\n    # proxies is a list of dictionaries, where each dictionary only has one entry:\n    # - the key is the protocol\n    # - the value is the matching full url\n    return [\n        {'HTTP': 'http://<my-http-proxy>.com'},\n        {'HTTPS': 'https://<my-https-proxy>.com'},\n    ]\n```\n\n<br/>\n\n## üîÑ &nbsp;Convert Images to an HDF5 Dataset\n\n### Command Line\n\nThe images can be convert to hdf5 format by running the file `mtgdata.scryfall_convert`.\nVarious arguments can be specified, please see the argparse arguments at the bottom of\nthe file for more information.\n\n```bash\npython3 mtgdata/scryfall_convert.py\n```\n\nThe resulting data file will have the `data` key corresponding to the images data.\n\n### Programmatically\n\nAlternatively you can convert and generate the hdf5 dataset from within python by simply calling\nthe `mtgdata.scryfall_convert.generate_converted_dataset` function. Similar arguments can be specified\nas that of the command line approach.\n\n```python3\nfrom mtgdata import generate_converted_dataset \n\ngenerate_converted_dataset(\n    out_img_type='border_crop',\n    out_bulk_type='default_cards',\n    save_root='./data/converted/',\n    out_obs_size=(224, 160),\n    convert_speed_test=True,\n)\n```\n\n### Loading The Data\n\nWe provide a helper dataset class for loading this generated file.\n\n```python3\nfrom torch.utils.data import DataLoader\nfrom mtgdata import Hdf5Dataset\n\n\n# this h5py dataset supports pickling, and can be wrapped with a pytorch dataset.\ndata = Hdf5Dataset(\n    h5_path='data/converted/mtg-default_cards-normal-60459x224x160x3.h5',  # name will differ\n    h5_dataset_name='data',\n    transform=None,\n)\n\n# you can wrap the dataset with a pytorch dataloader like usual, and specify more than one worker\ndataloader = DataLoader(data, shuffle=True, num_workers=2, batch_size=64)\n\n# to load the data into memory as a numpy array, you can call `data = data.numpy()`\n# this will take a long time depending on your disk speed and use a lot of memory.\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nmichlo/mtg-dataset",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mtgdata",
    "package_url": "https://pypi.org/project/mtgdata/",
    "platform": "",
    "project_url": "https://pypi.org/project/mtgdata/",
    "project_urls": {
      "Homepage": "https://github.com/nmichlo/mtg-dataset"
    },
    "release_url": "https://pypi.org/project/mtgdata/0.1.0/",
    "requires_dist": [
      "ijson (>=3.0.0)",
      "tqdm (>=4.50.0)",
      "torchvision (>=0.9.0)",
      "cachier (>=1.5.0)",
      "requests (>=2.0.0)",
      "beautifulsoup4 (>=4.0.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "MTG image dataset with automatic image scraping and conversion.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12127296,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a52fb3f3350c6e9b1f5f627d15a3eedf3a00040037d7e9de79fcdb974eb30b8",
          "md5": "8c62faf7f394156eede914349d93c2f8",
          "sha256": "b7e56262e0f268cd68fc18aa62a56551307d5c511e28e975d8a7fe766cfa277b"
        },
        "downloads": -1,
        "filename": "mtgdata-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c62faf7f394156eede914349d93c2f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25375,
        "upload_time": "2021-11-26T00:56:44",
        "upload_time_iso_8601": "2021-11-26T00:56:44.289877Z",
        "url": "https://files.pythonhosted.org/packages/4a/52/fb3f3350c6e9b1f5f627d15a3eedf3a00040037d7e9de79fcdb974eb30b8/mtgdata-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfad1950e166725b41fb4a21e923f9c1f6a1011bfebfea0197ed49d34482bf08",
          "md5": "3967d4a35e10d7fdca3a02a886a72232",
          "sha256": "fdcf798deba0c916f59b37a5837315410e70aac451cebc79437a9da108eb6a40"
        },
        "downloads": -1,
        "filename": "mtgdata-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3967d4a35e10d7fdca3a02a886a72232",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22222,
        "upload_time": "2021-11-26T00:56:45",
        "upload_time_iso_8601": "2021-11-26T00:56:45.767155Z",
        "url": "https://files.pythonhosted.org/packages/cf/ad/1950e166725b41fb4a21e923f9c1f6a1011bfebfea0197ed49d34482bf08/mtgdata-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a52fb3f3350c6e9b1f5f627d15a3eedf3a00040037d7e9de79fcdb974eb30b8",
        "md5": "8c62faf7f394156eede914349d93c2f8",
        "sha256": "b7e56262e0f268cd68fc18aa62a56551307d5c511e28e975d8a7fe766cfa277b"
      },
      "downloads": -1,
      "filename": "mtgdata-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8c62faf7f394156eede914349d93c2f8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25375,
      "upload_time": "2021-11-26T00:56:44",
      "upload_time_iso_8601": "2021-11-26T00:56:44.289877Z",
      "url": "https://files.pythonhosted.org/packages/4a/52/fb3f3350c6e9b1f5f627d15a3eedf3a00040037d7e9de79fcdb974eb30b8/mtgdata-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cfad1950e166725b41fb4a21e923f9c1f6a1011bfebfea0197ed49d34482bf08",
        "md5": "3967d4a35e10d7fdca3a02a886a72232",
        "sha256": "fdcf798deba0c916f59b37a5837315410e70aac451cebc79437a9da108eb6a40"
      },
      "downloads": -1,
      "filename": "mtgdata-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3967d4a35e10d7fdca3a02a886a72232",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 22222,
      "upload_time": "2021-11-26T00:56:45",
      "upload_time_iso_8601": "2021-11-26T00:56:45.767155Z",
      "url": "https://files.pythonhosted.org/packages/cf/ad/1950e166725b41fb4a21e923f9c1f6a1011bfebfea0197ed49d34482bf08/mtgdata-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}