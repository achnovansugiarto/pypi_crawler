{
  "info": {
    "author": "Jos√© Ferreira",
    "author_email": "jose@jpferreira.me",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## About\nA Python package and a CLI that generates catalogs of standard sirens events, which currently supports the following sources:\n- GWTC real data\n- LIGO forecasts\n- LISA forecasts\n- ET forecasts\n\n\n## Table of contents\n- [Installation](#installation)\n  - [Dependencies](#dependencies)\n  - [Stable version](#stable-version)\n  - [Development version](#development-version)\n  - [Post installation](#post-installation)\n- [Generating Catalogs](#generating-catalogs)\n  - [GWTC](#gwtc)\n  - [LIGO](#ligo)\n  - [LISA](#lisa)\n  - [ET](#et)\n- [Other Features](#other-features)\n  - [Saving and loading catalogs](#saving-and-loading-catalogs)\n  - [Plotting catalogs](#plotting-catalogs)\n  - [Changing default cosmological model](#changing-default-cosmological-model)\n  - [Debug](#debug)\n- [Citation](#credits)\n- [Feedback](#feedback)\n- [Release cycle](#release-cycle)\n- [License](#license)\n- [References](#references)\n\n\n## Installation\nTo avoid conflicts the usage of virtual environments is recommended.\n\n### Dependencies\nThis program requires Python version 3, as well as the following packages:\n- [Numpy](https://numpy.org/)\n- [Scipy](https://www.scipy.org/)\n- [Matplotlib](https://matplotlib.org/)\n- [Pandas](https://pandas.pydata.org/)\n\nDependencies are automatically resolved by `pip`.\n\n### Stable version\nThis program can be installed directly from PyPI with:\n```console\n$ pip install gwcatalog\n```\n\n### Development version\nIf you wish to use this program updated to the latests commits, you can install this package directly from the development branch present in this repository:\n```console\n$ pip install -e git+https://github.com/jpmvferreira/gwcatalog.git@dev#egg=gwcatalog\n```\n\nIf instead you wish to make changes to the source code as you are using the program, start by cloning the development branch locally, followed by an installation in editable mode:\n```console\n$ git clone -b dev https://github.com/jpmvferreira/gwcatalog\n$ pip install -e gwcatalog\n```\n\n### Post installation\nYou can either use this program as a Python package or as a CLI.\n\nTo ensure that the Python package is operational, import it as:\n```python\nimport gwcatalog as gwc\n```\n\nTo ensure that the terminal version is working, call the program `gwc` with the help flag:\n```console\n# gwc --help\n```\n\n\n## Generating Catalogs\nIn this section we will show you how you can use this program to generate catalogs of standard siren events, both in Python and in the CLI.\n\n### GWTC\nThe Gravitational Wave Transient Catalog (GWTC) is a cumulative set of gravitational wave transients maintained by the LIGO/Virgo/KAGRA collaboration, available online at [gw-openscience.org](https://www.gw-openscience.org/eventapi/html/GWTC/).\n\nHere we provide the data found in GWTC-1, GWTC-2 and GWTC-3, with the redshifts, luminosity distances and errors coming directly from the previously mentioned database, symmetrizing both the redshift and luminosity distance error and then propagate the redshift error to the luminosity distance.\n\nThese are not necessarily standard siren events, however they can be used for testing purposes.\n\nTo obtain that data simply call the function with no arguments:\n```python\nredshifts, distances, errors = gwc.GWTC()\n```\n\nAnd in the CLI:\n```console\n$ gwc generate GWTC\n```\n\n\n### LIGO\nAlthough currently operational, here we will focus our efforts on generating forecast events for the Laser Interferometer Gravitational-Wave Observatory (LIGO).\n\nThe redshift distribution is given in [[4]](#4), while the error for each measurement is provided in [[5]](#5).\n\nTo generate a mock catalog for LIGO all you need is to specify the number of events.\n\nIf, for example, you wish to generate a mock catalog consisting of 50 events:\n```python\nredshifts, distances, errors = gwc.LIGO(events=50)\n```\n\nBeing the CLI equivalent:\n```console\n$ gwc generate LIGO --events 50\n```\n\nInstead of specifying the events, you can also provide a list of redshifts which you would like your catalog to have. Naturally, this will ignore the underlying redshift distribution. To create a catalog with user specified redshifts:\n```python\nredshifts, distances, errors = gwc.LIGO(redshifts=[0.1, 0.125, 0.15, 0.175])\n```\n\nAnd in the CLI:\n```console\n$ gwc generate LIGO --redshifts '[0.1, 0.125, 0.15, 0.175]'\n```\n\nThere is also an added option to generate an ideal catalog, i.e. a catalog where all events lay on top of the theoretical line for the luminosity distance:\n```python\nredshifts, distances, errors = gwc.LIGO(events=50, ideal=True)\n```\n\nOr in the CLI:\n```console\n$ gwc generate LIGO --events 50 --ideal\n```\n\n\n### LISA\nIn this subsection we will generate standard sirens mock catalogs for the Laser Interferometer Space Antenna (LISA).\n\nThe redshift distribution is provided in [[2]](#2), which corresponds to the mission specification L6A2M5N2, with modifications and errors as outlined in [[1]](#1).\n\nTo generate the LISA mock catalog you must specify two things: A population of massive black hole binaries (MBHB), either \"Pop III\", \"Delay\" or \"No Delay\", and specify either mission lifetime in years or the number of observed events.\n\nFor example if you wish to generate the result of a 4 year mission lifetime of population \"Pop III\" events:\n```python\nredshifts, distances, errors = gwc.LISA(population=\"Pop III\", years=4)\n```\n\nThe CLI equivalent would be:\n```console\n$ gwc generate LISA --population \"Pop III\" --years 4\n```\n\nIf instead you would like to generate 15 events of the population \"No Delay\":\n```python\nredshifts, distances, errors = gwc.LISA(population=\"No Delay\", events=15)\n```\n\nOr in the CLI:\n```console\n$ gwc generate LISA --population \"No Delay\" --events 15\n```\n\nYou can also ignore the underlying redshift distribution and specify the redshift for all events:\n```python\nredshifts, distances, errors = gwc.LISA(population=\"No Delay\", redshifts=[1, 2, 3, 4, 5, 6, 7, 8])\n```\n\nOr in the CLI:\n```console\n$ gwc generate LISA --population \"No Delay\" --redshifts '[1, 2, 3, 4, 5, 6, 7, 8, 9]'\n```\n\nYou also have the option to generate an ideal catalog, where all events lay on top of the theoretical luminosity distance:\n```python\nredshifts, distances, errors = gwc.LISA(population=\"No Delay\", events=15, ideal=True)\n```\n\nOr in the CLI:\n```console\n$ gwc generate LISA --population \"No Delay\" --events 15 --ideal\n```\n\n\n### ET\nHere we will show how to generate a mock catalog for the Einstein Telescope (ET).\n\nBoth the redshift distribution and error distribution used to generate the mock catalogs are provided in [[3]](#3).\n\nTo generate a mock catalog for the ET the only requirement is to provide the number of events you wish to have in your catalog.\n\nFor example, if you wish to generate a mock catalog with 1000 events:\n```python\nredshifts, distances, errors = gwc.ET(events=1000)\n```\n\nBeing the CLI equivalent:\n```console\n$ gwc generate ET --events 1000\n```\n\nYou can also decide to specify the redshift for each event:\n```python\nredshifts, distances, errors = gwc.ET(redshifts=[0.5, 1, 1.5])\n```\n\nWhere in the CLI you have:\n```console\n$ gwc generate ET --redshifts '[0.5, 1, 1.5]'\n```\n\nAnd you can also have an ideal catalog, where the events lay on top of the theoretical line for the luminosity distance:\n```python\nredshifts, distances, errors = gwc.ET(events=1000, ideal=True)\n```\n\nWhich in the CLI is:\n```console\n$ gwc generate ET --events 1000 --ideal\n```\n\n\n## Other Features\nHere we list other features which are available in this package, developed in order to facilitate common operations.\n\n\n### Saving and loading catalogs\nThis package also includes an easy way to save your catalogs to a `.csv` file:\n```python\ngwc.save(redshifts, distances, errors, \"catalog.csv\")\n```\n\nWhich you can easily import later with:\n```python\nredshifts, distances, errors = gwc.load(\"catalog.csv\")\n```\n\nIn the CLI you can also provide the output file using the `-o`, `--output` flag, which allows you to save whatever it is that the command returns, if you want to save a LISA mock catalog:\n```console\n$ gwc --output catalog.csv generate LISA --population \"No Delay\" --events 15\n```\n\nThe output flag is a global flag, meaning that it should come before any subcommand.\n\n\n### Plotting catalogs\nIf you are inside a Python script, you can plot your catalog, along with its label, which in this case is \"catalog1\", with:\n```python\ngwc.plot(redshifts, distances, errors, \"catalog1\")\n```\n\nThe CLI equivalent, where the data is stored in `catalog1.csv`:\n```console\n$ gwc plot --input catalog1.csv --legend \"catalog 1\"\n```\n\nYou can provide more than one catalog, as long as the number of arguments and the order remains the same. So if you have another catalog with variables `redshift2`, `distances2` and `errors2`, and you would like to label it as \"catalog2\", you can have them both in the same plot with:\n```python\ngwc.plot(redshifts, distances, errors, \"catalog1\", redshifts2, distances2, errors2, \"catalog2\")\n```\n\nBeing the CLI equivalent, where both catalog are stored as files:\n```console\n$ gwc plot --input catalog1.csv catalog2.csv --legend \"catalog 1\" \"catalog 2\"\n```\n\nYou can also plot the theoretical line of the default cosmological model, with a custom label that supports LaTeX (e.g.: \"$\\LambdaCDM$\"):\n```python\ngwc.plot(redshifts, distances, errors, \"catalog1\", theoretical=\"$\\LambdaCDM$\")\n```\n\nAnd in the CLI\n```console\n$ gwc plot --input catalog1.csv --legend \"catalog 1\" --theoretical \"$\\LambdaCDM$\"\n```\n\n\n### Changing default cosmological model\nAllows you to use a custom cosmological model when generating your samples.\n\nThis feature is only available in the CLI.\n\nTo do so, write a Python script that defines two functions, both `H(z)` and `dL(z, H)`, and then using the `-c`, `--cosmology` flag, point it towards the previously mentioned Python script.\n\nFor example, if you wish to use a custom cosmology, defined in `mycosmology.py`, to generate 1000 events for ET:\n```console\n$ gwc --cosmology mycosmology.py generate ET --events 1000\n```\n\nThis is a global flag, which means it should always be present before any of the available subcommands.\n\nOptionally, you may add a variable named `description` to the previous file, that should be a string with a descriptive name of the cosmological model being used, which will be printed in the header of the generated catalogs and kept for future reference.\n\n\n### Debug\nFor the sake of transparency, ease of use to check the underlying distributions is provided to the end user.\n\nFor LISA, you can plot the probability redshift distribution with:\n```python\ngwc.LISA_dist()\n```\n\nBeing the CLI equivalent:\n```console\n$ gwc debug LISA --distribution\n```\n\nAnd the error as a function of redshift with:\n```python\ngwc.LISA_error()\n```\n\nWith the CLI equivalent:\n```console\n$ gwc debug LISA --error\n```\n\nThe same pattern applies for the ET and LIGO, where all you have to do is replace LISA by ET or LIGO, according to your wish, where appropriate.\n\nBecause GWTC includes real data there is no underlying distribution, only the data pulled directly from the GWTC catalog source.\n\n\n## Citation\nThis program was developed in the context of [arXiv:2203.13788](https://arxiv.org/abs/2203.13788). Although it is completely independent from it, if you used any of the contents available in this repository, or found it useful in any way, you can cite it using the following BibTeX entry:\n```\n@misc{Ferreira2022,\n  doi = {10.48550/ARXIV.2203.13788},\n  url = {https://arxiv.org/abs/2203.13788},\n  author = {Ferreira, Jos\\'e and Barreiro, Tiago and Mimoso, Jos\\'e and Nunes, Nelson J.},\n  title = {Forecasting F(Q) cosmology with $\\Lambda$CDM background using standard sirens},\n  publisher = {arXiv},\n  year = {2022},\n}\n```\n\n\n## Feedback\nAny discussion, suggestions, pull requests or bug reports are always welcome. Feel free to use this issue section in this repository for everything else, or even send me an email at:\n- Personal email: [jose@jpferreira.me](mailto:jose@jpferreira.me) - [[PGP key](https://pastebin.com/raw/REkhQKg2)]\n- Institutional email: [jpmferreira@fc.ul.pt](mailto:jpmferreira@fc.ul.pt) - [[PGP key](https://pastebin.com/raw/AK2trPBw)]\n\nIf you wish to submit you code, pull requests should be targeted towards the dev branch.\n\n\n## Release cycle\nAll versions will have the format X.Y.Z, with the first one being 1.0.0, which will be released as soon as I think that both the code and the documentation are good enough to be shared.\n\nEach time that there is an update which does not modify the program behavior (e.g.: documentation, packaging) it will increment Z (e.g.: 1.0.0 -> 1.0.1).\n\nEach time that there is an update which modifies the program behavior (e.g.: adding features, fixing bugs) it will increment Y and reset Z (e.g.: 1.0.1 -> 1.1.0).\n\nEach time that there is an update which is not backwards compatible (e.g.: removing features, fundamental change on how the program is used) it will increment X and reset both Y and Z (e.g.: 1.1.2 -> 2.0.0).\n\nIn this repository you will find two branches: the stable branch (master) and the development branch (dev). All modifications are done in the development branch and, after being properly tested, are merged in the stable branch, with the appropriate version bump.\n\n\n## License\nAll of the contents provided in this repository are available under the MIT license.\n\nFor further information, refer to the file [LICENSE.md](./LICENSE.md) provided in this repository.\n\n\n## References\n<a id=\"1\">[1]</a>\nL. Speri, N. Tamanini, R. R. Caldwell, J. R. Gair, and B. Wang, Testing the quasar hubble diagram with lisa standard sirens, Physical Review D **103**, [10.1103/physrevd.103.083526](https://doi.org/10.1103/physrevd.103.083526) (2021).\n\n<a id=\"2\">[2]</a>\nC. Caprini and N. Tamanini, Constraining early and interacting dark energy with gravitational wave standard sirens: the potential of the elisa mission, [Journal of Cosmology and Astroparticle Physics2016(10), 006‚Äì006](https://doi.org/10.1088/1475-7516/2016/10/006).\n\n<a id=\"3\">[3]</a>\nE. Belgacem, Y. Dirian, S. Foffa, and M. Maggiore, Modified gravitational-wave propagation and standard sirens, Physical Review D 98, [10.1103/physrevd.98.023510](https://doi.org/10.1103/physrevd.98.023510) (2018).\n\n<a id=\"4\">[4]</a>\nM. Lagos, M. Fishbach, P. Landry, and D. E. Holz, Standard sirens with a running planck mass, Physical Review D 99, [10.1103/physrevd.99.083504](https://doi.org/10.1103/physrevd.99.083504) (2019).\n\n<a id=\"5\">[5]</a>\nT. Baker and I. Harrison, Constraining scalar-tensor modified gravity with gravitational waves and large scale structure surveys, [Journal of Cosmology and Astroparticle Physics 2021 (01), 068‚Äì068](https://doi.org/10.1088/1475-7516/2021/01/068).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jpmvferreira/gwcatalog",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gwcatalog",
    "package_url": "https://pypi.org/project/gwcatalog/",
    "platform": null,
    "project_url": "https://pypi.org/project/gwcatalog/",
    "project_urls": {
      "Homepage": "https://github.com/jpmvferreira/gwcatalog"
    },
    "release_url": "https://pypi.org/project/gwcatalog/1.2.0/",
    "requires_dist": [
      "numpy",
      "scipy",
      "matplotlib",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Generate catalogs of standard siren events.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13320535,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9a18f52312d611d8a9fdbe437cf10b6e04c0a8f51c962dd266bbe4322d6567d",
          "md5": "9d1413db178e7c3ed0103c2062fdd055",
          "sha256": "33aa2fe1a6f2dc047572481d30137e6ab3e5d61cf1786ceb918b8f7a8e8b8727"
        },
        "downloads": -1,
        "filename": "gwcatalog-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d1413db178e7c3ed0103c2062fdd055",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19729,
        "upload_time": "2022-02-12T14:50:28",
        "upload_time_iso_8601": "2022-02-12T14:50:28.922696Z",
        "url": "https://files.pythonhosted.org/packages/e9/a1/8f52312d611d8a9fdbe437cf10b6e04c0a8f51c962dd266bbe4322d6567d/gwcatalog-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9dd58bb990d7027af01357985b234f850f9f1e16fd68e27e559d36a7d2b01f2",
          "md5": "b1684aedd68f775050cc194cb112130a",
          "sha256": "0ca1bde701fbc3ee91b660a69450f161d8ff728117f3335801e41ebca4098d23"
        },
        "downloads": -1,
        "filename": "gwcatalog-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b1684aedd68f775050cc194cb112130a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20412,
        "upload_time": "2022-02-12T14:50:30",
        "upload_time_iso_8601": "2022-02-12T14:50:30.526696Z",
        "url": "https://files.pythonhosted.org/packages/c9/dd/58bb990d7027af01357985b234f850f9f1e16fd68e27e559d36a7d2b01f2/gwcatalog-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7967961d94661aedf00424a05c56aaab08d4b4e35352249287b72855ba258315",
          "md5": "202514b71c66ee2c4b0fa674b6358e94",
          "sha256": "f4879832631d0cac1fbd75575bbc0d6588c7030cb1163724b0e33d71e7f71681"
        },
        "downloads": -1,
        "filename": "gwcatalog-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "202514b71c66ee2c4b0fa674b6358e94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20646,
        "upload_time": "2022-03-07T01:38:36",
        "upload_time_iso_8601": "2022-03-07T01:38:36.155945Z",
        "url": "https://files.pythonhosted.org/packages/79/67/961d94661aedf00424a05c56aaab08d4b4e35352249287b72855ba258315/gwcatalog-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d25d4aa40b81751a98ede24b7a262864417b4b133d7dbb9c01dd7e200e8cd0e",
          "md5": "2a7840e4697b7e6769743becd66b1250",
          "sha256": "a8dce0d6b427609fe4f6205b05fbcd98f79b31cf91674ef7a92abede0293d2c6"
        },
        "downloads": -1,
        "filename": "gwcatalog-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2a7840e4697b7e6769743becd66b1250",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21106,
        "upload_time": "2022-03-07T01:38:37",
        "upload_time_iso_8601": "2022-03-07T01:38:37.859209Z",
        "url": "https://files.pythonhosted.org/packages/0d/25/d4aa40b81751a98ede24b7a262864417b4b133d7dbb9c01dd7e200e8cd0e/gwcatalog-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "325ffbf81d0d3373c132ef4f84836bfb0ff45c190a3017f61201df65a6326872",
          "md5": "d36b854e52de41c4bb71089976606bcf",
          "sha256": "6f1677d8f1f29b685e5ee7b3790c78f450d481b95c361cf550ceb8b11b42a35e"
        },
        "downloads": -1,
        "filename": "gwcatalog-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d36b854e52de41c4bb71089976606bcf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20855,
        "upload_time": "2022-03-28T09:51:19",
        "upload_time_iso_8601": "2022-03-28T09:51:19.728219Z",
        "url": "https://files.pythonhosted.org/packages/32/5f/fbf81d0d3373c132ef4f84836bfb0ff45c190a3017f61201df65a6326872/gwcatalog-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3329050679d6ffba431d8a9a327e0a7cdbdbe4f8a0c15a49bf835a14bc39f344",
          "md5": "872b018285ee4d1182ed2ad9d78bc687",
          "sha256": "b7a209486b14d9e6a0fe6f1ce45fbcc26cdf6a7664934861901e76a2a1b8c484"
        },
        "downloads": -1,
        "filename": "gwcatalog-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "872b018285ee4d1182ed2ad9d78bc687",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21607,
        "upload_time": "2022-03-28T09:51:21",
        "upload_time_iso_8601": "2022-03-28T09:51:21.682973Z",
        "url": "https://files.pythonhosted.org/packages/33/29/050679d6ffba431d8a9a327e0a7cdbdbe4f8a0c15a49bf835a14bc39f344/gwcatalog-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "325ffbf81d0d3373c132ef4f84836bfb0ff45c190a3017f61201df65a6326872",
        "md5": "d36b854e52de41c4bb71089976606bcf",
        "sha256": "6f1677d8f1f29b685e5ee7b3790c78f450d481b95c361cf550ceb8b11b42a35e"
      },
      "downloads": -1,
      "filename": "gwcatalog-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d36b854e52de41c4bb71089976606bcf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20855,
      "upload_time": "2022-03-28T09:51:19",
      "upload_time_iso_8601": "2022-03-28T09:51:19.728219Z",
      "url": "https://files.pythonhosted.org/packages/32/5f/fbf81d0d3373c132ef4f84836bfb0ff45c190a3017f61201df65a6326872/gwcatalog-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3329050679d6ffba431d8a9a327e0a7cdbdbe4f8a0c15a49bf835a14bc39f344",
        "md5": "872b018285ee4d1182ed2ad9d78bc687",
        "sha256": "b7a209486b14d9e6a0fe6f1ce45fbcc26cdf6a7664934861901e76a2a1b8c484"
      },
      "downloads": -1,
      "filename": "gwcatalog-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "872b018285ee4d1182ed2ad9d78bc687",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21607,
      "upload_time": "2022-03-28T09:51:21",
      "upload_time_iso_8601": "2022-03-28T09:51:21.682973Z",
      "url": "https://files.pythonhosted.org/packages/33/29/050679d6ffba431d8a9a327e0a7cdbdbe4f8a0c15a49bf835a14bc39f344/gwcatalog-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}