{
  "info": {
    "author": "Andrew Cropper",
    "author_email": "andrew.cropper@cs.ox.ac.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Popper\n\nPopper is an [inductive logic programming](https://arxiv.org/pdf/2008.07912.pdf) (ILP) system. \nPopper is still a **major** work-in-progress, so please notify us of bugs or usability issues.\n\nIf you use Popper, please cite the paper: Andrew Cropper and Rolf Morel. [Learning programs by learning from failures](https://arxiv.org/abs/2005.02259). Mach. Learn. 110(4): 801-856 (2021)\n\n## Installation\npip install popper-ilp\n\n## Requirements\n\n[SWI-Prolog](https://www.swi-prolog.org)\n\n[Clingo 5.5.0](https://potassco.org/clingo/)\n\n[pyswip](https://pypi.org/project/pyswip/)\n\n\n# Command line usage\n\nYou can run Popper with the command `python popper.py <input dir>`.\nFor instance, running the command `python popper.py examples/dropk` produces the output:\n\n```prolog\nf(A,B,C):-tail(A,C),one(B).\nf(A,B,C):-decrement(B,E),f(A,E,D),tail(D,C).\n% TP: 10, FN: 0, TN: 10, FP: 0\n```\n\nRunning the command `python popper.py examples/trains` produces the output:\n\n```prolog\nf(A):-long(B),roof_closed(B),has_car(A,B),three_wheels(C),has_car(A,C).\n% TP: 5, FN: 0, TN: 5, FP: 0\n```\n\nTake a look at the examples folder for examples.\n\n# Library usage\n\nYou can import Popper and use it in your Python code like so:\n\n```python\nfrom popper.util import Settings\nfrom popper.loop import learn_solution\nprog, stats_ = learn_solution(Settings('bias.pl', 'exs.pl', 'bk.pl'))\nprint(prog)\n```\n\n# Example problem\n\nPopper requires three files: \n\n- an examples file\n- a background knowledge (BK) file\n- a bias file\n\nAn examples file contains positive and negative examples of the relation you want to learn:\n\n```prolog\npos(grandparent(ann,amelia)).\npos(grandparent(steve,amelia)).\npos(grandparent(ann,spongebob)).\npos(grandparent(steve,spongebob)).\npos(grandparent(linda,amelia)).\nneg(grandparent(amy,amelia)).\n```\n\nA BK file contains other information about the problem:\n\n```prolog\nmother(ann,amy).\nmother(ann,andy).\nmother(amy,amelia).\nmother(linda,gavin).\nfather(steve,amy).\nfather(steve,andy).\nfather(gavin,amelia).\nfather(andy,spongebob).\n```\n\nA bias file contains information necessary to restrict the search space of Popper.\nThe first key thing thing to add to this file are *predicate declarations*.\nThese tell Popper which predicate symbols it can use in the head or body of a rule, such as:\n\n```prolog\nhead_pred(grandparent,2).\nbody_pred(mother,2).\nbody_pred(father,2).\n```\n\nThese declarations say that each rule in a program must have the symbol *grandparent* with arity two in the head and *mother* and/or *father* in the body, also with arity two.\n\nPopper also needs three parameters to restrict the search space:\n\n- `max_vars(N).` sets the maximum number of variables in a rule to `N`\n- `max_body(N).` sets the maximum number of body literals in a rule to `N`\n- `max_clauses(N).` sets the maximum number of rules/clauses to `N`\n\nThese parameters are very important as they greatly influence the search space. If the values are too high then Popper will might struggle to learn a solution. If the settings are too low then the search space might be too small to contain a good solution. We are currently working on method to automatically set these settings, but in the meantime finding the correct values can often be a process of trial and error.\n\nIn our running example, we will add these three lines to our bias file:\n```prolog\nmax_clauses(4).\nmax_vars(4).\nmax_body(3).\n```\n\nIf we call Popper with these three files it will produce the output:\n\n```prolog\ngrandparent(A,B):-mother(A,C),father(C,B).\ngrandparent(A,B):-father(A,C),mother(C,B).\ngrandparent(A,B):-father(A,C),father(C,B).\ngrandparent(A,B):-mother(A,C),mother(C,B).\n% Precision:1.00, Recall:1.00, TP:5, FN:0, TN:1, FP:0\n```\n\n# Anytime\n\nPopper is an anytime algorithm. To see intermediate solutions use the `--info` flag (or `settings.info = True`). For instance, running the command `python popper.py examples/trains2 --info` produces the output:\n\n```prolog\n% NEW BEST PROG 1:\nf(A):-short(B),has_car(A,B).\n% Precision:0.80, Recall:0.86, TP:683, FN:109, TN:33, FP:175\n\n% NEW BEST PROG 2:\nf(A):-has_car(A,B),roof_closed(B).\n% Precision:0.81, Recall:0.94, TP:745, FN:47, TN:36, FP:172\n\n% NEW BEST PROG 3:\nf(A):-roof_open(B),has_car(A,B).\n% Precision:0.95, Recall:0.92, TP:731, FN:61, TN:172, FP:36\n\n% NEW BEST PROG 68:\nf(A):-has_car(A,C),roof_closed(C),has_car(A,B),roof_open(B).\nf(A):-roof_open(C),has_car(A,C),three_load(B),has_load(C,B).\n% Precision:1.00, Recall:0.91, TP:721, FN:71, TN:208, FP:0\n\n% NEW BEST PROG 346:\nf(A):-has_car(A,C),roof_closed(C),has_car(A,B),roof_open(B).\nf(A):-has_load(E,D),rectangle(B),has_car(A,E),triangle(D),has_car(A,C),has_load(C,B).\n% Precision:1.00, Recall:0.96, TP:761, FN:31, TN:208, FP:0\n\n% BEST PROG 1252:\nf(A):-roof_open(C),has_car(A,C),three_load(B),has_load(C,B).\nf(A):-roof_open(C),has_car(A,C),has_car(A,B),roof_closed(B).\nf(A):-rectangle(B),has_load(E,B),has_car(A,E),has_car(A,D),has_load(D,C),triangle(C).\n% Precision:1.00, Recall:1.00, TP:792, FN:0, TN:208, FP:0\n```\n\n# Recursion\nTo enable recursion add `enable_recursion.` to the bias file.\nThis flag allows Popper to learn programs where a predicate symbol appears in both the head and body of a rule, such as to find a duplicate element (`python popper.py examples/find-dupl`) in a list:\n\n```prolog\nf(A,B):-head(A,B),tail(A,C),element(C,B).\nf(A,B):-tail(A,C),f(C,B).\n```\n\nOr to filter (`python popper.py examples/filter`) even elements from a list:\n\n```prolog\nf(A,B):-empty(A),empty(B).\nf(A,B):-tail(A,D),head(A,C),odd(C),f(D,B).\nf(A,B):-head(A,E),even(E),tail(A,C),f(C,D),prepend(E,D,B).\n\n```\n\n# Types\nPopper supports optional type annotations, which can be added to a bias file.\nA type annotation is of the form `type(p,(t1,t2,...,tk)` for a predicate symbol `p` with arity `k`, such as:\n\n```prolog\ntype(f,(list,list)).\ntype(head,(list,element)).\ntype(tail,(list,list)).\ntype(empty,(list,)).\ntype(odd,(element,)).\ntype(even,(element,)).\ntype(prepend,(element,list,list)).\n```\n\n# Directions \nProlog often requires arguments to be ground.\nFor instance, when asking Prolog to answer the query:\n```prolog\nX is 3+K.\n```\nIt throws an error:\n```prolog\nERROR: Arguments are not sufficiently instantiated\n```\nMoreover, there are often cases where we want to reduce the number of answers from a query.\nFor instance, calling the `length` predicate with only variables leads to an infinite set of answers.\n\nTo make things easier, Popper supports optional direction annotations\nA direction annotation is of the form `direction(p,(d1,d2,...,dk)` for a predicate symbol `p` with arity `k`, where each `di` is either `in` or `out`.\nAn `in` variable must be ground when calling the relation.\nBy contrast, an `out` variable need not be ground.\nHere are example directions:\n\n```prolog\ndirection(head,(in,out)).\ndirection(tail,(in,out)).\ndirection(length,(in,out)).\ndirection(prepend,(in,int,out)).\ndirection(geq,(in,in)).\n```\n\n# Predicate invention\n\nPopper supports [automatic predicate invention](https://arxiv.org/pdf/2104.14426.pdf) (PI). To enable PI, add the setting `enable_pi.` to the bias file.\nWith PI enabled, Popper (`python popper.py examples/kinship-pi`) learns the following program:\n\n```prolog\ngrandparent(A,B):-inv1(C,B),inv1(A,C).\ninv1(A,B):-mother(A,B).\ninv1(A,B):-father(A,B).\n% Precision:1.00, Recall:1.00, TP:5, FN:0, TN:1, FP:0\n```\n\n<!-- Popper can invent multiple levels of predicates. For instance, running `python popper.py examples/robots-pi` produces the output:\n\n```prolog\n\n``` -->\n\nPredicate invention is currently very expensive so it is best to avoid it if possible.\n\n\n# Non-observational predicate learning\n\nPopper supports non-observational predicate learning, where it must learn definitions for relations not given as examples.\nSee the example 'non-OPL'.\n\n# Parallelisation\n[Coming soon](https://arxiv.org/pdf/2109.07132.pdf)\n\n# Failure explanation\n[Coming soon](https://arxiv.org/pdf/2102.12551.pdf)\n\n# Very large programs\n[Coming soon](https://arxiv.org/pdf/2109.07818.pdf)\n\n# Popper settings\n\nTo run with statistics use the flag `--stats` (`settings.stats = True`).\n\nTo run in debug mode use the flag `--debug` (`settings.debug = True`).\n\nTo run in information mode use the flag `--info` (`settings.info = True`).\n\nTo show the full hypothesis space (bounded by `N`) use the flag `--hspace N`.\n\nTo run with a maximum learning time use the flag `--timeout` (`settings.timeout = N`).\n\nTo run with a maximum example testing time use the flag `--eval-timeout` (`settings.eval_timeout = True`).\n\nTo allow non-Datalog clauses, where a variable in the head need not appear in the body, add ``non_datalog.` to your bias file.\n\nTo allow singleton variables (variables that only appear once in a clause), add `allow_singletons.` to your bias file.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/logic-and-learning-lab/Popper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "popper-ilp",
    "package_url": "https://pypi.org/project/popper-ilp/",
    "platform": "",
    "project_url": "https://pypi.org/project/popper-ilp/",
    "project_urls": {
      "Homepage": "https://github.com/logic-and-learning-lab/Popper"
    },
    "release_url": "https://pypi.org/project/popper-ilp/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Popper",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12380827,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "742094a737dfa50b224192b24aee23ff41ee769ef3fd6fdc03618af7af07face",
          "md5": "3073fb9b8cb581416e7b3deff56c7464",
          "sha256": "c2a7d1891528e9de4b36a694dfa0251ae7e56c947ee87dc06b69f79263b02d90"
        },
        "downloads": -1,
        "filename": "popper-ilp-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3073fb9b8cb581416e7b3deff56c7464",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26279,
        "upload_time": "2021-12-22T11:58:03",
        "upload_time_iso_8601": "2021-12-22T11:58:03.317265Z",
        "url": "https://files.pythonhosted.org/packages/74/20/94a737dfa50b224192b24aee23ff41ee769ef3fd6fdc03618af7af07face/popper-ilp-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "742094a737dfa50b224192b24aee23ff41ee769ef3fd6fdc03618af7af07face",
        "md5": "3073fb9b8cb581416e7b3deff56c7464",
        "sha256": "c2a7d1891528e9de4b36a694dfa0251ae7e56c947ee87dc06b69f79263b02d90"
      },
      "downloads": -1,
      "filename": "popper-ilp-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3073fb9b8cb581416e7b3deff56c7464",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26279,
      "upload_time": "2021-12-22T11:58:03",
      "upload_time_iso_8601": "2021-12-22T11:58:03.317265Z",
      "url": "https://files.pythonhosted.org/packages/74/20/94a737dfa50b224192b24aee23ff41ee769ef3fd6fdc03618af7af07face/popper-ilp-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}