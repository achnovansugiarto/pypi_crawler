{
  "info": {
    "author": "Antti Solonen",
    "author_email": "antti.solonen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# blinpy - Bayesian LINear models in PYthon\n\nWhen applying linear regression models in practice, one often ends up going  \nback to the basic formulas to figure out how things work, especially if \nGaussian priors are applied. This package is built for this (almost trivial) \ntask of fitting linear-Gaussian models. The package includes a basic numpy \nengine for fitting a general linear-Gaussian model, plus some model classes \nthat provide a simple interface for working with the models.\n\nIn the end, before fitting a specified model, the model is always transformed\ninto the following form:\n\nLikelihood: y = A&theta; + N(0, &Gamma;<sub>obs</sub>)\n\nPrior: B&theta; ~ N(&mu;<sub>pr</sub>, &Gamma;<sub>obs</sub>).\n\nIf one has the system already in suitable numpy arrays, one can directly use \nthe numpy engine to fit the above system. However, some model classes are \ndefined as well that make it easy to define and work with some common types \nof linear-Gaussian models, see the examples below.\n\n## Installation\n\n`pip install blinpy`\n\n## Examples\n\n### Fitting a line, no priors\n\nStandard linear regression can be easily done with \n`blinpy.models.LinearModel` class that takes in the input data as a `pandas` \nDataFrame.\n\nLet us fit a model y=&theta;<sub>0</sub> + &theta;<sub>1</sub>x + e using \nsome dummy data:\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom blinpy.models import LinearModel\n\ndata = pd.DataFrame(\n    {'x': np.array([0.0, 1.0, 1.0, 2.0, 1.8, 3.0, 4.0, 5.2, 6.5, 8.0, 10.0]),\n     'y': np.array([5.0, 5.0, 5.1, 5.3, 5.5, 5.7, 6.0, 6.3, 6.7, 7.1, 7.5])}\n)\n\nlm = LinearModel(\n    output_col='y', \n    input_cols=['x'],\n    bias = True,\n    theta_names=['th1'],\n).fit(data)\n\nprint(lm.theta)\n```\n\nThat is, the model is defined in the constructor, and fitted using the `fit` \nmethod. The fitted parameters can be accessed via `lm.theta` property. The \ncode outputs:\n```python\n{'bias': 4.8839773707086165, 'th1': 0.2700293864048287}\n```\n\nThe posterior mean and covariance information are also stored in numpy arrays\nas `lm.post_mu` and `lm.post_icov`. Note that the posterior precision matrix\n(inverse of covariance) is given instead of the covariance matrix.\n\n### Fit a line with priors\n\nGaussian priors (mean and cov) can be added to the `fit` method of `LinearModel`. Let us take the same example as above, but now add a prior `bias ~ N(4,1)` and `th1 ~ N(0.35, 0.001)`:\n\n```python\nlm = LinearModel(\n    output_col='y', \n    input_cols=['x'],\n    bias = True,\n    theta_names=['th1'],\n).fit(data, pri_mu=[4.0, 0.35], pri_cov=[1.0, 0.001])\n\nprint(lm.theta)\n\n{'bias': 4.546825637808106, 'th1': 0.34442570226594676}\n```\n\nThe prior covariance can be given as a scalar, vector or matrix. If it's a scalar, the same variance is applied for all parameters. If it's a vector, like in the example above, the variances for individual parameters are given by the vector elements. A full matrix can be used if the parameters correlate a priori.\n\n### Fit a line with partial priors\n\nSometimes we don't want to put priors for all the parameters, but just for a subset of them. `LinearModel` supports this via the `pri_cols` argument in the model constructor. For instance, let us now fit the same model as above, but only put the prior `th1 ~ N(0.35, 0.001)` and no prior for the bias term:\n\n```python\nlm = LinearModel(\n    output_col='y', \n    input_cols=['x'],\n    bias = True,\n    theta_names=['th1'],\n    pri_cols = ['th1']\n).fit(data, pri_mu=[0.35], pri_cov=[0.001])\n\nprint(lm.theta)\n\n{'bias': 4.603935457929664, 'th1': 0.34251082265349875}\n```\n\n### Using the numpy engine directly\n\nFor some more complex linear models, one might want to use the numpy linear fitting function directly. The function is found from `blinpy.utils.linfit`, an example of how to fit the above example is given below:\n\n```python\nimport numpy as np\nfrom blinpy.utils import linfit\n\nx = np.array([0.0, 1.0, 1.0, 2.0, 1.8, 3.0, 4.0, 5.2, 6.5, 8.0, 10.0])\ny = np.array([5.0, 5.0, 5.1, 5.3, 5.5, 5.7, 6.0, 6.3, 6.7, 7.1, 7.5])\n\nX = np.concatenate((np.ones((11, 1)), x[:, np.newaxis]), axis=1)\n\nmu, icov, _ = linfit(y, X, pri_mu=[4.0, 0.35], pri_cov=[1.0, 0.001])\nprint(mu)\n\n[4.54682564 0.3444257]\n```\nOne can give the optional prior transformation matrix `B` as an input to the `linfit` function, by default `B` is identity.\n\n### Smoothed interpolation \n\nIn many cases, one needs to approximate a function from noisy measurements. To get the smooth underlying trend behind the data, one often uses techniques like LOESS. An alternative way is to discretize the function onto a grid and treat the function values at the grid points as unknowns. In order to get smooth trends, one can add a prior (penalization term) that favors smoothness. In the helper function `smooth_interp1`, one can specify priors for the first and second order differences between the function values. The choice of using first or second order smoothness priors affects the extrapolation behavior of the function, as demonstrated below.\n\n```python\nimport numpy as np\nimport blinpy as bp\nimport matplotlib.pyplot as plt\n\n# generate data\nxobs = np.random.random(500)\nysig = 0.05\nyobs = 0.5+0.2*xobs + ysig*np.random.randn(len(xobs))\n\n# define grid for fitting\nxfit = np.linspace(-0.5,1.5,30)\n\n# fit with second order difference prior\nyfit1, yfit_icov1 = bp.models.smooth_interp1(xfit, xobs, yobs, obs_cov=ysig**2, d2_var=1e-5)\nyfit_cov1 = np.linalg.inv(yfit_icov1)\n\n# fit with first order difference prior\nyfit2, yfit_icov2 = bp.models.smooth_interp1(xfit, xobs, yobs, obs_cov=ysig**2, d1_var=1e-4)\nyfit_cov2 = np.linalg.inv(yfit_icov2)\n\n# plot results\nplt.figure(figsize=(8,8))\nplt.subplot(211)\nplt.plot(xobs,yobs,'k.', alpha=0.5)\nplt.plot(xfit, yfit1, 'r-')\nplt.plot(xfit, yfit1+2*np.sqrt(np.diag(yfit_cov1)), 'r--', lw=1)\nplt.plot(xfit, yfit1-2*np.sqrt(np.diag(yfit_cov1)), 'r--', lw=1)\n\nplt.subplot(212)\nplt.plot(xobs,yobs,'k.', alpha=0.5)\nplt.plot(xfit, yfit2, 'r-')\nplt.plot(xfit, yfit2+2*np.sqrt(np.diag(yfit_cov2)), 'r--', lw=1)\nplt.plot(xfit, yfit2-2*np.sqrt(np.diag(yfit_cov2)), 'r--', lw=1)\n\nplt.show()\n```\n\n![smooth_interp_demo](https://user-images.githubusercontent.com/6495497/111585506-175b4b00-87c8-11eb-9ea4-7e0d7664f05b.png)\n\n### Generalized Additive Models (GAM): line fit\n\nThe `GamModel` class offers a more general interface to linear model fitting. With `GamModel` one can fit models that consist of components that represent `N` columns in the final system matrix. Priors can be given (optional) for each block. For instance, the line fitting example, where a prior is given for the slope, is solved with `GamModel` as follows:\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom blinpy.models import GamModel\n\ndata = pd.DataFrame(\n    {'x': np.array([0.0, 1.0, 1.0, 2.0, 1.8, 3.0, 4.0, 5.2, 6.5, 8.0, 10.0]),\n     'y': np.array([5.0, 5.0, 5.1, 5.3, 5.5, 5.7, 6.0, 6.3, 6.7, 7.1, 7.5])}\n)\n\ngam_specs = [\n    {\n        'fun': lambda df: df['x'].values[:, np.newaxis],\n        'name': 'slope',\n        'prior': {\n            'B': np.eye(1),\n            'mu': np.array([0.35]),\n            'cov': np.array([0.001])\n        }\n    },\n    {\n        'fun': lambda df: np.ones((len(df), 1)),\n        'name': 'bias'\n    }\n]\n\nmodel = GamModel('y', gam_specs).fit(data)\nmodel.theta\n\n{'slope': array([0.34251082]), 'bias': array([4.60393546])}\n```\n\nThat is, one feeds in a list of dicts that specify the GAM components. Each dict must contain a function that returns the system matrix columns and a name for the model component. Optionally, one can specify a Gaussian prior for the components. The `GamModel` class then compiles and fits the linear-Gaussian system.\n\n### GAM: non-parametric regression\n\nLet us take a slightly more non-trivial example of a GAM, where we model an unknown function in a grid of selected input points. Points in between are linearly interpolated. Moreover, we impose a second order difference prior on the function values to enforce smoothness. The interpolation matrix and difference prior construction are done with utility functions provided in the package. The example code is given below:\n\n```python\nimport numpy as np\nimport pandas as pd\nimport blinpy as bp\nimport matplotlib.pyplot as plt\n\nxobs = -1.75 + 3.5*np.random.random(100)\nyobs = 3*xobs**4-6*xobs**2+2 + np.random.randn(len(xobs))\ndata = pd.DataFrame({'x': xobs, 'y': yobs})\n\nxfit = np.linspace(-2,2,20)\nnfit = len(xfit)\n\ngam_spec = [\n    {\n        'fun': lambda df: bp.utils.interp_matrix(df['x'].values, xfit),\n        'name': 'smoothfun',\n        'prior': {\n            'B': bp.utils.diffmat(nfit, order=2),\n            'mu': np.zeros(nfit-2),\n            'cov': np.ones(nfit-2)\n        }\n    }\n]\n\nmodel = bp.models.GamModel('y', gam_spec).fit(data)\nprint(model.theta)\n\nplt.figure(figsize=(6,4))\nplt.plot(xobs, yobs, 'k.')\nplt.plot(xfit, model.post_mu, 'r-')\nplt.grid(True)\nplt.show()\n\n{'smoothfun': array([16.83584518, 11.41451668,  5.99318818,  1.70894339, -0.57917346,\n       -1.10535146, -0.62246082,  0.95388427,  1.88575506,  2.07577794,\n        2.19637689,  1.61404071,  0.48381775, -0.22563978, -0.74711054,\n       -0.82681361,  0.84100582,  4.54902101,  8.76411573, 12.97921046])}\n```\n![gam_demo2](https://user-images.githubusercontent.com/6495497/122905179-a93f9a80-d359-11eb-9e75-9efa6e0b0bf6.png)\n\nGAM models give a nice way to blend parametric and nonparametric regression models together.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/solbes/blinpy/archive/refs/tags/0.1.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/solbes/blinpy",
    "keywords": "bayes,linear,gam",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blinpy",
    "package_url": "https://pypi.org/project/blinpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/blinpy/",
    "project_urls": {
      "Download": "https://github.com/solbes/blinpy/archive/refs/tags/0.1.6.tar.gz",
      "Homepage": "https://github.com/solbes/blinpy"
    },
    "release_url": "https://pypi.org/project/blinpy/0.1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Bayesian Linear Models in Python",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17154565,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dd599398f5cb2ddba5e2b316a0f1957d841ba46ee837a13b6ae403efd1cf9ff",
          "md5": "c34546ed7a459149b5147885f61b331b",
          "sha256": "8cf334f7a1decab45fe3347410cc1cf062f3ef1b82352f241e52582fe2eb105f"
        },
        "downloads": -1,
        "filename": "blinpy-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c34546ed7a459149b5147885f61b331b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11085,
        "upload_time": "2021-06-06T03:58:42",
        "upload_time_iso_8601": "2021-06-06T03:58:42.781128Z",
        "url": "https://files.pythonhosted.org/packages/8d/d5/99398f5cb2ddba5e2b316a0f1957d841ba46ee837a13b6ae403efd1cf9ff/blinpy-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4b7e656a6fc34c10aeffa362a54b50a6cfe426a2ed37bd2aadb3ee737c7d6a9",
          "md5": "558ddfcfd42d24ecd234d2ad604d10b2",
          "sha256": "026961ce42c1f51873e6e06b35f3006b605f91d64550c8e1d75925ab421e7c8c"
        },
        "downloads": -1,
        "filename": "blinpy-0.1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "558ddfcfd42d24ecd234d2ad604d10b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13697,
        "upload_time": "2021-06-06T04:08:17",
        "upload_time_iso_8601": "2021-06-06T04:08:17.622662Z",
        "url": "https://files.pythonhosted.org/packages/f4/b7/e656a6fc34c10aeffa362a54b50a6cfe426a2ed37bd2aadb3ee737c7d6a9/blinpy-0.1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68b0955d025e4e1fa4a39e135717fba7b6b9f37f805ab9e10d430aff717f49cb",
          "md5": "5e27aa420a00ff4b170a39ff6f05beba",
          "sha256": "e90e0650c9aeec34d98be90ceda0ad971dec61ff33b26bc7f079cf5403f668c4"
        },
        "downloads": -1,
        "filename": "blinpy-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5e27aa420a00ff4b170a39ff6f05beba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16568,
        "upload_time": "2021-06-22T14:57:54",
        "upload_time_iso_8601": "2021-06-22T14:57:54.700966Z",
        "url": "https://files.pythonhosted.org/packages/68/b0/955d025e4e1fa4a39e135717fba7b6b9f37f805ab9e10d430aff717f49cb/blinpy-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ea03171367ff24375073aa5dc064fa13e4ff7b44f50b34c27965be51aa8e18c",
          "md5": "018d4184ed6cbabfa9f1d2c63c5967a5",
          "sha256": "55f9c0f3666033c94adc68c17f885e13116363fafef2d824f682517b20c8464d"
        },
        "downloads": -1,
        "filename": "blinpy-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "018d4184ed6cbabfa9f1d2c63c5967a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17014,
        "upload_time": "2023-03-04T09:22:12",
        "upload_time_iso_8601": "2023-03-04T09:22:12.511798Z",
        "url": "https://files.pythonhosted.org/packages/9e/a0/3171367ff24375073aa5dc064fa13e4ff7b44f50b34c27965be51aa8e18c/blinpy-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ea03171367ff24375073aa5dc064fa13e4ff7b44f50b34c27965be51aa8e18c",
        "md5": "018d4184ed6cbabfa9f1d2c63c5967a5",
        "sha256": "55f9c0f3666033c94adc68c17f885e13116363fafef2d824f682517b20c8464d"
      },
      "downloads": -1,
      "filename": "blinpy-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "018d4184ed6cbabfa9f1d2c63c5967a5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17014,
      "upload_time": "2023-03-04T09:22:12",
      "upload_time_iso_8601": "2023-03-04T09:22:12.511798Z",
      "url": "https://files.pythonhosted.org/packages/9e/a0/3171367ff24375073aa5dc064fa13e4ff7b44f50b34c27965be51aa8e18c/blinpy-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}