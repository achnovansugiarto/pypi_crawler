{
  "info": {
    "author": "Fangfei Li, Darach Miller",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Python 3.9](https://img.shields.io/badge/python-3.9-green.svg)](https://www.python.org/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)\n\n# fitseq\n\nAccurate pooled competition assays requires accounting for the changing\npopulation-average fitness in order toe best estimate the fitness of\nlineages within the pool.\nThis utility does both by iterating between optimizations of per-lineage\nfitness given the average, and calculating the new average fitness.\n\nThe core concept and architecture is written by FangFei Li (@FangFei05).\nThis fork is just tweaking the interface and metrics for my personal use,\nbut if anyone else wants to use it I can offer limited help.\n\nOn a recent datasets of five timepoints for ~3.5 million lineages, \n`fitseq` was finished within 4.5 hours (wall), using 20 cores and 4GB of RAM.\n\nIf you use this software, please reference: [F. Li, et al. Unbiased Fitness Estimation of Pooled Barcode or Amplicon Sequencing Studies. Cell Systems, 7: 521-525 (2018)](https://doi.org/10.1016/j.cels.2018.09.004)\n\n\n\n# Installation\n\n## With pip\n\nYou can install from this git repo directly as:\n\n    python3 -m pip install git+https://github.com/darachm/fitseq.git\n\n<!--\nor from PyPi with:\n\n    WELL NOT QUITE YET BUT SOON python3 -m pip install fitseq\n-->\n\nInstall the latest development branch with something like:\n\n    python3 -m pip install git+https://github.com/darachm/fitseq.git@dev\n\nTest installation with:\n\n    fitseq.py -h\n\n## Or don't install, use a container\n\n### Docker\n\nThis repository has a `Dockerfile` to build off the main branch of this repo,\nlike so\n\n    docker build -t darachm/fitseq ./ \n\nOr you should be able to pull it off of Dockerhub like:\n\n    docker run darachm/fitseq:latest fitseq.py -h\n\nYou can then use that, with a Docker installation like so:\n\n    docker run \\\n        --mount type=bind,source=$(pwd)/testing,target=/testing \\\n        darachm/fitseq \\\n        fitseq.py \\\n            -i testing/data/ppiseq_test_counts_1000.csv \\\n            -p 8 -t 0 1 2 3 4 \\\n            -m 20 --min-step 0.001 \\\n            --output-mean-fitness testing/output/test_means.csv \\\n            -o testing/output/test_out.csv\n\nNote that you need to `--mount` the directory with the inputs in a folder,\nand use that in the command. Directories on containers... yeah.\n\nI think Singularity is more intuitive/accessible for most folks...\n\n### Singularity\n\nOn a multi-user HPC? Want to get an achive-ready monolithic stable container?\n[Singularity](https://sylabs.io/guides/3.8/user-guide/quick_start.html#quick-installation-steps)\nis a container system for scientific multi-user HPC computing and archiving.\nYou can build your own container from the Singularity file in this repo using\na command like:\n\n    sudo singularity build fitseq.sif Singularity.fitseq\n\n( This is just turning the docker image into a Singularity image. \nJust so you know. )\n\nThen put it where you need it, and run with something like:\n\n    singularity exec fitseq.sif \\\n        fitseq.py \\\n            -i testing/data/ppiseq_test_counts_1000.csv \\\n            -p 8 -t 0 1 2 3 4 \\\n            -m 20 --min-step 0.001 \\\n            --output-mean-fitness testing/output/test_means.csv \\\n            -o testing/output/test_out.csv\n\n<!--\nor, download from the github container registry like so\n\n    TODO gotta figure this out\n-->\n\n# Usage \n\nThe `fitseq.py` script functions to estimate fitnesses of lineages in a pool.\nThere is also a script `evo_simulator.py` that can perform simulations of \ncompetitive pooled growth of lineages, in order to generate synthetic data for\nbenchmarking.\n\n## `fitseq.py` - estimate fitnesses from counts data\n\nThis tool expects a comma-separated table (CSV) of your best estimate of\nlineage counts of the lineage, with one column per timepoint. Each lineage is\na row, and outputs are in the same order as the input.\n\nFor an example using data distributed in this repo, try:\n\n    python3 fitseq.py \\\n        --input testing/data/ppiseq_test_counts_1000.csv \\\n        --processes 8 \\\n        --t-seq 0 1 2 3 4 \\\n        --min-iter 10 \\\n        --max-iter-num 100 \\\n        --min-step 0.001 \\\n        --output-mean-fitness test_output_means.csv \\\n        -o test_output.csv\n\nThis reads an input file at \n`testing/data/ppiseq_test_counts_1000.csv`, and uses 8 processes.\nIt assumes each sample is 1 \"generation\" of growth.\nIt does a mandatory 10 iterations of burn-in to stabilize the estimates, then\nproceeds until the sum of negative log likelihood doesn't improve by at least\n0.1% over the previous step, at 100 iterations max.\nThen it writes the mean fitness values to that CSV, \nand the rest to `test_output.csv`.\n\n### File formats\n\n#### Input file format\n\nThis tool expects a comma-separated table (CSV) of your best estimate of\nlineage counts of the lineage, with one column per timepoint. \nEach lineage is a row, and outputs are in the same order as the input.\n\nSomething like:\n\n    21,7,2,0,0\n    35,71,34,38,12\n    5,9,1,0,0\n    3,8,4,3,1\n    12,10,11,1,0\n\n#### Output file format\n\nThere are two outputs generated, the first is the per-lineage (per input row)\nfit parameters, an estimate of error of the optimization process[^eerror], \nand the model-projected psuedo-count expectations for each timepoint.\nFor example, *but rounded to 3 decimal places for tidy-ness*:\n\n    Estimated_Fitness,Estimation_Error,Likelihood_Log,Estimated_Read_Number_t0,Estimated_Read_Number_t1,Estimated_Read_Number_t2,Estimated_Read_Number_t3,Estimated_Read_Number_t4\n    -1.529,0.517,4.998,21.0,6.608,2.148,0.298,0.004\n    -0.274,0.189,21.556,35.0,38.661,76.501,17.801,5.471\n    -0.728,0.316,10.277,5.0,3.504,6.152,0.332,0.009\n    -0.194,0.252,10.379,3.0,3.588,9.333,2.267,0.467\n    -0.596,0.214,7.849,12.0,9.602,7.805,4.172,0.104\n    -2.942,1.591,2.233,5.0,0.383,0.007,0.003,0.000\n\nThe headers are a bit long, I suppose. But they're informative...?\n\n[^eerror]: The \"Estimation_Error\" is probably not what you're expecting.\nIt's the second derivative of the change in sum-negative-log-likelihood\nof this lineage's optimization. So that might not be what you're wanting to\nuse to filter lineages. You can however use the \"Estimated\" counts to\ncalculate an R^2, have fun.\n\nThere is also the optional (and strongly suggested!) output file of the\nmean fitness per timepoint, given as a CSV format with headers, such as:\n\n    Samples,Estimate_Mean_Fitness\n    0,0.0\n    1,0.3833658804427269\n    2,0.9907541206263276\n    3,1.0394387021430962\n    4,1.0542176653660411\n\n### Options, from `fitseq.py -h`\n\n#### input\n\n* `-i` INPUT, `--input` INPUT The path to a header`-less` CSV file, where each\n  column contains the count of each lineage (each row is a lineage) at that\n  sample/timepoint. REQUIRED\n* `--t-seq` [T_SEQ [T_SEQ ...]], `-t` [T_SEQ [T_SEQ ...]] The estimated\n  \"generations\" of growth elapse at each sampled timepoint. This is useful for\n  scaling the fitness or using unevenly spaced timepoints. REQUIRED\n\n#### output\n\n* `-o` OUTPUT, `--output` OUTPUT The path (default STDOUT) from which to output\n  the fitnesses and errors and likelihoods and estimated reads. CSV format.\n  (default: STDOUT, so that you can pipe it into other tools)\n* `--output-mean-fitness` OUTPUT_MEAN_FITNESS, `-om` OUTPUT_MEAN_FITNESS The\n  path (default None) to which to write the mean fitnessescalculated per\n  sample. \n\n#### parallelism\n\n* `-p` PROCESSES, `--processes` PROCESSES Number of processes to launch with\n  multiprocessing\n* `--max-chunk-size` MAX_CHUNK_SIZE The max chunksize for parallelism,\n  automatically set to a roughly even split of lineages per chunk. \n  Tune if you want to.\n\n#### optimization stopping control\n\n* `--min-iter` MIN_ITER   Force FitSeq to run at least this many iterations in\n  the optimization (default: 10)\n* `--max-iter-num` MAX_ITER_NUM, `-m` MAX_ITER_NUM Maximum number of iterations\n  in the optimization (of optimizing population average fitness) (default: 100)\n* `--minimum-step-size` MINIMUM_STEP_SIZE, `--min-step` MINIMUM_STEP_SIZE Set a\n  minimum fracitonal step size for improvement, if below this then the\n  optimization iterations terminate. (default: 0.0001)\n\n#### tuning details\n* `--fitness-type` {m,w}, `-f` {m,w} \n  SORRY but **Wrightian fitness does not yet work in this version**, \n  so just don't set the `--fitness_type`, or set to `m`. Sorry.\n  Maybe we'll re-implement Wrightian fitness (w). Maybe.\n* `-k` KAPPA, `--kappa` KAPPA a noise parameter that characterizes the total\n  noise introduced. For estimation, see doi:10.1038/nature14279 (default: 2.5)\n* `--gtol` GTOL The gradient tolerance parameter for the BFGS opitmization, \n  default (from SciPy) is 1e-5\n* `-g` REGRESSION_NUM, `--regression-num` REGRESSION_NUM number of points used\n  in the initial linear`-regression-based` fitness estimate (default: 2)\n\n\n<!--\nA walk-through of an old version is included as a jupyter notebook in a previous version of the software [here](https://github.com/FangfeiLi05/PyFitSeq/blob/master/PyFitSeq_Walk_Through.ipynb).\n-->\n\n\n## Evolution Simulator\n\n`evo_simulator.py` simulates competitive pooled growth of lineages.\nThis simulation includes sampling noise from growth, \ncell transfers (bottlenecks), DNA extraction, PCR, and sequencing.\nFor example:\n\n    python evo_simulator.py -i input_EvoSimulation.csv \\\n        -t 0 3 6 9 12 -r 50 50 50 50 50 \\\n        -o output\n\n    python evo_simulator.py -i input_EvoSimulation.csv \\\n        -t 0 2 4 6 8 -r 75 75 75 75 50 \\\n        -n DNA_extraction PCR sequencing -d 300 -p 27 -f w \\\n        -o output\n\n### Options\n\n* `--input` or `-i`: a .csv file, with\n  + 1st column of .csv: fitness of each genotype, [x1, x2, ...]\n  + 2nd column .csv: initial cell number of each genotype at generation 0, \n    [n1, n2, ...]\n* `--t_seq` or `-t`: time-points evaluated in number of generations \n    (format: 0 t1 t2 ...)\n* `--read_num_average_seq` or `-r`: average number of reads per genotype \n    for each time-point (format: 0 r1 r2 ...)\n* `--noise_option` or `-n`: which types of noise to include in the simulation, \n    default is all sources of noise \n    (default: growth bottleneck_transfer DNA_extraction PCR sequencing)\n* `--dna_copies` or `-d`: average genome copy number per genotype used as \n    template in PCR (default: 500)\n* `--pcr_cycles` or `-p`: number of cycles of PCR (default: 25) \n* `--fitness_type` or `-f`: type of fitness: \n    Wrightian fitness (w), or Malthusian fitness (m)' (default: m)\n* `--output_filename` or `-o`: prefix of output .csv files (default: output),\n    this tool *AUTOMATICALLY* generates files named, for a `-o` option of \n    `output`:\n    + `output_filename_EvoSimulation_Read_Number.csv`: \n        read number per genotype for each time-point\n    + `output_filename_EvoSimulation_Mean_Fitness.csv`: \n        mean fitness for each time-point\n    + `output_filename_EvoSimulation_Input_Log.csv`: \n        a record of all inputs\n\nSee `python evo_simulator.py --help` for a reminder...\n\n\n\n# History of version of this software.\n\n1. PyFitSeq is a Python-based fitness estimation tool for pooled amplicon \n    sequencing studies. \n    The conceptual/math work and first implementation is described in the paper\n    [Unbiased Fitness Estimation of Pooled Barcode or Amplicon Sequencing Studies](https://doi.org/10.1016/j.cels.2018.09.004),\n    and this code is [available here](https://github.com/sashaflevy/Fit-Seq).\n2. This was rewritten in python, [available here](https://github.com/FangfeiLi05/PyFitSeq)\n    and is a python-translated version of the MATLAB tool \n    FitSeq above.\n3. This repo is a fork of that python version to fix some bugs and tweak the \n    speed, flexibility, and interface.\n    Also, changed the name to `fitseq` to reflect that it's the current\n    development version.\n    **Wrightian fitness does not yet work in this version**. Sorry.\n\n# Run from the base repo directory, so bash testing/test_singularity.sh\n# After building the image of course\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/darachm/fitseq",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fitseq",
    "package_url": "https://pypi.org/project/fitseq/",
    "platform": "",
    "project_url": "https://pypi.org/project/fitseq/",
    "project_urls": {
      "Homepage": "https://github.com/darachm/fitseq"
    },
    "release_url": "https://pypi.org/project/fitseq/1.5.0/",
    "requires_dist": [
      "numpy (>=1.17.3)",
      "pandas (>=0.25.3)",
      "scipy (>=1.3.1)",
      "tqdm"
    ],
    "requires_python": ">=3.6",
    "summary": "A utility for fitting lineage fitnesses within a pooled competition experiment, achieved by iteratively optimizing models of individual and population-average lineage fitness.",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12417779,
  "releases": {
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "333ea9e29e570dbb052112124f9d00a5ea05e5dcc9117f927bee1104cac2999a",
          "md5": "49a35a85c33655b39d281a3cbd7af744",
          "sha256": "0aa25a6c8c71ca56e6a3698bdee1e0ae410adfe8feb6135936cf544aa7e77008"
        },
        "downloads": -1,
        "filename": "fitseq-1.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49a35a85c33655b39d281a3cbd7af744",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22781,
        "upload_time": "2021-12-28T00:17:58",
        "upload_time_iso_8601": "2021-12-28T00:17:58.555528Z",
        "url": "https://files.pythonhosted.org/packages/33/3e/a9e29e570dbb052112124f9d00a5ea05e5dcc9117f927bee1104cac2999a/fitseq-1.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85395a857cfd952ad013cf351a50d94482814b2cfe533ad074ac4a22dc7f4c4f",
          "md5": "a272df5eed39e7d92bdd3642bcc4fd40",
          "sha256": "df7ed12c12af13a2d6ffc32d7f5dda45b5514e25a3df98fc8f1fab0db242e386"
        },
        "downloads": -1,
        "filename": "fitseq-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a272df5eed39e7d92bdd3642bcc4fd40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17904,
        "upload_time": "2021-12-28T00:18:00",
        "upload_time_iso_8601": "2021-12-28T00:18:00.323289Z",
        "url": "https://files.pythonhosted.org/packages/85/39/5a857cfd952ad013cf351a50d94482814b2cfe533ad074ac4a22dc7f4c4f/fitseq-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "333ea9e29e570dbb052112124f9d00a5ea05e5dcc9117f927bee1104cac2999a",
        "md5": "49a35a85c33655b39d281a3cbd7af744",
        "sha256": "0aa25a6c8c71ca56e6a3698bdee1e0ae410adfe8feb6135936cf544aa7e77008"
      },
      "downloads": -1,
      "filename": "fitseq-1.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "49a35a85c33655b39d281a3cbd7af744",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22781,
      "upload_time": "2021-12-28T00:17:58",
      "upload_time_iso_8601": "2021-12-28T00:17:58.555528Z",
      "url": "https://files.pythonhosted.org/packages/33/3e/a9e29e570dbb052112124f9d00a5ea05e5dcc9117f927bee1104cac2999a/fitseq-1.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85395a857cfd952ad013cf351a50d94482814b2cfe533ad074ac4a22dc7f4c4f",
        "md5": "a272df5eed39e7d92bdd3642bcc4fd40",
        "sha256": "df7ed12c12af13a2d6ffc32d7f5dda45b5514e25a3df98fc8f1fab0db242e386"
      },
      "downloads": -1,
      "filename": "fitseq-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a272df5eed39e7d92bdd3642bcc4fd40",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17904,
      "upload_time": "2021-12-28T00:18:00",
      "upload_time_iso_8601": "2021-12-28T00:18:00.323289Z",
      "url": "https://files.pythonhosted.org/packages/85/39/5a857cfd952ad013cf351a50d94482814b2cfe533ad074ac4a22dc7f4c4f/fitseq-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}