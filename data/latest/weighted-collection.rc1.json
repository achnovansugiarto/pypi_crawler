{
  "info": {
    "author": "Seth Alter",
    "author_email": "subalterngames@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development"
    ],
    "description": "# Weighted Collection\n\nA WeightedCollection assigns probability weights per elements and returns elements randomly using those weights.\n\nFor example: if \"anakin\" has a weight of 1, \"constantine\" a weight of 1, and \"xenophon\" a  weight of 2, then \"xenophon\" will be randomly selected 50% of the time, \"anakin\" 25% of the time, and \"xenophon\" 25% of the time.\n\n## Usage\n\n```python\nfrom weighted_collection.weighted_collection import WeightedCollection\n\nw = WeightedCollection(obj_type=str)\n\nw.add(\"anakin\", 1)\nw.add(\"constantine\", 1)\nw.add(\"xenophon\", 2)\n\n# 25% of the time, this will return \"anakin\", \n# 25% of the time \"constantine\",\n# 50% of the time \"xenophon\".\nprint(w.get())\n```\n\n## Requirements\n\nPython 3.6+\n\n## Installation\n\n```python\npip3 install weighted-collection\n```\n\n## WeightedCollection API\n\n#### `WeightedCollection()`\n\nThe constructor.\n\n```python\nw = WeightedCollection() # Default constructor.\n```\n\n```python\nw = WeightedCollection(obj_type=str) # All elements in the collection must be strings.\n```\n\n```python\nw = WeightedCollection(random_seed=0)\n```\n\n```python\nw = WeightedCollection(obj_type=str, random_seed=0)\n```\n\n| Parameter     | Type      | Description                                              | Optional | Default  |\n| ------------- | --------- | -------------------------------------------------------- | -------- | -------- |\n| `obj_type`    | `Type[T]` | The type of objects that can be added to the collection. |          | `object` |\n| `random_seed` | `int`     | The random number generator seed.                        |          | 0        |\n\n***\n\n#### `add(obj, weight)`\n\nTry to add an object to the collection.\n\n- The object's type must be the class or a subclass of the `obj_type` parameter in the constructor.\n- The object must not already be in the  collection.\n- The weight must be > 0.\n\n_Return: True if the object was added._\n\n```python \nw = WeightedCollection(obj_type=str)\n\nw.add(\"anakin\", 1) # Adds element \"anakin\" with a weight of 1. Returns True.\n\nw.add(\"anakin\", 3) # Returns False (object is already in the collecction).\n\nw.add(33, 1) # Returns False (wrong type).\n\nw.add(\"constantine\", -2) # Returns False (weight must be > 0).\n```\n\n| Parameter | Type                                                         | Description                                                | Optional | Default |\n| --------- | ------------------------------------------------------------ | ---------------------------------------------------------- | -------- | ------- |\n| `obj`     | `T` (the value of the `obj_type` parameter in the constructor) | The object. Must not already be in the WeightedCollection. |          |         |\n| `weight`  | `int`                                                        | The probability weight. Must be > 0.                       |          |         |\n\n***\n\n#### `add_many(objs)`\n\nTry to add many objects to the collection. \n\n_Return: A dictionary of each object and whether it was added to the collection._\n\n```python\nw = WeightedCollection(obj_type=str)\n\nresult = w.add_many({\"anakin\": 1, \"constantine\": 1, 33: 0, \"xenophon\": -1})\n\nprint(result) # {\"anakin\": True, \"constantine\": True, 33: False, \"xenophon\": False}\n```\n\n| Parameter | Type                                                         | Description                                                  | Optional | Default |\n| --------- | ------------------------------------------------------------ | ------------------------------------------------------------ | -------- | ------- |\n| `objs`    | `Dict[T, int]`<br>(`T` is the value of the `obj_type` parameter in the constructor) | A dictionary of objects. A dictionary of objects. Key = the object. Value = the probability weight.<br><br>See `add(obj, weight)` for object and weight requirements. |          |         |\n\n***\n\n#### `remove(obj)`\n\nRemove an object from the collection.\n\n_Return: True if the object was removed._\n\n```python\nw = WeightedCollection(obj_type=str)\n\nw.add(\"anakin\", 1)\n\nw.remove(\"anakin\") # Returns True.\nw.remove(\"constantine\") # Returns False.\n```\n\n| Parameter | Type                                                         | Description                   | Optional | Default |\n| --------- | ------------------------------------------------------------ | ----------------------------- | -------- | ------- |\n| `obj`     | `T` (the value of the `obj_type` parameter in the constructor) | The object in the collection. |          |         |\n\n***\n\n#### `get()`\n\n_Return: A randomly selected object using the probability weights per object._\n\n```python\nw = WeightedCollection(obj_type=str)\n\nw.add(\"anakin\", 1)\nw.add(\"constantine\", 1)\nw.add(\"xenophon\", 2)\n\n# 25% of the time, this will return \"anakin\", \n# 25% of the time \"constantine\",\n# 50% of the time \"xenophon\".\nprint(w.get())\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/subalterngames/weighted_collection/archive/v1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/subalterngames/weighted_collection",
    "keywords": "collection,random",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "weighted-collection",
    "package_url": "https://pypi.org/project/weighted-collection/",
    "platform": "",
    "project_url": "https://pypi.org/project/weighted-collection/",
    "project_urls": {
      "Download": "https://github.com/subalterngames/weighted_collection/archive/v1.0.tar.gz",
      "Homepage": "https://github.com/subalterngames/weighted_collection"
    },
    "release_url": "https://pypi.org/project/weighted-collection/1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A WeightedCollection assigns probability weights per elements and returns elements randomly using those weights.",
    "version": "1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7069389,
  "releases": {
    "1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77b51699f072746196ec08345de343892563cb287ab30351405ba2f42e014357",
          "md5": "bdd368f7849c0ddbb253c7d82eb09e72",
          "sha256": "51d3c9d98e0516848194febcaa89ba98af598a9532c04eed947daf434ab7384c"
        },
        "downloads": -1,
        "filename": "weighted_collection-1.tar.gz",
        "has_sig": false,
        "md5_digest": "bdd368f7849c0ddbb253c7d82eb09e72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3577,
        "upload_time": "2020-04-21T16:57:48",
        "upload_time_iso_8601": "2020-04-21T16:57:48.954011Z",
        "url": "https://files.pythonhosted.org/packages/77/b5/1699f072746196ec08345de343892563cb287ab30351405ba2f42e014357/weighted_collection-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77b51699f072746196ec08345de343892563cb287ab30351405ba2f42e014357",
        "md5": "bdd368f7849c0ddbb253c7d82eb09e72",
        "sha256": "51d3c9d98e0516848194febcaa89ba98af598a9532c04eed947daf434ab7384c"
      },
      "downloads": -1,
      "filename": "weighted_collection-1.tar.gz",
      "has_sig": false,
      "md5_digest": "bdd368f7849c0ddbb253c7d82eb09e72",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3577,
      "upload_time": "2020-04-21T16:57:48",
      "upload_time_iso_8601": "2020-04-21T16:57:48.954011Z",
      "url": "https://files.pythonhosted.org/packages/77/b5/1699f072746196ec08345de343892563cb287ab30351405ba2f42e014357/weighted_collection-1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}