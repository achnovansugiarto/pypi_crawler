{
  "info": {
    "author": "Adam David Walker",
    "author_email": "adam@wlkr.dev",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Vivify\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![Keep a Changelog v1.1.0 badge](https://img.shields.io/badge/changelog-Keep%20a%20Changelog%20v1.1.0-%23E05735)](./CHANGELOG.md)\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](code_of_conduct.md)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-%23FE5196?logo=conventionalcommits&logoColor=white)](https://conventionalcommits.org)\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![img](https://img.shields.io/badge/semver-2.0.0-green)](https://semver.org/)\n\n## Overview\n\nVivify is a lightweight Python library for INI style object initialisation. Using Vivify, you can instantiate classes and set attributes using values provided from an external configuration. Vivify supports both POD types as well as more complex objects and relationships. This is particularly useful in domains where the configuration is very closely coupled to the objects.\n\n## Installation\n\nInstalling Vivify is easy! Vivify is available on the Python Packaging Index. If you're using Poetry then `poetry add vivify`, otherwise:\n\n```shell\npip install vivify\n```\n\n## Usage\n\nThe snippets shown below are provided in full in the [examples directory](./examples/README.md) and demonstrate using an external configuration to instantiate some pre-defined classes. Further examples are also supplied in the examples directory.\n\nThis example showcases how Vivify supports complex relationships between classes. In this case, there is a bidirectional associative relationship between classes `A` and `B` and `B` has an additional variable of type `V`.\n\n```python\nclass V(list[int], Vivifiable):\n    @classmethod\n    def vivify(cls, object):\n        return cls(map(int, object.split(\",\")))\n\n\nclass A(object):\n    b: B\n\n\nclass B(object):\n    a: A\n    v: V\n```\n\nNote that in the code above we should specify the types of any instance variables. This is so that Vivify can instantiate the correct type for a specified variable, e.g. to distinguish between a string and a reference to another object in the configuration. It is also important that any attributes specified in the configuration should be settable (or at the very least an attempt to set the attribute should not fail).\n\nThe following configuration INI file (`example.ini`) contains the options we want to use to instantiate two instances of these classes named `foo` and `bar`.\n\n```ini\n[main]\nfoo = A\nbar = B\n\n[foo]\ni = 1\nb = bar\n\n[bar]\na = foo\nv = 1, 2, 3\n```\n\nThe `main` section where variables are named can be given any valid section name other than that which is reserved for supplying default values for sections - this is defined as `\"DEFAULT\"` in the standard [configuration file parsing library](https://docs.python.org/3/library/configparser.html). Note how the other section names correspond to the variable names provided in the `main` section.\n\n```python\n# initialise the config parser and read the ini file\nconfig = ConfigParser()\nwith open(\"example.ini\") as f:\n    config.read_file(f)\n\n# specify the valid objects for vivification\nvivifier = Vivifier(types=[A, B])\nvivified = vivifier.vivify(instances=\"main\", config=config)\n```\n\n```python\n# verify that the vivification occurred as expected\nassert isinstance(vivified[\"foo\"], A)\nassert isinstance(vivified[\"bar\"], B)\nassert vivified[\"foo\"].b == vivified[\"bar\"]\nassert vivified[\"bar\"].a == vivified[\"foo\"]\nassert vivified[\"bar\"].v == [1, 2, 3]\n```\n\n## Limitations\n\nMost simple cases should work without issue. Things get complicated and more care should be taken when there are multiple possible types for a value. Consider an attribute with the type annotation `Union[list[int], Optional[str]]`. With a configuration value of `None`, there are two possible ways this could be interpreted: (i) `None`, and (ii) `\"None\"` (because `str(None)` returns `\"None\"`). The `list[int]` annotation will be skipped because it is a parameterised generic and cannot be instantiated. Currently, the actual type chosen for the is entirely dependent on the ordering of the result of a call to `get_args` from the [typing extensions](https://github.com/python/typing_extensions) library. The first valid matching type is picked for setting the attributes value.\n\n```python\nfrom typing import Optional, Union\nfrom typing_extensions import get_args\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format=\"%(asctime)s [%(levelname)s] %(message)s\",\n    handlers=[logging.StreamHandler(sys.stdout)],\n)\n\nassert (\n    str(get_args(Union[list[int], Optional[str]]))\n    == \"(list[int], <class 'str'>, <class 'NoneType'>)\"\n)\n```\n\nIn this case, the value would be set to the string `\"None\"` because this matches first (after the invalid `list[int]`) and the permissive `str` type coercion accepts None as an argument.\n\nIf you are especially concerned about which type is used then it is a good idea to either make the typing more strict or use `Vivifiable` objects (preferred approaches) or alternatively check a call to `get_args` yourself on the type to verify that the implementation will work as you expect. Vivify provides extensive logging so you can see how variables are handled internally.\n\n## Licence\n\nCopyright Â© 2022 [Adam D Walker](mailto:adam@wlkr.dev)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wlkr/vivify",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "Adam David Walker",
    "maintainer_email": "adam@wlkr.dev",
    "name": "vivify",
    "package_url": "https://pypi.org/project/vivify/",
    "platform": null,
    "project_url": "https://pypi.org/project/vivify/",
    "project_urls": {
      "Documentation": "https://github.com/wlkr/vivify",
      "Homepage": "https://github.com/wlkr/vivify",
      "Repository": "https://github.com/wlkr/vivify"
    },
    "release_url": "https://pypi.org/project/vivify/1.0.1/",
    "requires_dist": [
      "typing-inspect (>=0.7.1,<0.8.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "A Python library for using INI files to instantiate classes.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14789693,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1658eb9be08a86728f7379a9a46ed1d39cd2b40e98c0bd305710d1285cce4888",
          "md5": "a81522ab0ad3645d95ac6ff388919421",
          "sha256": "ec6a989216075a986f8cc30ae89a5449bc9f54bea93c4a33417fc00923969639"
        },
        "downloads": -1,
        "filename": "vivify-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a81522ab0ad3645d95ac6ff388919421",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 11546,
        "upload_time": "2022-08-12T18:49:58",
        "upload_time_iso_8601": "2022-08-12T18:49:58.087144Z",
        "url": "https://files.pythonhosted.org/packages/16/58/eb9be08a86728f7379a9a46ed1d39cd2b40e98c0bd305710d1285cce4888/vivify-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33b9ed3c2be05c9592c34538fdd458742f0f8d4db34ce52922de0141dfc2ccaa",
          "md5": "d604f8741d5ff681ed9a48795b0f0ebc",
          "sha256": "e6b136d640b537d1819ce5fcdb4ed92ca4f8a2d74efabf51d9e566bb2774dec1"
        },
        "downloads": -1,
        "filename": "vivify-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d604f8741d5ff681ed9a48795b0f0ebc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 11503,
        "upload_time": "2022-08-12T18:50:00",
        "upload_time_iso_8601": "2022-08-12T18:50:00.410536Z",
        "url": "https://files.pythonhosted.org/packages/33/b9/ed3c2be05c9592c34538fdd458742f0f8d4db34ce52922de0141dfc2ccaa/vivify-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c87851dd3b821b849025787c7d988891961c263222fa55ef6b25a5edca7017f",
          "md5": "4fc0c40c167cb5dcbbe20d4484e26e1b",
          "sha256": "c9ec75268f95ce2c46ea7d9fc11d6f29589fb22cfbdb94139db51535d8e1097d"
        },
        "downloads": -1,
        "filename": "vivify-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fc0c40c167cb5dcbbe20d4484e26e1b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 11594,
        "upload_time": "2022-08-17T15:07:04",
        "upload_time_iso_8601": "2022-08-17T15:07:04.403957Z",
        "url": "https://files.pythonhosted.org/packages/3c/87/851dd3b821b849025787c7d988891961c263222fa55ef6b25a5edca7017f/vivify-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3dbfe18cb5351adbb383b8fb1fbc55cee02cdcc762ea3e8751a5c6e6076aa0d",
          "md5": "11e857f142bfab19bcaa3b6336f009f1",
          "sha256": "92e872b563ab201174a21eb67d8650580bd34b9bf306af154d168d0759284f6d"
        },
        "downloads": -1,
        "filename": "vivify-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "11e857f142bfab19bcaa3b6336f009f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 11543,
        "upload_time": "2022-08-17T15:07:06",
        "upload_time_iso_8601": "2022-08-17T15:07:06.226725Z",
        "url": "https://files.pythonhosted.org/packages/c3/db/fe18cb5351adbb383b8fb1fbc55cee02cdcc762ea3e8751a5c6e6076aa0d/vivify-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c87851dd3b821b849025787c7d988891961c263222fa55ef6b25a5edca7017f",
        "md5": "4fc0c40c167cb5dcbbe20d4484e26e1b",
        "sha256": "c9ec75268f95ce2c46ea7d9fc11d6f29589fb22cfbdb94139db51535d8e1097d"
      },
      "downloads": -1,
      "filename": "vivify-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4fc0c40c167cb5dcbbe20d4484e26e1b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 11594,
      "upload_time": "2022-08-17T15:07:04",
      "upload_time_iso_8601": "2022-08-17T15:07:04.403957Z",
      "url": "https://files.pythonhosted.org/packages/3c/87/851dd3b821b849025787c7d988891961c263222fa55ef6b25a5edca7017f/vivify-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3dbfe18cb5351adbb383b8fb1fbc55cee02cdcc762ea3e8751a5c6e6076aa0d",
        "md5": "11e857f142bfab19bcaa3b6336f009f1",
        "sha256": "92e872b563ab201174a21eb67d8650580bd34b9bf306af154d168d0759284f6d"
      },
      "downloads": -1,
      "filename": "vivify-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "11e857f142bfab19bcaa3b6336f009f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 11543,
      "upload_time": "2022-08-17T15:07:06",
      "upload_time_iso_8601": "2022-08-17T15:07:06.226725Z",
      "url": "https://files.pythonhosted.org/packages/c3/db/fe18cb5351adbb383b8fb1fbc55cee02cdcc762ea3e8751a5c6e6076aa0d/vivify-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}