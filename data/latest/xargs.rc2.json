{
  "info": {
    "author": "Maco",
    "author_email": "macohong@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "#### xform\n表单数据绑定验证框架，支持Tornado(默认)、aiohttp、sanic、flask，可自行扩展支持其它的python web框架\n\n------\n\n#### 版本要求\n\n------\n\n目前已支持的web框架\n\n| Web框架          | Python版本    | 备注                           |\n| ---------------- | ------------- | ------------------------------ |\n| Tornado >= 6.0.0 | python >= 3.6 |                                |\n| Aiohttp >= 3.6.0 | python >= 3.7 | aiohttp对python最低支持版本3.7 |\n| Sanic >= 19.3    | python >= 3.6 |                                |\n| Flask>=2.0.1     | python >= 3.6 |                                |\n\n#### 获取安装\n\n```bash\n# 已发布在pypi的地址\npip3 install xargs\npip3 install https://github.com/marcohong/xform/archive/v0.5.0.tar.gz\n# 或者使用最新版本\npip3 install git+https://github.com/marcohong/xform.git\n```\n\n#### 使用示例\n\n------\n\nFlask示例，只支持2.0以上\n\n```python\nfrom flask import request\nfrom flask import Flask\nfrom xform.httputil import HttpRequest\nfrom xform.adapters.flask import FlaskRequest #引入Flask的适配器\nfrom xform.form import SubmitForm\nfrom xform import fields\nHttpRequest.configure(request_proxy=FlaskRequest) # 全局设置Request的代理为FlaskRequest\n\napp = Flask(__name__)\n\n# 表单声明(也可以使用继承Form实现)\nform = SubmitForm(\n    id=fields.Integer(required=True, _min=1),\n    name=fields.Str(required=True, length=(3, 20))\n)\n\n@app.route('/', methods=['GET', 'POST'])\nasync def index():\n    # 注意表单之前获取过body数据可能会影响get_data取不到数据(因为缓冲区数据已被flask删除)\n    # locations:获取数据方式仅限于指定的作用域，locations可以是str或者tuple\n    # 作用域: form/json/query/headers/cookies，组合使用例如locations=('form','json')\n    # data, error = await self.form.bind(self, locations='json')\n    data, error = await form.bind(request)\n    if error:\n        return {'error': error}\n    return {'data': data}\n\nif __name__ == '__main__':\n    app.run(port=8888)\n\n# curl -X POST http://127.0.0.1:8888/ -d '{\"id\": 12, \"name\": \"hello1\"}' -H \"Content-type: application/json\"\n# curl -X POST http://127.0.0.1:8888/ -d 'id=2&name=hello2'\n# curl http://127.0.0.1:8888/\\?id\\=12\\&name\\=hello3\n```\n\nTornado示例，更多demo请查看examples文件夹\n\n```python\nfrom xform import fields\nfrom xform import schema\nfrom xform.form import SubmitForm\n\n# 使用Schema可结合fields.Nested嵌套对象，支持多层嵌套对象\nclass UserSchema(schema.Schema):\n    uid = fields.Integer(required=True)\n    name = fields.Username(required=True, length=(4, 20))\n    # group = fields.Nested(GroupSchema)\n\nform = SubmitForm(\n        id=fields.Integer(required=True, _min=1),\n        name=fields.Str(required=True),\n        # when_field 当表单某一个字段的值在when_value中定义 则强制变为必填(required=True)\n        password = fields.Password(required=False, when_field='id', when_value=lambda x: x and int(x) > 10)\n        # 如果表单提交类型的是json按照字典方式传值即可，否则使用user.uid=xxx方式传值\n        user=fields.Nested(UserSchema, required=False)\n)\n\nasync def index():\n    data, error = await form.bind(self)\n  \n# curl http://localhost:8888 -X POST -d \"id=1&name=test&user.name=user&user.uid=2\"\n```\n\n自定义的提示(3种方式)\n\n```python\n'''\n1.替换提示内容\n'''\nfrom xform.messages import ErrMsg\n# ErrMsg.set_messages在导入fields/validator之前执行\nErrMsg.set_messages({'invalid_start_date': 'time invalid'})\nfrom xform import fields\n\n'''\n2.使用国际化文件message.po\n默认情况下是使用tornado的locale.translate('xxx')\n请把messages.py定义的value翻译即可，例如:\nmsgid \"Length must be between %s and %s\" (注意%s不能少)\nmsgstr \"长度必须在%s到%s之间\"\n'''\nfrom xform import fields\n# coding...\n\n'''\n3.替换提示内容，后再使用国际化，请根据第1步在导入fields/validator之前设置，\n国际化文件message.po定义相对应替换后的内容即可\n'''\n\n\n```\n\ndemo\n\n```bash\ncd examples/\n# test tornado\npython3 test_tornado.py\n# test aiohttp web\npython3 test_aiohttp.py\n# test sanic web\npython3 test_sanic.py\n...\n\n```\n\n#### 扩展组件\n\n------\n\n##### 自定义fields类型\n\n```python\nimport re\nfrom typing import Optional, Any\nfrom xform.fields import Integer, Str, VALUE_TYPES\nfrom xform.form import SubmitForm\n'''\n实现_validate方法即可，如果返回值需要转换则重写get_value方法\n'''\nclass UserField(Integer):\n    # 不需要转换，因为返回值是一个缓存对象\n    cvt_type = None\n\n    def add_err_msg(self) -> None:\n        self.err_msg.update({'not_exist': 'User does not exist'})\n\n    async def _validate(self,\n                        value: VALUE_TYPES,\n                        attr: str,\n                        data: dict) -> Optional[dict]:\n        # 假设UserCache.get返回的是一个缓存对象\n        data = await UserCache.get(value)\n        # 错误时调用self.set_error('xxx')设置错误提示语，不需要返回内容，成功时返回内容\n        if not data:\n            self.set_error('not_exist')\n        else:\n            # 返回的是缓存对象\n            return data\n\nclass OrderNOField(Str):\n    regex = r'^[a-zA-Z0-9_]+$'\n\n    def add_err_msg(self) -> None:\n        self.err_msg.update({'invalid': 'Invalid order'})\n\n    def __init__(self,\n                 *,\n                 length: tuple = 20,\n                 **kwargs: Any):\n        kwargs['length'] = length\n        super().__init__(**kwargs)\n\n    async def _validate(self,\n                        value: VALUE_TYPES,\n                        attr: str,\n                        data: dict) -> Optional[str]:\n        ret = re.match(self.regex, value)\n        if not ret:\n            self.set_error('invalid')\n            return\n        return value\n\n# user_id是表单提交的字段(data_key是可选的，如果为空则使用user作为表单字段)\nform = SubmitForm(\n    user=UserField(data_key='user_id', required=True),\n    order_no=OrderNOField(required=True)\n)\n```\n\n##### 自定义的validator验证\n\n```python\nfrom xform.fields import Str\nfrom xform.validate import Validator, ValidationError\n#参考OneOf\nclass OneOf(Validator):\n    default_message = ErrMsg.get_message('invalid_option')\n\n    def __init__(self, choices: Union[list, tuple], error: str = None):\n        self.choices = choices\n        self.error = error or self.default_message\n\n    def __call__(self, value: Union[str, int]):\n        '''\n        call方法实现逻辑\n        '''\n        if value is None or value not in self.choices:\n            # 验证错误时请抛出ValidationError错误\n            raise ValidationError(self.error)\n        return value\n\n# 使用validate\nform = SubmitForm(\n    tag=Str(required=True, validate=OneOf(('bule', 'red', 'green')))\n)\n```\n\n##### 其它web框架支持\n\n```python\n'''\nTornado为例\n'''\nfrom xform.httputil import BaseRequest\nclass TornadoRequest(BaseRequest):\n    def __init__(self, request):\n        super().__init__(request)\n\n    def get_argument(self,\n                     name: str,\n                     default: Any = None) -> Optional[str]:\n        return self.request.get_argument(name, default=default)\n\n    def get_from_header(self,\n                        name: str,\n                        default: Any = None) -> Optional[dict]:\n        return self.request.request.headers.get(name, default)\n\n    def translate(self, message: str) -> str:\n        return self.request.locale.translate(message)\n    # ...实现BaseRequest里面的方法，\n    # 详细实现请参考xform.adapters.tornado.TornadoRequest\n\n# 启动web服务前设置一下xform的request代理(不设置默认Tornado)，以aiohttp为例\nfrom xform.httputil import HttpRequest\nfrom xform.adapters.aiohttp import AioHttpRequest\nHttpRequest.configure(request_proxy=AioHttpRequest)\n# Coding...\n```\n\n#### License\n\n------\n\n`xfrom` is offered under the MIT license.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marcohong/xform",
    "keywords": "Form validation,Data Binding,Tornado web,aiohttp web,Sanic web",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xargs",
    "package_url": "https://pypi.org/project/xargs/",
    "platform": null,
    "project_url": "https://pypi.org/project/xargs/",
    "project_urls": {
      "Homepage": "https://github.com/marcohong/xform"
    },
    "release_url": "https://pypi.org/project/xargs/0.5.0/",
    "requires_dist": [
      "multidict",
      "attrs"
    ],
    "requires_python": ">=3.6",
    "summary": "Binding form data validation framework.",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14915541,
  "releases": {
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a2260232e7a997db2bfae6e8993390670405d28739a9eda34ccc559afdc8258",
          "md5": "7b7fe5d7b05e725a15cd68e302f4b82b",
          "sha256": "2c0345eb72c4db5a02ffe353797c5df6f26a99e784c4878e3aa46dd4e5ddbb79"
        },
        "downloads": -1,
        "filename": "xargs-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b7fe5d7b05e725a15cd68e302f4b82b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24861,
        "upload_time": "2021-05-24T18:44:35",
        "upload_time_iso_8601": "2021-05-24T18:44:35.678974Z",
        "url": "https://files.pythonhosted.org/packages/8a/22/60232e7a997db2bfae6e8993390670405d28739a9eda34ccc559afdc8258/xargs-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "191c235df82143b0b89b56a03fd0c106ff420d2c2743185a939eec2dff7b9881",
          "md5": "1b7afdbde971f4fbb4681efc9fa4d9b1",
          "sha256": "f201760c262049db27047005673420ef3ed0f99b2e90215d3102d0d85a1abdf2"
        },
        "downloads": -1,
        "filename": "xargs-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1b7afdbde971f4fbb4681efc9fa4d9b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17568,
        "upload_time": "2021-05-24T18:44:38",
        "upload_time_iso_8601": "2021-05-24T18:44:38.047233Z",
        "url": "https://files.pythonhosted.org/packages/19/1c/235df82143b0b89b56a03fd0c106ff420d2c2743185a939eec2dff7b9881/xargs-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89c53e7770c54842b1788a231a59ada77eeb86c3c90d5cdefdfd4057fb78a9ee",
          "md5": "faddcbf38349535b96bbe95b885a3f95",
          "sha256": "df6b577d63ef240cd0194db04d7835f5249d1c5c9db0aef89fcc0328b5360c45"
        },
        "downloads": -1,
        "filename": "xargs-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "faddcbf38349535b96bbe95b885a3f95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21558,
        "upload_time": "2022-08-28T16:01:12",
        "upload_time_iso_8601": "2022-08-28T16:01:12.037891Z",
        "url": "https://files.pythonhosted.org/packages/89/c5/3e7770c54842b1788a231a59ada77eeb86c3c90d5cdefdfd4057fb78a9ee/xargs-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f42d019eacd8c7051be4d2d049a5731531dccddc8e3fa265ed96de3c3a5770f",
          "md5": "1e0f6d808b2d2942d7257c7c16359da9",
          "sha256": "8b2c185b4ff751304b3a07ff1e5af036e1defcd2a9b33387c1987fab783fbf31"
        },
        "downloads": -1,
        "filename": "xargs-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e0f6d808b2d2942d7257c7c16359da9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18065,
        "upload_time": "2022-08-28T16:01:14",
        "upload_time_iso_8601": "2022-08-28T16:01:14.032368Z",
        "url": "https://files.pythonhosted.org/packages/5f/42/d019eacd8c7051be4d2d049a5731531dccddc8e3fa265ed96de3c3a5770f/xargs-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89c53e7770c54842b1788a231a59ada77eeb86c3c90d5cdefdfd4057fb78a9ee",
        "md5": "faddcbf38349535b96bbe95b885a3f95",
        "sha256": "df6b577d63ef240cd0194db04d7835f5249d1c5c9db0aef89fcc0328b5360c45"
      },
      "downloads": -1,
      "filename": "xargs-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "faddcbf38349535b96bbe95b885a3f95",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21558,
      "upload_time": "2022-08-28T16:01:12",
      "upload_time_iso_8601": "2022-08-28T16:01:12.037891Z",
      "url": "https://files.pythonhosted.org/packages/89/c5/3e7770c54842b1788a231a59ada77eeb86c3c90d5cdefdfd4057fb78a9ee/xargs-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f42d019eacd8c7051be4d2d049a5731531dccddc8e3fa265ed96de3c3a5770f",
        "md5": "1e0f6d808b2d2942d7257c7c16359da9",
        "sha256": "8b2c185b4ff751304b3a07ff1e5af036e1defcd2a9b33387c1987fab783fbf31"
      },
      "downloads": -1,
      "filename": "xargs-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1e0f6d808b2d2942d7257c7c16359da9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18065,
      "upload_time": "2022-08-28T16:01:14",
      "upload_time_iso_8601": "2022-08-28T16:01:14.032368Z",
      "url": "https://files.pythonhosted.org/packages/5f/42/d019eacd8c7051be4d2d049a5731531dccddc8e3fa265ed96de3c3a5770f/xargs-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}