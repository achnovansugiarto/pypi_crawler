{
  "info": {
    "author": "Tom Aarsen",
    "author_email": "cubiegamedev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# TwitchWebsocket\nPython Wrapper for easily connecting to Twitch and setting up a chat bot.\n\n---\n\n# Input\nThis module will require the following information to be passed:\n\n| **Type**       | **Explanation** | **Example**                            | **Variable Name** | **Required?** |\n| -------------- | ---------------- | ---------------------- | ----------------- | ------------- |\n| Host           | The socket host | \"irc.chat.twitch.tv\"                   | host | Y |\n| Port           | The socket port | 6667                                   | port | Y |\n| Channel        | The channel to connect to | \"#CubieDev\"                            | chan | Y |\n| Nickname       | The name of the bot | \"CubieB0T\"                             | nick | Y |\n| Authentication | The authentication of the bot | \"oauth:pivogip8ybletucqdz4pkhag6itbax\" | auth | Y |\n| Callback       | The function that gets called with all messages | Any function which receives one param  | callback | Y |\n| Capability | List of extra information to be requested from Twitch. (See Twitch docs) | [\"membership\", \"tags\", \"commands\"] | capability | N |\n| Live | Whether the outputs should actually be sent or only printed in the console | True | live | N |\n\n*Note that the example OAuth token is not an actual token, but merely a generated string to give an indication what it might look like.*\n\nI got my real OAuth token from https://twitchapps.com/tmi/.\n\n---\n\n# Output\nThe callback function will be given back a Message object. This object has no methods and is merely parsed storage of the information given by Twitch. It has the following variables (assuming m is a Message object):\n\n**Variable**    | **Type**  | **Example Data** |\n--------------- | --------- | ---------------- |\n m.full_message | str       | @badges=broadcaster/1;color=#00FF7F;display-name=CubieDev;emotes=;flags=;id=3d623460-0bcb-4e65-9167-4b8d435e768d;mod=0;room-id=94714716;subscriber=0;tmi-sent-ts=1551617354820;turbo=0;user-id=94714716;user-type= :cubiedev!cubiedev@cubiedev.tmi.twitch.tv PRIVMSG #cubiedev :This is a test message for clarification purposes |\n m.tags         | dict      | {'badges': 'broadcaster/1', 'color': '#00FF7F', 'display-name': 'CubieDev', 'emotes': '', 'flags': '', 'id': '3d623460-0bcb-4e65-9167-4b8d435e768d', 'mod': '0', 'room-id': '94714716', 'subscriber': '0', 'tmi-sent-ts': '1551617354820', 'turbo': '0', 'user-id': '94714716', 'user-type': ''} |\n m.command      | str       | cubiedev!cubiedev@cubiedev.tmi.twitch.tv PRIVMSG #cubiedev |\n m.user         | str       | cubiedev |\n m.type         | str       | PRIVMSG |\n m.params       | str       | #cubiedev |\n m.channel      | str       | cubiedev |\n m.message      | str       | This is a test message for clarification purposes |\n\nWhat these variables hold is shown here:\n\n    # How messages are parsed, and what the Message class attributes represent:\n    # @badges=subscriber/0;color=#00FF7F;display-name=CubieDev;emotes=;flags=;id=d315b88f-7813-467a-a1fc-418b00d4d5ee;mod=0;room-id=70624819;subscriber=1;tmi-sent-ts=1550060037421;turbo=0;user-id=94714716;user-type= :cubiedev!cubiedev@cubiedev.tmi.twitch.tv PRIVMSG #flackblag :Hello World!\n    # |                                                                                                                                                                                                               |  |      |                                 |     | |        |  |          |\n    # +---------------------------------------------------------------------------------------------------[ TAGS ]----------------------------------------------------------------------------------------------------+  [ USER ]                                 [TYPE ] [ PARAMS ]  [ MESSAGE  ]\n\n    # |                                                                                                                                                                                                                 |                                                          |             |\n    # |                                                                                                                                                                                                                 +-----------------------[ COMMAND ]------------------------+             |\n    # |                                                                                                                                                                                                                                                                                          |\n    # +-------------------------------------------------------------------------------------------------------------------------------------[ FULL_MESSAGE ]-------------------------------------------------------------------------------------------------------------------------------------+\n\nPrinting out the Message object also gives some information on what everything means:\n```\nfull_message: @badges=broadcaster/1;color=#00FF7F;display-name=CubieDev;emotes=;flags=;id=3d623460-0bcb-4e65-9167-4b8d435e768d;mod=0;room-id=94714716;subscriber=0;tmi-sent-ts=1551617354820;turbo=0;user-id=94714716;user-type= :cubiedev!cubiedev@cubiedev.tmi.twitch.tv PRIVMSG #cubiedev :This is a test message for clarification purposes\n        tags: {'badges': 'broadcaster/1', 'color': '#00FF7F', 'display-name': 'CubieDev', 'emotes': '', 'flags': '', 'id': '3d623460-0bcb-4e65-9167-4b8d435e768d', 'mod': '0', 'room-id': '94714716', 'subscriber': '0', 'tmi-sent-ts': '1551617354820', 'turbo': '0', 'user-id': '94714716', 'user-type': ''}\n        command: cubiedev!cubiedev@cubiedev.tmi.twitch.tv PRIVMSG #cubiedev\n                user: cubiedev\n                type: PRIVMSG\n                params: #cubiedev\n        message: This is a test message for clarification purposes\n```\n\n---\n\n# Usage:\n```python\nclass MyBot:\n    def __init__(self):\n        self.host = \"irc.chat.twitch.tv\"\n        self.port = 6667\n        self.chan = \"#<channel_name>\"\n        self.nick = \"<user_name>\"\n        self.auth = \"oauth:<authentication>\"\n\n        # Send along all required information, and the bot will start \n        # sending messages to your callback function. (self.message_handler in this case)\n        self.ws = TwitchWebsocket(host=self.host, \n                                  port=self.port,\n                                  chan=self.chan,\n                                  nick=self.nick,\n                                  auth=self.auth,\n                                  callback=self.message_handler,\n                                  capability=[\"membership\", \"tags\", \"commands\"],\n                                  live=True)\n        self.ws.start_blocking()\n        # Any code after this will be executed after a KeyboardInterrupt\n\n    def message_handler(self, m):\n        # Create your bot functionality here.\n        pass\n\nif __name__ == \"__main__\":\n    MyBot()\n```\n| **Method with Parameters** | **Meaning** |\n| -------------------------- | ----------- |\n| ws = TwitchWebsocket(str host, str port, function message_handler, bool live) | message_handler is a function or method which will receive a Message object. If live is true, then any messages sent with ws.send_message() will appear in chat, otherwise they will just be printed out in the console. |\n| ws.login(str nick, str auth) | Logs in to Twitch using the username and authentication |\n| ws.join_channel(str channel) | Joins the channel |\n| ws.add_capability(str capability) | Adds a single [capability](https://dev.twitch.tv/docs/irc/membership/). |\n| ws.add_capability(list capabilities) | Adds all [capabilities](https://dev.twitch.tv/docs/irc/membership/) in the list. |\n| ws.leave() | Leave a channel |\n| ws.send_pong() | Send Pong. This is already done automatically upon receiving a Ping. |\n| ws.send_ping() | Send a Ping. Can be useful for testing connectivity. |\n| ws.send_message(str message) | Send message to Twitch Chat. | \n| ws.send_whisper(str sender, str message) | Whisper sender with message |\n\n---\n# My personal Twitch Bot Template\n```python\nfrom TwitchWebsocket import TwitchWebsocket\nimport json\n\nclass Settings:\n    def __init__(self, bot):\n        try:\n            # Try to load the file using json.\n            # And pass the data to the MyBot class instance if this succeeds.\n            with open(\"settings.txt\", \"r\") as f:\n                settings = f.read()\n                data = json.loads(settings)\n                bot.set_settings(data['Host'],\n                                data['Port'],\n                                data['Channel'],\n                                data['Nickname'],\n                                data['Authentication'])\n        except ValueError:\n            raise ValueError(\"Error in settings file.\")\n        except FileNotFoundError:\n            # If the file is missing, create a standardised settings.txt file\n            # With all parameters required.\n            with open('settings.txt', 'w') as f:\n                standard_dict = {\n                                    \"Host\": \"irc.chat.twitch.tv\",\n                                    \"Port\": 6667,\n                                    \"Channel\": \"#<channel>\",\n                                    \"Nickname\": \"<name>\",\n                                    \"Authentication\": \"oauth:<auth>\"\n                                }\n                f.write(json.dumps(standard_dict, indent=4, separators=(',', ': ')))\n                raise ValueError(\"Please fix your settings.txt file that was just generated.\")\n\nclass MyBot:\n    def __init__(self):\n        self.host = None\n        self.port = None\n        self.chan = None\n        self.nick = None\n        self.auth = None\n\n        # Fill previously initialised variables with data from the settings.txt file\n        Settings(self)\n\n        self.ws = TwitchWebsocket(host=self.host, \n                                  port=self.port,\n                                  chan=self.chan,\n                                  nick=self.nick,\n                                  auth=self.auth,\n                                  callback=self.message_handler,\n                                  capability=[\"membership\", \"tags\", \"commands\"],\n                                  live=False)\n        self.ws.start_blocking()\n\n    def set_settings(self, host, port, chan, nick, auth):\n        self.host = host\n        self.port = port\n        self.chan = chan\n        self.nick = nick\n        self.auth = auth\n\n    def message_handler(self, m):\n        if m.type == \"PRIVMSG\":\n            pass\n\nif __name__ == \"__main__\":\n    MyBot()\n```\n---\n\n# Example\n\nHere's a list of some personal projects of mine implementing this library.\n* [TwitchMarkovChain](https://github.com/CubieDev/TwitchMarkovChain)\n* [TwitchAIDungeon](https://github.com/CubieDev/TwitchAIDungeon)\n* [TwitchGoogleTranslate](https://github.com/CubieDev/TwitchGoogleTranslate)\n* [TwitchCubieBotGUI](https://github.com/CubieDev/TwitchCubieBotGUI)\n* [TwitchCubieBot](https://github.com/CubieDev/TwitchCubieBot)\n* [TwitchRandomRecipe](https://github.com/CubieDev/TwitchRandomRecipe)\n* [TwitchUrbanDictionary](https://github.com/CubieDev/TwitchUrbanDictionary)\n* [TwitchRhymeBot](https://github.com/CubieDev/TwitchRhymeBot)\n* [TwitchWeather](https://github.com/CubieDev/TwitchWeather)\n* [TwitchDeathCounter](https://github.com/CubieDev/TwitchDeathCounter)\n* [TwitchSuggestDinner](https://github.com/CubieDev/TwitchSuggestDinner)\n* [TwitchPickUser](https://github.com/CubieDev/TwitchPickUser)\n* [TwitchSaveMessages](https://github.com/CubieDev/TwitchSaveMessages)\n* [TwitchMMLevelPickerGUI](https://github.com/CubieDev/TwitchMMLevelPickerGUI) (Mario Maker 2 specific bot)\n* [TwitchMMLevelQueueGUI](https://github.com/CubieDev/TwitchMMLevelQueueGUI) (Mario Maker 2 specific bot)\n* [TwitchPackCounter](https://github.com/CubieDev/TwitchPackCounter) (Streamer specific bot)\n* [TwitchDialCheck](https://github.com/CubieDev/TwitchDialCheck) (Streamer specific bot)\n* [TwitchSendMessage](https://github.com/CubieDev/TwitchSendMessage) (Meant for debugging purposes)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CubieDev/TwitchWebsocket",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TwitchWebsocket",
    "package_url": "https://pypi.org/project/TwitchWebsocket/",
    "platform": "",
    "project_url": "https://pypi.org/project/TwitchWebsocket/",
    "project_urls": {
      "Homepage": "https://github.com/CubieDev/TwitchWebsocket"
    },
    "release_url": "https://pypi.org/project/TwitchWebsocket/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Python Wrapper for easily connecting to Twitch and setting up a chat bot.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11838659,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "280a972297243acdf1c39aa0cd8a00ca8c95ef0aa205de18dab733b60e5593cb",
          "md5": "6f0746a035f87c370695dd4a9e360ffc",
          "sha256": "092f910082373b3681e1332c4e427b3cd040b1c312e0b1817b50732ce8e3574d"
        },
        "downloads": -1,
        "filename": "TwitchWebsocket-1.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f0746a035f87c370695dd4a9e360ffc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 11900,
        "upload_time": "2021-10-13T17:43:26",
        "upload_time_iso_8601": "2021-10-13T17:43:26.744883Z",
        "url": "https://files.pythonhosted.org/packages/28/0a/972297243acdf1c39aa0cd8a00ca8c95ef0aa205de18dab733b60e5593cb/TwitchWebsocket-1.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78873a6e8e99b05a1af0fa9c9cc58acae11fb0ffcd007e05f8472ee582bcf97b",
          "md5": "5823ede96bb850b238b97d88d49782ce",
          "sha256": "1053ee0a3fd6e270d5cbeedd4b56c455f1d013c27ac2b60d0fbc95e7d949c59d"
        },
        "downloads": -1,
        "filename": "TwitchWebsocket-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5823ede96bb850b238b97d88d49782ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 14599,
        "upload_time": "2021-10-13T17:43:29",
        "upload_time_iso_8601": "2021-10-13T17:43:29.156882Z",
        "url": "https://files.pythonhosted.org/packages/78/87/3a6e8e99b05a1af0fa9c9cc58acae11fb0ffcd007e05f8472ee582bcf97b/TwitchWebsocket-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fed84dcd312dd333f1e0664afb9a91672a684d188eb2dc18c1e6deb4901364d7",
          "md5": "875362bd45d04ae5a9f96a2b82fd9cc1",
          "sha256": "f24a12b7bf68d9e348abeb317b63710813b44e8aadbebacdfd1077a8e5bcdfbd"
        },
        "downloads": -1,
        "filename": "TwitchWebsocket-1.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "875362bd45d04ae5a9f96a2b82fd9cc1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.0",
        "size": 11897,
        "upload_time": "2021-10-26T18:54:16",
        "upload_time_iso_8601": "2021-10-26T18:54:16.481385Z",
        "url": "https://files.pythonhosted.org/packages/fe/d8/4dcd312dd333f1e0664afb9a91672a684d188eb2dc18c1e6deb4901364d7/TwitchWebsocket-1.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "280689e4ff964a7c9ca9e098d9cf9dd4fb09b3e32c5578d51f0ab27f0164bd80",
          "md5": "a70fdede8e32b3ec0ddaf21d64286ac0",
          "sha256": "b43d6981a691468ee49eff261d9120a75f2a4d895fabeb9813910e0b32742cef"
        },
        "downloads": -1,
        "filename": "TwitchWebsocket-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a70fdede8e32b3ec0ddaf21d64286ac0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 15029,
        "upload_time": "2021-10-26T18:54:18",
        "upload_time_iso_8601": "2021-10-26T18:54:18.563472Z",
        "url": "https://files.pythonhosted.org/packages/28/06/89e4ff964a7c9ca9e098d9cf9dd4fb09b3e32c5578d51f0ab27f0164bd80/TwitchWebsocket-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fed84dcd312dd333f1e0664afb9a91672a684d188eb2dc18c1e6deb4901364d7",
        "md5": "875362bd45d04ae5a9f96a2b82fd9cc1",
        "sha256": "f24a12b7bf68d9e348abeb317b63710813b44e8aadbebacdfd1077a8e5bcdfbd"
      },
      "downloads": -1,
      "filename": "TwitchWebsocket-1.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "875362bd45d04ae5a9f96a2b82fd9cc1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 11897,
      "upload_time": "2021-10-26T18:54:16",
      "upload_time_iso_8601": "2021-10-26T18:54:16.481385Z",
      "url": "https://files.pythonhosted.org/packages/fe/d8/4dcd312dd333f1e0664afb9a91672a684d188eb2dc18c1e6deb4901364d7/TwitchWebsocket-1.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "280689e4ff964a7c9ca9e098d9cf9dd4fb09b3e32c5578d51f0ab27f0164bd80",
        "md5": "a70fdede8e32b3ec0ddaf21d64286ac0",
        "sha256": "b43d6981a691468ee49eff261d9120a75f2a4d895fabeb9813910e0b32742cef"
      },
      "downloads": -1,
      "filename": "TwitchWebsocket-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a70fdede8e32b3ec0ddaf21d64286ac0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 15029,
      "upload_time": "2021-10-26T18:54:18",
      "upload_time_iso_8601": "2021-10-26T18:54:18.563472Z",
      "url": "https://files.pythonhosted.org/packages/28/06/89e4ff964a7c9ca9e098d9cf9dd4fb09b3e32c5578d51f0ab27f0164bd80/TwitchWebsocket-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}