{
  "info": {
    "author": "Spencer Tomarken",
    "author_email": "stomarken@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Spelunk\nSpelunk is a module containing tools for recursively exploring and manipulating python objects.\n\n\n## Installation\nTo install spelunk, simply install with `pip install spelunk`. See below for details on how to install \nthe project for development.\n\n\n## Overview\nThis section will review the major utilities of spelunk.\n### 1. Printing an object's tree\n```python\nfrom spelunk import print_obj_tree\n\nclass A:\n   def __init__(self):\n      self.val = 'val'\n    \n   def __repr__(self):\n      return f'A(val={self.val})'\n \nobj = {'key': [1, (2.0,), {3}, frozenset((4,)), {'subkey': [(1,), A()]}]}\n\nprint_obj_tree(root_obj=obj)\n# ROOT -> {'key': [1, (2.0,), ...]}\n# ROOT['key'] -> [1, (2.0,), ...]\n# ROOT['key'][0] -> 1\n# ROOT['key'][1] -> (2.0,)\n# ROOT['key'][1][0] -> 2.0\n# ROOT['key'][2] -> {3}\n# ROOT['key'][2]{id=4315240816} -> 3\n# ROOT['key'][3] -> frozenset({4})\n# ROOT['key'][3]{id=4315240848} -> 4\n# ROOT['key'][4] -> {'subkey': [(1,), A(val=val)]}\n# ROOT['key'][4]['subkey'] -> [(1,), A(val=val)]\n# ROOT['key'][4]['subkey'][0] -> (1,)\n# ROOT['key'][4]['subkey'][0][0] -> 1\n# ROOT['key'][4]['subkey'][1] -> A(val=val)\n# ROOT['key'][4]['subkey'][1].val -> 'val'\n```\n* The root object is referred to as `ROOT`. \n* Attributes are denoted with `ROOT.attr`.\n* Keys from mappings are denoted with `ROOT['key']`.\n* Indices from sequences are denoted with `ROOT[idx]`.\n* Elements of sets and frozensets are indicated by their id in memory with `ROOT{id=10012}`. \n* Elements of a `ValuesView` are indicated by their id in memory with `ROOT{ValuesView_id=10012}`. \n\nNote that `ValuesView` may seem odd here. This is included separately because this is a unique subclass\nof `Collection` not captured by `Mapping`, `Sequence`, or `Set`. In contrast, both `KeysView` and \n`ItemsView` are subclasses of `Set`.\n\nThe previous notations will be recursively chained together. For example, the path \n`ROOT['key'][2]` indicates that in order to access the corresponding object `{3}`, we would \nuse `root_obj['key'][2]`. For sets it is also possible by iterating and inspecting by id. To\naccess `4` via `ROOT['key'][3]{id=4315240848}` we would iterate through `root_obj['key'][3]` until \nwe found a matching id:\n  ```python\nfor elem in root_obj['key'][3]:\n    if id(elem) == 4315240848:\n      break\n      \nprint(elem)\n# 4\n  ```\n\nFortunately, for accessing and manipulating elements of `root_obj`, there are additional \ntools that avoid needing to tediously address and iterate (see below).\n\n\nBefore moving on, it's worth pointing out you can also select by element and/or by \"path name\" by \nsupplying callables `element_test` and `path_test` that determine whether an element or path is \ninteresting (by default they always return `True`). `element_test` operates on the element itself and \nreturns a bool. `path_test` operates on the most recent branch of the current path and returns a bool. For \nexample, if you're at `root_obj['key']` with path `ROOT['key']`, it would pass `key` to the input of\n`path_test` and `[1, (2,), ...]` to `element_test`.\n\n  ```python\nobj = {'key': [1, (2.0,), {3}, frozenset((4,)), {'subkey': [(1,), A()]}]}\nprint_obj_tree(root_obj=obj, element_test=lambda x: isinstance(x, float))\n\n# ROOT['key'][1][0] -> 2.0\n  ```\n  ```python\nobj = {'key': [1, (2.0,), {3}, frozenset((4,)), {'subkey': [(1,), A()]}]}\nprint_obj_tree(root_obj=obj, path_test=lambda x: x=='subkey')  \n\n# ROOT['key'][4]['subkey'] -> [(1,), A(val=val)]\n```\n\n### 2. Getting the values and paths of objects\nTo get a dictionary of objects filtered by element/path and keyed by full path string, \nuse `get_elements`:\n```python\nfrom spelunk import get_elements\n  \nobj = {'key': [1, (2.0,), {3}, frozenset((4,)), {'subkey': [(1,), A()]}]}\nget_elements(root_obj=obj, element_test=lambda x: isinstance(x, frozenset))\n\n# {\"ROOT['key'][3]\": frozenset({4})}\n\nget_elements(root_obj=obj, element_test=lambda x: isinstance(x, dict))\n# {\n#   'ROOT': {'key': [1, (2.0,), {3}, frozenset({4}), {'subkey': [(1,), A(val=val)]}]},\n#   \"ROOT['key'][4]\": {'subkey': [(1,), A(val=val)]}\n# }\n```\n\n### 3. Overwriting elements \nTo overwrite elements use `overwrite_elements`:\n```python\nfrom spelunk import overwrite_elements\n\nobj = {'key': [1, (2.0,), {3}, frozenset((4,)), {'subkey': [(1,), A()]}]}\noverwrite_elements(\n    root_obj=obj, \n    overwrite_value=None, \n    element_test=lambda x: isinstance(x, tuple)\n)\nprint(obj)\n\n# {'key': [1, None, {3}, frozenset({4}), {'subkey': [None, A(val=val)]}]}\n```\nObjects can also be overwritten using a callable `overwrite_func`. If `overwrite_func` is not `None` and \ncallable, `overwrite_value` will be ignored.\n```python\nfrom spelunk import overwrite_elements\n\nobj = {'key': [1, (2.0,), {3}, frozenset((4,)), {'subkey': [(1,), A()]}]}\noverwrite_elements(\n    root_obj=obj, \n    overwrite_func=str, \n    element_test=lambda x: isinstance(x, tuple)\n)\nprint(obj)\n\n# {'key': [1, '(2.0,)', {3}, frozenset({4}), {'subkey': ['(1,)', A(val=val)]}]}\n```\nOverwriting will fail if attempting to overwrite an immutable container.\n```python\nobj = {'key': [1, (2.0,), {3}, frozenset((4,)), {'subkey': [(1,), A()]}]}\noverwrite_elements(\n    root_obj=obj, \n    overwrite_value=None, \n    element_test=lambda x: isinstance(x, int)\n)\nprint(obj)\n\n# Failed to overwrite 4 at ROOT['key'][3]{id=4315240848}.\n# Traceback (most recent call last):\n# ...\n# TypeError: Cannot overwrite immutable collections.\n```\nError messages can be silenced with `silent=True` and exceptions can be dismissed with \n`raise_on_exception=False` kwargs. Be aware that it may be difficult to determine which objects \nfailed with these options.\n```python\nobj = {'key': [1, (2.0,), {3}, frozenset((4,)), {'subkey': [(1,), A()]}]}\noverwrite_elements(\n    root_obj=obj, \n    overwrite_value=None, \n    element_test=lambda x: isinstance(x, int),\n    silent=True,\n    raise_on_exception=False\n)\nprint(obj)\n\n# {'key': [None, (2.0,), {None}, frozenset({4}), {'subkey': [(1,), A(val=val)]}]}\n```\n\n### 4. Hot swapping\nOne helpful utility is the ability to safely and reversibly \"hot swap\" certain elements of an object.\nOne use-case is writing a non-serializable object to JSON. Say we have some root object `root_obj`\nthat needs to be serialized to JSON but some of its constituent elements are not\nserializable. It may be tedious to go through and null/convert the\nnon-serializable content. Furthermore, we may not want to permanently overwrite the non-serializable\ncontent. One tool in spelunk is a context manager `hot_swap` that can find elements to arbitrary \nspecification and at any depth in the root object, overwrite their values, and then restore the originals.\n\n```python\nfrom spelunk import hot_swap\nimport json\nfrom datetime import datetime\nfrom threading import Lock\nfrom _thread import LockType\nfrom typing import Any, Optional, Union\n\n\nroot_obj = {\n    'date': datetime.now(), \n    'thread_lock': Lock(), \n    'data': [1, 2, 3, 4], \n    'other_locks': [Lock(), Lock()]\n}\n\nprint(root_obj)\n# {\n#   'date': datetime.datetime(2022, 11, 9, 13, 48, 19, 969856), \n#   'thread_lock': <unlocked _thread.lock object at 0x105ff4600>, \n#   'data': [1, 2, 3, 4], \n#   'other_locks': [\n#       <unlocked _thread.lock object at 0x105ff4630>, \n#       <unlocked _thread.lock object at 0x105ff4690>\n#   ]\n# }\n```\nNeither `datetime` nor `_thread.lock` objects are serializable.\n```python\njson.dumps(root_obj)\n# Traceback (most recent call last):\n# ...\n# TypeError: Object of type datetime is not JSON serializable\n```\nWe can define callables to both capture the bad elements (`get_datetime_and_locks`) as well as \noverwrite intelligently (`overwrite_func`).\n```python\ndef get_datetime_and_locks(obj: Any) -> bool:\n    \"\"\"Get the non-serializable content\"\"\"\n    return isinstance(obj, (datetime, LockType))\n\ndef overwrite_func(obj: Union[datetime, LockType]) -> Optional[str]:\n    \"\"\"Overwrite the non-serializable content\"\"\"\n    if isinstance(obj, datetime):\n        return str(obj)\n    else:\n        return None\n```\nNote that `overwrite_func` will only get called on objects for which `get_datetime_and_locks` returns\n`True`. Now, we can use our context manager `hot_swap` to temporarily overwrite the non-serializable\ncontent and then restore on exit.\n\n```python\nwith hot_swap(root_obj, element_test=get_datetime_and_locks, overwrite_func=overwrite_func):\n    serialized_obj = json.dumps(root_obj)\n\nprint(serialized_obj)\n# {\n#   \"date\": \"2022-11-09 13:48:19.969856\", \n#   \"thread_lock\": null, \n#   \"data\": [1, 2, 3, 4], \n#   \"other_locks\": [null, null]\n# }\n```\n`root_obj` is restored to its original form, allowing the datetime and thread lock objects to\ncontinue to provide utility with further use.\n\n```python\nprint(root_obj)\n# {\n#   'date': datetime.datetime(2022, 11, 9, 13, 48, 19, 969856), \n#   'thread_lock': <unlocked _thread.lock object at 0x105ff4600>, \n#   'data': [1, 2, 3, 4], \n#   'other_locks': [\n#       <unlocked _thread.lock object at 0x105ff4630>, \n#       <unlocked _thread.lock object at 0x105ff4690>\n#   ]\n# }\n```\nIf performing a `hot_swap` on a `root_obj` throws an exception, an attempt to restore`root_obj` to \nits original form is made. Additionally, by default, it will throw an exception before any attempt \nto hot swap an element of a mutable set because this cannot be performed reliably. Imagine swapping \nall `int` for `None` in `{1, 2, 3, None}` -> `{None}`. It is then ambiguous to determine which \nelements of the new set should be restored. It would be possible to copy the set `{1, 2, 3, None}` \nand restore this to the parent object, however, this copy would not share the same location in \nmemory as the original and it may break internal references as a result. By default, hot swapping is\nnot allowed with mutable sets, however, if you know it can be performed safely you can use the kwarg \n`allow_mutable_set_mutations=True`. For example, the set `{1}` could be safely hot swapped to \n`{None}` and restored due to the fact that the cardinality is unchanged.\n\n## More Details\n### `__slots__` and other class attributes\nSpelunk fully support objects that define `__slots__`, `__dict__`, as well as `__slots__` and `__dict__`\nsimultaneously). In order to deal with instance attributes derived from `__slots__` defined on the \nclass itself (or which may be inherited from parent classes), the MRO is used. For each class \nin the object's MRO, the contents of `cls.__slots__` is collected (along with the contents of `obj.__dict__` if \n`__dict__` is defined). For a given object, its attributes are collected as follows:\n- `attrs = []`\n- If `obj.__dict__` exists, add all elements to `attrs`. \n- For `cls` in `obj.__class__.__mro__`:\n  - If `cls.__slots__` exists, add all elements to `attrs`.\n\nNote in the special case that both `__slots__` and `__dict__` are defined (such that `__dict__` is \na member of `__slots__`), `__dict__` itself will be independently added as an attribute to `attrs`\nin addition to the contents of `__dict__`.\n\nNote that any attributes accessible to `obj` outside of `__dict__` (such as attributes of the class), \nare not included by spelunk. However, if one wants to inspect class attribute, the class itself can be \npassed in as the `root_obj`. Here, `__slots__` as well as all methods and other attributes of the class \nwill be collected and explored since these are direct attributes of the root object.\n\n\nEx:\n```python\nfrom spelunk import print_obj_tree\n\nclass A:\n    important = \"important\"\n    __slots__ = '__dict__', 'val'\n    def __init__(self, val):\n        self.val = val\n        self.other = 'other'\n    \n    def __repr__(self):\n       return f\"A(val={self.val})\"\n\nprint_obj_tree(A(1))\n# ROOT -> A(val=1)\n# ROOT.other -> 'other'\n# ROOT.__dict__ -> {'other': 'other'}\n# ROOT.__dict__['other'] -> 'other'\n# ROOT.val -> 1\n```\nWe can see that both the contents of `__slots__` (which contains `__dict__`) and `__dict__` \nare captured but the class attribute `important` is not. However, the class itself can be \ninspected:\n```python\nprint_obj_tree(A)\n# ROOT -> <class '__main__.A'>\n# ROOT.__module__ -> '__main__'\n# ROOT.important -> 'important'\n# ROOT.__slots__ -> ('__dict__', 'val')\n# ROOT.__slots__[0] -> '__dict__'\n# ROOT.__slots__[1] -> 'val'\n# ...\n```\n\n### Memoization\nSpelunk optionally utilizes memoization to increase performance and to prevent reporting multiple \npaths which point to the same object in memory. By default, memoization is not used in order to \nretrieve and output the full hierarchy of the object. Memoization can be turned on and off with the \nkwarg `memoization=True`. Note that some objects cannot be memoized regardless of whether \nmemoization is turned on. Namely, any subclass of `Number`, `str`, or `ByteString`  (along with \n`None`) will not be memoized due to the fact that members of these classes may be interned and \nall instances will always refer to the same singleton in memory in CPython.\n\n### String unraveling\nSpelunk by default assumes that all subclasses of `str` or `ByteString` refer to an atomic \ncollection that should not be recursed into character by character. If you do want to recurse \ninto a `str` or `ByteString` instance, use the kwarg `unravel_strings=True`.\n\n## Developing\n### Project Installation\n1. Install an appropriate version of python and create a virtual environment. [Pyenv](https://github.com/pyenv/pyenv) is recommended.\n   1. Set the shell variable `VENV_LOC` according to the location of the virtural environment. For example, if\n   the virtual environment is inside the repo home directory in a directory named `.venv` you would run `export VENV_LOC=.venv` (this is used by default\n   and isn't needed unless the virtual environment is located elsewhere).\n2. Install [Poetry](https://python-poetry.org/).\n3. Run `make install-repo` to activate the virtual environment and install the dependencies with Poetry.\n\nIf you have a different package management system (e.g. `conda`):\n1. Create and source/activate a virtual environment.\n2. Either install using `Poetry` or use external tools to convert the `poetry.lock` file to a \n`requirements.txt` and install with `pip install -r requirements.txt`.\n\n### Tests\nFor contributors, kindly use the `Makefile` to perform formatting, linting, and unit testing \nlocally.\n1. Run `make style-check` to dry-run `black` formatting changes.\n2. Run `make reformat` to format with `black`.\n3. Run `make lint` to lint with `flake8`.\n4. Run `make unit-test` to run `pytest` and check the coverage report. \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tomarken/spelunk",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spelunk",
    "package_url": "https://pypi.org/project/spelunk/",
    "platform": null,
    "project_url": "https://pypi.org/project/spelunk/",
    "project_urls": {
      "Homepage": "https://github.com/tomarken/spelunk",
      "Repository": "https://github.com/tomarken/spelunk"
    },
    "release_url": "https://pypi.org/project/spelunk/0.1.6/",
    "requires_dist": null,
    "requires_python": ">=3.9,<3.10",
    "summary": "Package with helpful object recursion utils",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15719444,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cb7ce38eb72811d4d37c6300c7fc059c5bff583a914da44705317629932d260",
          "md5": "a75a63c3d59215a3b2de06f3be4e9cca",
          "sha256": "710a62e62a2daed9e4a223d153e6b3325b7b7d8c3422344eccbfbdfde5797c0a"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a75a63c3d59215a3b2de06f3be4e9cca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 5392,
        "upload_time": "2022-10-26T23:35:22",
        "upload_time_iso_8601": "2022-10-26T23:35:22.859033Z",
        "url": "https://files.pythonhosted.org/packages/9c/b7/ce38eb72811d4d37c6300c7fc059c5bff583a914da44705317629932d260/spelunk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b662ff408abe7a007db54972e0c0258cdfba0b8c7fd01d3a0a3676439f413d4e",
          "md5": "6075cdf738f574af1a52956a89bc18b9",
          "sha256": "4beb8174fa577b06f831c0edde3e8ffa9a20003d4fe5621fbefef2a430ba94d8"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6075cdf738f574af1a52956a89bc18b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 4992,
        "upload_time": "2022-10-26T23:35:25",
        "upload_time_iso_8601": "2022-10-26T23:35:25.050375Z",
        "url": "https://files.pythonhosted.org/packages/b6/62/ff408abe7a007db54972e0c0258cdfba0b8c7fd01d3a0a3676439f413d4e/spelunk-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b937688d49c4c1548c696904ea247fb6eb1712b2e055922e6d07e867c4ffef78",
          "md5": "e2aa580e09eb54de62a77f6d96e7aabe",
          "sha256": "171f1abc58db0ae61f3990bffaf750fa44a3b00e8800d645c85e7a4b578fe881"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2aa580e09eb54de62a77f6d96e7aabe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 9219,
        "upload_time": "2022-10-26T23:38:50",
        "upload_time_iso_8601": "2022-10-26T23:38:50.196128Z",
        "url": "https://files.pythonhosted.org/packages/b9/37/688d49c4c1548c696904ea247fb6eb1712b2e055922e6d07e867c4ffef78/spelunk-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f1ee93d8d53c5d872b0fad47326941726145dfc93cb5d0182dff050f3ae8875",
          "md5": "ecad0539ef32af75bda8539994297395",
          "sha256": "d2840edff01d079f26ea565450a1d152d44030125379d575b36d778579f9b124"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ecad0539ef32af75bda8539994297395",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 13252,
        "upload_time": "2022-10-26T23:38:52",
        "upload_time_iso_8601": "2022-10-26T23:38:52.575834Z",
        "url": "https://files.pythonhosted.org/packages/7f/1e/e93d8d53c5d872b0fad47326941726145dfc93cb5d0182dff050f3ae8875/spelunk-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30ddf2585b1d1c3e6a0114bba63a4e7c43677a43d2069eb24883c44678efa1e3",
          "md5": "d6bf3c8e7a9648f03ab315ebda11ec19",
          "sha256": "a5fdb75c1bfcfacc230c99452ed69290bb4d5002bc06480064498d4c8c6c8657"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6bf3c8e7a9648f03ab315ebda11ec19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 9278,
        "upload_time": "2022-10-26T23:56:18",
        "upload_time_iso_8601": "2022-10-26T23:56:18.134987Z",
        "url": "https://files.pythonhosted.org/packages/30/dd/f2585b1d1c3e6a0114bba63a4e7c43677a43d2069eb24883c44678efa1e3/spelunk-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6873e2e8033cc2ec067831b76fff1fedbb14f4ae8740216c6a5ac7f4986c3d7a",
          "md5": "619f2abfdd5ed70bdc03a7773fe760ce",
          "sha256": "b5f5cbef074ed7fa50b6a503cc9e6fac7678170c9deb90ffec7e0a20e78abec7"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "619f2abfdd5ed70bdc03a7773fe760ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 13389,
        "upload_time": "2022-10-26T23:56:20",
        "upload_time_iso_8601": "2022-10-26T23:56:20.177305Z",
        "url": "https://files.pythonhosted.org/packages/68/73/e2e8033cc2ec067831b76fff1fedbb14f4ae8740216c6a5ac7f4986c3d7a/spelunk-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62d41730f3d37423d8a72286f9b368875069e37cf88bd68aa711c4293e37fa13",
          "md5": "eacf620f8e1a920fa7574de35f5ea073",
          "sha256": "e4dbc230be66fb84ffbc78292e3a9b762064e2047df679b6438af9d7ad5cae8e"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eacf620f8e1a920fa7574de35f5ea073",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 9277,
        "upload_time": "2022-10-26T23:59:16",
        "upload_time_iso_8601": "2022-10-26T23:59:16.524906Z",
        "url": "https://files.pythonhosted.org/packages/62/d4/1730f3d37423d8a72286f9b368875069e37cf88bd68aa711c4293e37fa13/spelunk-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5769b547a51b2173fc151c9c5f7d6bf2aa6117810935189d1d4fba7f2019b027",
          "md5": "b98ceb8dd0960c5398707142f4f12c2b",
          "sha256": "125680e892d6ded1fe4cce015fabb1ecef0177ce5faf9e247fd8df132341efba"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b98ceb8dd0960c5398707142f4f12c2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 13373,
        "upload_time": "2022-10-26T23:59:18",
        "upload_time_iso_8601": "2022-10-26T23:59:18.984192Z",
        "url": "https://files.pythonhosted.org/packages/57/69/b547a51b2173fc151c9c5f7d6bf2aa6117810935189d1d4fba7f2019b027/spelunk-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9a5004cab67317193f3239ddfeab3d352e4207fe71485e55607d5d82e0521ca",
          "md5": "5b8878600eb78c5c96878ad0b2173d29",
          "sha256": "06cb2ae7f6a4e4d267df19332ef4c7a2161b8e0e2f437d4028e3fd78a7a2c4e6"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b8878600eb78c5c96878ad0b2173d29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 9593,
        "upload_time": "2022-10-27T21:59:06",
        "upload_time_iso_8601": "2022-10-27T21:59:06.644642Z",
        "url": "https://files.pythonhosted.org/packages/b9/a5/004cab67317193f3239ddfeab3d352e4207fe71485e55607d5d82e0521ca/spelunk-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c45a03dec5236d5f4ab9a560e6ac1452f88e5337bbee82899beff2343cb79c8f",
          "md5": "1017629e4a3758a29fbc0f66f320e82f",
          "sha256": "d15628ec586789cb85fd0c332a9f9cad9af734dcad94fbf1f4c1bd7e9fa389b0"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1017629e4a3758a29fbc0f66f320e82f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 13839,
        "upload_time": "2022-10-27T21:59:09",
        "upload_time_iso_8601": "2022-10-27T21:59:09.091483Z",
        "url": "https://files.pythonhosted.org/packages/c4/5a/03dec5236d5f4ab9a560e6ac1452f88e5337bbee82899beff2343cb79c8f/spelunk-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91d48a836e683636fb6fe6122275f2bf8c2ab22181cb67f26227fc7fbde2e3bc",
          "md5": "2007b42567f7b6ff4bc39566c585895a",
          "sha256": "4d26a83507d05451fe092d22ae9ff44eba8246e938e24a146a1645aa8844c39c"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2007b42567f7b6ff4bc39566c585895a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 9735,
        "upload_time": "2022-10-30T01:37:27",
        "upload_time_iso_8601": "2022-10-30T01:37:27.275663Z",
        "url": "https://files.pythonhosted.org/packages/91/d4/8a836e683636fb6fe6122275f2bf8c2ab22181cb67f26227fc7fbde2e3bc/spelunk-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "071de3d1b75c2d1ee05795db312bff8d36dbbc1de4be5663e4033fdd928f902e",
          "md5": "a233d1dd9850e2c438d7d90acf9cfb00",
          "sha256": "900763a79932c5a4fac3da009ebdf9c212a1d901fc48cdf9c19d72ff884687cd"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a233d1dd9850e2c438d7d90acf9cfb00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 13990,
        "upload_time": "2022-10-30T01:37:30",
        "upload_time_iso_8601": "2022-10-30T01:37:30.478353Z",
        "url": "https://files.pythonhosted.org/packages/07/1d/e3d1b75c2d1ee05795db312bff8d36dbbc1de4be5663e4033fdd928f902e/spelunk-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27a0239b2525388805d09e56dddd119db39473f0ea8c53e2872e0cd4cbd25c0b",
          "md5": "02bc18735bae23456c21167e5810613c",
          "sha256": "8013dfd84e819a02ae71763b279bcfeb9e7f12a68e8f2d7e8207cac5f91f5ae8"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02bc18735bae23456c21167e5810613c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 10719,
        "upload_time": "2022-11-10T01:59:13",
        "upload_time_iso_8601": "2022-11-10T01:59:13.110506Z",
        "url": "https://files.pythonhosted.org/packages/27/a0/239b2525388805d09e56dddd119db39473f0ea8c53e2872e0cd4cbd25c0b/spelunk-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "828e0b7fae79b7a9d900e31e558f897064259cc367334b5f047a0b2f78968d15",
          "md5": "60ae43a35e0863631b842429fa633e16",
          "sha256": "b488d0b2b1ddc3bd4348207615377a0ac1a4bc0e246c1014e08e6b0c2890a6e4"
        },
        "downloads": -1,
        "filename": "spelunk-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "60ae43a35e0863631b842429fa633e16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 15936,
        "upload_time": "2022-11-10T01:59:16",
        "upload_time_iso_8601": "2022-11-10T01:59:16.055601Z",
        "url": "https://files.pythonhosted.org/packages/82/8e/0b7fae79b7a9d900e31e558f897064259cc367334b5f047a0b2f78968d15/spelunk-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27a0239b2525388805d09e56dddd119db39473f0ea8c53e2872e0cd4cbd25c0b",
        "md5": "02bc18735bae23456c21167e5810613c",
        "sha256": "8013dfd84e819a02ae71763b279bcfeb9e7f12a68e8f2d7e8207cac5f91f5ae8"
      },
      "downloads": -1,
      "filename": "spelunk-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02bc18735bae23456c21167e5810613c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<3.10",
      "size": 10719,
      "upload_time": "2022-11-10T01:59:13",
      "upload_time_iso_8601": "2022-11-10T01:59:13.110506Z",
      "url": "https://files.pythonhosted.org/packages/27/a0/239b2525388805d09e56dddd119db39473f0ea8c53e2872e0cd4cbd25c0b/spelunk-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "828e0b7fae79b7a9d900e31e558f897064259cc367334b5f047a0b2f78968d15",
        "md5": "60ae43a35e0863631b842429fa633e16",
        "sha256": "b488d0b2b1ddc3bd4348207615377a0ac1a4bc0e246c1014e08e6b0c2890a6e4"
      },
      "downloads": -1,
      "filename": "spelunk-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "60ae43a35e0863631b842429fa633e16",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<3.10",
      "size": 15936,
      "upload_time": "2022-11-10T01:59:16",
      "upload_time_iso_8601": "2022-11-10T01:59:16.055601Z",
      "url": "https://files.pythonhosted.org/packages/82/8e/0b7fae79b7a9d900e31e558f897064259cc367334b5f047a0b2f78968d15/spelunk-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}