{
  "info": {
    "author": "Ilan Moscovitz",
    "author_email": "ilan.moscovitz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# wittgenstein\n\n_And is there not also the case where we play and--make up the rules as we go along?  \n  -Ludwig Wittgenstein_\n\n![the duck-rabbit](https://github.com/imoscovitz/wittgenstein/blob/master/duck-rabbit.jpg)\n\n## Summary\n\nThis package implements two interpretable coverage-based ruleset algorithms: IREP and RIPPERk, as well as additional features for model interpretation.\n\nPerformance is similar to sklearn's DecisionTree CART implementation (see [Performance Tests](https://github.com/imoscovitz/wittgenstein/blob/master/examples/performance_tests.ipynb)).\n\nFor explanation of the algorithms, see my article in _Towards Data Science_, or the papers below, under [Useful References](https://github.com/imoscovitz/wittgenstein#useful-references).\n\n## Installation\n\nTo install, use\n```bash\n$ pip install wittgenstein\n```\n\nTo uninstall, use\n```bash\n$ pip uninstall wittgenstein\n```\n\n## Requirements\n- pandas\n- numpy\n- python version>=3.6\n\n## Usage\nUsage syntax is similar to sklearn's.\n\n### Training\n\nOnce you have loaded and split your data...\n```python\n>>> import pandas as pd\n>>> df = pd.read_csv(dataset_filename)\n>>> from sklearn.model_selection import train_test_split # Or any other mechanism you want to use for data partitioning\n>>> train, test = train_test_split(df, test_size=.33)\n```\nUse the `fit` method to train a `RIPPER` or `IREP` classifier:\n\n```python\n>>> import wittgenstein as lw\n>>> ripper_clf = lw.RIPPER() # Or irep_clf = lw.IREP() to build a model using IREP\n>>> ripper_clf.fit(df, class_feat='Poisonous/Edible', pos_class='p') # Or pass X and y data to .fit\n>>> ripper_clf\n<RIPPER(max_rules=None, random_state=2, max_rule_conds=None, verbosity=0, max_total_conds=None, k=2, prune_size=0.33, dl_allowance=64, n_discretize_bins=10) with fit ruleset> # Hyperparameter details available in the docstrings and TDS article below\n```\n\nAccess the underlying trained model with the `ruleset_` attribute, or output it with `out_model()`. A ruleset is a disjunction of conjunctions -- 'V' represents 'or'; '^' represents 'and'.\n\nIn other words, the model predicts positive class if any of the inner-nested condition-combinations are all true:\n```python\n>>> ripper_clf.out_model() # or ripper_clf.ruleset_\n[[Odor=f] V\n[Gill-size=n ^ Gill-color=b] V\n[Gill-size=n ^ Odor=p] V\n[Odor=c] V\n[Spore-print-color=r] V\n[Stalk-surface-below-ring=y ^ Stalk-surface-above-ring=k] V\n[Habitat=l ^ Cap-color=w] V\n[Stalk-color-above-ring=y]]\n```\n\n`IREP` models tend be higher bias, `RIPPER`'s higher variance.\n\n### Scoring\nTo score a trained model, use the `score` function:\n```python\n>>> X_test = test.drop('Poisonous/Edible', axis=1)\n>>> y_test = test['Poisonous/Edible']\n>>> ripper_clf.score(test_X, test_y)\n0.9985686906328078\n```\n\nDefault scoring metric is accuracy. You can pass in alternate scoring functions, including those available through sklearn:\n```python\n>>> from sklearn.metrics import precision_score, recall_score\n>>> precision = clf.score(X_test, y_test, precision_score)\n>>> recall = clf.score(X_test, y_test, recall_score)\n>>> print(f'precision: {precision} recall: {recall}')\nprecision: 0.9914..., recall: 0.9953...\n```\n\n### Prediction\nTo perform predictions, use `predict`:\n```python\n>>> ripper_clf.predict(new_data)[:5]\n[True, True, False, True, False]\n```\n\nPredict class probabilities with `predict_proba`:\n```python\n>>> ripper_clf.predict_proba(test)\n# Pairs of negative and positive class probabilities\narray([[0.01212121, 0.98787879],\n       [0.01212121, 0.98787879],\n       [0.77777778, 0.22222222],\n       [0.2       , 0.8       ],\n       ...\n```\n\nWe can also ask our model to tell us why it made each positive prediction using `give_reasons`:\n```python\n>>> ripper_clf.predict(new_data[:5], give_reasons=True)\n([True, True, False, True, True]\n[<Rule [physician-fee-freeze=n]>],\n[<Rule [physician-fee-freeze=n]>,\n  <Rule [synfuels-corporation-cutback=y^adoption-of-the-budget-resolution=y^anti-satellite-test-ban=n]>], # This example met multiple sufficient conditions for a positive prediction\n[],\n[<Rule object: [physician-fee-freeze=n]>],\n[])\n```\n\n### Model selection\nwittgenstein is compatible with sklearn model_selection tools such as `cross_val_score` and `GridSearchCV`, as well\nas ensemblers like `StackingClassifier`.\n\nCross validation:\n```python\n>>> # First dummify your categorical features and booleanize your class values to make sklearn happy\n>>> X_train = pd.get_dummies(X_train, columns=X_train.select_dtypes('object').columns)\n>>> y_train = y_train.map(lambda x: 1 if x=='p' else 0)\n>>> cross_val_score(ripper_clf, X_train, y_train)\n```\n\nGrid search:\n```python\n>>> from sklearn.model_selection import GridSearchCV\n>>> param_grid = {\"prune_size\": [0.33, 0.5], \"k\": [1, 2]}\n>>> grid = GridSearchCV(estimator=ripper, param_grid=param_grid)\n>>> grid.fit(X_train, y_train)\n```\n\nEnsemble:\n```python\n>>> from sklearn.ensemble import StackingClassifier\n>>> from sklearn.tree import DecisionTreeClassifier\n>>> from sklearn.naive_bayes import GaussianNB\n>>> from sklearn.linear_model import LogisticRegression\n>>> tree = DecisionTreeClassifier(random_state=42)\n>>> nb = GaussianNB(random_state=42)\n>>> estimators = [(\"rip\", ripper_clf), (\"tree\", tree), (\"nb\", nb)]\n>>> ensemble_clf = StackingClassifier(estimators=estimators, final_estimator=LogisticRegression())\n>>> ensemble_clf.fit(X_train, y_train)\n```\n\n### Defining and altering models\nYou can directly specify a new model, modify a preexisting model, or train from a preexisting model -- whether to take into account subject matter expertise, to create a baseline for scoring, or for insight into what the model is doing.\n\nTo specify a new model, use `init_ruleset`:\n```python\n>>> ripper_clf = RIPPER(random_state=42)\n>>> ripper_clf.init_ruleset(\"[[Cap-shape=x^Cap-color=n] V [Odor=c] V ...]\", class_feat=..., pos_class=...)\n>>> ripper_clf.predict(df)\n...\n```\nTo modify a preexisting model, use `add_rule`, `replace_rule`, `remove_rule`, or `insert_rule`. To alter a model by index, use `replace_rule_at`, `remove_rule_at`, or `insert_rule_at`:\n```python\n>>> ripper_clf.replace_rule_at(1, '[Habitat=l]')\n>>> ripper_clf.insert_rule(insert_before_rule='[Habitat=l]', new_rule='[Gill-size=n ^ Gill-color=b]')\n>>> ripper_clf.out_model()\n[[delicious=y^spooky-looking=y] V\n[Gill-size=n ^ Gill-color=b] V\n[Habitat=l]]\n```\nTo specify a starting point for training, use `initial_model` when calling `fit`:\n```python\n>>> ripper_clf.fit(\n>>>   X_train,\n>>>   y_train,\n>>>   initial_model=\"[[delicious=y^spooky-looking=y] V [Odor=c]]\")\n```\nExpected string syntax for a Ruleset is `[<Rule1> V <Rule2> V ...]`, for a Rule `[<Cond1>^<Cond2>^...], and for a Cond `feature=value`. '^' represents 'and'; 'V' represents 'or'. (See the [Training](https://github.com/imoscovitz/wittgenstein#training) section above).\n\n### Interpreter models\nUse the interpret module to interpret non-wittgenstein models. `interpret_model` generates a ruleset that approximates some black-box model. It does to by fitting a wittgenstein classifier to the predictions of the other model.\n```python\n# Train the model we want to interpret\n>>> from tensorflow.keras import Sequential\n>>> from tensorflow.keras.layers import Dense\n>>> mlp = Sequential()\n>>> mlp.add(Dense(60, input_dim=13, activation='relu'))\n>>> mlp.add(Dense(30, activation='relu'))\n>>> mlp.add(Dense(1, activation='sigmoid'))\n>>> mlp.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n>>> mlp.fit(\n>>>   X_train,\n>>>   y_train,\n>>>   batch_size=1,\n>>>   epochs=10)\n\n# Create and fit wittgenstein classifier to use as a model interpreter.\n>>> from wittgenstein.interpret import interpret_model, score_fidelity\n>>> interpreter = RIPPER(random_state=42)\n>>> interpret_model(model=mlp, X=X_train, interpreter=interpreter).out_pretty()\n[[Proline=>1227.0] V\n[Proline=880.0-1048.0] V\n[Proline=1048.0-1227.0] V\n[Proline=736.0-880.0] V\n[Alcalinityofash=16.8-17.72]]\n```\nWe can also use the now-fitted interpreter to approximate the reasons behind the underlying model's positive predictions. (See [Prediction](https://github.com/imoscovitz/wittgenstein#prediction)).\n```python\n>>> preds = (mlp.predict(X_test.tail()) > .5).flatten()\n>>> _, interpretation = interpreter.predict(X_test.tail(), give_reasons=True)\n>>> print(f'tf preds: {preds}\\n')\n>>> interpretation\ntf preds: [ True False False  True False]\n[[<Rule [Proline=880.0-1048.0]>],\n [],\n [],\n [<Rule [Proline=736.0-880.0]>, <Rule [Alcalinityofash=16.8-17.72]>],\n []]\n```\nScore how faithfully the interpreter fits the underlying model with `score_fidelity`.\n```python\n>>> score_fidelity(\n>>>    X_test,\n>>>    interpreter,\n>>>    model=mlp,\n>>>    score_function=[precision_score, recall_score, f1_score])\n[1.0, 0.7916666666666666, 0.8837209302325582]\n```\n## Issues\nIf you encounter any issues, or if you have feedback or improvement requests for how wittgenstein could be more helpful for you, please post them to [issues](https://github.com/imoscovitz/wittgenstein/issues), and I'll respond.\n\n## Contributing\nContributions are welcome! If you are interested in contributing, let me know at ilan.moscovitz@gmail.com or on [linkedin](https://www.linkedin.com/in/ilan-moscovitz/).\n\n## Useful references\n- [My article in _Towards Data Science_ explaining IREP, RIPPER, and wittgenstein](https://towardsdatascience.com/how-to-perform-explainable-machine-learning-classification-without-any-trees-873db4192c68)\n- [Furnkrantz-Widmer IREP paper](https://pdfs.semanticscholar.org/f67e/bb7b392f51076899f58c53bf57d5e71e36e9.pdf)\n- [Cohen's RIPPER paper](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.107.2612&rep=rep1&type=pdf)\n- [Partial decision trees](https://researchcommons.waikato.ac.nz/bitstream/handle/10289/1047/uow-cs-wp-1998-02.pdf?sequence=1&isAllowed=y)\n- [Bayesian Rulesets](https://pdfs.semanticscholar.org/bb51/b3046f6ff607deb218792347cb0e9b0b621a.pdf)\n- [C4.5 paper including all the gory details on MDL](https://pdfs.semanticscholar.org/cb94/e3d981a5e1901793c6bfedd93ce9cc07885d.pdf)\n- [_Philosophical Investigations_](https://static1.squarespace.com/static/54889e73e4b0a2c1f9891289/t/564b61a4e4b04eca59c4d232/1447780772744/Ludwig.Wittgenstein.-.Philosophical.Investigations.pdf)\n\n## Changelog\n\n#### v0.3.2: 8/8/2021\n- Speedup for binning continuous features (~several orders of magnitude)\n- Add support for expert feedback: Ability to explicitly specify and alter models.\n- Add surrogate interpreter\n- Add support for non-pandas datasets (ex. numpy arrays)\n\n#### v0.2.3: 5/21/2020\n- Minor bugfixes and optimizations\n\n#### v0.2.0: 5/4/2020\n- Algorithmic optimizations to improve training speed (~10x - ~100x)\n- Support for training on iterable datatypes besides DataFrames, such as numpy arrays and python lists\n- Compatibility with sklearn ensembling metalearners and sklearn model_selection\n- `.predict_proba` returns probas in neg, pos order\n- Certain parameters (hyperparameters, random_state, etc.) should now be passed into IREP/RIPPER constructors rather than the .fit method.\n- Sundry bugfixes\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/imoscovitz/wittgenstein",
    "keywords": "Classification,Decision Rule,Machine Learning,Explainable Machine Learning,Data Science",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wittgenstein",
    "package_url": "https://pypi.org/project/wittgenstein/",
    "platform": "",
    "project_url": "https://pypi.org/project/wittgenstein/",
    "project_urls": {
      "Homepage": "https://github.com/imoscovitz/wittgenstein"
    },
    "release_url": "https://pypi.org/project/wittgenstein/0.3.2/",
    "requires_dist": [
      "pandas",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Ruleset covering algorithms for explainable machine learning",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11127160,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3712f7c9687075918710b9bb6b42f904273c14719bb5dfa54537fe3e83575cf8",
          "md5": "54f91a9bc3c2a9440ecf7a7995cef408",
          "sha256": "1ea346cc61507acadce770c997ae3a1d904810021dcf8a6156f89147dafdc0c9"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.1.0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "54f91a9bc3c2a9440ecf7a7995cef408",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": null,
        "size": 89550,
        "upload_time": "2019-02-22T00:30:27",
        "upload_time_iso_8601": "2019-02-22T00:30:27.636029Z",
        "url": "https://files.pythonhosted.org/packages/37/12/f7c9687075918710b9bb6b42f904273c14719bb5dfa54537fe3e83575cf8/wittgenstein-0.1.0-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "703d54998f3a5e2c70d1dc56e55bd1bca08a3874ef00e74b3aec2028620f2318",
          "md5": "af4b72a876ace503e9440a7c102cbd17",
          "sha256": "a26106974c3dc27a5876d5af43e0c8d1d0b5fcf22405371008863bc35aedd0b5"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.1.1-py3.6.egg",
        "has_sig": false,
        "md5_digest": "af4b72a876ace503e9440a7c102cbd17",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": null,
        "size": 89619,
        "upload_time": "2019-02-22T00:30:36",
        "upload_time_iso_8601": "2019-02-22T00:30:36.097406Z",
        "url": "https://files.pythonhosted.org/packages/70/3d/54998f3a5e2c70d1dc56e55bd1bca08a3874ef00e74b3aec2028620f2318/wittgenstein-0.1.1-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "994d605574f34dc898df686708a54d6671737e9058822bcb7204bffea7a148c2",
          "md5": "c244bb169d2cc4707780daa7f7c199db",
          "sha256": "7d38d20829ecdc24cd7de429c4bf6d5a71c4a784532e3d4e3bf32b8231493781"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c244bb169d2cc4707780daa7f7c199db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41659,
        "upload_time": "2019-02-22T00:30:24",
        "upload_time_iso_8601": "2019-02-22T00:30:24.136078Z",
        "url": "https://files.pythonhosted.org/packages/99/4d/605574f34dc898df686708a54d6671737e9058822bcb7204bffea7a148c2/wittgenstein-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67b8151a6e3da17cd81e050e25748a1823ae369ecc6af300cc269f6f950c1abf",
          "md5": "00cfd6de665a6806885e28611c7b9f6d",
          "sha256": "08571897fea9958e6f695d330177a28db3b056025b104fa450c2c4a02752d3ff"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00cfd6de665a6806885e28611c7b9f6d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19775,
        "upload_time": "2019-02-22T00:30:40",
        "upload_time_iso_8601": "2019-02-22T00:30:40.666507Z",
        "url": "https://files.pythonhosted.org/packages/67/b8/151a6e3da17cd81e050e25748a1823ae369ecc6af300cc269f6f950c1abf/wittgenstein-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cc4f0675a3fce7c6156c7781b4e256e6726889052f95a0b52da65a046733ae8",
          "md5": "e9664abb95b17e6e3a6402783db9a3f5",
          "sha256": "246ee4189c8a2dc238f42142816a16db476d48bcf0fd7f6f10a2824511ab7876"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e9664abb95b17e6e3a6402783db9a3f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20522,
        "upload_time": "2019-03-05T01:20:50",
        "upload_time_iso_8601": "2019-03-05T01:20:50.164513Z",
        "url": "https://files.pythonhosted.org/packages/0c/c4/f0675a3fce7c6156c7781b4e256e6726889052f95a0b52da65a046733ae8/wittgenstein-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04ebf03311eb9c03e9338bf0247511feab2ff82d4914ee064d0742de2c4e8b4f",
          "md5": "8055da240d54a91b51aa5ac009f76edf",
          "sha256": "4979233ad7e1e8488e37b5292e15548b080083aae620b94deaf94b7a375942ad"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8055da240d54a91b51aa5ac009f76edf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20526,
        "upload_time": "2019-03-05T01:32:37",
        "upload_time_iso_8601": "2019-03-05T01:32:37.046086Z",
        "url": "https://files.pythonhosted.org/packages/04/eb/f03311eb9c03e9338bf0247511feab2ff82d4914ee064d0742de2c4e8b4f/wittgenstein-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc50541bfb656bebc21a2b0112affdd47b6954abf093e9b3d2d378baee3599ac",
          "md5": "8f3ee2817f8ee47bcbebc2f8a4daba15",
          "sha256": "27fea9027bc323273d0764914dcb2fde343283696b1572a66df708815acdd748"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8f3ee2817f8ee47bcbebc2f8a4daba15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20742,
        "upload_time": "2019-03-07T00:42:14",
        "upload_time_iso_8601": "2019-03-07T00:42:14.317607Z",
        "url": "https://files.pythonhosted.org/packages/dc/50/541bfb656bebc21a2b0112affdd47b6954abf093e9b3d2d378baee3599ac/wittgenstein-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09fb35564fb8efa80ab7b690c0312bb73af10892993e8f6d4930b8e6fd87dec4",
          "md5": "a415f9bcebbb2d7d3c8be90fca9305ba",
          "sha256": "7f6865af4135b5039ca4461a1b9c5b210ec604c6c60a23fd6c7fe76e1f9643b7"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a415f9bcebbb2d7d3c8be90fca9305ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25316,
        "upload_time": "2019-04-18T23:14:27",
        "upload_time_iso_8601": "2019-04-18T23:14:27.184573Z",
        "url": "https://files.pythonhosted.org/packages/09/fb/35564fb8efa80ab7b690c0312bb73af10892993e8f6d4930b8e6fd87dec4/wittgenstein-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed16c1bd26a8b45cdca67d3fe370e53cea4f02548aac2dd517555bcb1725cd40",
          "md5": "9d58c49c07914e6b82c58eb5b582c32d",
          "sha256": "65cf02600b77156fb557f854038a0583b41f52701b475f8b6ebbe9e534fc8f8e"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d58c49c07914e6b82c58eb5b582c32d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 74453,
        "upload_time": "2020-05-05T22:11:53",
        "upload_time_iso_8601": "2020-05-05T22:11:53.013883Z",
        "url": "https://files.pythonhosted.org/packages/ed/16/c1bd26a8b45cdca67d3fe370e53cea4f02548aac2dd517555bcb1725cd40/wittgenstein-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e3df58b2f52884fea0925b541011a33192db41b673594dd8f83ca387f4b9e37",
          "md5": "e84125b14ec4f9f90c14311d67ed3720",
          "sha256": "f87159134d4f90214a6335a1740955d9459305d4f9a4199ad6b91237266eeca1"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e84125b14ec4f9f90c14311d67ed3720",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 422555,
        "upload_time": "2020-05-05T22:11:55",
        "upload_time_iso_8601": "2020-05-05T22:11:55.165044Z",
        "url": "https://files.pythonhosted.org/packages/3e/3d/f58b2f52884fea0925b541011a33192db41b673594dd8f83ca387f4b9e37/wittgenstein-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94805fda7d5847db87ef5e36060182706b92c53d82983ef4787d0967018930a2",
          "md5": "b8adcb8768af4cf53bc5bf036b65e57c",
          "sha256": "1fe62fe6fa959026be015cf35387c22e8dd8693c581d4c922edfa062bdac11d0"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8adcb8768af4cf53bc5bf036b65e57c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 76550,
        "upload_time": "2020-05-19T23:41:13",
        "upload_time_iso_8601": "2020-05-19T23:41:13.527627Z",
        "url": "https://files.pythonhosted.org/packages/94/80/5fda7d5847db87ef5e36060182706b92c53d82983ef4787d0967018930a2/wittgenstein-0.2.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce65102cb3f533f56336f95759039a80b5100208286f95cc3dab637749ac6692",
          "md5": "4958da4b8dd03a9511e7d9465ba3f2bb",
          "sha256": "f11917eed5f863324f10fc82c961faa7b38b0ee727a932adaa4831c61919783a"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4958da4b8dd03a9511e7d9465ba3f2bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9425945,
        "upload_time": "2020-05-21T08:24:12",
        "upload_time_iso_8601": "2020-05-21T08:24:12.513825Z",
        "url": "https://files.pythonhosted.org/packages/ce/65/102cb3f533f56336f95759039a80b5100208286f95cc3dab637749ac6692/wittgenstein-0.2.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e9bd68c018bbe60dda956bb91be30828294b6d6d56b083f27b5b09ccc8396ac",
          "md5": "6df3fb0712f09f86b3d89174ab2a2ecb",
          "sha256": "2ce3cb81f2286cdfa6f9eb8ee06e99cc1c21364cf82cc42430b794530934c295"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.2.2.macosx-10.7-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "6df3fb0712f09f86b3d89174ab2a2ecb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 132975,
        "upload_time": "2020-05-21T08:24:14",
        "upload_time_iso_8601": "2020-05-21T08:24:14.297290Z",
        "url": "https://files.pythonhosted.org/packages/6e/9b/d68c018bbe60dda956bb91be30828294b6d6d56b083f27b5b09ccc8396ac/wittgenstein-0.2.2.macosx-10.7-x86_64.tar.gz",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f771fab1d9cf637db423989ac1f22e3c01f330e0ae05880eaa0ab3d9d530ac5",
          "md5": "75e34f34999cbb754025428fab3219cc",
          "sha256": "e107b7f7c16c5d83339d2c5c1c544b6c32452a365f5405a7f6351f9181eb97df"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75e34f34999cbb754025428fab3219cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 77674,
        "upload_time": "2020-05-21T08:21:47",
        "upload_time_iso_8601": "2020-05-21T08:21:47.683252Z",
        "url": "https://files.pythonhosted.org/packages/6f/77/1fab1d9cf637db423989ac1f22e3c01f330e0ae05880eaa0ab3d9d530ac5/wittgenstein-0.2.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b57c81aa56ee379dac76e7fef745dcbd3b3c692df5699c593078c6fdd71a83f",
          "md5": "d7abbc44a6077e2391b3d34f22678e5b",
          "sha256": "e390a72d969e05dee68b85539c6ea3fc6173ea279480b67de510ce3867987a6c"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7abbc44a6077e2391b3d34f22678e5b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 77666,
        "upload_time": "2020-05-21T08:31:02",
        "upload_time_iso_8601": "2020-05-21T08:31:02.343816Z",
        "url": "https://files.pythonhosted.org/packages/9b/57/c81aa56ee379dac76e7fef745dcbd3b3c692df5699c593078c6fdd71a83f/wittgenstein-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d977fd20818332f260df02b34a92648305eb3142d72db0ab904aa737ac5c7d1e",
          "md5": "8a189c0e6186094038933ede8b7a7df6",
          "sha256": "eda5478661fd7b64fc7d34dc7f9dd9ceedd1fed7db917030d6154e20d8aeb358"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8a189c0e6186094038933ede8b7a7df6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11313864,
        "upload_time": "2020-05-21T08:33:16",
        "upload_time_iso_8601": "2020-05-21T08:33:16.678491Z",
        "url": "https://files.pythonhosted.org/packages/d9/77/fd20818332f260df02b34a92648305eb3142d72db0ab904aa737ac5c7d1e/wittgenstein-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "731dc4d7e54d104c16fd9cbb3ee47d521970b41d8f1e59c244603853ad7fadfb",
          "md5": "1612c7e2d1256ed803649c80293b3a40",
          "sha256": "f9f1b5697bb6d41541408cebd7c65e652af3e08c1ce181554332c42dcdf294ef"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1612c7e2d1256ed803649c80293b3a40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 124786,
        "upload_time": "2021-08-09T06:47:15",
        "upload_time_iso_8601": "2021-08-09T06:47:15.215439Z",
        "url": "https://files.pythonhosted.org/packages/73/1d/c4d7e54d104c16fd9cbb3ee47d521970b41d8f1e59c244603853ad7fadfb/wittgenstein-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2d6b0640f2cfa0b762f525eb0623689e30eb62069c5bac58846bfd08602afb5",
          "md5": "770938775a06f26631f44bd0a1db7f00",
          "sha256": "923d36a520261e0db3c6dae4fa9eef88048c66dc17effdd47440e56d4431b4ca"
        },
        "downloads": -1,
        "filename": "wittgenstein-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "770938775a06f26631f44bd0a1db7f00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 124783,
        "upload_time": "2021-08-09T06:53:30",
        "upload_time_iso_8601": "2021-08-09T06:53:30.635246Z",
        "url": "https://files.pythonhosted.org/packages/a2/d6/b0640f2cfa0b762f525eb0623689e30eb62069c5bac58846bfd08602afb5/wittgenstein-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2d6b0640f2cfa0b762f525eb0623689e30eb62069c5bac58846bfd08602afb5",
        "md5": "770938775a06f26631f44bd0a1db7f00",
        "sha256": "923d36a520261e0db3c6dae4fa9eef88048c66dc17effdd47440e56d4431b4ca"
      },
      "downloads": -1,
      "filename": "wittgenstein-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "770938775a06f26631f44bd0a1db7f00",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 124783,
      "upload_time": "2021-08-09T06:53:30",
      "upload_time_iso_8601": "2021-08-09T06:53:30.635246Z",
      "url": "https://files.pythonhosted.org/packages/a2/d6/b0640f2cfa0b762f525eb0623689e30eb62069c5bac58846bfd08602afb5/wittgenstein-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}