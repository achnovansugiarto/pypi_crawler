{
  "info": {
    "author": "Mohamad Nobakht",
    "author_email": "mohamadnobakht@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Balerin\n## Your application will dance with Balerin!\n\nBalerin is a python package startup orchestrator. it can handle loading all\npackages of an application at startup time respecting package dependencies.\n\nLoading all application packages at startup has many benefits:\n\n- Revealing all syntax errors and invalid imports on startup, preventing runtime failure.\n- Initializing all required objects at startup, providing better performance at runtime.\n- Triggering all first level objects of a module (ex. decorators) without the need to \n  manually trigger them.\n- Better code maintainability by letting you distribute the code on their suitable \n  packages and preventing the need for a centralized location for nonsense \n  imports (ex. models, hooks, managers, ...).\n- Auto registration of celery tasks without the need to name all task modules a \n  specific name (usually tasks).\n- Populating application level caches at startup to boost performance at runtime.\n\n## Can I Use Balerin With?\n\nYes, you can. Balerin can be used in conjunction with all major frameworks \n([Flask](https://github.com/pallets/flask), [FastAPI](https://github.com/tiangolo/fastapi), \n [Sanic](https://github.com/sanic-org/sanic), [AIOHTTP](https://github.com/aio-libs/aiohttp), \n [Bottle](https://github.com/bottlepy/bottle), [Pyramid](https://github.com/Pylons/pyramid),\n [Tornado](https://github.com/tornadoweb/tornado), [Django](https://github.com/django/django))\nand many more. You can also use it on bare python applications without a \nframework, it's all up to you.\n\n### What about Pyrin?\n\nIt's a good question. [Pyrin](https://github.com/mononobi/pyrin) has builtin support for \nBalerin, so you can just use Pyrin without the need to prepare Balerin on your own.\n\n## Installing\n\n**Install using pip**:\n\n**`pip install balerin`**\n\n## Usage Example\n\n**There are two ways to use Balerin in your project:**\n\n- *`Basic`*: Loading all packages based on filesystem order.\n  (the order could be changed between each run).\n- *`Pro`*: Loading all packages respecting their dependencies on each other.\n  (the order will be always the same on every run).\n\n**Sample Project Structure:**\n\n- root_dir\n  - my_app\n    - accounting\n      - `__init__.py`\n      - `api.py`\n    - customers\n      - `__init__.py`\n      - `models.py`\n    - `__init__.py`\n    - `api.py`\n    - `models.py`\n  - `start.py`\n\n### Basic Usage:\n\n**`my_app/__init__.py:`**\n\n```python\nimport os\n\nfrom flask import Flask\nfrom balerin import PackagingManager\n\n\napp = Flask('my_app')\nworking_directory = os.path.abspath(os.getcwd())\nroot_package = os.path.join(working_directory, 'my_app')\nbalerin = PackagingManager(root_package, context=dict(important=True, app=app))\n```\n\n**`start.py:`**\n\n```python\nfrom my_app import balerin, app\n\nbalerin.load_components()\napp.run()\n```\n\n### Pro Usage:\n\nIn order to load packages respecting their dependencies on each other, you must define \na package class in `__init__.py` file of each package that has dependency on other packages.\nThe package class must be a subclass of Balerin's `Package` class:\n\n**`my_app/accounting/__init__.py:`**\n\n```python\nfrom balerin import Package\n\n\nclass AccountingPackage(Package):\n    # the name of the package.\n    # example: `my_app.api`.\n    # should get it from `__name__` for each package.\n    NAME = __name__\n\n    # list of all packages that this package is dependent\n    # on them and should be loaded after all of them.\n    # example: ['my_app.logging', 'my_app.api.public']\n    # this can be left as an empty list if there is no dependencies.\n    DEPENDS = ['my_app.customers']\n\n    # specifies that this package is enabled and must be loaded.\n    ENABLED = True\n\n    # name of a module inside this package that should be loaded before all other modules.\n    # for example: 'manager'\n    # this can be left as None if there is no such file in this package needing early loading.\n    COMPONENT_NAME = None\n```\n\nNow you can load your packages respecting their dependencies on each other, using \nthe sample code in **`Basic Usage`** section.\n\n### How to Choose Between Basic or Pro Usages:\n\nIn most cases, you don't need to use the `Pro Usage` style. unless your application \narchitecture is based on `Dependency Injection` and `IoC` concepts. so, when in doubt, go \nwith `Basic Usage`.\n\n### Initialization Arguments of PackagingManager Class:\n\n- `root`: it can be a single or multiple paths to different packages of your application.\n          Balerin will load all sub-packages of each path respectively.\n- `base_component`: specifies a module name which must be loaded before all other modules \n                    in each package if available. for example *manager*. this value could be \n                    overridden in each *Package* class using *COMPONENT_NAME* attribute.\n- `verbose`: specifies that loading info should be printed on each step.\n             defaults to True if not provided.\n- `ignored_packages`: list of package names that must be ignored from loading. package names \n                      must be fully qualified. for example: *my_app.accounting.public*. \n                      notice that if a package that has sub-packages added to ignore list, \n                      all of its sub-packages will be ignored automatically even if not \n                      present in ignore list.\n- `ignored_modules`: list of module names that must be ignored from loading. \n                     module names could be fully qualified or just the module name itself.\n                     for example: *my_app.customers.models* or *models*.\n                     notice that if only module name is provided, then all modules matching \n                     the provided name will be ignored from loading.\n- `ignored_detector`: a function to be used to detect if a package or module should be ignored.\n                      it must take two arguments, the first is the fully qualified name \n                      and the second is a boolean value indicating that the input is a module. \n                      it also should take optional keyword arguments as context. it should \n                      return a boolean value.\n                      for example: `my_detector(name, is_module, **context)`\n- `module_loader`: a function to be used to load custom attributes of a module. \n                   it should take two arguments, a name and a module instance.  \n                   it also should take optional keyword arguments as context. \n                   the output will be ignored. \n                   for example: `my_loader(name, module, **context)`\n- `context`: a dict containing all shared contexts to be used for example \n             inside `ignored_detector` and `module_loader` functions.\n\n### PackagingManager Public Interface:\n\nOnce you create an object of `PackagingManager` class, you can call \nthese methods on the created object:\n\n- `load_components`: load all packages inside the root path.\n- `load`: load a single module with provided name.\n- `get_loaded_packages`: get a list of all loaded package names.\n- `is_package_loaded`: get a value indicating that given package is loaded.\n- `get_context`: get a dict of all shared contexts.\n\n```python\nimport os\n\nfrom balerin import PackagingManager\n\n\nworking_directory = os.path.abspath(os.getcwd())\nroot_package = os.path.join(working_directory, 'my_app')\nbalerin = PackagingManager(root_package, context=dict(important=True))\n\nbalerin.load_components()\nbalerin.load('my_app.accounting.api')\nloaded_packages = balerin.get_loaded_packages()\nis_package_loaded = balerin.is_package_loaded('my_app.accounting')\ncontext = balerin.get_context()\n```\n\n## Hint\n\n`Balerin` is an albanian word and means dancer.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mononobi/balerin",
    "keywords": "python balerin package-manager packaging startup auto-importstartup-import syntax-error package-loader",
    "license": "BSD-3-Clause",
    "maintainer": "Mohamad Nobakht",
    "maintainer_email": "mohamadnobakht@gmail.com",
    "name": "balerin",
    "package_url": "https://pypi.org/project/balerin/",
    "platform": "",
    "project_url": "https://pypi.org/project/balerin/",
    "project_urls": {
      "Code": "https://github.com/mononobi/balerin",
      "Homepage": "https://github.com/mononobi/balerin",
      "Issue tracker": "https://github.com/mononobi/balerin/issues"
    },
    "release_url": "https://pypi.org/project/balerin/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A python package startup orchestrator. it can handle loading all packages of an application at startup time respecting package dependencies.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12698772,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2327243be794882409e8345cf5caee73e1a787d544ba28880999a00a68a2caa",
          "md5": "262eee0a3953df42fa267a150ef41f38",
          "sha256": "279a6a00b4c745b7677bcfe78e2ad2bcb95f34bf37dd2f50403c8656c4ed5737"
        },
        "downloads": -1,
        "filename": "balerin-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "262eee0a3953df42fa267a150ef41f38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16270,
        "upload_time": "2022-01-14T03:25:20",
        "upload_time_iso_8601": "2022-01-14T03:25:20.878994Z",
        "url": "https://files.pythonhosted.org/packages/e2/32/7243be794882409e8345cf5caee73e1a787d544ba28880999a00a68a2caa/balerin-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a088259bab755b2c9033ba6f7201a9088f11da689c2b37b215490d900eccc60",
          "md5": "5e1ea7d0126e1e1cbe709e02a94509d6",
          "sha256": "495b8f97442fa4dd14233256fad12f4ea733d112ce00b76447d90e25378bd52b"
        },
        "downloads": -1,
        "filename": "balerin-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5e1ea7d0126e1e1cbe709e02a94509d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15818,
        "upload_time": "2022-01-14T03:25:23",
        "upload_time_iso_8601": "2022-01-14T03:25:23.072316Z",
        "url": "https://files.pythonhosted.org/packages/2a/08/8259bab755b2c9033ba6f7201a9088f11da689c2b37b215490d900eccc60/balerin-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84bd6876c3f66448b5bd15fdfd3858b108c1b83e04a3ff8bf737ef6c33087066",
          "md5": "bf7916490bf2eec06bdb819037d391c7",
          "sha256": "5b897dfeb11d456810b998cc7b5c4dc05ece533561679e517c37bc03d8ce39ba"
        },
        "downloads": -1,
        "filename": "balerin-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf7916490bf2eec06bdb819037d391c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17109,
        "upload_time": "2022-01-26T10:48:12",
        "upload_time_iso_8601": "2022-01-26T10:48:12.258874Z",
        "url": "https://files.pythonhosted.org/packages/84/bd/6876c3f66448b5bd15fdfd3858b108c1b83e04a3ff8bf737ef6c33087066/balerin-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d63e999d3180334dd54736901fdaeaf96d657eaff61775baf42260a6f4ea0f4e",
          "md5": "fe5d144d6c4f29783a5ee5b97daf8db0",
          "sha256": "d548a8105dd8c928fe2b202c644838718dc010c251cfb119b03eec38b96521f7"
        },
        "downloads": -1,
        "filename": "balerin-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fe5d144d6c4f29783a5ee5b97daf8db0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17188,
        "upload_time": "2022-01-26T10:48:14",
        "upload_time_iso_8601": "2022-01-26T10:48:14.190009Z",
        "url": "https://files.pythonhosted.org/packages/d6/3e/999d3180334dd54736901fdaeaf96d657eaff61775baf42260a6f4ea0f4e/balerin-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73a1d6e5c69f32a3eb3231b698e7dd1a32087fbc775d2863b16b26acd7b44691",
          "md5": "8a2f552c4942382bc8bac68eb2d30c70",
          "sha256": "35b15cdb35f5d11fd8e7c7011c4b692c772406deb31049886de0c4b2650c3fbc"
        },
        "downloads": -1,
        "filename": "balerin-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a2f552c4942382bc8bac68eb2d30c70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17631,
        "upload_time": "2022-01-26T13:38:59",
        "upload_time_iso_8601": "2022-01-26T13:38:59.951873Z",
        "url": "https://files.pythonhosted.org/packages/73/a1/d6e5c69f32a3eb3231b698e7dd1a32087fbc775d2863b16b26acd7b44691/balerin-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aaedd2394fc70ea3cc6ed69b1a0e236d8b06149c4a371a2adf1494e4893ca22f",
          "md5": "873ee547074fe002af356c2c8224dd14",
          "sha256": "0fc0d0e66f7fc960233466a5b8337841a5cf8d8f273732584d458971022d9c6e"
        },
        "downloads": -1,
        "filename": "balerin-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "873ee547074fe002af356c2c8224dd14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17982,
        "upload_time": "2022-01-26T13:39:01",
        "upload_time_iso_8601": "2022-01-26T13:39:01.594644Z",
        "url": "https://files.pythonhosted.org/packages/aa/ed/d2394fc70ea3cc6ed69b1a0e236d8b06149c4a371a2adf1494e4893ca22f/balerin-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6a2f20ea3dc96576b6e0b0b8a2fd082ad1f36f8acbfa2b2a514eba6527a5e63",
          "md5": "933450ebae43d0e8724617883ea508bb",
          "sha256": "6aaf1a8676be2ddfe22e13c7403064f6a9ad2af0a499438b502cd36b25ac521a"
        },
        "downloads": -1,
        "filename": "balerin-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "933450ebae43d0e8724617883ea508bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17700,
        "upload_time": "2022-01-26T13:45:50",
        "upload_time_iso_8601": "2022-01-26T13:45:50.046171Z",
        "url": "https://files.pythonhosted.org/packages/d6/a2/f20ea3dc96576b6e0b0b8a2fd082ad1f36f8acbfa2b2a514eba6527a5e63/balerin-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33a27220982b7f30e23b460481d4f6ea44c17678939d618715edebb767f248f1",
          "md5": "1b7e4615c8bbec0bddae4501365590a6",
          "sha256": "ea2d2c6630f031c76c588a050dca656335d86544241b614ff052c43ca7c5d7dc"
        },
        "downloads": -1,
        "filename": "balerin-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1b7e4615c8bbec0bddae4501365590a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18004,
        "upload_time": "2022-01-26T13:45:51",
        "upload_time_iso_8601": "2022-01-26T13:45:51.764908Z",
        "url": "https://files.pythonhosted.org/packages/33/a2/7220982b7f30e23b460481d4f6ea44c17678939d618715edebb767f248f1/balerin-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6a2f20ea3dc96576b6e0b0b8a2fd082ad1f36f8acbfa2b2a514eba6527a5e63",
        "md5": "933450ebae43d0e8724617883ea508bb",
        "sha256": "6aaf1a8676be2ddfe22e13c7403064f6a9ad2af0a499438b502cd36b25ac521a"
      },
      "downloads": -1,
      "filename": "balerin-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "933450ebae43d0e8724617883ea508bb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17700,
      "upload_time": "2022-01-26T13:45:50",
      "upload_time_iso_8601": "2022-01-26T13:45:50.046171Z",
      "url": "https://files.pythonhosted.org/packages/d6/a2/f20ea3dc96576b6e0b0b8a2fd082ad1f36f8acbfa2b2a514eba6527a5e63/balerin-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33a27220982b7f30e23b460481d4f6ea44c17678939d618715edebb767f248f1",
        "md5": "1b7e4615c8bbec0bddae4501365590a6",
        "sha256": "ea2d2c6630f031c76c588a050dca656335d86544241b614ff052c43ca7c5d7dc"
      },
      "downloads": -1,
      "filename": "balerin-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1b7e4615c8bbec0bddae4501365590a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18004,
      "upload_time": "2022-01-26T13:45:51",
      "upload_time_iso_8601": "2022-01-26T13:45:51.764908Z",
      "url": "https://files.pythonhosted.org/packages/33/a2/7220982b7f30e23b460481d4f6ea44c17678939d618715edebb767f248f1/balerin-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}