{
  "info": {
    "author": "Richard Hartmann",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# binfootprint - unique serialization of python objects\n\n[![PyPI version](https://badge.fury.io/py/binfootprint.svg)](https://badge.fury.io/py/binfootprint)\n\n## Why unique serialization\n\nWhen caching computationally expansive function calls, the input arguments (*args, **kwargs)\nserve as key to look up the result of the function.\nTo perform efficient lookups these keys (often a large number of nested python objects) needs to be hashable.\nSince python's build-in hash function is randomly seeded (and applies to a few data types only) it is not\nsuited for persistent caching.\nAlternatively, standard hash functions, as provided by the \n[hashlib library](https://docs.python.org/3/library/hashlib.html), can be used.\nAs they relay on  byte sequences as input, python objects need to be converted to such a sequence first.\nSurely, python's pickle module provides such a serialization which, for our purpose, has the drawback that\nthe byte sequence is not guaranteed to be unique (e.g., a dictionary can be stored as different byte sequences,\nas the order of the (key, value) pairs is irrelevant).\n\nThe binfootprint module fills that gap.\nIt guarantees that a particular python object will have a unique binary representation which \ncan serve as input for any hash function.  \n\n## Quick start\n\n`binfootprint.dump(data)` generate a unique binary representation \n(binary footprint) of `data`.\n```python\nb = binfootprint.dump(['hallo', 42])\n```\n\nIts output can serve as suitable input for a hash function.\n```python\nhashlib.sha256(b).hexdigest()\n```\n\n`binfootprint.load(data)` reconstructs the original python object.\n```python\nob = binfootprint.load(b)\n```\n\nNumpy array can be serialized.\n```python\na = numpy.asarray([0, 2.3, 4])\nb = binfootprint.dump(a)\n```\n\nClasses which implement `__getstate__` (pickle interface) or `__bfkey__` can be\nserialized too.\n\n```python\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __getstate__(self):\n        return [self.x, self.y]\n        \nob = Point(4, -2)\nb = binfootprint.dump(ob)\n```\nIf `__bfkey__` is implemented, it is used over `__getstate__`.\n\n*New since version 1.2.0:* \n[`functools.partial`](https://docs.python.org/3/library/functools.html?highlight=partial#functools.partial) \nobjects can now be serialized too. This allows to cache a function which takes a `functools.partial`\nas argument.\n\n```python\ndef gaussian(x, a, sigma, x0):\n    return a * math.exp(-(x-x0)**2 / 2 / sigma**2)\n\n@binfootprint.util.ShelveCacheDec()\ndef quad(f, x_min, x_max, dx):\n    r = 0\n    x = x_min\n    while x < x_max:\n        r += f(x)\n        x += dx\n    return dx*r\n\ng = functools.partial(gaussian, a=1, sigma=1, x0=-2.34)\nquad(g, x_min=-10, x_max=10, dx=0.001)\n\n```\n\n### cache decorator \n\nUtilizing the unique binary representation of python objects, a persistent \ncache for quite general functions is provided by the `ShelveCache` class.\nThe decorator `ShelveCacheDec` makes it really easy to use: \n\n```python\n@binfootprint.ShelveCacheDec(path='.cache')\ndef area(p):\n    return p.x * p.y\n```\n\n### parameter base class\n\nTo conveniently organize a set of parameters suitable as key for caching \nyou can subclass `ABCParameter`. Why should you do that?\n\n- The `__bfkey__` method of `ABCParameter` ignores parameters that are `None`.\n  This allows to extend your function interface without loosing access to \n  cached results from earlier stages.\n- You can add informative information to the `__non_key__` member which\n  are not included in the binary representation of the parameter class.\n\n```python\nclass Param(bf.ABCParameter):\n    __slots__ = [\"x\", \"y\", \"__non_key__\"]\n\n    def __init__(self, x, y, msg=\"\"):\n        super().__init__()\n        self.x = x\n        self.y = y\n        self.__non_key__ = dict()\n        self.__non_key__[\"msg\"] = msg\n```\n\n\n## Which data types can be serialized\n\nPython's **fundamental data types** are supported\n* integer \n* float (64bit)\n* complex (128bit)\n* strings\n* byte arrays\n* special build-in constants: `True`, `False`, `None`\n\nas well as their **nested combination** by means of the **native data structures**\n- tuple\n- list\n- dictionary\n- namedtuple.\n\nIn addition, the following types are supported:\n- numpy `ndarray`: \n  The serialization makes use of numpy's \n  [format.write_array()](https://numpy.org/devdocs/reference/generated/numpy.lib.format.write_array.html) \n  function using version 1.0.\n- `functools.partial` objects (*new since version 1.2.0*)\n\n Furthermore, any class that implements \n\n- `__getstate__` (python's pickle interface)\n\ncan be serialized as well, given that the returned data from `__getstate__` can be serialized.\nDistinction between objects is realized by adding the class name and the name of the module which defines \nthe class to the binary data.\nThis in turn allows to also reconstruct the original object by means of the `__setstate__` method.\n\nIn case the `__getstate__` method is not suitable, you can implement\n\n- `__bfkey__`\n\nwhich should return the necessary data to distinguish different objects.\nThe spirit of `__kfkey__` is very similar to that of `__getstate__`, although it is meant\nfor serialization only, and to for reconstruction the original object.\n\nNote that, if `__bfkey__` is implemented it will be used, regardless of `__getstate__`.\n\nNote: dumping older version is not supported anymore. If backwards compatibility is needed check out older\ncode from git. If needed converters should/will be written.\n\n## Installation\n\n### pip\ninstall the latest version using pip\n\n    pip install binfootprint\n\n### poetry\nUsing poetry allows you to include this package in your project as a dependency.\n\n### git\ncheck out the code from github\n\n    git clone https://github.com/richard-hartmann/binfootprint.git\n\n### dependencies\n\n- python3\n- numpy\n\n## How to use the binfootprint module\n\n### data serialization\n\nGenerating the binary footprint is done using the `dump(obj)` method.\n\n#### very simple\n```python\nimport binfootprint as bf\nbf.dump(['hallo', 42])\n```\n\n#### more complex\n```python\nimport hashlib\nimport binfootprint as bf\n\nSIGMA_Z = 0x34\ndata = {\n    'Færøerne': {\n        'area': (1399, 'km^2'),\n        'population': 54000\n    },\n    SIGMA_Z: [[-1, 0],\n              [0, 1]],\n    'usefulness': None\n}\nb = bf.dump(data)\nprint(\"MD5 check sum:\", hashlib.md5(b).hexdigest())\n```\n\n### reconstruct serialized data\n\nAlthough the primary focus of this module is the binary representation,\nfor reasons of convenience or debugging it might be useful restore the original\npython object from the binary data. \nCalling the `load(bin_data)` function achieves that task. \n  \n```python\nimport binfootprint as bf\n\ndata = ['hallo', 42]\nb = bf.dump(data)\ndata_prime = bf.load(b)\nprint(data_prime)\n```\n\n### python objects - `__getstate__`\n\nSince `__getstate__` is assumed to uniquely represent the state of an\nobject by means of the returned data, it can be used to generate a unique binary\nrepresentation.\n\n```python\nimport binfootprint as bf\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __getstate__(self):\n        return [self.x, self.y]\n    def __setstate__(self, state):\n        self.x = state[0]\n        self.y = state[1]\n\nob = Point(4, -2)\nb = bf.dump(ob)\n```\nSince `__setstate__` is implemented as well, the original object can be\nreconstructed.\n```python\nob_prime = bf.load(b)\nprint(\"type:\", type(ob_prime))\n# type: <class '__main__.Point'>\nprint(\"member x:\", ob_prime.x)\n# member x: 4\nprint(\"member y:\", ob_prime.y)\n# member y: -2\n```\n\n### implement `__bfkey__` if `__getstate__` is not suited\n\nIn case `__getstate__` returns data which is not sufficient to uniquely label\nan object or if the data cannot be serialized by the binaryfootprint module,\nthe method `__bfkey__` should be implemented.\nIt is expected to return serializable data which uniquely identifies the state\nof the object.\nNote that, if `__bfkey__` is present, `__getstate__` is ignored.\n\n**Importantly**, when deserializing the binary data from an object implementing \n`__bfkey__`, the python object **is not returned**, since there is no \n`__setstate__`equivalent. Instead, the class name, the name of the module defining \nthe class and the data returned by `__bfkey__` is recovered.\nThis should not pose a problem, since the main focus of the binfootprint module is\nthe unique binary serialization of an object.\nTo ensure deserialization use python's `pickle` module.\n\n```python\nclass Point2(Point):\n    def __bfkey__(self):\n        return {'x': self.x, 'y': self.y}\n\nob = Point2(5, 3)\nb = bf.dump(ob)\n\nob_prime = bf.load(b)\nprint(\"load on bfkey:\", ob_prime)\n# load on bfkey: ('Point2', '__main__', {'x': 5, 'y': 3})\n```\n\n### numpy ndarrays\n\nNumpy's `ndarray` are supported by relaying on numpy's binary serialization \nusing [format.write_array()](https://numpy.org/devdocs/reference/generated/numpy.lib.format.write_array.html).\n\n```python\nimport binfootprint as bf\nimport numpy as np\n\na = np.asarray([0, 1, 1, 0])\nb1 = bf.dump(a)\n```\n\nAs expected, changing the shape or data type yield a different binary representation\n\n```python\na2 = a1.reshape(2,2)\nb2 = bf.dump(a2)\na3 = np.asarray(a1, dtype=np.complex128)\nb3 = bf.dump(a3)\nprint(\"            MD5 of int array :\", hashlib.md5(b1).hexdigest())\n# 949bfba1237c48007a066398f744a161\nprint(\"MD5 of int array shape (2,2) :\", hashlib.md5(b2).hexdigest())\n# e9049a19f82c6f282d65466a72360cd8\nprint(\"        MD5 of complex array :\", hashlib.md5(b3).hexdigest())\n# 2274ea54925d88ec4d53853050e55a82\n```\n\n# caching\n\nWith the binaryfootprint module, caching function calls is straight forward.\nAn implementation of such a cache using python's `shelve` for persistent storage\nis provided by the `ShelveCacheDec` class.\n\n```python\n@binfootprint.ShelveCacheDec()\ndef area(p):\n    print(\" * f(p(x={},y={})) called\".format(p.x, p.y))\n    return p.x * p.y\n```\n\nIt is safe to use the `ShelveCacheDec` with the same data location (`path`)   \non different functions, since the name of the function and the name of the \nmodule defining the function determined the name of the underlying database.  \n\nIn addition to caching the decorator extends the function signature by the \nkwarg `_cache_flag` which modifies the caching behavior as follows:\n\n- `_cache_flag = 'no_cache'`: Simple call of `fnc` with no caching.\n- `_cache_flag = 'update'`: Call `fnc` and update the cache with recent return value.\n- `_cache_flag = 'has_key'`: Return `True` if the call has already been cached, otherwise `False`.\n- `_cache_flag = 'cache_only'`: Raises a `KeyError` if the result has not been cached yet.\n\n```python\np = Point(10, 10)\nprint(\"first call results in\")\nprint(area(p))\n# * f(p(x=10,y=10)) called\n# 100\n\nprint(\"second call results in\")\nprint(area(p))\n# 100\np = Point(10, 11)\n\nprint(\"f(p(10, 11)) is in cache?\")\nprint(area(p, _cache_flag='has_key'))\n# False\n```\n\n# pitfalls\n\n### ints and floats\n\nSince the binary representation between ints and floats is different, `1` and `1.0`\nwill be treated as different things.\nThis means that the cached value of a function call with an argument being `1` is\nnot found when passing `1.0` as argument.\nAlthough the result of the function will most likely be the same.\nObviously, the same holds true for numpy array of different `dtype`.\n\n# Parameter class\n\nTha abstract base class `ABCParameter` allows to conveniently manage a set \nof parameters.\n\nRelevant parameters, explicitly specified as data member via `__slots__` \nmechanism, are returned by `__bfkey__` method (see above).\nTheir order in the `__slots__` definition is irrelevant.\n**Importantly**, class members are included only if they are not `None`.\nIn this way a parameter class definition can be extended while still being \nable to reproduce the binary footprint of an older class definition.\n\nIf present, the class member `__non_key__` has a special meaning.\nIt is not included in the parameter-values list returned by `__bfkey__`.\nIt is expected to be dictionary-like and allows storing \nadditional / informative information.\nThis is also reflected by the string representation of the class.\n\n```python\nclass Param(binfootprint.ABCParameter):\n    __slots__ = [\"x\", \"y\", \"__non_key__\"]\n\n    def __init__(self, x, y, msg=\"\"):\n        super().__init__()\n        self.x = x\n        self.y = y\n        self.__non_key__ = dict()\n        self.__non_key__['msg'] = msg\n\n\np = Param(3, 4.5)\nbfp = binfootprint.dump(p)\nprint(\"{}\\n has hex hash value {}...\".format(\n    p, binfootprint.hash_hex_from_bin_data(bfp)[:6])\n)\n# x : 3\n# y : 4.5\n# --- extra info ---\n# msg : \n# has hex hash value 38dbe8...\n\np = Param(3, 4.5, msg=\"I told you, don't use x=3!\")\nbfp = binfootprint.dump(p)\nprint(\"{}\\n has hex hash value {}...\".format(\n    p, binfootprint.hash_hex_from_bin_data(bfp)[:6])\n)\n# x : 3\n# y : 4.5\n# --- extra info ---\n# msg : I told you, don't use x=3!\n# has hex hash value 38dbe8...\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/richard-hartmann/binfootprint",
    "keywords": "serialization,binary key,cache,function cache,scientific computing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "binfootprint",
    "package_url": "https://pypi.org/project/binfootprint/",
    "platform": null,
    "project_url": "https://pypi.org/project/binfootprint/",
    "project_urls": {
      "Homepage": "https://github.com/richard-hartmann/binfootprint",
      "Repository": "https://github.com/richard-hartmann/binfootprint"
    },
    "release_url": "https://pypi.org/project/binfootprint/1.2.0/",
    "requires_dist": [
      "numpy (>=1.24.1,<2.0.0)",
      "pytest (>=7.0.0,<8.0.0)",
      "black (>=22.0.0,<23.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "unique serialization of python objetcs",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16671449,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9df2b591785cc965f068b3df0310351ab29eb5d5992d68692249322aae02c12",
          "md5": "fb5922f2eaae87f51874e00a5a52264e",
          "sha256": "f2a315368e62836553307f5135d7dece708983cab7355928b0ff080eab04e815"
        },
        "downloads": -1,
        "filename": "binfootprint-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fb5922f2eaae87f51874e00a5a52264e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4994,
        "upload_time": "2016-09-29T22:14:13",
        "upload_time_iso_8601": "2016-09-29T22:14:13.568184Z",
        "url": "https://files.pythonhosted.org/packages/e9/df/2b591785cc965f068b3df0310351ab29eb5d5992d68692249322aae02c12/binfootprint-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "658d6d0095bc941ad644d4d2c734297f428e03ec32f47ed2bb65c4d386e210e8",
          "md5": "bacd6a078561b6e304e264b2a1b6c769",
          "sha256": "e57525ed96f1bec0dc297eacfd1edf7f46b05500a36030c2458ec8fe85b76e32"
        },
        "downloads": -1,
        "filename": "binfootprint-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bacd6a078561b6e304e264b2a1b6c769",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 6882,
        "upload_time": "2022-03-17T11:33:26",
        "upload_time_iso_8601": "2022-03-17T11:33:26.368001Z",
        "url": "https://files.pythonhosted.org/packages/65/8d/6d0095bc941ad644d4d2c734297f428e03ec32f47ed2bb65c4d386e210e8/binfootprint-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98ba406598648f0a69f97b1ac845523dd12978769607245eb33328b1d401d85c",
          "md5": "081fd1ddcf822e1a10a333b0abbed794",
          "sha256": "0a0291110da6e7a39bd48d09e30af9acecacc794f296b44226fe5b2f901b15a2"
        },
        "downloads": -1,
        "filename": "binfootprint-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "081fd1ddcf822e1a10a333b0abbed794",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 6254,
        "upload_time": "2022-03-17T11:33:27",
        "upload_time_iso_8601": "2022-03-17T11:33:27.562664Z",
        "url": "https://files.pythonhosted.org/packages/98/ba/406598648f0a69f97b1ac845523dd12978769607245eb33328b1d401d85c/binfootprint-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dae6c45341122bf3100dfa205129d883e592f4af3377f139b46f06230b5a105d",
          "md5": "70dcada873534aef0427adcae36a27a0",
          "sha256": "e4f828fe1635ad99bb2a399ff9e0d4ede6201a0658741943765ef8341cc8a0a3"
        },
        "downloads": -1,
        "filename": "binfootprint-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70dcada873534aef0427adcae36a27a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<3.10",
        "size": 9070,
        "upload_time": "2022-03-17T12:44:35",
        "upload_time_iso_8601": "2022-03-17T12:44:35.324627Z",
        "url": "https://files.pythonhosted.org/packages/da/e6/c45341122bf3100dfa205129d883e592f4af3377f139b46f06230b5a105d/binfootprint-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a69598f535369a8458312c068052b7fafc74ce8b618641ea50ee2a24d3d80e9",
          "md5": "60daf33374ea96172169f89c95725fdc",
          "sha256": "07ec38688a60090e7bad1d3d180cf44c4e3d65f9cc22956c4aa8f673a8d4944d"
        },
        "downloads": -1,
        "filename": "binfootprint-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60daf33374ea96172169f89c95725fdc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.10",
        "size": 7907,
        "upload_time": "2022-03-17T12:44:37",
        "upload_time_iso_8601": "2022-03-17T12:44:37.209465Z",
        "url": "https://files.pythonhosted.org/packages/3a/69/598f535369a8458312c068052b7fafc74ce8b618641ea50ee2a24d3d80e9/binfootprint-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bca18a7e9f11594c928cb0c19b21d54928b638005afc0c17a5d4f5fc5e46a2c8",
          "md5": "c0f7fd0f743dd1c91952d0774f02e09f",
          "sha256": "5124af36d1f73fb3dec3d03e7c8e72331d9f8e4d37def064a93775f1e01e9d88"
        },
        "downloads": -1,
        "filename": "binfootprint-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0f7fd0f743dd1c91952d0774f02e09f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 12990,
        "upload_time": "2022-12-22T13:18:31",
        "upload_time_iso_8601": "2022-12-22T13:18:31.144946Z",
        "url": "https://files.pythonhosted.org/packages/bc/a1/8a7e9f11594c928cb0c19b21d54928b638005afc0c17a5d4f5fc5e46a2c8/binfootprint-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb2bd251ae0bf74f28ed52d87df9e054196ac9a154ff6407605f79485f206974",
          "md5": "68f7f60152621e26221837772101144d",
          "sha256": "1c8fa5c4f814c21d20fa9fcfbaf703a41655a0d49f9065fa1a477f339ddd0cd1"
        },
        "downloads": -1,
        "filename": "binfootprint-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "68f7f60152621e26221837772101144d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 15823,
        "upload_time": "2022-12-22T13:18:33",
        "upload_time_iso_8601": "2022-12-22T13:18:33.157592Z",
        "url": "https://files.pythonhosted.org/packages/bb/2b/d251ae0bf74f28ed52d87df9e054196ac9a154ff6407605f79485f206974/binfootprint-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "330b04a2a0c9e23b7086abe1c43fc308dda11a6c98dade3ff372d60d85de080c",
          "md5": "d4d8dabf1c40801eab549ffaa1dd12cb",
          "sha256": "86c1616b8c0b1a2503bd063277e7509488913e4d8bfc313b1d4301d7a6afdd86"
        },
        "downloads": -1,
        "filename": "binfootprint-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4d8dabf1c40801eab549ffaa1dd12cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 13185,
        "upload_time": "2023-01-02T11:05:44",
        "upload_time_iso_8601": "2023-01-02T11:05:44.012897Z",
        "url": "https://files.pythonhosted.org/packages/33/0b/04a2a0c9e23b7086abe1c43fc308dda11a6c98dade3ff372d60d85de080c/binfootprint-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "553b376d1976aca8cd266f0a60a23bbfbc355ed9934497136993bbc0d50bbb0a",
          "md5": "a4b6c2c5e3f968edf3b60f11f8bad9b3",
          "sha256": "97af9f72cd0111dcddbda2d4e3cc9570bbec0a35cc64636992527d595b9e5c2e"
        },
        "downloads": -1,
        "filename": "binfootprint-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a4b6c2c5e3f968edf3b60f11f8bad9b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16067,
        "upload_time": "2023-01-02T11:05:45",
        "upload_time_iso_8601": "2023-01-02T11:05:45.844699Z",
        "url": "https://files.pythonhosted.org/packages/55/3b/376d1976aca8cd266f0a60a23bbfbc355ed9934497136993bbc0d50bbb0a/binfootprint-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e122f1e48377a7d42b8cfee384f3b93fac1cb3f4032fa9c1f90ce8a10e313258",
          "md5": "cac04f7814a8857a547f230dcea69045",
          "sha256": "10592a800e5d71654f449243adfaf95963e7cd23a9197173e8e4d871d3adc2b1"
        },
        "downloads": -1,
        "filename": "binfootprint-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cac04f7814a8857a547f230dcea69045",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 13851,
        "upload_time": "2023-02-02T21:36:12",
        "upload_time_iso_8601": "2023-02-02T21:36:12.407242Z",
        "url": "https://files.pythonhosted.org/packages/e1/22/f1e48377a7d42b8cfee384f3b93fac1cb3f4032fa9c1f90ce8a10e313258/binfootprint-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f364e8bf08a9af0cba4fc9cd4816c6cc5f077aace96bbb2203f691f925a4840",
          "md5": "9088ca38c274ca9f4e56ba5be9cb0058",
          "sha256": "78c3a27de3bd5d1385f3661b686198f05c15451843d2f503bee892c3ec397818"
        },
        "downloads": -1,
        "filename": "binfootprint-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9088ca38c274ca9f4e56ba5be9cb0058",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16963,
        "upload_time": "2023-02-02T21:36:14",
        "upload_time_iso_8601": "2023-02-02T21:36:14.804883Z",
        "url": "https://files.pythonhosted.org/packages/3f/36/4e8bf08a9af0cba4fc9cd4816c6cc5f077aace96bbb2203f691f925a4840/binfootprint-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e122f1e48377a7d42b8cfee384f3b93fac1cb3f4032fa9c1f90ce8a10e313258",
        "md5": "cac04f7814a8857a547f230dcea69045",
        "sha256": "10592a800e5d71654f449243adfaf95963e7cd23a9197173e8e4d871d3adc2b1"
      },
      "downloads": -1,
      "filename": "binfootprint-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cac04f7814a8857a547f230dcea69045",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 13851,
      "upload_time": "2023-02-02T21:36:12",
      "upload_time_iso_8601": "2023-02-02T21:36:12.407242Z",
      "url": "https://files.pythonhosted.org/packages/e1/22/f1e48377a7d42b8cfee384f3b93fac1cb3f4032fa9c1f90ce8a10e313258/binfootprint-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f364e8bf08a9af0cba4fc9cd4816c6cc5f077aace96bbb2203f691f925a4840",
        "md5": "9088ca38c274ca9f4e56ba5be9cb0058",
        "sha256": "78c3a27de3bd5d1385f3661b686198f05c15451843d2f503bee892c3ec397818"
      },
      "downloads": -1,
      "filename": "binfootprint-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9088ca38c274ca9f4e56ba5be9cb0058",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 16963,
      "upload_time": "2023-02-02T21:36:14",
      "upload_time_iso_8601": "2023-02-02T21:36:14.804883Z",
      "url": "https://files.pythonhosted.org/packages/3f/36/4e8bf08a9af0cba4fc9cd4816c6cc5f077aace96bbb2203f691f925a4840/binfootprint-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}