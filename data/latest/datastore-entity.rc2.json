{
  "info": {
    "author": "Seyram Komla Sapaty",
    "author_email": "komlasapaty@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Datastore Entity\n\nDatastore Entity package provides a simple ORM-like (think SQL-Alchemy) interface to [Google Cloud](https://cloud.google.com) NoSQL \n[Datastore](https://cloud.google.com/datastore/docs/datastore-api-tutorial#python) (Firestore in Datastore mode).\n\n\"_Google Cloud Firestore in Datastore mode is a NoSQL document database built for automatic scaling, high performance, and ease of application development._\"\n\nDatastore Entity allows you to represent your entities using Python classes.\nYou can then use familiar ORM patterns with popular packages like WTForms(eg. ```form.populate_obj(model)```) or \nFlask-Login(ie ```User``` model for authentication), to create, read, update and delete entities.\n\n## Documentation\n[Datastore Entity documentation](https://datastore-entity.readthedocs.io)\n\n# Quick Start\nAs always, to connect to a Google Cloud Platform service from your local machine, you need to set up a service account key.\nUse the environment variable **GOOGLE_APPLICATION_CREDENTIALS** to point to the JSON file\n```shell\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/code/auth/datastore-service-account.json\"\n```\nSee below for another method of connecting by manually specifying the location of the service account JSON file.\n\n## Installation\nInstall the package using pip\n```shell\npip install datastore-entity\n```\n\n# Usage Examples\nSome examples ...\n### Create A Model Class \n```python\nfrom datastore_entity import DatastoreEntity, EntityValue\n\nclass User(DatastoreEntity):\n\n    # specify a default value of 'None'\n    username = EntityValue(None)\n    # or provide no argument to imply 'None'\n    password = EntityValue()\n    # default value of 1\n    active = EntityValue(1)\n    date_created = EntityValue(datetime.datetime.utcnow())\n\n    # specify the name of the entity kind. \n    # This is REQUIRED. Raises ValueError otherwise\n    __kind__ = \"user\"\n\n    # optionally add properties to exclude from datastore indexes \n    __exclude_from_index__ = ['password']\n\n    # call the super class here\n    def __init__(self, **kwargs):\n        super(User, self).__init__(**kwargs)\n\n    # other useful methods go here...\n```\n\n### Connecting To Datastore\n```python\n# connect to the default datastore namespace. \nuser = User()  \n# After connecting, you can retrieve an entity as an object \n# or populate attributes and save the entity\n\n#connect to the 'custom' datastore namespace\nuser = User(namespace='custom')  \n\n# connect using a service account JSON key (as opposed to using \n# the environment variable GOOGLE_APPLICATION_CREDENTIALS)\nuser = User(service_account_json_path='path/to/service/account.json') \n```\n\n### Persist an entity\n```python\n# set object attribute\nuser.username = 'komla'\n# save or update entity to datastore\nuser.save()\n\n# save an entity with custom ID/Name\nuser.save(id='komla')\n```\n\n### Generate datastore key ###\n```python\n# Create a key by specifing a parent and descendant(s)\nkey_path = ['Client','foo','Department','bar']\nancestor_key = user.generate_key(key_path)\n\n# then save an entity as a descendant of a parent entity\nuser.save(parent_or_ancestor=ancestor_key) \n```\n\n### Retrieve an entity as an object\n```python\n# specify property name and value. See the Tips sections below!\nuser = User().get_obj('username','komla') \n\n# the 'key' attribute is the entity's datastore key\nentity_key = user.key    \n\n# get the entity's id or name\nname = user.key.id_or_name\n\n# get the entity's parent's key\nparent_key = user.key.parent\n\n```\n\n## Tips\n#### Using A Base Model\nYou can use a class to represent common properties/columns, then inherit it for your models\n```python\nclass BaseModel(DatastoreEntity):\n    date_created = EntityValue(datetime.datetime.utcnow())\n    created_by = EntityValue('Admin')\n    updated_by = EntityValue(None)\n\nclass User(BaseModel):\n    username = EntityValue(None)\n    password = EntityValue()\n    email = EntityValue(None)\n\n    # ...\n```\n\n#### Retrieving Entity As Object\nOften, you'll have a property/column you use to fetch an entity (eg, username or email)\nInstead of always specifying the property/column AND value using the provided ```get_obj()``` method, \nyou can simplify this by wrapping your own method for your model around ```get_obj()```:\n```python\ndef get(self, value):\n    return self.get_obj('username',value)\n```\nThen you can grab your entity/object with ```user = User().get('komla')```\n\n#### Testing\nTo initialize your model without connecting to datastore(eg. for the purposes of testing),\npass in the ```conn``` argument as ```False```\n```python\nuser = User(conn=False)\n```\n\n## Notes ##\nThere might be operations you want to perform that are not available via the interface provided.\nTo get a direct access to Datastore connection client, use the ```get_client()``` method.\n```python\ndatastore_client = user.get_client()\n# ... proceed with operation\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/komlasapaty/datastore-entity",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datastore-entity",
    "package_url": "https://pypi.org/project/datastore-entity/",
    "platform": "",
    "project_url": "https://pypi.org/project/datastore-entity/",
    "project_urls": {
      "Homepage": "https://github.com/komlasapaty/datastore-entity"
    },
    "release_url": "https://pypi.org/project/datastore-entity/0.2.0/",
    "requires_dist": [
      "google-cloud-datastore (>=1)"
    ],
    "requires_python": ">=3.5",
    "summary": "A simple ORM-like interface to Google Cloud NoSQL Datastore",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9306636,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23970f2fcd5933076d7463125c23096c93f6d594eff92bdcdb123c07b25fbede",
          "md5": "8ccc981a9823df0f9d1acc35ce3afa6b",
          "sha256": "0bf514a64631c5c4720d5c01d09aff996c15e22940da8fa38fcceffa3c78845e"
        },
        "downloads": -1,
        "filename": "datastore_entity-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ccc981a9823df0f9d1acc35ce3afa6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 9387,
        "upload_time": "2020-08-31T05:19:18",
        "upload_time_iso_8601": "2020-08-31T05:19:18.284643Z",
        "url": "https://files.pythonhosted.org/packages/23/97/0f2fcd5933076d7463125c23096c93f6d594eff92bdcdb123c07b25fbede/datastore_entity-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "706770f79130012574fc15fa957b5bcc37a068ab9ac5f9a4448aa17a68625152",
          "md5": "62756997ddb4640755154a7955c17b89",
          "sha256": "ff5cb2667ef66052d3bc3828db9dedd23bf70888e1b64146da9a41c50b9f39e8"
        },
        "downloads": -1,
        "filename": "datastore-entity-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62756997ddb4640755154a7955c17b89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8519,
        "upload_time": "2020-08-31T05:19:21",
        "upload_time_iso_8601": "2020-08-31T05:19:21.141512Z",
        "url": "https://files.pythonhosted.org/packages/70/67/70f79130012574fc15fa957b5bcc37a068ab9ac5f9a4448aa17a68625152/datastore-entity-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "167730ef12b9409ee36c182bd22c53c92d00b11abe3d0eb8020d5d9bf6a75c75",
          "md5": "5048f7faf3d2e012ca46a19569531d7b",
          "sha256": "629ddb50ecc20e6bbd42bf9ddf33a762686a2fb07fb9e64fdeb6aa276c81fa0e"
        },
        "downloads": -1,
        "filename": "datastore_entity-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5048f7faf3d2e012ca46a19569531d7b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 9461,
        "upload_time": "2021-02-03T14:21:29",
        "upload_time_iso_8601": "2021-02-03T14:21:29.753581Z",
        "url": "https://files.pythonhosted.org/packages/16/77/30ef12b9409ee36c182bd22c53c92d00b11abe3d0eb8020d5d9bf6a75c75/datastore_entity-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "309a701bfbdc341abc9616d2c9d77b72a41c35b7147a78bf203b4deae58019ce",
          "md5": "668d0a1eb3104aed5de2c166dd6f5931",
          "sha256": "191e93ab0b238cfa0c2df5c1d5fa335d01affb2c7fa14fcaf857479e4c940edb"
        },
        "downloads": -1,
        "filename": "datastore-entity-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "668d0a1eb3104aed5de2c166dd6f5931",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8580,
        "upload_time": "2021-02-03T14:21:31",
        "upload_time_iso_8601": "2021-02-03T14:21:31.225370Z",
        "url": "https://files.pythonhosted.org/packages/30/9a/701bfbdc341abc9616d2c9d77b72a41c35b7147a78bf203b4deae58019ce/datastore-entity-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "167730ef12b9409ee36c182bd22c53c92d00b11abe3d0eb8020d5d9bf6a75c75",
        "md5": "5048f7faf3d2e012ca46a19569531d7b",
        "sha256": "629ddb50ecc20e6bbd42bf9ddf33a762686a2fb07fb9e64fdeb6aa276c81fa0e"
      },
      "downloads": -1,
      "filename": "datastore_entity-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5048f7faf3d2e012ca46a19569531d7b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 9461,
      "upload_time": "2021-02-03T14:21:29",
      "upload_time_iso_8601": "2021-02-03T14:21:29.753581Z",
      "url": "https://files.pythonhosted.org/packages/16/77/30ef12b9409ee36c182bd22c53c92d00b11abe3d0eb8020d5d9bf6a75c75/datastore_entity-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "309a701bfbdc341abc9616d2c9d77b72a41c35b7147a78bf203b4deae58019ce",
        "md5": "668d0a1eb3104aed5de2c166dd6f5931",
        "sha256": "191e93ab0b238cfa0c2df5c1d5fa335d01affb2c7fa14fcaf857479e4c940edb"
      },
      "downloads": -1,
      "filename": "datastore-entity-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "668d0a1eb3104aed5de2c166dd6f5931",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 8580,
      "upload_time": "2021-02-03T14:21:31",
      "upload_time_iso_8601": "2021-02-03T14:21:31.225370Z",
      "url": "https://files.pythonhosted.org/packages/30/9a/701bfbdc341abc9616d2c9d77b72a41c35b7147a78bf203b4deae58019ce/datastore-entity-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}