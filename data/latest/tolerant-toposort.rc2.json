{
  "info": {
    "author": "",
    "author_email": "David Turland <david@turland.org>, \"Eric V. Smith\" <eric@trueblade.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# <a id=\"tolerant-toposort\"></a>Tolerant toposort\r\n\r\n**Tolerant toposort** extends the PyPi package [toposort](https://pypi.org/project/toposort) to support disabled nodes within the graph   \r\nIt takes a (directed) dependency graph, and disabled nodes as input,and returns ordered batches of nodes which are independent of disabled nodes\r\n\r\n```python\r\ndata = {\r\n            2:  {11},\r\n            9:  {11, 8},\r\n            10: {11, 3},\r\n            11: {7, 5},\r\n            8:  {7, 3},\r\n        }\r\ndisabled = {5}\r\ntoposort(data, disabled)\r\n[{3, 7}, {8}]\r\n```\r\n\r\n# <a id=\"examples\"></a>Examples\r\n## <a id=\"simple\"></a>Simple\r\nItem  1 depends on Item 2, depends on 3, depends on 4   \r\nWith Item 3 disabled both 2 and 1 are implicitly disabled.   \r\nHowever, using tolerant toposort, we find we can still process Item 4\r\n![tiny](https://user-images.githubusercontent.com/11562561/219431039-bbc7cc5b-eb80-4fe4-8eb9-8668ce500a10.png)\r\n\r\n```python\r\ndata = {\r\n            1:  {2},\r\n            2:  {3},\r\n            3:  {4},\r\n        }\r\ndisabled = {3}\r\nresult = toposort(data, disabled)\r\n[{4}]\r\n```\r\n\r\n## <a id=\"less-simple\"></a>Less Simple\r\nA more complicated graph with Item 7 disabled   \r\nAgain, using tolerant toposort, we find we can still process Items 3 and 5, then 10, and then 12:\r\n![small](https://user-images.githubusercontent.com/11562561/219431230-07accc97-1a15-4f2d-8ba6-06ad9768e2a0.png)\r\n\r\n```python\r\ndata = {2: {2,11},\r\n        9: {11, 8, 10},\r\n       10: {3},\r\n       11: {7, 5},\r\n        8: {7, 3},\r\n       12: {10},\r\n       }\r\ndisabled = {7}\r\nresult = toposort(data, disabled)\r\n[{3, 5}, {10}, {12}]\r\n```\r\n\r\n# <a id=\"use-case\"></a>Use Case\r\n\r\nThe original use case was building packages.\r\n\r\nThe aim was to process(build) as many nodes(packages) as possible in a tree of nodes:\r\n- Whilst processing, a node might fail to be processed\r\n- Or the node might be known to be failed prior to processing\r\n- If a node was failed then it and its dependants could not be processed\r\n- Fixing, aka re-enabling, nodes took time\r\n- Processing nodes took time\r\n- Processing a node only to find its dependant was failed, took time\r\n- Once a node was processed, it needed no further processing\r\n\r\n\r\nThe main issue was if a node failed ( or was failed prior), then no more nodes could safely be processed, and that switched what should have been concurrent:\r\n- fixing nodes\r\n- processing nodes\r\n\r\ninto a repetition of process batches,node fails,fix node,process batches,node fails,fix node,process batches...\r\n\r\n\r\nRequirements for the improvements:\r\n- To have the best handle on the number of disabled nodes (ie attempt to process as many nodes much as possible)\r\n- Concurrently be able to:\r\n  -   repeatedly process batches, revealing failed nodes as they appear, recalculate batches, continue processing\r\n  -   Fix failed nodes as they 'appear', removing them from the disabled list as they are supposedly fixed\r\n\r\n\r\nWith tolerant toposort:\r\n- Processing of all independant ( of disabled ) nodes can be attempted\r\n- As disabled nodes are encountered they can be added to the disabled set, and a revised batch set created\r\n- Processing can then continue until all possible nodes have been attempted\r\n- The maximum set of disabled nodes is returned\r\n### <a id=\"typical-usage-foo\"></a>Typical Usage Foo\r\n### <a id=\"typical-usage-too\"></a>Typical Usage Too\r\n```python\r\nfrom tolerant.toposort import toposort,CircularDependencyError\r\n\r\nclass ProcessException(Exception):\r\n    def __init__(self,node):\r\n        super(ProcessException, self).__init__('')\r\n        self.node = node\r\n\r\ndef get_graph():\r\n    \"\"\" build and return your graph \"\"\"\r\n    return {2: {2,11},\r\n            9: {11, 8, 10},\r\n           10: {3},\r\n           11: {7, 5},\r\n            8: {7, 3},\r\n           12: {10},\r\n           13: {12},\r\n           14: {2}\r\n           }\r\n\r\ndef process(node):\r\n    \"\"\"\r\n    perform a once-only process on a node.\r\n    return the success of the proceess\r\n    \"\"\"\r\n    print(f\"processing {node}\")\r\n    return node != 12;\r\n\r\ndef main():\r\n    disabled = {9}            # add any known disabled items at start-up\r\n    already_processed = set() # persist this between runs!!\r\n    graph = get_graph()\r\n    while(True):\r\n        print(f\"calling toposort\")\r\n        batches = toposort(graph,disabled)\r\n        if not batches:\r\n            print(f\"batches is empty\")\r\n            break \r\n        processedAny = False\r\n        try:\r\n            for batch in batches:\r\n                for node in batch:\r\n                    if node in already_processed:\r\n                       print(f\"already processed {node}\")\r\n                       continue\r\n                    if process(node):\r\n                        already_processed.add(node)\r\n                        print(f\"processed {node}\")\r\n                        processedAny= True\r\n                    else:\r\n                        raise ProcessException(node)\r\n            # our work is done ( bar enabling any disabled)\r\n            if not processedAny:\r\n                print(f\"no processing so finished\")\r\n                break\r\n        except ProcessException as pe:\r\n            # pe.node can now be concurrently 'enabled'\r\n            print(f\"disabled {pe.node}\")\r\n            disabled.add(pe.node)\r\n    if not disabled:\r\n        # we are done\r\n        pass\r\nmain()\r\n```\r\n\r\n# <a id=\"api\"></a>API\r\n  \r\n## Module `tolerant.toposort`\r\n\r\nGenerates successive batches of dependant items which are enabled and do not depend\r\n    on disabled items\r\n\r\nBased on [toposort](https://pypi.org/project/toposort)\r\nwith these changes:\r\n-   **toposort** and **toposort_flatten** take an optional set of disabled items.\r\n    These disabled items, and their dependents, will not be included\r\n    in the returned batch(es) \r\n\r\n### Functions\r\n\r\n\r\n#### Function `toposort`\r\n\r\n\r\n\r\n```python\r\ndef toposort(\r\n    data,\r\n    disabled=set()\r\n  )\r\n```\r\n\r\nDependencies are expressed as a dictionary whose keys are items\r\nand whose values are a set of dependent items.  \r\nReturns a list of sets in topological order. The first set consists of items with no\r\ndependences, each subsequent set consists of items that depend upon\r\nitems in the preceeding sets.\r\n\r\n###### Args\r\n- **data** - the dependency graph\r\ndependencies are expressed as a dictionary whose keys are items\r\nand whose values are a set of dependent items. \r\n\r\n- **disabled**(optional) - Set of items which, with their dependents, should not be\r\n  included in the output\r\n\r\n###### Returns\r\n- a list of sets in topological order which are not disabled, or depend on\r\na disabled item.  \r\nThe first set consists of items with no dependences, each subsequent set \r\nconsists of items that depend upon items in the preceeding sets.\r\n\r\n#### Function `toposort_flatten`\r\n\r\n\r\n\r\n```python\r\ndef toposort_flatten(\r\n    data,\r\n    sort=True,\r\n    disabled=set()\r\n  )\r\n```\r\n\r\nReturns a single list of dependencies. For any set returned by\r\ntoposort(), those items are sorted and appended to the result (just to\r\nmake the results deterministic).\r\n###### Args\r\n- **data** - the dependency graph\r\n  dependencies are expressed as a dictionary whose keys are items\r\n  and whose values are a set of dependent items. \r\n- **sort**(True) - should each batch be sorted\r\n       \r\n- **disabled**(optional) - Set of items which, with their dependents, should not be\r\n  included in the output\r\n\r\n### Classes\r\n\r\n\r\n#### Class `CircularDependencyError`\r\n\r\n\r\n\r\n```python\r\nclass CircularDependencyError(\r\n    data\r\n)\r\n```\r\n\r\nAn item _eventually_ depends on itself\r\n\r\n**NOTE** : we tolerate items _directly_ depending on themeselves\r\n\r\n#### Args\r\n- **data** : the list containing  the circular dependency\r\n\r\n# <a id=\"testing\"></a>Testing\r\n```bash\r\n nose2\r\n python3 setup.py test\r\n```\r\n# <a id=\"install\"></a>Install\r\n```bash\r\n sudo python3 setup.py install\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "toposort,graph,tolerant",
    "license": "Apache License Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tolerant-toposort",
    "package_url": "https://pypi.org/project/tolerant-toposort/",
    "platform": null,
    "project_url": "https://pypi.org/project/tolerant-toposort/",
    "project_urls": {
      "Issues": "https://github.com/DavidTurland/tolerant-toposort/issues",
      "Original": "https://pypi.org/project/toposort",
      "Source": "https://github.com/DavidTurland/tolerant-toposort"
    },
    "release_url": "https://pypi.org/project/tolerant-toposort/1.9.1rc5/",
    "requires_dist": [
      "pytest (<5.0.0) ; extra == 'test'",
      "pytest-cov[all] ; extra == 'test'",
      "Flask (<3,>=2) ; extra == 'test'"
    ],
    "requires_python": ">=3",
    "summary": "Implements a topological sort algorithm with ability to tolerate existing but disabled nodes",
    "version": "1.9.1rc5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16891063,
  "releases": {
    "1.9.1rc4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86feed557c353159e64d2eecc8b8342013ce7c995d38bad100201aff89a66f54",
          "md5": "de8a4dfd9f55d6dfc73bb5cd4469ca96",
          "sha256": "1704a89dd99c56129ef43827e6c89677e024e5920269bdfbe743b85030cf3cb9"
        },
        "downloads": -1,
        "filename": "tolerant_toposort-1.9.1rc4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de8a4dfd9f55d6dfc73bb5cd4469ca96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 10454,
        "upload_time": "2023-02-16T16:39:04",
        "upload_time_iso_8601": "2023-02-16T16:39:04.065983Z",
        "url": "https://files.pythonhosted.org/packages/86/fe/ed557c353159e64d2eecc8b8342013ce7c995d38bad100201aff89a66f54/tolerant_toposort-1.9.1rc4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b1b7ddc7e0223ae7115a8a79312655ca1c39df0d984f7a053fc6b3a27aa8bf4",
          "md5": "1fbbaff452c30745da48e20ca93af136",
          "sha256": "62731a9f45dcca77d534af376f059364c60e5ad5dffa4c658fe21b3e1b305f26"
        },
        "downloads": -1,
        "filename": "tolerant_toposort-1.9.1rc4.tar.gz",
        "has_sig": false,
        "md5_digest": "1fbbaff452c30745da48e20ca93af136",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 146133,
        "upload_time": "2023-02-16T16:39:06",
        "upload_time_iso_8601": "2023-02-16T16:39:06.006275Z",
        "url": "https://files.pythonhosted.org/packages/0b/1b/7ddc7e0223ae7115a8a79312655ca1c39df0d984f7a053fc6b3a27aa8bf4/tolerant_toposort-1.9.1rc4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9.1rc5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "030a63d94559c188b62d34ca6497c3a5ffeed9010e46fab09912110c15ca1820",
          "md5": "5cb8dbeb3ff8ac2c0b92a04ab8111a42",
          "sha256": "e74de2cb2b0aa3d7835335166815c18fab4cdaaaff0d475924d59b667e76385c"
        },
        "downloads": -1,
        "filename": "tolerant_toposort-1.9.1rc5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cb8dbeb3ff8ac2c0b92a04ab8111a42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 10527,
        "upload_time": "2023-02-16T17:10:35",
        "upload_time_iso_8601": "2023-02-16T17:10:35.382223Z",
        "url": "https://files.pythonhosted.org/packages/03/0a/63d94559c188b62d34ca6497c3a5ffeed9010e46fab09912110c15ca1820/tolerant_toposort-1.9.1rc5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e873c3bf4a9a029247ff5e0ca25b4b9fd8ed75fe6c50529a70586f163f14f87",
          "md5": "f9e878f1797b9389e7ca5c1662e7d08b",
          "sha256": "335a0a89c3a8c3f0955da11d31459963e0d95639074142cfb80f079e8eef8553"
        },
        "downloads": -1,
        "filename": "tolerant_toposort-1.9.1rc5.tar.gz",
        "has_sig": false,
        "md5_digest": "f9e878f1797b9389e7ca5c1662e7d08b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 146369,
        "upload_time": "2023-02-16T17:10:36",
        "upload_time_iso_8601": "2023-02-16T17:10:36.992733Z",
        "url": "https://files.pythonhosted.org/packages/2e/87/3c3bf4a9a029247ff5e0ca25b4b9fd8ed75fe6c50529a70586f163f14f87/tolerant_toposort-1.9.1rc5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "030a63d94559c188b62d34ca6497c3a5ffeed9010e46fab09912110c15ca1820",
        "md5": "5cb8dbeb3ff8ac2c0b92a04ab8111a42",
        "sha256": "e74de2cb2b0aa3d7835335166815c18fab4cdaaaff0d475924d59b667e76385c"
      },
      "downloads": -1,
      "filename": "tolerant_toposort-1.9.1rc5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5cb8dbeb3ff8ac2c0b92a04ab8111a42",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 10527,
      "upload_time": "2023-02-16T17:10:35",
      "upload_time_iso_8601": "2023-02-16T17:10:35.382223Z",
      "url": "https://files.pythonhosted.org/packages/03/0a/63d94559c188b62d34ca6497c3a5ffeed9010e46fab09912110c15ca1820/tolerant_toposort-1.9.1rc5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e873c3bf4a9a029247ff5e0ca25b4b9fd8ed75fe6c50529a70586f163f14f87",
        "md5": "f9e878f1797b9389e7ca5c1662e7d08b",
        "sha256": "335a0a89c3a8c3f0955da11d31459963e0d95639074142cfb80f079e8eef8553"
      },
      "downloads": -1,
      "filename": "tolerant_toposort-1.9.1rc5.tar.gz",
      "has_sig": false,
      "md5_digest": "f9e878f1797b9389e7ca5c1662e7d08b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 146369,
      "upload_time": "2023-02-16T17:10:36",
      "upload_time_iso_8601": "2023-02-16T17:10:36.992733Z",
      "url": "https://files.pythonhosted.org/packages/2e/87/3c3bf4a9a029247ff5e0ca25b4b9fd8ed75fe6c50529a70586f163f14f87/tolerant_toposort-1.9.1rc5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}