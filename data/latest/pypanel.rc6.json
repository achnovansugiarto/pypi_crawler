{
  "info": {
    "author": "BlueRed",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyPanel\r\n\r\nPyPanel is a module used to create beautiful tools\r\n\r\n### Stats\r\n\r\n- Pypi Link: [pypi.org/project/PyPanel](https://pypi.org/project/PyPanel)\r\n- Stats Link: [pepy.tech/project/pypanel](https://pepy.tech/project/PyPanel)\r\n\r\n[![Downloads](https://static.pepy.tech/personalized-badge/pypanel?period=total&units=international_system&left_color=red&right_color=red&left_text=Downloads)](https://pepy.tech/project/pypanel) [![Downloads](https://static.pepy.tech/personalized-badge/pypanel?period=month&units=international_system&left_color=red&right_color=red&left_text=Downloads%20per%20month)](https://pepy.tech/project/pypanel) [![Downloads](https://static.pepy.tech/personalized-badge/pypanel?period=week&units=international_system&left_color=red&right_color=red&left_text=Downloads%20per%20week)](https://pepy.tech/project/pypanel)\r\n\r\n## Setup your program\r\n\r\nTo setup your program, you have to create a `Program` object and set an attribute to the `prog` var in the module\r\n\r\n```python\r\nProgram(name, version, authors, description, license, **options)\r\n```\r\n\r\n```python\r\n# (!) This is just a example\r\n\r\nimport PyPanel\r\nfrom PyPanel import *\r\n\r\nprog = Program(\r\n    'Socket Tools', # the name\r\n    '1.0', # the version\r\n    ('BlueRed',), # the authors\r\n    'A simple socket toolkit for many http protocols', # the description\r\n    'MIT' # the license\r\n)\r\n\r\n# set the program in the module\r\nsetattr(PyPanel, 'prog', prog)\r\n```\r\n\r\n`Program` class functions:\r\n\r\n- `.update(panel)`: Change the title of the console if the title is actived\r\n\r\n## Set a title format\r\n\r\nBy default, the title change automatically to `:name: :version:` (ex: `Socket Tools 1.0`), but you can change it or disable it\r\n\r\n```python\r\n# (!) This is just a example\r\n\r\nfrom PyPanel import *\r\n\r\n# change title format\r\nsetTitleFormat(r':name: version :version: / made by :authors:') # the title will be \r\n\r\n# disable title\r\ndisable_title()\r\n\r\n# enable title\r\nenable_title()\r\n```\r\n\r\nThe title format has many arguments:\r\n\r\n- `:name:`: the name of the program\r\n- `:version:`: the version of the program\r\n- `:authors:`: the author(s) of the program\r\n- `:description:`: the description of the program\r\n- `:license:`: the license of the program\r\n- `:panel:`: the current panel\r\n- `:cmd:`: the current cmd (if not command, set to `''`)\r\n\r\nif you have added options in your Program class, you can add this value to your title with `:`, your option and `:` (ex: `:option:`), the title will take the string value of the object\r\n\r\n## The Context class\r\n\r\nThe Context class is used to pass informations to the commands as a class and not as multiple arguments\r\n\r\n```python\r\nContext(panel, func)\r\n```\r\n\r\nwhen the Context arg is passed, it has for arguments:\r\n\r\n- `ctx.panel`: the current panel that is used\r\n- `ctx.function`: the command that is currently called\r\n\r\n## Set events\r\n\r\nThere are many events like:\r\n\r\n- `on_start_command`: when a command is executed\r\n- `on_log`: when the module log something\r\n- `on_error`: when a command raise an error\r\n\r\n```python\r\n# (!) This is just a example\r\n\r\nfrom PyPanel import *\r\n\r\n# create a function that will be called when a command is used\r\n@event('on_start_command')\r\ndef on_start_command(command: Command, ctx: Context) -> None:\r\n    print(f'You called {command.name!r} from the panel {ctx.panel}!')\r\n\r\n# create a function that will be called when a command raise an error\r\n@event('on_error')\r\ndef on_error(ctx: Context, exception) -> None:\r\n\r\n    # show an Windows Msgbox error           - if the user is not on windows the function will be equivalent of show_error(*args, **w): pass\r\n    #                  ----------- the title -----------   -------------- the content --------------\r\n    Windows.show_error(f'Error in command {ctx.function}', str(error) + f'\\ncause: {error.__cause__}')\r\n    input(f'An error has occurred in the command {ctx.function}: {exception}')\r\n```\r\n\r\n## Create commands\r\n\r\nTo create commands, first: create just a normal function witch contain an argument for the Context when it be called at the first place, and use the decorator `@Command`\r\n\r\n```python\r\n# (!) This is just a example\r\n\r\nfrom PyPanel import *\r\nimport requests as http\r\n\r\n# create the POST request command\r\n@Command\r\ndef http_post(ctx: Context) -> None:\r\n    url = input('url: ')\r\n    response = http.post(url)\r\n    print(f'The response code is {response.status_code}')\r\n\r\n# create the GET request command\r\n@Command\r\ndef http_get(ctx: Context) -> None:\r\n    url = input('url: ')\r\n    response = http.get(url)\r\n    print(f'The response code is {response.status_code}')\r\n\r\n# create the PUT request command\r\n@Command\r\ndef http_put(ctx: Context) -> None:\r\n    url = input('url: ')\r\n    response = http.put(url)\r\n    print(f'The response code is {response.status_code}')\r\n```\r\n\r\n## Create a panel\r\n\r\nTo create a panel, you have to use the Panel class with the name of the panel, it instructions (commands) and other arguments\r\n\r\n```python\r\nPanel(name, colors, instructions, banner, banner_second_chars, **options)\r\n```\r\n\r\n```python\r\n# (!) This is just a example\r\n\r\nfrom PyPanel import *\r\n\r\nbanner = r'''\r\n                            __                  __     ________                   __ \r\n                           |  \\                |  \\   |        \\                 |  \\\r\n  _______  ______   _______| ▓▓   __  ______  _| ▓▓_   \\▓▓▓▓▓▓▓▓ ______   ______ | ▓▓\r\n /       \\/      \\ /       \\ ▓▓  /  \\/      \\|   ▓▓ \\    | ▓▓   /      \\ /      \\| ▓▓\r\n|  ▓▓▓▓▓▓▓  ▓▓▓▓▓▓\\  ▓▓▓▓▓▓▓ ▓▓_/  ▓▓  ▓▓▓▓▓▓\\\\▓▓▓▓▓▓    | ▓▓  |  ▓▓▓▓▓▓\\  ▓▓▓▓▓▓\\ ▓▓\r\n \\▓▓    \\| ▓▓  | ▓▓ ▓▓     | ▓▓   ▓▓| ▓▓    ▓▓ | ▓▓ __   | ▓▓  | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓\r\n _\\▓▓▓▓▓▓\\ ▓▓__/ ▓▓ ▓▓_____| ▓▓▓▓▓▓\\| ▓▓▓▓▓▓▓▓ | ▓▓|  \\  | ▓▓  | ▓▓__/ ▓▓ ▓▓__/ ▓▓ ▓▓\r\n|       ▓▓\\▓▓    ▓▓\\▓▓     \\ ▓▓  \\▓▓\\\\▓▓     \\  \\▓▓  ▓▓  | ▓▓   \\▓▓    ▓▓\\▓▓    ▓▓ ▓▓\r\n \\▓▓▓▓▓▓▓  \\▓▓▓▓▓▓  \\▓▓▓▓▓▓▓\\▓▓   \\▓▓ \\▓▓▓▓▓▓▓   \\▓▓▓▓    \\▓▓    \\▓▓▓▓▓▓  \\▓▓▓▓▓▓ \\▓▓\r\n'''[1:-1]\r\n\r\nmain = Panel('Main', (Colors.rainbow), [\r\n    ('POST request', http_post),\r\n    ('GET request', http_get),\r\n    ('PUT request', http_put)\r\n], banner)\r\n```\r\n\r\n`Panel` class functions:\r\n\r\n- `.render()`: Render the final panel string display\r\n- `.listen(*args)`: Listen to the user input and execute the command\r\n\r\n## Add text on your panel\r\n\r\nTo add text on your panel, you have to call the function `Panel.MakeOutText`.\r\n\r\n```python\r\nPanel.MakeOutText(top, middle, bottom, left, right, bottom_left, bottom_right)\r\n```\r\n\r\n```\r\n                                     top\r\n\r\n                BBBB      AA     NNNN  NN NNNN  NN EEEEEEEE RRRRRR\r\n                B   B    AAAA    NNNNN NN NNNNN NN EE       RR  RRR\r\n        left    BBBB    AA  AA   NN  NNNN NN  NNNN EEEEEE   RRRRRRR     right\r\n                B   B  AAAAAAAA  NN   NNN NN   NNN EE       RR   RR\r\n                BBBB  AA      AA NN    NN NN    NN EEEEEEEE RR    RR\r\n\r\n                                    middle\r\n\r\n                    o--------------------------------------o\r\n                    |    1. choice           5. choice     |\r\n        bottom_left |    2. choice           6. choice     | bottom_right\r\n                    |    3. choice           7. choice     |\r\n                    |    4. choice           8. choice     |\r\n                    o--------------------------------------o\r\n\r\n                                    bottom\r\n```\r\n\r\n```python\r\n# (!) This is just a example\r\n\r\nfrom PyPanel import *\r\n\r\nborder = '\\n'.join((' ' * 2) + line + (' ' * 2) for line in [\r\n    'Support: github.com/CSM-BlueRed',\r\n    'Made with PyPanel',\r\n])\r\n\r\nmain.MakeOutText(\r\n    middle = f'{prog.name} by {\", \".join(prog.authors)}!\\nMake sure to install PyPanel!',\r\n    bottom = 'discord.gg/plague',\r\n    bottom_left = border,\r\n    bottom_right = border\r\n)\r\n```\r\n\r\n## Start your program\r\n\r\nTo start your program, select your main panel, and use the `listen` function\r\n\r\n```python\r\n# (!) This is just a example\r\n\r\nmain.listen()\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CSM-BlueRed/PyPanel",
    "keywords": "python,panel,tool,terminal,tui",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyPanel",
    "package_url": "https://pypi.org/project/PyPanel/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyPanel/",
    "project_urls": {
      "Homepage": "https://github.com/CSM-BlueRed/PyPanel"
    },
    "release_url": "https://pypi.org/project/PyPanel/1.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "PyPanel is a module used to create beautiful tools",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14517373,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e779d9011455ee508a9a906ddb484c0725c5ac64b0c423223b471546d3dedf0",
          "md5": "6332854eda72ad59132ebfaba252bba2",
          "sha256": "dee11f77d55d6e3ec27badd0749e20fca5f976c46218f8f8a003207c783501b8"
        },
        "downloads": -1,
        "filename": "PyPanel-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6332854eda72ad59132ebfaba252bba2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5454,
        "upload_time": "2022-06-30T12:26:36",
        "upload_time_iso_8601": "2022-06-30T12:26:36.971849Z",
        "url": "https://files.pythonhosted.org/packages/8e/77/9d9011455ee508a9a906ddb484c0725c5ac64b0c423223b471546d3dedf0/PyPanel-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00e10e9510dd46abdfc07db3639eb9984646f4e3dc65ac8163e875b82a8e9bf1",
          "md5": "f2d94b8dff700e9b73f359ffcc86a5d0",
          "sha256": "76516ba0df5970cffa1c95b52f44acc03b673b7bac309e2dd8981d0aba7c0641"
        },
        "downloads": -1,
        "filename": "PyPanel-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f2d94b8dff700e9b73f359ffcc86a5d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5849,
        "upload_time": "2022-07-01T13:18:37",
        "upload_time_iso_8601": "2022-07-01T13:18:37.548834Z",
        "url": "https://files.pythonhosted.org/packages/00/e1/0e9510dd46abdfc07db3639eb9984646f4e3dc65ac8163e875b82a8e9bf1/PyPanel-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e05cdd19dbcefd98e9a658d2c668540c068682927389d704de0b6b44311d84db",
          "md5": "9656dd4de387fe20efbf35881cd15e43",
          "sha256": "dd42b63a113d86749f664038461d369018892abe08a155146468a2758f5bb33c"
        },
        "downloads": -1,
        "filename": "PyPanel-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9656dd4de387fe20efbf35881cd15e43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6623,
        "upload_time": "2022-07-04T14:59:32",
        "upload_time_iso_8601": "2022-07-04T14:59:32.053137Z",
        "url": "https://files.pythonhosted.org/packages/e0/5c/dd19dbcefd98e9a658d2c668540c068682927389d704de0b6b44311d84db/PyPanel-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbd8a1dea043b265c160f0b6afafe3800ece3f68d6147b23a52b90df38c2f4cf",
          "md5": "952971fe2d13deef585d7408d83f8b34",
          "sha256": "bfccf03757c9aa6ea166c34ec7a7a35b8fbb4bc55ac2084f6738a34d201b427a"
        },
        "downloads": -1,
        "filename": "PyPanel-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "952971fe2d13deef585d7408d83f8b34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7184,
        "upload_time": "2022-07-08T23:17:20",
        "upload_time_iso_8601": "2022-07-08T23:17:20.778753Z",
        "url": "https://files.pythonhosted.org/packages/fb/d8/a1dea043b265c160f0b6afafe3800ece3f68d6147b23a52b90df38c2f4cf/PyPanel-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62975d1f3e61f1b7a4cf5be07531426e0b415ddf9690f23f04d448919cbd25ca",
          "md5": "4afeb8cc7c99307238ab6f805da11971",
          "sha256": "b18f00bfb721b892933528bc6c1cd37720c6e1065aefd3f89ac834770ae05160"
        },
        "downloads": -1,
        "filename": "PyPanel-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4afeb8cc7c99307238ab6f805da11971",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12542,
        "upload_time": "2022-07-11T11:34:42",
        "upload_time_iso_8601": "2022-07-11T11:34:42.853839Z",
        "url": "https://files.pythonhosted.org/packages/62/97/5d1f3e61f1b7a4cf5be07531426e0b415ddf9690f23f04d448919cbd25ca/PyPanel-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e264fff13ec54ff5217b872d5c1ef3348c604597355a508b1f5dde1e3076dea",
          "md5": "90980102da6877489e98ffd58435a8ff",
          "sha256": "c02253c6de2ad7667941f556c829b2f6f31898f08adad06d7dd1e44bed179231"
        },
        "downloads": -1,
        "filename": "PyPanel-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "90980102da6877489e98ffd58435a8ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11305,
        "upload_time": "2022-07-22T14:56:08",
        "upload_time_iso_8601": "2022-07-22T14:56:08.286586Z",
        "url": "https://files.pythonhosted.org/packages/2e/26/4fff13ec54ff5217b872d5c1ef3348c604597355a508b1f5dde1e3076dea/PyPanel-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e264fff13ec54ff5217b872d5c1ef3348c604597355a508b1f5dde1e3076dea",
        "md5": "90980102da6877489e98ffd58435a8ff",
        "sha256": "c02253c6de2ad7667941f556c829b2f6f31898f08adad06d7dd1e44bed179231"
      },
      "downloads": -1,
      "filename": "PyPanel-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "90980102da6877489e98ffd58435a8ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11305,
      "upload_time": "2022-07-22T14:56:08",
      "upload_time_iso_8601": "2022-07-22T14:56:08.286586Z",
      "url": "https://files.pythonhosted.org/packages/2e/26/4fff13ec54ff5217b872d5c1ef3348c604597355a508b1f5dde1e3076dea/PyPanel-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}