{
  "info": {
    "author": "Oliver Drechsel, Stephan Fuchs, Martin Hölzer, René Kmiecinski",
    "author_email": "r.w.kmiecinski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# nCoV_minipipe aka CovPipe\n\n[![pipeline status](https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/badges/master/pipeline.svg)](https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/-/commits/master)\n[![Snakemake](https://img.shields.io/badge/snakemake-≥5.26.0-brightgreen.svg?style=flat)](https://snakemake.readthedocs.io)\n[![Snakemake](https://img.shields.io/badge/conda-≥4.9.0-brightgreen.svg?style=flat)](https://snakemake.readthedocs.io)\n\n[![Generic badge](https://img.shields.io/badge/Referenced-Preprints-red.svg)](https://www.preprints.org/manuscript/202005.0376/v1)\n[![Generic badge](https://img.shields.io/badge/Wiki-available-purple.svg)](https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/-/wikis/home)\n[![Generic badge](https://img.shields.io/badge/Contribute-guide-brightblue.svg)](https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/-/blob/edit_readme/CONTRIBUTING.md)\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/rki_de.svg?style=social)](https://twitter.com/rki_de)\n\n\n[[_TOC_]]\n\n## 1. Introduction\n\nCovPipe provides a fully automated, flexible and reproducible workflow for reconstructing genome sequences from NGS data based on a given reference sequence (see section 5 for more details). The pipeline is optimized for SARS-CoV-2 data, but can theoretically also be used for other viruses.\n\n## 2. Setup \n\nWe recommend using the _2.1 Quick setup_, but also provide information for a quick and detailed manual installation below (see _2.2 Quick manual setup_ and _2.3 Manual setup_).\n\n### 2.1 Quick setup (recommended)\n\nInstallation methods that do not require source files.\n\n#### 2.1.1 Simple pip install into conda environment\n\n```bash\nconda install -c bioconda python -mn covpipe_env\nconda activate covpipe_env\npip install covpipe   \n```\n\n#### 2.1.2 From environment file  \n[![envfile](https://img.shields.io/badge/Download-covpipe_env.yml-gold.svg?style=flat)](https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/-/raw/master/covpipe_env.yaml?inline=false)\n\n```bash \nconda env create --file covpipe_env.yml\n```\n\n### 2.2 Quick manual setup\n\nThe most convenient way to install the pipeline is by using git and [conda](https://docs.conda.io/en/latest/miniconda.html):\n\n```bash\n# installing the pipeline using git\ncd designated/path\ngit clone https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe.git\ncd ncov_minipipe\n```\nThere are currently two ways of installing the pipeline quickly and in a manual way:\n\n#### 2.2.1 (Option 1) Manually installing with conda and pip (recommended) \n\n```bash\nconda install -c bioconda python -mn covpipe_env # You can also use skip the creation and \n. activate covpipe_env                           # only activate a existing environment here. \npython -m pip install .                          # Running this line alone installs it in the current environment or globally\nncov_minipipe --help\n```\n\n#### 2.2.2 (Option 2) Running the setup script\n\n```bash \n# installing software dependencies using conda\nncov_minipipe/ncov_minipipe.conda.setup/setup_env.sh\n. activate covpipe_environment/\nncov_minipipe --help\n```\n\n### 2.3 Manual setup\n\nDownload the pipeline from https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/-/releases\nand extract the content of the downloaded archive to the designated path.\n\nMake sure that the following dependencies are available on your system and added to the system's `PATH` variable before running the pipeline:\n\n| Dependencies | version |\n| ------------ | ------- |\n| [python](https://www.python.org/downloads/) | 3.6.0+ |\n| [snakemake](https://snakemake.readthedocs.io/en/stable/getting_started/installation.html) | 5.26+ |\n| [strictyaml](https://pypi.org/project/strictyaml/) | 1.0.6 |\n| [biopython](https://biopython.org/) | 1.7.8 |\n| [pandas](https://pypi.org/project/pandas/) | 1.1.4 |\n| [singularity](https://singularity.lbl.gov/) | 3.6.0 |\n\n### 2.4 Test\n\nThe pipeline setup can quickly be tested using:\n\n```bash\ndesignated/path/ncov_minipipe/tests/quicktest.sh\n```\n\n### 2.5 Docker\n\n#### 2.5.1 Docker pull\n\nIf you have [Docker](https://www.docker.com/get-started) installed, we also provide a pre-compiled image of the full pipeline. No other tools are needed:\n\n```\ndocker pull rkibioinf/covpipe:latest\ndocker run --rm rkibioinf/covpipe:latest ncov_minipipe --help\n```\n\nYou can also [check](https://hub.docker.com/repository/docker/rkibioinf/covpipe/tags) and pull a specific release (replace `:latest` with `:v3.0.1`). \n\n__Attention:__ Image size ~4.4 GB.\n\n#### 2.5.2 Docker build\n\nYou can also create your own local image of the pipeline by cloning this repository and run `docker build` instead of pulling a pre-compiled image from Dockerhub:\n\n```bash\ncd folder/you/want/to/save/the/code/in\ngit clone https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe.git && cd ncov_minipipe\n# open the Dockerfile with an text editor and adjust the version you want to build the image for\n# per default the latest release is used\ndocker build -t covpipe .\n```\n\nAgain, the image is large and the generation will need some time based on your system but will include all tools and scripts to run the pipeline. \n\n#### 2.5.3 Docker run\n\nTo acutally use your data files with the Docker container, you have to mount them. For example, let's assume that you have all your FASTQ files in `/home/user/data`. Then you can run: \n\n```\ndocker run --rm -v /home/user/data:/input rkibioinf/covpipe:latest ncov_minipipe --input /input/ -o /input/results --cpus 4\n```\n\nIt is possible to mount different folders using multiple `-v` parameters.\n\nIf you want to use the [provided Kraken database](https://zenodo.org/record/4534746), download it like described below and mount the unpacked database (absolute path!) into the container as well: \n\n```\ndocker run --rm -v /home/user/data:/input -v /path/to/GRCh38.p13_SC2_2021-02-08:/kraken rkibioinf/covpipe:latest ncov_minipipe --input /input/ -o /input/results -k /kraken --taxid 2697049 --cpus 4\n```\n\n__Please note__, that by using a single Docker image to run the Snakemake pipeline you can not take advantage of full parallelization (e.g. on a HPC) because all steps of the pipeline will run in a single container instance. \n\n# 3. Usage\n\nAs a minimum the pipeline needs the following input:\n- FASTA file containing one reference sequence (`--reference`)\n- folder containing gz-compressed FASTQ files (`--input`)\n- output folder (`-o`), in which a subfolder named results is automatically created to store all results\n\n```bash\n# activate conda environment once before using the pipeline (only applicable if software dependencies were installed according to section 2.1)\nconda activate path/to/covPipe/covpipe_environment/ \n\n# thoughtless run (no primer and adapater-clipping and no taxonomic read filtering)\nncov_minipipe --reference path/to/myReference.fasta \\\n              --input path/to/myInputFolder \\\n              -o path/to/myOutputFolder\n```\n\nTo keep the intermediate files, just add the snakemake parameter `--nt` (or `--notemp`).\n\n# 4. Options to customize the workflow\n\nThe manual page provides information on all options available.\n\n```bash\nncov_minipipe --help\n```\n\n## 4.1 Activating adapter clipping\n\nAdapter sequences should be clipped to prevent mis-alignments to the reference sequence. For this purpose you must provide a FASTA file\ncontaining the adapter sequences (`--adapter`).\nIf you specify a name like \"Nextera\" for the parameter option instead of a file, a matching file from the pipeline internals is used, if possible.  \n\nIt defaults to NexteraTransposase Adpaters by Illumina  (**Oligonucleotide sequences © 2020 Illumina, Inc. All rights reserved**)\n\n```bash\n# clipping adapter sequences listed in myAdapterfileFile.fasta\nncov_minipipe --adapter path/to/myAdapterfileFile.fasta\n              --reference path/to/myReference.fasta \\\n              --input path/to/myInputFolder \\\n              -o path/to/myOutputFolder \n```\n\n## 4.2 Activating primer clipping\n\nIf necessary, amplicon primers can be cut off to prevent masking of the variants by them. \nFor this purpose, a `bedpe` file has to be provided (`--primer`) that contains the following information as tab-delimited fields:\n\n1. field: forward primer chromosome name\n2. field: forward primer start position\n3. field: forward primer end position\n4. field: reverse primer chromosome name\n5. field: reverse primer start position\n6. field: reverse primer end position\n7. field: auxiliary information\n\nExample:\n\n> NC_045512.2     333     350     NC_045512.2     450     470     Amplicon1\n>\n> NC_045512.2     876     899     NC_045512.2     995     1005    Amplicon2\n\n\n```bash\n# clipping primer sequences listed in myPrimerPositions.bedpe\nncov_minipipe --primer path/to/myPrimerPositions.bedpe \\\n              --reference path/to/myReference.fasta \\\n              --input path/to/myInputFolder \\\n              -o path/to/myOutputFolder\n```\n\nPlease make sure to provide reads to the pipeline that are not clipped already with other tools. \nSome variants locate close to the end of amplicons. \nIf primers are clipped off already before mapping, variants may be lost due to soft clipping at read ends.\n\n### 4.2.1 Create bedpe from amplicon bed file\n\nSometimes you do not have access to a bed file with primer positions.\nIf you only have a bedfile with amplicon start and end positions and\nthe same for the inserts, you can transform this into the desired bed file.\n\n```bash\ncreate_bedpe AMPLICON_FILE.bed INSERT_FILE.bed -o myPrimerPositions.bedpe\n```\n\n### 4.2.2 Create bedpe from primer bed file\n\nYou might have a primer bed file, like the one provided in the artic repository.\nIf the primer names have clear identifiers for forward and reverse primers youb can use the following script.\n\n```bash\nbed2bedpe nCoV-2019.primer.bed --output nCoV-2019.primer.bedpe\n```\n\nTake care: If you use artic you need to change the reference name to NC_045512.2, when using our default settings. \n\n## 4.3 Adjusting Read Filtering\n\n### 4.3.1 Read Length\n\nPer default the minimum read length filter is set to 50. \nWe chose this, because we designed the pipeline with 159 BP pared end amplicons in mind. \nWe actually encountered a bunch of primer dimers that were shorter than 50 BP\nand found them enough of a nuisance to take this step.\n(Quick aside: We use the mapping rate as a quick quality measure and that gets polluted by the dimers.) \nIf you are using shorter amplicóns in your protocol, you will most likely need\nto set this option to something lower.\n\n(--filter_read_len 25) \n\n### 4.3.2 Read Quality\n\nQualitative read quality used by fastp to filter reads.\nBy default the \"--read_filter_qual\" option uses a phredscore of 20 as a cutoff.\nPrior to version 3.0.4 it was hard coded to 15. \nIf you want to recreate your pipeline runs from prior versions, set this option\nto 15. \n\n## 4.4 Activating taxonomic Read Filtering\n\nIf necessary, reads not derived from SARS-COV-2 can be excluded. \nRead classification is based on corresponding k-mer frequencies using a defined kraken2 database (`--kraken`). \nA pre-processed database containing SARS-CoV2 and human genome sequences can be downloaded from: \n\nhttps://zenodo.org/record/4534746\n\n\nIf you are not working on SARS-CoV-2, the target taxonomy ID can be changed (option `--taxid`; default: 2697049 = SARS-CoV-2).\n\n```bash\n# including reads that can be assigned to SARS-COV-2 (taxonomy id: 2697049) using the kraken2 database in myKrakenDbFolder \nncov_minipipe --kraken path/to/myKrakenDbFolder \\\n              --taxid 2697049 \\\n              --reference path/to/myReference.fasta \\\n              --input path/to/myInputFolder \\\n              -o path/to/myOutputFolder\n```\n\n## 4.5 Adapting variant calling\n\nSites considered for variant calling can be restricted based on the following parameters at the respective position.\n\n- the minimum sequencing depth (`--var_call_cov`; default: 20) \n- the minimum number of reads supporting a variant (`--var_call_count`; default: 10)\n- the relative number of reads supporting a variant (`--var_call_frac`; default: 0.1) \n\n```bash\n# excluding sites covered by less than 20 reads or less than 5 or 10% reads supporting a variant at this site\nncov_minipipe --var_call_cov 20 \\\n              --var_call_count 5 \\\n              --var_call_frac 0.1 \\\n              --reference path/to/myReference.fasta \\\n              --input path/to/myInputFolder \\\n              -o path/to/myOutputFolder\n```\n\n\n## 4.6 Adapting variant filtering\n\nVariants can be excluded, if the mean mapping quality of observed alternate alleles does not meet a given threshold (`--var_filter_mqm`; default: 40).\nThe mapping quality measures how good reads align to the respective reference genome region. Good mapping qualities are around MQ 60. \nThe filter can be deactivated by setting it to 0.\nVariants exceeding the value will be retained.\n\nAdditionally, variants can be filtered if the strand balance probability for the alternate allele exceeds a given threshold (`--var_filter_sap`; default: -1, i.e. inactive).\nThe strand balance probability is a Phred-scaled measure of strand bias. A value near 0 indicates little or no strand bias. \nFor amplicon data sets this value can be very high due to unequal performance of neighbouring amplicons. \nSince most of the data processed with covpipe is amplicon data, the default behaviour is to *not* filter variants with high strand bias values.\nA recommended value for whole genome approaches, e.g. given bey GATK, is 60.\nValues smaller than the set value will be retained.\nFor details please refer to https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/-/wikis/home.\n\nFinally, variants can be filtered by the site quality (`--var_filter_qual`; default: 10) indicating the pobability for a polymorphism at the respective site.\nTo deactivate thsi filter, please set to 0.\nVariants exceeding this value will be retained.\n\n```bash\n# excluding variants associated to a mean mapping quality below 40, a strand balance probability of more than 60 \n# or a pobability for a polymorphism of less than 10 at the respective site\nncov_minipipe --var_filter_mqm 40 \\\n              --var_filter_sap 60 \\\n              --var_filter_qual 10 \\\n              --reference path/to/myReference.fasta \\\n              --input path/to/myInputFolder \\\n              -o path/to/myOutputFolder\n```\n\n## 4.7 Adapting consensus generation\n\nWhen generating the consensus sequence, all positions whose read coverage is below a defined threshold can be hard-masked by N (`--cns_min_cov`; default: 20). \nIn addtion, genotypes can be adjusted meaning that variants supported by a given fraction of all reads covering the respective site are called explicitely (`--cns_gt_adjust`; default: 0.9). \nThis means that a variant that shows a read fraction of 0.94 would be set to full alternate allele and variants showing only 0.03 readfraction are changed to reference.\n\n```bash\n# hard-masking sites covered by less than 10 reads and explicitely call variants\n# supported by at least 95% of all reads at the respective site\nncov_minipipe --cns_min_cov 10 \\\n              --gt_adjust 0.95 \\\n              --reference path/to/myReference.fasta \\\n              --input path/to/myInputFolder \\\n              -o path/to/myOutputFolder\n```\n\n## 4.8 Lineage assignment \n\nThe generated consensus sequences can be submitted to a preliminary lineage assignment. \nThis will run [Pangolin](ttps://github.com/cov-lineages/pangolin) on the IUPAC consensus sequence.\n\nPlease follow the setup instructions on the pangolin project site https://github.com/cov-lineages/pangolin.\n\nIf the pipeline is run using an older install of pangolin it could be that the assigned lineages are outdated. \nPlease consider a detailed lineage assignment after a first assessment by this pipeline.\n\n```bash\n# preliminary lineage assignment\nncov_minipipe --pangolin path/to/pangolin_conda_environment \\\n              --reference path/to/myReference.fasta \\\n              --input path/to/myInputFolder \\\n              -o path/to/myOutputFolder\n\n```\n\n### 4.8.1 Easy update or install of pangolin database\n\nYou can easily install and or update pangolin, \nif you have installed covpipe you should have access to the `update_pangolin` script. \n\n```bash\nusage: update_pangolin [-h] [-p PREFIX] [--use-conda-default] [-n NAME] [--pre-release]\n```\nYou can specify a prefix path, just the name or do not provide any options at all.\nIn the latter case, covpipe stores the pangolin environment in the pip install internals.\n\nAn important option is `--pre-release`. \nIf used, it will trigger an automatic version of the \"manual update method\" for pangolin.\nThis means that the very latest version will be installed straight from pangolins master branch.  \n\n```bash\n(covpipe_env)-$ update_pangolin # installs it into the internal data path of the covpipe install  \n```\n\nThis will take some time because of a conda environment update, that step might take up to 10 minutes.\nFuture mamba support (an alternative to conda) is planned for the script.  \n\n\n# 5 Workflow\n\n![workflow](docs/workflow.png \"workflow\")\n\nThe illustration shows a slightly simplified workflow that can be divided into the following sections: \n\n\n## 5.1 Pre-processing\n\nTo ensure the quality of sequence data used for reconstruction, the workflow provides: \n\nsteps: \n- 5' clipping of amplification primer sequences (optional)\n- 3' removal of\n  - Illumina adapter sequences (optional)\n  - low complexity stretches\n  - low quality stretches\n- excluding of non-SARS-CoV-2 reads (optional)\n  - to our experience this step improves analyses quality a lot and hence we recommend it\n\nused tools:\n- bamclipper\n- fastp\n- kraken2 \n\n## 5.2 Mapping\n\nPre-processed reads are aligned to the reference sequence using bwa-mem (default parameters).\n\n## 5.3 Variant calling, filtering, genotype adjustment and annotation\n\nVariants are called using freebayes allowing the following customizations:\n  - minimal total coverage (`--var_call_cov`; default: 20) \n  - absolute number of variant supporting reads (`--var_call_count`; default: 10)\n  - relative number of variant supporting reads (`--var_call_frac`; default: 0.1) \n\nThe called variants can be further filtered using bcftools. For this custom thresholds can be applied to  \n  - mean mapping quality of observed alternate alleles (MQM, `--var_filter_mqm`; default: 40)\n  - strand balance probability for the alternate allele (SAP, `--var_filter_sap`; default: 60)\n  - polymorphism probability (QUAL, `--var_filter_qual`; default: 10)\n\nAs an unique feature, the worklow allows to adjust the genotype of certain sites by explicitely calling variants supported by a given fraction of reads covering the respective site.\n\nBy default, all variants are inspected regarding their impact on coding sequences using SNPeff. \nThis only works, if  your reference genome is listed in the SNPeff supported genomes (see Appendix below). Otherwise please deactivate this feature (`--no-var-annotation`).\n\n## 5.4 Consensus generation\n\nUsing bcftools the consensus is created allowing to mask lowly covered regions by N (user-defined threshold).\nThe default consensus (suffix iupac) follows iupac nomenclature at sites mixed variants have been detected \n(and were not adjusted by genotype as described before).\nIn addition, a second consensus is created for each dataset (suffix masked) where these ambiguous sites are\nmasked by N (additionally to the lowly covered regions).\n\n## 5.5 Lineage assignment\n\nPangolin is used to establish a preliminary lineage assignment (`--pangolin`).\n\n## 5.6 QC-report\n\nIn addition to the consensus sequences, a HTML-based report is generated summarizing different quality measures and mapping statistics for each dataset such as:\n\n- runID (optional))\n- conditional table that warns the user, if samples that were identified as negative controls show high reference genome coverage\n- table of read properties:\n  - number of bases (before / after trimming)\n    - if amplification primer clipping was done\n  - length of reads (before / after trimming)\n    - if amplification primer clipping was done\n  - number of bases mapped (Q = 30)\n- optional table listing the species filtering results emitted by Kraken2\n- table of mapping properties:\n  - reads mapped to reference genome (number & fraction of input)\n  - median / sd  of fragment size\n- genome wide plot of coverage\n- histogram of fragment sizes\n\n- table of reference coverage characteristics\n- table of lineage assigments using pangolin (optional)\n\nSamples showing at least 20X sequencing depth at more than 95% of the reference genome are designated a successful genome sequencing.\n\n\n# Troubleshoot\n\nPlease visit the [project's wiki ](https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/-/wikis/home) for further information.\n\n# Do you feel like contributing?\n\nThis [link](https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe/-/blob/edit_readme/CONTRIBUTING.md) will take you to our contribution guide\n\n# Appendix\n\n### SNPeff supported genomes\n\nListed are SARS-CoV-2 genomes supported by SNPeff.\nThanks to the Bioconda Team!\n\nAP006557.1\tSARS coronavirus TWH genomic RNA, complete genome.\n\nAP006558.1\tSARS coronavirus TWJ genomic RNA, complete genome.\n\nAP006559.1\tSARS coronavirus TWK genomic RNA, complete genome.\n\nAP006560.1\tSARS coronavirus TWS genomic RNA, complete genome.\n\nAP006561.1\tSARS coronavirus TWY genomic RNA, complete genome.\n\nAY278488.2\tSARS coronavirus BJ01, complete genome.\n\nAY278489.2\tSARS coronavirus GD01, complete genome.\n\nAY278554.2\tSARS coronavirus CUHK-W1, complete genome.\n\nAY278741.1\tSARS coronavirus Urbani, complete genome.\n\nAY279354.2\tSARS coronavirus BJ04, complete genome.\n\nAY282752.2\tSARS coronavirus CUHK-Su10, complete genome.\n\nAY291451.1\tSARS coronavirus TW1, complete genome.\n\nAY304486.1\tSARS coronavirus SZ3, complete genome.\n\nAY304488.1\tSARS coronavirus SZ16, complete genome.\n\nAY304495.1\tSARS coronavirus GZ50, complete genome.\n\nAY310120.1\tSARS coronavirus FRA, complete genome.\n\nAY313906.1\tSARS coronavirus GD69, complete genome.\n\nAY323977.2\tSARS coronavirus HSR 1, complete genome.\n\nAY338174.1\tSARS coronavirus Taiwan TC1, complete genome.\n\nAY338175.1\tSARS coronavirus Taiwan TC2, complete genome.\n\nAY340092.1\tSARS coronavirus BJ2232 RNA polymerase gene, partial cds.\n\nAY345986.1\tSARS coronavirus CUHK-AG01, complete genome.\n\nAY345987.1\tSARS coronavirus CUHK-AG02, complete genome.\n\nAY345988.1\tSARS coronavirus CUHK-AG03, complete genome.\n\nAY348314.1\tSARS coronavirus Taiwan TC3, complete genome.\n\nAY350750.1\tSARS coronavirus PUMC01, complete genome.\n\nAY357075.1\tSARS coronavirus PUMC02, complete genome.\n\nAY357076.1\tSARS coronavirus PUMC03, complete genome.\n\nAY390556.1\tSARS coronavirus GZ02, complete genome.\n\nAY394978.1\tSARS coronavirus GZ-B, complete genome.\n\nAY394979.1\tSARS coronavirus GZ-C, complete genome.\n\nAY427439.1\tSARS coronavirus AS, complete genome.\n\nAY463059.1\tSARS coronavirus ShanghaiQXC1, complete genome.\n\nAY463060.1\tSARS coronavirus ShanghaiQXC2, complete genome.\n\nAY485277.1\tSARS coronavirus Sino1-11, complete genome.\n\nAY485278.1\tSARS coronavirus Sino3-11, complete genome.\n\nAY502923.1\tSARS coronavirus TW10, complete genome.\n\nAY502924.1\tSARS coronavirus TW11, complete genome.\n\nAY502925.1\tSARS coronavirus TW2, complete genome.\n\nAY502926.1\tSARS coronavirus TW3, complete genome.\n\nAY502927.1\tSARS coronavirus TW4, complete genome.\n\nAY502928.1\tSARS coronavirus TW5, complete genome.\n\nAY502929.1\tSARS coronavirus TW6, complete genome.\n\nAY502930.1\tSARS coronavirus TW7, complete genome.\n\nAY502931.1\tSARS coronavirus TW8, complete genome.\n\nAY502932.1\tSARS coronavirus TW9, complete genome.\n\nAY508724.1\tSARS coronavirus NS-1, complete genome.\n\nAY515512.1\tSARS coronavirus HC/SZ/61/03, complete genome.\n\nAY568539.1\tSARS coronavirus GZ0401, complete genome.\n\nAY572034.1\tSARS coronavirus civet007, complete genome.\n\nAY572035.1\tSARS coronavirus civet010, complete genome.\n\nAY572038.1\tSARS coronavirus civet020, complete genome.\n\nAY595412.1\tSARS coronavirus LLJ-2004, complete genome.\n\nAY613947.1\tSARS coronavirus GZ0402, complete genome.\n\nAY654624.1\tSARS coronavirus TJF, complete genome.\n\nAY686863.1\tSARS coronavirus A022, complete genome.\n\nAY686864.1\tSARS coronavirus B039, complete genome.\n\nAY687354.1\tSARS coronavirus A001 spike glycoprotein gene, complete cds.\n\nAY687355.1\tSARS coronavirus A013 spike glycoprotein gene, complete cds.\n\nAY687356.1\tSARS coronavirus A021 spike glycoprotein gene, complete cds.\n\nAY687357.1\tSARS coronavirus A030 spike glycoprotein gene, complete cds.\n\nAY687358.1\tSARS coronavirus A031 spike glycoprotein gene, complete cds.\n\nAY687359.1\tSARS coronavirus B012 spike glycoprotein gene, complete cds.\n\nAY687360.1\tSARS coronavirus B024 spike glycoprotein gene, complete cds.\n\nAY687361.1\tSARS coronavirus B029 spike glycoprotein gene, complete cds.\n\nAY687362.1\tSARS coronavirus B033 spike glycoprotein gene, complete cds.\n\nAY687364.1\tSARS coronavirus B040 spike glycoprotein gene, complete cds.\n\nAY714217.1\tSARS Coronavirus CDC#200301157, complete genome.\n\nAY772062.1\tSARS coronavirus WH20, complete genome.\n\nAY864805.1\tSARS coronavirus BJ162, complete genome.\n\nAY864806.1\tSARS coronavirus BJ202, complete genome.\n\nDQ022305.2\tBat SARS coronavirus HKU3-1, complete genome.\n\nDQ084199.1\tbat SARS coronavirus HKU3-2, complete genome.\n\nDQ084200.1\tbat SARS coronavirus HKU3-3, complete genome.\n\nDQ182595.1\tSARS coronavirus ZJ0301 from China, complete genome.\n\nDQ640652.1\tSARS coronavirus GDH-BJH01, complete genome.\n\nDQ648856.1\tBat coronavirus (BtCoV/273/2005), complete genome.\n\nDQ648857.1\tBat coronavirus (BtCoV/279/2005), complete genome.\n\nEU371559.1\tSARS coronavirus ZJ02, complete genome.\n\nEU371560.1\tSARS coronavirus BJ182a, complete genome.\n\nEU371561.1\tSARS coronavirus BJ182b, complete genome.\n\nEU371562.1\tSARS coronavirus BJ182-4, complete genome.\n\nEU371563.1\tSARS coronavirus BJ182-8, complete genome.\n\nEU371564.1\tSARS coronavirus BJ182-12, complete genome.\n\nFJ882963.1\tSARS coronavirus P2, complete genome.\n\nGQ153539.1\tBat SARS coronavirus HKU3-4, complete genome.\n\nGQ153540.1\tBat SARS coronavirus HKU3-5, complete genome.\n\nGQ153541.1\tBat SARS coronavirus HKU3-6, complete genome.\n\nGQ153542.1\tBat SARS coronavirus HKU3-7, complete genome.\n\nGQ153543.1\tBat SARS coronavirus HKU3-8, complete genome.\n\nGQ153544.1\tBat SARS coronavirus HKU3-9, complete genome.\n\nGQ153545.1\tBat SARS coronavirus HKU3-10, complete genome.\n\nGQ153546.1\tBat SARS coronavirus HKU3-11, complete genome.\n\nGQ153547.1\tBat SARS coronavirus HKU3-12, complete genome.\n\nJQ316196.1\tSARS coronavirus HKU-39849 isolate UOB, complete genome.\n\nJX993987.1\tBat coronavirus Rp/Shaanxi2011, complete genome.\n\nJX993988.1\tBat coronavirus Cp/Yunnan2011, complete genome.\n\nKC881005.1\tBat SARS-like coronavirus RsSHC014, complete genome.\n\nKC881006.1\tBat SARS-like coronavirus Rs3367, complete genome.\n\nKF367457.1\tBat SARS-like coronavirus WIV1, complete genome.\n\nKF569996.1\tRhinolophus affinis coronavirus isolate LYRa11, complete genome.\n\nKP886808.1\tBat SARS-like coronavirus YNLF_31C, complete genome.\n\nKP886809.1\tBat SARS-like coronavirus YNLF_34C, complete genome.\n\nMK062179.1\tSARS coronavirus Urbani isolate icSARS, complete genome.\n\nMK062180.1\tSARS coronavirus Urbani isolate icSARS-MA, complete genome.\n\nMK062181.1\tSARS coronavirus Urbani isolate icSARS-C3, complete genome.\n\nMK062182.1\tSARS coronavirus Urbani isolate icSARS-C3-MA, complete genome.\n\nMK062183.1\tSARS coronavirus Urbani isolate icSARS-C7, complete genome.\n\nMK062184.1\tSARS coronavirus Urbani isolate icSARS-C7-MA, complete genome.\n\nMN996532.1\tBat coronavirus RaTG13, complete genome.\n\nNC_045512.2 COVID19 Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "covpipe",
    "package_url": "https://pypi.org/project/covpipe/",
    "platform": "",
    "project_url": "https://pypi.org/project/covpipe/",
    "project_urls": {
      "Homepage": "https://gitlab.com/RKIBioinformaticsPipelines/ncov_minipipe"
    },
    "release_url": "https://pypi.org/project/covpipe/3.1.0/",
    "requires_dist": [
      "snakemake (<7,>5.26)",
      "strictyaml",
      "PyYAML",
      "biopython",
      "pysam",
      "pandas",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Sars-Cov-2 NGS Pipline for generating consensus sequences",
    "version": "3.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11938742,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31782ccf52da275d7e3ce5e221b77f796c819fdf4ca8293a1bb2eb0edc60395b",
          "md5": "3b3ccc379bb27a132096924a7507e63c",
          "sha256": "9b3d239154e23d3b9b60da45693ebed8f06578be429d6b063fa8f0b803844fa0"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b3ccc379bb27a132096924a7507e63c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 85919,
        "upload_time": "2021-01-29T18:39:12",
        "upload_time_iso_8601": "2021-01-29T18:39:12.153702Z",
        "url": "https://files.pythonhosted.org/packages/31/78/2ccf52da275d7e3ce5e221b77f796c819fdf4ca8293a1bb2eb0edc60395b/covpipe-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c6ef0f71fdbcfa7bacb29b7c5584e5133b29b264f0a400299c8bd2990953c66",
          "md5": "93a180eadd76eaad578d095236881112",
          "sha256": "a7d065406b497450c6d66b1d1f170057a0a7862dbe27d695297f893bb2306ea2"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "93a180eadd76eaad578d095236881112",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64728,
        "upload_time": "2021-01-29T18:39:13",
        "upload_time_iso_8601": "2021-01-29T18:39:13.589260Z",
        "url": "https://files.pythonhosted.org/packages/6c/6e/f0f71fdbcfa7bacb29b7c5584e5133b29b264f0a400299c8bd2990953c66/covpipe-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a486e027a75786091975d365372b166e0969cff9e152ef9b777fda511777d3c",
          "md5": "d8eb83358f19277b5657214e4941c27f",
          "sha256": "208b770c9402eece57ec9e2ad9ebcf5aaddb0df7f4f49abbda5dcf7bf1cbd974"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8eb83358f19277b5657214e4941c27f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 96479,
        "upload_time": "2021-02-01T19:26:10",
        "upload_time_iso_8601": "2021-02-01T19:26:10.191623Z",
        "url": "https://files.pythonhosted.org/packages/8a/48/6e027a75786091975d365372b166e0969cff9e152ef9b777fda511777d3c/covpipe-3.0.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9460c21cd3d806754026b96aea539b1d46ad4b6cc589fdd13cdaacc8f37e5a1",
          "md5": "1696b648620e53cc7ea8b2d24df78fb6",
          "sha256": "3f20c9d5f7c03b90ebefb3837b9740020c23470f5918f24974736ffa35ad8f1d"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.1.post2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1696b648620e53cc7ea8b2d24df78fb6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 96478,
        "upload_time": "2021-02-01T19:35:09",
        "upload_time_iso_8601": "2021-02-01T19:35:09.590970Z",
        "url": "https://files.pythonhosted.org/packages/d9/46/0c21cd3d806754026b96aea539b1d46ad4b6cc589fdd13cdaacc8f37e5a1/covpipe-3.0.1.post2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db13228d69af7f46235d348d675bd5c35cfc1a0efad969dc3dcf448d6a56476c",
          "md5": "93ce89950f0cd2d1d7e28fd3d19238d2",
          "sha256": "c7dc76aa03726c30630701fab84176db8b39e11625177f9994a5d8f342c9cd98"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.1.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "93ce89950f0cd2d1d7e28fd3d19238d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 78092,
        "upload_time": "2021-02-01T19:35:11",
        "upload_time_iso_8601": "2021-02-01T19:35:11.369782Z",
        "url": "https://files.pythonhosted.org/packages/db/13/228d69af7f46235d348d675bd5c35cfc1a0efad969dc3dcf448d6a56476c/covpipe-3.0.1.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5019429162f4660ad8a11f16d6c3c3c558610f14a50df134a27aca652a938c3a",
          "md5": "f5025cf708fb3c2e5cd5fa6d6ff0bbc2",
          "sha256": "96b8bff7a807de3bbe95e5b7dd068f2d174c091a7803cf69314e3edce50904c0"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5025cf708fb3c2e5cd5fa6d6ff0bbc2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97821,
        "upload_time": "2021-02-26T15:12:47",
        "upload_time_iso_8601": "2021-02-26T15:12:47.142069Z",
        "url": "https://files.pythonhosted.org/packages/50/19/429162f4660ad8a11f16d6c3c3c558610f14a50df134a27aca652a938c3a/covpipe-3.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f511d1f36686c88f733ceb50bfe5bccda9bc8d61a97466f65bc7237ed4a0c10a",
          "md5": "d2a1d995477f3b255d9fbb3f1c78a59f",
          "sha256": "1549501f605a2f9d60b32091f928c28a9b128a883ea967059b07928d265fd300"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d2a1d995477f3b255d9fbb3f1c78a59f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82915,
        "upload_time": "2021-02-26T15:12:48",
        "upload_time_iso_8601": "2021-02-26T15:12:48.108122Z",
        "url": "https://files.pythonhosted.org/packages/f5/11/d1f36686c88f733ceb50bfe5bccda9bc8d61a97466f65bc7237ed4a0c10a/covpipe-3.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb63c8c3ac92b0ece7de349b0a134d5ee96017db288378afab3bd498e5e1f2f8",
          "md5": "2c393ecffdc5e375b3cda872add86a19",
          "sha256": "a5d6f52ce6778ab0cff55d8c9ada1317336b4f8cebce91e64b70df604471b552"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c393ecffdc5e375b3cda872add86a19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 97820,
        "upload_time": "2021-03-18T13:02:04",
        "upload_time_iso_8601": "2021-03-18T13:02:04.564359Z",
        "url": "https://files.pythonhosted.org/packages/fb/63/c8c3ac92b0ece7de349b0a134d5ee96017db288378afab3bd498e5e1f2f8/covpipe-3.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51e52195ae52fc43b555cc0dae52b9da2b618adb6fb79d854a4a2ddb39fc0c13",
          "md5": "902a2074d9f3c4b9886c84ea19dcec84",
          "sha256": "e228a93d04269b506a95f14c426a49de76b35200e561cbba3e061f022caeaa5c"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "902a2074d9f3c4b9886c84ea19dcec84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 82915,
        "upload_time": "2021-03-18T13:02:05",
        "upload_time_iso_8601": "2021-03-18T13:02:05.788797Z",
        "url": "https://files.pythonhosted.org/packages/51/e5/2195ae52fc43b555cc0dae52b9da2b618adb6fb79d854a4a2ddb39fc0c13/covpipe-3.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc108ab56b64faba5f12a74f1d233b44a033e071ff790f2a113fa1e18645b954",
          "md5": "4231b8a119a2aaae28dc8c53930fa261",
          "sha256": "c953a35676cf5cd9f2873ad4c12a9069cff723f1d3e6f7af6445ebfc8c86495c"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4231b8a119a2aaae28dc8c53930fa261",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 99362,
        "upload_time": "2021-04-12T05:40:20",
        "upload_time_iso_8601": "2021-04-12T05:40:20.767928Z",
        "url": "https://files.pythonhosted.org/packages/bc/10/8ab56b64faba5f12a74f1d233b44a033e071ff790f2a113fa1e18645b954/covpipe-3.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13ab7b6f594b7680a03c6727ac01aa808b838b6448c731e7e14dc34c97bef3b8",
          "md5": "8135fe257ba3e2772f231ecda48ecf1b",
          "sha256": "d20e703bc7b36182255f7acf0c8591ddb54932db541bddfbf543f90c9964a5f0"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8135fe257ba3e2772f231ecda48ecf1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86312,
        "upload_time": "2021-04-12T05:40:21",
        "upload_time_iso_8601": "2021-04-12T05:40:21.854534Z",
        "url": "https://files.pythonhosted.org/packages/13/ab/7b6f594b7680a03c6727ac01aa808b838b6448c731e7e14dc34c97bef3b8/covpipe-3.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e4e0224aa0e57c02bf27ab49b18a8ea813160dfbbf602a4dd22e06efb73a990",
          "md5": "becedbd03842ec0d995bdc022950d84b",
          "sha256": "7763e2fa131bdef8da1cfa6fd07bb7df976088b12f9ea9ec8c5cbbb989b9b6bc"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "becedbd03842ec0d995bdc022950d84b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 99637,
        "upload_time": "2021-04-28T15:40:14",
        "upload_time_iso_8601": "2021-04-28T15:40:14.049927Z",
        "url": "https://files.pythonhosted.org/packages/2e/4e/0224aa0e57c02bf27ab49b18a8ea813160dfbbf602a4dd22e06efb73a990/covpipe-3.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7b0d41d0ad4d572418a13e4c7344398a3bd0344e43f96ff99da7429cfffe589",
          "md5": "f2141ce926d3a3f3e1af1840bac1c6fd",
          "sha256": "57b11a2cafbf0b7750395687cf6c05b629de6c820ca5e73c4a8bca6d808e9c54"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f2141ce926d3a3f3e1af1840bac1c6fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 86570,
        "upload_time": "2021-04-28T15:40:15",
        "upload_time_iso_8601": "2021-04-28T15:40:15.519954Z",
        "url": "https://files.pythonhosted.org/packages/a7/b0/d41d0ad4d572418a13e4c7344398a3bd0344e43f96ff99da7429cfffe589/covpipe-3.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28d182c12b66b7e125843973d554254d9a7acb38e274e58f0a85f1c5f7ad73da",
          "md5": "faa57cd5d29c7ab041a6225ff3b12b73",
          "sha256": "b3f3616344bc29f7a66e8b4f7127766f653967a211ddc04ba17f7870af777fb4"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "faa57cd5d29c7ab041a6225ff3b12b73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101413,
        "upload_time": "2021-07-28T09:52:02",
        "upload_time_iso_8601": "2021-07-28T09:52:02.327192Z",
        "url": "https://files.pythonhosted.org/packages/28/d1/82c12b66b7e125843973d554254d9a7acb38e274e58f0a85f1c5f7ad73da/covpipe-3.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29fce4591bf45504f5136ee21d72060b5217850ea5a535fd7598e5b0f48610eb",
          "md5": "22bd7b87d3cce244ee26ec8a410c1b70",
          "sha256": "c5caa60c5858d00af04be6d67a9aebf9d970c2094058d20319537a80cf85a4c2"
        },
        "downloads": -1,
        "filename": "covpipe-3.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "22bd7b87d3cce244ee26ec8a410c1b70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 88818,
        "upload_time": "2021-07-28T09:52:03",
        "upload_time_iso_8601": "2021-07-28T09:52:03.687638Z",
        "url": "https://files.pythonhosted.org/packages/29/fc/e4591bf45504f5136ee21d72060b5217850ea5a535fd7598e5b0f48610eb/covpipe-3.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c7bf5fa02738e65344a9da5df4febf9a8141996ecc8fde59702c268e7c59b74",
          "md5": "339e388b944627de788afafa51b79890",
          "sha256": "a475d9ea52514f8dce2a6807bdc025be40f7a27dcf9bee8a1866bf278f74246c"
        },
        "downloads": -1,
        "filename": "covpipe-3.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "339e388b944627de788afafa51b79890",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 104082,
        "upload_time": "2021-11-05T17:43:39",
        "upload_time_iso_8601": "2021-11-05T17:43:39.205951Z",
        "url": "https://files.pythonhosted.org/packages/3c/7b/f5fa02738e65344a9da5df4febf9a8141996ecc8fde59702c268e7c59b74/covpipe-3.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3aa85d33a1ad11bf04f3ea451449e802d699e24f5cbde7dbd4b4a9461eb1b2b8",
          "md5": "c7a85671a3997bbee5f2e1bb29103806",
          "sha256": "81607aa5bd01311bcc5a955bf6ed08cd95a2853e039a3d5f6567fd050153ddf2"
        },
        "downloads": -1,
        "filename": "covpipe-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c7a85671a3997bbee5f2e1bb29103806",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 91360,
        "upload_time": "2021-11-05T17:43:40",
        "upload_time_iso_8601": "2021-11-05T17:43:40.759096Z",
        "url": "https://files.pythonhosted.org/packages/3a/a8/5d33a1ad11bf04f3ea451449e802d699e24f5cbde7dbd4b4a9461eb1b2b8/covpipe-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c7bf5fa02738e65344a9da5df4febf9a8141996ecc8fde59702c268e7c59b74",
        "md5": "339e388b944627de788afafa51b79890",
        "sha256": "a475d9ea52514f8dce2a6807bdc025be40f7a27dcf9bee8a1866bf278f74246c"
      },
      "downloads": -1,
      "filename": "covpipe-3.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "339e388b944627de788afafa51b79890",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 104082,
      "upload_time": "2021-11-05T17:43:39",
      "upload_time_iso_8601": "2021-11-05T17:43:39.205951Z",
      "url": "https://files.pythonhosted.org/packages/3c/7b/f5fa02738e65344a9da5df4febf9a8141996ecc8fde59702c268e7c59b74/covpipe-3.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3aa85d33a1ad11bf04f3ea451449e802d699e24f5cbde7dbd4b4a9461eb1b2b8",
        "md5": "c7a85671a3997bbee5f2e1bb29103806",
        "sha256": "81607aa5bd01311bcc5a955bf6ed08cd95a2853e039a3d5f6567fd050153ddf2"
      },
      "downloads": -1,
      "filename": "covpipe-3.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c7a85671a3997bbee5f2e1bb29103806",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 91360,
      "upload_time": "2021-11-05T17:43:40",
      "upload_time_iso_8601": "2021-11-05T17:43:40.759096Z",
      "url": "https://files.pythonhosted.org/packages/3a/a8/5d33a1ad11bf04f3ea451449e802d699e24f5cbde7dbd4b4a9461eb1b2b8/covpipe-3.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}