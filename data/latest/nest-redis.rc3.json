{
  "info": {
    "author": "fuqiang",
    "author_email": "imock@sina.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n\n## Installation\n\ninstall as **pip**\n\n```shell\npip install nest-redis==1.1.1\n```\n\n## Usage\n\n#### 1. 实例化\n\n- redis配置\n\n  ```python\n  config = {\n      \"host\": \"127.0.0.1\",\n      \"port\": 6379,\n      \"password\": \"123456\",\n      \"db\": 10,\n      \"decode_responses\": True\n  }\n  ```\n\n- 获取句柄\n\n  ```python\n  >>> from pyredis.cache import RedisUtil\n  >>> cache = RedisUtil(config)\n  ```\n\n\n#### 2.字符串相关方法\n\n- **set**\n\n  > :explain: 设置值\n  >\n  > :syntax: cache.set(key: str, val: object, [time: int,]) -> bool\n  >\n  > :param: key， 字符串的key\n  >\n  > :param: val， 字符串的值，可以为string,  list,  dict\n  >\n  > :param: time，超时时间，单位秒\n  >\n  > :return: string\n  \n  ```shell\n  >>> cache.set(\"key\", \"val\")\n  >>> True\n  >>> cache.set(\"key\", \"val\", 3000)\n  >>> True\n  ```\n  \n- **get**\n\n  >:explain: 获取值\n  >\n  >:syntax: cache.get(key: str) -> object\n  >\n  >:param: key，字符串的键\n  >\n  >:return: 字符串的值\n  \n  ```shell\n  >>> cache.get(\"key\")\n  >>> \"val\"\n  ```\n  \n- **ttl**\n\n  > :explain: 获取该键剩余的时间\n  >\n  > :syntax: cache.ttl(key: str) -> int\n  >\n  > :param: key， 字符串的键\n  >\n  > :return: 剩余的时间，单位秒\n  \n  ```shell\n  >>> cache.ttl(\"key\")\n  >>> 2990\n  ```\n  \n- **persist**\n\n  > :explain: 取消过期时间\n  >\n  > :syntax: cache.persist(key: str) -> bool\n  >\n  > :param: key，字符串的键\n  >\n  > :return: True设置成功，Flase设置失败\n  \n  ```shell\n  >>> cache.persist(key)\n  >>> True\n  ```\n  \n- **expire**\n\n  > :explain: 添加过期时间\n  >\n  > :syntax: cache.expire(key: str, time: int) -> bool\n  >\n  > :param: key， 字符串的键\n  >\n  > :param: time，过期的时间，单位秒\n  >\n  > :return: True设置成功，Flase设置失败\n  \n  ```shell\n  >>> cache.expire(key, 2000)\n  >>> True\n  ```\n\n#### 3. 队列相关方法\n\n- **lpush**\n\n  >:explain: 添加队首的值\n  >\n  >:syntax: cache.lpush(name: str, val: object) -> int\n  >\n  >:param: name，队列的键\n  >\n  >:param: val，队列的值\n  >\n  >:return: 返回队尾的值的索引\n\n  ```shell\n  >>> cache.lpush(\"colors\", \"red\")\n  >>> 1\n  >>> cache.lpush(\"colors\", [\"yellow\", \"pink\"])\n  >>> 3\n  ```\n\n- **rpop**\n\n  > :explain: 获取队尾的值\n  >\n  > :syntax: cache.rpop(name: str) -> object\n  >\n  > :param: name，队列的键\n  >\n  > :return: 返回队尾的值\n\n  ```shell\n  >>> cache.rpop(\"colors\")\n  >>> \"red\"\n  ```\n\n- **llen**\n\n  > :explain: 获取队列的长度\n  >\n  > :syntax: cache.llen(name: str) -> int\n  >\n  > :param: name， 队列的key\n  >\n  > :return: 队列的长度\n  \n  ```shell\n  >>> cache.llen(\"colors\")\n  >>> 2\n  ```\n\n#### 4. 哈希相关方法\n\n- **hset**\n\n  > :explain: 添加哈希数据\n  >\n  > :syntax: cache.hset(name: str, field: str, val: str) -> int\n  >\n  > :param: name，hash的键\n  >\n  > :param: field， hash的字段\n  >\n  > :param: val， hash的值\n  >\n  > :return:  0: 添加失败 1: 添加成功\n\n  ```shell\n  >>> cache.hset(\"shop\", \"3c\", \"dell computer\")\n  >>> 1\n  >>> cache.hset(\"shop\", \"drink\", \"milk\")\n  >>> 1\n  >>> cache.hset(\"shop\", \"food\", \"egg\")\n  >>> 1\n  >>> cache.hset(\"shop\", \"cigarette\", {\"liqun\":17, \"huangjinye\": 12})\n  >>> 1\n  ```\n\n- **hmset**\n\n  > :explain: 批量添加数据\n  >\n  > :syntax: cache.hmset(name :str, mapping: dict) -> bool\n  >\n  > :param: name，hash的名称\n  >\n  > :param: mapping，hash的数据，为字典类型\n  >\n  > :return: False: 添加失败 ; True: 添加成功\n\n  ```shell\n  >>> cache.hmset(\"company\", {\"mib\": \"{\\\"user_id\\\": 1207, \\\"user_name\\\":\\\"xxx\\\"}\", \"mic\":\"unknown\"})\n  >>> True\n  ```\n\n- **hgetall**\n\n  > :explain: 获取hash中某个键下的键值对\n  >\n  > :syntax: cache.hgetall(name: str)-> dict\n  >\n  > :param: name，hash的名称\n  >\n  > :return: 哈希中name中的所有数据\n\n  ```shell\n  >>> cache.hgetall(\"shop\")\n  >>> {'3c': 'dell computer', 'food': 'egg', 'drink': 'milk'}\n  ```\n\n- **hget**\n\n  > :explain: 获取哈希某字段下的数据\n  >\n  > :syntax: cache.hget(name: str, field: str) -> object\n  >\n  > :param: name，hash的名称\n  >\n  > :param: field，hash的字段名称\n  >\n  > :return: 哈希某字段下的数据(string, int, dict, list)\n\n  ```shell\n  >>> cache.hget(\"shop\", \"3c\")\n  >>> 'dell computer'\n  ```\n\n- **hlen**\n\n  > :explain: 获取hash的长度\n  >\n  > :syntax: cache.hlen(name: str) -> int\n  >\n  > :param: name，hash的名称\n  >\n  > :return: hash的长度\n\n  ```shell\n  >>> cache.hlen(\"shop\")\n  >>> 3\n  ```\n\n- **hexists**\n\n  > :explain: 判断一个field是否在hash中\n  >\n  > :syntax: cache.hexists(name: str, field: str) -> bool\n  >\n  > :param: name， hash的名称\n  >\n  > :param: field，   hash的字段名称\n  >\n  > :return: True: 存在  False:不存在\n  \n  ```shell\n  >>> cache.hexists(\"shop\", \"3c\")\n  >>> True\n  ```\n  \n- **hdel**\n\n  > :explain: 删除hash中的字段信息\n  >\n  > :syntax: cache.hdel(name: str, field: str) -> int\n  >\n  > :param: name，hash的名称\n  >\n  > :param: field，hash的字段名称\n  >\n  > :return: 1:删除成功 0:删除失败\n  \n  ```shell\n  >>> cache.hdel(\"shop\", \"3c\")\n  >>> 1\n  ```\n\n#### 5. 集合相关方法\n\n- **sadd**\n\n  > :explain: 添加集合数据\n  >\n  > :syntax: cache.sadd(name: str, val: object) -> int\n  >\n  > :param: name， 集合的键\n  >\n  > :param: val，  集合的值，可以为int or string\n  >\n  > :return: 1:成功 ； 0:失败\n\n  ```shell\n  >>> cache.sadd(\"names\", \"3c\")\n  >>> 1\n  ```\n\n- **smembers**\n\n  > :explain: 获取集合中的数据\n  >\n  > :syntax: cache.smembers(name: str) -> set\n  >\n  > :param: name，集合的名称\n  >\n  > :return: 集合中的数据\n\n  ```shell\n  >>> cache.smembers(\"names\")\n  >>> {'3c'}\n  ```\n\n- **scard**\n\n  > :explain: 获取集合的长度\n  >\n  > :syntax: cache.scard(name: str) -> int\n  >\n  > :param: name，集合的名称\n  >\n  > :return: 集合的长度\n\n  ```shell\n  >>> cache.scard(\"names\")\n  >>> 1\n  ```\n\n- **sismember**\n\n  > :explain: 判断一个元素是否在集合中\n  >\n  > :syntax: cache.sismember(name: str, val: object) -> bool\n  >\n  > :param: name，集合的名称\n  >\n  > :param: val，需要查询的值\n  >\n  > :return: True在集合中，False不在集合中\n  \n  ```shell\n  >>> cache.sismember(\"A\", \"v1\")\n  >>> True\n  ```\n  \n- **sdiff**\n\n  > :explain: 集合差集，属于A但不属于B\n  >\n  > :syntax: cache.sdiff(A: str, B: str) -> set\n  >\n  > :param: A， 集合A的键\n  >\n  > :param: B， 集合B的键\n  >\n  > :return: 集合差集\n  \n  ```shell\n  >>> cache.sadd(\"A\", [\"v1\", \"v2\", \"v3\"])\n  >>> cache.sadd(\"B\", \"v2\", \"v4\")\n  >>> cache.sdiff(\"A\", \"B\")\n  >>> {\"v1\", \"v3\"}\n  ```\n  \n- **sinter**\n\n  > :explain: 集合交集，属于A且属于B\n  >\n  > :syntax: cache.sinter(A: str, B: str) -> set\n  >\n  > :param: A， 集合A的键\n  >\n  > :param: B， 集合B的键\n  >\n  > :return: 集合交集\n  \n  ```shell\n  >>> cache.sadd(\"A\", \"v1\", \"v2\", \"v3\")\n  >>> cache.sadd(\"B\", \"v2\", \"v4\")\n  >>> cache.sinter(\"A\", \"B\")\n  >>> {\"v2\"}\n  ```\n  \n- **sunion**\n\n  > :explain: 集合并集，属于A或属于B的元素为称为A与B的并集\n  >\n  > :syntax: cache.sunion(A: str, B: str) -> set\n  >\n  > :param: A， 集合A的键\n  >\n  > :param: B，集合B的键\n  >\n  > :return: 集合并集\n  \n  ```shell\n  >>> cache.sadd(\"A\", \"v1\", \"v2\", \"v3\")\n  >>> cache.sadd(\"B\", \"v2\", \"v4\")\n  >>> cache.sunion(\"A\", \"B\")\n  >>> {'v1', 'v2', 'v3', 'v4'}\n  ```\n  \n- **srem**\n\n  > :explain: 删除集合中的元素\n  >\n  > :syntax: cache.srem(name: str, *val: object) -> int\n  >\n  > :param: name，集合名称\n  >\n  > :param: val ，集合中的元素\n  >\n  > :return: 删除的个数\n\n  ```shell\n  >>> cache.srem(\"A\", \"a\"， 2)\n  >>> 2\n  ```\n\n#### 6. 有序集合相关方法\n\n- **zadd**\n\n  > :explain: 添加有序集合\n  >\n  > :syntax: cache.zadd(key: str, mapping: dict) -> list\n  >\n  > :param: key，有序集合的名称\n  >\n  > :param: mapping，要添加的值\n  >\n  > :return: 返回添加的个数\n  \n  ```shell\n  >>> cache.zadd(\"A\", {\"a\": 1, \"b\": 3, \"c\": 2})\n  >>> 3\n  ```\n  \n- **zrange**\n\n  > :explain: 查询有序集合\n  >\n  > :syntax: cache.zrange(key: str, start: int, end: int) -> list\n  >\n  > :param: key，有序集合的名称\n  >\n  > :param: start，开始查询的索引\n  >\n  > :param: end，结束查询的索引\n  >\n  > :return:  获取查询后的元素的列表\n\n  ```shell\n  >>> cache.zrange(\"A\", 0 , -1)\n  >>> ['a', 'c', 'b']\n  ```\n\n- **zrank**\n\n  > :explain: 查询有序集合的值的索引\n  >\n  > :syntax: cache.zrank(key: str, val: str) -> int\n  >\n  > :param: key，有序集合的名称\n  >\n  > :param: val， 需要查询的值\n  >\n  > :return: 返回查询该值的索引，索引为 -1 则表示不存在\n\n  ```shell\n  >>> cache.zrank(\"A\", 'a')\n  >>> 0\n  ```\n  \n- **zcard**\n\n  >:explain:  获取有序集合的长度\n  >\n  >:syntax: cache.zcard(key: str) -> int\n  >\n  >:param: key,  有序集合的名称\n  >\n  >:return: 有序集合的长度\n  \n  ```shell\n  >>> cache.zcard(\"A\")\n  >>> 3\n  ```\n  \n- **zscan_iter**\n\n  > :explain:  有序集合的模糊匹配\n  >\n  > :syntax: cache.zscan_iter(name: str, match: str=\"*\") -> list\n  >\n  > :param: name， 有序集合的名称\n  >\n  > :param: match， 匹配的字符串，默认为 *\n  >\n  > :return: 返回匹配的列表\n\n  ```shell\n  >>> cache.scan_iter(\"A\"， \"b*\")\n  >>> ['b', 'bf']\n  ```\n\n- **zrem**\n\n  > :explain: 删除有序集合中的元素 \n  >\n  > :syntax: cache.zrem(name: str, *val: object) -> int\n  >\n  > :param: name，集合名称\n  >\n  > :param: val , 集合集合中的元素\n  >\n  > :return:  删除的个数\n\n  ```shell\n  >>> cache.zrem(\"A\"， \"a\", \"b\")\n  >>> 2\n  ```\n\n#### 7. 其他方法\n\n- **delete**\n\n  > :explain: 删除redis的键\n  >\n  > :syntax: cache.delete(key: str) -> int\n  >\n  > :param: key， redis的键\n  >\n  > :return:  1: 删除成功； 0：没有此key\n\n  ```shell\n  >>> cache.delete(\"A\")\n  >>> 1\n  ```\n\n- **flushdb**\n\n  > :explain: 清除数据库下的所有键\n  >\n  > :syntax: cache.flushdb() -> bool\n  >\n  > :return: True清空成功，False清空失败\n  \n  ```shell\n  >>> cache.flushdb()\n  >>> True\n  ```\n  \n- **keys**\n\n  > :explain: 匹配数据库下的键\n  >\n  > :syntax:  keys( pattern: str = \"*\") -> list\n  >\n  > :param: pattern表达式，默认*\n  >\n  > :return: list\n  \n  ```shell\n  >>> cache.keys(\"sms:*\")\n  >>> [\"sms:13512345678\", \"sms:13698765432\"]\n  ```\n  \n- **handler**\n\n  > :explain: 获取redis句柄\n  >\n  > :syntax: cache.handler() -> object\n  >\n  > :return: object\n  \n  ```shell\n  >>> handler = cache.handler()\n  >>> handler.get(\"a\")\n  >>> \"12345\"\n  ```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nest-redis",
    "package_url": "https://pypi.org/project/nest-redis/",
    "platform": "",
    "project_url": "https://pypi.org/project/nest-redis/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/nest-redis/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "nest common redis",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11900870,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d59d180fe17e91e1fc600d177295c9fee29705f3264c94ca2232eb97f44a135",
          "md5": "9021ea74f6433954101d531692b9489b",
          "sha256": "3bc9a7d42eb8e06e9cc86e99bcea6f35fb0cb3409f78fb046fdfee382c37247c"
        },
        "downloads": -1,
        "filename": "nest-redis-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9021ea74f6433954101d531692b9489b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 6699,
        "upload_time": "2021-10-14T12:05:16",
        "upload_time_iso_8601": "2021-10-14T12:05:16.416892Z",
        "url": "https://files.pythonhosted.org/packages/3d/59/d180fe17e91e1fc600d177295c9fee29705f3264c94ca2232eb97f44a135/nest-redis-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e00f83bfd9825f2ab86af6cf043566a4099467c9fd886a333b851e2c1192f0f",
          "md5": "e05c43e35831d24e3404664bcd565656",
          "sha256": "26a53187aaa1d5caea68fa6cb064e2473bb6163273cca1f1f3872ab217e69703"
        },
        "downloads": -1,
        "filename": "nest-redis-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e05c43e35831d24e3404664bcd565656",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 6979,
        "upload_time": "2021-10-15T05:43:11",
        "upload_time_iso_8601": "2021-10-15T05:43:11.516042Z",
        "url": "https://files.pythonhosted.org/packages/5e/00/f83bfd9825f2ab86af6cf043566a4099467c9fd886a333b851e2c1192f0f/nest-redis-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "696d0e24399e7a7435ae4b366e847a1f2a4c617db4fb823cc6a193d452eb571c",
          "md5": "bc435b57450ffe76a6eea839e8a0733f",
          "sha256": "a8d12feb296fc0deb5a19cb3c13ab4fd544134b4b4490787ee93dde14e253ba4"
        },
        "downloads": -1,
        "filename": "nest-redis-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bc435b57450ffe76a6eea839e8a0733f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7137,
        "upload_time": "2021-11-02T06:58:48",
        "upload_time_iso_8601": "2021-11-02T06:58:48.329617Z",
        "url": "https://files.pythonhosted.org/packages/69/6d/0e24399e7a7435ae4b366e847a1f2a4c617db4fb823cc6a193d452eb571c/nest-redis-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "696d0e24399e7a7435ae4b366e847a1f2a4c617db4fb823cc6a193d452eb571c",
        "md5": "bc435b57450ffe76a6eea839e8a0733f",
        "sha256": "a8d12feb296fc0deb5a19cb3c13ab4fd544134b4b4490787ee93dde14e253ba4"
      },
      "downloads": -1,
      "filename": "nest-redis-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bc435b57450ffe76a6eea839e8a0733f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 7137,
      "upload_time": "2021-11-02T06:58:48",
      "upload_time_iso_8601": "2021-11-02T06:58:48.329617Z",
      "url": "https://files.pythonhosted.org/packages/69/6d/0e24399e7a7435ae4b366e847a1f2a4c617db4fb823cc6a193d452eb571c/nest-redis-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}