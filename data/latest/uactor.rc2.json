{
  "info": {
    "author": "Felipe A Hernandez",
    "author_email": "ergoithz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Distributed Computing",
      "Topic :: System :: Hardware :: Symmetric Multi-processing"
    ],
    "description": "![ ](https://gitlab.com/ergoithz/uactor/-/raw/master/images/uactor-title.96.png)\n\n# uActor: Process Actor Model\n\nuActor is a process actor library for Python with a simple yet powerful API,\nimplementing the [actor model][actor-model] atop [multiprocessing],\nwith no dependencies other than the [Python Standard Library][stdlib].\n\n* **Simple**: Minimalistic API, no boilerplate required.\n* **Flexible**: Trivial to integrate, meant to be extended.\n* **Concurrent**: Share workload over CPU cores, and across the network.\n\nDocumentation: [uactor.readthedocs.io](https://uactor.readthedocs.io)\n\nUsage:\n\n```python\nimport os\nimport uactor\n\nclass Actor(uactor.Actor):\n    def hello(self):\n        return f'Hello from subprocess {os.getpid()}!'\n\nprint(f'Hello from process {os.getpid()}!')\n# Hello from process 22682!\n\nprint(Actor().hello())\n# Hello from subprocess 22683!\n```\n\n## Quickstart\n\n### Installation\n\nYou can install it using `pip`.\n```sh\npip install uactor\n```\n\nOr alternatively by including our single `uactor.py` file into your project.\n\n### Your first actor\n\nWith uActor, actors are defined as classes inheriting from `uactor.Actor`,\nwith some special attributes we'll cover later.\n\n```python\nimport uactor\n\nclass MyActor(uactor.Actor):\n    def my_method(self):\n        return True\n```\n\nDuring instantiation, every actor is initialized on its own dedicated\nprocess, returning a proxy.\n\n```python\nmy_actor_proxy = MyActor()\nmy_actor_proxy.my_method()\n```\n\nOnce you're done with your actor, it is always a good idea to finalize its\nprocess with `uactor.Actor.shutdown` method.\n\n```python\nmy_actor_proxy.shutdown()\n```\n\nAlternatively, `uactor.Actor` instances can be used as context managers, so\nthe actor process will be finalized once we're done with it.\n\n```python\nwith MyActor() as my_actor_proxy:\n    my_actor_proxy.my_method()\n```\n\nActor processes will be also finished when every proxy gets garbage-collected\non its parent process.\n\n### Returning result proxies\n\nActor methods can return proxies instead of actual objects, keeping them\nsound and safe on our actor process.\n\nTo specify which proxy will be returned from an specific method, we can add\nboth method name and proxy typeid to `uactor.Actor._method_to_typeid_` special\nclass attribute.\n\n```python\nimport uactor\n\nclass MyActor(uactor.Actor):\n\n    _method_to_typeid_ = {'my_method': 'dict'}\n\n    def __init__(self):\n        self.my_data = {}\n\n    def my_method(self):\n        return self.my_data\n```\n\nOr, alternatively, we can explicitly create a proxy for our object, using\n`uactor.proxy` utility function.\n\n```python\nimport uactor\n\nclass MyActor(uactor.Actor):\n    def __init__(self):\n        self.my_data = {}\n\n    def my_method(self):\n        return uactor.proxy(self.my_data, 'dict')\n```\n\nThere is a limitation with proxies, applying two different proxies to\nthe same object will raise an exception, this is likely to change in\nthe future.\n\n### Becoming asynchronous (and concurrent)\n\nActor methods are fully synchronous by default, which is usually not very\nuseful on distributed software, the following example will show you how\nto return asynchronous results from the actor.\n\n```python\nimport time\nimport multiprocessing.pool\nimport uactor\n\nclass MyActor(uactor.Actor):\n\n    _method_to_typeid_ = {'my_method': 'AsyncResult'}\n\n    def __init__(self):\n        self.threadpool = multiprocessing.pool.ThreadPool()\n\n    def my_method(self):\n        return self.threadpool.apply_async(time.sleep, [10])  # wait 10s\n\nwith MyActor() as my_actor:\n\n    # will return immediately\n    result = my_actor.my_method()\n\n    # will take 10 seconds\n    result.wait()\n```\n\nBased on this, we can now run code concurrently running on the same actor.\n\n```python\nwith MyActor() as my_actor:\n\n    # these will return immediately\n    result_a = my_actor.my_method()\n    result_b = my_actor.my_method()\n\n    # these all will take 10 seconds in total\n    result_a.wait()\n    result_b.wait()\n```\n\nAnd now we can to parallelize workloads across different actor processes.\n\n```python\nactor_a = MyActor()\nactor_b = MyActor()\nwith actor_a, actor_b:\n\n    # these both will return immediately\n    result_a = actor_a.my_method()\n    result_b = actor_b.my_method()\n\n    result_a.wait() # this will take ~10s to complete\n    result_b.wait() # this will be immediate (we already waited 10s)\n```\n\n### Next steps\n\nYou can dive into our [documentation](https://uactor.readthedocs.io) or\ntake a look at our code examples.\n\n* The basics:\n  * [Actor inheritance](https://gitlab.com/ergoithz/uactor/-/blob/master/examples/inheritance.md).\n  * [Actor lifetime](https://gitlab.com/ergoithz/uactor/-/blob/master/examples/lifetime.md).\n  * [Result proxies](https://gitlab.com/ergoithz/uactor/-/blob/master/examples/result_proxies.md).\n  * [Method callbacks](https://gitlab.com/ergoithz/uactor/-/blob/master/examples/callbacks.md).\n\n* Advanced patterns:\n  * [Sticky processes](https://gitlab.com/ergoithz/uactor/-/blob/master/examples/stick.md).\n  * [Actor pool](https://gitlab.com/ergoithz/uactor/-/blob/master/examples/pool.md).\n  * [Networking](https://gitlab.com/ergoithz/uactor/-/blob/master/examples/networking.md).\n\n## uActor design\n\nWith the constant rise in CPU core count, highly threaded python applications\nare still pretty rare (except for distributed processing frameworks like\n[celery][celery]), this is due a few reasons:\n* [threading][threading] cannot use multiple cores because\n  [Python Global Interpreter Lock][gil] forces the interpreter to run on a\n  single core.\n* [multiprocessing][multiprocessing], meant to overcome threading limitations\n  by using processes, exposes a pretty convoluted API as processes\n  are way more complex, exposing many quirks and limitations.\n\nuActor allows implementing distributed software as easy as just declaring\nand instancing classes, following the [actor model][actor-model], by thinly\nwrapping the standard [SyncManager][syncmanager] to circumvent most o\n [multiprocessing][multiprocessing] complexity and some of its flaws.\n\nuActor API is designed to be both minimalistic and intuitive, but still few\ncompromises had to be taken to leverage on [SyncManager][syncmanager]\nas much as possible, as it is both somewhat actively maintained and\nalready available as part of the [Python Standard Library][stdlib].\n\n### Actors\n\nJust like the actor programming model revolves around the actor entity,\nuActor features the `uactor.Actor` base class.\n\nWhen an actor class is declared, by inheriting from `uactor.Actor`, its\n`Actor.proxy_class` gets also inherited and updated to mirror the actor\ninterface, either following the explicit list of properties defined at\n`Actor._exposed_` or implicitly by actor public methods.\n\n`Actor.manager_class` is also inherited registering actor specific proxies\ndefined in `Actor._proxies_` mapping (key used as a typeid) along with\n`'actor'` and `'auto'` special proxies.\n\nKeep in mind the default `Actor.manager_class`, `uactor.ActorManager`, already\nincludes every proxy from [SyncManager][syncmanager] (including the internal\n`AsyncResult` and `Iterator`) which are all available to the actor and ready\nuse (you can call `Actor.manager_class.typeids()` to list them all).\n\nAs a reference, these are all the available `uactor.Actor` configuration\nclass attributes:\n* `manager_class`: manager base class (defaults to parent's one, up to\n  `uactor.ActorManager`).\n* `proxy_class`: actor proxy class (defaults to parent's one, up to\n  `uactor.ActorProxy`).\n* `_options_`: option mapping will be passed to `manager_class`.\n* `_exposed_`: list of explicitly exposed methods will be made available by\n  `proxy_class`, if `None` or undefined then all public methods will be\n  exposed.\n* `_proxies_`: mapping (typeid, proxy class) of additional proxies will be\n  registered in the `manager_class` and, thus, will be available to\n  be returned by the actor.\n* `_method_to_typeid_`: mapping (method name, typeid) defining which method\n  return values will be wrapped into proxies when invoked from `proxy_class`.\n\nWhen an `uactor.Actor` class is instantiated, a new process is spawned and a\n`uactor.Actor.proxy_class` instance is returned (as the real actor will be\nkept safe in said process), transparently exposing a message-based interface.\n\n```python\nimport os\nimport uactor\n\nclass Actor(uactor.Actor):\n    def getpid(self):\n        return os.getpid()\n\nactor = Actor()\nprint('My process id is', os.getpid())\n# My process id is 153333\nprint('Actor process id is ', actor.getpid())\n# Actor process id is 153344\n```\n\n### Proxies\n\nProxies are objects communicating with the actor process, exposing\na similar interface, in the most transparent way possible.\n\nIt is implied most calls made to a proxy will result on inter-process\ncommunication and serialization overhead.\n\nTo alleviate the serialization cost, actor methods can also return proxies,\nso the real data is kept well inside the actor process boundaries, which can\nbe efficiently shared between processes with very little serialization cost.\n\nActors can define which proxy will be used to expose the result of certain\nmethods by defining that in their `Actor._method_to_typeid_` property.\n\n```python\nimport uactor\n\nclass Actor(uactor.Actor):\n    _method_to_typeid_ = {'get_mapping': 'dict'}\n    ...\n    def get_data(self):\n        return self.my_data_dict\n```\n\nOr, alternatively, using the `uactor.proxy` function, receiving both value\nand a proxy `typeid` (as in [SyncManager][syncmanager] semantics).\n\n```python\nimport uactor\n\nclass Actor(uactor.Actor):\n    ...\n    def get_data(self):\n        return uactor.proxy(self.my_data_dict, 'dict')\n```\n\nKeep in mind `uactor.proxy` can only be called from inside the actor process\n(it will raise `uactor.ProxyError` otherwise), as proxies can only be created\nfrom there.\n\nYou can define your own proxy classes (following [BaseProxy][baseproxy]\nsemantics), and they will be made available in an actor by including it on\nthe `Actor._proxies_` mapping (along its typeid).\n\n```python\nimport uactor\n\nclass MyDataProxy(uactor.BaseProxy):\n    def my_method(self):\n        return self._callmethod('my_method')\n\n    my_other_method = uactor.ProxyMethod('my_other_method')\n\nclass Actor(uactor.Actor):\n    _proxies_ = {'MyDataProxy': MyDataProxy}\n    _method_to_typeid_ = {'get_data': 'MyDataProxy'}\n    ...\n```\n\nIn addition to all proxies imported from both [SyncManager][syncmanager]\n(including internal ones as `Iterator` and `AsyncResult`) and\n`Actor._proxies_`, we always register these ones:\n* `actor`: proxy to the current process actor.\n* `auto`: dynamic proxy based based on the wrapped object.\n\nYou can list all available proxies (which can vary between python versions)\nby calling `ActorManager.typeids()`:\n\n```python\nimport uactor\n\nprint(uactor.Actor.manager_class.typeids())\n# ('Queue', 'JoinableQueue', 'Event', ..., 'auto', 'actor')\n\nprint(uactor.ActorManager.typeids())\n# ('Queue', 'JoinableQueue', 'Event', ..., 'auto')\n```\n\n## Contributing\n\nuActor is deliberately very small in scope, while still aiming to be easily\nextended, so extra functionality might be implemented via external means.\n\nIf you find any bug or a possible improvement to existing functionality it\nwill likely be accepted so feel free to contribute.\n\nIf, in the other hand, you feel a feature is missing, you can either create\nanother library using uActor as dependency or fork this project.\n\n## License\n\nCopyright (c) 2020, Felipe A Hernandez.\n\nMIT License (see [LICENSE](https://gitlab.com/ergoithz/uactor/-/blob/master/LICENSE)).\n\n[multiprocessing]: https://docs.python.org/3/library/multiprocessing.html\n[syncmanager]: https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager\n[baseproxy]: https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.BaseProxy\n[threading]: https://docs.python.org/3/library/threading.html\n[context-managers]: https://docs.python.org/3/reference/datamodel.html#context-managers\n[gil]: https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock\n[actor-model]: https://en.wikipedia.org/wiki/Actor_model\n[ipc]:https://en.wikipedia.org/wiki/Inter-process_communication\n[stdlib]: https://docs.python.org/3/library/index.html\n[celery]: https://celeryproject.org\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/ergoithz/uactor",
    "keywords": "actor,multiprocessing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uactor",
    "package_url": "https://pypi.org/project/uactor/",
    "platform": "any",
    "project_url": "https://pypi.org/project/uactor/",
    "project_urls": {
      "Homepage": "https://gitlab.com/ergoithz/uactor"
    },
    "release_url": "https://pypi.org/project/uactor/0.1.1/",
    "requires_dist": [
      "flake8 ; extra == 'codestyle'",
      "flake8-blind-except ; extra == 'codestyle'",
      "flake8-bugbear ; extra == 'codestyle'",
      "flake8-builtins ; extra == 'codestyle'",
      "flake8-commas ; extra == 'codestyle'",
      "flake8-docstrings ; extra == 'codestyle'",
      "flake8-import-order ; extra == 'codestyle'",
      "flake8-logging-format ; extra == 'codestyle'",
      "flake8-rst-docstrings ; extra == 'codestyle'",
      "coverage ; extra == 'coverage'",
      "recommonmark ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "wheel ; extra == 'release'",
      "twine ; extra == 'release'",
      "coverage ; extra == 'tests'"
    ],
    "requires_python": ">=3.6.0",
    "summary": "uActor: Process Actor Model",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7771364,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d654bc44a994415451f1f45ae3600c17f22360db27ed3a6cfe5882d9d9cd9402",
          "md5": "b28615eedfab74831b6f9a7df5090c2a",
          "sha256": "68aeab33e8ea2defb684b6176e992b6d28a3fe7fde413db81a1f8d7eff12266e"
        },
        "downloads": -1,
        "filename": "uactor-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b28615eedfab74831b6f9a7df5090c2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10136,
        "upload_time": "2020-07-11T21:34:47",
        "upload_time_iso_8601": "2020-07-11T21:34:47.488153Z",
        "url": "https://files.pythonhosted.org/packages/d6/54/bc44a994415451f1f45ae3600c17f22360db27ed3a6cfe5882d9d9cd9402/uactor-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d586869868b93d2c8ee3968630e572a8b7880fb6f8b978e0b6077f4228b61dd4",
          "md5": "145a7fa89afdbd96bbdf1a3a1bd633b5",
          "sha256": "15355cf7746cf59a15e0da62b42bbff490a092a32129e94cb2ea172da0f24dc9"
        },
        "downloads": -1,
        "filename": "uactor-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "145a7fa89afdbd96bbdf1a3a1bd633b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36493,
        "upload_time": "2020-07-11T21:34:50",
        "upload_time_iso_8601": "2020-07-11T21:34:50.024013Z",
        "url": "https://files.pythonhosted.org/packages/d5/86/869868b93d2c8ee3968630e572a8b7880fb6f8b978e0b6077f4228b61dd4/uactor-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bca4f762b430720e94b3bfc5ba30ea530526973cf01bb77140fbf15f03f17f3f",
          "md5": "941c04c8068a6195ee70a3d55078a01d",
          "sha256": "be905c91e9a383195e63a9a2997b6cc897a2bf2f13923420204ce5a1f67df990"
        },
        "downloads": -1,
        "filename": "uactor-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "941c04c8068a6195ee70a3d55078a01d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 12875,
        "upload_time": "2020-07-23T17:41:52",
        "upload_time_iso_8601": "2020-07-23T17:41:52.689153Z",
        "url": "https://files.pythonhosted.org/packages/bc/a4/f762b430720e94b3bfc5ba30ea530526973cf01bb77140fbf15f03f17f3f/uactor-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4505057a4ace9d11f5bb2ed6cb41674a5040d8f52e17291fff59ba86cae08841",
          "md5": "017f84d5f9e2fe3f85ea1246cfd9ea79",
          "sha256": "a4224983c2fd54721e150f5c79626023f4d12beea8415e0d10e1c6fc9bd9edf1"
        },
        "downloads": -1,
        "filename": "uactor-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "017f84d5f9e2fe3f85ea1246cfd9ea79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 44794,
        "upload_time": "2020-07-23T17:41:54",
        "upload_time_iso_8601": "2020-07-23T17:41:54.634778Z",
        "url": "https://files.pythonhosted.org/packages/45/05/057a4ace9d11f5bb2ed6cb41674a5040d8f52e17291fff59ba86cae08841/uactor-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bca4f762b430720e94b3bfc5ba30ea530526973cf01bb77140fbf15f03f17f3f",
        "md5": "941c04c8068a6195ee70a3d55078a01d",
        "sha256": "be905c91e9a383195e63a9a2997b6cc897a2bf2f13923420204ce5a1f67df990"
      },
      "downloads": -1,
      "filename": "uactor-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "941c04c8068a6195ee70a3d55078a01d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 12875,
      "upload_time": "2020-07-23T17:41:52",
      "upload_time_iso_8601": "2020-07-23T17:41:52.689153Z",
      "url": "https://files.pythonhosted.org/packages/bc/a4/f762b430720e94b3bfc5ba30ea530526973cf01bb77140fbf15f03f17f3f/uactor-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4505057a4ace9d11f5bb2ed6cb41674a5040d8f52e17291fff59ba86cae08841",
        "md5": "017f84d5f9e2fe3f85ea1246cfd9ea79",
        "sha256": "a4224983c2fd54721e150f5c79626023f4d12beea8415e0d10e1c6fc9bd9edf1"
      },
      "downloads": -1,
      "filename": "uactor-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "017f84d5f9e2fe3f85ea1246cfd9ea79",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 44794,
      "upload_time": "2020-07-23T17:41:54",
      "upload_time_iso_8601": "2020-07-23T17:41:54.634778Z",
      "url": "https://files.pythonhosted.org/packages/45/05/057a4ace9d11f5bb2ed6cb41674a5040d8f52e17291fff59ba86cae08841/uactor-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}