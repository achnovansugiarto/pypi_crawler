{
  "info": {
    "author": "Jon Cavallie Mester",
    "author_email": "jonmester3@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\">\n    <img src=\"logo.png\" alt=\"Resiliens\"/><br/>\n    A Python package for resilient programming. <br/><br/>\n    <a href=\"https://github.com/jonmest/resiliens/actions/workflows/python-package.yml\"><img src=\"https://github.com/jonmest/resiliens/actions/workflows/python-package.yml/badge.svg\" alt=\"Build, lint and test\"/></a>\n    <a href=\"https://deepsource.io/gh/jonmest/resiliens/?ref=repository-badge\"><img src=\"https://deepsource.io/gh/jonmest/resiliens.svg/?label=active+issues&show_trend=true&token=03a2Qus_Z4mOopqLDJ2yMqdp\" alt=\"Build, lint and test\"/></a>\n</p>\n\n# About\nIf you want to make your Python code more resilient, use the Resiliens library! Quickly wrap your existing functions\nwith the `@Retryable` decorator to automatically retry on failure, and with `@CircuitBreaker` to prevent calls to the\nfunction if it has exceeded a failure limit.\n\nCurrently, there are two decorators provided:\n1. Retryable - automatically re-calls the wrapped function if an exception is raised.\n2. CircuitBreaker - prevent calls to the wrapped function if it is known to currently be failing.\n    \nThe documentation here will be brief, but hopefully you'll be able to make sense of it by reading the docstrings.\n\n## Installation\nBuilt for Python >=3.6\n```bash\npip install Resiliens\n```\n\n## 1. Retryable\nYou can use the `@Retryable` decorator on any function to automatically retry calling it in case it throws an exception. One use-case would be if you make a remote call to an external API which returns the HTTP status code 500. Maybe it's just a very temporary issue, in which case you might as well try a few more times.\n\n```python\n# Use default configuration\n@Retryable\ndef get_github():\n    res = requests.get('https://api.github.com')\n    if res.status == '500':\n        raise ThisFailedError()\n\n# Configure your own max retries, backoff time\n# between attempts, and more\n@Retryable(max_retries=5, backoff=1000)\ndef get_github():\n    requests.get('https://api.github.com')\n    if res.status == '500':\n            raise ThisFailedError()\n```\n\n## 2. CircuitBreaker\nIf you make a remote call, and it keeps failing, you may want to stop making this call to save your API usage quota or lower the response time of something that would be failing anyway. In that case, a circuit breaker comes handy.\n\nCurrently, this decorator stops calling the decorated function after a configured number of failures in a row (the circuit breaker \"opens\") and immediately returns the most recent exception instead. After a wait period, the circuit breaker allows new calls to the decorated function. You can also supply the optional argument `sliding_window_length` - then the circuit breaker will keep a sliding window of the most recent results in a list. If the number of failures in the sliding window reach the `max_attempts` threshold, the circuit breaker will open.\n\n```python\n@CircuitBreaker\ndef get_github():\n    res = requests.get('https://api.github.com')\n    if res.status == '500':\n        raise ThisFailedError()\n\n# Configure your own max failed attempts, \n# reset_timeout and more\n@CircuitBreaker(max_attempts=5, reset_timeout=1000)\ndef get_github():\n    requests.get('https://api.github.com')\n    if res.status == '500':\n            raise ThisFailedError()\n```\n# Expected exceptions\nBoth decorators have the parameter `expected_exception`. This is the exception they should consider as an expected failure, say that an API is unreachable. If that exception, or a subclass of it, gets raised in the decorated function, Retryable will retry as intended, and CircuitBreaker will count it as a failure and eventually open if it keeps getting raised. If, however, an exception gets raised that is not of that exception type, or a subclass of it, Retryably will not retry and CircuitBreaker will not count it as a failure. By default, they consider all exceptions as expected, but ideally you should set this in a more fine-grained way - e.g. ConnectionError, RequestException.\n\n# Fallback functions\nIt may be the case that a function decorated with @Retryable never succeeds despite retrying a bunch of times. By default, it will just raise the last exception. However, you can set a fallback function that gets called after all retries are exhausted, for example to provide a fallback return value or do something else.\nSame goes for @CircuitBreaker - by default, if the circuit breaker is open it just raises the most recent exception again. You can however supply a fallback function here as well.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jonmest/resiliens",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ResiliensPy",
    "package_url": "https://pypi.org/project/ResiliensPy/",
    "platform": null,
    "project_url": "https://pypi.org/project/ResiliensPy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jonmest/resiliens/issues",
      "Homepage": "https://github.com/jonmest/resiliens"
    },
    "release_url": "https://pypi.org/project/ResiliensPy/0.0.12/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python package for resilient programming.",
    "version": "0.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14827605,
  "releases": {
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f124e4c7fa715cbca8cc5f76f1e12198ef1cd94cb13b1375449ad2526ea270c5",
          "md5": "1a70377fe2a65d92bc93beb1da182a50",
          "sha256": "4d741c60a68e87160253b94c4cc176c0d2298b48f16bb925c92974a6ed587f49"
        },
        "downloads": -1,
        "filename": "ResiliensPy-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a70377fe2a65d92bc93beb1da182a50",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12074,
        "upload_time": "2022-08-21T14:06:33",
        "upload_time_iso_8601": "2022-08-21T14:06:33.338318Z",
        "url": "https://files.pythonhosted.org/packages/f1/24/e4c7fa715cbca8cc5f76f1e12198ef1cd94cb13b1375449ad2526ea270c5/ResiliensPy-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c81d5513ab3451d3775c33fce060c986945fc3675bfc6a064ec11dad7823985",
          "md5": "98006f886b8eed047fecd6dc39442a70",
          "sha256": "436e5fac7f3fdd0f88a7584e21fa07ea2f37ee1fc9b8d3ca4c87ef087dd2c21d"
        },
        "downloads": -1,
        "filename": "ResiliensPy-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "98006f886b8eed047fecd6dc39442a70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9641,
        "upload_time": "2022-08-21T14:06:35",
        "upload_time_iso_8601": "2022-08-21T14:06:35.179689Z",
        "url": "https://files.pythonhosted.org/packages/8c/81/d5513ab3451d3775c33fce060c986945fc3675bfc6a064ec11dad7823985/ResiliensPy-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "972499d4b46378fa74a16c462f5ea099f06de1ef0e5e656b22e3ada5a7393bc8",
          "md5": "f1eb081310b0ad8803fcf1779d646d94",
          "sha256": "e3b7cad3886643ff38b521fea3250bfe93ee8fc4e2b9f6f1b911a38e72dee1a6"
        },
        "downloads": -1,
        "filename": "ResiliensPy-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1eb081310b0ad8803fcf1779d646d94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12061,
        "upload_time": "2022-08-21T14:13:42",
        "upload_time_iso_8601": "2022-08-21T14:13:42.192360Z",
        "url": "https://files.pythonhosted.org/packages/97/24/99d4b46378fa74a16c462f5ea099f06de1ef0e5e656b22e3ada5a7393bc8/ResiliensPy-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55bbe21c39819f7b08dde4b46082c01cf71f3fe3907c658f4cb8dceef69179ba",
          "md5": "e4ab78566da122015eed05e1ee3b7588",
          "sha256": "3bd763fb2bf38f0601eaf48ceba877f94ec3cc876638710d9939650ed76072ce"
        },
        "downloads": -1,
        "filename": "ResiliensPy-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "e4ab78566da122015eed05e1ee3b7588",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9638,
        "upload_time": "2022-08-21T14:13:43",
        "upload_time_iso_8601": "2022-08-21T14:13:43.932991Z",
        "url": "https://files.pythonhosted.org/packages/55/bb/e21c39819f7b08dde4b46082c01cf71f3fe3907c658f4cb8dceef69179ba/ResiliensPy-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "972499d4b46378fa74a16c462f5ea099f06de1ef0e5e656b22e3ada5a7393bc8",
        "md5": "f1eb081310b0ad8803fcf1779d646d94",
        "sha256": "e3b7cad3886643ff38b521fea3250bfe93ee8fc4e2b9f6f1b911a38e72dee1a6"
      },
      "downloads": -1,
      "filename": "ResiliensPy-0.0.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1eb081310b0ad8803fcf1779d646d94",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12061,
      "upload_time": "2022-08-21T14:13:42",
      "upload_time_iso_8601": "2022-08-21T14:13:42.192360Z",
      "url": "https://files.pythonhosted.org/packages/97/24/99d4b46378fa74a16c462f5ea099f06de1ef0e5e656b22e3ada5a7393bc8/ResiliensPy-0.0.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55bbe21c39819f7b08dde4b46082c01cf71f3fe3907c658f4cb8dceef69179ba",
        "md5": "e4ab78566da122015eed05e1ee3b7588",
        "sha256": "3bd763fb2bf38f0601eaf48ceba877f94ec3cc876638710d9939650ed76072ce"
      },
      "downloads": -1,
      "filename": "ResiliensPy-0.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "e4ab78566da122015eed05e1ee3b7588",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9638,
      "upload_time": "2022-08-21T14:13:43",
      "upload_time_iso_8601": "2022-08-21T14:13:43.932991Z",
      "url": "https://files.pythonhosted.org/packages/55/bb/e21c39819f7b08dde4b46082c01cf71f3fe3907c658f4cb8dceef69179ba/ResiliensPy-0.0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}