{
  "info": {
    "author": "刘子豪",
    "author_email": "2740994541@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# facemosaic\n* 模块介绍\n* 安装方法\n* 使用方法\n* 使用实例\n* 相关网址\n---\n### 模块介绍\n该模块可以在脱机状态下识别人脸并加上马赛克。  \n该模块目前采用的深度学习框架为'caffe'。  \n该模块需要依赖opencv-python。  \n暂不支持cuda加速。  \n\n---\n### 安装方法\n在cmd窗口下输入:\n```\npip install facemosaic\n```\n\n---\n### 使用方法\n函数：  \nadd_mosaic\n>该函数用于识别图片中的人脸并加上马赛克  \n>必要参数:img 可选参数:pixel_width conf_threshold  \n>对于可选参数的说明请见下文\n>返回：  \n>会返回修改后的图像，使用cv2的imwrite函数即可保存图像  \n\nget_face\n>识别图片中的人脸位置 \n>必要参数:img 可选参数:conf_threshold  \n>img -> 通过cv2中imread函数返回的值*flags使用默认参数*  \n>conf_threshold -> 要求参数为不大于1不小于0的浮点数。该参数可规定识别的人脸形态阈值(建议不小于0.6)  \n>返回：  \n>会返回一个列表 -> [[人脸左下角横坐标, 人脸左下角纵坐标, 人脸宽度, 人脸高度], ...]（原点位于图片左下角）\n\nmosaic\n>该函数用于为图片加上马赛克  \n>必要参数:img facial_position 可选参数:pixel_width  \n>img -> 通过cv2中imread函数返回的值*flags使用默认参数*\n>facial_position -> 需要get_face函数的返回值\n>pixel_width -> 关于定义像素化部分一个色块的宽度(单位为像素)\n>返回：  \n>会返回修改后的图像，使用cv2的imwrite函数即可保存图像\n\n---\n### 使用实例\n\n1. 批量图像打码  \n```python\nimport os  # 获取图片路径\nimport cv2  # 用于读写图片\nimport facemosaic  # 用于打码的模块\nimport time  # 用于计算代码运算时间\n\nread_path = './images/'  # 原图片的文件夹\nsave_path = './save/'  #  打码后的图片文件夹\n\nst = time.time()  # 开始时间\nfor file_names in os.walk(read_path):\n    for file_name in file_names[2]:  # 获取图片文件名\n        data = facemosaic.add_mosaic(cv2.imread(read_path+file_name))  # 获取加工后的图片\n        cv2.imwrite(save_path+os.path.splitext(file_name)[0]+'.png', data)  # 保存图片\net = time.time()  # 结束时间\nprint(f'ok.it uses {et - st} s')  # 输出总用时\n```\n\n2. 实时人脸打码\n```python\nimport cv2  # 读取摄像头内容，保存视频\nimport facemosaic  # 用于打码的模块\n\ncap = cv2.VideoCapture(0)  # 打开摄像头\nvw = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))  # 获取摄像头宽\nvh = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))  # 获取摄像头高\nfps = cap.get(cv2.CAP_PROP_FPS)  # 获取视频帧率（最好根据实际每秒加工的图像数量设置否则视频会被加速或减速）\nvideo = cv2.VideoWriter('./save_cv.mp4', cv2.VideoWriter_fourcc('m', 'p', '4', 'v'), fps, (vw, vh))  # 将打码后的内容保存为视频\nwhile True:\n    ret, frame = cap.read()  # 读取图片\n    data = facemosaic.add_mosaic(frame)  # 对图像进行加工\n    cv2.imshow(\"video\", data)  # 显示打码后的图像\n    video.write(data)  # 写入数据\n    if cv2.waitKey(1) & 0xFF == ord('q'):  # 按q退出\n        break\n\ncap.release()  # 释放资源  \ncv2.destroyAllWindows()  # 关闭所有窗口\n```\n\n3. 对视频中人脸打码\n```python\nimport facemosaic\nimport time\nimport cv2\n\nst = time.time()  # 获取开始时间\ncap = cv2.VideoCapture('./test_v.mp4')  # 打开原视频\nvw = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))  # 获取原视频宽\nvh = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))  # 获取原视频高\nfps = cap.get(cv2.CAP_PROP_FPS)  # 获取原视频帧率\nvideo = cv2.VideoWriter('./save_v.mp4', cv2.VideoWriter_fourcc('m', 'p', '4', 'v'), fps, (vw, vh))  # 保存加工后的视频\n\nwhile True:\n    ret, frame = cap.read()  # 读取一帧\n    if not(ret):  # 当没有可以读取的数据后结束循环\n        break\n    video.write(facemosaic.add_mosaic(frame, pixel_width=25))  # 保存加工后的帧\n    \n\ncap.release()  # 释放资源\net = time.time()  # 结束时间\n\nprint(f'ok.it uses {et - st} s')  # 输出总运行时间\n```\n\n---\n### 相关网址\n[帮助文档](https://help.hlstudio.ren/020400.html)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://help.hlstudio.ren/020400.html",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "facemosaic",
    "package_url": "https://pypi.org/project/facemosaic/",
    "platform": "",
    "project_url": "https://pypi.org/project/facemosaic/",
    "project_urls": {
      "Homepage": "https://help.hlstudio.ren/020400.html"
    },
    "release_url": "https://pypi.org/project/facemosaic/1.1.0/",
    "requires_dist": [
      "opencv-python"
    ],
    "requires_python": ">=3",
    "summary": "自动识别图片中人脸并加上马赛克",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11034985,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b21007f6bc89200ba216fb44fed6cf79a70754013aa447797d1c201bd1c3897",
          "md5": "7000d0d99c0a3ff5bbe661c90f2a8adb",
          "sha256": "fa44194978585b04da645fd54535fa9495812c060629c998e863ef1d7dcefbad"
        },
        "downloads": -1,
        "filename": "facemosaic-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7000d0d99c0a3ff5bbe661c90f2a8adb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 5072049,
        "upload_time": "2021-07-25T11:47:18",
        "upload_time_iso_8601": "2021-07-25T11:47:18.345830Z",
        "url": "https://files.pythonhosted.org/packages/1b/21/007f6bc89200ba216fb44fed6cf79a70754013aa447797d1c201bd1c3897/facemosaic-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "689da10ae4264cb3006c70bfe3a20511d62e61cf858c1ee89684b369b0037b0d",
          "md5": "ed946516885267c627b576a6f923f580",
          "sha256": "14b0adbc1b597ca7504f0b0c47e369e722b861418e2445e8347e1975c9bddff2"
        },
        "downloads": -1,
        "filename": "facemosaic-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ed946516885267c627b576a6f923f580",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5072063,
        "upload_time": "2021-07-25T11:47:23",
        "upload_time_iso_8601": "2021-07-25T11:47:23.436762Z",
        "url": "https://files.pythonhosted.org/packages/68/9d/a10ae4264cb3006c70bfe3a20511d62e61cf858c1ee89684b369b0037b0d/facemosaic-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dc32b67a103528663b11d96a2fef2a77215da33d56a6ce298ed619e468701f8",
          "md5": "f07fba25376da0db423d693093c0e717",
          "sha256": "c5c5170751281ff62b6ec71fa7cec5d5c6815b9c8a48079dfbb89b484601bc07"
        },
        "downloads": -1,
        "filename": "facemosaic-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f07fba25376da0db423d693093c0e717",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 5073557,
        "upload_time": "2021-07-29T04:01:43",
        "upload_time_iso_8601": "2021-07-29T04:01:43.614322Z",
        "url": "https://files.pythonhosted.org/packages/5d/c3/2b67a103528663b11d96a2fef2a77215da33d56a6ce298ed619e468701f8/facemosaic-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5dc32b67a103528663b11d96a2fef2a77215da33d56a6ce298ed619e468701f8",
        "md5": "f07fba25376da0db423d693093c0e717",
        "sha256": "c5c5170751281ff62b6ec71fa7cec5d5c6815b9c8a48079dfbb89b484601bc07"
      },
      "downloads": -1,
      "filename": "facemosaic-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f07fba25376da0db423d693093c0e717",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 5073557,
      "upload_time": "2021-07-29T04:01:43",
      "upload_time_iso_8601": "2021-07-29T04:01:43.614322Z",
      "url": "https://files.pythonhosted.org/packages/5d/c3/2b67a103528663b11d96a2fef2a77215da33d56a6ce298ed619e468701f8/facemosaic-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}