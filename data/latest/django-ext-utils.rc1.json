{
  "info": {
    "author": "Andrei Koptev",
    "author_email": "akoptev1989@ya.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "Operating System :: OS Independent",
      "Topic :: Software Development"
    ],
    "description": "# Django-ext-utils\n### Useful utilities for your django project\n\n## Requirements\n+ Python >= 3.0\n+ Django >= 2.0\n+ Pillow\n+ (optional) Djangorestframework\n\n## Installation\n```commandline\npip install django-ext-utils\n```\nAdd to your settings \n`settings.py`\n\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    ...\n    'django_ext_utils', \n]\n\nSERIALIZERS_PATH = 'api.v1.serializers' # path to serializers folder\n```\n\n## Usage\n#### ResizeImageMixin\nResize image on the fly before save to `ImageField`:\n```python\nfrom django.contrib.auth.models import AbstractUser\nfrom django_ext_utils.utils import ResizeImageMixin\n\nclass User(AbstractUser, ResizeImageMixin):\n    avatar = models.ImageField(upload_to='avatars')\n    ...\n\n    def save(self, *args, **kwargs):\n        if self.pk is None:\n            self.resize(self.avatar, (200, 200)) # here!\n\n        super().save(*args, **kwargs)\n```\n\n#### DeletedModelMixin\nOn `delete` mark `is_mark_as_delete` instead \n```python\nfrom django_ext_utils.utils import DeletedModelMixin\n```\n\n#### SingletonModelMixin\nCreate only one instance of model\n```python\nfrom django_ext_utils.utils import SingletonModelMixin\n```\n\n#### Service\nService-form-oriented helper (I really like services)\n```python\nfrom django_ext_utils.utils import Service\nfrom .models import Subscription\n\n# Services/service.py\nclass AddSubscriptionService(Service):\n    def go(self):\n        email = self.cleaned_data.get('email')\n        name = self.cleaned_data.get('name')\n\n        subscription, created = Subscription.objects.get_or_create(\n            email = email,\n            defaults = {\n                'name': name\n            }\n        )\n        if created:\n            # notify user\n            ......\n        return subscription\n\n# views.py       \nsubscription = NotificationService.exec({\n    'email': 'foo@example.com',\n    'name': 'foo'\n})\n...\nreturn Response(subscription.serialize_data)\n```\n\n### Rest api helpers\n#### ResponsesMixin\n* wrapper for `rest_framework.Response` with statuses\n* `simple_text_response` return text with `200` code\n* `success_objects_response` return object with `200` code\n* `error_response` return `Error` object with `400` code\n\n```python\nclass UserProfileViewSet(ResponsesMixin, GenericAPIView):\n    serializer_class = UserSerializer\n\n    def post(self, request, *args, **kwargs):\n        user = request.user\n        serializer = UserSerializer(instance=request.user,\n                                    data=request.data,\n                                    context={'request': request})\n        if serializer.is_valid():\n            serializer.save()\n            return self.success_objects_response(serializer.data) # here\n\n        return self.error_response(serializer.errors) # here\n\n    def get(self, request, *args, **kwargs):\n        user = request.user\n        data = user._serialize_data(request)\n\n        return self.success_objects_response(data) # here\n```\n##### Base\nAbstract class to help serialize your models\n* get_serializer # Return serializer by name (**Model**Serializer)\n* get_short_serializer # Retrun another serializer by name (**Model**ShortSerializer)\n* serialize_data # Find serializer by name and return `serialize data`\n* _serialize_data(request)  # Find serializer by name and serialize data with `request`\n\n* IMPORTANT: you must create serializer by rule: **ModelName**Serializer or **ModelName**ShortSerializer\n```python\nfrom django_ext_utils.rest_utils import Base\n\n# models.py\nclass User(AbstractUser, Base,  ResizeImageMixin):\n    avatar = models.ImageField(upload_to='avatars')\n    ....\n\n# serializer.py\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\n            'pk',\n            'first_name',\n            'last_name'\n        ]\n\n# views.py\nfrom rest_framework.generics import GenericAPIView\n\nclass UserApiView(GenericAPIView):\n    def get(self, request, *args, **kwargs):\n        user = request.user\n        data = user._serialize_data(request) # here!\n        return self.success_objects_response(data)\n```\n\n#### ImageBase64Field\n* Wrapper for `serializers.ImageField()`\n* Got `base64` string and save in model `ImageField`\n* Return `link to image` (http://example.com/media/avatars/my.jpeg)\n\n```python\n# serializer.py\n\nclass SomeUserApiView(serializers.ModelSerializer):\n    image = ImageBase64Field()\n    created_at = TimestampField(read_only=True)\n\n    class Meta:\n        model = User\n        fields = [\n            'uid',\n            'image',\n            'created_at'\n        ]\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/a1k89/django-ext-utils",
    "keywords": "django rest utils",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ext-utils",
    "package_url": "https://pypi.org/project/django-ext-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-ext-utils/",
    "project_urls": {
      "Homepage": "https://github.com/a1k89/django-ext-utils"
    },
    "release_url": "https://pypi.org/project/django-ext-utils/0.0.1/",
    "requires_dist": [
      "Django (>=2.0)",
      "Pillow",
      "djangorestframework (>=3.0) ; extra == 'with_rest'"
    ],
    "requires_python": "",
    "summary": "Useful utilities for your django project",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9475118,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3647505ea7a2908c803258b9301100bb70d65c66b5d4930447ff942e827ebe7c",
          "md5": "10668d4946ee22276283b165f4b7898a",
          "sha256": "ef05b346c6081b8239cb79b8ad21c237fd10fe92791f5e105db9674b33dba9e7"
        },
        "downloads": -1,
        "filename": "django_ext_utils-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10668d4946ee22276283b165f4b7898a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5962,
        "upload_time": "2021-02-20T11:21:49",
        "upload_time_iso_8601": "2021-02-20T11:21:49.903032Z",
        "url": "https://files.pythonhosted.org/packages/36/47/505ea7a2908c803258b9301100bb70d65c66b5d4930447ff942e827ebe7c/django_ext_utils-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b40f925de0a610855d7e562b061c55f850989d6c8a5e1b2456c72f4c0a500a8f",
          "md5": "60df11287f14e5ce3ee102e7de157ef2",
          "sha256": "beab27c128414fc7aa0a0c181e728e8702b48108e291fd52a6d474c36b34b90c"
        },
        "downloads": -1,
        "filename": "django-ext-utils-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60df11287f14e5ce3ee102e7de157ef2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5741,
        "upload_time": "2021-02-20T11:21:51",
        "upload_time_iso_8601": "2021-02-20T11:21:51.381003Z",
        "url": "https://files.pythonhosted.org/packages/b4/0f/925de0a610855d7e562b061c55f850989d6c8a5e1b2456c72f4c0a500a8f/django-ext-utils-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3647505ea7a2908c803258b9301100bb70d65c66b5d4930447ff942e827ebe7c",
        "md5": "10668d4946ee22276283b165f4b7898a",
        "sha256": "ef05b346c6081b8239cb79b8ad21c237fd10fe92791f5e105db9674b33dba9e7"
      },
      "downloads": -1,
      "filename": "django_ext_utils-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10668d4946ee22276283b165f4b7898a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5962,
      "upload_time": "2021-02-20T11:21:49",
      "upload_time_iso_8601": "2021-02-20T11:21:49.903032Z",
      "url": "https://files.pythonhosted.org/packages/36/47/505ea7a2908c803258b9301100bb70d65c66b5d4930447ff942e827ebe7c/django_ext_utils-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b40f925de0a610855d7e562b061c55f850989d6c8a5e1b2456c72f4c0a500a8f",
        "md5": "60df11287f14e5ce3ee102e7de157ef2",
        "sha256": "beab27c128414fc7aa0a0c181e728e8702b48108e291fd52a6d474c36b34b90c"
      },
      "downloads": -1,
      "filename": "django-ext-utils-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "60df11287f14e5ce3ee102e7de157ef2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5741,
      "upload_time": "2021-02-20T11:21:51",
      "upload_time_iso_8601": "2021-02-20T11:21:51.381003Z",
      "url": "https://files.pythonhosted.org/packages/b4/0f/925de0a610855d7e562b061c55f850989d6c8a5e1b2456c72f4c0a500a8f/django-ext-utils-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}