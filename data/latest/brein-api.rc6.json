{
  "info": {
    "author": "Breinify",
    "author_email": "toddbodnar@breinify.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/Breinify/brein-api-library-python/master/documentation/img/logo250px.png\n    :align: center\n    :alt: Breinify API Python Library\n\n.. class:: center\n\nBreinify's DigitalDNA API puts dynamic behavior-based, people-driven data right at your fingertips.\n\n\nStep By Step Introductions\n==========================\n\nWhat is Breinify's DigitialDNA\n------------------------------\n\nBreinify's DigitalDNA API puts dynamic behavior-based, people-driven data right at your fingertips. We believe that in many situations, a critical component of a great user experience is personalization. With all the data available on the web it should be easy to provide a unique experience to every visitor, and yet, sometimes you may find yourself wondering why it is so difficult.\n\nThanks to **Breinify's DigitalDNA** you are now able to adapt your online presence to your visitors needs and **provide a unique experience**. Let's walk step-by-step through a simple example.\n\nQuick start\n===========\n\nStep 1: Download the Library\n----------------------------\nDownload the library from PyPi and install it with\n\n.. code:: bash\n\n    pip3 install breinify-api\n\nor download the source from github and run\n\n.. code:: python\n\n    python3 setup.py install\n\n\nStep 2: Integrate the library\n-----------------------------\nIntegrate the Library into your Python 3 project by importing the library in the relevant blocks of code.\n\n.. code:: python\n\n    import breinify\n\n\n\nStep 3: Configure the library\n-----------------------------\n\nIn order to use the library you need a valid API-key, which you can get for free at https://www.breinify.com. In this example, we assume you have the following api-key:\n\n**772A-47D7-93A3-4EA9-9D73-85B9-479B-16C6**\n\n.. code:: python\n\n    ##this is a valid API key\n    apiKey = \"938D-3120-64DD-413F-BB55-6573-90CE-473A\"\n\n    brein = Breinify(apiKey)\n\n\nThe Breinify class is now configured with a valid configuration object.\n\n\nStep 4: Start using the library\n-------------------------------\n\nPlacing activity triggers\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe engine powering the DigitalDNA API provides three endpoints. The first endpoint is used to inform the engine about the activities performed by visitors of your site. The activities are used to understand the user's current interest and infer the intent. It becomes more and more accurate across different users and verticals as more activities are collected. It should be noted, that any personal information is not stored within the engine, thus each individual's privacy is well protected. The engine understands several different activities performed by a user, e.g., landing, login, search, item selection, or logout.\n\nFor this example, pretend that a user named \"John Doe\" is logged in to your site with his email address (john.doe@email.com) is viewing the page \"www.example.com\". You can log this by executing:\n\n.. code:: python\n\n    from breinify import User\n    #create a user you are interested in with their email and last name\n    example_user = User(email=\"john.doe@email.com\")\n\n    brein.send_activity(example_user, \"pageView\", url=\"www.example.com\")\n\nThe call will then be run asynchronously in the background.\n\nTemporal Data Lookup\n^^^^^^^^^^^^^^^^^^^^\n\n\nLooking Up a User's Location's Info\n+++++++++++++++++++++++++++++++++++\n\nYou may want to customize the user's experience based on where they are. For example calling\n.. code:: python\n\n    #create a user you are interested in based on their ip. Other fields (coordinates, time, etc) can also be included\n    example_user = User(ip=\"143.127.128.10\")\n\n    result = brein.temporal_data(example_user)\n\nwill result in a dictionary of timely information for the location the ip address resolves to (San Jose), for example:\n\n.. code:: python\n\n    #wrap the result in json.dumps() for readability\n    print(json.dumps(result,indent=4))\n\n    {\n        \"time\": {\n            \"epochDayName\": \"Monday\",\n            \"localYear\": 2016,\n            \"epoch\": 1477945062,\n            \"timezone\": \"America/Los_Angeles\",\n            \"localDay\": 31,\n            \"epochSecond\": 42,\n            \"epochMinute\": 17,\n            \"epochDay\": 31,\n            \"localMonth\": 10,\n            \"localMinute\": 17,\n            \"localDayName\": \"Monday\",\n            \"epochHour\": 20,\n            \"epochMonth\": 10,\n            \"epochYear\": 2016,\n            \"localFormatIso8601\": \"2016-10-31T13:17:42-07:00\",\n            \"localSecond\": 42,\n            \"localHour\": 13,\n            \"epochFormatIso8601\": \"2016-10-31T20:17:42+00:00\"\n        },\n        \"holidays\": [\n            {\n                \"source\": \"United Nations\",\n                \"types\": [\n                    \"SPECIAL_DAY\"\n                ],\n                \"holiday\": \"World Cities Day\"\n            },\n            {\n                \"source\": \"Public Information\",\n                \"types\": [\n                    \"HALLMARK\"\n                ],\n                \"holiday\": \"Halloween\"\n            }\n        ],\n        \"weather\": {\n            \"lastMeasured\": 1477935065,\n            \"precipitation\": {\n                \"precipitationType\": \"none\",\n                \"precipitationAmount\": 0.0\n            },\n            \"windStrength\": 1.4,\n            \"cloudCover\": 48.0,\n            \"temperature\": 13.161000000000001,\n            \"description\": \"scattered clouds\",\n            \"measuredAt\": {\n                \"lon\": -121.767731,\n                \"lat\": 37.23328\n            }\n        },\n        \"location\": {\n            \"country\": \"US\",\n            \"granularity\": \"city\",\n            \"city\": \"San Jose\",\n            \"lon\": -121.827179,\n            \"lat\": 37.366051,\n            \"state\": \"CA\"\n        }\n    }\n\nLooking Up Information About a Location\n+++++++++++++++++++++++++++++++++++++++\n\nInstead of looking up information based off a user's location, you can just supply the location's information directly.\nFor example, you could get yesterday's weather in San Francisco by running:\n\n.. code:: python\n\n    from breinify import Breinify\n    import time\n    import math\n\n    apiKey = \"938D-3120-64DD-413F-BB55-6573-90CE-473A\"\n\n    brein = Breinify(apiKey)\n\n    yesterday = math.floor(time.time()) - 24*60*60\n\n    result = brein.temporal_data(location_free_text=\"San Francisco, CA\", unixtime = yesterday)\n\n    print(\"Yesterday in %s, the weather was %s with a temperature of %d F.\"%(result['location']['city'], result['weather']['description'], result['weather']['temperatureF']))\n\nWhich will print something similar to \"Yesterday in San Francisco, the weather was overcast clouds with a temperature of 64 F.\"\n\nFurther links\n-------------\n\nTo understand all the capabilities of Breinify's DigitalDNA API, take a look at:\n\n\n*  `Breinify's Website`__.\n\n.. __: https://www.breinify.com",
    "description_content_type": "",
    "docs_url": "https://pythonhosted.org/brein-api/",
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Breinify/brein-api-library-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "brein-api",
    "package_url": "https://pypi.org/project/brein-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/brein-api/",
    "project_urls": {
      "Homepage": "https://github.com/Breinify/brein-api-library-python"
    },
    "release_url": "https://pypi.org/project/brein-api/1.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Access to Breinify's DigitalDNA API",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6535241,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dddbdbc874b1146de13b06918297f5fc6d9a60e799c7af1801f9ffb61f9f08aa",
          "md5": "d40139c67aa2feb7cc7ecd6b53a5e8a6",
          "sha256": "d1530e6270d28b08113bea203f0ec9453789e8fbf4a55490d9bb44345f30cbc3"
        },
        "downloads": -1,
        "filename": "brein-api-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d40139c67aa2feb7cc7ecd6b53a5e8a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 270955,
        "upload_time": "2016-08-08T18:24:42",
        "upload_time_iso_8601": "2016-08-08T18:24:42.474030Z",
        "url": "https://files.pythonhosted.org/packages/dd/db/dbc874b1146de13b06918297f5fc6d9a60e799c7af1801f9ffb61f9f08aa/brein-api-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9a42fc28b40754c6d72fd378860b0bfcf054ea47e28e2d068a3ec8152f67b8a",
          "md5": "8c4ebf2c0b8aa75ec9d81abcdf056fb2",
          "sha256": "88ae3fb222d3d43561f1044a23b31698116cc4646a9bccfb2aed344c49cb08db"
        },
        "downloads": -1,
        "filename": "brein-api-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8c4ebf2c0b8aa75ec9d81abcdf056fb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 271181,
        "upload_time": "2016-09-06T23:11:32",
        "upload_time_iso_8601": "2016-09-06T23:11:32.860893Z",
        "url": "https://files.pythonhosted.org/packages/c9/a4/2fc28b40754c6d72fd378860b0bfcf054ea47e28e2d068a3ec8152f67b8a/brein-api-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a1befe6f48e5450d6073cea8913ea28875a8cea7510de221c00081a7bf31b2c",
          "md5": "a71d05b1e8191711d9ee88d0633e94a5",
          "sha256": "2e606ca5f084a4683330a1f9529fc07e9717fb480ea94481b3a176342a921e9f"
        },
        "downloads": -1,
        "filename": "brein_api-1.2.2-py3.egg",
        "has_sig": false,
        "md5_digest": "a71d05b1e8191711d9ee88d0633e94a5",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "requires_python": null,
        "size": 12929,
        "upload_time": "2016-11-03T20:33:59",
        "upload_time_iso_8601": "2016-11-03T20:33:59.810814Z",
        "url": "https://files.pythonhosted.org/packages/9a/1b/efe6f48e5450d6073cea8913ea28875a8cea7510de221c00081a7bf31b2c/brein_api-1.2.2-py3.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "877c95230855995c222b24624de1e8c86e5172f383ede012086034dd0691c87e",
          "md5": "8e5541adcb625cf256db9a215796db76",
          "sha256": "a1f0c63b5dd6fa4420963dc78885b2a6864ca6368333dc5635b306aa8faf718c"
        },
        "downloads": -1,
        "filename": "brein_api-1.3.0-py3.5.egg",
        "has_sig": false,
        "md5_digest": "8e5541adcb625cf256db9a215796db76",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "requires_python": null,
        "size": 18071,
        "upload_time": "2020-01-29T00:11:04",
        "upload_time_iso_8601": "2020-01-29T00:11:04.262306Z",
        "url": "https://files.pythonhosted.org/packages/87/7c/95230855995c222b24624de1e8c86e5172f383ede012086034dd0691c87e/brein_api-1.3.0-py3.5.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "877c95230855995c222b24624de1e8c86e5172f383ede012086034dd0691c87e",
        "md5": "8e5541adcb625cf256db9a215796db76",
        "sha256": "a1f0c63b5dd6fa4420963dc78885b2a6864ca6368333dc5635b306aa8faf718c"
      },
      "downloads": -1,
      "filename": "brein_api-1.3.0-py3.5.egg",
      "has_sig": false,
      "md5_digest": "8e5541adcb625cf256db9a215796db76",
      "packagetype": "bdist_egg",
      "python_version": "3.5",
      "requires_python": null,
      "size": 18071,
      "upload_time": "2020-01-29T00:11:04",
      "upload_time_iso_8601": "2020-01-29T00:11:04.262306Z",
      "url": "https://files.pythonhosted.org/packages/87/7c/95230855995c222b24624de1e8c86e5172f383ede012086034dd0691c87e/brein_api-1.3.0-py3.5.egg",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}