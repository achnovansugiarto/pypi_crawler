{
  "info": {
    "author": "Rustle Karl",
    "author_email": "fu.jiawei@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<!--\n * @Date: 2021.02.30 17:30:51\n * @LastEditors: Rustle Karl\n * @LastEditTime: 2021.05.25 08:27:32\n-->\n\n# FFmpeg Generator\n\n> A FFmpeg command generator and actuator.\n\nPython bindings for FFmpeg - with almost all filters support, even `gltransition` filter.\n\n- [FFmpeg Generator](#ffmpeg-generator)\n  - [Overview](#overview)\n  - [TODO](#todo)\n  - [Installation](#installation)\n  - [Documents](#documents)\n  - [GLTransition Filter](#gltransition-filter)\n  - [Video Sources](#video-sources)\n    - [Play by FFplay](#play-by-ffplay)\n    - [Preview by FFmpeg](#preview-by-ffmpeg)\n    - [Save Video from video sources](#save-video-from-video-sources)\n  - [More Examples](#more-examples)\n    - [Get Stream Info](#get-stream-info)\n    - [Play a Video](#play-a-video)\n    - [Generate Thumbnail for Video](#generate-thumbnail-for-video)\n    - [Convert Video to Numpy Array](#convert-video-to-numpy-array)\n    - [Read Single Video Frame as JPEG](#read-single-video-frame-as-jpeg)\n    - [Convert Sound to Raw PCM Audio](#convert-sound-to-raw-pcm-audio)\n    - [Assemble Video from Sequence of Frames](#assemble-video-from-sequence-of-frames)\n    - [Audio/Video Pipeline](#audiovideo-pipeline)\n    - [Mono to Stereo with Offsets and Video](#mono-to-stereo-with-offsets-and-video)\n    - [Process Frames](#process-frames)\n    - [FaceTime Webcam Input](#facetime-webcam-input)\n    - [Stream from a Local Video to HTTP Server](#stream-from-a-local-video-to-http-server)\n    - [Stream from RTSP Server to TCP Socket](#stream-from-rtsp-server-to-tcp-socket)\n  - [Special Thanks](#special-thanks)\n\n## Overview\n\nThis project is based on [`ffmpeg-python`](https://github.com/kkroening/ffmpeg-python). But rewrite all.\n\n- support video sources\n- support almost all filters\n- support FFplay&FFprobe\n- enable cuda hwaccel by default, or close globally by code below\n\n```python\nfrom ffmpeg import settings\n\nsettings.CUDA_ENABLE = False\n```\n\n## Installation\n\n```shell\npip install -U ffmpeg-generator\n```\n\n## Documents\n\nFFmpeg comes with more than 450 audio and video media filters. \nIt is recommended to read the official documentation.\n\n- [FFmpeg Homepage](https://ffmpeg.org/)\n- [FFmpeg Documentation](https://ffmpeg.org/ffmpeg.html)\n- [FFmpeg Filters Documentation](https://ffmpeg.org/ffmpeg-filters.html)\n\nOr read my study notes, plan to demonstrate all the filters, but written in Chinese. Not all done yet.\n\n- [All Examples for Audio Filters](docs/afilters.md)\n- [All Examples for Video Filters](docs/vfilters.md)\n- [All Examples for Audio/Video Sources](docs/sources.md)\n- [All Examples for Media Filters](docs/avfilters.md)\n- [Introduce Usage of FFplay](docs/ffplay.md)\n- [More Notes](https://github.com/studying-notes/ffmpeg-notes)\n\n## GLTransition Filter\n\n```python\nfrom ffmpeg import avfilters, input, vfilters, vtools\nfrom ffmpeg.transitions import GLTransition, GLTransitionAll\nfrom tests import data\n\n# OpenGL Transition\n\n\"\"\"Combine two videos with transition effects.\"\"\"\n\nfor e in GLTransitionAll:\n    vtools.concat_2_videos_with_gltransition(data.TEST_OUTPUTS_DIR / (e + \".mp4\"),\n                                             data.SHORT0, data.SHORT1, offset=1,\n                                             duration=2, source=eval(\"transitions.\" + e))\n\n\"\"\"Combine multiple videos with transition effects.\"\"\"\n\nin0 = input(data.SHORT0).video\nin1 = input(data.SHORT1).video\nin2 = input(data.SHORT2).video\n\nin0_split = in0.split()\nin0_0, in0_1 = in0_split[0], in0_split[1]\nin0_0 = in0_0.trim(start=0, end=3)\nin0_1 = in0_1.trim(start=3, end=4).setpts()\n\nin1_split = in1.split()\nin1_0, in1_1 = in1_split[0], in1_split[1]\nin1_0 = in1_0.trim(start=0, end=3)\nin1_1 = in1_1.trim(start=3, end=4).setpts()\n\nin2_split = in2.split()\nin2_0, in2_1 = in2_split[0], in2_split[1]\nin2_0 = in2_0.trim(start=0, end=3)\nin2_1 = in2_1.trim(start=3, end=4).setpts()\n\ngl0_1 = vfilters.gltransition(in0_1, in1_0, source=GLTransition.Angular)\ngl1_2 = vfilters.gltransition(in1_1, in2_0, source=GLTransition.ButterflyWaveScrawler)\n\n# transition\n_ = avfilters.concat(in0_0, gl0_1, gl1_2, in2_1).output(\n        data.TEST_OUTPUTS_DIR / \"3_transition.mp4\",\n        vcodec=\"libx264\",\n        v_profile=\"baseline\",\n        preset=\"slow\",\n        movflags=\"faststart\",\n        pixel_format=\"yuv420p\",\n).run()\n\n# transition + image watermark\nv_input = avfilters.concat(in0_0, gl0_1, gl1_2, in2_1)\ni_input = input(data.I1).scale(w=100, h=100)\nv_input.overlay(i_input, x=30, y=30).output(\n        data.TEST_OUTPUTS_DIR / \"3_transition_image.mp4\",\n        vcodec=\"libx264\",\n        v_profile=\"baseline\",\n        preset=\"slow\",\n        movflags=\"faststart\",\n        pixel_format=\"yuv420p\",\n).run()\n\n# transition + image watermark + text watermark\nv_input = avfilters.concat(in0_0, gl0_1, gl1_2, in2_1). \\\n    drawtext(text=\"Watermark\", x=150, y=150, fontsize=36, fontfile=data.FONT1)\ni_input = input(data.I1).scale(w=100, h=100)\nv_input.overlay(i_input, x=30, y=30).output(\n        data.TEST_OUTPUTS_DIR / \"3_transition_image_text.mp4\",\n        vcodec=\"libx264\",\n        v_profile=\"baseline\",\n        preset=\"slow\",\n        movflags=\"faststart\",\n        pixel_format=\"yuv420p\",\n).run()\n\n# transition + image watermark + text watermark + music\nv_input = avfilters.concat(in0_0, gl0_1, gl1_2, in2_1). \\\n    drawtext(text=\"Watermark\", x=150, y=150, fontsize=36, fontfile=data.FONT1)\ni_input = input(data.I1).scale(w=100, h=100)\na_input = input(data.A1).audio\nv_input.overlay(i_input, x=30, y=30).output(\n        a_input,\n        data.TEST_OUTPUTS_DIR / \"3_transition_image_text_music.mp4\",\n        acodec=\"copy\",\n        vcodec=\"libx264\",\n        v_profile=\"baseline\",\n        shortest=True,\n        preset=\"slow\",\n        movflags=\"faststart\",\n        pixel_format=\"yuv420p\",\n).run()\n```\n\n## Video Sources\n\n### Play by FFplay\n\n```python\nfrom ffmpeg import run_ffplay\n\n_ = run_ffplay(\"allrgb\", f=\"lavfi\")\n_ = run_ffplay(\"allyuv\", f=\"lavfi\")\n_ = run_ffplay(\"color=c=red@0.2:s=1600x900:r=10\", f=\"lavfi\")\n_ = run_ffplay(\"haldclutsrc\", f=\"lavfi\")\n_ = run_ffplay(\"pal75bars\", f=\"lavfi\")\n_ = run_ffplay(\"allyuv\", f=\"lavfi\")\n_ = run_ffplay(\"allyuv\", f=\"lavfi\")\n_ = run_ffplay(\"rgbtestsrc=size=900x600:rate=60\", f=\"lavfi\")\n_ = run_ffplay(\"smptebars=size=900x600:rate=60\", f=\"lavfi\")\n_ = run_ffplay(\"smptehdbars=size=900x600:rate=60\", f=\"lavfi\")\n_ = run_ffplay(\"testsrc=size=900x600:rate=60\", f=\"lavfi\")\n_ = run_ffplay(\"testsrc2=s=900x600:rate=60\", f=\"lavfi\")\n_ = run_ffplay(\"yuvtestsrc=s=900x600:rate=60\", f=\"lavfi\")\n```\n\n### Preview by FFmpeg\n\n```python\nfrom ffmpeg import input_source\n\n_ = input_source(\"testsrc\", size=\"900x600\", rate=60).output(preview=True).run_async()\n_ = input_source(\"testsrc2\", size=\"900x600\", rate=60).output(preview=True).run_async()\n```\n\n### Save Video from video sources\n\n```python\nfrom ffmpeg import input_source\n\n_ = input_source(\"testsrc\", size=\"900x600\", rate=60, duration=30).output(\"source_testsrc.mp4\").run()\n```\n\n## More Examples\n\n### Get Stream Info\n\n```python\nfrom ffmpeg import FFprobe\n\nmeta = FFprobe(\"path/to/file\")\n\n# all stream\nprint(meta.metadata)\n\n# video stream\nprint(meta.video)\nprint(meta.video_duration)\nprint(meta.video_scale)\n\n# audio stream\nprint(meta.audio)\nprint(meta.audio_duration)\n```\n\n### Play a Video\n\n```python\nfrom ffmpeg import ffplay_video\nfrom tests import data\n\nffplay_video(data.V1, vf='transpose=1')\nffplay_video(data.V1, vf='hflip')\nffplay_video(data.V1, af='atempo=2')\nffplay_video(data.V1, vf='setpts=PTS/2')\nffplay_video(data.V1, vf='transpose=1,setpts=PTS/2', af='atempo=2')\n```\n\n### Generate Thumbnail for Video\n\n```python\nfrom ffmpeg import vtools\n\nvtools.generate_video_thumbnail(src=\"src\", dst=\"dst\", start_position=3, width=400, height=-1)\n```\n\n### Convert Video to Numpy Array\n\n```python\nfrom ffmpeg import vtools\n\nvtools.convert_video_to_np_array(src=\"src\")\n```\n\n### Read Single Video Frame as JPEG\n\n```python\nfrom ffmpeg import vtools\n\nvtools.read_frame_as_jpeg(src=\"src\", frame=10)\n```\n\n### Convert Sound to Raw PCM Audio\n\n```python\nfrom ffmpeg import atools\n\naudio = '/path/to/audio.m4a'\ndst = '/path/to/dst.pcm'\n\natools.convert_audio_to_raw_pcm(src=audio, dst=None)\natools.convert_audio_to_raw_pcm(src=audio, dst=dst)\n```\n\n### Assemble Video from Sequence of Frames\n\n```python\nfrom ffmpeg import vtools\n\n# on Linux\nvtools.assemble_video_from_images('/path/to/jpegs/*.jpg', pattern_type='glob', frame_rate=25)\n\n# on Windows\nvtools.assemble_video_from_images('/path/to/jpegs/%02d.jpg', pattern_type=None, frame_rate=25)\n```\n\n> https://stackoverflow.com/questions/31201164/ffmpeg-error-pattern-type-glob-was-selected-but-globbing-is-not-support-ed-by\n\nWith additional filtering:\n\n```python\nimport ffmpeg\n\nffmpeg.input('/path/to/jpegs/*.jpg', pattern_type='glob', framerate=25). \\\n    filter('deflicker', mode='pm', size=10). \\\n    filter('scale', size='hd1080', force_original_aspect_ratio='increase'). \\\n    output('movie.mp4', crf=20, preset='slower', movflags='faststart', pix_fmt='yuv420p'). \\\n    view(save_path='filter_graph').run()\n```\n\n### Audio/Video Pipeline\n\n```python\nimport ffmpeg\nfrom ffmpeg import avfilters\n\nin1 = ffmpeg.input(\"input.mp4\")\nin2 = ffmpeg.input(\"input.mp4\")\n\nv1 = in1.video.hflip()\na1 = in2.audio\n\nv2 = in2.video.reverse().hue(s=0)\na2 = in2.audio.areverse().aphaser()\n\njoined = avfilters.concat(v1, a1, v2, a2, v=1, a=1).Node\n\nv3 = joined[0]\na3 = joined[1].volume(0.8)\n\nv3.output(a3, 'v1_v2_pipeline.mp4').run()\n```\n\n### Mono to Stereo with Offsets and Video\n\n```python\nimport ffmpeg\nfrom ffmpeg import afilters\nfrom tests import data\n\ninput_video = ffmpeg.input(data.V1)\naudio_left = ffmpeg.input(data.A1).atrim(start=15).asetpts(\"PTS-STARTPTS\")\naudio_right = ffmpeg.input(data.A1).atrim(start=10).asetpts(\"PTS-STARTPTS\")\n\nafilters.join(audio_left, audio_right, inputs=2, channel_layout=\"stereo\"). \\\n    output(input_video.video, \"stereo_video.mp4\", shortest=None, vcodec=\"copy\").run()\n```\n\n### Process Frames\n\n- Decode input video with ffmpeg\n- Process each video frame with python\n- Encode output video with ffmpeg\n\n```python\nimport subprocess\n\nimport numpy as np\n\nfrom ffmpeg import constants, FFprobe, input, settings\nfrom tests import data\n\nsettings.CUDA_ENABLE = False\n\n\ndef ffmpeg_input_process(src):\n    return input(src).output(constants.PIPE, format=\"rawvideo\",\n                             pixel_format=\"rgb24\").run_async(pipe_stdout=True)\n\n\ndef ffmpeg_output_process(dst, width, height):\n    return input(constants.PIPE, format=\"rawvideo\", pixel_format=\"rgb24\",\n                 width=width, height=height).output(dst, pixel_format=\"yuv420p\"). \\\n        run_async(pipe_stdin=True)\n\n\ndef read_frame_from_stdout(process: subprocess.Popen, width, height):\n    frame_size = width * height * 3\n    input_bytes = process.stdout.read(frame_size)\n\n    if not input_bytes:\n        return\n\n    assert len(input_bytes) == frame_size\n\n    return np.frombuffer(input_bytes, np.uint8).reshape([height, width, 3])\n\n\ndef process_frame_simple(frame):\n    # deep dream\n    return frame * 0.3\n\n\ndef write_frame_to_stdin(process: subprocess.Popen, frame):\n    process.stdin.write(frame.astype(np.uint8).tobytes())\n\n\ndef run(src, dst, process_frame):\n    width, height = FFprobe(src).video_scale\n\n    input_process = ffmpeg_input_process(src)\n    output_process = ffmpeg_output_process(dst, width, height)\n\n    while True:\n        input_frame = read_frame_from_stdout(input_process, width, height)\n\n        if input_frame is None:\n            break\n\n        write_frame_to_stdin(output_process, process_frame(input_frame))\n\n    input_process.wait()\n\n    output_process.stdin.close()\n    output_process.wait()\n\n\nif __name__ == '__main__':\n    run(data.SHORT0, data.TEST_OUTPUTS_DIR / \"process_frame.mp4\", process_frame_simple)\n```\n\n### FaceTime Webcam Input\n\n```python\nimport ffmpeg\n\ndef facetime():\n    ffmpeg.input(\"FaceTime\", format=\"avfoundation\",\n                 pixel_format=\"uyvy422\", framerate=30). \\\n        output(\"facetime.mp4\", pixel_format=\"yuv420p\", frame_size=100).run()\n```\n\n### Stream from a Local Video to HTTP Server\n\n```python\nfrom ffmpeg import input\n\ninput(\"video.mp4\").output(\"http://127.0.0.1:8080\",\n                      codec=\"copy\",  # use same codecs of the original video\n                      listen=1,  # enables HTTP server\n                      f=\"flv\").\\\n    with_global_args(\"-re\").\\\n    run()  # argument to act as a live stream\n```\n\nTo receive the video you can use ffplay in the terminal:\n\n```shell\nffplay -f flv http://localhost:8080\n```\n\n### Stream from RTSP Server to TCP Socket\n\n```python\nimport socket\nfrom ffmpeg import input\n\nserver = socket.socket()\nprocess = input('rtsp://%s:8554/default').\\\n    output('-', format='h264').\\\n    run_async(pipe_stdout=True)\n\nwhile process.poll() is None:\n    packet = process.stdout.read(4096)\n    try:\n        server.send(packet)\n    except socket.error:\n        process.stdout.close()\n        process.wait()\n        break\n```\n\n## Special Thanks\n\n- [The FFmpeg-Python Project](https://github.com/kkroening/ffmpeg-python)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fujiawei-dev/ffmpeg-generator",
    "keywords": "ffmpeg,ffprobe,ffplay",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ffmpeg-generator",
    "package_url": "https://pypi.org/project/ffmpeg-generator/",
    "platform": "",
    "project_url": "https://pypi.org/project/ffmpeg-generator/",
    "project_urls": {
      "Homepage": "https://github.com/fujiawei-dev/ffmpeg-generator"
    },
    "release_url": "https://pypi.org/project/ffmpeg-generator/1.0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python bindings for FFmpeg - with almost all filters support, even `gltransition` filter.",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10975858,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7afc630cca75f50566e7c67fee69a007ae0f6837451a031e3101525965abdb35",
          "md5": "82dd2bd0360ef28574dda80c30f4be1d",
          "sha256": "c01ff8e0819f1abafe44bd74cca6a385a3ea7d739660059299eb9a7147d620b4"
        },
        "downloads": -1,
        "filename": "ffmpeg-generator-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "82dd2bd0360ef28574dda80c30f4be1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48711,
        "upload_time": "2021-05-04T05:11:21",
        "upload_time_iso_8601": "2021-05-04T05:11:21.350779Z",
        "url": "https://files.pythonhosted.org/packages/7a/fc/630cca75f50566e7c67fee69a007ae0f6837451a031e3101525965abdb35/ffmpeg-generator-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05f85421d2dfa7a1b60613c81b5dcad751c39f9fcc0e6e3d90f0392c0d76381e",
          "md5": "27fc0b9c1cf44a01449f2b2fa7aa71d3",
          "sha256": "202efd818288efb0c8bf9861c17b3b513ef5c63acead4e4f88ae6ab9a3c7b1d5"
        },
        "downloads": -1,
        "filename": "ffmpeg-generator-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "27fc0b9c1cf44a01449f2b2fa7aa71d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48935,
        "upload_time": "2021-05-08T00:43:15",
        "upload_time_iso_8601": "2021-05-08T00:43:15.185670Z",
        "url": "https://files.pythonhosted.org/packages/05/f8/5421d2dfa7a1b60613c81b5dcad751c39f9fcc0e6e3d90f0392c0d76381e/ffmpeg-generator-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74cbf042a5983c0864293d79766265d8d2d296b346c43eb3226423e89d7e099f",
          "md5": "7f8c822c2284fa769ed2e5a7eb741573",
          "sha256": "3bfcd0fa3a70ce45f2f67ecc5a3269aa5411465783df7c5071ad7dd467cf470a"
        },
        "downloads": -1,
        "filename": "ffmpeg-generator-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7f8c822c2284fa769ed2e5a7eb741573",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49828,
        "upload_time": "2021-05-31T02:57:04",
        "upload_time_iso_8601": "2021-05-31T02:57:04.693077Z",
        "url": "https://files.pythonhosted.org/packages/74/cb/f042a5983c0864293d79766265d8d2d296b346c43eb3226423e89d7e099f/ffmpeg-generator-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "694dee8acbaa33c1ec6a2e758c0da6db442c5c42a4adcd2c9206590005f33adc",
          "md5": "69ad72b5c3079fae486f63c7cc272ae2",
          "sha256": "fc4c16f768e66307cb7223fbc7b37c11eca106ab3caed1104321657eb3e4d96d"
        },
        "downloads": -1,
        "filename": "ffmpeg-generator-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "69ad72b5c3079fae486f63c7cc272ae2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49861,
        "upload_time": "2021-06-24T09:27:49",
        "upload_time_iso_8601": "2021-06-24T09:27:49.568608Z",
        "url": "https://files.pythonhosted.org/packages/69/4d/ee8acbaa33c1ec6a2e758c0da6db442c5c42a4adcd2c9206590005f33adc/ffmpeg-generator-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9134a7cd7a88f6177d1e100cbcc050cceb60731a28cabc8b5291a0c4f6f3f12e",
          "md5": "cad21a46884db947e59d8657837deee8",
          "sha256": "151579fd62cbef2d9873b0124135c368987ba230976fd249d319411ac23d270a"
        },
        "downloads": -1,
        "filename": "ffmpeg-generator-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cad21a46884db947e59d8657837deee8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49666,
        "upload_time": "2021-06-25T02:04:34",
        "upload_time_iso_8601": "2021-06-25T02:04:34.238310Z",
        "url": "https://files.pythonhosted.org/packages/91/34/a7cd7a88f6177d1e100cbcc050cceb60731a28cabc8b5291a0c4f6f3f12e/ffmpeg-generator-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64304ea60aaad6fc0909d31448c2672d7d40e9bf4554f0254d2a8cc043f7cb2b",
          "md5": "52e5717596963deb47af03c816164cc9",
          "sha256": "e3071439258f8ae4f2c5009458a13ed778d0ef287432ad57e03fe77f301e4c4c"
        },
        "downloads": -1,
        "filename": "ffmpeg-generator-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "52e5717596963deb47af03c816164cc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49690,
        "upload_time": "2021-07-14T09:20:13",
        "upload_time_iso_8601": "2021-07-14T09:20:13.586051Z",
        "url": "https://files.pythonhosted.org/packages/64/30/4ea60aaad6fc0909d31448c2672d7d40e9bf4554f0254d2a8cc043f7cb2b/ffmpeg-generator-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa656d9d8795f50bb3e4b498d1f739f73b4636c4b537ab7f0e672dbf575d61dc",
          "md5": "a6c236e97c8593d65ba0660114104c27",
          "sha256": "67721fa981b4f61ef584e419a88bb74ef7af5bdb91cc47d8efb43fed347649c6"
        },
        "downloads": -1,
        "filename": "ffmpeg-generator-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a6c236e97c8593d65ba0660114104c27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 76130,
        "upload_time": "2021-07-22T09:24:08",
        "upload_time_iso_8601": "2021-07-22T09:24:08.950456Z",
        "url": "https://files.pythonhosted.org/packages/aa/65/6d9d8795f50bb3e4b498d1f739f73b4636c4b537ab7f0e672dbf575d61dc/ffmpeg-generator-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa656d9d8795f50bb3e4b498d1f739f73b4636c4b537ab7f0e672dbf575d61dc",
        "md5": "a6c236e97c8593d65ba0660114104c27",
        "sha256": "67721fa981b4f61ef584e419a88bb74ef7af5bdb91cc47d8efb43fed347649c6"
      },
      "downloads": -1,
      "filename": "ffmpeg-generator-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a6c236e97c8593d65ba0660114104c27",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 76130,
      "upload_time": "2021-07-22T09:24:08",
      "upload_time_iso_8601": "2021-07-22T09:24:08.950456Z",
      "url": "https://files.pythonhosted.org/packages/aa/65/6d9d8795f50bb3e4b498d1f739f73b4636c4b537ab7f0e672dbf575d61dc/ffmpeg-generator-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}