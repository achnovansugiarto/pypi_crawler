{
  "info": {
    "author": "kavinbj",
    "author_email": "kwfelix@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# aio-mongo-dm\nasynchronous lightweight ODM for MongoDB based on [motor](https://github.com/mongodb/motor)\n\n\n# Suitable Application Environment\nThe goal of this package is to create an asynchronous, simple and intuitive ODM, which can be easily applied to the python asynchronous framework system.\nIf you happen to like asynchronous framework very much and use mongodb as your data storage system.\n* [Motor documentation][https://motor.readthedocs.io/en/stable/index.html]\n\n# Installation\n```bash\npip install aio-mongo-dm\n```\n\n## Quick Start ##\n```python\nimport asyncio\nfrom datetime import datetime\nfrom aio_mongo_dm import Document\n\nclass User(Document):\n    # customize document field with schema data\n    __schema__ = {\n        'name': {'type': str, 'default': 'my_default_name', 'index': 1},\n        'age':  {'type': int, 'default': 20, 'index': -1},\n        'sex':  {'type': bool, 'default': True},\n        'createdAt': {'type': datetime, 'index': -1},\n        'updatedAt': {'type': datetime }\n    }\n\n    # customize class method\n    @classmethod\n    async def find_one_by_name(cls, user_name):\n        return await cls.find_one({'name': user_name})\n\n    # hook method, after user.save()\n    async def after_save(self):\n        print('after_save User hook method')\n    \n_db_url = 'mongodb://localhost:27000'\n    \nasync def main():\n    # init whole document/collection with mongodb url and db_name\n    await Document.init_db(url=_db_url, db_name='mytest')\n\n    # create User instance\n    user = User()\n    assert user.name == 'my_default_name'\n    assert user.sex is True\n    # _id not exist\n    assert '_id' not in user\n\n    count1 = await User.count({'age': {'$lg': 10}})\n\n    # save user object to db， then return _id (mongodb's unique index )\n    await user.save()\n    # _id exist\n    assert '_id' in user\n\n    count2 = await User.count({})\n    assert count2 == count1 + 1\n    print(f'User count={count2}')\n\n    user_with_name = await User.find_one_by_name('my_default_name')\n    print(user_with_name, user_with_name.updatedAt)\n    assert isinstance(user_with_name, User)\n    \n    cursor = User.find({'age': {'$gt': 10}}).sort('age')\n    for document in await cursor.to_list(length=100):\n        print(document)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```\n\n## Create Index ##\n```python\nimport asyncio\nfrom datetime import datetime\nfrom aio_mongo_dm import Document\n\nclass User(Document):\n    # set DB name of this document\n    __db_name__ = 'mytest'\n    \n    # customize class with schema data\n    __schema__ = {\n        'name': {'type': str, 'default': 'my_default_name', 'index': 1},\n        'age':  {'type': int, 'default': 20, 'index': -1},\n        'sex':  {'type': bool, 'default': True},\n        'createdAt': {'type': datetime, 'index': -1},\n        'updatedAt': {'type': datetime }\n    }\n\n    # customize class method\n    @classmethod\n    async def find_one_by_name(cls, user_name):\n        return await cls.find_one({'name': user_name})\n\n    # hook method, after user.save()\n    async def after_save(self):\n        print('after_save User hook method')\n    \n_db_url = 'mongodb://localhost:27000'\n\nasync def main():\n    # init whole document/collection with mongodb url，with default db_name=test\n    await Document.init_db(url=_db_url)\n\n    # 1、create single index respectively according to User.__schema__ index value, e.g. name 1, createdAt -1\n    single_index_results = await User.create_index()\n    print('single_index_results', single_index_results)\n\n    # 2、 create compound index\n    compound_index_result = await User.create_compound_index([('name', 1), ('createdAt', -1)])\n    print('compound_index_result', compound_index_result)\n\n    # 3、 get all index information\n    index_information = await User.get_index_infor()\n    print('index_information', index_information)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```\n\n## Transcation ##  \n**Notice: transaction need replication set env, e.g. one Primary Server, one Secondary Server, one Arbiter Server. [Detail Configuration][https://www.mongodb.com/docs/v5.0/reference/configuration-options/]**\n```python\nfrom bson.objectid import ObjectId\nfrom datetime import datetime\nimport asyncio\nfrom aio_mongo_dm import Document, AioClient\n\n_db_url = 'mongodb://localhost:27000'\n\nclass User(Document):\n    # customize class with schema data\n    __schema__ = {\n        'name': {'type': str, 'default': 'my_default_name', 'index': 1},\n        'age':  {'type': int, 'default': 20, 'index': -1},\n        'sex':  {'type': bool, 'default': True},\n        'createdAt': {'type': datetime, 'index': -1},\n        'updatedAt': {'type': datetime}\n    }\n\nclass PayOrder(Document):\n    # customize class with schema data\n    __schema__ = {\n        'user_id':    {'type': ObjectId},\n        'total_fee':  {'type': int},\n        'status':     {'type': str, 'default': 'Normal'},\n        'createdAt':  {'type': datetime, 'index': -1},\n        'updatedAt':  {'type': datetime}\n    }\n\nasync def trancation_test(is_raise_exception):\n    client = AioClient(client_name='__local__')\n    async with await client.start_session() as s:\n        async with s.start_transaction():\n            user = User()\n            user.name = 'kavin'\n            new_user = await user.save(session=s)\n\n            pay_order = PayOrder()\n            pay_order.user_id = user['_id']\n            pay_order.total_fee = 100\n            pay_order.status = 'payed'\n            new_order = await pay_order.save(session=s)\n\n            assert new_user['_id'] == new_order['user_id']\n            if is_raise_exception:\n                raise Exception('trancation_test exception')\n\n\nasync def main():\n    # init whole document/collection with mongodb url and db_name\n    await Document.init_db(url=_db_url, client_name='__local__', db_name='mytest')\n\n    user_count1 = await User.count()\n    new_order_count1 = await PayOrder.count()\n    # successful transaction\n    await trancation_test(False)\n\n    user_count2 = await User.count()\n    new_order_count2 = await PayOrder.count()\n    # count +1\n    assert user_count2 == user_count1 + 1\n    assert new_order_count2 == new_order_count1 + 1\n\n    try:\n        # failed transaction\n        await trancation_test(True)\n    except Exception as e:\n        assert str(e) == 'trancation_test exception'\n\n    user_count3 = await User.count()\n    new_order_count3 = await PayOrder.count()\n    # count nor change\n    assert user_count3 == user_count2\n    assert new_order_count3 == new_order_count2\n    print('trancation test ok.')\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n## More Example ##\nFor more examples, please query the example folder.\n\n\n# API Reference\n### Document ###\n* #### `__db_url__` ####\n    set db url of this document. you can set in sub-class Document or use Document class method init_db(url='mongodb://localhost:27017')\n    * `default`: 'mongodb://localhost:27017'\n    \n* #### `__db_name__` ####\n    __optional__. Attribute for setting up the database. you can set in sub-class Document or use Document class method init_db(db_name='mytest')\n    * `default`: 'test'\n\n* #### `__collection_name__` ####\n    __optional__. Attribute for setting up the collection name. e.g. the class name is 'User', so default collection name is 'users' if not set.\n    * `default`:  '{class name}.lower() + s' \n\n\n* #### `__schema__` ####\n     Set the initializing data for all objects in the collection when the object is initialized. Defined field default value and type will be checked .\n\n* #### `save(session=None)` ####\n    __Coroutine__. It saves the object in the database, attribute '_id' will be generated if success\n    * `session`:  ClientSession instance for transaction operation\n   \n* #### `delete()` ####\n    __Coroutine__. It remove an object from the database. If the object does not exist in the database, \n    then the __AioMongoDocumentDoesNotExist__ exception will be raised.\n\n* #### `refresh(session=None)` ####\n    __Coroutine__. Refresh the current object from the same object from the database. \n    If the object does not exist in the database, then the __AioMongoDocumentDoesNotExist__ exception will be raised.\n    * `session`:  ClientSession instance for transaction operation\n\n* #### `pre_save()` ####\n    __Hook Method__. This method is called before the save() method. You can override this method in a subclass. \n    If this method is not overridden, 'updatedAt' and 'createdAt' will be updated with datetime.now() by default if the field key defined in __schema__.\n\n* #### `after_save()` ####\n    __Hook Method__. This method is called after the save() method. You can override this method in a subclass.\n\n* #### `init_db(url: str = None, db_name: str = 'test', client_name: str = '__local__', io_loop: _UnixSelectorEventLoop = None, **kwargs) -> AioClient` ####\n    __Coroutine Class Method__. init mongodb method, create AioClient instance and set class attribute __aio_client__\n    * `url`:  mongodb url\n    * `db_name`:  database name\n    * `client_name`:  name for cache aio client\n    * `io_loop`:  asyncio event loop\n    ```python\n    await Document.init_db(url='mongodb://localhost:27000', db_name='mytest')\n    ```   \n\n* #### `create_instance(obj: object) -> Optional[_Document]` ####\n    __Class Method__. Create a document instance through an object, e.g.  User.create_instance({'name': 'kavin', 'age': 30})\n    * `obj`:  an object instance\n    \n    \n* #### `find_by_id(oid: Union[str, ObjectId], session=None) -> Optional[_Document]` ####\n    __Coroutine Class Method__. document query based on document ID. e.g. User.find_by_id('xxxxxxx') \n    * `oid`:  Document ID, str or ObjectId\n    * `session`:  ClientSession instance for transaction operation\n    \n* #### `delete_by_id(oid: Union[str, ObjectId], session=None)` ####\n    __Coroutine Class Method__. delete document instance according to document ID. e.g. User.delete_by_id('xxxxxxx') \n    * `oid`:  Document ID, str or ObjectId\n    * `session`:  ClientSession instance for transaction operation\n\n* #### `find(*args, session: Optional[ClientSession] = None,**kwargs) -> AsyncIOMotorCursor` ####\n    __Class Method__. Querying for More Than One Document, create a AsyncIOMotorCursor. \n    ```python\n    cursor = User.find({'age': {'$gt': 10}}).sort('age')\n    for document in await cursor.to_list(length=100):\n        print(document)\n    ```\n    \n* #### `find_one(*args, session: Optional[ClientSession] = None, **kwargs) -> Optional[_Document]` ####\n    __Coroutine Class Method__. Getting a Single Document, return None if no matching document is found.\n    ```python\n    doc = await User.find_one({'age': {'$gt': 10}}).sort('age')\n    ```\n\n* #### `count(*filters: Mapping[str, Any], session: Optional[ClientSession] = None, **kwargs) -> int` ####\n    __Coroutine Class Method__. Count the number of documents in this collection.\n    * `filters`:  A query document that selects which documents to count in the collection.\n    * `session`:  ClientSession instance for transaction operation\n    ```python\n    users_num = await User.count()\n    users_name_num = await User.count({'name': 'kavin'})\n    users_age_num = await User.count({'age': {$gt: 30}}})\n    ```\n\n* #### `get_collection(db_name: str = None) -> AioCollection` ####\n    __Class Method__. get aio collection through the specified db name, if db_name is not None. \n    use attribute __db_name__  if db_name is None.\n    * `db_name`:  database name \n\n* #### `create_index(session: Optional[ClientSession] = None) -> list` ####\n    __Coroutine Class Method__. create index on this collection. When defining document subclasses, index can be defined in schema，\n        In this function, we will create all the previously defined default indexes one by one\n        return index str list\n    * `session`:  ClientSession instance for transaction operation\n    ```python\n    class User(Document):\n        __schema__ = {\n           'name': {'type': str, 'default': 'my_default_name', 'index': -1},\n           'sex':  {'type': bool},\n           'age':  {'type': int, 'default': 20, 'index': 1},\n           'createdAt': {'type': datetime, 'index': -1},\n           'updatedAt': {'type': datetime}\n        }\n    res = await User.create_index()\n    assert res == ['index_-1', 'age_1', 'createdAt_-1']\n    ```\n\n* #### `create_compound_index(keys: Union[str, Sequence[Tuple[str, Union[int, str, Mapping[str, Any]]]]], session: Optional[ClientSession] = None) -> str` ####\n    __Coroutine Class Method__. create compound index on this collection.\n    * `keys`:  list of index key and index value\n    * `session`:  ClientSession instance for transaction operation\n    ```python\n    class User(Document):\n        __schema__ = {\n           'name': {'type': str, 'default': 'my_default_name', 'index': -1},\n           'sex':  {'type': bool},\n           'age':  {'type': int, 'default': 20, 'index': 1},\n           'createdAt': {'type': datetime, 'index': -1},\n           'updatedAt': {'type': datetime}\n        }\n    keys = [('name', 1), ('createdAt', -1)]\n    res = await User.create_compound_index(keys)\n    assert res == 'name_1_createdAt_-1'\n    ```    \n    \n* #### `get_index_infor(session: Optional[ClientSession] = None) -> str` ####\n    __Coroutine Class Method__. Get information on this collection’s indexes.\n    * `session`:  ClientSession instance for transaction operation\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/kavinbj/aioMongoDM",
    "keywords": "asynchronous mongodb motor odm",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aio-mongo-dm",
    "package_url": "https://pypi.org/project/aio-mongo-dm/",
    "platform": null,
    "project_url": "https://pypi.org/project/aio-mongo-dm/",
    "project_urls": {
      "Homepage": "http://github.com/kavinbj/aioMongoDM"
    },
    "release_url": "https://pypi.org/project/aio-mongo-dm/1.1.0/",
    "requires_dist": [
      "motor (>=3.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "asynchronous lightweight ODM for MongoDB based on motor",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14696957,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a80dd8bd5b02cf1a1bc5c8aa1a2d9664d51063f2b980e0adab071d188ac69b2e",
          "md5": "084103d0fb9c1d01909105411862107e",
          "sha256": "5e9880fdc964404d022781b4b11a044f44fd872fce6fffd59204ff24199111e2"
        },
        "downloads": -1,
        "filename": "aio_mongo_dm-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "084103d0fb9c1d01909105411862107e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13539,
        "upload_time": "2022-08-08T13:55:54",
        "upload_time_iso_8601": "2022-08-08T13:55:54.763760Z",
        "url": "https://files.pythonhosted.org/packages/a8/0d/d8bd5b02cf1a1bc5c8aa1a2d9664d51063f2b980e0adab071d188ac69b2e/aio_mongo_dm-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4664106717a55946513083d4fe81a1710e2db0c0e889f01ebbbab4797f51749",
          "md5": "252947f6b4d161c64cadded425364752",
          "sha256": "987783b46e0c58b3bce66774f986c17ebb188fefce19687a07d1973e536adace"
        },
        "downloads": -1,
        "filename": "aio_mongo_dm-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "252947f6b4d161c64cadded425364752",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13718,
        "upload_time": "2022-08-08T13:55:57",
        "upload_time_iso_8601": "2022-08-08T13:55:57.519622Z",
        "url": "https://files.pythonhosted.org/packages/b4/66/4106717a55946513083d4fe81a1710e2db0c0e889f01ebbbab4797f51749/aio_mongo_dm-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e15b85dd19f51961788ab7c80cc7456c1402fb5cd67f1adaa0e1c6db77988f1",
          "md5": "44d4bd5490b4c394201d01c5b7a1980c",
          "sha256": "f43aa4b71506b348a88d98bdd32b5555a5710489f3b9c88239eb3c95c0e3c906"
        },
        "downloads": -1,
        "filename": "aio_mongo_dm-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44d4bd5490b4c394201d01c5b7a1980c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13566,
        "upload_time": "2022-08-09T03:04:53",
        "upload_time_iso_8601": "2022-08-09T03:04:53.596779Z",
        "url": "https://files.pythonhosted.org/packages/5e/15/b85dd19f51961788ab7c80cc7456c1402fb5cd67f1adaa0e1c6db77988f1/aio_mongo_dm-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db32c87e542377bf314897d5918bf73ee9b83259e0d5c46ab55308ff01f291f7",
          "md5": "8f6c57055486b7dc3905c304dc2c7250",
          "sha256": "7b273170a94fe29181a20288d6621e39966c6cc70d2358d931cbc5e4732ac255"
        },
        "downloads": -1,
        "filename": "aio-mongo-dm-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8f6c57055486b7dc3905c304dc2c7250",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13783,
        "upload_time": "2022-08-09T03:04:56",
        "upload_time_iso_8601": "2022-08-09T03:04:56.171984Z",
        "url": "https://files.pythonhosted.org/packages/db/32/c87e542377bf314897d5918bf73ee9b83259e0d5c46ab55308ff01f291f7/aio-mongo-dm-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e15b85dd19f51961788ab7c80cc7456c1402fb5cd67f1adaa0e1c6db77988f1",
        "md5": "44d4bd5490b4c394201d01c5b7a1980c",
        "sha256": "f43aa4b71506b348a88d98bdd32b5555a5710489f3b9c88239eb3c95c0e3c906"
      },
      "downloads": -1,
      "filename": "aio_mongo_dm-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44d4bd5490b4c394201d01c5b7a1980c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13566,
      "upload_time": "2022-08-09T03:04:53",
      "upload_time_iso_8601": "2022-08-09T03:04:53.596779Z",
      "url": "https://files.pythonhosted.org/packages/5e/15/b85dd19f51961788ab7c80cc7456c1402fb5cd67f1adaa0e1c6db77988f1/aio_mongo_dm-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db32c87e542377bf314897d5918bf73ee9b83259e0d5c46ab55308ff01f291f7",
        "md5": "8f6c57055486b7dc3905c304dc2c7250",
        "sha256": "7b273170a94fe29181a20288d6621e39966c6cc70d2358d931cbc5e4732ac255"
      },
      "downloads": -1,
      "filename": "aio-mongo-dm-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8f6c57055486b7dc3905c304dc2c7250",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13783,
      "upload_time": "2022-08-09T03:04:56",
      "upload_time_iso_8601": "2022-08-09T03:04:56.171984Z",
      "url": "https://files.pythonhosted.org/packages/db/32/c87e542377bf314897d5918bf73ee9b83259e0d5c46ab55308ff01f291f7/aio-mongo-dm-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}