{
  "info": {
    "author": "E. Madison Bray",
    "author_email": "embray@lri.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "|logo|\n\n#################################\ngappy — a Python interface to GAP\n#################################\n\n|docs-badge| |tests-badge|\n\ngappy provides a Python interface to the `GAP\n<https://www.gap-system.org/>`_ computer algebra system by linking to its\nlibrary interface.\n\nIt allows calling functions in GAP directly from Python, and passing\nsupported Python objects back to GAP.\n\ngappy is based on SageMath's `LibGAP\n<https://doc.sagemath.org/html/en/reference/libs/sage/libs/gap/libgap.html>`_\ninterface to GAP, originally developed by Volker Braun, but is completely\nindependent of Sage--it does not require or use Sage at all, and can be used\nin any Python code.  If there is enough interest, it may also be enhanced\nwith a complementary GAP package for interacting with Python from within\nGAP.\n\n\n.. contents::\n    :local:\n    :depth: 3\n\n\nQuickstart\n==========\n\nTo start using GAP functions from Python, just run:\n\n.. code-block:: python\n\n    >>> from gappy import gap\n\nThen any global variable in GAP, including functions, can be accessed as\nattributes on `gap` like:\n\n.. code-block:: python\n\n    >>> gap.Cite()\n    Please use one of the following samples\n    to cite GAP version from this installation\n\n    Text:\n\n    [GAP] GAP – Groups, Algorithms, and Programming, Version 4.dev, The GAP Group, https://www.gap-system.org.\n    ...\n\nAll global variables that would be available in a GAP session can be\naccessed in this way:\n\n.. code-block:: python\n\n    >>> GAPInfo.Version\n    \"4.dev\"\n\nMost basic Python types have direct equivalents in GAP, and can be passed\ndirectly to GAP functions without explicit conversion to their equivalent\nGAP types:\n\n.. code-block:: python\n\n    >>> S4 = gap.SymmetricGroup(4)\n    >>> S4\n    Sym( [ 1 .. 4 ] )\n\nYou can also call \"methods\" on ``GapObj``\\s.  This is just syntactic sugar\nfor calling a GAP function with that object as its first argument, in cases\nwhere that function supports the object bound to the method.  For example:\n\n.. code-block:: python\n\n    >>> S4.GeneratorsOfGroup()\n    [ (1,2,3,4), (1,2) ]\n\nValues returned from GAP functions are GAP objects wrapped in a Python class\nfor containing them called ``GapObj``:\n\n.. code-block:: python\n\n    >>> type(S4)\n    <class 'gappy.gapobj.GapObj'>\n\nThere are also specialized subclasses of ``GapObj`` for many types of objects\nin GAP.  To explicitly convert a Python object directly to its GAP\nequivalent, you can *call* ``gap`` like:\n\n.. code-block:: python\n\n    >>> one = gap(1)\n    >>> type(one)\n    <class 'gappy.gapobj.GapInteger'>\n\nGAP objects are displayed (with `repr`) or stringified (with `str`) the same\nway they would be in GAP, when displaying the object in the REPL or when\ncalling GAP's ``Print()`` function on the object, respectively:\n\n.. code-block:: python\n\n    >>> one\n    1\n    >>> s = gap(\"Hello GAP!\")\n    >>> s\n    \"Hello GAP!\"\n    >>> print(s)\n    Hello GAP!\n\nNot all GAP objects have an equivalent in basic Python types, so there is\nno implicit conversion from GAP back to Python.  However, all Python types\nthat can be converted to GAP objects can be converted back to their\nequivalent Python types in a symmetrical manner:\n\n.. code-block:: python\n\n    >>> int(one)\n    1\n    >>> type(int(one))\n    <class 'int'>\n    >>> str(s)\n    'Hello GAP!'\n    >>> type(str(s))\n    <class 'str'>\n\nLikewise for `float`\\s, `list`\\s, `dict`\\s, among others.\n\nYou can also call ``obj.python()`` to convert to its equivalent Python type\nif one exists:\n\n.. code-block:: python\n\n    >>> type(one.python())\n    <class 'int'>\n\nTo register your own converters for GAP objects to custom Python types, see\nthe ``gap.convert_to`` decorator.\n\nFinally, you can execute arbitrary GAP code directly with ``gap.eval``.\nThis is often the easiest way to construct more complicated GAP objects,\nespecially if you are more familiar with GAP syntax.  The return value of\n``gap.eval`` is the result of evaluating the same statement in GAP (the\nsemicolon is optional when evaluating a single statement):\n\n.. code-block:: python\n\n    >>> rec = gap.eval('rec(a:=123, b:=456, Sym3:=SymmetricGroup(3))')\n    >>> rec['Sym3']\n    Sym( [ 1 .. 3 ] )\n\nThis is also an easy way to declare new GAP functions from gappy:\n\n.. code-block:: python\n\n    >>> sign = gap.eval(\"\"\"sign := function(n)\n    ...     if n < 0 then\n    ...         return -1;\n    ...     elif n = 0 then\n    ...         return 0;\n    ...     else\n    ...         return 1;\n    ...     fi;\n    ... end;\"\"\")\n    >>> sign\n    <GAP function \"sign\">\n    >>> sign(0)\n    0\n    >>> sign(-99)\n    -1\n\nSee the full API documentation for many additional examples of how to use\nthe ``gap`` object as well as the built-in ``GapObj`` types.\n\n\nInstallation\n============\n\n.. note::\n\n    These instructions will be updated once there are releases on PyPI.\n\nPrerequisites\n-------------\n\n* Supported platforms: Linux, MacOS, Cygwin.\n\n  * Likely works with most other \\*BSD flavors but has not been tested.\n\n* Python 3.6 or up with development headers installed.  On Debian-based\n  systems this means:\n\n  .. code-block:: shell\n\n      $ sudo apt-get install python3.7-dev\n\n* GAP 4.10.2 or greater\n\nIt is possible to install from PyPI (note the distribution name\n**gappy-system**, **do not** install the package \"gappy\" which is an\nunrelated obsolete package):\n\n.. code-block:: shell\n\n    $ pip install gappy-system\n\nor from source:\n\n.. code-block:: shell\n\n    $ git clone https://github.com/embray/gappy.git\n    $ cd gappy/\n    $ pip install .\n\nHowever, depending on how GAP is installed, some extra steps may be\nrequired.  In particular, if you installed GAP from source using the\ntypical instructions on the `GAP website\n<https://www.gap-system.org/Download/index.html>`_ you will need to make\nsure the libgap shared library is built by running:\n\n.. code-block:: shell\n\n    $ make install-libgap\n\nin the GAP source directory.\n\nYou will also need to point to the location of your GAP installation by\nsetting the ``GAP_ROOT`` environment variable like:\n\n.. code-block:: shell\n\n    $ GAP_ROOT=<path/to/gap/root> pip install .\n\nIf you needed to provide ``GAP_ROOT`` for the installation, it is also\ngenerally necessary to set this environment variable *before* using gappy,\nso that it can find the path to your GAP installation.  See the\ndocumentation for the ``Gap`` class for more information.\n\nIf using GAP from a distribution system such as APT on Debian/Ubuntu or from\nConda, however, the GAP library (libgap) is typically installed in a\nstandard system location, and it may not be necessary to provide\n``GAP_ROOT``.  See the next section for example.\n\nConda installation\n------------------\n\nTo give an example of the above point, you can install gappy in a Conda\nenvironment as follows:\n\n.. code-block:: shell\n\n    $ conda create -n gap\n    $ conda activate gap\n    $ conda install -c conda-forge gap-defaults==4.11 python==3.8\n    $ pip install .\n\nAlternatively, you can create the conda environment using the supplied\n`environment.yml\n<https://github.com/embray/gappy/blob/master/environment.yml>`_ file:\n\n.. code-block:: shell\n\n    $ conda env create\n\n.. note::\n\n    With Conda and other distributions that install libgap to a standard\n    system location (e.g. ``/usr/lib/libgap.so``) it may not be necessary to\n    set the ``GAP_ROOT`` environment variable, as the library can locate\n    your GAP root automatically in most cases.\n\n.. warning::\n\n    The conda package for GAP 4.11 had dependency conflicts with Python 3.7\n    so you must use Python 3.8 or above, or GAP 4.10.2 with Python 3.7.\n\nCygwin installation\n-------------------\n\nAdditional notes for installation on Cygwin:\n\n* The dependency ``psutil`` does not support Cygwin.  However, there is an\n  unofficial fork which does at:\n  https://github.com/embray/psutil/tree/cygwin/v3.  You can install it by\n  running:\n\n  .. code-block:: shell\n\n      $ pip install git+https://github.com/embray/psutil.git@cygwin/v3\n\n* The path to the libgap DLL (filename ``cyggap-0.dll``) needs to be on\n  your ``PATH`` environment variable in order for gappy to be importable.\n  To do this you can either copy it from your GAP installation to a standard\n  location like:\n\n  .. code-block:: shell\n\n      $ cp /path/to/gap_root/.libs/cyggap-0.dll /usr/local/bin\n\n  or you can modify your environment to point to where GAP places the built\n  DLL:\n\n  .. code-block:: shell\n\n    $ export PATH=\"/path/to/gap_root/.libs:$PATH\"\n\n  and add this to your ``.profile``.\n\n.. |logo| image:: https://raw.githubusercontent.com/embray/gappy/master/docs/images/gappy-logo.svg.png\n    :alt: gappy logo\n    :align: middle\n\n.. |docs-badge| image:: https://readthedocs.org/projects/gappy/badge/?version=latest\n    :target: https://gappy.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. |tests-badge| image:: https://github.com/embray/gappy/workflows/Tests/badge.svg\n    :target: https://github.com/embray/gappy/actions?query=workflow%3ATests\n    :alt: Test Status\n\nChangelog\n=========\n\nv0.1.0a3 (2021-02-15)\n---------------------\n\nEnhancements\n^^^^^^^^^^^^\n\n* Renamed the special method ``_gap_``, for converting arbitrary Python\n  objects to GAP objects, to ``__gap__`` as inspired by the discussion at\n  https://trac.sagemath.org/ticket/31297#comment:23\n\n  * Likewise, the special method ``_gap_init_`` is now named\n    ``__gap_eval__`` to emphasize that it returns a string to be passed\n    to ``Gap.eval()``.  It still does not take any arguments.\n\n* Added ``GapObj.python()`` method for converting a ``GapObj`` to its\n  equivalent type if one exists (it does not always, but it does in the\n  cases where there is an equivalent type built into Python).\n\n  * ``GapList.python()`` and ``GapRecord.python()`` also recursively convert\n    the values they contain to equivalent Python types if possible.\n\n* New interface for registering converters to/from GAP object types:\n\n  * ``Gap.register_converter`` is replaced with the ``Gap.convert_from``\n    decorator.\n\n  * The ``GapObj.convert_to`` decorator can be used to register new\n    conversion methods on ``GapObj``, or specific subclasses thereof.\n\n* Added some C-level utility methods on ``GapInteger`` to help convert to\n  different integer types (C long ints and mpz_t, depending on the size of\n  the int).  This helps with more efficient conversion to Sage Integers\n  without having to pass through an intermediary Python ``int``.\n\n* Implemented the ``__invert__`` and ``__neg__`` magic methods for\n  ``GapObj``.\n\n* Implemented a default ``__bool__`` for all ``GapObj`` which returns\n  ``False`` if its value is equal to zero.\n\n* Install the ``.pyx`` sources so that Cython tracebacks can work better.\n\nBug fixes\n^^^^^^^^^\n\n* When converting a ``GapRecord`` to a ``dict`` with ``dict(rec)`` the\n  keys remain as ``GapString`` instead of ``str``.  This is more consistent\n  with the fact that the values are not converted to Python equivalents.\n\n* If an arbitrary GAP error occurs while looking up a global variable with\n  ``Gap.__getattr__`` it is handled and re-raised as an ``AttributeError``.\n\n* The ``Gap.__repr__`` method displays names of subclasses correctly.\n\n\nv0.1.0a2 (2021-02-03)\n---------------------\n\nBug fixes\n^^^^^^^^^\n\n* Made fixes for MacOS and Cygwin support.\n\n\nv0.1.0a1 (2021-02-03)\n---------------------\n\nEnhancements\n^^^^^^^^^^^^\n\n* Added LRU cache for functions defined with ``gap.gap_functions``,\n  restoring some of the caching functionality from Sage's\n  ``Gap.function_factory``.\n\nBug fixes\n^^^^^^^^^\n\n* Fixed bug in multi-indexing of nested lists.\n\n* Fixed minor formatting difference in the IndexError message when indexing\n  single lists versus multi-indexing nested lists.\n\n* Fixed a bug when using functions defined with ``gap.gap_function`` as\n  arguments to another GAP function before they have been called once.\n\n\nv0.1.0a0 (2021-01-26)\n---------------------\n\n* Initial alpha release for testing against SageMath.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/embray/gappy",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gappy-system",
    "package_url": "https://pypi.org/project/gappy-system/",
    "platform": "linux",
    "project_url": "https://pypi.org/project/gappy-system/",
    "project_urls": {
      "Homepage": "https://github.com/embray/gappy"
    },
    "release_url": "https://pypi.org/project/gappy-system/0.1.0a3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python interface to GAP",
    "version": "0.1.0a3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9423987,
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b41a78bda94109c877c632dc385b2c2d899e08389bfad89d32b92df0c6636d21",
          "md5": "ea004912b6084979042f1c694b41acd5",
          "sha256": "d86eacf0609e7e580741fb466c67eb2f831512a9238bc15305092fbc1927f042"
        },
        "downloads": -1,
        "filename": "gappy-system-0.1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea004912b6084979042f1c694b41acd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 110044,
        "upload_time": "2021-01-26T17:25:30",
        "upload_time_iso_8601": "2021-01-26T17:25:30.086742Z",
        "url": "https://files.pythonhosted.org/packages/b4/1a/78bda94109c877c632dc385b2c2d899e08389bfad89d32b92df0c6636d21/gappy-system-0.1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f863571d73c84bf64081413b57d908e516a86ffeb8fcda766919b814220adad",
          "md5": "7463b680cba2996d127bd2c7e8498c66",
          "sha256": "97f0f7c1e55731e092acf4bbcd04b92066e15f26a00e46e75dc9206e387cb253"
        },
        "downloads": -1,
        "filename": "gappy-system-0.1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "7463b680cba2996d127bd2c7e8498c66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 111364,
        "upload_time": "2021-02-03T13:28:41",
        "upload_time_iso_8601": "2021-02-03T13:28:41.888297Z",
        "url": "https://files.pythonhosted.org/packages/9f/86/3571d73c84bf64081413b57d908e516a86ffeb8fcda766919b814220adad/gappy-system-0.1.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "417b1c0144d6401c91b410f1b1b6b2cd75d82874f4bbe7a2a3c90d480a585bc5",
          "md5": "71c7d8746f6f1f4b7f25930b9d49aaef",
          "sha256": "94a788acc1cc332c3d409f8b77510af8b39eb161be51ecf88d7c9c677528ca02"
        },
        "downloads": -1,
        "filename": "gappy-system-0.1.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "71c7d8746f6f1f4b7f25930b9d49aaef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 112490,
        "upload_time": "2021-02-03T20:10:11",
        "upload_time_iso_8601": "2021-02-03T20:10:11.946435Z",
        "url": "https://files.pythonhosted.org/packages/41/7b/1c0144d6401c91b410f1b1b6b2cd75d82874f4bbe7a2a3c90d480a585bc5/gappy-system-0.1.0a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a4fa3b8001054faab5459105c5f9343f8d09747bd7a9e52e5152dcaf65e7076",
          "md5": "cb4f31f5a89bf806f7f5c68c9241dd04",
          "sha256": "90a2c9b6c4fd07ef3b9197303a929c00806e6c397b383895ffae1044864b0e5b"
        },
        "downloads": -1,
        "filename": "gappy-system-0.1.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "cb4f31f5a89bf806f7f5c68c9241dd04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 119162,
        "upload_time": "2021-02-15T17:53:44",
        "upload_time_iso_8601": "2021-02-15T17:53:44.475269Z",
        "url": "https://files.pythonhosted.org/packages/5a/4f/a3b8001054faab5459105c5f9343f8d09747bd7a9e52e5152dcaf65e7076/gappy-system-0.1.0a3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a4fa3b8001054faab5459105c5f9343f8d09747bd7a9e52e5152dcaf65e7076",
        "md5": "cb4f31f5a89bf806f7f5c68c9241dd04",
        "sha256": "90a2c9b6c4fd07ef3b9197303a929c00806e6c397b383895ffae1044864b0e5b"
      },
      "downloads": -1,
      "filename": "gappy-system-0.1.0a3.tar.gz",
      "has_sig": false,
      "md5_digest": "cb4f31f5a89bf806f7f5c68c9241dd04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 119162,
      "upload_time": "2021-02-15T17:53:44",
      "upload_time_iso_8601": "2021-02-15T17:53:44.475269Z",
      "url": "https://files.pythonhosted.org/packages/5a/4f/a3b8001054faab5459105c5f9343f8d09747bd7a9e52e5152dcaf65e7076/gappy-system-0.1.0a3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}