{
  "info": {
    "author": null,
    "author_email": "Michael Rich <richmr2174@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# pycallflow\n\n[![PyPI - Version](https://img.shields.io/pypi/v/pycallflow.svg)](https://pypi.org/project/pycallflow)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pycallflow.svg)](https://pypi.org/project/pycallflow)\n\n-----\n## WARNING\nDo not use pycallflow to map hostile or potentially malicious python code.  Code may be executed as it is examined.\n\n## What is Pycallflow\n\nPycallflow produces GraphViz-compatible output that visually shows the flow of calls within a module, package, or directory of python files like this:\n![Sample pycallflow graphic](images/pycallflow-full.png \"Pycallflow of pycallflow\")\n\nI wrote it to help me get a grip on python projects that have accreted files and capability over time.  It was difficult to hand trace the call flows when there were problems and upgrades to be done.\n\nThere are limitations and some significant warnings.  Please see [Warnings](#warnings-and-limitations) below\n\n## What it does\n\nPycallflow recursively imports and analyzes the files in a module or directory to identify all of the declared code entities (functions, methods, and classes).  It maps the calls between these entities to produce a network graph which is then rendered in DOT language.\n\n## Installation\n\n```console\npip install pycallflow\n```\n\n## Usage\n\n### Basics\n\nInvoke with\n```console\npython -m pycallflow [target]\n```\nTo generate a DOT-language call flow diagram of every discovered entity.\n\nIf you have GraphViz installed you can pipe it:\n```console\npython -m pycallflow [target] | dot -Tpng -ofilename.png\n```\n\n### Flow Arrows (edges)\n\nThe colors of the edges do not mean anything.  I rotate through a list of contrasting colors in an attempt make it easier to trace the flow lines.  You can set the color with ```---edge_color``` if you want it fixed to a specifc color.\n\nYou may see dashed edges.  Dashed edges indicate the call or reference may be ambiguous.  This means there are multiple entities with the exact same name (i.e. two or more files or classes contain a function with the same name).  This is very common with subclasses that override parent methods.  Though Python always seems to know which one you mean, it's a little harder to figure out from the outside.  Improving this is a main goal for the future.\n\n### Clean up\n\nThe diagrams can get quite busy, but there are options that can limit some of the noise.\n\n#### --clean\n\nSpecifying this option will turn all of the clean up options on.  I recommend it under most circumstances.\n\n#### --suppress_recursive_calls\n\nEntities that recurse on themselves will get loop indicators like this:\n\n![Recusion indicator](images/recursion.png \"Recursion\")\n\n```console\npython -m pycallflow --suppress_recursive_calls [target]\n```\nWill result in the elimination of these loops:\n\n![No recursion indicator](images/no_recursion.png \"Recusion suppressed\")\n\n#### --combine_calls\n\nEntities may call the same entity more than once.  By default, this will show as multiple indicators:\n\n![Multiple calls](images/multi_calls.png \"All calls shown\")\n\n```console\npython -m pycallflow --combine_calls [target]\n```\nWill allow only one indicator between entities:\n\n![Calls between entities combined](images/calls_combined.png \"Only a single call shown\")\n\n#### --suppress_class_references\n\nBy default an entity that references a class will get an indicator similar to :\n\n![Class references](images/class_reference.png \"Class reference shown\")\n\nThis can be handy if an entity assigns a class reference to a variable.  However, it may be obvious that the entity is calling a class method in which case the \"reference\" indicator will just be added noise.\n\n```console\npython -m pycallflow --suppress_class_references [target]\n```\n\nWill clean these up:\n\n![Class references suppressed](images/no_class_reference.png \"Class reference suppressed\")\n\n#### --suppress_calls_to_init\n\nTypically the only thing calling ```__init__()``` is a subclass calling ```super().__init__()```.  This can add unnecessary complexity to the diagram without adding value.  Specify ```--suppress_calls_to_init``` to eliminate these.   \n\n#### --match_to_file\n\nThis is an option to limit ambiguous calls (calls to an entity that shares a name across the analyzed code space).  When this is set, pycallflow will look for entities first in the same file as the calling entity and will choose those over other files.\n\n### Investigate Specific Entities\n\nYou may only be interested in the call flow upstream and downstream of a specific entity (or entities).  The ```--select_entity_id``` option allows you to focus your attention.  Here is the workflow.\n\n#### Get a list of discovered entities\n\nUse:\n\n```console\npython -m pycallflow -o entity_list [target]\n```\n\nTo get a numbered list of discovered entities.  For example, running this against pycallflow will give this:\n\n```console\n>python -m pycallflow -o entity_list pycallflow\n|   entityID | name                                  | Type     | import path                        |\n|------------|---------------------------------------|----------|------------------------------------|\n|          1 | addCallDBEntry                        | function | pycallflow.analyzeCallFlow         |\n|          2 | buildCallflowDB                       | function | pycallflow.analyzeCallFlow         |\n|          3 | entitylists                           | function | pycallflow.analyzeCallFlow         |\n|          4 | findAllEntityIDWithName               | function | pycallflow.analyzeCallFlow         |\n|          5 | addEntityToDB                         | function | pycallflow.buildDeclaredEntitiesDB |\n|          6 | buildDeclaredEntitiesDB               | function | pycallflow.buildDeclaredEntitiesDB |\n|          7 | findDeclaredEntities                  | function | pycallflow.buildDeclaredEntitiesDB |\n|          8 | findDeclaredEntities_inlineSave       | function | pycallflow.buildDeclaredEntitiesDB |\n|          9 | inspectAndSaveEntities                | function | pycallflow.buildDeclaredEntitiesDB |\n|         10 | inspectEntity                         | function | pycallflow.buildDeclaredEntitiesDB |\n|         11 | addFileToDB                           | function | pycallflow.buildFileDB             |\n|         12 | buildFileDB                           | function | pycallflow.buildFileDB             |\n|         13 | getFileList                           | function | pycallflow.buildFileDB             |\n|         14 | cli_run                               | function | pycallflow.callflow                |\n|         15 | collectData                           | function | pycallflow.callflow                |\n|         16 | callFlowData                          | class    | pycallflow.callFlowData            |\n|         17 | __init__                              | function | pycallflow.callFlowData            |\n|         18 | addDiscoveredObject                   | function | pycallflow.callFlowData            |\n--- SNIP --- \n```\n\nThe entityID will remain constant between runs *provided no new files, functions, classes, or methods are introduced*.  If you add new code, just run the ```-o entity_list``` again.\n\n#### Select your entityID\n\nJust use ```--select_entity_id id1,id2,.. ``` similar to:\n\n```console\npython -m pycallflow --select_entity_id 5,11 pycallflow\n```\n\nResulting in:\n\n![Select entity](images/select_entities.png \"Only selected entities shown\")\n\n### Analyzing Directories\n\nThe code you want to examine may not be package or module, but just code files in a directory or layered directories.  Use the ```--directory``` option to make pycallflow consider your target a directory and not a module.\n\n## Warnings and Limitations\n\n### Analyzed Code WILL Execute\n\nPycallflow works by importing files and then inspecting the objects that result.  This can only be done by actually executing the code.  If there is code not protected by a ```if __name__ == \"__main__\":``` clause or buried inside a class, method, or function it *WILL EXECUTE*.  \n\nIf the executed code contains a ```sys.exit()``` or other process termination, pycallflow will not produce any output.  I learned this from experience.\n\nTo prevent corrupting the DOT output, stdout is redirected to os.devnull (you can specify a file with ```--stdout_capture_file```).  This won't prevent other operations from happening.\n\n*DO NOT USE THIS ON HOSTILE OR MALICIOUS CODE*\n\n### Only entities in the target files are analyzed\n\nSupporting packages and libraries are not examined.\n\n### Currently can't analyze installed libraries or packages\n\nRight now you can't specify a system package (like ```requests```) and have it run.  I just haven't put that in place yet.  However, you *could* clone any repository and then run pycallflow on that.\n\n## License\n\n`pycallflow` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "pycallflow",
    "package_url": "https://pypi.org/project/pycallflow/",
    "platform": null,
    "project_url": "https://pypi.org/project/pycallflow/",
    "project_urls": {
      "Documentation": "https://github.com/richmr/pycallflow#readme",
      "Issues": "https://github.com/richmr/pycallflow/issues",
      "Source": "https://github.com/richmr/pycallflow"
    },
    "release_url": "https://pypi.org/project/pycallflow/0.1.0/",
    "requires_dist": [
      "networkx",
      "pydot",
      "tabulate"
    ],
    "requires_python": ">=3.7",
    "summary": "Maps function, class, and method calls in python projects, modules, and files",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17137496,
  "releases": {
    "0.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "21d82361aee9bc17e4092805f9451c352a7cb6592ab53bbf385560be8fe0199e",
          "md5": "2546081a5b1a68ed5e096d0d52bdda79",
          "sha256": "226c41afe9b58c58756209dfbae82abe44630fbf49ed1dec6fcc5ad3a066e4a2"
        },
        "downloads": -1,
        "filename": "pycallflow-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2546081a5b1a68ed5e096d0d52bdda79",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15135,
        "upload_time": "2023-03-01T19:51:09",
        "upload_time_iso_8601": "2023-03-01T19:51:09.182181Z",
        "url": "https://files.pythonhosted.org/packages/21/d8/2361aee9bc17e4092805f9451c352a7cb6592ab53bbf385560be8fe0199e/pycallflow-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9e11db7ff07d0599e049d732313a80f1f24cef0ce389a1ef4a18db8c02ff1837",
          "md5": "a757e8d662ae7faf5f56a2210017672c",
          "sha256": "b9cb4b038c807d4984fca19d7c523e4e056210fea8bee5e9baff7a96dece796f"
        },
        "downloads": -1,
        "filename": "pycallflow-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a757e8d662ae7faf5f56a2210017672c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 40818,
        "upload_time": "2023-03-01T19:51:11",
        "upload_time_iso_8601": "2023-03-01T19:51:11.424737Z",
        "url": "https://files.pythonhosted.org/packages/9e/11/db7ff07d0599e049d732313a80f1f24cef0ce389a1ef4a18db8c02ff1837/pycallflow-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "787dbc4df4f6dea0767c5f39c441e5a375cfa19db4c79111e10b0fcc0d03d836",
          "md5": "8c0b3b51c1b23e57249b6ad37c8d83fc",
          "sha256": "24e93bc4c37c269c5e8d58499807bfec8687558010ac199c09b21f665348b3d9"
        },
        "downloads": -1,
        "filename": "pycallflow-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c0b3b51c1b23e57249b6ad37c8d83fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15135,
        "upload_time": "2023-03-01T19:51:13",
        "upload_time_iso_8601": "2023-03-01T19:51:13.211466Z",
        "url": "https://files.pythonhosted.org/packages/78/7d/bc4df4f6dea0767c5f39c441e5a375cfa19db4c79111e10b0fcc0d03d836/pycallflow-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "88c373abebce20598ec560e511238d6541f7ce4ec78a825779737d966e097f19",
          "md5": "8d6d1d64a60e1099645a5ad2bce930d5",
          "sha256": "03349e0d9cff7588e70357ecef7fac5e168ecac5dc600301a9ff5abad26374a8"
        },
        "downloads": -1,
        "filename": "pycallflow-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8d6d1d64a60e1099645a5ad2bce930d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 40819,
        "upload_time": "2023-03-01T19:51:14",
        "upload_time_iso_8601": "2023-03-01T19:51:14.733080Z",
        "url": "https://files.pythonhosted.org/packages/88/c3/73abebce20598ec560e511238d6541f7ce4ec78a825779737d966e097f19/pycallflow-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b26a8f0321cb2e4861f172adf83fea9dae8f7b07e1e13dabd295ed73b1ee39ef",
          "md5": "dbb50737c42f7fce586e3ca95edbf24a",
          "sha256": "a21d2aa3971f6f0f8dfa3cf501ea049373ebfd2eb024269fec654b1f4651c815"
        },
        "downloads": -1,
        "filename": "pycallflow-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbb50737c42f7fce586e3ca95edbf24a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15136,
        "upload_time": "2023-03-01T19:51:16",
        "upload_time_iso_8601": "2023-03-01T19:51:16.043876Z",
        "url": "https://files.pythonhosted.org/packages/b2/6a/8f0321cb2e4861f172adf83fea9dae8f7b07e1e13dabd295ed73b1ee39ef/pycallflow-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e4c2c71f687420a4b09882037df0b534695a0a6b3038c35b976eb9246ee687eb",
          "md5": "17053388ac92fba942de8f1faffb5a9a",
          "sha256": "5eb13d6b70f2d07707877f10c8d3afc22819055c4bdd6d544aa861226dfe50a3"
        },
        "downloads": -1,
        "filename": "pycallflow-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "17053388ac92fba942de8f1faffb5a9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12862,
        "upload_time": "2023-03-01T19:51:18",
        "upload_time_iso_8601": "2023-03-01T19:51:18.039905Z",
        "url": "https://files.pythonhosted.org/packages/e4/c2/c71f687420a4b09882037df0b534695a0a6b3038c35b976eb9246ee687eb/pycallflow-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "bef54d71ccd637cb445c42b8ddf9c9d6e2cc4d94e624e7307cf90aa795e22ee2",
          "md5": "65ba45b2caeb22bfc52ae3a88d0430a6",
          "sha256": "ce9b245fcfe20529190c506ab9b2a62b691248a5a702e779f1f04f5d37df61ae"
        },
        "downloads": -1,
        "filename": "pycallflow-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65ba45b2caeb22bfc52ae3a88d0430a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17427,
        "upload_time": "2023-03-01T22:56:44",
        "upload_time_iso_8601": "2023-03-01T22:56:44.120792Z",
        "url": "https://files.pythonhosted.org/packages/be/f5/4d71ccd637cb445c42b8ddf9c9d6e2cc4d94e624e7307cf90aa795e22ee2/pycallflow-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "1993aeabf0cc3ea785c7112f306aabbd0ddd4ffa8194f4706aa6d4b795b33c4b",
          "md5": "ebdf4923914c53e26cf312a5420ae299",
          "sha256": "56e9a4f9edab3b69b7f8566bd058f0a10b3336ee013bc44ca09adc0fb31a38af"
        },
        "downloads": -1,
        "filename": "pycallflow-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ebdf4923914c53e26cf312a5420ae299",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1414955,
        "upload_time": "2023-03-01T22:56:46",
        "upload_time_iso_8601": "2023-03-01T22:56:46.525105Z",
        "url": "https://files.pythonhosted.org/packages/19/93/aeabf0cc3ea785c7112f306aabbd0ddd4ffa8194f4706aa6d4b795b33c4b/pycallflow-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "02734f50b236d51f88ee5c5ded1c89f93d986c39e24c9a526efdfc9b96763e6b",
          "md5": "0711997094472710305090e25a86827d",
          "sha256": "188f2deaf614bacb7a70a5309663b2202de5cf08fd09a5c89dd2634f10644ad2"
        },
        "downloads": -1,
        "filename": "pycallflow-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0711997094472710305090e25a86827d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18673,
        "upload_time": "2023-03-03T02:04:26",
        "upload_time_iso_8601": "2023-03-03T02:04:26.044318Z",
        "url": "https://files.pythonhosted.org/packages/02/73/4f50b236d51f88ee5c5ded1c89f93d986c39e24c9a526efdfc9b96763e6b/pycallflow-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "4e1ee0fd088d5e42006d1793dacab964b244e11bb21e64cc9254068eb42f0d45",
          "md5": "a3c7a14781d6b5293a42e32ca2522cfd",
          "sha256": "07d18cc9db8012d77324c840ec31d9484fd8efa990e868f627e38f54c0e0ca1d"
        },
        "downloads": -1,
        "filename": "pycallflow-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a3c7a14781d6b5293a42e32ca2522cfd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1416914,
        "upload_time": "2023-03-03T02:04:28",
        "upload_time_iso_8601": "2023-03-03T02:04:28.222132Z",
        "url": "https://files.pythonhosted.org/packages/4e/1e/e0fd088d5e42006d1793dacab964b244e11bb21e64cc9254068eb42f0d45/pycallflow-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "02734f50b236d51f88ee5c5ded1c89f93d986c39e24c9a526efdfc9b96763e6b",
        "md5": "0711997094472710305090e25a86827d",
        "sha256": "188f2deaf614bacb7a70a5309663b2202de5cf08fd09a5c89dd2634f10644ad2"
      },
      "downloads": -1,
      "filename": "pycallflow-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0711997094472710305090e25a86827d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18673,
      "upload_time": "2023-03-03T02:04:26",
      "upload_time_iso_8601": "2023-03-03T02:04:26.044318Z",
      "url": "https://files.pythonhosted.org/packages/02/73/4f50b236d51f88ee5c5ded1c89f93d986c39e24c9a526efdfc9b96763e6b/pycallflow-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "4e1ee0fd088d5e42006d1793dacab964b244e11bb21e64cc9254068eb42f0d45",
        "md5": "a3c7a14781d6b5293a42e32ca2522cfd",
        "sha256": "07d18cc9db8012d77324c840ec31d9484fd8efa990e868f627e38f54c0e0ca1d"
      },
      "downloads": -1,
      "filename": "pycallflow-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a3c7a14781d6b5293a42e32ca2522cfd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 1416914,
      "upload_time": "2023-03-03T02:04:28",
      "upload_time_iso_8601": "2023-03-03T02:04:28.222132Z",
      "url": "https://files.pythonhosted.org/packages/4e/1e/e0fd088d5e42006d1793dacab964b244e11bb21e64cc9254068eb42f0d45/pycallflow-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}