{
  "info": {
    "author": "Keiran M Raine",
    "author_email": "cgphelp@sanger.ac.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pyCROQUET\n\npython Crispr Read to Oligo QUantification and Evaluation Tool\n\n[![cancerit](https://circleci.com/gh/cancerit/pycroquet.svg?style=svg)](https://circleci.com/gh/cancerit/pycroquet)\n\n- [pyCROQUET](#pycroquet)\n  - [Publications](#publications)\n  - [General](#general)\n  - [Subcommands](#subcommands)\n  - [Options](#options)\n    - [`guidelib`](#guidelib)\n    - [`queries`](#queries)\n    - [`chunks`](#chunks)\n    - [`rules`](#rules)\n  - [Output files](#output-files)\n    - [CRAM](#cram)\n      - [Reads mapping to a `sgrna_id`](#reads-mapping-to-a-sgrna_id)\n      - [Reads assigned to a guide](#reads-assigned-to-a-guide)\n  - [Dual guide](#dual-guide)\n    - [Statistic file extension](#statistic-file-extension)\n  - [Boundary mode details](#boundary-mode-details)\n      - [`exact`](#exact)\n      - [`TinQ` - target in query](#tinq---target-in-query)\n      - [`QinT` - query in target](#qint---query-in-target)\n      - [`any`](#any)\n  - [Viewing alignments](#viewing-alignments)\n  - [Installation](#installation)\n    - [Pypi](#pypi)\n    - [Docker and Singularity](#docker-and-singularity)\n  - [Development](#development)\n    - [Linux](#linux)\n    - [Mac](#mac)\n  - [Testing](#testing)\n    - [Local `venv` testing](#local-venv-testing)\n    - [Local `pre-commit` hooks](#local-pre-commit-hooks)\n    - [Docker testing](#docker-testing)\n    - [CI tests](#ci-tests)\n    - [Updating licence headers](#updating-licence-headers)\n  - [LICENSE](#license)\n\n## Publications\n\nPlease contact the following for appropriate referencing methods:\n\n- Keiran Raine (kr2@sanger.ac.uk)\n- Emre Karakoc (ek11@sanger.ac.uk)\n- Victoria Offord (vo1@sanger.ac.uk)\n\n## General\n\nCode in place to support read input from any of the following formats:\n\n- fastq (also gzip compressed)\n- sam\n- bam\n- cram\n\n## Subcommands\n\n- single-guide\n  - Short single end read quantification.\n- dual-guide\n  - Paired end read quantification.\n- long-read\n  - Long single end read quantification\n- guides-to-fa\n  - Convert guides to fasta for use with `samtools tview`\n\n## Options\n\nAll options are not applicable to all subcommands, however the majority are common.\n\n### `guidelib`\n\nPlease see the [Guide library format][guide-format] for a description of this file.\n\n### `queries`\n\nCurrently the `dual-guide` mode only supports SAM/BAM/CRAM as input.  Convert fastq to unmapped CRAM with:\n\n```\n# if data has casava read barcode/qc (text after space in read name) please add \"-i\"\nsamtools import  --output-fmt CRAM,no_ref=1 -@ 4 -1 $READ1 -2 $READ2 -o $OUTFILE.cram\n```\n\n### `chunks`\n\nChunks should be set to a value that allows all CPUs to be utilized.  The value is multiplied by the number of\nCPUs requested and this give the number of unique read sequences held in memory during the mapping phase.\n\nThis has a direct impact on memory. The value is automatically reduced when too large to allow full use of requested CPUs.\n\n### `rules`\n\nFor single-guide `--rules MM` (allow 2 mismatches in alignment) is a sensible value.  For other subcommands the decision\nis dependent on the library protocol.\n\nRules have a direct impact on run time as they increase the time taken to abort an alignment, individual costs are as follows:\n\n- `M` = 1\n- `I` = 2 (single b.p.)\n- `D` = 2 (single b.p.)\n\nPerformance is only impacted by the maximum penalty you allow.\n\nBe aware if you with to allow up to `2 mismatch` or `1 mismatch + 1 b.p. insert` you must specify:\n\n```\npycroquet ... --rules MM --rules MI\n```\n\n## Output files\n\n### CRAM\n\nFor single-guide you have the option to suppress it via the `--no-alignment` (`-n`) option.  In dual-guide it is tightly\nlinked to the pairing code so not possible to disable.\n\nReads that map uniquely are written with `MAPQ>0` (score calculations have not been refined at this time).  There are some\ndifferences in how to interpret the data depending on if you are processing single-guide, dual-guide or long-read.\n\n#### Reads mapping to a `sgrna_id`\n\nTo get the reads that map uniquely to a guide element (sgrna_seq) use the `sgrna_id`.  This is primarily of use for `single-guide` and `long-read`:\n\n```bash\nsamtools view -F 4 -q 1 result.cram $SGRNA_ID\n```\n\nTo get a single instance of reads that map to a guide element but map equally well to others select for the `SA` tag (requires samtools>=1.12):\n\n```bash\nsamtools view -F 4 -F 256 -d SA result.cram $SGRNA_ID\n```\n\nTo get reads that failed to map:\n\n```bash\nsamtools view -f 4 result.cram\n```\n\n#### Reads assigned to a guide\n\nThis is only applicable to `dual-guide`.\n\nYou can pull reads by the guide id using `samtools view`, this example counts R1 mapping to a guide (equivalent to the `*.counts.tsv`\nresult), replace/set `$GUIDE_ID` as required:\n\n```bash\nsamtools view -F 4 -f 64 -c -d YG:$GUIDE_ID result.cram\n```\n\nTo select all the reads mapped to this guide grouped by readname:\n\n```bash\nsamtools view -u -F 4 -d YG:$GUIDE_ID result.cram | samtools sort -n - | samtools view -b - > $GUIDE_ID.bam\n```\n\n## Dual guide\n\nFASTQ(.gz) input is not currently supported for dual guide, please prepare your data appropriately with `samtools import`:\n\n```bash\nsamtools import -@ 4 -1 R1.fastq.gz -2 R2.fastq.gz -O BAM -o OUTPUT.bam\n```\n\nPlease review the `import` options as casava information can be interpreted where appropriate.\n\n### Statistic file extension\n\nThe dual guide output extends the standard json statistics file adding `pair_classifications`:\n\n| Classification | Description                            |\n|----------------|----------------------------------------|\n| match          | same vector F/R                        |\n| aberrant_match | same vector pair, aberrant orientation |\n| f_multi_3p     | 5p mapped F, 3p multihit               |\n| f_multi_5p     | 3p mapped F, 5p multihit               |\n| r_multi_3p     | 5p mapped R, 3p multihit               |\n| r_multi_5p     | 3p mapped R, 5p multihit               |\n| f_open_3p      | 5p mapped F, 3p open (unmapped)        |\n| f_open_5p      | 3p mapped F, 5p open (unmapped)        |\n| r_open_3p      | 5p mapped R, 3p open (unmapped)        |\n| r_open_5p      | 3p mapped R, 5p open (unmapped)        |\n| swap           | multi vector, uniq mapped              |\n| ambiguous      | both ends multi hit                    |\n| no_match       | multi/unmapped either end              |\n\n## Boundary mode details\n\nThe `-b/--boundary-mode` option controls how the guide and read are allowed to overlap.  Each section shows the types of\nalignment allowed, to be valid they still need to pass rules and any minimum score.\n\nIn all cases `XXX` indicates original sequence.\n\n#### `exact`\n\nBoundary of sequence must be equal between target (guide) and query (read)\n\n```\nT: XXXXXX\nQ: XXXXXX\n```\n\n#### `TinQ` - target in query\n\nLike the name suggests, valid alignments include those via `exact` and:\n\n```\nT: XXXXX\nQ: XXXXXX\n\nT:  XXXX\nQ: XXXXXX\n\nT:  XXXXX\nQ: XXXXXX\n```\n\n#### `QinT` - query in target\n\nReverse of `TinQ`, valid alignments include those via `exact` and:\n\n```\nT: XXXXXX\nQ: XXXXX\n\nT: XXXXXX\nQ:  XXXX\n\nT: XXXXXX\nQ:  XXXXX\n```\n\n#### `any`\n\nNo boundary checks are performed, this allows more complex events, all alignments from `exact`, `TinQ`, `QinT` plus:\n\n```\nT:   XXXXXXX\nQ: XXXXXXX\n\nT: XXXXXXX\nQ:   XXXXXXX\n```\n\n## Viewing alignments\n\nYou can use samtools tview to view the cram file, this is mainly useful when checking fuzzy matching or allowing all boundary types.\n\nTo make this more informative generate the fasta file for the sgrna elements:\n\n```\npycroquet guides-to-fa --guidelib guide_library.tsv --fasta sgrna.fa\n```\n\nNOTE: a contig is the individual sgrna sequence, not the pair\n\nNow use this with `samtool tview` to view your alignments, see command line help to jump directly to a contig of interest\nor `?` when using interactively.\n\n```\nsamtools tview result.cram sgrna.fa\n```\n\nWill give a full screen output like this (N is just padded to screen width for short contigs):\n\n```\n1         11\nCTAGTTCAGATAAAACAACNNNNNN\n...................\n...................\n...................\n...................\n...................\n................C..\n...................\n...................\n```\n\n## Installation\n\n### Pypi\n\n```\npip install Cython\npip install pycroquet\n```\n\n### Docker and Singularity\n\nThere are pre-built images containing this codebase on [quay.io][quay-repo].  When pulling an image you must specify\nthe version there is no `latest`.\n\nThe docker images are known to work correctly after import into a singularity image.\n\n## Development\n\nPython 3.9 or better required.\n\n### Linux\n\n```bash\ngit clone git@github.com:cancerit/pycroquet.git\ncd pycroquet\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements-dev.txt\npython3 ./setup.py develop  # dynamic build\n\n# add/activate pre-commit\npip install pre-commit\npre-comomit install\n```\n\n### Mac\n\n```bash\nbrew update\nbrew install python@3.9\nbrew install libmagic\ngit clone git@github.com:cancerit/pycroquet.git\ncd pycroquet\npython3.9 -m venv venv\nsource venv/bin/activate\npip install -r requirements-dev.txt\npython3 setup.sh develop\n\n# add/activate pre-commit\npip install pre-commit\npre-comomit install\n```\n\n## Testing\n\nThere are 4 layers to testing and standards:\n\n1. Local `venv` testing\n1. Local `pre-commit` hooks\n1. Tests embedded in `docker build`\n1. `CI` tests\n\n### Local `venv` testing\n\n```bash\n./tests/scripts/run_unit_tests.sh\n```\n\nAlso confirm the distribution can be installed by building and installing it into a different venv:\n\n```bash\nrm -rf dist/\npython3 setup.py sdist\n# new terminal\npython3 -m venv tmp-pycroquet-venv\nsource tmp-pycroquet-venv/bin/activate\npip install ~/pycroquet/dist/pycroquet-*.tar.gz\ndeactivate\nrm -rf tmp-pycroquet-venv\n```\n\n### Local `pre-commit` hooks\n\nThis project additionally uses git pre-commit hooks via the [pre-commit tool](https://pre-commit.com/).  These are concerned\nwith file formats and standards, not the actual execution of code.  See `./.pre-commit-config.yaml`.\n\n### Docker testing\n\nThe Docker build includes the unit tests, but removes many of the libraries before the final build stage.  Mainly for CI tests.\n\n### CI tests\n\nCI includes 2 additional tests, each based on the 2 datasets in the `./examples` directory.\n\n### Updating licence headers\n\nPlease use [skywalking-eyes](https://github.com/apache/skywalking-eyes).\n\nExpected workflow:\n\n1. Check state before modifying `.licenserc.yaml`:\n   - `docker run -it --rm -v $(pwd):/github/workspace apache/skywalking-eyes header check`\n   - You should get some 'valid' here, those without a header as 'invalid'\n1. Modify `.licenserc.yaml`\n1. Apply the changes:\n   - `docker run -it --rm -v $(pwd):/github/workspace apache/skywalking-eyes header fix`\n1. Add/commit changes\n\nThis is executed in the CI pipeline.\n\n*DO NOT* edit the header in the files, please modify the date component of `content` in `.licenserc.yaml`.  The only exception being:\n\n- `README.md`\n\nIf you need to make more extensive changes to the license carefully test the pattern is functional.\n\n## LICENSE\n\n```\nCopyright (c) 2021-2022\n\nAuthor: CASM/Cancer IT <cgphelp@sanger.ac.uk>\n\nThis file is part of pycroquet.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n1. The usage of a range of years within a copyright statement contained within\nthis distribution should be interpreted as being equivalent to a list of years\nincluding the first and last year specified and all consecutive years between\nthem. For example, a copyright statement that reads ‘Copyright (c) 2005, 2007-\n2009, 2011-2012’ should be interpreted as being identical to a statement that\nreads ‘Copyright (c) 2005, 2007, 2008, 2009, 2011, 2012’ and a copyright\nstatement that reads ‘Copyright (c) 2005-2012’ should be interpreted as being\nidentical to a statement that reads ‘Copyright (c) 2005, 2006, 2007, 2008,\n2009, 2010, 2011, 2012’.\n```\n\n<!-- refs -->\n\n[guide-format]: https://github.com/cancerit/pycroquet/wiki/Guide-library-format\n[quay-repo]: https://quay.io/repository/wtsicgp/pycroquet?tab=tags\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cancerit/pycroquet",
    "keywords": "",
    "license": "AGPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycroquet",
    "package_url": "https://pypi.org/project/pycroquet/",
    "platform": null,
    "project_url": "https://pypi.org/project/pycroquet/",
    "project_urls": {
      "Homepage": "https://github.com/cancerit/pycroquet"
    },
    "release_url": "https://pypi.org/project/pycroquet/1.6.0/",
    "requires_dist": null,
    "requires_python": ">= 3.9",
    "summary": "python Crispr Read to Oligo QUantification Enhancement Tool",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13372615,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b599956cad8097f11fd88993d10270b6bb574798144318609c08a72ed9546cd",
          "md5": "a9cedce77742968bca340f332e29cf55",
          "sha256": "3b1786f1af1786dc04340be173bc18ba460c9f0438edac5c03be68f219363e60"
        },
        "downloads": -1,
        "filename": "pycroquet-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a9cedce77742968bca340f332e29cf55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 41339,
        "upload_time": "2021-08-25T14:05:54",
        "upload_time_iso_8601": "2021-08-25T14:05:54.735318Z",
        "url": "https://files.pythonhosted.org/packages/4b/59/9956cad8097f11fd88993d10270b6bb574798144318609c08a72ed9546cd/pycroquet-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "465cdaa861b00288721081caa0ed95aa26a79b8e23c6b38c11d836affab67a87",
          "md5": "e3bf39039e09d2b829195f82f897ea77",
          "sha256": "048aaa76fd014f596d247bc1da7a94e7f8dbc6b53066ccc3d6be4ccfa9adb55a"
        },
        "downloads": -1,
        "filename": "pycroquet-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e3bf39039e09d2b829195f82f897ea77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 41336,
        "upload_time": "2021-08-25T15:22:59",
        "upload_time_iso_8601": "2021-08-25T15:22:59.168766Z",
        "url": "https://files.pythonhosted.org/packages/46/5c/daa861b00288721081caa0ed95aa26a79b8e23c6b38c11d836affab67a87/pycroquet-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48d02f728095cd0d577aff5d9e6fb724f17c835d4b08c7623250e02baa7c3ed3",
          "md5": "776d967cf4274b1864e5e41dc80a98c2",
          "sha256": "b8d22972a497e4d639cf6252b0840f3d9f577427d42f16d1e445da56baa38a1b"
        },
        "downloads": -1,
        "filename": "pycroquet-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "776d967cf4274b1864e5e41dc80a98c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 41668,
        "upload_time": "2021-10-04T14:55:10",
        "upload_time_iso_8601": "2021-10-04T14:55:10.021969Z",
        "url": "https://files.pythonhosted.org/packages/48/d0/2f728095cd0d577aff5d9e6fb724f17c835d4b08c7623250e02baa7c3ed3/pycroquet-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f58429b30a46255f3a3f8168605c5391a655c0e46aa839d9432ec4fe1f7700c",
          "md5": "74b3b7f3448890f1d8c6e9a8fd1dc3be",
          "sha256": "6619cd6586c1df7331cc697721a5fe8386345e937732210ec1da92bff8497e8f"
        },
        "downloads": -1,
        "filename": "pycroquet-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "74b3b7f3448890f1d8c6e9a8fd1dc3be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 41701,
        "upload_time": "2021-11-01T12:13:49",
        "upload_time_iso_8601": "2021-11-01T12:13:49.163536Z",
        "url": "https://files.pythonhosted.org/packages/3f/58/429b30a46255f3a3f8168605c5391a655c0e46aa839d9432ec4fe1f7700c/pycroquet-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e182ea9875c3046a158b80345b234abe88a61aa8a508d8fe6d508b4a7c18e8f0",
          "md5": "ff92ac412c229b7a9377661121f7de4e",
          "sha256": "c2f788aa332251456b652765860af10fd0b4e4e6bef439d7bcd9cf8f2a306863"
        },
        "downloads": -1,
        "filename": "pycroquet-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ff92ac412c229b7a9377661121f7de4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 42424,
        "upload_time": "2021-11-16T16:41:55",
        "upload_time_iso_8601": "2021-11-16T16:41:55.674595Z",
        "url": "https://files.pythonhosted.org/packages/e1/82/ea9875c3046a158b80345b234abe88a61aa8a508d8fe6d508b4a7c18e8f0/pycroquet-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60ab4c3ee1a2a5b94c148c6e510b096f7d2767fae5c20a4fee6c60f45e4a127d",
          "md5": "b640c8bee43855100c2c2f0134304cf8",
          "sha256": "10ca962688392b82edabd79cec80bd3e4a0f88a66c4a636999365a93cf665f29"
        },
        "downloads": -1,
        "filename": "pycroquet-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b640c8bee43855100c2c2f0134304cf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 43033,
        "upload_time": "2021-11-25T17:28:34",
        "upload_time_iso_8601": "2021-11-25T17:28:34.439693Z",
        "url": "https://files.pythonhosted.org/packages/60/ab/4c3ee1a2a5b94c148c6e510b096f7d2767fae5c20a4fee6c60f45e4a127d/pycroquet-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "695aee4e6d1d5dae7eaf018c2037ecc020119fa1d690ec245f2d93710c28b381",
          "md5": "58c3edbdaec94743e559ca0ea5cb4e89",
          "sha256": "780ee381ffe152ff43937e1fc8c53049ccecdbb5d10c0bca6ba10cfdcf0e6450"
        },
        "downloads": -1,
        "filename": "pycroquet-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "58c3edbdaec94743e559ca0ea5cb4e89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 43122,
        "upload_time": "2021-11-26T15:10:20",
        "upload_time_iso_8601": "2021-11-26T15:10:20.453377Z",
        "url": "https://files.pythonhosted.org/packages/69/5a/ee4e6d1d5dae7eaf018c2037ecc020119fa1d690ec245f2d93710c28b381/pycroquet-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b336fcab67553483e06129332fb9bfe72810658caf2055beb5011c686bbe9bfa",
          "md5": "785f28880288bb159c4fc31e5f6fdb8a",
          "sha256": "00b9e169920fa6ee625be5663f34b4ea249dc18e2d072fb73155898a23acca9c"
        },
        "downloads": -1,
        "filename": "pycroquet-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "785f28880288bb159c4fc31e5f6fdb8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 45498,
        "upload_time": "2021-12-07T11:41:01",
        "upload_time_iso_8601": "2021-12-07T11:41:01.820799Z",
        "url": "https://files.pythonhosted.org/packages/b3/36/fcab67553483e06129332fb9bfe72810658caf2055beb5011c686bbe9bfa/pycroquet-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "122bddfeaee3a3c87872222ebea5fc7e5199060e9fa39de77f8e921eb12a5781",
          "md5": "1141b9523f77f18126a612ae2276c886",
          "sha256": "dfe02dc38bd71ec47331249f9c8759cc0fb9c26bb0b02cdc828282fddddb0ab3"
        },
        "downloads": -1,
        "filename": "pycroquet-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1141b9523f77f18126a612ae2276c886",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 45712,
        "upload_time": "2022-02-24T08:44:14",
        "upload_time_iso_8601": "2022-02-24T08:44:14.221223Z",
        "url": "https://files.pythonhosted.org/packages/12/2b/ddfeaee3a3c87872222ebea5fc7e5199060e9fa39de77f8e921eb12a5781/pycroquet-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b03d97b9d4420fea9ae072b4ac37d6c7ffa718a541912653b08cc98b909f5984",
          "md5": "d30c77489b8d1b175027addbddabb388",
          "sha256": "a8317e635ea827f8e363ed379e64f796dee1d1201c779d411ca080f89959bf28"
        },
        "downloads": -1,
        "filename": "pycroquet-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d30c77489b8d1b175027addbddabb388",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.9",
        "size": 45771,
        "upload_time": "2022-04-01T10:45:09",
        "upload_time_iso_8601": "2022-04-01T10:45:09.287738Z",
        "url": "https://files.pythonhosted.org/packages/b0/3d/97b9d4420fea9ae072b4ac37d6c7ffa718a541912653b08cc98b909f5984/pycroquet-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b03d97b9d4420fea9ae072b4ac37d6c7ffa718a541912653b08cc98b909f5984",
        "md5": "d30c77489b8d1b175027addbddabb388",
        "sha256": "a8317e635ea827f8e363ed379e64f796dee1d1201c779d411ca080f89959bf28"
      },
      "downloads": -1,
      "filename": "pycroquet-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d30c77489b8d1b175027addbddabb388",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.9",
      "size": 45771,
      "upload_time": "2022-04-01T10:45:09",
      "upload_time_iso_8601": "2022-04-01T10:45:09.287738Z",
      "url": "https://files.pythonhosted.org/packages/b0/3d/97b9d4420fea9ae072b4ac37d6c7ffa718a541912653b08cc98b909f5984/pycroquet-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}