{
  "info": {
    "author": "Barron Henderson",
    "author_email": "barronh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Universal Kriging for CMAQ\n==========================\n\n    author: Barron H. Henderson\n    original date: 2020-02-01\n    last updated: 2020-02-05\n    contributors: <your name here>\n\nQuick Start\n-----------\n\nOpen Working.ipynb for a working example. Review config.json to understand\nthe options that are used.\n\nStatus\n------\n\nUnder active development. Currently, working with Ozone and PM for a single\ntest day. Only ready for developers to test and help develop.\n\nPrerequisites\n-------------\n\n* Python >= 3.6\n* numpy >= 2\n* pykrige >= 1.5.1\n* Optional:\n  * sklearn >= 0.24\n\nOverview\n--------\n\nApply Universal Krigging as implemented in `pykrige` to CMAQ fields. This\nis an example of regression kriging where the mean is first removed using\nanother model. The simplest example is a linear model, but cmaqkrig supports\nmultilinear regression and Random Forest as well. The options here will expand\nover time.\n\n* `yhat = m CMAQ + b`\n    * `CMAQ` : CMAQ concentrations in ppb\n    * `m`, `b` : parameters fit by scipy.stats.linregress where y is\n                 AQS 1st maximum 8-hour average ozone\n    * `yhat` : estimate based on CMAQ\n    * `e` : `e = obs - yhat`; bias that is assumed to have spatial correlation\n\n* `UK_ERROR = Krig(e)`\n* `UK_TOTAL = yhat + UK_ERROR`\n\nBlending\n--------\n\nIn addition, cmaqkrig provides a mechanism that allows the mean estimation\nmodel and the UniversalKriging system to be optimized in subdomains and then\nreconstruct a complete surface by blending. Subdomains currently support\nsplitting on latitIn addition to spatial subdomains, I use a urban/rural division as\nwell.\n\nMean Estimation Models\n----------------------\n\nBefore kriging the residual, the package estimates the best fit of the model to\nobservations using linear regression, multiple linear regression, or Random\nForest. In upcoming versions, we are likely to support extended voronoi\nneighbor averaging, and custom models using the scipy.optimize framework. The\nmodels for the mean are accessed via the config.json file \"regression_options\"\n\"model\" key.\n\n* scipy_linregress: provides access to scipy.stats.linregress for univariate\n  linear regression,\n* sklearn_LinearRegression: provides uni- or multi-variate regression via\n  sklearn.linear_model.LinearRegression, or\n* sklearn_RandomForestRegressor: provides Ensemble Random Forest modeling via\n  sklearn.ensemble.RandomForestRegressor\n* cmaqml_evna: provides an enhanced Voronoi Neighbor Averaging scheme. This\n  has been custom built and may need to be made more efficient. At this point,\n  the Voronoi neighbors are calculated for each point independently. Another\n  approach would be to calculate one set of Voronoi diagrams and then find\n  points within the single set of polygons.\n  \nAny sklearn model is capable of being added. The challenge is in finding the\nright way to export the model as a text representation for meta-data. To add\na new model from sklearn, follow the templates sklearn_LinearRegression and\nsklearn_RandomForestRegressor in scripts/models.py.\n\nPlease submit any additions back to the project.\n\nAnnotated Directory Structure\n-----------------------------\n\n```\n.\n|-- README.md\n|-- config.json\n|   # Fitting parameters and spatial domain splitting parameters\n|-- src/\n|   `-- cmaqml\n|       |  # CMAQ Machine Learning framework\n|       |-- models\n|       |   # Module of known Machine Learning modules\n|       |   # Currently includes regression, Random Forest, eVNA and others\n|       `-- obs\n|       # Module of known observation readers. Currently only AQS\n|-- scripts\n|   |-- validate_figs.py\n|   |   # Create validation figures including statistics from a single\n|   |   # withholding\n|   |-- validate_stats.py\n|   |   # Create validation statistics from multiple witholdings\n|   |-- make_maps.py\n|   |   # Script for visualization\n|   `-- fitting.py\n|       # not complete. Ideally, optimize UK settings for application to domains\n`-- examples/\n    |-- Working.ipynb\n    |   # Working example\n    |-- Blend.ipynb\n    |   # An example where multiple subset grids are run\n    |   # and then blended.\n    |-- input/\n    |   |-- daily_44201_20160715.zip\n    |   |   # subset of AQS; right now not part of repository for testing\n    |   |-- daily_88101_20160115.zip\n    |   |   # subset of AQS; right now not part of repository for testing\n    |   |-- dailyavg.LST.Y_24.2016fh.v531.108US2.01.nc\n    |   |   # A single day of PM25_FRM post-processed output from CMAQ\n    |   |-- O3_8HRMAX.LST.Y_24.2016fh.v531.108US2.5-9.nc\n    |   |   # A single day of O3_8HRMAX post-processed output from CMAQ\n    |   |-- gpw_v4_une_atotpopbt_densy_108US2.IOAPI.nc\n    |   |   # An IOAPI-like file with population density derived from the SEDAC\n    |   |   # Gridded Population World v4\n    |   |-- GRIDCRO2D.108US2.35L.160101.nc\n    |   |   # A single day file with terrain height\n    |   |-- GRIDDESC\n    |   |   # An IOAPI text file defining common grids\n    |   `-- make_test.py\n    |   # subset of CMAQ. right now not part of repository\n    `-- output\n        |-- UK.<YYYYMMDD>.<querykey>.nc\n        |   # outputs from cmaq_uk.py \n        |   # template where\n        |   #  * YYYYMMDD is the date\n        |   #  * querykey in: (EN|ES|WN|WS|ALL)_(URB|RUR|BOTH)\n        `-- UK.YYYYMMDD.FUSED.<querykey>.nc where \n            # outputs from blend.py\n            # where querykey in ALL_URB, ALL_RUR, oroutputs from blend.py\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/barronh/cmaqml",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cmaqml",
    "package_url": "https://pypi.org/project/cmaqml/",
    "platform": "",
    "project_url": "https://pypi.org/project/cmaqml/",
    "project_urls": {
      "Bug Tracker": "https://github.com/barronh/cmaqml/issues",
      "Homepage": "https://github.com/barronh/cmaqml"
    },
    "release_url": "https://pypi.org/project/cmaqml/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A simple package for applying Machine Learnign to CMAQ and associated obs.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11204672,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad9c1af777c4045fa0dc8c443c69ad454b2e64802fcdabfdbf8822e9b655a89c",
          "md5": "b5d5439ec3c0f4d4fc37dae7fe009fcd",
          "sha256": "1a1a407d0499783bc05c2e167528bf907356e4d65b0f679c67b28015e9321b46"
        },
        "downloads": -1,
        "filename": "cmaqml-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5d5439ec3c0f4d4fc37dae7fe009fcd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14915,
        "upload_time": "2021-08-17T18:44:14",
        "upload_time_iso_8601": "2021-08-17T18:44:14.383932Z",
        "url": "https://files.pythonhosted.org/packages/ad/9c/1af777c4045fa0dc8c443c69ad454b2e64802fcdabfdbf8822e9b655a89c/cmaqml-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82552f623cd722609e9ce97d50d94456fc25e73290226e643f2f67e8220c947a",
          "md5": "d4117b304754379ecbfc18a466852dfb",
          "sha256": "a25c9fa9a8915f465b01c10c9c4902c053d704d362fb9ce9f14d5571450f75d9"
        },
        "downloads": -1,
        "filename": "cmaqml-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d4117b304754379ecbfc18a466852dfb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 191359,
        "upload_time": "2021-08-17T21:07:09",
        "upload_time_iso_8601": "2021-08-17T21:07:09.061860Z",
        "url": "https://files.pythonhosted.org/packages/82/55/2f623cd722609e9ce97d50d94456fc25e73290226e643f2f67e8220c947a/cmaqml-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82552f623cd722609e9ce97d50d94456fc25e73290226e643f2f67e8220c947a",
        "md5": "d4117b304754379ecbfc18a466852dfb",
        "sha256": "a25c9fa9a8915f465b01c10c9c4902c053d704d362fb9ce9f14d5571450f75d9"
      },
      "downloads": -1,
      "filename": "cmaqml-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d4117b304754379ecbfc18a466852dfb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 191359,
      "upload_time": "2021-08-17T21:07:09",
      "upload_time_iso_8601": "2021-08-17T21:07:09.061860Z",
      "url": "https://files.pythonhosted.org/packages/82/55/2f623cd722609e9ce97d50d94456fc25e73290226e643f2f67e8220c947a/cmaqml-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}