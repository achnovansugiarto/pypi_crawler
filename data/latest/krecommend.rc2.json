{
  "info": {
    "author": "Saheed Azeez",
    "author_email": "saheedniyi02@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "# <a href=\"https://github.com/saheedniyi02/krecommend\">krecommend</a>\nA python package for creating content-based text recommender systems on pandas dataframes and SQLAlchemy tables.\n\nThe recommendations are gotten by using cosine similarity to get similar items to a requested item and the top k similar items are then recommended.\n### Dependencies\nkrecommend requires the following dependencies:\n\n<ul><li>Python</li>\n<li>NumPy</li>\n<li>SciPy</li>\n<li>Scikit-learn</li>\n<li>Pandas for dealing with dataframes</li>\n<li>SQLAlchemy for dealing with SQL tables</li></ul>\n\n## Installation\nInstallation can be done with `pip`:\n```shell\n$ pip install krecommend\n```\n## How to use \nThe detailed examples can be found <a href=\"https://github.com/saheedniyi02/Test-krecommend\">here</a>\n#### For a pandas data frame.\n#Provided with a simple dataframe with index \"id\" ,\ntext (string) columns \"title\" and \"content\",\"int\" column \"Views\".\n\n##### load the dataframe\n```py\nimport pandas as pd\ndataframe = pd.read_csv(\"file_path\", index_col=0)\n#set the id as the index\ndataframe.set_index(\"id\")\n```\n##### import,initialize and fit on a pandas dataframe\n```py\nrecommender = KRecommend(k=2)\nrecommender.fit(dataframe, text_columns=[\"content\",\"title\"])\n\n```\n##### get recommendations.\n```py\ntest_content=\"This is a test content\"\ntest_title=\"This is a test title\"\n#the .predict method accepts lists only, even if the length is 1.\nrecommendations=recommender.predict(test=[test_content,test_title])\n```\n\nThe returned recommendations is a simple python dictionary with length (k, the number of requested recommendations)\\\nEach key in the dictionary represents the index (value of the \"id\" in this case) of that particular\nrecommendation in the dataframe, while the value represents the similarity (in %),The items in the dictionary are arranged in descending order of the similarity.\n\n\n\n\n#### For an SQL alchemy table.\n##### A simple SQLAlchemy table (ensure you add items to your table)\n```py\nfrom curses import meta\nfrom sqlalchemy import create_engine, MetaData, Column, Integer, String, Table\n\n#database engine\nengine = create_engine(\"sqlite:///database.db\", echo=True)\nmeta = MetaData()\n\n\n\"\"\"a table with name 'Posts', primary_key 'id', text (string) columns 'title' and 'content' and Int column 'views' \"\"\"\nposts = Table(\n    \"Posts\",\n    meta,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"title\", String),\n    Column(\"content\", String),\n    Column(\"views\",Integer)\n)\n\n\n\n```\n###### import,initialize and fit on SQLAlchemy table\n```py\n#database connection\nconnection = engine.connect()\nfrom krecommend.recommend import KRecommend\n#k represents the number of documents to be recommend\nrecommender = KRecommend(k=4)\nrecommender.fit_on_sql_table(table_name=\"Posts\",id_column= \"id\",text_columns=[\"content\",\"title\"],connection= connection)\n#close connection\nconnection.close()\n```\n\n###### get recommendations.\n```py\ntest_content=\"This is a test content\"\ntest_title=\"This is a test title\"\n#the .predict_on_sql_table method accepts lists only, even if the length is 1.\nrecommendations=recommender.predict_on_sql_table(test=[test_content,test_title])\n```\nThe returned recommendations is a simple python dictionary with length (k, the number of requested recommendations)\\\nEach key in the dictionary represents the primary_key of that particular\nrecommendation in the database, while the value represents the similarity (in %).The items in the dictionary are arranged in descending order of the similarity.\n\n\n\nThe primary key can then be used to query the table to get more information on the recommendations.\n\n\n\n#### For a flask-sqlalchemy table\n###### create the simple Flask-SQLAlchemy table (ensure you add items to your table)\n```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///database.db\"\ndb = SQLAlchemy(app)\n\n\"\"\"a table with name 'Posts', primary_key 'id', text (string) columns 'title' and 'content' and Int column 'views' \"\"\"\nclass Posts(db.Model):\n    __tablename__=\"Posts\"\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(64))\n    content = db.Column(db.String(64))\n    views = db.Column(db.Integer, unique=True, index=True, nullable=False)\n\n```\n\n###### import,initialize and fit on SQLAlchemy table\n```py\n\nfrom krecommend.recommend import KRecommend\n#k represents the number of documents to be recommend\n#database connection\nconnection=db.engine.connect()\nrecommender = KRecommend(k=4)\nrecommender.fit_on_sql_table(table_name=\"Posts\",id_column= \"id\",text_columns=[\"content\",\"title\"],connection= connection)\n#close connection\nconnection.close()\n```\nThe recommendations can easily be gotten using the `.predict_on_sql_table` as seen above.\n\n#### Warning and possible sources of error\n<ol><li>Only text columns are accepted in the text_columns parameter.\nInteger or float columns will return an error.</li><br>\n<li>KRecommend only saves information on your table at the time it is fitted, any information on your table added after\nKRecommend has been fitted won't exist in the recommendations generated.\n<ul><li>Implications: <ol><li>A recommendation might have been deleted (after fitting) from the table as at the time it is being recommend so it might no longer be found in the database.</li>\n              <li>Some content might have been modified which might affect the strength of the recommendations.<li></li></ol>\n<li>Solution: it is important to fit KRecommend again at intervals,so changes in contents will be reflected in the recommendations.For example you can schedule  the `.fit_on_sql_table` method to run every hour (or any interval of your choice)</li></li></ul>\n<li>It is good practice to close the connection after fitting.</li>\n<li>There must be k+1 (k represents the requested no of recommendations) items in the requested table.</li>\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/saheedniyi02/KRecommend",
    "keywords": "Data Science,machine learning,web development,software development,sql,pandas",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "krecommend",
    "package_url": "https://pypi.org/project/krecommend/",
    "platform": null,
    "project_url": "https://pypi.org/project/krecommend/",
    "project_urls": {
      "Homepage": "https://github.com/saheedniyi02/KRecommend"
    },
    "release_url": "https://pypi.org/project/krecommend/0.0.2/",
    "requires_dist": [
      "pandas",
      "sqlalchemy",
      "numpy",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "A Python library for easily building  recommender systems for SQLAlchemy tables and pandas dataframe",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14055446,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05cbb662eeda33b79fe0d07d557c8efaa310917e779d639eab61e871e7be0a9a",
          "md5": "1c8bdcbb4b82f1cf1c31da20dcbdac14",
          "sha256": "647ef9d6da7ce50aecefbe0e511dde3fe36599688a97cd6486e3dcffb3efc0fd"
        },
        "downloads": -1,
        "filename": "krecommend-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c8bdcbb4b82f1cf1c31da20dcbdac14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6781,
        "upload_time": "2022-06-02T13:22:43",
        "upload_time_iso_8601": "2022-06-02T13:22:43.368560Z",
        "url": "https://files.pythonhosted.org/packages/05/cb/b662eeda33b79fe0d07d557c8efaa310917e779d639eab61e871e7be0a9a/krecommend-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07d31e01a326ff9c943cd3346b4e48b83e3b16b87c02cfd64f8b32979effceee",
          "md5": "c1214404d5b54a7f417e29d2cea354f4",
          "sha256": "5ec8bd7020a92332e1dfe739ede4ad4d9f75efd8b36329b77b561af51a8ca457"
        },
        "downloads": -1,
        "filename": "krecommend-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c1214404d5b54a7f417e29d2cea354f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7458,
        "upload_time": "2022-06-02T13:22:46",
        "upload_time_iso_8601": "2022-06-02T13:22:46.152423Z",
        "url": "https://files.pythonhosted.org/packages/07/d3/1e01a326ff9c943cd3346b4e48b83e3b16b87c02cfd64f8b32979effceee/krecommend-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68a0a8d413d4f59ed1f6d903cf6863dcdce0da3d687c0263660dbcad9028dd9a",
          "md5": "e6f1f950e7cb25a5ea772145b880b535",
          "sha256": "d1948a977c0362e876dd56346b6eb2f4488a91acfd6338f611f25e3a0e7226ea"
        },
        "downloads": -1,
        "filename": "krecommend-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6f1f950e7cb25a5ea772145b880b535",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6845,
        "upload_time": "2022-06-07T10:16:53",
        "upload_time_iso_8601": "2022-06-07T10:16:53.298213Z",
        "url": "https://files.pythonhosted.org/packages/68/a0/a8d413d4f59ed1f6d903cf6863dcdce0da3d687c0263660dbcad9028dd9a/krecommend-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4626c5a29c3ee1d13d9790f459b01e1740fc69f26083a6b2137fd470503c0e2",
          "md5": "70cf88e6b88b962e7aea0634a0cd8665",
          "sha256": "0d520766baa8791778d36a7ca2c00d9ca8b37eeea3e1a848387e97acbc5b8845"
        },
        "downloads": -1,
        "filename": "krecommend-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "70cf88e6b88b962e7aea0634a0cd8665",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6895,
        "upload_time": "2022-06-07T10:16:55",
        "upload_time_iso_8601": "2022-06-07T10:16:55.694674Z",
        "url": "https://files.pythonhosted.org/packages/a4/62/6c5a29c3ee1d13d9790f459b01e1740fc69f26083a6b2137fd470503c0e2/krecommend-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68a0a8d413d4f59ed1f6d903cf6863dcdce0da3d687c0263660dbcad9028dd9a",
        "md5": "e6f1f950e7cb25a5ea772145b880b535",
        "sha256": "d1948a977c0362e876dd56346b6eb2f4488a91acfd6338f611f25e3a0e7226ea"
      },
      "downloads": -1,
      "filename": "krecommend-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e6f1f950e7cb25a5ea772145b880b535",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6845,
      "upload_time": "2022-06-07T10:16:53",
      "upload_time_iso_8601": "2022-06-07T10:16:53.298213Z",
      "url": "https://files.pythonhosted.org/packages/68/a0/a8d413d4f59ed1f6d903cf6863dcdce0da3d687c0263660dbcad9028dd9a/krecommend-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4626c5a29c3ee1d13d9790f459b01e1740fc69f26083a6b2137fd470503c0e2",
        "md5": "70cf88e6b88b962e7aea0634a0cd8665",
        "sha256": "0d520766baa8791778d36a7ca2c00d9ca8b37eeea3e1a848387e97acbc5b8845"
      },
      "downloads": -1,
      "filename": "krecommend-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "70cf88e6b88b962e7aea0634a0cd8665",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6895,
      "upload_time": "2022-06-07T10:16:55",
      "upload_time_iso_8601": "2022-06-07T10:16:55.694674Z",
      "url": "https://files.pythonhosted.org/packages/a4/62/6c5a29c3ee1d13d9790f459b01e1740fc69f26083a6b2137fd470503c0e2/krecommend-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}