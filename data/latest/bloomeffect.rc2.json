{
  "info": {
    "author": "Yoann Berenguer",
    "author_email": "yoyoberenguer@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Cython",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# BloomEffect \n\nBloom artefact  \n\n![alt text](https://raw.githubusercontent.com/yoyoberenguer/BloomEffect/version-1.0.1/Assets/bloom_bpf_values.png)\n\nThis library contains Gaussian blur kernel 5x5 algoritms, bright pass filters and bloom \nmethods designed to work with ```Pygame``` and ```python```.\n\nIt provides fast algorithms to create ```2D bloom effect``` \nfor pygame.Surface (SDL suface) or images (PNG, JPG etc), see \npygame image format compatibility for more information.\nThese algorithms can be used offline or in real time processing for \nIndy Game such as pygame or Arcade game as long as the game resolution \ndo not exceed 1280x1024. A modern CPU with at least 8 \nlogical processor is required to keep the game running between 30-60 fps.\n\nFor minimum hardware specifications, the library can be used for \npost-processing (surface transformation such as blur and bloom effect)\nbefore your game main loop e.g :\nTexturing effect, Sprite or SpriteSheet additional effect. \n   \nThe algorithms are written using ```cython``` with OPENMP capability (multi-\nprocessing). This library is build by default with the flag OPENMP, \nproviding the best performance for real time processing. \nYou can also turn off the multi-processing to balance evenly the \nCPU load between your game and the real time bloom processing. \nPlease refer to the section ```OPENMP``` for more details on how to turn\nthe multi-processing on/off. \n\nThe bloom effect can also be used for different applications such \nas : image processing, 2D light effect, spritesheet, demos and \n```text enhancement```, neon effect etc \n\n\nThe project is under the ```MIT license```\n\n### Bloom effect definition (from wikipedia) :\nBloom (sometimes referred to as light bloom or glow) is a computer\ngraphics effect used in video games, demos, and high dynamic range\nrendering (HDRR) to reproduce an imaging artifact of real-world cameras.\nThe effect produces fringes (or feathers) of light extending from the\nborders of bright areas in an image, contributing to the illusion of\nan extremely bright light overwhelming the camera or eye capturing the\nscene. It became widely used in video games after an article on the \ntechnique was published by the authors of Tron 2.0 in 2004.\nREF https://en.wikipedia.org/wiki/Bloom_(shader_effect)\n\n* Right image with bloom effect \n\n\n![alt text](https://raw.githubusercontent.com/yoyoberenguer/BloomEffect/version-1.0.1/Assets/i2_bloom.png)\n\n![alt text](https://raw.githubusercontent.com/yoyoberenguer/BloomEffect/version-1.0.1/Assets/i3_bloom.png)\n\n\n\n## Installation \ncheck the link for newest version https://pypi.org/project/BloomEffect/\n```\npip install BloomEffect \n# or version 1.0.2  \npip install BloomEffect==1.0.2\n```\n\n* version installed \n* Imported module is case sensitive \n```python\n>>>from BloomEffect.bloom import __version__\n>>>__version__\n```\n\n## Bloom technique\n```\nAcronyme : bpf (bright pass filter)\n\n1) First we apply a bright pass filter to the pygame surface(SDL surface) using one \n   of the following method:\n   bpf24_c for 24-32bit surface with or without alpha transparency channel or \n   bpf32_c compatible with 32-bit image format containing alpha transparency (per-pixel alpha) \n   These two methods have a threshold argument that can be adjust in order to filter bright \n   pixels and control the overall image luminence. \n   \n2) The bpf image is then downscale into sub-surface x2, x4, x8, x16 using \n   pygame transform.scale method. No need to use smoothscale (bilinear filtering method).\n  \n3) A Gaussian blur 5x5 filter is apply on each of the downsized bpf images (the variable smmooth \n   define the number of passes). \n  \n4) The blurred sub-surface images are up-scale using a bilinear filtering method (pygame \n   smoothscale method. Note : Using an un-filtered rescaling method will pixelate the final\n   output image. \n  \n5) To create the final bloom effect, all the sub-surfaces are blit to the original surface \n   with the special flag BLEND_RGB_ADD (additive blend mode effect).\n```\n\n![alt text](https://raw.githubusercontent.com/yoyoberenguer/BloomEffect/version-1.0.1/BLOOM.png)\n\n## Blur method details\n* The mask is set be default to None (this feature is not available yet) for \n  the blur algorithms\n```cython\nblur5x5_array24(rgb_array_,  mask=None)\nblur5x5_array32(rgba_array_, mask=None)\n\nblur5x5_array24_inplace(rgb_array_,  mask=None)\nblur5x5_array32_inplace(rgba_array_, mask=None)\n```\n\n## Bloom method details\n* The mask argument is working for bloom_effect24, bloom_effect32\n```cython\nbloom_effect24(surface_, threshold_, smooth_ = 1, mask_ = None, fast_ = False)\nbloom_effect32(surface_, threshold_, smooth_ = 1, mask_ = None, fast_ = False)\n\nbloom_effect24_inplace(surface_, threshold_, fast_ = False)\nbloom_effect32_inplace(surface_, threshold_, fast_ = False)\n```\n\n## Quick example\n\n```python\nimport pygame\nfrom BloomEffect.bloom import *\nimport time\n\nwidth, height = 512 + 128, 128\nscreen = pygame.display.set_mode((width, height))\npygame.display.set_caption(\"Bloom effect\")\n\nimage = pygame.image.load('BloomEffect/Assets/Aliens.jpg').convert()\nimage = pygame.transform.smoothscale(image, (128, 128))\n\nbloom_image_128 = bloom_effect24(image, 128)\nbloom_image_100 = bloom_effect24(image, 100)\nbloom_image_80 = bloom_effect24(image, 80)\nbloom_image_20 = bloom_effect24(image, 20)\n\ntimer = time.time()\nwhile 1:\n  pygame.event.pump()\n\n  screen.blit(image, (0, 0))\n  screen.blit(bloom_image_128, (128, 0))\n  screen.blit(bloom_image_100, (256, 0))\n  screen.blit(bloom_image_80, (384, 0))\n  screen.blit(bloom_image_20, (512, 0))\n  if time.time() - timer > 5:\n    break\n\n  pygame.display.flip()\n\n```\n\n\n#### - Smooth factor\n\nThe ```smooth``` option allows to create realistic bloom effect by smoothing the sub-surface \nwith a define number of blur passes. \nWith multiple blur passes, the light source will spread evenly accross the image without \naltering the image quality. \n\n* Left image with smooth = 1 and right with smooth 5, 8, 10\n\nThe smooth effect (right image) produce a less intense bloom effect on the planet surface \nand on the first moon (light refraction). With blur>1 the image looks more sharp and the \nlight source appear to be more evenly spread \n\n![alt text](https://raw.githubusercontent.com/yoyoberenguer/BloomEffect/version-1.0.1/Assets/bloom_smooth_values.png)\n\n\n#### - Fast flag\n\nThe ```fast``` flag will boost the overall performance of the bloom algorithm. \nWhen fast is True, only the smallest sub-surface (x16) is used for the bloom \neffect providing a good compromise between speed and effect quality. \n\n#### - Still not fast enough ?\n\nIf you are still looking for better performance, you can also downscale the \nimage time 2 and rescale it to its original size after processing. \nHowever this technique has a limit, as downscaling / upscaling the image will \nalter the image quality and provide a lower resolution to a texure/image, e.g\nJagged lines or pixalated aspect when the downsacle factor is too high). To minimize\nthe image quality degradation, use pygame smoothscale (bilineare filtering) instead \nof the method scale\n\n## Building cython code\n\n#### When do you need to compile the cython code ? \n```\nEach time you are modifying any of the following files \nbloom.pyx, bloom.pxd, __init__.pxd or any external C code if applicable\n\n1) open a terminal window\n2) Go in the main project directory where (bloom.pyx & \n   bloom.pxd files are located)\n3) run : python setup_bloom.py build_ext --inplace --force\n\nIf you have to compile the code with a specific python \nversion, make sure to reference the right python version \nin (python38 setup_bloom.py build_ext --inplace)\n\nIf the compilation fail, refers to the requirement section and \nmake sure cython and a C-compiler are correctly install on your\n system.\n- A compiler such visual studio, MSVC, CGYWIN setup correctly on \n  your system.\n  - a C compiler for windows (Visual Studio, MinGW etc) install \n  on your system and linked to your windows environment.\n  Note that some adjustment might be needed once a compiler is \n  install on your system, refer to external documentation or \n  tutorial in order to setup this process.e.g https://devblogs.\n  microsoft.com/python/unable-to-find-vcvarsall-bat/\n```\n## OPENMP \nIn the main project directory, locate the file ```setup_bloom.py```.\nThe compilation flag /openmp is used by default.\nTo override the OPENMP feature and disable the multi-processing remove the flag ```/openmp```\n\n####\n```setup_bloom.py```\n```python\n\next_modules=cythonize([\n        Extension(\"bloom\", [\"BloomEffect/bloom.pyx\"],\n                  extra_compile_args=[\"/openmp\", \"/Qpar\", \"/fp:fast\", \"/O2\", \"/Oy\", \"/Ot\"], language=\"c\")]),\n```\nSave the change and build the cython code with the following instruction:\n\n```python setup_bloom.py build_ext --inplace --force```\n\nIf the project build successfully, the compilation will end up with the following lines\n```\nGenerating code\nFinished generating code\n```\nIf you have any compilation error refer to the section ```Building cython code``` and make sure your system has the following program & libraries installed. Check also that the code is not running in a different thread.  \n- Pygame version >3\n- numpy >= 1.18\n- cython >=0.29.21 (C extension for python) \n- A C compiler for windows (Visual Studio, MinGW etc)\n\n## Credit\nYoann Berenguer \n\n## Dependencies :\n```\nnumpy >= 1.18\npygame >=2.0.0\ncython >=0.29.21\n```\n\n## License :\n\nMIT License\n\nCopyright (c) 2019 Yoann Berenguer\n\nPermission is hereby granted, free of charge, to any person \nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without \nrestriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or \nsell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following \nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES \nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\n## Testing: \n```python\n>>> import BloomEffect\n>>> from BloomEffect import *\n>>> run_testsuite()\n```\n\n## Timing :\nIn the directory tests under the main project path\n\nC:...tests\\python profiling.py\n```\nTESTING WITH IMAGE 1280x1024\n\nPerformance testing blur5x5_array24                 per call 0.01726947 overall time 0.17269 for 10\nPerformance testing blur5x5_array32                 per call 0.01853967 overall time 0.1854 for 10\nPerformance testing blur5x5_array32_inplace         per call 0.01757621 overall time 0.17576 for 10\nPerformance testing blur5x5_array24_inplace         per call 0.01774338 overall time 0.17743 for 10\nPerformance testing bloom_effect_array24            per call 0.01998457 overall time 0.19985 for 10\nPerformance testing bloom_effect_array32            per call 0.06955424 overall time 0.69554 for 10\nPerformance testing bloom_effect_array24_inplace    per call 0.01692769 overall time 0.16928 for 10\nPerformance testing bloom_effect_array32_inplace    per call 0.01692682 overall time 0.16927 for 10\n\nPerformance testing test_bpf24_c                    per call 0.00290582 overall time 0.02906 for 10\nPerformance testing test_bpf32_c                    per call 0.00561693 overall time 0.05617 for 10\nPerformance testing test_bpf24_inplace              per call 0.00192679 overall time 0.01927 for 10\nPerformance testing test_bpf32_inplace              per call 0.00187691 overall time 0.01877 for 10\nPerformance testing build_mask_from_surface         per call 0.00380404 overall time 0.03804 for 10\nPerformance testing filtering24                     per call 0.00337253 overall time 0.03373 for 10\nPerformance testing filtering32                     per call 0.00324777 overall time 0.03248 for 10\nPerformance testing test_array32_rescale            per call 0.00543668 overall time 0.05437 for 10\n```\n\n### Links \n```\nLinks\nhttps://learnopengl.com/Advanced-Lighting/Bloom\nhttps://kalogirou.net/2006/05/20/how-to-do-good-bloom-for-hdr-rendering/\nhttps://catlikecoding.com/unity/tutorials/advanced-rendering/bloom/\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yoyoberenguer/BloomEffect",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BloomEffect",
    "package_url": "https://pypi.org/project/BloomEffect/",
    "platform": "any",
    "project_url": "https://pypi.org/project/BloomEffect/",
    "project_urls": {
      "Bug Reports": "https://github.com/yoyoberenguer/BloomEffect/issues",
      "Homepage": "https://github.com/yoyoberenguer/BloomEffect",
      "Source": "https://github.com/yoyoberenguer/BloomEffect"
    },
    "release_url": "https://pypi.org/project/BloomEffect/1.0.2/",
    "requires_dist": [
      "setuptools (>=49.2.1)",
      "Cython (>=0.28)",
      "numpy (>=1.18)",
      "pygame (>=2.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Pygame bloom effect (shader effect)",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12041354,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ab3de49564931a6a95e9d52e1c29557b012979e37ee78c828be21b6bc576e62",
          "md5": "beadc85057af0796a82c9774a3433fed",
          "sha256": "20b71a751637217387925ed8e5069ae9db6572048766b5e7fe64fe59fa902630"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.1-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "beadc85057af0796a82c9774a3433fed",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.0",
        "size": 5327422,
        "upload_time": "2021-11-14T12:34:33",
        "upload_time_iso_8601": "2021-11-14T12:34:33.111745Z",
        "url": "https://files.pythonhosted.org/packages/3a/b3/de49564931a6a95e9d52e1c29557b012979e37ee78c828be21b6bc576e62/BloomEffect-1.0.1-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06b47f1183f5960ed585a5522f6abff259d0423893694d267c64ea99a9156d68",
          "md5": "a822c54cecf3c563fe35a2ccc81380c6",
          "sha256": "b6e442fba03eff71fc163f56c305e24b0af1baa4875dcb9c8d01bfe6d41aff48"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.1-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a822c54cecf3c563fe35a2ccc81380c6",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": ">=3.0",
        "size": 5320952,
        "upload_time": "2021-11-14T12:34:41",
        "upload_time_iso_8601": "2021-11-14T12:34:41.190341Z",
        "url": "https://files.pythonhosted.org/packages/06/b4/7f1183f5960ed585a5522f6abff259d0423893694d267c64ea99a9156d68/BloomEffect-1.0.1-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd1d462c50d4cc1e8d35243229c9be09ea4bdbaa5fc43913e031dd34b663862f",
          "md5": "d45fa9b550a1720d2a615c799a2f425a",
          "sha256": "494b7d5c841c8640a94203cf36afb8b2f4356ca3415dc3d4872b259036a02871"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.1-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "d45fa9b550a1720d2a615c799a2f425a",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.0",
        "size": 5321318,
        "upload_time": "2021-11-14T12:34:49",
        "upload_time_iso_8601": "2021-11-14T12:34:49.133274Z",
        "url": "https://files.pythonhosted.org/packages/fd/1d/462c50d4cc1e8d35243229c9be09ea4bdbaa5fc43913e031dd34b663862f/BloomEffect-1.0.1-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1d597ab68f602c46fc1cba87122269a41f923dfee7a82d8bbbbf0d65580fe9c",
          "md5": "e5ef28c4d70bf603b1b12a44e2a22d32",
          "sha256": "c421331d219aad35abe5058dd02d5236df6e336f8a1bd3f1319fbe4467fe363d"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.1-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e5ef28c4d70bf603b1b12a44e2a22d32",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.0",
        "size": 5330031,
        "upload_time": "2021-11-14T12:34:57",
        "upload_time_iso_8601": "2021-11-14T12:34:57.185795Z",
        "url": "https://files.pythonhosted.org/packages/c1/d5/97ab68f602c46fc1cba87122269a41f923dfee7a82d8bbbbf0d65580fe9c/BloomEffect-1.0.1-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f7083b0fff4dfb735faa426ce20c35f08e78b4f7ecc6f9b77e99c56386f5f36",
          "md5": "d0cc3bb3c48b131e496b2e6534ae43e6",
          "sha256": "513cdfd298f62baaafd7c6a86822f57ed0f54b4e5ad67e88ead24c6f2c49c986"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.1-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "d0cc3bb3c48b131e496b2e6534ae43e6",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.0",
        "size": 5327396,
        "upload_time": "2021-11-14T12:35:05",
        "upload_time_iso_8601": "2021-11-14T12:35:05.003868Z",
        "url": "https://files.pythonhosted.org/packages/9f/70/83b0fff4dfb735faa426ce20c35f08e78b4f7ecc6f9b77e99c56386f5f36/BloomEffect-1.0.1-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2862e41eddc8f0754085f4eb61d507ecb7eee95a1912e82726d305c75ec01c44",
          "md5": "f8cbb0dc3805c493e6aec5f8fee7de9b",
          "sha256": "194a8671e620e42ce3e6056d8c57d458342179e64ca0409498ad41ae96710b99"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f8cbb0dc3805c493e6aec5f8fee7de9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 5168011,
        "upload_time": "2021-11-14T12:35:12",
        "upload_time_iso_8601": "2021-11-14T12:35:12.496871Z",
        "url": "https://files.pythonhosted.org/packages/28/62/e41eddc8f0754085f4eb61d507ecb7eee95a1912e82726d305c75ec01c44/BloomEffect-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f11847f17a21fb600cb19adf4834ba5a37ce8d6e0fba005e849d18b36284fde0",
          "md5": "ba43b1746b559897a190203fb3428bf6",
          "sha256": "7f284d8c7c0c6f13314ebdd2d3d1100e9d519809628716161d2bfb6c5a1ad123"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.2-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "ba43b1746b559897a190203fb3428bf6",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.6",
        "size": 10294213,
        "upload_time": "2021-11-16T20:39:36",
        "upload_time_iso_8601": "2021-11-16T20:39:36.779894Z",
        "url": "https://files.pythonhosted.org/packages/f1/18/47f17a21fb600cb19adf4834ba5a37ce8d6e0fba005e849d18b36284fde0/BloomEffect-1.0.2-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b27ceb018f8c54c25c6e29d21651e36b970b28457a18d13c9086bdb8ca666c1",
          "md5": "e820f5a5cc341e5b73ae49946dd2f67e",
          "sha256": "c453155ac1aaaede615a9191fbbb12f8956f95b1751c1763f8574e4024801f3a"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.2-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e820f5a5cc341e5b73ae49946dd2f67e",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": ">=3.6",
        "size": 10287854,
        "upload_time": "2021-11-16T20:39:50",
        "upload_time_iso_8601": "2021-11-16T20:39:50.558498Z",
        "url": "https://files.pythonhosted.org/packages/4b/27/ceb018f8c54c25c6e29d21651e36b970b28457a18d13c9086bdb8ca666c1/BloomEffect-1.0.2-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "009243c9a12cccd76c51f6eaed347a0b3cc9cc9ae1d04d6408533b64a2bf37e7",
          "md5": "070ba799b733128ab6e1ccecb70d33ec",
          "sha256": "a5d836065c18c0f5ad78aefca7c7ffd11b5a6f2d947e7060044710ae38b5fc30"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.2-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "070ba799b733128ab6e1ccecb70d33ec",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": ">=3.6",
        "size": 10288163,
        "upload_time": "2021-11-16T20:40:04",
        "upload_time_iso_8601": "2021-11-16T20:40:04.927703Z",
        "url": "https://files.pythonhosted.org/packages/00/92/43c9a12cccd76c51f6eaed347a0b3cc9cc9ae1d04d6408533b64a2bf37e7/BloomEffect-1.0.2-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bab482fb555825878d2a742acb786ad879ea59a120dc76a4a07b104418f7c97",
          "md5": "c403579464d9d7c4747b3910f1f15ab5",
          "sha256": "473ccdbf52909d0ff77f34472e29376de1e0d793dad63274f757b1abd7861219"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.2-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "c403579464d9d7c4747b3910f1f15ab5",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6",
        "size": 10296889,
        "upload_time": "2021-11-16T20:40:19",
        "upload_time_iso_8601": "2021-11-16T20:40:19.182496Z",
        "url": "https://files.pythonhosted.org/packages/2b/ab/482fb555825878d2a742acb786ad879ea59a120dc76a4a07b104418f7c97/BloomEffect-1.0.2-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d076c838fa08b58caecab6df80b1a361dfe5ebac91a1dee3eb051694d762622",
          "md5": "8902f34d43a01cc4b6c3529ebf1b506d",
          "sha256": "47b0152e92f8e3b49e732131424e30235dfe3077ba28fe89818eb628e066383b"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.2-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "8902f34d43a01cc4b6c3529ebf1b506d",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 10294287,
        "upload_time": "2021-11-16T20:40:33",
        "upload_time_iso_8601": "2021-11-16T20:40:33.328741Z",
        "url": "https://files.pythonhosted.org/packages/3d/07/6c838fa08b58caecab6df80b1a361dfe5ebac91a1dee3eb051694d762622/BloomEffect-1.0.2-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac14840a693a53e894b4962bfb4b1c4dd2ec427ab26f6c2f12c037fcca8f4990",
          "md5": "1abc02efd3272290138f62ac179c39eb",
          "sha256": "40f088d5f3627dc71c7d7317f96a175e84a8135636a75541cc2a17b58e45065e"
        },
        "downloads": -1,
        "filename": "BloomEffect-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1abc02efd3272290138f62ac179c39eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5172510,
        "upload_time": "2021-11-16T20:40:41",
        "upload_time_iso_8601": "2021-11-16T20:40:41.422456Z",
        "url": "https://files.pythonhosted.org/packages/ac/14/840a693a53e894b4962bfb4b1c4dd2ec427ab26f6c2f12c037fcca8f4990/BloomEffect-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f11847f17a21fb600cb19adf4834ba5a37ce8d6e0fba005e849d18b36284fde0",
        "md5": "ba43b1746b559897a190203fb3428bf6",
        "sha256": "7f284d8c7c0c6f13314ebdd2d3d1100e9d519809628716161d2bfb6c5a1ad123"
      },
      "downloads": -1,
      "filename": "BloomEffect-1.0.2-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "ba43b1746b559897a190203fb3428bf6",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.6",
      "size": 10294213,
      "upload_time": "2021-11-16T20:39:36",
      "upload_time_iso_8601": "2021-11-16T20:39:36.779894Z",
      "url": "https://files.pythonhosted.org/packages/f1/18/47f17a21fb600cb19adf4834ba5a37ce8d6e0fba005e849d18b36284fde0/BloomEffect-1.0.2-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b27ceb018f8c54c25c6e29d21651e36b970b28457a18d13c9086bdb8ca666c1",
        "md5": "e820f5a5cc341e5b73ae49946dd2f67e",
        "sha256": "c453155ac1aaaede615a9191fbbb12f8956f95b1751c1763f8574e4024801f3a"
      },
      "downloads": -1,
      "filename": "BloomEffect-1.0.2-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "e820f5a5cc341e5b73ae49946dd2f67e",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">=3.6",
      "size": 10287854,
      "upload_time": "2021-11-16T20:39:50",
      "upload_time_iso_8601": "2021-11-16T20:39:50.558498Z",
      "url": "https://files.pythonhosted.org/packages/4b/27/ceb018f8c54c25c6e29d21651e36b970b28457a18d13c9086bdb8ca666c1/BloomEffect-1.0.2-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "009243c9a12cccd76c51f6eaed347a0b3cc9cc9ae1d04d6408533b64a2bf37e7",
        "md5": "070ba799b733128ab6e1ccecb70d33ec",
        "sha256": "a5d836065c18c0f5ad78aefca7c7ffd11b5a6f2d947e7060044710ae38b5fc30"
      },
      "downloads": -1,
      "filename": "BloomEffect-1.0.2-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "070ba799b733128ab6e1ccecb70d33ec",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.6",
      "size": 10288163,
      "upload_time": "2021-11-16T20:40:04",
      "upload_time_iso_8601": "2021-11-16T20:40:04.927703Z",
      "url": "https://files.pythonhosted.org/packages/00/92/43c9a12cccd76c51f6eaed347a0b3cc9cc9ae1d04d6408533b64a2bf37e7/BloomEffect-1.0.2-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2bab482fb555825878d2a742acb786ad879ea59a120dc76a4a07b104418f7c97",
        "md5": "c403579464d9d7c4747b3910f1f15ab5",
        "sha256": "473ccdbf52909d0ff77f34472e29376de1e0d793dad63274f757b1abd7861219"
      },
      "downloads": -1,
      "filename": "BloomEffect-1.0.2-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "c403579464d9d7c4747b3910f1f15ab5",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6",
      "size": 10296889,
      "upload_time": "2021-11-16T20:40:19",
      "upload_time_iso_8601": "2021-11-16T20:40:19.182496Z",
      "url": "https://files.pythonhosted.org/packages/2b/ab/482fb555825878d2a742acb786ad879ea59a120dc76a4a07b104418f7c97/BloomEffect-1.0.2-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d076c838fa08b58caecab6df80b1a361dfe5ebac91a1dee3eb051694d762622",
        "md5": "8902f34d43a01cc4b6c3529ebf1b506d",
        "sha256": "47b0152e92f8e3b49e732131424e30235dfe3077ba28fe89818eb628e066383b"
      },
      "downloads": -1,
      "filename": "BloomEffect-1.0.2-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "8902f34d43a01cc4b6c3529ebf1b506d",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.6",
      "size": 10294287,
      "upload_time": "2021-11-16T20:40:33",
      "upload_time_iso_8601": "2021-11-16T20:40:33.328741Z",
      "url": "https://files.pythonhosted.org/packages/3d/07/6c838fa08b58caecab6df80b1a361dfe5ebac91a1dee3eb051694d762622/BloomEffect-1.0.2-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac14840a693a53e894b4962bfb4b1c4dd2ec427ab26f6c2f12c037fcca8f4990",
        "md5": "1abc02efd3272290138f62ac179c39eb",
        "sha256": "40f088d5f3627dc71c7d7317f96a175e84a8135636a75541cc2a17b58e45065e"
      },
      "downloads": -1,
      "filename": "BloomEffect-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1abc02efd3272290138f62ac179c39eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5172510,
      "upload_time": "2021-11-16T20:40:41",
      "upload_time_iso_8601": "2021-11-16T20:40:41.422456Z",
      "url": "https://files.pythonhosted.org/packages/ac/14/840a693a53e894b4962bfb4b1c4dd2ec427ab26f6c2f12c037fcca8f4990/BloomEffect-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}