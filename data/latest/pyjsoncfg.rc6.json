{
  "info": {
    "author": "k. goger",
    "author_email": "k.r.goger+pyjsoncfg@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n\n# PyJsonConfig - pyjsoncfg\n\nConfigure your Python Application with a JSON config file.\nCreate a sanitized sample JSON for git and demo purposes using your real config as template.\n\n\n## Platform\n\nTested on Python3\n\n\n## Development status\n\nBeta state. The API or logical call flow might change without prior notice.\n\n# What's new ?\n\nCheck\n[`CHANGELOG`](https://github.com/kr-g/pyjsoncfg/blob/master/CHANGELOG.md)\nfor latest ongoing, or upcoming news\n\n\n## Configuration\n\nThe environment variable `PYJSONCONFIG_BASE` (default: `\".\"`) is used to find the configuration file.\n\n\n## Run as main\n\nRun `pyjsoncfg` from cmd-line to create a sanitized config file using your real configuration as template.\n\npyjsoncfg checks for keywords like `\"user\", \"pass\", \"url\", \"host\", \"remote\", \"port\"`.\nThe corresponding values are replaced by dummy values. \nKeywords containing `\"default\"` as part of their keyword are __not__ replaced by a dummy value.\nUse parameter `-k you_secret_key1` `-k you_secret_key2`... to add additional keywords to scan and replace for.\n\n    python3 -m pyjsoncfg -f sample_cfg.json -k secret \n\nuse redirect to create template file rather then output to stdout\n\n    python3 -m pyjsoncfg -f sample_cfg.json -k secret > sanitized_sample_cfg.json\n\nA sanitized sample can be found here [sanitized_sample_cfg.json](https://github.com/kr-g/pyjsoncfg/blob/master/pyjsoncfg/sanitized_sample_cfg.json)\n\nBy running `pyjsoncfg` the environment variable `PYJSONCONFIG_BASE` defaults to `\"~\"`\n\n\n## cmd-line options\n\nrun `python3 -m pyjsoncfg -h` to see all options.\n\n\n    usage: pyjsoncfg [options]\n\n    sanitize json config file, details refer to https://github.com/kr-g/pyjsoncfg\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show version info and exit\n      -d, --debug           show debug info\n      -f CONFIG             input json config file (default: cfg.json)\n      -l, --list            list config, do not sanitize (default: False)\n      -k KEYWORD, -key KEYWORD, -keyword KEYWORD\n                            additional keyword to scan for (default: [])\n\n\n## Use within own code\n\nIn order to use a global configuration root set the environment before, or do by CODE (see full sample at the end)\n\n    PYJSONCONFIG_BASE=\"~\" python3 -m your_application \n\n\n## Config key navigation and selection\n\nSee also [`sample_cfg.json`](https://github.com/kr-g/pyjsoncfg/blob/master/pyjsoncfg/sample_cfg.json) in the github repo for the json config structure\n\n\n### dict style\n\n    # property dc is in the config file\n    v = cfg()[\"dummy_complex\"][\"d\"][\"dc\"]\n    print(v,type(v))\n\n### string selector\n\n    # property de is new here!\n    v = cfg.val( [\"dummy_complex\",\"d\",\"de\"], defval=False ) # with default value\n    print(v,type(v))\n\n### property string selector\n\n    # property de is not new here, no chamge since created above\n    v = cfg.val( cfg(\"dummy_complex.d.de\"), defval=True ) # with default value, \n    print(v,type(v))\n\n### namespace selector\n\nAfter loading with `auto_conv=True` or calling `cfg.conv()` namespace selector is available\n\n    v = cfg().dummy_complex.d.de\n    print(v,type(v))\n\n### setting defaults\n\n    # also complex types are handled and resolved to namespace\n    cfg.data.setdefault(\"a\",1)\n    cfg.data.setdefault(\"b\",[2])\n    cfg.data.setdefault(\"c\",[{\"e\":3}])\n    cfg.data.setdefault(\"d\", [{\"e\": 3, \"f\": 4, \"g\": {\"h\": 7}}])\n    cfg.data.setdefault(\n        \"e\", [{\"e\": 3, \"f\": 4, \"g\": {\"h\": 7, \"i\": [1, 2, 3, 4], \"j\": {\"z\": \"zoo\"}}}]\n    )\n\n    # cfg().c[0].e returns 3\n    # cfg().d[0].g.h returns 7\n    # cfg().e[0].g.j.z returns 'zoo'\n\n\n### dict handling\n\n    cfg()[\"z\"] = { \"a\": 1 }    \n    cfg()[\"zx\"] = { \"a\" : 1, \"b\" : { \"c\" : 2 }}\n    \n    cfg().zx.b.update({ \"c\": 3, \"d\": 4, \"e\" : 5 })\n\n    del cfg().zx.b.c\n    \n    print( cfg().zx.b.items() ) \n    print( type( cfg().zx.b ) )\n    print( type( cfg().zx.b.items() ) )\n    \n    # iterate\n    for k,v in cfg().zx.b.items():\n        print(k,v)\n\n    print( type( cfg().zx.b.e ) )\n    \n### expand vars\n\nwith `expandvars()` all vars such as `${user}` or `${host.remote_ip}` inside an eval_string can be replaced by config values.\nthe default recursion level is `recursion_level=3`. change if the config file has a deeper nesting of vars.\nSee also [`sample_cfg.json`](https://github.com/kr-g/pyjsoncfg/blob/master/pyjsoncfg/sample_cfg.json) for the structure.\n\n    # print structure of substsample config setting\n    print( \"subst var sample:\", cfg().substsample )\n    # subst all vars in substsample setting within a single call\n    print( \"result:\", cfg.expand( cfg().substsample ) )\n    \n    # or more complicated...\n    # get all vars in the string as tupel\n    vars = cfg.getexpandvars( cfg().substsample ) # `eval_str` is populated with config value for substsample setting\n    print( \"vars:\", vars )\n    # get all vars and values as tupel\n    exvars = cfg.expandvars( vars ) \n    print( \"expandvars\", exvars )\n    # if required manipulate expandvars beforehand\n    print( \"result:\", cfg.expand( cfg().substsample, expandvars=exvars ) )\n\n    # nested or referencing vars\n    print( \"referencing:\", cfg().substsample2 ) \n    print( \"result referencing:\", cfg.expand( cfg().substsample2 ) )\n\n    # nested or referencing vars with endless loop due to self-referencing\n    # stops at `recursion_level=3`\n    print( \"self-referencing:\", cfg().substsample3 ) \n    print( \"result self-referencing:\", cfg.expand( cfg().substsample3 ) )\n  \n#### limitation of `expandvars()`\n  \nsubstitution of `dict` or complex json object is not supported.\nextra whitespace within a variable specifier is not supported.\n\nok:\n\n    ${user}\n    ${host.remote_ip}\n    \nnot ok:\n\n    ${user } # tailing blank\n    ${ user } # leading and tailing blank\n    ${host . remote_ip} # extra white space\n\n\n## Code\n\n    import os, sys\n    from pyjsoncfg import Config\n\n    cfg = Config(\n            fnam=\"sample_cfg.py\", # file name of json config, defaults to cfg.json\n            basepath=\".\", # base path, defaults to environment variable `PYJSONCONFIG_BASE` if not set\n            not_exist_ok=True, # do not raise an error if config file is not exsting \n            auto_conv=True # after loading convert json to namespace, if false dict is used for storing\n            )\n\n    # see sample_cfg.py in github project\n\n    val_a = cfg().dummy_complex.a \n    cfg().dummy_complex.a += 1\n    val_a_after = cfg().dummy_complex.a \n    print( \"a before\", val_a, \"after\", val_a_after )\n\n    val_array = []\n    val_array.extend( cfg().dummy_array )\n    cfg().dummy_array.append(17)\n    val_array_after = cfg().dummy_array\n    print( \"array before\", val_array, \"after\", val_array_after )\n\n    # access functions\n    #\n    # val, returns the value as in the json\n    # bool, converts to bool\n    # int, converts to int\n    # float, converts to float\n    # str, converts to str\n\n    print( bool(cfg()[\"dummy_complex\"][\"d\"][\"dc\"] )) # get the value as given in json\n    print( cfg.bool([\"dummy_complex\",\"d\",\"dc\"] )) # get interpreted as bool\n    print( cfg.bool( cfg(\"dummy_complex.d.dc\") )) # get interpreted as bool\n\n    print( cfg.val( cfg(\"dummy_complex.d.dc\") )) # get plain using selector\n    print( cfg().dummy_complex.d.dc ) # get plain using namespace\n\n    # save to disk\n    cfg.save()\n\n    # print to stdout\n    cfg.savefd(sys.stdout)\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kr-g/pyjsoncfg",
    "keywords": "python config json",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyjsoncfg",
    "package_url": "https://pypi.org/project/pyjsoncfg/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyjsoncfg/",
    "project_urls": {
      "Homepage": "https://github.com/kr-g/pyjsoncfg"
    },
    "release_url": "https://pypi.org/project/pyjsoncfg/0.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "python json config file handling",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14233630,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b25741c1d43335cd56db9c6aaa6ddc4144ce8e45e6010e20eddfd07ac2c3ff4",
          "md5": "4e9264944e738e70c2da54f0d3ec2a6e",
          "sha256": "15491b48f9cac8ab04075b64d39bab63ed97e36bbc187267754a79790bb764b7"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e9264944e738e70c2da54f0d3ec2a6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8241,
        "upload_time": "2019-12-25T17:15:31",
        "upload_time_iso_8601": "2019-12-25T17:15:31.022951Z",
        "url": "https://files.pythonhosted.org/packages/9b/25/741c1d43335cd56db9c6aaa6ddc4144ce8e45e6010e20eddfd07ac2c3ff4/pyjsoncfg-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53d6b65624914e59894ebe702632df3b41f913d53bf56b43ff8c012001f88263",
          "md5": "32eadb1cc4b54491d040cea63c922e70",
          "sha256": "644424843f811209fc8a046894838cd7d5bc75d6788a2bd9fe4f907881a0437b"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "32eadb1cc4b54491d040cea63c922e70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5861,
        "upload_time": "2019-12-25T17:15:33",
        "upload_time_iso_8601": "2019-12-25T17:15:33.481488Z",
        "url": "https://files.pythonhosted.org/packages/53/d6/b65624914e59894ebe702632df3b41f913d53bf56b43ff8c012001f88263/pyjsoncfg-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcbc12d68c38da706a68587836b89e87b00a9ac0ca4ca11999a095e0c0508017",
          "md5": "5cad82bf01ab99e0532edb6b382dc2f0",
          "sha256": "35343ab2eb6ca1c0c4bd516505e5a6e1b93dad8b973d3386bf97ae8fd92c7650"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cad82bf01ab99e0532edb6b382dc2f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10161,
        "upload_time": "2019-12-25T17:50:41",
        "upload_time_iso_8601": "2019-12-25T17:50:41.682536Z",
        "url": "https://files.pythonhosted.org/packages/dc/bc/12d68c38da706a68587836b89e87b00a9ac0ca4ca11999a095e0c0508017/pyjsoncfg-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1c00215a5593db7694f0febb6c13139effd8a80caf1dfb75f559de51530d2cb",
          "md5": "9748d4251f95fb8088fa98fce101519f",
          "sha256": "8fa160f17d9e5e85098c5a5c249419c6613f0e077f520c14dcb1aeefdcc343f0"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9748d4251f95fb8088fa98fce101519f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5897,
        "upload_time": "2019-12-25T17:50:43",
        "upload_time_iso_8601": "2019-12-25T17:50:43.294336Z",
        "url": "https://files.pythonhosted.org/packages/c1/c0/0215a5593db7694f0febb6c13139effd8a80caf1dfb75f559de51530d2cb/pyjsoncfg-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afc2a46b50f1fed3a97999f03a86dbe3847ea2cee3c570ecdaaa390ac90d809e",
          "md5": "7fe73985f64e1312ed69400fad6cdb75",
          "sha256": "bdd56f98d066d8a0c2766ae6c0a55e5cd53f79746da40675fc6c7f466e9281a7"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fe73985f64e1312ed69400fad6cdb75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11486,
        "upload_time": "2019-12-25T20:23:24",
        "upload_time_iso_8601": "2019-12-25T20:23:24.723485Z",
        "url": "https://files.pythonhosted.org/packages/af/c2/a46b50f1fed3a97999f03a86dbe3847ea2cee3c570ecdaaa390ac90d809e/pyjsoncfg-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8d228d2e43903417b7eafe4f8e17e323ad705c733a26f2d49a47adc8232f6c7",
          "md5": "90d250bf5cf5e0f471a489d2ab5230e6",
          "sha256": "0fd4f6cab3c3b22dcc2a728f9c09e128cdffab2590ec4b7053fc5479ec1c097b"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "90d250bf5cf5e0f471a489d2ab5230e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6948,
        "upload_time": "2019-12-25T20:23:26",
        "upload_time_iso_8601": "2019-12-25T20:23:26.435616Z",
        "url": "https://files.pythonhosted.org/packages/f8/d2/28d2e43903417b7eafe4f8e17e323ad705c733a26f2d49a47adc8232f6c7/pyjsoncfg-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "654ea52f0f15a4aac6629a16a849d9307170fbb21c1bc24d0b2d317c5df0de2e",
          "md5": "03dee8f61c8cf4be6fd2fc10e9dff70c",
          "sha256": "43ec12deaecb9c38182c9ad39cb22c09a0758f63cd1ed2776f8b831a0337e662"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03dee8f61c8cf4be6fd2fc10e9dff70c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9806,
        "upload_time": "2020-05-21T15:29:16",
        "upload_time_iso_8601": "2020-05-21T15:29:16.143732Z",
        "url": "https://files.pythonhosted.org/packages/65/4e/a52f0f15a4aac6629a16a849d9307170fbb21c1bc24d0b2d317c5df0de2e/pyjsoncfg-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcb8ae99dd596fa83bc2d00367d99a1a1dd856b87661618496fcfc995ae49a0c",
          "md5": "f1f420322e496f5ecc8df4fb7d89009d",
          "sha256": "e95fdf102c4ceb8304ec861ba564bf05a305be569ffd58ba429b151a3767b32d"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f1f420322e496f5ecc8df4fb7d89009d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10516,
        "upload_time": "2020-05-21T15:29:17",
        "upload_time_iso_8601": "2020-05-21T15:29:17.256199Z",
        "url": "https://files.pythonhosted.org/packages/bc/b8/ae99dd596fa83bc2d00367d99a1a1dd856b87661618496fcfc995ae49a0c/pyjsoncfg-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c39faf4e5aee52cf3593e3ca8a7119a61cc1bd81194b08c13839d97d781d822",
          "md5": "9e1e8a26af2e1bb2bff1763c8e3d6a6c",
          "sha256": "6aaffabb9d26d86983fcb25a872e287a2ffff8138819985be1cf17e39e9b30f6"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e1e8a26af2e1bb2bff1763c8e3d6a6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10034,
        "upload_time": "2021-09-25T13:38:09",
        "upload_time_iso_8601": "2021-09-25T13:38:09.138005Z",
        "url": "https://files.pythonhosted.org/packages/9c/39/faf4e5aee52cf3593e3ca8a7119a61cc1bd81194b08c13839d97d781d822/pyjsoncfg-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f0ae260745831a871aeee9410ed050dd70720a3944a52014480caaadab9536c",
          "md5": "e5962ace1eaeeed64b6ac8f09cd93cff",
          "sha256": "b450aabbbbbc31bb5bb9cc6b2f02f4c4407fc276e23dcf0215d33710a4f5bc49"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e5962ace1eaeeed64b6ac8f09cd93cff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10980,
        "upload_time": "2021-09-25T13:38:11",
        "upload_time_iso_8601": "2021-09-25T13:38:11.054613Z",
        "url": "https://files.pythonhosted.org/packages/1f/0a/e260745831a871aeee9410ed050dd70720a3944a52014480caaadab9536c/pyjsoncfg-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2341c494d02afd3b87bfb7c00ca28a641396898c00c04ba47f3e66a1c8640ee7",
          "md5": "9c439a44dea7a87da11e50fb005fb814",
          "sha256": "91b0d5f1e914e0f316359b08f48ea314a28bfb7e0c4d8e825811b51012b1330c"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c439a44dea7a87da11e50fb005fb814",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21247,
        "upload_time": "2022-06-24T06:25:03",
        "upload_time_iso_8601": "2022-06-24T06:25:03.466755Z",
        "url": "https://files.pythonhosted.org/packages/23/41/c494d02afd3b87bfb7c00ca28a641396898c00c04ba47f3e66a1c8640ee7/pyjsoncfg-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c57e080549e0207feb89dfe9d288ee9be12984c491e5aedee0113a4a169cf1d",
          "md5": "24bd48efb7bf93f865f74cd1c71f3382",
          "sha256": "cffaaab779edfcd2f3e1e45c9277c620532904e2d6d84c05b01821462d2bdd5b"
        },
        "downloads": -1,
        "filename": "pyjsoncfg-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "24bd48efb7bf93f865f74cd1c71f3382",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22291,
        "upload_time": "2022-06-24T06:25:06",
        "upload_time_iso_8601": "2022-06-24T06:25:06.009690Z",
        "url": "https://files.pythonhosted.org/packages/3c/57/e080549e0207feb89dfe9d288ee9be12984c491e5aedee0113a4a169cf1d/pyjsoncfg-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2341c494d02afd3b87bfb7c00ca28a641396898c00c04ba47f3e66a1c8640ee7",
        "md5": "9c439a44dea7a87da11e50fb005fb814",
        "sha256": "91b0d5f1e914e0f316359b08f48ea314a28bfb7e0c4d8e825811b51012b1330c"
      },
      "downloads": -1,
      "filename": "pyjsoncfg-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9c439a44dea7a87da11e50fb005fb814",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21247,
      "upload_time": "2022-06-24T06:25:03",
      "upload_time_iso_8601": "2022-06-24T06:25:03.466755Z",
      "url": "https://files.pythonhosted.org/packages/23/41/c494d02afd3b87bfb7c00ca28a641396898c00c04ba47f3e66a1c8640ee7/pyjsoncfg-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c57e080549e0207feb89dfe9d288ee9be12984c491e5aedee0113a4a169cf1d",
        "md5": "24bd48efb7bf93f865f74cd1c71f3382",
        "sha256": "cffaaab779edfcd2f3e1e45c9277c620532904e2d6d84c05b01821462d2bdd5b"
      },
      "downloads": -1,
      "filename": "pyjsoncfg-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "24bd48efb7bf93f865f74cd1c71f3382",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22291,
      "upload_time": "2022-06-24T06:25:06",
      "upload_time_iso_8601": "2022-06-24T06:25:06.009690Z",
      "url": "https://files.pythonhosted.org/packages/3c/57/e080549e0207feb89dfe9d288ee9be12984c491e5aedee0113a4a169cf1d/pyjsoncfg-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}