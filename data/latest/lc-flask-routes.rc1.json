{
  "info": {
    "author": "libcommon",
    "author_email": "libcommon@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# flask-routes-py\n\n## Overview\n\nThe Flask web framework provides the decorator [@app.route](https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.route)\nto define handlers for routes, which is the recommended method for simple web apps. However, using this method requires\nthat route handlers be tied to a specific app, and can make it difficult to track/unit test routes for larger web apps.\n`flask-routes-py` provides mixins for defining routes as classes with static (`classmethod`) handlers, with optional extras\nlike integrated request parameter parsing with [flask-reqparser-py](https://github.com/libcommon/flask-reqparser-py), and\nautomated route discovery and registration with [lc-registry](https://github.com/libcommon/registry-py).\n\n## Installation\n\n### Install from PyPi (preferred method)\n\n```bash\npip install lc-flask-routes\npip install lc-flask-routes[reqparser]  # enable support for lc_flask_reqparser\npip install lc-flask-routes[registry]   # enable support for lc_registry\npip install lc-flask-routes[all]        # enable all options\n```\n\n### Install from GitHub with Pip\n\n```bash\npip install git+https://github.com/libcommon/flask-routes-py.git@vx.x.x#egg=lc_flask_routes\n```\n\nwhere `x.x.x` is the version you want to download.\n\n## Install by Manual Download\n\nTo download the source distribution and/or wheel files, navigate to\n`https://github.com/libcommon/flask-routes-py/tree/releases/vx.x.x/dist`, where `x.x.x` is the version you want to install,\nand download either via the UI or with a tool like wget. Then to install run:\n\n```bash\npip install <downloaded file>\n```\n\nDo _not_ change the name of the file after downloading, as Pip requires a specific naming convention for installation files.\n\n## Dependencies\n\n`flask-routes-py` depends on, and is designed to work with, the \n[Flask framework](https://flask.palletsprojects.com/en/1.1.x/).  Optional dependencies also include\n[flask-reqparser-py](https://github.com/libcommon/flask-reqparser-py) for integrated request parameter parsing, and\n[lc-registry](https://github.com/libcommon/registry-py) for route auto-discovery. Only Python versions >= 3.6 are\nofficially supported.\n\n## Getting Started\n\nDefine a base class that extends either the `BaseRouteMixin` or `BaseRouteWithParserMixin` class\n(if installed with `[reqparser]` or `[all]` options) that all other route classes will extend. This class could\ncontain any helper methods or class variables needed by all routes, but should _not_ define the `ROUTE_MAP` class\nvariable.\n\n```python\nfrom typing import Any, Dict, Optional\n\nimport flask\nfrom lc_flask_routes import (\n    BaseRouteMixin,\n    BaseRouteWithParserMixin,\n    RouteResponse,\n    WerkzeugLocalProxy\n)\nfrom lc_flask_reqparser import RequestParser\n\n\nclass BaseRoute(BaseRouteMixin):\n    \"\"\"Base route.\"\"\"\n    __slots__ = ()\n\n\nclass BaseParserRoute(BaseRouteWithParserMixin):\n    \"\"\"Base route with request parser.\"\"\"\n    __slots__ = ()\n\n    @classmethod\n    def gen_request_parser(cls) -> Optional[RequestParser]:\n        return (RequestParser()\n                .add_argument(\"base_argument_for_all_routes\"))\n\n\nclass IndexRoute(BaseRoute):\n    \"\"\"Route: /\n    Endpoint: \"index\"\n    Description: Splash page\n    \"\"\"\n    __slots__ = ()\n\n    ROUTE_MAP = {\"/\": {\"endpoint\": \"index\", \"methods\": [\"GET\", \"POST\"]}}\n\n    @classmethod\n    def get(cls,\n            app: WerkzeugLocalProxy,\n            request: WerkzeugLocalProxy,\n            session: WerkzeugLocalProxy,\n            route_kwargs: Dict[str, Any]) -> RouteResponse:\n        return \"<h1>Splash Page</h1>\"\n\n    @classmethod\n    def post(cls,\n             app: WerkzeugLocalProxy,\n             request: WerkzeugLocalProxy,\n             session: WerkzeugLocalProxy,\n             route_kwargs: Dict[str, Any]) -> RouteResponse:\n        return flask.redirect(url_for(\"index\"))\n\n\nif __name__ == \"__main__\":\n    app = flask.Flask(__name__)\n    IndexRoute.register_route(app)\n    app.run()\n```\n\nThe `ROUTE_MAP` class variable should only be defined on non-base routes, and its structure mimics the parameters\nfor Flask's `@app.route` decorator, which really calls [add_url_rule](https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.add_url_rule)\nunder the hood. Each key is a URI, and each corresponding value are the keyword arguments passed to `add_url_rule`. See Flask's documentation\nfor expectations and limitations of that function. `BaseRouteMixin` has a `register_route` method that accomplishes the same result as `@app.route`.\nEach route class must be registered individually (unless using `RouteRegistryMixin` - see below).\n\nIf installed with the `[registry]` or `[all]` options, `flask-routes-py` also exposes a `RouteRegistryMixin` class to be used for auto-discovery\nof route classes using metaprogramming. Define a Python `metaclass` that extends `RouteRegistryMixin`, then define a base class that uses this\n`metaclass`.\n\n```python\nfrom abc import ABCMeta\nfrom typing import Any, Dict\n\nimport flask\nfrom lc_flask_routes import (\n    BaseRouteMixin,\n    BaseRouteWithParserMixin,\n    RouteResponse,\n    WerkzeugLocalProxy\n)\n\n\nclass RouteRegistry(RouteRegistryMixin, ABCMeta):\n    \"\"\"Route registry.\"\"\"\n    __slots__ = ()\n\n    _REGISTRY = dict()\n\n\nclass BaseRoute(BaseRouteMixin, metaclass=RouteRegistry):\n    \"\"\"Base route. Any child class will be registered in\n    RouteRegistry's _REGISTRY class variable automatically\n    (as long as it's in scope).\"\"\"\n\n\nclass IndexRoute(BaseRoute):\n    \"\"\"Route: /\n    Endpoint: \"index\"\n    Description: Splash page\n    \"\"\"\n    __slots__ = ()\n\n    ROUTE_MAP = {\"/\": {\"endpoint\": \"index\", \"methods\": [\"GET\"]}}\n\n    @classmethod\n    def get(cls,\n            app: WerkzeugLocalProxy,\n            request: WerkzeugLocalProxy,\n            session: WerkzeugLocalProxy,\n            route_kwargs: Dict[str, Any]) -> RouteResponse:\n        return \"<h1>Splash Page</h1>\"\n\n\nclass LoginRoute(BaseRoute):\n    \"\"\"Route: /login\n    Endpoint: \"login\"\n    Description: Login workflow\n    \"\"\"\n    __slots__ = ()\n\n    ROUTE_MAP = {\"/login\": {\"endpoint\": \"login\", \"methods\": [\"POST\"]}}\n\n    @classmethod\n    def post(cls,\n             app: WerkzeugLocalProxy,\n             request: WerkzeugLocalProxy,\n             session: WerkzeugLocalProxy,\n             route_kwargs: Dict[str, Any]) -> RouteResponse:\n        // Do some work to verify identity\n        return flask.redirect(url_for(\"index\"))\n\n\nif __name__ == \"__main__\":\n    app = flask.Flask(__name__)\n    # Register IndexRoute and LoginRoute with app\n    RouteRegistry.register_routes(app)\n    app.run()\n```\n\n`RouteRegistryMixin` exposes two methods for registering routes with an app: `register_routes` and `register_routes_where`.\nAs shown above, `register_routes` will register all routes in the registry without any filtering, whereas `register_routes_where`\nevaluates a provided predicate on reach route class before registering it. This could be useful, for example, if the same registry is being used\nto initialize two different apps based on a class variable.\n\n## Contributing/Suggestions\n\nContributions and suggestions are welcome! To make a feature request, report a bug, or otherwise comment on existing\nfunctionality, please file an issue. For contributions please submit a PR, but make sure to lint, type-check, and test\nyour code before doing so. Thanks in advance!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/libcommon/flask-routes-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lc-flask-routes",
    "package_url": "https://pypi.org/project/lc-flask-routes/",
    "platform": "",
    "project_url": "https://pypi.org/project/lc-flask-routes/",
    "project_urls": {
      "Homepage": "https://github.com/libcommon/flask-routes-py",
      "Issue Tracker": "https://github.com/libcommon/flask-routes-py/issues",
      "Releases": "https://github.com/libcommon/flask-routes-py/releases"
    },
    "release_url": "https://pypi.org/project/lc-flask-routes/0.1.0/",
    "requires_dist": [
      "Flask",
      "lc-flask-reqparser ; extra == 'all'",
      "lc-registry ; extra == 'all'",
      "lc-registry ; extra == 'registry'",
      "lc-flask-reqparser ; extra == 'reqparser'"
    ],
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7599276,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16b879e946309d5f42904ab0ce6b8230c8081b4295a32091ea2b879d3992378b",
          "md5": "94c8195412ec42bf2c102f95684cdfc0",
          "sha256": "79203151f9aef7a4130aae8de3d9c3489a1ba8cff9e2107f9a5f41cb3c6e3663"
        },
        "downloads": -1,
        "filename": "lc_flask_routes-0.1.0-2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94c8195412ec42bf2c102f95684cdfc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10135,
        "upload_time": "2020-06-30T20:01:33",
        "upload_time_iso_8601": "2020-06-30T20:01:33.765862Z",
        "url": "https://files.pythonhosted.org/packages/16/b8/79e946309d5f42904ab0ce6b8230c8081b4295a32091ea2b879d3992378b/lc_flask_routes-0.1.0-2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8da6a42d8ab7453cb3251545656aa9cbb11fabed5b467bbfa7899ac3a8845e8e",
          "md5": "06e565f4d7f4e5b92632219a339d4179",
          "sha256": "5a98e57fbbfb418402328355819946a03eaccf27c7a8bf5679581d2d8d32d645"
        },
        "downloads": -1,
        "filename": "lc_flask_routes-0.1.0-2.tar.gz",
        "has_sig": false,
        "md5_digest": "06e565f4d7f4e5b92632219a339d4179",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8092,
        "upload_time": "2020-06-30T20:01:35",
        "upload_time_iso_8601": "2020-06-30T20:01:35.548950Z",
        "url": "https://files.pythonhosted.org/packages/8d/a6/a42d8ab7453cb3251545656aa9cbb11fabed5b467bbfa7899ac3a8845e8e/lc_flask_routes-0.1.0-2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16b879e946309d5f42904ab0ce6b8230c8081b4295a32091ea2b879d3992378b",
        "md5": "94c8195412ec42bf2c102f95684cdfc0",
        "sha256": "79203151f9aef7a4130aae8de3d9c3489a1ba8cff9e2107f9a5f41cb3c6e3663"
      },
      "downloads": -1,
      "filename": "lc_flask_routes-0.1.0-2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "94c8195412ec42bf2c102f95684cdfc0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10135,
      "upload_time": "2020-06-30T20:01:33",
      "upload_time_iso_8601": "2020-06-30T20:01:33.765862Z",
      "url": "https://files.pythonhosted.org/packages/16/b8/79e946309d5f42904ab0ce6b8230c8081b4295a32091ea2b879d3992378b/lc_flask_routes-0.1.0-2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8da6a42d8ab7453cb3251545656aa9cbb11fabed5b467bbfa7899ac3a8845e8e",
        "md5": "06e565f4d7f4e5b92632219a339d4179",
        "sha256": "5a98e57fbbfb418402328355819946a03eaccf27c7a8bf5679581d2d8d32d645"
      },
      "downloads": -1,
      "filename": "lc_flask_routes-0.1.0-2.tar.gz",
      "has_sig": false,
      "md5_digest": "06e565f4d7f4e5b92632219a339d4179",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8092,
      "upload_time": "2020-06-30T20:01:35",
      "upload_time_iso_8601": "2020-06-30T20:01:35.548950Z",
      "url": "https://files.pythonhosted.org/packages/8d/a6/a42d8ab7453cb3251545656aa9cbb11fabed5b467bbfa7899ac3a8845e8e/lc_flask_routes-0.1.0-2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}