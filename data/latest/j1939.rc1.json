{
  "info": {
    "author": "Frank Benkert",
    "author_email": "opensource@frank-benkert.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "SAE J1939 for Python\n====================\n\nA new implementation of the CAN SAE J1939 standard for Python.\n\nWARNING: Currently this project is in alpha-state! Some of the features are not completely working! \n\nIf you experience a problem or think the stack would not behave properly, do \nnot hesitate to open a ticket or write an email.\nPullrequests are of course even more welcome!\n\nThe project uses the python-can_ package to support multiple hardware drivers. \nAt the time of writing the supported interfaces are \n\n* CAN over Serial\n* CAN over Serial / SLCAN\n* IXXAT Virtual CAN Interface\n* Kvaserâ€™s CANLIB\n* NEOVI Interface\n* NI-CAN\n* PCAN Basic API\n* Socketcan\n* USB2CAN Interface\n* Vector\n* Virtual\n* isCAN\n\nOverview\n--------\n\nAn SAE J1939 CAN Network consists of multiple Electronic Control Units (ECUs). \nEach ECU can have one or more Controller Applications (CAs). Each CA has its \nown (unique) Address on the bus. This address is either acquired within the \naddress claiming procedure or set to a fixed value. In the latter case, the CA\nhas to announce its address to the bus to check whether it is free.\n\nThe CAN messages in a SAE J1939 network are called Protocol Data Units (PDUs).\nThis definition is not completely correct, but close enough to think of PDUs \nas the CAN messages.\n\n\nFeatures\n--------\n\n* one ElectronicControlUnit (ECU) can hold multiple ControllerApplications (CA)\n* ECU (CA) Naming according SAE J1939/81\n* (under construction) full featured address claiming procedure according SAE J1939/81\n* full support of transport protocol according SAE J1939/21 for sending and receiveing\n\n  - Message Packaging and Reassembly (up to 1785 bytes)\n\n    + Transfer Protocol Transfer Data (TP.TD)\n    + Transfer Protocol Communication Management (TP.CM)\n\n  - Multi-Packet Broadcasts\n\n    + Broadcast Announce Message (TP.BAM)\n\n* (under construction) Requests (global and specific)\n* (under construction) correct timeout and deadline handling\n* (under construction) almost complete testcoverage\n\n\nInstallation\n------------\n\nAs soon the package is available in your distro, it's as easy as::\n\n    $ pip install j1939\n\nIn the meanwhile you can either download the wheel-package and issue the command::\n\n    $ pip install j1939-0.1.0.dev1-py2.py3-none-any.whl\n\nor do the trick with::\n\n    $ git clone https://github.com/benkfra/j1939.git\n    $ cd j1939\n    $ pip install .\n\nIf you want to be able to change the code while using it, clone it then install it in `develop mode`_::\n\n    $ git clone https://github.com/benkfra/j1939.git\n    $ cd j1939\n    $ pip install -e .\n\n\nQuick start\n-----------\n\nTo simply receive all passing (public) messages on the bus you can subscribe to the ECU object.\n\n.. code-block:: python\n\n    import logging\n    import time\n    import can\n    import j1939\n\n    logging.getLogger('j1939').setLevel(logging.DEBUG)\n    logging.getLogger('can').setLevel(logging.DEBUG)\n\n    def on_message(pgn, data):\n        \"\"\"Receive incoming messages from the bus\n\n        :param int pgn:\n            Parameter Group Number of the message\n        :param bytearray data:\n            Data of the PDU\n        \"\"\"\n        print(\"PGN {} length {}\".format(pgn, len(data)))\n\n    def main():\n        print(\"Initializing\")\n\n        # create the ElectronicControlUnit (one ECU can hold multiple ControllerApplications)\n        ecu = j1939.ElectronicControlUnit()\n\n        # Connect to the CAN bus\n        # Arguments are passed to python-can's can.interface.Bus() constructor\n        # (see https://python-can.readthedocs.io/en/stable/bus.html).\n        # ecu.connect(bustype='socketcan', channel='can0')\n        # ecu.connect(bustype='kvaser', channel=0, bitrate=250000)\n        ecu.connect(bustype='pcan', channel='PCAN_USBBUS1', bitrate=250000)\n        # ecu.connect(bustype='ixxat', channel=0, bitrate=250000)\n        # ecu.connect(bustype='vector', app_name='CANalyzer', channel=0, bitrate=250000)\n        # ecu.connect(bustype='nican', channel='CAN0', bitrate=250000)    \n\n        # subscribe to all (global) messages on the bus\n        ecu.subscribe(on_message)\n\n        time.sleep(120)\n\n        print(\"Deinitializing\")\n        ecu.disconnect()\n\n    if __name__ == '__main__':\n        main()        \n\nA more sophisticated example in which the CA class was overloaded to include its own functionality:\n\n.. code-block:: python\n\n    import logging\n    import time\n    import can\n    import j1939\n\n    logging.getLogger('j1939').setLevel(logging.DEBUG)\n    logging.getLogger('can').setLevel(logging.DEBUG)\n\n    class OwnCaToProduceCyclicMessages(j1939.ControllerApplication):\n        \"\"\"CA to produce messages\n\n        This CA produces simulated sensor values and cyclically sends them to\n        the bus with the PGN 0xFEF6 (Intake Exhaust Conditions 1).\n        \"\"\"\n\n        def __init__(self, name, device_address_preferred=None):\n            # old fashion calling convention for compatibility with Python2\n            j1939.ControllerApplication.__init__(self, name, device_address_preferred)\n\n        def start(self):\n            \"\"\"Starts the CA\n            (OVERLOADED function)\n            \"\"\"\n            # add our timer event\n            self._ecu.add_timer(0.500, self.timer_callback)\n            # call the super class function\n            return j1939.ControllerApplication.start(self)\n\n        def stop(self):\n            \"\"\"Stops the CA\n            (OVERLOADED function)\n            \"\"\"\n            self._ecu.remove_timer(self.timer_callback)\n\n        def on_message(self, pgn, data):\n            \"\"\"Feed incoming message to this CA.\n            (OVERLOADED function)\n            :param int pgn:\n                Parameter Group Number of the message\n            :param bytearray data:\n                Data of the PDU\n            \"\"\"\n            print(\"PGN {} length {}\".format(pgn, len(data)))\n\n        def timer_callback(self, cookie):\n            \"\"\"Callback for sending the IEC1 message\n\n            This callback is registered at the ECU timer event mechanism to be \n            executed every 500ms.\n\n            :param cookie:\n                A cookie registered at 'add_timer'. May be None.\n            \"\"\"\n            # wait until we have our device_address\n            if self.state != j1939.ControllerApplication.State.NORMAL:\n                # returning true keeps the timer event active\n                return True\n\n            pgn = j1939.ParameterGroupNumber(0, 0xFE, 0xF6)\n            data = [\n                j1939.ControllerApplication.FieldValue.NOT_AVAILABLE_8, # Particulate Trap Inlet Pressure (SPN 81)\n                j1939.ControllerApplication.FieldValue.NOT_AVAILABLE_8, # Boost Pressure (SPN 102)\n                j1939.ControllerApplication.FieldValue.NOT_AVAILABLE_8, # Intake Manifold 1 Temperature (SPN 105)\n                j1939.ControllerApplication.FieldValue.NOT_AVAILABLE_8, # Air Inlet Pressure (SPN 106)\n                j1939.ControllerApplication.FieldValue.NOT_AVAILABLE_8, # Air Filter 1 Differential Pressure (SPN 107)\n                j1939.ControllerApplication.FieldValue.NOT_AVAILABLE_16_ARR[0], # Exhaust Gas Temperature (SPN 173)\n                j1939.ControllerApplication.FieldValue.NOT_AVAILABLE_16_ARR[1],\n                j1939.ControllerApplication.FieldValue.NOT_AVAILABLE_8, # Coolant Filter Differential Pressure (SPN 112)\n                ]\n\n            # SPN 105, Range -40..+210\n            # (Offset -40)\n            receiverTemperature = 30\n            data[2] = receiverTemperature + 40\n\n            self.send_message(6, pgn.value, data)\n\n            # returning true keeps the timer event active\n            return True\n\n\n    def main():\n        print(\"Initializing\")\n\n        # create the ElectronicControlUnit (one ECU can hold multiple ControllerApplications)\n        ecu = j1939.ElectronicControlUnit()\n\n        # Connect to the CAN bus\n        # Arguments are passed to python-can's can.interface.Bus() constructor\n        # (see https://python-can.readthedocs.io/en/stable/bus.html).\n        # ecu.connect(bustype='socketcan', channel='can0')\n        # ecu.connect(bustype='kvaser', channel=0, bitrate=250000)\n        ecu.connect(bustype='pcan', channel='PCAN_USBBUS1', bitrate=250000)\n        # ecu.connect(bustype='ixxat', channel=0, bitrate=250000)\n        # ecu.connect(bustype='vector', app_name='CANalyzer', channel=0, bitrate=250000)\n        # ecu.connect(bustype='nican', channel='CAN0', bitrate=250000)    \n        # ecu.connect('testchannel_1', bustype='virtual')\n\n        # compose the name descriptor for the new ca\n        name = j1939.Name(\n            arbitrary_address_capable=0, \n            industry_group=j1939.Name.IndustryGroup.Industrial,\n            vehicle_system_instance=1,\n            vehicle_system=1,\n            function=1,\n            function_instance=1,\n            ecu_instance=1,\n            manufacturer_code=666,\n            identity_number=1234567\n            )\n\n        # create derived CA with given NAME and ADDRESS\n        ca = OwnCaToProduceCyclicMessages(name, 128)\n        # add CA to the ECU\n        ecu.add_ca(controller_application=ca)\n        # by starting the CA it starts the address claiming procedure on the bus\n        ca.start()\n\n        time.sleep(120)\n\n        print(\"Deinitializing\")\n        ca.stop()\n        ecu.disconnect()\n\n    if __name__ == '__main__':\n        main()        \n\nCredits\n-------\n\nThis implementation was initially inspired by the `CANopen project of Christian Sandberg`_.\nThanks for your great work!\n\nMost of the informations about SAE J1939 are taken from the papers and the book of \n`Copperhill technologies`_ and from my many years of experience in J1939 of course :-)\n\n\n\n.. _python-can: https://python-can.readthedocs.org/en/stable/\n.. _develop mode: https://packaging.python.org/distributing/#working-in-development-mode\n.. _Copperhill technologies: http://copperhilltech.com/a-brief-introduction-to-the-sae-j1939-protocol/\n.. _CANopen project of Christian Sandberg: http://canopen.readthedocs.io/en/stable/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/benkfra/j1939",
    "keywords": "CAN SAE J1939",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "j1939",
    "package_url": "https://pypi.org/project/j1939/",
    "platform": "any",
    "project_url": "https://pypi.org/project/j1939/",
    "project_urls": {
      "Homepage": "https://github.com/benkfra/j1939"
    },
    "release_url": "https://pypi.org/project/j1939/0.1.0.dev1/",
    "requires_dist": [
      "python-can (>=2.0.0)"
    ],
    "requires_python": "",
    "summary": "SAE J1939 stack implementation",
    "version": "0.1.0.dev1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3838213,
  "releases": {
    "0.1.0.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00647638c4bfa70d673988571ca0fdb9c263da94d740e2a9e33e5660fb4082a7",
          "md5": "aed7fabdeefc2f0b88cabcf7392ee6c0",
          "sha256": "f3ca55fa3ae147119ccad663e4261dc56098e2f3b789a0439ee39cb63a724824"
        },
        "downloads": -1,
        "filename": "j1939-0.1.0.dev1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aed7fabdeefc2f0b88cabcf7392ee6c0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18876,
        "upload_time": "2018-05-06T07:43:26",
        "upload_time_iso_8601": "2018-05-06T07:43:26.150300Z",
        "url": "https://files.pythonhosted.org/packages/00/64/7638c4bfa70d673988571ca0fdb9c263da94d740e2a9e33e5660fb4082a7/j1939-0.1.0.dev1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00647638c4bfa70d673988571ca0fdb9c263da94d740e2a9e33e5660fb4082a7",
        "md5": "aed7fabdeefc2f0b88cabcf7392ee6c0",
        "sha256": "f3ca55fa3ae147119ccad663e4261dc56098e2f3b789a0439ee39cb63a724824"
      },
      "downloads": -1,
      "filename": "j1939-0.1.0.dev1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aed7fabdeefc2f0b88cabcf7392ee6c0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18876,
      "upload_time": "2018-05-06T07:43:26",
      "upload_time_iso_8601": "2018-05-06T07:43:26.150300Z",
      "url": "https://files.pythonhosted.org/packages/00/64/7638c4bfa70d673988571ca0fdb9c263da94d740e2a9e33e5660fb4082a7/j1939-0.1.0.dev1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}