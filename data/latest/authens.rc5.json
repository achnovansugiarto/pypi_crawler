{
  "info": {
    "author": "Klub Dev ENS",
    "author_email": "klub-dev@ens.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# AuthENS\n\nLibrairie Django pour l'authentification via le CAS élèves à l'ENS.\n\nAuthENS fournit une page de connexion qui laisse le choix entre \"Connexion par\nCAS\" et \"Connexion par mot de passe\".\nDe plus, elle gère de façon transparente les potentiels \"conflits\" de `username`\nliés aux comptes Django standards non-CAS (1) et aux vieux comptes clippers (2).\nPlus précisément :\n\n1. Si un compte clipper `dupond` est créé alors qu'un compte Django standard\n   avec le `username` `dupond` existait déjà, le compte nouvellement créé\n   obtient un `username` différent (typiquement `dupond2`).\n   La personne détentrice du compte continue de se connecter en tant que\n   `dupond` sur le CAS élèves mais devra utiliser le nom `dupond2` lorsqu'elle\n   choisira d'utiliser la connexion par mot de passe sur le site, typiquement\n   après la fin de la scolarité lorsque le compte clipper est supprimé.\n\n2. Si, quelques années plus tard, après que `dupond` a terminé sa scolarité, le\n   SPI donne le login `dupond` à une nouvelle personne, AuthENS détecte que le\n   nouveau compte `dupond` n'est pas le même que l'ancien et crée un nouveau\n   compte (par exemple `dupond3`).\n   Le compte `dupond3` peut se connecter par CAS en tant que `dupond` et le\n   compte `dupond2` ne peut plus se connecter que par mot de passe.\n\n\n## Configuration\n\n### Urls\n\nVous devez rendre les pages de connexion de AuthENS accessibles, par exemple en\najoutant dans votre fichier d'urls :\n\n```python\nurlpatterns = [\n  ...\n  path(\"authens/\", include(\"authens.urls\")),\n  ...\n]\n```\n\nLa page de connexion principale de AuthENS est ensuite accessible via l'url\nnommée `authens:login`.\nLa page de déconnexion est `authens:logout`, il est important d'utiliser cette\nvue est non la vue de déconnexion par défaut de Django pour déconnecter du CAS\nen plus du site.\n\n### Dans le fichier `settings.py`\n\n- Ajouter `\"authens\"` dans les [`INSTALLED_APPS`](https://docs.djangoproject.com/en/3.0/ref/settings/#installed-apps).\n- Ajouter `\"authens.backends.ENSCASBackend\"` dans les\n  [`AUTHENTICATION_BACKENDS`](https://docs.djangoproject.com/en/3.0/ref/settings/#authentication-backends).\n  Si `AUTHENTICATION_BACKENDS` n'apparaît pas dans vos settings, utiliser :\n\n```python\nAUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"authens.backends.ENSCASBackend\",\n]\n```\n\n- Préciser l'url de connexion:\n\n```python\nLOGIN_URL = reverse_lazy(\"authens:login\")\n```\n\n- (Optionnel) Par défaut AuthENS propose les 3 modes de connexion (CAS / Vieux\n  compte CAS / mot de passe). Les modes de connexion \"Vieux compte CAS\" et\n  \"mot de passe\" peuvent être désactivés en ajoutant :\n\n```python\nAUTHENS_USE_OLDCAS = False\nAUTHENS_USE_PASSWORD = False\n```\n\n- (Optionnel) Il est possible d'autoriser la connexion via CAS pour les membres\n  de `staffs`, lorsque cette option est activée, leur promotion est fixée à 0,\n  lorsque l'option est désactivée, une tentative de connexion renvoie une erreur\n  car le format de `$HOME` n'est pas valide.\n\n```python\nAUTHENS_ALLOW_STAFF = True\n```\n\n\n- (Optionnel) AuthENS utilise le paramètre Django standard\n  [`LOGIN_REDIRECT_URL`](https://docs.djangoproject.com/en/3.0/ref/settings/#login-redirect-url)\n  par défaut pour rediriger l'utilisateurice en cas de connexion réussie.\n  Il peut être utile de définir ce paramètre.\n\n\n## Utilisation\n\nÀ lire\n\n### Création d'utilisateurices\n\nAuthENS maintient une tables des comptes clipper connus.\nCette table est automatiquement mise à jour lors qu'une personne se connecte via\nle CAS pour la première fois.\nEn revanche lorsqu'un nouveau compte est créé manuellement et que ce compte\ncorrespond à un compte clipper, il faut enregistrer ce compte auprès d'AuthENS,\nautrement le compte Django et le compte clipper seront considérés comme deux\ncomptes différents.\nAuthens fournit une fonction `register_cas_account` pour cela.\n\nExemple:\n\n```python\nfrom authens.shortcuts import register_cas_account\nfrom django.http import HttpResponseRedirect\nfrom yourapp.forms import UserCreationForm\n\ndef create_user_view(requests, cas_login: str):\n    if request.method == \"POST\":\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            register_cas_account(user, cas_login)\n            return HttpResponseRedirect(\"success.html\")\n    else:\n        form = UserCreationForm()\n\n    return render(request, \"create_user.html\", {\"form\": form}\n```\n\n\n## Utilisation avancée\n\n### Modification des templates\n\nIl est possible de supplanter les templates d'authens en activant un répertoire\nde templates dans les settings Django, puis de créer un dossier `authens` dans\ncelui-ci. Les templates à substituer sont :\n\n- `authens/login_switch.html` pour la sélection de la méthode de connexion\n- `authens/pwd_login.html` pour le formulaire de connexion par mot de passe\n- `authens/pwd_reset.html` pour le formulaire de demande de réinitialisation de\n  mot de passe\n- `authens/pwd_reset_confirm.html` pour le formulaire de réinitialisation de mot\n  de passe\n\n### Migration depuis `django_cas_ng`\n\nPour migrer depuis `django_cas_ng`, il est recommandé de faire une\n[data migration](https://docs.djangoproject.com/en/3.1/howto/writing-migrations/#migrating-data-between-third-party-apps)\net d'appliquer la fonction `register_cas_account` sur tou⋅tes les\nutilisateurices.\n\nDans le cas où certain⋅es utilisateurices n'ont pas de clipper, on peut d'abord\ntester leur existence dans le LDAP du SPI de la façon suivante:\n\n```python\nfrom authens.models impomrt CASAccount\nfrom authens.shortcuts import fetch_cas_account\n\ndef migrate_user(user: User):\n    # On regarde si `user` existe dans le LDAP du SPI\n    ldap_info = fetch_cas_account(user.username)\n    if ldap_info:\n        # Si oui, on enregiste `user` en tant que compte CAS.\n        # Les deux lignes suivantes sont équivalentes à appeler\n        # `register_cas_account(user, user.username)` mais nous économisent une\n        # requête au LDAP.\n        entrance_year = ldap_info[\"entrance_year\"]\n        CASAccount.objects.create(\n            user=user, cas_login=user.username, entrance_year=entrance_year\n        )\n```\n\n### Utilisation des signaux\n\nAuthens émet le signal `authens.signals.post_cas_connect` à chaque fois qu'un\ncompte CAS se connecte. Le signal est envoyé avec les arguments suivants :\n\n- `sender` : la classe Django utilisée pour stocker l'utilisateurice\n  (vraisemblablement la class `User` par défaut);\n\n- `instance` : l'utilisateurice concerné⋅e;\n\n- `created` : un booléen valant `True` si l'utilisateurice vient d'être créé⋅e\n  (première connexion);\n\n- `cas_login` : le login CAS de la personne;\n\n- `attributes` : un dictionnaire contenant des informations supplémentaires sur\n  le compte, fournies par le CAS.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.eleves.ens.fr/klub-dev-ens/authens",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "authens",
    "package_url": "https://pypi.org/project/authens/",
    "platform": "",
    "project_url": "https://pypi.org/project/authens/",
    "project_urls": {
      "Homepage": "https://git.eleves.ens.fr/klub-dev-ens/authens"
    },
    "release_url": "https://pypi.org/project/authens/0.1b4/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "CAS Authentication at the ENS",
    "version": "0.1b4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10520121,
  "releases": {
    "0.1b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b5f599d8efc40c444f22fbd8693f5a703f1d7d8e3a51b881622dab347192ac3",
          "md5": "0425a82fc803e491eb15a299390603bd",
          "sha256": "9fbf913985f0c8c9cab7f10131957eb3f599cd81c1a256103b1993b2fa2c8575"
        },
        "downloads": -1,
        "filename": "authens-0.1b0.tar.gz",
        "has_sig": false,
        "md5_digest": "0425a82fc803e491eb15a299390603bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 18798,
        "upload_time": "2020-07-30T10:01:57",
        "upload_time_iso_8601": "2020-07-30T10:01:57.930780Z",
        "url": "https://files.pythonhosted.org/packages/9b/5f/599d8efc40c444f22fbd8693f5a703f1d7d8e3a51b881622dab347192ac3/authens-0.1b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "123a11e3ab852c7cf54dfc3b1cdd34d67452d2ded2744dc9ebf9277bd40fb67f",
          "md5": "2d217e10de490fb1bbec449ba66d5ed1",
          "sha256": "fc4627774be17e8f44858a7a6483eb1bdffe0f3d3734408cde211d4491f7e83e"
        },
        "downloads": -1,
        "filename": "authens-0.1b1.tar.gz",
        "has_sig": false,
        "md5_digest": "2d217e10de490fb1bbec449ba66d5ed1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21155,
        "upload_time": "2021-01-21T22:35:28",
        "upload_time_iso_8601": "2021-01-21T22:35:28.253007Z",
        "url": "https://files.pythonhosted.org/packages/12/3a/11e3ab852c7cf54dfc3b1cdd34d67452d2ded2744dc9ebf9277bd40fb67f/authens-0.1b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd330bf5ad8c472d00e8abf64f563c5528ba8aed64e7fd6eb3c0d1021bb85554",
          "md5": "7040a9a508666bb6354d7f71a6b753ec",
          "sha256": "85676669aab276a265f1844ce89aa3b82bdffa9735de830e31600625a0ab2d28"
        },
        "downloads": -1,
        "filename": "authens-0.1b2.tar.gz",
        "has_sig": false,
        "md5_digest": "7040a9a508666bb6354d7f71a6b753ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21344,
        "upload_time": "2021-02-23T21:06:17",
        "upload_time_iso_8601": "2021-02-23T21:06:17.850724Z",
        "url": "https://files.pythonhosted.org/packages/cd/33/0bf5ad8c472d00e8abf64f563c5528ba8aed64e7fd6eb3c0d1021bb85554/authens-0.1b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29ad4348738112cb0940e870b90beaac563f451bfeb530efbd34928cb0a24497",
          "md5": "1dcf841d14106536b7cc3165d2766b27",
          "sha256": "fa5de088c5f562cba250bc899bd12fbb0c17d57b372ad5b5674354071602a062"
        },
        "downloads": -1,
        "filename": "authens-0.1b3.tar.gz",
        "has_sig": false,
        "md5_digest": "1dcf841d14106536b7cc3165d2766b27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21412,
        "upload_time": "2021-04-06T22:11:42",
        "upload_time_iso_8601": "2021-04-06T22:11:42.057647Z",
        "url": "https://files.pythonhosted.org/packages/29/ad/4348738112cb0940e870b90beaac563f451bfeb530efbd34928cb0a24497/authens-0.1b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "444864f1b70b8e9f06926baa99d81186f94c3ba68c75cec5ca0e5524f2bca6a7",
          "md5": "e4eee791eb87925dcefaaf4474080f11",
          "sha256": "3430c85d0c11c7ca78cba484d5dfd18e9ba3370a0f2abbdd14aafb8feb8807a5"
        },
        "downloads": -1,
        "filename": "authens-0.1b4.tar.gz",
        "has_sig": false,
        "md5_digest": "e4eee791eb87925dcefaaf4474080f11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22156,
        "upload_time": "2021-05-31T16:13:05",
        "upload_time_iso_8601": "2021-05-31T16:13:05.102392Z",
        "url": "https://files.pythonhosted.org/packages/44/48/64f1b70b8e9f06926baa99d81186f94c3ba68c75cec5ca0e5524f2bca6a7/authens-0.1b4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "444864f1b70b8e9f06926baa99d81186f94c3ba68c75cec5ca0e5524f2bca6a7",
        "md5": "e4eee791eb87925dcefaaf4474080f11",
        "sha256": "3430c85d0c11c7ca78cba484d5dfd18e9ba3370a0f2abbdd14aafb8feb8807a5"
      },
      "downloads": -1,
      "filename": "authens-0.1b4.tar.gz",
      "has_sig": false,
      "md5_digest": "e4eee791eb87925dcefaaf4474080f11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 22156,
      "upload_time": "2021-05-31T16:13:05",
      "upload_time_iso_8601": "2021-05-31T16:13:05.102392Z",
      "url": "https://files.pythonhosted.org/packages/44/48/64f1b70b8e9f06926baa99d81186f94c3ba68c75cec5ca0e5524f2bca6a7/authens-0.1b4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}