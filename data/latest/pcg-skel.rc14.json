{
  "info": {
    "author": "Casey Schneider-mizell",
    "author_email": "caseys@alleninstitute.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pcg_skel\n\nSave time by generating robust neuronal skeletons directly from a ChunkedGraph dynamic segmentations!\n\n## What you need\n\nFor skeletons you just need a dynamic segmentation running on a [PyChunkedGraph](https://github.com/seung-lab/PyChunkedGraph) server.\n\nTo also use annotations, you also need a database backend running the [MaterializationEngine](https://github.com/seung-lab/MaterializationEngine).\n\n## Key terms\n\nIds in the PCG combine information about chunk level, spatial location, and unique object id.\nThis package uses the highest-resolution chunking, level 2, to derive neuronal topology and approximate spatial extent.\nFor clarity, I'll define a few terms:\n\n* *L2 object*: Collection of attributes (supervoxels, mesh, etc) associated with a level 2 id.\n\n* *L2 mesh*: The fragment of mesh associated with a level 2 id.\n\n* *Chunk index/chunk index space*: The integer 3-d index of a chunk in the the grid that covers the volume, i.e. the chunk index space.\n\n* *Euclidean position/Euclidean space*: A position in nanometers / biological space.\n\n* *Chunk position*: The center of a specific chunk index in Euclidean space\n\n* *Refinement*: Mapping the position of an L2 object from its chunk position to a more representitive point on the mesh.\n\n## How to use\n\nThere are a few potentially useful functions with progressively more features:\n\n### chunk_index_skeleton\n\nThis function returns a meshparty skeleton with vertices given in chunk index space.\n\n```python\ndef chunk_index_skeleton(root_id,\n                         client=None,\n                         datastack_name=None,\n                         cv=None,\n                         root_point=None,\n                         invalidation_d=3,\n                         return_mesh=False,\n                         return_l2dict=False,\n                         return_mesh_l2dict=False,\n                         root_point_resolution=[4, 4, 40],\n                         root_point_search_radius=300,\n                         n_parallel=1):\n```\n\n#### Notes\n\n* A `CAVEclient` or `datastack_name` must be provided, and a cloudvolume object is suggested for performance reasons, especially if running in bulk.\n\n* If `root_point` is set, the function looks within `root_point_search_radius` for the closest point in the root_id segmentation and sets the associated level 2 ID as the root vertex. `root_point_search_radius` is in nanometers. `root_point` is in units of `root_point_resolution`, such that root_point * root_point_resolution should be correct in Euclidean space.\n\n* `return_mesh` will also return the full graph of level 2 objects as a `meshparty.Mesh` that has no faces and uses only link edges. Vertices are in chunk index space.\n\n* `return_l2dict` will also return a tuple of two dictionaries. The first, `l2dict`, is a dict mapping level 2 id to skeleton vertex index. This is one to many, since it includes passing through multiple level 2 ids that belong to the mesh and are collapsed into a common skeleton vertex. The second, `l2dict_reversed`, is a dict mapping skeleton vertex to level 2 id. This is one to one.\n\n* `return_mesh_l2dict` will return an additional tuple of two dictionaries. The first maps level 2 ids to mesh vertices, the second mesh vertex index to level 2 id.\n\n* `n_parallel` is passed directly to cloudvolume and can speed up mesh fragment downloading.\n\n---\n\n### refine_chunk_index_skeleton\n\nMap a skeleton in chunk index space into Euclidean space.\n\n```python\ndef refine_chunk_index_skeleton(\n    sk_ch,\n    l2dict_reversed,\n    cv,\n    refine_inds='all',\n    scale_chunk_index=True,\n    root_location=None,\n    nan_rounds=20,\n    return_missing_ids=False,\n):\n```\n\n#### Notes\n\n* `sk_ch` is assumed to have positions in chunk index space.\n\n* `l2dict_reversed` is the second dict that comes back in the tuple you get by setting `return_l2dict` to `True` in `chunk_index_skeleton`.\n\n* `refine_inds` can be either `\"all\"` or a specific array of vertex indices. This parameter sets which vertices to refine. A handful of vertices can be processed very quickly, while a more accurate skeleton is generated by refining all vertices.\n\n* `scale_chunk_index`, if True, will still map unrefined vertex indices from their chunk index into the chunk position in eucliden space.\n\n* `nan_rounds` gives how many times to try to smoothly interpolate any vertices that did not get a position due to a missing L2 mesh fragment.\n\n* `return_missing_ids` will also return a list of the ids of any missing L2 mesh fragment, for example if you want to re-run meshing on them.\n\n---\n\n### pcg_skeleton\n\nDirectly build a skeleton in Euclidean space, plus optionally handle soma points.\n\n```python\ndef pcg_skeleton(root_id,\n                 client=None,\n                 datastack_name=None,\n                 cv=None,\n                 refine='all',\n                 root_point=None,\n                 root_point_resolution=[4, 4, 40],\n                 root_point_search_radius=300,\n                 collapse_soma=False,\n                 collapse_radius=10_000.0,\n                 invalidation_d=3,\n                 return_mesh=False,\n                 return_l2dict=False,\n                 return_l2dict_mesh=False,\n                 return_missing_ids=False,\n                 nan_rounds=20,\n                 n_parallel=1):\n```\n\n#### Notes\n\n* `refine` can take five values to determine which vertices to refine.\n    1. `\"all\"`: Refine all vertices\n    2. `\"ep\"`: Refine only end points.\n    3. `\"bp\"`: Refine only branch points.\n    4. `\"bpep\"` or `\"epbp\"`: Refine both branch and end points.\n    5. `None`: Don't refine any vertex, but still map chunk positions coarsely.\n\n    Options which download few mesh fragments are much faster than `\"all\"`.\n\n* `collapse_soma`, if set to True, collapses all mesh vertices within `collapse_radius` into the root point.\nNote that the root point is not a new point, but rather the closest level 2 object to the root point location.\n\n---\n\n### pcg_meshwork\n\nBuild a meshwork file with skeleton out from the level 2 graph.\nOptionally, attach pre- and/or post-synaptic synapses.\n\n```python\ndef pcg_meshwork(root_id,\n                 datastack_name=None,\n                 client=None,\n                 cv=None,\n                 refine='all',\n                 root_point=None,\n                 root_point_resolution=[4, 4, 40],\n                 root_point_search_radius=300,\n                 collapse_soma=False,\n                 collapse_radius=DEFAULT_COLLAPSE_RADIUS,\n                 synapses=None,\n                 synapse_table=None,\n                 remove_self_synapse=True,\n                 invalidation_d=3,\n                 n_parallel=4,\n                 ):\n```\n\n#### Notes\n\n* The resulting meshwork file comes back with a \"mesh\" made out of the level 2 graph with vertices mapped to their chunk positions, a skeleton with `refine` and `collapse_soma` options as above, and one or more annotations.\n\n* All resulting meshworks have the annotation `lvl2_ids`, which is based on a dataframe with column `lvl2_id` that has level 2 ids and `mesh_ind` that has the associated mesh index.\nOne can use the MeshIndex/SkeletonIndex properties like `nrn.anno.mesh_index.to_skel_index` to see the associated skeleton indices.\n\n* If the `synapses` property is set to `\"pre\"`, `\"post\"`, or `\"all\"`, there is also an attempt to look up the root id's presynaptic synapses, postsynaptic synapses, or both (respectively).\nPresynaptic synapses are in an annotation `\"pre_syn\"` and postsynaptic synapses are in an annotation called `\"post_syn\"`.\n\n* If returning synapses, you must set the synapse table.\nBy default, synapses whose pre- and post-synaptic ids are both the same root id are excluded, but this can be turned off by setting `remove_self_synapse` to `False`.\n\n## Example\n\nA minimal example to get the skeleton of an arbitrary neuron with root id `864691135761488438` and soma at the voxel-space location `253870, 236989, 20517` in the Minnie dataset:\n\n```python\nfrom caveclient import CAVEclient\nimport pcg_skel\n\nclient = CAVEclient('minnie65_phase3_v1')\n\noid = 864691135761488438 # Root id\nroot_point = [253870, 236989, 20517] # root point in vertex coordinates\nsk_l2 = pcg_skel.pcg_skeleton(oid,\n                              client=client,\n                              refine='all',\n                              root_point=root_point,\n                              root_point_resolution=[4,4,40],\n                              collapse_soma=True,\n                              n_parallel=8)\n```\n\nTo generate a skeleton with 1310 vertices took about 80 seconds on a 2019 MacBook Pro, all refined through the mesh fragments.\nMost of the time is spent in refinement.\nIf you just select the `refine=\"epbp\"` argument, it only refines the 79 branch and end points and accordingly takes a mere 12.5 seconds.\nIt is worth exploring sparse refinement options and interpolation if processing time is extremely important.\n\n## Caching\n\nA common use case is to have a set of neurons that you are analyzing while proofreading is still ongoing.\nHowever, because proofreading events leave most of the neuron unchanged we shouldn't need to do more than update new locations.\nConveniently, the level 2 ids let us follow this intuition.\nWhile a neuron's root id changes for each proofreading event, the level 2 id only changes if an edit occurs exactly within that region.\nTherefore, once we've looked up a level 2 id once, we can cache it and save time for future iterations on the same neuron.\n\nThe current implementation of caching uses [SQLiteDict](https://github.com/piskvorky/sqlitedict), a simple means of using a sqlite file as a persistent key-value store.\nThe cache is used with the functions `refine_vertices`, `pcg_skeleton`, and `pcg_meshwork` if you specify the filename of the sqlite database.\nFor example,\n\n```python\nsk_l2 = pcg_skel.pcg_skeleton(oid,\n                              ...,\n                              cache='l2_cache.sqlite',\n                              save_to_cache=False,\n                              )\n```\n\nNote that if the database is not yet present, it will be created automatically.\n\nIn order to avoid unintentional changes, new locations are not saved to the database by default.\nIf you want to save new ids to the database as you are skeletonizing files, set the additional parameter `save_to_cache=True`.\nFor adding data to the database post-hoc, please use the function `chunk_cache.save_ids_to_cache()`.\n\n## Segmentation-based localization\n\nLocalizing level 2 ids with mesh fragments is much faster than downloading the segmentation for a whole chunk just to get a few supervoxels, but sometimes mesh fragments don't exist.\nThis can occur for both good reasons (the L2 object is too small to get a mesh) and due to bugs in the meshing backend.\nHowever, if you really want to get such locations correct, falling back to the segmentation is available.\n\nYou can use this by setting the `segmentation_fallback` option on any of the functions that localize vertices.\nFor example,\n\n```python\nsk_l2 = pcg_skel.pcg_skeleton(oid,\n                              ...,\n                              segmentation_fallback=True,\n                              fallback_mip=2,\n                              )\n```\n\nSetting `segmentation_fallback=True` activates the capability, and setting `fallback_mip` will choose the MIP-level to use (2 by default).\nIf the chosen MIP does not have voxels for the L2 id in it, it will try 0 next.\nSegmentation-based points will be cached if both features are used.\n\nNote that this approach is much slower and more memory intensive than using the mesh fragments.\nI have found it to take 4-8 seconds per vertex with the current implementation, although parallelation helps.\n\n## To-dos\n\n* Improve/document/test tooling for additional annotations.\n* Alternative key-value stores for caching\n\n## Credit\n\nThis work is by Casey Schneider-Mizell (caseys@alleninstitute.org) with suggestions from Sven Dorkenwald and Forrest Collman.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AllenInstitute/pcg_skel",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pcg-skel",
    "package_url": "https://pypi.org/project/pcg-skel/",
    "platform": null,
    "project_url": "https://pypi.org/project/pcg-skel/",
    "project_urls": {
      "Homepage": "https://github.com/AllenInstitute/pcg_skel"
    },
    "release_url": "https://pypi.org/project/pcg-skel/0.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Skeletonization using the pychunkedgraph",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16477106,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cab1d7cd8c357a3e00d76601da0e5fe16d6ea54122a6839aff1e20d03d70880b",
          "md5": "74f4ea8359e2fd2ca0dd9e4d4760e5f4",
          "sha256": "bdad62518c268e1e968ae24ed76518a0d1f51c340e5a4634db89c3aa7b10de90"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "74f4ea8359e2fd2ca0dd9e4d4760e5f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19820,
        "upload_time": "2021-02-11T22:17:33",
        "upload_time_iso_8601": "2021-02-11T22:17:33.061032Z",
        "url": "https://files.pythonhosted.org/packages/ca/b1/d7cd8c357a3e00d76601da0e5fe16d6ea54122a6839aff1e20d03d70880b/pcg_skel-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68a2253744c88c43f17fb968a49458a80fe53110b585eb69978225a904e9a4ae",
          "md5": "67f5813735f2e043504382903f780619",
          "sha256": "14aef10c540e8a20ff269163ffcaedee1243833f199dbfc8006efbde81926fc7"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67f5813735f2e043504382903f780619",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20495,
        "upload_time": "2021-02-13T23:41:41",
        "upload_time_iso_8601": "2021-02-13T23:41:41.413354Z",
        "url": "https://files.pythonhosted.org/packages/68/a2/253744c88c43f17fb968a49458a80fe53110b585eb69978225a904e9a4ae/pcg_skel-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "680ae02ad3f6f995d9f1344ec0682e6e92f9ad78993116a81f60fdca86e15e91",
          "md5": "e2dbdd72d3df889ed61955319a401f6e",
          "sha256": "6ad2b6e02f6054d0849e60287c79520b68a2f07441a1da9b5b3463a0c16da359"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e2dbdd72d3df889ed61955319a401f6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20678,
        "upload_time": "2021-02-14T03:24:46",
        "upload_time_iso_8601": "2021-02-14T03:24:46.586877Z",
        "url": "https://files.pythonhosted.org/packages/68/0a/e02ad3f6f995d9f1344ec0682e6e92f9ad78993116a81f60fdca86e15e91/pcg_skel-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e69fe0ec8665f1e92c0975a5e4c7858855324ea2c244bac035354a6c85f51ce",
          "md5": "36c2daae0c76a6305c5f0c2d7f8b8e1d",
          "sha256": "8d073805249b0252f6d5953f84c23b3761ea55c20d98eb4535733e66e4b464da"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "36c2daae0c76a6305c5f0c2d7f8b8e1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21726,
        "upload_time": "2021-02-24T19:51:27",
        "upload_time_iso_8601": "2021-02-24T19:51:27.722668Z",
        "url": "https://files.pythonhosted.org/packages/1e/69/fe0ec8665f1e92c0975a5e4c7858855324ea2c244bac035354a6c85f51ce/pcg_skel-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73ff51558a906ff045d4b66346ace6e52063f492c81e6cc3b9b19b51fa0d1030",
          "md5": "428b3ba3306016ef59716b0b9c029f2c",
          "sha256": "ec579b50aed2023bed93ff013fb796e464decad33c2bed06969fd5842617a343"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "428b3ba3306016ef59716b0b9c029f2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21460,
        "upload_time": "2021-03-03T20:46:05",
        "upload_time_iso_8601": "2021-03-03T20:46:05.823373Z",
        "url": "https://files.pythonhosted.org/packages/73/ff/51558a906ff045d4b66346ace6e52063f492c81e6cc3b9b19b51fa0d1030/pcg_skel-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68c6cb74bf0e7945d9e1f0fdb872cfb70762f70d2d3c332467c458fde37ff3d9",
          "md5": "974671c5d10432b549a8182c9b74d8a5",
          "sha256": "502a6826debec78ca869fac2ecd6765cfeffc77d3b4cac432f520b69576c3e17"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "974671c5d10432b549a8182c9b74d8a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21773,
        "upload_time": "2021-04-10T19:29:27",
        "upload_time_iso_8601": "2021-04-10T19:29:27.527109Z",
        "url": "https://files.pythonhosted.org/packages/68/c6/cb74bf0e7945d9e1f0fdb872cfb70762f70d2d3c332467c458fde37ff3d9/pcg_skel-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92c1b1e80e9214eb9a326937a3442dae609492d6eb3a55c12a35d1bf8ab80db3",
          "md5": "e5bd3c6093fe443e073edcd9c2e5147e",
          "sha256": "e01ccf9374902ed65f4040afbddae43a2102af6b867b083eb3d9f137f6591d54"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "e5bd3c6093fe443e073edcd9c2e5147e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21863,
        "upload_time": "2021-05-06T04:23:06",
        "upload_time_iso_8601": "2021-05-06T04:23:06.705128Z",
        "url": "https://files.pythonhosted.org/packages/92/c1/b1e80e9214eb9a326937a3442dae609492d6eb3a55c12a35d1bf8ab80db3/pcg_skel-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c77cc0a1f2a45a88d14640d2b30b0c74aea652eb2714c7819bcf57536481dda6",
          "md5": "a61be176c31e69b18f1e9f63ab94cabe",
          "sha256": "d77986b5549474c26560c3f69787d6ae57564fe9c69c19a9e477e53d6b5785dd"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a61be176c31e69b18f1e9f63ab94cabe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22023,
        "upload_time": "2021-05-06T18:15:00",
        "upload_time_iso_8601": "2021-05-06T18:15:00.669201Z",
        "url": "https://files.pythonhosted.org/packages/c7/7c/c0a1f2a45a88d14640d2b30b0c74aea652eb2714c7819bcf57536481dda6/pcg_skel-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f34b22975c0b7b3548663db99056c5538a3b288b07f33b2f73aaefa510ecd3ae",
          "md5": "4ef991ff1fdc5a417b2517b5f0bbe856",
          "sha256": "089dc4c85c715ea0ec788c1db7b55e731533b0df2cba987acd1ab998888e00a8"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4ef991ff1fdc5a417b2517b5f0bbe856",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22433,
        "upload_time": "2021-07-02T19:15:55",
        "upload_time_iso_8601": "2021-07-02T19:15:55.988634Z",
        "url": "https://files.pythonhosted.org/packages/f3/4b/22975c0b7b3548663db99056c5538a3b288b07f33b2f73aaefa510ecd3ae/pcg_skel-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8af6527110571838c61cfcbd20c2395cb1407380becb7360f601be31e5a43698",
          "md5": "5c87ade6aa3ed43336d5557b0cc530d9",
          "sha256": "45cfc75febd91a881c31c9588066327932017c07adedb7c4a925ec7fc20816a1"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c87ade6aa3ed43336d5557b0cc530d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25797,
        "upload_time": "2022-01-14T14:55:37",
        "upload_time_iso_8601": "2022-01-14T14:55:37.587398Z",
        "url": "https://files.pythonhosted.org/packages/8a/f6/527110571838c61cfcbd20c2395cb1407380becb7360f601be31e5a43698/pcg_skel-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a7358cb633fe29beedeaa372ea3e2038f4cdea95149daeb71da1d0cb72dce6e",
          "md5": "6e5970cd232daaac7e358f0aa9c0f2de",
          "sha256": "785c2f13274afd6d2a1f800287ee9b3101610586325fdb3cc9f8c976eaff0c69"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6e5970cd232daaac7e358f0aa9c0f2de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25803,
        "upload_time": "2022-01-22T17:39:54",
        "upload_time_iso_8601": "2022-01-22T17:39:54.521586Z",
        "url": "https://files.pythonhosted.org/packages/1a/73/58cb633fe29beedeaa372ea3e2038f4cdea95149daeb71da1d0cb72dce6e/pcg_skel-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bd52c781ffc9b50d83e965aa90a5019ad5a98fb58936cf2d04ff6d1cfcfa182",
          "md5": "3a7709cf3a8a217401e2e71da30d37f6",
          "sha256": "50fd49138008a6c7e966277aba83df5c84f3241669c058d81c35624eaa846c58"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3a7709cf3a8a217401e2e71da30d37f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25521,
        "upload_time": "2022-03-17T18:13:40",
        "upload_time_iso_8601": "2022-03-17T18:13:40.420479Z",
        "url": "https://files.pythonhosted.org/packages/2b/d5/2c781ffc9b50d83e965aa90a5019ad5a98fb58936cf2d04ff6d1cfcfa182/pcg_skel-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b116d34816ff59793a7e02b04431b663910210ce92c7d909fb62071d6f81486",
          "md5": "1551072062667b2eb8419199b3341d91",
          "sha256": "6e75ce1254a93de4bf5734064173dc037b215d2e4e89e66d3a4f87c8f90019db"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1551072062667b2eb8419199b3341d91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28230,
        "upload_time": "2022-05-20T23:01:17",
        "upload_time_iso_8601": "2022-05-20T23:01:17.353580Z",
        "url": "https://files.pythonhosted.org/packages/4b/11/6d34816ff59793a7e02b04431b663910210ce92c7d909fb62071d6f81486/pcg_skel-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acb6060148524b1224ec891152070710cde9e3d49cdd4d3a981edc9a900adbfe",
          "md5": "0f9f1fb3ed59300935900b5f9159e38c",
          "sha256": "da3d9790bf82a7ea82d76bef16da9e7537423520eaecc480accbf4878d514c77"
        },
        "downloads": -1,
        "filename": "pcg_skel-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f9f1fb3ed59300935900b5f9159e38c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25802,
        "upload_time": "2023-01-18T21:58:48",
        "upload_time_iso_8601": "2023-01-18T21:58:48.563587Z",
        "url": "https://files.pythonhosted.org/packages/ac/b6/060148524b1224ec891152070710cde9e3d49cdd4d3a981edc9a900adbfe/pcg_skel-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "acb6060148524b1224ec891152070710cde9e3d49cdd4d3a981edc9a900adbfe",
        "md5": "0f9f1fb3ed59300935900b5f9159e38c",
        "sha256": "da3d9790bf82a7ea82d76bef16da9e7537423520eaecc480accbf4878d514c77"
      },
      "downloads": -1,
      "filename": "pcg_skel-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0f9f1fb3ed59300935900b5f9159e38c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25802,
      "upload_time": "2023-01-18T21:58:48",
      "upload_time_iso_8601": "2023-01-18T21:58:48.563587Z",
      "url": "https://files.pythonhosted.org/packages/ac/b6/060148524b1224ec891152070710cde9e3d49cdd4d3a981edc9a900adbfe/pcg_skel-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}