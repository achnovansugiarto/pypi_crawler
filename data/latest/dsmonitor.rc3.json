{
  "info": {
    "author": "taojinmin",
    "author_email": "taojinmin1996@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# <a href=\"#EN\">English</a>\n## 安装\n```bash\npip3 install DSMonitor\n```\n\n## 使用方法\n假设有以下这一段代码在服务器上运行，我们希望运行时可以看到程序的运行状况，那么可以使用DSMonitor给你的函数添加装饰器：\n\n```python\nfrom DSMonitor import func_monitor  #0.0.30\nimport time\nimport random\n\n@func_monitor(level=\"INFO\",show_output=True)\ndef add(b):\n    time.sleep(random.random())\n    a = 1+b\n    return 2\n\n@func_monitor(level=\"DEBUG\")\ndef sub(x):\n    u = x**2\n    y = u-x\n    return y\n\nfor i in range(10):\n    add(i)\n    sub(i)\n\n```\n\n那么我们将在终端看到:\n\n```bash\n[2020-09-05  15:27:11] INFO func: add, input: {'b': 0}, output: type 'int', memory cost: 112, time cost: 0.878, output detail: 2\n[2020-09-05  15:27:11] DEBUG func: sub, input: {'x': 0}, output: type 'int', memory cost: 112, time cost: 0.000, locals: {'y': 0, 'u': 0, 'x': 0}\n[2020-09-05  15:27:12] INFO func: add, input: {'b': 1}, output: type 'int', memory cost: 112, time cost: 0.973, output detail: 2\n[2020-09-05  15:27:12] DEBUG func: sub, input: {'x': 1}, output: type 'int', memory cost: 112, time cost: 0.000, locals: {'y': 0, 'u': 1, 'x': 1}\n[2020-09-05  15:27:13] INFO func: add, input: {'b': 2}, output: type 'int', memory cost: 112, time cost: 0.799, output detail: 2\n[2020-09-05  15:27:13] DEBUG func: sub, input: {'x': 2}, output: type 'int', memory cost: 112, time cost: 0.000, locals: {'y': 2, 'u': 4, 'x': 2}\n[2020-09-05  15:27:13] INFO func: add, input: {'b': 3}, output: type 'int', memory cost: 112, time cost: 0.735, output detail: 2\n```\n\nfunc_monitor 将函数的输入、输出类型、用时、占用内存打印在了终端上，并且可以设置参数level、show_output的值来决定是否将栈帧、返回结果也一并输出\n\n上面是在同步函数场景下的用法,如果你希望对异步函数也实现同样的操作,DSMonitor也提供了async_func_monitor,例如:\n\n```python\nfrom DSMonitor import func_monitor, async_func_monitor\nimport aiohttp\nimport asyncio\n\n@func_monitor(level=\"DEBUG\",show_output=True)\ndef func():\n    a = 1\n    b = 2\n    return a+b\n\n\n@async_func_monitor(level=\"INFO\",show_output=True)\nasync def async_func(n):\n    async with aiohttp.ClientSession() as client:\n        res = await client.get('http://httpbin.org/delay/{}'.format(2))\n        result = await res.json()\n\n\nif __name__ == \"__main__\":\n    func()\n    loop = asyncio.get_event_loop()\n    for i in range(3):\n        loop.run_until_complete(async_func(i))\n```\n运行这段代码,我们将在终端看到:\n```bash\n[2020-09-06  10:23:07] DEBUG func: func, input: {}, output: type 'int', memory cost: 112, time cost: 0.000, locals: {'b': 2, 'a': 1}, output detail: 3\n[2020-09-06  10:23:09] INFO (async)func: async_func, input: {'n': 0}, output: type 'NoneType', memory cost: 112, time cost: 2.478, output detail: None\n[2020-09-06  10:23:12] INFO (async)func: async_func, input: {'n': 1}, output: type 'NoneType', memory cost: 112, time cost: 2.464, output detail: None\n[2020-09-06  10:23:15] INFO (async)func: async_func, input: {'n': 2}, output: type 'NoneType', memory cost: 112, time cost: 3.034, output detail: None\n```\n需要说明的是,如果你的异步函数是一个异步生成器,上面的async_func_monitor不会奏效.DSMonitor考虑到了这种情况,并且给出了async_generator_monitor的解决方案:\n```python\nfrom DSMonitor import func_monitor, async_func_monitor, async_generator_monitor\nimport asyncio\n\nasync def async_gen(n):\n    async for i in foo(1):\n        print(i)\n\n@async_generator_monitor()\nasync def foo(x):\n    while x < 10:\n        yield x\n        x+= 1\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_gen(0))\n```\n运行这段代码,将在终端得到\n```bash\n[2020-09-06  12:45:20] INFO (async)func: foo, input: {'x': 1}, output: type 'async_generator', memory cost: 112, time cost: 0.000\n<async_generator object new_func at 0x7f1d92f55f50>\n```\n\n\n<a name=\"EN\"></a>\n## EN\n\n## Installation\n```bash\npip3 install DSMonitor\n```\n# Instructions\nAssuming that the following piece of code is running on the server, and we want to see the running status of the program at runtime, you can use DSMonitor to add decorators to your functions:\n\n```python\nfrom DSMonitor import func_monitor  #0.0.30\nimport time\nimport random\n\n@func_monitor(level=\"INFO\",show_output=True)\ndef add(b):\n    time.sleep(random.random())\n    a = 1+b\n    return 2\n\n@func_monitor(level=\"DEBUG\")\ndef sub(x):\n    u = x**2\n    y = u-x\n    return y\n\nfor i in range(10):\n    add(i)\n    sub(i)\n\n```\nThen we will see in the terminal:\n\n```bash\n[2020-09-05  15:27:11] INFO func: add, input: {'b': 0}, output: type 'int', memory cost: 112, time cost: 0.878, output detail: 2\n[2020-09-05  15:27:11] DEBUG func: sub, input: {'x': 0}, output: type 'int', memory cost: 112, time cost: 0.000, locals: {'y': 0, 'u': 0, 'x': 0}\n[2020-09-05  15:27:12] INFO func: add, input: {'b': 1}, output: type 'int', memory cost: 112, time cost: 0.973, output detail: 2\n[2020-09-05  15:27:12] DEBUG func: sub, input: {'x': 1}, output: type 'int', memory cost: 112, time cost: 0.000, locals: {'y': 0, 'u': 1, 'x': 1}\n[2020-09-05  15:27:13] INFO func: add, input: {'b': 2}, output: type 'int', memory cost: 112, time cost: 0.799, output detail: 2\n[2020-09-05  15:27:13] DEBUG func: sub, input: {'x': 2}, output: type 'int', memory cost: 112, time cost: 0.000, locals: {'y': 2, 'u': 4, 'x': 2}\n[2020-09-05  15:27:13] INFO func: add, input: {'b': 3}, output: type 'int', memory cost: 112, time cost: 0.735, output detail: 2\n```\nfunc_monitor prints the input, output type, time used, and memory usage of the function on the terminal, and can set the value of the parameter level and show_output to determine whether to output the stack frame and return result together\n\nThe above is the usage in the synchronous function scenario. If you want to implement the same operation for asynchronous functions, dsmonitor also provides async_func_monitor, for example:\n```python\nfrom DSMonitor import func_monitor, async_func_monitor\nimport aiohttp\nimport asyncio\n  \n@func_monitor(level=\"DEBUG\",show_output=True)\ndef func():\n    a = 1\n    b = 2\n    return a+b\n\n\n@async_func_monitor(level=\"INFO\",show_output=True)\nasync def async_func(n):\n    async with aiohttp.ClientSession() as client:\n        res = await client.get('http://httpbin.org/delay/{}'.format(2))\n        result = await res.json()\n\n\nif __name__ == \"__main__\":\n    func()\n    loop = asyncio.get_event_loop()\n    for i in range(3):\n        loop.run_until_complete(async_func(i))\n```\nrunning this code, we will see in the terminal:\n```bash\n[2020-09-06  10:23:07] DEBUG func: func, input: {}, output: type 'int', memory cost: 112, time cost: 0.000, locals: {'b': 2, 'a': 1}, output detail: 3\n[2020-09-06  10:23:09] INFO (async)func: async_func, input: {'n': 0}, output: type 'NoneType', memory cost: 112, time cost: 2.478, output detail: None\n[2020-09-06  10:23:12] INFO (async)func: async_func, input: {'n': 1}, output: type 'NoneType', memory cost: 112, time cost: 2.464, output detail: None\n[2020-09-06  10:23:15] INFO (async)func: async_func, input: {'n': 2}, output: type 'NoneType', memory cost: 112, time cost: 3.034, output detail: None\n```\nIt should be noted that if your asynchronous function is an asynchronous generator, above async_func_monitor doesn't work. DSMonitor takes this into account and gives async_generator_monitor solution:\n```python\nfrom DSMonitor import func_monitor, async_func_monitor, async_generator_monitor\nimport asyncio\n\nasync def async_gen(n):\n    async for i in foo(1):\n        print(i)\n\n@async_generator_monitor()\nasync def foo(x):\n    while x < 10:\n        yield x\n        x+= 1\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_gen(0))\n```\nrun this code, you will get\n```bash\n[2020-09-06  12:45:20] INFO (async)func: foo, input: {'x': 1}, output: type 'async_generator', memory cost: 112, time cost: 0.000\n<async_generator object new_func at 0x7f1d92f55f50>\n```\n\n## History\n### 0.0.30\n- func_monitor finished\n### 0.1.10\n- add async_func_monitor\n### 0.1.20\n- add async_generator_monitor",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/taojinmin/DSMonitor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DSMonitor",
    "package_url": "https://pypi.org/project/DSMonitor/",
    "platform": "",
    "project_url": "https://pypi.org/project/DSMonitor/",
    "project_urls": {
      "Homepage": "https://github.com/taojinmin/DSMonitor"
    },
    "release_url": "https://pypi.org/project/DSMonitor/0.1.20/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A tool that allows you to dynamically observe the running status of Python programs",
    "version": "0.1.20",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8122577,
  "releases": {
    "0.0.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68cf0212c8a078aeacd368d6f41b642f1548370136c367a9944d2f3e2ac5258d",
          "md5": "0cfa52c643d0e1ae523448fda8d658d3",
          "sha256": "132df0472730454f12bbd9e992505533486c9c757c32a2bd6329741b5a80c415"
        },
        "downloads": -1,
        "filename": "DSMonitor-0.0.30.tar.gz",
        "has_sig": false,
        "md5_digest": "0cfa52c643d0e1ae523448fda8d658d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3014,
        "upload_time": "2020-09-05T07:14:14",
        "upload_time_iso_8601": "2020-09-05T07:14:14.376707Z",
        "url": "https://files.pythonhosted.org/packages/68/cf/0212c8a078aeacd368d6f41b642f1548370136c367a9944d2f3e2ac5258d/DSMonitor-0.0.30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "581c0d188c8af3502aa4de183939d1484639ba83e4482f6dcdd122753bbeef5b",
          "md5": "e28b776b44e8f8751205db91ddd370ea",
          "sha256": "c3e10c48aef6efdf33a8edbd2bd87438e4a0567e0870e242e9663bf2ff9306ec"
        },
        "downloads": -1,
        "filename": "DSMonitor-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "e28b776b44e8f8751205db91ddd370ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5088,
        "upload_time": "2020-09-06T02:50:24",
        "upload_time_iso_8601": "2020-09-06T02:50:24.135023Z",
        "url": "https://files.pythonhosted.org/packages/58/1c/0d188c8af3502aa4de183939d1484639ba83e4482f6dcdd122753bbeef5b/DSMonitor-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6f00ee42c0b5470c73960e0aec0d2df8f5c5dda8fa68466aa0ebd48ee81b58f",
          "md5": "85f28b824c0bc301a74f2e68ab46c1d6",
          "sha256": "fd7b87d6d474357b0ca49e0c37e42ce697689ec6bc2cc6845ca3c05457d47381"
        },
        "downloads": -1,
        "filename": "DSMonitor-0.1.20.tar.gz",
        "has_sig": false,
        "md5_digest": "85f28b824c0bc301a74f2e68ab46c1d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5660,
        "upload_time": "2020-09-06T04:56:54",
        "upload_time_iso_8601": "2020-09-06T04:56:54.859560Z",
        "url": "https://files.pythonhosted.org/packages/d6/f0/0ee42c0b5470c73960e0aec0d2df8f5c5dda8fa68466aa0ebd48ee81b58f/DSMonitor-0.1.20.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6f00ee42c0b5470c73960e0aec0d2df8f5c5dda8fa68466aa0ebd48ee81b58f",
        "md5": "85f28b824c0bc301a74f2e68ab46c1d6",
        "sha256": "fd7b87d6d474357b0ca49e0c37e42ce697689ec6bc2cc6845ca3c05457d47381"
      },
      "downloads": -1,
      "filename": "DSMonitor-0.1.20.tar.gz",
      "has_sig": false,
      "md5_digest": "85f28b824c0bc301a74f2e68ab46c1d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5660,
      "upload_time": "2020-09-06T04:56:54",
      "upload_time_iso_8601": "2020-09-06T04:56:54.859560Z",
      "url": "https://files.pythonhosted.org/packages/d6/f0/0ee42c0b5470c73960e0aec0d2df8f5c5dda8fa68466aa0ebd48ee81b58f/DSMonitor-0.1.20.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}